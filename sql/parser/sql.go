// Code generated by go yacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"errors"
	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/sql/privilege"
	"github.com/cockroachdb/cockroach/util"
)

var errUnimplemented = errors.New("unimplemented")

func unimplemented() {
	panic(errUnimplemented)
}

func unimplementedWithIssue(issue int) {
	panic(util.UnimplementedWithIssueErrorf(issue, ""))
}

//line sql.y:43

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new sytax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in two forms, depending on the
// type of the value being accessed. Values and pointers are directly
// type asserted from the empty interface, meaning that they will panic
// if the type assertion is incorrect. Interfaces are handled differently
// because a nil instance of an interface inserted into the empty interface
// becomes a nil instance of the empty interface and therefore will fail a
// direct type assertion. Instead, a guarded type assertion must be used,
// which returns nil if the type assertion fails.
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	return u.val.(*StrVal)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) qname() *QualifiedName {
	return u.val.(*QualifiedName)
}
func (u *sqlSymUnion) qnames() QualifiedNames {
	return u.val.(QualifiedNames)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) indirectElem() IndirectionElem {
	if indirectElem, ok := u.val.(IndirectionElem); ok {
		return indirectElem
	}
	return nil
}
func (u *sqlSymUnion) indirect() Indirection {
	return u.val.(Indirection)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	if selectStmt, ok := u.val.(*Select); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	if selectStmt, ok := u.val.(SelectStatement); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	if constraintDef, ok := u.val.(ConstraintTableDef); ok {
		return constraintDef
	}
	return nil
}
func (u *sqlSymUnion) tblDef() TableDef {
	if tblDef, ok := u.val.(TableDef); ok {
		return tblDef
	}
	return nil
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() ColumnQualification {
	if colQual, ok := u.val.(ColumnQualification); ok {
		return colQual
	}
	return nil
}
func (u *sqlSymUnion) colQuals() []ColumnQualification {
	return u.val.([]ColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retExprs() ReturningExprs {
	return ReturningExprs(u.val.(SelectExprs))
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	if tblExpr, ok := u.val.(TableExpr); ok {
		return tblExpr
	}
	return nil
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	if joinCond, ok := u.val.(JoinCond); ok {
		return joinCond
	}
	return nil
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	if alterTableCmd, ok := u.val.(AlterTableCmd); ok {
		return alterTableCmd
	}
	return nil
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}

//line sql.y:275
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PARAM = 57351
const TYPECAST = 57352
const DOT_DOT = 57353
const LESS_EQUALS = 57354
const GREATER_EQUALS = 57355
const NOT_EQUALS = 57356
const ERROR = 57357
const ACTION = 57358
const ADD = 57359
const ALL = 57360
const ALTER = 57361
const ANALYSE = 57362
const ANALYZE = 57363
const AND = 57364
const ANY = 57365
const ARRAY = 57366
const AS = 57367
const ASC = 57368
const ASYMMETRIC = 57369
const AT = 57370
const BEGIN = 57371
const BETWEEN = 57372
const BIGINT = 57373
const BIT = 57374
const BLOB = 57375
const BOOL = 57376
const BOOLEAN = 57377
const BOTH = 57378
const BY = 57379
const BYTEA = 57380
const BYTES = 57381
const CASCADE = 57382
const CASE = 57383
const CAST = 57384
const CHAR = 57385
const CHARACTER = 57386
const CHARACTERISTICS = 57387
const CHECK = 57388
const COALESCE = 57389
const COLLATE = 57390
const COLLATION = 57391
const COLUMN = 57392
const COLUMNS = 57393
const COMMIT = 57394
const COMMITTED = 57395
const CONCAT = 57396
const CONFLICT = 57397
const CONSTRAINT = 57398
const COVERING = 57399
const CREATE = 57400
const CROSS = 57401
const CUBE = 57402
const CURRENT = 57403
const CURRENT_CATALOG = 57404
const CURRENT_DATE = 57405
const CURRENT_ROLE = 57406
const CURRENT_TIME = 57407
const CURRENT_TIMESTAMP = 57408
const CURRENT_USER = 57409
const CYCLE = 57410
const DATA = 57411
const DATABASE = 57412
const DATABASES = 57413
const DATE = 57414
const DAY = 57415
const DEC = 57416
const DECIMAL = 57417
const DEFAULT = 57418
const DEFERRABLE = 57419
const DELETE = 57420
const DESC = 57421
const DISTINCT = 57422
const DO = 57423
const DOUBLE = 57424
const DROP = 57425
const ELSE = 57426
const ENCODING = 57427
const END = 57428
const ESCAPE = 57429
const EXCEPT = 57430
const EXISTS = 57431
const EXPLAIN = 57432
const EXTRACT = 57433
const FALSE = 57434
const FETCH = 57435
const FILTER = 57436
const FIRST = 57437
const FLOAT = 57438
const FOLLOWING = 57439
const FOR = 57440
const FORCE_INDEX = 57441
const FOREIGN = 57442
const FROM = 57443
const FULL = 57444
const GRANT = 57445
const GRANTS = 57446
const GREATEST = 57447
const GROUP = 57448
const GROUPING = 57449
const HAVING = 57450
const HIGH = 57451
const HOUR = 57452
const IF = 57453
const IFNULL = 57454
const IN = 57455
const INDEX = 57456
const INDEXES = 57457
const INITIALLY = 57458
const INNER = 57459
const INSERT = 57460
const INT = 57461
const INT64 = 57462
const INTEGER = 57463
const INTERSECT = 57464
const INTERVAL = 57465
const INTO = 57466
const IS = 57467
const ISOLATION = 57468
const JOIN = 57469
const KEY = 57470
const KEYS = 57471
const LATERAL = 57472
const LEADING = 57473
const LEAST = 57474
const LEFT = 57475
const LEVEL = 57476
const LIKE = 57477
const LIMIT = 57478
const LOCAL = 57479
const LOCALTIME = 57480
const LOCALTIMESTAMP = 57481
const LOW = 57482
const LSHIFT = 57483
const MATCH = 57484
const MINUTE = 57485
const MONTH = 57486
const NAME = 57487
const NAMES = 57488
const NATURAL = 57489
const NEXT = 57490
const NO = 57491
const NO_INDEX_JOIN = 57492
const NORMAL = 57493
const NOT = 57494
const NOTHING = 57495
const NULL = 57496
const NULLIF = 57497
const NULLS = 57498
const NUMERIC = 57499
const OF = 57500
const OFF = 57501
const OFFSET = 57502
const ON = 57503
const ONLY = 57504
const OR = 57505
const ORDER = 57506
const ORDINALITY = 57507
const OUT = 57508
const OUTER = 57509
const OVER = 57510
const OVERLAPS = 57511
const OVERLAY = 57512
const PARTIAL = 57513
const PARTITION = 57514
const PLACING = 57515
const POSITION = 57516
const PRECEDING = 57517
const PRECISION = 57518
const PRIMARY = 57519
const PRIORITY = 57520
const RANGE = 57521
const READ = 57522
const REAL = 57523
const RECURSIVE = 57524
const REF = 57525
const REFERENCES = 57526
const RENAME = 57527
const REPEATABLE = 57528
const RELEASE = 57529
const RESTRICT = 57530
const RETURNING = 57531
const REVOKE = 57532
const RIGHT = 57533
const ROLLBACK = 57534
const ROLLUP = 57535
const ROW = 57536
const ROWS = 57537
const RSHIFT = 57538
const SAVEPOINT = 57539
const SEARCH = 57540
const SECOND = 57541
const SELECT = 57542
const SERIAL = 57543
const SERIALIZABLE = 57544
const SESSION = 57545
const SESSION_USER = 57546
const SET = 57547
const SHOW = 57548
const SIMILAR = 57549
const SIMPLE = 57550
const SMALLINT = 57551
const SNAPSHOT = 57552
const SOME = 57553
const SQL = 57554
const START = 57555
const STRICT = 57556
const STRING = 57557
const STORING = 57558
const SUBSTRING = 57559
const SYMMETRIC = 57560
const TABLE = 57561
const TABLES = 57562
const TEXT = 57563
const THEN = 57564
const TIME = 57565
const TIMESTAMP = 57566
const TIMESTAMPTZ = 57567
const TO = 57568
const TRAILING = 57569
const TRANSACTION = 57570
const TREAT = 57571
const TRIM = 57572
const TRUE = 57573
const TRUNCATE = 57574
const TYPE = 57575
const UNBOUNDED = 57576
const UNCOMMITTED = 57577
const UNION = 57578
const UNIQUE = 57579
const UNKNOWN = 57580
const UPDATE = 57581
const UPSERT = 57582
const USER = 57583
const USING = 57584
const VALID = 57585
const VALIDATE = 57586
const VALUE = 57587
const VALUES = 57588
const VARCHAR = 57589
const VARIADIC = 57590
const VARYING = 57591
const WHEN = 57592
const WHERE = 57593
const WINDOW = 57594
const WITH = 57595
const WITHIN = 57596
const WITHOUT = 57597
const YEAR = 57598
const ZONE = 57599
const NOT_LA = 57600
const WITH_LA = 57601
const POSTFIXOP = 57602
const UMINUS = 57603

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PARAM",
	"TYPECAST",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXPLAIN",
	"EXTRACT",
	"FALSE",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HOUR",
	"IF",
	"IFNULL",
	"IN",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARTIAL",
	"PARTITION",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SNAPSHOT",
	"SOME",
	"SQL",
	"START",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"TABLE",
	"TABLES",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:4389

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 21,
	280, 21,
	-2, 322,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 32,
	1, 293,
	161, 293,
	189, 293,
	278, 293,
	280, 293,
	-2, 303,
	-1, 44,
	1, 296,
	161, 296,
	189, 296,
	278, 296,
	280, 296,
	-2, 302,
	-1, 53,
	1, 21,
	280, 21,
	-2, 322,
	-1, 242,
	1, 138,
	280, 138,
	-2, 796,
	-1, 274,
	136, 332,
	160, 332,
	-2, 299,
	-1, 277,
	136, 331,
	160, 331,
	-2, 297,
	-1, 389,
	136, 331,
	160, 331,
	-2, 300,
	-1, 445,
	277, 740,
	-2, 735,
	-1, 446,
	277, 741,
	-2, 736,
	-1, 452,
	5, 461,
	277, 461,
	-2, 878,
	-1, 474,
	5, 428,
	-2, 855,
	-1, 475,
	5, 456,
	277, 456,
	-2, 856,
	-1, 476,
	5, 436,
	-2, 857,
	-1, 477,
	5, 435,
	-2, 858,
	-1, 478,
	5, 456,
	277, 456,
	-2, 861,
	-1, 479,
	5, 456,
	277, 456,
	-2, 862,
	-1, 480,
	5, 457,
	-2, 865,
	-1, 481,
	5, 423,
	-2, 866,
	-1, 482,
	5, 423,
	-2, 867,
	-1, 483,
	5, 438,
	-2, 870,
	-1, 484,
	5, 424,
	-2, 875,
	-1, 485,
	5, 425,
	-2, 876,
	-1, 486,
	5, 426,
	-2, 877,
	-1, 487,
	5, 423,
	-2, 881,
	-1, 488,
	5, 429,
	-2, 886,
	-1, 489,
	5, 427,
	-2, 889,
	-1, 490,
	5, 454,
	277, 454,
	-2, 890,
	-1, 491,
	5, 458,
	-2, 893,
	-1, 492,
	5, 459,
	-2, 894,
	-1, 493,
	5, 453,
	277, 453,
	-2, 898,
	-1, 755,
	88, 303,
	122, 303,
	136, 303,
	160, 303,
	164, 303,
	236, 303,
	-2, 563,
	-1, 763,
	277, 720,
	-2, 709,
	-1, 962,
	12, 0,
	13, 0,
	14, 0,
	260, 0,
	261, 0,
	262, 0,
	-2, 494,
	-1, 963,
	12, 0,
	13, 0,
	14, 0,
	260, 0,
	261, 0,
	262, 0,
	-2, 495,
	-1, 964,
	12, 0,
	13, 0,
	14, 0,
	260, 0,
	261, 0,
	262, 0,
	-2, 496,
	-1, 968,
	12, 0,
	13, 0,
	14, 0,
	260, 0,
	261, 0,
	262, 0,
	-2, 500,
	-1, 969,
	12, 0,
	13, 0,
	14, 0,
	260, 0,
	261, 0,
	262, 0,
	-2, 501,
	-1, 970,
	12, 0,
	13, 0,
	14, 0,
	260, 0,
	261, 0,
	262, 0,
	-2, 502,
	-1, 973,
	30, 0,
	113, 0,
	135, 0,
	207, 0,
	258, 0,
	-2, 507,
	-1, 1004,
	169, 633,
	-2, 636,
	-1, 1159,
	88, 303,
	122, 303,
	136, 303,
	160, 303,
	164, 303,
	236, 303,
	-2, 380,
	-1, 1167,
	30, 0,
	113, 0,
	135, 0,
	207, 0,
	258, 0,
	-2, 508,
	-1, 1172,
	30, 0,
	113, 0,
	135, 0,
	207, 0,
	258, 0,
	-2, 509,
	-1, 1191,
	169, 632,
	-2, 635,
	-1, 1336,
	30, 0,
	113, 0,
	135, 0,
	207, 0,
	258, 0,
	-2, 510,
	-1, 1341,
	125, 0,
	-2, 520,
	-1, 1350,
	169, 634,
	-2, 637,
	-1, 1390,
	12, 0,
	13, 0,
	14, 0,
	260, 0,
	261, 0,
	262, 0,
	-2, 544,
	-1, 1391,
	12, 0,
	13, 0,
	14, 0,
	260, 0,
	261, 0,
	262, 0,
	-2, 545,
	-1, 1392,
	12, 0,
	13, 0,
	14, 0,
	260, 0,
	261, 0,
	262, 0,
	-2, 546,
	-1, 1396,
	12, 0,
	13, 0,
	14, 0,
	260, 0,
	261, 0,
	262, 0,
	-2, 550,
	-1, 1397,
	12, 0,
	13, 0,
	14, 0,
	260, 0,
	261, 0,
	262, 0,
	-2, 551,
	-1, 1398,
	12, 0,
	13, 0,
	14, 0,
	260, 0,
	261, 0,
	262, 0,
	-2, 552,
	-1, 1496,
	125, 0,
	-2, 521,
	-1, 1500,
	30, 0,
	113, 0,
	135, 0,
	207, 0,
	258, 0,
	-2, 524,
	-1, 1501,
	30, 0,
	113, 0,
	135, 0,
	207, 0,
	258, 0,
	-2, 526,
	-1, 1583,
	30, 0,
	113, 0,
	135, 0,
	207, 0,
	258, 0,
	-2, 525,
	-1, 1584,
	30, 0,
	113, 0,
	135, 0,
	207, 0,
	258, 0,
	-2, 527,
	-1, 1592,
	125, 0,
	-2, 553,
	-1, 1631,
	125, 0,
	-2, 554,
	-1, 1676,
	30, 0,
	135, 0,
	207, 0,
	258, 0,
	-2, 854,
}

const sqlNprod = 990
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 20717

var sqlAct = [...]int{

	1001, 1675, 1658, 835, 1696, 1659, 1636, 1660, 1537, 843,
	1370, 1600, 1674, 1460, 1570, 1342, 590, 900, 1428, 444,
	443, 1559, 1472, 1484, 1478, 1461, 278, 300, 31, 758,
	1249, 1156, 14, 883, 1248, 506, 1313, 1194, 1101, 1017,
	243, 760, 694, 1343, 1146, 691, 886, 436, 1155, 535,
	885, 512, 408, 844, 1322, 820, 811, 989, 1142, 1021,
	66, 986, 793, 789, 1011, 20, 1056, 912, 709, 285,
	43, 563, 548, 10, 6, 283, 878, 1106, 715, 515,
	87, 909, 377, 277, 494, 517, 1059, 418, 545, 409,
	507, 508, 574, 68, 283, 323, 837, 43, 288, 910,
	319, 67, 69, 64, 321, 378, 888, 316, 392, 713,
	391, 318, 393, 240, 565, 44, 528, 45, 561, 544,
	312, 73, 286, 43, 1576, 82, 840, 1577, 537, 282,
	1014, 1672, 537, 836, 1558, 282, 438, 1666, 396, 1665,
	904, 1657, 904, 1187, 1499, 1652, 327, 1154, 904, 1633,
	328, 296, 1499, 1627, 303, 717, 904, 717, 324, 275,
	313, 274, 1619, 1112, 1622, 1558, 267, 1015, 306, 1610,
	1585, 290, 904, 1499, 1580, 1567, 1557, 904, 1558, 1558,
	1542, 1541, 1522, 904, 904, 1187, 1502, 1498, 1438, 1187,
	1499, 904, 716, 1346, 1303, 49, 1187, 1299, 1561, 21,
	1016, 1013, 1298, 1266, 1264, 1299, 1267, 1187, 1263, 35,
	1262, 1187, 1191, 1187, 51, 1187, 1189, 1188, 526, 1403,
	905, 1190, 1187, 904, 808, 542, 1349, 807, 543, 1125,
	809, 1144, 37, 1127, 904, 858, 540, 997, 42, 509,
	899, 52, 403, 510, 872, 49, 1193, 496, 47, 404,
	49, 685, 1187, 684, 48, 555, 1018, 554, 344, 295,
	53, 509, 49, 26, 51, 510, 38, 510, 589, 51,
	27, 363, 46, 1455, 1673, 1671, 538, 1628, 1566, 1527,
	538, 51, 1523, 28, 1515, 1514, 1509, 1508, 1507, 1506,
	1493, 52, 410, 410, 1418, 1413, 52, 1412, 47, 446,
	1411, 390, 513, 47, 48, 1353, 1331, 1312, 52, 48,
	1270, 384, 389, 1012, 1268, 1256, 1247, 1220, 1217, 1215,
	351, 1204, 65, 501, 1198, 1129, 1126, 839, 994, 505,
	86, 1072, 766, 86, 1165, 1112, 1028, 716, 1027, 46,
	86, 718, 403, 352, 402, 500, 1601, 86, 86, 1372,
	1621, 86, 1602, 1594, 86, 86, 86, 1573, 1564, 720,
	86, 86, 86, 86, 1556, 326, 1534, 40, 383, 536,
	29, 1520, 39, 688, 1487, 1468, 1340, 30, 1330, 719,
	49, 1309, 1308, 86, 1306, 33, 34, 1282, 1281, 1454,
	1491, 1221, 381, 36, 1246, 701, 703, 1212, 1211, 51,
	1203, 275, 710, 274, 1184, 1180, 991, 794, 797, 313,
	405, 995, 41, 1086, 749, 750, 751, 752, 753, 399,
	400, 1085, 1066, 756, 1026, 509, 52, 1582, 530, 510,
	527, 903, 687, 47, 800, 787, 327, 327, 786, 48,
	328, 328, 785, 769, 593, 784, 783, 782, 594, 781,
	780, 283, 718, 779, 778, 777, 776, 46, 775, 774,
	773, 763, 764, 762, 46, 552, 551, 495, 689, 301,
	720, 407, 1581, 585, 761, 578, 1333, 1332, 674, 502,
	451, 678, 679, 680, 1578, 681, 677, 1459, 1086, 683,
	719, 1113, 894, 357, 799, 584, 376, 1269, 1166, 372,
	358, 697, 699, 711, 771, 698, 686, 1473, 836, 757,
	804, 1373, 275, 718, 705, 275, 275, 706, 707, 1022,
	790, 1207, 1108, 1642, 518, 1685, 519, 805, 518, 1609,
	519, 720, 1446, 1686, 272, 86, 86, 266, 1121, 265,
	813, 803, 791, 792, 57, 795, 1293, 864, 260, 261,
	798, 719, 1550, 1069, 1549, 1221, 234, 498, 1294, 1274,
	1273, 838, 1202, 838, 1201, 814, 86, 813, 86, 1200,
	86, 1199, 86, 812, 1168, 66, 825, 827, 821, 801,
	978, 853, 321, 857, 58, 832, 831, 86, 380, 952,
	520, 593, 375, 269, 520, 594, 281, 1018, 86, 721,
	722, 723, 724, 725, 767, 988, 877, 1539, 68, 86,
	86, 86, 43, 86, 1644, 1608, 67, 69, 355, 531,
	988, 1362, 830, 1693, 327, 817, 1221, 842, 328, 518,
	280, 519, 824, 497, 1102, 859, 324, 833, 866, 856,
	861, 862, 854, 86, 734, 86, 855, 852, 851, 1222,
	1223, 1224, 1225, 1226, 356, 326, 326, 860, 718, 1490,
	865, 897, 898, 592, 86, 1284, 86, 86, 86, 86,
	593, 86, 282, 1654, 594, 86, 720, 1018, 1359, 537,
	86, 583, 582, 270, 576, 571, 86, 1022, 1603, 1655,
	1221, 1100, 1097, 419, 1685, 520, 719, 524, 523, 735,
	1122, 273, 733, 61, 86, 60, 59, 86, 354, 823,
	1699, 1360, 723, 724, 725, 55, 1291, 410, 788, 906,
	1120, 1590, 953, 954, 955, 956, 957, 958, 959, 960,
	961, 962, 963, 964, 965, 966, 967, 968, 969, 970,
	971, 972, 973, 810, 279, 297, 1692, 62, 297, 353,
	308, 521, 754, 586, 297, 521, 308, 1235, 379, 56,
	951, 1662, 914, 1210, 992, 1323, 1540, 1018, 881, 822,
	728, 721, 722, 723, 724, 725, 1029, 976, 1040, 282,
	1050, 1052, 1057, 1060, 1061, 1062, 373, 1285, 882, 734,
	880, 1661, 347, 349, 803, 1684, 1170, 516, 1042, 803,
	588, 354, 1682, 1002, 86, 1071, 907, 1471, 513, 1544,
	592, 987, 1236, 1105, 587, 1224, 1225, 1226, 86, 1697,
	1399, 1235, 86, 892, 1691, 86, 86, 538, 593, 394,
	1663, 86, 594, 86, 86, 366, 86, 1103, 374, 86,
	86, 86, 993, 326, 735, 74, 86, 86, 998, 1003,
	345, 1006, 63, 395, 1032, 920, 521, 1014, 1698, 1075,
	977, 343, 1083, 1081, 54, 79, 1051, 1664, 283, 395,
	75, 868, 1063, 1064, 1065, 1700, 1236, 870, 1434, 448,
	1518, 1110, 974, 1229, 1222, 1223, 1224, 1225, 1226, 592,
	76, 718, 1400, 871, 1015, 1076, 1706, 1543, 1401, 1532,
	710, 869, 1115, 1276, 1442, 78, 1080, 893, 1435, 720,
	1096, 696, 729, 726, 727, 728, 721, 722, 723, 724,
	725, 690, 1111, 1035, 1358, 560, 1114, 1016, 1013, 719,
	1445, 1117, 1130, 1637, 1116, 1128, 1137, 1444, 394, 1485,
	1118, 1124, 283, 682, 1123, 577, 572, 1119, 1222, 1223,
	1224, 1225, 1226, 327, 975, 920, 558, 328, 1519, 556,
	1036, 1533, 297, 1088, 1087, 1481, 940, 559, 1135, 1139,
	1318, 412, 1317, 43, 1705, 1167, 86, 1138, 1140, 1172,
	1441, 1160, 353, 1018, 1430, 1164, 1431, 77, 86, 86,
	1486, 311, 503, 1037, 1034, 1161, 310, 795, 1186, 798,
	1149, 280, 386, 297, 529, 529, 1143, 1314, 1195, 1433,
	1025, 792, 791, 1443, 1593, 1152, 1436, 86, 1517, 86,
	283, 1250, 734, 1208, 1339, 1321, 80, 1213, 1216, 1179,
	1145, 1150, 863, 1192, 371, 1171, 369, 368, 1169, 1177,
	1012, 367, 364, 309, 1251, 772, 676, 592, 756, 1038,
	1024, 1175, 1425, 1289, 1057, 1057, 1057, 1287, 1275, 1132,
	1686, 895, 891, 541, 539, 534, 940, 525, 522, 1432,
	1367, 695, 1551, 1149, 397, 1272, 283, 735, 1183, 580,
	1206, 813, 1185, 1553, 293, 901, 1279, 828, 1152, 1151,
	829, 813, 1297, 360, 1561, 1196, 1197, 826, 1147, 718,
	1605, 1630, 3, 410, 1150, 1315, 1033, 401, 1623, 841,
	86, 86, 86, 1173, 513, 1300, 86, 1178, 1148, 86,
	1253, 1254, 1255, 712, 553, 86, 86, 86, 86, 86,
	1271, 86, 86, 1163, 1245, 259, 398, 719, 902, 86,
	1278, 86, 1288, 1296, 1290, 1258, 294, 1703, 86, 721,
	722, 723, 724, 725, 1292, 1295, 302, 86, 86, 1704,
	1221, 1221, 1151, 86, 361, 1302, 1301, 1335, 718, 1336,
	70, 1327, 326, 262, 263, 1307, 1492, 1311, 1305, 1419,
	1341, 874, 873, 718, 1365, 1334, 939, 1265, 1351, 86,
	1174, 86, 86, 1320, 1351, 86, 1280, 1176, 802, 919,
	81, 720, 1326, 1070, 86, 1324, 1325, 1068, 1368, 1067,
	1019, 86, 875, 86, 1504, 268, 297, 1377, 1366, 308,
	1379, 719, 1355, 1356, 1357, 847, 1316, 1133, 876, 1319,
	308, 765, 1352, 308, 1538, 593, 72, 675, 365, 594,
	1361, 1363, 1364, 1511, 1653, 1209, 1589, 1569, 1023, 770,
	1374, 1408, 1409, 1378, 25, 1463, 424, 431, 1376, 1426,
	1415, 1416, 1417, 1277, 887, 1380, 595, 1434, 581, 1429,
	570, 1347, 447, 370, 564, 573, 942, 1427, 1031, 1406,
	499, 449, 917, 450, 1407, 918, 939, 796, 84, 437,
	984, 244, 1235, 915, 322, 845, 1410, 1435, 84, 919,
	1020, 1205, 982, 768, 423, 289, 289, 429, 1420, 299,
	428, 999, 299, 305, 299, 1474, 420, 920, 299, 314,
	299, 244, 1424, 1470, 1483, 1153, 1466, 1465, 350, 1466,
	1465, 1456, 238, 1404, 239, 1104, 1453, 896, 700, 1458,
	1496, 346, 1469, 1286, 1414, 1500, 1501, 1236, 271, 1218,
	1503, 920, 941, 1049, 1467, 1505, 1497, 1467, 920, 1041,
	1039, 1030, 980, 1489, 979, 382, 511, 704, 985, 846,
	1510, 362, 908, 1430, 1513, 1431, 942, 1162, 406, 708,
	292, 291, 297, 884, 359, 557, 86, 867, 264, 920,
	1604, 1439, 1440, 1283, 1641, 50, 19, 17, 1433, 1476,
	1477, 16, 1475, 1482, 1521, 1436, 15, 13, 12, 1516,
	11, 297, 86, 18, 1136, 1230, 1227, 1228, 1229, 1222,
	1223, 1224, 1225, 1226, 9, 86, 8, 86, 940, 86,
	7, 24, 86, 23, 22, 5, 4, 2, 1, 0,
	1488, 981, 0, 1528, 86, 1545, 0, 86, 983, 0,
	0, 0, 941, 86, 592, 0, 0, 86, 1432, 86,
	0, 0, 940, 0, 0, 1563, 0, 0, 0, 940,
	1531, 0, 1529, 0, 0, 0, 0, 920, 0, 0,
	0, 1574, 1565, 0, 1221, 1562, 0, 1554, 1466, 1465,
	1546, 0, 1560, 244, 244, 1583, 1584, 1547, 1548, 0,
	940, 0, 1572, 0, 1077, 0, 0, 0, 0, 0,
	86, 0, 0, 0, 0, 0, 1467, 0, 0, 0,
	0, 0, 0, 0, 84, 1597, 299, 0, 244, 0,
	387, 0, 1588, 1107, 0, 1599, 1595, 0, 0, 0,
	0, 0, 1107, 1586, 0, 289, 0, 0, 0, 1598,
	0, 0, 0, 0, 0, 0, 299, 513, 0, 0,
	0, 0, 0, 1575, 1552, 0, 1612, 299, 299, 299,
	0, 532, 0, 86, 86, 86, 1620, 1614, 1466, 1465,
	1616, 86, 86, 920, 1613, 283, 1131, 86, 940, 86,
	0, 86, 86, 86, 86, 1626, 803, 1579, 916, 86,
	1625, 549, 1615, 549, 0, 0, 1467, 297, 86, 0,
	1632, 0, 0, 0, 1645, 1235, 1629, 86, 86, 0,
	0, 86, 244, 0, 549, 244, 244, 244, 1648, 244,
	86, 86, 0, 244, 1651, 1649, 920, 1650, 84, 1646,
	0, 1466, 1465, 1668, 693, 1647, 1643, 0, 939, 0,
	0, 1618, 1667, 0, 1669, 1679, 1679, 920, 0, 593,
	0, 919, 289, 594, 1670, 714, 1683, 1681, 1680, 1467,
	1236, 0, 86, 1688, 1687, 0, 0, 1679, 1690, 0,
	0, 1689, 939, 1624, 0, 0, 0, 0, 0, 939,
	1702, 1701, 0, 0, 940, 919, 0, 0, 916, 0,
	0, 0, 919, 0, 1679, 1707, 0, 0, 0, 0,
	0, 1638, 1639, 0, 0, 0, 0, 1656, 0, 0,
	939, 0, 0, 0, 0, 86, 0, 86, 0, 86,
	0, 920, 0, 919, 0, 1145, 86, 0, 942, 1227,
	1228, 1229, 1222, 1223, 1224, 1225, 1226, 940, 0, 0,
	1043, 0, 0, 0, 86, 0, 0, 0, 0, 0,
	0, 0, 299, 0, 0, 0, 0, 0, 940, 0,
	0, 86, 942, 86, 0, 71, 818, 0, 1149, 942,
	299, 86, 0, 299, 834, 1181, 1182, 86, 0, 299,
	0, 849, 850, 1152, 299, 0, 0, 299, 244, 244,
	0, 0, 0, 1147, 549, 714, 847, 0, 939, 1150,
	942, 0, 0, 0, 941, 74, 0, 0, 0, 0,
	0, 919, 0, 1148, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 79, 0, 1480, 297, 0,
	75, 297, 940, 1242, 1243, 1244, 0, 0, 941, 86,
	86, 0, 0, 86, 0, 941, 0, 0, 0, 0,
	76, 86, 0, 0, 0, 425, 32, 1151, 0, 0,
	0, 0, 0, 86, 0, 78, 0, 0, 592, 0,
	0, 0, 0, 0, 0, 0, 941, 0, 0, 0,
	0, 0, 0, 32, 0, 0, 0, 0, 942, 0,
	0, 86, 86, 86, 0, 86, 0, 0, 0, 276,
	0, 0, 284, 0, 939, 0, 0, 0, 1479, 32,
	0, 0, 86, 0, 0, 0, 0, 919, 0, 0,
	0, 284, 0, 0, 879, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 0, 299, 818, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 77, 1043, 1043,
	0, 0, 0, 0, 0, 0, 0, 939, 1337, 1338,
	0, 0, 0, 0, 941, 299, 0, 244, 0, 0,
	919, 0, 0, 0, 0, 1449, 0, 0, 939, 0,
	0, 0, 0, 1457, 0, 0, 80, 0, 0, 0,
	246, 919, 0, 0, 942, 0, 0, 0, 0, 0,
	0, 297, 297, 0, 257, 297, 1043, 1043, 1043, 0,
	0, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389,
	1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 0,
	1402, 0, 0, 0, 0, 0, 0, 248, 0, 1221,
	0, 1237, 1238, 1239, 258, 0, 0, 942, 0, 0,
	916, 1495, 939, 0, 0, 0, 247, 249, 299, 1078,
	1079, 0, 0, 0, 818, 919, 0, 1084, 942, 0,
	941, 0, 0, 1089, 1090, 1092, 1094, 1095, 0, 1098,
	1099, 0, 0, 1234, 916, 0, 0, 299, 0, 1109,
	250, 916, 0, 0, 0, 0, 299, 0, 0, 0,
	251, 252, 0, 0, 0, 879, 549, 0, 0, 0,
	0, 879, 0, 0, 0, 253, 0, 0, 0, 0,
	1536, 0, 916, 941, 0, 0, 0, 0, 0, 0,
	0, 1043, 1043, 0, 0, 0, 0, 693, 0, 244,
	299, 276, 942, 1134, 941, 0, 0, 0, 0, 0,
	0, 0, 1141, 0, 1240, 1568, 0, 0, 0, 1158,
	0, 299, 0, 0, 0, 297, 0, 0, 0, 0,
	1235, 0, 0, 0, 0, 0, 0, 1221, 0, 1237,
	1238, 1239, 0, 0, 1043, 1043, 1043, 1043, 1043, 1043,
	1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043,
	1043, 1043, 0, 1043, 0, 0, 254, 0, 0, 255,
	916, 0, 0, 0, 256, 0, 0, 0, 941, 0,
	0, 1234, 0, 0, 1535, 1236, 718, 0, 736, 737,
	738, 0, 0, 0, 0, 0, 0, 0, 739, 0,
	0, 0, 0, 0, 720, 0, 745, 0, 0, 0,
	0, 0, 276, 0, 0, 276, 276, 0, 0, 0,
	0, 0, 0, 0, 719, 0, 0, 0, 0, 0,
	733, 0, 0, 0, 0, 0, 0, 0, 755, 0,
	1241, 0, 759, 0, 0, 0, 0, 1640, 0, 1231,
	1232, 1233, 1240, 1230, 1227, 1228, 1229, 1222, 1223, 1224,
	1225, 1226, 0, 0, 0, 0, 1592, 0, 1235, 0,
	0, 0, 0, 0, 0, 0, 916, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 847, 746,
	0, 0, 718, 0, 714, 0, 0, 0, 0, 0,
	0, 744, 0, 0, 0, 0, 0, 0, 0, 0,
	720, 741, 0, 0, 0, 0, 0, 734, 0, 0,
	299, 0, 0, 1236, 0, 0, 0, 0, 0, 916,
	719, 0, 0, 1304, 0, 818, 0, 693, 0, 740,
	1310, 0, 1631, 0, 32, 0, 32, 0, 0, 0,
	916, 0, 299, 0, 0, 299, 0, 1043, 32, 0,
	0, 1158, 0, 0, 0, 1329, 0, 1158, 0, 0,
	0, 0, 735, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 743, 0, 0, 0, 1231, 1232, 1233,
	0, 1230, 1227, 1228, 1229, 1222, 1223, 1224, 1225, 1226,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1371, 0,
	0, 0, 0, 734, 916, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 742, 0, 730, 731, 732, 1043,
	729, 726, 727, 728, 721, 722, 723, 724, 725, 0,
	0, 0, 1073, 0, 718, 0, 736, 737, 738, 0,
	0, 1074, 0, 0, 0, 0, 739, 0, 0, 0,
	0, 0, 720, 0, 745, 0, 0, 0, 735, 0,
	0, 1422, 1423, 818, 1221, 0, 1237, 1238, 1239, 714,
	714, 0, 719, 0, 718, 1447, 1494, 1448, 733, 299,
	1450, 1451, 1452, 0, 0, 0, 0, 299, 0, 0,
	0, 0, 720, 0, 1462, 1043, 818, 1462, 0, 0,
	0, 0, 0, 0, 0, 299, 299, 0, 1234, 299,
	0, 0, 719, 911, 0, 0, 0, 0, 714, 1158,
	718, 0, 736, 737, 738, 0, 729, 726, 727, 728,
	721, 722, 723, 724, 725, 0, 0, 746, 720, 0,
	745, 1221, 990, 0, 0, 0, 0, 0, 0, 744,
	0, 0, 0, 0, 0, 0, 0, 0, 719, 741,
	1512, 0, 0, 0, 733, 734, 1221, 0, 1237, 1238,
	1239, 0, 0, 0, 0, 0, 0, 0, 1345, 1240,
	0, 0, 0, 0, 0, 1234, 0, 740, 0, 0,
	0, 0, 0, 0, 0, 1235, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 734, 0, 0, 0, 0,
	1234, 0, 0, 818, 0, 1530, 0, 244, 0, 0,
	735, 0, 0, 746, 299, 0, 0, 0, 0, 0,
	0, 743, 0, 0, 0, 284, 0, 0, 0, 0,
	0, 0, 714, 0, 0, 741, 0, 0, 0, 0,
	1236, 734, 0, 0, 0, 0, 1462, 0, 0, 299,
	735, 1571, 0, 0, 0, 0, 0, 0, 0, 299,
	0, 0, 1235, 0, 0, 714, 0, 0, 0, 0,
	0, 1240, 742, 0, 730, 731, 732, 0, 729, 726,
	727, 728, 721, 722, 723, 724, 725, 1235, 0, 32,
	0, 0, 0, 0, 0, 1524, 735, 0, 0, 1159,
	0, 0, 0, 0, 1231, 1232, 1233, 743, 1230, 1227,
	1228, 1229, 1222, 1223, 1224, 1225, 1226, 1236, 0, 726,
	727, 728, 721, 722, 723, 724, 725, 1606, 1607, 0,
	0, 1611, 0, 0, 0, 0, 1462, 0, 0, 244,
	0, 0, 1236, 0, 0, 0, 0, 0, 0, 0,
	0, 714, 0, 0, 0, 0, 0, 0, 742, 0,
	730, 731, 732, 990, 729, 726, 727, 728, 721, 722,
	723, 724, 725, 0, 0, 0, 0, 755, 0, 714,
	714, 299, 0, 244, 0, 1230, 1227, 1228, 1229, 1222,
	1223, 1224, 1225, 1226, 0, 0, 0, 0, 0, 1462,
	1571, 0, 0, 0, 0, 0, 1231, 1232, 1233, 0,
	1230, 1227, 1228, 1229, 1222, 1223, 1224, 1225, 1226, 0,
	0, 0, 299, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 755, 0, 0, 445, 434, 435, 432,
	433, 421, 0, 0, 0, 0, 0, 0, 88, 89,
	1008, 90, 0, 0, 0, 0, 427, 0, 0, 0,
	91, 92, 189, 474, 475, 93, 476, 477, 0, 94,
	194, 195, 95, 442, 460, 478, 479, 198, 0, 470,
	0, 453, 0, 96, 97, 98, 0, 99, 0, 100,
	0, 331, 101, 102, 0, 454, 456, 0, 455, 457,
	103, 104, 105, 106, 480, 107, 481, 482, 0, 0,
	108, 0, 1009, 0, 473, 110, 0, 111, 0, 0,
	0, 426, 112, 461, 440, 0, 113, 114, 483, 115,
	911, 116, 0, 911, 332, 0, 117, 471, 0, 207,
	0, 118, 119, 467, 469, 0, 0, 120, 0, 333,
	121, 484, 485, 486, 0, 452, 0, 334, 122, 335,
	123, 124, 0, 0, 472, 336, 125, 337, 0, 126,
	0, 0, 127, 0, 128, 129, 130, 131, 132, 338,
	133, 134, 137, 135, 416, 136, 441, 468, 138, 487,
	139, 140, 0, 0, 0, 0, 0, 141, 217, 339,
	142, 340, 462, 143, 144, 0, 463, 145, 220, 0,
	146, 147, 148, 488, 149, 150, 0, 152, 153, 151,
	154, 0, 155, 341, 156, 157, 430, 158, 0, 245,
	159, 160, 0, 223, 161, 162, 458, 163, 164, 342,
	165, 489, 166, 0, 167, 168, 170, 490, 169, 464,
	0, 0, 171, 172, 0, 227, 491, 492, 0, 0,
	173, 465, 466, 439, 174, 175, 176, 177, 0, 0,
	178, 179, 180, 459, 0, 181, 182, 183, 232, 493,
	1007, 184, 0, 0, 32, 0, 185, 186, 187, 188,
	417, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	413, 414, 1010, 911, 911, 0, 415, 911, 0, 422,
	1005, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1555, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 591,
	0, 0, 0, 0, 0, 0, 0, 911, 0, 0,
	0, 88, 89, 596, 90, 597, 598, 599, 600, 601,
	602, 603, 604, 91, 92, 189, 190, 191, 93, 192,
	193, 605, 94, 194, 195, 95, 606, 607, 196, 197,
	198, 608, 199, 609, 330, 610, 96, 97, 98, 0,
	99, 611, 100, 612, 331, 101, 102, 613, 614, 615,
	616, 617, 618, 103, 104, 105, 106, 200, 107, 201,
	202, 619, 620, 108, 621, 622, 623, 109, 110, 624,
	111, 625, 755, 626, 203, 112, 204, 627, 628, 113,
	114, 205, 115, 629, 116, 630, 631, 332, 632, 117,
	206, 633, 207, 634, 118, 119, 208, 209, 635, 636,
	120, 637, 333, 121, 210, 211, 212, 638, 213, 639,
	334, 122, 335, 123, 124, 640, 641, 214, 336, 125,
	337, 642, 126, 643, 644, 127, 0, 128, 129, 130,
	131, 132, 338, 133, 134, 137, 135, 645, 136, 646,
	215, 138, 216, 139, 140, 647, 648, 649, 650, 651,
	141, 217, 339, 142, 340, 218, 143, 144, 652, 219,
	145, 220, 653, 146, 147, 148, 221, 149, 150, 654,
	152, 153, 151, 154, 655, 155, 341, 156, 157, 222,
	158, 0, 245, 159, 160, 656, 223, 161, 162, 657,
	163, 164, 342, 165, 224, 166, 658, 167, 168, 170,
	225, 169, 226, 659, 660, 171, 172, 661, 227, 228,
	229, 662, 663, 173, 230, 231, 664, 174, 175, 176,
	177, 665, 666, 178, 179, 180, 667, 668, 181, 182,
	183, 232, 233, 669, 184, 670, 671, 672, 673, 185,
	186, 187, 188, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 591, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1328, 88,
	89, 596, 90, 597, 598, 599, 600, 601, 602, 603,
	604, 91, 92, 189, 190, 191, 93, 192, 193, 605,
	94, 194, 195, 95, 606, 607, 196, 197, 198, 608,
	199, 609, 330, 610, 96, 97, 98, 0, 99, 611,
	100, 612, 331, 101, 102, 613, 614, 615, 616, 617,
	618, 103, 104, 105, 106, 200, 107, 201, 202, 619,
	620, 108, 621, 622, 623, 109, 110, 624, 111, 625,
	0, 626, 203, 112, 204, 627, 628, 113, 114, 205,
	115, 629, 116, 630, 631, 332, 632, 117, 206, 633,
	207, 634, 118, 119, 208, 209, 635, 636, 120, 637,
	333, 121, 210, 211, 212, 638, 213, 639, 334, 122,
	335, 123, 124, 640, 641, 214, 336, 125, 337, 642,
	126, 643, 644, 127, 0, 128, 129, 130, 131, 132,
	338, 133, 134, 137, 135, 645, 136, 646, 215, 138,
	216, 139, 140, 647, 648, 649, 650, 651, 141, 217,
	339, 142, 340, 218, 143, 144, 652, 219, 145, 220,
	653, 146, 147, 148, 221, 149, 150, 654, 152, 153,
	151, 154, 655, 155, 341, 156, 157, 222, 158, 0,
	245, 159, 160, 656, 223, 161, 162, 657, 163, 164,
	342, 165, 224, 166, 658, 167, 168, 170, 225, 169,
	226, 659, 660, 171, 172, 661, 227, 228, 229, 662,
	663, 173, 230, 231, 664, 174, 175, 176, 177, 665,
	666, 178, 179, 180, 667, 668, 181, 182, 183, 232,
	233, 669, 184, 670, 671, 672, 673, 185, 186, 187,
	188, 0, 591, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 806, 88, 89, 596, 90, 597, 598,
	599, 600, 601, 602, 603, 604, 91, 92, 189, 190,
	191, 93, 192, 193, 605, 94, 194, 195, 95, 606,
	607, 196, 197, 198, 608, 199, 609, 330, 610, 96,
	97, 98, 0, 99, 611, 100, 612, 331, 101, 102,
	613, 614, 615, 616, 617, 618, 103, 104, 105, 106,
	200, 107, 201, 202, 619, 620, 108, 621, 622, 623,
	109, 110, 624, 111, 625, 0, 626, 203, 112, 204,
	627, 628, 113, 114, 205, 115, 629, 116, 630, 631,
	332, 632, 117, 206, 633, 207, 634, 118, 119, 208,
	209, 635, 636, 120, 637, 333, 121, 210, 211, 212,
	638, 213, 639, 334, 122, 335, 123, 124, 640, 641,
	214, 336, 125, 337, 642, 126, 643, 644, 127, 0,
	128, 129, 130, 131, 132, 338, 133, 134, 137, 135,
	645, 136, 646, 215, 138, 216, 139, 140, 647, 648,
	649, 650, 651, 141, 217, 339, 142, 340, 218, 143,
	144, 652, 219, 145, 220, 653, 146, 147, 148, 221,
	149, 150, 654, 152, 153, 151, 154, 655, 155, 341,
	156, 157, 222, 158, 0, 245, 159, 160, 656, 223,
	161, 162, 657, 163, 164, 342, 165, 224, 166, 658,
	167, 168, 170, 225, 169, 226, 659, 660, 171, 172,
	661, 227, 228, 229, 662, 663, 173, 230, 231, 664,
	174, 175, 176, 177, 665, 666, 178, 179, 180, 667,
	668, 181, 182, 183, 232, 233, 669, 184, 670, 671,
	672, 673, 185, 186, 187, 188, 445, 434, 435, 432,
	433, 421, 0, 0, 0, 0, 0, 0, 88, 89,
	0, 90, 0, 0, 0, 0, 427, 0, 0, 0,
	91, 92, 189, 474, 475, 93, 476, 477, 0, 94,
	194, 195, 95, 442, 460, 478, 479, 198, 0, 470,
	0, 453, 0, 96, 97, 98, 0, 99, 0, 100,
	0, 331, 101, 102, 0, 454, 456, 0, 455, 457,
	103, 104, 105, 106, 480, 107, 481, 482, 514, 0,
	108, 0, 0, 0, 473, 110, 0, 111, 0, 0,
	0, 426, 112, 461, 440, 0, 113, 114, 483, 115,
	0, 116, 0, 0, 332, 0, 117, 471, 0, 207,
	0, 118, 119, 467, 469, 0, 0, 120, 0, 333,
	121, 484, 485, 486, 0, 452, 0, 334, 122, 335,
	123, 124, 0, 0, 472, 336, 125, 337, 0, 126,
	0, 0, 127, 0, 128, 129, 130, 131, 132, 338,
	133, 134, 137, 135, 416, 136, 441, 468, 138, 487,
	139, 140, 0, 0, 0, 0, 0, 141, 217, 339,
	142, 340, 462, 143, 144, 0, 463, 145, 220, 0,
	146, 147, 148, 488, 149, 150, 0, 152, 153, 151,
	154, 0, 155, 341, 156, 157, 430, 158, 0, 245,
	159, 160, 49, 223, 161, 162, 458, 163, 164, 342,
	165, 489, 166, 0, 167, 168, 170, 490, 169, 464,
	0, 51, 171, 172, 0, 227, 491, 492, 0, 0,
	173, 465, 466, 439, 174, 175, 176, 177, 0, 0,
	178, 179, 180, 459, 0, 181, 182, 183, 329, 493,
	0, 184, 0, 0, 0, 47, 185, 186, 187, 188,
	417, 48, 445, 434, 435, 432, 433, 421, 0, 0,
	413, 414, 0, 0, 88, 89, 415, 90, 0, 422,
	0, 0, 427, 0, 0, 0, 91, 92, 189, 474,
	475, 93, 476, 477, 0, 94, 194, 195, 95, 442,
	460, 478, 479, 198, 0, 470, 0, 453, 0, 96,
	97, 98, 0, 99, 0, 100, 0, 331, 101, 102,
	0, 454, 456, 0, 455, 457, 103, 104, 105, 106,
	480, 107, 481, 482, 0, 0, 108, 0, 0, 0,
	473, 110, 0, 111, 0, 0, 0, 426, 112, 461,
	440, 0, 113, 114, 483, 115, 0, 116, 0, 0,
	332, 0, 117, 471, 0, 207, 0, 118, 119, 467,
	469, 0, 0, 120, 0, 333, 121, 484, 485, 486,
	0, 452, 0, 334, 122, 335, 123, 124, 0, 0,
	472, 336, 125, 337, 0, 126, 0, 0, 127, 0,
	128, 129, 130, 131, 132, 338, 133, 134, 137, 135,
	416, 136, 441, 468, 138, 487, 139, 140, 0, 0,
	0, 0, 0, 141, 217, 339, 142, 340, 462, 143,
	144, 0, 463, 145, 220, 0, 146, 147, 148, 488,
	149, 150, 0, 152, 153, 151, 154, 0, 155, 341,
	156, 157, 430, 158, 0, 245, 159, 160, 49, 223,
	161, 162, 458, 163, 164, 342, 165, 489, 166, 0,
	167, 168, 170, 490, 169, 464, 0, 51, 171, 172,
	0, 227, 491, 492, 0, 0, 173, 465, 466, 439,
	174, 175, 176, 177, 0, 0, 178, 179, 180, 459,
	0, 181, 182, 183, 329, 493, 0, 184, 0, 0,
	0, 47, 185, 186, 187, 188, 417, 48, 445, 434,
	435, 432, 433, 421, 0, 0, 413, 414, 0, 0,
	88, 89, 415, 90, 0, 422, 0, 0, 427, 0,
	0, 0, 91, 92, 189, 474, 475, 93, 476, 477,
	1053, 94, 194, 195, 95, 442, 460, 478, 479, 198,
	0, 470, 0, 453, 0, 96, 97, 98, 0, 99,
	0, 100, 0, 331, 101, 102, 0, 454, 456, 0,
	455, 457, 103, 104, 105, 106, 480, 107, 481, 482,
	0, 0, 108, 0, 0, 0, 473, 110, 0, 111,
	0, 0, 0, 426, 112, 461, 440, 0, 113, 114,
	483, 115, 0, 116, 0, 1058, 332, 0, 117, 471,
	0, 207, 0, 118, 119, 467, 469, 0, 0, 120,
	0, 333, 121, 484, 485, 486, 0, 452, 0, 334,
	122, 335, 123, 124, 0, 1054, 472, 336, 125, 337,
	0, 126, 0, 0, 127, 0, 128, 129, 130, 131,
	132, 338, 133, 134, 137, 135, 416, 136, 441, 468,
	138, 487, 139, 140, 0, 0, 0, 0, 0, 141,
	217, 339, 142, 340, 462, 143, 144, 0, 463, 145,
	220, 0, 146, 147, 148, 488, 149, 150, 0, 152,
	153, 151, 154, 0, 155, 341, 156, 157, 430, 158,
	0, 245, 159, 160, 0, 223, 161, 162, 458, 163,
	164, 342, 165, 489, 166, 0, 167, 168, 170, 490,
	169, 464, 0, 0, 171, 172, 0, 227, 491, 492,
	0, 1055, 173, 465, 466, 439, 174, 175, 176, 177,
	0, 0, 178, 179, 180, 459, 0, 181, 182, 183,
	232, 493, 0, 184, 0, 0, 0, 0, 185, 186,
	187, 188, 417, 0, 445, 434, 435, 432, 433, 421,
	0, 0, 413, 414, 0, 0, 88, 89, 415, 90,
	0, 422, 0, 0, 427, 0, 0, 0, 91, 92,
	189, 474, 475, 93, 476, 477, 0, 94, 194, 195,
	95, 442, 460, 478, 479, 198, 0, 470, 0, 453,
	0, 96, 97, 98, 0, 99, 0, 100, 0, 331,
	101, 102, 0, 454, 456, 0, 455, 457, 103, 104,
	105, 106, 480, 107, 481, 482, 0, 0, 108, 0,
	0, 0, 473, 110, 0, 111, 0, 0, 0, 426,
	112, 461, 440, 0, 113, 114, 483, 115, 0, 116,
	0, 0, 332, 0, 117, 471, 0, 207, 0, 118,
	119, 467, 469, 0, 0, 120, 0, 333, 121, 484,
	485, 486, 0, 452, 0, 334, 122, 335, 123, 124,
	0, 0, 472, 336, 125, 337, 0, 126, 0, 0,
	127, 0, 128, 129, 130, 131, 132, 338, 133, 134,
	137, 135, 416, 136, 441, 468, 138, 487, 139, 140,
	0, 0, 0, 0, 0, 141, 217, 339, 142, 340,
	462, 143, 144, 0, 463, 145, 220, 0, 146, 147,
	148, 488, 149, 150, 0, 152, 153, 151, 154, 0,
	155, 341, 156, 157, 430, 158, 0, 245, 159, 160,
	0, 223, 161, 162, 458, 163, 164, 342, 165, 489,
	166, 0, 167, 168, 170, 490, 169, 464, 0, 0,
	171, 172, 0, 227, 491, 492, 0, 0, 173, 465,
	466, 439, 174, 175, 176, 177, 0, 0, 178, 179,
	180, 459, 0, 181, 182, 183, 232, 493, 0, 184,
	0, 0, 0, 0, 185, 186, 187, 188, 417, 0,
	445, 434, 435, 432, 433, 421, 0, 0, 413, 414,
	0, 0, 88, 89, 415, 90, 0, 422, 1405, 0,
	427, 0, 0, 0, 91, 92, 189, 474, 475, 93,
	476, 477, 0, 94, 194, 195, 95, 442, 460, 478,
	479, 198, 0, 470, 0, 453, 0, 96, 97, 98,
	0, 99, 0, 100, 0, 331, 101, 102, 0, 454,
	456, 0, 455, 457, 103, 104, 105, 106, 480, 107,
	481, 482, 0, 0, 108, 0, 0, 0, 473, 110,
	0, 111, 0, 0, 0, 426, 112, 461, 440, 0,
	113, 114, 483, 115, 0, 116, 0, 0, 332, 0,
	117, 471, 0, 207, 0, 118, 119, 467, 469, 0,
	0, 120, 0, 333, 121, 484, 485, 486, 0, 452,
	0, 334, 122, 335, 123, 124, 0, 0, 472, 336,
	125, 337, 0, 126, 0, 0, 127, 0, 128, 129,
	130, 131, 132, 338, 133, 134, 137, 135, 416, 136,
	441, 468, 138, 487, 139, 140, 0, 0, 0, 0,
	0, 141, 217, 339, 142, 340, 462, 143, 144, 0,
	463, 145, 220, 0, 146, 147, 148, 488, 149, 150,
	0, 152, 153, 151, 154, 0, 155, 341, 156, 157,
	430, 158, 0, 245, 159, 160, 0, 223, 161, 162,
	458, 163, 164, 342, 165, 489, 166, 0, 167, 168,
	170, 490, 169, 464, 0, 0, 171, 172, 0, 227,
	491, 492, 0, 0, 173, 465, 466, 439, 174, 175,
	176, 177, 0, 0, 178, 179, 180, 459, 0, 181,
	182, 183, 232, 493, 0, 184, 0, 0, 0, 0,
	185, 186, 187, 188, 417, 0, 445, 434, 435, 432,
	433, 421, 0, 0, 413, 414, 0, 0, 88, 89,
	415, 90, 0, 422, 1348, 0, 427, 0, 0, 0,
	91, 92, 189, 474, 475, 93, 476, 477, 0, 94,
	194, 195, 95, 442, 460, 478, 479, 198, 0, 470,
	0, 453, 0, 96, 97, 98, 0, 99, 0, 100,
	0, 331, 101, 102, 0, 454, 456, 0, 455, 457,
	103, 104, 105, 106, 480, 107, 481, 482, 0, 0,
	108, 0, 0, 0, 473, 110, 0, 111, 0, 0,
	0, 426, 112, 461, 440, 0, 113, 114, 483, 115,
	0, 116, 0, 0, 332, 0, 117, 471, 0, 207,
	0, 118, 119, 467, 469, 0, 0, 120, 0, 333,
	121, 484, 485, 486, 0, 452, 0, 334, 122, 335,
	123, 124, 0, 0, 472, 336, 125, 337, 0, 126,
	0, 0, 127, 0, 128, 129, 130, 131, 132, 338,
	133, 134, 137, 135, 416, 136, 441, 468, 138, 487,
	139, 140, 0, 0, 0, 0, 0, 141, 217, 339,
	142, 340, 462, 143, 144, 0, 463, 145, 220, 0,
	146, 147, 148, 488, 149, 150, 0, 152, 153, 151,
	154, 0, 155, 341, 156, 157, 430, 158, 0, 245,
	159, 160, 0, 223, 161, 162, 458, 163, 164, 342,
	165, 489, 166, 0, 167, 168, 170, 490, 169, 464,
	0, 0, 171, 172, 0, 227, 491, 492, 0, 0,
	173, 465, 466, 439, 174, 175, 176, 177, 0, 0,
	178, 179, 180, 459, 0, 181, 182, 183, 232, 493,
	0, 184, 0, 0, 0, 0, 185, 186, 187, 188,
	417, 0, 445, 434, 435, 432, 433, 421, 0, 0,
	413, 414, 0, 0, 88, 89, 415, 90, 0, 422,
	1004, 0, 427, 0, 0, 0, 91, 92, 189, 474,
	475, 93, 476, 477, 0, 94, 194, 195, 95, 442,
	460, 478, 479, 198, 0, 470, 0, 453, 0, 96,
	97, 98, 0, 99, 0, 100, 0, 331, 101, 102,
	0, 454, 456, 0, 455, 457, 103, 104, 105, 106,
	480, 107, 481, 482, 0, 0, 108, 0, 0, 0,
	473, 110, 0, 111, 0, 0, 0, 426, 112, 461,
	440, 0, 113, 114, 483, 115, 0, 116, 0, 0,
	332, 0, 117, 471, 0, 207, 0, 118, 119, 467,
	469, 0, 0, 120, 0, 333, 121, 484, 485, 486,
	0, 452, 0, 334, 122, 335, 123, 124, 0, 0,
	472, 336, 125, 337, 0, 126, 0, 0, 127, 0,
	128, 129, 130, 131, 132, 338, 133, 134, 137, 135,
	416, 136, 441, 468, 138, 487, 139, 140, 0, 0,
	0, 0, 0, 141, 217, 339, 142, 340, 462, 143,
	144, 0, 463, 145, 220, 0, 146, 147, 148, 488,
	149, 150, 0, 152, 153, 151, 154, 0, 155, 341,
	156, 157, 430, 158, 0, 245, 159, 160, 0, 223,
	161, 162, 458, 163, 164, 342, 165, 489, 166, 0,
	167, 168, 170, 490, 169, 464, 0, 0, 171, 172,
	0, 227, 491, 492, 0, 0, 173, 465, 466, 439,
	174, 175, 176, 177, 0, 0, 178, 179, 180, 459,
	0, 181, 182, 183, 232, 493, 0, 184, 0, 0,
	0, 0, 185, 186, 187, 188, 417, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 413, 414, 0, 0,
	0, 0, 415, 761, 1000, 422, 445, 434, 435, 432,
	433, 421, 0, 0, 0, 0, 0, 0, 88, 89,
	0, 90, 0, 0, 0, 0, 427, 0, 0, 0,
	91, 92, 189, 474, 475, 93, 476, 477, 0, 94,
	194, 195, 95, 442, 460, 478, 479, 198, 0, 470,
	0, 453, 0, 96, 97, 98, 0, 99, 0, 100,
	0, 331, 101, 102, 0, 454, 456, 0, 455, 457,
	103, 104, 105, 106, 480, 107, 481, 482, 0, 0,
	108, 0, 0, 0, 473, 110, 0, 111, 0, 0,
	0, 426, 112, 461, 440, 0, 113, 114, 483, 115,
	0, 116, 0, 0, 332, 0, 117, 471, 0, 207,
	0, 118, 119, 467, 469, 0, 0, 120, 0, 333,
	121, 484, 485, 486, 0, 452, 0, 334, 122, 335,
	123, 124, 0, 0, 472, 336, 125, 337, 0, 126,
	0, 0, 127, 0, 128, 129, 130, 131, 132, 338,
	133, 134, 137, 135, 416, 136, 441, 468, 138, 487,
	139, 140, 0, 0, 0, 0, 0, 141, 217, 339,
	142, 340, 462, 143, 144, 0, 463, 145, 220, 0,
	146, 147, 148, 488, 149, 150, 0, 152, 153, 151,
	154, 0, 155, 341, 156, 157, 430, 158, 0, 245,
	159, 160, 0, 223, 161, 162, 458, 163, 164, 342,
	165, 489, 166, 0, 167, 168, 170, 490, 169, 464,
	0, 0, 171, 172, 0, 227, 491, 492, 0, 0,
	173, 465, 466, 439, 174, 175, 176, 177, 0, 0,
	178, 179, 180, 459, 0, 181, 182, 183, 232, 493,
	1354, 184, 0, 0, 0, 0, 185, 186, 187, 188,
	417, 0, 445, 434, 435, 432, 433, 421, 0, 0,
	413, 414, 0, 0, 88, 89, 415, 90, 0, 422,
	0, 0, 427, 0, 0, 0, 91, 92, 189, 474,
	475, 93, 476, 477, 0, 94, 194, 195, 95, 442,
	460, 478, 479, 198, 0, 470, 0, 453, 0, 96,
	97, 98, 0, 99, 0, 100, 0, 331, 101, 102,
	0, 454, 456, 0, 455, 457, 103, 104, 105, 106,
	480, 107, 481, 482, 514, 0, 108, 0, 0, 0,
	473, 110, 0, 111, 0, 0, 0, 426, 112, 461,
	440, 0, 113, 114, 483, 115, 0, 116, 0, 0,
	332, 0, 117, 471, 0, 207, 0, 118, 119, 467,
	469, 0, 0, 120, 0, 333, 121, 484, 485, 486,
	0, 452, 0, 334, 122, 335, 123, 124, 0, 0,
	472, 336, 125, 337, 0, 126, 0, 0, 127, 0,
	128, 129, 130, 131, 132, 338, 133, 134, 137, 135,
	416, 136, 441, 468, 138, 487, 139, 140, 0, 0,
	0, 0, 0, 141, 217, 339, 142, 340, 462, 143,
	144, 0, 463, 145, 220, 0, 146, 147, 148, 488,
	149, 150, 0, 152, 153, 151, 154, 0, 155, 341,
	156, 157, 430, 158, 0, 245, 159, 160, 0, 223,
	161, 162, 458, 163, 164, 342, 165, 489, 166, 0,
	167, 168, 170, 490, 169, 464, 0, 0, 171, 172,
	0, 227, 491, 492, 0, 0, 173, 465, 466, 439,
	174, 175, 176, 177, 0, 0, 178, 179, 180, 459,
	0, 181, 182, 183, 232, 493, 0, 184, 0, 0,
	0, 0, 185, 186, 187, 188, 417, 0, 445, 434,
	435, 432, 433, 421, 0, 0, 413, 414, 0, 0,
	88, 89, 415, 90, 0, 422, 0, 0, 427, 0,
	0, 0, 91, 92, 189, 474, 475, 93, 476, 477,
	0, 94, 194, 195, 95, 442, 460, 478, 479, 198,
	0, 470, 0, 453, 0, 96, 97, 98, 0, 99,
	0, 100, 0, 331, 101, 102, 0, 454, 456, 0,
	455, 457, 103, 104, 105, 106, 480, 107, 481, 482,
	0, 0, 108, 0, 0, 0, 473, 110, 0, 111,
	0, 0, 0, 426, 112, 461, 440, 0, 113, 114,
	483, 115, 0, 116, 0, 0, 332, 0, 117, 471,
	0, 207, 0, 118, 119, 467, 469, 0, 0, 120,
	0, 333, 121, 484, 485, 486, 0, 452, 0, 334,
	122, 335, 123, 124, 0, 0, 472, 336, 125, 337,
	0, 126, 0, 0, 127, 0, 128, 129, 130, 131,
	132, 338, 133, 134, 137, 135, 416, 136, 441, 468,
	138, 487, 139, 140, 0, 0, 0, 0, 0, 141,
	217, 339, 142, 340, 462, 143, 144, 0, 463, 145,
	220, 0, 146, 147, 148, 488, 149, 150, 0, 152,
	153, 151, 154, 0, 155, 341, 156, 157, 430, 158,
	0, 245, 159, 160, 0, 223, 161, 162, 458, 163,
	164, 342, 165, 489, 166, 0, 167, 168, 170, 490,
	169, 464, 0, 0, 171, 172, 0, 227, 491, 492,
	0, 0, 173, 465, 466, 439, 174, 175, 176, 177,
	0, 0, 178, 179, 180, 459, 0, 181, 182, 183,
	232, 493, 0, 184, 0, 0, 0, 0, 185, 186,
	187, 188, 417, 0, 445, 434, 435, 432, 433, 421,
	0, 0, 413, 414, 411, 0, 88, 89, 415, 90,
	0, 422, 0, 0, 427, 0, 0, 0, 91, 92,
	189, 474, 475, 93, 476, 477, 0, 94, 194, 195,
	95, 442, 460, 478, 479, 198, 0, 470, 0, 453,
	0, 96, 97, 98, 0, 99, 0, 100, 0, 331,
	101, 102, 0, 454, 456, 0, 455, 457, 103, 104,
	105, 106, 480, 107, 481, 482, 0, 0, 108, 0,
	0, 0, 473, 110, 0, 111, 0, 0, 0, 426,
	112, 461, 440, 0, 113, 114, 483, 115, 0, 116,
	0, 1058, 332, 0, 117, 471, 0, 207, 0, 118,
	119, 467, 469, 0, 0, 120, 0, 333, 121, 484,
	485, 486, 0, 452, 0, 334, 122, 335, 123, 124,
	0, 0, 472, 336, 125, 337, 0, 126, 0, 0,
	127, 0, 128, 129, 130, 131, 132, 338, 133, 134,
	137, 135, 416, 136, 441, 468, 138, 487, 139, 140,
	0, 0, 0, 0, 0, 141, 217, 339, 142, 340,
	462, 143, 144, 0, 463, 145, 220, 0, 146, 147,
	148, 488, 149, 150, 0, 152, 153, 151, 154, 0,
	155, 341, 156, 157, 430, 158, 0, 245, 159, 160,
	0, 223, 161, 162, 458, 163, 164, 342, 165, 489,
	166, 0, 167, 168, 170, 490, 169, 464, 0, 0,
	171, 172, 0, 227, 491, 492, 0, 0, 173, 465,
	466, 439, 174, 175, 176, 177, 0, 0, 178, 179,
	180, 459, 0, 181, 182, 183, 232, 493, 0, 184,
	0, 0, 0, 0, 185, 186, 187, 188, 417, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 413, 414,
	0, 0, 0, 0, 415, 0, 0, 422, 445, 434,
	435, 432, 433, 421, 0, 0, 0, 0, 0, 0,
	88, 89, 702, 90, 0, 0, 0, 0, 427, 0,
	0, 0, 91, 92, 189, 474, 475, 93, 476, 477,
	0, 94, 194, 195, 95, 442, 460, 478, 479, 198,
	0, 470, 0, 453, 0, 96, 97, 98, 0, 99,
	0, 100, 0, 331, 101, 102, 0, 454, 456, 0,
	455, 457, 103, 104, 105, 106, 480, 107, 481, 482,
	0, 0, 108, 0, 0, 0, 473, 110, 0, 111,
	0, 0, 0, 426, 112, 461, 440, 0, 113, 114,
	483, 115, 0, 116, 0, 0, 332, 0, 117, 471,
	0, 207, 0, 118, 119, 467, 469, 0, 0, 120,
	0, 333, 121, 484, 485, 486, 0, 452, 0, 334,
	122, 335, 123, 124, 0, 0, 472, 336, 125, 337,
	0, 126, 0, 0, 127, 0, 128, 129, 130, 131,
	132, 338, 133, 134, 137, 135, 416, 136, 441, 468,
	138, 487, 139, 140, 0, 0, 0, 0, 0, 141,
	217, 339, 142, 340, 462, 143, 144, 0, 463, 145,
	220, 0, 146, 147, 148, 488, 149, 150, 0, 152,
	153, 151, 154, 0, 155, 341, 156, 157, 430, 158,
	0, 245, 159, 160, 0, 223, 161, 162, 458, 163,
	164, 342, 165, 489, 166, 0, 167, 168, 170, 490,
	169, 464, 0, 0, 171, 172, 0, 227, 491, 492,
	0, 0, 173, 465, 466, 439, 174, 175, 176, 177,
	0, 0, 178, 179, 180, 459, 0, 181, 182, 183,
	232, 493, 0, 184, 0, 0, 0, 0, 185, 186,
	187, 188, 417, 0, 445, 434, 435, 432, 433, 421,
	0, 0, 413, 414, 0, 0, 88, 89, 415, 90,
	0, 422, 0, 0, 427, 0, 0, 0, 91, 92,
	189, 474, 475, 93, 476, 477, 0, 94, 194, 195,
	95, 442, 460, 478, 479, 198, 0, 470, 0, 453,
	0, 96, 97, 98, 0, 99, 0, 100, 0, 331,
	101, 1678, 0, 454, 456, 0, 455, 457, 103, 104,
	105, 106, 480, 107, 481, 482, 0, 0, 108, 0,
	0, 0, 473, 110, 0, 111, 0, 0, 0, 426,
	112, 461, 440, 0, 113, 114, 483, 115, 0, 116,
	0, 0, 332, 0, 117, 471, 0, 207, 0, 118,
	119, 467, 469, 0, 0, 120, 0, 333, 121, 484,
	485, 486, 0, 452, 0, 334, 122, 335, 123, 124,
	0, 0, 472, 336, 125, 337, 0, 126, 0, 0,
	127, 0, 128, 129, 130, 131, 132, 338, 133, 134,
	137, 135, 416, 136, 441, 468, 138, 487, 139, 140,
	0, 0, 0, 0, 0, 141, 217, 339, 142, 340,
	462, 143, 144, 0, 463, 145, 220, 0, 146, 147,
	148, 488, 149, 150, 0, 152, 153, 151, 154, 0,
	155, 341, 156, 157, 430, 158, 0, 245, 159, 160,
	0, 223, 161, 162, 458, 163, 164, 342, 165, 489,
	166, 0, 167, 168, 170, 490, 169, 464, 0, 0,
	171, 172, 0, 227, 491, 492, 0, 0, 173, 465,
	466, 439, 174, 175, 1677, 177, 0, 0, 178, 179,
	180, 459, 0, 181, 182, 183, 232, 493, 0, 184,
	0, 0, 0, 0, 185, 186, 187, 188, 417, 0,
	445, 434, 435, 432, 433, 421, 0, 0, 413, 414,
	0, 0, 88, 89, 415, 90, 0, 422, 0, 0,
	427, 0, 0, 0, 91, 92, 1676, 474, 475, 93,
	476, 477, 0, 94, 194, 195, 95, 442, 460, 478,
	479, 198, 0, 470, 0, 453, 0, 96, 97, 98,
	0, 99, 0, 100, 0, 331, 101, 1678, 0, 454,
	456, 0, 455, 457, 103, 104, 105, 106, 480, 107,
	481, 482, 0, 0, 108, 0, 0, 0, 473, 110,
	0, 111, 0, 0, 0, 426, 112, 461, 440, 0,
	113, 114, 483, 115, 0, 116, 0, 0, 332, 0,
	117, 471, 0, 207, 0, 118, 119, 467, 469, 0,
	0, 120, 0, 333, 121, 484, 485, 486, 0, 452,
	0, 334, 122, 335, 123, 124, 0, 0, 472, 336,
	125, 337, 0, 126, 0, 0, 127, 0, 128, 129,
	130, 131, 132, 338, 133, 134, 137, 135, 416, 136,
	441, 468, 138, 487, 139, 140, 0, 0, 0, 0,
	0, 141, 217, 339, 142, 340, 462, 143, 144, 0,
	463, 145, 220, 0, 146, 147, 148, 488, 149, 150,
	0, 152, 153, 151, 154, 0, 155, 341, 156, 157,
	430, 158, 0, 245, 159, 160, 0, 223, 161, 162,
	458, 163, 164, 342, 165, 489, 166, 0, 167, 168,
	170, 490, 169, 464, 0, 0, 171, 172, 0, 227,
	491, 492, 0, 0, 173, 465, 466, 439, 174, 175,
	1677, 177, 0, 0, 178, 179, 180, 459, 0, 181,
	182, 183, 232, 493, 0, 184, 0, 0, 0, 0,
	185, 186, 187, 188, 417, 0, 445, 434, 435, 432,
	433, 421, 0, 0, 413, 414, 0, 0, 88, 89,
	415, 90, 0, 422, 0, 0, 427, 0, 0, 0,
	91, 92, 189, 474, 475, 93, 476, 477, 0, 94,
	194, 195, 95, 442, 460, 478, 479, 198, 0, 470,
	0, 453, 0, 96, 97, 98, 0, 99, 0, 100,
	0, 331, 101, 102, 0, 454, 456, 0, 455, 457,
	103, 104, 105, 106, 480, 107, 481, 482, 0, 0,
	108, 0, 0, 0, 473, 110, 0, 111, 0, 0,
	0, 426, 112, 461, 440, 0, 113, 114, 483, 115,
	0, 116, 0, 0, 332, 0, 117, 471, 0, 207,
	0, 118, 119, 467, 469, 0, 0, 120, 0, 333,
	121, 484, 485, 486, 0, 452, 0, 334, 122, 335,
	123, 124, 0, 0, 472, 336, 125, 337, 0, 126,
	0, 0, 127, 0, 128, 129, 130, 131, 132, 338,
	133, 134, 137, 135, 416, 136, 441, 468, 138, 487,
	139, 140, 0, 0, 0, 0, 0, 141, 217, 339,
	142, 340, 462, 143, 144, 0, 463, 145, 220, 0,
	146, 147, 148, 488, 149, 150, 0, 152, 153, 151,
	154, 0, 155, 341, 156, 157, 430, 158, 0, 245,
	159, 160, 0, 223, 161, 162, 458, 163, 164, 342,
	165, 489, 166, 0, 167, 168, 170, 490, 169, 464,
	0, 0, 171, 172, 0, 227, 491, 492, 0, 0,
	173, 465, 466, 439, 174, 175, 176, 177, 0, 0,
	178, 179, 180, 459, 0, 181, 182, 183, 232, 493,
	0, 184, 0, 0, 0, 0, 185, 186, 187, 188,
	417, 0, 445, 434, 435, 432, 433, 421, 0, 0,
	413, 414, 0, 0, 88, 89, 415, 90, 0, 422,
	0, 0, 427, 0, 0, 0, 91, 92, 189, 474,
	475, 93, 476, 477, 0, 94, 194, 195, 95, 442,
	460, 478, 479, 198, 0, 470, 0, 453, 0, 96,
	97, 98, 0, 99, 0, 100, 0, 331, 101, 102,
	0, 454, 456, 0, 455, 457, 103, 104, 105, 106,
	480, 107, 481, 482, 0, 0, 108, 0, 0, 0,
	473, 110, 0, 111, 0, 0, 0, 426, 112, 461,
	440, 0, 113, 114, 483, 115, 0, 116, 0, 0,
	332, 0, 117, 471, 0, 207, 0, 118, 119, 467,
	469, 0, 0, 120, 0, 333, 121, 484, 485, 486,
	0, 452, 0, 334, 122, 335, 123, 124, 0, 0,
	472, 336, 125, 337, 0, 126, 0, 0, 127, 0,
	128, 129, 130, 131, 132, 338, 133, 134, 137, 135,
	0, 136, 441, 468, 138, 487, 139, 140, 0, 0,
	0, 0, 0, 141, 217, 339, 142, 340, 462, 143,
	144, 0, 463, 145, 220, 0, 146, 147, 148, 488,
	149, 150, 0, 152, 153, 151, 154, 0, 155, 341,
	156, 157, 1048, 158, 0, 245, 159, 160, 0, 223,
	161, 162, 458, 163, 164, 342, 165, 489, 166, 0,
	167, 168, 170, 490, 169, 464, 0, 0, 171, 172,
	0, 227, 491, 492, 0, 0, 173, 465, 466, 439,
	174, 175, 176, 177, 0, 0, 178, 179, 180, 459,
	0, 181, 182, 183, 232, 493, 0, 184, 0, 0,
	0, 0, 185, 186, 187, 188, 445, 434, 435, 432,
	433, 421, 0, 0, 0, 0, 1044, 1045, 88, 89,
	0, 90, 1046, 0, 0, 1047, 427, 0, 0, 0,
	91, 92, 0, 474, 475, 93, 476, 477, 0, 94,
	194, 195, 95, 442, 460, 478, 479, 198, 0, 470,
	0, 453, 0, 96, 97, 98, 0, 99, 0, 100,
	0, 331, 101, 1678, 0, 454, 456, 0, 455, 457,
	103, 104, 105, 106, 480, 107, 481, 482, 0, 0,
	108, 0, 0, 0, 473, 110, 0, 111, 0, 0,
	0, 426, 112, 461, 440, 0, 113, 114, 483, 115,
	0, 116, 0, 0, 332, 0, 117, 471, 0, 207,
	0, 118, 119, 467, 469, 0, 0, 120, 0, 333,
	121, 484, 485, 486, 0, 452, 0, 0, 122, 335,
	123, 124, 0, 0, 472, 336, 125, 0, 0, 126,
	0, 0, 127, 0, 128, 129, 130, 131, 132, 338,
	133, 134, 137, 135, 416, 136, 441, 468, 138, 487,
	139, 140, 0, 0, 0, 0, 0, 141, 217, 339,
	142, 340, 462, 143, 144, 0, 463, 145, 220, 0,
	146, 147, 148, 488, 149, 150, 0, 152, 153, 151,
	154, 0, 155, 341, 156, 157, 430, 158, 0, 245,
	159, 160, 0, 223, 161, 162, 458, 163, 164, 0,
	165, 489, 166, 0, 167, 168, 170, 490, 169, 464,
	0, 0, 171, 172, 0, 227, 491, 492, 0, 0,
	173, 465, 466, 439, 174, 175, 1677, 177, 0, 0,
	178, 179, 180, 459, 0, 181, 182, 183, 232, 493,
	0, 184, 0, 0, 0, 0, 185, 186, 187, 188,
	445, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	413, 414, 88, 89, 0, 90, 415, 0, 0, 422,
	0, 0, 0, 0, 91, 92, 189, 190, 191, 93,
	192, 193, 0, 94, 194, 195, 95, 0, 460, 196,
	197, 198, 0, 470, 0, 453, 0, 96, 97, 98,
	0, 99, 0, 100, 0, 331, 101, 102, 0, 454,
	456, 0, 455, 457, 103, 104, 105, 106, 200, 107,
	201, 202, 0, 0, 108, 0, 0, 0, 109, 110,
	0, 111, 0, 0, 0, 203, 112, 461, 0, 0,
	113, 114, 205, 115, 0, 116, 0, 0, 332, 0,
	117, 471, 0, 207, 0, 118, 119, 467, 469, 0,
	0, 120, 0, 333, 121, 210, 211, 212, 0, 213,
	0, 334, 122, 335, 123, 124, 0, 0, 472, 336,
	125, 337, 0, 126, 0, 0, 127, 0, 128, 129,
	130, 131, 132, 338, 133, 134, 137, 135, 0, 136,
	0, 468, 138, 216, 139, 140, 0, 0, 0, 0,
	0, 141, 217, 339, 142, 340, 462, 143, 144, 0,
	463, 145, 220, 0, 146, 147, 148, 221, 149, 150,
	0, 152, 153, 151, 154, 0, 155, 341, 156, 157,
	222, 158, 0, 245, 159, 160, 0, 223, 161, 162,
	458, 163, 164, 342, 165, 224, 166, 0, 167, 168,
	170, 225, 169, 464, 0, 0, 171, 172, 0, 227,
	228, 229, 0, 0, 173, 465, 466, 0, 174, 175,
	176, 177, 0, 0, 178, 179, 180, 459, 0, 181,
	182, 183, 232, 233, 0, 184, 0, 0, 0, 0,
	185, 186, 187, 188, 325, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 88, 89, 0, 90,
	0, 0, 0, 1464, 0, 0, 0, 0, 91, 92,
	189, 190, 191, 93, 192, 193, 0, 94, 194, 195,
	95, 0, 0, 196, 197, 198, 0, 199, 0, 330,
	0, 96, 97, 98, 0, 99, 0, 100, 0, 331,
	101, 102, 0, 0, 0, 0, 0, 0, 103, 104,
	105, 106, 200, 107, 201, 202, 0, 0, 108, 0,
	0, 0, 109, 110, 0, 111, 0, 0, 0, 203,
	112, 204, 0, 0, 113, 114, 205, 115, 0, 116,
	0, 0, 332, 0, 117, 206, 0, 207, 0, 118,
	119, 208, 209, 0, 0, 120, 0, 333, 121, 210,
	211, 212, 0, 213, 0, 334, 122, 335, 123, 124,
	0, 0, 214, 336, 125, 337, 0, 126, 0, 0,
	127, 0, 128, 129, 130, 131, 132, 338, 133, 134,
	137, 135, 0, 136, 0, 215, 138, 216, 139, 140,
	0, 0, 0, 0, 0, 141, 217, 339, 142, 340,
	218, 143, 144, 0, 219, 145, 220, 0, 146, 147,
	148, 221, 149, 150, 0, 152, 153, 151, 154, 0,
	155, 341, 156, 157, 222, 158, 0, 245, 159, 160,
	49, 223, 161, 162, 0, 163, 164, 342, 165, 224,
	166, 0, 167, 168, 170, 225, 169, 226, 0, 51,
	171, 172, 0, 227, 228, 229, 0, 0, 173, 230,
	231, 0, 174, 175, 176, 177, 0, 0, 178, 179,
	180, 0, 0, 181, 182, 183, 329, 233, 0, 184,
	0, 0, 0, 47, 185, 186, 187, 188, 0, 48,
	325, 575, 0, 576, 571, 566, 0, 0, 0, 0,
	0, 0, 88, 89, 0, 90, 0, 46, 0, 0,
	0, 0, 0, 0, 91, 92, 189, 190, 191, 93,
	192, 193, 0, 94, 194, 195, 95, 0, 0, 196,
	197, 198, 0, 199, 0, 330, 0, 96, 97, 98,
	0, 99, 0, 100, 0, 331, 101, 102, 0, 0,
	0, 0, 0, 0, 103, 104, 105, 106, 200, 107,
	201, 202, 579, 0, 108, 0, 0, 0, 109, 110,
	0, 111, 0, 0, 0, 203, 112, 204, 568, 0,
	113, 114, 205, 115, 0, 116, 0, 0, 332, 0,
	117, 206, 0, 207, 0, 118, 119, 208, 209, 0,
	0, 120, 0, 333, 121, 210, 211, 212, 0, 213,
	0, 334, 122, 335, 123, 124, 0, 0, 214, 336,
	125, 337, 0, 126, 0, 0, 127, 0, 128, 129,
	130, 131, 132, 338, 133, 134, 137, 135, 0, 136,
	0, 215, 138, 216, 139, 140, 0, 569, 0, 0,
	0, 141, 217, 339, 142, 340, 218, 143, 144, 0,
	219, 145, 220, 0, 146, 147, 148, 221, 149, 150,
	0, 152, 153, 151, 154, 0, 155, 341, 156, 157,
	222, 158, 0, 245, 159, 160, 0, 223, 161, 162,
	0, 163, 164, 342, 165, 224, 166, 0, 167, 168,
	170, 225, 169, 226, 0, 0, 171, 172, 0, 227,
	228, 229, 0, 0, 173, 230, 231, 567, 174, 175,
	176, 177, 0, 0, 178, 179, 180, 0, 0, 181,
	182, 183, 232, 233, 0, 184, 0, 0, 0, 0,
	185, 186, 187, 188, 325, 575, 0, 576, 571, 566,
	0, 0, 0, 0, 577, 572, 88, 89, 0, 90,
	0, 0, 0, 0, 0, 0, 0, 0, 91, 92,
	189, 190, 191, 93, 192, 193, 0, 94, 194, 195,
	95, 0, 0, 196, 197, 198, 0, 199, 0, 330,
	0, 96, 97, 98, 0, 99, 0, 100, 0, 331,
	101, 102, 0, 0, 0, 0, 0, 0, 103, 104,
	105, 106, 200, 107, 201, 202, 562, 0, 108, 0,
	0, 0, 109, 110, 0, 111, 0, 0, 0, 203,
	112, 204, 568, 0, 113, 114, 205, 115, 0, 116,
	0, 0, 332, 0, 117, 206, 0, 207, 0, 118,
	119, 208, 209, 0, 0, 120, 0, 333, 121, 210,
	211, 212, 0, 213, 0, 334, 122, 335, 123, 124,
	0, 0, 214, 336, 125, 337, 0, 126, 0, 0,
	127, 0, 128, 129, 130, 131, 132, 338, 133, 134,
	137, 135, 0, 136, 0, 215, 138, 216, 139, 140,
	0, 569, 0, 0, 0, 141, 217, 339, 142, 340,
	218, 143, 144, 0, 219, 145, 220, 0, 146, 147,
	148, 221, 149, 150, 0, 152, 153, 151, 154, 0,
	155, 341, 156, 157, 222, 158, 0, 245, 159, 160,
	0, 223, 161, 162, 0, 163, 164, 342, 165, 224,
	166, 0, 167, 168, 170, 225, 169, 226, 0, 0,
	171, 172, 0, 227, 228, 229, 0, 0, 173, 230,
	231, 567, 174, 175, 176, 177, 0, 0, 178, 179,
	180, 0, 0, 181, 182, 183, 232, 233, 0, 184,
	0, 0, 0, 0, 185, 186, 187, 188, 325, 575,
	0, 576, 571, 566, 0, 0, 0, 0, 577, 572,
	88, 89, 0, 90, 0, 0, 0, 0, 0, 0,
	0, 0, 91, 92, 189, 190, 191, 93, 192, 193,
	0, 94, 194, 195, 95, 0, 0, 196, 197, 198,
	0, 199, 0, 330, 0, 96, 97, 98, 0, 99,
	0, 100, 0, 331, 101, 102, 0, 0, 0, 0,
	0, 0, 103, 104, 105, 106, 200, 107, 201, 202,
	0, 0, 108, 0, 0, 0, 109, 110, 0, 111,
	0, 0, 0, 203, 112, 204, 568, 0, 113, 114,
	205, 115, 0, 116, 0, 0, 332, 0, 117, 206,
	0, 207, 0, 118, 119, 208, 209, 0, 0, 120,
	0, 333, 121, 210, 211, 212, 0, 213, 0, 334,
	122, 335, 123, 124, 0, 0, 214, 336, 125, 337,
	0, 126, 0, 0, 127, 0, 128, 129, 130, 131,
	132, 338, 133, 134, 137, 135, 0, 136, 0, 215,
	138, 216, 139, 140, 0, 569, 0, 0, 0, 141,
	217, 339, 142, 340, 218, 143, 144, 0, 219, 145,
	220, 0, 146, 147, 148, 221, 149, 150, 0, 152,
	153, 151, 154, 0, 155, 341, 156, 157, 222, 158,
	0, 245, 159, 160, 0, 223, 161, 162, 0, 163,
	164, 342, 165, 224, 166, 0, 167, 168, 170, 225,
	169, 226, 0, 0, 171, 172, 0, 227, 228, 229,
	0, 0, 173, 230, 231, 567, 174, 175, 176, 177,
	0, 0, 178, 179, 180, 0, 0, 181, 182, 183,
	232, 233, 85, 184, 0, 0, 0, 0, 185, 186,
	187, 188, 0, 0, 88, 89, 0, 90, 0, 0,
	0, 0, 577, 572, 0, 0, 91, 92, 189, 190,
	191, 93, 192, 193, 0, 94, 194, 195, 95, 0,
	0, 196, 197, 198, 0, 199, 0, 0, 0, 96,
	97, 98, 0, 99, 0, 100, 0, 0, 101, 102,
	0, 0, 0, 0, 0, 0, 103, 104, 105, 106,
	200, 107, 201, 202, 0, 0, 108, 0, 0, 0,
	109, 110, 0, 111, 0, 0, 0, 203, 112, 204,
	0, 0, 113, 114, 205, 115, 0, 116, 0, 0,
	0, 0, 117, 206, 0, 207, 0, 118, 119, 208,
	209, 0, 0, 120, 0, 0, 121, 210, 211, 212,
	0, 213, 0, 0, 122, 0, 123, 124, 0, 0,
	214, 0, 125, 0, 0, 126, 0, 0, 127, 0,
	128, 129, 130, 131, 132, 0, 133, 134, 137, 135,
	0, 136, 0, 215, 138, 216, 139, 140, 0, 0,
	298, 0, 0, 141, 217, 0, 142, 0, 218, 143,
	144, 0, 219, 145, 220, 0, 146, 147, 148, 221,
	149, 150, 0, 152, 153, 151, 154, 0, 155, 0,
	156, 157, 222, 158, 0, 245, 159, 160, 49, 223,
	161, 162, 0, 163, 164, 0, 165, 224, 166, 0,
	167, 168, 170, 225, 169, 226, 0, 51, 171, 172,
	0, 227, 228, 229, 0, 0, 173, 230, 231, 0,
	174, 175, 176, 177, 0, 0, 178, 179, 180, 0,
	0, 181, 182, 183, 329, 233, 0, 184, 0, 0,
	0, 47, 185, 186, 187, 188, 85, 48, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 88, 89,
	0, 90, 0, 0, 0, 913, 0, 0, 0, 0,
	91, 92, 189, 190, 191, 93, 192, 193, 0, 94,
	194, 195, 95, 0, 0, 196, 197, 198, 0, 199,
	0, 0, 0, 96, 97, 98, 0, 99, 0, 100,
	0, 0, 101, 102, 0, 0, 0, 0, 0, 0,
	103, 104, 105, 106, 200, 107, 201, 202, 0, 0,
	108, 0, 0, 0, 109, 110, 0, 111, 0, 0,
	0, 203, 112, 204, 0, 0, 113, 114, 205, 115,
	0, 116, 0, 0, 0, 0, 117, 206, 0, 207,
	0, 118, 119, 208, 209, 0, 0, 120, 0, 0,
	121, 210, 211, 212, 0, 213, 0, 0, 122, 0,
	123, 124, 0, 0, 214, 0, 125, 0, 0, 126,
	0, 0, 127, 0, 128, 129, 130, 131, 132, 0,
	133, 134, 137, 135, 0, 136, 0, 215, 138, 216,
	139, 140, 0, 0, 0, 0, 0, 141, 217, 0,
	142, 0, 218, 143, 144, 0, 219, 145, 220, 0,
	146, 147, 148, 221, 149, 150, 0, 152, 153, 151,
	154, 0, 155, 0, 156, 157, 222, 158, 0, 245,
	159, 160, 49, 223, 161, 162, 0, 163, 164, 0,
	165, 224, 166, 0, 167, 168, 170, 225, 169, 226,
	0, 51, 171, 172, 0, 227, 228, 229, 0, 0,
	173, 230, 231, 0, 174, 175, 176, 177, 0, 0,
	178, 179, 180, 0, 0, 181, 182, 183, 329, 233,
	0, 184, 0, 0, 0, 47, 185, 186, 187, 188,
	85, 48, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 88, 89, 0, 90, 0, 0, 0, 46,
	0, 1157, 0, 0, 91, 92, 189, 190, 191, 93,
	192, 193, 0, 94, 194, 195, 95, 0, 0, 196,
	197, 198, 0, 199, 0, 0, 0, 96, 97, 98,
	0, 99, 0, 100, 0, 0, 101, 102, 0, 0,
	0, 0, 0, 0, 103, 104, 105, 106, 200, 107,
	201, 202, 0, 0, 108, 0, 0, 0, 109, 110,
	0, 111, 0, 0, 0, 203, 112, 204, 0, 0,
	113, 114, 205, 115, 0, 116, 0, 0, 0, 0,
	117, 206, 0, 207, 0, 118, 119, 208, 209, 0,
	0, 120, 0, 0, 121, 210, 211, 212, 0, 213,
	0, 0, 122, 0, 123, 124, 0, 0, 214, 0,
	125, 0, 0, 126, 0, 0, 127, 0, 128, 129,
	130, 131, 132, 0, 133, 134, 137, 135, 0, 136,
	0, 215, 138, 216, 139, 140, 0, 0, 0, 0,
	0, 141, 217, 0, 142, 0, 218, 143, 144, 0,
	219, 145, 220, 0, 146, 147, 148, 221, 149, 150,
	0, 152, 153, 151, 154, 0, 155, 0, 156, 157,
	222, 158, 0, 245, 159, 160, 0, 223, 161, 162,
	0, 163, 164, 0, 165, 224, 166, 0, 167, 168,
	170, 225, 169, 226, 0, 0, 171, 172, 0, 227,
	228, 229, 0, 0, 173, 230, 231, 0, 174, 175,
	176, 177, 0, 0, 178, 179, 180, 0, 0, 181,
	182, 183, 232, 233, 0, 184, 0, 0, 0, 0,
	185, 186, 187, 188, 85, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 88, 89, 0, 90,
	0, 0, 0, 0, 403, 0, 0, 0, 91, 92,
	189, 190, 191, 93, 192, 193, 0, 94, 194, 195,
	95, 0, 0, 196, 197, 198, 0, 199, 0, 0,
	0, 96, 97, 98, 0, 99, 0, 100, 0, 0,
	101, 102, 0, 0, 0, 0, 0, 0, 103, 104,
	105, 106, 200, 107, 201, 202, 0, 0, 108, 0,
	0, 0, 109, 110, 0, 111, 0, 0, 0, 203,
	112, 204, 0, 0, 113, 114, 205, 115, 0, 116,
	0, 0, 0, 0, 117, 206, 0, 207, 0, 118,
	119, 208, 209, 0, 0, 120, 0, 0, 121, 210,
	211, 212, 0, 213, 0, 0, 122, 0, 123, 124,
	0, 0, 214, 0, 125, 0, 0, 126, 0, 0,
	127, 0, 128, 129, 130, 131, 132, 0, 133, 134,
	137, 135, 0, 136, 0, 215, 138, 216, 139, 140,
	0, 0, 298, 0, 0, 141, 217, 0, 142, 0,
	218, 143, 144, 0, 219, 145, 220, 0, 146, 147,
	148, 221, 149, 150, 0, 152, 153, 151, 154, 0,
	155, 0, 156, 157, 222, 158, 0, 245, 159, 160,
	0, 223, 161, 162, 0, 163, 164, 0, 165, 224,
	166, 0, 167, 168, 170, 225, 169, 226, 0, 0,
	171, 172, 0, 227, 228, 229, 0, 0, 173, 230,
	231, 0, 174, 175, 176, 177, 0, 0, 178, 179,
	180, 0, 0, 181, 182, 183, 232, 233, 0, 184,
	0, 0, 0, 0, 185, 186, 187, 188, 85, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	88, 89, 0, 90, 0, 0, 0, 913, 0, 0,
	0, 0, 91, 92, 189, 190, 191, 93, 192, 193,
	0, 94, 194, 195, 95, 0, 0, 196, 197, 198,
	0, 199, 0, 0, 0, 96, 97, 98, 0, 99,
	0, 100, 0, 0, 101, 102, 0, 0, 0, 0,
	0, 0, 103, 104, 105, 106, 200, 107, 201, 202,
	0, 0, 108, 0, 0, 0, 109, 110, 0, 111,
	0, 0, 0, 203, 112, 204, 0, 0, 113, 114,
	205, 115, 0, 116, 0, 0, 0, 0, 117, 206,
	0, 207, 0, 118, 119, 208, 209, 0, 0, 120,
	0, 0, 121, 210, 211, 212, 0, 213, 0, 0,
	122, 0, 123, 124, 0, 0, 214, 0, 125, 0,
	0, 126, 0, 0, 127, 0, 128, 129, 130, 131,
	132, 0, 133, 134, 137, 135, 0, 136, 0, 215,
	138, 216, 139, 140, 0, 0, 0, 0, 0, 141,
	217, 0, 142, 0, 218, 143, 144, 0, 219, 145,
	220, 0, 146, 147, 148, 221, 149, 150, 0, 152,
	153, 151, 154, 0, 155, 0, 156, 157, 222, 158,
	0, 245, 159, 160, 0, 223, 161, 162, 0, 163,
	164, 0, 165, 224, 166, 0, 167, 168, 170, 225,
	169, 226, 0, 0, 171, 172, 0, 227, 228, 229,
	0, 0, 173, 230, 231, 0, 174, 175, 176, 177,
	0, 0, 178, 179, 180, 0, 0, 181, 182, 183,
	232, 233, 0, 184, 0, 0, 0, 0, 185, 186,
	187, 188, 85, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 88, 89, 0, 90, 0, 0,
	0, 848, 0, 0, 0, 0, 91, 92, 189, 190,
	191, 93, 192, 193, 0, 94, 194, 195, 95, 0,
	0, 196, 197, 198, 0, 199, 0, 0, 0, 96,
	97, 98, 0, 99, 0, 100, 0, 0, 101, 102,
	0, 0, 0, 0, 0, 0, 103, 104, 105, 106,
	200, 107, 201, 202, 0, 0, 108, 0, 0, 0,
	109, 110, 0, 111, 0, 0, 0, 203, 112, 204,
	0, 0, 113, 114, 205, 115, 0, 116, 0, 0,
	0, 0, 117, 206, 0, 207, 0, 118, 119, 208,
	209, 0, 0, 120, 0, 0, 121, 210, 211, 212,
	0, 213, 0, 0, 122, 0, 123, 124, 0, 0,
	214, 0, 125, 0, 0, 126, 0, 0, 127, 0,
	128, 129, 130, 131, 132, 0, 133, 134, 137, 135,
	0, 136, 0, 215, 138, 216, 139, 140, 0, 0,
	0, 0, 0, 141, 217, 0, 142, 0, 218, 143,
	144, 0, 219, 145, 220, 0, 146, 147, 148, 221,
	149, 150, 0, 152, 153, 151, 154, 0, 155, 0,
	156, 157, 222, 158, 0, 245, 159, 160, 0, 223,
	161, 162, 0, 163, 164, 0, 165, 224, 166, 0,
	167, 168, 170, 225, 169, 226, 0, 0, 171, 172,
	0, 227, 228, 229, 0, 0, 173, 230, 231, 0,
	174, 175, 176, 177, 0, 0, 178, 179, 180, 0,
	0, 181, 182, 183, 232, 233, 0, 184, 0, 0,
	0, 0, 185, 186, 187, 188, 85, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 88, 89,
	0, 90, 0, 0, 0, 1372, 0, 0, 0, 0,
	91, 92, 189, 190, 191, 93, 192, 193, 0, 94,
	194, 195, 95, 0, 0, 196, 197, 198, 0, 199,
	0, 0, 0, 96, 97, 98, 0, 99, 0, 100,
	0, 0, 101, 102, 0, 0, 0, 0, 0, 0,
	103, 104, 105, 106, 200, 107, 201, 202, 0, 0,
	108, 0, 0, 0, 109, 110, 0, 111, 0, 0,
	0, 203, 112, 204, 0, 0, 113, 114, 205, 115,
	0, 116, 0, 0, 0, 0, 117, 206, 0, 207,
	0, 118, 119, 208, 209, 0, 0, 120, 0, 0,
	121, 210, 211, 212, 0, 213, 0, 0, 122, 0,
	123, 124, 0, 0, 214, 0, 125, 0, 0, 126,
	0, 0, 127, 0, 128, 129, 130, 131, 132, 0,
	133, 134, 137, 135, 0, 136, 0, 215, 138, 216,
	139, 140, 0, 0, 0, 0, 0, 141, 217, 0,
	142, 0, 218, 143, 144, 0, 219, 145, 220, 0,
	146, 147, 148, 221, 149, 150, 0, 152, 153, 151,
	154, 0, 155, 0, 156, 157, 222, 158, 0, 245,
	159, 160, 0, 223, 161, 162, 0, 163, 164, 0,
	165, 224, 166, 0, 167, 168, 170, 225, 169, 226,
	0, 0, 171, 172, 0, 227, 228, 229, 0, 0,
	173, 230, 231, 0, 174, 175, 176, 177, 0, 0,
	178, 179, 180, 0, 0, 181, 182, 183, 232, 233,
	0, 184, 0, 0, 0, 0, 185, 186, 187, 188,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 88, 89, 0, 90, 0, 0, 0, 504,
	0, 0, 0, 0, 91, 92, 189, 190, 191, 93,
	192, 193, 0, 94, 194, 195, 95, 0, 0, 196,
	197, 198, 0, 199, 0, 0, 0, 96, 97, 98,
	0, 99, 0, 100, 0, 0, 101, 102, 0, 0,
	0, 0, 0, 0, 103, 104, 547, 106, 200, 107,
	201, 202, 0, 0, 108, 0, 0, 0, 109, 110,
	0, 111, 0, 0, 0, 203, 112, 204, 0, 0,
	113, 114, 205, 115, 0, 116, 0, 0, 0, 0,
	117, 206, 0, 207, 0, 118, 119, 208, 209, 0,
	0, 120, 0, 0, 121, 210, 211, 212, 0, 213,
	0, 0, 122, 0, 123, 124, 0, 0, 214, 0,
	125, 0, 0, 126, 0, 0, 127, 0, 128, 129,
	130, 131, 132, 0, 133, 134, 137, 135, 0, 136,
	0, 215, 138, 216, 139, 140, 0, 0, 0, 0,
	0, 141, 217, 0, 142, 0, 218, 143, 144, 0,
	219, 145, 220, 0, 146, 147, 148, 221, 149, 150,
	0, 152, 153, 151, 154, 0, 155, 0, 156, 157,
	222, 158, 0, 245, 159, 160, 0, 223, 161, 162,
	0, 163, 164, 0, 165, 224, 166, 0, 167, 168,
	170, 225, 169, 226, 0, 546, 171, 172, 0, 227,
	228, 229, 0, 0, 173, 230, 231, 0, 174, 175,
	176, 177, 0, 0, 178, 179, 180, 0, 0, 181,
	182, 183, 232, 233, 85, 184, 0, 0, 0, 0,
	185, 186, 187, 188, 0, 0, 88, 89, 0, 90,
	0, 0, 0, 0, 0, 0, 550, 0, 91, 92,
	189, 190, 191, 93, 192, 193, 0, 94, 194, 195,
	95, 0, 0, 196, 197, 198, 0, 199, 0, 0,
	0, 96, 97, 98, 0, 99, 0, 100, 0, 0,
	101, 102, 0, 0, 0, 0, 0, 0, 103, 104,
	105, 106, 200, 107, 201, 202, 0, 0, 108, 0,
	0, 0, 109, 110, 0, 111, 0, 0, 0, 203,
	112, 204, 0, 0, 113, 114, 205, 115, 0, 116,
	0, 0, 0, 0, 117, 206, 0, 207, 0, 118,
	119, 208, 209, 0, 0, 120, 0, 0, 121, 210,
	211, 212, 0, 213, 0, 0, 122, 0, 123, 124,
	0, 0, 214, 0, 125, 0, 0, 126, 0, 0,
	127, 0, 128, 129, 130, 131, 132, 0, 133, 134,
	137, 135, 0, 136, 0, 215, 138, 216, 139, 140,
	0, 0, 0, 0, 0, 141, 217, 0, 142, 0,
	218, 143, 144, 0, 219, 145, 220, 0, 146, 147,
	148, 221, 149, 150, 0, 152, 153, 151, 154, 0,
	155, 0, 156, 157, 222, 158, 0, 245, 159, 160,
	0, 223, 161, 162, 0, 163, 164, 0, 165, 224,
	166, 0, 167, 168, 170, 225, 169, 226, 0, 0,
	171, 172, 0, 227, 228, 229, 0, 0, 173, 230,
	231, 0, 174, 175, 176, 177, 0, 0, 178, 179,
	180, 0, 0, 181, 182, 183, 232, 233, 325, 184,
	0, 0, 0, 0, 185, 186, 187, 188, 0, 0,
	88, 89, 0, 90, 0, 0, 0, 0, 0, 0,
	550, 0, 91, 92, 189, 190, 191, 93, 192, 193,
	0, 94, 194, 195, 95, 0, 0, 196, 197, 198,
	0, 199, 0, 330, 0, 96, 97, 98, 0, 99,
	0, 100, 0, 331, 101, 102, 0, 0, 0, 0,
	0, 0, 103, 104, 105, 106, 200, 107, 201, 202,
	0, 0, 108, 0, 0, 0, 109, 110, 0, 111,
	0, 0, 0, 203, 112, 204, 0, 0, 113, 114,
	205, 115, 0, 116, 0, 0, 332, 0, 117, 206,
	0, 207, 0, 118, 119, 208, 209, 0, 0, 120,
	0, 333, 121, 210, 211, 212, 0, 213, 0, 334,
	122, 335, 123, 124, 0, 0, 214, 336, 125, 337,
	0, 126, 0, 0, 127, 0, 128, 129, 130, 131,
	132, 338, 133, 134, 137, 135, 0, 136, 0, 215,
	138, 216, 139, 140, 0, 0, 0, 0, 0, 141,
	217, 339, 142, 340, 218, 143, 144, 0, 219, 145,
	220, 0, 146, 147, 148, 221, 149, 150, 0, 152,
	153, 151, 154, 0, 155, 341, 156, 157, 222, 158,
	0, 245, 159, 160, 0, 223, 161, 162, 0, 163,
	164, 342, 165, 224, 166, 0, 167, 168, 170, 225,
	169, 226, 0, 0, 171, 172, 0, 227, 228, 229,
	0, 0, 173, 230, 231, 0, 174, 175, 176, 177,
	0, 0, 178, 179, 180, 0, 0, 181, 182, 183,
	232, 233, 85, 184, 0, 0, 0, 0, 185, 186,
	187, 188, 0, 0, 88, 89, 0, 90, 0, 0,
	0, 0, 0, 0, 0, 0, 91, 92, 189, 190,
	191, 93, 192, 193, 0, 94, 194, 195, 95, 0,
	0, 196, 197, 198, 821, 199, 0, 0, 0, 96,
	97, 98, 0, 99, 819, 100, 0, 0, 101, 102,
	0, 0, 0, 0, 0, 0, 103, 104, 105, 106,
	200, 107, 201, 202, 0, 0, 108, 0, 0, 0,
	109, 110, 0, 111, 0, 0, 0, 203, 112, 204,
	0, 0, 113, 114, 205, 115, 0, 116, 824, 0,
	0, 0, 117, 206, 0, 207, 0, 118, 119, 208,
	209, 0, 889, 120, 0, 0, 121, 210, 211, 212,
	0, 213, 0, 0, 122, 0, 123, 124, 0, 0,
	214, 0, 125, 0, 0, 126, 0, 0, 127, 0,
	128, 129, 130, 131, 132, 0, 133, 134, 137, 135,
	0, 136, 0, 215, 138, 216, 139, 140, 0, 0,
	0, 0, 0, 141, 217, 0, 142, 0, 218, 143,
	144, 0, 219, 145, 220, 823, 146, 147, 148, 221,
	149, 150, 0, 152, 153, 151, 154, 0, 155, 0,
	156, 157, 222, 158, 0, 245, 159, 160, 0, 223,
	161, 162, 0, 163, 164, 0, 165, 224, 166, 0,
	167, 168, 170, 225, 169, 226, 0, 0, 171, 172,
	0, 227, 228, 229, 0, 0, 173, 230, 231, 0,
	174, 175, 176, 177, 0, 890, 178, 179, 180, 0,
	0, 181, 182, 183, 232, 233, 85, 184, 0, 0,
	0, 0, 185, 186, 187, 188, 0, 0, 88, 89,
	0, 90, 0, 0, 0, 0, 0, 0, 0, 0,
	91, 92, 189, 190, 191, 93, 192, 193, 0, 94,
	194, 195, 95, 0, 0, 196, 197, 198, 821, 199,
	0, 0, 816, 96, 97, 98, 0, 99, 819, 100,
	0, 0, 101, 102, 0, 0, 0, 0, 0, 0,
	103, 104, 105, 106, 200, 107, 201, 202, 0, 0,
	108, 0, 0, 0, 109, 110, 0, 111, 0, 0,
	0, 203, 112, 204, 0, 0, 113, 114, 205, 115,
	0, 116, 824, 0, 0, 0, 117, 206, 0, 207,
	0, 118, 119, 815, 209, 0, 0, 120, 0, 0,
	121, 210, 211, 212, 0, 213, 0, 0, 122, 0,
	123, 124, 0, 0, 214, 0, 125, 0, 0, 126,
	0, 0, 127, 0, 128, 129, 130, 131, 132, 0,
	133, 134, 137, 135, 0, 136, 0, 215, 138, 216,
	139, 140, 0, 0, 0, 0, 0, 141, 217, 0,
	142, 0, 218, 143, 144, 0, 219, 145, 220, 823,
	146, 147, 148, 221, 149, 150, 0, 152, 153, 151,
	154, 0, 155, 0, 156, 157, 222, 158, 0, 245,
	159, 160, 0, 223, 161, 162, 0, 163, 164, 0,
	165, 224, 166, 0, 167, 168, 170, 225, 169, 226,
	0, 0, 171, 172, 0, 227, 228, 229, 0, 0,
	173, 230, 231, 0, 174, 175, 176, 177, 0, 822,
	178, 179, 180, 0, 0, 181, 182, 183, 232, 233,
	85, 184, 0, 0, 0, 0, 185, 186, 187, 188,
	0, 0, 88, 89, 0, 90, 0, 0, 0, 0,
	0, 1157, 0, 0, 91, 92, 189, 190, 191, 93,
	192, 193, 0, 94, 194, 195, 95, 0, 0, 196,
	197, 198, 0, 199, 0, 0, 0, 96, 97, 98,
	0, 99, 0, 100, 0, 0, 101, 102, 0, 0,
	0, 0, 0, 0, 103, 104, 105, 106, 200, 107,
	201, 202, 0, 0, 108, 0, 0, 0, 109, 110,
	0, 111, 0, 0, 0, 203, 112, 204, 0, 0,
	113, 114, 205, 115, 0, 116, 0, 0, 0, 0,
	117, 206, 0, 207, 0, 118, 119, 208, 209, 0,
	0, 120, 0, 0, 121, 210, 211, 212, 0, 213,
	0, 0, 122, 0, 123, 124, 0, 0, 214, 0,
	125, 0, 0, 126, 0, 0, 127, 0, 128, 129,
	130, 131, 132, 0, 133, 134, 137, 135, 0, 136,
	0, 215, 138, 216, 139, 140, 0, 0, 0, 0,
	0, 141, 217, 0, 142, 0, 218, 143, 144, 0,
	219, 145, 220, 0, 146, 147, 148, 221, 149, 150,
	0, 152, 153, 151, 154, 0, 155, 0, 156, 157,
	222, 158, 0, 245, 159, 160, 0, 223, 161, 162,
	0, 163, 164, 0, 165, 224, 166, 0, 167, 168,
	170, 225, 169, 226, 0, 0, 171, 172, 0, 227,
	228, 229, 0, 0, 173, 230, 231, 0, 174, 175,
	176, 177, 0, 0, 178, 179, 180, 0, 0, 181,
	182, 183, 232, 233, 85, 184, 0, 0, 0, 0,
	185, 186, 187, 188, 0, 0, 88, 89, 0, 90,
	0, 0, 0, 0, 0, 0, 0, 0, 91, 92,
	189, 190, 191, 93, 192, 193, 0, 94, 194, 195,
	95, 0, 0, 196, 197, 198, 0, 199, 0, 0,
	0, 96, 97, 98, 0, 99, 0, 100, 0, 0,
	101, 102, 0, 0, 0, 0, 0, 0, 103, 104,
	105, 106, 200, 107, 201, 202, 0, 0, 108, 0,
	0, 0, 109, 110, 0, 111, 0, 0, 0, 203,
	112, 204, 0, 0, 113, 114, 205, 115, 0, 116,
	0, 0, 0, 0, 117, 206, 0, 207, 0, 118,
	119, 208, 209, 0, 0, 120, 0, 0, 121, 210,
	211, 212, 0, 213, 0, 0, 122, 0, 123, 124,
	0, 0, 214, 0, 125, 0, 0, 126, 0, 0,
	127, 0, 128, 129, 130, 131, 132, 0, 133, 134,
	137, 135, 0, 136, 0, 215, 138, 216, 139, 140,
	0, 0, 298, 0, 0, 141, 217, 0, 142, 0,
	218, 143, 144, 0, 219, 145, 220, 0, 146, 147,
	148, 221, 149, 150, 0, 152, 153, 151, 154, 0,
	155, 0, 156, 157, 222, 158, 0, 245, 159, 160,
	0, 223, 161, 162, 0, 163, 164, 0, 165, 224,
	166, 0, 167, 168, 170, 225, 169, 226, 0, 0,
	171, 172, 0, 227, 228, 229, 0, 0, 173, 230,
	231, 0, 174, 175, 176, 177, 0, 0, 178, 179,
	180, 0, 0, 181, 182, 183, 232, 233, 85, 184,
	0, 0, 0, 0, 185, 186, 187, 188, 0, 0,
	88, 89, 0, 90, 0, 0, 0, 0, 0, 0,
	0, 0, 91, 92, 189, 190, 191, 93, 192, 193,
	0, 94, 194, 195, 95, 0, 0, 196, 197, 198,
	0, 199, 0, 0, 0, 96, 97, 98, 0, 99,
	0, 100, 0, 0, 101, 102, 0, 0, 0, 0,
	0, 0, 103, 104, 105, 106, 200, 107, 201, 202,
	0, 0, 108, 0, 0, 0, 109, 110, 0, 111,
	0, 0, 0, 203, 112, 204, 0, 0, 113, 114,
	205, 115, 0, 116, 0, 0, 0, 0, 117, 206,
	0, 207, 0, 118, 119, 304, 209, 0, 0, 120,
	0, 0, 121, 210, 211, 212, 0, 213, 0, 0,
	122, 0, 123, 124, 0, 0, 214, 0, 125, 0,
	0, 126, 0, 0, 127, 0, 128, 129, 130, 131,
	132, 0, 133, 134, 137, 135, 0, 136, 0, 215,
	138, 216, 139, 140, 0, 0, 298, 0, 0, 141,
	217, 0, 142, 0, 218, 143, 144, 0, 219, 145,
	220, 0, 146, 147, 148, 221, 149, 150, 0, 152,
	153, 151, 154, 0, 155, 0, 156, 157, 222, 158,
	0, 245, 159, 160, 0, 223, 161, 162, 0, 163,
	164, 0, 165, 224, 166, 0, 167, 168, 170, 225,
	169, 226, 0, 0, 171, 172, 0, 227, 228, 229,
	0, 0, 173, 230, 231, 0, 174, 175, 176, 177,
	0, 0, 178, 179, 180, 0, 0, 181, 182, 183,
	232, 233, 85, 184, 0, 0, 0, 0, 185, 186,
	187, 188, 0, 0, 88, 89, 0, 90, 0, 0,
	0, 0, 0, 0, 0, 0, 91, 92, 189, 190,
	191, 93, 192, 193, 0, 94, 194, 195, 95, 0,
	0, 196, 197, 198, 0, 199, 0, 0, 0, 96,
	97, 98, 0, 99, 0, 100, 0, 0, 101, 102,
	0, 0, 0, 0, 0, 0, 103, 104, 105, 106,
	200, 107, 201, 202, 0, 0, 108, 0, 0, 0,
	109, 110, 0, 111, 0, 0, 0, 203, 112, 204,
	0, 0, 113, 114, 205, 115, 0, 116, 0, 0,
	0, 0, 117, 206, 0, 207, 0, 118, 119, 208,
	209, 0, 0, 120, 0, 0, 121, 210, 211, 212,
	0, 213, 0, 0, 122, 0, 123, 124, 0, 0,
	214, 0, 125, 0, 0, 126, 0, 0, 127, 0,
	128, 129, 130, 131, 132, 0, 133, 134, 137, 135,
	0, 136, 0, 215, 138, 216, 139, 140, 0, 0,
	0, 0, 0, 141, 217, 0, 142, 0, 218, 143,
	144, 0, 219, 145, 220, 0, 146, 147, 148, 221,
	149, 150, 0, 152, 153, 151, 154, 0, 155, 0,
	156, 157, 222, 158, 0, 245, 159, 160, 0, 223,
	161, 162, 0, 163, 164, 0, 165, 224, 166, 0,
	167, 168, 170, 225, 169, 226, 0, 0, 171, 172,
	0, 227, 228, 229, 0, 0, 173, 230, 231, 0,
	174, 175, 176, 177, 0, 0, 178, 179, 180, 0,
	0, 181, 182, 183, 232, 233, 85, 184, 0, 0,
	0, 0, 185, 186, 187, 188, 0, 0, 88, 89,
	0, 90, 0, 0, 0, 0, 0, 0, 0, 0,
	91, 92, 189, 190, 191, 93, 192, 193, 0, 94,
	194, 195, 95, 0, 0, 196, 197, 198, 0, 199,
	0, 0, 0, 96, 97, 98, 0, 99, 0, 100,
	0, 0, 101, 102, 0, 0, 0, 0, 0, 0,
	103, 104, 105, 106, 200, 107, 201, 202, 0, 0,
	108, 0, 0, 0, 109, 110, 0, 111, 0, 0,
	0, 203, 112, 204, 0, 0, 113, 114, 205, 115,
	0, 116, 0, 0, 0, 0, 117, 206, 0, 207,
	0, 118, 119, 1093, 209, 0, 0, 120, 0, 0,
	121, 210, 211, 212, 0, 213, 0, 0, 122, 0,
	123, 124, 0, 0, 214, 0, 125, 0, 0, 126,
	0, 0, 127, 0, 128, 129, 130, 131, 132, 0,
	133, 134, 137, 135, 0, 136, 0, 215, 138, 216,
	139, 140, 0, 0, 0, 0, 0, 141, 217, 0,
	142, 0, 218, 143, 144, 0, 219, 145, 220, 0,
	146, 147, 148, 221, 149, 150, 0, 152, 153, 151,
	154, 0, 155, 0, 156, 157, 222, 158, 0, 245,
	159, 160, 0, 223, 161, 162, 0, 163, 164, 0,
	165, 224, 166, 0, 167, 168, 170, 225, 169, 226,
	0, 0, 171, 172, 0, 227, 228, 229, 0, 0,
	173, 230, 231, 0, 174, 175, 176, 177, 0, 0,
	178, 179, 180, 0, 0, 181, 182, 183, 232, 233,
	85, 184, 0, 0, 0, 0, 185, 186, 187, 188,
	0, 0, 88, 89, 0, 90, 0, 0, 0, 0,
	0, 0, 0, 0, 91, 92, 189, 190, 191, 93,
	192, 193, 0, 94, 194, 195, 95, 0, 0, 196,
	197, 198, 0, 199, 0, 0, 0, 96, 97, 98,
	0, 99, 0, 100, 0, 0, 101, 102, 0, 0,
	0, 0, 0, 0, 103, 104, 105, 106, 200, 107,
	201, 202, 0, 0, 108, 0, 0, 0, 109, 110,
	0, 111, 0, 0, 0, 203, 112, 204, 0, 0,
	113, 114, 205, 115, 0, 116, 0, 0, 0, 0,
	117, 206, 0, 207, 0, 118, 119, 1091, 209, 0,
	0, 120, 0, 0, 121, 210, 211, 212, 0, 213,
	0, 0, 122, 0, 123, 124, 0, 0, 214, 0,
	125, 0, 0, 126, 0, 0, 127, 0, 128, 129,
	130, 131, 132, 0, 133, 134, 137, 135, 0, 136,
	0, 215, 138, 216, 139, 140, 0, 0, 0, 0,
	0, 141, 217, 0, 142, 0, 218, 143, 144, 0,
	219, 145, 220, 0, 146, 147, 148, 221, 149, 150,
	0, 152, 153, 151, 154, 0, 155, 0, 156, 157,
	222, 158, 0, 245, 159, 160, 0, 223, 161, 162,
	0, 163, 164, 0, 165, 224, 166, 0, 167, 168,
	170, 225, 169, 226, 0, 0, 171, 172, 0, 227,
	228, 229, 0, 0, 173, 230, 231, 0, 174, 175,
	176, 177, 0, 0, 178, 179, 180, 0, 0, 181,
	182, 183, 232, 233, 85, 184, 0, 0, 0, 0,
	185, 186, 187, 188, 0, 0, 88, 89, 0, 90,
	0, 0, 0, 0, 0, 0, 0, 0, 91, 92,
	189, 190, 191, 93, 192, 193, 0, 94, 194, 195,
	95, 0, 0, 196, 197, 198, 0, 199, 0, 0,
	0, 96, 97, 98, 0, 99, 0, 100, 0, 0,
	101, 102, 0, 0, 0, 0, 0, 0, 103, 104,
	105, 106, 200, 107, 201, 202, 0, 0, 108, 0,
	0, 0, 109, 110, 0, 111, 0, 0, 0, 203,
	112, 204, 0, 0, 113, 114, 205, 115, 0, 116,
	0, 0, 0, 0, 117, 206, 0, 207, 0, 118,
	119, 1082, 209, 0, 0, 120, 0, 0, 121, 210,
	211, 212, 0, 213, 0, 0, 122, 0, 123, 124,
	0, 0, 214, 0, 125, 0, 0, 126, 0, 0,
	127, 0, 128, 129, 130, 131, 132, 0, 133, 134,
	137, 135, 0, 136, 0, 215, 138, 216, 139, 140,
	0, 0, 0, 0, 0, 141, 217, 0, 142, 0,
	218, 143, 144, 0, 219, 145, 220, 0, 146, 147,
	148, 221, 149, 150, 0, 152, 153, 151, 154, 0,
	155, 0, 156, 157, 222, 158, 0, 245, 159, 160,
	0, 223, 161, 162, 0, 163, 164, 0, 165, 224,
	166, 0, 167, 168, 170, 225, 169, 226, 0, 0,
	171, 172, 0, 227, 228, 229, 0, 0, 173, 230,
	231, 0, 174, 175, 176, 177, 0, 0, 178, 179,
	180, 0, 0, 181, 182, 183, 232, 233, 85, 184,
	0, 0, 0, 0, 185, 186, 187, 188, 0, 0,
	88, 89, 0, 90, 0, 0, 0, 0, 0, 0,
	0, 0, 91, 92, 189, 190, 191, 93, 192, 193,
	0, 94, 194, 195, 95, 0, 0, 196, 197, 198,
	0, 199, 0, 0, 0, 96, 97, 98, 0, 99,
	0, 100, 0, 0, 101, 102, 0, 0, 0, 0,
	0, 0, 103, 104, 105, 106, 200, 107, 201, 202,
	0, 0, 108, 0, 0, 0, 109, 110, 0, 111,
	0, 0, 0, 203, 112, 204, 0, 0, 113, 114,
	205, 115, 0, 116, 0, 0, 0, 0, 117, 206,
	0, 207, 0, 118, 119, 692, 209, 0, 0, 120,
	0, 0, 121, 210, 211, 212, 0, 213, 0, 0,
	122, 0, 123, 124, 0, 0, 214, 0, 125, 0,
	0, 126, 0, 0, 127, 0, 128, 129, 130, 131,
	132, 0, 133, 134, 137, 135, 0, 136, 0, 215,
	138, 216, 139, 140, 0, 0, 0, 0, 0, 141,
	217, 0, 142, 0, 218, 143, 144, 0, 219, 145,
	220, 0, 146, 147, 148, 221, 149, 150, 0, 152,
	153, 151, 154, 0, 155, 0, 156, 157, 222, 158,
	0, 245, 159, 160, 0, 223, 161, 162, 0, 163,
	164, 0, 165, 224, 166, 0, 167, 168, 170, 225,
	169, 226, 0, 0, 171, 172, 0, 227, 228, 229,
	0, 0, 173, 230, 231, 0, 174, 175, 176, 177,
	0, 0, 178, 179, 180, 0, 0, 181, 182, 183,
	232, 233, 85, 184, 0, 0, 0, 0, 185, 186,
	187, 188, 0, 0, 88, 89, 0, 90, 0, 0,
	0, 0, 0, 0, 0, 0, 91, 92, 189, 190,
	191, 93, 192, 193, 0, 94, 194, 195, 95, 0,
	0, 196, 197, 198, 0, 199, 0, 0, 0, 96,
	97, 98, 0, 99, 0, 100, 0, 0, 101, 102,
	0, 0, 0, 0, 0, 0, 103, 104, 105, 106,
	200, 107, 201, 202, 0, 0, 108, 0, 0, 0,
	109, 110, 0, 111, 0, 0, 0, 203, 112, 204,
	0, 0, 113, 114, 205, 115, 0, 116, 0, 0,
	0, 0, 117, 206, 0, 207, 0, 118, 119, 208,
	209, 0, 0, 120, 0, 0, 121, 210, 211, 212,
	0, 213, 0, 0, 122, 0, 123, 124, 0, 0,
	214, 0, 125, 0, 0, 126, 0, 0, 127, 0,
	128, 129, 130, 131, 132, 0, 133, 134, 137, 135,
	0, 136, 0, 215, 138, 216, 139, 140, 0, 0,
	0, 0, 0, 141, 217, 0, 142, 0, 218, 143,
	144, 0, 219, 145, 220, 0, 146, 147, 148, 221,
	149, 150, 0, 152, 153, 151, 154, 0, 155, 0,
	156, 157, 222, 158, 0, 83, 159, 160, 0, 223,
	161, 162, 0, 163, 164, 0, 165, 224, 166, 0,
	167, 168, 170, 225, 169, 226, 0, 0, 171, 172,
	0, 227, 228, 229, 0, 0, 173, 230, 231, 0,
	174, 175, 176, 177, 0, 0, 178, 179, 180, 0,
	0, 181, 182, 183, 232, 233, 85, 184, 0, 0,
	0, 0, 185, 186, 187, 188, 0, 0, 88, 89,
	0, 90, 0, 0, 0, 0, 0, 533, 0, 0,
	91, 92, 189, 190, 191, 93, 192, 193, 0, 94,
	194, 195, 95, 0, 0, 196, 197, 198, 0, 199,
	0, 0, 0, 96, 97, 98, 0, 99, 0, 100,
	0, 0, 101, 102, 0, 0, 0, 0, 0, 0,
	103, 104, 105, 106, 200, 107, 201, 202, 0, 0,
	108, 0, 0, 0, 109, 110, 0, 111, 0, 0,
	0, 203, 112, 204, 0, 0, 113, 114, 205, 115,
	0, 116, 0, 0, 0, 0, 117, 206, 0, 207,
	0, 118, 119, 208, 209, 0, 0, 120, 0, 0,
	121, 210, 211, 212, 0, 213, 0, 0, 122, 0,
	123, 124, 0, 0, 214, 0, 125, 0, 0, 126,
	0, 0, 127, 0, 128, 129, 130, 131, 132, 0,
	133, 134, 137, 135, 0, 136, 0, 215, 138, 216,
	139, 140, 0, 0, 0, 0, 0, 141, 217, 0,
	142, 0, 218, 143, 144, 0, 219, 145, 220, 0,
	146, 147, 148, 221, 149, 150, 0, 152, 153, 151,
	154, 0, 155, 0, 156, 157, 222, 158, 0, 245,
	159, 160, 0, 223, 161, 162, 0, 0, 164, 0,
	165, 224, 166, 0, 167, 168, 170, 225, 169, 226,
	0, 0, 171, 172, 0, 227, 228, 229, 0, 0,
	173, 230, 231, 0, 174, 175, 176, 177, 0, 0,
	178, 179, 180, 0, 0, 181, 182, 183, 232, 233,
	85, 184, 0, 0, 0, 0, 185, 186, 187, 188,
	0, 0, 88, 89, 0, 90, 0, 0, 0, 0,
	0, 0, 0, 0, 91, 92, 189, 190, 191, 93,
	192, 193, 0, 94, 194, 195, 95, 0, 0, 196,
	197, 198, 0, 199, 0, 0, 0, 96, 97, 98,
	0, 99, 0, 100, 0, 0, 101, 102, 0, 0,
	0, 0, 0, 0, 103, 104, 105, 106, 200, 107,
	201, 202, 0, 0, 108, 0, 0, 0, 109, 110,
	0, 111, 0, 0, 0, 203, 112, 204, 0, 0,
	113, 114, 205, 115, 0, 116, 0, 0, 0, 0,
	117, 206, 0, 207, 0, 118, 119, 388, 209, 0,
	0, 120, 0, 0, 121, 210, 211, 212, 0, 213,
	0, 0, 122, 0, 123, 124, 0, 0, 214, 0,
	125, 0, 0, 126, 0, 0, 127, 0, 128, 129,
	130, 131, 132, 0, 133, 134, 137, 135, 0, 136,
	0, 215, 138, 216, 139, 140, 0, 0, 0, 0,
	0, 141, 217, 0, 142, 0, 218, 143, 144, 0,
	219, 145, 220, 0, 146, 147, 148, 221, 149, 150,
	0, 152, 153, 151, 154, 0, 155, 0, 156, 157,
	222, 158, 0, 245, 159, 160, 0, 223, 161, 162,
	0, 163, 164, 0, 165, 224, 166, 0, 167, 168,
	170, 225, 169, 226, 0, 0, 171, 172, 0, 227,
	228, 229, 0, 0, 173, 230, 231, 0, 174, 175,
	176, 177, 0, 0, 178, 179, 180, 0, 0, 181,
	182, 183, 232, 233, 85, 184, 0, 0, 0, 0,
	185, 186, 187, 188, 0, 0, 88, 89, 0, 90,
	0, 0, 0, 0, 0, 0, 0, 0, 91, 92,
	189, 190, 191, 93, 192, 193, 0, 94, 194, 195,
	95, 0, 0, 196, 197, 198, 0, 199, 0, 0,
	0, 96, 97, 98, 0, 99, 0, 100, 0, 0,
	101, 102, 0, 0, 0, 0, 0, 0, 103, 104,
	105, 106, 200, 107, 201, 202, 0, 0, 108, 0,
	0, 0, 109, 110, 0, 111, 0, 0, 0, 203,
	112, 204, 0, 0, 113, 114, 205, 115, 0, 116,
	0, 0, 0, 0, 117, 206, 0, 207, 0, 118,
	119, 385, 209, 0, 0, 120, 0, 0, 121, 210,
	211, 212, 0, 213, 0, 0, 122, 0, 123, 124,
	0, 0, 214, 0, 125, 0, 0, 126, 0, 0,
	127, 0, 128, 129, 130, 131, 132, 0, 133, 134,
	137, 135, 0, 136, 0, 215, 138, 216, 139, 140,
	0, 0, 0, 0, 0, 141, 217, 0, 142, 0,
	218, 143, 144, 0, 219, 145, 220, 0, 146, 147,
	148, 221, 149, 150, 0, 152, 153, 151, 154, 0,
	155, 0, 156, 157, 222, 158, 0, 245, 159, 160,
	0, 223, 161, 162, 0, 163, 164, 0, 165, 224,
	166, 0, 167, 168, 170, 225, 169, 226, 0, 0,
	171, 172, 0, 227, 228, 229, 0, 0, 173, 230,
	231, 0, 174, 175, 176, 177, 0, 0, 178, 179,
	180, 0, 0, 181, 182, 183, 232, 233, 85, 184,
	0, 0, 0, 0, 185, 186, 187, 188, 0, 0,
	88, 89, 0, 90, 0, 0, 0, 0, 0, 0,
	0, 0, 91, 92, 189, 190, 191, 93, 192, 193,
	0, 94, 194, 195, 95, 0, 0, 196, 197, 348,
	0, 199, 0, 0, 0, 96, 97, 98, 0, 99,
	0, 100, 0, 0, 101, 102, 0, 0, 0, 0,
	0, 0, 103, 104, 105, 106, 200, 107, 201, 202,
	0, 0, 108, 0, 0, 0, 109, 110, 0, 111,
	0, 0, 0, 203, 112, 204, 0, 0, 113, 114,
	205, 115, 0, 116, 0, 0, 0, 0, 117, 206,
	0, 207, 0, 118, 119, 208, 209, 0, 0, 120,
	0, 0, 121, 210, 211, 212, 0, 213, 0, 0,
	122, 0, 123, 124, 0, 0, 214, 0, 125, 0,
	0, 126, 0, 0, 127, 0, 128, 129, 130, 131,
	242, 0, 133, 134, 137, 135, 0, 136, 0, 215,
	138, 216, 139, 140, 0, 0, 0, 0, 0, 141,
	217, 0, 142, 0, 218, 143, 144, 0, 219, 145,
	220, 0, 146, 147, 148, 221, 149, 150, 0, 152,
	153, 151, 154, 0, 155, 0, 156, 157, 222, 158,
	0, 245, 159, 160, 0, 223, 161, 162, 0, 163,
	164, 0, 165, 224, 166, 0, 167, 168, 170, 225,
	169, 226, 0, 0, 171, 172, 0, 241, 228, 229,
	0, 0, 237, 230, 231, 0, 174, 175, 176, 177,
	0, 0, 178, 179, 180, 0, 0, 181, 182, 183,
	232, 233, 85, 184, 0, 0, 0, 0, 185, 186,
	187, 188, 0, 0, 88, 89, 0, 90, 0, 0,
	0, 0, 0, 0, 0, 0, 91, 92, 189, 190,
	191, 93, 192, 193, 0, 94, 194, 195, 95, 0,
	0, 196, 197, 198, 0, 199, 0, 0, 0, 96,
	97, 98, 0, 99, 0, 100, 0, 0, 101, 102,
	0, 0, 0, 0, 0, 0, 103, 104, 105, 106,
	200, 107, 201, 202, 0, 0, 108, 0, 0, 0,
	109, 110, 0, 111, 0, 0, 0, 203, 112, 204,
	0, 0, 113, 114, 205, 115, 0, 116, 0, 0,
	0, 0, 117, 206, 0, 207, 0, 118, 119, 208,
	209, 0, 0, 120, 0, 0, 121, 210, 211, 212,
	0, 213, 0, 0, 122, 0, 123, 124, 0, 0,
	214, 0, 125, 0, 0, 126, 0, 0, 127, 0,
	128, 129, 130, 131, 242, 0, 133, 134, 137, 135,
	0, 136, 0, 215, 138, 216, 139, 140, 0, 0,
	0, 0, 0, 141, 217, 0, 142, 0, 218, 143,
	144, 0, 219, 145, 220, 0, 146, 147, 148, 221,
	149, 150, 0, 152, 153, 151, 154, 0, 155, 0,
	156, 157, 222, 158, 0, 245, 159, 160, 0, 223,
	161, 162, 0, 163, 164, 0, 165, 224, 166, 0,
	167, 168, 170, 225, 169, 226, 0, 0, 171, 172,
	0, 241, 228, 229, 0, 0, 237, 230, 231, 0,
	174, 175, 176, 177, 0, 0, 178, 179, 180, 0,
	0, 181, 182, 183, 232, 233, 85, 184, 0, 0,
	0, 0, 185, 186, 187, 188, 0, 0, 88, 89,
	0, 90, 0, 0, 0, 0, 0, 0, 0, 0,
	91, 92, 189, 190, 191, 93, 192, 193, 0, 94,
	194, 195, 95, 0, 0, 196, 197, 198, 0, 199,
	0, 0, 0, 96, 97, 98, 0, 99, 0, 100,
	0, 0, 101, 102, 0, 0, 0, 0, 0, 0,
	103, 104, 105, 106, 200, 107, 201, 202, 0, 0,
	108, 0, 0, 0, 109, 110, 0, 111, 0, 0,
	0, 203, 112, 204, 0, 0, 113, 114, 205, 115,
	0, 116, 0, 0, 0, 0, 117, 206, 0, 207,
	0, 118, 119, 320, 209, 0, 0, 120, 0, 0,
	121, 210, 211, 212, 0, 213, 0, 0, 122, 0,
	123, 124, 0, 0, 214, 0, 125, 0, 0, 126,
	0, 0, 127, 0, 128, 129, 130, 131, 132, 0,
	133, 134, 137, 135, 0, 136, 0, 215, 138, 216,
	139, 140, 0, 0, 0, 0, 0, 141, 217, 0,
	142, 0, 218, 143, 144, 0, 219, 145, 220, 0,
	146, 147, 148, 221, 149, 150, 0, 152, 153, 151,
	154, 0, 155, 0, 156, 157, 222, 158, 0, 245,
	159, 160, 0, 223, 161, 162, 0, 163, 164, 0,
	165, 224, 166, 0, 167, 168, 170, 225, 169, 226,
	0, 0, 171, 172, 0, 227, 228, 229, 0, 0,
	173, 230, 231, 0, 174, 175, 176, 177, 0, 0,
	178, 179, 180, 0, 0, 181, 182, 183, 232, 233,
	85, 184, 0, 0, 0, 0, 185, 186, 187, 188,
	0, 0, 88, 89, 0, 90, 0, 0, 0, 0,
	0, 0, 0, 0, 91, 92, 189, 190, 191, 93,
	192, 193, 0, 94, 194, 195, 95, 0, 0, 196,
	197, 198, 0, 199, 0, 0, 0, 96, 97, 98,
	0, 99, 0, 100, 0, 0, 101, 102, 0, 0,
	0, 0, 0, 0, 103, 104, 105, 106, 200, 107,
	201, 202, 0, 0, 108, 0, 0, 0, 109, 110,
	0, 111, 0, 0, 0, 203, 112, 204, 0, 0,
	113, 114, 205, 115, 0, 116, 0, 0, 0, 0,
	117, 206, 0, 207, 0, 118, 119, 317, 209, 0,
	0, 120, 0, 0, 121, 210, 211, 212, 0, 213,
	0, 0, 122, 0, 123, 124, 0, 0, 214, 0,
	125, 0, 0, 126, 0, 0, 127, 0, 128, 129,
	130, 131, 132, 0, 133, 134, 137, 135, 0, 136,
	0, 215, 138, 216, 139, 140, 0, 0, 0, 0,
	0, 141, 217, 0, 142, 0, 218, 143, 144, 0,
	219, 145, 220, 0, 146, 147, 148, 221, 149, 150,
	0, 152, 153, 151, 154, 0, 155, 0, 156, 157,
	222, 158, 0, 245, 159, 160, 0, 223, 161, 162,
	0, 163, 164, 0, 165, 224, 166, 0, 167, 168,
	170, 225, 169, 226, 0, 0, 171, 172, 0, 227,
	228, 229, 0, 0, 173, 230, 231, 0, 174, 175,
	176, 177, 0, 0, 178, 179, 180, 0, 0, 181,
	182, 183, 232, 233, 85, 184, 0, 0, 0, 0,
	185, 186, 187, 188, 0, 0, 88, 89, 0, 90,
	0, 0, 0, 0, 0, 0, 0, 0, 91, 92,
	189, 190, 191, 93, 192, 193, 0, 94, 194, 195,
	95, 0, 0, 196, 197, 198, 0, 199, 0, 0,
	0, 96, 97, 98, 0, 99, 0, 100, 0, 0,
	101, 102, 0, 0, 0, 0, 0, 0, 103, 104,
	105, 106, 200, 107, 201, 202, 0, 0, 108, 0,
	0, 0, 109, 110, 0, 111, 0, 0, 0, 203,
	112, 204, 0, 0, 113, 114, 205, 115, 0, 116,
	0, 0, 0, 0, 117, 206, 0, 207, 0, 118,
	119, 315, 209, 0, 0, 120, 0, 0, 121, 210,
	211, 212, 0, 213, 0, 0, 122, 0, 123, 124,
	0, 0, 214, 0, 125, 0, 0, 126, 0, 0,
	127, 0, 128, 129, 130, 131, 132, 0, 133, 134,
	137, 135, 0, 136, 0, 215, 138, 216, 139, 140,
	0, 0, 0, 0, 0, 141, 217, 0, 142, 0,
	218, 143, 144, 0, 219, 145, 220, 0, 146, 147,
	148, 221, 149, 150, 0, 152, 153, 151, 154, 0,
	155, 0, 156, 157, 222, 158, 0, 245, 159, 160,
	0, 223, 161, 162, 0, 163, 164, 0, 165, 224,
	166, 0, 167, 168, 170, 225, 169, 226, 0, 0,
	171, 172, 0, 227, 228, 229, 0, 0, 173, 230,
	231, 0, 174, 175, 176, 177, 0, 0, 178, 179,
	180, 0, 0, 181, 182, 183, 232, 233, 85, 184,
	0, 0, 0, 0, 185, 186, 187, 188, 0, 0,
	88, 89, 0, 90, 0, 0, 0, 0, 0, 0,
	0, 0, 91, 92, 189, 190, 191, 93, 192, 193,
	0, 94, 194, 195, 95, 0, 0, 196, 197, 198,
	0, 199, 0, 0, 0, 96, 97, 98, 0, 99,
	0, 100, 0, 0, 101, 102, 0, 0, 0, 0,
	0, 0, 103, 104, 105, 106, 200, 107, 201, 202,
	0, 0, 108, 0, 0, 0, 109, 110, 0, 111,
	0, 0, 0, 203, 112, 204, 0, 0, 113, 114,
	205, 115, 0, 116, 0, 0, 0, 0, 117, 206,
	0, 207, 0, 118, 119, 307, 209, 0, 0, 120,
	0, 0, 121, 210, 211, 212, 0, 213, 0, 0,
	122, 0, 123, 124, 0, 0, 214, 0, 125, 0,
	0, 126, 0, 0, 127, 0, 128, 129, 130, 131,
	132, 0, 133, 134, 137, 135, 0, 136, 0, 215,
	138, 216, 139, 140, 0, 0, 0, 0, 0, 141,
	217, 0, 142, 0, 218, 143, 144, 0, 219, 145,
	220, 0, 146, 147, 148, 221, 149, 150, 0, 152,
	153, 151, 154, 0, 155, 0, 156, 157, 222, 158,
	0, 245, 159, 160, 0, 223, 161, 162, 0, 163,
	164, 0, 165, 224, 166, 0, 167, 168, 170, 225,
	169, 226, 0, 0, 171, 172, 0, 227, 228, 229,
	0, 0, 173, 230, 231, 0, 174, 175, 176, 177,
	0, 0, 178, 179, 180, 0, 0, 181, 182, 183,
	232, 233, 85, 184, 0, 0, 0, 0, 185, 186,
	187, 188, 0, 0, 88, 89, 0, 90, 0, 0,
	0, 0, 0, 0, 0, 0, 91, 92, 189, 190,
	191, 93, 192, 193, 0, 94, 194, 195, 95, 0,
	0, 196, 197, 198, 0, 199, 0, 0, 0, 96,
	97, 98, 0, 99, 0, 100, 0, 0, 101, 102,
	0, 0, 0, 0, 0, 0, 103, 104, 105, 106,
	200, 107, 201, 202, 0, 0, 108, 0, 0, 0,
	109, 110, 0, 111, 0, 0, 0, 203, 112, 204,
	0, 0, 113, 114, 205, 115, 0, 116, 0, 0,
	0, 0, 117, 206, 0, 207, 0, 118, 119, 208,
	209, 0, 0, 120, 0, 0, 121, 210, 211, 212,
	0, 213, 0, 0, 122, 0, 123, 124, 0, 0,
	214, 0, 125, 0, 0, 126, 0, 0, 127, 0,
	128, 129, 130, 131, 132, 0, 133, 134, 137, 135,
	0, 136, 0, 215, 138, 216, 139, 140, 0, 0,
	0, 0, 0, 141, 217, 0, 142, 0, 218, 143,
	144, 0, 219, 145, 220, 0, 146, 147, 148, 221,
	287, 150, 0, 152, 153, 151, 154, 0, 155, 0,
	156, 157, 222, 158, 0, 245, 159, 160, 0, 223,
	161, 162, 0, 163, 164, 0, 165, 224, 166, 0,
	167, 168, 170, 225, 169, 226, 0, 0, 171, 172,
	0, 227, 228, 229, 0, 0, 173, 230, 231, 0,
	174, 175, 176, 177, 0, 0, 178, 179, 180, 0,
	0, 181, 182, 183, 232, 233, 85, 184, 0, 0,
	0, 0, 185, 186, 187, 188, 0, 0, 88, 89,
	0, 90, 0, 0, 0, 0, 0, 0, 0, 0,
	91, 92, 189, 190, 191, 93, 192, 193, 0, 94,
	194, 195, 95, 0, 0, 196, 197, 198, 0, 199,
	0, 0, 0, 96, 97, 98, 0, 99, 0, 100,
	0, 0, 101, 102, 0, 0, 0, 0, 0, 0,
	103, 104, 105, 106, 200, 107, 201, 202, 0, 0,
	108, 0, 0, 0, 109, 110, 0, 111, 0, 0,
	0, 203, 112, 204, 0, 0, 113, 114, 205, 115,
	0, 116, 0, 0, 0, 0, 117, 206, 0, 207,
	0, 118, 119, 208, 209, 0, 0, 120, 0, 0,
	121, 210, 211, 212, 0, 213, 0, 0, 122, 0,
	123, 124, 0, 0, 214, 0, 125, 0, 0, 235,
	0, 0, 127, 0, 128, 129, 130, 131, 242, 0,
	133, 134, 137, 135, 0, 136, 0, 215, 138, 216,
	139, 140, 0, 0, 0, 0, 0, 141, 217, 0,
	142, 0, 218, 143, 144, 0, 219, 145, 220, 0,
	146, 147, 148, 221, 149, 150, 0, 152, 153, 151,
	154, 0, 155, 0, 156, 157, 222, 158, 0, 245,
	159, 160, 0, 223, 161, 236, 0, 163, 164, 0,
	165, 224, 166, 0, 167, 168, 170, 225, 169, 226,
	0, 0, 171, 172, 0, 241, 228, 229, 0, 0,
	237, 230, 231, 0, 174, 175, 176, 177, 0, 0,
	178, 179, 180, 0, 0, 181, 182, 183, 232, 233,
	85, 184, 0, 0, 0, 0, 185, 186, 187, 188,
	0, 0, 88, 89, 0, 90, 0, 0, 0, 0,
	0, 0, 0, 0, 91, 92, 189, 190, 191, 93,
	192, 193, 0, 94, 194, 195, 95, 0, 0, 196,
	197, 198, 0, 199, 0, 0, 0, 96, 97, 98,
	0, 99, 0, 100, 0, 0, 101, 102, 0, 0,
	0, 0, 0, 0, 103, 104, 105, 106, 200, 107,
	201, 202, 0, 0, 108, 0, 0, 0, 109, 110,
	0, 111, 0, 0, 0, 203, 112, 204, 0, 0,
	113, 114, 205, 115, 0, 116, 0, 0, 0, 0,
	117, 206, 0, 207, 0, 118, 119, 208, 209, 0,
	0, 120, 0, 0, 121, 210, 211, 212, 0, 213,
	0, 0, 122, 0, 123, 124, 0, 0, 214, 0,
	125, 0, 0, 126, 0, 0, 127, 0, 128, 129,
	130, 131, 132, 0, 133, 134, 137, 135, 0, 136,
	0, 215, 138, 216, 139, 140, 0, 0, 0, 0,
	0, 141, 217, 0, 142, 0, 218, 143, 0, 0,
	219, 145, 220, 0, 146, 0, 148, 221, 149, 150,
	0, 152, 153, 151, 154, 0, 155, 0, 156, 157,
	222, 0, 0, 245, 159, 160, 0, 223, 161, 162,
	0, 163, 164, 0, 165, 224, 166, 0, 167, 168,
	170, 225, 169, 226, 0, 0, 171, 172, 0, 227,
	228, 229, 0, 0, 173, 230, 231, 0, 174, 175,
	176, 177, 0, 0, 178, 179, 180, 0, 0, 181,
	182, 183, 232, 233, 718, 184, 736, 737, 738, 0,
	185, 186, 187, 188, 0, 0, 739, 0, 0, 0,
	0, 0, 720, 0, 745, 0, 0, 0, 0, 718,
	0, 736, 737, 738, 0, 0, 0, 0, 0, 0,
	0, 739, 719, 0, 0, 0, 0, 720, 733, 745,
	0, 0, 0, 0, 0, 0, 718, 0, 736, 737,
	738, 0, 0, 0, 0, 0, 0, 719, 739, 0,
	0, 0, 0, 733, 720, 0, 745, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 719, 0, 0, 0, 0, 0,
	733, 0, 0, 0, 0, 0, 0, 746, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 744,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 741,
	0, 0, 746, 0, 0, 734, 0, 0, 0, 0,
	0, 0, 0, 0, 744, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 741, 0, 0, 740, 0, 746,
	734, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 744, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 741, 740, 0, 0, 0, 0, 734, 0, 0,
	735, 0, 0, 0, 718, 0, 736, 737, 738, 0,
	0, 743, 0, 0, 0, 0, 739, 0, 0, 740,
	0, 0, 720, 0, 745, 735, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 743, 0, 0, 0,
	0, 0, 719, 0, 0, 0, 0, 0, 733, 0,
	0, 0, 735, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 742, 743, 730, 731, 732, 0, 729, 726,
	727, 728, 721, 722, 723, 724, 725, 0, 0, 0,
	0, 0, 0, 0, 0, 1261, 0, 742, 0, 730,
	731, 732, 0, 729, 726, 727, 728, 721, 722, 723,
	724, 725, 0, 0, 0, 0, 0, 746, 0, 0,
	1260, 0, 0, 0, 742, 0, 730, 731, 732, 744,
	729, 726, 727, 728, 721, 722, 723, 724, 725, 741,
	0, 0, 0, 0, 0, 734, 0, 1259, 0, 0,
	0, 0, 718, 0, 736, 737, 738, 0, 0, 0,
	0, 0, 0, 0, 739, 0, 0, 740, 0, 0,
	720, 0, 745, 0, 0, 718, 0, 736, 737, 738,
	0, 0, 0, 0, 0, 0, 0, 739, 0, 0,
	719, 0, 0, 720, 0, 745, 733, 0, 0, 0,
	735, 0, 0, 0, 718, 0, 736, 737, 738, 0,
	0, 743, 0, 719, 0, 0, 739, 0, 0, 733,
	0, 0, 720, 0, 745, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 719, 0, 0, 0, 0, 0, 733, 0,
	0, 0, 0, 0, 0, 746, 0, 0, 0, 0,
	0, 0, 742, 0, 730, 731, 732, 744, 729, 726,
	727, 728, 721, 722, 723, 724, 725, 741, 746, 0,
	0, 0, 1635, 734, 0, 0, 0, 0, 0, 0,
	744, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	741, 0, 0, 0, 0, 740, 734, 746, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 744,
	0, 0, 0, 0, 0, 0, 0, 0, 740, 741,
	0, 0, 0, 0, 0, 734, 0, 0, 735, 0,
	0, 0, 718, 0, 736, 737, 738, 0, 0, 743,
	0, 0, 0, 0, 739, 0, 0, 740, 0, 0,
	720, 735, 745, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 743, 0, 0, 0, 0, 0, 0, 0,
	719, 0, 0, 0, 0, 0, 733, 0, 0, 0,
	735, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	742, 743, 730, 731, 732, 0, 729, 726, 727, 728,
	721, 722, 723, 724, 725, 0, 0, 0, 0, 0,
	1634, 0, 0, 742, 0, 730, 731, 732, 0, 729,
	726, 727, 728, 721, 722, 723, 724, 725, 0, 0,
	0, 0, 0, 1617, 0, 746, 0, 0, 0, 0,
	0, 0, 742, 0, 730, 731, 732, 744, 729, 726,
	727, 728, 721, 722, 723, 724, 725, 741, 0, 0,
	0, 0, 1596, 734, 0, 0, 0, 0, 0, 0,
	718, 0, 736, 737, 738, 0, 0, 0, 0, 0,
	0, 0, 739, 0, 0, 740, 0, 0, 720, 0,
	745, 0, 0, 718, 0, 736, 737, 738, 0, 0,
	0, 0, 0, 0, 0, 739, 0, 0, 719, 0,
	0, 720, 0, 745, 733, 0, 0, 0, 735, 0,
	0, 0, 718, 0, 736, 737, 738, 0, 0, 743,
	0, 719, 0, 0, 739, 0, 0, 733, 0, 0,
	720, 0, 745, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	719, 0, 0, 0, 0, 0, 733, 0, 0, 0,
	0, 0, 0, 746, 0, 0, 0, 0, 0, 0,
	742, 0, 730, 731, 732, 744, 729, 726, 727, 728,
	721, 722, 723, 724, 725, 741, 746, 0, 0, 0,
	1591, 734, 0, 0, 0, 0, 0, 0, 744, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 741, 0,
	0, 0, 0, 740, 734, 746, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 744, 0, 0,
	0, 0, 0, 0, 0, 0, 740, 741, 0, 0,
	0, 0, 0, 734, 0, 0, 735, 0, 0, 0,
	718, 0, 736, 737, 738, 0, 0, 743, 0, 0,
	0, 0, 739, 0, 0, 740, 0, 0, 720, 735,
	745, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	743, 0, 0, 0, 0, 0, 0, 0, 719, 0,
	0, 0, 0, 0, 733, 0, 0, 0, 735, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 742, 743,
	730, 731, 732, 0, 729, 726, 727, 728, 721, 722,
	723, 724, 725, 0, 0, 0, 0, 0, 1587, 0,
	0, 742, 0, 730, 731, 732, 0, 729, 726, 727,
	728, 721, 722, 723, 724, 725, 0, 0, 0, 0,
	0, 1526, 0, 746, 0, 0, 0, 0, 0, 0,
	742, 0, 730, 731, 732, 744, 729, 726, 727, 728,
	721, 722, 723, 724, 725, 741, 0, 0, 0, 0,
	1525, 734, 0, 0, 0, 0, 0, 0, 718, 0,
	736, 737, 738, 0, 0, 0, 0, 0, 0, 0,
	739, 0, 0, 740, 0, 0, 720, 0, 745, 0,
	0, 718, 0, 736, 737, 738, 0, 0, 0, 0,
	0, 0, 0, 739, 0, 0, 719, 0, 0, 720,
	0, 745, 733, 0, 0, 0, 735, 0, 0, 0,
	718, 0, 736, 737, 738, 0, 0, 743, 0, 719,
	0, 0, 739, 0, 0, 733, 0, 0, 720, 0,
	745, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 719, 0,
	0, 0, 0, 0, 733, 0, 0, 0, 0, 0,
	0, 746, 0, 0, 0, 0, 0, 0, 742, 0,
	730, 731, 732, 744, 729, 726, 727, 728, 721, 722,
	723, 724, 725, 741, 746, 0, 0, 0, 1437, 734,
	0, 0, 0, 0, 0, 0, 744, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 741, 0, 0, 0,
	0, 740, 734, 746, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 744, 0, 0, 0, 0,
	0, 0, 0, 0, 740, 741, 0, 0, 0, 0,
	0, 734, 0, 0, 735, 0, 0, 0, 718, 0,
	736, 737, 738, 0, 0, 743, 0, 0, 0, 0,
	739, 0, 0, 740, 0, 0, 720, 735, 745, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 743, 0,
	0, 0, 0, 0, 0, 0, 719, 0, 0, 0,
	0, 0, 733, 0, 0, 0, 735, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 742, 743, 730, 731,
	732, 0, 729, 726, 727, 728, 721, 722, 723, 724,
	725, 0, 0, 0, 0, 0, 1375, 0, 0, 742,
	0, 730, 731, 732, 0, 729, 726, 727, 728, 721,
	722, 723, 724, 725, 0, 0, 0, 0, 0, 1350,
	0, 746, 0, 0, 0, 0, 0, 0, 742, 0,
	730, 731, 732, 744, 729, 726, 727, 728, 721, 722,
	723, 724, 725, 741, 0, 0, 0, 0, 996, 734,
	0, 0, 0, 0, 0, 0, 718, 0, 736, 737,
	738, 0, 0, 0, 0, 0, 0, 0, 739, 0,
	0, 740, 0, 0, 720, 0, 745, 0, 0, 718,
	0, 736, 737, 738, 0, 0, 0, 0, 0, 0,
	0, 739, 0, 0, 719, 901, 0, 720, 0, 745,
	733, 0, 0, 0, 735, 0, 0, 0, 718, 0,
	736, 737, 738, 0, 0, 743, 0, 719, 0, 0,
	739, 0, 0, 733, 0, 0, 720, 0, 745, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1695, 0, 0, 719, 0, 902, 0,
	0, 0, 733, 0, 0, 0, 0, 0, 0, 746,
	0, 0, 0, 0, 0, 0, 742, 0, 730, 731,
	732, 744, 729, 726, 727, 728, 721, 722, 723, 724,
	725, 741, 746, 0, 1421, 0, 0, 734, 0, 0,
	0, 0, 0, 0, 744, 0, 1251, 0, 0, 1250,
	0, 0, 0, 0, 741, 0, 0, 0, 0, 740,
	734, 746, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1694, 0, 744, 0, 0, 0, 0, 0, 0,
	0, 0, 740, 741, 0, 0, 0, 0, 0, 734,
	0, 0, 735, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 743, 0, 0, 0, 0, 0, 0,
	0, 740, 0, 0, 0, 735, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 748, 743, 0, 0, 0,
	0, 718, 0, 736, 737, 738, 0, 0, 0, 0,
	0, 0, 0, 739, 735, 0, 747, 0, 0, 720,
	0, 745, 0, 0, 742, 743, 730, 731, 732, 0,
	729, 726, 727, 728, 721, 722, 723, 724, 725, 719,
	0, 0, 0, 0, 0, 733, 0, 742, 0, 730,
	731, 732, 0, 729, 726, 727, 728, 721, 722, 723,
	724, 725, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 742, 0, 730, 731,
	732, 0, 729, 726, 727, 728, 721, 722, 723, 724,
	725, 718, 0, 736, 737, 738, 0, 0, 0, 0,
	0, 0, 0, 739, 746, 0, 0, 0, 0, 720,
	0, 745, 0, 0, 0, 0, 744, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 741, 0, 0, 719,
	0, 0, 734, 0, 0, 733, 0, 0, 0, 718,
	0, 736, 737, 738, 0, 0, 0, 0, 0, 0,
	0, 739, 0, 0, 740, 0, 0, 720, 0, 745,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	718, 0, 736, 737, 738, 0, 0, 719, 0, 0,
	0, 0, 739, 733, 0, 0, 0, 735, 720, 0,
	745, 0, 0, 0, 746, 0, 0, 0, 743, 0,
	0, 0, 0, 0, 0, 0, 744, 0, 719, 0,
	0, 0, 0, 0, 733, 0, 741, 0, 0, 0,
	0, 0, 734, 0, 0, 0, 0, 0, 0, 0,
	1257, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 746, 0, 740, 282, 0, 0, 0, 742,
	0, 730, 731, 732, 744, 729, 726, 727, 728, 721,
	722, 723, 724, 725, 741, 0, 0, 0, 0, 0,
	734, 0, 0, 746, 0, 0, 0, 735, 0, 0,
	0, 0, 0, 0, 0, 744, 0, 0, 743, 0,
	0, 0, 740, 0, 0, 741, 0, 0, 0, 0,
	0, 734, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 740, 0, 735, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 743, 0, 0, 742,
	0, 730, 731, 732, 0, 729, 726, 727, 728, 721,
	722, 723, 724, 725, 0, 0, 735, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 718, 743, 736, 737,
	738, 0, 0, 0, 0, 0, 0, 0, 739, 0,
	0, 1252, 1369, 0, 720, 0, 745, 742, 0, 730,
	731, 732, 0, 729, 726, 727, 728, 721, 722, 723,
	724, 725, 0, 0, 719, 0, 0, 0, 0, 0,
	733, 0, 0, 0, 0, 0, 0, 0, 742, 0,
	730, 731, 732, 0, 729, 726, 727, 728, 721, 722,
	723, 724, 725, 718, 0, 736, 737, 738, 0, 0,
	0, 0, 0, 0, 0, 739, 0, 0, 0, 0,
	0, 720, 718, 745, 736, 737, 738, 0, 0, 0,
	0, 0, 0, 0, 739, 0, 0, 1214, 0, 746,
	720, 719, 745, 0, 0, 0, 0, 733, 0, 0,
	0, 744, 718, 0, 736, 737, 738, 0, 0, 0,
	719, 741, 0, 0, 739, 0, 733, 734, 0, 0,
	720, 0, 745, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 740,
	719, 0, 0, 0, 0, 0, 733, 0, 0, 0,
	0, 718, 0, 736, 737, 738, 746, 0, 0, 0,
	0, 0, 0, 739, 0, 0, 0, 0, 744, 720,
	0, 745, 735, 0, 0, 746, 0, 0, 741, 0,
	0, 0, 0, 743, 734, 0, 0, 744, 0, 719,
	0, 0, 0, 0, 0, 733, 0, 741, 0, 0,
	0, 0, 0, 734, 0, 746, 740, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1219, 744, 0, 0,
	0, 0, 0, 0, 0, 740, 0, 741, 0, 0,
	0, 0, 0, 734, 742, 0, 730, 731, 732, 735,
	729, 726, 727, 728, 721, 722, 723, 724, 725, 0,
	743, 0, 0, 0, 746, 740, 0, 0, 735, 0,
	0, 0, 0, 0, 0, 0, 744, 0, 0, 743,
	0, 0, 0, 0, 0, 0, 741, 0, 0, 0,
	0, 0, 734, 0, 0, 0, 0, 0, 735, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 743,
	0, 742, 0, 730, 731, 732, 0, 729, 726, 727,
	728, 721, 722, 723, 724, 725, 0, 0, 0, 0,
	742, 0, 730, 731, 732, 0, 729, 726, 727, 728,
	721, 722, 723, 724, 725, 0, 0, 735, 0, 1221,
	0, 1237, 1238, 1239, 0, 0, 0, 0, 743, 0,
	742, 1344, 730, 731, 732, 0, 729, 726, 727, 728,
	721, 722, 723, 724, 725, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 718, 0, 736, 737,
	738, 0, 0, 1234, 0, 0, 0, 0, 0, 1221,
	0, 1237, 1238, 1239, 720, 0, 745, 0, 0, 742,
	0, 730, 731, 732, 0, 729, 726, 727, 728, 721,
	722, 723, 724, 725, 719, 0, 0, 0, 718, 0,
	733, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1234, 0, 0, 720, 1221, 745, 1237,
	1238, 1239, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1240, 0, 719, 0, 0, 0,
	0, 0, 733, 0, 0, 0, 0, 0, 0, 0,
	1235, 0, 0, 0, 0, 0, 0, 0, 0, 746,
	0, 1234, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 744, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 741, 0, 0, 1240, 0, 0, 734, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1235, 746, 0, 0, 0, 1236, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 741, 0, 0, 0, 0, 0, 734,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 735, 0, 0, 0, 0, 0, 1235, 0,
	0, 0, 0, 743, 0, 1236, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1231,
	1232, 1233, 0, 1230, 1227, 1228, 1229, 1222, 1223, 1224,
	1225, 1226, 0, 0, 735, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 743, 0, 0, 0, 0,
	0, 0, 0, 1236, 742, 0, 730, 731, 732, 0,
	729, 726, 727, 728, 721, 722, 723, 724, 725, 1231,
	1232, 1233, 0, 1230, 1227, 1228, 1229, 1222, 1223, 1224,
	1225, 1226, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 742, 0, 0, 0,
	0, 0, 729, 726, 727, 728, 721, 722, 723, 724,
	725, 0, 0, 0, 0, 0, 0, 1231, 1232, 1233,
	0, 1230, 1227, 1228, 1229, 1222, 1223, 1224, 1225, 1226,
	930, 946, 921, 938, 937, 0, 0, 923, 922, 0,
	0, 0, 948, 947, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 943, 0, 935, 934, 0, 0, 0, 0, 0,
	0, 933, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 932, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 926, 927,
	928, 0, 588, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 936, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	931, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	925, 0, 0, 0, 0, 0, 0, 0, 929, 0,
	0, 0, 0, 0, 950, 0, 0, 0, 0, 0,
	924, 0, 0, 944, 945, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 949,
}
var sqlPact = [...]int{

	180, -1000, -20, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 645, -1000, -1000, -1000, 466, 633, 45, 1757, 1757,
	14708, -1000, -1000, 17392, 1996, 320, 321, 320, 320, 311,
	14708, 374, 464, 62, -1000, 508, -5, 17148, 13488, 1066,
	-22, 13000, 192, 180, 13244, 13488, 16904, 942, 872, 867,
	13000, 16660, 16416, 16172, -1000, 8750, -1000, -1000, -1000, -1000,
	700, -1000, -23, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 689, -1000, 13488, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 15928, 15684, 623, -1000, -1000,
	392, 243, 1088, -1000, -8, -1000, -1000, -1000, 941, -1000,
	674, 940, 936, 935, 933, 242, 660, -1000, 373, 623,
	-1000, 623, -1000, -1000, -1000, 362, 14708, -1000, 13000, -1000,
	15440, 888, 15196, -1000, 508, -1000, -1000, -1000, 693, 1056,
	1056, 1056, 1070, 66, 64, 62, -32, 13488, -1000, 194,
	-32, 6434, 6434, -1000, -1000, 192, -1000, 209, 11282, -14,
	-1000, 6178, -1000, 612, 979, 513, 512, 978, -64, 13000,
	13488, 13488, 414, 14952, -1000, 976, 88, 975, -1000, -45,
	974, -1000, -53, -1000, -1000, -1000, -1000, -1000, -1000, 192,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 11536, 787, 11536, -1000, -1000, 1099, -1000,
	-1000, -24, -26, 825, 816, 9260, 9006, 1018, 677, -1000,
	-1000, -1000, -11, 3858, 13488, 948, 11536, 13488, 13488, 13488,
	-1000, 13488, -1000, 809, -1000, 13488, -1000, -28, -30, -1000,
	14708, -1000, 92, -1000, 191, 769, 14464, 986, 759, -1000,
	693, -1000, 709, 802, 6964, 7732, 62, -1000, -1000, 62,
	62, 7732, -1000, -1000, 13488, -32, 1098, 13488, 56, -1000,
	19411, -1000, -1000, 7732, 7732, 7732, 7732, 7732, 583, -1000,
	-1000, -1000, 4368, -1000, -1000, -14, 187, 199, -1000, -1000,
	186, -14, -1000, -1000, -1000, -1000, 185, 1226, 327, -1000,
	-1000, -1000, 7732, 250, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 947, 183, 182, -1000, -1000, -1000, -1000,
	181, 179, 178, 177, 176, 173, 172, 170, 169, 168,
	165, 161, 158, 542, -1000, 271, -1000, -1000, 271, 271,
	-1000, 130, 130, 131, -1000, -1000, -1000, 130, -1000, -1000,
	-1000, 235, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 157,
	56, -1000, -1000, -1000, 13488, -14, -1000, -1000, -1000, 7732,
	3603, -54, -1000, 19892, -1000, -51, 517, -1000, 12512, 1041,
	1031, 1034, 13000, 360, 359, 13488, 13488, 257, 50, 1084,
	50, 10774, -1000, 13488, 13488, -1000, 13488, -1000, -1000, 13488,
	13488, 13488, -5, 12024, 357, -46, 11780, 13488, -1000, -12,
	-1000, -1000, 931, 319, 530, 856, 691, -1000, -1000, -1000,
	-1000, -37, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1174, -1000, -1000, -1000, -1000, 1205, -37, -1000,
	-1000, -1000, -1000, -1000, 1223, -1000, -1000, -1000, -1000, 3858,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 13488, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 530, 856, -1000, -1000, 13000, 12268,
	973, 662, 755, -1000, -1000, 230, 972, -1000, -1000, -1000,
	-1000, 19892, -1000, 19892, 467, 879, -1000, 879, -41, -1000,
	19209, -1000, 154, -58, -1000, 257, 6434, 10520, 20469, 13488,
	366, 7732, 7732, 7732, 7732, 7732, 7732, 7732, 7732, 7732,
	7732, 7732, 7732, 7732, 7732, 7732, 7732, 7732, 7732, 7732,
	7732, 7732, 747, 354, 1210, 593, 129, 3858, -1000, 1158,
	1158, 1158, 20166, 20166, 134, -36, 18910, -44, -14, -1000,
	-1000, 5648, 5392, -14, 2912, -1000, 784, 1203, 269, 19892,
	956, 904, 147, 60, 58, 7732, 850, 7732, 7988, 7732,
	7732, 4624, 7732, 7732, 7732, 7732, 7732, 7732, -1000, 145,
	-1000, -1000, -1000, -1000, 1202, -1000, -1000, 1200, -1000, 330,
	1196, 257, 53, -1000, 2226, -1000, -1000, 6178, -1000, 511,
	13488, 13488, 13488, -1000, -1000, 754, 14220, -1000, 20469, 13488,
	-1000, 144, 136, 836, 835, 13488, 13488, 13976, 13732, 13488,
	507, 13488, 13488, 506, -1000, 445, 7732, 652, -1000, 10012,
	276, 13488, 445, 54, -1000, -1000, -1000, 229, 13488, -1000,
	-1000, -1000, 88, -1000, -45, -1000, -1000, 13488, 11780, -46,
	-47, -1000, -1000, 13488, 856, -1000, -1000, -1000, 485, -1000,
	520, -1000, 9514, -1000, -1000, -1000, 784, -1000, -52, -1000,
	-1000, -1000, -1000, 48, -48, -1000, -1000, -1000, -1000, 13488,
	211, 13488, 13488, 970, 1222, 13488, -1000, -1000, -1000, 7732,
	-1000, -1000, -1000, -5, 13488, -1000, 900, -1000, -50, 971,
	-135, 12756, -1000, 9758, -1000, 1109, -1000, -1000, -1000, -1000,
	57, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 131, 542, 130, 130, 130, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 235, -1000, 271, 271, 271, -1000,
	-1000, -1000, 241, 442, 442, 1173, 1173, 1173, 503, 503,
	881, 2534, 20208, 20208, 20208, 2332, 331, 331, 20208, 20208,
	20208, 20166, 19941, 648, 7732, 348, 578, 129, 7732, -1000,
	959, -1000, -1000, -1000, 928, 128, 7988, 7988, -1000, -1000,
	-1000, 4368, -1000, -1000, 127, 7732, -1000, 7732, -59, -60,
	-1000, 19892, -1000, -66, -1000, -1000, -35, 7732, 7732, 7732,
	46, -1000, 345, -1000, 343, 338, 336, -1000, 123, 43,
	437, -1000, 7732, 595, 121, 120, 7732, -1000, -1000, 19862,
	41, 927, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 40,
	19843, 39, 2177, -1000, 7988, 7988, 7988, 4368, 117, 38,
	19238, -138, 19776, 6690, 6690, 6690, 37, 19549, 7732, -138,
	17926, 17899, 17874, -68, -70, -74, 1180, -75, 36, 240,
	32, 900, -1000, -1000, 7732, -1000, -1000, -1000, 334, 333,
	969, -1000, 751, -1000, 532, 7732, 13488, 111, 110, 582,
	-1000, 968, 639, 964, 639, -1000, -51, 490, -1000, -1000,
	332, -1000, 6434, 19892, 445, 1037, -76, -1000, -1000, -1000,
	-1000, 257, 10774, 6178, -84, -1000, -52, -1000, -52, -1000,
	-1000, -1000, -1000, -1000, -1000, 13488, -1000, 12268, 107, 13488,
	105, 104, 13488, -1000, 986, -1000, 29, -1000, -1000, -1000,
	-1000, -1000, 899, 1068, 10520, 845, 843, 10520, 898, 598,
	598, 598, -1000, 12756, 3335, -1000, -1000, 13488, 101, 10266,
	28, 971, 202, 201, -1000, 1178, 7732, 648, 7732, 7988,
	7988, -1000, 648, -1000, -1000, -1000, -1000, 923, 99, 7732,
	20469, 20129, 2626, -85, 5136, -55, 18881, 7732, -1000, -1000,
	199, -1000, 27, 5922, -1000, 19501, -29, -29, -1000, 780,
	568, 478, 398, 1177, 1213, 984, -1000, 7732, 19580, -1000,
	11028, 260, 615, 18858, 20469, -1000, 7732, -1000, 920, 7732,
	-1000, 20469, 7988, 7988, 7988, 7988, 7988, 7988, 7988, 7988,
	7988, 7988, 7988, 7988, 7988, 7988, 7988, 7988, 7988, 7988,
	740, 7988, 1150, 1150, 1150, -62, 4880, -1000, 946, 920,
	7732, 7732, 20469, 22, 19, 17, -1000, 7732, -138, 7732,
	7732, 7732, -1000, -1000, -1000, 16, -1000, 1172, -1000, -1000,
	-1000, 899, 19048, 13488, 13488, 13488, 963, 1221, -1000, 18720,
	-90, 13488, 13488, -1000, 828, 861, 299, 13488, -1000, 13488,
	-1000, 13488, 13488, 13488, 13488, -89, -1000, 112, -5, 13488,
	445, -1000, -1000, 225, -1000, -1000, 8496, 98, 12268, 8496,
	646, -1000, -1000, 255, 7732, 7732, 971, 10520, 10520, 1676,
	838, 10520, -1000, -1000, -1000, -1000, -1000, -1000, 840, 97,
	13488, 12756, 383, 1169, 12, 1089, 648, 2524, 2039, 7732,
	20469, 2580, -91, -1000, 7732, 7732, -1000, -92, -1000, 7732,
	-1000, 19892, -1000, 1209, 7732, 11, 10, 9, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 8, -1000, -1000, 19892, 7732,
	-1000, -1000, 17636, 7732, 7, -1000, 6, 19892, 946, 19892,
	-1000, 545, 545, 1150, 1150, 1150, 616, 616, 680, 1474,
	2601, 2601, 2601, 1151, 381, 381, 2601, 2601, 2601, 917,
	800, 94, 20179, 7732, -96, -1000, -1000, -1000, 19892, 19892,
	4, -1000, -1000, -1000, -138, 2494, 18582, 18553, -1000, 1,
	255, -1000, -1000, -1000, -1000, 13488, -1000, 13488, -1000, 13488,
	745, -1000, -1000, 833, 89, 7988, 13488, -1000, 550, -97,
	-98, 743, -1000, 655, 7732, -1000, 20469, 639, 639, -1000,
	328, 326, -1000, 991, 13488, 1027, -1000, -1000, -1000, 87,
	-102, -1000, 150, 1046, 7732, -1000, -1000, 81, 8496, 0,
	-103, 13488, -1000, 13488, 19892, -138, -1000, 1676, -1000, 80,
	7732, 10520, -1000, -157, -1000, 222, -1000, 13488, -104, -1000,
	-1000, 196, 151, -1000, 7732, 7732, 2580, -108, -1000, 20469,
	648, 648, -1000, 18530, -1000, 19501, -1000, -1000, -1000, -1000,
	19892, 549, -1000, 18392, -1000, -1000, -1000, 7988, 913, 76,
	20469, 18254, -1000, -1000, 7732, -1000, -1000, -1000, -1000, -1000,
	832, -1000, -1000, -1000, 7732, 20179, 69, -1000, 75, -1000,
	-1000, -1000, 504, -1000, -1000, 19892, 1052, -1000, -1000, 13488,
	13488, 376, -109, 13488, -1000, -1000, 4112, 550, 8496, 1059,
	-14, 13488, 1059, 18225, 2912, -116, -1000, 550, 73, -117,
	-1000, 1083, -1000, 13488, 19892, -1000, 840, -1000, 3858, -125,
	-1000, -1000, -1000, 648, 648, -1000, -1000, -1000, -1, 615,
	1064, -1000, 20227, 7988, 20469, -129, -1000, 18202, -1000, 18064,
	791, 13488, 13488, 13488, 281, 13488, -1000, -1000, 409, -1000,
	257, -1000, -1000, -1000, -1000, -1000, -1000, 1046, -35, 550,
	-1000, 8496, 13488, 72, -133, -1000, -1000, -1000, -1000, 494,
	7732, 20227, -137, -1000, -1000, -1000, 630, 659, -139, -141,
	69, -1000, 7732, -1000, 10774, -1000, 1059, -3, -1000, -147,
	-1000, -1000, -1000, -4, 7476, 7476, -138, -1000, -1000, 641,
	634, 455, -1000, -1000, -1000, -1000, -1000, 791, 19892, -118,
	-1000, -1000, 550, -1000, -1000, -1000, 8242, 649, 429, 19186,
	-1000, -1000, 982, -1000, 286, 670, 670, 630, -1000, -1000,
	1125, -1000, -1000, -1000, -1000, -1000, -1000, 1143, -1000, -1000,
	820, -1000, -1000, 7220, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1438, 1437, 1102, 1436, 1435, 1434, 1433, 1431, 74,
	1430, 1426, 103, 1424, 73, 1414, 1413, 1410, 1408, 32,
	1407, 1406, 1401, 1397, 1396, 65, 28, 117, 1865, 115,
	1395, 1394, 1393, 17, 85, 79, 1390, 49, 42, 82,
	105, 1257, 45, 1388, 125, 47, 21, 693, 72, 116,
	111, 107, 1387, 1385, 1384, 33, 1383, 1381, 1380, 11,
	37, 26, 1379, 13, 109, 1378, 1377, 78, 1372, 77,
	88, 40, 100, 86, 1371, 52, 9, 53, 1369, 29,
	1366, 27, 58, 110, 1365, 38, 138, 54, 24, 44,
	1361, 1360, 1359, 1353, 66, 64, 39, 1349, 1348, 56,
	1343, 108, 112, 1338, 1337, 96, 1336, 1335, 1334, 556,
	1332, 1328, 496, 8, 46, 50, 3, 91, 90, 35,
	1325, 23, 1324, 0, 798, 971, 1316, 34, 30, 57,
	36, 41, 15, 1311, 87, 1310, 1307, 1304, 1303, 1301,
	59, 1300, 51, 114, 31, 48, 68, 25, 81, 67,
	99, 120, 89, 1295, 95, 1294, 43, 1293, 1289, 879,
	62, 1287, 1285, 1283, 633, 557, 480, 136, 1282, 1281,
	467, 247, 1280, 1278, 63, 1275, 1274, 118, 1273, 113,
	16, 1272, 92, 1270, 71, 1268, 299, 84, 80, 1266,
	106, 55, 1264, 1263, 1259, 18, 2, 7, 6, 5,
	4, 20, 19, 1256, 1255, 98, 69, 1254, 122, 1249,
	1248, 22, 1247, 1246, 14, 1245, 10, 1244, 12, 1,
	1243, 119, 1238, 76, 1237, 1170, 1236, 121, 1234, 1215,
	1135, 61,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 4, 4, 35, 35, 34, 34, 34, 34,
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
	34, 32, 32, 37, 37, 37, 36, 36, 31, 31,
	5, 5, 5, 9, 10, 10, 10, 10, 10, 10,
	72, 72, 71, 71, 74, 74, 11, 11, 12, 12,
	12, 12, 155, 155, 154, 13, 18, 221, 221, 221,
	225, 225, 226, 226, 227, 227, 227, 227, 227, 227,
	227, 223, 223, 21, 21, 21, 21, 109, 109, 111,
	111, 111, 111, 40, 108, 108, 108, 108, 110, 110,
	110, 110, 179, 177, 177, 184, 184, 184, 52, 52,
	52, 52, 52, 53, 53, 53, 176, 176, 176, 176,
	185, 185, 185, 185, 185, 185, 54, 54, 54, 183,
	183, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 178, 178, 222, 222, 224,
	224, 8, 8, 55, 55, 56, 56, 115, 115, 115,
	114, 193, 193, 194, 194, 194, 195, 195, 195, 195,
	195, 195, 195, 192, 192, 190, 190, 191, 191, 191,
	191, 228, 228, 113, 113, 59, 59, 198, 198, 198,
	198, 196, 196, 196, 196, 196, 199, 197, 200, 200,
	200, 200, 200, 143, 143, 143, 24, 7, 7, 98,
	98, 63, 63, 147, 147, 147, 46, 46, 33, 33,
	33, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	99, 99, 100, 100, 16, 20, 23, 23, 23, 23,
	23, 230, 230, 43, 43, 43, 43, 44, 44, 112,
	112, 112, 112, 112, 39, 6, 6, 38, 38, 14,
	14, 49, 49, 105, 105, 105, 107, 107, 107, 106,
	106, 106, 85, 85, 25, 76, 76, 77, 77, 153,
	78, 78, 19, 19, 28, 28, 26, 26, 26, 26,
	26, 26, 27, 27, 29, 29, 29, 29, 29, 29,
	29, 206, 206, 206, 208, 208, 205, 15, 15, 15,
	15, 207, 207, 229, 229, 86, 86, 86, 58, 57,
	57, 61, 61, 60, 62, 62, 146, 83, 83, 83,
	83, 101, 102, 102, 103, 103, 104, 104, 82, 82,
	130, 130, 30, 30, 67, 67, 68, 68, 121, 121,
	122, 122, 120, 120, 120, 148, 148, 148, 148, 149,
	149, 149, 149, 149, 149, 144, 144, 144, 144, 145,
	145, 89, 89, 89, 89, 87, 87, 88, 88, 150,
	150, 150, 150, 84, 84, 151, 151, 151, 116, 116,
	156, 156, 156, 66, 66, 66, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 158, 158, 158,
	158, 160, 160, 160, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 161, 161, 168,
	168, 169, 169, 170, 171, 162, 162, 163, 163, 164,
	165, 172, 172, 172, 172, 174, 174, 166, 166, 166,
	166, 167, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 96, 96, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 201,
	201, 201, 201, 201, 201, 201, 203, 203, 204, 204,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 209, 209, 210, 210, 211,
	211, 212, 212, 214, 215, 215, 215, 216, 220, 220,
	213, 213, 217, 217, 217, 218, 218, 219, 219, 219,
	219, 219, 134, 134, 134, 135, 135, 136, 73, 73,
	132, 132, 131, 131, 131, 133, 133, 90, 173, 173,
	173, 173, 173, 173, 173, 91, 91, 97, 92, 92,
	93, 93, 93, 93, 93, 93, 127, 128, 94, 94,
	94, 129, 129, 137, 141, 141, 140, 139, 139, 138,
	138, 119, 119, 119, 119, 118, 117, 79, 79, 231,
	231, 142, 142, 80, 80, 81, 75, 75, 152, 152,
	152, 152, 69, 69, 51, 51, 70, 70, 47, 47,
	50, 48, 48, 48, 48, 64, 64, 65, 65, 45,
	45, 126, 126, 126, 126, 126, 126, 126, 126, 126,
	126, 126, 175, 175, 175, 41, 41, 41, 42, 42,
	181, 181, 181, 182, 182, 182, 182, 180, 180, 180,
	180, 180, 186, 186, 186, 186, 186, 186, 186, 186,
	186, 186, 186, 186, 186, 186, 186, 186, 186, 186,
	186, 186, 186, 186, 186, 186, 186, 186, 186, 186,
	186, 186, 186, 186, 186, 186, 186, 186, 186, 186,
	186, 186, 186, 186, 186, 186, 186, 186, 186, 186,
	186, 186, 186, 186, 186, 186, 186, 186, 186, 186,
	186, 186, 186, 186, 186, 186, 186, 186, 186, 186,
	186, 186, 186, 186, 186, 186, 186, 186, 186, 186,
	186, 186, 186, 186, 186, 186, 186, 186, 186, 186,
	186, 186, 186, 186, 186, 186, 186, 186, 186, 186,
	186, 186, 186, 186, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 188, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 188, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 188, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 188, 188, 188, 188, 188, 188, 187,
	187, 187, 187, 187, 187, 187, 187, 187, 187, 187,
	187, 187, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 4, 6, 1, 3, 2, 5, 3, 6,
	4, 6, 6, 6, 4, 8, 2, 3, 3, 6,
	4, 3, 2, 1, 1, 0, 2, 0, 2, 0,
	1, 1, 1, 6, 3, 5, 4, 6, 3, 5,
	1, 3, 1, 2, 2, 3, 2, 5, 1, 1,
	1, 1, 1, 3, 1, 6, 6, 1, 2, 2,
	1, 1, 1, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 2, 3, 6, 3, 2, 1, 1,
	1, 3, 3, 2, 3, 3, 3, 3, 1, 3,
	3, 2, 1, 1, 3, 1, 1, 1, 2, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 1, 1, 1, 1, 0, 1,
	1, 2, 2, 4, 2, 4, 4, 4, 4, 3,
	3, 4, 3, 2, 4, 2, 0, 2, 0, 2,
	0, 6, 9, 1, 0, 1, 3, 1, 1, 1,
	3, 2, 0, 3, 1, 2, 2, 1, 1, 2,
	4, 2, 5, 6, 7, 3, 1, 4, 5, 5,
	10, 1, 1, 4, 0, 3, 0, 2, 2, 2,
	0, 1, 1, 2, 2, 0, 3, 3, 2, 1,
	1, 2, 2, 1, 2, 1, 4, 10, 13, 1,
	0, 1, 3, 3, 3, 5, 2, 0, 1, 1,
	0, 6, 6, 8, 6, 8, 8, 10, 8, 10,
	1, 0, 2, 0, 2, 2, 3, 3, 2, 2,
	2, 1, 0, 1, 3, 2, 0, 2, 1, 1,
	1, 3, 3, 0, 3, 4, 7, 3, 0, 7,
	6, 1, 3, 1, 4, 2, 8, 5, 0, 4,
	3, 0, 2, 0, 8, 1, 3, 1, 1, 3,
	5, 5, 1, 1, 3, 3, 1, 2, 3, 2,
	3, 4, 1, 1, 8, 8, 1, 2, 4, 4,
	4, 2, 2, 3, 1, 3, 6, 1, 1, 1,
	1, 1, 0, 1, 0, 1, 1, 0, 1, 1,
	0, 1, 0, 3, 1, 3, 2, 2, 2, 1,
	1, 2, 2, 3, 1, 1, 1, 1, 3, 0,
	2, 0, 2, 3, 2, 0, 1, 3, 3, 1,
	1, 3, 2, 4, 0, 3, 2, 1, 4, 3,
	4, 5, 4, 5, 4, 5, 2, 4, 1, 1,
	0, 2, 2, 2, 1, 1, 0, 4, 2, 1,
	2, 2, 4, 1, 3, 1, 2, 3, 2, 0,
	2, 5, 2, 3, 4, 0, 1, 1, 1, 1,
	2, 4, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 5, 0, 1, 1, 1, 1, 1, 1,
	2, 2, 2, 2, 2, 1, 1, 3, 0, 1,
	1, 1, 1, 5, 2, 1, 1, 1, 1, 4,
	1, 2, 2, 1, 1, 1, 0, 1, 1, 1,
	4, 1, 1, 1, 1, 1, 1, 1, 3, 3,
	3, 3, 3, 3, 3, 0, 1, 4, 1, 3,
	3, 5, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 2, 3, 4, 4,
	5, 3, 4, 3, 3, 4, 3, 4, 3, 4,
	5, 6, 6, 7, 6, 7, 6, 7, 3, 4,
	1, 3, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 5, 6, 6, 7, 1, 1, 1,
	3, 1, 1, 1, 2, 2, 2, 1, 1, 3,
	5, 6, 8, 6, 6, 4, 4, 1, 1, 1,
	5, 1, 3, 1, 3, 1, 1, 1, 1, 6,
	4, 4, 4, 4, 6, 5, 5, 5, 4, 8,
	6, 6, 4, 4, 4, 5, 0, 5, 0, 2,
	0, 1, 3, 3, 2, 2, 0, 6, 1, 0,
	3, 0, 2, 2, 0, 1, 4, 2, 2, 2,
	2, 2, 4, 3, 5, 4, 3, 5, 1, 3,
	1, 3, 3, 3, 2, 1, 3, 3, 1, 1,
	1, 1, 1, 1, 1, 4, 3, 2, 3, 0,
	3, 3, 2, 2, 1, 0, 2, 2, 3, 2,
	1, 1, 3, 5, 1, 2, 4, 2, 0, 1,
	0, 1, 1, 3, 5, 2, 2, 1, 2, 1,
	0, 1, 1, 1, 3, 3, 1, 3, 3, 2,
	1, 1, 1, 3, 1, 3, 1, 3, 1, 2,
	3, 1, 2, 2, 1, 1, 3, 3, 0, 1,
	2, 1, 1, 1, 1, 6, 2, 3, 5, 1,
	1, 1, 1, 2, 2, 1, 1, 1, 1, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -9, -10, -11, -13,
	-14, -17, -18, -20, -19, -21, -22, -23, -16, -24,
	-25, 19, -6, -7, -8, -207, 83, 90, 103, 190,
	197, -26, -28, 205, 206, 29, 213, 52, 86, 192,
	187, 232, 58, -206, -29, -27, 277, 253, 259, 200,
	-30, 219, 246, 280, 219, 70, 114, 78, 118, 240,
	239, 70, 114, 219, -12, 277, -19, -14, -25, -9,
	-225, 18, -226, -227, 58, 83, 103, 200, 118, 78,
	239, -225, -44, 197, -41, 4, -186, -188, 16, 17,
	19, 28, 29, 33, 37, 40, 51, 52, 53, 55,
	57, 60, 61, 68, 69, 70, 71, 73, 78, 82,
	83, 85, 90, 94, 95, 97, 99, 104, 109, 110,
	115, 118, 126, 128, 129, 134, 137, 140, 142, 143,
	144, 145, 146, 148, 149, 151, 153, 150, 156, 158,
	159, 165, 168, 171, 172, 175, 178, 179, 180, 182,
	183, 187, 185, 186, 188, 190, 192, 193, 195, 198,
	199, 202, 203, 205, 206, 208, 210, 212, 213, 216,
	214, 220, 221, 228, 232, 233, 234, 235, 238, 239,
	240, 243, 244, 245, 249, 254, 255, 256, 257, 30,
	31, 32, 34, 35, 38, 39, 43, 44, 45, 47,
	72, 74, 75, 89, 91, 96, 105, 107, 111, 112,
	119, 120, 121, 123, 132, 155, 157, 166, 170, 174,
	176, 181, 194, 201, 209, 215, 217, 223, 224, 225,
	229, 230, 246, 247, -109, 137, 203, 228, -110, -108,
	-179, 223, 146, -71, -41, 197, 4, 70, 51, 71,
	104, 114, 115, 129, 220, 223, 228, 18, 58, -230,
	228, 228, -230, -230, -43, 228, 226, -44, -229, 219,
	219, -98, 70, 237, -27, -29, -28, -60, -61, 236,
	122, 88, 164, -26, -28, -206, -208, 182, -205, -41,
	-208, -57, -58, 18, 80, 281, -150, -47, 162, -41,
	-81, 277, -3, -150, 111, -41, -50, 111, -47, 101,
	124, 124, -151, -150, -41, 111, -51, 111, -50, -72,
	111, -71, -155, -154, -182, 4, -186, -188, -187, 246,
	49, 59, 102, 117, 125, 127, 133, 135, 147, 167,
	169, 191, 207, 161, 281, 161, -41, -109, 45, -109,
	-111, -39, -40, 126, 178, 226, 262, 101, 257, -54,
	5, 76, -74, 279, 101, -222, 161, 101, 101, 101,
	-178, 101, 257, 126, 178, 219, -112, -39, -40, -112,
	226, -44, -84, -150, -71, 111, 114, -41, 111, -60,
	-61, -83, -101, -102, 136, 160, -86, 18, 80, -86,
	-86, 37, 278, 278, 281, -208, -65, 277, -75, -152,
	-123, 270, -125, 268, 269, 274, 152, 258, -134, -47,
	-126, 9, 277, -137, -203, -28, 89, 24, -135, -136,
	194, -41, 7, 8, 5, 6, -45, -158, -167, 231,
	92, 154, 41, -201, -202, 4, -186, -181, -159, -169,
	-163, -166, 123, 49, 63, 66, 64, 67, 204, 241,
	42, 91, 170, 174, 217, 229, 230, 111, 155, 112,
	47, 105, 132, 82, 31, 32, 34, 35, 43, 44,
	72, 74, 75, 96, 119, 120, 121, 157, 181, 209,
	215, 224, 225, 247, -187, -170, -171, -164, -165, -172,
	-75, -81, 270, -47, 277, -79, -119, -118, -117, 275,
	279, -80, -142, -123, 76, -35, 185, -34, 17, 19,
	83, 244, 89, 185, 185, 89, 282, -151, -49, -47,
	-49, 205, -41, 25, 89, -37, 281, 40, 188, 89,
	281, 89, 278, 281, -221, -70, 219, 70, -48, -41,
	270, -227, -221, 25, 281, 281, 134, -53, 140, 151,
	109, -177, 76, -184, -176, -143, 9, 231, 92, 161,
	-183, 8, 269, -175, -182, 5, 7, 268, -177, 76,
	61, -185, 5, 4, -167, -143, 76, 137, 123, 279,
	-180, 4, -186, -188, -187, -189, 18, 20, 21, 22,
	23, 24, 25, 26, 27, 36, 41, 42, 46, 48,
	50, 56, 58, 62, 63, 64, 65, 66, 67, 76,
	77, 79, 80, 81, 84, 86, 88, 92, 93, 98,
	100, 101, 103, 106, 108, 113, 114, 116, 122, 124,
	130, 131, 136, 138, 139, 152, 154, 160, 161, 162,
	163, 164, 173, 177, 184, 189, 200, 204, 211, 218,
	219, 222, 226, 227, 231, 236, 237, 241, 242, 248,
	250, 251, 252, 253, -179, -224, 98, -221, -179, -179,
	-179, -179, 134, -179, 281, 281, -44, -37, 281, 277,
	152, -42, 111, -41, -38, 85, 152, -83, -102, -101,
	-103, -123, 18, -123, -125, -27, -27, -27, -62, -146,
	-123, -205, 25, -64, -41, -67, 281, 101, 10, 48,
	28, 268, 269, 270, 271, 272, 265, 266, 267, 264,
	260, 261, 262, 54, 141, 196, 12, 13, 14, 22,
	163, 135, 258, 207, 125, 30, 113, 25, 4, -123,
	-123, -123, -123, -123, 169, -28, -123, -73, -79, -28,
	-131, 275, 277, -79, 277, 5, 5, 277, -138, -123,
	-209, 254, 98, 277, 277, 277, 277, 277, 277, 277,
	277, 277, 277, 277, 277, 277, 277, 277, 176, -174,
	249, -174, -174, -160, 277, -160, -161, 277, -160, 259,
	277, -67, -47, -119, -123, -180, 270, 281, 278, 281,
	226, -99, 56, 50, -114, 111, 50, -190, -41, 56,
	-191, 46, 237, 177, 100, -99, 56, -99, 56, 56,
	-150, 226, 226, -50, -41, -116, 251, -105, -19, 277,
	76, 25, -105, -76, -77, -153, -78, -47, 277, -41,
	-41, -50, -51, -71, -72, -12, -154, 226, 281, -70,
	-64, -118, -117, 101, 228, -40, -39, -52, 180, 210,
	186, 202, 281, 8, 7, 7, 5, -180, -223, -41,
	-40, -39, -150, -55, -56, -115, -114, -192, -190, 114,
	237, 89, 161, 152, 262, 89, -104, 194, 195, 281,
	-33, 26, 79, 277, 281, 278, -116, -152, -68, -148,
	-150, -28, -149, 277, -156, -157, -159, -168, -162, -166,
	-167, 33, 39, 38, 221, 201, 119, 120, 121, 209,
	31, 181, 96, 82, 75, 74, 157, 35, 34, -170,
	-171, -164, -165, 72, 224, 225, 32, 44, 43, 247,
	215, -71, 223, -123, -123, -123, -123, -123, -123, -123,
	-123, -123, -123, -123, -123, -123, -123, -123, -123, -123,
	-123, -123, -123, -123, 135, 207, 30, 113, 226, 154,
	152, 231, 92, 238, 80, 158, -231, 218, 27, -129,
	-28, 277, -180, -134, 194, 277, 278, 281, -73, -133,
	276, -123, -131, -73, 278, 278, -73, 248, 18, 80,
	270, -95, 256, 144, 73, 110, 143, -96, 199, 7,
	-141, -140, 250, -210, 94, 106, 277, 278, 278, -123,
	-90, -173, 4, 256, 144, 73, 110, 143, 199, -91,
	-123, -92, -124, -125, 268, 269, 274, 277, 194, -93,
	-123, -73, -123, 36, 131, 227, -94, -123, 101, -73,
	-123, -123, -123, -73, -73, -73, 277, 7, 7, 223,
	7, -116, 278, 276, 285, -142, -34, -47, -41, -41,
	152, -114, 111, -156, -41, 277, 277, 128, 128, -41,
	-41, 111, -41, 111, -41, -41, -35, 185, -41, -41,
	185, -85, 189, -123, -107, 161, -69, -47, 246, -41,
	-85, -67, 281, 262, -69, -37, -223, -48, -223, -39,
	235, 53, 180, -184, -95, 281, 278, 281, -42, 114,
	-71, -47, 89, 5, -41, -146, -15, -19, -14, -25,
	-9, -41, -82, 106, 281, 59, -89, 127, 147, 102,
	133, 191, 117, -120, 282, -145, -144, 25, -41, -28,
	-149, -148, -66, 24, -95, 277, 257, -123, 226, -231,
	218, -129, -123, 154, 231, 92, 238, 80, 158, 101,
	277, -124, -124, -73, 277, -73, -123, 281, 276, 276,
	281, 278, -61, 281, -60, -123, -73, -73, 278, 226,
	226, 226, 226, 277, 278, -139, -140, 84, -123, -215,
	168, 277, 277, -123, 25, 278, 101, 278, -97, 173,
	278, 10, 268, 269, 270, 271, 272, 265, 266, 267,
	264, 260, 261, 262, 54, 141, 196, 12, 13, 14,
	125, 113, -124, -124, -124, -73, 277, 278, -127, -128,
	101, 98, 25, -94, -94, -94, 278, 101, -73, 281,
	281, 281, 278, 278, 278, 7, 278, 281, 278, 257,
	278, -82, -123, 226, 226, 89, 152, -193, -191, -123,
	-64, 277, 277, -32, 83, 205, -100, 89, -37, 89,
	-37, 226, -99, 56, 226, -75, -85, 55, 278, 281,
	-116, -77, -142, 278, -41, -115, 277, -42, 277, 277,
	-41, -38, 278, -130, 108, 37, -148, 127, 127, -148,
	-89, 127, -87, 167, -87, -87, -145, -180, 283, -41,
	277, 278, 275, 275, 7, -123, -123, -124, -124, 101,
	277, -123, -132, -156, 22, 22, 278, -73, 278, 281,
	278, -123, -131, 278, 248, -61, -61, -61, 144, 110,
	143, -96, 143, -96, -96, 7, 5, 86, -123, 222,
	-216, -41, 277, 251, -60, 278, -156, -123, -127, -123,
	-156, -124, -124, -124, -124, -124, -124, -124, -124, -124,
	-124, -124, -124, -124, -124, -124, -124, -124, -124, 80,
	152, 158, -124, 281, -73, 278, -128, -127, -123, -123,
	-156, 278, 278, 278, -73, -123, -123, -123, 278, 7,
	-130, 276, -41, -41, -114, 89, -194, 56, -195, 48,
	152, 154, 237, 177, 46, 76, 184, 278, 278, -64,
	-64, 152, 76, 152, 76, 69, 233, -41, -41, -47,
	-41, -41, -41, -106, 277, 161, -19, -47, -85, 262,
	-63, -147, -41, -204, 277, -201, -202, -45, 277, -55,
	-63, 161, -211, 252, -123, -73, -148, -148, -88, 242,
	161, 127, -148, -122, -121, 99, 150, 277, -64, -144,
	276, 7, 7, 278, 22, 22, -123, -132, 278, 281,
	-123, -123, 278, -123, 5, -123, 278, 278, 278, 278,
	-123, -220, -41, -123, 278, 278, -128, 101, 80, 158,
	277, -123, 278, 278, 281, 278, 278, 278, -211, -114,
	-41, -71, 154, 128, 277, -124, -47, -113, -228, 57,
	216, 278, 278, 154, 154, -123, -156, -37, -37, 226,
	226, 81, -64, 56, -81, -28, 277, 278, 281, -46,
	-79, 48, -46, -123, 277, -63, 278, 278, -47, -212,
	-214, -41, -88, 277, -123, -148, 281, 284, 262, -64,
	278, 276, 276, -123, -123, 278, -156, 278, -61, -213,
	172, 278, -124, 101, 277, -132, 278, -123, -195, -123,
	-59, 277, 277, 184, -36, 48, -41, -41, 239, 153,
	278, -41, -113, -147, -33, -71, -33, 278, -73, 278,
	-113, 277, 281, 25, -64, -121, -180, 278, 278, -61,
	37, -124, -132, 278, 278, 278, -198, 142, -64, -64,
	-47, -31, 242, -71, 205, -116, -46, -61, -113, -63,
	-214, -216, 278, -217, 179, 195, -73, 278, -196, -199,
	-197, 161, 102, 171, 208, 278, 278, -59, -123, -76,
	-33, 278, 278, 278, -218, -219, 30, 234, 61, -123,
	-218, -197, 161, -199, 161, 239, 78, -198, -116, -113,
	-219, 175, 97, 194, 175, 97, -200, 149, 188, 40,
	205, -200, -196, 22, 16, 154, 76, -219,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 0, 50, 51, 52, 0, 0, 322, 0, 0,
	0, 292, -2, 0, 0, 252, 0, 252, 252, 256,
	0, 324, 220, 321, -2, 332, 0, 0, 0, 330,
	306, 0, 0, -2, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 66, 0, 68, 69, 70, 71,
	0, 80, 81, 82, 84, 85, 86, 87, 88, 89,
	90, 0, 245, 823, 258, 735, 736, 737, 752, 753,
	754, 755, 756, 757, 758, 759, 760, 761, 762, 763,
	764, 765, 766, 767, 768, 769, 770, 771, 772, 773,
	774, 775, 776, 777, 778, 779, 780, 781, 782, 783,
	784, 785, 786, 787, 788, 789, 790, 791, 792, 793,
	794, 795, 796, 797, 798, 799, 800, 801, 802, 803,
	804, 805, 806, 807, 808, 809, 810, 811, 812, 813,
	814, 815, 816, 817, 818, 819, 820, 821, 822, 824,
	825, 826, 827, 828, 829, 830, 831, 832, 833, 834,
	835, 836, 837, 838, 839, 840, 841, 842, 843, 844,
	845, 846, 847, 848, 849, 850, 851, 852, 853, 854,
	855, 856, 857, 858, 859, 860, 861, 862, 863, 864,
	865, 866, 867, 868, 869, 870, 871, 872, 873, 874,
	875, 876, 877, 878, 879, 880, 881, 882, 883, 884,
	885, 886, 887, 888, 889, 890, 891, 892, 893, 894,
	895, 896, 897, 898, 93, 790, 827, 838, 98, 108,
	0, 892, -2, 112, 62, 823, 141, 142, 0, 144,
	158, 0, 0, 0, 156, 0, 0, 153, 0, 263,
	251, 263, 248, 249, 250, 253, 0, 244, 0, 323,
	0, 0, 0, 219, -2, 302, 303, -2, 0, 327,
	327, 327, 0, 0, 303, 0, 311, 813, 314, 718,
	312, 0, 0, 329, 328, 0, 307, 389, 0, 708,
	352, 0, 2, 0, 873, 0, 0, 873, 0, 0,
	0, 0, 0, 395, 54, 873, 45, 873, 704, 58,
	873, 60, 0, 72, 74, 743, 744, 745, 746, 897,
	899, 900, 901, 902, 903, 904, 905, 906, 907, 908,
	909, 910, 911, 0, 0, 0, 257, 94, 863, 96,
	97, 99, 100, 0, 0, 0, 0, 0, 0, 111,
	136, 137, 63, 0, 0, 160, 0, 0, 0, 0,
	149, 0, 150, 0, 152, 0, 246, 259, 260, 247,
	0, 255, 45, 393, 0, 873, 739, 268, 873, -2,
	0, 298, 339, 340, 0, 0, 0, 325, 326, 0,
	0, 0, 294, 295, 0, 313, 0, 0, 355, 696,
	700, 701, 478, 0, 0, 0, 0, 0, 0, 557,
	558, 559, 0, 561, 562, 563, 868, 0, 567, 568,
	887, 708, 721, 722, 723, 724, 0, 0, 0, 729,
	730, 731, 680, 606, 577, -2, -2, 719, 417, 418,
	419, 420, -2, 899, 581, 583, 585, 586, 587, 588,
	0, 869, 883, 884, 891, 895, 896, 873, 880, 874,
	864, 871, 879, 773, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, 742, 441, 442, 447, 448, 450,
	355, 353, 390, 391, 0, 709, 687, 681, 682, 0,
	0, 0, 693, 691, 692, 22, 241, 24, 0, 241,
	241, 0, 0, 0, 0, 0, 0, 399, 0, 271,
	0, 0, 396, 0, 0, 56, 0, 43, 44, 0,
	0, 0, 322, 0, 0, 77, 0, 769, 706, 711,
	714, 83, 0, 0, 0, 0, 0, 103, 123, 124,
	125, 104, 106, 113, 115, 116, 117, 126, 127, 128,
	129, 213, 0, 215, 139, 140, 732, 0, 105, 107,
	109, 110, 130, 131, 0, 133, 134, 135, 461, 0,
	64, 747, 748, 749, 750, 751, 912, 913, 914, 915,
	916, 917, 918, 919, 920, 921, 922, 923, 924, 925,
	926, 927, 928, 929, 930, 931, 932, 933, 934, 935,
	936, 937, 938, 939, 940, 941, 942, 943, 944, 945,
	946, 947, 948, 949, 950, 951, 952, 953, 954, 955,
	956, 957, 958, 959, 960, 961, 962, 963, 964, 965,
	966, 967, 968, 969, 970, 971, 972, 973, 974, 975,
	976, 977, 978, 979, 980, 981, 982, 983, 984, 985,
	986, 987, 988, 989, 143, 145, 0, 157, 146, 147,
	148, 155, 151, 154, 0, 0, 254, 216, 0, 164,
	0, 0, 873, 738, 265, 0, 0, 301, 337, 338,
	341, 344, 345, 342, 478, 308, 309, 310, 333, 334,
	230, 315, 0, 0, 715, 399, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 690, 0, 0, 699, 482,
	483, 484, 505, 506, 0, -2, 638, 0, 564, 565,
	566, 0, 0, -2, 0, 726, 475, 0, 0, 679,
	608, 0, 0, 0, 0, 0, 0, 0, 659, 665,
	0, 0, 0, 0, 0, 0, 0, 0, 431, 444,
	455, 452, 451, 433, 0, 432, 430, 0, 434, 0,
	0, 399, 0, 688, 0, 685, 686, 0, 695, 0,
	0, 0, 0, 240, 26, 873, 0, 36, 0, 0,
	186, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 710, 283, 0, 278, 273, 0,
	0, 0, 283, 355, 285, 287, 288, 0, 0, 397,
	55, 705, 45, 61, 59, 67, 73, 0, 0, 78,
	79, 712, 713, 0, 0, 101, 102, 264, 0, 120,
	0, 122, 0, 214, 734, 733, 475, 65, 159, 91,
	261, 262, 394, 0, 163, 165, 167, 168, 169, 739,
	0, 0, 0, 0, 0, 0, 343, 346, 347, 0,
	336, 228, 229, 322, 0, 717, 349, 697, 354, 356,
	364, 380, 367, 0, 479, 405, 406, 407, 408, 409,
	475, 412, 413, 414, 415, 416, 424, 425, 426, 427,
	428, 429, 438, 0, 423, 423, 423, 435, 436, 439,
	440, 445, 446, 457, 458, 459, 456, 456, 456, 453,
	454, 480, 0, 485, 486, 487, 488, 489, 490, 491,
	492, 493, -2, -2, -2, 497, 498, 499, -2, -2,
	-2, 503, 504, -2, 0, 0, 690, 0, 0, 511,
	0, 514, 516, 518, 0, 0, 0, 0, 689, 528,
	671, 0, 698, 513, 0, 0, 560, 0, 0, 0,
	644, 638, 645, 0, -2, 569, 332, 0, 0, 0,
	0, 727, 462, 463, 464, 465, 466, 467, 476, 0,
	678, 674, 0, 616, 0, 0, 0, 582, 584, 0,
	0, 0, 648, 649, 650, 651, 652, 653, 654, 0,
	0, 0, 0, 530, 0, 0, 0, 0, 887, 0,
	638, 664, 0, 0, 0, 0, 0, 638, 0, 670,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 349, 392, 683, 0, 694, 25, 232, 0, 0,
	0, 28, 873, 172, 0, 0, 0, 0, 0, 243,
	37, 873, 45, 873, 45, 38, 23, 241, 231, 234,
	0, 53, 0, 398, 283, 0, 0, 702, 275, 272,
	270, 399, 0, 0, 0, 57, 75, 707, 76, 95,
	118, 119, 121, 114, 132, 0, 161, 0, 0, 739,
	0, 0, 0, 267, 268, 335, 0, 317, 318, 319,
	320, 716, 351, 0, 0, 0, 0, 0, 0, 386,
	386, 386, 384, 380, 0, 366, 379, 0, 378, -2,
	367, 0, 400, 402, 410, 0, 0, -2, 0, 0,
	0, 529, -2, 512, 515, 517, 519, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 639, 0, 642, 643,
	0, -2, 0, 0, 331, 332, 332, 332, 575, 0,
	0, 0, 0, 0, 0, 0, 675, 0, 0, 576,
	0, 0, 0, 0, 0, 590, 0, 591, 0, 0,
	592, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 532, 533, 534, 0, 0, 593, 662, 663,
	0, 0, 0, 0, 0, 0, 598, 0, 669, 0,
	0, 0, 602, 603, 604, 0, 421, 0, 437, 460,
	449, 351, 0, 0, 0, 0, 0, 170, 185, 0,
	0, 0, 0, 30, 0, 0, 0, 0, 34, 0,
	40, 0, 0, 0, 0, 282, 269, 281, 0, 0,
	283, 286, 289, 0, 92, 166, 0, 0, 164, 0,
	0, 266, 316, 610, 0, 0, 357, 0, 0, 0,
	0, 0, 381, 385, 382, 383, 365, 362, 0, 376,
	0, 369, 0, 0, 0, 481, -2, 0, 0, 0,
	0, -2, 0, 640, 0, 0, 672, 0, 633, 0,
	-2, 639, 646, 570, 0, 0, 0, 0, 468, 469,
	470, 471, 472, 473, 474, 0, 728, 673, 677, 0,
	614, 615, 619, 0, 0, 580, 0, 647, 656, 657,
	531, 535, 536, 537, 538, 539, 540, 541, 542, 543,
	-2, -2, -2, 547, 548, 549, -2, -2, -2, 0,
	0, 0, 658, 0, 0, 636, 660, 661, 666, 667,
	0, 595, 596, 597, 668, 0, 0, 0, 443, 0,
	610, 684, 236, 238, 27, 0, 171, 0, 174, 0,
	0, 177, 178, 0, 0, 0, 0, 187, 194, 0,
	0, 0, 42, 0, 0, 242, 0, 45, 45, 233,
	0, 0, 235, 0, 0, 0, 274, 703, 284, 0,
	0, 221, 227, 227, 0, 578, 579, 0, 0, 0,
	0, 0, 304, 0, 350, 348, 370, 0, 372, 0,
	0, 0, 374, 0, 360, 0, 359, 0, 0, 368,
	403, 0, 0, 411, 0, 0, -2, 0, 522, 0,
	-2, -2, 632, 639, 725, 332, 571, 573, 574, 477,
	676, 621, 618, 0, 605, 589, 655, 0, 0, 0,
	0, 639, 635, 594, 0, 600, 601, 422, 305, 29,
	0, 175, 176, 179, 0, 181, 196, 188, 0, 191,
	192, 189, 0, 31, 32, 41, 47, 33, 39, 0,
	0, 0, 0, 0, 290, 291, 0, 194, 0, 230,
	720, 0, 230, 0, 0, 0, 162, 194, 0, 609,
	611, 0, 371, 0, 388, 373, 0, 363, 0, 0,
	377, 404, 401, -2, -2, 523, 641, 634, 0, 332,
	0, 607, -2, 0, 0, 0, 637, 0, 173, 0,
	200, 0, 0, 0, 49, 0, 237, 239, 0, 277,
	399, 280, 183, 222, 223, 226, 224, 227, 332, 194,
	217, 0, 0, 0, 0, 361, 358, 375, 572, 624,
	0, -2, 0, 555, 599, 180, 205, 0, 0, 0,
	196, 35, 0, 46, 0, 279, 230, 0, 184, 0,
	612, 613, 387, 0, 0, 0, 620, 556, 182, 201,
	202, 0, 197, 198, 199, 195, 193, 200, 48, 399,
	225, 570, 194, 617, 622, 625, -2, 841, 766, 0,
	623, 203, 0, 204, 0, 0, 0, 205, 276, 218,
	0, 627, 628, 629, 630, 631, 206, 0, 209, 210,
	0, 207, 190, 0, 208, 211, 212, 626,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 266, 3, 272, 267, 3,
	277, 278, 270, 268, 281, 269, 279, 271, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 285, 280,
	260, 262, 261, 3, 282, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 275, 3, 276, 265, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 283, 264, 284, 274,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 263, 57603, 273, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:666
		{
			sqllex.(*scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:672
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:678
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 14:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:698
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 21:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:708
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 22:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:714
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.qname(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 23:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:718
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.qname(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 24:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:724
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 25:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:728
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:735
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 27:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:740
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 28:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:745
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 29:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:750
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 30:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:755
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: sqlDollar[3].str, Default: sqlDollar[4].union.expr()}
		}
	case 31:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:760
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: sqlDollar[3].str}
		}
	case 32:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:764
		{
			unimplemented()
		}
	case 33:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:767
		{
			sqlVAL.union.val = &AlterTableDropColumn{columnKeyword: sqlDollar[2].union.bool(), IfExists: true, Column: sqlDollar[5].str}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:772
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        sqlDollar[3].str,
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:782
		{
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:785
		{
			sqlVAL.union.val = &AlterTableAddConstraint{ConstraintDef: sqlDollar[2].union.constraintDef()}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:789
		{
			unimplemented()
		}
	case 38:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:791
		{
			unimplemented()
		}
	case 39:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:794
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   sqlDollar[5].str,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:803
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   sqlDollar[3].str,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 41:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:813
		{
			if containsSubquery(sqlDollar[3].union.expr()) {
				sqllex.Error("default expression contains a subquery")
				return 1
			}
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:821
		{
			sqlVAL.union.val = nil
		}
	case 43:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:827
		{
			sqlVAL.union.val = DropCascade
		}
	case 44:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:831
		{
			sqlVAL.union.val = DropRestrict
		}
	case 45:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:835
		{
			sqlVAL.union.val = DropDefault
		}
	case 46:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:840
		{
			unimplementedWithIssue(2473)
		}
	case 47:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:841
		{
		}
	case 48:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:844
		{
			unimplemented()
		}
	case 49:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:845
		{
		}
	case 53:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:856
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retExprs()}
		}
	case 54:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:863
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 55:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:867
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 56:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:871
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 57:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:879
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 58:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:887
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.qnames(), IfExists: false}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:891
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.qnames(), IfExists: true}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:897
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:901
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 62:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:907
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:911
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:917
		{
			sqlVAL.union.val = Indirection{NameIndirection(sqlDollar[2].str)}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:921
		{
			sqlVAL.union.val = append(sqlDollar[1].union.indirect(), NameIndirection(sqlDollar[3].str))
		}
	case 66:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:928
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:932
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:938
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 72:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:947
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 73:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:951
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 75:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:961
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: NameList(sqlDollar[6].union.strs()), Targets: sqlDollar[4].union.targetList()}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:968
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: NameList(sqlDollar[6].union.strs()), Targets: sqlDollar[4].union.targetList()}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:975
		{
			sqlVAL.union.val = TargetList{Tables: QualifiedNames(sqlDollar[1].union.qnames())}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:979
		{
			sqlVAL.union.val = TargetList{Tables: QualifiedNames(sqlDollar[2].union.qnames())}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:983
		{
			sqlVAL.union.val = TargetList{Databases: NameList(sqlDollar[2].union.strs())}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:990
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:993
		{
		}
	case 82:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:997
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1001
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 84:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1008
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 85:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1012
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 86:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1016
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 87:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1020
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 88:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1024
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 89:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1028
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 90:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1032
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 91:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1040
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1044
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 93:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1052
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 94:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1056
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 95:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1060
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1064
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 97:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1070
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 99:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1077
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1081
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1085
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1089
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1096
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1102
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname(), Values: sqlDollar[3].union.exprs()}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1106
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname(), Values: sqlDollar[3].union.exprs()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1110
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname()}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1114
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname()}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1121
		{
			unimplemented()
		}
	case 110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1124
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1127
		{
			unimplemented()
		}
	case 113:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1134
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1138
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1146
		{
			sqlVAL.union.val = ValArg{Name: sqlDollar[1].str}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1152
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1156
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1160
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1164
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1168
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1174
		{
			sqlVAL.union.val = Low
		}
	case 124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1178
		{
			sqlVAL.union.val = Normal
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1182
		{
			sqlVAL.union.val = High
		}
	case 126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1188
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1192
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1196
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1211
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1215
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1219
		{
			expr := &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
			typedExpr, err := TypeCheck(expr, nil, NoTypePreference)
			if err != nil {
				sqllex.Error("cannot type check interval type: " + err.Error())
				return 1
			}
			var ctx EvalContext
			d, err := typedExpr.Eval(ctx)
			if err != nil {
				sqllex.Error("cannot evaluate to an interval type: " + err.Error())
				return 1
			}
			if _, ok := d.(*DInterval); !ok {
				panic("not an interval type")
			}
			sqlVAL.union.val = d
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1239
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1243
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1248
		{
			unimplemented()
		}
	case 137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1249
		{
			unimplemented()
		}
	case 138:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1250
		{
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1254
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1258
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1264
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1268
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1272
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.qname()}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1276
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1280
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.strs()}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1284
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1288
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1292
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1296
		{
			sqlVAL.union.val = &ShowTables{Name: sqlDollar[3].union.qname()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1300
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1304
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1308
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1312
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 154:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1316
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.qname()}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1322
		{
			sqlVAL.union.val = sqlDollar[2].union.qname()
		}
	case 156:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1326
		{
			sqlVAL.union.val = (*QualifiedName)(nil)
		}
	case 157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1332
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 158:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1337
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1343
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 160:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1347
		{
			sqlVAL.union.val = []string(nil)
		}
	case 161:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1354
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.qname(), IfNotExists: false, Defs: sqlDollar[5].union.tblDefs()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1358
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.qname(), IfNotExists: true, Defs: sqlDollar[8].union.tblDefs()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1365
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1371
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1375
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1381
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1386
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1392
		{
			sqlVAL.union.val = newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1398
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 172:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1402
		{
			sqlVAL.union.val = []ColumnQualification(nil)
		}
	case 173:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1408
		{
			sqlVAL.union.val = sqlDollar[3].union.colQual()
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1412
		{
			unimplemented()
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1428
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1432
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1436
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1440
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1444
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1448
		{
			if containsSubquery(sqlDollar[2].union.expr()) {
				sqllex.Error("default expression contains a subquery")
				return 1
			}
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1455
		{
			unimplemented()
		}
	case 183:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1459
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.idxElems(),
				Storing: sqlDollar[6].union.strs(),
			}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1467
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:    Name(sqlDollar[3].str),
					Columns: sqlDollar[5].union.idxElems(),
					Storing: sqlDollar[7].union.strs(),
				},
			}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1482
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1487
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 187:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1493
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1499
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[3].union.strs()),
					Storing: sqlDollar[5].union.strs(),
				},
			}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1508
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[4].union.strs()),
				},
				PrimaryKey: true,
			}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1517
		{
			unimplemented()
		}
	case 193:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1534
		{
			sqlVAL.union.val = sqlDollar[3].union.strs()
		}
	case 194:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1538
		{
			sqlVAL.union.val = []string(nil)
		}
	case 195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1544
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 196:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1548
		{
			sqlVAL.union.val = []string(nil)
		}
	case 197:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1553
		{
			unimplemented()
		}
	case 198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1554
		{
			unimplemented()
		}
	case 199:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1555
		{
			unimplemented()
		}
	case 200:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1556
		{
		}
	case 201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1563
		{
			unimplemented()
		}
	case 202:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1564
		{
			unimplemented()
		}
	case 203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1565
		{
			unimplemented()
		}
	case 204:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1566
		{
			unimplemented()
		}
	case 205:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1567
		{
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1570
		{
			unimplemented()
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1573
		{
			unimplemented()
		}
	case 208:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1576
		{
			unimplemented()
		}
	case 209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1577
		{
			unimplemented()
		}
	case 210:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1578
		{
			unimplemented()
		}
	case 211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1579
		{
			unimplemented()
		}
	case 212:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1580
		{
			unimplemented()
		}
	case 213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1584
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1588
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1592
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 216:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1599
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.qnames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1606
		{
			sqlVAL.union.val = &CreateIndex{
				Name:    Name(sqlDollar[4].str),
				Table:   sqlDollar[6].union.qname(),
				Unique:  sqlDollar[2].union.bool(),
				Columns: sqlDollar[8].union.idxElems(),
				Storing: sqlDollar[10].union.strs(),
			}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql.y:1616
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.qname(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.strs(),
			}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1629
		{
			sqlVAL.union.val = true
		}
	case 220:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1633
		{
			sqlVAL.union.val = false
		}
	case 221:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1639
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1643
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1652
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1655
		{
			unimplemented()
		}
	case 225:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1656
		{
			unimplemented()
		}
	case 226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1659
		{
			unimplemented()
		}
	case 227:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1660
		{
		}
	case 228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1664
		{
			sqlVAL.union.val = Ascending
		}
	case 229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1668
		{
			sqlVAL.union.val = Descending
		}
	case 230:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1672
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 231:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1679
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1683
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.qname(), NewName: sqlDollar[6].union.qname(), IfExists: false}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1687
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.qname(), NewName: sqlDollar[8].union.qname(), IfExists: true}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1691
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1695
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1699
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.qname(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1703
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.qname(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1707
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 239:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1711
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 240:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1717
		{
			sqlVAL.union.val = true
		}
	case 241:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1721
		{
			sqlVAL.union.val = false
		}
	case 242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1726
		{
		}
	case 243:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1727
		{
		}
	case 244:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1731
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1737
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1744
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1748
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1752
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1756
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1760
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1769
		{
		}
	case 252:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1770
		{
		}
	case 253:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1774
		{
			sqlVAL.str = ""
		}
	case 254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1778
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1782
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 256:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1786
		{
			sqlVAL.str = ""
		}
	case 257:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1792
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 258:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1796
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1802
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 260:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1806
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 261:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1810
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1814
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1818
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1824
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 265:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1830
		{
			sqlVAL.union.val = &CreateDatabase{Name: Name(sqlDollar[3].str), Encoding: sqlDollar[4].union.strVal()}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1834
		{
			sqlVAL.union.val = &CreateDatabase{IfNotExists: true, Name: Name(sqlDollar[6].str), Encoding: sqlDollar[7].union.strVal()}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1840
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1843
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 269:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1849
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retExprs()
		}
	case 270:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1856
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retExprs()
		}
	case 271:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1869
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname()}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1873
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1879
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1883
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.qnames(), Rows: sqlDollar[4].union.slct()}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1887
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1893
		{
			sqlVAL.union.val = &OnConflict{Columns: NameList(sqlDollar[3].union.strs()), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1897
		{
			sqlVAL.union.val = &OnConflict{Columns: NameList(sqlDollar[3].union.strs()), DoNothing: true}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1901
		{
			sqlVAL.union.val = (*OnConflict)(nil)
		}
	case 279:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1907
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 280:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1911
		{
			unimplemented()
		}
	case 281:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1913
		{
			sqlVAL.union.val = nil
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1919
		{
			sqlVAL.union.val = sqlDollar[2].union.selExprs()
		}
	case 283:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1923
		{
			sqlVAL.union.val = SelectExprs(nil)
		}
	case 284:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1930
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retExprs()}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1936
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1940
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 289:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1950
		{
			sqlVAL.union.val = &UpdateExpr{Names: QualifiedNames{sqlDollar[1].union.qname()}, Expr: sqlDollar[3].union.expr()}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1962
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.qnames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1966
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.qnames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2010
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2016
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2020
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2035
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2039
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2043
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2047
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2051
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2055
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2089
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.tblExprs(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2101
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.tblExprs(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2113
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        TableExprs{&AliasedTableExpr{Expr: sqlDollar[2].union.qname()}},
				tableSelect: true,
			}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2121
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2130
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2139
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2157
		{
			unimplemented()
		}
	case 312:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2158
		{
			unimplemented()
		}
	case 313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2159
		{
			unimplemented()
		}
	case 314:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2162
		{
			unimplemented()
		}
	case 315:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2163
		{
			unimplemented()
		}
	case 316:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2166
		{
			unimplemented()
		}
	case 317:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2170
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 321:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2178
		{
			unimplemented()
		}
	case 322:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2179
		{
		}
	case 323:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2182
		{
		}
	case 324:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2183
		{
		}
	case 325:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2187
		{
			sqlVAL.union.val = true
		}
	case 326:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2191
		{
			sqlVAL.union.val = false
		}
	case 327:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2195
		{
			sqlVAL.union.val = false
		}
	case 328:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2201
		{
			sqlVAL.union.val = true
		}
	case 329:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2206
		{
		}
	case 330:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2207
		{
		}
	case 331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2211
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 332:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2215
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 333:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2221
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 334:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2227
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2231
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 336:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2237
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2245
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2254
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2265
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2278
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2285
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2292
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 346:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2306
		{
		}
	case 347:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2307
		{
		}
	case 348:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2333
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 349:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2337
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2343
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 351:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2347
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 352:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2353
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2357
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 354:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2369
		{
			sqlVAL.union.val = sqlDollar[2].union.tblExprs()
		}
	case 355:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2373
		{
			sqlVAL.union.val = TableExprs(nil)
		}
	case 356:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2379
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2383
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 358:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2389
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 359:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2394
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2400
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 361:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2405
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			index := a.Index
			if index == "" {
				index = b.Index
			} else if b.Index != "" {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			noIndexJoin := a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = &IndexHints{Index: index, NoIndexJoin: noIndexJoin}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2425
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 363:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2429
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 364:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2433
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2440
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), Hints: sqlDollar[2].union.indexHints(), As: sqlDollar[3].union.aliasClause()}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2444
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, As: sqlDollar[2].union.aliasClause()}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2448
		{
			unimplemented()
		}
	case 369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2466
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 370:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2470
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2474
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2478
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2482
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astNaturalJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr()}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2486
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astNaturalJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2492
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: NameList(sqlDollar[4].union.strs())}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2496
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2500
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: NameList(sqlDollar[3].union.strs())}
		}
	case 378:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2504
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2511
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2517
		{
			sqlVAL.str = astFullJoin
		}
	case 382:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2521
		{
			sqlVAL.str = astLeftJoin
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2525
		{
			sqlVAL.str = astRightJoin
		}
	case 384:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2529
		{
			sqlVAL.str = astInnerJoin
		}
	case 385:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2535
		{
		}
	case 386:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2536
		{
		}
	case 387:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2547
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: NameList(sqlDollar[3].union.strs())}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2551
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2557
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 390:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2561
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2565
		{
			sqlVAL.union.val = sqlDollar[2].union.qname()
		}
	case 392:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2569
		{
			sqlVAL.union.val = sqlDollar[3].union.qname()
		}
	case 393:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2575
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2579
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 395:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2592
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname()}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2596
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2600
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2606
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 399:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2610
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 400:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2622
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 401:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2626
		{
			unimplementedWithIssue(2115)
		}
	case 402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2627
		{
			unimplementedWithIssue(2115)
		}
	case 403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2630
		{
			unimplementedWithIssue(2115)
		}
	case 404:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2631
		{
			unimplementedWithIssue(2115)
		}
	case 405:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2632
		{
		}
	case 411:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2640
		{
			unimplemented()
		}
	case 412:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2642
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 413:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2646
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 414:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2650
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 415:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2654
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 416:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2657
		{
			unimplementedWithIssue(4491)
		}
	case 421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2676
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2685
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2699
		{
			sqlVAL.union.val = nil
		}
	case 424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2706
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 425:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2710
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2714
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 427:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2718
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 428:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2722
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 429:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2726
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 430:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2730
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newFloatColType(int(prec))
		}
	case 431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2739
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 432:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2743
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2752
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2761
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2770
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2774
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 437:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2780
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 438:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2784
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2802
		{
			n, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newIntBitType(int(n))
		}
	case 444:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2813
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 449:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2829
		{
			n, err := sqlDollar[3].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2845
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 451:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2851
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 452:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2855
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 453:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2859
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 454:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2863
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 455:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2868
		{
		}
	case 456:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2869
		{
		}
	case 457:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2874
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 458:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2878
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 459:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2882
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 460:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2886
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2891
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 462:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2896
		{
			unimplemented()
		}
	case 463:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2897
		{
			unimplemented()
		}
	case 464:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2898
		{
			unimplemented()
		}
	case 465:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2899
		{
			unimplemented()
		}
	case 466:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2900
		{
			unimplemented()
		}
	case 467:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2901
		{
			unimplemented()
		}
	case 468:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2902
		{
			unimplemented()
		}
	case 469:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2903
		{
			unimplemented()
		}
	case 470:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2904
		{
			unimplemented()
		}
	case 471:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2905
		{
			unimplemented()
		}
	case 472:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2906
		{
			unimplemented()
		}
	case 473:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2907
		{
			unimplemented()
		}
	case 474:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2908
		{
			unimplemented()
		}
	case 475:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2909
		{
		}
	case 476:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2912
		{
			unimplemented()
		}
	case 477:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2913
		{
			unimplemented()
		}
	case 479:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2937
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2940
		{
			unimplemented()
		}
	case 481:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2941
		{
			unimplemented()
		}
	case 482:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2950
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2954
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2958
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2962
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2966
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2970
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2974
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2978
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2982
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2986
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2990
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2994
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2998
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3002
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3006
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3010
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3014
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3018
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3022
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3026
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3030
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3034
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3038
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3042
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3046
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3050
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3054
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3058
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3062
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3066
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3070
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3073
		{
			unimplemented()
		}
	case 514:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3075
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3079
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3083
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3087
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3091
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3095
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3099
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3103
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3107
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3111
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3115
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3119
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3123
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3127
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3131
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3135
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3152
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3156
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3160
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3164
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3168
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3172
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3176
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3180
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3184
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3188
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3192
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3196
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3200
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3204
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3208
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3212
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3216
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3220
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3224
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3228
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3232
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3236
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3240
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3244
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3248
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3252
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3264
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 559:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3269
		{
			sqlVAL.union.val = ValArg{Name: sqlDollar[1].str}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3273
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3279
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3283
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3287
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3293
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 567:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3297
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 568:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3301
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 569:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3309
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname()}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3313
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3316
		{
			unimplemented()
		}
	case 572:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3317
		{
			unimplemented()
		}
	case 573:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3319
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Type: All, Exprs: sqlDollar[4].union.exprs()}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3323
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Type: Distinct, Exprs: sqlDollar[4].union.exprs()}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3327
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Exprs: Exprs{StarExpr()}}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3340
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 577:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3344
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 578:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3353
		{
			unimplemented()
		}
	case 579:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3354
		{
			unimplemented()
		}
	case 580:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3358
		{
			unimplemented()
		}
	case 581:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3360
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3364
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3368
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3372
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3375
		{
			unimplemented()
		}
	case 586:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3376
		{
			unimplemented()
		}
	case 587:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3377
		{
			unimplemented()
		}
	case 588:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3378
		{
			unimplemented()
		}
	case 589:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3380
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3384
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3388
		{
			sqlVAL.union.val = &OverlayExpr{FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3392
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "STRPOS"}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3396
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3399
		{
			unimplemented()
		}
	case 595:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3401
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3405
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "LTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3409
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "RTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3413
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3417
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3421
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3425
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3429
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3433
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3437
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3443
		{
			unimplemented()
		}
	case 606:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3444
		{
		}
	case 607:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3447
		{
			unimplemented()
		}
	case 608:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3448
		{
		}
	case 609:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3452
		{
			unimplemented()
		}
	case 610:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3453
		{
		}
	case 611:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3456
		{
			unimplemented()
		}
	case 612:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3457
		{
			unimplemented()
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3460
		{
			unimplemented()
		}
	case 614:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3463
		{
			unimplemented()
		}
	case 615:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3464
		{
			unimplemented()
		}
	case 616:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3465
		{
		}
	case 617:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3469
		{
			unimplemented()
		}
	case 618:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3480
		{
			unimplemented()
		}
	case 619:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3481
		{
		}
	case 620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3484
		{
			unimplemented()
		}
	case 621:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3485
		{
		}
	case 622:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3493
		{
			unimplemented()
		}
	case 623:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3494
		{
			unimplemented()
		}
	case 624:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3495
		{
		}
	case 625:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3498
		{
			unimplemented()
		}
	case 626:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3499
		{
			unimplemented()
		}
	case 627:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3505
		{
			unimplemented()
		}
	case 628:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3506
		{
			unimplemented()
		}
	case 629:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3507
		{
			unimplemented()
		}
	case 630:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3508
		{
			unimplemented()
		}
	case 631:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3509
		{
			unimplemented()
		}
	case 632:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3520
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3524
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3528
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3534
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3538
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3544
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3585
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3589
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 640:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3595
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3599
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3605
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3609
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3613
		{
			sqlVAL.union.val = &Array{nil}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3619
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3623
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 647:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3629
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3651
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3655
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3661
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 658:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3668
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3672
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 660:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3689
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3693
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3697
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3701
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3705
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 665:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3709
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 666:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3715
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 667:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3721
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 668:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3727
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 669:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3731
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 670:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3735
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 671:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3741
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3745
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3756
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3763
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3767
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 676:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3773
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3779
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 678:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3783
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 680:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3790
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 681:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3796
		{
			sqlVAL.union.val = sqlDollar[1].union.indirectElem()
		}
	case 682:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3800
		{
			sqlVAL.union.val = sqlDollar[1].union.indirectElem()
		}
	case 683:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3804
		{
			sqlVAL.union.val = &ArrayIndirection{Begin: sqlDollar[2].union.expr()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3808
		{
			sqlVAL.union.val = &ArrayIndirection{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr()}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3814
		{
			sqlVAL.union.val = NameIndirection(sqlDollar[2].str)
		}
	case 686:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3820
		{
			sqlVAL.union.val = qualifiedStar
		}
	case 687:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3826
		{
			sqlVAL.union.val = Indirection{sqlDollar[1].union.indirectElem()}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3830
		{
			sqlVAL.union.val = append(sqlDollar[1].union.indirect(), sqlDollar[2].union.indirectElem())
		}
	case 689:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3835
		{
		}
	case 690:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3836
		{
		}
	case 692:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3845
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3851
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3855
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 695:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3864
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 696:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3870
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3874
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 698:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3880
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3889
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3893
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3897
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 702:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3905
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3909
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 704:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3915
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3919
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 706:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3925
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3929
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 708:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3940
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3944
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3950
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.qname(), Index: Name(sqlDollar[3].str)}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3961
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3965
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: Indirection{sqlDollar[2].union.indirectElem()}}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3969
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: Indirection{sqlDollar[2].union.indirectElem()}}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3973
		{
			sqlVAL.union.val = &QualifiedName{Indirect: Indirection{unqualifiedStar}}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3979
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3983
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 717:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3989
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 718:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3992
		{
		}
	case 719:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4002
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4006
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4013
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 722:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4017
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 723:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4021
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4025
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4028
		{
			unimplemented()
		}
	case 726:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4030
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4034
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4038
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[5].str}, Type: sqlDollar[1].union.colType()}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4042
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 730:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4046
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 731:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4050
		{
			sqlVAL.union.val = DNull
		}
	case 733:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4057
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 734:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4061
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4083
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
