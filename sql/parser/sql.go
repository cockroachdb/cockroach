// Code generated by go yacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"go/constant"
	"go/token"

	"github.com/pkg/errors"

	"github.com/cockroachdb/cockroach/sql/privilege"
	"github.com/cockroachdb/cockroach/util"
)

var errUnimplemented = errors.New("unimplemented")

func unimplemented() {
	panic(errUnimplemented)
}

func unimplementedWithIssue(issue int) {
	panic(util.UnimplementedWithIssueErrorf(issue, ""))
}

//line sql.y:44

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in two forms, depending on the
// type of the value being accessed. Values and pointers are directly
// type asserted from the empty interface, meaning that they will panic
// if the type assertion is incorrect. Interfaces are handled differently
// because a nil instance of an interface inserted into the empty interface
// becomes a nil instance of the empty interface and therefore will fail a
// direct type assertion. Instead, a guarded type assertion must be used,
// which returns nil if the type assertion fails.
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	return u.val.(*StrVal)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	if namePart, ok := u.val.(NamePart); ok {
		return namePart
	}
	return nil
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionName() FunctionName {
	return u.val.(FunctionName)
}
func (u *sqlSymUnion) normalizableFunctionName() NormalizableFunctionName {
	return NormalizableFunctionName{u.val.(FunctionName)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	if selectStmt, ok := u.val.(*Select); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	if selectStmt, ok := u.val.(SelectStatement); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	if constraintDef, ok := u.val.(ConstraintTableDef); ok {
		return constraintDef
	}
	return nil
}
func (u *sqlSymUnion) tblDef() TableDef {
	if tblDef, ok := u.val.(TableDef); ok {
		return tblDef
	}
	return nil
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	if colQual, ok := u.val.(NamedColumnQualification); ok {
		return colQual
	}
	return NamedColumnQualification{}
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	if colQual, ok := u.val.(ColumnQualification); ok {
		return colQual
	}
	return nil
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retExprs() ReturningExprs {
	return ReturningExprs(u.val.(SelectExprs))
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	if tblExpr, ok := u.val.(TableExpr); ok {
		return tblExpr
	}
	return nil
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	if joinCond, ok := u.val.(JoinCond); ok {
		return joinCond
	}
	return nil
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	if alterTableCmd, ok := u.val.(AlterTableCmd); ok {
		return alterTableCmd
	}
	return nil
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}

//line sql.y:318
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BEGIN = 57376
const BETWEEN = 57377
const BIGINT = 57378
const BIGSERIAL = 57379
const BIT = 57380
const BLOB = 57381
const BOOL = 57382
const BOOLEAN = 57383
const BOTH = 57384
const BY = 57385
const BYTEA = 57386
const BYTES = 57387
const CASCADE = 57388
const CASE = 57389
const CAST = 57390
const CHAR = 57391
const CHARACTER = 57392
const CHARACTERISTICS = 57393
const CHECK = 57394
const COALESCE = 57395
const COLLATE = 57396
const COLLATION = 57397
const COLUMN = 57398
const COLUMNS = 57399
const COMMIT = 57400
const COMMITTED = 57401
const CONCAT = 57402
const CONFLICT = 57403
const CONSTRAINT = 57404
const CONSTRAINTS = 57405
const COPY = 57406
const COVERING = 57407
const CREATE = 57408
const CROSS = 57409
const CUBE = 57410
const CURRENT = 57411
const CURRENT_CATALOG = 57412
const CURRENT_DATE = 57413
const CURRENT_ROLE = 57414
const CURRENT_TIME = 57415
const CURRENT_TIMESTAMP = 57416
const CURRENT_USER = 57417
const CYCLE = 57418
const DATA = 57419
const DATABASE = 57420
const DATABASES = 57421
const DATE = 57422
const DAY = 57423
const DEC = 57424
const DECIMAL = 57425
const DEFAULT = 57426
const DEALLOCATE = 57427
const DEFERRABLE = 57428
const DELETE = 57429
const DESC = 57430
const DISTINCT = 57431
const DO = 57432
const DOUBLE = 57433
const DROP = 57434
const ELSE = 57435
const ENCODING = 57436
const END = 57437
const ESCAPE = 57438
const EXCEPT = 57439
const EXISTS = 57440
const EXECUTE = 57441
const EXPLAIN = 57442
const EXTRACT = 57443
const FALSE = 57444
const FAMILY = 57445
const FETCH = 57446
const FILTER = 57447
const FIRST = 57448
const FLOAT = 57449
const FLOORDIV = 57450
const FOLLOWING = 57451
const FOR = 57452
const FORCE_INDEX = 57453
const FOREIGN = 57454
const FROM = 57455
const FULL = 57456
const GRANT = 57457
const GRANTS = 57458
const GREATEST = 57459
const GROUP = 57460
const GROUPING = 57461
const HAVING = 57462
const HIGH = 57463
const HOUR = 57464
const IF = 57465
const IFNULL = 57466
const ILIKE = 57467
const IN = 57468
const INTERLEAVE = 57469
const INDEX = 57470
const INDEXES = 57471
const INITIALLY = 57472
const INNER = 57473
const INSERT = 57474
const INT = 57475
const INT8 = 57476
const INT64 = 57477
const INTEGER = 57478
const INTERSECT = 57479
const INTERVAL = 57480
const INTO = 57481
const IS = 57482
const ISOLATION = 57483
const JOIN = 57484
const KEY = 57485
const KEYS = 57486
const LATERAL = 57487
const LEADING = 57488
const LEAST = 57489
const LEFT = 57490
const LEVEL = 57491
const LIKE = 57492
const LIMIT = 57493
const LOCAL = 57494
const LOCALTIME = 57495
const LOCALTIMESTAMP = 57496
const LOW = 57497
const LSHIFT = 57498
const MATCH = 57499
const MINUTE = 57500
const MONTH = 57501
const NAME = 57502
const NAMES = 57503
const NATURAL = 57504
const NEXT = 57505
const NO = 57506
const NO_INDEX_JOIN = 57507
const NORMAL = 57508
const NOT = 57509
const NOTHING = 57510
const NULL = 57511
const NULLIF = 57512
const NULLS = 57513
const NUMERIC = 57514
const OF = 57515
const OFF = 57516
const OFFSET = 57517
const ON = 57518
const ONLY = 57519
const OR = 57520
const ORDER = 57521
const ORDINALITY = 57522
const OUT = 57523
const OUTER = 57524
const OVER = 57525
const OVERLAPS = 57526
const OVERLAY = 57527
const PARENT = 57528
const PARTIAL = 57529
const PARTITION = 57530
const PLACING = 57531
const POSITION = 57532
const PRECEDING = 57533
const PRECISION = 57534
const PREPARE = 57535
const PRIMARY = 57536
const PRIORITY = 57537
const RANGE = 57538
const READ = 57539
const REAL = 57540
const RECURSIVE = 57541
const REF = 57542
const REFERENCES = 57543
const RENAME = 57544
const REPEATABLE = 57545
const RELEASE = 57546
const RESTRICT = 57547
const RETURNING = 57548
const REVOKE = 57549
const RIGHT = 57550
const ROLLBACK = 57551
const ROLLUP = 57552
const ROW = 57553
const ROWS = 57554
const RSHIFT = 57555
const SAVEPOINT = 57556
const SEARCH = 57557
const SECOND = 57558
const SELECT = 57559
const SERIAL = 57560
const SERIALIZABLE = 57561
const SESSION = 57562
const SESSION_USER = 57563
const SET = 57564
const SHOW = 57565
const SIMILAR = 57566
const SIMPLE = 57567
const SMALLINT = 57568
const SMALLSERIAL = 57569
const SNAPSHOT = 57570
const SOME = 57571
const SPLIT = 57572
const SQL = 57573
const START = 57574
const STDIN = 57575
const STRICT = 57576
const STRING = 57577
const STORING = 57578
const SUBSTRING = 57579
const SYMMETRIC = 57580
const SYSTEM = 57581
const TABLE = 57582
const TABLES = 57583
const TEXT = 57584
const THEN = 57585
const TIME = 57586
const TIMESTAMP = 57587
const TIMESTAMPTZ = 57588
const TO = 57589
const TRAILING = 57590
const TRANSACTION = 57591
const TREAT = 57592
const TRIM = 57593
const TRUE = 57594
const TRUNCATE = 57595
const TYPE = 57596
const UNBOUNDED = 57597
const UNCOMMITTED = 57598
const UNION = 57599
const UNIQUE = 57600
const UNKNOWN = 57601
const UPDATE = 57602
const UPSERT = 57603
const USER = 57604
const USING = 57605
const VALID = 57606
const VALIDATE = 57607
const VALUE = 57608
const VALUES = 57609
const VARCHAR = 57610
const VARIADIC = 57611
const VIEW = 57612
const VARYING = 57613
const WHEN = 57614
const WHERE = 57615
const WINDOW = 57616
const WITH = 57617
const WITHIN = 57618
const WITHOUT = 57619
const YEAR = 57620
const ZONE = 57621
const NOT_LA = 57622
const WITH_LA = 57623
const AS_LA = 57624
const POSTFIXOP = 57625
const UMINUS = 57626

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPLAIN",
	"EXTRACT",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HOUR",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:4828

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 26,
	303, 26,
	-2, 370,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 43,
	1, 345,
	176, 345,
	206, 345,
	301, 345,
	303, 345,
	-2, 355,
	-1, 56,
	1, 348,
	176, 348,
	206, 348,
	301, 348,
	303, 348,
	-2, 354,
	-1, 65,
	1, 26,
	303, 26,
	-2, 370,
	-1, 282,
	1, 170,
	303, 170,
	-2, 868,
	-1, 316,
	151, 380,
	175, 380,
	-2, 351,
	-1, 319,
	151, 379,
	175, 379,
	-2, 349,
	-1, 450,
	151, 379,
	175, 379,
	-2, 352,
	-1, 506,
	300, 807,
	-2, 800,
	-1, 507,
	300, 808,
	-2, 801,
	-1, 513,
	5, 515,
	300, 515,
	-2, 958,
	-1, 536,
	5, 481,
	-2, 933,
	-1, 537,
	5, 509,
	300, 509,
	-2, 935,
	-1, 538,
	5, 489,
	-2, 936,
	-1, 539,
	5, 488,
	-2, 937,
	-1, 540,
	5, 509,
	300, 509,
	-2, 940,
	-1, 541,
	5, 509,
	300, 509,
	-2, 941,
	-1, 542,
	5, 510,
	-2, 944,
	-1, 543,
	5, 475,
	-2, 945,
	-1, 544,
	5, 475,
	-2, 946,
	-1, 545,
	5, 491,
	-2, 949,
	-1, 546,
	5, 476,
	-2, 954,
	-1, 547,
	5, 477,
	-2, 955,
	-1, 548,
	5, 478,
	-2, 956,
	-1, 549,
	5, 479,
	-2, 957,
	-1, 550,
	5, 475,
	-2, 961,
	-1, 551,
	5, 482,
	-2, 966,
	-1, 552,
	5, 480,
	-2, 969,
	-1, 553,
	5, 507,
	300, 507,
	-2, 971,
	-1, 554,
	5, 511,
	-2, 974,
	-1, 555,
	5, 513,
	-2, 975,
	-1, 556,
	5, 506,
	300, 506,
	-2, 979,
	-1, 884,
	97, 355,
	137, 355,
	151, 355,
	175, 355,
	179, 355,
	257, 355,
	-2, 627,
	-1, 892,
	300, 785,
	-2, 774,
	-1, 1090,
	13, 0,
	14, 0,
	15, 0,
	283, 0,
	284, 0,
	285, 0,
	-2, 550,
	-1, 1091,
	13, 0,
	14, 0,
	15, 0,
	283, 0,
	284, 0,
	285, 0,
	-2, 551,
	-1, 1092,
	13, 0,
	14, 0,
	15, 0,
	283, 0,
	284, 0,
	285, 0,
	-2, 552,
	-1, 1096,
	13, 0,
	14, 0,
	15, 0,
	283, 0,
	284, 0,
	285, 0,
	-2, 556,
	-1, 1097,
	13, 0,
	14, 0,
	15, 0,
	283, 0,
	284, 0,
	285, 0,
	-2, 557,
	-1, 1098,
	13, 0,
	14, 0,
	15, 0,
	283, 0,
	284, 0,
	285, 0,
	-2, 558,
	-1, 1101,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	280, 0,
	-2, 563,
	-1, 1107,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	280, 0,
	-2, 565,
	-1, 1110,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	280, 0,
	-2, 570,
	-1, 1111,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	280, 0,
	-2, 571,
	-1, 1112,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	280, 0,
	-2, 572,
	-1, 1137,
	184, 698,
	-2, 701,
	-1, 1308,
	97, 355,
	137, 355,
	151, 355,
	175, 355,
	179, 355,
	257, 355,
	-2, 428,
	-1, 1312,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	280, 0,
	-2, 564,
	-1, 1313,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	280, 0,
	-2, 566,
	-1, 1318,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	280, 0,
	-2, 567,
	-1, 1336,
	184, 697,
	-2, 700,
	-1, 1499,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	280, 0,
	-2, 568,
	-1, 1504,
	140, 0,
	-2, 582,
	-1, 1512,
	184, 699,
	-2, 702,
	-1, 1546,
	13, 0,
	14, 0,
	15, 0,
	283, 0,
	284, 0,
	285, 0,
	-2, 608,
	-1, 1547,
	13, 0,
	14, 0,
	15, 0,
	283, 0,
	284, 0,
	285, 0,
	-2, 609,
	-1, 1548,
	13, 0,
	14, 0,
	15, 0,
	283, 0,
	284, 0,
	285, 0,
	-2, 610,
	-1, 1552,
	13, 0,
	14, 0,
	15, 0,
	283, 0,
	284, 0,
	285, 0,
	-2, 614,
	-1, 1553,
	13, 0,
	14, 0,
	15, 0,
	283, 0,
	284, 0,
	285, 0,
	-2, 615,
	-1, 1554,
	13, 0,
	14, 0,
	15, 0,
	283, 0,
	284, 0,
	285, 0,
	-2, 616,
	-1, 1658,
	140, 0,
	-2, 583,
	-1, 1661,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	280, 0,
	-2, 586,
	-1, 1662,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	280, 0,
	-2, 588,
	-1, 1749,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	280, 0,
	-2, 587,
	-1, 1750,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	280, 0,
	-2, 589,
	-1, 1757,
	140, 0,
	-2, 617,
	-1, 1802,
	140, 0,
	-2, 618,
	-1, 1854,
	35, 0,
	125, 0,
	150, 0,
	224, 0,
	280, 0,
	-2, 932,
}

const sqlNprod = 1074
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 24398

var sqlAct = [...]int{

	507, 1834, 1853, 1876, 1466, 1701, 1808, 1835, 1852, 1836,
	1062, 977, 969, 1724, 1523, 700, 1737, 1040, 1583, 1650,
	809, 505, 1624, 1644, 480, 283, 1044, 354, 72, 592,
	73, 504, 497, 887, 557, 1637, 1392, 72, 72, 72,
	1478, 813, 72, 1305, 1039, 72, 1623, 42, 1488, 320,
	1071, 1235, 69, 72, 1391, 1304, 1339, 889, 1295, 816,
	72, 72, 572, 1043, 72, 341, 978, 72, 72, 72,
	1008, 1183, 938, 947, 1289, 1123, 1147, 469, 1070, 1120,
	831, 1001, 1034, 569, 764, 437, 588, 574, 339, 748,
	1074, 346, 349, 470, 479, 355, 438, 356, 919, 745,
	923, 1072, 687, 775, 353, 373, 325, 366, 992, 9,
	327, 55, 369, 971, 319, 25, 8, 1047, 14, 837,
	6, 7, 330, 453, 280, 454, 4, 242, 56, 452,
	270, 744, 766, 762, 261, 680, 57, 368, 362, 457,
	328, 1744, 689, 689, 1745, 251, 55, 689, 970, 1005,
	1868, 249, 246, 1066, 248, 1850, 245, 250, 1723, 1011,
	1842, 1832, 247, 1066, 998, 338, 1827, 324, 344, 1066,
	1804, 1798, 324, 998, 1066, 18, 55, 1788, 1778, 1246,
	1723, 1066, 1751, 308, 317, 998, 1748, 1303, 1734, 1066,
	1006, 1723, 316, 1731, 1186, 1722, 1066, 701, 1723, 1706,
	1705, 332, 1066, 1066, 1683, 347, 61, 1011, 1247, 1663,
	1660, 244, 1011, 998, 1610, 1609, 1595, 1011, 1011, 1066,
	1792, 1508, 1452, 974, 1011, 966, 1007, 1004, 584, 63,
	1362, 1363, 1726, 1380, 1381, 1382, 838, 840, 841, 72,
	72, 72, 72, 1446, 376, 1409, 966, 1407, 1410, 1406,
	1011, 1405, 1011, 839, 1011, 1336, 64, 72, 1011, 1274,
	843, 1334, 1066, 339, 59, 349, 1335, 371, 1333, 1292,
	60, 1559, 72, 1011, 377, 72, 72, 1511, 378, 1272,
	1377, 842, 840, 841, 1009, 1293, 936, 1067, 1275, 58,
	1066, 325, 1338, 1020, 1066, 1010, 1011, 1011, 1011, 743,
	997, 690, 690, 998, 1013, 843, 690, 1292, 72, 1131,
	72, 965, 72, 72, 966, 72, 935, 695, 357, 934,
	696, 464, 358, 1061, 358, 1028, 842, 465, 1368, 804,
	72, 803, 756, 755, 339, 848, 402, 444, 446, 337,
	363, 72, 65, 789, 840, 841, 1003, 374, 422, 436,
	870, 871, 872, 72, 357, 1851, 61, 1615, 358, 595,
	72, 72, 72, 410, 72, 566, 451, 843, 1002, 874,
	1848, 1841, 1799, 450, 411, 61, 1378, 589, 1732, 63,
	848, 590, 1688, 858, 339, 681, 681, 1684, 842, 596,
	840, 841, 1676, 597, 857, 72, 351, 1620, 63, 1246,
	693, 688, 72, 564, 72, 807, 64, 1675, 1674, 1669,
	1668, 443, 563, 843, 59, 376, 376, 1667, 1621, 339,
	60, 1574, 1569, 595, 72, 64, 72, 72, 72, 72,
	72, 72, 72, 1379, 842, 1568, 72, 1567, 441, 973,
	859, 72, 848, 1514, 838, 377, 377, 1497, 72, 378,
	378, 1477, 790, 596, 1456, 1414, 317, 597, 58, 867,
	875, 363, 460, 461, 316, 1411, 72, 811, 1399, 72,
	466, 1390, 692, 1361, 1358, 1356, 357, 1344, 1343, 812,
	358, 1614, 1277, 1273, 865, 1200, 835, 1154, 848, 1153,
	858, 464, 895, 1128, 463, 1525, 697, 682, 679, 1818,
	1791, 1770, 1768, 1374, 1375, 1376, 1759, 1373, 1370, 1371,
	1372, 1364, 1365, 1366, 1367, 1369, 1741, 852, 844, 845,
	846, 847, 849, 1729, 869, 1720, 892, 1413, 1698, 1681,
	1653, 325, 1631, 1503, 1496, 752, 1474, 751, 1472, 1471,
	1469, 1454, 1426, 1425, 559, 806, 1389, 859, 791, 779,
	786, 795, 796, 797, 798, 799, 1352, 794, 868, 1351,
	802, 840, 841, 844, 845, 846, 847, 849, 72, 869,
	1330, 805, 840, 841, 1326, 1125, 72, 1261, 821, 820,
	72, 819, 1129, 352, 72, 72, 317, 1227, 833, 317,
	317, 1226, 933, 742, 827, 843, 1214, 828, 829, 1213,
	1193, 1152, 941, 754, 339, 842, 1065, 924, 349, 1362,
	1363, 927, 931, 917, 866, 916, 842, 915, 914, 913,
	912, 853, 850, 851, 852, 844, 845, 846, 847, 849,
	911, 869, 910, 471, 471, 909, 499, 252, 908, 921,
	922, 907, 570, 906, 905, 925, 840, 841, 904, 952,
	954, 928, 439, 903, 1214, 902, 893, 591, 891, 58,
	808, 342, 468, 408, 398, 396, 1619, 890, 1255, 843,
	1254, 840, 841, 846, 847, 849, 580, 869, 886, 565,
	54, 957, 1746, 932, 72, 1618, 72, 72, 1248, 72,
	842, 252, 72, 944, 72, 72, 857, 376, 1056, 1412,
	416, 929, 1311, 1362, 1363, 930, 34, 1368, 981, 432,
	417, 900, 1638, 349, 35, 970, 349, 1526, 314, 987,
	371, 961, 1347, 1148, 920, 1242, 273, 377, 1420, 1814,
	558, 378, 1865, 1864, 54, 1603, 1777, 1019, 307, 565,
	306, 301, 302, 1714, 848, 1268, 1713, 72, 72, 784,
	783, 1440, 777, 772, 1417, 823, 825, 1416, 1314, 575,
	34, 576, 832, 1260, 1259, 1015, 1258, 1257, 35, 1108,
	1012, 963, 960, 440, 878, 879, 880, 881, 882, 1739,
	1197, 1196, 940, 885, 1079, 435, 512, 896, 1437, 394,
	595, 1641, 858, 310, 72, 1169, 976, 1441, 940, 986,
	374, 1368, 990, 898, 939, 251, 55, 988, 72, 72,
	55, 249, 246, 72, 248, 995, 245, 250, 994, 1033,
	596, 996, 247, 989, 597, 925, 985, 928, 1776, 787,
	577, 61, 339, 1453, 414, 1703, 323, 922, 921, 473,
	72, 1122, 1022, 72, 1122, 1016, 1014, 1017, 869, 859,
	1068, 1231, 1021, 239, 63, 586, 972, 1816, 972, 869,
	683, 1873, 1009, 575, 339, 576, 68, 235, 1078, 1059,
	1060, 244, 415, 1884, 582, 993, 322, 595, 1428, 1838,
	311, 64, 1024, 736, 689, 61, 1879, 1236, 1026, 59,
	1037, 1229, 1366, 1367, 1369, 60, 1444, 788, 315, 585,
	1036, 1148, 581, 240, 1027, 1864, 1126, 596, 63, 1038,
	312, 597, 236, 1025, 58, 590, 67, 1159, 324, 561,
	590, 560, 1005, 853, 850, 851, 852, 844, 845, 846,
	847, 849, 1069, 869, 577, 64, 1362, 1363, 72, 72,
	72, 730, 1267, 59, 72, 1199, 1323, 72, 1135, 60,
	1829, 1461, 1839, 72, 72, 72, 72, 72, 869, 1321,
	1771, 72, 1203, 1006, 72, 1240, 1830, 72, 243, 1244,
	1207, 1269, 413, 1435, 72, 918, 72, 1144, 1127, 1755,
	1721, 1458, 948, 72, 1364, 1365, 1366, 1367, 1369, 937,
	1840, 1233, 72, 1350, 1162, 1236, 321, 883, 589, 1007,
	1004, 405, 407, 578, 1877, 1872, 1704, 589, 1429, 1009,
	412, 433, 1489, 72, 72, 241, 339, 1459, 1201, 72,
	1224, 325, 324, 1238, 1202, 575, 1319, 576, 66, 376,
	1324, 1837, 1885, 707, 1368, 1163, 778, 773, 1076, 1077,
	238, 237, 951, 690, 1225, 1878, 455, 1316, 1863, 72,
	1121, 72, 1861, 72, 785, 72, 1636, 1009, 72, 377,
	1241, 1054, 1880, 378, 413, 434, 425, 72, 403, 1249,
	456, 1164, 1161, 401, 72, 1009, 72, 456, 1280, 1282,
	1482, 1708, 1378, 1707, 1679, 1132, 1136, 1871, 1139, 1250,
	1276, 1251, 1278, 1252, 1890, 1263, 577, 1696, 1765, 1419,
	339, 1265, 1210, 1264, 1178, 1266, 1206, 578, 1055, 1320,
	1190, 1191, 1192, 1270, 1271, 1555, 1322, 1118, 1602, 1003,
	818, 810, 1457, 325, 950, 1601, 1310, 729, 1809, 1165,
	1116, 455, 801, 259, 757, 1697, 1651, 1216, 471, 1379,
	1215, 1599, 1286, 1211, 1080, 1081, 1082, 1083, 1084, 1085,
	1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095,
	1096, 1097, 1098, 1099, 1100, 1101, 1309, 1107, 1680, 1109,
	1110, 1111, 1112, 325, 1287, 1105, 55, 262, 1647, 1889,
	1484, 995, 1317, 706, 994, 1315, 1294, 996, 949, 1337,
	1652, 1160, 509, 1556, 761, 1114, 1253, 1113, 267, 1557,
	1483, 1119, 412, 263, 1155, 1156, 573, 1167, 1600, 1177,
	1179, 1184, 1187, 1188, 1189, 72, 1372, 1364, 1365, 1366,
	1367, 1369, 325, 1346, 1598, 361, 264, 1279, 759, 1281,
	360, 322, 1424, 1298, 570, 447, 262, 1467, 1622, 760,
	1211, 993, 1479, 266, 1694, 1290, 1151, 72, 72, 1758,
	1301, 1678, 1396, 1397, 1398, 1393, 1502, 267, 1448, 1394,
	1298, 1296, 263, 1357, 1695, 1103, 1106, 1299, 1234, 578,
	1237, 981, 339, 72, 1415, 1325, 72, 1301, 72, 1232,
	1115, 1297, 1018, 901, 72, 264, 1422, 1117, 1487, 964,
	1102, 431, 430, 72, 1299, 1646, 826, 72, 1436, 429,
	428, 1473, 266, 72, 595, 427, 426, 72, 423, 72,
	359, 1262, 793, 1449, 1443, 1224, 732, 339, 731, 1470,
	1329, 339, 1447, 1432, 1331, 1434, 1450, 1300, 265, 1460,
	1462, 1463, 1451, 1493, 596, 1150, 1341, 1342, 597, 1468,
	1833, 1806, 1505, 1481, 1591, 1476, 1580, 1485, 1490, 1491,
	1433, 72, 1431, 1418, 1300, 1283, 1486, 1057, 1492, 1052,
	991, 832, 694, 691, 1104, 686, 583, 579, 1520, 1388,
	817, 268, 1715, 1865, 419, 458, 1592, 781, 1063, 335,
	1401, 1717, 1645, 3, 956, 730, 730, 265, 940, 940,
	1516, 1517, 1518, 1513, 955, 953, 1445, 1726, 1773, 1801,
	300, 1480, 1312, 1313, 462, 1362, 1363, 959, 1318, 1527,
	958, 1793, 1634, 258, 1532, 1053, 1051, 72, 72, 72,
	975, 1438, 1439, 834, 753, 1000, 72, 72, 1562, 699,
	268, 1332, 72, 1887, 72, 1064, 72, 72, 72, 1888,
	1340, 72, 459, 1596, 1597, 1579, 336, 1563, 1348, 343,
	303, 304, 1353, 420, 269, 1575, 1576, 1362, 1363, 1587,
	1606, 1588, 840, 841, 1294, 1030, 1029, 1464, 1455, 1408,
	1256, 1198, 72, 72, 885, 1195, 1194, 707, 707, 1145,
	1184, 1184, 1184, 1031, 72, 72, 1590, 1794, 72, 1632,
	730, 1629, 1665, 1593, 1519, 1284, 1629, 72, 72, 1032,
	1617, 1628, 1630, 1368, 894, 309, 1628, 1630, 339, 339,
	1702, 1298, 339, 1423, 1654, 260, 792, 1633, 424, 1659,
	1828, 1635, 1612, 1671, 1349, 1509, 72, 1736, 1301, 1754,
	1149, 899, 33, 1626, 1642, 1643, 471, 485, 1648, 1296,
	1581, 1655, 1421, 730, 471, 1299, 1046, 1045, 570, 598,
	1589, 1378, 1529, 1530, 782, 771, 508, 765, 774, 1297,
	1534, 1535, 1158, 562, 510, 704, 511, 705, 926, 1677,
	498, 729, 729, 702, 372, 1291, 979, 1146, 1345, 897,
	484, 72, 707, 72, 1560, 72, 72, 730, 490, 703,
	489, 1133, 395, 1566, 72, 1570, 481, 1649, 1302, 45,
	409, 278, 279, 1239, 1613, 1300, 1058, 1690, 1379, 822,
	1692, 1498, 1689, 492, 1499, 72, 1430, 313, 1700, 1359,
	397, 1176, 1616, 1168, 1166, 1504, 1157, 706, 706, 442,
	568, 980, 1716, 421, 1245, 707, 999, 72, 1262, 72,
	1727, 70, 467, 830, 334, 333, 1041, 1521, 72, 418,
	253, 254, 255, 1629, 72, 272, 758, 1531, 284, 1725,
	1533, 1735, 1023, 1628, 1630, 305, 272, 1740, 1767, 1209,
	1883, 1747, 339, 331, 331, 1640, 729, 70, 1730, 707,
	70, 70, 350, 1772, 1718, 1427, 1364, 1365, 1366, 1367,
	1369, 1813, 62, 1564, 1565, 72, 24, 1760, 1743, 22,
	21, 20, 1571, 1572, 1573, 19, 1769, 1711, 1712, 17,
	1763, 16, 15, 23, 72, 72, 1753, 13, 72, 12,
	11, 10, 72, 32, 31, 30, 29, 72, 1781, 729,
	28, 5, 706, 2, 1, 1783, 1764, 1789, 1785, 0,
	1790, 0, 72, 0, 471, 1629, 1782, 595, 1170, 0,
	0, 0, 1784, 590, 0, 1628, 1630, 0, 0, 1795,
	732, 732, 731, 731, 1796, 0, 0, 0, 325, 72,
	0, 72, 72, 729, 72, 1803, 1797, 596, 0, 1639,
	0, 597, 0, 0, 0, 706, 1819, 0, 1811, 0,
	0, 1817, 0, 72, 1822, 1823, 1812, 0, 0, 1815,
	1820, 1710, 1658, 0, 1800, 0, 1661, 1662, 1826, 1825,
	1733, 1664, 0, 1629, 0, 1666, 0, 72, 0, 72,
	0, 0, 1670, 1628, 1630, 0, 1673, 1849, 1845, 706,
	0, 1847, 0, 1843, 72, 0, 1846, 1821, 1824, 1858,
	0, 981, 0, 0, 1862, 1860, 0, 0, 0, 0,
	1866, 0, 70, 364, 70, 284, 1869, 1870, 1867, 1682,
	0, 0, 0, 0, 0, 732, 0, 731, 1882, 1881,
	399, 730, 0, 0, 1886, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 404, 0, 0, 284, 284,
	1891, 0, 0, 0, 0, 0, 0, 0, 0, 730,
	730, 1709, 0, 0, 0, 0, 0, 730, 730, 0,
	0, 0, 0, 0, 0, 0, 1327, 1328, 732, 0,
	731, 272, 0, 70, 1787, 284, 284, 1728, 448, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	730, 0, 0, 331, 0, 0, 1742, 0, 0, 0,
	0, 0, 0, 0, 70, 0, 1749, 1750, 0, 0,
	1170, 1170, 732, 707, 731, 0, 70, 1385, 1386, 1387,
	0, 0, 0, 70, 70, 70, 0, 684, 0, 0,
	0, 0, 840, 841, 0, 1762, 0, 0, 0, 0,
	0, 707, 707, 0, 0, 0, 1831, 0, 1766, 707,
	707, 0, 0, 0, 0, 843, 0, 0, 70, 0,
	0, 1170, 1170, 1170, 0, 749, 0, 749, 0, 0,
	570, 0, 0, 0, 0, 0, 842, 0, 0, 0,
	0, 0, 707, 703, 703, 0, 0, 284, 0, 749,
	284, 284, 284, 284, 284, 800, 0, 0, 730, 284,
	0, 0, 0, 0, 272, 0, 0, 729, 0, 0,
	0, 815, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 331,
	848, 0, 836, 0, 0, 729, 729, 0, 0, 0,
	0, 0, 0, 729, 729, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1500, 1501, 706, 1844, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 729, 0, 858, 1857,
	1857, 0, 0, 0, 0, 0, 0, 0, 703, 0,
	707, 706, 706, 0, 0, 0, 0, 0, 730, 706,
	706, 0, 0, 0, 1857, 1170, 1170, 0, 0, 0,
	1536, 1537, 1538, 1539, 1540, 1541, 1542, 1543, 1544, 1545,
	1546, 1547, 1548, 1549, 1550, 1551, 1552, 1553, 1554, 0,
	1558, 70, 706, 0, 0, 859, 0, 1857, 0, 945,
	0, 703, 0, 70, 486, 43, 0, 70, 962, 0,
	0, 0, 0, 0, 1170, 1170, 1170, 1170, 1170, 1170,
	1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170,
	1170, 1170, 1170, 0, 1170, 0, 730, 0, 1362, 1363,
	43, 1380, 1381, 1382, 729, 703, 0, 0, 0, 0,
	707, 0, 0, 0, 1657, 0, 732, 0, 731, 0,
	318, 0, 0, 326, 0, 0, 0, 840, 841, 0,
	43, 0, 0, 844, 845, 846, 847, 849, 0, 869,
	0, 0, 0, 0, 732, 732, 731, 731, 1377, 0,
	843, 0, 732, 732, 731, 731, 0, 0, 0, 0,
	706, 0, 0, 0, 0, 0, 0, 70, 0, 983,
	984, 842, 70, 0, 730, 70, 0, 284, 284, 0,
	0, 0, 0, 0, 0, 732, 0, 731, 707, 0,
	0, 0, 1591, 0, 1584, 0, 1368, 0, 0, 0,
	0, 0, 1582, 0, 729, 0, 1586, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1592, 848, 0, 0, 1383, 0,
	749, 836, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1585, 1378, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1699, 0,
	706, 0, 0, 0, 0, 0, 707, 0, 0, 0,
	0, 0, 0, 858, 0, 0, 0, 1035, 0, 0,
	0, 0, 729, 0, 0, 0, 0, 0, 0, 0,
	0, 70, 1042, 732, 0, 731, 836, 0, 0, 0,
	0, 1379, 1170, 0, 0, 0, 0, 1587, 326, 1588,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1362, 1363, 70, 0, 0, 284, 0, 0, 0,
	859, 0, 0, 0, 1590, 0, 0, 0, 706, 0,
	0, 1593, 0, 0, 1757, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	729, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1374, 1375, 1376, 0, 1373, 1370, 1371, 1372, 1364,
	1365, 1366, 1367, 1369, 0, 0, 0, 0, 1170, 703,
	0, 0, 318, 732, 0, 731, 0, 0, 1589, 0,
	0, 0, 0, 0, 853, 850, 851, 852, 844, 845,
	846, 847, 849, 0, 869, 0, 706, 703, 703, 1368,
	0, 70, 1204, 1205, 1802, 703, 703, 945, 0, 0,
	1212, 0, 0, 0, 0, 0, 1217, 1218, 1220, 1222,
	1223, 0, 0, 26, 1228, 0, 0, 1230, 0, 0,
	70, 0, 0, 0, 47, 0, 0, 70, 703, 1243,
	0, 0, 0, 0, 0, 0, 70, 1378, 1170, 0,
	0, 732, 0, 731, 0, 70, 0, 0, 49, 0,
	0, 0, 0, 0, 27, 0, 54, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1035, 749, 0, 0,
	0, 0, 1035, 0, 0, 38, 0, 0, 0, 0,
	0, 0, 34, 0, 0, 50, 0, 0, 0, 37,
	35, 0, 318, 0, 1379, 318, 318, 0, 0, 0,
	0, 0, 815, 0, 815, 39, 284, 0, 70, 0,
	0, 1285, 0, 0, 0, 0, 0, 0, 884, 732,
	1288, 731, 888, 0, 0, 0, 0, 1307, 0, 70,
	0, 0, 0, 0, 0, 0, 703, 840, 841, 0,
	860, 861, 862, 870, 871, 872, 0, 0, 0, 0,
	0, 0, 0, 863, 0, 0, 0, 0, 0, 0,
	843, 0, 874, 0, 0, 0, 0, 0, 1373, 1370,
	1371, 1372, 1364, 1365, 1366, 1367, 1369, 0, 0, 0,
	0, 842, 0, 36, 0, 0, 0, 857, 0, 0,
	0, 0, 0, 0, 52, 0, 0, 40, 0, 51,
	0, 0, 0, 0, 41, 0, 0, 61, 0, 0,
	0, 0, 44, 46, 0, 0, 0, 0, 0, 0,
	0, 0, 48, 0, 1362, 1363, 0, 1380, 1381, 1382,
	63, 0, 0, 0, 0, 848, 703, 840, 841, 0,
	1656, 0, 0, 53, 0, 0, 0, 0, 0, 0,
	0, 0, 867, 875, 0, 0, 0, 64, 0, 0,
	843, 0, 0, 0, 0, 59, 0, 873, 836, 0,
	0, 60, 0, 0, 1377, 0, 0, 865, 0, 0,
	0, 842, 0, 858, 0, 0, 0, 0, 0, 0,
	58, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	70, 70, 0, 0, 0, 864, 0, 0, 0, 0,
	0, 1362, 1363, 0, 703, 43, 0, 43, 0, 0,
	0, 0, 1368, 0, 0, 0, 1465, 0, 0, 945,
	43, 815, 1362, 1363, 43, 848, 0, 1475, 0, 0,
	859, 0, 0, 0, 0, 0, 70, 0, 0, 0,
	70, 868, 0, 0, 1383, 0, 1307, 0, 0, 0,
	1495, 1377, 1307, 0, 0, 0, 0, 0, 0, 0,
	1378, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 858, 0, 0, 0, 0, 0, 0,
	0, 0, 703, 0, 0, 0, 0, 1362, 1363, 0,
	1380, 1381, 1382, 0, 1524, 0, 0, 866, 0, 1368,
	854, 855, 856, 1507, 853, 850, 851, 852, 844, 845,
	846, 847, 849, 0, 869, 0, 967, 1379, 0, 0,
	1368, 0, 0, 0, 0, 968, 0, 0, 840, 841,
	859, 860, 861, 862, 870, 871, 872, 1377, 0, 0,
	0, 0, 0, 0, 863, 0, 0, 1378, 0, 0,
	0, 843, 0, 874, 0, 0, 0, 0, 0, 0,
	1577, 1578, 945, 0, 1073, 0, 0, 0, 1378, 836,
	836, 0, 842, 0, 0, 1604, 0, 1605, 857, 70,
	1607, 1608, 0, 0, 1611, 1368, 0, 1374, 1375, 1376,
	0, 1373, 1370, 1371, 1372, 1364, 1365, 1366, 1367, 1369,
	1124, 0, 0, 0, 1379, 850, 851, 852, 844, 845,
	846, 847, 849, 1625, 869, 836, 1042, 1383, 1625, 0,
	0, 0, 0, 0, 0, 1379, 848, 70, 70, 0,
	0, 70, 0, 1378, 0, 0, 0, 0, 0, 0,
	836, 1307, 0, 867, 875, 0, 0, 0, 0, 1362,
	1363, 0, 1380, 1381, 1382, 0, 0, 0, 873, 0,
	0, 0, 0, 0, 0, 1506, 0, 0, 865, 1672,
	0, 0, 0, 0, 858, 0, 0, 0, 1373, 1370,
	1371, 1372, 1364, 1365, 1366, 1367, 1369, 0, 0, 0,
	1379, 0, 0, 0, 0, 0, 864, 0, 326, 1377,
	1370, 1371, 1372, 1364, 1365, 1366, 1367, 1369, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 945, 0, 1691, 0, 284, 1693,
	0, 859, 0, 0, 0, 0, 0, 70, 0, 0,
	0, 0, 868, 0, 0, 0, 0, 1368, 0, 1362,
	1363, 0, 1380, 1381, 1382, 0, 0, 0, 836, 0,
	1374, 1375, 1376, 0, 1373, 1370, 1371, 1372, 1364, 1365,
	1366, 1367, 1369, 0, 0, 1625, 43, 0, 43, 1383,
	70, 0, 1738, 0, 0, 0, 0, 0, 0, 0,
	43, 70, 0, 0, 0, 1378, 0, 836, 866, 1377,
	1308, 854, 855, 856, 0, 853, 850, 851, 852, 844,
	845, 846, 847, 849, 0, 869, 0, 0, 0, 0,
	0, 0, 1685, 0, 0, 0, 0, 0, 0, 0,
	0, 1124, 0, 0, 0, 0, 0, 0, 815, 0,
	0, 0, 0, 0, 0, 285, 0, 1368, 0, 0,
	884, 0, 1379, 0, 0, 0, 0, 1774, 1775, 0,
	0, 1779, 0, 298, 0, 1780, 0, 1625, 0, 0,
	284, 0, 0, 0, 0, 0, 0, 0, 0, 1383,
	0, 0, 0, 0, 0, 836, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1378, 0, 0, 287, 884,
	0, 0, 0, 292, 293, 0, 0, 299, 0, 0,
	0, 0, 1810, 0, 836, 70, 0, 284, 0, 286,
	288, 0, 1374, 1375, 1376, 0, 1373, 1370, 1371, 1372,
	1364, 1365, 1366, 1367, 1369, 1625, 1738, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1379, 0, 0, 0, 0, 289, 0, 0,
	70, 0, 836, 0, 0, 0, 0, 0, 0, 290,
	291, 0, 1073, 0, 0, 0, 0, 1859, 0, 0,
	0, 0, 0, 0, 0, 294, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1073, 0, 0,
	0, 1073, 1374, 1375, 1376, 0, 1373, 1370, 1371, 1372,
	1364, 1365, 1366, 1367, 1369, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 506, 495, 496, 493, 494, 482, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 74, 75,
	0, 76, 295, 0, 0, 296, 522, 488, 0, 0,
	297, 77, 78, 0, 536, 189, 537, 79, 538, 539,
	0, 80, 193, 194, 81, 503, 521, 540, 541, 197,
	0, 532, 0, 514, 0, 82, 83, 84, 0, 85,
	0, 86, 87, 88, 0, 381, 89, 1856, 0, 515,
	517, 0, 516, 518, 91, 92, 93, 94, 542, 95,
	543, 544, 0, 96, 0, 97, 0, 0, 0, 535,
	99, 0, 100, 0, 0, 0, 487, 101, 102, 523,
	501, 0, 0, 103, 104, 545, 0, 105, 0, 106,
	0, 43, 382, 0, 107, 533, 0, 206, 0, 108,
	109, 529, 531, 0, 0, 112, 0, 110, 0, 383,
	111, 546, 547, 548, 549, 0, 513, 0, 0, 113,
	386, 114, 115, 0, 0, 534, 387, 116, 1073, 1073,
	117, 0, 1073, 118, 0, 119, 120, 121, 122, 123,
	389, 124, 125, 128, 126, 477, 127, 502, 530, 129,
	550, 130, 131, 0, 0, 0, 0, 0, 132, 217,
	390, 133, 391, 524, 134, 135, 136, 0, 525, 137,
	220, 138, 0, 139, 140, 141, 551, 142, 143, 0,
	145, 146, 144, 147, 0, 148, 392, 149, 150, 491,
	151, 0, 152, 153, 154, 0, 223, 155, 156, 519,
	157, 158, 0, 159, 552, 225, 160, 0, 166, 161,
	162, 163, 165, 553, 164, 526, 0, 167, 0, 168,
	169, 0, 228, 554, 555, 0, 0, 170, 527, 528,
	500, 171, 172, 1855, 174, 0, 0, 175, 176, 177,
	520, 0, 178, 179, 180, 233, 556, 0, 0, 181,
	0, 0, 0, 0, 182, 183, 184, 185, 0, 0,
	0, 0, 0, 1719, 0, 0, 0, 0, 0, 474,
	475, 0, 0, 0, 0, 476, 0, 0, 483, 43,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1073, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 594,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 74, 75, 599, 76, 600,
	601, 602, 603, 186, 604, 605, 606, 607, 77, 78,
	187, 188, 189, 190, 79, 191, 192, 608, 80, 193,
	194, 81, 609, 610, 195, 196, 197, 611, 198, 612,
	380, 613, 82, 83, 84, 884, 85, 614, 86, 87,
	88, 615, 381, 89, 90, 616, 617, 618, 619, 620,
	621, 91, 92, 93, 94, 199, 95, 200, 201, 622,
	96, 623, 97, 624, 625, 626, 98, 99, 627, 100,
	628, 0, 629, 202, 101, 102, 203, 630, 631, 632,
	103, 104, 204, 0, 105, 633, 106, 634, 635, 382,
	636, 107, 205, 637, 206, 638, 108, 109, 207, 208,
	384, 639, 112, 640, 110, 641, 383, 111, 209, 210,
	211, 212, 642, 213, 643, 385, 113, 386, 114, 115,
	644, 645, 214, 387, 116, 388, 646, 117, 647, 648,
	118, 0, 119, 120, 121, 122, 123, 389, 124, 125,
	128, 126, 649, 127, 650, 215, 129, 216, 130, 131,
	651, 652, 653, 654, 655, 132, 217, 390, 133, 391,
	218, 134, 135, 136, 656, 219, 137, 220, 138, 657,
	139, 140, 141, 221, 142, 143, 658, 145, 146, 144,
	147, 659, 148, 392, 149, 150, 222, 151, 0, 152,
	153, 154, 660, 223, 155, 156, 661, 157, 158, 393,
	159, 224, 225, 160, 662, 166, 161, 162, 163, 165,
	226, 164, 227, 663, 167, 664, 168, 169, 665, 228,
	229, 230, 666, 667, 170, 231, 232, 668, 171, 172,
	173, 174, 669, 670, 175, 176, 177, 671, 672, 178,
	179, 180, 233, 234, 673, 674, 181, 675, 676, 677,
	678, 182, 183, 184, 185, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 594, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1494, 74, 75, 599, 76, 600, 601, 602, 603,
	186, 604, 605, 606, 607, 77, 78, 187, 188, 189,
	190, 79, 191, 192, 608, 80, 193, 194, 81, 609,
	610, 195, 196, 197, 611, 198, 612, 380, 613, 82,
	83, 84, 0, 85, 614, 86, 87, 88, 615, 381,
	89, 90, 616, 617, 618, 619, 620, 621, 91, 92,
	93, 94, 199, 95, 200, 201, 622, 96, 623, 97,
	624, 625, 626, 98, 99, 627, 100, 628, 0, 629,
	202, 101, 102, 203, 630, 631, 632, 103, 104, 204,
	0, 105, 633, 106, 634, 635, 382, 636, 107, 205,
	637, 206, 638, 108, 109, 207, 208, 384, 639, 112,
	640, 110, 641, 383, 111, 209, 210, 211, 212, 642,
	213, 643, 385, 113, 386, 114, 115, 644, 645, 214,
	387, 116, 388, 646, 117, 647, 648, 118, 0, 119,
	120, 121, 122, 123, 389, 124, 125, 128, 126, 649,
	127, 650, 215, 129, 216, 130, 131, 651, 652, 653,
	654, 655, 132, 217, 390, 133, 391, 218, 134, 135,
	136, 656, 219, 137, 220, 138, 657, 139, 140, 141,
	221, 142, 143, 658, 145, 146, 144, 147, 659, 148,
	392, 149, 150, 222, 151, 0, 152, 153, 154, 660,
	223, 155, 156, 661, 157, 158, 393, 159, 224, 225,
	160, 662, 166, 161, 162, 163, 165, 226, 164, 227,
	663, 167, 664, 168, 169, 665, 228, 229, 230, 666,
	667, 170, 231, 232, 668, 171, 172, 173, 174, 669,
	670, 175, 176, 177, 671, 672, 178, 179, 180, 233,
	234, 673, 674, 181, 675, 676, 677, 678, 182, 183,
	184, 185, 594, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 593, 0, 0, 74, 75,
	599, 76, 600, 601, 602, 603, 186, 604, 605, 606,
	607, 77, 78, 187, 188, 189, 190, 79, 191, 192,
	608, 80, 193, 194, 81, 609, 610, 195, 196, 197,
	611, 198, 612, 380, 613, 82, 83, 84, 0, 85,
	614, 86, 87, 88, 615, 381, 89, 90, 616, 617,
	618, 619, 620, 621, 91, 92, 93, 94, 199, 95,
	200, 201, 622, 96, 623, 97, 624, 625, 626, 98,
	99, 627, 100, 628, 0, 629, 202, 101, 102, 203,
	630, 631, 632, 103, 104, 204, 0, 105, 633, 106,
	634, 635, 382, 636, 107, 205, 637, 206, 638, 108,
	109, 207, 208, 384, 639, 112, 640, 110, 641, 383,
	111, 209, 210, 211, 212, 642, 213, 643, 385, 113,
	386, 114, 115, 644, 645, 214, 387, 116, 388, 646,
	117, 647, 648, 118, 0, 119, 120, 121, 122, 123,
	389, 124, 125, 128, 126, 649, 127, 650, 215, 129,
	216, 130, 131, 651, 652, 653, 654, 655, 132, 217,
	390, 133, 391, 218, 134, 135, 136, 656, 219, 137,
	220, 138, 657, 139, 140, 141, 221, 142, 143, 658,
	145, 146, 144, 147, 659, 148, 392, 149, 150, 222,
	151, 0, 152, 153, 154, 660, 223, 155, 156, 661,
	157, 158, 393, 159, 224, 225, 160, 662, 166, 161,
	162, 163, 165, 226, 164, 227, 663, 167, 664, 168,
	169, 665, 228, 229, 230, 666, 667, 170, 231, 232,
	668, 171, 172, 173, 174, 669, 670, 175, 176, 177,
	671, 672, 178, 179, 180, 233, 234, 673, 674, 181,
	675, 676, 677, 678, 182, 183, 184, 185, 506, 495,
	496, 493, 494, 482, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 74, 75, 1141, 76, 0, 0,
	0, 0, 522, 488, 0, 0, 0, 77, 78, 187,
	536, 189, 537, 79, 538, 539, 0, 80, 193, 194,
	81, 503, 521, 540, 541, 197, 0, 532, 0, 514,
	0, 82, 83, 84, 0, 85, 0, 86, 87, 88,
	0, 381, 89, 90, 0, 515, 517, 0, 516, 518,
	91, 92, 93, 94, 542, 95, 543, 544, 0, 96,
	0, 97, 0, 1142, 0, 535, 99, 0, 100, 0,
	0, 0, 487, 101, 102, 523, 501, 0, 0, 103,
	104, 545, 0, 105, 0, 106, 0, 0, 382, 0,
	107, 533, 0, 206, 0, 108, 109, 529, 531, 384,
	0, 112, 0, 110, 0, 383, 111, 546, 547, 548,
	549, 0, 513, 0, 385, 113, 386, 114, 115, 0,
	0, 534, 387, 116, 388, 0, 117, 0, 0, 118,
	0, 119, 120, 121, 122, 123, 389, 124, 125, 128,
	126, 477, 127, 502, 530, 129, 550, 130, 131, 0,
	0, 0, 0, 0, 132, 217, 390, 133, 391, 524,
	134, 135, 136, 0, 525, 137, 220, 138, 0, 139,
	140, 141, 551, 142, 143, 0, 145, 146, 144, 147,
	0, 148, 392, 149, 150, 491, 151, 0, 152, 153,
	154, 0, 223, 155, 156, 519, 157, 158, 393, 159,
	552, 225, 160, 0, 166, 161, 162, 163, 165, 553,
	164, 526, 0, 167, 0, 168, 169, 0, 228, 554,
	555, 0, 0, 170, 527, 528, 500, 171, 172, 173,
	174, 0, 0, 175, 176, 177, 520, 0, 178, 179,
	180, 233, 556, 1140, 0, 181, 0, 0, 0, 0,
	182, 183, 184, 185, 478, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 474, 475, 1143, 0, 0,
	0, 476, 0, 0, 483, 1138, 506, 495, 496, 493,
	494, 482, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 74, 75, 0, 76, 0, 0, 0, 0,
	522, 488, 0, 0, 0, 77, 78, 187, 536, 189,
	537, 79, 538, 539, 0, 80, 193, 194, 81, 503,
	521, 540, 541, 197, 0, 532, 0, 514, 0, 82,
	83, 84, 0, 85, 0, 86, 87, 88, 0, 381,
	89, 90, 0, 515, 517, 0, 516, 518, 91, 92,
	93, 94, 542, 95, 543, 544, 571, 96, 0, 97,
	0, 0, 0, 535, 99, 0, 100, 0, 0, 0,
	487, 101, 102, 523, 501, 0, 0, 103, 104, 545,
	0, 105, 0, 106, 0, 0, 382, 0, 107, 533,
	0, 206, 0, 108, 109, 529, 531, 384, 0, 112,
	0, 110, 0, 383, 111, 546, 547, 548, 549, 0,
	513, 0, 385, 113, 386, 114, 115, 0, 0, 534,
	387, 116, 388, 0, 117, 0, 0, 118, 0, 119,
	120, 121, 122, 123, 389, 124, 125, 128, 126, 477,
	127, 502, 530, 129, 550, 130, 131, 0, 0, 0,
	0, 0, 132, 217, 390, 133, 391, 524, 134, 135,
	136, 0, 525, 137, 220, 138, 0, 139, 140, 141,
	551, 142, 143, 0, 145, 146, 144, 147, 0, 148,
	392, 149, 150, 491, 151, 0, 152, 153, 154, 61,
	223, 155, 156, 519, 157, 158, 393, 159, 552, 225,
	160, 0, 166, 161, 162, 163, 165, 553, 164, 526,
	0, 167, 63, 168, 169, 0, 228, 554, 555, 0,
	0, 170, 527, 528, 500, 171, 172, 173, 174, 0,
	0, 175, 176, 177, 520, 0, 178, 179, 180, 379,
	556, 0, 0, 181, 0, 0, 0, 59, 182, 183,
	184, 185, 478, 60, 506, 495, 496, 493, 494, 482,
	0, 0, 0, 474, 475, 0, 0, 0, 0, 476,
	74, 75, 483, 76, 0, 0, 0, 0, 522, 488,
	0, 0, 0, 77, 78, 187, 536, 189, 537, 79,
	538, 539, 0, 80, 193, 194, 81, 503, 521, 540,
	541, 197, 0, 532, 0, 514, 0, 82, 83, 84,
	0, 85, 0, 86, 87, 88, 0, 381, 89, 90,
	0, 515, 517, 0, 516, 518, 91, 92, 93, 94,
	542, 95, 543, 544, 0, 96, 0, 97, 0, 0,
	0, 535, 99, 0, 100, 0, 0, 0, 487, 101,
	102, 523, 501, 0, 0, 103, 104, 545, 0, 105,
	0, 106, 0, 0, 382, 0, 107, 533, 0, 206,
	0, 108, 109, 529, 531, 384, 0, 112, 0, 110,
	0, 383, 111, 546, 547, 548, 549, 0, 513, 0,
	385, 113, 386, 114, 115, 0, 0, 534, 387, 116,
	388, 0, 117, 0, 0, 118, 0, 119, 120, 121,
	122, 123, 389, 124, 125, 128, 126, 477, 127, 502,
	530, 129, 550, 130, 131, 0, 0, 0, 0, 0,
	132, 217, 390, 133, 391, 524, 134, 135, 136, 0,
	525, 137, 220, 138, 0, 139, 140, 141, 551, 142,
	143, 0, 145, 146, 144, 147, 0, 148, 392, 149,
	150, 491, 151, 0, 152, 153, 154, 61, 223, 155,
	156, 519, 157, 158, 393, 159, 552, 225, 160, 0,
	166, 161, 162, 163, 165, 553, 164, 526, 0, 167,
	63, 168, 169, 0, 228, 554, 555, 0, 0, 170,
	527, 528, 500, 171, 172, 173, 174, 0, 0, 175,
	176, 177, 520, 0, 178, 179, 180, 379, 556, 0,
	0, 181, 0, 0, 0, 59, 182, 183, 184, 185,
	478, 60, 506, 495, 496, 493, 494, 482, 0, 0,
	0, 474, 475, 0, 0, 0, 0, 476, 74, 75,
	483, 76, 0, 0, 0, 0, 522, 488, 0, 0,
	0, 77, 78, 187, 536, 189, 537, 79, 538, 539,
	1180, 80, 193, 194, 81, 503, 521, 540, 541, 197,
	0, 532, 0, 514, 0, 82, 83, 84, 0, 85,
	0, 86, 87, 88, 0, 381, 89, 90, 0, 515,
	517, 0, 516, 518, 91, 92, 93, 94, 542, 95,
	543, 544, 0, 96, 0, 97, 0, 0, 0, 535,
	99, 0, 100, 0, 0, 0, 487, 101, 102, 523,
	501, 0, 0, 103, 104, 545, 0, 105, 0, 106,
	0, 1185, 382, 0, 107, 533, 0, 206, 0, 108,
	109, 529, 531, 384, 0, 112, 0, 110, 0, 383,
	111, 546, 547, 548, 549, 0, 513, 0, 385, 113,
	386, 114, 115, 0, 1181, 534, 387, 116, 388, 0,
	117, 0, 0, 118, 0, 119, 120, 121, 122, 123,
	389, 124, 125, 128, 126, 477, 127, 502, 530, 129,
	550, 130, 131, 0, 0, 0, 0, 0, 132, 217,
	390, 133, 391, 524, 134, 135, 136, 0, 525, 137,
	220, 138, 0, 139, 140, 141, 551, 142, 143, 0,
	145, 146, 144, 147, 0, 148, 392, 149, 150, 491,
	151, 0, 152, 153, 154, 0, 223, 155, 156, 519,
	157, 158, 393, 159, 552, 225, 160, 0, 166, 161,
	162, 163, 165, 553, 164, 526, 0, 167, 0, 168,
	169, 0, 228, 554, 555, 0, 1182, 170, 527, 528,
	500, 171, 172, 173, 174, 0, 0, 175, 176, 177,
	520, 0, 178, 179, 180, 233, 556, 0, 0, 181,
	0, 0, 0, 0, 182, 183, 184, 185, 478, 0,
	506, 495, 496, 493, 494, 482, 0, 0, 0, 474,
	475, 0, 0, 0, 0, 476, 74, 75, 483, 76,
	0, 0, 0, 0, 522, 488, 0, 0, 0, 77,
	78, 187, 536, 189, 537, 79, 538, 539, 0, 80,
	193, 194, 81, 503, 521, 540, 541, 197, 0, 532,
	0, 514, 0, 82, 83, 84, 0, 85, 0, 86,
	87, 88, 0, 381, 89, 90, 0, 515, 517, 0,
	516, 518, 91, 92, 93, 94, 542, 95, 543, 544,
	0, 96, 0, 97, 0, 0, 0, 535, 99, 0,
	100, 0, 0, 0, 487, 101, 102, 523, 501, 0,
	0, 103, 104, 545, 0, 105, 0, 106, 0, 0,
	382, 0, 107, 533, 0, 206, 0, 108, 109, 529,
	531, 384, 0, 112, 0, 110, 0, 383, 111, 546,
	547, 548, 549, 0, 513, 0, 385, 113, 386, 114,
	115, 0, 0, 534, 387, 116, 388, 0, 117, 0,
	0, 118, 0, 119, 120, 121, 122, 123, 389, 124,
	125, 128, 126, 477, 127, 502, 530, 129, 550, 130,
	131, 0, 0, 0, 0, 0, 132, 217, 390, 133,
	391, 524, 134, 135, 136, 0, 525, 137, 220, 138,
	0, 139, 140, 141, 551, 142, 143, 0, 145, 146,
	144, 147, 0, 148, 392, 149, 150, 491, 151, 0,
	152, 153, 154, 0, 223, 155, 156, 519, 157, 158,
	393, 159, 552, 225, 160, 0, 166, 161, 162, 163,
	165, 553, 164, 526, 0, 167, 0, 168, 169, 0,
	228, 554, 555, 0, 0, 170, 527, 528, 500, 171,
	172, 173, 174, 0, 0, 175, 176, 177, 520, 0,
	178, 179, 180, 233, 556, 0, 0, 181, 0, 0,
	0, 0, 182, 183, 184, 185, 478, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 474, 475, 0,
	0, 0, 0, 476, 0, 0, 483, 1561, 506, 495,
	496, 493, 494, 482, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 74, 75, 0, 76, 0, 0,
	0, 0, 522, 488, 0, 0, 0, 77, 78, 187,
	536, 189, 537, 79, 538, 539, 0, 80, 193, 194,
	81, 503, 521, 540, 541, 197, 0, 532, 0, 514,
	0, 82, 83, 84, 0, 85, 0, 86, 87, 88,
	0, 381, 89, 90, 0, 515, 517, 0, 516, 518,
	91, 92, 93, 94, 542, 95, 543, 544, 0, 96,
	0, 97, 0, 0, 0, 535, 99, 0, 100, 0,
	0, 0, 487, 101, 102, 523, 501, 0, 0, 103,
	104, 545, 0, 105, 0, 106, 0, 0, 382, 0,
	107, 533, 0, 206, 0, 108, 109, 529, 531, 384,
	0, 112, 0, 110, 0, 383, 111, 546, 547, 548,
	549, 0, 513, 0, 385, 113, 386, 114, 115, 0,
	0, 534, 387, 116, 388, 0, 117, 0, 0, 118,
	0, 119, 120, 121, 122, 123, 389, 124, 125, 128,
	126, 477, 127, 502, 530, 129, 550, 130, 131, 0,
	0, 0, 0, 0, 132, 217, 390, 133, 391, 524,
	134, 135, 136, 0, 525, 137, 220, 138, 0, 139,
	140, 141, 551, 142, 143, 0, 145, 146, 144, 147,
	0, 148, 392, 149, 150, 491, 151, 0, 152, 153,
	154, 0, 223, 155, 156, 519, 157, 158, 393, 159,
	552, 225, 160, 0, 166, 161, 162, 163, 165, 553,
	164, 526, 0, 167, 0, 168, 169, 0, 228, 554,
	555, 0, 0, 170, 527, 528, 500, 171, 172, 173,
	174, 0, 0, 175, 176, 177, 520, 0, 178, 179,
	180, 233, 556, 0, 0, 181, 0, 0, 0, 0,
	182, 183, 184, 185, 478, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 474, 475, 0, 0, 0,
	0, 476, 0, 0, 483, 1510, 506, 495, 496, 493,
	494, 482, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 74, 75, 0, 76, 0, 0, 0, 0,
	522, 488, 0, 0, 0, 77, 78, 187, 536, 189,
	537, 79, 538, 539, 0, 80, 193, 194, 81, 503,
	521, 540, 541, 197, 0, 532, 0, 514, 0, 82,
	83, 84, 0, 85, 0, 86, 87, 88, 0, 381,
	89, 90, 0, 515, 517, 0, 516, 518, 91, 92,
	93, 94, 542, 95, 543, 544, 0, 96, 0, 97,
	0, 0, 0, 535, 99, 0, 100, 0, 0, 0,
	487, 101, 102, 523, 501, 0, 0, 103, 104, 545,
	0, 105, 0, 106, 0, 0, 382, 0, 107, 533,
	0, 206, 0, 108, 109, 529, 531, 384, 0, 112,
	0, 110, 0, 383, 111, 546, 547, 548, 549, 0,
	513, 0, 385, 113, 386, 114, 115, 0, 0, 534,
	387, 116, 388, 0, 117, 0, 0, 118, 0, 119,
	120, 121, 122, 123, 389, 124, 125, 128, 126, 477,
	127, 502, 530, 129, 550, 130, 131, 0, 0, 0,
	0, 0, 132, 217, 390, 133, 391, 524, 134, 135,
	136, 0, 525, 137, 220, 138, 0, 139, 140, 141,
	551, 142, 143, 0, 145, 146, 144, 147, 0, 148,
	392, 149, 150, 491, 151, 0, 152, 153, 154, 0,
	223, 155, 156, 519, 157, 158, 393, 159, 552, 225,
	160, 0, 166, 161, 162, 163, 165, 553, 164, 526,
	0, 167, 0, 168, 169, 0, 228, 554, 555, 0,
	0, 170, 527, 528, 500, 171, 172, 173, 174, 0,
	0, 175, 176, 177, 520, 0, 178, 179, 180, 233,
	556, 0, 0, 181, 0, 0, 0, 0, 182, 183,
	184, 185, 478, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 474, 475, 0, 0, 0, 0, 476,
	0, 0, 483, 1137, 506, 495, 496, 493, 494, 482,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	74, 75, 0, 76, 0, 0, 0, 0, 522, 488,
	0, 0, 0, 77, 78, 187, 536, 189, 537, 79,
	538, 539, 0, 80, 193, 194, 81, 503, 521, 540,
	541, 197, 0, 532, 0, 514, 0, 82, 83, 84,
	0, 85, 0, 86, 87, 88, 0, 381, 89, 90,
	0, 515, 517, 0, 516, 518, 91, 92, 93, 94,
	542, 95, 543, 544, 0, 96, 0, 97, 0, 0,
	0, 535, 99, 0, 100, 0, 0, 0, 487, 101,
	102, 523, 501, 0, 0, 103, 104, 545, 0, 105,
	0, 106, 0, 0, 382, 0, 107, 533, 0, 206,
	0, 108, 109, 529, 531, 384, 0, 112, 0, 110,
	0, 383, 111, 546, 547, 548, 549, 0, 513, 0,
	385, 113, 386, 114, 115, 0, 0, 534, 387, 116,
	388, 0, 117, 0, 0, 118, 0, 119, 120, 121,
	122, 123, 389, 124, 125, 128, 126, 477, 127, 502,
	530, 129, 550, 130, 131, 0, 0, 0, 0, 0,
	132, 217, 390, 133, 391, 524, 134, 135, 136, 0,
	525, 137, 220, 138, 0, 139, 140, 141, 551, 142,
	143, 0, 145, 146, 144, 147, 0, 148, 392, 149,
	150, 491, 151, 0, 152, 153, 154, 0, 223, 155,
	156, 519, 157, 158, 393, 159, 552, 225, 160, 0,
	166, 161, 162, 163, 165, 553, 164, 526, 0, 167,
	0, 168, 169, 0, 228, 554, 555, 0, 0, 170,
	527, 528, 500, 171, 172, 173, 174, 0, 0, 175,
	176, 177, 520, 0, 178, 179, 180, 233, 556, 0,
	0, 181, 0, 0, 0, 0, 182, 183, 184, 185,
	478, 0, 0, 0, 0, 506, 495, 496, 493, 494,
	482, 474, 475, 0, 0, 0, 0, 476, 890, 1134,
	483, 74, 75, 0, 76, 0, 0, 0, 0, 522,
	488, 0, 0, 0, 77, 78, 187, 536, 189, 537,
	79, 538, 539, 0, 80, 193, 194, 81, 503, 521,
	540, 541, 197, 0, 532, 0, 514, 0, 82, 83,
	84, 0, 85, 0, 86, 87, 88, 0, 381, 89,
	90, 0, 515, 517, 0, 516, 518, 91, 92, 93,
	94, 542, 95, 543, 544, 0, 96, 0, 97, 0,
	0, 0, 535, 99, 0, 100, 0, 0, 0, 487,
	101, 102, 523, 501, 0, 0, 103, 104, 545, 0,
	105, 0, 106, 0, 0, 382, 0, 107, 533, 0,
	206, 0, 108, 109, 529, 531, 384, 0, 112, 0,
	110, 0, 383, 111, 546, 547, 548, 549, 0, 513,
	0, 385, 113, 386, 114, 115, 0, 0, 534, 387,
	116, 388, 0, 117, 0, 0, 118, 0, 119, 120,
	121, 122, 123, 389, 124, 125, 128, 126, 477, 127,
	502, 530, 129, 550, 130, 131, 0, 0, 0, 0,
	0, 132, 217, 390, 133, 391, 524, 134, 135, 136,
	0, 525, 137, 220, 138, 0, 139, 140, 141, 551,
	142, 143, 0, 145, 146, 144, 147, 0, 148, 392,
	149, 150, 491, 151, 0, 152, 153, 154, 0, 223,
	155, 156, 519, 157, 158, 393, 159, 552, 225, 160,
	0, 166, 161, 162, 163, 165, 553, 164, 526, 0,
	167, 0, 168, 169, 0, 228, 554, 555, 0, 0,
	170, 527, 528, 500, 171, 172, 173, 174, 0, 0,
	175, 176, 177, 520, 0, 178, 179, 180, 233, 556,
	0, 0, 181, 0, 0, 0, 0, 182, 183, 184,
	185, 478, 0, 506, 495, 496, 493, 494, 482, 0,
	0, 0, 474, 475, 472, 0, 0, 0, 476, 74,
	75, 483, 76, 0, 0, 0, 0, 522, 488, 0,
	0, 0, 77, 78, 187, 536, 189, 537, 79, 538,
	539, 0, 80, 193, 194, 81, 503, 521, 540, 541,
	197, 0, 532, 0, 514, 0, 82, 83, 84, 0,
	85, 0, 86, 87, 88, 0, 381, 89, 90, 0,
	515, 517, 0, 516, 518, 91, 92, 93, 94, 542,
	95, 543, 544, 0, 96, 0, 97, 0, 0, 0,
	535, 99, 0, 100, 0, 0, 0, 487, 101, 102,
	523, 501, 0, 0, 103, 104, 545, 0, 105, 0,
	106, 0, 0, 382, 0, 107, 533, 0, 206, 0,
	108, 109, 529, 531, 384, 0, 112, 0, 110, 0,
	383, 111, 546, 547, 548, 549, 0, 513, 0, 385,
	113, 386, 114, 115, 0, 0, 534, 387, 116, 388,
	0, 117, 0, 0, 118, 0, 119, 120, 121, 122,
	123, 389, 124, 125, 128, 126, 477, 127, 502, 530,
	129, 550, 130, 131, 0, 0, 0, 0, 0, 132,
	217, 390, 133, 391, 524, 134, 135, 136, 0, 525,
	137, 220, 138, 0, 139, 140, 141, 551, 142, 143,
	0, 145, 146, 144, 147, 0, 148, 392, 149, 150,
	491, 151, 0, 152, 153, 154, 0, 223, 155, 156,
	519, 157, 158, 393, 159, 552, 225, 160, 0, 166,
	161, 162, 163, 165, 553, 164, 526, 0, 167, 0,
	168, 169, 0, 228, 554, 555, 0, 0, 170, 527,
	528, 500, 171, 172, 173, 174, 0, 0, 175, 176,
	177, 520, 0, 178, 179, 180, 233, 556, 1515, 0,
	181, 0, 0, 0, 0, 182, 183, 184, 185, 478,
	0, 506, 495, 496, 493, 494, 482, 0, 0, 0,
	474, 475, 0, 0, 0, 0, 476, 74, 75, 483,
	76, 0, 0, 0, 0, 522, 488, 0, 0, 0,
	77, 78, 187, 536, 189, 537, 79, 538, 539, 0,
	80, 193, 194, 81, 503, 521, 540, 541, 197, 0,
	532, 0, 514, 0, 82, 83, 84, 0, 85, 0,
	86, 87, 88, 0, 381, 89, 90, 0, 515, 517,
	0, 516, 518, 91, 92, 93, 94, 542, 95, 543,
	544, 571, 96, 0, 97, 0, 0, 0, 535, 99,
	0, 100, 0, 0, 0, 487, 101, 102, 523, 501,
	0, 0, 103, 104, 545, 0, 105, 0, 106, 0,
	0, 382, 0, 107, 533, 0, 206, 0, 108, 109,
	529, 531, 384, 0, 112, 0, 110, 0, 383, 111,
	546, 547, 548, 549, 0, 513, 0, 385, 113, 386,
	114, 115, 0, 0, 534, 387, 116, 388, 0, 117,
	0, 0, 118, 0, 119, 120, 121, 122, 123, 389,
	124, 125, 128, 126, 477, 127, 502, 530, 129, 550,
	130, 131, 0, 0, 0, 0, 0, 132, 217, 390,
	133, 391, 524, 134, 135, 136, 0, 525, 137, 220,
	138, 0, 139, 140, 141, 551, 142, 143, 0, 145,
	146, 144, 147, 0, 148, 392, 149, 150, 491, 151,
	0, 152, 153, 154, 0, 223, 155, 156, 519, 157,
	158, 393, 159, 552, 225, 160, 0, 166, 161, 162,
	163, 165, 553, 164, 526, 0, 167, 0, 168, 169,
	0, 228, 554, 555, 0, 0, 170, 527, 528, 500,
	171, 172, 173, 174, 0, 0, 175, 176, 177, 520,
	0, 178, 179, 180, 233, 556, 0, 0, 181, 0,
	0, 0, 0, 182, 183, 184, 185, 478, 0, 506,
	495, 496, 493, 494, 482, 0, 0, 0, 474, 475,
	0, 0, 0, 0, 476, 74, 75, 483, 76, 0,
	0, 0, 0, 522, 488, 0, 0, 0, 77, 78,
	187, 536, 189, 537, 79, 538, 539, 0, 80, 193,
	194, 81, 503, 521, 540, 541, 197, 0, 532, 0,
	514, 0, 82, 83, 84, 0, 85, 0, 86, 87,
	88, 0, 381, 89, 90, 0, 515, 517, 0, 516,
	518, 91, 92, 93, 94, 542, 95, 543, 544, 0,
	96, 0, 97, 0, 0, 0, 535, 99, 0, 100,
	0, 0, 0, 487, 101, 102, 523, 501, 0, 0,
	103, 104, 545, 0, 105, 0, 106, 0, 1185, 382,
	0, 107, 533, 0, 206, 0, 108, 109, 529, 531,
	384, 0, 112, 0, 110, 0, 383, 111, 546, 547,
	548, 549, 0, 513, 0, 385, 113, 386, 114, 115,
	0, 0, 534, 387, 116, 388, 0, 117, 0, 0,
	118, 0, 119, 120, 121, 122, 123, 389, 124, 125,
	128, 126, 477, 127, 502, 530, 129, 550, 130, 131,
	0, 0, 0, 0, 0, 132, 217, 390, 133, 391,
	524, 134, 135, 136, 0, 525, 137, 220, 138, 0,
	139, 140, 141, 551, 142, 143, 0, 145, 146, 144,
	147, 0, 148, 392, 149, 150, 491, 151, 0, 152,
	153, 154, 0, 223, 155, 156, 519, 157, 158, 393,
	159, 552, 225, 160, 0, 166, 161, 162, 163, 165,
	553, 164, 526, 0, 167, 0, 168, 169, 0, 228,
	554, 555, 0, 0, 170, 527, 528, 500, 171, 172,
	173, 174, 0, 0, 175, 176, 177, 520, 0, 178,
	179, 180, 233, 556, 0, 0, 181, 0, 0, 0,
	0, 182, 183, 184, 185, 478, 0, 0, 0, 0,
	506, 495, 496, 493, 494, 482, 474, 475, 0, 0,
	0, 0, 476, 0, 0, 483, 74, 75, 824, 76,
	0, 0, 0, 0, 522, 488, 0, 0, 0, 77,
	78, 187, 536, 189, 537, 79, 538, 539, 0, 80,
	193, 194, 81, 503, 521, 540, 541, 197, 0, 532,
	0, 514, 0, 82, 83, 84, 0, 85, 0, 86,
	87, 88, 0, 381, 89, 90, 0, 515, 517, 0,
	516, 518, 91, 92, 93, 94, 542, 95, 543, 544,
	0, 96, 0, 97, 0, 0, 0, 535, 99, 0,
	100, 0, 0, 0, 487, 101, 102, 523, 501, 0,
	0, 103, 104, 545, 0, 105, 0, 106, 0, 0,
	382, 0, 107, 533, 0, 206, 0, 108, 109, 529,
	531, 384, 0, 112, 0, 110, 0, 383, 111, 546,
	547, 548, 549, 0, 513, 0, 385, 113, 386, 114,
	115, 0, 0, 534, 387, 116, 388, 0, 117, 0,
	0, 118, 0, 119, 120, 121, 122, 123, 389, 124,
	125, 128, 126, 477, 127, 502, 530, 129, 550, 130,
	131, 0, 0, 0, 0, 0, 132, 217, 390, 133,
	391, 524, 134, 135, 136, 0, 525, 137, 220, 138,
	0, 139, 140, 141, 551, 142, 143, 0, 145, 146,
	144, 147, 0, 148, 392, 149, 150, 491, 151, 0,
	152, 153, 154, 0, 223, 155, 156, 519, 157, 158,
	393, 159, 552, 225, 160, 0, 166, 161, 162, 163,
	165, 553, 164, 526, 0, 167, 0, 168, 169, 0,
	228, 554, 555, 0, 0, 170, 527, 528, 500, 171,
	172, 173, 174, 0, 0, 175, 176, 177, 520, 0,
	178, 179, 180, 233, 556, 0, 0, 181, 0, 0,
	0, 0, 182, 183, 184, 185, 478, 0, 506, 495,
	496, 493, 494, 482, 0, 0, 0, 474, 475, 0,
	0, 0, 0, 476, 74, 75, 483, 76, 0, 0,
	0, 0, 522, 488, 0, 0, 0, 77, 78, 187,
	536, 189, 537, 79, 538, 539, 0, 80, 193, 194,
	81, 503, 521, 540, 541, 197, 0, 532, 0, 514,
	0, 82, 83, 84, 0, 85, 0, 86, 87, 88,
	0, 381, 89, 1856, 0, 515, 517, 0, 516, 518,
	91, 92, 93, 94, 542, 95, 543, 544, 0, 96,
	0, 97, 0, 0, 0, 535, 99, 0, 100, 0,
	0, 0, 487, 101, 102, 523, 501, 0, 0, 103,
	104, 545, 0, 105, 0, 106, 0, 0, 382, 0,
	107, 533, 0, 206, 0, 108, 109, 529, 531, 384,
	0, 112, 0, 110, 0, 383, 111, 546, 547, 548,
	549, 0, 513, 0, 385, 113, 386, 114, 115, 0,
	0, 534, 387, 116, 388, 0, 117, 0, 0, 118,
	0, 119, 120, 121, 122, 123, 389, 124, 125, 128,
	126, 477, 127, 502, 530, 129, 550, 130, 131, 0,
	0, 0, 0, 0, 132, 217, 390, 133, 391, 524,
	134, 135, 136, 0, 525, 137, 220, 138, 0, 139,
	140, 141, 551, 142, 143, 0, 145, 146, 144, 147,
	0, 148, 392, 149, 150, 491, 151, 0, 152, 153,
	154, 0, 223, 155, 156, 519, 157, 158, 393, 159,
	552, 225, 160, 0, 166, 161, 162, 163, 165, 553,
	164, 526, 0, 167, 0, 168, 169, 0, 228, 554,
	555, 0, 0, 170, 527, 528, 500, 171, 172, 1855,
	174, 0, 0, 175, 176, 177, 520, 0, 178, 179,
	180, 233, 556, 0, 0, 181, 0, 0, 0, 0,
	182, 183, 184, 185, 478, 0, 506, 495, 496, 493,
	494, 482, 0, 0, 0, 474, 475, 0, 0, 0,
	0, 476, 74, 75, 483, 76, 0, 0, 0, 0,
	522, 488, 0, 0, 0, 77, 78, 1854, 536, 189,
	537, 79, 538, 539, 0, 80, 193, 194, 81, 503,
	521, 540, 541, 197, 0, 532, 0, 514, 0, 82,
	83, 84, 0, 85, 0, 86, 87, 88, 0, 381,
	89, 1856, 0, 515, 517, 0, 516, 518, 91, 92,
	93, 94, 542, 95, 543, 544, 0, 96, 0, 97,
	0, 0, 0, 535, 99, 0, 100, 0, 0, 0,
	487, 101, 102, 523, 501, 0, 0, 103, 104, 545,
	0, 105, 0, 106, 0, 0, 382, 0, 107, 533,
	0, 206, 0, 108, 109, 529, 531, 384, 0, 112,
	0, 110, 0, 383, 111, 546, 547, 548, 549, 0,
	513, 0, 385, 113, 386, 114, 115, 0, 0, 534,
	387, 116, 388, 0, 117, 0, 0, 118, 0, 119,
	120, 121, 122, 123, 389, 124, 125, 128, 126, 477,
	127, 502, 530, 129, 550, 130, 131, 0, 0, 0,
	0, 0, 132, 217, 390, 133, 391, 524, 134, 135,
	136, 0, 525, 137, 220, 138, 0, 139, 140, 141,
	551, 142, 143, 0, 145, 146, 144, 147, 0, 148,
	392, 149, 150, 491, 151, 0, 152, 153, 154, 0,
	223, 155, 156, 519, 157, 158, 393, 159, 552, 225,
	160, 0, 166, 161, 162, 163, 165, 553, 164, 526,
	0, 167, 0, 168, 169, 0, 228, 554, 555, 0,
	0, 170, 527, 528, 500, 171, 172, 1855, 174, 0,
	0, 175, 176, 177, 520, 0, 178, 179, 180, 233,
	556, 0, 0, 181, 0, 0, 0, 0, 182, 183,
	184, 185, 478, 0, 506, 495, 496, 493, 494, 482,
	0, 0, 0, 474, 475, 0, 0, 0, 0, 476,
	74, 75, 483, 76, 0, 0, 0, 0, 522, 488,
	0, 0, 0, 77, 78, 187, 536, 189, 537, 79,
	538, 539, 0, 80, 193, 194, 81, 503, 521, 540,
	541, 197, 0, 532, 0, 514, 0, 82, 83, 84,
	0, 85, 0, 86, 87, 88, 0, 381, 89, 90,
	0, 515, 517, 0, 516, 518, 91, 92, 93, 94,
	542, 95, 543, 544, 0, 96, 0, 97, 0, 0,
	0, 535, 99, 0, 100, 0, 0, 0, 487, 101,
	102, 523, 501, 0, 0, 103, 104, 545, 0, 105,
	0, 106, 0, 0, 382, 0, 107, 533, 0, 206,
	0, 108, 109, 529, 531, 384, 0, 112, 0, 110,
	0, 383, 111, 546, 547, 548, 549, 0, 513, 0,
	385, 113, 386, 114, 115, 0, 0, 534, 387, 116,
	388, 0, 117, 0, 0, 118, 0, 119, 120, 121,
	122, 123, 389, 124, 125, 128, 126, 477, 127, 502,
	530, 129, 550, 130, 131, 0, 0, 0, 0, 0,
	132, 217, 390, 133, 391, 524, 134, 135, 136, 0,
	525, 137, 220, 138, 0, 139, 140, 141, 551, 142,
	143, 0, 145, 146, 144, 147, 0, 148, 392, 149,
	150, 491, 151, 0, 152, 153, 154, 0, 223, 155,
	156, 519, 157, 158, 393, 159, 552, 225, 160, 0,
	166, 161, 162, 163, 165, 553, 164, 526, 0, 167,
	0, 168, 169, 0, 228, 554, 555, 0, 0, 170,
	527, 528, 500, 171, 172, 173, 174, 0, 0, 175,
	176, 177, 520, 0, 178, 179, 180, 233, 556, 0,
	0, 181, 0, 0, 0, 0, 182, 183, 184, 185,
	478, 0, 506, 495, 496, 493, 494, 482, 0, 0,
	0, 474, 475, 0, 0, 0, 0, 476, 74, 75,
	483, 76, 0, 0, 0, 0, 522, 488, 0, 0,
	0, 77, 78, 187, 536, 189, 537, 79, 538, 539,
	0, 80, 193, 194, 81, 503, 521, 540, 541, 197,
	0, 532, 0, 514, 0, 82, 83, 84, 0, 85,
	0, 86, 87, 88, 0, 381, 89, 90, 0, 515,
	517, 0, 516, 518, 91, 92, 93, 94, 542, 95,
	543, 544, 0, 96, 0, 97, 0, 0, 0, 535,
	99, 0, 100, 0, 0, 0, 487, 101, 102, 523,
	501, 0, 0, 103, 104, 545, 0, 105, 0, 106,
	0, 0, 382, 0, 107, 533, 0, 206, 0, 108,
	109, 529, 531, 384, 0, 112, 0, 110, 0, 383,
	111, 546, 547, 548, 549, 0, 513, 0, 385, 113,
	386, 114, 115, 0, 0, 534, 387, 116, 388, 0,
	117, 0, 0, 118, 0, 119, 120, 121, 122, 123,
	389, 124, 125, 128, 126, 0, 127, 502, 530, 129,
	550, 130, 131, 0, 0, 0, 0, 0, 132, 217,
	390, 133, 391, 524, 134, 135, 136, 0, 525, 137,
	220, 138, 0, 139, 140, 141, 551, 142, 143, 0,
	145, 146, 144, 147, 0, 148, 392, 149, 150, 1175,
	151, 0, 152, 153, 154, 0, 223, 155, 156, 519,
	157, 158, 393, 159, 552, 225, 160, 0, 166, 161,
	162, 163, 165, 553, 164, 526, 0, 167, 0, 168,
	169, 0, 228, 554, 555, 0, 0, 170, 527, 528,
	500, 171, 172, 173, 174, 0, 0, 175, 176, 177,
	520, 0, 178, 179, 180, 233, 556, 0, 0, 181,
	0, 0, 0, 0, 182, 183, 184, 185, 0, 0,
	506, 0, 0, 0, 0, 0, 0, 0, 0, 1171,
	1172, 0, 0, 0, 0, 1173, 74, 75, 1174, 76,
	0, 0, 0, 0, 522, 0, 0, 0, 0, 77,
	78, 187, 188, 189, 190, 79, 191, 192, 0, 80,
	193, 194, 81, 0, 521, 195, 196, 197, 0, 532,
	0, 514, 0, 82, 83, 84, 0, 85, 0, 86,
	87, 88, 0, 381, 89, 90, 0, 515, 517, 0,
	516, 518, 91, 92, 93, 94, 199, 95, 200, 201,
	0, 96, 0, 97, 0, 0, 0, 98, 99, 0,
	100, 0, 0, 0, 202, 101, 102, 523, 0, 0,
	0, 103, 104, 204, 0, 105, 0, 106, 0, 0,
	382, 0, 107, 533, 0, 206, 0, 108, 109, 529,
	531, 384, 0, 112, 0, 110, 0, 383, 111, 209,
	210, 211, 212, 0, 213, 0, 385, 113, 386, 114,
	115, 0, 0, 534, 387, 116, 388, 0, 117, 0,
	0, 118, 0, 119, 120, 121, 122, 123, 389, 124,
	125, 128, 126, 0, 127, 0, 530, 129, 216, 130,
	131, 0, 0, 0, 0, 0, 132, 217, 390, 133,
	391, 524, 134, 135, 136, 0, 525, 137, 220, 138,
	0, 139, 140, 141, 221, 142, 143, 0, 145, 146,
	144, 147, 0, 148, 392, 149, 150, 222, 151, 0,
	152, 153, 154, 0, 223, 155, 156, 519, 157, 158,
	393, 159, 224, 225, 160, 0, 166, 161, 162, 163,
	165, 226, 164, 526, 0, 167, 0, 168, 169, 0,
	228, 229, 230, 0, 0, 170, 527, 528, 0, 171,
	172, 173, 174, 0, 0, 175, 176, 177, 520, 0,
	178, 179, 180, 233, 234, 0, 0, 181, 375, 0,
	0, 0, 182, 183, 184, 185, 0, 0, 0, 0,
	0, 0, 0, 0, 74, 75, 0, 76, 0, 0,
	0, 0, 186, 0, 0, 0, 1627, 77, 78, 187,
	188, 189, 190, 79, 191, 192, 0, 80, 193, 194,
	81, 0, 0, 195, 196, 197, 0, 198, 0, 380,
	0, 82, 83, 84, 0, 85, 0, 86, 87, 88,
	0, 381, 89, 90, 0, 0, 0, 0, 0, 0,
	91, 92, 93, 94, 199, 95, 200, 201, 0, 96,
	0, 97, 0, 0, 0, 98, 99, 0, 100, 0,
	0, 0, 202, 101, 102, 203, 0, 0, 0, 103,
	104, 204, 0, 105, 0, 106, 0, 0, 382, 0,
	107, 205, 0, 206, 0, 108, 109, 207, 208, 384,
	0, 112, 0, 110, 0, 383, 111, 209, 210, 211,
	212, 0, 213, 0, 385, 113, 386, 114, 115, 0,
	0, 214, 387, 116, 388, 0, 117, 0, 0, 118,
	0, 119, 120, 121, 122, 123, 389, 124, 125, 128,
	126, 0, 127, 0, 215, 129, 216, 130, 131, 0,
	0, 0, 0, 0, 132, 217, 390, 133, 391, 218,
	134, 135, 136, 0, 219, 137, 220, 138, 0, 139,
	140, 141, 221, 142, 143, 0, 145, 146, 144, 147,
	0, 148, 392, 149, 150, 222, 151, 0, 152, 153,
	154, 61, 223, 155, 156, 0, 157, 158, 393, 159,
	224, 225, 160, 0, 166, 161, 162, 163, 165, 226,
	164, 227, 0, 167, 63, 168, 169, 0, 228, 229,
	230, 0, 0, 170, 231, 232, 0, 171, 172, 173,
	174, 0, 0, 175, 176, 177, 0, 0, 178, 179,
	180, 379, 234, 0, 0, 181, 0, 0, 0, 59,
	182, 183, 184, 185, 0, 60, 375, 776, 0, 777,
	772, 767, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 74, 75, 58, 76, 0, 0, 0, 0,
	186, 0, 0, 0, 0, 77, 78, 187, 188, 189,
	190, 79, 191, 192, 0, 80, 193, 194, 81, 0,
	0, 195, 196, 197, 0, 198, 0, 380, 0, 82,
	83, 84, 0, 85, 0, 86, 87, 88, 0, 381,
	89, 90, 0, 0, 0, 0, 0, 0, 91, 92,
	93, 94, 199, 95, 200, 201, 780, 96, 0, 97,
	0, 0, 0, 98, 99, 0, 100, 0, 0, 0,
	202, 101, 102, 203, 769, 0, 0, 103, 104, 204,
	0, 105, 0, 106, 0, 0, 382, 0, 107, 205,
	0, 206, 0, 108, 109, 207, 208, 384, 0, 112,
	0, 110, 0, 383, 111, 209, 210, 211, 212, 0,
	213, 0, 385, 113, 386, 114, 115, 0, 0, 214,
	387, 116, 388, 0, 117, 0, 0, 118, 0, 119,
	120, 121, 122, 123, 389, 124, 125, 128, 126, 0,
	127, 0, 215, 129, 216, 130, 131, 0, 770, 0,
	0, 0, 132, 217, 390, 133, 391, 218, 134, 135,
	136, 0, 219, 137, 220, 138, 0, 139, 140, 141,
	221, 142, 143, 0, 145, 146, 144, 147, 0, 148,
	392, 149, 150, 222, 151, 0, 152, 153, 154, 0,
	223, 155, 156, 0, 157, 158, 393, 159, 224, 225,
	160, 0, 166, 161, 162, 163, 165, 226, 164, 227,
	0, 167, 0, 168, 169, 0, 228, 229, 230, 0,
	0, 170, 231, 232, 768, 171, 172, 173, 174, 0,
	0, 175, 176, 177, 0, 0, 178, 179, 180, 233,
	234, 375, 776, 181, 777, 772, 767, 0, 182, 183,
	184, 185, 0, 0, 0, 0, 0, 74, 75, 0,
	76, 0, 0, 778, 773, 186, 0, 0, 0, 0,
	77, 78, 187, 188, 189, 190, 79, 191, 192, 0,
	80, 193, 194, 81, 0, 0, 195, 196, 197, 0,
	198, 0, 380, 0, 82, 83, 84, 0, 85, 0,
	86, 87, 88, 0, 381, 89, 90, 0, 0, 0,
	0, 0, 0, 91, 92, 93, 94, 199, 95, 200,
	201, 763, 96, 0, 97, 0, 0, 0, 98, 99,
	0, 100, 0, 0, 0, 202, 101, 102, 203, 769,
	0, 0, 103, 104, 204, 0, 105, 0, 106, 0,
	0, 382, 0, 107, 205, 0, 206, 0, 108, 109,
	207, 208, 384, 0, 112, 0, 110, 0, 383, 111,
	209, 210, 211, 212, 0, 213, 0, 385, 113, 386,
	114, 115, 0, 0, 214, 387, 116, 388, 0, 117,
	0, 0, 118, 0, 119, 120, 121, 122, 123, 389,
	124, 125, 128, 126, 0, 127, 0, 215, 129, 216,
	130, 131, 0, 770, 0, 0, 0, 132, 217, 390,
	133, 391, 218, 134, 135, 136, 0, 219, 137, 220,
	138, 0, 139, 140, 141, 221, 142, 143, 0, 145,
	146, 144, 147, 0, 148, 392, 149, 150, 222, 151,
	0, 152, 153, 154, 0, 223, 155, 156, 0, 157,
	158, 393, 159, 224, 225, 160, 0, 166, 161, 162,
	163, 165, 226, 164, 227, 0, 167, 0, 168, 169,
	0, 228, 229, 230, 0, 0, 170, 231, 232, 768,
	171, 172, 173, 174, 0, 0, 175, 176, 177, 0,
	0, 178, 179, 180, 233, 234, 375, 776, 181, 777,
	772, 767, 0, 182, 183, 184, 185, 0, 0, 0,
	0, 0, 74, 75, 0, 76, 0, 0, 778, 773,
	186, 0, 0, 0, 0, 77, 78, 187, 188, 189,
	190, 79, 191, 192, 0, 80, 193, 194, 81, 0,
	0, 195, 196, 197, 0, 198, 0, 380, 0, 82,
	83, 84, 0, 85, 0, 86, 87, 88, 0, 381,
	89, 90, 0, 0, 0, 0, 0, 0, 91, 92,
	93, 94, 199, 95, 200, 201, 0, 96, 0, 97,
	0, 0, 0, 98, 99, 0, 100, 0, 0, 0,
	202, 101, 102, 203, 769, 0, 0, 103, 104, 204,
	0, 105, 0, 106, 0, 0, 382, 0, 107, 205,
	0, 206, 0, 108, 109, 207, 208, 384, 0, 112,
	0, 110, 0, 383, 111, 209, 210, 211, 212, 0,
	213, 0, 385, 113, 386, 114, 115, 0, 0, 214,
	387, 116, 388, 0, 117, 0, 0, 118, 0, 119,
	120, 121, 122, 123, 389, 124, 125, 128, 126, 0,
	127, 0, 215, 129, 216, 130, 131, 0, 770, 0,
	0, 0, 132, 217, 390, 133, 391, 218, 134, 135,
	136, 0, 219, 137, 220, 138, 0, 139, 140, 141,
	221, 142, 143, 0, 145, 146, 144, 147, 0, 148,
	392, 149, 150, 222, 151, 0, 152, 153, 154, 0,
	223, 155, 156, 0, 157, 158, 393, 159, 224, 225,
	160, 0, 166, 161, 162, 163, 165, 226, 164, 227,
	0, 167, 0, 168, 169, 0, 228, 229, 230, 0,
	0, 170, 231, 232, 768, 171, 172, 173, 174, 0,
	0, 175, 176, 177, 0, 0, 178, 179, 180, 233,
	234, 71, 0, 181, 0, 0, 0, 0, 182, 183,
	184, 185, 0, 0, 0, 0, 0, 74, 75, 0,
	76, 0, 0, 778, 773, 186, 0, 0, 0, 0,
	77, 78, 187, 188, 189, 190, 79, 191, 192, 0,
	80, 193, 194, 81, 0, 0, 195, 196, 197, 0,
	198, 0, 0, 0, 82, 83, 84, 0, 85, 0,
	86, 87, 88, 0, 0, 89, 90, 0, 0, 0,
	0, 0, 0, 91, 92, 93, 94, 199, 95, 200,
	201, 0, 96, 0, 97, 0, 0, 0, 98, 99,
	0, 100, 0, 0, 0, 202, 101, 102, 203, 0,
	0, 0, 103, 104, 204, 0, 105, 0, 106, 0,
	0, 0, 0, 107, 205, 0, 206, 0, 108, 109,
	207, 208, 0, 0, 112, 0, 110, 0, 0, 111,
	209, 210, 211, 212, 0, 213, 0, 0, 113, 0,
	114, 115, 0, 0, 214, 0, 116, 0, 0, 117,
	0, 0, 118, 0, 119, 120, 121, 122, 123, 0,
	124, 125, 128, 126, 0, 127, 0, 215, 129, 216,
	130, 131, 0, 0, 340, 0, 0, 132, 217, 0,
	133, 0, 218, 134, 135, 136, 0, 219, 137, 220,
	138, 0, 139, 140, 141, 221, 142, 143, 0, 145,
	146, 144, 147, 0, 148, 0, 149, 150, 222, 151,
	0, 152, 153, 154, 61, 223, 155, 156, 0, 157,
	158, 0, 159, 224, 225, 160, 0, 166, 161, 162,
	163, 165, 226, 164, 227, 0, 167, 63, 168, 169,
	0, 228, 229, 230, 0, 0, 170, 231, 232, 0,
	171, 172, 173, 174, 0, 0, 175, 176, 177, 0,
	0, 178, 179, 180, 379, 234, 0, 0, 181, 71,
	0, 0, 59, 182, 183, 184, 185, 0, 60, 0,
	0, 0, 0, 0, 0, 74, 75, 0, 76, 0,
	0, 0, 0, 186, 0, 0, 0, 1075, 77, 78,
	187, 188, 189, 190, 79, 191, 192, 0, 80, 193,
	194, 81, 0, 0, 195, 196, 197, 0, 198, 0,
	0, 0, 82, 83, 84, 0, 85, 0, 86, 87,
	88, 0, 0, 89, 90, 0, 0, 0, 0, 0,
	0, 91, 92, 93, 94, 199, 95, 200, 201, 0,
	96, 0, 97, 0, 0, 0, 98, 99, 0, 100,
	0, 0, 0, 202, 101, 102, 203, 0, 0, 0,
	103, 104, 204, 0, 105, 0, 106, 0, 0, 0,
	0, 107, 205, 0, 206, 0, 108, 109, 207, 208,
	0, 0, 112, 0, 110, 0, 0, 111, 209, 210,
	211, 212, 0, 213, 0, 0, 113, 0, 114, 115,
	0, 0, 214, 0, 116, 0, 0, 117, 0, 0,
	118, 0, 119, 120, 121, 122, 123, 0, 124, 125,
	128, 126, 0, 127, 0, 215, 129, 216, 130, 131,
	0, 0, 0, 0, 0, 132, 217, 0, 133, 0,
	218, 134, 135, 136, 0, 219, 137, 220, 138, 0,
	139, 140, 141, 221, 142, 143, 0, 145, 146, 144,
	147, 0, 148, 0, 149, 150, 222, 151, 0, 152,
	153, 154, 61, 223, 155, 156, 0, 157, 158, 0,
	159, 224, 225, 160, 0, 166, 161, 162, 163, 165,
	226, 164, 227, 0, 167, 63, 168, 169, 0, 228,
	229, 230, 0, 0, 170, 231, 232, 0, 171, 172,
	173, 174, 0, 0, 175, 176, 177, 0, 0, 178,
	179, 180, 379, 234, 0, 0, 181, 71, 0, 0,
	59, 182, 183, 184, 185, 0, 60, 0, 0, 0,
	0, 0, 0, 74, 75, 0, 76, 0, 0, 0,
	0, 186, 0, 1306, 0, 58, 77, 78, 187, 188,
	189, 190, 79, 191, 192, 0, 80, 193, 194, 81,
	0, 0, 195, 196, 197, 0, 198, 0, 0, 0,
	82, 83, 84, 0, 85, 0, 86, 87, 88, 0,
	0, 89, 90, 0, 0, 0, 0, 0, 0, 91,
	92, 93, 94, 199, 95, 200, 201, 0, 96, 0,
	97, 0, 0, 0, 98, 99, 0, 100, 0, 0,
	0, 202, 101, 102, 203, 0, 0, 0, 103, 104,
	204, 0, 105, 0, 106, 0, 0, 0, 0, 107,
	205, 0, 206, 0, 108, 109, 207, 208, 0, 0,
	112, 0, 110, 0, 0, 111, 209, 210, 211, 212,
	0, 213, 0, 0, 113, 0, 114, 115, 0, 0,
	214, 0, 116, 0, 0, 117, 0, 0, 118, 0,
	119, 120, 121, 122, 123, 0, 124, 125, 128, 126,
	0, 127, 0, 215, 129, 216, 130, 131, 0, 0,
	0, 0, 0, 132, 217, 0, 133, 0, 218, 134,
	135, 136, 0, 219, 137, 220, 138, 0, 139, 140,
	141, 221, 142, 143, 0, 145, 146, 144, 147, 0,
	148, 0, 149, 150, 222, 151, 0, 152, 153, 154,
	0, 223, 155, 156, 0, 157, 158, 0, 159, 224,
	225, 160, 0, 166, 161, 162, 163, 165, 226, 164,
	227, 0, 167, 0, 168, 169, 0, 228, 229, 230,
	0, 0, 170, 231, 232, 0, 171, 172, 173, 174,
	0, 0, 175, 176, 177, 0, 0, 178, 179, 180,
	233, 234, 0, 0, 181, 0, 71, 0, 0, 182,
	183, 184, 185, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 74, 75, 0, 76, 0, 0, 0, 0,
	186, 0, 0, 0, 464, 77, 78, 187, 188, 189,
	190, 79, 191, 192, 0, 80, 193, 194, 81, 0,
	0, 195, 196, 197, 0, 198, 0, 0, 0, 82,
	83, 84, 0, 85, 0, 86, 87, 88, 0, 0,
	89, 90, 0, 0, 0, 0, 0, 0, 91, 92,
	93, 94, 199, 95, 200, 201, 0, 96, 0, 97,
	0, 0, 0, 98, 99, 0, 100, 0, 0, 0,
	202, 101, 102, 203, 0, 0, 0, 103, 104, 204,
	0, 105, 0, 106, 0, 0, 0, 0, 107, 205,
	0, 206, 0, 108, 109, 207, 208, 0, 0, 112,
	0, 110, 0, 0, 111, 209, 210, 211, 212, 0,
	213, 0, 0, 113, 0, 114, 115, 0, 0, 214,
	0, 116, 0, 0, 117, 0, 0, 118, 0, 119,
	120, 121, 122, 123, 0, 124, 125, 128, 126, 0,
	127, 0, 215, 129, 216, 130, 131, 0, 0, 340,
	0, 0, 132, 217, 0, 133, 0, 218, 134, 135,
	136, 0, 219, 137, 220, 138, 0, 139, 140, 141,
	221, 142, 143, 0, 145, 146, 144, 147, 0, 148,
	0, 149, 150, 222, 151, 0, 152, 153, 154, 0,
	223, 155, 156, 0, 157, 158, 0, 159, 224, 225,
	160, 0, 166, 161, 162, 163, 165, 226, 164, 227,
	0, 167, 0, 168, 169, 0, 228, 229, 230, 0,
	0, 170, 231, 232, 0, 171, 172, 173, 174, 0,
	0, 175, 176, 177, 0, 0, 178, 179, 180, 233,
	234, 0, 0, 181, 71, 0, 0, 0, 182, 183,
	184, 185, 0, 0, 0, 0, 0, 0, 0, 0,
	74, 75, 0, 76, 0, 0, 0, 0, 186, 0,
	0, 0, 1075, 77, 78, 187, 188, 189, 190, 79,
	191, 192, 0, 80, 193, 194, 81, 0, 0, 195,
	196, 197, 0, 198, 0, 0, 0, 82, 83, 84,
	0, 85, 0, 86, 87, 88, 0, 0, 89, 90,
	0, 0, 0, 0, 0, 0, 91, 92, 93, 94,
	199, 95, 200, 201, 0, 96, 0, 97, 0, 0,
	0, 98, 99, 0, 100, 0, 0, 0, 202, 101,
	102, 203, 0, 0, 0, 103, 104, 204, 0, 105,
	0, 106, 0, 0, 0, 0, 107, 205, 0, 206,
	0, 108, 109, 207, 208, 0, 0, 112, 0, 110,
	0, 0, 111, 209, 210, 211, 212, 0, 213, 0,
	0, 113, 0, 114, 115, 0, 0, 214, 0, 116,
	0, 0, 117, 0, 0, 118, 0, 119, 120, 121,
	122, 123, 0, 124, 125, 128, 126, 0, 127, 0,
	215, 129, 216, 130, 131, 0, 0, 0, 0, 0,
	132, 217, 0, 133, 0, 218, 134, 135, 136, 0,
	219, 137, 220, 138, 0, 139, 140, 141, 221, 142,
	143, 0, 145, 146, 144, 147, 0, 148, 0, 149,
	150, 222, 151, 0, 152, 153, 154, 0, 223, 155,
	156, 0, 157, 158, 0, 159, 224, 225, 160, 0,
	166, 161, 162, 163, 165, 226, 164, 227, 0, 167,
	0, 168, 169, 0, 228, 229, 230, 0, 0, 170,
	231, 232, 0, 171, 172, 173, 174, 0, 0, 175,
	176, 177, 0, 0, 178, 179, 180, 233, 234, 0,
	0, 181, 0, 71, 0, 0, 182, 183, 184, 185,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 74,
	75, 0, 76, 0, 0, 0, 0, 186, 0, 0,
	0, 587, 77, 78, 187, 188, 189, 190, 79, 191,
	192, 0, 80, 193, 194, 81, 0, 0, 195, 196,
	197, 0, 198, 0, 0, 0, 82, 83, 84, 0,
	85, 0, 86, 87, 88, 0, 0, 89, 90, 0,
	0, 0, 0, 0, 0, 91, 92, 93, 94, 199,
	95, 200, 201, 0, 96, 0, 97, 0, 0, 0,
	98, 99, 0, 100, 0, 0, 0, 202, 101, 102,
	203, 0, 0, 0, 103, 104, 204, 0, 105, 0,
	106, 0, 0, 0, 0, 107, 205, 0, 206, 0,
	108, 109, 207, 208, 0, 0, 112, 0, 110, 0,
	0, 111, 209, 210, 211, 212, 0, 213, 0, 0,
	113, 0, 114, 115, 0, 0, 214, 0, 116, 0,
	0, 117, 0, 0, 118, 0, 119, 120, 121, 122,
	123, 0, 124, 125, 128, 126, 0, 127, 0, 215,
	129, 216, 130, 131, 0, 0, 0, 0, 0, 132,
	217, 0, 133, 0, 218, 134, 135, 136, 0, 219,
	137, 220, 138, 0, 139, 140, 141, 221, 142, 143,
	0, 145, 146, 144, 147, 0, 148, 0, 149, 150,
	222, 151, 0, 152, 153, 154, 0, 223, 155, 156,
	0, 157, 158, 0, 159, 224, 225, 160, 0, 166,
	161, 162, 163, 165, 226, 164, 227, 0, 167, 0,
	168, 169, 0, 228, 229, 230, 0, 0, 170, 231,
	232, 0, 171, 172, 173, 174, 0, 0, 175, 176,
	177, 0, 0, 178, 179, 180, 233, 234, 0, 0,
	181, 71, 0, 0, 0, 182, 183, 184, 185, 0,
	0, 0, 0, 0, 0, 0, 0, 74, 75, 0,
	76, 0, 0, 0, 0, 186, 0, 0, 0, 982,
	77, 78, 187, 188, 189, 190, 79, 191, 192, 0,
	80, 193, 194, 81, 0, 0, 195, 196, 197, 0,
	198, 0, 0, 0, 82, 83, 84, 0, 85, 0,
	86, 87, 88, 0, 0, 89, 90, 0, 0, 0,
	0, 0, 0, 91, 92, 93, 94, 199, 95, 200,
	201, 0, 96, 0, 97, 0, 0, 0, 98, 99,
	0, 100, 0, 0, 0, 202, 101, 102, 203, 0,
	0, 0, 103, 104, 204, 0, 105, 0, 106, 0,
	0, 0, 0, 107, 205, 0, 206, 0, 108, 109,
	207, 208, 0, 0, 112, 0, 110, 0, 0, 111,
	209, 210, 211, 212, 0, 213, 0, 0, 113, 0,
	114, 115, 0, 0, 214, 0, 116, 0, 0, 117,
	0, 0, 118, 0, 119, 120, 121, 122, 123, 0,
	124, 125, 128, 126, 0, 127, 0, 215, 129, 216,
	130, 131, 0, 0, 0, 0, 0, 132, 217, 0,
	133, 0, 218, 134, 135, 136, 0, 219, 137, 220,
	138, 0, 139, 140, 141, 221, 142, 143, 0, 145,
	146, 144, 147, 0, 148, 0, 149, 150, 222, 151,
	0, 152, 153, 154, 0, 223, 155, 156, 0, 157,
	158, 0, 159, 224, 225, 160, 0, 166, 161, 162,
	163, 165, 226, 164, 227, 0, 167, 0, 168, 169,
	0, 228, 229, 230, 0, 0, 170, 231, 232, 0,
	171, 172, 173, 174, 0, 0, 175, 176, 177, 0,
	0, 178, 179, 180, 233, 234, 0, 0, 181, 71,
	0, 0, 0, 182, 183, 184, 185, 0, 0, 0,
	0, 0, 0, 0, 0, 74, 75, 0, 76, 0,
	0, 0, 0, 186, 0, 0, 0, 1525, 77, 78,
	187, 188, 189, 190, 79, 191, 192, 0, 80, 193,
	194, 81, 0, 0, 195, 196, 197, 0, 198, 0,
	0, 0, 82, 83, 84, 0, 85, 0, 86, 87,
	88, 0, 0, 89, 90, 0, 0, 0, 0, 0,
	0, 91, 92, 93, 94, 199, 95, 200, 201, 0,
	96, 0, 97, 0, 0, 0, 98, 99, 0, 100,
	0, 0, 0, 202, 101, 102, 203, 0, 0, 0,
	103, 104, 204, 0, 105, 0, 106, 0, 0, 0,
	0, 107, 205, 0, 206, 0, 108, 109, 207, 208,
	0, 0, 112, 0, 110, 0, 0, 111, 209, 210,
	211, 212, 0, 213, 0, 0, 113, 0, 114, 115,
	0, 0, 214, 0, 116, 0, 0, 117, 0, 0,
	118, 0, 119, 120, 121, 122, 123, 0, 124, 125,
	128, 126, 0, 127, 0, 215, 129, 216, 130, 131,
	0, 0, 0, 0, 0, 132, 217, 0, 133, 0,
	218, 134, 135, 136, 0, 219, 137, 220, 138, 0,
	139, 140, 141, 221, 142, 143, 0, 145, 146, 144,
	147, 0, 148, 0, 149, 150, 222, 151, 0, 152,
	153, 154, 0, 223, 155, 156, 0, 157, 158, 0,
	159, 224, 225, 160, 0, 166, 161, 162, 163, 165,
	226, 164, 227, 0, 167, 0, 168, 169, 0, 228,
	229, 230, 0, 0, 170, 231, 232, 0, 171, 172,
	173, 174, 0, 0, 175, 176, 177, 0, 0, 178,
	179, 180, 233, 234, 0, 0, 181, 71, 0, 0,
	0, 182, 183, 184, 185, 0, 0, 0, 0, 0,
	0, 0, 0, 74, 75, 0, 76, 0, 0, 0,
	0, 186, 0, 0, 0, 567, 77, 78, 187, 188,
	189, 190, 79, 191, 192, 0, 80, 193, 194, 81,
	0, 0, 195, 196, 197, 0, 198, 0, 0, 0,
	82, 83, 84, 0, 85, 0, 86, 87, 88, 0,
	0, 89, 90, 0, 0, 0, 0, 0, 0, 91,
	92, 747, 94, 199, 95, 200, 201, 0, 96, 0,
	97, 0, 0, 0, 98, 99, 0, 100, 0, 0,
	0, 202, 101, 102, 203, 0, 0, 0, 103, 104,
	204, 0, 105, 0, 106, 0, 0, 0, 0, 107,
	205, 0, 206, 0, 108, 109, 207, 208, 0, 0,
	112, 0, 110, 0, 0, 111, 209, 210, 211, 212,
	0, 213, 0, 0, 113, 0, 114, 115, 0, 0,
	214, 0, 116, 0, 0, 117, 0, 0, 118, 0,
	119, 120, 121, 122, 123, 0, 124, 125, 128, 126,
	0, 127, 0, 215, 129, 216, 130, 131, 0, 0,
	0, 0, 0, 132, 217, 0, 133, 0, 218, 134,
	135, 136, 0, 219, 137, 220, 138, 0, 139, 140,
	141, 221, 142, 143, 0, 145, 146, 144, 147, 0,
	148, 0, 149, 150, 222, 151, 0, 152, 153, 154,
	0, 223, 155, 156, 0, 157, 158, 0, 159, 224,
	225, 160, 0, 166, 161, 162, 163, 165, 226, 164,
	227, 0, 167, 746, 168, 169, 0, 228, 229, 230,
	0, 0, 170, 231, 232, 0, 171, 172, 173, 174,
	0, 0, 175, 176, 177, 0, 0, 178, 179, 180,
	233, 234, 0, 71, 181, 0, 0, 0, 0, 182,
	183, 184, 185, 0, 0, 0, 0, 0, 0, 74,
	75, 0, 76, 0, 0, 0, 750, 186, 0, 0,
	0, 0, 77, 78, 187, 188, 189, 190, 79, 191,
	192, 0, 80, 193, 194, 81, 0, 0, 195, 196,
	197, 0, 198, 0, 0, 0, 82, 83, 84, 0,
	85, 0, 86, 87, 88, 0, 0, 89, 90, 0,
	0, 0, 0, 0, 0, 91, 92, 93, 94, 199,
	95, 200, 201, 0, 96, 0, 97, 0, 0, 0,
	98, 99, 0, 100, 0, 0, 0, 202, 101, 102,
	203, 0, 0, 0, 103, 104, 204, 0, 105, 0,
	106, 0, 0, 0, 0, 107, 205, 0, 206, 0,
	108, 109, 207, 208, 0, 0, 112, 0, 110, 0,
	0, 111, 209, 210, 211, 212, 0, 213, 0, 0,
	113, 0, 114, 115, 0, 0, 214, 0, 116, 0,
	0, 117, 0, 0, 118, 0, 119, 120, 121, 122,
	123, 0, 124, 125, 128, 126, 0, 127, 0, 215,
	129, 216, 130, 131, 0, 0, 0, 0, 0, 132,
	217, 0, 133, 0, 218, 134, 135, 136, 0, 219,
	137, 220, 138, 0, 139, 140, 141, 221, 142, 143,
	0, 145, 146, 144, 147, 0, 148, 0, 149, 150,
	222, 151, 0, 152, 153, 154, 0, 223, 155, 156,
	0, 157, 158, 0, 159, 224, 225, 160, 0, 166,
	161, 162, 163, 165, 226, 164, 227, 0, 167, 0,
	168, 169, 0, 228, 229, 230, 0, 0, 170, 231,
	232, 0, 171, 172, 173, 174, 0, 0, 175, 176,
	177, 0, 0, 178, 179, 180, 233, 234, 0, 375,
	181, 0, 0, 0, 0, 182, 183, 184, 185, 0,
	0, 0, 0, 0, 0, 74, 75, 0, 76, 0,
	0, 0, 750, 186, 0, 0, 0, 0, 77, 78,
	187, 188, 189, 190, 79, 191, 192, 0, 80, 193,
	194, 81, 0, 0, 195, 196, 197, 0, 198, 0,
	380, 0, 82, 83, 84, 0, 85, 0, 86, 87,
	88, 0, 381, 89, 90, 0, 0, 0, 0, 0,
	0, 91, 92, 93, 94, 199, 95, 200, 201, 0,
	96, 0, 97, 0, 0, 0, 98, 99, 0, 100,
	0, 0, 0, 202, 101, 102, 203, 0, 0, 0,
	103, 104, 204, 0, 105, 0, 106, 0, 0, 382,
	0, 107, 205, 0, 206, 0, 108, 109, 207, 208,
	384, 0, 112, 0, 110, 0, 383, 111, 209, 210,
	211, 212, 0, 213, 0, 385, 113, 386, 114, 115,
	0, 0, 214, 387, 116, 388, 0, 117, 0, 0,
	118, 0, 119, 120, 121, 122, 123, 389, 124, 125,
	128, 126, 0, 127, 0, 215, 129, 216, 130, 131,
	0, 0, 0, 0, 0, 132, 217, 390, 133, 391,
	218, 134, 135, 136, 0, 219, 137, 220, 138, 0,
	139, 140, 141, 221, 142, 143, 0, 145, 146, 144,
	147, 0, 148, 392, 149, 150, 222, 151, 0, 152,
	153, 154, 0, 223, 155, 156, 0, 157, 158, 393,
	159, 224, 225, 160, 0, 166, 161, 162, 163, 165,
	226, 164, 227, 0, 167, 0, 168, 169, 0, 228,
	229, 230, 0, 0, 170, 231, 232, 0, 171, 172,
	173, 174, 0, 0, 175, 176, 177, 0, 0, 178,
	179, 180, 233, 234, 71, 0, 181, 0, 0, 0,
	0, 182, 183, 184, 185, 0, 0, 0, 0, 0,
	74, 75, 0, 76, 0, 0, 0, 0, 186, 0,
	0, 0, 0, 77, 78, 187, 188, 189, 190, 79,
	191, 192, 0, 80, 193, 194, 81, 0, 0, 195,
	196, 197, 948, 198, 0, 0, 0, 82, 83, 84,
	0, 85, 946, 86, 87, 88, 0, 0, 89, 90,
	0, 0, 0, 0, 0, 0, 91, 92, 93, 94,
	199, 95, 200, 201, 0, 96, 0, 97, 0, 0,
	0, 98, 99, 0, 100, 0, 0, 0, 202, 101,
	102, 203, 0, 1050, 0, 103, 104, 204, 0, 105,
	0, 106, 951, 0, 0, 0, 107, 205, 0, 206,
	0, 108, 109, 207, 208, 0, 0, 112, 1048, 110,
	0, 0, 111, 209, 210, 211, 212, 0, 213, 0,
	0, 113, 0, 114, 115, 0, 0, 214, 0, 116,
	0, 0, 117, 0, 0, 118, 0, 119, 120, 121,
	122, 123, 0, 124, 125, 128, 126, 0, 127, 0,
	215, 129, 216, 130, 131, 0, 0, 0, 0, 0,
	132, 217, 0, 133, 0, 218, 134, 135, 136, 0,
	219, 137, 220, 138, 950, 139, 140, 141, 221, 142,
	143, 0, 145, 146, 144, 147, 0, 148, 0, 149,
	150, 222, 151, 0, 152, 153, 154, 0, 223, 155,
	156, 0, 157, 158, 0, 159, 224, 225, 160, 0,
	166, 161, 162, 163, 165, 226, 164, 227, 0, 167,
	0, 168, 169, 0, 228, 229, 230, 0, 0, 170,
	231, 232, 0, 171, 172, 173, 174, 0, 1049, 175,
	176, 177, 0, 0, 178, 179, 180, 233, 234, 71,
	0, 181, 0, 0, 0, 0, 182, 183, 184, 185,
	0, 0, 0, 0, 0, 74, 75, 0, 76, 0,
	0, 0, 0, 186, 0, 0, 0, 0, 77, 78,
	187, 188, 189, 190, 79, 191, 192, 0, 80, 193,
	194, 81, 0, 0, 195, 196, 197, 948, 198, 0,
	0, 943, 82, 83, 84, 0, 85, 946, 86, 87,
	88, 0, 0, 89, 90, 0, 0, 0, 0, 0,
	0, 91, 92, 93, 94, 199, 95, 200, 201, 0,
	96, 0, 97, 0, 0, 0, 98, 99, 0, 100,
	0, 0, 0, 202, 101, 102, 203, 0, 0, 0,
	103, 104, 204, 0, 105, 0, 106, 951, 0, 0,
	0, 107, 205, 0, 206, 0, 108, 109, 942, 208,
	0, 0, 112, 0, 110, 0, 0, 111, 209, 210,
	211, 212, 0, 213, 0, 0, 113, 0, 114, 115,
	0, 0, 214, 0, 116, 0, 0, 117, 0, 0,
	118, 0, 119, 120, 121, 122, 123, 0, 124, 125,
	128, 126, 0, 127, 0, 215, 129, 216, 130, 131,
	0, 0, 0, 0, 0, 132, 217, 0, 133, 0,
	218, 134, 135, 136, 0, 219, 137, 220, 138, 950,
	139, 140, 141, 221, 142, 143, 0, 145, 146, 144,
	147, 0, 148, 0, 149, 150, 222, 151, 0, 152,
	153, 154, 0, 223, 155, 156, 0, 157, 158, 0,
	159, 224, 225, 160, 0, 166, 161, 162, 163, 165,
	226, 164, 227, 0, 167, 0, 168, 169, 0, 228,
	229, 230, 0, 0, 170, 231, 232, 0, 171, 172,
	173, 174, 0, 949, 175, 176, 177, 0, 0, 178,
	179, 180, 233, 234, 71, 0, 181, 0, 0, 0,
	0, 182, 183, 184, 185, 0, 0, 0, 0, 0,
	74, 75, 0, 76, 0, 0, 0, 0, 186, 0,
	1306, 0, 0, 77, 78, 187, 188, 189, 190, 79,
	191, 192, 0, 80, 193, 194, 81, 0, 0, 195,
	196, 197, 0, 198, 0, 0, 0, 82, 83, 84,
	0, 85, 0, 86, 87, 88, 0, 0, 89, 90,
	0, 0, 0, 0, 0, 0, 91, 92, 93, 94,
	199, 95, 200, 201, 0, 96, 0, 97, 0, 0,
	0, 98, 99, 0, 100, 0, 0, 0, 202, 101,
	102, 203, 0, 0, 0, 103, 104, 204, 0, 105,
	0, 106, 0, 0, 0, 0, 107, 205, 0, 206,
	0, 108, 109, 207, 208, 0, 0, 112, 0, 110,
	0, 0, 111, 209, 210, 211, 212, 0, 213, 0,
	0, 113, 0, 114, 115, 0, 0, 214, 0, 116,
	0, 0, 117, 0, 0, 118, 0, 119, 120, 121,
	122, 123, 0, 124, 125, 128, 126, 0, 127, 0,
	215, 129, 216, 130, 131, 0, 0, 0, 0, 0,
	132, 217, 0, 133, 0, 218, 134, 135, 136, 0,
	219, 137, 220, 138, 0, 139, 140, 141, 221, 142,
	143, 0, 145, 146, 144, 147, 0, 148, 0, 149,
	150, 222, 151, 0, 152, 153, 154, 0, 223, 155,
	156, 0, 157, 158, 0, 159, 224, 225, 160, 0,
	166, 161, 162, 163, 165, 226, 164, 227, 0, 167,
	0, 168, 169, 0, 228, 229, 230, 0, 0, 170,
	231, 232, 0, 171, 172, 173, 174, 0, 0, 175,
	176, 177, 0, 0, 178, 179, 180, 233, 234, 71,
	0, 181, 0, 0, 0, 0, 182, 183, 184, 185,
	0, 0, 0, 0, 0, 74, 75, 0, 76, 0,
	0, 0, 0, 186, 0, 0, 0, 0, 77, 78,
	187, 188, 189, 190, 79, 191, 192, 0, 80, 193,
	194, 81, 0, 0, 195, 196, 197, 0, 198, 0,
	0, 0, 82, 83, 84, 0, 85, 0, 86, 87,
	88, 0, 0, 89, 90, 0, 0, 0, 0, 0,
	0, 91, 92, 93, 94, 199, 95, 200, 201, 0,
	96, 0, 97, 0, 0, 0, 98, 99, 0, 100,
	0, 0, 0, 202, 101, 102, 203, 0, 0, 0,
	103, 104, 204, 0, 105, 0, 106, 0, 0, 0,
	0, 107, 205, 0, 206, 0, 108, 109, 207, 208,
	0, 0, 112, 0, 110, 0, 0, 111, 209, 210,
	211, 212, 0, 213, 0, 0, 113, 0, 114, 115,
	0, 0, 214, 0, 116, 0, 0, 117, 0, 0,
	118, 0, 119, 120, 121, 122, 123, 0, 124, 125,
	128, 126, 0, 127, 0, 215, 129, 216, 130, 131,
	0, 0, 340, 0, 0, 132, 217, 0, 133, 0,
	218, 134, 135, 136, 0, 219, 137, 220, 138, 0,
	139, 140, 141, 221, 142, 143, 0, 145, 146, 144,
	147, 0, 148, 0, 149, 150, 222, 151, 0, 152,
	153, 154, 0, 223, 155, 156, 0, 157, 158, 0,
	159, 224, 225, 160, 0, 166, 161, 162, 163, 165,
	226, 164, 227, 0, 167, 0, 168, 169, 0, 228,
	229, 230, 0, 0, 170, 231, 232, 0, 171, 172,
	173, 174, 0, 0, 175, 176, 177, 0, 0, 178,
	179, 180, 233, 234, 71, 0, 181, 0, 0, 0,
	0, 182, 183, 184, 185, 0, 0, 0, 0, 0,
	74, 75, 0, 76, 0, 0, 0, 0, 186, 0,
	0, 0, 0, 77, 78, 187, 188, 189, 190, 79,
	191, 192, 0, 80, 193, 194, 81, 0, 0, 195,
	196, 197, 0, 198, 0, 0, 0, 82, 83, 84,
	0, 85, 0, 86, 87, 88, 0, 0, 89, 90,
	0, 0, 0, 0, 0, 0, 91, 92, 93, 94,
	199, 95, 200, 201, 0, 96, 0, 97, 0, 0,
	0, 98, 99, 0, 100, 0, 0, 0, 202, 101,
	102, 203, 0, 0, 0, 103, 104, 204, 0, 105,
	0, 106, 0, 0, 0, 0, 107, 205, 0, 206,
	0, 108, 109, 698, 208, 0, 0, 112, 0, 110,
	0, 0, 111, 209, 210, 211, 212, 0, 213, 0,
	0, 113, 0, 114, 115, 0, 0, 214, 0, 116,
	0, 0, 117, 0, 0, 118, 0, 119, 120, 121,
	122, 123, 0, 124, 125, 128, 126, 0, 127, 0,
	215, 129, 216, 130, 131, 0, 0, 340, 0, 0,
	132, 217, 0, 133, 0, 218, 134, 135, 136, 0,
	219, 137, 220, 138, 0, 139, 140, 141, 221, 142,
	143, 0, 145, 146, 144, 147, 0, 148, 0, 149,
	150, 222, 151, 0, 152, 153, 154, 0, 223, 155,
	156, 0, 157, 158, 0, 159, 224, 225, 160, 0,
	166, 161, 162, 163, 165, 226, 164, 227, 0, 167,
	0, 168, 169, 0, 228, 229, 230, 0, 0, 170,
	231, 232, 0, 171, 172, 173, 174, 0, 0, 175,
	176, 177, 0, 0, 178, 179, 180, 233, 234, 71,
	0, 181, 0, 0, 0, 0, 182, 183, 184, 185,
	0, 0, 0, 0, 0, 74, 75, 400, 76, 0,
	0, 0, 0, 186, 0, 0, 0, 0, 77, 78,
	187, 188, 189, 190, 79, 191, 192, 0, 80, 193,
	194, 81, 0, 0, 195, 196, 197, 0, 198, 0,
	0, 0, 82, 83, 84, 0, 85, 0, 86, 87,
	88, 0, 0, 89, 90, 0, 0, 0, 0, 0,
	0, 91, 92, 93, 94, 199, 95, 200, 201, 0,
	96, 0, 97, 0, 0, 0, 98, 99, 0, 100,
	0, 0, 0, 202, 101, 102, 203, 0, 0, 0,
	103, 104, 204, 0, 105, 0, 106, 0, 0, 0,
	0, 107, 205, 0, 206, 0, 108, 109, 207, 208,
	0, 0, 112, 0, 110, 0, 0, 111, 209, 210,
	211, 212, 0, 213, 0, 0, 113, 0, 114, 115,
	0, 0, 214, 0, 116, 0, 0, 117, 0, 0,
	118, 0, 119, 120, 121, 122, 123, 0, 124, 125,
	128, 126, 0, 127, 0, 215, 129, 216, 130, 131,
	0, 0, 0, 0, 0, 132, 217, 0, 133, 0,
	218, 134, 135, 136, 0, 219, 137, 220, 138, 0,
	139, 140, 141, 221, 142, 143, 0, 145, 146, 144,
	147, 0, 148, 0, 149, 150, 222, 151, 0, 152,
	153, 154, 0, 223, 155, 156, 0, 157, 158, 0,
	159, 224, 225, 160, 0, 166, 161, 162, 163, 165,
	226, 164, 227, 0, 167, 0, 168, 169, 0, 228,
	229, 230, 0, 0, 170, 231, 232, 0, 171, 172,
	173, 174, 0, 0, 175, 176, 177, 0, 0, 178,
	179, 180, 233, 234, 71, 0, 181, 0, 0, 0,
	0, 182, 183, 184, 185, 0, 0, 0, 0, 0,
	74, 75, 0, 76, 0, 0, 0, 0, 186, 0,
	0, 0, 0, 77, 78, 187, 188, 189, 190, 79,
	191, 192, 0, 80, 193, 194, 81, 0, 0, 195,
	196, 197, 0, 198, 0, 0, 0, 82, 83, 84,
	0, 85, 0, 86, 87, 88, 0, 0, 89, 90,
	0, 0, 0, 0, 0, 0, 91, 92, 93, 94,
	199, 95, 200, 201, 0, 96, 0, 97, 0, 0,
	0, 98, 99, 0, 100, 0, 0, 0, 202, 101,
	102, 203, 0, 0, 0, 103, 104, 204, 0, 105,
	0, 106, 0, 0, 0, 0, 107, 205, 0, 206,
	0, 108, 109, 345, 208, 0, 0, 112, 0, 110,
	0, 0, 111, 209, 210, 211, 212, 0, 213, 0,
	0, 113, 0, 114, 115, 0, 0, 214, 0, 116,
	0, 0, 117, 0, 0, 118, 0, 119, 120, 121,
	122, 123, 0, 124, 125, 128, 126, 0, 127, 0,
	215, 129, 216, 130, 131, 0, 0, 340, 0, 0,
	132, 217, 0, 133, 0, 218, 134, 135, 136, 0,
	219, 137, 220, 138, 0, 139, 140, 141, 221, 142,
	143, 0, 145, 146, 144, 147, 0, 148, 0, 149,
	150, 222, 151, 0, 152, 153, 154, 0, 223, 155,
	156, 0, 157, 158, 0, 159, 224, 225, 160, 0,
	166, 161, 162, 163, 165, 226, 164, 227, 0, 167,
	0, 168, 169, 0, 228, 229, 230, 0, 0, 170,
	231, 232, 0, 171, 172, 173, 174, 0, 0, 175,
	176, 177, 0, 0, 178, 179, 180, 233, 234, 71,
	0, 181, 0, 0, 0, 0, 182, 183, 184, 185,
	0, 0, 0, 0, 0, 74, 75, 257, 76, 0,
	0, 0, 0, 186, 0, 0, 0, 0, 77, 78,
	187, 188, 189, 190, 79, 191, 192, 0, 80, 193,
	194, 81, 0, 0, 195, 196, 197, 0, 198, 0,
	0, 0, 82, 83, 84, 0, 85, 0, 86, 87,
	88, 0, 0, 89, 90, 0, 0, 0, 0, 0,
	0, 91, 92, 93, 94, 199, 95, 200, 201, 0,
	96, 0, 97, 0, 0, 0, 98, 99, 0, 100,
	0, 0, 0, 202, 101, 102, 203, 0, 0, 0,
	103, 104, 204, 0, 105, 0, 106, 0, 0, 0,
	0, 107, 205, 0, 206, 0, 108, 109, 207, 208,
	0, 0, 112, 0, 110, 0, 0, 111, 209, 210,
	211, 212, 0, 213, 0, 0, 113, 0, 114, 115,
	0, 0, 214, 0, 116, 0, 0, 117, 0, 0,
	118, 0, 119, 120, 121, 122, 123, 0, 124, 125,
	128, 126, 0, 127, 0, 215, 129, 216, 130, 131,
	0, 0, 0, 0, 0, 132, 217, 0, 133, 0,
	218, 134, 135, 136, 0, 219, 137, 220, 256, 0,
	139, 140, 141, 221, 142, 143, 0, 145, 146, 144,
	147, 0, 148, 0, 149, 150, 222, 151, 0, 152,
	153, 154, 0, 223, 155, 156, 0, 157, 158, 0,
	159, 224, 225, 160, 0, 166, 161, 162, 163, 165,
	226, 164, 227, 0, 167, 0, 168, 169, 0, 228,
	229, 230, 0, 0, 170, 231, 232, 0, 171, 172,
	173, 174, 0, 0, 175, 176, 177, 0, 0, 178,
	179, 180, 233, 234, 71, 0, 181, 0, 0, 0,
	0, 182, 183, 184, 185, 0, 0, 0, 0, 0,
	74, 75, 0, 76, 0, 0, 0, 0, 186, 0,
	0, 0, 0, 77, 78, 187, 188, 189, 190, 79,
	191, 192, 0, 80, 193, 194, 81, 0, 0, 195,
	196, 197, 0, 198, 0, 0, 0, 82, 83, 84,
	0, 85, 0, 86, 87, 88, 0, 0, 89, 90,
	0, 0, 0, 0, 0, 0, 91, 92, 93, 94,
	199, 95, 200, 201, 0, 96, 0, 97, 0, 0,
	0, 98, 99, 0, 100, 0, 0, 0, 202, 101,
	102, 203, 0, 0, 0, 103, 104, 204, 0, 105,
	0, 106, 0, 0, 0, 0, 107, 205, 0, 206,
	0, 108, 109, 207, 208, 0, 0, 112, 0, 110,
	0, 0, 111, 209, 210, 211, 212, 0, 213, 0,
	0, 113, 0, 114, 115, 0, 0, 214, 0, 116,
	0, 0, 117, 0, 0, 118, 0, 119, 120, 121,
	122, 123, 0, 124, 125, 128, 126, 0, 127, 0,
	215, 129, 216, 130, 131, 0, 0, 0, 0, 0,
	132, 217, 0, 133, 0, 218, 134, 135, 136, 0,
	219, 137, 220, 138, 0, 139, 140, 141, 221, 142,
	143, 0, 145, 146, 144, 147, 0, 148, 0, 149,
	150, 222, 151, 0, 152, 153, 154, 0, 223, 155,
	156, 0, 157, 158, 0, 159, 224, 225, 160, 0,
	166, 161, 162, 163, 165, 226, 164, 227, 0, 167,
	0, 168, 169, 0, 228, 229, 230, 0, 0, 170,
	231, 232, 0, 171, 172, 173, 174, 0, 0, 175,
	176, 177, 0, 0, 178, 179, 180, 233, 234, 71,
	0, 181, 0, 0, 0, 0, 182, 183, 184, 185,
	0, 0, 0, 0, 0, 74, 75, 0, 76, 0,
	0, 0, 0, 186, 0, 0, 0, 0, 77, 78,
	187, 188, 189, 190, 79, 191, 192, 0, 80, 193,
	194, 81, 0, 0, 195, 196, 197, 0, 198, 0,
	0, 0, 82, 83, 84, 0, 85, 0, 86, 87,
	88, 0, 0, 89, 90, 0, 0, 0, 0, 0,
	0, 91, 92, 93, 94, 199, 95, 200, 201, 0,
	96, 0, 97, 0, 0, 0, 98, 99, 0, 100,
	0, 0, 0, 202, 101, 102, 203, 0, 0, 0,
	103, 104, 204, 0, 105, 0, 106, 0, 0, 0,
	0, 107, 205, 0, 206, 0, 108, 109, 1221, 208,
	0, 0, 112, 0, 110, 0, 0, 111, 209, 210,
	211, 212, 0, 213, 0, 0, 113, 0, 114, 115,
	0, 0, 214, 0, 116, 0, 0, 117, 0, 0,
	118, 0, 119, 120, 121, 122, 123, 0, 124, 125,
	128, 126, 0, 127, 0, 215, 129, 216, 130, 131,
	0, 0, 0, 0, 0, 132, 217, 0, 133, 0,
	218, 134, 135, 136, 0, 219, 137, 220, 138, 0,
	139, 140, 141, 221, 142, 143, 0, 145, 146, 144,
	147, 0, 148, 0, 149, 150, 222, 151, 0, 152,
	153, 154, 0, 223, 155, 156, 0, 157, 158, 0,
	159, 224, 225, 160, 0, 166, 161, 162, 163, 165,
	226, 164, 227, 0, 167, 0, 168, 169, 0, 228,
	229, 230, 0, 0, 170, 231, 232, 0, 171, 172,
	173, 174, 0, 0, 175, 176, 177, 0, 0, 178,
	179, 180, 233, 234, 71, 0, 181, 0, 0, 0,
	0, 182, 183, 184, 185, 0, 0, 0, 0, 0,
	74, 75, 0, 76, 0, 0, 0, 0, 186, 0,
	0, 0, 0, 77, 78, 187, 188, 189, 190, 79,
	191, 192, 0, 80, 193, 194, 81, 0, 0, 195,
	196, 197, 0, 198, 0, 0, 0, 82, 83, 84,
	0, 85, 0, 86, 87, 88, 0, 0, 89, 90,
	0, 0, 0, 0, 0, 0, 91, 92, 93, 94,
	199, 95, 200, 201, 0, 96, 0, 97, 0, 0,
	0, 98, 99, 0, 100, 0, 0, 0, 202, 101,
	102, 203, 0, 0, 0, 103, 104, 204, 0, 105,
	0, 106, 0, 0, 0, 0, 107, 205, 0, 206,
	0, 108, 109, 1219, 208, 0, 0, 112, 0, 110,
	0, 0, 111, 209, 210, 211, 212, 0, 213, 0,
	0, 113, 0, 114, 115, 0, 0, 214, 0, 116,
	0, 0, 117, 0, 0, 118, 0, 119, 120, 121,
	122, 123, 0, 124, 125, 128, 126, 0, 127, 0,
	215, 129, 216, 130, 131, 0, 0, 0, 0, 0,
	132, 217, 0, 133, 0, 218, 134, 135, 136, 0,
	219, 137, 220, 138, 0, 139, 140, 141, 221, 142,
	143, 0, 145, 146, 144, 147, 0, 148, 0, 149,
	150, 222, 151, 0, 152, 153, 154, 0, 223, 155,
	156, 0, 157, 158, 0, 159, 224, 225, 160, 0,
	166, 161, 162, 163, 165, 226, 164, 227, 0, 167,
	0, 168, 169, 0, 228, 229, 230, 0, 0, 170,
	231, 232, 0, 171, 172, 173, 174, 0, 0, 175,
	176, 177, 0, 0, 178, 179, 180, 233, 234, 71,
	0, 181, 0, 0, 0, 0, 182, 183, 184, 185,
	0, 0, 0, 0, 0, 74, 75, 0, 76, 0,
	0, 0, 0, 186, 0, 0, 0, 0, 77, 78,
	187, 188, 189, 190, 79, 191, 192, 0, 80, 193,
	194, 81, 0, 0, 195, 196, 197, 0, 198, 0,
	0, 0, 82, 83, 84, 0, 85, 0, 86, 87,
	88, 0, 0, 89, 90, 0, 0, 0, 0, 0,
	0, 91, 92, 93, 94, 199, 95, 200, 201, 0,
	96, 0, 97, 0, 0, 0, 98, 99, 0, 100,
	0, 0, 0, 202, 101, 102, 203, 0, 0, 0,
	103, 104, 204, 0, 105, 0, 106, 0, 0, 0,
	0, 107, 205, 0, 206, 0, 108, 109, 1208, 208,
	0, 0, 112, 0, 110, 0, 0, 111, 209, 210,
	211, 212, 0, 213, 0, 0, 113, 0, 114, 115,
	0, 0, 214, 0, 116, 0, 0, 117, 0, 0,
	118, 0, 119, 120, 121, 122, 123, 0, 124, 125,
	128, 126, 0, 127, 0, 215, 129, 216, 130, 131,
	0, 0, 0, 0, 0, 132, 217, 0, 133, 0,
	218, 134, 135, 136, 0, 219, 137, 220, 138, 0,
	139, 140, 141, 221, 142, 143, 0, 145, 146, 144,
	147, 0, 148, 0, 149, 150, 222, 151, 0, 152,
	153, 154, 0, 223, 155, 156, 0, 157, 158, 0,
	159, 224, 225, 160, 0, 166, 161, 162, 163, 165,
	226, 164, 227, 0, 167, 0, 168, 169, 0, 228,
	229, 230, 0, 0, 170, 231, 232, 0, 171, 172,
	173, 174, 0, 0, 175, 176, 177, 0, 0, 178,
	179, 180, 233, 234, 71, 0, 181, 0, 0, 0,
	0, 182, 183, 184, 185, 0, 0, 0, 0, 0,
	74, 75, 0, 76, 0, 0, 0, 0, 186, 0,
	0, 0, 0, 77, 78, 187, 188, 189, 190, 79,
	191, 192, 0, 80, 193, 194, 81, 0, 0, 195,
	196, 197, 0, 198, 0, 0, 0, 82, 83, 84,
	0, 85, 0, 86, 87, 88, 0, 0, 89, 90,
	0, 0, 0, 0, 0, 0, 91, 92, 93, 94,
	199, 95, 200, 201, 0, 96, 0, 97, 0, 0,
	0, 98, 99, 0, 100, 0, 0, 0, 202, 101,
	102, 203, 0, 0, 0, 103, 104, 204, 0, 105,
	0, 106, 0, 0, 0, 0, 107, 205, 0, 206,
	0, 108, 109, 814, 208, 0, 0, 112, 0, 110,
	0, 0, 111, 209, 210, 211, 212, 0, 213, 0,
	0, 113, 0, 114, 115, 0, 0, 214, 0, 116,
	0, 0, 117, 0, 0, 118, 0, 119, 120, 121,
	122, 123, 0, 124, 125, 128, 126, 0, 127, 0,
	215, 129, 216, 130, 131, 0, 0, 0, 0, 0,
	132, 217, 0, 133, 0, 218, 134, 135, 136, 0,
	219, 137, 220, 138, 0, 139, 140, 141, 221, 142,
	143, 0, 145, 146, 144, 147, 0, 148, 0, 149,
	150, 222, 151, 0, 152, 153, 154, 0, 223, 155,
	156, 0, 157, 158, 0, 159, 224, 225, 160, 0,
	166, 161, 162, 163, 165, 226, 164, 227, 0, 167,
	0, 168, 169, 0, 228, 229, 230, 0, 0, 170,
	231, 232, 0, 171, 172, 173, 174, 0, 0, 175,
	176, 177, 0, 0, 178, 179, 180, 233, 234, 71,
	0, 181, 0, 0, 0, 0, 182, 183, 184, 185,
	0, 0, 0, 0, 0, 74, 75, 0, 76, 0,
	0, 0, 0, 186, 0, 0, 0, 0, 77, 78,
	187, 188, 189, 190, 79, 191, 192, 0, 80, 193,
	194, 81, 0, 0, 195, 196, 197, 0, 198, 0,
	0, 0, 82, 83, 84, 0, 85, 0, 86, 87,
	88, 0, 0, 89, 90, 0, 0, 0, 0, 0,
	0, 91, 92, 93, 94, 199, 95, 200, 201, 0,
	96, 0, 97, 0, 0, 0, 98, 99, 0, 100,
	0, 0, 0, 202, 101, 102, 203, 0, 0, 0,
	103, 104, 204, 0, 105, 0, 106, 0, 0, 0,
	0, 107, 205, 0, 206, 0, 108, 109, 207, 208,
	0, 0, 112, 0, 110, 0, 0, 111, 209, 210,
	211, 212, 0, 213, 0, 0, 113, 0, 114, 115,
	0, 0, 214, 0, 116, 0, 0, 117, 0, 0,
	118, 0, 119, 120, 121, 122, 123, 0, 124, 125,
	128, 126, 0, 127, 0, 215, 129, 216, 130, 131,
	0, 0, 0, 0, 0, 132, 217, 0, 133, 0,
	218, 134, 135, 136, 0, 219, 137, 220, 138, 0,
	139, 140, 141, 221, 142, 143, 0, 145, 146, 144,
	147, 0, 148, 0, 149, 150, 222, 151, 0, 271,
	153, 154, 0, 223, 155, 156, 0, 157, 158, 0,
	159, 224, 225, 160, 0, 166, 161, 162, 163, 165,
	226, 164, 227, 0, 167, 0, 168, 169, 0, 228,
	229, 230, 0, 0, 170, 231, 232, 0, 171, 172,
	173, 174, 0, 0, 175, 176, 177, 0, 0, 178,
	179, 180, 233, 234, 71, 0, 181, 0, 0, 0,
	0, 182, 183, 184, 185, 0, 0, 0, 0, 0,
	74, 75, 0, 76, 0, 0, 0, 0, 186, 0,
	685, 0, 0, 77, 78, 187, 188, 189, 190, 79,
	191, 192, 0, 80, 193, 194, 81, 0, 0, 195,
	196, 197, 0, 198, 0, 0, 0, 82, 83, 84,
	0, 85, 0, 86, 87, 88, 0, 0, 89, 90,
	0, 0, 0, 0, 0, 0, 91, 92, 93, 94,
	199, 95, 200, 201, 0, 96, 0, 97, 0, 0,
	0, 98, 99, 0, 100, 0, 0, 0, 202, 101,
	102, 203, 0, 0, 0, 103, 104, 204, 0, 105,
	0, 106, 0, 0, 0, 0, 107, 205, 0, 206,
	0, 108, 109, 207, 208, 0, 0, 112, 0, 110,
	0, 0, 111, 209, 210, 211, 212, 0, 213, 0,
	0, 113, 0, 114, 115, 0, 0, 214, 0, 116,
	0, 0, 117, 0, 0, 118, 0, 119, 120, 121,
	122, 123, 0, 124, 125, 128, 126, 0, 127, 0,
	215, 129, 216, 130, 131, 0, 0, 0, 0, 0,
	132, 217, 0, 133, 0, 218, 134, 135, 136, 0,
	219, 137, 220, 138, 0, 139, 140, 141, 221, 142,
	143, 0, 145, 146, 144, 147, 0, 148, 0, 149,
	150, 222, 151, 0, 152, 153, 154, 0, 223, 155,
	156, 0, 0, 158, 0, 159, 224, 225, 160, 0,
	166, 161, 162, 163, 165, 226, 164, 227, 0, 167,
	0, 168, 169, 0, 228, 229, 230, 0, 0, 170,
	231, 232, 0, 171, 172, 173, 174, 0, 0, 175,
	176, 177, 0, 0, 178, 179, 180, 233, 234, 71,
	0, 181, 0, 0, 0, 0, 182, 183, 184, 185,
	0, 0, 0, 0, 0, 74, 75, 0, 76, 0,
	0, 0, 0, 186, 0, 0, 0, 0, 77, 78,
	187, 188, 189, 190, 79, 191, 192, 0, 80, 193,
	194, 81, 0, 0, 195, 196, 197, 0, 198, 0,
	0, 0, 82, 83, 84, 0, 85, 0, 86, 87,
	88, 0, 0, 89, 90, 0, 0, 0, 0, 0,
	0, 91, 92, 93, 94, 199, 95, 200, 201, 0,
	96, 0, 97, 0, 0, 0, 98, 99, 0, 100,
	0, 0, 0, 202, 101, 102, 203, 0, 0, 0,
	103, 104, 204, 0, 105, 0, 106, 0, 0, 0,
	0, 107, 205, 0, 206, 0, 108, 109, 449, 208,
	0, 0, 112, 0, 110, 0, 0, 111, 209, 210,
	211, 212, 0, 213, 0, 0, 113, 0, 114, 115,
	0, 0, 214, 0, 116, 0, 0, 117, 0, 0,
	118, 0, 119, 120, 121, 122, 123, 0, 124, 125,
	128, 126, 0, 127, 0, 215, 129, 216, 130, 131,
	0, 0, 0, 0, 0, 132, 217, 0, 133, 0,
	218, 134, 135, 136, 0, 219, 137, 220, 138, 0,
	139, 140, 141, 221, 142, 143, 0, 145, 146, 144,
	147, 0, 148, 0, 149, 150, 222, 151, 0, 152,
	153, 154, 0, 223, 155, 156, 0, 157, 158, 0,
	159, 224, 225, 160, 0, 166, 161, 162, 163, 165,
	226, 164, 227, 0, 167, 0, 168, 169, 0, 228,
	229, 230, 0, 0, 170, 231, 232, 0, 171, 172,
	173, 174, 0, 0, 175, 176, 177, 0, 0, 178,
	179, 180, 233, 234, 71, 0, 181, 0, 0, 0,
	0, 182, 183, 184, 185, 0, 0, 0, 0, 0,
	74, 75, 0, 76, 0, 0, 0, 0, 186, 0,
	0, 0, 0, 77, 78, 187, 188, 189, 190, 79,
	191, 192, 0, 80, 193, 194, 81, 0, 0, 195,
	196, 197, 0, 198, 0, 0, 0, 82, 83, 84,
	0, 85, 0, 86, 87, 88, 0, 0, 89, 90,
	0, 0, 0, 0, 0, 0, 91, 92, 93, 94,
	199, 95, 200, 201, 0, 96, 0, 97, 0, 0,
	0, 98, 99, 0, 100, 0, 0, 0, 202, 101,
	102, 203, 0, 0, 0, 103, 104, 204, 0, 105,
	0, 106, 0, 0, 0, 0, 107, 205, 0, 206,
	0, 108, 109, 445, 208, 0, 0, 112, 0, 110,
	0, 0, 111, 209, 210, 211, 212, 0, 213, 0,
	0, 113, 0, 114, 115, 0, 0, 214, 0, 116,
	0, 0, 117, 0, 0, 118, 0, 119, 120, 121,
	122, 123, 0, 124, 125, 128, 126, 0, 127, 0,
	215, 129, 216, 130, 131, 0, 0, 0, 0, 0,
	132, 217, 0, 133, 0, 218, 134, 135, 136, 0,
	219, 137, 220, 138, 0, 139, 140, 141, 221, 142,
	143, 0, 145, 146, 144, 147, 0, 148, 0, 149,
	150, 222, 151, 0, 152, 153, 154, 0, 223, 155,
	156, 0, 157, 158, 0, 159, 224, 225, 160, 0,
	166, 161, 162, 163, 165, 226, 164, 227, 0, 167,
	0, 168, 169, 0, 228, 229, 230, 0, 0, 170,
	231, 232, 0, 171, 172, 173, 174, 0, 0, 175,
	176, 177, 0, 0, 178, 179, 180, 233, 234, 71,
	0, 181, 0, 0, 0, 0, 182, 183, 184, 185,
	0, 0, 0, 0, 0, 74, 75, 0, 76, 0,
	0, 0, 0, 186, 0, 0, 0, 0, 77, 78,
	187, 188, 189, 190, 79, 191, 192, 0, 80, 193,
	194, 81, 0, 0, 195, 196, 406, 0, 198, 0,
	0, 0, 82, 83, 84, 0, 85, 0, 86, 87,
	88, 0, 0, 89, 90, 0, 0, 0, 0, 0,
	0, 91, 92, 93, 94, 199, 95, 200, 201, 0,
	96, 0, 97, 0, 0, 0, 98, 99, 0, 100,
	0, 0, 0, 202, 101, 102, 203, 0, 0, 0,
	103, 104, 204, 0, 105, 0, 106, 0, 0, 0,
	0, 107, 205, 0, 206, 0, 108, 109, 207, 208,
	0, 0, 112, 0, 110, 0, 0, 111, 209, 210,
	211, 212, 0, 213, 0, 0, 113, 0, 114, 115,
	0, 0, 214, 0, 116, 0, 0, 117, 0, 0,
	118, 0, 119, 120, 121, 122, 282, 0, 124, 125,
	128, 126, 0, 127, 0, 215, 129, 216, 130, 131,
	0, 0, 0, 0, 0, 132, 217, 0, 133, 0,
	218, 134, 135, 136, 0, 219, 137, 220, 138, 0,
	139, 140, 141, 221, 142, 143, 0, 145, 146, 144,
	147, 0, 148, 0, 149, 150, 222, 151, 0, 152,
	153, 154, 0, 223, 155, 156, 0, 157, 158, 0,
	159, 224, 225, 160, 0, 166, 161, 162, 163, 165,
	226, 164, 227, 0, 167, 0, 168, 169, 0, 281,
	229, 230, 0, 0, 277, 231, 232, 0, 171, 172,
	173, 174, 0, 0, 175, 176, 177, 0, 0, 178,
	179, 180, 233, 234, 71, 0, 181, 0, 0, 0,
	0, 182, 183, 184, 185, 0, 0, 0, 0, 0,
	74, 75, 0, 76, 0, 0, 0, 0, 186, 0,
	0, 0, 0, 77, 78, 187, 188, 189, 190, 79,
	191, 192, 0, 80, 193, 194, 81, 0, 0, 195,
	196, 197, 0, 198, 0, 0, 0, 82, 83, 84,
	0, 85, 0, 86, 87, 88, 0, 0, 89, 90,
	0, 0, 0, 0, 0, 0, 91, 92, 93, 94,
	199, 95, 200, 201, 0, 96, 0, 97, 0, 0,
	0, 98, 99, 0, 100, 0, 0, 0, 202, 101,
	102, 203, 0, 0, 0, 103, 104, 204, 0, 105,
	0, 106, 0, 0, 0, 0, 107, 205, 0, 206,
	0, 108, 109, 207, 208, 0, 0, 112, 0, 110,
	0, 0, 111, 209, 210, 211, 212, 0, 213, 0,
	0, 113, 0, 114, 115, 0, 0, 214, 0, 116,
	0, 0, 117, 0, 0, 118, 0, 119, 120, 121,
	122, 282, 0, 124, 125, 128, 126, 0, 127, 0,
	215, 129, 216, 130, 131, 0, 0, 0, 0, 0,
	132, 217, 0, 133, 0, 218, 134, 135, 136, 0,
	219, 137, 220, 138, 0, 139, 140, 141, 221, 142,
	143, 0, 145, 146, 144, 147, 0, 148, 0, 149,
	150, 222, 151, 0, 152, 153, 154, 0, 223, 155,
	156, 0, 157, 158, 0, 159, 224, 225, 160, 0,
	166, 161, 162, 163, 165, 226, 164, 227, 0, 167,
	0, 168, 169, 0, 281, 229, 230, 0, 0, 277,
	231, 232, 0, 171, 172, 173, 174, 0, 0, 175,
	176, 177, 0, 0, 178, 179, 180, 233, 234, 71,
	0, 181, 0, 0, 0, 0, 182, 183, 184, 185,
	0, 0, 0, 0, 0, 74, 75, 0, 76, 0,
	0, 0, 0, 186, 0, 0, 0, 0, 77, 78,
	187, 188, 189, 190, 79, 191, 192, 0, 80, 193,
	194, 81, 0, 0, 195, 196, 197, 0, 198, 0,
	0, 0, 82, 83, 84, 0, 85, 0, 86, 87,
	88, 0, 0, 89, 90, 0, 0, 0, 0, 0,
	0, 91, 92, 93, 94, 199, 95, 200, 201, 0,
	96, 0, 97, 0, 0, 0, 98, 99, 0, 100,
	0, 0, 0, 202, 101, 102, 203, 0, 0, 0,
	103, 104, 204, 0, 105, 0, 106, 0, 0, 0,
	0, 107, 205, 0, 206, 0, 108, 109, 370, 208,
	0, 0, 112, 0, 110, 0, 0, 111, 209, 210,
	211, 212, 0, 213, 0, 0, 113, 0, 114, 115,
	0, 0, 214, 0, 116, 0, 0, 117, 0, 0,
	118, 0, 119, 120, 121, 122, 123, 0, 124, 125,
	128, 126, 0, 127, 0, 215, 129, 216, 130, 131,
	0, 0, 0, 0, 0, 132, 217, 0, 133, 0,
	218, 134, 135, 136, 0, 219, 137, 220, 138, 0,
	139, 140, 141, 221, 142, 143, 0, 145, 146, 144,
	147, 0, 148, 0, 149, 150, 222, 151, 0, 152,
	153, 154, 0, 223, 155, 156, 0, 157, 158, 0,
	159, 224, 225, 160, 0, 166, 161, 162, 163, 165,
	226, 164, 227, 0, 167, 0, 168, 169, 0, 228,
	229, 230, 0, 0, 170, 231, 232, 0, 171, 172,
	173, 174, 0, 0, 175, 176, 177, 0, 0, 178,
	179, 180, 233, 234, 71, 0, 181, 0, 0, 0,
	0, 182, 183, 184, 185, 0, 0, 0, 0, 0,
	74, 75, 0, 76, 0, 0, 0, 0, 186, 0,
	0, 0, 0, 77, 78, 187, 188, 189, 190, 79,
	191, 192, 0, 80, 193, 194, 81, 0, 0, 195,
	196, 197, 0, 198, 0, 0, 0, 82, 83, 84,
	0, 85, 0, 86, 87, 88, 0, 0, 89, 90,
	0, 0, 0, 0, 0, 0, 91, 92, 93, 94,
	199, 95, 200, 201, 0, 96, 0, 97, 0, 0,
	0, 98, 99, 0, 100, 0, 0, 0, 202, 101,
	102, 203, 0, 0, 0, 103, 104, 204, 0, 105,
	0, 106, 0, 0, 0, 0, 107, 205, 0, 206,
	0, 108, 109, 367, 208, 0, 0, 112, 0, 110,
	0, 0, 111, 209, 210, 211, 212, 0, 213, 0,
	0, 113, 0, 114, 115, 0, 0, 214, 0, 116,
	0, 0, 117, 0, 0, 118, 0, 119, 120, 121,
	122, 123, 0, 124, 125, 128, 126, 0, 127, 0,
	215, 129, 216, 130, 131, 0, 0, 0, 0, 0,
	132, 217, 0, 133, 0, 218, 134, 135, 136, 0,
	219, 137, 220, 138, 0, 139, 140, 141, 221, 142,
	143, 0, 145, 146, 144, 147, 0, 148, 0, 149,
	150, 222, 151, 0, 152, 153, 154, 0, 223, 155,
	156, 0, 157, 158, 0, 159, 224, 225, 160, 0,
	166, 161, 162, 163, 165, 226, 164, 227, 0, 167,
	0, 168, 169, 0, 228, 229, 230, 0, 0, 170,
	231, 232, 0, 171, 172, 173, 174, 0, 0, 175,
	176, 177, 0, 0, 178, 179, 180, 233, 234, 71,
	0, 181, 0, 0, 0, 0, 182, 183, 184, 185,
	0, 0, 0, 0, 0, 74, 75, 0, 76, 0,
	0, 0, 0, 186, 0, 0, 0, 0, 77, 78,
	187, 188, 189, 190, 79, 191, 192, 0, 80, 193,
	194, 81, 0, 0, 195, 196, 197, 0, 198, 0,
	0, 0, 82, 83, 84, 0, 85, 0, 86, 87,
	88, 0, 0, 89, 90, 0, 0, 0, 0, 0,
	0, 91, 92, 93, 94, 199, 95, 200, 201, 0,
	96, 0, 97, 0, 0, 0, 98, 99, 0, 100,
	0, 0, 0, 202, 101, 102, 203, 0, 0, 0,
	103, 104, 204, 0, 105, 0, 106, 0, 0, 0,
	0, 107, 205, 0, 206, 0, 108, 109, 365, 208,
	0, 0, 112, 0, 110, 0, 0, 111, 209, 210,
	211, 212, 0, 213, 0, 0, 113, 0, 114, 115,
	0, 0, 214, 0, 116, 0, 0, 117, 0, 0,
	118, 0, 119, 120, 121, 122, 123, 0, 124, 125,
	128, 126, 0, 127, 0, 215, 129, 216, 130, 131,
	0, 0, 0, 0, 0, 132, 217, 0, 133, 0,
	218, 134, 135, 136, 0, 219, 137, 220, 138, 0,
	139, 140, 141, 221, 142, 143, 0, 145, 146, 144,
	147, 0, 148, 0, 149, 150, 222, 151, 0, 152,
	153, 154, 0, 223, 155, 156, 0, 157, 158, 0,
	159, 224, 225, 160, 0, 166, 161, 162, 163, 165,
	226, 164, 227, 0, 167, 0, 168, 169, 0, 228,
	229, 230, 0, 0, 170, 231, 232, 0, 171, 172,
	173, 174, 0, 0, 175, 176, 177, 0, 0, 178,
	179, 180, 233, 234, 71, 0, 181, 0, 0, 0,
	0, 182, 183, 184, 185, 0, 0, 0, 0, 0,
	74, 75, 0, 76, 0, 0, 0, 0, 186, 0,
	0, 0, 0, 77, 78, 187, 188, 189, 190, 79,
	191, 192, 0, 80, 193, 194, 81, 0, 0, 195,
	196, 197, 0, 198, 0, 0, 0, 82, 83, 84,
	0, 85, 0, 86, 87, 88, 0, 0, 89, 90,
	0, 0, 0, 0, 0, 0, 91, 92, 93, 94,
	199, 95, 200, 201, 0, 96, 0, 97, 0, 0,
	0, 98, 99, 0, 100, 0, 0, 0, 202, 101,
	102, 203, 0, 0, 0, 103, 104, 204, 0, 105,
	0, 106, 0, 0, 0, 0, 107, 205, 0, 206,
	0, 108, 109, 348, 208, 0, 0, 112, 0, 110,
	0, 0, 111, 209, 210, 211, 212, 0, 213, 0,
	0, 113, 0, 114, 115, 0, 0, 214, 0, 116,
	0, 0, 117, 0, 0, 118, 0, 119, 120, 121,
	122, 123, 0, 124, 125, 128, 126, 0, 127, 0,
	215, 129, 216, 130, 131, 0, 0, 0, 0, 0,
	132, 217, 0, 133, 0, 218, 134, 135, 136, 0,
	219, 137, 220, 138, 0, 139, 140, 141, 221, 142,
	143, 0, 145, 146, 144, 147, 0, 148, 0, 149,
	150, 222, 151, 0, 152, 153, 154, 0, 223, 155,
	156, 0, 157, 158, 0, 159, 224, 225, 160, 0,
	166, 161, 162, 163, 165, 226, 164, 227, 0, 167,
	0, 168, 169, 0, 228, 229, 230, 0, 0, 170,
	231, 232, 0, 171, 172, 173, 174, 0, 0, 175,
	176, 177, 0, 0, 178, 179, 180, 233, 234, 71,
	0, 181, 0, 0, 0, 0, 182, 183, 184, 185,
	0, 0, 0, 0, 0, 74, 75, 0, 76, 0,
	0, 0, 0, 186, 0, 0, 0, 0, 77, 78,
	187, 188, 189, 190, 79, 191, 192, 0, 80, 193,
	194, 81, 0, 0, 195, 196, 197, 0, 198, 0,
	0, 0, 82, 83, 84, 0, 85, 0, 86, 87,
	88, 0, 0, 89, 90, 0, 0, 0, 0, 0,
	0, 91, 92, 93, 94, 199, 95, 200, 201, 0,
	96, 0, 97, 0, 0, 0, 98, 99, 0, 100,
	0, 0, 0, 202, 101, 102, 203, 0, 0, 0,
	103, 104, 204, 0, 105, 0, 106, 0, 0, 0,
	0, 107, 205, 0, 206, 0, 108, 109, 207, 208,
	0, 0, 112, 0, 110, 0, 0, 111, 209, 210,
	211, 212, 0, 213, 0, 0, 113, 0, 114, 115,
	0, 0, 214, 0, 116, 0, 0, 117, 0, 0,
	118, 0, 119, 120, 121, 122, 123, 0, 124, 125,
	128, 126, 0, 127, 0, 215, 129, 216, 130, 131,
	0, 0, 0, 0, 0, 132, 217, 0, 133, 0,
	218, 134, 135, 136, 0, 219, 137, 220, 138, 0,
	139, 140, 141, 221, 329, 143, 0, 145, 146, 144,
	147, 0, 148, 0, 149, 150, 222, 151, 0, 152,
	153, 154, 0, 223, 155, 156, 0, 157, 158, 0,
	159, 224, 225, 160, 0, 166, 161, 162, 163, 165,
	226, 164, 227, 0, 167, 0, 168, 169, 0, 228,
	229, 230, 0, 0, 170, 231, 232, 0, 171, 172,
	173, 174, 0, 0, 175, 176, 177, 0, 0, 178,
	179, 180, 233, 234, 71, 0, 181, 0, 0, 0,
	0, 182, 183, 184, 185, 0, 0, 0, 0, 0,
	74, 75, 0, 76, 0, 0, 0, 0, 186, 0,
	0, 0, 0, 77, 78, 187, 188, 189, 190, 79,
	191, 192, 0, 80, 193, 194, 81, 0, 0, 195,
	196, 197, 0, 198, 0, 0, 0, 82, 83, 84,
	0, 85, 0, 86, 87, 88, 0, 0, 89, 90,
	0, 0, 0, 0, 0, 0, 91, 92, 93, 94,
	199, 95, 200, 201, 0, 96, 0, 97, 0, 0,
	0, 98, 99, 0, 100, 0, 0, 0, 202, 101,
	102, 203, 0, 0, 0, 103, 104, 204, 0, 105,
	0, 106, 0, 0, 0, 0, 107, 205, 0, 206,
	0, 108, 109, 207, 208, 0, 0, 112, 0, 110,
	0, 0, 111, 209, 210, 211, 212, 0, 213, 0,
	0, 113, 0, 114, 115, 0, 0, 214, 0, 116,
	0, 0, 274, 0, 0, 118, 0, 119, 120, 121,
	122, 282, 0, 124, 125, 128, 126, 0, 127, 0,
	215, 129, 216, 130, 131, 0, 0, 0, 0, 0,
	132, 217, 0, 133, 0, 218, 134, 135, 136, 0,
	219, 137, 220, 138, 0, 139, 140, 141, 221, 142,
	143, 0, 145, 146, 144, 147, 0, 148, 0, 149,
	150, 276, 151, 0, 152, 153, 154, 0, 223, 155,
	275, 0, 157, 158, 0, 159, 224, 225, 160, 0,
	166, 161, 162, 163, 165, 226, 164, 227, 0, 167,
	0, 168, 169, 0, 281, 229, 230, 0, 0, 277,
	231, 232, 0, 171, 172, 173, 174, 0, 0, 175,
	176, 177, 0, 0, 178, 179, 180, 233, 234, 71,
	0, 181, 0, 0, 0, 0, 182, 183, 184, 185,
	0, 0, 0, 0, 0, 74, 75, 0, 76, 0,
	0, 0, 0, 186, 0, 0, 0, 0, 77, 78,
	187, 188, 189, 190, 79, 191, 192, 0, 80, 193,
	194, 81, 0, 0, 195, 196, 197, 0, 198, 0,
	0, 0, 82, 83, 84, 0, 85, 0, 86, 87,
	88, 0, 0, 89, 90, 0, 0, 0, 0, 0,
	0, 91, 92, 93, 94, 199, 95, 200, 201, 0,
	96, 0, 97, 0, 0, 0, 98, 99, 0, 100,
	0, 0, 0, 202, 101, 102, 203, 0, 0, 0,
	103, 104, 204, 0, 105, 0, 106, 0, 0, 0,
	0, 107, 205, 0, 206, 0, 108, 109, 207, 208,
	0, 0, 112, 0, 110, 0, 0, 111, 209, 210,
	211, 212, 0, 213, 0, 0, 113, 0, 114, 115,
	0, 0, 214, 0, 116, 0, 0, 117, 0, 0,
	118, 0, 119, 120, 121, 122, 123, 0, 124, 125,
	128, 126, 0, 127, 0, 215, 129, 216, 130, 131,
	0, 0, 0, 0, 0, 132, 217, 0, 133, 0,
	218, 134, 135, 0, 0, 219, 137, 220, 138, 0,
	139, 0, 141, 221, 142, 143, 0, 145, 146, 144,
	147, 0, 148, 0, 149, 150, 222, 0, 0, 152,
	153, 154, 0, 223, 155, 156, 0, 157, 158, 0,
	159, 224, 225, 160, 0, 166, 161, 162, 163, 165,
	226, 164, 227, 0, 167, 0, 168, 169, 0, 228,
	229, 230, 0, 0, 170, 231, 232, 0, 171, 172,
	173, 174, 0, 0, 175, 176, 177, 0, 0, 178,
	179, 180, 233, 234, 0, 0, 181, 0, 0, 0,
	0, 182, 183, 184, 185, 840, 841, 0, 860, 861,
	862, 870, 871, 872, 0, 0, 0, 0, 0, 0,
	0, 863, 0, 0, 0, 0, 0, 0, 843, 0,
	874, 840, 841, 0, 860, 861, 862, 870, 871, 872,
	0, 0, 0, 0, 0, 0, 0, 863, 0, 842,
	0, 0, 0, 0, 843, 857, 874, 0, 0, 0,
	840, 841, 0, 860, 861, 862, 870, 871, 872, 0,
	0, 0, 0, 0, 0, 842, 863, 0, 0, 0,
	0, 857, 0, 843, 0, 874, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 848, 842, 0, 0, 0, 0, 0,
	857, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	867, 875, 0, 0, 0, 0, 0, 0, 0, 848,
	0, 0, 0, 0, 0, 873, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 865, 867, 875, 0, 0,
	0, 858, 0, 0, 0, 0, 0, 0, 848, 0,
	0, 873, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 865, 0, 864, 0, 867, 875, 858, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	873, 0, 0, 0, 0, 0, 0, 0, 0, 864,
	865, 0, 0, 0, 0, 0, 858, 0, 859, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 868,
	0, 0, 0, 0, 0, 0, 0, 0, 864, 0,
	0, 0, 0, 0, 859, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 868, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 859, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 868, 866, 0, 0, 854, 855,
	856, 0, 853, 850, 851, 852, 844, 845, 846, 847,
	849, 0, 869, 0, 0, 0, 0, 0, 0, 1404,
	0, 866, 0, 0, 854, 855, 856, 0, 853, 850,
	851, 852, 844, 845, 846, 847, 849, 0, 869, 0,
	0, 0, 0, 1362, 1363, 1403, 1380, 1381, 1382, 0,
	866, 0, 0, 854, 855, 856, 0, 853, 850, 851,
	852, 844, 845, 846, 847, 849, 0, 869, 0, 0,
	0, 0, 840, 841, 1402, 860, 861, 862, 870, 871,
	872, 0, 0, 0, 0, 0, 0, 0, 863, 0,
	0, 0, 0, 1377, 0, 843, 0, 874, 840, 841,
	0, 860, 861, 862, 870, 871, 872, 0, 0, 0,
	0, 0, 0, 0, 863, 0, 842, 0, 0, 0,
	0, 843, 857, 874, 0, 0, 0, 840, 841, 0,
	860, 861, 862, 870, 871, 872, 0, 0, 0, 0,
	0, 1368, 842, 863, 0, 0, 0, 0, 857, 0,
	843, 0, 874, 0, 0, 0, 0, 0, 0, 1384,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	848, 842, 0, 1383, 0, 0, 0, 857, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 867, 875, 1378,
	0, 0, 0, 0, 0, 0, 848, 0, 0, 0,
	0, 0, 873, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 865, 867, 875, 0, 0, 0, 858, 0,
	0, 0, 0, 0, 0, 848, 0, 0, 873, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 865, 0,
	864, 0, 867, 875, 858, 0, 1379, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 873, 0, 0,
	0, 0, 0, 0, 0, 0, 864, 865, 0, 0,
	0, 0, 0, 858, 0, 859, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 868, 0, 0, 0,
	0, 0, 0, 0, 0, 864, 0, 0, 0, 0,
	0, 859, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 868, 0, 0, 0, 1374, 1375, 1376, 0,
	1373, 1370, 1371, 1372, 1364, 1365, 1366, 1367, 1369, 0,
	859, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 868, 866, 0, 0, 854, 855, 856, 0, 853,
	850, 851, 852, 844, 845, 846, 847, 849, 0, 869,
	0, 0, 0, 0, 0, 0, 1355, 0, 866, 0,
	0, 854, 855, 856, 0, 853, 850, 851, 852, 844,
	845, 846, 847, 849, 0, 869, 0, 0, 0, 1807,
	0, 0, 0, 0, 0, 0, 0, 866, 0, 0,
	854, 855, 856, 0, 853, 850, 851, 852, 844, 845,
	846, 847, 849, 0, 869, 0, 840, 841, 1805, 860,
	861, 862, 870, 871, 872, 0, 0, 0, 0, 0,
	0, 0, 863, 0, 0, 0, 0, 0, 0, 843,
	0, 874, 840, 841, 0, 860, 861, 862, 870, 871,
	872, 0, 0, 0, 0, 0, 0, 0, 863, 0,
	842, 0, 0, 0, 0, 843, 857, 874, 0, 0,
	0, 840, 841, 0, 860, 861, 862, 870, 871, 872,
	0, 0, 0, 0, 0, 0, 842, 863, 0, 0,
	0, 0, 857, 0, 843, 0, 874, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 848, 842, 0, 0, 0, 0,
	0, 857, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 867, 875, 0, 0, 0, 0, 0, 0, 0,
	848, 0, 0, 0, 0, 0, 873, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 865, 867, 875, 0,
	0, 0, 858, 0, 0, 0, 0, 0, 0, 848,
	0, 0, 873, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 865, 0, 864, 0, 867, 875, 858, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 873, 0, 0, 0, 0, 0, 0, 0, 0,
	864, 865, 0, 0, 0, 0, 0, 858, 0, 859,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	868, 0, 0, 0, 0, 0, 0, 0, 0, 864,
	0, 0, 0, 0, 0, 859, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 868, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 859, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 868, 866, 0, 0, 854,
	855, 856, 0, 853, 850, 851, 852, 844, 845, 846,
	847, 849, 0, 869, 0, 0, 0, 1786, 0, 0,
	0, 0, 866, 0, 0, 854, 855, 856, 0, 853,
	850, 851, 852, 844, 845, 846, 847, 849, 0, 869,
	0, 0, 0, 1761, 0, 0, 0, 0, 0, 0,
	0, 866, 0, 0, 854, 855, 856, 0, 853, 850,
	851, 852, 844, 845, 846, 847, 849, 0, 869, 0,
	840, 841, 1756, 860, 861, 862, 870, 871, 872, 0,
	0, 0, 0, 0, 0, 0, 863, 0, 0, 0,
	0, 0, 0, 843, 0, 874, 840, 841, 0, 860,
	861, 862, 870, 871, 872, 0, 0, 0, 0, 0,
	0, 0, 863, 0, 842, 0, 0, 0, 0, 843,
	857, 874, 0, 0, 0, 840, 841, 0, 860, 861,
	862, 870, 871, 872, 0, 0, 0, 0, 0, 0,
	842, 863, 0, 0, 0, 0, 857, 0, 843, 0,
	874, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 848, 842,
	0, 0, 0, 0, 0, 857, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 867, 875, 0, 0, 0,
	0, 0, 0, 0, 848, 0, 0, 0, 0, 0,
	873, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	865, 867, 875, 0, 0, 0, 858, 0, 0, 0,
	0, 0, 0, 848, 0, 0, 873, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 865, 0, 864, 0,
	867, 875, 858, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 873, 0, 0, 0, 0,
	0, 0, 0, 0, 864, 865, 0, 0, 0, 0,
	0, 858, 0, 859, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 868, 0, 0, 0, 0, 0,
	0, 0, 0, 864, 0, 0, 0, 0, 0, 859,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	868, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 859, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 868,
	866, 0, 0, 854, 855, 856, 0, 853, 850, 851,
	852, 844, 845, 846, 847, 849, 0, 869, 0, 0,
	0, 1752, 0, 0, 0, 0, 866, 0, 0, 854,
	855, 856, 0, 853, 850, 851, 852, 844, 845, 846,
	847, 849, 0, 869, 0, 0, 0, 1687, 0, 0,
	0, 0, 0, 0, 0, 866, 0, 0, 854, 855,
	856, 0, 853, 850, 851, 852, 844, 845, 846, 847,
	849, 0, 869, 0, 840, 841, 1686, 860, 861, 862,
	870, 871, 872, 0, 0, 0, 0, 0, 0, 0,
	863, 0, 0, 0, 0, 0, 0, 843, 0, 874,
	840, 841, 0, 860, 861, 862, 870, 871, 872, 0,
	0, 0, 0, 0, 0, 0, 863, 0, 842, 0,
	0, 0, 0, 843, 857, 874, 0, 0, 0, 840,
	841, 0, 860, 861, 862, 870, 871, 872, 0, 0,
	0, 0, 0, 0, 842, 863, 0, 0, 0, 0,
	857, 0, 843, 0, 874, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 848, 842, 0, 0, 0, 0, 0, 857,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 867,
	875, 0, 0, 0, 0, 0, 0, 0, 848, 0,
	0, 0, 0, 0, 873, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 865, 867, 875, 0, 0, 0,
	858, 0, 0, 0, 0, 0, 0, 848, 0, 0,
	873, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	865, 0, 864, 0, 867, 875, 858, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 873,
	0, 0, 0, 0, 0, 0, 0, 0, 864, 865,
	0, 0, 0, 0, 0, 858, 0, 859, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 868, 0,
	0, 0, 0, 0, 0, 0, 0, 864, 0, 0,
	0, 0, 0, 859, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 868, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 859, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 868, 866, 0, 0, 854, 855, 856,
	0, 853, 850, 851, 852, 844, 845, 846, 847, 849,
	0, 869, 0, 0, 0, 1594, 0, 0, 0, 0,
	866, 0, 0, 854, 855, 856, 0, 853, 850, 851,
	852, 844, 845, 846, 847, 849, 0, 869, 0, 0,
	0, 1528, 0, 0, 0, 0, 0, 0, 0, 866,
	0, 0, 854, 855, 856, 0, 853, 850, 851, 852,
	844, 845, 846, 847, 849, 0, 869, 0, 840, 841,
	1512, 860, 861, 862, 870, 871, 872, 0, 0, 0,
	0, 0, 0, 0, 863, 0, 0, 0, 0, 0,
	0, 843, 0, 874, 840, 841, 0, 860, 861, 862,
	870, 871, 872, 0, 0, 0, 0, 0, 0, 0,
	863, 0, 842, 0, 0, 0, 0, 843, 857, 874,
	0, 0, 0, 840, 841, 0, 860, 861, 862, 870,
	871, 872, 0, 0, 0, 0, 0, 0, 842, 863,
	0, 0, 0, 0, 857, 0, 843, 0, 874, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 848, 842, 0, 0,
	0, 0, 0, 857, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 867, 875, 0, 0, 0, 0, 0,
	0, 0, 848, 0, 0, 0, 0, 0, 873, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 865, 867,
	875, 0, 0, 0, 858, 0, 0, 0, 0, 0,
	0, 848, 1875, 0, 873, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 865, 0, 864, 0, 867, 875,
	858, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 873, 0, 0, 0, 0, 0, 0,
	0, 0, 864, 865, 0, 0, 0, 0, 0, 858,
	0, 859, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 868, 0, 0, 0, 0, 0, 0, 0,
	0, 864, 0, 0, 0, 0, 0, 859, 0, 0,
	0, 0, 0, 0, 1874, 0, 0, 0, 868, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 859, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 868, 866, 0,
	0, 854, 855, 856, 0, 853, 850, 851, 852, 844,
	845, 846, 847, 849, 0, 869, 0, 0, 0, 1130,
	0, 0, 0, 0, 866, 0, 0, 854, 855, 856,
	0, 853, 850, 851, 852, 844, 845, 846, 847, 849,
	0, 869, 0, 1442, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 866, 0, 0, 854, 855, 856, 0,
	853, 850, 851, 852, 844, 845, 846, 847, 849, 0,
	869, 840, 841, 0, 860, 861, 862, 870, 871, 872,
	0, 0, 0, 0, 0, 0, 0, 863, 0, 0,
	0, 0, 0, 0, 843, 0, 874, 840, 841, 0,
	860, 861, 862, 870, 871, 872, 0, 0, 0, 0,
	0, 0, 0, 863, 0, 842, 0, 0, 1063, 0,
	843, 857, 874, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 842, 0, 0, 0, 0, 0, 857, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 848,
	0, 1394, 0, 0, 1393, 1064, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 867, 875, 0, 0,
	0, 0, 0, 0, 0, 848, 0, 0, 0, 0,
	0, 873, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 865, 867, 875, 0, 0, 0, 858, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 873, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 865, 0, 864,
	0, 0, 0, 858, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 864, 0, 0, 0, 0,
	0, 0, 0, 0, 859, 0, 0, 0, 0, 0,
	0, 877, 0, 0, 0, 868, 0, 840, 841, 0,
	860, 861, 862, 870, 871, 872, 0, 0, 0, 0,
	859, 0, 0, 863, 0, 0, 0, 876, 0, 0,
	843, 868, 874, 840, 841, 0, 860, 861, 862, 870,
	871, 872, 0, 0, 0, 0, 0, 0, 0, 863,
	0, 842, 0, 0, 0, 0, 843, 857, 874, 0,
	0, 866, 0, 0, 854, 855, 856, 0, 853, 850,
	851, 852, 844, 845, 846, 847, 849, 842, 869, 0,
	0, 0, 0, 857, 0, 0, 0, 866, 0, 0,
	854, 855, 856, 0, 853, 850, 851, 852, 844, 845,
	846, 847, 849, 0, 869, 848, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 867, 875, 0, 0, 0, 0, 0, 0,
	0, 848, 0, 0, 0, 0, 0, 873, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 865, 867, 875,
	0, 0, 0, 858, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 873, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 865, 0, 864, 0, 0, 0, 858,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 864, 324, 0, 0, 0, 0, 0, 0, 0,
	859, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 868, 0, 840, 841, 0, 860, 861, 862, 870,
	871, 872, 0, 0, 0, 0, 859, 0, 0, 863,
	0, 0, 0, 0, 0, 0, 843, 868, 874, 840,
	841, 0, 860, 861, 862, 870, 871, 872, 0, 0,
	0, 0, 0, 0, 0, 863, 0, 842, 0, 0,
	0, 0, 843, 857, 874, 0, 0, 866, 0, 0,
	854, 855, 856, 0, 853, 850, 851, 852, 844, 845,
	846, 847, 849, 842, 869, 0, 0, 0, 0, 857,
	0, 0, 0, 866, 0, 0, 854, 855, 856, 0,
	853, 850, 851, 852, 844, 845, 846, 847, 849, 0,
	869, 848, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 867, 875,
	0, 0, 0, 0, 0, 0, 0, 848, 0, 0,
	0, 0, 1400, 873, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 865, 867, 875, 0, 0, 0, 858,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 873,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 865,
	0, 864, 0, 0, 0, 858, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 864, 0, 0,
	0, 0, 0, 0, 0, 0, 859, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 868, 0, 840,
	841, 0, 860, 861, 862, 870, 871, 872, 0, 0,
	0, 0, 859, 0, 0, 863, 1522, 0, 0, 1395,
	0, 0, 843, 868, 874, 840, 841, 0, 860, 861,
	862, 870, 871, 872, 0, 0, 0, 0, 0, 0,
	0, 863, 0, 842, 0, 0, 0, 0, 843, 857,
	874, 0, 0, 866, 0, 0, 854, 855, 856, 0,
	853, 850, 851, 852, 844, 845, 846, 847, 849, 842,
	869, 0, 0, 0, 0, 857, 0, 0, 0, 866,
	0, 0, 854, 855, 856, 0, 853, 850, 851, 852,
	844, 845, 846, 847, 849, 0, 869, 848, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 867, 875, 0, 0, 0, 0,
	0, 0, 0, 848, 0, 0, 0, 0, 0, 873,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 865,
	867, 875, 0, 0, 0, 858, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 873, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 865, 0, 864, 0, 0,
	0, 858, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 864, 0, 0, 0, 0, 0, 0,
	0, 0, 859, 0, 1360, 0, 0, 0, 0, 0,
	0, 0, 0, 868, 0, 840, 841, 0, 860, 861,
	862, 870, 871, 872, 0, 0, 0, 0, 859, 0,
	0, 863, 0, 0, 0, 1354, 0, 0, 843, 868,
	874, 840, 841, 0, 860, 861, 862, 870, 871, 872,
	0, 0, 0, 0, 0, 0, 0, 863, 0, 842,
	0, 0, 0, 0, 843, 857, 874, 0, 0, 866,
	0, 0, 854, 855, 856, 0, 853, 850, 851, 852,
	844, 845, 846, 847, 849, 842, 869, 0, 0, 0,
	0, 857, 0, 0, 0, 866, 0, 0, 854, 855,
	856, 0, 853, 850, 851, 852, 844, 845, 846, 847,
	849, 0, 869, 848, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	867, 875, 0, 0, 0, 0, 0, 0, 0, 848,
	0, 0, 0, 0, 0, 873, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 865, 867, 875, 0, 0,
	0, 858, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 873, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 865, 0, 864, 0, 0, 0, 858, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 864,
	0, 0, 0, 0, 0, 0, 0, 0, 859, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 868,
	0, 840, 841, 0, 860, 861, 862, 870, 871, 872,
	0, 0, 0, 0, 859, 0, 0, 863, 0, 0,
	0, 0, 0, 0, 843, 868, 874, 840, 841, 0,
	860, 861, 862, 870, 871, 872, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 842, 0, 0, 0, 0,
	843, 857, 874, 0, 0, 866, 0, 0, 854, 855,
	856, 0, 853, 850, 851, 852, 844, 845, 846, 847,
	849, 842, 869, 0, 0, 0, 0, 857, 0, 0,
	0, 866, 0, 0, 854, 855, 856, 0, 853, 850,
	851, 852, 844, 845, 846, 847, 849, 0, 869, 848,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 867, 875, 0, 0,
	0, 0, 0, 0, 0, 848, 0, 0, 0, 0,
	0, 873, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 865, 867, 875, 0, 0, 0, 858, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 873, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 865, 0, 0,
	0, 0, 0, 858, 0, 840, 841, 0, 860, 861,
	862, 870, 871, 872, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 843, 0,
	874, 0, 0, 0, 859, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 868, 0, 0, 0, 842,
	0, 0, 0, 0, 0, 857, 0, 0, 0, 0,
	859, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 868, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 866, 0, 848, 854, 855, 856, 0, 853, 850,
	851, 852, 844, 845, 846, 847, 849, 0, 869, 0,
	867, 875, 0, 0, 0, 0, 0, 866, 0, 0,
	854, 855, 856, 0, 853, 850, 851, 852, 844, 845,
	846, 847, 849, 0, 869, 865, 0, 0, 0, 0,
	0, 858, 0, 0, 0, 720, 714, 737, 708, 728,
	727, 0, 0, 710, 709, 0, 0, 0, 739, 738,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 733,
	0, 725, 724, 0, 0, 0, 0, 0, 859, 0,
	723, 0, 0, 0, 0, 0, 0, 0, 0, 868,
	0, 0, 0, 0, 0, 0, 722, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 715, 716, 717, 718, 0, 736, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 866, 0, 0, 854, 855,
	856, 0, 853, 850, 851, 852, 844, 845, 846, 847,
	849, 726, 869, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 721, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 712, 0, 0,
	0, 0, 0, 0, 0, 719, 713, 0, 0, 0,
	0, 0, 0, 0, 741, 0, 0, 0, 0, 0,
	0, 711, 0, 0, 734, 735, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 740,
}
var sqlPact = [...]int{

	2550, -1000, 39, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 788, 15910, -1000, -1000,
	-1000, -1000, -1000, 780, 775, 668, 15910, 15910, 15645, 1111,
	1111, 17235, -1000, -1000, 20150, -1000, 3311, 492, 493, 492,
	492, 491, 17235, 553, 640, 158, -1000, 739, -11, 19885,
	15910, 1357, 35, 14585, 361, 2550, 15380, 19620, 15910, 283,
	56, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1197, 1091, 1086, 14585, 19355,
	19090, 18825, -1000, 9774, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 549, 365, 364, -1000, 15115, -1000, 897, -1000,
	32, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 892,
	-1000, 15910, -1000, -1000, 18560, 18295, 363, 869, -1000, -1000,
	587, 431, 1369, -1000, 46, -1000, -1000, 1195, -1000, 890,
	1193, 1192, 1187, 1186, 1179, 1178, 430, 870, -1000, 545,
	869, -1000, 869, -1000, -1000, -1000, 526, 17235, -1000, 14585,
	-1000, 18030, 15910, 1107, 17765, -1000, 739, -1000, -1000, -1000,
	895, 1353, 1353, 1353, 1361, 193, 190, 158, 23, 15910,
	-1000, 362, 23, 7001, 7001, -1000, -1000, 361, -1000, 386,
	12725, -1000, 7557, -1000, 1004, 1269, 446, 672, 1268, -77,
	697, 622, 11920, 56, -1000, -1000, -1000, 8950, 4142, 14585,
	15910, 15910, 638, 17500, -1000, 1267, 97, 1265, -1000, 96,
	1264, -1000, 16, -1000, -1000, -1000, -1000, -1000, -1000, 361,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 14850, 1399, 24129, -1000, 8950, -1000,
	-1000, 12993, 1170, 12993, -1000, -1000, 1394, -1000, 8950, -1000,
	29, 28, 985, 1073, 10317, 10052, 1308, 745, -1000, -1000,
	-1000, 41, 4418, 15910, 1202, 12993, 15910, 15910, 15910, 15910,
	15910, 15910, -1000, 983, -1000, 15910, -1000, 27, 25, -1000,
	17235, -1000, 101, -1000, 360, 954, 179, 16970, 1276, 953,
	-1000, 895, -1000, 902, 980, 8116, 8950, 158, -1000, -1000,
	158, 158, 8950, -1000, -1000, 15910, 23, 1393, 15910, 140,
	-1000, 22967, -1000, -1000, 8950, 8950, 8950, 8950, 8950, 813,
	-1000, -1000, -1000, 5270, -1000, -1000, 56, 359, 369, -1000,
	-1000, 358, 56, -1000, -1000, -1000, -1000, 356, 1499, 487,
	-1000, -1000, -1000, 8950, 435, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1173, 355, 353, -1000, -1000, -1000,
	-1000, 348, 344, 343, 341, 338, 335, 332, 330, 320,
	319, 318, 317, 315, 313, 783, -1000, 453, -1000, -1000,
	453, 453, -1000, 307, 307, 311, -1000, -1000, -1000, -1000,
	307, -1000, -1000, -1000, 424, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 312, 140, -1000, -1000, -1000, 15910, 15, -1000,
	23641, -1000, -18, 742, -1000, 14055, 1333, 1332, 1322, 14585,
	1377, 1374, 525, 15910, 15910, 524, -1000, 1176, 10, -1000,
	-1000, 2687, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 442,
	139, 1390, 139, 12189, -1000, 15910, 15910, -1000, 15910, -1000,
	-1000, 15910, -1000, 15910, 15910, 614, 13525, 738, 1262, -11,
	-1, -1000, 1396, -1000, -1000, -1000, -1000, 68, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 311, 783, 307, 307, 307, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 424, -1000, -1000, 453, 453, 453,
	-1000, -1000, -6, 23641, 523, 0, 13259, 15910, -1000, 22,
	-1000, -1000, 1169, 488, -8, 777, 1061, 685, -1000, -1000,
	-1000, -1000, 21, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1458, -1000, -1000, -1000, -1000, 1476, 21,
	-1000, -1000, -1000, -1000, -1000, 1494, -1000, -1000, -1000, 4418,
	-1000, -1000, -1000, 15910, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 777, 1061, -1000, -1000, 14585, 13790, 1386,
	1261, 1385, 15910, 885, 941, -1000, -1000, 413, 1259, -1000,
	-1000, -1000, -1000, 23641, -1000, 23641, 658, 1094, -1000, 1094,
	19, -1000, 22777, -1000, 306, -14, -1000, 442, 7001, 11652,
	24129, 24129, 15910, 540, 8950, 8950, 8950, 8950, 8950, 8950,
	8950, 8950, 8950, 8950, 8950, 8950, 8950, 8950, 8950, 8950,
	8950, 8950, 8950, 8950, 8950, 8950, 1140, 8950, 522, 8950,
	8950, 8950, 8950, 1028, 812, 275, 4418, -1000, 661, 661,
	661, 23857, 23857, 282, 20, 22408, 5, 56, -1000, -1000,
	6720, 6422, 56, 4694, -1000, 841, 1472, 451, 23641, 1230,
	1128, 301, 188, 186, 8950, 8950, 913, 8950, 9228, 8950,
	8950, 5548, 8950, 8950, 8950, 8950, 8950, 8950, -1000, 300,
	-1000, -1000, -1000, -1000, 1469, -1000, -1000, 1468, -1000, 537,
	536, 1464, 442, 184, 7557, -1000, 738, 15910, 15910, 15910,
	-1000, -1000, 939, 16705, 935, 24129, 15910, -1000, 299, 296,
	997, 994, 15910, 15910, 16440, 16175, 15910, 842, 291, 287,
	15910, 689, -1000, 15910, 618, 1166, 15910, -1000, 8950, 681,
	8950, 789, -1000, 11115, 458, 15910, 763, 95, -1000, -1000,
	-1000, 403, 15910, -1000, -1000, -1000, 97, -1000, 96, -1000,
	-1000, 14585, -1000, -1000, -1000, -1000, -1000, -1000, 24129, 372,
	370, -1000, 1463, 520, -1000, 519, 517, 516, -1000, 277,
	-1000, 8950, 15910, 13259, 0, -10, -1000, -1000, 15910, 1061,
	-1000, -1000, -1000, -1000, 686, -1000, 774, -1000, 10582, -1000,
	-1000, -1000, 841, -1000, -25, -1000, -1000, -1000, -1000, 182,
	-42, -16, 24129, -1000, -1000, -1000, -1000, -1000, 15910, 354,
	15910, -11, 15910, -11, 15910, 1257, 1490, 15910, -1000, -1000,
	-1000, 8950, -1000, -1000, -1000, -11, 15910, -1000, 1127, -1000,
	3, 1397, -118, 14320, -1000, 10847, -1000, -1000, -1000, 423,
	380, 380, 562, 562, 562, 562, 227, 227, 1972, 2787,
	334, 334, 334, 2247, 272, 272, 334, 334, 334, 23857,
	23831, 636, 8950, 8950, 511, 809, 275, 636, 8950, 1452,
	636, 636, 636, -1000, 857, -1000, -1000, -1000, 1162, 274,
	9228, 9228, -1000, -1000, -1000, 5270, -1000, -1000, 270, 8950,
	-1000, 8950, -31, -38, -1000, -1000, -46, -1000, -1000, -12,
	8950, 8950, 8950, 177, -1000, 176, 629, -1000, 8950, 810,
	259, 256, 8950, -1000, -1000, 23615, 21032, 174, 1150, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 173, 23425, 172, 21003,
	-1000, 9228, 9228, 9228, 5270, 246, 170, 22751, -145, 23399,
	7835, 7835, 7835, 167, 23209, 8950, -145, 20740, 20711, 20685,
	-50, -52, -54, 1462, -56, 164, 420, 248, 154, 1127,
	-1000, -1000, -1000, -1000, 510, 507, 1255, -1000, 932, -1000,
	464, -1000, 930, 8950, 15910, 243, 242, 786, -1000, 1254,
	838, 1252, 838, -1000, -18, 726, 8950, 8950, -1000, 504,
	-1000, -1000, 564, -1000, 22434, -1000, 7001, 23641, -1000, 690,
	1335, -58, -1000, -1000, 7001, 442, 12189, 11652, 7557, -79,
	-1000, -1000, 738, -1000, 534, 1461, 153, 963, 859, 793,
	646, 1460, 23641, -25, -1000, -25, -1000, -1000, -1000, -1000,
	-1000, -1000, 15910, 1110, -1000, 13790, 240, 15910, 239, -1000,
	238, -1000, 236, 15910, -1000, 1276, -1000, 150, -1000, 1122,
	1358, -1000, 11652, 907, 1058, 1038, 11652, 1146, 830, 830,
	830, -1000, 14320, 3855, -1000, -1000, 15910, 234, 11383, 146,
	1397, 8950, 636, 636, 8950, 9228, 9228, -1000, 636, -1000,
	-1000, -1000, -1000, 1143, 233, 8950, 24129, 3109, 2947, -80,
	6124, -27, 22119, -1000, -1000, 369, -1000, 142, 7279, -1000,
	22993, -7, -7, -1000, 1489, 1273, -1000, 8950, 23183, -1000,
	12457, 444, 843, 22090, 24129, 24129, -1000, 8950, -1000, 1142,
	8950, -1000, 24129, 24129, 9228, 9228, 9228, 9228, 9228, 9228,
	9228, 9228, 9228, 9228, 9228, 9228, 9228, 9228, 9228, 9228,
	9228, 9228, 9228, 1026, 9228, 1447, 1447, 1447, -33, 5826,
	-1000, 1149, 1142, 8950, 8950, 24129, 136, 134, 121, -1000,
	8950, -145, 8950, 8950, 8950, -1000, -1000, -1000, 120, -1000,
	1448, -1000, -1000, -1000, -1000, 1122, 15910, 15910, 15910, 1248,
	-1000, 2270, -1000, 22064, -85, 15910, 15910, -1000, 1057, 1041,
	481, 15910, -1000, 15910, -1000, 15910, 15910, 15910, -86, -87,
	15910, -1000, -1000, -68, 7001, 181, -11, -68, 681, -1000,
	-35, -1000, 400, -1000, 367, 98, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 117, -1000, -1000, 1112, -1000, 9506,
	232, 15910, 13790, 1382, 9506, 880, -1000, -1000, 438, 8950,
	8950, 1397, 552, 11652, 11652, 1119, 1036, 11652, -1000, -1000,
	-1000, -1000, -1000, -1000, 1025, 230, 15910, 14320, 551, 636,
	2774, 2218, 8950, 24129, 24005, -91, 8950, 8950, -1000, -92,
	-1000, 8950, -1000, -1000, 1487, 8950, 116, 109, 108, -1000,
	-1000, 23641, 8950, -1000, -1000, 20415, 8950, 107, -1000, 106,
	91, 23641, 1149, 23641, -1000, -1000, 599, 599, 1447, 1447,
	1447, 1447, 926, 926, 1395, 2882, 2861, 2861, 2861, 2441,
	693, 693, 2861, 2861, 2861, 1138, 995, 229, 3209, 8950,
	-97, -1000, -1000, -1000, 23641, 23641, 86, -1000, -1000, -1000,
	-145, 2988, 21775, 21746, -1000, 81, 438, -1000, -1000, -1000,
	15910, -1000, 15910, -1000, 15910, 15910, 1141, 928, -1000, -1000,
	992, 228, 9228, 15910, -1000, 770, -101, -102, 914, -1000,
	912, 8950, -1000, 24129, 838, 838, -1000, 499, 496, -1000,
	-1000, -1000, -68, 1282, 15910, 1319, -1000, -1000, 225, -1000,
	-1000, -1000, 794, -106, -1000, 178, 1343, 8950, -1000, -1000,
	223, 9506, -108, 77, -11, -113, 15910, -1000, 15910, 23641,
	-145, 535, -1000, 1119, -1000, 216, 8950, 11652, -1000, -163,
	-1000, 397, -1000, 15910, -115, -1000, 8950, 8950, 24005, -119,
	-1000, 636, 636, -1000, 21720, -1000, 22993, -1000, -1000, -1000,
	23641, 791, -1000, 21431, -1000, -1000, -1000, -1000, 9228, 1136,
	206, 24129, 21402, -1000, -1000, 8950, -1000, -1000, -1000, -1000,
	-1000, 1292, -1000, -1000, 15910, 931, -1000, -1000, 8950, 3209,
	202, 1110, 201, -1000, -1000, -1000, 759, -1000, -1000, 23641,
	1344, -1000, -1000, 15910, 15910, 568, -123, 15910, -1000, -1000,
	4992, 15910, 770, 9506, 1347, 56, 15910, 1347, 21376, 4694,
	-124, -1000, 1110, -1000, 770, 200, -84, -1000, 1381, 1482,
	-1000, 15910, 23641, -1000, 1025, -1000, 4418, -130, -1000, 636,
	636, -1000, -1000, 71, 843, 1356, -1000, 220, 9228, 24129,
	-131, -1000, 21087, -1000, -1000, 1243, 21058, 971, 15910, -1000,
	15910, 15910, 466, 15910, -1000, -1000, 635, -1000, 442, -1000,
	199, 1110, -1000, -1000, -1000, -1000, 1343, -12, 770, -1000,
	1110, 9506, 15910, 195, -1000, -135, -1000, -1000, -1000, -1000,
	754, 8950, 220, -140, -1000, -1000, 1237, -1000, 855, 765,
	70, -141, 179, -1000, 8950, -1000, 12189, -1000, 15910, -1000,
	1347, 69, 1110, -1000, -146, -1000, -1000, -1000, 54, 8672,
	8672, -145, -1000, 15910, -1000, 876, 872, 645, -1000, -1000,
	-1000, -1000, -1000, 971, 23641, -125, -151, -1000, -1000, -1000,
	770, -1000, -1000, -1000, 3528, 896, 650, 22463, -1000, -1000,
	-1000, 1286, -1000, 473, 840, 840, 855, -1000, 827, 1110,
	1407, -1000, -1000, -1000, -1000, -1000, -1000, 1419, -1000, -1000,
	1010, -1000, -1000, -1000, -1000, -1000, -1000, 8394, -1000, -1000,
	-1000, -1000,
}
var sqlPgo = [...]int{

	0, 1734, 1733, 1383, 126, 1731, 120, 1730, 1726, 1725,
	1724, 1723, 121, 116, 109, 127, 1721, 108, 1720, 1719,
	1717, 118, 1713, 1712, 1711, 175, 1709, 1705, 1701, 1700,
	1699, 1696, 115, 47, 136, 2194, 128, 1692, 1691, 1685,
	10, 87, 62, 1683, 102, 1670, 1669, 59, 85, 96,
	1613, 41, 1668, 1665, 130, 32, 13, 24, 89, 135,
	137, 107, 1662, 1656, 1649, 44, 1646, 4, 1645, 1644,
	20, 56, 49, 1643, 46, 17, 1642, 1636, 119, 1634,
	78, 86, 99, 25, 112, 194, 1633, 77, 11, 66,
	1631, 33, 1630, 65, 74, 129, 1629, 51, 139, 48,
	23, 58, 1626, 1624, 1623, 1621, 71, 1620, 81, 70,
	1619, 1617, 72, 1616, 123, 125, 1609, 1606, 113, 1604,
	1603, 1602, 726, 1601, 1600, 349, 1599, 5, 26, 63,
	12, 97, 95, 27, 1598, 19, 1597, 299, 795, 839,
	1596, 54, 36, 75, 40, 57, 15, 1592, 1591, 94,
	1590, 1588, 1580, 1579, 1578, 76, 1577, 83, 132, 43,
	55, 80, 22, 50, 90, 101, 138, 93, 1576, 1575,
	105, 1574, 197, 1573, 1570, 1192, 100, 1568, 1567, 1566,
	921, 919, 786, 636, 1565, 1564, 730, 544, 1563, 1562,
	98, 1558, 1557, 133, 124, 29, 1556, 103, 1555, 84,
	1554, 0, 34, 30, 1549, 117, 73, 1547, 1546, 1542,
	1540, 18, 1, 9, 6, 7, 3, 31, 21, 1537,
	1533, 122, 110, 1532, 140, 1531, 1530, 1529, 35, 1527,
	16, 1524, 14, 1523, 1520, 8, 2, 131, 1518, 82,
	1516, 1413, 1515, 134, 1510, 1505, 1400, 79,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 4, 4, 42,
	42, 41, 41, 41, 41, 41, 41, 41, 41, 41,
	41, 41, 41, 41, 41, 41, 39, 39, 44, 44,
	44, 46, 46, 43, 43, 38, 38, 5, 5, 5,
	6, 6, 6, 6, 6, 12, 13, 13, 13, 13,
	13, 13, 84, 84, 83, 83, 86, 86, 14, 14,
	15, 15, 15, 15, 15, 15, 15, 15, 171, 171,
	170, 16, 147, 147, 17, 17, 17, 17, 18, 107,
	107, 19, 19, 19, 19, 20, 24, 237, 237, 237,
	241, 241, 242, 242, 243, 243, 243, 243, 243, 243,
	243, 239, 239, 27, 27, 27, 27, 27, 126, 122,
	122, 124, 124, 124, 124, 49, 121, 121, 121, 121,
	123, 123, 123, 123, 194, 193, 193, 199, 199, 199,
	62, 62, 62, 62, 62, 63, 63, 63, 192, 192,
	192, 192, 200, 200, 200, 200, 200, 200, 64, 64,
	64, 198, 198, 28, 28, 28, 28, 28, 28, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
	238, 238, 240, 240, 29, 29, 9, 9, 10, 10,
	65, 65, 66, 66, 129, 129, 129, 129, 67, 67,
	45, 45, 45, 128, 209, 209, 210, 210, 210, 210,
	210, 210, 211, 211, 211, 211, 211, 211, 211, 207,
	207, 208, 205, 205, 206, 206, 206, 206, 244, 244,
	127, 127, 70, 70, 214, 214, 214, 214, 212, 212,
	212, 212, 212, 215, 213, 216, 216, 216, 216, 216,
	158, 158, 158, 31, 11, 8, 8, 111, 111, 74,
	74, 162, 162, 162, 56, 56, 40, 40, 40, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 112, 112,
	113, 113, 22, 26, 30, 30, 30, 30, 30, 246,
	246, 53, 53, 53, 53, 54, 54, 125, 125, 125,
	125, 125, 48, 7, 7, 47, 47, 21, 21, 21,
	21, 21, 59, 59, 118, 118, 118, 120, 120, 119,
	119, 119, 97, 97, 32, 79, 79, 88, 88, 89,
	89, 168, 90, 90, 25, 25, 35, 35, 33, 33,
	33, 33, 33, 33, 34, 34, 36, 36, 36, 36,
	36, 36, 36, 222, 222, 222, 224, 224, 221, 223,
	223, 245, 245, 98, 98, 98, 69, 68, 68, 72,
	72, 71, 73, 73, 161, 95, 95, 95, 95, 114,
	115, 115, 116, 116, 117, 117, 94, 94, 144, 144,
	37, 37, 78, 78, 80, 80, 135, 135, 136, 136,
	134, 134, 134, 163, 163, 163, 163, 164, 164, 164,
	164, 164, 164, 159, 159, 159, 159, 160, 160, 169,
	169, 101, 101, 101, 101, 99, 99, 100, 100, 165,
	165, 165, 165, 96, 96, 166, 166, 166, 130, 130,
	172, 172, 172, 77, 77, 77, 173, 173, 173, 173,
	173, 173, 173, 173, 173, 173, 173, 173, 173, 174,
	174, 174, 174, 176, 176, 176, 175, 175, 175, 175,
	175, 175, 175, 175, 175, 175, 175, 175, 175, 175,
	177, 177, 184, 184, 185, 185, 186, 187, 178, 178,
	179, 179, 180, 181, 188, 188, 188, 188, 190, 190,
	182, 182, 182, 182, 182, 183, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	109, 109, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 217, 217, 217, 217, 217, 217, 217,
	219, 219, 220, 220, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	225, 225, 226, 226, 228, 228, 229, 229, 230, 231,
	231, 231, 232, 233, 233, 227, 227, 234, 234, 234,
	235, 235, 236, 236, 236, 236, 236, 149, 149, 149,
	150, 150, 151, 85, 85, 146, 146, 145, 145, 145,
	148, 148, 102, 189, 189, 189, 189, 189, 189, 189,
	103, 103, 110, 104, 104, 105, 105, 105, 105, 105,
	105, 141, 142, 106, 106, 106, 143, 143, 152, 156,
	156, 155, 154, 154, 153, 153, 133, 133, 133, 133,
	132, 131, 91, 91, 247, 247, 157, 157, 92, 92,
	93, 87, 87, 167, 167, 167, 167, 81, 81, 61,
	61, 82, 82, 57, 57, 60, 58, 58, 58, 58,
	75, 75, 76, 76, 55, 55, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 191, 191, 191,
	50, 50, 50, 51, 51, 52, 52, 196, 196, 196,
	197, 197, 197, 197, 195, 195, 195, 195, 195, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	201, 203, 203, 203, 203, 203, 203, 203, 203, 203,
	203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
	203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
	203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
	203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 4, 6, 1,
	3, 2, 5, 3, 6, 4, 6, 6, 6, 4,
	8, 3, 3, 3, 6, 4, 3, 2, 1, 1,
	0, 2, 0, 2, 0, 2, 0, 4, 6, 7,
	1, 1, 1, 1, 1, 6, 3, 5, 4, 6,
	4, 6, 1, 3, 1, 2, 2, 3, 2, 5,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	1, 5, 3, 0, 1, 1, 1, 1, 3, 3,
	0, 2, 3, 2, 3, 6, 6, 1, 2, 2,
	1, 1, 1, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 2, 3, 6, 3, 1, 5, 2,
	1, 1, 1, 3, 3, 2, 3, 3, 3, 3,
	1, 3, 3, 2, 1, 1, 3, 1, 1, 1,
	2, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 1, 1, 1, 1, 1,
	0, 1, 1, 2, 2, 4, 2, 4, 4, 4,
	4, 4, 4, 4, 2, 3, 4, 3, 2, 4,
	2, 0, 2, 0, 8, 8, 7, 10, 6, 9,
	1, 0, 1, 3, 1, 1, 1, 1, 8, 0,
	1, 1, 0, 3, 2, 0, 3, 1, 2, 2,
	3, 6, 2, 1, 1, 2, 4, 2, 5, 7,
	8, 5, 3, 1, 4, 6, 5, 10, 1, 1,
	4, 0, 3, 0, 2, 2, 2, 0, 1, 1,
	2, 2, 0, 3, 3, 2, 1, 1, 2, 2,
	1, 2, 1, 4, 6, 11, 14, 1, 0, 1,
	3, 3, 3, 5, 2, 0, 1, 1, 0, 6,
	6, 8, 6, 8, 8, 10, 8, 10, 1, 0,
	2, 0, 2, 2, 3, 3, 2, 2, 2, 1,
	0, 1, 3, 2, 0, 2, 1, 1, 1, 3,
	3, 0, 3, 4, 7, 3, 0, 6, 6, 8,
	5, 7, 1, 3, 1, 4, 2, 8, 5, 4,
	3, 0, 2, 0, 8, 2, 0, 1, 3, 1,
	1, 3, 5, 5, 1, 1, 3, 3, 1, 2,
	3, 2, 3, 4, 1, 1, 8, 8, 1, 2,
	4, 4, 4, 2, 2, 3, 1, 3, 6, 1,
	0, 1, 0, 1, 1, 0, 1, 1, 0, 1,
	0, 3, 1, 3, 2, 2, 2, 1, 1, 2,
	2, 3, 1, 1, 1, 1, 3, 0, 2, 0,
	2, 3, 3, 0, 1, 3, 3, 1, 1, 3,
	2, 4, 0, 3, 2, 1, 4, 3, 4, 5,
	4, 5, 4, 5, 2, 4, 1, 1, 0, 5,
	0, 2, 2, 2, 1, 1, 0, 4, 2, 1,
	2, 2, 4, 1, 3, 1, 2, 3, 2, 0,
	2, 5, 2, 3, 4, 0, 1, 1, 1, 1,
	2, 4, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 5, 0, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 2, 2, 2, 1, 1,
	3, 0, 1, 1, 1, 1, 5, 2, 1, 1,
	1, 1, 4, 1, 2, 2, 1, 1, 1, 0,
	1, 1, 4, 1, 4, 1, 1, 1, 1, 1,
	1, 1, 3, 3, 3, 3, 3, 3, 3, 0,
	1, 4, 1, 3, 3, 3, 5, 2, 2, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 2, 2, 3, 4, 3, 4, 4, 5, 3,
	3, 3, 3, 3, 4, 3, 3, 4, 3, 4,
	3, 4, 5, 6, 6, 7, 6, 7, 6, 7,
	3, 4, 1, 3, 3, 2, 2, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 5, 6, 6,
	7, 1, 1, 1, 3, 1, 1, 1, 2, 2,
	2, 1, 1, 3, 5, 6, 8, 6, 6, 4,
	4, 1, 1, 1, 5, 1, 3, 1, 3, 1,
	1, 1, 1, 6, 6, 4, 4, 4, 4, 6,
	5, 5, 5, 4, 8, 6, 6, 4, 4, 4,
	5, 0, 5, 0, 2, 0, 1, 3, 3, 2,
	2, 0, 6, 1, 0, 3, 0, 2, 2, 0,
	1, 4, 2, 2, 2, 2, 2, 4, 3, 5,
	4, 3, 5, 1, 3, 1, 3, 3, 3, 2,
	1, 3, 3, 1, 1, 1, 1, 1, 1, 1,
	4, 3, 2, 3, 0, 3, 3, 2, 2, 1,
	0, 2, 2, 3, 2, 1, 1, 3, 5, 1,
	2, 4, 2, 0, 1, 0, 1, 1, 3, 5,
	2, 2, 1, 2, 1, 0, 1, 1, 1, 3,
	3, 1, 3, 3, 2, 1, 1, 1, 3, 1,
	3, 1, 3, 1, 2, 3, 1, 1, 2, 2,
	1, 3, 3, 0, 1, 2, 1, 1, 1, 1,
	6, 2, 3, 5, 1, 1, 1, 1, 2, 2,
	1, 1, 1, 1, 0, 3, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -6, -12, -13, -14,
	-16, -18, -19, -20, -21, -23, -24, -26, -25, -27,
	-28, -29, -30, -22, -31, -32, 23, 64, -7, -8,
	-9, -10, -11, -223, 92, 100, 193, 99, 85, 115,
	207, 214, -33, -35, 222, -126, 223, 34, 232, 58,
	95, 209, 204, 253, 66, -222, -36, -34, 300, 275,
	281, 217, -37, 240, 267, 303, 240, 128, 78, -57,
	-50, 4, -201, -203, 20, 21, 23, 33, 34, 39,
	43, 46, 57, 58, 59, 61, 63, 64, 65, 68,
	69, 76, 77, 78, 79, 81, 85, 87, 91, 92,
	94, 99, 100, 105, 106, 109, 111, 116, 121, 122,
	129, 132, 127, 141, 143, 144, 149, 152, 155, 157,
	158, 159, 160, 161, 163, 164, 166, 168, 165, 171,
	173, 174, 180, 183, 186, 187, 188, 191, 193, 195,
	196, 197, 199, 200, 204, 202, 203, 205, 207, 209,
	210, 212, 214, 215, 216, 219, 220, 222, 223, 225,
	228, 231, 232, 233, 236, 234, 230, 239, 241, 242,
	249, 253, 254, 255, 256, 259, 260, 261, 264, 265,
	266, 271, 276, 277, 278, 279, 28, 35, 36, 37,
	38, 40, 41, 44, 45, 49, 50, 51, 53, 80,
	82, 83, 98, 101, 107, 117, 119, 123, 124, 133,
	134, 135, 136, 138, 147, 170, 172, 181, 185, 190,
	192, 198, 211, 218, 226, 227, 235, 237, 244, 245,
	246, 250, 251, 267, 268, 87, 132, 261, 260, 78,
	128, 240, -15, 300, -25, -6, -13, -4, -21, -32,
	-12, -14, 23, -50, -50, -50, 193, 22, -241, 22,
	-242, -243, 66, 92, 115, 217, 132, 87, 260, -241,
	-54, 214, -50, -122, 152, 220, 211, 249, -123, -121,
	-194, 244, 161, -83, -50, 4, 78, 57, 79, 116,
	128, 129, 62, 63, 144, 241, 244, 249, 22, 66,
	-246, 249, 249, -246, -246, -53, 249, 247, -54, -245,
	240, 240, 270, -111, 78, 258, -34, -36, -35, -71,
	-72, 257, 137, 97, 179, -33, -35, -222, -224, 199,
	-221, -50, -224, -68, -69, 22, 89, 304, -165, -57,
	177, -93, 300, -3, -165, 123, -57, -60, 123, -57,
	-50, 113, 300, -91, -133, -132, -131, 298, 302, 113,
	139, 139, -166, -165, -50, 123, -61, 123, -60, -84,
	123, -83, -171, -170, -197, 4, -201, -203, -202, 267,
	55, 67, 114, 131, 125, 140, 142, 148, 150, 162,
	182, 184, 208, 224, 240, -147, 300, -107, 300, -50,
	22, 176, 304, 176, -50, -122, 51, -122, 300, -124,
	-48, -49, 141, 195, 247, 285, 113, 279, -64, 5,
	84, -86, 302, 113, -238, 176, 113, 113, 113, 113,
	113, 113, 279, 141, 195, 240, -125, -48, -49, -125,
	247, -54, -96, -165, -83, 123, -83, 128, -50, 123,
	-71, -72, -95, -114, -115, 151, 175, -98, 22, 89,
	-98, -98, 43, 301, 301, 304, -224, -76, 300, -87,
	-167, -137, 293, -139, 291, 292, 297, 167, 280, -149,
	-57, -140, 9, 300, -152, -219, -35, 98, 29, -150,
	-151, 211, -50, 7, 8, 5, 6, -55, -174, -183,
	252, 102, 169, 47, -217, -218, 4, -201, -196, -175,
	-185, -179, -182, 138, 55, 71, 74, 72, 75, 221,
	262, 48, 28, 101, 185, 190, 237, 250, 251, 123,
	170, 124, 53, 117, 147, 91, 36, 38, 40, 41,
	49, 50, 80, 82, 83, 107, 133, 134, 135, 136,
	172, 198, 226, 235, 245, 246, 268, -202, -186, -187,
	-180, -181, -188, -87, -93, 293, -57, 300, -92, -157,
	-137, 84, -42, 202, -41, 21, 23, 92, 265, 98,
	230, 230, 202, 98, 305, 202, 233, 301, -81, -57,
	-133, -137, -195, 293, 4, -201, -203, -202, -204, 22,
	24, 25, 26, 27, 29, 30, 31, 32, 42, 47,
	48, 52, 54, 56, 62, 66, 70, 71, 72, 73,
	74, 75, 84, 86, 88, 89, 90, 93, 95, 97,
	102, 103, 104, 110, 112, 113, 115, 118, 120, 126,
	128, 130, 137, 139, 145, 146, 151, 153, 154, 167,
	169, 175, 176, 177, 178, 179, 189, 194, 201, 206,
	217, 221, 229, 238, 240, 243, 247, 248, 252, 257,
	258, 262, 263, 269, 270, 272, 273, 274, 275, -166,
	-59, -57, -59, 222, -50, 30, 98, -44, 304, 46,
	205, 98, -44, 304, 98, 301, 304, -165, 123, 30,
	-146, -172, -173, -175, -184, -178, -182, -183, 39, 45,
	44, 242, 218, 227, 37, 133, 134, 135, 136, 226,
	36, 198, 107, 91, 83, 82, 172, 41, 40, -186,
	-187, -180, -181, 80, 245, 246, 138, 38, 50, 49,
	268, 235, -85, -137, -237, -82, 240, 78, -58, -50,
	293, -243, -237, 30, -85, 304, 304, 149, -63, 155,
	166, 121, -193, 84, -199, -192, -158, 9, 252, 102,
	176, -198, 8, 292, -191, -197, 5, 7, 291, -193,
	84, 69, -200, 5, 4, -183, -158, 84, 152, 302,
	-195, -194, -240, 110, -237, -194, -194, -194, -194, -194,
	-50, 149, -194, 304, 304, -54, -44, 304, 300, -70,
	167, -70, 300, -51, 123, -50, -47, 94, 167, -95,
	-115, -114, -116, -137, 22, -137, -139, -34, -34, -34,
	-73, -161, -137, -221, 30, -75, -50, -78, 304, 113,
	10, 11, 54, 33, 291, 292, 293, 294, 108, 295,
	288, 289, 290, 287, 283, 284, 285, 60, 156, 213,
	13, 14, 15, 26, 178, 150, 280, 125, 224, 297,
	16, 17, 18, 140, 35, 126, 30, 4, -137, -137,
	-137, -137, -137, 184, -35, -137, -85, -91, -35, -145,
	298, 300, -91, 300, 5, 5, 300, -153, -137, -225,
	276, 110, 300, 300, 300, 300, 300, 300, 300, 300,
	300, 300, 300, 300, 300, 300, 300, 300, 192, -190,
	271, -190, -190, -176, 300, -176, -177, 300, -176, 277,
	281, 300, -78, -57, 304, 301, 304, 247, -112, 62,
	56, -128, 123, 56, -205, -50, 62, -206, 52, 258,
	194, 112, -112, 62, -112, 62, 62, -165, 33, 33,
	247, -60, -50, 247, 113, 301, 304, 299, 308, -130,
	273, -118, -25, 300, 84, 30, -118, -88, -89, -168,
	-90, -57, 300, -50, -50, -60, -61, -83, -84, -15,
	-170, 98, -17, -25, -21, -32, -12, 301, 304, -77,
	29, -108, 300, 278, 159, 81, 122, 158, -109, 216,
	301, 304, 247, 304, -82, -75, -132, -131, 113, 249,
	301, -49, -48, -62, 197, 228, 203, 219, 304, 8,
	7, 7, 5, -195, -239, -50, -49, -48, -165, -65,
	-75, -66, -50, -129, -128, -207, -208, -205, 128, 258,
	103, 30, 98, 30, 176, 167, 285, 98, -117, 211,
	212, 304, -40, 31, 88, 300, 304, 301, -130, -167,
	-80, -163, -165, -35, -164, 300, -172, -172, -83, 244,
	-137, -137, -137, -137, -137, -137, -137, -137, -137, -137,
	-137, -137, -137, -137, -137, -137, -137, -137, -137, -137,
	-137, -137, 150, 125, 224, 35, 126, -137, 247, -137,
	-137, -137, -137, 169, 167, 252, 102, 259, 89, 173,
	-247, 238, 32, -143, -35, 300, -195, -149, 211, 300,
	301, 304, -85, -148, 299, -145, -85, 301, 301, -85,
	269, 22, 89, 293, -108, 7, -156, -155, 272, -226,
	105, 118, 300, 301, 301, -137, -137, -102, -189, 4,
	278, 159, 81, 122, 158, 216, -103, -137, -104, -138,
	-139, 291, 292, 297, 300, 211, -105, -137, -85, -137,
	42, 146, 248, -106, -137, 113, -85, -137, -137, -137,
	-85, -85, -85, 300, 7, 7, 244, 244, 7, -130,
	301, -157, -41, -57, -50, -50, 167, -128, 123, -46,
	167, -172, -50, 300, 300, 143, 143, -50, -50, 123,
	-50, 123, -50, -50, -42, 202, 300, 300, -50, 202,
	-50, 233, 113, -57, -137, -97, 206, -137, -97, -120,
	176, -81, 267, -50, 206, -79, 304, 113, 285, -81,
	-44, -44, -165, -172, 298, 298, 7, 247, 247, 247,
	247, 300, -137, -239, -58, -239, -48, 256, 59, 197,
	-199, -108, 304, 301, 301, 304, -51, 128, -51, -25,
	-83, -25, -57, 98, 5, -50, -161, -17, -50, -94,
	118, -169, 304, 282, 67, -101, 142, 162, 114, 148,
	208, 131, -134, 305, -160, -159, 30, -50, -35, -164,
	-163, 279, -137, -137, 247, -247, 238, -143, -137, 169,
	252, 102, 259, 89, 173, 113, 300, -138, -138, -85,
	300, -85, -137, 299, 299, 304, 301, -72, 304, -71,
	-137, -85, -85, 301, 301, -154, -155, 93, -137, -231,
	183, 300, 300, -137, 30, 304, 301, 113, 301, -110,
	189, 301, 10, 11, 291, 292, 293, 294, 108, 295,
	288, 289, 290, 287, 283, 284, 285, 60, 156, 213,
	13, 14, 15, 140, 126, -138, -138, -138, -85, 300,
	301, -141, -142, 113, 110, 30, -106, -106, -106, 301,
	113, -85, 304, 304, 304, 301, 301, 301, 7, 301,
	304, 301, 279, 279, 301, -94, 247, 247, 98, 167,
	264, -209, -206, -137, -75, 300, 300, -39, 92, 222,
	-113, 98, -44, 98, -44, 247, -112, 62, -85, -85,
	247, 233, 299, -87, 206, 61, 301, -87, -130, -89,
	-80, -157, 301, 299, 7, 7, 301, 159, 122, 158,
	-109, 158, -109, -109, 7, -50, -67, 127, -129, 300,
	-51, 300, 300, -70, 300, -50, -47, 301, -144, 120,
	43, -163, 173, 142, 142, -163, -101, 142, -99, 182,
	-99, -99, -160, -195, 306, -50, 300, 301, -137, -137,
	-138, -138, 113, 300, -137, -146, 26, 26, 301, -85,
	301, 304, 301, -145, 301, 269, -72, -72, -72, 5,
	95, -137, 243, -232, -50, 300, 273, -71, 301, -172,
	-172, -137, -141, -137, -172, -172, -138, -138, -138, -138,
	-138, -138, -138, -138, -138, -138, -138, -138, -138, -138,
	-138, -138, -138, -138, -138, 89, 167, 173, -138, 304,
	-85, 301, -142, -141, -137, -137, -172, 301, 301, 301,
	-85, -137, -137, -137, 301, 7, -144, -50, -50, -128,
	98, -210, 62, -211, 54, 103, 66, 167, 169, 258,
	194, 52, 84, 201, 301, 301, -75, -75, 167, 84,
	167, 84, 77, 254, -50, -50, -57, -50, -50, 301,
	301, -50, -87, -119, 300, 176, -25, -97, 285, 299,
	299, 301, 126, -74, -162, -50, -220, 300, -217, -218,
	-55, 300, -75, -65, 30, -74, 176, -228, 274, -137,
	-85, 239, -163, -163, -100, 263, 176, 142, -163, -136,
	-135, 111, 165, 300, -75, -159, 26, 26, -137, -146,
	301, -137, -137, 301, -137, 5, -137, 301, 301, 301,
	-137, -233, -50, -137, 301, 301, 301, -142, 113, 89,
	173, 300, -137, 301, 301, 304, 301, 301, 301, -228,
	-128, -50, -83, -50, 103, 123, 169, 143, 300, -138,
	-57, -127, -244, 65, 236, 301, 301, 169, 169, -137,
	-172, -44, -44, 247, 247, 90, -75, 62, -93, -35,
	300, 186, 301, 304, -56, -91, 54, -56, -137, 300,
	-74, 301, 301, -25, 301, -57, -229, -230, -50, 244,
	-100, 300, -137, -163, 304, 307, 285, -75, 301, -137,
	-137, 301, 301, -72, -227, 188, 301, -138, 113, 300,
	-146, 301, -137, -211, -51, 167, -137, -52, 300, -67,
	300, 201, -43, 54, -50, -50, 260, 168, 301, -50,
	-50, -127, -162, -40, -83, -40, 301, -85, 301, -67,
	-127, 300, 304, 30, 5, -75, -135, -195, 301, 301,
	-72, 43, -138, -146, 301, 301, 98, 301, -214, 157,
	-50, -75, -57, -38, 263, -83, 222, -130, 300, -67,
	-56, -72, -127, -67, -74, -230, -232, 301, -234, 196,
	212, -85, 301, 103, -212, -215, -213, 176, 114, 187,
	225, 301, 301, -70, -137, -88, -75, -40, 301, -67,
	301, 301, -235, -236, 35, 255, 69, -137, -235, -50,
	-213, 176, -215, 176, 260, 87, -214, -130, 301, -127,
	-236, 191, 109, 211, 191, 109, -216, 164, 205, 46,
	222, -216, -212, -45, 46, 205, -67, 26, 20, 169,
	84, -236,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 0, 0, 60, 61,
	62, 63, 64, 0, 0, 370, 0, 0, 0, 0,
	0, 0, 344, -2, 0, 127, 0, 300, 0, 300,
	300, 304, 0, 372, 268, 369, -2, 380, 0, 0,
	0, 378, 358, 0, 0, -2, 0, 0, 0, 0,
	773, 800, 801, 802, 819, 820, 821, 822, 823, 824,
	825, 826, 827, 828, 829, 830, 831, 832, 833, 834,
	835, 836, 837, 838, 839, 840, 841, 842, 843, 844,
	845, 846, 847, 848, 849, 850, 851, 852, 853, 854,
	855, 856, 857, 858, 859, 860, 861, 862, 863, 864,
	865, 866, 867, 868, 869, 870, 871, 872, 873, 874,
	875, 876, 877, 878, 879, 880, 881, 882, 883, 884,
	885, 886, 887, 888, 889, 890, 891, 892, 893, 894,
	895, 896, 897, 898, 899, 900, 901, 902, 903, 904,
	905, 906, 907, 908, 909, 910, 911, 912, 913, 914,
	915, 916, 917, 918, 919, 920, 921, 922, 923, 924,
	925, 926, 927, 928, 929, 930, 931, 932, 933, 934,
	935, 936, 937, 938, 939, 940, 941, 942, 943, 944,
	945, 946, 947, 948, 949, 950, 951, 952, 953, 954,
	955, 956, 957, 958, 959, 960, 961, 962, 963, 964,
	965, 966, 967, 968, 969, 970, 971, 972, 973, 974,
	975, 976, 977, 978, 979, 0, 0, 0, 0, 0,
	0, 0, 78, 0, 80, 81, 82, 83, 84, 85,
	86, 87, 0, 93, 100, 101, 883, 103, 0, 110,
	111, 112, 114, 115, 116, 117, 118, 119, 120, 0,
	293, 897, 306, 123, 862, 901, 967, 915, 130, 140,
	0, 973, -2, 144, 74, 173, 174, 0, 176, 191,
	0, 0, 0, 0, 0, 184, 0, 0, 188, 0,
	311, 299, 311, 296, 297, 298, 301, 0, 292, 0,
	371, 0, 0, 0, 0, 267, -2, 354, 355, -2,
	0, 375, 375, 375, 0, 0, 355, 0, 363, 887,
	366, 783, 364, 0, 0, 377, 376, 0, 359, 439,
	0, 400, 0, 2, 0, 952, 439, 0, 952, 0,
	0, 0, 0, 774, 752, 746, 747, 0, 0, 0,
	0, 0, 0, 445, 66, 952, 50, 952, 769, 50,
	952, 72, 0, 88, 90, 810, 811, 812, 813, 978,
	980, 981, 982, 983, 984, 985, 986, 987, 988, 989,
	990, 991, 992, 993, 0, 0, 0, 98, 0, 102,
	104, 0, 0, 0, 305, 124, 942, 126, 0, 129,
	131, 132, 0, 0, 0, 0, 0, 0, 143, 168,
	169, 75, 0, 0, 193, 0, 0, 0, 0, 0,
	0, 0, 185, 0, 187, 0, 294, 307, 308, 295,
	0, 303, 50, 443, 243, 952, 243, 804, 316, 952,
	-2, 0, 350, 387, 388, 0, 0, 0, 373, 374,
	0, 0, 0, 346, 347, 0, 365, 0, 0, 403,
	761, 765, 766, 532, 0, 0, 0, 0, 0, 0,
	621, 622, 623, 0, 625, 626, 627, 947, 0, 631,
	632, 967, 773, 786, 787, 788, 789, 0, 0, 0,
	794, 795, 796, 745, 671, 641, -2, -2, 784, 469,
	470, 471, 472, -2, 980, 645, 647, 649, 650, 651,
	652, 0, 931, 948, 963, 964, 972, 976, 977, 952,
	960, 953, 943, 950, 959, 843, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, 809, 494, 495,
	500, 501, 503, 403, 401, 440, 441, 0, 0, 758,
	756, 757, 27, 289, 29, 0, 289, 289, 0, 0,
	0, 0, 0, 0, 0, 0, 57, 0, 0, 767,
	753, 0, 750, 751, 814, 815, 816, 817, 818, 994,
	995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004,
	1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014,
	1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024,
	1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034,
	1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044,
	1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054,
	1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064,
	1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 449,
	0, 322, 0, 0, 446, 0, 0, 68, 0, 48,
	49, 0, 70, 0, 0, 370, 0, 0, 952, 370,
	0, 705, 455, 456, 457, 458, 459, 529, 462, 463,
	464, 465, 466, 467, 468, 476, 477, 478, 479, 480,
	481, 482, 491, 0, 475, 475, 475, 488, 489, 492,
	493, 498, 499, 510, 511, 513, 515, 509, 509, 509,
	506, 507, 0, 703, 0, 107, 0, 838, 771, 776,
	777, 113, 0, 0, 0, 0, 0, 0, 135, 155,
	156, 157, 136, 138, 145, 147, 148, 149, 158, 159,
	160, 161, 260, 0, 262, 171, 172, 797, 0, 137,
	139, 141, 142, 162, 163, 0, 165, 166, 167, 0,
	76, 175, 177, 0, 190, 178, 179, 180, 181, 182,
	183, 186, 189, 0, 0, 302, 263, 0, 201, 0,
	0, 0, 0, 0, 952, 803, 313, 0, 0, 353,
	385, 386, 389, 392, 393, 390, 532, 360, 361, 362,
	381, 382, 278, 367, 0, 0, 780, 449, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 755, 0, 0, 764, 537, 538,
	539, 561, 562, 0, -2, 703, 0, 628, 629, 630,
	0, 0, -2, 0, 791, 529, 0, 0, 744, 673,
	0, 0, 0, 0, 0, 0, 0, 0, 724, 730,
	0, 0, 0, 0, 0, 0, 0, 0, 484, 497,
	508, 505, 504, 486, 0, 485, 483, 0, 487, 0,
	0, 0, 449, 0, 0, 760, 0, 0, 0, 0,
	288, 31, 952, 0, 52, 0, 0, 233, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 775, 0, 0, 0, 0, 748, 0, 333,
	0, 333, 324, 0, 0, 0, 320, 336, 337, 339,
	340, 0, 0, 447, 67, 770, 50, 73, 50, 79,
	89, 0, 91, 94, 95, 96, 97, 92, 0, 450,
	452, 460, 0, 516, 517, 518, 519, 520, 521, 530,
	99, 0, 0, 0, 108, 109, 778, 779, 0, 0,
	128, 133, 134, 312, 0, 152, 0, 154, 0, 261,
	799, 798, 529, 77, 192, 121, 309, 310, 444, 0,
	0, 200, 780, 202, 204, 205, 206, 207, 804, 0,
	804, 0, 0, 0, 0, 0, 0, 0, 391, 394,
	395, 0, 384, 276, 277, 370, 0, 782, 397, 762,
	430, 404, 412, 428, 415, 0, 533, 534, 535, 0,
	540, 541, 542, 543, 544, 545, 546, 547, 548, 549,
	-2, -2, -2, 553, 554, 555, -2, -2, -2, 559,
	560, -2, 0, 0, 0, 755, 0, -2, 0, 569,
	-2, -2, -2, 573, 0, 576, 578, 580, 0, 0,
	0, 0, 754, 590, 736, 0, 763, 575, 0, 0,
	624, 0, 0, 0, 709, 710, 0, -2, 633, 380,
	0, 0, 0, 0, 792, 0, 743, 739, 0, 681,
	0, 0, 0, 646, 648, 0, 0, 0, 0, 713,
	714, 715, 716, 717, 718, 719, 0, 0, 0, 0,
	592, 0, 0, 0, 0, 967, 0, 703, 729, 0,
	0, 0, 0, 0, 703, 0, 735, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 397,
	442, 759, 30, 280, 0, 0, 0, 33, 952, 41,
	0, 215, 0, 0, 0, 0, 0, 291, 42, 952,
	50, 952, 50, 43, 28, 289, 0, 0, 282, 0,
	279, 58, 0, 768, 0, 65, 0, 448, 317, 318,
	0, 0, 326, 323, 0, 449, 0, 0, 0, 0,
	69, 71, 0, 706, 0, 0, 0, 0, 0, 0,
	0, 0, 704, 105, 772, 106, 125, 150, 151, 153,
	146, 164, 0, 209, 242, 0, 0, 804, 0, 198,
	243, 264, 0, 0, 315, 316, 383, 0, 781, 399,
	0, 402, 0, 0, 0, 0, 0, 0, 436, 436,
	436, 434, 428, 0, 414, 427, 0, 426, -2, 415,
	0, 0, -2, -2, 0, 0, 0, 591, -2, 574,
	577, 579, 581, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 704, 707, 708, 0, -2, 0, 0, 379,
	380, 380, 380, 639, 0, 0, 740, 0, 0, 640,
	0, 0, 0, 0, 0, 0, 655, 0, 656, 0,
	0, 657, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 595, 596, 597, 0, 0,
	658, 727, 728, 0, 0, 0, 0, 0, 0, 663,
	0, 734, 0, 0, 0, 667, 668, 669, 0, 473,
	0, 490, 512, 514, 502, 399, 0, 0, 0, 0,
	51, 213, 232, 0, 0, 0, 0, 35, 0, 0,
	0, 0, 39, 0, 45, 0, 0, 0, 0, 0,
	0, 59, 749, 332, 0, 331, 0, 321, 333, 338,
	335, 341, 0, 453, 0, 0, 461, 522, 523, 524,
	525, 526, 527, 528, 0, 122, 196, 0, 203, 0,
	0, 0, 201, 0, 0, 0, 314, 368, 675, 0,
	0, 405, 0, 0, 0, 0, 0, 0, 431, 435,
	432, 433, 413, 410, 0, 424, 0, 417, 536, -2,
	0, 0, 0, 0, -2, 0, 0, 0, 737, 0,
	698, 0, -2, 711, 634, 0, 0, 0, 0, 793,
	738, 742, 0, 679, 680, 684, 0, 0, 644, 0,
	0, 712, 721, 722, 593, 594, 598, 599, 600, 601,
	602, 603, 604, 605, 606, 607, -2, -2, -2, 611,
	612, 613, -2, -2, -2, 0, 0, 0, 723, 0,
	0, 701, 725, 726, 731, 732, 0, 660, 661, 662,
	733, 0, 0, 0, 496, 0, 675, 284, 286, 32,
	0, 214, 0, 217, 0, 0, 0, 0, 223, 224,
	0, 0, 0, 0, 234, 241, 0, 0, 0, 47,
	0, 0, 290, 0, 50, 50, 281, 0, 0, 194,
	195, 283, 319, 0, 0, 0, 325, 334, 0, 454,
	451, 531, 0, 0, 269, 275, 275, 0, 642, 643,
	0, 0, 0, 0, 0, 0, 0, 356, 0, 398,
	396, 0, 418, 0, 420, 0, 0, 0, 422, 0,
	408, 0, 407, 0, 0, 416, 0, 0, -2, 0,
	584, -2, -2, 697, 704, 790, 380, 635, 637, 638,
	741, 686, 683, 0, 670, 653, 654, 720, 0, 0,
	0, 0, 704, 700, 659, 0, 665, 666, 474, 357,
	34, 0, 218, 219, 804, 0, 222, 225, 0, 227,
	806, 209, 0, 238, 239, 236, 0, 36, 37, 46,
	54, 38, 44, 0, 0, 0, 0, 0, 342, 343,
	0, 0, 241, 0, 278, 785, 0, 278, 0, 0,
	0, 231, 209, 199, 241, 0, 674, 676, 0, 0,
	419, 0, 438, 421, 0, 411, 0, 0, 425, -2,
	-2, 585, 699, 0, 380, 0, 672, -2, 0, 0,
	0, 702, 0, 216, 220, 0, 0, 247, 0, 235,
	0, 0, 56, 0, 285, 287, 0, 328, 449, 330,
	0, 209, 270, 271, 274, 272, 275, 380, 241, 197,
	209, 0, 0, 0, 429, 0, 409, 406, 423, 636,
	689, 0, -2, 0, 619, 664, 0, 226, 252, 0,
	0, 0, 243, 40, 0, 53, 0, 329, 0, 229,
	278, 0, 209, 265, 0, 677, 678, 437, 0, 0,
	0, 685, 620, 0, 228, 248, 249, 0, 244, 245,
	246, 805, 240, 247, 55, 449, 0, 273, 634, 230,
	241, 682, 687, 690, -2, 918, 835, 0, 688, 221,
	250, 0, 251, 0, 0, 0, 252, 327, 212, 209,
	0, 692, 693, 694, 695, 696, 253, 0, 256, 257,
	0, 254, 237, 208, 210, 211, 266, 0, 255, 258,
	259, 691,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 289, 3, 295, 290, 3,
	300, 301, 293, 291, 304, 292, 302, 294, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 308, 303,
	283, 285, 284, 3, 305, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 298, 3, 299, 288, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 306, 287, 307, 297,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 286, 57626, 296, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:728
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:734
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:740
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 18:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:764
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 26:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:775
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 27:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:781
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 28:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:785
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 29:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:791
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 30:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:795
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 31:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:802
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 32:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:807
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 33:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:812
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:817
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:822
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 36:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:827
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:831
		{
			unimplemented()
		}
	case 38:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:834
		{
			sqlVAL.union.val = &AlterTableDropColumn{columnKeyword: sqlDollar[2].union.bool(), IfExists: true, Column: Name(sqlDollar[5].str)}
		}
	case 39:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:839
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:849
		{
			unimplemented()
		}
	case 41:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:852
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 42:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:859
		{
			unimplemented()
		}
	case 43:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:862
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 44:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:869
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 45:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:878
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 46:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:888
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 47:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:892
		{
			sqlVAL.union.val = nil
		}
	case 48:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:898
		{
			sqlVAL.union.val = DropCascade
		}
	case 49:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:902
		{
			sqlVAL.union.val = DropRestrict
		}
	case 50:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:906
		{
			sqlVAL.union.val = DropDefault
		}
	case 51:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:912
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 52:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:916
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 53:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:921
		{
			unimplementedWithIssue(2473)
		}
	case 54:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:922
		{
		}
	case 55:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:925
		{
			unimplemented()
		}
	case 56:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:926
		{
		}
	case 57:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:930
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 58:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:934
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:938
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:953
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retExprs()}
		}
	case 66:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:960
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:964
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:968
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 69:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:976
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 70:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:984
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 71:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:988
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 72:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:994
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 73:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:998
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 74:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1004
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 75:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1008
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 76:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1014
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1018
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 78:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1025
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1029
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1035
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 87:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1044
		{ /* SKIP DOC */
		}
	case 88:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1048
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1052
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 91:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1062
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1072
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 93:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1076
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 94:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1082
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 98:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1092
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1103
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 100:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1107
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 101:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1114
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1120
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1126
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1130
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1137
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1144
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1151
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1155
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1159
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1166
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1169
		{
		}
	case 112:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1173
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1177
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1184
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1188
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1192
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1196
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1200
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1204
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1208
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1216
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1220
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 123:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1228
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 124:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1232
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 125:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1236
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1240
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1243
		{ /* SKIP DOC */
		}
	case 128:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1249
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1255
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1262
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1266
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1270
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1274
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1281
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1287
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1291
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1295
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1299
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1306
		{
			unimplemented()
		}
	case 142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1309
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1312
		{
			unimplemented()
		}
	case 145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1319
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1323
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1331
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1337
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1341
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1345
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1349
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1353
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1359
		{
			sqlVAL.union.val = Low
		}
	case 156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1363
		{
			sqlVAL.union.val = Normal
		}
	case 157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1367
		{
			sqlVAL.union.val = High
		}
	case 158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1373
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1377
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1381
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1396
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1400
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1404
		{
			d, err := ParseDInterval(sqlDollar[2].str)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1414
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1418
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1423
		{
			unimplemented()
		}
	case 169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1424
		{
			unimplemented()
		}
	case 170:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1425
		{
		}
	case 171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1429
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1433
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1439
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1443
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1447
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1451
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1455
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1459
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1463
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1467
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1471
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1475
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1479
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1483
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1487
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1491
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1495
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1499
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 189:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1503
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1509
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 191:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1514
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1520
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 193:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1524
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 194:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1530
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.normalizableTableName(), Exprs: sqlDollar[7].union.exprs()}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1534
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Exprs: sqlDollar[7].union.exprs()}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1541
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1545
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1551
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1555
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1562
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 202:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1568
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1572
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1578
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 207:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1584
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 208:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1590
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1598
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 210:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1605
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 211:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1609
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 212:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1613
		{
			sqlVAL.union.val = DropDefault
		}
	case 213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1619
		{
			sqlVAL.union.val = newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
		}
	case 214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1625
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 215:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1629
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 216:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1635
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1639
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1642
		{
			unimplemented()
		}
	case 219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1644
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1648
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1652
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1670
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1674
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 224:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1678
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1682
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 226:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1686
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1690
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 228:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1694
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 229:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1703
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 230:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1712
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 231:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1725
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1737
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1742
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 234:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1748
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1754
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    NameListToIndexElems(sqlDollar[3].union.nameList()),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1764
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[4].union.nameList()),
				},
				PrimaryKey: true,
			}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1774
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1797
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 241:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1801
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1807
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 243:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1811
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 244:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1816
		{
			unimplemented()
		}
	case 245:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1817
		{
			unimplemented()
		}
	case 246:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1818
		{
			unimplemented()
		}
	case 247:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1819
		{
		}
	case 248:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1826
		{
			unimplemented()
		}
	case 249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1827
		{
			unimplemented()
		}
	case 250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1828
		{
			unimplemented()
		}
	case 251:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1829
		{
			unimplemented()
		}
	case 252:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1830
		{
		}
	case 253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1833
		{
			unimplemented()
		}
	case 254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1836
		{
			unimplemented()
		}
	case 255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1839
		{
			unimplemented()
		}
	case 256:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1840
		{
			unimplemented()
		}
	case 257:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1841
		{
			unimplemented()
		}
	case 258:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1842
		{
			unimplemented()
		}
	case 259:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1843
		{
			unimplemented()
		}
	case 260:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1847
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1851
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1855
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 263:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1862
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1869
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:1882
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:1893
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1907
		{
			sqlVAL.union.val = true
		}
	case 268:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1911
		{
			sqlVAL.union.val = false
		}
	case 269:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1917
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1921
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 271:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1930
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1933
		{
			unimplemented()
		}
	case 273:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1934
		{
			unimplemented()
		}
	case 274:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1937
		{
			unimplemented()
		}
	case 275:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1938
		{
		}
	case 276:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1942
		{
			sqlVAL.union.val = Ascending
		}
	case 277:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1946
		{
			sqlVAL.union.val = Descending
		}
	case 278:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1950
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 279:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1957
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1961
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1965
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1969
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1973
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1977
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1981
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1985
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 287:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1989
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 288:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1995
		{
			sqlVAL.union.val = true
		}
	case 289:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1999
		{
			sqlVAL.union.val = false
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2004
		{
		}
	case 291:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2005
		{
		}
	case 292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2009
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2015
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2022
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 295:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2026
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 296:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2030
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2034
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2038
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2047
		{
		}
	case 300:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2048
		{
		}
	case 301:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2052
		{
			sqlVAL.str = ""
		}
	case 302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2056
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2060
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 304:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2064
		{
			sqlVAL.str = ""
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2070
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 306:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2074
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 307:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2080
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2084
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2088
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2092
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2096
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2102
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 313:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2108
		{
			sqlVAL.union.val = &CreateDatabase{Name: Name(sqlDollar[3].str), Encoding: sqlDollar[4].union.strVal()}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2112
		{
			sqlVAL.union.val = &CreateDatabase{IfNotExists: true, Name: Name(sqlDollar[6].str), Encoding: sqlDollar[7].union.strVal()}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2118
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2121
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 317:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2131
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retExprs()
		}
	case 318:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2137
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
		}
	case 319:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2142
		{
			unimplementedWithIssue(6637)
		}
	case 320:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2144
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2149
		{
			unimplementedWithIssue(6637)
		}
	case 322:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2157
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 323:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2161
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2167
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2171
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2175
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2181
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2185
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2191
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 330:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2195
		{
			unimplemented()
		}
	case 331:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2197
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 332:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2203
		{
			sqlVAL.union.val = sqlDollar[2].union.selExprs()
		}
	case 333:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2207
		{
			sqlVAL.union.val = SelectExprs(nil)
		}
	case 334:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2214
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retExprs()}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2220
		{
			unimplementedWithIssue(7841)
		}
	case 336:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2221
		{
		}
	case 337:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2225
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2229
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 341:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2239
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2251
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2255
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2299
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2305
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2309
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2324
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2328
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2332
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2336
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2340
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2344
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2378
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2391
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2404
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 360:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2412
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 361:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2421
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2430
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2448
		{
			unimplemented()
		}
	case 364:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2449
		{
			unimplemented()
		}
	case 365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2450
		{
			unimplemented()
		}
	case 366:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2453
		{
			unimplemented()
		}
	case 367:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2454
		{
			unimplemented()
		}
	case 368:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2457
		{
			unimplemented()
		}
	case 369:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2460
		{
			unimplemented()
		}
	case 370:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2461
		{
		}
	case 371:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2464
		{
		}
	case 372:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2465
		{
		}
	case 373:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2469
		{
			sqlVAL.union.val = true
		}
	case 374:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2473
		{
			sqlVAL.union.val = false
		}
	case 375:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2477
		{
			sqlVAL.union.val = false
		}
	case 376:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2483
		{
			sqlVAL.union.val = true
		}
	case 377:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2488
		{
		}
	case 378:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2489
		{
		}
	case 379:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2493
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 380:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2497
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 381:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2503
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 382:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2509
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2513
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2519
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2527
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2536
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2547
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2560
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2567
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2574
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 394:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2588
		{
		}
	case 395:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2589
		{
		}
	case 396:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2615
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 397:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2619
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 398:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2625
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 399:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2629
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 400:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2635
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2639
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 402:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2651
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2655
		{
			sqlVAL.union.val = &From{}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2661
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2665
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2671
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2676
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2682
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2687
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			index := a.Index
			if index == "" {
				index = b.Index
			} else if b.Index != "" {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			noIndexJoin := a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = &IndexHints{Index: index, NoIndexJoin: noIndexJoin}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2707
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2711
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 412:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2715
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2722
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), As: sqlDollar[3].union.aliasClause()}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2726
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, As: sqlDollar[2].union.aliasClause()}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2730
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 416:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2734
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[2].union.tblExpr(), As: sqlDollar[4].union.aliasClause()}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2754
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2758
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2762
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2766
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2770
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2774
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2780
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2784
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2788
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2792
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2799
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2805
		{
			sqlVAL.union.val = AsOfClause{Expr: &StrVal{s: sqlDollar[5].str}}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2809
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2815
		{
			sqlVAL.str = astFullJoin
		}
	case 432:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2819
		{
			sqlVAL.str = astLeftJoin
		}
	case 433:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2823
		{
			sqlVAL.str = astRightJoin
		}
	case 434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2827
		{
			sqlVAL.str = astInnerJoin
		}
	case 435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2833
		{
		}
	case 436:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2834
		{
		}
	case 437:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2845
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2849
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2855
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 440:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2859
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 441:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2863
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 442:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2867
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2873
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 444:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2877
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 445:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2890
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 446:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2894
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2898
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2904
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 449:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2908
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 450:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2920
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 451:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2924
		{
			unimplementedWithIssue(2115)
		}
	case 452:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2925
		{
			unimplementedWithIssue(2115)
		}
	case 453:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2928
		{
			unimplementedWithIssue(2115)
		}
	case 454:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2929
		{
			unimplementedWithIssue(2115)
		}
	case 455:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2930
		{
		}
	case 461:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2938
		{
			unimplemented()
		}
	case 462:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2940
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 463:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2944
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 464:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2948
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 465:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2952
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 466:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2956
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 467:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2960
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 468:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2964
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 473:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2985
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2994
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3008
		{
			sqlVAL.union.val = nil
		}
	case 476:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3015
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 477:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3019
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 478:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3023
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 479:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3027
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 480:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3031
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 481:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3035
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 482:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3039
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 483:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3043
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newFloatColType(int(prec))
		}
	case 484:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3052
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 485:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3056
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3065
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3074
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3083
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 489:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3087
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 490:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3093
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 491:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3097
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3115
		{
			n, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 497:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3131
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 502:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3147
		{
			n, err := sqlDollar[3].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3163
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 504:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3169
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 505:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3173
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 506:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3177
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3181
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 508:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3186
		{
		}
	case 509:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3187
		{
		}
	case 510:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3192
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 511:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3196
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 512:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3200
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 513:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3204
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 514:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3208
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 515:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3213
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 516:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3218
		{
			unimplemented()
		}
	case 517:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3219
		{
			unimplemented()
		}
	case 518:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3220
		{
			unimplemented()
		}
	case 519:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3221
		{
			unimplemented()
		}
	case 520:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3222
		{
			unimplemented()
		}
	case 521:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3223
		{
			unimplemented()
		}
	case 522:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3224
		{
			unimplemented()
		}
	case 523:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3225
		{
			unimplemented()
		}
	case 524:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3226
		{
			unimplemented()
		}
	case 525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3227
		{
			unimplemented()
		}
	case 526:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3228
		{
			unimplemented()
		}
	case 527:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3229
		{
			unimplemented()
		}
	case 528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3230
		{
			unimplemented()
		}
	case 529:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3231
		{
		}
	case 530:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3234
		{
			unimplemented()
		}
	case 531:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3235
		{
			unimplemented()
		}
	case 533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3259
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3263
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3266
		{
			unimplemented()
		}
	case 536:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3267
		{
			unimplemented()
		}
	case 537:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3276
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3280
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3284
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3288
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3292
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3296
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3300
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3304
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3308
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3312
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3316
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3320
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3324
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3328
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3332
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3336
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3340
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3344
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3348
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3352
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3356
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3360
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3364
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3368
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3372
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3376
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3380
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3384
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3388
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3392
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3396
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3400
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3404
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3408
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3412
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3416
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3420
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3424
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3427
		{
			unimplemented()
		}
	case 576:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3429
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3433
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3437
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3441
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3445
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3449
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3453
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3457
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3461
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3465
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3469
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3473
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3477
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3481
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3485
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3489
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3506
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3510
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3514
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3518
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3522
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3526
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3530
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3534
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3538
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3542
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3546
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3550
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3554
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3558
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3562
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3566
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3570
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3574
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3578
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3582
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3586
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3590
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3594
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3598
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3602
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3606
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3610
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3614
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3626
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 623:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3631
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3635
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3641
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3645
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3649
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3655
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 631:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3659
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 632:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3663
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3671
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3675
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3678
		{
			unimplemented()
		}
	case 636:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3679
		{
			unimplemented()
		}
	case 637:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3681
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Type: All, Exprs: sqlDollar[4].union.exprs()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3685
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Type: Distinct, Exprs: sqlDollar[4].union.exprs()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3689
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Exprs: Exprs{StarExpr()}}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3702
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 641:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3708
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 642:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3717
		{
			unimplemented()
		}
	case 643:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3718
		{
			unimplemented()
		}
	case 644:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3722
		{
			unimplemented()
		}
	case 645:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3724
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3728
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3732
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3736
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3739
		{
			unimplemented()
		}
	case 650:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3740
		{
			unimplemented()
		}
	case 651:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3741
		{
			unimplemented()
		}
	case 652:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3742
		{
			unimplemented()
		}
	case 653:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3744
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3748
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3752
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3756
		{
			sqlVAL.union.val = &OverlayExpr{FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3760
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3764
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3767
		{
			unimplemented()
		}
	case 660:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3769
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3773
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3777
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3781
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3785
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3789
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3793
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3797
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3801
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3805
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3811
		{
			unimplemented()
		}
	case 671:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3812
		{
		}
	case 672:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3815
		{
			unimplemented()
		}
	case 673:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3816
		{
		}
	case 674:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3821
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 675:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3825
		{
			sqlVAL.union.val = Window(nil)
		}
	case 676:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3831
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3835
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 678:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3841
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 679:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3849
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 680:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3853
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3857
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 682:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3864
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3883
		{
			sqlVAL.str = ""
		}
	case 685:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3889
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 686:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3893
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 687:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3903
		{
			unimplemented()
		}
	case 688:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3904
		{
			unimplemented()
		}
	case 689:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3905
		{
		}
	case 690:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3908
		{
			unimplemented()
		}
	case 691:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3909
		{
			unimplemented()
		}
	case 692:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3915
		{
			unimplemented()
		}
	case 693:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3916
		{
			unimplemented()
		}
	case 694:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3917
		{
			unimplemented()
		}
	case 695:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3918
		{
			unimplemented()
		}
	case 696:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3919
		{
			unimplemented()
		}
	case 697:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3930
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3934
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3938
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3944
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3948
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3954
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3997
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4001
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 705:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4007
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4011
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 707:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4017
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4021
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4025
		{
			sqlVAL.union.val = &Array{nil}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4031
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4035
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 712:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4041
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4063
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4067
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4073
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4080
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4084
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 725:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4101
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4105
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4109
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4113
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4117
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 730:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4121
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 731:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4127
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 732:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4133
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 733:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4139
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 734:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4143
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 735:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4147
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 736:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4153
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4157
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4168
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4175
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4179
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 741:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4185
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4191
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 743:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4195
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 745:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4202
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 746:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4208
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 747:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4212
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 748:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4216
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4220
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr()}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4226
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 751:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4232
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4238
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4242
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 754:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4247
		{
		}
	case 755:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4248
		{
		}
	case 757:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4257
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4263
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4267
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 760:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4276
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 761:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4282
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4286
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 763:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4292
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4301
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4305
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4309
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 767:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4317
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4321
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 769:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4327
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4331
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 771:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4337
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4341
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 773:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4352
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4356
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 775:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4362
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4373
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4377
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4381
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4385
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4391
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4395
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 782:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4401
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 783:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4404
		{
		}
	case 784:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4414
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4418
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 786:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4425
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 787:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4429
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 788:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4433
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4437
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4440
		{
			unimplemented()
		}
	case 791:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4442
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4446
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4450
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[5].str}, Type: sqlDollar[1].union.colType()}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4454
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 795:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4458
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 796:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4462
		{
			sqlVAL.union.val = DNull
		}
	case 798:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4469
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 799:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4473
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 804:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4495
		{
			sqlVAL.str = ""
		}
	case 805:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4501
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 806:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4505
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
