// Code generated by go yacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"go/constant"
	"go/token"

	"github.com/pkg/errors"

	"github.com/cockroachdb/cockroach/sql/privilege"
	"github.com/cockroachdb/cockroach/util"
)

var errUnimplemented = errors.New("unimplemented")

func unimplemented() {
	panic(errUnimplemented)
}

func unimplementedWithIssue(issue int) {
	panic(util.UnimplementedWithIssueErrorf(issue, ""))
}

//line sql.y:44

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new sytax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in two forms, depending on the
// type of the value being accessed. Values and pointers are directly
// type asserted from the empty interface, meaning that they will panic
// if the type assertion is incorrect. Interfaces are handled differently
// because a nil instance of an interface inserted into the empty interface
// becomes a nil instance of the empty interface and therefore will fail a
// direct type assertion. Instead, a guarded type assertion must be used,
// which returns nil if the type assertion fails.
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	return u.val.(*StrVal)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	if namePart, ok := u.val.(NamePart); ok {
		return namePart
	}
	return nil
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionName() FunctionName {
	return u.val.(FunctionName)
}
func (u *sqlSymUnion) normalizableFunctionName() NormalizableFunctionName {
	return NormalizableFunctionName{u.val.(FunctionName)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	if selectStmt, ok := u.val.(*Select); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	if selectStmt, ok := u.val.(SelectStatement); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	if constraintDef, ok := u.val.(ConstraintTableDef); ok {
		return constraintDef
	}
	return nil
}
func (u *sqlSymUnion) tblDef() TableDef {
	if tblDef, ok := u.val.(TableDef); ok {
		return tblDef
	}
	return nil
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	if colQual, ok := u.val.(NamedColumnQualification); ok {
		return colQual
	}
	return NamedColumnQualification{}
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	if colQual, ok := u.val.(ColumnQualification); ok {
		return colQual
	}
	return nil
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retExprs() ReturningExprs {
	return ReturningExprs(u.val.(SelectExprs))
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	if tblExpr, ok := u.val.(TableExpr); ok {
		return tblExpr
	}
	return nil
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	if joinCond, ok := u.val.(JoinCond); ok {
		return joinCond
	}
	return nil
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	if alterTableCmd, ok := u.val.(AlterTableCmd); ok {
		return alterTableCmd
	}
	return nil
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}

//line sql.y:309
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const DOT_DOT = 57353
const LESS_EQUALS = 57354
const GREATER_EQUALS = 57355
const NOT_EQUALS = 57356
const NOT_REGMATCH = 57357
const REGIMATCH = 57358
const NOT_REGIMATCH = 57359
const ERROR = 57360
const ACTION = 57361
const ADD = 57362
const ALL = 57363
const ALTER = 57364
const ANALYSE = 57365
const ANALYZE = 57366
const AND = 57367
const ANY = 57368
const ANNOTATE_TYPE = 57369
const ARRAY = 57370
const AS = 57371
const ASC = 57372
const ASYMMETRIC = 57373
const AT = 57374
const BEGIN = 57375
const BETWEEN = 57376
const BIGINT = 57377
const BIGSERIAL = 57378
const BIT = 57379
const BLOB = 57380
const BOOL = 57381
const BOOLEAN = 57382
const BOTH = 57383
const BY = 57384
const BYTEA = 57385
const BYTES = 57386
const CASCADE = 57387
const CASE = 57388
const CAST = 57389
const CHAR = 57390
const CHARACTER = 57391
const CHARACTERISTICS = 57392
const CHECK = 57393
const COALESCE = 57394
const COLLATE = 57395
const COLLATION = 57396
const COLUMN = 57397
const COLUMNS = 57398
const COMMIT = 57399
const COMMITTED = 57400
const CONCAT = 57401
const CONFLICT = 57402
const CONSTRAINT = 57403
const CONSTRAINTS = 57404
const COVERING = 57405
const CREATE = 57406
const CROSS = 57407
const CUBE = 57408
const CURRENT = 57409
const CURRENT_CATALOG = 57410
const CURRENT_DATE = 57411
const CURRENT_ROLE = 57412
const CURRENT_TIME = 57413
const CURRENT_TIMESTAMP = 57414
const CURRENT_USER = 57415
const CYCLE = 57416
const DATA = 57417
const DATABASE = 57418
const DATABASES = 57419
const DATE = 57420
const DAY = 57421
const DEC = 57422
const DECIMAL = 57423
const DEFAULT = 57424
const DEALLOCATE = 57425
const DEFERRABLE = 57426
const DELETE = 57427
const DESC = 57428
const DISTINCT = 57429
const DO = 57430
const DOUBLE = 57431
const DROP = 57432
const ELSE = 57433
const ENCODING = 57434
const END = 57435
const ESCAPE = 57436
const EXCEPT = 57437
const EXISTS = 57438
const EXECUTE = 57439
const EXPLAIN = 57440
const EXTRACT = 57441
const FALSE = 57442
const FAMILY = 57443
const FETCH = 57444
const FILTER = 57445
const FIRST = 57446
const FLOAT = 57447
const FLOORDIV = 57448
const FOLLOWING = 57449
const FOR = 57450
const FORCE_INDEX = 57451
const FOREIGN = 57452
const FROM = 57453
const FULL = 57454
const GRANT = 57455
const GRANTS = 57456
const GREATEST = 57457
const GROUP = 57458
const GROUPING = 57459
const HAVING = 57460
const HIGH = 57461
const HOUR = 57462
const IF = 57463
const IFNULL = 57464
const ILIKE = 57465
const IN = 57466
const INTERLEAVE = 57467
const INDEX = 57468
const INDEXES = 57469
const INITIALLY = 57470
const INNER = 57471
const INSERT = 57472
const INT = 57473
const INT64 = 57474
const INTEGER = 57475
const INTERSECT = 57476
const INTERVAL = 57477
const INTO = 57478
const IS = 57479
const ISOLATION = 57480
const JOIN = 57481
const KEY = 57482
const KEYS = 57483
const LATERAL = 57484
const LEADING = 57485
const LEAST = 57486
const LEFT = 57487
const LEVEL = 57488
const LIKE = 57489
const LIMIT = 57490
const LOCAL = 57491
const LOCALTIME = 57492
const LOCALTIMESTAMP = 57493
const LOW = 57494
const LSHIFT = 57495
const MATCH = 57496
const MINUTE = 57497
const MONTH = 57498
const NAME = 57499
const NAMES = 57500
const NATURAL = 57501
const NEXT = 57502
const NO = 57503
const NO_INDEX_JOIN = 57504
const NORMAL = 57505
const NOT = 57506
const NOTHING = 57507
const NULL = 57508
const NULLIF = 57509
const NULLS = 57510
const NUMERIC = 57511
const OF = 57512
const OFF = 57513
const OFFSET = 57514
const ON = 57515
const ONLY = 57516
const OR = 57517
const ORDER = 57518
const ORDINALITY = 57519
const OUT = 57520
const OUTER = 57521
const OVER = 57522
const OVERLAPS = 57523
const OVERLAY = 57524
const PARENT = 57525
const PARTIAL = 57526
const PARTITION = 57527
const PLACING = 57528
const POSITION = 57529
const PRECEDING = 57530
const PRECISION = 57531
const PREPARE = 57532
const PRIMARY = 57533
const PRIORITY = 57534
const RANGE = 57535
const READ = 57536
const REAL = 57537
const RECURSIVE = 57538
const REF = 57539
const REFERENCES = 57540
const RENAME = 57541
const REPEATABLE = 57542
const RELEASE = 57543
const RESTRICT = 57544
const RETURNING = 57545
const REVOKE = 57546
const RIGHT = 57547
const ROLLBACK = 57548
const ROLLUP = 57549
const ROW = 57550
const ROWS = 57551
const RSHIFT = 57552
const SAVEPOINT = 57553
const SEARCH = 57554
const SECOND = 57555
const SELECT = 57556
const SERIAL = 57557
const SERIALIZABLE = 57558
const SESSION = 57559
const SESSION_USER = 57560
const SET = 57561
const SHOW = 57562
const SIMILAR = 57563
const SIMPLE = 57564
const SMALLINT = 57565
const SMALLSERIAL = 57566
const SNAPSHOT = 57567
const SOME = 57568
const SQL = 57569
const START = 57570
const STRICT = 57571
const STRING = 57572
const STORING = 57573
const SUBSTRING = 57574
const SYMMETRIC = 57575
const SYSTEM = 57576
const TABLE = 57577
const TABLES = 57578
const TEXT = 57579
const THEN = 57580
const TIME = 57581
const TIMESTAMP = 57582
const TIMESTAMPTZ = 57583
const TO = 57584
const TRAILING = 57585
const TRANSACTION = 57586
const TREAT = 57587
const TRIM = 57588
const TRUE = 57589
const TRUNCATE = 57590
const TYPE = 57591
const UNBOUNDED = 57592
const UNCOMMITTED = 57593
const UNION = 57594
const UNIQUE = 57595
const UNKNOWN = 57596
const UPDATE = 57597
const UPSERT = 57598
const USER = 57599
const USING = 57600
const VALID = 57601
const VALIDATE = 57602
const VALUE = 57603
const VALUES = 57604
const VARCHAR = 57605
const VARIADIC = 57606
const VARYING = 57607
const WHEN = 57608
const WHERE = 57609
const WINDOW = 57610
const WITH = 57611
const WITHIN = 57612
const WITHOUT = 57613
const YEAR = 57614
const ZONE = 57615
const NOT_LA = 57616
const WITH_LA = 57617
const AS_LA = 57618
const POSTFIXOP = 57619
const UMINUS = 57620

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPLAIN",
	"EXTRACT",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HOUR",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SQL",
	"START",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:4687

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 24,
	297, 24,
	-2, 356,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 39,
	1, 331,
	173, 331,
	203, 331,
	295, 331,
	297, 331,
	-2, 341,
	-1, 52,
	1, 334,
	173, 334,
	203, 334,
	295, 334,
	297, 334,
	-2, 340,
	-1, 61,
	1, 24,
	297, 24,
	-2, 356,
	-1, 272,
	1, 162,
	297, 162,
	-2, 850,
	-1, 305,
	148, 366,
	172, 366,
	-2, 337,
	-1, 308,
	148, 365,
	172, 365,
	-2, 335,
	-1, 430,
	148, 365,
	172, 365,
	-2, 338,
	-1, 486,
	294, 790,
	-2, 783,
	-1, 487,
	294, 791,
	-2, 784,
	-1, 493,
	5, 500,
	294, 500,
	-2, 937,
	-1, 516,
	5, 466,
	-2, 913,
	-1, 517,
	5, 494,
	294, 494,
	-2, 915,
	-1, 518,
	5, 474,
	-2, 916,
	-1, 519,
	5, 473,
	-2, 917,
	-1, 520,
	5, 494,
	294, 494,
	-2, 920,
	-1, 521,
	5, 494,
	294, 494,
	-2, 921,
	-1, 522,
	5, 495,
	-2, 924,
	-1, 523,
	5, 461,
	-2, 925,
	-1, 524,
	5, 461,
	-2, 926,
	-1, 525,
	5, 476,
	-2, 929,
	-1, 526,
	5, 462,
	-2, 934,
	-1, 527,
	5, 463,
	-2, 935,
	-1, 528,
	5, 464,
	-2, 936,
	-1, 529,
	5, 461,
	-2, 940,
	-1, 530,
	5, 467,
	-2, 945,
	-1, 531,
	5, 465,
	-2, 948,
	-1, 532,
	5, 492,
	294, 492,
	-2, 950,
	-1, 533,
	5, 496,
	-2, 953,
	-1, 534,
	5, 498,
	-2, 954,
	-1, 535,
	5, 491,
	294, 491,
	-2, 958,
	-1, 854,
	95, 341,
	134, 341,
	148, 341,
	172, 341,
	176, 341,
	252, 341,
	-2, 610,
	-1, 862,
	294, 768,
	-2, 757,
	-1, 1053,
	12, 0,
	13, 0,
	14, 0,
	277, 0,
	278, 0,
	279, 0,
	-2, 534,
	-1, 1054,
	12, 0,
	13, 0,
	14, 0,
	277, 0,
	278, 0,
	279, 0,
	-2, 535,
	-1, 1055,
	12, 0,
	13, 0,
	14, 0,
	277, 0,
	278, 0,
	279, 0,
	-2, 536,
	-1, 1059,
	12, 0,
	13, 0,
	14, 0,
	277, 0,
	278, 0,
	279, 0,
	-2, 540,
	-1, 1060,
	12, 0,
	13, 0,
	14, 0,
	277, 0,
	278, 0,
	279, 0,
	-2, 541,
	-1, 1061,
	12, 0,
	13, 0,
	14, 0,
	277, 0,
	278, 0,
	279, 0,
	-2, 542,
	-1, 1064,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 547,
	-1, 1070,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 549,
	-1, 1073,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 554,
	-1, 1074,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 555,
	-1, 1075,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 556,
	-1, 1100,
	181, 681,
	-2, 684,
	-1, 1263,
	95, 341,
	134, 341,
	148, 341,
	172, 341,
	176, 341,
	252, 341,
	-2, 414,
	-1, 1267,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 548,
	-1, 1268,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 550,
	-1, 1273,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 551,
	-1, 1291,
	181, 680,
	-2, 683,
	-1, 1450,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 552,
	-1, 1455,
	137, 0,
	-2, 566,
	-1, 1463,
	181, 682,
	-2, 685,
	-1, 1496,
	12, 0,
	13, 0,
	14, 0,
	277, 0,
	278, 0,
	279, 0,
	-2, 591,
	-1, 1497,
	12, 0,
	13, 0,
	14, 0,
	277, 0,
	278, 0,
	279, 0,
	-2, 592,
	-1, 1498,
	12, 0,
	13, 0,
	14, 0,
	277, 0,
	278, 0,
	279, 0,
	-2, 593,
	-1, 1502,
	12, 0,
	13, 0,
	14, 0,
	277, 0,
	278, 0,
	279, 0,
	-2, 597,
	-1, 1503,
	12, 0,
	13, 0,
	14, 0,
	277, 0,
	278, 0,
	279, 0,
	-2, 598,
	-1, 1504,
	12, 0,
	13, 0,
	14, 0,
	277, 0,
	278, 0,
	279, 0,
	-2, 599,
	-1, 1608,
	137, 0,
	-2, 567,
	-1, 1611,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 570,
	-1, 1612,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 572,
	-1, 1698,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 571,
	-1, 1699,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 573,
	-1, 1706,
	137, 0,
	-2, 600,
	-1, 1751,
	137, 0,
	-2, 601,
	-1, 1804,
	34, 0,
	123, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 912,
}

const sqlNprod = 1052
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 23343

var sqlAct = [...]int{

	487, 1803, 577, 1783, 806, 1417, 936, 1827, 1757, 1651,
	1784, 1802, 1785, 944, 1026, 309, 1474, 1600, 1686, 679,
	485, 273, 1674, 548, 1573, 1035, 590, 1574, 479, 857,
	484, 1534, 477, 85, 85, 85, 86, 1594, 85, 1587,
	784, 85, 331, 38, 1260, 591, 1009, 1006, 1429, 85,
	1294, 1346, 1250, 787, 1192, 536, 85, 85, 1259, 859,
	85, 1345, 449, 85, 85, 85, 1439, 1008, 557, 85,
	85, 85, 85, 17, 357, 1034, 554, 945, 1146, 921,
	1244, 1110, 1086, 1038, 975, 912, 1083, 316, 51, 959,
	23, 968, 653, 352, 418, 13, 802, 559, 314, 637,
	6, 459, 1198, 1036, 308, 74, 549, 1001, 550, 450,
	358, 419, 634, 889, 664, 354, 349, 314, 8, 51,
	7, 5, 79, 347, 4, 72, 938, 78, 350, 359,
	893, 1012, 80, 434, 319, 460, 260, 633, 433, 251,
	808, 655, 651, 432, 570, 343, 579, 1258, 1149, 51,
	81, 317, 76, 75, 437, 538, 77, 52, 537, 1693,
	937, 579, 1694, 327, 1834, 579, 334, 1030, 1819, 313,
	313, 1030, 344, 53, 972, 568, 1800, 1791, 941, 1673,
	1030, 337, 978, 1781, 1776, 298, 965, 1030, 355, 1741,
	1753, 1204, 270, 965, 1747, 328, 1737, 1030, 328, 1673,
	339, 1205, 1727, 809, 328, 1030, 339, 1289, 321, 306,
	82, 1700, 1290, 1697, 965, 973, 1030, 1676, 1683, 1681,
	811, 1673, 1030, 1672, 1656, 305, 1673, 1030, 1655, 1633,
	1613, 1030, 978, 978, 1610, 1546, 1459, 965, 1030, 978,
	57, 1317, 813, 1334, 1335, 1336, 1403, 85, 1288, 1397,
	974, 971, 50, 978, 1396, 1363, 1607, 1397, 1364, 1248,
	810, 59, 85, 812, 1361, 85, 85, 978, 1360, 827,
	1359, 978, 1291, 978, 1031, 978, 987, 1030, 30, 978,
	977, 1247, 964, 978, 909, 965, 31, 908, 60, 1247,
	1331, 1293, 978, 585, 1509, 55, 586, 1462, 85, 1230,
	85, 56, 85, 580, 85, 910, 1232, 1030, 976, 980,
	57, 1094, 1025, 995, 445, 777, 818, 776, 580, 85,
	54, 431, 580, 425, 551, 645, 644, 444, 552, 383,
	85, 59, 326, 61, 551, 552, 678, 1322, 552, 403,
	1801, 85, 85, 85, 1798, 85, 1790, 1748, 1682, 1638,
	1634, 1626, 1625, 582, 1624, 1619, 430, 1618, 60, 1617,
	547, 1571, 391, 828, 1524, 55, 1519, 970, 1337, 543,
	1518, 56, 1517, 57, 1465, 1448, 85, 1428, 1424, 392,
	1407, 1368, 1564, 85, 1332, 85, 542, 1365, 1204, 969,
	940, 1234, 1353, 1344, 59, 1316, 357, 357, 1313, 583,
	1311, 1299, 57, 424, 681, 85, 597, 85, 85, 85,
	85, 85, 85, 85, 578, 1570, 1298, 85, 780, 1231,
	829, 60, 85, 59, 1163, 1117, 779, 674, 85, 1116,
	865, 444, 358, 358, 422, 328, 443, 1793, 1091, 1476,
	682, 1333, 1767, 1405, 344, 1740, 85, 809, 1719, 85,
	60, 359, 359, 54, 1717, 782, 551, 55, 1569, 683,
	552, 1708, 1690, 56, 1679, 545, 440, 441, 1670, 1648,
	446, 1631, 1603, 1581, 306, 1454, 328, 571, 571, 587,
	1447, 1425, 54, 1422, 1420, 1317, 569, 572, 1380, 1379,
	305, 823, 820, 821, 822, 814, 815, 816, 817, 819,
	1343, 839, 862, 1563, 811, 1307, 1306, 314, 1328, 1329,
	1330, 328, 1327, 1324, 1325, 1326, 1318, 1319, 1320, 1321,
	1323, 811, 641, 640, 1092, 417, 1285, 1281, 631, 1088,
	1219, 1177, 1176, 619, 1156, 811, 618, 1115, 643, 668,
	675, 1029, 894, 813, 767, 897, 901, 85, 887, 886,
	885, 884, 883, 681, 882, 881, 880, 813, 778, 1177,
	879, 85, 878, 877, 812, 85, 876, 791, 85, 85,
	875, 904, 906, 792, 85, 790, 85, 85, 812, 85,
	804, 1322, 85, 874, 85, 85, 873, 357, 872, 682,
	863, 861, 54, 332, 448, 306, 389, 764, 306, 306,
	768, 769, 770, 771, 772, 954, 352, 915, 683, 775,
	379, 798, 856, 377, 799, 800, 860, 818, 453, 1213,
	82, 1212, 1317, 358, 1334, 1335, 1336, 544, 1367, 811,
	1695, 1568, 1206, 1020, 891, 892, 85, 85, 397, 1366,
	1266, 982, 359, 1423, 939, 1132, 939, 926, 928, 899,
	413, 813, 398, 900, 870, 895, 1588, 937, 1317, 74,
	898, 1477, 50, 960, 828, 1111, 1302, 890, 931, 1200,
	1763, 1331, 812, 51, 1815, 1814, 79, 51, 1726, 681,
	962, 78, 903, 902, 934, 961, 80, 811, 30, 312,
	963, 1554, 918, 65, 811, 952, 31, 263, 1000, 943,
	328, 355, 957, 339, 81, 953, 76, 75, 492, 948,
	77, 956, 986, 955, 339, 682, 813, 339, 1322, 866,
	781, 829, 1542, 673, 672, 818, 666, 661, 311, 1404,
	812, 540, 1226, 297, 683, 296, 1338, 812, 66, 291,
	989, 892, 891, 292, 895, 983, 898, 984, 981, 1337,
	560, 1664, 561, 1543, 1322, 416, 988, 1663, 1392, 1372,
	1318, 1319, 1320, 1321, 1323, 1332, 1371, 85, 1725, 395,
	313, 1269, 828, 1218, 1217, 560, 1216, 561, 1215, 1071,
	979, 85, 85, 933, 932, 839, 421, 1688, 1160, 1159,
	818, 1042, 823, 820, 821, 822, 814, 815, 816, 817,
	819, 676, 839, 375, 914, 300, 396, 1591, 914, 1653,
	1391, 85, 57, 85, 913, 1032, 839, 1412, 420, 1765,
	562, 1085, 1333, 1085, 1382, 573, 539, 976, 1824, 829,
	1023, 1024, 1778, 59, 1041, 1538, 1122, 1539, 1193, 1394,
	597, 1111, 579, 303, 1814, 562, 310, 681, 1779, 489,
	1202, 1191, 1409, 566, 625, 1197, 1016, 1040, 565, 1720,
	60, 1227, 1541, 68, 67, 69, 1089, 55, 677, 1544,
	394, 1704, 1004, 56, 560, 976, 561, 888, 1671, 853,
	1305, 904, 63, 682, 1005, 1193, 904, 1410, 1003, 1328,
	1329, 1330, 73, 1327, 1324, 1325, 1326, 1318, 1319, 1320,
	1321, 1323, 683, 822, 814, 815, 816, 817, 819, 1162,
	839, 1125, 85, 85, 85, 70, 328, 811, 85, 1033,
	1098, 85, 1440, 313, 1540, 1225, 436, 85, 85, 85,
	85, 85, 64, 85, 85, 1320, 1321, 1323, 1278, 813,
	252, 85, 922, 85, 562, 976, 328, 1786, 597, 393,
	85, 1276, 1126, 1383, 1188, 1090, 1208, 1107, 1209, 85,
	812, 257, 386, 388, 1172, 1174, 253, 619, 839, 1813,
	618, 816, 817, 819, 1787, 839, 991, 1654, 1811, 1433,
	85, 85, 993, 414, 314, 1166, 85, 1127, 1124, 254,
	563, 1389, 972, 1195, 597, 911, 357, 1586, 994, 580,
	1187, 925, 301, 394, 667, 662, 256, 992, 1167, 1095,
	1099, 1211, 1102, 818, 85, 563, 85, 1274, 85, 85,
	304, 1279, 85, 1271, 71, 1084, 1068, 1823, 1141, 1018,
	406, 85, 358, 973, 1153, 1154, 1155, 415, 85, 1236,
	85, 62, 435, 384, 1830, 1128, 1788, 1168, 382, 1658,
	1505, 359, 1207, 558, 1233, 797, 1235, 1317, 1629, 1334,
	1335, 1336, 1210, 1840, 1657, 1265, 436, 1646, 974, 971,
	1714, 1408, 1606, 1374, 1171, 619, 1199, 1758, 618, 1550,
	1222, 1224, 924, 314, 1789, 1199, 596, 1221, 1228, 1019,
	255, 1229, 789, 1223, 328, 783, 1601, 435, 1275, 774,
	1081, 650, 472, 960, 1123, 1277, 1331, 646, 1822, 621,
	1647, 393, 1179, 1079, 563, 1066, 1069, 51, 1292, 1242,
	962, 619, 1241, 1264, 618, 961, 976, 1506, 1178, 1597,
	963, 258, 314, 1507, 648, 83, 244, 245, 342, 1065,
	262, 1630, 1435, 274, 923, 649, 1434, 1839, 341, 1602,
	311, 262, 1272, 1322, 1237, 1270, 1249, 1553, 320, 320,
	1828, 1549, 330, 427, 1552, 330, 336, 330, 1418, 1572,
	1644, 330, 345, 330, 274, 328, 249, 1077, 85, 1076,
	1430, 314, 1378, 1082, 1337, 970, 1386, 1245, 1388, 1114,
	1645, 1301, 814, 815, 816, 817, 819, 1707, 839, 1253,
	1332, 1829, 1348, 1253, 620, 85, 85, 1628, 1347, 1453,
	1399, 1312, 1280, 1067, 985, 412, 1256, 411, 1831, 252,
	1256, 410, 1350, 1351, 1352, 409, 1438, 593, 408, 407,
	1251, 85, 1254, 85, 404, 85, 1254, 1284, 340, 85,
	257, 1286, 871, 1369, 766, 253, 1551, 1113, 85, 1782,
	1252, 1471, 85, 1296, 1297, 1376, 1393, 1333, 85, 681,
	1078, 1755, 85, 1531, 85, 1398, 1387, 1080, 254, 1385,
	1373, 1238, 1021, 1432, 1390, 1421, 1017, 1436, 1444, 1187,
	958, 1401, 1400, 1402, 584, 256, 1342, 581, 576, 567,
	564, 788, 1255, 1665, 1427, 682, 1255, 1355, 1027, 438,
	1419, 1411, 1413, 1414, 324, 1437, 85, 1815, 1456, 670,
	597, 1467, 1468, 1469, 683, 3, 1443, 400, 1667, 930,
	1395, 1441, 1442, 1676, 1328, 1329, 1330, 1722, 1327, 1324,
	1325, 1326, 1318, 1319, 1320, 1321, 1323, 914, 597, 597,
	948, 328, 914, 929, 1750, 1431, 597, 442, 927, 380,
	1464, 1742, 248, 942, 1028, 1480, 1481, 805, 1478, 642,
	589, 967, 1837, 1485, 385, 439, 290, 274, 274, 255,
	325, 1838, 85, 85, 85, 1317, 1483, 333, 597, 811,
	85, 85, 1525, 328, 1547, 1548, 85, 328, 85, 259,
	85, 85, 85, 85, 401, 1516, 1415, 1512, 85, 1406,
	262, 1362, 330, 1214, 274, 1161, 428, 1158, 1513, 1157,
	258, 1108, 293, 294, 997, 996, 998, 1743, 1526, 1615,
	1530, 320, 299, 85, 85, 1470, 1239, 1582, 999, 864,
	1652, 250, 330, 765, 1460, 85, 85, 619, 405, 85,
	618, 1579, 1621, 330, 330, 330, 1579, 574, 85, 85,
	1585, 1578, 1604, 1580, 1567, 1777, 1578, 1561, 1580, 1304,
	1592, 1593, 1703, 1685, 1598, 619, 619, 1112, 618, 618,
	1565, 1583, 869, 619, 29, 1576, 618, 85, 330, 465,
	1532, 1609, 1249, 597, 1375, 638, 1011, 638, 1010, 684,
	671, 660, 1510, 1605, 488, 654, 663, 1133, 1584, 1121,
	541, 490, 594, 1520, 491, 619, 595, 274, 618, 638,
	274, 274, 274, 274, 274, 773, 896, 478, 592, 274,
	596, 353, 1246, 946, 262, 1557, 1109, 1300, 867, 1253,
	786, 464, 85, 1566, 85, 1627, 85, 85, 470, 469,
	1096, 376, 461, 621, 1599, 85, 1256, 1257, 320, 41,
	390, 807, 268, 269, 1196, 1562, 1251, 1642, 1661, 1662,
	1022, 793, 1254, 1384, 85, 302, 1639, 1314, 1666, 378,
	328, 328, 1139, 1131, 328, 1129, 1252, 1120, 1640, 423,
	1590, 553, 947, 597, 402, 1203, 966, 85, 447, 85,
	1596, 801, 1792, 323, 322, 1007, 399, 647, 85, 1677,
	1660, 990, 1579, 295, 85, 1675, 1680, 1716, 1696, 1721,
	619, 1668, 1578, 618, 1580, 1381, 1762, 58, 22, 20,
	19, 18, 1255, 1692, 16, 15, 14, 21, 596, 12,
	11, 1689, 1702, 10, 9, 28, 27, 26, 620, 25,
	2, 1, 0, 0, 0, 85, 0, 0, 0, 330,
	0, 621, 1317, 0, 0, 0, 0, 1718, 1709, 0,
	597, 593, 0, 919, 85, 85, 0, 330, 85, 0,
	330, 935, 85, 1712, 596, 1595, 330, 85, 950, 951,
	1650, 330, 1730, 0, 330, 1713, 274, 274, 1738, 1732,
	0, 85, 1734, 1739, 1579, 1744, 681, 621, 1733, 904,
	0, 1731, 1133, 1133, 1578, 0, 1580, 0, 0, 0,
	619, 1745, 0, 618, 314, 1746, 0, 0, 85, 1749,
	85, 85, 1684, 85, 1760, 1317, 0, 0, 0, 1282,
	1283, 0, 682, 328, 1766, 1752, 1768, 597, 638, 807,
	0, 0, 85, 0, 1764, 1772, 620, 1771, 1322, 0,
	0, 683, 1770, 1133, 1133, 1133, 0, 0, 1769, 1775,
	1774, 1579, 0, 0, 0, 1773, 85, 0, 85, 593,
	632, 1578, 1796, 1580, 1331, 0, 0, 1799, 0, 1795,
	1339, 1340, 1341, 85, 1797, 0, 0, 619, 0, 811,
	618, 1808, 620, 0, 85, 1332, 1812, 1810, 1817, 0,
	0, 1816, 1818, 0, 0, 0, 1821, 0, 0, 0,
	1820, 813, 0, 0, 0, 593, 0, 0, 0, 0,
	1833, 1322, 1835, 1832, 0, 0, 1836, 0, 1736, 0,
	0, 0, 812, 0, 0, 0, 0, 0, 0, 1841,
	0, 0, 0, 0, 0, 0, 0, 0, 1542, 0,
	1535, 0, 1333, 0, 0, 0, 1761, 0, 1533, 0,
	0, 1537, 0, 0, 619, 0, 0, 618, 1332, 1002,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1543,
	0, 0, 0, 330, 919, 818, 0, 0, 0, 1133,
	1133, 0, 0, 0, 0, 0, 1317, 0, 1536, 1780,
	0, 948, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 330, 0, 274, 1451, 1452, 0, 0,
	0, 0, 0, 0, 0, 1333, 1326, 1318, 1319, 1320,
	1321, 1323, 828, 0, 0, 0, 0, 1133, 1133, 1133,
	1133, 1133, 1133, 1133, 1133, 1133, 1133, 1133, 1133, 1133,
	1133, 1133, 1133, 1133, 1133, 1133, 0, 1133, 0, 0,
	0, 1538, 0, 1539, 1486, 1487, 1488, 1489, 1490, 1491,
	1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499, 1500, 1501,
	1502, 1503, 1504, 1317, 1508, 0, 0, 0, 1541, 829,
	596, 0, 1322, 0, 0, 1544, 1327, 1324, 1325, 1326,
	1318, 1319, 1320, 1321, 1323, 0, 0, 0, 0, 0,
	0, 0, 0, 621, 330, 1169, 1170, 0, 596, 596,
	919, 0, 0, 1175, 0, 0, 596, 0, 0, 1180,
	1181, 1183, 1185, 1186, 0, 1189, 1190, 0, 0, 1332,
	0, 621, 621, 330, 0, 1201, 0, 0, 0, 621,
	1540, 0, 330, 0, 0, 0, 0, 0, 596, 0,
	0, 330, 0, 0, 814, 815, 816, 817, 819, 0,
	839, 0, 0, 0, 0, 0, 0, 0, 0, 1322,
	0, 621, 1002, 638, 0, 0, 0, 0, 1002, 0,
	0, 0, 0, 451, 451, 0, 1333, 0, 0, 0,
	0, 0, 0, 555, 0, 0, 0, 0, 620, 0,
	0, 0, 0, 0, 0, 0, 786, 0, 786, 0,
	274, 330, 0, 0, 1240, 0, 1332, 0, 0, 0,
	0, 593, 0, 1243, 0, 0, 620, 620, 0, 0,
	1262, 0, 330, 0, 620, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 593,
	593, 0, 1133, 596, 0, 0, 0, 593, 1324, 1325,
	1326, 1318, 1319, 1320, 1321, 1323, 620, 0, 0, 0,
	0, 0, 0, 1333, 0, 0, 621, 0, 811, 1649,
	830, 831, 832, 840, 841, 842, 0, 0, 0, 593,
	0, 0, 0, 833, 0, 0, 794, 796, 0, 0,
	813, 0, 844, 803, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 848, 849, 850, 851, 852,
	0, 812, 0, 811, 855, 0, 0, 827, 840, 841,
	842, 0, 0, 0, 0, 0, 0, 1133, 0, 0,
	0, 0, 0, 0, 868, 813, 0, 844, 1318, 1319,
	1320, 1321, 1323, 596, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1706, 0, 812, 0, 0, 0,
	807, 620, 827, 0, 818, 0, 621, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1317, 0, 1334, 1335,
	1336, 837, 845, 0, 593, 0, 0, 330, 330, 0,
	0, 1458, 0, 0, 0, 843, 0, 0, 0, 0,
	466, 39, 905, 0, 0, 835, 1133, 0, 0, 818,
	0, 828, 0, 1416, 0, 919, 0, 786, 0, 0,
	596, 1426, 0, 0, 0, 1331, 837, 845, 0, 0,
	330, 0, 39, 1751, 330, 0, 0, 0, 0, 0,
	1262, 0, 0, 621, 1446, 0, 1262, 0, 0, 0,
	835, 0, 307, 0, 0, 315, 828, 0, 0, 0,
	0, 620, 39, 0, 811, 0, 0, 0, 829, 0,
	0, 0, 1322, 0, 315, 0, 0, 0, 0, 838,
	0, 0, 0, 0, 593, 0, 813, 0, 1475, 0,
	0, 0, 0, 0, 0, 0, 0, 596, 0, 0,
	0, 0, 0, 1337, 0, 0, 0, 812, 0, 0,
	0, 0, 0, 829, 0, 0, 0, 0, 0, 1332,
	621, 0, 0, 0, 838, 0, 0, 0, 0, 0,
	0, 0, 836, 0, 0, 824, 825, 826, 620, 823,
	820, 821, 822, 814, 815, 816, 817, 819, 0, 839,
	0, 0, 0, 0, 1528, 1529, 919, 0, 0, 0,
	818, 593, 807, 807, 0, 0, 0, 0, 1555, 0,
	1556, 0, 330, 1558, 1559, 1560, 1333, 836, 0, 0,
	330, 0, 0, 0, 823, 820, 821, 822, 814, 815,
	816, 817, 819, 0, 839, 0, 0, 0, 0, 0,
	0, 0, 0, 1575, 0, 807, 919, 828, 1575, 1317,
	0, 0, 0, 0, 0, 620, 0, 330, 330, 0,
	0, 330, 0, 0, 0, 0, 0, 0, 0, 0,
	807, 1262, 0, 0, 0, 0, 0, 0, 593, 0,
	0, 0, 0, 1328, 1329, 1330, 0, 1327, 1324, 1325,
	1326, 1318, 1319, 1320, 1321, 1323, 0, 0, 0, 1622,
	451, 0, 0, 0, 829, 1043, 1044, 1045, 1046, 1047,
	1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057,
	1058, 1059, 1060, 1061, 1062, 1063, 1064, 0, 1070, 0,
	1072, 1073, 1074, 1075, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 275, 0, 1322, 0, 0, 0, 0,
	0, 0, 0, 0, 919, 0, 1641, 307, 274, 1643,
	288, 0, 0, 0, 0, 1118, 1119, 330, 1130, 0,
	1140, 1142, 1147, 1150, 1151, 1152, 820, 821, 822, 814,
	815, 816, 817, 819, 0, 839, 807, 0, 0, 0,
	0, 0, 1332, 0, 0, 277, 0, 0, 0, 555,
	282, 283, 0, 289, 1575, 0, 0, 0, 0, 330,
	0, 1687, 0, 0, 0, 276, 278, 0, 0, 0,
	330, 0, 0, 0, 0, 0, 807, 0, 1194, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1333,
	0, 0, 811, 279, 830, 831, 832, 840, 841, 842,
	0, 0, 0, 0, 0, 280, 281, 786, 0, 1220,
	0, 0, 0, 0, 813, 0, 844, 0, 307, 0,
	284, 307, 307, 0, 0, 0, 1723, 1724, 0, 0,
	1728, 0, 0, 0, 1729, 812, 1575, 0, 0, 274,
	0, 827, 0, 0, 854, 0, 0, 0, 858, 0,
	0, 0, 0, 807, 0, 0, 803, 0, 0, 0,
	1327, 1324, 1325, 1326, 1318, 1319, 1320, 1321, 1323, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1759, 0, 807, 330, 0, 274, 0, 0, 818, 0,
	0, 0, 0, 0, 0, 0, 1267, 1268, 0, 0,
	0, 0, 1273, 1575, 1687, 837, 845, 0, 0, 0,
	0, 0, 0, 0, 0, 285, 0, 0, 286, 843,
	0, 0, 0, 287, 0, 1287, 0, 0, 330, 835,
	807, 0, 0, 0, 1295, 828, 0, 0, 0, 0,
	0, 0, 1303, 0, 0, 1809, 1308, 0, 0, 0,
	0, 39, 0, 39, 0, 0, 807, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 39, 0, 855, 0,
	39, 0, 0, 0, 1147, 1147, 1147, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 829, 0, 0, 811, 1370, 830, 831, 832,
	840, 841, 842, 838, 0, 0, 0, 1377, 0, 0,
	833, 0, 0, 0, 0, 0, 0, 813, 0, 844,
	0, 0, 0, 0, 451, 0, 0, 0, 0, 0,
	0, 0, 0, 451, 0, 0, 0, 555, 812, 0,
	0, 0, 0, 0, 827, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 836, 0, 0, 824,
	825, 826, 0, 823, 820, 821, 822, 814, 815, 816,
	817, 819, 0, 839, 0, 0, 0, 0, 0, 0,
	811, 0, 830, 831, 832, 840, 841, 842, 0, 0,
	0, 818, 0, 0, 0, 833, 0, 1449, 0, 0,
	1450, 0, 813, 0, 844, 0, 0, 0, 837, 845,
	0, 1455, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 843, 812, 1220, 0, 0, 0, 0, 827,
	0, 0, 835, 1472, 0, 0, 0, 0, 828, 0,
	0, 0, 0, 1482, 0, 0, 1484, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	834, 0, 0, 39, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 818, 0, 1514, 1515,
	0, 0, 0, 0, 0, 0, 0, 1521, 1522, 1523,
	0, 1037, 0, 837, 845, 829, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 838, 843, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 835, 0, 0,
	0, 0, 0, 828, 0, 451, 1087, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 834, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 836,
	0, 1589, 824, 825, 826, 0, 823, 820, 821, 822,
	814, 815, 816, 817, 819, 0, 839, 0, 1164, 0,
	829, 0, 0, 0, 1608, 0, 0, 1165, 1611, 1612,
	0, 838, 0, 1614, 0, 0, 0, 1616, 0, 0,
	0, 0, 0, 0, 1620, 0, 0, 0, 1623, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 315, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1632, 0, 0, 0, 836, 0, 0, 824, 825, 826,
	0, 823, 820, 821, 822, 814, 815, 816, 817, 819,
	0, 839, 0, 0, 0, 0, 0, 0, 1635, 811,
	0, 830, 831, 832, 840, 841, 842, 0, 0, 0,
	0, 0, 0, 1659, 833, 0, 0, 0, 0, 0,
	0, 813, 0, 844, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1678, 0,
	39, 0, 812, 0, 0, 0, 0, 0, 827, 811,
	1263, 830, 831, 832, 840, 841, 842, 1691, 0, 0,
	0, 0, 0, 0, 833, 0, 0, 1698, 1699, 0,
	0, 813, 0, 844, 0, 0, 0, 0, 0, 0,
	1087, 0, 0, 0, 811, 0, 830, 831, 832, 840,
	841, 842, 812, 0, 0, 818, 1711, 0, 827, 854,
	0, 0, 0, 0, 0, 0, 813, 0, 844, 1715,
	0, 0, 837, 845, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 843, 812, 0, 0,
	0, 555, 0, 827, 0, 0, 835, 0, 0, 0,
	0, 0, 828, 0, 0, 818, 0, 0, 854, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 837, 845, 834, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 843, 0, 0, 0,
	818, 0, 0, 0, 0, 0, 835, 0, 0, 0,
	0, 0, 828, 0, 0, 0, 0, 837, 845, 829,
	0, 1317, 0, 1334, 1335, 1336, 0, 0, 0, 0,
	838, 0, 0, 0, 834, 0, 1037, 0, 0, 0,
	0, 835, 0, 0, 1794, 0, 0, 828, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1807,
	1807, 0, 0, 0, 0, 0, 0, 0, 0, 829,
	1331, 0, 0, 0, 0, 0, 0, 0, 1037, 0,
	838, 0, 1037, 836, 0, 1807, 824, 825, 826, 0,
	823, 820, 821, 822, 814, 815, 816, 817, 819, 0,
	839, 0, 0, 0, 829, 0, 811, 1358, 830, 831,
	832, 840, 841, 842, 0, 838, 0, 1322, 1807, 0,
	0, 833, 0, 0, 0, 0, 0, 0, 813, 0,
	844, 0, 0, 836, 0, 0, 824, 825, 826, 0,
	823, 820, 821, 822, 814, 815, 816, 817, 819, 812,
	839, 0, 0, 0, 0, 827, 0, 1357, 0, 0,
	0, 0, 0, 24, 1332, 0, 0, 0, 836, 0,
	0, 824, 825, 826, 43, 823, 820, 821, 822, 814,
	815, 816, 817, 819, 0, 839, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 45, 0,
	0, 0, 818, 0, 0, 50, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 837,
	845, 1333, 0, 0, 34, 0, 0, 39, 0, 0,
	0, 30, 0, 843, 46, 0, 0, 0, 33, 31,
	0, 0, 0, 835, 0, 0, 0, 0, 0, 828,
	0, 0, 0, 0, 35, 39, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1037, 1037, 0, 0, 1037,
	0, 834, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1328, 1329,
	1330, 0, 1327, 1324, 1325, 1326, 1318, 1319, 1320, 1321,
	1323, 0, 0, 0, 0, 0, 829, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 838, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 32, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 48, 0, 0, 36, 0, 47, 0, 0,
	0, 0, 37, 0, 0, 57, 0, 0, 0, 0,
	40, 42, 0, 0, 0, 0, 0, 0, 0, 44,
	836, 0, 0, 824, 825, 826, 59, 823, 820, 821,
	822, 814, 815, 816, 817, 819, 0, 839, 0, 49,
	0, 0, 0, 0, 1356, 0, 0, 0, 0, 1669,
	0, 0, 0, 60, 0, 0, 0, 0, 0, 0,
	55, 0, 0, 0, 0, 0, 56, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1037, 0,
	0, 0, 0, 0, 0, 54, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 680, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 88, 685, 89, 686, 687, 688, 689, 196,
	690, 691, 692, 693, 90, 91, 197, 198, 199, 200,
	92, 201, 202, 694, 93, 203, 204, 94, 695, 696,
	205, 206, 207, 697, 208, 698, 361, 699, 95, 96,
	97, 854, 98, 700, 99, 100, 701, 362, 101, 102,
	702, 703, 704, 705, 706, 707, 103, 104, 105, 106,
	209, 107, 210, 211, 708, 108, 709, 109, 710, 711,
	712, 110, 111, 713, 112, 714, 0, 715, 212, 113,
	114, 213, 716, 717, 718, 115, 116, 214, 0, 117,
	719, 118, 720, 721, 363, 722, 119, 215, 723, 216,
	724, 120, 121, 217, 218, 365, 725, 124, 726, 122,
	727, 364, 123, 219, 220, 221, 728, 222, 729, 366,
	125, 367, 126, 127, 730, 731, 223, 368, 128, 369,
	732, 129, 733, 734, 130, 0, 131, 132, 133, 134,
	135, 370, 136, 137, 140, 138, 735, 139, 736, 224,
	141, 225, 142, 143, 737, 738, 739, 740, 741, 144,
	226, 371, 145, 372, 227, 146, 147, 148, 742, 228,
	149, 229, 150, 743, 151, 152, 153, 230, 154, 155,
	744, 157, 158, 156, 159, 745, 160, 373, 161, 162,
	231, 163, 0, 164, 165, 166, 746, 232, 167, 168,
	747, 169, 170, 374, 171, 233, 234, 172, 748, 173,
	174, 176, 235, 175, 236, 749, 177, 750, 178, 179,
	751, 237, 238, 239, 752, 753, 180, 240, 241, 754,
	181, 182, 183, 184, 755, 756, 185, 186, 187, 757,
	758, 188, 189, 190, 242, 243, 759, 191, 760, 761,
	762, 763, 192, 193, 194, 195, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 680, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1445, 87, 88, 685, 89, 686, 687, 688,
	689, 196, 690, 691, 692, 693, 90, 91, 197, 198,
	199, 200, 92, 201, 202, 694, 93, 203, 204, 94,
	695, 696, 205, 206, 207, 697, 208, 698, 361, 699,
	95, 96, 97, 0, 98, 700, 99, 100, 701, 362,
	101, 102, 702, 703, 704, 705, 706, 707, 103, 104,
	105, 106, 209, 107, 210, 211, 708, 108, 709, 109,
	710, 711, 712, 110, 111, 713, 112, 714, 0, 715,
	212, 113, 114, 213, 716, 717, 718, 115, 116, 214,
	0, 117, 719, 118, 720, 721, 363, 722, 119, 215,
	723, 216, 724, 120, 121, 217, 218, 365, 725, 124,
	726, 122, 727, 364, 123, 219, 220, 221, 728, 222,
	729, 366, 125, 367, 126, 127, 730, 731, 223, 368,
	128, 369, 732, 129, 733, 734, 130, 0, 131, 132,
	133, 134, 135, 370, 136, 137, 140, 138, 735, 139,
	736, 224, 141, 225, 142, 143, 737, 738, 739, 740,
	741, 144, 226, 371, 145, 372, 227, 146, 147, 148,
	742, 228, 149, 229, 150, 743, 151, 152, 153, 230,
	154, 155, 744, 157, 158, 156, 159, 745, 160, 373,
	161, 162, 231, 163, 0, 164, 165, 166, 746, 232,
	167, 168, 747, 169, 170, 374, 171, 233, 234, 172,
	748, 173, 174, 176, 235, 175, 236, 749, 177, 750,
	178, 179, 751, 237, 238, 239, 752, 753, 180, 240,
	241, 754, 181, 182, 183, 184, 755, 756, 185, 186,
	187, 757, 758, 188, 189, 190, 242, 243, 759, 191,
	760, 761, 762, 763, 192, 193, 194, 195, 680, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 907, 0, 87, 88, 685, 89, 686, 687, 688,
	689, 196, 690, 691, 692, 693, 90, 91, 197, 198,
	199, 200, 92, 201, 202, 694, 93, 203, 204, 94,
	695, 696, 205, 206, 207, 697, 208, 698, 361, 699,
	95, 96, 97, 0, 98, 700, 99, 100, 701, 362,
	101, 102, 702, 703, 704, 705, 706, 707, 103, 104,
	105, 106, 209, 107, 210, 211, 708, 108, 709, 109,
	710, 711, 712, 110, 111, 713, 112, 714, 0, 715,
	212, 113, 114, 213, 716, 717, 718, 115, 116, 214,
	0, 117, 719, 118, 720, 721, 363, 722, 119, 215,
	723, 216, 724, 120, 121, 217, 218, 365, 725, 124,
	726, 122, 727, 364, 123, 219, 220, 221, 728, 222,
	729, 366, 125, 367, 126, 127, 730, 731, 223, 368,
	128, 369, 732, 129, 733, 734, 130, 0, 131, 132,
	133, 134, 135, 370, 136, 137, 140, 138, 735, 139,
	736, 224, 141, 225, 142, 143, 737, 738, 739, 740,
	741, 144, 226, 371, 145, 372, 227, 146, 147, 148,
	742, 228, 149, 229, 150, 743, 151, 152, 153, 230,
	154, 155, 744, 157, 158, 156, 159, 745, 160, 373,
	161, 162, 231, 163, 0, 164, 165, 166, 746, 232,
	167, 168, 747, 169, 170, 374, 171, 233, 234, 172,
	748, 173, 174, 176, 235, 175, 236, 749, 177, 750,
	178, 179, 751, 237, 238, 239, 752, 753, 180, 240,
	241, 754, 181, 182, 183, 184, 755, 756, 185, 186,
	187, 757, 758, 188, 189, 190, 242, 243, 759, 191,
	760, 761, 762, 763, 192, 193, 194, 195, 486, 475,
	476, 473, 474, 462, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 87, 88, 1104, 89, 0, 0, 0,
	0, 502, 468, 0, 0, 0, 90, 91, 197, 516,
	199, 517, 92, 518, 519, 0, 93, 203, 204, 94,
	483, 501, 520, 521, 207, 0, 512, 0, 494, 0,
	95, 96, 97, 0, 98, 0, 99, 100, 0, 362,
	101, 102, 0, 495, 497, 0, 496, 498, 103, 104,
	105, 106, 522, 107, 523, 524, 0, 108, 0, 109,
	0, 1105, 0, 515, 111, 0, 112, 0, 0, 0,
	467, 113, 114, 503, 481, 0, 0, 115, 116, 525,
	0, 117, 0, 118, 0, 0, 363, 0, 119, 513,
	0, 216, 0, 120, 121, 509, 511, 365, 0, 124,
	0, 122, 0, 364, 123, 526, 527, 528, 0, 493,
	0, 366, 125, 367, 126, 127, 0, 0, 514, 368,
	128, 369, 0, 129, 0, 0, 130, 0, 131, 132,
	133, 134, 135, 370, 136, 137, 140, 138, 457, 139,
	482, 510, 141, 529, 142, 143, 0, 0, 0, 0,
	0, 144, 226, 371, 145, 372, 504, 146, 147, 148,
	0, 505, 149, 229, 150, 0, 151, 152, 153, 530,
	154, 155, 0, 157, 158, 156, 159, 0, 160, 373,
	161, 162, 471, 163, 0, 164, 165, 166, 0, 232,
	167, 168, 499, 169, 170, 374, 171, 531, 234, 172,
	0, 173, 174, 176, 532, 175, 506, 0, 177, 0,
	178, 179, 0, 237, 533, 534, 0, 0, 180, 507,
	508, 480, 181, 182, 183, 184, 0, 0, 185, 186,
	187, 500, 0, 188, 189, 190, 242, 535, 1103, 191,
	0, 0, 0, 0, 192, 193, 194, 195, 458, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 454,
	455, 1106, 0, 0, 0, 456, 0, 0, 463, 1101,
	486, 475, 476, 473, 474, 462, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 87, 88, 0, 89, 0,
	0, 0, 0, 502, 468, 0, 0, 0, 90, 91,
	197, 516, 199, 517, 92, 518, 519, 0, 93, 203,
	204, 94, 483, 501, 520, 521, 207, 0, 512, 0,
	494, 0, 95, 96, 97, 0, 98, 0, 99, 100,
	0, 362, 101, 102, 0, 495, 497, 0, 496, 498,
	103, 104, 105, 106, 522, 107, 523, 524, 556, 108,
	0, 109, 0, 0, 0, 515, 111, 0, 112, 0,
	0, 0, 467, 113, 114, 503, 481, 0, 0, 115,
	116, 525, 0, 117, 0, 118, 0, 0, 363, 0,
	119, 513, 0, 216, 0, 120, 121, 509, 511, 365,
	0, 124, 0, 122, 0, 364, 123, 526, 527, 528,
	0, 493, 0, 366, 125, 367, 126, 127, 0, 0,
	514, 368, 128, 369, 0, 129, 0, 0, 130, 0,
	131, 132, 133, 134, 135, 370, 136, 137, 140, 138,
	457, 139, 482, 510, 141, 529, 142, 143, 0, 0,
	0, 0, 0, 144, 226, 371, 145, 372, 504, 146,
	147, 148, 0, 505, 149, 229, 150, 0, 151, 152,
	153, 530, 154, 155, 0, 157, 158, 156, 159, 0,
	160, 373, 161, 162, 471, 163, 0, 164, 165, 166,
	57, 232, 167, 168, 499, 169, 170, 374, 171, 531,
	234, 172, 0, 173, 174, 176, 532, 175, 506, 0,
	177, 59, 178, 179, 0, 237, 533, 534, 0, 0,
	180, 507, 508, 480, 181, 182, 183, 184, 0, 0,
	185, 186, 187, 500, 0, 188, 189, 190, 360, 535,
	0, 191, 0, 0, 0, 55, 192, 193, 194, 195,
	458, 56, 0, 486, 475, 476, 473, 474, 462, 0,
	0, 454, 455, 0, 0, 0, 0, 456, 87, 88,
	463, 89, 0, 0, 0, 0, 502, 468, 0, 0,
	0, 90, 91, 197, 516, 199, 517, 92, 518, 519,
	0, 93, 203, 204, 94, 483, 501, 520, 521, 207,
	0, 512, 0, 494, 0, 95, 96, 97, 0, 98,
	0, 99, 100, 0, 362, 101, 102, 0, 495, 497,
	0, 496, 498, 103, 104, 105, 106, 522, 107, 523,
	524, 0, 108, 0, 109, 0, 0, 0, 515, 111,
	0, 112, 0, 0, 0, 467, 113, 114, 503, 481,
	0, 0, 115, 116, 525, 0, 117, 0, 118, 0,
	0, 363, 0, 119, 513, 0, 216, 0, 120, 121,
	509, 511, 365, 0, 124, 0, 122, 0, 364, 123,
	526, 527, 528, 0, 493, 0, 366, 125, 367, 126,
	127, 0, 0, 514, 368, 128, 369, 0, 129, 0,
	0, 130, 0, 131, 132, 133, 134, 135, 370, 136,
	137, 140, 138, 457, 139, 482, 510, 141, 529, 142,
	143, 0, 0, 0, 0, 0, 144, 226, 371, 145,
	372, 504, 146, 147, 148, 0, 505, 149, 229, 150,
	0, 151, 152, 153, 530, 154, 155, 0, 157, 158,
	156, 159, 0, 160, 373, 161, 162, 471, 163, 0,
	164, 165, 166, 57, 232, 167, 168, 499, 169, 170,
	374, 171, 531, 234, 172, 0, 173, 174, 176, 532,
	175, 506, 0, 177, 59, 178, 179, 0, 237, 533,
	534, 0, 0, 180, 507, 508, 480, 181, 182, 183,
	184, 0, 0, 185, 186, 187, 500, 0, 188, 189,
	190, 360, 535, 0, 191, 0, 0, 0, 55, 192,
	193, 194, 195, 458, 56, 0, 486, 475, 476, 473,
	474, 462, 0, 0, 454, 455, 0, 0, 0, 0,
	456, 87, 88, 463, 89, 0, 0, 0, 0, 502,
	468, 0, 0, 0, 90, 91, 197, 516, 199, 517,
	92, 518, 519, 1143, 93, 203, 204, 94, 483, 501,
	520, 521, 207, 0, 512, 0, 494, 0, 95, 96,
	97, 0, 98, 0, 99, 100, 0, 362, 101, 102,
	0, 495, 497, 0, 496, 498, 103, 104, 105, 106,
	522, 107, 523, 524, 0, 108, 0, 109, 0, 0,
	0, 515, 111, 0, 112, 0, 0, 0, 467, 113,
	114, 503, 481, 0, 0, 115, 116, 525, 0, 117,
	0, 118, 0, 1148, 363, 0, 119, 513, 0, 216,
	0, 120, 121, 509, 511, 365, 0, 124, 0, 122,
	0, 364, 123, 526, 527, 528, 0, 493, 0, 366,
	125, 367, 126, 127, 0, 1144, 514, 368, 128, 369,
	0, 129, 0, 0, 130, 0, 131, 132, 133, 134,
	135, 370, 136, 137, 140, 138, 457, 139, 482, 510,
	141, 529, 142, 143, 0, 0, 0, 0, 0, 144,
	226, 371, 145, 372, 504, 146, 147, 148, 0, 505,
	149, 229, 150, 0, 151, 152, 153, 530, 154, 155,
	0, 157, 158, 156, 159, 0, 160, 373, 161, 162,
	471, 163, 0, 164, 165, 166, 0, 232, 167, 168,
	499, 169, 170, 374, 171, 531, 234, 172, 0, 173,
	174, 176, 532, 175, 506, 0, 177, 0, 178, 179,
	0, 237, 533, 534, 0, 1145, 180, 507, 508, 480,
	181, 182, 183, 184, 0, 0, 185, 186, 187, 500,
	0, 188, 189, 190, 242, 535, 0, 191, 0, 0,
	0, 0, 192, 193, 194, 195, 458, 0, 0, 486,
	475, 476, 473, 474, 462, 0, 0, 454, 455, 0,
	0, 0, 0, 456, 87, 88, 463, 89, 0, 0,
	0, 0, 502, 468, 0, 0, 0, 90, 91, 197,
	516, 199, 517, 92, 518, 519, 0, 93, 203, 204,
	94, 483, 501, 520, 521, 207, 0, 512, 0, 494,
	0, 95, 96, 97, 0, 98, 0, 99, 100, 0,
	362, 101, 102, 0, 495, 497, 0, 496, 498, 103,
	104, 105, 106, 522, 107, 523, 524, 0, 108, 0,
	109, 0, 0, 0, 515, 111, 0, 112, 0, 0,
	0, 467, 113, 114, 503, 481, 0, 0, 115, 116,
	525, 0, 117, 0, 118, 0, 0, 363, 0, 119,
	513, 0, 216, 0, 120, 121, 509, 511, 365, 0,
	124, 0, 122, 0, 364, 123, 526, 527, 528, 0,
	493, 0, 366, 125, 367, 126, 127, 0, 0, 514,
	368, 128, 369, 0, 129, 0, 0, 130, 0, 131,
	132, 133, 134, 135, 370, 136, 137, 140, 138, 457,
	139, 482, 510, 141, 529, 142, 143, 0, 0, 0,
	0, 0, 144, 226, 371, 145, 372, 504, 146, 147,
	148, 0, 505, 149, 229, 150, 0, 151, 152, 153,
	530, 154, 155, 0, 157, 158, 156, 159, 0, 160,
	373, 161, 162, 471, 163, 0, 164, 165, 166, 0,
	232, 167, 168, 499, 169, 170, 374, 171, 531, 234,
	172, 0, 173, 174, 176, 532, 175, 506, 0, 177,
	0, 178, 179, 0, 237, 533, 534, 0, 0, 180,
	507, 508, 480, 181, 182, 183, 184, 0, 0, 185,
	186, 187, 500, 0, 188, 189, 190, 242, 535, 0,
	191, 0, 0, 0, 0, 192, 193, 194, 195, 458,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	454, 455, 0, 0, 0, 0, 456, 0, 0, 463,
	1511, 486, 475, 476, 473, 474, 462, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 87, 88, 0, 89,
	0, 0, 0, 0, 502, 468, 0, 0, 0, 90,
	91, 197, 516, 199, 517, 92, 518, 519, 0, 93,
	203, 204, 94, 483, 501, 520, 521, 207, 0, 512,
	0, 494, 0, 95, 96, 97, 0, 98, 0, 99,
	100, 0, 362, 101, 102, 0, 495, 497, 0, 496,
	498, 103, 104, 105, 106, 522, 107, 523, 524, 0,
	108, 0, 109, 0, 0, 0, 515, 111, 0, 112,
	0, 0, 0, 467, 113, 114, 503, 481, 0, 0,
	115, 116, 525, 0, 117, 0, 118, 0, 0, 363,
	0, 119, 513, 0, 216, 0, 120, 121, 509, 511,
	365, 0, 124, 0, 122, 0, 364, 123, 526, 527,
	528, 0, 493, 0, 366, 125, 367, 126, 127, 0,
	0, 514, 368, 128, 369, 0, 129, 0, 0, 130,
	0, 131, 132, 133, 134, 135, 370, 136, 137, 140,
	138, 457, 139, 482, 510, 141, 529, 142, 143, 0,
	0, 0, 0, 0, 144, 226, 371, 145, 372, 504,
	146, 147, 148, 0, 505, 149, 229, 150, 0, 151,
	152, 153, 530, 154, 155, 0, 157, 158, 156, 159,
	0, 160, 373, 161, 162, 471, 163, 0, 164, 165,
	166, 0, 232, 167, 168, 499, 169, 170, 374, 171,
	531, 234, 172, 0, 173, 174, 176, 532, 175, 506,
	0, 177, 0, 178, 179, 0, 237, 533, 534, 0,
	0, 180, 507, 508, 480, 181, 182, 183, 184, 0,
	0, 185, 186, 187, 500, 0, 188, 189, 190, 242,
	535, 0, 191, 0, 0, 0, 0, 192, 193, 194,
	195, 458, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 454, 455, 0, 0, 0, 0, 456, 0,
	0, 463, 1461, 486, 475, 476, 473, 474, 462, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 87, 88,
	0, 89, 0, 0, 0, 0, 502, 468, 0, 0,
	0, 90, 91, 197, 516, 199, 517, 92, 518, 519,
	0, 93, 203, 204, 94, 483, 501, 520, 521, 207,
	0, 512, 0, 494, 0, 95, 96, 97, 0, 98,
	0, 99, 100, 0, 362, 101, 102, 0, 495, 497,
	0, 496, 498, 103, 104, 105, 106, 522, 107, 523,
	524, 0, 108, 0, 109, 0, 0, 0, 515, 111,
	0, 112, 0, 0, 0, 467, 113, 114, 503, 481,
	0, 0, 115, 116, 525, 0, 117, 0, 118, 0,
	0, 363, 0, 119, 513, 0, 216, 0, 120, 121,
	509, 511, 365, 0, 124, 0, 122, 0, 364, 123,
	526, 527, 528, 0, 493, 0, 366, 125, 367, 126,
	127, 0, 0, 514, 368, 128, 369, 0, 129, 0,
	0, 130, 0, 131, 132, 133, 134, 135, 370, 136,
	137, 140, 138, 457, 139, 482, 510, 141, 529, 142,
	143, 0, 0, 0, 0, 0, 144, 226, 371, 145,
	372, 504, 146, 147, 148, 0, 505, 149, 229, 150,
	0, 151, 152, 153, 530, 154, 155, 0, 157, 158,
	156, 159, 0, 160, 373, 161, 162, 471, 163, 0,
	164, 165, 166, 0, 232, 167, 168, 499, 169, 170,
	374, 171, 531, 234, 172, 0, 173, 174, 176, 532,
	175, 506, 0, 177, 0, 178, 179, 0, 237, 533,
	534, 0, 0, 180, 507, 508, 480, 181, 182, 183,
	184, 0, 0, 185, 186, 187, 500, 0, 188, 189,
	190, 242, 535, 0, 191, 0, 0, 0, 0, 192,
	193, 194, 195, 458, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 454, 455, 0, 0, 0, 0,
	456, 0, 0, 463, 1100, 486, 475, 476, 473, 474,
	462, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	87, 88, 0, 89, 0, 0, 0, 0, 502, 468,
	0, 0, 0, 90, 91, 197, 516, 199, 517, 92,
	518, 519, 0, 93, 203, 204, 94, 483, 501, 520,
	521, 207, 0, 512, 0, 494, 0, 95, 96, 97,
	0, 98, 0, 99, 100, 0, 362, 101, 102, 0,
	495, 497, 0, 496, 498, 103, 104, 105, 106, 522,
	107, 523, 524, 0, 108, 0, 109, 0, 0, 0,
	515, 111, 0, 112, 0, 0, 0, 467, 113, 114,
	503, 481, 0, 0, 115, 116, 525, 0, 117, 0,
	118, 0, 0, 363, 0, 119, 513, 0, 216, 0,
	120, 121, 509, 511, 365, 0, 124, 0, 122, 0,
	364, 123, 526, 527, 528, 0, 493, 0, 366, 125,
	367, 126, 127, 0, 0, 514, 368, 128, 369, 0,
	129, 0, 0, 130, 0, 131, 132, 133, 134, 135,
	370, 136, 137, 140, 138, 457, 139, 482, 510, 141,
	529, 142, 143, 0, 0, 0, 0, 0, 144, 226,
	371, 145, 372, 504, 146, 147, 148, 0, 505, 149,
	229, 150, 0, 151, 152, 153, 530, 154, 155, 0,
	157, 158, 156, 159, 0, 160, 373, 161, 162, 471,
	163, 0, 164, 165, 166, 0, 232, 167, 168, 499,
	169, 170, 374, 171, 531, 234, 172, 0, 173, 174,
	176, 532, 175, 506, 0, 177, 0, 178, 179, 0,
	237, 533, 534, 0, 0, 180, 507, 508, 480, 181,
	182, 183, 184, 0, 0, 185, 186, 187, 500, 0,
	188, 189, 190, 242, 535, 0, 191, 0, 0, 0,
	0, 192, 193, 194, 195, 458, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 454, 455, 0, 0,
	0, 0, 456, 860, 1097, 463, 486, 475, 476, 473,
	474, 462, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 88, 0, 89, 0, 0, 0, 0, 502,
	468, 0, 0, 0, 90, 91, 197, 516, 199, 517,
	92, 518, 519, 0, 93, 203, 204, 94, 483, 501,
	520, 521, 207, 0, 512, 0, 494, 0, 95, 96,
	97, 0, 98, 0, 99, 100, 0, 362, 101, 102,
	0, 495, 497, 0, 496, 498, 103, 104, 105, 106,
	522, 107, 523, 524, 0, 108, 0, 109, 0, 0,
	0, 515, 111, 0, 112, 0, 0, 0, 467, 113,
	114, 503, 481, 0, 0, 115, 116, 525, 0, 117,
	0, 118, 0, 0, 363, 0, 119, 513, 0, 216,
	0, 120, 121, 509, 511, 365, 0, 124, 0, 122,
	0, 364, 123, 526, 527, 528, 0, 493, 0, 366,
	125, 367, 126, 127, 0, 0, 514, 368, 128, 369,
	0, 129, 0, 0, 130, 0, 131, 132, 133, 134,
	135, 370, 136, 137, 140, 138, 457, 139, 482, 510,
	141, 529, 142, 143, 0, 0, 0, 0, 0, 144,
	226, 371, 145, 372, 504, 146, 147, 148, 0, 505,
	149, 229, 150, 0, 151, 152, 153, 530, 154, 155,
	0, 157, 158, 156, 159, 0, 160, 373, 161, 162,
	471, 163, 0, 164, 165, 166, 0, 232, 167, 168,
	499, 169, 170, 374, 171, 531, 234, 172, 0, 173,
	174, 176, 532, 175, 506, 0, 177, 0, 178, 179,
	0, 237, 533, 534, 0, 0, 180, 507, 508, 480,
	181, 182, 183, 184, 0, 0, 185, 186, 187, 500,
	0, 188, 189, 190, 242, 535, 0, 191, 0, 0,
	0, 0, 192, 193, 194, 195, 458, 0, 0, 486,
	475, 476, 473, 474, 462, 0, 0, 454, 455, 452,
	0, 0, 0, 456, 87, 88, 463, 89, 0, 0,
	0, 0, 502, 468, 0, 0, 0, 90, 91, 197,
	516, 199, 517, 92, 518, 519, 0, 93, 203, 204,
	94, 483, 501, 520, 521, 207, 0, 512, 0, 494,
	0, 95, 96, 97, 0, 98, 0, 99, 100, 0,
	362, 101, 102, 0, 495, 497, 0, 496, 498, 103,
	104, 105, 106, 522, 107, 523, 524, 0, 108, 0,
	109, 0, 0, 0, 515, 111, 0, 112, 0, 0,
	0, 467, 113, 114, 503, 481, 0, 0, 115, 116,
	525, 0, 117, 0, 118, 0, 0, 363, 0, 119,
	513, 0, 216, 0, 120, 121, 509, 511, 365, 0,
	124, 0, 122, 0, 364, 123, 526, 527, 528, 0,
	493, 0, 366, 125, 367, 126, 127, 0, 0, 514,
	368, 128, 369, 0, 129, 0, 0, 130, 0, 131,
	132, 133, 134, 135, 370, 136, 137, 140, 138, 457,
	139, 482, 510, 141, 529, 142, 143, 0, 0, 0,
	0, 0, 144, 226, 371, 145, 372, 504, 146, 147,
	148, 0, 505, 149, 229, 150, 0, 151, 152, 153,
	530, 154, 155, 0, 157, 158, 156, 159, 0, 160,
	373, 161, 162, 471, 163, 0, 164, 165, 166, 0,
	232, 167, 168, 499, 169, 170, 374, 171, 531, 234,
	172, 0, 173, 174, 176, 532, 175, 506, 0, 177,
	0, 178, 179, 0, 237, 533, 534, 0, 0, 180,
	507, 508, 480, 181, 182, 183, 184, 0, 0, 185,
	186, 187, 500, 0, 188, 189, 190, 242, 535, 1466,
	191, 0, 0, 0, 0, 192, 193, 194, 195, 458,
	0, 0, 486, 475, 476, 473, 474, 462, 0, 0,
	454, 455, 0, 0, 0, 0, 456, 87, 88, 463,
	89, 0, 0, 0, 0, 502, 468, 0, 0, 0,
	90, 91, 197, 516, 199, 517, 92, 518, 519, 0,
	93, 203, 204, 94, 483, 501, 520, 521, 207, 0,
	512, 0, 494, 0, 95, 96, 97, 0, 98, 0,
	99, 100, 0, 362, 101, 102, 0, 495, 497, 0,
	496, 498, 103, 104, 105, 106, 522, 107, 523, 524,
	556, 108, 0, 109, 0, 0, 0, 515, 111, 0,
	112, 0, 0, 0, 467, 113, 114, 503, 481, 0,
	0, 115, 116, 525, 0, 117, 0, 118, 0, 0,
	363, 0, 119, 513, 0, 216, 0, 120, 121, 509,
	511, 365, 0, 124, 0, 122, 0, 364, 123, 526,
	527, 528, 0, 493, 0, 366, 125, 367, 126, 127,
	0, 0, 514, 368, 128, 369, 0, 129, 0, 0,
	130, 0, 131, 132, 133, 134, 135, 370, 136, 137,
	140, 138, 457, 139, 482, 510, 141, 529, 142, 143,
	0, 0, 0, 0, 0, 144, 226, 371, 145, 372,
	504, 146, 147, 148, 0, 505, 149, 229, 150, 0,
	151, 152, 153, 530, 154, 155, 0, 157, 158, 156,
	159, 0, 160, 373, 161, 162, 471, 163, 0, 164,
	165, 166, 0, 232, 167, 168, 499, 169, 170, 374,
	171, 531, 234, 172, 0, 173, 174, 176, 532, 175,
	506, 0, 177, 0, 178, 179, 0, 237, 533, 534,
	0, 0, 180, 507, 508, 480, 181, 182, 183, 184,
	0, 0, 185, 186, 187, 500, 0, 188, 189, 190,
	242, 535, 0, 191, 0, 0, 0, 0, 192, 193,
	194, 195, 458, 0, 0, 486, 475, 476, 473, 474,
	462, 0, 0, 454, 455, 0, 0, 0, 0, 456,
	87, 88, 463, 89, 0, 0, 0, 0, 502, 468,
	0, 0, 0, 90, 91, 197, 516, 199, 517, 92,
	518, 519, 0, 93, 203, 204, 94, 483, 501, 520,
	521, 207, 0, 512, 0, 494, 0, 95, 96, 97,
	0, 98, 0, 99, 100, 0, 362, 101, 102, 0,
	495, 497, 0, 496, 498, 103, 104, 105, 106, 522,
	107, 523, 524, 0, 108, 0, 109, 0, 0, 0,
	515, 111, 0, 112, 0, 0, 0, 467, 113, 114,
	503, 481, 0, 0, 115, 116, 525, 0, 117, 0,
	118, 0, 1148, 363, 0, 119, 513, 0, 216, 0,
	120, 121, 509, 511, 365, 0, 124, 0, 122, 0,
	364, 123, 526, 527, 528, 0, 493, 0, 366, 125,
	367, 126, 127, 0, 0, 514, 368, 128, 369, 0,
	129, 0, 0, 130, 0, 131, 132, 133, 134, 135,
	370, 136, 137, 140, 138, 457, 139, 482, 510, 141,
	529, 142, 143, 0, 0, 0, 0, 0, 144, 226,
	371, 145, 372, 504, 146, 147, 148, 0, 505, 149,
	229, 150, 0, 151, 152, 153, 530, 154, 155, 0,
	157, 158, 156, 159, 0, 160, 373, 161, 162, 471,
	163, 0, 164, 165, 166, 0, 232, 167, 168, 499,
	169, 170, 374, 171, 531, 234, 172, 0, 173, 174,
	176, 532, 175, 506, 0, 177, 0, 178, 179, 0,
	237, 533, 534, 0, 0, 180, 507, 508, 480, 181,
	182, 183, 184, 0, 0, 185, 186, 187, 500, 0,
	188, 189, 190, 242, 535, 0, 191, 0, 0, 0,
	0, 192, 193, 194, 195, 458, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 454, 455, 0, 0,
	0, 0, 456, 0, 0, 463, 486, 475, 476, 473,
	474, 462, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 88, 795, 89, 0, 0, 0, 0, 502,
	468, 0, 0, 0, 90, 91, 197, 516, 199, 517,
	92, 518, 519, 0, 93, 203, 204, 94, 483, 501,
	520, 521, 207, 0, 512, 0, 494, 0, 95, 96,
	97, 0, 98, 0, 99, 100, 0, 362, 101, 102,
	0, 495, 497, 0, 496, 498, 103, 104, 105, 106,
	522, 107, 523, 524, 0, 108, 0, 109, 0, 0,
	0, 515, 111, 0, 112, 0, 0, 0, 467, 113,
	114, 503, 481, 0, 0, 115, 116, 525, 0, 117,
	0, 118, 0, 0, 363, 0, 119, 513, 0, 216,
	0, 120, 121, 509, 511, 365, 0, 124, 0, 122,
	0, 364, 123, 526, 527, 528, 0, 493, 0, 366,
	125, 367, 126, 127, 0, 0, 514, 368, 128, 369,
	0, 129, 0, 0, 130, 0, 131, 132, 133, 134,
	135, 370, 136, 137, 140, 138, 457, 139, 482, 510,
	141, 529, 142, 143, 0, 0, 0, 0, 0, 144,
	226, 371, 145, 372, 504, 146, 147, 148, 0, 505,
	149, 229, 150, 0, 151, 152, 153, 530, 154, 155,
	0, 157, 158, 156, 159, 0, 160, 373, 161, 162,
	471, 163, 0, 164, 165, 166, 0, 232, 167, 168,
	499, 169, 170, 374, 171, 531, 234, 172, 0, 173,
	174, 176, 532, 175, 506, 0, 177, 0, 178, 179,
	0, 237, 533, 534, 0, 0, 180, 507, 508, 480,
	181, 182, 183, 184, 0, 0, 185, 186, 187, 500,
	0, 188, 189, 190, 242, 535, 0, 191, 0, 0,
	0, 0, 192, 193, 194, 195, 458, 0, 0, 486,
	475, 476, 473, 474, 462, 0, 0, 454, 455, 0,
	0, 0, 0, 456, 87, 88, 463, 89, 0, 0,
	0, 0, 502, 468, 0, 0, 0, 90, 91, 197,
	516, 199, 517, 92, 518, 519, 0, 93, 203, 204,
	94, 483, 501, 520, 521, 207, 0, 512, 0, 494,
	0, 95, 96, 97, 0, 98, 0, 99, 100, 0,
	362, 101, 1806, 0, 495, 497, 0, 496, 498, 103,
	104, 105, 106, 522, 107, 523, 524, 0, 108, 0,
	109, 0, 0, 0, 515, 111, 0, 112, 0, 0,
	0, 467, 113, 114, 503, 481, 0, 0, 115, 116,
	525, 0, 117, 0, 118, 0, 0, 363, 0, 119,
	513, 0, 216, 0, 120, 121, 509, 511, 365, 0,
	124, 0, 122, 0, 364, 123, 526, 527, 528, 0,
	493, 0, 366, 125, 367, 126, 127, 0, 0, 514,
	368, 128, 369, 0, 129, 0, 0, 130, 0, 131,
	132, 133, 134, 135, 370, 136, 137, 140, 138, 457,
	139, 482, 510, 141, 529, 142, 143, 0, 0, 0,
	0, 0, 144, 226, 371, 145, 372, 504, 146, 147,
	148, 0, 505, 149, 229, 150, 0, 151, 152, 153,
	530, 154, 155, 0, 157, 158, 156, 159, 0, 160,
	373, 161, 162, 471, 163, 0, 164, 165, 166, 0,
	232, 167, 168, 499, 169, 170, 374, 171, 531, 234,
	172, 0, 173, 174, 176, 532, 175, 506, 0, 177,
	0, 178, 179, 0, 237, 533, 534, 0, 0, 180,
	507, 508, 480, 181, 182, 1805, 184, 0, 0, 185,
	186, 187, 500, 0, 188, 189, 190, 242, 535, 0,
	191, 0, 0, 0, 0, 192, 193, 194, 195, 458,
	0, 0, 486, 475, 476, 473, 474, 462, 0, 0,
	454, 455, 0, 0, 0, 0, 456, 87, 88, 463,
	89, 0, 0, 0, 0, 502, 468, 0, 0, 0,
	90, 91, 1804, 516, 199, 517, 92, 518, 519, 0,
	93, 203, 204, 94, 483, 501, 520, 521, 207, 0,
	512, 0, 494, 0, 95, 96, 97, 0, 98, 0,
	99, 100, 0, 362, 101, 1806, 0, 495, 497, 0,
	496, 498, 103, 104, 105, 106, 522, 107, 523, 524,
	0, 108, 0, 109, 0, 0, 0, 515, 111, 0,
	112, 0, 0, 0, 467, 113, 114, 503, 481, 0,
	0, 115, 116, 525, 0, 117, 0, 118, 0, 0,
	363, 0, 119, 513, 0, 216, 0, 120, 121, 509,
	511, 365, 0, 124, 0, 122, 0, 364, 123, 526,
	527, 528, 0, 493, 0, 366, 125, 367, 126, 127,
	0, 0, 514, 368, 128, 369, 0, 129, 0, 0,
	130, 0, 131, 132, 133, 134, 135, 370, 136, 137,
	140, 138, 457, 139, 482, 510, 141, 529, 142, 143,
	0, 0, 0, 0, 0, 144, 226, 371, 145, 372,
	504, 146, 147, 148, 0, 505, 149, 229, 150, 0,
	151, 152, 153, 530, 154, 155, 0, 157, 158, 156,
	159, 0, 160, 373, 161, 162, 471, 163, 0, 164,
	165, 166, 0, 232, 167, 168, 499, 169, 170, 374,
	171, 531, 234, 172, 0, 173, 174, 176, 532, 175,
	506, 0, 177, 0, 178, 179, 0, 237, 533, 534,
	0, 0, 180, 507, 508, 480, 181, 182, 1805, 184,
	0, 0, 185, 186, 187, 500, 0, 188, 189, 190,
	242, 535, 0, 191, 0, 0, 0, 0, 192, 193,
	194, 195, 458, 0, 0, 486, 475, 476, 473, 474,
	462, 0, 0, 454, 455, 0, 0, 0, 0, 456,
	87, 88, 463, 89, 0, 0, 0, 0, 502, 468,
	0, 0, 0, 90, 91, 197, 516, 199, 517, 92,
	518, 519, 0, 93, 203, 204, 94, 483, 501, 520,
	521, 207, 0, 512, 0, 494, 0, 95, 96, 97,
	0, 98, 0, 99, 100, 0, 362, 101, 102, 0,
	495, 497, 0, 496, 498, 103, 104, 105, 106, 522,
	107, 523, 524, 0, 108, 0, 109, 0, 0, 0,
	515, 111, 0, 112, 0, 0, 0, 467, 113, 114,
	503, 481, 0, 0, 115, 116, 525, 0, 117, 0,
	118, 0, 0, 363, 0, 119, 513, 0, 216, 0,
	120, 121, 509, 511, 365, 0, 124, 0, 122, 0,
	364, 123, 526, 527, 528, 0, 493, 0, 366, 125,
	367, 126, 127, 0, 0, 514, 368, 128, 369, 0,
	129, 0, 0, 130, 0, 131, 132, 133, 134, 135,
	370, 136, 137, 140, 138, 457, 139, 482, 510, 141,
	529, 142, 143, 0, 0, 0, 0, 0, 144, 226,
	371, 145, 372, 504, 146, 147, 148, 0, 505, 149,
	229, 150, 0, 151, 152, 153, 530, 154, 155, 0,
	157, 158, 156, 159, 0, 160, 373, 161, 162, 471,
	163, 0, 164, 165, 166, 0, 232, 167, 168, 499,
	169, 170, 374, 171, 531, 234, 172, 0, 173, 174,
	176, 532, 175, 506, 0, 177, 0, 178, 179, 0,
	237, 533, 534, 0, 0, 180, 507, 508, 480, 181,
	182, 183, 184, 0, 0, 185, 186, 187, 500, 0,
	188, 189, 190, 242, 535, 0, 191, 0, 0, 0,
	0, 192, 193, 194, 195, 458, 0, 0, 486, 475,
	476, 473, 474, 462, 0, 0, 454, 455, 0, 0,
	0, 0, 456, 87, 88, 463, 89, 0, 0, 0,
	0, 502, 468, 0, 0, 0, 90, 91, 197, 516,
	199, 517, 92, 518, 519, 0, 93, 203, 204, 94,
	483, 501, 520, 521, 207, 0, 512, 0, 494, 0,
	95, 96, 97, 0, 98, 0, 99, 100, 0, 362,
	101, 102, 0, 495, 497, 0, 496, 498, 103, 104,
	105, 106, 522, 107, 523, 524, 0, 108, 0, 109,
	0, 0, 0, 515, 111, 0, 112, 0, 0, 0,
	467, 113, 114, 503, 481, 0, 0, 115, 116, 525,
	0, 117, 0, 118, 0, 0, 363, 0, 119, 513,
	0, 216, 0, 120, 121, 509, 511, 365, 0, 124,
	0, 122, 0, 364, 123, 526, 527, 528, 0, 493,
	0, 366, 125, 367, 126, 127, 0, 0, 514, 368,
	128, 369, 0, 129, 0, 0, 130, 0, 131, 132,
	133, 134, 135, 370, 136, 137, 140, 138, 0, 139,
	482, 510, 141, 529, 142, 143, 0, 0, 0, 0,
	0, 144, 226, 371, 145, 372, 504, 146, 147, 148,
	0, 505, 149, 229, 150, 0, 151, 152, 153, 530,
	154, 155, 0, 157, 158, 156, 159, 0, 160, 373,
	161, 162, 1138, 163, 0, 164, 165, 166, 0, 232,
	167, 168, 499, 169, 170, 374, 171, 531, 234, 172,
	0, 173, 174, 176, 532, 175, 506, 0, 177, 0,
	178, 179, 0, 237, 533, 534, 0, 0, 180, 507,
	508, 480, 181, 182, 183, 184, 0, 0, 185, 186,
	187, 500, 0, 188, 189, 190, 242, 535, 0, 191,
	0, 0, 0, 0, 192, 193, 194, 195, 486, 475,
	476, 473, 474, 462, 0, 0, 0, 0, 0, 1134,
	1135, 0, 0, 87, 88, 1136, 89, 0, 1137, 0,
	0, 502, 468, 0, 0, 0, 90, 91, 0, 516,
	199, 517, 92, 518, 519, 0, 93, 203, 204, 94,
	483, 501, 520, 521, 207, 0, 512, 0, 494, 0,
	95, 96, 97, 0, 98, 0, 99, 100, 0, 362,
	101, 1806, 0, 495, 497, 0, 496, 498, 103, 104,
	105, 106, 522, 107, 523, 524, 0, 108, 0, 109,
	0, 0, 0, 515, 111, 0, 112, 0, 0, 0,
	467, 113, 114, 503, 481, 0, 0, 115, 116, 525,
	0, 117, 0, 118, 0, 0, 363, 0, 119, 513,
	0, 216, 0, 120, 121, 509, 511, 0, 0, 124,
	0, 122, 0, 364, 123, 526, 527, 528, 0, 493,
	0, 0, 125, 367, 126, 127, 0, 0, 514, 368,
	128, 0, 0, 129, 0, 0, 130, 0, 131, 132,
	133, 134, 135, 370, 136, 137, 140, 138, 457, 139,
	482, 510, 141, 529, 142, 143, 0, 0, 0, 0,
	0, 144, 226, 371, 145, 372, 504, 146, 147, 148,
	0, 505, 149, 229, 150, 0, 151, 152, 153, 530,
	154, 155, 0, 157, 158, 156, 159, 0, 160, 373,
	161, 162, 471, 163, 0, 164, 165, 166, 0, 232,
	167, 168, 499, 169, 170, 0, 171, 531, 234, 172,
	0, 173, 174, 176, 532, 175, 506, 0, 177, 0,
	178, 179, 0, 237, 533, 534, 0, 0, 180, 507,
	508, 480, 181, 182, 1805, 184, 0, 0, 185, 186,
	187, 500, 0, 188, 189, 190, 242, 535, 0, 191,
	0, 0, 0, 0, 192, 193, 194, 195, 486, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 454,
	455, 0, 0, 87, 88, 456, 89, 0, 463, 0,
	0, 502, 0, 0, 0, 0, 90, 91, 197, 198,
	199, 200, 92, 201, 202, 0, 93, 203, 204, 94,
	0, 501, 205, 206, 207, 0, 512, 0, 494, 0,
	95, 96, 97, 0, 98, 0, 99, 100, 0, 362,
	101, 102, 0, 495, 497, 0, 496, 498, 103, 104,
	105, 106, 209, 107, 210, 211, 0, 108, 0, 109,
	0, 0, 0, 110, 111, 0, 112, 0, 0, 0,
	212, 113, 114, 503, 0, 0, 0, 115, 116, 214,
	0, 117, 0, 118, 0, 0, 363, 0, 119, 513,
	0, 216, 0, 120, 121, 509, 511, 365, 0, 124,
	0, 122, 0, 364, 123, 219, 220, 221, 0, 222,
	0, 366, 125, 367, 126, 127, 0, 0, 514, 368,
	128, 369, 0, 129, 0, 0, 130, 0, 131, 132,
	133, 134, 135, 370, 136, 137, 140, 138, 0, 139,
	0, 510, 141, 225, 142, 143, 0, 0, 0, 0,
	0, 144, 226, 371, 145, 372, 504, 146, 147, 148,
	0, 505, 149, 229, 150, 0, 151, 152, 153, 230,
	154, 155, 0, 157, 158, 156, 159, 0, 160, 373,
	161, 162, 231, 163, 0, 164, 165, 166, 0, 232,
	167, 168, 499, 169, 170, 374, 171, 233, 234, 172,
	0, 173, 174, 176, 235, 175, 506, 0, 177, 0,
	178, 179, 0, 237, 238, 239, 0, 0, 180, 507,
	508, 0, 181, 182, 183, 184, 0, 0, 185, 186,
	187, 500, 0, 188, 189, 190, 242, 243, 0, 191,
	0, 356, 0, 0, 192, 193, 194, 195, 0, 0,
	0, 0, 0, 0, 0, 0, 87, 88, 0, 89,
	0, 0, 0, 0, 196, 0, 0, 0, 1577, 90,
	91, 197, 198, 199, 200, 92, 201, 202, 0, 93,
	203, 204, 94, 0, 0, 205, 206, 207, 0, 208,
	0, 361, 0, 95, 96, 97, 0, 98, 0, 99,
	100, 0, 362, 101, 102, 0, 0, 0, 0, 0,
	0, 103, 104, 105, 106, 209, 107, 210, 211, 0,
	108, 0, 109, 0, 0, 0, 110, 111, 0, 112,
	0, 0, 0, 212, 113, 114, 213, 0, 0, 0,
	115, 116, 214, 0, 117, 0, 118, 0, 0, 363,
	0, 119, 215, 0, 216, 0, 120, 121, 217, 218,
	365, 0, 124, 0, 122, 0, 364, 123, 219, 220,
	221, 0, 222, 0, 366, 125, 367, 126, 127, 0,
	0, 223, 368, 128, 369, 0, 129, 0, 0, 130,
	0, 131, 132, 133, 134, 135, 370, 136, 137, 140,
	138, 0, 139, 0, 224, 141, 225, 142, 143, 0,
	0, 0, 0, 0, 144, 226, 371, 145, 372, 227,
	146, 147, 148, 0, 228, 149, 229, 150, 0, 151,
	152, 153, 230, 154, 155, 0, 157, 158, 156, 159,
	0, 160, 373, 161, 162, 231, 163, 0, 164, 165,
	166, 57, 232, 167, 168, 0, 169, 170, 374, 171,
	233, 234, 172, 0, 173, 174, 176, 235, 175, 236,
	0, 177, 59, 178, 179, 0, 237, 238, 239, 0,
	0, 180, 240, 241, 0, 181, 182, 183, 184, 0,
	0, 185, 186, 187, 0, 0, 188, 189, 190, 360,
	243, 0, 191, 0, 0, 0, 55, 192, 193, 194,
	195, 0, 56, 0, 356, 665, 0, 666, 661, 656,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	88, 54, 89, 0, 0, 0, 0, 196, 0, 0,
	0, 0, 90, 91, 197, 198, 199, 200, 92, 201,
	202, 0, 93, 203, 204, 94, 0, 0, 205, 206,
	207, 0, 208, 0, 361, 0, 95, 96, 97, 0,
	98, 0, 99, 100, 0, 362, 101, 102, 0, 0,
	0, 0, 0, 0, 103, 104, 105, 106, 209, 107,
	210, 211, 669, 108, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 212, 113, 114, 213,
	658, 0, 0, 115, 116, 214, 0, 117, 0, 118,
	0, 0, 363, 0, 119, 215, 0, 216, 0, 120,
	121, 217, 218, 365, 0, 124, 0, 122, 0, 364,
	123, 219, 220, 221, 0, 222, 0, 366, 125, 367,
	126, 127, 0, 0, 223, 368, 128, 369, 0, 129,
	0, 0, 130, 0, 131, 132, 133, 134, 135, 370,
	136, 137, 140, 138, 0, 139, 0, 224, 141, 225,
	142, 143, 0, 659, 0, 0, 0, 144, 226, 371,
	145, 372, 227, 146, 147, 148, 0, 228, 149, 229,
	150, 0, 151, 152, 153, 230, 154, 155, 0, 157,
	158, 156, 159, 0, 160, 373, 161, 162, 231, 163,
	0, 164, 165, 166, 0, 232, 167, 168, 0, 169,
	170, 374, 171, 233, 234, 172, 0, 173, 174, 176,
	235, 175, 236, 0, 177, 0, 178, 179, 0, 237,
	238, 239, 0, 0, 180, 240, 241, 657, 181, 182,
	183, 184, 0, 0, 185, 186, 187, 0, 0, 188,
	189, 190, 242, 243, 0, 191, 0, 0, 0, 0,
	192, 193, 194, 195, 356, 665, 0, 666, 661, 656,
	0, 0, 0, 0, 0, 667, 662, 0, 0, 87,
	88, 0, 89, 0, 0, 0, 0, 196, 0, 0,
	0, 0, 90, 91, 197, 198, 199, 200, 92, 201,
	202, 0, 93, 203, 204, 94, 0, 0, 205, 206,
	207, 0, 208, 0, 361, 0, 95, 96, 97, 0,
	98, 0, 99, 100, 0, 362, 101, 102, 0, 0,
	0, 0, 0, 0, 103, 104, 105, 106, 209, 107,
	210, 211, 652, 108, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 212, 113, 114, 213,
	658, 0, 0, 115, 116, 214, 0, 117, 0, 118,
	0, 0, 363, 0, 119, 215, 0, 216, 0, 120,
	121, 217, 218, 365, 0, 124, 0, 122, 0, 364,
	123, 219, 220, 221, 0, 222, 0, 366, 125, 367,
	126, 127, 0, 0, 223, 368, 128, 369, 0, 129,
	0, 0, 130, 0, 131, 132, 133, 134, 135, 370,
	136, 137, 140, 138, 0, 139, 0, 224, 141, 225,
	142, 143, 0, 659, 0, 0, 0, 144, 226, 371,
	145, 372, 227, 146, 147, 148, 0, 228, 149, 229,
	150, 0, 151, 152, 153, 230, 154, 155, 0, 157,
	158, 156, 159, 0, 160, 373, 161, 162, 231, 163,
	0, 164, 165, 166, 0, 232, 167, 168, 0, 169,
	170, 374, 171, 233, 234, 172, 0, 173, 174, 176,
	235, 175, 236, 0, 177, 0, 178, 179, 0, 237,
	238, 239, 0, 0, 180, 240, 241, 657, 181, 182,
	183, 184, 0, 0, 185, 186, 187, 0, 0, 188,
	189, 190, 242, 243, 0, 191, 0, 0, 0, 0,
	192, 193, 194, 195, 356, 665, 0, 666, 661, 656,
	0, 0, 0, 0, 0, 667, 662, 0, 0, 87,
	88, 0, 89, 0, 0, 0, 0, 196, 0, 0,
	0, 0, 90, 91, 197, 198, 199, 200, 92, 201,
	202, 0, 93, 203, 204, 94, 0, 0, 205, 206,
	207, 0, 208, 0, 361, 0, 95, 96, 97, 0,
	98, 0, 99, 100, 0, 362, 101, 102, 0, 0,
	0, 0, 0, 0, 103, 104, 105, 106, 209, 107,
	210, 211, 0, 108, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 212, 113, 114, 213,
	658, 0, 0, 115, 116, 214, 0, 117, 0, 118,
	0, 0, 363, 0, 119, 215, 0, 216, 0, 120,
	121, 217, 218, 365, 0, 124, 0, 122, 0, 364,
	123, 219, 220, 221, 0, 222, 0, 366, 125, 367,
	126, 127, 0, 0, 223, 368, 128, 369, 0, 129,
	0, 0, 130, 0, 131, 132, 133, 134, 135, 370,
	136, 137, 140, 138, 0, 139, 0, 224, 141, 225,
	142, 143, 0, 659, 0, 0, 0, 144, 226, 371,
	145, 372, 227, 146, 147, 148, 0, 228, 149, 229,
	150, 0, 151, 152, 153, 230, 154, 155, 0, 157,
	158, 156, 159, 0, 160, 373, 161, 162, 231, 163,
	0, 164, 165, 166, 0, 232, 167, 168, 0, 169,
	170, 374, 171, 233, 234, 172, 0, 173, 174, 176,
	235, 175, 236, 0, 177, 0, 178, 179, 0, 237,
	238, 239, 0, 0, 180, 240, 241, 657, 181, 182,
	183, 184, 0, 0, 185, 186, 187, 0, 0, 188,
	189, 190, 242, 243, 84, 191, 0, 0, 0, 0,
	192, 193, 194, 195, 0, 0, 0, 0, 0, 87,
	88, 0, 89, 0, 0, 667, 662, 196, 0, 0,
	0, 0, 90, 91, 197, 198, 199, 200, 92, 201,
	202, 0, 93, 203, 204, 94, 0, 0, 205, 206,
	207, 0, 208, 0, 0, 0, 95, 96, 97, 0,
	98, 0, 99, 100, 0, 0, 101, 102, 0, 0,
	0, 0, 0, 0, 103, 104, 105, 106, 209, 107,
	210, 211, 0, 108, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 212, 113, 114, 213,
	0, 0, 0, 115, 116, 214, 0, 117, 0, 118,
	0, 0, 0, 0, 119, 215, 0, 216, 0, 120,
	121, 217, 218, 0, 0, 124, 0, 122, 0, 0,
	123, 219, 220, 221, 0, 222, 0, 0, 125, 0,
	126, 127, 0, 0, 223, 0, 128, 0, 0, 129,
	0, 0, 130, 0, 131, 132, 133, 134, 135, 0,
	136, 137, 140, 138, 0, 139, 0, 224, 141, 225,
	142, 143, 0, 0, 329, 0, 0, 144, 226, 0,
	145, 0, 227, 146, 147, 148, 0, 228, 149, 229,
	150, 0, 151, 152, 153, 230, 154, 155, 0, 157,
	158, 156, 159, 0, 160, 0, 161, 162, 231, 163,
	0, 164, 165, 166, 57, 232, 167, 168, 0, 169,
	170, 0, 171, 233, 234, 172, 0, 173, 174, 176,
	235, 175, 236, 0, 177, 59, 178, 179, 0, 237,
	238, 239, 0, 0, 180, 240, 241, 0, 181, 182,
	183, 184, 0, 0, 185, 186, 187, 0, 0, 188,
	189, 190, 360, 243, 0, 191, 0, 84, 0, 55,
	192, 193, 194, 195, 0, 56, 0, 0, 0, 0,
	0, 0, 87, 88, 0, 89, 0, 0, 0, 0,
	196, 0, 0, 0, 1039, 90, 91, 197, 198, 199,
	200, 92, 201, 202, 0, 93, 203, 204, 94, 0,
	0, 205, 206, 207, 0, 208, 0, 0, 0, 95,
	96, 97, 0, 98, 0, 99, 100, 0, 0, 101,
	102, 0, 0, 0, 0, 0, 0, 103, 104, 105,
	106, 209, 107, 210, 211, 0, 108, 0, 109, 0,
	0, 0, 110, 111, 0, 112, 0, 0, 0, 212,
	113, 114, 213, 0, 0, 0, 115, 116, 214, 0,
	117, 0, 118, 0, 0, 0, 0, 119, 215, 0,
	216, 0, 120, 121, 217, 218, 0, 0, 124, 0,
	122, 0, 0, 123, 219, 220, 221, 0, 222, 0,
	0, 125, 0, 126, 127, 0, 0, 223, 0, 128,
	0, 0, 129, 0, 0, 130, 0, 131, 132, 133,
	134, 135, 0, 136, 137, 140, 138, 0, 139, 0,
	224, 141, 225, 142, 143, 0, 0, 0, 0, 0,
	144, 226, 0, 145, 0, 227, 146, 147, 148, 0,
	228, 149, 229, 150, 0, 151, 152, 153, 230, 154,
	155, 0, 157, 158, 156, 159, 0, 160, 0, 161,
	162, 231, 163, 0, 164, 165, 166, 57, 232, 167,
	168, 0, 169, 170, 0, 171, 233, 234, 172, 0,
	173, 174, 176, 235, 175, 236, 0, 177, 59, 178,
	179, 0, 237, 238, 239, 0, 0, 180, 240, 241,
	0, 181, 182, 183, 184, 0, 0, 185, 186, 187,
	0, 0, 188, 189, 190, 360, 243, 0, 191, 0,
	84, 0, 55, 192, 193, 194, 195, 0, 56, 0,
	0, 0, 0, 0, 0, 87, 88, 0, 89, 0,
	0, 0, 0, 196, 0, 1261, 0, 54, 90, 91,
	197, 198, 199, 200, 92, 201, 202, 0, 93, 203,
	204, 94, 0, 0, 205, 206, 207, 0, 208, 0,
	0, 0, 95, 96, 97, 0, 98, 0, 99, 100,
	0, 0, 101, 102, 0, 0, 0, 0, 0, 0,
	103, 104, 105, 106, 209, 107, 210, 211, 0, 108,
	0, 109, 0, 0, 0, 110, 111, 0, 112, 0,
	0, 0, 212, 113, 114, 213, 0, 0, 0, 115,
	116, 214, 0, 117, 0, 118, 0, 0, 0, 0,
	119, 215, 0, 216, 0, 120, 121, 217, 218, 0,
	0, 124, 0, 122, 0, 0, 123, 219, 220, 221,
	0, 222, 0, 0, 125, 0, 126, 127, 0, 0,
	223, 0, 128, 0, 0, 129, 0, 0, 130, 0,
	131, 132, 133, 134, 135, 0, 136, 137, 140, 138,
	0, 139, 0, 224, 141, 225, 142, 143, 0, 0,
	0, 0, 0, 144, 226, 0, 145, 0, 227, 146,
	147, 148, 0, 228, 149, 229, 150, 0, 151, 152,
	153, 230, 154, 155, 0, 157, 158, 156, 159, 0,
	160, 0, 161, 162, 231, 163, 0, 164, 165, 166,
	0, 232, 167, 168, 0, 169, 170, 0, 171, 233,
	234, 172, 0, 173, 174, 176, 235, 175, 236, 0,
	177, 0, 178, 179, 0, 237, 238, 239, 0, 0,
	180, 240, 241, 0, 181, 182, 183, 184, 0, 0,
	185, 186, 187, 0, 0, 188, 189, 190, 242, 243,
	0, 191, 0, 0, 84, 0, 192, 193, 194, 195,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	88, 0, 89, 0, 0, 0, 0, 196, 0, 0,
	0, 444, 90, 91, 197, 198, 199, 200, 92, 201,
	202, 0, 93, 203, 204, 94, 0, 0, 205, 206,
	207, 0, 208, 0, 0, 0, 95, 96, 97, 0,
	98, 0, 99, 100, 0, 0, 101, 102, 0, 0,
	0, 0, 0, 0, 103, 104, 105, 106, 209, 107,
	210, 211, 0, 108, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 212, 113, 114, 213,
	0, 0, 0, 115, 116, 214, 0, 117, 0, 118,
	0, 0, 0, 0, 119, 215, 0, 216, 0, 120,
	121, 217, 218, 0, 0, 124, 0, 122, 0, 0,
	123, 219, 220, 221, 0, 222, 0, 0, 125, 0,
	126, 127, 0, 0, 223, 0, 128, 0, 0, 129,
	0, 0, 130, 0, 131, 132, 133, 134, 135, 0,
	136, 137, 140, 138, 0, 139, 0, 224, 141, 225,
	142, 143, 0, 0, 329, 0, 0, 144, 226, 0,
	145, 0, 227, 146, 147, 148, 0, 228, 149, 229,
	150, 0, 151, 152, 153, 230, 154, 155, 0, 157,
	158, 156, 159, 0, 160, 0, 161, 162, 231, 163,
	0, 164, 165, 166, 0, 232, 167, 168, 0, 169,
	170, 0, 171, 233, 234, 172, 0, 173, 174, 176,
	235, 175, 236, 0, 177, 0, 178, 179, 0, 237,
	238, 239, 0, 0, 180, 240, 241, 0, 181, 182,
	183, 184, 0, 0, 185, 186, 187, 0, 0, 188,
	189, 190, 242, 243, 0, 191, 0, 84, 0, 0,
	192, 193, 194, 195, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 88, 0, 89, 0, 0, 0, 0,
	196, 0, 0, 0, 1039, 90, 91, 197, 198, 199,
	200, 92, 201, 202, 0, 93, 203, 204, 94, 0,
	0, 205, 206, 207, 0, 208, 0, 0, 0, 95,
	96, 97, 0, 98, 0, 99, 100, 0, 0, 101,
	102, 0, 0, 0, 0, 0, 0, 103, 104, 105,
	106, 209, 107, 210, 211, 0, 108, 0, 109, 0,
	0, 0, 110, 111, 0, 112, 0, 0, 0, 212,
	113, 114, 213, 0, 0, 0, 115, 116, 214, 0,
	117, 0, 118, 0, 0, 0, 0, 119, 215, 0,
	216, 0, 120, 121, 217, 218, 0, 0, 124, 0,
	122, 0, 0, 123, 219, 220, 221, 0, 222, 0,
	0, 125, 0, 126, 127, 0, 0, 223, 0, 128,
	0, 0, 129, 0, 0, 130, 0, 131, 132, 133,
	134, 135, 0, 136, 137, 140, 138, 0, 139, 0,
	224, 141, 225, 142, 143, 0, 0, 0, 0, 0,
	144, 226, 0, 145, 0, 227, 146, 147, 148, 0,
	228, 149, 229, 150, 0, 151, 152, 153, 230, 154,
	155, 0, 157, 158, 156, 159, 0, 160, 0, 161,
	162, 231, 163, 0, 164, 165, 166, 0, 232, 167,
	168, 0, 169, 170, 0, 171, 233, 234, 172, 0,
	173, 174, 176, 235, 175, 236, 0, 177, 0, 178,
	179, 0, 237, 238, 239, 0, 0, 180, 240, 241,
	0, 181, 182, 183, 184, 0, 0, 185, 186, 187,
	0, 0, 188, 189, 190, 242, 243, 0, 191, 0,
	84, 0, 0, 192, 193, 194, 195, 0, 0, 0,
	0, 0, 0, 0, 0, 87, 88, 0, 89, 0,
	0, 0, 0, 196, 0, 0, 0, 949, 90, 91,
	197, 198, 199, 200, 92, 201, 202, 0, 93, 203,
	204, 94, 0, 0, 205, 206, 207, 0, 208, 0,
	0, 0, 95, 96, 97, 0, 98, 0, 99, 100,
	0, 0, 101, 102, 0, 0, 0, 0, 0, 0,
	103, 104, 105, 106, 209, 107, 210, 211, 0, 108,
	0, 109, 0, 0, 0, 110, 111, 0, 112, 0,
	0, 0, 212, 113, 114, 213, 0, 0, 0, 115,
	116, 214, 0, 117, 0, 118, 0, 0, 0, 0,
	119, 215, 0, 216, 0, 120, 121, 217, 218, 0,
	0, 124, 0, 122, 0, 0, 123, 219, 220, 221,
	0, 222, 0, 0, 125, 0, 126, 127, 0, 0,
	223, 0, 128, 0, 0, 129, 0, 0, 130, 0,
	131, 132, 133, 134, 135, 0, 136, 137, 140, 138,
	0, 139, 0, 224, 141, 225, 142, 143, 0, 0,
	0, 0, 0, 144, 226, 0, 145, 0, 227, 146,
	147, 148, 0, 228, 149, 229, 150, 0, 151, 152,
	153, 230, 154, 155, 0, 157, 158, 156, 159, 0,
	160, 0, 161, 162, 231, 163, 0, 164, 165, 166,
	0, 232, 167, 168, 0, 169, 170, 0, 171, 233,
	234, 172, 0, 173, 174, 176, 235, 175, 236, 0,
	177, 0, 178, 179, 0, 237, 238, 239, 0, 0,
	180, 240, 241, 0, 181, 182, 183, 184, 0, 0,
	185, 186, 187, 0, 0, 188, 189, 190, 242, 243,
	0, 191, 0, 84, 0, 0, 192, 193, 194, 195,
	0, 0, 0, 0, 0, 0, 0, 0, 87, 88,
	0, 89, 0, 0, 0, 0, 196, 0, 0, 0,
	1476, 90, 91, 197, 198, 199, 200, 92, 201, 202,
	0, 93, 203, 204, 94, 0, 0, 205, 206, 207,
	0, 208, 0, 0, 0, 95, 96, 97, 0, 98,
	0, 99, 100, 0, 0, 101, 102, 0, 0, 0,
	0, 0, 0, 103, 104, 105, 106, 209, 107, 210,
	211, 0, 108, 0, 109, 0, 0, 0, 110, 111,
	0, 112, 0, 0, 0, 212, 113, 114, 213, 0,
	0, 0, 115, 116, 214, 0, 117, 0, 118, 0,
	0, 0, 0, 119, 215, 0, 216, 0, 120, 121,
	217, 218, 0, 0, 124, 0, 122, 0, 0, 123,
	219, 220, 221, 0, 222, 0, 0, 125, 0, 126,
	127, 0, 0, 223, 0, 128, 0, 0, 129, 0,
	0, 130, 0, 131, 132, 133, 134, 135, 0, 136,
	137, 140, 138, 0, 139, 0, 224, 141, 225, 142,
	143, 0, 0, 0, 0, 0, 144, 226, 0, 145,
	0, 227, 146, 147, 148, 0, 228, 149, 229, 150,
	0, 151, 152, 153, 230, 154, 155, 0, 157, 158,
	156, 159, 0, 160, 0, 161, 162, 231, 163, 0,
	164, 165, 166, 0, 232, 167, 168, 0, 169, 170,
	0, 171, 233, 234, 172, 0, 173, 174, 176, 235,
	175, 236, 0, 177, 0, 178, 179, 0, 237, 238,
	239, 0, 0, 180, 240, 241, 0, 181, 182, 183,
	184, 0, 0, 185, 186, 187, 0, 0, 188, 189,
	190, 242, 243, 0, 191, 0, 84, 0, 0, 192,
	193, 194, 195, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 88, 0, 89, 0, 0, 0, 0, 196,
	0, 0, 0, 546, 90, 91, 197, 198, 199, 200,
	92, 201, 202, 0, 93, 203, 204, 94, 0, 0,
	205, 206, 207, 0, 208, 0, 0, 0, 95, 96,
	97, 0, 98, 0, 99, 100, 0, 0, 101, 102,
	0, 0, 0, 0, 0, 0, 103, 104, 636, 106,
	209, 107, 210, 211, 0, 108, 0, 109, 0, 0,
	0, 110, 111, 0, 112, 0, 0, 0, 212, 113,
	114, 213, 0, 0, 0, 115, 116, 214, 0, 117,
	0, 118, 0, 0, 0, 0, 119, 215, 0, 216,
	0, 120, 121, 217, 218, 0, 0, 124, 0, 122,
	0, 0, 123, 219, 220, 221, 0, 222, 0, 0,
	125, 0, 126, 127, 0, 0, 223, 0, 128, 0,
	0, 129, 0, 0, 130, 0, 131, 132, 133, 134,
	135, 0, 136, 137, 140, 138, 0, 139, 0, 224,
	141, 225, 142, 143, 0, 0, 0, 0, 0, 144,
	226, 0, 145, 0, 227, 146, 147, 148, 0, 228,
	149, 229, 150, 0, 151, 152, 153, 230, 154, 155,
	0, 157, 158, 156, 159, 0, 160, 0, 161, 162,
	231, 163, 0, 164, 165, 166, 0, 232, 167, 168,
	0, 169, 170, 0, 171, 233, 234, 172, 0, 173,
	174, 176, 235, 175, 236, 0, 177, 635, 178, 179,
	0, 237, 238, 239, 0, 0, 180, 240, 241, 0,
	181, 182, 183, 184, 0, 0, 185, 186, 187, 0,
	0, 188, 189, 190, 242, 243, 0, 191, 84, 0,
	0, 0, 192, 193, 194, 195, 0, 0, 0, 0,
	0, 0, 0, 87, 88, 0, 89, 0, 0, 639,
	0, 196, 0, 0, 0, 0, 90, 91, 197, 198,
	199, 200, 92, 201, 202, 0, 93, 203, 204, 94,
	0, 0, 205, 206, 207, 0, 208, 0, 0, 0,
	95, 96, 97, 0, 98, 0, 99, 100, 0, 0,
	101, 102, 0, 0, 0, 0, 0, 0, 103, 104,
	105, 106, 209, 107, 210, 211, 0, 108, 0, 109,
	0, 0, 0, 110, 111, 0, 112, 0, 0, 0,
	212, 113, 114, 213, 0, 0, 0, 115, 116, 214,
	0, 117, 0, 118, 0, 0, 0, 0, 119, 215,
	0, 216, 0, 120, 121, 217, 218, 0, 0, 124,
	0, 122, 0, 0, 123, 219, 220, 221, 0, 222,
	0, 0, 125, 0, 126, 127, 0, 0, 223, 0,
	128, 0, 0, 129, 0, 0, 130, 0, 131, 132,
	133, 134, 135, 0, 136, 137, 140, 138, 0, 139,
	0, 224, 141, 225, 142, 143, 0, 0, 0, 0,
	0, 144, 226, 0, 145, 0, 227, 146, 147, 148,
	0, 228, 149, 229, 150, 0, 151, 152, 153, 230,
	154, 155, 0, 157, 158, 156, 159, 0, 160, 0,
	161, 162, 231, 163, 0, 164, 165, 166, 0, 232,
	167, 168, 0, 169, 170, 0, 171, 233, 234, 172,
	0, 173, 174, 176, 235, 175, 236, 0, 177, 0,
	178, 179, 0, 237, 238, 239, 0, 0, 180, 240,
	241, 0, 181, 182, 183, 184, 0, 0, 185, 186,
	187, 0, 0, 188, 189, 190, 242, 243, 0, 191,
	356, 0, 0, 0, 192, 193, 194, 195, 0, 0,
	0, 0, 0, 0, 0, 87, 88, 0, 89, 0,
	0, 639, 0, 196, 0, 0, 0, 0, 90, 91,
	197, 198, 199, 200, 92, 201, 202, 0, 93, 203,
	204, 94, 0, 0, 205, 206, 207, 0, 208, 0,
	361, 0, 95, 96, 97, 0, 98, 0, 99, 100,
	0, 362, 101, 102, 0, 0, 0, 0, 0, 0,
	103, 104, 105, 106, 209, 107, 210, 211, 0, 108,
	0, 109, 0, 0, 0, 110, 111, 0, 112, 0,
	0, 0, 212, 113, 114, 213, 0, 0, 0, 115,
	116, 214, 0, 117, 0, 118, 0, 0, 363, 0,
	119, 215, 0, 216, 0, 120, 121, 217, 218, 365,
	0, 124, 0, 122, 0, 364, 123, 219, 220, 221,
	0, 222, 0, 366, 125, 367, 126, 127, 0, 0,
	223, 368, 128, 369, 0, 129, 0, 0, 130, 0,
	131, 132, 133, 134, 135, 370, 136, 137, 140, 138,
	0, 139, 0, 224, 141, 225, 142, 143, 0, 0,
	0, 0, 0, 144, 226, 371, 145, 372, 227, 146,
	147, 148, 0, 228, 149, 229, 150, 0, 151, 152,
	153, 230, 154, 155, 0, 157, 158, 156, 159, 0,
	160, 373, 161, 162, 231, 163, 0, 164, 165, 166,
	0, 232, 167, 168, 0, 169, 170, 374, 171, 233,
	234, 172, 0, 173, 174, 176, 235, 175, 236, 0,
	177, 0, 178, 179, 0, 237, 238, 239, 0, 0,
	180, 240, 241, 0, 181, 182, 183, 184, 0, 0,
	185, 186, 187, 0, 0, 188, 189, 190, 242, 243,
	84, 191, 0, 0, 0, 0, 192, 193, 194, 195,
	0, 0, 0, 0, 0, 87, 88, 0, 89, 0,
	0, 0, 0, 196, 0, 0, 0, 0, 90, 91,
	197, 198, 199, 200, 92, 201, 202, 0, 93, 203,
	204, 94, 0, 0, 205, 206, 207, 922, 208, 0,
	0, 0, 95, 96, 97, 0, 98, 920, 99, 100,
	0, 0, 101, 102, 0, 0, 0, 0, 0, 0,
	103, 104, 105, 106, 209, 107, 210, 211, 0, 108,
	0, 109, 0, 0, 0, 110, 111, 0, 112, 0,
	0, 0, 212, 113, 114, 213, 0, 1015, 0, 115,
	116, 214, 0, 117, 0, 118, 925, 0, 0, 0,
	119, 215, 0, 216, 0, 120, 121, 217, 218, 0,
	0, 124, 1013, 122, 0, 0, 123, 219, 220, 221,
	0, 222, 0, 0, 125, 0, 126, 127, 0, 0,
	223, 0, 128, 0, 0, 129, 0, 0, 130, 0,
	131, 132, 133, 134, 135, 0, 136, 137, 140, 138,
	0, 139, 0, 224, 141, 225, 142, 143, 0, 0,
	0, 0, 0, 144, 226, 0, 145, 0, 227, 146,
	147, 148, 0, 228, 149, 229, 150, 924, 151, 152,
	153, 230, 154, 155, 0, 157, 158, 156, 159, 0,
	160, 0, 161, 162, 231, 163, 0, 164, 165, 166,
	0, 232, 167, 168, 0, 169, 170, 0, 171, 233,
	234, 172, 0, 173, 174, 176, 235, 175, 236, 0,
	177, 0, 178, 179, 0, 237, 238, 239, 0, 0,
	180, 240, 241, 0, 181, 182, 183, 184, 0, 1014,
	185, 186, 187, 0, 0, 188, 189, 190, 242, 243,
	84, 191, 0, 0, 0, 0, 192, 193, 194, 195,
	0, 0, 0, 0, 0, 87, 88, 0, 89, 0,
	0, 0, 0, 196, 0, 0, 0, 0, 90, 91,
	197, 198, 199, 200, 92, 201, 202, 0, 93, 203,
	204, 94, 0, 0, 205, 206, 207, 922, 208, 0,
	0, 917, 95, 96, 97, 0, 98, 920, 99, 100,
	0, 0, 101, 102, 0, 0, 0, 0, 0, 0,
	103, 104, 105, 106, 209, 107, 210, 211, 0, 108,
	0, 109, 0, 0, 0, 110, 111, 0, 112, 0,
	0, 0, 212, 113, 114, 213, 0, 0, 0, 115,
	116, 214, 0, 117, 0, 118, 925, 0, 0, 0,
	119, 215, 0, 216, 0, 120, 121, 916, 218, 0,
	0, 124, 0, 122, 0, 0, 123, 219, 220, 221,
	0, 222, 0, 0, 125, 0, 126, 127, 0, 0,
	223, 0, 128, 0, 0, 129, 0, 0, 130, 0,
	131, 132, 133, 134, 135, 0, 136, 137, 140, 138,
	0, 139, 0, 224, 141, 225, 142, 143, 0, 0,
	0, 0, 0, 144, 226, 0, 145, 0, 227, 146,
	147, 148, 0, 228, 149, 229, 150, 924, 151, 152,
	153, 230, 154, 155, 0, 157, 158, 156, 159, 0,
	160, 0, 161, 162, 231, 163, 0, 164, 165, 166,
	0, 232, 167, 168, 0, 169, 170, 0, 171, 233,
	234, 172, 0, 173, 174, 176, 235, 175, 236, 0,
	177, 0, 178, 179, 0, 237, 238, 239, 0, 0,
	180, 240, 241, 0, 181, 182, 183, 184, 0, 923,
	185, 186, 187, 0, 0, 188, 189, 190, 242, 243,
	84, 191, 0, 0, 0, 0, 192, 193, 194, 195,
	0, 0, 0, 0, 0, 87, 88, 0, 89, 0,
	0, 0, 0, 196, 0, 1261, 0, 0, 90, 91,
	197, 198, 199, 200, 92, 201, 202, 0, 93, 203,
	204, 94, 0, 0, 205, 206, 207, 0, 208, 0,
	0, 0, 95, 96, 97, 0, 98, 0, 99, 100,
	0, 0, 101, 102, 0, 0, 0, 0, 0, 0,
	103, 104, 105, 106, 209, 107, 210, 211, 0, 108,
	0, 109, 0, 0, 0, 110, 111, 0, 112, 0,
	0, 0, 212, 113, 114, 213, 0, 0, 0, 115,
	116, 214, 0, 117, 0, 118, 0, 0, 0, 0,
	119, 215, 0, 216, 0, 120, 121, 217, 218, 0,
	0, 124, 0, 122, 0, 0, 123, 219, 220, 221,
	0, 222, 0, 0, 125, 0, 126, 127, 0, 0,
	223, 0, 128, 0, 0, 129, 0, 0, 130, 0,
	131, 132, 133, 134, 135, 0, 136, 137, 140, 138,
	0, 139, 0, 224, 141, 225, 142, 143, 0, 0,
	0, 0, 0, 144, 226, 0, 145, 0, 227, 146,
	147, 148, 0, 228, 149, 229, 150, 0, 151, 152,
	153, 230, 154, 155, 0, 157, 158, 156, 159, 0,
	160, 0, 161, 162, 231, 163, 0, 164, 165, 166,
	0, 232, 167, 168, 0, 169, 170, 0, 171, 233,
	234, 172, 0, 173, 174, 176, 235, 175, 236, 0,
	177, 0, 178, 179, 0, 237, 238, 239, 0, 0,
	180, 240, 241, 0, 181, 182, 183, 184, 0, 0,
	185, 186, 187, 0, 0, 188, 189, 190, 242, 243,
	84, 191, 0, 0, 0, 0, 192, 193, 194, 195,
	0, 0, 0, 0, 0, 87, 88, 0, 89, 0,
	0, 0, 0, 196, 0, 0, 0, 0, 90, 91,
	197, 198, 199, 200, 92, 201, 202, 0, 93, 203,
	204, 94, 0, 0, 205, 206, 207, 0, 208, 0,
	0, 0, 95, 96, 97, 0, 98, 0, 99, 100,
	0, 0, 101, 102, 0, 0, 0, 0, 0, 0,
	103, 104, 105, 106, 209, 107, 210, 211, 0, 108,
	0, 109, 0, 0, 0, 110, 111, 0, 112, 0,
	0, 0, 212, 113, 114, 213, 0, 0, 0, 115,
	116, 214, 0, 117, 0, 118, 0, 0, 0, 0,
	119, 215, 0, 216, 0, 120, 121, 217, 218, 0,
	0, 124, 0, 122, 0, 0, 123, 219, 220, 221,
	0, 222, 0, 0, 125, 0, 126, 127, 0, 0,
	223, 0, 128, 0, 0, 129, 0, 0, 130, 0,
	131, 132, 133, 134, 135, 0, 136, 137, 140, 138,
	0, 139, 0, 224, 141, 225, 142, 143, 0, 0,
	329, 0, 0, 144, 226, 0, 145, 0, 227, 146,
	147, 148, 0, 228, 149, 229, 150, 0, 151, 152,
	153, 230, 154, 155, 0, 157, 158, 156, 159, 0,
	160, 0, 161, 162, 231, 163, 0, 164, 165, 166,
	0, 232, 167, 168, 0, 169, 170, 0, 171, 233,
	234, 172, 0, 173, 174, 176, 235, 175, 236, 0,
	177, 0, 178, 179, 0, 237, 238, 239, 0, 0,
	180, 240, 241, 0, 181, 182, 183, 184, 0, 0,
	185, 186, 187, 0, 0, 188, 189, 190, 242, 243,
	84, 191, 0, 0, 0, 0, 192, 193, 194, 195,
	0, 0, 0, 0, 0, 87, 88, 0, 89, 0,
	0, 0, 0, 196, 0, 0, 0, 0, 90, 91,
	197, 198, 199, 200, 92, 201, 202, 0, 93, 203,
	204, 94, 0, 0, 205, 206, 207, 0, 208, 0,
	0, 0, 95, 96, 97, 0, 98, 0, 99, 100,
	0, 0, 101, 102, 0, 0, 0, 0, 0, 0,
	103, 104, 105, 106, 209, 107, 210, 211, 0, 108,
	0, 109, 0, 0, 0, 110, 111, 0, 112, 0,
	0, 0, 212, 113, 114, 213, 0, 0, 0, 115,
	116, 214, 0, 117, 0, 118, 0, 0, 0, 0,
	119, 215, 0, 216, 0, 120, 121, 588, 218, 0,
	0, 124, 0, 122, 0, 0, 123, 219, 220, 221,
	0, 222, 0, 0, 125, 0, 126, 127, 0, 0,
	223, 0, 128, 0, 0, 129, 0, 0, 130, 0,
	131, 132, 133, 134, 135, 0, 136, 137, 140, 138,
	0, 139, 0, 224, 141, 225, 142, 143, 0, 0,
	329, 0, 0, 144, 226, 0, 145, 0, 227, 146,
	147, 148, 0, 228, 149, 229, 150, 0, 151, 152,
	153, 230, 154, 155, 0, 157, 158, 156, 159, 0,
	160, 0, 161, 162, 231, 163, 0, 164, 165, 166,
	0, 232, 167, 168, 0, 169, 170, 0, 171, 233,
	234, 172, 0, 173, 174, 176, 235, 175, 236, 0,
	177, 0, 178, 179, 0, 237, 238, 239, 0, 0,
	180, 240, 241, 0, 181, 182, 183, 184, 0, 0,
	185, 186, 187, 0, 0, 188, 189, 190, 242, 243,
	84, 191, 0, 0, 0, 0, 192, 193, 194, 195,
	0, 0, 0, 0, 0, 87, 88, 381, 89, 0,
	0, 0, 0, 196, 0, 0, 0, 0, 90, 91,
	197, 198, 199, 200, 92, 201, 202, 0, 93, 203,
	204, 94, 0, 0, 205, 206, 207, 0, 208, 0,
	0, 0, 95, 96, 97, 0, 98, 0, 99, 100,
	0, 0, 101, 102, 0, 0, 0, 0, 0, 0,
	103, 104, 105, 106, 209, 107, 210, 211, 0, 108,
	0, 109, 0, 0, 0, 110, 111, 0, 112, 0,
	0, 0, 212, 113, 114, 213, 0, 0, 0, 115,
	116, 214, 0, 117, 0, 118, 0, 0, 0, 0,
	119, 215, 0, 216, 0, 120, 121, 217, 218, 0,
	0, 124, 0, 122, 0, 0, 123, 219, 220, 221,
	0, 222, 0, 0, 125, 0, 126, 127, 0, 0,
	223, 0, 128, 0, 0, 129, 0, 0, 130, 0,
	131, 132, 133, 134, 135, 0, 136, 137, 140, 138,
	0, 139, 0, 224, 141, 225, 142, 143, 0, 0,
	0, 0, 0, 144, 226, 0, 145, 0, 227, 146,
	147, 148, 0, 228, 149, 229, 150, 0, 151, 152,
	153, 230, 154, 155, 0, 157, 158, 156, 159, 0,
	160, 0, 161, 162, 231, 163, 0, 164, 165, 166,
	0, 232, 167, 168, 0, 169, 170, 0, 171, 233,
	234, 172, 0, 173, 174, 176, 235, 175, 236, 0,
	177, 0, 178, 179, 0, 237, 238, 239, 0, 0,
	180, 240, 241, 0, 181, 182, 183, 184, 0, 0,
	185, 186, 187, 0, 0, 188, 189, 190, 242, 243,
	84, 191, 0, 0, 0, 0, 192, 193, 194, 195,
	0, 0, 0, 0, 0, 87, 88, 0, 89, 0,
	0, 0, 0, 196, 0, 0, 0, 0, 90, 91,
	197, 198, 199, 200, 92, 201, 202, 0, 93, 203,
	204, 94, 0, 0, 205, 206, 207, 0, 208, 0,
	0, 0, 95, 96, 97, 0, 98, 0, 99, 100,
	0, 0, 101, 102, 0, 0, 0, 0, 0, 0,
	103, 104, 105, 106, 209, 107, 210, 211, 0, 108,
	0, 109, 0, 0, 0, 110, 111, 0, 112, 0,
	0, 0, 212, 113, 114, 213, 0, 0, 0, 115,
	116, 214, 0, 117, 0, 118, 0, 0, 0, 0,
	119, 215, 0, 216, 0, 120, 121, 335, 218, 0,
	0, 124, 0, 122, 0, 0, 123, 219, 220, 221,
	0, 222, 0, 0, 125, 0, 126, 127, 0, 0,
	223, 0, 128, 0, 0, 129, 0, 0, 130, 0,
	131, 132, 133, 134, 135, 0, 136, 137, 140, 138,
	0, 139, 0, 224, 141, 225, 142, 143, 0, 0,
	329, 0, 0, 144, 226, 0, 145, 0, 227, 146,
	147, 148, 0, 228, 149, 229, 150, 0, 151, 152,
	153, 230, 154, 155, 0, 157, 158, 156, 159, 0,
	160, 0, 161, 162, 231, 163, 0, 164, 165, 166,
	0, 232, 167, 168, 0, 169, 170, 0, 171, 233,
	234, 172, 0, 173, 174, 176, 235, 175, 236, 0,
	177, 0, 178, 179, 0, 237, 238, 239, 0, 0,
	180, 240, 241, 0, 181, 182, 183, 184, 0, 0,
	185, 186, 187, 0, 0, 188, 189, 190, 242, 243,
	84, 191, 0, 0, 0, 0, 192, 193, 194, 195,
	0, 0, 0, 0, 0, 87, 88, 247, 89, 0,
	0, 0, 0, 196, 0, 0, 0, 0, 90, 91,
	197, 198, 199, 200, 92, 201, 202, 0, 93, 203,
	204, 94, 0, 0, 205, 206, 207, 0, 208, 0,
	0, 0, 95, 96, 97, 0, 98, 0, 99, 100,
	0, 0, 101, 102, 0, 0, 0, 0, 0, 0,
	103, 104, 105, 106, 209, 107, 210, 211, 0, 108,
	0, 109, 0, 0, 0, 110, 111, 0, 112, 0,
	0, 0, 212, 113, 114, 213, 0, 0, 0, 115,
	116, 214, 0, 117, 0, 118, 0, 0, 0, 0,
	119, 215, 0, 216, 0, 120, 121, 217, 218, 0,
	0, 124, 0, 122, 0, 0, 123, 219, 220, 221,
	0, 222, 0, 0, 125, 0, 126, 127, 0, 0,
	223, 0, 128, 0, 0, 129, 0, 0, 130, 0,
	131, 132, 133, 134, 135, 0, 136, 137, 140, 138,
	0, 139, 0, 224, 141, 225, 142, 143, 0, 0,
	0, 0, 0, 144, 226, 0, 145, 0, 227, 146,
	147, 148, 0, 228, 149, 229, 246, 0, 151, 152,
	153, 230, 154, 155, 0, 157, 158, 156, 159, 0,
	160, 0, 161, 162, 231, 163, 0, 164, 165, 166,
	0, 232, 167, 168, 0, 169, 170, 0, 171, 233,
	234, 172, 0, 173, 174, 176, 235, 175, 236, 0,
	177, 0, 178, 179, 0, 237, 238, 239, 0, 0,
	180, 240, 241, 0, 181, 182, 183, 184, 0, 0,
	185, 186, 187, 0, 0, 188, 189, 190, 242, 243,
	84, 191, 0, 0, 0, 0, 192, 193, 194, 195,
	0, 0, 0, 0, 0, 87, 88, 0, 89, 0,
	0, 0, 0, 196, 0, 0, 0, 0, 90, 91,
	197, 198, 199, 200, 92, 201, 202, 0, 93, 203,
	204, 94, 0, 0, 205, 206, 207, 0, 208, 0,
	0, 0, 95, 96, 97, 0, 98, 0, 99, 100,
	0, 0, 101, 102, 0, 0, 0, 0, 0, 0,
	103, 104, 105, 106, 209, 107, 210, 211, 0, 108,
	0, 109, 0, 0, 0, 110, 111, 0, 112, 0,
	0, 0, 212, 113, 114, 213, 0, 0, 0, 115,
	116, 214, 0, 117, 0, 118, 0, 0, 0, 0,
	119, 215, 0, 216, 0, 120, 121, 217, 218, 0,
	0, 124, 0, 122, 0, 0, 123, 219, 220, 221,
	0, 222, 0, 0, 125, 0, 126, 127, 0, 0,
	223, 0, 128, 0, 0, 129, 0, 0, 130, 0,
	131, 132, 133, 134, 135, 0, 136, 137, 140, 138,
	0, 139, 0, 224, 141, 225, 142, 143, 0, 0,
	0, 0, 0, 144, 226, 0, 145, 0, 227, 146,
	147, 148, 0, 228, 149, 229, 150, 0, 151, 152,
	153, 230, 154, 155, 0, 157, 158, 156, 159, 0,
	160, 0, 161, 162, 231, 163, 0, 164, 165, 166,
	0, 232, 167, 168, 0, 169, 170, 0, 171, 233,
	234, 172, 0, 173, 174, 176, 235, 175, 236, 0,
	177, 0, 178, 179, 0, 237, 238, 239, 0, 0,
	180, 240, 241, 0, 181, 182, 183, 184, 0, 0,
	185, 186, 187, 0, 0, 188, 189, 190, 242, 243,
	84, 191, 0, 0, 0, 0, 192, 193, 194, 195,
	0, 0, 0, 0, 0, 87, 88, 0, 89, 0,
	0, 0, 0, 196, 0, 0, 0, 0, 90, 91,
	197, 198, 199, 200, 92, 201, 202, 0, 93, 203,
	204, 94, 0, 0, 205, 206, 207, 0, 208, 0,
	0, 0, 95, 96, 97, 0, 98, 0, 99, 100,
	0, 0, 101, 102, 0, 0, 0, 0, 0, 0,
	103, 104, 105, 106, 209, 107, 210, 211, 0, 108,
	0, 109, 0, 0, 0, 110, 111, 0, 112, 0,
	0, 0, 212, 113, 114, 213, 0, 0, 0, 115,
	116, 214, 0, 117, 0, 118, 0, 0, 0, 0,
	119, 215, 0, 216, 0, 120, 121, 1184, 218, 0,
	0, 124, 0, 122, 0, 0, 123, 219, 220, 221,
	0, 222, 0, 0, 125, 0, 126, 127, 0, 0,
	223, 0, 128, 0, 0, 129, 0, 0, 130, 0,
	131, 132, 133, 134, 135, 0, 136, 137, 140, 138,
	0, 139, 0, 224, 141, 225, 142, 143, 0, 0,
	0, 0, 0, 144, 226, 0, 145, 0, 227, 146,
	147, 148, 0, 228, 149, 229, 150, 0, 151, 152,
	153, 230, 154, 155, 0, 157, 158, 156, 159, 0,
	160, 0, 161, 162, 231, 163, 0, 164, 165, 166,
	0, 232, 167, 168, 0, 169, 170, 0, 171, 233,
	234, 172, 0, 173, 174, 176, 235, 175, 236, 0,
	177, 0, 178, 179, 0, 237, 238, 239, 0, 0,
	180, 240, 241, 0, 181, 182, 183, 184, 0, 0,
	185, 186, 187, 0, 0, 188, 189, 190, 242, 243,
	84, 191, 0, 0, 0, 0, 192, 193, 194, 195,
	0, 0, 0, 0, 0, 87, 88, 0, 89, 0,
	0, 0, 0, 196, 0, 0, 0, 0, 90, 91,
	197, 198, 199, 200, 92, 201, 202, 0, 93, 203,
	204, 94, 0, 0, 205, 206, 207, 0, 208, 0,
	0, 0, 95, 96, 97, 0, 98, 0, 99, 100,
	0, 0, 101, 102, 0, 0, 0, 0, 0, 0,
	103, 104, 105, 106, 209, 107, 210, 211, 0, 108,
	0, 109, 0, 0, 0, 110, 111, 0, 112, 0,
	0, 0, 212, 113, 114, 213, 0, 0, 0, 115,
	116, 214, 0, 117, 0, 118, 0, 0, 0, 0,
	119, 215, 0, 216, 0, 120, 121, 1182, 218, 0,
	0, 124, 0, 122, 0, 0, 123, 219, 220, 221,
	0, 222, 0, 0, 125, 0, 126, 127, 0, 0,
	223, 0, 128, 0, 0, 129, 0, 0, 130, 0,
	131, 132, 133, 134, 135, 0, 136, 137, 140, 138,
	0, 139, 0, 224, 141, 225, 142, 143, 0, 0,
	0, 0, 0, 144, 226, 0, 145, 0, 227, 146,
	147, 148, 0, 228, 149, 229, 150, 0, 151, 152,
	153, 230, 154, 155, 0, 157, 158, 156, 159, 0,
	160, 0, 161, 162, 231, 163, 0, 164, 165, 166,
	0, 232, 167, 168, 0, 169, 170, 0, 171, 233,
	234, 172, 0, 173, 174, 176, 235, 175, 236, 0,
	177, 0, 178, 179, 0, 237, 238, 239, 0, 0,
	180, 240, 241, 0, 181, 182, 183, 184, 0, 0,
	185, 186, 187, 0, 0, 188, 189, 190, 242, 243,
	84, 191, 0, 0, 0, 0, 192, 193, 194, 195,
	0, 0, 0, 0, 0, 87, 88, 0, 89, 0,
	0, 0, 0, 196, 0, 0, 0, 0, 90, 91,
	197, 198, 199, 200, 92, 201, 202, 0, 93, 203,
	204, 94, 0, 0, 205, 206, 207, 0, 208, 0,
	0, 0, 95, 96, 97, 0, 98, 0, 99, 100,
	0, 0, 101, 102, 0, 0, 0, 0, 0, 0,
	103, 104, 105, 106, 209, 107, 210, 211, 0, 108,
	0, 109, 0, 0, 0, 110, 111, 0, 112, 0,
	0, 0, 212, 113, 114, 213, 0, 0, 0, 115,
	116, 214, 0, 117, 0, 118, 0, 0, 0, 0,
	119, 215, 0, 216, 0, 120, 121, 1173, 218, 0,
	0, 124, 0, 122, 0, 0, 123, 219, 220, 221,
	0, 222, 0, 0, 125, 0, 126, 127, 0, 0,
	223, 0, 128, 0, 0, 129, 0, 0, 130, 0,
	131, 132, 133, 134, 135, 0, 136, 137, 140, 138,
	0, 139, 0, 224, 141, 225, 142, 143, 0, 0,
	0, 0, 0, 144, 226, 0, 145, 0, 227, 146,
	147, 148, 0, 228, 149, 229, 150, 0, 151, 152,
	153, 230, 154, 155, 0, 157, 158, 156, 159, 0,
	160, 0, 161, 162, 231, 163, 0, 164, 165, 166,
	0, 232, 167, 168, 0, 169, 170, 0, 171, 233,
	234, 172, 0, 173, 174, 176, 235, 175, 236, 0,
	177, 0, 178, 179, 0, 237, 238, 239, 0, 0,
	180, 240, 241, 0, 181, 182, 183, 184, 0, 0,
	185, 186, 187, 0, 0, 188, 189, 190, 242, 243,
	84, 191, 0, 0, 0, 0, 192, 193, 194, 195,
	0, 0, 0, 0, 0, 87, 88, 0, 89, 0,
	0, 0, 0, 196, 0, 0, 0, 0, 90, 91,
	197, 198, 199, 200, 92, 201, 202, 0, 93, 203,
	204, 94, 0, 0, 205, 206, 207, 0, 208, 0,
	0, 0, 95, 96, 97, 0, 98, 0, 99, 100,
	0, 0, 101, 102, 0, 0, 0, 0, 0, 0,
	103, 104, 105, 106, 209, 107, 210, 211, 0, 108,
	0, 109, 0, 0, 0, 110, 111, 0, 112, 0,
	0, 0, 212, 113, 114, 213, 0, 0, 0, 115,
	116, 214, 0, 117, 0, 118, 0, 0, 0, 0,
	119, 215, 0, 216, 0, 120, 121, 785, 218, 0,
	0, 124, 0, 122, 0, 0, 123, 219, 220, 221,
	0, 222, 0, 0, 125, 0, 126, 127, 0, 0,
	223, 0, 128, 0, 0, 129, 0, 0, 130, 0,
	131, 132, 133, 134, 135, 0, 136, 137, 140, 138,
	0, 139, 0, 224, 141, 225, 142, 143, 0, 0,
	0, 0, 0, 144, 226, 0, 145, 0, 227, 146,
	147, 148, 0, 228, 149, 229, 150, 0, 151, 152,
	153, 230, 154, 155, 0, 157, 158, 156, 159, 0,
	160, 0, 161, 162, 231, 163, 0, 164, 165, 166,
	0, 232, 167, 168, 0, 169, 170, 0, 171, 233,
	234, 172, 0, 173, 174, 176, 235, 175, 236, 0,
	177, 0, 178, 179, 0, 237, 238, 239, 0, 0,
	180, 240, 241, 0, 181, 182, 183, 184, 0, 0,
	185, 186, 187, 0, 0, 188, 189, 190, 242, 243,
	84, 191, 0, 0, 0, 0, 192, 193, 194, 195,
	0, 0, 0, 0, 0, 87, 88, 0, 89, 0,
	0, 0, 0, 196, 0, 0, 0, 0, 90, 91,
	197, 198, 199, 200, 92, 201, 202, 0, 93, 203,
	204, 94, 0, 0, 205, 206, 207, 0, 208, 0,
	0, 0, 95, 96, 97, 0, 98, 0, 99, 100,
	0, 0, 101, 102, 0, 0, 0, 0, 0, 0,
	103, 104, 105, 106, 209, 107, 210, 211, 0, 108,
	0, 109, 0, 0, 0, 110, 111, 0, 112, 0,
	0, 0, 212, 113, 114, 213, 0, 0, 0, 115,
	116, 214, 0, 117, 0, 118, 0, 0, 0, 0,
	119, 215, 0, 216, 0, 120, 121, 217, 218, 0,
	0, 124, 0, 122, 0, 0, 123, 219, 220, 221,
	0, 222, 0, 0, 125, 0, 126, 127, 0, 0,
	223, 0, 128, 0, 0, 129, 0, 0, 130, 0,
	131, 132, 133, 134, 135, 0, 136, 137, 140, 138,
	0, 139, 0, 224, 141, 225, 142, 143, 0, 0,
	0, 0, 0, 144, 226, 0, 145, 0, 227, 146,
	147, 148, 0, 228, 149, 229, 150, 0, 151, 152,
	153, 230, 154, 155, 0, 157, 158, 156, 159, 0,
	160, 0, 161, 162, 231, 163, 0, 261, 165, 166,
	0, 232, 167, 168, 0, 169, 170, 0, 171, 233,
	234, 172, 0, 173, 174, 176, 235, 175, 236, 0,
	177, 0, 178, 179, 0, 237, 238, 239, 0, 0,
	180, 240, 241, 0, 181, 182, 183, 184, 0, 0,
	185, 186, 187, 0, 0, 188, 189, 190, 242, 243,
	84, 191, 0, 0, 0, 0, 192, 193, 194, 195,
	0, 0, 0, 0, 0, 87, 88, 0, 89, 0,
	0, 0, 0, 196, 0, 575, 0, 0, 90, 91,
	197, 198, 199, 200, 92, 201, 202, 0, 93, 203,
	204, 94, 0, 0, 205, 206, 207, 0, 208, 0,
	0, 0, 95, 96, 97, 0, 98, 0, 99, 100,
	0, 0, 101, 102, 0, 0, 0, 0, 0, 0,
	103, 104, 105, 106, 209, 107, 210, 211, 0, 108,
	0, 109, 0, 0, 0, 110, 111, 0, 112, 0,
	0, 0, 212, 113, 114, 213, 0, 0, 0, 115,
	116, 214, 0, 117, 0, 118, 0, 0, 0, 0,
	119, 215, 0, 216, 0, 120, 121, 217, 218, 0,
	0, 124, 0, 122, 0, 0, 123, 219, 220, 221,
	0, 222, 0, 0, 125, 0, 126, 127, 0, 0,
	223, 0, 128, 0, 0, 129, 0, 0, 130, 0,
	131, 132, 133, 134, 135, 0, 136, 137, 140, 138,
	0, 139, 0, 224, 141, 225, 142, 143, 0, 0,
	0, 0, 0, 144, 226, 0, 145, 0, 227, 146,
	147, 148, 0, 228, 149, 229, 150, 0, 151, 152,
	153, 230, 154, 155, 0, 157, 158, 156, 159, 0,
	160, 0, 161, 162, 231, 163, 0, 164, 165, 166,
	0, 232, 167, 168, 0, 0, 170, 0, 171, 233,
	234, 172, 0, 173, 174, 176, 235, 175, 236, 0,
	177, 0, 178, 179, 0, 237, 238, 239, 0, 0,
	180, 240, 241, 0, 181, 182, 183, 184, 0, 0,
	185, 186, 187, 0, 0, 188, 189, 190, 242, 243,
	84, 191, 0, 0, 0, 0, 192, 193, 194, 195,
	0, 0, 0, 0, 0, 87, 88, 0, 89, 0,
	0, 0, 0, 196, 0, 0, 0, 0, 90, 91,
	197, 198, 199, 200, 92, 201, 202, 0, 93, 203,
	204, 94, 0, 0, 205, 206, 207, 0, 208, 0,
	0, 0, 95, 96, 97, 0, 98, 0, 99, 100,
	0, 0, 101, 102, 0, 0, 0, 0, 0, 0,
	103, 104, 105, 106, 209, 107, 210, 211, 0, 108,
	0, 109, 0, 0, 0, 110, 111, 0, 112, 0,
	0, 0, 212, 113, 114, 213, 0, 0, 0, 115,
	116, 214, 0, 117, 0, 118, 0, 0, 0, 0,
	119, 215, 0, 216, 0, 120, 121, 429, 218, 0,
	0, 124, 0, 122, 0, 0, 123, 219, 220, 221,
	0, 222, 0, 0, 125, 0, 126, 127, 0, 0,
	223, 0, 128, 0, 0, 129, 0, 0, 130, 0,
	131, 132, 133, 134, 135, 0, 136, 137, 140, 138,
	0, 139, 0, 224, 141, 225, 142, 143, 0, 0,
	0, 0, 0, 144, 226, 0, 145, 0, 227, 146,
	147, 148, 0, 228, 149, 229, 150, 0, 151, 152,
	153, 230, 154, 155, 0, 157, 158, 156, 159, 0,
	160, 0, 161, 162, 231, 163, 0, 164, 165, 166,
	0, 232, 167, 168, 0, 169, 170, 0, 171, 233,
	234, 172, 0, 173, 174, 176, 235, 175, 236, 0,
	177, 0, 178, 179, 0, 237, 238, 239, 0, 0,
	180, 240, 241, 0, 181, 182, 183, 184, 0, 0,
	185, 186, 187, 0, 0, 188, 189, 190, 242, 243,
	84, 191, 0, 0, 0, 0, 192, 193, 194, 195,
	0, 0, 0, 0, 0, 87, 88, 0, 89, 0,
	0, 0, 0, 196, 0, 0, 0, 0, 90, 91,
	197, 198, 199, 200, 92, 201, 202, 0, 93, 203,
	204, 94, 0, 0, 205, 206, 207, 0, 208, 0,
	0, 0, 95, 96, 97, 0, 98, 0, 99, 100,
	0, 0, 101, 102, 0, 0, 0, 0, 0, 0,
	103, 104, 105, 106, 209, 107, 210, 211, 0, 108,
	0, 109, 0, 0, 0, 110, 111, 0, 112, 0,
	0, 0, 212, 113, 114, 213, 0, 0, 0, 115,
	116, 214, 0, 117, 0, 118, 0, 0, 0, 0,
	119, 215, 0, 216, 0, 120, 121, 426, 218, 0,
	0, 124, 0, 122, 0, 0, 123, 219, 220, 221,
	0, 222, 0, 0, 125, 0, 126, 127, 0, 0,
	223, 0, 128, 0, 0, 129, 0, 0, 130, 0,
	131, 132, 133, 134, 135, 0, 136, 137, 140, 138,
	0, 139, 0, 224, 141, 225, 142, 143, 0, 0,
	0, 0, 0, 144, 226, 0, 145, 0, 227, 146,
	147, 148, 0, 228, 149, 229, 150, 0, 151, 152,
	153, 230, 154, 155, 0, 157, 158, 156, 159, 0,
	160, 0, 161, 162, 231, 163, 0, 164, 165, 166,
	0, 232, 167, 168, 0, 169, 170, 0, 171, 233,
	234, 172, 0, 173, 174, 176, 235, 175, 236, 0,
	177, 0, 178, 179, 0, 237, 238, 239, 0, 0,
	180, 240, 241, 0, 181, 182, 183, 184, 0, 0,
	185, 186, 187, 0, 0, 188, 189, 190, 242, 243,
	84, 191, 0, 0, 0, 0, 192, 193, 194, 195,
	0, 0, 0, 0, 0, 87, 88, 0, 89, 0,
	0, 0, 0, 196, 0, 0, 0, 0, 90, 91,
	197, 198, 199, 200, 92, 201, 202, 0, 93, 203,
	204, 94, 0, 0, 205, 206, 387, 0, 208, 0,
	0, 0, 95, 96, 97, 0, 98, 0, 99, 100,
	0, 0, 101, 102, 0, 0, 0, 0, 0, 0,
	103, 104, 105, 106, 209, 107, 210, 211, 0, 108,
	0, 109, 0, 0, 0, 110, 111, 0, 112, 0,
	0, 0, 212, 113, 114, 213, 0, 0, 0, 115,
	116, 214, 0, 117, 0, 118, 0, 0, 0, 0,
	119, 215, 0, 216, 0, 120, 121, 217, 218, 0,
	0, 124, 0, 122, 0, 0, 123, 219, 220, 221,
	0, 222, 0, 0, 125, 0, 126, 127, 0, 0,
	223, 0, 128, 0, 0, 129, 0, 0, 130, 0,
	131, 132, 133, 134, 272, 0, 136, 137, 140, 138,
	0, 139, 0, 224, 141, 225, 142, 143, 0, 0,
	0, 0, 0, 144, 226, 0, 145, 0, 227, 146,
	147, 148, 0, 228, 149, 229, 150, 0, 151, 152,
	153, 230, 154, 155, 0, 157, 158, 156, 159, 0,
	160, 0, 161, 162, 231, 163, 0, 164, 165, 166,
	0, 232, 167, 168, 0, 169, 170, 0, 171, 233,
	234, 172, 0, 173, 174, 176, 235, 175, 236, 0,
	177, 0, 178, 179, 0, 271, 238, 239, 0, 0,
	267, 240, 241, 0, 181, 182, 183, 184, 0, 0,
	185, 186, 187, 0, 0, 188, 189, 190, 242, 243,
	84, 191, 0, 0, 0, 0, 192, 193, 194, 195,
	0, 0, 0, 0, 0, 87, 88, 0, 89, 0,
	0, 0, 0, 196, 0, 0, 0, 0, 90, 91,
	197, 198, 199, 200, 92, 201, 202, 0, 93, 203,
	204, 94, 0, 0, 205, 206, 207, 0, 208, 0,
	0, 0, 95, 96, 97, 0, 98, 0, 99, 100,
	0, 0, 101, 102, 0, 0, 0, 0, 0, 0,
	103, 104, 105, 106, 209, 107, 210, 211, 0, 108,
	0, 109, 0, 0, 0, 110, 111, 0, 112, 0,
	0, 0, 212, 113, 114, 213, 0, 0, 0, 115,
	116, 214, 0, 117, 0, 118, 0, 0, 0, 0,
	119, 215, 0, 216, 0, 120, 121, 217, 218, 0,
	0, 124, 0, 122, 0, 0, 123, 219, 220, 221,
	0, 222, 0, 0, 125, 0, 126, 127, 0, 0,
	223, 0, 128, 0, 0, 129, 0, 0, 130, 0,
	131, 132, 133, 134, 272, 0, 136, 137, 140, 138,
	0, 139, 0, 224, 141, 225, 142, 143, 0, 0,
	0, 0, 0, 144, 226, 0, 145, 0, 227, 146,
	147, 148, 0, 228, 149, 229, 150, 0, 151, 152,
	153, 230, 154, 155, 0, 157, 158, 156, 159, 0,
	160, 0, 161, 162, 231, 163, 0, 164, 165, 166,
	0, 232, 167, 168, 0, 169, 170, 0, 171, 233,
	234, 172, 0, 173, 174, 176, 235, 175, 236, 0,
	177, 0, 178, 179, 0, 271, 238, 239, 0, 0,
	267, 240, 241, 0, 181, 182, 183, 184, 0, 0,
	185, 186, 187, 0, 0, 188, 189, 190, 242, 243,
	84, 191, 0, 0, 0, 0, 192, 193, 194, 195,
	0, 0, 0, 0, 0, 87, 88, 0, 89, 0,
	0, 0, 0, 196, 0, 0, 0, 0, 90, 91,
	197, 198, 199, 200, 92, 201, 202, 0, 93, 203,
	204, 94, 0, 0, 205, 206, 207, 0, 208, 0,
	0, 0, 95, 96, 97, 0, 98, 0, 99, 100,
	0, 0, 101, 102, 0, 0, 0, 0, 0, 0,
	103, 104, 105, 106, 209, 107, 210, 211, 0, 108,
	0, 109, 0, 0, 0, 110, 111, 0, 112, 0,
	0, 0, 212, 113, 114, 213, 0, 0, 0, 115,
	116, 214, 0, 117, 0, 118, 0, 0, 0, 0,
	119, 215, 0, 216, 0, 120, 121, 351, 218, 0,
	0, 124, 0, 122, 0, 0, 123, 219, 220, 221,
	0, 222, 0, 0, 125, 0, 126, 127, 0, 0,
	223, 0, 128, 0, 0, 129, 0, 0, 130, 0,
	131, 132, 133, 134, 135, 0, 136, 137, 140, 138,
	0, 139, 0, 224, 141, 225, 142, 143, 0, 0,
	0, 0, 0, 144, 226, 0, 145, 0, 227, 146,
	147, 148, 0, 228, 149, 229, 150, 0, 151, 152,
	153, 230, 154, 155, 0, 157, 158, 156, 159, 0,
	160, 0, 161, 162, 231, 163, 0, 164, 165, 166,
	0, 232, 167, 168, 0, 169, 170, 0, 171, 233,
	234, 172, 0, 173, 174, 176, 235, 175, 236, 0,
	177, 0, 178, 179, 0, 237, 238, 239, 0, 0,
	180, 240, 241, 0, 181, 182, 183, 184, 0, 0,
	185, 186, 187, 0, 0, 188, 189, 190, 242, 243,
	84, 191, 0, 0, 0, 0, 192, 193, 194, 195,
	0, 0, 0, 0, 0, 87, 88, 0, 89, 0,
	0, 0, 0, 196, 0, 0, 0, 0, 90, 91,
	197, 198, 199, 200, 92, 201, 202, 0, 93, 203,
	204, 94, 0, 0, 205, 206, 207, 0, 208, 0,
	0, 0, 95, 96, 97, 0, 98, 0, 99, 100,
	0, 0, 101, 102, 0, 0, 0, 0, 0, 0,
	103, 104, 105, 106, 209, 107, 210, 211, 0, 108,
	0, 109, 0, 0, 0, 110, 111, 0, 112, 0,
	0, 0, 212, 113, 114, 213, 0, 0, 0, 115,
	116, 214, 0, 117, 0, 118, 0, 0, 0, 0,
	119, 215, 0, 216, 0, 120, 121, 348, 218, 0,
	0, 124, 0, 122, 0, 0, 123, 219, 220, 221,
	0, 222, 0, 0, 125, 0, 126, 127, 0, 0,
	223, 0, 128, 0, 0, 129, 0, 0, 130, 0,
	131, 132, 133, 134, 135, 0, 136, 137, 140, 138,
	0, 139, 0, 224, 141, 225, 142, 143, 0, 0,
	0, 0, 0, 144, 226, 0, 145, 0, 227, 146,
	147, 148, 0, 228, 149, 229, 150, 0, 151, 152,
	153, 230, 154, 155, 0, 157, 158, 156, 159, 0,
	160, 0, 161, 162, 231, 163, 0, 164, 165, 166,
	0, 232, 167, 168, 0, 169, 170, 0, 171, 233,
	234, 172, 0, 173, 174, 176, 235, 175, 236, 0,
	177, 0, 178, 179, 0, 237, 238, 239, 0, 0,
	180, 240, 241, 0, 181, 182, 183, 184, 0, 0,
	185, 186, 187, 0, 0, 188, 189, 190, 242, 243,
	84, 191, 0, 0, 0, 0, 192, 193, 194, 195,
	0, 0, 0, 0, 0, 87, 88, 0, 89, 0,
	0, 0, 0, 196, 0, 0, 0, 0, 90, 91,
	197, 198, 199, 200, 92, 201, 202, 0, 93, 203,
	204, 94, 0, 0, 205, 206, 207, 0, 208, 0,
	0, 0, 95, 96, 97, 0, 98, 0, 99, 100,
	0, 0, 101, 102, 0, 0, 0, 0, 0, 0,
	103, 104, 105, 106, 209, 107, 210, 211, 0, 108,
	0, 109, 0, 0, 0, 110, 111, 0, 112, 0,
	0, 0, 212, 113, 114, 213, 0, 0, 0, 115,
	116, 214, 0, 117, 0, 118, 0, 0, 0, 0,
	119, 215, 0, 216, 0, 120, 121, 346, 218, 0,
	0, 124, 0, 122, 0, 0, 123, 219, 220, 221,
	0, 222, 0, 0, 125, 0, 126, 127, 0, 0,
	223, 0, 128, 0, 0, 129, 0, 0, 130, 0,
	131, 132, 133, 134, 135, 0, 136, 137, 140, 138,
	0, 139, 0, 224, 141, 225, 142, 143, 0, 0,
	0, 0, 0, 144, 226, 0, 145, 0, 227, 146,
	147, 148, 0, 228, 149, 229, 150, 0, 151, 152,
	153, 230, 154, 155, 0, 157, 158, 156, 159, 0,
	160, 0, 161, 162, 231, 163, 0, 164, 165, 166,
	0, 232, 167, 168, 0, 169, 170, 0, 171, 233,
	234, 172, 0, 173, 174, 176, 235, 175, 236, 0,
	177, 0, 178, 179, 0, 237, 238, 239, 0, 0,
	180, 240, 241, 0, 181, 182, 183, 184, 0, 0,
	185, 186, 187, 0, 0, 188, 189, 190, 242, 243,
	84, 191, 0, 0, 0, 0, 192, 193, 194, 195,
	0, 0, 0, 0, 0, 87, 88, 0, 89, 0,
	0, 0, 0, 196, 0, 0, 0, 0, 90, 91,
	197, 198, 199, 200, 92, 201, 202, 0, 93, 203,
	204, 94, 0, 0, 205, 206, 207, 0, 208, 0,
	0, 0, 95, 96, 97, 0, 98, 0, 99, 100,
	0, 0, 101, 102, 0, 0, 0, 0, 0, 0,
	103, 104, 105, 106, 209, 107, 210, 211, 0, 108,
	0, 109, 0, 0, 0, 110, 111, 0, 112, 0,
	0, 0, 212, 113, 114, 213, 0, 0, 0, 115,
	116, 214, 0, 117, 0, 118, 0, 0, 0, 0,
	119, 215, 0, 216, 0, 120, 121, 338, 218, 0,
	0, 124, 0, 122, 0, 0, 123, 219, 220, 221,
	0, 222, 0, 0, 125, 0, 126, 127, 0, 0,
	223, 0, 128, 0, 0, 129, 0, 0, 130, 0,
	131, 132, 133, 134, 135, 0, 136, 137, 140, 138,
	0, 139, 0, 224, 141, 225, 142, 143, 0, 0,
	0, 0, 0, 144, 226, 0, 145, 0, 227, 146,
	147, 148, 0, 228, 149, 229, 150, 0, 151, 152,
	153, 230, 154, 155, 0, 157, 158, 156, 159, 0,
	160, 0, 161, 162, 231, 163, 0, 164, 165, 166,
	0, 232, 167, 168, 0, 169, 170, 0, 171, 233,
	234, 172, 0, 173, 174, 176, 235, 175, 236, 0,
	177, 0, 178, 179, 0, 237, 238, 239, 0, 0,
	180, 240, 241, 0, 181, 182, 183, 184, 0, 0,
	185, 186, 187, 0, 0, 188, 189, 190, 242, 243,
	84, 191, 0, 0, 0, 0, 192, 193, 194, 195,
	0, 0, 0, 0, 0, 87, 88, 0, 89, 0,
	0, 0, 0, 196, 0, 0, 0, 0, 90, 91,
	197, 198, 199, 200, 92, 201, 202, 0, 93, 203,
	204, 94, 0, 0, 205, 206, 207, 0, 208, 0,
	0, 0, 95, 96, 97, 0, 98, 0, 99, 100,
	0, 0, 101, 102, 0, 0, 0, 0, 0, 0,
	103, 104, 105, 106, 209, 107, 210, 211, 0, 108,
	0, 109, 0, 0, 0, 110, 111, 0, 112, 0,
	0, 0, 212, 113, 114, 213, 0, 0, 0, 115,
	116, 214, 0, 117, 0, 118, 0, 0, 0, 0,
	119, 215, 0, 216, 0, 120, 121, 217, 218, 0,
	0, 124, 0, 122, 0, 0, 123, 219, 220, 221,
	0, 222, 0, 0, 125, 0, 126, 127, 0, 0,
	223, 0, 128, 0, 0, 129, 0, 0, 130, 0,
	131, 132, 133, 134, 135, 0, 136, 137, 140, 138,
	0, 139, 0, 224, 141, 225, 142, 143, 0, 0,
	0, 0, 0, 144, 226, 0, 145, 0, 227, 146,
	147, 148, 0, 228, 149, 229, 150, 0, 151, 152,
	153, 230, 318, 155, 0, 157, 158, 156, 159, 0,
	160, 0, 161, 162, 231, 163, 0, 164, 165, 166,
	0, 232, 167, 168, 0, 169, 170, 0, 171, 233,
	234, 172, 0, 173, 174, 176, 235, 175, 236, 0,
	177, 0, 178, 179, 0, 237, 238, 239, 0, 0,
	180, 240, 241, 0, 181, 182, 183, 184, 0, 0,
	185, 186, 187, 0, 0, 188, 189, 190, 242, 243,
	84, 191, 0, 0, 0, 0, 192, 193, 194, 195,
	0, 0, 0, 0, 0, 87, 88, 0, 89, 0,
	0, 0, 0, 196, 0, 0, 0, 0, 90, 91,
	197, 198, 199, 200, 92, 201, 202, 0, 93, 203,
	204, 94, 0, 0, 205, 206, 207, 0, 208, 0,
	0, 0, 95, 96, 97, 0, 98, 0, 99, 100,
	0, 0, 101, 102, 0, 0, 0, 0, 0, 0,
	103, 104, 105, 106, 209, 107, 210, 211, 0, 108,
	0, 109, 0, 0, 0, 110, 111, 0, 112, 0,
	0, 0, 212, 113, 114, 213, 0, 0, 0, 115,
	116, 214, 0, 117, 0, 118, 0, 0, 0, 0,
	119, 215, 0, 216, 0, 120, 121, 217, 218, 0,
	0, 124, 0, 122, 0, 0, 123, 219, 220, 221,
	0, 222, 0, 0, 125, 0, 126, 127, 0, 0,
	223, 0, 128, 0, 0, 264, 0, 0, 130, 0,
	131, 132, 133, 134, 272, 0, 136, 137, 140, 138,
	0, 139, 0, 224, 141, 225, 142, 143, 0, 0,
	0, 0, 0, 144, 226, 0, 145, 0, 227, 146,
	147, 148, 0, 228, 149, 229, 150, 0, 151, 152,
	153, 230, 154, 155, 0, 157, 158, 156, 159, 0,
	160, 0, 161, 162, 266, 163, 0, 164, 165, 166,
	0, 232, 167, 265, 0, 169, 170, 0, 171, 233,
	234, 172, 0, 173, 174, 176, 235, 175, 236, 0,
	177, 0, 178, 179, 0, 271, 238, 239, 0, 0,
	267, 240, 241, 0, 181, 182, 183, 184, 0, 0,
	185, 186, 187, 0, 0, 188, 189, 190, 242, 243,
	84, 191, 0, 0, 0, 0, 192, 193, 194, 195,
	0, 0, 0, 0, 0, 87, 88, 0, 89, 0,
	0, 0, 0, 196, 0, 0, 0, 0, 90, 91,
	197, 198, 199, 200, 92, 201, 202, 0, 93, 203,
	204, 94, 0, 0, 205, 206, 207, 0, 208, 0,
	0, 0, 95, 96, 97, 0, 98, 0, 99, 100,
	0, 0, 101, 102, 0, 0, 0, 0, 0, 0,
	103, 104, 105, 106, 209, 107, 210, 211, 0, 108,
	0, 109, 0, 0, 0, 110, 111, 0, 112, 0,
	0, 0, 212, 113, 114, 213, 0, 0, 0, 115,
	116, 214, 0, 117, 0, 118, 0, 0, 0, 0,
	119, 215, 0, 216, 0, 120, 121, 217, 218, 0,
	0, 124, 0, 122, 0, 0, 123, 219, 220, 221,
	0, 222, 0, 0, 125, 0, 126, 127, 0, 0,
	223, 0, 128, 0, 0, 129, 0, 0, 130, 0,
	131, 132, 133, 134, 135, 0, 136, 137, 140, 138,
	0, 139, 0, 224, 141, 225, 142, 143, 0, 0,
	0, 0, 0, 144, 226, 0, 145, 0, 227, 146,
	147, 0, 0, 228, 149, 229, 150, 0, 151, 0,
	153, 230, 154, 155, 0, 157, 158, 156, 159, 0,
	160, 0, 161, 162, 231, 0, 0, 164, 165, 166,
	0, 232, 167, 168, 0, 169, 170, 0, 171, 233,
	234, 172, 0, 173, 174, 176, 235, 175, 236, 0,
	177, 0, 178, 179, 0, 237, 238, 239, 0, 0,
	180, 240, 241, 0, 181, 182, 183, 184, 0, 0,
	185, 186, 187, 0, 0, 188, 189, 190, 242, 243,
	0, 191, 0, 0, 0, 0, 192, 193, 194, 195,
	811, 0, 830, 831, 832, 840, 841, 842, 0, 0,
	0, 0, 0, 0, 0, 833, 0, 0, 0, 0,
	0, 0, 813, 0, 844, 0, 811, 0, 830, 831,
	832, 840, 841, 842, 0, 0, 0, 0, 0, 0,
	0, 833, 0, 812, 0, 0, 0, 0, 813, 827,
	844, 0, 0, 0, 0, 0, 0, 0, 0, 811,
	0, 830, 831, 832, 840, 841, 842, 0, 0, 812,
	0, 0, 0, 0, 833, 827, 0, 0, 0, 0,
	0, 813, 0, 844, 0, 811, 0, 830, 831, 832,
	840, 841, 842, 0, 0, 0, 818, 0, 0, 0,
	833, 0, 812, 0, 0, 0, 0, 813, 827, 844,
	0, 0, 0, 837, 845, 0, 0, 0, 0, 0,
	0, 0, 818, 0, 0, 0, 0, 843, 812, 0,
	0, 0, 0, 0, 827, 0, 0, 835, 0, 837,
	845, 0, 0, 828, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 843, 0, 818, 0, 0, 0, 0,
	0, 0, 0, 835, 0, 834, 0, 0, 0, 828,
	0, 0, 837, 845, 0, 0, 0, 0, 0, 0,
	0, 818, 0, 0, 0, 0, 843, 0, 0, 0,
	0, 834, 0, 0, 0, 0, 835, 0, 837, 845,
	829, 0, 828, 0, 0, 0, 0, 0, 0, 0,
	0, 838, 843, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 835, 0, 834, 0, 829, 0, 828, 0,
	0, 0, 0, 0, 0, 0, 0, 838, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	834, 0, 0, 0, 0, 0, 0, 0, 0, 829,
	0, 0, 0, 0, 836, 0, 0, 824, 825, 826,
	838, 823, 820, 821, 822, 814, 815, 816, 817, 819,
	0, 839, 0, 0, 0, 829, 0, 0, 1310, 0,
	836, 0, 0, 824, 825, 826, 838, 823, 820, 821,
	822, 814, 815, 816, 817, 819, 0, 839, 0, 0,
	0, 1756, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 836, 0, 0, 824, 825, 826, 0,
	823, 820, 821, 822, 814, 815, 816, 817, 819, 0,
	839, 0, 0, 1317, 1754, 1334, 1335, 1336, 0, 836,
	0, 0, 824, 825, 826, 0, 823, 820, 821, 822,
	814, 815, 816, 817, 819, 0, 839, 0, 0, 811,
	1735, 830, 831, 832, 840, 841, 842, 0, 0, 0,
	0, 0, 0, 0, 833, 0, 0, 0, 0, 0,
	0, 813, 1331, 844, 0, 811, 0, 830, 831, 832,
	840, 841, 842, 0, 0, 0, 0, 0, 0, 0,
	833, 0, 812, 0, 0, 0, 0, 813, 827, 844,
	0, 0, 0, 0, 0, 0, 0, 0, 811, 0,
	830, 831, 832, 840, 841, 842, 0, 0, 812, 1322,
	0, 0, 0, 833, 827, 0, 0, 0, 0, 0,
	813, 0, 844, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 818, 0, 0, 0, 0,
	1337, 812, 0, 0, 0, 0, 0, 827, 0, 0,
	0, 0, 837, 845, 0, 0, 1332, 0, 0, 0,
	0, 818, 0, 0, 0, 0, 843, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 835, 0, 837, 845,
	0, 0, 828, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 843, 0, 818, 0, 0, 0, 0, 0,
	0, 0, 835, 0, 834, 0, 0, 0, 828, 0,
	0, 837, 845, 1333, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 843, 0, 0, 0, 0,
	834, 0, 0, 0, 0, 835, 0, 0, 0, 829,
	0, 828, 0, 0, 0, 0, 0, 0, 0, 0,
	838, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 834, 0, 829, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 838, 0, 0, 0,
	1328, 1329, 1330, 0, 1327, 1324, 1325, 1326, 1318, 1319,
	1320, 1321, 1323, 0, 0, 0, 0, 0, 829, 0,
	0, 0, 0, 836, 0, 0, 824, 825, 826, 838,
	823, 820, 821, 822, 814, 815, 816, 817, 819, 0,
	839, 0, 0, 0, 1710, 0, 0, 0, 0, 836,
	0, 0, 824, 825, 826, 0, 823, 820, 821, 822,
	814, 815, 816, 817, 819, 0, 839, 0, 0, 0,
	1705, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 836, 0, 0, 824, 825, 826, 0, 823,
	820, 821, 822, 814, 815, 816, 817, 819, 0, 839,
	0, 0, 811, 1701, 830, 831, 832, 840, 841, 842,
	0, 0, 0, 0, 0, 0, 0, 833, 0, 0,
	0, 0, 0, 0, 813, 0, 844, 0, 811, 0,
	830, 831, 832, 840, 841, 842, 0, 0, 0, 0,
	0, 0, 0, 833, 0, 812, 0, 0, 0, 0,
	813, 827, 844, 0, 0, 0, 0, 0, 0, 0,
	0, 811, 0, 830, 831, 832, 840, 841, 842, 0,
	0, 812, 0, 0, 0, 0, 833, 827, 0, 0,
	0, 0, 0, 813, 0, 844, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 818, 0,
	0, 0, 0, 0, 812, 0, 0, 0, 0, 0,
	827, 0, 0, 0, 0, 837, 845, 0, 0, 0,
	0, 0, 0, 0, 818, 0, 0, 0, 0, 843,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 835,
	0, 837, 845, 0, 0, 828, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 843, 0, 818, 0, 0,
	0, 0, 0, 0, 0, 835, 0, 834, 0, 0,
	0, 828, 0, 0, 837, 845, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 843, 0,
	0, 0, 0, 834, 0, 0, 0, 0, 835, 0,
	0, 0, 829, 0, 828, 0, 0, 0, 0, 0,
	0, 0, 0, 838, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 834, 0, 829, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 838,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 829, 0, 0, 0, 0, 836, 0, 0, 824,
	825, 826, 838, 823, 820, 821, 822, 814, 815, 816,
	817, 819, 0, 839, 0, 0, 0, 1637, 0, 0,
	0, 0, 836, 0, 0, 824, 825, 826, 0, 823,
	820, 821, 822, 814, 815, 816, 817, 819, 0, 839,
	0, 0, 0, 1636, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 836, 0, 0, 824, 825,
	826, 0, 823, 820, 821, 822, 814, 815, 816, 817,
	819, 0, 839, 0, 0, 811, 1545, 830, 831, 832,
	840, 841, 842, 0, 0, 0, 0, 0, 0, 0,
	833, 0, 0, 0, 0, 0, 0, 813, 0, 844,
	0, 811, 0, 830, 831, 832, 840, 841, 842, 0,
	0, 0, 0, 0, 0, 0, 833, 0, 812, 0,
	0, 0, 0, 813, 827, 844, 0, 0, 0, 0,
	0, 0, 0, 0, 811, 0, 830, 831, 832, 840,
	841, 842, 0, 0, 812, 0, 0, 0, 0, 833,
	827, 0, 0, 0, 0, 0, 813, 0, 844, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 818, 0, 0, 0, 0, 0, 812, 0, 0,
	0, 0, 0, 827, 0, 0, 0, 0, 837, 845,
	0, 0, 0, 0, 0, 0, 0, 818, 0, 0,
	0, 0, 843, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 835, 0, 837, 845, 0, 0, 828, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 843, 0,
	818, 0, 0, 0, 0, 0, 0, 0, 835, 0,
	834, 0, 0, 0, 828, 0, 0, 837, 845, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 843, 0, 0, 0, 0, 834, 0, 0, 0,
	0, 835, 0, 0, 0, 829, 0, 828, 0, 0,
	0, 0, 0, 0, 0, 0, 838, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 834,
	0, 829, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 838, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 829, 0, 0, 0, 0, 836,
	0, 0, 824, 825, 826, 838, 823, 820, 821, 822,
	814, 815, 816, 817, 819, 0, 839, 0, 0, 0,
	1479, 0, 0, 0, 0, 836, 0, 0, 824, 825,
	826, 0, 823, 820, 821, 822, 814, 815, 816, 817,
	819, 0, 839, 0, 0, 0, 1463, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 836, 0,
	0, 824, 825, 826, 0, 823, 820, 821, 822, 814,
	815, 816, 817, 819, 0, 839, 0, 0, 811, 1093,
	830, 831, 832, 840, 841, 842, 0, 0, 0, 0,
	0, 0, 0, 833, 0, 0, 0, 0, 0, 0,
	813, 0, 844, 0, 811, 0, 830, 831, 832, 840,
	841, 842, 0, 0, 0, 0, 0, 0, 0, 833,
	0, 812, 0, 0, 0, 0, 813, 827, 844, 0,
	0, 0, 0, 0, 0, 0, 0, 811, 0, 830,
	831, 832, 840, 841, 842, 0, 0, 812, 0, 0,
	0, 0, 833, 827, 0, 0, 0, 0, 0, 813,
	0, 844, 0, 811, 0, 830, 831, 832, 840, 841,
	842, 0, 0, 0, 818, 0, 0, 0, 833, 0,
	812, 0, 0, 1027, 0, 813, 827, 844, 0, 0,
	0, 837, 845, 0, 0, 0, 0, 0, 0, 0,
	818, 1826, 0, 0, 0, 843, 812, 0, 0, 0,
	0, 0, 827, 0, 0, 835, 0, 837, 845, 0,
	0, 828, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 843, 0, 818, 0, 1348, 0, 0, 1347, 1028,
	0, 835, 0, 834, 0, 0, 0, 828, 0, 0,
	837, 845, 0, 0, 0, 0, 0, 0, 0, 818,
	0, 0, 0, 0, 843, 0, 0, 0, 0, 834,
	0, 0, 0, 0, 835, 0, 837, 845, 829, 0,
	828, 0, 1825, 0, 0, 0, 0, 0, 0, 838,
	843, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	835, 0, 834, 0, 829, 0, 828, 0, 0, 0,
	0, 0, 0, 0, 0, 838, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 834, 0,
	0, 0, 0, 0, 0, 0, 0, 829, 0, 0,
	0, 0, 836, 0, 0, 824, 825, 826, 838, 823,
	820, 821, 822, 814, 815, 816, 817, 819, 0, 839,
	0, 1527, 0, 829, 0, 0, 0, 0, 836, 0,
	0, 824, 825, 826, 838, 823, 820, 821, 822, 814,
	815, 816, 817, 819, 0, 839, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 836, 0, 0, 824, 825, 826, 0, 823, 820,
	821, 822, 814, 815, 816, 817, 819, 0, 839, 0,
	0, 0, 0, 0, 0, 0, 0, 836, 0, 0,
	824, 825, 826, 0, 823, 820, 821, 822, 814, 815,
	816, 817, 819, 847, 839, 0, 0, 0, 0, 811,
	0, 830, 831, 832, 840, 841, 842, 0, 0, 0,
	0, 0, 0, 0, 833, 0, 0, 0, 846, 0,
	0, 813, 0, 844, 0, 811, 0, 830, 831, 832,
	840, 841, 842, 0, 0, 0, 0, 0, 0, 0,
	833, 0, 812, 0, 0, 0, 0, 813, 827, 844,
	0, 0, 0, 0, 0, 0, 0, 0, 811, 0,
	830, 831, 832, 840, 841, 842, 0, 0, 812, 0,
	0, 0, 0, 833, 827, 0, 0, 0, 0, 0,
	813, 0, 844, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 818, 0, 0, 0, 0,
	0, 812, 0, 0, 0, 0, 0, 827, 0, 0,
	0, 0, 837, 845, 0, 0, 0, 0, 0, 0,
	0, 818, 0, 0, 0, 0, 843, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 835, 0, 837, 845,
	0, 0, 828, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 843, 0, 818, 0, 0, 0, 0, 0,
	0, 0, 835, 0, 834, 0, 0, 0, 828, 0,
	0, 837, 845, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 843, 0, 0, 0, 0,
	834, 313, 0, 0, 0, 835, 0, 0, 0, 829,
	0, 828, 0, 0, 0, 0, 0, 0, 0, 0,
	838, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 834, 0, 829, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 838, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 829, 0,
	0, 0, 0, 836, 0, 0, 824, 825, 826, 838,
	823, 820, 821, 822, 814, 815, 816, 817, 819, 0,
	839, 0, 0, 0, 0, 0, 1473, 0, 0, 836,
	0, 0, 824, 825, 826, 0, 823, 820, 821, 822,
	814, 815, 816, 817, 819, 0, 839, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 836, 0, 0, 824, 825, 826, 0, 823,
	820, 821, 822, 814, 815, 816, 817, 819, 811, 839,
	830, 831, 832, 840, 841, 842, 0, 0, 0, 0,
	0, 0, 0, 833, 0, 0, 0, 0, 0, 0,
	813, 0, 844, 0, 811, 0, 830, 831, 832, 840,
	841, 842, 0, 0, 0, 0, 0, 0, 0, 833,
	0, 812, 0, 1349, 0, 0, 813, 827, 844, 0,
	0, 0, 0, 0, 0, 0, 0, 811, 0, 830,
	831, 832, 840, 841, 842, 0, 0, 812, 0, 0,
	0, 0, 833, 827, 0, 0, 0, 0, 0, 813,
	0, 844, 0, 811, 0, 830, 831, 832, 840, 841,
	842, 0, 0, 0, 818, 0, 0, 0, 833, 1354,
	812, 0, 1309, 0, 0, 813, 827, 844, 0, 0,
	0, 837, 845, 0, 0, 0, 0, 0, 0, 0,
	818, 0, 0, 0, 0, 843, 812, 0, 0, 0,
	0, 0, 827, 0, 0, 835, 0, 837, 845, 0,
	0, 828, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 843, 0, 818, 0, 0, 0, 0, 0, 0,
	0, 835, 0, 834, 0, 0, 0, 828, 0, 0,
	837, 845, 0, 0, 0, 0, 0, 0, 0, 818,
	0, 0, 0, 0, 843, 0, 0, 0, 0, 834,
	0, 0, 0, 0, 835, 0, 837, 845, 829, 0,
	828, 0, 0, 0, 0, 0, 0, 0, 0, 838,
	843, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	835, 0, 834, 0, 829, 0, 828, 0, 0, 0,
	0, 0, 0, 1315, 0, 838, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 834, 0,
	0, 0, 0, 0, 0, 0, 0, 829, 0, 0,
	0, 0, 836, 0, 0, 824, 825, 826, 838, 823,
	820, 821, 822, 814, 815, 816, 817, 819, 0, 839,
	0, 0, 0, 829, 0, 0, 0, 0, 836, 0,
	0, 824, 825, 826, 838, 823, 820, 821, 822, 814,
	815, 816, 817, 819, 1317, 839, 1334, 1335, 1336, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1457,
	0, 836, 0, 0, 824, 825, 826, 0, 823, 820,
	821, 822, 814, 815, 816, 817, 819, 0, 839, 0,
	0, 0, 0, 0, 0, 0, 0, 836, 0, 0,
	824, 825, 826, 1331, 823, 820, 821, 822, 814, 815,
	816, 817, 819, 811, 839, 830, 831, 832, 840, 841,
	842, 0, 0, 0, 0, 0, 0, 0, 833, 0,
	0, 0, 0, 0, 0, 813, 0, 844, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1322, 0, 0, 0, 0, 0, 812, 0, 0, 0,
	0, 0, 827, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1337, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1332, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 818,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 837, 845, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	843, 0, 0, 0, 609, 604, 626, 598, 617, 616,
	835, 0, 600, 599, 1333, 0, 828, 628, 627, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 834, 0,
	0, 0, 0, 0, 0, 0, 0, 622, 0, 614,
	613, 0, 0, 0, 0, 0, 0, 0, 612, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 829, 611, 0, 0, 0, 0, 0,
	0, 1328, 1329, 1330, 838, 1327, 1324, 1325, 1326, 1318,
	1319, 1320, 1321, 1323, 0, 0, 0, 0, 0, 0,
	605, 606, 607, 0, 625, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 836, 615, 0,
	824, 825, 826, 0, 823, 820, 821, 822, 814, 815,
	816, 817, 819, 0, 839, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 610, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 602, 0, 0, 0, 0, 0,
	0, 0, 608, 603, 0, 0, 0, 0, 0, 630,
	0, 0, 0, 0, 0, 0, 601, 0, 0, 623,
	624, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 629,
}
var sqlPact = [...]int{

	3631, -1000, 36, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 806, -1000, -1000, -1000, -1000, 608,
	789, 598, 15816, 15816, 15556, 1155, 1155, 17116, -1000, -1000,
	19976, -1000, 2619, 495, 499, 495, 495, 491, 17116, 570,
	767, 159, -1000, 594, 26, 19716, 15816, 1283, 34, 14516,
	299, 3631, 15296, 15816, 19456, 1127, 1012, 1002, 14516, 19196,
	18936, 18676, -1000, 10037, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 568, 319, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 316, -1000, 15036, -1000, 875, -1000,
	31, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 870,
	-1000, 15816, -1000, -1000, 18416, 18156, 302, 811, -1000, -1000,
	527, 379, 1312, -1000, 43, -1000, -1000, 1123, -1000, 857,
	1118, 1117, 1114, 1110, 1106, 1104, 377, 845, -1000, 520,
	811, -1000, 811, -1000, -1000, -1000, 544, 17116, -1000, 14516,
	-1000, 17896, 1037, 17636, -1000, 594, -1000, -1000, -1000, 894,
	1278, 1278, 1278, 1305, 141, 136, 159, 16, 15816, -1000,
	300, 16, 7032, 7032, -1000, -1000, 299, -1000, 340, 12689,
	42, -1000, 7578, -1000, 854, 1194, 659, 654, 1193, -124,
	14516, 15816, 15816, 606, 17376, -1000, 1192, 116, 1191, -1000,
	101, 1188, -1000, -2, -1000, -1000, -1000, -1000, -1000, -1000,
	299, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 14776, 1331, 23079, -1000, 8961,
	-1000, -1000, 12952, 876, 12952, -1000, -1000, 1330, -1000, 8961,
	-1000, 28, 27, 961, 982, 10580, 10310, 1242, 719, -1000,
	-1000, -1000, 40, 4484, 15816, 1136, 12952, 15816, 15816, 15816,
	15816, 15816, 15816, -1000, 953, -1000, 15816, -1000, 19, 17,
	-1000, 17116, -1000, 120, -1000, 426, 931, 16856, 1199, 928,
	-1000, 894, -1000, 754, 949, 8142, 8961, 159, -1000, -1000,
	159, 159, 8961, -1000, -1000, 15816, 16, 1328, 15816, 149,
	-1000, 22269, -1000, -1000, 8961, 8961, 8961, 8961, 8961, 698,
	-1000, -1000, -1000, 5319, -1000, -1000, 42, 298, 324, -1000,
	-1000, 297, 42, -1000, -1000, -1000, -1000, 296, 1424, 425,
	-1000, -1000, -1000, 8961, 384, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1134, 294, 292, -1000, -1000, -1000,
	-1000, 289, 276, 272, 269, 268, 266, 262, 261, 260,
	258, 257, 256, 255, 254, 688, -1000, 402, -1000, -1000,
	402, 402, -1000, 248, 248, 251, -1000, -1000, -1000, 248,
	-1000, -1000, -1000, 378, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 252, 149, -1000, -1000, -1000, 15816, 42, -1000, -1000,
	-1000, 8961, 4214, -11, -1000, 22973, -1000, 7, 753, -1000,
	13996, 1287, 1282, 1258, 14516, 542, 541, 15816, 15816, 390,
	96, 1324, 96, 12163, -1000, 15816, 15816, -1000, 15816, -1000,
	-1000, 15816, -1000, 15816, 15816, 188, 13476, 730, 1184, 26,
	-13, -1000, 1333, -1000, -1000, -1000, -1000, 95, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 251, 688, 248, 248, 248, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 378, -1000, -1000, 402, 402, 402, -1000,
	-1000, -15, 22973, 538, 11, 13214, 15816, -1000, 39, -1000,
	-1000, 1103, 468, -19, 678, 973, 782, -1000, -1000, -1000,
	-1000, 15, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1407, -1000, -1000, -1000, -1000, 1409, 15, -1000,
	-1000, -1000, -1000, -1000, 1423, -1000, -1000, -1000, 4484, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 15816, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 678, 973, -1000, -1000,
	14516, 13736, 26, 1180, 856, 925, -1000, -1000, 354, 1176,
	-1000, -1000, -1000, -1000, 22973, -1000, 22973, 622, 1016, -1000,
	1016, 14, -1000, 21983, -1000, 247, -21, -1000, 390, 7032,
	11900, 23079, 15816, 552, 8961, 8961, 8961, 8961, 8961, 8961,
	8961, 8961, 8961, 8961, 8961, 8961, 8961, 8961, 8961, 8961,
	8961, 8961, 8961, 8961, 8961, 8961, 992, 8961, 537, 8961,
	8961, 8961, 8961, 1013, 792, 235, 4484, -1000, 494, 494,
	494, 2722, 2722, 230, 32, 21614, 13, 42, -1000, -1000,
	6741, 6449, 42, 4754, -1000, 913, 1404, 399, 22973, 1144,
	1073, 243, 134, 130, 8961, 8961, 832, 8961, 9234, 8961,
	8961, 5592, 8961, 8961, 8961, 8961, 8961, 8961, -1000, 240,
	-1000, -1000, -1000, -1000, 1402, -1000, -1000, 1400, -1000, 550,
	549, 1398, 390, 129, -1000, 2925, -1000, -1000, 7578, -1000,
	730, 15816, 15816, 15816, -1000, -1000, 910, 16596, -1000, 23079,
	15816, -1000, 238, 237, 988, 972, 15816, 15816, 16336, 16076,
	15816, 755, 15816, 15816, 652, -1000, 635, 8961, 682, -1000,
	11373, 407, 15816, 647, 90, -1000, -1000, -1000, 353, 15816,
	-1000, -1000, -1000, 116, -1000, 101, -1000, -1000, 14516, -1000,
	-1000, -1000, -1000, -1000, -1000, 23079, 329, 327, -1000, 1396,
	536, -1000, 534, 532, 531, -1000, 236, -1000, 8961, 15816,
	13214, 11, 9, -1000, -1000, 15816, 973, -1000, -1000, -1000,
	-1000, 674, -1000, 667, -1000, 10850, -1000, -1000, -1000, 913,
	-1000, 1, -1000, -1000, -1000, -1000, 124, 8, -1000, -1000,
	-1000, -1000, -1000, 15816, 265, 15816, -1000, 15816, 15816, 1175,
	1421, 15816, -1000, -1000, -1000, 8961, -1000, -1000, -1000, 26,
	15816, -1000, 1071, -1000, -17, 1091, -152, 14256, -1000, 11110,
	-1000, -1000, 367, 684, 684, 525, 525, 525, 525, 619,
	619, 1779, 2374, 2223, 2223, 2223, 511, 907, 907, 2223,
	2223, 2223, 2722, 2178, 210, 8961, 8961, 529, 790, 235,
	210, 8961, 1369, 210, 210, 210, -1000, 851, -1000, -1000,
	-1000, 1101, 233, 9234, 9234, -1000, -1000, -1000, 5319, -1000,
	-1000, 232, 8961, -1000, 8961, -45, -86, -1000, -1000, -23,
	-1000, -1000, -7, 8961, 8961, 8961, 121, -1000, 106, 575,
	-1000, 8961, 700, 212, 211, 8961, -1000, -1000, 22693, 20500,
	105, 1100, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 103,
	22667, 100, 612, -1000, 9234, 9234, 9234, 5319, 206, 98,
	21957, -116, 22634, 7851, 7851, 7851, 97, 22608, 8961, -116,
	3586, 3349, 3299, -25, -27, -31, 1394, -40, 92, 366,
	355, 86, 1071, -1000, -1000, 8961, -1000, -1000, -1000, 524,
	517, 1174, -1000, 909, -1000, 891, 8961, 15816, 195, 194,
	734, -1000, 1173, 797, 1170, 797, -1000, 7, 749, -1000,
	-1000, 516, -1000, 7032, 22973, -1000, 636, 1260, -41, -1000,
	-1000, -1000, 7032, 390, 12163, 11900, 7578, -49, -1000, -1000,
	730, -1000, 436, 1392, 85, 915, 732, 662, 614, 1389,
	22973, 1, -1000, 1, -1000, -1000, -1000, -1000, -1000, -1000,
	15816, 1043, 13736, 190, 15816, 189, 349, 187, 15816, -1000,
	1199, -1000, 82, -1000, 1062, 1303, -1000, 11900, 809, 1007,
	1003, 11900, 1087, 743, 743, 743, -1000, 14256, 3932, -1000,
	-1000, 15816, 186, 11636, 80, 1091, 8961, 210, 210, 8961,
	9234, 9234, -1000, 210, -1000, -1000, -1000, -1000, 1098, 181,
	8961, 23079, 22914, 2286, -59, 6157, -1, 21581, -1000, -1000,
	324, -1000, 79, 7305, -1000, 22295, -6, -6, -1000, 1420,
	1158, -1000, 8961, 22328, -1000, 12426, 394, 747, 21555, 23079,
	23079, -1000, 8961, -1000, 1097, 8961, -1000, 23079, 9234, 9234,
	9234, 9234, 9234, 9234, 9234, 9234, 9234, 9234, 9234, 9234,
	9234, 9234, 9234, 9234, 9234, 9234, 9234, 963, 9234, 1365,
	1365, 1365, -4, 5865, -1000, 1094, 1097, 8961, 8961, 23079,
	77, 75, 71, -1000, 8961, -116, 8961, 8961, 8961, -1000,
	-1000, -1000, 69, -1000, 1375, -1000, -1000, -1000, -1000, 1062,
	21898, 15816, 15816, 15816, 1167, 1797, -1000, 21271, -60, 15816,
	15816, -1000, 997, 1082, 442, 15816, -1000, 15816, -1000, 15816,
	15816, 15816, 15816, -95, 7032, 209, 26, 15816, -95, 635,
	-1000, -9, -1000, 352, -1000, 165, 122, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 66, -1000, -1000, 1045, -1000,
	9774, 179, 15816, 13736, 26, 9774, 824, -1000, -1000, 388,
	8961, 8961, 1091, 573, 11900, 11900, 1417, 990, 11900, -1000,
	-1000, -1000, -1000, -1000, -1000, 987, 178, 15816, 14256, 677,
	210, 1047, 231, 8961, 23079, 3384, -61, 8961, 8961, -1000,
	-65, -1000, 8961, -1000, -1000, 1414, 8961, 64, 62, 60,
	-1000, -1000, 22973, 8961, -1000, -1000, 20236, 8961, 59, -1000,
	57, 56, 22973, 1094, 22973, -1000, 648, 648, 1365, 1365,
	1365, 1365, 1642, 1642, 1973, 1886, 1715, 1715, 1715, 2519,
	475, 475, 1715, 1715, 1715, 1096, 971, 177, 20843, 8961,
	-66, -1000, -1000, -1000, 22973, 22973, 55, -1000, -1000, -1000,
	-116, 3010, 21238, 21212, -1000, 54, 388, -1000, -1000, -1000,
	-1000, 15816, -1000, 15816, -1000, 15816, 15816, 1069, 901, -1000,
	-1000, 970, 175, 9234, 15816, -1000, 746, -67, -71, 898,
	-1000, 883, 8961, -1000, 23079, 797, 797, -1000, 515, 509,
	-1000, -95, 1205, 15816, 1257, -1000, -1000, -1000, 174, -1000,
	-1000, -1000, 695, -72, -1000, 164, 1270, 8961, -1000, -1000,
	170, 9774, -76, 53, -1000, -77, 15816, -1000, 15816, 22973,
	-116, 548, -1000, 1417, -1000, 168, 8961, 11900, -1000, -139,
	-1000, 351, -1000, 15816, -82, -1000, 8961, 8961, 3384, -84,
	-1000, 210, 210, -1000, 20928, -1000, 22295, -1000, -1000, -1000,
	22973, 686, -1000, 20895, -1000, -1000, -1000, -1000, 9234, 1086,
	167, 23079, 20869, -1000, -1000, 8961, -1000, -1000, -1000, -1000,
	-1000, 671, -1000, -1000, 15816, 906, -1000, -1000, 8961, 20843,
	160, 1043, 154, -1000, -1000, -1000, 661, -1000, -1000, 22973,
	1274, -1000, -1000, 15816, 15816, 513, -93, 15816, -1000, -1000,
	5046, 15816, 746, 9774, 1268, 42, 15816, 1268, 20585, 4754,
	-99, -1000, 1043, 746, 151, -109, -1000, 1322, 1412, -1000,
	15816, 22973, -1000, 987, -1000, 4484, -101, -1000, 210, 210,
	-1000, -1000, 52, 747, 1302, -1000, 3501, 9234, 23079, -105,
	-1000, 20559, -1000, -1000, 1165, 20526, 923, 15816, -1000, 15816,
	15816, 412, 15816, -1000, -1000, 600, -1000, 390, -1000, 148,
	1043, -1000, -1000, -1000, -1000, 1270, -7, 746, -1000, 1043,
	9774, 15816, 145, -1000, -111, -1000, -1000, -1000, -1000, 639,
	8961, 3501, -112, -1000, -1000, 1148, -1000, 774, 862, 51,
	-118, 143, -1000, 8961, -1000, 12163, -1000, 15816, -1000, 1268,
	49, 1043, -1000, -119, -1000, -1000, -1000, 45, 8688, 8688,
	-116, -1000, 15816, -1000, 805, 796, 589, -1000, -1000, -1000,
	-1000, -1000, 923, 15816, 22973, -107, -127, -1000, -1000, -1000,
	746, -1000, -1000, -1000, 9504, 920, 620, 21924, -1000, -1000,
	-1000, 1222, -1000, 420, 999, 999, 774, -131, -1000, 797,
	1043, 1337, -1000, -1000, -1000, -1000, -1000, -1000, 1352, -1000,
	-1000, 981, -1000, -1000, -1000, -1000, -1000, 8415, -1000, -1000,
	-1000, -1000,
}
var sqlPgo = [...]int{

	0, 1641, 1640, 1315, 124, 121, 1639, 1637, 1636, 1635,
	100, 120, 118, 125, 1634, 89, 1633, 1630, 1629, 95,
	1627, 1626, 1625, 73, 1624, 1621, 1620, 1619, 1618, 90,
	43, 173, 2320, 157, 1617, 1616, 1615, 14, 97, 68,
	1609, 2, 53, 94, 111, 1102, 40, 1607, 1603, 136,
	32, 22, 135, 99, 144, 116, 123, 1601, 1597, 1596,
	47, 1595, 5, 1594, 1593, 1592, 50, 15, 1591, 24,
	4, 1588, 1586, 140, 1585, 75, 102, 112, 21, 128,
	148, 1584, 62, 13, 77, 1582, 29, 1581, 42, 80,
	143, 1579, 54, 154, 66, 37, 52, 1577, 1575, 1573,
	1572, 78, 1569, 91, 84, 1567, 1565, 85, 1563, 138,
	133, 1561, 1560, 126, 1555, 1554, 1553, 697, 1552, 1550,
	525, 1549, 9, 46, 67, 6, 108, 106, 23, 1547,
	17, 1544, 1770, 645, 618, 1542, 61, 51, 82, 48,
	59, 26, 1541, 1540, 101, 1539, 1538, 1531, 1528, 1527,
	81, 1526, 76, 141, 44, 58, 96, 27, 25, 83,
	103, 145, 109, 1523, 1522, 115, 1521, 45, 1518, 1517,
	849, 130, 1516, 1506, 1504, 826, 731, 708, 28, 1502,
	1501, 158, 155, 1500, 1499, 113, 1496, 1495, 142, 192,
	19, 1494, 114, 1491, 92, 1490, 0, 55, 36, 1489,
	131, 79, 1488, 1486, 1484, 1480, 31, 3, 12, 8,
	10, 7, 30, 20, 1479, 1475, 134, 87, 1474, 151,
	1472, 1467, 39, 1463, 1462, 18, 1459, 16, 1455, 11,
	1, 1442, 137, 1438, 107, 1433, 1352, 1431, 139, 1430,
	1422, 1366, 86,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 4, 4, 39, 39, 38,
	38, 38, 38, 38, 38, 38, 38, 38, 38, 38,
	38, 38, 38, 38, 36, 36, 41, 41, 41, 40,
	40, 35, 35, 5, 5, 5, 5, 10, 11, 11,
	11, 11, 11, 11, 79, 79, 78, 78, 81, 81,
	12, 12, 13, 13, 13, 13, 13, 13, 13, 13,
	166, 166, 165, 14, 142, 142, 15, 15, 15, 15,
	16, 102, 102, 17, 17, 17, 17, 18, 22, 232,
	232, 232, 236, 236, 237, 237, 238, 238, 238, 238,
	238, 238, 238, 234, 234, 25, 25, 25, 25, 25,
	121, 117, 117, 119, 119, 119, 119, 44, 116, 116,
	116, 116, 118, 118, 118, 118, 189, 188, 188, 194,
	194, 194, 57, 57, 57, 57, 57, 58, 58, 58,
	187, 187, 187, 187, 195, 195, 195, 195, 195, 195,
	59, 59, 59, 193, 193, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 233, 233, 235, 235, 8, 8, 9, 9,
	60, 60, 61, 61, 124, 124, 124, 124, 62, 62,
	123, 204, 204, 205, 205, 205, 205, 205, 205, 206,
	206, 206, 206, 206, 206, 206, 202, 202, 203, 200,
	200, 201, 201, 201, 201, 239, 239, 122, 122, 65,
	65, 209, 209, 209, 209, 207, 207, 207, 207, 207,
	210, 208, 211, 211, 211, 211, 211, 153, 153, 153,
	28, 7, 7, 106, 106, 69, 69, 157, 157, 157,
	51, 51, 37, 37, 37, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 107, 107, 108, 108, 20, 24,
	27, 27, 27, 27, 27, 241, 241, 48, 48, 48,
	48, 49, 49, 120, 120, 120, 120, 120, 43, 6,
	6, 42, 42, 19, 19, 19, 19, 19, 54, 54,
	113, 113, 113, 115, 115, 114, 114, 114, 92, 92,
	29, 74, 74, 83, 83, 84, 84, 163, 85, 85,
	23, 23, 32, 32, 30, 30, 30, 30, 30, 30,
	31, 31, 33, 33, 33, 33, 33, 33, 33, 217,
	217, 217, 219, 219, 216, 218, 218, 240, 240, 93,
	93, 93, 64, 63, 63, 67, 67, 66, 68, 68,
	156, 90, 90, 90, 90, 109, 110, 110, 111, 111,
	112, 112, 89, 89, 139, 139, 34, 34, 73, 73,
	75, 75, 130, 130, 131, 131, 129, 129, 129, 158,
	158, 158, 158, 159, 159, 159, 159, 159, 159, 154,
	154, 154, 154, 155, 155, 164, 164, 96, 96, 96,
	96, 94, 94, 95, 95, 160, 160, 160, 160, 91,
	91, 161, 161, 161, 125, 125, 167, 167, 167, 72,
	72, 72, 168, 168, 168, 168, 168, 168, 168, 168,
	168, 168, 168, 168, 168, 169, 169, 169, 169, 171,
	171, 171, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 172, 172, 179, 179, 180,
	180, 181, 182, 173, 173, 174, 174, 175, 176, 183,
	183, 183, 183, 185, 185, 177, 177, 177, 177, 177,
	178, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 104, 104, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 212, 212, 212, 212,
	212, 212, 212, 214, 214, 215, 215, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 213, 213,
	213, 213, 213, 220, 220, 221, 221, 222, 222, 223,
	223, 225, 226, 226, 226, 227, 231, 231, 224, 224,
	228, 228, 228, 229, 229, 230, 230, 230, 230, 230,
	144, 144, 144, 145, 145, 146, 80, 80, 141, 141,
	140, 140, 140, 143, 143, 97, 184, 184, 184, 184,
	184, 184, 184, 98, 98, 105, 99, 99, 100, 100,
	100, 100, 100, 100, 136, 137, 101, 101, 101, 138,
	138, 147, 151, 151, 150, 149, 149, 148, 148, 128,
	128, 128, 128, 127, 126, 86, 86, 242, 242, 152,
	152, 87, 87, 88, 82, 82, 162, 162, 162, 162,
	76, 76, 56, 56, 77, 77, 52, 52, 55, 53,
	53, 53, 53, 70, 70, 71, 71, 50, 50, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	186, 186, 186, 45, 45, 45, 46, 46, 47, 47,
	191, 191, 191, 192, 192, 192, 192, 190, 190, 190,
	190, 190, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 4, 6, 1, 3, 2,
	5, 3, 6, 4, 6, 6, 6, 4, 8, 2,
	3, 3, 6, 4, 3, 2, 1, 1, 0, 2,
	0, 2, 0, 1, 1, 1, 1, 6, 3, 5,
	4, 6, 4, 6, 1, 3, 1, 2, 2, 3,
	2, 5, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 1, 5, 3, 0, 1, 1, 1, 1,
	3, 3, 0, 2, 3, 2, 3, 6, 6, 1,
	2, 2, 1, 1, 1, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 2, 3, 6, 3, 1,
	5, 2, 1, 1, 1, 3, 3, 2, 3, 3,
	3, 3, 1, 3, 3, 2, 1, 1, 3, 1,
	1, 1, 2, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 1, 1, 1,
	1, 1, 0, 1, 1, 2, 2, 4, 2, 4,
	4, 4, 4, 4, 4, 4, 2, 3, 4, 3,
	2, 4, 2, 0, 2, 0, 7, 10, 5, 8,
	1, 0, 1, 3, 1, 1, 1, 1, 8, 0,
	3, 2, 0, 3, 1, 2, 2, 3, 6, 2,
	1, 1, 2, 4, 2, 5, 7, 8, 5, 3,
	1, 4, 6, 5, 10, 1, 1, 4, 0, 3,
	0, 2, 2, 2, 0, 1, 1, 2, 2, 0,
	3, 3, 2, 1, 1, 2, 2, 1, 2, 1,
	4, 11, 14, 1, 0, 1, 3, 3, 3, 5,
	2, 0, 1, 1, 0, 6, 6, 8, 6, 8,
	8, 10, 8, 10, 1, 0, 2, 0, 2, 2,
	3, 3, 2, 2, 2, 1, 0, 1, 3, 2,
	0, 2, 1, 1, 1, 3, 3, 0, 3, 4,
	7, 3, 0, 6, 6, 8, 5, 7, 1, 3,
	1, 4, 2, 8, 5, 4, 3, 0, 2, 0,
	8, 2, 0, 1, 3, 1, 1, 3, 5, 5,
	1, 1, 3, 3, 1, 2, 3, 2, 3, 4,
	1, 1, 8, 8, 1, 2, 4, 4, 4, 2,
	2, 3, 1, 3, 6, 1, 0, 1, 0, 1,
	1, 0, 1, 1, 0, 1, 0, 3, 1, 3,
	2, 2, 2, 1, 1, 2, 2, 3, 1, 1,
	1, 1, 3, 0, 2, 0, 2, 3, 3, 0,
	1, 3, 3, 1, 1, 3, 2, 4, 0, 3,
	2, 1, 4, 3, 4, 5, 4, 5, 4, 5,
	2, 4, 1, 1, 0, 5, 0, 2, 2, 2,
	1, 1, 0, 4, 2, 1, 2, 2, 4, 1,
	3, 1, 2, 3, 2, 0, 2, 5, 2, 3,
	4, 0, 1, 1, 1, 1, 2, 4, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	5, 0, 1, 1, 1, 1, 1, 1, 2, 2,
	2, 2, 2, 1, 1, 3, 0, 1, 1, 1,
	1, 5, 2, 1, 1, 1, 1, 4, 1, 2,
	2, 1, 1, 1, 0, 1, 1, 4, 1, 4,
	1, 1, 1, 1, 1, 1, 1, 3, 3, 3,
	3, 3, 3, 3, 0, 1, 4, 1, 3, 3,
	5, 2, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 2, 3, 4, 3,
	4, 4, 5, 3, 3, 3, 3, 3, 4, 3,
	3, 4, 3, 4, 3, 4, 5, 6, 6, 7,
	6, 7, 6, 7, 3, 4, 1, 3, 2, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	5, 6, 6, 7, 1, 1, 1, 3, 1, 1,
	1, 2, 2, 2, 1, 1, 3, 5, 6, 8,
	6, 6, 4, 4, 1, 1, 1, 5, 1, 3,
	1, 3, 1, 1, 1, 1, 6, 6, 4, 4,
	4, 4, 6, 5, 5, 5, 4, 8, 6, 6,
	4, 4, 4, 5, 0, 5, 0, 2, 0, 1,
	3, 3, 2, 2, 0, 6, 1, 0, 3, 0,
	2, 2, 0, 1, 4, 2, 2, 2, 2, 2,
	4, 3, 5, 4, 3, 5, 1, 3, 1, 3,
	3, 3, 2, 1, 3, 3, 1, 1, 1, 1,
	1, 1, 1, 4, 3, 2, 3, 0, 3, 3,
	2, 2, 1, 0, 2, 2, 3, 2, 1, 1,
	3, 5, 1, 2, 4, 2, 0, 1, 0, 1,
	1, 3, 5, 2, 2, 1, 2, 1, 0, 1,
	1, 1, 3, 3, 1, 3, 3, 2, 1, 1,
	1, 3, 1, 3, 1, 3, 1, 2, 3, 1,
	1, 2, 2, 1, 3, 3, 0, 1, 2, 1,
	1, 1, 1, 6, 2, 3, 5, 1, 1, 1,
	1, 2, 2, 1, 1, 1, 1, 0, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -10, -11, -12, -14,
	-16, -17, -18, -19, -21, -22, -24, -23, -25, -26,
	-27, -20, -28, -29, 22, -6, -7, -8, -9, -218,
	90, 98, 190, 97, 83, 113, 204, 211, -30, -32,
	219, -121, 220, 33, 228, 57, 93, 206, 201, 248,
	64, -217, -33, -31, 294, 269, 275, 214, -34, 235,
	262, 297, 235, 76, 126, 85, 130, 256, 255, 76,
	126, 235, -13, 294, -23, -5, -11, -4, -19, -29,
	-10, -12, 22, -45, 4, -196, -198, 19, 20, 22,
	32, 33, 38, 42, 45, 56, 57, 58, 60, 62,
	63, 66, 67, 74, 75, 76, 77, 79, 83, 85,
	89, 90, 92, 97, 98, 103, 104, 107, 109, 114,
	119, 120, 127, 130, 125, 138, 140, 141, 146, 149,
	152, 154, 155, 156, 157, 158, 160, 161, 163, 165,
	162, 168, 170, 171, 177, 180, 183, 184, 185, 188,
	190, 192, 193, 194, 196, 197, 201, 199, 200, 202,
	204, 206, 207, 209, 211, 212, 213, 216, 217, 219,
	220, 222, 225, 227, 228, 231, 229, 234, 236, 237,
	244, 248, 249, 250, 251, 254, 255, 256, 259, 260,
	261, 265, 270, 271, 272, 273, 27, 34, 35, 36,
	37, 39, 40, 43, 44, 48, 49, 50, 52, 78,
	80, 81, 96, 99, 105, 115, 117, 121, 122, 131,
	132, 133, 135, 144, 167, 169, 178, 182, 187, 189,
	195, 208, 215, 223, 224, 230, 232, 239, 240, 241,
	245, 246, 262, 263, -45, -45, 190, 21, -236, 21,
	-237, -238, 64, 90, 113, 214, 130, 85, 255, -236,
	-49, 211, -45, -117, 149, 217, 208, 244, -118, -116,
	-189, 239, 158, -78, -45, 4, 76, 56, 77, 114,
	126, 127, 61, 62, 141, 236, 239, 244, 21, 64,
	-241, 244, 244, -241, -241, -48, 244, 242, -49, -240,
	235, 235, -106, 76, 253, -31, -33, -32, -66, -67,
	252, 134, 95, 176, -30, -32, -217, -219, 196, -216,
	-45, -219, -63, -64, 21, 87, 298, -160, -52, 174,
	-45, -88, 294, -3, -160, 121, -45, -55, 121, -52,
	111, 136, 136, -161, -160, -45, 121, -56, 121, -55,
	-79, 121, -78, -166, -165, -192, 4, -196, -198, -197,
	262, 54, 65, 112, 129, 123, 137, 139, 145, 147,
	159, 179, 181, 205, 221, 235, -142, 294, -102, 294,
	-45, 21, 173, 298, 173, -45, -117, 50, -117, 294,
	-119, -43, -44, 138, 192, 242, 279, 111, 273, -59,
	5, 82, -81, 296, 111, -233, 173, 111, 111, 111,
	111, 111, 111, 273, 138, 192, 235, -120, -43, -44,
	-120, 242, -49, -91, -160, -78, 121, 126, -45, 121,
	-66, -67, -90, -109, -110, 148, 172, -93, 21, 87,
	-93, -93, 42, 295, 295, 298, -219, -71, 294, -82,
	-162, -132, 287, -134, 285, 286, 291, 164, 274, -144,
	-52, -135, 9, 294, -147, -214, -32, 96, 28, -145,
	-146, 208, -45, 7, 8, 5, 6, -50, -169, -178,
	247, 100, 166, 46, -212, -213, 4, -196, -191, -170,
	-180, -174, -177, 135, 54, 69, 72, 70, 73, 218,
	257, 47, 27, 99, 182, 187, 232, 245, 246, 121,
	167, 122, 52, 115, 144, 89, 35, 37, 39, 40,
	48, 49, 78, 80, 81, 105, 131, 132, 133, 169,
	195, 223, 230, 240, 241, 263, -197, -181, -182, -175,
	-176, -183, -82, -88, 287, -52, 294, -86, -128, -127,
	-126, 292, 296, -87, -152, -132, 82, -39, 199, -38,
	20, 22, 90, 260, 96, 199, 199, 96, 299, -161,
	-54, -52, -54, 219, -45, 29, 96, -41, 298, 45,
	202, 96, -41, 298, 96, 295, 298, -160, 121, 29,
	-141, -167, -168, -170, -179, -173, -177, -178, 38, 44,
	43, 237, 215, 224, 36, 131, 132, 133, 223, 35,
	195, 105, 89, 81, 80, 169, 40, 39, -181, -182,
	-175, -176, 78, 240, 241, 135, 37, 49, 48, 263,
	230, -80, -132, -232, -77, 235, 76, -53, -45, 287,
	-238, -232, 29, -80, 298, 298, 146, -58, 152, 163,
	119, -188, 82, -194, -187, -153, 9, 247, 100, 173,
	-193, 8, 286, -186, -192, 5, 7, 285, -188, 82,
	67, -195, 5, 4, -178, -153, 82, 149, 296, -190,
	4, -196, -198, -197, -199, 21, 23, 24, 25, 26,
	28, 29, 30, 31, 41, 46, 47, 51, 53, 55,
	61, 64, 68, 69, 70, 71, 72, 73, 82, 84,
	86, 87, 88, 91, 93, 95, 100, 101, 102, 108,
	110, 111, 113, 116, 118, 124, 126, 128, 134, 136,
	142, 143, 148, 150, 151, 164, 166, 172, 173, 174,
	175, 176, 186, 191, 198, 203, 214, 218, 226, 233,
	235, 238, 242, 243, 247, 252, 253, 257, 258, 264,
	266, 267, 268, 269, -189, -235, 108, -232, -189, -189,
	-189, -189, -189, -45, 146, -189, 298, 298, -49, -41,
	298, 294, 29, 164, -46, 121, -45, -42, 92, 164,
	-90, -110, -109, -111, -132, 21, -132, -134, -31, -31,
	-31, -68, -156, -132, -216, 29, -70, -45, -73, 298,
	111, 10, 53, 32, 285, 286, 287, 288, 106, 289,
	282, 283, 284, 281, 277, 278, 279, 59, 153, 210,
	12, 13, 14, 25, 175, 147, 274, 123, 221, 291,
	15, 16, 17, 137, 34, 124, 29, 4, -132, -132,
	-132, -132, -132, 181, -32, -132, -80, -86, -32, -140,
	292, 294, -86, 294, 5, 5, 294, -148, -132, -220,
	270, 108, 294, 294, 294, 294, 294, 294, 294, 294,
	294, 294, 294, 294, 294, 294, 294, 294, 189, -185,
	265, -185, -185, -171, 294, -171, -172, 294, -171, 271,
	275, 294, -73, -52, -128, -132, -190, 287, 298, 295,
	298, 242, -107, 61, 55, -123, 121, 55, -200, -45,
	61, -201, 51, 253, 191, 110, -107, 61, -107, 61,
	61, -160, 242, 242, -55, -45, -125, 267, -113, -23,
	294, 82, 29, -113, -83, -84, -163, -85, -52, 294,
	-45, -45, -55, -56, -78, -79, -13, -165, 96, -15,
	-23, -19, -29, -10, 295, 298, -72, 28, -103, 294,
	272, 156, 79, 120, 155, -104, 213, 295, 298, 242,
	298, -77, -70, -127, -126, 111, 244, 295, -44, -43,
	-57, 194, 225, 200, 216, 298, 8, 7, 7, 5,
	-190, -234, -45, -44, -43, -160, -60, -61, -124, -123,
	-202, -203, -200, 126, 253, 101, -23, 96, 173, 164,
	279, 96, -112, 208, 209, 298, -37, 30, 86, 294,
	298, 295, -125, -162, -75, -158, -160, -32, -159, 294,
	-167, -78, 239, -132, -132, -132, -132, -132, -132, -132,
	-132, -132, -132, -132, -132, -132, -132, -132, -132, -132,
	-132, -132, -132, -132, -132, 147, 123, 221, 34, 124,
	-132, 242, -132, -132, -132, -132, 166, 164, 247, 100,
	254, 87, 170, -242, 233, 31, -138, -32, 294, -190,
	-144, 208, 294, 295, 298, -80, -143, 293, -140, -80,
	295, 295, -80, 264, 21, 87, 287, -103, 7, -151,
	-150, 266, -221, 103, 116, 294, 295, 295, -132, -132,
	-97, -184, 4, 272, 156, 79, 120, 155, 213, -98,
	-132, -99, -133, -134, 285, 286, 291, 294, 208, -100,
	-132, -80, -132, 41, 143, 243, -101, -132, 111, -80,
	-132, -132, -132, -80, -80, -80, 294, 7, 7, 239,
	239, 7, -125, 295, 293, 302, -152, -38, -52, -45,
	-45, 164, -123, 121, -167, -45, 294, 294, 140, 140,
	-45, -45, 121, -45, 121, -45, -45, -39, 199, -45,
	-45, 199, -92, 203, -132, -92, -115, 173, -76, -52,
	262, -45, 203, -74, 298, 111, 279, -76, -41, -41,
	-160, -167, 292, 292, 7, 242, 242, 242, 242, 294,
	-132, -234, -53, -234, -43, 251, 58, 194, -194, -103,
	298, 295, 298, -46, 126, -46, -78, -52, 96, 5,
	-45, -156, -15, -45, -89, 116, -164, 298, 276, 65,
	-96, 139, 159, 112, 145, 205, 129, -129, 299, -155,
	-154, 29, -45, -32, -159, -158, 273, -132, -132, 242,
	-242, 233, -138, -132, 166, 247, 100, 254, 87, 170,
	111, 294, -133, -133, -80, 294, -80, -132, 293, 293,
	298, 295, -67, 298, -66, -132, -80, -80, 295, 295,
	-149, -150, 91, -132, -226, 180, 294, 294, -132, 29,
	298, 295, 111, 295, -105, 186, 295, 10, 285, 286,
	287, 288, 106, 289, 282, 283, 284, 281, 277, 278,
	279, 59, 153, 210, 12, 13, 14, 137, 124, -133,
	-133, -133, -80, 294, 295, -136, -137, 111, 108, 29,
	-101, -101, -101, 295, 111, -80, 298, 298, 298, 295,
	295, 295, 7, 295, 298, 295, 273, 273, 295, -89,
	-132, 242, 242, 96, 164, -204, -201, -132, -70, 294,
	294, -36, 90, 219, -108, 96, -41, 96, -41, 242,
	-107, 61, 242, -82, 203, 60, 295, 298, -82, -125,
	-84, -75, -152, 295, 293, 7, 7, 295, 156, 120,
	155, -104, 155, -104, -104, 7, -45, -62, 125, -124,
	294, -46, 294, 294, 29, 294, -45, -42, 295, -139,
	118, 42, -158, 170, 139, 139, -158, -96, 139, -94,
	179, -94, -94, -155, -190, 300, -45, 294, 295, -132,
	-132, -133, -133, 111, 294, -132, -141, 25, 25, 295,
	-80, 295, 298, 295, -140, 295, 264, -67, -67, -67,
	5, 93, -132, 238, -227, -45, 294, 267, -66, 295,
	-167, -167, -132, -136, -132, -167, -133, -133, -133, -133,
	-133, -133, -133, -133, -133, -133, -133, -133, -133, -133,
	-133, -133, -133, -133, -133, 87, 164, 170, -133, 298,
	-80, 295, -137, -136, -132, -132, -167, 295, 295, 295,
	-80, -132, -132, -132, 295, 7, -139, 293, -45, -45,
	-123, 96, -205, 61, -206, 53, 101, 64, 164, 166,
	253, 191, 51, 82, 198, 295, 295, -70, -70, 164,
	82, 164, 82, 75, 249, -45, -45, -52, -45, -45,
	-45, -82, -114, 294, 173, -23, -52, -92, 279, 293,
	293, 295, 124, -69, -157, -45, -215, 294, -212, -213,
	-50, 294, -70, -60, -23, -69, 173, -222, 268, -132,
	-80, 234, -158, -158, -95, 258, 173, 139, -158, -131,
	-130, 109, 162, 294, -70, -154, 25, 25, -132, -141,
	295, -132, -132, 295, -132, 5, -132, 295, 295, 295,
	-132, -231, -45, -132, 295, 295, 295, -137, 111, 87,
	170, 294, -132, 295, 295, 298, 295, 295, 295, -222,
	-123, -45, -78, -45, 101, 121, 166, 140, 294, -133,
	-52, -122, -239, 63, 231, 295, 295, 166, 166, -132,
	-167, -41, -41, 242, 242, 88, -70, 61, -88, -32,
	294, 183, 295, 298, -51, -86, 53, -51, -132, 294,
	-69, 295, 295, 295, -52, -223, -225, -45, 239, -95,
	294, -132, -158, 298, 301, 279, -70, 295, -132, -132,
	295, 295, -67, -224, 185, 295, -133, 111, 294, -141,
	295, -132, -206, -46, 164, -132, -47, 294, -62, 294,
	198, -40, 53, -45, -45, 255, 165, 295, -45, -45,
	-122, -157, -37, -78, -37, 295, -80, 295, -62, -122,
	294, 298, 29, 5, -70, -130, -190, 295, 295, -67,
	42, -133, -141, 295, 295, 96, 295, -209, 154, -45,
	-70, -52, -35, 258, -78, 219, -125, 294, -62, -51,
	-67, -122, -62, -69, -225, -227, 295, -228, 193, 209,
	-80, 295, 101, -207, -210, -208, 173, 112, 184, 222,
	295, 295, -65, 294, -132, -83, -70, -37, 295, -62,
	295, 295, -229, -230, 34, 250, 67, -132, -229, -45,
	-208, 173, -210, 173, 255, 85, -209, -70, -125, 295,
	-122, -230, 188, 107, 208, 188, 107, -211, 161, 202,
	45, 219, -211, -207, 295, -41, -62, 25, 19, 166,
	82, -230,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 0, 53, 54, 55, 56, 0,
	0, 356, 0, 0, 0, 0, 0, 0, 330, -2,
	0, 119, 0, 286, 0, 286, 286, 290, 0, 358,
	254, 355, -2, 366, 0, 0, 0, 364, 344, 0,
	0, -2, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 70, 0, 72, 73, 74, 75, 76, 77,
	78, 79, 0, 85, 783, 784, 785, 802, 803, 804,
	805, 806, 807, 808, 809, 810, 811, 812, 813, 814,
	815, 816, 817, 818, 819, 820, 821, 822, 823, 824,
	825, 826, 827, 828, 829, 830, 831, 832, 833, 834,
	835, 836, 837, 838, 839, 840, 841, 842, 843, 844,
	845, 846, 847, 848, 849, 850, 851, 852, 853, 854,
	855, 856, 857, 858, 859, 860, 861, 862, 863, 864,
	865, 866, 867, 868, 869, 870, 871, 872, 873, 874,
	875, 876, 877, 878, 879, 880, 881, 882, 883, 884,
	885, 886, 887, 888, 889, 890, 891, 892, 893, 894,
	895, 896, 897, 898, 899, 900, 901, 902, 903, 904,
	905, 906, 907, 908, 909, 910, 911, 912, 913, 914,
	915, 916, 917, 918, 919, 920, 921, 922, 923, 924,
	925, 926, 927, 928, 929, 930, 931, 932, 933, 934,
	935, 936, 937, 938, 939, 940, 941, 942, 943, 944,
	945, 946, 947, 948, 949, 950, 951, 952, 953, 954,
	955, 956, 957, 958, 92, 93, 865, 95, 0, 102,
	103, 104, 106, 107, 108, 109, 110, 111, 112, 0,
	279, 879, 292, 115, 844, 883, 946, 895, 122, 132,
	0, 952, -2, 136, 66, 165, 166, 0, 168, 183,
	0, 0, 0, 0, 0, 176, 0, 0, 180, 0,
	297, 285, 297, 282, 283, 284, 287, 0, 278, 0,
	357, 0, 0, 0, 253, -2, 340, 341, -2, 0,
	361, 361, 361, 0, 0, 341, 0, 349, 869, 352,
	766, 350, 0, 0, 363, 362, 0, 345, 425, 0,
	756, 386, 0, 2, 0, 932, 0, 0, 932, 0,
	0, 0, 0, 0, 431, 58, 932, 48, 932, 752,
	48, 932, 64, 0, 80, 82, 793, 794, 795, 796,
	957, 959, 960, 961, 962, 963, 964, 965, 966, 967,
	968, 969, 970, 971, 972, 0, 0, 0, 90, 0,
	94, 96, 0, 0, 0, 291, 116, 922, 118, 0,
	121, 123, 124, 0, 0, 0, 0, 0, 0, 135,
	160, 161, 67, 0, 0, 185, 0, 0, 0, 0,
	0, 0, 0, 177, 0, 179, 0, 280, 293, 294,
	281, 0, 289, 48, 429, 0, 932, 787, 302, 932,
	-2, 0, 336, 373, 374, 0, 0, 0, 359, 360,
	0, 0, 0, 332, 333, 0, 351, 0, 0, 389,
	744, 748, 749, 517, 0, 0, 0, 0, 0, 0,
	604, 605, 606, 0, 608, 609, 610, 927, 0, 614,
	615, 946, 756, 769, 770, 771, 772, 0, 0, 0,
	777, 778, 779, 728, 654, 624, -2, -2, 767, 455,
	456, 457, 458, -2, 959, 628, 630, 632, 633, 634,
	635, 0, 911, 928, 942, 943, 951, 955, 956, 932,
	939, 933, 923, 930, 938, 825, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, 792, 479, 480, 485,
	486, 488, 389, 387, 426, 427, 0, 757, 735, 729,
	730, 0, 0, 0, 741, 739, 740, 25, 275, 27,
	0, 275, 275, 0, 0, 0, 0, 0, 0, 435,
	0, 308, 0, 0, 432, 0, 0, 60, 0, 46,
	47, 0, 62, 0, 0, 356, 0, 0, 932, 356,
	0, 688, 441, 442, 443, 444, 445, 514, 448, 449,
	450, 451, 452, 453, 454, 462, 463, 464, 465, 466,
	467, 476, 0, 461, 461, 461, 473, 474, 477, 478,
	483, 484, 495, 496, 498, 500, 494, 494, 494, 491,
	492, 0, 686, 0, 99, 0, 820, 754, 759, 760,
	105, 0, 0, 0, 0, 0, 0, 127, 147, 148,
	149, 128, 130, 137, 139, 140, 141, 150, 151, 152,
	153, 247, 0, 249, 163, 164, 780, 0, 129, 131,
	133, 134, 154, 155, 0, 157, 158, 159, 0, 68,
	797, 798, 799, 800, 801, 973, 974, 975, 976, 977,
	978, 979, 980, 981, 982, 983, 984, 985, 986, 987,
	988, 989, 990, 991, 992, 993, 994, 995, 996, 997,
	998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007,
	1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017,
	1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027,
	1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037,
	1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047,
	1048, 1049, 1050, 1051, 167, 169, 0, 182, 170, 171,
	172, 173, 174, 175, 178, 181, 0, 0, 288, 250,
	0, 191, 0, 0, 0, 932, 786, 299, 0, 0,
	339, 371, 372, 375, 378, 379, 376, 517, 346, 347,
	348, 367, 368, 264, 353, 0, 0, 763, 435, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 738, 0, 0, 747, 521, 522,
	523, 545, 546, 0, -2, 686, 0, 611, 612, 613,
	0, 0, -2, 0, 774, 514, 0, 0, 727, 656,
	0, 0, 0, 0, 0, 0, 0, 0, 707, 713,
	0, 0, 0, 0, 0, 0, 0, 0, 469, 482,
	493, 490, 489, 471, 0, 470, 468, 0, 472, 0,
	0, 0, 435, 0, 736, 0, 733, 734, 0, 743,
	0, 0, 0, 0, 274, 29, 932, 0, 39, 0,
	0, 220, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 758, 319, 0, 319, 310,
	0, 0, 0, 306, 322, 323, 325, 326, 0, 0,
	433, 59, 753, 48, 65, 48, 71, 81, 0, 83,
	86, 87, 88, 89, 84, 0, 436, 438, 446, 0,
	501, 502, 503, 504, 505, 506, 515, 91, 0, 0,
	0, 100, 101, 761, 762, 0, 0, 120, 125, 126,
	298, 0, 144, 0, 146, 0, 248, 782, 781, 514,
	69, 184, 113, 295, 296, 430, 0, 190, 192, 194,
	195, 196, 197, 787, 0, 787, 188, 0, 0, 0,
	0, 0, 377, 380, 381, 0, 370, 262, 263, 356,
	0, 765, 383, 745, 416, 390, 398, 414, 401, 0,
	518, 519, 0, 524, 525, 526, 527, 528, 529, 530,
	531, 532, 533, -2, -2, -2, 537, 538, 539, -2,
	-2, -2, 543, 544, -2, 0, 0, 0, 738, 0,
	-2, 0, 553, -2, -2, -2, 557, 0, 560, 562,
	564, 0, 0, 0, 0, 737, 574, 719, 0, 746,
	559, 0, 0, 607, 0, 0, 0, 692, 693, 0,
	-2, 616, 366, 0, 0, 0, 0, 775, 0, 726,
	722, 0, 664, 0, 0, 0, 629, 631, 0, 0,
	0, 0, 696, 697, 698, 699, 700, 701, 702, 0,
	0, 0, 0, 576, 0, 0, 0, 0, 946, 0,
	686, 712, 0, 0, 0, 0, 0, 686, 0, 718,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 383, 428, 731, 0, 742, 28, 266, 0,
	0, 0, 31, 932, 202, 0, 0, 0, 0, 0,
	277, 40, 932, 48, 932, 48, 41, 26, 275, 265,
	268, 0, 57, 0, 434, 303, 304, 0, 0, 750,
	312, 309, 0, 435, 0, 0, 0, 0, 61, 63,
	0, 689, 0, 0, 0, 0, 0, 0, 0, 0,
	687, 97, 755, 98, 117, 142, 143, 145, 138, 156,
	0, 199, 0, 0, 787, 0, 0, 0, 0, 301,
	302, 369, 0, 764, 385, 0, 388, 0, 0, 0,
	0, 0, 0, 422, 422, 422, 420, 414, 0, 400,
	413, 0, 412, -2, 401, 0, 0, -2, -2, 0,
	0, 0, 575, -2, 558, 561, 563, 565, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 687, 690, 691,
	0, -2, 0, 0, 365, 366, 366, 366, 622, 0,
	0, 723, 0, 0, 623, 0, 0, 0, 0, 0,
	0, 638, 0, 639, 0, 0, 640, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 578,
	579, 580, 0, 0, 641, 710, 711, 0, 0, 0,
	0, 0, 0, 646, 0, 717, 0, 0, 0, 650,
	651, 652, 0, 459, 0, 475, 497, 499, 487, 385,
	0, 0, 0, 0, 0, 200, 219, 0, 0, 0,
	0, 33, 0, 0, 0, 0, 37, 0, 43, 0,
	0, 0, 0, 318, 0, 317, 0, 0, 307, 319,
	324, 321, 327, 0, 439, 0, 0, 447, 507, 508,
	509, 510, 511, 512, 513, 0, 114, 186, 0, 193,
	0, 0, 0, 191, 0, 0, 0, 300, 354, 658,
	0, 0, 391, 0, 0, 0, 0, 0, 0, 417,
	421, 418, 419, 399, 396, 0, 410, 0, 403, 520,
	-2, 0, 0, 0, 0, -2, 0, 0, 0, 720,
	0, 681, 0, -2, 694, 617, 0, 0, 0, 0,
	776, 721, 725, 0, 662, 663, 667, 0, 0, 627,
	0, 0, 695, 704, 705, 577, 581, 582, 583, 584,
	585, 586, 587, 588, 589, 590, -2, -2, -2, 594,
	595, 596, -2, -2, -2, 0, 0, 0, 706, 0,
	0, 684, 708, 709, 714, 715, 0, 643, 644, 645,
	716, 0, 0, 0, 481, 0, 658, 732, 270, 272,
	30, 0, 201, 0, 204, 0, 0, 0, 0, 210,
	211, 0, 0, 0, 0, 221, 228, 0, 0, 0,
	45, 0, 0, 276, 0, 48, 48, 267, 0, 0,
	269, 305, 0, 0, 0, 311, 751, 320, 0, 440,
	437, 516, 0, 0, 255, 261, 261, 0, 625, 626,
	0, 0, 0, 0, 189, 0, 0, 342, 0, 384,
	382, 0, 404, 0, 406, 0, 0, 0, 408, 0,
	394, 0, 393, 0, 0, 402, 0, 0, -2, 0,
	568, -2, -2, 680, 687, 773, 366, 618, 620, 621,
	724, 669, 666, 0, 653, 636, 637, 703, 0, 0,
	0, 0, 687, 683, 642, 0, 648, 649, 460, 343,
	32, 0, 205, 206, 787, 0, 209, 212, 0, 214,
	789, 199, 0, 225, 226, 223, 0, 34, 35, 44,
	50, 36, 42, 0, 0, 0, 0, 0, 328, 329,
	0, 0, 228, 0, 264, 768, 0, 264, 0, 0,
	0, 218, 199, 228, 0, 657, 659, 0, 0, 405,
	0, 424, 407, 0, 397, 0, 0, 411, -2, -2,
	569, 682, 0, 366, 0, 655, -2, 0, 0, 0,
	685, 0, 203, 207, 0, 0, 234, 0, 222, 0,
	0, 52, 0, 271, 273, 0, 314, 435, 316, 0,
	199, 256, 257, 260, 258, 261, 366, 228, 187, 199,
	0, 0, 0, 415, 0, 395, 392, 409, 619, 672,
	0, -2, 0, 602, 647, 0, 213, 239, 0, 0,
	0, 230, 38, 0, 49, 0, 315, 0, 216, 264,
	0, 199, 251, 0, 660, 661, 423, 0, 0, 0,
	668, 603, 0, 215, 235, 236, 0, 231, 232, 233,
	788, 227, 234, 0, 51, 435, 0, 259, 617, 217,
	228, 665, 670, 673, -2, 898, 817, 0, 671, 208,
	237, 0, 238, 0, 0, 0, 239, 0, 313, 48,
	199, 0, 675, 676, 677, 678, 679, 240, 0, 243,
	244, 0, 241, 224, 229, 198, 252, 0, 242, 245,
	246, 674,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 283, 3, 289, 284, 3,
	294, 295, 287, 285, 298, 286, 296, 288, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 302, 297,
	277, 279, 278, 3, 299, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 292, 3, 293, 282, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 300, 281, 301, 291,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 280,
	57620, 290, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:713
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:719
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:725
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 17:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:748
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 24:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:758
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 25:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:764
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 26:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:768
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 27:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:774
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 28:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:778
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 29:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:785
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 30:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:790
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 31:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:795
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 32:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:800
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 33:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:805
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:810
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:814
		{
			unimplemented()
		}
	case 36:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:817
		{
			sqlVAL.union.val = &AlterTableDropColumn{columnKeyword: sqlDollar[2].union.bool(), IfExists: true, Column: Name(sqlDollar[5].str)}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:822
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:832
		{
		}
	case 39:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:835
		{
			sqlVAL.union.val = &AlterTableAddConstraint{ConstraintDef: sqlDollar[2].union.constraintDef()}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:839
		{
			unimplemented()
		}
	case 41:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:841
		{
			unimplemented()
		}
	case 42:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:844
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 43:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:853
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 44:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:863
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 45:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:867
		{
			sqlVAL.union.val = nil
		}
	case 46:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:873
		{
			sqlVAL.union.val = DropCascade
		}
	case 47:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:877
		{
			sqlVAL.union.val = DropRestrict
		}
	case 48:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:881
		{
			sqlVAL.union.val = DropDefault
		}
	case 49:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:886
		{
			unimplementedWithIssue(2473)
		}
	case 50:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:887
		{
		}
	case 51:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:890
		{
			unimplemented()
		}
	case 52:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:891
		{
		}
	case 57:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:903
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retExprs()}
		}
	case 58:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:910
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:914
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:918
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:926
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:934
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:938
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:944
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:948
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 66:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:954
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:958
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 68:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:964
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 69:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:968
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 70:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:975
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 71:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:979
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 72:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:985
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 79:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:994
		{ /* SKIP DOC */
		}
	case 80:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:998
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1002
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 83:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1012
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1022
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 85:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1026
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 86:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1032
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 90:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1042
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1053
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 92:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1057
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 93:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1064
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1070
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1076
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1080
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1087
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1094
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1101
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1105
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1109
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1116
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1119
		{
		}
	case 104:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1123
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1127
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 106:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1134
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1138
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1142
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1146
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 110:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1150
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 111:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1154
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 112:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1158
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 113:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1166
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1170
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 115:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1178
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1182
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 117:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1186
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1190
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1193
		{ /* SKIP DOC */
		}
	case 120:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1199
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1205
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1212
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1216
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1220
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1224
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1231
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1237
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1241
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1245
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1249
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1256
		{
			unimplemented()
		}
	case 134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1259
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1262
		{
			unimplemented()
		}
	case 137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1269
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1273
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1281
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1287
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 143:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1291
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1295
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 145:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1299
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1303
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1309
		{
			sqlVAL.union.val = Low
		}
	case 148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1313
		{
			sqlVAL.union.val = Normal
		}
	case 149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1317
		{
			sqlVAL.union.val = High
		}
	case 150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1323
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1327
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1331
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1346
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1350
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1354
		{
			d, err := ParseDInterval(sqlDollar[2].str)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1364
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1368
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1373
		{
			unimplemented()
		}
	case 161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1374
		{
			unimplemented()
		}
	case 162:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1375
		{
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1379
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1383
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1389
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1393
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1397
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1401
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1405
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1409
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1413
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1417
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1421
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1425
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1429
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1433
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1437
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1441
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1445
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1449
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 181:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1453
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1459
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 183:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1464
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1470
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 185:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1474
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 186:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1481
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1485
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1491
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[5].union.slct()}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1495
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[8].union.slct()}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1502
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 192:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1508
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1512
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1518
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 197:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1524
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 198:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1530
		{
			/* SKIP DOC */
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1538
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1544
		{
			sqlVAL.union.val = newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
		}
	case 201:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1550
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 202:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1554
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1560
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1564
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1567
		{
			unimplemented()
		}
	case 206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1569
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1573
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1577
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1595
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1599
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1603
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1607
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1611
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1615
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1619
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1628
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1637
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1650
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1662
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 220:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1667
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 221:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1673
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 222:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1679
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    NameListToIndexElems(sqlDollar[3].union.nameList()),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1689
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[4].union.nameList()),
				},
				PrimaryKey: true,
			}
		}
	case 224:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1699
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 227:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1722
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 228:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1726
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1732
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 230:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1736
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 231:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1741
		{
			unimplemented()
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1742
		{
			unimplemented()
		}
	case 233:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1743
		{
			unimplemented()
		}
	case 234:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1744
		{
		}
	case 235:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1751
		{
			unimplemented()
		}
	case 236:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1752
		{
			unimplemented()
		}
	case 237:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1753
		{
			unimplemented()
		}
	case 238:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1754
		{
			unimplemented()
		}
	case 239:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1755
		{
		}
	case 240:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1758
		{
			unimplemented()
		}
	case 241:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1761
		{
			unimplemented()
		}
	case 242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1764
		{
			unimplemented()
		}
	case 243:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1765
		{
			unimplemented()
		}
	case 244:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1766
		{
			unimplemented()
		}
	case 245:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1767
		{
			unimplemented()
		}
	case 246:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1768
		{
			unimplemented()
		}
	case 247:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1772
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1776
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1780
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 250:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1787
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:1794
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 252:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:1805
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 253:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1819
		{
			sqlVAL.union.val = true
		}
	case 254:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1823
		{
			sqlVAL.union.val = false
		}
	case 255:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1829
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1833
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1842
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1845
		{
			unimplemented()
		}
	case 259:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1846
		{
			unimplemented()
		}
	case 260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1849
		{
			unimplemented()
		}
	case 261:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1850
		{
		}
	case 262:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1854
		{
			sqlVAL.union.val = Ascending
		}
	case 263:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1858
		{
			sqlVAL.union.val = Descending
		}
	case 264:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1862
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 265:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1869
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1873
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1877
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1881
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1885
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1889
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1893
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1897
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 273:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1901
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 274:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1907
		{
			sqlVAL.union.val = true
		}
	case 275:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1911
		{
			sqlVAL.union.val = false
		}
	case 276:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1916
		{
		}
	case 277:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1917
		{
		}
	case 278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1921
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1927
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1934
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1938
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1942
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1946
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1950
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1959
		{
		}
	case 286:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1960
		{
		}
	case 287:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1964
		{
			sqlVAL.str = ""
		}
	case 288:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1968
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1972
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 290:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1976
		{
			sqlVAL.str = ""
		}
	case 291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1982
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 292:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1986
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 293:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1992
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1996
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2000
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2004
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2008
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2014
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 299:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2020
		{
			sqlVAL.union.val = &CreateDatabase{Name: Name(sqlDollar[3].str), Encoding: sqlDollar[4].union.strVal()}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2024
		{
			sqlVAL.union.val = &CreateDatabase{IfNotExists: true, Name: Name(sqlDollar[6].str), Encoding: sqlDollar[7].union.strVal()}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2030
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2033
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 303:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2043
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retExprs()
		}
	case 304:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2049
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
		}
	case 305:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2054
		{
			unimplementedWithIssue(6637)
		}
	case 306:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2056
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2061
		{
			unimplementedWithIssue(6637)
		}
	case 308:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2069
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2073
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2079
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2083
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2087
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2093
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2097
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2103
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2107
		{
			unimplemented()
		}
	case 317:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2109
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2115
		{
			sqlVAL.union.val = sqlDollar[2].union.selExprs()
		}
	case 319:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2119
		{
			sqlVAL.union.val = SelectExprs(nil)
		}
	case 320:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2126
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retExprs()}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2132
		{
			unimplementedWithIssue(7841)
		}
	case 322:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2133
		{
		}
	case 323:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2137
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2141
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 327:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2151
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2163
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2167
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2211
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2217
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2221
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2236
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2240
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2244
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2248
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2252
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2256
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2290
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2302
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2314
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2322
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2331
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2340
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2358
		{
			unimplemented()
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2359
		{
			unimplemented()
		}
	case 351:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2360
		{
			unimplemented()
		}
	case 352:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2363
		{
			unimplemented()
		}
	case 353:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2364
		{
			unimplemented()
		}
	case 354:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2367
		{
			unimplemented()
		}
	case 355:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2370
		{
			unimplemented()
		}
	case 356:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2371
		{
		}
	case 357:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2374
		{
		}
	case 358:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2375
		{
		}
	case 359:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2379
		{
			sqlVAL.union.val = true
		}
	case 360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2383
		{
			sqlVAL.union.val = false
		}
	case 361:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2387
		{
			sqlVAL.union.val = false
		}
	case 362:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2393
		{
			sqlVAL.union.val = true
		}
	case 363:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2398
		{
		}
	case 364:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2399
		{
		}
	case 365:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2403
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 366:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2407
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 367:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2413
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 368:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2419
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2423
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2429
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2437
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2446
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2457
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2470
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2477
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2484
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 380:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2498
		{
		}
	case 381:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2499
		{
		}
	case 382:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2525
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 383:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2529
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2535
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 385:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2539
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 386:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2545
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2549
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2561
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2565
		{
			sqlVAL.union.val = &From{}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2571
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2575
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 392:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2581
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2586
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2592
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 395:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2597
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			index := a.Index
			if index == "" {
				index = b.Index
			} else if b.Index != "" {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			noIndexJoin := a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = &IndexHints{Index: index, NoIndexJoin: noIndexJoin}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2617
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2621
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 398:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2625
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 399:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2632
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), As: sqlDollar[3].union.aliasClause()}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2636
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, As: sqlDollar[2].union.aliasClause()}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2640
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 402:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2644
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[2].union.tblExpr(), As: sqlDollar[4].union.aliasClause()}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2664
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2668
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2672
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2676
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2680
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2684
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2690
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2694
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2698
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2702
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2709
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2715
		{
			sqlVAL.union.val = AsOfClause{Expr: &StrVal{s: sqlDollar[5].str}}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2719
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2725
		{
			sqlVAL.str = astFullJoin
		}
	case 418:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2729
		{
			sqlVAL.str = astLeftJoin
		}
	case 419:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2733
		{
			sqlVAL.str = astRightJoin
		}
	case 420:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2737
		{
			sqlVAL.str = astInnerJoin
		}
	case 421:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2743
		{
		}
	case 422:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2744
		{
		}
	case 423:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2755
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2759
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2765
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 426:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2769
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 427:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2773
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 428:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2777
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 429:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2783
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2787
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 431:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2800
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 432:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2804
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2808
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2814
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 435:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2818
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 436:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2830
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 437:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2834
		{
			unimplementedWithIssue(2115)
		}
	case 438:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2835
		{
			unimplementedWithIssue(2115)
		}
	case 439:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2838
		{
			unimplementedWithIssue(2115)
		}
	case 440:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2839
		{
			unimplementedWithIssue(2115)
		}
	case 441:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2840
		{
		}
	case 447:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2848
		{
			unimplemented()
		}
	case 448:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2850
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 449:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2854
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 450:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2858
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 451:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2862
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 452:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2866
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 453:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2870
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 454:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2874
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 459:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2895
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2904
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2918
		{
			sqlVAL.union.val = nil
		}
	case 462:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2925
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 463:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2929
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 464:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2933
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 465:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2937
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 466:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2941
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 467:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2945
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 468:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2949
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newFloatColType(int(prec))
		}
	case 469:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2958
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 470:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2962
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2971
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2980
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2989
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2993
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 475:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2999
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 476:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3003
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3021
		{
			n, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 482:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3037
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 487:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3053
		{
			n, err := sqlDollar[3].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3069
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 489:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3075
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 490:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3079
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 491:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3083
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 492:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3087
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 493:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3092
		{
		}
	case 494:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3093
		{
		}
	case 495:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3098
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 496:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3102
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 497:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3106
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 498:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3110
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 499:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3114
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 500:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3119
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 501:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3124
		{
			unimplemented()
		}
	case 502:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3125
		{
			unimplemented()
		}
	case 503:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3126
		{
			unimplemented()
		}
	case 504:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3127
		{
			unimplemented()
		}
	case 505:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3128
		{
			unimplemented()
		}
	case 506:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3129
		{
			unimplemented()
		}
	case 507:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3130
		{
			unimplemented()
		}
	case 508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3131
		{
			unimplemented()
		}
	case 509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3132
		{
			unimplemented()
		}
	case 510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3133
		{
			unimplemented()
		}
	case 511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3134
		{
			unimplemented()
		}
	case 512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3135
		{
			unimplemented()
		}
	case 513:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3136
		{
			unimplemented()
		}
	case 514:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3137
		{
		}
	case 515:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3140
		{
			unimplemented()
		}
	case 516:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3141
		{
			unimplemented()
		}
	case 518:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3165
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3173
		{
			unimplemented()
		}
	case 520:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3174
		{
			unimplemented()
		}
	case 521:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3183
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3187
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3191
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3195
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3199
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3203
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3207
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3211
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3215
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3219
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3223
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3227
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3231
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3235
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3239
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3243
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3247
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3251
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3255
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3259
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3263
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3267
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3271
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3275
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3279
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3283
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3287
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3291
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3295
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3299
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3303
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3307
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3311
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3315
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3319
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3323
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3327
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3331
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3334
		{
			unimplemented()
		}
	case 560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3336
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3340
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3344
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3348
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3352
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3356
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3360
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3364
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3368
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3372
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3376
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3380
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3384
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3388
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3392
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3396
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3413
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3422
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3426
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3430
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3434
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3438
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3442
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3446
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3450
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3454
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3458
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3462
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3466
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3470
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3474
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3478
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3482
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3486
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3490
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3494
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3498
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3502
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3506
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3510
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3514
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3518
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3522
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3534
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 606:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3539
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3543
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3549
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3553
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3557
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3563
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 614:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3567
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 615:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3571
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 616:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3579
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName()}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3583
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3586
		{
			unimplemented()
		}
	case 619:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3587
		{
			unimplemented()
		}
	case 620:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3589
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Type: All, Exprs: sqlDollar[4].union.exprs()}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3593
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Type: Distinct, Exprs: sqlDollar[4].union.exprs()}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3597
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Exprs: Exprs{StarExpr()}}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3610
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 624:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3614
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 625:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3623
		{
			unimplemented()
		}
	case 626:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3624
		{
			unimplemented()
		}
	case 627:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3628
		{
			unimplemented()
		}
	case 628:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3630
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3634
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3638
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3642
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3645
		{
			unimplemented()
		}
	case 633:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3646
		{
			unimplemented()
		}
	case 634:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3647
		{
			unimplemented()
		}
	case 635:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3648
		{
			unimplemented()
		}
	case 636:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3650
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3654
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3658
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3662
		{
			sqlVAL.union.val = &OverlayExpr{FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3666
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3670
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3673
		{
			unimplemented()
		}
	case 643:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3675
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3679
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3683
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3687
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3691
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3695
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3699
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3703
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3707
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3711
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3717
		{
			unimplemented()
		}
	case 654:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3718
		{
		}
	case 655:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3721
		{
			unimplemented()
		}
	case 656:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3722
		{
		}
	case 657:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3726
		{
			unimplemented()
		}
	case 658:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3727
		{
		}
	case 659:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3730
		{
			unimplemented()
		}
	case 660:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3731
		{
			unimplemented()
		}
	case 661:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3734
		{
			unimplemented()
		}
	case 662:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3737
		{
			unimplemented()
		}
	case 663:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3738
		{
			unimplemented()
		}
	case 664:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3739
		{
		}
	case 665:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3743
		{
			unimplemented()
		}
	case 666:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3754
		{
			unimplemented()
		}
	case 667:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3755
		{
		}
	case 668:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3758
		{
			unimplemented()
		}
	case 669:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3759
		{
		}
	case 670:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3767
		{
			unimplemented()
		}
	case 671:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3768
		{
			unimplemented()
		}
	case 672:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3769
		{
		}
	case 673:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3772
		{
			unimplemented()
		}
	case 674:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3773
		{
			unimplemented()
		}
	case 675:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3779
		{
			unimplemented()
		}
	case 676:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3780
		{
			unimplemented()
		}
	case 677:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3781
		{
			unimplemented()
		}
	case 678:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3782
		{
			unimplemented()
		}
	case 679:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3783
		{
			unimplemented()
		}
	case 680:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3794
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3798
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3802
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3808
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3812
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3818
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3861
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3865
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 688:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3871
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3875
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 690:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3881
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3885
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3889
		{
			sqlVAL.union.val = &Array{nil}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3895
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3899
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 695:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3905
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3927
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3931
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3937
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 706:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3944
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3948
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 708:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3965
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3969
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3973
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3977
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3981
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 713:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3985
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 714:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3991
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 715:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3997
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 716:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4003
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 717:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4007
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 718:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4011
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 719:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4017
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4021
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4032
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4039
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4043
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 724:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4049
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4055
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 726:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4059
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 728:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4066
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 729:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4072
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 730:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4076
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 731:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4080
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4084
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr()}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4090
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 734:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4096
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4102
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4106
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 737:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4111
		{
		}
	case 738:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4112
		{
		}
	case 740:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4121
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4127
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4131
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 743:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4140
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 744:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4146
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4150
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 746:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4156
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4165
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4169
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4173
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 750:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4181
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4185
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 752:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4191
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4195
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 754:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4201
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4205
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 756:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4216
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4220
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 758:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4226
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4237
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4241
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4245
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4249
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4255
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4259
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 765:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4265
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 766:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4268
		{
		}
	case 767:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4278
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4282
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 769:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4289
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 770:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4293
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 771:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4297
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4301
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4304
		{
			unimplemented()
		}
	case 774:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4306
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4310
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4314
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[5].str}, Type: sqlDollar[1].union.colType()}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4318
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 778:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4322
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 779:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4326
		{
			sqlVAL.union.val = DNull
		}
	case 781:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4333
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 782:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4337
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4359
		{
			sqlVAL.str = ""
		}
	case 788:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4365
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 789:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4369
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
