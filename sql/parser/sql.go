// Code generated by go yacc.
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"errors"
	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/sql/privilege"
)

var errUnimplemented = errors.New("unimplemented")

func unimplemented() {
	panic(errUnimplemented)
}

//line sql.y:38

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new sytax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in two forms, depending on the
// type of the value being accessed. Values and pointers are directly
// type asserted from the empty interface, meaning that they will panic
// if the type assertion is incorrect. Interfaces are handled differently
// because a nil instance of an interface inserted into the empty interface
// becomes a nil instance of the empty interface and therefore will fail a
// direct type assertion. Instead, a guarded type assertion must be used,
// which returns nil if the type assertion fails.
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	return u.val.(*StrVal)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) qname() *QualifiedName {
	return u.val.(*QualifiedName)
}
func (u *sqlSymUnion) qnames() QualifiedNames {
	return u.val.(QualifiedNames)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) indirectElem() IndirectionElem {
	if indirectElem, ok := u.val.(IndirectionElem); ok {
		return indirectElem
	}
	return nil
}
func (u *sqlSymUnion) indirect() Indirection {
	return u.val.(Indirection)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	if selectStmt, ok := u.val.(*Select); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	if selectStmt, ok := u.val.(SelectStatement); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	if constraintDef, ok := u.val.(ConstraintTableDef); ok {
		return constraintDef
	}
	return nil
}
func (u *sqlSymUnion) tblDef() TableDef {
	if tblDef, ok := u.val.(TableDef); ok {
		return tblDef
	}
	return nil
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() ColumnQualification {
	if colQual, ok := u.val.(ColumnQualification); ok {
		return colQual
	}
	return nil
}
func (u *sqlSymUnion) colQuals() []ColumnQualification {
	return u.val.([]ColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retExprs() ReturningExprs {
	return ReturningExprs(u.val.(SelectExprs))
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	if tblExpr, ok := u.val.(TableExpr); ok {
		return tblExpr
	}
	return nil
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	if joinCond, ok := u.val.(JoinCond); ok {
		return joinCond
	}
	return nil
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	if alterTableCmd, ok := u.val.(AlterTableCmd); ok {
		return alterTableCmd
	}
	return nil
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}

//line sql.y:270
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PARAM = 57351
const TYPECAST = 57352
const DOT_DOT = 57353
const LESS_EQUALS = 57354
const GREATER_EQUALS = 57355
const NOT_EQUALS = 57356
const ERROR = 57357
const ACTION = 57358
const ADD = 57359
const ALL = 57360
const ALTER = 57361
const ANALYSE = 57362
const ANALYZE = 57363
const AND = 57364
const ANY = 57365
const ARRAY = 57366
const AS = 57367
const ASC = 57368
const ASYMMETRIC = 57369
const AT = 57370
const BEGIN = 57371
const BETWEEN = 57372
const BIGINT = 57373
const BIT = 57374
const BLOB = 57375
const BOOL = 57376
const BOOLEAN = 57377
const BOTH = 57378
const BY = 57379
const BYTEA = 57380
const BYTES = 57381
const CASCADE = 57382
const CASE = 57383
const CAST = 57384
const CHAR = 57385
const CHARACTER = 57386
const CHARACTERISTICS = 57387
const CHECK = 57388
const COALESCE = 57389
const COLLATE = 57390
const COLLATION = 57391
const COLUMN = 57392
const COLUMNS = 57393
const COMMIT = 57394
const COMMITTED = 57395
const CONCAT = 57396
const CONFLICT = 57397
const CONSTRAINT = 57398
const COVERING = 57399
const CREATE = 57400
const CROSS = 57401
const CUBE = 57402
const CURRENT = 57403
const CURRENT_CATALOG = 57404
const CURRENT_DATE = 57405
const CURRENT_ROLE = 57406
const CURRENT_TIME = 57407
const CURRENT_TIMESTAMP = 57408
const CURRENT_USER = 57409
const CYCLE = 57410
const DATA = 57411
const DATABASE = 57412
const DATABASES = 57413
const DATE = 57414
const DAY = 57415
const DEC = 57416
const DECIMAL = 57417
const DEFAULT = 57418
const DEFERRABLE = 57419
const DELETE = 57420
const DESC = 57421
const DISTINCT = 57422
const DO = 57423
const DOUBLE = 57424
const DROP = 57425
const ELSE = 57426
const ENCODING = 57427
const END = 57428
const ESCAPE = 57429
const EXCEPT = 57430
const EXISTS = 57431
const EXPLAIN = 57432
const EXTRACT = 57433
const FALSE = 57434
const FETCH = 57435
const FILTER = 57436
const FIRST = 57437
const FLOAT = 57438
const FOLLOWING = 57439
const FOR = 57440
const FORCE_INDEX = 57441
const FOREIGN = 57442
const FROM = 57443
const FULL = 57444
const GRANT = 57445
const GRANTS = 57446
const GREATEST = 57447
const GROUP = 57448
const GROUPING = 57449
const HAVING = 57450
const HIGH = 57451
const HOUR = 57452
const IF = 57453
const IFNULL = 57454
const IN = 57455
const INDEX = 57456
const INDEXES = 57457
const INITIALLY = 57458
const INNER = 57459
const INSERT = 57460
const INT = 57461
const INT64 = 57462
const INTEGER = 57463
const INTERSECT = 57464
const INTERVAL = 57465
const INTO = 57466
const IS = 57467
const ISOLATION = 57468
const JOIN = 57469
const KEY = 57470
const KEYS = 57471
const LATERAL = 57472
const LEADING = 57473
const LEAST = 57474
const LEFT = 57475
const LEVEL = 57476
const LIKE = 57477
const LIMIT = 57478
const LOCAL = 57479
const LOCALTIME = 57480
const LOCALTIMESTAMP = 57481
const LOW = 57482
const LSHIFT = 57483
const MATCH = 57484
const MINUTE = 57485
const MONTH = 57486
const NAME = 57487
const NAMES = 57488
const NATURAL = 57489
const NEXT = 57490
const NO = 57491
const NO_INDEX_JOIN = 57492
const NORMAL = 57493
const NOT = 57494
const NOTHING = 57495
const NULL = 57496
const NULLIF = 57497
const NULLS = 57498
const NUMERIC = 57499
const OF = 57500
const OFF = 57501
const OFFSET = 57502
const ON = 57503
const ONLY = 57504
const OR = 57505
const ORDER = 57506
const ORDINALITY = 57507
const OUT = 57508
const OUTER = 57509
const OVER = 57510
const OVERLAPS = 57511
const OVERLAY = 57512
const PARTIAL = 57513
const PARTITION = 57514
const PLACING = 57515
const POSITION = 57516
const PRECEDING = 57517
const PRECISION = 57518
const PRIMARY = 57519
const PRIORITY = 57520
const RANGE = 57521
const READ = 57522
const REAL = 57523
const RECURSIVE = 57524
const REF = 57525
const REFERENCES = 57526
const RENAME = 57527
const REPEATABLE = 57528
const RELEASE = 57529
const RESTRICT = 57530
const RETURNING = 57531
const REVOKE = 57532
const RIGHT = 57533
const ROLLBACK = 57534
const ROLLUP = 57535
const ROW = 57536
const ROWS = 57537
const RSHIFT = 57538
const SAVEPOINT = 57539
const SEARCH = 57540
const SECOND = 57541
const SELECT = 57542
const SERIALIZABLE = 57543
const SESSION = 57544
const SESSION_USER = 57545
const SET = 57546
const SHOW = 57547
const SIMILAR = 57548
const SIMPLE = 57549
const SMALLINT = 57550
const SNAPSHOT = 57551
const SOME = 57552
const SQL = 57553
const START = 57554
const STRICT = 57555
const STRING = 57556
const STORING = 57557
const SUBSTRING = 57558
const SYMMETRIC = 57559
const TABLE = 57560
const TABLES = 57561
const TEXT = 57562
const THEN = 57563
const TIME = 57564
const TIMESTAMP = 57565
const TIMESTAMPTZ = 57566
const TO = 57567
const TRAILING = 57568
const TRANSACTION = 57569
const TREAT = 57570
const TRIM = 57571
const TRUE = 57572
const TRUNCATE = 57573
const TYPE = 57574
const UNBOUNDED = 57575
const UNCOMMITTED = 57576
const UNION = 57577
const UNIQUE = 57578
const UNKNOWN = 57579
const UPDATE = 57580
const UPSERT = 57581
const USER = 57582
const USING = 57583
const VALID = 57584
const VALIDATE = 57585
const VALUE = 57586
const VALUES = 57587
const VARCHAR = 57588
const VARIADIC = 57589
const VARYING = 57590
const WHEN = 57591
const WHERE = 57592
const WINDOW = 57593
const WITH = 57594
const WITHIN = 57595
const WITHOUT = 57596
const YEAR = 57597
const ZONE = 57598
const NOT_LA = 57599
const WITH_LA = 57600
const POSTFIXOP = 57601
const UMINUS = 57602

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PARAM",
	"TYPECAST",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXPLAIN",
	"EXTRACT",
	"FALSE",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HOUR",
	"IF",
	"IFNULL",
	"IN",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARTIAL",
	"PARTITION",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SNAPSHOT",
	"SOME",
	"SQL",
	"START",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"TABLE",
	"TABLES",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:4377

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 21,
	279, 21,
	-2, 322,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 32,
	1, 293,
	161, 293,
	189, 293,
	277, 293,
	279, 293,
	-2, 303,
	-1, 44,
	1, 296,
	161, 296,
	189, 296,
	277, 296,
	279, 296,
	-2, 302,
	-1, 53,
	1, 21,
	279, 21,
	-2, 322,
	-1, 241,
	1, 138,
	279, 138,
	-2, 795,
	-1, 273,
	136, 332,
	160, 332,
	-2, 299,
	-1, 276,
	136, 331,
	160, 331,
	-2, 297,
	-1, 388,
	136, 331,
	160, 331,
	-2, 300,
	-1, 444,
	276, 739,
	-2, 734,
	-1, 445,
	276, 740,
	-2, 735,
	-1, 451,
	5, 460,
	276, 460,
	-2, 877,
	-1, 473,
	5, 427,
	-2, 854,
	-1, 474,
	5, 455,
	276, 455,
	-2, 855,
	-1, 475,
	5, 435,
	-2, 856,
	-1, 476,
	5, 434,
	-2, 857,
	-1, 477,
	5, 455,
	276, 455,
	-2, 860,
	-1, 478,
	5, 455,
	276, 455,
	-2, 861,
	-1, 479,
	5, 456,
	-2, 864,
	-1, 480,
	5, 422,
	-2, 865,
	-1, 481,
	5, 422,
	-2, 866,
	-1, 482,
	5, 437,
	-2, 869,
	-1, 483,
	5, 423,
	-2, 874,
	-1, 484,
	5, 424,
	-2, 875,
	-1, 485,
	5, 425,
	-2, 876,
	-1, 486,
	5, 422,
	-2, 880,
	-1, 487,
	5, 428,
	-2, 885,
	-1, 488,
	5, 426,
	-2, 887,
	-1, 489,
	5, 453,
	276, 453,
	-2, 888,
	-1, 490,
	5, 457,
	-2, 891,
	-1, 491,
	5, 458,
	-2, 892,
	-1, 492,
	5, 452,
	276, 452,
	-2, 896,
	-1, 754,
	88, 303,
	122, 303,
	136, 303,
	160, 303,
	164, 303,
	235, 303,
	-2, 562,
	-1, 762,
	276, 719,
	-2, 708,
	-1, 960,
	12, 0,
	13, 0,
	14, 0,
	259, 0,
	260, 0,
	261, 0,
	-2, 493,
	-1, 961,
	12, 0,
	13, 0,
	14, 0,
	259, 0,
	260, 0,
	261, 0,
	-2, 494,
	-1, 962,
	12, 0,
	13, 0,
	14, 0,
	259, 0,
	260, 0,
	261, 0,
	-2, 495,
	-1, 966,
	12, 0,
	13, 0,
	14, 0,
	259, 0,
	260, 0,
	261, 0,
	-2, 499,
	-1, 967,
	12, 0,
	13, 0,
	14, 0,
	259, 0,
	260, 0,
	261, 0,
	-2, 500,
	-1, 968,
	12, 0,
	13, 0,
	14, 0,
	259, 0,
	260, 0,
	261, 0,
	-2, 501,
	-1, 971,
	30, 0,
	113, 0,
	135, 0,
	206, 0,
	257, 0,
	-2, 506,
	-1, 1002,
	169, 632,
	-2, 635,
	-1, 1157,
	88, 303,
	122, 303,
	136, 303,
	160, 303,
	164, 303,
	235, 303,
	-2, 380,
	-1, 1165,
	30, 0,
	113, 0,
	135, 0,
	206, 0,
	257, 0,
	-2, 507,
	-1, 1170,
	30, 0,
	113, 0,
	135, 0,
	206, 0,
	257, 0,
	-2, 508,
	-1, 1189,
	169, 631,
	-2, 634,
	-1, 1334,
	30, 0,
	113, 0,
	135, 0,
	206, 0,
	257, 0,
	-2, 509,
	-1, 1339,
	125, 0,
	-2, 519,
	-1, 1348,
	169, 633,
	-2, 636,
	-1, 1388,
	12, 0,
	13, 0,
	14, 0,
	259, 0,
	260, 0,
	261, 0,
	-2, 543,
	-1, 1389,
	12, 0,
	13, 0,
	14, 0,
	259, 0,
	260, 0,
	261, 0,
	-2, 544,
	-1, 1390,
	12, 0,
	13, 0,
	14, 0,
	259, 0,
	260, 0,
	261, 0,
	-2, 545,
	-1, 1394,
	12, 0,
	13, 0,
	14, 0,
	259, 0,
	260, 0,
	261, 0,
	-2, 549,
	-1, 1395,
	12, 0,
	13, 0,
	14, 0,
	259, 0,
	260, 0,
	261, 0,
	-2, 550,
	-1, 1396,
	12, 0,
	13, 0,
	14, 0,
	259, 0,
	260, 0,
	261, 0,
	-2, 551,
	-1, 1494,
	125, 0,
	-2, 520,
	-1, 1498,
	30, 0,
	113, 0,
	135, 0,
	206, 0,
	257, 0,
	-2, 523,
	-1, 1499,
	30, 0,
	113, 0,
	135, 0,
	206, 0,
	257, 0,
	-2, 525,
	-1, 1581,
	30, 0,
	113, 0,
	135, 0,
	206, 0,
	257, 0,
	-2, 524,
	-1, 1582,
	30, 0,
	113, 0,
	135, 0,
	206, 0,
	257, 0,
	-2, 526,
	-1, 1590,
	125, 0,
	-2, 552,
	-1, 1629,
	125, 0,
	-2, 553,
	-1, 1674,
	30, 0,
	135, 0,
	206, 0,
	257, 0,
	-2, 853,
}

const sqlNprod = 988
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 20423

var sqlAct = [...]int{

	999, 1673, 1656, 1535, 1634, 1694, 1657, 1672, 1658, 842,
	1598, 1368, 1482, 1557, 1458, 899, 1568, 1340, 1459, 31,
	443, 589, 1426, 1476, 442, 277, 1470, 1247, 299, 1154,
	882, 757, 1099, 505, 1311, 712, 885, 1246, 1015, 834,
	1192, 511, 435, 242, 14, 908, 1153, 1144, 87, 693,
	1320, 1341, 759, 690, 884, 843, 407, 534, 1140, 819,
	1019, 987, 911, 984, 1009, 792, 282, 788, 810, 708,
	877, 562, 66, 547, 1104, 284, 43, 514, 20, 1054,
	376, 714, 516, 408, 909, 282, 276, 10, 417, 6,
	377, 506, 544, 507, 64, 315, 573, 836, 887, 287,
	44, 391, 322, 43, 493, 318, 68, 320, 390, 392,
	239, 45, 82, 564, 326, 67, 543, 69, 527, 560,
	73, 311, 285, 317, 1574, 536, 839, 1575, 536, 43,
	1012, 1670, 1664, 835, 1556, 903, 295, 1663, 395, 302,
	903, 281, 281, 1655, 274, 312, 1497, 1650, 1152, 1631,
	903, 1057, 1497, 266, 1625, 273, 1617, 903, 1185, 1556,
	1620, 437, 323, 1110, 716, 1608, 1583, 1013, 903, 1497,
	327, 289, 1578, 1565, 1555, 903, 1556, 1556, 1540, 495,
	305, 903, 1539, 1520, 1500, 903, 1185, 1185, 49, 1496,
	1436, 717, 1497, 903, 1344, 716, 1301, 1185, 21, 1297,
	1014, 1011, 1296, 525, 1264, 1297, 51, 1265, 35, 719,
	1262, 744, 1261, 1185, 1260, 1185, 1189, 1185, 1187, 1185,
	1186, 904, 715, 1188, 903, 1185, 1401, 807, 1559, 718,
	806, 37, 1347, 52, 1123, 732, 541, 42, 808, 542,
	47, 1142, 1125, 903, 857, 49, 48, 539, 995, 508,
	49, 898, 402, 509, 871, 53, 1016, 1191, 1185, 403,
	684, 683, 26, 51, 46, 38, 554, 717, 51, 27,
	553, 343, 294, 537, 508, 509, 537, 588, 509, 362,
	1671, 1669, 28, 1626, 1564, 719, 1525, 1521, 1513, 1512,
	52, 409, 409, 494, 745, 52, 1507, 47, 445, 389,
	1506, 512, 47, 48, 1505, 718, 1504, 1491, 48, 1416,
	1453, 732, 1010, 383, 388, 1411, 740, 350, 717, 1410,
	1409, 65, 733, 500, 1351, 1329, 838, 351, 1310, 86,
	504, 1268, 86, 1163, 765, 1266, 719, 1254, 1245, 86,
	1127, 1218, 1215, 1110, 1213, 49, 86, 86, 499, 1202,
	86, 1196, 382, 86, 86, 86, 718, 1124, 1070, 86,
	86, 86, 86, 51, 325, 535, 40, 1026, 687, 29,
	1025, 39, 402, 401, 715, 1599, 30, 734, 380, 49,
	1370, 992, 86, 33, 34, 274, 1619, 742, 1600, 1592,
	52, 36, 1571, 312, 700, 702, 273, 51, 733, 1562,
	1554, 709, 1532, 326, 326, 1518, 1489, 1485, 1466, 404,
	41, 592, 1338, 748, 749, 750, 751, 752, 398, 399,
	1328, 46, 755, 1307, 52, 1452, 1306, 1304, 1219, 529,
	526, 47, 1280, 1279, 1244, 1210, 1209, 48, 741, 686,
	1219, 282, 768, 1201, 728, 725, 726, 727, 720, 721,
	722, 723, 724, 734, 508, 46, 1576, 1580, 509, 327,
	327, 551, 762, 993, 550, 1182, 1178, 593, 989, 793,
	796, 584, 1084, 1083, 673, 577, 1064, 677, 678, 679,
	1024, 680, 676, 902, 799, 682, 786, 785, 784, 783,
	1219, 782, 685, 781, 698, 780, 274, 779, 696, 274,
	274, 697, 1084, 710, 778, 777, 776, 704, 775, 803,
	705, 706, 774, 773, 772, 763, 761, 46, 688, 583,
	728, 725, 726, 727, 720, 721, 722, 723, 724, 300,
	406, 804, 760, 86, 86, 1579, 1331, 1330, 802, 501,
	1457, 1111, 893, 798, 1219, 790, 791, 794, 356, 375,
	1267, 1164, 797, 371, 813, 357, 770, 1471, 592, 835,
	1371, 1020, 789, 1106, 86, 1640, 86, 418, 86, 1683,
	86, 1233, 837, 756, 837, 720, 721, 722, 723, 724,
	1119, 800, 859, 852, 320, 86, 66, 824, 826, 1444,
	1205, 326, 1684, 863, 717, 1607, 86, 265, 259, 264,
	260, 1548, 517, 1547, 518, 766, 829, 86, 86, 86,
	876, 86, 719, 1292, 593, 1272, 816, 43, 1271, 296,
	68, 1233, 296, 271, 307, 1219, 1234, 841, 296, 67,
	307, 69, 718, 1200, 851, 865, 854, 592, 858, 323,
	860, 86, 861, 86, 864, 855, 853, 327, 832, 517,
	1199, 518, 812, 325, 325, 1067, 820, 1198, 1291, 850,
	1197, 591, 86, 1166, 86, 86, 86, 86, 519, 86,
	233, 976, 354, 86, 1488, 856, 1234, 831, 86, 830,
	1606, 379, 950, 986, 86, 1220, 1221, 1222, 1223, 1224,
	986, 374, 268, 593, 1225, 1226, 1227, 1220, 1221, 1222,
	1223, 1224, 86, 1642, 530, 86, 1016, 1660, 355, 1282,
	823, 1360, 896, 897, 61, 519, 409, 1691, 536, 55,
	1100, 951, 952, 953, 954, 955, 956, 957, 958, 959,
	960, 961, 962, 963, 964, 965, 966, 967, 968, 969,
	970, 971, 1537, 1228, 1225, 1226, 1227, 1220, 1221, 1222,
	1223, 1224, 1683, 1030, 905, 1020, 1233, 57, 62, 411,
	1357, 1118, 949, 56, 1432, 880, 1098, 1016, 990, 913,
	1095, 269, 881, 523, 879, 1027, 1661, 1038, 522, 1048,
	1050, 1055, 1058, 1059, 1060, 1652, 353, 822, 1601, 272,
	1040, 802, 812, 1358, 1433, 592, 802, 58, 811, 906,
	1120, 1653, 86, 1222, 1223, 1224, 787, 512, 591, 1588,
	378, 1234, 1662, 1000, 753, 1208, 86, 515, 974, 1012,
	86, 450, 1033, 86, 86, 497, 1321, 1289, 520, 86,
	1283, 86, 86, 1690, 86, 296, 1101, 86, 86, 86,
	1069, 325, 991, 74, 86, 86, 821, 281, 1073, 1016,
	496, 593, 1079, 722, 723, 724, 1013, 1659, 282, 1034,
	1697, 1143, 63, 79, 447, 502, 537, 54, 75, 1081,
	1428, 1682, 1429, 1168, 1108, 520, 296, 528, 528, 919,
	985, 1227, 1220, 1221, 1222, 1223, 1224, 591, 76, 1014,
	1011, 1074, 1035, 1032, 280, 1431, 1680, 938, 352, 709,
	1538, 975, 1434, 78, 1147, 346, 348, 1094, 372, 1113,
	1397, 1689, 996, 1001, 517, 1004, 518, 60, 59, 1150,
	326, 1469, 1112, 972, 1109, 1103, 891, 1114, 279, 1145,
	1049, 1115, 282, 1116, 1128, 1148, 1061, 1062, 1063, 365,
	1122, 344, 1126, 1121, 1117, 1016, 394, 1135, 1036, 1146,
	353, 342, 1542, 1541, 1430, 1530, 1516, 1704, 1159, 393,
	373, 582, 581, 1478, 575, 570, 1274, 809, 1133, 1695,
	281, 1078, 1356, 1165, 86, 1158, 327, 1170, 43, 919,
	519, 1137, 1398, 394, 1162, 77, 86, 86, 1399, 867,
	1136, 892, 1138, 1149, 973, 869, 1184, 938, 794, 1440,
	797, 1010, 71, 695, 1031, 1443, 1193, 689, 1696, 282,
	870, 937, 1442, 791, 790, 86, 1635, 86, 868, 559,
	393, 1206, 681, 80, 1698, 1211, 1483, 555, 1531, 1086,
	1190, 717, 1147, 585, 1517, 1703, 1085, 1169, 1167, 1479,
	717, 278, 74, 1477, 1316, 591, 755, 1150, 717, 719,
	557, 1315, 1055, 1055, 1055, 352, 310, 1319, 719, 309,
	279, 558, 79, 1148, 385, 282, 719, 75, 1312, 718,
	1141, 801, 1023, 1270, 1591, 1439, 1515, 1484, 718, 1204,
	587, 1248, 1337, 1214, 1277, 1249, 718, 76, 1441, 296,
	1177, 862, 307, 370, 586, 1175, 368, 367, 846, 366,
	363, 409, 78, 307, 308, 771, 307, 1173, 86, 86,
	86, 937, 512, 1022, 86, 675, 1423, 86, 1287, 694,
	1278, 1149, 1285, 86, 86, 86, 86, 86, 1269, 86,
	86, 1251, 1252, 1253, 1273, 1294, 1130, 86, 894, 86,
	520, 1181, 1276, 890, 540, 1183, 86, 538, 1286, 1298,
	1288, 533, 524, 1300, 703, 86, 86, 1293, 1194, 1195,
	521, 86, 733, 1365, 1290, 1333, 1299, 1334, 1549, 1171,
	325, 733, 1684, 1176, 1325, 900, 1551, 359, 1339, 733,
	1303, 1305, 1309, 579, 77, 396, 1349, 86, 1314, 86,
	86, 1317, 1349, 86, 1318, 982, 828, 1243, 1324, 1322,
	1323, 592, 86, 292, 812, 1295, 1366, 980, 1256, 86,
	827, 86, 3, 1559, 1603, 1375, 1628, 734, 1377, 1353,
	1354, 1355, 80, 812, 576, 571, 734, 1313, 901, 825,
	717, 400, 1621, 70, 734, 840, 711, 1359, 1361, 1362,
	258, 1350, 552, 1161, 717, 1172, 1701, 397, 360, 1406,
	1407, 1372, 1174, 1702, 1376, 296, 1219, 593, 1413, 1414,
	1415, 717, 719, 81, 1374, 293, 301, 978, 718, 977,
	1490, 1378, 1417, 983, 1404, 873, 872, 1363, 261, 262,
	1332, 1143, 718, 1263, 296, 1405, 1068, 727, 720, 721,
	722, 723, 724, 728, 725, 726, 727, 720, 721, 722,
	723, 724, 1408, 1219, 1418, 720, 721, 722, 723, 724,
	1422, 1066, 1065, 1472, 1017, 1437, 1438, 874, 1502, 1364,
	1131, 875, 1468, 764, 1147, 1464, 267, 1536, 1464, 1463,
	72, 1456, 1463, 674, 1345, 364, 1509, 1467, 1494, 1150,
	919, 1454, 1651, 1498, 1499, 979, 1207, 1465, 1501, 1145,
	1465, 1587, 981, 1503, 1567, 1148, 1495, 1021, 938, 1487,
	769, 1474, 1475, 25, 1486, 1480, 1461, 423, 1508, 1146,
	1424, 1275, 1511, 886, 919, 594, 580, 1075, 569, 446,
	369, 919, 563, 86, 572, 1029, 498, 448, 916, 449,
	917, 795, 938, 436, 914, 321, 1402, 844, 1018, 938,
	1203, 767, 1519, 422, 1514, 428, 1105, 1412, 427, 86,
	997, 419, 919, 1149, 1481, 1105, 1151, 349, 237, 238,
	1102, 430, 86, 1451, 86, 895, 86, 699, 1284, 86,
	938, 270, 1216, 1047, 1233, 1039, 1037, 1028, 381, 510,
	845, 86, 361, 1543, 86, 1526, 907, 1160, 405, 707,
	86, 591, 84, 291, 86, 243, 86, 290, 883, 1129,
	1527, 358, 84, 1561, 556, 1473, 866, 263, 1602, 288,
	288, 1529, 937, 298, 1281, 1560, 298, 304, 298, 1572,
	296, 1563, 298, 313, 298, 243, 1552, 1464, 1550, 1234,
	1639, 1463, 1558, 1581, 1582, 50, 1544, 19, 17, 1570,
	919, 16, 15, 1545, 1546, 345, 937, 86, 13, 1465,
	12, 11, 18, 937, 1134, 9, 8, 7, 938, 24,
	23, 1577, 22, 1595, 5, 1573, 4, 2, 1, 1586,
	0, 0, 0, 1597, 0, 0, 1593, 1041, 0, 918,
	0, 0, 0, 940, 937, 0, 0, 0, 0, 1584,
	0, 1596, 0, 0, 0, 512, 0, 0, 0, 1610,
	1220, 1221, 1222, 1223, 1224, 0, 0, 0, 939, 1618,
	86, 86, 86, 1612, 282, 1611, 1614, 1464, 86, 86,
	0, 1463, 915, 0, 86, 0, 86, 1623, 86, 86,
	86, 86, 802, 0, 0, 0, 86, 0, 1624, 1465,
	0, 0, 0, 1613, 0, 86, 919, 1622, 0, 0,
	1630, 0, 0, 1627, 86, 86, 0, 0, 86, 0,
	0, 1646, 0, 0, 938, 592, 0, 86, 86, 1644,
	0, 0, 937, 1649, 1647, 1636, 1637, 1648, 0, 918,
	1464, 1666, 1645, 940, 1463, 0, 0, 1641, 1643, 1665,
	1219, 0, 1667, 1677, 1677, 0, 243, 243, 0, 919,
	1668, 1678, 1465, 0, 0, 1681, 1679, 0, 939, 86,
	1685, 0, 0, 0, 1687, 1677, 1688, 938, 846, 0,
	919, 593, 915, 0, 0, 0, 0, 84, 1700, 298,
	1699, 243, 0, 386, 1232, 0, 0, 0, 938, 0,
	0, 0, 1677, 1705, 0, 0, 0, 1686, 288, 0,
	296, 0, 0, 296, 1616, 0, 0, 0, 0, 298,
	0, 0, 86, 0, 86, 0, 86, 0, 0, 0,
	298, 298, 298, 86, 531, 0, 0, 0, 937, 0,
	0, 0, 0, 0, 1041, 1041, 0, 1432, 0, 1427,
	0, 86, 0, 0, 919, 0, 0, 1425, 0, 0,
	0, 0, 0, 0, 548, 0, 548, 0, 86, 0,
	86, 0, 938, 0, 0, 1179, 1180, 1433, 86, 0,
	1654, 1233, 0, 0, 86, 243, 0, 548, 243, 243,
	243, 937, 243, 0, 0, 0, 243, 0, 0, 0,
	0, 84, 1041, 1041, 1041, 0, 0, 692, 0, 0,
	0, 0, 937, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 288, 0, 0, 713, 0,
	0, 0, 0, 1240, 1241, 1242, 1234, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 86, 0, 0,
	86, 0, 0, 1428, 0, 1429, 0, 1447, 86, 0,
	0, 0, 0, 0, 0, 1455, 0, 0, 0, 0,
	86, 0, 0, 0, 0, 591, 0, 0, 1431, 0,
	0, 0, 0, 296, 296, 1434, 937, 296, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 86,
	86, 0, 86, 1228, 1225, 1226, 1227, 1220, 1221, 1222,
	1223, 1224, 0, 0, 0, 0, 0, 0, 0, 86,
	0, 0, 0, 0, 0, 298, 0, 1041, 1041, 0,
	0, 0, 0, 0, 0, 0, 0, 1430, 0, 817,
	0, 86, 0, 298, 0, 0, 298, 833, 0, 0,
	0, 0, 298, 0, 848, 849, 0, 298, 1335, 1336,
	298, 243, 243, 0, 0, 0, 0, 548, 713, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041,
	1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 0, 1041,
	918, 0, 1534, 0, 940, 0, 0, 0, 0, 0,
	0, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387,
	1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 939,
	1400, 0, 0, 0, 918, 0, 0, 1566, 940, 0,
	0, 918, 0, 915, 0, 940, 0, 296, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 939, 424, 32, 0, 0, 0, 0,
	939, 0, 918, 0, 0, 0, 940, 915, 0, 0,
	0, 0, 0, 0, 915, 0, 0, 0, 0, 0,
	0, 0, 32, 0, 0, 0, 0, 878, 0, 0,
	0, 939, 0, 0, 0, 0, 0, 0, 275, 298,
	817, 283, 0, 0, 0, 915, 0, 0, 32, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	283, 0, 0, 0, 0, 0, 0, 0, 298, 0,
	243, 0, 0, 1219, 0, 1235, 1236, 1237, 0, 0,
	0, 0, 0, 0, 0, 1493, 0, 0, 0, 0,
	918, 0, 0, 0, 940, 0, 0, 0, 0, 1638,
	0, 0, 0, 0, 717, 0, 735, 736, 737, 0,
	0, 0, 0, 0, 0, 0, 738, 1232, 0, 939,
	0, 0, 719, 1041, 744, 0, 0, 245, 0, 0,
	0, 0, 0, 915, 0, 0, 0, 0, 0, 0,
	846, 256, 718, 0, 0, 0, 0, 0, 732, 0,
	0, 0, 0, 1219, 1533, 1235, 1236, 1237, 0, 0,
	0, 298, 1076, 1077, 0, 1492, 0, 817, 0, 0,
	1082, 0, 0, 0, 247, 0, 1087, 1088, 1090, 1092,
	1093, 257, 1096, 1097, 0, 0, 0, 0, 1238, 0,
	298, 0, 1107, 246, 248, 0, 918, 1232, 0, 298,
	940, 0, 0, 0, 1233, 1041, 0, 745, 878, 548,
	717, 0, 0, 0, 878, 0, 0, 0, 0, 743,
	0, 0, 0, 0, 0, 939, 0, 249, 719, 740,
	0, 0, 0, 0, 0, 733, 1590, 250, 251, 915,
	692, 0, 243, 298, 0, 0, 1132, 0, 718, 918,
	0, 0, 252, 940, 0, 1139, 0, 739, 0, 1234,
	0, 0, 1156, 0, 298, 0, 0, 0, 1238, 0,
	918, 0, 0, 0, 940, 0, 0, 0, 939, 275,
	0, 1041, 0, 0, 1233, 0, 0, 0, 0, 0,
	734, 0, 915, 0, 0, 0, 0, 0, 0, 939,
	742, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1629, 915, 0, 0, 0, 0, 0, 0,
	0, 0, 1229, 1230, 1231, 0, 1228, 1225, 1226, 1227,
	1220, 1221, 1222, 1223, 1224, 0, 0, 0, 0, 1234,
	0, 733, 253, 0, 918, 254, 0, 0, 940, 0,
	255, 741, 0, 729, 730, 731, 0, 728, 725, 726,
	727, 720, 721, 722, 723, 724, 0, 0, 0, 1071,
	0, 0, 0, 939, 0, 0, 0, 0, 1072, 0,
	0, 0, 0, 0, 0, 0, 0, 915, 0, 0,
	275, 0, 0, 275, 275, 0, 734, 0, 0, 0,
	0, 0, 1229, 1230, 1231, 0, 1228, 1225, 1226, 1227,
	1220, 1221, 1222, 1223, 1224, 0, 754, 0, 0, 0,
	758, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 713, 0, 0, 0,
	717, 0, 735, 736, 737, 0, 0, 0, 0, 0,
	0, 0, 738, 0, 0, 0, 0, 0, 719, 0,
	744, 0, 298, 0, 725, 726, 727, 720, 721, 722,
	723, 724, 0, 0, 0, 1302, 0, 817, 718, 692,
	0, 0, 1308, 0, 732, 0, 0, 0, 717, 0,
	735, 736, 737, 0, 298, 0, 0, 298, 0, 0,
	738, 0, 0, 1156, 0, 0, 719, 1327, 744, 1156,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 32, 0, 32, 0, 718, 0, 0, 0,
	0, 0, 732, 0, 0, 0, 32, 0, 0, 0,
	0, 0, 0, 745, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 743, 0, 0, 0, 0,
	1369, 0, 0, 0, 0, 740, 0, 0, 0, 0,
	0, 733, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1219, 0, 1235, 1236, 1237,
	0, 745, 0, 739, 0, 0, 0, 0, 0, 0,
	0, 0, 717, 743, 735, 736, 737, 0, 0, 0,
	0, 0, 0, 740, 738, 0, 0, 0, 0, 733,
	719, 0, 744, 1420, 1421, 817, 734, 0, 0, 1232,
	0, 713, 713, 0, 0, 0, 742, 1445, 0, 1446,
	718, 298, 1448, 1449, 1450, 0, 732, 0, 0, 298,
	0, 0, 0, 0, 0, 0, 1460, 0, 817, 1460,
	0, 0, 0, 0, 0, 0, 0, 298, 298, 0,
	0, 298, 0, 0, 734, 0, 0, 0, 0, 0,
	713, 1156, 0, 0, 742, 0, 0, 741, 0, 729,
	730, 731, 0, 728, 725, 726, 727, 720, 721, 722,
	723, 724, 0, 0, 0, 745, 0, 0, 0, 0,
	1522, 910, 0, 0, 0, 0, 1233, 743, 0, 0,
	0, 0, 1510, 0, 0, 0, 0, 740, 0, 0,
	0, 0, 0, 733, 0, 741, 0, 729, 730, 731,
	988, 728, 725, 726, 727, 720, 721, 722, 723, 724,
	0, 0, 0, 0, 0, 739, 0, 0, 0, 0,
	0, 0, 717, 0, 735, 736, 737, 0, 0, 0,
	0, 1234, 0, 0, 738, 817, 0, 1528, 0, 243,
	719, 0, 744, 0, 0, 0, 298, 0, 734, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 742, 0,
	718, 0, 0, 0, 713, 0, 732, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1460, 0,
	0, 298, 0, 1569, 0, 0, 0, 0, 0, 0,
	0, 298, 0, 283, 1229, 1230, 1231, 713, 1228, 1225,
	1226, 1227, 1220, 1221, 1222, 1223, 1224, 0, 0, 741,
	0, 729, 730, 731, 0, 728, 725, 726, 727, 720,
	721, 722, 723, 724, 0, 745, 0, 0, 0, 0,
	0, 0, 1259, 0, 0, 0, 0, 743, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 740, 0, 0,
	0, 0, 0, 733, 0, 0, 0, 32, 0, 1604,
	1605, 0, 0, 1609, 0, 0, 0, 1157, 1460, 0,
	0, 243, 0, 0, 0, 739, 0, 0, 0, 0,
	0, 0, 0, 713, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 734, 0,
	0, 713, 713, 298, 0, 243, 0, 0, 742, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	988, 1460, 1569, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 754, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 298, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 741,
	0, 729, 730, 731, 0, 728, 725, 726, 727, 720,
	721, 722, 723, 724, 0, 0, 0, 0, 0, 0,
	0, 0, 1258, 0, 0, 0, 0, 0, 0, 0,
	754, 0, 0, 444, 433, 434, 431, 432, 420, 0,
	0, 0, 0, 0, 0, 88, 89, 1006, 90, 0,
	0, 0, 0, 426, 0, 0, 0, 91, 92, 189,
	473, 474, 93, 475, 476, 0, 94, 194, 195, 95,
	441, 459, 477, 478, 198, 0, 469, 0, 452, 0,
	96, 97, 98, 0, 99, 0, 100, 0, 330, 101,
	102, 0, 453, 455, 0, 454, 456, 103, 104, 105,
	106, 479, 107, 480, 481, 0, 0, 108, 0, 1007,
	0, 472, 110, 0, 111, 0, 0, 0, 425, 112,
	460, 439, 0, 113, 114, 482, 115, 910, 116, 0,
	910, 331, 0, 117, 470, 0, 207, 0, 118, 119,
	466, 468, 0, 0, 120, 0, 332, 121, 483, 484,
	485, 0, 451, 0, 333, 122, 334, 123, 124, 0,
	0, 471, 335, 125, 336, 0, 126, 0, 0, 127,
	0, 128, 129, 130, 131, 132, 337, 133, 134, 137,
	135, 415, 136, 440, 467, 138, 486, 139, 140, 0,
	0, 0, 0, 0, 141, 217, 338, 142, 339, 461,
	143, 144, 0, 462, 145, 220, 0, 146, 147, 148,
	487, 149, 150, 0, 152, 153, 151, 154, 0, 155,
	340, 156, 157, 429, 158, 0, 244, 159, 160, 0,
	161, 162, 457, 163, 164, 341, 165, 488, 166, 0,
	167, 168, 170, 489, 169, 463, 0, 0, 171, 172,
	0, 226, 490, 491, 0, 0, 173, 464, 465, 438,
	174, 175, 176, 177, 0, 0, 178, 179, 180, 458,
	0, 181, 182, 183, 231, 492, 1005, 184, 0, 0,
	0, 32, 185, 186, 187, 188, 416, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 412, 413, 1008, 0,
	910, 910, 414, 0, 910, 421, 1003, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1553, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 590, 0, 0, 0,
	0, 0, 0, 0, 910, 0, 0, 0, 88, 89,
	595, 90, 596, 597, 598, 599, 600, 601, 602, 603,
	91, 92, 189, 190, 191, 93, 192, 193, 604, 94,
	194, 195, 95, 605, 606, 196, 197, 198, 607, 199,
	608, 329, 609, 96, 97, 98, 0, 99, 610, 100,
	611, 330, 101, 102, 612, 613, 614, 615, 616, 617,
	103, 104, 105, 106, 200, 107, 201, 202, 618, 619,
	108, 620, 621, 622, 109, 110, 623, 111, 624, 754,
	625, 203, 112, 204, 626, 627, 113, 114, 205, 115,
	628, 116, 629, 630, 331, 631, 117, 206, 632, 207,
	633, 118, 119, 208, 209, 634, 635, 120, 636, 332,
	121, 210, 211, 212, 637, 213, 638, 333, 122, 334,
	123, 124, 639, 640, 214, 335, 125, 336, 641, 126,
	642, 643, 127, 0, 128, 129, 130, 131, 132, 337,
	133, 134, 137, 135, 644, 136, 645, 215, 138, 216,
	139, 140, 646, 647, 648, 649, 650, 141, 217, 338,
	142, 339, 218, 143, 144, 651, 219, 145, 220, 652,
	146, 147, 148, 221, 149, 150, 653, 152, 153, 151,
	154, 654, 155, 340, 156, 157, 222, 158, 0, 244,
	159, 160, 655, 161, 162, 656, 163, 164, 341, 165,
	223, 166, 657, 167, 168, 170, 224, 169, 225, 658,
	659, 171, 172, 660, 226, 227, 228, 661, 662, 173,
	229, 230, 663, 174, 175, 176, 177, 664, 665, 178,
	179, 180, 666, 667, 181, 182, 183, 231, 232, 668,
	184, 669, 670, 671, 672, 185, 186, 187, 188, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 590, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1326, 88, 89, 595, 90, 596,
	597, 598, 599, 600, 601, 602, 603, 91, 92, 189,
	190, 191, 93, 192, 193, 604, 94, 194, 195, 95,
	605, 606, 196, 197, 198, 607, 199, 608, 329, 609,
	96, 97, 98, 0, 99, 610, 100, 611, 330, 101,
	102, 612, 613, 614, 615, 616, 617, 103, 104, 105,
	106, 200, 107, 201, 202, 618, 619, 108, 620, 621,
	622, 109, 110, 623, 111, 624, 0, 625, 203, 112,
	204, 626, 627, 113, 114, 205, 115, 628, 116, 629,
	630, 331, 631, 117, 206, 632, 207, 633, 118, 119,
	208, 209, 634, 635, 120, 636, 332, 121, 210, 211,
	212, 637, 213, 638, 333, 122, 334, 123, 124, 639,
	640, 214, 335, 125, 336, 641, 126, 642, 643, 127,
	0, 128, 129, 130, 131, 132, 337, 133, 134, 137,
	135, 644, 136, 645, 215, 138, 216, 139, 140, 646,
	647, 648, 649, 650, 141, 217, 338, 142, 339, 218,
	143, 144, 651, 219, 145, 220, 652, 146, 147, 148,
	221, 149, 150, 653, 152, 153, 151, 154, 654, 155,
	340, 156, 157, 222, 158, 0, 244, 159, 160, 655,
	161, 162, 656, 163, 164, 341, 165, 223, 166, 657,
	167, 168, 170, 224, 169, 225, 658, 659, 171, 172,
	660, 226, 227, 228, 661, 662, 173, 229, 230, 663,
	174, 175, 176, 177, 664, 665, 178, 179, 180, 666,
	667, 181, 182, 183, 231, 232, 668, 184, 669, 670,
	671, 672, 185, 186, 187, 188, 0, 590, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 805, 88,
	89, 595, 90, 596, 597, 598, 599, 600, 601, 602,
	603, 91, 92, 189, 190, 191, 93, 192, 193, 604,
	94, 194, 195, 95, 605, 606, 196, 197, 198, 607,
	199, 608, 329, 609, 96, 97, 98, 0, 99, 610,
	100, 611, 330, 101, 102, 612, 613, 614, 615, 616,
	617, 103, 104, 105, 106, 200, 107, 201, 202, 618,
	619, 108, 620, 621, 622, 109, 110, 623, 111, 624,
	0, 625, 203, 112, 204, 626, 627, 113, 114, 205,
	115, 628, 116, 629, 630, 331, 631, 117, 206, 632,
	207, 633, 118, 119, 208, 209, 634, 635, 120, 636,
	332, 121, 210, 211, 212, 637, 213, 638, 333, 122,
	334, 123, 124, 639, 640, 214, 335, 125, 336, 641,
	126, 642, 643, 127, 0, 128, 129, 130, 131, 132,
	337, 133, 134, 137, 135, 644, 136, 645, 215, 138,
	216, 139, 140, 646, 647, 648, 649, 650, 141, 217,
	338, 142, 339, 218, 143, 144, 651, 219, 145, 220,
	652, 146, 147, 148, 221, 149, 150, 653, 152, 153,
	151, 154, 654, 155, 340, 156, 157, 222, 158, 0,
	244, 159, 160, 655, 161, 162, 656, 163, 164, 341,
	165, 223, 166, 657, 167, 168, 170, 224, 169, 225,
	658, 659, 171, 172, 660, 226, 227, 228, 661, 662,
	173, 229, 230, 663, 174, 175, 176, 177, 664, 665,
	178, 179, 180, 666, 667, 181, 182, 183, 231, 232,
	668, 184, 669, 670, 671, 672, 185, 186, 187, 188,
	444, 433, 434, 431, 432, 420, 0, 0, 0, 0,
	0, 0, 88, 89, 0, 90, 0, 0, 0, 0,
	426, 0, 0, 0, 91, 92, 189, 473, 474, 93,
	475, 476, 0, 94, 194, 195, 95, 441, 459, 477,
	478, 198, 0, 469, 0, 452, 0, 96, 97, 98,
	0, 99, 0, 100, 0, 330, 101, 102, 0, 453,
	455, 0, 454, 456, 103, 104, 105, 106, 479, 107,
	480, 481, 513, 0, 108, 0, 0, 0, 472, 110,
	0, 111, 0, 0, 0, 425, 112, 460, 439, 0,
	113, 114, 482, 115, 0, 116, 0, 0, 331, 0,
	117, 470, 0, 207, 0, 118, 119, 466, 468, 0,
	0, 120, 0, 332, 121, 483, 484, 485, 0, 451,
	0, 333, 122, 334, 123, 124, 0, 0, 471, 335,
	125, 336, 0, 126, 0, 0, 127, 0, 128, 129,
	130, 131, 132, 337, 133, 134, 137, 135, 415, 136,
	440, 467, 138, 486, 139, 140, 0, 0, 0, 0,
	0, 141, 217, 338, 142, 339, 461, 143, 144, 0,
	462, 145, 220, 0, 146, 147, 148, 487, 149, 150,
	0, 152, 153, 151, 154, 0, 155, 340, 156, 157,
	429, 158, 0, 244, 159, 160, 49, 161, 162, 457,
	163, 164, 341, 165, 488, 166, 0, 167, 168, 170,
	489, 169, 463, 0, 51, 171, 172, 0, 226, 490,
	491, 0, 0, 173, 464, 465, 438, 174, 175, 176,
	177, 0, 0, 178, 179, 180, 458, 0, 181, 182,
	183, 328, 492, 0, 184, 0, 0, 0, 47, 185,
	186, 187, 188, 416, 48, 444, 433, 434, 431, 432,
	420, 0, 0, 412, 413, 0, 0, 88, 89, 414,
	90, 0, 421, 0, 0, 426, 0, 0, 0, 91,
	92, 189, 473, 474, 93, 475, 476, 0, 94, 194,
	195, 95, 441, 459, 477, 478, 198, 0, 469, 0,
	452, 0, 96, 97, 98, 0, 99, 0, 100, 0,
	330, 101, 102, 0, 453, 455, 0, 454, 456, 103,
	104, 105, 106, 479, 107, 480, 481, 0, 0, 108,
	0, 0, 0, 472, 110, 0, 111, 0, 0, 0,
	425, 112, 460, 439, 0, 113, 114, 482, 115, 0,
	116, 0, 0, 331, 0, 117, 470, 0, 207, 0,
	118, 119, 466, 468, 0, 0, 120, 0, 332, 121,
	483, 484, 485, 0, 451, 0, 333, 122, 334, 123,
	124, 0, 0, 471, 335, 125, 336, 0, 126, 0,
	0, 127, 0, 128, 129, 130, 131, 132, 337, 133,
	134, 137, 135, 415, 136, 440, 467, 138, 486, 139,
	140, 0, 0, 0, 0, 0, 141, 217, 338, 142,
	339, 461, 143, 144, 0, 462, 145, 220, 0, 146,
	147, 148, 487, 149, 150, 0, 152, 153, 151, 154,
	0, 155, 340, 156, 157, 429, 158, 0, 244, 159,
	160, 49, 161, 162, 457, 163, 164, 341, 165, 488,
	166, 0, 167, 168, 170, 489, 169, 463, 0, 51,
	171, 172, 0, 226, 490, 491, 0, 0, 173, 464,
	465, 438, 174, 175, 176, 177, 0, 0, 178, 179,
	180, 458, 0, 181, 182, 183, 328, 492, 0, 184,
	0, 0, 0, 47, 185, 186, 187, 188, 416, 48,
	444, 433, 434, 431, 432, 420, 0, 0, 412, 413,
	0, 0, 88, 89, 414, 90, 0, 421, 0, 0,
	426, 0, 0, 0, 91, 92, 189, 473, 474, 93,
	475, 476, 1051, 94, 194, 195, 95, 441, 459, 477,
	478, 198, 0, 469, 0, 452, 0, 96, 97, 98,
	0, 99, 0, 100, 0, 330, 101, 102, 0, 453,
	455, 0, 454, 456, 103, 104, 105, 106, 479, 107,
	480, 481, 0, 0, 108, 0, 0, 0, 472, 110,
	0, 111, 0, 0, 0, 425, 112, 460, 439, 0,
	113, 114, 482, 115, 0, 116, 0, 1056, 331, 0,
	117, 470, 0, 207, 0, 118, 119, 466, 468, 0,
	0, 120, 0, 332, 121, 483, 484, 485, 0, 451,
	0, 333, 122, 334, 123, 124, 0, 1052, 471, 335,
	125, 336, 0, 126, 0, 0, 127, 0, 128, 129,
	130, 131, 132, 337, 133, 134, 137, 135, 415, 136,
	440, 467, 138, 486, 139, 140, 0, 0, 0, 0,
	0, 141, 217, 338, 142, 339, 461, 143, 144, 0,
	462, 145, 220, 0, 146, 147, 148, 487, 149, 150,
	0, 152, 153, 151, 154, 0, 155, 340, 156, 157,
	429, 158, 0, 244, 159, 160, 0, 161, 162, 457,
	163, 164, 341, 165, 488, 166, 0, 167, 168, 170,
	489, 169, 463, 0, 0, 171, 172, 0, 226, 490,
	491, 0, 1053, 173, 464, 465, 438, 174, 175, 176,
	177, 0, 0, 178, 179, 180, 458, 0, 181, 182,
	183, 231, 492, 0, 184, 0, 0, 0, 0, 185,
	186, 187, 188, 416, 0, 444, 433, 434, 431, 432,
	420, 0, 0, 412, 413, 0, 0, 88, 89, 414,
	90, 0, 421, 0, 0, 426, 0, 0, 0, 91,
	92, 189, 473, 474, 93, 475, 476, 0, 94, 194,
	195, 95, 441, 459, 477, 478, 198, 0, 469, 0,
	452, 0, 96, 97, 98, 0, 99, 0, 100, 0,
	330, 101, 102, 0, 453, 455, 0, 454, 456, 103,
	104, 105, 106, 479, 107, 480, 481, 0, 0, 108,
	0, 0, 0, 472, 110, 0, 111, 0, 0, 0,
	425, 112, 460, 439, 0, 113, 114, 482, 115, 0,
	116, 0, 0, 331, 0, 117, 470, 0, 207, 0,
	118, 119, 466, 468, 0, 0, 120, 0, 332, 121,
	483, 484, 485, 0, 451, 0, 333, 122, 334, 123,
	124, 0, 0, 471, 335, 125, 336, 0, 126, 0,
	0, 127, 0, 128, 129, 130, 131, 132, 337, 133,
	134, 137, 135, 415, 136, 440, 467, 138, 486, 139,
	140, 0, 0, 0, 0, 0, 141, 217, 338, 142,
	339, 461, 143, 144, 0, 462, 145, 220, 0, 146,
	147, 148, 487, 149, 150, 0, 152, 153, 151, 154,
	0, 155, 340, 156, 157, 429, 158, 0, 244, 159,
	160, 0, 161, 162, 457, 163, 164, 341, 165, 488,
	166, 0, 167, 168, 170, 489, 169, 463, 0, 0,
	171, 172, 0, 226, 490, 491, 0, 0, 173, 464,
	465, 438, 174, 175, 176, 177, 0, 0, 178, 179,
	180, 458, 0, 181, 182, 183, 231, 492, 0, 184,
	0, 0, 0, 0, 185, 186, 187, 188, 416, 0,
	444, 433, 434, 431, 432, 420, 0, 0, 412, 413,
	0, 0, 88, 89, 414, 90, 0, 421, 1403, 0,
	426, 0, 0, 0, 91, 92, 189, 473, 474, 93,
	475, 476, 0, 94, 194, 195, 95, 441, 459, 477,
	478, 198, 0, 469, 0, 452, 0, 96, 97, 98,
	0, 99, 0, 100, 0, 330, 101, 102, 0, 453,
	455, 0, 454, 456, 103, 104, 105, 106, 479, 107,
	480, 481, 0, 0, 108, 0, 0, 0, 472, 110,
	0, 111, 0, 0, 0, 425, 112, 460, 439, 0,
	113, 114, 482, 115, 0, 116, 0, 0, 331, 0,
	117, 470, 0, 207, 0, 118, 119, 466, 468, 0,
	0, 120, 0, 332, 121, 483, 484, 485, 0, 451,
	0, 333, 122, 334, 123, 124, 0, 0, 471, 335,
	125, 336, 0, 126, 0, 0, 127, 0, 128, 129,
	130, 131, 132, 337, 133, 134, 137, 135, 415, 136,
	440, 467, 138, 486, 139, 140, 0, 0, 0, 0,
	0, 141, 217, 338, 142, 339, 461, 143, 144, 0,
	462, 145, 220, 0, 146, 147, 148, 487, 149, 150,
	0, 152, 153, 151, 154, 0, 155, 340, 156, 157,
	429, 158, 0, 244, 159, 160, 0, 161, 162, 457,
	163, 164, 341, 165, 488, 166, 0, 167, 168, 170,
	489, 169, 463, 0, 0, 171, 172, 0, 226, 490,
	491, 0, 0, 173, 464, 465, 438, 174, 175, 176,
	177, 0, 0, 178, 179, 180, 458, 0, 181, 182,
	183, 231, 492, 0, 184, 0, 0, 0, 0, 185,
	186, 187, 188, 416, 0, 444, 433, 434, 431, 432,
	420, 0, 0, 412, 413, 0, 0, 88, 89, 414,
	90, 0, 421, 1346, 0, 426, 0, 0, 0, 91,
	92, 189, 473, 474, 93, 475, 476, 0, 94, 194,
	195, 95, 441, 459, 477, 478, 198, 0, 469, 0,
	452, 0, 96, 97, 98, 0, 99, 0, 100, 0,
	330, 101, 102, 0, 453, 455, 0, 454, 456, 103,
	104, 105, 106, 479, 107, 480, 481, 0, 0, 108,
	0, 0, 0, 472, 110, 0, 111, 0, 0, 0,
	425, 112, 460, 439, 0, 113, 114, 482, 115, 0,
	116, 0, 0, 331, 0, 117, 470, 0, 207, 0,
	118, 119, 466, 468, 0, 0, 120, 0, 332, 121,
	483, 484, 485, 0, 451, 0, 333, 122, 334, 123,
	124, 0, 0, 471, 335, 125, 336, 0, 126, 0,
	0, 127, 0, 128, 129, 130, 131, 132, 337, 133,
	134, 137, 135, 415, 136, 440, 467, 138, 486, 139,
	140, 0, 0, 0, 0, 0, 141, 217, 338, 142,
	339, 461, 143, 144, 0, 462, 145, 220, 0, 146,
	147, 148, 487, 149, 150, 0, 152, 153, 151, 154,
	0, 155, 340, 156, 157, 429, 158, 0, 244, 159,
	160, 0, 161, 162, 457, 163, 164, 341, 165, 488,
	166, 0, 167, 168, 170, 489, 169, 463, 0, 0,
	171, 172, 0, 226, 490, 491, 0, 0, 173, 464,
	465, 438, 174, 175, 176, 177, 0, 0, 178, 179,
	180, 458, 0, 181, 182, 183, 231, 492, 0, 184,
	0, 0, 0, 0, 185, 186, 187, 188, 416, 0,
	444, 433, 434, 431, 432, 420, 0, 0, 412, 413,
	0, 0, 88, 89, 414, 90, 0, 421, 1002, 0,
	426, 0, 0, 0, 91, 92, 189, 473, 474, 93,
	475, 476, 0, 94, 194, 195, 95, 441, 459, 477,
	478, 198, 0, 469, 0, 452, 0, 96, 97, 98,
	0, 99, 0, 100, 0, 330, 101, 102, 0, 453,
	455, 0, 454, 456, 103, 104, 105, 106, 479, 107,
	480, 481, 0, 0, 108, 0, 0, 0, 472, 110,
	0, 111, 0, 0, 0, 425, 112, 460, 439, 0,
	113, 114, 482, 115, 0, 116, 0, 0, 331, 0,
	117, 470, 0, 207, 0, 118, 119, 466, 468, 0,
	0, 120, 0, 332, 121, 483, 484, 485, 0, 451,
	0, 333, 122, 334, 123, 124, 0, 0, 471, 335,
	125, 336, 0, 126, 0, 0, 127, 0, 128, 129,
	130, 131, 132, 337, 133, 134, 137, 135, 415, 136,
	440, 467, 138, 486, 139, 140, 0, 0, 0, 0,
	0, 141, 217, 338, 142, 339, 461, 143, 144, 0,
	462, 145, 220, 0, 146, 147, 148, 487, 149, 150,
	0, 152, 153, 151, 154, 0, 155, 340, 156, 157,
	429, 158, 0, 244, 159, 160, 0, 161, 162, 457,
	163, 164, 341, 165, 488, 166, 0, 167, 168, 170,
	489, 169, 463, 0, 0, 171, 172, 0, 226, 490,
	491, 0, 0, 173, 464, 465, 438, 174, 175, 176,
	177, 0, 0, 178, 179, 180, 458, 0, 181, 182,
	183, 231, 492, 0, 184, 0, 0, 0, 0, 185,
	186, 187, 188, 416, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 412, 413, 0, 0, 0, 0, 414,
	760, 998, 421, 444, 433, 434, 431, 432, 420, 0,
	0, 0, 0, 0, 0, 88, 89, 0, 90, 0,
	0, 0, 0, 426, 0, 0, 0, 91, 92, 189,
	473, 474, 93, 475, 476, 0, 94, 194, 195, 95,
	441, 459, 477, 478, 198, 0, 469, 0, 452, 0,
	96, 97, 98, 0, 99, 0, 100, 0, 330, 101,
	102, 0, 453, 455, 0, 454, 456, 103, 104, 105,
	106, 479, 107, 480, 481, 0, 0, 108, 0, 0,
	0, 472, 110, 0, 111, 0, 0, 0, 425, 112,
	460, 439, 0, 113, 114, 482, 115, 0, 116, 0,
	0, 331, 0, 117, 470, 0, 207, 0, 118, 119,
	466, 468, 0, 0, 120, 0, 332, 121, 483, 484,
	485, 0, 451, 0, 333, 122, 334, 123, 124, 0,
	0, 471, 335, 125, 336, 0, 126, 0, 0, 127,
	0, 128, 129, 130, 131, 132, 337, 133, 134, 137,
	135, 415, 136, 440, 467, 138, 486, 139, 140, 0,
	0, 0, 0, 0, 141, 217, 338, 142, 339, 461,
	143, 144, 0, 462, 145, 220, 0, 146, 147, 148,
	487, 149, 150, 0, 152, 153, 151, 154, 0, 155,
	340, 156, 157, 429, 158, 0, 244, 159, 160, 0,
	161, 162, 457, 163, 164, 341, 165, 488, 166, 0,
	167, 168, 170, 489, 169, 463, 0, 0, 171, 172,
	0, 226, 490, 491, 0, 0, 173, 464, 465, 438,
	174, 175, 176, 177, 0, 0, 178, 179, 180, 458,
	0, 181, 182, 183, 231, 492, 1352, 184, 0, 0,
	0, 0, 185, 186, 187, 188, 416, 0, 444, 433,
	434, 431, 432, 420, 0, 0, 412, 413, 0, 0,
	88, 89, 414, 90, 0, 421, 0, 0, 426, 0,
	0, 0, 91, 92, 189, 473, 474, 93, 475, 476,
	0, 94, 194, 195, 95, 441, 459, 477, 478, 198,
	0, 469, 0, 452, 0, 96, 97, 98, 0, 99,
	0, 100, 0, 330, 101, 102, 0, 453, 455, 0,
	454, 456, 103, 104, 105, 106, 479, 107, 480, 481,
	513, 0, 108, 0, 0, 0, 472, 110, 0, 111,
	0, 0, 0, 425, 112, 460, 439, 0, 113, 114,
	482, 115, 0, 116, 0, 0, 331, 0, 117, 470,
	0, 207, 0, 118, 119, 466, 468, 0, 0, 120,
	0, 332, 121, 483, 484, 485, 0, 451, 0, 333,
	122, 334, 123, 124, 0, 0, 471, 335, 125, 336,
	0, 126, 0, 0, 127, 0, 128, 129, 130, 131,
	132, 337, 133, 134, 137, 135, 415, 136, 440, 467,
	138, 486, 139, 140, 0, 0, 0, 0, 0, 141,
	217, 338, 142, 339, 461, 143, 144, 0, 462, 145,
	220, 0, 146, 147, 148, 487, 149, 150, 0, 152,
	153, 151, 154, 0, 155, 340, 156, 157, 429, 158,
	0, 244, 159, 160, 0, 161, 162, 457, 163, 164,
	341, 165, 488, 166, 0, 167, 168, 170, 489, 169,
	463, 0, 0, 171, 172, 0, 226, 490, 491, 0,
	0, 173, 464, 465, 438, 174, 175, 176, 177, 0,
	0, 178, 179, 180, 458, 0, 181, 182, 183, 231,
	492, 0, 184, 0, 0, 0, 0, 185, 186, 187,
	188, 416, 0, 444, 433, 434, 431, 432, 420, 0,
	0, 412, 413, 0, 0, 88, 89, 414, 90, 0,
	421, 0, 0, 426, 0, 0, 0, 91, 92, 189,
	473, 474, 93, 475, 476, 0, 94, 194, 195, 95,
	441, 459, 477, 478, 198, 0, 469, 0, 452, 0,
	96, 97, 98, 0, 99, 0, 100, 0, 330, 101,
	102, 0, 453, 455, 0, 454, 456, 103, 104, 105,
	106, 479, 107, 480, 481, 0, 0, 108, 0, 0,
	0, 472, 110, 0, 111, 0, 0, 0, 425, 112,
	460, 439, 0, 113, 114, 482, 115, 0, 116, 0,
	0, 331, 0, 117, 470, 0, 207, 0, 118, 119,
	466, 468, 0, 0, 120, 0, 332, 121, 483, 484,
	485, 0, 451, 0, 333, 122, 334, 123, 124, 0,
	0, 471, 335, 125, 336, 0, 126, 0, 0, 127,
	0, 128, 129, 130, 131, 132, 337, 133, 134, 137,
	135, 415, 136, 440, 467, 138, 486, 139, 140, 0,
	0, 0, 0, 0, 141, 217, 338, 142, 339, 461,
	143, 144, 0, 462, 145, 220, 0, 146, 147, 148,
	487, 149, 150, 0, 152, 153, 151, 154, 0, 155,
	340, 156, 157, 429, 158, 0, 244, 159, 160, 0,
	161, 162, 457, 163, 164, 341, 165, 488, 166, 0,
	167, 168, 170, 489, 169, 463, 0, 0, 171, 172,
	0, 226, 490, 491, 0, 0, 173, 464, 465, 438,
	174, 175, 176, 177, 0, 0, 178, 179, 180, 458,
	0, 181, 182, 183, 231, 492, 0, 184, 0, 0,
	0, 0, 185, 186, 187, 188, 416, 0, 444, 433,
	434, 431, 432, 420, 0, 0, 412, 413, 410, 0,
	88, 89, 414, 90, 0, 421, 0, 0, 426, 0,
	0, 0, 91, 92, 189, 473, 474, 93, 475, 476,
	0, 94, 194, 195, 95, 441, 459, 477, 478, 198,
	0, 469, 0, 452, 0, 96, 97, 98, 0, 99,
	0, 100, 0, 330, 101, 102, 0, 453, 455, 0,
	454, 456, 103, 104, 105, 106, 479, 107, 480, 481,
	0, 0, 108, 0, 0, 0, 472, 110, 0, 111,
	0, 0, 0, 425, 112, 460, 439, 0, 113, 114,
	482, 115, 0, 116, 0, 1056, 331, 0, 117, 470,
	0, 207, 0, 118, 119, 466, 468, 0, 0, 120,
	0, 332, 121, 483, 484, 485, 0, 451, 0, 333,
	122, 334, 123, 124, 0, 0, 471, 335, 125, 336,
	0, 126, 0, 0, 127, 0, 128, 129, 130, 131,
	132, 337, 133, 134, 137, 135, 415, 136, 440, 467,
	138, 486, 139, 140, 0, 0, 0, 0, 0, 141,
	217, 338, 142, 339, 461, 143, 144, 0, 462, 145,
	220, 0, 146, 147, 148, 487, 149, 150, 0, 152,
	153, 151, 154, 0, 155, 340, 156, 157, 429, 158,
	0, 244, 159, 160, 0, 161, 162, 457, 163, 164,
	341, 165, 488, 166, 0, 167, 168, 170, 489, 169,
	463, 0, 0, 171, 172, 0, 226, 490, 491, 0,
	0, 173, 464, 465, 438, 174, 175, 176, 177, 0,
	0, 178, 179, 180, 458, 0, 181, 182, 183, 231,
	492, 0, 184, 0, 0, 0, 0, 185, 186, 187,
	188, 416, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 412, 413, 0, 0, 0, 0, 414, 0, 0,
	421, 444, 433, 434, 431, 432, 420, 0, 0, 0,
	0, 0, 0, 88, 89, 701, 90, 0, 0, 0,
	0, 426, 0, 0, 0, 91, 92, 189, 473, 474,
	93, 475, 476, 0, 94, 194, 195, 95, 441, 459,
	477, 478, 198, 0, 469, 0, 452, 0, 96, 97,
	98, 0, 99, 0, 100, 0, 330, 101, 102, 0,
	453, 455, 0, 454, 456, 103, 104, 105, 106, 479,
	107, 480, 481, 0, 0, 108, 0, 0, 0, 472,
	110, 0, 111, 0, 0, 0, 425, 112, 460, 439,
	0, 113, 114, 482, 115, 0, 116, 0, 0, 331,
	0, 117, 470, 0, 207, 0, 118, 119, 466, 468,
	0, 0, 120, 0, 332, 121, 483, 484, 485, 0,
	451, 0, 333, 122, 334, 123, 124, 0, 0, 471,
	335, 125, 336, 0, 126, 0, 0, 127, 0, 128,
	129, 130, 131, 132, 337, 133, 134, 137, 135, 415,
	136, 440, 467, 138, 486, 139, 140, 0, 0, 0,
	0, 0, 141, 217, 338, 142, 339, 461, 143, 144,
	0, 462, 145, 220, 0, 146, 147, 148, 487, 149,
	150, 0, 152, 153, 151, 154, 0, 155, 340, 156,
	157, 429, 158, 0, 244, 159, 160, 0, 161, 162,
	457, 163, 164, 341, 165, 488, 166, 0, 167, 168,
	170, 489, 169, 463, 0, 0, 171, 172, 0, 226,
	490, 491, 0, 0, 173, 464, 465, 438, 174, 175,
	176, 177, 0, 0, 178, 179, 180, 458, 0, 181,
	182, 183, 231, 492, 0, 184, 0, 0, 0, 0,
	185, 186, 187, 188, 416, 0, 444, 433, 434, 431,
	432, 420, 0, 0, 412, 413, 0, 0, 88, 89,
	414, 90, 0, 421, 0, 0, 426, 0, 0, 0,
	91, 92, 189, 473, 474, 93, 475, 476, 0, 94,
	194, 195, 95, 441, 459, 477, 478, 198, 0, 469,
	0, 452, 0, 96, 97, 98, 0, 99, 0, 100,
	0, 330, 101, 1676, 0, 453, 455, 0, 454, 456,
	103, 104, 105, 106, 479, 107, 480, 481, 0, 0,
	108, 0, 0, 0, 472, 110, 0, 111, 0, 0,
	0, 425, 112, 460, 439, 0, 113, 114, 482, 115,
	0, 116, 0, 0, 331, 0, 117, 470, 0, 207,
	0, 118, 119, 466, 468, 0, 0, 120, 0, 332,
	121, 483, 484, 485, 0, 451, 0, 333, 122, 334,
	123, 124, 0, 0, 471, 335, 125, 336, 0, 126,
	0, 0, 127, 0, 128, 129, 130, 131, 132, 337,
	133, 134, 137, 135, 415, 136, 440, 467, 138, 486,
	139, 140, 0, 0, 0, 0, 0, 141, 217, 338,
	142, 339, 461, 143, 144, 0, 462, 145, 220, 0,
	146, 147, 148, 487, 149, 150, 0, 152, 153, 151,
	154, 0, 155, 340, 156, 157, 429, 158, 0, 244,
	159, 160, 0, 161, 162, 457, 163, 164, 341, 165,
	488, 166, 0, 167, 168, 170, 489, 169, 463, 0,
	0, 171, 172, 0, 226, 490, 491, 0, 0, 173,
	464, 465, 438, 174, 175, 1675, 177, 0, 0, 178,
	179, 180, 458, 0, 181, 182, 183, 231, 492, 0,
	184, 0, 0, 0, 0, 185, 186, 187, 188, 416,
	0, 444, 433, 434, 431, 432, 420, 0, 0, 412,
	413, 0, 0, 88, 89, 414, 90, 0, 421, 0,
	0, 426, 0, 0, 0, 91, 92, 1674, 473, 474,
	93, 475, 476, 0, 94, 194, 195, 95, 441, 459,
	477, 478, 198, 0, 469, 0, 452, 0, 96, 97,
	98, 0, 99, 0, 100, 0, 330, 101, 1676, 0,
	453, 455, 0, 454, 456, 103, 104, 105, 106, 479,
	107, 480, 481, 0, 0, 108, 0, 0, 0, 472,
	110, 0, 111, 0, 0, 0, 425, 112, 460, 439,
	0, 113, 114, 482, 115, 0, 116, 0, 0, 331,
	0, 117, 470, 0, 207, 0, 118, 119, 466, 468,
	0, 0, 120, 0, 332, 121, 483, 484, 485, 0,
	451, 0, 333, 122, 334, 123, 124, 0, 0, 471,
	335, 125, 336, 0, 126, 0, 0, 127, 0, 128,
	129, 130, 131, 132, 337, 133, 134, 137, 135, 415,
	136, 440, 467, 138, 486, 139, 140, 0, 0, 0,
	0, 0, 141, 217, 338, 142, 339, 461, 143, 144,
	0, 462, 145, 220, 0, 146, 147, 148, 487, 149,
	150, 0, 152, 153, 151, 154, 0, 155, 340, 156,
	157, 429, 158, 0, 244, 159, 160, 0, 161, 162,
	457, 163, 164, 341, 165, 488, 166, 0, 167, 168,
	170, 489, 169, 463, 0, 0, 171, 172, 0, 226,
	490, 491, 0, 0, 173, 464, 465, 438, 174, 175,
	1675, 177, 0, 0, 178, 179, 180, 458, 0, 181,
	182, 183, 231, 492, 0, 184, 0, 0, 0, 0,
	185, 186, 187, 188, 416, 0, 444, 433, 434, 431,
	432, 420, 0, 0, 412, 413, 0, 0, 88, 89,
	414, 90, 0, 421, 0, 0, 426, 0, 0, 0,
	91, 92, 189, 473, 474, 93, 475, 476, 0, 94,
	194, 195, 95, 441, 459, 477, 478, 198, 0, 469,
	0, 452, 0, 96, 97, 98, 0, 99, 0, 100,
	0, 330, 101, 102, 0, 453, 455, 0, 454, 456,
	103, 104, 105, 106, 479, 107, 480, 481, 0, 0,
	108, 0, 0, 0, 472, 110, 0, 111, 0, 0,
	0, 425, 112, 460, 439, 0, 113, 114, 482, 115,
	0, 116, 0, 0, 331, 0, 117, 470, 0, 207,
	0, 118, 119, 466, 468, 0, 0, 120, 0, 332,
	121, 483, 484, 485, 0, 451, 0, 333, 122, 334,
	123, 124, 0, 0, 471, 335, 125, 336, 0, 126,
	0, 0, 127, 0, 128, 129, 130, 131, 132, 337,
	133, 134, 137, 135, 415, 136, 440, 467, 138, 486,
	139, 140, 0, 0, 0, 0, 0, 141, 217, 338,
	142, 339, 461, 143, 144, 0, 462, 145, 220, 0,
	146, 147, 148, 487, 149, 150, 0, 152, 153, 151,
	154, 0, 155, 340, 156, 157, 429, 158, 0, 244,
	159, 160, 0, 161, 162, 457, 163, 164, 341, 165,
	488, 166, 0, 167, 168, 170, 489, 169, 463, 0,
	0, 171, 172, 0, 226, 490, 491, 0, 0, 173,
	464, 465, 438, 174, 175, 176, 177, 0, 0, 178,
	179, 180, 458, 0, 181, 182, 183, 231, 492, 0,
	184, 0, 0, 0, 0, 185, 186, 187, 188, 416,
	0, 444, 433, 434, 431, 432, 420, 0, 0, 412,
	413, 0, 0, 88, 89, 414, 90, 0, 421, 0,
	0, 426, 0, 0, 0, 91, 92, 189, 473, 474,
	93, 475, 476, 0, 94, 194, 195, 95, 441, 459,
	477, 478, 198, 0, 469, 0, 452, 0, 96, 97,
	98, 0, 99, 0, 100, 0, 330, 101, 102, 0,
	453, 455, 0, 454, 456, 103, 104, 105, 106, 479,
	107, 480, 481, 0, 0, 108, 0, 0, 0, 472,
	110, 0, 111, 0, 0, 0, 425, 112, 460, 439,
	0, 113, 114, 482, 115, 0, 116, 0, 0, 331,
	0, 117, 470, 0, 207, 0, 118, 119, 466, 468,
	0, 0, 120, 0, 332, 121, 483, 484, 485, 0,
	451, 0, 333, 122, 334, 123, 124, 0, 0, 471,
	335, 125, 336, 0, 126, 0, 0, 127, 0, 128,
	129, 130, 131, 132, 337, 133, 134, 137, 135, 0,
	136, 440, 467, 138, 486, 139, 140, 0, 0, 0,
	0, 0, 141, 217, 338, 142, 339, 461, 143, 144,
	0, 462, 145, 220, 0, 146, 147, 148, 487, 149,
	150, 0, 152, 153, 151, 154, 0, 155, 340, 156,
	157, 1046, 158, 0, 244, 159, 160, 0, 161, 162,
	457, 163, 164, 341, 165, 488, 166, 0, 167, 168,
	170, 489, 169, 463, 0, 0, 171, 172, 0, 226,
	490, 491, 0, 0, 173, 464, 465, 438, 174, 175,
	176, 177, 0, 0, 178, 179, 180, 458, 0, 181,
	182, 183, 231, 492, 0, 184, 0, 0, 0, 0,
	185, 186, 187, 188, 444, 433, 434, 431, 432, 420,
	0, 0, 0, 0, 1042, 1043, 88, 89, 0, 90,
	1044, 0, 0, 1045, 426, 0, 0, 0, 91, 92,
	0, 473, 474, 93, 475, 476, 0, 94, 194, 195,
	95, 441, 459, 477, 478, 198, 0, 469, 0, 452,
	0, 96, 97, 98, 0, 99, 0, 100, 0, 330,
	101, 1676, 0, 453, 455, 0, 454, 456, 103, 104,
	105, 106, 479, 107, 480, 481, 0, 0, 108, 0,
	0, 0, 472, 110, 0, 111, 0, 0, 0, 425,
	112, 460, 439, 0, 113, 114, 482, 115, 0, 116,
	0, 0, 331, 0, 117, 470, 0, 207, 0, 118,
	119, 466, 468, 0, 0, 120, 0, 332, 121, 483,
	484, 485, 0, 451, 0, 0, 122, 334, 123, 124,
	0, 0, 471, 335, 125, 0, 0, 126, 0, 0,
	127, 0, 128, 129, 130, 131, 132, 337, 133, 134,
	137, 135, 415, 136, 440, 467, 138, 486, 139, 140,
	0, 0, 0, 0, 0, 141, 217, 338, 142, 339,
	461, 143, 144, 0, 462, 145, 220, 0, 146, 147,
	148, 487, 149, 150, 0, 152, 153, 151, 154, 0,
	155, 340, 156, 157, 429, 158, 0, 244, 159, 160,
	0, 161, 162, 457, 163, 164, 0, 165, 488, 166,
	0, 167, 168, 170, 489, 169, 463, 0, 0, 171,
	172, 0, 226, 490, 491, 0, 0, 173, 464, 465,
	438, 174, 175, 1675, 177, 0, 0, 178, 179, 180,
	458, 0, 181, 182, 183, 231, 492, 0, 184, 0,
	0, 0, 0, 185, 186, 187, 188, 444, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 412, 413, 88,
	89, 0, 90, 414, 0, 0, 421, 0, 0, 0,
	0, 91, 92, 189, 190, 191, 93, 192, 193, 0,
	94, 194, 195, 95, 0, 459, 196, 197, 198, 0,
	469, 0, 452, 0, 96, 97, 98, 0, 99, 0,
	100, 0, 330, 101, 102, 0, 453, 455, 0, 454,
	456, 103, 104, 105, 106, 200, 107, 201, 202, 0,
	0, 108, 0, 0, 0, 109, 110, 0, 111, 0,
	0, 0, 203, 112, 460, 0, 0, 113, 114, 205,
	115, 0, 116, 0, 0, 331, 0, 117, 470, 0,
	207, 0, 118, 119, 466, 468, 0, 0, 120, 0,
	332, 121, 210, 211, 212, 0, 213, 0, 333, 122,
	334, 123, 124, 0, 0, 471, 335, 125, 336, 0,
	126, 0, 0, 127, 0, 128, 129, 130, 131, 132,
	337, 133, 134, 137, 135, 0, 136, 0, 467, 138,
	216, 139, 140, 0, 0, 0, 0, 0, 141, 217,
	338, 142, 339, 461, 143, 144, 0, 462, 145, 220,
	0, 146, 147, 148, 221, 149, 150, 0, 152, 153,
	151, 154, 0, 155, 340, 156, 157, 222, 158, 0,
	244, 159, 160, 0, 161, 162, 457, 163, 164, 341,
	165, 223, 166, 0, 167, 168, 170, 224, 169, 463,
	0, 0, 171, 172, 0, 226, 227, 228, 0, 0,
	173, 464, 465, 0, 174, 175, 176, 177, 0, 0,
	178, 179, 180, 458, 0, 181, 182, 183, 231, 232,
	0, 184, 0, 0, 0, 0, 185, 186, 187, 188,
	324, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 88, 89, 0, 90, 0, 0, 0, 1462,
	0, 0, 0, 0, 91, 92, 189, 190, 191, 93,
	192, 193, 0, 94, 194, 195, 95, 0, 0, 196,
	197, 198, 0, 199, 0, 329, 0, 96, 97, 98,
	0, 99, 0, 100, 0, 330, 101, 102, 0, 0,
	0, 0, 0, 0, 103, 104, 105, 106, 200, 107,
	201, 202, 0, 0, 108, 0, 0, 0, 109, 110,
	0, 111, 0, 0, 0, 203, 112, 204, 0, 0,
	113, 114, 205, 115, 0, 116, 0, 0, 331, 0,
	117, 206, 0, 207, 0, 118, 119, 208, 209, 0,
	0, 120, 0, 332, 121, 210, 211, 212, 0, 213,
	0, 333, 122, 334, 123, 124, 0, 0, 214, 335,
	125, 336, 0, 126, 0, 0, 127, 0, 128, 129,
	130, 131, 132, 337, 133, 134, 137, 135, 0, 136,
	0, 215, 138, 216, 139, 140, 0, 0, 0, 0,
	0, 141, 217, 338, 142, 339, 218, 143, 144, 0,
	219, 145, 220, 0, 146, 147, 148, 221, 149, 150,
	0, 152, 153, 151, 154, 0, 155, 340, 156, 157,
	222, 158, 0, 244, 159, 160, 49, 161, 162, 0,
	163, 164, 341, 165, 223, 166, 0, 167, 168, 170,
	224, 169, 225, 0, 51, 171, 172, 0, 226, 227,
	228, 0, 0, 173, 229, 230, 0, 174, 175, 176,
	177, 0, 0, 178, 179, 180, 0, 0, 181, 182,
	183, 328, 232, 0, 184, 0, 0, 0, 47, 185,
	186, 187, 188, 0, 48, 324, 574, 0, 575, 570,
	565, 0, 0, 0, 0, 0, 0, 88, 89, 0,
	90, 0, 46, 0, 0, 0, 0, 0, 0, 91,
	92, 189, 190, 191, 93, 192, 193, 0, 94, 194,
	195, 95, 0, 0, 196, 197, 198, 0, 199, 0,
	329, 0, 96, 97, 98, 0, 99, 0, 100, 0,
	330, 101, 102, 0, 0, 0, 0, 0, 0, 103,
	104, 105, 106, 200, 107, 201, 202, 578, 0, 108,
	0, 0, 0, 109, 110, 0, 111, 0, 0, 0,
	203, 112, 204, 567, 0, 113, 114, 205, 115, 0,
	116, 0, 0, 331, 0, 117, 206, 0, 207, 0,
	118, 119, 208, 209, 0, 0, 120, 0, 332, 121,
	210, 211, 212, 0, 213, 0, 333, 122, 334, 123,
	124, 0, 0, 214, 335, 125, 336, 0, 126, 0,
	0, 127, 0, 128, 129, 130, 131, 132, 337, 133,
	134, 137, 135, 0, 136, 0, 215, 138, 216, 139,
	140, 0, 568, 0, 0, 0, 141, 217, 338, 142,
	339, 218, 143, 144, 0, 219, 145, 220, 0, 146,
	147, 148, 221, 149, 150, 0, 152, 153, 151, 154,
	0, 155, 340, 156, 157, 222, 158, 0, 244, 159,
	160, 0, 161, 162, 0, 163, 164, 341, 165, 223,
	166, 0, 167, 168, 170, 224, 169, 225, 0, 0,
	171, 172, 0, 226, 227, 228, 0, 0, 173, 229,
	230, 566, 174, 175, 176, 177, 0, 0, 178, 179,
	180, 0, 0, 181, 182, 183, 231, 232, 0, 184,
	0, 0, 0, 0, 185, 186, 187, 188, 324, 574,
	0, 575, 570, 565, 0, 0, 0, 0, 576, 571,
	88, 89, 0, 90, 0, 0, 0, 0, 0, 0,
	0, 0, 91, 92, 189, 190, 191, 93, 192, 193,
	0, 94, 194, 195, 95, 0, 0, 196, 197, 198,
	0, 199, 0, 329, 0, 96, 97, 98, 0, 99,
	0, 100, 0, 330, 101, 102, 0, 0, 0, 0,
	0, 0, 103, 104, 105, 106, 200, 107, 201, 202,
	561, 0, 108, 0, 0, 0, 109, 110, 0, 111,
	0, 0, 0, 203, 112, 204, 567, 0, 113, 114,
	205, 115, 0, 116, 0, 0, 331, 0, 117, 206,
	0, 207, 0, 118, 119, 208, 209, 0, 0, 120,
	0, 332, 121, 210, 211, 212, 0, 213, 0, 333,
	122, 334, 123, 124, 0, 0, 214, 335, 125, 336,
	0, 126, 0, 0, 127, 0, 128, 129, 130, 131,
	132, 337, 133, 134, 137, 135, 0, 136, 0, 215,
	138, 216, 139, 140, 0, 568, 0, 0, 0, 141,
	217, 338, 142, 339, 218, 143, 144, 0, 219, 145,
	220, 0, 146, 147, 148, 221, 149, 150, 0, 152,
	153, 151, 154, 0, 155, 340, 156, 157, 222, 158,
	0, 244, 159, 160, 0, 161, 162, 0, 163, 164,
	341, 165, 223, 166, 0, 167, 168, 170, 224, 169,
	225, 0, 0, 171, 172, 0, 226, 227, 228, 0,
	0, 173, 229, 230, 566, 174, 175, 176, 177, 0,
	0, 178, 179, 180, 0, 0, 181, 182, 183, 231,
	232, 0, 184, 0, 0, 0, 0, 185, 186, 187,
	188, 324, 574, 0, 575, 570, 565, 0, 0, 0,
	0, 576, 571, 88, 89, 0, 90, 0, 0, 0,
	0, 0, 0, 0, 0, 91, 92, 189, 190, 191,
	93, 192, 193, 0, 94, 194, 195, 95, 0, 0,
	196, 197, 198, 0, 199, 0, 329, 0, 96, 97,
	98, 0, 99, 0, 100, 0, 330, 101, 102, 0,
	0, 0, 0, 0, 0, 103, 104, 105, 106, 200,
	107, 201, 202, 0, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 203, 112, 204, 567,
	0, 113, 114, 205, 115, 0, 116, 0, 0, 331,
	0, 117, 206, 0, 207, 0, 118, 119, 208, 209,
	0, 0, 120, 0, 332, 121, 210, 211, 212, 0,
	213, 0, 333, 122, 334, 123, 124, 0, 0, 214,
	335, 125, 336, 0, 126, 0, 0, 127, 0, 128,
	129, 130, 131, 132, 337, 133, 134, 137, 135, 0,
	136, 0, 215, 138, 216, 139, 140, 0, 568, 0,
	0, 0, 141, 217, 338, 142, 339, 218, 143, 144,
	0, 219, 145, 220, 0, 146, 147, 148, 221, 149,
	150, 0, 152, 153, 151, 154, 0, 155, 340, 156,
	157, 222, 158, 0, 244, 159, 160, 0, 161, 162,
	0, 163, 164, 341, 165, 223, 166, 0, 167, 168,
	170, 224, 169, 225, 0, 0, 171, 172, 0, 226,
	227, 228, 0, 0, 173, 229, 230, 566, 174, 175,
	176, 177, 0, 0, 178, 179, 180, 0, 0, 181,
	182, 183, 231, 232, 85, 184, 0, 0, 0, 0,
	185, 186, 187, 188, 0, 0, 88, 89, 0, 90,
	0, 0, 0, 0, 576, 571, 0, 0, 91, 92,
	189, 190, 191, 93, 192, 193, 0, 94, 194, 195,
	95, 0, 0, 196, 197, 198, 0, 199, 0, 0,
	0, 96, 97, 98, 0, 99, 0, 100, 0, 0,
	101, 102, 0, 0, 0, 0, 0, 0, 103, 104,
	105, 106, 200, 107, 201, 202, 0, 0, 108, 0,
	0, 0, 109, 110, 0, 111, 0, 0, 0, 203,
	112, 204, 0, 0, 113, 114, 205, 115, 0, 116,
	0, 0, 0, 0, 117, 206, 0, 207, 0, 118,
	119, 208, 209, 0, 0, 120, 0, 0, 121, 210,
	211, 212, 0, 213, 0, 0, 122, 0, 123, 124,
	0, 0, 214, 0, 125, 0, 0, 126, 0, 0,
	127, 0, 128, 129, 130, 131, 132, 0, 133, 134,
	137, 135, 0, 136, 0, 215, 138, 216, 139, 140,
	0, 0, 297, 0, 0, 141, 217, 0, 142, 0,
	218, 143, 144, 0, 219, 145, 220, 0, 146, 147,
	148, 221, 149, 150, 0, 152, 153, 151, 154, 0,
	155, 0, 156, 157, 222, 158, 0, 244, 159, 160,
	49, 161, 162, 0, 163, 164, 0, 165, 223, 166,
	0, 167, 168, 170, 224, 169, 225, 0, 51, 171,
	172, 0, 226, 227, 228, 0, 0, 173, 229, 230,
	0, 174, 175, 176, 177, 0, 0, 178, 179, 180,
	0, 0, 181, 182, 183, 328, 232, 0, 184, 0,
	0, 0, 47, 185, 186, 187, 188, 85, 48, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 88,
	89, 0, 90, 0, 0, 0, 912, 0, 0, 0,
	0, 91, 92, 189, 190, 191, 93, 192, 193, 0,
	94, 194, 195, 95, 0, 0, 196, 197, 198, 0,
	199, 0, 0, 0, 96, 97, 98, 0, 99, 0,
	100, 0, 0, 101, 102, 0, 0, 0, 0, 0,
	0, 103, 104, 105, 106, 200, 107, 201, 202, 0,
	0, 108, 0, 0, 0, 109, 110, 0, 111, 0,
	0, 0, 203, 112, 204, 0, 0, 113, 114, 205,
	115, 0, 116, 0, 0, 0, 0, 117, 206, 0,
	207, 0, 118, 119, 208, 209, 0, 0, 120, 0,
	0, 121, 210, 211, 212, 0, 213, 0, 0, 122,
	0, 123, 124, 0, 0, 214, 0, 125, 0, 0,
	126, 0, 0, 127, 0, 128, 129, 130, 131, 132,
	0, 133, 134, 137, 135, 0, 136, 0, 215, 138,
	216, 139, 140, 0, 0, 0, 0, 0, 141, 217,
	0, 142, 0, 218, 143, 144, 0, 219, 145, 220,
	0, 146, 147, 148, 221, 149, 150, 0, 152, 153,
	151, 154, 0, 155, 0, 156, 157, 222, 158, 0,
	244, 159, 160, 49, 161, 162, 0, 163, 164, 0,
	165, 223, 166, 0, 167, 168, 170, 224, 169, 225,
	0, 51, 171, 172, 0, 226, 227, 228, 0, 0,
	173, 229, 230, 0, 174, 175, 176, 177, 0, 0,
	178, 179, 180, 0, 0, 181, 182, 183, 328, 232,
	0, 184, 0, 0, 0, 47, 185, 186, 187, 188,
	85, 48, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 88, 89, 0, 90, 0, 0, 0, 46,
	0, 1155, 0, 0, 91, 92, 189, 190, 191, 93,
	192, 193, 0, 94, 194, 195, 95, 0, 0, 196,
	197, 198, 0, 199, 0, 0, 0, 96, 97, 98,
	0, 99, 0, 100, 0, 0, 101, 102, 0, 0,
	0, 0, 0, 0, 103, 104, 105, 106, 200, 107,
	201, 202, 0, 0, 108, 0, 0, 0, 109, 110,
	0, 111, 0, 0, 0, 203, 112, 204, 0, 0,
	113, 114, 205, 115, 0, 116, 0, 0, 0, 0,
	117, 206, 0, 207, 0, 118, 119, 208, 209, 0,
	0, 120, 0, 0, 121, 210, 211, 212, 0, 213,
	0, 0, 122, 0, 123, 124, 0, 0, 214, 0,
	125, 0, 0, 126, 0, 0, 127, 0, 128, 129,
	130, 131, 132, 0, 133, 134, 137, 135, 0, 136,
	0, 215, 138, 216, 139, 140, 0, 0, 0, 0,
	0, 141, 217, 0, 142, 0, 218, 143, 144, 0,
	219, 145, 220, 0, 146, 147, 148, 221, 149, 150,
	0, 152, 153, 151, 154, 0, 155, 0, 156, 157,
	222, 158, 0, 244, 159, 160, 0, 161, 162, 0,
	163, 164, 0, 165, 223, 166, 0, 167, 168, 170,
	224, 169, 225, 0, 0, 171, 172, 0, 226, 227,
	228, 0, 0, 173, 229, 230, 0, 174, 175, 176,
	177, 0, 0, 178, 179, 180, 0, 0, 181, 182,
	183, 231, 232, 0, 184, 0, 0, 0, 0, 185,
	186, 187, 188, 85, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 88, 89, 0, 90, 0,
	0, 0, 0, 402, 0, 0, 0, 91, 92, 189,
	190, 191, 93, 192, 193, 0, 94, 194, 195, 95,
	0, 0, 196, 197, 198, 0, 199, 0, 0, 0,
	96, 97, 98, 0, 99, 0, 100, 0, 0, 101,
	102, 0, 0, 0, 0, 0, 0, 103, 104, 105,
	106, 200, 107, 201, 202, 0, 0, 108, 0, 0,
	0, 109, 110, 0, 111, 0, 0, 0, 203, 112,
	204, 0, 0, 113, 114, 205, 115, 0, 116, 0,
	0, 0, 0, 117, 206, 0, 207, 0, 118, 119,
	208, 209, 0, 0, 120, 0, 0, 121, 210, 211,
	212, 0, 213, 0, 0, 122, 0, 123, 124, 0,
	0, 214, 0, 125, 0, 0, 126, 0, 0, 127,
	0, 128, 129, 130, 131, 132, 0, 133, 134, 137,
	135, 0, 136, 0, 215, 138, 216, 139, 140, 0,
	0, 297, 0, 0, 141, 217, 0, 142, 0, 218,
	143, 144, 0, 219, 145, 220, 0, 146, 147, 148,
	221, 149, 150, 0, 152, 153, 151, 154, 0, 155,
	0, 156, 157, 222, 158, 0, 244, 159, 160, 0,
	161, 162, 0, 163, 164, 0, 165, 223, 166, 0,
	167, 168, 170, 224, 169, 225, 0, 0, 171, 172,
	0, 226, 227, 228, 0, 0, 173, 229, 230, 0,
	174, 175, 176, 177, 0, 0, 178, 179, 180, 0,
	0, 181, 182, 183, 231, 232, 0, 184, 0, 0,
	0, 0, 185, 186, 187, 188, 85, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 88, 89,
	0, 90, 0, 0, 0, 912, 0, 0, 0, 0,
	91, 92, 189, 190, 191, 93, 192, 193, 0, 94,
	194, 195, 95, 0, 0, 196, 197, 198, 0, 199,
	0, 0, 0, 96, 97, 98, 0, 99, 0, 100,
	0, 0, 101, 102, 0, 0, 0, 0, 0, 0,
	103, 104, 105, 106, 200, 107, 201, 202, 0, 0,
	108, 0, 0, 0, 109, 110, 0, 111, 0, 0,
	0, 203, 112, 204, 0, 0, 113, 114, 205, 115,
	0, 116, 0, 0, 0, 0, 117, 206, 0, 207,
	0, 118, 119, 208, 209, 0, 0, 120, 0, 0,
	121, 210, 211, 212, 0, 213, 0, 0, 122, 0,
	123, 124, 0, 0, 214, 0, 125, 0, 0, 126,
	0, 0, 127, 0, 128, 129, 130, 131, 132, 0,
	133, 134, 137, 135, 0, 136, 0, 215, 138, 216,
	139, 140, 0, 0, 0, 0, 0, 141, 217, 0,
	142, 0, 218, 143, 144, 0, 219, 145, 220, 0,
	146, 147, 148, 221, 149, 150, 0, 152, 153, 151,
	154, 0, 155, 0, 156, 157, 222, 158, 0, 244,
	159, 160, 0, 161, 162, 0, 163, 164, 0, 165,
	223, 166, 0, 167, 168, 170, 224, 169, 225, 0,
	0, 171, 172, 0, 226, 227, 228, 0, 0, 173,
	229, 230, 0, 174, 175, 176, 177, 0, 0, 178,
	179, 180, 0, 0, 181, 182, 183, 231, 232, 0,
	184, 0, 0, 0, 0, 185, 186, 187, 188, 85,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 88, 89, 0, 90, 0, 0, 0, 847, 0,
	0, 0, 0, 91, 92, 189, 190, 191, 93, 192,
	193, 0, 94, 194, 195, 95, 0, 0, 196, 197,
	198, 0, 199, 0, 0, 0, 96, 97, 98, 0,
	99, 0, 100, 0, 0, 101, 102, 0, 0, 0,
	0, 0, 0, 103, 104, 105, 106, 200, 107, 201,
	202, 0, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 203, 112, 204, 0, 0, 113,
	114, 205, 115, 0, 116, 0, 0, 0, 0, 117,
	206, 0, 207, 0, 118, 119, 208, 209, 0, 0,
	120, 0, 0, 121, 210, 211, 212, 0, 213, 0,
	0, 122, 0, 123, 124, 0, 0, 214, 0, 125,
	0, 0, 126, 0, 0, 127, 0, 128, 129, 130,
	131, 132, 0, 133, 134, 137, 135, 0, 136, 0,
	215, 138, 216, 139, 140, 0, 0, 0, 0, 0,
	141, 217, 0, 142, 0, 218, 143, 144, 0, 219,
	145, 220, 0, 146, 147, 148, 221, 149, 150, 0,
	152, 153, 151, 154, 0, 155, 0, 156, 157, 222,
	158, 0, 244, 159, 160, 0, 161, 162, 0, 163,
	164, 0, 165, 223, 166, 0, 167, 168, 170, 224,
	169, 225, 0, 0, 171, 172, 0, 226, 227, 228,
	0, 0, 173, 229, 230, 0, 174, 175, 176, 177,
	0, 0, 178, 179, 180, 0, 0, 181, 182, 183,
	231, 232, 0, 184, 0, 0, 0, 0, 185, 186,
	187, 188, 85, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 88, 89, 0, 90, 0, 0,
	0, 1370, 0, 0, 0, 0, 91, 92, 189, 190,
	191, 93, 192, 193, 0, 94, 194, 195, 95, 0,
	0, 196, 197, 198, 0, 199, 0, 0, 0, 96,
	97, 98, 0, 99, 0, 100, 0, 0, 101, 102,
	0, 0, 0, 0, 0, 0, 103, 104, 105, 106,
	200, 107, 201, 202, 0, 0, 108, 0, 0, 0,
	109, 110, 0, 111, 0, 0, 0, 203, 112, 204,
	0, 0, 113, 114, 205, 115, 0, 116, 0, 0,
	0, 0, 117, 206, 0, 207, 0, 118, 119, 208,
	209, 0, 0, 120, 0, 0, 121, 210, 211, 212,
	0, 213, 0, 0, 122, 0, 123, 124, 0, 0,
	214, 0, 125, 0, 0, 126, 0, 0, 127, 0,
	128, 129, 130, 131, 132, 0, 133, 134, 137, 135,
	0, 136, 0, 215, 138, 216, 139, 140, 0, 0,
	0, 0, 0, 141, 217, 0, 142, 0, 218, 143,
	144, 0, 219, 145, 220, 0, 146, 147, 148, 221,
	149, 150, 0, 152, 153, 151, 154, 0, 155, 0,
	156, 157, 222, 158, 0, 244, 159, 160, 0, 161,
	162, 0, 163, 164, 0, 165, 223, 166, 0, 167,
	168, 170, 224, 169, 225, 0, 0, 171, 172, 0,
	226, 227, 228, 0, 0, 173, 229, 230, 0, 174,
	175, 176, 177, 0, 0, 178, 179, 180, 0, 0,
	181, 182, 183, 231, 232, 0, 184, 0, 0, 0,
	0, 185, 186, 187, 188, 85, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 88, 89, 0,
	90, 0, 0, 0, 503, 0, 0, 0, 0, 91,
	92, 189, 190, 191, 93, 192, 193, 0, 94, 194,
	195, 95, 0, 0, 196, 197, 198, 0, 199, 0,
	0, 0, 96, 97, 98, 0, 99, 0, 100, 0,
	0, 101, 102, 0, 0, 0, 0, 0, 0, 103,
	104, 546, 106, 200, 107, 201, 202, 0, 0, 108,
	0, 0, 0, 109, 110, 0, 111, 0, 0, 0,
	203, 112, 204, 0, 0, 113, 114, 205, 115, 0,
	116, 0, 0, 0, 0, 117, 206, 0, 207, 0,
	118, 119, 208, 209, 0, 0, 120, 0, 0, 121,
	210, 211, 212, 0, 213, 0, 0, 122, 0, 123,
	124, 0, 0, 214, 0, 125, 0, 0, 126, 0,
	0, 127, 0, 128, 129, 130, 131, 132, 0, 133,
	134, 137, 135, 0, 136, 0, 215, 138, 216, 139,
	140, 0, 0, 0, 0, 0, 141, 217, 0, 142,
	0, 218, 143, 144, 0, 219, 145, 220, 0, 146,
	147, 148, 221, 149, 150, 0, 152, 153, 151, 154,
	0, 155, 0, 156, 157, 222, 158, 0, 244, 159,
	160, 0, 161, 162, 0, 163, 164, 0, 165, 223,
	166, 0, 167, 168, 170, 224, 169, 225, 0, 545,
	171, 172, 0, 226, 227, 228, 0, 0, 173, 229,
	230, 0, 174, 175, 176, 177, 0, 0, 178, 179,
	180, 0, 0, 181, 182, 183, 231, 232, 85, 184,
	0, 0, 0, 0, 185, 186, 187, 188, 0, 0,
	88, 89, 0, 90, 0, 0, 0, 0, 0, 0,
	549, 0, 91, 92, 189, 190, 191, 93, 192, 193,
	0, 94, 194, 195, 95, 0, 0, 196, 197, 198,
	0, 199, 0, 0, 0, 96, 97, 98, 0, 99,
	0, 100, 0, 0, 101, 102, 0, 0, 0, 0,
	0, 0, 103, 104, 105, 106, 200, 107, 201, 202,
	0, 0, 108, 0, 0, 0, 109, 110, 0, 111,
	0, 0, 0, 203, 112, 204, 0, 0, 113, 114,
	205, 115, 0, 116, 0, 0, 0, 0, 117, 206,
	0, 207, 0, 118, 119, 208, 209, 0, 0, 120,
	0, 0, 121, 210, 211, 212, 0, 213, 0, 0,
	122, 0, 123, 124, 0, 0, 214, 0, 125, 0,
	0, 126, 0, 0, 127, 0, 128, 129, 130, 131,
	132, 0, 133, 134, 137, 135, 0, 136, 0, 215,
	138, 216, 139, 140, 0, 0, 0, 0, 0, 141,
	217, 0, 142, 0, 218, 143, 144, 0, 219, 145,
	220, 0, 146, 147, 148, 221, 149, 150, 0, 152,
	153, 151, 154, 0, 155, 0, 156, 157, 222, 158,
	0, 244, 159, 160, 0, 161, 162, 0, 163, 164,
	0, 165, 223, 166, 0, 167, 168, 170, 224, 169,
	225, 0, 0, 171, 172, 0, 226, 227, 228, 0,
	0, 173, 229, 230, 0, 174, 175, 176, 177, 0,
	0, 178, 179, 180, 0, 0, 181, 182, 183, 231,
	232, 324, 184, 0, 0, 0, 0, 185, 186, 187,
	188, 0, 0, 88, 89, 0, 90, 0, 0, 0,
	0, 0, 0, 549, 0, 91, 92, 189, 190, 191,
	93, 192, 193, 0, 94, 194, 195, 95, 0, 0,
	196, 197, 198, 0, 199, 0, 329, 0, 96, 97,
	98, 0, 99, 0, 100, 0, 330, 101, 102, 0,
	0, 0, 0, 0, 0, 103, 104, 105, 106, 200,
	107, 201, 202, 0, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 203, 112, 204, 0,
	0, 113, 114, 205, 115, 0, 116, 0, 0, 331,
	0, 117, 206, 0, 207, 0, 118, 119, 208, 209,
	0, 0, 120, 0, 332, 121, 210, 211, 212, 0,
	213, 0, 333, 122, 334, 123, 124, 0, 0, 214,
	335, 125, 336, 0, 126, 0, 0, 127, 0, 128,
	129, 130, 131, 132, 337, 133, 134, 137, 135, 0,
	136, 0, 215, 138, 216, 139, 140, 0, 0, 0,
	0, 0, 141, 217, 338, 142, 339, 218, 143, 144,
	0, 219, 145, 220, 0, 146, 147, 148, 221, 149,
	150, 0, 152, 153, 151, 154, 0, 155, 340, 156,
	157, 222, 158, 0, 244, 159, 160, 0, 161, 162,
	0, 163, 164, 341, 165, 223, 166, 0, 167, 168,
	170, 224, 169, 225, 0, 0, 171, 172, 0, 226,
	227, 228, 0, 0, 173, 229, 230, 0, 174, 175,
	176, 177, 0, 0, 178, 179, 180, 0, 0, 181,
	182, 183, 231, 232, 85, 184, 0, 0, 0, 0,
	185, 186, 187, 188, 0, 0, 88, 89, 0, 90,
	0, 0, 0, 0, 0, 0, 0, 0, 91, 92,
	189, 190, 191, 93, 192, 193, 0, 94, 194, 195,
	95, 0, 0, 196, 197, 198, 820, 199, 0, 0,
	0, 96, 97, 98, 0, 99, 818, 100, 0, 0,
	101, 102, 0, 0, 0, 0, 0, 0, 103, 104,
	105, 106, 200, 107, 201, 202, 0, 0, 108, 0,
	0, 0, 109, 110, 0, 111, 0, 0, 0, 203,
	112, 204, 0, 0, 113, 114, 205, 115, 0, 116,
	823, 0, 0, 0, 117, 206, 0, 207, 0, 118,
	119, 208, 209, 0, 888, 120, 0, 0, 121, 210,
	211, 212, 0, 213, 0, 0, 122, 0, 123, 124,
	0, 0, 214, 0, 125, 0, 0, 126, 0, 0,
	127, 0, 128, 129, 130, 131, 132, 0, 133, 134,
	137, 135, 0, 136, 0, 215, 138, 216, 139, 140,
	0, 0, 0, 0, 0, 141, 217, 0, 142, 0,
	218, 143, 144, 0, 219, 145, 220, 822, 146, 147,
	148, 221, 149, 150, 0, 152, 153, 151, 154, 0,
	155, 0, 156, 157, 222, 158, 0, 244, 159, 160,
	0, 161, 162, 0, 163, 164, 0, 165, 223, 166,
	0, 167, 168, 170, 224, 169, 225, 0, 0, 171,
	172, 0, 226, 227, 228, 0, 0, 173, 229, 230,
	0, 174, 175, 176, 177, 0, 889, 178, 179, 180,
	0, 0, 181, 182, 183, 231, 232, 85, 184, 0,
	0, 0, 0, 185, 186, 187, 188, 0, 0, 88,
	89, 0, 90, 0, 0, 0, 0, 0, 0, 0,
	0, 91, 92, 189, 190, 191, 93, 192, 193, 0,
	94, 194, 195, 95, 0, 0, 196, 197, 198, 820,
	199, 0, 0, 815, 96, 97, 98, 0, 99, 818,
	100, 0, 0, 101, 102, 0, 0, 0, 0, 0,
	0, 103, 104, 105, 106, 200, 107, 201, 202, 0,
	0, 108, 0, 0, 0, 109, 110, 0, 111, 0,
	0, 0, 203, 112, 204, 0, 0, 113, 114, 205,
	115, 0, 116, 823, 0, 0, 0, 117, 206, 0,
	207, 0, 118, 119, 814, 209, 0, 0, 120, 0,
	0, 121, 210, 211, 212, 0, 213, 0, 0, 122,
	0, 123, 124, 0, 0, 214, 0, 125, 0, 0,
	126, 0, 0, 127, 0, 128, 129, 130, 131, 132,
	0, 133, 134, 137, 135, 0, 136, 0, 215, 138,
	216, 139, 140, 0, 0, 0, 0, 0, 141, 217,
	0, 142, 0, 218, 143, 144, 0, 219, 145, 220,
	822, 146, 147, 148, 221, 149, 150, 0, 152, 153,
	151, 154, 0, 155, 0, 156, 157, 222, 158, 0,
	244, 159, 160, 0, 161, 162, 0, 163, 164, 0,
	165, 223, 166, 0, 167, 168, 170, 224, 169, 225,
	0, 0, 171, 172, 0, 226, 227, 228, 0, 0,
	173, 229, 230, 0, 174, 175, 176, 177, 0, 821,
	178, 179, 180, 0, 0, 181, 182, 183, 231, 232,
	85, 184, 0, 0, 0, 0, 185, 186, 187, 188,
	0, 0, 88, 89, 0, 90, 0, 0, 0, 0,
	0, 1155, 0, 0, 91, 92, 189, 190, 191, 93,
	192, 193, 0, 94, 194, 195, 95, 0, 0, 196,
	197, 198, 0, 199, 0, 0, 0, 96, 97, 98,
	0, 99, 0, 100, 0, 0, 101, 102, 0, 0,
	0, 0, 0, 0, 103, 104, 105, 106, 200, 107,
	201, 202, 0, 0, 108, 0, 0, 0, 109, 110,
	0, 111, 0, 0, 0, 203, 112, 204, 0, 0,
	113, 114, 205, 115, 0, 116, 0, 0, 0, 0,
	117, 206, 0, 207, 0, 118, 119, 208, 209, 0,
	0, 120, 0, 0, 121, 210, 211, 212, 0, 213,
	0, 0, 122, 0, 123, 124, 0, 0, 214, 0,
	125, 0, 0, 126, 0, 0, 127, 0, 128, 129,
	130, 131, 132, 0, 133, 134, 137, 135, 0, 136,
	0, 215, 138, 216, 139, 140, 0, 0, 0, 0,
	0, 141, 217, 0, 142, 0, 218, 143, 144, 0,
	219, 145, 220, 0, 146, 147, 148, 221, 149, 150,
	0, 152, 153, 151, 154, 0, 155, 0, 156, 157,
	222, 158, 0, 244, 159, 160, 0, 161, 162, 0,
	163, 164, 0, 165, 223, 166, 0, 167, 168, 170,
	224, 169, 225, 0, 0, 171, 172, 0, 226, 227,
	228, 0, 0, 173, 229, 230, 0, 174, 175, 176,
	177, 0, 0, 178, 179, 180, 0, 0, 181, 182,
	183, 231, 232, 85, 184, 0, 0, 0, 0, 185,
	186, 187, 188, 0, 0, 88, 89, 0, 90, 0,
	0, 0, 0, 0, 0, 0, 0, 91, 92, 189,
	190, 191, 93, 192, 193, 0, 94, 194, 195, 95,
	0, 0, 196, 197, 198, 0, 199, 0, 0, 0,
	96, 97, 98, 0, 99, 0, 100, 0, 0, 101,
	102, 0, 0, 0, 0, 0, 0, 103, 104, 105,
	106, 200, 107, 201, 202, 0, 0, 108, 0, 0,
	0, 109, 110, 0, 111, 0, 0, 0, 203, 112,
	204, 0, 0, 113, 114, 205, 115, 0, 116, 0,
	0, 0, 0, 117, 206, 0, 207, 0, 118, 119,
	208, 209, 0, 0, 120, 0, 0, 121, 210, 211,
	212, 0, 213, 0, 0, 122, 0, 123, 124, 0,
	0, 214, 0, 125, 0, 0, 126, 0, 0, 127,
	0, 128, 129, 130, 131, 132, 0, 133, 134, 137,
	135, 0, 136, 0, 215, 138, 216, 139, 140, 0,
	0, 297, 0, 0, 141, 217, 0, 142, 0, 218,
	143, 144, 0, 219, 145, 220, 0, 146, 147, 148,
	221, 149, 150, 0, 152, 153, 151, 154, 0, 155,
	0, 156, 157, 222, 158, 0, 244, 159, 160, 0,
	161, 162, 0, 163, 164, 0, 165, 223, 166, 0,
	167, 168, 170, 224, 169, 225, 0, 0, 171, 172,
	0, 226, 227, 228, 0, 0, 173, 229, 230, 0,
	174, 175, 176, 177, 0, 0, 178, 179, 180, 0,
	0, 181, 182, 183, 231, 232, 85, 184, 0, 0,
	0, 0, 185, 186, 187, 188, 0, 0, 88, 89,
	0, 90, 0, 0, 0, 0, 0, 0, 0, 0,
	91, 92, 189, 190, 191, 93, 192, 193, 0, 94,
	194, 195, 95, 0, 0, 196, 197, 198, 0, 199,
	0, 0, 0, 96, 97, 98, 0, 99, 0, 100,
	0, 0, 101, 102, 0, 0, 0, 0, 0, 0,
	103, 104, 105, 106, 200, 107, 201, 202, 0, 0,
	108, 0, 0, 0, 109, 110, 0, 111, 0, 0,
	0, 203, 112, 204, 0, 0, 113, 114, 205, 115,
	0, 116, 0, 0, 0, 0, 117, 206, 0, 207,
	0, 118, 119, 303, 209, 0, 0, 120, 0, 0,
	121, 210, 211, 212, 0, 213, 0, 0, 122, 0,
	123, 124, 0, 0, 214, 0, 125, 0, 0, 126,
	0, 0, 127, 0, 128, 129, 130, 131, 132, 0,
	133, 134, 137, 135, 0, 136, 0, 215, 138, 216,
	139, 140, 0, 0, 297, 0, 0, 141, 217, 0,
	142, 0, 218, 143, 144, 0, 219, 145, 220, 0,
	146, 147, 148, 221, 149, 150, 0, 152, 153, 151,
	154, 0, 155, 0, 156, 157, 222, 158, 0, 244,
	159, 160, 0, 161, 162, 0, 163, 164, 0, 165,
	223, 166, 0, 167, 168, 170, 224, 169, 225, 0,
	0, 171, 172, 0, 226, 227, 228, 0, 0, 173,
	229, 230, 0, 174, 175, 176, 177, 0, 0, 178,
	179, 180, 0, 0, 181, 182, 183, 231, 232, 85,
	184, 0, 0, 0, 0, 185, 186, 187, 188, 0,
	0, 88, 89, 0, 90, 0, 0, 0, 0, 0,
	0, 0, 0, 91, 92, 189, 190, 191, 93, 192,
	193, 0, 94, 194, 195, 95, 0, 0, 196, 197,
	198, 0, 199, 0, 0, 0, 96, 97, 98, 0,
	99, 0, 100, 0, 0, 101, 102, 0, 0, 0,
	0, 0, 0, 103, 104, 105, 106, 200, 107, 201,
	202, 0, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 203, 112, 204, 0, 0, 113,
	114, 205, 115, 0, 116, 0, 0, 0, 0, 117,
	206, 0, 207, 0, 118, 119, 208, 209, 0, 0,
	120, 0, 0, 121, 210, 211, 212, 0, 213, 0,
	0, 122, 0, 123, 124, 0, 0, 214, 0, 125,
	0, 0, 126, 0, 0, 127, 0, 128, 129, 130,
	131, 132, 0, 133, 134, 137, 135, 0, 136, 0,
	215, 138, 216, 139, 140, 0, 0, 0, 0, 0,
	141, 217, 0, 142, 0, 218, 143, 144, 0, 219,
	145, 220, 0, 146, 147, 148, 221, 149, 150, 0,
	152, 153, 151, 154, 0, 155, 0, 156, 157, 222,
	158, 0, 244, 159, 160, 0, 161, 162, 0, 163,
	164, 0, 165, 223, 166, 0, 167, 168, 170, 224,
	169, 225, 0, 0, 171, 172, 0, 226, 227, 228,
	0, 0, 173, 229, 230, 0, 174, 175, 176, 177,
	0, 0, 178, 179, 180, 0, 0, 181, 182, 183,
	231, 232, 85, 184, 0, 0, 0, 0, 185, 186,
	187, 188, 0, 0, 88, 89, 0, 90, 0, 0,
	0, 0, 0, 0, 0, 0, 91, 92, 189, 190,
	191, 93, 192, 193, 0, 94, 194, 195, 95, 0,
	0, 196, 197, 198, 0, 199, 0, 0, 0, 96,
	97, 98, 0, 99, 0, 100, 0, 0, 101, 102,
	0, 0, 0, 0, 0, 0, 103, 104, 105, 106,
	200, 107, 201, 202, 0, 0, 108, 0, 0, 0,
	109, 110, 0, 111, 0, 0, 0, 203, 112, 204,
	0, 0, 113, 114, 205, 115, 0, 116, 0, 0,
	0, 0, 117, 206, 0, 207, 0, 118, 119, 1091,
	209, 0, 0, 120, 0, 0, 121, 210, 211, 212,
	0, 213, 0, 0, 122, 0, 123, 124, 0, 0,
	214, 0, 125, 0, 0, 126, 0, 0, 127, 0,
	128, 129, 130, 131, 132, 0, 133, 134, 137, 135,
	0, 136, 0, 215, 138, 216, 139, 140, 0, 0,
	0, 0, 0, 141, 217, 0, 142, 0, 218, 143,
	144, 0, 219, 145, 220, 0, 146, 147, 148, 221,
	149, 150, 0, 152, 153, 151, 154, 0, 155, 0,
	156, 157, 222, 158, 0, 244, 159, 160, 0, 161,
	162, 0, 163, 164, 0, 165, 223, 166, 0, 167,
	168, 170, 224, 169, 225, 0, 0, 171, 172, 0,
	226, 227, 228, 0, 0, 173, 229, 230, 0, 174,
	175, 176, 177, 0, 0, 178, 179, 180, 0, 0,
	181, 182, 183, 231, 232, 85, 184, 0, 0, 0,
	0, 185, 186, 187, 188, 0, 0, 88, 89, 0,
	90, 0, 0, 0, 0, 0, 0, 0, 0, 91,
	92, 189, 190, 191, 93, 192, 193, 0, 94, 194,
	195, 95, 0, 0, 196, 197, 198, 0, 199, 0,
	0, 0, 96, 97, 98, 0, 99, 0, 100, 0,
	0, 101, 102, 0, 0, 0, 0, 0, 0, 103,
	104, 105, 106, 200, 107, 201, 202, 0, 0, 108,
	0, 0, 0, 109, 110, 0, 111, 0, 0, 0,
	203, 112, 204, 0, 0, 113, 114, 205, 115, 0,
	116, 0, 0, 0, 0, 117, 206, 0, 207, 0,
	118, 119, 1089, 209, 0, 0, 120, 0, 0, 121,
	210, 211, 212, 0, 213, 0, 0, 122, 0, 123,
	124, 0, 0, 214, 0, 125, 0, 0, 126, 0,
	0, 127, 0, 128, 129, 130, 131, 132, 0, 133,
	134, 137, 135, 0, 136, 0, 215, 138, 216, 139,
	140, 0, 0, 0, 0, 0, 141, 217, 0, 142,
	0, 218, 143, 144, 0, 219, 145, 220, 0, 146,
	147, 148, 221, 149, 150, 0, 152, 153, 151, 154,
	0, 155, 0, 156, 157, 222, 158, 0, 244, 159,
	160, 0, 161, 162, 0, 163, 164, 0, 165, 223,
	166, 0, 167, 168, 170, 224, 169, 225, 0, 0,
	171, 172, 0, 226, 227, 228, 0, 0, 173, 229,
	230, 0, 174, 175, 176, 177, 0, 0, 178, 179,
	180, 0, 0, 181, 182, 183, 231, 232, 85, 184,
	0, 0, 0, 0, 185, 186, 187, 188, 0, 0,
	88, 89, 0, 90, 0, 0, 0, 0, 0, 0,
	0, 0, 91, 92, 189, 190, 191, 93, 192, 193,
	0, 94, 194, 195, 95, 0, 0, 196, 197, 198,
	0, 199, 0, 0, 0, 96, 97, 98, 0, 99,
	0, 100, 0, 0, 101, 102, 0, 0, 0, 0,
	0, 0, 103, 104, 105, 106, 200, 107, 201, 202,
	0, 0, 108, 0, 0, 0, 109, 110, 0, 111,
	0, 0, 0, 203, 112, 204, 0, 0, 113, 114,
	205, 115, 0, 116, 0, 0, 0, 0, 117, 206,
	0, 207, 0, 118, 119, 1080, 209, 0, 0, 120,
	0, 0, 121, 210, 211, 212, 0, 213, 0, 0,
	122, 0, 123, 124, 0, 0, 214, 0, 125, 0,
	0, 126, 0, 0, 127, 0, 128, 129, 130, 131,
	132, 0, 133, 134, 137, 135, 0, 136, 0, 215,
	138, 216, 139, 140, 0, 0, 0, 0, 0, 141,
	217, 0, 142, 0, 218, 143, 144, 0, 219, 145,
	220, 0, 146, 147, 148, 221, 149, 150, 0, 152,
	153, 151, 154, 0, 155, 0, 156, 157, 222, 158,
	0, 244, 159, 160, 0, 161, 162, 0, 163, 164,
	0, 165, 223, 166, 0, 167, 168, 170, 224, 169,
	225, 0, 0, 171, 172, 0, 226, 227, 228, 0,
	0, 173, 229, 230, 0, 174, 175, 176, 177, 0,
	0, 178, 179, 180, 0, 0, 181, 182, 183, 231,
	232, 85, 184, 0, 0, 0, 0, 185, 186, 187,
	188, 0, 0, 88, 89, 0, 90, 0, 0, 0,
	0, 0, 0, 0, 0, 91, 92, 189, 190, 191,
	93, 192, 193, 0, 94, 194, 195, 95, 0, 0,
	196, 197, 198, 0, 199, 0, 0, 0, 96, 97,
	98, 0, 99, 0, 100, 0, 0, 101, 102, 0,
	0, 0, 0, 0, 0, 103, 104, 105, 106, 200,
	107, 201, 202, 0, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 203, 112, 204, 0,
	0, 113, 114, 205, 115, 0, 116, 0, 0, 0,
	0, 117, 206, 0, 207, 0, 118, 119, 691, 209,
	0, 0, 120, 0, 0, 121, 210, 211, 212, 0,
	213, 0, 0, 122, 0, 123, 124, 0, 0, 214,
	0, 125, 0, 0, 126, 0, 0, 127, 0, 128,
	129, 130, 131, 132, 0, 133, 134, 137, 135, 0,
	136, 0, 215, 138, 216, 139, 140, 0, 0, 0,
	0, 0, 141, 217, 0, 142, 0, 218, 143, 144,
	0, 219, 145, 220, 0, 146, 147, 148, 221, 149,
	150, 0, 152, 153, 151, 154, 0, 155, 0, 156,
	157, 222, 158, 0, 244, 159, 160, 0, 161, 162,
	0, 163, 164, 0, 165, 223, 166, 0, 167, 168,
	170, 224, 169, 225, 0, 0, 171, 172, 0, 226,
	227, 228, 0, 0, 173, 229, 230, 0, 174, 175,
	176, 177, 0, 0, 178, 179, 180, 0, 0, 181,
	182, 183, 231, 232, 85, 184, 0, 0, 0, 0,
	185, 186, 187, 188, 0, 0, 88, 89, 0, 90,
	0, 0, 0, 0, 0, 0, 0, 0, 91, 92,
	189, 190, 191, 93, 192, 193, 0, 94, 194, 195,
	95, 0, 0, 196, 197, 198, 0, 199, 0, 0,
	0, 96, 97, 98, 0, 99, 0, 100, 0, 0,
	101, 102, 0, 0, 0, 0, 0, 0, 103, 104,
	105, 106, 200, 107, 201, 202, 0, 0, 108, 0,
	0, 0, 109, 110, 0, 111, 0, 0, 0, 203,
	112, 204, 0, 0, 113, 114, 205, 115, 0, 116,
	0, 0, 0, 0, 117, 206, 0, 207, 0, 118,
	119, 208, 209, 0, 0, 120, 0, 0, 121, 210,
	211, 212, 0, 213, 0, 0, 122, 0, 123, 124,
	0, 0, 214, 0, 125, 0, 0, 126, 0, 0,
	127, 0, 128, 129, 130, 131, 132, 0, 133, 134,
	137, 135, 0, 136, 0, 215, 138, 216, 139, 140,
	0, 0, 0, 0, 0, 141, 217, 0, 142, 0,
	218, 143, 144, 0, 219, 145, 220, 0, 146, 147,
	148, 221, 149, 150, 0, 152, 153, 151, 154, 0,
	155, 0, 156, 157, 222, 158, 0, 83, 159, 160,
	0, 161, 162, 0, 163, 164, 0, 165, 223, 166,
	0, 167, 168, 170, 224, 169, 225, 0, 0, 171,
	172, 0, 226, 227, 228, 0, 0, 173, 229, 230,
	0, 174, 175, 176, 177, 0, 0, 178, 179, 180,
	0, 0, 181, 182, 183, 231, 232, 85, 184, 0,
	0, 0, 0, 185, 186, 187, 188, 0, 0, 88,
	89, 0, 90, 0, 0, 0, 0, 0, 532, 0,
	0, 91, 92, 189, 190, 191, 93, 192, 193, 0,
	94, 194, 195, 95, 0, 0, 196, 197, 198, 0,
	199, 0, 0, 0, 96, 97, 98, 0, 99, 0,
	100, 0, 0, 101, 102, 0, 0, 0, 0, 0,
	0, 103, 104, 105, 106, 200, 107, 201, 202, 0,
	0, 108, 0, 0, 0, 109, 110, 0, 111, 0,
	0, 0, 203, 112, 204, 0, 0, 113, 114, 205,
	115, 0, 116, 0, 0, 0, 0, 117, 206, 0,
	207, 0, 118, 119, 208, 209, 0, 0, 120, 0,
	0, 121, 210, 211, 212, 0, 213, 0, 0, 122,
	0, 123, 124, 0, 0, 214, 0, 125, 0, 0,
	126, 0, 0, 127, 0, 128, 129, 130, 131, 132,
	0, 133, 134, 137, 135, 0, 136, 0, 215, 138,
	216, 139, 140, 0, 0, 0, 0, 0, 141, 217,
	0, 142, 0, 218, 143, 144, 0, 219, 145, 220,
	0, 146, 147, 148, 221, 149, 150, 0, 152, 153,
	151, 154, 0, 155, 0, 156, 157, 222, 158, 0,
	244, 159, 160, 0, 161, 162, 0, 0, 164, 0,
	165, 223, 166, 0, 167, 168, 170, 224, 169, 225,
	0, 0, 171, 172, 0, 226, 227, 228, 0, 0,
	173, 229, 230, 0, 174, 175, 176, 177, 0, 0,
	178, 179, 180, 0, 0, 181, 182, 183, 231, 232,
	85, 184, 0, 0, 0, 0, 185, 186, 187, 188,
	0, 0, 88, 89, 0, 90, 0, 0, 0, 0,
	0, 0, 0, 0, 91, 92, 189, 190, 191, 93,
	192, 193, 0, 94, 194, 195, 95, 0, 0, 196,
	197, 198, 0, 199, 0, 0, 0, 96, 97, 98,
	0, 99, 0, 100, 0, 0, 101, 102, 0, 0,
	0, 0, 0, 0, 103, 104, 105, 106, 200, 107,
	201, 202, 0, 0, 108, 0, 0, 0, 109, 110,
	0, 111, 0, 0, 0, 203, 112, 204, 0, 0,
	113, 114, 205, 115, 0, 116, 0, 0, 0, 0,
	117, 206, 0, 207, 0, 118, 119, 387, 209, 0,
	0, 120, 0, 0, 121, 210, 211, 212, 0, 213,
	0, 0, 122, 0, 123, 124, 0, 0, 214, 0,
	125, 0, 0, 126, 0, 0, 127, 0, 128, 129,
	130, 131, 132, 0, 133, 134, 137, 135, 0, 136,
	0, 215, 138, 216, 139, 140, 0, 0, 0, 0,
	0, 141, 217, 0, 142, 0, 218, 143, 144, 0,
	219, 145, 220, 0, 146, 147, 148, 221, 149, 150,
	0, 152, 153, 151, 154, 0, 155, 0, 156, 157,
	222, 158, 0, 244, 159, 160, 0, 161, 162, 0,
	163, 164, 0, 165, 223, 166, 0, 167, 168, 170,
	224, 169, 225, 0, 0, 171, 172, 0, 226, 227,
	228, 0, 0, 173, 229, 230, 0, 174, 175, 176,
	177, 0, 0, 178, 179, 180, 0, 0, 181, 182,
	183, 231, 232, 85, 184, 0, 0, 0, 0, 185,
	186, 187, 188, 0, 0, 88, 89, 0, 90, 0,
	0, 0, 0, 0, 0, 0, 0, 91, 92, 189,
	190, 191, 93, 192, 193, 0, 94, 194, 195, 95,
	0, 0, 196, 197, 198, 0, 199, 0, 0, 0,
	96, 97, 98, 0, 99, 0, 100, 0, 0, 101,
	102, 0, 0, 0, 0, 0, 0, 103, 104, 105,
	106, 200, 107, 201, 202, 0, 0, 108, 0, 0,
	0, 109, 110, 0, 111, 0, 0, 0, 203, 112,
	204, 0, 0, 113, 114, 205, 115, 0, 116, 0,
	0, 0, 0, 117, 206, 0, 207, 0, 118, 119,
	384, 209, 0, 0, 120, 0, 0, 121, 210, 211,
	212, 0, 213, 0, 0, 122, 0, 123, 124, 0,
	0, 214, 0, 125, 0, 0, 126, 0, 0, 127,
	0, 128, 129, 130, 131, 132, 0, 133, 134, 137,
	135, 0, 136, 0, 215, 138, 216, 139, 140, 0,
	0, 0, 0, 0, 141, 217, 0, 142, 0, 218,
	143, 144, 0, 219, 145, 220, 0, 146, 147, 148,
	221, 149, 150, 0, 152, 153, 151, 154, 0, 155,
	0, 156, 157, 222, 158, 0, 244, 159, 160, 0,
	161, 162, 0, 163, 164, 0, 165, 223, 166, 0,
	167, 168, 170, 224, 169, 225, 0, 0, 171, 172,
	0, 226, 227, 228, 0, 0, 173, 229, 230, 0,
	174, 175, 176, 177, 0, 0, 178, 179, 180, 0,
	0, 181, 182, 183, 231, 232, 85, 184, 0, 0,
	0, 0, 185, 186, 187, 188, 0, 0, 88, 89,
	0, 90, 0, 0, 0, 0, 0, 0, 0, 0,
	91, 92, 189, 190, 191, 93, 192, 193, 0, 94,
	194, 195, 95, 0, 0, 196, 197, 347, 0, 199,
	0, 0, 0, 96, 97, 98, 0, 99, 0, 100,
	0, 0, 101, 102, 0, 0, 0, 0, 0, 0,
	103, 104, 105, 106, 200, 107, 201, 202, 0, 0,
	108, 0, 0, 0, 109, 110, 0, 111, 0, 0,
	0, 203, 112, 204, 0, 0, 113, 114, 205, 115,
	0, 116, 0, 0, 0, 0, 117, 206, 0, 207,
	0, 118, 119, 208, 209, 0, 0, 120, 0, 0,
	121, 210, 211, 212, 0, 213, 0, 0, 122, 0,
	123, 124, 0, 0, 214, 0, 125, 0, 0, 126,
	0, 0, 127, 0, 128, 129, 130, 131, 241, 0,
	133, 134, 137, 135, 0, 136, 0, 215, 138, 216,
	139, 140, 0, 0, 0, 0, 0, 141, 217, 0,
	142, 0, 218, 143, 144, 0, 219, 145, 220, 0,
	146, 147, 148, 221, 149, 150, 0, 152, 153, 151,
	154, 0, 155, 0, 156, 157, 222, 158, 0, 244,
	159, 160, 0, 161, 162, 0, 163, 164, 0, 165,
	223, 166, 0, 167, 168, 170, 224, 169, 225, 0,
	0, 171, 172, 0, 240, 227, 228, 0, 0, 236,
	229, 230, 0, 174, 175, 176, 177, 0, 0, 178,
	179, 180, 0, 0, 181, 182, 183, 231, 232, 85,
	184, 0, 0, 0, 0, 185, 186, 187, 188, 0,
	0, 88, 89, 0, 90, 0, 0, 0, 0, 0,
	0, 0, 0, 91, 92, 189, 190, 191, 93, 192,
	193, 0, 94, 194, 195, 95, 0, 0, 196, 197,
	198, 0, 199, 0, 0, 0, 96, 97, 98, 0,
	99, 0, 100, 0, 0, 101, 102, 0, 0, 0,
	0, 0, 0, 103, 104, 105, 106, 200, 107, 201,
	202, 0, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 203, 112, 204, 0, 0, 113,
	114, 205, 115, 0, 116, 0, 0, 0, 0, 117,
	206, 0, 207, 0, 118, 119, 208, 209, 0, 0,
	120, 0, 0, 121, 210, 211, 212, 0, 213, 0,
	0, 122, 0, 123, 124, 0, 0, 214, 0, 125,
	0, 0, 126, 0, 0, 127, 0, 128, 129, 130,
	131, 241, 0, 133, 134, 137, 135, 0, 136, 0,
	215, 138, 216, 139, 140, 0, 0, 0, 0, 0,
	141, 217, 0, 142, 0, 218, 143, 144, 0, 219,
	145, 220, 0, 146, 147, 148, 221, 149, 150, 0,
	152, 153, 151, 154, 0, 155, 0, 156, 157, 222,
	158, 0, 244, 159, 160, 0, 161, 162, 0, 163,
	164, 0, 165, 223, 166, 0, 167, 168, 170, 224,
	169, 225, 0, 0, 171, 172, 0, 240, 227, 228,
	0, 0, 236, 229, 230, 0, 174, 175, 176, 177,
	0, 0, 178, 179, 180, 0, 0, 181, 182, 183,
	231, 232, 85, 184, 0, 0, 0, 0, 185, 186,
	187, 188, 0, 0, 88, 89, 0, 90, 0, 0,
	0, 0, 0, 0, 0, 0, 91, 92, 189, 190,
	191, 93, 192, 193, 0, 94, 194, 195, 95, 0,
	0, 196, 197, 198, 0, 199, 0, 0, 0, 96,
	97, 98, 0, 99, 0, 100, 0, 0, 101, 102,
	0, 0, 0, 0, 0, 0, 103, 104, 105, 106,
	200, 107, 201, 202, 0, 0, 108, 0, 0, 0,
	109, 110, 0, 111, 0, 0, 0, 203, 112, 204,
	0, 0, 113, 114, 205, 115, 0, 116, 0, 0,
	0, 0, 117, 206, 0, 207, 0, 118, 119, 319,
	209, 0, 0, 120, 0, 0, 121, 210, 211, 212,
	0, 213, 0, 0, 122, 0, 123, 124, 0, 0,
	214, 0, 125, 0, 0, 126, 0, 0, 127, 0,
	128, 129, 130, 131, 132, 0, 133, 134, 137, 135,
	0, 136, 0, 215, 138, 216, 139, 140, 0, 0,
	0, 0, 0, 141, 217, 0, 142, 0, 218, 143,
	144, 0, 219, 145, 220, 0, 146, 147, 148, 221,
	149, 150, 0, 152, 153, 151, 154, 0, 155, 0,
	156, 157, 222, 158, 0, 244, 159, 160, 0, 161,
	162, 0, 163, 164, 0, 165, 223, 166, 0, 167,
	168, 170, 224, 169, 225, 0, 0, 171, 172, 0,
	226, 227, 228, 0, 0, 173, 229, 230, 0, 174,
	175, 176, 177, 0, 0, 178, 179, 180, 0, 0,
	181, 182, 183, 231, 232, 85, 184, 0, 0, 0,
	0, 185, 186, 187, 188, 0, 0, 88, 89, 0,
	90, 0, 0, 0, 0, 0, 0, 0, 0, 91,
	92, 189, 190, 191, 93, 192, 193, 0, 94, 194,
	195, 95, 0, 0, 196, 197, 198, 0, 199, 0,
	0, 0, 96, 97, 98, 0, 99, 0, 100, 0,
	0, 101, 102, 0, 0, 0, 0, 0, 0, 103,
	104, 105, 106, 200, 107, 201, 202, 0, 0, 108,
	0, 0, 0, 109, 110, 0, 111, 0, 0, 0,
	203, 112, 204, 0, 0, 113, 114, 205, 115, 0,
	116, 0, 0, 0, 0, 117, 206, 0, 207, 0,
	118, 119, 316, 209, 0, 0, 120, 0, 0, 121,
	210, 211, 212, 0, 213, 0, 0, 122, 0, 123,
	124, 0, 0, 214, 0, 125, 0, 0, 126, 0,
	0, 127, 0, 128, 129, 130, 131, 132, 0, 133,
	134, 137, 135, 0, 136, 0, 215, 138, 216, 139,
	140, 0, 0, 0, 0, 0, 141, 217, 0, 142,
	0, 218, 143, 144, 0, 219, 145, 220, 0, 146,
	147, 148, 221, 149, 150, 0, 152, 153, 151, 154,
	0, 155, 0, 156, 157, 222, 158, 0, 244, 159,
	160, 0, 161, 162, 0, 163, 164, 0, 165, 223,
	166, 0, 167, 168, 170, 224, 169, 225, 0, 0,
	171, 172, 0, 226, 227, 228, 0, 0, 173, 229,
	230, 0, 174, 175, 176, 177, 0, 0, 178, 179,
	180, 0, 0, 181, 182, 183, 231, 232, 85, 184,
	0, 0, 0, 0, 185, 186, 187, 188, 0, 0,
	88, 89, 0, 90, 0, 0, 0, 0, 0, 0,
	0, 0, 91, 92, 189, 190, 191, 93, 192, 193,
	0, 94, 194, 195, 95, 0, 0, 196, 197, 198,
	0, 199, 0, 0, 0, 96, 97, 98, 0, 99,
	0, 100, 0, 0, 101, 102, 0, 0, 0, 0,
	0, 0, 103, 104, 105, 106, 200, 107, 201, 202,
	0, 0, 108, 0, 0, 0, 109, 110, 0, 111,
	0, 0, 0, 203, 112, 204, 0, 0, 113, 114,
	205, 115, 0, 116, 0, 0, 0, 0, 117, 206,
	0, 207, 0, 118, 119, 314, 209, 0, 0, 120,
	0, 0, 121, 210, 211, 212, 0, 213, 0, 0,
	122, 0, 123, 124, 0, 0, 214, 0, 125, 0,
	0, 126, 0, 0, 127, 0, 128, 129, 130, 131,
	132, 0, 133, 134, 137, 135, 0, 136, 0, 215,
	138, 216, 139, 140, 0, 0, 0, 0, 0, 141,
	217, 0, 142, 0, 218, 143, 144, 0, 219, 145,
	220, 0, 146, 147, 148, 221, 149, 150, 0, 152,
	153, 151, 154, 0, 155, 0, 156, 157, 222, 158,
	0, 244, 159, 160, 0, 161, 162, 0, 163, 164,
	0, 165, 223, 166, 0, 167, 168, 170, 224, 169,
	225, 0, 0, 171, 172, 0, 226, 227, 228, 0,
	0, 173, 229, 230, 0, 174, 175, 176, 177, 0,
	0, 178, 179, 180, 0, 0, 181, 182, 183, 231,
	232, 85, 184, 0, 0, 0, 0, 185, 186, 187,
	188, 0, 0, 88, 89, 0, 90, 0, 0, 0,
	0, 0, 0, 0, 0, 91, 92, 189, 190, 191,
	93, 192, 193, 0, 94, 194, 195, 95, 0, 0,
	196, 197, 198, 0, 199, 0, 0, 0, 96, 97,
	98, 0, 99, 0, 100, 0, 0, 101, 102, 0,
	0, 0, 0, 0, 0, 103, 104, 105, 106, 200,
	107, 201, 202, 0, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 203, 112, 204, 0,
	0, 113, 114, 205, 115, 0, 116, 0, 0, 0,
	0, 117, 206, 0, 207, 0, 118, 119, 306, 209,
	0, 0, 120, 0, 0, 121, 210, 211, 212, 0,
	213, 0, 0, 122, 0, 123, 124, 0, 0, 214,
	0, 125, 0, 0, 126, 0, 0, 127, 0, 128,
	129, 130, 131, 132, 0, 133, 134, 137, 135, 0,
	136, 0, 215, 138, 216, 139, 140, 0, 0, 0,
	0, 0, 141, 217, 0, 142, 0, 218, 143, 144,
	0, 219, 145, 220, 0, 146, 147, 148, 221, 149,
	150, 0, 152, 153, 151, 154, 0, 155, 0, 156,
	157, 222, 158, 0, 244, 159, 160, 0, 161, 162,
	0, 163, 164, 0, 165, 223, 166, 0, 167, 168,
	170, 224, 169, 225, 0, 0, 171, 172, 0, 226,
	227, 228, 0, 0, 173, 229, 230, 0, 174, 175,
	176, 177, 0, 0, 178, 179, 180, 0, 0, 181,
	182, 183, 231, 232, 85, 184, 0, 0, 0, 0,
	185, 186, 187, 188, 0, 0, 88, 89, 0, 90,
	0, 0, 0, 0, 0, 0, 0, 0, 91, 92,
	189, 190, 191, 93, 192, 193, 0, 94, 194, 195,
	95, 0, 0, 196, 197, 198, 0, 199, 0, 0,
	0, 96, 97, 98, 0, 99, 0, 100, 0, 0,
	101, 102, 0, 0, 0, 0, 0, 0, 103, 104,
	105, 106, 200, 107, 201, 202, 0, 0, 108, 0,
	0, 0, 109, 110, 0, 111, 0, 0, 0, 203,
	112, 204, 0, 0, 113, 114, 205, 115, 0, 116,
	0, 0, 0, 0, 117, 206, 0, 207, 0, 118,
	119, 208, 209, 0, 0, 120, 0, 0, 121, 210,
	211, 212, 0, 213, 0, 0, 122, 0, 123, 124,
	0, 0, 214, 0, 125, 0, 0, 126, 0, 0,
	127, 0, 128, 129, 130, 131, 132, 0, 133, 134,
	137, 135, 0, 136, 0, 215, 138, 216, 139, 140,
	0, 0, 0, 0, 0, 141, 217, 0, 142, 0,
	218, 143, 144, 0, 219, 145, 220, 0, 146, 147,
	148, 221, 286, 150, 0, 152, 153, 151, 154, 0,
	155, 0, 156, 157, 222, 158, 0, 244, 159, 160,
	0, 161, 162, 0, 163, 164, 0, 165, 223, 166,
	0, 167, 168, 170, 224, 169, 225, 0, 0, 171,
	172, 0, 226, 227, 228, 0, 0, 173, 229, 230,
	0, 174, 175, 176, 177, 0, 0, 178, 179, 180,
	0, 0, 181, 182, 183, 231, 232, 85, 184, 0,
	0, 0, 0, 185, 186, 187, 188, 0, 0, 88,
	89, 0, 90, 0, 0, 0, 0, 0, 0, 0,
	0, 91, 92, 189, 190, 191, 93, 192, 193, 0,
	94, 194, 195, 95, 0, 0, 196, 197, 198, 0,
	199, 0, 0, 0, 96, 97, 98, 0, 99, 0,
	100, 0, 0, 101, 102, 0, 0, 0, 0, 0,
	0, 103, 104, 105, 106, 200, 107, 201, 202, 0,
	0, 108, 0, 0, 0, 109, 110, 0, 111, 0,
	0, 0, 203, 112, 204, 0, 0, 113, 114, 205,
	115, 0, 116, 0, 0, 0, 0, 117, 206, 0,
	207, 0, 118, 119, 208, 209, 0, 0, 120, 0,
	0, 121, 210, 211, 212, 0, 213, 0, 0, 122,
	0, 123, 124, 0, 0, 214, 0, 125, 0, 0,
	234, 0, 0, 127, 0, 128, 129, 130, 131, 241,
	0, 133, 134, 137, 135, 0, 136, 0, 215, 138,
	216, 139, 140, 0, 0, 0, 0, 0, 141, 217,
	0, 142, 0, 218, 143, 144, 0, 219, 145, 220,
	0, 146, 147, 148, 221, 149, 150, 0, 152, 153,
	151, 154, 0, 155, 0, 156, 157, 222, 158, 0,
	244, 159, 160, 0, 161, 235, 0, 163, 164, 0,
	165, 223, 166, 0, 167, 168, 170, 224, 169, 225,
	0, 0, 171, 172, 0, 240, 227, 228, 0, 0,
	236, 229, 230, 0, 174, 175, 176, 177, 0, 0,
	178, 179, 180, 0, 0, 181, 182, 183, 231, 232,
	85, 184, 0, 0, 0, 0, 185, 186, 187, 188,
	0, 0, 88, 89, 0, 90, 0, 0, 0, 0,
	0, 0, 0, 0, 91, 92, 189, 190, 191, 93,
	192, 193, 0, 94, 194, 195, 95, 0, 0, 196,
	197, 198, 0, 199, 0, 0, 0, 96, 97, 98,
	0, 99, 0, 100, 0, 0, 101, 102, 0, 0,
	0, 0, 0, 0, 103, 104, 105, 106, 200, 107,
	201, 202, 0, 0, 108, 0, 0, 0, 109, 110,
	0, 111, 0, 0, 0, 203, 112, 204, 0, 0,
	113, 114, 205, 115, 0, 116, 0, 0, 0, 0,
	117, 206, 0, 207, 0, 118, 119, 208, 209, 0,
	0, 120, 0, 0, 121, 210, 211, 212, 0, 213,
	0, 0, 122, 0, 123, 124, 0, 0, 214, 0,
	125, 0, 0, 126, 0, 0, 127, 0, 128, 129,
	130, 131, 132, 0, 133, 134, 137, 135, 0, 136,
	0, 215, 138, 216, 139, 140, 0, 0, 0, 0,
	0, 141, 217, 0, 142, 0, 218, 143, 0, 0,
	219, 145, 220, 0, 146, 0, 148, 221, 149, 150,
	0, 152, 153, 151, 154, 0, 155, 0, 156, 157,
	222, 0, 0, 244, 159, 160, 0, 161, 162, 0,
	163, 164, 0, 165, 223, 166, 0, 167, 168, 170,
	224, 169, 225, 0, 0, 171, 172, 0, 226, 227,
	228, 0, 0, 173, 229, 230, 0, 174, 175, 176,
	177, 0, 0, 178, 179, 180, 0, 0, 181, 182,
	183, 231, 232, 717, 184, 735, 736, 737, 0, 185,
	186, 187, 188, 0, 0, 738, 0, 0, 0, 0,
	0, 719, 0, 744, 0, 0, 0, 0, 717, 0,
	735, 736, 737, 0, 0, 0, 0, 0, 0, 0,
	738, 718, 0, 0, 0, 0, 719, 732, 744, 717,
	0, 735, 736, 737, 0, 0, 0, 0, 0, 0,
	0, 738, 0, 0, 0, 0, 718, 719, 0, 744,
	0, 0, 732, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 718, 0, 0,
	0, 0, 0, 732, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 745, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 743, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 740, 0,
	0, 745, 0, 0, 733, 0, 0, 0, 0, 0,
	0, 0, 0, 743, 0, 0, 0, 0, 0, 0,
	0, 0, 745, 740, 0, 0, 739, 0, 0, 733,
	0, 0, 0, 0, 743, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 740, 0, 0, 0, 0, 0,
	733, 739, 0, 0, 0, 0, 0, 0, 0, 734,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 742,
	0, 0, 739, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 734, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 742, 0, 0, 0, 717, 0,
	735, 736, 737, 0, 0, 734, 0, 0, 0, 0,
	738, 0, 0, 0, 0, 742, 719, 0, 744, 0,
	741, 0, 729, 730, 731, 0, 728, 725, 726, 727,
	720, 721, 722, 723, 724, 0, 718, 0, 0, 0,
	0, 0, 732, 1257, 0, 741, 0, 729, 730, 731,
	0, 728, 725, 726, 727, 720, 721, 722, 723, 724,
	0, 0, 0, 0, 0, 1633, 741, 0, 729, 730,
	731, 0, 728, 725, 726, 727, 720, 721, 722, 723,
	724, 0, 0, 0, 0, 0, 1632, 717, 0, 735,
	736, 737, 0, 0, 0, 0, 0, 0, 0, 738,
	0, 745, 0, 0, 0, 719, 0, 744, 717, 0,
	735, 736, 737, 743, 0, 0, 0, 0, 0, 0,
	738, 0, 0, 740, 0, 718, 719, 0, 744, 733,
	0, 732, 0, 0, 0, 717, 0, 735, 736, 737,
	0, 0, 0, 0, 0, 0, 718, 738, 0, 0,
	0, 739, 732, 719, 0, 744, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 718, 0, 0, 0, 0, 0, 732,
	0, 0, 0, 0, 734, 0, 0, 0, 0, 0,
	745, 0, 0, 0, 742, 0, 0, 0, 0, 0,
	0, 0, 743, 0, 0, 0, 0, 0, 0, 0,
	0, 745, 740, 0, 0, 0, 0, 0, 733, 0,
	0, 0, 0, 743, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 740, 0, 0, 0, 0, 745, 733,
	739, 0, 0, 0, 0, 741, 0, 729, 730, 731,
	743, 728, 725, 726, 727, 720, 721, 722, 723, 724,
	740, 739, 0, 0, 0, 1615, 733, 0, 0, 0,
	0, 0, 0, 734, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 742, 0, 0, 0, 0, 739, 0,
	0, 0, 0, 0, 734, 717, 0, 735, 736, 737,
	0, 0, 0, 0, 742, 0, 0, 738, 0, 0,
	0, 0, 0, 719, 0, 744, 0, 0, 0, 0,
	0, 734, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 742, 0, 718, 741, 0, 729, 730, 731, 732,
	728, 725, 726, 727, 720, 721, 722, 723, 724, 0,
	0, 0, 0, 0, 1594, 741, 0, 729, 730, 731,
	0, 728, 725, 726, 727, 720, 721, 722, 723, 724,
	0, 0, 0, 0, 0, 1589, 0, 0, 0, 0,
	0, 0, 741, 0, 729, 730, 731, 0, 728, 725,
	726, 727, 720, 721, 722, 723, 724, 0, 745, 0,
	0, 0, 1585, 0, 0, 717, 0, 735, 736, 737,
	743, 0, 0, 0, 0, 0, 0, 738, 0, 0,
	740, 0, 0, 719, 0, 744, 733, 0, 0, 0,
	0, 0, 717, 0, 735, 736, 737, 0, 0, 0,
	0, 0, 0, 718, 738, 0, 0, 0, 739, 732,
	719, 0, 744, 0, 0, 0, 0, 717, 0, 735,
	736, 737, 0, 0, 0, 0, 0, 0, 0, 738,
	718, 0, 0, 0, 0, 719, 732, 744, 0, 0,
	0, 734, 0, 0, 717, 0, 735, 736, 737, 0,
	0, 742, 0, 0, 0, 718, 738, 0, 0, 0,
	0, 732, 719, 0, 744, 0, 0, 0, 745, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	743, 0, 718, 0, 0, 0, 0, 0, 732, 0,
	740, 0, 0, 0, 0, 745, 733, 0, 0, 0,
	0, 0, 741, 0, 729, 730, 731, 743, 728, 725,
	726, 727, 720, 721, 722, 723, 724, 740, 739, 0,
	745, 0, 1524, 733, 0, 0, 0, 0, 0, 0,
	0, 0, 743, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 740, 0, 0, 739, 0, 745, 733, 0,
	0, 734, 0, 0, 717, 0, 735, 736, 737, 743,
	0, 742, 0, 0, 0, 0, 738, 0, 0, 740,
	739, 0, 719, 0, 744, 733, 0, 0, 734, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 742, 0,
	0, 0, 718, 0, 0, 0, 0, 739, 732, 0,
	0, 0, 0, 734, 0, 0, 0, 0, 0, 0,
	0, 0, 741, 742, 729, 730, 731, 0, 728, 725,
	726, 727, 720, 721, 722, 723, 724, 0, 0, 0,
	734, 0, 1523, 0, 0, 0, 0, 0, 0, 741,
	742, 729, 730, 731, 0, 728, 725, 726, 727, 720,
	721, 722, 723, 724, 0, 0, 0, 745, 0, 1435,
	0, 0, 0, 0, 741, 0, 729, 730, 731, 743,
	728, 725, 726, 727, 720, 721, 722, 723, 724, 740,
	0, 0, 0, 0, 1373, 733, 0, 0, 0, 0,
	0, 741, 0, 729, 730, 731, 0, 728, 725, 726,
	727, 720, 721, 722, 723, 724, 0, 739, 0, 0,
	0, 1348, 0, 717, 0, 735, 736, 737, 0, 0,
	0, 0, 0, 0, 0, 738, 0, 0, 0, 0,
	0, 719, 0, 744, 0, 0, 0, 0, 0, 0,
	734, 0, 717, 0, 735, 736, 737, 0, 0, 0,
	742, 718, 0, 0, 738, 0, 0, 732, 0, 0,
	719, 0, 744, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1219,
	718, 1235, 1236, 1237, 0, 0, 732, 0, 0, 0,
	0, 1343, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 741, 0, 729, 730, 731, 0, 728, 725, 726,
	727, 720, 721, 722, 723, 724, 745, 0, 0, 0,
	0, 994, 0, 1232, 0, 0, 0, 0, 743, 1693,
	717, 0, 735, 736, 737, 0, 0, 0, 740, 0,
	0, 0, 738, 0, 733, 745, 0, 0, 719, 0,
	744, 0, 0, 0, 0, 0, 0, 743, 0, 0,
	0, 0, 0, 0, 0, 0, 739, 740, 718, 0,
	0, 0, 0, 733, 732, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1238, 739, 0, 0, 0, 734,
	0, 0, 0, 0, 0, 0, 0, 1692, 0, 742,
	1233, 0, 0, 0, 0, 0, 0, 0, 1249, 0,
	0, 1248, 0, 0, 0, 0, 0, 0, 734, 0,
	0, 0, 0, 745, 0, 0, 0, 0, 742, 0,
	0, 0, 0, 0, 0, 743, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 740, 0, 0, 0, 0,
	741, 733, 729, 730, 731, 1234, 728, 725, 726, 727,
	720, 721, 722, 723, 724, 0, 0, 0, 1419, 0,
	0, 0, 0, 739, 0, 0, 0, 0, 0, 741,
	0, 729, 730, 731, 0, 728, 725, 726, 727, 720,
	721, 722, 723, 724, 0, 717, 0, 735, 736, 737,
	0, 0, 0, 0, 0, 0, 734, 738, 0, 0,
	0, 900, 0, 719, 0, 744, 742, 0, 1229, 1230,
	1231, 0, 1228, 1225, 1226, 1227, 1220, 1221, 1222, 1223,
	1224, 0, 0, 718, 0, 0, 0, 0, 0, 732,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 901, 0, 0, 741, 0, 729,
	730, 731, 0, 728, 725, 726, 727, 720, 721, 722,
	723, 724, 0, 0, 717, 0, 735, 736, 737, 0,
	0, 0, 0, 0, 0, 0, 738, 0, 745, 0,
	0, 0, 719, 747, 744, 0, 0, 0, 0, 717,
	743, 735, 736, 737, 0, 0, 0, 0, 0, 0,
	740, 738, 718, 0, 746, 0, 733, 719, 732, 744,
	0, 0, 717, 0, 735, 736, 737, 0, 0, 0,
	0, 0, 0, 0, 738, 0, 0, 718, 739, 0,
	719, 0, 744, 732, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	718, 0, 0, 0, 0, 0, 732, 0, 0, 0,
	0, 734, 0, 0, 0, 0, 0, 745, 0, 0,
	0, 742, 0, 0, 0, 0, 0, 0, 0, 743,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 740,
	0, 0, 745, 0, 0, 733, 0, 0, 0, 0,
	0, 0, 0, 1255, 743, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 740, 745, 0, 739, 281, 0,
	733, 0, 741, 0, 729, 730, 731, 743, 728, 725,
	726, 727, 720, 721, 722, 723, 724, 740, 0, 0,
	0, 0, 739, 733, 0, 0, 0, 0, 0, 717,
	734, 735, 736, 737, 0, 0, 0, 0, 0, 0,
	742, 738, 0, 0, 0, 739, 0, 719, 0, 744,
	0, 0, 0, 0, 0, 734, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 742, 0, 718, 0, 0,
	0, 0, 0, 732, 0, 0, 0, 0, 734, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 742, 0,
	0, 741, 0, 729, 730, 731, 0, 728, 725, 726,
	727, 720, 721, 722, 723, 724, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 741, 0, 729, 730,
	731, 0, 728, 725, 726, 727, 720, 721, 722, 723,
	724, 0, 745, 0, 0, 0, 0, 0, 0, 741,
	0, 729, 730, 731, 743, 728, 725, 726, 727, 720,
	721, 722, 723, 724, 740, 0, 0, 0, 0, 0,
	733, 0, 0, 0, 0, 0, 717, 0, 735, 736,
	737, 0, 0, 0, 0, 0, 0, 0, 738, 0,
	0, 1250, 739, 0, 719, 0, 744, 0, 0, 0,
	0, 717, 0, 735, 736, 737, 0, 0, 0, 0,
	0, 0, 0, 738, 718, 0, 0, 0, 0, 719,
	732, 744, 0, 0, 0, 734, 0, 0, 717, 0,
	735, 736, 737, 0, 0, 742, 0, 0, 0, 718,
	738, 0, 0, 1212, 0, 732, 719, 0, 744, 0,
	1367, 0, 0, 0, 0, 0, 0, 0, 1219, 0,
	1235, 1236, 1237, 0, 0, 0, 718, 0, 0, 0,
	1342, 0, 732, 0, 0, 0, 0, 0, 0, 745,
	0, 0, 0, 0, 0, 0, 741, 0, 729, 730,
	731, 743, 728, 725, 726, 727, 720, 721, 722, 723,
	724, 740, 1232, 0, 745, 0, 0, 733, 0, 0,
	0, 0, 0, 0, 0, 0, 743, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 740, 0, 0, 739,
	0, 745, 733, 0, 0, 0, 0, 0, 717, 0,
	735, 736, 737, 743, 0, 0, 0, 0, 0, 0,
	738, 0, 0, 740, 739, 0, 719, 0, 744, 733,
	0, 0, 734, 0, 1217, 717, 0, 735, 736, 737,
	0, 0, 742, 1238, 0, 0, 718, 0, 0, 0,
	0, 739, 732, 719, 0, 744, 0, 734, 0, 1233,
	0, 0, 0, 0, 0, 0, 0, 742, 0, 0,
	0, 0, 0, 718, 0, 0, 0, 0, 0, 732,
	0, 0, 0, 0, 734, 0, 0, 0, 0, 0,
	0, 0, 0, 741, 742, 729, 730, 731, 0, 728,
	725, 726, 727, 720, 721, 722, 723, 724, 0, 0,
	0, 745, 0, 0, 1234, 0, 0, 0, 741, 0,
	729, 730, 731, 743, 728, 725, 726, 727, 720, 721,
	722, 723, 724, 740, 0, 0, 0, 0, 745, 733,
	0, 0, 0, 0, 0, 741, 0, 729, 730, 731,
	743, 728, 725, 726, 727, 720, 721, 722, 723, 724,
	740, 739, 0, 0, 0, 0, 733, 0, 0, 0,
	0, 0, 717, 0, 735, 736, 737, 1229, 1230, 1231,
	0, 1228, 1225, 1226, 1227, 1220, 1221, 1222, 1223, 1224,
	719, 0, 744, 0, 734, 1219, 0, 1235, 1236, 1237,
	0, 0, 0, 0, 742, 0, 0, 0, 0, 1219,
	718, 1235, 1236, 1237, 0, 0, 732, 0, 0, 0,
	0, 734, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 742, 0, 0, 0, 0, 0, 0, 0, 1232,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1232, 0, 741, 0, 729, 730, 731,
	0, 728, 725, 726, 727, 720, 721, 722, 723, 724,
	0, 0, 0, 0, 0, 745, 0, 0, 0, 0,
	0, 0, 741, 0, 729, 730, 731, 0, 728, 725,
	726, 727, 720, 721, 722, 723, 724, 740, 1239, 0,
	0, 0, 0, 733, 0, 0, 0, 0, 0, 0,
	1238, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1238, 0, 1233, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1233, 0, 0, 0, 0, 0, 0, 928, 944, 920,
	936, 935, 0, 0, 922, 921, 0, 0, 734, 946,
	945, 0, 0, 0, 0, 0, 0, 0, 742, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1234, 0, 0, 0, 0, 0, 0, 941, 0,
	933, 932, 0, 0, 0, 1234, 0, 0, 931, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 930, 0, 0, 0, 0, 0, 0, 741,
	0, 729, 730, 731, 0, 728, 725, 726, 727, 720,
	721, 722, 723, 724, 0, 924, 925, 926, 0, 587,
	0, 0, 0, 0, 1229, 1230, 1231, 0, 1228, 1225,
	1226, 1227, 1220, 1221, 1222, 1223, 1224, 0, 1229, 1230,
	1231, 0, 1228, 1225, 1226, 1227, 1220, 1221, 1222, 1223,
	1224, 0, 0, 934, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 929, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 927, 0, 0, 0, 0, 0,
	948, 0, 0, 0, 0, 0, 923, 0, 0, 942,
	943, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 947,
}
var sqlPact = [...]int{

	179, -1000, -24, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 649, -1000, -1000, -1000, 679, 644, 45, 984, 984,
	14860, -1000, -1000, 17533, 2193, 371, 373, 371, 371, 372,
	14860, 474, 553, 145, -1000, 806, -12, 17290, 13645, 1185,
	-8, 13159, 253, 179, 13402, 13645, 17047, 1003, 935, 932,
	13159, 16804, 16561, 16318, -1000, 8926, -1000, -1000, -1000, -1000,
	790, -1000, -9, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 780, -1000, 13645, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 16075, 15832, 772, -1000, -1000, 447,
	299, 1172, -1000, 1, -1000, -1000, -1000, 999, -1000, 778,
	998, 996, 995, 992, 297, 782, -1000, 473, 772, -1000,
	772, -1000, -1000, -1000, 456, 14860, -1000, 13159, -1000, 15589,
	950, 15346, -1000, 806, -1000, -1000, -1000, 823, 1167, 1167,
	1167, 1194, 96, 95, 145, -21, 13645, -1000, 254, -21,
	6619, 6619, -1000, -1000, 253, -1000, 270, 11448, 0, -1000,
	6364, -1000, 632, 1071, 593, 588, 1063, -78, 13159, 13645,
	13645, 500, 15103, -1000, 1062, 85, 1058, -1000, -33, 1055,
	-1000, -41, -1000, -1000, -1000, -1000, -1000, -1000, 253, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 11701, 785, 11701, -1000, -1000, 1217, -1000, -1000,
	-10, -14, 893, 910, 9434, 9181, 1122, 957, -1000, -1000,
	-1000, -1, 4053, 13645, 1017, 11701, 13645, 13645, 13645, -1000,
	13645, -1000, 888, -1000, 13645, -1000, -19, -20, -1000, 14860,
	-1000, 88, -1000, 242, 855, 14617, 1034, 851, -1000, 823,
	-1000, 786, 884, 7147, 7912, 145, -1000, -1000, 145, 145,
	7912, -1000, -1000, 13645, -21, 1211, 13645, 94, -1000, 19399,
	-1000, -1000, 7912, 7912, 7912, 7912, 7912, 645, -1000, -1000,
	-1000, 4561, -1000, -1000, 0, 241, 258, -1000, -1000, 240,
	0, -1000, -1000, -1000, -1000, 239, 1318, 329, -1000, -1000,
	-1000, 7912, 303, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1007, 238, 237, -1000, -1000, -1000, -1000, 236,
	232, 230, 229, 228, 221, 219, 217, 215, 213, 212,
	211, 210, 630, -1000, 314, -1000, -1000, 314, 314, -1000,
	193, 193, 194, -1000, -1000, -1000, 193, -1000, -1000, -1000,
	285, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 208, 94,
	-1000, -1000, -1000, 13645, 0, -1000, -1000, -1000, 7912, 3799,
	-50, -1000, 19858, -1000, -42, 742, -1000, 12673, 1173, 1154,
	1140, 13159, 454, 452, 13645, 13645, 309, 50, 1210, 50,
	10942, -1000, 13645, 13645, -1000, 13645, -1000, -1000, 13645, 13645,
	13645, -12, 12187, 450, -36, 11944, 13645, -1000, -3, -1000,
	-1000, 990, 366, 608, 929, 809, -1000, -1000, -1000, -1000,
	-26, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1268, -1000, -1000, -1000, -1000, 1310, -26, -1000, -1000,
	-1000, -1000, -1000, 1316, -1000, -1000, -1000, -1000, 4053, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 13645, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 608, 929, -1000, -1000, 13159, 12430, 1054,
	765, 839, -1000, -1000, 281, 1049, -1000, -1000, -1000, -1000,
	19858, -1000, 19858, 518, 938, -1000, 938, -29, -1000, 19285,
	-1000, 207, -56, -1000, 309, 6619, 10689, 20176, 13645, 460,
	7912, 7912, 7912, 7912, 7912, 7912, 7912, 7912, 7912, 7912,
	7912, 7912, 7912, 7912, 7912, 7912, 7912, 7912, 7912, 7912,
	7912, 788, 446, 1115, 663, 192, 4053, -1000, 1251, 1251,
	1251, 19885, 19885, 187, -25, 18834, -32, 0, -1000, -1000,
	5836, 5581, 0, 3109, -1000, 746, 1307, 312, 19858, 1019,
	966, 204, 93, 90, 7912, 749, 7912, 8167, 7912, 7912,
	4816, 7912, 7912, 7912, 7912, 7912, 7912, -1000, 200, -1000,
	-1000, -1000, -1000, 1305, -1000, -1000, 1304, -1000, 433, 1279,
	309, 81, -1000, 2164, -1000, -1000, 6364, -1000, 897, 13645,
	13645, 13645, -1000, -1000, 819, 14374, -1000, 20176, 13645, -1000,
	197, 196, 908, 901, 13645, 13645, 14131, 13888, 13645, 585,
	13645, 13645, 581, -1000, 531, 7912, 764, -1000, 10183, 318,
	13645, 531, 63, -1000, -1000, -1000, 280, 13645, -1000, -1000,
	-1000, 85, -1000, -33, -1000, -1000, 13645, 11944, -36, -37,
	-1000, -1000, 13645, 929, -1000, -1000, -1000, 527, -1000, 620,
	-1000, 9687, -1000, -1000, -1000, 746, -1000, -46, -1000, -1000,
	-1000, -1000, 80, -38, -1000, -1000, -1000, -1000, 13645, 226,
	13645, 13645, 1047, 1315, 13645, -1000, -1000, -1000, 7912, -1000,
	-1000, -1000, -12, 13645, -1000, 964, -1000, -39, 1222, -133,
	12916, -1000, 9930, -1000, 1219, -1000, -1000, -1000, -1000, 57,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	194, 630, 193, 193, 193, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 285, -1000, 314, 314, 314, -1000, -1000, -1000,
	295, 584, 584, 1234, 1234, 1234, 1021, 1021, 1038, 2270,
	181, 181, 181, 1030, 308, 308, 181, 181, 181, 19885,
	2548, 257, 7912, 438, 656, 192, 7912, -1000, 1015, -1000,
	-1000, -1000, 989, 190, 8167, 8167, -1000, -1000, -1000, 4561,
	-1000, -1000, 189, 7912, -1000, 7912, -55, -57, -1000, 19858,
	-1000, -61, -1000, -1000, -23, 7912, 7912, 7912, 74, -1000,
	435, -1000, 432, 425, 408, -1000, 167, 72, 506, -1000,
	7912, 647, 160, 159, 7912, -1000, -1000, 19748, 67, 982,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 65, 19721, 64,
	20045, -1000, 8167, 8167, 8167, 4561, 158, 61, 19110, -122,
	19696, 6874, 6874, 6874, 60, 19422, 7912, -122, 18013, 2822,
	2662, -63, -65, -67, 1276, -73, 58, 294, 54, 964,
	-1000, -1000, 7912, -1000, -1000, -1000, 393, 390, 1045, -1000,
	814, -1000, 610, 7912, 13645, 157, 156, 626, -1000, 1033,
	678, 1029, 678, -1000, -42, 602, -1000, -1000, 388, -1000,
	6619, 19858, 531, 1150, -75, -1000, -1000, -1000, -1000, 309,
	10942, 6364, -81, -1000, -46, -1000, -46, -1000, -1000, -1000,
	-1000, -1000, -1000, 13645, -1000, 12430, 151, 13645, 150, 147,
	13645, -1000, 1034, -1000, 51, -1000, -1000, -1000, -1000, -1000,
	960, 1190, 10689, 924, 917, 10689, 930, 659, 659, 659,
	-1000, 12916, 3532, -1000, -1000, 13645, 144, 10436, 48, 1222,
	263, 262, -1000, 1273, 7912, 257, 7912, 8167, 8167, -1000,
	257, -1000, -1000, -1000, -1000, 981, 136, 7912, 20176, 19778,
	19059, -83, 5326, -48, 18724, 7912, -1000, -1000, 258, -1000,
	47, 6109, -1000, 19374, -22, -22, -1000, 828, 650, 568,
	507, 1270, 1314, 1077, -1000, 7912, 19559, -1000, 11195, 310,
	683, 18697, 20176, -1000, 7912, -1000, 980, 7912, -1000, 20176,
	8167, 8167, 8167, 8167, 8167, 8167, 8167, 8167, 8167, 8167,
	8167, 8167, 8167, 8167, 8167, 8167, 8167, 8167, 830, 8167,
	1246, 1246, 1246, -54, 5071, -1000, 987, 980, 7912, 7912,
	20176, 43, 42, 38, -1000, 7912, -122, 7912, 7912, 7912,
	-1000, -1000, -1000, 32, -1000, 1265, -1000, -1000, -1000, 960,
	18993, 13645, 13645, 13645, 1027, 1701, -1000, 18672, -87, 13645,
	13645, -1000, 923, 936, 357, 13645, -1000, 13645, -1000, 13645,
	13645, 13645, 13645, -58, -1000, 149, -12, 13645, 531, -1000,
	-1000, 279, -1000, -1000, 8673, 132, 12430, 8673, 760, -1000,
	-1000, 306, 7912, 7912, 1222, 10689, 10689, 802, 912, 10689,
	-1000, -1000, -1000, -1000, -1000, -1000, 927, 131, 13645, 12916,
	399, 1263, 30, 1220, 257, 2213, 2133, 7912, 20176, 20022,
	-88, -1000, 7912, 7912, -1000, -93, -1000, 7912, -1000, 19858,
	-1000, 1313, 7912, 29, 27, 23, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 19, -1000, -1000, 19858, 7912, -1000, -1000,
	17776, 7912, 12, -1000, 11, 19858, 987, 19858, -1000, 534,
	534, 1246, 1246, 1246, 615, 615, 1293, 430, 1640, 1640,
	1640, 480, 418, 418, 1640, 1640, 1640, 975, 876, 129,
	20059, 7912, -94, -1000, -1000, -1000, 19858, 19858, 10, -1000,
	-1000, -1000, -122, 2500, 18645, 18535, -1000, 9, 306, -1000,
	-1000, -1000, -1000, 13645, -1000, 13645, -1000, 13645, 801, -1000,
	-1000, 900, 126, 8167, 13645, -1000, 685, -95, -99, 799,
	-1000, 798, 7912, -1000, 20176, 678, 678, -1000, 378, 376,
	-1000, 1087, 13645, 1120, -1000, -1000, -1000, 124, -103, -1000,
	180, 1165, 7912, -1000, -1000, 123, 8673, 7, -104, 13645,
	-1000, 13645, 19858, -122, -1000, 802, -1000, 116, 7912, 10689,
	-1000, -156, -1000, 195, -1000, 13645, -105, -1000, -1000, 260,
	182, -1000, 7912, 7912, 20022, -111, -1000, 20176, 257, 257,
	-1000, 18375, -1000, 19374, -1000, -1000, -1000, -1000, 19858, 637,
	-1000, 18348, -1000, -1000, -1000, 8167, 973, 113, 20176, 18327,
	-1000, -1000, 7912, -1000, -1000, -1000, -1000, -1000, 718, -1000,
	-1000, -1000, 7912, 20059, 99, -1000, 112, -1000, -1000, -1000,
	604, -1000, -1000, 19858, 1166, -1000, -1000, 13645, 13645, 442,
	-112, 13645, -1000, -1000, 4306, 685, 8673, 1149, 0, 13645,
	1149, 18238, 3109, -121, -1000, 685, 110, -120, -1000, 1207,
	-1000, 13645, 19858, -1000, 927, -1000, 4053, -123, -1000, -1000,
	-1000, 257, 257, -1000, -1000, -1000, 6, 683, 1179, -1000,
	2645, 8167, 20176, -128, -1000, 18059, -1000, 18038, 874, 13645,
	13645, 13645, 324, 13645, -1000, -1000, 499, -1000, 309, -1000,
	-1000, -1000, -1000, -1000, -1000, 1165, -23, 685, -1000, 8673,
	13645, 104, -130, -1000, -1000, -1000, -1000, 606, 7912, 2645,
	-134, -1000, -1000, -1000, 696, 605, -140, -145, 99, -1000,
	7912, -1000, 10942, -1000, 1149, 4, -1000, -146, -1000, -1000,
	-1000, 3, 7657, 7657, -122, -1000, -1000, 735, 710, 514,
	-1000, -1000, -1000, -1000, -1000, 874, 19858, -117, -1000, -1000,
	685, -1000, -1000, -1000, 8420, 736, 523, 19022, -1000, -1000,
	1094, -1000, 331, 820, 820, 696, -1000, -1000, 1224, -1000,
	-1000, -1000, -1000, -1000, -1000, 1237, -1000, -1000, 881, -1000,
	-1000, 7402, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1528, 1527, 1212, 1526, 1524, 1522, 1520, 1519, 89,
	1517, 1516, 94, 1515, 87, 1514, 1512, 1511, 1510, 44,
	1508, 1502, 1501, 1498, 1497, 78, 19, 111, 2064, 100,
	1495, 1490, 1474, 15, 82, 77, 1468, 57, 49, 80,
	90, 1421, 53, 1467, 112, 42, 13, 567, 73, 118,
	123, 95, 1466, 1464, 1461, 30, 1458, 1457, 1453, 10,
	40, 25, 1449, 14, 35, 1448, 1447, 81, 1446, 74,
	92, 43, 105, 151, 1442, 56, 9, 55, 1440, 31,
	1439, 28, 58, 108, 1438, 32, 138, 50, 23, 47,
	1437, 1436, 1435, 1433, 79, 64, 38, 1432, 1431, 68,
	1428, 101, 109, 1427, 1425, 97, 1423, 1420, 1419, 670,
	1418, 1417, 549, 3, 36, 54, 39, 93, 91, 33,
	1416, 12, 1414, 0, 790, 759, 1411, 37, 27, 61,
	34, 52, 17, 1410, 88, 1408, 1405, 1403, 1401, 1400,
	60, 1398, 41, 113, 29, 46, 69, 18, 45, 62,
	84, 121, 83, 1397, 102, 1395, 51, 1394, 1393, 864,
	65, 1391, 1390, 1389, 850, 825, 821, 161, 1388, 1387,
	293, 179, 1386, 1385, 67, 1384, 1382, 119, 1380, 110,
	21, 1379, 96, 1378, 71, 1376, 298, 104, 48, 1375,
	98, 59, 1373, 1371, 1370, 22, 2, 8, 4, 6,
	5, 24, 20, 1367, 1366, 99, 75, 1363, 122, 1360,
	1357, 26, 1354, 1351, 16, 1346, 11, 1342, 7, 1,
	1336, 116, 1335, 70, 1333, 1233, 1330, 120, 1327, 1326,
	1240, 63,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 4, 4, 35, 35, 34, 34, 34, 34,
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
	34, 32, 32, 37, 37, 37, 36, 36, 31, 31,
	5, 5, 5, 9, 10, 10, 10, 10, 10, 10,
	72, 72, 71, 71, 74, 74, 11, 11, 12, 12,
	12, 12, 155, 155, 154, 13, 18, 221, 221, 221,
	225, 225, 226, 226, 227, 227, 227, 227, 227, 227,
	227, 223, 223, 21, 21, 21, 21, 109, 109, 111,
	111, 111, 111, 40, 108, 108, 108, 108, 110, 110,
	110, 110, 179, 177, 177, 184, 184, 184, 52, 52,
	52, 52, 52, 53, 53, 53, 176, 176, 176, 176,
	185, 185, 185, 185, 185, 185, 54, 54, 54, 183,
	183, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 178, 178, 222, 222, 224,
	224, 8, 8, 55, 55, 56, 56, 115, 115, 115,
	114, 193, 193, 194, 194, 194, 195, 195, 195, 195,
	195, 195, 195, 192, 192, 190, 190, 191, 191, 191,
	191, 228, 228, 113, 113, 59, 59, 198, 198, 198,
	198, 196, 196, 196, 196, 196, 199, 197, 200, 200,
	200, 200, 200, 143, 143, 143, 24, 7, 7, 98,
	98, 63, 63, 147, 147, 147, 46, 46, 33, 33,
	33, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	99, 99, 100, 100, 16, 20, 23, 23, 23, 23,
	23, 230, 230, 43, 43, 43, 43, 44, 44, 112,
	112, 112, 112, 112, 39, 6, 6, 38, 38, 14,
	14, 49, 49, 105, 105, 105, 107, 107, 107, 106,
	106, 106, 85, 85, 25, 76, 76, 77, 77, 153,
	78, 78, 19, 19, 28, 28, 26, 26, 26, 26,
	26, 26, 27, 27, 29, 29, 29, 29, 29, 29,
	29, 206, 206, 206, 208, 208, 205, 15, 15, 15,
	15, 207, 207, 229, 229, 86, 86, 86, 58, 57,
	57, 61, 61, 60, 62, 62, 146, 83, 83, 83,
	83, 101, 102, 102, 103, 103, 104, 104, 82, 82,
	130, 130, 30, 30, 67, 67, 68, 68, 121, 121,
	122, 122, 120, 120, 120, 148, 148, 148, 148, 149,
	149, 149, 149, 149, 149, 144, 144, 144, 144, 145,
	145, 89, 89, 89, 89, 87, 87, 88, 88, 150,
	150, 150, 150, 84, 84, 151, 151, 151, 116, 116,
	156, 156, 156, 66, 66, 66, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 158, 158, 158, 158,
	160, 160, 160, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 161, 161, 168, 168,
	169, 169, 170, 171, 162, 162, 163, 163, 164, 165,
	172, 172, 172, 172, 174, 174, 166, 166, 166, 166,
	167, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 96, 96, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 201, 201,
	201, 201, 201, 201, 201, 203, 203, 204, 204, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 209, 209, 210, 210, 211, 211,
	212, 212, 214, 215, 215, 215, 216, 220, 220, 213,
	213, 217, 217, 217, 218, 218, 219, 219, 219, 219,
	219, 134, 134, 134, 135, 135, 136, 73, 73, 132,
	132, 131, 131, 131, 133, 133, 90, 173, 173, 173,
	173, 173, 173, 173, 91, 91, 97, 92, 92, 93,
	93, 93, 93, 93, 93, 127, 128, 94, 94, 94,
	129, 129, 137, 141, 141, 140, 139, 139, 138, 138,
	119, 119, 119, 119, 118, 117, 79, 79, 231, 231,
	142, 142, 80, 80, 81, 75, 75, 152, 152, 152,
	152, 69, 69, 51, 51, 70, 70, 47, 47, 50,
	48, 48, 48, 48, 64, 64, 65, 65, 45, 45,
	126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
	126, 175, 175, 175, 41, 41, 41, 42, 42, 181,
	181, 181, 182, 182, 182, 182, 180, 180, 180, 180,
	180, 186, 186, 186, 186, 186, 186, 186, 186, 186,
	186, 186, 186, 186, 186, 186, 186, 186, 186, 186,
	186, 186, 186, 186, 186, 186, 186, 186, 186, 186,
	186, 186, 186, 186, 186, 186, 186, 186, 186, 186,
	186, 186, 186, 186, 186, 186, 186, 186, 186, 186,
	186, 186, 186, 186, 186, 186, 186, 186, 186, 186,
	186, 186, 186, 186, 186, 186, 186, 186, 186, 186,
	186, 186, 186, 186, 186, 186, 186, 186, 186, 186,
	186, 186, 186, 186, 186, 186, 186, 186, 186, 186,
	186, 186, 186, 186, 186, 186, 186, 186, 186, 186,
	186, 186, 186, 188, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 188, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 188, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 188, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 188, 188, 188, 188, 187, 187, 187,
	187, 187, 187, 187, 187, 187, 187, 187, 187, 187,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 4, 6, 1, 3, 2, 5, 3, 6,
	4, 6, 6, 6, 4, 8, 2, 3, 3, 6,
	4, 3, 2, 1, 1, 0, 2, 0, 2, 0,
	1, 1, 1, 6, 3, 5, 4, 6, 3, 5,
	1, 3, 1, 2, 2, 3, 2, 5, 1, 1,
	1, 1, 1, 3, 1, 6, 6, 1, 2, 2,
	1, 1, 1, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 2, 3, 6, 3, 2, 1, 1,
	1, 3, 3, 2, 3, 3, 3, 3, 1, 3,
	3, 2, 1, 1, 3, 1, 1, 1, 2, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 1, 1, 1, 1, 0, 1,
	1, 2, 2, 4, 2, 4, 4, 4, 4, 3,
	3, 4, 3, 2, 4, 2, 0, 2, 0, 2,
	0, 6, 9, 1, 0, 1, 3, 1, 1, 1,
	3, 2, 0, 3, 1, 2, 2, 1, 1, 2,
	4, 2, 5, 6, 7, 3, 1, 4, 5, 5,
	10, 1, 1, 4, 0, 3, 0, 2, 2, 2,
	0, 1, 1, 2, 2, 0, 3, 3, 2, 1,
	1, 2, 2, 1, 2, 1, 4, 10, 13, 1,
	0, 1, 3, 3, 3, 5, 2, 0, 1, 1,
	0, 6, 6, 8, 6, 8, 8, 10, 8, 10,
	1, 0, 2, 0, 2, 2, 3, 3, 2, 2,
	2, 1, 0, 1, 3, 2, 0, 2, 1, 1,
	1, 3, 3, 0, 3, 4, 7, 3, 0, 7,
	6, 1, 3, 1, 4, 2, 8, 5, 0, 4,
	3, 0, 2, 0, 8, 1, 3, 1, 1, 3,
	5, 5, 1, 1, 3, 3, 1, 2, 3, 2,
	3, 4, 1, 1, 8, 8, 1, 2, 4, 4,
	4, 2, 2, 3, 1, 3, 6, 1, 1, 1,
	1, 1, 0, 1, 0, 1, 1, 0, 1, 1,
	0, 1, 0, 3, 1, 3, 2, 2, 2, 1,
	1, 2, 2, 3, 1, 1, 1, 1, 3, 0,
	2, 0, 2, 3, 2, 0, 1, 3, 3, 1,
	1, 3, 2, 4, 0, 3, 2, 1, 4, 3,
	4, 5, 4, 5, 4, 5, 2, 4, 1, 1,
	0, 2, 2, 2, 1, 1, 0, 4, 2, 1,
	2, 2, 4, 1, 3, 1, 2, 3, 2, 0,
	2, 5, 2, 3, 4, 0, 1, 1, 1, 1,
	2, 4, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 5, 0, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 2, 1, 1, 3, 0, 1, 1,
	1, 1, 5, 2, 1, 1, 1, 1, 4, 1,
	2, 2, 1, 1, 1, 0, 1, 1, 1, 4,
	1, 1, 1, 1, 1, 1, 1, 3, 3, 3,
	3, 3, 3, 3, 0, 1, 4, 1, 3, 3,
	5, 2, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 2, 2, 3, 4, 4, 5,
	3, 4, 3, 3, 4, 3, 4, 3, 4, 5,
	6, 6, 7, 6, 7, 6, 7, 3, 4, 1,
	3, 2, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 5, 6, 6, 7, 1, 1, 1, 3,
	1, 1, 1, 2, 2, 2, 1, 1, 3, 5,
	6, 8, 6, 6, 4, 4, 1, 1, 1, 5,
	1, 3, 1, 3, 1, 1, 1, 1, 6, 4,
	4, 4, 4, 6, 5, 5, 5, 4, 8, 6,
	6, 4, 4, 4, 5, 0, 5, 0, 2, 0,
	1, 3, 3, 2, 2, 0, 6, 1, 0, 3,
	0, 2, 2, 0, 1, 4, 2, 2, 2, 2,
	2, 4, 3, 5, 4, 3, 5, 1, 3, 1,
	3, 3, 3, 2, 1, 3, 3, 1, 1, 1,
	1, 1, 1, 1, 4, 3, 2, 3, 0, 3,
	3, 2, 2, 1, 0, 2, 2, 3, 2, 1,
	1, 3, 5, 1, 2, 4, 2, 0, 1, 0,
	1, 1, 3, 5, 2, 2, 1, 2, 1, 0,
	1, 1, 1, 3, 3, 1, 3, 3, 2, 1,
	1, 1, 3, 1, 3, 1, 3, 1, 2, 3,
	1, 2, 2, 1, 1, 3, 3, 0, 1, 2,
	1, 1, 1, 1, 6, 2, 3, 5, 1, 1,
	1, 1, 2, 2, 1, 1, 1, 1, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -9, -10, -11, -13,
	-14, -17, -18, -20, -19, -21, -22, -23, -16, -24,
	-25, 19, -6, -7, -8, -207, 83, 90, 103, 190,
	197, -26, -28, 204, 205, 29, 212, 52, 86, 192,
	187, 231, 58, -206, -29, -27, 276, 252, 258, 200,
	-30, 218, 245, 279, 218, 70, 114, 78, 118, 239,
	238, 70, 114, 218, -12, 276, -19, -14, -25, -9,
	-225, 18, -226, -227, 58, 83, 103, 200, 118, 78,
	238, -225, -44, 197, -41, 4, -186, -188, 16, 17,
	19, 28, 29, 33, 37, 40, 51, 52, 53, 55,
	57, 60, 61, 68, 69, 70, 71, 73, 78, 82,
	83, 85, 90, 94, 95, 97, 99, 104, 109, 110,
	115, 118, 126, 128, 129, 134, 137, 140, 142, 143,
	144, 145, 146, 148, 149, 151, 153, 150, 156, 158,
	159, 165, 168, 171, 172, 175, 178, 179, 180, 182,
	183, 187, 185, 186, 188, 190, 192, 193, 195, 198,
	199, 201, 202, 204, 205, 207, 209, 211, 212, 215,
	213, 219, 220, 227, 231, 232, 233, 234, 237, 238,
	239, 242, 243, 244, 248, 253, 254, 255, 256, 30,
	31, 32, 34, 35, 38, 39, 43, 44, 45, 47,
	72, 74, 75, 89, 91, 96, 105, 107, 111, 112,
	119, 120, 121, 123, 132, 155, 157, 166, 170, 174,
	176, 181, 194, 208, 214, 216, 222, 223, 224, 228,
	229, 245, 246, -109, 137, 202, 227, -110, -108, -179,
	222, 146, -71, -41, 197, 4, 70, 51, 71, 104,
	114, 115, 129, 219, 222, 227, 18, 58, -230, 227,
	227, -230, -230, -43, 227, 225, -44, -229, 218, 218,
	-98, 70, 236, -27, -29, -28, -60, -61, 235, 122,
	88, 164, -26, -28, -206, -208, 182, -205, -41, -208,
	-57, -58, 18, 80, 280, -150, -47, 162, -41, -81,
	276, -3, -150, 111, -41, -50, 111, -47, 101, 124,
	124, -151, -150, -41, 111, -51, 111, -50, -72, 111,
	-71, -155, -154, -182, 4, -186, -188, -187, 245, 49,
	59, 102, 117, 125, 127, 133, 135, 147, 167, 169,
	191, 206, 161, 280, 161, -41, -109, 45, -109, -111,
	-39, -40, 126, 178, 225, 261, 101, 256, -54, 5,
	76, -74, 278, 101, -222, 161, 101, 101, 101, -178,
	101, 256, 126, 178, 218, -112, -39, -40, -112, 225,
	-44, -84, -150, -71, 111, 114, -41, 111, -60, -61,
	-83, -101, -102, 136, 160, -86, 18, 80, -86, -86,
	37, 277, 277, 280, -208, -65, 276, -75, -152, -123,
	269, -125, 267, 268, 273, 152, 257, -134, -47, -126,
	9, 276, -137, -203, -28, 89, 24, -135, -136, 194,
	-41, 7, 8, 5, 6, -45, -158, -167, 230, 92,
	154, 41, -201, -202, 4, -186, -181, -159, -169, -163,
	-166, 123, 49, 63, 66, 64, 67, 203, 240, 42,
	91, 170, 174, 216, 228, 229, 111, 155, 112, 47,
	105, 132, 82, 31, 32, 34, 35, 43, 44, 72,
	74, 75, 96, 119, 120, 121, 157, 181, 208, 214,
	223, 224, 246, -187, -170, -171, -164, -165, -172, -75,
	-81, 269, -47, 276, -79, -119, -118, -117, 274, 278,
	-80, -142, -123, 76, -35, 185, -34, 17, 19, 83,
	243, 89, 185, 185, 89, 281, -151, -49, -47, -49,
	204, -41, 25, 89, -37, 280, 40, 188, 89, 280,
	89, 277, 280, -221, -70, 218, 70, -48, -41, 269,
	-227, -221, 25, 280, 280, 134, -53, 140, 151, 109,
	-177, 76, -184, -176, -143, 9, 230, 92, 161, -183,
	8, 268, -175, -182, 5, 7, 267, -177, 76, 61,
	-185, 5, 4, -167, -143, 76, 137, 123, 278, -180,
	4, -186, -188, -187, -189, 18, 20, 21, 22, 23,
	24, 25, 26, 27, 36, 41, 42, 46, 48, 50,
	56, 58, 62, 63, 64, 65, 66, 67, 76, 77,
	79, 80, 81, 84, 86, 88, 92, 93, 98, 100,
	101, 103, 106, 108, 113, 114, 116, 122, 124, 130,
	131, 136, 138, 139, 152, 154, 160, 161, 162, 163,
	164, 173, 177, 184, 189, 200, 203, 210, 217, 218,
	221, 225, 226, 230, 235, 236, 240, 241, 247, 249,
	250, 251, 252, -179, -224, 98, -221, -179, -179, -179,
	-179, 134, -179, 280, 280, -44, -37, 280, 276, 152,
	-42, 111, -41, -38, 85, 152, -83, -102, -101, -103,
	-123, 18, -123, -125, -27, -27, -27, -62, -146, -123,
	-205, 25, -64, -41, -67, 280, 101, 10, 48, 28,
	267, 268, 269, 270, 271, 264, 265, 266, 263, 259,
	260, 261, 54, 141, 196, 12, 13, 14, 22, 163,
	135, 257, 206, 125, 30, 113, 25, 4, -123, -123,
	-123, -123, -123, 169, -28, -123, -73, -79, -28, -131,
	274, 276, -79, 276, 5, 5, 276, -138, -123, -209,
	253, 98, 276, 276, 276, 276, 276, 276, 276, 276,
	276, 276, 276, 276, 276, 276, 276, 176, -174, 248,
	-174, -174, -160, 276, -160, -161, 276, -160, 258, 276,
	-67, -47, -119, -123, -180, 269, 280, 277, 280, 225,
	-99, 56, 50, -114, 111, 50, -190, -41, 56, -191,
	46, 236, 177, 100, -99, 56, -99, 56, 56, -150,
	225, 225, -50, -41, -116, 250, -105, -19, 276, 76,
	25, -105, -76, -77, -153, -78, -47, 276, -41, -41,
	-50, -51, -71, -72, -12, -154, 225, 280, -70, -64,
	-118, -117, 101, 227, -40, -39, -52, 180, 209, 186,
	201, 280, 8, 7, 7, 5, -180, -223, -41, -40,
	-39, -150, -55, -56, -115, -114, -192, -190, 114, 236,
	89, 161, 152, 261, 89, -104, 194, 195, 280, -33,
	26, 79, 276, 280, 277, -116, -152, -68, -148, -150,
	-28, -149, 276, -156, -157, -159, -168, -162, -166, -167,
	33, 39, 38, 220, 119, 120, 121, 208, 31, 181,
	96, 82, 75, 74, 157, 35, 34, -170, -171, -164,
	-165, 72, 223, 224, 32, 44, 43, 246, 214, -71,
	222, -123, -123, -123, -123, -123, -123, -123, -123, -123,
	-123, -123, -123, -123, -123, -123, -123, -123, -123, -123,
	-123, -123, 135, 206, 30, 113, 225, 154, 152, 230,
	92, 237, 80, 158, -231, 217, 27, -129, -28, 276,
	-180, -134, 194, 276, 277, 280, -73, -133, 275, -123,
	-131, -73, 277, 277, -73, 247, 18, 80, 269, -95,
	255, 144, 73, 110, 143, -96, 199, 7, -141, -140,
	249, -210, 94, 106, 276, 277, 277, -123, -90, -173,
	4, 255, 144, 73, 110, 143, 199, -91, -123, -92,
	-124, -125, 267, 268, 273, 276, 194, -93, -123, -73,
	-123, 36, 131, 226, -94, -123, 101, -73, -123, -123,
	-123, -73, -73, -73, 276, 7, 7, 222, 7, -116,
	277, 275, 284, -142, -34, -47, -41, -41, 152, -114,
	111, -156, -41, 276, 276, 128, 128, -41, -41, 111,
	-41, 111, -41, -41, -35, 185, -41, -41, 185, -85,
	189, -123, -107, 161, -69, -47, 245, -41, -85, -67,
	280, 261, -69, -37, -223, -48, -223, -39, 234, 53,
	180, -184, -95, 280, 277, 280, -42, 114, -71, -47,
	89, 5, -41, -146, -15, -19, -14, -25, -9, -41,
	-82, 106, 280, 59, -89, 127, 147, 102, 133, 191,
	117, -120, 281, -145, -144, 25, -41, -28, -149, -148,
	-66, 24, -95, 276, 256, -123, 225, -231, 217, -129,
	-123, 154, 230, 92, 237, 80, 158, 101, 276, -124,
	-124, -73, 276, -73, -123, 280, 275, 275, 280, 277,
	-61, 280, -60, -123, -73, -73, 277, 225, 225, 225,
	225, 276, 277, -139, -140, 84, -123, -215, 168, 276,
	276, -123, 25, 277, 101, 277, -97, 173, 277, 10,
	267, 268, 269, 270, 271, 264, 265, 266, 263, 259,
	260, 261, 54, 141, 196, 12, 13, 14, 125, 113,
	-124, -124, -124, -73, 276, 277, -127, -128, 101, 98,
	25, -94, -94, -94, 277, 101, -73, 280, 280, 280,
	277, 277, 277, 7, 277, 280, 277, 256, 277, -82,
	-123, 225, 225, 89, 152, -193, -191, -123, -64, 276,
	276, -32, 83, 204, -100, 89, -37, 89, -37, 225,
	-99, 56, 225, -75, -85, 55, 277, 280, -116, -77,
	-142, 277, -41, -115, 276, -42, 276, 276, -41, -38,
	277, -130, 108, 37, -148, 127, 127, -148, -89, 127,
	-87, 167, -87, -87, -145, -180, 282, -41, 276, 277,
	274, 274, 7, -123, -123, -124, -124, 101, 276, -123,
	-132, -156, 22, 22, 277, -73, 277, 280, 277, -123,
	-131, 277, 247, -61, -61, -61, 144, 110, 143, -96,
	143, -96, -96, 7, 5, 86, -123, 221, -216, -41,
	276, 250, -60, 277, -156, -123, -127, -123, -156, -124,
	-124, -124, -124, -124, -124, -124, -124, -124, -124, -124,
	-124, -124, -124, -124, -124, -124, -124, 80, 152, 158,
	-124, 280, -73, 277, -128, -127, -123, -123, -156, 277,
	277, 277, -73, -123, -123, -123, 277, 7, -130, 275,
	-41, -41, -114, 89, -194, 56, -195, 48, 152, 154,
	236, 177, 46, 76, 184, 277, 277, -64, -64, 152,
	76, 152, 76, 69, 232, -41, -41, -47, -41, -41,
	-41, -106, 276, 161, -19, -47, -85, 261, -63, -147,
	-41, -204, 276, -201, -202, -45, 276, -55, -63, 161,
	-211, 251, -123, -73, -148, -148, -88, 241, 161, 127,
	-148, -122, -121, 99, 150, 276, -64, -144, 275, 7,
	7, 277, 22, 22, -123, -132, 277, 280, -123, -123,
	277, -123, 5, -123, 277, 277, 277, 277, -123, -220,
	-41, -123, 277, 277, -128, 101, 80, 158, 276, -123,
	277, 277, 280, 277, 277, 277, -211, -114, -41, -71,
	154, 128, 276, -124, -47, -113, -228, 57, 215, 277,
	277, 154, 154, -123, -156, -37, -37, 225, 225, 81,
	-64, 56, -81, -28, 276, 277, 280, -46, -79, 48,
	-46, -123, 276, -63, 277, 277, -47, -212, -214, -41,
	-88, 276, -123, -148, 280, 283, 261, -64, 277, 275,
	275, -123, -123, 277, -156, 277, -61, -213, 172, 277,
	-124, 101, 276, -132, 277, -123, -195, -123, -59, 276,
	276, 184, -36, 48, -41, -41, 238, 153, 277, -41,
	-113, -147, -33, -71, -33, 277, -73, 277, -113, 276,
	280, 25, -64, -121, -180, 277, 277, -61, 37, -124,
	-132, 277, 277, 277, -198, 142, -64, -64, -47, -31,
	241, -71, 204, -116, -46, -61, -113, -63, -214, -216,
	277, -217, 179, 195, -73, 277, -196, -199, -197, 161,
	102, 171, 207, 277, 277, -59, -123, -76, -33, 277,
	277, 277, -218, -219, 30, 233, 61, -123, -218, -197,
	161, -199, 161, 238, 78, -198, -116, -113, -219, 175,
	97, 194, 175, 97, -200, 149, 188, 40, 204, -200,
	-196, 22, 16, 154, 76, -219,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 0, 50, 51, 52, 0, 0, 322, 0, 0,
	0, 292, -2, 0, 0, 252, 0, 252, 252, 256,
	0, 324, 220, 321, -2, 332, 0, 0, 0, 330,
	306, 0, 0, -2, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 66, 0, 68, 69, 70, 71,
	0, 80, 81, 82, 84, 85, 86, 87, 88, 89,
	90, 0, 245, 822, 258, 734, 735, 736, 751, 752,
	753, 754, 755, 756, 757, 758, 759, 760, 761, 762,
	763, 764, 765, 766, 767, 768, 769, 770, 771, 772,
	773, 774, 775, 776, 777, 778, 779, 780, 781, 782,
	783, 784, 785, 786, 787, 788, 789, 790, 791, 792,
	793, 794, 795, 796, 797, 798, 799, 800, 801, 802,
	803, 804, 805, 806, 807, 808, 809, 810, 811, 812,
	813, 814, 815, 816, 817, 818, 819, 820, 821, 823,
	824, 825, 826, 827, 828, 829, 830, 831, 832, 833,
	834, 835, 836, 837, 838, 839, 840, 841, 842, 843,
	844, 845, 846, 847, 848, 849, 850, 851, 852, 853,
	854, 855, 856, 857, 858, 859, 860, 861, 862, 863,
	864, 865, 866, 867, 868, 869, 870, 871, 872, 873,
	874, 875, 876, 877, 878, 879, 880, 881, 882, 883,
	884, 885, 886, 887, 888, 889, 890, 891, 892, 893,
	894, 895, 896, 93, 789, 826, 837, 98, 108, 0,
	890, -2, 112, 62, 822, 141, 142, 0, 144, 158,
	0, 0, 0, 156, 0, 0, 153, 0, 263, 251,
	263, 248, 249, 250, 253, 0, 244, 0, 323, 0,
	0, 0, 219, -2, 302, 303, -2, 0, 327, 327,
	327, 0, 0, 303, 0, 311, 812, 314, 717, 312,
	0, 0, 329, 328, 0, 307, 389, 0, 707, 352,
	0, 2, 0, 872, 0, 0, 872, 0, 0, 0,
	0, 0, 395, 54, 872, 45, 872, 703, 58, 872,
	60, 0, 72, 74, 742, 743, 744, 745, 895, 897,
	898, 899, 900, 901, 902, 903, 904, 905, 906, 907,
	908, 909, 0, 0, 0, 257, 94, 862, 96, 97,
	99, 100, 0, 0, 0, 0, 0, 0, 111, 136,
	137, 63, 0, 0, 160, 0, 0, 0, 0, 149,
	0, 150, 0, 152, 0, 246, 259, 260, 247, 0,
	255, 45, 393, 0, 872, 738, 268, 872, -2, 0,
	298, 339, 340, 0, 0, 0, 325, 326, 0, 0,
	0, 294, 295, 0, 313, 0, 0, 355, 695, 699,
	700, 477, 0, 0, 0, 0, 0, 0, 556, 557,
	558, 0, 560, 561, 562, 867, 0, 566, 567, 886,
	707, 720, 721, 722, 723, 0, 0, 0, 728, 729,
	730, 679, 605, 576, -2, -2, 718, 416, 417, 418,
	419, -2, 897, 580, 582, 584, 585, 586, 587, 0,
	868, 882, 883, 889, 893, 894, 872, 879, 873, 863,
	870, 878, 772, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, 741, 440, 441, 446, 447, 449, 355,
	353, 390, 391, 0, 708, 686, 680, 681, 0, 0,
	0, 692, 690, 691, 22, 241, 24, 0, 241, 241,
	0, 0, 0, 0, 0, 0, 399, 0, 271, 0,
	0, 396, 0, 0, 56, 0, 43, 44, 0, 0,
	0, 322, 0, 0, 77, 0, 768, 705, 710, 713,
	83, 0, 0, 0, 0, 0, 103, 123, 124, 125,
	104, 106, 113, 115, 116, 117, 126, 127, 128, 129,
	213, 0, 215, 139, 140, 731, 0, 105, 107, 109,
	110, 130, 131, 0, 133, 134, 135, 460, 0, 64,
	746, 747, 748, 749, 750, 910, 911, 912, 913, 914,
	915, 916, 917, 918, 919, 920, 921, 922, 923, 924,
	925, 926, 927, 928, 929, 930, 931, 932, 933, 934,
	935, 936, 937, 938, 939, 940, 941, 942, 943, 944,
	945, 946, 947, 948, 949, 950, 951, 952, 953, 954,
	955, 956, 957, 958, 959, 960, 961, 962, 963, 964,
	965, 966, 967, 968, 969, 970, 971, 972, 973, 974,
	975, 976, 977, 978, 979, 980, 981, 982, 983, 984,
	985, 986, 987, 143, 145, 0, 157, 146, 147, 148,
	155, 151, 154, 0, 0, 254, 216, 0, 164, 0,
	0, 872, 737, 265, 0, 0, 301, 337, 338, 341,
	344, 345, 342, 477, 308, 309, 310, 333, 334, 230,
	315, 0, 0, 714, 399, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 689, 0, 0, 698, 481, 482,
	483, 504, 505, 0, -2, 637, 0, 563, 564, 565,
	0, 0, -2, 0, 725, 474, 0, 0, 678, 607,
	0, 0, 0, 0, 0, 0, 0, 658, 664, 0,
	0, 0, 0, 0, 0, 0, 0, 430, 443, 454,
	451, 450, 432, 0, 431, 429, 0, 433, 0, 0,
	399, 0, 687, 0, 684, 685, 0, 694, 0, 0,
	0, 0, 240, 26, 872, 0, 36, 0, 0, 186,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 709, 283, 0, 278, 273, 0, 0,
	0, 283, 355, 285, 287, 288, 0, 0, 397, 55,
	704, 45, 61, 59, 67, 73, 0, 0, 78, 79,
	711, 712, 0, 0, 101, 102, 264, 0, 120, 0,
	122, 0, 214, 733, 732, 474, 65, 159, 91, 261,
	262, 394, 0, 163, 165, 167, 168, 169, 738, 0,
	0, 0, 0, 0, 0, 343, 346, 347, 0, 336,
	228, 229, 322, 0, 716, 349, 696, 354, 356, 364,
	380, 367, 0, 478, 405, 406, 407, 408, 409, 474,
	412, 413, 414, 415, 423, 424, 425, 426, 427, 428,
	437, 0, 422, 422, 422, 434, 435, 438, 439, 444,
	445, 456, 457, 458, 455, 455, 455, 452, 453, 479,
	0, 484, 485, 486, 487, 488, 489, 490, 491, 492,
	-2, -2, -2, 496, 497, 498, -2, -2, -2, 502,
	503, -2, 0, 0, 689, 0, 0, 510, 0, 513,
	515, 517, 0, 0, 0, 0, 688, 527, 670, 0,
	697, 512, 0, 0, 559, 0, 0, 0, 643, 637,
	644, 0, -2, 568, 332, 0, 0, 0, 0, 726,
	461, 462, 463, 464, 465, 466, 475, 0, 677, 673,
	0, 615, 0, 0, 0, 581, 583, 0, 0, 0,
	647, 648, 649, 650, 651, 652, 653, 0, 0, 0,
	0, 529, 0, 0, 0, 0, 886, 0, 637, 663,
	0, 0, 0, 0, 0, 637, 0, 669, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 349,
	392, 682, 0, 693, 25, 232, 0, 0, 0, 28,
	872, 172, 0, 0, 0, 0, 0, 243, 37, 872,
	45, 872, 45, 38, 23, 241, 231, 234, 0, 53,
	0, 398, 283, 0, 0, 701, 275, 272, 270, 399,
	0, 0, 0, 57, 75, 706, 76, 95, 118, 119,
	121, 114, 132, 0, 161, 0, 0, 738, 0, 0,
	0, 267, 268, 335, 0, 317, 318, 319, 320, 715,
	351, 0, 0, 0, 0, 0, 0, 386, 386, 386,
	384, 380, 0, 366, 379, 0, 378, -2, 367, 0,
	400, 402, 410, 0, 0, -2, 0, 0, 0, 528,
	-2, 511, 514, 516, 518, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 638, 0, 641, 642, 0, -2,
	0, 0, 331, 332, 332, 332, 574, 0, 0, 0,
	0, 0, 0, 0, 674, 0, 0, 575, 0, 0,
	0, 0, 0, 589, 0, 590, 0, 0, 591, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	531, 532, 533, 0, 0, 592, 661, 662, 0, 0,
	0, 0, 0, 0, 597, 0, 668, 0, 0, 0,
	601, 602, 603, 0, 420, 0, 436, 459, 448, 351,
	0, 0, 0, 0, 0, 170, 185, 0, 0, 0,
	0, 30, 0, 0, 0, 0, 34, 0, 40, 0,
	0, 0, 0, 282, 269, 281, 0, 0, 283, 286,
	289, 0, 92, 166, 0, 0, 164, 0, 0, 266,
	316, 609, 0, 0, 357, 0, 0, 0, 0, 0,
	381, 385, 382, 383, 365, 362, 0, 376, 0, 369,
	0, 0, 0, 480, -2, 0, 0, 0, 0, -2,
	0, 639, 0, 0, 671, 0, 632, 0, -2, 638,
	645, 569, 0, 0, 0, 0, 467, 468, 469, 470,
	471, 472, 473, 0, 727, 672, 676, 0, 613, 614,
	618, 0, 0, 579, 0, 646, 655, 656, 530, 534,
	535, 536, 537, 538, 539, 540, 541, 542, -2, -2,
	-2, 546, 547, 548, -2, -2, -2, 0, 0, 0,
	657, 0, 0, 635, 659, 660, 665, 666, 0, 594,
	595, 596, 667, 0, 0, 0, 442, 0, 609, 683,
	236, 238, 27, 0, 171, 0, 174, 0, 0, 177,
	178, 0, 0, 0, 0, 187, 194, 0, 0, 0,
	42, 0, 0, 242, 0, 45, 45, 233, 0, 0,
	235, 0, 0, 0, 274, 702, 284, 0, 0, 221,
	227, 227, 0, 577, 578, 0, 0, 0, 0, 0,
	304, 0, 350, 348, 370, 0, 372, 0, 0, 0,
	374, 0, 360, 0, 359, 0, 0, 368, 403, 0,
	0, 411, 0, 0, -2, 0, 521, 0, -2, -2,
	631, 638, 724, 332, 570, 572, 573, 476, 675, 620,
	617, 0, 604, 588, 654, 0, 0, 0, 0, 638,
	634, 593, 0, 599, 600, 421, 305, 29, 0, 175,
	176, 179, 0, 181, 196, 188, 0, 191, 192, 189,
	0, 31, 32, 41, 47, 33, 39, 0, 0, 0,
	0, 0, 290, 291, 0, 194, 0, 230, 719, 0,
	230, 0, 0, 0, 162, 194, 0, 608, 610, 0,
	371, 0, 388, 373, 0, 363, 0, 0, 377, 404,
	401, -2, -2, 522, 640, 633, 0, 332, 0, 606,
	-2, 0, 0, 0, 636, 0, 173, 0, 200, 0,
	0, 0, 49, 0, 237, 239, 0, 277, 399, 280,
	183, 222, 223, 226, 224, 227, 332, 194, 217, 0,
	0, 0, 0, 361, 358, 375, 571, 623, 0, -2,
	0, 554, 598, 180, 205, 0, 0, 0, 196, 35,
	0, 46, 0, 279, 230, 0, 184, 0, 611, 612,
	387, 0, 0, 0, 619, 555, 182, 201, 202, 0,
	197, 198, 199, 195, 193, 200, 48, 399, 225, 569,
	194, 616, 621, 624, -2, 840, 765, 0, 622, 203,
	0, 204, 0, 0, 0, 205, 276, 218, 0, 626,
	627, 628, 629, 630, 206, 0, 209, 210, 0, 207,
	190, 0, 208, 211, 212, 625,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 265, 3, 271, 266, 3,
	276, 277, 269, 267, 280, 268, 278, 270, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 284, 279,
	259, 261, 260, 3, 281, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 274, 3, 275, 264, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 282, 263, 283, 273,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 262, 57602, 272, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:661
		{
			sqllex.(*scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:667
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:673
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 14:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:693
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 21:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:703
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 22:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:709
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.qname(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 23:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:713
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.qname(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 24:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:719
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 25:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:723
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:730
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 27:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:735
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 28:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:740
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 29:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:745
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 30:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:750
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: sqlDollar[3].str, Default: sqlDollar[4].union.expr()}
		}
	case 31:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:755
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: sqlDollar[3].str}
		}
	case 32:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:759
		{
			unimplemented()
		}
	case 33:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:762
		{
			sqlVAL.union.val = &AlterTableDropColumn{columnKeyword: sqlDollar[2].union.bool(), IfExists: true, Column: sqlDollar[5].str}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:767
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        sqlDollar[3].str,
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:777
		{
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:780
		{
			sqlVAL.union.val = &AlterTableAddConstraint{ConstraintDef: sqlDollar[2].union.constraintDef()}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:784
		{
			unimplemented()
		}
	case 38:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:786
		{
			unimplemented()
		}
	case 39:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:789
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   sqlDollar[5].str,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:798
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   sqlDollar[3].str,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 41:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:808
		{
			if containsSubquery(sqlDollar[3].union.expr()) {
				sqllex.Error("default expression contains a subquery")
				return 1
			}
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:816
		{
			sqlVAL.union.val = nil
		}
	case 43:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:822
		{
			sqlVAL.union.val = DropCascade
		}
	case 44:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:826
		{
			sqlVAL.union.val = DropRestrict
		}
	case 45:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:830
		{
			sqlVAL.union.val = DropDefault
		}
	case 46:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:835
		{
			unimplemented()
		}
	case 47:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:836
		{
		}
	case 48:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:839
		{
			unimplemented()
		}
	case 49:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:840
		{
		}
	case 53:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:851
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retExprs()}
		}
	case 54:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:858
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 55:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:862
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 56:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:866
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 57:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:874
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 58:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:882
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.qnames(), IfExists: false}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:886
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.qnames(), IfExists: true}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:892
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:896
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 62:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:902
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:906
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:912
		{
			sqlVAL.union.val = Indirection{NameIndirection(sqlDollar[2].str)}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:916
		{
			sqlVAL.union.val = append(sqlDollar[1].union.indirect(), NameIndirection(sqlDollar[3].str))
		}
	case 66:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:923
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:927
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:933
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 72:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:942
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 73:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:946
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 75:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:956
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: NameList(sqlDollar[6].union.strs()), Targets: sqlDollar[4].union.targetList()}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:963
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: NameList(sqlDollar[6].union.strs()), Targets: sqlDollar[4].union.targetList()}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:970
		{
			sqlVAL.union.val = TargetList{Tables: QualifiedNames(sqlDollar[1].union.qnames())}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:974
		{
			sqlVAL.union.val = TargetList{Tables: QualifiedNames(sqlDollar[2].union.qnames())}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:978
		{
			sqlVAL.union.val = TargetList{Databases: NameList(sqlDollar[2].union.strs())}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:985
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:988
		{
		}
	case 82:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:992
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:996
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 84:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1003
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 85:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1007
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 86:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1011
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 87:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1015
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 88:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1019
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 89:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1023
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 90:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1027
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 91:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1035
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1039
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 93:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1047
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 94:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1051
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 95:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1055
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1059
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 97:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1065
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 99:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1072
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1076
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1080
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1084
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1091
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1097
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname(), Values: sqlDollar[3].union.exprs()}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1101
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname(), Values: sqlDollar[3].union.exprs()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1105
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname()}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1109
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname()}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1116
		{
			unimplemented()
		}
	case 110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1119
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1122
		{
			unimplemented()
		}
	case 113:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1129
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1133
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1141
		{
			sqlVAL.union.val = ValArg{Name: sqlDollar[1].str}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1147
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1151
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1155
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1159
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1163
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1169
		{
			sqlVAL.union.val = Low
		}
	case 124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1173
		{
			sqlVAL.union.val = Normal
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1177
		{
			sqlVAL.union.val = High
		}
	case 126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1183
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1187
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1191
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1206
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1210
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1214
		{
			expr := &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
			typedExpr, err := TypeCheck(expr, nil, NoTypePreference)
			if err != nil {
				sqllex.Error("cannot type check interval type: " + err.Error())
				return 1
			}
			var ctx EvalContext
			d, err := typedExpr.Eval(ctx)
			if err != nil {
				sqllex.Error("cannot evaluate to an interval type: " + err.Error())
				return 1
			}
			if _, ok := d.(*DInterval); !ok {
				panic("not an interval type")
			}
			sqlVAL.union.val = d
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1234
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1238
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1243
		{
			unimplemented()
		}
	case 137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1244
		{
			unimplemented()
		}
	case 138:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1245
		{
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1249
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1253
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1259
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1263
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1267
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.qname()}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1271
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1275
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.strs()}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1279
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1283
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1287
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1291
		{
			sqlVAL.union.val = &ShowTables{Name: sqlDollar[3].union.qname()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1295
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1299
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1303
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1307
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 154:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1311
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.qname()}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1317
		{
			sqlVAL.union.val = sqlDollar[2].union.qname()
		}
	case 156:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1321
		{
			sqlVAL.union.val = (*QualifiedName)(nil)
		}
	case 157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1327
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 158:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1332
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1338
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 160:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1342
		{
			sqlVAL.union.val = []string(nil)
		}
	case 161:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1349
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.qname(), IfNotExists: false, Defs: sqlDollar[5].union.tblDefs()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1353
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.qname(), IfNotExists: true, Defs: sqlDollar[8].union.tblDefs()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1360
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1366
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1370
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1376
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1381
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1387
		{
			sqlVAL.union.val = newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1393
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 172:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1397
		{
			sqlVAL.union.val = []ColumnQualification(nil)
		}
	case 173:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1403
		{
			sqlVAL.union.val = sqlDollar[3].union.colQual()
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1407
		{
			unimplemented()
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1423
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1427
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1431
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1435
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1439
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1443
		{
			if containsSubquery(sqlDollar[2].union.expr()) {
				sqllex.Error("default expression contains a subquery")
				return 1
			}
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1450
		{
			unimplemented()
		}
	case 183:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1454
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.idxElems(),
				Storing: sqlDollar[6].union.strs(),
			}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1462
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:    Name(sqlDollar[3].str),
					Columns: sqlDollar[5].union.idxElems(),
					Storing: sqlDollar[7].union.strs(),
				},
			}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1477
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1482
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 187:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1487
		{
			unimplemented()
		}
	case 188:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1489
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[3].union.strs()),
					Storing: sqlDollar[5].union.strs(),
				},
			}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1498
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[4].union.strs()),
				},
				PrimaryKey: true,
			}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1507
		{
			unimplemented()
		}
	case 193:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1524
		{
			sqlVAL.union.val = sqlDollar[3].union.strs()
		}
	case 194:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1528
		{
			sqlVAL.union.val = []string(nil)
		}
	case 195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1534
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 196:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1538
		{
			sqlVAL.union.val = []string(nil)
		}
	case 197:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1543
		{
			unimplemented()
		}
	case 198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1544
		{
			unimplemented()
		}
	case 199:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1545
		{
			unimplemented()
		}
	case 200:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1546
		{
		}
	case 201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1553
		{
			unimplemented()
		}
	case 202:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1554
		{
			unimplemented()
		}
	case 203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1555
		{
			unimplemented()
		}
	case 204:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1556
		{
			unimplemented()
		}
	case 205:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1557
		{
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1560
		{
			unimplemented()
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1563
		{
			unimplemented()
		}
	case 208:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1566
		{
			unimplemented()
		}
	case 209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1567
		{
			unimplemented()
		}
	case 210:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1568
		{
			unimplemented()
		}
	case 211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1569
		{
			unimplemented()
		}
	case 212:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1570
		{
			unimplemented()
		}
	case 213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1574
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1578
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1582
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 216:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1589
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.qnames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1596
		{
			sqlVAL.union.val = &CreateIndex{
				Name:    Name(sqlDollar[4].str),
				Table:   sqlDollar[6].union.qname(),
				Unique:  sqlDollar[2].union.bool(),
				Columns: sqlDollar[8].union.idxElems(),
				Storing: sqlDollar[10].union.strs(),
			}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql.y:1606
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.qname(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.strs(),
			}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1619
		{
			sqlVAL.union.val = true
		}
	case 220:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1623
		{
			sqlVAL.union.val = false
		}
	case 221:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1629
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1633
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1642
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1645
		{
			unimplemented()
		}
	case 225:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1646
		{
			unimplemented()
		}
	case 226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1649
		{
			unimplemented()
		}
	case 227:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1650
		{
		}
	case 228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1654
		{
			sqlVAL.union.val = Ascending
		}
	case 229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1658
		{
			sqlVAL.union.val = Descending
		}
	case 230:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1662
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 231:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1669
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1673
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.qname(), NewName: sqlDollar[6].union.qname(), IfExists: false}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1677
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.qname(), NewName: sqlDollar[8].union.qname(), IfExists: true}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1681
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1685
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1689
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.qname(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1693
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.qname(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1697
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 239:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1701
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 240:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1707
		{
			sqlVAL.union.val = true
		}
	case 241:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1711
		{
			sqlVAL.union.val = false
		}
	case 242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1716
		{
		}
	case 243:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1717
		{
		}
	case 244:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1721
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1727
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1734
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1738
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1742
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1746
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1750
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1759
		{
		}
	case 252:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1760
		{
		}
	case 253:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1764
		{
			sqlVAL.str = ""
		}
	case 254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1768
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1772
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 256:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1776
		{
			sqlVAL.str = ""
		}
	case 257:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1782
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 258:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1786
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1792
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 260:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1796
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 261:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1800
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1804
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1808
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1814
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 265:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1820
		{
			sqlVAL.union.val = &CreateDatabase{Name: Name(sqlDollar[3].str), Encoding: sqlDollar[4].union.strVal()}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1824
		{
			sqlVAL.union.val = &CreateDatabase{IfNotExists: true, Name: Name(sqlDollar[6].str), Encoding: sqlDollar[7].union.strVal()}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1830
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1833
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 269:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1839
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retExprs()
		}
	case 270:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1846
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retExprs()
		}
	case 271:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1859
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname()}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1863
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1869
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1873
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.qnames(), Rows: sqlDollar[4].union.slct()}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1877
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1883
		{
			sqlVAL.union.val = &OnConflict{Columns: NameList(sqlDollar[3].union.strs()), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1887
		{
			sqlVAL.union.val = &OnConflict{Columns: NameList(sqlDollar[3].union.strs()), DoNothing: true}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1891
		{
			sqlVAL.union.val = (*OnConflict)(nil)
		}
	case 279:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1897
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 280:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1901
		{
			unimplemented()
		}
	case 281:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1903
		{
			sqlVAL.union.val = nil
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1909
		{
			sqlVAL.union.val = sqlDollar[2].union.selExprs()
		}
	case 283:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1913
		{
			sqlVAL.union.val = SelectExprs(nil)
		}
	case 284:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1920
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retExprs()}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1926
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1930
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 289:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1940
		{
			sqlVAL.union.val = &UpdateExpr{Names: QualifiedNames{sqlDollar[1].union.qname()}, Expr: sqlDollar[3].union.expr()}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1952
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.qnames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1956
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.qnames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2000
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2006
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2010
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2025
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2029
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2033
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2037
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2041
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2045
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2079
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.tblExprs(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2091
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.tblExprs(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2103
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        TableExprs{&AliasedTableExpr{Expr: sqlDollar[2].union.qname()}},
				tableSelect: true,
			}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2111
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2120
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2129
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2147
		{
			unimplemented()
		}
	case 312:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2148
		{
			unimplemented()
		}
	case 313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2149
		{
			unimplemented()
		}
	case 314:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2152
		{
			unimplemented()
		}
	case 315:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2153
		{
			unimplemented()
		}
	case 316:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2156
		{
			unimplemented()
		}
	case 317:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2160
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 321:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2168
		{
			unimplemented()
		}
	case 322:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2169
		{
		}
	case 323:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2172
		{
		}
	case 324:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2173
		{
		}
	case 325:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2177
		{
			sqlVAL.union.val = true
		}
	case 326:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2181
		{
			sqlVAL.union.val = false
		}
	case 327:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2185
		{
			sqlVAL.union.val = false
		}
	case 328:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2191
		{
			sqlVAL.union.val = true
		}
	case 329:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2196
		{
		}
	case 330:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2197
		{
		}
	case 331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2201
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 332:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2205
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 333:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2211
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 334:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2217
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2221
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 336:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2227
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2235
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2244
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2255
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2268
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2275
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2282
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 346:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2296
		{
		}
	case 347:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2297
		{
		}
	case 348:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2323
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 349:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2327
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2333
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 351:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2337
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 352:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2343
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2347
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 354:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2359
		{
			sqlVAL.union.val = sqlDollar[2].union.tblExprs()
		}
	case 355:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2363
		{
			sqlVAL.union.val = TableExprs(nil)
		}
	case 356:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2369
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2373
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 358:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2379
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 359:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2384
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2390
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 361:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2395
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			index := a.Index
			if index == "" {
				index = b.Index
			} else if b.Index != "" {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			noIndexJoin := a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = &IndexHints{Index: index, NoIndexJoin: noIndexJoin}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2415
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 363:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2419
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 364:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2423
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2430
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), Hints: sqlDollar[2].union.indexHints(), As: sqlDollar[3].union.aliasClause()}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2434
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, As: sqlDollar[2].union.aliasClause()}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2438
		{
			unimplemented()
		}
	case 369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2456
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 370:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2460
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2464
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2468
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2472
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astNaturalJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr()}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2476
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astNaturalJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2482
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: NameList(sqlDollar[4].union.strs())}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2486
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2490
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: NameList(sqlDollar[3].union.strs())}
		}
	case 378:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2494
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2501
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2507
		{
			sqlVAL.str = astFullJoin
		}
	case 382:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2511
		{
			sqlVAL.str = astLeftJoin
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2515
		{
			sqlVAL.str = astRightJoin
		}
	case 384:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2519
		{
			sqlVAL.str = astInnerJoin
		}
	case 385:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2525
		{
		}
	case 386:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2526
		{
		}
	case 387:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2537
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: NameList(sqlDollar[3].union.strs())}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2541
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2547
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 390:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2551
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2555
		{
			sqlVAL.union.val = sqlDollar[2].union.qname()
		}
	case 392:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2559
		{
			sqlVAL.union.val = sqlDollar[3].union.qname()
		}
	case 393:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2565
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2569
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 395:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2582
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname()}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2586
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2590
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2596
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 399:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2600
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 400:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2612
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 401:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2616
		{
			unimplemented()
		}
	case 402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2617
		{
			unimplemented()
		}
	case 403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2620
		{
			unimplemented()
		}
	case 404:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2621
		{
			unimplemented()
		}
	case 405:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2622
		{
		}
	case 411:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2630
		{
			unimplemented()
		}
	case 412:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2632
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 413:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2636
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 414:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2640
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 415:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2644
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 420:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2665
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2674
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2688
		{
			sqlVAL.union.val = nil
		}
	case 423:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2695
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2699
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 425:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2703
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2707
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 427:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2711
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 428:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2715
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2719
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newFloatColType(int(prec))
		}
	case 430:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2728
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2732
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2741
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2750
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2759
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2763
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 436:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2769
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 437:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2773
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2791
		{
			n, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newIntBitType(int(n))
		}
	case 443:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2802
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 448:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2818
		{
			n, err := sqlDollar[3].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2834
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 450:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2840
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 451:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2844
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 452:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2848
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 453:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2852
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 454:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2857
		{
		}
	case 455:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2858
		{
		}
	case 456:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2863
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 457:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2867
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 458:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2871
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 459:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2875
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2880
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2885
		{
			unimplemented()
		}
	case 462:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2886
		{
			unimplemented()
		}
	case 463:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2887
		{
			unimplemented()
		}
	case 464:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2888
		{
			unimplemented()
		}
	case 465:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2889
		{
			unimplemented()
		}
	case 466:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2890
		{
			unimplemented()
		}
	case 467:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2891
		{
			unimplemented()
		}
	case 468:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2892
		{
			unimplemented()
		}
	case 469:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2893
		{
			unimplemented()
		}
	case 470:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2894
		{
			unimplemented()
		}
	case 471:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2895
		{
			unimplemented()
		}
	case 472:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2896
		{
			unimplemented()
		}
	case 473:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2897
		{
			unimplemented()
		}
	case 474:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2898
		{
		}
	case 475:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2901
		{
			unimplemented()
		}
	case 476:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2902
		{
			unimplemented()
		}
	case 478:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2926
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2929
		{
			unimplemented()
		}
	case 480:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2930
		{
			unimplemented()
		}
	case 481:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2939
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2943
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2947
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2951
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2955
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2959
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2963
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2967
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2971
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2975
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2979
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2983
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2987
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2991
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2995
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2999
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3003
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3007
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3011
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3015
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3019
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3023
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3027
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3031
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3035
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3039
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3043
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3047
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3051
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3055
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3059
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3062
		{
			unimplemented()
		}
	case 513:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3064
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3068
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3072
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3076
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3080
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3084
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3088
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3092
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3096
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3100
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3104
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3108
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3112
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3116
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3120
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3124
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3141
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3145
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3149
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3153
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3157
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3161
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3165
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3169
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3173
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3177
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3181
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3185
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3189
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3193
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3197
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3201
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3205
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3209
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3213
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3217
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3221
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3225
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3229
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3233
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3237
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3241
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3253
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 558:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3258
		{
			sqlVAL.union.val = ValArg{Name: sqlDollar[1].str}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3262
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3268
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3272
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3276
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3282
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 566:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3286
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 567:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3290
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3298
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname()}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3302
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3305
		{
			unimplemented()
		}
	case 571:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3306
		{
			unimplemented()
		}
	case 572:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3308
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Type: All, Exprs: sqlDollar[4].union.exprs()}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3312
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Type: Distinct, Exprs: sqlDollar[4].union.exprs()}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3316
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Exprs: Exprs{StarExpr()}}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3329
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 576:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3333
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 577:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3342
		{
			unimplemented()
		}
	case 578:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3343
		{
			unimplemented()
		}
	case 579:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3347
		{
			unimplemented()
		}
	case 580:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3349
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3353
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3357
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3361
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3364
		{
			unimplemented()
		}
	case 585:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3365
		{
			unimplemented()
		}
	case 586:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3366
		{
			unimplemented()
		}
	case 587:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3367
		{
			unimplemented()
		}
	case 588:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3369
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3373
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3377
		{
			sqlVAL.union.val = &OverlayExpr{FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3381
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "STRPOS"}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3385
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3388
		{
			unimplemented()
		}
	case 594:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3390
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3394
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "LTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3398
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "RTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3402
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3406
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3410
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3414
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3418
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3422
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3426
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3432
		{
			unimplemented()
		}
	case 605:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3433
		{
		}
	case 606:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3436
		{
			unimplemented()
		}
	case 607:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3437
		{
		}
	case 608:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3441
		{
			unimplemented()
		}
	case 609:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3442
		{
		}
	case 610:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3445
		{
			unimplemented()
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3446
		{
			unimplemented()
		}
	case 612:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3449
		{
			unimplemented()
		}
	case 613:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3452
		{
			unimplemented()
		}
	case 614:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3453
		{
			unimplemented()
		}
	case 615:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3454
		{
		}
	case 616:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3458
		{
			unimplemented()
		}
	case 617:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3469
		{
			unimplemented()
		}
	case 618:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3470
		{
		}
	case 619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3473
		{
			unimplemented()
		}
	case 620:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3474
		{
		}
	case 621:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3482
		{
			unimplemented()
		}
	case 622:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3483
		{
			unimplemented()
		}
	case 623:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3484
		{
		}
	case 624:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3487
		{
			unimplemented()
		}
	case 625:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3488
		{
			unimplemented()
		}
	case 626:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3494
		{
			unimplemented()
		}
	case 627:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3495
		{
			unimplemented()
		}
	case 628:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3496
		{
			unimplemented()
		}
	case 629:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3497
		{
			unimplemented()
		}
	case 630:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3498
		{
			unimplemented()
		}
	case 631:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3509
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3513
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3517
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3523
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3527
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3533
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3574
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3578
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 639:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3584
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3588
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3594
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3598
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3602
		{
			sqlVAL.union.val = &Array{nil}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3608
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3612
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3618
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3640
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3644
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3650
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 657:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3657
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3661
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 659:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3678
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3682
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3686
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3690
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3694
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 664:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3698
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 665:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3704
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 666:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3710
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 667:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3716
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 668:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3720
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 669:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3724
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 670:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3730
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3734
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3745
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3752
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3756
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 675:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3762
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3768
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 677:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3772
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 679:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3779
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 680:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3785
		{
			sqlVAL.union.val = sqlDollar[1].union.indirectElem()
		}
	case 681:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3789
		{
			sqlVAL.union.val = sqlDollar[1].union.indirectElem()
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3793
		{
			sqlVAL.union.val = &ArrayIndirection{Begin: sqlDollar[2].union.expr()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3797
		{
			sqlVAL.union.val = &ArrayIndirection{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3803
		{
			sqlVAL.union.val = NameIndirection(sqlDollar[2].str)
		}
	case 685:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3809
		{
			sqlVAL.union.val = qualifiedStar
		}
	case 686:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3815
		{
			sqlVAL.union.val = Indirection{sqlDollar[1].union.indirectElem()}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3819
		{
			sqlVAL.union.val = append(sqlDollar[1].union.indirect(), sqlDollar[2].union.indirectElem())
		}
	case 688:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3824
		{
		}
	case 689:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3825
		{
		}
	case 691:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3834
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3840
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3844
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 694:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3853
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 695:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3859
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3863
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 697:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3869
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3878
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3882
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3886
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 701:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3894
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3898
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 703:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3904
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3908
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 705:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3914
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3918
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 707:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3929
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3933
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3939
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.qname(), Index: Name(sqlDollar[3].str)}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3950
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3954
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: Indirection{sqlDollar[2].union.indirectElem()}}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3958
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: Indirection{sqlDollar[2].union.indirectElem()}}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3962
		{
			sqlVAL.union.val = &QualifiedName{Indirect: Indirection{unqualifiedStar}}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3968
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3972
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 716:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3978
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 717:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3981
		{
		}
	case 718:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3991
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3995
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4002
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 721:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4006
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 722:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4010
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4014
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4017
		{
			unimplemented()
		}
	case 725:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4019
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4023
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4027
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[5].str}, Type: sqlDollar[1].union.colType()}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4031
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 729:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4035
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 730:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4039
		{
			sqlVAL.union.val = DNull
		}
	case 732:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4046
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 733:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4050
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4072
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
