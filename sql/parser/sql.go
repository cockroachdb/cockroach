// Code generated by go yacc.
//line sql.y:21
package parser

import __yyfmt__ "fmt"

//line sql.y:21
import "github.com/cockroachdb/cockroach/sql/privilege"

func unimplemented() {
	panic("TODO(pmattis): unimplemented")
}

//line sql.y:29
type sqlSymType struct {
	yys            int
	id             int
	pos            int
	empty          struct{}
	ival           IntVal
	boolVal        bool
	str            string
	strs           []string
	qname          *QualifiedName
	qnames         QualifiedNames
	indirectElem   IndirectionElem
	indirect       Indirection
	stmt           Statement
	stmts          []Statement
	selectStmt     SelectStatement
	colDef         *ColumnTableDef
	constraintDef  ConstraintTableDef
	tblDef         TableDef
	tblDefs        []TableDef
	colQual        ColumnQualification
	colQuals       []ColumnQualification
	colType        ColumnType
	colTypes       []ColumnType
	expr           Expr
	exprs          Exprs
	selExpr        SelectExpr
	selExprs       SelectExprs
	tblExpr        TableExpr
	tblExprs       TableExprs
	joinCond       JoinCond
	when           *When
	whens          []*When
	updateExpr     *UpdateExpr
	updateExprs    []*UpdateExpr
	limit          *Limit
	targetList     TargetList
	targetListPtr  *TargetList
	privilegeType  privilege.Kind
	privilegeList  privilege.List
	orderBy        OrderBy
	orders         []*Order
	order          *Order
	groupBy        GroupBy
	dir            Direction
	alterTableCmd  AlterTableCmd
	alterTableCmds AlterTableCmds
	isoLevel       IsolationLevel
	idxElem        IndexElem
	idxElems       IndexElemList
}

const IDENT = 57346
const FCONST = 57347
const SCONST = 57348
const BCONST = 57349
const ICONST = 57350
const PARAM = 57351
const TYPECAST = 57352
const DOT_DOT = 57353
const LESS_EQUALS = 57354
const GREATER_EQUALS = 57355
const NOT_EQUALS = 57356
const ERROR = 57357
const ACTION = 57358
const ADD = 57359
const ALL = 57360
const ALTER = 57361
const ANALYSE = 57362
const ANALYZE = 57363
const AND = 57364
const ANY = 57365
const ARRAY = 57366
const AS = 57367
const ASC = 57368
const ASYMMETRIC = 57369
const AT = 57370
const BEGIN = 57371
const BETWEEN = 57372
const BIGINT = 57373
const BIT = 57374
const BLOB = 57375
const BOOL = 57376
const BOOLEAN = 57377
const BOTH = 57378
const BY = 57379
const BYTES = 57380
const CASCADE = 57381
const CASE = 57382
const CAST = 57383
const CHAR = 57384
const CHARACTER = 57385
const CHECK = 57386
const COALESCE = 57387
const COLLATE = 57388
const COLLATION = 57389
const COLUMN = 57390
const COLUMNS = 57391
const COMMIT = 57392
const COMMITTED = 57393
const CONCAT = 57394
const CONFLICT = 57395
const CONSTRAINT = 57396
const COVERING = 57397
const CREATE = 57398
const CROSS = 57399
const CUBE = 57400
const CURRENT = 57401
const CURRENT_CATALOG = 57402
const CURRENT_DATE = 57403
const CURRENT_ROLE = 57404
const CURRENT_TIME = 57405
const CURRENT_TIMESTAMP = 57406
const CURRENT_USER = 57407
const CYCLE = 57408
const DATA = 57409
const DATABASE = 57410
const DATABASES = 57411
const DATE = 57412
const DAY = 57413
const DEC = 57414
const DECIMAL = 57415
const DEFAULT = 57416
const DEFERRABLE = 57417
const DELETE = 57418
const DESC = 57419
const DISTINCT = 57420
const DO = 57421
const DOUBLE = 57422
const DROP = 57423
const ELSE = 57424
const END = 57425
const ESCAPE = 57426
const EXCEPT = 57427
const EXISTS = 57428
const EXPLAIN = 57429
const EXTRACT = 57430
const FALSE = 57431
const FETCH = 57432
const FILTER = 57433
const FIRST = 57434
const FLOAT = 57435
const FOLLOWING = 57436
const FOR = 57437
const FOREIGN = 57438
const FROM = 57439
const FULL = 57440
const GRANT = 57441
const GRANTS = 57442
const GREATEST = 57443
const GROUP = 57444
const GROUPING = 57445
const HAVING = 57446
const HOUR = 57447
const IF = 57448
const IFNULL = 57449
const IN = 57450
const INDEX = 57451
const INITIALLY = 57452
const INNER = 57453
const INSERT = 57454
const INT = 57455
const INT64 = 57456
const INTEGER = 57457
const INTERSECT = 57458
const INTERVAL = 57459
const INTO = 57460
const IS = 57461
const ISOLATION = 57462
const JOIN = 57463
const KEY = 57464
const LATERAL = 57465
const LEADING = 57466
const LEAST = 57467
const LEFT = 57468
const LEVEL = 57469
const LIKE = 57470
const LIMIT = 57471
const LOCAL = 57472
const LOCALTIME = 57473
const LOCALTIMESTAMP = 57474
const LSHIFT = 57475
const MATCH = 57476
const MINUTE = 57477
const MONTH = 57478
const NAME = 57479
const NAMES = 57480
const NATURAL = 57481
const NEXT = 57482
const NO = 57483
const NOT = 57484
const NOTHING = 57485
const NULL = 57486
const NULLIF = 57487
const NULLS = 57488
const NUMERIC = 57489
const OF = 57490
const OFF = 57491
const OFFSET = 57492
const ON = 57493
const ONLY = 57494
const OR = 57495
const ORDER = 57496
const ORDINALITY = 57497
const OUT = 57498
const OUTER = 57499
const OVER = 57500
const OVERLAPS = 57501
const OVERLAY = 57502
const PARTIAL = 57503
const PARTITION = 57504
const PLACING = 57505
const POSITION = 57506
const PRECEDING = 57507
const PRECISION = 57508
const PRIMARY = 57509
const RANGE = 57510
const READ = 57511
const REAL = 57512
const RECURSIVE = 57513
const REF = 57514
const REFERENCES = 57515
const RENAME = 57516
const REPEATABLE = 57517
const RESTRICT = 57518
const RETURNING = 57519
const REVOKE = 57520
const RIGHT = 57521
const ROLLBACK = 57522
const ROLLUP = 57523
const ROW = 57524
const ROWS = 57525
const RSHIFT = 57526
const SEARCH = 57527
const SECOND = 57528
const SELECT = 57529
const SERIALIZABLE = 57530
const SESSION = 57531
const SESSION_USER = 57532
const SET = 57533
const SHOW = 57534
const SIMILAR = 57535
const SIMPLE = 57536
const SMALLINT = 57537
const SNAPSHOT = 57538
const SOME = 57539
const SQL = 57540
const STRICT = 57541
const STRING = 57542
const STORING = 57543
const SUBSTRING = 57544
const SYMMETRIC = 57545
const TABLE = 57546
const TABLES = 57547
const TEXT = 57548
const THEN = 57549
const TIME = 57550
const TIMESTAMP = 57551
const TO = 57552
const TRAILING = 57553
const TRANSACTION = 57554
const TREAT = 57555
const TRIM = 57556
const TRUE = 57557
const TRUNCATE = 57558
const TYPE = 57559
const UNBOUNDED = 57560
const UNCOMMITTED = 57561
const UNION = 57562
const UNIQUE = 57563
const UNKNOWN = 57564
const UPDATE = 57565
const USER = 57566
const USING = 57567
const VALID = 57568
const VALIDATE = 57569
const VALUE = 57570
const VALUES = 57571
const VARCHAR = 57572
const VARIADIC = 57573
const VARYING = 57574
const WHEN = 57575
const WHERE = 57576
const WINDOW = 57577
const WITH = 57578
const WITHIN = 57579
const WITHOUT = 57580
const YEAR = 57581
const ZONE = 57582
const NOT_LA = 57583
const WITH_LA = 57584
const POSTFIXOP = 57585
const UMINUS = 57586

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"FCONST",
	"SCONST",
	"BCONST",
	"ICONST",
	"PARAM",
	"TYPECAST",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXPLAIN",
	"EXTRACT",
	"FALSE",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FOLLOWING",
	"FOR",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HOUR",
	"IF",
	"IFNULL",
	"IN",
	"INDEX",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"LATERAL",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARTIAL",
	"PARTITION",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PRIMARY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"RENAME",
	"REPEATABLE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SNAPSHOT",
	"SOME",
	"SQL",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"TABLE",
	"TABLES",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"USER",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:3784

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 19,
	263, 19,
	-2, 290,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 29,
	1, 261,
	151, 261,
	261, 261,
	263, 261,
	-2, 271,
	-1, 39,
	1, 264,
	151, 264,
	261, 264,
	263, 264,
	-2, 270,
	-1, 48,
	1, 19,
	263, 19,
	-2, 290,
	-1, 84,
	1, 127,
	263, 127,
	-2, 739,
	-1, 236,
	129, 300,
	150, 300,
	-2, 267,
	-1, 239,
	129, 299,
	150, 299,
	-2, 265,
	-1, 341,
	129, 299,
	150, 299,
	-2, 268,
	-1, 398,
	260, 689,
	-2, 684,
	-1, 399,
	260, 690,
	-2, 685,
	-1, 405,
	6, 418,
	260, 418,
	-2, 812,
	-1, 427,
	6, 388,
	-2, 791,
	-1, 428,
	6, 415,
	260, 415,
	-2, 792,
	-1, 429,
	6, 396,
	-2, 793,
	-1, 430,
	6, 395,
	-2, 794,
	-1, 431,
	6, 415,
	260, 415,
	-2, 796,
	-1, 432,
	6, 415,
	260, 415,
	-2, 797,
	-1, 433,
	6, 416,
	-2, 799,
	-1, 434,
	6, 383,
	-2, 800,
	-1, 435,
	6, 383,
	-2, 801,
	-1, 436,
	6, 398,
	-2, 804,
	-1, 437,
	6, 384,
	-2, 809,
	-1, 438,
	6, 385,
	-2, 810,
	-1, 439,
	6, 386,
	-2, 811,
	-1, 440,
	6, 383,
	-2, 815,
	-1, 441,
	6, 389,
	-2, 820,
	-1, 442,
	6, 387,
	-2, 822,
	-1, 443,
	6, 417,
	-2, 826,
	-1, 444,
	6, 413,
	260, 413,
	-2, 830,
	-1, 685,
	85, 271,
	116, 271,
	129, 271,
	150, 271,
	154, 271,
	220, 271,
	-2, 520,
	-1, 693,
	260, 669,
	-2, 663,
	-1, 878,
	12, 0,
	13, 0,
	14, 0,
	243, 0,
	244, 0,
	245, 0,
	-2, 451,
	-1, 879,
	12, 0,
	13, 0,
	14, 0,
	243, 0,
	244, 0,
	245, 0,
	-2, 452,
	-1, 880,
	12, 0,
	13, 0,
	14, 0,
	243, 0,
	244, 0,
	245, 0,
	-2, 453,
	-1, 884,
	12, 0,
	13, 0,
	14, 0,
	243, 0,
	244, 0,
	245, 0,
	-2, 457,
	-1, 885,
	12, 0,
	13, 0,
	14, 0,
	243, 0,
	244, 0,
	245, 0,
	-2, 458,
	-1, 886,
	12, 0,
	13, 0,
	14, 0,
	243, 0,
	244, 0,
	245, 0,
	-2, 459,
	-1, 889,
	30, 0,
	108, 0,
	128, 0,
	193, 0,
	241, 0,
	-2, 464,
	-1, 920,
	159, 590,
	-2, 593,
	-1, 1066,
	85, 271,
	116, 271,
	129, 271,
	150, 271,
	154, 271,
	220, 271,
	-2, 341,
	-1, 1074,
	30, 0,
	108, 0,
	128, 0,
	193, 0,
	241, 0,
	-2, 465,
	-1, 1079,
	30, 0,
	108, 0,
	128, 0,
	193, 0,
	241, 0,
	-2, 466,
	-1, 1098,
	159, 589,
	-2, 592,
	-1, 1235,
	30, 0,
	108, 0,
	128, 0,
	193, 0,
	241, 0,
	-2, 467,
	-1, 1240,
	119, 0,
	-2, 477,
	-1, 1249,
	159, 591,
	-2, 594,
	-1, 1289,
	12, 0,
	13, 0,
	14, 0,
	243, 0,
	244, 0,
	245, 0,
	-2, 501,
	-1, 1290,
	12, 0,
	13, 0,
	14, 0,
	243, 0,
	244, 0,
	245, 0,
	-2, 502,
	-1, 1291,
	12, 0,
	13, 0,
	14, 0,
	243, 0,
	244, 0,
	245, 0,
	-2, 503,
	-1, 1295,
	12, 0,
	13, 0,
	14, 0,
	243, 0,
	244, 0,
	245, 0,
	-2, 507,
	-1, 1296,
	12, 0,
	13, 0,
	14, 0,
	243, 0,
	244, 0,
	245, 0,
	-2, 508,
	-1, 1297,
	12, 0,
	13, 0,
	14, 0,
	243, 0,
	244, 0,
	245, 0,
	-2, 509,
	-1, 1389,
	119, 0,
	-2, 478,
	-1, 1393,
	30, 0,
	108, 0,
	128, 0,
	193, 0,
	241, 0,
	-2, 481,
	-1, 1394,
	30, 0,
	108, 0,
	128, 0,
	193, 0,
	241, 0,
	-2, 483,
	-1, 1473,
	30, 0,
	108, 0,
	128, 0,
	193, 0,
	241, 0,
	-2, 482,
	-1, 1474,
	30, 0,
	108, 0,
	128, 0,
	193, 0,
	241, 0,
	-2, 484,
	-1, 1482,
	119, 0,
	-2, 510,
	-1, 1519,
	119, 0,
	-2, 511,
	-1, 1564,
	30, 0,
	128, 0,
	193, 0,
	241, 0,
	-2, 790,
}

const sqlNprod = 922
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 18079

var sqlAct = [...]int{

	917, 1563, 1546, 1430, 1584, 1524, 1562, 1547, 771, 1490,
	1548, 397, 819, 240, 267, 396, 1357, 1463, 1452, 1269,
	389, 1358, 1327, 85, 1241, 643, 1375, 457, 764, 1062,
	1155, 803, 1156, 688, 806, 1369, 690, 1215, 245, 28,
	1224, 1242, 1101, 933, 623, 1054, 1050, 805, 741, 13,
	750, 972, 905, 462, 975, 772, 937, 902, 927, 1065,
	719, 830, 639, 18, 28, 501, 10, 483, 645, 247,
	38, 465, 362, 800, 89, 60, 467, 371, 6, 288,
	512, 286, 528, 239, 58, 250, 828, 28, 284, 62,
	503, 344, 61, 808, 345, 38, 723, 343, 82, 499,
	492, 277, 67, 39, 63, 40, 1454, 460, 399, 485,
	355, 458, 460, 493, 459, 930, 458, 244, 38, 459,
	485, 1560, 244, 765, 1451, 769, 1554, 827, 1553, 823,
	646, 823, 1545, 263, 292, 1392, 270, 1094, 646, 88,
	289, 278, 237, 1540, 236, 1521, 823, 445, 1392, 931,
	1512, 88, 88, 1023, 1515, 88, 1096, 823, 88, 88,
	88, 1097, 1095, 88, 88, 88, 88, 1094, 291, 1509,
	281, 1500, 1451, 1475, 1451, 1470, 1392, 1302, 823, 932,
	929, 1460, 1450, 1248, 1451, 1451, 88, 88, 1435, 1434,
	1415, 823, 823, 1094, 1395, 1391, 391, 1094, 1392, 1337,
	1034, 1245, 823, 44, 1094, 1206, 1202, 293, 484, 484,
	1173, 1171, 1170, 1174, 1094, 1094, 1169, 739, 1098, 1094,
	46, 1094, 824, 738, 1052, 823, 737, 1100, 490, 1036,
	934, 491, 1094, 823, 484, 488, 648, 913, 44, 818,
	794, 647, 356, 309, 262, 47, 486, 48, 44, 527,
	342, 323, 42, 44, 650, 46, 336, 486, 43, 363,
	363, 447, 446, 648, 1561, 46, 1559, 1516, 1459, 463,
	46, 1420, 649, 1416, 1408, 1407, 41, 452, 663, 341,
	47, 650, 1402, 928, 1401, 1400, 1399, 42, 1386, 1317,
	47, 1354, 1312, 43, 1038, 47, 1311, 1023, 1310, 649,
	456, 1252, 42, 1230, 1072, 647, 1214, 1176, 43, 1175,
	1163, 768, 1384, 1154, 1127, 1124, 1122, 335, 460, 1111,
	404, 41, 458, 1105, 1035, 459, 59, 910, 987, 944,
	943, 696, 355, 354, 484, 1491, 1271, 1511, 1492, 88,
	1484, 88, 1466, 88, 1457, 620, 1449, 631, 633, 1427,
	1413, 237, 1380, 236, 640, 1365, 1239, 1229, 88, 664,
	1212, 1211, 278, 1209, 1188, 1187, 1153, 679, 680, 681,
	682, 683, 1119, 1118, 88, 1128, 686, 476, 1110, 1091,
	1087, 907, 724, 727, 88, 88, 449, 88, 1128, 1001,
	292, 292, 1000, 982, 942, 822, 699, 729, 531, 1128,
	1353, 717, 619, 716, 715, 911, 714, 713, 712, 523,
	665, 497, 496, 711, 710, 709, 516, 88, 693, 88,
	708, 707, 706, 612, 291, 291, 616, 615, 617, 705,
	687, 704, 530, 88, 703, 88, 88, 629, 88, 628,
	627, 694, 641, 692, 41, 1001, 621, 88, 268, 359,
	1472, 648, 237, 1471, 635, 237, 237, 636, 637, 361,
	1128, 736, 691, 293, 293, 88, 1232, 1231, 88, 650,
	453, 532, 1356, 659, 656, 657, 658, 651, 652, 653,
	654, 655, 1128, 1024, 732, 1073, 330, 649, 318, 701,
	348, 1370, 721, 722, 765, 248, 1272, 938, 1142, 648,
	1114, 372, 1141, 744, 651, 652, 653, 654, 655, 720,
	1020, 313, 781, 286, 1530, 522, 28, 650, 755, 757,
	730, 787, 1142, 1573, 1345, 1499, 226, 767, 448, 28,
	401, 1574, 725, 531, 531, 649, 1443, 728, 1442, 257,
	60, 733, 735, 1200, 1180, 1179, 1109, 1108, 264, 1143,
	1107, 264, 1106, 273, 62, 1075, 264, 61, 283, 760,
	38, 1128, 747, 1383, 88, 894, 292, 530, 530, 63,
	785, 784, 289, 1143, 664, 783, 317, 88, 782, 762,
	1030, 88, 761, 1142, 88, 697, 751, 868, 88, 231,
	88, 88, 52, 88, 1432, 1532, 88, 88, 88, 479,
	291, 780, 531, 88, 88, 1498, 532, 532, 786, 904,
	799, 904, 1137, 1134, 1135, 1136, 1129, 1130, 1131, 1132,
	1133, 743, 934, 1015, 1581, 665, 1190, 1199, 53, 1129,
	1130, 1131, 1132, 1133, 1143, 1542, 530, 474, 754, 293,
	1129, 1130, 1131, 1132, 1133, 473, 55, 1493, 363, 243,
	1543, 938, 869, 870, 871, 872, 873, 874, 875, 876,
	877, 878, 879, 880, 881, 882, 883, 884, 885, 886,
	887, 888, 889, 867, 825, 532, 1031, 958, 1573, 718,
	242, 521, 509, 520, 1142, 514, 468, 56, 469, 315,
	833, 658, 651, 652, 653, 654, 655, 1137, 1134, 1135,
	1136, 1129, 1130, 1131, 1132, 1133, 945, 802, 956, 753,
	966, 968, 973, 976, 977, 978, 732, 1480, 244, 451,
	832, 732, 684, 88, 316, 1131, 1132, 1133, 918, 88,
	88, 930, 264, 351, 352, 1143, 1191, 333, 463, 54,
	1433, 485, 653, 654, 655, 357, 914, 919, 1029, 922,
	470, 524, 531, 816, 817, 88, 1580, 365, 88, 986,
	908, 648, 909, 752, 967, 931, 1016, 454, 1117, 1261,
	979, 980, 981, 468, 948, 469, 50, 264, 478, 650,
	234, 996, 57, 1197, 241, 1077, 530, 903, 68, 1225,
	998, 990, 743, 1258, 526, 932, 929, 649, 742, 1134,
	1135, 1136, 1129, 1130, 1131, 1132, 1133, 525, 73, 468,
	283, 469, 283, 69, 1549, 790, 991, 51, 244, 640,
	934, 792, 1572, 1259, 892, 532, 1570, 1579, 283, 1368,
	1018, 70, 1011, 812, 793, 1039, 326, 470, 310, 1587,
	1022, 951, 791, 1012, 72, 839, 934, 308, 1026, 88,
	88, 88, 1550, 347, 1037, 88, 1182, 1033, 88, 1027,
	1032, 28, 1028, 1437, 88, 88, 88, 88, 88, 292,
	88, 88, 1045, 470, 934, 952, 995, 88, 486, 88,
	1436, 1043, 1019, 1298, 664, 88, 1047, 346, 1061, 1046,
	1025, 1074, 38, 1067, 88, 1079, 471, 88, 1071, 928,
	1344, 1048, 893, 291, 1425, 953, 950, 1343, 347, 813,
	858, 857, 49, 626, 1093, 1551, 232, 1341, 88, 71,
	88, 88, 890, 88, 1102, 722, 721, 1411, 515, 510,
	466, 622, 88, 235, 1257, 665, 1099, 88, 88, 1115,
	88, 1585, 293, 1120, 1594, 839, 1078, 1299, 1552, 725,
	1076, 728, 1525, 1300, 740, 74, 954, 731, 346, 1068,
	1426, 618, 1090, 498, 686, 1378, 1092, 1003, 1002, 838,
	973, 973, 973, 1220, 264, 1342, 1586, 763, 1219, 1103,
	1104, 775, 314, 471, 331, 1340, 779, 891, 242, 283,
	1178, 1588, 276, 1113, 338, 1216, 283, 1412, 1051, 1053,
	941, 1185, 651, 652, 653, 654, 655, 1483, 1410, 949,
	858, 857, 1157, 1238, 1593, 384, 1123, 1086, 1152, 471,
	788, 1160, 1161, 1162, 646, 463, 329, 1186, 327, 1165,
	324, 275, 1158, 1177, 702, 860, 614, 1084, 940, 1324,
	1057, 1195, 1193, 1181, 1053, 1266, 86, 1041, 1082, 814,
	1184, 1203, 811, 1060, 489, 487, 482, 475, 251, 251,
	472, 1198, 266, 1055, 1444, 266, 272, 266, 1058, 838,
	266, 279, 266, 86, 1234, 1194, 1235, 1196, 1205, 1204,
	349, 1056, 260, 1210, 1208, 1057, 820, 1240, 1574, 320,
	518, 743, 1446, 86, 86, 1250, 759, 758, 1060, 1226,
	1227, 1250, 1222, 1080, 1201, 634, 76, 1085, 1055, 1333,
	88, 1328, 1518, 1058, 743, 1267, 1254, 1255, 1256, 1326,
	756, 1059, 264, 1454, 1276, 1495, 1056, 1278, 1217, 3,
	900, 353, 88, 1513, 1251, 860, 770, 821, 1377, 1334,
	350, 898, 261, 88, 642, 88, 1246, 88, 264, 1070,
	88, 1260, 1262, 1263, 648, 648, 1277, 321, 1307, 1308,
	1591, 88, 1273, 1275, 88, 64, 1059, 1314, 1315, 1316,
	1279, 1592, 88, 650, 1081, 88, 1128, 859, 269, 835,
	1218, 1083, 1057, 1221, 311, 312, 648, 1306, 1305, 795,
	649, 649, 796, 75, 896, 1060, 895, 1385, 1318, 65,
	901, 1309, 1264, 1233, 1172, 1223, 985, 1329, 1303, 1330,
	1058, 984, 1376, 1338, 1339, 1319, 1323, 1371, 983, 1313,
	935, 1363, 797, 1397, 1363, 1362, 88, 1265, 1362, 1367,
	1364, 798, 1332, 1364, 695, 230, 1431, 68, 1335, 1389,
	66, 28, 992, 1366, 1393, 1394, 266, 613, 86, 1396,
	339, 325, 1355, 1404, 1398, 1381, 1541, 73, 1116, 1479,
	1382, 1462, 69, 1059, 1390, 251, 939, 897, 700, 1403,
	283, 23, 1372, 1406, 899, 1360, 377, 859, 283, 835,
	70, 266, 1325, 1183, 839, 807, 1331, 225, 88, 88,
	88, 266, 266, 72, 480, 533, 88, 88, 519, 508,
	400, 328, 88, 1414, 88, 502, 88, 88, 88, 88,
	1409, 511, 947, 450, 1040, 402, 836, 403, 839, 837,
	88, 227, 228, 229, 266, 839, 266, 726, 88, 88,
	390, 834, 88, 264, 287, 773, 936, 1112, 88, 88,
	86, 698, 266, 86, 1438, 86, 376, 1373, 1374, 858,
	857, 1379, 1424, 382, 625, 1421, 839, 381, 915, 1422,
	373, 80, 1456, 81, 1017, 1363, 1352, 766, 71, 1362,
	1445, 1447, 251, 815, 1364, 644, 630, 1363, 1467, 1455,
	88, 1362, 1458, 858, 857, 1192, 1364, 1439, 1473, 1474,
	858, 857, 233, 1453, 1125, 965, 957, 955, 946, 334,
	461, 1465, 774, 360, 74, 322, 1469, 826, 838, 1069,
	358, 638, 1478, 259, 1440, 1441, 258, 804, 1487, 319,
	789, 858, 857, 477, 332, 1494, 1529, 1189, 1489, 45,
	17, 16, 15, 88, 1476, 88, 839, 88, 1485, 14,
	12, 11, 838, 1044, 88, 9, 1488, 8, 7, 838,
	463, 22, 21, 1128, 1502, 20, 5, 4, 2, 1,
	0, 0, 0, 1363, 1510, 1504, 959, 1362, 1506, 0,
	0, 266, 1364, 1503, 860, 0, 0, 88, 1505, 88,
	838, 732, 0, 0, 748, 0, 0, 88, 266, 88,
	1333, 266, 1514, 1517, 0, 266, 0, 777, 778, 0,
	266, 858, 857, 266, 86, 86, 1468, 0, 860, 1520,
	266, 644, 1508, 1536, 0, 860, 0, 1526, 1527, 1531,
	1334, 0, 1535, 1363, 0, 775, 1534, 1362, 1537, 1533,
	1538, 1556, 1364, 1539, 0, 0, 0, 0, 1555, 0,
	0, 1557, 839, 1567, 1567, 0, 860, 1558, 0, 0,
	1568, 88, 88, 0, 264, 88, 1571, 264, 1569, 0,
	838, 1575, 0, 88, 1577, 1567, 1578, 0, 0, 0,
	0, 0, 0, 1544, 0, 88, 1142, 0, 1590, 1589,
	1088, 1089, 0, 378, 29, 0, 1576, 0, 1329, 839,
	1330, 0, 1567, 1595, 0, 0, 0, 0, 0, 0,
	88, 88, 88, 0, 88, 0, 0, 858, 857, 29,
	839, 0, 0, 1332, 0, 648, 859, 0, 835, 1335,
	0, 88, 238, 0, 0, 246, 860, 1143, 0, 0,
	801, 0, 29, 650, 0, 0, 266, 748, 1149, 1150,
	1151, 88, 0, 246, 0, 0, 0, 0, 0, 0,
	859, 649, 835, 0, 858, 857, 0, 859, 0, 835,
	959, 959, 266, 0, 215, 86, 838, 1331, 0, 0,
	0, 0, 0, 0, 0, 858, 857, 0, 224, 0,
	0, 839, 0, 0, 0, 0, 0, 0, 859, 0,
	835, 0, 0, 1136, 1129, 1130, 1131, 1132, 1133, 1348,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 217,
	0, 0, 0, 838, 0, 0, 0, 0, 959, 959,
	959, 264, 264, 0, 0, 264, 0, 0, 216, 218,
	0, 0, 860, 0, 838, 0, 0, 0, 664, 0,
	0, 1128, 0, 1144, 1145, 1146, 858, 857, 0, 0,
	0, 0, 0, 1388, 1236, 1237, 266, 993, 994, 0,
	219, 0, 748, 0, 0, 999, 0, 0, 859, 220,
	835, 1004, 1005, 1007, 1009, 1010, 0, 1013, 1014, 860,
	0, 0, 0, 1141, 266, 0, 1021, 0, 0, 665,
	0, 0, 266, 0, 0, 0, 0, 0, 0, 0,
	860, 801, 0, 0, 801, 838, 0, 1280, 1281, 1282,
	1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292,
	1293, 1294, 1295, 1296, 1297, 625, 1301, 86, 266, 0,
	1042, 238, 0, 0, 959, 959, 0, 1429, 0, 1049,
	0, 0, 0, 0, 1064, 1064, 0, 266, 0, 0,
	1147, 0, 659, 656, 657, 658, 651, 652, 653, 654,
	655, 0, 0, 0, 1142, 221, 0, 0, 222, 0,
	1461, 860, 223, 0, 859, 0, 835, 0, 0, 0,
	264, 0, 0, 0, 0, 0, 0, 959, 959, 959,
	959, 959, 959, 959, 959, 959, 959, 959, 959, 959,
	959, 959, 959, 959, 959, 0, 959, 0, 0, 0,
	648, 0, 666, 667, 668, 1143, 0, 0, 0, 0,
	0, 859, 669, 835, 0, 0, 0, 0, 650, 0,
	675, 0, 238, 648, 0, 238, 238, 0, 0, 0,
	0, 0, 859, 0, 835, 0, 649, 0, 0, 0,
	0, 650, 663, 0, 0, 0, 0, 0, 0, 685,
	0, 0, 0, 689, 0, 0, 0, 0, 0, 649,
	0, 0, 0, 0, 1138, 1139, 1140, 0, 1137, 1134,
	1135, 1136, 1129, 1130, 1131, 1132, 1133, 0, 0, 0,
	0, 0, 0, 0, 0, 1528, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 676, 0,
	0, 0, 1428, 859, 0, 835, 0, 644, 0, 674,
	0, 0, 0, 0, 0, 0, 0, 0, 671, 0,
	0, 0, 0, 664, 775, 0, 0, 0, 0, 266,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1207, 0, 748, 670, 625, 0, 664, 1213, 0, 0,
	0, 29, 0, 0, 0, 0, 0, 0, 266, 0,
	0, 266, 0, 0, 29, 0, 0, 0, 0, 1228,
	0, 0, 1064, 648, 665, 666, 667, 668, 1482, 0,
	0, 0, 959, 673, 0, 669, 0, 0, 0, 0,
	0, 650, 0, 675, 0, 0, 0, 665, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 649,
	0, 0, 0, 0, 0, 663, 0, 0, 0, 0,
	0, 0, 0, 1270, 0, 0, 0, 0, 0, 0,
	0, 672, 0, 660, 661, 662, 0, 659, 656, 657,
	658, 651, 652, 653, 654, 655, 0, 0, 0, 988,
	0, 1519, 0, 0, 0, 0, 989, 0, 959, 0,
	0, 656, 657, 658, 651, 652, 653, 654, 655, 0,
	0, 676, 0, 0, 0, 0, 0, 648, 0, 666,
	667, 668, 674, 0, 0, 1321, 1322, 748, 0, 669,
	0, 671, 0, 644, 644, 650, 664, 675, 0, 1346,
	0, 1347, 0, 266, 1349, 1350, 1351, 0, 0, 0,
	0, 0, 0, 649, 0, 1359, 670, 748, 1359, 663,
	829, 0, 0, 0, 0, 266, 266, 0, 0, 266,
	0, 959, 0, 0, 0, 644, 1064, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 665, 0, 648,
	906, 666, 667, 668, 0, 0, 673, 0, 0, 0,
	0, 669, 0, 0, 0, 0, 0, 650, 0, 675,
	0, 0, 0, 0, 0, 676, 0, 1405, 0, 0,
	0, 0, 0, 0, 0, 649, 674, 0, 0, 0,
	0, 663, 0, 0, 0, 671, 0, 0, 0, 0,
	664, 0, 0, 0, 672, 0, 660, 661, 662, 0,
	659, 656, 657, 658, 651, 652, 653, 654, 655, 0,
	670, 0, 0, 0, 0, 0, 0, 1417, 0, 0,
	748, 0, 1423, 0, 86, 0, 0, 0, 0, 0,
	0, 266, 246, 0, 0, 0, 0, 676, 0, 0,
	0, 665, 0, 0, 0, 0, 0, 0, 674, 1359,
	673, 0, 0, 0, 0, 0, 0, 671, 0, 0,
	0, 1359, 664, 0, 266, 0, 1464, 0, 0, 0,
	0, 0, 0, 0, 266, 0, 644, 0, 0, 0,
	0, 0, 670, 0, 0, 0, 29, 0, 0, 0,
	0, 0, 0, 0, 0, 1066, 0, 0, 672, 0,
	660, 661, 662, 0, 659, 656, 657, 658, 651, 652,
	653, 654, 655, 665, 0, 0, 0, 0, 0, 0,
	0, 1168, 673, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1496, 1497,
	0, 0, 1501, 0, 0, 0, 0, 1359, 0, 0,
	86, 0, 0, 0, 0, 0, 0, 906, 0, 0,
	0, 0, 644, 0, 0, 0, 0, 0, 0, 0,
	672, 685, 660, 661, 662, 0, 659, 656, 657, 658,
	651, 652, 653, 654, 655, 0, 0, 644, 644, 266,
	0, 86, 0, 1167, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1359, 1464, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 398, 386, 387, 388, 385, 374, 685, 266, 0,
	0, 0, 0, 90, 91, 924, 92, 0, 0, 0,
	0, 380, 0, 0, 0, 93, 94, 175, 427, 428,
	95, 429, 430, 0, 96, 180, 97, 395, 413, 431,
	432, 0, 423, 0, 406, 0, 98, 99, 100, 0,
	101, 0, 102, 0, 296, 103, 104, 0, 407, 409,
	0, 408, 410, 105, 106, 107, 108, 433, 109, 434,
	435, 0, 0, 110, 0, 925, 0, 426, 112, 0,
	0, 0, 0, 379, 113, 414, 393, 0, 114, 115,
	436, 116, 0, 0, 0, 297, 829, 117, 424, 829,
	191, 0, 118, 420, 422, 0, 0, 0, 298, 119,
	437, 438, 439, 0, 405, 0, 299, 120, 300, 121,
	0, 0, 425, 301, 122, 302, 0, 252, 0, 0,
	0, 123, 124, 125, 126, 253, 303, 127, 128, 369,
	129, 394, 421, 130, 440, 131, 132, 0, 0, 0,
	0, 0, 133, 201, 304, 134, 305, 415, 135, 136,
	0, 416, 137, 204, 0, 138, 139, 441, 140, 141,
	0, 142, 143, 144, 0, 145, 306, 146, 147, 383,
	148, 0, 149, 150, 0, 151, 254, 411, 152, 153,
	307, 154, 442, 155, 0, 156, 158, 208, 157, 417,
	0, 0, 159, 160, 0, 256, 443, 0, 0, 255,
	418, 419, 392, 161, 162, 163, 164, 0, 0, 165,
	166, 412, 0, 167, 168, 169, 213, 444, 923, 170,
	0, 0, 0, 0, 171, 172, 173, 174, 370, 0,
	0, 0, 0, 0, 0, 0, 29, 0, 366, 367,
	926, 0, 0, 0, 368, 0, 0, 375, 921, 0,
	0, 0, 0, 829, 829, 0, 0, 829, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1448, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 529, 0, 0, 0, 0, 0, 0,
	0, 0, 829, 0, 0, 90, 91, 534, 92, 535,
	536, 537, 538, 539, 540, 541, 542, 93, 94, 175,
	176, 177, 95, 178, 179, 543, 96, 180, 97, 544,
	545, 181, 182, 546, 183, 547, 295, 548, 98, 99,
	100, 0, 101, 549, 102, 550, 296, 103, 104, 551,
	552, 553, 554, 555, 556, 105, 106, 107, 108, 184,
	109, 185, 186, 557, 558, 110, 559, 560, 561, 111,
	112, 562, 563, 685, 564, 187, 113, 188, 565, 566,
	114, 115, 189, 116, 567, 568, 569, 297, 570, 117,
	190, 571, 191, 572, 118, 192, 193, 573, 574, 575,
	298, 119, 194, 195, 196, 576, 197, 577, 299, 120,
	300, 121, 578, 579, 198, 301, 122, 302, 580, 252,
	581, 582, 0, 123, 124, 125, 126, 253, 303, 127,
	128, 583, 129, 584, 199, 130, 200, 131, 132, 585,
	586, 587, 588, 589, 133, 201, 304, 134, 305, 202,
	135, 136, 590, 203, 137, 204, 591, 138, 139, 205,
	140, 141, 592, 142, 143, 144, 593, 145, 306, 146,
	147, 206, 148, 0, 149, 150, 594, 151, 254, 595,
	152, 153, 307, 154, 207, 155, 596, 156, 158, 208,
	157, 209, 597, 598, 159, 160, 599, 256, 210, 600,
	601, 255, 211, 212, 602, 161, 162, 163, 164, 603,
	604, 165, 166, 605, 606, 167, 168, 169, 213, 214,
	607, 170, 608, 609, 610, 611, 171, 172, 173, 174,
	0, 529, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 734, 90, 91, 534, 92, 535, 536, 537,
	538, 539, 540, 541, 542, 93, 94, 175, 176, 177,
	95, 178, 179, 543, 96, 180, 97, 544, 545, 181,
	182, 546, 183, 547, 295, 548, 98, 99, 100, 0,
	101, 549, 102, 550, 296, 103, 104, 551, 552, 553,
	554, 555, 556, 105, 106, 107, 108, 184, 109, 185,
	186, 557, 558, 110, 559, 560, 561, 111, 112, 562,
	563, 0, 564, 187, 113, 188, 565, 566, 114, 115,
	189, 116, 567, 568, 569, 297, 570, 117, 190, 571,
	191, 572, 118, 192, 193, 573, 574, 575, 298, 119,
	194, 195, 196, 576, 197, 577, 299, 120, 300, 121,
	578, 579, 198, 301, 122, 302, 580, 252, 581, 582,
	0, 123, 124, 125, 126, 253, 303, 127, 128, 583,
	129, 584, 199, 130, 200, 131, 132, 585, 586, 587,
	588, 589, 133, 201, 304, 134, 305, 202, 135, 136,
	590, 203, 137, 204, 591, 138, 139, 205, 140, 141,
	592, 142, 143, 144, 593, 145, 306, 146, 147, 206,
	148, 0, 149, 150, 594, 151, 254, 595, 152, 153,
	307, 154, 207, 155, 596, 156, 158, 208, 157, 209,
	597, 598, 159, 160, 599, 256, 210, 600, 601, 255,
	211, 212, 602, 161, 162, 163, 164, 603, 604, 165,
	166, 605, 606, 167, 168, 169, 213, 214, 607, 170,
	608, 609, 610, 611, 171, 172, 173, 174, 398, 386,
	387, 388, 385, 374, 0, 0, 0, 0, 0, 0,
	90, 91, 0, 92, 0, 0, 0, 0, 380, 0,
	0, 0, 93, 94, 175, 427, 428, 95, 429, 430,
	0, 96, 180, 97, 395, 413, 431, 432, 0, 423,
	0, 406, 0, 98, 99, 100, 0, 101, 0, 102,
	0, 296, 103, 104, 0, 407, 409, 0, 408, 410,
	105, 106, 107, 108, 433, 109, 434, 435, 464, 0,
	110, 0, 0, 0, 426, 112, 0, 0, 0, 0,
	379, 113, 414, 393, 0, 114, 115, 436, 116, 0,
	0, 0, 297, 0, 117, 424, 0, 191, 0, 118,
	420, 422, 0, 0, 0, 298, 119, 437, 438, 439,
	0, 405, 0, 299, 120, 300, 121, 0, 0, 425,
	301, 122, 302, 0, 252, 0, 0, 0, 123, 124,
	125, 126, 253, 303, 127, 128, 369, 129, 394, 421,
	130, 440, 131, 132, 0, 0, 0, 0, 0, 133,
	201, 304, 134, 305, 415, 135, 136, 0, 416, 137,
	204, 0, 138, 139, 441, 140, 141, 0, 142, 143,
	144, 0, 145, 306, 146, 147, 383, 148, 0, 149,
	150, 44, 151, 254, 411, 152, 153, 307, 154, 442,
	155, 0, 156, 158, 208, 157, 417, 0, 46, 159,
	160, 0, 256, 443, 0, 0, 255, 418, 419, 392,
	161, 162, 163, 164, 0, 0, 165, 166, 412, 0,
	167, 168, 169, 294, 444, 0, 170, 0, 0, 0,
	42, 171, 172, 173, 174, 370, 43, 398, 386, 387,
	388, 385, 374, 0, 0, 366, 367, 0, 0, 90,
	91, 368, 92, 0, 375, 0, 0, 380, 0, 0,
	0, 93, 94, 175, 427, 428, 95, 429, 430, 0,
	96, 180, 97, 395, 413, 431, 432, 0, 423, 0,
	406, 0, 98, 99, 100, 0, 101, 0, 102, 0,
	296, 103, 104, 0, 407, 409, 0, 408, 410, 105,
	106, 107, 108, 433, 109, 434, 435, 0, 0, 110,
	0, 0, 0, 426, 112, 0, 0, 0, 0, 379,
	113, 414, 393, 0, 114, 115, 436, 116, 0, 0,
	0, 297, 0, 117, 424, 0, 191, 0, 118, 420,
	422, 0, 0, 0, 298, 119, 437, 438, 439, 0,
	405, 0, 299, 120, 300, 121, 0, 0, 425, 301,
	122, 302, 0, 252, 0, 0, 0, 123, 124, 125,
	126, 253, 303, 127, 128, 369, 129, 394, 421, 130,
	440, 131, 132, 0, 0, 0, 0, 0, 133, 201,
	304, 134, 305, 415, 135, 136, 0, 416, 137, 204,
	0, 138, 139, 441, 140, 141, 0, 142, 143, 144,
	0, 145, 306, 146, 147, 383, 148, 0, 149, 150,
	44, 151, 254, 411, 152, 153, 307, 154, 442, 155,
	0, 156, 158, 208, 157, 417, 0, 46, 159, 160,
	0, 256, 443, 0, 0, 255, 418, 419, 392, 161,
	162, 163, 164, 0, 0, 165, 166, 412, 0, 167,
	168, 169, 294, 444, 0, 170, 0, 0, 0, 42,
	171, 172, 173, 174, 370, 43, 398, 386, 387, 388,
	385, 374, 0, 0, 366, 367, 0, 0, 90, 91,
	368, 92, 0, 375, 0, 0, 380, 0, 0, 0,
	93, 94, 175, 427, 428, 95, 429, 430, 969, 96,
	180, 97, 395, 413, 431, 432, 0, 423, 0, 406,
	0, 98, 99, 100, 0, 101, 0, 102, 0, 296,
	103, 104, 0, 407, 409, 0, 408, 410, 105, 106,
	107, 108, 433, 109, 434, 435, 0, 0, 110, 0,
	0, 0, 426, 112, 0, 0, 0, 0, 379, 113,
	414, 393, 0, 114, 115, 436, 116, 0, 0, 974,
	297, 0, 117, 424, 0, 191, 0, 118, 420, 422,
	0, 0, 0, 298, 119, 437, 438, 439, 0, 405,
	0, 299, 120, 300, 121, 0, 970, 425, 301, 122,
	302, 0, 252, 0, 0, 0, 123, 124, 125, 126,
	253, 303, 127, 128, 369, 129, 394, 421, 130, 440,
	131, 132, 0, 0, 0, 0, 0, 133, 201, 304,
	134, 305, 415, 135, 136, 0, 416, 137, 204, 0,
	138, 139, 441, 140, 141, 0, 142, 143, 144, 0,
	145, 306, 146, 147, 383, 148, 0, 149, 150, 0,
	151, 254, 411, 152, 153, 307, 154, 442, 155, 0,
	156, 158, 208, 157, 417, 0, 0, 159, 160, 0,
	256, 443, 0, 971, 255, 418, 419, 392, 161, 162,
	163, 164, 0, 0, 165, 166, 412, 0, 167, 168,
	169, 213, 444, 0, 170, 0, 0, 0, 0, 171,
	172, 173, 174, 370, 0, 398, 386, 387, 388, 385,
	374, 0, 0, 366, 367, 0, 0, 90, 91, 368,
	92, 0, 375, 0, 0, 380, 0, 0, 0, 93,
	94, 175, 427, 428, 95, 429, 430, 0, 96, 180,
	97, 395, 413, 431, 432, 0, 423, 0, 406, 0,
	98, 99, 100, 0, 101, 0, 102, 0, 296, 103,
	104, 0, 407, 409, 0, 408, 410, 105, 106, 107,
	108, 433, 109, 434, 435, 0, 0, 110, 0, 0,
	0, 426, 112, 0, 0, 0, 0, 379, 113, 414,
	393, 0, 114, 115, 436, 116, 0, 0, 0, 297,
	0, 117, 424, 0, 191, 0, 118, 420, 422, 0,
	0, 0, 298, 119, 437, 438, 439, 0, 405, 0,
	299, 120, 300, 121, 0, 0, 425, 301, 122, 302,
	0, 252, 0, 0, 0, 123, 124, 125, 126, 253,
	303, 127, 128, 369, 129, 394, 421, 130, 440, 131,
	132, 0, 0, 0, 0, 0, 133, 201, 304, 134,
	305, 415, 135, 136, 0, 416, 137, 204, 0, 138,
	139, 441, 140, 141, 0, 142, 143, 144, 0, 145,
	306, 146, 147, 383, 148, 0, 149, 150, 0, 151,
	254, 411, 152, 153, 307, 154, 442, 155, 0, 156,
	158, 208, 157, 417, 0, 0, 159, 160, 0, 256,
	443, 0, 0, 255, 418, 419, 392, 161, 162, 163,
	164, 0, 0, 165, 166, 412, 0, 167, 168, 169,
	213, 444, 0, 170, 0, 0, 0, 0, 171, 172,
	173, 174, 370, 0, 398, 386, 387, 388, 385, 374,
	0, 0, 366, 367, 0, 0, 90, 91, 368, 92,
	0, 375, 1304, 0, 380, 0, 0, 0, 93, 94,
	175, 427, 428, 95, 429, 430, 0, 96, 180, 97,
	395, 413, 431, 432, 0, 423, 0, 406, 0, 98,
	99, 100, 0, 101, 0, 102, 0, 296, 103, 104,
	0, 407, 409, 0, 408, 410, 105, 106, 107, 108,
	433, 109, 434, 435, 0, 0, 110, 0, 0, 0,
	426, 112, 0, 0, 0, 0, 379, 113, 414, 393,
	0, 114, 115, 436, 116, 0, 0, 0, 297, 0,
	117, 424, 0, 191, 0, 118, 420, 422, 0, 0,
	0, 298, 119, 437, 438, 439, 0, 405, 0, 299,
	120, 300, 121, 0, 0, 425, 301, 122, 302, 0,
	252, 0, 0, 0, 123, 124, 125, 126, 253, 303,
	127, 128, 369, 129, 394, 421, 130, 440, 131, 132,
	0, 0, 0, 0, 0, 133, 201, 304, 134, 305,
	415, 135, 136, 0, 416, 137, 204, 0, 138, 139,
	441, 140, 141, 0, 142, 143, 144, 0, 145, 306,
	146, 147, 383, 148, 0, 149, 150, 0, 151, 254,
	411, 152, 153, 307, 154, 442, 155, 0, 156, 158,
	208, 157, 417, 0, 0, 159, 160, 0, 256, 443,
	0, 0, 255, 418, 419, 392, 161, 162, 163, 164,
	0, 0, 165, 166, 412, 0, 167, 168, 169, 213,
	444, 0, 170, 0, 0, 0, 0, 171, 172, 173,
	174, 370, 0, 398, 386, 387, 388, 385, 374, 0,
	0, 366, 367, 0, 0, 90, 91, 368, 92, 0,
	375, 1247, 0, 380, 0, 0, 0, 93, 94, 175,
	427, 428, 95, 429, 430, 0, 96, 180, 97, 395,
	413, 431, 432, 0, 423, 0, 406, 0, 98, 99,
	100, 0, 101, 0, 102, 0, 296, 103, 104, 0,
	407, 409, 0, 408, 410, 105, 106, 107, 108, 433,
	109, 434, 435, 0, 0, 110, 0, 0, 0, 426,
	112, 0, 0, 0, 0, 379, 113, 414, 393, 0,
	114, 115, 436, 116, 0, 0, 0, 297, 0, 117,
	424, 0, 191, 0, 118, 420, 422, 0, 0, 0,
	298, 119, 437, 438, 439, 0, 405, 0, 299, 120,
	300, 121, 0, 0, 425, 301, 122, 302, 0, 252,
	0, 0, 0, 123, 124, 125, 126, 253, 303, 127,
	128, 369, 129, 394, 421, 130, 440, 131, 132, 0,
	0, 0, 0, 0, 133, 201, 304, 134, 305, 415,
	135, 136, 0, 416, 137, 204, 0, 138, 139, 441,
	140, 141, 0, 142, 143, 144, 0, 145, 306, 146,
	147, 383, 148, 0, 149, 150, 0, 151, 254, 411,
	152, 153, 307, 154, 442, 155, 0, 156, 158, 208,
	157, 417, 0, 0, 159, 160, 0, 256, 443, 0,
	0, 255, 418, 419, 392, 161, 162, 163, 164, 0,
	0, 165, 166, 412, 0, 167, 168, 169, 213, 444,
	0, 170, 0, 0, 0, 0, 171, 172, 173, 174,
	370, 0, 398, 386, 387, 388, 385, 374, 0, 0,
	366, 367, 0, 0, 90, 91, 368, 92, 0, 375,
	920, 0, 380, 0, 0, 0, 93, 94, 175, 427,
	428, 95, 429, 430, 0, 96, 180, 97, 395, 413,
	431, 432, 0, 423, 0, 406, 0, 98, 99, 100,
	0, 101, 0, 102, 0, 296, 103, 104, 0, 407,
	409, 0, 408, 410, 105, 106, 107, 108, 433, 109,
	434, 435, 0, 0, 110, 0, 0, 0, 426, 112,
	0, 0, 0, 0, 379, 113, 414, 393, 0, 114,
	115, 436, 116, 0, 0, 0, 297, 0, 117, 424,
	0, 191, 0, 118, 420, 422, 0, 0, 0, 298,
	119, 437, 438, 439, 0, 405, 0, 299, 120, 300,
	121, 0, 0, 425, 301, 122, 302, 0, 252, 0,
	0, 0, 123, 124, 125, 126, 253, 303, 127, 128,
	369, 129, 394, 421, 130, 440, 131, 132, 0, 0,
	0, 0, 0, 133, 201, 304, 134, 305, 415, 135,
	136, 0, 416, 137, 204, 0, 138, 139, 441, 140,
	141, 0, 142, 143, 144, 0, 145, 306, 146, 147,
	383, 148, 0, 149, 150, 0, 151, 254, 411, 152,
	153, 307, 154, 442, 155, 0, 156, 158, 208, 157,
	417, 0, 0, 159, 160, 0, 256, 443, 0, 0,
	255, 418, 419, 392, 161, 162, 163, 164, 0, 0,
	165, 166, 412, 0, 167, 168, 169, 213, 444, 0,
	170, 0, 0, 0, 0, 171, 172, 173, 174, 370,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 366,
	367, 0, 0, 0, 0, 368, 691, 916, 375, 398,
	386, 387, 388, 385, 374, 0, 0, 0, 0, 0,
	0, 90, 91, 0, 92, 0, 0, 0, 0, 380,
	0, 0, 0, 93, 94, 175, 427, 428, 95, 429,
	430, 0, 96, 180, 97, 395, 413, 431, 432, 0,
	423, 0, 406, 0, 98, 99, 100, 0, 101, 0,
	102, 0, 296, 103, 104, 0, 407, 409, 0, 408,
	410, 105, 106, 107, 108, 433, 109, 434, 435, 0,
	0, 110, 0, 0, 0, 426, 112, 0, 0, 0,
	0, 379, 113, 414, 393, 0, 114, 115, 436, 116,
	0, 0, 0, 297, 0, 117, 424, 0, 191, 0,
	118, 420, 422, 0, 0, 0, 298, 119, 437, 438,
	439, 0, 405, 0, 299, 120, 300, 121, 0, 0,
	425, 301, 122, 302, 0, 252, 0, 0, 0, 123,
	124, 125, 126, 253, 303, 127, 128, 369, 129, 394,
	421, 130, 440, 131, 132, 0, 0, 0, 0, 0,
	133, 201, 304, 134, 305, 415, 135, 136, 0, 416,
	137, 204, 0, 138, 139, 441, 140, 141, 0, 142,
	143, 144, 0, 145, 306, 146, 147, 383, 148, 0,
	149, 150, 0, 151, 254, 411, 152, 153, 307, 154,
	442, 155, 0, 156, 158, 208, 157, 417, 0, 0,
	159, 160, 0, 256, 443, 0, 0, 255, 418, 419,
	392, 161, 162, 163, 164, 0, 0, 165, 166, 412,
	0, 167, 168, 169, 213, 444, 1253, 170, 0, 0,
	0, 0, 171, 172, 173, 174, 370, 0, 398, 386,
	387, 388, 385, 374, 0, 0, 366, 367, 0, 0,
	90, 91, 368, 92, 0, 375, 0, 0, 380, 0,
	0, 0, 93, 94, 175, 427, 428, 95, 429, 430,
	0, 96, 180, 97, 395, 413, 431, 432, 0, 423,
	0, 406, 0, 98, 99, 100, 0, 101, 0, 102,
	0, 296, 103, 104, 0, 407, 409, 0, 408, 410,
	105, 106, 107, 108, 433, 109, 434, 435, 464, 0,
	110, 0, 0, 0, 426, 112, 0, 0, 0, 0,
	379, 113, 414, 393, 0, 114, 115, 436, 116, 0,
	0, 0, 297, 0, 117, 424, 0, 191, 0, 118,
	420, 422, 0, 0, 0, 298, 119, 437, 438, 439,
	0, 405, 0, 299, 120, 300, 121, 0, 0, 425,
	301, 122, 302, 0, 252, 0, 0, 0, 123, 124,
	125, 126, 253, 303, 127, 128, 369, 129, 394, 421,
	130, 440, 131, 132, 0, 0, 0, 0, 0, 133,
	201, 304, 134, 305, 415, 135, 136, 0, 416, 137,
	204, 0, 138, 139, 441, 140, 141, 0, 142, 143,
	144, 0, 145, 306, 146, 147, 383, 148, 0, 149,
	150, 0, 151, 254, 411, 152, 153, 307, 154, 442,
	155, 0, 156, 158, 208, 157, 417, 0, 0, 159,
	160, 0, 256, 443, 0, 0, 255, 418, 419, 392,
	161, 162, 163, 164, 0, 0, 165, 166, 412, 0,
	167, 168, 169, 213, 444, 0, 170, 0, 0, 0,
	0, 171, 172, 173, 174, 370, 0, 398, 386, 387,
	388, 385, 374, 0, 0, 366, 367, 0, 0, 90,
	91, 368, 92, 0, 375, 0, 0, 380, 0, 0,
	0, 93, 94, 175, 427, 428, 95, 429, 430, 0,
	96, 180, 97, 395, 413, 431, 432, 0, 423, 0,
	406, 0, 98, 99, 100, 0, 101, 0, 102, 0,
	296, 103, 104, 0, 407, 409, 0, 408, 410, 105,
	106, 107, 108, 433, 109, 434, 435, 0, 0, 110,
	0, 0, 0, 426, 112, 0, 0, 0, 0, 379,
	113, 414, 393, 0, 114, 115, 436, 116, 0, 0,
	974, 297, 0, 117, 424, 0, 191, 0, 118, 420,
	422, 0, 0, 0, 298, 119, 437, 438, 439, 0,
	405, 0, 299, 120, 300, 121, 0, 0, 425, 301,
	122, 302, 0, 252, 0, 0, 0, 123, 124, 125,
	126, 253, 303, 127, 128, 369, 129, 394, 421, 130,
	440, 131, 132, 0, 0, 0, 0, 0, 133, 201,
	304, 134, 305, 415, 135, 136, 0, 416, 137, 204,
	0, 138, 139, 441, 140, 141, 0, 142, 143, 144,
	0, 145, 306, 146, 147, 383, 148, 0, 149, 150,
	0, 151, 254, 411, 152, 153, 307, 154, 442, 155,
	0, 156, 158, 208, 157, 417, 0, 0, 159, 160,
	0, 256, 443, 0, 0, 255, 418, 419, 392, 161,
	162, 163, 164, 0, 0, 165, 166, 412, 0, 167,
	168, 169, 213, 444, 0, 170, 0, 0, 0, 0,
	171, 172, 173, 174, 370, 0, 398, 386, 387, 388,
	385, 374, 0, 0, 366, 367, 0, 0, 90, 91,
	368, 92, 0, 375, 0, 0, 380, 0, 0, 0,
	93, 94, 175, 427, 428, 95, 429, 430, 0, 96,
	180, 97, 395, 413, 431, 432, 0, 423, 0, 406,
	0, 98, 99, 100, 0, 101, 0, 102, 0, 296,
	103, 104, 0, 407, 409, 0, 408, 410, 105, 106,
	107, 108, 433, 109, 434, 435, 0, 0, 110, 0,
	0, 0, 426, 112, 0, 0, 0, 0, 379, 113,
	414, 393, 0, 114, 115, 436, 116, 0, 0, 0,
	297, 0, 117, 424, 0, 191, 0, 118, 420, 422,
	0, 0, 0, 298, 119, 437, 438, 439, 0, 405,
	0, 299, 120, 300, 121, 0, 0, 425, 301, 122,
	302, 0, 252, 0, 0, 0, 123, 124, 125, 126,
	253, 303, 127, 128, 369, 129, 394, 421, 130, 440,
	131, 132, 0, 0, 0, 0, 0, 133, 201, 304,
	134, 305, 415, 135, 136, 0, 416, 137, 204, 0,
	138, 139, 441, 140, 141, 0, 142, 143, 144, 0,
	145, 306, 146, 147, 383, 148, 0, 149, 150, 0,
	151, 254, 411, 152, 153, 307, 154, 442, 155, 0,
	156, 158, 208, 157, 417, 0, 0, 159, 160, 0,
	256, 443, 0, 0, 255, 418, 419, 392, 161, 162,
	163, 164, 0, 0, 165, 166, 412, 0, 167, 168,
	169, 213, 444, 0, 170, 0, 0, 0, 0, 171,
	172, 173, 174, 370, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 366, 367, 364, 0, 0, 0, 368,
	0, 0, 375, 398, 386, 387, 388, 385, 374, 0,
	0, 0, 0, 0, 0, 90, 91, 632, 92, 0,
	0, 0, 0, 380, 0, 0, 0, 93, 94, 175,
	427, 428, 95, 429, 430, 0, 96, 180, 97, 395,
	413, 431, 432, 0, 423, 0, 406, 0, 98, 99,
	100, 0, 101, 0, 102, 0, 296, 103, 104, 0,
	407, 409, 0, 408, 410, 105, 106, 107, 108, 433,
	109, 434, 435, 0, 0, 110, 0, 0, 0, 426,
	112, 0, 0, 0, 0, 379, 113, 414, 393, 0,
	114, 115, 436, 116, 0, 0, 0, 297, 0, 117,
	424, 0, 191, 0, 118, 420, 422, 0, 0, 0,
	298, 119, 437, 438, 439, 0, 405, 0, 299, 120,
	300, 121, 0, 0, 425, 301, 122, 302, 0, 252,
	0, 0, 0, 123, 124, 125, 126, 253, 303, 127,
	128, 369, 129, 394, 421, 130, 440, 131, 132, 0,
	0, 0, 0, 0, 133, 201, 304, 134, 305, 415,
	135, 136, 0, 416, 137, 204, 0, 138, 139, 441,
	140, 141, 0, 142, 143, 144, 0, 145, 306, 146,
	147, 383, 148, 0, 149, 150, 0, 151, 254, 411,
	152, 153, 307, 154, 442, 155, 0, 156, 158, 208,
	157, 417, 0, 0, 159, 160, 0, 256, 443, 0,
	0, 255, 418, 419, 392, 161, 162, 163, 164, 0,
	0, 165, 166, 412, 0, 167, 168, 169, 213, 444,
	0, 170, 0, 0, 0, 0, 171, 172, 173, 174,
	370, 0, 398, 386, 387, 388, 385, 374, 0, 0,
	366, 367, 0, 0, 90, 91, 368, 92, 0, 375,
	0, 0, 380, 0, 0, 0, 93, 94, 175, 427,
	428, 95, 429, 430, 0, 96, 180, 97, 395, 413,
	431, 432, 0, 423, 0, 406, 0, 98, 99, 100,
	0, 101, 0, 102, 0, 296, 103, 1566, 0, 407,
	409, 0, 408, 410, 105, 106, 107, 108, 433, 109,
	434, 435, 0, 0, 110, 0, 0, 0, 426, 112,
	0, 0, 0, 0, 379, 113, 414, 393, 0, 114,
	115, 436, 116, 0, 0, 0, 297, 0, 117, 424,
	0, 191, 0, 118, 420, 422, 0, 0, 0, 298,
	119, 437, 438, 439, 0, 405, 0, 299, 120, 300,
	121, 0, 0, 425, 301, 122, 302, 0, 252, 0,
	0, 0, 123, 124, 125, 126, 253, 303, 127, 128,
	369, 129, 394, 421, 130, 440, 131, 132, 0, 0,
	0, 0, 0, 133, 201, 304, 134, 305, 415, 135,
	136, 0, 416, 137, 204, 0, 138, 139, 441, 140,
	141, 0, 142, 143, 144, 0, 145, 306, 146, 147,
	383, 148, 0, 149, 150, 0, 151, 254, 411, 152,
	153, 307, 154, 442, 155, 0, 156, 158, 208, 157,
	417, 0, 0, 159, 160, 0, 256, 443, 0, 0,
	255, 418, 419, 392, 161, 162, 1565, 164, 0, 0,
	165, 166, 412, 0, 167, 168, 169, 213, 444, 0,
	170, 0, 0, 0, 0, 171, 172, 173, 174, 370,
	0, 398, 386, 387, 388, 385, 374, 0, 0, 366,
	367, 0, 0, 90, 91, 368, 92, 0, 375, 0,
	0, 380, 0, 0, 0, 93, 94, 1564, 427, 428,
	95, 429, 430, 0, 96, 180, 97, 395, 413, 431,
	432, 0, 423, 0, 406, 0, 98, 99, 100, 0,
	101, 0, 102, 0, 296, 103, 1566, 0, 407, 409,
	0, 408, 410, 105, 106, 107, 108, 433, 109, 434,
	435, 0, 0, 110, 0, 0, 0, 426, 112, 0,
	0, 0, 0, 379, 113, 414, 393, 0, 114, 115,
	436, 116, 0, 0, 0, 297, 0, 117, 424, 0,
	191, 0, 118, 420, 422, 0, 0, 0, 298, 119,
	437, 438, 439, 0, 405, 0, 299, 120, 300, 121,
	0, 0, 425, 301, 122, 302, 0, 252, 0, 0,
	0, 123, 124, 125, 126, 253, 303, 127, 128, 369,
	129, 394, 421, 130, 440, 131, 132, 0, 0, 0,
	0, 0, 133, 201, 304, 134, 305, 415, 135, 136,
	0, 416, 137, 204, 0, 138, 139, 441, 140, 141,
	0, 142, 143, 144, 0, 145, 306, 146, 147, 383,
	148, 0, 149, 150, 0, 151, 254, 411, 152, 153,
	307, 154, 442, 155, 0, 156, 158, 208, 157, 417,
	0, 0, 159, 160, 0, 256, 443, 0, 0, 255,
	418, 419, 392, 161, 162, 1565, 164, 0, 0, 165,
	166, 412, 0, 167, 168, 169, 213, 444, 0, 170,
	0, 0, 0, 0, 171, 172, 173, 174, 370, 0,
	398, 386, 387, 388, 385, 374, 0, 0, 366, 367,
	0, 0, 90, 91, 368, 92, 0, 375, 0, 0,
	380, 0, 0, 0, 93, 94, 175, 427, 428, 95,
	429, 430, 0, 96, 180, 97, 395, 413, 431, 432,
	0, 423, 0, 406, 0, 98, 99, 100, 0, 101,
	0, 102, 0, 296, 103, 104, 0, 407, 409, 0,
	408, 410, 105, 106, 107, 108, 433, 109, 434, 435,
	0, 0, 110, 0, 0, 0, 426, 112, 0, 0,
	0, 0, 379, 113, 414, 393, 0, 114, 115, 436,
	116, 0, 0, 0, 297, 0, 117, 424, 0, 191,
	0, 118, 420, 422, 0, 0, 0, 298, 119, 437,
	438, 439, 0, 405, 0, 299, 120, 300, 121, 0,
	0, 425, 301, 122, 302, 0, 252, 0, 0, 0,
	123, 124, 125, 126, 253, 303, 127, 128, 369, 129,
	394, 421, 130, 440, 131, 132, 0, 0, 0, 0,
	0, 133, 201, 304, 134, 305, 415, 135, 136, 0,
	416, 137, 204, 0, 138, 139, 441, 140, 141, 0,
	142, 143, 144, 0, 145, 306, 146, 147, 383, 148,
	0, 149, 150, 0, 151, 254, 411, 152, 153, 307,
	154, 442, 155, 0, 156, 158, 208, 157, 417, 0,
	0, 159, 160, 0, 256, 443, 0, 0, 255, 418,
	419, 392, 161, 162, 163, 164, 0, 0, 165, 166,
	412, 0, 167, 168, 169, 213, 444, 0, 170, 0,
	0, 0, 0, 171, 172, 173, 174, 370, 0, 398,
	386, 387, 388, 385, 374, 0, 0, 366, 367, 0,
	0, 90, 91, 368, 92, 0, 375, 0, 0, 380,
	0, 0, 0, 93, 94, 175, 427, 428, 95, 429,
	430, 0, 96, 180, 97, 395, 413, 431, 432, 0,
	423, 0, 406, 0, 98, 99, 100, 0, 101, 0,
	102, 0, 296, 103, 104, 0, 407, 409, 0, 408,
	410, 105, 106, 107, 108, 433, 109, 434, 435, 0,
	0, 110, 0, 0, 0, 426, 112, 0, 0, 0,
	0, 379, 113, 414, 393, 0, 114, 115, 436, 116,
	0, 0, 0, 297, 0, 117, 424, 0, 191, 0,
	118, 420, 422, 0, 0, 0, 298, 119, 437, 438,
	439, 0, 405, 0, 299, 120, 300, 121, 0, 0,
	425, 301, 122, 302, 0, 252, 0, 0, 0, 123,
	124, 125, 126, 253, 303, 127, 128, 0, 129, 394,
	421, 130, 440, 131, 132, 0, 0, 0, 0, 0,
	133, 201, 304, 134, 305, 415, 135, 136, 0, 416,
	137, 204, 0, 138, 139, 441, 140, 141, 0, 142,
	143, 144, 0, 145, 306, 146, 147, 964, 148, 0,
	149, 150, 0, 151, 254, 411, 152, 153, 307, 154,
	442, 155, 0, 156, 158, 208, 157, 417, 0, 0,
	159, 160, 0, 256, 443, 0, 0, 255, 418, 419,
	392, 161, 162, 163, 164, 0, 0, 165, 166, 412,
	0, 167, 168, 169, 213, 444, 0, 170, 0, 0,
	0, 0, 171, 172, 173, 174, 398, 386, 387, 388,
	385, 374, 0, 0, 0, 0, 960, 961, 90, 91,
	0, 92, 962, 0, 0, 963, 380, 0, 0, 0,
	93, 94, 0, 427, 428, 95, 429, 430, 0, 96,
	180, 97, 395, 413, 431, 432, 0, 423, 0, 406,
	0, 98, 99, 100, 0, 101, 0, 102, 0, 296,
	103, 1566, 0, 407, 409, 0, 408, 410, 105, 106,
	107, 108, 433, 109, 434, 435, 0, 0, 110, 0,
	0, 0, 426, 112, 0, 0, 0, 0, 379, 113,
	414, 393, 0, 114, 115, 436, 116, 0, 0, 0,
	297, 0, 117, 424, 0, 191, 0, 118, 420, 422,
	0, 0, 0, 298, 119, 437, 438, 439, 0, 405,
	0, 0, 120, 300, 121, 0, 0, 425, 301, 122,
	0, 0, 252, 0, 0, 0, 123, 124, 125, 126,
	253, 303, 127, 128, 369, 129, 394, 421, 130, 440,
	131, 132, 0, 0, 0, 0, 0, 133, 201, 304,
	134, 305, 415, 135, 136, 0, 416, 137, 204, 0,
	138, 139, 441, 140, 141, 0, 142, 143, 144, 0,
	145, 306, 146, 147, 383, 148, 0, 149, 150, 0,
	151, 254, 411, 152, 153, 0, 154, 442, 155, 0,
	156, 158, 208, 157, 417, 0, 0, 159, 160, 0,
	256, 443, 0, 0, 255, 418, 419, 392, 161, 162,
	1565, 164, 0, 0, 165, 166, 412, 0, 167, 168,
	169, 213, 444, 0, 170, 0, 0, 0, 0, 171,
	172, 173, 174, 398, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 366, 367, 90, 91, 0, 92, 368,
	0, 0, 375, 0, 0, 0, 0, 93, 94, 175,
	176, 177, 95, 178, 179, 0, 96, 180, 97, 0,
	413, 181, 182, 0, 423, 0, 406, 0, 98, 99,
	100, 0, 101, 0, 102, 0, 296, 103, 104, 0,
	407, 409, 0, 408, 410, 105, 106, 107, 108, 184,
	109, 185, 186, 0, 0, 110, 0, 0, 0, 111,
	112, 0, 0, 0, 0, 187, 113, 414, 0, 0,
	114, 115, 189, 116, 0, 0, 0, 297, 0, 117,
	424, 0, 191, 0, 118, 420, 422, 0, 0, 0,
	298, 119, 194, 195, 196, 0, 197, 0, 299, 120,
	300, 121, 0, 0, 425, 301, 122, 302, 0, 252,
	0, 0, 0, 123, 124, 125, 126, 253, 303, 127,
	128, 0, 129, 0, 421, 130, 200, 131, 132, 0,
	0, 0, 0, 0, 133, 201, 304, 134, 305, 415,
	135, 136, 0, 416, 137, 204, 0, 138, 139, 205,
	140, 141, 0, 142, 143, 144, 0, 145, 306, 146,
	147, 206, 148, 0, 149, 150, 0, 151, 254, 411,
	152, 153, 307, 154, 207, 155, 0, 156, 158, 208,
	157, 417, 0, 0, 159, 160, 0, 256, 210, 0,
	0, 255, 418, 419, 0, 161, 162, 163, 164, 0,
	0, 165, 166, 412, 0, 167, 168, 169, 213, 214,
	0, 170, 0, 0, 0, 0, 171, 172, 173, 174,
	290, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 90, 91, 0, 92, 0, 0, 0, 1361,
	0, 0, 0, 0, 93, 94, 175, 176, 177, 95,
	178, 179, 0, 96, 180, 97, 0, 0, 181, 182,
	0, 183, 0, 295, 0, 98, 99, 100, 0, 101,
	0, 102, 0, 296, 103, 104, 0, 0, 0, 0,
	0, 0, 105, 106, 107, 108, 184, 109, 185, 186,
	0, 0, 110, 0, 0, 0, 111, 112, 0, 0,
	0, 0, 187, 113, 188, 0, 0, 114, 115, 189,
	116, 0, 0, 0, 297, 0, 117, 190, 0, 191,
	0, 118, 192, 193, 0, 0, 0, 298, 119, 194,
	195, 196, 0, 197, 0, 299, 120, 300, 121, 0,
	0, 198, 301, 122, 302, 0, 252, 0, 0, 0,
	123, 124, 125, 126, 253, 303, 127, 128, 0, 129,
	0, 199, 130, 200, 131, 132, 0, 0, 0, 0,
	0, 133, 201, 304, 134, 305, 202, 135, 136, 0,
	203, 137, 204, 0, 138, 139, 205, 140, 141, 0,
	142, 143, 144, 0, 145, 306, 146, 147, 206, 148,
	0, 149, 150, 44, 151, 254, 0, 152, 153, 307,
	154, 207, 155, 0, 156, 158, 208, 157, 209, 0,
	46, 159, 160, 0, 256, 210, 0, 0, 255, 211,
	212, 0, 161, 162, 163, 164, 0, 0, 165, 166,
	0, 0, 167, 168, 169, 294, 214, 0, 170, 0,
	0, 0, 42, 171, 172, 173, 174, 0, 43, 290,
	509, 513, 0, 514, 504, 0, 0, 0, 0, 0,
	0, 90, 91, 0, 92, 0, 41, 0, 0, 0,
	0, 0, 0, 93, 94, 175, 176, 177, 95, 178,
	179, 0, 96, 180, 97, 0, 0, 181, 182, 0,
	183, 0, 295, 0, 98, 99, 100, 0, 101, 0,
	102, 0, 296, 103, 104, 0, 0, 0, 0, 0,
	0, 105, 106, 107, 108, 184, 109, 185, 186, 517,
	0, 110, 0, 0, 0, 111, 112, 0, 0, 0,
	0, 187, 113, 188, 506, 0, 114, 115, 189, 116,
	0, 0, 0, 297, 0, 117, 190, 0, 191, 0,
	118, 192, 193, 0, 0, 0, 298, 119, 194, 195,
	196, 0, 197, 0, 299, 120, 300, 121, 0, 0,
	198, 301, 122, 302, 0, 252, 0, 0, 0, 123,
	124, 125, 126, 253, 303, 127, 128, 0, 129, 0,
	199, 130, 200, 131, 132, 0, 507, 0, 0, 0,
	133, 201, 304, 134, 305, 202, 135, 136, 0, 203,
	137, 204, 0, 138, 139, 205, 140, 141, 0, 142,
	143, 144, 0, 145, 306, 146, 147, 206, 148, 0,
	149, 150, 0, 151, 254, 0, 152, 153, 307, 154,
	207, 155, 0, 156, 158, 208, 157, 209, 0, 0,
	159, 160, 0, 256, 210, 0, 0, 255, 211, 212,
	505, 161, 162, 163, 164, 0, 0, 165, 166, 0,
	0, 167, 168, 169, 213, 214, 0, 170, 0, 0,
	0, 0, 171, 172, 173, 174, 290, 509, 513, 0,
	514, 504, 0, 0, 0, 0, 515, 510, 90, 91,
	0, 92, 0, 0, 0, 0, 0, 0, 0, 0,
	93, 94, 175, 176, 177, 95, 178, 179, 0, 96,
	180, 97, 0, 0, 181, 182, 0, 183, 0, 295,
	0, 98, 99, 100, 0, 101, 0, 102, 0, 296,
	103, 104, 0, 0, 0, 0, 0, 0, 105, 106,
	107, 108, 184, 109, 185, 186, 500, 0, 110, 0,
	0, 0, 111, 112, 0, 0, 0, 0, 187, 113,
	188, 506, 0, 114, 115, 189, 116, 0, 0, 0,
	297, 0, 117, 190, 0, 191, 0, 118, 192, 193,
	0, 0, 0, 298, 119, 194, 195, 196, 0, 197,
	0, 299, 120, 300, 121, 0, 0, 198, 301, 122,
	302, 0, 252, 0, 0, 0, 123, 124, 125, 126,
	253, 303, 127, 128, 0, 129, 0, 199, 130, 200,
	131, 132, 0, 507, 0, 0, 0, 133, 201, 304,
	134, 305, 202, 135, 136, 0, 203, 137, 204, 0,
	138, 139, 205, 140, 141, 0, 142, 143, 144, 0,
	145, 306, 146, 147, 206, 148, 0, 149, 150, 0,
	151, 254, 0, 152, 153, 307, 154, 207, 155, 0,
	156, 158, 208, 157, 209, 0, 0, 159, 160, 0,
	256, 210, 0, 0, 255, 211, 212, 505, 161, 162,
	163, 164, 0, 0, 165, 166, 0, 0, 167, 168,
	169, 213, 214, 0, 170, 0, 0, 0, 0, 171,
	172, 173, 174, 290, 509, 513, 0, 514, 504, 0,
	0, 0, 0, 515, 510, 90, 91, 0, 92, 0,
	0, 0, 0, 0, 0, 0, 0, 93, 94, 175,
	176, 177, 95, 178, 179, 0, 96, 180, 97, 0,
	0, 181, 182, 0, 183, 0, 295, 0, 98, 99,
	100, 0, 101, 0, 102, 0, 296, 103, 104, 0,
	0, 0, 0, 0, 0, 105, 106, 107, 108, 184,
	109, 185, 186, 0, 0, 110, 0, 0, 0, 111,
	112, 0, 0, 0, 0, 187, 113, 188, 506, 0,
	114, 115, 189, 116, 0, 0, 0, 297, 0, 117,
	190, 0, 191, 0, 118, 192, 193, 0, 0, 0,
	298, 119, 194, 195, 196, 0, 197, 0, 299, 120,
	300, 121, 0, 0, 198, 301, 122, 302, 0, 252,
	0, 0, 0, 123, 124, 125, 126, 253, 303, 127,
	128, 0, 129, 0, 199, 130, 200, 131, 132, 0,
	507, 0, 0, 0, 133, 201, 304, 134, 305, 202,
	135, 136, 0, 203, 137, 204, 0, 138, 139, 205,
	140, 141, 0, 142, 143, 144, 0, 145, 306, 146,
	147, 206, 148, 0, 149, 150, 0, 151, 254, 0,
	152, 153, 307, 154, 207, 155, 0, 156, 158, 208,
	157, 209, 0, 0, 159, 160, 0, 256, 210, 0,
	0, 255, 211, 212, 505, 161, 162, 163, 164, 0,
	0, 165, 166, 0, 0, 167, 168, 169, 213, 214,
	87, 170, 0, 0, 0, 0, 171, 172, 173, 174,
	0, 0, 90, 91, 0, 92, 0, 0, 0, 0,
	515, 510, 0, 0, 93, 94, 175, 176, 177, 95,
	178, 179, 0, 96, 180, 97, 0, 0, 181, 182,
	0, 183, 0, 0, 0, 98, 99, 100, 0, 101,
	0, 102, 0, 0, 103, 104, 0, 0, 0, 0,
	0, 0, 105, 106, 107, 108, 184, 109, 185, 186,
	0, 0, 110, 0, 0, 0, 111, 112, 0, 0,
	0, 0, 187, 113, 188, 0, 0, 114, 115, 189,
	116, 0, 0, 0, 0, 0, 117, 190, 0, 191,
	0, 118, 192, 193, 0, 0, 0, 0, 119, 194,
	195, 196, 0, 197, 0, 0, 120, 0, 121, 0,
	0, 198, 0, 122, 0, 0, 252, 0, 0, 0,
	123, 124, 125, 126, 253, 0, 127, 128, 0, 129,
	0, 199, 130, 200, 131, 132, 0, 0, 265, 0,
	0, 133, 201, 0, 134, 0, 202, 135, 136, 0,
	203, 137, 204, 0, 138, 139, 205, 140, 141, 0,
	142, 143, 144, 0, 145, 0, 146, 147, 206, 148,
	0, 149, 150, 44, 151, 254, 0, 152, 153, 0,
	154, 207, 155, 0, 156, 158, 208, 157, 209, 0,
	46, 159, 160, 0, 256, 210, 0, 0, 255, 211,
	212, 0, 161, 162, 163, 164, 0, 0, 165, 166,
	0, 0, 167, 168, 169, 294, 214, 0, 170, 0,
	0, 0, 42, 171, 172, 173, 174, 87, 43, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 90,
	91, 0, 92, 0, 0, 0, 831, 0, 0, 0,
	0, 93, 94, 175, 176, 177, 95, 178, 179, 0,
	96, 180, 97, 0, 0, 181, 182, 0, 183, 0,
	0, 0, 98, 99, 100, 0, 101, 0, 102, 0,
	0, 103, 104, 0, 0, 0, 0, 0, 0, 105,
	106, 107, 108, 184, 109, 185, 186, 0, 0, 110,
	0, 0, 0, 111, 112, 0, 0, 0, 0, 187,
	113, 188, 0, 0, 114, 115, 189, 116, 0, 0,
	0, 0, 0, 117, 190, 0, 191, 0, 118, 192,
	193, 0, 0, 0, 0, 119, 194, 195, 196, 0,
	197, 0, 0, 120, 0, 121, 0, 0, 198, 0,
	122, 0, 0, 252, 0, 0, 0, 123, 124, 125,
	126, 253, 0, 127, 128, 0, 129, 0, 199, 130,
	200, 131, 132, 0, 0, 0, 0, 0, 133, 201,
	0, 134, 0, 202, 135, 136, 0, 203, 137, 204,
	0, 138, 139, 205, 140, 141, 0, 142, 143, 144,
	0, 145, 0, 146, 147, 206, 148, 0, 149, 150,
	44, 151, 254, 0, 152, 153, 0, 154, 207, 155,
	0, 156, 158, 208, 157, 209, 0, 46, 159, 160,
	0, 256, 210, 0, 0, 255, 211, 212, 0, 161,
	162, 163, 164, 0, 0, 165, 166, 0, 0, 167,
	168, 169, 294, 214, 0, 170, 0, 0, 0, 42,
	171, 172, 173, 174, 87, 43, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 90, 91, 0, 92,
	0, 0, 0, 41, 0, 1063, 0, 0, 93, 94,
	175, 176, 177, 95, 178, 179, 0, 96, 180, 97,
	0, 0, 181, 182, 0, 183, 0, 0, 0, 98,
	99, 100, 0, 101, 0, 102, 0, 0, 103, 104,
	0, 0, 0, 0, 0, 0, 105, 106, 107, 108,
	184, 109, 185, 186, 0, 0, 110, 0, 0, 0,
	111, 112, 0, 0, 0, 0, 187, 113, 188, 0,
	0, 114, 115, 189, 116, 0, 0, 0, 0, 0,
	117, 190, 0, 191, 0, 118, 192, 193, 0, 0,
	0, 0, 119, 194, 195, 196, 0, 197, 0, 0,
	120, 0, 121, 0, 0, 198, 0, 122, 0, 0,
	252, 0, 0, 0, 123, 124, 125, 126, 253, 0,
	127, 128, 0, 129, 0, 199, 130, 200, 131, 132,
	0, 0, 0, 0, 0, 133, 201, 0, 134, 0,
	202, 135, 136, 0, 203, 137, 204, 0, 138, 139,
	205, 140, 141, 0, 142, 143, 144, 0, 145, 0,
	146, 147, 206, 148, 0, 149, 150, 0, 151, 254,
	0, 152, 153, 0, 154, 207, 155, 0, 156, 158,
	208, 157, 209, 0, 0, 159, 160, 0, 256, 210,
	0, 0, 255, 211, 212, 0, 161, 162, 163, 164,
	0, 87, 165, 166, 0, 0, 167, 168, 169, 213,
	214, 0, 170, 90, 91, 0, 92, 171, 172, 173,
	174, 0, 0, 0, 0, 93, 94, 175, 176, 177,
	95, 178, 179, 0, 96, 180, 97, 0, 0, 181,
	182, 355, 183, 0, 0, 0, 98, 99, 100, 0,
	101, 0, 102, 0, 0, 103, 104, 0, 0, 0,
	0, 0, 0, 105, 106, 107, 108, 184, 109, 185,
	186, 0, 0, 110, 0, 0, 0, 111, 112, 0,
	0, 0, 0, 187, 113, 188, 0, 0, 114, 115,
	189, 116, 0, 0, 0, 0, 0, 117, 190, 0,
	191, 0, 118, 192, 193, 0, 0, 0, 0, 119,
	194, 195, 196, 0, 197, 0, 0, 120, 0, 121,
	0, 0, 198, 0, 122, 0, 0, 252, 0, 0,
	0, 123, 124, 125, 126, 253, 0, 127, 128, 0,
	129, 0, 199, 130, 200, 131, 132, 0, 0, 265,
	0, 0, 133, 201, 0, 134, 0, 202, 135, 136,
	0, 203, 137, 204, 0, 138, 139, 205, 140, 141,
	0, 142, 143, 144, 0, 145, 0, 146, 147, 206,
	148, 0, 149, 150, 0, 151, 254, 0, 152, 153,
	0, 154, 207, 155, 0, 156, 158, 208, 157, 209,
	0, 0, 159, 160, 0, 256, 210, 0, 0, 255,
	211, 212, 0, 161, 162, 163, 164, 0, 0, 165,
	166, 0, 0, 167, 168, 169, 213, 214, 0, 170,
	0, 0, 0, 0, 171, 172, 173, 174, 87, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	90, 91, 0, 92, 0, 0, 0, 831, 0, 0,
	0, 0, 93, 94, 175, 176, 177, 95, 178, 179,
	0, 96, 180, 97, 0, 0, 181, 182, 0, 183,
	0, 0, 0, 98, 99, 100, 0, 101, 0, 102,
	0, 0, 103, 104, 0, 0, 0, 0, 0, 0,
	105, 106, 107, 108, 184, 109, 185, 186, 0, 0,
	110, 0, 0, 0, 111, 112, 0, 0, 0, 0,
	187, 113, 188, 0, 0, 114, 115, 189, 116, 0,
	0, 0, 0, 0, 117, 190, 0, 191, 0, 118,
	192, 193, 0, 0, 0, 0, 119, 194, 195, 196,
	0, 197, 0, 0, 120, 0, 121, 0, 0, 198,
	0, 122, 0, 0, 252, 0, 0, 0, 123, 124,
	125, 126, 253, 0, 127, 128, 0, 129, 0, 199,
	130, 200, 131, 132, 0, 0, 0, 0, 0, 133,
	201, 0, 134, 0, 202, 135, 136, 0, 203, 137,
	204, 0, 138, 139, 205, 140, 141, 0, 142, 143,
	144, 0, 145, 0, 146, 147, 206, 148, 0, 149,
	150, 0, 151, 254, 0, 152, 153, 0, 154, 207,
	155, 0, 156, 158, 208, 157, 209, 0, 0, 159,
	160, 0, 256, 210, 0, 0, 255, 211, 212, 0,
	161, 162, 163, 164, 0, 0, 165, 166, 0, 0,
	167, 168, 169, 213, 214, 0, 170, 0, 0, 0,
	0, 171, 172, 173, 174, 87, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 90, 91, 0,
	92, 0, 0, 0, 776, 0, 0, 0, 0, 93,
	94, 175, 176, 177, 95, 178, 179, 0, 96, 180,
	97, 0, 0, 181, 182, 0, 183, 0, 0, 0,
	98, 99, 100, 0, 101, 0, 102, 0, 0, 103,
	104, 0, 0, 0, 0, 0, 0, 105, 106, 107,
	108, 184, 109, 185, 186, 0, 0, 110, 0, 0,
	0, 111, 112, 0, 0, 0, 0, 187, 113, 188,
	0, 0, 114, 115, 189, 116, 0, 0, 0, 0,
	0, 117, 190, 0, 191, 0, 118, 192, 193, 0,
	0, 0, 0, 119, 194, 195, 196, 0, 197, 0,
	0, 120, 0, 121, 0, 0, 198, 0, 122, 0,
	0, 252, 0, 0, 0, 123, 124, 125, 126, 253,
	0, 127, 128, 0, 129, 0, 199, 130, 200, 131,
	132, 0, 0, 0, 0, 0, 133, 201, 0, 134,
	0, 202, 135, 136, 0, 203, 137, 204, 0, 138,
	139, 205, 140, 141, 0, 142, 143, 144, 0, 145,
	0, 146, 147, 206, 148, 0, 149, 150, 0, 151,
	254, 0, 152, 153, 0, 154, 207, 155, 0, 156,
	158, 208, 157, 209, 0, 0, 159, 160, 0, 256,
	210, 0, 0, 255, 211, 212, 0, 161, 162, 163,
	164, 0, 0, 165, 166, 0, 0, 167, 168, 169,
	213, 214, 0, 170, 0, 0, 0, 0, 171, 172,
	173, 174, 87, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 90, 91, 0, 92, 0, 0,
	0, 1271, 0, 0, 0, 0, 93, 94, 175, 176,
	177, 95, 178, 179, 0, 96, 180, 97, 0, 0,
	181, 182, 0, 183, 0, 0, 0, 98, 99, 100,
	0, 101, 0, 102, 0, 0, 103, 104, 0, 0,
	0, 0, 0, 0, 105, 106, 107, 108, 184, 109,
	185, 186, 0, 0, 110, 0, 0, 0, 111, 112,
	0, 0, 0, 0, 187, 113, 188, 0, 0, 114,
	115, 189, 116, 0, 0, 0, 0, 0, 117, 190,
	0, 191, 0, 118, 192, 193, 0, 0, 0, 0,
	119, 194, 195, 196, 0, 197, 0, 0, 120, 0,
	121, 0, 0, 198, 0, 122, 0, 0, 252, 0,
	0, 0, 123, 124, 125, 126, 253, 0, 127, 128,
	0, 129, 0, 199, 130, 200, 131, 132, 0, 0,
	0, 0, 0, 133, 201, 0, 134, 0, 202, 135,
	136, 0, 203, 137, 204, 0, 138, 139, 205, 140,
	141, 0, 142, 143, 144, 0, 145, 0, 146, 147,
	206, 148, 0, 149, 150, 0, 151, 254, 0, 152,
	153, 0, 154, 207, 155, 0, 156, 158, 208, 157,
	209, 0, 0, 159, 160, 0, 256, 210, 0, 0,
	255, 211, 212, 0, 161, 162, 163, 164, 0, 0,
	165, 166, 0, 0, 167, 168, 169, 213, 214, 0,
	170, 0, 0, 0, 0, 171, 172, 173, 174, 290,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 90, 91, 0, 92, 0, 0, 0, 455, 0,
	0, 0, 0, 93, 94, 175, 176, 177, 95, 178,
	179, 0, 96, 180, 97, 0, 0, 181, 182, 0,
	183, 0, 295, 0, 98, 99, 100, 0, 101, 0,
	102, 0, 296, 103, 104, 0, 0, 0, 0, 0,
	0, 105, 106, 107, 108, 184, 109, 185, 186, 0,
	0, 110, 0, 0, 0, 111, 112, 0, 0, 0,
	0, 187, 113, 188, 0, 0, 114, 115, 189, 116,
	0, 0, 0, 297, 0, 117, 190, 0, 191, 0,
	118, 192, 193, 0, 0, 0, 298, 119, 194, 195,
	196, 0, 197, 0, 299, 120, 300, 121, 0, 0,
	198, 301, 122, 302, 0, 252, 0, 0, 0, 123,
	124, 125, 126, 253, 303, 127, 128, 0, 129, 0,
	199, 130, 200, 131, 132, 0, 0, 0, 0, 0,
	133, 201, 304, 134, 305, 202, 135, 136, 0, 203,
	137, 204, 0, 138, 139, 205, 140, 141, 0, 142,
	143, 144, 0, 145, 306, 146, 147, 206, 148, 0,
	149, 150, 0, 151, 254, 0, 152, 153, 307, 154,
	207, 155, 0, 156, 158, 208, 157, 209, 0, 0,
	159, 160, 0, 256, 210, 0, 0, 255, 211, 212,
	0, 161, 162, 163, 164, 0, 87, 165, 166, 0,
	0, 167, 168, 169, 213, 214, 0, 170, 90, 91,
	0, 92, 171, 172, 173, 174, 0, 0, 0, 0,
	93, 94, 175, 176, 177, 95, 178, 179, 0, 96,
	180, 97, 0, 0, 181, 182, 751, 183, 0, 0,
	0, 98, 99, 100, 0, 101, 749, 102, 0, 0,
	103, 104, 0, 0, 0, 0, 0, 0, 105, 106,
	107, 108, 184, 109, 185, 186, 0, 0, 110, 0,
	0, 0, 111, 112, 0, 0, 0, 0, 187, 113,
	188, 0, 0, 114, 115, 189, 116, 0, 754, 0,
	0, 0, 117, 190, 0, 191, 0, 118, 192, 193,
	0, 809, 0, 0, 119, 194, 195, 196, 0, 197,
	0, 0, 120, 0, 121, 0, 0, 198, 0, 122,
	0, 0, 252, 0, 0, 0, 123, 124, 125, 126,
	253, 0, 127, 128, 0, 129, 0, 199, 130, 200,
	131, 132, 0, 0, 0, 0, 0, 133, 201, 0,
	134, 0, 202, 135, 136, 0, 203, 137, 204, 753,
	138, 139, 205, 140, 141, 0, 142, 143, 144, 0,
	145, 0, 146, 147, 206, 148, 0, 149, 150, 0,
	151, 254, 0, 152, 153, 0, 154, 207, 155, 0,
	156, 158, 208, 157, 209, 0, 0, 159, 160, 0,
	256, 210, 0, 0, 255, 211, 212, 0, 161, 162,
	163, 164, 0, 810, 165, 166, 0, 0, 167, 168,
	169, 213, 214, 87, 170, 0, 0, 0, 0, 171,
	172, 173, 174, 0, 0, 90, 91, 0, 92, 0,
	0, 0, 0, 0, 0, 0, 0, 93, 94, 175,
	176, 177, 95, 178, 179, 0, 96, 180, 97, 0,
	0, 181, 182, 751, 183, 0, 0, 746, 98, 99,
	100, 0, 101, 749, 102, 0, 0, 103, 104, 0,
	0, 0, 0, 0, 0, 105, 106, 107, 108, 184,
	109, 185, 186, 0, 0, 110, 0, 0, 0, 111,
	112, 0, 0, 0, 0, 187, 113, 188, 0, 0,
	114, 115, 189, 116, 0, 754, 0, 0, 0, 117,
	190, 0, 191, 0, 118, 745, 193, 0, 0, 0,
	0, 119, 194, 195, 196, 0, 197, 0, 0, 120,
	0, 121, 0, 0, 198, 0, 122, 0, 0, 252,
	0, 0, 0, 123, 124, 125, 126, 253, 0, 127,
	128, 0, 129, 0, 199, 130, 200, 131, 132, 0,
	0, 0, 0, 0, 133, 201, 0, 134, 0, 202,
	135, 136, 0, 203, 137, 204, 753, 138, 139, 205,
	140, 141, 0, 142, 143, 144, 0, 145, 0, 146,
	147, 206, 148, 0, 149, 150, 0, 151, 254, 0,
	152, 153, 0, 154, 207, 155, 0, 156, 158, 208,
	157, 209, 0, 0, 159, 160, 0, 256, 210, 0,
	0, 255, 211, 212, 0, 161, 162, 163, 164, 0,
	752, 165, 166, 0, 0, 167, 168, 169, 213, 214,
	87, 170, 0, 0, 0, 0, 171, 172, 173, 174,
	0, 0, 90, 91, 0, 92, 0, 0, 0, 0,
	0, 1063, 0, 0, 93, 94, 175, 176, 177, 95,
	178, 179, 0, 96, 180, 97, 0, 0, 181, 182,
	0, 183, 0, 0, 0, 98, 99, 100, 0, 101,
	0, 102, 0, 0, 103, 104, 0, 0, 0, 0,
	0, 0, 105, 106, 107, 108, 184, 109, 185, 186,
	0, 0, 110, 0, 0, 0, 111, 112, 0, 0,
	0, 0, 187, 113, 188, 0, 0, 114, 115, 189,
	116, 0, 0, 0, 0, 0, 117, 190, 0, 191,
	0, 118, 192, 193, 0, 0, 0, 0, 119, 194,
	195, 196, 0, 197, 0, 0, 120, 0, 121, 0,
	0, 198, 0, 122, 0, 0, 252, 0, 0, 0,
	123, 124, 125, 126, 253, 0, 127, 128, 0, 129,
	0, 199, 130, 200, 131, 132, 0, 0, 0, 0,
	0, 133, 201, 0, 134, 0, 202, 135, 136, 0,
	203, 137, 204, 0, 138, 139, 205, 140, 141, 0,
	142, 143, 144, 0, 145, 0, 146, 147, 206, 148,
	0, 149, 150, 0, 151, 254, 0, 152, 153, 0,
	154, 207, 155, 0, 156, 158, 208, 157, 209, 0,
	0, 159, 160, 0, 256, 210, 0, 0, 255, 211,
	212, 0, 161, 162, 163, 164, 0, 87, 165, 166,
	0, 0, 167, 168, 169, 213, 214, 0, 170, 90,
	91, 0, 92, 171, 172, 173, 174, 0, 0, 0,
	0, 93, 94, 175, 176, 177, 95, 178, 179, 0,
	96, 180, 97, 0, 0, 181, 182, 0, 183, 0,
	0, 0, 98, 99, 100, 0, 101, 0, 102, 0,
	0, 103, 104, 0, 0, 0, 0, 0, 0, 105,
	106, 107, 108, 184, 109, 185, 186, 0, 0, 110,
	0, 0, 0, 111, 112, 0, 0, 0, 0, 187,
	113, 188, 0, 0, 114, 115, 189, 116, 0, 0,
	0, 0, 0, 117, 190, 0, 191, 0, 118, 192,
	193, 0, 0, 0, 0, 119, 194, 195, 196, 0,
	197, 0, 0, 120, 0, 121, 0, 0, 198, 0,
	122, 0, 0, 252, 0, 0, 0, 123, 124, 125,
	126, 253, 0, 127, 128, 0, 129, 0, 199, 130,
	200, 131, 132, 0, 0, 265, 0, 0, 133, 201,
	0, 134, 0, 202, 135, 136, 0, 203, 137, 204,
	0, 138, 139, 205, 140, 141, 0, 142, 143, 144,
	0, 145, 0, 146, 147, 206, 148, 0, 149, 150,
	0, 151, 254, 0, 152, 153, 0, 154, 207, 155,
	0, 156, 158, 208, 157, 209, 0, 0, 159, 160,
	0, 256, 210, 0, 0, 255, 211, 212, 0, 161,
	162, 163, 164, 0, 87, 165, 166, 0, 0, 167,
	168, 169, 213, 214, 0, 170, 90, 91, 0, 92,
	171, 172, 173, 174, 0, 0, 0, 0, 93, 94,
	175, 176, 177, 95, 178, 179, 0, 96, 180, 97,
	0, 0, 181, 182, 0, 183, 0, 0, 0, 98,
	99, 100, 0, 101, 0, 102, 0, 0, 103, 104,
	0, 0, 0, 0, 0, 0, 105, 106, 495, 108,
	184, 109, 185, 186, 0, 0, 110, 0, 0, 0,
	111, 112, 0, 0, 0, 0, 187, 113, 188, 0,
	0, 114, 115, 189, 116, 0, 0, 0, 0, 0,
	117, 190, 0, 191, 0, 118, 192, 193, 0, 0,
	0, 0, 119, 194, 195, 196, 0, 197, 0, 0,
	120, 0, 121, 0, 0, 198, 0, 122, 0, 0,
	252, 0, 0, 0, 123, 124, 125, 126, 253, 0,
	127, 128, 0, 129, 0, 199, 130, 200, 131, 132,
	0, 0, 0, 0, 0, 133, 201, 0, 134, 0,
	202, 135, 136, 0, 203, 137, 204, 0, 138, 139,
	205, 140, 141, 0, 142, 143, 144, 0, 145, 0,
	146, 147, 206, 148, 0, 149, 150, 0, 151, 254,
	0, 152, 153, 0, 154, 207, 155, 0, 156, 158,
	208, 157, 209, 0, 494, 159, 160, 0, 256, 210,
	0, 0, 255, 211, 212, 0, 161, 162, 163, 164,
	0, 87, 165, 166, 0, 0, 167, 168, 169, 213,
	214, 0, 170, 90, 91, 0, 92, 171, 172, 173,
	174, 0, 0, 0, 0, 93, 94, 175, 176, 177,
	95, 178, 179, 0, 96, 180, 97, 0, 0, 181,
	182, 0, 183, 0, 0, 0, 98, 99, 100, 0,
	101, 0, 102, 0, 0, 103, 104, 0, 0, 0,
	0, 0, 0, 105, 106, 107, 108, 184, 109, 185,
	186, 0, 0, 110, 0, 0, 0, 111, 112, 0,
	0, 0, 0, 187, 113, 188, 0, 0, 114, 115,
	189, 116, 0, 0, 0, 0, 0, 117, 190, 0,
	191, 0, 118, 271, 193, 0, 0, 0, 0, 119,
	194, 195, 196, 0, 197, 0, 0, 120, 0, 121,
	0, 0, 198, 0, 122, 0, 0, 252, 0, 0,
	0, 123, 124, 125, 126, 253, 0, 127, 128, 0,
	129, 0, 199, 130, 200, 131, 132, 0, 0, 265,
	0, 0, 133, 201, 0, 134, 0, 202, 135, 136,
	0, 203, 137, 204, 0, 138, 139, 205, 140, 141,
	0, 142, 143, 144, 0, 145, 0, 146, 147, 206,
	148, 0, 149, 150, 0, 151, 254, 0, 152, 153,
	0, 154, 207, 155, 0, 156, 158, 208, 157, 209,
	0, 0, 159, 160, 0, 256, 210, 0, 0, 255,
	211, 212, 0, 161, 162, 163, 164, 0, 87, 165,
	166, 0, 0, 167, 168, 169, 213, 214, 0, 170,
	90, 91, 0, 92, 171, 172, 173, 174, 0, 0,
	0, 0, 93, 94, 175, 176, 177, 95, 178, 179,
	0, 96, 180, 97, 0, 0, 181, 182, 0, 183,
	0, 0, 0, 98, 99, 100, 0, 101, 0, 102,
	0, 0, 103, 104, 0, 0, 0, 0, 0, 0,
	105, 106, 107, 108, 184, 109, 185, 186, 0, 0,
	110, 0, 0, 0, 111, 112, 0, 0, 0, 0,
	187, 113, 188, 0, 0, 114, 115, 189, 116, 0,
	0, 0, 0, 0, 117, 190, 0, 191, 0, 118,
	192, 193, 0, 0, 0, 0, 119, 194, 195, 196,
	0, 197, 0, 0, 120, 0, 121, 0, 0, 198,
	0, 122, 0, 0, 252, 0, 0, 0, 123, 124,
	125, 126, 253, 0, 127, 128, 0, 129, 0, 199,
	130, 200, 131, 132, 0, 0, 0, 0, 0, 133,
	201, 0, 134, 0, 202, 135, 136, 0, 203, 137,
	204, 0, 138, 139, 205, 140, 141, 0, 142, 143,
	144, 0, 145, 0, 146, 147, 206, 148, 0, 149,
	150, 0, 151, 254, 0, 152, 153, 0, 154, 207,
	155, 0, 156, 158, 208, 157, 209, 0, 0, 159,
	160, 0, 256, 210, 0, 0, 255, 211, 212, 0,
	161, 162, 163, 164, 0, 87, 165, 166, 0, 0,
	167, 168, 169, 213, 214, 0, 170, 90, 91, 0,
	92, 171, 172, 173, 174, 0, 0, 0, 0, 93,
	94, 175, 176, 177, 95, 178, 179, 0, 96, 180,
	97, 0, 0, 181, 182, 0, 183, 0, 0, 0,
	98, 99, 100, 0, 101, 0, 102, 0, 0, 103,
	104, 0, 0, 0, 0, 0, 0, 105, 106, 107,
	108, 184, 109, 185, 186, 0, 0, 110, 0, 0,
	0, 111, 112, 0, 0, 0, 0, 187, 113, 188,
	0, 0, 114, 115, 189, 116, 0, 0, 0, 0,
	0, 117, 190, 0, 191, 0, 118, 1008, 193, 0,
	0, 0, 0, 119, 194, 195, 196, 0, 197, 0,
	0, 120, 0, 121, 0, 0, 198, 0, 122, 0,
	0, 252, 0, 0, 0, 123, 124, 125, 126, 253,
	0, 127, 128, 0, 129, 0, 199, 130, 200, 131,
	132, 0, 0, 0, 0, 0, 133, 201, 0, 134,
	0, 202, 135, 136, 0, 203, 137, 204, 0, 138,
	139, 205, 140, 141, 0, 142, 143, 144, 0, 145,
	0, 146, 147, 206, 148, 0, 149, 150, 0, 151,
	254, 0, 152, 153, 0, 154, 207, 155, 0, 156,
	158, 208, 157, 209, 0, 0, 159, 160, 0, 256,
	210, 0, 0, 255, 211, 212, 0, 161, 162, 163,
	164, 0, 87, 165, 166, 0, 0, 167, 168, 169,
	213, 214, 0, 170, 90, 91, 0, 92, 171, 172,
	173, 174, 0, 0, 0, 0, 93, 94, 175, 176,
	177, 95, 178, 179, 0, 96, 180, 97, 0, 0,
	181, 182, 0, 183, 0, 0, 0, 98, 99, 100,
	0, 101, 0, 102, 0, 0, 103, 104, 0, 0,
	0, 0, 0, 0, 105, 106, 107, 108, 184, 109,
	185, 186, 0, 0, 110, 0, 0, 0, 111, 112,
	0, 0, 0, 0, 187, 113, 188, 0, 0, 114,
	115, 189, 116, 0, 0, 0, 0, 0, 117, 190,
	0, 191, 0, 118, 1006, 193, 0, 0, 0, 0,
	119, 194, 195, 196, 0, 197, 0, 0, 120, 0,
	121, 0, 0, 198, 0, 122, 0, 0, 252, 0,
	0, 0, 123, 124, 125, 126, 253, 0, 127, 128,
	0, 129, 0, 199, 130, 200, 131, 132, 0, 0,
	0, 0, 0, 133, 201, 0, 134, 0, 202, 135,
	136, 0, 203, 137, 204, 0, 138, 139, 205, 140,
	141, 0, 142, 143, 144, 0, 145, 0, 146, 147,
	206, 148, 0, 149, 150, 0, 151, 254, 0, 152,
	153, 0, 154, 207, 155, 0, 156, 158, 208, 157,
	209, 0, 0, 159, 160, 0, 256, 210, 0, 0,
	255, 211, 212, 0, 161, 162, 163, 164, 0, 87,
	165, 166, 0, 0, 167, 168, 169, 213, 214, 0,
	170, 90, 91, 0, 92, 171, 172, 173, 174, 0,
	0, 0, 0, 93, 94, 175, 176, 177, 95, 178,
	179, 0, 96, 180, 97, 0, 0, 181, 182, 0,
	183, 0, 0, 0, 98, 99, 100, 0, 101, 0,
	102, 0, 0, 103, 104, 0, 0, 0, 0, 0,
	0, 105, 106, 107, 108, 184, 109, 185, 186, 0,
	0, 110, 0, 0, 0, 111, 112, 0, 0, 0,
	0, 187, 113, 188, 0, 0, 114, 115, 189, 116,
	0, 0, 0, 0, 0, 117, 190, 0, 191, 0,
	118, 997, 193, 0, 0, 0, 0, 119, 194, 195,
	196, 0, 197, 0, 0, 120, 0, 121, 0, 0,
	198, 0, 122, 0, 0, 252, 0, 0, 0, 123,
	124, 125, 126, 253, 0, 127, 128, 0, 129, 0,
	199, 130, 200, 131, 132, 0, 0, 0, 0, 0,
	133, 201, 0, 134, 0, 202, 135, 136, 0, 203,
	137, 204, 0, 138, 139, 205, 140, 141, 0, 142,
	143, 144, 0, 145, 0, 146, 147, 206, 148, 0,
	149, 150, 0, 151, 254, 0, 152, 153, 0, 154,
	207, 155, 0, 156, 158, 208, 157, 209, 0, 0,
	159, 160, 0, 256, 210, 0, 0, 255, 211, 212,
	0, 161, 162, 163, 164, 0, 87, 165, 166, 0,
	0, 167, 168, 169, 213, 214, 0, 170, 90, 91,
	0, 92, 171, 172, 173, 174, 0, 0, 0, 0,
	93, 94, 175, 176, 177, 95, 178, 179, 0, 96,
	180, 97, 0, 0, 181, 182, 0, 183, 0, 0,
	0, 98, 99, 100, 0, 101, 0, 102, 0, 0,
	103, 104, 0, 0, 0, 0, 0, 0, 105, 106,
	107, 108, 184, 109, 185, 186, 0, 0, 110, 0,
	0, 0, 111, 112, 0, 0, 0, 0, 187, 113,
	188, 0, 0, 114, 115, 189, 116, 0, 0, 0,
	0, 0, 117, 190, 0, 191, 0, 118, 624, 193,
	0, 0, 0, 0, 119, 194, 195, 196, 0, 197,
	0, 0, 120, 0, 121, 0, 0, 198, 0, 122,
	0, 0, 252, 0, 0, 0, 123, 124, 125, 126,
	253, 0, 127, 128, 0, 129, 0, 199, 130, 200,
	131, 132, 0, 0, 0, 0, 0, 133, 201, 0,
	134, 0, 202, 135, 136, 0, 203, 137, 204, 0,
	138, 139, 205, 140, 141, 0, 142, 143, 144, 0,
	145, 0, 146, 147, 206, 148, 0, 149, 150, 0,
	151, 254, 0, 152, 153, 0, 154, 207, 155, 0,
	156, 158, 208, 157, 209, 0, 0, 159, 160, 0,
	256, 210, 0, 0, 255, 211, 212, 0, 161, 162,
	163, 164, 0, 87, 165, 166, 0, 0, 167, 168,
	169, 213, 214, 0, 170, 90, 91, 0, 92, 171,
	172, 173, 174, 0, 481, 0, 0, 93, 94, 175,
	176, 177, 95, 178, 179, 0, 96, 180, 97, 0,
	0, 181, 182, 0, 183, 0, 0, 0, 98, 99,
	100, 0, 101, 0, 102, 0, 0, 103, 104, 0,
	0, 0, 0, 0, 0, 105, 106, 107, 108, 184,
	109, 185, 186, 0, 0, 110, 0, 0, 0, 111,
	112, 0, 0, 0, 0, 187, 113, 188, 0, 0,
	114, 115, 189, 116, 0, 0, 0, 0, 0, 117,
	190, 0, 191, 0, 118, 192, 193, 0, 0, 0,
	0, 119, 194, 195, 196, 0, 197, 0, 0, 120,
	0, 121, 0, 0, 198, 0, 122, 0, 0, 252,
	0, 0, 0, 123, 124, 125, 126, 253, 0, 127,
	128, 0, 129, 0, 199, 130, 200, 131, 132, 0,
	0, 0, 0, 0, 133, 201, 0, 134, 0, 202,
	135, 136, 0, 203, 137, 204, 0, 138, 139, 205,
	140, 141, 0, 142, 143, 144, 0, 145, 0, 146,
	147, 206, 148, 0, 149, 150, 0, 151, 254, 0,
	0, 153, 0, 154, 207, 155, 0, 156, 158, 208,
	157, 209, 0, 0, 159, 160, 0, 256, 210, 0,
	0, 255, 211, 212, 0, 161, 162, 163, 164, 0,
	87, 165, 166, 0, 0, 167, 168, 169, 213, 214,
	0, 170, 90, 91, 0, 92, 171, 172, 173, 174,
	0, 0, 0, 0, 93, 94, 175, 176, 177, 95,
	178, 179, 0, 96, 180, 97, 0, 0, 181, 182,
	0, 183, 0, 0, 0, 98, 99, 100, 0, 101,
	0, 102, 0, 0, 103, 104, 0, 0, 0, 0,
	0, 0, 105, 106, 107, 108, 184, 109, 185, 186,
	0, 0, 110, 0, 0, 0, 111, 112, 0, 0,
	0, 0, 187, 113, 188, 0, 0, 114, 115, 189,
	116, 0, 0, 0, 0, 0, 117, 190, 0, 191,
	0, 118, 340, 193, 0, 0, 0, 0, 119, 194,
	195, 196, 0, 197, 0, 0, 120, 0, 121, 0,
	0, 198, 0, 122, 0, 0, 252, 0, 0, 0,
	123, 124, 125, 126, 253, 0, 127, 128, 0, 129,
	0, 199, 130, 200, 131, 132, 0, 0, 0, 0,
	0, 133, 201, 0, 134, 0, 202, 135, 136, 0,
	203, 137, 204, 0, 138, 139, 205, 140, 141, 0,
	142, 143, 144, 0, 145, 0, 146, 147, 206, 148,
	0, 149, 150, 0, 151, 254, 0, 152, 153, 0,
	154, 207, 155, 0, 156, 158, 208, 157, 209, 0,
	0, 159, 160, 0, 256, 210, 0, 0, 255, 211,
	212, 0, 161, 162, 163, 164, 0, 87, 165, 166,
	0, 0, 167, 168, 169, 213, 214, 0, 170, 90,
	91, 0, 92, 171, 172, 173, 174, 0, 0, 0,
	0, 93, 94, 175, 176, 177, 95, 178, 179, 0,
	96, 180, 97, 0, 0, 181, 182, 0, 183, 0,
	0, 0, 98, 99, 100, 0, 101, 0, 102, 0,
	0, 103, 104, 0, 0, 0, 0, 0, 0, 105,
	106, 107, 108, 184, 109, 185, 186, 0, 0, 110,
	0, 0, 0, 111, 112, 0, 0, 0, 0, 187,
	113, 188, 0, 0, 114, 115, 189, 116, 0, 0,
	0, 0, 0, 117, 190, 0, 191, 0, 118, 337,
	193, 0, 0, 0, 0, 119, 194, 195, 196, 0,
	197, 0, 0, 120, 0, 121, 0, 0, 198, 0,
	122, 0, 0, 252, 0, 0, 0, 123, 124, 125,
	126, 253, 0, 127, 128, 0, 129, 0, 199, 130,
	200, 131, 132, 0, 0, 0, 0, 0, 133, 201,
	0, 134, 0, 202, 135, 136, 0, 203, 137, 204,
	0, 138, 139, 205, 140, 141, 0, 142, 143, 144,
	0, 145, 0, 146, 147, 206, 148, 0, 149, 150,
	0, 151, 254, 0, 152, 153, 0, 154, 207, 155,
	0, 156, 158, 208, 157, 209, 0, 0, 159, 160,
	0, 256, 210, 0, 0, 255, 211, 212, 0, 161,
	162, 163, 164, 0, 87, 165, 166, 0, 0, 167,
	168, 169, 213, 214, 0, 170, 90, 91, 0, 92,
	171, 172, 173, 174, 0, 0, 0, 0, 93, 94,
	175, 176, 177, 95, 178, 179, 0, 96, 180, 97,
	0, 0, 181, 182, 0, 183, 0, 0, 0, 98,
	99, 100, 0, 101, 0, 102, 0, 0, 103, 104,
	0, 0, 0, 0, 0, 0, 105, 106, 107, 108,
	184, 109, 185, 186, 0, 0, 110, 0, 0, 0,
	111, 112, 0, 0, 0, 0, 187, 113, 188, 0,
	0, 114, 115, 189, 116, 0, 0, 0, 0, 0,
	117, 190, 0, 191, 0, 118, 192, 193, 0, 0,
	0, 0, 119, 194, 195, 196, 0, 197, 0, 0,
	120, 0, 121, 0, 0, 198, 0, 122, 0, 0,
	252, 0, 0, 0, 123, 124, 125, 126, 84, 0,
	127, 128, 0, 129, 0, 199, 130, 200, 131, 132,
	0, 0, 0, 0, 0, 133, 201, 0, 134, 0,
	202, 135, 136, 0, 203, 137, 204, 0, 138, 139,
	205, 140, 141, 0, 142, 143, 144, 0, 145, 0,
	146, 147, 206, 148, 0, 149, 150, 0, 151, 254,
	0, 152, 153, 0, 154, 207, 155, 0, 156, 158,
	208, 157, 209, 0, 0, 159, 160, 0, 83, 210,
	0, 0, 79, 211, 212, 0, 161, 162, 163, 164,
	0, 87, 165, 166, 0, 0, 167, 168, 169, 213,
	214, 0, 170, 90, 91, 0, 92, 171, 172, 173,
	174, 0, 0, 0, 0, 93, 94, 175, 176, 177,
	95, 178, 179, 0, 96, 180, 97, 0, 0, 181,
	182, 0, 183, 0, 0, 0, 98, 99, 100, 0,
	101, 0, 102, 0, 0, 103, 104, 0, 0, 0,
	0, 0, 0, 105, 106, 107, 108, 184, 109, 185,
	186, 0, 0, 110, 0, 0, 0, 111, 112, 0,
	0, 0, 0, 187, 113, 188, 0, 0, 114, 115,
	189, 116, 0, 0, 0, 0, 0, 117, 190, 0,
	191, 0, 118, 285, 193, 0, 0, 0, 0, 119,
	194, 195, 196, 0, 197, 0, 0, 120, 0, 121,
	0, 0, 198, 0, 122, 0, 0, 252, 0, 0,
	0, 123, 124, 125, 126, 253, 0, 127, 128, 0,
	129, 0, 199, 130, 200, 131, 132, 0, 0, 0,
	0, 0, 133, 201, 0, 134, 0, 202, 135, 136,
	0, 203, 137, 204, 0, 138, 139, 205, 140, 141,
	0, 142, 143, 144, 0, 145, 0, 146, 147, 206,
	148, 0, 149, 150, 0, 151, 254, 0, 152, 153,
	0, 154, 207, 155, 0, 156, 158, 208, 157, 209,
	0, 0, 159, 160, 0, 256, 210, 0, 0, 255,
	211, 212, 0, 161, 162, 163, 164, 0, 87, 165,
	166, 0, 0, 167, 168, 169, 213, 214, 0, 170,
	90, 91, 0, 92, 171, 172, 173, 174, 0, 0,
	0, 0, 93, 94, 175, 176, 177, 95, 178, 179,
	0, 96, 180, 97, 0, 0, 181, 182, 0, 183,
	0, 0, 0, 98, 99, 100, 0, 101, 0, 102,
	0, 0, 103, 104, 0, 0, 0, 0, 0, 0,
	105, 106, 107, 108, 184, 109, 185, 186, 0, 0,
	110, 0, 0, 0, 111, 112, 0, 0, 0, 0,
	187, 113, 188, 0, 0, 114, 115, 189, 116, 0,
	0, 0, 0, 0, 117, 190, 0, 191, 0, 118,
	282, 193, 0, 0, 0, 0, 119, 194, 195, 196,
	0, 197, 0, 0, 120, 0, 121, 0, 0, 198,
	0, 122, 0, 0, 252, 0, 0, 0, 123, 124,
	125, 126, 253, 0, 127, 128, 0, 129, 0, 199,
	130, 200, 131, 132, 0, 0, 0, 0, 0, 133,
	201, 0, 134, 0, 202, 135, 136, 0, 203, 137,
	204, 0, 138, 139, 205, 140, 141, 0, 142, 143,
	144, 0, 145, 0, 146, 147, 206, 148, 0, 149,
	150, 0, 151, 254, 0, 152, 153, 0, 154, 207,
	155, 0, 156, 158, 208, 157, 209, 0, 0, 159,
	160, 0, 256, 210, 0, 0, 255, 211, 212, 0,
	161, 162, 163, 164, 0, 87, 165, 166, 0, 0,
	167, 168, 169, 213, 214, 0, 170, 90, 91, 0,
	92, 171, 172, 173, 174, 0, 0, 0, 0, 93,
	94, 175, 176, 177, 95, 178, 179, 0, 96, 180,
	97, 0, 0, 181, 182, 0, 183, 0, 0, 0,
	98, 99, 100, 0, 101, 0, 102, 0, 0, 103,
	104, 0, 0, 0, 0, 0, 0, 105, 106, 107,
	108, 184, 109, 185, 186, 0, 0, 110, 0, 0,
	0, 111, 112, 0, 0, 0, 0, 187, 113, 188,
	0, 0, 114, 115, 189, 116, 0, 0, 0, 0,
	0, 117, 190, 0, 191, 0, 118, 280, 193, 0,
	0, 0, 0, 119, 194, 195, 196, 0, 197, 0,
	0, 120, 0, 121, 0, 0, 198, 0, 122, 0,
	0, 252, 0, 0, 0, 123, 124, 125, 126, 253,
	0, 127, 128, 0, 129, 0, 199, 130, 200, 131,
	132, 0, 0, 0, 0, 0, 133, 201, 0, 134,
	0, 202, 135, 136, 0, 203, 137, 204, 0, 138,
	139, 205, 140, 141, 0, 142, 143, 144, 0, 145,
	0, 146, 147, 206, 148, 0, 149, 150, 0, 151,
	254, 0, 152, 153, 0, 154, 207, 155, 0, 156,
	158, 208, 157, 209, 0, 0, 159, 160, 0, 256,
	210, 0, 0, 255, 211, 212, 0, 161, 162, 163,
	164, 0, 87, 165, 166, 0, 0, 167, 168, 169,
	213, 214, 0, 170, 90, 91, 0, 92, 171, 172,
	173, 174, 0, 0, 0, 0, 93, 94, 175, 176,
	177, 95, 178, 179, 0, 96, 180, 97, 0, 0,
	181, 182, 0, 183, 0, 0, 0, 98, 99, 100,
	0, 101, 0, 102, 0, 0, 103, 104, 0, 0,
	0, 0, 0, 0, 105, 106, 107, 108, 184, 109,
	185, 186, 0, 0, 110, 0, 0, 0, 111, 112,
	0, 0, 0, 0, 187, 113, 188, 0, 0, 114,
	115, 189, 116, 0, 0, 0, 0, 0, 117, 190,
	0, 191, 0, 118, 274, 193, 0, 0, 0, 0,
	119, 194, 195, 196, 0, 197, 0, 0, 120, 0,
	121, 0, 0, 198, 0, 122, 0, 0, 252, 0,
	0, 0, 123, 124, 125, 126, 253, 0, 127, 128,
	0, 129, 0, 199, 130, 200, 131, 132, 0, 0,
	0, 0, 0, 133, 201, 0, 134, 0, 202, 135,
	136, 0, 203, 137, 204, 0, 138, 139, 205, 140,
	141, 0, 142, 143, 144, 0, 145, 0, 146, 147,
	206, 148, 0, 149, 150, 0, 151, 254, 0, 152,
	153, 0, 154, 207, 155, 0, 156, 158, 208, 157,
	209, 0, 0, 159, 160, 0, 256, 210, 0, 0,
	255, 211, 212, 0, 161, 162, 163, 164, 0, 87,
	165, 166, 0, 0, 167, 168, 169, 213, 214, 0,
	170, 90, 91, 0, 92, 171, 172, 173, 174, 0,
	0, 0, 0, 93, 94, 175, 176, 177, 95, 178,
	179, 0, 96, 180, 97, 0, 0, 181, 182, 0,
	183, 0, 0, 0, 98, 99, 100, 0, 101, 0,
	102, 0, 0, 103, 104, 0, 0, 0, 0, 0,
	0, 105, 106, 107, 108, 184, 109, 185, 186, 0,
	0, 110, 0, 0, 0, 111, 112, 0, 0, 0,
	0, 187, 113, 188, 0, 0, 114, 115, 189, 116,
	0, 0, 0, 0, 0, 117, 190, 0, 191, 0,
	118, 192, 193, 0, 0, 0, 0, 119, 194, 195,
	196, 0, 197, 0, 0, 120, 0, 121, 0, 0,
	198, 0, 122, 0, 0, 252, 0, 0, 0, 123,
	124, 125, 126, 253, 0, 127, 128, 0, 129, 0,
	199, 130, 200, 131, 132, 0, 0, 0, 0, 0,
	133, 201, 0, 134, 0, 202, 135, 136, 0, 203,
	137, 204, 0, 138, 139, 205, 249, 141, 0, 142,
	143, 144, 0, 145, 0, 146, 147, 206, 148, 0,
	149, 150, 0, 151, 254, 0, 152, 153, 0, 154,
	207, 155, 0, 156, 158, 208, 157, 209, 0, 0,
	159, 160, 0, 256, 210, 0, 0, 255, 211, 212,
	0, 161, 162, 163, 164, 0, 87, 165, 166, 0,
	0, 167, 168, 169, 213, 214, 0, 170, 90, 91,
	0, 92, 171, 172, 173, 174, 0, 0, 0, 0,
	93, 94, 175, 176, 177, 95, 178, 179, 0, 96,
	180, 97, 0, 0, 181, 182, 0, 183, 0, 0,
	0, 98, 99, 100, 0, 101, 0, 102, 0, 0,
	103, 104, 0, 0, 0, 0, 0, 0, 105, 106,
	107, 108, 184, 109, 185, 186, 0, 0, 110, 0,
	0, 0, 111, 112, 0, 0, 0, 0, 187, 113,
	188, 0, 0, 114, 115, 189, 116, 0, 0, 0,
	0, 0, 117, 190, 0, 191, 0, 118, 192, 193,
	0, 0, 0, 0, 119, 194, 195, 196, 0, 197,
	0, 0, 120, 0, 121, 0, 0, 198, 0, 122,
	0, 0, 77, 0, 0, 0, 123, 124, 125, 126,
	84, 0, 127, 128, 0, 129, 0, 199, 130, 200,
	131, 132, 0, 0, 0, 0, 0, 133, 201, 0,
	134, 0, 202, 135, 136, 0, 203, 137, 204, 0,
	138, 139, 205, 140, 141, 0, 142, 143, 144, 0,
	145, 0, 146, 147, 206, 148, 0, 149, 150, 0,
	151, 78, 0, 152, 153, 0, 154, 207, 155, 0,
	156, 158, 208, 157, 209, 0, 0, 159, 160, 0,
	83, 210, 0, 0, 79, 211, 212, 0, 161, 162,
	163, 164, 0, 87, 165, 166, 0, 0, 167, 168,
	169, 213, 214, 0, 170, 90, 91, 0, 92, 171,
	172, 173, 174, 0, 0, 0, 0, 93, 94, 175,
	176, 177, 95, 178, 179, 0, 96, 180, 97, 0,
	0, 181, 182, 0, 183, 0, 0, 0, 98, 99,
	100, 0, 101, 0, 102, 0, 0, 103, 104, 0,
	0, 0, 0, 0, 0, 105, 106, 107, 108, 184,
	109, 185, 186, 0, 0, 110, 0, 0, 0, 111,
	112, 0, 0, 0, 0, 187, 113, 188, 0, 0,
	114, 115, 189, 116, 0, 0, 0, 0, 0, 117,
	190, 0, 191, 0, 118, 192, 193, 0, 0, 0,
	0, 119, 194, 195, 196, 0, 197, 0, 0, 120,
	0, 121, 0, 0, 198, 0, 122, 0, 0, 252,
	0, 0, 0, 123, 124, 125, 126, 253, 0, 127,
	128, 0, 129, 0, 199, 130, 200, 131, 132, 0,
	0, 0, 0, 0, 133, 201, 0, 134, 0, 202,
	135, 0, 0, 203, 137, 204, 0, 0, 139, 205,
	140, 141, 0, 142, 143, 144, 0, 145, 0, 146,
	147, 206, 0, 0, 149, 150, 0, 151, 254, 0,
	152, 153, 0, 154, 207, 155, 0, 156, 158, 208,
	157, 209, 0, 0, 159, 160, 0, 256, 210, 0,
	0, 255, 211, 212, 0, 161, 162, 163, 164, 0,
	0, 165, 166, 0, 0, 167, 168, 169, 213, 214,
	648, 170, 666, 667, 668, 0, 171, 172, 173, 174,
	0, 0, 669, 0, 0, 0, 0, 0, 650, 0,
	675, 0, 0, 0, 0, 0, 648, 0, 666, 667,
	668, 0, 0, 0, 0, 0, 649, 0, 669, 0,
	0, 0, 663, 0, 650, 0, 675, 648, 0, 666,
	667, 668, 0, 0, 0, 0, 0, 0, 0, 669,
	0, 0, 649, 0, 0, 650, 0, 675, 663, 0,
	0, 0, 0, 0, 0, 648, 0, 666, 667, 668,
	0, 0, 0, 649, 0, 0, 0, 669, 0, 663,
	0, 0, 0, 650, 0, 675, 0, 0, 676, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 674,
	0, 649, 0, 0, 0, 0, 0, 663, 671, 0,
	0, 0, 0, 664, 676, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 674, 0, 0, 0, 0,
	0, 0, 0, 670, 671, 676, 0, 0, 0, 664,
	0, 0, 0, 0, 0, 0, 674, 0, 0, 0,
	0, 0, 0, 0, 0, 671, 0, 0, 0, 670,
	664, 0, 0, 676, 665, 0, 0, 0, 0, 0,
	0, 0, 0, 673, 674, 0, 0, 0, 0, 0,
	670, 0, 0, 671, 0, 0, 0, 0, 664, 0,
	665, 0, 0, 0, 0, 0, 0, 0, 0, 673,
	0, 0, 0, 0, 0, 0, 0, 0, 670, 0,
	0, 665, 0, 0, 0, 0, 0, 0, 0, 0,
	673, 672, 0, 660, 661, 662, 0, 659, 656, 657,
	658, 651, 652, 653, 654, 655, 0, 0, 0, 665,
	0, 0, 0, 0, 1166, 0, 0, 672, 673, 660,
	661, 662, 0, 659, 656, 657, 658, 651, 652, 653,
	654, 655, 0, 0, 0, 0, 0, 1523, 672, 0,
	660, 661, 662, 0, 659, 656, 657, 658, 651, 652,
	653, 654, 655, 0, 0, 0, 0, 0, 1522, 0,
	0, 0, 0, 0, 0, 0, 672, 0, 660, 661,
	662, 0, 659, 656, 657, 658, 651, 652, 653, 654,
	655, 648, 0, 666, 667, 668, 1507, 0, 0, 0,
	0, 0, 0, 669, 0, 0, 0, 0, 0, 650,
	648, 675, 666, 667, 668, 0, 0, 0, 0, 0,
	0, 0, 669, 0, 0, 0, 0, 649, 650, 0,
	675, 0, 0, 663, 0, 0, 0, 648, 0, 666,
	667, 668, 0, 0, 0, 0, 649, 0, 0, 669,
	0, 0, 663, 0, 0, 650, 0, 675, 0, 0,
	0, 0, 0, 648, 0, 666, 667, 668, 0, 0,
	0, 0, 0, 649, 0, 669, 0, 0, 0, 663,
	0, 650, 0, 675, 0, 0, 0, 0, 0, 676,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 649,
	674, 0, 0, 0, 0, 663, 0, 0, 676, 671,
	0, 0, 0, 0, 664, 0, 0, 0, 0, 674,
	0, 0, 0, 0, 0, 0, 0, 0, 671, 0,
	0, 0, 0, 664, 670, 676, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 674, 0, 0, 0,
	0, 0, 0, 670, 0, 671, 0, 0, 0, 0,
	664, 676, 0, 0, 0, 665, 0, 0, 0, 0,
	0, 0, 674, 0, 673, 0, 0, 0, 0, 0,
	670, 671, 0, 0, 665, 0, 664, 0, 0, 0,
	0, 0, 0, 673, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 670, 0, 0, 0,
	0, 665, 0, 0, 0, 0, 0, 0, 0, 0,
	673, 0, 672, 0, 660, 661, 662, 0, 659, 656,
	657, 658, 651, 652, 653, 654, 655, 665, 0, 0,
	0, 672, 1486, 660, 661, 662, 673, 659, 656, 657,
	658, 651, 652, 653, 654, 655, 0, 0, 0, 0,
	0, 1481, 0, 0, 0, 0, 0, 0, 672, 0,
	660, 661, 662, 0, 659, 656, 657, 658, 651, 652,
	653, 654, 655, 0, 0, 0, 0, 0, 1477, 0,
	0, 0, 0, 0, 672, 0, 660, 661, 662, 0,
	659, 656, 657, 658, 651, 652, 653, 654, 655, 648,
	0, 666, 667, 668, 1419, 0, 0, 0, 0, 0,
	0, 669, 0, 0, 0, 0, 0, 650, 648, 675,
	666, 667, 668, 0, 0, 0, 0, 0, 0, 0,
	669, 0, 0, 0, 0, 649, 650, 0, 675, 0,
	0, 663, 0, 0, 0, 648, 0, 666, 667, 668,
	0, 0, 0, 0, 649, 0, 0, 669, 0, 0,
	663, 0, 0, 650, 0, 675, 0, 0, 0, 0,
	0, 648, 0, 666, 667, 668, 0, 0, 0, 0,
	0, 649, 0, 669, 0, 0, 0, 663, 0, 650,
	0, 675, 0, 0, 0, 0, 0, 676, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 649, 674, 0,
	0, 0, 0, 663, 0, 0, 676, 671, 0, 0,
	0, 0, 664, 0, 0, 0, 0, 674, 0, 0,
	0, 0, 0, 0, 0, 0, 671, 0, 0, 0,
	0, 664, 670, 676, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 674, 0, 0, 0, 0, 0,
	0, 670, 0, 671, 0, 0, 0, 0, 664, 676,
	0, 0, 0, 665, 0, 0, 0, 0, 0, 0,
	674, 0, 673, 0, 0, 0, 0, 0, 670, 671,
	0, 0, 665, 0, 664, 0, 0, 0, 0, 0,
	0, 673, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 670, 0, 0, 0, 0, 665,
	0, 0, 0, 0, 0, 0, 0, 0, 673, 0,
	672, 0, 660, 661, 662, 0, 659, 656, 657, 658,
	651, 652, 653, 654, 655, 665, 0, 0, 0, 672,
	1418, 660, 661, 662, 673, 659, 656, 657, 658, 651,
	652, 653, 654, 655, 0, 0, 0, 0, 0, 1336,
	0, 0, 0, 0, 0, 0, 672, 0, 660, 661,
	662, 0, 659, 656, 657, 658, 651, 652, 653, 654,
	655, 0, 0, 0, 0, 0, 1274, 0, 0, 0,
	0, 0, 672, 0, 660, 661, 662, 0, 659, 656,
	657, 658, 651, 652, 653, 654, 655, 648, 0, 666,
	667, 668, 1249, 0, 0, 0, 0, 0, 0, 669,
	0, 0, 0, 0, 0, 650, 648, 675, 666, 667,
	668, 0, 0, 0, 0, 0, 0, 0, 669, 0,
	0, 0, 0, 649, 650, 0, 675, 0, 0, 663,
	0, 0, 0, 648, 0, 666, 667, 668, 0, 0,
	0, 0, 649, 0, 0, 669, 0, 0, 663, 0,
	0, 650, 0, 675, 0, 0, 0, 0, 0, 648,
	0, 666, 667, 668, 0, 0, 0, 0, 0, 649,
	0, 669, 0, 0, 0, 663, 0, 650, 0, 675,
	0, 0, 0, 0, 0, 676, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 649, 674, 0, 0, 0,
	0, 663, 0, 0, 676, 671, 0, 0, 0, 0,
	664, 0, 0, 0, 0, 674, 0, 1583, 0, 0,
	0, 0, 0, 0, 671, 0, 0, 0, 0, 664,
	670, 676, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 674, 0, 1158, 0, 1157, 0, 0, 670,
	0, 671, 0, 0, 0, 0, 664, 676, 0, 0,
	0, 665, 0, 0, 0, 0, 0, 0, 674, 0,
	673, 0, 0, 0, 0, 0, 670, 671, 0, 0,
	665, 0, 664, 0, 0, 0, 0, 0, 1582, 673,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 670, 0, 0, 0, 0, 665, 0, 0,
	0, 0, 0, 0, 0, 0, 673, 0, 672, 0,
	660, 661, 662, 0, 659, 656, 657, 658, 651, 652,
	653, 654, 655, 665, 0, 0, 0, 672, 912, 660,
	661, 662, 673, 659, 656, 657, 658, 651, 652, 653,
	654, 655, 0, 0, 0, 1320, 0, 0, 0, 0,
	0, 0, 0, 0, 672, 0, 660, 661, 662, 0,
	659, 656, 657, 658, 651, 652, 653, 654, 655, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	672, 0, 660, 661, 662, 0, 659, 656, 657, 658,
	651, 652, 653, 654, 655, 648, 0, 666, 667, 668,
	0, 0, 0, 0, 0, 0, 0, 669, 678, 0,
	0, 820, 0, 650, 648, 675, 666, 667, 668, 0,
	0, 0, 0, 0, 0, 0, 669, 0, 0, 677,
	0, 649, 650, 0, 675, 0, 0, 663, 0, 0,
	0, 648, 0, 666, 667, 668, 0, 0, 0, 0,
	649, 0, 0, 669, 0, 0, 663, 0, 0, 650,
	0, 675, 821, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 649, 0, 0,
	0, 0, 0, 663, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 676, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 674, 0, 0, 0, 0, 0,
	0, 0, 676, 671, 0, 0, 0, 0, 664, 0,
	0, 0, 0, 674, 0, 0, 0, 0, 0, 0,
	0, 0, 671, 0, 0, 0, 0, 664, 670, 676,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	674, 0, 0, 0, 0, 0, 0, 670, 0, 671,
	0, 0, 0, 0, 664, 0, 0, 0, 0, 665,
	0, 0, 0, 0, 0, 0, 0, 0, 673, 0,
	0, 0, 0, 0, 670, 244, 0, 0, 665, 648,
	0, 666, 667, 668, 0, 0, 0, 673, 0, 0,
	0, 669, 0, 0, 0, 0, 0, 650, 0, 675,
	0, 0, 0, 0, 0, 665, 0, 0, 0, 0,
	0, 0, 0, 0, 673, 649, 672, 0, 660, 661,
	662, 663, 659, 656, 657, 658, 651, 652, 653, 654,
	655, 0, 0, 0, 0, 672, 0, 660, 661, 662,
	0, 659, 656, 657, 658, 651, 652, 653, 654, 655,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 672, 0, 660, 661, 662, 0, 659, 656,
	657, 658, 651, 652, 653, 654, 655, 676, 0, 0,
	0, 0, 0, 648, 0, 666, 667, 668, 674, 0,
	0, 0, 0, 0, 0, 669, 0, 671, 0, 0,
	0, 650, 664, 675, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 649,
	0, 0, 670, 0, 0, 663, 0, 648, 0, 666,
	667, 668, 0, 0, 0, 0, 0, 0, 0, 669,
	0, 0, 1159, 0, 0, 650, 0, 675, 0, 0,
	0, 0, 0, 665, 0, 648, 0, 666, 667, 668,
	0, 0, 673, 649, 0, 0, 0, 669, 0, 663,
	1164, 0, 0, 650, 0, 675, 1268, 0, 0, 0,
	0, 676, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 649, 674, 0, 0, 0, 0, 663, 0, 0,
	0, 671, 0, 0, 0, 0, 664, 0, 0, 0,
	672, 0, 660, 661, 662, 0, 659, 656, 657, 658,
	651, 652, 653, 654, 655, 676, 670, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 674, 0, 0, 0,
	0, 0, 0, 0, 0, 671, 0, 0, 0, 0,
	664, 0, 0, 676, 0, 0, 0, 665, 0, 0,
	0, 0, 0, 0, 674, 0, 673, 0, 0, 0,
	670, 0, 0, 671, 0, 0, 0, 0, 664, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 670, 0,
	0, 665, 0, 0, 0, 0, 0, 0, 1126, 0,
	673, 0, 0, 0, 672, 0, 660, 661, 662, 0,
	659, 656, 657, 658, 651, 652, 653, 654, 655, 665,
	0, 0, 0, 0, 0, 0, 0, 648, 673, 666,
	667, 668, 0, 0, 0, 0, 0, 0, 0, 669,
	0, 0, 1121, 0, 0, 650, 0, 675, 672, 0,
	660, 661, 662, 0, 659, 656, 657, 658, 651, 652,
	653, 654, 655, 649, 0, 0, 0, 0, 0, 663,
	0, 0, 0, 0, 0, 0, 672, 0, 660, 661,
	662, 0, 659, 656, 657, 658, 651, 652, 653, 654,
	655, 0, 0, 0, 0, 0, 0, 0, 0, 648,
	0, 666, 667, 668, 0, 0, 0, 0, 0, 0,
	0, 669, 0, 0, 0, 0, 0, 650, 0, 675,
	648, 0, 666, 667, 668, 676, 0, 0, 0, 0,
	0, 0, 669, 0, 0, 649, 674, 0, 650, 0,
	675, 663, 0, 0, 0, 671, 0, 0, 0, 0,
	664, 0, 0, 0, 0, 0, 649, 0, 0, 0,
	0, 0, 663, 0, 0, 0, 0, 0, 0, 0,
	670, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1128, 0, 1144, 1145, 1146, 0, 0, 0,
	0, 0, 0, 0, 1387, 0, 0, 676, 0, 0,
	0, 665, 0, 648, 0, 666, 667, 668, 674, 0,
	673, 0, 0, 0, 0, 0, 0, 671, 676, 0,
	0, 650, 664, 675, 1141, 0, 0, 0, 0, 674,
	0, 0, 0, 0, 0, 0, 0, 0, 671, 649,
	0, 0, 670, 664, 0, 663, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 672, 0,
	660, 661, 662, 0, 659, 656, 657, 658, 651, 652,
	653, 654, 655, 665, 0, 648, 0, 666, 667, 668,
	0, 0, 673, 0, 0, 0, 0, 0, 0, 0,
	0, 1147, 0, 650, 665, 675, 0, 0, 0, 0,
	0, 676, 0, 673, 0, 1142, 0, 0, 0, 0,
	0, 649, 674, 0, 0, 0, 0, 663, 0, 0,
	0, 671, 0, 0, 0, 0, 664, 0, 0, 0,
	672, 0, 660, 661, 662, 0, 659, 656, 657, 658,
	651, 652, 653, 654, 655, 0, 0, 0, 0, 0,
	0, 672, 0, 660, 661, 662, 1143, 659, 656, 657,
	658, 651, 652, 653, 654, 655, 0, 0, 0, 0,
	0, 19, 0, 676, 0, 0, 1128, 665, 1144, 1145,
	1146, 32, 0, 0, 0, 0, 673, 0, 1244, 0,
	0, 0, 0, 671, 0, 0, 0, 0, 664, 0,
	0, 0, 33, 0, 0, 0, 0, 0, 37, 0,
	0, 0, 0, 0, 0, 1138, 1139, 1140, 1141, 1137,
	1134, 1135, 1136, 1129, 1130, 1131, 1132, 1133, 1128, 0,
	1144, 1145, 1146, 24, 672, 34, 660, 661, 662, 25,
	659, 656, 657, 658, 651, 652, 653, 654, 655, 665,
	1128, 26, 1144, 1145, 1146, 0, 0, 0, 673, 0,
	0, 0, 1243, 1128, 0, 1144, 1145, 1146, 0, 0,
	1141, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1147, 0, 0, 0, 0,
	0, 0, 1141, 0, 0, 0, 0, 0, 0, 1142,
	1128, 0, 1144, 1145, 1146, 1141, 672, 0, 660, 661,
	662, 0, 659, 656, 657, 658, 651, 652, 653, 654,
	655, 0, 0, 0, 0, 0, 1148, 0, 0, 0,
	27, 0, 35, 0, 0, 648, 0, 1147, 0, 44,
	0, 0, 1141, 30, 31, 0, 0, 0, 0, 0,
	1143, 1142, 0, 650, 0, 675, 46, 0, 0, 1147,
	0, 0, 0, 0, 0, 0, 0, 0, 36, 0,
	0, 649, 1147, 1142, 0, 0, 0, 663, 0, 0,
	0, 47, 0, 0, 0, 0, 1142, 0, 42, 0,
	0, 0, 0, 0, 43, 0, 0, 0, 0, 0,
	0, 0, 1143, 0, 0, 0, 0, 0, 0, 1138,
	1139, 1140, 41, 1137, 1134, 1135, 1136, 1129, 1130, 1131,
	1132, 1133, 0, 1142, 1143, 0, 0, 0, 0, 0,
	0, 0, 0, 676, 0, 0, 0, 1143, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 671, 0, 0, 0, 0, 664, 0,
	0, 1138, 1139, 1140, 0, 1137, 1134, 1135, 1136, 1129,
	1130, 1131, 1132, 1133, 1143, 0, 0, 0, 0, 0,
	0, 0, 0, 1138, 1139, 1140, 0, 1137, 1134, 1135,
	1136, 1129, 1130, 1131, 1132, 1133, 1138, 1139, 1140, 0,
	1137, 1134, 1135, 1136, 1129, 1130, 1131, 1132, 1133, 665,
	0, 0, 0, 0, 0, 0, 0, 0, 673, 848,
	863, 840, 856, 855, 0, 0, 841, 0, 0, 0,
	865, 864, 0, 1138, 1139, 1140, 0, 1137, 1134, 1135,
	1136, 1129, 1130, 1131, 1132, 1133, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 861, 0,
	853, 852, 0, 0, 0, 0, 672, 0, 851, 0,
	0, 0, 659, 656, 657, 658, 651, 652, 653, 654,
	655, 850, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 844, 845, 846, 0, 526, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 854, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 849, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 847, 0, 0, 0, 0, 843, 0,
	0, 0, 0, 0, 842, 0, 0, 862, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 866,
}
var sqlPact = [...]int{

	17512, -1000, -16, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 708,
	-1000, -1000, -1000, 516, 578, 66, 1181, 1181, -1000, -1000,
	14912, 1660, 314, 314, 314, 314, 385, 712, 61, -1000,
	564, 16, 14695, 11874, 1064, -20, 11223, 188, 17512, 11657,
	11874, 14478, 934, 874, 11223, 14261, 14044, 13827, -1000, 7756,
	-1000, -1000, -1000, -1000, 696, -1000, -21, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 687, -1000, 13610, 13610, 862,
	-1000, -1000, 479, 248, 1083, -1000, -11, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 933, -1000, 685,
	931, 929, 246, 864, -1000, 862, -1000, -1000, -1000, -1000,
	11223, -1000, 13393, 885, 13176, -1000, 564, -1000, -1000, -1000,
	758, 1062, 1062, 1062, 1094, 72, 71, 61, -22, 11874,
	-1000, 189, -1000, -1000, -1000, -1000, -1000, -22, 5832, 5832,
	-1000, -1000, 188, -1000, 217, 10098, -146, -1000, 5354, -1000,
	756, 974, 471, 463, 971, 11223, 11874, 408, 12959, -1000,
	970, 70, 969, -1000, -29, 968, -1000, -33, -1000, -1000,
	-1000, -1000, -1000, -1000, 188, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 11440, 732,
	11440, -1000, -1000, -1000, 836, 8232, 7995, 1031, 677, -1000,
	-1000, -1000, -13, 3187, 11874, 941, 11440, 11874, -1000, 11874,
	-1000, 834, -1000, -1000, 81, -1000, 186, 789, 12742, -1000,
	771, -1000, 758, -1000, 703, 829, 6089, 6806, 61, -1000,
	-1000, 61, 61, 6806, -1000, -1000, 11874, -22, 1119, 11874,
	927, -23, -1000, 16644, -1000, -1000, 6806, 6806, 6806, 6806,
	6806, 563, -1000, -1000, -1000, 3663, -1000, -1000, -146, 184,
	204, -1000, -1000, 183, -146, -1000, -1000, -1000, -1000, 181,
	1228, 325, -1000, -1000, -1000, 6806, 252, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 939, 174, 171, -1000,
	-1000, -1000, -1000, 169, 162, 161, 160, 155, 154, 153,
	148, 147, 146, 144, 143, 141, 513, -1000, 277, -1000,
	-1000, 277, 277, -1000, 122, 122, 123, -1000, -1000, -1000,
	122, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	137, 41, -1000, -1000, -1000, 11874, -146, -1000, 2949, 3187,
	6806, -38, -1000, 17249, -1000, -47, 744, -1000, 10779, 1066,
	1043, 1042, 11223, 372, 369, 11874, 260, 51, 1111, 9624,
	-1000, 11874, 11874, -1000, 11874, -1000, -1000, 11874, 11874, 11874,
	16, 10335, 360, -30, 11874, 11874, -1000, 923, 646, -24,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1184, -1000, -1000, -1000, -1000, 1214, -24, -1000, -1000, -1000,
	-1000, -1000, 1225, -1000, -1000, -1000, -1000, 3187, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 11874, -1000, -1000, -1000, -1000, -1000,
	11223, 10552, 966, 682, 767, -1000, 963, -1000, -1000, -1000,
	-1000, 17249, -1000, 17249, 571, 872, -1000, 872, -25, -1000,
	16625, -1000, 135, -39, -1000, 260, 9387, 5832, 17848, 11874,
	379, 6806, 6806, 6806, 6806, 6806, 6806, 6806, 6806, 6806,
	6806, 6806, 6806, 6806, 6806, 6806, 6806, 6806, 6806, 6806,
	6806, 6806, 794, 355, 1052, 584, 121, 3187, -1000, 1176,
	1176, 1176, 17353, 17353, 145, -151, 16307, -27, -146, -1000,
	-1000, 4858, 4619, -146, 2537, -1000, 660, 1212, 264, 17249,
	947, 898, 134, 69, 68, 6806, 770, 6806, 7045, 6806,
	6806, 3902, 6806, 6806, 6806, 6806, 6806, 6806, -1000, 133,
	-1000, -1000, -1000, -1000, 1210, -1000, -1000, 1203, -1000, 1198,
	260, 67, -1000, -1000, -1000, -1000, 1900, 5354, -1000, 792,
	11874, 11874, 11874, -1000, -1000, 734, 12525, -1000, 17848, 11874,
	-1000, 132, 129, 846, 845, 11874, 11874, 12308, 12091, 11874,
	669, 11874, 11874, 449, -1000, 6806, 679, -1000, 8933, 281,
	11874, 33, -1000, -1000, -1000, 238, 11874, -1000, -1000, -1000,
	70, -1000, -29, -1000, -1000, 11874, -30, -31, 11874, -1000,
	529, -1000, 507, -1000, 8469, -1000, -1000, -1000, 660, -1000,
	-64, -1000, -1000, 63, -35, -1000, -1000, -1000, -1000, 11874,
	185, 11874, 11874, 961, 11874, -1000, -1000, -1000, 6806, -1000,
	-1000, -1000, 16, 11874, -1000, 896, -40, 942, 11006, 11006,
	-1000, 8696, -1000, -1000, 1125, -1000, -1000, -1000, -1000, 44,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	123, 513, 122, 122, 122, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 277, 277, 277, -1000, -1000, 245, 489,
	489, 1145, 1145, 1145, 441, 441, 751, 1923, 17685, 17685,
	17685, 1605, 253, 253, 17685, 17685, 17685, 17353, 17270, 226,
	6806, 345, 582, 121, 6806, -1000, 959, -1000, -1000, -1000,
	920, 120, 7045, 7045, -1000, -1000, -1000, 3663, -1000, -1000,
	119, 6806, -1000, 6806, -97, -103, -1000, 17249, -1000, -43,
	-1000, -1000, -37, 6806, 6806, 6806, 62, -1000, 342, -1000,
	340, 337, 336, -1000, 118, 58, 418, -1000, 6806, 610,
	113, 112, 6806, -1000, -1000, 17177, 55, 919, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 54, 16995, 53, 17578, -1000,
	7045, 7045, 7045, 3663, 106, 52, 16379, -127, 16967, 5593,
	5593, 5593, 49, 16923, 6806, -127, 15350, 2249, 2177, -45,
	-49, -50, 1196, -51, 48, 46, 896, -1000, -1000, 6806,
	-1000, -1000, -1000, 335, 334, 957, -1000, 714, -1000, 542,
	6806, 11874, 105, 104, 545, -1000, 956, 702, 955, 702,
	-1000, -47, 573, -1000, -1000, 333, 17249, -1000, 1051, -55,
	-1000, -1000, 260, 9624, 5354, -56, -1000, -64, -64, -1000,
	-1000, -1000, -1000, -1000, 11874, -1000, 10552, 103, 11874, 101,
	100, 11874, -1000, -1000, 45, -1000, -1000, -1000, -1000, -1000,
	891, 1091, 9387, 857, 852, 9387, 1084, 632, 632, 632,
	-1000, -1000, -1000, 11874, 97, -1000, 9170, 42, 942, 209,
	208, -1000, 1195, 6806, 226, 6806, 7045, 7045, -1000, 226,
	-1000, -1000, -1000, -1000, 916, 96, 6806, 17848, 17600, 17526,
	-60, 4380, -81, 16061, 6806, -1000, -1000, 204, -1000, 40,
	5115, -1000, 16671, -32, -32, -1000, 798, 688, 634, 436,
	1194, 1221, 962, -1000, 6806, 16819, -1000, 9861, 262, 664,
	16035, 17848, -1000, 6806, -1000, 915, 6806, -1000, 17848, 7045,
	7045, 7045, 7045, 7045, 7045, 7045, 7045, 7045, 7045, 7045,
	7045, 7045, 7045, 7045, 7045, 7045, 7045, 805, 7045, 1166,
	1166, 1166, -87, 4141, -1000, 937, 915, 6806, 6806, 17848,
	37, 35, 31, -1000, 6806, -127, 6806, 6806, 6806, -1000,
	-1000, -1000, 28, -1000, 1190, -1000, -1000, 891, 16326, 11874,
	11874, 11874, 953, 1065, -1000, 16008, -62, 11874, 11874, -1000,
	843, 833, 307, 11874, -1000, 11874, -1000, 11874, 11874, 11874,
	11874, 140, 16, -1000, -1000, -1000, 227, -1000, -1000, 7519,
	95, 10552, 7519, 678, -1000, 256, 6806, 6806, 942, 9387,
	9387, 987, 844, 9387, -1000, -1000, -1000, -1000, 92, 11874,
	11006, 304, 1189, 27, 1144, 226, 17332, 1731, 6806, 17848,
	17425, -66, -1000, 6806, 6806, -1000, -67, -1000, 6806, -1000,
	17249, -1000, 1217, 6806, 25, 24, 23, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 21, -1000, -1000, 17249, 6806, -1000,
	-1000, 15129, 6806, 14, -1000, 13, 17249, 937, 17249, -1000,
	472, 472, 1166, 1166, 1166, 1443, 1443, 389, 551, 450,
	450, 450, 365, 378, 378, 450, 450, 450, 911, 849,
	90, 17613, 6806, -71, -1000, -1000, -1000, 17249, 17249, 12,
	-1000, -1000, -1000, -127, 2073, 15989, 15743, -1000, 10, 256,
	-1000, -1000, -1000, -1000, 11874, -1000, 11874, -1000, 11874, 760,
	-1000, -1000, 838, 89, 7045, 11874, -1000, 539, -72, -73,
	736, -1000, 719, 6806, -1000, 17848, 702, 702, -1000, 328,
	326, -1000, 985, 7519, 1038, -1000, 86, -79, -1000, 60,
	1077, 6806, -1000, -1000, 84, 7519, 7, -80, 11874, -1000,
	11874, 17249, -127, -1000, 987, -1000, 82, 6806, 9387, -1000,
	11874, -86, -1000, -1000, 194, 191, -1000, 6806, 6806, 17425,
	-88, -1000, 17848, 226, 226, -1000, 15717, -1000, 16671, -1000,
	-1000, -1000, -1000, 17249, 555, -1000, 15690, -1000, -1000, -1000,
	7045, 910, 80, 17848, 15671, -1000, -1000, 6806, -1000, -1000,
	-1000, -1000, -1000, 1446, -1000, -1000, -1000, 6806, 17613, 75,
	-1000, 78, -1000, -1000, -1000, 474, -1000, -1000, 17249, 1079,
	-1000, -1000, 11874, 11874, 382, -90, 11874, -1000, -1000, 3424,
	539, 7519, 1060, -146, 11874, 1060, 15425, 2537, -92, -1000,
	539, 77, -114, -1000, 1108, -1000, 11874, 17249, -1000, -107,
	-1000, -1000, -1000, 226, 226, -1000, -1000, -1000, 6, 664,
	1075, -1000, 17650, 7045, 17848, -116, -1000, 15397, -1000, 15376,
	818, 11874, 11874, 11874, 289, 11874, -1000, -1000, 404, -1000,
	260, -1000, -1000, -1000, -1000, -1000, -1000, 1077, -37, 539,
	-1000, 7519, 11874, 76, -118, -1000, -1000, 467, 6806, 17650,
	-129, -1000, -1000, -1000, 663, 754, -133, -135, 75, -1000,
	6806, -1000, 9624, -1000, 1060, 5, -1000, -140, -1000, -1000,
	-1000, 3, 6567, 6567, -127, -1000, -1000, 675, 671, 455,
	-1000, -1000, -1000, -1000, -1000, 818, 17249, -111, -1000, -1000,
	539, -1000, -1000, -1000, 7282, 662, 442, 16353, -1000, -1000,
	1012, -1000, 300, 800, 800, 663, -1000, -1000, 1138, -1000,
	-1000, -1000, -1000, -1000, -1000, 1155, -1000, -1000, 870, -1000,
	-1000, 6328, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1459, 1458, 1129, 1457, 1456, 1455, 1452, 1451, 78,
	1448, 1447, 84, 1445, 66, 1443, 1441, 1440, 49, 1439,
	1432, 1431, 1430, 63, 38, 1583, 105, 103, 1429, 1427,
	1426, 12, 76, 71, 1425, 67, 1424, 511, 1015, 44,
	20, 18, 501, 1423, 1420, 1419, 31, 1417, 1416, 1413,
	9, 42, 13, 1411, 16, 25, 1410, 1409, 68, 1407,
	113, 23, 88, 54, 1405, 459, 1403, 8, 55, 1402,
	33, 1400, 14, 46, 97, 1399, 490, 40, 26, 45,
	1398, 1397, 1396, 1395, 51, 58, 43, 1394, 1392, 48,
	1385, 91, 94, 1376, 1373, 1367, 1366, 1364, 1363, 1106,
	1361, 3, 34, 47, 28, 27, 0, 677, 757, 1360,
	30, 32, 52, 37, 36, 24, 1358, 77, 1357, 1353,
	1346, 1341, 1337, 56, 1336, 53, 90, 29, 59, 62,
	21, 127, 61, 86, 101, 72, 1335, 79, 1334, 41,
	1331, 1330, 530, 96, 1327, 1319, 1317, 528, 386, 320,
	196, 1316, 1315, 262, 261, 1313, 1312, 60, 1311, 1305,
	99, 1301, 98, 82, 1300, 80, 1299, 65, 1298, 108,
	147, 74, 1295, 93, 50, 1285, 1283, 1282, 22, 2,
	10, 5, 7, 4, 15, 11, 1276, 1275, 85, 69,
	1271, 495, 1268, 1266, 35, 1261, 1259, 17, 1258, 19,
	1256, 6, 1, 1253, 100, 1251, 73, 1247, 1165, 1240,
	102, 1236, 1235, 1287, 57,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	4, 4, 33, 33, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 29,
	29, 35, 35, 35, 34, 34, 30, 30, 5, 5,
	5, 9, 10, 10, 10, 10, 10, 10, 62, 62,
	61, 61, 64, 64, 11, 11, 12, 12, 12, 12,
	138, 138, 137, 13, 17, 204, 204, 204, 208, 208,
	209, 209, 210, 210, 210, 210, 210, 210, 210, 206,
	206, 19, 19, 19, 99, 99, 98, 98, 98, 98,
	100, 100, 100, 100, 162, 160, 160, 167, 167, 167,
	44, 44, 44, 44, 44, 159, 159, 159, 159, 168,
	168, 168, 168, 168, 168, 45, 45, 45, 166, 166,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	161, 161, 205, 205, 207, 207, 8, 8, 46, 46,
	47, 47, 103, 103, 103, 102, 176, 176, 177, 177,
	177, 178, 178, 178, 178, 178, 178, 178, 175, 175,
	173, 173, 174, 174, 174, 174, 211, 211, 101, 101,
	50, 50, 181, 181, 181, 181, 179, 179, 179, 179,
	179, 182, 180, 183, 183, 183, 183, 183, 126, 126,
	126, 22, 7, 7, 88, 88, 54, 54, 130, 130,
	130, 41, 41, 31, 31, 31, 16, 16, 16, 16,
	16, 16, 16, 16, 16, 89, 89, 90, 90, 21,
	21, 21, 21, 213, 213, 36, 36, 37, 6, 6,
	14, 43, 43, 95, 95, 95, 97, 97, 97, 96,
	96, 96, 23, 67, 67, 68, 68, 136, 69, 69,
	18, 18, 25, 25, 24, 24, 24, 24, 24, 24,
	26, 26, 27, 27, 27, 27, 27, 27, 27, 189,
	189, 189, 191, 191, 188, 15, 15, 15, 15, 190,
	190, 212, 212, 76, 76, 76, 49, 48, 48, 52,
	52, 51, 53, 53, 129, 74, 74, 74, 74, 91,
	92, 92, 93, 93, 94, 94, 73, 73, 113, 113,
	28, 28, 58, 58, 59, 59, 131, 131, 131, 131,
	132, 132, 132, 132, 132, 132, 127, 127, 127, 127,
	128, 128, 79, 79, 79, 79, 77, 77, 78, 78,
	133, 133, 133, 133, 75, 75, 134, 134, 134, 104,
	104, 139, 139, 139, 57, 57, 57, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 141, 141, 141,
	141, 143, 143, 143, 142, 142, 142, 142, 142, 142,
	142, 142, 142, 142, 142, 142, 142, 144, 144, 151,
	151, 152, 152, 153, 154, 145, 145, 146, 146, 147,
	148, 155, 155, 155, 157, 157, 149, 149, 150, 85,
	85, 85, 85, 85, 85, 85, 85, 85, 85, 85,
	85, 85, 85, 86, 86, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 184, 184, 184, 184,
	184, 184, 184, 186, 186, 187, 187, 185, 185, 185,
	185, 185, 185, 185, 185, 185, 185, 185, 185, 185,
	185, 185, 185, 185, 185, 185, 185, 185, 185, 185,
	185, 185, 192, 192, 193, 193, 194, 194, 195, 195,
	197, 198, 198, 198, 199, 203, 203, 196, 196, 200,
	200, 200, 201, 201, 202, 202, 202, 202, 202, 117,
	117, 117, 118, 118, 119, 63, 63, 115, 115, 114,
	114, 114, 116, 116, 80, 156, 156, 156, 156, 156,
	156, 156, 81, 81, 87, 82, 82, 83, 83, 83,
	83, 83, 83, 110, 111, 84, 84, 84, 112, 112,
	120, 124, 124, 123, 122, 122, 121, 121, 105, 105,
	105, 105, 105, 70, 70, 214, 214, 125, 125, 71,
	71, 72, 66, 66, 65, 65, 135, 135, 135, 135,
	60, 60, 42, 42, 55, 55, 56, 56, 40, 40,
	109, 109, 109, 109, 109, 109, 109, 109, 109, 109,
	109, 158, 158, 158, 38, 38, 38, 39, 39, 164,
	164, 164, 165, 165, 165, 165, 163, 163, 163, 163,
	163, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	171, 171, 171, 171, 171, 171, 171, 171, 171, 171,
	171, 171, 171, 171, 171, 171, 171, 171, 171, 171,
	171, 171, 171, 171, 171, 171, 171, 171, 171, 171,
	171, 171, 171, 171, 171, 171, 171, 171, 171, 171,
	171, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 172, 172, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 172, 172, 172,
	172, 172,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	4, 6, 1, 3, 2, 5, 3, 6, 4, 6,
	6, 6, 4, 8, 2, 3, 3, 6, 4, 3,
	2, 1, 1, 0, 2, 0, 2, 0, 1, 1,
	1, 5, 3, 5, 4, 6, 3, 5, 1, 3,
	1, 2, 2, 3, 2, 5, 1, 1, 1, 1,
	1, 3, 1, 6, 6, 1, 2, 2, 1, 1,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 2, 3, 3, 2, 1, 3, 3, 3, 3,
	1, 3, 3, 2, 1, 1, 3, 1, 1, 1,
	2, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 3, 1, 1, 1, 1, 1, 0, 1, 1,
	2, 2, 4, 2, 4, 4, 3, 3, 4, 2,
	2, 0, 2, 0, 2, 0, 6, 9, 1, 0,
	1, 3, 1, 1, 1, 3, 2, 0, 3, 1,
	2, 2, 1, 1, 2, 4, 2, 5, 6, 7,
	3, 1, 4, 5, 5, 10, 1, 1, 4, 0,
	3, 0, 2, 2, 2, 0, 1, 1, 2, 2,
	0, 3, 3, 2, 1, 1, 2, 2, 1, 2,
	1, 4, 10, 13, 1, 0, 1, 3, 3, 3,
	5, 2, 0, 1, 1, 0, 6, 6, 8, 6,
	8, 8, 10, 8, 10, 1, 0, 2, 0, 3,
	2, 2, 2, 1, 0, 1, 0, 3, 3, 6,
	6, 1, 3, 1, 4, 2, 8, 5, 0, 4,
	3, 0, 7, 1, 3, 1, 1, 3, 5, 5,
	1, 1, 3, 3, 1, 2, 3, 2, 3, 4,
	1, 1, 8, 8, 1, 2, 4, 4, 4, 2,
	2, 3, 1, 3, 6, 1, 1, 1, 1, 1,
	0, 1, 0, 1, 1, 0, 1, 1, 0, 1,
	0, 3, 1, 3, 2, 2, 2, 1, 1, 2,
	2, 3, 1, 1, 1, 1, 3, 0, 2, 0,
	2, 3, 2, 0, 1, 3, 2, 2, 1, 4,
	3, 4, 5, 4, 5, 4, 5, 2, 4, 1,
	1, 0, 2, 2, 2, 1, 1, 0, 4, 2,
	1, 2, 2, 4, 1, 3, 1, 2, 3, 2,
	0, 2, 5, 2, 3, 4, 0, 1, 1, 1,
	1, 2, 4, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 5, 0, 1, 1, 1, 1, 1, 1,
	2, 2, 2, 2, 2, 1, 1, 3, 0, 1,
	1, 1, 1, 5, 2, 1, 1, 1, 1, 4,
	1, 2, 2, 1, 1, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 0, 1, 4, 1, 3, 3, 5, 2,
	2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 2, 3, 4, 4, 5, 3, 4,
	3, 3, 4, 3, 4, 3, 4, 5, 6, 6,
	7, 6, 7, 6, 7, 3, 4, 1, 3, 2,
	2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	5, 6, 6, 7, 1, 1, 1, 3, 1, 1,
	1, 2, 2, 2, 1, 1, 3, 5, 6, 8,
	6, 6, 4, 4, 1, 1, 1, 5, 1, 3,
	1, 3, 1, 1, 1, 1, 6, 4, 4, 4,
	4, 6, 5, 5, 5, 4, 8, 6, 6, 4,
	4, 4, 5, 0, 5, 0, 2, 0, 1, 3,
	3, 2, 2, 0, 6, 1, 0, 3, 0, 2,
	2, 0, 1, 4, 2, 2, 2, 2, 2, 4,
	3, 5, 4, 3, 5, 1, 3, 1, 3, 3,
	3, 2, 1, 3, 3, 1, 1, 1, 1, 1,
	1, 1, 4, 3, 2, 3, 0, 3, 3, 2,
	2, 1, 0, 2, 2, 3, 2, 1, 1, 3,
	5, 1, 2, 4, 2, 0, 1, 0, 2, 2,
	2, 3, 5, 1, 2, 1, 0, 1, 1, 1,
	3, 3, 1, 0, 1, 3, 3, 2, 1, 1,
	1, 3, 1, 2, 1, 3, 3, 0, 1, 2,
	1, 1, 1, 1, 6, 2, 3, 5, 1, 1,
	1, 1, 2, 2, 1, 1, 1, 1, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -9, -10, -11, -13,
	-14, -16, -17, -18, -19, -20, -21, -22, -23, 19,
	-6, -7, -8, -190, 81, 87, 99, 178, -24, -25,
	191, 192, 29, 50, 83, 180, 216, 56, -189, -27,
	-26, 260, 236, 242, 187, -28, 204, 229, 263, 204,
	68, 109, 76, 112, 223, 68, 109, 204, -12, 260,
	-18, -14, -23, -9, -208, 18, -209, -210, 56, 81,
	99, 187, 112, 76, 223, -208, -99, 130, 189, 212,
	-100, -98, -162, 208, 138, -61, -38, 4, -169, -171,
	16, 17, 19, 28, 29, 33, 37, 39, 49, 50,
	51, 53, 55, 58, 59, 66, 67, 68, 69, 71,
	76, 80, 81, 87, 91, 92, 94, 100, 105, 112,
	120, 122, 127, 134, 135, 136, 137, 140, 141, 143,
	146, 148, 149, 155, 158, 161, 162, 165, 168, 169,
	171, 172, 174, 175, 176, 178, 180, 181, 183, 185,
	186, 188, 191, 192, 194, 196, 198, 201, 199, 205,
	206, 216, 217, 218, 219, 222, 223, 226, 227, 228,
	232, 237, 238, 239, 240, 30, 31, 32, 34, 35,
	38, 42, 43, 45, 70, 72, 73, 86, 88, 93,
	101, 103, 106, 107, 113, 114, 115, 117, 125, 145,
	147, 156, 160, 164, 166, 170, 182, 195, 200, 202,
	209, 213, 214, 229, 230, 4, 68, 49, 69, 100,
	109, 205, 208, 212, 18, -213, 212, -213, -213, -213,
	-212, 204, 204, -88, 68, 221, -26, -27, -25, -51,
	-52, 220, 116, 85, 154, -24, -25, -189, -191, 171,
	-188, -38, 130, 138, 189, 212, 208, -191, -48, -49,
	18, 78, 264, -133, -42, 152, -38, -72, 260, -3,
	-133, 106, -38, -42, 106, 97, 118, -134, -133, -38,
	106, -60, 106, -42, -62, 106, -61, -138, -137, -165,
	4, -169, -171, -170, 229, 47, 57, 98, 111, 119,
	121, 126, 128, 139, 157, 159, 179, 193, 151, 264,
	151, -99, -99, -37, 120, 210, 245, 97, 240, -45,
	6, 74, -64, 262, 97, -205, 151, 97, -161, 97,
	240, 120, -36, -37, -75, -133, -61, 106, 109, -38,
	106, -51, -52, -74, -91, -92, 129, 150, -76, 18,
	78, -76, -76, 37, 261, 261, 264, -191, -56, 260,
	-66, -65, -135, -106, 253, -108, 251, 252, 257, 142,
	241, -117, -42, -109, 9, 260, -120, -186, -25, 86,
	24, -118, -119, 182, -38, 8, 5, 6, 7, -40,
	-141, -150, 215, 89, 144, 40, -184, -185, 4, -169,
	-164, -142, -152, -146, -149, 117, 47, 61, 64, 62,
	65, 190, 224, 41, 88, 160, 164, 202, 213, 214,
	106, 145, 107, 45, 101, 125, 80, 31, 32, 34,
	35, 42, 43, 70, 72, 73, 93, 113, 114, 115,
	147, 170, 195, 209, 230, -170, -153, -154, -147, -148,
	-155, -65, -72, 253, -42, 260, -70, -105, 262, 265,
	258, -71, -125, -106, 74, -33, 174, -32, 17, 19,
	81, 227, 86, 174, 174, 86, -134, -43, -42, 191,
	-38, 25, 86, -35, 264, 39, 176, 86, 264, 86,
	261, 264, -204, -60, 204, 68, -210, -204, 127, -160,
	74, -167, -159, -126, 9, 215, 89, 151, -166, 5,
	252, -158, -165, 6, 8, 251, -160, 74, 59, -168,
	6, 4, -150, -126, 74, 130, 117, 262, -163, 4,
	-169, -171, -170, -172, 18, 20, 21, 22, 23, 24,
	25, 26, 27, 36, 40, 41, 44, 46, 48, 54,
	56, 60, 61, 62, 63, 64, 65, 74, 75, 77,
	78, 79, 82, 83, 85, 89, 90, 95, 96, 97,
	99, 102, 104, 108, 109, 110, 116, 118, 123, 124,
	129, 131, 132, 142, 144, 150, 151, 152, 153, 154,
	163, 167, 173, 177, 187, 190, 197, 203, 204, 207,
	210, 211, 215, 220, 221, 224, 225, 231, 233, 234,
	235, 236, -162, -207, 95, -204, -162, -162, 127, -35,
	264, 260, 142, -39, 106, -38, 142, -74, -92, -91,
	-93, -106, 18, -106, -108, -26, -26, -26, -53, -129,
	-106, -188, 25, -55, -38, -58, 97, 264, 10, 46,
	28, 251, 252, 253, 254, 255, 248, 249, 250, 247,
	243, 244, 245, 52, 133, 184, 12, 13, 14, 22,
	153, 128, 241, 193, 119, 30, 108, 25, 4, -106,
	-106, -106, -106, -106, 159, -25, -106, -63, -70, -25,
	-114, 258, 260, -70, 260, 6, 6, 260, -121, -106,
	-192, 237, 95, 260, 260, 260, 260, 260, 260, 260,
	260, 260, 260, 260, 260, 260, 260, 260, 166, -157,
	232, -157, -157, -143, 260, -143, -144, 260, -143, 260,
	-58, -42, -105, -163, 253, -163, -106, 264, 261, 264,
	210, -89, 54, 48, -102, 106, 48, -173, -38, 54,
	-174, 44, 221, 167, 96, -89, 54, -89, 54, 54,
	-133, 210, 210, -42, -104, 234, -95, -18, 260, 74,
	25, -67, -68, -136, -69, -42, 260, -38, -38, -42,
	-60, -61, -62, -12, -137, 210, -60, -55, 97, -44,
	169, 196, 175, 188, 264, 5, 8, 8, 6, -163,
	-206, -38, -133, -46, -47, -103, -102, -175, -173, 109,
	221, 86, 151, 142, 86, -94, 182, 183, 264, -31,
	26, 77, 260, 264, 261, -104, -59, -131, -133, -25,
	-132, 260, -135, -139, -140, -142, -151, -145, -149, -150,
	33, 38, 206, 200, 113, 114, 115, 195, 31, 170,
	93, 80, 73, 72, 147, 35, 34, -153, -154, -147,
	-148, 70, 209, 32, 43, 42, 230, -61, 208, -106,
	-106, -106, -106, -106, -106, -106, -106, -106, -106, -106,
	-106, -106, -106, -106, -106, -106, -106, -106, -106, -106,
	128, 193, 30, 108, 210, 144, 142, 215, 89, 222,
	78, 148, -214, 203, 27, -112, -25, 260, -163, -117,
	182, 260, 261, 264, -63, -116, 259, -106, -114, -63,
	261, 261, -63, 231, 18, 78, 253, -85, 239, 136,
	71, 105, 135, -86, 186, 8, -124, -123, 233, -193,
	91, 102, 260, 261, 261, -106, -80, -156, 4, 239,
	136, 71, 105, 135, 186, -81, -106, -82, -107, -108,
	251, 252, 257, 260, 182, -83, -106, -63, -106, 36,
	124, 211, -84, -106, 97, -63, -106, -106, -106, -63,
	-63, -63, 260, 8, 8, 8, -104, 261, 259, 266,
	-125, -32, -42, -38, -38, 142, -102, 106, -139, -38,
	260, 260, 122, 122, -38, -38, 106, -38, 106, -38,
	-38, -33, 174, -38, -38, 174, -106, -97, 151, -60,
	229, -38, -58, 264, 245, -60, -35, -206, -206, 219,
	51, 169, -167, -85, 264, 261, 264, -39, 109, -61,
	-42, 86, -38, -129, -15, -18, -14, -23, -9, -38,
	-73, 102, 264, 57, -79, 121, 139, 98, 126, 179,
	111, -128, -127, 25, -38, -128, -25, -132, -131, -57,
	24, -85, 260, 240, -106, 210, -214, 203, -112, -106,
	144, 215, 89, 222, 78, 148, 97, 260, -107, -107,
	-63, 260, -63, -106, 264, 259, 259, 264, 261, -52,
	264, -51, -106, -63, -63, 261, 210, 210, 210, 210,
	260, 261, -122, -123, 82, -106, -198, 158, 260, 260,
	-106, 25, 261, 97, 261, -87, 163, 261, 10, 251,
	252, 253, 254, 255, 248, 249, 250, 247, 243, 244,
	245, 52, 133, 184, 12, 13, 14, 119, 108, -107,
	-107, -107, -63, 260, 261, -110, -111, 97, 95, 25,
	-84, -84, -84, 261, 97, -63, 264, 264, 264, 261,
	261, 261, 8, 261, 264, 261, 261, -73, -106, 210,
	210, 86, 142, -176, -174, -106, -55, 260, 260, -29,
	81, 191, -90, 86, -35, 86, -35, 210, -89, 54,
	210, 53, 261, -104, -68, -125, 261, -38, -103, 260,
	-39, 260, 260, -38, 261, -113, 104, 37, -131, 121,
	121, -131, -79, 121, -77, 157, -77, -77, -38, 260,
	261, 258, 258, 8, -106, -106, -107, -107, 97, 260,
	-106, -115, -139, 22, 22, 261, -63, 261, 264, 261,
	-106, -114, 261, 231, -52, -52, -52, 136, 105, 135,
	-86, 135, -86, -86, 8, 6, 83, -106, 207, -199,
	-38, 260, 234, -51, 261, -139, -106, -110, -106, -139,
	-107, -107, -107, -107, -107, -107, -107, -107, -107, -107,
	-107, -107, -107, -107, -107, -107, -107, -107, 78, 142,
	148, -107, 264, -63, 261, -111, -110, -106, -106, -139,
	261, 261, 261, -63, -106, -106, -106, 261, 8, -113,
	259, -38, -38, -102, 86, -177, 54, -178, 46, 142,
	144, 221, 167, 44, 74, 173, 261, 261, -55, -55,
	142, 74, 142, 74, 67, 217, -38, -38, -42, -38,
	-38, -38, -96, 260, 151, -18, 245, -54, -130, -38,
	-187, 260, -184, -185, -40, 260, -46, -54, 151, -194,
	235, -106, -63, -131, -131, -78, 225, 151, 121, -131,
	260, -55, -127, 259, 8, 8, 261, 22, 22, -106,
	-115, 261, 264, -106, -106, 261, -106, 6, -106, 261,
	261, 261, 261, -106, -203, -38, -106, 261, 261, -111,
	97, 78, 148, 260, -106, 261, 261, 264, 261, 261,
	261, -194, -102, -38, -61, 144, 122, 260, -107, -42,
	-101, -211, 55, 201, 261, 261, 144, 144, -106, -139,
	-35, -35, 210, 210, 79, -54, 54, -72, -25, 260,
	261, 264, -41, -70, 46, -41, -106, 260, -54, 261,
	261, -42, -195, -197, -38, -78, 260, -106, -131, -55,
	261, 259, 259, -106, -106, 261, -139, 261, -52, -196,
	162, 261, -107, 97, 260, -115, 261, -106, -178, -106,
	-50, 260, 260, 173, -34, 46, -38, -38, 223, 143,
	261, -38, -101, -130, -31, -61, -31, 261, -63, 261,
	-101, 260, 264, 25, -55, 261, 261, -52, 37, -107,
	-115, 261, 261, 261, -181, 134, -55, -55, -42, -30,
	225, -61, 191, -104, -41, -52, -101, -54, -197, -199,
	261, -200, 168, 183, -63, 261, -179, -182, -180, 151,
	98, 161, 194, 261, 261, -50, -106, -67, -31, 261,
	261, 261, -201, -202, 30, 218, 59, -106, -201, -180,
	151, -182, 151, 223, 76, -181, -104, -101, -202, 165,
	94, 182, 165, 94, -183, 141, 176, 39, 191, -183,
	-179, 22, 16, 144, 74, -202,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 0,
	48, 49, 50, 0, 0, 290, 0, 0, 260, -2,
	0, 0, 234, 234, 234, 234, 292, 205, 289, -2,
	300, 0, 0, 0, 298, 274, 0, 0, -2, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 64, 0,
	66, 67, 68, 69, 0, 78, 79, 80, 82, 83,
	84, 85, 86, 87, 88, 0, 91, 734, 765, 775,
	95, 100, 0, 825, -2, 104, 60, 684, 685, 686,
	701, 702, 703, 704, 705, 706, 707, 708, 709, 710,
	711, 712, 713, 714, 715, 716, 717, 718, 719, 720,
	721, 722, 723, 724, 725, 726, 727, 728, 729, 730,
	731, 732, 733, 735, 736, 737, 738, 740, 741, 742,
	743, 744, 745, 746, 747, 748, 749, 750, 751, 752,
	753, 754, 755, 756, 757, 758, 759, 760, 761, 762,
	763, 764, 766, 767, 768, 769, 770, 771, 772, 773,
	774, 776, 777, 778, 779, 780, 781, 782, 783, 784,
	785, 786, 787, 788, 789, 790, 791, 792, 793, 794,
	795, 796, 797, 798, 799, 800, 801, 802, 803, 804,
	805, 806, 807, 808, 809, 810, 811, 812, 813, 814,
	815, 816, 817, 818, 819, 820, 821, 822, 823, 824,
	826, 827, 828, 829, 830, 130, 131, 0, 133, 143,
	0, 141, 0, 0, 139, 236, 233, 230, 231, 232,
	0, 291, 0, 0, 0, 204, -2, 270, 271, -2,
	0, 295, 295, 295, 0, 0, 271, 0, 279, 753,
	282, 667, 734, 739, 765, 775, 825, 280, 653, 0,
	297, 296, 0, 275, 350, 0, 662, 320, 0, 2,
	0, 807, 0, 0, 807, 0, 0, 0, 356, 52,
	807, 43, 807, 660, 56, 807, 58, 0, 70, 72,
	692, 693, 694, 695, 829, 831, 832, 833, 834, 835,
	836, 837, 838, 839, 840, 841, 842, 843, 0, 0,
	0, 92, 93, 94, 0, 0, 0, 0, 0, 103,
	125, 126, 61, 0, 0, 145, 0, 0, 136, 0,
	137, 0, 229, 235, 43, 354, 0, 807, 688, 238,
	807, -2, 0, 266, 307, 308, 0, 0, 0, 293,
	294, 0, 0, 0, 262, 263, 0, 281, 0, 0,
	323, 652, 654, 658, 659, 435, 0, 0, 0, 0,
	0, 0, 514, 515, 516, 0, 518, 519, 520, 802,
	0, 524, 525, 821, 662, 670, 671, 672, 673, 0,
	0, 0, 678, 679, 680, 637, 563, 534, -2, -2,
	668, 377, 378, 379, 380, -2, 831, 538, 540, 542,
	543, 544, 545, 0, 803, 817, 818, 824, 827, 828,
	807, 814, 808, 798, 805, 813, 722, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, 691, 401, 402, 407, 408,
	410, 323, 321, 351, 352, 0, 663, 643, 0, 0,
	0, 0, 649, 647, 648, 20, 226, 22, 0, 226,
	226, 0, 0, 0, 0, 0, 360, 0, 241, 0,
	357, 0, 0, 54, 0, 41, 42, 0, 0, 0,
	290, 0, 0, 75, 0, 718, 81, 0, 0, 96,
	98, 105, 107, 108, 109, 115, 116, 117, 118, 198,
	0, 200, 128, 129, 681, 0, 97, 99, 101, 102,
	119, 120, 0, 122, 123, 124, 418, 0, 62, 696,
	697, 698, 699, 700, 844, 845, 846, 847, 848, 849,
	850, 851, 852, 853, 854, 855, 856, 857, 858, 859,
	860, 861, 862, 863, 864, 865, 866, 867, 868, 869,
	870, 871, 872, 873, 874, 875, 876, 877, 878, 879,
	880, 881, 882, 883, 884, 885, 886, 887, 888, 889,
	890, 891, 892, 893, 894, 895, 896, 897, 898, 899,
	900, 901, 902, 903, 904, 905, 906, 907, 908, 909,
	910, 911, 912, 913, 914, 915, 916, 917, 918, 919,
	920, 921, 132, 134, 0, 142, 135, 140, 138, 201,
	0, 149, 0, 0, 807, 687, 0, 269, 305, 306,
	309, 312, 313, 310, 435, 276, 277, 278, 301, 302,
	215, 283, 0, 0, 664, 360, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 646, 0, 0, 657, 439,
	440, 441, 462, 463, 0, -2, 595, 0, 521, 522,
	523, 0, 0, -2, 0, 675, 432, 0, 0, 636,
	565, 0, 0, 0, 0, 0, 0, 0, 616, 622,
	0, 0, 0, 0, 0, 0, 0, 0, 391, 404,
	414, 412, 411, 393, 0, 392, 390, 0, 394, 0,
	360, 0, 644, 638, 639, 640, 0, 0, 651, 0,
	0, 0, 0, 225, 24, 807, 0, 34, 0, 0,
	171, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 51, 0, 248, 243, 0, 0,
	0, 323, 253, 255, 256, 0, 0, 358, 53, 661,
	43, 59, 57, 65, 71, 0, 76, 77, 0, 237,
	0, 112, 0, 114, 0, 199, 683, 682, 432, 63,
	144, 89, 355, 0, 148, 150, 152, 153, 154, 688,
	0, 0, 0, 0, 0, 311, 314, 315, 0, 304,
	213, 214, 290, 0, 666, 317, 322, 324, 341, 341,
	328, 0, 655, 436, 366, 367, 368, 369, 370, 432,
	373, 374, 375, 376, 384, 385, 386, 387, 388, 389,
	398, 0, 383, 383, 383, 395, 396, 399, 400, 405,
	406, 416, 417, 415, 415, 415, 413, 437, 0, 442,
	443, 444, 445, 446, 447, 448, 449, 450, -2, -2,
	-2, 454, 455, 456, -2, -2, -2, 460, 461, -2,
	0, 0, 646, 0, 0, 468, 0, 471, 473, 475,
	0, 0, 0, 0, 645, 485, 628, 0, 656, 470,
	0, 0, 517, 0, 0, 0, 601, 595, 602, 0,
	-2, 526, 300, 0, 0, 0, 0, 676, 419, 420,
	421, 422, 423, 424, 433, 0, 635, 631, 0, 573,
	0, 0, 0, 539, 541, 0, 0, 0, 605, 606,
	607, 608, 609, 610, 611, 0, 0, 0, 0, 487,
	0, 0, 0, 0, 821, 0, 595, 621, 0, 0,
	0, 0, 0, 595, 0, 627, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 317, 353, 641, 0,
	650, 23, 217, 0, 0, 0, 26, 807, 157, 0,
	0, 0, 0, 0, 228, 35, 807, 43, 807, 43,
	36, 21, 226, 216, 219, 0, 359, 240, 0, 0,
	245, 242, 360, 0, 0, 0, 55, 73, 74, 110,
	111, 113, 106, 121, 0, 146, 0, 0, 688, 0,
	0, 0, 239, 303, 0, 285, 286, 287, 288, 665,
	319, 0, 0, 0, 0, 0, 0, 347, 347, 347,
	345, 326, 340, 0, 339, 327, -2, 328, 0, 361,
	363, 371, 0, 0, -2, 0, 0, 0, 486, -2,
	469, 472, 474, 476, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 596, 0, 599, 600, 0, -2, 0,
	0, 299, 300, 300, 300, 532, 0, 0, 0, 0,
	0, 0, 0, 632, 0, 0, 533, 0, 0, 0,
	0, 0, 547, 0, 548, 0, 0, 549, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 489,
	490, 491, 0, 0, 550, 619, 620, 0, 0, 0,
	0, 0, 0, 555, 0, 626, 0, 0, 0, 559,
	560, 561, 0, 381, 0, 397, 409, 319, 0, 0,
	0, 0, 0, 155, 170, 0, 0, 0, 0, 28,
	0, 0, 0, 0, 32, 0, 38, 0, 0, 0,
	0, 251, 0, 252, 254, 257, 0, 90, 151, 0,
	0, 149, 0, 0, 284, 567, 0, 0, 325, 0,
	0, 0, 0, 0, 342, 346, 343, 344, 337, 0,
	330, 0, 0, 0, 438, -2, 0, 0, 0, 0,
	-2, 0, 597, 0, 0, 629, 0, 590, 0, -2,
	596, 603, 527, 0, 0, 0, 0, 425, 426, 427,
	428, 429, 430, 431, 0, 677, 630, 634, 0, 571,
	572, 576, 0, 0, 537, 0, 604, 613, 614, 488,
	492, 493, 494, 495, 496, 497, 498, 499, 500, -2,
	-2, -2, 504, 505, 506, -2, -2, -2, 0, 0,
	0, 615, 0, 0, 593, 617, 618, 623, 624, 0,
	552, 553, 554, 625, 0, 0, 0, 403, 0, 567,
	642, 221, 223, 25, 0, 156, 0, 159, 0, 0,
	162, 163, 0, 0, 0, 0, 172, 179, 0, 0,
	0, 40, 0, 0, 227, 0, 43, 43, 218, 0,
	0, 220, 0, 0, 0, 244, 0, 0, 206, 212,
	212, 0, 535, 536, 0, 0, 0, 0, 0, 272,
	0, 318, 316, 331, 0, 333, 0, 0, 0, 335,
	0, 0, 329, 364, 0, 0, 372, 0, 0, -2,
	0, 479, 0, -2, -2, 589, 596, 674, 300, 528,
	530, 531, 434, 633, 578, 575, 0, 562, 546, 612,
	0, 0, 0, 0, 596, 592, 551, 0, 557, 558,
	382, 273, 27, 0, 160, 161, 164, 0, 166, 181,
	173, 0, 176, 177, 174, 0, 29, 30, 39, 45,
	31, 37, 0, 0, 0, 0, 0, 258, 259, 0,
	179, 0, 215, 669, 0, 215, 0, 0, 0, 147,
	179, 0, 566, 568, 0, 332, 0, 349, 334, 0,
	338, 365, 362, -2, -2, 480, 598, 591, 0, 300,
	0, 564, -2, 0, 0, 0, 594, 0, 158, 0,
	185, 0, 0, 0, 47, 0, 222, 224, 0, 247,
	360, 250, 168, 207, 208, 211, 209, 212, 300, 179,
	202, 0, 0, 0, 0, 336, 529, 581, 0, -2,
	0, 512, 556, 165, 190, 0, 0, 0, 181, 33,
	0, 44, 0, 249, 215, 0, 169, 0, 569, 570,
	348, 0, 0, 0, 577, 513, 167, 186, 187, 0,
	182, 183, 184, 180, 178, 185, 46, 360, 210, 527,
	179, 574, 579, 582, -2, 778, 715, 0, 580, 188,
	0, 189, 0, 0, 0, 190, 246, 203, 0, 584,
	585, 586, 587, 588, 191, 0, 194, 195, 0, 192,
	175, 0, 193, 196, 197, 583,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 249, 3, 255, 250, 3,
	260, 261, 253, 251, 264, 252, 262, 254, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 266, 263,
	243, 245, 244, 3, 265, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 258, 3, 259, 248, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 247, 3, 257,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 246, 256,
}
var sqlTok3 = [...]int{
	0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:444
		{
			sqllex.(*scanner).stmts = sqlDollar[1].stmts
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:450
		{
			if sqlDollar[3].stmt != nil {
				sqlVAL.stmts = append(sqlDollar[1].stmts, sqlDollar[3].stmt)
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:456
		{
			if sqlDollar[1].stmt != nil {
				sqlVAL.stmts = []Statement{sqlDollar[1].stmt}
			} else {
				sqlVAL.stmts = nil
			}
		}
	case 13:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:475
		{
			sqlVAL.stmt = sqlDollar[1].selectStmt
		}
	case 19:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:484
		{
			sqlVAL.stmt = nil
		}
	case 20:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:490
		{
			sqlVAL.stmt = &AlterTable{Table: sqlDollar[3].qname, IfExists: false, Cmds: sqlDollar[4].alterTableCmds}
		}
	case 21:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:494
		{
			sqlVAL.stmt = &AlterTable{Table: sqlDollar[5].qname, IfExists: true, Cmds: sqlDollar[6].alterTableCmds}
		}
	case 22:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:500
		{
			sqlVAL.alterTableCmds = AlterTableCmds{sqlDollar[1].alterTableCmd}
		}
	case 23:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:504
		{
			sqlVAL.alterTableCmds = append(sqlDollar[1].alterTableCmds, sqlDollar[3].alterTableCmd)
		}
	case 24:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:511
		{
			sqlVAL.alterTableCmd = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].colDef}
		}
	case 25:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:516
		{
			sqlVAL.alterTableCmd = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].colDef}
		}
	case 26:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:521
		{
			sqlVAL.alterTableCmd = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].colDef}
		}
	case 27:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:526
		{
			sqlVAL.alterTableCmd = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].colDef}
		}
	case 28:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:530
		{
			unimplemented()
		}
	case 29:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:532
		{
			unimplemented()
		}
	case 30:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:534
		{
			unimplemented()
		}
	case 31:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:537
		{
			sqlVAL.alterTableCmd = &AlterTableDropColumn{columnKeyword: sqlDollar[2].boolVal, IfExists: true, Column: sqlDollar[5].str}
		}
	case 32:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:542
		{
			sqlVAL.alterTableCmd = &AlterTableDropColumn{columnKeyword: sqlDollar[2].boolVal, IfExists: false, Column: sqlDollar[3].str}
		}
	case 33:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:547
		{
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:550
		{
			sqlVAL.alterTableCmd = &AlterTableAddConstraint{ConstraintDef: sqlDollar[2].constraintDef}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:554
		{
			unimplemented()
		}
	case 36:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:556
		{
			unimplemented()
		}
	case 37:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:559
		{
			sqlVAL.alterTableCmd = &AlterTableDropConstraint{IfExists: true, Constraint: sqlDollar[5].str}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:564
		{
			sqlVAL.alterTableCmd = &AlterTableDropConstraint{IfExists: false, Constraint: sqlDollar[3].str}
		}
	case 39:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:569
		{
			unimplemented()
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:570
		{
			unimplemented()
		}
	case 41:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:573
		{
			unimplemented()
		}
	case 42:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:574
		{
			unimplemented()
		}
	case 43:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:575
		{
		}
	case 44:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:578
		{
			unimplemented()
		}
	case 45:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:579
		{
		}
	case 46:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:582
		{
			unimplemented()
		}
	case 47:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:583
		{
		}
	case 51:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:594
		{
			sqlVAL.stmt = &Delete{Table: sqlDollar[4].tblExpr, Where: newWhere(astWhere, sqlDollar[5].expr)}
		}
	case 52:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:601
		{
			sqlVAL.stmt = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 53:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:605
		{
			sqlVAL.stmt = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 54:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:609
		{
			sqlVAL.stmt = &DropIndex{Names: sqlDollar[3].qnames, IfExists: false}
		}
	case 55:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:613
		{
			sqlVAL.stmt = &DropIndex{Names: sqlDollar[5].qnames, IfExists: true}
		}
	case 56:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:617
		{
			sqlVAL.stmt = &DropTable{Names: sqlDollar[3].qnames, IfExists: false}
		}
	case 57:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:621
		{
			sqlVAL.stmt = &DropTable{Names: sqlDollar[5].qnames, IfExists: true}
		}
	case 58:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:627
		{
			sqlVAL.qnames = QualifiedNames{sqlDollar[1].qname}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:631
		{
			sqlVAL.qnames = append(sqlDollar[1].qnames, sqlDollar[3].qname)
		}
	case 60:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:637
		{
			sqlVAL.qname = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:641
		{
			sqlVAL.qname = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].indirect}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:647
		{
			sqlVAL.indirect = Indirection{NameIndirection(sqlDollar[2].str)}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:651
		{
			sqlVAL.indirect = append(sqlDollar[1].indirect, NameIndirection(sqlDollar[3].str))
		}
	case 64:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:658
		{
			sqlVAL.stmt = &Explain{Statement: sqlDollar[2].stmt}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:662
		{
			sqlVAL.stmt = &Explain{Options: sqlDollar[3].strs, Statement: sqlDollar[5].stmt}
		}
	case 66:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:668
		{
			sqlVAL.stmt = sqlDollar[1].selectStmt
		}
	case 70:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:677
		{
			sqlVAL.strs = []string{sqlDollar[1].str}
		}
	case 71:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:681
		{
			sqlVAL.strs = append(sqlDollar[1].strs, sqlDollar[3].str)
		}
	case 73:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:691
		{
			sqlVAL.stmt = &Grant{Privileges: sqlDollar[2].privilegeList, Grantees: NameList(sqlDollar[6].strs), Targets: sqlDollar[4].targetList}
		}
	case 74:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:698
		{
			sqlVAL.stmt = &Revoke{Privileges: sqlDollar[2].privilegeList, Grantees: NameList(sqlDollar[6].strs), Targets: sqlDollar[4].targetList}
		}
	case 75:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:705
		{
			sqlVAL.targetList = TargetList{Tables: QualifiedNames(sqlDollar[1].qnames)}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:709
		{
			// TODO(marc): this is postgres' grammar, but do we really need
			// both "x" and "TABLE X"?
			sqlVAL.targetList = TargetList{Tables: QualifiedNames(sqlDollar[2].qnames)}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:715
		{
			sqlVAL.targetList = TargetList{Databases: NameList(sqlDollar[2].strs)}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:722
		{
			sqlVAL.privilegeList = privilege.List{privilege.ALL}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:725
		{
		}
	case 80:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:729
		{
			sqlVAL.privilegeList = privilege.List{sqlDollar[1].privilegeType}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:733
		{
			sqlVAL.privilegeList = append(sqlDollar[1].privilegeList, sqlDollar[3].privilegeType)
		}
	case 82:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:740
		{
			sqlVAL.privilegeType = privilege.CREATE
		}
	case 83:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:744
		{
			sqlVAL.privilegeType = privilege.DROP
		}
	case 84:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:748
		{
			sqlVAL.privilegeType = privilege.GRANT
		}
	case 85:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:752
		{
			sqlVAL.privilegeType = privilege.SELECT
		}
	case 86:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:756
		{
			sqlVAL.privilegeType = privilege.INSERT
		}
	case 87:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:760
		{
			sqlVAL.privilegeType = privilege.DELETE
		}
	case 88:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:764
		{
			sqlVAL.privilegeType = privilege.UPDATE
		}
	case 89:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:772
		{
			sqlVAL.strs = []string{sqlDollar[1].str}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:776
		{
			sqlVAL.strs = append(sqlDollar[1].strs, sqlDollar[3].str)
		}
	case 91:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:784
		{
			sqlVAL.stmt = sqlDollar[2].stmt
		}
	case 92:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:788
		{
			sqlVAL.stmt = sqlDollar[3].stmt
		}
	case 93:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:792
		{
			sqlVAL.stmt = sqlDollar[3].stmt
		}
	case 94:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:798
		{
			sqlVAL.stmt = &SetTransaction{Isolation: sqlDollar[2].isoLevel}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:805
		{
			sqlVAL.stmt = &Set{Name: sqlDollar[1].qname, Values: sqlDollar[3].exprs}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:809
		{
			sqlVAL.stmt = &Set{Name: sqlDollar[1].qname, Values: sqlDollar[3].exprs}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:813
		{
			sqlVAL.stmt = &Set{Name: sqlDollar[1].qname}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:817
		{
			sqlVAL.stmt = &Set{Name: sqlDollar[1].qname}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:824
		{
			unimplemented()
		}
	case 102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:827
		{
			sqlVAL.stmt = &SetTimeZone{Value: sqlDollar[3].expr}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:830
		{
			unimplemented()
		}
	case 105:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:837
		{
			sqlVAL.exprs = []Expr{sqlDollar[1].expr}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:841
		{
			sqlVAL.exprs = append(sqlDollar[1].exprs, sqlDollar[3].expr)
		}
	case 109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:849
		{
			sqlVAL.expr = ValArg{name: sqlDollar[1].str}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:855
		{
			// Mapped to the closest supported isolation level.
			sqlVAL.isoLevel = SnapshotIsolation
		}
	case 111:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:860
		{
			// Mapped to the closest supported isolation level.
			sqlVAL.isoLevel = SnapshotIsolation
		}
	case 112:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:865
		{
			sqlVAL.isoLevel = SnapshotIsolation
		}
	case 113:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:869
		{
			// Mapped to the closest supported isolation level.
			sqlVAL.isoLevel = SerializableIsolation
		}
	case 114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:874
		{
			sqlVAL.isoLevel = SerializableIsolation
		}
	case 115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:880
		{
			sqlVAL.expr = DBool(true)
		}
	case 116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:884
		{
			sqlVAL.expr = DBool(false)
		}
	case 117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:888
		{
			sqlVAL.expr = DString(sqlDollar[1].str)
		}
	case 119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:903
		{
			sqlVAL.expr = DString(sqlDollar[1].str)
		}
	case 120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:907
		{
			sqlVAL.expr = DString(sqlDollar[1].str)
		}
	case 121:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:911
		{
			// TODO(pmattis): support opt_interval?
			expr := &CastExpr{Expr: DString(sqlDollar[2].str), Type: sqlDollar[1].colType}
			// Use an empty EvalContext.
			var ctx EvalContext
			d, err := expr.Eval(ctx)
			if err != nil {
				sqllex.Error("cannot evaluate to an interval type")
				return 1
			}
			if _, ok := d.(DInterval); !ok {
				panic("not an interval type")
			}
			sqlVAL.expr = d
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:928
		{
			sqlVAL.expr = DString(sqlDollar[1].str)
		}
	case 124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:932
		{
			sqlVAL.expr = DString(sqlDollar[1].str)
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:937
		{
			unimplemented()
		}
	case 126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:938
		{
			unimplemented()
		}
	case 127:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:939
		{
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:943
		{
			sqlVAL.expr = DString(sqlDollar[1].str)
		}
	case 129:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:947
		{
			sqlVAL.expr = DString(sqlDollar[1].str)
		}
	case 130:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:953
		{
			sqlVAL.stmt = &Show{Name: sqlDollar[2].str}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:957
		{
			sqlVAL.stmt = &Show{Name: sqlDollar[2].str}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:961
		{
			sqlVAL.stmt = &ShowColumns{Table: sqlDollar[4].qname}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:965
		{
			sqlVAL.stmt = &ShowDatabases{}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:969
		{
			sqlVAL.stmt = &ShowGrants{Targets: sqlDollar[3].targetListPtr, Grantees: sqlDollar[4].strs}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:973
		{
			sqlVAL.stmt = &ShowIndex{Table: sqlDollar[4].qname}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:977
		{
			sqlVAL.stmt = &ShowTables{Name: sqlDollar[3].qname}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:981
		{
			sqlVAL.stmt = &Show{Name: "TIME ZONE"}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:985
		{
			sqlVAL.stmt = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:989
		{
			sqlVAL.stmt = nil
		}
	case 140:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:995
		{
			sqlVAL.qname = sqlDollar[2].qname
		}
	case 141:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:999
		{
			sqlVAL.qname = nil
		}
	case 142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1005
		{
			tmp := sqlDollar[2].targetList
			sqlVAL.targetListPtr = &tmp
		}
	case 143:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1010
		{
			sqlVAL.targetListPtr = nil
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1016
		{
			sqlVAL.strs = sqlDollar[2].strs
		}
	case 145:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1020
		{
			sqlVAL.strs = nil
		}
	case 146:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1027
		{
			sqlVAL.stmt = &CreateTable{Table: sqlDollar[3].qname, IfNotExists: false, Defs: sqlDollar[5].tblDefs}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1031
		{
			sqlVAL.stmt = &CreateTable{Table: sqlDollar[6].qname, IfNotExists: true, Defs: sqlDollar[8].tblDefs}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1038
		{
			sqlVAL.tblDefs = nil
		}
	case 150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1044
		{
			sqlVAL.tblDefs = TableDefs{sqlDollar[1].tblDef}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1048
		{
			sqlVAL.tblDefs = append(sqlDollar[1].tblDefs, sqlDollar[3].tblDef)
		}
	case 152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1054
		{
			sqlVAL.tblDef = sqlDollar[1].colDef
		}
	case 154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1059
		{
			sqlVAL.tblDef = sqlDollar[1].constraintDef
		}
	case 155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1065
		{
			sqlVAL.colDef = newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].colType, sqlDollar[3].colQuals)
		}
	case 156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1071
		{
			sqlVAL.colQuals = append(sqlDollar[1].colQuals, sqlDollar[2].colQual)
		}
	case 157:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1075
		{
			sqlVAL.colQuals = nil
		}
	case 158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1081
		{
			// TODO(pmattis): Handle constraint name.
			sqlVAL.colQual = sqlDollar[3].colQual
		}
	case 160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1086
		{
			unimplemented()
		}
	case 161:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1102
		{
			sqlVAL.colQual = NotNullConstraint{}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1106
		{
			sqlVAL.colQual = NullConstraint{}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1110
		{
			sqlVAL.colQual = UniqueConstraint{}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1114
		{
			sqlVAL.colQual = PrimaryKeyConstraint{}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1117
		{
			unimplemented()
		}
	case 166:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1119
		{
			if ContainsVars(sqlDollar[2].expr) {
				sqllex.Error("default expression contains a variable")
				return 1
			}
			if containsSubquery(sqlDollar[2].expr) {
				sqllex.Error("default expression contains a subquery")
				return 1
			}
			sqlVAL.colQual = &ColumnDefault{Expr: sqlDollar[2].expr}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1130
		{
			unimplemented()
		}
	case 168:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1134
		{
			sqlVAL.tblDef = &IndexTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].idxElems,
				Storing: sqlDollar[6].strs,
			}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1142
		{
			sqlVAL.tblDef = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:    Name(sqlDollar[3].str),
					Columns: sqlDollar[5].idxElems,
					Storing: sqlDollar[7].strs,
				},
			}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1157
		{
			sqlVAL.constraintDef = sqlDollar[3].constraintDef
			sqlVAL.constraintDef.setName(Name(sqlDollar[2].str))
		}
	case 171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1162
		{
			sqlVAL.constraintDef = sqlDollar[1].constraintDef
		}
	case 172:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1167
		{
			unimplemented()
		}
	case 173:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1169
		{
			sqlVAL.constraintDef = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[3].strs),
					Storing: sqlDollar[5].strs,
				},
			}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1178
		{
			sqlVAL.constraintDef = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[4].strs),
				},
				PrimaryKey: true,
			}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1187
		{
			unimplemented()
		}
	case 178:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1204
		{
			sqlVAL.strs = sqlDollar[3].strs
		}
	case 179:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1208
		{
			sqlVAL.strs = nil
		}
	case 180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1214
		{
			sqlVAL.strs = sqlDollar[2].strs
		}
	case 181:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1218
		{
			sqlVAL.strs = nil
		}
	case 182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1223
		{
			unimplemented()
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1224
		{
			unimplemented()
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1225
		{
			unimplemented()
		}
	case 185:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1226
		{
		}
	case 186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1233
		{
			unimplemented()
		}
	case 187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1234
		{
			unimplemented()
		}
	case 188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1235
		{
			unimplemented()
		}
	case 189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1236
		{
			unimplemented()
		}
	case 190:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1237
		{
		}
	case 191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1240
		{
			unimplemented()
		}
	case 192:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1243
		{
			unimplemented()
		}
	case 193:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1246
		{
			unimplemented()
		}
	case 194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1247
		{
			unimplemented()
		}
	case 195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1248
		{
			unimplemented()
		}
	case 196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1249
		{
			unimplemented()
		}
	case 197:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1250
		{
			unimplemented()
		}
	case 198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1254
		{
			sqlVAL.expr = NumVal(sqlDollar[1].str)
		}
	case 199:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1258
		{
			sqlVAL.expr = NumVal("-" + sqlDollar[2].str)
		}
	case 200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1262
		{
			sqlVAL.expr = DInt(sqlDollar[1].ival.Val)
		}
	case 201:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1269
		{
			sqlVAL.stmt = &Truncate{Tables: sqlDollar[3].qnames}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1276
		{
			sqlVAL.stmt = &CreateIndex{
				Name:    Name(sqlDollar[4].str),
				Table:   sqlDollar[6].qname,
				Unique:  sqlDollar[2].boolVal,
				Columns: sqlDollar[8].idxElems,
				Storing: sqlDollar[10].strs,
			}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql.y:1286
		{
			sqlVAL.stmt = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].qname,
				Unique:      sqlDollar[2].boolVal,
				IfNotExists: true,
				Columns:     sqlDollar[11].idxElems,
				Storing:     sqlDollar[13].strs,
			}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1299
		{
			sqlVAL.boolVal = true
		}
	case 205:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1303
		{
			sqlVAL.boolVal = false
		}
	case 206:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1309
		{
			sqlVAL.idxElems = IndexElemList{sqlDollar[1].idxElem}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1313
		{
			sqlVAL.idxElems = append(sqlDollar[1].idxElems, sqlDollar[3].idxElem)
		}
	case 208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1322
		{
			sqlVAL.idxElem = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].dir}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1325
		{
			unimplemented()
		}
	case 210:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1326
		{
			unimplemented()
		}
	case 211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1329
		{
			unimplemented()
		}
	case 212:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1330
		{
		}
	case 213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1334
		{
			sqlVAL.dir = Ascending
		}
	case 214:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1338
		{
			sqlVAL.dir = Descending
		}
	case 215:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1342
		{
			sqlVAL.dir = DefaultDirection
		}
	case 216:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1349
		{
			sqlVAL.stmt = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1353
		{
			sqlVAL.stmt = &RenameTable{Name: sqlDollar[3].qname, NewName: sqlDollar[6].qname, IfExists: false}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1357
		{
			sqlVAL.stmt = &RenameTable{Name: sqlDollar[5].qname, NewName: sqlDollar[8].qname, IfExists: true}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1361
		{
			sqlVAL.stmt = &RenameIndex{Name: sqlDollar[3].qname, NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1365
		{
			sqlVAL.stmt = &RenameIndex{Name: sqlDollar[5].qname, NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1369
		{
			sqlVAL.stmt = &RenameColumn{Table: sqlDollar[3].qname, Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 222:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1373
		{
			sqlVAL.stmt = &RenameColumn{Table: sqlDollar[5].qname, Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1377
		{
			sqlVAL.stmt = nil
		}
	case 224:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1381
		{
			sqlVAL.stmt = nil
		}
	case 225:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1387
		{
			sqlVAL.boolVal = true
		}
	case 226:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1391
		{
			sqlVAL.boolVal = false
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1396
		{
		}
	case 228:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1397
		{
		}
	case 229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1402
		{
			sqlVAL.stmt = &BeginTransaction{Isolation: sqlDollar[3].isoLevel}
		}
	case 230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1406
		{
			sqlVAL.stmt = &CommitTransaction{}
		}
	case 231:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1410
		{
			sqlVAL.stmt = &CommitTransaction{}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1414
		{
			sqlVAL.stmt = &RollbackTransaction{}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1419
		{
		}
	case 234:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1420
		{
		}
	case 236:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1425
		{
			sqlVAL.isoLevel = UnspecifiedIsolation
		}
	case 237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1431
		{
			sqlVAL.isoLevel = sqlDollar[3].isoLevel
		}
	case 238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1437
		{
			sqlVAL.stmt = &CreateDatabase{Name: Name(sqlDollar[3].str)}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1441
		{
			sqlVAL.stmt = &CreateDatabase{IfNotExists: true, Name: Name(sqlDollar[6].str)}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1447
		{
			sqlVAL.stmt = sqlDollar[5].stmt
			sqlVAL.stmt.(*Insert).Table = sqlDollar[4].qname
		}
	case 243:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1463
		{
			sqlVAL.stmt = &Insert{Rows: sqlDollar[1].selectStmt}
		}
	case 244:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1467
		{
			sqlVAL.stmt = &Insert{Columns: sqlDollar[2].qnames, Rows: sqlDollar[4].selectStmt}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1471
		{
			sqlVAL.stmt = &Insert{}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1478
		{
			unimplemented()
		}
	case 247:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1479
		{
			unimplemented()
		}
	case 248:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1480
		{
		}
	case 249:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1483
		{
			unimplemented()
		}
	case 250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1484
		{
			unimplemented()
		}
	case 251:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1485
		{
		}
	case 252:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1490
		{
			sqlVAL.stmt = &Update{Table: sqlDollar[3].tblExpr, Exprs: sqlDollar[5].updateExprs, Where: newWhere(astWhere, sqlDollar[7].expr)}
		}
	case 253:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1496
		{
			sqlVAL.updateExprs = UpdateExprs{sqlDollar[1].updateExpr}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1500
		{
			sqlVAL.updateExprs = append(sqlDollar[1].updateExprs, sqlDollar[3].updateExpr)
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1510
		{
			sqlVAL.updateExpr = &UpdateExpr{Names: QualifiedNames{sqlDollar[1].qname}, Expr: sqlDollar[3].expr}
		}
	case 258:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1522
		{
			sqlVAL.updateExpr = &UpdateExpr{Tuple: true, Names: sqlDollar[2].qnames, Expr: Tuple(sqlDollar[5].exprs)}
		}
	case 259:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1526
		{
			sqlVAL.updateExpr = &UpdateExpr{Tuple: true, Names: sqlDollar[2].qnames, Expr: &Subquery{Select: sqlDollar[5].selectStmt}}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1573
		{
			sqlVAL.selectStmt = &ParenSelect{Select: sqlDollar[2].selectStmt}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1577
		{
			sqlVAL.selectStmt = &ParenSelect{Select: sqlDollar[2].selectStmt}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1593
		{
			sqlVAL.selectStmt = sqlDollar[1].selectStmt
			if s, ok := sqlVAL.selectStmt.(*Select); ok {
				s.OrderBy = sqlDollar[2].orderBy
			}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1600
		{
			sqlVAL.selectStmt = sqlDollar[1].selectStmt
			if s, ok := sqlVAL.selectStmt.(*Select); ok {
				s.OrderBy = sqlDollar[2].orderBy
				s.Limit = sqlDollar[3].limit
			}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1608
		{
			sqlVAL.selectStmt = sqlDollar[2].selectStmt
		}
	case 268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1612
		{
			sqlVAL.selectStmt = sqlDollar[2].selectStmt
			if s, ok := sqlVAL.selectStmt.(*Select); ok {
				s.OrderBy = sqlDollar[3].orderBy
			}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1619
		{
			sqlVAL.selectStmt = sqlDollar[2].selectStmt
			if s, ok := sqlVAL.selectStmt.(*Select); ok {
				s.OrderBy = sqlDollar[3].orderBy
				s.Limit = sqlDollar[4].limit
			}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1657
		{
			sqlVAL.selectStmt = &Select{
				Exprs:   sqlDollar[3].selExprs,
				From:    sqlDollar[4].tblExprs,
				Where:   newWhere(astWhere, sqlDollar[5].expr),
				GroupBy: sqlDollar[6].groupBy,
				Having:  newWhere(astHaving, sqlDollar[7].expr),
			}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1669
		{
			sqlVAL.selectStmt = &Select{
				Distinct: sqlDollar[2].boolVal,
				Exprs:    sqlDollar[3].selExprs,
				From:     sqlDollar[4].tblExprs,
				Where:    newWhere(astWhere, sqlDollar[5].expr),
				GroupBy:  sqlDollar[6].groupBy,
				Having:   newWhere(astHaving, sqlDollar[7].expr),
			}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1681
		{
			sqlVAL.selectStmt = &Select{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        TableExprs{&AliasedTableExpr{Expr: sqlDollar[2].qname}},
				tableSelect: true,
			}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1689
		{
			sqlVAL.selectStmt = &Union{
				Type:  astUnion,
				Left:  sqlDollar[1].selectStmt,
				Right: sqlDollar[4].selectStmt,
				All:   sqlDollar[3].boolVal,
			}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1698
		{
			sqlVAL.selectStmt = &Union{
				Type:  astIntersect,
				Left:  sqlDollar[1].selectStmt,
				Right: sqlDollar[4].selectStmt,
				All:   sqlDollar[3].boolVal,
			}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1707
		{
			sqlVAL.selectStmt = &Union{
				Type:  astExcept,
				Left:  sqlDollar[1].selectStmt,
				Right: sqlDollar[4].selectStmt,
				All:   sqlDollar[3].boolVal,
			}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1725
		{
			unimplemented()
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1726
		{
			unimplemented()
		}
	case 281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1727
		{
			unimplemented()
		}
	case 282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1730
		{
			unimplemented()
		}
	case 283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1731
		{
			unimplemented()
		}
	case 284:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1734
		{
			unimplemented()
		}
	case 285:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1738
		{
			sqlVAL.stmt = sqlDollar[1].selectStmt
		}
	case 289:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1746
		{
			unimplemented()
		}
	case 290:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1747
		{
		}
	case 291:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1750
		{
		}
	case 292:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1751
		{
		}
	case 293:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1755
		{
			sqlVAL.boolVal = true
		}
	case 294:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1759
		{
			sqlVAL.boolVal = false
		}
	case 295:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1763
		{
			sqlVAL.boolVal = false
		}
	case 296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1769
		{
			sqlVAL.boolVal = true
		}
	case 297:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1774
		{
		}
	case 298:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1775
		{
		}
	case 299:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1779
		{
			sqlVAL.orderBy = sqlDollar[1].orderBy
		}
	case 300:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1783
		{
			sqlVAL.orderBy = nil
		}
	case 301:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1789
		{
			sqlVAL.orderBy = OrderBy(sqlDollar[3].orders)
		}
	case 302:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1795
		{
			sqlVAL.orders = []*Order{sqlDollar[1].order}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1799
		{
			sqlVAL.orders = append(sqlDollar[1].orders, sqlDollar[3].order)
		}
	case 304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1805
		{
			sqlVAL.order = &Order{Expr: sqlDollar[1].expr, Direction: sqlDollar[2].dir}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1813
		{
			if sqlDollar[1].limit == nil {
				sqlVAL.limit = sqlDollar[2].limit
			} else {
				sqlVAL.limit = sqlDollar[1].limit
				sqlVAL.limit.Offset = sqlDollar[2].limit.Offset
			}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1822
		{
			sqlVAL.limit = sqlDollar[1].limit
			if sqlDollar[2].limit != nil {
				sqlVAL.limit.Count = sqlDollar[2].limit.Count
			}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1833
		{
			if sqlDollar[2].expr == nil {
				sqlVAL.limit = nil
			} else {
				sqlVAL.limit = &Limit{Count: sqlDollar[2].expr}
			}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1846
		{
			sqlVAL.limit = &Limit{Offset: sqlDollar[2].expr}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1853
		{
			sqlVAL.limit = &Limit{Offset: sqlDollar[2].expr}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1860
		{
			sqlVAL.expr = nil
		}
	case 314:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1874
		{
		}
	case 315:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1875
		{
		}
	case 316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1901
		{
			sqlVAL.groupBy = GroupBy(sqlDollar[3].exprs)
		}
	case 317:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1905
		{
			sqlVAL.groupBy = nil
		}
	case 318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1911
		{
			sqlVAL.expr = sqlDollar[2].expr
		}
	case 319:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1915
		{
			sqlVAL.expr = nil
		}
	case 320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1921
		{
			sqlVAL.selectStmt = Values{Tuple(sqlDollar[2].exprs)}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1925
		{
			sqlVAL.selectStmt = append(sqlDollar[1].selectStmt.(Values), Tuple(sqlDollar[3].exprs))
		}
	case 322:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1935
		{
			sqlVAL.tblExprs = sqlDollar[2].tblExprs
		}
	case 323:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1939
		{
			sqlVAL.tblExprs = nil
		}
	case 324:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1945
		{
			sqlVAL.tblExprs = TableExprs{sqlDollar[1].tblExpr}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1949
		{
			sqlVAL.tblExprs = append(sqlDollar[1].tblExprs, sqlDollar[3].tblExpr)
		}
	case 326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1956
		{
			sqlVAL.tblExpr = &AliasedTableExpr{Expr: sqlDollar[1].qname, As: Name(sqlDollar[2].str)}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1960
		{
			sqlVAL.tblExpr = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].selectStmt}, As: Name(sqlDollar[2].str)}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1964
		{
			unimplemented()
		}
	case 330:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1982
		{
			sqlVAL.tblExpr = &ParenTableExpr{Expr: sqlDollar[2].tblExpr}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1986
		{
			sqlVAL.tblExpr = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].tblExpr, Right: sqlDollar[4].tblExpr}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1990
		{
			sqlVAL.tblExpr = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].tblExpr, Right: sqlDollar[4].tblExpr, Cond: sqlDollar[5].joinCond}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1994
		{
			sqlVAL.tblExpr = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].tblExpr, Right: sqlDollar[3].tblExpr, Cond: sqlDollar[4].joinCond}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1998
		{
			sqlVAL.tblExpr = &JoinTableExpr{Join: astNaturalJoin, Left: sqlDollar[1].tblExpr, Right: sqlDollar[5].tblExpr}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2002
		{
			sqlVAL.tblExpr = &JoinTableExpr{Join: astNaturalJoin, Left: sqlDollar[1].tblExpr, Right: sqlDollar[4].tblExpr}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2007
		{
			unimplemented()
		}
	case 337:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2009
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 338:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2012
		{
			unimplemented()
		}
	case 339:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2014
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 341:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2021
		{
			sqlVAL.str = ""
		}
	case 342:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2027
		{
			sqlVAL.str = astFullJoin
		}
	case 343:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2031
		{
			sqlVAL.str = astLeftJoin
		}
	case 344:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2035
		{
			sqlVAL.str = astRightJoin
		}
	case 345:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2039
		{
			sqlVAL.str = astInnerJoin
		}
	case 346:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2045
		{
		}
	case 347:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2046
		{
		}
	case 348:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2057
		{
			sqlVAL.joinCond = &UsingJoinCond{Cols: NameList(sqlDollar[3].strs)}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2061
		{
			sqlVAL.joinCond = &OnJoinCond{Expr: sqlDollar[2].expr}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2067
		{
			sqlVAL.qname = sqlDollar[1].qname
		}
	case 351:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2071
		{
			// TODO(pmattis): Handle the "*".
			sqlVAL.qname = sqlDollar[1].qname
		}
	case 352:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2076
		{
			// TODO(pmattis): Support ONLY.
			sqlVAL.qname = sqlDollar[2].qname
		}
	case 353:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2081
		{
			// TODO(pmattis): Support ONLY.
			sqlVAL.qname = sqlDollar[3].qname
		}
	case 354:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2088
		{
			sqlVAL.qnames = QualifiedNames{sqlDollar[1].qname}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2092
		{
			sqlVAL.qnames = append(sqlDollar[1].qnames, sqlDollar[3].qname)
		}
	case 356:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2105
		{
			sqlVAL.tblExpr = &AliasedTableExpr{Expr: sqlDollar[1].qname}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2109
		{
			sqlVAL.tblExpr = &AliasedTableExpr{Expr: sqlDollar[1].qname, As: Name(sqlDollar[2].str)}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2113
		{
			sqlVAL.tblExpr = &AliasedTableExpr{Expr: sqlDollar[1].qname, As: Name(sqlDollar[3].str)}
		}
	case 359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2119
		{
			sqlVAL.expr = sqlDollar[2].expr
		}
	case 360:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2123
		{
			sqlVAL.expr = nil
		}
	case 361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2135
		{
			sqlVAL.colType = sqlDollar[1].colType
		}
	case 362:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2139
		{
			unimplemented()
		}
	case 363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2140
		{
			unimplemented()
		}
	case 364:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2143
		{
			unimplemented()
		}
	case 365:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2144
		{
			unimplemented()
		}
	case 366:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2145
		{
		}
	case 372:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2153
		{
			unimplemented()
		}
	case 373:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2155
		{
			sqlVAL.colType = &BytesType{Name: "BLOB"}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2159
		{
			sqlVAL.colType = &BytesType{Name: "BYTES"}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2163
		{
			sqlVAL.colType = &StringType{Name: "TEXT"}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2167
		{
			sqlVAL.colType = &StringType{Name: "STRING"}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2188
		{
			sqlVAL.colType = &DecimalType{Prec: int(sqlDollar[2].ival.Val)}
		}
	case 382:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2192
		{
			sqlVAL.colType = &DecimalType{Prec: int(sqlDollar[2].ival.Val), Scale: int(sqlDollar[4].ival.Val)}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2196
		{
			sqlVAL.colType = &DecimalType{}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2203
		{
			sqlVAL.colType = &IntType{Name: "INT"}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2207
		{
			sqlVAL.colType = &IntType{Name: "INT64"}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2211
		{
			sqlVAL.colType = &IntType{Name: "INTEGER"}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2215
		{
			sqlVAL.colType = &IntType{Name: "SMALLINT"}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2219
		{
			sqlVAL.colType = &IntType{Name: "BIGINT"}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2223
		{
			sqlVAL.colType = &FloatType{Name: "REAL"}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2227
		{
			sqlVAL.colType = &FloatType{Name: "FLOAT", Prec: int(sqlDollar[2].ival.Val)}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2231
		{
			sqlVAL.colType = &FloatType{Name: "DOUBLE PRECISION"}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2235
		{
			sqlVAL.colType = sqlDollar[2].colType
			sqlVAL.colType.(*DecimalType).Name = "DECIMAL"
		}
	case 393:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2240
		{
			sqlVAL.colType = sqlDollar[2].colType
			sqlVAL.colType.(*DecimalType).Name = "DEC"
		}
	case 394:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2245
		{
			sqlVAL.colType = sqlDollar[2].colType
			sqlVAL.colType.(*DecimalType).Name = "NUMERIC"
		}
	case 395:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2250
		{
			sqlVAL.colType = &BoolType{Name: "BOOLEAN"}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2254
		{
			sqlVAL.colType = &BoolType{Name: "BOOL"}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2260
		{
			sqlVAL.ival = sqlDollar[2].ival
		}
	case 398:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2264
		{
			sqlVAL.ival = IntVal{}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2282
		{
			sqlVAL.colType = &IntType{Name: "BIT", N: int(sqlDollar[4].ival.Val)}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2288
		{
			sqlVAL.colType = &IntType{Name: "BIT"}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2304
		{
			sqlVAL.colType = sqlDollar[1].colType
			sqlVAL.colType.(*StringType).N = int(sqlDollar[3].ival.Val)
		}
	case 410:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2311
		{
			sqlVAL.colType = sqlDollar[1].colType
		}
	case 411:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2317
		{
			sqlVAL.colType = &StringType{Name: "CHAR"}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2321
		{
			sqlVAL.colType = &StringType{Name: "CHAR"}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2325
		{
			sqlVAL.colType = &StringType{Name: "VARCHAR"}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2330
		{
		}
	case 415:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2331
		{
		}
	case 416:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2336
		{
			sqlVAL.colType = &DateType{}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2340
		{
			sqlVAL.colType = &TimestampType{}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2345
		{
			sqlVAL.colType = &IntervalType{}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2350
		{
			unimplemented()
		}
	case 420:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2351
		{
			unimplemented()
		}
	case 421:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2352
		{
			unimplemented()
		}
	case 422:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2353
		{
			unimplemented()
		}
	case 423:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2354
		{
			unimplemented()
		}
	case 424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2355
		{
			unimplemented()
		}
	case 425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2356
		{
			unimplemented()
		}
	case 426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2357
		{
			unimplemented()
		}
	case 427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2358
		{
			unimplemented()
		}
	case 428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2359
		{
			unimplemented()
		}
	case 429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2360
		{
			unimplemented()
		}
	case 430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2361
		{
			unimplemented()
		}
	case 431:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2362
		{
			unimplemented()
		}
	case 432:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2363
		{
		}
	case 433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2366
		{
			unimplemented()
		}
	case 434:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2367
		{
			unimplemented()
		}
	case 436:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2391
		{
			sqlVAL.expr = &CastExpr{Expr: sqlDollar[1].expr, Type: sqlDollar[3].colType}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2394
		{
			unimplemented()
		}
	case 438:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2395
		{
			unimplemented()
		}
	case 439:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2404
		{
			sqlVAL.expr = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].expr}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2408
		{
			sqlVAL.expr = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].expr}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2412
		{
			sqlVAL.expr = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].expr}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2416
		{
			sqlVAL.expr = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2420
		{
			sqlVAL.expr = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 444:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2424
		{
			sqlVAL.expr = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2428
		{
			sqlVAL.expr = &BinaryExpr{Operator: Div, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2432
		{
			sqlVAL.expr = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2436
		{
			sqlVAL.expr = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2440
		{
			sqlVAL.expr = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2444
		{
			sqlVAL.expr = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2448
		{
			sqlVAL.expr = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2452
		{
			sqlVAL.expr = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2456
		{
			sqlVAL.expr = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2460
		{
			sqlVAL.expr = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2464
		{
			sqlVAL.expr = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2468
		{
			sqlVAL.expr = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2472
		{
			sqlVAL.expr = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2476
		{
			sqlVAL.expr = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2480
		{
			sqlVAL.expr = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2484
		{
			sqlVAL.expr = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2488
		{
			sqlVAL.expr = &AndExpr{Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2492
		{
			sqlVAL.expr = &OrExpr{Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2496
		{
			sqlVAL.expr = &NotExpr{Expr: sqlDollar[2].expr}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2500
		{
			sqlVAL.expr = &NotExpr{Expr: sqlDollar[2].expr}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2504
		{
			sqlVAL.expr = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2508
		{
			sqlVAL.expr = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].expr, Right: sqlDollar[4].expr}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2512
		{
			sqlVAL.expr = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].expr, Right: sqlDollar[4].expr}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2516
		{
			sqlVAL.expr = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].expr, Right: sqlDollar[5].expr}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2520
		{
			sqlVAL.expr = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].expr, Right: DNull}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2524
		{
			sqlVAL.expr = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].expr, Right: DNull}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2527
		{
			unimplemented()
		}
	case 471:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2529
		{
			sqlVAL.expr = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].expr, Right: DBool(true)}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2533
		{
			sqlVAL.expr = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].expr, Right: DBool(true)}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2537
		{
			sqlVAL.expr = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].expr, Right: DBool(false)}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2541
		{
			sqlVAL.expr = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].expr, Right: DBool(false)}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2545
		{
			sqlVAL.expr = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].expr, Right: DNull}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2549
		{
			sqlVAL.expr = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].expr, Right: DNull}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2553
		{
			sqlVAL.expr = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].expr, Right: sqlDollar[5].expr}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2557
		{
			sqlVAL.expr = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].expr, Right: sqlDollar[6].expr}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2561
		{
			sqlVAL.expr = &IsOfTypeExpr{Expr: sqlDollar[1].expr, Types: sqlDollar[5].colTypes}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2565
		{
			sqlVAL.expr = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].expr, Types: sqlDollar[6].colTypes}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2569
		{
			sqlVAL.expr = &RangeCond{Left: sqlDollar[1].expr, From: sqlDollar[4].expr, To: sqlDollar[6].expr}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2573
		{
			sqlVAL.expr = &RangeCond{Not: true, Left: sqlDollar[1].expr, From: sqlDollar[5].expr, To: sqlDollar[7].expr}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2577
		{
			sqlVAL.expr = &RangeCond{Left: sqlDollar[1].expr, From: sqlDollar[4].expr, To: sqlDollar[6].expr}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2581
		{
			sqlVAL.expr = &RangeCond{Not: true, Left: sqlDollar[1].expr, From: sqlDollar[5].expr, To: sqlDollar[7].expr}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2585
		{
			sqlVAL.expr = &ComparisonExpr{Operator: In, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2589
		{
			sqlVAL.expr = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].expr, Right: sqlDollar[4].expr}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2606
		{
			sqlVAL.expr = &CastExpr{Expr: sqlDollar[1].expr, Type: sqlDollar[3].colType}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2610
		{
			sqlVAL.expr = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].expr}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2614
		{
			sqlVAL.expr = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].expr}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2618
		{
			sqlVAL.expr = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].expr}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2622
		{
			sqlVAL.expr = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2626
		{
			sqlVAL.expr = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2630
		{
			sqlVAL.expr = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2634
		{
			sqlVAL.expr = &BinaryExpr{Operator: Div, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2638
		{
			sqlVAL.expr = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2642
		{
			sqlVAL.expr = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2646
		{
			sqlVAL.expr = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2650
		{
			sqlVAL.expr = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2654
		{
			sqlVAL.expr = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2658
		{
			sqlVAL.expr = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2662
		{
			sqlVAL.expr = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2666
		{
			sqlVAL.expr = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2670
		{
			sqlVAL.expr = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2674
		{
			sqlVAL.expr = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2678
		{
			sqlVAL.expr = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2682
		{
			sqlVAL.expr = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2686
		{
			sqlVAL.expr = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2690
		{
			sqlVAL.expr = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2694
		{
			sqlVAL.expr = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].expr, Right: sqlDollar[5].expr}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2698
		{
			sqlVAL.expr = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].expr, Right: sqlDollar[6].expr}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2702
		{
			sqlVAL.expr = &IsOfTypeExpr{Expr: sqlDollar[1].expr, Types: sqlDollar[5].colTypes}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2706
		{
			sqlVAL.expr = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].expr, Types: sqlDollar[6].colTypes}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2718
		{
			sqlVAL.expr = sqlDollar[1].qname
		}
	case 516:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2723
		{
			sqlVAL.expr = ValArg{name: sqlDollar[1].str}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2727
		{
			sqlVAL.expr = &ParenExpr{Expr: sqlDollar[2].expr}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2733
		{
			sqlVAL.expr = &Subquery{Select: sqlDollar[1].selectStmt}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2737
		{
			sqlVAL.expr = &Subquery{Select: sqlDollar[1].selectStmt}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2741
		{
			sqlVAL.expr = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].selectStmt}}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2747
		{
			sqlVAL.expr = sqlDollar[2].expr
		}
	case 524:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2751
		{
			sqlVAL.expr = sqlDollar[1].expr
		}
	case 525:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2755
		{
			sqlVAL.expr = sqlDollar[1].expr
		}
	case 526:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2763
		{
			sqlVAL.expr = &FuncExpr{Name: sqlDollar[1].qname}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2767
		{
			// TODO(pmattis): Support opt_sort_clause or remove it?
			sqlVAL.expr = &FuncExpr{Name: sqlDollar[1].qname, Exprs: sqlDollar[3].exprs}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2771
		{
			unimplemented()
		}
	case 529:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2772
		{
			unimplemented()
		}
	case 530:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2774
		{
			// TODO(pmattis): Support opt_sort_clause or remove it?
			sqlVAL.expr = &FuncExpr{Name: sqlDollar[1].qname, Type: All, Exprs: sqlDollar[4].exprs}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2779
		{
			// TODO(pmattis): Support opt_sort_clause or remove it?
			sqlVAL.expr = &FuncExpr{Name: sqlDollar[1].qname, Type: Distinct, Exprs: sqlDollar[4].exprs}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2784
		{
			sqlVAL.expr = &FuncExpr{Name: sqlDollar[1].qname, Exprs: Exprs{StarExpr()}}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2797
		{
			// TODO(pmattis): Support within_group_clause, filter_clause and
			// over_clause?
			sqlVAL.expr = sqlDollar[1].expr
		}
	case 534:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2803
		{
			sqlVAL.expr = sqlDollar[1].expr
		}
	case 535:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2812
		{
			unimplemented()
		}
	case 536:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2813
		{
			unimplemented()
		}
	case 537:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2817
		{
			unimplemented()
		}
	case 538:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2819
		{
			sqlVAL.expr = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2823
		{
			sqlVAL.expr = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2827
		{
			sqlVAL.expr = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2831
		{
			sqlVAL.expr = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2834
		{
			unimplemented()
		}
	case 543:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2835
		{
			unimplemented()
		}
	case 544:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2836
		{
			unimplemented()
		}
	case 545:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2837
		{
			unimplemented()
		}
	case 546:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2839
		{
			sqlVAL.expr = &CastExpr{Expr: sqlDollar[3].expr, Type: sqlDollar[5].colType}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2843
		{
			sqlVAL.expr = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].exprs}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2847
		{
			sqlVAL.expr = &OverlayExpr{FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].exprs}}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2851
		{
			sqlVAL.expr = &FuncExpr{Name: &QualifiedName{Base: "STRPOS"}, Exprs: sqlDollar[3].exprs}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2855
		{
			sqlVAL.expr = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].exprs}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2858
		{
			unimplemented()
		}
	case 552:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2860
		{
			sqlVAL.expr = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[4].exprs}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2864
		{
			sqlVAL.expr = &FuncExpr{Name: &QualifiedName{Base: "LTRIM"}, Exprs: sqlDollar[4].exprs}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2868
		{
			sqlVAL.expr = &FuncExpr{Name: &QualifiedName{Base: "RTRIM"}, Exprs: sqlDollar[4].exprs}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2872
		{
			sqlVAL.expr = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[3].exprs}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2876
		{
			sqlVAL.expr = &IfExpr{Cond: sqlDollar[3].expr, True: sqlDollar[5].expr, Else: sqlDollar[7].expr}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2880
		{
			sqlVAL.expr = &NullIfExpr{Expr1: sqlDollar[3].expr, Expr2: sqlDollar[5].expr}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2884
		{
			sqlVAL.expr = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].expr, sqlDollar[5].expr}}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2888
		{
			sqlVAL.expr = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].exprs}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2892
		{
			sqlVAL.expr = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].exprs}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2896
		{
			sqlVAL.expr = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].exprs}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2902
		{
			unimplemented()
		}
	case 563:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2903
		{
		}
	case 564:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2906
		{
			unimplemented()
		}
	case 565:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2907
		{
		}
	case 566:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2911
		{
			unimplemented()
		}
	case 567:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2912
		{
		}
	case 568:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2915
		{
			unimplemented()
		}
	case 569:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2916
		{
			unimplemented()
		}
	case 570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2919
		{
			unimplemented()
		}
	case 571:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2922
		{
			unimplemented()
		}
	case 572:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2923
		{
			unimplemented()
		}
	case 573:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2924
		{
		}
	case 574:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2928
		{
			unimplemented()
		}
	case 575:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2939
		{
			unimplemented()
		}
	case 576:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2940
		{
		}
	case 577:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2943
		{
			unimplemented()
		}
	case 578:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2944
		{
		}
	case 579:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2952
		{
			unimplemented()
		}
	case 580:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2953
		{
			unimplemented()
		}
	case 581:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2954
		{
		}
	case 582:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2957
		{
			unimplemented()
		}
	case 583:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2958
		{
			unimplemented()
		}
	case 584:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2964
		{
			unimplemented()
		}
	case 585:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2965
		{
			unimplemented()
		}
	case 586:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2966
		{
			unimplemented()
		}
	case 587:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2967
		{
			unimplemented()
		}
	case 588:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2968
		{
			unimplemented()
		}
	case 589:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2979
		{
			sqlVAL.expr = Row(sqlDollar[3].exprs)
		}
	case 590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2983
		{
			sqlVAL.expr = Row(nil)
		}
	case 591:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2987
		{
			sqlVAL.expr = Tuple(append(sqlDollar[2].exprs, sqlDollar[4].expr))
		}
	case 592:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2993
		{
			sqlVAL.expr = Row(sqlDollar[3].exprs)
		}
	case 593:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2997
		{
			sqlVAL.expr = Row(nil)
		}
	case 594:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3003
		{
			sqlVAL.expr = Tuple(append(sqlDollar[2].exprs, sqlDollar[4].expr))
		}
	case 595:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3044
		{
			sqlVAL.exprs = Exprs{sqlDollar[1].expr}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3048
		{
			sqlVAL.exprs = append(sqlDollar[1].exprs, sqlDollar[3].expr)
		}
	case 597:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3054
		{
			sqlVAL.colTypes = []ColumnType{sqlDollar[1].colType}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3058
		{
			sqlVAL.colTypes = append(sqlDollar[1].colTypes, sqlDollar[3].colType)
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3064
		{
			sqlVAL.expr = Array(sqlDollar[2].exprs)
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3068
		{
			sqlVAL.expr = Array(sqlDollar[2].exprs)
		}
	case 601:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3072
		{
			sqlVAL.expr = Array(nil)
		}
	case 602:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3078
		{
			sqlVAL.exprs = Exprs{sqlDollar[1].expr}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3082
		{
			sqlVAL.exprs = append(sqlDollar[1].exprs, sqlDollar[3].expr)
		}
	case 604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3088
		{
			sqlVAL.exprs = Exprs{DString(sqlDollar[1].str), sqlDollar[3].expr}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3110
		{
			sqlVAL.exprs = Exprs{sqlDollar[1].expr, sqlDollar[2].expr, sqlDollar[3].expr, sqlDollar[4].expr}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3114
		{
			sqlVAL.exprs = Exprs{sqlDollar[1].expr, sqlDollar[2].expr, sqlDollar[3].expr}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3120
		{
			sqlVAL.expr = sqlDollar[2].expr
		}
	case 615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3127
		{
			sqlVAL.exprs = Exprs{sqlDollar[3].expr, sqlDollar[1].expr}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3131
		{
			sqlVAL.exprs = nil
		}
	case 617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3148
		{
			sqlVAL.exprs = Exprs{sqlDollar[1].expr, sqlDollar[2].expr, sqlDollar[3].expr}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3152
		{
			sqlVAL.exprs = Exprs{sqlDollar[1].expr, sqlDollar[3].expr, sqlDollar[2].expr}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3156
		{
			sqlVAL.exprs = Exprs{sqlDollar[1].expr, sqlDollar[2].expr}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3160
		{
			sqlVAL.exprs = Exprs{sqlDollar[1].expr, DInt(1), sqlDollar[2].expr}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3164
		{
			sqlVAL.exprs = sqlDollar[1].exprs
		}
	case 622:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3168
		{
			sqlVAL.exprs = nil
		}
	case 623:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3174
		{
			sqlVAL.expr = sqlDollar[2].expr
		}
	case 624:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3180
		{
			sqlVAL.expr = sqlDollar[2].expr
		}
	case 625:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3186
		{
			sqlVAL.exprs = append(sqlDollar[3].exprs, sqlDollar[1].expr)
		}
	case 626:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3190
		{
			sqlVAL.exprs = sqlDollar[2].exprs
		}
	case 627:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3194
		{
			sqlVAL.exprs = sqlDollar[1].exprs
		}
	case 628:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3200
		{
			sqlVAL.expr = &Subquery{Select: sqlDollar[1].selectStmt}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3204
		{
			sqlVAL.expr = Tuple(sqlDollar[2].exprs)
		}
	case 630:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3215
		{
			sqlVAL.expr = &CaseExpr{Expr: sqlDollar[2].expr, Whens: sqlDollar[3].whens, Else: sqlDollar[4].expr}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3222
		{
			sqlVAL.whens = []*When{sqlDollar[1].when}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3226
		{
			sqlVAL.whens = append(sqlDollar[1].whens, sqlDollar[2].when)
		}
	case 633:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3232
		{
			sqlVAL.when = &When{Cond: sqlDollar[2].expr, Val: sqlDollar[4].expr}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3238
		{
			sqlVAL.expr = sqlDollar[2].expr
		}
	case 635:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3242
		{
			sqlVAL.expr = nil
		}
	case 637:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3249
		{
			sqlVAL.expr = nil
		}
	case 638:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3255
		{
			sqlVAL.indirectElem = NameIndirection(sqlDollar[2].str)
		}
	case 639:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3259
		{
			sqlVAL.indirectElem = qualifiedStar
		}
	case 640:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3263
		{
			sqlVAL.indirectElem = IndexIndirection(sqlDollar[2].str)
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3267
		{
			sqlVAL.indirectElem = &ArrayIndirection{Begin: sqlDollar[2].expr}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3271
		{
			sqlVAL.indirectElem = &ArrayIndirection{Begin: sqlDollar[2].expr, End: sqlDollar[4].expr}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3277
		{
			sqlVAL.indirect = Indirection{sqlDollar[1].indirectElem}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3281
		{
			sqlVAL.indirect = append(sqlDollar[1].indirect, sqlDollar[2].indirectElem)
		}
	case 645:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3286
		{
		}
	case 646:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3287
		{
		}
	case 648:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3296
		{
			sqlVAL.expr = DefaultVal{}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3302
		{
			sqlVAL.exprs = []Expr{sqlDollar[1].expr}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3306
		{
			sqlVAL.exprs = append(sqlDollar[1].exprs, sqlDollar[3].expr)
		}
	case 651:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3315
		{
			sqlVAL.exprs = sqlDollar[2].exprs
		}
	case 653:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3323
		{
			sqlVAL.selExprs = nil
		}
	case 654:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3329
		{
			sqlVAL.selExprs = SelectExprs{sqlDollar[1].selExpr}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3333
		{
			sqlVAL.selExprs = append(sqlDollar[1].selExprs, sqlDollar[3].selExpr)
		}
	case 656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3339
		{
			sqlVAL.selExpr = SelectExpr{Expr: sqlDollar[1].expr, As: Name(sqlDollar[3].str)}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3348
		{
			sqlVAL.selExpr = SelectExpr{Expr: sqlDollar[1].expr, As: Name(sqlDollar[2].str)}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3352
		{
			sqlVAL.selExpr = SelectExpr{Expr: sqlDollar[1].expr}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3356
		{
			sqlVAL.selExpr = starSelectExpr()
		}
	case 660:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3364
		{
			sqlVAL.qnames = QualifiedNames{sqlDollar[1].qname}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3368
		{
			sqlVAL.qnames = append(sqlDollar[1].qnames, sqlDollar[3].qname)
		}
	case 662:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3379
		{
			sqlVAL.qname = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3383
		{
			sqlVAL.qname = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].indirect}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3389
		{
			sqlVAL.strs = []string{sqlDollar[1].str}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3393
		{
			sqlVAL.strs = append(sqlDollar[1].strs, sqlDollar[3].str)
		}
	case 666:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3399
		{
			sqlVAL.strs = sqlDollar[2].strs
		}
	case 667:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3402
		{
		}
	case 668:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3412
		{
			sqlVAL.qname = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3416
		{
			sqlVAL.qname = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].indirect}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3423
		{
			sqlVAL.expr = &IntVal{Val: sqlDollar[1].ival.Val, Str: sqlDollar[1].ival.Str}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3427
		{
			sqlVAL.expr = NumVal(sqlDollar[1].str)
		}
	case 672:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3431
		{
			sqlVAL.expr = DString(sqlDollar[1].str)
		}
	case 673:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3435
		{
			sqlVAL.expr = DBytes(sqlDollar[1].str)
		}
	case 674:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3438
		{
			unimplemented()
		}
	case 675:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3440
		{
			sqlVAL.expr = &CastExpr{Expr: DString(sqlDollar[2].str), Type: sqlDollar[1].colType}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3444
		{
			// TODO(pmattis): support opt_interval?
			sqlVAL.expr = &CastExpr{Expr: DString(sqlDollar[2].str), Type: sqlDollar[1].colType}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3449
		{
			// TODO(pmattis): Support the precision specification?
			sqlVAL.expr = &CastExpr{Expr: DString(sqlDollar[5].str), Type: sqlDollar[1].colType}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3454
		{
			sqlVAL.expr = DBool(true)
		}
	case 679:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3458
		{
			sqlVAL.expr = DBool(false)
		}
	case 680:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3462
		{
			sqlVAL.expr = DNull
		}
	case 682:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3469
		{
			sqlVAL.ival = sqlDollar[2].ival
		}
	case 683:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3473
		{
			sqlVAL.ival = IntVal{Val: -sqlDollar[2].ival.Val, Str: "-" + sqlDollar[2].ival.Str}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3495
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
