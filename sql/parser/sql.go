// Code generated by go yacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"errors"
	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/sql/privilege"
	"github.com/cockroachdb/cockroach/util"
)

var errUnimplemented = errors.New("unimplemented")

func unimplemented() {
	panic(errUnimplemented)
}

func unimplementedWithIssue(issue int) {
	panic(util.UnimplementedWithIssueErrorf(issue, ""))
}

//line sql.y:43

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new sytax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in two forms, depending on the
// type of the value being accessed. Values and pointers are directly
// type asserted from the empty interface, meaning that they will panic
// if the type assertion is incorrect. Interfaces are handled differently
// because a nil instance of an interface inserted into the empty interface
// becomes a nil instance of the empty interface and therefore will fail a
// direct type assertion. Instead, a guarded type assertion must be used,
// which returns nil if the type assertion fails.
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	return u.val.(*StrVal)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) qname() *QualifiedName {
	return u.val.(*QualifiedName)
}
func (u *sqlSymUnion) qnames() QualifiedNames {
	return u.val.(QualifiedNames)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) indirectElem() IndirectionElem {
	if indirectElem, ok := u.val.(IndirectionElem); ok {
		return indirectElem
	}
	return nil
}
func (u *sqlSymUnion) indirect() Indirection {
	return u.val.(Indirection)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	if selectStmt, ok := u.val.(*Select); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	if selectStmt, ok := u.val.(SelectStatement); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	if constraintDef, ok := u.val.(ConstraintTableDef); ok {
		return constraintDef
	}
	return nil
}
func (u *sqlSymUnion) tblDef() TableDef {
	if tblDef, ok := u.val.(TableDef); ok {
		return tblDef
	}
	return nil
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	if colQual, ok := u.val.(NamedColumnQualification); ok {
		return colQual
	}
	return NamedColumnQualification{}
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	if colQual, ok := u.val.(ColumnQualification); ok {
		return colQual
	}
	return nil
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retExprs() ReturningExprs {
	return ReturningExprs(u.val.(SelectExprs))
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	if tblExpr, ok := u.val.(TableExpr); ok {
		return tblExpr
	}
	return nil
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	if joinCond, ok := u.val.(JoinCond); ok {
		return joinCond
	}
	return nil
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	if alterTableCmd, ok := u.val.(AlterTableCmd); ok {
		return alterTableCmd
	}
	return nil
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) famElem() FamilyElem {
	return u.val.(FamilyElem)
}
func (u *sqlSymUnion) famElems() FamilyElemList {
	return u.val.(FamilyElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}

//line sql.y:290
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const DOT_DOT = 57353
const LESS_EQUALS = 57354
const GREATER_EQUALS = 57355
const NOT_EQUALS = 57356
const ERROR = 57357
const ACTION = 57358
const ADD = 57359
const ALL = 57360
const ALTER = 57361
const ANALYSE = 57362
const ANALYZE = 57363
const AND = 57364
const ANY = 57365
const ARRAY = 57366
const AS = 57367
const ASC = 57368
const ASYMMETRIC = 57369
const AT = 57370
const BEGIN = 57371
const BETWEEN = 57372
const BIGINT = 57373
const BIGSERIAL = 57374
const BIT = 57375
const BLOB = 57376
const BOOL = 57377
const BOOLEAN = 57378
const BOTH = 57379
const BY = 57380
const BYTEA = 57381
const BYTES = 57382
const CASCADE = 57383
const CASE = 57384
const CAST = 57385
const CHAR = 57386
const CHARACTER = 57387
const CHARACTERISTICS = 57388
const CHECK = 57389
const COALESCE = 57390
const COLLATE = 57391
const COLLATION = 57392
const COLUMN = 57393
const COLUMNS = 57394
const COMMIT = 57395
const COMMITTED = 57396
const CONCAT = 57397
const CONFLICT = 57398
const CONSTRAINT = 57399
const COVERING = 57400
const CREATE = 57401
const CROSS = 57402
const CUBE = 57403
const CURRENT = 57404
const CURRENT_CATALOG = 57405
const CURRENT_DATE = 57406
const CURRENT_ROLE = 57407
const CURRENT_TIME = 57408
const CURRENT_TIMESTAMP = 57409
const CURRENT_USER = 57410
const CYCLE = 57411
const DATA = 57412
const DATABASE = 57413
const DATABASES = 57414
const DATE = 57415
const DAY = 57416
const DEC = 57417
const DECIMAL = 57418
const DEFAULT = 57419
const DEFERRABLE = 57420
const DELETE = 57421
const DESC = 57422
const DISTINCT = 57423
const DO = 57424
const DOUBLE = 57425
const DROP = 57426
const ELSE = 57427
const ENCODING = 57428
const END = 57429
const ESCAPE = 57430
const EXCEPT = 57431
const EXISTS = 57432
const EXPLAIN = 57433
const EXTRACT = 57434
const FALSE = 57435
const FAMILY = 57436
const FETCH = 57437
const FILTER = 57438
const FIRST = 57439
const FLOAT = 57440
const FLOORDIV = 57441
const FOLLOWING = 57442
const FOR = 57443
const FORCE_INDEX = 57444
const FOREIGN = 57445
const FROM = 57446
const FULL = 57447
const GRANT = 57448
const GRANTS = 57449
const GREATEST = 57450
const GROUP = 57451
const GROUPING = 57452
const HAVING = 57453
const HIGH = 57454
const HOUR = 57455
const IF = 57456
const IFNULL = 57457
const IN = 57458
const INDEX = 57459
const INDEXES = 57460
const INITIALLY = 57461
const INNER = 57462
const INSERT = 57463
const INT = 57464
const INT64 = 57465
const INTEGER = 57466
const INTERSECT = 57467
const INTERVAL = 57468
const INTO = 57469
const IS = 57470
const ISOLATION = 57471
const JOIN = 57472
const KEY = 57473
const KEYS = 57474
const LATERAL = 57475
const LEADING = 57476
const LEAST = 57477
const LEFT = 57478
const LEVEL = 57479
const LIKE = 57480
const LIMIT = 57481
const LOCAL = 57482
const LOCALTIME = 57483
const LOCALTIMESTAMP = 57484
const LOW = 57485
const LSHIFT = 57486
const MATCH = 57487
const MINUTE = 57488
const MONTH = 57489
const NAME = 57490
const NAMES = 57491
const NATURAL = 57492
const NEXT = 57493
const NO = 57494
const NO_INDEX_JOIN = 57495
const NORMAL = 57496
const NOT = 57497
const NOTHING = 57498
const NULL = 57499
const NULLIF = 57500
const NULLS = 57501
const NUMERIC = 57502
const OF = 57503
const OFF = 57504
const OFFSET = 57505
const ON = 57506
const ONLY = 57507
const OR = 57508
const ORDER = 57509
const ORDINALITY = 57510
const OUT = 57511
const OUTER = 57512
const OVER = 57513
const OVERLAPS = 57514
const OVERLAY = 57515
const PARTIAL = 57516
const PARTITION = 57517
const PLACING = 57518
const POSITION = 57519
const PRECEDING = 57520
const PRECISION = 57521
const PREPARE = 57522
const PRIMARY = 57523
const PRIORITY = 57524
const RANGE = 57525
const READ = 57526
const REAL = 57527
const RECURSIVE = 57528
const REF = 57529
const REFERENCES = 57530
const RENAME = 57531
const REPEATABLE = 57532
const RELEASE = 57533
const RESTRICT = 57534
const RETURNING = 57535
const REVOKE = 57536
const RIGHT = 57537
const ROLLBACK = 57538
const ROLLUP = 57539
const ROW = 57540
const ROWS = 57541
const RSHIFT = 57542
const SAVEPOINT = 57543
const SEARCH = 57544
const SECOND = 57545
const SELECT = 57546
const SERIAL = 57547
const SERIALIZABLE = 57548
const SESSION = 57549
const SESSION_USER = 57550
const SET = 57551
const SHOW = 57552
const SIMILAR = 57553
const SIMPLE = 57554
const SMALLINT = 57555
const SMALLSERIAL = 57556
const SNAPSHOT = 57557
const SOME = 57558
const SQL = 57559
const START = 57560
const STRICT = 57561
const STRING = 57562
const STORING = 57563
const SUBSTRING = 57564
const SYMMETRIC = 57565
const SYSTEM = 57566
const TABLE = 57567
const TABLES = 57568
const TEXT = 57569
const THEN = 57570
const TIME = 57571
const TIMESTAMP = 57572
const TIMESTAMPTZ = 57573
const TO = 57574
const TRAILING = 57575
const TRANSACTION = 57576
const TREAT = 57577
const TRIM = 57578
const TRUE = 57579
const TRUNCATE = 57580
const TYPE = 57581
const UNBOUNDED = 57582
const UNCOMMITTED = 57583
const UNION = 57584
const UNIQUE = 57585
const UNKNOWN = 57586
const UPDATE = 57587
const UPSERT = 57588
const USER = 57589
const USING = 57590
const VALID = 57591
const VALIDATE = 57592
const VALUE = 57593
const VALUES = 57594
const VARCHAR = 57595
const VARIADIC = 57596
const VARYING = 57597
const WHEN = 57598
const WHERE = 57599
const WINDOW = 57600
const WITH = 57601
const WITHIN = 57602
const WITHOUT = 57603
const YEAR = 57604
const ZONE = 57605
const NOT_LA = 57606
const WITH_LA = 57607
const AS_LA = 57608
const POSTFIXOP = 57609
const UMINUS = 57610

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXPLAIN",
	"EXTRACT",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HOUR",
	"IF",
	"IFNULL",
	"IN",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARTIAL",
	"PARTITION",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SQL",
	"START",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:4507

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 22,
	287, 22,
	-2, 337,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 34,
	1, 312,
	164, 312,
	193, 312,
	285, 312,
	287, 312,
	-2, 322,
	-1, 46,
	1, 315,
	164, 315,
	193, 315,
	285, 315,
	287, 315,
	-2, 321,
	-1, 55,
	1, 22,
	287, 22,
	-2, 337,
	-1, 255,
	1, 150,
	287, 150,
	-2, 820,
	-1, 286,
	139, 347,
	163, 347,
	-2, 318,
	-1, 289,
	139, 346,
	163, 346,
	-2, 316,
	-1, 404,
	139, 346,
	163, 346,
	-2, 319,
	-1, 460,
	284, 764,
	-2, 757,
	-1, 461,
	284, 765,
	-2, 758,
	-1, 467,
	5, 481,
	284, 481,
	-2, 905,
	-1, 489,
	5, 447,
	-2, 881,
	-1, 490,
	5, 475,
	284, 475,
	-2, 883,
	-1, 491,
	5, 455,
	-2, 884,
	-1, 492,
	5, 454,
	-2, 885,
	-1, 493,
	5, 475,
	284, 475,
	-2, 888,
	-1, 494,
	5, 475,
	284, 475,
	-2, 889,
	-1, 495,
	5, 476,
	-2, 892,
	-1, 496,
	5, 442,
	-2, 893,
	-1, 497,
	5, 442,
	-2, 894,
	-1, 498,
	5, 457,
	-2, 897,
	-1, 499,
	5, 443,
	-2, 902,
	-1, 500,
	5, 444,
	-2, 903,
	-1, 501,
	5, 445,
	-2, 904,
	-1, 502,
	5, 442,
	-2, 908,
	-1, 503,
	5, 448,
	-2, 913,
	-1, 504,
	5, 446,
	-2, 916,
	-1, 505,
	5, 473,
	284, 473,
	-2, 918,
	-1, 506,
	5, 477,
	-2, 921,
	-1, 507,
	5, 479,
	-2, 922,
	-1, 508,
	5, 472,
	284, 472,
	-2, 926,
	-1, 816,
	89, 322,
	125, 322,
	139, 322,
	163, 322,
	167, 322,
	242, 322,
	-2, 585,
	-1, 824,
	284, 742,
	-2, 731,
	-1, 1010,
	12, 0,
	13, 0,
	14, 0,
	267, 0,
	268, 0,
	269, 0,
	-2, 515,
	-1, 1011,
	12, 0,
	13, 0,
	14, 0,
	267, 0,
	268, 0,
	269, 0,
	-2, 516,
	-1, 1012,
	12, 0,
	13, 0,
	14, 0,
	267, 0,
	268, 0,
	269, 0,
	-2, 517,
	-1, 1016,
	12, 0,
	13, 0,
	14, 0,
	267, 0,
	268, 0,
	269, 0,
	-2, 521,
	-1, 1017,
	12, 0,
	13, 0,
	14, 0,
	267, 0,
	268, 0,
	269, 0,
	-2, 522,
	-1, 1018,
	12, 0,
	13, 0,
	14, 0,
	267, 0,
	268, 0,
	269, 0,
	-2, 523,
	-1, 1021,
	30, 0,
	116, 0,
	138, 0,
	211, 0,
	264, 0,
	-2, 528,
	-1, 1052,
	172, 655,
	-2, 658,
	-1, 1210,
	89, 322,
	125, 322,
	139, 322,
	163, 322,
	167, 322,
	242, 322,
	-2, 395,
	-1, 1214,
	30, 0,
	116, 0,
	138, 0,
	211, 0,
	264, 0,
	-2, 529,
	-1, 1219,
	30, 0,
	116, 0,
	138, 0,
	211, 0,
	264, 0,
	-2, 530,
	-1, 1238,
	172, 654,
	-2, 657,
	-1, 1391,
	30, 0,
	116, 0,
	138, 0,
	211, 0,
	264, 0,
	-2, 531,
	-1, 1396,
	128, 0,
	-2, 541,
	-1, 1404,
	172, 656,
	-2, 659,
	-1, 1437,
	12, 0,
	13, 0,
	14, 0,
	267, 0,
	268, 0,
	269, 0,
	-2, 566,
	-1, 1438,
	12, 0,
	13, 0,
	14, 0,
	267, 0,
	268, 0,
	269, 0,
	-2, 567,
	-1, 1439,
	12, 0,
	13, 0,
	14, 0,
	267, 0,
	268, 0,
	269, 0,
	-2, 568,
	-1, 1443,
	12, 0,
	13, 0,
	14, 0,
	267, 0,
	268, 0,
	269, 0,
	-2, 572,
	-1, 1444,
	12, 0,
	13, 0,
	14, 0,
	267, 0,
	268, 0,
	269, 0,
	-2, 573,
	-1, 1445,
	12, 0,
	13, 0,
	14, 0,
	267, 0,
	268, 0,
	269, 0,
	-2, 574,
	-1, 1548,
	128, 0,
	-2, 542,
	-1, 1551,
	30, 0,
	116, 0,
	138, 0,
	211, 0,
	264, 0,
	-2, 545,
	-1, 1552,
	30, 0,
	116, 0,
	138, 0,
	211, 0,
	264, 0,
	-2, 547,
	-1, 1634,
	30, 0,
	116, 0,
	138, 0,
	211, 0,
	264, 0,
	-2, 546,
	-1, 1635,
	30, 0,
	116, 0,
	138, 0,
	211, 0,
	264, 0,
	-2, 548,
	-1, 1642,
	128, 0,
	-2, 575,
	-1, 1683,
	128, 0,
	-2, 576,
	-1, 1731,
	30, 0,
	138, 0,
	211, 0,
	264, 0,
	-2, 880,
}

const sqlNprod = 1019
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 21093

var sqlAct = [...]int{

	461, 1730, 1711, 1688, 1752, 897, 1712, 1729, 1587, 1100,
	1713, 905, 1609, 1416, 459, 773, 1622, 290, 1511, 256,
	458, 1540, 1521, 521, 1512, 1475, 983, 80, 451, 992,
	79, 1532, 819, 79, 312, 967, 79, 649, 1526, 33,
	563, 964, 1207, 79, 423, 509, 1371, 1197, 1143, 1241,
	79, 79, 1206, 1292, 79, 15, 1291, 79, 79, 79,
	821, 1380, 966, 79, 79, 79, 79, 936, 338, 754,
	530, 751, 527, 882, 906, 1062, 1193, 1037, 995, 1034,
	873, 920, 929, 564, 68, 333, 550, 769, 295, 434,
	623, 297, 45, 21, 11, 339, 6, 289, 532, 608,
	1149, 392, 433, 424, 393, 522, 775, 295, 523, 959,
	634, 335, 328, 340, 605, 8, 7, 1097, 66, 899,
	45, 854, 73, 72, 5, 74, 850, 331, 330, 4,
	970, 300, 408, 406, 407, 604, 244, 625, 253, 235,
	621, 543, 324, 309, 75, 70, 309, 45, 320, 993,
	46, 298, 309, 69, 320, 933, 552, 1629, 71, 411,
	1630, 76, 1759, 47, 898, 987, 902, 1726, 1719, 1710,
	1608, 987, 926, 1704, 552, 294, 987, 294, 336, 279,
	552, 1685, 1679, 1669, 926, 987, 1608, 318, 1660, 76,
	453, 987, 777, 1236, 934, 1155, 287, 1636, 1237, 1234,
	926, 44, 302, 308, 1633, 1619, 315, 987, 1608, 286,
	1616, 1607, 325, 1617, 1608, 1592, 1591, 1572, 987, 987,
	1234, 777, 1205, 541, 778, 511, 27, 935, 932, 44,
	1673, 1553, 1550, 28, 1234, 926, 1485, 1400, 1348, 987,
	1234, 1343, 780, 1611, 1342, 1309, 79, 1343, 1310, 79,
	79, 776, 1450, 1307, 27, 51, 1234, 1306, 1403, 510,
	1234, 28, 1305, 779, 1238, 1234, 1235, 1234, 1179, 794,
	988, 1234, 925, 987, 870, 926, 53, 869, 871, 79,
	1195, 79, 1181, 79, 937, 79, 558, 987, 939, 559,
	1045, 524, 982, 51, 418, 525, 1240, 51, 1234, 953,
	79, 419, 399, 54, 405, 745, 744, 553, 615, 614,
	49, 79, 359, 785, 53, 307, 50, 55, 53, 525,
	648, 466, 79, 79, 79, 553, 79, 378, 524, 1728,
	1725, 553, 525, 1718, 1680, 48, 404, 1618, 1577, 1573,
	1565, 54, 516, 931, 520, 54, 51, 1564, 49, 515,
	1559, 1558, 366, 1557, 50, 367, 79, 1510, 795, 79,
	1465, 79, 1503, 1460, 1459, 930, 1183, 53, 1458, 1407,
	309, 338, 338, 901, 51, 1389, 1155, 48, 1721, 651,
	79, 1370, 79, 79, 79, 79, 1352, 79, 1314, 1311,
	1299, 79, 1290, 1262, 54, 53, 79, 1259, 339, 339,
	518, 49, 79, 556, 1257, 776, 652, 50, 1246, 1245,
	1180, 309, 544, 544, 796, 396, 340, 340, 555, 1114,
	79, 551, 54, 79, 653, 1069, 48, 748, 1068, 49,
	398, 418, 827, 1042, 417, 50, 1418, 1672, 1263, 1652,
	1280, 1281, 1282, 1651, 1644, 309, 1625, 818, 287, 1614,
	1547, 420, 414, 415, 67, 1606, 1584, 1263, 1570, 1543,
	1519, 286, 1395, 1388, 542, 545, 1367, 1366, 1365, 1363,
	1326, 325, 1350, 1325, 1289, 1254, 524, 295, 1263, 824,
	525, 1253, 1502, 1277, 747, 790, 787, 788, 789, 781,
	782, 783, 784, 786, 1231, 1227, 612, 1039, 1509, 611,
	1263, 1169, 1280, 1281, 1282, 560, 1128, 1127, 1263, 1107,
	1067, 645, 638, 986, 513, 855, 858, 737, 734, 1043,
	79, 738, 739, 740, 862, 741, 651, 1268, 848, 743,
	847, 846, 746, 1128, 79, 845, 1263, 844, 79, 757,
	758, 79, 79, 759, 865, 1277, 1268, 79, 570, 79,
	79, 771, 79, 652, 843, 79, 1283, 79, 79, 842,
	338, 841, 287, 867, 644, 287, 287, 1268, 840, 876,
	839, 653, 1278, 838, 427, 765, 915, 333, 766, 767,
	837, 836, 835, 592, 834, 825, 823, 339, 48, 1268,
	749, 1278, 778, 313, 422, 357, 1508, 1268, 822, 900,
	1163, 900, 1162, 517, 391, 340, 1631, 79, 79, 864,
	780, 1507, 1278, 1156, 68, 887, 889, 591, 921, 856,
	852, 853, 863, 941, 859, 1268, 977, 309, 1279, 1538,
	320, 779, 372, 860, 1278, 1527, 909, 861, 1313, 1312,
	1263, 320, 1278, 1073, 320, 1213, 387, 1279, 373, 651,
	45, 832, 73, 72, 45, 74, 923, 922, 898, 924,
	1419, 1063, 851, 1249, 879, 904, 1151, 914, 1279, 895,
	336, 918, 1694, 1741, 75, 70, 652, 917, 1740, 569,
	913, 785, 1493, 69, 247, 916, 958, 892, 71, 533,
	1279, 534, 945, 1659, 653, 1274, 1275, 1276, 1279, 1273,
	1270, 1271, 1272, 1264, 1265, 1266, 1267, 1269, 856, 1175,
	859, 828, 1083, 1076, 278, 942, 277, 947, 943, 946,
	272, 940, 1264, 1265, 1266, 1267, 1269, 853, 852, 1268,
	273, 1600, 883, 533, 1599, 534, 1338, 79, 1318, 1273,
	1270, 1271, 1272, 1264, 1265, 1266, 1267, 1269, 1349, 79,
	79, 1317, 1077, 1215, 1168, 1167, 535, 1274, 1275, 1276,
	370, 1273, 1270, 1271, 1272, 1264, 1265, 1266, 1267, 1269,
	1270, 1271, 1272, 1264, 1265, 1266, 1267, 1269, 79, 1166,
	79, 989, 1658, 512, 875, 1078, 1075, 875, 886, 1165,
	1337, 463, 778, 874, 1026, 938, 894, 371, 933, 998,
	535, 1264, 1265, 1266, 1267, 1269, 893, 395, 1705, 651,
	780, 59, 1111, 643, 642, 1110, 636, 631, 533, 999,
	534, 390, 355, 281, 1676, 1036, 778, 1036, 1328, 1696,
	284, 779, 1046, 1051, 1063, 1054, 652, 934, 309, 1740,
	546, 937, 1079, 865, 780, 1589, 1040, 962, 865, 961,
	1092, 63, 1707, 60, 653, 1357, 1104, 1105, 1106, 783,
	784, 786, 997, 980, 981, 779, 885, 309, 1708, 1113,
	935, 932, 594, 79, 79, 79, 1749, 293, 394, 79,
	990, 785, 79, 1050, 1144, 535, 646, 1148, 79, 79,
	79, 79, 79, 446, 79, 79, 1174, 64, 963, 1340,
	1153, 1074, 79, 1142, 79, 1139, 539, 1266, 1267, 1269,
	1059, 79, 937, 292, 1123, 785, 1144, 538, 1041, 1653,
	79, 1176, 536, 77, 369, 552, 246, 937, 884, 257,
	849, 1640, 233, 362, 364, 598, 246, 1748, 1354, 79,
	79, 295, 1117, 301, 301, 79, 815, 311, 1146, 647,
	311, 317, 311, 1329, 338, 294, 311, 326, 311, 257,
	795, 57, 1119, 1138, 1125, 1335, 536, 236, 872, 570,
	1118, 1355, 79, 236, 79, 79, 79, 62, 61, 79,
	368, 339, 1252, 1381, 282, 764, 931, 241, 79, 294,
	531, 1150, 237, 241, 1185, 79, 1755, 79, 237, 340,
	1150, 1158, 285, 1159, 592, 65, 1714, 58, 1590, 309,
	1161, 1157, 1154, 1024, 238, 1747, 796, 1739, 1737, 949,
	238, 1217, 1525, 1035, 388, 951, 1212, 1715, 937, 240,
	291, 975, 409, 369, 381, 240, 295, 360, 591, 1171,
	1178, 952, 921, 1182, 1177, 1184, 358, 1173, 1170, 1230,
	950, 536, 1446, 1232, 1172, 410, 410, 781, 782, 783,
	784, 786, 1628, 1594, 1593, 1186, 1243, 1244, 1191, 1160,
	1190, 570, 1239, 1582, 1568, 1211, 553, 389, 45, 295,
	923, 922, 620, 924, 637, 632, 309, 790, 787, 788,
	789, 781, 782, 783, 784, 786, 1716, 1763, 1288, 1025,
	569, 1489, 1320, 1218, 1216, 1200, 592, 1753, 1122, 1301,
	1353, 1032, 239, 618, 976, 56, 756, 570, 239, 750,
	1203, 1022, 1689, 1030, 619, 409, 1447, 742, 295, 79,
	1379, 616, 1448, 1583, 1717, 1130, 1201, 1248, 1129, 361,
	591, 593, 257, 257, 1324, 1535, 1541, 1754, 1376, 566,
	323, 1375, 592, 242, 1569, 368, 79, 292, 322, 242,
	1345, 1492, 1481, 401, 1756, 1372, 1194, 1066, 1491, 1643,
	1567, 1293, 246, 1481, 311, 1476, 257, 1762, 402, 1488,
	79, 1394, 79, 1474, 79, 1028, 591, 1027, 79, 1339,
	1315, 1033, 1482, 301, 1023, 1202, 79, 1542, 1344, 79,
	1322, 1258, 569, 1482, 311, 79, 651, 1226, 944, 79,
	386, 79, 1296, 1297, 1298, 311, 311, 311, 384, 547,
	1336, 1332, 383, 1334, 382, 1374, 1263, 379, 1377, 1347,
	1346, 1138, 321, 652, 1356, 1358, 1359, 1294, 833, 736,
	1065, 1401, 1472, 1385, 1362, 909, 1490, 1378, 569, 311,
	1333, 653, 609, 79, 609, 1364, 1331, 1384, 1319, 1369,
	1409, 1410, 1411, 1382, 1383, 1187, 978, 1029, 1397, 974,
	1477, 919, 1478, 257, 1031, 609, 257, 257, 257, 557,
	257, 1477, 554, 1478, 257, 309, 549, 540, 309, 246,
	537, 1413, 755, 594, 1601, 753, 1480, 984, 1406, 1451,
	412, 305, 1741, 1483, 1420, 640, 875, 1480, 1611, 1603,
	1461, 1196, 890, 301, 1483, 1268, 774, 1424, 79, 79,
	79, 375, 891, 875, 1341, 1655, 79, 79, 1682, 888,
	1373, 778, 79, 416, 79, 778, 79, 79, 79, 79,
	1422, 1486, 1487, 3, 79, 1453, 928, 1426, 1674, 1454,
	1760, 985, 903, 780, 772, 1471, 1200, 613, 1479, 562,
	1278, 1761, 1467, 413, 306, 1263, 79, 79, 232, 1479,
	779, 1203, 778, 1466, 779, 1360, 79, 79, 1517, 1457,
	79, 1198, 1517, 1529, 1516, 1500, 1524, 1201, 1516, 79,
	79, 1224, 1518, 376, 1506, 594, 1518, 271, 1504, 314,
	243, 1199, 1351, 1222, 1544, 1530, 1531, 1308, 1523, 1536,
	955, 954, 1164, 311, 1084, 1534, 1279, 1112, 570, 79,
	1109, 1108, 1060, 956, 1727, 1496, 1555, 880, 1412, 1188,
	957, 311, 1545, 1505, 311, 896, 1549, 274, 275, 826,
	311, 594, 911, 912, 280, 311, 1202, 570, 311, 1588,
	257, 257, 234, 592, 570, 735, 380, 1561, 1706, 1251,
	1639, 1621, 1064, 831, 26, 309, 309, 1220, 1514, 309,
	439, 1225, 1473, 79, 1321, 79, 969, 79, 1566, 968,
	654, 641, 592, 630, 79, 462, 570, 591, 385, 592,
	1272, 1264, 1265, 1266, 1267, 1269, 1581, 624, 633, 1533,
	609, 774, 1072, 79, 1049, 514, 1578, 464, 1579, 567,
	465, 568, 857, 452, 565, 334, 591, 1537, 1602, 907,
	1061, 592, 1247, 591, 829, 438, 79, 1612, 79, 444,
	443, 1047, 356, 435, 1517, 1539, 79, 1204, 1615, 365,
	1516, 251, 1604, 252, 79, 1147, 1610, 1221, 1518, 569,
	1501, 979, 760, 1330, 1223, 591, 283, 1260, 1090, 1632,
	1263, 1082, 593, 1624, 1080, 1627, 1071, 397, 526, 908,
	566, 377, 991, 1586, 1638, 927, 421, 1596, 569, 1520,
	768, 1597, 1598, 1720, 304, 569, 570, 303, 965, 374,
	617, 948, 276, 1650, 1654, 1327, 1693, 52, 20, 18,
	79, 79, 17, 16, 79, 1277, 1648, 14, 13, 1084,
	1084, 1645, 79, 12, 19, 1620, 1662, 569, 79, 10,
	9, 592, 25, 1517, 1668, 309, 79, 24, 1671, 1516,
	960, 1665, 651, 1663, 865, 23, 1664, 1518, 2, 1666,
	1670, 1675, 311, 880, 1, 0, 295, 0, 0, 1268,
	0, 1677, 79, 79, 79, 591, 79, 1681, 0, 652,
	1084, 1084, 1084, 0, 593, 0, 1697, 0, 1691, 1678,
	0, 311, 566, 257, 79, 1695, 0, 653, 1700, 0,
	1698, 0, 0, 0, 570, 1684, 1699, 1517, 1703, 0,
	1702, 1701, 1709, 1516, 1278, 0, 0, 79, 0, 0,
	0, 1518, 0, 0, 0, 0, 0, 0, 1723, 0,
	593, 0, 0, 0, 0, 0, 1735, 569, 566, 592,
	1738, 0, 79, 1736, 1742, 1724, 0, 0, 0, 1744,
	0, 0, 0, 1746, 0, 1745, 0, 1743, 0, 0,
	0, 0, 594, 1692, 0, 1758, 1757, 1228, 1229, 0,
	1279, 0, 0, 591, 0, 0, 0, 0, 0, 0,
	0, 570, 1764, 0, 0, 0, 311, 1120, 1121, 0,
	0, 594, 880, 0, 0, 1126, 0, 0, 594, 0,
	0, 1131, 1132, 1134, 1136, 1137, 909, 1140, 1141, 0,
	0, 1084, 1084, 0, 0, 311, 592, 1152, 1285, 1286,
	1287, 0, 0, 0, 311, 0, 0, 0, 425, 425,
	594, 0, 0, 311, 0, 569, 0, 0, 528, 1196,
	0, 1273, 1270, 1271, 1272, 1264, 1265, 1266, 1267, 1269,
	591, 0, 960, 609, 0, 570, 0, 0, 960, 1084,
	1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
	1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 0, 1084,
	0, 0, 0, 0, 1200, 753, 778, 753, 257, 311,
	592, 0, 1189, 0, 0, 0, 0, 0, 0, 1203,
	0, 1192, 0, 0, 780, 0, 0, 0, 1209, 1198,
	311, 0, 569, 0, 0, 1201, 0, 0, 0, 0,
	0, 0, 0, 0, 591, 779, 0, 778, 0, 1199,
	594, 0, 0, 0, 761, 763, 0, 0, 0, 0,
	0, 770, 0, 0, 0, 780, 0, 806, 0, 1392,
	1393, 0, 778, 810, 811, 812, 813, 814, 0, 0,
	0, 0, 817, 0, 0, 0, 779, 0, 0, 0,
	780, 0, 794, 0, 1202, 785, 0, 0, 0, 0,
	0, 0, 830, 0, 0, 0, 569, 0, 0, 440,
	34, 779, 0, 0, 0, 0, 0, 1427, 1428, 1429,
	1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437, 1438, 1439,
	1440, 1441, 1442, 1443, 1444, 1445, 785, 1449, 34, 0,
	795, 0, 0, 0, 0, 0, 0, 0, 594, 0,
	0, 593, 0, 807, 0, 288, 0, 0, 296, 566,
	0, 785, 774, 0, 0, 34, 0, 0, 0, 866,
	0, 0, 0, 0, 0, 802, 0, 296, 0, 0,
	593, 795, 0, 0, 0, 0, 0, 593, 566, 311,
	0, 0, 0, 0, 0, 566, 796, 1084, 0, 0,
	0, 0, 0, 0, 0, 0, 795, 0, 0, 0,
	0, 0, 0, 1361, 0, 880, 0, 753, 0, 593,
	0, 1368, 0, 0, 0, 594, 0, 566, 0, 311,
	0, 0, 311, 0, 0, 0, 0, 796, 1209, 0,
	0, 0, 1387, 0, 1209, 0, 0, 0, 804, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 778, 796, 0, 0, 0, 0, 0, 787, 788,
	789, 781, 782, 783, 784, 786, 0, 0, 0, 780,
	0, 0, 1084, 0, 0, 0, 1417, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 594,
	779, 803, 0, 0, 0, 0, 0, 0, 790, 787,
	788, 789, 781, 782, 783, 784, 786, 0, 0, 593,
	0, 0, 0, 0, 0, 0, 0, 566, 0, 0,
	0, 0, 0, 0, 0, 1585, 789, 781, 782, 783,
	784, 786, 0, 0, 0, 0, 0, 0, 0, 0,
	785, 1469, 1470, 880, 0, 0, 0, 0, 1084, 774,
	774, 0, 0, 0, 0, 1494, 0, 1495, 0, 311,
	1497, 1498, 1499, 0, 0, 0, 0, 311, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 795, 0, 1513, 0, 1522,
	880, 1513, 0, 0, 0, 0, 0, 288, 0, 311,
	311, 0, 0, 311, 0, 0, 0, 593, 0, 0,
	1642, 425, 774, 1209, 0, 566, 1000, 1001, 1002, 1003,
	1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013,
	1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 0, 0,
	0, 796, 1562, 0, 0, 0, 778, 0, 797, 798,
	799, 0, 0, 0, 0, 0, 0, 0, 800, 0,
	0, 0, 0, 0, 780, 0, 806, 0, 0, 0,
	0, 1070, 0, 1081, 0, 1091, 1093, 1098, 1101, 1102,
	1103, 0, 0, 0, 593, 779, 1683, 0, 0, 0,
	0, 794, 566, 0, 0, 0, 880, 0, 1580, 0,
	257, 0, 0, 0, 528, 0, 0, 311, 0, 0,
	0, 288, 0, 0, 288, 288, 781, 782, 783, 784,
	786, 0, 0, 0, 0, 0, 774, 0, 0, 0,
	0, 0, 0, 1145, 0, 785, 778, 816, 797, 798,
	799, 820, 0, 1513, 0, 0, 0, 0, 800, 311,
	0, 1623, 807, 0, 780, 0, 806, 0, 593, 311,
	0, 0, 0, 0, 805, 0, 566, 774, 0, 0,
	0, 0, 0, 0, 802, 779, 0, 0, 0, 0,
	795, 794, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 801, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 770, 0, 258,
	0, 0, 0, 1656, 1657, 785, 0, 1661, 0, 0,
	0, 0, 1513, 269, 0, 257, 796, 0, 0, 0,
	0, 1522, 807, 34, 0, 34, 0, 804, 0, 774,
	0, 0, 0, 0, 805, 0, 0, 1214, 34, 0,
	0, 1219, 34, 0, 802, 0, 0, 260, 0, 0,
	795, 0, 0, 0, 270, 1690, 774, 311, 0, 257,
	1233, 0, 0, 0, 0, 0, 259, 261, 0, 0,
	1242, 0, 801, 0, 0, 0, 1513, 1623, 1250, 0,
	803, 0, 1255, 791, 792, 793, 0, 790, 787, 788,
	789, 781, 782, 783, 784, 786, 0, 0, 0, 1115,
	311, 0, 262, 817, 0, 0, 796, 0, 1116, 1098,
	1098, 1098, 263, 264, 0, 0, 0, 804, 0, 0,
	0, 0, 0, 0, 0, 774, 0, 265, 0, 0,
	0, 1316, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1323, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 425,
	0, 0, 0, 0, 0, 0, 0, 0, 425, 0,
	803, 528, 0, 791, 792, 793, 0, 790, 787, 788,
	789, 781, 782, 783, 784, 786, 0, 0, 0, 0,
	0, 0, 0, 778, 1574, 797, 798, 799, 0, 0,
	0, 0, 0, 0, 0, 800, 0, 0, 0, 0,
	0, 780, 0, 806, 0, 0, 0, 0, 0, 0,
	0, 266, 0, 0, 267, 0, 0, 0, 1390, 268,
	1391, 0, 779, 0, 0, 0, 0, 0, 794, 0,
	0, 1396, 0, 0, 0, 0, 0, 0, 0, 1405,
	0, 0, 0, 0, 0, 1405, 0, 994, 0, 0,
	0, 0, 0, 0, 1414, 0, 0, 0, 0, 0,
	0, 0, 0, 1423, 0, 0, 1425, 0, 0, 0,
	0, 0, 785, 0, 0, 0, 0, 1038, 0, 0,
	0, 0, 22, 0, 0, 0, 0, 0, 0, 807,
	0, 0, 37, 0, 0, 0, 0, 0, 1455, 1456,
	0, 805, 0, 0, 0, 0, 0, 1462, 1463, 1464,
	0, 802, 0, 0, 0, 0, 39, 795, 0, 0,
	0, 0, 44, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 801,
	0, 0, 0, 0, 0, 425, 0, 27, 0, 0,
	40, 0, 0, 0, 28, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 30,
	0, 296, 0, 796, 0, 0, 778, 1528, 797, 798,
	799, 0, 0, 0, 804, 0, 0, 0, 800, 0,
	0, 0, 0, 0, 780, 0, 806, 0, 0, 1548,
	0, 0, 0, 1551, 1552, 0, 0, 0, 1554, 0,
	0, 0, 0, 1556, 0, 779, 0, 0, 0, 0,
	1560, 794, 0, 0, 1563, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 803, 0, 0,
	791, 792, 793, 29, 790, 787, 788, 789, 781, 782,
	783, 784, 786, 0, 42, 1571, 34, 31, 0, 41,
	0, 1304, 0, 0, 32, 785, 1210, 51, 0, 0,
	0, 0, 35, 36, 0, 0, 0, 0, 0, 0,
	0, 38, 807, 0, 0, 0, 0, 0, 53, 0,
	0, 0, 0, 0, 805, 1038, 1595, 0, 0, 0,
	0, 43, 0, 0, 802, 0, 0, 0, 0, 816,
	795, 0, 0, 0, 0, 54, 0, 0, 0, 0,
	1613, 0, 49, 0, 0, 0, 0, 0, 50, 0,
	0, 0, 801, 0, 0, 0, 0, 0, 0, 1626,
	0, 0, 778, 0, 797, 798, 799, 48, 0, 0,
	0, 1634, 1635, 0, 800, 0, 0, 0, 816, 0,
	780, 0, 806, 0, 0, 0, 796, 0, 778, 0,
	797, 798, 799, 0, 0, 0, 0, 804, 0, 1647,
	800, 779, 0, 0, 0, 0, 780, 794, 806, 1649,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 779, 0, 0,
	0, 528, 0, 794, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	803, 785, 0, 791, 792, 793, 0, 790, 787, 788,
	789, 781, 782, 783, 784, 786, 0, 0, 807, 0,
	0, 0, 0, 0, 1303, 0, 0, 785, 0, 0,
	805, 0, 0, 0, 0, 994, 0, 0, 994, 0,
	802, 0, 0, 0, 807, 0, 795, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 805, 0, 0, 778,
	0, 797, 798, 799, 0, 0, 802, 0, 801, 1722,
	0, 0, 795, 0, 0, 0, 0, 780, 0, 806,
	0, 0, 1734, 1734, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 801, 0, 0, 0, 779, 0,
	0, 0, 796, 0, 794, 778, 1734, 797, 798, 799,
	0, 0, 0, 804, 0, 0, 0, 800, 0, 0,
	0, 0, 0, 780, 0, 806, 0, 0, 796, 0,
	0, 0, 0, 0, 0, 1734, 0, 0, 0, 804,
	0, 0, 0, 0, 779, 0, 0, 0, 785, 0,
	794, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 807, 803, 0, 0, 791,
	792, 793, 0, 790, 787, 788, 789, 781, 782, 783,
	784, 786, 34, 0, 0, 0, 0, 802, 0, 0,
	1302, 0, 803, 795, 785, 791, 792, 793, 0, 790,
	787, 788, 789, 781, 782, 783, 784, 786, 0, 0,
	0, 807, 0, 1687, 0, 994, 994, 0, 0, 994,
	0, 0, 0, 805, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 802, 0, 0, 0, 0, 0, 795,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 796,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	804, 801, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 796, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 804, 0, 0, 0,
	0, 0, 0, 803, 0, 0, 791, 792, 793, 0,
	790, 787, 788, 789, 781, 782, 783, 784, 786, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1605, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 803,
	0, 0, 791, 792, 793, 0, 790, 787, 788, 789,
	781, 782, 783, 784, 786, 994, 0, 0, 0, 0,
	1686, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 650, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 81, 82, 655,
	83, 656, 657, 658, 659, 660, 661, 662, 663, 84,
	85, 185, 186, 187, 188, 86, 189, 190, 664, 87,
	191, 192, 88, 665, 666, 193, 194, 195, 667, 196,
	668, 342, 669, 89, 90, 91, 816, 92, 670, 93,
	671, 343, 94, 95, 672, 673, 674, 675, 676, 677,
	96, 97, 98, 99, 197, 100, 198, 199, 678, 679,
	101, 680, 681, 682, 102, 103, 683, 104, 684, 0,
	685, 200, 105, 201, 686, 687, 688, 106, 107, 202,
	0, 108, 689, 109, 690, 691, 344, 692, 110, 203,
	693, 204, 694, 111, 112, 205, 206, 695, 696, 113,
	697, 345, 114, 207, 208, 209, 698, 210, 699, 346,
	115, 347, 116, 117, 700, 701, 211, 348, 118, 349,
	702, 119, 703, 704, 120, 0, 121, 122, 123, 124,
	125, 350, 126, 127, 130, 128, 705, 129, 706, 212,
	131, 213, 132, 133, 707, 708, 709, 710, 711, 134,
	214, 351, 135, 352, 215, 136, 137, 712, 216, 138,
	217, 139, 713, 140, 141, 142, 218, 143, 144, 714,
	146, 147, 145, 148, 715, 149, 353, 150, 151, 219,
	152, 0, 153, 154, 155, 716, 220, 156, 157, 717,
	158, 159, 354, 160, 221, 222, 161, 718, 162, 163,
	165, 223, 164, 224, 719, 166, 720, 167, 168, 721,
	225, 226, 227, 722, 723, 169, 228, 229, 724, 170,
	171, 172, 173, 725, 726, 174, 175, 176, 727, 728,
	177, 178, 179, 230, 231, 729, 180, 730, 731, 732,
	733, 181, 182, 183, 184, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	650, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1386, 81, 82, 655, 83, 656, 657, 658, 659,
	660, 661, 662, 663, 84, 85, 185, 186, 187, 188,
	86, 189, 190, 664, 87, 191, 192, 88, 665, 666,
	193, 194, 195, 667, 196, 668, 342, 669, 89, 90,
	91, 0, 92, 670, 93, 671, 343, 94, 95, 672,
	673, 674, 675, 676, 677, 96, 97, 98, 99, 197,
	100, 198, 199, 678, 679, 101, 680, 681, 682, 102,
	103, 683, 104, 684, 0, 685, 200, 105, 201, 686,
	687, 688, 106, 107, 202, 0, 108, 689, 109, 690,
	691, 344, 692, 110, 203, 693, 204, 694, 111, 112,
	205, 206, 695, 696, 113, 697, 345, 114, 207, 208,
	209, 698, 210, 699, 346, 115, 347, 116, 117, 700,
	701, 211, 348, 118, 349, 702, 119, 703, 704, 120,
	0, 121, 122, 123, 124, 125, 350, 126, 127, 130,
	128, 705, 129, 706, 212, 131, 213, 132, 133, 707,
	708, 709, 710, 711, 134, 214, 351, 135, 352, 215,
	136, 137, 712, 216, 138, 217, 139, 713, 140, 141,
	142, 218, 143, 144, 714, 146, 147, 145, 148, 715,
	149, 353, 150, 151, 219, 152, 0, 153, 154, 155,
	716, 220, 156, 157, 717, 158, 159, 354, 160, 221,
	222, 161, 718, 162, 163, 165, 223, 164, 224, 719,
	166, 720, 167, 168, 721, 225, 226, 227, 722, 723,
	169, 228, 229, 724, 170, 171, 172, 173, 725, 726,
	174, 175, 176, 727, 728, 177, 178, 179, 230, 231,
	729, 180, 730, 731, 732, 733, 181, 182, 183, 184,
	0, 0, 650, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 868, 81, 82, 655, 83, 656, 657,
	658, 659, 660, 661, 662, 663, 84, 85, 185, 186,
	187, 188, 86, 189, 190, 664, 87, 191, 192, 88,
	665, 666, 193, 194, 195, 667, 196, 668, 342, 669,
	89, 90, 91, 0, 92, 670, 93, 671, 343, 94,
	95, 672, 673, 674, 675, 676, 677, 96, 97, 98,
	99, 197, 100, 198, 199, 678, 679, 101, 680, 681,
	682, 102, 103, 683, 104, 684, 0, 685, 200, 105,
	201, 686, 687, 688, 106, 107, 202, 0, 108, 689,
	109, 690, 691, 344, 692, 110, 203, 693, 204, 694,
	111, 112, 205, 206, 695, 696, 113, 697, 345, 114,
	207, 208, 209, 698, 210, 699, 346, 115, 347, 116,
	117, 700, 701, 211, 348, 118, 349, 702, 119, 703,
	704, 120, 0, 121, 122, 123, 124, 125, 350, 126,
	127, 130, 128, 705, 129, 706, 212, 131, 213, 132,
	133, 707, 708, 709, 710, 711, 134, 214, 351, 135,
	352, 215, 136, 137, 712, 216, 138, 217, 139, 713,
	140, 141, 142, 218, 143, 144, 714, 146, 147, 145,
	148, 715, 149, 353, 150, 151, 219, 152, 0, 153,
	154, 155, 716, 220, 156, 157, 717, 158, 159, 354,
	160, 221, 222, 161, 718, 162, 163, 165, 223, 164,
	224, 719, 166, 720, 167, 168, 721, 225, 226, 227,
	722, 723, 169, 228, 229, 724, 170, 171, 172, 173,
	725, 726, 174, 175, 176, 727, 728, 177, 178, 179,
	230, 231, 729, 180, 730, 731, 732, 733, 181, 182,
	183, 184, 460, 449, 450, 447, 448, 436, 0, 0,
	0, 0, 0, 0, 81, 82, 1056, 83, 0, 0,
	0, 0, 442, 0, 0, 0, 84, 85, 185, 489,
	187, 490, 86, 491, 492, 0, 87, 191, 192, 88,
	457, 475, 493, 494, 195, 0, 485, 0, 468, 0,
	89, 90, 91, 0, 92, 0, 93, 0, 343, 94,
	95, 0, 469, 471, 0, 470, 472, 96, 97, 98,
	99, 495, 100, 496, 497, 0, 0, 101, 0, 1057,
	0, 488, 103, 0, 104, 0, 0, 0, 441, 105,
	476, 455, 0, 0, 106, 107, 498, 0, 108, 0,
	109, 0, 0, 344, 0, 110, 486, 0, 204, 0,
	111, 112, 482, 484, 0, 0, 113, 0, 345, 114,
	499, 500, 501, 0, 467, 0, 346, 115, 347, 116,
	117, 0, 0, 487, 348, 118, 349, 0, 119, 0,
	0, 120, 0, 121, 122, 123, 124, 125, 350, 126,
	127, 130, 128, 431, 129, 456, 483, 131, 502, 132,
	133, 0, 0, 0, 0, 0, 134, 214, 351, 135,
	352, 477, 136, 137, 0, 478, 138, 217, 139, 0,
	140, 141, 142, 503, 143, 144, 0, 146, 147, 145,
	148, 0, 149, 353, 150, 151, 445, 152, 0, 153,
	154, 155, 0, 220, 156, 157, 473, 158, 159, 354,
	160, 504, 222, 161, 0, 162, 163, 165, 505, 164,
	479, 0, 166, 0, 167, 168, 0, 225, 506, 507,
	0, 0, 169, 480, 481, 454, 170, 171, 172, 173,
	0, 0, 174, 175, 176, 474, 0, 177, 178, 179,
	230, 508, 1055, 180, 0, 0, 0, 0, 181, 182,
	183, 184, 432, 0, 0, 460, 449, 450, 447, 448,
	436, 0, 0, 428, 429, 1058, 0, 81, 82, 430,
	83, 0, 437, 1053, 0, 442, 0, 0, 0, 84,
	85, 185, 489, 187, 490, 86, 491, 492, 0, 87,
	191, 192, 88, 457, 475, 493, 494, 195, 0, 485,
	0, 468, 0, 89, 90, 91, 0, 92, 0, 93,
	0, 343, 94, 95, 0, 469, 471, 0, 470, 472,
	96, 97, 98, 99, 495, 100, 496, 497, 529, 0,
	101, 0, 0, 0, 488, 103, 0, 104, 0, 0,
	0, 441, 105, 476, 455, 0, 0, 106, 107, 498,
	0, 108, 0, 109, 0, 0, 344, 0, 110, 486,
	0, 204, 0, 111, 112, 482, 484, 0, 0, 113,
	0, 345, 114, 499, 500, 501, 0, 467, 0, 346,
	115, 347, 116, 117, 0, 0, 487, 348, 118, 349,
	0, 119, 0, 0, 120, 0, 121, 122, 123, 124,
	125, 350, 126, 127, 130, 128, 431, 129, 456, 483,
	131, 502, 132, 133, 0, 0, 0, 0, 0, 134,
	214, 351, 135, 352, 477, 136, 137, 0, 478, 138,
	217, 139, 0, 140, 141, 142, 503, 143, 144, 0,
	146, 147, 145, 148, 0, 149, 353, 150, 151, 445,
	152, 0, 153, 154, 155, 51, 220, 156, 157, 473,
	158, 159, 354, 160, 504, 222, 161, 0, 162, 163,
	165, 505, 164, 479, 0, 166, 53, 167, 168, 0,
	225, 506, 507, 0, 0, 169, 480, 481, 454, 170,
	171, 172, 173, 0, 0, 174, 175, 176, 474, 0,
	177, 178, 179, 341, 508, 0, 180, 0, 0, 0,
	49, 181, 182, 183, 184, 432, 50, 0, 460, 449,
	450, 447, 448, 436, 0, 0, 428, 429, 0, 0,
	81, 82, 430, 83, 0, 437, 0, 0, 442, 0,
	0, 0, 84, 85, 185, 489, 187, 490, 86, 491,
	492, 0, 87, 191, 192, 88, 457, 475, 493, 494,
	195, 0, 485, 0, 468, 0, 89, 90, 91, 0,
	92, 0, 93, 0, 343, 94, 95, 0, 469, 471,
	0, 470, 472, 96, 97, 98, 99, 495, 100, 496,
	497, 0, 0, 101, 0, 0, 0, 488, 103, 0,
	104, 0, 0, 0, 441, 105, 476, 455, 0, 0,
	106, 107, 498, 0, 108, 0, 109, 0, 0, 344,
	0, 110, 486, 0, 204, 0, 111, 112, 482, 484,
	0, 0, 113, 0, 345, 114, 499, 500, 501, 0,
	467, 0, 346, 115, 347, 116, 117, 0, 0, 487,
	348, 118, 349, 0, 119, 0, 0, 120, 0, 121,
	122, 123, 124, 125, 350, 126, 127, 130, 128, 431,
	129, 456, 483, 131, 502, 132, 133, 0, 0, 0,
	0, 0, 134, 214, 351, 135, 352, 477, 136, 137,
	0, 478, 138, 217, 139, 0, 140, 141, 142, 503,
	143, 144, 0, 146, 147, 145, 148, 0, 149, 353,
	150, 151, 445, 152, 0, 153, 154, 155, 51, 220,
	156, 157, 473, 158, 159, 354, 160, 504, 222, 161,
	0, 162, 163, 165, 505, 164, 479, 0, 166, 53,
	167, 168, 0, 225, 506, 507, 0, 0, 169, 480,
	481, 454, 170, 171, 172, 173, 0, 0, 174, 175,
	176, 474, 0, 177, 178, 179, 341, 508, 0, 180,
	0, 0, 0, 49, 181, 182, 183, 184, 432, 50,
	0, 460, 449, 450, 447, 448, 436, 0, 0, 428,
	429, 0, 0, 81, 82, 430, 83, 0, 437, 0,
	0, 442, 0, 0, 0, 84, 85, 185, 489, 187,
	490, 86, 491, 492, 1094, 87, 191, 192, 88, 457,
	475, 493, 494, 195, 0, 485, 0, 468, 0, 89,
	90, 91, 0, 92, 0, 93, 0, 343, 94, 95,
	0, 469, 471, 0, 470, 472, 96, 97, 98, 99,
	495, 100, 496, 497, 0, 0, 101, 0, 0, 0,
	488, 103, 0, 104, 0, 0, 0, 441, 105, 476,
	455, 0, 0, 106, 107, 498, 0, 108, 0, 109,
	0, 1099, 344, 0, 110, 486, 0, 204, 0, 111,
	112, 482, 484, 0, 0, 113, 0, 345, 114, 499,
	500, 501, 0, 467, 0, 346, 115, 347, 116, 117,
	0, 1095, 487, 348, 118, 349, 0, 119, 0, 0,
	120, 0, 121, 122, 123, 124, 125, 350, 126, 127,
	130, 128, 431, 129, 456, 483, 131, 502, 132, 133,
	0, 0, 0, 0, 0, 134, 214, 351, 135, 352,
	477, 136, 137, 0, 478, 138, 217, 139, 0, 140,
	141, 142, 503, 143, 144, 0, 146, 147, 145, 148,
	0, 149, 353, 150, 151, 445, 152, 0, 153, 154,
	155, 0, 220, 156, 157, 473, 158, 159, 354, 160,
	504, 222, 161, 0, 162, 163, 165, 505, 164, 479,
	0, 166, 0, 167, 168, 0, 225, 506, 507, 0,
	1096, 169, 480, 481, 454, 170, 171, 172, 173, 0,
	0, 174, 175, 176, 474, 0, 177, 178, 179, 230,
	508, 0, 180, 0, 0, 0, 0, 181, 182, 183,
	184, 432, 460, 449, 450, 447, 448, 436, 0, 0,
	0, 0, 428, 429, 81, 82, 0, 83, 430, 0,
	0, 437, 442, 0, 0, 0, 84, 85, 185, 489,
	187, 490, 86, 491, 492, 0, 87, 191, 192, 88,
	457, 475, 493, 494, 195, 0, 485, 0, 468, 0,
	89, 90, 91, 0, 92, 0, 93, 0, 343, 94,
	95, 0, 469, 471, 0, 470, 472, 96, 97, 98,
	99, 495, 100, 496, 497, 0, 0, 101, 0, 0,
	0, 488, 103, 0, 104, 0, 0, 0, 441, 105,
	476, 455, 0, 0, 106, 107, 498, 0, 108, 0,
	109, 0, 0, 344, 0, 110, 486, 0, 204, 0,
	111, 112, 482, 484, 0, 0, 113, 0, 345, 114,
	499, 500, 501, 0, 467, 0, 346, 115, 347, 116,
	117, 0, 0, 487, 348, 118, 349, 0, 119, 0,
	0, 120, 0, 121, 122, 123, 124, 125, 350, 126,
	127, 130, 128, 431, 129, 456, 483, 131, 502, 132,
	133, 0, 0, 0, 0, 0, 134, 214, 351, 135,
	352, 477, 136, 137, 0, 478, 138, 217, 139, 0,
	140, 141, 142, 503, 143, 144, 0, 146, 147, 145,
	148, 0, 149, 353, 150, 151, 445, 152, 0, 153,
	154, 155, 0, 220, 156, 157, 473, 158, 159, 354,
	160, 504, 222, 161, 0, 162, 163, 165, 505, 164,
	479, 0, 166, 0, 167, 168, 0, 225, 506, 507,
	0, 0, 169, 480, 481, 454, 170, 171, 172, 173,
	0, 0, 174, 175, 176, 474, 0, 177, 178, 179,
	230, 508, 0, 180, 0, 0, 0, 0, 181, 182,
	183, 184, 432, 0, 0, 460, 449, 450, 447, 448,
	436, 0, 0, 428, 429, 0, 0, 81, 82, 430,
	83, 0, 437, 1452, 0, 442, 0, 0, 0, 84,
	85, 185, 489, 187, 490, 86, 491, 492, 0, 87,
	191, 192, 88, 457, 475, 493, 494, 195, 0, 485,
	0, 468, 0, 89, 90, 91, 0, 92, 0, 93,
	0, 343, 94, 95, 0, 469, 471, 0, 470, 472,
	96, 97, 98, 99, 495, 100, 496, 497, 0, 0,
	101, 0, 0, 0, 488, 103, 0, 104, 0, 0,
	0, 441, 105, 476, 455, 0, 0, 106, 107, 498,
	0, 108, 0, 109, 0, 0, 344, 0, 110, 486,
	0, 204, 0, 111, 112, 482, 484, 0, 0, 113,
	0, 345, 114, 499, 500, 501, 0, 467, 0, 346,
	115, 347, 116, 117, 0, 0, 487, 348, 118, 349,
	0, 119, 0, 0, 120, 0, 121, 122, 123, 124,
	125, 350, 126, 127, 130, 128, 431, 129, 456, 483,
	131, 502, 132, 133, 0, 0, 0, 0, 0, 134,
	214, 351, 135, 352, 477, 136, 137, 0, 478, 138,
	217, 139, 0, 140, 141, 142, 503, 143, 144, 0,
	146, 147, 145, 148, 0, 149, 353, 150, 151, 445,
	152, 0, 153, 154, 155, 0, 220, 156, 157, 473,
	158, 159, 354, 160, 504, 222, 161, 0, 162, 163,
	165, 505, 164, 479, 0, 166, 0, 167, 168, 0,
	225, 506, 507, 0, 0, 169, 480, 481, 454, 170,
	171, 172, 173, 0, 0, 174, 175, 176, 474, 0,
	177, 178, 179, 230, 508, 0, 180, 0, 0, 0,
	0, 181, 182, 183, 184, 432, 0, 0, 460, 449,
	450, 447, 448, 436, 0, 0, 428, 429, 0, 0,
	81, 82, 430, 83, 0, 437, 1402, 0, 442, 0,
	0, 0, 84, 85, 185, 489, 187, 490, 86, 491,
	492, 0, 87, 191, 192, 88, 457, 475, 493, 494,
	195, 0, 485, 0, 468, 0, 89, 90, 91, 0,
	92, 0, 93, 0, 343, 94, 95, 0, 469, 471,
	0, 470, 472, 96, 97, 98, 99, 495, 100, 496,
	497, 0, 0, 101, 0, 0, 0, 488, 103, 0,
	104, 0, 0, 0, 441, 105, 476, 455, 0, 0,
	106, 107, 498, 0, 108, 0, 109, 0, 0, 344,
	0, 110, 486, 0, 204, 0, 111, 112, 482, 484,
	0, 0, 113, 0, 345, 114, 499, 500, 501, 0,
	467, 0, 346, 115, 347, 116, 117, 0, 0, 487,
	348, 118, 349, 0, 119, 0, 0, 120, 0, 121,
	122, 123, 124, 125, 350, 126, 127, 130, 128, 431,
	129, 456, 483, 131, 502, 132, 133, 0, 0, 0,
	0, 0, 134, 214, 351, 135, 352, 477, 136, 137,
	0, 478, 138, 217, 139, 0, 140, 141, 142, 503,
	143, 144, 0, 146, 147, 145, 148, 0, 149, 353,
	150, 151, 445, 152, 0, 153, 154, 155, 0, 220,
	156, 157, 473, 158, 159, 354, 160, 504, 222, 161,
	0, 162, 163, 165, 505, 164, 479, 0, 166, 0,
	167, 168, 0, 225, 506, 507, 0, 0, 169, 480,
	481, 454, 170, 171, 172, 173, 0, 0, 174, 175,
	176, 474, 0, 177, 178, 179, 230, 508, 0, 180,
	0, 0, 0, 0, 181, 182, 183, 184, 432, 0,
	0, 460, 449, 450, 447, 448, 436, 0, 0, 428,
	429, 0, 0, 81, 82, 430, 83, 0, 437, 1052,
	0, 442, 0, 0, 0, 84, 85, 185, 489, 187,
	490, 86, 491, 492, 0, 87, 191, 192, 88, 457,
	475, 493, 494, 195, 0, 485, 0, 468, 0, 89,
	90, 91, 0, 92, 0, 93, 0, 343, 94, 95,
	0, 469, 471, 0, 470, 472, 96, 97, 98, 99,
	495, 100, 496, 497, 0, 0, 101, 0, 0, 0,
	488, 103, 0, 104, 0, 0, 0, 441, 105, 476,
	455, 0, 0, 106, 107, 498, 0, 108, 0, 109,
	0, 0, 344, 0, 110, 486, 0, 204, 0, 111,
	112, 482, 484, 0, 0, 113, 0, 345, 114, 499,
	500, 501, 0, 467, 0, 346, 115, 347, 116, 117,
	0, 0, 487, 348, 118, 349, 0, 119, 0, 0,
	120, 0, 121, 122, 123, 124, 125, 350, 126, 127,
	130, 128, 431, 129, 456, 483, 131, 502, 132, 133,
	0, 0, 0, 0, 0, 134, 214, 351, 135, 352,
	477, 136, 137, 0, 478, 138, 217, 139, 0, 140,
	141, 142, 503, 143, 144, 0, 146, 147, 145, 148,
	0, 149, 353, 150, 151, 445, 152, 0, 153, 154,
	155, 0, 220, 156, 157, 473, 158, 159, 354, 160,
	504, 222, 161, 0, 162, 163, 165, 505, 164, 479,
	0, 166, 0, 167, 168, 0, 225, 506, 507, 0,
	0, 169, 480, 481, 454, 170, 171, 172, 173, 0,
	0, 174, 175, 176, 474, 0, 177, 178, 179, 230,
	508, 0, 180, 0, 0, 0, 0, 181, 182, 183,
	184, 432, 460, 449, 450, 447, 448, 436, 0, 0,
	0, 0, 428, 429, 81, 82, 0, 83, 430, 822,
	1048, 437, 442, 0, 0, 0, 84, 85, 185, 489,
	187, 490, 86, 491, 492, 0, 87, 191, 192, 88,
	457, 475, 493, 494, 195, 0, 485, 0, 468, 0,
	89, 90, 91, 0, 92, 0, 93, 0, 343, 94,
	95, 0, 469, 471, 0, 470, 472, 96, 97, 98,
	99, 495, 100, 496, 497, 0, 0, 101, 0, 0,
	0, 488, 103, 0, 104, 0, 0, 0, 441, 105,
	476, 455, 0, 0, 106, 107, 498, 0, 108, 0,
	109, 0, 0, 344, 0, 110, 486, 0, 204, 0,
	111, 112, 482, 484, 0, 0, 113, 0, 345, 114,
	499, 500, 501, 0, 467, 0, 346, 115, 347, 116,
	117, 0, 0, 487, 348, 118, 349, 0, 119, 0,
	0, 120, 0, 121, 122, 123, 124, 125, 350, 126,
	127, 130, 128, 431, 129, 456, 483, 131, 502, 132,
	133, 0, 0, 0, 0, 0, 134, 214, 351, 135,
	352, 477, 136, 137, 0, 478, 138, 217, 139, 0,
	140, 141, 142, 503, 143, 144, 0, 146, 147, 145,
	148, 0, 149, 353, 150, 151, 445, 152, 0, 153,
	154, 155, 0, 220, 156, 157, 473, 158, 159, 354,
	160, 504, 222, 161, 0, 162, 163, 165, 505, 164,
	479, 0, 166, 0, 167, 168, 0, 225, 506, 507,
	0, 0, 169, 480, 481, 454, 170, 171, 172, 173,
	0, 0, 174, 175, 176, 474, 0, 177, 178, 179,
	230, 508, 0, 180, 0, 0, 0, 0, 181, 182,
	183, 184, 432, 0, 0, 460, 449, 450, 447, 448,
	436, 0, 0, 428, 429, 426, 0, 81, 82, 430,
	83, 0, 437, 0, 0, 442, 0, 0, 0, 84,
	85, 185, 489, 187, 490, 86, 491, 492, 0, 87,
	191, 192, 88, 457, 475, 493, 494, 195, 0, 485,
	0, 468, 0, 89, 90, 91, 0, 92, 0, 93,
	0, 343, 94, 95, 0, 469, 471, 0, 470, 472,
	96, 97, 98, 99, 495, 100, 496, 497, 0, 0,
	101, 0, 0, 0, 488, 103, 0, 104, 0, 0,
	0, 441, 105, 476, 455, 0, 0, 106, 107, 498,
	0, 108, 0, 109, 0, 0, 344, 0, 110, 486,
	0, 204, 0, 111, 112, 482, 484, 0, 0, 113,
	0, 345, 114, 499, 500, 501, 0, 467, 0, 346,
	115, 347, 116, 117, 0, 0, 487, 348, 118, 349,
	0, 119, 0, 0, 120, 0, 121, 122, 123, 124,
	125, 350, 126, 127, 130, 128, 431, 129, 456, 483,
	131, 502, 132, 133, 0, 0, 0, 0, 0, 134,
	214, 351, 135, 352, 477, 136, 137, 0, 478, 138,
	217, 139, 0, 140, 141, 142, 503, 143, 144, 0,
	146, 147, 145, 148, 0, 149, 353, 150, 151, 445,
	152, 0, 153, 154, 155, 0, 220, 156, 157, 473,
	158, 159, 354, 160, 504, 222, 161, 0, 162, 163,
	165, 505, 164, 479, 0, 166, 0, 167, 168, 0,
	225, 506, 507, 0, 0, 169, 480, 481, 454, 170,
	171, 172, 173, 0, 0, 174, 175, 176, 474, 0,
	177, 178, 179, 230, 508, 1408, 180, 0, 0, 0,
	0, 181, 182, 183, 184, 432, 460, 449, 450, 447,
	448, 436, 0, 0, 0, 0, 428, 429, 81, 82,
	0, 83, 430, 0, 0, 437, 442, 0, 0, 0,
	84, 85, 185, 489, 187, 490, 86, 491, 492, 0,
	87, 191, 192, 88, 457, 475, 493, 494, 195, 0,
	485, 0, 468, 0, 89, 90, 91, 0, 92, 0,
	93, 0, 343, 94, 95, 0, 469, 471, 0, 470,
	472, 96, 97, 98, 99, 495, 100, 496, 497, 529,
	0, 101, 0, 0, 0, 488, 103, 0, 104, 0,
	0, 0, 441, 105, 476, 455, 0, 0, 106, 107,
	498, 0, 108, 0, 109, 0, 0, 344, 0, 110,
	486, 0, 204, 0, 111, 112, 482, 484, 0, 0,
	113, 0, 345, 114, 499, 500, 501, 0, 467, 0,
	346, 115, 347, 116, 117, 0, 0, 487, 348, 118,
	349, 0, 119, 0, 0, 120, 0, 121, 122, 123,
	124, 125, 350, 126, 127, 130, 128, 431, 129, 456,
	483, 131, 502, 132, 133, 0, 0, 0, 0, 0,
	134, 214, 351, 135, 352, 477, 136, 137, 0, 478,
	138, 217, 139, 0, 140, 141, 142, 503, 143, 144,
	0, 146, 147, 145, 148, 0, 149, 353, 150, 151,
	445, 152, 0, 153, 154, 155, 0, 220, 156, 157,
	473, 158, 159, 354, 160, 504, 222, 161, 0, 162,
	163, 165, 505, 164, 479, 0, 166, 0, 167, 168,
	0, 225, 506, 507, 0, 0, 169, 480, 481, 454,
	170, 171, 172, 173, 0, 0, 174, 175, 176, 474,
	0, 177, 178, 179, 230, 508, 0, 180, 0, 0,
	0, 0, 181, 182, 183, 184, 432, 460, 449, 450,
	447, 448, 436, 0, 0, 0, 0, 428, 429, 81,
	82, 0, 83, 430, 0, 0, 437, 442, 0, 0,
	0, 84, 85, 185, 489, 187, 490, 86, 491, 492,
	0, 87, 191, 192, 88, 457, 475, 493, 494, 195,
	0, 485, 0, 468, 0, 89, 90, 91, 0, 92,
	0, 93, 0, 343, 94, 95, 0, 469, 471, 0,
	470, 472, 96, 97, 98, 99, 495, 100, 496, 497,
	0, 0, 101, 0, 0, 0, 488, 103, 0, 104,
	0, 0, 0, 441, 105, 476, 455, 0, 0, 106,
	107, 498, 0, 108, 0, 109, 0, 1099, 344, 0,
	110, 486, 0, 204, 0, 111, 112, 482, 484, 0,
	0, 113, 0, 345, 114, 499, 500, 501, 0, 467,
	0, 346, 115, 347, 116, 117, 0, 0, 487, 348,
	118, 349, 0, 119, 0, 0, 120, 0, 121, 122,
	123, 124, 125, 350, 126, 127, 130, 128, 431, 129,
	456, 483, 131, 502, 132, 133, 0, 0, 0, 0,
	0, 134, 214, 351, 135, 352, 477, 136, 137, 0,
	478, 138, 217, 139, 0, 140, 141, 142, 503, 143,
	144, 0, 146, 147, 145, 148, 0, 149, 353, 150,
	151, 445, 152, 0, 153, 154, 155, 0, 220, 156,
	157, 473, 158, 159, 354, 160, 504, 222, 161, 0,
	162, 163, 165, 505, 164, 479, 0, 166, 0, 167,
	168, 0, 225, 506, 507, 0, 0, 169, 480, 481,
	454, 170, 171, 172, 173, 0, 0, 174, 175, 176,
	474, 0, 177, 178, 179, 230, 508, 0, 180, 0,
	0, 0, 0, 181, 182, 183, 184, 432, 460, 449,
	450, 447, 448, 436, 0, 0, 0, 0, 428, 429,
	81, 82, 762, 83, 430, 0, 0, 437, 442, 0,
	0, 0, 84, 85, 185, 489, 187, 490, 86, 491,
	492, 0, 87, 191, 192, 88, 457, 475, 493, 494,
	195, 0, 485, 0, 468, 0, 89, 90, 91, 0,
	92, 0, 93, 0, 343, 94, 95, 0, 469, 471,
	0, 470, 472, 96, 97, 98, 99, 495, 100, 496,
	497, 0, 0, 101, 0, 0, 0, 488, 103, 0,
	104, 0, 0, 0, 441, 105, 476, 455, 0, 0,
	106, 107, 498, 0, 108, 0, 109, 0, 0, 344,
	0, 110, 486, 0, 204, 0, 111, 112, 482, 484,
	0, 0, 113, 0, 345, 114, 499, 500, 501, 0,
	467, 0, 346, 115, 347, 116, 117, 0, 0, 487,
	348, 118, 349, 0, 119, 0, 0, 120, 0, 121,
	122, 123, 124, 125, 350, 126, 127, 130, 128, 431,
	129, 456, 483, 131, 502, 132, 133, 0, 0, 0,
	0, 0, 134, 214, 351, 135, 352, 477, 136, 137,
	0, 478, 138, 217, 139, 0, 140, 141, 142, 503,
	143, 144, 0, 146, 147, 145, 148, 0, 149, 353,
	150, 151, 445, 152, 0, 153, 154, 155, 0, 220,
	156, 157, 473, 158, 159, 354, 160, 504, 222, 161,
	0, 162, 163, 165, 505, 164, 479, 0, 166, 0,
	167, 168, 0, 225, 506, 507, 0, 0, 169, 480,
	481, 454, 170, 171, 172, 173, 0, 0, 174, 175,
	176, 474, 0, 177, 178, 179, 230, 508, 0, 180,
	0, 0, 0, 0, 181, 182, 183, 184, 432, 460,
	449, 450, 447, 448, 436, 0, 0, 0, 0, 428,
	429, 81, 82, 0, 83, 430, 0, 0, 437, 442,
	0, 0, 0, 84, 85, 185, 489, 187, 490, 86,
	491, 492, 0, 87, 191, 192, 88, 457, 475, 493,
	494, 195, 0, 485, 0, 468, 0, 89, 90, 91,
	0, 92, 0, 93, 0, 343, 94, 1733, 0, 469,
	471, 0, 470, 472, 96, 97, 98, 99, 495, 100,
	496, 497, 0, 0, 101, 0, 0, 0, 488, 103,
	0, 104, 0, 0, 0, 441, 105, 476, 455, 0,
	0, 106, 107, 498, 0, 108, 0, 109, 0, 0,
	344, 0, 110, 486, 0, 204, 0, 111, 112, 482,
	484, 0, 0, 113, 0, 345, 114, 499, 500, 501,
	0, 467, 0, 346, 115, 347, 116, 117, 0, 0,
	487, 348, 118, 349, 0, 119, 0, 0, 120, 0,
	121, 122, 123, 124, 125, 350, 126, 127, 130, 128,
	431, 129, 456, 483, 131, 502, 132, 133, 0, 0,
	0, 0, 0, 134, 214, 351, 135, 352, 477, 136,
	137, 0, 478, 138, 217, 139, 0, 140, 141, 142,
	503, 143, 144, 0, 146, 147, 145, 148, 0, 149,
	353, 150, 151, 445, 152, 0, 153, 154, 155, 0,
	220, 156, 157, 473, 158, 159, 354, 160, 504, 222,
	161, 0, 162, 163, 165, 505, 164, 479, 0, 166,
	0, 167, 168, 0, 225, 506, 507, 0, 0, 169,
	480, 481, 454, 170, 171, 1732, 173, 0, 0, 174,
	175, 176, 474, 0, 177, 178, 179, 230, 508, 0,
	180, 0, 0, 0, 0, 181, 182, 183, 184, 432,
	460, 449, 450, 447, 448, 436, 0, 0, 0, 0,
	428, 429, 81, 82, 0, 83, 430, 0, 0, 437,
	442, 0, 0, 0, 84, 85, 1731, 489, 187, 490,
	86, 491, 492, 0, 87, 191, 192, 88, 457, 475,
	493, 494, 195, 0, 485, 0, 468, 0, 89, 90,
	91, 0, 92, 0, 93, 0, 343, 94, 1733, 0,
	469, 471, 0, 470, 472, 96, 97, 98, 99, 495,
	100, 496, 497, 0, 0, 101, 0, 0, 0, 488,
	103, 0, 104, 0, 0, 0, 441, 105, 476, 455,
	0, 0, 106, 107, 498, 0, 108, 0, 109, 0,
	0, 344, 0, 110, 486, 0, 204, 0, 111, 112,
	482, 484, 0, 0, 113, 0, 345, 114, 499, 500,
	501, 0, 467, 0, 346, 115, 347, 116, 117, 0,
	0, 487, 348, 118, 349, 0, 119, 0, 0, 120,
	0, 121, 122, 123, 124, 125, 350, 126, 127, 130,
	128, 431, 129, 456, 483, 131, 502, 132, 133, 0,
	0, 0, 0, 0, 134, 214, 351, 135, 352, 477,
	136, 137, 0, 478, 138, 217, 139, 0, 140, 141,
	142, 503, 143, 144, 0, 146, 147, 145, 148, 0,
	149, 353, 150, 151, 445, 152, 0, 153, 154, 155,
	0, 220, 156, 157, 473, 158, 159, 354, 160, 504,
	222, 161, 0, 162, 163, 165, 505, 164, 479, 0,
	166, 0, 167, 168, 0, 225, 506, 507, 0, 0,
	169, 480, 481, 454, 170, 171, 1732, 173, 0, 0,
	174, 175, 176, 474, 0, 177, 178, 179, 230, 508,
	0, 180, 0, 0, 0, 0, 181, 182, 183, 184,
	432, 460, 449, 450, 447, 448, 436, 0, 0, 0,
	0, 428, 429, 81, 82, 0, 83, 430, 0, 0,
	437, 442, 0, 0, 0, 84, 85, 185, 489, 187,
	490, 86, 491, 492, 0, 87, 191, 192, 88, 457,
	475, 493, 494, 195, 0, 485, 0, 468, 0, 89,
	90, 91, 0, 92, 0, 93, 0, 343, 94, 95,
	0, 469, 471, 0, 470, 472, 96, 97, 98, 99,
	495, 100, 496, 497, 0, 0, 101, 0, 0, 0,
	488, 103, 0, 104, 0, 0, 0, 441, 105, 476,
	455, 0, 0, 106, 107, 498, 0, 108, 0, 109,
	0, 0, 344, 0, 110, 486, 0, 204, 0, 111,
	112, 482, 484, 0, 0, 113, 0, 345, 114, 499,
	500, 501, 0, 467, 0, 346, 115, 347, 116, 117,
	0, 0, 487, 348, 118, 349, 0, 119, 0, 0,
	120, 0, 121, 122, 123, 124, 125, 350, 126, 127,
	130, 128, 431, 129, 456, 483, 131, 502, 132, 133,
	0, 0, 0, 0, 0, 134, 214, 351, 135, 352,
	477, 136, 137, 0, 478, 138, 217, 139, 0, 140,
	141, 142, 503, 143, 144, 0, 146, 147, 145, 148,
	0, 149, 353, 150, 151, 445, 152, 0, 153, 154,
	155, 0, 220, 156, 157, 473, 158, 159, 354, 160,
	504, 222, 161, 0, 162, 163, 165, 505, 164, 479,
	0, 166, 0, 167, 168, 0, 225, 506, 507, 0,
	0, 169, 480, 481, 454, 170, 171, 172, 173, 0,
	0, 174, 175, 176, 474, 0, 177, 178, 179, 230,
	508, 0, 180, 0, 0, 0, 0, 181, 182, 183,
	184, 432, 460, 449, 450, 447, 448, 436, 0, 0,
	0, 0, 428, 429, 81, 82, 0, 83, 430, 0,
	0, 437, 442, 0, 0, 0, 84, 85, 185, 489,
	187, 490, 86, 491, 492, 0, 87, 191, 192, 88,
	457, 475, 493, 494, 195, 0, 485, 0, 468, 0,
	89, 90, 91, 0, 92, 0, 93, 0, 343, 94,
	95, 0, 469, 471, 0, 470, 472, 96, 97, 98,
	99, 495, 100, 496, 497, 0, 0, 101, 0, 0,
	0, 488, 103, 0, 104, 0, 0, 0, 441, 105,
	476, 455, 0, 0, 106, 107, 498, 0, 108, 0,
	109, 0, 0, 344, 0, 110, 486, 0, 204, 0,
	111, 112, 482, 484, 0, 0, 113, 0, 345, 114,
	499, 500, 501, 0, 467, 0, 346, 115, 347, 116,
	117, 0, 0, 487, 348, 118, 349, 0, 119, 0,
	0, 120, 0, 121, 122, 123, 124, 125, 350, 126,
	127, 130, 128, 0, 129, 456, 483, 131, 502, 132,
	133, 0, 0, 0, 0, 0, 134, 214, 351, 135,
	352, 477, 136, 137, 0, 478, 138, 217, 139, 0,
	140, 141, 142, 503, 143, 144, 0, 146, 147, 145,
	148, 0, 149, 353, 150, 151, 1089, 152, 0, 153,
	154, 155, 0, 220, 156, 157, 473, 158, 159, 354,
	160, 504, 222, 161, 0, 162, 163, 165, 505, 164,
	479, 0, 166, 0, 167, 168, 0, 225, 506, 507,
	0, 0, 169, 480, 481, 454, 170, 171, 172, 173,
	0, 0, 174, 175, 176, 474, 0, 177, 178, 179,
	230, 508, 0, 180, 0, 0, 0, 0, 181, 182,
	183, 184, 0, 460, 449, 450, 447, 448, 436, 0,
	0, 0, 0, 1085, 1086, 81, 82, 0, 83, 1087,
	0, 0, 1088, 442, 0, 0, 0, 84, 85, 0,
	489, 187, 490, 86, 491, 492, 0, 87, 191, 192,
	88, 457, 475, 493, 494, 195, 0, 485, 0, 468,
	0, 89, 90, 91, 0, 92, 0, 93, 0, 343,
	94, 1733, 0, 469, 471, 0, 470, 472, 96, 97,
	98, 99, 495, 100, 496, 497, 0, 0, 101, 0,
	0, 0, 488, 103, 0, 104, 0, 0, 0, 441,
	105, 476, 455, 0, 0, 106, 107, 498, 0, 108,
	0, 109, 0, 0, 344, 0, 110, 486, 0, 204,
	0, 111, 112, 482, 484, 0, 0, 113, 0, 345,
	114, 499, 500, 501, 0, 467, 0, 0, 115, 347,
	116, 117, 0, 0, 487, 348, 118, 0, 0, 119,
	0, 0, 120, 0, 121, 122, 123, 124, 125, 350,
	126, 127, 130, 128, 431, 129, 456, 483, 131, 502,
	132, 133, 0, 0, 0, 0, 0, 134, 214, 351,
	135, 352, 477, 136, 137, 0, 478, 138, 217, 139,
	0, 140, 141, 142, 503, 143, 144, 0, 146, 147,
	145, 148, 0, 149, 353, 150, 151, 445, 152, 0,
	153, 154, 155, 0, 220, 156, 157, 473, 158, 159,
	0, 160, 504, 222, 161, 0, 162, 163, 165, 505,
	164, 479, 0, 166, 0, 167, 168, 0, 225, 506,
	507, 0, 0, 169, 480, 481, 454, 170, 171, 1732,
	173, 0, 0, 174, 175, 176, 474, 0, 177, 178,
	179, 230, 508, 0, 180, 0, 0, 0, 0, 181,
	182, 183, 184, 0, 460, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 428, 429, 81, 82, 0, 83,
	430, 0, 0, 437, 0, 0, 0, 0, 84, 85,
	185, 186, 187, 188, 86, 189, 190, 0, 87, 191,
	192, 88, 0, 475, 193, 194, 195, 0, 485, 0,
	468, 0, 89, 90, 91, 0, 92, 0, 93, 0,
	343, 94, 95, 0, 469, 471, 0, 470, 472, 96,
	97, 98, 99, 197, 100, 198, 199, 0, 0, 101,
	0, 0, 0, 102, 103, 0, 104, 0, 0, 0,
	200, 105, 476, 0, 0, 0, 106, 107, 202, 0,
	108, 0, 109, 0, 0, 344, 0, 110, 486, 0,
	204, 0, 111, 112, 482, 484, 0, 0, 113, 0,
	345, 114, 207, 208, 209, 0, 210, 0, 346, 115,
	347, 116, 117, 0, 0, 487, 348, 118, 349, 0,
	119, 0, 0, 120, 0, 121, 122, 123, 124, 125,
	350, 126, 127, 130, 128, 0, 129, 0, 483, 131,
	213, 132, 133, 0, 0, 0, 0, 0, 134, 214,
	351, 135, 352, 477, 136, 137, 0, 478, 138, 217,
	139, 0, 140, 141, 142, 218, 143, 144, 0, 146,
	147, 145, 148, 0, 149, 353, 150, 151, 219, 152,
	0, 153, 154, 155, 0, 220, 156, 157, 473, 158,
	159, 354, 160, 221, 222, 161, 0, 162, 163, 165,
	223, 164, 479, 0, 166, 0, 167, 168, 0, 225,
	226, 227, 0, 0, 169, 480, 481, 0, 170, 171,
	172, 173, 0, 0, 174, 175, 176, 474, 0, 177,
	178, 179, 230, 231, 0, 180, 0, 0, 0, 0,
	181, 182, 183, 184, 337, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 81, 82, 0, 83,
	0, 0, 0, 0, 1515, 0, 0, 0, 84, 85,
	185, 186, 187, 188, 86, 189, 190, 0, 87, 191,
	192, 88, 0, 0, 193, 194, 195, 0, 196, 0,
	342, 0, 89, 90, 91, 0, 92, 0, 93, 0,
	343, 94, 95, 0, 0, 0, 0, 0, 0, 96,
	97, 98, 99, 197, 100, 198, 199, 0, 0, 101,
	0, 0, 0, 102, 103, 0, 104, 0, 0, 0,
	200, 105, 201, 0, 0, 0, 106, 107, 202, 0,
	108, 0, 109, 0, 0, 344, 0, 110, 203, 0,
	204, 0, 111, 112, 205, 206, 0, 0, 113, 0,
	345, 114, 207, 208, 209, 0, 210, 0, 346, 115,
	347, 116, 117, 0, 0, 211, 348, 118, 349, 0,
	119, 0, 0, 120, 0, 121, 122, 123, 124, 125,
	350, 126, 127, 130, 128, 0, 129, 0, 212, 131,
	213, 132, 133, 0, 0, 0, 0, 0, 134, 214,
	351, 135, 352, 215, 136, 137, 0, 216, 138, 217,
	139, 0, 140, 141, 142, 218, 143, 144, 0, 146,
	147, 145, 148, 0, 149, 353, 150, 151, 219, 152,
	0, 153, 154, 155, 51, 220, 156, 157, 0, 158,
	159, 354, 160, 221, 222, 161, 0, 162, 163, 165,
	223, 164, 224, 0, 166, 53, 167, 168, 0, 225,
	226, 227, 0, 0, 169, 228, 229, 0, 170, 171,
	172, 173, 0, 0, 174, 175, 176, 0, 0, 177,
	178, 179, 341, 231, 0, 180, 0, 0, 0, 49,
	181, 182, 183, 184, 0, 50, 337, 635, 0, 636,
	631, 626, 0, 0, 0, 0, 0, 0, 81, 82,
	0, 83, 0, 0, 48, 0, 0, 0, 0, 0,
	84, 85, 185, 186, 187, 188, 86, 189, 190, 0,
	87, 191, 192, 88, 0, 0, 193, 194, 195, 0,
	196, 0, 342, 0, 89, 90, 91, 0, 92, 0,
	93, 0, 343, 94, 95, 0, 0, 0, 0, 0,
	0, 96, 97, 98, 99, 197, 100, 198, 199, 639,
	0, 101, 0, 0, 0, 102, 103, 0, 104, 0,
	0, 0, 200, 105, 201, 628, 0, 0, 106, 107,
	202, 0, 108, 0, 109, 0, 0, 344, 0, 110,
	203, 0, 204, 0, 111, 112, 205, 206, 0, 0,
	113, 0, 345, 114, 207, 208, 209, 0, 210, 0,
	346, 115, 347, 116, 117, 0, 0, 211, 348, 118,
	349, 0, 119, 0, 0, 120, 0, 121, 122, 123,
	124, 125, 350, 126, 127, 130, 128, 0, 129, 0,
	212, 131, 213, 132, 133, 0, 629, 0, 0, 0,
	134, 214, 351, 135, 352, 215, 136, 137, 0, 216,
	138, 217, 139, 0, 140, 141, 142, 218, 143, 144,
	0, 146, 147, 145, 148, 0, 149, 353, 150, 151,
	219, 152, 0, 153, 154, 155, 0, 220, 156, 157,
	0, 158, 159, 354, 160, 221, 222, 161, 0, 162,
	163, 165, 223, 164, 224, 0, 166, 0, 167, 168,
	0, 225, 226, 227, 0, 0, 169, 228, 229, 627,
	170, 171, 172, 173, 0, 0, 174, 175, 176, 0,
	0, 177, 178, 179, 230, 231, 0, 180, 0, 0,
	0, 0, 181, 182, 183, 184, 0, 337, 635, 0,
	636, 631, 626, 0, 0, 0, 0, 637, 632, 81,
	82, 0, 83, 0, 0, 0, 0, 0, 0, 0,
	0, 84, 85, 185, 186, 187, 188, 86, 189, 190,
	0, 87, 191, 192, 88, 0, 0, 193, 194, 195,
	0, 196, 0, 342, 0, 89, 90, 91, 0, 92,
	0, 93, 0, 343, 94, 95, 0, 0, 0, 0,
	0, 0, 96, 97, 98, 99, 197, 100, 198, 199,
	622, 0, 101, 0, 0, 0, 102, 103, 0, 104,
	0, 0, 0, 200, 105, 201, 628, 0, 0, 106,
	107, 202, 0, 108, 0, 109, 0, 0, 344, 0,
	110, 203, 0, 204, 0, 111, 112, 205, 206, 0,
	0, 113, 0, 345, 114, 207, 208, 209, 0, 210,
	0, 346, 115, 347, 116, 117, 0, 0, 211, 348,
	118, 349, 0, 119, 0, 0, 120, 0, 121, 122,
	123, 124, 125, 350, 126, 127, 130, 128, 0, 129,
	0, 212, 131, 213, 132, 133, 0, 629, 0, 0,
	0, 134, 214, 351, 135, 352, 215, 136, 137, 0,
	216, 138, 217, 139, 0, 140, 141, 142, 218, 143,
	144, 0, 146, 147, 145, 148, 0, 149, 353, 150,
	151, 219, 152, 0, 153, 154, 155, 0, 220, 156,
	157, 0, 158, 159, 354, 160, 221, 222, 161, 0,
	162, 163, 165, 223, 164, 224, 0, 166, 0, 167,
	168, 0, 225, 226, 227, 0, 0, 169, 228, 229,
	627, 170, 171, 172, 173, 0, 0, 174, 175, 176,
	0, 0, 177, 178, 179, 230, 231, 0, 180, 0,
	0, 0, 0, 181, 182, 183, 184, 0, 337, 635,
	0, 636, 631, 626, 0, 0, 0, 0, 637, 632,
	81, 82, 0, 83, 0, 0, 0, 0, 0, 0,
	0, 0, 84, 85, 185, 186, 187, 188, 86, 189,
	190, 0, 87, 191, 192, 88, 0, 0, 193, 194,
	195, 0, 196, 0, 342, 0, 89, 90, 91, 0,
	92, 0, 93, 0, 343, 94, 95, 0, 0, 0,
	0, 0, 0, 96, 97, 98, 99, 197, 100, 198,
	199, 0, 0, 101, 0, 0, 0, 102, 103, 0,
	104, 0, 0, 0, 200, 105, 201, 628, 0, 0,
	106, 107, 202, 0, 108, 0, 109, 0, 0, 344,
	0, 110, 203, 0, 204, 0, 111, 112, 205, 206,
	0, 0, 113, 0, 345, 114, 207, 208, 209, 0,
	210, 0, 346, 115, 347, 116, 117, 0, 0, 211,
	348, 118, 349, 0, 119, 0, 0, 120, 0, 121,
	122, 123, 124, 125, 350, 126, 127, 130, 128, 0,
	129, 0, 212, 131, 213, 132, 133, 0, 629, 0,
	0, 0, 134, 214, 351, 135, 352, 215, 136, 137,
	0, 216, 138, 217, 139, 0, 140, 141, 142, 218,
	143, 144, 0, 146, 147, 145, 148, 0, 149, 353,
	150, 151, 219, 152, 0, 153, 154, 155, 0, 220,
	156, 157, 0, 158, 159, 354, 160, 221, 222, 161,
	0, 162, 163, 165, 223, 164, 224, 0, 166, 0,
	167, 168, 0, 225, 226, 227, 0, 0, 169, 228,
	229, 627, 170, 171, 172, 173, 0, 0, 174, 175,
	176, 0, 0, 177, 178, 179, 230, 231, 78, 180,
	0, 0, 0, 0, 181, 182, 183, 184, 0, 0,
	81, 82, 0, 83, 0, 0, 0, 0, 0, 637,
	632, 0, 84, 85, 185, 186, 187, 188, 86, 189,
	190, 0, 87, 191, 192, 88, 0, 0, 193, 194,
	195, 0, 196, 0, 0, 0, 89, 90, 91, 0,
	92, 0, 93, 0, 0, 94, 95, 0, 0, 0,
	0, 0, 0, 96, 97, 98, 99, 197, 100, 198,
	199, 0, 0, 101, 0, 0, 0, 102, 103, 0,
	104, 0, 0, 0, 200, 105, 201, 0, 0, 0,
	106, 107, 202, 0, 108, 0, 109, 0, 0, 0,
	0, 110, 203, 0, 204, 0, 111, 112, 205, 206,
	0, 0, 113, 0, 0, 114, 207, 208, 209, 0,
	210, 0, 0, 115, 0, 116, 117, 0, 0, 211,
	0, 118, 0, 0, 119, 0, 0, 120, 0, 121,
	122, 123, 124, 125, 0, 126, 127, 130, 128, 0,
	129, 0, 212, 131, 213, 132, 133, 0, 0, 310,
	0, 0, 134, 214, 0, 135, 0, 215, 136, 137,
	0, 216, 138, 217, 139, 0, 140, 141, 142, 218,
	143, 144, 0, 146, 147, 145, 148, 0, 149, 0,
	150, 151, 219, 152, 0, 153, 154, 155, 51, 220,
	156, 157, 0, 158, 159, 0, 160, 221, 222, 161,
	0, 162, 163, 165, 223, 164, 224, 0, 166, 53,
	167, 168, 0, 225, 226, 227, 0, 0, 169, 228,
	229, 0, 170, 171, 172, 173, 0, 0, 174, 175,
	176, 0, 0, 177, 178, 179, 341, 231, 0, 180,
	0, 0, 0, 49, 181, 182, 183, 184, 78, 50,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	81, 82, 0, 83, 0, 0, 0, 0, 996, 0,
	0, 0, 84, 85, 185, 186, 187, 188, 86, 189,
	190, 0, 87, 191, 192, 88, 0, 0, 193, 194,
	195, 0, 196, 0, 0, 0, 89, 90, 91, 0,
	92, 0, 93, 0, 0, 94, 95, 0, 0, 0,
	0, 0, 0, 96, 97, 98, 99, 197, 100, 198,
	199, 0, 0, 101, 0, 0, 0, 102, 103, 0,
	104, 0, 0, 0, 200, 105, 201, 0, 0, 0,
	106, 107, 202, 0, 108, 0, 109, 0, 0, 0,
	0, 110, 203, 0, 204, 0, 111, 112, 205, 206,
	0, 0, 113, 0, 0, 114, 207, 208, 209, 0,
	210, 0, 0, 115, 0, 116, 117, 0, 0, 211,
	0, 118, 0, 0, 119, 0, 0, 120, 0, 121,
	122, 123, 124, 125, 0, 126, 127, 130, 128, 0,
	129, 0, 212, 131, 213, 132, 133, 0, 0, 0,
	0, 0, 134, 214, 0, 135, 0, 215, 136, 137,
	0, 216, 138, 217, 139, 0, 140, 141, 142, 218,
	143, 144, 0, 146, 147, 145, 148, 0, 149, 0,
	150, 151, 219, 152, 0, 153, 154, 155, 51, 220,
	156, 157, 0, 158, 159, 0, 160, 221, 222, 161,
	0, 162, 163, 165, 223, 164, 224, 0, 166, 53,
	167, 168, 0, 225, 226, 227, 0, 0, 169, 228,
	229, 0, 170, 171, 172, 173, 0, 0, 174, 175,
	176, 0, 0, 177, 178, 179, 341, 231, 0, 180,
	0, 0, 0, 49, 181, 182, 183, 184, 78, 50,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	81, 82, 0, 83, 0, 0, 0, 0, 48, 1208,
	0, 0, 84, 85, 185, 186, 187, 188, 86, 189,
	190, 0, 87, 191, 192, 88, 0, 0, 193, 194,
	195, 0, 196, 0, 0, 0, 89, 90, 91, 0,
	92, 0, 93, 0, 0, 94, 95, 0, 0, 0,
	0, 0, 0, 96, 97, 98, 99, 197, 100, 198,
	199, 0, 0, 101, 0, 0, 0, 102, 103, 0,
	104, 0, 0, 0, 200, 105, 201, 0, 0, 0,
	106, 107, 202, 0, 108, 0, 109, 0, 0, 0,
	0, 110, 203, 0, 204, 0, 111, 112, 205, 206,
	0, 0, 113, 0, 0, 114, 207, 208, 209, 0,
	210, 0, 0, 115, 0, 116, 117, 0, 0, 211,
	0, 118, 0, 0, 119, 0, 0, 120, 0, 121,
	122, 123, 124, 125, 0, 126, 127, 130, 128, 0,
	129, 0, 212, 131, 213, 132, 133, 0, 0, 0,
	0, 0, 134, 214, 0, 135, 0, 215, 136, 137,
	0, 216, 138, 217, 139, 0, 140, 141, 142, 218,
	143, 144, 0, 146, 147, 145, 148, 0, 149, 0,
	150, 151, 219, 152, 0, 153, 154, 155, 0, 220,
	156, 157, 0, 158, 159, 0, 160, 221, 222, 161,
	0, 162, 163, 165, 223, 164, 224, 0, 166, 0,
	167, 168, 0, 225, 226, 227, 0, 0, 169, 228,
	229, 0, 170, 171, 172, 173, 0, 0, 174, 175,
	176, 0, 0, 177, 178, 179, 230, 231, 0, 180,
	0, 0, 0, 0, 181, 182, 183, 184, 78, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	81, 82, 0, 83, 0, 0, 0, 0, 0, 418,
	0, 0, 84, 85, 185, 186, 187, 188, 86, 189,
	190, 0, 87, 191, 192, 88, 0, 0, 193, 194,
	195, 0, 196, 0, 0, 0, 89, 90, 91, 0,
	92, 0, 93, 0, 0, 94, 95, 0, 0, 0,
	0, 0, 0, 96, 97, 98, 99, 197, 100, 198,
	199, 0, 0, 101, 0, 0, 0, 102, 103, 0,
	104, 0, 0, 0, 200, 105, 201, 0, 0, 0,
	106, 107, 202, 0, 108, 0, 109, 0, 0, 0,
	0, 110, 203, 0, 204, 0, 111, 112, 205, 206,
	0, 0, 113, 0, 0, 114, 207, 208, 209, 0,
	210, 0, 0, 115, 0, 116, 117, 0, 0, 211,
	0, 118, 0, 0, 119, 0, 0, 120, 0, 121,
	122, 123, 124, 125, 0, 126, 127, 130, 128, 0,
	129, 0, 212, 131, 213, 132, 133, 0, 0, 310,
	0, 0, 134, 214, 0, 135, 0, 215, 136, 137,
	0, 216, 138, 217, 139, 0, 140, 141, 142, 218,
	143, 144, 0, 146, 147, 145, 148, 0, 149, 0,
	150, 151, 219, 152, 0, 153, 154, 155, 0, 220,
	156, 157, 0, 158, 159, 0, 160, 221, 222, 161,
	0, 162, 163, 165, 223, 164, 224, 0, 166, 0,
	167, 168, 0, 225, 226, 227, 0, 0, 169, 228,
	229, 0, 170, 171, 172, 173, 0, 0, 174, 175,
	176, 0, 0, 177, 178, 179, 230, 231, 0, 180,
	0, 0, 0, 0, 181, 182, 183, 184, 78, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	81, 82, 0, 83, 0, 0, 0, 0, 996, 0,
	0, 0, 84, 85, 185, 186, 187, 188, 86, 189,
	190, 0, 87, 191, 192, 88, 0, 0, 193, 194,
	195, 0, 196, 0, 0, 0, 89, 90, 91, 0,
	92, 0, 93, 0, 0, 94, 95, 0, 0, 0,
	0, 0, 0, 96, 97, 98, 99, 197, 100, 198,
	199, 0, 0, 101, 0, 0, 0, 102, 103, 0,
	104, 0, 0, 0, 200, 105, 201, 0, 0, 0,
	106, 107, 202, 0, 108, 0, 109, 0, 0, 0,
	0, 110, 203, 0, 204, 0, 111, 112, 205, 206,
	0, 0, 113, 0, 0, 114, 207, 208, 209, 0,
	210, 0, 0, 115, 0, 116, 117, 0, 0, 211,
	0, 118, 0, 0, 119, 0, 0, 120, 0, 121,
	122, 123, 124, 125, 0, 126, 127, 130, 128, 0,
	129, 0, 212, 131, 213, 132, 133, 0, 0, 0,
	0, 0, 134, 214, 0, 135, 0, 215, 136, 137,
	0, 216, 138, 217, 139, 0, 140, 141, 142, 218,
	143, 144, 0, 146, 147, 145, 148, 0, 149, 0,
	150, 151, 219, 152, 0, 153, 154, 155, 0, 220,
	156, 157, 0, 158, 159, 0, 160, 221, 222, 161,
	0, 162, 163, 165, 223, 164, 224, 0, 166, 0,
	167, 168, 0, 225, 226, 227, 0, 0, 169, 228,
	229, 0, 170, 171, 172, 173, 0, 0, 174, 175,
	176, 0, 0, 177, 178, 179, 230, 231, 0, 180,
	0, 0, 0, 0, 181, 182, 183, 184, 78, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	81, 82, 0, 83, 0, 0, 0, 0, 910, 0,
	0, 0, 84, 85, 185, 186, 187, 188, 86, 189,
	190, 0, 87, 191, 192, 88, 0, 0, 193, 194,
	195, 0, 196, 0, 0, 0, 89, 90, 91, 0,
	92, 0, 93, 0, 0, 94, 95, 0, 0, 0,
	0, 0, 0, 96, 97, 98, 99, 197, 100, 198,
	199, 0, 0, 101, 0, 0, 0, 102, 103, 0,
	104, 0, 0, 0, 200, 105, 201, 0, 0, 0,
	106, 107, 202, 0, 108, 0, 109, 0, 0, 0,
	0, 110, 203, 0, 204, 0, 111, 112, 205, 206,
	0, 0, 113, 0, 0, 114, 207, 208, 209, 0,
	210, 0, 0, 115, 0, 116, 117, 0, 0, 211,
	0, 118, 0, 0, 119, 0, 0, 120, 0, 121,
	122, 123, 124, 125, 0, 126, 127, 130, 128, 0,
	129, 0, 212, 131, 213, 132, 133, 0, 0, 0,
	0, 0, 134, 214, 0, 135, 0, 215, 136, 137,
	0, 216, 138, 217, 139, 0, 140, 141, 142, 218,
	143, 144, 0, 146, 147, 145, 148, 0, 149, 0,
	150, 151, 219, 152, 0, 153, 154, 155, 0, 220,
	156, 157, 0, 158, 159, 0, 160, 221, 222, 161,
	0, 162, 163, 165, 223, 164, 224, 0, 166, 0,
	167, 168, 0, 225, 226, 227, 0, 0, 169, 228,
	229, 0, 170, 171, 172, 173, 0, 0, 174, 175,
	176, 0, 0, 177, 178, 179, 230, 231, 0, 180,
	0, 0, 0, 0, 181, 182, 183, 184, 78, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	81, 82, 0, 83, 0, 0, 0, 0, 1418, 0,
	0, 0, 84, 85, 185, 186, 187, 188, 86, 189,
	190, 0, 87, 191, 192, 88, 0, 0, 193, 194,
	195, 0, 196, 0, 0, 0, 89, 90, 91, 0,
	92, 0, 93, 0, 0, 94, 95, 0, 0, 0,
	0, 0, 0, 96, 97, 98, 99, 197, 100, 198,
	199, 0, 0, 101, 0, 0, 0, 102, 103, 0,
	104, 0, 0, 0, 200, 105, 201, 0, 0, 0,
	106, 107, 202, 0, 108, 0, 109, 0, 0, 0,
	0, 110, 203, 0, 204, 0, 111, 112, 205, 206,
	0, 0, 113, 0, 0, 114, 207, 208, 209, 0,
	210, 0, 0, 115, 0, 116, 117, 0, 0, 211,
	0, 118, 0, 0, 119, 0, 0, 120, 0, 121,
	122, 123, 124, 125, 0, 126, 127, 130, 128, 0,
	129, 0, 212, 131, 213, 132, 133, 0, 0, 0,
	0, 0, 134, 214, 0, 135, 0, 215, 136, 137,
	0, 216, 138, 217, 139, 0, 140, 141, 142, 218,
	143, 144, 0, 146, 147, 145, 148, 0, 149, 0,
	150, 151, 219, 152, 0, 153, 154, 155, 0, 220,
	156, 157, 0, 158, 159, 0, 160, 221, 222, 161,
	0, 162, 163, 165, 223, 164, 224, 0, 166, 0,
	167, 168, 0, 225, 226, 227, 0, 0, 169, 228,
	229, 0, 170, 171, 172, 173, 0, 0, 174, 175,
	176, 0, 0, 177, 178, 179, 230, 231, 0, 180,
	0, 0, 0, 0, 181, 182, 183, 184, 78, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	81, 82, 0, 83, 0, 0, 0, 0, 519, 0,
	0, 0, 84, 85, 185, 186, 187, 188, 86, 189,
	190, 0, 87, 191, 192, 88, 0, 0, 193, 194,
	195, 0, 196, 0, 0, 0, 89, 90, 91, 0,
	92, 0, 93, 0, 0, 94, 95, 0, 0, 0,
	0, 0, 0, 96, 97, 607, 99, 197, 100, 198,
	199, 0, 0, 101, 0, 0, 0, 102, 103, 0,
	104, 0, 0, 0, 200, 105, 201, 0, 0, 0,
	106, 107, 202, 0, 108, 0, 109, 0, 0, 0,
	0, 110, 203, 0, 204, 0, 111, 112, 205, 206,
	0, 0, 113, 0, 0, 114, 207, 208, 209, 0,
	210, 0, 0, 115, 0, 116, 117, 0, 0, 211,
	0, 118, 0, 0, 119, 0, 0, 120, 0, 121,
	122, 123, 124, 125, 0, 126, 127, 130, 128, 0,
	129, 0, 212, 131, 213, 132, 133, 0, 0, 0,
	0, 0, 134, 214, 0, 135, 0, 215, 136, 137,
	0, 216, 138, 217, 139, 0, 140, 141, 142, 218,
	143, 144, 0, 146, 147, 145, 148, 0, 149, 0,
	150, 151, 219, 152, 0, 153, 154, 155, 0, 220,
	156, 157, 0, 158, 159, 0, 160, 221, 222, 161,
	0, 162, 163, 165, 223, 164, 224, 0, 166, 606,
	167, 168, 0, 225, 226, 227, 0, 0, 169, 228,
	229, 0, 170, 171, 172, 173, 0, 0, 174, 175,
	176, 0, 0, 177, 178, 179, 230, 231, 78, 180,
	0, 0, 0, 0, 181, 182, 183, 184, 0, 0,
	81, 82, 0, 83, 0, 0, 0, 0, 0, 0,
	0, 610, 84, 85, 185, 186, 187, 188, 86, 189,
	190, 0, 87, 191, 192, 88, 0, 0, 193, 194,
	195, 0, 196, 0, 0, 0, 89, 90, 91, 0,
	92, 0, 93, 0, 0, 94, 95, 0, 0, 0,
	0, 0, 0, 96, 97, 98, 99, 197, 100, 198,
	199, 0, 0, 101, 0, 0, 0, 102, 103, 0,
	104, 0, 0, 0, 200, 105, 201, 0, 0, 0,
	106, 107, 202, 0, 108, 0, 109, 0, 0, 0,
	0, 110, 203, 0, 204, 0, 111, 112, 205, 206,
	0, 0, 113, 0, 0, 114, 207, 208, 209, 0,
	210, 0, 0, 115, 0, 116, 117, 0, 0, 211,
	0, 118, 0, 0, 119, 0, 0, 120, 0, 121,
	122, 123, 124, 125, 0, 126, 127, 130, 128, 0,
	129, 0, 212, 131, 213, 132, 133, 0, 0, 0,
	0, 0, 134, 214, 0, 135, 0, 215, 136, 137,
	0, 216, 138, 217, 139, 0, 140, 141, 142, 218,
	143, 144, 0, 146, 147, 145, 148, 0, 149, 0,
	150, 151, 219, 152, 0, 153, 154, 155, 0, 220,
	156, 157, 0, 158, 159, 0, 160, 221, 222, 161,
	0, 162, 163, 165, 223, 164, 224, 0, 166, 0,
	167, 168, 0, 225, 226, 227, 0, 0, 169, 228,
	229, 0, 170, 171, 172, 173, 0, 0, 174, 175,
	176, 0, 0, 177, 178, 179, 230, 231, 337, 180,
	0, 0, 0, 0, 181, 182, 183, 184, 0, 0,
	81, 82, 0, 83, 0, 0, 0, 0, 0, 0,
	0, 610, 84, 85, 185, 186, 187, 188, 86, 189,
	190, 0, 87, 191, 192, 88, 0, 0, 193, 194,
	195, 0, 196, 0, 342, 0, 89, 90, 91, 0,
	92, 0, 93, 0, 343, 94, 95, 0, 0, 0,
	0, 0, 0, 96, 97, 98, 99, 197, 100, 198,
	199, 0, 0, 101, 0, 0, 0, 102, 103, 0,
	104, 0, 0, 0, 200, 105, 201, 0, 0, 0,
	106, 107, 202, 0, 108, 0, 109, 0, 0, 344,
	0, 110, 203, 0, 204, 0, 111, 112, 205, 206,
	0, 0, 113, 0, 345, 114, 207, 208, 209, 0,
	210, 0, 346, 115, 347, 116, 117, 0, 0, 211,
	348, 118, 349, 0, 119, 0, 0, 120, 0, 121,
	122, 123, 124, 125, 350, 126, 127, 130, 128, 0,
	129, 0, 212, 131, 213, 132, 133, 0, 0, 0,
	0, 0, 134, 214, 351, 135, 352, 215, 136, 137,
	0, 216, 138, 217, 139, 0, 140, 141, 142, 218,
	143, 144, 0, 146, 147, 145, 148, 0, 149, 353,
	150, 151, 219, 152, 0, 153, 154, 155, 0, 220,
	156, 157, 0, 158, 159, 354, 160, 221, 222, 161,
	0, 162, 163, 165, 223, 164, 224, 0, 166, 0,
	167, 168, 0, 225, 226, 227, 0, 0, 169, 228,
	229, 0, 170, 171, 172, 173, 0, 0, 174, 175,
	176, 0, 0, 177, 178, 179, 230, 231, 78, 180,
	0, 0, 0, 0, 181, 182, 183, 184, 0, 0,
	81, 82, 0, 83, 0, 0, 0, 0, 0, 0,
	0, 0, 84, 85, 185, 186, 187, 188, 86, 189,
	190, 0, 87, 191, 192, 88, 0, 0, 193, 194,
	195, 883, 196, 0, 0, 0, 89, 90, 91, 0,
	92, 881, 93, 0, 0, 94, 95, 0, 0, 0,
	0, 0, 0, 96, 97, 98, 99, 197, 100, 198,
	199, 0, 0, 101, 0, 0, 0, 102, 103, 0,
	104, 0, 0, 0, 200, 105, 201, 0, 973, 0,
	106, 107, 202, 0, 108, 0, 109, 886, 0, 0,
	0, 110, 203, 0, 204, 0, 111, 112, 205, 206,
	0, 971, 113, 0, 0, 114, 207, 208, 209, 0,
	210, 0, 0, 115, 0, 116, 117, 0, 0, 211,
	0, 118, 0, 0, 119, 0, 0, 120, 0, 121,
	122, 123, 124, 125, 0, 126, 127, 130, 128, 0,
	129, 0, 212, 131, 213, 132, 133, 0, 0, 0,
	0, 0, 134, 214, 0, 135, 0, 215, 136, 137,
	0, 216, 138, 217, 139, 885, 140, 141, 142, 218,
	143, 144, 0, 146, 147, 145, 148, 0, 149, 0,
	150, 151, 219, 152, 0, 153, 154, 155, 0, 220,
	156, 157, 0, 158, 159, 0, 160, 221, 222, 161,
	0, 162, 163, 165, 223, 164, 224, 0, 166, 0,
	167, 168, 0, 225, 226, 227, 0, 0, 169, 228,
	229, 0, 170, 171, 172, 173, 0, 972, 174, 175,
	176, 0, 0, 177, 178, 179, 230, 231, 78, 180,
	0, 0, 0, 0, 181, 182, 183, 184, 0, 0,
	81, 82, 0, 83, 0, 0, 0, 0, 0, 0,
	0, 0, 84, 85, 185, 186, 187, 188, 86, 189,
	190, 0, 87, 191, 192, 88, 0, 0, 193, 194,
	195, 883, 196, 0, 0, 878, 89, 90, 91, 0,
	92, 881, 93, 0, 0, 94, 95, 0, 0, 0,
	0, 0, 0, 96, 97, 98, 99, 197, 100, 198,
	199, 0, 0, 101, 0, 0, 0, 102, 103, 0,
	104, 0, 0, 0, 200, 105, 201, 0, 0, 0,
	106, 107, 202, 0, 108, 0, 109, 886, 0, 0,
	0, 110, 203, 0, 204, 0, 111, 112, 877, 206,
	0, 0, 113, 0, 0, 114, 207, 208, 209, 0,
	210, 0, 0, 115, 0, 116, 117, 0, 0, 211,
	0, 118, 0, 0, 119, 0, 0, 120, 0, 121,
	122, 123, 124, 125, 0, 126, 127, 130, 128, 0,
	129, 0, 212, 131, 213, 132, 133, 0, 0, 0,
	0, 0, 134, 214, 0, 135, 0, 215, 136, 137,
	0, 216, 138, 217, 139, 885, 140, 141, 142, 218,
	143, 144, 0, 146, 147, 145, 148, 0, 149, 0,
	150, 151, 219, 152, 0, 153, 154, 155, 0, 220,
	156, 157, 0, 158, 159, 0, 160, 221, 222, 161,
	0, 162, 163, 165, 223, 164, 224, 0, 166, 0,
	167, 168, 0, 225, 226, 227, 0, 0, 169, 228,
	229, 0, 170, 171, 172, 173, 0, 884, 174, 175,
	176, 0, 0, 177, 178, 179, 230, 231, 78, 180,
	0, 0, 0, 0, 181, 182, 183, 184, 0, 0,
	81, 82, 0, 83, 0, 0, 0, 0, 0, 1208,
	0, 0, 84, 85, 185, 186, 187, 188, 86, 189,
	190, 0, 87, 191, 192, 88, 0, 0, 193, 194,
	195, 0, 196, 0, 0, 0, 89, 90, 91, 0,
	92, 0, 93, 0, 0, 94, 95, 0, 0, 0,
	0, 0, 0, 96, 97, 98, 99, 197, 100, 198,
	199, 0, 0, 101, 0, 0, 0, 102, 103, 0,
	104, 0, 0, 0, 200, 105, 201, 0, 0, 0,
	106, 107, 202, 0, 108, 0, 109, 0, 0, 0,
	0, 110, 203, 0, 204, 0, 111, 112, 205, 206,
	0, 0, 113, 0, 0, 114, 207, 208, 209, 0,
	210, 0, 0, 115, 0, 116, 117, 0, 0, 211,
	0, 118, 0, 0, 119, 0, 0, 120, 0, 121,
	122, 123, 124, 125, 0, 126, 127, 130, 128, 0,
	129, 0, 212, 131, 213, 132, 133, 0, 0, 0,
	0, 0, 134, 214, 0, 135, 0, 215, 136, 137,
	0, 216, 138, 217, 139, 0, 140, 141, 142, 218,
	143, 144, 0, 146, 147, 145, 148, 0, 149, 0,
	150, 151, 219, 152, 0, 153, 154, 155, 0, 220,
	156, 157, 0, 158, 159, 0, 160, 221, 222, 161,
	0, 162, 163, 165, 223, 164, 224, 0, 166, 0,
	167, 168, 0, 225, 226, 227, 0, 0, 169, 228,
	229, 0, 170, 171, 172, 173, 0, 0, 174, 175,
	176, 0, 0, 177, 178, 179, 230, 231, 78, 180,
	0, 0, 0, 0, 181, 182, 183, 184, 0, 0,
	81, 82, 0, 83, 0, 0, 0, 0, 0, 0,
	0, 0, 84, 85, 185, 186, 187, 188, 86, 189,
	190, 0, 87, 191, 192, 88, 0, 0, 193, 194,
	195, 0, 196, 0, 0, 0, 89, 90, 91, 0,
	92, 0, 93, 0, 0, 94, 95, 0, 0, 0,
	0, 0, 0, 96, 97, 98, 99, 197, 100, 198,
	199, 0, 0, 101, 0, 0, 0, 102, 103, 0,
	104, 0, 0, 0, 200, 105, 201, 0, 0, 0,
	106, 107, 202, 0, 108, 0, 109, 0, 0, 0,
	0, 110, 203, 0, 204, 0, 111, 112, 205, 206,
	0, 0, 113, 0, 0, 114, 207, 208, 209, 0,
	210, 0, 0, 115, 0, 116, 117, 0, 0, 211,
	0, 118, 0, 0, 119, 0, 0, 120, 0, 121,
	122, 123, 124, 125, 0, 126, 127, 130, 128, 0,
	129, 0, 212, 131, 213, 132, 133, 0, 0, 310,
	0, 0, 134, 214, 0, 135, 0, 215, 136, 137,
	0, 216, 138, 217, 139, 0, 140, 141, 142, 218,
	143, 144, 0, 146, 147, 145, 148, 0, 149, 0,
	150, 151, 219, 152, 0, 153, 154, 155, 0, 220,
	156, 157, 0, 158, 159, 0, 160, 221, 222, 161,
	0, 162, 163, 165, 223, 164, 224, 0, 166, 0,
	167, 168, 0, 225, 226, 227, 0, 0, 169, 228,
	229, 0, 170, 171, 172, 173, 0, 0, 174, 175,
	176, 0, 0, 177, 178, 179, 230, 231, 78, 180,
	0, 0, 0, 0, 181, 182, 183, 184, 0, 0,
	81, 82, 0, 83, 0, 0, 0, 0, 0, 0,
	0, 0, 84, 85, 185, 186, 187, 188, 86, 189,
	190, 0, 87, 191, 192, 88, 0, 0, 193, 194,
	195, 0, 196, 0, 0, 0, 89, 90, 91, 0,
	92, 0, 93, 0, 0, 94, 95, 0, 0, 0,
	0, 0, 0, 96, 97, 98, 99, 197, 100, 198,
	199, 0, 0, 101, 0, 0, 0, 102, 103, 0,
	104, 0, 0, 0, 200, 105, 201, 0, 0, 0,
	106, 107, 202, 0, 108, 0, 109, 0, 0, 0,
	0, 110, 203, 0, 204, 0, 111, 112, 561, 206,
	0, 0, 113, 0, 0, 114, 207, 208, 209, 0,
	210, 0, 0, 115, 0, 116, 117, 0, 0, 211,
	0, 118, 0, 0, 119, 0, 0, 120, 0, 121,
	122, 123, 124, 125, 0, 126, 127, 130, 128, 0,
	129, 0, 212, 131, 213, 132, 133, 0, 0, 310,
	0, 0, 134, 214, 0, 135, 0, 215, 136, 137,
	0, 216, 138, 217, 139, 0, 140, 141, 142, 218,
	143, 144, 0, 146, 147, 145, 148, 0, 149, 0,
	150, 151, 219, 152, 0, 153, 154, 155, 0, 220,
	156, 157, 0, 158, 159, 0, 160, 221, 222, 161,
	0, 162, 163, 165, 223, 164, 224, 0, 166, 0,
	167, 168, 0, 225, 226, 227, 0, 0, 169, 228,
	229, 0, 170, 171, 172, 173, 0, 0, 174, 175,
	176, 0, 0, 177, 178, 179, 230, 231, 78, 180,
	0, 0, 0, 0, 181, 182, 183, 184, 0, 0,
	81, 82, 0, 83, 0, 0, 0, 0, 0, 0,
	0, 0, 84, 85, 185, 186, 187, 188, 86, 189,
	190, 0, 87, 191, 192, 88, 0, 0, 193, 194,
	195, 0, 196, 0, 0, 0, 89, 90, 91, 0,
	92, 0, 93, 0, 0, 94, 95, 0, 0, 0,
	0, 0, 0, 96, 97, 98, 99, 197, 100, 198,
	199, 0, 0, 101, 0, 0, 0, 102, 103, 0,
	104, 0, 0, 0, 200, 105, 201, 0, 0, 0,
	106, 107, 202, 0, 108, 0, 109, 0, 0, 0,
	0, 110, 203, 0, 204, 0, 111, 112, 316, 206,
	0, 0, 113, 0, 0, 114, 207, 208, 209, 0,
	210, 0, 0, 115, 0, 116, 117, 0, 0, 211,
	0, 118, 0, 0, 119, 0, 0, 120, 0, 121,
	122, 123, 124, 125, 0, 126, 127, 130, 128, 0,
	129, 0, 212, 131, 213, 132, 133, 0, 0, 310,
	0, 0, 134, 214, 0, 135, 0, 215, 136, 137,
	0, 216, 138, 217, 139, 0, 140, 141, 142, 218,
	143, 144, 0, 146, 147, 145, 148, 0, 149, 0,
	150, 151, 219, 152, 0, 153, 154, 155, 0, 220,
	156, 157, 0, 158, 159, 0, 160, 221, 222, 161,
	0, 162, 163, 165, 223, 164, 224, 0, 166, 0,
	167, 168, 0, 225, 226, 227, 0, 0, 169, 228,
	229, 0, 170, 171, 172, 173, 0, 0, 174, 175,
	176, 0, 0, 177, 178, 179, 230, 231, 78, 180,
	0, 0, 0, 0, 181, 182, 183, 184, 0, 0,
	81, 82, 0, 83, 0, 0, 0, 0, 0, 0,
	0, 0, 84, 85, 185, 186, 187, 188, 86, 189,
	190, 0, 87, 191, 192, 88, 0, 0, 193, 194,
	195, 0, 196, 0, 0, 0, 89, 90, 91, 0,
	92, 0, 93, 0, 0, 94, 95, 0, 0, 0,
	0, 0, 0, 96, 97, 98, 99, 197, 100, 198,
	199, 0, 0, 101, 0, 0, 0, 102, 103, 0,
	104, 0, 0, 0, 200, 105, 201, 0, 0, 0,
	106, 107, 202, 0, 108, 0, 109, 0, 0, 0,
	0, 110, 203, 0, 204, 0, 111, 112, 205, 206,
	0, 0, 113, 0, 0, 114, 207, 208, 209, 0,
	210, 0, 0, 115, 0, 116, 117, 0, 0, 211,
	0, 118, 0, 0, 119, 0, 0, 120, 0, 121,
	122, 123, 124, 125, 0, 126, 127, 130, 128, 0,
	129, 0, 212, 131, 213, 132, 133, 0, 0, 0,
	0, 0, 134, 214, 0, 135, 0, 215, 136, 137,
	0, 216, 138, 217, 139, 0, 140, 141, 142, 218,
	143, 144, 0, 146, 147, 145, 148, 0, 149, 0,
	150, 151, 219, 152, 0, 153, 154, 155, 0, 220,
	156, 157, 0, 158, 159, 0, 160, 221, 222, 161,
	0, 162, 163, 165, 223, 164, 224, 0, 166, 0,
	167, 168, 0, 225, 226, 227, 0, 0, 169, 228,
	229, 0, 170, 171, 172, 173, 0, 0, 174, 175,
	176, 0, 0, 177, 178, 179, 230, 231, 78, 180,
	0, 0, 0, 0, 181, 182, 183, 184, 0, 0,
	81, 82, 0, 83, 0, 0, 0, 0, 0, 0,
	0, 0, 84, 85, 185, 186, 187, 188, 86, 189,
	190, 0, 87, 191, 192, 88, 0, 0, 193, 194,
	195, 0, 196, 0, 0, 0, 89, 90, 91, 0,
	92, 0, 93, 0, 0, 94, 95, 0, 0, 0,
	0, 0, 0, 96, 97, 98, 99, 197, 100, 198,
	199, 0, 0, 101, 0, 0, 0, 102, 103, 0,
	104, 0, 0, 0, 200, 105, 201, 0, 0, 0,
	106, 107, 202, 0, 108, 0, 109, 0, 0, 0,
	0, 110, 203, 0, 204, 0, 111, 112, 1135, 206,
	0, 0, 113, 0, 0, 114, 207, 208, 209, 0,
	210, 0, 0, 115, 0, 116, 117, 0, 0, 211,
	0, 118, 0, 0, 119, 0, 0, 120, 0, 121,
	122, 123, 124, 125, 0, 126, 127, 130, 128, 0,
	129, 0, 212, 131, 213, 132, 133, 0, 0, 0,
	0, 0, 134, 214, 0, 135, 0, 215, 136, 137,
	0, 216, 138, 217, 139, 0, 140, 141, 142, 218,
	143, 144, 0, 146, 147, 145, 148, 0, 149, 0,
	150, 151, 219, 152, 0, 153, 154, 155, 0, 220,
	156, 157, 0, 158, 159, 0, 160, 221, 222, 161,
	0, 162, 163, 165, 223, 164, 224, 0, 166, 0,
	167, 168, 0, 225, 226, 227, 0, 0, 169, 228,
	229, 0, 170, 171, 172, 173, 0, 0, 174, 175,
	176, 0, 0, 177, 178, 179, 230, 231, 78, 180,
	0, 0, 0, 0, 181, 182, 183, 184, 0, 0,
	81, 82, 0, 83, 0, 0, 0, 0, 0, 0,
	0, 0, 84, 85, 185, 186, 187, 188, 86, 189,
	190, 0, 87, 191, 192, 88, 0, 0, 193, 194,
	195, 0, 196, 0, 0, 0, 89, 90, 91, 0,
	92, 0, 93, 0, 0, 94, 95, 0, 0, 0,
	0, 0, 0, 96, 97, 98, 99, 197, 100, 198,
	199, 0, 0, 101, 0, 0, 0, 102, 103, 0,
	104, 0, 0, 0, 200, 105, 201, 0, 0, 0,
	106, 107, 202, 0, 108, 0, 109, 0, 0, 0,
	0, 110, 203, 0, 204, 0, 111, 112, 1133, 206,
	0, 0, 113, 0, 0, 114, 207, 208, 209, 0,
	210, 0, 0, 115, 0, 116, 117, 0, 0, 211,
	0, 118, 0, 0, 119, 0, 0, 120, 0, 121,
	122, 123, 124, 125, 0, 126, 127, 130, 128, 0,
	129, 0, 212, 131, 213, 132, 133, 0, 0, 0,
	0, 0, 134, 214, 0, 135, 0, 215, 136, 137,
	0, 216, 138, 217, 139, 0, 140, 141, 142, 218,
	143, 144, 0, 146, 147, 145, 148, 0, 149, 0,
	150, 151, 219, 152, 0, 153, 154, 155, 0, 220,
	156, 157, 0, 158, 159, 0, 160, 221, 222, 161,
	0, 162, 163, 165, 223, 164, 224, 0, 166, 0,
	167, 168, 0, 225, 226, 227, 0, 0, 169, 228,
	229, 0, 170, 171, 172, 173, 0, 0, 174, 175,
	176, 0, 0, 177, 178, 179, 230, 231, 78, 180,
	0, 0, 0, 0, 181, 182, 183, 184, 0, 0,
	81, 82, 0, 83, 0, 0, 0, 0, 0, 0,
	0, 0, 84, 85, 185, 186, 187, 188, 86, 189,
	190, 0, 87, 191, 192, 88, 0, 0, 193, 194,
	195, 0, 196, 0, 0, 0, 89, 90, 91, 0,
	92, 0, 93, 0, 0, 94, 95, 0, 0, 0,
	0, 0, 0, 96, 97, 98, 99, 197, 100, 198,
	199, 0, 0, 101, 0, 0, 0, 102, 103, 0,
	104, 0, 0, 0, 200, 105, 201, 0, 0, 0,
	106, 107, 202, 0, 108, 0, 109, 0, 0, 0,
	0, 110, 203, 0, 204, 0, 111, 112, 1124, 206,
	0, 0, 113, 0, 0, 114, 207, 208, 209, 0,
	210, 0, 0, 115, 0, 116, 117, 0, 0, 211,
	0, 118, 0, 0, 119, 0, 0, 120, 0, 121,
	122, 123, 124, 125, 0, 126, 127, 130, 128, 0,
	129, 0, 212, 131, 213, 132, 133, 0, 0, 0,
	0, 0, 134, 214, 0, 135, 0, 215, 136, 137,
	0, 216, 138, 217, 139, 0, 140, 141, 142, 218,
	143, 144, 0, 146, 147, 145, 148, 0, 149, 0,
	150, 151, 219, 152, 0, 153, 154, 155, 0, 220,
	156, 157, 0, 158, 159, 0, 160, 221, 222, 161,
	0, 162, 163, 165, 223, 164, 224, 0, 166, 0,
	167, 168, 0, 225, 226, 227, 0, 0, 169, 228,
	229, 0, 170, 171, 172, 173, 0, 0, 174, 175,
	176, 0, 0, 177, 178, 179, 230, 231, 78, 180,
	0, 0, 0, 0, 181, 182, 183, 184, 0, 0,
	81, 82, 0, 83, 0, 0, 0, 0, 0, 0,
	0, 0, 84, 85, 185, 186, 187, 188, 86, 189,
	190, 0, 87, 191, 192, 88, 0, 0, 193, 194,
	195, 0, 196, 0, 0, 0, 89, 90, 91, 0,
	92, 0, 93, 0, 0, 94, 95, 0, 0, 0,
	0, 0, 0, 96, 97, 98, 99, 197, 100, 198,
	199, 0, 0, 101, 0, 0, 0, 102, 103, 0,
	104, 0, 0, 0, 200, 105, 201, 0, 0, 0,
	106, 107, 202, 0, 108, 0, 109, 0, 0, 0,
	0, 110, 203, 0, 204, 0, 111, 112, 752, 206,
	0, 0, 113, 0, 0, 114, 207, 208, 209, 0,
	210, 0, 0, 115, 0, 116, 117, 0, 0, 211,
	0, 118, 0, 0, 119, 0, 0, 120, 0, 121,
	122, 123, 124, 125, 0, 126, 127, 130, 128, 0,
	129, 0, 212, 131, 213, 132, 133, 0, 0, 0,
	0, 0, 134, 214, 0, 135, 0, 215, 136, 137,
	0, 216, 138, 217, 139, 0, 140, 141, 142, 218,
	143, 144, 0, 146, 147, 145, 148, 0, 149, 0,
	150, 151, 219, 152, 0, 153, 154, 155, 0, 220,
	156, 157, 0, 158, 159, 0, 160, 221, 222, 161,
	0, 162, 163, 165, 223, 164, 224, 0, 166, 0,
	167, 168, 0, 225, 226, 227, 0, 0, 169, 228,
	229, 0, 170, 171, 172, 173, 0, 0, 174, 175,
	176, 0, 0, 177, 178, 179, 230, 231, 78, 180,
	0, 0, 0, 0, 181, 182, 183, 184, 0, 0,
	81, 82, 0, 83, 0, 0, 0, 0, 0, 0,
	0, 0, 84, 85, 185, 186, 187, 188, 86, 189,
	190, 0, 87, 191, 192, 88, 0, 0, 193, 194,
	195, 0, 196, 0, 0, 0, 89, 90, 91, 0,
	92, 0, 93, 0, 0, 94, 95, 0, 0, 0,
	0, 0, 0, 96, 97, 98, 99, 197, 100, 198,
	199, 0, 0, 101, 0, 0, 0, 102, 103, 0,
	104, 0, 0, 0, 200, 105, 201, 0, 0, 0,
	106, 107, 202, 0, 108, 0, 109, 0, 0, 0,
	0, 110, 203, 0, 204, 0, 111, 112, 205, 206,
	0, 0, 113, 0, 0, 114, 207, 208, 209, 0,
	210, 0, 0, 115, 0, 116, 117, 0, 0, 211,
	0, 118, 0, 0, 119, 0, 0, 120, 0, 121,
	122, 123, 124, 125, 0, 126, 127, 130, 128, 0,
	129, 0, 212, 131, 213, 132, 133, 0, 0, 0,
	0, 0, 134, 214, 0, 135, 0, 215, 136, 137,
	0, 216, 138, 217, 139, 0, 140, 141, 142, 218,
	143, 144, 0, 146, 147, 145, 148, 0, 149, 0,
	150, 151, 219, 152, 0, 245, 154, 155, 0, 220,
	156, 157, 0, 158, 159, 0, 160, 221, 222, 161,
	0, 162, 163, 165, 223, 164, 224, 0, 166, 0,
	167, 168, 0, 225, 226, 227, 0, 0, 169, 228,
	229, 0, 170, 171, 172, 173, 0, 0, 174, 175,
	176, 0, 0, 177, 178, 179, 230, 231, 78, 180,
	0, 0, 0, 0, 181, 182, 183, 184, 0, 0,
	81, 82, 0, 83, 0, 0, 0, 0, 0, 548,
	0, 0, 84, 85, 185, 186, 187, 188, 86, 189,
	190, 0, 87, 191, 192, 88, 0, 0, 193, 194,
	195, 0, 196, 0, 0, 0, 89, 90, 91, 0,
	92, 0, 93, 0, 0, 94, 95, 0, 0, 0,
	0, 0, 0, 96, 97, 98, 99, 197, 100, 198,
	199, 0, 0, 101, 0, 0, 0, 102, 103, 0,
	104, 0, 0, 0, 200, 105, 201, 0, 0, 0,
	106, 107, 202, 0, 108, 0, 109, 0, 0, 0,
	0, 110, 203, 0, 204, 0, 111, 112, 205, 206,
	0, 0, 113, 0, 0, 114, 207, 208, 209, 0,
	210, 0, 0, 115, 0, 116, 117, 0, 0, 211,
	0, 118, 0, 0, 119, 0, 0, 120, 0, 121,
	122, 123, 124, 125, 0, 126, 127, 130, 128, 0,
	129, 0, 212, 131, 213, 132, 133, 0, 0, 0,
	0, 0, 134, 214, 0, 135, 0, 215, 136, 137,
	0, 216, 138, 217, 139, 0, 140, 141, 142, 218,
	143, 144, 0, 146, 147, 145, 148, 0, 149, 0,
	150, 151, 219, 152, 0, 153, 154, 155, 0, 220,
	156, 157, 0, 0, 159, 0, 160, 221, 222, 161,
	0, 162, 163, 165, 223, 164, 224, 0, 166, 0,
	167, 168, 0, 225, 226, 227, 0, 0, 169, 228,
	229, 0, 170, 171, 172, 173, 0, 0, 174, 175,
	176, 0, 0, 177, 178, 179, 230, 231, 78, 180,
	0, 0, 0, 0, 181, 182, 183, 184, 0, 0,
	81, 82, 0, 83, 0, 0, 0, 0, 0, 0,
	0, 0, 84, 85, 185, 186, 187, 188, 86, 189,
	190, 0, 87, 191, 192, 88, 0, 0, 193, 194,
	195, 0, 196, 0, 0, 0, 89, 90, 91, 0,
	92, 0, 93, 0, 0, 94, 95, 0, 0, 0,
	0, 0, 0, 96, 97, 98, 99, 197, 100, 198,
	199, 0, 0, 101, 0, 0, 0, 102, 103, 0,
	104, 0, 0, 0, 200, 105, 201, 0, 0, 0,
	106, 107, 202, 0, 108, 0, 109, 0, 0, 0,
	0, 110, 203, 0, 204, 0, 111, 112, 403, 206,
	0, 0, 113, 0, 0, 114, 207, 208, 209, 0,
	210, 0, 0, 115, 0, 116, 117, 0, 0, 211,
	0, 118, 0, 0, 119, 0, 0, 120, 0, 121,
	122, 123, 124, 125, 0, 126, 127, 130, 128, 0,
	129, 0, 212, 131, 213, 132, 133, 0, 0, 0,
	0, 0, 134, 214, 0, 135, 0, 215, 136, 137,
	0, 216, 138, 217, 139, 0, 140, 141, 142, 218,
	143, 144, 0, 146, 147, 145, 148, 0, 149, 0,
	150, 151, 219, 152, 0, 153, 154, 155, 0, 220,
	156, 157, 0, 158, 159, 0, 160, 221, 222, 161,
	0, 162, 163, 165, 223, 164, 224, 0, 166, 0,
	167, 168, 0, 225, 226, 227, 0, 0, 169, 228,
	229, 0, 170, 171, 172, 173, 0, 0, 174, 175,
	176, 0, 0, 177, 178, 179, 230, 231, 78, 180,
	0, 0, 0, 0, 181, 182, 183, 184, 0, 0,
	81, 82, 0, 83, 0, 0, 0, 0, 0, 0,
	0, 0, 84, 85, 185, 186, 187, 188, 86, 189,
	190, 0, 87, 191, 192, 88, 0, 0, 193, 194,
	195, 0, 196, 0, 0, 0, 89, 90, 91, 0,
	92, 0, 93, 0, 0, 94, 95, 0, 0, 0,
	0, 0, 0, 96, 97, 98, 99, 197, 100, 198,
	199, 0, 0, 101, 0, 0, 0, 102, 103, 0,
	104, 0, 0, 0, 200, 105, 201, 0, 0, 0,
	106, 107, 202, 0, 108, 0, 109, 0, 0, 0,
	0, 110, 203, 0, 204, 0, 111, 112, 400, 206,
	0, 0, 113, 0, 0, 114, 207, 208, 209, 0,
	210, 0, 0, 115, 0, 116, 117, 0, 0, 211,
	0, 118, 0, 0, 119, 0, 0, 120, 0, 121,
	122, 123, 124, 125, 0, 126, 127, 130, 128, 0,
	129, 0, 212, 131, 213, 132, 133, 0, 0, 0,
	0, 0, 134, 214, 0, 135, 0, 215, 136, 137,
	0, 216, 138, 217, 139, 0, 140, 141, 142, 218,
	143, 144, 0, 146, 147, 145, 148, 0, 149, 0,
	150, 151, 219, 152, 0, 153, 154, 155, 0, 220,
	156, 157, 0, 158, 159, 0, 160, 221, 222, 161,
	0, 162, 163, 165, 223, 164, 224, 0, 166, 0,
	167, 168, 0, 225, 226, 227, 0, 0, 169, 228,
	229, 0, 170, 171, 172, 173, 0, 0, 174, 175,
	176, 0, 0, 177, 178, 179, 230, 231, 78, 180,
	0, 0, 0, 0, 181, 182, 183, 184, 0, 0,
	81, 82, 0, 83, 0, 0, 0, 0, 0, 0,
	0, 0, 84, 85, 185, 186, 187, 188, 86, 189,
	190, 0, 87, 191, 192, 88, 0, 0, 193, 194,
	363, 0, 196, 0, 0, 0, 89, 90, 91, 0,
	92, 0, 93, 0, 0, 94, 95, 0, 0, 0,
	0, 0, 0, 96, 97, 98, 99, 197, 100, 198,
	199, 0, 0, 101, 0, 0, 0, 102, 103, 0,
	104, 0, 0, 0, 200, 105, 201, 0, 0, 0,
	106, 107, 202, 0, 108, 0, 109, 0, 0, 0,
	0, 110, 203, 0, 204, 0, 111, 112, 205, 206,
	0, 0, 113, 0, 0, 114, 207, 208, 209, 0,
	210, 0, 0, 115, 0, 116, 117, 0, 0, 211,
	0, 118, 0, 0, 119, 0, 0, 120, 0, 121,
	122, 123, 124, 255, 0, 126, 127, 130, 128, 0,
	129, 0, 212, 131, 213, 132, 133, 0, 0, 0,
	0, 0, 134, 214, 0, 135, 0, 215, 136, 137,
	0, 216, 138, 217, 139, 0, 140, 141, 142, 218,
	143, 144, 0, 146, 147, 145, 148, 0, 149, 0,
	150, 151, 219, 152, 0, 153, 154, 155, 0, 220,
	156, 157, 0, 158, 159, 0, 160, 221, 222, 161,
	0, 162, 163, 165, 223, 164, 224, 0, 166, 0,
	167, 168, 0, 254, 226, 227, 0, 0, 250, 228,
	229, 0, 170, 171, 172, 173, 0, 0, 174, 175,
	176, 0, 0, 177, 178, 179, 230, 231, 78, 180,
	0, 0, 0, 0, 181, 182, 183, 184, 0, 0,
	81, 82, 0, 83, 0, 0, 0, 0, 0, 0,
	0, 0, 84, 85, 185, 186, 187, 188, 86, 189,
	190, 0, 87, 191, 192, 88, 0, 0, 193, 194,
	195, 0, 196, 0, 0, 0, 89, 90, 91, 0,
	92, 0, 93, 0, 0, 94, 95, 0, 0, 0,
	0, 0, 0, 96, 97, 98, 99, 197, 100, 198,
	199, 0, 0, 101, 0, 0, 0, 102, 103, 0,
	104, 0, 0, 0, 200, 105, 201, 0, 0, 0,
	106, 107, 202, 0, 108, 0, 109, 0, 0, 0,
	0, 110, 203, 0, 204, 0, 111, 112, 205, 206,
	0, 0, 113, 0, 0, 114, 207, 208, 209, 0,
	210, 0, 0, 115, 0, 116, 117, 0, 0, 211,
	0, 118, 0, 0, 119, 0, 0, 120, 0, 121,
	122, 123, 124, 255, 0, 126, 127, 130, 128, 0,
	129, 0, 212, 131, 213, 132, 133, 0, 0, 0,
	0, 0, 134, 214, 0, 135, 0, 215, 136, 137,
	0, 216, 138, 217, 139, 0, 140, 141, 142, 218,
	143, 144, 0, 146, 147, 145, 148, 0, 149, 0,
	150, 151, 219, 152, 0, 153, 154, 155, 0, 220,
	156, 157, 0, 158, 159, 0, 160, 221, 222, 161,
	0, 162, 163, 165, 223, 164, 224, 0, 166, 0,
	167, 168, 0, 254, 226, 227, 0, 0, 250, 228,
	229, 0, 170, 171, 172, 173, 0, 0, 174, 175,
	176, 0, 0, 177, 178, 179, 230, 231, 78, 180,
	0, 0, 0, 0, 181, 182, 183, 184, 0, 0,
	81, 82, 0, 83, 0, 0, 0, 0, 0, 0,
	0, 0, 84, 85, 185, 186, 187, 188, 86, 189,
	190, 0, 87, 191, 192, 88, 0, 0, 193, 194,
	195, 0, 196, 0, 0, 0, 89, 90, 91, 0,
	92, 0, 93, 0, 0, 94, 95, 0, 0, 0,
	0, 0, 0, 96, 97, 98, 99, 197, 100, 198,
	199, 0, 0, 101, 0, 0, 0, 102, 103, 0,
	104, 0, 0, 0, 200, 105, 201, 0, 0, 0,
	106, 107, 202, 0, 108, 0, 109, 0, 0, 0,
	0, 110, 203, 0, 204, 0, 111, 112, 332, 206,
	0, 0, 113, 0, 0, 114, 207, 208, 209, 0,
	210, 0, 0, 115, 0, 116, 117, 0, 0, 211,
	0, 118, 0, 0, 119, 0, 0, 120, 0, 121,
	122, 123, 124, 125, 0, 126, 127, 130, 128, 0,
	129, 0, 212, 131, 213, 132, 133, 0, 0, 0,
	0, 0, 134, 214, 0, 135, 0, 215, 136, 137,
	0, 216, 138, 217, 139, 0, 140, 141, 142, 218,
	143, 144, 0, 146, 147, 145, 148, 0, 149, 0,
	150, 151, 219, 152, 0, 153, 154, 155, 0, 220,
	156, 157, 0, 158, 159, 0, 160, 221, 222, 161,
	0, 162, 163, 165, 223, 164, 224, 0, 166, 0,
	167, 168, 0, 225, 226, 227, 0, 0, 169, 228,
	229, 0, 170, 171, 172, 173, 0, 0, 174, 175,
	176, 0, 0, 177, 178, 179, 230, 231, 78, 180,
	0, 0, 0, 0, 181, 182, 183, 184, 0, 0,
	81, 82, 0, 83, 0, 0, 0, 0, 0, 0,
	0, 0, 84, 85, 185, 186, 187, 188, 86, 189,
	190, 0, 87, 191, 192, 88, 0, 0, 193, 194,
	195, 0, 196, 0, 0, 0, 89, 90, 91, 0,
	92, 0, 93, 0, 0, 94, 95, 0, 0, 0,
	0, 0, 0, 96, 97, 98, 99, 197, 100, 198,
	199, 0, 0, 101, 0, 0, 0, 102, 103, 0,
	104, 0, 0, 0, 200, 105, 201, 0, 0, 0,
	106, 107, 202, 0, 108, 0, 109, 0, 0, 0,
	0, 110, 203, 0, 204, 0, 111, 112, 329, 206,
	0, 0, 113, 0, 0, 114, 207, 208, 209, 0,
	210, 0, 0, 115, 0, 116, 117, 0, 0, 211,
	0, 118, 0, 0, 119, 0, 0, 120, 0, 121,
	122, 123, 124, 125, 0, 126, 127, 130, 128, 0,
	129, 0, 212, 131, 213, 132, 133, 0, 0, 0,
	0, 0, 134, 214, 0, 135, 0, 215, 136, 137,
	0, 216, 138, 217, 139, 0, 140, 141, 142, 218,
	143, 144, 0, 146, 147, 145, 148, 0, 149, 0,
	150, 151, 219, 152, 0, 153, 154, 155, 0, 220,
	156, 157, 0, 158, 159, 0, 160, 221, 222, 161,
	0, 162, 163, 165, 223, 164, 224, 0, 166, 0,
	167, 168, 0, 225, 226, 227, 0, 0, 169, 228,
	229, 0, 170, 171, 172, 173, 0, 0, 174, 175,
	176, 0, 0, 177, 178, 179, 230, 231, 78, 180,
	0, 0, 0, 0, 181, 182, 183, 184, 0, 0,
	81, 82, 0, 83, 0, 0, 0, 0, 0, 0,
	0, 0, 84, 85, 185, 186, 187, 188, 86, 189,
	190, 0, 87, 191, 192, 88, 0, 0, 193, 194,
	195, 0, 196, 0, 0, 0, 89, 90, 91, 0,
	92, 0, 93, 0, 0, 94, 95, 0, 0, 0,
	0, 0, 0, 96, 97, 98, 99, 197, 100, 198,
	199, 0, 0, 101, 0, 0, 0, 102, 103, 0,
	104, 0, 0, 0, 200, 105, 201, 0, 0, 0,
	106, 107, 202, 0, 108, 0, 109, 0, 0, 0,
	0, 110, 203, 0, 204, 0, 111, 112, 327, 206,
	0, 0, 113, 0, 0, 114, 207, 208, 209, 0,
	210, 0, 0, 115, 0, 116, 117, 0, 0, 211,
	0, 118, 0, 0, 119, 0, 0, 120, 0, 121,
	122, 123, 124, 125, 0, 126, 127, 130, 128, 0,
	129, 0, 212, 131, 213, 132, 133, 0, 0, 0,
	0, 0, 134, 214, 0, 135, 0, 215, 136, 137,
	0, 216, 138, 217, 139, 0, 140, 141, 142, 218,
	143, 144, 0, 146, 147, 145, 148, 0, 149, 0,
	150, 151, 219, 152, 0, 153, 154, 155, 0, 220,
	156, 157, 0, 158, 159, 0, 160, 221, 222, 161,
	0, 162, 163, 165, 223, 164, 224, 0, 166, 0,
	167, 168, 0, 225, 226, 227, 0, 0, 169, 228,
	229, 0, 170, 171, 172, 173, 0, 0, 174, 175,
	176, 0, 0, 177, 178, 179, 230, 231, 78, 180,
	0, 0, 0, 0, 181, 182, 183, 184, 0, 0,
	81, 82, 0, 83, 0, 0, 0, 0, 0, 0,
	0, 0, 84, 85, 185, 186, 187, 188, 86, 189,
	190, 0, 87, 191, 192, 88, 0, 0, 193, 194,
	195, 0, 196, 0, 0, 0, 89, 90, 91, 0,
	92, 0, 93, 0, 0, 94, 95, 0, 0, 0,
	0, 0, 0, 96, 97, 98, 99, 197, 100, 198,
	199, 0, 0, 101, 0, 0, 0, 102, 103, 0,
	104, 0, 0, 0, 200, 105, 201, 0, 0, 0,
	106, 107, 202, 0, 108, 0, 109, 0, 0, 0,
	0, 110, 203, 0, 204, 0, 111, 112, 319, 206,
	0, 0, 113, 0, 0, 114, 207, 208, 209, 0,
	210, 0, 0, 115, 0, 116, 117, 0, 0, 211,
	0, 118, 0, 0, 119, 0, 0, 120, 0, 121,
	122, 123, 124, 125, 0, 126, 127, 130, 128, 0,
	129, 0, 212, 131, 213, 132, 133, 0, 0, 0,
	0, 0, 134, 214, 0, 135, 0, 215, 136, 137,
	0, 216, 138, 217, 139, 0, 140, 141, 142, 218,
	143, 144, 0, 146, 147, 145, 148, 0, 149, 0,
	150, 151, 219, 152, 0, 153, 154, 155, 0, 220,
	156, 157, 0, 158, 159, 0, 160, 221, 222, 161,
	0, 162, 163, 165, 223, 164, 224, 0, 166, 0,
	167, 168, 0, 225, 226, 227, 0, 0, 169, 228,
	229, 0, 170, 171, 172, 173, 0, 0, 174, 175,
	176, 0, 0, 177, 178, 179, 230, 231, 78, 180,
	0, 0, 0, 0, 181, 182, 183, 184, 0, 0,
	81, 82, 0, 83, 0, 0, 0, 0, 0, 0,
	0, 0, 84, 85, 185, 186, 187, 188, 86, 189,
	190, 0, 87, 191, 192, 88, 0, 0, 193, 194,
	195, 0, 196, 0, 0, 0, 89, 90, 91, 0,
	92, 0, 93, 0, 0, 94, 95, 0, 0, 0,
	0, 0, 0, 96, 97, 98, 99, 197, 100, 198,
	199, 0, 0, 101, 0, 0, 0, 102, 103, 0,
	104, 0, 0, 0, 200, 105, 201, 0, 0, 0,
	106, 107, 202, 0, 108, 0, 109, 0, 0, 0,
	0, 110, 203, 0, 204, 0, 111, 112, 205, 206,
	0, 0, 113, 0, 0, 114, 207, 208, 209, 0,
	210, 0, 0, 115, 0, 116, 117, 0, 0, 211,
	0, 118, 0, 0, 119, 0, 0, 120, 0, 121,
	122, 123, 124, 125, 0, 126, 127, 130, 128, 0,
	129, 0, 212, 131, 213, 132, 133, 0, 0, 0,
	0, 0, 134, 214, 0, 135, 0, 215, 136, 137,
	0, 216, 138, 217, 139, 0, 140, 141, 142, 218,
	299, 144, 0, 146, 147, 145, 148, 0, 149, 0,
	150, 151, 219, 152, 0, 153, 154, 155, 0, 220,
	156, 157, 0, 158, 159, 0, 160, 221, 222, 161,
	0, 162, 163, 165, 223, 164, 224, 0, 166, 0,
	167, 168, 0, 225, 226, 227, 0, 0, 169, 228,
	229, 0, 170, 171, 172, 173, 0, 0, 174, 175,
	176, 0, 0, 177, 178, 179, 230, 231, 78, 180,
	0, 0, 0, 0, 181, 182, 183, 184, 0, 0,
	81, 82, 0, 83, 0, 0, 0, 0, 0, 0,
	0, 0, 84, 85, 185, 186, 187, 188, 86, 189,
	190, 0, 87, 191, 192, 88, 0, 0, 193, 194,
	195, 0, 196, 0, 0, 0, 89, 90, 91, 0,
	92, 0, 93, 0, 0, 94, 95, 0, 0, 0,
	0, 0, 0, 96, 97, 98, 99, 197, 100, 198,
	199, 0, 0, 101, 0, 0, 0, 102, 103, 0,
	104, 0, 0, 0, 200, 105, 201, 0, 0, 0,
	106, 107, 202, 0, 108, 0, 109, 0, 0, 0,
	0, 110, 203, 0, 204, 0, 111, 112, 205, 206,
	0, 0, 113, 0, 0, 114, 207, 208, 209, 0,
	210, 0, 0, 115, 0, 116, 117, 0, 0, 211,
	0, 118, 0, 0, 248, 0, 0, 120, 0, 121,
	122, 123, 124, 255, 0, 126, 127, 130, 128, 0,
	129, 0, 212, 131, 213, 132, 133, 0, 0, 0,
	0, 0, 134, 214, 0, 135, 0, 215, 136, 137,
	0, 216, 138, 217, 139, 0, 140, 141, 142, 218,
	143, 144, 0, 146, 147, 145, 148, 0, 149, 0,
	150, 151, 219, 152, 0, 153, 154, 155, 0, 220,
	156, 249, 0, 158, 159, 0, 160, 221, 222, 161,
	0, 162, 163, 165, 223, 164, 224, 0, 166, 0,
	167, 168, 0, 254, 226, 227, 0, 0, 250, 228,
	229, 0, 170, 171, 172, 173, 0, 0, 174, 175,
	176, 0, 0, 177, 178, 179, 230, 231, 78, 180,
	0, 0, 0, 0, 181, 182, 183, 184, 0, 0,
	81, 82, 0, 83, 0, 0, 0, 0, 0, 0,
	0, 0, 84, 85, 185, 186, 187, 188, 86, 189,
	190, 0, 87, 191, 192, 88, 0, 0, 193, 194,
	195, 0, 196, 0, 0, 0, 89, 90, 91, 0,
	92, 0, 93, 0, 0, 94, 95, 0, 0, 0,
	0, 0, 0, 96, 97, 98, 99, 197, 100, 198,
	199, 0, 0, 101, 0, 0, 0, 102, 103, 0,
	104, 0, 0, 0, 200, 105, 201, 0, 0, 0,
	106, 107, 202, 0, 108, 0, 109, 0, 0, 0,
	0, 110, 203, 0, 204, 0, 111, 112, 205, 206,
	0, 0, 113, 0, 0, 114, 207, 208, 209, 0,
	210, 0, 0, 115, 0, 116, 117, 0, 0, 211,
	0, 118, 0, 0, 119, 0, 0, 120, 0, 121,
	122, 123, 124, 125, 0, 126, 127, 130, 128, 0,
	129, 0, 212, 131, 213, 132, 133, 0, 0, 0,
	0, 0, 134, 214, 0, 135, 0, 215, 136, 0,
	0, 216, 138, 217, 139, 0, 140, 0, 142, 218,
	143, 144, 0, 146, 147, 145, 148, 0, 149, 0,
	150, 151, 219, 0, 0, 153, 154, 155, 0, 220,
	156, 157, 0, 158, 159, 0, 160, 221, 222, 161,
	0, 162, 163, 165, 223, 164, 224, 0, 166, 0,
	167, 168, 0, 225, 226, 227, 0, 0, 169, 228,
	229, 0, 170, 171, 172, 173, 0, 0, 174, 175,
	176, 0, 0, 177, 178, 179, 230, 231, 778, 180,
	797, 798, 799, 0, 181, 182, 183, 184, 0, 0,
	800, 0, 0, 0, 0, 0, 780, 0, 806, 0,
	0, 778, 0, 797, 798, 799, 0, 0, 0, 0,
	0, 0, 0, 800, 0, 0, 0, 779, 0, 780,
	0, 806, 0, 794, 778, 0, 797, 798, 799, 0,
	0, 0, 0, 0, 0, 0, 800, 0, 0, 0,
	779, 0, 780, 0, 806, 0, 794, 0, 778, 0,
	797, 798, 799, 0, 0, 0, 0, 0, 0, 0,
	800, 0, 0, 779, 0, 0, 780, 785, 806, 794,
	0, 778, 0, 797, 798, 799, 0, 0, 0, 0,
	0, 0, 0, 800, 807, 0, 0, 779, 0, 780,
	785, 806, 0, 794, 0, 0, 805, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 802, 807, 0, 0,
	779, 0, 795, 785, 0, 0, 794, 0, 0, 805,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 802,
	807, 0, 0, 0, 801, 795, 0, 785, 0, 0,
	0, 0, 805, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 802, 0, 807, 0, 0, 801, 795, 0,
	785, 0, 0, 0, 0, 0, 805, 0, 796, 0,
	0, 0, 0, 0, 0, 0, 802, 807, 0, 804,
	801, 0, 795, 0, 0, 0, 0, 0, 0, 805,
	0, 796, 0, 0, 0, 0, 0, 0, 0, 802,
	0, 0, 804, 0, 801, 795, 0, 0, 0, 0,
	0, 0, 0, 0, 796, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 804, 0, 801, 0, 0,
	0, 0, 803, 0, 0, 791, 792, 793, 796, 790,
	787, 788, 789, 781, 782, 783, 784, 786, 0, 804,
	0, 0, 0, 1667, 0, 803, 0, 0, 791, 792,
	793, 796, 790, 787, 788, 789, 781, 782, 783, 784,
	786, 0, 804, 0, 0, 0, 1646, 0, 803, 0,
	0, 791, 792, 793, 0, 790, 787, 788, 789, 781,
	782, 783, 784, 786, 0, 0, 0, 0, 0, 1641,
	0, 0, 803, 0, 0, 791, 792, 793, 0, 790,
	787, 788, 789, 781, 782, 783, 784, 786, 0, 0,
	0, 0, 0, 1637, 0, 803, 0, 0, 791, 792,
	793, 0, 790, 787, 788, 789, 781, 782, 783, 784,
	786, 778, 0, 797, 798, 799, 1576, 0, 0, 0,
	0, 0, 0, 800, 0, 0, 0, 0, 0, 780,
	0, 806, 0, 0, 778, 0, 797, 798, 799, 0,
	0, 0, 0, 0, 0, 0, 800, 0, 0, 0,
	779, 0, 780, 0, 806, 0, 794, 778, 0, 797,
	798, 799, 0, 0, 0, 0, 0, 0, 0, 800,
	0, 0, 0, 779, 0, 780, 0, 806, 0, 794,
	0, 778, 0, 797, 798, 799, 0, 0, 0, 0,
	0, 0, 0, 800, 0, 0, 779, 0, 0, 780,
	785, 806, 794, 0, 778, 0, 797, 798, 799, 0,
	0, 0, 0, 0, 0, 0, 800, 807, 0, 0,
	779, 0, 780, 785, 806, 0, 794, 0, 0, 805,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 802,
	807, 0, 0, 779, 0, 795, 785, 0, 0, 794,
	0, 0, 805, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 802, 807, 0, 0, 0, 801, 795, 0,
	785, 0, 0, 0, 0, 805, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 802, 0, 807, 0, 0,
	801, 795, 0, 785, 0, 0, 0, 0, 0, 805,
	0, 796, 0, 0, 0, 0, 0, 0, 0, 802,
	807, 0, 804, 801, 0, 795, 0, 0, 0, 0,
	0, 0, 805, 0, 796, 0, 0, 0, 0, 0,
	0, 0, 802, 0, 0, 804, 0, 801, 795, 0,
	0, 0, 0, 0, 0, 0, 0, 796, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 804, 0,
	801, 0, 0, 0, 0, 803, 0, 0, 791, 792,
	793, 796, 790, 787, 788, 789, 781, 782, 783, 784,
	786, 0, 804, 0, 0, 0, 1575, 0, 803, 0,
	0, 791, 792, 793, 796, 790, 787, 788, 789, 781,
	782, 783, 784, 786, 0, 804, 0, 0, 0, 1484,
	0, 803, 0, 0, 791, 792, 793, 0, 790, 787,
	788, 789, 781, 782, 783, 784, 786, 0, 0, 0,
	0, 0, 1421, 0, 0, 803, 0, 0, 791, 792,
	793, 0, 790, 787, 788, 789, 781, 782, 783, 784,
	786, 0, 0, 0, 0, 0, 1404, 0, 803, 0,
	0, 791, 792, 793, 0, 790, 787, 788, 789, 781,
	782, 783, 784, 786, 778, 0, 797, 798, 799, 1044,
	0, 0, 0, 0, 0, 0, 800, 0, 0, 0,
	0, 0, 780, 0, 806, 0, 0, 778, 0, 797,
	798, 799, 0, 0, 0, 0, 0, 0, 0, 800,
	0, 0, 0, 779, 0, 780, 0, 806, 0, 794,
	778, 0, 797, 798, 799, 0, 0, 0, 0, 0,
	0, 0, 800, 0, 0, 0, 779, 0, 780, 0,
	806, 0, 794, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 779,
	0, 0, 0, 785, 0, 794, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	807, 0, 0, 0, 0, 0, 785, 1751, 0, 0,
	0, 0, 805, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 802, 807, 0, 0, 0, 0, 795, 785,
	0, 1294, 0, 0, 1293, 805, 778, 0, 797, 798,
	799, 0, 0, 0, 0, 802, 807, 0, 800, 0,
	801, 795, 984, 0, 780, 0, 806, 0, 805, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 802, 0,
	0, 0, 0, 801, 795, 779, 0, 0, 0, 0,
	0, 794, 0, 0, 796, 1750, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 804, 801, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 985, 796, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 804, 0,
	0, 0, 0, 0, 0, 785, 0, 0, 0, 0,
	796, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 804, 807, 0, 0, 0, 0, 0, 803, 0,
	0, 791, 792, 793, 805, 790, 787, 788, 789, 781,
	782, 783, 784, 786, 802, 0, 0, 1468, 0, 0,
	795, 803, 0, 0, 791, 792, 793, 0, 790, 787,
	788, 789, 781, 782, 783, 784, 786, 0, 0, 0,
	0, 0, 801, 0, 803, 0, 0, 791, 792, 793,
	0, 790, 787, 788, 789, 781, 782, 783, 784, 786,
	0, 0, 809, 0, 0, 0, 0, 0, 778, 0,
	797, 798, 799, 0, 0, 0, 796, 0, 0, 0,
	800, 0, 0, 808, 0, 0, 780, 804, 806, 0,
	0, 778, 0, 797, 798, 799, 0, 0, 0, 0,
	0, 0, 0, 800, 0, 0, 0, 779, 0, 780,
	0, 806, 0, 794, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	779, 0, 0, 0, 0, 0, 794, 0, 0, 0,
	803, 0, 0, 791, 792, 793, 0, 790, 787, 788,
	789, 781, 782, 783, 784, 786, 0, 785, 0, 0,
	0, 778, 0, 797, 798, 799, 0, 0, 0, 0,
	0, 0, 0, 800, 807, 0, 0, 0, 0, 780,
	785, 806, 0, 0, 0, 0, 805, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 802, 807, 0, 0,
	779, 0, 795, 0, 0, 0, 794, 0, 0, 805,
	778, 0, 797, 798, 799, 0, 0, 0, 0, 802,
	0, 0, 800, 0, 801, 795, 0, 0, 780, 0,
	806, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 801, 294, 779,
	785, 0, 0, 0, 0, 794, 0, 0, 796, 0,
	0, 0, 0, 0, 0, 0, 0, 807, 0, 804,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 805,
	0, 796, 0, 0, 0, 0, 0, 0, 0, 802,
	0, 0, 804, 0, 0, 795, 0, 0, 0, 785,
	0, 0, 0, 0, 1300, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 807, 801, 0, 0,
	0, 0, 803, 0, 0, 791, 792, 793, 805, 790,
	787, 788, 789, 781, 782, 783, 784, 786, 802, 0,
	0, 0, 0, 0, 795, 803, 0, 0, 791, 792,
	793, 796, 790, 787, 788, 789, 781, 782, 783, 784,
	786, 0, 804, 0, 0, 0, 801, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1415,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 778, 0, 797, 798, 799, 0, 0, 0,
	796, 0, 0, 0, 800, 0, 0, 1295, 0, 0,
	780, 804, 806, 0, 0, 803, 0, 0, 791, 792,
	793, 0, 790, 787, 788, 789, 781, 782, 783, 784,
	786, 779, 0, 0, 0, 0, 0, 794, 0, 0,
	0, 778, 0, 797, 798, 799, 0, 0, 0, 0,
	0, 0, 0, 800, 0, 0, 0, 0, 0, 780,
	0, 806, 0, 0, 803, 0, 0, 791, 792, 793,
	0, 790, 787, 788, 789, 781, 782, 783, 784, 786,
	779, 785, 0, 0, 0, 0, 794, 0, 778, 0,
	797, 798, 799, 0, 0, 0, 0, 0, 807, 0,
	800, 0, 0, 1256, 0, 0, 780, 0, 806, 0,
	805, 778, 0, 797, 798, 799, 0, 0, 0, 0,
	802, 0, 0, 800, 0, 0, 795, 779, 0, 780,
	785, 806, 0, 794, 778, 0, 797, 798, 799, 0,
	0, 0, 0, 0, 0, 0, 800, 807, 801, 0,
	779, 0, 780, 0, 806, 0, 794, 0, 0, 805,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 802,
	0, 0, 0, 779, 0, 795, 0, 785, 0, 794,
	0, 0, 796, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 804, 807, 0, 0, 801, 0, 0,
	785, 0, 0, 0, 0, 0, 805, 1261, 0, 0,
	0, 0, 0, 0, 0, 0, 802, 807, 0, 0,
	0, 0, 795, 785, 0, 0, 0, 0, 0, 805,
	0, 796, 0, 0, 0, 0, 0, 0, 0, 802,
	807, 0, 804, 0, 801, 795, 803, 0, 0, 791,
	792, 793, 805, 790, 787, 788, 789, 781, 782, 783,
	784, 786, 802, 0, 0, 0, 0, 801, 795, 0,
	0, 1263, 0, 1280, 1281, 1282, 0, 0, 796, 0,
	0, 0, 0, 1546, 0, 0, 0, 0, 0, 804,
	0, 0, 0, 0, 0, 803, 0, 0, 791, 792,
	793, 796, 790, 787, 788, 789, 781, 782, 783, 784,
	786, 0, 804, 0, 0, 0, 1277, 0, 0, 778,
	0, 797, 798, 799, 796, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 804, 0, 780, 0, 806,
	0, 0, 803, 0, 0, 791, 792, 793, 0, 790,
	787, 788, 789, 781, 782, 783, 784, 786, 779, 1263,
	1268, 1280, 1281, 1282, 794, 803, 0, 0, 791, 792,
	793, 1399, 790, 787, 788, 789, 781, 782, 783, 784,
	786, 0, 1263, 0, 1280, 1281, 1282, 0, 803, 1283,
	0, 791, 792, 793, 1398, 790, 787, 788, 789, 781,
	782, 783, 784, 786, 1277, 1278, 0, 1263, 785, 1280,
	1281, 1282, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 807, 0, 1277, 0, 1263,
	0, 1280, 1281, 1282, 0, 0, 0, 805, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 802, 1268, 0,
	0, 0, 1277, 795, 0, 0, 0, 0, 0, 0,
	0, 1279, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1268, 0, 0, 1277, 0, 0, 1283, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1278, 0, 0, 1268, 0, 0, 0,
	1283, 0, 0, 0, 0, 0, 0, 0, 0, 796,
	0, 0, 0, 1284, 0, 0, 1278, 0, 1268, 0,
	804, 0, 0, 0, 0, 1283, 0, 0, 1274, 1275,
	1276, 0, 1273, 1270, 1271, 1272, 1264, 1265, 1266, 1267,
	1269, 1278, 0, 0, 0, 0, 0, 1283, 0, 1279,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1278, 0, 0, 0, 0, 0, 0,
	0, 0, 1279, 803, 0, 0, 791, 792, 793, 0,
	790, 787, 788, 789, 781, 782, 783, 784, 786, 0,
	582, 577, 599, 571, 590, 589, 0, 1279, 573, 572,
	0, 0, 0, 601, 600, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1274, 1275, 1276, 1279,
	1273, 1270, 1271, 1272, 1264, 1265, 1266, 1267, 1269, 0,
	0, 0, 595, 0, 587, 586, 0, 0, 0, 1274,
	1275, 1276, 585, 1273, 1270, 1271, 1272, 1264, 1265, 1266,
	1267, 1269, 0, 0, 0, 0, 0, 584, 0, 0,
	0, 0, 0, 0, 1274, 1275, 1276, 0, 1273, 1270,
	1271, 1272, 1264, 1265, 1266, 1267, 1269, 0, 0, 0,
	0, 578, 579, 580, 0, 598, 1274, 1275, 1276, 0,
	1273, 1270, 1271, 1272, 1264, 1265, 1266, 1267, 1269, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 588,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 583, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 575, 0, 0, 0, 0, 0,
	0, 0, 581, 576, 0, 0, 0, 0, 0, 603,
	0, 0, 0, 0, 0, 0, 574, 0, 0, 596,
	597, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 602,
}
var sqlPact = [...]int{

	2763, -1000, 30, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 890, -1000, -1000, -1000, 732, 780, 170, 14394,
	914, 914, 15644, -1000, -1000, 18394, 2485, 486, 496, 486,
	486, 482, 15644, 598, 759, 93, -1000, 788, 51, 18144,
	14394, 1283, 27, 13644, 309, 2763, 14144, 14394, 17894, 1128,
	1031, 1023, 13644, 17644, 17394, 17144, -1000, 9290, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 597, 311, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 882, -1000, 24, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 873, -1000, 14394, -1000, -1000, 16894, 16644,
	851, -1000, -1000, 528, 385, 1316, -1000, 41, -1000, -1000,
	1123, -1000, 870, 1120, 1118, 1114, 1106, 383, 895, -1000,
	596, 851, -1000, 851, -1000, -1000, -1000, 575, 15644, -1000,
	13644, -1000, 16394, 1046, 16144, -1000, 788, -1000, -1000, -1000,
	893, 1282, 1282, 1282, 1295, 149, 146, 93, 13, 14394,
	-1000, 310, 13, 6418, 6418, -1000, -1000, 309, -1000, 326,
	11884, 46, -1000, 6942, -1000, 801, 1200, 728, 717, 1197,
	-66, 13644, 14394, 14394, 631, 15894, -1000, 1196, 133, 1192,
	-1000, 115, 1189, -1000, 1, -1000, -1000, -1000, -1000, -1000,
	-1000, 309, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 13894, 1334, 20839, 12144, 908,
	12144, -1000, -1000, 1332, -1000, -1000, 21, 20, 994, 970,
	9813, 9552, 1243, 809, -1000, -1000, -1000, 34, 4058, 14394,
	1138, 12144, 14394, 14394, 14394, -1000, 14394, -1000, 990, -1000,
	14394, -1000, 18, 17, -1000, 15644, -1000, 139, -1000, 306,
	964, 15394, 1206, 961, -1000, 893, -1000, 892, 986, 7464,
	8247, 93, -1000, -1000, 93, 93, 8247, -1000, -1000, 14394,
	13, 1329, 14394, 117, -1000, 19938, -1000, -1000, 8247, 8247,
	8247, 8247, 8247, 774, -1000, -1000, -1000, 4844, -1000, -1000,
	46, 304, 316, -1000, -1000, 302, 46, -1000, -1000, -1000,
	-1000, 301, 1434, 427, -1000, -1000, -1000, 8247, 391, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1137, 300,
	298, -1000, -1000, -1000, -1000, 297, 296, 289, 286, 284,
	277, 275, 270, 253, 251, 247, 246, 244, 751, -1000,
	407, -1000, -1000, 407, 407, -1000, 231, 231, 232, -1000,
	-1000, -1000, 231, -1000, -1000, -1000, 372, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 240, 117, -1000, -1000, -1000, 14394,
	46, -1000, -1000, -1000, 8247, 3796, -11, -1000, 20381, -1000,
	-10, 736, -1000, 13144, 1272, 1255, 1265, 13644, 574, 564,
	14394, 14394, 401, 89, 1327, 89, 11364, -1000, 14394, 14394,
	-1000, 14394, -1000, -1000, 14394, -1000, 14394, 14394, 142, 12644,
	672, 1181, 51, -13, -1000, 1322, -1000, -1000, -1000, -1000,
	81, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 232, 751, 231, 231, 231, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 372, -1000, -1000, 407,
	407, 407, -1000, -1000, 563, 0, 12394, 14394, -1000, 33,
	-1000, -1000, 1104, 458, 742, 1026, 835, -1000, -1000, -1000,
	-1000, 11, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1403, -1000, -1000, -1000, -1000, 1416, 11, -1000,
	-1000, -1000, -1000, -1000, 1425, -1000, -1000, -1000, 4058, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 14394, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 742, 1026, -1000, -1000, 13644, 12894,
	1179, 867, 959, -1000, -1000, 357, 1176, -1000, -1000, -1000,
	-1000, 20381, -1000, 20381, 665, 1032, -1000, 1032, 4, -1000,
	19756, -1000, 229, -15, -1000, 401, 6418, 11104, 20839, 14394,
	590, 8247, 8247, 8247, 8247, 8247, 8247, 8247, 8247, 8247,
	8247, 8247, 8247, 8247, 8247, 8247, 8247, 8247, 8247, 8247,
	8247, 8247, 8247, 983, 562, 1030, 800, 213, 4058, -1000,
	1362, 1362, 1362, 20589, 20589, 235, 9, 19344, 2, 46,
	-1000, -1000, 6157, 5894, 46, 4318, -1000, 724, 1415, 405,
	20381, 1144, 1058, 226, 143, 140, 8247, 639, 8247, 8508,
	8247, 8247, 5107, 8247, 8247, 8247, 8247, 8247, 8247, -1000,
	225, -1000, -1000, -1000, -1000, 1414, -1000, -1000, 1413, -1000,
	586, 583, 1410, 401, 134, -1000, 2306, -1000, -1000, 6942,
	-1000, 672, 14394, 14394, 14394, -1000, -1000, 953, 15144, -1000,
	20839, 14394, -1000, 223, 222, 1007, 1004, 14394, 14394, 14894,
	14644, 14394, 716, 14394, 14394, 714, -1000, 691, 8247, 723,
	-1000, 10584, 414, 14394, 707, 88, -1000, -1000, -1000, 344,
	14394, -1000, -1000, -1000, 133, -1000, 115, -1000, -1000, 13644,
	-1000, -1000, -1000, -1000, -1000, -1000, 20839, 320, 318, -1000,
	1405, 557, -1000, 547, 523, 522, -1000, 217, 14394, 12394,
	0, -1, -1000, -1000, 14394, 1026, -1000, -1000, -1000, 655,
	-1000, 737, -1000, 10074, -1000, -1000, -1000, 724, -1000, -20,
	-1000, -1000, -1000, -1000, 125, -6, -1000, -1000, -1000, -1000,
	-1000, 14394, 249, 14394, 14394, 14394, 1175, 1424, 14394, -1000,
	-1000, -1000, 8247, -1000, -1000, -1000, 51, 14394, -1000, 1057,
	-1000, -8, 1759, -67, 13394, -1000, 10324, -1000, -1000, 382,
	582, 582, 1325, 1325, 1325, 1325, 1922, 1922, 2111, 1856,
	1897, 1897, 1897, 816, 782, 782, 1897, 1897, 1897, 20589,
	20404, 214, 8247, 521, 798, 213, 8247, -1000, 1310, -1000,
	-1000, -1000, 1103, 211, 8508, 8508, -1000, -1000, -1000, 4844,
	-1000, -1000, 210, 8247, -1000, 8247, -17, -90, -1000, 20381,
	-1000, -21, -1000, -1000, 8, 8247, 8247, 8247, 124, -1000,
	123, 578, -1000, 8247, 811, 197, 191, 8247, -1000, -1000,
	20358, 119, 1097, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	112, 20311, 108, 20677, -1000, 8508, 8508, 8508, 4844, 190,
	107, 19660, -89, 20262, 7203, 7203, 7203, 105, 20080, 8247,
	-89, 3032, 2866, 2673, -23, -28, -32, 1400, -40, 104,
	376, 375, 103, 1057, -1000, -1000, 8247, -1000, -1000, -1000,
	519, 506, 1168, -1000, 947, -1000, 685, 8247, 14394, 189,
	186, 744, -1000, 1166, 884, 1160, 884, -1000, -10, 733,
	-1000, -1000, 504, -1000, 6418, 20381, -1000, 706, 1268, -41,
	-1000, -1000, -1000, 6418, 401, 11364, 6942, -47, -1000, -1000,
	672, -1000, 465, 1395, 101, 963, 825, 709, 638, 1368,
	-20, -1000, -20, -1000, -1000, -1000, -1000, -1000, -1000, 14394,
	-1000, 12894, 185, 14394, 184, 183, 182, 14394, -1000, 1206,
	-1000, 96, -1000, 1054, 1292, 11104, 1021, 1018, 11104, 1000,
	813, 813, 813, -1000, 13394, 3521, -1000, -1000, 14394, 179,
	10844, 90, 1759, 8247, 214, 8247, 8508, 8508, -1000, 214,
	-1000, -1000, -1000, -1000, 1077, 178, 8247, 20839, 20652, 20629,
	-48, 5631, -30, 19321, 8247, -1000, -1000, 316, -1000, 84,
	6681, -1000, 19961, 10, 10, -1000, 1423, 1204, -1000, 8247,
	20031, -1000, 11624, 403, 822, 19297, 20839, -1000, 8247, -1000,
	1067, 8247, -1000, 20839, 8508, 8508, 8508, 8508, 8508, 8508,
	8508, 8508, 8508, 8508, 8508, 8508, 8508, 8508, 8508, 8508,
	8508, 8508, 8508, 971, 8508, 1355, 1355, 1355, -36, 5368,
	-1000, 1136, 1067, 8247, 8247, 20839, 83, 79, 78, -1000,
	8247, -89, 8247, 8247, 8247, -1000, -1000, -1000, 75, -1000,
	1366, -1000, -1000, -1000, -1000, 1054, 19614, 14394, 14394, 14394,
	1152, 1126, -1000, 19274, -49, 14394, 14394, -1000, 1024, 1091,
	443, 14394, -1000, 14394, -1000, 14394, 14394, 14394, 14394, -37,
	6418, 198, 51, 14394, -37, 691, -1000, -1000, 342, -1000,
	313, 215, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	72, -1000, -1000, 9030, 176, 14394, 12894, 9030, 858, -1000,
	-1000, 377, 8247, 8247, 1759, 11104, 11104, 1251, 1015, 11104,
	-1000, -1000, -1000, -1000, 363, -1000, 1044, 175, 14394, 13394,
	1321, 214, 20541, 428, 8247, 20839, 3179, -53, 8247, 8247,
	-1000, -54, -1000, 8247, -1000, 20381, -1000, 1421, 8247, 68,
	66, 65, -1000, -1000, 20381, 8247, -1000, -1000, 18644, 8247,
	62, -1000, 55, 20381, 1136, 20381, -1000, 630, 630, 1355,
	1355, 1355, 1355, 1216, 1216, 447, 498, 1550, 1550, 1550,
	468, 526, 526, 1550, 1550, 1550, 1066, 993, 174, 20699,
	8247, -68, -1000, -1000, -1000, 20381, 20381, 54, -1000, -1000,
	-1000, -89, 2396, 19251, 18981, -1000, 53, 377, -1000, -1000,
	-1000, -1000, 14394, -1000, 14394, -1000, 14394, 916, -1000, -1000,
	1002, 172, 8508, 14394, -1000, 787, -69, -70, 907, -1000,
	906, 8247, -1000, 20839, 884, 884, -1000, 502, 499, -1000,
	-37, 1212, 14394, 1252, -1000, -1000, -1000, 171, -1000, -1000,
	-1000, -74, -1000, 194, 1259, 8247, -1000, -1000, 165, 9030,
	-75, -1000, -1000, 52, -80, 14394, -1000, 14394, 20381, -89,
	-1000, 1251, -1000, 162, 8247, 11104, -1000, -1000, 901, -131,
	-1000, 337, -1000, 14394, -81, -1000, 8247, 8247, 3179, -88,
	-1000, 214, 214, -1000, 18958, -1000, 19961, -1000, -1000, -1000,
	20381, 756, -1000, 18934, -1000, -1000, -1000, 8508, 1065, 160,
	20839, 18911, -1000, -1000, 8247, -1000, -1000, -1000, -1000, -1000,
	1115, -1000, -1000, -1000, 8247, 20699, 159, -1000, 155, -1000,
	-1000, -1000, 731, -1000, -1000, 20381, 1276, -1000, -1000, 14394,
	14394, 537, -97, 14394, -1000, -1000, 4581, 787, 9030, 1271,
	46, 14394, 1271, 18888, 4318, -102, -1000, 14394, -1000, 787,
	153, -58, -1000, 1323, -1000, 14394, 20381, -1000, 600, 1044,
	-1000, 4058, -103, -1000, 214, 214, -1000, -1000, 49, 822,
	1290, -1000, 490, 8508, 20839, -104, -1000, 3225, -1000, 3058,
	977, 14394, 14394, 14394, 424, 14394, -1000, -1000, 620, -1000,
	401, -1000, -1000, -1000, -1000, -1000, -1000, 1259, 8, 787,
	-1000, -1000, 9030, 14394, 152, -112, 579, -1000, -1000, -1000,
	-1000, 669, 8247, 490, -116, -1000, -1000, -1000, 842, 922,
	48, -117, 94, -1000, 8247, -1000, 11364, -1000, 1271, 45,
	-1000, -118, -1000, -1000, -1000, 1419, 44, 7986, 7986, -89,
	-1000, -1000, 854, 853, 594, -1000, -1000, -1000, -1000, -1000,
	977, 14394, 20381, -93, -1000, -1000, 787, -1000, -1000, -1000,
	-1000, 8769, 837, 678, 19637, -1000, -1000, 1223, -1000, 433,
	955, 955, 842, -123, -1000, -1000, 1328, -1000, -1000, -1000,
	-1000, -1000, -1000, 1345, -1000, -1000, 1020, -1000, -1000, -1000,
	7725, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1644, 1638, 1343, 129, 124, 1635, 1627, 1622, 96,
	116, 115, 118, 1620, 81, 1619, 94, 1614, 1613, 1608,
	55, 1607, 1603, 1602, 1599, 1598, 93, 39, 163, 1969,
	150, 1597, 1596, 1595, 26, 98, 70, 1594, 86, 69,
	101, 104, 893, 71, 1593, 1592, 136, 28, 12, 89,
	99, 141, 128, 112, 1591, 1590, 1589, 41, 1588, 1587,
	1584, 1583, 49, 17, 1580, 18, 1579, 15, 1576, 1575,
	106, 1572, 100, 114, 19, 127, 9, 1571, 44, 11,
	74, 1569, 32, 1568, 34, 76, 133, 1567, 48, 159,
	61, 31, 47, 1566, 1564, 1561, 1558, 117, 82, 67,
	1557, 1556, 80, 1553, 134, 132, 1552, 1551, 119, 1550,
	1545, 1543, 684, 1541, 1539, 604, 8, 35, 62, 5,
	108, 105, 23, 1537, 21, 1535, 1504, 712, 574, 1533,
	56, 53, 77, 46, 60, 40, 1532, 1531, 102, 1530,
	1529, 1525, 1524, 1522, 75, 1520, 72, 137, 42, 52,
	87, 24, 22, 29, 78, 149, 142, 103, 1519, 1517,
	111, 1515, 83, 1514, 1513, 791, 121, 1512, 1511, 1510,
	783, 514, 321, 190, 1509, 1507, 259, 225, 1505, 1502,
	126, 1498, 1497, 140, 1488, 138, 37, 1485, 110, 1483,
	90, 1481, 0, 45, 27, 1480, 130, 73, 1479, 1476,
	1474, 1472, 25, 2, 10, 3, 6, 4, 20, 14,
	1470, 1468, 131, 91, 1464, 151, 1463, 1462, 38, 1461,
	1460, 16, 1459, 13, 1458, 7, 1, 1457, 135, 1456,
	109, 1455, 1368, 1452, 139, 1449, 1444, 1397, 79,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 4, 4, 36, 36, 35, 35, 35,
	35, 35, 35, 35, 35, 35, 35, 35, 35, 35,
	35, 35, 33, 33, 38, 38, 38, 37, 37, 32,
	32, 5, 5, 5, 9, 10, 10, 10, 10, 10,
	10, 75, 75, 74, 74, 77, 77, 11, 11, 12,
	12, 12, 12, 12, 12, 12, 12, 161, 161, 160,
	13, 136, 136, 14, 14, 14, 14, 15, 19, 228,
	228, 228, 232, 232, 233, 233, 234, 234, 234, 234,
	234, 234, 234, 230, 230, 22, 22, 22, 22, 112,
	112, 114, 114, 114, 114, 41, 111, 111, 111, 111,
	113, 113, 113, 113, 185, 183, 183, 190, 190, 190,
	54, 54, 54, 54, 54, 55, 55, 55, 182, 182,
	182, 182, 191, 191, 191, 191, 191, 191, 56, 56,
	56, 189, 189, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 184, 184, 229,
	229, 231, 231, 8, 8, 57, 57, 58, 58, 118,
	118, 118, 118, 117, 200, 200, 201, 201, 201, 202,
	202, 202, 202, 202, 202, 202, 198, 198, 199, 196,
	196, 197, 197, 197, 197, 235, 235, 116, 116, 61,
	61, 205, 205, 205, 205, 203, 203, 203, 203, 203,
	206, 204, 207, 207, 207, 207, 207, 147, 147, 147,
	25, 7, 7, 101, 101, 65, 65, 151, 151, 151,
	66, 66, 152, 48, 48, 34, 34, 34, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 102, 102, 103,
	103, 17, 21, 24, 24, 24, 24, 24, 237, 237,
	45, 45, 45, 45, 46, 46, 115, 115, 115, 115,
	115, 40, 6, 6, 39, 39, 16, 16, 16, 16,
	16, 51, 51, 108, 108, 108, 110, 110, 109, 109,
	109, 88, 88, 26, 79, 79, 80, 80, 158, 81,
	81, 20, 20, 29, 29, 27, 27, 27, 27, 27,
	27, 28, 28, 30, 30, 30, 30, 30, 30, 30,
	213, 213, 213, 215, 215, 212, 214, 214, 236, 236,
	89, 89, 89, 60, 59, 59, 63, 63, 62, 64,
	64, 150, 86, 86, 86, 86, 104, 105, 105, 106,
	106, 107, 107, 85, 85, 133, 133, 31, 31, 70,
	70, 71, 71, 124, 124, 125, 125, 123, 123, 123,
	153, 153, 153, 153, 154, 154, 154, 154, 154, 154,
	148, 148, 148, 148, 149, 149, 159, 159, 92, 92,
	92, 92, 90, 90, 91, 91, 155, 155, 155, 155,
	87, 87, 156, 156, 156, 119, 119, 162, 162, 162,
	69, 69, 69, 163, 163, 163, 163, 163, 163, 163,
	163, 163, 163, 163, 163, 163, 164, 164, 164, 164,
	166, 166, 166, 165, 165, 165, 165, 165, 165, 165,
	165, 165, 165, 165, 165, 165, 167, 167, 174, 174,
	175, 175, 176, 177, 168, 168, 169, 169, 170, 171,
	178, 178, 178, 178, 180, 180, 172, 172, 172, 172,
	172, 173, 98, 98, 98, 98, 98, 98, 98, 98,
	98, 98, 98, 98, 98, 98, 99, 99, 126, 126,
	126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
	126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
	126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
	126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
	126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
	126, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 208, 208, 208, 208, 208, 208, 208, 210, 210,
	211, 211, 209, 209, 209, 209, 209, 209, 209, 209,
	209, 209, 209, 209, 209, 209, 209, 209, 209, 209,
	209, 209, 209, 209, 209, 209, 209, 216, 216, 217,
	217, 218, 218, 219, 219, 221, 222, 222, 222, 223,
	227, 227, 220, 220, 224, 224, 224, 225, 225, 226,
	226, 226, 226, 226, 138, 138, 138, 139, 139, 140,
	76, 76, 135, 135, 134, 134, 134, 137, 137, 93,
	179, 179, 179, 179, 179, 179, 179, 94, 94, 100,
	95, 95, 96, 96, 96, 96, 96, 96, 130, 131,
	97, 97, 97, 132, 132, 141, 145, 145, 144, 143,
	143, 142, 142, 122, 122, 122, 122, 121, 120, 82,
	82, 238, 238, 146, 146, 83, 83, 84, 78, 78,
	157, 157, 157, 157, 72, 72, 53, 53, 73, 73,
	49, 49, 52, 50, 50, 50, 50, 67, 67, 68,
	68, 47, 47, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 181, 181, 181, 42, 42, 42,
	43, 43, 44, 44, 187, 187, 187, 188, 188, 188,
	188, 186, 186, 186, 186, 186, 192, 192, 192, 192,
	192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
	192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
	192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
	192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
	192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
	192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
	192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
	192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
	192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
	192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
	194, 194, 194, 194, 194, 194, 194, 194, 194, 194,
	194, 194, 194, 194, 194, 194, 194, 194, 194, 194,
	194, 194, 194, 194, 194, 194, 194, 194, 194, 194,
	194, 194, 194, 194, 194, 194, 194, 194, 194, 194,
	194, 194, 194, 194, 194, 194, 194, 193, 193, 193,
	193, 193, 193, 193, 193, 193, 193, 193, 193, 193,
	195, 195, 195, 195, 195, 195, 195, 195, 195, 195,
	195, 195, 195, 195, 195, 195, 195, 195, 195, 195,
	195, 195, 195, 195, 195, 195, 195, 195, 195, 195,
	195, 195, 195, 195, 195, 195, 195, 195, 195, 195,
	195, 195, 195, 195, 195, 195, 195, 195, 195, 195,
	195, 195, 195, 195, 195, 195, 195, 195, 195, 195,
	195, 195, 195, 195, 195, 195, 195, 195, 195, 195,
	195, 195, 195, 195, 195, 195, 195, 195, 195,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 4, 6, 1, 3, 2, 5, 3,
	6, 4, 6, 6, 6, 4, 8, 2, 3, 3,
	6, 4, 3, 2, 1, 1, 0, 2, 0, 2,
	0, 1, 1, 1, 6, 3, 5, 4, 6, 4,
	6, 1, 3, 1, 2, 2, 3, 2, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 1,
	5, 3, 0, 1, 1, 1, 1, 6, 6, 1,
	2, 2, 1, 1, 1, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 2, 3, 6, 3, 2,
	1, 1, 1, 3, 3, 2, 3, 3, 3, 3,
	1, 3, 3, 2, 1, 1, 3, 1, 1, 1,
	2, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 1, 1, 1, 1, 1,
	0, 1, 1, 2, 2, 4, 2, 4, 4, 4,
	4, 3, 3, 4, 3, 2, 4, 2, 0, 2,
	0, 2, 0, 6, 9, 1, 0, 1, 3, 1,
	1, 1, 1, 3, 2, 0, 3, 1, 2, 2,
	1, 1, 2, 4, 2, 5, 6, 7, 5, 3,
	1, 4, 5, 5, 10, 1, 1, 4, 0, 3,
	0, 2, 2, 2, 0, 1, 1, 2, 2, 0,
	3, 3, 2, 1, 1, 2, 2, 1, 2, 1,
	4, 10, 13, 1, 0, 1, 3, 3, 3, 5,
	1, 3, 1, 2, 0, 1, 1, 0, 6, 6,
	8, 6, 8, 8, 10, 8, 10, 1, 0, 2,
	0, 2, 2, 3, 3, 2, 2, 2, 1, 0,
	1, 3, 2, 0, 2, 1, 1, 1, 3, 3,
	0, 3, 4, 7, 3, 0, 6, 6, 8, 5,
	7, 1, 3, 1, 4, 2, 8, 5, 4, 3,
	0, 2, 0, 8, 1, 3, 1, 1, 3, 5,
	5, 1, 1, 3, 3, 1, 2, 3, 2, 3,
	4, 1, 1, 8, 8, 1, 2, 4, 4, 4,
	2, 2, 3, 1, 3, 6, 1, 0, 1, 0,
	1, 1, 0, 1, 1, 0, 1, 0, 3, 1,
	3, 2, 2, 2, 1, 1, 2, 2, 3, 1,
	1, 1, 1, 3, 0, 2, 0, 2, 3, 2,
	0, 1, 3, 3, 1, 1, 3, 2, 4, 0,
	4, 2, 1, 4, 3, 4, 5, 4, 5, 4,
	5, 2, 4, 1, 1, 0, 5, 0, 2, 2,
	2, 1, 1, 0, 4, 2, 1, 2, 2, 4,
	1, 3, 1, 2, 3, 2, 0, 2, 5, 2,
	3, 4, 0, 1, 1, 1, 1, 2, 4, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 5, 0, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 2, 1, 1, 3, 0, 1, 1,
	1, 1, 5, 2, 1, 1, 1, 1, 4, 1,
	2, 2, 1, 1, 1, 0, 1, 1, 4, 1,
	4, 1, 1, 1, 1, 1, 1, 1, 3, 3,
	3, 3, 3, 3, 3, 0, 1, 4, 1, 3,
	3, 5, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 2, 2, 3, 4,
	4, 5, 3, 4, 3, 3, 4, 3, 4, 3,
	4, 5, 6, 6, 7, 6, 7, 6, 7, 3,
	4, 1, 3, 2, 2, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 5, 6, 6, 7, 1,
	1, 1, 3, 1, 1, 1, 2, 2, 2, 1,
	1, 3, 5, 6, 8, 6, 6, 4, 4, 1,
	1, 1, 5, 1, 3, 1, 3, 1, 1, 1,
	1, 6, 4, 4, 4, 4, 6, 5, 5, 5,
	4, 8, 6, 6, 4, 4, 4, 5, 0, 5,
	0, 2, 0, 1, 3, 3, 2, 2, 0, 6,
	1, 0, 3, 0, 2, 2, 0, 1, 4, 2,
	2, 2, 2, 2, 4, 3, 5, 4, 3, 5,
	1, 3, 1, 3, 3, 3, 2, 1, 3, 3,
	1, 1, 1, 1, 1, 1, 1, 4, 3, 2,
	3, 0, 3, 3, 2, 2, 1, 0, 2, 2,
	3, 2, 1, 1, 3, 5, 1, 2, 4, 2,
	0, 1, 0, 1, 1, 3, 5, 2, 2, 1,
	2, 1, 0, 1, 1, 1, 3, 3, 1, 3,
	3, 2, 1, 1, 1, 3, 1, 3, 1, 3,
	1, 2, 3, 1, 2, 2, 1, 1, 3, 3,
	0, 1, 2, 1, 1, 1, 1, 6, 2, 3,
	5, 1, 1, 1, 1, 2, 2, 1, 1, 1,
	1, 0, 3, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -9, -10, -11, -13,
	-15, -16, -18, -19, -21, -20, -22, -23, -24, -17,
	-25, -26, 19, -6, -7, -8, -214, 84, 91, 180,
	106, 194, 201, -27, -29, 209, 210, 29, 218, 53,
	87, 196, 191, 238, 59, -213, -30, -28, 284, 259,
	265, 204, -31, 225, 252, 287, 225, 71, 117, 79,
	121, 246, 245, 71, 117, 225, -12, 284, -20, -5,
	-10, -4, -16, -26, -9, -11, 19, -42, 4, -192,
	-194, 16, 17, 19, 28, 29, 34, 38, 41, 52,
	53, 54, 56, 58, 61, 62, 69, 70, 71, 72,
	74, 79, 83, 84, 86, 91, 96, 97, 100, 102,
	107, 112, 113, 118, 121, 129, 131, 132, 137, 140,
	143, 145, 146, 147, 148, 149, 151, 152, 154, 156,
	153, 159, 161, 162, 168, 171, 174, 175, 178, 180,
	182, 183, 184, 186, 187, 191, 189, 190, 192, 194,
	196, 197, 199, 201, 202, 203, 206, 207, 209, 210,
	212, 215, 217, 218, 221, 219, 224, 226, 227, 234,
	238, 239, 240, 241, 244, 245, 246, 249, 250, 251,
	255, 260, 261, 262, 263, 30, 31, 32, 33, 35,
	36, 39, 40, 44, 45, 46, 48, 73, 75, 76,
	90, 92, 98, 108, 110, 114, 115, 122, 123, 124,
	126, 135, 158, 160, 169, 173, 177, 179, 185, 198,
	205, 213, 214, 220, 222, 229, 230, 231, 235, 236,
	252, 253, -232, 18, -233, -234, 59, 84, 106, 204,
	121, 79, 245, -232, -46, 201, -42, -112, 140, 207,
	234, -113, -111, -185, 229, 149, -74, -42, 4, 71,
	52, 72, 107, 117, 118, 132, 226, 229, 234, 18,
	59, -237, 234, 234, -237, -237, -45, 234, 232, -46,
	-236, 225, 225, -101, 71, 243, -28, -30, -29, -62,
	-63, 242, 125, 89, 167, -27, -29, -213, -215, 186,
	-212, -42, -215, -59, -60, 18, 81, 288, -155, -49,
	165, -42, -84, 284, -3, -155, 114, -42, -52, 114,
	-49, 104, 127, 127, -156, -155, -42, 114, -53, 114,
	-52, -75, 114, -74, -161, -160, -188, 4, -192, -194,
	-193, 252, 50, 60, 105, 120, 128, 130, 136, 138,
	150, 170, 172, 195, 211, 225, -136, 284, 164, 288,
	164, -42, -112, 46, -112, -114, -40, -41, 129, 182,
	232, 269, 104, 263, -56, 5, 77, -77, 286, 104,
	-229, 164, 104, 104, 104, -184, 104, 263, 129, 182,
	225, -115, -40, -41, -115, 232, -46, -87, -155, -74,
	114, 117, -42, 114, -62, -63, -86, -104, -105, 139,
	163, -89, 18, 81, -89, -89, 38, 285, 285, 288,
	-215, -68, 284, -78, -157, -126, 277, -128, 275, 276,
	281, 155, 264, -138, -49, -129, 9, 284, -141, -210,
	-29, 90, 24, -139, -140, 198, -42, 7, 8, 5,
	6, -47, -164, -173, 237, 93, 157, 42, -208, -209,
	4, -192, -187, -165, -175, -169, -172, 126, 50, 64,
	67, 65, 68, 208, 247, 43, 92, 173, 177, 222,
	235, 236, 114, 158, 115, 48, 108, 135, 83, 31,
	33, 35, 36, 44, 45, 73, 75, 76, 98, 122,
	123, 124, 160, 185, 213, 220, 230, 231, 253, -193,
	-176, -177, -170, -171, -178, -78, -84, 277, -49, 284,
	-82, -122, -121, -120, 282, 286, -83, -146, -126, 77,
	-36, 189, -35, 17, 19, 84, 250, 90, 189, 189,
	90, 289, -156, -51, -49, -51, 209, -42, 25, 90,
	-38, 288, 41, 192, 90, -38, 288, 90, 285, 288,
	-155, 114, 25, -135, -162, -163, -165, -174, -168, -172,
	-173, 34, 40, 39, 227, 205, 214, 32, 122, 123,
	124, 213, 31, 185, 98, 83, 76, 75, 160, 36,
	35, -176, -177, -170, -171, 73, 230, 231, 126, 33,
	45, 44, 253, 220, -228, -73, 225, 71, -50, -42,
	277, -234, -228, 25, 288, 288, 137, -55, 143, 154,
	112, -183, 77, -190, -182, -147, 9, 237, 93, 164,
	-189, 8, 276, -181, -188, 5, 7, 275, -183, 77,
	62, -191, 5, 4, -173, -147, 77, 140, 286, -186,
	4, -192, -194, -193, -195, 18, 20, 21, 22, 23,
	24, 25, 26, 27, 37, 42, 43, 47, 49, 51,
	57, 59, 63, 64, 65, 66, 67, 68, 77, 78,
	80, 81, 82, 85, 87, 89, 93, 94, 95, 101,
	103, 104, 106, 109, 111, 116, 117, 119, 125, 127,
	133, 134, 139, 141, 142, 155, 157, 163, 164, 165,
	166, 167, 176, 181, 188, 193, 204, 208, 216, 223,
	225, 228, 232, 233, 237, 242, 243, 247, 248, 254,
	256, 257, 258, 259, -185, -231, 101, -228, -185, -185,
	-185, -185, 137, -185, 288, 288, -46, -38, 288, 284,
	155, -43, 114, -42, -39, 86, 155, -86, -105, -104,
	-106, -126, 18, -126, -128, -28, -28, -28, -64, -150,
	-126, -212, 25, -67, -42, -70, 288, 104, 10, 49,
	28, 275, 276, 277, 278, 99, 279, 272, 273, 274,
	271, 267, 268, 269, 55, 144, 200, 12, 13, 14,
	22, 166, 138, 264, 211, 128, 30, 116, 25, 4,
	-126, -126, -126, -126, -126, 172, -29, -126, -76, -82,
	-29, -134, 282, 284, -82, 284, 5, 5, 284, -142,
	-126, -216, 260, 101, 284, 284, 284, 284, 284, 284,
	284, 284, 284, 284, 284, 284, 284, 284, 284, 179,
	-180, 255, -180, -180, -166, 284, -166, -167, 284, -166,
	261, 265, 284, -70, -49, -122, -126, -186, 277, 288,
	285, 288, 232, -102, 57, 51, -117, 114, 51, -196,
	-42, 57, -197, 47, 243, 181, 103, -102, 57, -102,
	57, 57, -155, 232, 232, -52, -42, -119, 257, -108,
	-20, 284, 77, 25, -108, -79, -80, -158, -81, -49,
	284, -42, -42, -52, -53, -74, -75, -12, -160, 90,
	-14, -20, -16, -26, -9, 285, 288, -69, 24, -98,
	284, 262, 147, 74, 113, 146, -99, 203, 232, 288,
	-73, -67, -121, -120, 104, 234, -41, -40, -54, 184,
	215, 190, 206, 288, 8, 7, 7, 5, -186, -230,
	-42, -41, -40, -155, -57, -58, -118, -117, -198, -199,
	-196, 117, 243, 94, 90, 164, 155, 269, 90, -107,
	198, 199, 288, -34, 26, 80, 284, 288, 285, -119,
	-157, -71, -153, -155, -29, -154, 284, -162, -74, 229,
	-126, -126, -126, -126, -126, -126, -126, -126, -126, -126,
	-126, -126, -126, -126, -126, -126, -126, -126, -126, -126,
	-126, -126, 138, 211, 30, 116, 232, 157, 155, 237,
	93, 244, 81, 161, -238, 223, 27, -132, -29, 284,
	-186, -138, 198, 284, 285, 288, -76, -137, 283, -126,
	-134, -76, 285, 285, -76, 254, 18, 81, 277, -98,
	7, -145, -144, 256, -217, 96, 109, 284, 285, 285,
	-126, -93, -179, 4, 262, 147, 74, 113, 146, 203,
	-94, -126, -95, -127, -128, 275, 276, 281, 284, 198,
	-96, -126, -76, -126, 37, 134, 233, -97, -126, 104,
	-76, -126, -126, -126, -76, -76, -76, 284, 7, 7,
	229, 229, 7, -119, 285, 283, 292, -146, -35, -49,
	-42, -42, 155, -117, 114, -162, -42, 284, 284, 131,
	131, -42, -42, 114, -42, 114, -42, -42, -36, 189,
	-42, -42, 189, -88, 193, -126, -88, -110, 164, -72,
	-49, 252, -42, 193, -70, 288, 269, -72, -38, -38,
	-155, -162, 282, 282, 7, 232, 232, 232, 232, 284,
	-230, -50, -230, -40, 241, 54, 184, -190, -98, 288,
	285, 288, -43, 117, -43, -74, -49, 90, 5, -42,
	-150, -14, -42, -85, 109, 288, 60, -92, 130, 150,
	105, 136, 195, 120, -123, 289, -149, -148, 25, -42,
	-29, -154, -153, 263, -126, 232, -238, 223, -132, -126,
	157, 237, 93, 244, 81, 161, 104, 284, -127, -127,
	-76, 284, -76, -126, 288, 283, 283, 288, 285, -63,
	288, -62, -126, -76, -76, 285, 285, -143, -144, 85,
	-126, -222, 171, 284, 284, -126, 25, 285, 104, 285,
	-100, 176, 285, 10, 275, 276, 277, 278, 99, 279,
	272, 273, 274, 271, 267, 268, 269, 55, 144, 200,
	12, 13, 14, 128, 116, -127, -127, -127, -76, 284,
	285, -130, -131, 104, 101, 25, -97, -97, -97, 285,
	104, -76, 288, 288, 288, 285, 285, 285, 7, 285,
	288, 285, 263, 263, 285, -85, -126, 232, 232, 90,
	155, -200, -197, -126, -67, 284, 284, -33, 84, 209,
	-103, 90, -38, 90, -38, 232, -102, 57, 232, -78,
	193, 56, 285, 288, -78, -119, -80, -146, 285, 283,
	7, 7, 285, 147, 113, 146, -99, 146, -99, -99,
	7, -42, -118, 284, -43, 284, 284, 284, -42, -39,
	285, -133, 111, 38, -153, 130, 130, -153, -92, 130,
	-90, 170, -90, -90, -149, -186, 290, -42, 284, 285,
	-126, -126, -127, -127, 104, 284, -126, -135, 22, 22,
	285, -76, 285, 288, 285, -126, -134, 285, 254, -63,
	-63, -63, 5, 87, -126, 228, -223, -42, 284, 257,
	-62, 285, -162, -126, -130, -126, -162, -127, -127, -127,
	-127, -127, -127, -127, -127, -127, -127, -127, -127, -127,
	-127, -127, -127, -127, -127, -127, 81, 155, 161, -127,
	288, -76, 285, -131, -130, -126, -126, -162, 285, 285,
	285, -76, -126, -126, -126, 285, 7, -133, 283, -42,
	-42, -117, 90, -201, 57, -202, 49, 155, 157, 243,
	181, 47, 77, 188, 285, 285, -67, -67, 155, 77,
	155, 77, 70, 239, -42, -42, -49, -42, -42, -42,
	-78, -109, 284, 164, -20, -49, -88, 269, 283, 283,
	285, -65, -151, -42, -211, 284, -208, -209, -47, 284,
	-66, -152, -42, -57, -65, 164, -218, 258, -126, -76,
	-153, -153, -91, 248, 164, 130, -153, -159, 266, -125,
	-124, 102, 153, 284, -67, -148, 22, 22, -126, -135,
	285, -126, -126, 285, -126, 5, -126, 285, 285, 285,
	-126, -227, -42, -126, 285, 285, -131, 104, 81, 161,
	284, -126, 285, 285, 288, 285, 285, 285, -218, -117,
	-42, -74, 157, 131, 284, -127, -49, -116, -235, 58,
	221, 285, 285, 157, 157, -126, -162, -38, -38, 232,
	232, 82, -67, 57, -84, -29, 284, 285, 288, -48,
	-82, 49, -48, -126, 284, -65, 285, 288, 285, 285,
	-49, -219, -221, -42, -91, 284, -126, -153, 161, 288,
	291, 269, -67, 285, -126, -126, 285, 285, -63, -220,
	175, 285, -127, 104, 284, -135, 285, -126, -202, -126,
	-44, 284, 284, 188, -37, 49, -42, -42, 245, 156,
	285, -42, -116, -151, -34, -74, -34, 285, -76, 285,
	-152, -116, 284, 288, 25, -67, 224, -124, -186, 285,
	285, -63, 38, -127, -135, 285, 285, 285, -205, 145,
	-42, -67, -49, -32, 248, -74, 209, -119, -48, -63,
	-116, -65, -221, -223, 285, 229, -224, 183, 199, -76,
	285, -203, -206, -204, 164, 105, 174, 212, 285, 285,
	-61, 284, -126, -79, -34, 285, 285, 5, 285, -225,
	-226, 30, 240, 62, -126, -225, -204, 164, -206, 164,
	245, 79, -205, -67, -119, -116, -226, 178, 100, 198,
	178, 100, -207, 152, 192, 41, 209, -207, -203, 285,
	22, 16, 157, 77, -226,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 0, 51, 52, 53, 0, 0, 337, 0,
	0, 0, 0, 311, -2, 0, 0, 269, 0, 269,
	269, 273, 0, 339, 234, 336, -2, 347, 0, 0,
	0, 345, 325, 0, 0, -2, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 67, 0, 69, 70,
	71, 72, 73, 74, 75, 76, 0, 82, 757, 758,
	759, 776, 777, 778, 779, 780, 781, 782, 783, 784,
	785, 786, 787, 788, 789, 790, 791, 792, 793, 794,
	795, 796, 797, 798, 799, 800, 801, 802, 803, 804,
	805, 806, 807, 808, 809, 810, 811, 812, 813, 814,
	815, 816, 817, 818, 819, 820, 821, 822, 823, 824,
	825, 826, 827, 828, 829, 830, 831, 832, 833, 834,
	835, 836, 837, 838, 839, 840, 841, 842, 843, 844,
	845, 846, 847, 848, 849, 850, 851, 852, 853, 854,
	855, 856, 857, 858, 859, 860, 861, 862, 863, 864,
	865, 866, 867, 868, 869, 870, 871, 872, 873, 874,
	875, 876, 877, 878, 879, 880, 881, 882, 883, 884,
	885, 886, 887, 888, 889, 890, 891, 892, 893, 894,
	895, 896, 897, 898, 899, 900, 901, 902, 903, 904,
	905, 906, 907, 908, 909, 910, 911, 912, 913, 914,
	915, 916, 917, 918, 919, 920, 921, 922, 923, 924,
	925, 926, 0, 92, 93, 94, 96, 97, 98, 99,
	100, 101, 102, 0, 262, 848, 275, 105, 814, 852,
	864, 110, 120, 0, 920, -2, 124, 63, 153, 154,
	0, 156, 170, 0, 0, 0, 168, 0, 0, 165,
	0, 280, 268, 280, 265, 266, 267, 270, 0, 261,
	0, 338, 0, 0, 0, 233, -2, 321, 322, -2,
	0, 342, 342, 342, 0, 0, 322, 0, 330, 838,
	333, 740, 331, 0, 0, 344, 343, 0, 326, 406,
	0, 730, 367, 0, 2, 0, 900, 0, 0, 900,
	0, 0, 0, 0, 0, 412, 55, 900, 46, 900,
	726, 46, 900, 61, 0, 77, 79, 767, 768, 769,
	770, 925, 927, 928, 929, 930, 931, 932, 933, 934,
	935, 936, 937, 938, 939, 0, 0, 0, 0, 0,
	0, 274, 106, 890, 108, 109, 111, 112, 0, 0,
	0, 0, 0, 0, 123, 148, 149, 64, 0, 0,
	172, 0, 0, 0, 0, 161, 0, 162, 0, 164,
	0, 263, 276, 277, 264, 0, 272, 46, 410, 0,
	900, 761, 285, 900, -2, 0, 317, 354, 355, 0,
	0, 0, 340, 341, 0, 0, 0, 313, 314, 0,
	332, 0, 0, 370, 718, 722, 723, 498, 0, 0,
	0, 0, 0, 0, 579, 580, 581, 0, 583, 584,
	585, 895, 0, 589, 590, 914, 730, 743, 744, 745,
	746, 0, 0, 0, 751, 752, 753, 702, 628, 599,
	-2, -2, 741, 436, 437, 438, 439, -2, 927, 603,
	605, 607, 608, 609, 610, 0, 896, 910, 911, 919,
	923, 924, 900, 907, 901, 891, 898, 906, 797, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, 766,
	460, 461, 466, 467, 469, 370, 368, 407, 408, 0,
	731, 709, 703, 704, 0, 0, 0, 715, 713, 714,
	23, 258, 25, 0, 258, 258, 0, 0, 0, 0,
	0, 0, 416, 0, 291, 0, 0, 413, 0, 0,
	57, 0, 44, 45, 0, 59, 0, 0, 337, 0,
	0, 900, 337, 0, 662, 422, 423, 424, 425, 426,
	495, 429, 430, 431, 432, 433, 434, 435, 443, 444,
	445, 446, 447, 448, 457, 0, 442, 442, 442, 454,
	455, 458, 459, 464, 465, 476, 477, 479, 481, 475,
	475, 475, 472, 473, 0, 89, 0, 793, 728, 733,
	736, 95, 0, 0, 0, 0, 0, 115, 135, 136,
	137, 116, 118, 125, 127, 128, 129, 138, 139, 140,
	141, 227, 0, 229, 151, 152, 754, 0, 117, 119,
	121, 122, 142, 143, 0, 145, 146, 147, 0, 65,
	771, 772, 773, 774, 775, 940, 941, 942, 943, 944,
	945, 946, 947, 948, 949, 950, 951, 952, 953, 954,
	955, 956, 957, 958, 959, 960, 961, 962, 963, 964,
	965, 966, 967, 968, 969, 970, 971, 972, 973, 974,
	975, 976, 977, 978, 979, 980, 981, 982, 983, 984,
	985, 986, 987, 988, 989, 990, 991, 992, 993, 994,
	995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004,
	1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014,
	1015, 1016, 1017, 1018, 155, 157, 0, 169, 158, 159,
	160, 167, 163, 166, 0, 0, 271, 230, 0, 176,
	0, 0, 900, 760, 282, 0, 0, 320, 352, 353,
	356, 359, 360, 357, 498, 327, 328, 329, 348, 349,
	247, 334, 0, 0, 737, 416, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 712, 0, 0, 721,
	502, 503, 504, 526, 527, 0, -2, 660, 0, 586,
	587, 588, 0, 0, -2, 0, 748, 495, 0, 0,
	701, 630, 0, 0, 0, 0, 0, 0, 0, 681,
	687, 0, 0, 0, 0, 0, 0, 0, 0, 450,
	463, 474, 471, 470, 452, 0, 451, 449, 0, 453,
	0, 0, 0, 416, 0, 710, 0, 707, 708, 0,
	717, 0, 0, 0, 0, 257, 27, 900, 0, 37,
	0, 0, 200, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 732, 302, 0, 302,
	293, 0, 0, 0, 289, 370, 304, 306, 307, 0,
	0, 414, 56, 727, 46, 62, 46, 68, 78, 0,
	80, 83, 84, 85, 86, 81, 0, 417, 419, 427,
	0, 482, 483, 484, 485, 486, 487, 496, 0, 0,
	90, 91, 734, 735, 0, 0, 113, 114, 281, 0,
	132, 0, 134, 0, 228, 756, 755, 495, 66, 171,
	103, 278, 279, 411, 0, 175, 177, 179, 180, 181,
	182, 761, 0, 761, 0, 0, 0, 0, 0, 358,
	361, 362, 0, 351, 245, 246, 337, 0, 739, 364,
	719, 369, 371, 379, 395, 382, 0, 499, 500, 0,
	505, 506, 507, 508, 509, 510, 511, 512, 513, 514,
	-2, -2, -2, 518, 519, 520, -2, -2, -2, 524,
	525, -2, 0, 0, 712, 0, 0, 532, 0, 535,
	537, 539, 0, 0, 0, 0, 711, 549, 693, 0,
	720, 534, 0, 0, 582, 0, 0, 0, 666, 660,
	667, 0, -2, 591, 347, 0, 0, 0, 0, 749,
	0, 700, 696, 0, 638, 0, 0, 0, 604, 606,
	0, 0, 0, 670, 671, 672, 673, 674, 675, 676,
	0, 0, 0, 0, 551, 0, 0, 0, 0, 914,
	0, 660, 686, 0, 0, 0, 0, 0, 660, 0,
	692, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 364, 409, 705, 0, 716, 26, 249,
	0, 0, 0, 29, 900, 185, 0, 0, 0, 0,
	0, 260, 38, 900, 46, 900, 46, 39, 24, 258,
	248, 251, 0, 54, 0, 415, 286, 287, 0, 0,
	724, 295, 292, 0, 416, 0, 0, 0, 58, 60,
	0, 663, 0, 0, 0, 0, 0, 0, 0, 0,
	87, 729, 88, 107, 130, 131, 133, 126, 144, 0,
	173, 0, 0, 761, 0, 0, 0, 0, 284, 285,
	350, 0, 738, 366, 0, 0, 0, 0, 0, 0,
	403, 403, 403, 401, 395, 0, 381, 394, 0, 393,
	-2, 382, 0, 0, -2, 0, 0, 0, 550, -2,
	533, 536, 538, 540, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 661, 0, 664, 665, 0, -2, 0,
	0, 346, 347, 347, 347, 597, 0, 0, 697, 0,
	0, 598, 0, 0, 0, 0, 0, 612, 0, 613,
	0, 0, 614, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 553, 554, 555, 0, 0,
	615, 684, 685, 0, 0, 0, 0, 0, 0, 620,
	0, 691, 0, 0, 0, 624, 625, 626, 0, 440,
	0, 456, 478, 480, 468, 366, 0, 0, 0, 0,
	0, 183, 199, 0, 0, 0, 0, 31, 0, 0,
	0, 0, 35, 0, 41, 0, 0, 0, 0, 301,
	0, 300, 0, 0, 290, 302, 305, 308, 0, 420,
	0, 0, 428, 488, 489, 490, 491, 492, 493, 494,
	0, 104, 178, 0, 0, 0, 176, 0, 0, 283,
	335, 632, 0, 0, 372, 0, 0, 0, 0, 0,
	398, 402, 399, 400, 397, 377, 0, 391, 0, 384,
	501, -2, 0, 0, 0, 0, -2, 0, 0, 0,
	694, 0, 655, 0, -2, 661, 668, 592, 0, 0,
	0, 0, 750, 695, 699, 0, 636, 637, 641, 0,
	0, 602, 0, 669, 678, 679, 552, 556, 557, 558,
	559, 560, 561, 562, 563, 564, 565, -2, -2, -2,
	569, 570, 571, -2, -2, -2, 0, 0, 0, 680,
	0, 0, 658, 682, 683, 688, 689, 0, 617, 618,
	619, 690, 0, 0, 0, 462, 0, 632, 706, 253,
	255, 28, 0, 184, 0, 187, 0, 0, 190, 191,
	0, 0, 0, 0, 201, 208, 0, 0, 0, 43,
	0, 0, 259, 0, 46, 46, 250, 0, 0, 252,
	288, 0, 0, 0, 294, 725, 303, 0, 421, 418,
	497, 0, 235, 244, 244, 0, 600, 601, 0, 0,
	0, 240, 242, 0, 0, 0, 323, 0, 365, 363,
	385, 0, 387, 0, 0, 0, 389, 380, 0, 0,
	375, 0, 374, 0, 0, 383, 0, 0, -2, 0,
	543, -2, -2, 654, 661, 747, 347, 593, 595, 596,
	698, 643, 640, 0, 627, 611, 677, 0, 0, 0,
	0, 661, 657, 616, 0, 622, 623, 441, 324, 30,
	0, 188, 189, 192, 0, 194, 763, 202, 0, 205,
	206, 203, 0, 32, 33, 42, 48, 34, 40, 0,
	0, 0, 0, 0, 309, 310, 0, 208, 0, 247,
	742, 0, 247, 0, 0, 0, 198, 0, 174, 208,
	0, 631, 633, 0, 386, 0, 405, 388, 0, 0,
	378, 0, 0, 392, -2, -2, 544, 656, 0, 347,
	0, 629, -2, 0, 0, 0, 659, 0, 186, 0,
	214, 0, 0, 0, 50, 0, 254, 256, 0, 297,
	416, 299, 196, 236, 237, 243, 238, 244, 347, 208,
	241, 231, 0, 0, 0, 0, 0, 376, 373, 390,
	594, 646, 0, -2, 0, 577, 621, 193, 219, 0,
	0, 0, 210, 36, 0, 47, 0, 298, 247, 0,
	197, 0, 634, 635, 404, 0, 0, 0, 0, 642,
	578, 195, 215, 216, 0, 211, 212, 213, 762, 207,
	214, 0, 49, 416, 239, 592, 208, 396, 639, 644,
	647, -2, 867, 790, 0, 645, 217, 0, 218, 0,
	0, 0, 219, 0, 296, 232, 0, 649, 650, 651,
	652, 653, 220, 0, 223, 224, 0, 221, 204, 209,
	0, 222, 225, 226, 648,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 273, 3, 279, 274, 3,
	284, 285, 277, 275, 288, 276, 286, 278, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 292, 287,
	267, 269, 268, 3, 289, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 282, 3, 283, 272, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 290, 271, 291, 281,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 270,
	57610, 280, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:687
		{
			sqllex.(*scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:693
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:699
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 15:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:720
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 22:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:730
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 23:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:736
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.qname(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 24:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:740
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.qname(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 25:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:746
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 26:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:750
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 27:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:757
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 28:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:762
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 29:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:767
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 30:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:772
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 31:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:777
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: sqlDollar[3].str, Default: sqlDollar[4].union.expr()}
		}
	case 32:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:782
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: sqlDollar[3].str}
		}
	case 33:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:786
		{
			unimplemented()
		}
	case 34:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:789
		{
			sqlVAL.union.val = &AlterTableDropColumn{columnKeyword: sqlDollar[2].union.bool(), IfExists: true, Column: sqlDollar[5].str}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:794
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        sqlDollar[3].str,
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 36:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:804
		{
		}
	case 37:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:807
		{
			sqlVAL.union.val = &AlterTableAddConstraint{ConstraintDef: sqlDollar[2].union.constraintDef()}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:811
		{
			unimplemented()
		}
	case 39:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:813
		{
			unimplemented()
		}
	case 40:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:816
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   sqlDollar[5].str,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 41:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:825
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   sqlDollar[3].str,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 42:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:835
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 43:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:839
		{
			sqlVAL.union.val = nil
		}
	case 44:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:845
		{
			sqlVAL.union.val = DropCascade
		}
	case 45:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:849
		{
			sqlVAL.union.val = DropRestrict
		}
	case 46:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:853
		{
			sqlVAL.union.val = DropDefault
		}
	case 47:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:858
		{
			unimplementedWithIssue(2473)
		}
	case 48:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:859
		{
		}
	case 49:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:862
		{
			unimplemented()
		}
	case 50:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:863
		{
		}
	case 54:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:874
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retExprs()}
		}
	case 55:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:881
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 56:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:885
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 57:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:889
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 58:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:897
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:905
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.qnames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:909
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.qnames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:915
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:919
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 63:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:925
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:929
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:935
		{
			sqlVAL.union.val = Indirection{NameIndirection(sqlDollar[2].str)}
		}
	case 66:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:939
		{
			sqlVAL.union.val = append(sqlDollar[1].union.indirect(), NameIndirection(sqlDollar[3].str))
		}
	case 67:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:946
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:950
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 69:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:956
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 76:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:965
		{ /* SKIP DOC */
		}
	case 77:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:969
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:973
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 80:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:983
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:993
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 82:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:997
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 83:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1003
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 87:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1013
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: NameList(sqlDollar[6].union.strs()), Targets: sqlDollar[4].union.targetList()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1020
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: NameList(sqlDollar[6].union.strs()), Targets: sqlDollar[4].union.targetList()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1027
		{
			sqlVAL.union.val = TargetList{Tables: QualifiedNames(sqlDollar[1].union.qnames())}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1031
		{
			sqlVAL.union.val = TargetList{Tables: QualifiedNames(sqlDollar[2].union.qnames())}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1035
		{
			sqlVAL.union.val = TargetList{Databases: NameList(sqlDollar[2].union.strs())}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1042
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1045
		{
		}
	case 94:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1049
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1053
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 96:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1060
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 97:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1064
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 98:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1068
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 99:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1072
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 100:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1076
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1080
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 102:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1084
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1092
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1096
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 105:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1104
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1108
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 107:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1112
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1116
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 109:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1122
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 111:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1129
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1133
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1137
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1141
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1148
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1154
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname(), Values: sqlDollar[3].union.exprs()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1158
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname(), Values: sqlDollar[3].union.exprs()}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1162
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname()}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1166
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname()}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1173
		{
			unimplemented()
		}
	case 122:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1176
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1179
		{
			unimplemented()
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1186
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1190
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 129:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1198
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1204
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1208
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1212
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 133:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1216
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1220
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1226
		{
			sqlVAL.union.val = Low
		}
	case 136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1230
		{
			sqlVAL.union.val = Normal
		}
	case 137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1234
		{
			sqlVAL.union.val = High
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1240
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1244
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1248
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1263
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1267
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1271
		{
			d, err := ParseDInterval(sqlDollar[2].str)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1281
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1285
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1290
		{
			unimplemented()
		}
	case 149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1291
		{
			unimplemented()
		}
	case 150:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1292
		{
		}
	case 151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1296
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1300
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1306
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1310
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1314
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.qname()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1318
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 157:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1322
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.strs()}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1326
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1330
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1334
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1338
		{
			sqlVAL.union.val = &ShowTables{Name: sqlDollar[3].union.qname()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1342
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1346
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1350
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1354
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 166:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1358
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.qname()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1364
		{
			sqlVAL.union.val = sqlDollar[2].union.qname()
		}
	case 168:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1368
		{
			sqlVAL.union.val = (*QualifiedName)(nil)
		}
	case 169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1374
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 170:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1379
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1385
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 172:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1389
		{
			sqlVAL.union.val = []string(nil)
		}
	case 173:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1396
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.qname(), IfNotExists: false, Defs: sqlDollar[5].union.tblDefs()}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1400
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.qname(), IfNotExists: true, Defs: sqlDollar[8].union.tblDefs()}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1407
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1413
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1417
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1423
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1427
		{ /* unimplemented */
		}
	case 182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1429
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 183:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1435
		{
			sqlVAL.union.val = newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1441
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 185:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1445
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 186:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1451
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1455
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1458
		{
			unimplemented()
		}
	case 189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1474
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1478
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1482
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1486
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1490
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1494
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1498
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.qname(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1507
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.idxElems(),
				Storing: sqlDollar[6].union.strs(),
			}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1515
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:    Name(sqlDollar[3].str),
					Columns: sqlDollar[5].union.idxElems(),
					Storing: sqlDollar[7].union.strs(),
				},
			}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1527
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.famElems(),
			}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1539
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1544
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 201:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1550
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1556
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[3].union.strs()),
					Storing: sqlDollar[5].union.strs(),
				},
			}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1565
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[4].union.strs()),
				},
				PrimaryKey: true,
			}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1574
		{
			unimplemented()
		}
	case 207:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1591
		{
			sqlVAL.union.val = sqlDollar[3].union.strs()
		}
	case 208:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1595
		{
			sqlVAL.union.val = []string(nil)
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1601
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 210:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1605
		{
			sqlVAL.union.val = []string(nil)
		}
	case 211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1610
		{
			unimplemented()
		}
	case 212:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1611
		{
			unimplemented()
		}
	case 213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1612
		{
			unimplemented()
		}
	case 214:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1613
		{
		}
	case 215:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1620
		{
			unimplemented()
		}
	case 216:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1621
		{
			unimplemented()
		}
	case 217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1622
		{
			unimplemented()
		}
	case 218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1623
		{
			unimplemented()
		}
	case 219:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1624
		{
		}
	case 220:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1627
		{
			unimplemented()
		}
	case 221:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1630
		{
			unimplemented()
		}
	case 222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1633
		{
			unimplemented()
		}
	case 223:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1634
		{
			unimplemented()
		}
	case 224:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1635
		{
			unimplemented()
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1636
		{
			unimplemented()
		}
	case 226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1637
		{
			unimplemented()
		}
	case 227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1641
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1645
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1649
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 230:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1656
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.qnames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 231:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1663
		{
			sqlVAL.union.val = &CreateIndex{
				Name:    Name(sqlDollar[4].str),
				Table:   sqlDollar[6].union.qname(),
				Unique:  sqlDollar[2].union.bool(),
				Columns: sqlDollar[8].union.idxElems(),
				Storing: sqlDollar[10].union.strs(),
			}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql.y:1673
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.qname(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.strs(),
			}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1686
		{
			sqlVAL.union.val = true
		}
	case 234:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1690
		{
			sqlVAL.union.val = false
		}
	case 235:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1696
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1700
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1709
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1712
		{
			unimplemented()
		}
	case 239:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1713
		{
			unimplemented()
		}
	case 240:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1717
		{
			sqlVAL.union.val = FamilyElemList{sqlDollar[1].union.famElem()}
		}
	case 241:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1721
		{
			sqlVAL.union.val = append(sqlDollar[1].union.famElems(), sqlDollar[3].union.famElem())
		}
	case 242:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1727
		{
			sqlVAL.union.val = FamilyElem{Column: Name(sqlDollar[1].str)}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1732
		{
			unimplemented()
		}
	case 244:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1733
		{
		}
	case 245:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1737
		{
			sqlVAL.union.val = Ascending
		}
	case 246:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1741
		{
			sqlVAL.union.val = Descending
		}
	case 247:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1745
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 248:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1752
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 249:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1756
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.qname(), NewName: sqlDollar[6].union.qname(), IfExists: false}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1760
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.qname(), NewName: sqlDollar[8].union.qname(), IfExists: true}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1764
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 252:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1768
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 253:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1772
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.qname(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1776
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.qname(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 255:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1780
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 256:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1784
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 257:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1790
		{
			sqlVAL.union.val = true
		}
	case 258:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1794
		{
			sqlVAL.union.val = false
		}
	case 259:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1799
		{
		}
	case 260:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1800
		{
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1804
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1810
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1817
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1821
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 265:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1825
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1829
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1833
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1842
		{
		}
	case 269:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1843
		{
		}
	case 270:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1847
		{
			sqlVAL.str = ""
		}
	case 271:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1851
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 272:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1855
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 273:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1859
		{
			sqlVAL.str = ""
		}
	case 274:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1865
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 275:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1869
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 276:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1875
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1879
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1883
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1887
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1891
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1897
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 282:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1903
		{
			sqlVAL.union.val = &CreateDatabase{Name: Name(sqlDollar[3].str), Encoding: sqlDollar[4].union.strVal()}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1907
		{
			sqlVAL.union.val = &CreateDatabase{IfNotExists: true, Name: Name(sqlDollar[6].str), Encoding: sqlDollar[7].union.strVal()}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1913
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1916
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 286:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1926
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retExprs()
		}
	case 287:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1932
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
		}
	case 288:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1937
		{
			unimplementedWithIssue(6637)
		}
	case 289:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1939
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1944
		{
			unimplementedWithIssue(6637)
		}
	case 291:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1952
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname()}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1956
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1962
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1966
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.qnames(), Rows: sqlDollar[4].union.slct()}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1970
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1976
		{
			sqlVAL.union.val = &OnConflict{Columns: NameList(sqlDollar[3].union.strs()), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1980
		{
			sqlVAL.union.val = &OnConflict{Columns: NameList(sqlDollar[3].union.strs()), DoNothing: true}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1986
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 299:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1990
		{
			unimplemented()
		}
	case 300:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1992
		{
			sqlVAL.union.val = []string(nil)
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1998
		{
			sqlVAL.union.val = sqlDollar[2].union.selExprs()
		}
	case 302:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2002
		{
			sqlVAL.union.val = SelectExprs(nil)
		}
	case 303:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2009
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retExprs()}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2015
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2019
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 308:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2029
		{
			sqlVAL.union.val = &UpdateExpr{Names: QualifiedNames{sqlDollar[1].union.qname()}, Expr: sqlDollar[3].union.expr()}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2041
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.qnames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2045
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.qnames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2089
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2095
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2099
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2114
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2118
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2122
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2126
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2130
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2134
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2168
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.tblExprs(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2180
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.tblExprs(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2192
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        TableExprs{&AliasedTableExpr{Expr: sqlDollar[2].union.qname()}},
				tableSelect: true,
			}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2200
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2209
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2218
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2236
		{
			unimplemented()
		}
	case 331:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2237
		{
			unimplemented()
		}
	case 332:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2238
		{
			unimplemented()
		}
	case 333:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2241
		{
			unimplemented()
		}
	case 334:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2242
		{
			unimplemented()
		}
	case 335:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2245
		{
			unimplemented()
		}
	case 336:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2248
		{
			unimplemented()
		}
	case 337:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2249
		{
		}
	case 338:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2252
		{
		}
	case 339:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2253
		{
		}
	case 340:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2257
		{
			sqlVAL.union.val = true
		}
	case 341:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2261
		{
			sqlVAL.union.val = false
		}
	case 342:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2265
		{
			sqlVAL.union.val = false
		}
	case 343:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2271
		{
			sqlVAL.union.val = true
		}
	case 344:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2276
		{
		}
	case 345:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2277
		{
		}
	case 346:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2281
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 347:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2285
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 348:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2291
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 349:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2297
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2301
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 351:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2307
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2315
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2324
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2335
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2348
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2355
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2362
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 361:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2376
		{
		}
	case 362:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2377
		{
		}
	case 363:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2403
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 364:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2407
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2413
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 366:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2417
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 367:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2423
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2427
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2439
		{
			sqlVAL.union.val = sqlDollar[2].union.tblExprs()
		}
	case 370:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2443
		{
			sqlVAL.union.val = TableExprs(nil)
		}
	case 371:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2449
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2453
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 373:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2459
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2464
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2470
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 376:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2475
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			index := a.Index
			if index == "" {
				index = b.Index
			} else if b.Index != "" {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			noIndexJoin := a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = &IndexHints{Index: index, NoIndexJoin: noIndexJoin}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2495
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 378:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2499
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 379:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2503
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 380:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2510
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), Hints: sqlDollar[2].union.indexHints(), As: sqlDollar[3].union.aliasClause(), AsOf: sqlDollar[4].union.asOfClause()}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2514
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, As: sqlDollar[2].union.aliasClause()}
		}
	case 382:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2517
		{ /* SKIP DOC */
		}
	case 383:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2518
		{
			unimplemented()
		}
	case 384:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2536
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2540
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2544
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2548
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2552
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astNaturalJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr()}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2556
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astNaturalJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2562
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: NameList(sqlDollar[4].union.strs())}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2566
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2570
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: NameList(sqlDollar[3].union.strs())}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2574
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2581
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2587
		{
			sqlVAL.union.val = AsOfClause{Expr: &StrVal{s: sqlDollar[5].str}}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2591
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2597
		{
			sqlVAL.str = astFullJoin
		}
	case 399:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2601
		{
			sqlVAL.str = astLeftJoin
		}
	case 400:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2605
		{
			sqlVAL.str = astRightJoin
		}
	case 401:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2609
		{
			sqlVAL.str = astInnerJoin
		}
	case 402:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2615
		{
		}
	case 403:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2616
		{
		}
	case 404:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2627
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: NameList(sqlDollar[3].union.strs())}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2631
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2637
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 407:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2641
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2645
		{
			sqlVAL.union.val = sqlDollar[2].union.qname()
		}
	case 409:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2649
		{
			sqlVAL.union.val = sqlDollar[3].union.qname()
		}
	case 410:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2655
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2659
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 412:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2672
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname()}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2676
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2680
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2686
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 416:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2690
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 417:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2702
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 418:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2706
		{
			unimplementedWithIssue(2115)
		}
	case 419:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2707
		{
			unimplementedWithIssue(2115)
		}
	case 420:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2710
		{
			unimplementedWithIssue(2115)
		}
	case 421:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2711
		{
			unimplementedWithIssue(2115)
		}
	case 422:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2712
		{
		}
	case 428:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2720
		{
			unimplemented()
		}
	case 429:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2722
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 430:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2726
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 431:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2730
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2734
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2738
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2742
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2746
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 440:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2767
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2776
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2790
		{
			sqlVAL.union.val = nil
		}
	case 443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2797
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 444:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2801
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 445:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2805
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 446:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2809
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 447:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2813
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 448:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2817
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 449:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2821
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newFloatColType(int(prec))
		}
	case 450:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2830
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 451:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2834
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2843
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2852
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2861
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 455:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2865
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 456:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2871
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 457:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2875
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2893
		{
			n, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newIntBitType(int(n))
		}
	case 463:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2904
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 468:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2920
		{
			n, err := sqlDollar[3].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2936
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 470:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2942
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 471:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2946
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 472:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2950
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 473:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2954
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2959
		{
		}
	case 475:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2960
		{
		}
	case 476:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2965
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 477:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2969
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 478:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2973
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 479:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2977
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 480:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2981
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 481:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2986
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 482:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2991
		{
			unimplemented()
		}
	case 483:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2992
		{
			unimplemented()
		}
	case 484:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2993
		{
			unimplemented()
		}
	case 485:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2994
		{
			unimplemented()
		}
	case 486:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2995
		{
			unimplemented()
		}
	case 487:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2996
		{
			unimplemented()
		}
	case 488:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2997
		{
			unimplemented()
		}
	case 489:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2998
		{
			unimplemented()
		}
	case 490:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2999
		{
			unimplemented()
		}
	case 491:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3000
		{
			unimplemented()
		}
	case 492:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3001
		{
			unimplemented()
		}
	case 493:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3002
		{
			unimplemented()
		}
	case 494:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3003
		{
			unimplemented()
		}
	case 495:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3004
		{
		}
	case 496:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3007
		{
			unimplemented()
		}
	case 497:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3008
		{
			unimplemented()
		}
	case 499:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3032
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3035
		{
			unimplemented()
		}
	case 501:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3036
		{
			unimplemented()
		}
	case 502:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3045
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3049
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3053
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3057
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3061
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3065
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3069
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3073
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3077
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3081
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3085
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3089
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3093
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3097
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3101
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3105
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3109
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3113
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3117
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3121
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3125
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3129
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3133
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3137
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3141
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3145
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3149
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3153
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3157
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3161
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3165
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3169
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3172
		{
			unimplemented()
		}
	case 535:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3174
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3178
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3182
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3186
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3190
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3194
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3198
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3202
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3206
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3210
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3214
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3218
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3222
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3226
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3230
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3234
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3251
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3255
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3259
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3263
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3267
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3271
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3275
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3279
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3283
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3287
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3291
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3295
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3299
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3303
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3307
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3311
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3315
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3319
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3323
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3327
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3331
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3335
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3339
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3343
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3347
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3351
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3355
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3367
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 581:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3372
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3376
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3382
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3386
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3390
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3396
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 589:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3400
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 590:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3404
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3412
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname()}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3416
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3419
		{
			unimplemented()
		}
	case 594:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3420
		{
			unimplemented()
		}
	case 595:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3422
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Type: All, Exprs: sqlDollar[4].union.exprs()}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3426
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Type: Distinct, Exprs: sqlDollar[4].union.exprs()}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3430
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Exprs: Exprs{StarExpr()}}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3443
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 599:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3447
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 600:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3456
		{
			unimplemented()
		}
	case 601:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3457
		{
			unimplemented()
		}
	case 602:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3461
		{
			unimplemented()
		}
	case 603:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3463
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3467
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3471
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3475
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3478
		{
			unimplemented()
		}
	case 608:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3479
		{
			unimplemented()
		}
	case 609:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3480
		{
			unimplemented()
		}
	case 610:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3481
		{
			unimplemented()
		}
	case 611:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3483
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3487
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3491
		{
			sqlVAL.union.val = &OverlayExpr{FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3495
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "STRPOS"}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3499
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3502
		{
			unimplemented()
		}
	case 617:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3504
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3508
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "LTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3512
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "RTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3516
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3520
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3524
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3528
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3532
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3536
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3540
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3546
		{
			unimplemented()
		}
	case 628:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3547
		{
		}
	case 629:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3550
		{
			unimplemented()
		}
	case 630:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3551
		{
		}
	case 631:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3555
		{
			unimplemented()
		}
	case 632:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3556
		{
		}
	case 633:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3559
		{
			unimplemented()
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3560
		{
			unimplemented()
		}
	case 635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3563
		{
			unimplemented()
		}
	case 636:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3566
		{
			unimplemented()
		}
	case 637:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3567
		{
			unimplemented()
		}
	case 638:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3568
		{
		}
	case 639:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3572
		{
			unimplemented()
		}
	case 640:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3583
		{
			unimplemented()
		}
	case 641:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3584
		{
		}
	case 642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3587
		{
			unimplemented()
		}
	case 643:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3588
		{
		}
	case 644:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3596
		{
			unimplemented()
		}
	case 645:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3597
		{
			unimplemented()
		}
	case 646:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3598
		{
		}
	case 647:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3601
		{
			unimplemented()
		}
	case 648:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3602
		{
			unimplemented()
		}
	case 649:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3608
		{
			unimplemented()
		}
	case 650:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3609
		{
			unimplemented()
		}
	case 651:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3610
		{
			unimplemented()
		}
	case 652:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3611
		{
			unimplemented()
		}
	case 653:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3612
		{
			unimplemented()
		}
	case 654:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3623
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3627
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3631
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3637
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3641
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3647
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3688
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3692
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 662:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3698
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3702
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 664:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3708
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3712
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3716
		{
			sqlVAL.union.val = &Array{nil}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3722
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3726
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 669:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3732
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3754
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3758
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3764
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 680:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3771
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3775
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3792
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3796
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3800
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3804
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3808
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 687:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3812
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 688:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3818
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 689:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3824
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 690:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3830
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 691:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3834
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 692:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3838
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 693:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3844
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3848
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3859
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3866
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3870
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 698:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3876
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3882
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 700:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3886
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 702:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3893
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 703:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3899
		{
			sqlVAL.union.val = sqlDollar[1].union.indirectElem()
		}
	case 704:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3903
		{
			sqlVAL.union.val = sqlDollar[1].union.indirectElem()
		}
	case 705:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3907
		{
			sqlVAL.union.val = &ArrayIndirection{Begin: sqlDollar[2].union.expr()}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3911
		{
			sqlVAL.union.val = &ArrayIndirection{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr()}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3917
		{
			sqlVAL.union.val = NameIndirection(sqlDollar[2].str)
		}
	case 708:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3923
		{
			sqlVAL.union.val = qualifiedStar
		}
	case 709:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3929
		{
			sqlVAL.union.val = Indirection{sqlDollar[1].union.indirectElem()}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3933
		{
			sqlVAL.union.val = append(sqlDollar[1].union.indirect(), sqlDollar[2].union.indirectElem())
		}
	case 711:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3938
		{
		}
	case 712:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3939
		{
		}
	case 714:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3948
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3954
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3958
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 717:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3967
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 718:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3973
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3977
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3983
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3992
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3996
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4000
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 724:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4008
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4012
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 726:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4018
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4022
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 728:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4028
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4032
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 730:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4043
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4047
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4053
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.qname(), Index: Name(sqlDollar[3].str)}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4064
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4068
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: Indirection{sqlDollar[2].union.indirectElem()}}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4072
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: Indirection{sqlDollar[2].union.indirectElem()}}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4076
		{
			sqlVAL.union.val = &QualifiedName{Indirect: Indirection{unqualifiedStar}}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4082
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4086
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 739:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4092
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 740:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4095
		{
		}
	case 741:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4105
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4109
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4116
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 744:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4120
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 745:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4124
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4128
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4131
		{
			unimplemented()
		}
	case 748:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4133
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4137
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4141
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[5].str}, Type: sqlDollar[1].union.colType()}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4145
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 752:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4149
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 753:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4153
		{
			sqlVAL.union.val = DNull
		}
	case 755:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4160
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 756:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4164
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4186
		{
			sqlVAL.str = ""
		}
	case 762:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4192
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 763:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4196
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
