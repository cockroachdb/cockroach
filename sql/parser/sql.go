// Code generated by go yacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"go/constant"
	"go/token"

	"github.com/pkg/errors"

	"github.com/cockroachdb/cockroach/sql/privilege"
	"github.com/cockroachdb/cockroach/util"
)

var errUnimplemented = errors.New("unimplemented")

func unimplemented() {
	panic(errUnimplemented)
}

func unimplementedWithIssue(issue int) {
	panic(util.UnimplementedWithIssueErrorf(issue, ""))
}

//line sql.y:44

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new sytax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in two forms, depending on the
// type of the value being accessed. Values and pointers are directly
// type asserted from the empty interface, meaning that they will panic
// if the type assertion is incorrect. Interfaces are handled differently
// because a nil instance of an interface inserted into the empty interface
// becomes a nil instance of the empty interface and therefore will fail a
// direct type assertion. Instead, a guarded type assertion must be used,
// which returns nil if the type assertion fails.
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	return u.val.(*StrVal)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) qname() *QualifiedName {
	return u.val.(*QualifiedName)
}
func (u *sqlSymUnion) qnames() QualifiedNames {
	return u.val.(QualifiedNames)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) indirectElem() IndirectionElem {
	if indirectElem, ok := u.val.(IndirectionElem); ok {
		return indirectElem
	}
	return nil
}
func (u *sqlSymUnion) indirect() Indirection {
	return u.val.(Indirection)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	if selectStmt, ok := u.val.(*Select); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	if selectStmt, ok := u.val.(SelectStatement); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	if constraintDef, ok := u.val.(ConstraintTableDef); ok {
		return constraintDef
	}
	return nil
}
func (u *sqlSymUnion) tblDef() TableDef {
	if tblDef, ok := u.val.(TableDef); ok {
		return tblDef
	}
	return nil
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	if colQual, ok := u.val.(NamedColumnQualification); ok {
		return colQual
	}
	return NamedColumnQualification{}
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	if colQual, ok := u.val.(ColumnQualification); ok {
		return colQual
	}
	return nil
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retExprs() ReturningExprs {
	return ReturningExprs(u.val.(SelectExprs))
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	if tblExpr, ok := u.val.(TableExpr); ok {
		return tblExpr
	}
	return nil
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	if joinCond, ok := u.val.(JoinCond); ok {
		return joinCond
	}
	return nil
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	if alterTableCmd, ok := u.val.(AlterTableCmd); ok {
		return alterTableCmd
	}
	return nil
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) famElem() FamilyElem {
	return u.val.(FamilyElem)
}
func (u *sqlSymUnion) famElems() FamilyElemList {
	return u.val.(FamilyElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}

//line sql.y:291
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const DOT_DOT = 57353
const LESS_EQUALS = 57354
const GREATER_EQUALS = 57355
const NOT_EQUALS = 57356
const ERROR = 57357
const ACTION = 57358
const ADD = 57359
const ALL = 57360
const ALTER = 57361
const ANALYSE = 57362
const ANALYZE = 57363
const AND = 57364
const ANY = 57365
const ARRAY = 57366
const AS = 57367
const ASC = 57368
const ASYMMETRIC = 57369
const AT = 57370
const BEGIN = 57371
const BETWEEN = 57372
const BIGINT = 57373
const BIGSERIAL = 57374
const BIT = 57375
const BLOB = 57376
const BOOL = 57377
const BOOLEAN = 57378
const BOTH = 57379
const BY = 57380
const BYTEA = 57381
const BYTES = 57382
const CASCADE = 57383
const CASE = 57384
const CAST = 57385
const CHAR = 57386
const CHARACTER = 57387
const CHARACTERISTICS = 57388
const CHECK = 57389
const COALESCE = 57390
const COLLATE = 57391
const COLLATION = 57392
const COLUMN = 57393
const COLUMNS = 57394
const COMMIT = 57395
const COMMITTED = 57396
const CONCAT = 57397
const CONFLICT = 57398
const CONSTRAINT = 57399
const CONSTRAINTS = 57400
const COVERING = 57401
const CREATE = 57402
const CROSS = 57403
const CUBE = 57404
const CURRENT = 57405
const CURRENT_CATALOG = 57406
const CURRENT_DATE = 57407
const CURRENT_ROLE = 57408
const CURRENT_TIME = 57409
const CURRENT_TIMESTAMP = 57410
const CURRENT_USER = 57411
const CYCLE = 57412
const DATA = 57413
const DATABASE = 57414
const DATABASES = 57415
const DATE = 57416
const DAY = 57417
const DEC = 57418
const DECIMAL = 57419
const DEFAULT = 57420
const DEALLOCATE = 57421
const DEFERRABLE = 57422
const DELETE = 57423
const DESC = 57424
const DISTINCT = 57425
const DO = 57426
const DOUBLE = 57427
const DROP = 57428
const ELSE = 57429
const ENCODING = 57430
const END = 57431
const ESCAPE = 57432
const EXCEPT = 57433
const EXISTS = 57434
const EXECUTE = 57435
const EXPLAIN = 57436
const EXTRACT = 57437
const FALSE = 57438
const FAMILY = 57439
const FETCH = 57440
const FILTER = 57441
const FIRST = 57442
const FLOAT = 57443
const FLOORDIV = 57444
const FOLLOWING = 57445
const FOR = 57446
const FORCE_INDEX = 57447
const FOREIGN = 57448
const FROM = 57449
const FULL = 57450
const GRANT = 57451
const GRANTS = 57452
const GREATEST = 57453
const GROUP = 57454
const GROUPING = 57455
const HAVING = 57456
const HIGH = 57457
const HOUR = 57458
const IF = 57459
const IFNULL = 57460
const IN = 57461
const INDEX = 57462
const INDEXES = 57463
const INITIALLY = 57464
const INNER = 57465
const INSERT = 57466
const INT = 57467
const INT64 = 57468
const INTEGER = 57469
const INTERSECT = 57470
const INTERVAL = 57471
const INTO = 57472
const IS = 57473
const ISOLATION = 57474
const JOIN = 57475
const KEY = 57476
const KEYS = 57477
const LATERAL = 57478
const LEADING = 57479
const LEAST = 57480
const LEFT = 57481
const LEVEL = 57482
const LIKE = 57483
const LIMIT = 57484
const LOCAL = 57485
const LOCALTIME = 57486
const LOCALTIMESTAMP = 57487
const LOW = 57488
const LSHIFT = 57489
const MATCH = 57490
const MINUTE = 57491
const MONTH = 57492
const NAME = 57493
const NAMES = 57494
const NATURAL = 57495
const NEXT = 57496
const NO = 57497
const NO_INDEX_JOIN = 57498
const NORMAL = 57499
const NOT = 57500
const NOTHING = 57501
const NULL = 57502
const NULLIF = 57503
const NULLS = 57504
const NUMERIC = 57505
const OF = 57506
const OFF = 57507
const OFFSET = 57508
const ON = 57509
const ONLY = 57510
const OR = 57511
const ORDER = 57512
const ORDINALITY = 57513
const OUT = 57514
const OUTER = 57515
const OVER = 57516
const OVERLAPS = 57517
const OVERLAY = 57518
const PARTIAL = 57519
const PARTITION = 57520
const PLACING = 57521
const POSITION = 57522
const PRECEDING = 57523
const PRECISION = 57524
const PREPARE = 57525
const PRIMARY = 57526
const PRIORITY = 57527
const RANGE = 57528
const READ = 57529
const REAL = 57530
const RECURSIVE = 57531
const REF = 57532
const REFERENCES = 57533
const RENAME = 57534
const REPEATABLE = 57535
const RELEASE = 57536
const RESTRICT = 57537
const RETURNING = 57538
const REVOKE = 57539
const RIGHT = 57540
const ROLLBACK = 57541
const ROLLUP = 57542
const ROW = 57543
const ROWS = 57544
const RSHIFT = 57545
const SAVEPOINT = 57546
const SEARCH = 57547
const SECOND = 57548
const SELECT = 57549
const SERIAL = 57550
const SERIALIZABLE = 57551
const SESSION = 57552
const SESSION_USER = 57553
const SET = 57554
const SHOW = 57555
const SIMILAR = 57556
const SIMPLE = 57557
const SMALLINT = 57558
const SMALLSERIAL = 57559
const SNAPSHOT = 57560
const SOME = 57561
const SQL = 57562
const START = 57563
const STRICT = 57564
const STRING = 57565
const STORING = 57566
const SUBSTRING = 57567
const SYMMETRIC = 57568
const SYSTEM = 57569
const TABLE = 57570
const TABLES = 57571
const TEXT = 57572
const THEN = 57573
const TIME = 57574
const TIMESTAMP = 57575
const TIMESTAMPTZ = 57576
const TO = 57577
const TRAILING = 57578
const TRANSACTION = 57579
const TREAT = 57580
const TRIM = 57581
const TRUE = 57582
const TRUNCATE = 57583
const TYPE = 57584
const UNBOUNDED = 57585
const UNCOMMITTED = 57586
const UNION = 57587
const UNIQUE = 57588
const UNKNOWN = 57589
const UPDATE = 57590
const UPSERT = 57591
const USER = 57592
const USING = 57593
const VALID = 57594
const VALIDATE = 57595
const VALUE = 57596
const VALUES = 57597
const VARCHAR = 57598
const VARIADIC = 57599
const VARYING = 57600
const WHEN = 57601
const WHERE = 57602
const WINDOW = 57603
const WITH = 57604
const WITHIN = 57605
const WITHOUT = 57606
const YEAR = 57607
const ZONE = 57608
const NOT_LA = 57609
const WITH_LA = 57610
const AS_LA = 57611
const POSTFIXOP = 57612
const UMINUS = 57613

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPLAIN",
	"EXTRACT",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HOUR",
	"IF",
	"IFNULL",
	"IN",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARTIAL",
	"PARTITION",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SQL",
	"START",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:4588

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 24,
	290, 24,
	-2, 351,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 38,
	1, 326,
	167, 326,
	196, 326,
	288, 326,
	290, 326,
	-2, 336,
	-1, 51,
	1, 329,
	167, 329,
	196, 329,
	288, 329,
	290, 329,
	-2, 335,
	-1, 60,
	1, 24,
	290, 24,
	-2, 351,
	-1, 268,
	1, 161,
	290, 161,
	-2, 837,
	-1, 301,
	142, 361,
	166, 361,
	-2, 332,
	-1, 304,
	142, 360,
	166, 360,
	-2, 330,
	-1, 426,
	142, 360,
	166, 360,
	-2, 333,
	-1, 482,
	287, 778,
	-2, 771,
	-1, 483,
	287, 779,
	-2, 772,
	-1, 489,
	5, 495,
	287, 495,
	-2, 922,
	-1, 511,
	5, 461,
	-2, 898,
	-1, 512,
	5, 489,
	287, 489,
	-2, 900,
	-1, 513,
	5, 469,
	-2, 901,
	-1, 514,
	5, 468,
	-2, 902,
	-1, 515,
	5, 489,
	287, 489,
	-2, 905,
	-1, 516,
	5, 489,
	287, 489,
	-2, 906,
	-1, 517,
	5, 490,
	-2, 909,
	-1, 518,
	5, 456,
	-2, 910,
	-1, 519,
	5, 456,
	-2, 911,
	-1, 520,
	5, 471,
	-2, 914,
	-1, 521,
	5, 457,
	-2, 919,
	-1, 522,
	5, 458,
	-2, 920,
	-1, 523,
	5, 459,
	-2, 921,
	-1, 524,
	5, 456,
	-2, 925,
	-1, 525,
	5, 462,
	-2, 930,
	-1, 526,
	5, 460,
	-2, 933,
	-1, 527,
	5, 487,
	287, 487,
	-2, 935,
	-1, 528,
	5, 491,
	-2, 938,
	-1, 529,
	5, 493,
	-2, 939,
	-1, 530,
	5, 486,
	287, 486,
	-2, 943,
	-1, 843,
	91, 336,
	128, 336,
	142, 336,
	166, 336,
	170, 336,
	245, 336,
	-2, 599,
	-1, 851,
	287, 756,
	-2, 745,
	-1, 1040,
	12, 0,
	13, 0,
	14, 0,
	270, 0,
	271, 0,
	272, 0,
	-2, 529,
	-1, 1041,
	12, 0,
	13, 0,
	14, 0,
	270, 0,
	271, 0,
	272, 0,
	-2, 530,
	-1, 1042,
	12, 0,
	13, 0,
	14, 0,
	270, 0,
	271, 0,
	272, 0,
	-2, 531,
	-1, 1046,
	12, 0,
	13, 0,
	14, 0,
	270, 0,
	271, 0,
	272, 0,
	-2, 535,
	-1, 1047,
	12, 0,
	13, 0,
	14, 0,
	270, 0,
	271, 0,
	272, 0,
	-2, 536,
	-1, 1048,
	12, 0,
	13, 0,
	14, 0,
	270, 0,
	271, 0,
	272, 0,
	-2, 537,
	-1, 1051,
	30, 0,
	119, 0,
	141, 0,
	214, 0,
	267, 0,
	-2, 542,
	-1, 1081,
	175, 669,
	-2, 672,
	-1, 1240,
	91, 336,
	128, 336,
	142, 336,
	166, 336,
	170, 336,
	245, 336,
	-2, 409,
	-1, 1244,
	30, 0,
	119, 0,
	141, 0,
	214, 0,
	267, 0,
	-2, 543,
	-1, 1249,
	30, 0,
	119, 0,
	141, 0,
	214, 0,
	267, 0,
	-2, 544,
	-1, 1267,
	175, 668,
	-2, 671,
	-1, 1420,
	30, 0,
	119, 0,
	141, 0,
	214, 0,
	267, 0,
	-2, 545,
	-1, 1425,
	131, 0,
	-2, 555,
	-1, 1433,
	175, 670,
	-2, 673,
	-1, 1465,
	12, 0,
	13, 0,
	14, 0,
	270, 0,
	271, 0,
	272, 0,
	-2, 580,
	-1, 1466,
	12, 0,
	13, 0,
	14, 0,
	270, 0,
	271, 0,
	272, 0,
	-2, 581,
	-1, 1467,
	12, 0,
	13, 0,
	14, 0,
	270, 0,
	271, 0,
	272, 0,
	-2, 582,
	-1, 1471,
	12, 0,
	13, 0,
	14, 0,
	270, 0,
	271, 0,
	272, 0,
	-2, 586,
	-1, 1472,
	12, 0,
	13, 0,
	14, 0,
	270, 0,
	271, 0,
	272, 0,
	-2, 587,
	-1, 1473,
	12, 0,
	13, 0,
	14, 0,
	270, 0,
	271, 0,
	272, 0,
	-2, 588,
	-1, 1577,
	131, 0,
	-2, 556,
	-1, 1580,
	30, 0,
	119, 0,
	141, 0,
	214, 0,
	267, 0,
	-2, 559,
	-1, 1581,
	30, 0,
	119, 0,
	141, 0,
	214, 0,
	267, 0,
	-2, 561,
	-1, 1664,
	30, 0,
	119, 0,
	141, 0,
	214, 0,
	267, 0,
	-2, 560,
	-1, 1665,
	30, 0,
	119, 0,
	141, 0,
	214, 0,
	267, 0,
	-2, 562,
	-1, 1672,
	131, 0,
	-2, 589,
	-1, 1713,
	131, 0,
	-2, 590,
	-1, 1761,
	30, 0,
	141, 0,
	214, 0,
	267, 0,
	-2, 897,
}

const sqlNprod = 1036
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 22126

var sqlAct = [...]int{

	483, 1760, 1741, 1617, 1782, 1718, 1742, 1759, 1743, 1013,
	932, 1652, 1639, 674, 1444, 481, 800, 924, 305, 1540,
	1569, 37, 1541, 1129, 1561, 1550, 1503, 480, 473, 1237,
	85, 1022, 84, 84, 84, 269, 846, 84, 543, 1555,
	84, 327, 994, 1321, 531, 997, 1400, 572, 84, 1270,
	585, 1236, 781, 848, 1320, 84, 84, 475, 1172, 84,
	778, 552, 84, 84, 84, 996, 909, 933, 84, 84,
	84, 84, 1409, 353, 1223, 310, 445, 1227, 900, 17,
	1126, 549, 1091, 1064, 1067, 1025, 947, 312, 50, 956,
	23, 963, 796, 1178, 310, 648, 13, 6, 414, 802,
	989, 632, 304, 354, 554, 415, 348, 446, 544, 545,
	73, 455, 659, 629, 881, 350, 346, 355, 50, 1023,
	8, 78, 343, 926, 877, 7, 5, 77, 79, 4,
	71, 315, 1000, 628, 429, 345, 430, 650, 646, 428,
	266, 247, 339, 565, 256, 313, 433, 1659, 50, 51,
	1660, 80, 929, 925, 309, 1789, 75, 74, 1017, 52,
	76, 456, 574, 1756, 574, 1749, 1638, 574, 1017, 1740,
	960, 1734, 953, 586, 1017, 804, 1715, 1709, 323, 953,
	1017, 330, 1235, 1699, 1184, 351, 1638, 340, 1690, 309,
	1666, 1017, 294, 953, 1663, 1649, 563, 1017, 1638, 333,
	302, 317, 1646, 1637, 1622, 1647, 1638, 1017, 966, 1621,
	301, 961, 1017, 1601, 1582, 1703, 966, 966, 533, 1579,
	324, 1514, 953, 324, 1017, 335, 804, 1429, 81, 324,
	966, 335, 56, 1377, 1371, 1338, 1372, 1372, 1339, 805,
	1641, 803, 1478, 84, 962, 959, 1336, 1335, 1334, 966,
	966, 966, 1267, 58, 1265, 966, 1432, 807, 84, 1266,
	1264, 84, 84, 1018, 975, 966, 1017, 966, 965, 49,
	952, 966, 1209, 953, 897, 1269, 580, 896, 806, 581,
	59, 56, 898, 1225, 1211, 1017, 968, 54, 1075, 1012,
	983, 441, 772, 55, 84, 29, 84, 771, 84, 640,
	84, 964, 58, 30, 639, 546, 378, 322, 440, 547,
	966, 60, 53, 449, 1758, 84, 575, 547, 575, 546,
	427, 575, 673, 547, 398, 1755, 84, 1748, 413, 59,
	1710, 812, 1648, 421, 805, 1606, 54, 84, 84, 84,
	532, 84, 55, 1602, 1594, 56, 1593, 1588, 1587, 1586,
	1539, 426, 807, 1532, 1493, 1488, 854, 1487, 1486, 1184,
	958, 928, 386, 542, 538, 1435, 58, 1418, 1399, 387,
	1381, 84, 1343, 806, 1340, 1328, 822, 1319, 84, 1291,
	84, 1288, 957, 1213, 1286, 1275, 1292, 1274, 1210, 1143,
	1098, 353, 353, 59, 577, 1097, 537, 440, 626, 676,
	84, 439, 84, 84, 84, 84, 84, 84, 638, 84,
	803, 1072, 578, 84, 573, 420, 56, 775, 84, 1751,
	1446, 354, 354, 1702, 84, 53, 812, 1682, 1681, 677,
	592, 1674, 823, 1655, 1644, 355, 355, 58, 418, 1636,
	1614, 1599, 84, 678, 1572, 84, 1548, 1424, 1417, 488,
	1396, 669, 1395, 1394, 436, 437, 340, 324, 1392, 1355,
	442, 1379, 302, 1354, 59, 1318, 1283, 774, 1282, 1261,
	1257, 54, 301, 1531, 1069, 1198, 546, 55, 1297, 564,
	547, 310, 567, 845, 805, 1157, 1156, 540, 1136, 1096,
	582, 1016, 882, 885, 889, 875, 53, 1073, 324, 566,
	566, 874, 807, 873, 872, 851, 816, 808, 809, 810,
	811, 813, 871, 636, 870, 805, 539, 869, 868, 867,
	635, 866, 865, 806, 1292, 864, 863, 862, 861, 1292,
	663, 670, 324, 807, 852, 762, 850, 53, 776, 328,
	759, 444, 84, 763, 764, 765, 766, 767, 676, 768,
	1157, 384, 374, 770, 806, 372, 84, 1538, 1292, 1537,
	84, 894, 773, 84, 84, 786, 785, 784, 849, 84,
	1192, 84, 84, 798, 84, 1191, 812, 84, 677, 84,
	84, 892, 353, 302, 392, 1661, 302, 302, 1536, 1185,
	1007, 614, 678, 792, 1567, 887, 793, 794, 1342, 888,
	1341, 903, 808, 809, 810, 811, 813, 812, 1243, 409,
	393, 859, 354, 1556, 942, 348, 1297, 416, 81, 925,
	259, 1297, 1447, 1092, 878, 1180, 355, 1689, 1724, 1770,
	1278, 84, 84, 910, 883, 914, 916, 890, 855, 886,
	879, 880, 1522, 64, 1205, 927, 535, 927, 970, 1771,
	1297, 555, 822, 556, 1293, 1294, 1295, 1296, 1298, 49,
	73, 1307, 974, 1102, 948, 299, 1307, 293, 50, 292,
	287, 78, 50, 288, 676, 950, 1630, 77, 79, 919,
	1629, 949, 951, 534, 485, 29, 65, 988, 906, 308,
	1367, 931, 913, 30, 351, 1347, 943, 945, 922, 941,
	555, 80, 556, 891, 677, 1346, 75, 74, 823, 940,
	76, 944, 390, 613, 1245, 1197, 1688, 1308, 678, 1196,
	557, 324, 1308, 883, 335, 886, 307, 1292, 1195, 1194,
	936, 1112, 1056, 967, 1105, 335, 921, 920, 335, 977,
	1378, 417, 971, 972, 969, 976, 791, 880, 879, 391,
	1735, 902, 1140, 1139, 810, 811, 813, 1366, 1029, 412,
	370, 296, 84, 1706, 555, 1726, 556, 1292, 309, 557,
	912, 1066, 1066, 568, 1779, 1106, 84, 84, 1386, 817,
	814, 815, 816, 808, 809, 810, 811, 813, 1302, 1299,
	1300, 1301, 1293, 1294, 1295, 1296, 1298, 1293, 1294, 1295,
	1296, 1298, 1092, 1054, 574, 84, 56, 84, 1107, 1104,
	67, 66, 1619, 964, 668, 667, 1770, 661, 656, 1297,
	1019, 297, 591, 1177, 68, 1737, 1168, 58, 1295, 1296,
	1298, 902, 911, 557, 1204, 964, 676, 901, 979, 300,
	1171, 1738, 1028, 306, 981, 1010, 1011, 561, 1173, 1070,
	1357, 1292, 1173, 1369, 59, 560, 1383, 62, 1785, 1297,
	982, 54, 1182, 592, 1307, 1108, 677, 55, 1683, 980,
	388, 992, 69, 1076, 1080, 553, 1083, 991, 1206, 389,
	678, 381, 383, 876, 1670, 892, 72, 558, 671, 1384,
	892, 1121, 1055, 468, 842, 993, 1306, 1133, 1134, 1135,
	84, 84, 84, 1079, 1307, 63, 84, 1281, 1142, 84,
	1410, 1020, 309, 1745, 1052, 84, 84, 84, 84, 84,
	1308, 84, 84, 389, 1103, 82, 240, 241, 1744, 84,
	258, 84, 1778, 270, 1769, 1364, 558, 324, 84, 620,
	432, 258, 1767, 1297, 1088, 1554, 964, 84, 316, 316,
	310, 1152, 326, 672, 1071, 326, 332, 326, 575, 1005,
	1308, 326, 341, 326, 270, 592, 324, 960, 84, 84,
	1247, 1065, 1783, 1254, 84, 401, 1358, 1620, 1146, 1027,
	70, 1167, 1746, 379, 353, 1175, 1252, 1053, 1307, 1187,
	410, 1188, 1299, 1300, 1301, 1293, 1294, 1295, 1296, 1298,
	558, 377, 84, 1147, 84, 84, 84, 1658, 961, 84,
	1777, 592, 1784, 61, 354, 899, 1624, 1623, 84, 616,
	1747, 431, 1612, 1349, 614, 84, 1151, 84, 355, 1786,
	1597, 1186, 1183, 1006, 1301, 1293, 1294, 1295, 1296, 1298,
	1215, 962, 959, 411, 1308, 432, 1793, 783, 310, 777,
	1250, 1518, 1382, 805, 1255, 1510, 615, 588, 1242, 1719,
	431, 1148, 1212, 769, 1214, 641, 1189, 1613, 1200, 1230,
	1201, 807, 1474, 1203, 1202, 1521, 1159, 1208, 1158, 1207,
	248, 1154, 1520, 1564, 1233, 1405, 1511, 1404, 662, 657,
	1179, 310, 806, 1260, 1408, 388, 948, 1262, 964, 1179,
	1231, 253, 1268, 1221, 50, 1220, 249, 950, 324, 1272,
	1273, 1598, 1241, 949, 951, 1302, 1299, 1300, 1301, 1293,
	1294, 1295, 1296, 1298, 1226, 338, 614, 1190, 1792, 250,
	1251, 1517, 1510, 645, 1504, 337, 375, 1253, 1246, 310,
	1248, 1317, 1502, 1570, 252, 812, 613, 1475, 423, 307,
	1401, 380, 1330, 1476, 270, 270, 1224, 958, 84, 1232,
	1095, 1673, 1519, 1511, 643, 1596, 1506, 1216, 1507, 1322,
	1323, 1230, 614, 1277, 1353, 644, 1423, 1287, 1256, 973,
	1113, 408, 1505, 406, 405, 84, 1233, 258, 324, 326,
	822, 270, 1509, 424, 1571, 404, 1228, 403, 402, 1512,
	399, 1374, 1231, 336, 1325, 1326, 1327, 860, 316, 761,
	84, 1361, 84, 1363, 84, 1094, 1229, 1344, 84, 326,
	1500, 1362, 1351, 1360, 1348, 1217, 84, 251, 1008, 84,
	326, 326, 326, 1004, 569, 84, 676, 946, 579, 84,
	576, 84, 571, 1506, 562, 1507, 823, 1365, 613, 1414,
	1368, 1167, 1375, 559, 1508, 591, 1441, 1403, 782, 1373,
	1406, 1232, 1631, 434, 326, 320, 677, 1376, 254, 1509,
	1014, 633, 1398, 633, 1393, 1771, 1512, 1391, 395, 665,
	678, 1633, 84, 918, 3, 1430, 1413, 1385, 1387, 1388,
	1437, 1438, 1439, 270, 613, 633, 270, 270, 270, 270,
	270, 805, 270, 902, 1411, 1412, 270, 1407, 1426, 917,
	902, 258, 1370, 805, 1641, 592, 915, 780, 1685, 807,
	1434, 808, 809, 810, 811, 813, 1015, 1712, 435, 286,
	321, 1508, 1402, 1448, 438, 316, 1704, 930, 801, 799,
	806, 244, 1479, 592, 1452, 329, 936, 84, 84, 84,
	592, 396, 806, 1489, 637, 84, 84, 591, 584, 955,
	1790, 84, 1791, 84, 1481, 84, 84, 84, 84, 1292,
	805, 1515, 1516, 84, 289, 290, 1482, 255, 1113, 1113,
	985, 984, 592, 1494, 1389, 1380, 1337, 324, 1193, 1141,
	324, 1495, 1138, 1137, 1499, 84, 84, 1089, 986, 1757,
	1584, 1440, 1218, 591, 627, 84, 84, 987, 1546, 84,
	853, 295, 1546, 1618, 246, 760, 1553, 400, 84, 84,
	1545, 1547, 1590, 1736, 1545, 1547, 1558, 1280, 1113, 1113,
	1113, 1669, 1651, 1535, 1573, 326, 1559, 1560, 1552, 1093,
	1565, 858, 28, 1543, 461, 1226, 1529, 84, 1574, 907,
	1501, 1533, 616, 326, 1350, 999, 326, 923, 998, 1450,
	679, 666, 326, 655, 938, 939, 1454, 326, 484, 407,
	326, 649, 270, 270, 658, 1578, 614, 1101, 536, 486,
	589, 487, 592, 590, 884, 474, 587, 349, 1566, 615,
	588, 934, 1230, 1090, 1276, 856, 1595, 460, 1485, 466,
	465, 84, 1077, 84, 614, 84, 84, 1233, 371, 457,
	1568, 614, 1234, 84, 40, 385, 264, 1228, 265, 1176,
	1530, 1009, 787, 1231, 633, 801, 1525, 1359, 298, 1289,
	373, 1119, 84, 1111, 1534, 1607, 1109, 1229, 1100, 419,
	1610, 548, 935, 614, 397, 1021, 1608, 954, 1632, 443,
	1549, 1563, 795, 1750, 616, 84, 1642, 84, 319, 318,
	1113, 1113, 995, 394, 1546, 84, 324, 324, 1645, 642,
	324, 1627, 1628, 84, 978, 291, 1545, 1547, 1634, 1640,
	592, 1680, 1232, 1684, 1356, 1654, 1723, 57, 22, 1662,
	20, 615, 588, 19, 18, 16, 1657, 15, 613, 14,
	616, 21, 12, 11, 1668, 10, 9, 1113, 1113, 1113,
	1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113,
	1113, 1113, 1113, 1113, 1113, 1113, 613, 1113, 27, 26,
	84, 84, 25, 613, 84, 1562, 1678, 615, 588, 2,
	1, 1692, 84, 614, 0, 0, 0, 0, 84, 1694,
	1675, 0, 1696, 1701, 1546, 990, 84, 592, 310, 0,
	0, 1693, 676, 0, 0, 613, 1545, 1547, 1698, 326,
	907, 245, 1705, 1700, 1616, 1708, 0, 1695, 1062, 892,
	1707, 0, 84, 84, 84, 0, 84, 0, 1711, 0,
	0, 1060, 677, 0, 0, 0, 1626, 0, 326, 1721,
	270, 0, 0, 1730, 84, 0, 678, 591, 1727, 0,
	1728, 0, 0, 248, 0, 1732, 1650, 1729, 1546, 1733,
	0, 1725, 1731, 447, 447, 1714, 324, 84, 0, 0,
	1545, 1547, 592, 550, 253, 591, 1739, 1753, 1754, 249,
	0, 614, 591, 0, 0, 0, 1765, 0, 0, 0,
	1768, 1766, 84, 1058, 0, 1057, 1772, 0, 0, 1063,
	1775, 0, 250, 1776, 0, 613, 0, 0, 1773, 0,
	0, 1774, 0, 0, 591, 1788, 1787, 252, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 805,
	0, 0, 1794, 326, 1149, 1150, 1258, 1259, 0, 907,
	0, 0, 1155, 0, 0, 0, 0, 807, 1160, 1161,
	1163, 1165, 1166, 0, 1169, 1170, 0, 0, 614, 0,
	0, 0, 326, 0, 1181, 1113, 0, 0, 806, 0,
	0, 326, 0, 0, 821, 1059, 788, 790, 0, 0,
	326, 0, 1061, 797, 0, 1722, 1314, 1315, 1316, 0,
	0, 0, 0, 0, 0, 837, 838, 839, 840, 841,
	251, 990, 633, 613, 844, 0, 0, 990, 0, 0,
	0, 0, 0, 0, 591, 0, 805, 0, 824, 825,
	826, 812, 0, 0, 857, 0, 0, 0, 936, 0,
	0, 0, 0, 614, 807, 780, 833, 780, 270, 326,
	0, 254, 1219, 0, 616, 0, 0, 0, 0, 0,
	1113, 1222, 0, 805, 0, 806, 0, 0, 1239, 0,
	326, 821, 0, 0, 0, 805, 822, 0, 0, 0,
	0, 807, 616, 833, 0, 0, 0, 0, 0, 616,
	613, 615, 588, 807, 0, 0, 0, 0, 0, 0,
	0, 893, 806, 0, 0, 0, 0, 0, 821, 0,
	0, 0, 0, 0, 806, 0, 0, 0, 812, 615,
	588, 616, 591, 0, 0, 0, 615, 588, 1421, 1422,
	0, 0, 823, 0, 0, 834, 0, 1113, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 832, 0, 0,
	0, 0, 0, 0, 0, 812, 0, 829, 615, 588,
	0, 0, 0, 822, 0, 613, 0, 812, 0, 0,
	0, 0, 834, 0, 0, 1455, 1456, 1457, 1458, 1459,
	1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469,
	1470, 1471, 1472, 1473, 829, 1477, 0, 0, 0, 591,
	822, 801, 0, 817, 814, 815, 816, 808, 809, 810,
	811, 813, 822, 0, 0, 0, 0, 0, 0, 823,
	0, 616, 0, 0, 0, 0, 0, 0, 326, 0,
	831, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 462,
	38, 0, 0, 1390, 0, 907, 823, 780, 615, 588,
	0, 1397, 0, 0, 0, 0, 0, 831, 823, 326,
	0, 0, 326, 0, 591, 0, 0, 0, 1239, 0,
	38, 0, 1416, 830, 1239, 0, 818, 819, 820, 0,
	817, 814, 815, 816, 808, 809, 810, 811, 813, 0,
	303, 0, 0, 311, 0, 0, 0, 0, 0, 0,
	38, 0, 0, 0, 0, 0, 0, 0, 0, 616,
	830, 0, 311, 0, 0, 1445, 0, 817, 814, 815,
	816, 808, 809, 810, 811, 813, 0, 0, 0, 0,
	814, 815, 816, 808, 809, 810, 811, 813, 0, 0,
	0, 0, 0, 0, 0, 0, 615, 588, 447, 0,
	0, 0, 0, 1030, 1031, 1032, 1033, 1034, 1035, 1036,
	1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046,
	1047, 1048, 1049, 1050, 1051, 0, 0, 0, 0, 271,
	1497, 1498, 907, 1615, 0, 0, 616, 0, 801, 801,
	0, 0, 0, 284, 1523, 0, 1524, 0, 326, 1526,
	1527, 1528, 0, 0, 0, 0, 326, 0, 1099, 0,
	1110, 0, 1120, 1122, 1127, 1130, 1131, 1132, 0, 0,
	0, 0, 0, 615, 588, 0, 1542, 273, 1551, 907,
	1542, 0, 278, 279, 0, 285, 0, 0, 326, 326,
	0, 550, 326, 0, 0, 0, 0, 272, 274, 0,
	0, 801, 1239, 0, 0, 0, 0, 0, 0, 0,
	0, 616, 0, 0, 0, 0, 0, 0, 1672, 0,
	1174, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1591, 0, 0, 0, 0, 275, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 276, 277, 0, 615, 588,
	0, 0, 805, 0, 824, 825, 826, 0, 0, 0,
	280, 1199, 0, 0, 827, 0, 0, 0, 0, 0,
	807, 0, 833, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 907, 0, 1609, 0, 270, 1611,
	0, 806, 0, 0, 0, 1713, 326, 821, 0, 0,
	0, 0, 303, 0, 0, 0, 0, 797, 0, 0,
	0, 0, 0, 0, 0, 801, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1542, 0, 0, 0, 0, 0, 326, 0,
	1653, 0, 0, 0, 812, 0, 0, 1244, 326, 0,
	0, 1249, 0, 0, 281, 0, 801, 282, 0, 0,
	0, 834, 283, 0, 0, 0, 0, 0, 0, 0,
	1263, 0, 0, 832, 0, 0, 0, 0, 0, 1271,
	0, 0, 0, 829, 0, 0, 0, 1279, 0, 822,
	0, 1284, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 828, 844, 1686, 1687, 0, 0, 1691, 1127, 1127,
	1127, 0, 1542, 303, 0, 270, 303, 303, 0, 0,
	0, 1551, 0, 0, 0, 0, 0, 0, 0, 801,
	1345, 0, 0, 0, 0, 823, 0, 0, 0, 843,
	0, 1352, 0, 847, 0, 0, 831, 0, 0, 0,
	0, 0, 0, 0, 0, 1720, 801, 326, 447, 270,
	0, 0, 0, 0, 0, 0, 0, 447, 0, 0,
	550, 0, 0, 0, 0, 0, 1542, 1653, 805, 0,
	824, 825, 826, 0, 0, 0, 0, 0, 0, 0,
	827, 0, 0, 0, 0, 0, 807, 0, 833, 830,
	326, 0, 818, 819, 820, 0, 817, 814, 815, 816,
	808, 809, 810, 811, 813, 0, 0, 806, 1144, 0,
	0, 0, 0, 821, 0, 801, 0, 1145, 1419, 0,
	1420, 0, 805, 0, 824, 825, 826, 0, 0, 0,
	0, 1425, 0, 0, 827, 38, 0, 38, 0, 0,
	807, 0, 833, 0, 1199, 0, 0, 0, 0, 0,
	38, 0, 0, 1442, 38, 0, 0, 0, 0, 0,
	812, 806, 1451, 0, 0, 1453, 0, 821, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 834, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 832,
	0, 0, 0, 0, 0, 0, 0, 1483, 1484, 829,
	0, 0, 0, 0, 0, 822, 1490, 1491, 1492, 0,
	0, 0, 0, 0, 812, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 828, 0, 0,
	0, 834, 0, 0, 0, 1292, 0, 1309, 1310, 1311,
	0, 0, 0, 832, 447, 0, 0, 1576, 0, 0,
	0, 0, 0, 829, 0, 0, 0, 0, 0, 822,
	0, 823, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 831, 0, 0, 0, 1557, 0, 0, 0,
	1306, 828, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1577, 0,
	0, 0, 1580, 1581, 0, 0, 0, 1583, 0, 0,
	0, 1585, 0, 0, 0, 823, 0, 0, 1589, 0,
	0, 0, 1592, 0, 0, 830, 831, 1297, 818, 819,
	820, 0, 817, 814, 815, 816, 808, 809, 810, 811,
	813, 0, 0, 0, 0, 0, 0, 0, 0, 1603,
	0, 0, 0, 1600, 0, 0, 1312, 0, 0, 0,
	0, 0, 0, 0, 0, 24, 0, 0, 0, 0,
	0, 0, 1307, 0, 1024, 42, 0, 0, 0, 830,
	0, 0, 818, 819, 820, 0, 817, 814, 815, 816,
	808, 809, 810, 811, 813, 1625, 0, 0, 0, 44,
	0, 0, 0, 1333, 1068, 0, 49, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1643,
	0, 0, 0, 0, 0, 33, 0, 0, 1308, 0,
	0, 0, 29, 0, 0, 45, 0, 0, 1656, 32,
	30, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1664, 1665, 0, 0, 0, 34, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1677, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1679,
	0, 0, 0, 0, 0, 1303, 1304, 1305, 311, 1302,
	1299, 1300, 1301, 1293, 1294, 1295, 1296, 1298, 0, 0,
	0, 550, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 31,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	47, 0, 0, 35, 0, 46, 0, 0, 0, 0,
	36, 0, 0, 56, 0, 0, 0, 0, 39, 41,
	0, 0, 0, 0, 0, 0, 0, 43, 0, 0,
	0, 0, 0, 0, 58, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 38, 48, 0, 0,
	0, 0, 0, 0, 0, 0, 1240, 0, 0, 1752,
	0, 59, 0, 0, 0, 0, 0, 0, 54, 0,
	0, 0, 1764, 1764, 55, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1068, 0, 0, 0, 0,
	0, 0, 0, 53, 0, 0, 1764, 0, 0, 843,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1764, 0, 0, 0, 0,
	0, 482, 471, 472, 469, 470, 458, 0, 0, 0,
	0, 0, 0, 86, 87, 0, 88, 843, 0, 0,
	0, 464, 0, 0, 0, 89, 90, 0, 511, 195,
	512, 91, 513, 514, 0, 92, 199, 200, 93, 479,
	497, 515, 516, 203, 0, 507, 0, 490, 0, 94,
	95, 96, 0, 97, 0, 98, 99, 0, 358, 100,
	1763, 0, 491, 493, 0, 492, 494, 102, 103, 104,
	105, 517, 106, 518, 519, 0, 107, 0, 108, 0,
	0, 0, 510, 110, 0, 111, 0, 0, 0, 463,
	112, 113, 498, 477, 0, 0, 114, 115, 520, 0,
	116, 0, 117, 0, 0, 359, 0, 118, 508, 0,
	212, 0, 119, 120, 504, 506, 0, 0, 121, 0,
	360, 122, 521, 522, 523, 1024, 489, 0, 1024, 123,
	362, 124, 125, 0, 0, 509, 363, 126, 0, 0,
	127, 0, 0, 128, 0, 129, 130, 131, 132, 133,
	365, 134, 135, 138, 136, 453, 137, 478, 505, 139,
	524, 140, 141, 0, 0, 0, 0, 0, 142, 222,
	366, 143, 367, 499, 144, 145, 0, 500, 146, 225,
	147, 0, 148, 149, 150, 525, 151, 152, 0, 154,
	155, 153, 156, 0, 157, 368, 158, 159, 467, 160,
	0, 161, 162, 163, 0, 228, 164, 165, 495, 166,
	167, 0, 168, 526, 230, 169, 0, 170, 171, 173,
	527, 172, 501, 0, 174, 0, 175, 176, 0, 233,
	528, 529, 0, 0, 177, 502, 503, 476, 178, 179,
	1762, 181, 0, 0, 182, 183, 184, 496, 0, 185,
	186, 187, 238, 530, 0, 188, 0, 0, 0, 0,
	189, 190, 191, 192, 604, 599, 621, 593, 612, 611,
	0, 38, 595, 594, 0, 450, 451, 623, 622, 0,
	0, 452, 0, 0, 459, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1024, 1024, 0, 617, 1024, 609,
	608, 0, 0, 0, 0, 0, 0, 0, 607, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 606, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 600, 601,
	602, 0, 620, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 610, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 605, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1635, 0, 0, 0,
	0, 597, 0, 0, 0, 0, 0, 0, 0, 603,
	598, 0, 0, 0, 0, 0, 625, 0, 0, 0,
	0, 0, 0, 596, 1024, 0, 618, 619, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 675, 0, 0, 0, 624,
	0, 0, 0, 0, 0, 0, 0, 86, 87, 680,
	88, 681, 682, 683, 684, 685, 686, 687, 688, 89,
	90, 193, 194, 195, 196, 91, 197, 198, 689, 92,
	199, 200, 93, 690, 691, 201, 202, 203, 692, 204,
	693, 357, 694, 94, 95, 96, 843, 97, 695, 98,
	99, 696, 358, 100, 101, 697, 698, 699, 700, 701,
	702, 102, 103, 104, 105, 205, 106, 206, 207, 703,
	107, 704, 108, 705, 706, 707, 109, 110, 708, 111,
	709, 0, 710, 208, 112, 113, 209, 711, 712, 713,
	114, 115, 210, 0, 116, 714, 117, 715, 716, 359,
	717, 118, 211, 718, 212, 719, 119, 120, 213, 214,
	720, 721, 121, 722, 360, 122, 215, 216, 217, 723,
	218, 724, 361, 123, 362, 124, 125, 725, 726, 219,
	363, 126, 364, 727, 127, 728, 729, 128, 0, 129,
	130, 131, 132, 133, 365, 134, 135, 138, 136, 730,
	137, 731, 220, 139, 221, 140, 141, 732, 733, 734,
	735, 736, 142, 222, 366, 143, 367, 223, 144, 145,
	737, 224, 146, 225, 147, 738, 148, 149, 150, 226,
	151, 152, 739, 154, 155, 153, 156, 740, 157, 368,
	158, 159, 227, 160, 0, 161, 162, 163, 741, 228,
	164, 165, 742, 166, 167, 369, 168, 229, 230, 169,
	743, 170, 171, 173, 231, 172, 232, 744, 174, 745,
	175, 176, 746, 233, 234, 235, 747, 748, 177, 236,
	237, 749, 178, 179, 180, 181, 750, 751, 182, 183,
	184, 752, 753, 185, 186, 187, 238, 239, 754, 188,
	755, 756, 757, 758, 189, 190, 191, 192, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 675, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1415, 86, 87, 680, 88, 681,
	682, 683, 684, 685, 686, 687, 688, 89, 90, 193,
	194, 195, 196, 91, 197, 198, 689, 92, 199, 200,
	93, 690, 691, 201, 202, 203, 692, 204, 693, 357,
	694, 94, 95, 96, 0, 97, 695, 98, 99, 696,
	358, 100, 101, 697, 698, 699, 700, 701, 702, 102,
	103, 104, 105, 205, 106, 206, 207, 703, 107, 704,
	108, 705, 706, 707, 109, 110, 708, 111, 709, 0,
	710, 208, 112, 113, 209, 711, 712, 713, 114, 115,
	210, 0, 116, 714, 117, 715, 716, 359, 717, 118,
	211, 718, 212, 719, 119, 120, 213, 214, 720, 721,
	121, 722, 360, 122, 215, 216, 217, 723, 218, 724,
	361, 123, 362, 124, 125, 725, 726, 219, 363, 126,
	364, 727, 127, 728, 729, 128, 0, 129, 130, 131,
	132, 133, 365, 134, 135, 138, 136, 730, 137, 731,
	220, 139, 221, 140, 141, 732, 733, 734, 735, 736,
	142, 222, 366, 143, 367, 223, 144, 145, 737, 224,
	146, 225, 147, 738, 148, 149, 150, 226, 151, 152,
	739, 154, 155, 153, 156, 740, 157, 368, 158, 159,
	227, 160, 0, 161, 162, 163, 741, 228, 164, 165,
	742, 166, 167, 369, 168, 229, 230, 169, 743, 170,
	171, 173, 231, 172, 232, 744, 174, 745, 175, 176,
	746, 233, 234, 235, 747, 748, 177, 236, 237, 749,
	178, 179, 180, 181, 750, 751, 182, 183, 184, 752,
	753, 185, 186, 187, 238, 239, 754, 188, 755, 756,
	757, 758, 189, 190, 191, 192, 0, 0, 675, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 895,
	86, 87, 680, 88, 681, 682, 683, 684, 685, 686,
	687, 688, 89, 90, 193, 194, 195, 196, 91, 197,
	198, 689, 92, 199, 200, 93, 690, 691, 201, 202,
	203, 692, 204, 693, 357, 694, 94, 95, 96, 0,
	97, 695, 98, 99, 696, 358, 100, 101, 697, 698,
	699, 700, 701, 702, 102, 103, 104, 105, 205, 106,
	206, 207, 703, 107, 704, 108, 705, 706, 707, 109,
	110, 708, 111, 709, 0, 710, 208, 112, 113, 209,
	711, 712, 713, 114, 115, 210, 0, 116, 714, 117,
	715, 716, 359, 717, 118, 211, 718, 212, 719, 119,
	120, 213, 214, 720, 721, 121, 722, 360, 122, 215,
	216, 217, 723, 218, 724, 361, 123, 362, 124, 125,
	725, 726, 219, 363, 126, 364, 727, 127, 728, 729,
	128, 0, 129, 130, 131, 132, 133, 365, 134, 135,
	138, 136, 730, 137, 731, 220, 139, 221, 140, 141,
	732, 733, 734, 735, 736, 142, 222, 366, 143, 367,
	223, 144, 145, 737, 224, 146, 225, 147, 738, 148,
	149, 150, 226, 151, 152, 739, 154, 155, 153, 156,
	740, 157, 368, 158, 159, 227, 160, 0, 161, 162,
	163, 741, 228, 164, 165, 742, 166, 167, 369, 168,
	229, 230, 169, 743, 170, 171, 173, 231, 172, 232,
	744, 174, 745, 175, 176, 746, 233, 234, 235, 747,
	748, 177, 236, 237, 749, 178, 179, 180, 181, 750,
	751, 182, 183, 184, 752, 753, 185, 186, 187, 238,
	239, 754, 188, 755, 756, 757, 758, 189, 190, 191,
	192, 482, 471, 472, 469, 470, 458, 0, 0, 0,
	0, 0, 0, 86, 87, 1085, 88, 0, 0, 0,
	0, 464, 0, 0, 0, 89, 90, 193, 511, 195,
	512, 91, 513, 514, 0, 92, 199, 200, 93, 479,
	497, 515, 516, 203, 0, 507, 0, 490, 0, 94,
	95, 96, 0, 97, 0, 98, 99, 0, 358, 100,
	101, 0, 491, 493, 0, 492, 494, 102, 103, 104,
	105, 517, 106, 518, 519, 0, 107, 0, 108, 0,
	1086, 0, 510, 110, 0, 111, 0, 0, 0, 463,
	112, 113, 498, 477, 0, 0, 114, 115, 520, 0,
	116, 0, 117, 0, 0, 359, 0, 118, 508, 0,
	212, 0, 119, 120, 504, 506, 0, 0, 121, 0,
	360, 122, 521, 522, 523, 0, 489, 0, 361, 123,
	362, 124, 125, 0, 0, 509, 363, 126, 364, 0,
	127, 0, 0, 128, 0, 129, 130, 131, 132, 133,
	365, 134, 135, 138, 136, 453, 137, 478, 505, 139,
	524, 140, 141, 0, 0, 0, 0, 0, 142, 222,
	366, 143, 367, 499, 144, 145, 0, 500, 146, 225,
	147, 0, 148, 149, 150, 525, 151, 152, 0, 154,
	155, 153, 156, 0, 157, 368, 158, 159, 467, 160,
	0, 161, 162, 163, 0, 228, 164, 165, 495, 166,
	167, 369, 168, 526, 230, 169, 0, 170, 171, 173,
	527, 172, 501, 0, 174, 0, 175, 176, 0, 233,
	528, 529, 0, 0, 177, 502, 503, 476, 178, 179,
	180, 181, 0, 0, 182, 183, 184, 496, 0, 185,
	186, 187, 238, 530, 1084, 188, 0, 0, 0, 0,
	189, 190, 191, 192, 454, 0, 0, 482, 471, 472,
	469, 470, 458, 0, 0, 450, 451, 1087, 0, 86,
	87, 452, 88, 0, 459, 1082, 0, 464, 0, 0,
	0, 89, 90, 193, 511, 195, 512, 91, 513, 514,
	0, 92, 199, 200, 93, 479, 497, 515, 516, 203,
	0, 507, 0, 490, 0, 94, 95, 96, 0, 97,
	0, 98, 99, 0, 358, 100, 101, 0, 491, 493,
	0, 492, 494, 102, 103, 104, 105, 517, 106, 518,
	519, 551, 107, 0, 108, 0, 0, 0, 510, 110,
	0, 111, 0, 0, 0, 463, 112, 113, 498, 477,
	0, 0, 114, 115, 520, 0, 116, 0, 117, 0,
	0, 359, 0, 118, 508, 0, 212, 0, 119, 120,
	504, 506, 0, 0, 121, 0, 360, 122, 521, 522,
	523, 0, 489, 0, 361, 123, 362, 124, 125, 0,
	0, 509, 363, 126, 364, 0, 127, 0, 0, 128,
	0, 129, 130, 131, 132, 133, 365, 134, 135, 138,
	136, 453, 137, 478, 505, 139, 524, 140, 141, 0,
	0, 0, 0, 0, 142, 222, 366, 143, 367, 499,
	144, 145, 0, 500, 146, 225, 147, 0, 148, 149,
	150, 525, 151, 152, 0, 154, 155, 153, 156, 0,
	157, 368, 158, 159, 467, 160, 0, 161, 162, 163,
	56, 228, 164, 165, 495, 166, 167, 369, 168, 526,
	230, 169, 0, 170, 171, 173, 527, 172, 501, 0,
	174, 58, 175, 176, 0, 233, 528, 529, 0, 0,
	177, 502, 503, 476, 178, 179, 180, 181, 0, 0,
	182, 183, 184, 496, 0, 185, 186, 187, 356, 530,
	0, 188, 0, 0, 0, 54, 189, 190, 191, 192,
	454, 55, 0, 482, 471, 472, 469, 470, 458, 0,
	0, 450, 451, 0, 0, 86, 87, 452, 88, 0,
	459, 0, 0, 464, 0, 0, 0, 89, 90, 193,
	511, 195, 512, 91, 513, 514, 0, 92, 199, 200,
	93, 479, 497, 515, 516, 203, 0, 507, 0, 490,
	0, 94, 95, 96, 0, 97, 0, 98, 99, 0,
	358, 100, 101, 0, 491, 493, 0, 492, 494, 102,
	103, 104, 105, 517, 106, 518, 519, 0, 107, 0,
	108, 0, 0, 0, 510, 110, 0, 111, 0, 0,
	0, 463, 112, 113, 498, 477, 0, 0, 114, 115,
	520, 0, 116, 0, 117, 0, 0, 359, 0, 118,
	508, 0, 212, 0, 119, 120, 504, 506, 0, 0,
	121, 0, 360, 122, 521, 522, 523, 0, 489, 0,
	361, 123, 362, 124, 125, 0, 0, 509, 363, 126,
	364, 0, 127, 0, 0, 128, 0, 129, 130, 131,
	132, 133, 365, 134, 135, 138, 136, 453, 137, 478,
	505, 139, 524, 140, 141, 0, 0, 0, 0, 0,
	142, 222, 366, 143, 367, 499, 144, 145, 0, 500,
	146, 225, 147, 0, 148, 149, 150, 525, 151, 152,
	0, 154, 155, 153, 156, 0, 157, 368, 158, 159,
	467, 160, 0, 161, 162, 163, 56, 228, 164, 165,
	495, 166, 167, 369, 168, 526, 230, 169, 0, 170,
	171, 173, 527, 172, 501, 0, 174, 58, 175, 176,
	0, 233, 528, 529, 0, 0, 177, 502, 503, 476,
	178, 179, 180, 181, 0, 0, 182, 183, 184, 496,
	0, 185, 186, 187, 356, 530, 0, 188, 0, 0,
	0, 54, 189, 190, 191, 192, 454, 55, 0, 482,
	471, 472, 469, 470, 458, 0, 0, 450, 451, 0,
	0, 86, 87, 452, 88, 0, 459, 0, 0, 464,
	0, 0, 0, 89, 90, 193, 511, 195, 512, 91,
	513, 514, 1123, 92, 199, 200, 93, 479, 497, 515,
	516, 203, 0, 507, 0, 490, 0, 94, 95, 96,
	0, 97, 0, 98, 99, 0, 358, 100, 101, 0,
	491, 493, 0, 492, 494, 102, 103, 104, 105, 517,
	106, 518, 519, 0, 107, 0, 108, 0, 0, 0,
	510, 110, 0, 111, 0, 0, 0, 463, 112, 113,
	498, 477, 0, 0, 114, 115, 520, 0, 116, 0,
	117, 0, 1128, 359, 0, 118, 508, 0, 212, 0,
	119, 120, 504, 506, 0, 0, 121, 0, 360, 122,
	521, 522, 523, 0, 489, 0, 361, 123, 362, 124,
	125, 0, 1124, 509, 363, 126, 364, 0, 127, 0,
	0, 128, 0, 129, 130, 131, 132, 133, 365, 134,
	135, 138, 136, 453, 137, 478, 505, 139, 524, 140,
	141, 0, 0, 0, 0, 0, 142, 222, 366, 143,
	367, 499, 144, 145, 0, 500, 146, 225, 147, 0,
	148, 149, 150, 525, 151, 152, 0, 154, 155, 153,
	156, 0, 157, 368, 158, 159, 467, 160, 0, 161,
	162, 163, 0, 228, 164, 165, 495, 166, 167, 369,
	168, 526, 230, 169, 0, 170, 171, 173, 527, 172,
	501, 0, 174, 0, 175, 176, 0, 233, 528, 529,
	0, 1125, 177, 502, 503, 476, 178, 179, 180, 181,
	0, 0, 182, 183, 184, 496, 0, 185, 186, 187,
	238, 530, 0, 188, 0, 0, 0, 0, 189, 190,
	191, 192, 454, 482, 471, 472, 469, 470, 458, 0,
	0, 0, 0, 450, 451, 86, 87, 0, 88, 452,
	0, 0, 459, 464, 0, 0, 0, 89, 90, 193,
	511, 195, 512, 91, 513, 514, 0, 92, 199, 200,
	93, 479, 497, 515, 516, 203, 0, 507, 0, 490,
	0, 94, 95, 96, 0, 97, 0, 98, 99, 0,
	358, 100, 101, 0, 491, 493, 0, 492, 494, 102,
	103, 104, 105, 517, 106, 518, 519, 0, 107, 0,
	108, 0, 0, 0, 510, 110, 0, 111, 0, 0,
	0, 463, 112, 113, 498, 477, 0, 0, 114, 115,
	520, 0, 116, 0, 117, 0, 0, 359, 0, 118,
	508, 0, 212, 0, 119, 120, 504, 506, 0, 0,
	121, 0, 360, 122, 521, 522, 523, 0, 489, 0,
	361, 123, 362, 124, 125, 0, 0, 509, 363, 126,
	364, 0, 127, 0, 0, 128, 0, 129, 130, 131,
	132, 133, 365, 134, 135, 138, 136, 453, 137, 478,
	505, 139, 524, 140, 141, 0, 0, 0, 0, 0,
	142, 222, 366, 143, 367, 499, 144, 145, 0, 500,
	146, 225, 147, 0, 148, 149, 150, 525, 151, 152,
	0, 154, 155, 153, 156, 0, 157, 368, 158, 159,
	467, 160, 0, 161, 162, 163, 0, 228, 164, 165,
	495, 166, 167, 369, 168, 526, 230, 169, 0, 170,
	171, 173, 527, 172, 501, 0, 174, 0, 175, 176,
	0, 233, 528, 529, 0, 0, 177, 502, 503, 476,
	178, 179, 180, 181, 0, 0, 182, 183, 184, 496,
	0, 185, 186, 187, 238, 530, 0, 188, 0, 0,
	0, 0, 189, 190, 191, 192, 454, 0, 0, 482,
	471, 472, 469, 470, 458, 0, 0, 450, 451, 0,
	0, 86, 87, 452, 88, 0, 459, 1480, 0, 464,
	0, 0, 0, 89, 90, 193, 511, 195, 512, 91,
	513, 514, 0, 92, 199, 200, 93, 479, 497, 515,
	516, 203, 0, 507, 0, 490, 0, 94, 95, 96,
	0, 97, 0, 98, 99, 0, 358, 100, 101, 0,
	491, 493, 0, 492, 494, 102, 103, 104, 105, 517,
	106, 518, 519, 0, 107, 0, 108, 0, 0, 0,
	510, 110, 0, 111, 0, 0, 0, 463, 112, 113,
	498, 477, 0, 0, 114, 115, 520, 0, 116, 0,
	117, 0, 0, 359, 0, 118, 508, 0, 212, 0,
	119, 120, 504, 506, 0, 0, 121, 0, 360, 122,
	521, 522, 523, 0, 489, 0, 361, 123, 362, 124,
	125, 0, 0, 509, 363, 126, 364, 0, 127, 0,
	0, 128, 0, 129, 130, 131, 132, 133, 365, 134,
	135, 138, 136, 453, 137, 478, 505, 139, 524, 140,
	141, 0, 0, 0, 0, 0, 142, 222, 366, 143,
	367, 499, 144, 145, 0, 500, 146, 225, 147, 0,
	148, 149, 150, 525, 151, 152, 0, 154, 155, 153,
	156, 0, 157, 368, 158, 159, 467, 160, 0, 161,
	162, 163, 0, 228, 164, 165, 495, 166, 167, 369,
	168, 526, 230, 169, 0, 170, 171, 173, 527, 172,
	501, 0, 174, 0, 175, 176, 0, 233, 528, 529,
	0, 0, 177, 502, 503, 476, 178, 179, 180, 181,
	0, 0, 182, 183, 184, 496, 0, 185, 186, 187,
	238, 530, 0, 188, 0, 0, 0, 0, 189, 190,
	191, 192, 454, 0, 0, 482, 471, 472, 469, 470,
	458, 0, 0, 450, 451, 0, 0, 86, 87, 452,
	88, 0, 459, 1431, 0, 464, 0, 0, 0, 89,
	90, 193, 511, 195, 512, 91, 513, 514, 0, 92,
	199, 200, 93, 479, 497, 515, 516, 203, 0, 507,
	0, 490, 0, 94, 95, 96, 0, 97, 0, 98,
	99, 0, 358, 100, 101, 0, 491, 493, 0, 492,
	494, 102, 103, 104, 105, 517, 106, 518, 519, 0,
	107, 0, 108, 0, 0, 0, 510, 110, 0, 111,
	0, 0, 0, 463, 112, 113, 498, 477, 0, 0,
	114, 115, 520, 0, 116, 0, 117, 0, 0, 359,
	0, 118, 508, 0, 212, 0, 119, 120, 504, 506,
	0, 0, 121, 0, 360, 122, 521, 522, 523, 0,
	489, 0, 361, 123, 362, 124, 125, 0, 0, 509,
	363, 126, 364, 0, 127, 0, 0, 128, 0, 129,
	130, 131, 132, 133, 365, 134, 135, 138, 136, 453,
	137, 478, 505, 139, 524, 140, 141, 0, 0, 0,
	0, 0, 142, 222, 366, 143, 367, 499, 144, 145,
	0, 500, 146, 225, 147, 0, 148, 149, 150, 525,
	151, 152, 0, 154, 155, 153, 156, 0, 157, 368,
	158, 159, 467, 160, 0, 161, 162, 163, 0, 228,
	164, 165, 495, 166, 167, 369, 168, 526, 230, 169,
	0, 170, 171, 173, 527, 172, 501, 0, 174, 0,
	175, 176, 0, 233, 528, 529, 0, 0, 177, 502,
	503, 476, 178, 179, 180, 181, 0, 0, 182, 183,
	184, 496, 0, 185, 186, 187, 238, 530, 0, 188,
	0, 0, 0, 0, 189, 190, 191, 192, 454, 0,
	0, 482, 471, 472, 469, 470, 458, 0, 0, 450,
	451, 0, 0, 86, 87, 452, 88, 0, 459, 1081,
	0, 464, 0, 0, 0, 89, 90, 193, 511, 195,
	512, 91, 513, 514, 0, 92, 199, 200, 93, 479,
	497, 515, 516, 203, 0, 507, 0, 490, 0, 94,
	95, 96, 0, 97, 0, 98, 99, 0, 358, 100,
	101, 0, 491, 493, 0, 492, 494, 102, 103, 104,
	105, 517, 106, 518, 519, 0, 107, 0, 108, 0,
	0, 0, 510, 110, 0, 111, 0, 0, 0, 463,
	112, 113, 498, 477, 0, 0, 114, 115, 520, 0,
	116, 0, 117, 0, 0, 359, 0, 118, 508, 0,
	212, 0, 119, 120, 504, 506, 0, 0, 121, 0,
	360, 122, 521, 522, 523, 0, 489, 0, 361, 123,
	362, 124, 125, 0, 0, 509, 363, 126, 364, 0,
	127, 0, 0, 128, 0, 129, 130, 131, 132, 133,
	365, 134, 135, 138, 136, 453, 137, 478, 505, 139,
	524, 140, 141, 0, 0, 0, 0, 0, 142, 222,
	366, 143, 367, 499, 144, 145, 0, 500, 146, 225,
	147, 0, 148, 149, 150, 525, 151, 152, 0, 154,
	155, 153, 156, 0, 157, 368, 158, 159, 467, 160,
	0, 161, 162, 163, 0, 228, 164, 165, 495, 166,
	167, 369, 168, 526, 230, 169, 0, 170, 171, 173,
	527, 172, 501, 0, 174, 0, 175, 176, 0, 233,
	528, 529, 0, 0, 177, 502, 503, 476, 178, 179,
	180, 181, 0, 0, 182, 183, 184, 496, 0, 185,
	186, 187, 238, 530, 0, 188, 0, 0, 0, 0,
	189, 190, 191, 192, 454, 482, 471, 472, 469, 470,
	458, 0, 0, 0, 0, 450, 451, 86, 87, 0,
	88, 452, 849, 1078, 459, 464, 0, 0, 0, 89,
	90, 193, 511, 195, 512, 91, 513, 514, 0, 92,
	199, 200, 93, 479, 497, 515, 516, 203, 0, 507,
	0, 490, 0, 94, 95, 96, 0, 97, 0, 98,
	99, 0, 358, 100, 101, 0, 491, 493, 0, 492,
	494, 102, 103, 104, 105, 517, 106, 518, 519, 0,
	107, 0, 108, 0, 0, 0, 510, 110, 0, 111,
	0, 0, 0, 463, 112, 113, 498, 477, 0, 0,
	114, 115, 520, 0, 116, 0, 117, 0, 0, 359,
	0, 118, 508, 0, 212, 0, 119, 120, 504, 506,
	0, 0, 121, 0, 360, 122, 521, 522, 523, 0,
	489, 0, 361, 123, 362, 124, 125, 0, 0, 509,
	363, 126, 364, 0, 127, 0, 0, 128, 0, 129,
	130, 131, 132, 133, 365, 134, 135, 138, 136, 453,
	137, 478, 505, 139, 524, 140, 141, 0, 0, 0,
	0, 0, 142, 222, 366, 143, 367, 499, 144, 145,
	0, 500, 146, 225, 147, 0, 148, 149, 150, 525,
	151, 152, 0, 154, 155, 153, 156, 0, 157, 368,
	158, 159, 467, 160, 0, 161, 162, 163, 0, 228,
	164, 165, 495, 166, 167, 369, 168, 526, 230, 169,
	0, 170, 171, 173, 527, 172, 501, 0, 174, 0,
	175, 176, 0, 233, 528, 529, 0, 0, 177, 502,
	503, 476, 178, 179, 180, 181, 0, 0, 182, 183,
	184, 496, 0, 185, 186, 187, 238, 530, 0, 188,
	0, 0, 0, 0, 189, 190, 191, 192, 454, 0,
	0, 482, 471, 472, 469, 470, 458, 0, 0, 450,
	451, 448, 0, 86, 87, 452, 88, 0, 459, 0,
	0, 464, 0, 0, 0, 89, 90, 193, 511, 195,
	512, 91, 513, 514, 0, 92, 199, 200, 93, 479,
	497, 515, 516, 203, 0, 507, 0, 490, 0, 94,
	95, 96, 0, 97, 0, 98, 99, 0, 358, 100,
	101, 0, 491, 493, 0, 492, 494, 102, 103, 104,
	105, 517, 106, 518, 519, 0, 107, 0, 108, 0,
	0, 0, 510, 110, 0, 111, 0, 0, 0, 463,
	112, 113, 498, 477, 0, 0, 114, 115, 520, 0,
	116, 0, 117, 0, 0, 359, 0, 118, 508, 0,
	212, 0, 119, 120, 504, 506, 0, 0, 121, 0,
	360, 122, 521, 522, 523, 0, 489, 0, 361, 123,
	362, 124, 125, 0, 0, 509, 363, 126, 364, 0,
	127, 0, 0, 128, 0, 129, 130, 131, 132, 133,
	365, 134, 135, 138, 136, 453, 137, 478, 505, 139,
	524, 140, 141, 0, 0, 0, 0, 0, 142, 222,
	366, 143, 367, 499, 144, 145, 0, 500, 146, 225,
	147, 0, 148, 149, 150, 525, 151, 152, 0, 154,
	155, 153, 156, 0, 157, 368, 158, 159, 467, 160,
	0, 161, 162, 163, 0, 228, 164, 165, 495, 166,
	167, 369, 168, 526, 230, 169, 0, 170, 171, 173,
	527, 172, 501, 0, 174, 0, 175, 176, 0, 233,
	528, 529, 0, 0, 177, 502, 503, 476, 178, 179,
	180, 181, 0, 0, 182, 183, 184, 496, 0, 185,
	186, 187, 238, 530, 1436, 188, 0, 0, 0, 0,
	189, 190, 191, 192, 454, 482, 471, 472, 469, 470,
	458, 0, 0, 0, 0, 450, 451, 86, 87, 0,
	88, 452, 0, 0, 459, 464, 0, 0, 0, 89,
	90, 193, 511, 195, 512, 91, 513, 514, 0, 92,
	199, 200, 93, 479, 497, 515, 516, 203, 0, 507,
	0, 490, 0, 94, 95, 96, 0, 97, 0, 98,
	99, 0, 358, 100, 101, 0, 491, 493, 0, 492,
	494, 102, 103, 104, 105, 517, 106, 518, 519, 551,
	107, 0, 108, 0, 0, 0, 510, 110, 0, 111,
	0, 0, 0, 463, 112, 113, 498, 477, 0, 0,
	114, 115, 520, 0, 116, 0, 117, 0, 0, 359,
	0, 118, 508, 0, 212, 0, 119, 120, 504, 506,
	0, 0, 121, 0, 360, 122, 521, 522, 523, 0,
	489, 0, 361, 123, 362, 124, 125, 0, 0, 509,
	363, 126, 364, 0, 127, 0, 0, 128, 0, 129,
	130, 131, 132, 133, 365, 134, 135, 138, 136, 453,
	137, 478, 505, 139, 524, 140, 141, 0, 0, 0,
	0, 0, 142, 222, 366, 143, 367, 499, 144, 145,
	0, 500, 146, 225, 147, 0, 148, 149, 150, 525,
	151, 152, 0, 154, 155, 153, 156, 0, 157, 368,
	158, 159, 467, 160, 0, 161, 162, 163, 0, 228,
	164, 165, 495, 166, 167, 369, 168, 526, 230, 169,
	0, 170, 171, 173, 527, 172, 501, 0, 174, 0,
	175, 176, 0, 233, 528, 529, 0, 0, 177, 502,
	503, 476, 178, 179, 180, 181, 0, 0, 182, 183,
	184, 496, 0, 185, 186, 187, 238, 530, 0, 188,
	0, 0, 0, 0, 189, 190, 191, 192, 454, 482,
	471, 472, 469, 470, 458, 0, 0, 0, 0, 450,
	451, 86, 87, 0, 88, 452, 0, 0, 459, 464,
	0, 0, 0, 89, 90, 193, 511, 195, 512, 91,
	513, 514, 0, 92, 199, 200, 93, 479, 497, 515,
	516, 203, 0, 507, 0, 490, 0, 94, 95, 96,
	0, 97, 0, 98, 99, 0, 358, 100, 101, 0,
	491, 493, 0, 492, 494, 102, 103, 104, 105, 517,
	106, 518, 519, 0, 107, 0, 108, 0, 0, 0,
	510, 110, 0, 111, 0, 0, 0, 463, 112, 113,
	498, 477, 0, 0, 114, 115, 520, 0, 116, 0,
	117, 0, 1128, 359, 0, 118, 508, 0, 212, 0,
	119, 120, 504, 506, 0, 0, 121, 0, 360, 122,
	521, 522, 523, 0, 489, 0, 361, 123, 362, 124,
	125, 0, 0, 509, 363, 126, 364, 0, 127, 0,
	0, 128, 0, 129, 130, 131, 132, 133, 365, 134,
	135, 138, 136, 453, 137, 478, 505, 139, 524, 140,
	141, 0, 0, 0, 0, 0, 142, 222, 366, 143,
	367, 499, 144, 145, 0, 500, 146, 225, 147, 0,
	148, 149, 150, 525, 151, 152, 0, 154, 155, 153,
	156, 0, 157, 368, 158, 159, 467, 160, 0, 161,
	162, 163, 0, 228, 164, 165, 495, 166, 167, 369,
	168, 526, 230, 169, 0, 170, 171, 173, 527, 172,
	501, 0, 174, 0, 175, 176, 0, 233, 528, 529,
	0, 0, 177, 502, 503, 476, 178, 179, 180, 181,
	0, 0, 182, 183, 184, 496, 0, 185, 186, 187,
	238, 530, 0, 188, 0, 0, 0, 0, 189, 190,
	191, 192, 454, 482, 471, 472, 469, 470, 458, 0,
	0, 0, 0, 450, 451, 86, 87, 789, 88, 452,
	0, 0, 459, 464, 0, 0, 0, 89, 90, 193,
	511, 195, 512, 91, 513, 514, 0, 92, 199, 200,
	93, 479, 497, 515, 516, 203, 0, 507, 0, 490,
	0, 94, 95, 96, 0, 97, 0, 98, 99, 0,
	358, 100, 101, 0, 491, 493, 0, 492, 494, 102,
	103, 104, 105, 517, 106, 518, 519, 0, 107, 0,
	108, 0, 0, 0, 510, 110, 0, 111, 0, 0,
	0, 463, 112, 113, 498, 477, 0, 0, 114, 115,
	520, 0, 116, 0, 117, 0, 0, 359, 0, 118,
	508, 0, 212, 0, 119, 120, 504, 506, 0, 0,
	121, 0, 360, 122, 521, 522, 523, 0, 489, 0,
	361, 123, 362, 124, 125, 0, 0, 509, 363, 126,
	364, 0, 127, 0, 0, 128, 0, 129, 130, 131,
	132, 133, 365, 134, 135, 138, 136, 453, 137, 478,
	505, 139, 524, 140, 141, 0, 0, 0, 0, 0,
	142, 222, 366, 143, 367, 499, 144, 145, 0, 500,
	146, 225, 147, 0, 148, 149, 150, 525, 151, 152,
	0, 154, 155, 153, 156, 0, 157, 368, 158, 159,
	467, 160, 0, 161, 162, 163, 0, 228, 164, 165,
	495, 166, 167, 369, 168, 526, 230, 169, 0, 170,
	171, 173, 527, 172, 501, 0, 174, 0, 175, 176,
	0, 233, 528, 529, 0, 0, 177, 502, 503, 476,
	178, 179, 180, 181, 0, 0, 182, 183, 184, 496,
	0, 185, 186, 187, 238, 530, 0, 188, 0, 0,
	0, 0, 189, 190, 191, 192, 454, 482, 471, 472,
	469, 470, 458, 0, 0, 0, 0, 450, 451, 86,
	87, 0, 88, 452, 0, 0, 459, 464, 0, 0,
	0, 89, 90, 193, 511, 195, 512, 91, 513, 514,
	0, 92, 199, 200, 93, 479, 497, 515, 516, 203,
	0, 507, 0, 490, 0, 94, 95, 96, 0, 97,
	0, 98, 99, 0, 358, 100, 1763, 0, 491, 493,
	0, 492, 494, 102, 103, 104, 105, 517, 106, 518,
	519, 0, 107, 0, 108, 0, 0, 0, 510, 110,
	0, 111, 0, 0, 0, 463, 112, 113, 498, 477,
	0, 0, 114, 115, 520, 0, 116, 0, 117, 0,
	0, 359, 0, 118, 508, 0, 212, 0, 119, 120,
	504, 506, 0, 0, 121, 0, 360, 122, 521, 522,
	523, 0, 489, 0, 361, 123, 362, 124, 125, 0,
	0, 509, 363, 126, 364, 0, 127, 0, 0, 128,
	0, 129, 130, 131, 132, 133, 365, 134, 135, 138,
	136, 453, 137, 478, 505, 139, 524, 140, 141, 0,
	0, 0, 0, 0, 142, 222, 366, 143, 367, 499,
	144, 145, 0, 500, 146, 225, 147, 0, 148, 149,
	150, 525, 151, 152, 0, 154, 155, 153, 156, 0,
	157, 368, 158, 159, 467, 160, 0, 161, 162, 163,
	0, 228, 164, 165, 495, 166, 167, 369, 168, 526,
	230, 169, 0, 170, 171, 173, 527, 172, 501, 0,
	174, 0, 175, 176, 0, 233, 528, 529, 0, 0,
	177, 502, 503, 476, 178, 179, 1762, 181, 0, 0,
	182, 183, 184, 496, 0, 185, 186, 187, 238, 530,
	0, 188, 0, 0, 0, 0, 189, 190, 191, 192,
	454, 482, 471, 472, 469, 470, 458, 0, 0, 0,
	0, 450, 451, 86, 87, 0, 88, 452, 0, 0,
	459, 464, 0, 0, 0, 89, 90, 1761, 511, 195,
	512, 91, 513, 514, 0, 92, 199, 200, 93, 479,
	497, 515, 516, 203, 0, 507, 0, 490, 0, 94,
	95, 96, 0, 97, 0, 98, 99, 0, 358, 100,
	1763, 0, 491, 493, 0, 492, 494, 102, 103, 104,
	105, 517, 106, 518, 519, 0, 107, 0, 108, 0,
	0, 0, 510, 110, 0, 111, 0, 0, 0, 463,
	112, 113, 498, 477, 0, 0, 114, 115, 520, 0,
	116, 0, 117, 0, 0, 359, 0, 118, 508, 0,
	212, 0, 119, 120, 504, 506, 0, 0, 121, 0,
	360, 122, 521, 522, 523, 0, 489, 0, 361, 123,
	362, 124, 125, 0, 0, 509, 363, 126, 364, 0,
	127, 0, 0, 128, 0, 129, 130, 131, 132, 133,
	365, 134, 135, 138, 136, 453, 137, 478, 505, 139,
	524, 140, 141, 0, 0, 0, 0, 0, 142, 222,
	366, 143, 367, 499, 144, 145, 0, 500, 146, 225,
	147, 0, 148, 149, 150, 525, 151, 152, 0, 154,
	155, 153, 156, 0, 157, 368, 158, 159, 467, 160,
	0, 161, 162, 163, 0, 228, 164, 165, 495, 166,
	167, 369, 168, 526, 230, 169, 0, 170, 171, 173,
	527, 172, 501, 0, 174, 0, 175, 176, 0, 233,
	528, 529, 0, 0, 177, 502, 503, 476, 178, 179,
	1762, 181, 0, 0, 182, 183, 184, 496, 0, 185,
	186, 187, 238, 530, 0, 188, 0, 0, 0, 0,
	189, 190, 191, 192, 454, 482, 471, 472, 469, 470,
	458, 0, 0, 0, 0, 450, 451, 86, 87, 0,
	88, 452, 0, 0, 459, 464, 0, 0, 0, 89,
	90, 193, 511, 195, 512, 91, 513, 514, 0, 92,
	199, 200, 93, 479, 497, 515, 516, 203, 0, 507,
	0, 490, 0, 94, 95, 96, 0, 97, 0, 98,
	99, 0, 358, 100, 101, 0, 491, 493, 0, 492,
	494, 102, 103, 104, 105, 517, 106, 518, 519, 0,
	107, 0, 108, 0, 0, 0, 510, 110, 0, 111,
	0, 0, 0, 463, 112, 113, 498, 477, 0, 0,
	114, 115, 520, 0, 116, 0, 117, 0, 0, 359,
	0, 118, 508, 0, 212, 0, 119, 120, 504, 506,
	0, 0, 121, 0, 360, 122, 521, 522, 523, 0,
	489, 0, 361, 123, 362, 124, 125, 0, 0, 509,
	363, 126, 364, 0, 127, 0, 0, 128, 0, 129,
	130, 131, 132, 133, 365, 134, 135, 138, 136, 453,
	137, 478, 505, 139, 524, 140, 141, 0, 0, 0,
	0, 0, 142, 222, 366, 143, 367, 499, 144, 145,
	0, 500, 146, 225, 147, 0, 148, 149, 150, 525,
	151, 152, 0, 154, 155, 153, 156, 0, 157, 368,
	158, 159, 467, 160, 0, 161, 162, 163, 0, 228,
	164, 165, 495, 166, 167, 369, 168, 526, 230, 169,
	0, 170, 171, 173, 527, 172, 501, 0, 174, 0,
	175, 176, 0, 233, 528, 529, 0, 0, 177, 502,
	503, 476, 178, 179, 180, 181, 0, 0, 182, 183,
	184, 496, 0, 185, 186, 187, 238, 530, 0, 188,
	0, 0, 0, 0, 189, 190, 191, 192, 454, 482,
	471, 472, 469, 470, 458, 0, 0, 0, 0, 450,
	451, 86, 87, 0, 88, 452, 0, 0, 459, 464,
	0, 0, 0, 89, 90, 193, 511, 195, 512, 91,
	513, 514, 0, 92, 199, 200, 93, 479, 497, 515,
	516, 203, 0, 507, 0, 490, 0, 94, 95, 96,
	0, 97, 0, 98, 99, 0, 358, 100, 101, 0,
	491, 493, 0, 492, 494, 102, 103, 104, 105, 517,
	106, 518, 519, 0, 107, 0, 108, 0, 0, 0,
	510, 110, 0, 111, 0, 0, 0, 463, 112, 113,
	498, 477, 0, 0, 114, 115, 520, 0, 116, 0,
	117, 0, 0, 359, 0, 118, 508, 0, 212, 0,
	119, 120, 504, 506, 0, 0, 121, 0, 360, 122,
	521, 522, 523, 0, 489, 0, 361, 123, 362, 124,
	125, 0, 0, 509, 363, 126, 364, 0, 127, 0,
	0, 128, 0, 129, 130, 131, 132, 133, 365, 134,
	135, 138, 136, 0, 137, 478, 505, 139, 524, 140,
	141, 0, 0, 0, 0, 0, 142, 222, 366, 143,
	367, 499, 144, 145, 0, 500, 146, 225, 147, 0,
	148, 149, 150, 525, 151, 152, 0, 154, 155, 153,
	156, 0, 157, 368, 158, 159, 1118, 160, 0, 161,
	162, 163, 0, 228, 164, 165, 495, 166, 167, 369,
	168, 526, 230, 169, 0, 170, 171, 173, 527, 172,
	501, 0, 174, 0, 175, 176, 0, 233, 528, 529,
	0, 0, 177, 502, 503, 476, 178, 179, 180, 181,
	0, 0, 182, 183, 184, 496, 0, 185, 186, 187,
	238, 530, 0, 188, 0, 0, 0, 0, 189, 190,
	191, 192, 0, 482, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1114, 1115, 86, 87, 0, 88, 1116,
	0, 0, 1117, 0, 0, 0, 0, 89, 90, 193,
	194, 195, 196, 91, 197, 198, 0, 92, 199, 200,
	93, 0, 497, 201, 202, 203, 0, 507, 0, 490,
	0, 94, 95, 96, 0, 97, 0, 98, 99, 0,
	358, 100, 101, 0, 491, 493, 0, 492, 494, 102,
	103, 104, 105, 205, 106, 206, 207, 0, 107, 0,
	108, 0, 0, 0, 109, 110, 0, 111, 0, 0,
	0, 208, 112, 113, 498, 0, 0, 0, 114, 115,
	210, 0, 116, 0, 117, 0, 0, 359, 0, 118,
	508, 0, 212, 0, 119, 120, 504, 506, 0, 0,
	121, 0, 360, 122, 215, 216, 217, 0, 218, 0,
	361, 123, 362, 124, 125, 0, 0, 509, 363, 126,
	364, 0, 127, 0, 0, 128, 0, 129, 130, 131,
	132, 133, 365, 134, 135, 138, 136, 0, 137, 0,
	505, 139, 221, 140, 141, 0, 0, 0, 0, 0,
	142, 222, 366, 143, 367, 499, 144, 145, 0, 500,
	146, 225, 147, 0, 148, 149, 150, 226, 151, 152,
	0, 154, 155, 153, 156, 0, 157, 368, 158, 159,
	227, 160, 0, 161, 162, 163, 0, 228, 164, 165,
	495, 166, 167, 369, 168, 229, 230, 169, 0, 170,
	171, 173, 231, 172, 501, 0, 174, 0, 175, 176,
	0, 233, 234, 235, 0, 0, 177, 502, 503, 0,
	178, 179, 180, 181, 0, 0, 182, 183, 184, 496,
	0, 185, 186, 187, 238, 239, 0, 188, 0, 0,
	0, 0, 189, 190, 191, 192, 352, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 87,
	0, 88, 0, 0, 0, 0, 1544, 0, 0, 0,
	89, 90, 193, 194, 195, 196, 91, 197, 198, 0,
	92, 199, 200, 93, 0, 0, 201, 202, 203, 0,
	204, 0, 357, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 358, 100, 101, 0, 0, 0, 0,
	0, 0, 102, 103, 104, 105, 205, 106, 206, 207,
	0, 107, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 208, 112, 113, 209, 0, 0,
	0, 114, 115, 210, 0, 116, 0, 117, 0, 0,
	359, 0, 118, 211, 0, 212, 0, 119, 120, 213,
	214, 0, 0, 121, 0, 360, 122, 215, 216, 217,
	0, 218, 0, 361, 123, 362, 124, 125, 0, 0,
	219, 363, 126, 364, 0, 127, 0, 0, 128, 0,
	129, 130, 131, 132, 133, 365, 134, 135, 138, 136,
	0, 137, 0, 220, 139, 221, 140, 141, 0, 0,
	0, 0, 0, 142, 222, 366, 143, 367, 223, 144,
	145, 0, 224, 146, 225, 147, 0, 148, 149, 150,
	226, 151, 152, 0, 154, 155, 153, 156, 0, 157,
	368, 158, 159, 227, 160, 0, 161, 162, 163, 56,
	228, 164, 165, 0, 166, 167, 369, 168, 229, 230,
	169, 0, 170, 171, 173, 231, 172, 232, 0, 174,
	58, 175, 176, 0, 233, 234, 235, 0, 0, 177,
	236, 237, 0, 178, 179, 180, 181, 0, 0, 182,
	183, 184, 0, 0, 185, 186, 187, 356, 239, 0,
	188, 0, 0, 0, 54, 189, 190, 191, 192, 0,
	55, 352, 660, 0, 661, 656, 651, 0, 0, 0,
	0, 0, 0, 86, 87, 0, 88, 0, 0, 53,
	0, 0, 0, 0, 0, 89, 90, 193, 194, 195,
	196, 91, 197, 198, 0, 92, 199, 200, 93, 0,
	0, 201, 202, 203, 0, 204, 0, 357, 0, 94,
	95, 96, 0, 97, 0, 98, 99, 0, 358, 100,
	101, 0, 0, 0, 0, 0, 0, 102, 103, 104,
	105, 205, 106, 206, 207, 664, 107, 0, 108, 0,
	0, 0, 109, 110, 0, 111, 0, 0, 0, 208,
	112, 113, 209, 653, 0, 0, 114, 115, 210, 0,
	116, 0, 117, 0, 0, 359, 0, 118, 211, 0,
	212, 0, 119, 120, 213, 214, 0, 0, 121, 0,
	360, 122, 215, 216, 217, 0, 218, 0, 361, 123,
	362, 124, 125, 0, 0, 219, 363, 126, 364, 0,
	127, 0, 0, 128, 0, 129, 130, 131, 132, 133,
	365, 134, 135, 138, 136, 0, 137, 0, 220, 139,
	221, 140, 141, 0, 654, 0, 0, 0, 142, 222,
	366, 143, 367, 223, 144, 145, 0, 224, 146, 225,
	147, 0, 148, 149, 150, 226, 151, 152, 0, 154,
	155, 153, 156, 0, 157, 368, 158, 159, 227, 160,
	0, 161, 162, 163, 0, 228, 164, 165, 0, 166,
	167, 369, 168, 229, 230, 169, 0, 170, 171, 173,
	231, 172, 232, 0, 174, 0, 175, 176, 0, 233,
	234, 235, 0, 0, 177, 236, 237, 652, 178, 179,
	180, 181, 0, 0, 182, 183, 184, 0, 0, 185,
	186, 187, 238, 239, 0, 188, 0, 0, 0, 0,
	189, 190, 191, 192, 0, 352, 660, 0, 661, 656,
	651, 0, 0, 0, 0, 662, 657, 86, 87, 0,
	88, 0, 0, 0, 0, 0, 0, 0, 0, 89,
	90, 193, 194, 195, 196, 91, 197, 198, 0, 92,
	199, 200, 93, 0, 0, 201, 202, 203, 0, 204,
	0, 357, 0, 94, 95, 96, 0, 97, 0, 98,
	99, 0, 358, 100, 101, 0, 0, 0, 0, 0,
	0, 102, 103, 104, 105, 205, 106, 206, 207, 647,
	107, 0, 108, 0, 0, 0, 109, 110, 0, 111,
	0, 0, 0, 208, 112, 113, 209, 653, 0, 0,
	114, 115, 210, 0, 116, 0, 117, 0, 0, 359,
	0, 118, 211, 0, 212, 0, 119, 120, 213, 214,
	0, 0, 121, 0, 360, 122, 215, 216, 217, 0,
	218, 0, 361, 123, 362, 124, 125, 0, 0, 219,
	363, 126, 364, 0, 127, 0, 0, 128, 0, 129,
	130, 131, 132, 133, 365, 134, 135, 138, 136, 0,
	137, 0, 220, 139, 221, 140, 141, 0, 654, 0,
	0, 0, 142, 222, 366, 143, 367, 223, 144, 145,
	0, 224, 146, 225, 147, 0, 148, 149, 150, 226,
	151, 152, 0, 154, 155, 153, 156, 0, 157, 368,
	158, 159, 227, 160, 0, 161, 162, 163, 0, 228,
	164, 165, 0, 166, 167, 369, 168, 229, 230, 169,
	0, 170, 171, 173, 231, 172, 232, 0, 174, 0,
	175, 176, 0, 233, 234, 235, 0, 0, 177, 236,
	237, 652, 178, 179, 180, 181, 0, 0, 182, 183,
	184, 0, 0, 185, 186, 187, 238, 239, 0, 188,
	0, 0, 0, 0, 189, 190, 191, 192, 0, 352,
	660, 0, 661, 656, 651, 0, 0, 0, 0, 662,
	657, 86, 87, 0, 88, 0, 0, 0, 0, 0,
	0, 0, 0, 89, 90, 193, 194, 195, 196, 91,
	197, 198, 0, 92, 199, 200, 93, 0, 0, 201,
	202, 203, 0, 204, 0, 357, 0, 94, 95, 96,
	0, 97, 0, 98, 99, 0, 358, 100, 101, 0,
	0, 0, 0, 0, 0, 102, 103, 104, 105, 205,
	106, 206, 207, 0, 107, 0, 108, 0, 0, 0,
	109, 110, 0, 111, 0, 0, 0, 208, 112, 113,
	209, 653, 0, 0, 114, 115, 210, 0, 116, 0,
	117, 0, 0, 359, 0, 118, 211, 0, 212, 0,
	119, 120, 213, 214, 0, 0, 121, 0, 360, 122,
	215, 216, 217, 0, 218, 0, 361, 123, 362, 124,
	125, 0, 0, 219, 363, 126, 364, 0, 127, 0,
	0, 128, 0, 129, 130, 131, 132, 133, 365, 134,
	135, 138, 136, 0, 137, 0, 220, 139, 221, 140,
	141, 0, 654, 0, 0, 0, 142, 222, 366, 143,
	367, 223, 144, 145, 0, 224, 146, 225, 147, 0,
	148, 149, 150, 226, 151, 152, 0, 154, 155, 153,
	156, 0, 157, 368, 158, 159, 227, 160, 0, 161,
	162, 163, 0, 228, 164, 165, 0, 166, 167, 369,
	168, 229, 230, 169, 0, 170, 171, 173, 231, 172,
	232, 0, 174, 0, 175, 176, 0, 233, 234, 235,
	0, 0, 177, 236, 237, 652, 178, 179, 180, 181,
	0, 0, 182, 183, 184, 0, 0, 185, 186, 187,
	238, 239, 83, 188, 0, 0, 0, 0, 189, 190,
	191, 192, 0, 0, 86, 87, 0, 88, 0, 0,
	0, 0, 0, 662, 657, 0, 89, 90, 193, 194,
	195, 196, 91, 197, 198, 0, 92, 199, 200, 93,
	0, 0, 201, 202, 203, 0, 204, 0, 0, 0,
	94, 95, 96, 0, 97, 0, 98, 99, 0, 0,
	100, 101, 0, 0, 0, 0, 0, 0, 102, 103,
	104, 105, 205, 106, 206, 207, 0, 107, 0, 108,
	0, 0, 0, 109, 110, 0, 111, 0, 0, 0,
	208, 112, 113, 209, 0, 0, 0, 114, 115, 210,
	0, 116, 0, 117, 0, 0, 0, 0, 118, 211,
	0, 212, 0, 119, 120, 213, 214, 0, 0, 121,
	0, 0, 122, 215, 216, 217, 0, 218, 0, 0,
	123, 0, 124, 125, 0, 0, 219, 0, 126, 0,
	0, 127, 0, 0, 128, 0, 129, 130, 131, 132,
	133, 0, 134, 135, 138, 136, 0, 137, 0, 220,
	139, 221, 140, 141, 0, 0, 325, 0, 0, 142,
	222, 0, 143, 0, 223, 144, 145, 0, 224, 146,
	225, 147, 0, 148, 149, 150, 226, 151, 152, 0,
	154, 155, 153, 156, 0, 157, 0, 158, 159, 227,
	160, 0, 161, 162, 163, 56, 228, 164, 165, 0,
	166, 167, 0, 168, 229, 230, 169, 0, 170, 171,
	173, 231, 172, 232, 0, 174, 58, 175, 176, 0,
	233, 234, 235, 0, 0, 177, 236, 237, 0, 178,
	179, 180, 181, 0, 0, 182, 183, 184, 0, 0,
	185, 186, 187, 356, 239, 0, 188, 0, 0, 0,
	54, 189, 190, 191, 192, 83, 55, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 87, 0,
	88, 0, 0, 0, 0, 1026, 0, 0, 0, 89,
	90, 193, 194, 195, 196, 91, 197, 198, 0, 92,
	199, 200, 93, 0, 0, 201, 202, 203, 0, 204,
	0, 0, 0, 94, 95, 96, 0, 97, 0, 98,
	99, 0, 0, 100, 101, 0, 0, 0, 0, 0,
	0, 102, 103, 104, 105, 205, 106, 206, 207, 0,
	107, 0, 108, 0, 0, 0, 109, 110, 0, 111,
	0, 0, 0, 208, 112, 113, 209, 0, 0, 0,
	114, 115, 210, 0, 116, 0, 117, 0, 0, 0,
	0, 118, 211, 0, 212, 0, 119, 120, 213, 214,
	0, 0, 121, 0, 0, 122, 215, 216, 217, 0,
	218, 0, 0, 123, 0, 124, 125, 0, 0, 219,
	0, 126, 0, 0, 127, 0, 0, 128, 0, 129,
	130, 131, 132, 133, 0, 134, 135, 138, 136, 0,
	137, 0, 220, 139, 221, 140, 141, 0, 0, 0,
	0, 0, 142, 222, 0, 143, 0, 223, 144, 145,
	0, 224, 146, 225, 147, 0, 148, 149, 150, 226,
	151, 152, 0, 154, 155, 153, 156, 0, 157, 0,
	158, 159, 227, 160, 0, 161, 162, 163, 56, 228,
	164, 165, 0, 166, 167, 0, 168, 229, 230, 169,
	0, 170, 171, 173, 231, 172, 232, 0, 174, 58,
	175, 176, 0, 233, 234, 235, 0, 0, 177, 236,
	237, 0, 178, 179, 180, 181, 0, 0, 182, 183,
	184, 0, 0, 185, 186, 187, 356, 239, 0, 188,
	0, 0, 0, 54, 189, 190, 191, 192, 83, 55,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 87, 0, 88, 0, 0, 0, 0, 53, 1238,
	0, 0, 89, 90, 193, 194, 195, 196, 91, 197,
	198, 0, 92, 199, 200, 93, 0, 0, 201, 202,
	203, 0, 204, 0, 0, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 205, 106,
	206, 207, 0, 107, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 208, 112, 113, 209,
	0, 0, 0, 114, 115, 210, 0, 116, 0, 117,
	0, 0, 0, 0, 118, 211, 0, 212, 0, 119,
	120, 213, 214, 0, 0, 121, 0, 0, 122, 215,
	216, 217, 0, 218, 0, 0, 123, 0, 124, 125,
	0, 0, 219, 0, 126, 0, 0, 127, 0, 0,
	128, 0, 129, 130, 131, 132, 133, 0, 134, 135,
	138, 136, 0, 137, 0, 220, 139, 221, 140, 141,
	0, 0, 0, 0, 0, 142, 222, 0, 143, 0,
	223, 144, 145, 0, 224, 146, 225, 147, 0, 148,
	149, 150, 226, 151, 152, 0, 154, 155, 153, 156,
	0, 157, 0, 158, 159, 227, 160, 0, 161, 162,
	163, 0, 228, 164, 165, 0, 166, 167, 0, 168,
	229, 230, 169, 0, 170, 171, 173, 231, 172, 232,
	0, 174, 0, 175, 176, 0, 233, 234, 235, 0,
	0, 177, 236, 237, 0, 178, 179, 180, 181, 0,
	0, 182, 183, 184, 0, 0, 185, 186, 187, 238,
	239, 0, 188, 0, 0, 0, 0, 189, 190, 191,
	192, 83, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 86, 87, 0, 88, 0, 0, 0,
	0, 0, 440, 0, 0, 89, 90, 193, 194, 195,
	196, 91, 197, 198, 0, 92, 199, 200, 93, 0,
	0, 201, 202, 203, 0, 204, 0, 0, 0, 94,
	95, 96, 0, 97, 0, 98, 99, 0, 0, 100,
	101, 0, 0, 0, 0, 0, 0, 102, 103, 104,
	105, 205, 106, 206, 207, 0, 107, 0, 108, 0,
	0, 0, 109, 110, 0, 111, 0, 0, 0, 208,
	112, 113, 209, 0, 0, 0, 114, 115, 210, 0,
	116, 0, 117, 0, 0, 0, 0, 118, 211, 0,
	212, 0, 119, 120, 213, 214, 0, 0, 121, 0,
	0, 122, 215, 216, 217, 0, 218, 0, 0, 123,
	0, 124, 125, 0, 0, 219, 0, 126, 0, 0,
	127, 0, 0, 128, 0, 129, 130, 131, 132, 133,
	0, 134, 135, 138, 136, 0, 137, 0, 220, 139,
	221, 140, 141, 0, 0, 325, 0, 0, 142, 222,
	0, 143, 0, 223, 144, 145, 0, 224, 146, 225,
	147, 0, 148, 149, 150, 226, 151, 152, 0, 154,
	155, 153, 156, 0, 157, 0, 158, 159, 227, 160,
	0, 161, 162, 163, 0, 228, 164, 165, 0, 166,
	167, 0, 168, 229, 230, 169, 0, 170, 171, 173,
	231, 172, 232, 0, 174, 0, 175, 176, 0, 233,
	234, 235, 0, 0, 177, 236, 237, 0, 178, 179,
	180, 181, 0, 0, 182, 183, 184, 0, 0, 185,
	186, 187, 238, 239, 0, 188, 0, 0, 0, 0,
	189, 190, 191, 192, 83, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 87, 0, 88,
	0, 0, 0, 0, 1026, 0, 0, 0, 89, 90,
	193, 194, 195, 196, 91, 197, 198, 0, 92, 199,
	200, 93, 0, 0, 201, 202, 203, 0, 204, 0,
	0, 0, 94, 95, 96, 0, 97, 0, 98, 99,
	0, 0, 100, 101, 0, 0, 0, 0, 0, 0,
	102, 103, 104, 105, 205, 106, 206, 207, 0, 107,
	0, 108, 0, 0, 0, 109, 110, 0, 111, 0,
	0, 0, 208, 112, 113, 209, 0, 0, 0, 114,
	115, 210, 0, 116, 0, 117, 0, 0, 0, 0,
	118, 211, 0, 212, 0, 119, 120, 213, 214, 0,
	0, 121, 0, 0, 122, 215, 216, 217, 0, 218,
	0, 0, 123, 0, 124, 125, 0, 0, 219, 0,
	126, 0, 0, 127, 0, 0, 128, 0, 129, 130,
	131, 132, 133, 0, 134, 135, 138, 136, 0, 137,
	0, 220, 139, 221, 140, 141, 0, 0, 0, 0,
	0, 142, 222, 0, 143, 0, 223, 144, 145, 0,
	224, 146, 225, 147, 0, 148, 149, 150, 226, 151,
	152, 0, 154, 155, 153, 156, 0, 157, 0, 158,
	159, 227, 160, 0, 161, 162, 163, 0, 228, 164,
	165, 0, 166, 167, 0, 168, 229, 230, 169, 0,
	170, 171, 173, 231, 172, 232, 0, 174, 0, 175,
	176, 0, 233, 234, 235, 0, 0, 177, 236, 237,
	0, 178, 179, 180, 181, 0, 0, 182, 183, 184,
	0, 0, 185, 186, 187, 238, 239, 0, 188, 0,
	0, 0, 0, 189, 190, 191, 192, 83, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	87, 0, 88, 0, 0, 0, 0, 937, 0, 0,
	0, 89, 90, 193, 194, 195, 196, 91, 197, 198,
	0, 92, 199, 200, 93, 0, 0, 201, 202, 203,
	0, 204, 0, 0, 0, 94, 95, 96, 0, 97,
	0, 98, 99, 0, 0, 100, 101, 0, 0, 0,
	0, 0, 0, 102, 103, 104, 105, 205, 106, 206,
	207, 0, 107, 0, 108, 0, 0, 0, 109, 110,
	0, 111, 0, 0, 0, 208, 112, 113, 209, 0,
	0, 0, 114, 115, 210, 0, 116, 0, 117, 0,
	0, 0, 0, 118, 211, 0, 212, 0, 119, 120,
	213, 214, 0, 0, 121, 0, 0, 122, 215, 216,
	217, 0, 218, 0, 0, 123, 0, 124, 125, 0,
	0, 219, 0, 126, 0, 0, 127, 0, 0, 128,
	0, 129, 130, 131, 132, 133, 0, 134, 135, 138,
	136, 0, 137, 0, 220, 139, 221, 140, 141, 0,
	0, 0, 0, 0, 142, 222, 0, 143, 0, 223,
	144, 145, 0, 224, 146, 225, 147, 0, 148, 149,
	150, 226, 151, 152, 0, 154, 155, 153, 156, 0,
	157, 0, 158, 159, 227, 160, 0, 161, 162, 163,
	0, 228, 164, 165, 0, 166, 167, 0, 168, 229,
	230, 169, 0, 170, 171, 173, 231, 172, 232, 0,
	174, 0, 175, 176, 0, 233, 234, 235, 0, 0,
	177, 236, 237, 0, 178, 179, 180, 181, 0, 0,
	182, 183, 184, 0, 0, 185, 186, 187, 238, 239,
	0, 188, 0, 0, 0, 0, 189, 190, 191, 192,
	83, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 87, 0, 88, 0, 0, 0, 0,
	1446, 0, 0, 0, 89, 90, 193, 194, 195, 196,
	91, 197, 198, 0, 92, 199, 200, 93, 0, 0,
	201, 202, 203, 0, 204, 0, 0, 0, 94, 95,
	96, 0, 97, 0, 98, 99, 0, 0, 100, 101,
	0, 0, 0, 0, 0, 0, 102, 103, 104, 105,
	205, 106, 206, 207, 0, 107, 0, 108, 0, 0,
	0, 109, 110, 0, 111, 0, 0, 0, 208, 112,
	113, 209, 0, 0, 0, 114, 115, 210, 0, 116,
	0, 117, 0, 0, 0, 0, 118, 211, 0, 212,
	0, 119, 120, 213, 214, 0, 0, 121, 0, 0,
	122, 215, 216, 217, 0, 218, 0, 0, 123, 0,
	124, 125, 0, 0, 219, 0, 126, 0, 0, 127,
	0, 0, 128, 0, 129, 130, 131, 132, 133, 0,
	134, 135, 138, 136, 0, 137, 0, 220, 139, 221,
	140, 141, 0, 0, 0, 0, 0, 142, 222, 0,
	143, 0, 223, 144, 145, 0, 224, 146, 225, 147,
	0, 148, 149, 150, 226, 151, 152, 0, 154, 155,
	153, 156, 0, 157, 0, 158, 159, 227, 160, 0,
	161, 162, 163, 0, 228, 164, 165, 0, 166, 167,
	0, 168, 229, 230, 169, 0, 170, 171, 173, 231,
	172, 232, 0, 174, 0, 175, 176, 0, 233, 234,
	235, 0, 0, 177, 236, 237, 0, 178, 179, 180,
	181, 0, 0, 182, 183, 184, 0, 0, 185, 186,
	187, 238, 239, 0, 188, 0, 0, 0, 0, 189,
	190, 191, 192, 83, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 87, 0, 88, 0,
	0, 0, 0, 541, 0, 0, 0, 89, 90, 193,
	194, 195, 196, 91, 197, 198, 0, 92, 199, 200,
	93, 0, 0, 201, 202, 203, 0, 204, 0, 0,
	0, 94, 95, 96, 0, 97, 0, 98, 99, 0,
	0, 100, 101, 0, 0, 0, 0, 0, 0, 102,
	103, 631, 105, 205, 106, 206, 207, 0, 107, 0,
	108, 0, 0, 0, 109, 110, 0, 111, 0, 0,
	0, 208, 112, 113, 209, 0, 0, 0, 114, 115,
	210, 0, 116, 0, 117, 0, 0, 0, 0, 118,
	211, 0, 212, 0, 119, 120, 213, 214, 0, 0,
	121, 0, 0, 122, 215, 216, 217, 0, 218, 0,
	0, 123, 0, 124, 125, 0, 0, 219, 0, 126,
	0, 0, 127, 0, 0, 128, 0, 129, 130, 131,
	132, 133, 0, 134, 135, 138, 136, 0, 137, 0,
	220, 139, 221, 140, 141, 0, 0, 0, 0, 0,
	142, 222, 0, 143, 0, 223, 144, 145, 0, 224,
	146, 225, 147, 0, 148, 149, 150, 226, 151, 152,
	0, 154, 155, 153, 156, 0, 157, 0, 158, 159,
	227, 160, 0, 161, 162, 163, 0, 228, 164, 165,
	0, 166, 167, 0, 168, 229, 230, 169, 0, 170,
	171, 173, 231, 172, 232, 0, 174, 630, 175, 176,
	0, 233, 234, 235, 0, 0, 177, 236, 237, 0,
	178, 179, 180, 181, 0, 0, 182, 183, 184, 0,
	0, 185, 186, 187, 238, 239, 83, 188, 0, 0,
	0, 0, 189, 190, 191, 192, 0, 0, 86, 87,
	0, 88, 0, 0, 0, 0, 0, 0, 0, 634,
	89, 90, 193, 194, 195, 196, 91, 197, 198, 0,
	92, 199, 200, 93, 0, 0, 201, 202, 203, 0,
	204, 0, 0, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 0, 100, 101, 0, 0, 0, 0,
	0, 0, 102, 103, 104, 105, 205, 106, 206, 207,
	0, 107, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 208, 112, 113, 209, 0, 0,
	0, 114, 115, 210, 0, 116, 0, 117, 0, 0,
	0, 0, 118, 211, 0, 212, 0, 119, 120, 213,
	214, 0, 0, 121, 0, 0, 122, 215, 216, 217,
	0, 218, 0, 0, 123, 0, 124, 125, 0, 0,
	219, 0, 126, 0, 0, 127, 0, 0, 128, 0,
	129, 130, 131, 132, 133, 0, 134, 135, 138, 136,
	0, 137, 0, 220, 139, 221, 140, 141, 0, 0,
	0, 0, 0, 142, 222, 0, 143, 0, 223, 144,
	145, 0, 224, 146, 225, 147, 0, 148, 149, 150,
	226, 151, 152, 0, 154, 155, 153, 156, 0, 157,
	0, 158, 159, 227, 160, 0, 161, 162, 163, 0,
	228, 164, 165, 0, 166, 167, 0, 168, 229, 230,
	169, 0, 170, 171, 173, 231, 172, 232, 0, 174,
	0, 175, 176, 0, 233, 234, 235, 0, 0, 177,
	236, 237, 0, 178, 179, 180, 181, 0, 0, 182,
	183, 184, 0, 0, 185, 186, 187, 238, 239, 352,
	188, 0, 0, 0, 0, 189, 190, 191, 192, 0,
	0, 86, 87, 0, 88, 0, 0, 0, 0, 0,
	0, 0, 634, 89, 90, 193, 194, 195, 196, 91,
	197, 198, 0, 92, 199, 200, 93, 0, 0, 201,
	202, 203, 0, 204, 0, 357, 0, 94, 95, 96,
	0, 97, 0, 98, 99, 0, 358, 100, 101, 0,
	0, 0, 0, 0, 0, 102, 103, 104, 105, 205,
	106, 206, 207, 0, 107, 0, 108, 0, 0, 0,
	109, 110, 0, 111, 0, 0, 0, 208, 112, 113,
	209, 0, 0, 0, 114, 115, 210, 0, 116, 0,
	117, 0, 0, 359, 0, 118, 211, 0, 212, 0,
	119, 120, 213, 214, 0, 0, 121, 0, 360, 122,
	215, 216, 217, 0, 218, 0, 361, 123, 362, 124,
	125, 0, 0, 219, 363, 126, 364, 0, 127, 0,
	0, 128, 0, 129, 130, 131, 132, 133, 365, 134,
	135, 138, 136, 0, 137, 0, 220, 139, 221, 140,
	141, 0, 0, 0, 0, 0, 142, 222, 366, 143,
	367, 223, 144, 145, 0, 224, 146, 225, 147, 0,
	148, 149, 150, 226, 151, 152, 0, 154, 155, 153,
	156, 0, 157, 368, 158, 159, 227, 160, 0, 161,
	162, 163, 0, 228, 164, 165, 0, 166, 167, 369,
	168, 229, 230, 169, 0, 170, 171, 173, 231, 172,
	232, 0, 174, 0, 175, 176, 0, 233, 234, 235,
	0, 0, 177, 236, 237, 0, 178, 179, 180, 181,
	0, 0, 182, 183, 184, 0, 0, 185, 186, 187,
	238, 239, 83, 188, 0, 0, 0, 0, 189, 190,
	191, 192, 0, 0, 86, 87, 0, 88, 0, 0,
	0, 0, 0, 0, 0, 0, 89, 90, 193, 194,
	195, 196, 91, 197, 198, 0, 92, 199, 200, 93,
	0, 0, 201, 202, 203, 910, 204, 0, 0, 0,
	94, 95, 96, 0, 97, 908, 98, 99, 0, 0,
	100, 101, 0, 0, 0, 0, 0, 0, 102, 103,
	104, 105, 205, 106, 206, 207, 0, 107, 0, 108,
	0, 0, 0, 109, 110, 0, 111, 0, 0, 0,
	208, 112, 113, 209, 0, 1003, 0, 114, 115, 210,
	0, 116, 0, 117, 913, 0, 0, 0, 118, 211,
	0, 212, 0, 119, 120, 213, 214, 0, 1001, 121,
	0, 0, 122, 215, 216, 217, 0, 218, 0, 0,
	123, 0, 124, 125, 0, 0, 219, 0, 126, 0,
	0, 127, 0, 0, 128, 0, 129, 130, 131, 132,
	133, 0, 134, 135, 138, 136, 0, 137, 0, 220,
	139, 221, 140, 141, 0, 0, 0, 0, 0, 142,
	222, 0, 143, 0, 223, 144, 145, 0, 224, 146,
	225, 147, 912, 148, 149, 150, 226, 151, 152, 0,
	154, 155, 153, 156, 0, 157, 0, 158, 159, 227,
	160, 0, 161, 162, 163, 0, 228, 164, 165, 0,
	166, 167, 0, 168, 229, 230, 169, 0, 170, 171,
	173, 231, 172, 232, 0, 174, 0, 175, 176, 0,
	233, 234, 235, 0, 0, 177, 236, 237, 0, 178,
	179, 180, 181, 0, 1002, 182, 183, 184, 0, 0,
	185, 186, 187, 238, 239, 83, 188, 0, 0, 0,
	0, 189, 190, 191, 192, 0, 0, 86, 87, 0,
	88, 0, 0, 0, 0, 0, 0, 0, 0, 89,
	90, 193, 194, 195, 196, 91, 197, 198, 0, 92,
	199, 200, 93, 0, 0, 201, 202, 203, 910, 204,
	0, 0, 905, 94, 95, 96, 0, 97, 908, 98,
	99, 0, 0, 100, 101, 0, 0, 0, 0, 0,
	0, 102, 103, 104, 105, 205, 106, 206, 207, 0,
	107, 0, 108, 0, 0, 0, 109, 110, 0, 111,
	0, 0, 0, 208, 112, 113, 209, 0, 0, 0,
	114, 115, 210, 0, 116, 0, 117, 913, 0, 0,
	0, 118, 211, 0, 212, 0, 119, 120, 904, 214,
	0, 0, 121, 0, 0, 122, 215, 216, 217, 0,
	218, 0, 0, 123, 0, 124, 125, 0, 0, 219,
	0, 126, 0, 0, 127, 0, 0, 128, 0, 129,
	130, 131, 132, 133, 0, 134, 135, 138, 136, 0,
	137, 0, 220, 139, 221, 140, 141, 0, 0, 0,
	0, 0, 142, 222, 0, 143, 0, 223, 144, 145,
	0, 224, 146, 225, 147, 912, 148, 149, 150, 226,
	151, 152, 0, 154, 155, 153, 156, 0, 157, 0,
	158, 159, 227, 160, 0, 161, 162, 163, 0, 228,
	164, 165, 0, 166, 167, 0, 168, 229, 230, 169,
	0, 170, 171, 173, 231, 172, 232, 0, 174, 0,
	175, 176, 0, 233, 234, 235, 0, 0, 177, 236,
	237, 0, 178, 179, 180, 181, 0, 911, 182, 183,
	184, 0, 0, 185, 186, 187, 238, 239, 83, 188,
	0, 0, 0, 0, 189, 190, 191, 192, 0, 0,
	86, 87, 0, 88, 0, 0, 0, 0, 0, 1238,
	0, 0, 89, 90, 193, 194, 195, 196, 91, 197,
	198, 0, 92, 199, 200, 93, 0, 0, 201, 202,
	203, 0, 204, 0, 0, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 205, 106,
	206, 207, 0, 107, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 208, 112, 113, 209,
	0, 0, 0, 114, 115, 210, 0, 116, 0, 117,
	0, 0, 0, 0, 118, 211, 0, 212, 0, 119,
	120, 213, 214, 0, 0, 121, 0, 0, 122, 215,
	216, 217, 0, 218, 0, 0, 123, 0, 124, 125,
	0, 0, 219, 0, 126, 0, 0, 127, 0, 0,
	128, 0, 129, 130, 131, 132, 133, 0, 134, 135,
	138, 136, 0, 137, 0, 220, 139, 221, 140, 141,
	0, 0, 0, 0, 0, 142, 222, 0, 143, 0,
	223, 144, 145, 0, 224, 146, 225, 147, 0, 148,
	149, 150, 226, 151, 152, 0, 154, 155, 153, 156,
	0, 157, 0, 158, 159, 227, 160, 0, 161, 162,
	163, 0, 228, 164, 165, 0, 166, 167, 0, 168,
	229, 230, 169, 0, 170, 171, 173, 231, 172, 232,
	0, 174, 0, 175, 176, 0, 233, 234, 235, 0,
	0, 177, 236, 237, 0, 178, 179, 180, 181, 0,
	0, 182, 183, 184, 0, 0, 185, 186, 187, 238,
	239, 83, 188, 0, 0, 0, 0, 189, 190, 191,
	192, 0, 0, 86, 87, 0, 88, 0, 0, 0,
	0, 0, 0, 0, 0, 89, 90, 193, 194, 195,
	196, 91, 197, 198, 0, 92, 199, 200, 93, 0,
	0, 201, 202, 203, 0, 204, 0, 0, 0, 94,
	95, 96, 0, 97, 0, 98, 99, 0, 0, 100,
	101, 0, 0, 0, 0, 0, 0, 102, 103, 104,
	105, 205, 106, 206, 207, 0, 107, 0, 108, 0,
	0, 0, 109, 110, 0, 111, 0, 0, 0, 208,
	112, 113, 209, 0, 0, 0, 114, 115, 210, 0,
	116, 0, 117, 0, 0, 0, 0, 118, 211, 0,
	212, 0, 119, 120, 213, 214, 0, 0, 121, 0,
	0, 122, 215, 216, 217, 0, 218, 0, 0, 123,
	0, 124, 125, 0, 0, 219, 0, 126, 0, 0,
	127, 0, 0, 128, 0, 129, 130, 131, 132, 133,
	0, 134, 135, 138, 136, 0, 137, 0, 220, 139,
	221, 140, 141, 0, 0, 325, 0, 0, 142, 222,
	0, 143, 0, 223, 144, 145, 0, 224, 146, 225,
	147, 0, 148, 149, 150, 226, 151, 152, 0, 154,
	155, 153, 156, 0, 157, 0, 158, 159, 227, 160,
	0, 161, 162, 163, 0, 228, 164, 165, 0, 166,
	167, 0, 168, 229, 230, 169, 0, 170, 171, 173,
	231, 172, 232, 0, 174, 0, 175, 176, 0, 233,
	234, 235, 0, 0, 177, 236, 237, 0, 178, 179,
	180, 181, 0, 0, 182, 183, 184, 0, 0, 185,
	186, 187, 238, 239, 83, 188, 0, 0, 0, 0,
	189, 190, 191, 192, 0, 0, 86, 87, 0, 88,
	0, 0, 0, 0, 0, 0, 0, 0, 89, 90,
	193, 194, 195, 196, 91, 197, 198, 0, 92, 199,
	200, 93, 0, 0, 201, 202, 203, 0, 204, 0,
	0, 0, 94, 95, 96, 0, 97, 0, 98, 99,
	0, 0, 100, 101, 0, 0, 0, 0, 0, 0,
	102, 103, 104, 105, 205, 106, 206, 207, 0, 107,
	0, 108, 0, 0, 0, 109, 110, 0, 111, 0,
	0, 0, 208, 112, 113, 209, 0, 0, 0, 114,
	115, 210, 0, 116, 0, 117, 0, 0, 0, 0,
	118, 211, 0, 212, 0, 119, 120, 583, 214, 0,
	0, 121, 0, 0, 122, 215, 216, 217, 0, 218,
	0, 0, 123, 0, 124, 125, 0, 0, 219, 0,
	126, 0, 0, 127, 0, 0, 128, 0, 129, 130,
	131, 132, 133, 0, 134, 135, 138, 136, 0, 137,
	0, 220, 139, 221, 140, 141, 0, 0, 325, 0,
	0, 142, 222, 0, 143, 0, 223, 144, 145, 0,
	224, 146, 225, 147, 0, 148, 149, 150, 226, 151,
	152, 0, 154, 155, 153, 156, 0, 157, 0, 158,
	159, 227, 160, 0, 161, 162, 163, 0, 228, 164,
	165, 0, 166, 167, 0, 168, 229, 230, 169, 0,
	170, 171, 173, 231, 172, 232, 0, 174, 0, 175,
	176, 0, 233, 234, 235, 0, 0, 177, 236, 237,
	0, 178, 179, 180, 181, 0, 0, 182, 183, 184,
	0, 0, 185, 186, 187, 238, 239, 83, 188, 0,
	0, 0, 0, 189, 190, 191, 192, 0, 0, 86,
	87, 376, 88, 0, 0, 0, 0, 0, 0, 0,
	0, 89, 90, 193, 194, 195, 196, 91, 197, 198,
	0, 92, 199, 200, 93, 0, 0, 201, 202, 203,
	0, 204, 0, 0, 0, 94, 95, 96, 0, 97,
	0, 98, 99, 0, 0, 100, 101, 0, 0, 0,
	0, 0, 0, 102, 103, 104, 105, 205, 106, 206,
	207, 0, 107, 0, 108, 0, 0, 0, 109, 110,
	0, 111, 0, 0, 0, 208, 112, 113, 209, 0,
	0, 0, 114, 115, 210, 0, 116, 0, 117, 0,
	0, 0, 0, 118, 211, 0, 212, 0, 119, 120,
	213, 214, 0, 0, 121, 0, 0, 122, 215, 216,
	217, 0, 218, 0, 0, 123, 0, 124, 125, 0,
	0, 219, 0, 126, 0, 0, 127, 0, 0, 128,
	0, 129, 130, 131, 132, 133, 0, 134, 135, 138,
	136, 0, 137, 0, 220, 139, 221, 140, 141, 0,
	0, 0, 0, 0, 142, 222, 0, 143, 0, 223,
	144, 145, 0, 224, 146, 225, 147, 0, 148, 149,
	150, 226, 151, 152, 0, 154, 155, 153, 156, 0,
	157, 0, 158, 159, 227, 160, 0, 161, 162, 163,
	0, 228, 164, 165, 0, 166, 167, 0, 168, 229,
	230, 169, 0, 170, 171, 173, 231, 172, 232, 0,
	174, 0, 175, 176, 0, 233, 234, 235, 0, 0,
	177, 236, 237, 0, 178, 179, 180, 181, 0, 0,
	182, 183, 184, 0, 0, 185, 186, 187, 238, 239,
	83, 188, 0, 0, 0, 0, 189, 190, 191, 192,
	0, 0, 86, 87, 0, 88, 0, 0, 0, 0,
	0, 0, 0, 0, 89, 90, 193, 194, 195, 196,
	91, 197, 198, 0, 92, 199, 200, 93, 0, 0,
	201, 202, 203, 0, 204, 0, 0, 0, 94, 95,
	96, 0, 97, 0, 98, 99, 0, 0, 100, 101,
	0, 0, 0, 0, 0, 0, 102, 103, 104, 105,
	205, 106, 206, 207, 0, 107, 0, 108, 0, 0,
	0, 109, 110, 0, 111, 0, 0, 0, 208, 112,
	113, 209, 0, 0, 0, 114, 115, 210, 0, 116,
	0, 117, 0, 0, 0, 0, 118, 211, 0, 212,
	0, 119, 120, 331, 214, 0, 0, 121, 0, 0,
	122, 215, 216, 217, 0, 218, 0, 0, 123, 0,
	124, 125, 0, 0, 219, 0, 126, 0, 0, 127,
	0, 0, 128, 0, 129, 130, 131, 132, 133, 0,
	134, 135, 138, 136, 0, 137, 0, 220, 139, 221,
	140, 141, 0, 0, 325, 0, 0, 142, 222, 0,
	143, 0, 223, 144, 145, 0, 224, 146, 225, 147,
	0, 148, 149, 150, 226, 151, 152, 0, 154, 155,
	153, 156, 0, 157, 0, 158, 159, 227, 160, 0,
	161, 162, 163, 0, 228, 164, 165, 0, 166, 167,
	0, 168, 229, 230, 169, 0, 170, 171, 173, 231,
	172, 232, 0, 174, 0, 175, 176, 0, 233, 234,
	235, 0, 0, 177, 236, 237, 0, 178, 179, 180,
	181, 0, 0, 182, 183, 184, 0, 0, 185, 186,
	187, 238, 239, 83, 188, 0, 0, 0, 0, 189,
	190, 191, 192, 0, 0, 86, 87, 243, 88, 0,
	0, 0, 0, 0, 0, 0, 0, 89, 90, 193,
	194, 195, 196, 91, 197, 198, 0, 92, 199, 200,
	93, 0, 0, 201, 202, 203, 0, 204, 0, 0,
	0, 94, 95, 96, 0, 97, 0, 98, 99, 0,
	0, 100, 101, 0, 0, 0, 0, 0, 0, 102,
	103, 104, 105, 205, 106, 206, 207, 0, 107, 0,
	108, 0, 0, 0, 109, 110, 0, 111, 0, 0,
	0, 208, 112, 113, 209, 0, 0, 0, 114, 115,
	210, 0, 116, 0, 117, 0, 0, 0, 0, 118,
	211, 0, 212, 0, 119, 120, 213, 214, 0, 0,
	121, 0, 0, 122, 215, 216, 217, 0, 218, 0,
	0, 123, 0, 124, 125, 0, 0, 219, 0, 126,
	0, 0, 127, 0, 0, 128, 0, 129, 130, 131,
	132, 133, 0, 134, 135, 138, 136, 0, 137, 0,
	220, 139, 221, 140, 141, 0, 0, 0, 0, 0,
	142, 222, 0, 143, 0, 223, 144, 145, 0, 224,
	146, 225, 242, 0, 148, 149, 150, 226, 151, 152,
	0, 154, 155, 153, 156, 0, 157, 0, 158, 159,
	227, 160, 0, 161, 162, 163, 0, 228, 164, 165,
	0, 166, 167, 0, 168, 229, 230, 169, 0, 170,
	171, 173, 231, 172, 232, 0, 174, 0, 175, 176,
	0, 233, 234, 235, 0, 0, 177, 236, 237, 0,
	178, 179, 180, 181, 0, 0, 182, 183, 184, 0,
	0, 185, 186, 187, 238, 239, 83, 188, 0, 0,
	0, 0, 189, 190, 191, 192, 0, 0, 86, 87,
	0, 88, 0, 0, 0, 0, 0, 0, 0, 0,
	89, 90, 193, 194, 195, 196, 91, 197, 198, 0,
	92, 199, 200, 93, 0, 0, 201, 202, 203, 0,
	204, 0, 0, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 0, 100, 101, 0, 0, 0, 0,
	0, 0, 102, 103, 104, 105, 205, 106, 206, 207,
	0, 107, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 208, 112, 113, 209, 0, 0,
	0, 114, 115, 210, 0, 116, 0, 117, 0, 0,
	0, 0, 118, 211, 0, 212, 0, 119, 120, 213,
	214, 0, 0, 121, 0, 0, 122, 215, 216, 217,
	0, 218, 0, 0, 123, 0, 124, 125, 0, 0,
	219, 0, 126, 0, 0, 127, 0, 0, 128, 0,
	129, 130, 131, 132, 133, 0, 134, 135, 138, 136,
	0, 137, 0, 220, 139, 221, 140, 141, 0, 0,
	0, 0, 0, 142, 222, 0, 143, 0, 223, 144,
	145, 0, 224, 146, 225, 147, 0, 148, 149, 150,
	226, 151, 152, 0, 154, 155, 153, 156, 0, 157,
	0, 158, 159, 227, 160, 0, 161, 162, 163, 0,
	228, 164, 165, 0, 166, 167, 0, 168, 229, 230,
	169, 0, 170, 171, 173, 231, 172, 232, 0, 174,
	0, 175, 176, 0, 233, 234, 235, 0, 0, 177,
	236, 237, 0, 178, 179, 180, 181, 0, 0, 182,
	183, 184, 0, 0, 185, 186, 187, 238, 239, 83,
	188, 0, 0, 0, 0, 189, 190, 191, 192, 0,
	0, 86, 87, 0, 88, 0, 0, 0, 0, 0,
	0, 0, 0, 89, 90, 193, 194, 195, 196, 91,
	197, 198, 0, 92, 199, 200, 93, 0, 0, 201,
	202, 203, 0, 204, 0, 0, 0, 94, 95, 96,
	0, 97, 0, 98, 99, 0, 0, 100, 101, 0,
	0, 0, 0, 0, 0, 102, 103, 104, 105, 205,
	106, 206, 207, 0, 107, 0, 108, 0, 0, 0,
	109, 110, 0, 111, 0, 0, 0, 208, 112, 113,
	209, 0, 0, 0, 114, 115, 210, 0, 116, 0,
	117, 0, 0, 0, 0, 118, 211, 0, 212, 0,
	119, 120, 1164, 214, 0, 0, 121, 0, 0, 122,
	215, 216, 217, 0, 218, 0, 0, 123, 0, 124,
	125, 0, 0, 219, 0, 126, 0, 0, 127, 0,
	0, 128, 0, 129, 130, 131, 132, 133, 0, 134,
	135, 138, 136, 0, 137, 0, 220, 139, 221, 140,
	141, 0, 0, 0, 0, 0, 142, 222, 0, 143,
	0, 223, 144, 145, 0, 224, 146, 225, 147, 0,
	148, 149, 150, 226, 151, 152, 0, 154, 155, 153,
	156, 0, 157, 0, 158, 159, 227, 160, 0, 161,
	162, 163, 0, 228, 164, 165, 0, 166, 167, 0,
	168, 229, 230, 169, 0, 170, 171, 173, 231, 172,
	232, 0, 174, 0, 175, 176, 0, 233, 234, 235,
	0, 0, 177, 236, 237, 0, 178, 179, 180, 181,
	0, 0, 182, 183, 184, 0, 0, 185, 186, 187,
	238, 239, 83, 188, 0, 0, 0, 0, 189, 190,
	191, 192, 0, 0, 86, 87, 0, 88, 0, 0,
	0, 0, 0, 0, 0, 0, 89, 90, 193, 194,
	195, 196, 91, 197, 198, 0, 92, 199, 200, 93,
	0, 0, 201, 202, 203, 0, 204, 0, 0, 0,
	94, 95, 96, 0, 97, 0, 98, 99, 0, 0,
	100, 101, 0, 0, 0, 0, 0, 0, 102, 103,
	104, 105, 205, 106, 206, 207, 0, 107, 0, 108,
	0, 0, 0, 109, 110, 0, 111, 0, 0, 0,
	208, 112, 113, 209, 0, 0, 0, 114, 115, 210,
	0, 116, 0, 117, 0, 0, 0, 0, 118, 211,
	0, 212, 0, 119, 120, 1162, 214, 0, 0, 121,
	0, 0, 122, 215, 216, 217, 0, 218, 0, 0,
	123, 0, 124, 125, 0, 0, 219, 0, 126, 0,
	0, 127, 0, 0, 128, 0, 129, 130, 131, 132,
	133, 0, 134, 135, 138, 136, 0, 137, 0, 220,
	139, 221, 140, 141, 0, 0, 0, 0, 0, 142,
	222, 0, 143, 0, 223, 144, 145, 0, 224, 146,
	225, 147, 0, 148, 149, 150, 226, 151, 152, 0,
	154, 155, 153, 156, 0, 157, 0, 158, 159, 227,
	160, 0, 161, 162, 163, 0, 228, 164, 165, 0,
	166, 167, 0, 168, 229, 230, 169, 0, 170, 171,
	173, 231, 172, 232, 0, 174, 0, 175, 176, 0,
	233, 234, 235, 0, 0, 177, 236, 237, 0, 178,
	179, 180, 181, 0, 0, 182, 183, 184, 0, 0,
	185, 186, 187, 238, 239, 83, 188, 0, 0, 0,
	0, 189, 190, 191, 192, 0, 0, 86, 87, 0,
	88, 0, 0, 0, 0, 0, 0, 0, 0, 89,
	90, 193, 194, 195, 196, 91, 197, 198, 0, 92,
	199, 200, 93, 0, 0, 201, 202, 203, 0, 204,
	0, 0, 0, 94, 95, 96, 0, 97, 0, 98,
	99, 0, 0, 100, 101, 0, 0, 0, 0, 0,
	0, 102, 103, 104, 105, 205, 106, 206, 207, 0,
	107, 0, 108, 0, 0, 0, 109, 110, 0, 111,
	0, 0, 0, 208, 112, 113, 209, 0, 0, 0,
	114, 115, 210, 0, 116, 0, 117, 0, 0, 0,
	0, 118, 211, 0, 212, 0, 119, 120, 1153, 214,
	0, 0, 121, 0, 0, 122, 215, 216, 217, 0,
	218, 0, 0, 123, 0, 124, 125, 0, 0, 219,
	0, 126, 0, 0, 127, 0, 0, 128, 0, 129,
	130, 131, 132, 133, 0, 134, 135, 138, 136, 0,
	137, 0, 220, 139, 221, 140, 141, 0, 0, 0,
	0, 0, 142, 222, 0, 143, 0, 223, 144, 145,
	0, 224, 146, 225, 147, 0, 148, 149, 150, 226,
	151, 152, 0, 154, 155, 153, 156, 0, 157, 0,
	158, 159, 227, 160, 0, 161, 162, 163, 0, 228,
	164, 165, 0, 166, 167, 0, 168, 229, 230, 169,
	0, 170, 171, 173, 231, 172, 232, 0, 174, 0,
	175, 176, 0, 233, 234, 235, 0, 0, 177, 236,
	237, 0, 178, 179, 180, 181, 0, 0, 182, 183,
	184, 0, 0, 185, 186, 187, 238, 239, 83, 188,
	0, 0, 0, 0, 189, 190, 191, 192, 0, 0,
	86, 87, 0, 88, 0, 0, 0, 0, 0, 0,
	0, 0, 89, 90, 193, 194, 195, 196, 91, 197,
	198, 0, 92, 199, 200, 93, 0, 0, 201, 202,
	203, 0, 204, 0, 0, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 205, 106,
	206, 207, 0, 107, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 208, 112, 113, 209,
	0, 0, 0, 114, 115, 210, 0, 116, 0, 117,
	0, 0, 0, 0, 118, 211, 0, 212, 0, 119,
	120, 779, 214, 0, 0, 121, 0, 0, 122, 215,
	216, 217, 0, 218, 0, 0, 123, 0, 124, 125,
	0, 0, 219, 0, 126, 0, 0, 127, 0, 0,
	128, 0, 129, 130, 131, 132, 133, 0, 134, 135,
	138, 136, 0, 137, 0, 220, 139, 221, 140, 141,
	0, 0, 0, 0, 0, 142, 222, 0, 143, 0,
	223, 144, 145, 0, 224, 146, 225, 147, 0, 148,
	149, 150, 226, 151, 152, 0, 154, 155, 153, 156,
	0, 157, 0, 158, 159, 227, 160, 0, 161, 162,
	163, 0, 228, 164, 165, 0, 166, 167, 0, 168,
	229, 230, 169, 0, 170, 171, 173, 231, 172, 232,
	0, 174, 0, 175, 176, 0, 233, 234, 235, 0,
	0, 177, 236, 237, 0, 178, 179, 180, 181, 0,
	0, 182, 183, 184, 0, 0, 185, 186, 187, 238,
	239, 83, 188, 0, 0, 0, 0, 189, 190, 191,
	192, 0, 0, 86, 87, 0, 88, 0, 0, 0,
	0, 0, 0, 0, 0, 89, 90, 193, 194, 195,
	196, 91, 197, 198, 0, 92, 199, 200, 93, 0,
	0, 201, 202, 203, 0, 204, 0, 0, 0, 94,
	95, 96, 0, 97, 0, 98, 99, 0, 0, 100,
	101, 0, 0, 0, 0, 0, 0, 102, 103, 104,
	105, 205, 106, 206, 207, 0, 107, 0, 108, 0,
	0, 0, 109, 110, 0, 111, 0, 0, 0, 208,
	112, 113, 209, 0, 0, 0, 114, 115, 210, 0,
	116, 0, 117, 0, 0, 0, 0, 118, 211, 0,
	212, 0, 119, 120, 213, 214, 0, 0, 121, 0,
	0, 122, 215, 216, 217, 0, 218, 0, 0, 123,
	0, 124, 125, 0, 0, 219, 0, 126, 0, 0,
	127, 0, 0, 128, 0, 129, 130, 131, 132, 133,
	0, 134, 135, 138, 136, 0, 137, 0, 220, 139,
	221, 140, 141, 0, 0, 0, 0, 0, 142, 222,
	0, 143, 0, 223, 144, 145, 0, 224, 146, 225,
	147, 0, 148, 149, 150, 226, 151, 152, 0, 154,
	155, 153, 156, 0, 157, 0, 158, 159, 227, 160,
	0, 257, 162, 163, 0, 228, 164, 165, 0, 166,
	167, 0, 168, 229, 230, 169, 0, 170, 171, 173,
	231, 172, 232, 0, 174, 0, 175, 176, 0, 233,
	234, 235, 0, 0, 177, 236, 237, 0, 178, 179,
	180, 181, 0, 0, 182, 183, 184, 0, 0, 185,
	186, 187, 238, 239, 83, 188, 0, 0, 0, 0,
	189, 190, 191, 192, 0, 0, 86, 87, 0, 88,
	0, 0, 0, 0, 0, 570, 0, 0, 89, 90,
	193, 194, 195, 196, 91, 197, 198, 0, 92, 199,
	200, 93, 0, 0, 201, 202, 203, 0, 204, 0,
	0, 0, 94, 95, 96, 0, 97, 0, 98, 99,
	0, 0, 100, 101, 0, 0, 0, 0, 0, 0,
	102, 103, 104, 105, 205, 106, 206, 207, 0, 107,
	0, 108, 0, 0, 0, 109, 110, 0, 111, 0,
	0, 0, 208, 112, 113, 209, 0, 0, 0, 114,
	115, 210, 0, 116, 0, 117, 0, 0, 0, 0,
	118, 211, 0, 212, 0, 119, 120, 213, 214, 0,
	0, 121, 0, 0, 122, 215, 216, 217, 0, 218,
	0, 0, 123, 0, 124, 125, 0, 0, 219, 0,
	126, 0, 0, 127, 0, 0, 128, 0, 129, 130,
	131, 132, 133, 0, 134, 135, 138, 136, 0, 137,
	0, 220, 139, 221, 140, 141, 0, 0, 0, 0,
	0, 142, 222, 0, 143, 0, 223, 144, 145, 0,
	224, 146, 225, 147, 0, 148, 149, 150, 226, 151,
	152, 0, 154, 155, 153, 156, 0, 157, 0, 158,
	159, 227, 160, 0, 161, 162, 163, 0, 228, 164,
	165, 0, 0, 167, 0, 168, 229, 230, 169, 0,
	170, 171, 173, 231, 172, 232, 0, 174, 0, 175,
	176, 0, 233, 234, 235, 0, 0, 177, 236, 237,
	0, 178, 179, 180, 181, 0, 0, 182, 183, 184,
	0, 0, 185, 186, 187, 238, 239, 83, 188, 0,
	0, 0, 0, 189, 190, 191, 192, 0, 0, 86,
	87, 0, 88, 0, 0, 0, 0, 0, 0, 0,
	0, 89, 90, 193, 194, 195, 196, 91, 197, 198,
	0, 92, 199, 200, 93, 0, 0, 201, 202, 203,
	0, 204, 0, 0, 0, 94, 95, 96, 0, 97,
	0, 98, 99, 0, 0, 100, 101, 0, 0, 0,
	0, 0, 0, 102, 103, 104, 105, 205, 106, 206,
	207, 0, 107, 0, 108, 0, 0, 0, 109, 110,
	0, 111, 0, 0, 0, 208, 112, 113, 209, 0,
	0, 0, 114, 115, 210, 0, 116, 0, 117, 0,
	0, 0, 0, 118, 211, 0, 212, 0, 119, 120,
	425, 214, 0, 0, 121, 0, 0, 122, 215, 216,
	217, 0, 218, 0, 0, 123, 0, 124, 125, 0,
	0, 219, 0, 126, 0, 0, 127, 0, 0, 128,
	0, 129, 130, 131, 132, 133, 0, 134, 135, 138,
	136, 0, 137, 0, 220, 139, 221, 140, 141, 0,
	0, 0, 0, 0, 142, 222, 0, 143, 0, 223,
	144, 145, 0, 224, 146, 225, 147, 0, 148, 149,
	150, 226, 151, 152, 0, 154, 155, 153, 156, 0,
	157, 0, 158, 159, 227, 160, 0, 161, 162, 163,
	0, 228, 164, 165, 0, 166, 167, 0, 168, 229,
	230, 169, 0, 170, 171, 173, 231, 172, 232, 0,
	174, 0, 175, 176, 0, 233, 234, 235, 0, 0,
	177, 236, 237, 0, 178, 179, 180, 181, 0, 0,
	182, 183, 184, 0, 0, 185, 186, 187, 238, 239,
	83, 188, 0, 0, 0, 0, 189, 190, 191, 192,
	0, 0, 86, 87, 0, 88, 0, 0, 0, 0,
	0, 0, 0, 0, 89, 90, 193, 194, 195, 196,
	91, 197, 198, 0, 92, 199, 200, 93, 0, 0,
	201, 202, 203, 0, 204, 0, 0, 0, 94, 95,
	96, 0, 97, 0, 98, 99, 0, 0, 100, 101,
	0, 0, 0, 0, 0, 0, 102, 103, 104, 105,
	205, 106, 206, 207, 0, 107, 0, 108, 0, 0,
	0, 109, 110, 0, 111, 0, 0, 0, 208, 112,
	113, 209, 0, 0, 0, 114, 115, 210, 0, 116,
	0, 117, 0, 0, 0, 0, 118, 211, 0, 212,
	0, 119, 120, 422, 214, 0, 0, 121, 0, 0,
	122, 215, 216, 217, 0, 218, 0, 0, 123, 0,
	124, 125, 0, 0, 219, 0, 126, 0, 0, 127,
	0, 0, 128, 0, 129, 130, 131, 132, 133, 0,
	134, 135, 138, 136, 0, 137, 0, 220, 139, 221,
	140, 141, 0, 0, 0, 0, 0, 142, 222, 0,
	143, 0, 223, 144, 145, 0, 224, 146, 225, 147,
	0, 148, 149, 150, 226, 151, 152, 0, 154, 155,
	153, 156, 0, 157, 0, 158, 159, 227, 160, 0,
	161, 162, 163, 0, 228, 164, 165, 0, 166, 167,
	0, 168, 229, 230, 169, 0, 170, 171, 173, 231,
	172, 232, 0, 174, 0, 175, 176, 0, 233, 234,
	235, 0, 0, 177, 236, 237, 0, 178, 179, 180,
	181, 0, 0, 182, 183, 184, 0, 0, 185, 186,
	187, 238, 239, 83, 188, 0, 0, 0, 0, 189,
	190, 191, 192, 0, 0, 86, 87, 0, 88, 0,
	0, 0, 0, 0, 0, 0, 0, 89, 90, 193,
	194, 195, 196, 91, 197, 198, 0, 92, 199, 200,
	93, 0, 0, 201, 202, 382, 0, 204, 0, 0,
	0, 94, 95, 96, 0, 97, 0, 98, 99, 0,
	0, 100, 101, 0, 0, 0, 0, 0, 0, 102,
	103, 104, 105, 205, 106, 206, 207, 0, 107, 0,
	108, 0, 0, 0, 109, 110, 0, 111, 0, 0,
	0, 208, 112, 113, 209, 0, 0, 0, 114, 115,
	210, 0, 116, 0, 117, 0, 0, 0, 0, 118,
	211, 0, 212, 0, 119, 120, 213, 214, 0, 0,
	121, 0, 0, 122, 215, 216, 217, 0, 218, 0,
	0, 123, 0, 124, 125, 0, 0, 219, 0, 126,
	0, 0, 127, 0, 0, 128, 0, 129, 130, 131,
	132, 268, 0, 134, 135, 138, 136, 0, 137, 0,
	220, 139, 221, 140, 141, 0, 0, 0, 0, 0,
	142, 222, 0, 143, 0, 223, 144, 145, 0, 224,
	146, 225, 147, 0, 148, 149, 150, 226, 151, 152,
	0, 154, 155, 153, 156, 0, 157, 0, 158, 159,
	227, 160, 0, 161, 162, 163, 0, 228, 164, 165,
	0, 166, 167, 0, 168, 229, 230, 169, 0, 170,
	171, 173, 231, 172, 232, 0, 174, 0, 175, 176,
	0, 267, 234, 235, 0, 0, 263, 236, 237, 0,
	178, 179, 180, 181, 0, 0, 182, 183, 184, 0,
	0, 185, 186, 187, 238, 239, 83, 188, 0, 0,
	0, 0, 189, 190, 191, 192, 0, 0, 86, 87,
	0, 88, 0, 0, 0, 0, 0, 0, 0, 0,
	89, 90, 193, 194, 195, 196, 91, 197, 198, 0,
	92, 199, 200, 93, 0, 0, 201, 202, 203, 0,
	204, 0, 0, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 0, 100, 101, 0, 0, 0, 0,
	0, 0, 102, 103, 104, 105, 205, 106, 206, 207,
	0, 107, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 208, 112, 113, 209, 0, 0,
	0, 114, 115, 210, 0, 116, 0, 117, 0, 0,
	0, 0, 118, 211, 0, 212, 0, 119, 120, 213,
	214, 0, 0, 121, 0, 0, 122, 215, 216, 217,
	0, 218, 0, 0, 123, 0, 124, 125, 0, 0,
	219, 0, 126, 0, 0, 127, 0, 0, 128, 0,
	129, 130, 131, 132, 268, 0, 134, 135, 138, 136,
	0, 137, 0, 220, 139, 221, 140, 141, 0, 0,
	0, 0, 0, 142, 222, 0, 143, 0, 223, 144,
	145, 0, 224, 146, 225, 147, 0, 148, 149, 150,
	226, 151, 152, 0, 154, 155, 153, 156, 0, 157,
	0, 158, 159, 227, 160, 0, 161, 162, 163, 0,
	228, 164, 165, 0, 166, 167, 0, 168, 229, 230,
	169, 0, 170, 171, 173, 231, 172, 232, 0, 174,
	0, 175, 176, 0, 267, 234, 235, 0, 0, 263,
	236, 237, 0, 178, 179, 180, 181, 0, 0, 182,
	183, 184, 0, 0, 185, 186, 187, 238, 239, 83,
	188, 0, 0, 0, 0, 189, 190, 191, 192, 0,
	0, 86, 87, 0, 88, 0, 0, 0, 0, 0,
	0, 0, 0, 89, 90, 193, 194, 195, 196, 91,
	197, 198, 0, 92, 199, 200, 93, 0, 0, 201,
	202, 203, 0, 204, 0, 0, 0, 94, 95, 96,
	0, 97, 0, 98, 99, 0, 0, 100, 101, 0,
	0, 0, 0, 0, 0, 102, 103, 104, 105, 205,
	106, 206, 207, 0, 107, 0, 108, 0, 0, 0,
	109, 110, 0, 111, 0, 0, 0, 208, 112, 113,
	209, 0, 0, 0, 114, 115, 210, 0, 116, 0,
	117, 0, 0, 0, 0, 118, 211, 0, 212, 0,
	119, 120, 347, 214, 0, 0, 121, 0, 0, 122,
	215, 216, 217, 0, 218, 0, 0, 123, 0, 124,
	125, 0, 0, 219, 0, 126, 0, 0, 127, 0,
	0, 128, 0, 129, 130, 131, 132, 133, 0, 134,
	135, 138, 136, 0, 137, 0, 220, 139, 221, 140,
	141, 0, 0, 0, 0, 0, 142, 222, 0, 143,
	0, 223, 144, 145, 0, 224, 146, 225, 147, 0,
	148, 149, 150, 226, 151, 152, 0, 154, 155, 153,
	156, 0, 157, 0, 158, 159, 227, 160, 0, 161,
	162, 163, 0, 228, 164, 165, 0, 166, 167, 0,
	168, 229, 230, 169, 0, 170, 171, 173, 231, 172,
	232, 0, 174, 0, 175, 176, 0, 233, 234, 235,
	0, 0, 177, 236, 237, 0, 178, 179, 180, 181,
	0, 0, 182, 183, 184, 0, 0, 185, 186, 187,
	238, 239, 83, 188, 0, 0, 0, 0, 189, 190,
	191, 192, 0, 0, 86, 87, 0, 88, 0, 0,
	0, 0, 0, 0, 0, 0, 89, 90, 193, 194,
	195, 196, 91, 197, 198, 0, 92, 199, 200, 93,
	0, 0, 201, 202, 203, 0, 204, 0, 0, 0,
	94, 95, 96, 0, 97, 0, 98, 99, 0, 0,
	100, 101, 0, 0, 0, 0, 0, 0, 102, 103,
	104, 105, 205, 106, 206, 207, 0, 107, 0, 108,
	0, 0, 0, 109, 110, 0, 111, 0, 0, 0,
	208, 112, 113, 209, 0, 0, 0, 114, 115, 210,
	0, 116, 0, 117, 0, 0, 0, 0, 118, 211,
	0, 212, 0, 119, 120, 344, 214, 0, 0, 121,
	0, 0, 122, 215, 216, 217, 0, 218, 0, 0,
	123, 0, 124, 125, 0, 0, 219, 0, 126, 0,
	0, 127, 0, 0, 128, 0, 129, 130, 131, 132,
	133, 0, 134, 135, 138, 136, 0, 137, 0, 220,
	139, 221, 140, 141, 0, 0, 0, 0, 0, 142,
	222, 0, 143, 0, 223, 144, 145, 0, 224, 146,
	225, 147, 0, 148, 149, 150, 226, 151, 152, 0,
	154, 155, 153, 156, 0, 157, 0, 158, 159, 227,
	160, 0, 161, 162, 163, 0, 228, 164, 165, 0,
	166, 167, 0, 168, 229, 230, 169, 0, 170, 171,
	173, 231, 172, 232, 0, 174, 0, 175, 176, 0,
	233, 234, 235, 0, 0, 177, 236, 237, 0, 178,
	179, 180, 181, 0, 0, 182, 183, 184, 0, 0,
	185, 186, 187, 238, 239, 83, 188, 0, 0, 0,
	0, 189, 190, 191, 192, 0, 0, 86, 87, 0,
	88, 0, 0, 0, 0, 0, 0, 0, 0, 89,
	90, 193, 194, 195, 196, 91, 197, 198, 0, 92,
	199, 200, 93, 0, 0, 201, 202, 203, 0, 204,
	0, 0, 0, 94, 95, 96, 0, 97, 0, 98,
	99, 0, 0, 100, 101, 0, 0, 0, 0, 0,
	0, 102, 103, 104, 105, 205, 106, 206, 207, 0,
	107, 0, 108, 0, 0, 0, 109, 110, 0, 111,
	0, 0, 0, 208, 112, 113, 209, 0, 0, 0,
	114, 115, 210, 0, 116, 0, 117, 0, 0, 0,
	0, 118, 211, 0, 212, 0, 119, 120, 342, 214,
	0, 0, 121, 0, 0, 122, 215, 216, 217, 0,
	218, 0, 0, 123, 0, 124, 125, 0, 0, 219,
	0, 126, 0, 0, 127, 0, 0, 128, 0, 129,
	130, 131, 132, 133, 0, 134, 135, 138, 136, 0,
	137, 0, 220, 139, 221, 140, 141, 0, 0, 0,
	0, 0, 142, 222, 0, 143, 0, 223, 144, 145,
	0, 224, 146, 225, 147, 0, 148, 149, 150, 226,
	151, 152, 0, 154, 155, 153, 156, 0, 157, 0,
	158, 159, 227, 160, 0, 161, 162, 163, 0, 228,
	164, 165, 0, 166, 167, 0, 168, 229, 230, 169,
	0, 170, 171, 173, 231, 172, 232, 0, 174, 0,
	175, 176, 0, 233, 234, 235, 0, 0, 177, 236,
	237, 0, 178, 179, 180, 181, 0, 0, 182, 183,
	184, 0, 0, 185, 186, 187, 238, 239, 83, 188,
	0, 0, 0, 0, 189, 190, 191, 192, 0, 0,
	86, 87, 0, 88, 0, 0, 0, 0, 0, 0,
	0, 0, 89, 90, 193, 194, 195, 196, 91, 197,
	198, 0, 92, 199, 200, 93, 0, 0, 201, 202,
	203, 0, 204, 0, 0, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 205, 106,
	206, 207, 0, 107, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 208, 112, 113, 209,
	0, 0, 0, 114, 115, 210, 0, 116, 0, 117,
	0, 0, 0, 0, 118, 211, 0, 212, 0, 119,
	120, 334, 214, 0, 0, 121, 0, 0, 122, 215,
	216, 217, 0, 218, 0, 0, 123, 0, 124, 125,
	0, 0, 219, 0, 126, 0, 0, 127, 0, 0,
	128, 0, 129, 130, 131, 132, 133, 0, 134, 135,
	138, 136, 0, 137, 0, 220, 139, 221, 140, 141,
	0, 0, 0, 0, 0, 142, 222, 0, 143, 0,
	223, 144, 145, 0, 224, 146, 225, 147, 0, 148,
	149, 150, 226, 151, 152, 0, 154, 155, 153, 156,
	0, 157, 0, 158, 159, 227, 160, 0, 161, 162,
	163, 0, 228, 164, 165, 0, 166, 167, 0, 168,
	229, 230, 169, 0, 170, 171, 173, 231, 172, 232,
	0, 174, 0, 175, 176, 0, 233, 234, 235, 0,
	0, 177, 236, 237, 0, 178, 179, 180, 181, 0,
	0, 182, 183, 184, 0, 0, 185, 186, 187, 238,
	239, 83, 188, 0, 0, 0, 0, 189, 190, 191,
	192, 0, 0, 86, 87, 0, 88, 0, 0, 0,
	0, 0, 0, 0, 0, 89, 90, 193, 194, 195,
	196, 91, 197, 198, 0, 92, 199, 200, 93, 0,
	0, 201, 202, 203, 0, 204, 0, 0, 0, 94,
	95, 96, 0, 97, 0, 98, 99, 0, 0, 100,
	101, 0, 0, 0, 0, 0, 0, 102, 103, 104,
	105, 205, 106, 206, 207, 0, 107, 0, 108, 0,
	0, 0, 109, 110, 0, 111, 0, 0, 0, 208,
	112, 113, 209, 0, 0, 0, 114, 115, 210, 0,
	116, 0, 117, 0, 0, 0, 0, 118, 211, 0,
	212, 0, 119, 120, 213, 214, 0, 0, 121, 0,
	0, 122, 215, 216, 217, 0, 218, 0, 0, 123,
	0, 124, 125, 0, 0, 219, 0, 126, 0, 0,
	127, 0, 0, 128, 0, 129, 130, 131, 132, 133,
	0, 134, 135, 138, 136, 0, 137, 0, 220, 139,
	221, 140, 141, 0, 0, 0, 0, 0, 142, 222,
	0, 143, 0, 223, 144, 145, 0, 224, 146, 225,
	147, 0, 148, 149, 150, 226, 314, 152, 0, 154,
	155, 153, 156, 0, 157, 0, 158, 159, 227, 160,
	0, 161, 162, 163, 0, 228, 164, 165, 0, 166,
	167, 0, 168, 229, 230, 169, 0, 170, 171, 173,
	231, 172, 232, 0, 174, 0, 175, 176, 0, 233,
	234, 235, 0, 0, 177, 236, 237, 0, 178, 179,
	180, 181, 0, 0, 182, 183, 184, 0, 0, 185,
	186, 187, 238, 239, 83, 188, 0, 0, 0, 0,
	189, 190, 191, 192, 0, 0, 86, 87, 0, 88,
	0, 0, 0, 0, 0, 0, 0, 0, 89, 90,
	193, 194, 195, 196, 91, 197, 198, 0, 92, 199,
	200, 93, 0, 0, 201, 202, 203, 0, 204, 0,
	0, 0, 94, 95, 96, 0, 97, 0, 98, 99,
	0, 0, 100, 101, 0, 0, 0, 0, 0, 0,
	102, 103, 104, 105, 205, 106, 206, 207, 0, 107,
	0, 108, 0, 0, 0, 109, 110, 0, 111, 0,
	0, 0, 208, 112, 113, 209, 0, 0, 0, 114,
	115, 210, 0, 116, 0, 117, 0, 0, 0, 0,
	118, 211, 0, 212, 0, 119, 120, 213, 214, 0,
	0, 121, 0, 0, 122, 215, 216, 217, 0, 218,
	0, 0, 123, 0, 124, 125, 0, 0, 219, 0,
	126, 0, 0, 260, 0, 0, 128, 0, 129, 130,
	131, 132, 268, 0, 134, 135, 138, 136, 0, 137,
	0, 220, 139, 221, 140, 141, 0, 0, 0, 0,
	0, 142, 222, 0, 143, 0, 223, 144, 145, 0,
	224, 146, 225, 147, 0, 148, 149, 150, 226, 151,
	152, 0, 154, 155, 153, 156, 0, 157, 0, 158,
	159, 262, 160, 0, 161, 162, 163, 0, 228, 164,
	261, 0, 166, 167, 0, 168, 229, 230, 169, 0,
	170, 171, 173, 231, 172, 232, 0, 174, 0, 175,
	176, 0, 267, 234, 235, 0, 0, 263, 236, 237,
	0, 178, 179, 180, 181, 0, 0, 182, 183, 184,
	0, 0, 185, 186, 187, 238, 239, 83, 188, 0,
	0, 0, 0, 189, 190, 191, 192, 0, 0, 86,
	87, 0, 88, 0, 0, 0, 0, 0, 0, 0,
	0, 89, 90, 193, 194, 195, 196, 91, 197, 198,
	0, 92, 199, 200, 93, 0, 0, 201, 202, 203,
	0, 204, 0, 0, 0, 94, 95, 96, 0, 97,
	0, 98, 99, 0, 0, 100, 101, 0, 0, 0,
	0, 0, 0, 102, 103, 104, 105, 205, 106, 206,
	207, 0, 107, 0, 108, 0, 0, 0, 109, 110,
	0, 111, 0, 0, 0, 208, 112, 113, 209, 0,
	0, 0, 114, 115, 210, 0, 116, 0, 117, 0,
	0, 0, 0, 118, 211, 0, 212, 0, 119, 120,
	213, 214, 0, 0, 121, 0, 0, 122, 215, 216,
	217, 0, 218, 0, 0, 123, 0, 124, 125, 0,
	0, 219, 0, 126, 0, 0, 127, 0, 0, 128,
	0, 129, 130, 131, 132, 133, 0, 134, 135, 138,
	136, 0, 137, 0, 220, 139, 221, 140, 141, 0,
	0, 0, 0, 0, 142, 222, 0, 143, 0, 223,
	144, 0, 0, 224, 146, 225, 147, 0, 148, 0,
	150, 226, 151, 152, 0, 154, 155, 153, 156, 0,
	157, 0, 158, 159, 227, 0, 0, 161, 162, 163,
	0, 228, 164, 165, 0, 166, 167, 0, 168, 229,
	230, 169, 0, 170, 171, 173, 231, 172, 232, 0,
	174, 0, 175, 176, 0, 233, 234, 235, 0, 0,
	177, 236, 237, 0, 178, 179, 180, 181, 0, 0,
	182, 183, 184, 0, 0, 185, 186, 187, 238, 239,
	805, 188, 824, 825, 826, 0, 189, 190, 191, 192,
	0, 0, 827, 0, 0, 0, 0, 0, 807, 0,
	833, 0, 0, 805, 0, 824, 825, 826, 0, 0,
	0, 0, 0, 0, 0, 827, 0, 0, 0, 806,
	0, 807, 0, 833, 0, 821, 805, 0, 824, 825,
	826, 0, 0, 0, 0, 0, 0, 0, 827, 0,
	0, 0, 806, 0, 807, 0, 833, 0, 821, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 806, 0, 0, 0, 0,
	0, 821, 812, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 834,
	0, 0, 0, 0, 0, 812, 0, 0, 0, 0,
	0, 832, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 829, 834, 0, 0, 0, 0, 822, 812, 0,
	0, 0, 0, 0, 832, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 829, 834, 0, 0, 0, 828,
	822, 0, 0, 0, 0, 0, 0, 832, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 829, 0, 0,
	0, 0, 828, 822, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 823, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 831, 828, 0, 0, 0, 0,
	805, 0, 824, 825, 826, 0, 823, 0, 0, 0,
	0, 0, 827, 0, 0, 0, 0, 831, 807, 0,
	833, 0, 0, 0, 805, 0, 824, 825, 826, 823,
	0, 0, 0, 0, 0, 0, 827, 0, 0, 806,
	831, 0, 807, 0, 833, 821, 0, 830, 0, 0,
	818, 819, 820, 0, 817, 814, 815, 816, 808, 809,
	810, 811, 813, 806, 0, 0, 0, 0, 0, 821,
	830, 1332, 0, 818, 819, 820, 0, 817, 814, 815,
	816, 808, 809, 810, 811, 813, 0, 0, 0, 0,
	0, 0, 812, 830, 1331, 0, 818, 819, 820, 0,
	817, 814, 815, 816, 808, 809, 810, 811, 813, 834,
	0, 0, 0, 0, 1717, 0, 812, 0, 0, 0,
	0, 832, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 829, 0, 834, 0, 0, 0, 822, 0, 0,
	0, 0, 0, 0, 0, 832, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 829, 0, 0, 0, 828,
	0, 822, 0, 0, 0, 0, 805, 0, 824, 825,
	826, 0, 0, 0, 0, 0, 0, 0, 827, 0,
	0, 0, 0, 828, 807, 0, 833, 0, 0, 0,
	0, 0, 0, 823, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 831, 806, 805, 0, 824, 825,
	826, 821, 0, 0, 0, 0, 0, 823, 827, 0,
	0, 0, 0, 0, 807, 0, 833, 0, 831, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 806, 0, 0, 0, 0,
	0, 821, 0, 0, 0, 0, 0, 830, 812, 0,
	818, 819, 820, 0, 817, 814, 815, 816, 808, 809,
	810, 811, 813, 0, 0, 834, 0, 0, 1716, 0,
	0, 830, 0, 0, 818, 819, 820, 832, 817, 814,
	815, 816, 808, 809, 810, 811, 813, 829, 812, 0,
	0, 0, 1697, 822, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 834, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 828, 0, 832, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 829, 0, 0,
	0, 0, 0, 822, 0, 0, 0, 0, 805, 0,
	824, 825, 826, 0, 0, 0, 0, 0, 0, 823,
	827, 0, 0, 0, 0, 828, 807, 0, 833, 0,
	831, 0, 805, 0, 824, 825, 826, 0, 0, 0,
	0, 0, 0, 0, 827, 0, 0, 806, 0, 0,
	807, 0, 833, 821, 0, 0, 0, 0, 0, 823,
	0, 0, 805, 0, 824, 825, 826, 0, 0, 0,
	831, 806, 0, 0, 827, 0, 0, 821, 0, 0,
	807, 0, 833, 830, 0, 0, 818, 819, 820, 0,
	817, 814, 815, 816, 808, 809, 810, 811, 813, 0,
	812, 806, 0, 0, 1676, 0, 0, 821, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 834, 0, 0,
	0, 0, 0, 830, 812, 0, 818, 819, 820, 832,
	817, 814, 815, 816, 808, 809, 810, 811, 813, 829,
	0, 834, 0, 0, 1671, 822, 0, 0, 0, 0,
	0, 0, 0, 832, 812, 0, 0, 0, 0, 0,
	0, 0, 0, 829, 0, 0, 0, 828, 0, 822,
	1292, 834, 1309, 1310, 1311, 0, 0, 0, 0, 0,
	0, 0, 1575, 832, 0, 0, 0, 0, 0, 0,
	0, 828, 0, 829, 0, 0, 0, 0, 0, 822,
	0, 823, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 831, 0, 0, 1306, 0, 0, 0, 0,
	0, 828, 0, 0, 0, 823, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 831, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 823, 0, 0, 0, 0,
	0, 0, 1297, 0, 0, 830, 831, 0, 818, 819,
	820, 0, 817, 814, 815, 816, 808, 809, 810, 811,
	813, 0, 0, 0, 0, 0, 1667, 0, 0, 830,
	0, 1312, 818, 819, 820, 0, 817, 814, 815, 816,
	808, 809, 810, 811, 813, 0, 0, 1307, 0, 0,
	1605, 0, 0, 0, 0, 0, 0, 0, 0, 830,
	0, 0, 818, 819, 820, 0, 817, 814, 815, 816,
	808, 809, 810, 811, 813, 805, 0, 824, 825, 826,
	1604, 0, 0, 0, 0, 0, 0, 827, 0, 0,
	0, 0, 0, 807, 0, 833, 0, 0, 805, 0,
	824, 825, 826, 1308, 0, 0, 0, 0, 0, 0,
	827, 0, 0, 0, 806, 0, 807, 0, 833, 0,
	821, 805, 0, 824, 825, 826, 0, 0, 0, 0,
	0, 0, 0, 827, 0, 0, 0, 806, 0, 807,
	0, 833, 0, 821, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	806, 0, 0, 0, 0, 0, 821, 812, 0, 0,
	1303, 1304, 1305, 0, 1302, 1299, 1300, 1301, 1293, 1294,
	1295, 1296, 1298, 0, 834, 0, 0, 0, 0, 0,
	812, 0, 0, 0, 0, 0, 832, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 829, 834, 0, 0,
	0, 0, 822, 812, 0, 0, 0, 0, 0, 832,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 829,
	834, 0, 0, 0, 828, 822, 0, 0, 0, 0,
	0, 0, 832, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 829, 0, 0, 0, 0, 828, 822, 1292,
	0, 1309, 1310, 1311, 0, 0, 0, 0, 823, 0,
	0, 1428, 0, 0, 0, 0, 0, 0, 0, 831,
	828, 0, 0, 0, 0, 805, 0, 824, 825, 826,
	0, 823, 0, 0, 0, 0, 0, 827, 0, 0,
	0, 0, 831, 807, 1306, 833, 0, 0, 0, 805,
	0, 824, 825, 826, 823, 0, 0, 0, 0, 0,
	0, 827, 0, 0, 806, 831, 0, 807, 0, 833,
	821, 0, 830, 0, 0, 818, 819, 820, 0, 817,
	814, 815, 816, 808, 809, 810, 811, 813, 806, 0,
	0, 1297, 0, 1513, 821, 830, 0, 0, 818, 819,
	820, 0, 817, 814, 815, 816, 808, 809, 810, 811,
	813, 0, 0, 0, 0, 0, 1449, 812, 830, 0,
	1312, 818, 819, 820, 0, 817, 814, 815, 816, 808,
	809, 810, 811, 813, 834, 0, 1307, 0, 0, 1433,
	0, 812, 0, 0, 0, 0, 832, 0, 0, 0,
	0, 1292, 0, 1309, 1310, 1311, 829, 0, 834, 0,
	0, 0, 822, 1427, 0, 0, 0, 0, 0, 0,
	832, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	829, 0, 0, 0, 828, 0, 822, 0, 0, 0,
	0, 805, 1308, 824, 825, 826, 1306, 0, 0, 0,
	0, 0, 0, 827, 0, 0, 0, 0, 828, 807,
	0, 833, 0, 0, 0, 0, 0, 0, 823, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 831,
	806, 0, 0, 0, 0, 0, 821, 0, 0, 0,
	0, 0, 823, 1297, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 831, 0, 0, 0, 0, 0, 1303,
	1304, 1305, 0, 1302, 1299, 1300, 1301, 1293, 1294, 1295,
	1296, 1298, 1312, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 830, 812, 1781, 818, 819, 820, 1307, 817,
	814, 815, 816, 808, 809, 810, 811, 813, 0, 0,
	834, 0, 0, 1074, 0, 0, 830, 0, 0, 818,
	819, 820, 832, 817, 814, 815, 816, 808, 809, 810,
	811, 813, 829, 0, 0, 1496, 0, 0, 822, 0,
	0, 0, 0, 805, 0, 824, 825, 826, 0, 0,
	0, 0, 0, 0, 1308, 827, 0, 0, 0, 0,
	828, 807, 0, 833, 0, 0, 0, 805, 0, 824,
	825, 826, 1780, 0, 0, 0, 0, 0, 0, 827,
	0, 0, 806, 1014, 0, 807, 0, 833, 821, 0,
	0, 0, 0, 0, 823, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 831, 806, 0, 0, 0,
	0, 0, 821, 0, 0, 0, 0, 0, 0, 0,
	0, 1303, 1304, 1305, 0, 1302, 1299, 1300, 1301, 1293,
	1294, 1295, 1296, 1298, 0, 812, 0, 1323, 0, 1015,
	1322, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 834, 0, 0, 0, 0, 0, 830, 812,
	0, 818, 819, 820, 832, 817, 814, 815, 816, 808,
	809, 810, 811, 813, 829, 0, 834, 0, 0, 0,
	822, 0, 0, 0, 0, 0, 0, 0, 832, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 829, 0,
	0, 0, 828, 836, 822, 0, 0, 0, 0, 805,
	0, 824, 825, 826, 0, 0, 0, 0, 0, 0,
	0, 827, 0, 0, 835, 0, 828, 807, 0, 833,
	0, 0, 0, 0, 0, 0, 823, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 831, 806, 805,
	0, 824, 825, 826, 821, 0, 0, 0, 0, 0,
	823, 827, 0, 0, 0, 0, 0, 807, 0, 833,
	0, 831, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 806, 0,
	0, 0, 0, 0, 821, 0, 0, 0, 0, 0,
	830, 812, 0, 818, 819, 820, 0, 817, 814, 815,
	816, 808, 809, 810, 811, 813, 0, 0, 834, 1292,
	0, 1309, 1310, 1311, 830, 0, 0, 818, 819, 820,
	832, 817, 814, 815, 816, 808, 809, 810, 811, 813,
	829, 812, 0, 0, 0, 0, 822, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 834, 0,
	0, 0, 0, 0, 1306, 0, 0, 0, 828, 0,
	832, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	829, 0, 0, 0, 0, 0, 822, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 823, 0, 0, 0, 0, 0, 828, 309,
	0, 1297, 0, 831, 0, 805, 0, 824, 825, 826,
	0, 0, 0, 0, 0, 0, 0, 827, 1313, 0,
	0, 0, 0, 807, 0, 833, 0, 0, 0, 0,
	1312, 0, 823, 0, 0, 805, 0, 824, 825, 826,
	0, 0, 0, 831, 806, 0, 1307, 827, 0, 0,
	821, 0, 0, 807, 0, 833, 830, 0, 0, 818,
	819, 820, 0, 817, 814, 815, 816, 808, 809, 810,
	811, 813, 0, 0, 806, 0, 0, 0, 0, 0,
	821, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 830, 812, 0, 818,
	819, 820, 1308, 817, 814, 815, 816, 808, 809, 810,
	811, 813, 0, 0, 834, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 832, 812, 0, 0,
	0, 0, 1329, 0, 0, 0, 829, 0, 0, 0,
	0, 0, 822, 0, 834, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 832, 0, 0, 0,
	0, 0, 0, 0, 828, 0, 829, 0, 0, 1303,
	1304, 1305, 822, 1302, 1299, 1300, 1301, 1293, 1294, 1295,
	1296, 1298, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 828, 0, 0, 0, 823, 805,
	0, 824, 825, 826, 0, 0, 0, 0, 0, 831,
	0, 827, 0, 0, 1324, 0, 0, 807, 0, 833,
	0, 0, 0, 0, 0, 0, 1443, 0, 823, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 806, 831,
	0, 0, 0, 805, 821, 824, 825, 826, 0, 0,
	0, 0, 0, 0, 0, 827, 0, 0, 0, 0,
	0, 807, 830, 833, 0, 818, 819, 820, 0, 817,
	814, 815, 816, 808, 809, 810, 811, 813, 0, 0,
	0, 0, 806, 0, 0, 0, 0, 0, 821, 0,
	0, 812, 830, 0, 0, 818, 819, 820, 0, 817,
	814, 815, 816, 808, 809, 810, 811, 813, 834, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	832, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	829, 0, 0, 0, 0, 812, 822, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 834, 0, 0, 0, 0, 0, 828, 0,
	0, 0, 0, 0, 832, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 829, 0, 0, 0, 0, 0,
	822, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 823, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 828, 831, 0, 0, 0, 805, 0, 824,
	825, 826, 1290, 0, 0, 0, 0, 0, 0, 827,
	0, 0, 1285, 0, 0, 807, 0, 833, 0, 0,
	0, 0, 0, 0, 0, 0, 823, 805, 0, 824,
	825, 826, 0, 0, 0, 0, 806, 831, 0, 827,
	0, 0, 821, 0, 0, 807, 830, 833, 0, 818,
	819, 820, 0, 817, 814, 815, 816, 808, 809, 810,
	811, 813, 0, 0, 0, 0, 806, 0, 0, 0,
	0, 0, 821, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 812,
	830, 0, 0, 818, 819, 820, 0, 817, 814, 815,
	816, 808, 809, 810, 811, 813, 834, 0, 0, 0,
	0, 0, 805, 0, 824, 825, 826, 0, 832, 812,
	0, 0, 0, 0, 827, 0, 0, 0, 829, 0,
	807, 0, 833, 0, 822, 0, 834, 0, 0, 0,
	0, 0, 805, 0, 824, 825, 826, 0, 832, 0,
	0, 806, 0, 0, 0, 0, 828, 821, 829, 0,
	807, 0, 833, 1292, 822, 1309, 1310, 1311, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 806, 0, 0, 0, 0, 828, 821, 0, 0,
	823, 0, 0, 1292, 0, 1309, 1310, 1311, 0, 0,
	0, 831, 0, 0, 812, 0, 0, 0, 1306, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	823, 834, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 831, 0, 832, 812, 0, 0, 0, 1306, 0,
	0, 0, 0, 829, 0, 0, 0, 0, 0, 822,
	0, 834, 0, 0, 830, 1297, 0, 818, 819, 820,
	0, 817, 814, 815, 816, 808, 809, 810, 811, 813,
	0, 0, 0, 829, 0, 0, 0, 0, 0, 822,
	0, 0, 0, 0, 830, 1297, 0, 818, 819, 820,
	0, 817, 814, 815, 816, 808, 809, 810, 811, 813,
	1307, 0, 0, 0, 0, 823, 0, 0, 0, 0,
	0, 0, 0, 0, 1312, 0, 831, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1307, 0, 0, 0, 0, 823, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 831, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1308, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 830,
	0, 0, 818, 819, 820, 0, 817, 814, 815, 816,
	808, 809, 810, 811, 813, 0, 1308, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 830,
	0, 0, 818, 819, 820, 0, 817, 814, 815, 816,
	808, 809, 810, 811, 813, 0, 0, 0, 0, 0,
	0, 0, 0, 1303, 1304, 1305, 0, 1302, 1299, 1300,
	1301, 1293, 1294, 1295, 1296, 1298, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1303, 1304, 1305, 0, 1302, 1299, 1300,
	1301, 1293, 1294, 1295, 1296, 1298,
}
var sqlPact = [...]int{

	2876, -1000, 21, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 785, -1000, -1000, -1000, 562, 752,
	599, 14922, 14922, 14669, 1653, 1653, 16187, -1000, -1000, 18970,
	-1000, 2235, 433, 436, 433, 433, 432, 16187, 533, 593,
	138, -1000, 598, 25, 18717, 14922, 1247, 16, 13657, 252,
	2876, 14416, 14922, 18464, 1096, 1005, 995, 13657, 18211, 17958,
	17705, -1000, 9252, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 532, 268, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	265, -1000, 14163, -1000, 834, -1000, 15, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 816, -1000, 14922, -1000, -1000,
	17452, 17199, 264, 738, -1000, -1000, 477, 344, 1273, -1000,
	35, -1000, -1000, 1093, -1000, 808, 1091, 1090, 1088, 1077,
	1076, 1074, 343, 858, -1000, 531, 738, -1000, 738, -1000,
	-1000, -1000, 506, 16187, -1000, 13657, -1000, 16946, 1028, 16693,
	-1000, 598, -1000, -1000, -1000, 879, 1245, 1245, 1245, 1296,
	113, 109, 138, 0, 14922, -1000, 254, 0, 6611, 6611,
	-1000, -1000, 252, -1000, 236, 11876, 34, -1000, 7141, -1000,
	683, 1161, 663, 655, 1152, -96, 13657, 14922, 14922, 561,
	16440, -1000, 1150, 123, 1148, -1000, 121, 1146, -1000, -12,
	-1000, -1000, -1000, -1000, -1000, -1000, 252, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	13910, 1333, 3433, -1000, 8461, -1000, -1000, 12139, 1020, 12139,
	-1000, -1000, 1329, -1000, 8461, -1000, 13, 8, 925, 1018,
	9781, 9517, 1216, 810, -1000, -1000, -1000, 33, 4224, 14922,
	1105, 12139, 14922, 14922, 14922, 14922, 14922, -1000, 14922, -1000,
	923, -1000, 14922, -1000, 6, 1, -1000, 16187, -1000, 126,
	-1000, 251, 891, 15934, 1170, 889, -1000, 879, -1000, 774,
	918, 7669, 8461, 138, -1000, -1000, 138, 138, 8461, -1000,
	-1000, 14922, 0, 1314, 14922, 119, -1000, 21039, -1000, -1000,
	8461, 8461, 8461, 8461, 8461, 719, -1000, -1000, -1000, 5019,
	-1000, -1000, 34, 250, 283, -1000, -1000, 249, 34, -1000,
	-1000, -1000, -1000, 247, 1405, 351, -1000, -1000, -1000, 8461,
	348, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1103, 241, 240, -1000, -1000, -1000, -1000, 239, 238, 235,
	234, 232, 231, 230, 227, 225, 217, 216, 214, 208,
	701, -1000, 366, -1000, -1000, 366, 366, -1000, 205, 205,
	206, -1000, -1000, -1000, 205, -1000, -1000, -1000, 331, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 207, 119, -1000, -1000,
	-1000, 14922, 34, -1000, -1000, -1000, 8461, 3959, -14, -1000,
	21677, -1000, -9, 780, -1000, 13151, 1259, 1252, 1226, 13657,
	502, 501, 14922, 14922, 359, 74, 1312, 74, 11350, -1000,
	14922, 14922, -1000, 14922, -1000, -1000, 14922, -1000, 14922, 14922,
	209, 12645, 747, 1145, 25, -18, -1000, 1335, -1000, -1000,
	-1000, -1000, 95, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 206, 701, 205, 205,
	205, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 331, -1000,
	-1000, 366, 366, 366, -1000, -1000, -20, 21677, 498, -5,
	12392, 14922, -1000, 28, -1000, -1000, 1072, 425, -24, 694,
	963, 651, -1000, -1000, -1000, -1000, -1, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1373, -1000, -1000,
	-1000, -1000, 1391, -1, -1000, -1000, -1000, -1000, -1000, 1402,
	-1000, -1000, -1000, 4224, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 14922, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 694, 963, -1000, -1000, 13657, 12898, 1141, 792, 875,
	-1000, -1000, 318, 1136, -1000, -1000, -1000, -1000, 21677, -1000,
	21677, 644, 1021, -1000, 1021, -2, -1000, 20897, -1000, 204,
	-25, -1000, 359, 6611, 11087, 3433, 14922, 526, 8461, 8461,
	8461, 8461, 8461, 8461, 8461, 8461, 8461, 8461, 8461, 8461,
	8461, 8461, 8461, 8461, 8461, 8461, 8461, 8461, 8461, 8461,
	773, 497, 1595, 745, 187, 4224, -1000, 1360, 1360, 1360,
	1866, 1866, 210, 20, 20565, -3, 34, -1000, -1000, 6347,
	6081, 34, 4487, -1000, 892, 1390, 364, 21677, 1116, 1048,
	202, 107, 102, 8461, 659, 8461, 8725, 8461, 8461, 5285,
	8461, 8461, 8461, 8461, 8461, 8461, -1000, 201, -1000, -1000,
	-1000, -1000, 1386, -1000, -1000, 1385, -1000, 521, 520, 1382,
	359, 101, -1000, 2352, -1000, -1000, 7141, -1000, 747, 14922,
	14922, 14922, -1000, -1000, 868, 15681, -1000, 3433, 14922, -1000,
	199, 198, 944, 942, 14922, 14922, 15428, 15175, 14922, 634,
	14922, 14922, 648, -1000, 652, 8461, 656, -1000, 10561, 370,
	14922, 666, 68, -1000, -1000, -1000, 317, 14922, -1000, -1000,
	-1000, 123, -1000, 121, -1000, -1000, 13657, -1000, -1000, -1000,
	-1000, -1000, -1000, 3433, 290, 285, -1000, 1381, 494, -1000,
	493, 484, 480, -1000, 188, -1000, 8461, 14922, 12392, -5,
	-6, -1000, -1000, 14922, 963, -1000, -1000, -1000, -1000, 590,
	-1000, 691, -1000, 10045, -1000, -1000, -1000, 892, -1000, -19,
	-1000, -1000, -1000, -1000, 100, -7, -1000, -1000, -1000, -1000,
	-1000, 14922, 263, 14922, 14922, 14922, 1133, 1397, 14922, -1000,
	-1000, -1000, 8461, -1000, -1000, -1000, 25, 14922, -1000, 1044,
	-1000, -8, 1063, -110, 13404, -1000, 10298, -1000, -1000, 342,
	474, 474, 1291, 1291, 1291, 1291, 229, 229, 1043, 1915,
	1903, 1903, 1903, 505, 324, 324, 1903, 1903, 1903, 1866,
	21762, 1779, 8461, 479, 744, 187, 8461, -1000, 890, -1000,
	-1000, -1000, 1071, 183, 8725, 8725, -1000, -1000, -1000, 5019,
	-1000, -1000, 182, 8461, -1000, 8461, -26, -32, -1000, -1000,
	-36, -1000, -1000, -16, 8461, 8461, 8461, 99, -1000, 97,
	543, -1000, 8461, 733, 181, 179, 8461, -1000, -1000, 21647,
	96, 1070, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 93,
	21483, 91, 21149, -1000, 8725, 8725, 8725, 5019, 178, 89,
	20873, -83, 21439, 7405, 7405, 7405, 87, 21275, 8461, -83,
	19493, 19470, 2642, -40, -41, -42, 1379, -53, 86, 334,
	332, 84, 1044, -1000, -1000, 8461, -1000, -1000, -1000, 470,
	460, 1132, -1000, 865, -1000, 586, 8461, 14922, 176, 172,
	764, -1000, 1131, 763, 1129, 763, -1000, -9, 700, -1000,
	-1000, 455, -1000, 6611, 21677, -1000, 657, 1256, -54, -1000,
	-1000, -1000, 6611, 359, 11350, 7141, -55, -1000, -1000, 747,
	-1000, 454, 1378, 82, 902, 740, 629, 607, 1377, 21677,
	-19, -1000, -19, -1000, -1000, -1000, -1000, -1000, -1000, 14922,
	-1000, 12898, 171, 14922, 166, 165, 163, 14922, -1000, 1170,
	-1000, 80, -1000, 1036, 1294, 11087, 954, 952, 11087, 961,
	737, 737, 737, -1000, 13404, 3681, -1000, -1000, 14922, 161,
	10824, 79, 1063, 8461, 1779, 8461, 8725, 8725, -1000, 1779,
	-1000, -1000, -1000, -1000, 1069, 160, 8461, 3433, 20691, 20539,
	-61, 5815, -35, 20401, -1000, -1000, 283, -1000, 77, 6877,
	-1000, 21079, 19, 19, -1000, 1396, 1167, -1000, 8461, 21245,
	-1000, 11613, 362, 742, 20378, 3433, -1000, 8461, -1000, 1062,
	8461, -1000, 3433, 8725, 8725, 8725, 8725, 8725, 8725, 8725,
	8725, 8725, 8725, 8725, 8725, 8725, 8725, 8725, 8725, 8725,
	8725, 8725, 989, 8725, 1359, 1359, 1359, -49, 5549, -1000,
	1066, 1062, 8461, 8461, 3433, 70, 69, 67, -1000, 8461,
	-83, 8461, 8461, 8461, -1000, -1000, -1000, 66, -1000, 1376,
	-1000, -1000, -1000, -1000, 1036, 20589, 14922, 14922, 14922, 1128,
	1085, -1000, 20355, -67, 14922, 14922, -1000, 973, 1004, 400,
	14922, -1000, 14922, -1000, 14922, 14922, 14922, 14922, -50, 6611,
	186, 25, 14922, -50, 652, -1000, -1000, 316, -1000, 273,
	271, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 62,
	-1000, -1000, 8989, 159, 14922, 12898, 8989, 778, -1000, -1000,
	352, 8461, 8461, 1063, 11087, 11087, 1384, 950, 11087, -1000,
	-1000, -1000, -1000, 325, -1000, 1038, 157, 14922, 13404, 1303,
	1779, 20190, 2755, 8461, 3433, 21792, -69, 8461, 8461, -1000,
	-74, -1000, 8461, -1000, -1000, 1395, 8461, 61, 60, 59,
	-1000, -1000, 21677, 8461, -1000, -1000, 19223, 8461, 58, -1000,
	56, 21677, 1066, 21677, -1000, 548, 548, 1359, 1359, 1359,
	1359, 757, 757, 519, 717, 841, 841, 841, 514, 376,
	376, 841, 841, 841, 1058, 947, 154, 21843, 8461, -75,
	-1000, -1000, -1000, 21677, 21677, 55, -1000, -1000, -1000, -83,
	2588, 20082, 20052, -1000, 47, 352, -1000, -1000, -1000, -1000,
	14922, -1000, 14922, -1000, 14922, 14922, 862, -1000, -1000, 933,
	153, 8725, 14922, -1000, 753, -79, -84, 857, -1000, 856,
	8461, -1000, 3433, 763, 763, -1000, 445, 441, -1000, -50,
	1178, 14922, 1224, -1000, -1000, -1000, 152, -1000, -1000, -1000,
	-85, -1000, 191, 1265, 8461, -1000, -1000, 147, 8989, -86,
	-1000, -1000, 44, -93, 14922, -1000, 14922, 21677, -83, -1000,
	1384, -1000, 146, 8461, 11087, -1000, -1000, 843, -144, -1000,
	313, -1000, 14922, -94, -1000, 8461, 8461, 21792, -98, -1000,
	1779, 1779, -1000, 20028, -1000, 21079, -1000, -1000, -1000, 21677,
	706, -1000, 19886, -1000, -1000, -1000, 8725, 1054, 144, 3433,
	19846, -1000, -1000, 8461, -1000, -1000, -1000, -1000, -1000, 1008,
	-1000, -1000, -1000, -1000, 8461, 21843, 141, -1000, 140, -1000,
	-1000, -1000, 677, -1000, -1000, 21677, 1269, -1000, -1000, 14922,
	14922, 468, -100, 14922, -1000, -1000, 4753, 753, 8989, 1244,
	34, 14922, 1244, 19704, 4487, -105, -1000, 14922, -1000, 753,
	136, -76, -1000, 1311, -1000, 14922, 21677, -1000, 536, 1038,
	-1000, 4224, -111, -1000, 1779, 1779, -1000, -1000, 42, 742,
	1289, -1000, 21813, 8725, 3433, -112, -1000, 19680, -1000, 19516,
	911, 14922, 14922, 14922, 377, 14922, -1000, -1000, 553, -1000,
	359, -1000, -1000, -1000, -1000, -1000, -1000, 1265, -16, 753,
	-1000, -1000, 8989, 14922, 133, -117, 518, -1000, -1000, -1000,
	-1000, 639, 8461, 21813, -119, -1000, -1000, -1000, 761, 805,
	39, -123, 132, -1000, 8461, -1000, 11350, -1000, 1244, 37,
	-1000, -125, -1000, -1000, -1000, 1394, 26, 8197, 8197, -83,
	-1000, -1000, 775, 767, 568, -1000, -1000, -1000, -1000, -1000,
	911, 14922, 21677, -107, -1000, -1000, 753, -1000, -1000, -1000,
	-1000, 3197, 829, 573, 20731, -1000, -1000, 1194, -1000, 381,
	817, 817, 761, -133, -1000, -1000, 1338, -1000, -1000, -1000,
	-1000, -1000, -1000, 1346, -1000, -1000, 968, -1000, -1000, -1000,
	7933, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1640, 1639, 1284, 129, 126, 1632, 1629, 1628, 97,
	125, 120, 130, 1606, 86, 1605, 1603, 1602, 96, 1601,
	1599, 1597, 79, 1595, 1594, 1593, 1590, 1588, 90, 21,
	159, 2099, 149, 1587, 1586, 1584, 9, 104, 61, 1583,
	47, 52, 98, 105, 893, 60, 1581, 1575, 144, 28,
	12, 161, 101, 143, 135, 122, 1574, 1569, 1563, 42,
	1562, 1559, 1558, 1553, 49, 18, 1552, 19, 1550, 16,
	1549, 1547, 99, 1545, 93, 113, 35, 116, 23, 1544,
	76, 10, 67, 1542, 36, 1541, 41, 74, 139, 1539,
	58, 146, 72, 24, 77, 1538, 1536, 1533, 1531, 80,
	1530, 89, 91, 1529, 1528, 78, 1527, 134, 136, 1522,
	1521, 123, 1520, 1519, 1518, 620, 1516, 1515, 328, 1514,
	3, 45, 65, 17, 109, 108, 38, 1512, 20, 1510,
	1404, 731, 313, 1509, 54, 43, 84, 46, 53, 50,
	1508, 1502, 111, 1500, 1499, 1497, 1495, 1494, 82, 1493,
	81, 137, 29, 51, 92, 22, 25, 31, 85, 119,
	142, 107, 1491, 1488, 115, 1487, 173, 1486, 1485, 684,
	114, 1484, 1483, 1481, 683, 646, 449, 57, 1480, 1479,
	340, 218, 1478, 1477, 124, 1474, 1471, 138, 1469, 140,
	13, 1468, 112, 1463, 95, 1461, 0, 44, 30, 1460,
	132, 66, 1458, 1455, 1454, 1450, 26, 2, 8, 5,
	6, 4, 27, 15, 1444, 1443, 131, 87, 1442, 145,
	1441, 1439, 39, 1432, 1431, 11, 1427, 14, 1423, 7,
	1, 1422, 133, 1417, 100, 1415, 1341, 1414, 141, 1413,
	1411, 1329, 83,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 4, 4, 38, 38, 37,
	37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
	37, 37, 37, 37, 35, 35, 40, 40, 40, 39,
	39, 34, 34, 5, 5, 5, 9, 10, 10, 10,
	10, 10, 10, 77, 77, 76, 76, 79, 79, 11,
	11, 12, 12, 12, 12, 12, 12, 12, 12, 165,
	165, 164, 13, 140, 140, 14, 14, 14, 14, 15,
	100, 100, 16, 16, 16, 16, 17, 21, 232, 232,
	232, 236, 236, 237, 237, 238, 238, 238, 238, 238,
	238, 238, 234, 234, 24, 24, 24, 24, 24, 119,
	115, 115, 117, 117, 117, 117, 43, 114, 114, 114,
	114, 116, 116, 116, 116, 189, 187, 187, 194, 194,
	194, 56, 56, 56, 56, 56, 57, 57, 57, 186,
	186, 186, 186, 195, 195, 195, 195, 195, 195, 58,
	58, 58, 193, 193, 25, 25, 25, 25, 25, 25,
	25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
	188, 188, 233, 233, 235, 235, 8, 8, 59, 59,
	60, 60, 122, 122, 122, 122, 121, 204, 204, 205,
	205, 205, 205, 206, 206, 206, 206, 206, 206, 206,
	202, 202, 203, 200, 200, 201, 201, 201, 201, 239,
	239, 120, 120, 63, 63, 209, 209, 209, 209, 207,
	207, 207, 207, 207, 210, 208, 211, 211, 211, 211,
	211, 151, 151, 151, 27, 7, 7, 104, 104, 67,
	67, 155, 155, 155, 68, 68, 156, 50, 50, 36,
	36, 36, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 105, 105, 106, 106, 19, 23, 26, 26, 26,
	26, 26, 241, 241, 47, 47, 47, 47, 48, 48,
	118, 118, 118, 118, 118, 42, 6, 6, 41, 41,
	18, 18, 18, 18, 18, 53, 53, 111, 111, 111,
	113, 113, 112, 112, 112, 90, 90, 28, 81, 81,
	82, 82, 162, 83, 83, 22, 22, 31, 31, 29,
	29, 29, 29, 29, 29, 30, 30, 32, 32, 32,
	32, 32, 32, 32, 217, 217, 217, 219, 219, 216,
	218, 218, 240, 240, 91, 91, 91, 62, 61, 61,
	65, 65, 64, 66, 66, 154, 88, 88, 88, 88,
	107, 108, 108, 109, 109, 110, 110, 87, 87, 137,
	137, 33, 33, 72, 72, 73, 73, 128, 128, 129,
	129, 127, 127, 127, 157, 157, 157, 157, 158, 158,
	158, 158, 158, 158, 152, 152, 152, 152, 153, 153,
	163, 163, 94, 94, 94, 94, 92, 92, 93, 93,
	159, 159, 159, 159, 89, 89, 160, 160, 160, 123,
	123, 166, 166, 166, 71, 71, 71, 167, 167, 167,
	167, 167, 167, 167, 167, 167, 167, 167, 167, 167,
	168, 168, 168, 168, 170, 170, 170, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	171, 171, 178, 178, 179, 179, 180, 181, 172, 172,
	173, 173, 174, 175, 182, 182, 182, 182, 184, 184,
	176, 176, 176, 176, 176, 177, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	102, 102, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 212, 212, 212, 212, 212,
	212, 212, 214, 214, 215, 215, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 213, 213,
	213, 220, 220, 221, 221, 222, 222, 223, 223, 225,
	226, 226, 226, 227, 231, 231, 224, 224, 228, 228,
	228, 229, 229, 230, 230, 230, 230, 230, 142, 142,
	142, 143, 143, 144, 78, 78, 139, 139, 138, 138,
	138, 141, 141, 95, 183, 183, 183, 183, 183, 183,
	183, 96, 96, 103, 97, 97, 98, 98, 98, 98,
	98, 98, 134, 135, 99, 99, 99, 136, 136, 145,
	149, 149, 148, 147, 147, 146, 146, 126, 126, 126,
	126, 125, 124, 84, 84, 242, 242, 150, 150, 85,
	85, 86, 80, 80, 161, 161, 161, 161, 74, 74,
	55, 55, 75, 75, 51, 51, 54, 52, 52, 52,
	52, 69, 69, 70, 70, 49, 49, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 185, 185,
	185, 44, 44, 44, 45, 45, 46, 46, 191, 191,
	191, 192, 192, 192, 192, 190, 190, 190, 190, 190,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 4, 6, 1, 3, 2,
	5, 3, 6, 4, 6, 6, 6, 4, 8, 2,
	3, 3, 6, 4, 3, 2, 1, 1, 0, 2,
	0, 2, 0, 1, 1, 1, 6, 3, 5, 4,
	6, 4, 6, 1, 3, 1, 2, 2, 3, 2,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 1, 5, 3, 0, 1, 1, 1, 1, 3,
	3, 0, 2, 3, 2, 3, 6, 6, 1, 2,
	2, 1, 1, 1, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 2, 3, 6, 3, 1, 5,
	2, 1, 1, 1, 3, 3, 2, 3, 3, 3,
	3, 1, 3, 3, 2, 1, 1, 3, 1, 1,
	1, 2, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 1, 1, 1, 1,
	1, 0, 1, 1, 2, 2, 4, 2, 4, 4,
	4, 4, 4, 4, 3, 3, 4, 3, 2, 4,
	2, 0, 2, 0, 2, 0, 6, 9, 1, 0,
	1, 3, 1, 1, 1, 1, 3, 2, 0, 3,
	1, 2, 2, 2, 1, 1, 2, 4, 2, 5,
	6, 7, 5, 3, 1, 4, 5, 5, 10, 1,
	1, 4, 0, 3, 0, 2, 2, 2, 0, 1,
	1, 2, 2, 0, 3, 3, 2, 1, 1, 2,
	2, 1, 2, 1, 4, 10, 13, 1, 0, 1,
	3, 3, 3, 5, 1, 3, 1, 2, 0, 1,
	1, 0, 6, 6, 8, 6, 8, 8, 10, 8,
	10, 1, 0, 2, 0, 2, 2, 3, 3, 2,
	2, 2, 1, 0, 1, 3, 2, 0, 2, 1,
	1, 1, 3, 3, 0, 3, 4, 7, 3, 0,
	6, 6, 8, 5, 7, 1, 3, 1, 4, 2,
	8, 5, 4, 3, 0, 2, 0, 8, 1, 3,
	1, 1, 3, 5, 5, 1, 1, 3, 3, 1,
	2, 3, 2, 3, 4, 1, 1, 8, 8, 1,
	2, 4, 4, 4, 2, 2, 3, 1, 3, 6,
	1, 0, 1, 0, 1, 1, 0, 1, 1, 0,
	1, 0, 3, 1, 3, 2, 2, 2, 1, 1,
	2, 2, 3, 1, 1, 1, 1, 3, 0, 2,
	0, 2, 3, 2, 0, 1, 3, 3, 1, 1,
	3, 2, 4, 0, 4, 2, 1, 4, 3, 4,
	5, 4, 5, 4, 5, 2, 4, 1, 1, 0,
	5, 0, 2, 2, 2, 1, 1, 0, 4, 2,
	1, 2, 2, 4, 1, 3, 1, 2, 3, 2,
	0, 2, 5, 2, 3, 4, 0, 1, 1, 1,
	1, 2, 4, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 5, 0, 1, 1, 1,
	1, 1, 1, 2, 2, 2, 2, 2, 1, 1,
	3, 0, 1, 1, 1, 1, 5, 2, 1, 1,
	1, 1, 4, 1, 2, 2, 1, 1, 1, 0,
	1, 1, 4, 1, 4, 1, 1, 1, 1, 1,
	1, 1, 3, 3, 3, 3, 3, 3, 3, 0,
	1, 4, 1, 3, 3, 5, 2, 2, 2, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	2, 2, 3, 4, 4, 5, 3, 4, 3, 3,
	4, 3, 4, 3, 4, 5, 6, 6, 7, 6,
	7, 6, 7, 3, 4, 1, 3, 2, 2, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 5,
	6, 6, 7, 1, 1, 1, 3, 1, 1, 1,
	2, 2, 2, 1, 1, 3, 5, 6, 8, 6,
	6, 4, 4, 1, 1, 1, 5, 1, 3, 1,
	3, 1, 1, 1, 1, 6, 4, 4, 4, 4,
	6, 5, 5, 5, 4, 8, 6, 6, 4, 4,
	4, 5, 0, 5, 0, 2, 0, 1, 3, 3,
	2, 2, 0, 6, 1, 0, 3, 0, 2, 2,
	0, 1, 4, 2, 2, 2, 2, 2, 4, 3,
	5, 4, 3, 5, 1, 3, 1, 3, 3, 3,
	2, 1, 3, 3, 1, 1, 1, 1, 1, 1,
	1, 4, 3, 2, 3, 0, 3, 3, 2, 2,
	1, 0, 2, 2, 3, 2, 1, 1, 3, 5,
	1, 2, 4, 2, 0, 1, 0, 1, 1, 3,
	5, 2, 2, 1, 2, 1, 0, 1, 1, 1,
	3, 3, 1, 3, 3, 2, 1, 1, 1, 3,
	1, 3, 1, 3, 1, 2, 3, 1, 2, 2,
	1, 1, 3, 3, 0, 1, 2, 1, 1, 1,
	1, 6, 2, 3, 5, 1, 1, 1, 1, 2,
	2, 1, 1, 1, 1, 0, 3, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -9, -10, -11, -13,
	-15, -16, -17, -18, -20, -21, -23, -22, -24, -25,
	-26, -19, -27, -28, 19, -6, -7, -8, -218, 86,
	94, 183, 93, 79, 109, 197, 204, -29, -31, 212,
	-119, 213, 29, 221, 53, 89, 199, 194, 241, 60,
	-217, -32, -30, 287, 262, 268, 207, -33, 228, 255,
	290, 228, 72, 120, 81, 124, 249, 248, 72, 120,
	228, -12, 287, -22, -5, -10, -4, -18, -28, -9,
	-11, 19, -44, 4, -196, -198, 16, 17, 19, 28,
	29, 34, 38, 41, 52, 53, 54, 56, 58, 59,
	62, 63, 70, 71, 72, 73, 75, 79, 81, 85,
	86, 88, 93, 94, 99, 100, 103, 105, 110, 115,
	116, 121, 124, 132, 134, 135, 140, 143, 146, 148,
	149, 150, 151, 152, 154, 155, 157, 159, 156, 162,
	164, 165, 171, 174, 177, 178, 181, 183, 185, 186,
	187, 189, 190, 194, 192, 193, 195, 197, 199, 200,
	202, 204, 205, 206, 209, 210, 212, 213, 215, 218,
	220, 221, 224, 222, 227, 229, 230, 237, 241, 242,
	243, 244, 247, 248, 249, 252, 253, 254, 258, 263,
	264, 265, 266, 30, 31, 32, 33, 35, 36, 39,
	40, 44, 45, 46, 48, 74, 76, 77, 92, 95,
	101, 111, 113, 117, 118, 125, 126, 127, 129, 138,
	161, 163, 172, 176, 180, 182, 188, 201, 208, 216,
	217, 223, 225, 232, 233, 234, 238, 239, 255, 256,
	-44, -44, 183, 18, -236, 18, -237, -238, 60, 86,
	109, 207, 124, 81, 248, -236, -48, 204, -44, -115,
	143, 210, 201, 237, -116, -114, -189, 232, 152, -76,
	-44, 4, 72, 52, 73, 110, 120, 121, 57, 58,
	135, 229, 232, 237, 18, 60, -241, 237, 237, -241,
	-241, -47, 237, 235, -48, -240, 228, 228, -104, 72,
	246, -30, -32, -31, -64, -65, 245, 128, 91, 170,
	-29, -31, -217, -219, 189, -216, -44, -219, -61, -62,
	18, 83, 291, -159, -51, 168, -44, -86, 287, -3,
	-159, 117, -44, -54, 117, -51, 107, 130, 130, -160,
	-159, -44, 117, -55, 117, -54, -77, 117, -76, -165,
	-164, -192, 4, -196, -198, -197, 255, 50, 61, 108,
	123, 131, 133, 139, 141, 153, 173, 175, 198, 214,
	228, -140, 287, -100, 287, -44, 18, 167, 291, 167,
	-44, -115, 46, -115, 287, -117, -42, -43, 132, 185,
	235, 272, 107, 266, -58, 5, 78, -79, 289, 107,
	-233, 167, 107, 107, 107, 107, 107, -188, 107, 266,
	132, 185, 228, -118, -42, -43, -118, 235, -48, -89,
	-159, -76, 117, 120, -44, 117, -64, -65, -88, -107,
	-108, 142, 166, -91, 18, 83, -91, -91, 38, 288,
	288, 291, -219, -70, 287, -80, -161, -130, 280, -132,
	278, 279, 284, 158, 267, -142, -51, -133, 9, 287,
	-145, -214, -31, 92, 24, -143, -144, 201, -44, 7,
	8, 5, 6, -49, -168, -177, 240, 96, 160, 42,
	-212, -213, 4, -196, -191, -169, -179, -173, -176, 129,
	50, 65, 68, 66, 69, 211, 250, 43, 95, 176,
	180, 225, 238, 239, 117, 161, 118, 48, 111, 138,
	85, 31, 33, 35, 36, 44, 45, 74, 76, 77,
	101, 125, 126, 127, 163, 188, 216, 223, 233, 234,
	256, -197, -180, -181, -174, -175, -182, -80, -86, 280,
	-51, 287, -84, -126, -125, -124, 285, 289, -85, -150,
	-130, 78, -38, 192, -37, 17, 19, 86, 253, 92,
	192, 192, 92, 292, -160, -53, -51, -53, 212, -44,
	25, 92, -40, 291, 41, 195, 92, -40, 291, 92,
	288, 291, -159, 117, 25, -139, -166, -167, -169, -178,
	-172, -176, -177, 34, 40, 39, 230, 208, 217, 32,
	125, 126, 127, 216, 31, 188, 101, 85, 77, 76,
	163, 36, 35, -180, -181, -174, -175, 74, 233, 234,
	129, 33, 45, 44, 256, 223, -78, -130, -232, -75,
	228, 72, -52, -44, 280, -238, -232, 25, -78, 291,
	291, 140, -57, 146, 157, 115, -187, 78, -194, -186,
	-151, 9, 240, 96, 167, -193, 8, 279, -185, -192,
	5, 7, 278, -187, 78, 63, -195, 5, 4, -177,
	-151, 78, 143, 289, -190, 4, -196, -198, -197, -199,
	18, 20, 21, 22, 23, 24, 25, 26, 27, 37,
	42, 43, 47, 49, 51, 57, 60, 64, 65, 66,
	67, 68, 69, 78, 80, 82, 83, 84, 87, 89,
	91, 96, 97, 98, 104, 106, 107, 109, 112, 114,
	119, 120, 122, 128, 130, 136, 137, 142, 144, 145,
	158, 160, 166, 167, 168, 169, 170, 179, 184, 191,
	196, 207, 211, 219, 226, 228, 231, 235, 236, 240,
	245, 246, 250, 251, 257, 259, 260, 261, 262, -189,
	-235, 104, -232, -189, -189, -189, -189, -189, -189, 140,
	-189, 291, 291, -48, -40, 291, 287, 158, -45, 117,
	-44, -41, 88, 158, -88, -108, -107, -109, -130, 18,
	-130, -132, -30, -30, -30, -66, -154, -130, -216, 25,
	-69, -44, -72, 291, 107, 10, 49, 28, 278, 279,
	280, 281, 102, 282, 275, 276, 277, 274, 270, 271,
	272, 55, 147, 203, 12, 13, 14, 22, 169, 141,
	267, 214, 131, 30, 119, 25, 4, -130, -130, -130,
	-130, -130, 175, -31, -130, -78, -84, -31, -138, 285,
	287, -84, 287, 5, 5, 287, -146, -130, -220, 263,
	104, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 182, -184, 258, -184,
	-184, -170, 287, -170, -171, 287, -170, 264, 268, 287,
	-72, -51, -126, -130, -190, 280, 291, 288, 291, 235,
	-105, 57, 51, -121, 117, 51, -200, -44, 57, -201,
	47, 246, 184, 106, -105, 57, -105, 57, 57, -159,
	235, 235, -54, -44, -123, 260, -111, -22, 287, 78,
	25, -111, -81, -82, -162, -83, -51, 287, -44, -44,
	-54, -55, -76, -77, -12, -164, 92, -14, -22, -18,
	-28, -9, 288, 291, -71, 24, -101, 287, 265, 150,
	75, 116, 149, -102, 206, 288, 291, 235, 291, -75,
	-69, -125, -124, 107, 237, 288, -43, -42, -56, 187,
	218, 193, 209, 291, 8, 7, 7, 5, -190, -234,
	-44, -43, -42, -159, -59, -60, -122, -121, -202, -203,
	-200, 120, 246, 97, 92, 167, 158, 272, 92, -110,
	201, 202, 291, -36, 26, 82, 287, 291, 288, -123,
	-161, -73, -157, -159, -31, -158, 287, -166, -76, 232,
	-130, -130, -130, -130, -130, -130, -130, -130, -130, -130,
	-130, -130, -130, -130, -130, -130, -130, -130, -130, -130,
	-130, -130, 141, 214, 30, 119, 235, 160, 158, 240,
	96, 247, 83, 164, -242, 226, 27, -136, -31, 287,
	-190, -142, 201, 287, 288, 291, -78, -141, 286, -138,
	-78, 288, 288, -78, 257, 18, 83, 280, -101, 7,
	-149, -148, 259, -221, 99, 112, 287, 288, 288, -130,
	-95, -183, 4, 265, 150, 75, 116, 149, 206, -96,
	-130, -97, -131, -132, 278, 279, 284, 287, 201, -98,
	-130, -78, -130, 37, 137, 236, -99, -130, 107, -78,
	-130, -130, -130, -78, -78, -78, 287, 7, 7, 232,
	232, 7, -123, 288, 286, 295, -150, -37, -51, -44,
	-44, 158, -121, 117, -166, -44, 287, 287, 134, 134,
	-44, -44, 117, -44, 117, -44, -44, -38, 192, -44,
	-44, 192, -90, 196, -130, -90, -113, 167, -74, -51,
	255, -44, 196, -72, 291, 272, -74, -40, -40, -159,
	-166, 285, 285, 7, 235, 235, 235, 235, 287, -130,
	-234, -52, -234, -42, 244, 54, 187, -194, -101, 291,
	288, 291, -45, 120, -45, -76, -51, 92, 5, -44,
	-154, -14, -44, -87, 112, 291, 61, -94, 133, 153,
	108, 139, 198, 123, -127, 292, -153, -152, 25, -44,
	-31, -158, -157, 266, -130, 235, -242, 226, -136, -130,
	160, 240, 96, 247, 83, 164, 107, 287, -131, -131,
	-78, 287, -78, -130, 286, 286, 291, 288, -65, 291,
	-64, -130, -78, -78, 288, 288, -147, -148, 87, -130,
	-226, 174, 287, 287, -130, 25, 288, 107, 288, -103,
	179, 288, 10, 278, 279, 280, 281, 102, 282, 275,
	276, 277, 274, 270, 271, 272, 55, 147, 203, 12,
	13, 14, 131, 119, -131, -131, -131, -78, 287, 288,
	-134, -135, 107, 104, 25, -99, -99, -99, 288, 107,
	-78, 291, 291, 291, 288, 288, 288, 7, 288, 291,
	288, 266, 266, 288, -87, -130, 235, 235, 92, 158,
	-204, -201, -130, -69, 287, 287, -35, 86, 212, -106,
	92, -40, 92, -40, 235, -105, 57, 235, -80, 196,
	56, 288, 291, -80, -123, -82, -150, 288, 286, 7,
	7, 288, 150, 116, 149, -102, 149, -102, -102, 7,
	-44, -122, 287, -45, 287, 287, 287, -44, -41, 288,
	-137, 114, 38, -157, 133, 133, -157, -94, 133, -92,
	173, -92, -92, -153, -190, 293, -44, 287, 288, -130,
	-130, -131, -131, 107, 287, -130, -139, 22, 22, 288,
	-78, 288, 291, 288, -138, 288, 257, -65, -65, -65,
	5, 89, -130, 231, -227, -44, 287, 260, -64, 288,
	-166, -130, -134, -130, -166, -131, -131, -131, -131, -131,
	-131, -131, -131, -131, -131, -131, -131, -131, -131, -131,
	-131, -131, -131, -131, 83, 158, 164, -131, 291, -78,
	288, -135, -134, -130, -130, -166, 288, 288, 288, -78,
	-130, -130, -130, 288, 7, -137, 286, -44, -44, -121,
	92, -205, 57, -206, 49, 97, 158, 160, 246, 184,
	47, 78, 191, 288, 288, -69, -69, 158, 78, 158,
	78, 71, 242, -44, -44, -51, -44, -44, -44, -80,
	-112, 287, 167, -22, -51, -90, 272, 286, 286, 288,
	-67, -155, -44, -215, 287, -212, -213, -49, 287, -68,
	-156, -44, -59, -67, 167, -222, 261, -130, -78, -157,
	-157, -93, 251, 167, 133, -157, -163, 269, -129, -128,
	105, 156, 287, -69, -152, 22, 22, -130, -139, 288,
	-130, -130, 288, -130, 5, -130, 288, 288, 288, -130,
	-231, -44, -130, 288, 288, -135, 107, 83, 164, 287,
	-130, 288, 288, 291, 288, 288, 288, -222, -121, -44,
	-76, -44, 160, 134, 287, -131, -51, -120, -239, 59,
	224, 288, 288, 160, 160, -130, -166, -40, -40, 235,
	235, 84, -69, 57, -86, -31, 287, 288, 291, -50,
	-84, 49, -50, -130, 287, -67, 288, 291, 288, 288,
	-51, -223, -225, -44, -93, 287, -130, -157, 164, 291,
	294, 272, -69, 288, -130, -130, 288, 288, -65, -224,
	178, 288, -131, 107, 287, -139, 288, -130, -206, -130,
	-46, 287, 287, 191, -39, 49, -44, -44, 248, 159,
	288, -44, -120, -155, -36, -76, -36, 288, -78, 288,
	-156, -120, 287, 291, 25, -69, 227, -128, -190, 288,
	288, -65, 38, -131, -139, 288, 288, 288, -209, 148,
	-44, -69, -51, -34, 251, -76, 212, -123, -50, -65,
	-120, -67, -225, -227, 288, 232, -228, 186, 202, -78,
	288, -207, -210, -208, 167, 108, 177, 215, 288, 288,
	-63, 287, -130, -81, -36, 288, 288, 5, 288, -229,
	-230, 30, 243, 63, -130, -229, -208, 167, -210, 167,
	248, 81, -209, -69, -123, -120, -230, 181, 103, 201,
	181, 103, -211, 155, 195, 41, 212, -211, -207, 288,
	22, 16, 160, 78, -230,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 0, 53, 54, 55, 0, 0,
	351, 0, 0, 0, 0, 0, 0, 325, -2, 0,
	118, 0, 283, 0, 283, 283, 287, 0, 353, 248,
	350, -2, 361, 0, 0, 0, 359, 339, 0, 0,
	-2, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 69, 0, 71, 72, 73, 74, 75, 76, 77,
	78, 0, 84, 771, 772, 773, 790, 791, 792, 793,
	794, 795, 796, 797, 798, 799, 800, 801, 802, 803,
	804, 805, 806, 807, 808, 809, 810, 811, 812, 813,
	814, 815, 816, 817, 818, 819, 820, 821, 822, 823,
	824, 825, 826, 827, 828, 829, 830, 831, 832, 833,
	834, 835, 836, 837, 838, 839, 840, 841, 842, 843,
	844, 845, 846, 847, 848, 849, 850, 851, 852, 853,
	854, 855, 856, 857, 858, 859, 860, 861, 862, 863,
	864, 865, 866, 867, 868, 869, 870, 871, 872, 873,
	874, 875, 876, 877, 878, 879, 880, 881, 882, 883,
	884, 885, 886, 887, 888, 889, 890, 891, 892, 893,
	894, 895, 896, 897, 898, 899, 900, 901, 902, 903,
	904, 905, 906, 907, 908, 909, 910, 911, 912, 913,
	914, 915, 916, 917, 918, 919, 920, 921, 922, 923,
	924, 925, 926, 927, 928, 929, 930, 931, 932, 933,
	934, 935, 936, 937, 938, 939, 940, 941, 942, 943,
	91, 92, 851, 94, 0, 101, 102, 103, 105, 106,
	107, 108, 109, 110, 111, 0, 276, 865, 289, 114,
	831, 869, 931, 881, 121, 131, 0, 937, -2, 135,
	65, 164, 165, 0, 167, 183, 0, 0, 0, 0,
	0, 181, 0, 0, 178, 0, 294, 282, 294, 279,
	280, 281, 284, 0, 275, 0, 352, 0, 0, 0,
	247, -2, 335, 336, -2, 0, 356, 356, 356, 0,
	0, 336, 0, 344, 855, 347, 754, 345, 0, 0,
	358, 357, 0, 340, 420, 0, 744, 381, 0, 2,
	0, 917, 0, 0, 917, 0, 0, 0, 0, 0,
	426, 57, 917, 48, 917, 740, 48, 917, 63, 0,
	79, 81, 781, 782, 783, 784, 942, 944, 945, 946,
	947, 948, 949, 950, 951, 952, 953, 954, 955, 956,
	0, 0, 0, 89, 0, 93, 95, 0, 0, 0,
	288, 115, 907, 117, 0, 120, 122, 123, 0, 0,
	0, 0, 0, 0, 134, 159, 160, 66, 0, 0,
	185, 0, 0, 0, 0, 0, 0, 174, 0, 175,
	0, 177, 0, 277, 290, 291, 278, 0, 286, 48,
	424, 0, 917, 775, 299, 917, -2, 0, 331, 368,
	369, 0, 0, 0, 354, 355, 0, 0, 0, 327,
	328, 0, 346, 0, 0, 384, 732, 736, 737, 512,
	0, 0, 0, 0, 0, 0, 593, 594, 595, 0,
	597, 598, 599, 912, 0, 603, 604, 931, 744, 757,
	758, 759, 760, 0, 0, 0, 765, 766, 767, 716,
	642, 613, -2, -2, 755, 450, 451, 452, 453, -2,
	944, 617, 619, 621, 622, 623, 624, 0, 913, 927,
	928, 936, 940, 941, 917, 924, 918, 908, 915, 923,
	813, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, 780, 474, 475, 480, 481, 483, 384, 382, 421,
	422, 0, 745, 723, 717, 718, 0, 0, 0, 729,
	727, 728, 25, 272, 27, 0, 272, 272, 0, 0,
	0, 0, 0, 0, 430, 0, 305, 0, 0, 427,
	0, 0, 59, 0, 46, 47, 0, 61, 0, 0,
	351, 0, 0, 917, 351, 0, 676, 436, 437, 438,
	439, 440, 509, 443, 444, 445, 446, 447, 448, 449,
	457, 458, 459, 460, 461, 462, 471, 0, 456, 456,
	456, 468, 469, 472, 473, 478, 479, 490, 491, 493,
	495, 489, 489, 489, 486, 487, 0, 674, 0, 98,
	0, 808, 742, 747, 750, 104, 0, 0, 0, 0,
	0, 0, 126, 146, 147, 148, 127, 129, 136, 138,
	139, 140, 149, 150, 151, 152, 241, 0, 243, 162,
	163, 768, 0, 128, 130, 132, 133, 153, 154, 0,
	156, 157, 158, 0, 67, 785, 786, 787, 788, 789,
	957, 958, 959, 960, 961, 962, 963, 964, 965, 966,
	967, 968, 969, 970, 971, 972, 973, 974, 975, 976,
	977, 978, 979, 980, 981, 982, 983, 984, 985, 986,
	987, 988, 989, 990, 991, 992, 993, 994, 995, 996,
	997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006,
	1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016,
	1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026,
	1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 166,
	168, 0, 182, 169, 170, 171, 172, 173, 180, 176,
	179, 0, 0, 285, 244, 0, 189, 0, 0, 917,
	774, 296, 0, 0, 334, 366, 367, 370, 373, 374,
	371, 512, 341, 342, 343, 362, 363, 261, 348, 0,
	0, 751, 430, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 726, 0, 0, 735, 516, 517, 518,
	540, 541, 0, -2, 674, 0, 600, 601, 602, 0,
	0, -2, 0, 762, 509, 0, 0, 715, 644, 0,
	0, 0, 0, 0, 0, 0, 695, 701, 0, 0,
	0, 0, 0, 0, 0, 0, 464, 477, 488, 485,
	484, 466, 0, 465, 463, 0, 467, 0, 0, 0,
	430, 0, 724, 0, 721, 722, 0, 731, 0, 0,
	0, 0, 271, 29, 917, 0, 39, 0, 0, 214,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 746, 316, 0, 316, 307, 0, 0,
	0, 303, 384, 318, 320, 321, 0, 0, 428, 58,
	741, 48, 64, 48, 70, 80, 0, 82, 85, 86,
	87, 88, 83, 0, 431, 433, 441, 0, 496, 497,
	498, 499, 500, 501, 510, 90, 0, 0, 0, 99,
	100, 748, 749, 0, 0, 119, 124, 125, 295, 0,
	143, 0, 145, 0, 242, 770, 769, 509, 68, 184,
	112, 292, 293, 425, 0, 188, 190, 192, 193, 194,
	195, 775, 0, 775, 0, 0, 0, 0, 0, 372,
	375, 376, 0, 365, 259, 260, 351, 0, 753, 378,
	733, 383, 385, 393, 409, 396, 0, 513, 514, 0,
	519, 520, 521, 522, 523, 524, 525, 526, 527, 528,
	-2, -2, -2, 532, 533, 534, -2, -2, -2, 538,
	539, -2, 0, 0, 726, 0, 0, 546, 0, 549,
	551, 553, 0, 0, 0, 0, 725, 563, 707, 0,
	734, 548, 0, 0, 596, 0, 0, 0, 680, 681,
	0, -2, 605, 361, 0, 0, 0, 0, 763, 0,
	714, 710, 0, 652, 0, 0, 0, 618, 620, 0,
	0, 0, 684, 685, 686, 687, 688, 689, 690, 0,
	0, 0, 0, 565, 0, 0, 0, 0, 931, 0,
	674, 700, 0, 0, 0, 0, 0, 674, 0, 706,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 378, 423, 719, 0, 730, 28, 263, 0,
	0, 0, 31, 917, 198, 0, 0, 0, 0, 0,
	274, 40, 917, 48, 917, 48, 41, 26, 272, 262,
	265, 0, 56, 0, 429, 300, 301, 0, 0, 738,
	309, 306, 0, 430, 0, 0, 0, 60, 62, 0,
	677, 0, 0, 0, 0, 0, 0, 0, 0, 675,
	96, 743, 97, 116, 141, 142, 144, 137, 155, 0,
	186, 0, 0, 775, 0, 0, 0, 0, 298, 299,
	364, 0, 752, 380, 0, 0, 0, 0, 0, 0,
	417, 417, 417, 415, 409, 0, 395, 408, 0, 407,
	-2, 396, 0, 0, -2, 0, 0, 0, 564, -2,
	547, 550, 552, 554, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 675, 678, 679, 0, -2, 0, 0,
	360, 361, 361, 361, 611, 0, 0, 711, 0, 0,
	612, 0, 0, 0, 0, 0, 626, 0, 627, 0,
	0, 628, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 567, 568, 569, 0, 0, 629,
	698, 699, 0, 0, 0, 0, 0, 0, 634, 0,
	705, 0, 0, 0, 638, 639, 640, 0, 454, 0,
	470, 492, 494, 482, 380, 0, 0, 0, 0, 0,
	196, 213, 0, 0, 0, 0, 33, 0, 0, 0,
	0, 37, 0, 43, 0, 0, 0, 0, 315, 0,
	314, 0, 0, 304, 316, 319, 322, 0, 434, 0,
	0, 442, 502, 503, 504, 505, 506, 507, 508, 0,
	113, 191, 0, 0, 0, 189, 0, 0, 297, 349,
	646, 0, 0, 386, 0, 0, 0, 0, 0, 412,
	416, 413, 414, 411, 391, 0, 405, 0, 398, 515,
	-2, 0, 0, 0, 0, -2, 0, 0, 0, 708,
	0, 669, 0, -2, 682, 606, 0, 0, 0, 0,
	764, 709, 713, 0, 650, 651, 655, 0, 0, 616,
	0, 683, 692, 693, 566, 570, 571, 572, 573, 574,
	575, 576, 577, 578, 579, -2, -2, -2, 583, 584,
	585, -2, -2, -2, 0, 0, 0, 694, 0, 0,
	672, 696, 697, 702, 703, 0, 631, 632, 633, 704,
	0, 0, 0, 476, 0, 646, 720, 267, 269, 30,
	0, 197, 0, 200, 0, 0, 0, 204, 205, 0,
	0, 0, 0, 215, 222, 0, 0, 0, 45, 0,
	0, 273, 0, 48, 48, 264, 0, 0, 266, 302,
	0, 0, 0, 308, 739, 317, 0, 435, 432, 511,
	0, 249, 258, 258, 0, 614, 615, 0, 0, 0,
	254, 256, 0, 0, 0, 337, 0, 379, 377, 399,
	0, 401, 0, 0, 0, 403, 394, 0, 0, 389,
	0, 388, 0, 0, 397, 0, 0, -2, 0, 557,
	-2, -2, 668, 675, 761, 361, 607, 609, 610, 712,
	657, 654, 0, 641, 625, 691, 0, 0, 0, 0,
	675, 671, 630, 0, 636, 637, 455, 338, 32, 0,
	201, 202, 203, 206, 0, 208, 777, 216, 0, 219,
	220, 217, 0, 34, 35, 44, 50, 36, 42, 0,
	0, 0, 0, 0, 323, 324, 0, 222, 0, 261,
	756, 0, 261, 0, 0, 0, 212, 0, 187, 222,
	0, 645, 647, 0, 400, 0, 419, 402, 0, 0,
	392, 0, 0, 406, -2, -2, 558, 670, 0, 361,
	0, 643, -2, 0, 0, 0, 673, 0, 199, 0,
	228, 0, 0, 0, 52, 0, 268, 270, 0, 311,
	430, 313, 210, 250, 251, 257, 252, 258, 361, 222,
	255, 245, 0, 0, 0, 0, 0, 390, 387, 404,
	608, 660, 0, -2, 0, 591, 635, 207, 233, 0,
	0, 0, 224, 38, 0, 49, 0, 312, 261, 0,
	211, 0, 648, 649, 418, 0, 0, 0, 0, 656,
	592, 209, 229, 230, 0, 225, 226, 227, 776, 221,
	228, 0, 51, 430, 253, 606, 222, 410, 653, 658,
	661, -2, 884, 805, 0, 659, 231, 0, 232, 0,
	0, 0, 233, 0, 310, 246, 0, 663, 664, 665,
	666, 667, 234, 0, 237, 238, 0, 235, 218, 223,
	0, 236, 239, 240, 662,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 276, 3, 282, 277, 3,
	287, 288, 280, 278, 291, 279, 289, 281, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 295, 290,
	270, 272, 271, 3, 292, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 285, 3, 286, 275, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 293, 274, 294, 284,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 273, 57613, 283, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:691
		{
			sqllex.(*scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:697
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:703
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 17:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:726
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 24:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:736
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 25:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:742
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.qname(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 26:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:746
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.qname(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 27:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:752
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 28:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:756
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 29:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:763
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 30:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:768
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 31:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:773
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 32:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:778
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 33:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:783
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: sqlDollar[3].str, Default: sqlDollar[4].union.expr()}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:788
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: sqlDollar[3].str}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:792
		{
			unimplemented()
		}
	case 36:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:795
		{
			sqlVAL.union.val = &AlterTableDropColumn{columnKeyword: sqlDollar[2].union.bool(), IfExists: true, Column: sqlDollar[5].str}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:800
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        sqlDollar[3].str,
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:810
		{
		}
	case 39:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:813
		{
			sqlVAL.union.val = &AlterTableAddConstraint{ConstraintDef: sqlDollar[2].union.constraintDef()}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:817
		{
			unimplemented()
		}
	case 41:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:819
		{
			unimplemented()
		}
	case 42:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:822
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   sqlDollar[5].str,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 43:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:831
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   sqlDollar[3].str,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 44:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:841
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 45:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:845
		{
			sqlVAL.union.val = nil
		}
	case 46:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:851
		{
			sqlVAL.union.val = DropCascade
		}
	case 47:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:855
		{
			sqlVAL.union.val = DropRestrict
		}
	case 48:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:859
		{
			sqlVAL.union.val = DropDefault
		}
	case 49:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:864
		{
			unimplementedWithIssue(2473)
		}
	case 50:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:865
		{
		}
	case 51:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:868
		{
			unimplemented()
		}
	case 52:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:869
		{
		}
	case 56:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:880
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retExprs()}
		}
	case 57:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:887
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 58:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:891
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:895
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:903
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:911
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.qnames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:915
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.qnames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:921
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:925
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 65:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:931
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 66:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:935
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:941
		{
			sqlVAL.union.val = Indirection{NameIndirection(sqlDollar[2].str)}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:945
		{
			sqlVAL.union.val = append(sqlDollar[1].union.indirect(), NameIndirection(sqlDollar[3].str))
		}
	case 69:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:952
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 70:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:956
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 71:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:962
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 78:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:971
		{ /* SKIP DOC */
		}
	case 79:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:975
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:979
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 82:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:989
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:999
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 84:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1003
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 85:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1009
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 89:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1019
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1030
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 91:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1034
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 92:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1041
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1047
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1053
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1057
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1064
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: NameList(sqlDollar[6].union.strs()), Targets: sqlDollar[4].union.targetList()}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1071
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: NameList(sqlDollar[6].union.strs()), Targets: sqlDollar[4].union.targetList()}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1078
		{
			sqlVAL.union.val = TargetList{Tables: QualifiedNames(sqlDollar[1].union.qnames())}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1082
		{
			sqlVAL.union.val = TargetList{Tables: QualifiedNames(sqlDollar[2].union.qnames())}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1086
		{
			sqlVAL.union.val = TargetList{Databases: NameList(sqlDollar[2].union.strs())}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1093
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1096
		{
		}
	case 103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1100
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1104
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 105:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1111
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 106:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1115
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1119
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1123
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1127
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 110:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1131
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 111:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1135
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 112:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1143
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1147
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1155
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1159
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 116:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1163
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1167
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1170
		{ /* SKIP DOC */
		}
	case 119:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1176
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1182
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1189
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1193
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1197
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1201
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1208
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1214
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname(), Values: sqlDollar[3].union.exprs()}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1218
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname(), Values: sqlDollar[3].union.exprs()}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1222
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname()}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1226
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname()}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1233
		{
			unimplemented()
		}
	case 133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1236
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1239
		{
			unimplemented()
		}
	case 136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1246
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1250
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1258
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1264
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1268
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1272
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1276
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1280
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1286
		{
			sqlVAL.union.val = Low
		}
	case 147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1290
		{
			sqlVAL.union.val = Normal
		}
	case 148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1294
		{
			sqlVAL.union.val = High
		}
	case 149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1300
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1304
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1308
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1323
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1327
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1331
		{
			d, err := ParseDInterval(sqlDollar[2].str)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1341
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1345
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1350
		{
			unimplemented()
		}
	case 160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1351
		{
			unimplemented()
		}
	case 161:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1352
		{
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1356
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1360
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1366
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1370
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1374
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.qname()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1378
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1382
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.strs()}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1386
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1390
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1394
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.qname()}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1398
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.qname()}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1402
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1406
		{
			sqlVAL.union.val = &ShowTables{Name: sqlDollar[3].union.qname()}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1410
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1414
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1418
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1422
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 179:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1426
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.qname()}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1432
		{
			sqlVAL.union.val = sqlDollar[2].union.qname()
		}
	case 181:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1436
		{
			sqlVAL.union.val = (*QualifiedName)(nil)
		}
	case 182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1442
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 183:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1447
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1453
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 185:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1457
		{
			sqlVAL.union.val = []string(nil)
		}
	case 186:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1464
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.qname(), IfNotExists: false, Defs: sqlDollar[5].union.tblDefs()}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1468
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.qname(), IfNotExists: true, Defs: sqlDollar[8].union.tblDefs()}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1475
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 190:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1481
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1485
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 192:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1491
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1497
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1503
		{
			sqlVAL.union.val = newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
		}
	case 197:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1509
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 198:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1513
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1519
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1523
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1526
		{
			unimplemented()
		}
	case 202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1528
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1546
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1550
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1554
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1558
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1562
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1566
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1570
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.qname(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1579
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.idxElems(),
				Storing: sqlDollar[6].union.strs(),
			}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1587
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:    Name(sqlDollar[3].str),
					Columns: sqlDollar[5].union.idxElems(),
					Storing: sqlDollar[7].union.strs(),
				},
			}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1599
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.famElems(),
			}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1611
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 214:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1616
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 215:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1622
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1628
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[3].union.strs()),
					Storing: sqlDollar[5].union.strs(),
				},
			}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1637
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[4].union.strs()),
				},
				PrimaryKey: true,
			}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1646
		{
			unimplemented()
		}
	case 221:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1663
		{
			sqlVAL.union.val = sqlDollar[3].union.strs()
		}
	case 222:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1667
		{
			sqlVAL.union.val = []string(nil)
		}
	case 223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1673
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 224:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1677
		{
			sqlVAL.union.val = []string(nil)
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1682
		{
			unimplemented()
		}
	case 226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1683
		{
			unimplemented()
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1684
		{
			unimplemented()
		}
	case 228:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1685
		{
		}
	case 229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1692
		{
			unimplemented()
		}
	case 230:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1693
		{
			unimplemented()
		}
	case 231:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1694
		{
			unimplemented()
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1695
		{
			unimplemented()
		}
	case 233:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1696
		{
		}
	case 234:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1699
		{
			unimplemented()
		}
	case 235:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1702
		{
			unimplemented()
		}
	case 236:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1705
		{
			unimplemented()
		}
	case 237:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1706
		{
			unimplemented()
		}
	case 238:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1707
		{
			unimplemented()
		}
	case 239:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1708
		{
			unimplemented()
		}
	case 240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1709
		{
			unimplemented()
		}
	case 241:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1713
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1717
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1721
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 244:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1728
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.qnames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1735
		{
			sqlVAL.union.val = &CreateIndex{
				Name:    Name(sqlDollar[4].str),
				Table:   sqlDollar[6].union.qname(),
				Unique:  sqlDollar[2].union.bool(),
				Columns: sqlDollar[8].union.idxElems(),
				Storing: sqlDollar[10].union.strs(),
			}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql.y:1745
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.qname(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.strs(),
			}
		}
	case 247:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1758
		{
			sqlVAL.union.val = true
		}
	case 248:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1762
		{
			sqlVAL.union.val = false
		}
	case 249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1768
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1772
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1781
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1784
		{
			unimplemented()
		}
	case 253:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1785
		{
			unimplemented()
		}
	case 254:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1789
		{
			sqlVAL.union.val = FamilyElemList{sqlDollar[1].union.famElem()}
		}
	case 255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1793
		{
			sqlVAL.union.val = append(sqlDollar[1].union.famElems(), sqlDollar[3].union.famElem())
		}
	case 256:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1799
		{
			sqlVAL.union.val = FamilyElem{Column: Name(sqlDollar[1].str)}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1804
		{
			unimplemented()
		}
	case 258:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1805
		{
		}
	case 259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1809
		{
			sqlVAL.union.val = Ascending
		}
	case 260:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1813
		{
			sqlVAL.union.val = Descending
		}
	case 261:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1817
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 262:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1824
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1828
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.qname(), NewName: sqlDollar[6].union.qname(), IfExists: false}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1832
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.qname(), NewName: sqlDollar[8].union.qname(), IfExists: true}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1836
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1840
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1844
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.qname(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1848
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.qname(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1852
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 270:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1856
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 271:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1862
		{
			sqlVAL.union.val = true
		}
	case 272:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1866
		{
			sqlVAL.union.val = false
		}
	case 273:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1871
		{
		}
	case 274:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1872
		{
		}
	case 275:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1876
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1882
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1889
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1893
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 279:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1897
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1901
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1905
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1914
		{
		}
	case 283:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1915
		{
		}
	case 284:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1919
		{
			sqlVAL.str = ""
		}
	case 285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1923
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 286:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1927
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 287:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1931
		{
			sqlVAL.str = ""
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1937
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 289:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1941
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 290:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1947
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1951
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1955
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1959
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1963
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1969
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 296:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1975
		{
			sqlVAL.union.val = &CreateDatabase{Name: Name(sqlDollar[3].str), Encoding: sqlDollar[4].union.strVal()}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1979
		{
			sqlVAL.union.val = &CreateDatabase{IfNotExists: true, Name: Name(sqlDollar[6].str), Encoding: sqlDollar[7].union.strVal()}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1985
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1988
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 300:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1998
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retExprs()
		}
	case 301:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2004
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
		}
	case 302:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2009
		{
			unimplementedWithIssue(6637)
		}
	case 303:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2011
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2016
		{
			unimplementedWithIssue(6637)
		}
	case 305:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2024
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname()}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2028
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2034
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2038
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.qnames(), Rows: sqlDollar[4].union.slct()}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2042
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2048
		{
			sqlVAL.union.val = &OnConflict{Columns: NameList(sqlDollar[3].union.strs()), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2052
		{
			sqlVAL.union.val = &OnConflict{Columns: NameList(sqlDollar[3].union.strs()), DoNothing: true}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2058
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2062
		{
			unimplemented()
		}
	case 314:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2064
		{
			sqlVAL.union.val = []string(nil)
		}
	case 315:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2070
		{
			sqlVAL.union.val = sqlDollar[2].union.selExprs()
		}
	case 316:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2074
		{
			sqlVAL.union.val = SelectExprs(nil)
		}
	case 317:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2081
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retExprs()}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2087
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2091
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 322:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2101
		{
			sqlVAL.union.val = &UpdateExpr{Names: QualifiedNames{sqlDollar[1].union.qname()}, Expr: sqlDollar[3].union.expr()}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2113
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.qnames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2117
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.qnames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2161
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2167
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2171
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2186
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2190
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2194
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2198
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2202
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2206
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2240
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.tblExprs(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2252
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.tblExprs(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2264
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        TableExprs{&AliasedTableExpr{Expr: sqlDollar[2].union.qname()}},
				tableSelect: true,
			}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2272
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2281
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2290
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2308
		{
			unimplemented()
		}
	case 345:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2309
		{
			unimplemented()
		}
	case 346:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2310
		{
			unimplemented()
		}
	case 347:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2313
		{
			unimplemented()
		}
	case 348:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2314
		{
			unimplemented()
		}
	case 349:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2317
		{
			unimplemented()
		}
	case 350:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2320
		{
			unimplemented()
		}
	case 351:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2321
		{
		}
	case 352:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2324
		{
		}
	case 353:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2325
		{
		}
	case 354:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2329
		{
			sqlVAL.union.val = true
		}
	case 355:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2333
		{
			sqlVAL.union.val = false
		}
	case 356:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2337
		{
			sqlVAL.union.val = false
		}
	case 357:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2343
		{
			sqlVAL.union.val = true
		}
	case 358:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2348
		{
		}
	case 359:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2349
		{
		}
	case 360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2353
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 361:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2357
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 362:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2363
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 363:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2369
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2373
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2379
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2387
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 367:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2396
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2407
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2420
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2427
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2434
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 375:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2448
		{
		}
	case 376:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2449
		{
		}
	case 377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2475
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 378:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2479
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2485
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 380:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2489
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2495
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 382:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2499
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2511
		{
			sqlVAL.union.val = sqlDollar[2].union.tblExprs()
		}
	case 384:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2515
		{
			sqlVAL.union.val = TableExprs(nil)
		}
	case 385:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2521
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2525
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2531
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2536
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2542
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 390:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2547
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			index := a.Index
			if index == "" {
				index = b.Index
			} else if b.Index != "" {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			noIndexJoin := a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = &IndexHints{Index: index, NoIndexJoin: noIndexJoin}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2567
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2571
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 393:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2575
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 394:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2582
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), Hints: sqlDollar[2].union.indexHints(), As: sqlDollar[3].union.aliasClause(), AsOf: sqlDollar[4].union.asOfClause()}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2586
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, As: sqlDollar[2].union.aliasClause()}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2590
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 397:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2594
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[2].union.tblExpr(), As: sqlDollar[4].union.aliasClause()}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2614
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2618
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2622
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2626
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2630
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2634
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2640
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: NameList(sqlDollar[4].union.strs())}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2644
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2648
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: NameList(sqlDollar[3].union.strs())}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2652
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2659
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2665
		{
			sqlVAL.union.val = AsOfClause{Expr: &StrVal{s: sqlDollar[5].str}}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2669
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2675
		{
			sqlVAL.str = astFullJoin
		}
	case 413:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2679
		{
			sqlVAL.str = astLeftJoin
		}
	case 414:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2683
		{
			sqlVAL.str = astRightJoin
		}
	case 415:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2687
		{
			sqlVAL.str = astInnerJoin
		}
	case 416:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2693
		{
		}
	case 417:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2694
		{
		}
	case 418:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2705
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: NameList(sqlDollar[3].union.strs())}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2709
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2715
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 421:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2719
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 422:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2723
		{
			sqlVAL.union.val = sqlDollar[2].union.qname()
		}
	case 423:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2727
		{
			sqlVAL.union.val = sqlDollar[3].union.qname()
		}
	case 424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2733
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2737
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2750
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname()}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2754
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2758
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2764
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 430:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2768
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2780
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 432:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2784
		{
			unimplementedWithIssue(2115)
		}
	case 433:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2785
		{
			unimplementedWithIssue(2115)
		}
	case 434:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2788
		{
			unimplementedWithIssue(2115)
		}
	case 435:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2789
		{
			unimplementedWithIssue(2115)
		}
	case 436:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2790
		{
		}
	case 442:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2798
		{
			unimplemented()
		}
	case 443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2800
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 444:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2804
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 445:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2808
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 446:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2812
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 447:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2816
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 448:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2820
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 449:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2824
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 454:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2845
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2854
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2868
		{
			sqlVAL.union.val = nil
		}
	case 457:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2875
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 458:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2879
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 459:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2883
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2887
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2891
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 462:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2895
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 463:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2899
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newFloatColType(int(prec))
		}
	case 464:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2908
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 465:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2912
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2921
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2930
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2939
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 469:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2943
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 470:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2949
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 471:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2953
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2971
		{
			n, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newIntBitType(int(n))
		}
	case 477:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2982
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 482:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2998
		{
			n, err := sqlDollar[3].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3014
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 484:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3020
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 485:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3024
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 486:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3028
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 487:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3032
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 488:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3037
		{
		}
	case 489:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3038
		{
		}
	case 490:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3043
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 491:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3047
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 492:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3051
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 493:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3055
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 494:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3059
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 495:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3064
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 496:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3069
		{
			unimplemented()
		}
	case 497:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3070
		{
			unimplemented()
		}
	case 498:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3071
		{
			unimplemented()
		}
	case 499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3072
		{
			unimplemented()
		}
	case 500:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3073
		{
			unimplemented()
		}
	case 501:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3074
		{
			unimplemented()
		}
	case 502:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3075
		{
			unimplemented()
		}
	case 503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3076
		{
			unimplemented()
		}
	case 504:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3077
		{
			unimplemented()
		}
	case 505:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3078
		{
			unimplemented()
		}
	case 506:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3079
		{
			unimplemented()
		}
	case 507:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3080
		{
			unimplemented()
		}
	case 508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3081
		{
			unimplemented()
		}
	case 509:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3082
		{
		}
	case 510:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3085
		{
			unimplemented()
		}
	case 511:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3086
		{
			unimplemented()
		}
	case 513:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3110
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3113
		{
			unimplemented()
		}
	case 515:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3114
		{
			unimplemented()
		}
	case 516:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3123
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3127
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3131
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3135
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3139
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3143
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3147
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3151
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3155
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3159
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3163
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3167
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3171
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3175
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3179
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3183
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3187
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3191
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3195
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3199
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3203
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3207
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3211
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3215
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3219
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3223
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3227
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3231
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3235
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3239
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3243
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3247
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3250
		{
			unimplemented()
		}
	case 549:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3252
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3256
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3260
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3264
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3268
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3272
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3276
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3280
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3284
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3288
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3292
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3296
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3300
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3304
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3308
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3312
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3329
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3333
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3337
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3341
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3345
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3349
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3353
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3357
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3361
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3365
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3369
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3373
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3377
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3381
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3385
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3389
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3393
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3397
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3401
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3405
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3409
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3413
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3417
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3421
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3425
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3429
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3433
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3445
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 595:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3450
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3454
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3460
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3464
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3468
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3474
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 603:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3478
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 604:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3482
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 605:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3490
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname()}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3494
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3497
		{
			unimplemented()
		}
	case 608:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3498
		{
			unimplemented()
		}
	case 609:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3500
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Type: All, Exprs: sqlDollar[4].union.exprs()}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3504
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Type: Distinct, Exprs: sqlDollar[4].union.exprs()}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3508
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Exprs: Exprs{StarExpr()}}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3521
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 613:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3525
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 614:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3534
		{
			unimplemented()
		}
	case 615:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3535
		{
			unimplemented()
		}
	case 616:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3539
		{
			unimplemented()
		}
	case 617:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3541
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3545
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3549
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3553
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3556
		{
			unimplemented()
		}
	case 622:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3557
		{
			unimplemented()
		}
	case 623:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3558
		{
			unimplemented()
		}
	case 624:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3559
		{
			unimplemented()
		}
	case 625:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3561
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3565
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3569
		{
			sqlVAL.union.val = &OverlayExpr{FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3573
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "STRPOS"}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3577
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3580
		{
			unimplemented()
		}
	case 631:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3582
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3586
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "LTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3590
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "RTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3594
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3598
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3602
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3606
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3610
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3614
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3618
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3624
		{
			unimplemented()
		}
	case 642:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3625
		{
		}
	case 643:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3628
		{
			unimplemented()
		}
	case 644:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3629
		{
		}
	case 645:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3633
		{
			unimplemented()
		}
	case 646:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3634
		{
		}
	case 647:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3637
		{
			unimplemented()
		}
	case 648:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3638
		{
			unimplemented()
		}
	case 649:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3641
		{
			unimplemented()
		}
	case 650:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3644
		{
			unimplemented()
		}
	case 651:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3645
		{
			unimplemented()
		}
	case 652:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3646
		{
		}
	case 653:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3650
		{
			unimplemented()
		}
	case 654:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3661
		{
			unimplemented()
		}
	case 655:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3662
		{
		}
	case 656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3665
		{
			unimplemented()
		}
	case 657:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3666
		{
		}
	case 658:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3674
		{
			unimplemented()
		}
	case 659:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3675
		{
			unimplemented()
		}
	case 660:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3676
		{
		}
	case 661:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3679
		{
			unimplemented()
		}
	case 662:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3680
		{
			unimplemented()
		}
	case 663:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3686
		{
			unimplemented()
		}
	case 664:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3687
		{
			unimplemented()
		}
	case 665:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3688
		{
			unimplemented()
		}
	case 666:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3689
		{
			unimplemented()
		}
	case 667:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3690
		{
			unimplemented()
		}
	case 668:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3701
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3705
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3709
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3715
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3719
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3725
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3766
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3770
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 676:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3776
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3780
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 678:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3786
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3790
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3794
		{
			sqlVAL.union.val = &Array{nil}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3800
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3804
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 683:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3810
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3832
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3836
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3842
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 694:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3849
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3853
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 696:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3870
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3874
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3878
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3882
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3886
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 701:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3890
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 702:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3896
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 703:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3902
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 704:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3908
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 705:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3912
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 706:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3916
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 707:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3922
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3926
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3937
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3944
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3948
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 712:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3954
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3960
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 714:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3964
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 716:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3971
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 717:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3977
		{
			sqlVAL.union.val = sqlDollar[1].union.indirectElem()
		}
	case 718:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3981
		{
			sqlVAL.union.val = sqlDollar[1].union.indirectElem()
		}
	case 719:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3985
		{
			sqlVAL.union.val = &ArrayIndirection{Begin: sqlDollar[2].union.expr()}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3989
		{
			sqlVAL.union.val = &ArrayIndirection{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr()}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3995
		{
			sqlVAL.union.val = NameIndirection(sqlDollar[2].str)
		}
	case 722:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4001
		{
			sqlVAL.union.val = qualifiedStar
		}
	case 723:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4007
		{
			sqlVAL.union.val = Indirection{sqlDollar[1].union.indirectElem()}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4011
		{
			sqlVAL.union.val = append(sqlDollar[1].union.indirect(), sqlDollar[2].union.indirectElem())
		}
	case 725:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4016
		{
		}
	case 726:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4017
		{
		}
	case 728:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4026
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4032
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4036
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 731:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4045
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 732:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4051
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4055
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 734:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4061
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4070
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4074
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4078
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 738:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4086
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4090
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 740:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4096
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4100
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 742:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4106
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4110
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 744:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4121
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4125
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4131
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.qname(), Index: Name(sqlDollar[3].str)}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4142
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4146
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: Indirection{sqlDollar[2].union.indirectElem()}}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4150
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: Indirection{sqlDollar[2].union.indirectElem()}}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4154
		{
			sqlVAL.union.val = &QualifiedName{Indirect: Indirection{unqualifiedStar}}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4160
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4164
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 753:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4170
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 754:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4173
		{
		}
	case 755:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4183
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4187
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4194
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 758:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4198
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 759:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4202
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4206
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4209
		{
			unimplemented()
		}
	case 762:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4211
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4215
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4219
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[5].str}, Type: sqlDollar[1].union.colType()}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4223
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 766:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4227
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 767:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4231
		{
			sqlVAL.union.val = DNull
		}
	case 769:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4238
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 770:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4242
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4264
		{
			sqlVAL.str = ""
		}
	case 776:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4270
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 777:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4274
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
