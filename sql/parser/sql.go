// Code generated by go yacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"go/constant"
	"go/token"

	"github.com/pkg/errors"

	"github.com/cockroachdb/cockroach/sql/privilege"
	"github.com/cockroachdb/cockroach/util"
)

var errUnimplemented = errors.New("unimplemented")

func unimplemented() {
	panic(errUnimplemented)
}

func unimplementedWithIssue(issue int) {
	panic(util.UnimplementedWithIssueErrorf(issue, ""))
}

//line sql.y:44

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new sytax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in two forms, depending on the
// type of the value being accessed. Values and pointers are directly
// type asserted from the empty interface, meaning that they will panic
// if the type assertion is incorrect. Interfaces are handled differently
// because a nil instance of an interface inserted into the empty interface
// becomes a nil instance of the empty interface and therefore will fail a
// direct type assertion. Instead, a guarded type assertion must be used,
// which returns nil if the type assertion fails.
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	return u.val.(*StrVal)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) qname() *QualifiedName {
	return u.val.(*QualifiedName)
}
func (u *sqlSymUnion) qnames() QualifiedNames {
	return u.val.(QualifiedNames)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) indirectElem() IndirectionElem {
	if indirectElem, ok := u.val.(IndirectionElem); ok {
		return indirectElem
	}
	return nil
}
func (u *sqlSymUnion) indirect() Indirection {
	return u.val.(Indirection)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	if selectStmt, ok := u.val.(*Select); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	if selectStmt, ok := u.val.(SelectStatement); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	if constraintDef, ok := u.val.(ConstraintTableDef); ok {
		return constraintDef
	}
	return nil
}
func (u *sqlSymUnion) tblDef() TableDef {
	if tblDef, ok := u.val.(TableDef); ok {
		return tblDef
	}
	return nil
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	if colQual, ok := u.val.(NamedColumnQualification); ok {
		return colQual
	}
	return NamedColumnQualification{}
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	if colQual, ok := u.val.(ColumnQualification); ok {
		return colQual
	}
	return nil
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retExprs() ReturningExprs {
	return ReturningExprs(u.val.(SelectExprs))
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	if tblExpr, ok := u.val.(TableExpr); ok {
		return tblExpr
	}
	return nil
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	if joinCond, ok := u.val.(JoinCond); ok {
		return joinCond
	}
	return nil
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	if alterTableCmd, ok := u.val.(AlterTableCmd); ok {
		return alterTableCmd
	}
	return nil
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) famElem() FamilyElem {
	return u.val.(FamilyElem)
}
func (u *sqlSymUnion) famElems() FamilyElemList {
	return u.val.(FamilyElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}

//line sql.y:294
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const DOT_DOT = 57353
const LESS_EQUALS = 57354
const GREATER_EQUALS = 57355
const NOT_EQUALS = 57356
const NOT_REGMATCH = 57357
const REGIMATCH = 57358
const NOT_REGIMATCH = 57359
const ERROR = 57360
const ACTION = 57361
const ADD = 57362
const ALL = 57363
const ALTER = 57364
const ANALYSE = 57365
const ANALYZE = 57366
const AND = 57367
const ANY = 57368
const ANNOTATE_TYPE = 57369
const ARRAY = 57370
const AS = 57371
const ASC = 57372
const ASYMMETRIC = 57373
const AT = 57374
const BEGIN = 57375
const BETWEEN = 57376
const BIGINT = 57377
const BIGSERIAL = 57378
const BIT = 57379
const BLOB = 57380
const BOOL = 57381
const BOOLEAN = 57382
const BOTH = 57383
const BY = 57384
const BYTEA = 57385
const BYTES = 57386
const CASCADE = 57387
const CASE = 57388
const CAST = 57389
const CHAR = 57390
const CHARACTER = 57391
const CHARACTERISTICS = 57392
const CHECK = 57393
const COALESCE = 57394
const COLLATE = 57395
const COLLATION = 57396
const COLUMN = 57397
const COLUMNS = 57398
const COMMIT = 57399
const COMMITTED = 57400
const CONCAT = 57401
const CONFLICT = 57402
const CONSTRAINT = 57403
const CONSTRAINTS = 57404
const COVERING = 57405
const CREATE = 57406
const CROSS = 57407
const CUBE = 57408
const CURRENT = 57409
const CURRENT_CATALOG = 57410
const CURRENT_DATE = 57411
const CURRENT_ROLE = 57412
const CURRENT_TIME = 57413
const CURRENT_TIMESTAMP = 57414
const CURRENT_USER = 57415
const CYCLE = 57416
const DATA = 57417
const DATABASE = 57418
const DATABASES = 57419
const DATE = 57420
const DAY = 57421
const DEC = 57422
const DECIMAL = 57423
const DEFAULT = 57424
const DEALLOCATE = 57425
const DEFERRABLE = 57426
const DELETE = 57427
const DESC = 57428
const DISTINCT = 57429
const DO = 57430
const DOUBLE = 57431
const DROP = 57432
const ELSE = 57433
const ENCODING = 57434
const END = 57435
const ESCAPE = 57436
const EXCEPT = 57437
const EXISTS = 57438
const EXECUTE = 57439
const EXPLAIN = 57440
const EXTRACT = 57441
const FALSE = 57442
const FAMILY = 57443
const FETCH = 57444
const FILTER = 57445
const FIRST = 57446
const FLOAT = 57447
const FLOORDIV = 57448
const FOLLOWING = 57449
const FOR = 57450
const FORCE_INDEX = 57451
const FOREIGN = 57452
const FROM = 57453
const FULL = 57454
const GRANT = 57455
const GRANTS = 57456
const GREATEST = 57457
const GROUP = 57458
const GROUPING = 57459
const HAVING = 57460
const HIGH = 57461
const HOUR = 57462
const IF = 57463
const IFNULL = 57464
const ILIKE = 57465
const IN = 57466
const INTERLEAVE = 57467
const INDEX = 57468
const INDEXES = 57469
const INITIALLY = 57470
const INNER = 57471
const INSERT = 57472
const INT = 57473
const INT64 = 57474
const INTEGER = 57475
const INTERSECT = 57476
const INTERVAL = 57477
const INTO = 57478
const IS = 57479
const ISOLATION = 57480
const JOIN = 57481
const KEY = 57482
const KEYS = 57483
const LATERAL = 57484
const LEADING = 57485
const LEAST = 57486
const LEFT = 57487
const LEVEL = 57488
const LIKE = 57489
const LIMIT = 57490
const LOCAL = 57491
const LOCALTIME = 57492
const LOCALTIMESTAMP = 57493
const LOW = 57494
const LSHIFT = 57495
const MATCH = 57496
const MINUTE = 57497
const MONTH = 57498
const NAME = 57499
const NAMES = 57500
const NATURAL = 57501
const NEXT = 57502
const NO = 57503
const NO_INDEX_JOIN = 57504
const NORMAL = 57505
const NOT = 57506
const NOTHING = 57507
const NULL = 57508
const NULLIF = 57509
const NULLS = 57510
const NUMERIC = 57511
const OF = 57512
const OFF = 57513
const OFFSET = 57514
const ON = 57515
const ONLY = 57516
const OR = 57517
const ORDER = 57518
const ORDINALITY = 57519
const OUT = 57520
const OUTER = 57521
const OVER = 57522
const OVERLAPS = 57523
const OVERLAY = 57524
const PARENT = 57525
const PARTIAL = 57526
const PARTITION = 57527
const PLACING = 57528
const POSITION = 57529
const PRECEDING = 57530
const PRECISION = 57531
const PREPARE = 57532
const PRIMARY = 57533
const PRIORITY = 57534
const RANGE = 57535
const READ = 57536
const REAL = 57537
const RECURSIVE = 57538
const REF = 57539
const REFERENCES = 57540
const RENAME = 57541
const REPEATABLE = 57542
const RELEASE = 57543
const RESTRICT = 57544
const RETURNING = 57545
const REVOKE = 57546
const RIGHT = 57547
const ROLLBACK = 57548
const ROLLUP = 57549
const ROW = 57550
const ROWS = 57551
const RSHIFT = 57552
const SAVEPOINT = 57553
const SEARCH = 57554
const SECOND = 57555
const SELECT = 57556
const SERIAL = 57557
const SERIALIZABLE = 57558
const SESSION = 57559
const SESSION_USER = 57560
const SET = 57561
const SHOW = 57562
const SIMILAR = 57563
const SIMPLE = 57564
const SMALLINT = 57565
const SMALLSERIAL = 57566
const SNAPSHOT = 57567
const SOME = 57568
const SQL = 57569
const START = 57570
const STRICT = 57571
const STRING = 57572
const STORING = 57573
const SUBSTRING = 57574
const SYMMETRIC = 57575
const SYSTEM = 57576
const TABLE = 57577
const TABLES = 57578
const TEXT = 57579
const THEN = 57580
const TIME = 57581
const TIMESTAMP = 57582
const TIMESTAMPTZ = 57583
const TO = 57584
const TRAILING = 57585
const TRANSACTION = 57586
const TREAT = 57587
const TRIM = 57588
const TRUE = 57589
const TRUNCATE = 57590
const TYPE = 57591
const UNBOUNDED = 57592
const UNCOMMITTED = 57593
const UNION = 57594
const UNIQUE = 57595
const UNKNOWN = 57596
const UPDATE = 57597
const UPSERT = 57598
const USER = 57599
const USING = 57600
const VALID = 57601
const VALIDATE = 57602
const VALUE = 57603
const VALUES = 57604
const VARCHAR = 57605
const VARIADIC = 57606
const VARYING = 57607
const WHEN = 57608
const WHERE = 57609
const WINDOW = 57610
const WITH = 57611
const WITHIN = 57612
const WITHOUT = 57613
const YEAR = 57614
const ZONE = 57615
const NOT_LA = 57616
const WITH_LA = 57617
const AS_LA = 57618
const POSTFIXOP = 57619
const UMINUS = 57620

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPLAIN",
	"EXTRACT",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HOUR",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SQL",
	"START",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:4666

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 24,
	297, 24,
	-2, 355,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 38,
	1, 330,
	173, 330,
	203, 330,
	295, 330,
	297, 330,
	-2, 340,
	-1, 51,
	1, 333,
	173, 333,
	203, 333,
	295, 333,
	297, 333,
	-2, 339,
	-1, 60,
	1, 24,
	297, 24,
	-2, 355,
	-1, 271,
	1, 161,
	297, 161,
	-2, 849,
	-1, 304,
	148, 365,
	172, 365,
	-2, 336,
	-1, 307,
	148, 364,
	172, 364,
	-2, 334,
	-1, 430,
	148, 364,
	172, 364,
	-2, 337,
	-1, 486,
	294, 789,
	-2, 782,
	-1, 487,
	294, 790,
	-2, 783,
	-1, 493,
	5, 499,
	294, 499,
	-2, 936,
	-1, 516,
	5, 465,
	-2, 912,
	-1, 517,
	5, 493,
	294, 493,
	-2, 914,
	-1, 518,
	5, 473,
	-2, 915,
	-1, 519,
	5, 472,
	-2, 916,
	-1, 520,
	5, 493,
	294, 493,
	-2, 919,
	-1, 521,
	5, 493,
	294, 493,
	-2, 920,
	-1, 522,
	5, 494,
	-2, 923,
	-1, 523,
	5, 460,
	-2, 924,
	-1, 524,
	5, 460,
	-2, 925,
	-1, 525,
	5, 475,
	-2, 928,
	-1, 526,
	5, 461,
	-2, 933,
	-1, 527,
	5, 462,
	-2, 934,
	-1, 528,
	5, 463,
	-2, 935,
	-1, 529,
	5, 460,
	-2, 939,
	-1, 530,
	5, 466,
	-2, 944,
	-1, 531,
	5, 464,
	-2, 947,
	-1, 532,
	5, 491,
	294, 491,
	-2, 949,
	-1, 533,
	5, 495,
	-2, 952,
	-1, 534,
	5, 497,
	-2, 953,
	-1, 535,
	5, 490,
	294, 490,
	-2, 957,
	-1, 853,
	95, 340,
	134, 340,
	148, 340,
	172, 340,
	176, 340,
	252, 340,
	-2, 609,
	-1, 861,
	294, 767,
	-2, 756,
	-1, 1051,
	12, 0,
	13, 0,
	14, 0,
	277, 0,
	278, 0,
	279, 0,
	-2, 533,
	-1, 1052,
	12, 0,
	13, 0,
	14, 0,
	277, 0,
	278, 0,
	279, 0,
	-2, 534,
	-1, 1053,
	12, 0,
	13, 0,
	14, 0,
	277, 0,
	278, 0,
	279, 0,
	-2, 535,
	-1, 1057,
	12, 0,
	13, 0,
	14, 0,
	277, 0,
	278, 0,
	279, 0,
	-2, 539,
	-1, 1058,
	12, 0,
	13, 0,
	14, 0,
	277, 0,
	278, 0,
	279, 0,
	-2, 540,
	-1, 1059,
	12, 0,
	13, 0,
	14, 0,
	277, 0,
	278, 0,
	279, 0,
	-2, 541,
	-1, 1062,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 546,
	-1, 1068,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 548,
	-1, 1071,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 553,
	-1, 1072,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 554,
	-1, 1073,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 555,
	-1, 1098,
	181, 680,
	-2, 683,
	-1, 1258,
	95, 340,
	134, 340,
	148, 340,
	172, 340,
	176, 340,
	252, 340,
	-2, 413,
	-1, 1262,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 547,
	-1, 1263,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 549,
	-1, 1268,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 550,
	-1, 1286,
	181, 679,
	-2, 682,
	-1, 1442,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 551,
	-1, 1447,
	137, 0,
	-2, 565,
	-1, 1455,
	181, 681,
	-2, 684,
	-1, 1488,
	12, 0,
	13, 0,
	14, 0,
	277, 0,
	278, 0,
	279, 0,
	-2, 590,
	-1, 1489,
	12, 0,
	13, 0,
	14, 0,
	277, 0,
	278, 0,
	279, 0,
	-2, 591,
	-1, 1490,
	12, 0,
	13, 0,
	14, 0,
	277, 0,
	278, 0,
	279, 0,
	-2, 592,
	-1, 1494,
	12, 0,
	13, 0,
	14, 0,
	277, 0,
	278, 0,
	279, 0,
	-2, 596,
	-1, 1495,
	12, 0,
	13, 0,
	14, 0,
	277, 0,
	278, 0,
	279, 0,
	-2, 597,
	-1, 1496,
	12, 0,
	13, 0,
	14, 0,
	277, 0,
	278, 0,
	279, 0,
	-2, 598,
	-1, 1602,
	137, 0,
	-2, 566,
	-1, 1605,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 569,
	-1, 1606,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 571,
	-1, 1693,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 570,
	-1, 1694,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 572,
	-1, 1701,
	137, 0,
	-2, 599,
	-1, 1747,
	137, 0,
	-2, 600,
	-1, 1802,
	34, 0,
	123, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 911,
}

const sqlNprod = 1051
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 23398

var sqlAct = [...]int{

	487, 1801, 577, 1411, 1780, 935, 1753, 1825, 1645, 1466,
	1781, 1800, 1147, 943, 485, 484, 1681, 1782, 1668, 590,
	805, 308, 1594, 1024, 1575, 1586, 1566, 272, 1005, 477,
	1565, 37, 84, 84, 84, 783, 85, 84, 856, 1008,
	84, 1422, 1526, 679, 330, 1580, 1255, 548, 84, 1341,
	1190, 1254, 1289, 786, 858, 84, 84, 1431, 17, 84,
	557, 1245, 84, 84, 84, 591, 554, 1340, 84, 84,
	84, 84, 536, 356, 1241, 1007, 944, 449, 911, 1144,
	1108, 1084, 920, 1081, 974, 313, 1036, 801, 967, 73,
	653, 958, 418, 559, 459, 1000, 637, 1196, 351, 315,
	50, 450, 419, 1034, 313, 307, 549, 23, 13, 357,
	550, 807, 634, 460, 71, 6, 664, 892, 8, 353,
	346, 7, 5, 4, 888, 349, 937, 1011, 433, 318,
	50, 269, 434, 655, 651, 432, 259, 633, 78, 77,
	250, 570, 342, 316, 348, 358, 79, 1033, 437, 80,
	51, 936, 75, 74, 76, 1688, 1832, 312, 1689, 1028,
	50, 1817, 326, 52, 1028, 333, 579, 579, 940, 312,
	579, 343, 327, 1797, 971, 327, 1667, 338, 1253, 809,
	568, 327, 1202, 338, 297, 1788, 809, 1778, 1028, 354,
	964, 1772, 1749, 1743, 1028, 964, 1028, 1732, 977, 320,
	1667, 305, 1722, 1695, 1692, 1028, 964, 1028, 336, 1678,
	1675, 1737, 1667, 1676, 304, 972, 1666, 1650, 1649, 1667,
	1028, 1028, 1627, 1284, 1607, 977, 479, 977, 1285, 1312,
	1670, 1329, 1330, 1331, 1604, 56, 1538, 964, 810, 1028,
	1451, 808, 1397, 977, 1601, 1392, 84, 1501, 1283, 1391,
	973, 970, 1392, 977, 1358, 1356, 58, 1359, 977, 1355,
	812, 84, 977, 1354, 84, 84, 977, 1286, 1029, 986,
	977, 1028, 977, 976, 963, 1454, 977, 964, 1326, 1288,
	1227, 811, 908, 59, 585, 907, 909, 586, 1243, 1229,
	54, 977, 1028, 979, 1092, 1023, 55, 84, 994, 84,
	56, 84, 551, 84, 445, 444, 552, 777, 975, 776,
	645, 644, 382, 325, 56, 53, 551, 60, 84, 552,
	552, 58, 678, 580, 580, 1317, 431, 580, 425, 84,
	402, 1799, 1795, 1787, 817, 58, 1744, 1677, 1632, 1628,
	84, 84, 84, 1620, 84, 1619, 1618, 1613, 59, 1612,
	1611, 1563, 582, 1556, 1516, 54, 1332, 430, 1511, 390,
	1510, 55, 59, 1399, 1509, 1457, 1202, 969, 547, 391,
	543, 1440, 1327, 808, 1421, 84, 1401, 1363, 1360, 1348,
	939, 827, 84, 1339, 84, 1311, 1308, 1306, 1294, 968,
	1790, 631, 1293, 810, 53, 356, 356, 1228, 1161, 1115,
	542, 643, 424, 681, 84, 1114, 84, 84, 84, 84,
	84, 84, 327, 84, 444, 812, 859, 84, 443, 583,
	578, 1468, 84, 780, 1089, 1763, 779, 864, 84, 1328,
	1736, 357, 357, 422, 1231, 1714, 811, 538, 828, 682,
	1712, 1703, 545, 343, 1684, 1673, 84, 1664, 1642, 84,
	1625, 1597, 1573, 327, 571, 571, 1446, 1439, 1418, 440,
	441, 446, 1417, 1416, 1414, 1375, 305, 358, 358, 551,
	1374, 1210, 1338, 552, 1555, 683, 855, 1302, 587, 304,
	1301, 1280, 569, 572, 1276, 1086, 1216, 1175, 327, 817,
	1174, 1154, 1113, 1027, 893, 313, 1323, 1324, 1325, 896,
	1322, 1319, 1320, 1321, 1313, 1314, 1315, 1316, 1318, 900,
	1090, 861, 821, 813, 814, 815, 816, 818, 886, 838,
	885, 641, 81, 640, 1312, 884, 883, 810, 537, 882,
	668, 675, 881, 880, 879, 764, 878, 877, 768, 769,
	770, 771, 772, 767, 773, 876, 875, 84, 775, 812,
	874, 81, 873, 681, 872, 871, 810, 862, 778, 860,
	53, 84, 781, 791, 49, 84, 790, 789, 84, 84,
	811, 331, 448, 453, 84, 803, 84, 84, 812, 84,
	388, 378, 84, 376, 84, 84, 1312, 356, 305, 682,
	29, 305, 305, 49, 1562, 903, 905, 1130, 30, 811,
	914, 797, 1175, 597, 798, 799, 1561, 810, 1209, 810,
	544, 953, 351, 1690, 417, 396, 1560, 1203, 1018, 29,
	1317, 1592, 898, 357, 674, 683, 899, 30, 1362, 938,
	1361, 938, 1261, 413, 397, 1326, 84, 84, 869, 1581,
	925, 927, 894, 936, 73, 890, 891, 897, 959, 1398,
	811, 1469, 817, 1297, 901, 1109, 889, 981, 1312, 358,
	902, 1198, 1759, 1812, 1546, 492, 1813, 1327, 930, 985,
	815, 816, 818, 64, 838, 1721, 1223, 540, 327, 681,
	290, 338, 1317, 291, 971, 50, 262, 947, 917, 50,
	302, 1312, 338, 78, 77, 338, 539, 961, 960, 942,
	955, 79, 952, 354, 80, 962, 956, 75, 74, 76,
	954, 311, 933, 1658, 56, 682, 865, 1657, 65, 489,
	1387, 913, 999, 951, 1328, 972, 296, 1386, 295, 1327,
	1367, 894, 1366, 897, 1120, 58, 1264, 560, 988, 561,
	1215, 1214, 1773, 56, 1213, 982, 394, 987, 980, 983,
	310, 683, 891, 890, 1317, 1212, 416, 560, 1069, 561,
	973, 970, 59, 921, 58, 1720, 978, 84, 932, 54,
	673, 672, 931, 666, 661, 55, 421, 1158, 1157, 1040,
	68, 84, 84, 395, 374, 299, 1328, 1317, 1740, 913,
	1377, 59, 312, 1761, 53, 912, 573, 975, 54, 1313,
	1314, 1315, 1316, 1318, 55, 62, 1083, 562, 838, 1123,
	84, 1784, 84, 1030, 619, 1647, 1406, 560, 975, 561,
	990, 1822, 924, 72, 1083, 1775, 992, 562, 1109, 579,
	69, 813, 814, 815, 816, 818, 1812, 838, 1191, 1039,
	1389, 1776, 993, 67, 66, 1200, 681, 1715, 676, 300,
	1124, 991, 1021, 1022, 1189, 63, 566, 1322, 1319, 1320,
	1321, 1313, 1314, 1315, 1316, 1318, 565, 303, 309, 1222,
	1003, 1224, 1093, 1097, 975, 1100, 1038, 969, 393, 1002,
	392, 1821, 682, 1785, 1004, 1125, 1122, 562, 838, 1087,
	838, 1139, 414, 1699, 327, 1195, 1403, 1151, 1152, 1153,
	887, 625, 810, 923, 903, 618, 420, 1160, 1384, 903,
	1031, 84, 84, 84, 1096, 677, 1186, 84, 683, 1378,
	84, 1786, 1066, 327, 812, 1191, 84, 84, 84, 84,
	84, 1404, 84, 84, 393, 1315, 1316, 1318, 810, 70,
	84, 1665, 84, 1126, 852, 811, 415, 1088, 1300, 84,
	385, 387, 1432, 1105, 312, 1205, 1170, 1206, 84, 1783,
	812, 1811, 1820, 1312, 61, 922, 1313, 1314, 1315, 1316,
	1318, 313, 1809, 251, 1164, 1579, 910, 563, 1016, 84,
	84, 811, 435, 1648, 1172, 84, 580, 826, 1193, 975,
	405, 1185, 1534, 383, 256, 356, 558, 563, 817, 252,
	381, 436, 1121, 1165, 1652, 1079, 436, 1623, 1266, 1687,
	796, 1064, 1067, 84, 1497, 84, 84, 84, 1077, 1651,
	84, 1640, 253, 1535, 1166, 1828, 1082, 1709, 1838, 84,
	1208, 357, 1542, 1369, 817, 1063, 84, 597, 84, 255,
	1169, 1017, 596, 1233, 788, 827, 1204, 782, 1230, 1402,
	1232, 667, 662, 1197, 621, 1201, 650, 563, 1754, 1317,
	1595, 1207, 1197, 435, 1589, 1545, 1641, 358, 774, 313,
	646, 327, 1544, 620, 1218, 1177, 1219, 1248, 1221, 1176,
	1220, 827, 1075, 248, 1074, 1225, 959, 1226, 1080, 648,
	1624, 1498, 310, 1427, 1251, 1426, 593, 1499, 392, 1279,
	649, 427, 828, 1281, 1430, 1530, 1327, 1531, 341, 1065,
	1249, 1238, 1837, 1596, 1541, 1291, 1292, 340, 313, 1239,
	1412, 1564, 1287, 254, 1259, 1423, 251, 50, 1242, 1112,
	1234, 1702, 1533, 1638, 1622, 961, 960, 1342, 828, 1536,
	1445, 1826, 1307, 962, 1275, 597, 984, 256, 1337, 1267,
	1265, 327, 252, 1639, 1543, 412, 410, 409, 408, 1350,
	407, 406, 403, 1328, 257, 1076, 339, 313, 1343, 870,
	1250, 766, 1078, 1111, 1779, 253, 84, 813, 814, 815,
	816, 818, 1827, 838, 1381, 1260, 1383, 1751, 1296, 1523,
	1382, 597, 255, 1380, 1532, 1368, 1373, 1235, 1019, 1829,
	1015, 957, 584, 84, 581, 576, 567, 1394, 564, 822,
	819, 820, 821, 813, 814, 815, 816, 818, 472, 838,
	1463, 1345, 1346, 1347, 787, 1659, 438, 1025, 84, 323,
	84, 1813, 84, 399, 670, 1364, 84, 1321, 1313, 1314,
	1315, 1316, 1318, 913, 84, 1661, 929, 84, 619, 928,
	82, 243, 244, 84, 681, 261, 1371, 84, 273, 84,
	1390, 3, 1670, 1717, 1244, 1385, 261, 1415, 1185, 1388,
	1396, 1746, 1244, 319, 319, 1424, 254, 329, 1393, 1395,
	329, 335, 329, 1026, 289, 442, 329, 344, 329, 273,
	682, 1420, 439, 1452, 1738, 324, 1448, 1436, 1405, 1407,
	1408, 84, 941, 804, 1435, 1413, 247, 1433, 1434, 1429,
	400, 1248, 1459, 1460, 1461, 913, 947, 257, 1273, 1248,
	642, 926, 332, 589, 966, 1835, 683, 1836, 1251, 292,
	293, 1271, 1312, 810, 996, 995, 1251, 1517, 1246, 618,
	1456, 1409, 258, 1400, 1249, 1357, 1246, 1211, 1159, 1156,
	1155, 1502, 1249, 1106, 997, 1470, 619, 327, 1247, 1798,
	327, 1609, 1512, 1462, 1236, 998, 1247, 84, 84, 84,
	1472, 1473, 1588, 863, 298, 84, 84, 1475, 1477, 1646,
	249, 84, 765, 84, 404, 84, 84, 84, 84, 1615,
	1504, 1425, 1774, 84, 1428, 1539, 1540, 1269, 1299, 1698,
	1680, 1274, 619, 1110, 1250, 868, 1518, 28, 1522, 1505,
	1508, 1568, 1250, 465, 1524, 1370, 1010, 84, 84, 1009,
	684, 671, 660, 488, 411, 654, 663, 84, 84, 1571,
	1570, 84, 1119, 1571, 1570, 541, 490, 1583, 594, 491,
	84, 84, 595, 895, 1572, 1559, 1577, 618, 1572, 1578,
	1557, 1131, 478, 592, 352, 1591, 945, 1587, 1107, 1295,
	1598, 866, 464, 470, 379, 469, 1603, 1553, 1094, 84,
	375, 461, 1593, 1252, 40, 389, 596, 267, 1270, 384,
	268, 1194, 273, 273, 1554, 1272, 1020, 1599, 621, 792,
	1379, 301, 1309, 618, 377, 1137, 1129, 1127, 1549, 1118,
	423, 553, 946, 597, 401, 1032, 1558, 620, 965, 447,
	1574, 800, 1789, 322, 321, 261, 1006, 329, 398, 273,
	647, 428, 989, 294, 84, 1621, 84, 1711, 84, 84,
	593, 597, 597, 1716, 1376, 1758, 319, 84, 57, 597,
	327, 327, 22, 20, 327, 19, 18, 329, 16, 15,
	1655, 1656, 14, 21, 12, 1636, 84, 11, 329, 329,
	329, 10, 574, 1634, 1633, 9, 27, 26, 25, 2,
	1, 597, 0, 0, 1584, 1585, 1660, 0, 1590, 0,
	84, 0, 84, 0, 596, 0, 0, 1671, 1571, 1570,
	84, 0, 0, 329, 0, 0, 621, 0, 84, 0,
	638, 0, 638, 1572, 1674, 1662, 1669, 0, 0, 0,
	0, 1683, 1654, 0, 0, 620, 0, 0, 1691, 0,
	0, 0, 273, 0, 638, 273, 273, 273, 273, 273,
	596, 273, 1697, 0, 0, 273, 0, 0, 593, 84,
	261, 0, 621, 0, 0, 1704, 785, 0, 0, 1713,
	1644, 0, 0, 0, 0, 1131, 1131, 0, 84, 84,
	0, 620, 84, 0, 319, 0, 84, 806, 0, 0,
	0, 84, 0, 597, 1708, 1725, 0, 84, 1707, 1277,
	1278, 1734, 1571, 1570, 593, 84, 1731, 1735, 0, 0,
	0, 681, 1727, 1679, 1726, 1729, 313, 1572, 1728, 0,
	0, 1733, 0, 327, 0, 1739, 1131, 1131, 1131, 0,
	0, 1741, 0, 84, 619, 84, 84, 903, 84, 0,
	1745, 0, 0, 1748, 0, 0, 0, 682, 1762, 1764,
	1334, 1335, 1336, 0, 1742, 1756, 0, 1686, 84, 1768,
	0, 1767, 619, 619, 0, 1760, 0, 0, 1771, 1765,
	619, 1571, 1570, 1766, 1770, 0, 0, 0, 0, 1777,
	0, 0, 84, 683, 84, 329, 1572, 1769, 0, 0,
	0, 1796, 0, 597, 0, 1792, 0, 0, 0, 918,
	84, 0, 619, 329, 1793, 0, 329, 934, 1806, 1794,
	0, 84, 329, 1810, 949, 950, 1814, 329, 1816, 1808,
	329, 0, 273, 273, 1819, 618, 1818, 0, 0, 0,
	0, 1815, 0, 1312, 0, 1329, 1330, 1331, 0, 1831,
	1833, 1830, 1834, 0, 0, 0, 0, 0, 1600, 1757,
	0, 0, 0, 618, 618, 0, 0, 1839, 0, 1131,
	1131, 618, 0, 1312, 0, 0, 0, 0, 0, 0,
	0, 632, 597, 0, 638, 806, 0, 0, 0, 0,
	0, 0, 1326, 1443, 1444, 0, 0, 0, 0, 0,
	0, 0, 0, 618, 0, 947, 0, 0, 0, 0,
	0, 0, 0, 0, 619, 0, 0, 1131, 1131, 1131,
	1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131,
	1131, 1131, 1131, 1131, 1131, 1131, 0, 1131, 0, 1317,
	0, 1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485, 1486,
	1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496,
	597, 1500, 0, 0, 0, 0, 0, 0, 0, 1317,
	1332, 0, 596, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 621, 0, 1327, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	596, 596, 0, 620, 0, 618, 0, 0, 596, 0,
	0, 0, 621, 621, 619, 1001, 1327, 0, 0, 0,
	621, 0, 0, 0, 0, 0, 593, 0, 0, 329,
	918, 620, 620, 0, 0, 0, 0, 0, 0, 620,
	596, 0, 0, 1328, 0, 0, 0, 0, 0, 0,
	0, 0, 621, 0, 593, 593, 0, 0, 329, 0,
	273, 0, 593, 0, 0, 0, 0, 0, 0, 0,
	0, 620, 0, 1328, 0, 0, 0, 0, 0, 0,
	0, 0, 466, 38, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 619, 593, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 618, 0, 0, 0, 0,
	1323, 1324, 1325, 38, 1322, 1319, 1320, 1321, 1313, 1314,
	1315, 1316, 1318, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 306, 0, 0, 314, 0, 0, 1131,
	0, 0, 596, 38, 1322, 1319, 1320, 1321, 1313, 1314,
	1315, 1316, 1318, 0, 621, 314, 0, 0, 0, 329,
	1167, 1168, 0, 1643, 0, 918, 0, 0, 1173, 0,
	0, 619, 0, 620, 1178, 1179, 1181, 1183, 1184, 0,
	1187, 1188, 0, 0, 618, 0, 0, 0, 329, 1312,
	1199, 1329, 1330, 1331, 0, 0, 593, 329, 0, 24,
	0, 0, 0, 451, 451, 0, 329, 0, 0, 0,
	42, 0, 0, 555, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1131, 1001, 638, 0,
	0, 0, 0, 1001, 44, 0, 0, 0, 1326, 0,
	0, 49, 596, 0, 0, 0, 0, 0, 0, 0,
	1701, 0, 0, 0, 621, 0, 0, 0, 0, 810,
	33, 785, 618, 785, 273, 329, 0, 29, 1237, 0,
	45, 0, 0, 620, 32, 30, 0, 1240, 0, 0,
	0, 812, 0, 1312, 1257, 1317, 329, 0, 0, 0,
	34, 0, 0, 0, 0, 0, 593, 0, 0, 0,
	0, 0, 811, 1333, 810, 0, 1131, 0, 0, 839,
	840, 841, 0, 0, 0, 0, 1332, 793, 795, 0,
	0, 596, 0, 0, 802, 0, 812, 810, 843, 0,
	1747, 0, 1327, 621, 0, 0, 847, 848, 849, 850,
	851, 0, 0, 0, 0, 854, 0, 811, 0, 812,
	0, 0, 620, 826, 0, 817, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 867, 0, 31, 0, 0,
	811, 0, 1534, 0, 1527, 593, 0, 0, 47, 1317,
	0, 35, 1525, 46, 0, 1529, 0, 0, 36, 1328,
	0, 56, 0, 0, 0, 0, 39, 41, 306, 596,
	817, 0, 827, 1535, 0, 43, 0, 0, 0, 0,
	0, 621, 58, 0, 0, 0, 0, 836, 844, 0,
	0, 0, 1528, 817, 806, 48, 1327, 0, 0, 0,
	620, 0, 0, 904, 0, 0, 0, 0, 0, 59,
	0, 834, 0, 0, 0, 0, 54, 827, 0, 0,
	0, 329, 55, 593, 0, 0, 1323, 1324, 1325, 828,
	1322, 1319, 1320, 1321, 1313, 1314, 1315, 1316, 1318, 0,
	827, 53, 0, 0, 0, 0, 1410, 0, 918, 0,
	785, 0, 0, 1328, 1419, 1530, 0, 1531, 0, 0,
	0, 0, 329, 0, 0, 329, 0, 0, 0, 0,
	0, 1257, 0, 0, 828, 1438, 0, 1257, 0, 0,
	0, 0, 1533, 0, 0, 837, 0, 0, 0, 1536,
	306, 0, 0, 306, 306, 0, 0, 828, 0, 0,
	822, 819, 820, 821, 813, 814, 815, 816, 818, 0,
	838, 0, 0, 0, 0, 0, 853, 0, 0, 1467,
	857, 0, 0, 0, 0, 1319, 1320, 1321, 1313, 1314,
	1315, 1316, 1318, 0, 0, 0, 0, 0, 835, 0,
	0, 0, 0, 0, 1532, 822, 819, 820, 821, 813,
	814, 815, 816, 818, 0, 838, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 819,
	820, 821, 813, 814, 815, 816, 818, 0, 838, 0,
	0, 0, 0, 0, 0, 1520, 1521, 918, 0, 0,
	0, 0, 0, 806, 806, 0, 0, 0, 0, 1547,
	0, 1548, 0, 329, 1550, 1551, 1552, 0, 0, 0,
	0, 329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 38, 0, 38, 0, 0, 0, 0,
	0, 0, 0, 1567, 0, 1576, 918, 1567, 38, 0,
	0, 0, 38, 0, 0, 329, 329, 0, 0, 329,
	0, 0, 0, 0, 0, 0, 0, 0, 806, 1257,
	451, 0, 0, 0, 0, 1041, 1042, 1043, 1044, 1045,
	1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055,
	1056, 1057, 1058, 1059, 1060, 1061, 1062, 1616, 1068, 0,
	1070, 1071, 1072, 1073, 0, 0, 0, 0, 0, 0,
	810, 0, 829, 830, 831, 839, 840, 841, 0, 0,
	0, 0, 0, 0, 0, 832, 0, 0, 0, 0,
	0, 0, 812, 0, 843, 1116, 1117, 0, 1128, 0,
	1138, 1140, 1145, 1148, 1149, 1150, 0, 0, 0, 0,
	0, 0, 918, 811, 1635, 0, 273, 1637, 0, 826,
	0, 0, 0, 0, 0, 329, 0, 0, 0, 555,
	0, 0, 0, 1312, 0, 1329, 1330, 1331, 0, 0,
	0, 0, 0, 0, 806, 0, 0, 0, 1450, 0,
	0, 0, 274, 0, 0, 0, 0, 0, 1192, 0,
	0, 0, 1567, 0, 0, 0, 817, 0, 329, 287,
	1682, 0, 0, 0, 0, 0, 0, 0, 329, 0,
	0, 0, 1326, 836, 844, 0, 806, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 842, 0, 1217,
	0, 0, 0, 0, 276, 0, 0, 834, 0, 281,
	282, 0, 288, 827, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 275, 277, 0, 785, 0, 1317,
	0, 0, 1035, 0, 0, 833, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 802, 1718, 1719, 0, 0,
	1723, 0, 0, 0, 1724, 0, 1567, 0, 0, 273,
	1332, 0, 278, 0, 0, 1576, 0, 1085, 0, 0,
	828, 0, 0, 806, 279, 280, 1327, 0, 0, 0,
	0, 837, 0, 0, 0, 1262, 1263, 0, 0, 283,
	0, 1268, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1755, 0, 806, 329, 0, 273, 0, 0, 0,
	0, 0, 0, 0, 1282, 0, 0, 0, 0, 0,
	0, 0, 0, 1290, 0, 1567, 1682, 0, 0, 0,
	0, 1298, 0, 1328, 835, 1303, 0, 823, 824, 825,
	0, 822, 819, 820, 821, 813, 814, 815, 816, 818,
	329, 838, 806, 0, 0, 0, 0, 854, 1629, 0,
	0, 0, 314, 1145, 1145, 1145, 0, 0, 1807, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 806,
	0, 0, 0, 0, 284, 1365, 0, 285, 0, 0,
	0, 0, 286, 0, 0, 0, 1372, 0, 0, 0,
	1323, 1324, 1325, 0, 1322, 1319, 1320, 1321, 1313, 1314,
	1315, 1316, 1318, 451, 0, 0, 0, 0, 0, 0,
	0, 0, 451, 0, 0, 555, 0, 0, 0, 810,
	0, 829, 830, 831, 839, 840, 841, 0, 0, 0,
	0, 0, 0, 0, 832, 0, 0, 0, 0, 0,
	38, 812, 0, 843, 0, 0, 0, 0, 0, 0,
	1258, 0, 0, 810, 0, 829, 830, 831, 839, 840,
	841, 0, 811, 0, 0, 0, 0, 0, 826, 0,
	0, 0, 0, 1441, 0, 812, 1442, 843, 0, 0,
	1085, 0, 0, 0, 0, 0, 0, 1447, 0, 0,
	0, 0, 0, 0, 0, 0, 811, 0, 0, 853,
	1217, 0, 826, 0, 0, 0, 0, 0, 0, 1464,
	0, 0, 0, 0, 0, 817, 0, 0, 0, 1474,
	0, 0, 1476, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 836, 844, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 842, 0, 853, 817,
	0, 0, 0, 0, 1506, 1507, 834, 0, 0, 0,
	0, 0, 827, 1513, 1514, 1515, 836, 844, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	842, 0, 0, 0, 833, 0, 0, 0, 0, 0,
	834, 0, 0, 0, 0, 0, 827, 0, 0, 0,
	0, 451, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 828,
	0, 0, 810, 0, 829, 830, 831, 839, 840, 841,
	837, 0, 0, 0, 0, 1582, 0, 832, 0, 0,
	0, 0, 0, 0, 812, 0, 843, 0, 0, 0,
	0, 0, 0, 828, 0, 0, 1035, 1602, 0, 1035,
	0, 1605, 1606, 0, 837, 811, 1608, 0, 0, 0,
	1610, 826, 0, 0, 0, 0, 0, 1614, 0, 0,
	0, 1617, 0, 835, 0, 0, 823, 824, 825, 0,
	822, 819, 820, 821, 813, 814, 815, 816, 818, 0,
	838, 0, 1162, 0, 0, 0, 0, 0, 0, 0,
	0, 1163, 0, 1626, 0, 0, 0, 835, 817, 0,
	823, 824, 825, 0, 822, 819, 820, 821, 813, 814,
	815, 816, 818, 0, 838, 836, 844, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 842,
	0, 0, 0, 0, 0, 0, 1653, 0, 0, 834,
	0, 0, 0, 0, 0, 827, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1672, 1312, 0, 1329, 1330, 1331, 833, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1449, 0, 0,
	1685, 0, 0, 0, 38, 0, 0, 0, 0, 0,
	0, 0, 1693, 1694, 0, 609, 604, 626, 598, 617,
	616, 0, 828, 600, 599, 0, 0, 0, 628, 627,
	0, 1326, 0, 837, 0, 0, 0, 0, 0, 1035,
	1035, 1706, 0, 1035, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1710, 0, 0, 0, 622, 0,
	614, 613, 0, 0, 0, 0, 0, 0, 0, 612,
	0, 0, 0, 0, 0, 0, 555, 0, 1317, 0,
	0, 0, 0, 0, 0, 611, 835, 0, 0, 823,
	824, 825, 0, 822, 819, 820, 821, 813, 814, 815,
	816, 818, 0, 838, 0, 0, 0, 0, 0, 1332,
	1353, 605, 606, 607, 0, 625, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1327, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 615,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1791, 0, 1663, 0, 610, 0, 0, 0, 0,
	0, 0, 1328, 0, 0, 0, 0, 1805, 1805, 0,
	0, 0, 0, 0, 0, 602, 0, 0, 0, 0,
	0, 0, 1035, 608, 603, 0, 0, 0, 0, 0,
	630, 0, 0, 0, 1805, 0, 0, 601, 0, 0,
	623, 624, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 629, 0, 0, 0, 1805, 0, 1323,
	1324, 1325, 0, 1322, 1319, 1320, 1321, 1313, 1314, 1315,
	1316, 1318, 0, 680, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 853, 86, 87,
	685, 88, 686, 687, 688, 689, 195, 690, 691, 692,
	693, 89, 90, 196, 197, 198, 199, 91, 200, 201,
	694, 92, 202, 203, 93, 695, 696, 204, 205, 206,
	697, 207, 698, 360, 699, 94, 95, 96, 0, 97,
	700, 98, 99, 701, 361, 100, 101, 702, 703, 704,
	705, 706, 707, 102, 103, 104, 105, 208, 106, 209,
	210, 708, 107, 709, 108, 710, 711, 712, 109, 110,
	713, 111, 714, 0, 715, 211, 112, 113, 212, 716,
	717, 718, 114, 115, 213, 0, 116, 719, 117, 720,
	721, 362, 722, 118, 214, 723, 215, 724, 119, 120,
	216, 217, 364, 725, 123, 726, 121, 727, 363, 122,
	218, 219, 220, 728, 221, 729, 365, 124, 366, 125,
	126, 730, 731, 222, 367, 127, 368, 732, 128, 733,
	734, 129, 0, 130, 131, 132, 133, 134, 369, 135,
	136, 139, 137, 735, 138, 736, 223, 140, 224, 141,
	142, 737, 738, 739, 740, 741, 143, 225, 370, 144,
	371, 226, 145, 146, 147, 742, 227, 148, 228, 149,
	743, 150, 151, 152, 229, 153, 154, 744, 156, 157,
	155, 158, 745, 159, 372, 160, 161, 230, 162, 0,
	163, 164, 165, 746, 231, 166, 167, 747, 168, 169,
	373, 170, 232, 233, 171, 748, 172, 173, 175, 234,
	174, 235, 749, 176, 750, 177, 178, 751, 236, 237,
	238, 752, 753, 179, 239, 240, 754, 180, 181, 182,
	183, 755, 756, 184, 185, 186, 757, 758, 187, 188,
	189, 241, 242, 759, 190, 760, 761, 762, 763, 191,
	192, 193, 194, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 680, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1437,
	86, 87, 685, 88, 686, 687, 688, 689, 195, 690,
	691, 692, 693, 89, 90, 196, 197, 198, 199, 91,
	200, 201, 694, 92, 202, 203, 93, 695, 696, 204,
	205, 206, 697, 207, 698, 360, 699, 94, 95, 96,
	0, 97, 700, 98, 99, 701, 361, 100, 101, 702,
	703, 704, 705, 706, 707, 102, 103, 104, 105, 208,
	106, 209, 210, 708, 107, 709, 108, 710, 711, 712,
	109, 110, 713, 111, 714, 0, 715, 211, 112, 113,
	212, 716, 717, 718, 114, 115, 213, 0, 116, 719,
	117, 720, 721, 362, 722, 118, 214, 723, 215, 724,
	119, 120, 216, 217, 364, 725, 123, 726, 121, 727,
	363, 122, 218, 219, 220, 728, 221, 729, 365, 124,
	366, 125, 126, 730, 731, 222, 367, 127, 368, 732,
	128, 733, 734, 129, 0, 130, 131, 132, 133, 134,
	369, 135, 136, 139, 137, 735, 138, 736, 223, 140,
	224, 141, 142, 737, 738, 739, 740, 741, 143, 225,
	370, 144, 371, 226, 145, 146, 147, 742, 227, 148,
	228, 149, 743, 150, 151, 152, 229, 153, 154, 744,
	156, 157, 155, 158, 745, 159, 372, 160, 161, 230,
	162, 0, 163, 164, 165, 746, 231, 166, 167, 747,
	168, 169, 373, 170, 232, 233, 171, 748, 172, 173,
	175, 234, 174, 235, 749, 176, 750, 177, 178, 751,
	236, 237, 238, 752, 753, 179, 239, 240, 754, 180,
	181, 182, 183, 755, 756, 184, 185, 186, 757, 758,
	187, 188, 189, 241, 242, 759, 190, 760, 761, 762,
	763, 191, 192, 193, 194, 680, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 906, 0,
	86, 87, 685, 88, 686, 687, 688, 689, 195, 690,
	691, 692, 693, 89, 90, 196, 197, 198, 199, 91,
	200, 201, 694, 92, 202, 203, 93, 695, 696, 204,
	205, 206, 697, 207, 698, 360, 699, 94, 95, 96,
	0, 97, 700, 98, 99, 701, 361, 100, 101, 702,
	703, 704, 705, 706, 707, 102, 103, 104, 105, 208,
	106, 209, 210, 708, 107, 709, 108, 710, 711, 712,
	109, 110, 713, 111, 714, 0, 715, 211, 112, 113,
	212, 716, 717, 718, 114, 115, 213, 0, 116, 719,
	117, 720, 721, 362, 722, 118, 214, 723, 215, 724,
	119, 120, 216, 217, 364, 725, 123, 726, 121, 727,
	363, 122, 218, 219, 220, 728, 221, 729, 365, 124,
	366, 125, 126, 730, 731, 222, 367, 127, 368, 732,
	128, 733, 734, 129, 0, 130, 131, 132, 133, 134,
	369, 135, 136, 139, 137, 735, 138, 736, 223, 140,
	224, 141, 142, 737, 738, 739, 740, 741, 143, 225,
	370, 144, 371, 226, 145, 146, 147, 742, 227, 148,
	228, 149, 743, 150, 151, 152, 229, 153, 154, 744,
	156, 157, 155, 158, 745, 159, 372, 160, 161, 230,
	162, 0, 163, 164, 165, 746, 231, 166, 167, 747,
	168, 169, 373, 170, 232, 233, 171, 748, 172, 173,
	175, 234, 174, 235, 749, 176, 750, 177, 178, 751,
	236, 237, 238, 752, 753, 179, 239, 240, 754, 180,
	181, 182, 183, 755, 756, 184, 185, 186, 757, 758,
	187, 188, 189, 241, 242, 759, 190, 760, 761, 762,
	763, 191, 192, 193, 194, 486, 475, 476, 473, 474,
	462, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 87, 1102, 88, 0, 0, 0, 0, 502, 468,
	0, 0, 0, 89, 90, 196, 516, 198, 517, 91,
	518, 519, 0, 92, 202, 203, 93, 483, 501, 520,
	521, 206, 0, 512, 0, 494, 0, 94, 95, 96,
	0, 97, 0, 98, 99, 0, 361, 100, 101, 0,
	495, 497, 0, 496, 498, 102, 103, 104, 105, 522,
	106, 523, 524, 0, 107, 0, 108, 0, 1103, 0,
	515, 110, 0, 111, 0, 0, 0, 467, 112, 113,
	503, 481, 0, 0, 114, 115, 525, 0, 116, 0,
	117, 0, 0, 362, 0, 118, 513, 0, 215, 0,
	119, 120, 509, 511, 364, 0, 123, 0, 121, 0,
	363, 122, 526, 527, 528, 0, 493, 0, 365, 124,
	366, 125, 126, 0, 0, 514, 367, 127, 368, 0,
	128, 0, 0, 129, 0, 130, 131, 132, 133, 134,
	369, 135, 136, 139, 137, 457, 138, 482, 510, 140,
	529, 141, 142, 0, 0, 0, 0, 0, 143, 225,
	370, 144, 371, 504, 145, 146, 147, 0, 505, 148,
	228, 149, 0, 150, 151, 152, 530, 153, 154, 0,
	156, 157, 155, 158, 0, 159, 372, 160, 161, 471,
	162, 0, 163, 164, 165, 0, 231, 166, 167, 499,
	168, 169, 373, 170, 531, 233, 171, 0, 172, 173,
	175, 532, 174, 506, 0, 176, 0, 177, 178, 0,
	236, 533, 534, 0, 0, 179, 507, 508, 480, 180,
	181, 182, 183, 0, 0, 184, 185, 186, 500, 0,
	187, 188, 189, 241, 535, 1101, 190, 0, 0, 0,
	0, 191, 192, 193, 194, 458, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 454, 455, 1104, 0,
	0, 0, 456, 0, 0, 463, 1099, 486, 475, 476,
	473, 474, 462, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 87, 0, 88, 0, 0, 0, 0,
	502, 468, 0, 0, 0, 89, 90, 196, 516, 198,
	517, 91, 518, 519, 0, 92, 202, 203, 93, 483,
	501, 520, 521, 206, 0, 512, 0, 494, 0, 94,
	95, 96, 0, 97, 0, 98, 99, 0, 361, 100,
	101, 0, 495, 497, 0, 496, 498, 102, 103, 104,
	105, 522, 106, 523, 524, 556, 107, 0, 108, 0,
	0, 0, 515, 110, 0, 111, 0, 0, 0, 467,
	112, 113, 503, 481, 0, 0, 114, 115, 525, 0,
	116, 0, 117, 0, 0, 362, 0, 118, 513, 0,
	215, 0, 119, 120, 509, 511, 364, 0, 123, 0,
	121, 0, 363, 122, 526, 527, 528, 0, 493, 0,
	365, 124, 366, 125, 126, 0, 0, 514, 367, 127,
	368, 0, 128, 0, 0, 129, 0, 130, 131, 132,
	133, 134, 369, 135, 136, 139, 137, 457, 138, 482,
	510, 140, 529, 141, 142, 0, 0, 0, 0, 0,
	143, 225, 370, 144, 371, 504, 145, 146, 147, 0,
	505, 148, 228, 149, 0, 150, 151, 152, 530, 153,
	154, 0, 156, 157, 155, 158, 0, 159, 372, 160,
	161, 471, 162, 0, 163, 164, 165, 56, 231, 166,
	167, 499, 168, 169, 373, 170, 531, 233, 171, 0,
	172, 173, 175, 532, 174, 506, 0, 176, 58, 177,
	178, 0, 236, 533, 534, 0, 0, 179, 507, 508,
	480, 180, 181, 182, 183, 0, 0, 184, 185, 186,
	500, 0, 187, 188, 189, 359, 535, 0, 190, 0,
	0, 0, 54, 191, 192, 193, 194, 458, 55, 0,
	486, 475, 476, 473, 474, 462, 0, 0, 454, 455,
	0, 0, 0, 0, 456, 86, 87, 463, 88, 0,
	0, 0, 0, 502, 468, 0, 0, 0, 89, 90,
	196, 516, 198, 517, 91, 518, 519, 0, 92, 202,
	203, 93, 483, 501, 520, 521, 206, 0, 512, 0,
	494, 0, 94, 95, 96, 0, 97, 0, 98, 99,
	0, 361, 100, 101, 0, 495, 497, 0, 496, 498,
	102, 103, 104, 105, 522, 106, 523, 524, 0, 107,
	0, 108, 0, 0, 0, 515, 110, 0, 111, 0,
	0, 0, 467, 112, 113, 503, 481, 0, 0, 114,
	115, 525, 0, 116, 0, 117, 0, 0, 362, 0,
	118, 513, 0, 215, 0, 119, 120, 509, 511, 364,
	0, 123, 0, 121, 0, 363, 122, 526, 527, 528,
	0, 493, 0, 365, 124, 366, 125, 126, 0, 0,
	514, 367, 127, 368, 0, 128, 0, 0, 129, 0,
	130, 131, 132, 133, 134, 369, 135, 136, 139, 137,
	457, 138, 482, 510, 140, 529, 141, 142, 0, 0,
	0, 0, 0, 143, 225, 370, 144, 371, 504, 145,
	146, 147, 0, 505, 148, 228, 149, 0, 150, 151,
	152, 530, 153, 154, 0, 156, 157, 155, 158, 0,
	159, 372, 160, 161, 471, 162, 0, 163, 164, 165,
	56, 231, 166, 167, 499, 168, 169, 373, 170, 531,
	233, 171, 0, 172, 173, 175, 532, 174, 506, 0,
	176, 58, 177, 178, 0, 236, 533, 534, 0, 0,
	179, 507, 508, 480, 180, 181, 182, 183, 0, 0,
	184, 185, 186, 500, 0, 187, 188, 189, 359, 535,
	0, 190, 0, 0, 0, 54, 191, 192, 193, 194,
	458, 55, 0, 486, 475, 476, 473, 474, 462, 0,
	0, 454, 455, 0, 0, 0, 0, 456, 86, 87,
	463, 88, 0, 0, 0, 0, 502, 468, 0, 0,
	0, 89, 90, 196, 516, 198, 517, 91, 518, 519,
	1141, 92, 202, 203, 93, 483, 501, 520, 521, 206,
	0, 512, 0, 494, 0, 94, 95, 96, 0, 97,
	0, 98, 99, 0, 361, 100, 101, 0, 495, 497,
	0, 496, 498, 102, 103, 104, 105, 522, 106, 523,
	524, 0, 107, 0, 108, 0, 0, 0, 515, 110,
	0, 111, 0, 0, 0, 467, 112, 113, 503, 481,
	0, 0, 114, 115, 525, 0, 116, 0, 117, 0,
	1146, 362, 0, 118, 513, 0, 215, 0, 119, 120,
	509, 511, 364, 0, 123, 0, 121, 0, 363, 122,
	526, 527, 528, 0, 493, 0, 365, 124, 366, 125,
	126, 0, 1142, 514, 367, 127, 368, 0, 128, 0,
	0, 129, 0, 130, 131, 132, 133, 134, 369, 135,
	136, 139, 137, 457, 138, 482, 510, 140, 529, 141,
	142, 0, 0, 0, 0, 0, 143, 225, 370, 144,
	371, 504, 145, 146, 147, 0, 505, 148, 228, 149,
	0, 150, 151, 152, 530, 153, 154, 0, 156, 157,
	155, 158, 0, 159, 372, 160, 161, 471, 162, 0,
	163, 164, 165, 0, 231, 166, 167, 499, 168, 169,
	373, 170, 531, 233, 171, 0, 172, 173, 175, 532,
	174, 506, 0, 176, 0, 177, 178, 0, 236, 533,
	534, 0, 1143, 179, 507, 508, 480, 180, 181, 182,
	183, 0, 0, 184, 185, 186, 500, 0, 187, 188,
	189, 241, 535, 0, 190, 0, 0, 0, 0, 191,
	192, 193, 194, 458, 0, 0, 486, 475, 476, 473,
	474, 462, 0, 0, 454, 455, 0, 0, 0, 0,
	456, 86, 87, 463, 88, 0, 0, 0, 0, 502,
	468, 0, 0, 0, 89, 90, 196, 516, 198, 517,
	91, 518, 519, 0, 92, 202, 203, 93, 483, 501,
	520, 521, 206, 0, 512, 0, 494, 0, 94, 95,
	96, 0, 97, 0, 98, 99, 0, 361, 100, 101,
	0, 495, 497, 0, 496, 498, 102, 103, 104, 105,
	522, 106, 523, 524, 0, 107, 0, 108, 0, 0,
	0, 515, 110, 0, 111, 0, 0, 0, 467, 112,
	113, 503, 481, 0, 0, 114, 115, 525, 0, 116,
	0, 117, 0, 0, 362, 0, 118, 513, 0, 215,
	0, 119, 120, 509, 511, 364, 0, 123, 0, 121,
	0, 363, 122, 526, 527, 528, 0, 493, 0, 365,
	124, 366, 125, 126, 0, 0, 514, 367, 127, 368,
	0, 128, 0, 0, 129, 0, 130, 131, 132, 133,
	134, 369, 135, 136, 139, 137, 457, 138, 482, 510,
	140, 529, 141, 142, 0, 0, 0, 0, 0, 143,
	225, 370, 144, 371, 504, 145, 146, 147, 0, 505,
	148, 228, 149, 0, 150, 151, 152, 530, 153, 154,
	0, 156, 157, 155, 158, 0, 159, 372, 160, 161,
	471, 162, 0, 163, 164, 165, 0, 231, 166, 167,
	499, 168, 169, 373, 170, 531, 233, 171, 0, 172,
	173, 175, 532, 174, 506, 0, 176, 0, 177, 178,
	0, 236, 533, 534, 0, 0, 179, 507, 508, 480,
	180, 181, 182, 183, 0, 0, 184, 185, 186, 500,
	0, 187, 188, 189, 241, 535, 0, 190, 0, 0,
	0, 0, 191, 192, 193, 194, 458, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 454, 455, 0,
	0, 0, 0, 456, 0, 0, 463, 1503, 486, 475,
	476, 473, 474, 462, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 86, 87, 0, 88, 0, 0, 0,
	0, 502, 468, 0, 0, 0, 89, 90, 196, 516,
	198, 517, 91, 518, 519, 0, 92, 202, 203, 93,
	483, 501, 520, 521, 206, 0, 512, 0, 494, 0,
	94, 95, 96, 0, 97, 0, 98, 99, 0, 361,
	100, 101, 0, 495, 497, 0, 496, 498, 102, 103,
	104, 105, 522, 106, 523, 524, 0, 107, 0, 108,
	0, 0, 0, 515, 110, 0, 111, 0, 0, 0,
	467, 112, 113, 503, 481, 0, 0, 114, 115, 525,
	0, 116, 0, 117, 0, 0, 362, 0, 118, 513,
	0, 215, 0, 119, 120, 509, 511, 364, 0, 123,
	0, 121, 0, 363, 122, 526, 527, 528, 0, 493,
	0, 365, 124, 366, 125, 126, 0, 0, 514, 367,
	127, 368, 0, 128, 0, 0, 129, 0, 130, 131,
	132, 133, 134, 369, 135, 136, 139, 137, 457, 138,
	482, 510, 140, 529, 141, 142, 0, 0, 0, 0,
	0, 143, 225, 370, 144, 371, 504, 145, 146, 147,
	0, 505, 148, 228, 149, 0, 150, 151, 152, 530,
	153, 154, 0, 156, 157, 155, 158, 0, 159, 372,
	160, 161, 471, 162, 0, 163, 164, 165, 0, 231,
	166, 167, 499, 168, 169, 373, 170, 531, 233, 171,
	0, 172, 173, 175, 532, 174, 506, 0, 176, 0,
	177, 178, 0, 236, 533, 534, 0, 0, 179, 507,
	508, 480, 180, 181, 182, 183, 0, 0, 184, 185,
	186, 500, 0, 187, 188, 189, 241, 535, 0, 190,
	0, 0, 0, 0, 191, 192, 193, 194, 458, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 454,
	455, 0, 0, 0, 0, 456, 0, 0, 463, 1453,
	486, 475, 476, 473, 474, 462, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 87, 0, 88, 0,
	0, 0, 0, 502, 468, 0, 0, 0, 89, 90,
	196, 516, 198, 517, 91, 518, 519, 0, 92, 202,
	203, 93, 483, 501, 520, 521, 206, 0, 512, 0,
	494, 0, 94, 95, 96, 0, 97, 0, 98, 99,
	0, 361, 100, 101, 0, 495, 497, 0, 496, 498,
	102, 103, 104, 105, 522, 106, 523, 524, 0, 107,
	0, 108, 0, 0, 0, 515, 110, 0, 111, 0,
	0, 0, 467, 112, 113, 503, 481, 0, 0, 114,
	115, 525, 0, 116, 0, 117, 0, 0, 362, 0,
	118, 513, 0, 215, 0, 119, 120, 509, 511, 364,
	0, 123, 0, 121, 0, 363, 122, 526, 527, 528,
	0, 493, 0, 365, 124, 366, 125, 126, 0, 0,
	514, 367, 127, 368, 0, 128, 0, 0, 129, 0,
	130, 131, 132, 133, 134, 369, 135, 136, 139, 137,
	457, 138, 482, 510, 140, 529, 141, 142, 0, 0,
	0, 0, 0, 143, 225, 370, 144, 371, 504, 145,
	146, 147, 0, 505, 148, 228, 149, 0, 150, 151,
	152, 530, 153, 154, 0, 156, 157, 155, 158, 0,
	159, 372, 160, 161, 471, 162, 0, 163, 164, 165,
	0, 231, 166, 167, 499, 168, 169, 373, 170, 531,
	233, 171, 0, 172, 173, 175, 532, 174, 506, 0,
	176, 0, 177, 178, 0, 236, 533, 534, 0, 0,
	179, 507, 508, 480, 180, 181, 182, 183, 0, 0,
	184, 185, 186, 500, 0, 187, 188, 189, 241, 535,
	0, 190, 0, 0, 0, 0, 191, 192, 193, 194,
	458, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 454, 455, 0, 0, 0, 0, 456, 0, 0,
	463, 1098, 486, 475, 476, 473, 474, 462, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 87, 0,
	88, 0, 0, 0, 0, 502, 468, 0, 0, 0,
	89, 90, 196, 516, 198, 517, 91, 518, 519, 0,
	92, 202, 203, 93, 483, 501, 520, 521, 206, 0,
	512, 0, 494, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 361, 100, 101, 0, 495, 497, 0,
	496, 498, 102, 103, 104, 105, 522, 106, 523, 524,
	0, 107, 0, 108, 0, 0, 0, 515, 110, 0,
	111, 0, 0, 0, 467, 112, 113, 503, 481, 0,
	0, 114, 115, 525, 0, 116, 0, 117, 0, 0,
	362, 0, 118, 513, 0, 215, 0, 119, 120, 509,
	511, 364, 0, 123, 0, 121, 0, 363, 122, 526,
	527, 528, 0, 493, 0, 365, 124, 366, 125, 126,
	0, 0, 514, 367, 127, 368, 0, 128, 0, 0,
	129, 0, 130, 131, 132, 133, 134, 369, 135, 136,
	139, 137, 457, 138, 482, 510, 140, 529, 141, 142,
	0, 0, 0, 0, 0, 143, 225, 370, 144, 371,
	504, 145, 146, 147, 0, 505, 148, 228, 149, 0,
	150, 151, 152, 530, 153, 154, 0, 156, 157, 155,
	158, 0, 159, 372, 160, 161, 471, 162, 0, 163,
	164, 165, 0, 231, 166, 167, 499, 168, 169, 373,
	170, 531, 233, 171, 0, 172, 173, 175, 532, 174,
	506, 0, 176, 0, 177, 178, 0, 236, 533, 534,
	0, 0, 179, 507, 508, 480, 180, 181, 182, 183,
	0, 0, 184, 185, 186, 500, 0, 187, 188, 189,
	241, 535, 0, 190, 0, 0, 0, 0, 191, 192,
	193, 194, 458, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 454, 455, 0, 0, 0, 0, 456,
	859, 1095, 463, 486, 475, 476, 473, 474, 462, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 87,
	0, 88, 0, 0, 0, 0, 502, 468, 0, 0,
	0, 89, 90, 196, 516, 198, 517, 91, 518, 519,
	0, 92, 202, 203, 93, 483, 501, 520, 521, 206,
	0, 512, 0, 494, 0, 94, 95, 96, 0, 97,
	0, 98, 99, 0, 361, 100, 101, 0, 495, 497,
	0, 496, 498, 102, 103, 104, 105, 522, 106, 523,
	524, 0, 107, 0, 108, 0, 0, 0, 515, 110,
	0, 111, 0, 0, 0, 467, 112, 113, 503, 481,
	0, 0, 114, 115, 525, 0, 116, 0, 117, 0,
	0, 362, 0, 118, 513, 0, 215, 0, 119, 120,
	509, 511, 364, 0, 123, 0, 121, 0, 363, 122,
	526, 527, 528, 0, 493, 0, 365, 124, 366, 125,
	126, 0, 0, 514, 367, 127, 368, 0, 128, 0,
	0, 129, 0, 130, 131, 132, 133, 134, 369, 135,
	136, 139, 137, 457, 138, 482, 510, 140, 529, 141,
	142, 0, 0, 0, 0, 0, 143, 225, 370, 144,
	371, 504, 145, 146, 147, 0, 505, 148, 228, 149,
	0, 150, 151, 152, 530, 153, 154, 0, 156, 157,
	155, 158, 0, 159, 372, 160, 161, 471, 162, 0,
	163, 164, 165, 0, 231, 166, 167, 499, 168, 169,
	373, 170, 531, 233, 171, 0, 172, 173, 175, 532,
	174, 506, 0, 176, 0, 177, 178, 0, 236, 533,
	534, 0, 0, 179, 507, 508, 480, 180, 181, 182,
	183, 0, 0, 184, 185, 186, 500, 0, 187, 188,
	189, 241, 535, 0, 190, 0, 0, 0, 0, 191,
	192, 193, 194, 458, 0, 0, 486, 475, 476, 473,
	474, 462, 0, 0, 454, 455, 452, 0, 0, 0,
	456, 86, 87, 463, 88, 0, 0, 0, 0, 502,
	468, 0, 0, 0, 89, 90, 196, 516, 198, 517,
	91, 518, 519, 0, 92, 202, 203, 93, 483, 501,
	520, 521, 206, 0, 512, 0, 494, 0, 94, 95,
	96, 0, 97, 0, 98, 99, 0, 361, 100, 101,
	0, 495, 497, 0, 496, 498, 102, 103, 104, 105,
	522, 106, 523, 524, 0, 107, 0, 108, 0, 0,
	0, 515, 110, 0, 111, 0, 0, 0, 467, 112,
	113, 503, 481, 0, 0, 114, 115, 525, 0, 116,
	0, 117, 0, 0, 362, 0, 118, 513, 0, 215,
	0, 119, 120, 509, 511, 364, 0, 123, 0, 121,
	0, 363, 122, 526, 527, 528, 0, 493, 0, 365,
	124, 366, 125, 126, 0, 0, 514, 367, 127, 368,
	0, 128, 0, 0, 129, 0, 130, 131, 132, 133,
	134, 369, 135, 136, 139, 137, 457, 138, 482, 510,
	140, 529, 141, 142, 0, 0, 0, 0, 0, 143,
	225, 370, 144, 371, 504, 145, 146, 147, 0, 505,
	148, 228, 149, 0, 150, 151, 152, 530, 153, 154,
	0, 156, 157, 155, 158, 0, 159, 372, 160, 161,
	471, 162, 0, 163, 164, 165, 0, 231, 166, 167,
	499, 168, 169, 373, 170, 531, 233, 171, 0, 172,
	173, 175, 532, 174, 506, 0, 176, 0, 177, 178,
	0, 236, 533, 534, 0, 0, 179, 507, 508, 480,
	180, 181, 182, 183, 0, 0, 184, 185, 186, 500,
	0, 187, 188, 189, 241, 535, 1458, 190, 0, 0,
	0, 0, 191, 192, 193, 194, 458, 0, 0, 486,
	475, 476, 473, 474, 462, 0, 0, 454, 455, 0,
	0, 0, 0, 456, 86, 87, 463, 88, 0, 0,
	0, 0, 502, 468, 0, 0, 0, 89, 90, 196,
	516, 198, 517, 91, 518, 519, 0, 92, 202, 203,
	93, 483, 501, 520, 521, 206, 0, 512, 0, 494,
	0, 94, 95, 96, 0, 97, 0, 98, 99, 0,
	361, 100, 101, 0, 495, 497, 0, 496, 498, 102,
	103, 104, 105, 522, 106, 523, 524, 556, 107, 0,
	108, 0, 0, 0, 515, 110, 0, 111, 0, 0,
	0, 467, 112, 113, 503, 481, 0, 0, 114, 115,
	525, 0, 116, 0, 117, 0, 0, 362, 0, 118,
	513, 0, 215, 0, 119, 120, 509, 511, 364, 0,
	123, 0, 121, 0, 363, 122, 526, 527, 528, 0,
	493, 0, 365, 124, 366, 125, 126, 0, 0, 514,
	367, 127, 368, 0, 128, 0, 0, 129, 0, 130,
	131, 132, 133, 134, 369, 135, 136, 139, 137, 457,
	138, 482, 510, 140, 529, 141, 142, 0, 0, 0,
	0, 0, 143, 225, 370, 144, 371, 504, 145, 146,
	147, 0, 505, 148, 228, 149, 0, 150, 151, 152,
	530, 153, 154, 0, 156, 157, 155, 158, 0, 159,
	372, 160, 161, 471, 162, 0, 163, 164, 165, 0,
	231, 166, 167, 499, 168, 169, 373, 170, 531, 233,
	171, 0, 172, 173, 175, 532, 174, 506, 0, 176,
	0, 177, 178, 0, 236, 533, 534, 0, 0, 179,
	507, 508, 480, 180, 181, 182, 183, 0, 0, 184,
	185, 186, 500, 0, 187, 188, 189, 241, 535, 0,
	190, 0, 0, 0, 0, 191, 192, 193, 194, 458,
	0, 0, 486, 475, 476, 473, 474, 462, 0, 0,
	454, 455, 0, 0, 0, 0, 456, 86, 87, 463,
	88, 0, 0, 0, 0, 502, 468, 0, 0, 0,
	89, 90, 196, 516, 198, 517, 91, 518, 519, 0,
	92, 202, 203, 93, 483, 501, 520, 521, 206, 0,
	512, 0, 494, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 361, 100, 101, 0, 495, 497, 0,
	496, 498, 102, 103, 104, 105, 522, 106, 523, 524,
	0, 107, 0, 108, 0, 0, 0, 515, 110, 0,
	111, 0, 0, 0, 467, 112, 113, 503, 481, 0,
	0, 114, 115, 525, 0, 116, 0, 117, 0, 1146,
	362, 0, 118, 513, 0, 215, 0, 119, 120, 509,
	511, 364, 0, 123, 0, 121, 0, 363, 122, 526,
	527, 528, 0, 493, 0, 365, 124, 366, 125, 126,
	0, 0, 514, 367, 127, 368, 0, 128, 0, 0,
	129, 0, 130, 131, 132, 133, 134, 369, 135, 136,
	139, 137, 457, 138, 482, 510, 140, 529, 141, 142,
	0, 0, 0, 0, 0, 143, 225, 370, 144, 371,
	504, 145, 146, 147, 0, 505, 148, 228, 149, 0,
	150, 151, 152, 530, 153, 154, 0, 156, 157, 155,
	158, 0, 159, 372, 160, 161, 471, 162, 0, 163,
	164, 165, 0, 231, 166, 167, 499, 168, 169, 373,
	170, 531, 233, 171, 0, 172, 173, 175, 532, 174,
	506, 0, 176, 0, 177, 178, 0, 236, 533, 534,
	0, 0, 179, 507, 508, 480, 180, 181, 182, 183,
	0, 0, 184, 185, 186, 500, 0, 187, 188, 189,
	241, 535, 0, 190, 0, 0, 0, 0, 191, 192,
	193, 194, 458, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 454, 455, 0, 0, 0, 0, 456,
	0, 0, 463, 486, 475, 476, 473, 474, 462, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 87,
	794, 88, 0, 0, 0, 0, 502, 468, 0, 0,
	0, 89, 90, 196, 516, 198, 517, 91, 518, 519,
	0, 92, 202, 203, 93, 483, 501, 520, 521, 206,
	0, 512, 0, 494, 0, 94, 95, 96, 0, 97,
	0, 98, 99, 0, 361, 100, 101, 0, 495, 497,
	0, 496, 498, 102, 103, 104, 105, 522, 106, 523,
	524, 0, 107, 0, 108, 0, 0, 0, 515, 110,
	0, 111, 0, 0, 0, 467, 112, 113, 503, 481,
	0, 0, 114, 115, 525, 0, 116, 0, 117, 0,
	0, 362, 0, 118, 513, 0, 215, 0, 119, 120,
	509, 511, 364, 0, 123, 0, 121, 0, 363, 122,
	526, 527, 528, 0, 493, 0, 365, 124, 366, 125,
	126, 0, 0, 514, 367, 127, 368, 0, 128, 0,
	0, 129, 0, 130, 131, 132, 133, 134, 369, 135,
	136, 139, 137, 457, 138, 482, 510, 140, 529, 141,
	142, 0, 0, 0, 0, 0, 143, 225, 370, 144,
	371, 504, 145, 146, 147, 0, 505, 148, 228, 149,
	0, 150, 151, 152, 530, 153, 154, 0, 156, 157,
	155, 158, 0, 159, 372, 160, 161, 471, 162, 0,
	163, 164, 165, 0, 231, 166, 167, 499, 168, 169,
	373, 170, 531, 233, 171, 0, 172, 173, 175, 532,
	174, 506, 0, 176, 0, 177, 178, 0, 236, 533,
	534, 0, 0, 179, 507, 508, 480, 180, 181, 182,
	183, 0, 0, 184, 185, 186, 500, 0, 187, 188,
	189, 241, 535, 0, 190, 0, 0, 0, 0, 191,
	192, 193, 194, 458, 0, 0, 486, 475, 476, 473,
	474, 462, 0, 0, 454, 455, 0, 0, 0, 0,
	456, 86, 87, 463, 88, 0, 0, 0, 0, 502,
	468, 0, 0, 0, 89, 90, 196, 516, 198, 517,
	91, 518, 519, 0, 92, 202, 203, 93, 483, 501,
	520, 521, 206, 0, 512, 0, 494, 0, 94, 95,
	96, 0, 97, 0, 98, 99, 0, 361, 100, 1804,
	0, 495, 497, 0, 496, 498, 102, 103, 104, 105,
	522, 106, 523, 524, 0, 107, 0, 108, 0, 0,
	0, 515, 110, 0, 111, 0, 0, 0, 467, 112,
	113, 503, 481, 0, 0, 114, 115, 525, 0, 116,
	0, 117, 0, 0, 362, 0, 118, 513, 0, 215,
	0, 119, 120, 509, 511, 364, 0, 123, 0, 121,
	0, 363, 122, 526, 527, 528, 0, 493, 0, 365,
	124, 366, 125, 126, 0, 0, 514, 367, 127, 368,
	0, 128, 0, 0, 129, 0, 130, 131, 132, 133,
	134, 369, 135, 136, 139, 137, 457, 138, 482, 510,
	140, 529, 141, 142, 0, 0, 0, 0, 0, 143,
	225, 370, 144, 371, 504, 145, 146, 147, 0, 505,
	148, 228, 149, 0, 150, 151, 152, 530, 153, 154,
	0, 156, 157, 155, 158, 0, 159, 372, 160, 161,
	471, 162, 0, 163, 164, 165, 0, 231, 166, 167,
	499, 168, 169, 373, 170, 531, 233, 171, 0, 172,
	173, 175, 532, 174, 506, 0, 176, 0, 177, 178,
	0, 236, 533, 534, 0, 0, 179, 507, 508, 480,
	180, 181, 1803, 183, 0, 0, 184, 185, 186, 500,
	0, 187, 188, 189, 241, 535, 0, 190, 0, 0,
	0, 0, 191, 192, 193, 194, 458, 0, 0, 486,
	475, 476, 473, 474, 462, 0, 0, 454, 455, 0,
	0, 0, 0, 456, 86, 87, 463, 88, 0, 0,
	0, 0, 502, 468, 0, 0, 0, 89, 90, 1802,
	516, 198, 517, 91, 518, 519, 0, 92, 202, 203,
	93, 483, 501, 520, 521, 206, 0, 512, 0, 494,
	0, 94, 95, 96, 0, 97, 0, 98, 99, 0,
	361, 100, 1804, 0, 495, 497, 0, 496, 498, 102,
	103, 104, 105, 522, 106, 523, 524, 0, 107, 0,
	108, 0, 0, 0, 515, 110, 0, 111, 0, 0,
	0, 467, 112, 113, 503, 481, 0, 0, 114, 115,
	525, 0, 116, 0, 117, 0, 0, 362, 0, 118,
	513, 0, 215, 0, 119, 120, 509, 511, 364, 0,
	123, 0, 121, 0, 363, 122, 526, 527, 528, 0,
	493, 0, 365, 124, 366, 125, 126, 0, 0, 514,
	367, 127, 368, 0, 128, 0, 0, 129, 0, 130,
	131, 132, 133, 134, 369, 135, 136, 139, 137, 457,
	138, 482, 510, 140, 529, 141, 142, 0, 0, 0,
	0, 0, 143, 225, 370, 144, 371, 504, 145, 146,
	147, 0, 505, 148, 228, 149, 0, 150, 151, 152,
	530, 153, 154, 0, 156, 157, 155, 158, 0, 159,
	372, 160, 161, 471, 162, 0, 163, 164, 165, 0,
	231, 166, 167, 499, 168, 169, 373, 170, 531, 233,
	171, 0, 172, 173, 175, 532, 174, 506, 0, 176,
	0, 177, 178, 0, 236, 533, 534, 0, 0, 179,
	507, 508, 480, 180, 181, 1803, 183, 0, 0, 184,
	185, 186, 500, 0, 187, 188, 189, 241, 535, 0,
	190, 0, 0, 0, 0, 191, 192, 193, 194, 458,
	0, 0, 486, 475, 476, 473, 474, 462, 0, 0,
	454, 455, 0, 0, 0, 0, 456, 86, 87, 463,
	88, 0, 0, 0, 0, 502, 468, 0, 0, 0,
	89, 90, 196, 516, 198, 517, 91, 518, 519, 0,
	92, 202, 203, 93, 483, 501, 520, 521, 206, 0,
	512, 0, 494, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 361, 100, 101, 0, 495, 497, 0,
	496, 498, 102, 103, 104, 105, 522, 106, 523, 524,
	0, 107, 0, 108, 0, 0, 0, 515, 110, 0,
	111, 0, 0, 0, 467, 112, 113, 503, 481, 0,
	0, 114, 115, 525, 0, 116, 0, 117, 0, 0,
	362, 0, 118, 513, 0, 215, 0, 119, 120, 509,
	511, 364, 0, 123, 0, 121, 0, 363, 122, 526,
	527, 528, 0, 493, 0, 365, 124, 366, 125, 126,
	0, 0, 514, 367, 127, 368, 0, 128, 0, 0,
	129, 0, 130, 131, 132, 133, 134, 369, 135, 136,
	139, 137, 457, 138, 482, 510, 140, 529, 141, 142,
	0, 0, 0, 0, 0, 143, 225, 370, 144, 371,
	504, 145, 146, 147, 0, 505, 148, 228, 149, 0,
	150, 151, 152, 530, 153, 154, 0, 156, 157, 155,
	158, 0, 159, 372, 160, 161, 471, 162, 0, 163,
	164, 165, 0, 231, 166, 167, 499, 168, 169, 373,
	170, 531, 233, 171, 0, 172, 173, 175, 532, 174,
	506, 0, 176, 0, 177, 178, 0, 236, 533, 534,
	0, 0, 179, 507, 508, 480, 180, 181, 182, 183,
	0, 0, 184, 185, 186, 500, 0, 187, 188, 189,
	241, 535, 0, 190, 0, 0, 0, 0, 191, 192,
	193, 194, 458, 0, 0, 486, 475, 476, 473, 474,
	462, 0, 0, 454, 455, 0, 0, 0, 0, 456,
	86, 87, 463, 88, 0, 0, 0, 0, 502, 468,
	0, 0, 0, 89, 90, 196, 516, 198, 517, 91,
	518, 519, 0, 92, 202, 203, 93, 483, 501, 520,
	521, 206, 0, 512, 0, 494, 0, 94, 95, 96,
	0, 97, 0, 98, 99, 0, 361, 100, 101, 0,
	495, 497, 0, 496, 498, 102, 103, 104, 105, 522,
	106, 523, 524, 0, 107, 0, 108, 0, 0, 0,
	515, 110, 0, 111, 0, 0, 0, 467, 112, 113,
	503, 481, 0, 0, 114, 115, 525, 0, 116, 0,
	117, 0, 0, 362, 0, 118, 513, 0, 215, 0,
	119, 120, 509, 511, 364, 0, 123, 0, 121, 0,
	363, 122, 526, 527, 528, 0, 493, 0, 365, 124,
	366, 125, 126, 0, 0, 514, 367, 127, 368, 0,
	128, 0, 0, 129, 0, 130, 131, 132, 133, 134,
	369, 135, 136, 139, 137, 0, 138, 482, 510, 140,
	529, 141, 142, 0, 0, 0, 0, 0, 143, 225,
	370, 144, 371, 504, 145, 146, 147, 0, 505, 148,
	228, 149, 0, 150, 151, 152, 530, 153, 154, 0,
	156, 157, 155, 158, 0, 159, 372, 160, 161, 1136,
	162, 0, 163, 164, 165, 0, 231, 166, 167, 499,
	168, 169, 373, 170, 531, 233, 171, 0, 172, 173,
	175, 532, 174, 506, 0, 176, 0, 177, 178, 0,
	236, 533, 534, 0, 0, 179, 507, 508, 480, 180,
	181, 182, 183, 0, 0, 184, 185, 186, 500, 0,
	187, 188, 189, 241, 535, 0, 190, 0, 0, 0,
	0, 191, 192, 193, 194, 486, 475, 476, 473, 474,
	462, 0, 0, 0, 0, 0, 1132, 1133, 0, 0,
	86, 87, 1134, 88, 0, 1135, 0, 0, 502, 468,
	0, 0, 0, 89, 90, 0, 516, 198, 517, 91,
	518, 519, 0, 92, 202, 203, 93, 483, 501, 520,
	521, 206, 0, 512, 0, 494, 0, 94, 95, 96,
	0, 97, 0, 98, 99, 0, 361, 100, 1804, 0,
	495, 497, 0, 496, 498, 102, 103, 104, 105, 522,
	106, 523, 524, 0, 107, 0, 108, 0, 0, 0,
	515, 110, 0, 111, 0, 0, 0, 467, 112, 113,
	503, 481, 0, 0, 114, 115, 525, 0, 116, 0,
	117, 0, 0, 362, 0, 118, 513, 0, 215, 0,
	119, 120, 509, 511, 0, 0, 123, 0, 121, 0,
	363, 122, 526, 527, 528, 0, 493, 0, 0, 124,
	366, 125, 126, 0, 0, 514, 367, 127, 0, 0,
	128, 0, 0, 129, 0, 130, 131, 132, 133, 134,
	369, 135, 136, 139, 137, 457, 138, 482, 510, 140,
	529, 141, 142, 0, 0, 0, 0, 0, 143, 225,
	370, 144, 371, 504, 145, 146, 147, 0, 505, 148,
	228, 149, 0, 150, 151, 152, 530, 153, 154, 0,
	156, 157, 155, 158, 0, 159, 372, 160, 161, 471,
	162, 0, 163, 164, 165, 0, 231, 166, 167, 499,
	168, 169, 0, 170, 531, 233, 171, 0, 172, 173,
	175, 532, 174, 506, 0, 176, 0, 177, 178, 0,
	236, 533, 534, 0, 0, 179, 507, 508, 480, 180,
	181, 1803, 183, 0, 0, 184, 185, 186, 500, 0,
	187, 188, 189, 241, 535, 0, 190, 0, 0, 0,
	0, 191, 192, 193, 194, 486, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 454, 455, 0, 0,
	86, 87, 456, 88, 0, 463, 0, 0, 502, 0,
	0, 0, 0, 89, 90, 196, 197, 198, 199, 91,
	200, 201, 0, 92, 202, 203, 93, 0, 501, 204,
	205, 206, 0, 512, 0, 494, 0, 94, 95, 96,
	0, 97, 0, 98, 99, 0, 361, 100, 101, 0,
	495, 497, 0, 496, 498, 102, 103, 104, 105, 208,
	106, 209, 210, 0, 107, 0, 108, 0, 0, 0,
	109, 110, 0, 111, 0, 0, 0, 211, 112, 113,
	503, 0, 0, 0, 114, 115, 213, 0, 116, 0,
	117, 0, 0, 362, 0, 118, 513, 0, 215, 0,
	119, 120, 509, 511, 364, 0, 123, 0, 121, 0,
	363, 122, 218, 219, 220, 0, 221, 0, 365, 124,
	366, 125, 126, 0, 0, 514, 367, 127, 368, 0,
	128, 0, 0, 129, 0, 130, 131, 132, 133, 134,
	369, 135, 136, 139, 137, 0, 138, 0, 510, 140,
	224, 141, 142, 0, 0, 0, 0, 0, 143, 225,
	370, 144, 371, 504, 145, 146, 147, 0, 505, 148,
	228, 149, 0, 150, 151, 152, 229, 153, 154, 0,
	156, 157, 155, 158, 0, 159, 372, 160, 161, 230,
	162, 0, 163, 164, 165, 0, 231, 166, 167, 499,
	168, 169, 373, 170, 232, 233, 171, 0, 172, 173,
	175, 234, 174, 506, 0, 176, 0, 177, 178, 0,
	236, 237, 238, 0, 0, 179, 507, 508, 0, 180,
	181, 182, 183, 0, 0, 184, 185, 186, 500, 0,
	187, 188, 189, 241, 242, 0, 190, 0, 355, 0,
	0, 191, 192, 193, 194, 0, 0, 0, 0, 0,
	0, 0, 0, 86, 87, 0, 88, 0, 0, 0,
	0, 195, 0, 0, 0, 1569, 89, 90, 196, 197,
	198, 199, 91, 200, 201, 0, 92, 202, 203, 93,
	0, 0, 204, 205, 206, 0, 207, 0, 360, 0,
	94, 95, 96, 0, 97, 0, 98, 99, 0, 361,
	100, 101, 0, 0, 0, 0, 0, 0, 102, 103,
	104, 105, 208, 106, 209, 210, 0, 107, 0, 108,
	0, 0, 0, 109, 110, 0, 111, 0, 0, 0,
	211, 112, 113, 212, 0, 0, 0, 114, 115, 213,
	0, 116, 0, 117, 0, 0, 362, 0, 118, 214,
	0, 215, 0, 119, 120, 216, 217, 364, 0, 123,
	0, 121, 0, 363, 122, 218, 219, 220, 0, 221,
	0, 365, 124, 366, 125, 126, 0, 0, 222, 367,
	127, 368, 0, 128, 0, 0, 129, 0, 130, 131,
	132, 133, 134, 369, 135, 136, 139, 137, 0, 138,
	0, 223, 140, 224, 141, 142, 0, 0, 0, 0,
	0, 143, 225, 370, 144, 371, 226, 145, 146, 147,
	0, 227, 148, 228, 149, 0, 150, 151, 152, 229,
	153, 154, 0, 156, 157, 155, 158, 0, 159, 372,
	160, 161, 230, 162, 0, 163, 164, 165, 56, 231,
	166, 167, 0, 168, 169, 373, 170, 232, 233, 171,
	0, 172, 173, 175, 234, 174, 235, 0, 176, 58,
	177, 178, 0, 236, 237, 238, 0, 0, 179, 239,
	240, 0, 180, 181, 182, 183, 0, 0, 184, 185,
	186, 0, 0, 187, 188, 189, 359, 242, 0, 190,
	0, 0, 0, 54, 191, 192, 193, 194, 0, 55,
	0, 355, 665, 0, 666, 661, 656, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 87, 53, 88,
	0, 0, 0, 0, 195, 0, 0, 0, 0, 89,
	90, 196, 197, 198, 199, 91, 200, 201, 0, 92,
	202, 203, 93, 0, 0, 204, 205, 206, 0, 207,
	0, 360, 0, 94, 95, 96, 0, 97, 0, 98,
	99, 0, 361, 100, 101, 0, 0, 0, 0, 0,
	0, 102, 103, 104, 105, 208, 106, 209, 210, 669,
	107, 0, 108, 0, 0, 0, 109, 110, 0, 111,
	0, 0, 0, 211, 112, 113, 212, 658, 0, 0,
	114, 115, 213, 0, 116, 0, 117, 0, 0, 362,
	0, 118, 214, 0, 215, 0, 119, 120, 216, 217,
	364, 0, 123, 0, 121, 0, 363, 122, 218, 219,
	220, 0, 221, 0, 365, 124, 366, 125, 126, 0,
	0, 222, 367, 127, 368, 0, 128, 0, 0, 129,
	0, 130, 131, 132, 133, 134, 369, 135, 136, 139,
	137, 0, 138, 0, 223, 140, 224, 141, 142, 0,
	659, 0, 0, 0, 143, 225, 370, 144, 371, 226,
	145, 146, 147, 0, 227, 148, 228, 149, 0, 150,
	151, 152, 229, 153, 154, 0, 156, 157, 155, 158,
	0, 159, 372, 160, 161, 230, 162, 0, 163, 164,
	165, 0, 231, 166, 167, 0, 168, 169, 373, 170,
	232, 233, 171, 0, 172, 173, 175, 234, 174, 235,
	0, 176, 0, 177, 178, 0, 236, 237, 238, 0,
	0, 179, 239, 240, 657, 180, 181, 182, 183, 0,
	0, 184, 185, 186, 0, 0, 187, 188, 189, 241,
	242, 0, 190, 0, 0, 0, 0, 191, 192, 193,
	194, 355, 665, 0, 666, 661, 656, 0, 0, 0,
	0, 0, 667, 662, 0, 0, 86, 87, 0, 88,
	0, 0, 0, 0, 195, 0, 0, 0, 0, 89,
	90, 196, 197, 198, 199, 91, 200, 201, 0, 92,
	202, 203, 93, 0, 0, 204, 205, 206, 0, 207,
	0, 360, 0, 94, 95, 96, 0, 97, 0, 98,
	99, 0, 361, 100, 101, 0, 0, 0, 0, 0,
	0, 102, 103, 104, 105, 208, 106, 209, 210, 652,
	107, 0, 108, 0, 0, 0, 109, 110, 0, 111,
	0, 0, 0, 211, 112, 113, 212, 658, 0, 0,
	114, 115, 213, 0, 116, 0, 117, 0, 0, 362,
	0, 118, 214, 0, 215, 0, 119, 120, 216, 217,
	364, 0, 123, 0, 121, 0, 363, 122, 218, 219,
	220, 0, 221, 0, 365, 124, 366, 125, 126, 0,
	0, 222, 367, 127, 368, 0, 128, 0, 0, 129,
	0, 130, 131, 132, 133, 134, 369, 135, 136, 139,
	137, 0, 138, 0, 223, 140, 224, 141, 142, 0,
	659, 0, 0, 0, 143, 225, 370, 144, 371, 226,
	145, 146, 147, 0, 227, 148, 228, 149, 0, 150,
	151, 152, 229, 153, 154, 0, 156, 157, 155, 158,
	0, 159, 372, 160, 161, 230, 162, 0, 163, 164,
	165, 0, 231, 166, 167, 0, 168, 169, 373, 170,
	232, 233, 171, 0, 172, 173, 175, 234, 174, 235,
	0, 176, 0, 177, 178, 0, 236, 237, 238, 0,
	0, 179, 239, 240, 657, 180, 181, 182, 183, 0,
	0, 184, 185, 186, 0, 0, 187, 188, 189, 241,
	242, 0, 190, 0, 0, 0, 0, 191, 192, 193,
	194, 355, 665, 0, 666, 661, 656, 0, 0, 0,
	0, 0, 667, 662, 0, 0, 86, 87, 0, 88,
	0, 0, 0, 0, 195, 0, 0, 0, 0, 89,
	90, 196, 197, 198, 199, 91, 200, 201, 0, 92,
	202, 203, 93, 0, 0, 204, 205, 206, 0, 207,
	0, 360, 0, 94, 95, 96, 0, 97, 0, 98,
	99, 0, 361, 100, 101, 0, 0, 0, 0, 0,
	0, 102, 103, 104, 105, 208, 106, 209, 210, 0,
	107, 0, 108, 0, 0, 0, 109, 110, 0, 111,
	0, 0, 0, 211, 112, 113, 212, 658, 0, 0,
	114, 115, 213, 0, 116, 0, 117, 0, 0, 362,
	0, 118, 214, 0, 215, 0, 119, 120, 216, 217,
	364, 0, 123, 0, 121, 0, 363, 122, 218, 219,
	220, 0, 221, 0, 365, 124, 366, 125, 126, 0,
	0, 222, 367, 127, 368, 0, 128, 0, 0, 129,
	0, 130, 131, 132, 133, 134, 369, 135, 136, 139,
	137, 0, 138, 0, 223, 140, 224, 141, 142, 0,
	659, 0, 0, 0, 143, 225, 370, 144, 371, 226,
	145, 146, 147, 0, 227, 148, 228, 149, 0, 150,
	151, 152, 229, 153, 154, 0, 156, 157, 155, 158,
	0, 159, 372, 160, 161, 230, 162, 0, 163, 164,
	165, 0, 231, 166, 167, 0, 168, 169, 373, 170,
	232, 233, 171, 0, 172, 173, 175, 234, 174, 235,
	0, 176, 0, 177, 178, 0, 236, 237, 238, 0,
	0, 179, 239, 240, 657, 180, 181, 182, 183, 0,
	0, 184, 185, 186, 0, 0, 187, 188, 189, 241,
	242, 83, 190, 0, 0, 0, 0, 191, 192, 193,
	194, 0, 0, 0, 0, 0, 86, 87, 0, 88,
	0, 0, 667, 662, 195, 0, 0, 0, 0, 89,
	90, 196, 197, 198, 199, 91, 200, 201, 0, 92,
	202, 203, 93, 0, 0, 204, 205, 206, 0, 207,
	0, 0, 0, 94, 95, 96, 0, 97, 0, 98,
	99, 0, 0, 100, 101, 0, 0, 0, 0, 0,
	0, 102, 103, 104, 105, 208, 106, 209, 210, 0,
	107, 0, 108, 0, 0, 0, 109, 110, 0, 111,
	0, 0, 0, 211, 112, 113, 212, 0, 0, 0,
	114, 115, 213, 0, 116, 0, 117, 0, 0, 0,
	0, 118, 214, 0, 215, 0, 119, 120, 216, 217,
	0, 0, 123, 0, 121, 0, 0, 122, 218, 219,
	220, 0, 221, 0, 0, 124, 0, 125, 126, 0,
	0, 222, 0, 127, 0, 0, 128, 0, 0, 129,
	0, 130, 131, 132, 133, 134, 0, 135, 136, 139,
	137, 0, 138, 0, 223, 140, 224, 141, 142, 0,
	0, 328, 0, 0, 143, 225, 0, 144, 0, 226,
	145, 146, 147, 0, 227, 148, 228, 149, 0, 150,
	151, 152, 229, 153, 154, 0, 156, 157, 155, 158,
	0, 159, 0, 160, 161, 230, 162, 0, 163, 164,
	165, 56, 231, 166, 167, 0, 168, 169, 0, 170,
	232, 233, 171, 0, 172, 173, 175, 234, 174, 235,
	0, 176, 58, 177, 178, 0, 236, 237, 238, 0,
	0, 179, 239, 240, 0, 180, 181, 182, 183, 0,
	0, 184, 185, 186, 0, 0, 187, 188, 189, 359,
	242, 0, 190, 0, 83, 0, 54, 191, 192, 193,
	194, 0, 55, 0, 0, 0, 0, 0, 0, 86,
	87, 0, 88, 0, 0, 0, 0, 195, 0, 0,
	0, 1037, 89, 90, 196, 197, 198, 199, 91, 200,
	201, 0, 92, 202, 203, 93, 0, 0, 204, 205,
	206, 0, 207, 0, 0, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 208, 106,
	209, 210, 0, 107, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 211, 112, 113, 212,
	0, 0, 0, 114, 115, 213, 0, 116, 0, 117,
	0, 0, 0, 0, 118, 214, 0, 215, 0, 119,
	120, 216, 217, 0, 0, 123, 0, 121, 0, 0,
	122, 218, 219, 220, 0, 221, 0, 0, 124, 0,
	125, 126, 0, 0, 222, 0, 127, 0, 0, 128,
	0, 0, 129, 0, 130, 131, 132, 133, 134, 0,
	135, 136, 139, 137, 0, 138, 0, 223, 140, 224,
	141, 142, 0, 0, 0, 0, 0, 143, 225, 0,
	144, 0, 226, 145, 146, 147, 0, 227, 148, 228,
	149, 0, 150, 151, 152, 229, 153, 154, 0, 156,
	157, 155, 158, 0, 159, 0, 160, 161, 230, 162,
	0, 163, 164, 165, 56, 231, 166, 167, 0, 168,
	169, 0, 170, 232, 233, 171, 0, 172, 173, 175,
	234, 174, 235, 0, 176, 58, 177, 178, 0, 236,
	237, 238, 0, 0, 179, 239, 240, 0, 180, 181,
	182, 183, 0, 0, 184, 185, 186, 0, 0, 187,
	188, 189, 359, 242, 0, 190, 0, 83, 0, 54,
	191, 192, 193, 194, 0, 55, 0, 0, 0, 0,
	0, 0, 86, 87, 0, 88, 0, 0, 0, 0,
	195, 0, 1256, 0, 53, 89, 90, 196, 197, 198,
	199, 91, 200, 201, 0, 92, 202, 203, 93, 0,
	0, 204, 205, 206, 0, 207, 0, 0, 0, 94,
	95, 96, 0, 97, 0, 98, 99, 0, 0, 100,
	101, 0, 0, 0, 0, 0, 0, 102, 103, 104,
	105, 208, 106, 209, 210, 0, 107, 0, 108, 0,
	0, 0, 109, 110, 0, 111, 0, 0, 0, 211,
	112, 113, 212, 0, 0, 0, 114, 115, 213, 0,
	116, 0, 117, 0, 0, 0, 0, 118, 214, 0,
	215, 0, 119, 120, 216, 217, 0, 0, 123, 0,
	121, 0, 0, 122, 218, 219, 220, 0, 221, 0,
	0, 124, 0, 125, 126, 0, 0, 222, 0, 127,
	0, 0, 128, 0, 0, 129, 0, 130, 131, 132,
	133, 134, 0, 135, 136, 139, 137, 0, 138, 0,
	223, 140, 224, 141, 142, 0, 0, 0, 0, 0,
	143, 225, 0, 144, 0, 226, 145, 146, 147, 0,
	227, 148, 228, 149, 0, 150, 151, 152, 229, 153,
	154, 0, 156, 157, 155, 158, 0, 159, 0, 160,
	161, 230, 162, 0, 163, 164, 165, 0, 231, 166,
	167, 0, 168, 169, 0, 170, 232, 233, 171, 0,
	172, 173, 175, 234, 174, 235, 0, 176, 0, 177,
	178, 0, 236, 237, 238, 0, 0, 179, 239, 240,
	0, 180, 181, 182, 183, 0, 0, 184, 185, 186,
	0, 0, 187, 188, 189, 241, 242, 0, 190, 0,
	0, 83, 0, 191, 192, 193, 194, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 87, 0, 88,
	0, 0, 0, 0, 195, 0, 0, 0, 444, 89,
	90, 196, 197, 198, 199, 91, 200, 201, 0, 92,
	202, 203, 93, 0, 0, 204, 205, 206, 0, 207,
	0, 0, 0, 94, 95, 96, 0, 97, 0, 98,
	99, 0, 0, 100, 101, 0, 0, 0, 0, 0,
	0, 102, 103, 104, 105, 208, 106, 209, 210, 0,
	107, 0, 108, 0, 0, 0, 109, 110, 0, 111,
	0, 0, 0, 211, 112, 113, 212, 0, 0, 0,
	114, 115, 213, 0, 116, 0, 117, 0, 0, 0,
	0, 118, 214, 0, 215, 0, 119, 120, 216, 217,
	0, 0, 123, 0, 121, 0, 0, 122, 218, 219,
	220, 0, 221, 0, 0, 124, 0, 125, 126, 0,
	0, 222, 0, 127, 0, 0, 128, 0, 0, 129,
	0, 130, 131, 132, 133, 134, 0, 135, 136, 139,
	137, 0, 138, 0, 223, 140, 224, 141, 142, 0,
	0, 328, 0, 0, 143, 225, 0, 144, 0, 226,
	145, 146, 147, 0, 227, 148, 228, 149, 0, 150,
	151, 152, 229, 153, 154, 0, 156, 157, 155, 158,
	0, 159, 0, 160, 161, 230, 162, 0, 163, 164,
	165, 0, 231, 166, 167, 0, 168, 169, 0, 170,
	232, 233, 171, 0, 172, 173, 175, 234, 174, 235,
	0, 176, 0, 177, 178, 0, 236, 237, 238, 0,
	0, 179, 239, 240, 0, 180, 181, 182, 183, 0,
	0, 184, 185, 186, 0, 0, 187, 188, 189, 241,
	242, 0, 190, 0, 83, 0, 0, 191, 192, 193,
	194, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	87, 0, 88, 0, 0, 0, 0, 195, 0, 0,
	0, 1037, 89, 90, 196, 197, 198, 199, 91, 200,
	201, 0, 92, 202, 203, 93, 0, 0, 204, 205,
	206, 0, 207, 0, 0, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 208, 106,
	209, 210, 0, 107, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 211, 112, 113, 212,
	0, 0, 0, 114, 115, 213, 0, 116, 0, 117,
	0, 0, 0, 0, 118, 214, 0, 215, 0, 119,
	120, 216, 217, 0, 0, 123, 0, 121, 0, 0,
	122, 218, 219, 220, 0, 221, 0, 0, 124, 0,
	125, 126, 0, 0, 222, 0, 127, 0, 0, 128,
	0, 0, 129, 0, 130, 131, 132, 133, 134, 0,
	135, 136, 139, 137, 0, 138, 0, 223, 140, 224,
	141, 142, 0, 0, 0, 0, 0, 143, 225, 0,
	144, 0, 226, 145, 146, 147, 0, 227, 148, 228,
	149, 0, 150, 151, 152, 229, 153, 154, 0, 156,
	157, 155, 158, 0, 159, 0, 160, 161, 230, 162,
	0, 163, 164, 165, 0, 231, 166, 167, 0, 168,
	169, 0, 170, 232, 233, 171, 0, 172, 173, 175,
	234, 174, 235, 0, 176, 0, 177, 178, 0, 236,
	237, 238, 0, 0, 179, 239, 240, 0, 180, 181,
	182, 183, 0, 0, 184, 185, 186, 0, 0, 187,
	188, 189, 241, 242, 0, 190, 0, 83, 0, 0,
	191, 192, 193, 194, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 87, 0, 88, 0, 0, 0, 0,
	195, 0, 0, 0, 948, 89, 90, 196, 197, 198,
	199, 91, 200, 201, 0, 92, 202, 203, 93, 0,
	0, 204, 205, 206, 0, 207, 0, 0, 0, 94,
	95, 96, 0, 97, 0, 98, 99, 0, 0, 100,
	101, 0, 0, 0, 0, 0, 0, 102, 103, 104,
	105, 208, 106, 209, 210, 0, 107, 0, 108, 0,
	0, 0, 109, 110, 0, 111, 0, 0, 0, 211,
	112, 113, 212, 0, 0, 0, 114, 115, 213, 0,
	116, 0, 117, 0, 0, 0, 0, 118, 214, 0,
	215, 0, 119, 120, 216, 217, 0, 0, 123, 0,
	121, 0, 0, 122, 218, 219, 220, 0, 221, 0,
	0, 124, 0, 125, 126, 0, 0, 222, 0, 127,
	0, 0, 128, 0, 0, 129, 0, 130, 131, 132,
	133, 134, 0, 135, 136, 139, 137, 0, 138, 0,
	223, 140, 224, 141, 142, 0, 0, 0, 0, 0,
	143, 225, 0, 144, 0, 226, 145, 146, 147, 0,
	227, 148, 228, 149, 0, 150, 151, 152, 229, 153,
	154, 0, 156, 157, 155, 158, 0, 159, 0, 160,
	161, 230, 162, 0, 163, 164, 165, 0, 231, 166,
	167, 0, 168, 169, 0, 170, 232, 233, 171, 0,
	172, 173, 175, 234, 174, 235, 0, 176, 0, 177,
	178, 0, 236, 237, 238, 0, 0, 179, 239, 240,
	0, 180, 181, 182, 183, 0, 0, 184, 185, 186,
	0, 0, 187, 188, 189, 241, 242, 0, 190, 0,
	83, 0, 0, 191, 192, 193, 194, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 87, 0, 88, 0,
	0, 0, 0, 195, 0, 0, 0, 1468, 89, 90,
	196, 197, 198, 199, 91, 200, 201, 0, 92, 202,
	203, 93, 0, 0, 204, 205, 206, 0, 207, 0,
	0, 0, 94, 95, 96, 0, 97, 0, 98, 99,
	0, 0, 100, 101, 0, 0, 0, 0, 0, 0,
	102, 103, 104, 105, 208, 106, 209, 210, 0, 107,
	0, 108, 0, 0, 0, 109, 110, 0, 111, 0,
	0, 0, 211, 112, 113, 212, 0, 0, 0, 114,
	115, 213, 0, 116, 0, 117, 0, 0, 0, 0,
	118, 214, 0, 215, 0, 119, 120, 216, 217, 0,
	0, 123, 0, 121, 0, 0, 122, 218, 219, 220,
	0, 221, 0, 0, 124, 0, 125, 126, 0, 0,
	222, 0, 127, 0, 0, 128, 0, 0, 129, 0,
	130, 131, 132, 133, 134, 0, 135, 136, 139, 137,
	0, 138, 0, 223, 140, 224, 141, 142, 0, 0,
	0, 0, 0, 143, 225, 0, 144, 0, 226, 145,
	146, 147, 0, 227, 148, 228, 149, 0, 150, 151,
	152, 229, 153, 154, 0, 156, 157, 155, 158, 0,
	159, 0, 160, 161, 230, 162, 0, 163, 164, 165,
	0, 231, 166, 167, 0, 168, 169, 0, 170, 232,
	233, 171, 0, 172, 173, 175, 234, 174, 235, 0,
	176, 0, 177, 178, 0, 236, 237, 238, 0, 0,
	179, 239, 240, 0, 180, 181, 182, 183, 0, 0,
	184, 185, 186, 0, 0, 187, 188, 189, 241, 242,
	0, 190, 0, 83, 0, 0, 191, 192, 193, 194,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 87,
	0, 88, 0, 0, 0, 0, 195, 0, 0, 0,
	546, 89, 90, 196, 197, 198, 199, 91, 200, 201,
	0, 92, 202, 203, 93, 0, 0, 204, 205, 206,
	0, 207, 0, 0, 0, 94, 95, 96, 0, 97,
	0, 98, 99, 0, 0, 100, 101, 0, 0, 0,
	0, 0, 0, 102, 103, 636, 105, 208, 106, 209,
	210, 0, 107, 0, 108, 0, 0, 0, 109, 110,
	0, 111, 0, 0, 0, 211, 112, 113, 212, 0,
	0, 0, 114, 115, 213, 0, 116, 0, 117, 0,
	0, 0, 0, 118, 214, 0, 215, 0, 119, 120,
	216, 217, 0, 0, 123, 0, 121, 0, 0, 122,
	218, 219, 220, 0, 221, 0, 0, 124, 0, 125,
	126, 0, 0, 222, 0, 127, 0, 0, 128, 0,
	0, 129, 0, 130, 131, 132, 133, 134, 0, 135,
	136, 139, 137, 0, 138, 0, 223, 140, 224, 141,
	142, 0, 0, 0, 0, 0, 143, 225, 0, 144,
	0, 226, 145, 146, 147, 0, 227, 148, 228, 149,
	0, 150, 151, 152, 229, 153, 154, 0, 156, 157,
	155, 158, 0, 159, 0, 160, 161, 230, 162, 0,
	163, 164, 165, 0, 231, 166, 167, 0, 168, 169,
	0, 170, 232, 233, 171, 0, 172, 173, 175, 234,
	174, 235, 0, 176, 635, 177, 178, 0, 236, 237,
	238, 0, 0, 179, 239, 240, 0, 180, 181, 182,
	183, 0, 0, 184, 185, 186, 0, 0, 187, 188,
	189, 241, 242, 0, 190, 83, 0, 0, 0, 191,
	192, 193, 194, 0, 0, 0, 0, 0, 0, 0,
	86, 87, 0, 88, 0, 0, 639, 0, 195, 0,
	0, 0, 0, 89, 90, 196, 197, 198, 199, 91,
	200, 201, 0, 92, 202, 203, 93, 0, 0, 204,
	205, 206, 0, 207, 0, 0, 0, 94, 95, 96,
	0, 97, 0, 98, 99, 0, 0, 100, 101, 0,
	0, 0, 0, 0, 0, 102, 103, 104, 105, 208,
	106, 209, 210, 0, 107, 0, 108, 0, 0, 0,
	109, 110, 0, 111, 0, 0, 0, 211, 112, 113,
	212, 0, 0, 0, 114, 115, 213, 0, 116, 0,
	117, 0, 0, 0, 0, 118, 214, 0, 215, 0,
	119, 120, 216, 217, 0, 0, 123, 0, 121, 0,
	0, 122, 218, 219, 220, 0, 221, 0, 0, 124,
	0, 125, 126, 0, 0, 222, 0, 127, 0, 0,
	128, 0, 0, 129, 0, 130, 131, 132, 133, 134,
	0, 135, 136, 139, 137, 0, 138, 0, 223, 140,
	224, 141, 142, 0, 0, 0, 0, 0, 143, 225,
	0, 144, 0, 226, 145, 146, 147, 0, 227, 148,
	228, 149, 0, 150, 151, 152, 229, 153, 154, 0,
	156, 157, 155, 158, 0, 159, 0, 160, 161, 230,
	162, 0, 163, 164, 165, 0, 231, 166, 167, 0,
	168, 169, 0, 170, 232, 233, 171, 0, 172, 173,
	175, 234, 174, 235, 0, 176, 0, 177, 178, 0,
	236, 237, 238, 0, 0, 179, 239, 240, 0, 180,
	181, 182, 183, 0, 0, 184, 185, 186, 0, 0,
	187, 188, 189, 241, 242, 0, 190, 355, 0, 0,
	0, 191, 192, 193, 194, 0, 0, 0, 0, 0,
	0, 0, 86, 87, 0, 88, 0, 0, 639, 0,
	195, 0, 0, 0, 0, 89, 90, 196, 197, 198,
	199, 91, 200, 201, 0, 92, 202, 203, 93, 0,
	0, 204, 205, 206, 0, 207, 0, 360, 0, 94,
	95, 96, 0, 97, 0, 98, 99, 0, 361, 100,
	101, 0, 0, 0, 0, 0, 0, 102, 103, 104,
	105, 208, 106, 209, 210, 0, 107, 0, 108, 0,
	0, 0, 109, 110, 0, 111, 0, 0, 0, 211,
	112, 113, 212, 0, 0, 0, 114, 115, 213, 0,
	116, 0, 117, 0, 0, 362, 0, 118, 214, 0,
	215, 0, 119, 120, 216, 217, 364, 0, 123, 0,
	121, 0, 363, 122, 218, 219, 220, 0, 221, 0,
	365, 124, 366, 125, 126, 0, 0, 222, 367, 127,
	368, 0, 128, 0, 0, 129, 0, 130, 131, 132,
	133, 134, 369, 135, 136, 139, 137, 0, 138, 0,
	223, 140, 224, 141, 142, 0, 0, 0, 0, 0,
	143, 225, 370, 144, 371, 226, 145, 146, 147, 0,
	227, 148, 228, 149, 0, 150, 151, 152, 229, 153,
	154, 0, 156, 157, 155, 158, 0, 159, 372, 160,
	161, 230, 162, 0, 163, 164, 165, 0, 231, 166,
	167, 0, 168, 169, 373, 170, 232, 233, 171, 0,
	172, 173, 175, 234, 174, 235, 0, 176, 0, 177,
	178, 0, 236, 237, 238, 0, 0, 179, 239, 240,
	0, 180, 181, 182, 183, 0, 0, 184, 185, 186,
	0, 0, 187, 188, 189, 241, 242, 83, 190, 0,
	0, 0, 0, 191, 192, 193, 194, 0, 0, 0,
	0, 0, 86, 87, 0, 88, 0, 0, 0, 0,
	195, 0, 0, 0, 0, 89, 90, 196, 197, 198,
	199, 91, 200, 201, 0, 92, 202, 203, 93, 0,
	0, 204, 205, 206, 921, 207, 0, 0, 0, 94,
	95, 96, 0, 97, 919, 98, 99, 0, 0, 100,
	101, 0, 0, 0, 0, 0, 0, 102, 103, 104,
	105, 208, 106, 209, 210, 0, 107, 0, 108, 0,
	0, 0, 109, 110, 0, 111, 0, 0, 0, 211,
	112, 113, 212, 0, 1014, 0, 114, 115, 213, 0,
	116, 0, 117, 924, 0, 0, 0, 118, 214, 0,
	215, 0, 119, 120, 216, 217, 0, 0, 123, 1012,
	121, 0, 0, 122, 218, 219, 220, 0, 221, 0,
	0, 124, 0, 125, 126, 0, 0, 222, 0, 127,
	0, 0, 128, 0, 0, 129, 0, 130, 131, 132,
	133, 134, 0, 135, 136, 139, 137, 0, 138, 0,
	223, 140, 224, 141, 142, 0, 0, 0, 0, 0,
	143, 225, 0, 144, 0, 226, 145, 146, 147, 0,
	227, 148, 228, 149, 923, 150, 151, 152, 229, 153,
	154, 0, 156, 157, 155, 158, 0, 159, 0, 160,
	161, 230, 162, 0, 163, 164, 165, 0, 231, 166,
	167, 0, 168, 169, 0, 170, 232, 233, 171, 0,
	172, 173, 175, 234, 174, 235, 0, 176, 0, 177,
	178, 0, 236, 237, 238, 0, 0, 179, 239, 240,
	0, 180, 181, 182, 183, 0, 1013, 184, 185, 186,
	0, 0, 187, 188, 189, 241, 242, 83, 190, 0,
	0, 0, 0, 191, 192, 193, 194, 0, 0, 0,
	0, 0, 86, 87, 0, 88, 0, 0, 0, 0,
	195, 0, 0, 0, 0, 89, 90, 196, 197, 198,
	199, 91, 200, 201, 0, 92, 202, 203, 93, 0,
	0, 204, 205, 206, 921, 207, 0, 0, 916, 94,
	95, 96, 0, 97, 919, 98, 99, 0, 0, 100,
	101, 0, 0, 0, 0, 0, 0, 102, 103, 104,
	105, 208, 106, 209, 210, 0, 107, 0, 108, 0,
	0, 0, 109, 110, 0, 111, 0, 0, 0, 211,
	112, 113, 212, 0, 0, 0, 114, 115, 213, 0,
	116, 0, 117, 924, 0, 0, 0, 118, 214, 0,
	215, 0, 119, 120, 915, 217, 0, 0, 123, 0,
	121, 0, 0, 122, 218, 219, 220, 0, 221, 0,
	0, 124, 0, 125, 126, 0, 0, 222, 0, 127,
	0, 0, 128, 0, 0, 129, 0, 130, 131, 132,
	133, 134, 0, 135, 136, 139, 137, 0, 138, 0,
	223, 140, 224, 141, 142, 0, 0, 0, 0, 0,
	143, 225, 0, 144, 0, 226, 145, 146, 147, 0,
	227, 148, 228, 149, 923, 150, 151, 152, 229, 153,
	154, 0, 156, 157, 155, 158, 0, 159, 0, 160,
	161, 230, 162, 0, 163, 164, 165, 0, 231, 166,
	167, 0, 168, 169, 0, 170, 232, 233, 171, 0,
	172, 173, 175, 234, 174, 235, 0, 176, 0, 177,
	178, 0, 236, 237, 238, 0, 0, 179, 239, 240,
	0, 180, 181, 182, 183, 0, 922, 184, 185, 186,
	0, 0, 187, 188, 189, 241, 242, 83, 190, 0,
	0, 0, 0, 191, 192, 193, 194, 0, 0, 0,
	0, 0, 86, 87, 0, 88, 0, 0, 0, 0,
	195, 0, 1256, 0, 0, 89, 90, 196, 197, 198,
	199, 91, 200, 201, 0, 92, 202, 203, 93, 0,
	0, 204, 205, 206, 0, 207, 0, 0, 0, 94,
	95, 96, 0, 97, 0, 98, 99, 0, 0, 100,
	101, 0, 0, 0, 0, 0, 0, 102, 103, 104,
	105, 208, 106, 209, 210, 0, 107, 0, 108, 0,
	0, 0, 109, 110, 0, 111, 0, 0, 0, 211,
	112, 113, 212, 0, 0, 0, 114, 115, 213, 0,
	116, 0, 117, 0, 0, 0, 0, 118, 214, 0,
	215, 0, 119, 120, 216, 217, 0, 0, 123, 0,
	121, 0, 0, 122, 218, 219, 220, 0, 221, 0,
	0, 124, 0, 125, 126, 0, 0, 222, 0, 127,
	0, 0, 128, 0, 0, 129, 0, 130, 131, 132,
	133, 134, 0, 135, 136, 139, 137, 0, 138, 0,
	223, 140, 224, 141, 142, 0, 0, 0, 0, 0,
	143, 225, 0, 144, 0, 226, 145, 146, 147, 0,
	227, 148, 228, 149, 0, 150, 151, 152, 229, 153,
	154, 0, 156, 157, 155, 158, 0, 159, 0, 160,
	161, 230, 162, 0, 163, 164, 165, 0, 231, 166,
	167, 0, 168, 169, 0, 170, 232, 233, 171, 0,
	172, 173, 175, 234, 174, 235, 0, 176, 0, 177,
	178, 0, 236, 237, 238, 0, 0, 179, 239, 240,
	0, 180, 181, 182, 183, 0, 0, 184, 185, 186,
	0, 0, 187, 188, 189, 241, 242, 83, 190, 0,
	0, 0, 0, 191, 192, 193, 194, 0, 0, 0,
	0, 0, 86, 87, 0, 88, 0, 0, 0, 0,
	195, 0, 0, 0, 0, 89, 90, 196, 197, 198,
	199, 91, 200, 201, 0, 92, 202, 203, 93, 0,
	0, 204, 205, 206, 0, 207, 0, 0, 0, 94,
	95, 96, 0, 97, 0, 98, 99, 0, 0, 100,
	101, 0, 0, 0, 0, 0, 0, 102, 103, 104,
	105, 208, 106, 209, 210, 0, 107, 0, 108, 0,
	0, 0, 109, 110, 0, 111, 0, 0, 0, 211,
	112, 113, 212, 0, 0, 0, 114, 115, 213, 0,
	116, 0, 117, 0, 0, 0, 0, 118, 214, 0,
	215, 0, 119, 120, 216, 217, 0, 0, 123, 0,
	121, 0, 0, 122, 218, 219, 220, 0, 221, 0,
	0, 124, 0, 125, 126, 0, 0, 222, 0, 127,
	0, 0, 128, 0, 0, 129, 0, 130, 131, 132,
	133, 134, 0, 135, 136, 139, 137, 0, 138, 0,
	223, 140, 224, 141, 142, 0, 0, 328, 0, 0,
	143, 225, 0, 144, 0, 226, 145, 146, 147, 0,
	227, 148, 228, 149, 0, 150, 151, 152, 229, 153,
	154, 0, 156, 157, 155, 158, 0, 159, 0, 160,
	161, 230, 162, 0, 163, 164, 165, 0, 231, 166,
	167, 0, 168, 169, 0, 170, 232, 233, 171, 0,
	172, 173, 175, 234, 174, 235, 0, 176, 0, 177,
	178, 0, 236, 237, 238, 0, 0, 179, 239, 240,
	0, 180, 181, 182, 183, 0, 0, 184, 185, 186,
	0, 0, 187, 188, 189, 241, 242, 83, 190, 0,
	0, 0, 0, 191, 192, 193, 194, 0, 0, 0,
	0, 0, 86, 87, 0, 88, 0, 0, 0, 0,
	195, 0, 0, 0, 0, 89, 90, 196, 197, 198,
	199, 91, 200, 201, 0, 92, 202, 203, 93, 0,
	0, 204, 205, 206, 0, 207, 0, 0, 0, 94,
	95, 96, 0, 97, 0, 98, 99, 0, 0, 100,
	101, 0, 0, 0, 0, 0, 0, 102, 103, 104,
	105, 208, 106, 209, 210, 0, 107, 0, 108, 0,
	0, 0, 109, 110, 0, 111, 0, 0, 0, 211,
	112, 113, 212, 0, 0, 0, 114, 115, 213, 0,
	116, 0, 117, 0, 0, 0, 0, 118, 214, 0,
	215, 0, 119, 120, 588, 217, 0, 0, 123, 0,
	121, 0, 0, 122, 218, 219, 220, 0, 221, 0,
	0, 124, 0, 125, 126, 0, 0, 222, 0, 127,
	0, 0, 128, 0, 0, 129, 0, 130, 131, 132,
	133, 134, 0, 135, 136, 139, 137, 0, 138, 0,
	223, 140, 224, 141, 142, 0, 0, 328, 0, 0,
	143, 225, 0, 144, 0, 226, 145, 146, 147, 0,
	227, 148, 228, 149, 0, 150, 151, 152, 229, 153,
	154, 0, 156, 157, 155, 158, 0, 159, 0, 160,
	161, 230, 162, 0, 163, 164, 165, 0, 231, 166,
	167, 0, 168, 169, 0, 170, 232, 233, 171, 0,
	172, 173, 175, 234, 174, 235, 0, 176, 0, 177,
	178, 0, 236, 237, 238, 0, 0, 179, 239, 240,
	0, 180, 181, 182, 183, 0, 0, 184, 185, 186,
	0, 0, 187, 188, 189, 241, 242, 83, 190, 0,
	0, 0, 0, 191, 192, 193, 194, 0, 0, 0,
	0, 0, 86, 87, 380, 88, 0, 0, 0, 0,
	195, 0, 0, 0, 0, 89, 90, 196, 197, 198,
	199, 91, 200, 201, 0, 92, 202, 203, 93, 0,
	0, 204, 205, 206, 0, 207, 0, 0, 0, 94,
	95, 96, 0, 97, 0, 98, 99, 0, 0, 100,
	101, 0, 0, 0, 0, 0, 0, 102, 103, 104,
	105, 208, 106, 209, 210, 0, 107, 0, 108, 0,
	0, 0, 109, 110, 0, 111, 0, 0, 0, 211,
	112, 113, 212, 0, 0, 0, 114, 115, 213, 0,
	116, 0, 117, 0, 0, 0, 0, 118, 214, 0,
	215, 0, 119, 120, 216, 217, 0, 0, 123, 0,
	121, 0, 0, 122, 218, 219, 220, 0, 221, 0,
	0, 124, 0, 125, 126, 0, 0, 222, 0, 127,
	0, 0, 128, 0, 0, 129, 0, 130, 131, 132,
	133, 134, 0, 135, 136, 139, 137, 0, 138, 0,
	223, 140, 224, 141, 142, 0, 0, 0, 0, 0,
	143, 225, 0, 144, 0, 226, 145, 146, 147, 0,
	227, 148, 228, 149, 0, 150, 151, 152, 229, 153,
	154, 0, 156, 157, 155, 158, 0, 159, 0, 160,
	161, 230, 162, 0, 163, 164, 165, 0, 231, 166,
	167, 0, 168, 169, 0, 170, 232, 233, 171, 0,
	172, 173, 175, 234, 174, 235, 0, 176, 0, 177,
	178, 0, 236, 237, 238, 0, 0, 179, 239, 240,
	0, 180, 181, 182, 183, 0, 0, 184, 185, 186,
	0, 0, 187, 188, 189, 241, 242, 83, 190, 0,
	0, 0, 0, 191, 192, 193, 194, 0, 0, 0,
	0, 0, 86, 87, 0, 88, 0, 0, 0, 0,
	195, 0, 0, 0, 0, 89, 90, 196, 197, 198,
	199, 91, 200, 201, 0, 92, 202, 203, 93, 0,
	0, 204, 205, 206, 0, 207, 0, 0, 0, 94,
	95, 96, 0, 97, 0, 98, 99, 0, 0, 100,
	101, 0, 0, 0, 0, 0, 0, 102, 103, 104,
	105, 208, 106, 209, 210, 0, 107, 0, 108, 0,
	0, 0, 109, 110, 0, 111, 0, 0, 0, 211,
	112, 113, 212, 0, 0, 0, 114, 115, 213, 0,
	116, 0, 117, 0, 0, 0, 0, 118, 214, 0,
	215, 0, 119, 120, 334, 217, 0, 0, 123, 0,
	121, 0, 0, 122, 218, 219, 220, 0, 221, 0,
	0, 124, 0, 125, 126, 0, 0, 222, 0, 127,
	0, 0, 128, 0, 0, 129, 0, 130, 131, 132,
	133, 134, 0, 135, 136, 139, 137, 0, 138, 0,
	223, 140, 224, 141, 142, 0, 0, 328, 0, 0,
	143, 225, 0, 144, 0, 226, 145, 146, 147, 0,
	227, 148, 228, 149, 0, 150, 151, 152, 229, 153,
	154, 0, 156, 157, 155, 158, 0, 159, 0, 160,
	161, 230, 162, 0, 163, 164, 165, 0, 231, 166,
	167, 0, 168, 169, 0, 170, 232, 233, 171, 0,
	172, 173, 175, 234, 174, 235, 0, 176, 0, 177,
	178, 0, 236, 237, 238, 0, 0, 179, 239, 240,
	0, 180, 181, 182, 183, 0, 0, 184, 185, 186,
	0, 0, 187, 188, 189, 241, 242, 83, 190, 0,
	0, 0, 0, 191, 192, 193, 194, 0, 0, 0,
	0, 0, 86, 87, 246, 88, 0, 0, 0, 0,
	195, 0, 0, 0, 0, 89, 90, 196, 197, 198,
	199, 91, 200, 201, 0, 92, 202, 203, 93, 0,
	0, 204, 205, 206, 0, 207, 0, 0, 0, 94,
	95, 96, 0, 97, 0, 98, 99, 0, 0, 100,
	101, 0, 0, 0, 0, 0, 0, 102, 103, 104,
	105, 208, 106, 209, 210, 0, 107, 0, 108, 0,
	0, 0, 109, 110, 0, 111, 0, 0, 0, 211,
	112, 113, 212, 0, 0, 0, 114, 115, 213, 0,
	116, 0, 117, 0, 0, 0, 0, 118, 214, 0,
	215, 0, 119, 120, 216, 217, 0, 0, 123, 0,
	121, 0, 0, 122, 218, 219, 220, 0, 221, 0,
	0, 124, 0, 125, 126, 0, 0, 222, 0, 127,
	0, 0, 128, 0, 0, 129, 0, 130, 131, 132,
	133, 134, 0, 135, 136, 139, 137, 0, 138, 0,
	223, 140, 224, 141, 142, 0, 0, 0, 0, 0,
	143, 225, 0, 144, 0, 226, 145, 146, 147, 0,
	227, 148, 228, 245, 0, 150, 151, 152, 229, 153,
	154, 0, 156, 157, 155, 158, 0, 159, 0, 160,
	161, 230, 162, 0, 163, 164, 165, 0, 231, 166,
	167, 0, 168, 169, 0, 170, 232, 233, 171, 0,
	172, 173, 175, 234, 174, 235, 0, 176, 0, 177,
	178, 0, 236, 237, 238, 0, 0, 179, 239, 240,
	0, 180, 181, 182, 183, 0, 0, 184, 185, 186,
	0, 0, 187, 188, 189, 241, 242, 83, 190, 0,
	0, 0, 0, 191, 192, 193, 194, 0, 0, 0,
	0, 0, 86, 87, 0, 88, 0, 0, 0, 0,
	195, 0, 0, 0, 0, 89, 90, 196, 197, 198,
	199, 91, 200, 201, 0, 92, 202, 203, 93, 0,
	0, 204, 205, 206, 0, 207, 0, 0, 0, 94,
	95, 96, 0, 97, 0, 98, 99, 0, 0, 100,
	101, 0, 0, 0, 0, 0, 0, 102, 103, 104,
	105, 208, 106, 209, 210, 0, 107, 0, 108, 0,
	0, 0, 109, 110, 0, 111, 0, 0, 0, 211,
	112, 113, 212, 0, 0, 0, 114, 115, 213, 0,
	116, 0, 117, 0, 0, 0, 0, 118, 214, 0,
	215, 0, 119, 120, 216, 217, 0, 0, 123, 0,
	121, 0, 0, 122, 218, 219, 220, 0, 221, 0,
	0, 124, 0, 125, 126, 0, 0, 222, 0, 127,
	0, 0, 128, 0, 0, 129, 0, 130, 131, 132,
	133, 134, 0, 135, 136, 139, 137, 0, 138, 0,
	223, 140, 224, 141, 142, 0, 0, 0, 0, 0,
	143, 225, 0, 144, 0, 226, 145, 146, 147, 0,
	227, 148, 228, 149, 0, 150, 151, 152, 229, 153,
	154, 0, 156, 157, 155, 158, 0, 159, 0, 160,
	161, 230, 162, 0, 163, 164, 165, 0, 231, 166,
	167, 0, 168, 169, 0, 170, 232, 233, 171, 0,
	172, 173, 175, 234, 174, 235, 0, 176, 0, 177,
	178, 0, 236, 237, 238, 0, 0, 179, 239, 240,
	0, 180, 181, 182, 183, 0, 0, 184, 185, 186,
	0, 0, 187, 188, 189, 241, 242, 83, 190, 0,
	0, 0, 0, 191, 192, 193, 194, 0, 0, 0,
	0, 0, 86, 87, 0, 88, 0, 0, 0, 0,
	195, 0, 0, 0, 0, 89, 90, 196, 197, 198,
	199, 91, 200, 201, 0, 92, 202, 203, 93, 0,
	0, 204, 205, 206, 0, 207, 0, 0, 0, 94,
	95, 96, 0, 97, 0, 98, 99, 0, 0, 100,
	101, 0, 0, 0, 0, 0, 0, 102, 103, 104,
	105, 208, 106, 209, 210, 0, 107, 0, 108, 0,
	0, 0, 109, 110, 0, 111, 0, 0, 0, 211,
	112, 113, 212, 0, 0, 0, 114, 115, 213, 0,
	116, 0, 117, 0, 0, 0, 0, 118, 214, 0,
	215, 0, 119, 120, 1182, 217, 0, 0, 123, 0,
	121, 0, 0, 122, 218, 219, 220, 0, 221, 0,
	0, 124, 0, 125, 126, 0, 0, 222, 0, 127,
	0, 0, 128, 0, 0, 129, 0, 130, 131, 132,
	133, 134, 0, 135, 136, 139, 137, 0, 138, 0,
	223, 140, 224, 141, 142, 0, 0, 0, 0, 0,
	143, 225, 0, 144, 0, 226, 145, 146, 147, 0,
	227, 148, 228, 149, 0, 150, 151, 152, 229, 153,
	154, 0, 156, 157, 155, 158, 0, 159, 0, 160,
	161, 230, 162, 0, 163, 164, 165, 0, 231, 166,
	167, 0, 168, 169, 0, 170, 232, 233, 171, 0,
	172, 173, 175, 234, 174, 235, 0, 176, 0, 177,
	178, 0, 236, 237, 238, 0, 0, 179, 239, 240,
	0, 180, 181, 182, 183, 0, 0, 184, 185, 186,
	0, 0, 187, 188, 189, 241, 242, 83, 190, 0,
	0, 0, 0, 191, 192, 193, 194, 0, 0, 0,
	0, 0, 86, 87, 0, 88, 0, 0, 0, 0,
	195, 0, 0, 0, 0, 89, 90, 196, 197, 198,
	199, 91, 200, 201, 0, 92, 202, 203, 93, 0,
	0, 204, 205, 206, 0, 207, 0, 0, 0, 94,
	95, 96, 0, 97, 0, 98, 99, 0, 0, 100,
	101, 0, 0, 0, 0, 0, 0, 102, 103, 104,
	105, 208, 106, 209, 210, 0, 107, 0, 108, 0,
	0, 0, 109, 110, 0, 111, 0, 0, 0, 211,
	112, 113, 212, 0, 0, 0, 114, 115, 213, 0,
	116, 0, 117, 0, 0, 0, 0, 118, 214, 0,
	215, 0, 119, 120, 1180, 217, 0, 0, 123, 0,
	121, 0, 0, 122, 218, 219, 220, 0, 221, 0,
	0, 124, 0, 125, 126, 0, 0, 222, 0, 127,
	0, 0, 128, 0, 0, 129, 0, 130, 131, 132,
	133, 134, 0, 135, 136, 139, 137, 0, 138, 0,
	223, 140, 224, 141, 142, 0, 0, 0, 0, 0,
	143, 225, 0, 144, 0, 226, 145, 146, 147, 0,
	227, 148, 228, 149, 0, 150, 151, 152, 229, 153,
	154, 0, 156, 157, 155, 158, 0, 159, 0, 160,
	161, 230, 162, 0, 163, 164, 165, 0, 231, 166,
	167, 0, 168, 169, 0, 170, 232, 233, 171, 0,
	172, 173, 175, 234, 174, 235, 0, 176, 0, 177,
	178, 0, 236, 237, 238, 0, 0, 179, 239, 240,
	0, 180, 181, 182, 183, 0, 0, 184, 185, 186,
	0, 0, 187, 188, 189, 241, 242, 83, 190, 0,
	0, 0, 0, 191, 192, 193, 194, 0, 0, 0,
	0, 0, 86, 87, 0, 88, 0, 0, 0, 0,
	195, 0, 0, 0, 0, 89, 90, 196, 197, 198,
	199, 91, 200, 201, 0, 92, 202, 203, 93, 0,
	0, 204, 205, 206, 0, 207, 0, 0, 0, 94,
	95, 96, 0, 97, 0, 98, 99, 0, 0, 100,
	101, 0, 0, 0, 0, 0, 0, 102, 103, 104,
	105, 208, 106, 209, 210, 0, 107, 0, 108, 0,
	0, 0, 109, 110, 0, 111, 0, 0, 0, 211,
	112, 113, 212, 0, 0, 0, 114, 115, 213, 0,
	116, 0, 117, 0, 0, 0, 0, 118, 214, 0,
	215, 0, 119, 120, 1171, 217, 0, 0, 123, 0,
	121, 0, 0, 122, 218, 219, 220, 0, 221, 0,
	0, 124, 0, 125, 126, 0, 0, 222, 0, 127,
	0, 0, 128, 0, 0, 129, 0, 130, 131, 132,
	133, 134, 0, 135, 136, 139, 137, 0, 138, 0,
	223, 140, 224, 141, 142, 0, 0, 0, 0, 0,
	143, 225, 0, 144, 0, 226, 145, 146, 147, 0,
	227, 148, 228, 149, 0, 150, 151, 152, 229, 153,
	154, 0, 156, 157, 155, 158, 0, 159, 0, 160,
	161, 230, 162, 0, 163, 164, 165, 0, 231, 166,
	167, 0, 168, 169, 0, 170, 232, 233, 171, 0,
	172, 173, 175, 234, 174, 235, 0, 176, 0, 177,
	178, 0, 236, 237, 238, 0, 0, 179, 239, 240,
	0, 180, 181, 182, 183, 0, 0, 184, 185, 186,
	0, 0, 187, 188, 189, 241, 242, 83, 190, 0,
	0, 0, 0, 191, 192, 193, 194, 0, 0, 0,
	0, 0, 86, 87, 0, 88, 0, 0, 0, 0,
	195, 0, 0, 0, 0, 89, 90, 196, 197, 198,
	199, 91, 200, 201, 0, 92, 202, 203, 93, 0,
	0, 204, 205, 206, 0, 207, 0, 0, 0, 94,
	95, 96, 0, 97, 0, 98, 99, 0, 0, 100,
	101, 0, 0, 0, 0, 0, 0, 102, 103, 104,
	105, 208, 106, 209, 210, 0, 107, 0, 108, 0,
	0, 0, 109, 110, 0, 111, 0, 0, 0, 211,
	112, 113, 212, 0, 0, 0, 114, 115, 213, 0,
	116, 0, 117, 0, 0, 0, 0, 118, 214, 0,
	215, 0, 119, 120, 784, 217, 0, 0, 123, 0,
	121, 0, 0, 122, 218, 219, 220, 0, 221, 0,
	0, 124, 0, 125, 126, 0, 0, 222, 0, 127,
	0, 0, 128, 0, 0, 129, 0, 130, 131, 132,
	133, 134, 0, 135, 136, 139, 137, 0, 138, 0,
	223, 140, 224, 141, 142, 0, 0, 0, 0, 0,
	143, 225, 0, 144, 0, 226, 145, 146, 147, 0,
	227, 148, 228, 149, 0, 150, 151, 152, 229, 153,
	154, 0, 156, 157, 155, 158, 0, 159, 0, 160,
	161, 230, 162, 0, 163, 164, 165, 0, 231, 166,
	167, 0, 168, 169, 0, 170, 232, 233, 171, 0,
	172, 173, 175, 234, 174, 235, 0, 176, 0, 177,
	178, 0, 236, 237, 238, 0, 0, 179, 239, 240,
	0, 180, 181, 182, 183, 0, 0, 184, 185, 186,
	0, 0, 187, 188, 189, 241, 242, 83, 190, 0,
	0, 0, 0, 191, 192, 193, 194, 0, 0, 0,
	0, 0, 86, 87, 0, 88, 0, 0, 0, 0,
	195, 0, 0, 0, 0, 89, 90, 196, 197, 198,
	199, 91, 200, 201, 0, 92, 202, 203, 93, 0,
	0, 204, 205, 206, 0, 207, 0, 0, 0, 94,
	95, 96, 0, 97, 0, 98, 99, 0, 0, 100,
	101, 0, 0, 0, 0, 0, 0, 102, 103, 104,
	105, 208, 106, 209, 210, 0, 107, 0, 108, 0,
	0, 0, 109, 110, 0, 111, 0, 0, 0, 211,
	112, 113, 212, 0, 0, 0, 114, 115, 213, 0,
	116, 0, 117, 0, 0, 0, 0, 118, 214, 0,
	215, 0, 119, 120, 216, 217, 0, 0, 123, 0,
	121, 0, 0, 122, 218, 219, 220, 0, 221, 0,
	0, 124, 0, 125, 126, 0, 0, 222, 0, 127,
	0, 0, 128, 0, 0, 129, 0, 130, 131, 132,
	133, 134, 0, 135, 136, 139, 137, 0, 138, 0,
	223, 140, 224, 141, 142, 0, 0, 0, 0, 0,
	143, 225, 0, 144, 0, 226, 145, 146, 147, 0,
	227, 148, 228, 149, 0, 150, 151, 152, 229, 153,
	154, 0, 156, 157, 155, 158, 0, 159, 0, 160,
	161, 230, 162, 0, 260, 164, 165, 0, 231, 166,
	167, 0, 168, 169, 0, 170, 232, 233, 171, 0,
	172, 173, 175, 234, 174, 235, 0, 176, 0, 177,
	178, 0, 236, 237, 238, 0, 0, 179, 239, 240,
	0, 180, 181, 182, 183, 0, 0, 184, 185, 186,
	0, 0, 187, 188, 189, 241, 242, 83, 190, 0,
	0, 0, 0, 191, 192, 193, 194, 0, 0, 0,
	0, 0, 86, 87, 0, 88, 0, 0, 0, 0,
	195, 0, 575, 0, 0, 89, 90, 196, 197, 198,
	199, 91, 200, 201, 0, 92, 202, 203, 93, 0,
	0, 204, 205, 206, 0, 207, 0, 0, 0, 94,
	95, 96, 0, 97, 0, 98, 99, 0, 0, 100,
	101, 0, 0, 0, 0, 0, 0, 102, 103, 104,
	105, 208, 106, 209, 210, 0, 107, 0, 108, 0,
	0, 0, 109, 110, 0, 111, 0, 0, 0, 211,
	112, 113, 212, 0, 0, 0, 114, 115, 213, 0,
	116, 0, 117, 0, 0, 0, 0, 118, 214, 0,
	215, 0, 119, 120, 216, 217, 0, 0, 123, 0,
	121, 0, 0, 122, 218, 219, 220, 0, 221, 0,
	0, 124, 0, 125, 126, 0, 0, 222, 0, 127,
	0, 0, 128, 0, 0, 129, 0, 130, 131, 132,
	133, 134, 0, 135, 136, 139, 137, 0, 138, 0,
	223, 140, 224, 141, 142, 0, 0, 0, 0, 0,
	143, 225, 0, 144, 0, 226, 145, 146, 147, 0,
	227, 148, 228, 149, 0, 150, 151, 152, 229, 153,
	154, 0, 156, 157, 155, 158, 0, 159, 0, 160,
	161, 230, 162, 0, 163, 164, 165, 0, 231, 166,
	167, 0, 0, 169, 0, 170, 232, 233, 171, 0,
	172, 173, 175, 234, 174, 235, 0, 176, 0, 177,
	178, 0, 236, 237, 238, 0, 0, 179, 239, 240,
	0, 180, 181, 182, 183, 0, 0, 184, 185, 186,
	0, 0, 187, 188, 189, 241, 242, 83, 190, 0,
	0, 0, 0, 191, 192, 193, 194, 0, 0, 0,
	0, 0, 86, 87, 0, 88, 0, 0, 0, 0,
	195, 0, 0, 0, 0, 89, 90, 196, 197, 198,
	199, 91, 200, 201, 0, 92, 202, 203, 93, 0,
	0, 204, 205, 206, 0, 207, 0, 0, 0, 94,
	95, 96, 0, 97, 0, 98, 99, 0, 0, 100,
	101, 0, 0, 0, 0, 0, 0, 102, 103, 104,
	105, 208, 106, 209, 210, 0, 107, 0, 108, 0,
	0, 0, 109, 110, 0, 111, 0, 0, 0, 211,
	112, 113, 212, 0, 0, 0, 114, 115, 213, 0,
	116, 0, 117, 0, 0, 0, 0, 118, 214, 0,
	215, 0, 119, 120, 429, 217, 0, 0, 123, 0,
	121, 0, 0, 122, 218, 219, 220, 0, 221, 0,
	0, 124, 0, 125, 126, 0, 0, 222, 0, 127,
	0, 0, 128, 0, 0, 129, 0, 130, 131, 132,
	133, 134, 0, 135, 136, 139, 137, 0, 138, 0,
	223, 140, 224, 141, 142, 0, 0, 0, 0, 0,
	143, 225, 0, 144, 0, 226, 145, 146, 147, 0,
	227, 148, 228, 149, 0, 150, 151, 152, 229, 153,
	154, 0, 156, 157, 155, 158, 0, 159, 0, 160,
	161, 230, 162, 0, 163, 164, 165, 0, 231, 166,
	167, 0, 168, 169, 0, 170, 232, 233, 171, 0,
	172, 173, 175, 234, 174, 235, 0, 176, 0, 177,
	178, 0, 236, 237, 238, 0, 0, 179, 239, 240,
	0, 180, 181, 182, 183, 0, 0, 184, 185, 186,
	0, 0, 187, 188, 189, 241, 242, 83, 190, 0,
	0, 0, 0, 191, 192, 193, 194, 0, 0, 0,
	0, 0, 86, 87, 0, 88, 0, 0, 0, 0,
	195, 0, 0, 0, 0, 89, 90, 196, 197, 198,
	199, 91, 200, 201, 0, 92, 202, 203, 93, 0,
	0, 204, 205, 206, 0, 207, 0, 0, 0, 94,
	95, 96, 0, 97, 0, 98, 99, 0, 0, 100,
	101, 0, 0, 0, 0, 0, 0, 102, 103, 104,
	105, 208, 106, 209, 210, 0, 107, 0, 108, 0,
	0, 0, 109, 110, 0, 111, 0, 0, 0, 211,
	112, 113, 212, 0, 0, 0, 114, 115, 213, 0,
	116, 0, 117, 0, 0, 0, 0, 118, 214, 0,
	215, 0, 119, 120, 426, 217, 0, 0, 123, 0,
	121, 0, 0, 122, 218, 219, 220, 0, 221, 0,
	0, 124, 0, 125, 126, 0, 0, 222, 0, 127,
	0, 0, 128, 0, 0, 129, 0, 130, 131, 132,
	133, 134, 0, 135, 136, 139, 137, 0, 138, 0,
	223, 140, 224, 141, 142, 0, 0, 0, 0, 0,
	143, 225, 0, 144, 0, 226, 145, 146, 147, 0,
	227, 148, 228, 149, 0, 150, 151, 152, 229, 153,
	154, 0, 156, 157, 155, 158, 0, 159, 0, 160,
	161, 230, 162, 0, 163, 164, 165, 0, 231, 166,
	167, 0, 168, 169, 0, 170, 232, 233, 171, 0,
	172, 173, 175, 234, 174, 235, 0, 176, 0, 177,
	178, 0, 236, 237, 238, 0, 0, 179, 239, 240,
	0, 180, 181, 182, 183, 0, 0, 184, 185, 186,
	0, 0, 187, 188, 189, 241, 242, 83, 190, 0,
	0, 0, 0, 191, 192, 193, 194, 0, 0, 0,
	0, 0, 86, 87, 0, 88, 0, 0, 0, 0,
	195, 0, 0, 0, 0, 89, 90, 196, 197, 198,
	199, 91, 200, 201, 0, 92, 202, 203, 93, 0,
	0, 204, 205, 386, 0, 207, 0, 0, 0, 94,
	95, 96, 0, 97, 0, 98, 99, 0, 0, 100,
	101, 0, 0, 0, 0, 0, 0, 102, 103, 104,
	105, 208, 106, 209, 210, 0, 107, 0, 108, 0,
	0, 0, 109, 110, 0, 111, 0, 0, 0, 211,
	112, 113, 212, 0, 0, 0, 114, 115, 213, 0,
	116, 0, 117, 0, 0, 0, 0, 118, 214, 0,
	215, 0, 119, 120, 216, 217, 0, 0, 123, 0,
	121, 0, 0, 122, 218, 219, 220, 0, 221, 0,
	0, 124, 0, 125, 126, 0, 0, 222, 0, 127,
	0, 0, 128, 0, 0, 129, 0, 130, 131, 132,
	133, 271, 0, 135, 136, 139, 137, 0, 138, 0,
	223, 140, 224, 141, 142, 0, 0, 0, 0, 0,
	143, 225, 0, 144, 0, 226, 145, 146, 147, 0,
	227, 148, 228, 149, 0, 150, 151, 152, 229, 153,
	154, 0, 156, 157, 155, 158, 0, 159, 0, 160,
	161, 230, 162, 0, 163, 164, 165, 0, 231, 166,
	167, 0, 168, 169, 0, 170, 232, 233, 171, 0,
	172, 173, 175, 234, 174, 235, 0, 176, 0, 177,
	178, 0, 270, 237, 238, 0, 0, 266, 239, 240,
	0, 180, 181, 182, 183, 0, 0, 184, 185, 186,
	0, 0, 187, 188, 189, 241, 242, 83, 190, 0,
	0, 0, 0, 191, 192, 193, 194, 0, 0, 0,
	0, 0, 86, 87, 0, 88, 0, 0, 0, 0,
	195, 0, 0, 0, 0, 89, 90, 196, 197, 198,
	199, 91, 200, 201, 0, 92, 202, 203, 93, 0,
	0, 204, 205, 206, 0, 207, 0, 0, 0, 94,
	95, 96, 0, 97, 0, 98, 99, 0, 0, 100,
	101, 0, 0, 0, 0, 0, 0, 102, 103, 104,
	105, 208, 106, 209, 210, 0, 107, 0, 108, 0,
	0, 0, 109, 110, 0, 111, 0, 0, 0, 211,
	112, 113, 212, 0, 0, 0, 114, 115, 213, 0,
	116, 0, 117, 0, 0, 0, 0, 118, 214, 0,
	215, 0, 119, 120, 216, 217, 0, 0, 123, 0,
	121, 0, 0, 122, 218, 219, 220, 0, 221, 0,
	0, 124, 0, 125, 126, 0, 0, 222, 0, 127,
	0, 0, 128, 0, 0, 129, 0, 130, 131, 132,
	133, 271, 0, 135, 136, 139, 137, 0, 138, 0,
	223, 140, 224, 141, 142, 0, 0, 0, 0, 0,
	143, 225, 0, 144, 0, 226, 145, 146, 147, 0,
	227, 148, 228, 149, 0, 150, 151, 152, 229, 153,
	154, 0, 156, 157, 155, 158, 0, 159, 0, 160,
	161, 230, 162, 0, 163, 164, 165, 0, 231, 166,
	167, 0, 168, 169, 0, 170, 232, 233, 171, 0,
	172, 173, 175, 234, 174, 235, 0, 176, 0, 177,
	178, 0, 270, 237, 238, 0, 0, 266, 239, 240,
	0, 180, 181, 182, 183, 0, 0, 184, 185, 186,
	0, 0, 187, 188, 189, 241, 242, 83, 190, 0,
	0, 0, 0, 191, 192, 193, 194, 0, 0, 0,
	0, 0, 86, 87, 0, 88, 0, 0, 0, 0,
	195, 0, 0, 0, 0, 89, 90, 196, 197, 198,
	199, 91, 200, 201, 0, 92, 202, 203, 93, 0,
	0, 204, 205, 206, 0, 207, 0, 0, 0, 94,
	95, 96, 0, 97, 0, 98, 99, 0, 0, 100,
	101, 0, 0, 0, 0, 0, 0, 102, 103, 104,
	105, 208, 106, 209, 210, 0, 107, 0, 108, 0,
	0, 0, 109, 110, 0, 111, 0, 0, 0, 211,
	112, 113, 212, 0, 0, 0, 114, 115, 213, 0,
	116, 0, 117, 0, 0, 0, 0, 118, 214, 0,
	215, 0, 119, 120, 350, 217, 0, 0, 123, 0,
	121, 0, 0, 122, 218, 219, 220, 0, 221, 0,
	0, 124, 0, 125, 126, 0, 0, 222, 0, 127,
	0, 0, 128, 0, 0, 129, 0, 130, 131, 132,
	133, 134, 0, 135, 136, 139, 137, 0, 138, 0,
	223, 140, 224, 141, 142, 0, 0, 0, 0, 0,
	143, 225, 0, 144, 0, 226, 145, 146, 147, 0,
	227, 148, 228, 149, 0, 150, 151, 152, 229, 153,
	154, 0, 156, 157, 155, 158, 0, 159, 0, 160,
	161, 230, 162, 0, 163, 164, 165, 0, 231, 166,
	167, 0, 168, 169, 0, 170, 232, 233, 171, 0,
	172, 173, 175, 234, 174, 235, 0, 176, 0, 177,
	178, 0, 236, 237, 238, 0, 0, 179, 239, 240,
	0, 180, 181, 182, 183, 0, 0, 184, 185, 186,
	0, 0, 187, 188, 189, 241, 242, 83, 190, 0,
	0, 0, 0, 191, 192, 193, 194, 0, 0, 0,
	0, 0, 86, 87, 0, 88, 0, 0, 0, 0,
	195, 0, 0, 0, 0, 89, 90, 196, 197, 198,
	199, 91, 200, 201, 0, 92, 202, 203, 93, 0,
	0, 204, 205, 206, 0, 207, 0, 0, 0, 94,
	95, 96, 0, 97, 0, 98, 99, 0, 0, 100,
	101, 0, 0, 0, 0, 0, 0, 102, 103, 104,
	105, 208, 106, 209, 210, 0, 107, 0, 108, 0,
	0, 0, 109, 110, 0, 111, 0, 0, 0, 211,
	112, 113, 212, 0, 0, 0, 114, 115, 213, 0,
	116, 0, 117, 0, 0, 0, 0, 118, 214, 0,
	215, 0, 119, 120, 347, 217, 0, 0, 123, 0,
	121, 0, 0, 122, 218, 219, 220, 0, 221, 0,
	0, 124, 0, 125, 126, 0, 0, 222, 0, 127,
	0, 0, 128, 0, 0, 129, 0, 130, 131, 132,
	133, 134, 0, 135, 136, 139, 137, 0, 138, 0,
	223, 140, 224, 141, 142, 0, 0, 0, 0, 0,
	143, 225, 0, 144, 0, 226, 145, 146, 147, 0,
	227, 148, 228, 149, 0, 150, 151, 152, 229, 153,
	154, 0, 156, 157, 155, 158, 0, 159, 0, 160,
	161, 230, 162, 0, 163, 164, 165, 0, 231, 166,
	167, 0, 168, 169, 0, 170, 232, 233, 171, 0,
	172, 173, 175, 234, 174, 235, 0, 176, 0, 177,
	178, 0, 236, 237, 238, 0, 0, 179, 239, 240,
	0, 180, 181, 182, 183, 0, 0, 184, 185, 186,
	0, 0, 187, 188, 189, 241, 242, 83, 190, 0,
	0, 0, 0, 191, 192, 193, 194, 0, 0, 0,
	0, 0, 86, 87, 0, 88, 0, 0, 0, 0,
	195, 0, 0, 0, 0, 89, 90, 196, 197, 198,
	199, 91, 200, 201, 0, 92, 202, 203, 93, 0,
	0, 204, 205, 206, 0, 207, 0, 0, 0, 94,
	95, 96, 0, 97, 0, 98, 99, 0, 0, 100,
	101, 0, 0, 0, 0, 0, 0, 102, 103, 104,
	105, 208, 106, 209, 210, 0, 107, 0, 108, 0,
	0, 0, 109, 110, 0, 111, 0, 0, 0, 211,
	112, 113, 212, 0, 0, 0, 114, 115, 213, 0,
	116, 0, 117, 0, 0, 0, 0, 118, 214, 0,
	215, 0, 119, 120, 345, 217, 0, 0, 123, 0,
	121, 0, 0, 122, 218, 219, 220, 0, 221, 0,
	0, 124, 0, 125, 126, 0, 0, 222, 0, 127,
	0, 0, 128, 0, 0, 129, 0, 130, 131, 132,
	133, 134, 0, 135, 136, 139, 137, 0, 138, 0,
	223, 140, 224, 141, 142, 0, 0, 0, 0, 0,
	143, 225, 0, 144, 0, 226, 145, 146, 147, 0,
	227, 148, 228, 149, 0, 150, 151, 152, 229, 153,
	154, 0, 156, 157, 155, 158, 0, 159, 0, 160,
	161, 230, 162, 0, 163, 164, 165, 0, 231, 166,
	167, 0, 168, 169, 0, 170, 232, 233, 171, 0,
	172, 173, 175, 234, 174, 235, 0, 176, 0, 177,
	178, 0, 236, 237, 238, 0, 0, 179, 239, 240,
	0, 180, 181, 182, 183, 0, 0, 184, 185, 186,
	0, 0, 187, 188, 189, 241, 242, 83, 190, 0,
	0, 0, 0, 191, 192, 193, 194, 0, 0, 0,
	0, 0, 86, 87, 0, 88, 0, 0, 0, 0,
	195, 0, 0, 0, 0, 89, 90, 196, 197, 198,
	199, 91, 200, 201, 0, 92, 202, 203, 93, 0,
	0, 204, 205, 206, 0, 207, 0, 0, 0, 94,
	95, 96, 0, 97, 0, 98, 99, 0, 0, 100,
	101, 0, 0, 0, 0, 0, 0, 102, 103, 104,
	105, 208, 106, 209, 210, 0, 107, 0, 108, 0,
	0, 0, 109, 110, 0, 111, 0, 0, 0, 211,
	112, 113, 212, 0, 0, 0, 114, 115, 213, 0,
	116, 0, 117, 0, 0, 0, 0, 118, 214, 0,
	215, 0, 119, 120, 337, 217, 0, 0, 123, 0,
	121, 0, 0, 122, 218, 219, 220, 0, 221, 0,
	0, 124, 0, 125, 126, 0, 0, 222, 0, 127,
	0, 0, 128, 0, 0, 129, 0, 130, 131, 132,
	133, 134, 0, 135, 136, 139, 137, 0, 138, 0,
	223, 140, 224, 141, 142, 0, 0, 0, 0, 0,
	143, 225, 0, 144, 0, 226, 145, 146, 147, 0,
	227, 148, 228, 149, 0, 150, 151, 152, 229, 153,
	154, 0, 156, 157, 155, 158, 0, 159, 0, 160,
	161, 230, 162, 0, 163, 164, 165, 0, 231, 166,
	167, 0, 168, 169, 0, 170, 232, 233, 171, 0,
	172, 173, 175, 234, 174, 235, 0, 176, 0, 177,
	178, 0, 236, 237, 238, 0, 0, 179, 239, 240,
	0, 180, 181, 182, 183, 0, 0, 184, 185, 186,
	0, 0, 187, 188, 189, 241, 242, 83, 190, 0,
	0, 0, 0, 191, 192, 193, 194, 0, 0, 0,
	0, 0, 86, 87, 0, 88, 0, 0, 0, 0,
	195, 0, 0, 0, 0, 89, 90, 196, 197, 198,
	199, 91, 200, 201, 0, 92, 202, 203, 93, 0,
	0, 204, 205, 206, 0, 207, 0, 0, 0, 94,
	95, 96, 0, 97, 0, 98, 99, 0, 0, 100,
	101, 0, 0, 0, 0, 0, 0, 102, 103, 104,
	105, 208, 106, 209, 210, 0, 107, 0, 108, 0,
	0, 0, 109, 110, 0, 111, 0, 0, 0, 211,
	112, 113, 212, 0, 0, 0, 114, 115, 213, 0,
	116, 0, 117, 0, 0, 0, 0, 118, 214, 0,
	215, 0, 119, 120, 216, 217, 0, 0, 123, 0,
	121, 0, 0, 122, 218, 219, 220, 0, 221, 0,
	0, 124, 0, 125, 126, 0, 0, 222, 0, 127,
	0, 0, 128, 0, 0, 129, 0, 130, 131, 132,
	133, 134, 0, 135, 136, 139, 137, 0, 138, 0,
	223, 140, 224, 141, 142, 0, 0, 0, 0, 0,
	143, 225, 0, 144, 0, 226, 145, 146, 147, 0,
	227, 148, 228, 149, 0, 150, 151, 152, 229, 317,
	154, 0, 156, 157, 155, 158, 0, 159, 0, 160,
	161, 230, 162, 0, 163, 164, 165, 0, 231, 166,
	167, 0, 168, 169, 0, 170, 232, 233, 171, 0,
	172, 173, 175, 234, 174, 235, 0, 176, 0, 177,
	178, 0, 236, 237, 238, 0, 0, 179, 239, 240,
	0, 180, 181, 182, 183, 0, 0, 184, 185, 186,
	0, 0, 187, 188, 189, 241, 242, 83, 190, 0,
	0, 0, 0, 191, 192, 193, 194, 0, 0, 0,
	0, 0, 86, 87, 0, 88, 0, 0, 0, 0,
	195, 0, 0, 0, 0, 89, 90, 196, 197, 198,
	199, 91, 200, 201, 0, 92, 202, 203, 93, 0,
	0, 204, 205, 206, 0, 207, 0, 0, 0, 94,
	95, 96, 0, 97, 0, 98, 99, 0, 0, 100,
	101, 0, 0, 0, 0, 0, 0, 102, 103, 104,
	105, 208, 106, 209, 210, 0, 107, 0, 108, 0,
	0, 0, 109, 110, 0, 111, 0, 0, 0, 211,
	112, 113, 212, 0, 0, 0, 114, 115, 213, 0,
	116, 0, 117, 0, 0, 0, 0, 118, 214, 0,
	215, 0, 119, 120, 216, 217, 0, 0, 123, 0,
	121, 0, 0, 122, 218, 219, 220, 0, 221, 0,
	0, 124, 0, 125, 126, 0, 0, 222, 0, 127,
	0, 0, 263, 0, 0, 129, 0, 130, 131, 132,
	133, 271, 0, 135, 136, 139, 137, 0, 138, 0,
	223, 140, 224, 141, 142, 0, 0, 0, 0, 0,
	143, 225, 0, 144, 0, 226, 145, 146, 147, 0,
	227, 148, 228, 149, 0, 150, 151, 152, 229, 153,
	154, 0, 156, 157, 155, 158, 0, 159, 0, 160,
	161, 265, 162, 0, 163, 164, 165, 0, 231, 166,
	264, 0, 168, 169, 0, 170, 232, 233, 171, 0,
	172, 173, 175, 234, 174, 235, 0, 176, 0, 177,
	178, 0, 270, 237, 238, 0, 0, 266, 239, 240,
	0, 180, 181, 182, 183, 0, 0, 184, 185, 186,
	0, 0, 187, 188, 189, 241, 242, 83, 190, 0,
	0, 0, 0, 191, 192, 193, 194, 0, 0, 0,
	0, 0, 86, 87, 0, 88, 0, 0, 0, 0,
	195, 0, 0, 0, 0, 89, 90, 196, 197, 198,
	199, 91, 200, 201, 0, 92, 202, 203, 93, 0,
	0, 204, 205, 206, 0, 207, 0, 0, 0, 94,
	95, 96, 0, 97, 0, 98, 99, 0, 0, 100,
	101, 0, 0, 0, 0, 0, 0, 102, 103, 104,
	105, 208, 106, 209, 210, 0, 107, 0, 108, 0,
	0, 0, 109, 110, 0, 111, 0, 0, 0, 211,
	112, 113, 212, 0, 0, 0, 114, 115, 213, 0,
	116, 0, 117, 0, 0, 0, 0, 118, 214, 0,
	215, 0, 119, 120, 216, 217, 0, 0, 123, 0,
	121, 0, 0, 122, 218, 219, 220, 0, 221, 0,
	0, 124, 0, 125, 126, 0, 0, 222, 0, 127,
	0, 0, 128, 0, 0, 129, 0, 130, 131, 132,
	133, 134, 0, 135, 136, 139, 137, 0, 138, 0,
	223, 140, 224, 141, 142, 0, 0, 0, 0, 0,
	143, 225, 0, 144, 0, 226, 145, 146, 0, 0,
	227, 148, 228, 149, 0, 150, 0, 152, 229, 153,
	154, 0, 156, 157, 155, 158, 0, 159, 0, 160,
	161, 230, 0, 0, 163, 164, 165, 0, 231, 166,
	167, 0, 168, 169, 0, 170, 232, 233, 171, 0,
	172, 173, 175, 234, 174, 235, 0, 176, 0, 177,
	178, 0, 236, 237, 238, 0, 0, 179, 239, 240,
	0, 180, 181, 182, 183, 0, 0, 184, 185, 186,
	0, 0, 187, 188, 189, 241, 242, 0, 190, 0,
	0, 0, 0, 191, 192, 193, 194, 810, 0, 829,
	830, 831, 839, 840, 841, 0, 0, 0, 0, 0,
	0, 0, 832, 0, 0, 0, 0, 0, 0, 812,
	0, 843, 0, 810, 0, 829, 830, 831, 839, 840,
	841, 0, 0, 0, 0, 0, 0, 0, 832, 0,
	811, 0, 0, 0, 0, 812, 826, 843, 0, 0,
	0, 0, 0, 0, 0, 0, 810, 0, 829, 830,
	831, 839, 840, 841, 0, 0, 811, 0, 0, 0,
	0, 832, 826, 0, 0, 0, 0, 0, 812, 0,
	843, 0, 810, 0, 829, 830, 831, 839, 840, 841,
	0, 0, 0, 817, 0, 0, 0, 832, 0, 811,
	0, 0, 0, 0, 812, 826, 843, 0, 0, 0,
	836, 844, 0, 0, 0, 0, 0, 0, 0, 817,
	0, 0, 0, 0, 842, 811, 0, 0, 0, 0,
	0, 826, 0, 0, 834, 0, 836, 844, 0, 0,
	827, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	842, 0, 817, 0, 0, 0, 0, 0, 0, 0,
	834, 0, 833, 0, 0, 0, 827, 0, 0, 836,
	844, 0, 0, 0, 0, 0, 0, 0, 817, 0,
	0, 0, 0, 842, 0, 0, 0, 0, 833, 0,
	0, 0, 0, 834, 0, 836, 844, 828, 0, 827,
	0, 0, 0, 0, 0, 0, 0, 0, 837, 842,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 834,
	0, 833, 0, 828, 0, 827, 0, 0, 0, 0,
	0, 0, 0, 0, 837, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 833, 0, 0,
	0, 0, 0, 0, 0, 0, 828, 0, 0, 0,
	0, 835, 0, 0, 823, 824, 825, 837, 822, 819,
	820, 821, 813, 814, 815, 816, 818, 0, 838, 0,
	0, 0, 828, 0, 0, 1352, 0, 835, 0, 0,
	823, 824, 825, 837, 822, 819, 820, 821, 813, 814,
	815, 816, 818, 0, 838, 0, 0, 0, 0, 0,
	0, 1351, 0, 0, 0, 0, 0, 0, 0, 0,
	835, 0, 0, 823, 824, 825, 0, 822, 819, 820,
	821, 813, 814, 815, 816, 818, 0, 838, 0, 0,
	0, 0, 0, 0, 1305, 0, 835, 0, 0, 823,
	824, 825, 0, 822, 819, 820, 821, 813, 814, 815,
	816, 818, 0, 838, 0, 0, 810, 1752, 829, 830,
	831, 839, 840, 841, 0, 0, 0, 0, 0, 0,
	0, 832, 0, 0, 0, 0, 0, 0, 812, 0,
	843, 0, 810, 0, 829, 830, 831, 839, 840, 841,
	0, 0, 0, 0, 0, 0, 0, 832, 0, 811,
	0, 0, 0, 0, 812, 826, 843, 0, 0, 0,
	0, 0, 0, 0, 0, 810, 0, 829, 830, 831,
	839, 840, 841, 0, 0, 811, 0, 0, 0, 0,
	832, 826, 0, 0, 0, 0, 0, 812, 0, 843,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 817, 0, 0, 0, 0, 0, 811, 0,
	0, 0, 0, 0, 826, 0, 0, 0, 0, 836,
	844, 0, 0, 0, 0, 0, 0, 0, 817, 0,
	0, 0, 0, 842, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 834, 0, 836, 844, 0, 0, 827,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 842,
	0, 817, 0, 0, 0, 0, 0, 0, 0, 834,
	0, 833, 0, 0, 0, 827, 0, 0, 836, 844,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 842, 0, 0, 0, 0, 833, 0, 0,
	0, 0, 834, 0, 0, 0, 828, 0, 827, 0,
	0, 0, 0, 0, 0, 0, 0, 837, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	833, 0, 828, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 837, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 828, 0, 0, 0, 0,
	835, 0, 0, 823, 824, 825, 837, 822, 819, 820,
	821, 813, 814, 815, 816, 818, 0, 838, 0, 0,
	0, 1750, 0, 0, 0, 0, 835, 0, 0, 823,
	824, 825, 0, 822, 819, 820, 821, 813, 814, 815,
	816, 818, 0, 838, 0, 0, 0, 1730, 0, 0,
	0, 0, 0, 1312, 0, 1329, 1330, 1331, 0, 835,
	0, 0, 823, 824, 825, 0, 822, 819, 820, 821,
	813, 814, 815, 816, 818, 0, 838, 0, 0, 810,
	1705, 829, 830, 831, 839, 840, 841, 0, 0, 0,
	0, 0, 0, 0, 832, 0, 0, 0, 0, 0,
	0, 812, 1326, 843, 0, 810, 0, 829, 830, 831,
	839, 840, 841, 0, 0, 0, 0, 0, 0, 0,
	832, 0, 811, 0, 0, 0, 0, 812, 826, 843,
	0, 0, 0, 0, 0, 0, 0, 0, 810, 0,
	829, 830, 831, 839, 840, 841, 0, 0, 811, 1317,
	0, 0, 0, 832, 826, 0, 0, 0, 0, 0,
	812, 0, 843, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 817, 0, 0, 0, 0,
	1332, 811, 0, 0, 0, 0, 0, 826, 0, 0,
	0, 0, 836, 844, 0, 0, 1327, 0, 0, 0,
	0, 817, 0, 0, 0, 0, 842, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 834, 0, 836, 844,
	0, 0, 827, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 842, 0, 817, 0, 0, 0, 0, 0,
	0, 0, 834, 0, 833, 0, 0, 0, 827, 0,
	0, 836, 844, 1328, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 842, 0, 0, 0, 0,
	833, 0, 0, 0, 0, 834, 0, 0, 0, 828,
	0, 827, 0, 0, 0, 0, 0, 0, 0, 0,
	837, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 833, 0, 828, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 837, 0, 0, 0,
	1323, 1324, 1325, 0, 1322, 1319, 1320, 1321, 1313, 1314,
	1315, 1316, 1318, 0, 0, 0, 0, 0, 828, 0,
	0, 0, 0, 835, 0, 0, 823, 824, 825, 837,
	822, 819, 820, 821, 813, 814, 815, 816, 818, 0,
	838, 0, 0, 0, 1700, 0, 0, 0, 0, 835,
	0, 0, 823, 824, 825, 0, 822, 819, 820, 821,
	813, 814, 815, 816, 818, 0, 838, 0, 0, 0,
	1696, 0, 0, 0, 0, 0, 1312, 0, 1329, 1330,
	1331, 0, 835, 0, 0, 823, 824, 825, 0, 822,
	819, 820, 821, 813, 814, 815, 816, 818, 0, 838,
	0, 0, 810, 1631, 829, 830, 831, 839, 840, 841,
	0, 0, 0, 0, 0, 0, 0, 832, 0, 0,
	0, 0, 0, 0, 812, 1326, 843, 0, 810, 0,
	829, 830, 831, 839, 840, 841, 0, 0, 0, 0,
	0, 0, 0, 832, 0, 811, 0, 0, 0, 0,
	812, 826, 843, 0, 0, 0, 0, 0, 0, 0,
	0, 810, 0, 829, 830, 831, 839, 840, 841, 0,
	0, 811, 1317, 0, 0, 0, 832, 826, 0, 0,
	0, 0, 0, 812, 0, 843, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 817, 0,
	0, 0, 0, 0, 811, 0, 0, 0, 0, 0,
	826, 0, 0, 0, 0, 836, 844, 0, 0, 1327,
	0, 0, 0, 0, 817, 0, 0, 0, 0, 842,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 834,
	0, 836, 844, 0, 0, 827, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 842, 0, 817, 0, 0,
	0, 0, 0, 0, 0, 834, 0, 833, 0, 0,
	0, 827, 0, 0, 836, 844, 1328, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 842, 0,
	0, 0, 0, 833, 0, 0, 0, 0, 834, 0,
	0, 0, 828, 0, 827, 0, 0, 0, 0, 0,
	0, 0, 0, 837, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 833, 0, 828, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 837,
	0, 0, 0, 1323, 1324, 1325, 0, 1322, 1319, 1320,
	1321, 1313, 1314, 1315, 1316, 1318, 0, 0, 0, 0,
	0, 828, 0, 0, 0, 0, 835, 0, 0, 823,
	824, 825, 837, 822, 819, 820, 821, 813, 814, 815,
	816, 818, 0, 838, 0, 0, 0, 1630, 0, 0,
	0, 0, 835, 0, 0, 823, 824, 825, 0, 822,
	819, 820, 821, 813, 814, 815, 816, 818, 0, 838,
	0, 0, 0, 1537, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 835, 0, 0, 823, 824,
	825, 0, 822, 819, 820, 821, 813, 814, 815, 816,
	818, 0, 838, 0, 0, 810, 1471, 829, 830, 831,
	839, 840, 841, 0, 0, 0, 0, 0, 0, 0,
	832, 0, 0, 0, 0, 0, 0, 812, 0, 843,
	0, 810, 0, 829, 830, 831, 839, 840, 841, 0,
	0, 0, 0, 0, 0, 0, 832, 0, 811, 0,
	0, 0, 0, 812, 826, 843, 0, 0, 0, 0,
	0, 0, 0, 0, 810, 0, 829, 830, 831, 839,
	840, 841, 0, 0, 811, 0, 0, 0, 0, 832,
	826, 0, 0, 0, 0, 0, 812, 0, 843, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 817, 0, 0, 0, 0, 0, 811, 0, 0,
	0, 0, 0, 826, 0, 0, 0, 0, 836, 844,
	0, 0, 0, 0, 0, 0, 0, 817, 0, 0,
	0, 0, 842, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 834, 0, 836, 844, 0, 0, 827, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 842, 0,
	817, 0, 0, 0, 0, 0, 0, 0, 834, 0,
	833, 0, 0, 0, 827, 0, 0, 836, 844, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 842, 0, 0, 0, 0, 833, 0, 0, 0,
	0, 834, 0, 0, 0, 828, 0, 827, 0, 0,
	0, 0, 0, 0, 0, 0, 837, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 833,
	0, 828, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 837, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 828, 0, 0, 0, 0, 835,
	0, 0, 823, 824, 825, 837, 822, 819, 820, 821,
	813, 814, 815, 816, 818, 0, 838, 0, 0, 0,
	1455, 0, 0, 0, 0, 835, 0, 0, 823, 824,
	825, 0, 822, 819, 820, 821, 813, 814, 815, 816,
	818, 0, 838, 0, 0, 0, 1091, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 835, 0,
	0, 823, 824, 825, 0, 822, 819, 820, 821, 813,
	814, 815, 816, 818, 0, 838, 810, 1519, 829, 830,
	831, 839, 840, 841, 0, 0, 0, 0, 0, 0,
	0, 832, 0, 0, 0, 0, 0, 0, 812, 0,
	843, 0, 0, 0, 0, 0, 0, 0, 810, 0,
	829, 830, 831, 839, 840, 841, 0, 0, 0, 811,
	0, 0, 0, 832, 0, 826, 0, 0, 0, 0,
	812, 0, 843, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 811, 0, 0, 0, 0, 810, 826, 829, 830,
	831, 839, 840, 841, 0, 0, 0, 0, 0, 0,
	0, 832, 817, 1824, 0, 0, 1025, 0, 812, 0,
	843, 0, 0, 0, 0, 0, 0, 0, 0, 836,
	844, 0, 0, 0, 0, 0, 0, 0, 0, 811,
	0, 0, 0, 842, 817, 826, 1343, 0, 0, 1342,
	0, 0, 0, 834, 0, 0, 0, 0, 0, 827,
	0, 836, 844, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1026, 0, 0, 842, 0, 0, 0, 0,
	0, 833, 0, 0, 0, 834, 0, 0, 0, 0,
	0, 827, 817, 0, 1823, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 836,
	844, 0, 0, 833, 0, 0, 828, 0, 0, 0,
	0, 0, 0, 842, 0, 0, 0, 837, 0, 0,
	0, 0, 0, 834, 0, 0, 0, 0, 0, 827,
	0, 0, 0, 0, 0, 0, 0, 0, 828, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 837,
	0, 833, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	835, 0, 0, 823, 824, 825, 0, 822, 819, 820,
	821, 813, 814, 815, 816, 818, 828, 838, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 837, 0, 0,
	0, 0, 835, 0, 0, 823, 824, 825, 0, 822,
	819, 820, 821, 813, 814, 815, 816, 818, 0, 838,
	0, 846, 0, 0, 0, 0, 0, 810, 0, 829,
	830, 831, 839, 840, 841, 0, 0, 0, 0, 0,
	0, 0, 832, 0, 0, 0, 845, 0, 0, 812,
	835, 843, 0, 823, 824, 825, 0, 822, 819, 820,
	821, 813, 814, 815, 816, 818, 0, 838, 0, 0,
	811, 0, 0, 0, 0, 810, 826, 829, 830, 831,
	839, 840, 841, 0, 0, 0, 0, 0, 0, 0,
	832, 0, 0, 0, 0, 0, 0, 812, 0, 843,
	0, 0, 0, 0, 0, 0, 0, 810, 0, 829,
	830, 831, 839, 840, 841, 0, 0, 0, 811, 0,
	0, 0, 832, 817, 826, 0, 0, 0, 0, 812,
	0, 843, 0, 0, 0, 0, 0, 0, 0, 0,
	836, 844, 0, 0, 0, 0, 0, 0, 0, 0,
	811, 0, 0, 0, 842, 0, 826, 0, 0, 0,
	0, 0, 0, 0, 834, 0, 0, 0, 0, 0,
	827, 817, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 836, 844,
	0, 0, 833, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 842, 817, 0, 0, 0, 0, 0, 0,
	0, 0, 834, 0, 0, 0, 0, 0, 827, 0,
	836, 844, 0, 0, 0, 0, 0, 828, 0, 0,
	0, 0, 0, 0, 842, 0, 0, 0, 837, 0,
	833, 312, 0, 0, 834, 0, 0, 0, 0, 0,
	827, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 833, 0, 0, 828, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 837, 0, 0, 0,
	0, 835, 0, 0, 823, 824, 825, 0, 822, 819,
	820, 821, 813, 814, 815, 816, 818, 828, 838, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 837, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1465, 0, 0, 0, 835,
	0, 0, 823, 824, 825, 0, 822, 819, 820, 821,
	813, 814, 815, 816, 818, 0, 838, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 835, 0, 0, 823, 824, 825, 0, 822, 819,
	820, 821, 813, 814, 815, 816, 818, 810, 838, 829,
	830, 831, 839, 840, 841, 0, 0, 0, 0, 0,
	0, 0, 832, 0, 0, 0, 0, 0, 0, 812,
	0, 843, 0, 810, 0, 829, 830, 831, 839, 840,
	841, 0, 0, 0, 0, 0, 0, 0, 832, 0,
	811, 0, 1344, 0, 0, 812, 826, 843, 0, 0,
	0, 0, 0, 0, 0, 0, 810, 0, 829, 830,
	831, 839, 840, 841, 0, 0, 811, 0, 0, 0,
	0, 832, 826, 0, 0, 0, 0, 0, 812, 0,
	843, 0, 810, 0, 829, 830, 831, 839, 840, 841,
	0, 0, 0, 817, 0, 0, 0, 832, 1349, 811,
	0, 1304, 0, 0, 812, 826, 843, 0, 0, 0,
	836, 844, 0, 0, 0, 0, 0, 0, 0, 817,
	0, 0, 0, 0, 842, 811, 0, 0, 0, 0,
	0, 826, 0, 0, 834, 0, 836, 844, 0, 0,
	827, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	842, 0, 817, 0, 0, 0, 0, 0, 0, 0,
	834, 0, 833, 0, 0, 0, 827, 0, 0, 836,
	844, 0, 0, 0, 0, 0, 0, 0, 817, 0,
	0, 0, 0, 842, 0, 0, 0, 0, 833, 0,
	0, 0, 0, 834, 0, 836, 844, 828, 0, 827,
	0, 0, 0, 0, 0, 0, 0, 0, 837, 842,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 834,
	0, 833, 0, 828, 0, 827, 0, 0, 0, 0,
	0, 0, 1310, 0, 837, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 833, 0, 0,
	0, 0, 0, 0, 0, 0, 828, 0, 0, 0,
	0, 835, 0, 0, 823, 824, 825, 837, 822, 819,
	820, 821, 813, 814, 815, 816, 818, 0, 838, 0,
	0, 0, 828, 0, 0, 0, 0, 835, 0, 0,
	823, 824, 825, 837, 822, 819, 820, 821, 813, 814,
	815, 816, 818, 0, 838, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	835, 0, 0, 823, 824, 825, 0, 822, 819, 820,
	821, 813, 814, 815, 816, 818, 0, 838, 0, 0,
	0, 0, 0, 0, 0, 0, 835, 0, 0, 823,
	824, 825, 0, 822, 819, 820, 821, 813, 814, 815,
	816, 818, 810, 838, 829, 830, 831, 839, 840, 841,
	0, 0, 0, 0, 0, 0, 0, 832, 0, 0,
	0, 0, 0, 0, 812, 0, 843, 0, 810, 0,
	829, 830, 831, 839, 840, 841, 0, 0, 0, 0,
	0, 0, 0, 832, 0, 811, 0, 0, 0, 0,
	812, 826, 843, 0, 0, 0, 810, 0, 829, 830,
	831, 839, 840, 841, 0, 0, 0, 0, 0, 0,
	0, 811, 0, 0, 0, 0, 0, 826, 812, 0,
	843, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 817, 811,
	0, 0, 0, 0, 0, 826, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 836, 844, 0, 0, 0,
	0, 0, 0, 0, 817, 0, 0, 0, 0, 842,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 834,
	0, 836, 844, 0, 0, 827, 0, 0, 0, 0,
	0, 0, 817, 0, 0, 842, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 834, 0, 833, 0, 836,
	844, 827, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 834, 0, 0, 0, 0, 0, 827,
	0, 0, 828, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 837, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 828, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 837,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 828, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 835, 837, 0, 823,
	824, 825, 0, 822, 819, 820, 821, 813, 814, 815,
	816, 818, 0, 838, 0, 0, 0, 0, 0, 0,
	0, 0, 835, 0, 0, 823, 824, 825, 0, 822,
	819, 820, 821, 813, 814, 815, 816, 818, 0, 838,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	835, 0, 0, 823, 824, 825, 0, 822, 819, 820,
	821, 813, 814, 815, 816, 818, 0, 838,
}
var sqlPact = [...]int{

	2147, -1000, 20, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 729, -1000, -1000, -1000, 588, 704,
	529, 15583, 15583, 15323, 1062, 1062, 16883, -1000, -1000, 19743,
	-1000, 2778, 436, 439, 436, 436, 484, 16883, 550, 614,
	100, -1000, 616, 21, 19483, 15583, 1208, 15, 14283, 277,
	2147, 15063, 15583, 19223, 1055, 981, 972, 14283, 18963, 18703,
	18443, -1000, 9804, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 549, 289, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 287, -1000, 14803, -1000, 827, -1000, 14,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 820, -1000,
	15583, -1000, -1000, 18183, 17923, 286, 742, -1000, -1000, 504,
	361, 1228, -1000, 34, -1000, -1000, 1051, -1000, 817, 1050,
	1049, 1047, 1046, 1045, 1044, 360, 754, -1000, 521, 742,
	-1000, 742, -1000, -1000, -1000, 534, 16883, -1000, 14283, -1000,
	17663, 975, 17403, -1000, 616, -1000, -1000, -1000, 834, 1205,
	1205, 1205, 1243, 123, 119, 100, 6, 15583, -1000, 278,
	6, 6799, 6799, -1000, -1000, 277, -1000, 323, 12456, 24,
	-1000, 7345, -1000, 797, 1112, 667, 657, 1110, -119, 14283,
	15583, 15583, 577, 17143, -1000, 1109, 122, 1108, -1000, 121,
	1106, -1000, -11, -1000, -1000, -1000, -1000, -1000, -1000, 277,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 14543, 1294, 3420, -1000, 8728, -1000,
	-1000, 12719, 909, 12719, -1000, -1000, 1291, -1000, 8728, -1000,
	13, 12, 924, 937, 10347, 10077, 1167, 766, -1000, -1000,
	-1000, 26, 4251, 15583, 1063, 12719, 15583, 15583, 15583, 15583,
	15583, -1000, 15583, -1000, 922, -1000, 15583, -1000, 11, 9,
	-1000, 16883, -1000, 125, -1000, 268, 883, 16623, 1132, 880,
	-1000, 834, -1000, 829, 915, 7909, 8728, 100, -1000, -1000,
	100, 100, 8728, -1000, -1000, 15583, 6, 1274, 15583, 75,
	-1000, 22327, -1000, -1000, 8728, 8728, 8728, 8728, 8728, 763,
	-1000, -1000, -1000, 5086, -1000, -1000, 24, 266, 124, -1000,
	-1000, 265, 24, -1000, -1000, -1000, -1000, 263, 1368, 422,
	-1000, -1000, -1000, 8728, 368, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1061, 261, 260, -1000, -1000, -1000,
	-1000, 258, 256, 252, 251, 243, 242, 240, 239, 238,
	235, 232, 231, 226, 224, 711, -1000, 391, -1000, -1000,
	391, 391, -1000, 200, 200, 205, -1000, -1000, -1000, 200,
	-1000, -1000, -1000, 351, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 215, 75, -1000, -1000, -1000, 15583, 24, -1000, -1000,
	-1000, 8728, 3981, -13, -1000, 23052, -1000, -12, 734, -1000,
	13763, 1260, 1188, 1185, 14283, 530, 526, 15583, 15583, 376,
	86, 1273, 86, 11930, -1000, 15583, 15583, -1000, 15583, -1000,
	-1000, 15583, -1000, 15583, 15583, 500, 13243, 737, 1105, 21,
	-21, -1000, 1296, -1000, -1000, -1000, -1000, 95, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 205, 711, 200, 200, 200, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 351, -1000, -1000, 391, 391, 391, -1000,
	-1000, -22, 23052, 524, -5, 12981, 15583, -1000, 23, -1000,
	-1000, 1035, 425, -26, 686, 960, 626, -1000, -1000, -1000,
	-1000, 0, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1327, -1000, -1000, -1000, -1000, 1347, 0, -1000,
	-1000, -1000, -1000, -1000, 1360, -1000, -1000, -1000, 4251, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 15583, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 686, 960, -1000, -1000,
	14283, 13503, 1104, 805, 877, -1000, -1000, 339, 1102, -1000,
	-1000, -1000, -1000, 23052, -1000, 23052, 644, 958, -1000, 958,
	-3, -1000, 22086, -1000, 199, -27, -1000, 376, 6799, 11667,
	3420, 15583, 540, 8728, 8728, 8728, 8728, 8728, 8728, 8728,
	8728, 8728, 8728, 8728, 8728, 8728, 8728, 8728, 8728, 8728,
	8728, 8728, 8728, 8728, 8728, 888, 8728, 516, 8728, 8728,
	8728, 8728, 918, 793, 191, 4251, -1000, 599, 599, 599,
	3083, 3083, 216, 10, 21691, -4, 24, -1000, -1000, 6508,
	6216, 24, 4521, -1000, 605, 1346, 389, 23052, 1070, 1013,
	198, 110, 104, 8728, 8728, 730, 8728, 9001, 8728, 8728,
	5359, 8728, 8728, 8728, 8728, 8728, 8728, -1000, 197, -1000,
	-1000, -1000, -1000, 1343, -1000, -1000, 1342, -1000, 539, 538,
	1341, 376, 103, -1000, 3049, -1000, -1000, 7345, -1000, 737,
	15583, 15583, 15583, -1000, -1000, 876, 16363, -1000, 3420, 15583,
	-1000, 196, 193, 939, 935, 15583, 15583, 16103, 15843, 15583,
	717, 15583, 15583, 655, -1000, 635, 8728, 722, -1000, 11140,
	399, 15583, 642, 68, -1000, -1000, -1000, 338, 15583, -1000,
	-1000, -1000, 122, -1000, 121, -1000, -1000, 14283, -1000, -1000,
	-1000, -1000, -1000, -1000, 3420, 316, 179, -1000, 1340, 513,
	-1000, 502, 499, 498, -1000, 192, -1000, 8728, 15583, 12981,
	-5, -6, -1000, -1000, 15583, 960, -1000, -1000, -1000, -1000,
	618, -1000, 677, -1000, 10617, -1000, -1000, -1000, 605, -1000,
	-18, -1000, -1000, -1000, -1000, 102, -9, -1000, -1000, -1000,
	-1000, -1000, 15583, 308, 15583, 15583, 15583, 1101, 1359, 15583,
	-1000, -1000, -1000, 8728, -1000, -1000, -1000, 21, 15583, -1000,
	1012, -1000, -10, 1207, -121, 14023, -1000, 10877, -1000, -1000,
	359, 383, 383, 517, 517, 517, 517, 228, 228, 892,
	2287, 2264, 2264, 2264, 2219, 546, 546, 2264, 2264, 2264,
	3083, 23078, 928, 8728, 8728, 494, 775, 191, 928, 8728,
	1323, 928, 928, 928, -1000, 1231, -1000, -1000, -1000, 1033,
	190, 9001, 9001, -1000, -1000, -1000, 5086, -1000, -1000, 187,
	8728, -1000, 8728, -45, -70, -1000, -1000, -28, -1000, -1000,
	-19, 8728, 8728, 8728, 97, -1000, 93, 562, -1000, 8728,
	768, 186, 183, 8728, -1000, -1000, 22772, 20326, 92, 1031,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 91, 22746, 90,
	2149, -1000, 9001, 9001, 9001, 5086, 178, 88, 22038, -100,
	22713, 7618, 7618, 7618, 84, 22687, 8728, -100, 20293, 20267,
	3252, -32, -36, -40, 1338, -41, 83, 357, 355, 82,
	1012, -1000, -1000, 8728, -1000, -1000, -1000, 490, 488, 1099,
	-1000, 869, -1000, 712, 8728, 15583, 176, 171, 700, -1000,
	1097, 784, 1094, 784, -1000, -12, 666, -1000, -1000, 478,
	-1000, 6799, 23052, -1000, 637, 1200, -46, -1000, -1000, -1000,
	6799, 376, 11930, 7345, -53, -1000, -1000, 737, -1000, 356,
	1336, 81, 893, 776, 661, 584, 1334, 23052, -18, -1000,
	-18, -1000, -1000, -1000, -1000, -1000, -1000, 15583, 995, 13503,
	170, 15583, 169, 168, 164, 15583, -1000, 1132, -1000, 79,
	-1000, 1007, 1233, 11667, 956, 954, 11667, 965, 773, 773,
	773, -1000, 14023, 3699, -1000, -1000, 15583, 163, 11403, 76,
	1207, 8728, 928, 928, 8728, 9001, 9001, -1000, 928, -1000,
	-1000, -1000, -1000, 1029, 162, 8728, 3420, 3412, 2753, -55,
	5924, -23, 21665, -1000, -1000, 124, -1000, 70, 7072, -1000,
	22375, -7, -7, -1000, 1358, 1127, -1000, 8728, 22407, -1000,
	12193, 384, 778, 21381, 3420, 3420, -1000, 8728, -1000, 1026,
	8728, -1000, 3420, 9001, 9001, 9001, 9001, 9001, 9001, 9001,
	9001, 9001, 9001, 9001, 9001, 9001, 9001, 9001, 9001, 9001,
	9001, 9001, 927, 9001, 1322, 1322, 1322, -51, 5632, -1000,
	1060, 1026, 8728, 8728, 3420, 69, 65, 63, -1000, 8728,
	-100, 8728, 8728, 8728, -1000, -1000, -1000, 59, -1000, 1330,
	-1000, -1000, -1000, -1000, 1007, 21724, 15583, 15583, 15583, 1093,
	2291, -1000, 21348, -59, 15583, 15583, -1000, 950, 990, 415,
	15583, -1000, 15583, -1000, 15583, 15583, 15583, 15583, -57, 6799,
	180, 21, 15583, -57, 635, -1000, -1000, 337, -1000, 313,
	301, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 56,
	-1000, -1000, 997, -1000, 9541, 158, 15583, 13503, 9541, 802,
	-1000, -1000, 371, 8728, 8728, 1207, 11667, 11667, 1199, 925,
	11667, -1000, -1000, -1000, -1000, 345, -1000, 951, 157, 15583,
	14023, 597, 928, 1803, 219, 8728, 3420, 23106, -61, 8728,
	8728, -1000, -71, -1000, 8728, -1000, -1000, 1356, 8728, 55,
	54, 52, -1000, -1000, 23052, 8728, -1000, -1000, 20003, 8728,
	51, -1000, 50, 48, 23052, 1060, 23052, -1000, 648, 648,
	1322, 1322, 1322, 1322, 953, 953, 514, 2243, 576, 576,
	576, 1833, 681, 681, 576, 576, 576, 1023, 920, 156,
	20953, 8728, -73, -1000, -1000, -1000, 23052, 23052, 44, -1000,
	-1000, -1000, -100, 2690, 21322, 21038, -1000, 43, 371, -1000,
	-1000, -1000, -1000, 15583, -1000, 15583, -1000, 15583, 15583, 1032,
	855, -1000, -1000, 926, 154, 9001, 15583, -1000, 752, -77,
	-78, 853, -1000, 838, 8728, -1000, 3420, 784, 784, -1000,
	475, 471, -1000, -57, 1137, 15583, 1184, -1000, -1000, -1000,
	153, -1000, -1000, -1000, 758, -79, -1000, 177, 1209, 8728,
	-1000, -1000, 151, 9541, -85, -1000, -1000, 42, -86, 15583,
	-1000, 15583, 23052, -100, -1000, 1199, -1000, 150, 8728, 11667,
	-1000, -1000, 839, -143, -1000, 334, -1000, 15583, -91, -1000,
	8728, 8728, 23106, -92, -1000, 928, 928, -1000, 21005, -1000,
	22375, -1000, -1000, -1000, 23052, 708, -1000, 20979, -1000, -1000,
	-1000, -1000, 9001, 1020, 147, 3420, 20695, -1000, -1000, 8728,
	-1000, -1000, -1000, -1000, -1000, 941, -1000, -1000, 15583, 863,
	-1000, -1000, 8728, 20953, 146, 995, 141, -1000, -1000, -1000,
	649, -1000, -1000, 23052, 1210, -1000, -1000, 15583, 15583, 510,
	-93, 15583, -1000, -1000, 4813, 15583, 752, 9541, 1197, 24,
	15583, 1197, 20662, 4521, -98, -1000, 15583, 995, 752, 136,
	-87, -1000, 1265, -1000, 15583, 23052, -1000, 554, 951, -1000,
	4251, -102, -1000, 928, 928, -1000, -1000, 41, 778, 1229,
	-1000, 21296, 9001, 3420, -103, -1000, 20636, -1000, -1000, 1091,
	20352, 904, 15583, -1000, 15583, 15583, 404, 15583, -1000, -1000,
	574, -1000, 376, -1000, 131, 995, -1000, -1000, -1000, -1000,
	1209, -19, 752, -1000, -1000, 995, 9541, 15583, 127, -104,
	503, -1000, -1000, -1000, -1000, 632, 8728, 21296, -108, -1000,
	-1000, 1073, -1000, 786, 699, 38, -110, 96, -1000, 8728,
	-1000, 11930, -1000, 15583, -1000, 1197, 37, 995, -1000, -122,
	-1000, -1000, -1000, 1354, 36, 8455, 8455, -100, -1000, 15583,
	-1000, 799, 788, 581, -1000, -1000, -1000, -1000, -1000, 904,
	15583, 23052, -116, -134, -1000, -1000, -1000, 752, -1000, -1000,
	-1000, -1000, 9271, 774, 613, 22006, -1000, -1000, -1000, 1146,
	-1000, 408, 980, 980, 786, -139, -1000, 784, 995, 1300,
	-1000, -1000, -1000, -1000, -1000, -1000, 1308, -1000, -1000, 946,
	-1000, -1000, -1000, -1000, -1000, 8182, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1570, 1569, 1261, 123, 122, 1568, 1567, 1566, 115,
	121, 118, 114, 1565, 91, 1561, 1557, 1554, 108, 1553,
	1552, 1549, 58, 1548, 1546, 1545, 1543, 1542, 107, 31,
	163, 2052, 150, 1538, 1535, 1534, 23, 93, 60, 1533,
	2, 53, 92, 102, 1218, 35, 1527, 1523, 136, 29,
	18, 113, 96, 141, 144, 120, 1522, 1520, 1518, 28,
	1516, 3, 1514, 1513, 1512, 52, 21, 1511, 30, 1510,
	20, 1509, 1508, 111, 1505, 97, 112, 27, 125, 12,
	1504, 77, 13, 76, 1502, 38, 1501, 44, 74, 135,
	1500, 50, 148, 57, 25, 61, 1499, 1497, 1496, 1495,
	79, 1494, 88, 84, 1492, 1491, 78, 1490, 128, 132,
	1489, 1486, 126, 1484, 1481, 1480, 686, 1477, 1475, 614,
	1474, 8, 39, 75, 5, 110, 106, 47, 1473, 22,
	1472, 1851, 597, 573, 1471, 67, 49, 81, 41, 54,
	19, 1470, 1468, 94, 1465, 1463, 1462, 1461, 1459, 80,
	1458, 66, 133, 46, 51, 87, 26, 24, 147, 86,
	103, 142, 101, 1456, 1455, 119, 1454, 65, 1453, 1452,
	719, 117, 1443, 1442, 1439, 696, 677, 665, 226, 1438,
	1436, 528, 437, 1435, 1432, 124, 1426, 1425, 134, 1424,
	131, 43, 1423, 116, 1422, 90, 1421, 0, 72, 36,
	1420, 127, 82, 1419, 1416, 1415, 1414, 42, 4, 17,
	6, 10, 7, 15, 14, 1413, 1411, 129, 99, 1407,
	143, 1405, 1403, 45, 1400, 1399, 16, 1398, 9, 1392,
	11, 1, 1389, 137, 1384, 95, 1382, 1306, 1380, 140,
	1379, 1374, 1284, 83,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 4, 4, 38, 38, 37,
	37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
	37, 37, 37, 37, 35, 35, 40, 40, 40, 39,
	39, 34, 34, 5, 5, 5, 9, 10, 10, 10,
	10, 10, 10, 78, 78, 77, 77, 80, 80, 11,
	11, 12, 12, 12, 12, 12, 12, 12, 12, 166,
	166, 165, 13, 141, 141, 14, 14, 14, 14, 15,
	101, 101, 16, 16, 16, 16, 17, 21, 233, 233,
	233, 237, 237, 238, 238, 239, 239, 239, 239, 239,
	239, 239, 235, 235, 24, 24, 24, 24, 24, 120,
	116, 116, 118, 118, 118, 118, 43, 115, 115, 115,
	115, 117, 117, 117, 117, 190, 188, 188, 195, 195,
	195, 56, 56, 56, 56, 56, 57, 57, 57, 187,
	187, 187, 187, 196, 196, 196, 196, 196, 196, 58,
	58, 58, 194, 194, 25, 25, 25, 25, 25, 25,
	25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
	189, 189, 234, 234, 236, 236, 8, 8, 59, 59,
	60, 60, 123, 123, 123, 123, 61, 61, 122, 205,
	205, 206, 206, 206, 206, 206, 206, 207, 207, 207,
	207, 207, 207, 207, 203, 203, 204, 201, 201, 202,
	202, 202, 202, 240, 240, 121, 121, 64, 64, 210,
	210, 210, 210, 208, 208, 208, 208, 208, 211, 209,
	212, 212, 212, 212, 212, 152, 152, 152, 27, 7,
	7, 105, 105, 68, 68, 156, 156, 156, 69, 69,
	157, 50, 50, 36, 36, 36, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 106, 106, 107, 107, 19,
	23, 26, 26, 26, 26, 26, 242, 242, 47, 47,
	47, 47, 48, 48, 119, 119, 119, 119, 119, 42,
	6, 6, 41, 41, 18, 18, 18, 18, 18, 53,
	53, 112, 112, 112, 114, 114, 113, 113, 113, 91,
	91, 28, 82, 82, 83, 83, 163, 84, 84, 22,
	22, 31, 31, 29, 29, 29, 29, 29, 29, 30,
	30, 32, 32, 32, 32, 32, 32, 32, 218, 218,
	218, 220, 220, 217, 219, 219, 241, 241, 92, 92,
	92, 63, 62, 62, 66, 66, 65, 67, 67, 155,
	89, 89, 89, 89, 108, 109, 109, 110, 110, 111,
	111, 88, 88, 138, 138, 33, 33, 73, 73, 74,
	74, 129, 129, 130, 130, 128, 128, 128, 158, 158,
	158, 158, 159, 159, 159, 159, 159, 159, 153, 153,
	153, 153, 154, 154, 164, 164, 95, 95, 95, 95,
	93, 93, 94, 94, 160, 160, 160, 160, 90, 90,
	161, 161, 161, 124, 124, 167, 167, 167, 72, 72,
	72, 168, 168, 168, 168, 168, 168, 168, 168, 168,
	168, 168, 168, 168, 169, 169, 169, 169, 171, 171,
	171, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 172, 172, 179, 179, 180, 180,
	181, 182, 173, 173, 174, 174, 175, 176, 183, 183,
	183, 183, 185, 185, 177, 177, 177, 177, 177, 178,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 103, 103, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 213, 213, 213, 213, 213,
	213, 213, 215, 215, 216, 216, 214, 214, 214, 214,
	214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
	214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
	214, 214, 221, 221, 222, 222, 223, 223, 224, 224,
	226, 227, 227, 227, 228, 232, 232, 225, 225, 229,
	229, 229, 230, 230, 231, 231, 231, 231, 231, 143,
	143, 143, 144, 144, 145, 79, 79, 140, 140, 139,
	139, 139, 142, 142, 96, 184, 184, 184, 184, 184,
	184, 184, 97, 97, 104, 98, 98, 99, 99, 99,
	99, 99, 99, 135, 136, 100, 100, 100, 137, 137,
	146, 150, 150, 149, 148, 148, 147, 147, 127, 127,
	127, 127, 126, 125, 85, 85, 243, 243, 151, 151,
	86, 86, 87, 81, 81, 162, 162, 162, 162, 75,
	75, 55, 55, 76, 76, 51, 51, 54, 52, 52,
	52, 52, 70, 70, 71, 71, 49, 49, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 186,
	186, 186, 44, 44, 44, 45, 45, 46, 46, 192,
	192, 192, 193, 193, 193, 193, 191, 191, 191, 191,
	191, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 4, 6, 1, 3, 2,
	5, 3, 6, 4, 6, 6, 6, 4, 8, 2,
	3, 3, 6, 4, 3, 2, 1, 1, 0, 2,
	0, 2, 0, 1, 1, 1, 6, 3, 5, 4,
	6, 4, 6, 1, 3, 1, 2, 2, 3, 2,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 1, 5, 3, 0, 1, 1, 1, 1, 3,
	3, 0, 2, 3, 2, 3, 6, 6, 1, 2,
	2, 1, 1, 1, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 2, 3, 6, 3, 1, 5,
	2, 1, 1, 1, 3, 3, 2, 3, 3, 3,
	3, 1, 3, 3, 2, 1, 1, 3, 1, 1,
	1, 2, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 1, 1, 1, 1,
	1, 0, 1, 1, 2, 2, 4, 2, 4, 4,
	4, 4, 4, 4, 3, 3, 4, 3, 2, 4,
	2, 0, 2, 0, 2, 0, 7, 10, 1, 0,
	1, 3, 1, 1, 1, 1, 8, 0, 3, 2,
	0, 3, 1, 2, 2, 3, 6, 2, 1, 1,
	2, 4, 2, 5, 7, 8, 5, 3, 1, 4,
	6, 5, 10, 1, 1, 4, 0, 3, 0, 2,
	2, 2, 0, 1, 1, 2, 2, 0, 3, 3,
	2, 1, 1, 2, 2, 1, 2, 1, 4, 11,
	14, 1, 0, 1, 3, 3, 3, 5, 1, 3,
	1, 2, 0, 1, 1, 0, 6, 6, 8, 6,
	8, 8, 10, 8, 10, 1, 0, 2, 0, 2,
	2, 3, 3, 2, 2, 2, 1, 0, 1, 3,
	2, 0, 2, 1, 1, 1, 3, 3, 0, 3,
	4, 7, 3, 0, 6, 6, 8, 5, 7, 1,
	3, 1, 4, 2, 8, 5, 4, 3, 0, 2,
	0, 8, 1, 3, 1, 1, 3, 5, 5, 1,
	1, 3, 3, 1, 2, 3, 2, 3, 4, 1,
	1, 8, 8, 1, 2, 4, 4, 4, 2, 2,
	3, 1, 3, 6, 1, 0, 1, 0, 1, 1,
	0, 1, 1, 0, 1, 0, 3, 1, 3, 2,
	2, 2, 1, 1, 2, 2, 3, 1, 1, 1,
	1, 3, 0, 2, 0, 2, 3, 2, 0, 1,
	3, 3, 1, 1, 3, 2, 4, 0, 4, 2,
	1, 4, 3, 4, 5, 4, 5, 4, 5, 2,
	4, 1, 1, 0, 5, 0, 2, 2, 2, 1,
	1, 0, 4, 2, 1, 2, 2, 4, 1, 3,
	1, 2, 3, 2, 0, 2, 5, 2, 3, 4,
	0, 1, 1, 1, 1, 2, 4, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 5,
	0, 1, 1, 1, 1, 1, 1, 2, 2, 2,
	2, 2, 1, 1, 3, 0, 1, 1, 1, 1,
	5, 2, 1, 1, 1, 1, 4, 1, 2, 2,
	1, 1, 1, 0, 1, 1, 4, 1, 4, 1,
	1, 1, 1, 1, 1, 1, 3, 3, 3, 3,
	3, 3, 3, 0, 1, 4, 1, 3, 3, 5,
	2, 2, 2, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 2, 2, 3, 4, 3, 4,
	4, 5, 3, 3, 3, 3, 3, 4, 3, 3,
	4, 3, 4, 3, 4, 5, 6, 6, 7, 6,
	7, 6, 7, 3, 4, 1, 3, 2, 2, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 5,
	6, 6, 7, 1, 1, 1, 3, 1, 1, 1,
	2, 2, 2, 1, 1, 3, 5, 6, 8, 6,
	6, 4, 4, 1, 1, 1, 5, 1, 3, 1,
	3, 1, 1, 1, 1, 6, 6, 4, 4, 4,
	4, 6, 5, 5, 5, 4, 8, 6, 6, 4,
	4, 4, 5, 0, 5, 0, 2, 0, 1, 3,
	3, 2, 2, 0, 6, 1, 0, 3, 0, 2,
	2, 0, 1, 4, 2, 2, 2, 2, 2, 4,
	3, 5, 4, 3, 5, 1, 3, 1, 3, 3,
	3, 2, 1, 3, 3, 1, 1, 1, 1, 1,
	1, 1, 4, 3, 2, 3, 0, 3, 3, 2,
	2, 1, 0, 2, 2, 3, 2, 1, 1, 3,
	5, 1, 2, 4, 2, 0, 1, 0, 1, 1,
	3, 5, 2, 2, 1, 2, 1, 0, 1, 1,
	1, 3, 3, 1, 3, 3, 2, 1, 1, 1,
	3, 1, 3, 1, 3, 1, 2, 3, 1, 2,
	2, 1, 1, 3, 3, 0, 1, 2, 1, 1,
	1, 1, 6, 2, 3, 5, 1, 1, 1, 1,
	2, 2, 1, 1, 1, 1, 0, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -9, -10, -11, -13,
	-15, -16, -17, -18, -20, -21, -23, -22, -24, -25,
	-26, -19, -27, -28, 22, -6, -7, -8, -219, 90,
	98, 190, 97, 83, 113, 204, 211, -29, -31, 219,
	-120, 220, 33, 228, 57, 93, 206, 201, 248, 64,
	-218, -32, -30, 294, 269, 275, 214, -33, 235, 262,
	297, 235, 76, 126, 85, 130, 256, 255, 76, 126,
	235, -12, 294, -22, -5, -10, -4, -18, -28, -9,
	-11, 22, -44, 4, -197, -199, 19, 20, 22, 32,
	33, 38, 42, 45, 56, 57, 58, 60, 62, 63,
	66, 67, 74, 75, 76, 77, 79, 83, 85, 89,
	90, 92, 97, 98, 103, 104, 107, 109, 114, 119,
	120, 127, 130, 125, 138, 140, 141, 146, 149, 152,
	154, 155, 156, 157, 158, 160, 161, 163, 165, 162,
	168, 170, 171, 177, 180, 183, 184, 185, 188, 190,
	192, 193, 194, 196, 197, 201, 199, 200, 202, 204,
	206, 207, 209, 211, 212, 213, 216, 217, 219, 220,
	222, 225, 227, 228, 231, 229, 234, 236, 237, 244,
	248, 249, 250, 251, 254, 255, 256, 259, 260, 261,
	265, 270, 271, 272, 273, 27, 34, 35, 36, 37,
	39, 40, 43, 44, 48, 49, 50, 52, 78, 80,
	81, 96, 99, 105, 115, 117, 121, 122, 131, 132,
	133, 135, 144, 167, 169, 178, 182, 187, 189, 195,
	208, 215, 223, 224, 230, 232, 239, 240, 241, 245,
	246, 262, 263, -44, -44, 190, 21, -237, 21, -238,
	-239, 64, 90, 113, 214, 130, 85, 255, -237, -48,
	211, -44, -116, 149, 217, 208, 244, -117, -115, -190,
	239, 158, -77, -44, 4, 76, 56, 77, 114, 126,
	127, 61, 62, 141, 236, 239, 244, 21, 64, -242,
	244, 244, -242, -242, -47, 244, 242, -48, -241, 235,
	235, -105, 76, 253, -30, -32, -31, -65, -66, 252,
	134, 95, 176, -29, -31, -218, -220, 196, -217, -44,
	-220, -62, -63, 21, 87, 298, -160, -51, 174, -44,
	-87, 294, -3, -160, 121, -44, -54, 121, -51, 111,
	136, 136, -161, -160, -44, 121, -55, 121, -54, -78,
	121, -77, -166, -165, -193, 4, -197, -199, -198, 262,
	54, 65, 112, 129, 123, 137, 139, 145, 147, 159,
	179, 181, 205, 221, 235, -141, 294, -101, 294, -44,
	21, 173, 298, 173, -44, -116, 50, -116, 294, -118,
	-42, -43, 138, 192, 242, 279, 111, 273, -58, 5,
	82, -80, 296, 111, -234, 173, 111, 111, 111, 111,
	111, -189, 111, 273, 138, 192, 235, -119, -42, -43,
	-119, 242, -48, -90, -160, -77, 121, 126, -44, 121,
	-65, -66, -89, -108, -109, 148, 172, -92, 21, 87,
	-92, -92, 42, 295, 295, 298, -220, -71, 294, -81,
	-162, -131, 287, -133, 285, 286, 291, 164, 274, -143,
	-51, -134, 9, 294, -146, -215, -31, 96, 28, -144,
	-145, 208, -44, 7, 8, 5, 6, -49, -169, -178,
	247, 100, 166, 46, -213, -214, 4, -197, -192, -170,
	-180, -174, -177, 135, 54, 69, 72, 70, 73, 218,
	257, 47, 27, 99, 182, 187, 232, 245, 246, 121,
	167, 122, 52, 115, 144, 89, 35, 37, 39, 40,
	48, 49, 78, 80, 81, 105, 131, 132, 133, 169,
	195, 223, 230, 240, 241, 263, -198, -181, -182, -175,
	-176, -183, -81, -87, 287, -51, 294, -85, -127, -126,
	-125, 292, 296, -86, -151, -131, 82, -38, 199, -37,
	20, 22, 90, 260, 96, 199, 199, 96, 299, -161,
	-53, -51, -53, 219, -44, 29, 96, -40, 298, 45,
	202, 96, -40, 298, 96, 295, 298, -160, 121, 29,
	-140, -167, -168, -170, -179, -173, -177, -178, 38, 44,
	43, 237, 215, 224, 36, 131, 132, 133, 223, 35,
	195, 105, 89, 81, 80, 169, 40, 39, -181, -182,
	-175, -176, 78, 240, 241, 135, 37, 49, 48, 263,
	230, -79, -131, -233, -76, 235, 76, -52, -44, 287,
	-239, -233, 29, -79, 298, 298, 146, -57, 152, 163,
	119, -188, 82, -195, -187, -152, 9, 247, 100, 173,
	-194, 8, 286, -186, -193, 5, 7, 285, -188, 82,
	67, -196, 5, 4, -178, -152, 82, 149, 296, -191,
	4, -197, -199, -198, -200, 21, 23, 24, 25, 26,
	28, 29, 30, 31, 41, 46, 47, 51, 53, 55,
	61, 64, 68, 69, 70, 71, 72, 73, 82, 84,
	86, 87, 88, 91, 93, 95, 100, 101, 102, 108,
	110, 111, 113, 116, 118, 124, 126, 128, 134, 136,
	142, 143, 148, 150, 151, 164, 166, 172, 173, 174,
	175, 176, 186, 191, 198, 203, 214, 218, 226, 233,
	235, 238, 242, 243, 247, 252, 253, 257, 258, 264,
	266, 267, 268, 269, -190, -236, 108, -233, -190, -190,
	-190, -190, -190, -190, 146, -190, 298, 298, -48, -40,
	298, 294, 164, -45, 121, -44, -41, 92, 164, -89,
	-109, -108, -110, -131, 21, -131, -133, -30, -30, -30,
	-67, -155, -131, -217, 29, -70, -44, -73, 298, 111,
	10, 53, 32, 285, 286, 287, 288, 106, 289, 282,
	283, 284, 281, 277, 278, 279, 59, 153, 210, 12,
	13, 14, 25, 175, 147, 274, 123, 221, 291, 15,
	16, 17, 137, 34, 124, 29, 4, -131, -131, -131,
	-131, -131, 181, -31, -131, -79, -85, -31, -139, 292,
	294, -85, 294, 5, 5, 294, -147, -131, -221, 270,
	108, 294, 294, 294, 294, 294, 294, 294, 294, 294,
	294, 294, 294, 294, 294, 294, 294, 189, -185, 265,
	-185, -185, -171, 294, -171, -172, 294, -171, 271, 275,
	294, -73, -51, -127, -131, -191, 287, 298, 295, 298,
	242, -106, 61, 55, -122, 121, 55, -201, -44, 61,
	-202, 51, 253, 191, 110, -106, 61, -106, 61, 61,
	-160, 242, 242, -54, -44, -124, 267, -112, -22, 294,
	82, 29, -112, -82, -83, -163, -84, -51, 294, -44,
	-44, -54, -55, -77, -78, -12, -165, 96, -14, -22,
	-18, -28, -9, 295, 298, -72, 28, -102, 294, 272,
	156, 79, 120, 155, -103, 213, 295, 298, 242, 298,
	-76, -70, -126, -125, 111, 244, 295, -43, -42, -56,
	194, 225, 200, 216, 298, 8, 7, 7, 5, -191,
	-235, -44, -43, -42, -160, -59, -60, -123, -122, -203,
	-204, -201, 126, 253, 101, 96, 173, 164, 279, 96,
	-111, 208, 209, 298, -36, 30, 86, 294, 298, 295,
	-124, -162, -74, -158, -160, -31, -159, 294, -167, -77,
	239, -131, -131, -131, -131, -131, -131, -131, -131, -131,
	-131, -131, -131, -131, -131, -131, -131, -131, -131, -131,
	-131, -131, -131, 147, 123, 221, 34, 124, -131, 242,
	-131, -131, -131, -131, 166, 164, 247, 100, 254, 87,
	170, -243, 233, 31, -137, -31, 294, -191, -143, 208,
	294, 295, 298, -79, -142, 293, -139, -79, 295, 295,
	-79, 264, 21, 87, 287, -102, 7, -150, -149, 266,
	-222, 103, 116, 294, 295, 295, -131, -131, -96, -184,
	4, 272, 156, 79, 120, 155, 213, -97, -131, -98,
	-132, -133, 285, 286, 291, 294, 208, -99, -131, -79,
	-131, 41, 143, 243, -100, -131, 111, -79, -131, -131,
	-131, -79, -79, -79, 294, 7, 7, 239, 239, 7,
	-124, 295, 293, 302, -151, -37, -51, -44, -44, 164,
	-122, 121, -167, -44, 294, 294, 140, 140, -44, -44,
	121, -44, 121, -44, -44, -38, 199, -44, -44, 199,
	-91, 203, -131, -91, -114, 173, -75, -51, 262, -44,
	203, -73, 298, 279, -75, -40, -40, -160, -167, 292,
	292, 7, 242, 242, 242, 242, 294, -131, -235, -52,
	-235, -42, 251, 58, 194, -195, -102, 298, 295, 298,
	-45, 126, -45, -77, -51, 96, 5, -44, -155, -14,
	-44, -88, 116, 298, 65, -95, 139, 159, 112, 145,
	205, 129, -128, 299, -154, -153, 29, -44, -31, -159,
	-158, 273, -131, -131, 242, -243, 233, -137, -131, 166,
	247, 100, 254, 87, 170, 111, 294, -132, -132, -79,
	294, -79, -131, 293, 293, 298, 295, -66, 298, -65,
	-131, -79, -79, 295, 295, -148, -149, 91, -131, -227,
	180, 294, 294, -131, 29, 298, 295, 111, 295, -104,
	186, 295, 10, 285, 286, 287, 288, 106, 289, 282,
	283, 284, 281, 277, 278, 279, 59, 153, 210, 12,
	13, 14, 137, 124, -132, -132, -132, -79, 294, 295,
	-135, -136, 111, 108, 29, -100, -100, -100, 295, 111,
	-79, 298, 298, 298, 295, 295, 295, 7, 295, 298,
	295, 273, 273, 295, -88, -131, 242, 242, 96, 164,
	-205, -202, -131, -70, 294, 294, -35, 90, 219, -107,
	96, -40, 96, -40, 242, -106, 61, 242, -81, 203,
	60, 295, 298, -81, -124, -83, -151, 295, 293, 7,
	7, 295, 156, 120, 155, -103, 155, -103, -103, 7,
	-44, -61, 125, -123, 294, -45, 294, 294, 294, -44,
	-41, 295, -138, 118, 42, -158, 139, 139, -158, -95,
	139, -93, 179, -93, -93, -154, -191, 300, -44, 294,
	295, -131, -131, -132, -132, 111, 294, -131, -140, 25,
	25, 295, -79, 295, 298, 295, -139, 295, 264, -66,
	-66, -66, 5, 93, -131, 238, -228, -44, 294, 267,
	-65, 295, -167, -167, -131, -135, -131, -167, -132, -132,
	-132, -132, -132, -132, -132, -132, -132, -132, -132, -132,
	-132, -132, -132, -132, -132, -132, -132, 87, 164, 170,
	-132, 298, -79, 295, -136, -135, -131, -131, -167, 295,
	295, 295, -79, -131, -131, -131, 295, 7, -138, 293,
	-44, -44, -122, 96, -206, 61, -207, 53, 101, 64,
	164, 166, 253, 191, 51, 82, 198, 295, 295, -70,
	-70, 164, 82, 164, 82, 75, 249, -44, -44, -51,
	-44, -44, -44, -81, -113, 294, 173, -22, -51, -91,
	279, 293, 293, 295, 124, -68, -156, -44, -216, 294,
	-213, -214, -49, 294, -69, -157, -44, -59, -68, 173,
	-223, 268, -131, -79, -158, -158, -94, 258, 173, 139,
	-158, -164, 276, -130, -129, 109, 162, 294, -70, -153,
	25, 25, -131, -140, 295, -131, -131, 295, -131, 5,
	-131, 295, 295, 295, -131, -232, -44, -131, 295, 295,
	295, -136, 111, 87, 170, 294, -131, 295, 295, 298,
	295, 295, 295, -223, -122, -44, -77, -44, 101, 121,
	166, 140, 294, -132, -51, -121, -240, 63, 231, 295,
	295, 166, 166, -131, -167, -40, -40, 242, 242, 88,
	-70, 61, -87, -31, 294, 183, 295, 298, -50, -85,
	53, -50, -131, 294, -68, 295, 298, 295, 295, -51,
	-224, -226, -44, -94, 294, -131, -158, 170, 298, 301,
	279, -70, 295, -131, -131, 295, 295, -66, -225, 185,
	295, -132, 111, 294, -140, 295, -131, -207, -45, 164,
	-131, -46, 294, -61, 294, 198, -39, 53, -44, -44,
	255, 165, 295, -44, -44, -121, -156, -36, -77, -36,
	295, -79, 295, -157, -61, -121, 294, 298, 29, -70,
	234, -129, -191, 295, 295, -66, 42, -132, -140, 295,
	295, 96, 295, -210, 154, -44, -70, -51, -34, 258,
	-77, 219, -124, 294, -61, -50, -66, -121, -61, -68,
	-226, -228, 295, 239, -229, 193, 209, -79, 295, 101,
	-208, -211, -209, 173, 112, 184, 222, 295, 295, -64,
	294, -131, -82, -70, -36, 295, -61, 295, 5, 295,
	-230, -231, 34, 250, 67, -131, -230, -44, -209, 173,
	-211, 173, 255, 85, -210, -70, -124, 295, -121, -231,
	188, 107, 208, 188, 107, -212, 161, 202, 45, 219,
	-212, -208, 295, -40, -61, 25, 19, 166, 82, -231,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 0, 53, 54, 55, 0, 0,
	355, 0, 0, 0, 0, 0, 0, 329, -2, 0,
	118, 0, 287, 0, 287, 287, 291, 0, 357, 252,
	354, -2, 365, 0, 0, 0, 363, 343, 0, 0,
	-2, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 69, 0, 71, 72, 73, 74, 75, 76, 77,
	78, 0, 84, 782, 783, 784, 801, 802, 803, 804,
	805, 806, 807, 808, 809, 810, 811, 812, 813, 814,
	815, 816, 817, 818, 819, 820, 821, 822, 823, 824,
	825, 826, 827, 828, 829, 830, 831, 832, 833, 834,
	835, 836, 837, 838, 839, 840, 841, 842, 843, 844,
	845, 846, 847, 848, 849, 850, 851, 852, 853, 854,
	855, 856, 857, 858, 859, 860, 861, 862, 863, 864,
	865, 866, 867, 868, 869, 870, 871, 872, 873, 874,
	875, 876, 877, 878, 879, 880, 881, 882, 883, 884,
	885, 886, 887, 888, 889, 890, 891, 892, 893, 894,
	895, 896, 897, 898, 899, 900, 901, 902, 903, 904,
	905, 906, 907, 908, 909, 910, 911, 912, 913, 914,
	915, 916, 917, 918, 919, 920, 921, 922, 923, 924,
	925, 926, 927, 928, 929, 930, 931, 932, 933, 934,
	935, 936, 937, 938, 939, 940, 941, 942, 943, 944,
	945, 946, 947, 948, 949, 950, 951, 952, 953, 954,
	955, 956, 957, 91, 92, 864, 94, 0, 101, 102,
	103, 105, 106, 107, 108, 109, 110, 111, 0, 280,
	878, 293, 114, 843, 882, 945, 894, 121, 131, 0,
	951, -2, 135, 65, 164, 165, 0, 167, 183, 0,
	0, 0, 0, 0, 181, 0, 0, 178, 0, 298,
	286, 298, 283, 284, 285, 288, 0, 279, 0, 356,
	0, 0, 0, 251, -2, 339, 340, -2, 0, 360,
	360, 360, 0, 0, 340, 0, 348, 868, 351, 765,
	349, 0, 0, 362, 361, 0, 344, 424, 0, 755,
	385, 0, 2, 0, 931, 0, 0, 931, 0, 0,
	0, 0, 0, 430, 57, 931, 48, 931, 751, 48,
	931, 63, 0, 79, 81, 792, 793, 794, 795, 956,
	958, 959, 960, 961, 962, 963, 964, 965, 966, 967,
	968, 969, 970, 971, 0, 0, 0, 89, 0, 93,
	95, 0, 0, 0, 292, 115, 921, 117, 0, 120,
	122, 123, 0, 0, 0, 0, 0, 0, 134, 159,
	160, 66, 0, 0, 185, 0, 0, 0, 0, 0,
	0, 174, 0, 175, 0, 177, 0, 281, 294, 295,
	282, 0, 290, 48, 428, 0, 931, 786, 303, 931,
	-2, 0, 335, 372, 373, 0, 0, 0, 358, 359,
	0, 0, 0, 331, 332, 0, 350, 0, 0, 388,
	743, 747, 748, 516, 0, 0, 0, 0, 0, 0,
	603, 604, 605, 0, 607, 608, 609, 926, 0, 613,
	614, 945, 755, 768, 769, 770, 771, 0, 0, 0,
	776, 777, 778, 727, 653, 623, -2, -2, 766, 454,
	455, 456, 457, -2, 958, 627, 629, 631, 632, 633,
	634, 0, 910, 927, 941, 942, 950, 954, 955, 931,
	938, 932, 922, 929, 937, 824, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, 791, 478, 479, 484,
	485, 487, 388, 386, 425, 426, 0, 756, 734, 728,
	729, 0, 0, 0, 740, 738, 739, 25, 276, 27,
	0, 276, 276, 0, 0, 0, 0, 0, 0, 434,
	0, 309, 0, 0, 431, 0, 0, 59, 0, 46,
	47, 0, 61, 0, 0, 355, 0, 0, 931, 355,
	0, 687, 440, 441, 442, 443, 444, 513, 447, 448,
	449, 450, 451, 452, 453, 461, 462, 463, 464, 465,
	466, 475, 0, 460, 460, 460, 472, 473, 476, 477,
	482, 483, 494, 495, 497, 499, 493, 493, 493, 490,
	491, 0, 685, 0, 98, 0, 819, 753, 758, 761,
	104, 0, 0, 0, 0, 0, 0, 126, 146, 147,
	148, 127, 129, 136, 138, 139, 140, 149, 150, 151,
	152, 245, 0, 247, 162, 163, 779, 0, 128, 130,
	132, 133, 153, 154, 0, 156, 157, 158, 0, 67,
	796, 797, 798, 799, 800, 972, 973, 974, 975, 976,
	977, 978, 979, 980, 981, 982, 983, 984, 985, 986,
	987, 988, 989, 990, 991, 992, 993, 994, 995, 996,
	997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006,
	1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016,
	1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026,
	1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036,
	1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046,
	1047, 1048, 1049, 1050, 166, 168, 0, 182, 169, 170,
	171, 172, 173, 180, 176, 179, 0, 0, 289, 248,
	0, 189, 0, 0, 931, 785, 300, 0, 0, 338,
	370, 371, 374, 377, 378, 375, 516, 345, 346, 347,
	366, 367, 265, 352, 0, 0, 762, 434, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 737, 0, 0, 746, 520, 521, 522,
	544, 545, 0, -2, 685, 0, 610, 611, 612, 0,
	0, -2, 0, 773, 513, 0, 0, 726, 655, 0,
	0, 0, 0, 0, 0, 0, 0, 706, 712, 0,
	0, 0, 0, 0, 0, 0, 0, 468, 481, 492,
	489, 488, 470, 0, 469, 467, 0, 471, 0, 0,
	0, 434, 0, 735, 0, 732, 733, 0, 742, 0,
	0, 0, 0, 275, 29, 931, 0, 39, 0, 0,
	218, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 757, 320, 0, 320, 311, 0,
	0, 0, 307, 388, 322, 324, 325, 0, 0, 432,
	58, 752, 48, 64, 48, 70, 80, 0, 82, 85,
	86, 87, 88, 83, 0, 435, 437, 445, 0, 500,
	501, 502, 503, 504, 505, 514, 90, 0, 0, 0,
	99, 100, 759, 760, 0, 0, 119, 124, 125, 299,
	0, 143, 0, 145, 0, 246, 781, 780, 513, 68,
	184, 112, 296, 297, 429, 0, 188, 190, 192, 193,
	194, 195, 786, 0, 786, 0, 0, 0, 0, 0,
	376, 379, 380, 0, 369, 263, 264, 355, 0, 764,
	382, 744, 387, 389, 397, 413, 400, 0, 517, 518,
	0, 523, 524, 525, 526, 527, 528, 529, 530, 531,
	532, -2, -2, -2, 536, 537, 538, -2, -2, -2,
	542, 543, -2, 0, 0, 0, 737, 0, -2, 0,
	552, -2, -2, -2, 556, 0, 559, 561, 563, 0,
	0, 0, 0, 736, 573, 718, 0, 745, 558, 0,
	0, 606, 0, 0, 0, 691, 692, 0, -2, 615,
	365, 0, 0, 0, 0, 774, 0, 725, 721, 0,
	663, 0, 0, 0, 628, 630, 0, 0, 0, 0,
	695, 696, 697, 698, 699, 700, 701, 0, 0, 0,
	0, 575, 0, 0, 0, 0, 945, 0, 685, 711,
	0, 0, 0, 0, 0, 685, 0, 717, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	382, 427, 730, 0, 741, 28, 267, 0, 0, 0,
	31, 931, 200, 0, 0, 0, 0, 0, 278, 40,
	931, 48, 931, 48, 41, 26, 276, 266, 269, 0,
	56, 0, 433, 304, 305, 0, 0, 749, 313, 310,
	0, 434, 0, 0, 0, 60, 62, 0, 688, 0,
	0, 0, 0, 0, 0, 0, 0, 686, 96, 754,
	97, 116, 141, 142, 144, 137, 155, 0, 197, 0,
	0, 786, 0, 0, 0, 0, 302, 303, 368, 0,
	763, 384, 0, 0, 0, 0, 0, 0, 421, 421,
	421, 419, 413, 0, 399, 412, 0, 411, -2, 400,
	0, 0, -2, -2, 0, 0, 0, 574, -2, 557,
	560, 562, 564, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 686, 689, 690, 0, -2, 0, 0, 364,
	365, 365, 365, 621, 0, 0, 722, 0, 0, 622,
	0, 0, 0, 0, 0, 0, 637, 0, 638, 0,
	0, 639, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 577, 578, 579, 0, 0, 640,
	709, 710, 0, 0, 0, 0, 0, 0, 645, 0,
	716, 0, 0, 0, 649, 650, 651, 0, 458, 0,
	474, 496, 498, 486, 384, 0, 0, 0, 0, 0,
	198, 217, 0, 0, 0, 0, 33, 0, 0, 0,
	0, 37, 0, 43, 0, 0, 0, 0, 319, 0,
	318, 0, 0, 308, 320, 323, 326, 0, 438, 0,
	0, 446, 506, 507, 508, 509, 510, 511, 512, 0,
	113, 186, 0, 191, 0, 0, 0, 189, 0, 0,
	301, 353, 657, 0, 0, 390, 0, 0, 0, 0,
	0, 416, 420, 417, 418, 415, 395, 0, 409, 0,
	402, 519, -2, 0, 0, 0, 0, -2, 0, 0,
	0, 719, 0, 680, 0, -2, 693, 616, 0, 0,
	0, 0, 775, 720, 724, 0, 661, 662, 666, 0,
	0, 626, 0, 0, 694, 703, 704, 576, 580, 581,
	582, 583, 584, 585, 586, 587, 588, 589, -2, -2,
	-2, 593, 594, 595, -2, -2, -2, 0, 0, 0,
	705, 0, 0, 683, 707, 708, 713, 714, 0, 642,
	643, 644, 715, 0, 0, 0, 480, 0, 657, 731,
	271, 273, 30, 0, 199, 0, 202, 0, 0, 0,
	0, 208, 209, 0, 0, 0, 0, 219, 226, 0,
	0, 0, 45, 0, 0, 277, 0, 48, 48, 268,
	0, 0, 270, 306, 0, 0, 0, 312, 750, 321,
	0, 439, 436, 515, 0, 0, 253, 262, 262, 0,
	624, 625, 0, 0, 0, 258, 260, 0, 0, 0,
	341, 0, 383, 381, 403, 0, 405, 0, 0, 0,
	407, 398, 0, 0, 393, 0, 392, 0, 0, 401,
	0, 0, -2, 0, 567, -2, -2, 679, 686, 772,
	365, 617, 619, 620, 723, 668, 665, 0, 652, 635,
	636, 702, 0, 0, 0, 0, 686, 682, 641, 0,
	647, 648, 459, 342, 32, 0, 203, 204, 786, 0,
	207, 210, 0, 212, 788, 197, 0, 223, 224, 221,
	0, 34, 35, 44, 50, 36, 42, 0, 0, 0,
	0, 0, 327, 328, 0, 0, 226, 0, 265, 767,
	0, 265, 0, 0, 0, 216, 0, 197, 226, 0,
	656, 658, 0, 404, 0, 423, 406, 0, 0, 396,
	0, 0, 410, -2, -2, 568, 681, 0, 365, 0,
	654, -2, 0, 0, 0, 684, 0, 201, 205, 0,
	0, 232, 0, 220, 0, 0, 52, 0, 272, 274,
	0, 315, 434, 317, 0, 197, 254, 255, 261, 256,
	262, 365, 226, 259, 187, 197, 0, 0, 0, 0,
	0, 394, 391, 408, 618, 671, 0, -2, 0, 601,
	646, 0, 211, 237, 0, 0, 0, 228, 38, 0,
	49, 0, 316, 0, 214, 265, 0, 197, 249, 0,
	659, 660, 422, 0, 0, 0, 0, 667, 602, 0,
	213, 233, 234, 0, 229, 230, 231, 787, 225, 232,
	0, 51, 434, 0, 257, 616, 215, 226, 414, 664,
	669, 672, -2, 897, 816, 0, 670, 206, 235, 0,
	236, 0, 0, 0, 237, 0, 314, 48, 197, 0,
	674, 675, 676, 677, 678, 238, 0, 241, 242, 0,
	239, 222, 227, 196, 250, 0, 240, 243, 244, 673,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 283, 3, 289, 284, 3,
	294, 295, 287, 285, 298, 286, 296, 288, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 302, 297,
	277, 279, 278, 3, 299, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 292, 3, 293, 282, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 300, 281, 301, 291,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 280,
	57620, 290, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:698
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:704
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:710
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 17:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:733
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 24:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:743
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 25:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:749
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.qname(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 26:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:753
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.qname(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 27:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:759
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 28:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:763
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 29:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:770
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 30:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:775
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 31:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:780
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 32:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:785
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 33:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:790
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: sqlDollar[3].str, Default: sqlDollar[4].union.expr()}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:795
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: sqlDollar[3].str}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:799
		{
			unimplemented()
		}
	case 36:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:802
		{
			sqlVAL.union.val = &AlterTableDropColumn{columnKeyword: sqlDollar[2].union.bool(), IfExists: true, Column: sqlDollar[5].str}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:807
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        sqlDollar[3].str,
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:817
		{
		}
	case 39:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:820
		{
			sqlVAL.union.val = &AlterTableAddConstraint{ConstraintDef: sqlDollar[2].union.constraintDef()}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:824
		{
			unimplemented()
		}
	case 41:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:826
		{
			unimplemented()
		}
	case 42:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:829
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   sqlDollar[5].str,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 43:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:838
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   sqlDollar[3].str,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 44:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:848
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 45:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:852
		{
			sqlVAL.union.val = nil
		}
	case 46:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:858
		{
			sqlVAL.union.val = DropCascade
		}
	case 47:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:862
		{
			sqlVAL.union.val = DropRestrict
		}
	case 48:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:866
		{
			sqlVAL.union.val = DropDefault
		}
	case 49:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:871
		{
			unimplementedWithIssue(2473)
		}
	case 50:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:872
		{
		}
	case 51:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:875
		{
			unimplemented()
		}
	case 52:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:876
		{
		}
	case 56:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:887
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retExprs()}
		}
	case 57:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:894
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 58:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:898
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:902
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:910
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:918
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.qnames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:922
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.qnames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:928
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:932
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 65:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:938
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 66:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:942
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:948
		{
			sqlVAL.union.val = Indirection{NameIndirection(sqlDollar[2].str)}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:952
		{
			sqlVAL.union.val = append(sqlDollar[1].union.indirect(), NameIndirection(sqlDollar[3].str))
		}
	case 69:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:959
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 70:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:963
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 71:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:969
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 78:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:978
		{ /* SKIP DOC */
		}
	case 79:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:982
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:986
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 82:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:996
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1006
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 84:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1010
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 85:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1016
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 89:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1026
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1037
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 91:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1041
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 92:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1048
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1054
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1060
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1064
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1071
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: NameList(sqlDollar[6].union.strs()), Targets: sqlDollar[4].union.targetList()}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1078
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: NameList(sqlDollar[6].union.strs()), Targets: sqlDollar[4].union.targetList()}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1085
		{
			sqlVAL.union.val = TargetList{Tables: QualifiedNames(sqlDollar[1].union.qnames())}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1089
		{
			sqlVAL.union.val = TargetList{Tables: QualifiedNames(sqlDollar[2].union.qnames())}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1093
		{
			sqlVAL.union.val = TargetList{Databases: NameList(sqlDollar[2].union.strs())}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1100
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1103
		{
		}
	case 103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1107
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1111
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 105:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1118
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 106:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1122
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1126
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1130
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1134
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 110:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1138
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 111:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1142
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 112:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1150
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1154
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1162
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1166
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 116:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1170
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1174
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1177
		{ /* SKIP DOC */
		}
	case 119:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1183
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1189
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1196
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1200
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1204
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1208
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1215
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1221
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname(), Values: sqlDollar[3].union.exprs()}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1225
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname(), Values: sqlDollar[3].union.exprs()}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1229
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname()}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1233
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname()}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1240
		{
			unimplemented()
		}
	case 133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1243
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1246
		{
			unimplemented()
		}
	case 136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1253
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1257
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1265
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1271
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1275
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1279
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1283
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1287
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1293
		{
			sqlVAL.union.val = Low
		}
	case 147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1297
		{
			sqlVAL.union.val = Normal
		}
	case 148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1301
		{
			sqlVAL.union.val = High
		}
	case 149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1307
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1311
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1315
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1330
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1334
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1338
		{
			d, err := ParseDInterval(sqlDollar[2].str)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1348
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1352
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1357
		{
			unimplemented()
		}
	case 160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1358
		{
			unimplemented()
		}
	case 161:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1359
		{
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1363
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1367
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1373
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1377
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1381
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.qname()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1385
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1389
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.strs()}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1393
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1397
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1401
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.qname()}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1405
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.qname()}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1409
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1413
		{
			sqlVAL.union.val = &ShowTables{Name: sqlDollar[3].union.qname()}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1417
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1421
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1425
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1429
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 179:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1433
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.qname()}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1439
		{
			sqlVAL.union.val = sqlDollar[2].union.qname()
		}
	case 181:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1443
		{
			sqlVAL.union.val = (*QualifiedName)(nil)
		}
	case 182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1449
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 183:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1454
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1460
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 185:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1464
		{
			sqlVAL.union.val = []string(nil)
		}
	case 186:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1471
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.qname(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs()}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1475
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.qname(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs()}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1482
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 190:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1488
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1492
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 192:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1498
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1504
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 196:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1510
		{
			/* SKIP DOC */
			sqlVAL.union.val = &InterleaveDef{
				Parent:       &QualifiedName{Base: Name(sqlDollar[4].str)},
				Fields:       sqlDollar[6].union.strs(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1518
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1524
		{
			sqlVAL.union.val = newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
		}
	case 199:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1530
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 200:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1534
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1540
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1544
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1547
		{
			unimplemented()
		}
	case 204:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1549
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1553
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1557
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1575
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1579
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1583
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1587
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1591
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1595
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1599
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.qname(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1608
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.strs(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1617
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.strs(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1630
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.famElems(),
			}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1642
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1647
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 219:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1653
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1659
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    NameListToIndexElems(sqlDollar[3].union.strs()),
					Storing:    sqlDollar[5].union.strs(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1669
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[4].union.strs()),
				},
				PrimaryKey: true,
			}
		}
	case 222:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1678
		{
			unimplemented()
		}
	case 225:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1695
		{
			sqlVAL.union.val = sqlDollar[3].union.strs()
		}
	case 226:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1699
		{
			sqlVAL.union.val = []string(nil)
		}
	case 227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1705
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 228:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1709
		{
			sqlVAL.union.val = []string(nil)
		}
	case 229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1714
		{
			unimplemented()
		}
	case 230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1715
		{
			unimplemented()
		}
	case 231:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1716
		{
			unimplemented()
		}
	case 232:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1717
		{
		}
	case 233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1724
		{
			unimplemented()
		}
	case 234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1725
		{
			unimplemented()
		}
	case 235:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1726
		{
			unimplemented()
		}
	case 236:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1727
		{
			unimplemented()
		}
	case 237:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1728
		{
		}
	case 238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1731
		{
			unimplemented()
		}
	case 239:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1734
		{
			unimplemented()
		}
	case 240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1737
		{
			unimplemented()
		}
	case 241:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1738
		{
			unimplemented()
		}
	case 242:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1739
		{
			unimplemented()
		}
	case 243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1740
		{
			unimplemented()
		}
	case 244:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1741
		{
			unimplemented()
		}
	case 245:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1745
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 246:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1749
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 247:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1753
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 248:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1760
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.qnames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 249:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:1767
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.qname(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.strs(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:1778
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.qname(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.strs(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1792
		{
			sqlVAL.union.val = true
		}
	case 252:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1796
		{
			sqlVAL.union.val = false
		}
	case 253:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1802
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1806
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1815
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1818
		{
			unimplemented()
		}
	case 257:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1819
		{
			unimplemented()
		}
	case 258:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1823
		{
			sqlVAL.union.val = FamilyElemList{sqlDollar[1].union.famElem()}
		}
	case 259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1827
		{
			sqlVAL.union.val = append(sqlDollar[1].union.famElems(), sqlDollar[3].union.famElem())
		}
	case 260:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1833
		{
			sqlVAL.union.val = FamilyElem{Column: Name(sqlDollar[1].str)}
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1838
		{
			unimplemented()
		}
	case 262:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1839
		{
		}
	case 263:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1843
		{
			sqlVAL.union.val = Ascending
		}
	case 264:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1847
		{
			sqlVAL.union.val = Descending
		}
	case 265:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1851
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 266:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1858
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1862
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.qname(), NewName: sqlDollar[6].union.qname(), IfExists: false}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1866
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.qname(), NewName: sqlDollar[8].union.qname(), IfExists: true}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1870
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1874
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1878
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.qname(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1882
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.qname(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1886
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 274:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1890
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 275:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1896
		{
			sqlVAL.union.val = true
		}
	case 276:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1900
		{
			sqlVAL.union.val = false
		}
	case 277:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1905
		{
		}
	case 278:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1906
		{
		}
	case 279:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1910
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1916
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1923
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 282:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1927
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 283:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1931
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1935
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1939
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1948
		{
		}
	case 287:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1949
		{
		}
	case 288:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1953
		{
			sqlVAL.str = ""
		}
	case 289:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1957
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1961
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 291:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1965
		{
			sqlVAL.str = ""
		}
	case 292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1971
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 293:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1975
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 294:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1981
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1985
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1989
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1993
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1997
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2003
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 300:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2009
		{
			sqlVAL.union.val = &CreateDatabase{Name: Name(sqlDollar[3].str), Encoding: sqlDollar[4].union.strVal()}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2013
		{
			sqlVAL.union.val = &CreateDatabase{IfNotExists: true, Name: Name(sqlDollar[6].str), Encoding: sqlDollar[7].union.strVal()}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2019
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2022
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 304:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2032
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retExprs()
		}
	case 305:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2038
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
		}
	case 306:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2043
		{
			unimplementedWithIssue(6637)
		}
	case 307:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2045
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2050
		{
			unimplementedWithIssue(6637)
		}
	case 309:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2058
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname()}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2062
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2068
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2072
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.qnames(), Rows: sqlDollar[4].union.slct()}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2076
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2082
		{
			sqlVAL.union.val = &OnConflict{Columns: NameList(sqlDollar[3].union.strs()), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2086
		{
			sqlVAL.union.val = &OnConflict{Columns: NameList(sqlDollar[3].union.strs()), DoNothing: true}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2092
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 317:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2096
		{
			unimplemented()
		}
	case 318:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2098
		{
			sqlVAL.union.val = []string(nil)
		}
	case 319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2104
		{
			sqlVAL.union.val = sqlDollar[2].union.selExprs()
		}
	case 320:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2108
		{
			sqlVAL.union.val = SelectExprs(nil)
		}
	case 321:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2115
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retExprs()}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2121
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2125
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 326:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2135
		{
			sqlVAL.union.val = &UpdateExpr{Names: QualifiedNames{sqlDollar[1].union.qname()}, Expr: sqlDollar[3].union.expr()}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2147
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.qnames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2151
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.qnames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2195
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2201
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2205
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2220
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2224
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2228
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2232
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2236
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2240
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2274
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.tblExprs(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2286
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.tblExprs(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2298
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        TableExprs{&AliasedTableExpr{Expr: sqlDollar[2].union.qname()}},
				tableSelect: true,
			}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2306
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2315
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2324
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2342
		{
			unimplemented()
		}
	case 349:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2343
		{
			unimplemented()
		}
	case 350:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2344
		{
			unimplemented()
		}
	case 351:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2347
		{
			unimplemented()
		}
	case 352:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2348
		{
			unimplemented()
		}
	case 353:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2351
		{
			unimplemented()
		}
	case 354:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2354
		{
			unimplemented()
		}
	case 355:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2355
		{
		}
	case 356:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2358
		{
		}
	case 357:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2359
		{
		}
	case 358:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2363
		{
			sqlVAL.union.val = true
		}
	case 359:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2367
		{
			sqlVAL.union.val = false
		}
	case 360:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2371
		{
			sqlVAL.union.val = false
		}
	case 361:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2377
		{
			sqlVAL.union.val = true
		}
	case 362:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2382
		{
		}
	case 363:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2383
		{
		}
	case 364:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2387
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 365:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2391
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 366:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2397
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 367:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2403
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2407
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2413
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2421
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2430
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2441
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2454
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2461
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 378:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2468
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 379:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2482
		{
		}
	case 380:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2483
		{
		}
	case 381:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2509
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 382:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2513
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2519
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 384:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2523
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 385:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2529
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2533
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 387:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2545
		{
			sqlVAL.union.val = sqlDollar[2].union.tblExprs()
		}
	case 388:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2549
		{
			sqlVAL.union.val = TableExprs(nil)
		}
	case 389:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2555
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2559
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2565
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2570
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2576
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 394:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2581
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			index := a.Index
			if index == "" {
				index = b.Index
			} else if b.Index != "" {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			noIndexJoin := a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = &IndexHints{Index: index, NoIndexJoin: noIndexJoin}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2601
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2605
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 397:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2609
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 398:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2616
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), Hints: sqlDollar[2].union.indexHints(), As: sqlDollar[3].union.aliasClause(), AsOf: sqlDollar[4].union.asOfClause()}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2620
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, As: sqlDollar[2].union.aliasClause()}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2624
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 401:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2628
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[2].union.tblExpr(), As: sqlDollar[4].union.aliasClause()}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2648
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2652
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2656
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2660
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2664
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2668
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2674
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: NameList(sqlDollar[4].union.strs())}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2678
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2682
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: NameList(sqlDollar[3].union.strs())}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2686
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2693
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2699
		{
			sqlVAL.union.val = AsOfClause{Expr: &StrVal{s: sqlDollar[5].str}}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2703
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2709
		{
			sqlVAL.str = astFullJoin
		}
	case 417:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2713
		{
			sqlVAL.str = astLeftJoin
		}
	case 418:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2717
		{
			sqlVAL.str = astRightJoin
		}
	case 419:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2721
		{
			sqlVAL.str = astInnerJoin
		}
	case 420:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2727
		{
		}
	case 421:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2728
		{
		}
	case 422:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2739
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: NameList(sqlDollar[3].union.strs())}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2743
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2749
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 425:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2753
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 426:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2757
		{
			sqlVAL.union.val = sqlDollar[2].union.qname()
		}
	case 427:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2761
		{
			sqlVAL.union.val = sqlDollar[3].union.qname()
		}
	case 428:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2767
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2771
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 430:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2784
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname()}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2788
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2792
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2798
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 434:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2802
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 435:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2814
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 436:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2818
		{
			unimplementedWithIssue(2115)
		}
	case 437:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2819
		{
			unimplementedWithIssue(2115)
		}
	case 438:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2822
		{
			unimplementedWithIssue(2115)
		}
	case 439:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2823
		{
			unimplementedWithIssue(2115)
		}
	case 440:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2824
		{
		}
	case 446:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2832
		{
			unimplemented()
		}
	case 447:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2834
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 448:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2838
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 449:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2842
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 450:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2846
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 451:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2850
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 452:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2854
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 453:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2858
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 458:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2879
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2888
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2902
		{
			sqlVAL.union.val = nil
		}
	case 461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2909
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 462:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2913
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 463:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2917
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 464:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2921
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 465:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2925
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 466:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2929
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 467:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2933
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newFloatColType(int(prec))
		}
	case 468:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2942
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 469:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2946
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2955
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2964
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2973
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 473:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2977
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 474:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2983
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 475:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2987
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3005
		{
			n, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newIntBitType(int(n))
		}
	case 481:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3016
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 486:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3032
		{
			n, err := sqlDollar[3].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3048
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 488:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3054
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 489:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3058
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 490:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3062
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 491:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3066
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 492:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3071
		{
		}
	case 493:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3072
		{
		}
	case 494:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3077
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 495:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3081
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 496:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3085
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 497:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3089
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 498:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3093
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3098
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 500:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3103
		{
			unimplemented()
		}
	case 501:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3104
		{
			unimplemented()
		}
	case 502:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3105
		{
			unimplemented()
		}
	case 503:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3106
		{
			unimplemented()
		}
	case 504:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3107
		{
			unimplemented()
		}
	case 505:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3108
		{
			unimplemented()
		}
	case 506:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3109
		{
			unimplemented()
		}
	case 507:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3110
		{
			unimplemented()
		}
	case 508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3111
		{
			unimplemented()
		}
	case 509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3112
		{
			unimplemented()
		}
	case 510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3113
		{
			unimplemented()
		}
	case 511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3114
		{
			unimplemented()
		}
	case 512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3115
		{
			unimplemented()
		}
	case 513:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3116
		{
		}
	case 514:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3119
		{
			unimplemented()
		}
	case 515:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3120
		{
			unimplemented()
		}
	case 517:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3144
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3152
		{
			unimplemented()
		}
	case 519:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3153
		{
			unimplemented()
		}
	case 520:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3162
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3166
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3170
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3174
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3178
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3182
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3186
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3190
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3194
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3198
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3202
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3206
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3210
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3214
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3218
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3222
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3226
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3230
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3234
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3238
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3242
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3246
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3250
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3254
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3258
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3262
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3266
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3270
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3274
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3278
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3282
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3286
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3290
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3294
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3298
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3302
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3306
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3310
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3313
		{
			unimplemented()
		}
	case 559:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3315
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3319
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3323
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3327
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3331
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3335
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3339
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3343
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3347
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3351
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3355
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3359
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3363
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3367
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3371
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3375
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3392
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3401
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3405
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3409
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3413
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3417
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3421
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3425
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3429
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3433
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3437
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3441
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3445
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3449
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3453
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3457
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3461
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3465
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3469
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3473
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3477
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3481
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3485
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3489
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3493
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3497
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3501
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3513
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 605:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3518
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3522
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3528
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3532
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3536
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3542
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 613:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3546
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 614:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3550
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3558
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3562
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3565
		{
			unimplemented()
		}
	case 618:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3566
		{
			unimplemented()
		}
	case 619:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3568
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Type: All, Exprs: sqlDollar[4].union.exprs()}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3572
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Type: Distinct, Exprs: sqlDollar[4].union.exprs()}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3576
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Exprs: Exprs{StarExpr()}}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3589
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 623:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3593
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 624:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3602
		{
			unimplemented()
		}
	case 625:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3603
		{
			unimplemented()
		}
	case 626:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3607
		{
			unimplemented()
		}
	case 627:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3609
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3613
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3617
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3621
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3624
		{
			unimplemented()
		}
	case 632:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3625
		{
			unimplemented()
		}
	case 633:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3626
		{
			unimplemented()
		}
	case 634:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3627
		{
			unimplemented()
		}
	case 635:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3629
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3633
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3637
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3641
		{
			sqlVAL.union.val = &OverlayExpr{FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3645
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "STRPOS"}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3649
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3652
		{
			unimplemented()
		}
	case 642:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3654
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3658
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "LTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3662
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "RTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3666
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3670
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3674
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3678
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3682
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3686
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3690
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3696
		{
			unimplemented()
		}
	case 653:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3697
		{
		}
	case 654:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3700
		{
			unimplemented()
		}
	case 655:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3701
		{
		}
	case 656:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3705
		{
			unimplemented()
		}
	case 657:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3706
		{
		}
	case 658:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3709
		{
			unimplemented()
		}
	case 659:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3710
		{
			unimplemented()
		}
	case 660:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3713
		{
			unimplemented()
		}
	case 661:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3716
		{
			unimplemented()
		}
	case 662:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3717
		{
			unimplemented()
		}
	case 663:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3718
		{
		}
	case 664:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3722
		{
			unimplemented()
		}
	case 665:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3733
		{
			unimplemented()
		}
	case 666:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3734
		{
		}
	case 667:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3737
		{
			unimplemented()
		}
	case 668:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3738
		{
		}
	case 669:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3746
		{
			unimplemented()
		}
	case 670:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3747
		{
			unimplemented()
		}
	case 671:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3748
		{
		}
	case 672:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3751
		{
			unimplemented()
		}
	case 673:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3752
		{
			unimplemented()
		}
	case 674:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3758
		{
			unimplemented()
		}
	case 675:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3759
		{
			unimplemented()
		}
	case 676:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3760
		{
			unimplemented()
		}
	case 677:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3761
		{
			unimplemented()
		}
	case 678:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3762
		{
			unimplemented()
		}
	case 679:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3773
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3777
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3781
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3787
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3791
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3797
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3840
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3844
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 687:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3850
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3854
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 689:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3860
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3864
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3868
		{
			sqlVAL.union.val = &Array{nil}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3874
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3878
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 694:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3884
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3906
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3910
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3916
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 705:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3923
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3927
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 707:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3944
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3948
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3952
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3956
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3960
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 712:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3964
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 713:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3970
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 714:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3976
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 715:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3982
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 716:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3986
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 717:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3990
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 718:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3996
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4000
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4011
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4018
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4022
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 723:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4028
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4034
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 725:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4038
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 727:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4045
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 728:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4051
		{
			sqlVAL.union.val = sqlDollar[1].union.indirectElem()
		}
	case 729:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4055
		{
			sqlVAL.union.val = sqlDollar[1].union.indirectElem()
		}
	case 730:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4059
		{
			sqlVAL.union.val = &ArrayIndirection{Begin: sqlDollar[2].union.expr()}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4063
		{
			sqlVAL.union.val = &ArrayIndirection{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr()}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4069
		{
			sqlVAL.union.val = NameIndirection(sqlDollar[2].str)
		}
	case 733:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4075
		{
			sqlVAL.union.val = qualifiedStar
		}
	case 734:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4081
		{
			sqlVAL.union.val = Indirection{sqlDollar[1].union.indirectElem()}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4085
		{
			sqlVAL.union.val = append(sqlDollar[1].union.indirect(), sqlDollar[2].union.indirectElem())
		}
	case 736:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4090
		{
		}
	case 737:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4091
		{
		}
	case 739:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4100
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4106
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4110
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 742:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4119
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 743:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4125
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4129
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 745:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4135
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4144
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4148
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4152
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 749:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4160
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4164
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 751:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4170
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4174
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 753:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4180
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4184
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 755:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4195
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4199
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4205
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.qname(), Index: Name(sqlDollar[3].str)}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4216
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4220
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: Indirection{sqlDollar[2].union.indirectElem()}}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4224
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: Indirection{sqlDollar[2].union.indirectElem()}}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4228
		{
			sqlVAL.union.val = &QualifiedName{Indirect: Indirection{unqualifiedStar}}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4234
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4238
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 764:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4244
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 765:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4247
		{
		}
	case 766:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4257
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4261
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4268
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 769:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4272
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 770:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4276
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4280
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4283
		{
			unimplemented()
		}
	case 773:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4285
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4289
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4293
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[5].str}, Type: sqlDollar[1].union.colType()}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4297
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 777:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4301
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 778:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4305
		{
			sqlVAL.union.val = DNull
		}
	case 780:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4312
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 781:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4316
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4338
		{
			sqlVAL.str = ""
		}
	case 787:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4344
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 788:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4348
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
