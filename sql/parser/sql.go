// Code generated by go yacc.
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"errors"

	"github.com/cockroachdb/cockroach/sql/privilege"
)

var errUnimplemented = errors.New("unimplemented")

func unimplemented() {
	panic(errUnimplemented)
}

//line sql.y:36

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new sytax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in two forms, depending on the
// type of the value being accessed. Values and pointers are directly
// type asserted from the empty interface, meaning that they will panic
// if the type assertion is incorrect. Interfaces are handled differently
// because a nil instance of an interface inserted into the empty interface
// becomes a nil instance of the empty interface and therefore will fail a
// direct type assertion. Instead, a guarded type assertion must be used,
// which returns nil if the type assertion fails.
func (u *sqlSymUnion) ival() IntVal {
	return u.val.(IntVal)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) qname() *QualifiedName {
	return u.val.(*QualifiedName)
}
func (u *sqlSymUnion) qnames() QualifiedNames {
	return u.val.(QualifiedNames)
}
func (u *sqlSymUnion) indirectElem() IndirectionElem {
	if indirectElem, ok := u.val.(IndirectionElem); ok {
		return indirectElem
	}
	return nil
}
func (u *sqlSymUnion) indirect() Indirection {
	return u.val.(Indirection)
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	if selectStmt, ok := u.val.(*Select); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	if selectStmt, ok := u.val.(SelectStatement); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	if constraintDef, ok := u.val.(ConstraintTableDef); ok {
		return constraintDef
	}
	return nil
}
func (u *sqlSymUnion) tblDef() TableDef {
	if tblDef, ok := u.val.(TableDef); ok {
		return tblDef
	}
	return nil
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() ColumnQualification {
	if colQual, ok := u.val.(ColumnQualification); ok {
		return colQual
	}
	return nil
}
func (u *sqlSymUnion) colQuals() []ColumnQualification {
	return u.val.([]ColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retExprs() ReturningExprs {
	return ReturningExprs(u.val.(SelectExprs))
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	if tblExpr, ok := u.val.(TableExpr); ok {
		return tblExpr
	}
	return nil
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	if joinCond, ok := u.val.(JoinCond); ok {
		return joinCond
	}
	return nil
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	if alterTableCmd, ok := u.val.(AlterTableCmd); ok {
		return alterTableCmd
	}
	return nil
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}

//line sql.y:250
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const FCONST = 57347
const SCONST = 57348
const BCONST = 57349
const ICONST = 57350
const PARAM = 57351
const TYPECAST = 57352
const DOT_DOT = 57353
const LESS_EQUALS = 57354
const GREATER_EQUALS = 57355
const NOT_EQUALS = 57356
const ERROR = 57357
const ACTION = 57358
const ADD = 57359
const ALL = 57360
const ALTER = 57361
const ANALYSE = 57362
const ANALYZE = 57363
const AND = 57364
const ANY = 57365
const ARRAY = 57366
const AS = 57367
const ASC = 57368
const ASYMMETRIC = 57369
const AT = 57370
const BEGIN = 57371
const BETWEEN = 57372
const BIGINT = 57373
const BIT = 57374
const BLOB = 57375
const BOOL = 57376
const BOOLEAN = 57377
const BOTH = 57378
const BY = 57379
const BYTEA = 57380
const BYTES = 57381
const CASCADE = 57382
const CASE = 57383
const CAST = 57384
const CHAR = 57385
const CHARACTER = 57386
const CHARACTERISTICS = 57387
const CHECK = 57388
const COALESCE = 57389
const COLLATE = 57390
const COLLATION = 57391
const COLUMN = 57392
const COLUMNS = 57393
const COMMIT = 57394
const COMMITTED = 57395
const CONCAT = 57396
const CONFLICT = 57397
const CONSTRAINT = 57398
const COVERING = 57399
const CREATE = 57400
const CROSS = 57401
const CUBE = 57402
const CURRENT = 57403
const CURRENT_CATALOG = 57404
const CURRENT_DATE = 57405
const CURRENT_ROLE = 57406
const CURRENT_TIME = 57407
const CURRENT_TIMESTAMP = 57408
const CURRENT_USER = 57409
const CYCLE = 57410
const DATA = 57411
const DATABASE = 57412
const DATABASES = 57413
const DATE = 57414
const DAY = 57415
const DEC = 57416
const DECIMAL = 57417
const DEFAULT = 57418
const DEFERRABLE = 57419
const DELETE = 57420
const DESC = 57421
const DISTINCT = 57422
const DO = 57423
const DOUBLE = 57424
const DROP = 57425
const ELSE = 57426
const END = 57427
const ESCAPE = 57428
const EXCEPT = 57429
const EXISTS = 57430
const EXPLAIN = 57431
const EXTRACT = 57432
const FALSE = 57433
const FETCH = 57434
const FILTER = 57435
const FIRST = 57436
const FLOAT = 57437
const FOLLOWING = 57438
const FOR = 57439
const FOREIGN = 57440
const FROM = 57441
const FULL = 57442
const GRANT = 57443
const GRANTS = 57444
const GREATEST = 57445
const GROUP = 57446
const GROUPING = 57447
const HAVING = 57448
const HIGH = 57449
const HOUR = 57450
const IF = 57451
const IFNULL = 57452
const IN = 57453
const INDEX = 57454
const INDEXES = 57455
const INITIALLY = 57456
const INTENT = 57457
const INNER = 57458
const INSERT = 57459
const INT = 57460
const INT64 = 57461
const INTEGER = 57462
const INTERSECT = 57463
const INTERVAL = 57464
const INTO = 57465
const IS = 57466
const ISOLATION = 57467
const JOIN = 57468
const KEY = 57469
const KEYS = 57470
const LATERAL = 57471
const LEADING = 57472
const LEAST = 57473
const LEFT = 57474
const LEVEL = 57475
const LIKE = 57476
const LIMIT = 57477
const LOCAL = 57478
const LOCALTIME = 57479
const LOCALTIMESTAMP = 57480
const LOW = 57481
const LSHIFT = 57482
const MATCH = 57483
const MINUTE = 57484
const MONTH = 57485
const NAME = 57486
const NAMES = 57487
const NATURAL = 57488
const NEXT = 57489
const NO = 57490
const NORMAL = 57491
const NOT = 57492
const NOTHING = 57493
const NULL = 57494
const NULLIF = 57495
const NULLS = 57496
const NUMERIC = 57497
const OF = 57498
const OFF = 57499
const OFFSET = 57500
const ON = 57501
const ONLY = 57502
const OR = 57503
const ORDER = 57504
const ORDINALITY = 57505
const OUT = 57506
const OUTER = 57507
const OVER = 57508
const OVERLAPS = 57509
const OVERLAY = 57510
const PARTIAL = 57511
const PARTITION = 57512
const PLACING = 57513
const POSITION = 57514
const PRECEDING = 57515
const PRECISION = 57516
const PRIMARY = 57517
const PRIORITY = 57518
const RANGE = 57519
const READ = 57520
const REAL = 57521
const RECURSIVE = 57522
const REF = 57523
const REFERENCES = 57524
const RENAME = 57525
const REPEATABLE = 57526
const RELEASE = 57527
const RESTRICT = 57528
const RESTART = 57529
const RETRY = 57530
const RETURNING = 57531
const REVOKE = 57532
const RIGHT = 57533
const ROLLBACK = 57534
const ROLLUP = 57535
const ROW = 57536
const ROWS = 57537
const RSHIFT = 57538
const SEARCH = 57539
const SECOND = 57540
const SELECT = 57541
const SERIALIZABLE = 57542
const SESSION = 57543
const SESSION_USER = 57544
const SET = 57545
const SHOW = 57546
const SIMILAR = 57547
const SIMPLE = 57548
const SMALLINT = 57549
const SNAPSHOT = 57550
const SOME = 57551
const SQL = 57552
const START = 57553
const STRICT = 57554
const STRING = 57555
const STORING = 57556
const SUBSTRING = 57557
const SYMMETRIC = 57558
const TABLE = 57559
const TABLES = 57560
const TEXT = 57561
const THEN = 57562
const TIME = 57563
const TIMESTAMP = 57564
const TO = 57565
const TRAILING = 57566
const TRANSACTION = 57567
const TREAT = 57568
const TRIM = 57569
const TRUE = 57570
const TRUNCATE = 57571
const TYPE = 57572
const UNBOUNDED = 57573
const UNCOMMITTED = 57574
const UNION = 57575
const UNIQUE = 57576
const UNKNOWN = 57577
const UPDATE = 57578
const USER = 57579
const USING = 57580
const VALID = 57581
const VALIDATE = 57582
const VALUE = 57583
const VALUES = 57584
const VARCHAR = 57585
const VARIADIC = 57586
const VARYING = 57587
const WHEN = 57588
const WHERE = 57589
const WINDOW = 57590
const WITH = 57591
const WITHIN = 57592
const WITHOUT = 57593
const YEAR = 57594
const ZONE = 57595
const NOT_LA = 57596
const WITH_LA = 57597
const POSTFIXOP = 57598
const UMINUS = 57599

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"FCONST",
	"SCONST",
	"BCONST",
	"ICONST",
	"PARAM",
	"TYPECAST",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXPLAIN",
	"EXTRACT",
	"FALSE",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FOLLOWING",
	"FOR",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HOUR",
	"IF",
	"IFNULL",
	"IN",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INTENT",
	"INNER",
	"INSERT",
	"INT",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARTIAL",
	"PARTITION",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESTRICT",
	"RESTART",
	"RETRY",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SNAPSHOT",
	"SOME",
	"SQL",
	"START",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"TABLE",
	"TABLES",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"USER",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:4111

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 19,
	276, 19,
	-2, 311,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 29,
	1, 282,
	159, 282,
	189, 282,
	274, 282,
	276, 282,
	-2, 292,
	-1, 43,
	1, 285,
	159, 285,
	189, 285,
	274, 285,
	276, 285,
	-2, 291,
	-1, 52,
	1, 19,
	276, 19,
	-2, 311,
	-1, 88,
	1, 136,
	276, 136,
	-2, 774,
	-1, 259,
	135, 321,
	158, 321,
	-2, 288,
	-1, 262,
	135, 320,
	158, 320,
	-2, 286,
	-1, 373,
	135, 320,
	158, 320,
	-2, 289,
	-1, 430,
	273, 719,
	-2, 714,
	-1, 431,
	273, 720,
	-2, 715,
	-1, 437,
	6, 440,
	273, 440,
	-2, 855,
	-1, 459,
	6, 410,
	-2, 832,
	-1, 460,
	6, 437,
	273, 437,
	-2, 833,
	-1, 461,
	6, 418,
	-2, 834,
	-1, 462,
	6, 417,
	-2, 835,
	-1, 463,
	6, 437,
	273, 437,
	-2, 838,
	-1, 464,
	6, 437,
	273, 437,
	-2, 839,
	-1, 465,
	6, 438,
	-2, 842,
	-1, 466,
	6, 405,
	-2, 843,
	-1, 467,
	6, 405,
	-2, 844,
	-1, 468,
	6, 420,
	-2, 847,
	-1, 469,
	6, 406,
	-2, 852,
	-1, 470,
	6, 407,
	-2, 853,
	-1, 471,
	6, 408,
	-2, 854,
	-1, 472,
	6, 405,
	-2, 858,
	-1, 473,
	6, 411,
	-2, 863,
	-1, 474,
	6, 409,
	-2, 865,
	-1, 475,
	6, 439,
	-2, 869,
	-1, 476,
	6, 435,
	273, 435,
	-2, 873,
	-1, 733,
	87, 292,
	121, 292,
	135, 292,
	158, 292,
	162, 292,
	233, 292,
	-2, 542,
	-1, 741,
	273, 699,
	-2, 689,
	-1, 935,
	12, 0,
	13, 0,
	14, 0,
	256, 0,
	257, 0,
	258, 0,
	-2, 473,
	-1, 936,
	12, 0,
	13, 0,
	14, 0,
	256, 0,
	257, 0,
	258, 0,
	-2, 474,
	-1, 937,
	12, 0,
	13, 0,
	14, 0,
	256, 0,
	257, 0,
	258, 0,
	-2, 475,
	-1, 941,
	12, 0,
	13, 0,
	14, 0,
	256, 0,
	257, 0,
	258, 0,
	-2, 479,
	-1, 942,
	12, 0,
	13, 0,
	14, 0,
	256, 0,
	257, 0,
	258, 0,
	-2, 480,
	-1, 943,
	12, 0,
	13, 0,
	14, 0,
	256, 0,
	257, 0,
	258, 0,
	-2, 481,
	-1, 946,
	30, 0,
	111, 0,
	134, 0,
	205, 0,
	254, 0,
	-2, 486,
	-1, 977,
	167, 612,
	-2, 615,
	-1, 1127,
	87, 292,
	121, 292,
	135, 292,
	158, 292,
	162, 292,
	233, 292,
	-2, 362,
	-1, 1135,
	30, 0,
	111, 0,
	134, 0,
	205, 0,
	254, 0,
	-2, 487,
	-1, 1140,
	30, 0,
	111, 0,
	134, 0,
	205, 0,
	254, 0,
	-2, 488,
	-1, 1159,
	167, 611,
	-2, 614,
	-1, 1298,
	30, 0,
	111, 0,
	134, 0,
	205, 0,
	254, 0,
	-2, 489,
	-1, 1303,
	124, 0,
	-2, 499,
	-1, 1312,
	167, 613,
	-2, 616,
	-1, 1352,
	12, 0,
	13, 0,
	14, 0,
	256, 0,
	257, 0,
	258, 0,
	-2, 523,
	-1, 1353,
	12, 0,
	13, 0,
	14, 0,
	256, 0,
	257, 0,
	258, 0,
	-2, 524,
	-1, 1354,
	12, 0,
	13, 0,
	14, 0,
	256, 0,
	257, 0,
	258, 0,
	-2, 525,
	-1, 1358,
	12, 0,
	13, 0,
	14, 0,
	256, 0,
	257, 0,
	258, 0,
	-2, 529,
	-1, 1359,
	12, 0,
	13, 0,
	14, 0,
	256, 0,
	257, 0,
	258, 0,
	-2, 530,
	-1, 1360,
	12, 0,
	13, 0,
	14, 0,
	256, 0,
	257, 0,
	258, 0,
	-2, 531,
	-1, 1453,
	124, 0,
	-2, 500,
	-1, 1457,
	30, 0,
	111, 0,
	134, 0,
	205, 0,
	254, 0,
	-2, 503,
	-1, 1458,
	30, 0,
	111, 0,
	134, 0,
	205, 0,
	254, 0,
	-2, 505,
	-1, 1537,
	30, 0,
	111, 0,
	134, 0,
	205, 0,
	254, 0,
	-2, 504,
	-1, 1538,
	30, 0,
	111, 0,
	134, 0,
	205, 0,
	254, 0,
	-2, 506,
	-1, 1546,
	124, 0,
	-2, 532,
	-1, 1583,
	124, 0,
	-2, 533,
	-1, 1628,
	30, 0,
	134, 0,
	205, 0,
	254, 0,
	-2, 831,
}

const sqlNprod = 965
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 19526

var sqlAct = [...]int{

	974, 1627, 1610, 1494, 1648, 1588, 1612, 1611, 819, 1554,
	1422, 429, 875, 1421, 1626, 263, 1390, 428, 421, 1332,
	1439, 1527, 691, 290, 1304, 862, 1217, 812, 489, 1516,
	859, 736, 1433, 1073, 1123, 1278, 1216, 883, 990, 89,
	738, 423, 479, 1287, 671, 1162, 820, 517, 13, 496,
	1115, 798, 1305, 962, 994, 861, 393, 268, 28, 1111,
	959, 767, 789, 771, 984, 886, 1029, 270, 42, 1126,
	18, 545, 687, 530, 64, 693, 10, 6, 854, 499,
	501, 394, 93, 28, 304, 363, 403, 527, 490, 364,
	262, 556, 477, 42, 273, 491, 66, 62, 376, 375,
	864, 309, 65, 67, 572, 311, 307, 43, 377, 86,
	28, 547, 884, 526, 543, 519, 71, 44, 300, 493,
	42, 1518, 387, 494, 493, 519, 492, 987, 494, 813,
	1624, 492, 1618, 1515, 267, 879, 1617, 817, 1609, 879,
	696, 1456, 1604, 267, 1585, 879, 315, 1456, 1579, 1573,
	260, 879, 1515, 404, 1155, 312, 316, 1032, 698, 1082,
	259, 1564, 988, 286, 1515, 1539, 293, 1534, 1456, 338,
	879, 301, 1524, 339, 1514, 1515, 1499, 1515, 697, 879,
	1498, 694, 1479, 879, 711, 1155, 1459, 1455, 48, 1155,
	1456, 1400, 1308, 694, 879, 1155, 989, 986, 1269, 1265,
	1234, 518, 518, 1235, 287, 1232, 50, 287, 1155, 296,
	1231, 1576, 287, 1155, 306, 1230, 1159, 1157, 1155, 1155,
	1156, 880, 1158, 786, 879, 1155, 785, 524, 695, 1365,
	525, 51, 1311, 1095, 787, 1113, 1097, 879, 46, 834,
	522, 970, 874, 848, 47, 388, 48, 666, 665, 1161,
	537, 536, 991, 332, 285, 696, 48, 494, 1155, 52,
	48, 520, 45, 571, 50, 350, 696, 1625, 1623, 1580,
	712, 520, 1523, 698, 50, 374, 1484, 1480, 50, 1472,
	478, 431, 395, 395, 698, 1471, 1466, 1465, 1464, 51,
	1463, 1189, 497, 697, 1450, 368, 46, 1380, 1417, 51,
	436, 1375, 47, 51, 697, 373, 985, 1374, 1373, 484,
	46, 1315, 92, 1293, 1277, 1237, 47, 1236, 1224, 1215,
	63, 488, 1188, 481, 1185, 1183, 713, 1133, 92, 92,
	45, 967, 92, 1172, 816, 92, 92, 92, 1166, 483,
	92, 92, 92, 92, 493, 314, 1096, 744, 494, 1536,
	1044, 492, 518, 1099, 1001, 1000, 271, 387, 386, 1082,
	1555, 1334, 668, 92, 92, 1575, 367, 1134, 1556, 1548,
	1530, 695, 1521, 1513, 1491, 1477, 1444, 1429, 260, 679,
	681, 1302, 1292, 1275, 1274, 712, 688, 566, 259, 1189,
	707, 704, 705, 706, 699, 700, 701, 702, 703, 727,
	728, 729, 730, 731, 280, 1448, 1272, 287, 734, 1249,
	968, 301, 1416, 1248, 667, 1214, 1180, 510, 1179, 1171,
	1152, 1203, 1148, 1189, 964, 315, 315, 772, 747, 775,
	1058, 1057, 696, 575, 1039, 316, 316, 999, 878, 777,
	765, 713, 486, 576, 764, 763, 762, 534, 741, 533,
	698, 761, 287, 512, 760, 759, 758, 567, 560, 757,
	756, 656, 755, 754, 660, 661, 662, 659, 663, 753,
	697, 752, 751, 742, 675, 1189, 677, 1204, 740, 45,
	669, 291, 391, 689, 1535, 676, 1189, 739, 260, 1295,
	1294, 260, 260, 485, 782, 1420, 1083, 344, 683, 359,
	380, 684, 685, 345, 480, 707, 704, 705, 706, 699,
	700, 701, 702, 703, 1058, 749, 1434, 780, 813, 1202,
	699, 700, 701, 702, 703, 769, 770, 1335, 792, 1175,
	995, 773, 362, 768, 1079, 92, 776, 92, 1594, 92,
	56, 1198, 1195, 1196, 1197, 1190, 1191, 1192, 1193, 1194,
	1637, 1408, 836, 1203, 92, 840, 1091, 1563, 433, 778,
	815, 245, 829, 309, 1638, 735, 803, 805, 791, 28,
	92, 246, 1507, 64, 1260, 575, 1506, 575, 791, 57,
	92, 92, 28, 92, 790, 576, 1261, 576, 1241, 257,
	1240, 1170, 42, 1169, 1168, 66, 1167, 781, 1136, 783,
	951, 65, 67, 795, 1189, 1203, 828, 833, 315, 1204,
	810, 809, 925, 92, 745, 92, 835, 312, 316, 808,
	837, 342, 831, 842, 314, 314, 841, 838, 254, 389,
	830, 832, 574, 92, 1596, 92, 92, 92, 92, 1496,
	92, 779, 1562, 1190, 1191, 1192, 1193, 1194, 696, 513,
	991, 961, 92, 961, 575, 1251, 343, 502, 1645, 503,
	287, 1204, 844, 811, 576, 1606, 698, 823, 846, 1447,
	92, 1074, 827, 92, 1072, 306, 853, 1190, 1191, 1192,
	1193, 1194, 508, 1607, 847, 519, 697, 507, 701, 702,
	703, 995, 845, 1557, 1324, 799, 395, 766, 58, 1092,
	926, 927, 928, 929, 930, 931, 932, 933, 934, 935,
	936, 937, 938, 939, 940, 941, 942, 943, 944, 945,
	946, 881, 1637, 504, 397, 1198, 1195, 1196, 1197, 1190,
	1191, 1192, 1193, 1194, 1203, 1090, 255, 924, 895, 915,
	1005, 1258, 1192, 1193, 1194, 1015, 1614, 802, 1544, 889,
	991, 788, 857, 258, 1002, 856, 1013, 341, 1023, 1025,
	1030, 1033, 1034, 1035, 1644, 780, 383, 384, 266, 92,
	780, 872, 873, 732, 574, 1252, 574, 888, 712, 365,
	975, 858, 1651, 59, 92, 502, 497, 503, 92, 949,
	1204, 92, 267, 1178, 340, 92, 1497, 92, 92, 696,
	92, 1288, 265, 92, 92, 92, 1043, 314, 575, 1008,
	92, 92, 987, 360, 1075, 1615, 1613, 698, 576, 966,
	1053, 54, 287, 1069, 801, 60, 502, 378, 503, 1636,
	965, 520, 1634, 1432, 713, 1047, 1077, 697, 895, 915,
	1138, 1643, 960, 267, 1009, 341, 868, 988, 287, 1055,
	379, 504, 1616, 574, 353, 1195, 1196, 1197, 1190, 1191,
	1192, 1193, 1194, 55, 361, 333, 331, 379, 1048, 1501,
	950, 1500, 1489, 1243, 1052, 688, 1085, 1321, 1010, 1007,
	505, 989, 986, 800, 1407, 565, 553, 564, 1068, 558,
	1649, 1406, 504, 947, 869, 1081, 1361, 971, 976, 674,
	979, 1078, 699, 700, 701, 702, 703, 1100, 1087, 1084,
	1098, 1322, 1086, 1475, 264, 1024, 1404, 1094, 1088, 1320,
	1093, 1036, 1037, 1038, 670, 1129, 1089, 1106, 1650, 712,
	61, 315, 1589, 1658, 1011, 378, 28, 991, 664, 1189,
	92, 316, 1049, 538, 1490, 1652, 42, 1104, 1135, 1108,
	92, 92, 1140, 1128, 1122, 1107, 1109, 568, 1114, 1060,
	1132, 1059, 1442, 957, 948, 1405, 1362, 991, 53, 542,
	306, 1154, 1363, 773, 955, 776, 92, 914, 306, 92,
	1283, 1163, 1282, 770, 769, 713, 340, 299, 1006, 1476,
	1403, 985, 500, 265, 252, 1160, 1176, 894, 370, 1118,
	1181, 540, 1279, 570, 1139, 1112, 998, 574, 505, 1657,
	1137, 541, 1547, 1219, 1118, 1121, 1474, 569, 1218, 1301,
	917, 734, 1101, 1184, 1147, 1116, 839, 1030, 1030, 1030,
	1121, 1119, 694, 953, 358, 952, 356, 355, 354, 958,
	1286, 287, 351, 298, 750, 1117, 1119, 1239, 1174, 505,
	704, 705, 706, 699, 700, 701, 702, 703, 1246, 658,
	997, 1387, 1145, 1256, 1254, 1242, 1102, 870, 867, 1203,
	92, 92, 92, 1143, 523, 395, 92, 914, 521, 92,
	516, 1247, 509, 506, 497, 92, 92, 92, 92, 92,
	1120, 92, 92, 1221, 1222, 1223, 1329, 894, 92, 1508,
	92, 80, 876, 1238, 682, 1120, 92, 1638, 1245, 1266,
	1263, 954, 1255, 381, 1257, 92, 92, 347, 956, 562,
	917, 92, 1151, 1510, 283, 1204, 1153, 807, 1264, 1267,
	314, 1262, 1259, 1268, 1141, 1297, 791, 1298, 1146, 1164,
	1165, 1518, 806, 1131, 1273, 559, 554, 92, 1303, 92,
	92, 1281, 92, 1271, 1284, 877, 1313, 1582, 3, 791,
	696, 92, 1313, 1289, 1290, 804, 92, 92, 1285, 92,
	1559, 1280, 385, 1577, 818, 382, 1330, 1114, 1213, 1317,
	1318, 1319, 690, 334, 336, 1339, 284, 348, 1341, 1226,
	895, 915, 1197, 1190, 1191, 1192, 1193, 1194, 697, 1314,
	535, 916, 72, 696, 1655, 68, 1656, 1323, 1325, 1326,
	1142, 292, 1189, 696, 1449, 1381, 1327, 1144, 1118, 1370,
	1371, 698, 77, 1340, 895, 915, 1336, 73, 1377, 1378,
	1379, 895, 915, 79, 1121, 1338, 823, 849, 1296, 1233,
	850, 697, 1342, 1368, 1116, 74, 1042, 1041, 1040, 992,
	1119, 851, 1461, 1328, 1369, 891, 852, 743, 253, 1495,
	244, 76, 895, 915, 1117, 70, 657, 287, 1386, 352,
	287, 1401, 1402, 1372, 1382, 1468, 1605, 1441, 1177, 1543,
	1435, 1526, 996, 748, 1427, 23, 1424, 1427, 409, 1431,
	1426, 1428, 1388, 1426, 1428, 247, 248, 249, 250, 251,
	1419, 916, 1453, 1244, 863, 1430, 577, 1457, 1458, 1120,
	1309, 563, 1460, 552, 1418, 1445, 432, 1462, 357, 546,
	1437, 1438, 555, 28, 1443, 1004, 482, 1454, 1446, 434,
	892, 435, 1467, 893, 774, 422, 1470, 890, 310, 821,
	92, 993, 1173, 75, 895, 915, 746, 408, 414, 413,
	972, 405, 337, 84, 85, 891, 1440, 1076, 1415, 814,
	1396, 871, 1391, 416, 92, 678, 1478, 1473, 1253, 256,
	1389, 1186, 1366, 1022, 1014, 1012, 1003, 92, 366, 92,
	78, 92, 495, 1376, 92, 822, 392, 349, 882, 1130,
	1397, 390, 686, 282, 90, 92, 281, 860, 92, 346,
	539, 843, 511, 1558, 1593, 1250, 92, 1502, 49, 92,
	274, 274, 1411, 1486, 289, 1485, 17, 289, 295, 289,
	16, 15, 289, 302, 289, 90, 1520, 14, 1427, 914,
	1509, 1488, 12, 11, 1426, 1428, 287, 287, 1436, 1105,
	287, 1427, 1531, 1522, 1511, 90, 90, 1426, 1428, 894,
	895, 915, 1537, 1538, 1519, 1517, 9, 1504, 1505, 1529,
	92, 1503, 8, 914, 1392, 7, 1393, 1533, 22, 21,
	914, 20, 917, 5, 4, 2, 1, 0, 1542, 0,
	1532, 1016, 1551, 894, 0, 0, 0, 0, 0, 1395,
	894, 0, 1553, 0, 0, 0, 1398, 0, 895, 915,
	0, 914, 1549, 0, 1552, 0, 917, 0, 0, 1540,
	0, 0, 0, 917, 497, 0, 0, 0, 1566, 895,
	915, 894, 92, 92, 92, 0, 1567, 1427, 1574, 1568,
	92, 92, 1570, 1426, 1428, 0, 92, 0, 92, 0,
	92, 92, 92, 92, 917, 0, 780, 0, 1394, 0,
	0, 0, 1493, 1578, 0, 0, 92, 0, 1569, 1581,
	0, 0, 0, 0, 92, 92, 0, 0, 92, 0,
	0, 0, 0, 1584, 92, 92, 0, 1600, 1590, 1591,
	0, 0, 0, 914, 0, 0, 1525, 1427, 1599, 1601,
	895, 915, 1597, 1426, 1428, 1620, 287, 1603, 1602, 1595,
	0, 1598, 1619, 894, 0, 1621, 0, 1631, 1631, 0,
	0, 1622, 0, 0, 0, 0, 92, 289, 1633, 90,
	1635, 371, 1632, 0, 0, 1639, 917, 0, 1641, 1631,
	1642, 0, 0, 0, 0, 0, 274, 0, 0, 0,
	0, 0, 1654, 1653, 0, 0, 0, 1396, 0, 1640,
	0, 0, 289, 916, 696, 0, 1631, 1659, 0, 0,
	0, 0, 289, 289, 0, 514, 0, 0, 0, 92,
	0, 92, 698, 92, 0, 0, 0, 1397, 0, 1572,
	92, 0, 0, 0, 1016, 1016, 0, 916, 0, 914,
	0, 0, 697, 0, 916, 531, 0, 531, 0, 0,
	0, 0, 0, 410, 29, 1149, 1150, 891, 0, 894,
	0, 1592, 0, 0, 92, 90, 92, 531, 90, 90,
	90, 0, 90, 0, 92, 916, 92, 0, 0, 29,
	0, 0, 917, 0, 673, 0, 0, 914, 0, 0,
	1608, 891, 1016, 1016, 1016, 0, 261, 0, 891, 269,
	823, 1392, 274, 1393, 0, 692, 29, 894, 914, 0,
	0, 0, 0, 1210, 1211, 1212, 0, 269, 0, 0,
	0, 0, 0, 0, 0, 0, 1395, 0, 894, 891,
	917, 0, 69, 1398, 712, 0, 0, 0, 92, 92,
	0, 0, 92, 0, 0, 0, 0, 0, 0, 0,
	92, 917, 0, 0, 0, 0, 0, 916, 0, 0,
	0, 0, 92, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 72, 0, 0, 0, 0, 0, 0, 914,
	0, 0, 0, 0, 0, 1394, 0, 92, 92, 92,
	713, 92, 77, 0, 0, 0, 0, 73, 0, 894,
	0, 289, 0, 0, 0, 0, 0, 0, 92, 0,
	0, 891, 1016, 1016, 0, 74, 796, 0, 0, 0,
	289, 0, 917, 289, 0, 0, 0, 289, 92, 825,
	826, 76, 289, 1299, 1300, 289, 90, 90, 0, 0,
	0, 0, 531, 692, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 706, 699, 700,
	701, 702, 703, 916, 0, 1016, 1016, 1016, 1016, 1016,
	1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
	1016, 1016, 1016, 0, 1016, 0, 1343, 1344, 1345, 1346,
	1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356,
	1357, 1358, 1359, 1360, 0, 1364, 0, 0, 0, 0,
	0, 916, 0, 75, 0, 0, 0, 891, 0, 0,
	0, 0, 0, 0, 261, 0, 0, 0, 0, 0,
	0, 0, 916, 0, 0, 0, 0, 0, 232, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	78, 0, 243, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 891, 0, 0, 0, 0,
	0, 0, 855, 0, 0, 0, 0, 696, 0, 714,
	715, 716, 289, 796, 0, 234, 891, 0, 0, 717,
	0, 0, 0, 0, 0, 698, 0, 723, 0, 0,
	0, 0, 0, 916, 233, 235, 0, 0, 289, 0,
	0, 90, 0, 0, 0, 697, 0, 0, 0, 0,
	0, 711, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 261, 0, 236, 261, 261, 0,
	0, 0, 0, 0, 0, 0, 237, 238, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 891, 0, 0,
	0, 733, 239, 0, 0, 737, 0, 0, 0, 0,
	0, 0, 1016, 0, 0, 0, 0, 0, 724, 0,
	0, 1189, 0, 1205, 1206, 1207, 0, 0, 0, 0,
	0, 722, 0, 1492, 0, 0, 0, 0, 0, 0,
	0, 719, 289, 1050, 1051, 0, 0, 712, 796, 0,
	0, 1056, 0, 0, 0, 0, 0, 1061, 1062, 1064,
	1066, 1067, 0, 1070, 1071, 1202, 0, 0, 718, 0,
	289, 0, 1080, 0, 0, 0, 0, 0, 289, 0,
	0, 0, 0, 0, 0, 0, 0, 855, 531, 1016,
	0, 0, 240, 855, 0, 241, 0, 0, 0, 242,
	0, 0, 0, 713, 0, 29, 0, 0, 0, 0,
	1546, 0, 721, 0, 0, 0, 0, 0, 29, 673,
	0, 90, 289, 0, 1103, 0, 0, 0, 0, 0,
	0, 0, 0, 1110, 0, 1208, 0, 0, 1125, 1125,
	696, 289, 714, 715, 716, 0, 0, 0, 0, 0,
	0, 1203, 717, 0, 0, 0, 0, 0, 698, 0,
	723, 720, 1016, 708, 709, 710, 0, 707, 704, 705,
	706, 699, 700, 701, 702, 703, 0, 0, 697, 1045,
	0, 0, 0, 1583, 711, 0, 1046, 0, 0, 0,
	1189, 0, 1205, 1206, 1207, 0, 0, 0, 0, 0,
	0, 0, 1452, 0, 0, 0, 0, 1204, 0, 0,
	0, 0, 0, 696, 0, 714, 715, 716, 0, 0,
	0, 0, 0, 0, 0, 717, 0, 0, 0, 0,
	0, 698, 0, 723, 1202, 0, 0, 0, 0, 0,
	0, 724, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 697, 0, 0, 722, 0, 0, 711, 0, 0,
	0, 0, 0, 0, 719, 0, 0, 1199, 1200, 1201,
	712, 1198, 1195, 1196, 1197, 1190, 1191, 1192, 1193, 1194,
	0, 0, 0, 0, 0, 0, 0, 0, 885, 0,
	0, 718, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1208, 0, 0, 0, 0, 0,
	0, 0, 692, 0, 724, 0, 0, 0, 963, 0,
	1203, 0, 0, 0, 0, 0, 713, 722, 0, 0,
	0, 0, 0, 0, 0, 721, 289, 719, 0, 0,
	0, 0, 0, 712, 0, 0, 0, 0, 0, 1270,
	0, 796, 0, 673, 0, 0, 1276, 0, 0, 0,
	0, 0, 0, 0, 718, 0, 0, 289, 0, 0,
	289, 0, 0, 0, 0, 0, 1204, 0, 1291, 0,
	0, 1125, 0, 0, 720, 0, 708, 709, 710, 0,
	707, 704, 705, 706, 699, 700, 701, 702, 703, 713,
	0, 0, 0, 0, 0, 0, 0, 1481, 721, 0,
	269, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1333, 0, 0, 0, 1199, 1200, 1201, 0,
	1198, 1195, 1196, 1197, 1190, 1191, 1192, 1193, 1194, 0,
	0, 0, 0, 0, 0, 0, 0, 720, 0, 708,
	709, 710, 0, 707, 704, 705, 706, 699, 700, 701,
	702, 703, 29, 696, 0, 714, 715, 716, 0, 0,
	1229, 1127, 0, 0, 0, 717, 0, 0, 0, 0,
	0, 698, 0, 723, 1384, 1385, 796, 0, 0, 0,
	0, 0, 692, 692, 0, 0, 0, 0, 1409, 0,
	1410, 697, 289, 1412, 1413, 1414, 0, 711, 0, 0,
	0, 0, 0, 0, 0, 0, 1423, 0, 796, 1423,
	0, 0, 0, 0, 0, 0, 289, 289, 0, 0,
	289, 0, 0, 0, 963, 0, 692, 1125, 696, 0,
	714, 715, 716, 0, 0, 0, 0, 0, 733, 0,
	717, 0, 0, 0, 0, 0, 698, 0, 723, 0,
	0, 0, 0, 0, 724, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 697, 722, 1469, 0,
	0, 0, 711, 0, 0, 0, 0, 719, 0, 0,
	0, 0, 0, 712, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 733, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 718, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 796, 0, 1487, 0, 90, 0, 0, 0, 724,
	0, 696, 289, 714, 715, 716, 0, 0, 0, 713,
	0, 0, 722, 717, 0, 0, 0, 0, 721, 698,
	1423, 723, 719, 0, 0, 0, 0, 0, 712, 0,
	0, 0, 0, 1423, 0, 0, 289, 0, 1528, 697,
	0, 0, 0, 0, 0, 711, 289, 0, 692, 718,
	0, 0, 1189, 0, 1205, 1206, 1207, 885, 0, 0,
	885, 0, 0, 0, 1451, 0, 0, 720, 0, 708,
	709, 710, 0, 707, 704, 705, 706, 699, 700, 701,
	702, 703, 0, 696, 713, 714, 715, 716, 0, 0,
	1228, 0, 0, 721, 0, 717, 1202, 0, 0, 0,
	0, 698, 724, 723, 0, 0, 0, 0, 0, 0,
	1560, 1561, 0, 0, 1565, 722, 0, 0, 0, 1423,
	0, 697, 90, 0, 0, 719, 0, 711, 0, 0,
	0, 712, 0, 0, 692, 0, 0, 0, 0, 0,
	0, 0, 720, 0, 708, 709, 710, 0, 707, 704,
	705, 706, 699, 700, 701, 702, 703, 0, 0, 692,
	692, 289, 0, 90, 0, 1227, 1208, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1423,
	1528, 0, 1203, 0, 724, 0, 0, 713, 0, 0,
	0, 0, 0, 0, 0, 0, 721, 722, 0, 0,
	289, 0, 0, 0, 0, 0, 0, 719, 0, 29,
	0, 0, 0, 712, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 885, 885, 0, 0,
	885, 0, 0, 0, 718, 0, 0, 0, 1204, 0,
	0, 0, 0, 0, 0, 720, 0, 708, 709, 710,
	0, 707, 704, 705, 706, 699, 700, 701, 702, 703,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 713,
	0, 0, 0, 0, 0, 0, 0, 0, 721, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1199, 1200,
	1201, 0, 1198, 1195, 1196, 1197, 1190, 1191, 1192, 1193,
	1194, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 720, 0, 708,
	709, 710, 0, 707, 704, 705, 706, 699, 700, 701,
	702, 703, 0, 0, 0, 0, 0, 1587, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1512, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 573, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 885, 94, 95, 578,
	96, 579, 580, 581, 582, 583, 584, 585, 586, 97,
	98, 190, 191, 192, 99, 193, 194, 587, 100, 195,
	196, 101, 588, 589, 197, 198, 199, 590, 200, 591,
	318, 592, 102, 103, 104, 0, 105, 593, 106, 594,
	319, 107, 108, 595, 596, 597, 598, 599, 600, 109,
	110, 111, 112, 201, 113, 202, 203, 601, 602, 114,
	603, 604, 605, 115, 116, 606, 607, 733, 608, 204,
	117, 205, 609, 610, 118, 119, 206, 120, 611, 612,
	613, 320, 614, 121, 207, 615, 208, 616, 122, 123,
	209, 210, 617, 618, 124, 619, 126, 321, 125, 211,
	212, 213, 620, 214, 621, 322, 127, 323, 128, 129,
	622, 623, 215, 324, 130, 325, 624, 275, 625, 626,
	131, 0, 132, 133, 134, 135, 276, 326, 136, 137,
	138, 627, 139, 628, 216, 140, 217, 141, 142, 629,
	630, 631, 632, 633, 143, 218, 327, 144, 328, 219,
	145, 146, 634, 220, 147, 221, 635, 148, 149, 150,
	222, 151, 152, 636, 154, 155, 153, 157, 156, 158,
	637, 159, 329, 160, 161, 223, 162, 0, 163, 164,
	638, 165, 277, 639, 166, 167, 330, 168, 224, 169,
	640, 170, 171, 173, 225, 172, 226, 641, 642, 174,
	175, 643, 279, 227, 644, 645, 278, 228, 229, 646,
	176, 177, 178, 179, 647, 648, 180, 181, 649, 650,
	182, 183, 184, 230, 231, 651, 185, 652, 653, 654,
	655, 186, 187, 188, 189, 0, 573, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 784, 94, 95,
	578, 96, 579, 580, 581, 582, 583, 584, 585, 586,
	97, 98, 190, 191, 192, 99, 193, 194, 587, 100,
	195, 196, 101, 588, 589, 197, 198, 199, 590, 200,
	591, 318, 592, 102, 103, 104, 0, 105, 593, 106,
	594, 319, 107, 108, 595, 596, 597, 598, 599, 600,
	109, 110, 111, 112, 201, 113, 202, 203, 601, 602,
	114, 603, 604, 605, 115, 116, 606, 607, 0, 608,
	204, 117, 205, 609, 610, 118, 119, 206, 120, 611,
	612, 613, 320, 614, 121, 207, 615, 208, 616, 122,
	123, 209, 210, 617, 618, 124, 619, 126, 321, 125,
	211, 212, 213, 620, 214, 621, 322, 127, 323, 128,
	129, 622, 623, 215, 324, 130, 325, 624, 275, 625,
	626, 131, 0, 132, 133, 134, 135, 276, 326, 136,
	137, 138, 627, 139, 628, 216, 140, 217, 141, 142,
	629, 630, 631, 632, 633, 143, 218, 327, 144, 328,
	219, 145, 146, 634, 220, 147, 221, 635, 148, 149,
	150, 222, 151, 152, 636, 154, 155, 153, 157, 156,
	158, 637, 159, 329, 160, 161, 223, 162, 0, 163,
	164, 638, 165, 277, 639, 166, 167, 330, 168, 224,
	169, 640, 170, 171, 173, 225, 172, 226, 641, 642,
	174, 175, 643, 279, 227, 644, 645, 278, 228, 229,
	646, 176, 177, 178, 179, 647, 648, 180, 181, 649,
	650, 182, 183, 184, 230, 231, 651, 185, 652, 653,
	654, 655, 186, 187, 188, 189, 430, 418, 419, 420,
	417, 406, 0, 0, 0, 0, 0, 0, 94, 95,
	981, 96, 0, 0, 0, 0, 412, 0, 0, 0,
	97, 98, 190, 459, 460, 99, 461, 462, 0, 100,
	195, 196, 101, 427, 445, 463, 464, 199, 0, 455,
	0, 438, 0, 102, 103, 104, 0, 105, 0, 106,
	0, 319, 107, 108, 0, 439, 441, 0, 440, 442,
	109, 110, 111, 112, 465, 113, 466, 467, 0, 0,
	114, 0, 982, 0, 458, 116, 0, 0, 0, 0,
	411, 117, 446, 425, 0, 118, 119, 468, 120, 0,
	0, 0, 320, 0, 121, 456, 0, 208, 0, 122,
	123, 452, 454, 0, 0, 124, 0, 126, 321, 125,
	469, 470, 471, 0, 437, 0, 322, 127, 323, 128,
	129, 0, 0, 457, 324, 130, 325, 0, 275, 0,
	0, 131, 0, 132, 133, 134, 135, 276, 326, 136,
	137, 138, 401, 139, 426, 453, 140, 472, 141, 142,
	0, 0, 0, 0, 0, 143, 218, 327, 144, 328,
	447, 145, 146, 0, 448, 147, 221, 0, 148, 149,
	150, 473, 151, 152, 0, 154, 155, 153, 157, 156,
	158, 0, 159, 329, 160, 161, 415, 162, 0, 163,
	164, 0, 165, 277, 443, 166, 167, 330, 168, 474,
	169, 0, 170, 171, 173, 225, 172, 449, 0, 0,
	174, 175, 0, 279, 475, 0, 0, 278, 450, 451,
	424, 176, 177, 178, 179, 0, 0, 180, 181, 444,
	0, 182, 183, 184, 230, 476, 980, 185, 0, 0,
	0, 0, 186, 187, 188, 189, 402, 0, 430, 418,
	419, 420, 417, 406, 0, 0, 398, 399, 983, 0,
	94, 95, 400, 96, 0, 407, 978, 0, 412, 0,
	0, 0, 97, 98, 190, 459, 460, 99, 461, 462,
	0, 100, 195, 196, 101, 427, 445, 463, 464, 199,
	0, 455, 0, 438, 0, 102, 103, 104, 0, 105,
	0, 106, 0, 319, 107, 108, 0, 439, 441, 0,
	440, 442, 109, 110, 111, 112, 465, 113, 466, 467,
	498, 0, 114, 0, 0, 0, 458, 116, 0, 0,
	0, 0, 411, 117, 446, 425, 0, 118, 119, 468,
	120, 0, 0, 0, 320, 0, 121, 456, 0, 208,
	0, 122, 123, 452, 454, 0, 0, 124, 0, 126,
	321, 125, 469, 470, 471, 0, 437, 0, 322, 127,
	323, 128, 129, 0, 0, 457, 324, 130, 325, 0,
	275, 0, 0, 131, 0, 132, 133, 134, 135, 276,
	326, 136, 137, 138, 401, 139, 426, 453, 140, 472,
	141, 142, 0, 0, 0, 0, 0, 143, 218, 327,
	144, 328, 447, 145, 146, 0, 448, 147, 221, 0,
	148, 149, 150, 473, 151, 152, 0, 154, 155, 153,
	157, 156, 158, 0, 159, 329, 160, 161, 415, 162,
	0, 163, 164, 48, 165, 277, 443, 166, 167, 330,
	168, 474, 169, 0, 170, 171, 173, 225, 172, 449,
	0, 50, 174, 175, 0, 279, 475, 0, 0, 278,
	450, 451, 424, 176, 177, 178, 179, 0, 0, 180,
	181, 444, 0, 182, 183, 184, 317, 476, 0, 185,
	0, 0, 0, 46, 186, 187, 188, 189, 402, 47,
	430, 418, 419, 420, 417, 406, 0, 0, 398, 399,
	0, 0, 94, 95, 400, 96, 0, 407, 0, 0,
	412, 0, 0, 0, 97, 98, 190, 459, 460, 99,
	461, 462, 0, 100, 195, 196, 101, 427, 445, 463,
	464, 199, 0, 455, 0, 438, 0, 102, 103, 104,
	0, 105, 0, 106, 0, 319, 107, 108, 0, 439,
	441, 0, 440, 442, 109, 110, 111, 112, 465, 113,
	466, 467, 0, 0, 114, 0, 0, 0, 458, 116,
	0, 0, 0, 0, 411, 117, 446, 425, 0, 118,
	119, 468, 120, 0, 0, 0, 320, 0, 121, 456,
	0, 208, 0, 122, 123, 452, 454, 0, 0, 124,
	0, 126, 321, 125, 469, 470, 471, 0, 437, 0,
	322, 127, 323, 128, 129, 0, 0, 457, 324, 130,
	325, 0, 275, 0, 0, 131, 0, 132, 133, 134,
	135, 276, 326, 136, 137, 138, 401, 139, 426, 453,
	140, 472, 141, 142, 0, 0, 0, 0, 0, 143,
	218, 327, 144, 328, 447, 145, 146, 0, 448, 147,
	221, 0, 148, 149, 150, 473, 151, 152, 0, 154,
	155, 153, 157, 156, 158, 0, 159, 329, 160, 161,
	415, 162, 0, 163, 164, 48, 165, 277, 443, 166,
	167, 330, 168, 474, 169, 0, 170, 171, 173, 225,
	172, 449, 0, 50, 174, 175, 0, 279, 475, 0,
	0, 278, 450, 451, 424, 176, 177, 178, 179, 0,
	0, 180, 181, 444, 0, 182, 183, 184, 317, 476,
	0, 185, 0, 0, 0, 46, 186, 187, 188, 189,
	402, 47, 430, 418, 419, 420, 417, 406, 0, 0,
	398, 399, 0, 0, 94, 95, 400, 96, 0, 407,
	0, 0, 412, 0, 0, 0, 97, 98, 190, 459,
	460, 99, 461, 462, 1026, 100, 195, 196, 101, 427,
	445, 463, 464, 199, 0, 455, 0, 438, 0, 102,
	103, 104, 0, 105, 0, 106, 0, 319, 107, 108,
	0, 439, 441, 0, 440, 442, 109, 110, 111, 112,
	465, 113, 466, 467, 0, 0, 114, 0, 0, 0,
	458, 116, 0, 0, 0, 0, 411, 117, 446, 425,
	0, 118, 119, 468, 120, 0, 0, 1031, 320, 0,
	121, 456, 0, 208, 0, 122, 123, 452, 454, 0,
	0, 124, 0, 126, 321, 125, 469, 470, 471, 0,
	437, 0, 322, 127, 323, 128, 129, 0, 1027, 457,
	324, 130, 325, 0, 275, 0, 0, 131, 0, 132,
	133, 134, 135, 276, 326, 136, 137, 138, 401, 139,
	426, 453, 140, 472, 141, 142, 0, 0, 0, 0,
	0, 143, 218, 327, 144, 328, 447, 145, 146, 0,
	448, 147, 221, 0, 148, 149, 150, 473, 151, 152,
	0, 154, 155, 153, 157, 156, 158, 0, 159, 329,
	160, 161, 415, 162, 0, 163, 164, 0, 165, 277,
	443, 166, 167, 330, 168, 474, 169, 0, 170, 171,
	173, 225, 172, 449, 0, 0, 174, 175, 0, 279,
	475, 0, 1028, 278, 450, 451, 424, 176, 177, 178,
	179, 0, 0, 180, 181, 444, 0, 182, 183, 184,
	230, 476, 0, 185, 0, 0, 0, 0, 186, 187,
	188, 189, 402, 0, 430, 418, 419, 420, 417, 406,
	0, 0, 398, 399, 0, 0, 94, 95, 400, 96,
	0, 407, 0, 0, 412, 0, 0, 0, 97, 98,
	190, 459, 460, 99, 461, 462, 0, 100, 195, 196,
	101, 427, 445, 463, 464, 199, 0, 455, 0, 438,
	0, 102, 103, 104, 0, 105, 0, 106, 0, 319,
	107, 108, 0, 439, 441, 0, 440, 442, 109, 110,
	111, 112, 465, 113, 466, 467, 0, 0, 114, 0,
	0, 0, 458, 116, 0, 0, 0, 0, 411, 117,
	446, 425, 0, 118, 119, 468, 120, 0, 0, 0,
	320, 0, 121, 456, 0, 208, 0, 122, 123, 452,
	454, 0, 0, 124, 0, 126, 321, 125, 469, 470,
	471, 0, 437, 0, 322, 127, 323, 128, 129, 0,
	0, 457, 324, 130, 325, 0, 275, 0, 0, 131,
	0, 132, 133, 134, 135, 276, 326, 136, 137, 138,
	401, 139, 426, 453, 140, 472, 141, 142, 0, 0,
	0, 0, 0, 143, 218, 327, 144, 328, 447, 145,
	146, 0, 448, 147, 221, 0, 148, 149, 150, 473,
	151, 152, 0, 154, 155, 153, 157, 156, 158, 0,
	159, 329, 160, 161, 415, 162, 0, 163, 164, 0,
	165, 277, 443, 166, 167, 330, 168, 474, 169, 0,
	170, 171, 173, 225, 172, 449, 0, 0, 174, 175,
	0, 279, 475, 0, 0, 278, 450, 451, 424, 176,
	177, 178, 179, 0, 0, 180, 181, 444, 0, 182,
	183, 184, 230, 476, 0, 185, 0, 0, 0, 0,
	186, 187, 188, 189, 402, 0, 430, 418, 419, 420,
	417, 406, 0, 0, 398, 399, 0, 0, 94, 95,
	400, 96, 0, 407, 1367, 0, 412, 0, 0, 0,
	97, 98, 190, 459, 460, 99, 461, 462, 0, 100,
	195, 196, 101, 427, 445, 463, 464, 199, 0, 455,
	0, 438, 0, 102, 103, 104, 0, 105, 0, 106,
	0, 319, 107, 108, 0, 439, 441, 0, 440, 442,
	109, 110, 111, 112, 465, 113, 466, 467, 0, 0,
	114, 0, 0, 0, 458, 116, 0, 0, 0, 0,
	411, 117, 446, 425, 0, 118, 119, 468, 120, 0,
	0, 0, 320, 0, 121, 456, 0, 208, 0, 122,
	123, 452, 454, 0, 0, 124, 0, 126, 321, 125,
	469, 470, 471, 0, 437, 0, 322, 127, 323, 128,
	129, 0, 0, 457, 324, 130, 325, 0, 275, 0,
	0, 131, 0, 132, 133, 134, 135, 276, 326, 136,
	137, 138, 401, 139, 426, 453, 140, 472, 141, 142,
	0, 0, 0, 0, 0, 143, 218, 327, 144, 328,
	447, 145, 146, 0, 448, 147, 221, 0, 148, 149,
	150, 473, 151, 152, 0, 154, 155, 153, 157, 156,
	158, 0, 159, 329, 160, 161, 415, 162, 0, 163,
	164, 0, 165, 277, 443, 166, 167, 330, 168, 474,
	169, 0, 170, 171, 173, 225, 172, 449, 0, 0,
	174, 175, 0, 279, 475, 0, 0, 278, 450, 451,
	424, 176, 177, 178, 179, 0, 0, 180, 181, 444,
	0, 182, 183, 184, 230, 476, 0, 185, 0, 0,
	0, 0, 186, 187, 188, 189, 402, 0, 430, 418,
	419, 420, 417, 406, 0, 0, 398, 399, 0, 0,
	94, 95, 400, 96, 0, 407, 1310, 0, 412, 0,
	0, 0, 97, 98, 190, 459, 460, 99, 461, 462,
	0, 100, 195, 196, 101, 427, 445, 463, 464, 199,
	0, 455, 0, 438, 0, 102, 103, 104, 0, 105,
	0, 106, 0, 319, 107, 108, 0, 439, 441, 0,
	440, 442, 109, 110, 111, 112, 465, 113, 466, 467,
	0, 0, 114, 0, 0, 0, 458, 116, 0, 0,
	0, 0, 411, 117, 446, 425, 0, 118, 119, 468,
	120, 0, 0, 0, 320, 0, 121, 456, 0, 208,
	0, 122, 123, 452, 454, 0, 0, 124, 0, 126,
	321, 125, 469, 470, 471, 0, 437, 0, 322, 127,
	323, 128, 129, 0, 0, 457, 324, 130, 325, 0,
	275, 0, 0, 131, 0, 132, 133, 134, 135, 276,
	326, 136, 137, 138, 401, 139, 426, 453, 140, 472,
	141, 142, 0, 0, 0, 0, 0, 143, 218, 327,
	144, 328, 447, 145, 146, 0, 448, 147, 221, 0,
	148, 149, 150, 473, 151, 152, 0, 154, 155, 153,
	157, 156, 158, 0, 159, 329, 160, 161, 415, 162,
	0, 163, 164, 0, 165, 277, 443, 166, 167, 330,
	168, 474, 169, 0, 170, 171, 173, 225, 172, 449,
	0, 0, 174, 175, 0, 279, 475, 0, 0, 278,
	450, 451, 424, 176, 177, 178, 179, 0, 0, 180,
	181, 444, 0, 182, 183, 184, 230, 476, 0, 185,
	0, 0, 0, 0, 186, 187, 188, 189, 402, 0,
	430, 418, 419, 420, 417, 406, 0, 0, 398, 399,
	0, 0, 94, 95, 400, 96, 0, 407, 977, 0,
	412, 0, 0, 0, 97, 98, 190, 459, 460, 99,
	461, 462, 0, 100, 195, 196, 101, 427, 445, 463,
	464, 199, 0, 455, 0, 438, 0, 102, 103, 104,
	0, 105, 0, 106, 0, 319, 107, 108, 0, 439,
	441, 0, 440, 442, 109, 110, 111, 112, 465, 113,
	466, 467, 0, 0, 114, 0, 0, 0, 458, 116,
	0, 0, 0, 0, 411, 117, 446, 425, 0, 118,
	119, 468, 120, 0, 0, 0, 320, 0, 121, 456,
	0, 208, 0, 122, 123, 452, 454, 0, 0, 124,
	0, 126, 321, 125, 469, 470, 471, 0, 437, 0,
	322, 127, 323, 128, 129, 0, 0, 457, 324, 130,
	325, 0, 275, 0, 0, 131, 0, 132, 133, 134,
	135, 276, 326, 136, 137, 138, 401, 139, 426, 453,
	140, 472, 141, 142, 0, 0, 0, 0, 0, 143,
	218, 327, 144, 328, 447, 145, 146, 0, 448, 147,
	221, 0, 148, 149, 150, 473, 151, 152, 0, 154,
	155, 153, 157, 156, 158, 0, 159, 329, 160, 161,
	415, 162, 0, 163, 164, 0, 165, 277, 443, 166,
	167, 330, 168, 474, 169, 0, 170, 171, 173, 225,
	172, 449, 0, 0, 174, 175, 0, 279, 475, 0,
	0, 278, 450, 451, 424, 176, 177, 178, 179, 0,
	0, 180, 181, 444, 0, 182, 183, 184, 230, 476,
	0, 185, 0, 0, 0, 0, 186, 187, 188, 189,
	402, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	398, 399, 0, 0, 0, 0, 400, 739, 973, 407,
	430, 418, 419, 420, 417, 406, 0, 0, 0, 0,
	0, 0, 94, 95, 0, 96, 0, 0, 0, 0,
	412, 0, 0, 0, 97, 98, 190, 459, 460, 99,
	461, 462, 0, 100, 195, 196, 101, 427, 445, 463,
	464, 199, 0, 455, 0, 438, 0, 102, 103, 104,
	0, 105, 0, 106, 0, 319, 107, 108, 0, 439,
	441, 0, 440, 442, 109, 110, 111, 112, 465, 113,
	466, 467, 0, 0, 114, 0, 0, 0, 458, 116,
	0, 0, 0, 0, 411, 117, 446, 425, 0, 118,
	119, 468, 120, 0, 0, 0, 320, 0, 121, 456,
	0, 208, 0, 122, 123, 452, 454, 0, 0, 124,
	0, 126, 321, 125, 469, 470, 471, 0, 437, 0,
	322, 127, 323, 128, 129, 0, 0, 457, 324, 130,
	325, 0, 275, 0, 0, 131, 0, 132, 133, 134,
	135, 276, 326, 136, 137, 138, 401, 139, 426, 453,
	140, 472, 141, 142, 0, 0, 0, 0, 0, 143,
	218, 327, 144, 328, 447, 145, 146, 0, 448, 147,
	221, 0, 148, 149, 150, 473, 151, 152, 0, 154,
	155, 153, 157, 156, 158, 0, 159, 329, 160, 161,
	415, 162, 0, 163, 164, 0, 165, 277, 443, 166,
	167, 330, 168, 474, 169, 0, 170, 171, 173, 225,
	172, 449, 0, 0, 174, 175, 0, 279, 475, 0,
	0, 278, 450, 451, 424, 176, 177, 178, 179, 0,
	0, 180, 181, 444, 0, 182, 183, 184, 230, 476,
	1316, 185, 0, 0, 0, 0, 186, 187, 188, 189,
	402, 0, 430, 418, 419, 420, 417, 406, 0, 0,
	398, 399, 0, 0, 94, 95, 400, 96, 0, 407,
	0, 0, 412, 0, 0, 0, 97, 98, 190, 459,
	460, 99, 461, 462, 0, 100, 195, 196, 101, 427,
	445, 463, 464, 199, 0, 455, 0, 438, 0, 102,
	103, 104, 0, 105, 0, 106, 0, 319, 107, 108,
	0, 439, 441, 0, 440, 442, 109, 110, 111, 112,
	465, 113, 466, 467, 498, 0, 114, 0, 0, 0,
	458, 116, 0, 0, 0, 0, 411, 117, 446, 425,
	0, 118, 119, 468, 120, 0, 0, 0, 320, 0,
	121, 456, 0, 208, 0, 122, 123, 452, 454, 0,
	0, 124, 0, 126, 321, 125, 469, 470, 471, 0,
	437, 0, 322, 127, 323, 128, 129, 0, 0, 457,
	324, 130, 325, 0, 275, 0, 0, 131, 0, 132,
	133, 134, 135, 276, 326, 136, 137, 138, 401, 139,
	426, 453, 140, 472, 141, 142, 0, 0, 0, 0,
	0, 143, 218, 327, 144, 328, 447, 145, 146, 0,
	448, 147, 221, 0, 148, 149, 150, 473, 151, 152,
	0, 154, 155, 153, 157, 156, 158, 0, 159, 329,
	160, 161, 415, 162, 0, 163, 164, 0, 165, 277,
	443, 166, 167, 330, 168, 474, 169, 0, 170, 171,
	173, 225, 172, 449, 0, 0, 174, 175, 0, 279,
	475, 0, 0, 278, 450, 451, 424, 176, 177, 178,
	179, 0, 0, 180, 181, 444, 0, 182, 183, 184,
	230, 476, 0, 185, 0, 0, 0, 0, 186, 187,
	188, 189, 402, 0, 430, 418, 419, 420, 417, 406,
	0, 0, 398, 399, 0, 0, 94, 95, 400, 96,
	0, 407, 0, 0, 412, 0, 0, 0, 97, 98,
	190, 459, 460, 99, 461, 462, 0, 100, 195, 196,
	101, 427, 445, 463, 464, 199, 0, 455, 0, 438,
	0, 102, 103, 104, 0, 105, 0, 106, 0, 319,
	107, 108, 0, 439, 441, 0, 440, 442, 109, 110,
	111, 112, 465, 113, 466, 467, 0, 0, 114, 0,
	0, 0, 458, 116, 0, 0, 0, 0, 411, 117,
	446, 425, 0, 118, 119, 468, 120, 0, 0, 0,
	320, 0, 121, 456, 0, 208, 0, 122, 123, 452,
	454, 0, 0, 124, 0, 126, 321, 125, 469, 470,
	471, 0, 437, 0, 322, 127, 323, 128, 129, 0,
	0, 457, 324, 130, 325, 0, 275, 0, 0, 131,
	0, 132, 133, 134, 135, 276, 326, 136, 137, 138,
	401, 139, 426, 453, 140, 472, 141, 142, 0, 0,
	0, 0, 0, 143, 218, 327, 144, 328, 447, 145,
	146, 0, 448, 147, 221, 0, 148, 149, 150, 473,
	151, 152, 0, 154, 155, 153, 157, 156, 158, 0,
	159, 329, 160, 161, 415, 162, 0, 163, 164, 0,
	165, 277, 443, 166, 167, 330, 168, 474, 169, 0,
	170, 171, 173, 225, 172, 449, 0, 0, 174, 175,
	0, 279, 475, 0, 0, 278, 450, 451, 424, 176,
	177, 178, 179, 0, 0, 180, 181, 444, 0, 182,
	183, 184, 230, 476, 0, 185, 0, 0, 0, 0,
	186, 187, 188, 189, 402, 0, 430, 418, 419, 420,
	417, 406, 0, 0, 398, 399, 396, 0, 94, 95,
	400, 96, 0, 407, 0, 0, 412, 0, 0, 0,
	97, 98, 190, 459, 460, 99, 461, 462, 0, 100,
	195, 196, 101, 427, 445, 463, 464, 199, 0, 455,
	0, 438, 0, 102, 103, 104, 0, 105, 0, 106,
	0, 319, 107, 108, 0, 439, 441, 0, 440, 442,
	109, 110, 111, 112, 465, 113, 466, 467, 0, 0,
	114, 0, 0, 0, 458, 116, 0, 0, 0, 0,
	411, 117, 446, 425, 0, 118, 119, 468, 120, 0,
	0, 1031, 320, 0, 121, 456, 0, 208, 0, 122,
	123, 452, 454, 0, 0, 124, 0, 126, 321, 125,
	469, 470, 471, 0, 437, 0, 322, 127, 323, 128,
	129, 0, 0, 457, 324, 130, 325, 0, 275, 0,
	0, 131, 0, 132, 133, 134, 135, 276, 326, 136,
	137, 138, 401, 139, 426, 453, 140, 472, 141, 142,
	0, 0, 0, 0, 0, 143, 218, 327, 144, 328,
	447, 145, 146, 0, 448, 147, 221, 0, 148, 149,
	150, 473, 151, 152, 0, 154, 155, 153, 157, 156,
	158, 0, 159, 329, 160, 161, 415, 162, 0, 163,
	164, 0, 165, 277, 443, 166, 167, 330, 168, 474,
	169, 0, 170, 171, 173, 225, 172, 449, 0, 0,
	174, 175, 0, 279, 475, 0, 0, 278, 450, 451,
	424, 176, 177, 178, 179, 0, 0, 180, 181, 444,
	0, 182, 183, 184, 230, 476, 0, 185, 0, 0,
	0, 0, 186, 187, 188, 189, 402, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 398, 399, 0, 0,
	0, 0, 400, 0, 0, 407, 430, 418, 419, 420,
	417, 406, 0, 0, 0, 0, 0, 0, 94, 95,
	680, 96, 0, 0, 0, 0, 412, 0, 0, 0,
	97, 98, 190, 459, 460, 99, 461, 462, 0, 100,
	195, 196, 101, 427, 445, 463, 464, 199, 0, 455,
	0, 438, 0, 102, 103, 104, 0, 105, 0, 106,
	0, 319, 107, 108, 0, 439, 441, 0, 440, 442,
	109, 110, 111, 112, 465, 113, 466, 467, 0, 0,
	114, 0, 0, 0, 458, 116, 0, 0, 0, 0,
	411, 117, 446, 425, 0, 118, 119, 468, 120, 0,
	0, 0, 320, 0, 121, 456, 0, 208, 0, 122,
	123, 452, 454, 0, 0, 124, 0, 126, 321, 125,
	469, 470, 471, 0, 437, 0, 322, 127, 323, 128,
	129, 0, 0, 457, 324, 130, 325, 0, 275, 0,
	0, 131, 0, 132, 133, 134, 135, 276, 326, 136,
	137, 138, 401, 139, 426, 453, 140, 472, 141, 142,
	0, 0, 0, 0, 0, 143, 218, 327, 144, 328,
	447, 145, 146, 0, 448, 147, 221, 0, 148, 149,
	150, 473, 151, 152, 0, 154, 155, 153, 157, 156,
	158, 0, 159, 329, 160, 161, 415, 162, 0, 163,
	164, 0, 165, 277, 443, 166, 167, 330, 168, 474,
	169, 0, 170, 171, 173, 225, 172, 449, 0, 0,
	174, 175, 0, 279, 475, 0, 0, 278, 450, 451,
	424, 176, 177, 178, 179, 0, 0, 180, 181, 444,
	0, 182, 183, 184, 230, 476, 0, 185, 0, 0,
	0, 0, 186, 187, 188, 189, 402, 0, 430, 418,
	419, 420, 417, 406, 0, 0, 398, 399, 0, 0,
	94, 95, 400, 96, 0, 407, 0, 0, 412, 0,
	0, 0, 97, 98, 190, 459, 460, 99, 461, 462,
	0, 100, 195, 196, 101, 427, 445, 463, 464, 199,
	0, 455, 0, 438, 0, 102, 103, 104, 0, 105,
	0, 106, 0, 319, 107, 1630, 0, 439, 441, 0,
	440, 442, 109, 110, 111, 112, 465, 113, 466, 467,
	0, 0, 114, 0, 0, 0, 458, 116, 0, 0,
	0, 0, 411, 117, 446, 425, 0, 118, 119, 468,
	120, 0, 0, 0, 320, 0, 121, 456, 0, 208,
	0, 122, 123, 452, 454, 0, 0, 124, 0, 126,
	321, 125, 469, 470, 471, 0, 437, 0, 322, 127,
	323, 128, 129, 0, 0, 457, 324, 130, 325, 0,
	275, 0, 0, 131, 0, 132, 133, 134, 135, 276,
	326, 136, 137, 138, 401, 139, 426, 453, 140, 472,
	141, 142, 0, 0, 0, 0, 0, 143, 218, 327,
	144, 328, 447, 145, 146, 0, 448, 147, 221, 0,
	148, 149, 150, 473, 151, 152, 0, 154, 155, 153,
	157, 156, 158, 0, 159, 329, 160, 161, 415, 162,
	0, 163, 164, 0, 165, 277, 443, 166, 167, 330,
	168, 474, 169, 0, 170, 171, 173, 225, 172, 449,
	0, 0, 174, 175, 0, 279, 475, 0, 0, 278,
	450, 451, 424, 176, 177, 1629, 179, 0, 0, 180,
	181, 444, 0, 182, 183, 184, 230, 476, 0, 185,
	0, 0, 0, 0, 186, 187, 188, 189, 402, 0,
	430, 418, 419, 420, 417, 406, 0, 0, 398, 399,
	0, 0, 94, 95, 400, 96, 0, 407, 0, 0,
	412, 0, 0, 0, 97, 98, 1628, 459, 460, 99,
	461, 462, 0, 100, 195, 196, 101, 427, 445, 463,
	464, 199, 0, 455, 0, 438, 0, 102, 103, 104,
	0, 105, 0, 106, 0, 319, 107, 1630, 0, 439,
	441, 0, 440, 442, 109, 110, 111, 112, 465, 113,
	466, 467, 0, 0, 114, 0, 0, 0, 458, 116,
	0, 0, 0, 0, 411, 117, 446, 425, 0, 118,
	119, 468, 120, 0, 0, 0, 320, 0, 121, 456,
	0, 208, 0, 122, 123, 452, 454, 0, 0, 124,
	0, 126, 321, 125, 469, 470, 471, 0, 437, 0,
	322, 127, 323, 128, 129, 0, 0, 457, 324, 130,
	325, 0, 275, 0, 0, 131, 0, 132, 133, 134,
	135, 276, 326, 136, 137, 138, 401, 139, 426, 453,
	140, 472, 141, 142, 0, 0, 0, 0, 0, 143,
	218, 327, 144, 328, 447, 145, 146, 0, 448, 147,
	221, 0, 148, 149, 150, 473, 151, 152, 0, 154,
	155, 153, 157, 156, 158, 0, 159, 329, 160, 161,
	415, 162, 0, 163, 164, 0, 165, 277, 443, 166,
	167, 330, 168, 474, 169, 0, 170, 171, 173, 225,
	172, 449, 0, 0, 174, 175, 0, 279, 475, 0,
	0, 278, 450, 451, 424, 176, 177, 1629, 179, 0,
	0, 180, 181, 444, 0, 182, 183, 184, 230, 476,
	0, 185, 0, 0, 0, 0, 186, 187, 188, 189,
	402, 0, 430, 418, 419, 420, 417, 406, 0, 0,
	398, 399, 0, 0, 94, 95, 400, 96, 0, 407,
	0, 0, 412, 0, 0, 0, 97, 98, 190, 459,
	460, 99, 461, 462, 0, 100, 195, 196, 101, 427,
	445, 463, 464, 199, 0, 455, 0, 438, 0, 102,
	103, 104, 0, 105, 0, 106, 0, 319, 107, 108,
	0, 439, 441, 0, 440, 442, 109, 110, 111, 112,
	465, 113, 466, 467, 0, 0, 114, 0, 0, 0,
	458, 116, 0, 0, 0, 0, 411, 117, 446, 425,
	0, 118, 119, 468, 120, 0, 0, 0, 320, 0,
	121, 456, 0, 208, 0, 122, 123, 452, 454, 0,
	0, 124, 0, 126, 321, 125, 469, 470, 471, 0,
	437, 0, 322, 127, 323, 128, 129, 0, 0, 457,
	324, 130, 325, 0, 275, 0, 0, 131, 0, 132,
	133, 134, 135, 276, 326, 136, 137, 138, 401, 139,
	426, 453, 140, 472, 141, 142, 0, 0, 0, 0,
	0, 143, 218, 327, 144, 328, 447, 145, 146, 0,
	448, 147, 221, 0, 148, 149, 150, 473, 151, 152,
	0, 154, 155, 153, 157, 156, 158, 0, 159, 329,
	160, 161, 415, 162, 0, 163, 164, 0, 165, 277,
	443, 166, 167, 330, 168, 474, 169, 0, 170, 171,
	173, 225, 172, 449, 0, 0, 174, 175, 0, 279,
	475, 0, 0, 278, 450, 451, 424, 176, 177, 178,
	179, 0, 0, 180, 181, 444, 0, 182, 183, 184,
	230, 476, 0, 185, 0, 0, 0, 0, 186, 187,
	188, 189, 402, 0, 430, 418, 419, 420, 417, 406,
	0, 0, 398, 399, 0, 0, 94, 95, 400, 96,
	0, 407, 0, 0, 412, 0, 0, 0, 97, 98,
	190, 459, 460, 99, 461, 462, 0, 100, 195, 196,
	101, 427, 445, 463, 464, 199, 0, 455, 0, 438,
	0, 102, 103, 104, 0, 105, 0, 106, 0, 319,
	107, 108, 0, 439, 441, 0, 440, 442, 109, 110,
	111, 112, 465, 113, 466, 467, 0, 0, 114, 0,
	0, 0, 458, 116, 0, 0, 0, 0, 411, 117,
	446, 425, 0, 118, 119, 468, 120, 0, 0, 0,
	320, 0, 121, 456, 0, 208, 0, 122, 123, 452,
	454, 0, 0, 124, 0, 126, 321, 125, 469, 470,
	471, 0, 437, 0, 322, 127, 323, 128, 129, 0,
	0, 457, 324, 130, 325, 0, 275, 0, 0, 131,
	0, 132, 133, 134, 135, 276, 326, 136, 137, 138,
	0, 139, 426, 453, 140, 472, 141, 142, 0, 0,
	0, 0, 0, 143, 218, 327, 144, 328, 447, 145,
	146, 0, 448, 147, 221, 0, 148, 149, 150, 473,
	151, 152, 0, 154, 155, 153, 157, 156, 158, 0,
	159, 329, 160, 161, 1021, 162, 0, 163, 164, 0,
	165, 277, 443, 166, 167, 330, 168, 474, 169, 0,
	170, 171, 173, 225, 172, 449, 0, 0, 174, 175,
	0, 279, 475, 0, 0, 278, 450, 451, 424, 176,
	177, 178, 179, 0, 0, 180, 181, 444, 0, 182,
	183, 184, 230, 476, 0, 185, 0, 0, 0, 0,
	186, 187, 188, 189, 430, 418, 419, 420, 417, 406,
	0, 0, 0, 0, 1017, 1018, 94, 95, 0, 96,
	1019, 0, 0, 1020, 412, 0, 0, 0, 97, 98,
	0, 459, 460, 99, 461, 462, 0, 100, 195, 196,
	101, 427, 445, 463, 464, 199, 0, 455, 0, 438,
	0, 102, 103, 104, 0, 105, 0, 106, 0, 319,
	107, 1630, 0, 439, 441, 0, 440, 442, 109, 110,
	111, 112, 465, 113, 466, 467, 0, 0, 114, 0,
	0, 0, 458, 116, 0, 0, 0, 0, 411, 117,
	446, 425, 0, 118, 119, 468, 120, 0, 0, 0,
	320, 0, 121, 456, 0, 208, 0, 122, 123, 452,
	454, 0, 0, 124, 0, 126, 321, 125, 469, 470,
	471, 0, 437, 0, 0, 127, 323, 128, 129, 0,
	0, 457, 324, 130, 0, 0, 275, 0, 0, 131,
	0, 132, 133, 134, 135, 276, 326, 136, 137, 138,
	401, 139, 426, 453, 140, 472, 141, 142, 0, 0,
	0, 0, 0, 143, 218, 327, 144, 328, 447, 145,
	146, 0, 448, 147, 221, 0, 148, 149, 150, 473,
	151, 152, 0, 154, 155, 153, 157, 156, 158, 0,
	159, 329, 160, 161, 415, 162, 0, 163, 164, 0,
	165, 277, 443, 166, 167, 0, 168, 474, 169, 0,
	170, 171, 173, 225, 172, 449, 0, 0, 174, 175,
	0, 279, 475, 0, 0, 278, 450, 451, 424, 176,
	177, 1629, 179, 0, 0, 180, 181, 444, 0, 182,
	183, 184, 230, 476, 0, 185, 0, 0, 0, 0,
	186, 187, 188, 189, 430, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 398, 399, 94, 95, 0, 96,
	400, 0, 0, 407, 0, 0, 0, 0, 97, 98,
	190, 191, 192, 99, 193, 194, 0, 100, 195, 196,
	101, 0, 445, 197, 198, 199, 0, 455, 0, 438,
	0, 102, 103, 104, 0, 105, 0, 106, 0, 319,
	107, 108, 0, 439, 441, 0, 440, 442, 109, 110,
	111, 112, 201, 113, 202, 203, 0, 0, 114, 0,
	0, 0, 115, 116, 0, 0, 0, 0, 204, 117,
	446, 0, 0, 118, 119, 206, 120, 0, 0, 0,
	320, 0, 121, 456, 0, 208, 0, 122, 123, 452,
	454, 0, 0, 124, 0, 126, 321, 125, 211, 212,
	213, 0, 214, 0, 322, 127, 323, 128, 129, 0,
	0, 457, 324, 130, 325, 0, 275, 0, 0, 131,
	0, 132, 133, 134, 135, 276, 326, 136, 137, 138,
	0, 139, 0, 453, 140, 217, 141, 142, 0, 0,
	0, 0, 0, 143, 218, 327, 144, 328, 447, 145,
	146, 0, 448, 147, 221, 0, 148, 149, 150, 222,
	151, 152, 0, 154, 155, 153, 157, 156, 158, 0,
	159, 329, 160, 161, 223, 162, 0, 163, 164, 0,
	165, 277, 443, 166, 167, 330, 168, 224, 169, 0,
	170, 171, 173, 225, 172, 449, 0, 0, 174, 175,
	0, 279, 227, 0, 0, 278, 450, 451, 0, 176,
	177, 178, 179, 0, 0, 180, 181, 444, 0, 182,
	183, 184, 230, 231, 0, 185, 0, 0, 0, 0,
	186, 187, 188, 189, 313, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 94, 95, 0, 96,
	0, 0, 0, 1425, 0, 0, 0, 0, 97, 98,
	190, 191, 192, 99, 193, 194, 0, 100, 195, 196,
	101, 0, 0, 197, 198, 199, 0, 200, 0, 318,
	0, 102, 103, 104, 0, 105, 0, 106, 0, 319,
	107, 108, 0, 0, 0, 0, 0, 0, 109, 110,
	111, 112, 201, 113, 202, 203, 0, 0, 114, 0,
	0, 0, 115, 116, 0, 0, 0, 0, 204, 117,
	205, 0, 0, 118, 119, 206, 120, 0, 0, 0,
	320, 0, 121, 207, 0, 208, 0, 122, 123, 209,
	210, 0, 0, 124, 0, 126, 321, 125, 211, 212,
	213, 0, 214, 0, 322, 127, 323, 128, 129, 0,
	0, 215, 324, 130, 325, 0, 275, 0, 0, 131,
	0, 132, 133, 134, 135, 276, 326, 136, 137, 138,
	0, 139, 0, 216, 140, 217, 141, 142, 0, 0,
	0, 0, 0, 143, 218, 327, 144, 328, 219, 145,
	146, 0, 220, 147, 221, 0, 148, 149, 150, 222,
	151, 152, 0, 154, 155, 153, 157, 156, 158, 0,
	159, 329, 160, 161, 223, 162, 0, 163, 164, 48,
	165, 277, 0, 166, 167, 330, 168, 224, 169, 0,
	170, 171, 173, 225, 172, 226, 0, 50, 174, 175,
	0, 279, 227, 0, 0, 278, 228, 229, 0, 176,
	177, 178, 179, 0, 0, 180, 181, 0, 0, 182,
	183, 184, 317, 231, 0, 185, 0, 0, 0, 46,
	186, 187, 188, 189, 0, 47, 313, 553, 557, 0,
	558, 548, 0, 0, 0, 0, 0, 0, 94, 95,
	0, 96, 0, 45, 0, 0, 0, 0, 0, 0,
	97, 98, 190, 191, 192, 99, 193, 194, 0, 100,
	195, 196, 101, 0, 0, 197, 198, 199, 0, 200,
	0, 318, 0, 102, 103, 104, 0, 105, 0, 106,
	0, 319, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 111, 112, 201, 113, 202, 203, 561, 0,
	114, 0, 0, 0, 115, 116, 0, 0, 0, 0,
	204, 117, 205, 550, 0, 118, 119, 206, 120, 0,
	0, 0, 320, 0, 121, 207, 0, 208, 0, 122,
	123, 209, 210, 0, 0, 124, 0, 126, 321, 125,
	211, 212, 213, 0, 214, 0, 322, 127, 323, 128,
	129, 0, 0, 215, 324, 130, 325, 0, 275, 0,
	0, 131, 0, 132, 133, 134, 135, 276, 326, 136,
	137, 138, 0, 139, 0, 216, 140, 217, 141, 142,
	0, 551, 0, 0, 0, 143, 218, 327, 144, 328,
	219, 145, 146, 0, 220, 147, 221, 0, 148, 149,
	150, 222, 151, 152, 0, 154, 155, 153, 157, 156,
	158, 0, 159, 329, 160, 161, 223, 162, 0, 163,
	164, 0, 165, 277, 0, 166, 167, 330, 168, 224,
	169, 0, 170, 171, 173, 225, 172, 226, 0, 0,
	174, 175, 0, 279, 227, 0, 0, 278, 228, 229,
	549, 176, 177, 178, 179, 0, 0, 180, 181, 0,
	0, 182, 183, 184, 230, 231, 0, 185, 0, 0,
	0, 0, 186, 187, 188, 189, 313, 553, 557, 0,
	558, 548, 0, 0, 0, 0, 559, 554, 94, 95,
	0, 96, 0, 0, 0, 0, 0, 0, 0, 0,
	97, 98, 190, 191, 192, 99, 193, 194, 0, 100,
	195, 196, 101, 0, 0, 197, 198, 199, 0, 200,
	0, 318, 0, 102, 103, 104, 0, 105, 0, 106,
	0, 319, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 111, 112, 201, 113, 202, 203, 544, 0,
	114, 0, 0, 0, 115, 116, 0, 0, 0, 0,
	204, 117, 205, 550, 0, 118, 119, 206, 120, 0,
	0, 0, 320, 0, 121, 207, 0, 208, 0, 122,
	123, 209, 210, 0, 0, 124, 0, 126, 321, 125,
	211, 212, 213, 0, 214, 0, 322, 127, 323, 128,
	129, 0, 0, 215, 324, 130, 325, 0, 275, 0,
	0, 131, 0, 132, 133, 134, 135, 276, 326, 136,
	137, 138, 0, 139, 0, 216, 140, 217, 141, 142,
	0, 551, 0, 0, 0, 143, 218, 327, 144, 328,
	219, 145, 146, 0, 220, 147, 221, 0, 148, 149,
	150, 222, 151, 152, 0, 154, 155, 153, 157, 156,
	158, 0, 159, 329, 160, 161, 223, 162, 0, 163,
	164, 0, 165, 277, 0, 166, 167, 330, 168, 224,
	169, 0, 170, 171, 173, 225, 172, 226, 0, 0,
	174, 175, 0, 279, 227, 0, 0, 278, 228, 229,
	549, 176, 177, 178, 179, 0, 0, 180, 181, 0,
	0, 182, 183, 184, 230, 231, 0, 185, 0, 0,
	0, 0, 186, 187, 188, 189, 313, 553, 557, 0,
	558, 548, 0, 0, 0, 0, 559, 554, 94, 95,
	0, 96, 0, 0, 0, 0, 0, 0, 0, 0,
	97, 98, 190, 191, 192, 99, 193, 194, 0, 100,
	195, 196, 101, 0, 0, 197, 198, 199, 0, 200,
	0, 318, 0, 102, 103, 104, 0, 105, 0, 106,
	0, 319, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 111, 112, 201, 113, 202, 203, 0, 0,
	114, 0, 0, 0, 115, 116, 0, 0, 0, 0,
	204, 117, 205, 550, 0, 118, 119, 206, 120, 0,
	0, 0, 320, 0, 121, 207, 0, 208, 0, 122,
	123, 209, 210, 0, 0, 124, 0, 126, 321, 125,
	211, 212, 213, 0, 214, 0, 322, 127, 323, 128,
	129, 0, 0, 215, 324, 130, 325, 0, 275, 0,
	0, 131, 0, 132, 133, 134, 135, 276, 326, 136,
	137, 138, 0, 139, 0, 216, 140, 217, 141, 142,
	0, 551, 0, 0, 0, 143, 218, 327, 144, 328,
	219, 145, 146, 0, 220, 147, 221, 0, 148, 149,
	150, 222, 151, 152, 0, 154, 155, 153, 157, 156,
	158, 0, 159, 329, 160, 161, 223, 162, 0, 163,
	164, 0, 165, 277, 0, 166, 167, 330, 168, 224,
	169, 0, 170, 171, 173, 225, 172, 226, 0, 0,
	174, 175, 0, 279, 227, 0, 0, 278, 228, 229,
	549, 176, 177, 178, 179, 0, 0, 180, 181, 0,
	0, 182, 183, 184, 230, 231, 91, 185, 0, 0,
	0, 0, 186, 187, 188, 189, 0, 0, 94, 95,
	0, 96, 0, 0, 0, 0, 559, 554, 0, 0,
	97, 98, 190, 191, 192, 99, 193, 194, 0, 100,
	195, 196, 101, 0, 0, 197, 198, 199, 0, 200,
	0, 0, 0, 102, 103, 104, 0, 105, 0, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 111, 112, 201, 113, 202, 203, 0, 0,
	114, 0, 0, 0, 115, 116, 0, 0, 0, 0,
	204, 117, 205, 0, 0, 118, 119, 206, 120, 0,
	0, 0, 0, 0, 121, 207, 0, 208, 0, 122,
	123, 209, 210, 0, 0, 124, 0, 126, 0, 125,
	211, 212, 213, 0, 214, 0, 0, 127, 0, 128,
	129, 0, 0, 215, 0, 130, 0, 0, 275, 0,
	0, 131, 0, 132, 133, 134, 135, 276, 0, 136,
	137, 138, 0, 139, 0, 216, 140, 217, 141, 142,
	0, 0, 288, 0, 0, 143, 218, 0, 144, 0,
	219, 145, 146, 0, 220, 147, 221, 0, 148, 149,
	150, 222, 151, 152, 0, 154, 155, 153, 157, 156,
	158, 0, 159, 0, 160, 161, 223, 162, 0, 163,
	164, 48, 165, 277, 0, 166, 167, 0, 168, 224,
	169, 0, 170, 171, 173, 225, 172, 226, 0, 50,
	174, 175, 0, 279, 227, 0, 0, 278, 228, 229,
	0, 176, 177, 178, 179, 0, 0, 180, 181, 0,
	0, 182, 183, 184, 317, 231, 0, 185, 0, 0,
	0, 46, 186, 187, 188, 189, 91, 47, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 94, 95,
	0, 96, 0, 0, 0, 887, 0, 0, 0, 0,
	97, 98, 190, 191, 192, 99, 193, 194, 0, 100,
	195, 196, 101, 0, 0, 197, 198, 199, 0, 200,
	0, 0, 0, 102, 103, 104, 0, 105, 0, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 111, 112, 201, 113, 202, 203, 0, 0,
	114, 0, 0, 0, 115, 116, 0, 0, 0, 0,
	204, 117, 205, 0, 0, 118, 119, 206, 120, 0,
	0, 0, 0, 0, 121, 207, 0, 208, 0, 122,
	123, 209, 210, 0, 0, 124, 0, 126, 0, 125,
	211, 212, 213, 0, 214, 0, 0, 127, 0, 128,
	129, 0, 0, 215, 0, 130, 0, 0, 275, 0,
	0, 131, 0, 132, 133, 134, 135, 276, 0, 136,
	137, 138, 0, 139, 0, 216, 140, 217, 141, 142,
	0, 0, 0, 0, 0, 143, 218, 0, 144, 0,
	219, 145, 146, 0, 220, 147, 221, 0, 148, 149,
	150, 222, 151, 152, 0, 154, 155, 153, 157, 156,
	158, 0, 159, 0, 160, 161, 223, 162, 0, 163,
	164, 48, 165, 277, 0, 166, 167, 0, 168, 224,
	169, 0, 170, 171, 173, 225, 172, 226, 0, 50,
	174, 175, 0, 279, 227, 0, 0, 278, 228, 229,
	0, 176, 177, 178, 179, 0, 0, 180, 181, 0,
	0, 182, 183, 184, 317, 231, 0, 185, 0, 0,
	0, 46, 186, 187, 188, 189, 91, 47, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 94, 95,
	0, 96, 0, 0, 0, 45, 0, 1124, 0, 0,
	97, 98, 190, 191, 192, 99, 193, 194, 0, 100,
	195, 196, 101, 0, 0, 197, 198, 199, 0, 200,
	0, 0, 0, 102, 103, 104, 0, 105, 0, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 111, 112, 201, 113, 202, 203, 0, 0,
	114, 0, 0, 0, 115, 116, 0, 0, 0, 0,
	204, 117, 205, 0, 0, 118, 119, 206, 120, 0,
	0, 0, 0, 0, 121, 207, 0, 208, 0, 122,
	123, 209, 210, 0, 0, 124, 0, 126, 0, 125,
	211, 212, 213, 0, 214, 0, 0, 127, 0, 128,
	129, 0, 0, 215, 0, 130, 0, 0, 275, 0,
	0, 131, 0, 132, 133, 134, 135, 276, 0, 136,
	137, 138, 0, 139, 0, 216, 140, 217, 141, 142,
	0, 0, 0, 0, 0, 143, 218, 0, 144, 0,
	219, 145, 146, 0, 220, 147, 221, 0, 148, 149,
	150, 222, 151, 152, 0, 154, 155, 153, 157, 156,
	158, 0, 159, 0, 160, 161, 223, 162, 0, 163,
	164, 0, 165, 277, 0, 166, 167, 0, 168, 224,
	169, 0, 170, 171, 173, 225, 172, 226, 0, 0,
	174, 175, 0, 279, 227, 0, 0, 278, 228, 229,
	0, 176, 177, 178, 179, 0, 0, 180, 181, 0,
	0, 182, 183, 184, 230, 231, 0, 185, 0, 0,
	0, 0, 186, 187, 188, 189, 91, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 94, 95,
	0, 96, 0, 0, 0, 0, 387, 0, 0, 0,
	97, 98, 190, 191, 192, 99, 193, 194, 0, 100,
	195, 196, 101, 0, 0, 197, 198, 199, 0, 200,
	0, 0, 0, 102, 103, 104, 0, 105, 0, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 111, 112, 201, 113, 202, 203, 0, 0,
	114, 0, 0, 0, 115, 116, 0, 0, 0, 0,
	204, 117, 205, 0, 0, 118, 119, 206, 120, 0,
	0, 0, 0, 0, 121, 207, 0, 208, 0, 122,
	123, 209, 210, 0, 0, 124, 0, 126, 0, 125,
	211, 212, 213, 0, 214, 0, 0, 127, 0, 128,
	129, 0, 0, 215, 0, 130, 0, 0, 275, 0,
	0, 131, 0, 132, 133, 134, 135, 276, 0, 136,
	137, 138, 0, 139, 0, 216, 140, 217, 141, 142,
	0, 0, 288, 0, 0, 143, 218, 0, 144, 0,
	219, 145, 146, 0, 220, 147, 221, 0, 148, 149,
	150, 222, 151, 152, 0, 154, 155, 153, 157, 156,
	158, 0, 159, 0, 160, 161, 223, 162, 0, 163,
	164, 0, 165, 277, 0, 166, 167, 0, 168, 224,
	169, 0, 170, 171, 173, 225, 172, 226, 0, 0,
	174, 175, 0, 279, 227, 0, 0, 278, 228, 229,
	0, 176, 177, 178, 179, 0, 0, 180, 181, 0,
	0, 182, 183, 184, 230, 231, 0, 185, 0, 0,
	0, 0, 186, 187, 188, 189, 91, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 94, 95,
	0, 96, 0, 0, 0, 887, 0, 0, 0, 0,
	97, 98, 190, 191, 192, 99, 193, 194, 0, 100,
	195, 196, 101, 0, 0, 197, 198, 199, 0, 200,
	0, 0, 0, 102, 103, 104, 0, 105, 0, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 111, 112, 201, 113, 202, 203, 0, 0,
	114, 0, 0, 0, 115, 116, 0, 0, 0, 0,
	204, 117, 205, 0, 0, 118, 119, 206, 120, 0,
	0, 0, 0, 0, 121, 207, 0, 208, 0, 122,
	123, 209, 210, 0, 0, 124, 0, 126, 0, 125,
	211, 212, 213, 0, 214, 0, 0, 127, 0, 128,
	129, 0, 0, 215, 0, 130, 0, 0, 275, 0,
	0, 131, 0, 132, 133, 134, 135, 276, 0, 136,
	137, 138, 0, 139, 0, 216, 140, 217, 141, 142,
	0, 0, 0, 0, 0, 143, 218, 0, 144, 0,
	219, 145, 146, 0, 220, 147, 221, 0, 148, 149,
	150, 222, 151, 152, 0, 154, 155, 153, 157, 156,
	158, 0, 159, 0, 160, 161, 223, 162, 0, 163,
	164, 0, 165, 277, 0, 166, 167, 0, 168, 224,
	169, 0, 170, 171, 173, 225, 172, 226, 0, 0,
	174, 175, 0, 279, 227, 0, 0, 278, 228, 229,
	0, 176, 177, 178, 179, 0, 0, 180, 181, 0,
	0, 182, 183, 184, 230, 231, 0, 185, 0, 0,
	0, 0, 186, 187, 188, 189, 91, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 94, 95,
	0, 96, 0, 0, 0, 824, 0, 0, 0, 0,
	97, 98, 190, 191, 192, 99, 193, 194, 0, 100,
	195, 196, 101, 0, 0, 197, 198, 199, 0, 200,
	0, 0, 0, 102, 103, 104, 0, 105, 0, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 111, 112, 201, 113, 202, 203, 0, 0,
	114, 0, 0, 0, 115, 116, 0, 0, 0, 0,
	204, 117, 205, 0, 0, 118, 119, 206, 120, 0,
	0, 0, 0, 0, 121, 207, 0, 208, 0, 122,
	123, 209, 210, 0, 0, 124, 0, 126, 0, 125,
	211, 212, 213, 0, 214, 0, 0, 127, 0, 128,
	129, 0, 0, 215, 0, 130, 0, 0, 275, 0,
	0, 131, 0, 132, 133, 134, 135, 276, 0, 136,
	137, 138, 0, 139, 0, 216, 140, 217, 141, 142,
	0, 0, 0, 0, 0, 143, 218, 0, 144, 0,
	219, 145, 146, 0, 220, 147, 221, 0, 148, 149,
	150, 222, 151, 152, 0, 154, 155, 153, 157, 156,
	158, 0, 159, 0, 160, 161, 223, 162, 0, 163,
	164, 0, 165, 277, 0, 166, 167, 0, 168, 224,
	169, 0, 170, 171, 173, 225, 172, 226, 0, 0,
	174, 175, 0, 279, 227, 0, 0, 278, 228, 229,
	0, 176, 177, 178, 179, 0, 0, 180, 181, 0,
	0, 182, 183, 184, 230, 231, 0, 185, 0, 0,
	0, 0, 186, 187, 188, 189, 91, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 94, 95,
	0, 96, 0, 0, 0, 1334, 0, 0, 0, 0,
	97, 98, 190, 191, 192, 99, 193, 194, 0, 100,
	195, 196, 101, 0, 0, 197, 198, 199, 0, 200,
	0, 0, 0, 102, 103, 104, 0, 105, 0, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 111, 112, 201, 113, 202, 203, 0, 0,
	114, 0, 0, 0, 115, 116, 0, 0, 0, 0,
	204, 117, 205, 0, 0, 118, 119, 206, 120, 0,
	0, 0, 0, 0, 121, 207, 0, 208, 0, 122,
	123, 209, 210, 0, 0, 124, 0, 126, 0, 125,
	211, 212, 213, 0, 214, 0, 0, 127, 0, 128,
	129, 0, 0, 215, 0, 130, 0, 0, 275, 0,
	0, 131, 0, 132, 133, 134, 135, 276, 0, 136,
	137, 138, 0, 139, 0, 216, 140, 217, 141, 142,
	0, 0, 0, 0, 0, 143, 218, 0, 144, 0,
	219, 145, 146, 0, 220, 147, 221, 0, 148, 149,
	150, 222, 151, 152, 0, 154, 155, 153, 157, 156,
	158, 0, 159, 0, 160, 161, 223, 162, 0, 163,
	164, 0, 165, 277, 0, 166, 167, 0, 168, 224,
	169, 0, 170, 171, 173, 225, 172, 226, 0, 0,
	174, 175, 0, 279, 227, 0, 0, 278, 228, 229,
	0, 176, 177, 178, 179, 0, 0, 180, 181, 0,
	0, 182, 183, 184, 230, 231, 0, 185, 0, 0,
	0, 0, 186, 187, 188, 189, 91, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 94, 95,
	0, 96, 0, 0, 0, 487, 0, 0, 0, 0,
	97, 98, 190, 191, 192, 99, 193, 194, 0, 100,
	195, 196, 101, 0, 0, 197, 198, 199, 0, 200,
	0, 0, 0, 102, 103, 104, 0, 105, 0, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 529, 112, 201, 113, 202, 203, 0, 0,
	114, 0, 0, 0, 115, 116, 0, 0, 0, 0,
	204, 117, 205, 0, 0, 118, 119, 206, 120, 0,
	0, 0, 0, 0, 121, 207, 0, 208, 0, 122,
	123, 209, 210, 0, 0, 124, 0, 126, 0, 125,
	211, 212, 213, 0, 214, 0, 0, 127, 0, 128,
	129, 0, 0, 215, 0, 130, 0, 0, 275, 0,
	0, 131, 0, 132, 133, 134, 135, 276, 0, 136,
	137, 138, 0, 139, 0, 216, 140, 217, 141, 142,
	0, 0, 0, 0, 0, 143, 218, 0, 144, 0,
	219, 145, 146, 0, 220, 147, 221, 0, 148, 149,
	150, 222, 151, 152, 0, 154, 155, 153, 157, 156,
	158, 0, 159, 0, 160, 161, 223, 162, 0, 163,
	164, 0, 165, 277, 0, 166, 167, 0, 168, 224,
	169, 0, 170, 171, 173, 225, 172, 226, 0, 528,
	174, 175, 0, 279, 227, 0, 0, 278, 228, 229,
	0, 176, 177, 178, 179, 0, 91, 180, 181, 0,
	0, 182, 183, 184, 230, 231, 0, 185, 94, 95,
	0, 96, 186, 187, 188, 189, 0, 0, 0, 0,
	97, 98, 190, 191, 192, 99, 193, 194, 532, 100,
	195, 196, 101, 0, 0, 197, 198, 199, 0, 200,
	0, 0, 0, 102, 103, 104, 0, 105, 0, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 111, 112, 201, 113, 202, 203, 0, 0,
	114, 0, 0, 0, 115, 116, 0, 0, 0, 0,
	204, 117, 205, 0, 0, 118, 119, 206, 120, 0,
	0, 0, 0, 0, 121, 207, 0, 208, 0, 122,
	123, 209, 210, 0, 0, 124, 0, 126, 0, 125,
	211, 212, 213, 0, 214, 0, 0, 127, 0, 128,
	129, 0, 0, 215, 0, 130, 0, 0, 275, 0,
	0, 131, 0, 132, 133, 134, 135, 276, 0, 136,
	137, 138, 0, 139, 0, 216, 140, 217, 141, 142,
	0, 0, 0, 0, 0, 143, 218, 0, 144, 0,
	219, 145, 146, 0, 220, 147, 221, 0, 148, 149,
	150, 222, 151, 152, 0, 154, 155, 153, 157, 156,
	158, 0, 159, 0, 160, 161, 223, 162, 0, 163,
	164, 0, 165, 277, 0, 166, 167, 0, 168, 224,
	169, 0, 170, 171, 173, 225, 172, 226, 0, 0,
	174, 175, 0, 279, 227, 0, 0, 278, 228, 229,
	0, 176, 177, 178, 179, 0, 313, 180, 181, 0,
	0, 182, 183, 184, 230, 231, 0, 185, 94, 95,
	0, 96, 186, 187, 188, 189, 0, 0, 0, 0,
	97, 98, 190, 191, 192, 99, 193, 194, 532, 100,
	195, 196, 101, 0, 0, 197, 198, 199, 0, 200,
	0, 318, 0, 102, 103, 104, 0, 105, 0, 106,
	0, 319, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 111, 112, 201, 113, 202, 203, 0, 0,
	114, 0, 0, 0, 115, 116, 0, 0, 0, 0,
	204, 117, 205, 0, 0, 118, 119, 206, 120, 0,
	0, 0, 320, 0, 121, 207, 0, 208, 0, 122,
	123, 209, 210, 0, 0, 124, 0, 126, 321, 125,
	211, 212, 213, 0, 214, 0, 322, 127, 323, 128,
	129, 0, 0, 215, 324, 130, 325, 0, 275, 0,
	0, 131, 0, 132, 133, 134, 135, 276, 326, 136,
	137, 138, 0, 139, 0, 216, 140, 217, 141, 142,
	0, 0, 0, 0, 0, 143, 218, 327, 144, 328,
	219, 145, 146, 0, 220, 147, 221, 0, 148, 149,
	150, 222, 151, 152, 0, 154, 155, 153, 157, 156,
	158, 0, 159, 329, 160, 161, 223, 162, 0, 163,
	164, 0, 165, 277, 0, 166, 167, 330, 168, 224,
	169, 0, 170, 171, 173, 225, 172, 226, 0, 0,
	174, 175, 0, 279, 227, 0, 0, 278, 228, 229,
	0, 176, 177, 178, 179, 0, 91, 180, 181, 0,
	0, 182, 183, 184, 230, 231, 0, 185, 94, 95,
	0, 96, 186, 187, 188, 189, 0, 0, 0, 0,
	97, 98, 190, 191, 192, 99, 193, 194, 0, 100,
	195, 196, 101, 0, 0, 197, 198, 199, 799, 200,
	0, 0, 0, 102, 103, 104, 0, 105, 797, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 111, 112, 201, 113, 202, 203, 0, 0,
	114, 0, 0, 0, 115, 116, 0, 0, 0, 0,
	204, 117, 205, 0, 0, 118, 119, 206, 120, 0,
	802, 0, 0, 0, 121, 207, 0, 208, 0, 122,
	123, 209, 210, 0, 865, 124, 0, 126, 0, 125,
	211, 212, 213, 0, 214, 0, 0, 127, 0, 128,
	129, 0, 0, 215, 0, 130, 0, 0, 275, 0,
	0, 131, 0, 132, 133, 134, 135, 276, 0, 136,
	137, 138, 0, 139, 0, 216, 140, 217, 141, 142,
	0, 0, 0, 0, 0, 143, 218, 0, 144, 0,
	219, 145, 146, 0, 220, 147, 221, 801, 148, 149,
	150, 222, 151, 152, 0, 154, 155, 153, 157, 156,
	158, 0, 159, 0, 160, 161, 223, 162, 0, 163,
	164, 0, 165, 277, 0, 166, 167, 0, 168, 224,
	169, 0, 170, 171, 173, 225, 172, 226, 0, 0,
	174, 175, 0, 279, 227, 0, 0, 278, 228, 229,
	0, 176, 177, 178, 179, 0, 866, 180, 181, 0,
	0, 182, 183, 184, 230, 231, 91, 185, 0, 0,
	0, 0, 186, 187, 188, 189, 0, 0, 94, 95,
	0, 96, 0, 0, 0, 0, 0, 0, 0, 0,
	97, 98, 190, 191, 192, 99, 193, 194, 0, 100,
	195, 196, 101, 0, 0, 197, 198, 199, 799, 200,
	0, 0, 794, 102, 103, 104, 0, 105, 797, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 111, 112, 201, 113, 202, 203, 0, 0,
	114, 0, 0, 0, 115, 116, 0, 0, 0, 0,
	204, 117, 205, 0, 0, 118, 119, 206, 120, 0,
	802, 0, 0, 0, 121, 207, 0, 208, 0, 122,
	123, 793, 210, 0, 0, 124, 0, 126, 0, 125,
	211, 212, 213, 0, 214, 0, 0, 127, 0, 128,
	129, 0, 0, 215, 0, 130, 0, 0, 275, 0,
	0, 131, 0, 132, 133, 134, 135, 276, 0, 136,
	137, 138, 0, 139, 0, 216, 140, 217, 141, 142,
	0, 0, 0, 0, 0, 143, 218, 0, 144, 0,
	219, 145, 146, 0, 220, 147, 221, 801, 148, 149,
	150, 222, 151, 152, 0, 154, 155, 153, 157, 156,
	158, 0, 159, 0, 160, 161, 223, 162, 0, 163,
	164, 0, 165, 277, 0, 166, 167, 0, 168, 224,
	169, 0, 170, 171, 173, 225, 172, 226, 0, 0,
	174, 175, 0, 279, 227, 0, 0, 278, 228, 229,
	0, 176, 177, 178, 179, 0, 800, 180, 181, 0,
	0, 182, 183, 184, 230, 231, 91, 185, 0, 0,
	0, 0, 186, 187, 188, 189, 0, 0, 94, 95,
	0, 96, 0, 0, 0, 0, 0, 1124, 0, 0,
	97, 98, 190, 191, 192, 99, 193, 194, 0, 100,
	195, 196, 101, 0, 0, 197, 198, 199, 0, 200,
	0, 0, 0, 102, 103, 104, 0, 105, 0, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 111, 112, 201, 113, 202, 203, 0, 0,
	114, 0, 0, 0, 115, 116, 0, 0, 0, 0,
	204, 117, 205, 0, 0, 118, 119, 206, 120, 0,
	0, 0, 0, 0, 121, 207, 0, 208, 0, 122,
	123, 209, 210, 0, 0, 124, 0, 126, 0, 125,
	211, 212, 213, 0, 214, 0, 0, 127, 0, 128,
	129, 0, 0, 215, 0, 130, 0, 0, 275, 0,
	0, 131, 0, 132, 133, 134, 135, 276, 0, 136,
	137, 138, 0, 139, 0, 216, 140, 217, 141, 142,
	0, 0, 0, 0, 0, 143, 218, 0, 144, 0,
	219, 145, 146, 0, 220, 147, 221, 0, 148, 149,
	150, 222, 151, 152, 0, 154, 155, 153, 157, 156,
	158, 0, 159, 0, 160, 161, 223, 162, 0, 163,
	164, 0, 165, 277, 0, 166, 167, 0, 168, 224,
	169, 0, 170, 171, 173, 225, 172, 226, 0, 0,
	174, 175, 0, 279, 227, 0, 0, 278, 228, 229,
	0, 176, 177, 178, 179, 0, 91, 180, 181, 0,
	0, 182, 183, 184, 230, 231, 0, 185, 94, 95,
	0, 96, 186, 187, 188, 189, 0, 0, 0, 0,
	97, 98, 190, 191, 192, 99, 193, 194, 0, 100,
	195, 196, 101, 0, 0, 197, 198, 199, 0, 200,
	0, 0, 0, 102, 103, 104, 0, 105, 0, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 111, 112, 201, 113, 202, 203, 0, 0,
	114, 0, 0, 0, 115, 116, 0, 0, 0, 0,
	204, 117, 205, 0, 0, 118, 119, 206, 120, 0,
	0, 0, 0, 0, 121, 207, 0, 208, 0, 122,
	123, 209, 210, 0, 0, 124, 0, 126, 0, 125,
	211, 212, 213, 0, 214, 0, 0, 127, 0, 128,
	129, 0, 0, 215, 0, 130, 0, 0, 275, 0,
	0, 131, 0, 132, 133, 134, 135, 276, 0, 136,
	137, 138, 0, 139, 0, 216, 140, 217, 141, 142,
	0, 0, 288, 0, 0, 143, 218, 0, 144, 0,
	219, 145, 146, 0, 220, 147, 221, 0, 148, 149,
	150, 222, 151, 152, 0, 154, 155, 153, 157, 156,
	158, 0, 159, 0, 160, 161, 223, 162, 0, 163,
	164, 0, 165, 277, 0, 166, 167, 0, 168, 224,
	169, 0, 170, 171, 173, 225, 172, 226, 0, 0,
	174, 175, 0, 279, 227, 0, 0, 278, 228, 229,
	0, 176, 177, 178, 179, 0, 91, 180, 181, 0,
	0, 182, 183, 184, 230, 231, 0, 185, 94, 95,
	0, 96, 186, 187, 188, 189, 0, 0, 0, 0,
	97, 98, 190, 191, 192, 99, 193, 194, 0, 100,
	195, 196, 101, 0, 0, 197, 198, 199, 0, 200,
	0, 0, 0, 102, 103, 104, 0, 105, 0, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 111, 112, 201, 113, 202, 203, 0, 0,
	114, 0, 0, 0, 115, 116, 0, 0, 0, 0,
	204, 117, 205, 0, 0, 118, 119, 206, 120, 0,
	0, 0, 0, 0, 121, 207, 0, 208, 0, 122,
	123, 294, 210, 0, 0, 124, 0, 126, 0, 125,
	211, 212, 213, 0, 214, 0, 0, 127, 0, 128,
	129, 0, 0, 215, 0, 130, 0, 0, 275, 0,
	0, 131, 0, 132, 133, 134, 135, 276, 0, 136,
	137, 138, 0, 139, 0, 216, 140, 217, 141, 142,
	0, 0, 288, 0, 0, 143, 218, 0, 144, 0,
	219, 145, 146, 0, 220, 147, 221, 0, 148, 149,
	150, 222, 151, 152, 0, 154, 155, 153, 157, 156,
	158, 0, 159, 0, 160, 161, 223, 162, 0, 163,
	164, 0, 165, 277, 0, 166, 167, 0, 168, 224,
	169, 0, 170, 171, 173, 225, 172, 226, 0, 0,
	174, 175, 0, 279, 227, 0, 0, 278, 228, 229,
	0, 176, 177, 178, 179, 0, 91, 180, 181, 0,
	0, 182, 183, 184, 230, 231, 0, 185, 94, 95,
	0, 96, 186, 187, 188, 189, 0, 0, 0, 0,
	97, 98, 190, 191, 192, 99, 193, 194, 0, 100,
	195, 196, 101, 0, 0, 197, 198, 199, 0, 200,
	0, 0, 0, 102, 103, 104, 0, 105, 0, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 111, 112, 201, 113, 202, 203, 0, 0,
	114, 0, 0, 0, 115, 116, 0, 0, 0, 0,
	204, 117, 205, 0, 0, 118, 119, 206, 120, 0,
	0, 0, 0, 0, 121, 207, 0, 208, 0, 122,
	123, 209, 210, 0, 0, 124, 0, 126, 0, 125,
	211, 212, 213, 0, 214, 0, 0, 127, 0, 128,
	129, 0, 0, 215, 0, 130, 0, 0, 275, 0,
	0, 131, 0, 132, 133, 134, 135, 276, 0, 136,
	137, 138, 0, 139, 0, 216, 140, 217, 141, 142,
	0, 0, 0, 0, 0, 143, 218, 0, 144, 0,
	219, 145, 146, 0, 220, 147, 221, 0, 148, 149,
	150, 222, 151, 152, 0, 154, 155, 153, 157, 156,
	158, 0, 159, 0, 160, 161, 223, 162, 0, 163,
	164, 0, 165, 277, 0, 166, 167, 0, 168, 224,
	169, 0, 170, 171, 173, 225, 172, 226, 0, 0,
	174, 175, 0, 279, 227, 0, 0, 278, 228, 229,
	0, 176, 177, 178, 179, 0, 91, 180, 181, 0,
	0, 182, 183, 184, 230, 231, 0, 185, 94, 95,
	0, 96, 186, 187, 188, 189, 0, 0, 0, 0,
	97, 98, 190, 191, 192, 99, 193, 194, 0, 100,
	195, 196, 101, 0, 0, 197, 198, 199, 0, 200,
	0, 0, 0, 102, 103, 104, 0, 105, 0, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 111, 112, 201, 113, 202, 203, 0, 0,
	114, 0, 0, 0, 115, 116, 0, 0, 0, 0,
	204, 117, 205, 0, 0, 118, 119, 206, 120, 0,
	0, 0, 0, 0, 121, 207, 0, 208, 0, 122,
	123, 1065, 210, 0, 0, 124, 0, 126, 0, 125,
	211, 212, 213, 0, 214, 0, 0, 127, 0, 128,
	129, 0, 0, 215, 0, 130, 0, 0, 275, 0,
	0, 131, 0, 132, 133, 134, 135, 276, 0, 136,
	137, 138, 0, 139, 0, 216, 140, 217, 141, 142,
	0, 0, 0, 0, 0, 143, 218, 0, 144, 0,
	219, 145, 146, 0, 220, 147, 221, 0, 148, 149,
	150, 222, 151, 152, 0, 154, 155, 153, 157, 156,
	158, 0, 159, 0, 160, 161, 223, 162, 0, 163,
	164, 0, 165, 277, 0, 166, 167, 0, 168, 224,
	169, 0, 170, 171, 173, 225, 172, 226, 0, 0,
	174, 175, 0, 279, 227, 0, 0, 278, 228, 229,
	0, 176, 177, 178, 179, 0, 91, 180, 181, 0,
	0, 182, 183, 184, 230, 231, 0, 185, 94, 95,
	0, 96, 186, 187, 188, 189, 0, 0, 0, 0,
	97, 98, 190, 191, 192, 99, 193, 194, 0, 100,
	195, 196, 101, 0, 0, 197, 198, 199, 0, 200,
	0, 0, 0, 102, 103, 104, 0, 105, 0, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 111, 112, 201, 113, 202, 203, 0, 0,
	114, 0, 0, 0, 115, 116, 0, 0, 0, 0,
	204, 117, 205, 0, 0, 118, 119, 206, 120, 0,
	0, 0, 0, 0, 121, 207, 0, 208, 0, 122,
	123, 1063, 210, 0, 0, 124, 0, 126, 0, 125,
	211, 212, 213, 0, 214, 0, 0, 127, 0, 128,
	129, 0, 0, 215, 0, 130, 0, 0, 275, 0,
	0, 131, 0, 132, 133, 134, 135, 276, 0, 136,
	137, 138, 0, 139, 0, 216, 140, 217, 141, 142,
	0, 0, 0, 0, 0, 143, 218, 0, 144, 0,
	219, 145, 146, 0, 220, 147, 221, 0, 148, 149,
	150, 222, 151, 152, 0, 154, 155, 153, 157, 156,
	158, 0, 159, 0, 160, 161, 223, 162, 0, 163,
	164, 0, 165, 277, 0, 166, 167, 0, 168, 224,
	169, 0, 170, 171, 173, 225, 172, 226, 0, 0,
	174, 175, 0, 279, 227, 0, 0, 278, 228, 229,
	0, 176, 177, 178, 179, 0, 91, 180, 181, 0,
	0, 182, 183, 184, 230, 231, 0, 185, 94, 95,
	0, 96, 186, 187, 188, 189, 0, 0, 0, 0,
	97, 98, 190, 191, 192, 99, 193, 194, 0, 100,
	195, 196, 101, 0, 0, 197, 198, 199, 0, 200,
	0, 0, 0, 102, 103, 104, 0, 105, 0, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 111, 112, 201, 113, 202, 203, 0, 0,
	114, 0, 0, 0, 115, 116, 0, 0, 0, 0,
	204, 117, 205, 0, 0, 118, 119, 206, 120, 0,
	0, 0, 0, 0, 121, 207, 0, 208, 0, 122,
	123, 1054, 210, 0, 0, 124, 0, 126, 0, 125,
	211, 212, 213, 0, 214, 0, 0, 127, 0, 128,
	129, 0, 0, 215, 0, 130, 0, 0, 275, 0,
	0, 131, 0, 132, 133, 134, 135, 276, 0, 136,
	137, 138, 0, 139, 0, 216, 140, 217, 141, 142,
	0, 0, 0, 0, 0, 143, 218, 0, 144, 0,
	219, 145, 146, 0, 220, 147, 221, 0, 148, 149,
	150, 222, 151, 152, 0, 154, 155, 153, 157, 156,
	158, 0, 159, 0, 160, 161, 223, 162, 0, 163,
	164, 0, 165, 277, 0, 166, 167, 0, 168, 224,
	169, 0, 170, 171, 173, 225, 172, 226, 0, 0,
	174, 175, 0, 279, 227, 0, 0, 278, 228, 229,
	0, 176, 177, 178, 179, 0, 91, 180, 181, 0,
	0, 182, 183, 184, 230, 231, 0, 185, 94, 95,
	0, 96, 186, 187, 188, 189, 0, 0, 0, 0,
	97, 98, 190, 191, 192, 99, 193, 194, 0, 100,
	195, 196, 101, 0, 0, 197, 198, 199, 0, 200,
	0, 0, 0, 102, 103, 104, 0, 105, 0, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 111, 112, 201, 113, 202, 203, 0, 0,
	114, 0, 0, 0, 115, 116, 0, 0, 0, 0,
	204, 117, 205, 0, 0, 118, 119, 206, 120, 0,
	0, 0, 0, 0, 121, 207, 0, 208, 0, 122,
	123, 672, 210, 0, 0, 124, 0, 126, 0, 125,
	211, 212, 213, 0, 214, 0, 0, 127, 0, 128,
	129, 0, 0, 215, 0, 130, 0, 0, 275, 0,
	0, 131, 0, 132, 133, 134, 135, 276, 0, 136,
	137, 138, 0, 139, 0, 216, 140, 217, 141, 142,
	0, 0, 0, 0, 0, 143, 218, 0, 144, 0,
	219, 145, 146, 0, 220, 147, 221, 0, 148, 149,
	150, 222, 151, 152, 0, 154, 155, 153, 157, 156,
	158, 0, 159, 0, 160, 161, 223, 162, 0, 163,
	164, 0, 165, 277, 0, 166, 167, 0, 168, 224,
	169, 0, 170, 171, 173, 225, 172, 226, 0, 0,
	174, 175, 0, 279, 227, 0, 0, 278, 228, 229,
	0, 176, 177, 178, 179, 0, 91, 180, 181, 0,
	0, 182, 183, 184, 230, 231, 0, 185, 94, 95,
	0, 96, 186, 187, 188, 189, 0, 515, 0, 0,
	97, 98, 190, 191, 192, 99, 193, 194, 0, 100,
	195, 196, 101, 0, 0, 197, 198, 199, 0, 200,
	0, 0, 0, 102, 103, 104, 0, 105, 0, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 111, 112, 201, 113, 202, 203, 0, 0,
	114, 0, 0, 0, 115, 116, 0, 0, 0, 0,
	204, 117, 205, 0, 0, 118, 119, 206, 120, 0,
	0, 0, 0, 0, 121, 207, 0, 208, 0, 122,
	123, 209, 210, 0, 0, 124, 0, 126, 0, 125,
	211, 212, 213, 0, 214, 0, 0, 127, 0, 128,
	129, 0, 0, 215, 0, 130, 0, 0, 275, 0,
	0, 131, 0, 132, 133, 134, 135, 276, 0, 136,
	137, 138, 0, 139, 0, 216, 140, 217, 141, 142,
	0, 0, 0, 0, 0, 143, 218, 0, 144, 0,
	219, 145, 146, 0, 220, 147, 221, 0, 148, 149,
	150, 222, 151, 152, 0, 154, 155, 153, 157, 156,
	158, 0, 159, 0, 160, 161, 223, 162, 0, 163,
	164, 0, 165, 277, 0, 0, 167, 0, 168, 224,
	169, 0, 170, 171, 173, 225, 172, 226, 0, 0,
	174, 175, 0, 279, 227, 0, 0, 278, 228, 229,
	0, 176, 177, 178, 179, 0, 91, 180, 181, 0,
	0, 182, 183, 184, 230, 231, 0, 185, 94, 95,
	0, 96, 186, 187, 188, 189, 0, 0, 0, 0,
	97, 98, 190, 191, 192, 99, 193, 194, 0, 100,
	195, 196, 101, 0, 0, 197, 198, 199, 0, 200,
	0, 0, 0, 102, 103, 104, 0, 105, 0, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 111, 112, 201, 113, 202, 203, 0, 0,
	114, 0, 0, 0, 115, 116, 0, 0, 0, 0,
	204, 117, 205, 0, 0, 118, 119, 206, 120, 0,
	0, 0, 0, 0, 121, 207, 0, 208, 0, 122,
	123, 372, 210, 0, 0, 124, 0, 126, 0, 125,
	211, 212, 213, 0, 214, 0, 0, 127, 0, 128,
	129, 0, 0, 215, 0, 130, 0, 0, 275, 0,
	0, 131, 0, 132, 133, 134, 135, 276, 0, 136,
	137, 138, 0, 139, 0, 216, 140, 217, 141, 142,
	0, 0, 0, 0, 0, 143, 218, 0, 144, 0,
	219, 145, 146, 0, 220, 147, 221, 0, 148, 149,
	150, 222, 151, 152, 0, 154, 155, 153, 157, 156,
	158, 0, 159, 0, 160, 161, 223, 162, 0, 163,
	164, 0, 165, 277, 0, 166, 167, 0, 168, 224,
	169, 0, 170, 171, 173, 225, 172, 226, 0, 0,
	174, 175, 0, 279, 227, 0, 0, 278, 228, 229,
	0, 176, 177, 178, 179, 0, 91, 180, 181, 0,
	0, 182, 183, 184, 230, 231, 0, 185, 94, 95,
	0, 96, 186, 187, 188, 189, 0, 0, 0, 0,
	97, 98, 190, 191, 192, 99, 193, 194, 0, 100,
	195, 196, 101, 0, 0, 197, 198, 199, 0, 200,
	0, 0, 0, 102, 103, 104, 0, 105, 0, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 111, 112, 201, 113, 202, 203, 0, 0,
	114, 0, 0, 0, 115, 116, 0, 0, 0, 0,
	204, 117, 205, 0, 0, 118, 119, 206, 120, 0,
	0, 0, 0, 0, 121, 207, 0, 208, 0, 122,
	123, 369, 210, 0, 0, 124, 0, 126, 0, 125,
	211, 212, 213, 0, 214, 0, 0, 127, 0, 128,
	129, 0, 0, 215, 0, 130, 0, 0, 275, 0,
	0, 131, 0, 132, 133, 134, 135, 276, 0, 136,
	137, 138, 0, 139, 0, 216, 140, 217, 141, 142,
	0, 0, 0, 0, 0, 143, 218, 0, 144, 0,
	219, 145, 146, 0, 220, 147, 221, 0, 148, 149,
	150, 222, 151, 152, 0, 154, 155, 153, 157, 156,
	158, 0, 159, 0, 160, 161, 223, 162, 0, 163,
	164, 0, 165, 277, 0, 166, 167, 0, 168, 224,
	169, 0, 170, 171, 173, 225, 172, 226, 0, 0,
	174, 175, 0, 279, 227, 0, 0, 278, 228, 229,
	0, 176, 177, 178, 179, 0, 91, 180, 181, 0,
	0, 182, 183, 184, 230, 231, 0, 185, 94, 95,
	0, 96, 186, 187, 188, 189, 0, 0, 0, 0,
	97, 98, 190, 191, 192, 99, 193, 194, 0, 100,
	195, 196, 101, 0, 0, 197, 198, 335, 0, 200,
	0, 0, 0, 102, 103, 104, 0, 105, 0, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 111, 112, 201, 113, 202, 203, 0, 0,
	114, 0, 0, 0, 115, 116, 0, 0, 0, 0,
	204, 117, 205, 0, 0, 118, 119, 206, 120, 0,
	0, 0, 0, 0, 121, 207, 0, 208, 0, 122,
	123, 209, 210, 0, 0, 124, 0, 126, 0, 125,
	211, 212, 213, 0, 214, 0, 0, 127, 0, 128,
	129, 0, 0, 215, 0, 130, 0, 0, 275, 0,
	0, 131, 0, 132, 133, 134, 135, 88, 0, 136,
	137, 138, 0, 139, 0, 216, 140, 217, 141, 142,
	0, 0, 0, 0, 0, 143, 218, 0, 144, 0,
	219, 145, 146, 0, 220, 147, 221, 0, 148, 149,
	150, 222, 151, 152, 0, 154, 155, 153, 157, 156,
	158, 0, 159, 0, 160, 161, 223, 162, 0, 163,
	164, 0, 165, 277, 0, 166, 167, 0, 168, 224,
	169, 0, 170, 171, 173, 225, 172, 226, 0, 0,
	174, 175, 0, 87, 227, 0, 0, 83, 228, 229,
	0, 176, 177, 178, 179, 0, 91, 180, 181, 0,
	0, 182, 183, 184, 230, 231, 0, 185, 94, 95,
	0, 96, 186, 187, 188, 189, 0, 0, 0, 0,
	97, 98, 190, 191, 192, 99, 193, 194, 0, 100,
	195, 196, 101, 0, 0, 197, 198, 199, 0, 200,
	0, 0, 0, 102, 103, 104, 0, 105, 0, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 111, 112, 201, 113, 202, 203, 0, 0,
	114, 0, 0, 0, 115, 116, 0, 0, 0, 0,
	204, 117, 205, 0, 0, 118, 119, 206, 120, 0,
	0, 0, 0, 0, 121, 207, 0, 208, 0, 122,
	123, 209, 210, 0, 0, 124, 0, 126, 0, 125,
	211, 212, 213, 0, 214, 0, 0, 127, 0, 128,
	129, 0, 0, 215, 0, 130, 0, 0, 275, 0,
	0, 131, 0, 132, 133, 134, 135, 88, 0, 136,
	137, 138, 0, 139, 0, 216, 140, 217, 141, 142,
	0, 0, 0, 0, 0, 143, 218, 0, 144, 0,
	219, 145, 146, 0, 220, 147, 221, 0, 148, 149,
	150, 222, 151, 152, 0, 154, 155, 153, 157, 156,
	158, 0, 159, 0, 160, 161, 223, 162, 0, 163,
	164, 0, 165, 277, 0, 166, 167, 0, 168, 224,
	169, 0, 170, 171, 173, 225, 172, 226, 0, 0,
	174, 175, 0, 87, 227, 0, 0, 83, 228, 229,
	0, 176, 177, 178, 179, 0, 91, 180, 181, 0,
	0, 182, 183, 184, 230, 231, 0, 185, 94, 95,
	0, 96, 186, 187, 188, 189, 0, 0, 0, 0,
	97, 98, 190, 191, 192, 99, 193, 194, 0, 100,
	195, 196, 101, 0, 0, 197, 198, 199, 0, 200,
	0, 0, 0, 102, 103, 104, 0, 105, 0, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 111, 112, 201, 113, 202, 203, 0, 0,
	114, 0, 0, 0, 115, 116, 0, 0, 0, 0,
	204, 117, 205, 0, 0, 118, 119, 206, 120, 0,
	0, 0, 0, 0, 121, 207, 0, 208, 0, 122,
	123, 308, 210, 0, 0, 124, 0, 126, 0, 125,
	211, 212, 213, 0, 214, 0, 0, 127, 0, 128,
	129, 0, 0, 215, 0, 130, 0, 0, 275, 0,
	0, 131, 0, 132, 133, 134, 135, 276, 0, 136,
	137, 138, 0, 139, 0, 216, 140, 217, 141, 142,
	0, 0, 0, 0, 0, 143, 218, 0, 144, 0,
	219, 145, 146, 0, 220, 147, 221, 0, 148, 149,
	150, 222, 151, 152, 0, 154, 155, 153, 157, 156,
	158, 0, 159, 0, 160, 161, 223, 162, 0, 163,
	164, 0, 165, 277, 0, 166, 167, 0, 168, 224,
	169, 0, 170, 171, 173, 225, 172, 226, 0, 0,
	174, 175, 0, 279, 227, 0, 0, 278, 228, 229,
	0, 176, 177, 178, 179, 0, 91, 180, 181, 0,
	0, 182, 183, 184, 230, 231, 0, 185, 94, 95,
	0, 96, 186, 187, 188, 189, 0, 0, 0, 0,
	97, 98, 190, 191, 192, 99, 193, 194, 0, 100,
	195, 196, 101, 0, 0, 197, 198, 199, 0, 200,
	0, 0, 0, 102, 103, 104, 0, 105, 0, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 111, 112, 201, 113, 202, 203, 0, 0,
	114, 0, 0, 0, 115, 116, 0, 0, 0, 0,
	204, 117, 205, 0, 0, 118, 119, 206, 120, 0,
	0, 0, 0, 0, 121, 207, 0, 208, 0, 122,
	123, 305, 210, 0, 0, 124, 0, 126, 0, 125,
	211, 212, 213, 0, 214, 0, 0, 127, 0, 128,
	129, 0, 0, 215, 0, 130, 0, 0, 275, 0,
	0, 131, 0, 132, 133, 134, 135, 276, 0, 136,
	137, 138, 0, 139, 0, 216, 140, 217, 141, 142,
	0, 0, 0, 0, 0, 143, 218, 0, 144, 0,
	219, 145, 146, 0, 220, 147, 221, 0, 148, 149,
	150, 222, 151, 152, 0, 154, 155, 153, 157, 156,
	158, 0, 159, 0, 160, 161, 223, 162, 0, 163,
	164, 0, 165, 277, 0, 166, 167, 0, 168, 224,
	169, 0, 170, 171, 173, 225, 172, 226, 0, 0,
	174, 175, 0, 279, 227, 0, 0, 278, 228, 229,
	0, 176, 177, 178, 179, 0, 91, 180, 181, 0,
	0, 182, 183, 184, 230, 231, 0, 185, 94, 95,
	0, 96, 186, 187, 188, 189, 0, 0, 0, 0,
	97, 98, 190, 191, 192, 99, 193, 194, 0, 100,
	195, 196, 101, 0, 0, 197, 198, 199, 0, 200,
	0, 0, 0, 102, 103, 104, 0, 105, 0, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 111, 112, 201, 113, 202, 203, 0, 0,
	114, 0, 0, 0, 115, 116, 0, 0, 0, 0,
	204, 117, 205, 0, 0, 118, 119, 206, 120, 0,
	0, 0, 0, 0, 121, 207, 0, 208, 0, 122,
	123, 303, 210, 0, 0, 124, 0, 126, 0, 125,
	211, 212, 213, 0, 214, 0, 0, 127, 0, 128,
	129, 0, 0, 215, 0, 130, 0, 0, 275, 0,
	0, 131, 0, 132, 133, 134, 135, 276, 0, 136,
	137, 138, 0, 139, 0, 216, 140, 217, 141, 142,
	0, 0, 0, 0, 0, 143, 218, 0, 144, 0,
	219, 145, 146, 0, 220, 147, 221, 0, 148, 149,
	150, 222, 151, 152, 0, 154, 155, 153, 157, 156,
	158, 0, 159, 0, 160, 161, 223, 162, 0, 163,
	164, 0, 165, 277, 0, 166, 167, 0, 168, 224,
	169, 0, 170, 171, 173, 225, 172, 226, 0, 0,
	174, 175, 0, 279, 227, 0, 0, 278, 228, 229,
	0, 176, 177, 178, 179, 0, 91, 180, 181, 0,
	0, 182, 183, 184, 230, 231, 0, 185, 94, 95,
	0, 96, 186, 187, 188, 189, 0, 0, 0, 0,
	97, 98, 190, 191, 192, 99, 193, 194, 0, 100,
	195, 196, 101, 0, 0, 197, 198, 199, 0, 200,
	0, 0, 0, 102, 103, 104, 0, 105, 0, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 111, 112, 201, 113, 202, 203, 0, 0,
	114, 0, 0, 0, 115, 116, 0, 0, 0, 0,
	204, 117, 205, 0, 0, 118, 119, 206, 120, 0,
	0, 0, 0, 0, 121, 207, 0, 208, 0, 122,
	123, 297, 210, 0, 0, 124, 0, 126, 0, 125,
	211, 212, 213, 0, 214, 0, 0, 127, 0, 128,
	129, 0, 0, 215, 0, 130, 0, 0, 275, 0,
	0, 131, 0, 132, 133, 134, 135, 276, 0, 136,
	137, 138, 0, 139, 0, 216, 140, 217, 141, 142,
	0, 0, 0, 0, 0, 143, 218, 0, 144, 0,
	219, 145, 146, 0, 220, 147, 221, 0, 148, 149,
	150, 222, 151, 152, 0, 154, 155, 153, 157, 156,
	158, 0, 159, 0, 160, 161, 223, 162, 0, 163,
	164, 0, 165, 277, 0, 166, 167, 0, 168, 224,
	169, 0, 170, 171, 173, 225, 172, 226, 0, 0,
	174, 175, 0, 279, 227, 0, 0, 278, 228, 229,
	0, 176, 177, 178, 179, 0, 91, 180, 181, 0,
	0, 182, 183, 184, 230, 231, 0, 185, 94, 95,
	0, 96, 186, 187, 188, 189, 0, 0, 0, 0,
	97, 98, 190, 191, 192, 99, 193, 194, 0, 100,
	195, 196, 101, 0, 0, 197, 198, 199, 0, 200,
	0, 0, 0, 102, 103, 104, 0, 105, 0, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 111, 112, 201, 113, 202, 203, 0, 0,
	114, 0, 0, 0, 115, 116, 0, 0, 0, 0,
	204, 117, 205, 0, 0, 118, 119, 206, 120, 0,
	0, 0, 0, 0, 121, 207, 0, 208, 0, 122,
	123, 209, 210, 0, 0, 124, 0, 126, 0, 125,
	211, 212, 213, 0, 214, 0, 0, 127, 0, 128,
	129, 0, 0, 215, 0, 130, 0, 0, 275, 0,
	0, 131, 0, 132, 133, 134, 135, 276, 0, 136,
	137, 138, 0, 139, 0, 216, 140, 217, 141, 142,
	0, 0, 0, 0, 0, 143, 218, 0, 144, 0,
	219, 145, 146, 0, 220, 147, 221, 0, 148, 149,
	150, 222, 272, 152, 0, 154, 155, 153, 157, 156,
	158, 0, 159, 0, 160, 161, 223, 162, 0, 163,
	164, 0, 165, 277, 0, 166, 167, 0, 168, 224,
	169, 0, 170, 171, 173, 225, 172, 226, 0, 0,
	174, 175, 0, 279, 227, 0, 0, 278, 228, 229,
	0, 176, 177, 178, 179, 0, 91, 180, 181, 0,
	0, 182, 183, 184, 230, 231, 0, 185, 94, 95,
	0, 96, 186, 187, 188, 189, 0, 0, 0, 0,
	97, 98, 190, 191, 192, 99, 193, 194, 0, 100,
	195, 196, 101, 0, 0, 197, 198, 199, 0, 200,
	0, 0, 0, 102, 103, 104, 0, 105, 0, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 111, 112, 201, 113, 202, 203, 0, 0,
	114, 0, 0, 0, 115, 116, 0, 0, 0, 0,
	204, 117, 205, 0, 0, 118, 119, 206, 120, 0,
	0, 0, 0, 0, 121, 207, 0, 208, 0, 122,
	123, 209, 210, 0, 0, 124, 0, 126, 0, 125,
	211, 212, 213, 0, 214, 0, 0, 127, 0, 128,
	129, 0, 0, 215, 0, 130, 0, 0, 81, 0,
	0, 131, 0, 132, 133, 134, 135, 88, 0, 136,
	137, 138, 0, 139, 0, 216, 140, 217, 141, 142,
	0, 0, 0, 0, 0, 143, 218, 0, 144, 0,
	219, 145, 146, 0, 220, 147, 221, 0, 148, 149,
	150, 222, 151, 152, 0, 154, 155, 153, 157, 156,
	158, 0, 159, 0, 160, 161, 223, 162, 0, 163,
	164, 0, 165, 82, 0, 166, 167, 0, 168, 224,
	169, 0, 170, 171, 173, 225, 172, 226, 0, 0,
	174, 175, 0, 87, 227, 0, 0, 83, 228, 229,
	0, 176, 177, 178, 179, 0, 91, 180, 181, 0,
	0, 182, 183, 184, 230, 231, 0, 185, 94, 95,
	0, 96, 186, 187, 188, 189, 0, 0, 0, 0,
	97, 98, 190, 191, 192, 99, 193, 194, 0, 100,
	195, 196, 101, 0, 0, 197, 198, 199, 0, 200,
	0, 0, 0, 102, 103, 104, 0, 105, 0, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 111, 112, 201, 113, 202, 203, 0, 0,
	114, 0, 0, 0, 115, 116, 0, 0, 0, 0,
	204, 117, 205, 0, 0, 118, 119, 206, 120, 0,
	0, 0, 0, 0, 121, 207, 0, 208, 0, 122,
	123, 209, 210, 0, 0, 124, 0, 126, 0, 125,
	211, 212, 213, 0, 214, 0, 0, 127, 0, 128,
	129, 0, 0, 215, 0, 130, 0, 0, 275, 0,
	0, 131, 0, 132, 133, 134, 135, 276, 0, 136,
	137, 138, 0, 139, 0, 216, 140, 217, 141, 142,
	0, 0, 0, 0, 0, 143, 218, 0, 144, 0,
	219, 145, 0, 0, 220, 147, 221, 0, 148, 0,
	150, 222, 151, 152, 0, 154, 155, 153, 157, 156,
	158, 0, 159, 0, 160, 161, 223, 0, 0, 163,
	164, 0, 165, 277, 0, 166, 167, 0, 168, 224,
	169, 0, 170, 171, 173, 225, 172, 226, 0, 0,
	174, 175, 0, 279, 227, 0, 0, 278, 228, 229,
	0, 176, 177, 178, 179, 0, 0, 180, 181, 0,
	0, 182, 183, 184, 230, 231, 696, 185, 714, 715,
	716, 0, 186, 187, 188, 189, 0, 0, 717, 0,
	0, 0, 0, 0, 698, 696, 723, 714, 715, 716,
	0, 0, 0, 0, 0, 0, 0, 717, 0, 0,
	0, 0, 0, 698, 697, 723, 0, 0, 0, 0,
	711, 0, 0, 696, 0, 714, 715, 716, 0, 0,
	0, 0, 0, 697, 0, 717, 0, 0, 0, 711,
	0, 698, 0, 723, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 697, 0, 0, 0, 0, 0, 711, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 724, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	722, 0, 0, 0, 0, 0, 724, 0, 0, 0,
	719, 0, 0, 0, 0, 0, 712, 0, 0, 722,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 719,
	0, 0, 0, 0, 724, 712, 0, 718, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 722, 0, 0,
	0, 0, 0, 0, 0, 0, 718, 719, 0, 0,
	0, 0, 0, 712, 0, 0, 0, 0, 0, 0,
	0, 0, 713, 0, 0, 0, 0, 0, 0, 0,
	0, 721, 0, 0, 718, 0, 0, 0, 0, 0,
	0, 713, 0, 0, 0, 0, 0, 0, 0, 0,
	721, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 713,
	0, 0, 0, 0, 0, 0, 0, 0, 721, 0,
	720, 0, 708, 709, 710, 0, 707, 704, 705, 706,
	699, 700, 701, 702, 703, 0, 0, 0, 0, 720,
	1586, 708, 709, 710, 0, 707, 704, 705, 706, 699,
	700, 701, 702, 703, 1189, 0, 1205, 1206, 1207, 1571,
	0, 0, 0, 0, 0, 0, 1307, 720, 0, 708,
	709, 710, 0, 707, 704, 705, 706, 699, 700, 701,
	702, 703, 696, 0, 714, 715, 716, 1550, 0, 0,
	0, 0, 0, 0, 717, 0, 0, 0, 1202, 0,
	698, 696, 723, 714, 715, 716, 0, 0, 0, 0,
	0, 0, 0, 717, 0, 0, 0, 0, 0, 698,
	697, 723, 0, 0, 0, 0, 711, 0, 0, 696,
	0, 714, 715, 716, 0, 0, 0, 0, 0, 697,
	0, 717, 0, 0, 0, 711, 0, 698, 0, 723,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 697, 1208, 0,
	0, 0, 0, 711, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 724, 1203, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 722, 0, 0, 0,
	0, 0, 724, 0, 0, 0, 719, 0, 0, 0,
	0, 0, 712, 0, 0, 722, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 719, 0, 0, 0, 0,
	724, 712, 0, 718, 0, 0, 0, 0, 0, 0,
	1204, 0, 0, 722, 0, 0, 0, 0, 0, 0,
	0, 0, 718, 719, 0, 0, 0, 0, 0, 712,
	0, 0, 0, 0, 0, 0, 0, 0, 713, 0,
	0, 0, 0, 0, 0, 0, 0, 721, 0, 0,
	718, 0, 0, 0, 0, 0, 0, 713, 0, 0,
	0, 0, 0, 0, 0, 0, 721, 0, 0, 0,
	1199, 1200, 1201, 0, 1198, 1195, 1196, 1197, 1190, 1191,
	1192, 1193, 1194, 0, 0, 713, 0, 0, 0, 0,
	0, 0, 0, 0, 721, 0, 720, 0, 708, 709,
	710, 0, 707, 704, 705, 706, 699, 700, 701, 702,
	703, 0, 0, 0, 0, 720, 1545, 708, 709, 710,
	0, 707, 704, 705, 706, 699, 700, 701, 702, 703,
	1189, 0, 1205, 1206, 1207, 1541, 0, 0, 0, 0,
	0, 0, 1306, 720, 0, 708, 709, 710, 0, 707,
	704, 705, 706, 699, 700, 701, 702, 703, 696, 0,
	714, 715, 716, 1483, 0, 0, 0, 0, 0, 0,
	717, 0, 0, 0, 1202, 0, 698, 696, 723, 714,
	715, 716, 0, 0, 0, 0, 0, 0, 0, 717,
	0, 0, 0, 0, 0, 698, 697, 723, 0, 0,
	0, 0, 711, 0, 0, 696, 0, 714, 715, 716,
	0, 0, 0, 0, 0, 697, 0, 717, 0, 0,
	0, 711, 0, 698, 0, 723, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 697, 1208, 0, 0, 0, 0, 711,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 724,
	1203, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 722, 0, 0, 0, 0, 0, 724, 0,
	0, 0, 719, 0, 0, 0, 0, 0, 712, 0,
	0, 722, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 719, 0, 0, 0, 0, 724, 712, 0, 718,
	0, 0, 0, 0, 0, 0, 1204, 0, 0, 722,
	0, 0, 0, 0, 0, 0, 0, 0, 718, 719,
	0, 0, 0, 0, 0, 712, 0, 0, 0, 0,
	0, 0, 0, 0, 713, 0, 0, 0, 0, 0,
	0, 0, 0, 721, 0, 0, 718, 0, 0, 0,
	0, 0, 0, 713, 0, 0, 0, 0, 0, 0,
	0, 0, 721, 0, 0, 0, 1199, 1200, 1201, 0,
	1198, 1195, 1196, 1197, 1190, 1191, 1192, 1193, 1194, 0,
	0, 713, 0, 0, 0, 0, 0, 0, 0, 0,
	721, 0, 720, 0, 708, 709, 710, 0, 707, 704,
	705, 706, 699, 700, 701, 702, 703, 0, 0, 0,
	0, 720, 1482, 708, 709, 710, 0, 707, 704, 705,
	706, 699, 700, 701, 702, 703, 1189, 0, 1205, 1206,
	1207, 1399, 0, 0, 0, 0, 0, 0, 0, 720,
	0, 708, 709, 710, 0, 707, 704, 705, 706, 699,
	700, 701, 702, 703, 696, 0, 714, 715, 716, 1337,
	0, 0, 0, 0, 0, 0, 717, 0, 0, 0,
	1202, 0, 698, 696, 723, 714, 715, 716, 0, 0,
	0, 0, 0, 0, 0, 717, 0, 0, 0, 0,
	0, 698, 697, 723, 0, 0, 0, 0, 711, 0,
	0, 696, 0, 714, 715, 716, 0, 0, 0, 0,
	0, 697, 0, 717, 0, 0, 0, 711, 0, 698,
	0, 723, 0, 0, 0, 0, 0, 1209, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 697,
	1208, 0, 0, 0, 0, 711, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 724, 1203, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 722, 0,
	0, 0, 0, 0, 724, 0, 0, 0, 719, 0,
	0, 0, 0, 0, 712, 0, 0, 722, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 719, 0, 0,
	0, 0, 724, 712, 0, 718, 0, 0, 0, 0,
	0, 0, 1204, 0, 0, 722, 0, 0, 0, 0,
	0, 0, 0, 0, 718, 719, 0, 0, 0, 0,
	0, 712, 0, 0, 0, 0, 0, 0, 0, 0,
	713, 0, 0, 0, 0, 0, 0, 0, 0, 721,
	0, 0, 718, 0, 0, 0, 0, 0, 0, 713,
	0, 0, 0, 0, 0, 0, 0, 0, 721, 0,
	0, 0, 1199, 1200, 1201, 0, 1198, 1195, 1196, 1197,
	1190, 1191, 1192, 1193, 1194, 0, 0, 713, 0, 0,
	0, 0, 0, 0, 0, 0, 721, 0, 720, 0,
	708, 709, 710, 0, 707, 704, 705, 706, 699, 700,
	701, 702, 703, 0, 0, 0, 0, 720, 1312, 708,
	709, 710, 0, 707, 704, 705, 706, 699, 700, 701,
	702, 703, 0, 0, 0, 0, 0, 969, 0, 0,
	0, 0, 0, 0, 0, 720, 0, 708, 709, 710,
	0, 707, 704, 705, 706, 699, 700, 701, 702, 703,
	0, 0, 696, 1383, 714, 715, 716, 0, 0, 0,
	0, 0, 0, 0, 717, 0, 0, 0, 0, 0,
	698, 696, 723, 714, 715, 716, 0, 0, 0, 0,
	0, 0, 0, 717, 0, 0, 696, 0, 0, 698,
	697, 723, 0, 0, 0, 0, 711, 0, 0, 0,
	0, 0, 0, 0, 698, 0, 723, 0, 0, 697,
	0, 0, 0, 0, 0, 711, 0, 0, 0, 0,
	0, 0, 0, 0, 697, 696, 0, 714, 715, 716,
	711, 0, 0, 0, 0, 0, 0, 717, 1647, 0,
	0, 876, 0, 698, 0, 723, 0, 0, 0, 0,
	0, 0, 0, 724, 0, 0, 0, 0, 1219, 0,
	1218, 0, 0, 697, 0, 0, 722, 0, 0, 711,
	0, 0, 724, 0, 0, 0, 719, 0, 0, 0,
	0, 0, 712, 0, 0, 722, 0, 724, 0, 0,
	0, 0, 0, 0, 877, 719, 0, 0, 0, 0,
	0, 712, 0, 718, 0, 0, 0, 0, 0, 0,
	719, 0, 0, 0, 0, 1646, 712, 0, 0, 0,
	0, 0, 718, 0, 0, 0, 724, 726, 0, 0,
	0, 0, 0, 696, 0, 714, 715, 716, 713, 722,
	0, 0, 0, 0, 0, 717, 0, 721, 725, 719,
	0, 698, 0, 723, 0, 712, 0, 713, 0, 0,
	0, 0, 0, 0, 0, 0, 721, 0, 0, 0,
	0, 697, 713, 0, 0, 0, 718, 711, 0, 0,
	0, 721, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 720, 0, 708, 709,
	710, 0, 707, 704, 705, 706, 699, 700, 701, 702,
	703, 713, 0, 0, 0, 720, 0, 708, 709, 710,
	721, 707, 704, 705, 706, 699, 700, 701, 702, 703,
	720, 0, 0, 0, 724, 0, 707, 704, 705, 706,
	699, 700, 701, 702, 703, 0, 0, 722, 696, 0,
	714, 715, 716, 0, 0, 0, 0, 719, 0, 0,
	717, 0, 0, 712, 0, 0, 698, 0, 723, 720,
	0, 708, 709, 710, 0, 707, 704, 705, 706, 699,
	700, 701, 702, 703, 718, 1189, 697, 1205, 1206, 1207,
	0, 0, 711, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 696, 0, 714, 715, 716, 0, 0, 0,
	0, 0, 0, 0, 717, 0, 0, 0, 0, 713,
	698, 696, 723, 714, 715, 716, 0, 0, 721, 1202,
	0, 0, 0, 717, 0, 0, 0, 0, 0, 698,
	697, 723, 0, 0, 0, 0, 711, 0, 0, 724,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 697,
	0, 0, 722, 0, 0, 711, 0, 0, 0, 0,
	0, 0, 719, 0, 0, 0, 0, 720, 712, 708,
	709, 710, 0, 707, 704, 705, 706, 699, 700, 701,
	702, 703, 0, 0, 0, 0, 0, 0, 0, 718,
	267, 0, 0, 724, 0, 0, 0, 0, 0, 0,
	1225, 0, 0, 0, 0, 1203, 722, 0, 0, 0,
	0, 0, 724, 0, 0, 0, 719, 0, 0, 0,
	0, 0, 712, 0, 713, 722, 0, 0, 0, 0,
	0, 0, 0, 721, 0, 719, 0, 0, 0, 0,
	0, 712, 0, 718, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1204, 718, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 713, 0,
	0, 0, 720, 0, 708, 709, 710, 721, 707, 704,
	705, 706, 699, 700, 701, 702, 703, 713, 0, 0,
	0, 0, 1331, 0, 0, 0, 721, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1199, 1200, 1201, 0, 1198, 1195, 1196, 1197, 1190,
	1191, 1192, 1193, 1194, 0, 0, 720, 0, 708, 709,
	710, 0, 707, 704, 705, 706, 699, 700, 701, 702,
	703, 0, 0, 0, 0, 720, 0, 708, 709, 710,
	0, 707, 704, 705, 706, 699, 700, 701, 702, 703,
	696, 0, 714, 715, 716, 0, 0, 0, 0, 0,
	0, 0, 717, 0, 0, 1220, 0, 0, 698, 696,
	723, 714, 715, 716, 0, 0, 0, 0, 0, 0,
	0, 717, 0, 0, 0, 0, 0, 698, 697, 723,
	0, 0, 0, 0, 711, 0, 0, 696, 0, 714,
	715, 716, 0, 0, 0, 0, 0, 697, 0, 717,
	0, 0, 1182, 711, 0, 698, 0, 723, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 697, 0, 0, 0, 0,
	0, 711, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 724, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 722, 0, 0, 0, 0, 0,
	724, 0, 0, 0, 719, 0, 0, 0, 0, 0,
	712, 0, 0, 722, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 719, 0, 0, 0, 0, 724, 712,
	0, 718, 0, 0, 19, 0, 0, 0, 0, 0,
	0, 722, 0, 0, 32, 0, 0, 0, 0, 0,
	718, 719, 0, 0, 0, 0, 0, 712, 0, 0,
	1187, 0, 0, 0, 0, 0, 713, 34, 0, 0,
	0, 0, 0, 41, 0, 721, 0, 0, 718, 0,
	0, 0, 0, 0, 0, 713, 0, 0, 0, 0,
	0, 0, 0, 0, 721, 0, 0, 0, 24, 0,
	35, 0, 0, 0, 25, 0, 0, 0, 0, 0,
	0, 0, 0, 713, 0, 0, 26, 0, 0, 0,
	0, 0, 721, 0, 720, 0, 708, 709, 710, 0,
	707, 704, 705, 706, 699, 700, 701, 702, 703, 0,
	0, 0, 0, 720, 0, 708, 709, 710, 0, 707,
	704, 705, 706, 699, 700, 701, 702, 703, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 720, 0, 708, 709, 710, 0, 707, 704, 705,
	706, 699, 700, 701, 702, 703, 696, 0, 714, 715,
	716, 0, 0, 0, 0, 0, 0, 0, 717, 0,
	37, 0, 38, 39, 698, 27, 723, 36, 0, 0,
	0, 0, 0, 0, 48, 0, 0, 0, 30, 31,
	0, 0, 0, 0, 697, 696, 33, 714, 715, 716,
	711, 0, 50, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 698, 40, 723, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 51, 0, 0,
	0, 0, 0, 697, 46, 0, 0, 0, 0, 711,
	47, 0, 0, 696, 0, 714, 715, 716, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 724, 45, 0,
	0, 698, 0, 723, 0, 0, 0, 0, 0, 0,
	722, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	719, 697, 0, 0, 0, 0, 712, 711, 0, 0,
	0, 0, 0, 0, 0, 0, 724, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 718, 0, 722,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 719,
	0, 0, 0, 0, 0, 712, 0, 0, 0, 0,
	0, 0, 0, 905, 920, 896, 913, 912, 0, 0,
	898, 897, 713, 0, 724, 922, 921, 0, 0, 0,
	0, 721, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 719, 0, 0,
	0, 0, 0, 712, 918, 0, 910, 909, 0, 0,
	0, 713, 0, 0, 908, 0, 0, 0, 0, 0,
	721, 0, 0, 0, 0, 0, 0, 907, 0, 0,
	720, 0, 708, 709, 710, 0, 707, 704, 705, 706,
	699, 700, 701, 702, 703, 0, 0, 0, 0, 0,
	901, 902, 903, 0, 570, 0, 0, 0, 0, 713,
	0, 0, 0, 0, 0, 0, 0, 0, 721, 720,
	0, 708, 709, 710, 0, 707, 704, 705, 706, 699,
	700, 701, 702, 703, 0, 0, 0, 911, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 906, 0, 0, 0, 0, 0, 720, 0, 708,
	709, 710, 0, 707, 704, 705, 706, 699, 700, 701,
	702, 703, 0, 0, 0, 0, 0, 0, 0, 904,
	0, 0, 0, 0, 0, 900, 0, 0, 0, 0,
	0, 899, 0, 0, 919, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 923,
}
var sqlPact = [...]int{

	18965, -1000, -17, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 751,
	-1000, -1000, -1000, 462, 713, 47, 1764, 1764, -1000, -1000,
	16502, 1984, 336, 346, 336, 336, 336, 336, 336, 879,
	411, 519, 57, -1000, 681, -11, 16272, 13052, 1106, -23,
	12592, 208, 18965, 12822, 13052, 16042, 944, 864, 12592, 15812,
	15582, 15352, -1000, 8450, -1000, -1000, -1000, -1000, 707, -1000,
	-24, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 706,
	-1000, 15122, 14892, 669, -1000, -1000, 398, 250, 1111, -1000,
	-10, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 943, -1000, 695, 939, 938, 937,
	935, 246, 688, -1000, 669, -1000, 669, -1000, -1000, -1000,
	-1000, -1000, -1000, 12592, -1000, 14662, 886, 14432, -1000, 681,
	-1000, -1000, -1000, 692, 1095, 1095, 1095, 1135, 84, 83,
	57, -32, 13052, -1000, 209, -1000, -1000, -1000, -1000, -1000,
	-32, 6170, 6170, -1000, -1000, 208, -1000, 227, 10942, -147,
	-1000, 5918, -1000, 809, 995, 504, 499, 994, 12592, 13052,
	446, 14202, -1000, 992, 75, 990, -1000, -37, 986, -1000,
	-47, -1000, -1000, -1000, -1000, -1000, -1000, 208, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 11192, 1144, 11192, -1000, 1175, -1000, -1000, -26, -27,
	810, 862, 8952, 8702, 1058, 881, -1000, -1000, -1000, -12,
	3382, 13052, 962, 11192, 13052, 13052, 13052, -1000, 13052, -1000,
	805, -1000, -1000, -29, -30, -1000, 85, -1000, 207, 774,
	13972, -1000, 749, -1000, 692, -1000, 709, 800, 6692, 7448,
	57, -1000, -1000, 57, 57, 7448, -1000, -1000, 13052, -32,
	1157, 13052, 933, -49, -1000, 18373, -1000, -1000, 7448, 7448,
	7448, 7448, 7448, 606, -1000, -1000, -1000, 4136, -1000, -1000,
	-147, 206, 216, -1000, -1000, 205, -147, -1000, -1000, -1000,
	-1000, 200, 1251, 341, -1000, -1000, -1000, 7448, 265, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 947, 199,
	198, -1000, -1000, -1000, -1000, 196, 190, 189, 187, 186,
	183, 182, 181, 178, 173, 172, 171, 167, 523, -1000,
	288, -1000, -1000, 288, 288, -1000, 154, 154, 156, -1000,
	-1000, -1000, 154, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 166, 94, -1000, -1000, -1000, 13052, -147, -1000,
	-1000, -1000, 3382, 7448, 3131, -51, -1000, 19126, -1000, -43,
	528, -1000, 12122, 1109, 1086, 1071, 12592, 388, 387, 13052,
	271, 61, 1149, 10442, -1000, 13052, 13052, -1000, 13052, -1000,
	-1000, 13052, 13052, 13052, -11, 11652, 384, -38, 11422, 13052,
	-1000, -18, -1000, -1000, 927, 330, 581, 861, 484, -1000,
	-1000, -1000, -1000, -34, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1232, -1000, -1000, -1000, -1000, 1243,
	-34, -1000, -1000, -1000, -1000, -1000, 1250, -1000, -1000, -1000,
	-1000, 3382, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 13052, -1000,
	-1000, -1000, -1000, -1000, -1000, 581, 861, -1000, 12592, 11882,
	980, 687, 744, -1000, 979, -1000, -1000, -1000, -1000, 19126,
	-1000, 19126, 577, 872, -1000, 872, -35, -1000, 18265, -1000,
	165, -53, -1000, 271, 10192, 6170, 19282, 13052, 391, 7448,
	7448, 7448, 7448, 7448, 7448, 7448, 7448, 7448, 7448, 7448,
	7448, 7448, 7448, 7448, 7448, 7448, 7448, 7448, 7448, 7448,
	759, 377, 883, 626, 151, 3382, -1000, 1203, 1203, 1203,
	19165, 19165, 137, -152, 17903, -36, -147, -1000, -1000, 5396,
	5144, -147, 3632, -1000, 739, 1241, 284, 19126, 967, 902,
	164, 81, 80, 7448, 736, 7448, 7700, 7448, 7448, 4388,
	7448, 7448, 7448, 7448, 7448, 7448, -1000, 161, -1000, -1000,
	-1000, -1000, 1240, -1000, -1000, 1239, -1000, 1238, 271, 76,
	-1000, -1000, 2017, -1000, -1000, 5918, -1000, 768, 13052, 13052,
	13052, -1000, -1000, 724, 13742, -1000, 19282, 13052, -1000, 158,
	157, 834, 832, 13052, 13052, 13512, 13282, 13052, 640, 13052,
	13052, 491, 482, 7448, 677, -1000, 9692, 292, 13052, 82,
	-1000, -1000, -1000, 238, 13052, -1000, -1000, -1000, 75, -1000,
	-37, -1000, -1000, 13052, 11422, -38, -40, -1000, -1000, 13052,
	861, -1000, -1000, -1000, 503, -1000, 521, -1000, 9202, -1000,
	-1000, -1000, 739, -1000, -44, -1000, -1000, -1000, -1000, 72,
	-41, -1000, -1000, -1000, -1000, 13052, 241, 13052, 13052, 978,
	13052, -1000, -1000, -1000, 7448, -1000, -1000, -1000, -11, 13052,
	-1000, 901, -42, 899, 12362, 12362, -1000, 9442, -1000, -1000,
	1119, -1000, -1000, -1000, -1000, 54, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 156, 523, 154,
	154, 154, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	288, 288, 288, -1000, -1000, 114, 422, 422, 1193, 1193,
	1193, 1644, 1644, 638, 789, 18226, 18226, 18226, 245, 256,
	256, 18226, 18226, 18226, 19165, 2751, 130, 7448, 375, 624,
	151, 7448, -1000, 982, -1000, -1000, -1000, 925, 149, 7700,
	7700, -1000, -1000, -1000, 4136, -1000, -1000, 147, 7448, -1000,
	7448, -52, -55, -1000, 19126, -1000, -58, -1000, -1000, -28,
	7448, 7448, 7448, 64, -1000, 373, -1000, 371, 370, 368,
	-1000, 146, 59, 445, -1000, 7448, 627, 145, 143, 7448,
	-1000, -1000, 18867, 51, 924, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 50, 18839, 48, 17856, -1000, 7700, 7700, 7700,
	4136, 142, 45, 18211, -123, 18820, 6422, 6422, 6422, 44,
	18561, 7448, -123, 2648, 2573, 2313, -59, -64, -69, 1231,
	-74, 43, 41, 901, -1000, -1000, 7448, -1000, -1000, -1000,
	367, 365, 977, -1000, 723, -1000, 649, 7448, 13052, 140,
	136, 572, -1000, 976, 645, 975, 645, -1000, -43, 518,
	-1000, -1000, 363, -1000, 6170, 19126, 482, 1073, -75, -1000,
	-1000, 271, 10442, 5918, -76, -1000, -44, -1000, -44, -1000,
	-1000, -1000, -1000, -1000, -1000, 13052, -1000, 11882, 133, 13052,
	111, 110, 13052, -1000, -1000, 40, -1000, -1000, -1000, -1000,
	-1000, 896, 1134, 10192, 856, 854, 10192, 914, 636, 636,
	636, -1000, -1000, -1000, 13052, 109, -1000, 9942, 39, 899,
	219, 218, -1000, 1230, 7448, 130, 7448, 7700, 7700, -1000,
	130, -1000, -1000, -1000, -1000, 920, 108, 7448, 19282, 17550,
	17244, -82, 4892, -45, 17884, 7448, -1000, -1000, 216, -1000,
	37, 5666, -1000, 18488, -19, -19, -1000, 776, 769, 552,
	452, 1208, 1247, 1011, -1000, 7448, 18542, -1000, 10692, 280,
	630, 17625, 19282, -1000, 7448, -1000, 919, 7448, -1000, 19282,
	7700, 7700, 7700, 7700, 7700, 7700, 7700, 7700, 7700, 7700,
	7700, 7700, 7700, 7700, 7700, 7700, 7700, 7700, 816, 7700,
	1202, 1202, 1202, -48, 4640, -1000, 916, 919, 7448, 7448,
	19282, 34, 33, 27, -1000, 7448, -123, 7448, 7448, 7448,
	-1000, -1000, -1000, 23, -1000, 1207, -1000, -1000, 896, 17931,
	13052, 13052, 13052, 973, 1314, -1000, 17597, -83, 13052, 13052,
	-1000, 840, 815, 321, 13052, -1000, 13052, -1000, 13052, 13052,
	13052, 13052, -49, -1000, 139, -11, 482, -1000, -1000, 237,
	-1000, -1000, 8200, 104, 11882, 8200, 674, -1000, 268, 7448,
	7448, 899, 10192, 10192, 1118, 836, 10192, -1000, -1000, -1000,
	-1000, 103, 13052, 12362, 397, 1206, 20, 1150, 130, 2802,
	2290, 7448, 19282, 19213, -87, -1000, 7448, 7448, -1000, -88,
	-1000, 7448, -1000, 19126, -1000, 1246, 7448, 16, 14, 13,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 12, -1000, -1000,
	19126, 7448, -1000, -1000, 16732, 7448, 11, -1000, 5, 19126,
	916, 19126, -1000, 476, 476, 1202, 1202, 1202, 929, 929,
	413, 594, 465, 465, 465, 281, 379, 379, 465, 465,
	465, 917, 833, 102, 2121, 7448, -92, -1000, -1000, -1000,
	19126, 19126, 3, -1000, -1000, -1000, -123, 2240, 17578, 17319,
	-1000, 2, 268, -1000, -1000, -1000, -1000, 13052, -1000, 13052,
	-1000, 13052, 720, -1000, -1000, 817, 101, 7700, 13052, -1000,
	582, -94, -98, 719, -1000, 717, 7448, -1000, 19282, 645,
	645, -1000, 353, 349, -1000, 1018, 8200, 1067, -1000, -1000,
	100, -100, -1000, 73, 1093, 7448, -1000, -1000, 99, 8200,
	-2, -102, 13052, -1000, 13052, 19126, -123, -1000, 1118, -1000,
	97, 7448, 10192, -1000, 13052, -107, -1000, -1000, 212, 77,
	-1000, 7448, 7448, 19213, -109, -1000, 19282, 130, 130, -1000,
	17291, -1000, 18488, -1000, -1000, -1000, -1000, 19126, 578, -1000,
	17272, -1000, -1000, -1000, 7700, 913, 96, 19282, 17013, -1000,
	-1000, 7448, -1000, -1000, -1000, -1000, -1000, 1601, -1000, -1000,
	-1000, 7448, 2121, 87, -1000, 95, -1000, -1000, -1000, 511,
	-1000, -1000, 19126, 1122, -1000, -1000, 13052, 13052, 406, -113,
	13052, -1000, -1000, 3884, 582, 8200, 1076, -147, 13052, 1076,
	16985, 3632, -125, -1000, 582, 92, -66, -1000, 1148, -1000,
	13052, 19126, -1000, -126, -1000, -1000, -1000, 130, 130, -1000,
	-1000, -1000, -5, 630, 1120, -1000, 18525, 7700, 19282, -130,
	-1000, 16966, -1000, 2833, 791, 13052, 13052, 13052, 300, 13052,
	-1000, -1000, 431, -1000, 271, -1000, -1000, -1000, -1000, -1000,
	-1000, 1093, -28, 582, -1000, 8200, 13052, 88, -132, -1000,
	-1000, 488, 7448, 18525, -136, -1000, -1000, -1000, 657, 646,
	-138, -142, 87, -1000, 7448, -1000, 10442, -1000, 1076, -6,
	-1000, -144, -1000, -1000, -1000, -7, 7196, 7196, -123, -1000,
	-1000, 673, 670, 486, -1000, -1000, -1000, -1000, -1000, 791,
	19126, -118, -1000, -1000, 582, -1000, -1000, -1000, 7950, 668,
	464, 18192, -1000, -1000, 1029, -1000, 314, 742, 742, 657,
	-1000, -1000, 1182, -1000, -1000, -1000, -1000, -1000, -1000, 1190,
	-1000, -1000, 857, -1000, -1000, 6944, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1476, 1475, 1158, 1474, 1473, 1471, 1469, 1468, 77,
	1465, 1462, 97, 1456, 76, 1439, 1433, 1432, 48, 1427,
	1421, 1420, 1416, 70, 57, 117, 1703, 107, 1408, 1405,
	1404, 12, 80, 79, 1403, 47, 85, 89, 1363, 44,
	18, 29, 153, 73, 1402, 1401, 1400, 1399, 30, 1397,
	1396, 1393, 9, 45, 15, 1392, 13, 22, 1391, 1389,
	75, 1388, 84, 87, 39, 106, 157, 1387, 56, 1386,
	8, 46, 1385, 31, 1382, 23, 59, 99, 1378, 33,
	500, 43, 20, 50, 1376, 1375, 1374, 1373, 66, 64,
	38, 1371, 1369, 62, 1368, 98, 108, 1365, 1361, 1359,
	1358, 1357, 1354, 1101, 1353, 1352, 532, 3, 25, 55,
	27, 95, 88, 28, 0, 745, 724, 1351, 36, 26,
	53, 35, 40, 24, 1350, 86, 1349, 1348, 1347, 1346,
	1342, 54, 1341, 49, 111, 34, 69, 72, 10, 37,
	65, 112, 118, 81, 1339, 105, 1338, 52, 1337, 1335,
	558, 63, 1334, 1333, 1331, 504, 323, 300, 41, 1330,
	1329, 280, 42, 1326, 1325, 61, 1322, 1319, 114, 1318,
	109, 104, 1316, 91, 1313, 71, 1311, 281, 92, 82,
	1306, 100, 51, 1304, 1303, 1292, 16, 2, 6, 5,
	7, 4, 17, 11, 1288, 1286, 94, 67, 1285, 356,
	1283, 1282, 32, 1281, 1279, 21, 1278, 19, 1276, 14,
	1, 1275, 113, 1269, 78, 1266, 1205, 1265, 116, 1259,
	1258, 1260, 60,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	4, 4, 33, 33, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 29,
	29, 35, 35, 35, 34, 34, 30, 30, 5, 5,
	5, 9, 10, 10, 10, 10, 10, 10, 65, 65,
	64, 64, 67, 67, 11, 11, 12, 12, 12, 12,
	146, 146, 145, 13, 17, 212, 212, 212, 216, 216,
	217, 217, 218, 218, 218, 218, 218, 218, 218, 214,
	214, 19, 19, 19, 19, 103, 103, 105, 105, 105,
	105, 37, 102, 102, 102, 102, 104, 104, 104, 104,
	170, 168, 168, 175, 175, 175, 45, 45, 45, 45,
	45, 46, 46, 46, 167, 167, 167, 167, 176, 176,
	176, 176, 176, 176, 47, 47, 47, 174, 174, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 169, 169, 213, 213, 215, 215, 8, 8,
	48, 48, 49, 49, 109, 109, 109, 108, 184, 184,
	185, 185, 185, 186, 186, 186, 186, 186, 186, 186,
	183, 183, 181, 181, 182, 182, 182, 182, 219, 219,
	107, 107, 52, 52, 189, 189, 189, 189, 187, 187,
	187, 187, 187, 190, 188, 191, 191, 191, 191, 191,
	134, 134, 134, 22, 7, 7, 92, 92, 56, 56,
	138, 138, 138, 41, 41, 31, 31, 31, 16, 16,
	16, 16, 16, 16, 16, 16, 16, 93, 93, 94,
	94, 21, 21, 21, 21, 21, 21, 21, 21, 221,
	221, 106, 106, 106, 106, 106, 36, 6, 6, 14,
	44, 44, 99, 99, 99, 101, 101, 101, 100, 100,
	100, 79, 79, 23, 70, 70, 71, 71, 144, 72,
	72, 18, 18, 26, 26, 24, 24, 24, 24, 24,
	24, 25, 25, 27, 27, 27, 27, 27, 27, 27,
	197, 197, 197, 199, 199, 196, 15, 15, 15, 15,
	198, 198, 220, 220, 80, 80, 80, 51, 50, 50,
	54, 54, 53, 55, 55, 137, 77, 77, 77, 77,
	95, 96, 96, 97, 97, 98, 98, 76, 76, 121,
	121, 28, 28, 60, 60, 61, 61, 139, 139, 139,
	139, 140, 140, 140, 140, 140, 140, 135, 135, 135,
	135, 136, 136, 83, 83, 83, 83, 81, 81, 82,
	82, 141, 141, 141, 141, 78, 78, 142, 142, 142,
	110, 110, 147, 147, 147, 59, 59, 59, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 149,
	149, 149, 149, 151, 151, 151, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 152,
	152, 159, 159, 160, 160, 161, 162, 153, 153, 154,
	154, 155, 156, 163, 163, 163, 165, 165, 157, 157,
	158, 89, 89, 89, 89, 89, 89, 89, 89, 89,
	89, 89, 89, 89, 89, 90, 90, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 192, 192,
	192, 192, 192, 192, 192, 194, 194, 195, 195, 193,
	193, 193, 193, 193, 193, 193, 193, 193, 193, 193,
	193, 193, 193, 193, 193, 193, 193, 193, 193, 193,
	193, 193, 193, 193, 200, 200, 201, 201, 202, 202,
	203, 203, 205, 206, 206, 206, 207, 211, 211, 204,
	204, 208, 208, 208, 209, 209, 210, 210, 210, 210,
	210, 125, 125, 125, 126, 126, 127, 66, 66, 123,
	123, 122, 122, 122, 124, 124, 84, 164, 164, 164,
	164, 164, 164, 164, 85, 85, 91, 86, 86, 87,
	87, 87, 87, 87, 87, 118, 119, 88, 88, 88,
	120, 120, 128, 132, 132, 131, 130, 130, 129, 129,
	113, 113, 113, 113, 113, 112, 111, 73, 73, 222,
	222, 133, 133, 74, 74, 75, 69, 69, 68, 68,
	143, 143, 143, 143, 62, 62, 63, 63, 42, 42,
	43, 43, 43, 43, 57, 57, 58, 58, 40, 40,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 166, 166, 166, 38, 38, 38, 39, 39, 172,
	172, 172, 173, 173, 173, 173, 171, 171, 171, 171,
	171, 177, 177, 177, 177, 177, 177, 177, 177, 177,
	177, 177, 177, 177, 177, 177, 177, 177, 177, 177,
	177, 177, 177, 177, 177, 177, 177, 177, 177, 177,
	177, 177, 177, 177, 177, 177, 177, 177, 177, 177,
	177, 177, 177, 177, 177, 177, 177, 177, 177, 177,
	177, 177, 177, 177, 177, 177, 177, 177, 177, 177,
	177, 177, 177, 177, 177, 177, 177, 177, 177, 177,
	177, 177, 177, 177, 177, 177, 177, 177, 177, 177,
	177, 177, 177, 177, 177, 177, 177, 177, 177, 177,
	177, 177, 177, 177, 177, 177, 177, 177, 177, 177,
	177, 179, 179, 179, 179, 179, 179, 179, 179, 179,
	179, 179, 179, 179, 179, 179, 179, 179, 179, 179,
	179, 179, 179, 179, 179, 179, 179, 179, 179, 179,
	179, 179, 179, 179, 179, 179, 179, 179, 179, 179,
	179, 179, 179, 179, 178, 178, 178, 178, 178, 178,
	178, 178, 178, 178, 178, 178, 178, 180, 180, 180,
	180, 180, 180, 180, 180, 180, 180, 180, 180, 180,
	180, 180, 180, 180, 180, 180, 180, 180, 180, 180,
	180, 180, 180, 180, 180, 180, 180, 180, 180, 180,
	180, 180, 180, 180, 180, 180, 180, 180, 180, 180,
	180, 180, 180, 180, 180, 180, 180, 180, 180, 180,
	180, 180, 180, 180, 180, 180, 180, 180, 180, 180,
	180, 180, 180, 180, 180, 180, 180, 180, 180, 180,
	180, 180, 180, 180, 180,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	4, 6, 1, 3, 2, 5, 3, 6, 4, 6,
	6, 6, 4, 8, 2, 3, 3, 6, 4, 3,
	2, 1, 1, 0, 2, 0, 2, 0, 1, 1,
	1, 6, 3, 5, 4, 6, 3, 5, 1, 3,
	1, 2, 2, 3, 2, 5, 1, 1, 1, 1,
	1, 3, 1, 6, 6, 1, 2, 2, 1, 1,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 2, 3, 6, 3, 2, 1, 1, 1, 3,
	3, 2, 3, 3, 3, 3, 1, 3, 3, 2,
	1, 1, 3, 1, 1, 1, 2, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 1, 1, 1, 1, 1, 0, 1, 1, 2,
	2, 4, 2, 4, 4, 4, 4, 3, 3, 4,
	3, 2, 2, 0, 2, 0, 2, 0, 6, 9,
	1, 0, 1, 3, 1, 1, 1, 3, 2, 0,
	3, 1, 2, 2, 1, 1, 2, 4, 2, 5,
	6, 7, 3, 1, 4, 5, 5, 10, 1, 1,
	4, 0, 3, 0, 2, 2, 2, 0, 1, 1,
	2, 2, 0, 3, 3, 2, 1, 1, 2, 2,
	1, 2, 1, 4, 10, 13, 1, 0, 1, 3,
	3, 3, 5, 2, 0, 1, 1, 0, 6, 6,
	8, 6, 8, 8, 10, 8, 10, 1, 0, 2,
	0, 3, 3, 2, 2, 2, 2, 2, 2, 1,
	0, 1, 1, 3, 3, 0, 3, 3, 6, 7,
	1, 3, 1, 4, 2, 8, 5, 0, 4, 3,
	0, 2, 0, 8, 1, 3, 1, 1, 3, 5,
	5, 1, 1, 3, 3, 1, 2, 3, 2, 3,
	4, 1, 1, 8, 8, 1, 2, 4, 4, 4,
	2, 2, 3, 1, 3, 6, 1, 1, 1, 1,
	1, 0, 1, 0, 1, 1, 0, 1, 1, 0,
	1, 0, 3, 1, 3, 2, 2, 2, 1, 1,
	2, 2, 3, 1, 1, 1, 1, 3, 0, 2,
	0, 2, 3, 2, 0, 1, 3, 2, 2, 1,
	4, 3, 4, 5, 4, 5, 4, 5, 2, 4,
	1, 1, 0, 2, 2, 2, 1, 1, 0, 4,
	2, 1, 2, 2, 4, 1, 3, 1, 2, 3,
	2, 0, 2, 5, 2, 3, 4, 0, 1, 1,
	1, 1, 2, 4, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 5, 0, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 2, 2, 1, 1, 3,
	0, 1, 1, 1, 1, 5, 2, 1, 1, 1,
	1, 4, 1, 2, 2, 1, 1, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 3, 3,
	3, 3, 3, 3, 0, 1, 4, 1, 3, 3,
	5, 2, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 2, 2, 3, 4, 4, 5,
	3, 4, 3, 3, 4, 3, 4, 3, 4, 5,
	6, 6, 7, 6, 7, 6, 7, 3, 4, 1,
	3, 2, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 5, 6, 6, 7, 1, 1, 1, 3,
	1, 1, 1, 2, 2, 2, 1, 1, 3, 5,
	6, 8, 6, 6, 4, 4, 1, 1, 1, 5,
	1, 3, 1, 3, 1, 1, 1, 1, 6, 4,
	4, 4, 4, 6, 5, 5, 5, 4, 8, 6,
	6, 4, 4, 4, 5, 0, 5, 0, 2, 0,
	1, 3, 3, 2, 2, 0, 6, 1, 0, 3,
	0, 2, 2, 0, 1, 4, 2, 2, 2, 2,
	2, 4, 3, 5, 4, 3, 5, 1, 3, 1,
	3, 3, 3, 2, 1, 3, 3, 1, 1, 1,
	1, 1, 1, 1, 4, 3, 2, 3, 0, 3,
	3, 2, 2, 1, 0, 2, 2, 3, 2, 1,
	1, 3, 5, 1, 2, 4, 2, 0, 1, 0,
	1, 1, 2, 3, 5, 2, 2, 1, 2, 1,
	0, 1, 1, 1, 3, 3, 1, 0, 1, 3,
	3, 2, 1, 1, 1, 3, 1, 3, 1, 2,
	1, 2, 2, 1, 1, 3, 3, 0, 1, 2,
	1, 1, 1, 1, 6, 2, 3, 5, 1, 1,
	1, 1, 2, 2, 1, 1, 1, 1, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -9, -10, -11, -13,
	-14, -16, -17, -18, -19, -20, -21, -22, -23, 19,
	-6, -7, -8, -198, 83, 89, 101, 190, -24, -26,
	203, 204, 29, 211, 52, 85, 192, 185, 187, 188,
	229, 58, -197, -27, -25, 273, 249, 255, 199, -28,
	217, 242, 276, 217, 70, 112, 78, 117, 236, 70,
	112, 217, -12, 273, -18, -14, -23, -9, -216, 18,
	-217, -218, 58, 83, 101, 199, 117, 78, 236, -216,
	-103, 136, 201, 225, -104, -102, -170, 221, 145, -64,
	-38, 4, -177, -179, 16, 17, 19, 28, 29, 33,
	37, 40, 51, 52, 53, 55, 57, 60, 61, 68,
	69, 70, 71, 73, 78, 82, 83, 89, 93, 94,
	96, 102, 107, 108, 113, 117, 115, 125, 127, 128,
	133, 139, 141, 142, 143, 144, 147, 148, 149, 151,
	154, 156, 157, 163, 166, 169, 170, 173, 176, 177,
	178, 180, 181, 185, 183, 184, 187, 186, 188, 190,
	192, 193, 195, 197, 198, 200, 203, 204, 206, 208,
	210, 211, 214, 212, 218, 219, 229, 230, 231, 232,
	235, 236, 239, 240, 241, 245, 250, 251, 252, 253,
	30, 31, 32, 34, 35, 38, 39, 43, 44, 45,
	47, 72, 74, 75, 88, 90, 95, 103, 105, 109,
	110, 118, 119, 120, 122, 131, 153, 155, 164, 168,
	172, 174, 179, 194, 207, 213, 215, 222, 226, 227,
	242, 243, 4, 70, 51, 71, 102, 112, 113, 128,
	218, 221, 225, 18, -221, 225, 225, -221, -221, -221,
	-221, -221, 115, -220, 217, 217, -92, 70, 234, -25,
	-27, -26, -53, -54, 233, 121, 87, 162, -24, -26,
	-197, -199, 180, -196, -38, 136, 145, 201, 225, 221,
	-199, -50, -51, 18, 80, 277, -141, -42, 160, -38,
	-75, 273, -3, -141, 109, -38, -42, 109, 99, 123,
	-142, -141, -38, 109, -62, 109, -42, -65, 109, -64,
	-146, -145, -173, 4, -177, -179, -178, 242, 49, 59,
	100, 116, 124, 126, 132, 134, 146, 165, 167, 191,
	205, 159, 277, 159, -103, 45, -103, -105, -36, -37,
	125, 176, 223, 258, 99, 253, -47, 6, 76, -67,
	275, 99, -213, 159, 99, 99, 99, -169, 99, 253,
	125, 176, -106, -36, -37, -106, -78, -141, -64, 109,
	112, -38, 109, -53, -54, -77, -95, -96, 135, 158,
	-80, 18, 80, -80, -80, 37, 274, 274, 277, -199,
	-58, 273, -69, -68, -143, -114, 266, -116, 264, 265,
	270, 150, 254, -125, -42, -117, 9, 273, -128, -194,
	-26, 88, 24, -126, -127, 194, -38, 8, 5, 6,
	7, -40, -149, -158, 228, 91, 152, 41, -192, -193,
	4, -177, -172, -150, -160, -154, -157, 122, 49, 63,
	66, 64, 67, 202, 237, 42, 90, 168, 172, 215,
	226, 227, 109, 153, 110, 47, 103, 131, 82, 31,
	32, 34, 35, 43, 44, 72, 74, 75, 95, 118,
	119, 120, 155, 179, 207, 222, 243, -178, -161, -162,
	-155, -156, -163, -68, -75, 266, -42, 273, -73, -113,
	-112, -111, 278, 271, 275, -74, -133, -114, 76, -33,
	183, -32, 17, 19, 83, 240, 88, 183, 183, 88,
	-142, -44, -42, 203, -38, 25, 88, -35, 277, 40,
	186, 88, 277, 88, 274, 277, -212, -63, 217, 70,
	-43, -38, 266, -218, -212, 25, 277, 277, 133, -46,
	139, 149, 107, -168, 76, -175, -167, -134, 9, 228,
	91, 159, -174, 5, 265, -166, -173, 6, 8, 264,
	-168, 76, 61, -176, 6, 4, -158, -134, 76, 136,
	122, 275, -171, 4, -177, -179, -178, -180, 18, 20,
	21, 22, 23, 24, 25, 26, 27, 36, 41, 42,
	46, 48, 50, 56, 58, 62, 63, 64, 65, 66,
	67, 76, 77, 79, 80, 81, 84, 85, 87, 91,
	92, 97, 98, 99, 101, 104, 106, 111, 112, 114,
	121, 123, 129, 130, 135, 137, 138, 150, 152, 158,
	159, 160, 161, 162, 171, 175, 182, 189, 199, 202,
	209, 216, 217, 220, 223, 224, 228, 233, 234, 237,
	238, 244, 246, 247, 248, 249, -170, -215, 97, -212,
	-170, -170, -170, -170, 133, 277, 277, -35, 277, 273,
	150, -39, 109, -38, 150, -77, -96, -95, -97, -114,
	18, -114, -116, -25, -25, -25, -55, -137, -114, -196,
	25, -57, -38, -60, 99, 277, 10, 48, 28, 264,
	265, 266, 267, 268, 261, 262, 263, 260, 256, 257,
	258, 54, 140, 196, 12, 13, 14, 22, 161, 134,
	254, 205, 124, 30, 111, 25, 4, -114, -114, -114,
	-114, -114, 167, -26, -114, -66, -73, -26, -122, 271,
	273, -73, 273, 6, 6, 273, -129, -114, -200, 250,
	97, 273, 273, 273, 273, 273, 273, 273, 273, 273,
	273, 273, 273, 273, 273, 273, 174, -165, 245, -165,
	-165, -151, 273, -151, -152, 273, -151, 273, -60, -42,
	-113, -171, -114, -171, 266, 277, 274, 277, 223, -93,
	56, 50, -108, 109, 50, -181, -38, 56, -182, 46,
	234, 175, 98, -93, 56, -93, 56, 56, -141, 223,
	223, -42, -110, 247, -99, -18, 273, 76, 25, -70,
	-71, -144, -72, -42, 273, -38, -38, -42, -62, -64,
	-65, -12, -145, 223, 277, -63, -57, -112, -111, 99,
	225, -37, -36, -45, 178, 208, 184, 200, 277, 5,
	8, 8, 6, -171, -214, -38, -37, -36, -141, -48,
	-49, -109, -108, -183, -181, 112, 234, 88, 159, 150,
	88, -98, 194, 195, 277, -31, 26, 79, 273, 277,
	274, -110, -61, -139, -141, -26, -140, 273, -143, -147,
	-148, -150, -159, -153, -157, -158, 33, 39, 38, 219,
	213, 118, 119, 120, 207, 31, 179, 95, 82, 75,
	74, 155, 35, 34, -161, -162, -155, -156, 72, 222,
	32, 44, 43, 243, -64, 221, -114, -114, -114, -114,
	-114, -114, -114, -114, -114, -114, -114, -114, -114, -114,
	-114, -114, -114, -114, -114, -114, -114, 134, 205, 30,
	111, 223, 152, 150, 228, 91, 235, 80, 156, -222,
	216, 27, -120, -26, 273, -171, -125, 194, 273, 274,
	277, -66, -124, 272, -114, -122, -66, 274, 274, -66,
	244, 18, 80, 266, -89, 252, 143, 73, 108, 142,
	-90, 198, 8, -132, -131, 246, -201, 93, 104, 273,
	274, 274, -114, -84, -164, 4, 252, 143, 73, 108,
	142, 198, -85, -114, -86, -115, -116, 264, 265, 270,
	273, 194, -87, -114, -66, -114, 36, 130, 224, -88,
	-114, 99, -66, -114, -114, -114, -66, -66, -66, 273,
	8, 8, 8, -110, 274, 272, 279, -133, -32, -42,
	-38, -38, 150, -108, 109, -147, -38, 273, 273, 127,
	127, -38, -38, 109, -38, 109, -38, -38, -33, 183,
	-38, -38, 183, -79, 189, -114, -101, 159, -62, 242,
	-38, -60, 277, 258, -62, -35, -214, -43, -214, -36,
	232, 53, 178, -175, -89, 277, 274, 277, -39, 112,
	-64, -42, 88, -38, -137, -15, -18, -14, -23, -9,
	-38, -76, 104, 277, 59, -83, 126, 146, 100, 132,
	191, 116, -136, -135, 25, -38, -136, -26, -140, -139,
	-59, 24, -89, 273, 253, -114, 223, -222, 216, -120,
	-114, 152, 228, 91, 235, 80, 156, 99, 273, -115,
	-115, -66, 273, -66, -114, 277, 272, 272, 277, 274,
	-54, 277, -53, -114, -66, -66, 274, 223, 223, 223,
	223, 273, 274, -130, -131, 84, -114, -206, 166, 273,
	273, -114, 25, 274, 99, 274, -91, 171, 274, 10,
	264, 265, 266, 267, 268, 261, 262, 263, 260, 256,
	257, 258, 54, 140, 196, 12, 13, 14, 124, 111,
	-115, -115, -115, -66, 273, 274, -118, -119, 99, 97,
	25, -88, -88, -88, 274, 99, -66, 277, 277, 277,
	274, 274, 274, 8, 274, 277, 274, 274, -76, -114,
	223, 223, 88, 150, -184, -182, -114, -57, 273, 273,
	-29, 83, 203, -94, 88, -35, 88, -35, 223, -93,
	56, 223, -68, -79, 55, 274, -110, -71, -133, 274,
	-38, -109, 273, -39, 273, 273, -38, 274, -121, 106,
	37, -139, 126, 126, -139, -83, 126, -81, 165, -81,
	-81, -38, 273, 274, 271, 271, 8, -114, -114, -115,
	-115, 99, 273, -114, -123, -147, 22, 22, 274, -66,
	274, 277, 274, -114, -122, 274, 244, -54, -54, -54,
	143, 108, 142, -90, 142, -90, -90, 8, 6, 85,
	-114, 220, -207, -38, 273, 247, -53, 274, -147, -114,
	-118, -114, -147, -115, -115, -115, -115, -115, -115, -115,
	-115, -115, -115, -115, -115, -115, -115, -115, -115, -115,
	-115, 80, 150, 156, -115, 277, -66, 274, -119, -118,
	-114, -114, -147, 274, 274, 274, -66, -114, -114, -114,
	274, 8, -121, 272, -38, -38, -108, 88, -185, 56,
	-186, 48, 150, 152, 234, 175, 46, 76, 182, 274,
	274, -57, -57, 150, 76, 150, 76, 69, 230, -38,
	-38, -42, -38, -38, -38, -100, 273, 159, -18, -79,
	258, -56, -138, -38, -195, 273, -192, -193, -40, 273,
	-48, -56, 159, -202, 248, -114, -66, -139, -139, -82,
	238, 159, 126, -139, 273, -57, -135, 272, 8, 8,
	274, 22, 22, -114, -123, 274, 277, -114, -114, 274,
	-114, 6, -114, 274, 274, 274, 274, -114, -211, -38,
	-114, 274, 274, -119, 99, 80, 156, 273, -114, 274,
	274, 277, 274, 274, 274, -202, -108, -38, -64, 152,
	127, 273, -115, -42, -107, -219, 57, 214, 274, 274,
	152, 152, -114, -147, -35, -35, 223, 223, 81, -56,
	56, -75, -26, 273, 274, 277, -41, -73, 48, -41,
	-114, 273, -56, 274, 274, -42, -203, -205, -38, -82,
	273, -114, -139, -57, 274, 272, 272, -114, -114, 274,
	-147, 274, -54, -204, 170, 274, -115, 99, 273, -123,
	274, -114, -186, -114, -52, 273, 273, 182, -34, 48,
	-38, -38, 236, 151, 274, -38, -107, -138, -31, -64,
	-31, 274, -66, 274, -107, 273, 277, 25, -57, 274,
	274, -54, 37, -115, -123, 274, 274, 274, -189, 141,
	-57, -57, -42, -30, 238, -64, 203, -110, -41, -54,
	-107, -56, -205, -207, 274, -208, 177, 195, -66, 274,
	-187, -190, -188, 159, 100, 169, 206, 274, 274, -52,
	-114, -70, -31, 274, 274, 274, -209, -210, 30, 231,
	61, -114, -209, -188, 159, -190, 159, 236, 78, -189,
	-110, -107, -210, 173, 96, 194, 173, 96, -191, 148,
	186, 40, 203, -191, -187, 22, 16, 152, 76, -210,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 0,
	48, 49, 50, 0, 0, 311, 0, 0, 281, -2,
	0, 0, 250, 0, 250, 250, 250, 250, 250, 0,
	313, 217, 310, -2, 321, 0, 0, 0, 319, 295,
	0, 0, -2, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 64, 0, 66, 67, 68, 69, 0, 78,
	79, 80, 82, 83, 84, 85, 86, 87, 88, 0,
	91, 768, 805, 816, 96, 106, 0, 868, -2, 110,
	60, 714, 715, 716, 731, 732, 733, 734, 735, 736,
	737, 738, 739, 740, 741, 742, 743, 744, 745, 746,
	747, 748, 749, 750, 751, 752, 753, 754, 755, 756,
	757, 758, 759, 760, 761, 762, 763, 764, 765, 766,
	767, 769, 770, 771, 772, 773, 775, 776, 777, 778,
	779, 780, 781, 782, 783, 784, 785, 786, 787, 788,
	789, 790, 791, 792, 793, 794, 795, 796, 797, 798,
	799, 800, 801, 802, 803, 804, 806, 807, 808, 809,
	810, 811, 812, 813, 814, 815, 817, 818, 819, 820,
	821, 822, 823, 824, 825, 826, 827, 828, 829, 830,
	831, 832, 833, 834, 835, 836, 837, 838, 839, 840,
	841, 842, 843, 844, 845, 846, 847, 848, 849, 850,
	851, 852, 853, 854, 855, 856, 857, 858, 859, 860,
	861, 862, 863, 864, 865, 866, 867, 869, 870, 871,
	872, 873, 139, 140, 0, 142, 155, 0, 0, 0,
	153, 0, 0, 151, 255, 249, 255, 243, 244, 245,
	246, 247, 248, 0, 312, 0, 0, 0, 216, -2,
	291, 292, -2, 0, 316, 316, 316, 0, 0, 292,
	0, 300, 790, 303, 697, 768, 774, 805, 816, 868,
	301, 677, 0, 318, 317, 0, 296, 371, 0, 688,
	341, 0, 2, 0, 850, 0, 0, 850, 0, 0,
	0, 377, 52, 850, 43, 850, 684, 56, 850, 58,
	0, 70, 72, 722, 723, 724, 725, 872, 874, 875,
	876, 877, 878, 879, 880, 881, 882, 883, 884, 885,
	886, 0, 0, 0, 92, 840, 94, 95, 97, 98,
	0, 0, 0, 0, 0, 0, 109, 134, 135, 61,
	0, 0, 157, 0, 0, 0, 0, 147, 0, 148,
	0, 150, 241, 251, 252, 242, 43, 375, 0, 850,
	718, 257, 850, -2, 0, 287, 328, 329, 0, 0,
	0, 314, 315, 0, 0, 0, 283, 284, 0, 302,
	0, 0, 344, 676, 678, 682, 683, 457, 0, 0,
	0, 0, 0, 0, 536, 537, 538, 0, 540, 541,
	542, 845, 0, 546, 547, 864, 688, 700, 701, 702,
	703, 0, 0, 0, 708, 709, 710, 659, 585, 556,
	-2, -2, 698, 399, 400, 401, 402, -2, 874, 560,
	562, 564, 565, 566, 567, 0, 846, 860, 861, 867,
	870, 871, 850, 857, 851, 841, 848, 856, 752, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, 721, 423, 424,
	429, 430, 432, 344, 342, 372, 373, 0, 689, 667,
	660, 661, 0, 0, 0, 0, 673, 671, 672, 20,
	238, 22, 0, 238, 238, 0, 0, 0, 0, 0,
	381, 0, 260, 0, 378, 0, 0, 54, 0, 41,
	42, 0, 0, 0, 311, 0, 0, 75, 0, 748,
	686, 690, 693, 81, 0, 0, 0, 0, 0, 101,
	121, 122, 123, 102, 104, 111, 113, 114, 115, 124,
	125, 126, 127, 210, 0, 212, 137, 138, 711, 0,
	103, 105, 107, 108, 128, 129, 0, 131, 132, 133,
	440, 0, 62, 726, 727, 728, 729, 730, 887, 888,
	889, 890, 891, 892, 893, 894, 895, 896, 897, 898,
	899, 900, 901, 902, 903, 904, 905, 906, 907, 908,
	909, 910, 911, 912, 913, 914, 915, 916, 917, 918,
	919, 920, 921, 922, 923, 924, 925, 926, 927, 928,
	929, 930, 931, 932, 933, 934, 935, 936, 937, 938,
	939, 940, 941, 942, 943, 944, 945, 946, 947, 948,
	949, 950, 951, 952, 953, 954, 955, 956, 957, 958,
	959, 960, 961, 962, 963, 964, 141, 143, 0, 154,
	144, 145, 146, 152, 149, 0, 0, 213, 0, 161,
	0, 0, 850, 717, 0, 290, 326, 327, 330, 333,
	334, 331, 457, 297, 298, 299, 322, 323, 227, 304,
	0, 0, 694, 381, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 670, 0, 0, 681, 461, 462, 463,
	484, 485, 0, -2, 617, 0, 543, 544, 545, 0,
	0, -2, 0, 705, 454, 0, 0, 658, 587, 0,
	0, 0, 0, 0, 0, 0, 638, 644, 0, 0,
	0, 0, 0, 0, 0, 0, 413, 426, 436, 434,
	433, 415, 0, 414, 412, 0, 416, 0, 381, 0,
	668, 662, 0, 665, 666, 0, 675, 0, 0, 0,
	0, 237, 24, 850, 0, 34, 0, 0, 183, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 272, 0, 267, 262, 0, 0, 0, 344,
	274, 276, 277, 0, 0, 379, 53, 685, 43, 59,
	57, 65, 71, 0, 0, 76, 77, 691, 692, 0,
	0, 99, 100, 256, 0, 118, 0, 120, 0, 211,
	713, 712, 454, 63, 156, 89, 253, 254, 376, 0,
	160, 162, 164, 165, 166, 718, 0, 0, 0, 0,
	0, 332, 335, 336, 0, 325, 225, 226, 311, 0,
	696, 338, 343, 345, 362, 362, 349, 0, 679, 458,
	387, 388, 389, 390, 391, 454, 394, 395, 396, 397,
	398, 406, 407, 408, 409, 410, 411, 420, 0, 405,
	405, 405, 417, 418, 421, 422, 427, 428, 438, 439,
	437, 437, 437, 435, 459, 0, 464, 465, 466, 467,
	468, 469, 470, 471, 472, -2, -2, -2, 476, 477,
	478, -2, -2, -2, 482, 483, -2, 0, 0, 670,
	0, 0, 490, 0, 493, 495, 497, 0, 0, 0,
	0, 669, 507, 650, 0, 680, 492, 0, 0, 539,
	0, 0, 0, 623, 617, 624, 0, -2, 548, 321,
	0, 0, 0, 0, 706, 441, 442, 443, 444, 445,
	446, 455, 0, 657, 653, 0, 595, 0, 0, 0,
	561, 563, 0, 0, 0, 627, 628, 629, 630, 631,
	632, 633, 0, 0, 0, 0, 509, 0, 0, 0,
	0, 864, 0, 617, 643, 0, 0, 0, 0, 0,
	617, 0, 649, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 338, 374, 663, 0, 674, 23, 229,
	0, 0, 0, 26, 850, 169, 0, 0, 0, 0,
	0, 240, 35, 850, 43, 850, 43, 36, 21, 238,
	228, 231, 0, 51, 0, 380, 272, 0, 0, 264,
	261, 381, 0, 0, 0, 55, 73, 687, 74, 93,
	116, 117, 119, 112, 130, 0, 158, 0, 0, 718,
	0, 0, 0, 258, 324, 0, 306, 307, 308, 309,
	695, 340, 0, 0, 0, 0, 0, 0, 368, 368,
	368, 366, 347, 361, 0, 360, 348, -2, 349, 0,
	382, 384, 392, 0, 0, -2, 0, 0, 0, 508,
	-2, 491, 494, 496, 498, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 618, 0, 621, 622, 0, -2,
	0, 0, 320, 321, 321, 321, 554, 0, 0, 0,
	0, 0, 0, 0, 654, 0, 0, 555, 0, 0,
	0, 0, 0, 569, 0, 570, 0, 0, 571, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	511, 512, 513, 0, 0, 572, 641, 642, 0, 0,
	0, 0, 0, 0, 577, 0, 648, 0, 0, 0,
	581, 582, 583, 0, 403, 0, 419, 431, 340, 0,
	0, 0, 0, 0, 167, 182, 0, 0, 0, 0,
	28, 0, 0, 0, 0, 32, 0, 38, 0, 0,
	0, 0, 271, 259, 270, 0, 272, 275, 278, 0,
	90, 163, 0, 0, 161, 0, 0, 305, 589, 0,
	0, 346, 0, 0, 0, 0, 0, 363, 367, 364,
	365, 358, 0, 351, 0, 0, 0, 460, -2, 0,
	0, 0, 0, -2, 0, 619, 0, 0, 651, 0,
	612, 0, -2, 618, 625, 549, 0, 0, 0, 0,
	447, 448, 449, 450, 451, 452, 453, 0, 707, 652,
	656, 0, 593, 594, 598, 0, 0, 559, 0, 626,
	635, 636, 510, 514, 515, 516, 517, 518, 519, 520,
	521, 522, -2, -2, -2, 526, 527, 528, -2, -2,
	-2, 0, 0, 0, 637, 0, 0, 615, 639, 640,
	645, 646, 0, 574, 575, 576, 647, 0, 0, 0,
	425, 0, 589, 664, 233, 235, 25, 0, 168, 0,
	171, 0, 0, 174, 175, 0, 0, 0, 0, 184,
	191, 0, 0, 0, 40, 0, 0, 239, 0, 43,
	43, 230, 0, 0, 232, 0, 0, 0, 263, 273,
	0, 0, 218, 224, 224, 0, 557, 558, 0, 0,
	0, 0, 0, 293, 0, 339, 337, 352, 0, 354,
	0, 0, 0, 356, 0, 0, 350, 385, 0, 0,
	393, 0, 0, -2, 0, 501, 0, -2, -2, 611,
	618, 704, 321, 550, 552, 553, 456, 655, 600, 597,
	0, 584, 568, 634, 0, 0, 0, 0, 618, 614,
	573, 0, 579, 580, 404, 294, 27, 0, 172, 173,
	176, 0, 178, 193, 185, 0, 188, 189, 186, 0,
	29, 30, 39, 45, 31, 37, 0, 0, 0, 0,
	0, 279, 280, 0, 191, 0, 227, 699, 0, 227,
	0, 0, 0, 159, 191, 0, 588, 590, 0, 353,
	0, 370, 355, 0, 359, 386, 383, -2, -2, 502,
	620, 613, 0, 321, 0, 586, -2, 0, 0, 0,
	616, 0, 170, 0, 197, 0, 0, 0, 47, 0,
	234, 236, 0, 266, 381, 269, 180, 219, 220, 223,
	221, 224, 321, 191, 214, 0, 0, 0, 0, 357,
	551, 603, 0, -2, 0, 534, 578, 177, 202, 0,
	0, 0, 193, 33, 0, 44, 0, 268, 227, 0,
	181, 0, 591, 592, 369, 0, 0, 0, 599, 535,
	179, 198, 199, 0, 194, 195, 196, 192, 190, 197,
	46, 381, 222, 549, 191, 596, 601, 604, -2, 819,
	745, 0, 602, 200, 0, 201, 0, 0, 0, 202,
	265, 215, 0, 606, 607, 608, 609, 610, 203, 0,
	206, 207, 0, 204, 187, 0, 205, 208, 209, 605,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 262, 3, 268, 263, 3,
	273, 274, 266, 264, 277, 265, 275, 267, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 279, 276,
	256, 258, 257, 3, 278, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 271, 3, 272, 261, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 260, 3, 270,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 259, 269,
}
var sqlTok3 = [...]int{
	0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:629
		{
			sqllex.(*scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:635
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:641
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 13:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:660
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 19:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:669
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 20:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:675
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.qname(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 21:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:679
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.qname(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 22:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:685
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 23:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:689
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 24:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:696
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 25:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:701
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 26:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:706
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 27:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:711
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 28:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:715
		{
			unimplemented()
		}
	case 29:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:717
		{
			unimplemented()
		}
	case 30:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:719
		{
			unimplemented()
		}
	case 31:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:722
		{
			sqlVAL.union.val = &AlterTableDropColumn{columnKeyword: sqlDollar[2].union.bool(), IfExists: true, Column: sqlDollar[5].str}
		}
	case 32:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:727
		{
			sqlVAL.union.val = &AlterTableDropColumn{columnKeyword: sqlDollar[2].union.bool(), IfExists: false, Column: sqlDollar[3].str}
		}
	case 33:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:732
		{
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:735
		{
			sqlVAL.union.val = &AlterTableAddConstraint{ConstraintDef: sqlDollar[2].union.constraintDef()}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:739
		{
			unimplemented()
		}
	case 36:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:741
		{
			unimplemented()
		}
	case 37:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:744
		{
			sqlVAL.union.val = &AlterTableDropConstraint{IfExists: true, Constraint: sqlDollar[5].str}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:749
		{
			sqlVAL.union.val = &AlterTableDropConstraint{IfExists: false, Constraint: sqlDollar[3].str}
		}
	case 39:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:754
		{
			unimplemented()
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:755
		{
			unimplemented()
		}
	case 41:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:758
		{
			unimplemented()
		}
	case 42:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:759
		{
			unimplemented()
		}
	case 43:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:760
		{
		}
	case 44:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:763
		{
			unimplemented()
		}
	case 45:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:764
		{
		}
	case 46:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:767
		{
			unimplemented()
		}
	case 47:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:768
		{
		}
	case 51:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:779
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retExprs()}
		}
	case 52:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:786
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 53:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:790
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 54:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:794
		{
			sqlVAL.union.val = &DropIndex{Names: sqlDollar[3].union.qnames(), IfExists: false}
		}
	case 55:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:798
		{
			sqlVAL.union.val = &DropIndex{Names: sqlDollar[5].union.qnames(), IfExists: true}
		}
	case 56:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:802
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.qnames(), IfExists: false}
		}
	case 57:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:806
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.qnames(), IfExists: true}
		}
	case 58:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:812
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:816
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 60:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:822
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:826
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:832
		{
			sqlVAL.union.val = Indirection{NameIndirection(sqlDollar[2].str)}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:836
		{
			sqlVAL.union.val = append(sqlDollar[1].union.indirect(), NameIndirection(sqlDollar[3].str))
		}
	case 64:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:843
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:847
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 66:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:853
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 70:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:862
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 71:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:866
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 73:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:876
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: NameList(sqlDollar[6].union.strs()), Targets: sqlDollar[4].union.targetList()}
		}
	case 74:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:883
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: NameList(sqlDollar[6].union.strs()), Targets: sqlDollar[4].union.targetList()}
		}
	case 75:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:890
		{
			sqlVAL.union.val = TargetList{Tables: QualifiedNames(sqlDollar[1].union.qnames())}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:894
		{
			sqlVAL.union.val = TargetList{Tables: QualifiedNames(sqlDollar[2].union.qnames())}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:898
		{
			sqlVAL.union.val = TargetList{Databases: NameList(sqlDollar[2].union.strs())}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:905
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:908
		{
		}
	case 80:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:912
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:916
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 82:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:923
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 83:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:927
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 84:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:931
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 85:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:935
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 86:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:939
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 87:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:943
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 88:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:947
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 89:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:955
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:959
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 91:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:967
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 92:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:971
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 93:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:975
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:979
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 95:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:985
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 97:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:992
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:996
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1000
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1004
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1011
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1017
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname(), Values: sqlDollar[3].union.exprs()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1021
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname(), Values: sqlDollar[3].union.exprs()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1025
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname()}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1029
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname()}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1036
		{
			unimplemented()
		}
	case 108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1039
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1042
		{
			unimplemented()
		}
	case 111:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1049
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1053
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1061
		{
			sqlVAL.union.val = ValArg{name: sqlDollar[1].str}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1067
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 117:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1071
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1075
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1079
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1083
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1089
		{
			sqlVAL.union.val = Low
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1093
		{
			sqlVAL.union.val = Normal
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1097
		{
			sqlVAL.union.val = High
		}
	case 124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1103
		{
			sqlVAL.union.val = DBool(true)
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1107
		{
			sqlVAL.union.val = DBool(false)
		}
	case 126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1111
		{
			sqlVAL.union.val = DString(sqlDollar[1].str)
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1126
		{
			sqlVAL.union.val = DString(sqlDollar[1].str)
		}
	case 129:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1130
		{
			sqlVAL.union.val = DString(sqlDollar[1].str)
		}
	case 130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1134
		{
			expr := &CastExpr{Expr: DString(sqlDollar[2].str), Type: sqlDollar[1].union.colType()}
			var ctx EvalContext
			d, err := expr.Eval(ctx)
			if err != nil {
				sqllex.Error("cannot evaluate to an interval type")
				return 1
			}
			if _, ok := d.(DInterval); !ok {
				panic("not an interval type")
			}
			sqlVAL.union.val = d
		}
	case 132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1149
		{
			sqlVAL.union.val = DString(sqlDollar[1].str)
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1153
		{
			sqlVAL.union.val = DString(sqlDollar[1].str)
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1158
		{
			unimplemented()
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1159
		{
			unimplemented()
		}
	case 136:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1160
		{
		}
	case 137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1164
		{
			sqlVAL.union.val = DString(sqlDollar[1].str)
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1168
		{
			sqlVAL.union.val = DString(sqlDollar[1].str)
		}
	case 139:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1174
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1178
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1182
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.qname()}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1186
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1190
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.strs()}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1194
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1198
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1202
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1206
		{
			sqlVAL.union.val = &ShowTables{Name: sqlDollar[3].union.qname()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1210
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1214
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1218
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1222
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1228
		{
			sqlVAL.union.val = sqlDollar[2].union.qname()
		}
	case 153:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1232
		{
			sqlVAL.union.val = (*QualifiedName)(nil)
		}
	case 154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1238
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 155:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1243
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1249
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 157:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1253
		{
			sqlVAL.union.val = []string(nil)
		}
	case 158:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1260
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.qname(), IfNotExists: false, Defs: sqlDollar[5].union.tblDefs()}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1264
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.qname(), IfNotExists: true, Defs: sqlDollar[8].union.tblDefs()}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1271
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1277
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1281
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1287
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1292
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1298
		{
			sqlVAL.union.val = newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
		}
	case 168:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1304
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 169:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1308
		{
			sqlVAL.union.val = []ColumnQualification(nil)
		}
	case 170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1314
		{
			sqlVAL.union.val = sqlDollar[3].union.colQual()
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1318
		{
			unimplemented()
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1334
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1338
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1342
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1346
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1349
		{
			unimplemented()
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1351
		{
			if ContainsVars(sqlDollar[2].union.expr()) {
				sqllex.Error("default expression contains a variable")
				return 1
			}
			if containsSubquery(sqlDollar[2].union.expr()) {
				sqllex.Error("default expression contains a subquery")
				return 1
			}
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1362
		{
			unimplemented()
		}
	case 180:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1366
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.idxElems(),
				Storing: sqlDollar[6].union.strs(),
			}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1374
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:    Name(sqlDollar[3].str),
					Columns: sqlDollar[5].union.idxElems(),
					Storing: sqlDollar[7].union.strs(),
				},
			}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1389
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1394
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 184:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1399
		{
			unimplemented()
		}
	case 185:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1401
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[3].union.strs()),
					Storing: sqlDollar[5].union.strs(),
				},
			}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1410
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[4].union.strs()),
				},
				PrimaryKey: true,
			}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1419
		{
			unimplemented()
		}
	case 190:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1436
		{
			sqlVAL.union.val = sqlDollar[3].union.strs()
		}
	case 191:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1440
		{
			sqlVAL.union.val = []string(nil)
		}
	case 192:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1446
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 193:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1450
		{
			sqlVAL.union.val = []string(nil)
		}
	case 194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1455
		{
			unimplemented()
		}
	case 195:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1456
		{
			unimplemented()
		}
	case 196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1457
		{
			unimplemented()
		}
	case 197:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1458
		{
		}
	case 198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1465
		{
			unimplemented()
		}
	case 199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1466
		{
			unimplemented()
		}
	case 200:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1467
		{
			unimplemented()
		}
	case 201:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1468
		{
			unimplemented()
		}
	case 202:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1469
		{
		}
	case 203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1472
		{
			unimplemented()
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1475
		{
			unimplemented()
		}
	case 205:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1478
		{
			unimplemented()
		}
	case 206:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1479
		{
			unimplemented()
		}
	case 207:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1480
		{
			unimplemented()
		}
	case 208:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1481
		{
			unimplemented()
		}
	case 209:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1482
		{
			unimplemented()
		}
	case 210:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1486
		{
			sqlVAL.union.val = NumVal(sqlDollar[1].str)
		}
	case 211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1490
		{
			sqlVAL.union.val = NumVal("-" + sqlDollar[2].str)
		}
	case 212:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1494
		{
			sqlVAL.union.val = DInt(sqlDollar[1].union.ival().Val)
		}
	case 213:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1501
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.qnames()}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1508
		{
			sqlVAL.union.val = &CreateIndex{
				Name:    Name(sqlDollar[4].str),
				Table:   sqlDollar[6].union.qname(),
				Unique:  sqlDollar[2].union.bool(),
				Columns: sqlDollar[8].union.idxElems(),
				Storing: sqlDollar[10].union.strs(),
			}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql.y:1518
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.qname(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.strs(),
			}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1531
		{
			sqlVAL.union.val = true
		}
	case 217:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1535
		{
			sqlVAL.union.val = false
		}
	case 218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1541
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1545
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 220:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1554
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1557
		{
			unimplemented()
		}
	case 222:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1558
		{
			unimplemented()
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1561
		{
			unimplemented()
		}
	case 224:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1562
		{
		}
	case 225:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1566
		{
			sqlVAL.union.val = Ascending
		}
	case 226:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1570
		{
			sqlVAL.union.val = Descending
		}
	case 227:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1574
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 228:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1581
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 229:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1585
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.qname(), NewName: sqlDollar[6].union.qname(), IfExists: false}
		}
	case 230:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1589
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.qname(), NewName: sqlDollar[8].union.qname(), IfExists: true}
		}
	case 231:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1593
		{
			sqlVAL.union.val = &RenameIndex{Name: sqlDollar[3].union.qname(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1597
		{
			sqlVAL.union.val = &RenameIndex{Name: sqlDollar[5].union.qname(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1601
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.qname(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1605
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.qname(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1609
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 236:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1613
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 237:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1619
		{
			sqlVAL.union.val = true
		}
	case 238:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1623
		{
			sqlVAL.union.val = false
		}
	case 239:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1628
		{
		}
	case 240:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1629
		{
		}
	case 241:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1634
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1638
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1642
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 244:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1646
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1650
		{
			sqlVAL.union.val = &RollbackTransaction{}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1654
		{
			sqlVAL.union.val = &ReleaseTransaction{}
		}
	case 247:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1658
		{
			sqlVAL.union.val = &RestartTransaction{}
		}
	case 248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1662
		{
			sqlVAL.union.val = &RetryIntent{}
		}
	case 249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1667
		{
		}
	case 250:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1668
		{
		}
	case 251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1673
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1677
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1681
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1685
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 255:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1689
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1695
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1701
		{
			sqlVAL.union.val = &CreateDatabase{Name: Name(sqlDollar[3].str)}
		}
	case 258:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1705
		{
			sqlVAL.union.val = &CreateDatabase{IfNotExists: true, Name: Name(sqlDollar[6].str)}
		}
	case 259:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1711
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.qname()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retExprs()
		}
	case 262:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1728
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1732
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.qnames(), Rows: sqlDollar[4].union.slct()}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1736
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1743
		{
			unimplemented()
		}
	case 266:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1744
		{
			unimplemented()
		}
	case 267:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1745
		{
		}
	case 268:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1748
		{
			unimplemented()
		}
	case 269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1749
		{
			unimplemented()
		}
	case 270:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1750
		{
		}
	case 271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1754
		{
			sqlVAL.union.val = sqlDollar[2].union.selExprs()
		}
	case 272:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1758
		{
			sqlVAL.union.val = SelectExprs(nil)
		}
	case 273:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1765
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retExprs()}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1771
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1775
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1785
		{
			sqlVAL.union.val = &UpdateExpr{Names: QualifiedNames{sqlDollar[1].union.qname()}, Expr: sqlDollar[3].union.expr()}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1797
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.qnames(), Expr: &Tuple{sqlDollar[5].union.exprs()}}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1801
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.qnames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1845
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1851
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1855
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1870
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1874
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1878
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1882
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1886
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1890
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1924
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.tblExprs(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1936
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.tblExprs(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1948
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        TableExprs{&AliasedTableExpr{Expr: sqlDollar[2].union.qname()}},
				tableSelect: true,
			}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1956
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1965
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1974
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1992
		{
			unimplemented()
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1993
		{
			unimplemented()
		}
	case 302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1994
		{
			unimplemented()
		}
	case 303:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1997
		{
			unimplemented()
		}
	case 304:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1998
		{
			unimplemented()
		}
	case 305:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2001
		{
			unimplemented()
		}
	case 306:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2005
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 310:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2013
		{
			unimplemented()
		}
	case 311:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2014
		{
		}
	case 312:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2017
		{
		}
	case 313:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2018
		{
		}
	case 314:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2022
		{
			sqlVAL.union.val = true
		}
	case 315:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2026
		{
			sqlVAL.union.val = false
		}
	case 316:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2030
		{
			sqlVAL.union.val = false
		}
	case 317:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2036
		{
			sqlVAL.union.val = true
		}
	case 318:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2041
		{
		}
	case 319:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2042
		{
		}
	case 320:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2046
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 321:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2050
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 322:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2056
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 323:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2062
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2066
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 325:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2072
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2080
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2089
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2100
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2113
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2120
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2127
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2141
		{
		}
	case 336:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2142
		{
		}
	case 337:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2168
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 338:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2172
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 339:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2178
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 340:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2182
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 341:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2188
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{sqlDollar[2].union.exprs()}}}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2192
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 343:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2204
		{
			sqlVAL.union.val = sqlDollar[2].union.tblExprs()
		}
	case 344:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2208
		{
			sqlVAL.union.val = TableExprs(nil)
		}
	case 345:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2214
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2218
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 347:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2225
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: sqlDollar[2].union.aliasClause()}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2229
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, As: sqlDollar[2].union.aliasClause()}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2233
		{
			unimplemented()
		}
	case 351:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2251
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2255
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2259
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2263
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2267
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astNaturalJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr()}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2271
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astNaturalJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2277
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: NameList(sqlDollar[4].union.strs())}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2281
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 359:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2285
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: NameList(sqlDollar[3].union.strs())}
		}
	case 360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2289
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2296
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2302
		{
			sqlVAL.str = astFullJoin
		}
	case 364:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2306
		{
			sqlVAL.str = astLeftJoin
		}
	case 365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2310
		{
			sqlVAL.str = astRightJoin
		}
	case 366:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2314
		{
			sqlVAL.str = astInnerJoin
		}
	case 367:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2320
		{
		}
	case 368:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2321
		{
		}
	case 369:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2332
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: NameList(sqlDollar[3].union.strs())}
		}
	case 370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2336
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2342
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2346
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2350
		{
			sqlVAL.union.val = sqlDollar[2].union.qname()
		}
	case 374:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2354
		{
			sqlVAL.union.val = sqlDollar[3].union.qname()
		}
	case 375:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2360
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2364
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 377:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2377
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname()}
		}
	case 378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2381
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2385
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2391
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 381:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2395
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 382:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2407
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 383:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2411
		{
			unimplemented()
		}
	case 384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2412
		{
			unimplemented()
		}
	case 385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2415
		{
			unimplemented()
		}
	case 386:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2416
		{
			unimplemented()
		}
	case 387:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2417
		{
		}
	case 393:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2425
		{
			unimplemented()
		}
	case 394:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2427
		{
			sqlVAL.union.val = &BytesType{Name: "BLOB"}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2431
		{
			sqlVAL.union.val = &BytesType{Name: "BYTES"}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2435
		{
			sqlVAL.union.val = &BytesType{Name: "BYTEA"}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2439
		{
			sqlVAL.union.val = &StringType{Name: "TEXT"}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2443
		{
			sqlVAL.union.val = &StringType{Name: "STRING"}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2464
		{
			sqlVAL.union.val = &DecimalType{Prec: int(sqlDollar[2].union.ival().Val)}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2468
		{
			sqlVAL.union.val = &DecimalType{Prec: int(sqlDollar[2].union.ival().Val), Scale: int(sqlDollar[4].union.ival().Val)}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2472
		{
			sqlVAL.union.val = &DecimalType{}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2479
		{
			sqlVAL.union.val = &IntType{Name: "INT"}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2483
		{
			sqlVAL.union.val = &IntType{Name: "INT64"}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2487
		{
			sqlVAL.union.val = &IntType{Name: "INTEGER"}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2491
		{
			sqlVAL.union.val = &IntType{Name: "SMALLINT"}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2495
		{
			sqlVAL.union.val = &IntType{Name: "BIGINT"}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2499
		{
			sqlVAL.union.val = &FloatType{Name: "REAL"}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2503
		{
			sqlVAL.union.val = &FloatType{Name: "FLOAT", Prec: int(sqlDollar[2].union.ival().Val)}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2507
		{
			sqlVAL.union.val = &FloatType{Name: "DOUBLE PRECISION"}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2511
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			sqlVAL.union.val.(*DecimalType).Name = "DECIMAL"
		}
	case 415:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2516
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			sqlVAL.union.val.(*DecimalType).Name = "DEC"
		}
	case 416:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2521
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			sqlVAL.union.val.(*DecimalType).Name = "NUMERIC"
		}
	case 417:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2526
		{
			sqlVAL.union.val = &BoolType{Name: "BOOLEAN"}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2530
		{
			sqlVAL.union.val = &BoolType{Name: "BOOL"}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2536
		{
			sqlVAL.union.val = sqlDollar[2].union.ival()
		}
	case 420:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2540
		{
			sqlVAL.union.val = IntVal{}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2558
		{
			sqlVAL.union.val = &IntType{Name: "BIT", N: int(sqlDollar[4].union.ival().Val)}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2564
		{
			sqlVAL.union.val = &IntType{Name: "BIT"}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2580
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
			sqlVAL.union.val.(*StringType).N = int(sqlDollar[3].union.ival().Val)
		}
	case 432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2587
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 433:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2593
		{
			sqlVAL.union.val = &StringType{Name: "CHAR"}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2597
		{
			sqlVAL.union.val = &StringType{Name: "CHAR"}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2601
		{
			sqlVAL.union.val = &StringType{Name: "VARCHAR"}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2606
		{
		}
	case 437:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2607
		{
		}
	case 438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2612
		{
			sqlVAL.union.val = &DateType{}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2616
		{
			sqlVAL.union.val = &TimestampType{}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2621
		{
			sqlVAL.union.val = &IntervalType{}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2626
		{
			unimplemented()
		}
	case 442:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2627
		{
			unimplemented()
		}
	case 443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2628
		{
			unimplemented()
		}
	case 444:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2629
		{
			unimplemented()
		}
	case 445:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2630
		{
			unimplemented()
		}
	case 446:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2631
		{
			unimplemented()
		}
	case 447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2632
		{
			unimplemented()
		}
	case 448:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2633
		{
			unimplemented()
		}
	case 449:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2634
		{
			unimplemented()
		}
	case 450:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2635
		{
			unimplemented()
		}
	case 451:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2636
		{
			unimplemented()
		}
	case 452:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2637
		{
			unimplemented()
		}
	case 453:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2638
		{
			unimplemented()
		}
	case 454:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2639
		{
		}
	case 455:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2642
		{
			unimplemented()
		}
	case 456:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2643
		{
			unimplemented()
		}
	case 458:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2667
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2670
		{
			unimplemented()
		}
	case 460:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2671
		{
			unimplemented()
		}
	case 461:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2680
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2684
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2688
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2692
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2696
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2700
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2704
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2708
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2712
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2716
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2720
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2724
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2728
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2732
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2736
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2740
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2744
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2748
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2752
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2756
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2760
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2764
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2768
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2772
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2776
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2780
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2784
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2788
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2792
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2796
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2800
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2803
		{
			unimplemented()
		}
	case 493:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2805
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DBool(true)}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2809
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DBool(true)}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2813
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DBool(false)}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2817
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DBool(false)}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2821
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2825
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2829
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2833
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2837
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2841
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2845
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2849
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2853
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2857
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2861
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2865
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2882
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2886
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2890
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2894
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2898
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2902
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2906
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2910
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2914
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2918
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2922
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2926
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2930
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2934
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2938
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2942
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2946
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2950
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2954
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2958
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2962
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2966
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2970
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2974
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2978
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2982
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2994
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 538:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2999
		{
			sqlVAL.union.val = ValArg{name: sqlDollar[1].str}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3003
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3009
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3013
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3017
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3023
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 546:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3027
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 547:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3031
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 548:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3039
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname()}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3043
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3046
		{
			unimplemented()
		}
	case 551:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3047
		{
			unimplemented()
		}
	case 552:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3049
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Type: All, Exprs: sqlDollar[4].union.exprs()}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3053
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Type: Distinct, Exprs: sqlDollar[4].union.exprs()}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3057
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Exprs: Exprs{StarExpr()}}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3070
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 556:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3074
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 557:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3083
		{
			unimplemented()
		}
	case 558:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3084
		{
			unimplemented()
		}
	case 559:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3088
		{
			unimplemented()
		}
	case 560:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3090
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3094
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3098
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3102
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3105
		{
			unimplemented()
		}
	case 565:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3106
		{
			unimplemented()
		}
	case 566:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3107
		{
			unimplemented()
		}
	case 567:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3108
		{
			unimplemented()
		}
	case 568:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3110
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3114
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3118
		{
			sqlVAL.union.val = &OverlayExpr{FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3122
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "STRPOS"}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3126
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3129
		{
			unimplemented()
		}
	case 574:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3131
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3135
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "LTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3139
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "RTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3143
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3147
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3151
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3155
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3159
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3163
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3167
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3173
		{
			unimplemented()
		}
	case 585:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3174
		{
		}
	case 586:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3177
		{
			unimplemented()
		}
	case 587:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3178
		{
		}
	case 588:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3182
		{
			unimplemented()
		}
	case 589:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3183
		{
		}
	case 590:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3186
		{
			unimplemented()
		}
	case 591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3187
		{
			unimplemented()
		}
	case 592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3190
		{
			unimplemented()
		}
	case 593:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3193
		{
			unimplemented()
		}
	case 594:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3194
		{
			unimplemented()
		}
	case 595:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3195
		{
		}
	case 596:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3199
		{
			unimplemented()
		}
	case 597:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3210
		{
			unimplemented()
		}
	case 598:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3211
		{
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3214
		{
			unimplemented()
		}
	case 600:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3215
		{
		}
	case 601:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3223
		{
			unimplemented()
		}
	case 602:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3224
		{
			unimplemented()
		}
	case 603:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3225
		{
		}
	case 604:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3228
		{
			unimplemented()
		}
	case 605:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3229
		{
			unimplemented()
		}
	case 606:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3235
		{
			unimplemented()
		}
	case 607:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3236
		{
			unimplemented()
		}
	case 608:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3237
		{
			unimplemented()
		}
	case 609:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3238
		{
			unimplemented()
		}
	case 610:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3239
		{
			unimplemented()
		}
	case 611:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3250
		{
			sqlVAL.union.val = &Row{sqlDollar[3].union.exprs()}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3254
		{
			sqlVAL.union.val = &Row{nil}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3258
		{
			sqlVAL.union.val = &Tuple{append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3264
		{
			sqlVAL.union.val = &Row{sqlDollar[3].union.exprs()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3268
		{
			sqlVAL.union.val = &Row{nil}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3274
		{
			sqlVAL.union.val = &Tuple{append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3315
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3319
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 619:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3325
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3329
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 621:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3335
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3339
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3343
		{
			sqlVAL.union.val = &Array{nil}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3349
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3353
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3359
		{
			sqlVAL.union.val = Exprs{DString(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3381
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3385
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3391
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3398
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3402
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3419
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3423
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3427
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3431
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), DInt(1), sqlDollar[2].union.expr()}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3435
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 644:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3439
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 645:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3445
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 646:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3451
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 647:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3457
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 648:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3461
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 649:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3465
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 650:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3471
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3475
		{
			sqlVAL.union.val = &Tuple{sqlDollar[2].union.exprs()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3486
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3493
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3497
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 655:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3503
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3509
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 657:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3513
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 659:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3520
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 660:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3526
		{
			sqlVAL.union.val = sqlDollar[1].union.indirectElem()
		}
	case 661:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3530
		{
			sqlVAL.union.val = sqlDollar[1].union.indirectElem()
		}
	case 662:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3534
		{
			sqlVAL.union.val = IndexIndirection(sqlDollar[2].str)
		}
	case 663:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3538
		{
			sqlVAL.union.val = &ArrayIndirection{Begin: sqlDollar[2].union.expr()}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3542
		{
			sqlVAL.union.val = &ArrayIndirection{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr()}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3548
		{
			sqlVAL.union.val = NameIndirection(sqlDollar[2].str)
		}
	case 666:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3554
		{
			sqlVAL.union.val = qualifiedStar
		}
	case 667:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3560
		{
			sqlVAL.union.val = Indirection{sqlDollar[1].union.indirectElem()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3564
		{
			sqlVAL.union.val = append(sqlDollar[1].union.indirect(), sqlDollar[2].union.indirectElem())
		}
	case 669:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3569
		{
		}
	case 670:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3570
		{
		}
	case 672:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3579
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3585
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3589
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 675:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3598
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 677:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3606
		{
			sqlVAL.union.val = SelectExprs(nil)
		}
	case 678:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3612
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3616
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 680:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3622
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3631
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3635
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3639
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 684:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3647
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3651
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 686:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3657
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3661
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 688:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3672
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3676
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3687
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3691
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: Indirection{sqlDollar[2].union.indirectElem()}}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3695
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: Indirection{sqlDollar[2].union.indirectElem()}}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3699
		{
			sqlVAL.union.val = &QualifiedName{Indirect: Indirection{unqualifiedStar}}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3705
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3709
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 696:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3715
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 697:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3718
		{
		}
	case 698:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3728
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3732
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3739
		{
			sqlVAL.union.val = &IntVal{Val: sqlDollar[1].union.ival().Val, Str: sqlDollar[1].union.ival().Str}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3743
		{
			sqlVAL.union.val = NumVal(sqlDollar[1].str)
		}
	case 702:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3747
		{
			sqlVAL.union.val = DString(sqlDollar[1].str)
		}
	case 703:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3751
		{
			sqlVAL.union.val = DBytes(sqlDollar[1].str)
		}
	case 704:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3754
		{
			unimplemented()
		}
	case 705:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3756
		{
			sqlVAL.union.val = &CastExpr{Expr: DString(sqlDollar[2].str), Type: sqlDollar[1].union.colType()}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3760
		{
			sqlVAL.union.val = &CastExpr{Expr: DString(sqlDollar[2].str), Type: sqlDollar[1].union.colType()}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3764
		{
			sqlVAL.union.val = &CastExpr{Expr: DString(sqlDollar[5].str), Type: sqlDollar[1].union.colType()}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3768
		{
			sqlVAL.union.val = DBool(true)
		}
	case 709:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3772
		{
			sqlVAL.union.val = DBool(false)
		}
	case 710:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3776
		{
			sqlVAL.union.val = DNull
		}
	case 712:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3783
		{
			sqlVAL.union.val = sqlDollar[2].union.ival()
		}
	case 713:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3787
		{
			sqlVAL.union.val = IntVal{Val: -sqlDollar[2].union.ival().Val, Str: "-" + sqlDollar[2].union.ival().Str}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3809
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
