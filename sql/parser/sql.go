// Code generated by go yacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"errors"
	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/sql/privilege"
	"github.com/cockroachdb/cockroach/util"
)

var errUnimplemented = errors.New("unimplemented")

func unimplemented() {
	panic(errUnimplemented)
}

func unimplementedWithIssue(issue int) {
	panic(util.UnimplementedWithIssueErrorf(issue, ""))
}

//line sql.y:43

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new sytax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in two forms, depending on the
// type of the value being accessed. Values and pointers are directly
// type asserted from the empty interface, meaning that they will panic
// if the type assertion is incorrect. Interfaces are handled differently
// because a nil instance of an interface inserted into the empty interface
// becomes a nil instance of the empty interface and therefore will fail a
// direct type assertion. Instead, a guarded type assertion must be used,
// which returns nil if the type assertion fails.
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	return u.val.(*StrVal)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) qname() *QualifiedName {
	return u.val.(*QualifiedName)
}
func (u *sqlSymUnion) qnames() QualifiedNames {
	return u.val.(QualifiedNames)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) indirectElem() IndirectionElem {
	if indirectElem, ok := u.val.(IndirectionElem); ok {
		return indirectElem
	}
	return nil
}
func (u *sqlSymUnion) indirect() Indirection {
	return u.val.(Indirection)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	if selectStmt, ok := u.val.(*Select); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	if selectStmt, ok := u.val.(SelectStatement); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	if constraintDef, ok := u.val.(ConstraintTableDef); ok {
		return constraintDef
	}
	return nil
}
func (u *sqlSymUnion) tblDef() TableDef {
	if tblDef, ok := u.val.(TableDef); ok {
		return tblDef
	}
	return nil
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() ColumnQualification {
	if colQual, ok := u.val.(ColumnQualification); ok {
		return colQual
	}
	return nil
}
func (u *sqlSymUnion) colQuals() []ColumnQualification {
	return u.val.([]ColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retExprs() ReturningExprs {
	return ReturningExprs(u.val.(SelectExprs))
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	if tblExpr, ok := u.val.(TableExpr); ok {
		return tblExpr
	}
	return nil
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	if joinCond, ok := u.val.(JoinCond); ok {
		return joinCond
	}
	return nil
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	if alterTableCmd, ok := u.val.(AlterTableCmd); ok {
		return alterTableCmd
	}
	return nil
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) famElem() FamilyElem {
	return u.val.(FamilyElem)
}
func (u *sqlSymUnion) famElems() FamilyElemList {
	return u.val.(FamilyElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}

//line sql.y:281
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const DOT_DOT = 57353
const LESS_EQUALS = 57354
const GREATER_EQUALS = 57355
const NOT_EQUALS = 57356
const ERROR = 57357
const ACTION = 57358
const ADD = 57359
const ALL = 57360
const ALTER = 57361
const ANALYSE = 57362
const ANALYZE = 57363
const AND = 57364
const ANY = 57365
const ANNOTATE_TYPE = 57366
const ARRAY = 57367
const AS = 57368
const ASC = 57369
const ASYMMETRIC = 57370
const AT = 57371
const BEGIN = 57372
const BETWEEN = 57373
const BIGINT = 57374
const BIT = 57375
const BLOB = 57376
const BOOL = 57377
const BOOLEAN = 57378
const BOTH = 57379
const BY = 57380
const BYTEA = 57381
const BYTES = 57382
const CASCADE = 57383
const CASE = 57384
const CAST = 57385
const CHAR = 57386
const CHARACTER = 57387
const CHARACTERISTICS = 57388
const CHECK = 57389
const COALESCE = 57390
const COLLATE = 57391
const COLLATION = 57392
const COLUMN = 57393
const COLUMNS = 57394
const COMMIT = 57395
const COMMITTED = 57396
const CONCAT = 57397
const CONFLICT = 57398
const CONSTRAINT = 57399
const COVERING = 57400
const CREATE = 57401
const CROSS = 57402
const CUBE = 57403
const CURRENT = 57404
const CURRENT_CATALOG = 57405
const CURRENT_DATE = 57406
const CURRENT_ROLE = 57407
const CURRENT_TIME = 57408
const CURRENT_TIMESTAMP = 57409
const CURRENT_USER = 57410
const CYCLE = 57411
const DATA = 57412
const DATABASE = 57413
const DATABASES = 57414
const DATE = 57415
const DAY = 57416
const DEC = 57417
const DECIMAL = 57418
const DEFAULT = 57419
const DEFERRABLE = 57420
const DELETE = 57421
const DESC = 57422
const DISTINCT = 57423
const DO = 57424
const DOUBLE = 57425
const DROP = 57426
const ELSE = 57427
const ENCODING = 57428
const END = 57429
const ESCAPE = 57430
const EXCEPT = 57431
const EXISTS = 57432
const EXPLAIN = 57433
const EXTRACT = 57434
const FALSE = 57435
const FAMILY = 57436
const FETCH = 57437
const FILTER = 57438
const FIRST = 57439
const FLOAT = 57440
const FLOORDIV = 57441
const FOLLOWING = 57442
const FOR = 57443
const FORCE_INDEX = 57444
const FOREIGN = 57445
const FROM = 57446
const FULL = 57447
const GRANT = 57448
const GRANTS = 57449
const GREATEST = 57450
const GROUP = 57451
const GROUPING = 57452
const HAVING = 57453
const HIGH = 57454
const HOUR = 57455
const IF = 57456
const IFNULL = 57457
const IN = 57458
const INDEX = 57459
const INDEXES = 57460
const INITIALLY = 57461
const INNER = 57462
const INSERT = 57463
const INT = 57464
const INT64 = 57465
const INTEGER = 57466
const INTERSECT = 57467
const INTERVAL = 57468
const INTO = 57469
const IS = 57470
const ISOLATION = 57471
const JOIN = 57472
const KEY = 57473
const KEYS = 57474
const LATERAL = 57475
const LEADING = 57476
const LEAST = 57477
const LEFT = 57478
const LEVEL = 57479
const LIKE = 57480
const LIMIT = 57481
const LOCAL = 57482
const LOCALTIME = 57483
const LOCALTIMESTAMP = 57484
const LOW = 57485
const LSHIFT = 57486
const MATCH = 57487
const MINUTE = 57488
const MONTH = 57489
const NAME = 57490
const NAMES = 57491
const NATURAL = 57492
const NEXT = 57493
const NO = 57494
const NO_INDEX_JOIN = 57495
const NORMAL = 57496
const NOT = 57497
const NOTHING = 57498
const NULL = 57499
const NULLIF = 57500
const NULLS = 57501
const NUMERIC = 57502
const OF = 57503
const OFF = 57504
const OFFSET = 57505
const ON = 57506
const ONLY = 57507
const OR = 57508
const ORDER = 57509
const ORDINALITY = 57510
const OUT = 57511
const OUTER = 57512
const OVER = 57513
const OVERLAPS = 57514
const OVERLAY = 57515
const PARTIAL = 57516
const PARTITION = 57517
const PLACING = 57518
const POSITION = 57519
const PRECEDING = 57520
const PRECISION = 57521
const PRIMARY = 57522
const PRIORITY = 57523
const RANGE = 57524
const READ = 57525
const REAL = 57526
const RECURSIVE = 57527
const REF = 57528
const REFERENCES = 57529
const RENAME = 57530
const REPEATABLE = 57531
const RELEASE = 57532
const RESTRICT = 57533
const RETURNING = 57534
const REVOKE = 57535
const RIGHT = 57536
const ROLLBACK = 57537
const ROLLUP = 57538
const ROW = 57539
const ROWS = 57540
const RSHIFT = 57541
const SAVEPOINT = 57542
const SEARCH = 57543
const SECOND = 57544
const SELECT = 57545
const SERIAL = 57546
const SERIALIZABLE = 57547
const SESSION = 57548
const SESSION_USER = 57549
const SET = 57550
const SHOW = 57551
const SIMILAR = 57552
const SIMPLE = 57553
const SMALLINT = 57554
const SNAPSHOT = 57555
const SOME = 57556
const SQL = 57557
const START = 57558
const STRICT = 57559
const STRING = 57560
const STORING = 57561
const SUBSTRING = 57562
const SYMMETRIC = 57563
const TABLE = 57564
const TABLES = 57565
const TEXT = 57566
const THEN = 57567
const TIME = 57568
const TIMESTAMP = 57569
const TIMESTAMPTZ = 57570
const TO = 57571
const TRAILING = 57572
const TRANSACTION = 57573
const TREAT = 57574
const TRIM = 57575
const TRUE = 57576
const TRUNCATE = 57577
const TYPE = 57578
const UNBOUNDED = 57579
const UNCOMMITTED = 57580
const UNION = 57581
const UNIQUE = 57582
const UNKNOWN = 57583
const UPDATE = 57584
const UPSERT = 57585
const USER = 57586
const USING = 57587
const VALID = 57588
const VALIDATE = 57589
const VALUE = 57590
const VALUES = 57591
const VARCHAR = 57592
const VARIADIC = 57593
const VARYING = 57594
const WHEN = 57595
const WHERE = 57596
const WINDOW = 57597
const WITH = 57598
const WITHIN = 57599
const WITHOUT = 57600
const YEAR = 57601
const ZONE = 57602
const NOT_LA = 57603
const WITH_LA = 57604
const POSTFIXOP = 57605
const UMINUS = 57606

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXPLAIN",
	"EXTRACT",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HOUR",
	"IF",
	"IFNULL",
	"IN",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARTIAL",
	"PARTITION",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SNAPSHOT",
	"SOME",
	"SQL",
	"START",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"TABLE",
	"TABLES",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:4462

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 21,
	283, 21,
	-2, 330,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 32,
	1, 301,
	164, 301,
	192, 301,
	281, 301,
	283, 301,
	-2, 311,
	-1, 44,
	1, 304,
	164, 304,
	192, 304,
	281, 304,
	283, 304,
	-2, 310,
	-1, 53,
	1, 21,
	283, 21,
	-2, 330,
	-1, 244,
	1, 139,
	283, 139,
	-2, 810,
	-1, 276,
	139, 340,
	163, 340,
	-2, 307,
	-1, 279,
	139, 339,
	163, 339,
	-2, 305,
	-1, 391,
	139, 339,
	163, 339,
	-2, 308,
	-1, 447,
	280, 754,
	-2, 747,
	-1, 448,
	280, 755,
	-2, 748,
	-1, 454,
	5, 470,
	280, 470,
	-2, 893,
	-1, 477,
	5, 436,
	-2, 870,
	-1, 478,
	5, 464,
	280, 464,
	-2, 871,
	-1, 479,
	5, 444,
	-2, 872,
	-1, 480,
	5, 443,
	-2, 873,
	-1, 481,
	5, 464,
	280, 464,
	-2, 876,
	-1, 482,
	5, 464,
	280, 464,
	-2, 877,
	-1, 483,
	5, 465,
	-2, 880,
	-1, 484,
	5, 431,
	-2, 881,
	-1, 485,
	5, 431,
	-2, 882,
	-1, 486,
	5, 446,
	-2, 885,
	-1, 487,
	5, 432,
	-2, 890,
	-1, 488,
	5, 433,
	-2, 891,
	-1, 489,
	5, 434,
	-2, 892,
	-1, 490,
	5, 431,
	-2, 896,
	-1, 491,
	5, 437,
	-2, 901,
	-1, 492,
	5, 435,
	-2, 904,
	-1, 493,
	5, 462,
	280, 462,
	-2, 905,
	-1, 494,
	5, 466,
	-2, 908,
	-1, 495,
	5, 468,
	-2, 909,
	-1, 496,
	5, 461,
	280, 461,
	-2, 913,
	-1, 761,
	89, 311,
	125, 311,
	139, 311,
	163, 311,
	167, 311,
	239, 311,
	-2, 574,
	-1, 769,
	280, 732,
	-2, 721,
	-1, 973,
	12, 0,
	13, 0,
	14, 0,
	263, 0,
	264, 0,
	265, 0,
	-2, 504,
	-1, 974,
	12, 0,
	13, 0,
	14, 0,
	263, 0,
	264, 0,
	265, 0,
	-2, 505,
	-1, 975,
	12, 0,
	13, 0,
	14, 0,
	263, 0,
	264, 0,
	265, 0,
	-2, 506,
	-1, 979,
	12, 0,
	13, 0,
	14, 0,
	263, 0,
	264, 0,
	265, 0,
	-2, 510,
	-1, 980,
	12, 0,
	13, 0,
	14, 0,
	263, 0,
	264, 0,
	265, 0,
	-2, 511,
	-1, 981,
	12, 0,
	13, 0,
	14, 0,
	263, 0,
	264, 0,
	265, 0,
	-2, 512,
	-1, 984,
	31, 0,
	116, 0,
	138, 0,
	210, 0,
	261, 0,
	-2, 517,
	-1, 1015,
	172, 645,
	-2, 648,
	-1, 1175,
	89, 311,
	125, 311,
	139, 311,
	163, 311,
	167, 311,
	239, 311,
	-2, 388,
	-1, 1183,
	31, 0,
	116, 0,
	138, 0,
	210, 0,
	261, 0,
	-2, 518,
	-1, 1188,
	31, 0,
	116, 0,
	138, 0,
	210, 0,
	261, 0,
	-2, 519,
	-1, 1207,
	172, 644,
	-2, 647,
	-1, 1357,
	31, 0,
	116, 0,
	138, 0,
	210, 0,
	261, 0,
	-2, 520,
	-1, 1362,
	128, 0,
	-2, 530,
	-1, 1371,
	172, 646,
	-2, 649,
	-1, 1413,
	12, 0,
	13, 0,
	14, 0,
	263, 0,
	264, 0,
	265, 0,
	-2, 555,
	-1, 1414,
	12, 0,
	13, 0,
	14, 0,
	263, 0,
	264, 0,
	265, 0,
	-2, 556,
	-1, 1415,
	12, 0,
	13, 0,
	14, 0,
	263, 0,
	264, 0,
	265, 0,
	-2, 557,
	-1, 1419,
	12, 0,
	13, 0,
	14, 0,
	263, 0,
	264, 0,
	265, 0,
	-2, 561,
	-1, 1420,
	12, 0,
	13, 0,
	14, 0,
	263, 0,
	264, 0,
	265, 0,
	-2, 562,
	-1, 1421,
	12, 0,
	13, 0,
	14, 0,
	263, 0,
	264, 0,
	265, 0,
	-2, 563,
	-1, 1523,
	128, 0,
	-2, 531,
	-1, 1527,
	31, 0,
	116, 0,
	138, 0,
	210, 0,
	261, 0,
	-2, 534,
	-1, 1528,
	31, 0,
	116, 0,
	138, 0,
	210, 0,
	261, 0,
	-2, 536,
	-1, 1613,
	31, 0,
	116, 0,
	138, 0,
	210, 0,
	261, 0,
	-2, 535,
	-1, 1614,
	31, 0,
	116, 0,
	138, 0,
	210, 0,
	261, 0,
	-2, 537,
	-1, 1622,
	128, 0,
	-2, 564,
	-1, 1662,
	128, 0,
	-2, 565,
	-1, 1708,
	31, 0,
	138, 0,
	210, 0,
	261, 0,
	-2, 869,
}

const sqlNprod = 1006
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 21191

var sqlAct = [...]int{

	448, 1707, 1689, 1565, 1729, 843, 1667, 1690, 1706, 910,
	1691, 446, 851, 1391, 1587, 1600, 1363, 1511, 1484, 718,
	594, 1494, 1451, 1071, 445, 1485, 440, 438, 1505, 764,
	302, 87, 509, 894, 87, 891, 1499, 245, 1267, 1172,
	280, 87, 1114, 410, 1334, 1210, 31, 1266, 87, 87,
	421, 1028, 87, 1343, 88, 87, 87, 87, 1171, 766,
	893, 87, 87, 87, 87, 699, 328, 515, 919, 14,
	1162, 852, 819, 1158, 828, 1032, 1000, 497, 997, 796,
	1068, 20, 1022, 922, 567, 87, 696, 800, 287, 43,
	10, 279, 1120, 285, 6, 379, 538, 66, 518, 714,
	886, 323, 299, 720, 552, 299, 510, 310, 520, 68,
	420, 299, 285, 310, 380, 511, 43, 411, 67, 920,
	329, 549, 69, 8, 318, 320, 578, 325, 845, 64,
	897, 321, 290, 395, 393, 394, 83, 569, 548, 242,
	565, 74, 43, 330, 531, 314, 1606, 288, 844, 1607,
	540, 70, 540, 27, 44, 540, 1736, 1704, 1170, 914,
	1586, 45, 848, 1697, 723, 1688, 914, 1683, 1526, 284,
	914, 298, 284, 1664, 305, 1025, 1526, 269, 1126, 1203,
	315, 1658, 308, 725, 914, 499, 1649, 1364, 1640, 1586,
	1615, 914, 326, 1526, 1610, 1205, 292, 914, 277, 1597,
	1206, 1204, 1586, 724, 498, 276, 1203, 1594, 1585, 739,
	1595, 1586, 722, 1570, 1026, 1238, 914, 1255, 1256, 1257,
	1569, 1550, 1529, 914, 1203, 1203, 1525, 1522, 1461, 1526,
	1367, 914, 49, 1203, 1323, 529, 722, 1318, 87, 87,
	1317, 398, 1284, 1318, 27, 1285, 1282, 1027, 1024, 1203,
	1653, 51, 1281, 730, 1280, 1203, 1207, 1203, 915, 1203,
	1252, 914, 1589, 816, 546, 49, 815, 547, 721, 87,
	1426, 87, 1370, 87, 1140, 87, 817, 1160, 52, 1142,
	914, 866, 1008, 909, 51, 47, 1209, 880, 49, 1203,
	87, 48, 512, 406, 690, 405, 513, 689, 740, 559,
	541, 87, 541, 1029, 1243, 541, 558, 51, 346, 46,
	386, 52, 87, 87, 87, 297, 87, 392, 47, 512,
	53, 299, 391, 513, 48, 513, 593, 365, 504, 1705,
	1703, 508, 1696, 1258, 52, 353, 1659, 1596, 503, 1555,
	1551, 47, 46, 1479, 1543, 1542, 87, 48, 87, 1253,
	1541, 506, 1536, 741, 354, 1535, 49, 1534, 328, 328,
	1023, 1533, 299, 532, 532, 847, 596, 87, 1520, 87,
	87, 87, 87, 1441, 87, 51, 1436, 1435, 87, 1434,
	1374, 1181, 772, 87, 49, 1352, 1333, 588, 1289, 87,
	385, 1286, 1126, 544, 1274, 539, 1265, 1237, 693, 1234,
	1232, 1220, 52, 51, 1254, 383, 1214, 87, 1141, 47,
	87, 453, 329, 329, 1144, 48, 721, 1085, 543, 1039,
	597, 735, 732, 733, 734, 726, 727, 728, 729, 731,
	52, 315, 1038, 65, 1518, 330, 330, 407, 1005, 405,
	404, 1699, 277, 598, 1393, 1652, 1632, 1631, 763, 276,
	1624, 1603, 1592, 1584, 1562, 1238, 1548, 530, 533, 1478,
	1514, 46, 1492, 769, 1361, 723, 1351, 1330, 1249, 1250,
	1251, 285, 1248, 1245, 1246, 1247, 1239, 1240, 1241, 1242,
	1244, 692, 1329, 1328, 725, 1612, 556, 1326, 555, 1301,
	1300, 512, 1264, 767, 1228, 513, 1227, 1219, 589, 582,
	1252, 1200, 1196, 1002, 724, 801, 679, 682, 87, 683,
	684, 685, 804, 686, 596, 1099, 1238, 688, 1098, 691,
	1078, 1006, 87, 1037, 401, 402, 87, 702, 703, 87,
	87, 704, 913, 808, 813, 87, 794, 87, 87, 716,
	87, 811, 793, 87, 1243, 87, 87, 792, 328, 791,
	790, 87, 87, 277, 730, 822, 277, 277, 810, 789,
	710, 798, 799, 711, 712, 788, 787, 786, 597, 785,
	784, 868, 783, 802, 782, 781, 299, 1099, 805, 310,
	780, 779, 861, 323, 770, 855, 768, 46, 694, 1253,
	310, 598, 303, 310, 596, 833, 835, 409, 1611, 723,
	1354, 846, 329, 846, 1353, 1243, 505, 809, 1608, 359,
	1483, 1127, 723, 904, 885, 1288, 66, 806, 725, 587,
	586, 807, 580, 575, 1287, 330, 378, 1182, 68, 374,
	360, 725, 1238, 777, 1500, 43, 844, 67, 724, 1394,
	501, 69, 1033, 1223, 1254, 838, 797, 1122, 597, 1673,
	1253, 724, 825, 1639, 841, 874, 1717, 773, 1136, 500,
	869, 1469, 850, 1718, 283, 859, 57, 860, 723, 870,
	70, 598, 867, 873, 326, 864, 863, 862, 236, 872,
	262, 1044, 87, 1238, 263, 1578, 1577, 725, 730, 1313,
	1293, 521, 590, 522, 87, 87, 268, 1292, 267, 414,
	282, 730, 1218, 1217, 433, 1254, 1517, 724, 58, 1216,
	1215, 1184, 1248, 1245, 1246, 1247, 1239, 1240, 1241, 1242,
	1244, 1243, 1054, 87, 989, 87, 916, 865, 728, 729,
	731, 274, 840, 740, 357, 85, 839, 382, 246, 1638,
	1082, 592, 284, 1081, 299, 85, 740, 962, 377, 271,
	930, 1047, 291, 291, 596, 591, 301, 730, 523, 301,
	307, 301, 961, 821, 1567, 301, 316, 301, 246, 1312,
	358, 999, 1243, 299, 1003, 1675, 1247, 1239, 1240, 1241,
	1242, 1244, 534, 999, 1029, 521, 889, 522, 741, 348,
	1048, 1009, 1014, 1685, 1017, 1303, 1726, 811, 521, 61,
	522, 741, 811, 55, 888, 907, 908, 987, 597, 1686,
	1063, 1033, 1025, 890, 281, 1084, 1075, 1076, 1077, 87,
	87, 87, 1383, 1049, 1046, 87, 1717, 1013, 87, 60,
	59, 598, 450, 1115, 87, 87, 87, 87, 87, 917,
	87, 87, 1135, 1315, 1124, 62, 1137, 1113, 87, 56,
	87, 1026, 523, 930, 1693, 527, 540, 87, 1094, 734,
	726, 727, 728, 729, 731, 523, 87, 87, 526, 1090,
	1633, 1004, 87, 726, 727, 728, 729, 731, 1029, 1050,
	356, 328, 272, 1088, 1027, 1024, 581, 576, 1117, 1732,
	381, 1238, 988, 795, 285, 1241, 1242, 1244, 1121, 87,
	275, 87, 87, 87, 1620, 760, 87, 1121, 995, 950,
	1119, 924, 821, 1725, 985, 87, 349, 351, 820, 1304,
	993, 524, 87, 1694, 87, 1568, 1089, 1226, 949, 726,
	727, 728, 729, 731, 1344, 329, 1045, 1109, 1115, 1146,
	1029, 1310, 246, 246, 1239, 1240, 1241, 1242, 1244, 1128,
	63, 1161, 284, 1147, 54, 1125, 1110, 1129, 330, 1130,
	1695, 1692, 1716, 1714, 1186, 1138, 1131, 1139, 1134, 519,
	285, 1132, 1133, 85, 299, 301, 998, 246, 1498, 389,
	1243, 72, 991, 1153, 990, 1143, 986, 1145, 996, 829,
	902, 1724, 1177, 1457, 291, 1155, 1165, 1023, 368, 347,
	1730, 355, 43, 345, 1154, 301, 541, 1176, 1156, 1151,
	397, 1168, 950, 1180, 1096, 524, 301, 301, 301, 1546,
	535, 1163, 75, 1458, 1380, 1253, 1199, 1166, 524, 876,
	1201, 949, 802, 1572, 805, 878, 1193, 799, 798, 1731,
	396, 1164, 80, 1212, 1213, 832, 375, 76, 1191, 285,
	553, 879, 553, 356, 1422, 1507, 1733, 1381, 1208, 877,
	1740, 992, 1571, 1560, 397, 1187, 1185, 1295, 994, 77,
	1093, 246, 1468, 553, 246, 246, 246, 903, 246, 1467,
	1254, 701, 246, 1263, 79, 1167, 695, 85, 1379, 1465,
	818, 1512, 1668, 698, 1276, 396, 687, 709, 376, 1547,
	87, 1453, 560, 1454, 355, 1561, 285, 1222, 564, 1101,
	1100, 291, 1189, 1029, 719, 1508, 1194, 1339, 1338, 1299,
	313, 312, 831, 282, 388, 1335, 1456, 87, 1423, 1159,
	1036, 1320, 1623, 1459, 1424, 929, 1506, 1545, 1268, 562,
	1739, 87, 1513, 87, 1360, 87, 1271, 1272, 1273, 87,
	563, 1233, 1239, 1240, 1241, 1242, 1244, 1466, 1290, 1314,
	1195, 87, 871, 1457, 87, 1452, 78, 1464, 1319, 373,
	87, 596, 1297, 1450, 87, 1165, 87, 855, 371, 370,
	369, 366, 830, 1311, 311, 1269, 1455, 778, 681, 1190,
	1168, 1348, 1035, 1458, 1448, 1322, 1192, 1308, 1321, 1306,
	1342, 1294, 1307, 1325, 1309, 81, 1166, 1148, 905, 901,
	545, 299, 301, 542, 299, 537, 1332, 528, 525, 1388,
	1345, 1346, 700, 930, 1368, 597, 826, 87, 1347, 1337,
	301, 1327, 1340, 301, 842, 1341, 1579, 399, 929, 301,
	1718, 857, 858, 584, 301, 911, 1161, 301, 598, 246,
	246, 1581, 1376, 1377, 1378, 553, 719, 930, 930, 362,
	837, 75, 295, 1316, 1167, 930, 1373, 1661, 1382, 1384,
	1385, 1453, 821, 1454, 1395, 1589, 821, 1635, 836, 3,
	1336, 80, 834, 1400, 403, 723, 76, 723, 1427, 1654,
	849, 1165, 717, 87, 87, 87, 1456, 930, 912, 1437,
	400, 87, 87, 1459, 725, 1429, 1168, 87, 77, 87,
	557, 87, 87, 87, 87, 1430, 1163, 71, 1179, 87,
	1462, 1463, 1166, 79, 724, 296, 724, 1737, 1447, 87,
	87, 363, 1738, 304, 261, 1443, 1164, 1238, 1490, 87,
	87, 723, 1490, 87, 1519, 1012, 1442, 82, 1386, 1497,
	1355, 1489, 87, 87, 1491, 1489, 1455, 1283, 1491, 1476,
	1502, 1472, 1083, 1482, 952, 1496, 882, 881, 1080, 1481,
	1079, 1515, 264, 265, 1030, 883, 1531, 1387, 1524, 1149,
	1167, 884, 950, 951, 771, 270, 887, 1480, 930, 299,
	299, 1566, 1516, 299, 87, 73, 680, 367, 301, 826,
	1538, 949, 1684, 1225, 1619, 78, 1599, 1503, 1504, 1034,
	776, 1509, 25, 1487, 426, 1449, 950, 950, 1397, 1398,
	1296, 896, 895, 599, 950, 585, 1402, 301, 574, 246,
	449, 372, 568, 577, 1043, 949, 949, 502, 451, 1544,
	927, 452, 928, 949, 81, 803, 439, 925, 324, 87,
	853, 87, 1031, 87, 1221, 774, 950, 425, 1433, 431,
	87, 430, 1010, 422, 1510, 1169, 352, 952, 240, 241,
	1118, 1477, 906, 705, 1305, 949, 273, 1235, 1061, 87,
	1556, 1053, 1557, 1051, 1042, 1055, 951, 384, 514, 854,
	1559, 364, 918, 1178, 408, 1493, 930, 713, 1580, 87,
	1698, 87, 1590, 294, 1490, 293, 892, 361, 561, 87,
	1564, 1593, 875, 266, 1582, 87, 1588, 1489, 1630, 1634,
	1491, 1302, 1672, 301, 1091, 1092, 50, 19, 17, 826,
	16, 15, 1097, 1602, 1609, 13, 1238, 12, 1102, 1103,
	1105, 1107, 1108, 11, 1111, 1112, 18, 950, 1152, 1598,
	9, 7, 301, 930, 1123, 24, 926, 23, 22, 299,
	5, 301, 4, 2, 1, 1625, 949, 1575, 1576, 0,
	887, 553, 0, 1618, 0, 930, 887, 1605, 87, 87,
	0, 1628, 87, 0, 0, 0, 0, 0, 0, 1642,
	87, 0, 0, 0, 0, 0, 87, 1644, 1490, 0,
	1646, 1651, 0, 698, 87, 698, 246, 301, 929, 596,
	1150, 1489, 1643, 0, 1491, 0, 1648, 1650, 0, 1157,
	0, 811, 0, 1655, 1656, 1243, 1174, 1645, 301, 1657,
	0, 285, 87, 87, 87, 0, 87, 0, 0, 412,
	412, 1663, 929, 929, 0, 0, 1676, 0, 0, 516,
	929, 930, 1670, 1679, 87, 950, 0, 1574, 0, 926,
	1660, 0, 1677, 597, 1490, 0, 0, 0, 1682, 1681,
	1253, 1680, 0, 1674, 949, 0, 87, 1489, 0, 0,
	1491, 0, 929, 0, 1671, 1687, 598, 1702, 1701, 1678,
	0, 0, 0, 0, 0, 1712, 0, 1055, 1055, 1715,
	87, 1713, 0, 0, 0, 1719, 0, 1721, 1722, 0,
	1723, 0, 950, 0, 1616, 0, 0, 0, 0, 1720,
	1197, 1198, 1735, 1734, 0, 1254, 855, 0, 723, 0,
	0, 949, 0, 0, 950, 0, 0, 0, 0, 1741,
	0, 0, 706, 708, 0, 0, 0, 725, 0, 715,
	0, 0, 0, 949, 0, 0, 1055, 1055, 1055, 0,
	0, 755, 756, 757, 758, 759, 0, 724, 0, 0,
	762, 0, 0, 929, 0, 0, 0, 0, 0, 1260,
	1261, 1262, 0, 0, 0, 0, 0, 0, 0, 0,
	775, 0, 0, 1248, 1245, 1246, 1247, 1239, 1240, 1241,
	1242, 1244, 0, 0, 719, 0, 0, 0, 0, 0,
	950, 0, 0, 0, 0, 0, 0, 730, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 949,
	0, 301, 0, 0, 0, 0, 0, 952, 0, 0,
	0, 0, 0, 0, 0, 1324, 0, 826, 0, 698,
	0, 0, 0, 1331, 0, 0, 951, 0, 812, 0,
	427, 32, 740, 0, 0, 301, 0, 0, 301, 0,
	0, 952, 952, 0, 1174, 0, 0, 0, 1350, 952,
	1174, 929, 0, 0, 0, 1055, 1055, 0, 32, 0,
	951, 951, 0, 0, 0, 0, 0, 0, 951, 0,
	0, 0, 0, 0, 278, 0, 0, 286, 1358, 1359,
	0, 952, 1238, 0, 32, 0, 0, 741, 0, 0,
	0, 0, 0, 0, 0, 0, 286, 0, 0, 0,
	951, 1392, 0, 0, 0, 0, 0, 0, 929, 1055,
	1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055,
	1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 0, 1055,
	929, 0, 1403, 1404, 1405, 1406, 1407, 1408, 1409, 1410,
	1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420,
	1421, 0, 1425, 0, 0, 735, 732, 733, 734, 726,
	727, 728, 729, 731, 0, 0, 0, 1445, 1446, 826,
	0, 1243, 952, 0, 0, 719, 719, 0, 0, 0,
	0, 1470, 0, 1471, 0, 301, 1473, 1474, 1475, 0,
	0, 951, 0, 301, 0, 0, 0, 0, 0, 926,
	0, 1486, 0, 1495, 826, 1486, 929, 0, 0, 0,
	0, 0, 0, 301, 301, 0, 1253, 301, 0, 0,
	0, 0, 0, 0, 0, 0, 719, 1174, 0, 0,
	0, 0, 0, 926, 926, 0, 0, 412, 0, 0,
	0, 926, 963, 964, 965, 966, 967, 968, 969, 970,
	971, 972, 973, 974, 975, 976, 977, 978, 979, 980,
	981, 982, 983, 984, 0, 0, 0, 0, 1539, 0,
	0, 1254, 0, 926, 0, 0, 0, 723, 0, 0,
	952, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 725, 1040, 1041, 951,
	1052, 0, 1062, 1064, 1069, 1072, 1073, 1074, 0, 0,
	0, 0, 0, 0, 0, 0, 724, 0, 278, 0,
	0, 0, 0, 826, 0, 1558, 0, 246, 1055, 0,
	0, 516, 0, 0, 301, 0, 0, 952, 0, 0,
	1245, 1246, 1247, 1239, 1240, 1241, 1242, 1244, 0, 0,
	0, 1563, 0, 719, 0, 0, 951, 0, 0, 952,
	1116, 0, 0, 0, 926, 0, 730, 1486, 0, 0,
	0, 0, 0, 301, 0, 1601, 0, 0, 951, 0,
	0, 0, 0, 301, 0, 0, 0, 0, 0, 719,
	0, 723, 0, 742, 743, 744, 0, 0, 0, 0,
	0, 0, 0, 745, 0, 0, 0, 0, 0, 0,
	725, 740, 751, 0, 0, 1055, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 715, 0, 0, 0, 278,
	724, 0, 278, 278, 0, 952, 739, 0, 1622, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1636, 1637, 951, 761, 1641, 0, 0, 765,
	0, 1486, 0, 0, 246, 0, 741, 0, 0, 0,
	1495, 0, 926, 0, 0, 0, 0, 0, 719, 0,
	730, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1055, 0, 0, 0, 752, 0, 0,
	0, 1183, 0, 0, 0, 1188, 1669, 719, 301, 750,
	246, 0, 0, 0, 0, 0, 1662, 0, 0, 747,
	0, 0, 0, 0, 1202, 740, 0, 1486, 1601, 926,
	0, 0, 0, 0, 1211, 732, 733, 734, 726, 727,
	728, 729, 731, 0, 0, 0, 0, 746, 0, 1224,
	301, 926, 0, 1229, 248, 0, 0, 0, 0, 0,
	0, 0, 32, 0, 32, 0, 0, 0, 259, 0,
	0, 0, 0, 0, 719, 762, 0, 32, 0, 0,
	741, 1069, 1069, 1069, 0, 0, 0, 0, 0, 0,
	0, 749, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 250, 1291, 0, 0, 0, 0, 0, 260,
	0, 0, 0, 0, 1298, 0, 0, 0, 0, 0,
	0, 249, 251, 0, 0, 0, 0, 926, 0, 0,
	0, 412, 0, 0, 0, 0, 0, 0, 0, 0,
	412, 0, 748, 516, 736, 737, 738, 0, 735, 732,
	733, 734, 726, 727, 728, 729, 731, 252, 0, 0,
	1086, 0, 0, 0, 0, 0, 0, 253, 254, 1087,
	0, 723, 0, 742, 743, 744, 0, 0, 0, 0,
	0, 0, 255, 745, 0, 0, 0, 0, 0, 0,
	725, 0, 751, 0, 0, 0, 0, 0, 1356, 0,
	1357, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	724, 1362, 0, 0, 0, 0, 739, 0, 0, 1372,
	0, 0, 0, 0, 0, 1372, 0, 723, 0, 742,
	743, 744, 0, 0, 0, 0, 0, 0, 0, 1389,
	0, 0, 0, 0, 0, 0, 725, 0, 751, 1399,
	0, 0, 1401, 921, 0, 0, 0, 0, 0, 0,
	730, 0, 0, 0, 0, 0, 724, 723, 0, 742,
	743, 744, 739, 256, 0, 0, 257, 752, 0, 745,
	0, 258, 0, 1001, 1431, 1432, 725, 0, 751, 750,
	0, 0, 0, 1438, 1439, 1440, 0, 0, 0, 747,
	0, 0, 0, 0, 0, 740, 724, 0, 0, 0,
	0, 0, 739, 0, 0, 0, 730, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 746, 0, 0,
	0, 412, 0, 752, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 750, 0, 0, 0, 0,
	0, 1501, 0, 0, 0, 747, 730, 0, 0, 0,
	741, 740, 0, 0, 0, 0, 0, 0, 0, 723,
	0, 749, 0, 752, 0, 0, 1523, 0, 286, 0,
	0, 1527, 1528, 0, 0, 750, 1530, 0, 725, 0,
	751, 1532, 0, 0, 0, 747, 0, 0, 0, 0,
	0, 740, 0, 0, 0, 0, 1537, 0, 724, 0,
	1540, 0, 0, 0, 739, 0, 741, 1238, 0, 1255,
	1256, 1257, 748, 746, 736, 737, 738, 749, 735, 732,
	733, 734, 726, 727, 728, 729, 731, 0, 0, 0,
	0, 0, 1549, 0, 32, 1552, 0, 0, 0, 0,
	0, 0, 0, 0, 1175, 0, 741, 0, 730, 0,
	0, 0, 1252, 0, 0, 0, 0, 749, 0, 0,
	0, 0, 0, 0, 0, 752, 0, 0, 748, 0,
	736, 737, 738, 1573, 735, 732, 733, 734, 726, 727,
	728, 729, 731, 0, 0, 0, 0, 747, 0, 0,
	0, 0, 0, 740, 1591, 0, 1243, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 748, 1001,
	736, 737, 738, 1604, 735, 732, 733, 734, 726, 727,
	728, 729, 731, 761, 0, 1258, 0, 1613, 1614, 0,
	0, 1279, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1253, 0, 0, 0, 0, 0, 0, 741, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1627, 749,
	0, 0, 0, 0, 0, 0, 0, 0, 1629, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	761, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	516, 0, 0, 0, 0, 0, 1254, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	748, 0, 0, 0, 0, 0, 735, 732, 733, 734,
	726, 727, 728, 729, 731, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1249, 1250, 1251, 0, 1248, 1245, 1246, 1247, 1239, 1240,
	1241, 1242, 1244, 0, 0, 0, 0, 0, 0, 1700,
	0, 921, 0, 0, 921, 0, 0, 0, 0, 0,
	0, 1711, 1711, 0, 0, 0, 0, 0, 0, 0,
	447, 436, 437, 434, 435, 423, 0, 0, 0, 0,
	0, 0, 89, 90, 1711, 91, 0, 0, 0, 0,
	463, 429, 0, 0, 0, 92, 93, 191, 477, 478,
	94, 479, 480, 0, 95, 196, 197, 96, 444, 462,
	481, 482, 200, 1711, 473, 0, 455, 0, 97, 98,
	99, 0, 100, 0, 101, 0, 333, 102, 103, 0,
	456, 458, 0, 457, 459, 104, 105, 106, 107, 483,
	108, 484, 485, 517, 0, 109, 0, 0, 0, 476,
	111, 0, 112, 0, 0, 0, 428, 113, 464, 442,
	0, 0, 114, 115, 486, 0, 116, 0, 117, 0,
	0, 334, 0, 118, 474, 0, 209, 0, 119, 120,
	470, 472, 0, 0, 121, 0, 335, 122, 487, 488,
	489, 0, 454, 0, 336, 123, 337, 124, 125, 0,
	0, 475, 338, 126, 339, 0, 127, 0, 32, 128,
	0, 129, 130, 131, 132, 133, 340, 134, 135, 138,
	136, 418, 137, 443, 471, 139, 490, 140, 141, 921,
	921, 0, 0, 921, 142, 219, 341, 143, 342, 465,
	144, 145, 0, 466, 146, 222, 0, 147, 148, 149,
	491, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	343, 157, 158, 432, 159, 0, 247, 160, 161, 49,
	225, 162, 163, 460, 164, 165, 344, 166, 492, 167,
	0, 168, 169, 171, 493, 170, 467, 0, 51, 172,
	173, 0, 229, 494, 495, 0, 0, 174, 468, 469,
	441, 175, 176, 177, 178, 0, 0, 179, 180, 181,
	461, 0, 182, 183, 184, 331, 496, 0, 185, 0,
	0, 0, 47, 186, 187, 188, 189, 419, 48, 0,
	0, 0, 0, 0, 0, 0, 0, 415, 416, 0,
	0, 0, 0, 417, 0, 0, 424, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1583, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 595, 0, 0, 0, 0, 0, 0, 0, 921,
	0, 0, 0, 89, 90, 600, 91, 601, 602, 603,
	604, 190, 605, 606, 607, 608, 92, 93, 191, 192,
	193, 94, 194, 195, 609, 95, 196, 197, 96, 610,
	611, 198, 199, 200, 612, 201, 613, 332, 614, 97,
	98, 99, 0, 100, 615, 101, 616, 333, 102, 103,
	617, 618, 619, 620, 621, 622, 104, 105, 106, 107,
	202, 108, 203, 204, 623, 624, 109, 625, 626, 627,
	110, 111, 628, 112, 629, 761, 630, 205, 113, 206,
	631, 632, 633, 114, 115, 207, 0, 116, 634, 117,
	635, 636, 334, 637, 118, 208, 638, 209, 639, 119,
	120, 210, 211, 640, 641, 121, 642, 335, 122, 212,
	213, 214, 643, 215, 644, 336, 123, 337, 124, 125,
	645, 646, 216, 338, 126, 339, 647, 127, 648, 649,
	128, 0, 129, 130, 131, 132, 133, 340, 134, 135,
	138, 136, 650, 137, 651, 217, 139, 218, 140, 141,
	652, 653, 654, 655, 656, 142, 219, 341, 143, 342,
	220, 144, 145, 657, 221, 146, 222, 658, 147, 148,
	149, 223, 150, 151, 659, 153, 154, 152, 155, 660,
	156, 343, 157, 158, 224, 159, 0, 247, 160, 161,
	661, 225, 162, 163, 662, 164, 165, 344, 166, 226,
	167, 663, 168, 169, 171, 227, 170, 228, 664, 665,
	172, 173, 666, 229, 230, 231, 667, 668, 174, 232,
	233, 669, 175, 176, 177, 178, 670, 671, 179, 180,
	181, 672, 673, 182, 183, 184, 234, 235, 674, 185,
	675, 676, 677, 678, 186, 187, 188, 189, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 595, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1349, 89, 90, 600, 91, 601, 602,
	603, 604, 190, 605, 606, 607, 608, 92, 93, 191,
	192, 193, 94, 194, 195, 609, 95, 196, 197, 96,
	610, 611, 198, 199, 200, 612, 201, 613, 332, 614,
	97, 98, 99, 0, 100, 615, 101, 616, 333, 102,
	103, 617, 618, 619, 620, 621, 622, 104, 105, 106,
	107, 202, 108, 203, 204, 623, 624, 109, 625, 626,
	627, 110, 111, 628, 112, 629, 0, 630, 205, 113,
	206, 631, 632, 633, 114, 115, 207, 0, 116, 634,
	117, 635, 636, 334, 637, 118, 208, 638, 209, 639,
	119, 120, 210, 211, 640, 641, 121, 642, 335, 122,
	212, 213, 214, 643, 215, 644, 336, 123, 337, 124,
	125, 645, 646, 216, 338, 126, 339, 647, 127, 648,
	649, 128, 0, 129, 130, 131, 132, 133, 340, 134,
	135, 138, 136, 650, 137, 651, 217, 139, 218, 140,
	141, 652, 653, 654, 655, 656, 142, 219, 341, 143,
	342, 220, 144, 145, 657, 221, 146, 222, 658, 147,
	148, 149, 223, 150, 151, 659, 153, 154, 152, 155,
	660, 156, 343, 157, 158, 224, 159, 0, 247, 160,
	161, 661, 225, 162, 163, 662, 164, 165, 344, 166,
	226, 167, 663, 168, 169, 171, 227, 170, 228, 664,
	665, 172, 173, 666, 229, 230, 231, 667, 668, 174,
	232, 233, 669, 175, 176, 177, 178, 670, 671, 179,
	180, 181, 672, 673, 182, 183, 184, 234, 235, 674,
	185, 675, 676, 677, 678, 186, 187, 188, 189, 0,
	595, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 814, 89, 90, 600, 91, 601, 602, 603, 604,
	190, 605, 606, 607, 608, 92, 93, 191, 192, 193,
	94, 194, 195, 609, 95, 196, 197, 96, 610, 611,
	198, 199, 200, 612, 201, 613, 332, 614, 97, 98,
	99, 0, 100, 615, 101, 616, 333, 102, 103, 617,
	618, 619, 620, 621, 622, 104, 105, 106, 107, 202,
	108, 203, 204, 623, 624, 109, 625, 626, 627, 110,
	111, 628, 112, 629, 0, 630, 205, 113, 206, 631,
	632, 633, 114, 115, 207, 0, 116, 634, 117, 635,
	636, 334, 637, 118, 208, 638, 209, 639, 119, 120,
	210, 211, 640, 641, 121, 642, 335, 122, 212, 213,
	214, 643, 215, 644, 336, 123, 337, 124, 125, 645,
	646, 216, 338, 126, 339, 647, 127, 648, 649, 128,
	0, 129, 130, 131, 132, 133, 340, 134, 135, 138,
	136, 650, 137, 651, 217, 139, 218, 140, 141, 652,
	653, 654, 655, 656, 142, 219, 341, 143, 342, 220,
	144, 145, 657, 221, 146, 222, 658, 147, 148, 149,
	223, 150, 151, 659, 153, 154, 152, 155, 660, 156,
	343, 157, 158, 224, 159, 0, 247, 160, 161, 661,
	225, 162, 163, 662, 164, 165, 344, 166, 226, 167,
	663, 168, 169, 171, 227, 170, 228, 664, 665, 172,
	173, 666, 229, 230, 231, 667, 668, 174, 232, 233,
	669, 175, 176, 177, 178, 670, 671, 179, 180, 181,
	672, 673, 182, 183, 184, 234, 235, 674, 185, 675,
	676, 677, 678, 186, 187, 188, 189, 447, 436, 437,
	434, 435, 423, 0, 0, 0, 0, 0, 0, 89,
	90, 1019, 91, 0, 0, 0, 0, 463, 429, 0,
	0, 0, 92, 93, 191, 477, 478, 94, 479, 480,
	0, 95, 196, 197, 96, 444, 462, 481, 482, 200,
	0, 473, 0, 455, 0, 97, 98, 99, 0, 100,
	0, 101, 0, 333, 102, 103, 0, 456, 458, 0,
	457, 459, 104, 105, 106, 107, 483, 108, 484, 485,
	0, 0, 109, 0, 1020, 0, 476, 111, 0, 112,
	0, 0, 0, 428, 113, 464, 442, 0, 0, 114,
	115, 486, 0, 116, 0, 117, 0, 0, 334, 0,
	118, 474, 0, 209, 0, 119, 120, 470, 472, 0,
	0, 121, 0, 335, 122, 487, 488, 489, 0, 454,
	0, 336, 123, 337, 124, 125, 0, 0, 475, 338,
	126, 339, 0, 127, 0, 0, 128, 0, 129, 130,
	131, 132, 133, 340, 134, 135, 138, 136, 418, 137,
	443, 471, 139, 490, 140, 141, 0, 0, 0, 0,
	0, 142, 219, 341, 143, 342, 465, 144, 145, 0,
	466, 146, 222, 0, 147, 148, 149, 491, 150, 151,
	0, 153, 154, 152, 155, 0, 156, 343, 157, 158,
	432, 159, 0, 247, 160, 161, 0, 225, 162, 163,
	460, 164, 165, 344, 166, 492, 167, 0, 168, 169,
	171, 493, 170, 467, 0, 0, 172, 173, 0, 229,
	494, 495, 0, 0, 174, 468, 469, 441, 175, 176,
	177, 178, 0, 0, 179, 180, 181, 461, 0, 182,
	183, 184, 234, 496, 1018, 185, 0, 0, 0, 0,
	186, 187, 188, 189, 419, 0, 447, 436, 437, 434,
	435, 423, 0, 0, 415, 416, 1021, 0, 89, 90,
	417, 91, 0, 424, 1016, 0, 463, 429, 0, 0,
	0, 92, 93, 191, 477, 478, 94, 479, 480, 0,
	95, 196, 197, 96, 444, 462, 481, 482, 200, 0,
	473, 0, 455, 0, 97, 98, 99, 0, 100, 0,
	101, 0, 333, 102, 103, 0, 456, 458, 0, 457,
	459, 104, 105, 106, 107, 483, 108, 484, 485, 0,
	0, 109, 0, 0, 0, 476, 111, 0, 112, 0,
	0, 0, 428, 113, 464, 442, 0, 0, 114, 115,
	486, 0, 116, 0, 117, 0, 0, 334, 0, 118,
	474, 0, 209, 0, 119, 120, 470, 472, 0, 0,
	121, 0, 335, 122, 487, 488, 489, 0, 454, 0,
	336, 123, 337, 124, 125, 0, 0, 475, 338, 126,
	339, 0, 127, 0, 0, 128, 0, 129, 130, 131,
	132, 133, 340, 134, 135, 138, 136, 418, 137, 443,
	471, 139, 490, 140, 141, 0, 0, 0, 0, 0,
	142, 219, 341, 143, 342, 465, 144, 145, 0, 466,
	146, 222, 0, 147, 148, 149, 491, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 343, 157, 158, 432,
	159, 0, 247, 160, 161, 49, 225, 162, 163, 460,
	164, 165, 344, 166, 492, 167, 0, 168, 169, 171,
	493, 170, 467, 0, 51, 172, 173, 0, 229, 494,
	495, 0, 0, 174, 468, 469, 441, 175, 176, 177,
	178, 0, 0, 179, 180, 181, 461, 0, 182, 183,
	184, 331, 496, 0, 185, 0, 0, 0, 47, 186,
	187, 188, 189, 419, 48, 447, 436, 437, 434, 435,
	423, 0, 0, 415, 416, 0, 0, 89, 90, 417,
	91, 0, 424, 0, 0, 463, 429, 0, 0, 0,
	92, 93, 191, 477, 478, 94, 479, 480, 1065, 95,
	196, 197, 96, 444, 462, 481, 482, 200, 0, 473,
	0, 455, 0, 97, 98, 99, 0, 100, 0, 101,
	0, 333, 102, 103, 0, 456, 458, 0, 457, 459,
	104, 105, 106, 107, 483, 108, 484, 485, 0, 0,
	109, 0, 0, 0, 476, 111, 0, 112, 0, 0,
	0, 428, 113, 464, 442, 0, 0, 114, 115, 486,
	0, 116, 0, 117, 0, 1070, 334, 0, 118, 474,
	0, 209, 0, 119, 120, 470, 472, 0, 0, 121,
	0, 335, 122, 487, 488, 489, 0, 454, 0, 336,
	123, 337, 124, 125, 0, 1066, 475, 338, 126, 339,
	0, 127, 0, 0, 128, 0, 129, 130, 131, 132,
	133, 340, 134, 135, 138, 136, 418, 137, 443, 471,
	139, 490, 140, 141, 0, 0, 0, 0, 0, 142,
	219, 341, 143, 342, 465, 144, 145, 0, 466, 146,
	222, 0, 147, 148, 149, 491, 150, 151, 0, 153,
	154, 152, 155, 0, 156, 343, 157, 158, 432, 159,
	0, 247, 160, 161, 0, 225, 162, 163, 460, 164,
	165, 344, 166, 492, 167, 0, 168, 169, 171, 493,
	170, 467, 0, 0, 172, 173, 0, 229, 494, 495,
	0, 1067, 174, 468, 469, 441, 175, 176, 177, 178,
	0, 0, 179, 180, 181, 461, 0, 182, 183, 184,
	234, 496, 0, 185, 0, 0, 0, 0, 186, 187,
	188, 189, 419, 0, 447, 436, 437, 434, 435, 423,
	0, 0, 415, 416, 0, 0, 89, 90, 417, 91,
	0, 424, 0, 0, 463, 429, 0, 0, 0, 92,
	93, 191, 477, 478, 94, 479, 480, 0, 95, 196,
	197, 96, 444, 462, 481, 482, 200, 0, 473, 0,
	455, 0, 97, 98, 99, 0, 100, 0, 101, 0,
	333, 102, 103, 0, 456, 458, 0, 457, 459, 104,
	105, 106, 107, 483, 108, 484, 485, 0, 0, 109,
	0, 0, 0, 476, 111, 0, 112, 0, 0, 0,
	428, 113, 464, 442, 0, 0, 114, 115, 486, 0,
	116, 0, 117, 0, 0, 334, 0, 118, 474, 0,
	209, 0, 119, 120, 470, 472, 0, 0, 121, 0,
	335, 122, 487, 488, 489, 0, 454, 0, 336, 123,
	337, 124, 125, 0, 0, 475, 338, 126, 339, 0,
	127, 0, 0, 128, 0, 129, 130, 131, 132, 133,
	340, 134, 135, 138, 136, 418, 137, 443, 471, 139,
	490, 140, 141, 0, 0, 0, 0, 0, 142, 219,
	341, 143, 342, 465, 144, 145, 0, 466, 146, 222,
	0, 147, 148, 149, 491, 150, 151, 0, 153, 154,
	152, 155, 0, 156, 343, 157, 158, 432, 159, 0,
	247, 160, 161, 0, 225, 162, 163, 460, 164, 165,
	344, 166, 492, 167, 0, 168, 169, 171, 493, 170,
	467, 0, 0, 172, 173, 0, 229, 494, 495, 0,
	0, 174, 468, 469, 441, 175, 176, 177, 178, 0,
	0, 179, 180, 181, 461, 0, 182, 183, 184, 234,
	496, 0, 185, 0, 0, 0, 0, 186, 187, 188,
	189, 419, 0, 447, 436, 437, 434, 435, 423, 0,
	0, 415, 416, 0, 0, 89, 90, 417, 91, 0,
	424, 1428, 0, 463, 429, 0, 0, 0, 92, 93,
	191, 477, 478, 94, 479, 480, 0, 95, 196, 197,
	96, 444, 462, 481, 482, 200, 0, 473, 0, 455,
	0, 97, 98, 99, 0, 100, 0, 101, 0, 333,
	102, 103, 0, 456, 458, 0, 457, 459, 104, 105,
	106, 107, 483, 108, 484, 485, 0, 0, 109, 0,
	0, 0, 476, 111, 0, 112, 0, 0, 0, 428,
	113, 464, 442, 0, 0, 114, 115, 486, 0, 116,
	0, 117, 0, 0, 334, 0, 118, 474, 0, 209,
	0, 119, 120, 470, 472, 0, 0, 121, 0, 335,
	122, 487, 488, 489, 0, 454, 0, 336, 123, 337,
	124, 125, 0, 0, 475, 338, 126, 339, 0, 127,
	0, 0, 128, 0, 129, 130, 131, 132, 133, 340,
	134, 135, 138, 136, 418, 137, 443, 471, 139, 490,
	140, 141, 0, 0, 0, 0, 0, 142, 219, 341,
	143, 342, 465, 144, 145, 0, 466, 146, 222, 0,
	147, 148, 149, 491, 150, 151, 0, 153, 154, 152,
	155, 0, 156, 343, 157, 158, 432, 159, 0, 247,
	160, 161, 0, 225, 162, 163, 460, 164, 165, 344,
	166, 492, 167, 0, 168, 169, 171, 493, 170, 467,
	0, 0, 172, 173, 0, 229, 494, 495, 0, 0,
	174, 468, 469, 441, 175, 176, 177, 178, 0, 0,
	179, 180, 181, 461, 0, 182, 183, 184, 234, 496,
	0, 185, 0, 0, 0, 0, 186, 187, 188, 189,
	419, 0, 447, 436, 437, 434, 435, 423, 0, 0,
	415, 416, 0, 0, 89, 90, 417, 91, 0, 424,
	1369, 0, 463, 429, 0, 0, 0, 92, 93, 191,
	477, 478, 94, 479, 480, 0, 95, 196, 197, 96,
	444, 462, 481, 482, 200, 0, 473, 0, 455, 0,
	97, 98, 99, 0, 100, 0, 101, 0, 333, 102,
	103, 0, 456, 458, 0, 457, 459, 104, 105, 106,
	107, 483, 108, 484, 485, 0, 0, 109, 0, 0,
	0, 476, 111, 0, 112, 0, 0, 0, 428, 113,
	464, 442, 0, 0, 114, 115, 486, 0, 116, 0,
	117, 0, 0, 334, 0, 118, 474, 0, 209, 0,
	119, 120, 470, 472, 0, 0, 121, 0, 335, 122,
	487, 488, 489, 0, 454, 0, 336, 123, 337, 124,
	125, 0, 0, 475, 338, 126, 339, 0, 127, 0,
	0, 128, 0, 129, 130, 131, 132, 133, 340, 134,
	135, 138, 136, 418, 137, 443, 471, 139, 490, 140,
	141, 0, 0, 0, 0, 0, 142, 219, 341, 143,
	342, 465, 144, 145, 0, 466, 146, 222, 0, 147,
	148, 149, 491, 150, 151, 0, 153, 154, 152, 155,
	0, 156, 343, 157, 158, 432, 159, 0, 247, 160,
	161, 0, 225, 162, 163, 460, 164, 165, 344, 166,
	492, 167, 0, 168, 169, 171, 493, 170, 467, 0,
	0, 172, 173, 0, 229, 494, 495, 0, 0, 174,
	468, 469, 441, 175, 176, 177, 178, 0, 0, 179,
	180, 181, 461, 0, 182, 183, 184, 234, 496, 0,
	185, 0, 0, 0, 0, 186, 187, 188, 189, 419,
	0, 447, 436, 437, 434, 435, 423, 0, 0, 415,
	416, 0, 0, 89, 90, 417, 91, 0, 424, 1015,
	0, 463, 429, 0, 0, 0, 92, 93, 191, 477,
	478, 94, 479, 480, 0, 95, 196, 197, 96, 444,
	462, 481, 482, 200, 0, 473, 0, 455, 0, 97,
	98, 99, 0, 100, 0, 101, 0, 333, 102, 103,
	0, 456, 458, 0, 457, 459, 104, 105, 106, 107,
	483, 108, 484, 485, 0, 0, 109, 0, 0, 0,
	476, 111, 0, 112, 0, 0, 0, 428, 113, 464,
	442, 0, 0, 114, 115, 486, 0, 116, 0, 117,
	0, 0, 334, 0, 118, 474, 0, 209, 0, 119,
	120, 470, 472, 0, 0, 121, 0, 335, 122, 487,
	488, 489, 0, 454, 0, 336, 123, 337, 124, 125,
	0, 0, 475, 338, 126, 339, 0, 127, 0, 0,
	128, 0, 129, 130, 131, 132, 133, 340, 134, 135,
	138, 136, 418, 137, 443, 471, 139, 490, 140, 141,
	0, 0, 0, 0, 0, 142, 219, 341, 143, 342,
	465, 144, 145, 0, 466, 146, 222, 0, 147, 148,
	149, 491, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 343, 157, 158, 432, 159, 0, 247, 160, 161,
	0, 225, 162, 163, 460, 164, 165, 344, 166, 492,
	167, 0, 168, 169, 171, 493, 170, 467, 0, 0,
	172, 173, 0, 229, 494, 495, 0, 0, 174, 468,
	469, 441, 175, 176, 177, 178, 0, 0, 179, 180,
	181, 461, 0, 182, 183, 184, 234, 496, 0, 185,
	0, 0, 0, 0, 186, 187, 188, 189, 419, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 415, 416,
	0, 0, 0, 0, 417, 767, 1011, 424, 447, 436,
	437, 434, 435, 423, 0, 0, 0, 0, 0, 0,
	89, 90, 0, 91, 0, 0, 0, 0, 463, 429,
	0, 0, 0, 92, 93, 191, 477, 478, 94, 479,
	480, 0, 95, 196, 197, 96, 444, 462, 481, 482,
	200, 0, 473, 0, 455, 0, 97, 98, 99, 0,
	100, 0, 101, 0, 333, 102, 103, 0, 456, 458,
	0, 457, 459, 104, 105, 106, 107, 483, 108, 484,
	485, 0, 0, 109, 0, 0, 0, 476, 111, 0,
	112, 0, 0, 0, 428, 113, 464, 442, 0, 0,
	114, 115, 486, 0, 116, 0, 117, 0, 0, 334,
	0, 118, 474, 0, 209, 0, 119, 120, 470, 472,
	0, 0, 121, 0, 335, 122, 487, 488, 489, 0,
	454, 0, 336, 123, 337, 124, 125, 0, 0, 475,
	338, 126, 339, 0, 127, 0, 0, 128, 0, 129,
	130, 131, 132, 133, 340, 134, 135, 138, 136, 418,
	137, 443, 471, 139, 490, 140, 141, 0, 0, 0,
	0, 0, 142, 219, 341, 143, 342, 465, 144, 145,
	0, 466, 146, 222, 0, 147, 148, 149, 491, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 343, 157,
	158, 432, 159, 0, 247, 160, 161, 0, 225, 162,
	163, 460, 164, 165, 344, 166, 492, 167, 0, 168,
	169, 171, 493, 170, 467, 0, 0, 172, 173, 0,
	229, 494, 495, 0, 0, 174, 468, 469, 441, 175,
	176, 177, 178, 0, 0, 179, 180, 181, 461, 0,
	182, 183, 184, 234, 496, 0, 185, 0, 0, 0,
	0, 186, 187, 188, 189, 419, 0, 447, 436, 437,
	434, 435, 423, 0, 0, 415, 416, 413, 0, 89,
	90, 417, 91, 0, 424, 0, 0, 463, 429, 0,
	0, 0, 92, 93, 191, 477, 478, 94, 479, 480,
	0, 95, 196, 197, 96, 444, 462, 481, 482, 200,
	0, 473, 0, 455, 0, 97, 98, 99, 0, 100,
	0, 101, 0, 333, 102, 103, 0, 456, 458, 0,
	457, 459, 104, 105, 106, 107, 483, 108, 484, 485,
	0, 0, 109, 0, 0, 0, 476, 111, 0, 112,
	0, 0, 0, 428, 113, 464, 442, 0, 0, 114,
	115, 486, 0, 116, 0, 117, 0, 0, 334, 0,
	118, 474, 0, 209, 0, 119, 120, 470, 472, 0,
	0, 121, 0, 335, 122, 487, 488, 489, 0, 454,
	0, 336, 123, 337, 124, 125, 0, 0, 475, 338,
	126, 339, 0, 127, 0, 0, 128, 0, 129, 130,
	131, 132, 133, 340, 134, 135, 138, 136, 418, 137,
	443, 471, 139, 490, 140, 141, 0, 0, 0, 0,
	0, 142, 219, 341, 143, 342, 465, 144, 145, 0,
	466, 146, 222, 0, 147, 148, 149, 491, 150, 151,
	0, 153, 154, 152, 155, 0, 156, 343, 157, 158,
	432, 159, 0, 247, 160, 161, 0, 225, 162, 163,
	460, 164, 165, 344, 166, 492, 167, 0, 168, 169,
	171, 493, 170, 467, 0, 0, 172, 173, 0, 229,
	494, 495, 0, 0, 174, 468, 469, 441, 175, 176,
	177, 178, 0, 0, 179, 180, 181, 461, 0, 182,
	183, 184, 234, 496, 1375, 185, 0, 0, 0, 0,
	186, 187, 188, 189, 419, 0, 447, 436, 437, 434,
	435, 423, 0, 0, 415, 416, 0, 0, 89, 90,
	417, 91, 0, 424, 0, 0, 463, 429, 0, 0,
	0, 92, 93, 191, 477, 478, 94, 479, 480, 0,
	95, 196, 197, 96, 444, 462, 481, 482, 200, 0,
	473, 0, 455, 0, 97, 98, 99, 0, 100, 0,
	101, 0, 333, 102, 103, 0, 456, 458, 0, 457,
	459, 104, 105, 106, 107, 483, 108, 484, 485, 517,
	0, 109, 0, 0, 0, 476, 111, 0, 112, 0,
	0, 0, 428, 113, 464, 442, 0, 0, 114, 115,
	486, 0, 116, 0, 117, 0, 0, 334, 0, 118,
	474, 0, 209, 0, 119, 120, 470, 472, 0, 0,
	121, 0, 335, 122, 487, 488, 489, 0, 454, 0,
	336, 123, 337, 124, 125, 0, 0, 475, 338, 126,
	339, 0, 127, 0, 0, 128, 0, 129, 130, 131,
	132, 133, 340, 134, 135, 138, 136, 418, 137, 443,
	471, 139, 490, 140, 141, 0, 0, 0, 0, 0,
	142, 219, 341, 143, 342, 465, 144, 145, 0, 466,
	146, 222, 0, 147, 148, 149, 491, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 343, 157, 158, 432,
	159, 0, 247, 160, 161, 0, 225, 162, 163, 460,
	164, 165, 344, 166, 492, 167, 0, 168, 169, 171,
	493, 170, 467, 0, 0, 172, 173, 0, 229, 494,
	495, 0, 0, 174, 468, 469, 441, 175, 176, 177,
	178, 0, 0, 179, 180, 181, 461, 0, 182, 183,
	184, 234, 496, 0, 185, 0, 0, 0, 0, 186,
	187, 188, 189, 419, 0, 447, 436, 437, 434, 435,
	423, 0, 0, 415, 416, 0, 0, 89, 90, 417,
	91, 0, 424, 0, 0, 463, 429, 0, 0, 0,
	92, 93, 191, 477, 478, 94, 479, 480, 0, 95,
	196, 197, 96, 444, 462, 481, 482, 200, 0, 473,
	0, 455, 0, 97, 98, 99, 0, 100, 0, 101,
	0, 333, 102, 103, 0, 456, 458, 0, 457, 459,
	104, 105, 106, 107, 483, 108, 484, 485, 0, 0,
	109, 0, 0, 0, 476, 111, 0, 112, 0, 0,
	0, 428, 113, 464, 442, 0, 0, 114, 115, 486,
	0, 116, 0, 117, 0, 1070, 334, 0, 118, 474,
	0, 209, 0, 119, 120, 470, 472, 0, 0, 121,
	0, 335, 122, 487, 488, 489, 0, 454, 0, 336,
	123, 337, 124, 125, 0, 0, 475, 338, 126, 339,
	0, 127, 0, 0, 128, 0, 129, 130, 131, 132,
	133, 340, 134, 135, 138, 136, 418, 137, 443, 471,
	139, 490, 140, 141, 0, 0, 0, 0, 0, 142,
	219, 341, 143, 342, 465, 144, 145, 0, 466, 146,
	222, 0, 147, 148, 149, 491, 150, 151, 0, 153,
	154, 152, 155, 0, 156, 343, 157, 158, 432, 159,
	0, 247, 160, 161, 0, 225, 162, 163, 460, 164,
	165, 344, 166, 492, 167, 0, 168, 169, 171, 493,
	170, 467, 0, 0, 172, 173, 0, 229, 494, 495,
	0, 0, 174, 468, 469, 441, 175, 176, 177, 178,
	0, 0, 179, 180, 181, 461, 0, 182, 183, 184,
	234, 496, 0, 185, 0, 0, 0, 0, 186, 187,
	188, 189, 419, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 415, 416, 0, 0, 0, 0, 417, 0,
	0, 424, 447, 436, 437, 434, 435, 423, 0, 0,
	0, 0, 0, 0, 89, 90, 707, 91, 0, 0,
	0, 0, 463, 429, 0, 0, 0, 92, 93, 191,
	477, 478, 94, 479, 480, 0, 95, 196, 197, 96,
	444, 462, 481, 482, 200, 0, 473, 0, 455, 0,
	97, 98, 99, 0, 100, 0, 101, 0, 333, 102,
	103, 0, 456, 458, 0, 457, 459, 104, 105, 106,
	107, 483, 108, 484, 485, 0, 0, 109, 0, 0,
	0, 476, 111, 0, 112, 0, 0, 0, 428, 113,
	464, 442, 0, 0, 114, 115, 486, 0, 116, 0,
	117, 0, 0, 334, 0, 118, 474, 0, 209, 0,
	119, 120, 470, 472, 0, 0, 121, 0, 335, 122,
	487, 488, 489, 0, 454, 0, 336, 123, 337, 124,
	125, 0, 0, 475, 338, 126, 339, 0, 127, 0,
	0, 128, 0, 129, 130, 131, 132, 133, 340, 134,
	135, 138, 136, 418, 137, 443, 471, 139, 490, 140,
	141, 0, 0, 0, 0, 0, 142, 219, 341, 143,
	342, 465, 144, 145, 0, 466, 146, 222, 0, 147,
	148, 149, 491, 150, 151, 0, 153, 154, 152, 155,
	0, 156, 343, 157, 158, 432, 159, 0, 247, 160,
	161, 0, 225, 162, 163, 460, 164, 165, 344, 166,
	492, 167, 0, 168, 169, 171, 493, 170, 467, 0,
	0, 172, 173, 0, 229, 494, 495, 0, 0, 174,
	468, 469, 441, 175, 176, 177, 178, 0, 0, 179,
	180, 181, 461, 0, 182, 183, 184, 234, 496, 0,
	185, 0, 0, 0, 0, 186, 187, 188, 189, 419,
	0, 447, 436, 437, 434, 435, 423, 0, 0, 415,
	416, 0, 0, 89, 90, 417, 91, 0, 424, 0,
	0, 463, 429, 0, 0, 0, 92, 93, 191, 477,
	478, 94, 479, 480, 0, 95, 196, 197, 96, 444,
	462, 481, 482, 200, 0, 473, 0, 455, 0, 97,
	98, 99, 0, 100, 0, 101, 0, 333, 102, 1710,
	0, 456, 458, 0, 457, 459, 104, 105, 106, 107,
	483, 108, 484, 485, 0, 0, 109, 0, 0, 0,
	476, 111, 0, 112, 0, 0, 0, 428, 113, 464,
	442, 0, 0, 114, 115, 486, 0, 116, 0, 117,
	0, 0, 334, 0, 118, 474, 0, 209, 0, 119,
	120, 470, 472, 0, 0, 121, 0, 335, 122, 487,
	488, 489, 0, 454, 0, 336, 123, 337, 124, 125,
	0, 0, 475, 338, 126, 339, 0, 127, 0, 0,
	128, 0, 129, 130, 131, 132, 133, 340, 134, 135,
	138, 136, 418, 137, 443, 471, 139, 490, 140, 141,
	0, 0, 0, 0, 0, 142, 219, 341, 143, 342,
	465, 144, 145, 0, 466, 146, 222, 0, 147, 148,
	149, 491, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 343, 157, 158, 432, 159, 0, 247, 160, 161,
	0, 225, 162, 163, 460, 164, 165, 344, 166, 492,
	167, 0, 168, 169, 171, 493, 170, 467, 0, 0,
	172, 173, 0, 229, 494, 495, 0, 0, 174, 468,
	469, 441, 175, 176, 1709, 178, 0, 0, 179, 180,
	181, 461, 0, 182, 183, 184, 234, 496, 0, 185,
	0, 0, 0, 0, 186, 187, 188, 189, 419, 0,
	447, 436, 437, 434, 435, 423, 0, 0, 415, 416,
	0, 0, 89, 90, 417, 91, 0, 424, 0, 0,
	463, 429, 0, 0, 0, 92, 93, 1708, 477, 478,
	94, 479, 480, 0, 95, 196, 197, 96, 444, 462,
	481, 482, 200, 0, 473, 0, 455, 0, 97, 98,
	99, 0, 100, 0, 101, 0, 333, 102, 1710, 0,
	456, 458, 0, 457, 459, 104, 105, 106, 107, 483,
	108, 484, 485, 0, 0, 109, 0, 0, 0, 476,
	111, 0, 112, 0, 0, 0, 428, 113, 464, 442,
	0, 0, 114, 115, 486, 0, 116, 0, 117, 0,
	0, 334, 0, 118, 474, 0, 209, 0, 119, 120,
	470, 472, 0, 0, 121, 0, 335, 122, 487, 488,
	489, 0, 454, 0, 336, 123, 337, 124, 125, 0,
	0, 475, 338, 126, 339, 0, 127, 0, 0, 128,
	0, 129, 130, 131, 132, 133, 340, 134, 135, 138,
	136, 418, 137, 443, 471, 139, 490, 140, 141, 0,
	0, 0, 0, 0, 142, 219, 341, 143, 342, 465,
	144, 145, 0, 466, 146, 222, 0, 147, 148, 149,
	491, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	343, 157, 158, 432, 159, 0, 247, 160, 161, 0,
	225, 162, 163, 460, 164, 165, 344, 166, 492, 167,
	0, 168, 169, 171, 493, 170, 467, 0, 0, 172,
	173, 0, 229, 494, 495, 0, 0, 174, 468, 469,
	441, 175, 176, 1709, 178, 0, 0, 179, 180, 181,
	461, 0, 182, 183, 184, 234, 496, 0, 185, 0,
	0, 0, 0, 186, 187, 188, 189, 419, 0, 447,
	436, 437, 434, 435, 423, 0, 0, 415, 416, 0,
	0, 89, 90, 417, 91, 0, 424, 0, 0, 463,
	429, 0, 0, 0, 92, 93, 191, 477, 478, 94,
	479, 480, 0, 95, 196, 197, 96, 444, 462, 481,
	482, 200, 0, 473, 0, 455, 0, 97, 98, 99,
	0, 100, 0, 101, 0, 333, 102, 103, 0, 456,
	458, 0, 457, 459, 104, 105, 106, 107, 483, 108,
	484, 485, 0, 0, 109, 0, 0, 0, 476, 111,
	0, 112, 0, 0, 0, 428, 113, 464, 442, 0,
	0, 114, 115, 486, 0, 116, 0, 117, 0, 0,
	334, 0, 118, 474, 0, 209, 0, 119, 120, 470,
	472, 0, 0, 121, 0, 335, 122, 487, 488, 489,
	0, 454, 0, 336, 123, 337, 124, 125, 0, 0,
	475, 338, 126, 339, 0, 127, 0, 0, 128, 0,
	129, 130, 131, 132, 133, 340, 134, 135, 138, 136,
	418, 137, 443, 471, 139, 490, 140, 141, 0, 0,
	0, 0, 0, 142, 219, 341, 143, 342, 465, 144,
	145, 0, 466, 146, 222, 0, 147, 148, 149, 491,
	150, 151, 0, 153, 154, 152, 155, 0, 156, 343,
	157, 158, 432, 159, 0, 247, 160, 161, 0, 225,
	162, 163, 460, 164, 165, 344, 166, 492, 167, 0,
	168, 169, 171, 493, 170, 467, 0, 0, 172, 173,
	0, 229, 494, 495, 0, 0, 174, 468, 469, 441,
	175, 176, 177, 178, 0, 0, 179, 180, 181, 461,
	0, 182, 183, 184, 234, 496, 0, 185, 0, 0,
	0, 0, 186, 187, 188, 189, 419, 0, 447, 436,
	437, 434, 435, 423, 0, 0, 415, 416, 0, 0,
	89, 90, 417, 91, 0, 424, 0, 0, 463, 429,
	0, 0, 0, 92, 93, 191, 477, 478, 94, 479,
	480, 0, 95, 196, 197, 96, 444, 462, 481, 482,
	200, 0, 473, 0, 455, 0, 97, 98, 99, 0,
	100, 0, 101, 0, 333, 102, 103, 0, 456, 458,
	0, 457, 459, 104, 105, 106, 107, 483, 108, 484,
	485, 0, 0, 109, 0, 0, 0, 476, 111, 0,
	112, 0, 0, 0, 428, 113, 464, 442, 0, 0,
	114, 115, 486, 0, 116, 0, 117, 0, 0, 334,
	0, 118, 474, 0, 209, 0, 119, 120, 470, 472,
	0, 0, 121, 0, 335, 122, 487, 488, 489, 0,
	454, 0, 336, 123, 337, 124, 125, 0, 0, 475,
	338, 126, 339, 0, 127, 0, 0, 128, 0, 129,
	130, 131, 132, 133, 340, 134, 135, 138, 136, 0,
	137, 443, 471, 139, 490, 140, 141, 0, 0, 0,
	0, 0, 142, 219, 341, 143, 342, 465, 144, 145,
	0, 466, 146, 222, 0, 147, 148, 149, 491, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 343, 157,
	158, 1060, 159, 0, 247, 160, 161, 0, 225, 162,
	163, 460, 164, 165, 344, 166, 492, 167, 0, 168,
	169, 171, 493, 170, 467, 0, 0, 172, 173, 0,
	229, 494, 495, 0, 0, 174, 468, 469, 441, 175,
	176, 177, 178, 0, 0, 179, 180, 181, 461, 0,
	182, 183, 184, 234, 496, 0, 185, 0, 0, 0,
	0, 186, 187, 188, 189, 447, 436, 437, 434, 435,
	423, 0, 0, 0, 0, 1056, 1057, 89, 90, 0,
	91, 1058, 0, 0, 1059, 463, 429, 0, 0, 0,
	92, 93, 0, 477, 478, 94, 479, 480, 0, 95,
	196, 197, 96, 444, 462, 481, 482, 200, 0, 473,
	0, 455, 0, 97, 98, 99, 0, 100, 0, 101,
	0, 333, 102, 1710, 0, 456, 458, 0, 457, 459,
	104, 105, 106, 107, 483, 108, 484, 485, 0, 0,
	109, 0, 0, 0, 476, 111, 0, 112, 0, 0,
	0, 428, 113, 464, 442, 0, 0, 114, 115, 486,
	0, 116, 0, 117, 0, 0, 334, 0, 118, 474,
	0, 209, 0, 119, 120, 470, 472, 0, 0, 121,
	0, 335, 122, 487, 488, 489, 0, 454, 0, 0,
	123, 337, 124, 125, 0, 0, 475, 338, 126, 0,
	0, 127, 0, 0, 128, 0, 129, 130, 131, 132,
	133, 340, 134, 135, 138, 136, 418, 137, 443, 471,
	139, 490, 140, 141, 0, 0, 0, 0, 0, 142,
	219, 341, 143, 342, 465, 144, 145, 0, 466, 146,
	222, 0, 147, 148, 149, 491, 150, 151, 0, 153,
	154, 152, 155, 0, 156, 343, 157, 158, 432, 159,
	0, 247, 160, 161, 0, 225, 162, 163, 460, 164,
	165, 0, 166, 492, 167, 0, 168, 169, 171, 493,
	170, 467, 0, 0, 172, 173, 0, 229, 494, 495,
	0, 0, 174, 468, 469, 441, 175, 176, 1709, 178,
	0, 0, 179, 180, 181, 461, 0, 182, 183, 184,
	234, 496, 0, 185, 0, 0, 0, 0, 186, 187,
	188, 189, 447, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 415, 416, 89, 90, 0, 91, 417, 0,
	0, 424, 463, 0, 0, 0, 0, 92, 93, 191,
	192, 193, 94, 194, 195, 0, 95, 196, 197, 96,
	0, 462, 198, 199, 200, 0, 473, 0, 455, 0,
	97, 98, 99, 0, 100, 0, 101, 0, 333, 102,
	103, 0, 456, 458, 0, 457, 459, 104, 105, 106,
	107, 202, 108, 203, 204, 0, 0, 109, 0, 0,
	0, 110, 111, 0, 112, 0, 0, 0, 205, 113,
	464, 0, 0, 0, 114, 115, 207, 0, 116, 0,
	117, 0, 0, 334, 0, 118, 474, 0, 209, 0,
	119, 120, 470, 472, 0, 0, 121, 0, 335, 122,
	212, 213, 214, 0, 215, 0, 336, 123, 337, 124,
	125, 0, 0, 475, 338, 126, 339, 0, 127, 0,
	0, 128, 0, 129, 130, 131, 132, 133, 340, 134,
	135, 138, 136, 0, 137, 0, 471, 139, 218, 140,
	141, 0, 0, 0, 0, 0, 142, 219, 341, 143,
	342, 465, 144, 145, 0, 466, 146, 222, 0, 147,
	148, 149, 223, 150, 151, 0, 153, 154, 152, 155,
	0, 156, 343, 157, 158, 224, 159, 0, 247, 160,
	161, 0, 225, 162, 163, 460, 164, 165, 344, 166,
	226, 167, 0, 168, 169, 171, 227, 170, 467, 0,
	0, 172, 173, 0, 229, 230, 231, 0, 0, 174,
	468, 469, 0, 175, 176, 177, 178, 0, 0, 179,
	180, 181, 461, 0, 182, 183, 184, 234, 235, 0,
	185, 0, 0, 0, 327, 186, 187, 188, 189, 0,
	0, 0, 0, 0, 0, 0, 89, 90, 0, 91,
	0, 0, 0, 0, 190, 0, 0, 0, 1488, 92,
	93, 191, 192, 193, 94, 194, 195, 0, 95, 196,
	197, 96, 0, 0, 198, 199, 200, 0, 201, 0,
	332, 0, 97, 98, 99, 0, 100, 0, 101, 0,
	333, 102, 103, 0, 0, 0, 0, 0, 0, 104,
	105, 106, 107, 202, 108, 203, 204, 0, 0, 109,
	0, 0, 0, 110, 111, 0, 112, 0, 0, 0,
	205, 113, 206, 0, 0, 0, 114, 115, 207, 0,
	116, 0, 117, 0, 0, 334, 0, 118, 208, 0,
	209, 0, 119, 120, 210, 211, 0, 0, 121, 0,
	335, 122, 212, 213, 214, 0, 215, 0, 336, 123,
	337, 124, 125, 0, 0, 216, 338, 126, 339, 0,
	127, 0, 0, 128, 0, 129, 130, 131, 132, 133,
	340, 134, 135, 138, 136, 0, 137, 0, 217, 139,
	218, 140, 141, 0, 0, 0, 0, 0, 142, 219,
	341, 143, 342, 220, 144, 145, 0, 221, 146, 222,
	0, 147, 148, 149, 223, 150, 151, 0, 153, 154,
	152, 155, 0, 156, 343, 157, 158, 224, 159, 0,
	247, 160, 161, 49, 225, 162, 163, 0, 164, 165,
	344, 166, 226, 167, 0, 168, 169, 171, 227, 170,
	228, 0, 51, 172, 173, 0, 229, 230, 231, 0,
	0, 174, 232, 233, 0, 175, 176, 177, 178, 0,
	0, 179, 180, 181, 0, 0, 182, 183, 184, 331,
	235, 0, 185, 0, 0, 0, 47, 186, 187, 188,
	189, 0, 48, 327, 579, 0, 580, 575, 570, 0,
	0, 0, 0, 0, 0, 89, 90, 0, 91, 0,
	46, 0, 0, 190, 0, 0, 0, 0, 92, 93,
	191, 192, 193, 94, 194, 195, 0, 95, 196, 197,
	96, 0, 0, 198, 199, 200, 0, 201, 0, 332,
	0, 97, 98, 99, 0, 100, 0, 101, 0, 333,
	102, 103, 0, 0, 0, 0, 0, 0, 104, 105,
	106, 107, 202, 108, 203, 204, 583, 0, 109, 0,
	0, 0, 110, 111, 0, 112, 0, 0, 0, 205,
	113, 206, 572, 0, 0, 114, 115, 207, 0, 116,
	0, 117, 0, 0, 334, 0, 118, 208, 0, 209,
	0, 119, 120, 210, 211, 0, 0, 121, 0, 335,
	122, 212, 213, 214, 0, 215, 0, 336, 123, 337,
	124, 125, 0, 0, 216, 338, 126, 339, 0, 127,
	0, 0, 128, 0, 129, 130, 131, 132, 133, 340,
	134, 135, 138, 136, 0, 137, 0, 217, 139, 218,
	140, 141, 0, 573, 0, 0, 0, 142, 219, 341,
	143, 342, 220, 144, 145, 0, 221, 146, 222, 0,
	147, 148, 149, 223, 150, 151, 0, 153, 154, 152,
	155, 0, 156, 343, 157, 158, 224, 159, 0, 247,
	160, 161, 0, 225, 162, 163, 0, 164, 165, 344,
	166, 226, 167, 0, 168, 169, 171, 227, 170, 228,
	0, 0, 172, 173, 0, 229, 230, 231, 0, 0,
	174, 232, 233, 571, 175, 176, 177, 178, 0, 0,
	179, 180, 181, 0, 0, 182, 183, 184, 234, 235,
	0, 185, 0, 0, 0, 0, 186, 187, 188, 189,
	327, 579, 0, 580, 575, 570, 0, 0, 0, 0,
	581, 576, 89, 90, 0, 91, 0, 0, 0, 0,
	190, 0, 0, 0, 0, 92, 93, 191, 192, 193,
	94, 194, 195, 0, 95, 196, 197, 96, 0, 0,
	198, 199, 200, 0, 201, 0, 332, 0, 97, 98,
	99, 0, 100, 0, 101, 0, 333, 102, 103, 0,
	0, 0, 0, 0, 0, 104, 105, 106, 107, 202,
	108, 203, 204, 566, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 205, 113, 206, 572,
	0, 0, 114, 115, 207, 0, 116, 0, 117, 0,
	0, 334, 0, 118, 208, 0, 209, 0, 119, 120,
	210, 211, 0, 0, 121, 0, 335, 122, 212, 213,
	214, 0, 215, 0, 336, 123, 337, 124, 125, 0,
	0, 216, 338, 126, 339, 0, 127, 0, 0, 128,
	0, 129, 130, 131, 132, 133, 340, 134, 135, 138,
	136, 0, 137, 0, 217, 139, 218, 140, 141, 0,
	573, 0, 0, 0, 142, 219, 341, 143, 342, 220,
	144, 145, 0, 221, 146, 222, 0, 147, 148, 149,
	223, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	343, 157, 158, 224, 159, 0, 247, 160, 161, 0,
	225, 162, 163, 0, 164, 165, 344, 166, 226, 167,
	0, 168, 169, 171, 227, 170, 228, 0, 0, 172,
	173, 0, 229, 230, 231, 0, 0, 174, 232, 233,
	571, 175, 176, 177, 178, 0, 0, 179, 180, 181,
	0, 0, 182, 183, 184, 234, 235, 0, 185, 0,
	0, 0, 0, 186, 187, 188, 189, 327, 579, 0,
	580, 575, 570, 0, 0, 0, 0, 581, 576, 89,
	90, 0, 91, 0, 0, 0, 0, 190, 0, 0,
	0, 0, 92, 93, 191, 192, 193, 94, 194, 195,
	0, 95, 196, 197, 96, 0, 0, 198, 199, 200,
	0, 201, 0, 332, 0, 97, 98, 99, 0, 100,
	0, 101, 0, 333, 102, 103, 0, 0, 0, 0,
	0, 0, 104, 105, 106, 107, 202, 108, 203, 204,
	0, 0, 109, 0, 0, 0, 110, 111, 0, 112,
	0, 0, 0, 205, 113, 206, 572, 0, 0, 114,
	115, 207, 0, 116, 0, 117, 0, 0, 334, 0,
	118, 208, 0, 209, 0, 119, 120, 210, 211, 0,
	0, 121, 0, 335, 122, 212, 213, 214, 0, 215,
	0, 336, 123, 337, 124, 125, 0, 0, 216, 338,
	126, 339, 0, 127, 0, 0, 128, 0, 129, 130,
	131, 132, 133, 340, 134, 135, 138, 136, 0, 137,
	0, 217, 139, 218, 140, 141, 0, 573, 0, 0,
	0, 142, 219, 341, 143, 342, 220, 144, 145, 0,
	221, 146, 222, 0, 147, 148, 149, 223, 150, 151,
	0, 153, 154, 152, 155, 0, 156, 343, 157, 158,
	224, 159, 0, 247, 160, 161, 0, 225, 162, 163,
	0, 164, 165, 344, 166, 226, 167, 0, 168, 169,
	171, 227, 170, 228, 0, 0, 172, 173, 0, 229,
	230, 231, 0, 0, 174, 232, 233, 571, 175, 176,
	177, 178, 0, 0, 179, 180, 181, 0, 0, 182,
	183, 184, 234, 235, 0, 185, 86, 0, 0, 0,
	186, 187, 188, 189, 0, 0, 0, 0, 89, 90,
	0, 91, 0, 0, 581, 576, 190, 0, 0, 0,
	0, 92, 93, 191, 192, 193, 94, 194, 195, 0,
	95, 196, 197, 96, 0, 0, 198, 199, 200, 0,
	201, 0, 0, 0, 97, 98, 99, 0, 100, 0,
	101, 0, 0, 102, 103, 0, 0, 0, 0, 0,
	0, 104, 105, 106, 107, 202, 108, 203, 204, 0,
	0, 109, 0, 0, 0, 110, 111, 0, 112, 0,
	0, 0, 205, 113, 206, 0, 0, 0, 114, 115,
	207, 0, 116, 0, 117, 0, 0, 0, 0, 118,
	208, 0, 209, 0, 119, 120, 210, 211, 0, 0,
	121, 0, 0, 122, 212, 213, 214, 0, 215, 0,
	0, 123, 0, 124, 125, 0, 0, 216, 0, 126,
	0, 0, 127, 0, 0, 128, 0, 129, 130, 131,
	132, 133, 0, 134, 135, 138, 136, 0, 137, 0,
	217, 139, 218, 140, 141, 0, 0, 300, 0, 0,
	142, 219, 0, 143, 0, 220, 144, 145, 0, 221,
	146, 222, 0, 147, 148, 149, 223, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 0, 157, 158, 224,
	159, 0, 247, 160, 161, 49, 225, 162, 163, 0,
	164, 165, 0, 166, 226, 167, 0, 168, 169, 171,
	227, 170, 228, 0, 51, 172, 173, 0, 229, 230,
	231, 0, 0, 174, 232, 233, 0, 175, 176, 177,
	178, 0, 0, 179, 180, 181, 0, 0, 182, 183,
	184, 331, 235, 0, 185, 0, 0, 0, 47, 186,
	187, 188, 189, 86, 48, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 89, 90, 0, 91, 0,
	0, 0, 923, 190, 0, 0, 0, 0, 92, 93,
	191, 192, 193, 94, 194, 195, 0, 95, 196, 197,
	96, 0, 0, 198, 199, 200, 0, 201, 0, 0,
	0, 97, 98, 99, 0, 100, 0, 101, 0, 0,
	102, 103, 0, 0, 0, 0, 0, 0, 104, 105,
	106, 107, 202, 108, 203, 204, 0, 0, 109, 0,
	0, 0, 110, 111, 0, 112, 0, 0, 0, 205,
	113, 206, 0, 0, 0, 114, 115, 207, 0, 116,
	0, 117, 0, 0, 0, 0, 118, 208, 0, 209,
	0, 119, 120, 210, 211, 0, 0, 121, 0, 0,
	122, 212, 213, 214, 0, 215, 0, 0, 123, 0,
	124, 125, 0, 0, 216, 0, 126, 0, 0, 127,
	0, 0, 128, 0, 129, 130, 131, 132, 133, 0,
	134, 135, 138, 136, 0, 137, 0, 217, 139, 218,
	140, 141, 0, 0, 0, 0, 0, 142, 219, 0,
	143, 0, 220, 144, 145, 0, 221, 146, 222, 0,
	147, 148, 149, 223, 150, 151, 0, 153, 154, 152,
	155, 0, 156, 0, 157, 158, 224, 159, 0, 247,
	160, 161, 49, 225, 162, 163, 0, 164, 165, 0,
	166, 226, 167, 0, 168, 169, 171, 227, 170, 228,
	0, 51, 172, 173, 0, 229, 230, 231, 0, 0,
	174, 232, 233, 0, 175, 176, 177, 178, 0, 0,
	179, 180, 181, 0, 0, 182, 183, 184, 331, 235,
	0, 185, 0, 0, 0, 47, 186, 187, 188, 189,
	86, 48, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 89, 90, 0, 91, 0, 0, 0, 46,
	190, 0, 1173, 0, 0, 92, 93, 191, 192, 193,
	94, 194, 195, 0, 95, 196, 197, 96, 0, 0,
	198, 199, 200, 0, 201, 0, 0, 0, 97, 98,
	99, 0, 100, 0, 101, 0, 0, 102, 103, 0,
	0, 0, 0, 0, 0, 104, 105, 106, 107, 202,
	108, 203, 204, 0, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 205, 113, 206, 0,
	0, 0, 114, 115, 207, 0, 116, 0, 117, 0,
	0, 0, 0, 118, 208, 0, 209, 0, 119, 120,
	210, 211, 0, 0, 121, 0, 0, 122, 212, 213,
	214, 0, 215, 0, 0, 123, 0, 124, 125, 0,
	0, 216, 0, 126, 0, 0, 127, 0, 0, 128,
	0, 129, 130, 131, 132, 133, 0, 134, 135, 138,
	136, 0, 137, 0, 217, 139, 218, 140, 141, 0,
	0, 0, 0, 0, 142, 219, 0, 143, 0, 220,
	144, 145, 0, 221, 146, 222, 0, 147, 148, 149,
	223, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	0, 157, 158, 224, 159, 0, 247, 160, 161, 0,
	225, 162, 163, 0, 164, 165, 0, 166, 226, 167,
	0, 168, 169, 171, 227, 170, 228, 0, 0, 172,
	173, 0, 229, 230, 231, 0, 0, 174, 232, 233,
	0, 175, 176, 177, 178, 0, 0, 179, 180, 181,
	0, 0, 182, 183, 184, 234, 235, 0, 185, 0,
	0, 0, 0, 186, 187, 188, 189, 0, 86, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	89, 90, 0, 91, 0, 0, 0, 405, 190, 0,
	0, 0, 0, 92, 93, 191, 192, 193, 94, 194,
	195, 0, 95, 196, 197, 96, 0, 0, 198, 199,
	200, 0, 201, 0, 0, 0, 97, 98, 99, 0,
	100, 0, 101, 0, 0, 102, 103, 0, 0, 0,
	0, 0, 0, 104, 105, 106, 107, 202, 108, 203,
	204, 0, 0, 109, 0, 0, 0, 110, 111, 0,
	112, 0, 0, 0, 205, 113, 206, 0, 0, 0,
	114, 115, 207, 0, 116, 0, 117, 0, 0, 0,
	0, 118, 208, 0, 209, 0, 119, 120, 210, 211,
	0, 0, 121, 0, 0, 122, 212, 213, 214, 0,
	215, 0, 0, 123, 0, 124, 125, 0, 0, 216,
	0, 126, 0, 0, 127, 0, 0, 128, 0, 129,
	130, 131, 132, 133, 0, 134, 135, 138, 136, 0,
	137, 0, 217, 139, 218, 140, 141, 0, 0, 300,
	0, 0, 142, 219, 0, 143, 0, 220, 144, 145,
	0, 221, 146, 222, 0, 147, 148, 149, 223, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 0, 157,
	158, 224, 159, 0, 247, 160, 161, 0, 225, 162,
	163, 0, 164, 165, 0, 166, 226, 167, 0, 168,
	169, 171, 227, 170, 228, 0, 0, 172, 173, 0,
	229, 230, 231, 0, 0, 174, 232, 233, 0, 175,
	176, 177, 178, 0, 0, 179, 180, 181, 0, 0,
	182, 183, 184, 234, 235, 0, 185, 0, 0, 0,
	86, 186, 187, 188, 189, 0, 0, 0, 0, 0,
	0, 0, 89, 90, 0, 91, 0, 0, 0, 0,
	190, 0, 0, 0, 923, 92, 93, 191, 192, 193,
	94, 194, 195, 0, 95, 196, 197, 96, 0, 0,
	198, 199, 200, 0, 201, 0, 0, 0, 97, 98,
	99, 0, 100, 0, 101, 0, 0, 102, 103, 0,
	0, 0, 0, 0, 0, 104, 105, 106, 107, 202,
	108, 203, 204, 0, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 205, 113, 206, 0,
	0, 0, 114, 115, 207, 0, 116, 0, 117, 0,
	0, 0, 0, 118, 208, 0, 209, 0, 119, 120,
	210, 211, 0, 0, 121, 0, 0, 122, 212, 213,
	214, 0, 215, 0, 0, 123, 0, 124, 125, 0,
	0, 216, 0, 126, 0, 0, 127, 0, 0, 128,
	0, 129, 130, 131, 132, 133, 0, 134, 135, 138,
	136, 0, 137, 0, 217, 139, 218, 140, 141, 0,
	0, 0, 0, 0, 142, 219, 0, 143, 0, 220,
	144, 145, 0, 221, 146, 222, 0, 147, 148, 149,
	223, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	0, 157, 158, 224, 159, 0, 247, 160, 161, 0,
	225, 162, 163, 0, 164, 165, 0, 166, 226, 167,
	0, 168, 169, 171, 227, 170, 228, 0, 0, 172,
	173, 0, 229, 230, 231, 0, 0, 174, 232, 233,
	0, 175, 176, 177, 178, 0, 0, 179, 180, 181,
	0, 0, 182, 183, 184, 234, 235, 0, 185, 0,
	0, 0, 86, 186, 187, 188, 189, 0, 0, 0,
	0, 0, 0, 0, 89, 90, 0, 91, 0, 0,
	0, 0, 190, 0, 0, 0, 856, 92, 93, 191,
	192, 193, 94, 194, 195, 0, 95, 196, 197, 96,
	0, 0, 198, 199, 200, 0, 201, 0, 0, 0,
	97, 98, 99, 0, 100, 0, 101, 0, 0, 102,
	103, 0, 0, 0, 0, 0, 0, 104, 105, 106,
	107, 202, 108, 203, 204, 0, 0, 109, 0, 0,
	0, 110, 111, 0, 112, 0, 0, 0, 205, 113,
	206, 0, 0, 0, 114, 115, 207, 0, 116, 0,
	117, 0, 0, 0, 0, 118, 208, 0, 209, 0,
	119, 120, 210, 211, 0, 0, 121, 0, 0, 122,
	212, 213, 214, 0, 215, 0, 0, 123, 0, 124,
	125, 0, 0, 216, 0, 126, 0, 0, 127, 0,
	0, 128, 0, 129, 130, 131, 132, 133, 0, 134,
	135, 138, 136, 0, 137, 0, 217, 139, 218, 140,
	141, 0, 0, 0, 0, 0, 142, 219, 0, 143,
	0, 220, 144, 145, 0, 221, 146, 222, 0, 147,
	148, 149, 223, 150, 151, 0, 153, 154, 152, 155,
	0, 156, 0, 157, 158, 224, 159, 0, 247, 160,
	161, 0, 225, 162, 163, 0, 164, 165, 0, 166,
	226, 167, 0, 168, 169, 171, 227, 170, 228, 0,
	0, 172, 173, 0, 229, 230, 231, 0, 0, 174,
	232, 233, 0, 175, 176, 177, 178, 0, 0, 179,
	180, 181, 0, 0, 182, 183, 184, 234, 235, 0,
	185, 0, 0, 0, 86, 186, 187, 188, 189, 0,
	0, 0, 0, 0, 0, 0, 89, 90, 0, 91,
	0, 0, 0, 0, 190, 0, 0, 0, 1393, 92,
	93, 191, 192, 193, 94, 194, 195, 0, 95, 196,
	197, 96, 0, 0, 198, 199, 200, 0, 201, 0,
	0, 0, 97, 98, 99, 0, 100, 0, 101, 0,
	0, 102, 103, 0, 0, 0, 0, 0, 0, 104,
	105, 106, 107, 202, 108, 203, 204, 0, 0, 109,
	0, 0, 0, 110, 111, 0, 112, 0, 0, 0,
	205, 113, 206, 0, 0, 0, 114, 115, 207, 0,
	116, 0, 117, 0, 0, 0, 0, 118, 208, 0,
	209, 0, 119, 120, 210, 211, 0, 0, 121, 0,
	0, 122, 212, 213, 214, 0, 215, 0, 0, 123,
	0, 124, 125, 0, 0, 216, 0, 126, 0, 0,
	127, 0, 0, 128, 0, 129, 130, 131, 132, 133,
	0, 134, 135, 138, 136, 0, 137, 0, 217, 139,
	218, 140, 141, 0, 0, 0, 0, 0, 142, 219,
	0, 143, 0, 220, 144, 145, 0, 221, 146, 222,
	0, 147, 148, 149, 223, 150, 151, 0, 153, 154,
	152, 155, 0, 156, 0, 157, 158, 224, 159, 0,
	247, 160, 161, 0, 225, 162, 163, 0, 164, 165,
	0, 166, 226, 167, 0, 168, 169, 171, 227, 170,
	228, 0, 0, 172, 173, 0, 229, 230, 231, 0,
	0, 174, 232, 233, 0, 175, 176, 177, 178, 0,
	0, 179, 180, 181, 0, 0, 182, 183, 184, 234,
	235, 0, 185, 0, 0, 0, 86, 186, 187, 188,
	189, 0, 0, 0, 0, 0, 0, 0, 89, 90,
	0, 91, 0, 0, 0, 0, 190, 0, 0, 0,
	507, 92, 93, 191, 192, 193, 94, 194, 195, 0,
	95, 196, 197, 96, 0, 0, 198, 199, 200, 0,
	201, 0, 0, 0, 97, 98, 99, 0, 100, 0,
	101, 0, 0, 102, 103, 0, 0, 0, 0, 0,
	0, 104, 105, 551, 107, 202, 108, 203, 204, 0,
	0, 109, 0, 0, 0, 110, 111, 0, 112, 0,
	0, 0, 205, 113, 206, 0, 0, 0, 114, 115,
	207, 0, 116, 0, 117, 0, 0, 0, 0, 118,
	208, 0, 209, 0, 119, 120, 210, 211, 0, 0,
	121, 0, 0, 122, 212, 213, 214, 0, 215, 0,
	0, 123, 0, 124, 125, 0, 0, 216, 0, 126,
	0, 0, 127, 0, 0, 128, 0, 129, 130, 131,
	132, 133, 0, 134, 135, 138, 136, 0, 137, 0,
	217, 139, 218, 140, 141, 0, 0, 0, 0, 0,
	142, 219, 0, 143, 0, 220, 144, 145, 0, 221,
	146, 222, 0, 147, 148, 149, 223, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 0, 157, 158, 224,
	159, 0, 247, 160, 161, 0, 225, 162, 163, 0,
	164, 165, 0, 166, 226, 167, 0, 168, 169, 171,
	227, 170, 228, 0, 550, 172, 173, 0, 229, 230,
	231, 0, 0, 174, 232, 233, 0, 175, 176, 177,
	178, 0, 0, 179, 180, 181, 0, 0, 182, 183,
	184, 234, 235, 86, 185, 0, 0, 0, 0, 186,
	187, 188, 189, 0, 0, 89, 90, 0, 91, 0,
	0, 0, 0, 190, 0, 554, 0, 0, 92, 93,
	191, 192, 193, 94, 194, 195, 0, 95, 196, 197,
	96, 0, 0, 198, 199, 200, 0, 201, 0, 0,
	0, 97, 98, 99, 0, 100, 0, 101, 0, 0,
	102, 103, 0, 0, 0, 0, 0, 0, 104, 105,
	106, 107, 202, 108, 203, 204, 0, 0, 109, 0,
	0, 0, 110, 111, 0, 112, 0, 0, 0, 205,
	113, 206, 0, 0, 0, 114, 115, 207, 0, 116,
	0, 117, 0, 0, 0, 0, 118, 208, 0, 209,
	0, 119, 120, 210, 211, 0, 0, 121, 0, 0,
	122, 212, 213, 214, 0, 215, 0, 0, 123, 0,
	124, 125, 0, 0, 216, 0, 126, 0, 0, 127,
	0, 0, 128, 0, 129, 130, 131, 132, 133, 0,
	134, 135, 138, 136, 0, 137, 0, 217, 139, 218,
	140, 141, 0, 0, 0, 0, 0, 142, 219, 0,
	143, 0, 220, 144, 145, 0, 221, 146, 222, 0,
	147, 148, 149, 223, 150, 151, 0, 153, 154, 152,
	155, 0, 156, 0, 157, 158, 224, 159, 0, 247,
	160, 161, 0, 225, 162, 163, 0, 164, 165, 0,
	166, 226, 167, 0, 168, 169, 171, 227, 170, 228,
	0, 0, 172, 173, 0, 229, 230, 231, 0, 0,
	174, 232, 233, 0, 175, 176, 177, 178, 0, 0,
	179, 180, 181, 0, 0, 182, 183, 184, 234, 235,
	327, 185, 0, 0, 0, 0, 186, 187, 188, 189,
	0, 0, 89, 90, 0, 91, 0, 0, 0, 0,
	190, 0, 554, 0, 0, 92, 93, 191, 192, 193,
	94, 194, 195, 0, 95, 196, 197, 96, 0, 0,
	198, 199, 200, 0, 201, 0, 332, 0, 97, 98,
	99, 0, 100, 0, 101, 0, 333, 102, 103, 0,
	0, 0, 0, 0, 0, 104, 105, 106, 107, 202,
	108, 203, 204, 0, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 205, 113, 206, 0,
	0, 0, 114, 115, 207, 0, 116, 0, 117, 0,
	0, 334, 0, 118, 208, 0, 209, 0, 119, 120,
	210, 211, 0, 0, 121, 0, 335, 122, 212, 213,
	214, 0, 215, 0, 336, 123, 337, 124, 125, 0,
	0, 216, 338, 126, 339, 0, 127, 0, 0, 128,
	0, 129, 130, 131, 132, 133, 340, 134, 135, 138,
	136, 0, 137, 0, 217, 139, 218, 140, 141, 0,
	0, 0, 0, 0, 142, 219, 341, 143, 342, 220,
	144, 145, 0, 221, 146, 222, 0, 147, 148, 149,
	223, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	343, 157, 158, 224, 159, 0, 247, 160, 161, 0,
	225, 162, 163, 0, 164, 165, 344, 166, 226, 167,
	0, 168, 169, 171, 227, 170, 228, 0, 0, 172,
	173, 0, 229, 230, 231, 0, 0, 174, 232, 233,
	0, 175, 176, 177, 178, 0, 0, 179, 180, 181,
	0, 0, 182, 183, 184, 234, 235, 86, 185, 0,
	0, 0, 0, 186, 187, 188, 189, 0, 0, 89,
	90, 0, 91, 0, 0, 0, 0, 190, 0, 0,
	0, 0, 92, 93, 191, 192, 193, 94, 194, 195,
	0, 95, 196, 197, 96, 0, 0, 198, 199, 200,
	829, 201, 0, 0, 0, 97, 98, 99, 0, 100,
	827, 101, 0, 0, 102, 103, 0, 0, 0, 0,
	0, 0, 104, 105, 106, 107, 202, 108, 203, 204,
	0, 0, 109, 0, 0, 0, 110, 111, 0, 112,
	0, 0, 0, 205, 113, 206, 0, 900, 0, 114,
	115, 207, 0, 116, 0, 117, 832, 0, 0, 0,
	118, 208, 0, 209, 0, 119, 120, 210, 211, 0,
	898, 121, 0, 0, 122, 212, 213, 214, 0, 215,
	0, 0, 123, 0, 124, 125, 0, 0, 216, 0,
	126, 0, 0, 127, 0, 0, 128, 0, 129, 130,
	131, 132, 133, 0, 134, 135, 138, 136, 0, 137,
	0, 217, 139, 218, 140, 141, 0, 0, 0, 0,
	0, 142, 219, 0, 143, 0, 220, 144, 145, 0,
	221, 146, 222, 831, 147, 148, 149, 223, 150, 151,
	0, 153, 154, 152, 155, 0, 156, 0, 157, 158,
	224, 159, 0, 247, 160, 161, 0, 225, 162, 163,
	0, 164, 165, 0, 166, 226, 167, 0, 168, 169,
	171, 227, 170, 228, 0, 0, 172, 173, 0, 229,
	230, 231, 0, 0, 174, 232, 233, 0, 175, 176,
	177, 178, 0, 899, 179, 180, 181, 0, 0, 182,
	183, 184, 234, 235, 86, 185, 0, 0, 0, 0,
	186, 187, 188, 189, 0, 0, 89, 90, 0, 91,
	0, 0, 0, 0, 190, 0, 0, 0, 0, 92,
	93, 191, 192, 193, 94, 194, 195, 0, 95, 196,
	197, 96, 0, 0, 198, 199, 200, 829, 201, 0,
	0, 824, 97, 98, 99, 0, 100, 827, 101, 0,
	0, 102, 103, 0, 0, 0, 0, 0, 0, 104,
	105, 106, 107, 202, 108, 203, 204, 0, 0, 109,
	0, 0, 0, 110, 111, 0, 112, 0, 0, 0,
	205, 113, 206, 0, 0, 0, 114, 115, 207, 0,
	116, 0, 117, 832, 0, 0, 0, 118, 208, 0,
	209, 0, 119, 120, 823, 211, 0, 0, 121, 0,
	0, 122, 212, 213, 214, 0, 215, 0, 0, 123,
	0, 124, 125, 0, 0, 216, 0, 126, 0, 0,
	127, 0, 0, 128, 0, 129, 130, 131, 132, 133,
	0, 134, 135, 138, 136, 0, 137, 0, 217, 139,
	218, 140, 141, 0, 0, 0, 0, 0, 142, 219,
	0, 143, 0, 220, 144, 145, 0, 221, 146, 222,
	831, 147, 148, 149, 223, 150, 151, 0, 153, 154,
	152, 155, 0, 156, 0, 157, 158, 224, 159, 0,
	247, 160, 161, 0, 225, 162, 163, 0, 164, 165,
	0, 166, 226, 167, 0, 168, 169, 171, 227, 170,
	228, 0, 0, 172, 173, 0, 229, 230, 231, 0,
	0, 174, 232, 233, 0, 175, 176, 177, 178, 0,
	830, 179, 180, 181, 0, 0, 182, 183, 184, 234,
	235, 86, 185, 0, 0, 0, 0, 186, 187, 188,
	189, 0, 0, 89, 90, 0, 91, 0, 0, 0,
	0, 190, 0, 1173, 0, 0, 92, 93, 191, 192,
	193, 94, 194, 195, 0, 95, 196, 197, 96, 0,
	0, 198, 199, 200, 0, 201, 0, 0, 0, 97,
	98, 99, 0, 100, 0, 101, 0, 0, 102, 103,
	0, 0, 0, 0, 0, 0, 104, 105, 106, 107,
	202, 108, 203, 204, 0, 0, 109, 0, 0, 0,
	110, 111, 0, 112, 0, 0, 0, 205, 113, 206,
	0, 0, 0, 114, 115, 207, 0, 116, 0, 117,
	0, 0, 0, 0, 118, 208, 0, 209, 0, 119,
	120, 210, 211, 0, 0, 121, 0, 0, 122, 212,
	213, 214, 0, 215, 0, 0, 123, 0, 124, 125,
	0, 0, 216, 0, 126, 0, 0, 127, 0, 0,
	128, 0, 129, 130, 131, 132, 133, 0, 134, 135,
	138, 136, 0, 137, 0, 217, 139, 218, 140, 141,
	0, 0, 0, 0, 0, 142, 219, 0, 143, 0,
	220, 144, 145, 0, 221, 146, 222, 0, 147, 148,
	149, 223, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 0, 157, 158, 224, 159, 0, 247, 160, 161,
	0, 225, 162, 163, 0, 164, 165, 0, 166, 226,
	167, 0, 168, 169, 171, 227, 170, 228, 0, 0,
	172, 173, 0, 229, 230, 231, 0, 0, 174, 232,
	233, 0, 175, 176, 177, 178, 0, 0, 179, 180,
	181, 0, 0, 182, 183, 184, 234, 235, 86, 185,
	0, 0, 0, 0, 186, 187, 188, 189, 0, 0,
	89, 90, 0, 91, 0, 0, 0, 0, 190, 0,
	0, 0, 0, 92, 93, 191, 192, 193, 94, 194,
	195, 0, 95, 196, 197, 96, 0, 0, 198, 199,
	200, 0, 201, 0, 0, 0, 97, 98, 99, 0,
	100, 0, 101, 0, 0, 102, 103, 0, 0, 0,
	0, 0, 0, 104, 105, 106, 107, 202, 108, 203,
	204, 0, 0, 109, 0, 0, 0, 110, 111, 0,
	112, 0, 0, 0, 205, 113, 206, 0, 0, 0,
	114, 115, 207, 0, 116, 0, 117, 0, 0, 0,
	0, 118, 208, 0, 209, 0, 119, 120, 210, 211,
	0, 0, 121, 0, 0, 122, 212, 213, 214, 0,
	215, 0, 0, 123, 0, 124, 125, 0, 0, 216,
	0, 126, 0, 0, 127, 0, 0, 128, 0, 129,
	130, 131, 132, 133, 0, 134, 135, 138, 136, 0,
	137, 0, 217, 139, 218, 140, 141, 0, 0, 300,
	0, 0, 142, 219, 0, 143, 0, 220, 144, 145,
	0, 221, 146, 222, 0, 147, 148, 149, 223, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 0, 157,
	158, 224, 159, 0, 247, 160, 161, 0, 225, 162,
	163, 0, 164, 165, 0, 166, 226, 167, 0, 168,
	169, 171, 227, 170, 228, 0, 0, 172, 173, 0,
	229, 230, 231, 0, 0, 174, 232, 233, 0, 175,
	176, 177, 178, 0, 0, 179, 180, 181, 0, 0,
	182, 183, 184, 234, 235, 86, 185, 0, 0, 0,
	0, 186, 187, 188, 189, 0, 0, 89, 90, 0,
	91, 0, 0, 0, 0, 190, 0, 0, 0, 0,
	92, 93, 191, 192, 193, 94, 194, 195, 0, 95,
	196, 197, 96, 0, 0, 198, 199, 200, 0, 201,
	0, 0, 0, 97, 98, 99, 0, 100, 0, 101,
	0, 0, 102, 103, 0, 0, 0, 0, 0, 0,
	104, 105, 106, 107, 202, 108, 203, 204, 0, 0,
	109, 0, 0, 0, 110, 111, 0, 112, 0, 0,
	0, 205, 113, 206, 0, 0, 0, 114, 115, 207,
	0, 116, 0, 117, 0, 0, 0, 0, 118, 208,
	0, 209, 0, 119, 120, 306, 211, 0, 0, 121,
	0, 0, 122, 212, 213, 214, 0, 215, 0, 0,
	123, 0, 124, 125, 0, 0, 216, 0, 126, 0,
	0, 127, 0, 0, 128, 0, 129, 130, 131, 132,
	133, 0, 134, 135, 138, 136, 0, 137, 0, 217,
	139, 218, 140, 141, 0, 0, 300, 0, 0, 142,
	219, 0, 143, 0, 220, 144, 145, 0, 221, 146,
	222, 0, 147, 148, 149, 223, 150, 151, 0, 153,
	154, 152, 155, 0, 156, 0, 157, 158, 224, 159,
	0, 247, 160, 161, 0, 225, 162, 163, 0, 164,
	165, 0, 166, 226, 167, 0, 168, 169, 171, 227,
	170, 228, 0, 0, 172, 173, 0, 229, 230, 231,
	0, 0, 174, 232, 233, 0, 175, 176, 177, 178,
	0, 0, 179, 180, 181, 0, 0, 182, 183, 184,
	234, 235, 86, 185, 0, 0, 0, 0, 186, 187,
	188, 189, 0, 0, 89, 90, 0, 91, 0, 0,
	0, 0, 190, 0, 0, 0, 0, 92, 93, 191,
	192, 193, 94, 194, 195, 0, 95, 196, 197, 96,
	0, 0, 198, 199, 200, 0, 201, 0, 0, 0,
	97, 98, 99, 0, 100, 0, 101, 0, 0, 102,
	103, 0, 0, 0, 0, 0, 0, 104, 105, 106,
	107, 202, 108, 203, 204, 0, 0, 109, 0, 0,
	0, 110, 111, 0, 112, 0, 0, 0, 205, 113,
	206, 0, 0, 0, 114, 115, 207, 0, 116, 0,
	117, 0, 0, 0, 0, 118, 208, 0, 209, 0,
	119, 120, 210, 211, 0, 0, 121, 0, 0, 122,
	212, 213, 214, 0, 215, 0, 0, 123, 0, 124,
	125, 0, 0, 216, 0, 126, 0, 0, 127, 0,
	0, 128, 0, 129, 130, 131, 132, 133, 0, 134,
	135, 138, 136, 0, 137, 0, 217, 139, 218, 140,
	141, 0, 0, 0, 0, 0, 142, 219, 0, 143,
	0, 220, 144, 145, 0, 221, 146, 222, 0, 147,
	148, 149, 223, 150, 151, 0, 153, 154, 152, 155,
	0, 156, 0, 157, 158, 224, 159, 0, 247, 160,
	161, 0, 225, 162, 163, 0, 164, 165, 0, 166,
	226, 167, 0, 168, 169, 171, 227, 170, 228, 0,
	0, 172, 173, 0, 229, 230, 231, 0, 0, 174,
	232, 233, 0, 175, 176, 177, 178, 0, 0, 179,
	180, 181, 0, 0, 182, 183, 184, 234, 235, 86,
	185, 0, 0, 0, 0, 186, 187, 188, 189, 0,
	0, 89, 90, 0, 91, 0, 0, 0, 0, 190,
	0, 0, 0, 0, 92, 93, 191, 192, 193, 94,
	194, 195, 0, 95, 196, 197, 96, 0, 0, 198,
	199, 200, 0, 201, 0, 0, 0, 97, 98, 99,
	0, 100, 0, 101, 0, 0, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 106, 107, 202, 108,
	203, 204, 0, 0, 109, 0, 0, 0, 110, 111,
	0, 112, 0, 0, 0, 205, 113, 206, 0, 0,
	0, 114, 115, 207, 0, 116, 0, 117, 0, 0,
	0, 0, 118, 208, 0, 209, 0, 119, 120, 1106,
	211, 0, 0, 121, 0, 0, 122, 212, 213, 214,
	0, 215, 0, 0, 123, 0, 124, 125, 0, 0,
	216, 0, 126, 0, 0, 127, 0, 0, 128, 0,
	129, 130, 131, 132, 133, 0, 134, 135, 138, 136,
	0, 137, 0, 217, 139, 218, 140, 141, 0, 0,
	0, 0, 0, 142, 219, 0, 143, 0, 220, 144,
	145, 0, 221, 146, 222, 0, 147, 148, 149, 223,
	150, 151, 0, 153, 154, 152, 155, 0, 156, 0,
	157, 158, 224, 159, 0, 247, 160, 161, 0, 225,
	162, 163, 0, 164, 165, 0, 166, 226, 167, 0,
	168, 169, 171, 227, 170, 228, 0, 0, 172, 173,
	0, 229, 230, 231, 0, 0, 174, 232, 233, 0,
	175, 176, 177, 178, 0, 0, 179, 180, 181, 0,
	0, 182, 183, 184, 234, 235, 86, 185, 0, 0,
	0, 0, 186, 187, 188, 189, 0, 0, 89, 90,
	0, 91, 0, 0, 0, 0, 190, 0, 0, 0,
	0, 92, 93, 191, 192, 193, 94, 194, 195, 0,
	95, 196, 197, 96, 0, 0, 198, 199, 200, 0,
	201, 0, 0, 0, 97, 98, 99, 0, 100, 0,
	101, 0, 0, 102, 103, 0, 0, 0, 0, 0,
	0, 104, 105, 106, 107, 202, 108, 203, 204, 0,
	0, 109, 0, 0, 0, 110, 111, 0, 112, 0,
	0, 0, 205, 113, 206, 0, 0, 0, 114, 115,
	207, 0, 116, 0, 117, 0, 0, 0, 0, 118,
	208, 0, 209, 0, 119, 120, 1104, 211, 0, 0,
	121, 0, 0, 122, 212, 213, 214, 0, 215, 0,
	0, 123, 0, 124, 125, 0, 0, 216, 0, 126,
	0, 0, 127, 0, 0, 128, 0, 129, 130, 131,
	132, 133, 0, 134, 135, 138, 136, 0, 137, 0,
	217, 139, 218, 140, 141, 0, 0, 0, 0, 0,
	142, 219, 0, 143, 0, 220, 144, 145, 0, 221,
	146, 222, 0, 147, 148, 149, 223, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 0, 157, 158, 224,
	159, 0, 247, 160, 161, 0, 225, 162, 163, 0,
	164, 165, 0, 166, 226, 167, 0, 168, 169, 171,
	227, 170, 228, 0, 0, 172, 173, 0, 229, 230,
	231, 0, 0, 174, 232, 233, 0, 175, 176, 177,
	178, 0, 0, 179, 180, 181, 0, 0, 182, 183,
	184, 234, 235, 86, 185, 0, 0, 0, 0, 186,
	187, 188, 189, 0, 0, 89, 90, 0, 91, 0,
	0, 0, 0, 190, 0, 0, 0, 0, 92, 93,
	191, 192, 193, 94, 194, 195, 0, 95, 196, 197,
	96, 0, 0, 198, 199, 200, 0, 201, 0, 0,
	0, 97, 98, 99, 0, 100, 0, 101, 0, 0,
	102, 103, 0, 0, 0, 0, 0, 0, 104, 105,
	106, 107, 202, 108, 203, 204, 0, 0, 109, 0,
	0, 0, 110, 111, 0, 112, 0, 0, 0, 205,
	113, 206, 0, 0, 0, 114, 115, 207, 0, 116,
	0, 117, 0, 0, 0, 0, 118, 208, 0, 209,
	0, 119, 120, 1095, 211, 0, 0, 121, 0, 0,
	122, 212, 213, 214, 0, 215, 0, 0, 123, 0,
	124, 125, 0, 0, 216, 0, 126, 0, 0, 127,
	0, 0, 128, 0, 129, 130, 131, 132, 133, 0,
	134, 135, 138, 136, 0, 137, 0, 217, 139, 218,
	140, 141, 0, 0, 0, 0, 0, 142, 219, 0,
	143, 0, 220, 144, 145, 0, 221, 146, 222, 0,
	147, 148, 149, 223, 150, 151, 0, 153, 154, 152,
	155, 0, 156, 0, 157, 158, 224, 159, 0, 247,
	160, 161, 0, 225, 162, 163, 0, 164, 165, 0,
	166, 226, 167, 0, 168, 169, 171, 227, 170, 228,
	0, 0, 172, 173, 0, 229, 230, 231, 0, 0,
	174, 232, 233, 0, 175, 176, 177, 178, 0, 0,
	179, 180, 181, 0, 0, 182, 183, 184, 234, 235,
	86, 185, 0, 0, 0, 0, 186, 187, 188, 189,
	0, 0, 89, 90, 0, 91, 0, 0, 0, 0,
	190, 0, 0, 0, 0, 92, 93, 191, 192, 193,
	94, 194, 195, 0, 95, 196, 197, 96, 0, 0,
	198, 199, 200, 0, 201, 0, 0, 0, 97, 98,
	99, 0, 100, 0, 101, 0, 0, 102, 103, 0,
	0, 0, 0, 0, 0, 104, 105, 106, 107, 202,
	108, 203, 204, 0, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 205, 113, 206, 0,
	0, 0, 114, 115, 207, 0, 116, 0, 117, 0,
	0, 0, 0, 118, 208, 0, 209, 0, 119, 120,
	697, 211, 0, 0, 121, 0, 0, 122, 212, 213,
	214, 0, 215, 0, 0, 123, 0, 124, 125, 0,
	0, 216, 0, 126, 0, 0, 127, 0, 0, 128,
	0, 129, 130, 131, 132, 133, 0, 134, 135, 138,
	136, 0, 137, 0, 217, 139, 218, 140, 141, 0,
	0, 0, 0, 0, 142, 219, 0, 143, 0, 220,
	144, 145, 0, 221, 146, 222, 0, 147, 148, 149,
	223, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	0, 157, 158, 224, 159, 0, 247, 160, 161, 0,
	225, 162, 163, 0, 164, 165, 0, 166, 226, 167,
	0, 168, 169, 171, 227, 170, 228, 0, 0, 172,
	173, 0, 229, 230, 231, 0, 0, 174, 232, 233,
	0, 175, 176, 177, 178, 0, 0, 179, 180, 181,
	0, 0, 182, 183, 184, 234, 235, 86, 185, 0,
	0, 0, 0, 186, 187, 188, 189, 0, 0, 89,
	90, 0, 91, 0, 0, 0, 0, 190, 0, 0,
	0, 0, 92, 93, 191, 192, 193, 94, 194, 195,
	0, 95, 196, 197, 96, 0, 0, 198, 199, 200,
	0, 201, 0, 0, 0, 97, 98, 99, 0, 100,
	0, 101, 0, 0, 102, 103, 0, 0, 0, 0,
	0, 0, 104, 105, 106, 107, 202, 108, 203, 204,
	0, 0, 109, 0, 0, 0, 110, 111, 0, 112,
	0, 0, 0, 205, 113, 206, 0, 0, 0, 114,
	115, 207, 0, 116, 0, 117, 0, 0, 0, 0,
	118, 208, 0, 209, 0, 119, 120, 210, 211, 0,
	0, 121, 0, 0, 122, 212, 213, 214, 0, 215,
	0, 0, 123, 0, 124, 125, 0, 0, 216, 0,
	126, 0, 0, 127, 0, 0, 128, 0, 129, 130,
	131, 132, 133, 0, 134, 135, 138, 136, 0, 137,
	0, 217, 139, 218, 140, 141, 0, 0, 0, 0,
	0, 142, 219, 0, 143, 0, 220, 144, 145, 0,
	221, 146, 222, 0, 147, 148, 149, 223, 150, 151,
	0, 153, 154, 152, 155, 0, 156, 0, 157, 158,
	224, 159, 0, 84, 160, 161, 0, 225, 162, 163,
	0, 164, 165, 0, 166, 226, 167, 0, 168, 169,
	171, 227, 170, 228, 0, 0, 172, 173, 0, 229,
	230, 231, 0, 0, 174, 232, 233, 0, 175, 176,
	177, 178, 0, 0, 179, 180, 181, 0, 0, 182,
	183, 184, 234, 235, 86, 185, 0, 0, 0, 0,
	186, 187, 188, 189, 0, 0, 89, 90, 0, 91,
	0, 0, 0, 0, 190, 0, 536, 0, 0, 92,
	93, 191, 192, 193, 94, 194, 195, 0, 95, 196,
	197, 96, 0, 0, 198, 199, 200, 0, 201, 0,
	0, 0, 97, 98, 99, 0, 100, 0, 101, 0,
	0, 102, 103, 0, 0, 0, 0, 0, 0, 104,
	105, 106, 107, 202, 108, 203, 204, 0, 0, 109,
	0, 0, 0, 110, 111, 0, 112, 0, 0, 0,
	205, 113, 206, 0, 0, 0, 114, 115, 207, 0,
	116, 0, 117, 0, 0, 0, 0, 118, 208, 0,
	209, 0, 119, 120, 210, 211, 0, 0, 121, 0,
	0, 122, 212, 213, 214, 0, 215, 0, 0, 123,
	0, 124, 125, 0, 0, 216, 0, 126, 0, 0,
	127, 0, 0, 128, 0, 129, 130, 131, 132, 133,
	0, 134, 135, 138, 136, 0, 137, 0, 217, 139,
	218, 140, 141, 0, 0, 0, 0, 0, 142, 219,
	0, 143, 0, 220, 144, 145, 0, 221, 146, 222,
	0, 147, 148, 149, 223, 150, 151, 0, 153, 154,
	152, 155, 0, 156, 0, 157, 158, 224, 159, 0,
	247, 160, 161, 0, 225, 162, 163, 0, 0, 165,
	0, 166, 226, 167, 0, 168, 169, 171, 227, 170,
	228, 0, 0, 172, 173, 0, 229, 230, 231, 0,
	0, 174, 232, 233, 0, 175, 176, 177, 178, 0,
	0, 179, 180, 181, 0, 0, 182, 183, 184, 234,
	235, 86, 185, 0, 0, 0, 0, 186, 187, 188,
	189, 0, 0, 89, 90, 0, 91, 0, 0, 0,
	0, 190, 0, 0, 0, 0, 92, 93, 191, 192,
	193, 94, 194, 195, 0, 95, 196, 197, 96, 0,
	0, 198, 199, 200, 0, 201, 0, 0, 0, 97,
	98, 99, 0, 100, 0, 101, 0, 0, 102, 103,
	0, 0, 0, 0, 0, 0, 104, 105, 106, 107,
	202, 108, 203, 204, 0, 0, 109, 0, 0, 0,
	110, 111, 0, 112, 0, 0, 0, 205, 113, 206,
	0, 0, 0, 114, 115, 207, 0, 116, 0, 117,
	0, 0, 0, 0, 118, 208, 0, 209, 0, 119,
	120, 390, 211, 0, 0, 121, 0, 0, 122, 212,
	213, 214, 0, 215, 0, 0, 123, 0, 124, 125,
	0, 0, 216, 0, 126, 0, 0, 127, 0, 0,
	128, 0, 129, 130, 131, 132, 133, 0, 134, 135,
	138, 136, 0, 137, 0, 217, 139, 218, 140, 141,
	0, 0, 0, 0, 0, 142, 219, 0, 143, 0,
	220, 144, 145, 0, 221, 146, 222, 0, 147, 148,
	149, 223, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 0, 157, 158, 224, 159, 0, 247, 160, 161,
	0, 225, 162, 163, 0, 164, 165, 0, 166, 226,
	167, 0, 168, 169, 171, 227, 170, 228, 0, 0,
	172, 173, 0, 229, 230, 231, 0, 0, 174, 232,
	233, 0, 175, 176, 177, 178, 0, 0, 179, 180,
	181, 0, 0, 182, 183, 184, 234, 235, 86, 185,
	0, 0, 0, 0, 186, 187, 188, 189, 0, 0,
	89, 90, 0, 91, 0, 0, 0, 0, 190, 0,
	0, 0, 0, 92, 93, 191, 192, 193, 94, 194,
	195, 0, 95, 196, 197, 96, 0, 0, 198, 199,
	200, 0, 201, 0, 0, 0, 97, 98, 99, 0,
	100, 0, 101, 0, 0, 102, 103, 0, 0, 0,
	0, 0, 0, 104, 105, 106, 107, 202, 108, 203,
	204, 0, 0, 109, 0, 0, 0, 110, 111, 0,
	112, 0, 0, 0, 205, 113, 206, 0, 0, 0,
	114, 115, 207, 0, 116, 0, 117, 0, 0, 0,
	0, 118, 208, 0, 209, 0, 119, 120, 387, 211,
	0, 0, 121, 0, 0, 122, 212, 213, 214, 0,
	215, 0, 0, 123, 0, 124, 125, 0, 0, 216,
	0, 126, 0, 0, 127, 0, 0, 128, 0, 129,
	130, 131, 132, 133, 0, 134, 135, 138, 136, 0,
	137, 0, 217, 139, 218, 140, 141, 0, 0, 0,
	0, 0, 142, 219, 0, 143, 0, 220, 144, 145,
	0, 221, 146, 222, 0, 147, 148, 149, 223, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 0, 157,
	158, 224, 159, 0, 247, 160, 161, 0, 225, 162,
	163, 0, 164, 165, 0, 166, 226, 167, 0, 168,
	169, 171, 227, 170, 228, 0, 0, 172, 173, 0,
	229, 230, 231, 0, 0, 174, 232, 233, 0, 175,
	176, 177, 178, 0, 0, 179, 180, 181, 0, 0,
	182, 183, 184, 234, 235, 86, 185, 0, 0, 0,
	0, 186, 187, 188, 189, 0, 0, 89, 90, 0,
	91, 0, 0, 0, 0, 190, 0, 0, 0, 0,
	92, 93, 191, 192, 193, 94, 194, 195, 0, 95,
	196, 197, 96, 0, 0, 198, 199, 350, 0, 201,
	0, 0, 0, 97, 98, 99, 0, 100, 0, 101,
	0, 0, 102, 103, 0, 0, 0, 0, 0, 0,
	104, 105, 106, 107, 202, 108, 203, 204, 0, 0,
	109, 0, 0, 0, 110, 111, 0, 112, 0, 0,
	0, 205, 113, 206, 0, 0, 0, 114, 115, 207,
	0, 116, 0, 117, 0, 0, 0, 0, 118, 208,
	0, 209, 0, 119, 120, 210, 211, 0, 0, 121,
	0, 0, 122, 212, 213, 214, 0, 215, 0, 0,
	123, 0, 124, 125, 0, 0, 216, 0, 126, 0,
	0, 127, 0, 0, 128, 0, 129, 130, 131, 132,
	244, 0, 134, 135, 138, 136, 0, 137, 0, 217,
	139, 218, 140, 141, 0, 0, 0, 0, 0, 142,
	219, 0, 143, 0, 220, 144, 145, 0, 221, 146,
	222, 0, 147, 148, 149, 223, 150, 151, 0, 153,
	154, 152, 155, 0, 156, 0, 157, 158, 224, 159,
	0, 247, 160, 161, 0, 225, 162, 163, 0, 164,
	165, 0, 166, 226, 167, 0, 168, 169, 171, 227,
	170, 228, 0, 0, 172, 173, 0, 243, 230, 231,
	0, 0, 239, 232, 233, 0, 175, 176, 177, 178,
	0, 0, 179, 180, 181, 0, 0, 182, 183, 184,
	234, 235, 86, 185, 0, 0, 0, 0, 186, 187,
	188, 189, 0, 0, 89, 90, 0, 91, 0, 0,
	0, 0, 190, 0, 0, 0, 0, 92, 93, 191,
	192, 193, 94, 194, 195, 0, 95, 196, 197, 96,
	0, 0, 198, 199, 200, 0, 201, 0, 0, 0,
	97, 98, 99, 0, 100, 0, 101, 0, 0, 102,
	103, 0, 0, 0, 0, 0, 0, 104, 105, 106,
	107, 202, 108, 203, 204, 0, 0, 109, 0, 0,
	0, 110, 111, 0, 112, 0, 0, 0, 205, 113,
	206, 0, 0, 0, 114, 115, 207, 0, 116, 0,
	117, 0, 0, 0, 0, 118, 208, 0, 209, 0,
	119, 120, 210, 211, 0, 0, 121, 0, 0, 122,
	212, 213, 214, 0, 215, 0, 0, 123, 0, 124,
	125, 0, 0, 216, 0, 126, 0, 0, 127, 0,
	0, 128, 0, 129, 130, 131, 132, 244, 0, 134,
	135, 138, 136, 0, 137, 0, 217, 139, 218, 140,
	141, 0, 0, 0, 0, 0, 142, 219, 0, 143,
	0, 220, 144, 145, 0, 221, 146, 222, 0, 147,
	148, 149, 223, 150, 151, 0, 153, 154, 152, 155,
	0, 156, 0, 157, 158, 224, 159, 0, 247, 160,
	161, 0, 225, 162, 163, 0, 164, 165, 0, 166,
	226, 167, 0, 168, 169, 171, 227, 170, 228, 0,
	0, 172, 173, 0, 243, 230, 231, 0, 0, 239,
	232, 233, 0, 175, 176, 177, 178, 0, 0, 179,
	180, 181, 0, 0, 182, 183, 184, 234, 235, 86,
	185, 0, 0, 0, 0, 186, 187, 188, 189, 0,
	0, 89, 90, 0, 91, 0, 0, 0, 0, 190,
	0, 0, 0, 0, 92, 93, 191, 192, 193, 94,
	194, 195, 0, 95, 196, 197, 96, 0, 0, 198,
	199, 200, 0, 201, 0, 0, 0, 97, 98, 99,
	0, 100, 0, 101, 0, 0, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 106, 107, 202, 108,
	203, 204, 0, 0, 109, 0, 0, 0, 110, 111,
	0, 112, 0, 0, 0, 205, 113, 206, 0, 0,
	0, 114, 115, 207, 0, 116, 0, 117, 0, 0,
	0, 0, 118, 208, 0, 209, 0, 119, 120, 322,
	211, 0, 0, 121, 0, 0, 122, 212, 213, 214,
	0, 215, 0, 0, 123, 0, 124, 125, 0, 0,
	216, 0, 126, 0, 0, 127, 0, 0, 128, 0,
	129, 130, 131, 132, 133, 0, 134, 135, 138, 136,
	0, 137, 0, 217, 139, 218, 140, 141, 0, 0,
	0, 0, 0, 142, 219, 0, 143, 0, 220, 144,
	145, 0, 221, 146, 222, 0, 147, 148, 149, 223,
	150, 151, 0, 153, 154, 152, 155, 0, 156, 0,
	157, 158, 224, 159, 0, 247, 160, 161, 0, 225,
	162, 163, 0, 164, 165, 0, 166, 226, 167, 0,
	168, 169, 171, 227, 170, 228, 0, 0, 172, 173,
	0, 229, 230, 231, 0, 0, 174, 232, 233, 0,
	175, 176, 177, 178, 0, 0, 179, 180, 181, 0,
	0, 182, 183, 184, 234, 235, 86, 185, 0, 0,
	0, 0, 186, 187, 188, 189, 0, 0, 89, 90,
	0, 91, 0, 0, 0, 0, 190, 0, 0, 0,
	0, 92, 93, 191, 192, 193, 94, 194, 195, 0,
	95, 196, 197, 96, 0, 0, 198, 199, 200, 0,
	201, 0, 0, 0, 97, 98, 99, 0, 100, 0,
	101, 0, 0, 102, 103, 0, 0, 0, 0, 0,
	0, 104, 105, 106, 107, 202, 108, 203, 204, 0,
	0, 109, 0, 0, 0, 110, 111, 0, 112, 0,
	0, 0, 205, 113, 206, 0, 0, 0, 114, 115,
	207, 0, 116, 0, 117, 0, 0, 0, 0, 118,
	208, 0, 209, 0, 119, 120, 319, 211, 0, 0,
	121, 0, 0, 122, 212, 213, 214, 0, 215, 0,
	0, 123, 0, 124, 125, 0, 0, 216, 0, 126,
	0, 0, 127, 0, 0, 128, 0, 129, 130, 131,
	132, 133, 0, 134, 135, 138, 136, 0, 137, 0,
	217, 139, 218, 140, 141, 0, 0, 0, 0, 0,
	142, 219, 0, 143, 0, 220, 144, 145, 0, 221,
	146, 222, 0, 147, 148, 149, 223, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 0, 157, 158, 224,
	159, 0, 247, 160, 161, 0, 225, 162, 163, 0,
	164, 165, 0, 166, 226, 167, 0, 168, 169, 171,
	227, 170, 228, 0, 0, 172, 173, 0, 229, 230,
	231, 0, 0, 174, 232, 233, 0, 175, 176, 177,
	178, 0, 0, 179, 180, 181, 0, 0, 182, 183,
	184, 234, 235, 86, 185, 0, 0, 0, 0, 186,
	187, 188, 189, 0, 0, 89, 90, 0, 91, 0,
	0, 0, 0, 190, 0, 0, 0, 0, 92, 93,
	191, 192, 193, 94, 194, 195, 0, 95, 196, 197,
	96, 0, 0, 198, 199, 200, 0, 201, 0, 0,
	0, 97, 98, 99, 0, 100, 0, 101, 0, 0,
	102, 103, 0, 0, 0, 0, 0, 0, 104, 105,
	106, 107, 202, 108, 203, 204, 0, 0, 109, 0,
	0, 0, 110, 111, 0, 112, 0, 0, 0, 205,
	113, 206, 0, 0, 0, 114, 115, 207, 0, 116,
	0, 117, 0, 0, 0, 0, 118, 208, 0, 209,
	0, 119, 120, 317, 211, 0, 0, 121, 0, 0,
	122, 212, 213, 214, 0, 215, 0, 0, 123, 0,
	124, 125, 0, 0, 216, 0, 126, 0, 0, 127,
	0, 0, 128, 0, 129, 130, 131, 132, 133, 0,
	134, 135, 138, 136, 0, 137, 0, 217, 139, 218,
	140, 141, 0, 0, 0, 0, 0, 142, 219, 0,
	143, 0, 220, 144, 145, 0, 221, 146, 222, 0,
	147, 148, 149, 223, 150, 151, 0, 153, 154, 152,
	155, 0, 156, 0, 157, 158, 224, 159, 0, 247,
	160, 161, 0, 225, 162, 163, 0, 164, 165, 0,
	166, 226, 167, 0, 168, 169, 171, 227, 170, 228,
	0, 0, 172, 173, 0, 229, 230, 231, 0, 0,
	174, 232, 233, 0, 175, 176, 177, 178, 0, 0,
	179, 180, 181, 0, 0, 182, 183, 184, 234, 235,
	86, 185, 0, 0, 0, 0, 186, 187, 188, 189,
	0, 0, 89, 90, 0, 91, 0, 0, 0, 0,
	190, 0, 0, 0, 0, 92, 93, 191, 192, 193,
	94, 194, 195, 0, 95, 196, 197, 96, 0, 0,
	198, 199, 200, 0, 201, 0, 0, 0, 97, 98,
	99, 0, 100, 0, 101, 0, 0, 102, 103, 0,
	0, 0, 0, 0, 0, 104, 105, 106, 107, 202,
	108, 203, 204, 0, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 205, 113, 206, 0,
	0, 0, 114, 115, 207, 0, 116, 0, 117, 0,
	0, 0, 0, 118, 208, 0, 209, 0, 119, 120,
	309, 211, 0, 0, 121, 0, 0, 122, 212, 213,
	214, 0, 215, 0, 0, 123, 0, 124, 125, 0,
	0, 216, 0, 126, 0, 0, 127, 0, 0, 128,
	0, 129, 130, 131, 132, 133, 0, 134, 135, 138,
	136, 0, 137, 0, 217, 139, 218, 140, 141, 0,
	0, 0, 0, 0, 142, 219, 0, 143, 0, 220,
	144, 145, 0, 221, 146, 222, 0, 147, 148, 149,
	223, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	0, 157, 158, 224, 159, 0, 247, 160, 161, 0,
	225, 162, 163, 0, 164, 165, 0, 166, 226, 167,
	0, 168, 169, 171, 227, 170, 228, 0, 0, 172,
	173, 0, 229, 230, 231, 0, 0, 174, 232, 233,
	0, 175, 176, 177, 178, 0, 0, 179, 180, 181,
	0, 0, 182, 183, 184, 234, 235, 86, 185, 0,
	0, 0, 0, 186, 187, 188, 189, 0, 0, 89,
	90, 0, 91, 0, 0, 0, 0, 190, 0, 0,
	0, 0, 92, 93, 191, 192, 193, 94, 194, 195,
	0, 95, 196, 197, 96, 0, 0, 198, 199, 200,
	0, 201, 0, 0, 0, 97, 98, 99, 0, 100,
	0, 101, 0, 0, 102, 103, 0, 0, 0, 0,
	0, 0, 104, 105, 106, 107, 202, 108, 203, 204,
	0, 0, 109, 0, 0, 0, 110, 111, 0, 112,
	0, 0, 0, 205, 113, 206, 0, 0, 0, 114,
	115, 207, 0, 116, 0, 117, 0, 0, 0, 0,
	118, 208, 0, 209, 0, 119, 120, 210, 211, 0,
	0, 121, 0, 0, 122, 212, 213, 214, 0, 215,
	0, 0, 123, 0, 124, 125, 0, 0, 216, 0,
	126, 0, 0, 127, 0, 0, 128, 0, 129, 130,
	131, 132, 133, 0, 134, 135, 138, 136, 0, 137,
	0, 217, 139, 218, 140, 141, 0, 0, 0, 0,
	0, 142, 219, 0, 143, 0, 220, 144, 145, 0,
	221, 146, 222, 0, 147, 148, 149, 223, 289, 151,
	0, 153, 154, 152, 155, 0, 156, 0, 157, 158,
	224, 159, 0, 247, 160, 161, 0, 225, 162, 163,
	0, 164, 165, 0, 166, 226, 167, 0, 168, 169,
	171, 227, 170, 228, 0, 0, 172, 173, 0, 229,
	230, 231, 0, 0, 174, 232, 233, 0, 175, 176,
	177, 178, 0, 0, 179, 180, 181, 0, 0, 182,
	183, 184, 234, 235, 86, 185, 0, 0, 0, 0,
	186, 187, 188, 189, 0, 0, 89, 90, 0, 91,
	0, 0, 0, 0, 190, 0, 0, 0, 0, 92,
	93, 191, 192, 193, 94, 194, 195, 0, 95, 196,
	197, 96, 0, 0, 198, 199, 200, 0, 201, 0,
	0, 0, 97, 98, 99, 0, 100, 0, 101, 0,
	0, 102, 103, 0, 0, 0, 0, 0, 0, 104,
	105, 106, 107, 202, 108, 203, 204, 0, 0, 109,
	0, 0, 0, 110, 111, 0, 112, 0, 0, 0,
	205, 113, 206, 0, 0, 0, 114, 115, 207, 0,
	116, 0, 117, 0, 0, 0, 0, 118, 208, 0,
	209, 0, 119, 120, 210, 211, 0, 0, 121, 0,
	0, 122, 212, 213, 214, 0, 215, 0, 0, 123,
	0, 124, 125, 0, 0, 216, 0, 126, 0, 0,
	237, 0, 0, 128, 0, 129, 130, 131, 132, 244,
	0, 134, 135, 138, 136, 0, 137, 0, 217, 139,
	218, 140, 141, 0, 0, 0, 0, 0, 142, 219,
	0, 143, 0, 220, 144, 145, 0, 221, 146, 222,
	0, 147, 148, 149, 223, 150, 151, 0, 153, 154,
	152, 155, 0, 156, 0, 157, 158, 224, 159, 0,
	247, 160, 161, 0, 225, 162, 238, 0, 164, 165,
	0, 166, 226, 167, 0, 168, 169, 171, 227, 170,
	228, 0, 0, 172, 173, 0, 243, 230, 231, 0,
	0, 239, 232, 233, 0, 175, 176, 177, 178, 0,
	0, 179, 180, 181, 0, 0, 182, 183, 184, 234,
	235, 86, 185, 0, 0, 0, 0, 186, 187, 188,
	189, 0, 0, 89, 90, 0, 91, 0, 0, 0,
	0, 190, 0, 0, 0, 0, 92, 93, 191, 192,
	193, 94, 194, 195, 0, 95, 196, 197, 96, 0,
	0, 198, 199, 200, 0, 201, 0, 0, 0, 97,
	98, 99, 0, 100, 0, 101, 0, 0, 102, 103,
	0, 0, 0, 0, 0, 0, 104, 105, 106, 107,
	202, 108, 203, 204, 0, 0, 109, 0, 0, 0,
	110, 111, 0, 112, 0, 0, 0, 205, 113, 206,
	0, 0, 0, 114, 115, 207, 0, 116, 0, 117,
	0, 0, 0, 0, 118, 208, 0, 209, 0, 119,
	120, 210, 211, 0, 0, 121, 0, 0, 122, 212,
	213, 214, 0, 215, 0, 0, 123, 0, 124, 125,
	0, 0, 216, 0, 126, 0, 0, 127, 0, 0,
	128, 0, 129, 130, 131, 132, 133, 0, 134, 135,
	138, 136, 0, 137, 0, 217, 139, 218, 140, 141,
	0, 0, 0, 0, 0, 142, 219, 0, 143, 0,
	220, 144, 0, 0, 221, 146, 222, 0, 147, 0,
	149, 223, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 0, 157, 158, 224, 0, 0, 247, 160, 161,
	0, 225, 162, 163, 0, 164, 165, 0, 166, 226,
	167, 0, 168, 169, 171, 227, 170, 228, 0, 0,
	172, 173, 0, 229, 230, 231, 0, 0, 174, 232,
	233, 0, 175, 176, 177, 178, 0, 0, 179, 180,
	181, 0, 0, 182, 183, 184, 234, 235, 723, 185,
	742, 743, 744, 0, 186, 187, 188, 189, 0, 0,
	745, 0, 0, 0, 0, 0, 0, 725, 0, 751,
	0, 0, 0, 723, 0, 742, 743, 744, 0, 0,
	0, 0, 0, 0, 0, 745, 0, 724, 0, 0,
	0, 0, 725, 739, 751, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 723, 0, 742, 743, 744, 0,
	0, 0, 724, 0, 0, 0, 745, 0, 739, 0,
	0, 0, 0, 725, 0, 751, 0, 0, 0, 723,
	0, 742, 743, 744, 0, 0, 0, 730, 0, 0,
	0, 745, 0, 724, 0, 0, 0, 0, 725, 739,
	751, 0, 0, 0, 752, 0, 0, 0, 0, 0,
	0, 0, 730, 0, 0, 0, 750, 0, 724, 0,
	0, 0, 0, 0, 739, 0, 747, 0, 0, 752,
	0, 0, 740, 0, 0, 0, 0, 0, 0, 0,
	0, 750, 0, 730, 0, 0, 0, 0, 0, 0,
	0, 747, 0, 0, 746, 0, 0, 740, 0, 0,
	752, 0, 0, 0, 0, 0, 0, 0, 730, 0,
	0, 0, 750, 0, 0, 0, 0, 0, 0, 746,
	0, 0, 747, 0, 0, 752, 0, 741, 740, 0,
	0, 0, 0, 0, 0, 0, 0, 750, 749, 0,
	0, 0, 0, 0, 0, 0, 0, 747, 0, 0,
	746, 0, 741, 740, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 749, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 746, 0, 0, 0, 0,
	0, 0, 0, 741, 0, 0, 0, 0, 0, 748,
	0, 736, 737, 738, 749, 735, 732, 733, 734, 726,
	727, 728, 729, 731, 0, 0, 0, 0, 741, 0,
	0, 0, 1278, 0, 748, 0, 736, 737, 738, 749,
	735, 732, 733, 734, 726, 727, 728, 729, 731, 0,
	0, 0, 0, 0, 0, 0, 0, 1277, 0, 0,
	0, 0, 0, 0, 0, 748, 0, 736, 737, 738,
	0, 735, 732, 733, 734, 726, 727, 728, 729, 731,
	0, 0, 0, 0, 0, 0, 0, 0, 1231, 0,
	748, 0, 736, 737, 738, 0, 735, 732, 733, 734,
	726, 727, 728, 729, 731, 723, 0, 742, 743, 744,
	1666, 0, 0, 0, 0, 0, 0, 745, 0, 0,
	0, 0, 0, 0, 725, 0, 751, 0, 723, 0,
	742, 743, 744, 0, 0, 0, 0, 0, 0, 0,
	745, 0, 0, 0, 724, 0, 0, 725, 0, 751,
	739, 723, 0, 742, 743, 744, 0, 0, 0, 0,
	0, 0, 0, 745, 0, 0, 0, 724, 0, 0,
	725, 0, 751, 739, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	724, 0, 0, 0, 730, 0, 739, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 752, 0, 0, 0, 0, 0, 730, 0, 0,
	0, 0, 0, 750, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 747, 752, 0, 0, 0, 0, 740,
	730, 0, 0, 0, 0, 0, 750, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 747, 752, 0, 0,
	0, 746, 740, 0, 0, 0, 0, 0, 0, 750,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 747,
	0, 0, 0, 0, 746, 740, 0, 0, 0, 0,
	0, 0, 0, 0, 741, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 749, 0, 746, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 741, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 749, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	741, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 749, 0, 0, 0, 0, 748, 0, 736, 737,
	738, 0, 735, 732, 733, 734, 726, 727, 728, 729,
	731, 0, 0, 0, 0, 0, 1665, 0, 0, 748,
	0, 736, 737, 738, 0, 735, 732, 733, 734, 726,
	727, 728, 729, 731, 0, 0, 0, 0, 0, 1647,
	0, 0, 748, 0, 736, 737, 738, 0, 735, 732,
	733, 734, 726, 727, 728, 729, 731, 723, 0, 742,
	743, 744, 1626, 0, 0, 0, 0, 0, 0, 745,
	0, 0, 0, 0, 0, 0, 725, 0, 751, 0,
	723, 0, 742, 743, 744, 0, 0, 0, 0, 0,
	0, 0, 745, 0, 0, 0, 724, 0, 0, 725,
	0, 751, 739, 723, 0, 742, 743, 744, 0, 0,
	0, 0, 0, 0, 0, 745, 0, 0, 0, 724,
	0, 0, 725, 0, 751, 739, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 724, 0, 0, 0, 730, 0, 739, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 752, 0, 0, 0, 0, 0, 730,
	0, 0, 0, 0, 0, 750, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 747, 752, 0, 0, 0,
	0, 740, 730, 0, 0, 0, 0, 0, 750, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 747, 752,
	0, 0, 0, 746, 740, 0, 0, 0, 0, 0,
	0, 750, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 747, 0, 0, 0, 0, 746, 740, 0, 0,
	0, 0, 0, 0, 0, 0, 741, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 749, 0, 746,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 741,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	749, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 741, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 749, 0, 0, 0, 0, 748, 0,
	736, 737, 738, 0, 735, 732, 733, 734, 726, 727,
	728, 729, 731, 0, 0, 0, 0, 0, 1621, 0,
	0, 748, 0, 736, 737, 738, 0, 735, 732, 733,
	734, 726, 727, 728, 729, 731, 0, 0, 0, 0,
	0, 1617, 0, 0, 748, 0, 736, 737, 738, 0,
	735, 732, 733, 734, 726, 727, 728, 729, 731, 723,
	0, 742, 743, 744, 1554, 0, 0, 0, 0, 0,
	0, 745, 0, 0, 0, 0, 0, 0, 725, 0,
	751, 0, 723, 0, 742, 743, 744, 0, 0, 0,
	0, 0, 0, 0, 745, 0, 0, 0, 724, 0,
	0, 725, 0, 751, 739, 723, 0, 742, 743, 744,
	0, 0, 0, 0, 0, 0, 0, 745, 0, 0,
	0, 724, 0, 0, 725, 0, 751, 739, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 724, 0, 0, 0, 730, 0,
	739, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 752, 0, 0, 0, 0,
	0, 730, 0, 0, 0, 0, 0, 750, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 747, 752, 0,
	0, 0, 0, 740, 730, 0, 0, 0, 0, 0,
	750, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	747, 752, 0, 0, 0, 746, 740, 0, 0, 0,
	0, 0, 0, 750, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 747, 0, 0, 0, 0, 746, 740,
	0, 0, 0, 0, 0, 0, 0, 0, 741, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 749,
	0, 746, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 741, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 749, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 741, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 749, 0, 0, 0, 0,
	748, 0, 736, 737, 738, 0, 735, 732, 733, 734,
	726, 727, 728, 729, 731, 0, 0, 0, 0, 0,
	1553, 0, 0, 748, 0, 736, 737, 738, 0, 735,
	732, 733, 734, 726, 727, 728, 729, 731, 0, 0,
	0, 0, 0, 1460, 0, 0, 748, 0, 736, 737,
	738, 0, 735, 732, 733, 734, 726, 727, 728, 729,
	731, 723, 0, 742, 743, 744, 1396, 0, 0, 0,
	0, 0, 0, 745, 0, 0, 0, 0, 0, 0,
	725, 0, 751, 0, 723, 0, 742, 743, 744, 0,
	0, 0, 0, 0, 0, 0, 745, 0, 0, 0,
	724, 0, 0, 725, 0, 751, 739, 723, 0, 742,
	743, 744, 0, 0, 0, 0, 0, 0, 0, 745,
	0, 0, 0, 724, 0, 0, 725, 0, 751, 739,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 724, 0, 0, 0,
	730, 0, 739, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 752, 0, 0,
	0, 0, 0, 730, 0, 0, 0, 0, 0, 750,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 747,
	752, 0, 0, 0, 0, 740, 730, 0, 0, 0,
	0, 0, 750, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 747, 752, 0, 0, 0, 746, 740, 0,
	0, 0, 0, 0, 0, 750, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 747, 0, 0, 0, 0,
	746, 740, 0, 0, 0, 0, 0, 0, 0, 0,
	741, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 749, 0, 746, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 741, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 749, 0, 0, 0, 0, 723,
	0, 742, 743, 744, 0, 0, 741, 0, 0, 0,
	0, 745, 0, 0, 0, 0, 0, 749, 725, 0,
	751, 0, 748, 0, 736, 737, 738, 0, 735, 732,
	733, 734, 726, 727, 728, 729, 731, 0, 724, 0,
	0, 0, 1371, 0, 739, 748, 0, 736, 737, 738,
	0, 735, 732, 733, 734, 726, 727, 728, 729, 731,
	0, 0, 0, 0, 0, 1007, 0, 0, 748, 0,
	736, 737, 738, 0, 735, 732, 733, 734, 726, 727,
	728, 729, 731, 0, 0, 0, 1444, 0, 730, 1728,
	723, 0, 742, 743, 744, 0, 0, 0, 0, 0,
	0, 0, 745, 0, 0, 752, 0, 0, 0, 725,
	0, 751, 0, 0, 0, 0, 0, 750, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 747, 0, 724,
	0, 0, 0, 740, 0, 739, 0, 723, 0, 742,
	743, 744, 0, 0, 0, 0, 0, 0, 0, 745,
	0, 0, 0, 0, 911, 746, 725, 0, 751, 0,
	0, 0, 0, 0, 0, 0, 0, 1727, 0, 0,
	0, 0, 0, 0, 0, 0, 724, 0, 0, 730,
	0, 1269, 739, 0, 1268, 0, 0, 0, 741, 0,
	0, 0, 0, 0, 0, 0, 752, 0, 0, 749,
	0, 0, 0, 0, 0, 0, 0, 912, 750, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 747, 0,
	0, 0, 754, 0, 740, 0, 730, 0, 723, 0,
	742, 743, 744, 0, 0, 0, 0, 0, 0, 0,
	745, 0, 0, 752, 753, 0, 746, 725, 0, 751,
	748, 0, 736, 737, 738, 750, 735, 732, 733, 734,
	726, 727, 728, 729, 731, 747, 0, 724, 0, 0,
	0, 740, 0, 739, 0, 0, 0, 0, 0, 741,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	749, 0, 0, 746, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 730, 0, 723,
	0, 742, 743, 744, 0, 0, 741, 0, 0, 0,
	0, 745, 0, 0, 752, 0, 0, 749, 725, 0,
	751, 748, 0, 736, 737, 738, 750, 735, 732, 733,
	734, 726, 727, 728, 729, 731, 747, 0, 724, 0,
	0, 0, 740, 0, 739, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 746, 0, 0, 0, 748, 0,
	736, 737, 738, 0, 735, 732, 733, 734, 726, 727,
	728, 729, 731, 0, 0, 0, 0, 0, 730, 0,
	723, 0, 742, 743, 744, 0, 0, 741, 0, 0,
	0, 0, 745, 0, 0, 752, 0, 0, 749, 725,
	0, 751, 0, 0, 0, 0, 0, 750, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 747, 0, 724,
	0, 0, 0, 740, 0, 739, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 746, 284, 0, 0, 748,
	0, 736, 737, 738, 0, 735, 732, 733, 734, 726,
	727, 728, 729, 731, 0, 0, 0, 0, 0, 730,
	0, 723, 0, 742, 743, 744, 0, 0, 741, 0,
	0, 0, 0, 745, 0, 0, 752, 0, 0, 749,
	725, 0, 751, 0, 0, 0, 0, 0, 750, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 747, 0,
	724, 0, 0, 0, 740, 0, 739, 0, 723, 0,
	742, 743, 744, 0, 0, 0, 0, 0, 0, 0,
	745, 0, 0, 0, 1270, 0, 746, 725, 0, 751,
	748, 0, 736, 737, 738, 0, 735, 732, 733, 734,
	726, 727, 728, 729, 731, 0, 0, 724, 0, 0,
	730, 0, 0, 739, 0, 1275, 0, 0, 0, 741,
	0, 0, 0, 0, 0, 0, 0, 752, 0, 0,
	749, 0, 0, 0, 0, 0, 0, 0, 0, 750,
	0, 0, 0, 0, 0, 1390, 0, 0, 0, 747,
	0, 0, 0, 0, 0, 740, 0, 730, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 752, 0, 0, 746, 0, 0,
	0, 748, 0, 736, 737, 738, 750, 735, 732, 733,
	734, 726, 727, 728, 729, 731, 747, 0, 0, 0,
	0, 0, 740, 0, 0, 0, 0, 0, 0, 0,
	741, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 749, 0, 0, 746, 0, 0, 0, 723, 0,
	742, 743, 744, 0, 0, 0, 0, 0, 0, 0,
	745, 0, 0, 0, 0, 0, 0, 725, 0, 751,
	0, 0, 0, 0, 0, 0, 0, 741, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 724, 749, 0,
	0, 0, 748, 739, 736, 737, 738, 0, 735, 732,
	733, 734, 726, 727, 728, 729, 731, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 730, 0, 748,
	0, 736, 737, 738, 0, 735, 732, 733, 734, 726,
	727, 728, 729, 731, 752, 0, 0, 0, 723, 0,
	742, 743, 744, 0, 0, 0, 750, 0, 0, 0,
	745, 0, 0, 0, 1230, 0, 747, 725, 0, 751,
	0, 0, 740, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 724, 0, 0,
	0, 0, 0, 739, 746, 0, 1238, 0, 1255, 1256,
	1257, 0, 0, 0, 1236, 0, 0, 0, 1521, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 741, 723, 0,
	742, 743, 744, 0, 0, 0, 0, 730, 749, 0,
	745, 1252, 0, 0, 0, 0, 0, 725, 0, 751,
	0, 0, 0, 0, 752, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 750, 724, 0, 0,
	0, 0, 0, 739, 0, 0, 747, 0, 0, 0,
	0, 0, 740, 0, 0, 1243, 0, 0, 0, 748,
	0, 736, 737, 738, 0, 735, 732, 733, 734, 726,
	727, 728, 729, 731, 746, 0, 0, 0, 723, 0,
	742, 743, 744, 0, 1258, 0, 0, 730, 0, 0,
	745, 0, 0, 0, 0, 0, 0, 725, 0, 751,
	1253, 0, 0, 0, 752, 0, 0, 741, 723, 0,
	742, 743, 744, 0, 0, 0, 750, 724, 749, 0,
	0, 0, 0, 739, 0, 0, 747, 725, 0, 751,
	0, 0, 740, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 724, 0, 0,
	0, 0, 0, 739, 746, 1254, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 730, 0, 748,
	0, 736, 737, 738, 0, 735, 732, 733, 734, 726,
	727, 728, 729, 731, 752, 0, 0, 741, 0, 0,
	0, 0, 0, 0, 0, 0, 750, 730, 749, 0,
	0, 0, 0, 0, 21, 0, 747, 0, 0, 0,
	0, 0, 740, 0, 752, 35, 0, 0, 0, 1249,
	1250, 1251, 0, 1248, 1245, 1246, 1247, 1239, 1240, 1241,
	1242, 1244, 0, 0, 0, 0, 747, 0, 37, 0,
	0, 0, 740, 0, 42, 0, 0, 0, 0, 748,
	0, 736, 737, 738, 0, 735, 732, 733, 734, 726,
	727, 728, 729, 731, 0, 0, 0, 741, 0, 26,
	0, 1238, 38, 1255, 1256, 1257, 27, 0, 749, 0,
	0, 0, 0, 1366, 0, 0, 0, 0, 0, 0,
	0, 28, 0, 0, 0, 0, 0, 741, 0, 0,
	0, 1238, 0, 1255, 1256, 1257, 0, 0, 749, 0,
	0, 0, 0, 1365, 0, 0, 1252, 0, 0, 1238,
	0, 1255, 1256, 1257, 0, 0, 0, 0, 0, 748,
	0, 736, 737, 738, 0, 735, 732, 733, 734, 726,
	727, 728, 729, 731, 0, 0, 1252, 0, 0, 0,
	1238, 0, 1255, 1256, 1257, 0, 0, 0, 0, 748,
	1243, 736, 737, 738, 1252, 735, 732, 733, 734, 726,
	727, 728, 729, 731, 0, 40, 0, 0, 29, 0,
	39, 0, 0, 0, 0, 30, 0, 0, 49, 1258,
	1243, 0, 0, 33, 34, 1252, 0, 0, 0, 0,
	0, 36, 0, 0, 0, 1253, 0, 51, 1243, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1258,
	41, 0, 0, 0, 0, 1259, 0, 0, 0, 0,
	0, 0, 0, 0, 52, 1253, 0, 1258, 0, 1243,
	0, 47, 0, 0, 0, 0, 0, 48, 0, 0,
	0, 0, 0, 1253, 0, 0, 0, 0, 0, 0,
	1254, 0, 0, 0, 0, 46, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1253, 0, 0, 0, 0, 0,
	1254, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 940, 956, 931, 948, 947, 0, 1254, 933,
	932, 0, 0, 0, 958, 957, 0, 0, 0, 0,
	0, 0, 0, 0, 1249, 1250, 1251, 0, 1248, 1245,
	1246, 1247, 1239, 1240, 1241, 1242, 1244, 0, 0, 1254,
	0, 0, 0, 953, 0, 945, 944, 0, 0, 0,
	0, 0, 0, 943, 1249, 1250, 1251, 0, 1248, 1245,
	1246, 1247, 1239, 1240, 1241, 1242, 1244, 0, 942, 0,
	0, 0, 1249, 1250, 1251, 0, 1248, 1245, 1246, 1247,
	1239, 1240, 1241, 1242, 1244, 0, 0, 0, 0, 0,
	0, 0, 936, 937, 938, 0, 592, 0, 0, 0,
	0, 0, 0, 1249, 1250, 1251, 0, 1248, 1245, 1246,
	1247, 1239, 1240, 1241, 1242, 1244, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	946, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 941, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 935, 0, 0, 0, 0, 0,
	0, 0, 939, 0, 0, 0, 0, 0, 960, 0,
	0, 0, 0, 0, 934, 0, 0, 954, 955, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	959,
}
var sqlPact = [...]int{

	20655, -1000, 37, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 732, -1000, -1000, -1000, 587, 728, 153, 963, 963,
	14843, -1000, -1000, 17560, 2380, 449, 453, 449, 449, 467,
	14843, 527, 660, 181, -1000, 575, 29, 17313, 13608, 1244,
	31, 13114, 312, 20655, 13361, 13608, 17066, 1080, 994, 993,
	13114, 16819, 16572, 16325, -1000, 8830, -1000, -1000, -1000, -1000,
	-1000, 839, -1000, 24, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 835, -1000, 13608, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 16078, 15831, 872,
	-1000, -1000, 505, 370, 1254, -1000, 45, -1000, -1000, -1000,
	1077, -1000, 834, 1076, 1075, 1074, 1065, 369, 917, -1000,
	526, 872, -1000, 872, -1000, -1000, -1000, 508, 14843, -1000,
	13114, -1000, 15584, 1007, 15337, -1000, 575, -1000, -1000, -1000,
	901, 1219, 1219, 1219, 1246, 159, 158, 181, 9, 13608,
	-1000, 317, 9, 5974, 5974, -1000, -1000, 312, -1000, 333,
	11380, 41, -1000, 6492, -1000, 781, 1128, 680, 667, 1127,
	-50, 13114, 13608, 13608, 574, 15090, -1000, 1125, 111, 1123,
	-1000, 109, 1120, -1000, -17, -1000, -1000, -1000, -1000, -1000,
	-1000, 312, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 11632, 1202, 11632, -1000, -1000,
	1284, -1000, -1000, 22, 15, 965, 996, 9346, 9089, 1181,
	615, -1000, -1000, -1000, 44, 3886, 13608, 1087, 11632, 13608,
	13608, 13608, -1000, 13608, -1000, 959, -1000, 13608, -1000, 13,
	10, -1000, 14843, -1000, 114, -1000, 308, 931, 14596, 1136,
	926, -1000, 901, -1000, 847, 956, 7028, 7805, 181, -1000,
	-1000, 181, 181, 7805, -1000, -1000, 13608, 9, 1266, 13608,
	132, -1000, 19788, -1000, -1000, 7805, 7805, 7805, 7805, 7805,
	733, -1000, -1000, -1000, 4402, -1000, -1000, 41, 307, 215,
	-1000, -1000, 306, 41, -1000, -1000, -1000, -1000, 304, 1379,
	377, -1000, -1000, -1000, 7805, 376, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1086, 301, 300, -1000, -1000,
	-1000, -1000, 295, 294, 292, 290, 289, 287, 286, 285,
	279, 270, 269, 267, 262, 256, 714, -1000, 394, -1000,
	-1000, 394, 394, -1000, 225, 225, 232, -1000, -1000, -1000,
	225, -1000, -1000, -1000, 359, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 253, 132, -1000, -1000, -1000, 13608, 41, -1000,
	-1000, -1000, 7805, 3628, -18, -1000, 20458, -1000, -8, 861,
	-1000, 12620, 1225, 1221, 1203, 13114, 507, 503, 13608, 13608,
	382, 85, 1264, 85, 10876, -1000, 13608, 13608, -1000, 13608,
	-1000, -1000, 13608, -1000, 13608, 13608, 62, 12126, 498, -3,
	11879, 13608, -1000, 43, -1000, -1000, 1058, 448, 699, 975,
	846, -1000, -1000, -1000, -1000, 3, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1359, -1000, -1000, -1000,
	-1000, 1368, 3, -1000, -1000, -1000, -1000, -1000, 1376, -1000,
	-1000, -1000, -1000, 3886, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 13608, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 699,
	975, -1000, -1000, 13114, 12373, 1119, 826, 922, -1000, -1000,
	348, 1118, -1000, -1000, -1000, -1000, 20458, -1000, 20458, 608,
	998, -1000, 998, -1, -1000, 19697, -1000, 252, -23, -1000,
	382, 5974, 10624, 20940, 13608, 521, 7805, 7805, 7805, 7805,
	7805, 7805, 7805, 7805, 7805, 7805, 7805, 7805, 7805, 7805,
	7805, 7805, 7805, 7805, 7805, 7805, 7805, 7805, 776, 495,
	827, 755, 223, 3886, -1000, 1331, 1331, 1331, 2547, 2547,
	241, 14, 19354, -2, 41, -1000, -1000, 5697, 5438, 41,
	4143, -1000, 738, 1367, 389, 20458, 1096, 1021, 243, 151,
	138, 7805, 7805, 677, 7805, 8064, 7805, 7805, 4661, 7805,
	7805, 7805, 7805, 7805, 7805, -1000, 240, -1000, -1000, -1000,
	-1000, 1363, -1000, -1000, 1361, -1000, 517, 514, 1355, 382,
	136, -1000, 2211, -1000, -1000, 6492, -1000, 674, 13608, 13608,
	13608, -1000, -1000, 915, 14349, -1000, 20940, 13608, -1000, 238,
	235, 979, 978, 13608, 13608, 14102, 13855, 13608, 768, 13608,
	13608, 659, -1000, 641, 7805, 746, -1000, 10109, 398, 13608,
	652, 108, -1000, -1000, -1000, 346, 13608, -1000, -1000, -1000,
	111, -1000, 109, -1000, -1000, 13608, 11879, -3, -4, -1000,
	-1000, 13608, 975, -1000, -1000, -1000, 604, -1000, 663, -1000,
	9603, -1000, -1000, -1000, 738, -1000, -10, -1000, -1000, -1000,
	-1000, 127, -5, -1000, -1000, -1000, -1000, -1000, 13608, 297,
	13608, 13608, 13608, 1117, 1374, 13608, -1000, -1000, -1000, 7805,
	-1000, -1000, -1000, 29, 13608, -1000, 1020, -1000, -7, 1186,
	-127, 12867, -1000, 9852, -1000, 1293, -1000, -1000, -1000, -1000,
	101, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 232, 714, 225, 225, 225, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 359, -1000, 394, 394, 394, -1000,
	-1000, -1000, 367, 455, 455, 1275, 1275, 1275, 1275, 589,
	589, 602, 2097, 2689, 2689, 2689, 1718, 658, 658, 2689,
	2689, 2689, 2547, 20538, 154, 7805, 482, 743, 223, 7805,
	-1000, 955, -1000, -1000, -1000, 1056, 222, 8064, 8064, -1000,
	-1000, -1000, 4402, -1000, -1000, 221, 7805, -1000, 7805, -78,
	-84, -1000, 20458, -1000, -25, -1000, -1000, 2, 7805, 7805,
	7805, 125, -1000, 481, -1000, 480, 474, 473, -1000, 217,
	120, 558, -1000, 7805, 756, 216, 214, 7805, -1000, -1000,
	20378, 18104, 119, 1047, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 118, 20268, 116, 20779, -1000, 8064, 8064, 8064, 4402,
	212, 115, 19650, -105, 20108, 6751, 6751, 6751, 113, 20061,
	7805, -105, 18073, 18048, 2587, -27, -29, -35, 1350, -39,
	110, 364, 355, 107, 1020, -1000, -1000, 7805, -1000, -1000,
	-1000, 468, 461, 1111, -1000, 912, -1000, 942, 7805, 13608,
	210, 209, 711, -1000, 1109, 815, 1107, 815, -1000, -8,
	712, -1000, -1000, 460, -1000, 5974, 20458, -1000, 651, 1207,
	-41, -1000, -1000, -1000, 5974, 382, 10876, 6492, -47, -1000,
	-1000, -10, -1000, -10, -1000, -1000, -1000, -1000, -1000, -1000,
	13608, -1000, 12373, 207, 13608, 203, 202, 187, 13608, -1000,
	1136, -1000, 105, -1000, -1000, -1000, -1000, -1000, 1014, 1242,
	10624, 988, 987, 10624, 1070, 764, 764, 764, -1000, 12867,
	3357, -1000, -1000, 13608, 186, 10366, 104, 1186, 326, 322,
	-1000, 1343, 7805, 154, 7805, 8064, 8064, -1000, 154, -1000,
	-1000, -1000, -1000, 1040, 184, 7805, 20940, 20761, 20731, -51,
	5179, -12, 19331, 7805, -1000, -1000, 215, -1000, 99, 6233,
	-1000, 19879, 5, 5, -1000, 941, 911, 676, 582, 1341,
	1372, 1132, -1000, 7805, 19970, -1000, 11128, 385, 785, 19065,
	20940, 20940, -1000, 7805, -1000, 1034, 7805, -1000, 20940, 8064,
	8064, 8064, 8064, 8064, 8064, 8064, 8064, 8064, 8064, 8064,
	8064, 8064, 8064, 8064, 8064, 8064, 8064, 8064, 973, 8064,
	1327, 1327, 1327, -14, 4920, -1000, 1084, 1034, 7805, 7805,
	20940, 98, 96, 95, -1000, 7805, -105, 7805, 7805, 7805,
	-1000, -1000, -1000, 92, -1000, 1339, -1000, -1000, -1000, -1000,
	1014, 19377, 13608, 13608, 13608, 1104, 1116, -1000, 19042, -53,
	13608, 13608, -1000, 1012, 1002, 425, 13608, -1000, 13608, -1000,
	13608, 13608, 13608, 13608, -16, 5974, 179, 29, 13608, -16,
	641, -1000, -1000, 345, -1000, -1000, 8578, 182, 13608, 12373,
	8578, 814, -1000, -1000, 379, 7805, 7805, 1186, 10624, 10624,
	891, 985, 10624, -1000, -1000, -1000, -1000, -1000, -1000, 989,
	180, 13608, 12867, 427, 1337, 87, 1277, 154, 20426, 205,
	7805, 20940, 20568, -55, -1000, 7805, 7805, -1000, -59, -1000,
	7805, -1000, 20458, -1000, 1371, 7805, 80, 76, 74, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 71, -1000, -1000, 20458,
	7805, -1000, -1000, 17807, 7805, 69, -1000, 64, 63, 20458,
	1084, 20458, -1000, 622, 622, 1327, 1327, 1327, 1327, 506,
	506, 881, 1902, 445, 445, 445, 1526, 673, 673, 445,
	445, 445, 1033, 938, 176, 2737, 7805, -60, -1000, -1000,
	-1000, 20458, 20458, 59, -1000, -1000, -1000, -105, 2491, 19019,
	18753, -1000, 58, 379, -1000, -1000, -1000, -1000, 13608, -1000,
	13608, -1000, 13608, 906, -1000, -1000, 974, 174, 8064, 13608,
	-1000, 706, -61, -68, 905, -1000, 876, 7805, -1000, 20940,
	815, 815, -1000, 457, 456, -1000, -16, 1154, 13608, 1194,
	-1000, -1000, -1000, 173, -73, -1000, 213, 1226, 7805, -1000,
	-1000, 172, 8578, -74, -1000, -1000, 56, -82, 13608, -1000,
	13608, 20458, -105, -1000, 891, -1000, 171, 7805, 10624, -1000,
	-138, -1000, 343, -1000, 13608, -87, -1000, -1000, 319, 206,
	-1000, 7805, 7805, 20568, -91, -1000, 20940, 154, 154, -1000,
	18730, -1000, 19879, -1000, -1000, -1000, -1000, 20458, 729, -1000,
	18707, -1000, -1000, -1000, -1000, 8064, 1028, 170, 20940, 18441,
	-1000, -1000, 7805, -1000, -1000, -1000, -1000, -1000, 946, -1000,
	-1000, -1000, 7805, 2737, 167, -1000, 166, -1000, -1000, -1000,
	683, -1000, -1000, 20458, 1228, -1000, -1000, 13608, 13608, 497,
	-93, 13608, -1000, -1000, 3036, 706, 8578, 1218, 41, 13608,
	1218, 18418, 4143, -95, -1000, 13608, -1000, 706, 165, -34,
	-1000, 1263, -1000, 13608, 20458, -1000, 989, -1000, 3886, -100,
	-1000, -1000, -1000, 154, 154, -1000, -1000, -1000, 55, 785,
	1229, -1000, 20810, 8064, 20940, -108, -1000, 18395, -1000, 18129,
	947, 13608, 13608, 13608, 404, 13608, -1000, -1000, 567, -1000,
	382, -1000, -1000, -1000, -1000, -1000, -1000, 1226, 2, 706,
	-1000, -1000, 8578, 13608, 164, -114, -1000, -1000, -1000, -1000,
	611, 7805, 20810, -116, -1000, -1000, -1000, 797, 749, 51,
	-118, 161, -1000, 7805, -1000, 10876, -1000, 1218, 49, -1000,
	-124, -1000, -1000, -1000, 48, 7546, 7546, -105, -1000, -1000,
	799, 798, 584, -1000, -1000, -1000, -1000, -1000, 947, 13608,
	20458, -106, -1000, -1000, 706, -1000, -1000, -1000, 8321, 813,
	599, 19559, -1000, -1000, 1161, -1000, 414, 848, 848, 797,
	-125, -1000, -1000, 1305, -1000, -1000, -1000, -1000, -1000, -1000,
	1316, -1000, -1000, 983, -1000, -1000, -1000, 7287, -1000, -1000,
	-1000, -1000,
}
var sqlPgo = [...]int{

	0, 1564, 1563, 1279, 1562, 1560, 1558, 1557, 1555, 94,
	1551, 123, 129, 1550, 90, 1548, 1546, 1543, 1537, 69,
	1535, 1531, 1530, 1528, 1527, 81, 46, 161, 1860, 154,
	1526, 1522, 1521, 9, 108, 98, 1519, 96, 65, 95,
	114, 704, 86, 1518, 1513, 136, 27, 14, 50, 104,
	144, 125, 124, 1512, 1508, 1507, 35, 1506, 1505, 1503,
	1500, 45, 40, 1497, 18, 1495, 19, 1494, 1493, 103,
	1492, 92, 121, 37, 131, 23, 1491, 43, 12, 71,
	1489, 29, 1488, 30, 73, 134, 1487, 42, 241, 53,
	28, 70, 1484, 1483, 1481, 1478, 80, 82, 51, 1477,
	1476, 72, 1474, 135, 133, 1473, 1472, 128, 1471, 1470,
	1469, 678, 1468, 1466, 626, 3, 33, 60, 5, 115,
	106, 32, 1465, 17, 1464, 1345, 722, 699, 1463, 47,
	38, 76, 44, 59, 16, 1462, 110, 1461, 1459, 1457,
	1455, 1454, 75, 1452, 67, 137, 39, 58, 99, 25,
	21, 68, 83, 119, 145, 117, 1450, 127, 1448, 187,
	1447, 1446, 832, 87, 1445, 1442, 1441, 659, 640, 411,
	26, 1440, 1438, 204, 185, 1437, 1434, 79, 1433, 1432,
	140, 1431, 139, 20, 1430, 126, 1428, 84, 1425, 0,
	77, 54, 1423, 130, 74, 1422, 1421, 1420, 1415, 22,
	2, 10, 6, 7, 4, 24, 11, 1414, 1413, 132,
	88, 1412, 147, 1410, 1409, 36, 1406, 1404, 15, 1403,
	13, 1402, 8, 1, 1400, 138, 1397, 100, 1396, 1317,
	1395, 141, 1391, 1385, 1334, 78,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 4, 4, 35, 35, 34, 34, 34, 34,
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
	34, 32, 32, 37, 37, 37, 36, 36, 31, 31,
	5, 5, 5, 9, 10, 10, 10, 10, 10, 10,
	74, 74, 73, 73, 76, 76, 11, 11, 12, 12,
	12, 12, 12, 158, 158, 157, 13, 18, 225, 225,
	225, 229, 229, 230, 230, 231, 231, 231, 231, 231,
	231, 231, 227, 227, 21, 21, 21, 21, 111, 111,
	113, 113, 113, 113, 40, 110, 110, 110, 110, 112,
	112, 112, 112, 182, 180, 180, 187, 187, 187, 53,
	53, 53, 53, 53, 54, 54, 54, 179, 179, 179,
	179, 188, 188, 188, 188, 188, 188, 55, 55, 55,
	186, 186, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 181, 181, 226, 226,
	228, 228, 8, 8, 56, 56, 57, 57, 117, 117,
	117, 117, 116, 197, 197, 198, 198, 198, 199, 199,
	199, 199, 199, 199, 199, 195, 195, 196, 193, 193,
	194, 194, 194, 194, 232, 232, 115, 115, 60, 60,
	202, 202, 202, 202, 200, 200, 200, 200, 200, 203,
	201, 204, 204, 204, 204, 204, 145, 145, 145, 24,
	7, 7, 100, 100, 64, 64, 149, 149, 149, 65,
	65, 150, 47, 47, 33, 33, 33, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 101, 101, 102, 102,
	16, 20, 23, 23, 23, 23, 23, 234, 234, 44,
	44, 44, 44, 45, 45, 114, 114, 114, 114, 114,
	39, 6, 6, 38, 38, 14, 14, 14, 14, 14,
	50, 50, 107, 107, 107, 109, 109, 108, 108, 108,
	87, 87, 25, 78, 78, 79, 79, 156, 80, 80,
	19, 19, 28, 28, 26, 26, 26, 26, 26, 26,
	27, 27, 29, 29, 29, 29, 29, 29, 29, 210,
	210, 210, 212, 212, 209, 15, 15, 15, 15, 211,
	211, 233, 233, 88, 88, 88, 59, 58, 58, 62,
	62, 61, 63, 63, 148, 85, 85, 85, 85, 103,
	104, 104, 105, 105, 106, 106, 84, 84, 132, 132,
	30, 30, 69, 69, 70, 70, 123, 123, 124, 124,
	122, 122, 122, 151, 151, 151, 151, 152, 152, 152,
	152, 152, 152, 146, 146, 146, 146, 147, 147, 91,
	91, 91, 91, 89, 89, 90, 90, 153, 153, 153,
	153, 86, 86, 154, 154, 154, 118, 118, 159, 159,
	159, 68, 68, 68, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 161, 161, 161, 161, 163,
	163, 163, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 164, 164, 171, 171, 172,
	172, 173, 174, 165, 165, 166, 166, 167, 168, 175,
	175, 175, 175, 177, 177, 169, 169, 169, 169, 169,
	170, 97, 97, 97, 97, 97, 97, 97, 97, 97,
	97, 97, 97, 97, 97, 98, 98, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
	126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
	126, 126, 126, 126, 126, 126, 126, 126, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	205, 205, 205, 205, 205, 205, 205, 207, 207, 208,
	208, 206, 206, 206, 206, 206, 206, 206, 206, 206,
	206, 206, 206, 206, 206, 206, 206, 206, 206, 206,
	206, 206, 206, 206, 206, 206, 206, 213, 213, 214,
	214, 215, 215, 216, 216, 218, 219, 219, 219, 220,
	224, 224, 217, 217, 221, 221, 221, 222, 222, 223,
	223, 223, 223, 223, 136, 136, 136, 137, 137, 138,
	75, 75, 134, 134, 133, 133, 133, 135, 135, 92,
	176, 176, 176, 176, 176, 176, 176, 93, 93, 99,
	94, 94, 95, 95, 95, 95, 95, 95, 129, 130,
	96, 96, 96, 131, 131, 139, 143, 143, 142, 141,
	141, 140, 140, 121, 121, 121, 121, 120, 119, 81,
	81, 235, 235, 144, 144, 82, 82, 83, 77, 77,
	155, 155, 155, 155, 71, 71, 52, 52, 72, 72,
	48, 48, 51, 49, 49, 49, 49, 66, 66, 67,
	67, 46, 46, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 178, 178, 178, 41, 41, 41,
	42, 42, 43, 43, 184, 184, 184, 185, 185, 185,
	185, 183, 183, 183, 183, 183, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 191, 191,
	191, 191, 191, 191, 191, 191, 191, 191, 191, 191,
	191, 191, 191, 191, 191, 191, 191, 191, 191, 191,
	191, 191, 191, 191, 191, 191, 191, 191, 191, 191,
	191, 191, 191, 191, 191, 191, 191, 191, 191, 191,
	191, 191, 191, 191, 190, 190, 190, 190, 190, 190,
	190, 190, 190, 190, 190, 190, 190, 192, 192, 192,
	192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
	192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
	192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
	192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
	192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
	192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
	192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
	192, 192, 192, 192, 192, 192,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 4, 6, 1, 3, 2, 5, 3, 6,
	4, 6, 6, 6, 4, 8, 2, 3, 3, 6,
	4, 3, 2, 1, 1, 0, 2, 0, 2, 0,
	1, 1, 1, 6, 3, 5, 4, 6, 4, 6,
	1, 3, 1, 2, 2, 3, 2, 5, 1, 1,
	1, 1, 1, 1, 3, 1, 6, 6, 1, 2,
	2, 1, 1, 1, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 2, 3, 6, 3, 2, 1,
	1, 1, 3, 3, 2, 3, 3, 3, 3, 1,
	3, 3, 2, 1, 1, 3, 1, 1, 1, 2,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 1, 1, 1, 1, 1, 0,
	1, 1, 2, 2, 4, 2, 4, 4, 4, 4,
	3, 3, 4, 3, 2, 4, 2, 0, 2, 0,
	2, 0, 6, 9, 1, 0, 1, 3, 1, 1,
	1, 1, 3, 2, 0, 3, 1, 2, 2, 1,
	1, 2, 4, 2, 5, 6, 7, 5, 3, 1,
	4, 5, 5, 10, 1, 1, 4, 0, 3, 0,
	2, 2, 2, 0, 1, 1, 2, 2, 0, 3,
	3, 2, 1, 1, 2, 2, 1, 2, 1, 4,
	10, 13, 1, 0, 1, 3, 3, 3, 5, 1,
	3, 1, 2, 0, 1, 1, 0, 6, 6, 8,
	6, 8, 8, 10, 8, 10, 1, 0, 2, 0,
	2, 2, 3, 3, 2, 2, 2, 1, 0, 1,
	3, 2, 0, 2, 1, 1, 1, 3, 3, 0,
	3, 4, 7, 3, 0, 6, 6, 8, 5, 7,
	1, 3, 1, 4, 2, 8, 5, 4, 3, 0,
	2, 0, 8, 1, 3, 1, 1, 3, 5, 5,
	1, 1, 3, 3, 1, 2, 3, 2, 3, 4,
	1, 1, 8, 8, 1, 2, 4, 4, 4, 2,
	2, 3, 1, 3, 6, 1, 1, 1, 1, 1,
	0, 1, 0, 1, 1, 0, 1, 1, 0, 1,
	0, 3, 1, 3, 2, 2, 2, 1, 1, 2,
	2, 3, 1, 1, 1, 1, 3, 0, 2, 0,
	2, 3, 2, 0, 1, 3, 3, 1, 1, 3,
	2, 4, 0, 3, 2, 1, 4, 3, 4, 5,
	4, 5, 4, 5, 2, 4, 1, 1, 0, 2,
	2, 2, 1, 1, 0, 4, 2, 1, 2, 2,
	4, 1, 3, 1, 2, 3, 2, 0, 2, 5,
	2, 3, 4, 0, 1, 1, 1, 1, 2, 4,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	5, 0, 1, 1, 1, 1, 1, 1, 2, 2,
	2, 2, 2, 1, 1, 3, 0, 1, 1, 1,
	1, 5, 2, 1, 1, 1, 1, 4, 1, 2,
	2, 1, 1, 1, 0, 1, 1, 4, 1, 4,
	1, 1, 1, 1, 1, 1, 1, 3, 3, 3,
	3, 3, 3, 3, 0, 1, 4, 1, 3, 3,
	5, 2, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 2, 3, 4, 4,
	5, 3, 4, 3, 3, 4, 3, 4, 3, 4,
	5, 6, 6, 7, 6, 7, 6, 7, 3, 4,
	1, 3, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 5, 6, 6, 7, 1, 1,
	1, 3, 1, 1, 1, 2, 2, 2, 1, 1,
	3, 5, 6, 8, 6, 6, 4, 4, 1, 1,
	1, 5, 1, 3, 1, 3, 1, 1, 1, 1,
	6, 6, 4, 4, 4, 4, 6, 5, 5, 5,
	4, 8, 6, 6, 4, 4, 4, 5, 0, 5,
	0, 2, 0, 1, 3, 3, 2, 2, 0, 6,
	1, 0, 3, 0, 2, 2, 0, 1, 4, 2,
	2, 2, 2, 2, 4, 3, 5, 4, 3, 5,
	1, 3, 1, 3, 3, 3, 2, 1, 3, 3,
	1, 1, 1, 1, 1, 1, 1, 4, 3, 2,
	3, 0, 3, 3, 2, 2, 1, 0, 2, 2,
	3, 2, 1, 1, 3, 5, 1, 2, 4, 2,
	0, 1, 0, 1, 1, 3, 5, 2, 2, 1,
	2, 1, 0, 1, 1, 1, 3, 3, 1, 3,
	3, 2, 1, 1, 1, 3, 1, 3, 1, 3,
	1, 2, 3, 1, 2, 2, 1, 1, 3, 3,
	0, 1, 2, 1, 1, 1, 1, 6, 2, 3,
	5, 1, 1, 1, 1, 2, 2, 1, 1, 1,
	1, 0, 3, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -9, -10, -11, -13,
	-14, -17, -18, -20, -19, -21, -22, -23, -16, -24,
	-25, 19, -6, -7, -8, -211, 84, 91, 106, 193,
	200, -26, -28, 208, 209, 30, 216, 53, 87, 195,
	190, 235, 59, -210, -29, -27, 280, 256, 262, 203,
	-30, 222, 249, 283, 222, 71, 117, 79, 121, 243,
	242, 71, 117, 222, -12, 280, -19, -14, -25, -9,
	-11, -229, 18, -230, -231, 59, 84, 106, 203, 121,
	79, 242, -229, -45, 200, -41, 4, -189, -191, 16,
	17, 19, 29, 30, 34, 38, 41, 52, 53, 54,
	56, 58, 61, 62, 69, 70, 71, 72, 74, 79,
	83, 84, 86, 91, 96, 97, 100, 102, 107, 112,
	113, 118, 121, 129, 131, 132, 137, 140, 143, 145,
	146, 147, 148, 149, 151, 152, 154, 156, 153, 159,
	161, 162, 168, 171, 174, 175, 178, 181, 182, 183,
	185, 186, 190, 188, 189, 191, 193, 195, 196, 198,
	201, 202, 205, 206, 208, 209, 211, 213, 215, 216,
	219, 217, 223, 224, 231, 235, 236, 237, 238, 241,
	242, 243, 246, 247, 248, 252, 257, 258, 259, 260,
	24, 31, 32, 33, 35, 36, 39, 40, 44, 45,
	46, 48, 73, 75, 76, 90, 92, 98, 108, 110,
	114, 115, 122, 123, 124, 126, 135, 158, 160, 169,
	173, 177, 179, 184, 197, 204, 212, 218, 220, 226,
	227, 228, 232, 233, 249, 250, -111, 140, 206, 231,
	-112, -110, -182, 226, 149, -73, -41, 200, 4, 71,
	52, 72, 107, 117, 118, 132, 223, 226, 231, 18,
	59, -234, 231, 231, -234, -234, -44, 231, 229, -45,
	-233, 222, 222, -100, 71, 240, -27, -29, -28, -61,
	-62, 239, 125, 89, 167, -26, -28, -210, -212, 185,
	-209, -41, -212, -58, -59, 18, 81, 284, -153, -48,
	165, -41, -83, 280, -3, -153, 114, -41, -51, 114,
	-48, 104, 127, 127, -154, -153, -41, 114, -52, 114,
	-51, -74, 114, -73, -158, -157, -185, 4, -189, -191,
	-190, 249, 50, 60, 105, 120, 128, 130, 136, 138,
	150, 170, 172, 194, 210, 164, 284, 164, -41, -111,
	46, -111, -113, -39, -40, 129, 181, 229, 265, 104,
	260, -55, 5, 77, -76, 282, 104, -226, 164, 104,
	104, 104, -181, 104, 260, 129, 181, 222, -114, -39,
	-40, -114, 229, -45, -86, -153, -73, 114, 117, -41,
	114, -61, -62, -85, -103, -104, 139, 163, -88, 18,
	81, -88, -88, 38, 281, 281, 284, -212, -67, 280,
	-77, -155, -125, 273, -127, 271, 272, 277, 155, 261,
	-136, -48, -128, 9, 280, -139, -207, -28, 90, 25,
	-137, -138, 197, -41, 7, 8, 5, 6, -46, -161,
	-170, 234, 93, 157, 42, -205, -206, 4, -189, -184,
	-162, -172, -166, -169, 126, 50, 64, 67, 65, 68,
	207, 244, 43, 24, 92, 173, 177, 220, 232, 233,
	114, 158, 115, 48, 108, 135, 83, 32, 33, 35,
	36, 44, 45, 73, 75, 76, 98, 122, 123, 124,
	160, 184, 212, 218, 227, 228, 250, -190, -173, -174,
	-167, -168, -175, -77, -83, 273, -48, 280, -81, -121,
	-120, -119, 278, 282, -82, -144, -125, 77, -35, 188,
	-34, 17, 19, 84, 247, 90, 188, 188, 90, 285,
	-154, -50, -48, -50, 208, -41, 26, 90, -37, 284,
	41, 191, 90, -37, 284, 90, 281, 284, -225, -72,
	222, 71, -49, -41, 273, -231, -225, 26, 284, 284,
	137, -54, 143, 154, 112, -180, 77, -187, -179, -145,
	9, 234, 93, 164, -186, 8, 272, -178, -185, 5,
	7, 271, -180, 77, 62, -188, 5, 4, -170, -145,
	77, 140, 126, 282, -183, 4, -189, -191, -190, -192,
	18, 20, 21, 22, 23, 25, 26, 27, 28, 37,
	42, 43, 47, 49, 51, 57, 59, 63, 64, 65,
	66, 67, 68, 77, 78, 80, 81, 82, 85, 87,
	89, 93, 94, 95, 101, 103, 104, 106, 109, 111,
	116, 117, 119, 125, 127, 133, 134, 139, 141, 142,
	155, 157, 163, 164, 165, 166, 167, 176, 180, 187,
	192, 203, 207, 214, 221, 222, 225, 229, 230, 234,
	239, 240, 244, 245, 251, 253, 254, 255, 256, -182,
	-228, 101, -225, -182, -182, -182, -182, 137, -182, 284,
	284, -45, -37, 284, 280, 155, -42, 114, -41, -38,
	86, 155, -85, -104, -103, -105, -125, 18, -125, -127,
	-27, -27, -27, -63, -148, -125, -209, 26, -66, -41,
	-69, 284, 104, 10, 49, 29, 271, 272, 273, 274,
	99, 275, 268, 269, 270, 267, 263, 264, 265, 55,
	144, 199, 12, 13, 14, 22, 166, 138, 261, 210,
	128, 31, 116, 26, 4, -125, -125, -125, -125, -125,
	172, -28, -125, -75, -81, -28, -133, 278, 280, -81,
	280, 5, 5, 280, -140, -125, -213, 257, 101, 280,
	280, 280, 280, 280, 280, 280, 280, 280, 280, 280,
	280, 280, 280, 280, 280, 179, -177, 252, -177, -177,
	-163, 280, -163, -164, 280, -163, 258, 262, 280, -69,
	-48, -121, -125, -183, 273, 284, 281, 284, 229, -101,
	57, 51, -116, 114, 51, -193, -41, 57, -194, 47,
	240, 180, 103, -101, 57, -101, 57, 57, -153, 229,
	229, -51, -41, -118, 254, -107, -19, 280, 77, 26,
	-107, -78, -79, -156, -80, -48, 280, -41, -41, -51,
	-52, -73, -74, -12, -157, 229, 284, -72, -66, -120,
	-119, 104, 231, -40, -39, -53, 183, 213, 189, 205,
	284, 8, 7, 7, 5, -183, -227, -41, -40, -39,
	-153, -56, -57, -117, -116, -195, -196, -193, 117, 240,
	94, 90, 164, 155, 265, 90, -106, 197, 198, 284,
	-33, 27, 80, 280, 284, 281, -118, -155, -70, -151,
	-153, -28, -152, 280, -159, -160, -162, -171, -165, -169,
	-170, 34, 40, 39, 224, 204, 122, 123, 124, 212,
	32, 184, 98, 83, 76, 75, 160, 36, 35, -173,
	-174, -167, -168, 73, 227, 228, 33, 45, 44, 250,
	218, -73, 226, -125, -125, -125, -125, -125, -125, -125,
	-125, -125, -125, -125, -125, -125, -125, -125, -125, -125,
	-125, -125, -125, -125, -125, 138, 210, 31, 116, 229,
	157, 155, 234, 93, 241, 81, 161, -235, 221, 28,
	-131, -28, 280, -183, -136, 197, 280, 281, 284, -75,
	-135, 279, -125, -133, -75, 281, 281, -75, 251, 18,
	81, 273, -97, 259, 147, 74, 113, 146, -98, 202,
	7, -143, -142, 253, -214, 96, 109, 280, 281, 281,
	-125, -125, -92, -176, 4, 259, 147, 74, 113, 146,
	202, -93, -125, -94, -126, -127, 271, 272, 277, 280,
	197, -95, -125, -75, -125, 37, 134, 230, -96, -125,
	104, -75, -125, -125, -125, -75, -75, -75, 280, 7,
	7, 226, 226, 7, -118, 281, 279, 288, -144, -34,
	-48, -41, -41, 155, -116, 114, -159, -41, 280, 280,
	131, 131, -41, -41, 114, -41, 114, -41, -41, -35,
	188, -41, -41, 188, -87, 192, -125, -87, -109, 164,
	-71, -48, 249, -41, 192, -69, 284, 265, -71, -37,
	-37, -227, -49, -227, -39, 238, 54, 183, -187, -97,
	284, 281, 284, -42, 117, -42, -73, -48, 90, 5,
	-41, -148, -15, -19, -14, -25, -9, -41, -84, 109,
	284, 60, -91, 130, 150, 105, 136, 194, 120, -122,
	285, -147, -146, 26, -41, -28, -152, -151, -68, 25,
	-97, 280, 260, -125, 229, -235, 221, -131, -125, 157,
	234, 93, 241, 81, 161, 104, 280, -126, -126, -75,
	280, -75, -125, 284, 279, 279, 284, 281, -62, 284,
	-61, -125, -75, -75, 281, 229, 229, 229, 229, 280,
	281, -141, -142, 85, -125, -219, 171, 280, 280, -125,
	26, 284, 281, 104, 281, -99, 176, 281, 10, 271,
	272, 273, 274, 99, 275, 268, 269, 270, 267, 263,
	264, 265, 55, 144, 199, 12, 13, 14, 128, 116,
	-126, -126, -126, -75, 280, 281, -129, -130, 104, 101,
	26, -96, -96, -96, 281, 104, -75, 284, 284, 284,
	281, 281, 281, 7, 281, 284, 281, 260, 260, 281,
	-84, -125, 229, 229, 90, 155, -197, -194, -125, -66,
	280, 280, -32, 84, 208, -102, 90, -37, 90, -37,
	229, -101, 57, 229, -77, 192, 56, 281, 284, -77,
	-118, -79, -144, 281, -41, -117, 280, -42, 280, 280,
	280, -41, -38, 281, -132, 111, 38, -151, 130, 130,
	-151, -91, 130, -89, 170, -89, -89, -147, -183, 286,
	-41, 280, 281, 278, 278, 7, -125, -125, -126, -126,
	104, 280, -125, -134, -159, 22, 22, 281, -75, 281,
	284, 281, -125, -133, 281, 251, -62, -62, -62, 147,
	113, 146, -98, 146, -98, -98, 7, 5, 87, -125,
	225, -220, -41, 280, 254, -61, 281, -159, -159, -125,
	-129, -125, -159, -126, -126, -126, -126, -126, -126, -126,
	-126, -126, -126, -126, -126, -126, -126, -126, -126, -126,
	-126, -126, 81, 155, 161, -126, 284, -75, 281, -130,
	-129, -125, -125, -159, 281, 281, 281, -75, -125, -125,
	-125, 281, 7, -132, 279, -41, -41, -116, 90, -198,
	57, -199, 49, 155, 157, 240, 180, 47, 77, 187,
	281, 281, -66, -66, 155, 77, 155, 77, 70, 236,
	-41, -41, -48, -41, -41, -41, -77, -108, 280, 164,
	-19, -48, -87, 265, -64, -149, -41, -208, 280, -205,
	-206, -46, 280, -65, -150, -41, -56, -64, 164, -215,
	255, -125, -75, -151, -151, -90, 245, 164, 130, -151,
	-124, -123, 102, 153, 280, -66, -146, 279, 7, 7,
	281, 22, 22, -125, -134, 281, 284, -125, -125, 281,
	-125, 5, -125, 281, 281, 281, 281, -125, -224, -41,
	-125, 281, 281, 281, -130, 104, 81, 161, 280, -125,
	281, 281, 284, 281, 281, 281, -215, -116, -41, -73,
	157, 131, 280, -126, -48, -115, -232, 58, 219, 281,
	281, 157, 157, -125, -159, -37, -37, 229, 229, 82,
	-66, 57, -83, -28, 280, 281, 284, -47, -81, 49,
	-47, -125, 280, -64, 281, 284, 281, 281, -48, -216,
	-218, -41, -90, 280, -125, -151, 284, 287, 265, -66,
	281, 279, 279, -125, -125, 281, -159, 281, -62, -217,
	175, 281, -126, 104, 280, -134, 281, -125, -199, -125,
	-43, 280, 280, 187, -36, 49, -41, -41, 242, 156,
	281, -41, -115, -149, -33, -73, -33, 281, -75, 281,
	-150, -115, 280, 284, 26, -66, -123, -183, 281, 281,
	-62, 38, -126, -134, 281, 281, 281, -202, 145, -41,
	-66, -48, -31, 245, -73, 208, -118, -47, -62, -115,
	-64, -218, -220, 281, -221, 182, 198, -75, 281, -200,
	-203, -201, 164, 105, 174, 211, 281, 281, -60, 280,
	-125, -78, -33, 281, 281, 281, -222, -223, 31, 237,
	62, -125, -222, -201, 164, -203, 164, 242, 79, -202,
	-66, -118, -115, -223, 178, 100, 197, 178, 100, -204,
	152, 191, 41, 208, -204, -200, 281, 22, 16, 157,
	77, -223,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 0, 50, 51, 52, 0, 0, 330, 0, 0,
	0, 300, -2, 0, 0, 258, 0, 258, 258, 262,
	0, 332, 223, 329, -2, 340, 0, 0, 0, 338,
	314, 0, 0, -2, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 66, 0, 68, 69, 70, 71,
	72, 0, 81, 82, 83, 85, 86, 87, 88, 89,
	90, 91, 0, 251, 837, 264, 747, 748, 749, 766,
	767, 768, 769, 770, 771, 772, 773, 774, 775, 776,
	777, 778, 779, 780, 781, 782, 783, 784, 785, 786,
	787, 788, 789, 790, 791, 792, 793, 794, 795, 796,
	797, 798, 799, 800, 801, 802, 803, 804, 805, 806,
	807, 808, 809, 810, 811, 812, 813, 814, 815, 816,
	817, 818, 819, 820, 821, 822, 823, 824, 825, 826,
	827, 828, 829, 830, 831, 832, 833, 834, 835, 836,
	838, 839, 840, 841, 842, 843, 844, 845, 846, 847,
	848, 849, 850, 851, 852, 853, 854, 855, 856, 857,
	858, 859, 860, 861, 862, 863, 864, 865, 866, 867,
	868, 869, 870, 871, 872, 873, 874, 875, 876, 877,
	878, 879, 880, 881, 882, 883, 884, 885, 886, 887,
	888, 889, 890, 891, 892, 893, 894, 895, 896, 897,
	898, 899, 900, 901, 902, 903, 904, 905, 906, 907,
	908, 909, 910, 911, 912, 913, 94, 804, 841, 852,
	99, 109, 0, 907, -2, 113, 62, 837, 142, 143,
	0, 145, 159, 0, 0, 0, 157, 0, 0, 154,
	0, 269, 257, 269, 254, 255, 256, 259, 0, 250,
	0, 331, 0, 0, 0, 222, -2, 310, 311, -2,
	0, 335, 335, 335, 0, 0, 311, 0, 319, 827,
	322, 730, 320, 0, 0, 337, 336, 0, 315, 397,
	0, 720, 360, 0, 2, 0, 888, 0, 0, 888,
	0, 0, 0, 0, 0, 403, 54, 888, 45, 888,
	716, 45, 888, 60, 0, 73, 75, 757, 758, 759,
	760, 912, 914, 915, 916, 917, 918, 919, 920, 921,
	922, 923, 924, 925, 926, 0, 0, 0, 263, 95,
	878, 97, 98, 100, 101, 0, 0, 0, 0, 0,
	0, 112, 137, 138, 63, 0, 0, 161, 0, 0,
	0, 0, 150, 0, 151, 0, 153, 0, 252, 265,
	266, 253, 0, 261, 45, 401, 0, 888, 751, 274,
	888, -2, 0, 306, 347, 348, 0, 0, 0, 333,
	334, 0, 0, 0, 302, 303, 0, 321, 0, 0,
	363, 708, 712, 713, 487, 0, 0, 0, 0, 0,
	0, 568, 569, 570, 0, 572, 573, 574, 883, 0,
	578, 579, 902, 720, 733, 734, 735, 736, 0, 0,
	0, 741, 742, 743, 692, 618, 588, -2, -2, 731,
	425, 426, 427, 428, -2, 914, 592, 594, 596, 597,
	598, 599, 0, 868, 884, 898, 899, 906, 910, 911,
	888, 895, 889, 879, 886, 894, 787, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, 756, 449, 450,
	455, 456, 458, 363, 361, 398, 399, 0, 721, 699,
	693, 694, 0, 0, 0, 705, 703, 704, 22, 247,
	24, 0, 247, 247, 0, 0, 0, 0, 0, 0,
	407, 0, 280, 0, 0, 404, 0, 0, 56, 0,
	43, 44, 0, 58, 0, 0, 330, 0, 0, 78,
	0, 783, 718, 723, 726, 84, 0, 0, 0, 0,
	0, 104, 124, 125, 126, 105, 107, 114, 116, 117,
	118, 127, 128, 129, 130, 216, 0, 218, 140, 141,
	744, 0, 106, 108, 110, 111, 131, 132, 0, 134,
	135, 136, 470, 0, 64, 761, 762, 763, 764, 765,
	927, 928, 929, 930, 931, 932, 933, 934, 935, 936,
	937, 938, 939, 940, 941, 942, 943, 944, 945, 946,
	947, 948, 949, 950, 951, 952, 953, 954, 955, 956,
	957, 958, 959, 960, 961, 962, 963, 964, 965, 966,
	967, 968, 969, 970, 971, 972, 973, 974, 975, 976,
	977, 978, 979, 980, 981, 982, 983, 984, 985, 986,
	987, 988, 989, 990, 991, 992, 993, 994, 995, 996,
	997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 144,
	146, 0, 158, 147, 148, 149, 156, 152, 155, 0,
	0, 260, 219, 0, 165, 0, 0, 888, 750, 271,
	0, 0, 309, 345, 346, 349, 352, 353, 350, 487,
	316, 317, 318, 341, 342, 236, 323, 0, 0, 727,
	407, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 702, 0, 0, 711, 491, 492, 493, 515, 516,
	0, -2, 650, 0, 575, 576, 577, 0, 0, -2,
	0, 738, 484, 0, 0, 691, 620, 0, 0, 0,
	0, 0, 0, 0, 0, 671, 677, 0, 0, 0,
	0, 0, 0, 0, 0, 439, 452, 463, 460, 459,
	441, 0, 440, 438, 0, 442, 0, 0, 0, 407,
	0, 700, 0, 697, 698, 0, 707, 0, 0, 0,
	0, 246, 26, 888, 0, 36, 0, 0, 189, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 722, 291, 0, 291, 282, 0, 0, 0,
	278, 363, 293, 295, 296, 0, 0, 405, 55, 717,
	45, 61, 45, 67, 74, 0, 0, 79, 80, 724,
	725, 0, 0, 102, 103, 270, 0, 121, 0, 123,
	0, 217, 746, 745, 484, 65, 160, 92, 267, 268,
	402, 0, 164, 166, 168, 169, 170, 171, 751, 0,
	751, 0, 0, 0, 0, 0, 351, 354, 355, 0,
	344, 234, 235, 330, 0, 729, 357, 709, 362, 364,
	372, 388, 375, 0, 488, 413, 414, 415, 416, 417,
	484, 420, 421, 422, 423, 424, 432, 433, 434, 435,
	436, 437, 446, 0, 431, 431, 431, 443, 444, 447,
	448, 453, 454, 465, 466, 468, 464, 464, 464, 461,
	462, 489, 0, 494, 495, 496, 497, 498, 499, 500,
	501, 502, 503, -2, -2, -2, 507, 508, 509, -2,
	-2, -2, 513, 514, -2, 0, 0, 702, 0, 0,
	521, 0, 524, 526, 528, 0, 0, 0, 0, 701,
	538, 683, 0, 710, 523, 0, 0, 571, 0, 0,
	0, 656, 650, 657, 0, -2, 580, 340, 0, 0,
	0, 0, 739, 471, 472, 473, 474, 475, 476, 485,
	0, 690, 686, 0, 628, 0, 0, 0, 593, 595,
	0, 0, 0, 0, 660, 661, 662, 663, 664, 665,
	666, 0, 0, 0, 0, 540, 0, 0, 0, 0,
	902, 0, 650, 676, 0, 0, 0, 0, 0, 650,
	0, 682, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 357, 400, 695, 0, 706, 25,
	238, 0, 0, 0, 28, 888, 174, 0, 0, 0,
	0, 0, 249, 37, 888, 45, 888, 45, 38, 23,
	247, 237, 240, 0, 53, 0, 406, 275, 276, 0,
	0, 714, 284, 281, 0, 407, 0, 0, 0, 57,
	59, 76, 719, 77, 96, 119, 120, 122, 115, 133,
	0, 162, 0, 0, 751, 0, 0, 0, 0, 273,
	274, 343, 0, 325, 326, 327, 328, 728, 359, 0,
	0, 0, 0, 0, 0, 394, 394, 394, 392, 388,
	0, 374, 387, 0, 386, -2, 375, 0, 408, 410,
	418, 0, 0, -2, 0, 0, 0, 539, -2, 522,
	525, 527, 529, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 651, 0, 654, 655, 0, -2, 0, 0,
	339, 340, 340, 340, 586, 0, 0, 0, 0, 0,
	0, 0, 687, 0, 0, 587, 0, 0, 0, 0,
	0, 0, 602, 0, 603, 0, 0, 604, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	542, 543, 544, 0, 0, 605, 674, 675, 0, 0,
	0, 0, 0, 0, 610, 0, 681, 0, 0, 0,
	614, 615, 616, 0, 429, 0, 445, 467, 469, 457,
	359, 0, 0, 0, 0, 0, 172, 188, 0, 0,
	0, 0, 30, 0, 0, 0, 0, 34, 0, 40,
	0, 0, 0, 0, 290, 0, 289, 0, 0, 279,
	291, 294, 297, 0, 93, 167, 0, 0, 0, 165,
	0, 0, 272, 324, 622, 0, 0, 365, 0, 0,
	0, 0, 0, 389, 393, 390, 391, 373, 370, 0,
	384, 0, 377, 0, 0, 0, 490, -2, 0, 0,
	0, 0, -2, 0, 652, 0, 0, 684, 0, 645,
	0, -2, 651, 658, 581, 0, 0, 0, 0, 477,
	478, 479, 480, 481, 482, 483, 0, 740, 685, 689,
	0, 626, 627, 631, 0, 0, 591, 0, 0, 659,
	668, 669, 541, 545, 546, 547, 548, 549, 550, 551,
	552, 553, 554, -2, -2, -2, 558, 559, 560, -2,
	-2, -2, 0, 0, 0, 670, 0, 0, 648, 672,
	673, 678, 679, 0, 607, 608, 609, 680, 0, 0,
	0, 451, 0, 622, 696, 242, 244, 27, 0, 173,
	0, 176, 0, 0, 179, 180, 0, 0, 0, 0,
	190, 197, 0, 0, 0, 42, 0, 0, 248, 0,
	45, 45, 239, 0, 0, 241, 277, 0, 0, 0,
	283, 715, 292, 0, 0, 224, 233, 233, 0, 589,
	590, 0, 0, 0, 229, 231, 0, 0, 0, 312,
	0, 358, 356, 378, 0, 380, 0, 0, 0, 382,
	0, 368, 0, 367, 0, 0, 376, 411, 0, 0,
	419, 0, 0, -2, 0, 532, 0, -2, -2, 644,
	651, 737, 340, 582, 584, 585, 486, 688, 633, 630,
	0, 617, 600, 601, 667, 0, 0, 0, 0, 651,
	647, 606, 0, 612, 613, 430, 313, 29, 0, 177,
	178, 181, 0, 183, 753, 191, 0, 194, 195, 192,
	0, 31, 32, 41, 47, 33, 39, 0, 0, 0,
	0, 0, 298, 299, 0, 197, 0, 236, 732, 0,
	236, 0, 0, 0, 187, 0, 163, 197, 0, 621,
	623, 0, 379, 0, 396, 381, 0, 371, 0, 0,
	385, 412, 409, -2, -2, 533, 653, 646, 0, 340,
	0, 619, -2, 0, 0, 0, 649, 0, 175, 0,
	203, 0, 0, 0, 49, 0, 243, 245, 0, 286,
	407, 288, 185, 225, 226, 232, 227, 233, 340, 197,
	230, 220, 0, 0, 0, 0, 369, 366, 383, 583,
	636, 0, -2, 0, 566, 611, 182, 208, 0, 0,
	0, 199, 35, 0, 46, 0, 287, 236, 0, 186,
	0, 624, 625, 395, 0, 0, 0, 632, 567, 184,
	204, 205, 0, 200, 201, 202, 752, 196, 203, 0,
	48, 407, 228, 581, 197, 629, 634, 637, -2, 855,
	780, 0, 635, 206, 0, 207, 0, 0, 0, 208,
	0, 285, 221, 0, 639, 640, 641, 642, 643, 209,
	0, 212, 213, 0, 210, 193, 198, 0, 211, 214,
	215, 638,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 269, 3, 275, 270, 3,
	280, 281, 273, 271, 284, 272, 282, 274, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 288, 283,
	263, 265, 264, 3, 285, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 278, 3, 279, 268, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 286, 267, 287, 277,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 266, 57606, 276, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:677
		{
			sqllex.(*scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:683
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:689
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 14:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:709
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 21:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:719
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 22:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:725
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.qname(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 23:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:729
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.qname(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 24:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:735
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 25:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:739
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:746
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 27:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:751
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 28:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:756
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 29:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:761
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 30:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:766
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: sqlDollar[3].str, Default: sqlDollar[4].union.expr()}
		}
	case 31:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:771
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: sqlDollar[3].str}
		}
	case 32:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:775
		{
			unimplemented()
		}
	case 33:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:778
		{
			sqlVAL.union.val = &AlterTableDropColumn{columnKeyword: sqlDollar[2].union.bool(), IfExists: true, Column: sqlDollar[5].str}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:783
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        sqlDollar[3].str,
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:793
		{
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:796
		{
			sqlVAL.union.val = &AlterTableAddConstraint{ConstraintDef: sqlDollar[2].union.constraintDef()}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:800
		{
			unimplemented()
		}
	case 38:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:802
		{
			unimplemented()
		}
	case 39:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:805
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   sqlDollar[5].str,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:814
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   sqlDollar[3].str,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 41:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:824
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:828
		{
			sqlVAL.union.val = nil
		}
	case 43:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:834
		{
			sqlVAL.union.val = DropCascade
		}
	case 44:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:838
		{
			sqlVAL.union.val = DropRestrict
		}
	case 45:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:842
		{
			sqlVAL.union.val = DropDefault
		}
	case 46:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:847
		{
			unimplementedWithIssue(2473)
		}
	case 47:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:848
		{
		}
	case 48:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:851
		{
			unimplemented()
		}
	case 49:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:852
		{
		}
	case 53:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:863
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retExprs()}
		}
	case 54:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:870
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 55:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:874
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 56:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:878
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 57:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:886
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 58:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:894
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.qnames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:898
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.qnames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:904
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:908
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 62:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:914
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:918
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:924
		{
			sqlVAL.union.val = Indirection{NameIndirection(sqlDollar[2].str)}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:928
		{
			sqlVAL.union.val = append(sqlDollar[1].union.indirect(), NameIndirection(sqlDollar[3].str))
		}
	case 66:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:935
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:939
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:945
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 73:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:955
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 74:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:959
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 76:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:969
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: NameList(sqlDollar[6].union.strs()), Targets: sqlDollar[4].union.targetList()}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:976
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: NameList(sqlDollar[6].union.strs()), Targets: sqlDollar[4].union.targetList()}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:983
		{
			sqlVAL.union.val = TargetList{Tables: QualifiedNames(sqlDollar[1].union.qnames())}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:987
		{
			sqlVAL.union.val = TargetList{Tables: QualifiedNames(sqlDollar[2].union.qnames())}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:991
		{
			sqlVAL.union.val = TargetList{Databases: NameList(sqlDollar[2].union.strs())}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:998
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1001
		{
		}
	case 83:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1005
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1009
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 85:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1016
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 86:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1020
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 87:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1024
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 88:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1028
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 89:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1032
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 90:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1036
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 91:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1040
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 92:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1048
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1052
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 94:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1060
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 95:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1064
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 96:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1068
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1072
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 98:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1078
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 100:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1085
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1089
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1093
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1097
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1104
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1110
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname(), Values: sqlDollar[3].union.exprs()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1114
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname(), Values: sqlDollar[3].union.exprs()}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1118
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname()}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1122
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1129
		{
			unimplemented()
		}
	case 111:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1132
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1135
		{
			unimplemented()
		}
	case 114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1142
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1146
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1154
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1160
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1164
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1168
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 122:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1172
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1176
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1182
		{
			sqlVAL.union.val = Low
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1186
		{
			sqlVAL.union.val = Normal
		}
	case 126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1190
		{
			sqlVAL.union.val = High
		}
	case 127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1196
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1200
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 129:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1204
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1219
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1223
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1227
		{
			d, err := ParseDInterval(sqlDollar[2].str)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1237
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1241
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1246
		{
			unimplemented()
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1247
		{
			unimplemented()
		}
	case 139:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1248
		{
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1252
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1256
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1262
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1266
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1270
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.qname()}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1274
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1278
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.strs()}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1282
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1286
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1290
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1294
		{
			sqlVAL.union.val = &ShowTables{Name: sqlDollar[3].union.qname()}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1298
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1302
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1306
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1310
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 155:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1314
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.qname()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1320
		{
			sqlVAL.union.val = sqlDollar[2].union.qname()
		}
	case 157:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1324
		{
			sqlVAL.union.val = (*QualifiedName)(nil)
		}
	case 158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1330
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 159:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1335
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1341
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 161:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1345
		{
			sqlVAL.union.val = []string(nil)
		}
	case 162:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1352
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.qname(), IfNotExists: false, Defs: sqlDollar[5].union.tblDefs()}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1356
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.qname(), IfNotExists: true, Defs: sqlDollar[8].union.tblDefs()}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1363
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1369
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1373
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1379
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1383
		{ /* unimplemented */
		}
	case 171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1385
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1391
		{
			sqlVAL.union.val = newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1397
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 174:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1401
		{
			sqlVAL.union.val = []ColumnQualification(nil)
		}
	case 175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1407
		{
			sqlVAL.union.val = sqlDollar[3].union.colQual()
		}
	case 177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1411
		{
			unimplemented()
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1427
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1431
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1435
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1439
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1443
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1447
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1451
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.qname(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1460
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.idxElems(),
				Storing: sqlDollar[6].union.strs(),
			}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1468
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:    Name(sqlDollar[3].str),
					Columns: sqlDollar[5].union.idxElems(),
					Storing: sqlDollar[7].union.strs(),
				},
			}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1480
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.famElems(),
			}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1492
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1497
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 190:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1503
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1509
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[3].union.strs()),
					Storing: sqlDollar[5].union.strs(),
				},
			}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1518
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[4].union.strs()),
				},
				PrimaryKey: true,
			}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1527
		{
			unimplemented()
		}
	case 196:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1544
		{
			sqlVAL.union.val = sqlDollar[3].union.strs()
		}
	case 197:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1548
		{
			sqlVAL.union.val = []string(nil)
		}
	case 198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1554
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 199:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1558
		{
			sqlVAL.union.val = []string(nil)
		}
	case 200:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1563
		{
			unimplemented()
		}
	case 201:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1564
		{
			unimplemented()
		}
	case 202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1565
		{
			unimplemented()
		}
	case 203:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1566
		{
		}
	case 204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1573
		{
			unimplemented()
		}
	case 205:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1574
		{
			unimplemented()
		}
	case 206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1575
		{
			unimplemented()
		}
	case 207:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1576
		{
			unimplemented()
		}
	case 208:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1577
		{
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1580
		{
			unimplemented()
		}
	case 210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1583
		{
			unimplemented()
		}
	case 211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1586
		{
			unimplemented()
		}
	case 212:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1587
		{
			unimplemented()
		}
	case 213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1588
		{
			unimplemented()
		}
	case 214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1589
		{
			unimplemented()
		}
	case 215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1590
		{
			unimplemented()
		}
	case 216:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1594
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1598
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1602
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 219:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1609
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.qnames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1616
		{
			sqlVAL.union.val = &CreateIndex{
				Name:    Name(sqlDollar[4].str),
				Table:   sqlDollar[6].union.qname(),
				Unique:  sqlDollar[2].union.bool(),
				Columns: sqlDollar[8].union.idxElems(),
				Storing: sqlDollar[10].union.strs(),
			}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql.y:1626
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.qname(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.strs(),
			}
		}
	case 222:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1639
		{
			sqlVAL.union.val = true
		}
	case 223:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1643
		{
			sqlVAL.union.val = false
		}
	case 224:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1649
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1653
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1662
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1665
		{
			unimplemented()
		}
	case 228:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1666
		{
			unimplemented()
		}
	case 229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1670
		{
			sqlVAL.union.val = FamilyElemList{sqlDollar[1].union.famElem()}
		}
	case 230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1674
		{
			sqlVAL.union.val = append(sqlDollar[1].union.famElems(), sqlDollar[3].union.famElem())
		}
	case 231:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1680
		{
			sqlVAL.union.val = FamilyElem{Column: Name(sqlDollar[1].str)}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1685
		{
			unimplemented()
		}
	case 233:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1686
		{
		}
	case 234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1690
		{
			sqlVAL.union.val = Ascending
		}
	case 235:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1694
		{
			sqlVAL.union.val = Descending
		}
	case 236:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1698
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 237:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1705
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1709
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.qname(), NewName: sqlDollar[6].union.qname(), IfExists: false}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1713
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.qname(), NewName: sqlDollar[8].union.qname(), IfExists: true}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1717
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 241:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1721
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 242:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1725
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.qname(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1729
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.qname(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 244:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1733
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 245:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1737
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 246:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1743
		{
			sqlVAL.union.val = true
		}
	case 247:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1747
		{
			sqlVAL.union.val = false
		}
	case 248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1752
		{
		}
	case 249:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1753
		{
		}
	case 250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1757
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1763
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1770
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1774
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1778
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1782
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1786
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1795
		{
		}
	case 258:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1796
		{
		}
	case 259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1800
		{
			sqlVAL.str = ""
		}
	case 260:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1804
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1808
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 262:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1812
		{
			sqlVAL.str = ""
		}
	case 263:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1818
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 264:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1822
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 265:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1828
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1832
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1836
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1840
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1844
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1850
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 271:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1856
		{
			sqlVAL.union.val = &CreateDatabase{Name: Name(sqlDollar[3].str), Encoding: sqlDollar[4].union.strVal()}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1860
		{
			sqlVAL.union.val = &CreateDatabase{IfNotExists: true, Name: Name(sqlDollar[6].str), Encoding: sqlDollar[7].union.strVal()}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1866
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1869
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 275:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1879
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retExprs()
		}
	case 276:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1885
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
		}
	case 277:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1890
		{
			unimplementedWithIssue(6637)
		}
	case 278:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1892
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1897
		{
			unimplementedWithIssue(6637)
		}
	case 280:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1905
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname()}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1909
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1915
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1919
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.qnames(), Rows: sqlDollar[4].union.slct()}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1923
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1929
		{
			sqlVAL.union.val = &OnConflict{Columns: NameList(sqlDollar[3].union.strs()), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1933
		{
			sqlVAL.union.val = &OnConflict{Columns: NameList(sqlDollar[3].union.strs()), DoNothing: true}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1939
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 288:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1943
		{
			unimplemented()
		}
	case 289:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1945
		{
			sqlVAL.union.val = []string(nil)
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1951
		{
			sqlVAL.union.val = sqlDollar[2].union.selExprs()
		}
	case 291:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1955
		{
			sqlVAL.union.val = SelectExprs(nil)
		}
	case 292:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1962
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retExprs()}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1968
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1972
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1982
		{
			sqlVAL.union.val = &UpdateExpr{Names: QualifiedNames{sqlDollar[1].union.qname()}, Expr: sqlDollar[3].union.expr()}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1994
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.qnames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1998
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.qnames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2042
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2048
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2052
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2067
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2071
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2075
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2079
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2083
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2087
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2121
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.tblExprs(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2133
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.tblExprs(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2145
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        TableExprs{&AliasedTableExpr{Expr: sqlDollar[2].union.qname()}},
				tableSelect: true,
			}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2153
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2162
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2171
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2189
		{
			unimplemented()
		}
	case 320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2190
		{
			unimplemented()
		}
	case 321:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2191
		{
			unimplemented()
		}
	case 322:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2194
		{
			unimplemented()
		}
	case 323:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2195
		{
			unimplemented()
		}
	case 324:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2198
		{
			unimplemented()
		}
	case 325:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2202
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 329:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2210
		{
			unimplemented()
		}
	case 330:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2211
		{
		}
	case 331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2214
		{
		}
	case 332:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2215
		{
		}
	case 333:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2219
		{
			sqlVAL.union.val = true
		}
	case 334:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2223
		{
			sqlVAL.union.val = false
		}
	case 335:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2227
		{
			sqlVAL.union.val = false
		}
	case 336:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2233
		{
			sqlVAL.union.val = true
		}
	case 337:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2238
		{
		}
	case 338:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2239
		{
		}
	case 339:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2243
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 340:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2247
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 341:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2253
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 342:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2259
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2263
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 344:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2269
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2277
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2286
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2297
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2310
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2317
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2324
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 354:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2338
		{
		}
	case 355:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2339
		{
		}
	case 356:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2365
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 357:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2369
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2375
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 359:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2379
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 360:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2385
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 361:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2389
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2401
		{
			sqlVAL.union.val = sqlDollar[2].union.tblExprs()
		}
	case 363:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2405
		{
			sqlVAL.union.val = TableExprs(nil)
		}
	case 364:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2411
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2415
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 366:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2421
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 367:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2426
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2432
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2437
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			index := a.Index
			if index == "" {
				index = b.Index
			} else if b.Index != "" {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			noIndexJoin := a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = &IndexHints{Index: index, NoIndexJoin: noIndexJoin}
		}
	case 370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2457
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2461
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 372:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2465
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 373:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2472
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), Hints: sqlDollar[2].union.indexHints(), As: sqlDollar[3].union.aliasClause()}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2476
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, As: sqlDollar[2].union.aliasClause()}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2480
		{
			unimplemented()
		}
	case 377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2498
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 378:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2502
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2506
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2510
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2514
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astNaturalJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr()}
		}
	case 382:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2518
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astNaturalJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2524
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: NameList(sqlDollar[4].union.strs())}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2528
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2532
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: NameList(sqlDollar[3].union.strs())}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2536
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2543
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2549
		{
			sqlVAL.str = astFullJoin
		}
	case 390:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2553
		{
			sqlVAL.str = astLeftJoin
		}
	case 391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2557
		{
			sqlVAL.str = astRightJoin
		}
	case 392:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2561
		{
			sqlVAL.str = astInnerJoin
		}
	case 393:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2567
		{
		}
	case 394:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2568
		{
		}
	case 395:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2579
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: NameList(sqlDollar[3].union.strs())}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2583
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2589
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 398:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2593
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 399:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2597
		{
			sqlVAL.union.val = sqlDollar[2].union.qname()
		}
	case 400:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2601
		{
			sqlVAL.union.val = sqlDollar[3].union.qname()
		}
	case 401:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2607
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2611
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 403:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2624
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname()}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2628
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2632
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2638
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 407:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2642
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2654
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 409:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2658
		{
			unimplementedWithIssue(2115)
		}
	case 410:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2659
		{
			unimplementedWithIssue(2115)
		}
	case 411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2662
		{
			unimplementedWithIssue(2115)
		}
	case 412:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2663
		{
			unimplementedWithIssue(2115)
		}
	case 413:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2664
		{
		}
	case 419:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2672
		{
			unimplemented()
		}
	case 420:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2674
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 421:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2678
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 422:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2682
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 423:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2686
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2690
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2711
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2720
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2734
		{
			sqlVAL.union.val = nil
		}
	case 432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2741
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2745
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2749
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2753
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2757
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2761
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 438:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2765
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newFloatColType(int(prec))
		}
	case 439:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2774
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 440:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2778
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2787
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2796
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2805
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 444:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2809
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 445:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2815
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 446:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2819
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2837
		{
			n, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newIntBitType(int(n))
		}
	case 452:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2848
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 457:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2864
		{
			n, err := sqlDollar[3].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2880
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 459:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2886
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 460:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2890
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2894
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 462:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2898
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 463:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2903
		{
		}
	case 464:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2904
		{
		}
	case 465:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2909
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 466:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2913
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 467:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2917
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 468:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2921
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 469:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2925
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2930
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 471:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2935
		{
			unimplemented()
		}
	case 472:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2936
		{
			unimplemented()
		}
	case 473:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2937
		{
			unimplemented()
		}
	case 474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2938
		{
			unimplemented()
		}
	case 475:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2939
		{
			unimplemented()
		}
	case 476:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2940
		{
			unimplemented()
		}
	case 477:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2941
		{
			unimplemented()
		}
	case 478:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2942
		{
			unimplemented()
		}
	case 479:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2943
		{
			unimplemented()
		}
	case 480:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2944
		{
			unimplemented()
		}
	case 481:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2945
		{
			unimplemented()
		}
	case 482:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2946
		{
			unimplemented()
		}
	case 483:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2947
		{
			unimplemented()
		}
	case 484:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2948
		{
		}
	case 485:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2951
		{
			unimplemented()
		}
	case 486:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2952
		{
			unimplemented()
		}
	case 488:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2976
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2984
		{
			unimplemented()
		}
	case 490:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2985
		{
			unimplemented()
		}
	case 491:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2994
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2998
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3002
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3006
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3010
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3014
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3018
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3022
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3026
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3030
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3034
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3038
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3042
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3046
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3050
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3054
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3058
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3062
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3066
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3070
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3074
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3078
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3082
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3086
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3090
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3094
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3098
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3102
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3106
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3110
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3114
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3118
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3121
		{
			unimplemented()
		}
	case 524:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3123
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3127
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3131
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3135
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3139
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3143
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3147
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3151
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3155
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3159
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3163
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3167
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3171
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3175
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3179
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3183
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3200
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3209
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3213
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3217
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3221
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3225
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3229
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3233
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3237
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3241
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3245
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3249
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3253
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3257
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3261
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3265
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3269
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3273
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3277
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3281
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3285
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3289
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3293
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3297
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3301
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3305
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3309
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3321
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 570:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3326
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3330
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3336
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3340
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3344
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3350
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 578:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3354
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 579:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3358
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 580:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3366
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname()}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3370
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3373
		{
			unimplemented()
		}
	case 583:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3374
		{
			unimplemented()
		}
	case 584:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3376
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Type: All, Exprs: sqlDollar[4].union.exprs()}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3380
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Type: Distinct, Exprs: sqlDollar[4].union.exprs()}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3384
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Exprs: Exprs{StarExpr()}}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3397
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 588:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3401
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 589:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3410
		{
			unimplemented()
		}
	case 590:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3411
		{
			unimplemented()
		}
	case 591:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3415
		{
			unimplemented()
		}
	case 592:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3417
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3421
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3425
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3429
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3432
		{
			unimplemented()
		}
	case 597:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3433
		{
			unimplemented()
		}
	case 598:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3434
		{
			unimplemented()
		}
	case 599:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3435
		{
			unimplemented()
		}
	case 600:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3437
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3441
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3445
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3449
		{
			sqlVAL.union.val = &OverlayExpr{FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3453
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "STRPOS"}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3457
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3460
		{
			unimplemented()
		}
	case 607:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3462
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3466
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "LTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3470
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "RTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3474
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3478
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3482
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3486
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3490
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3494
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3498
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3504
		{
			unimplemented()
		}
	case 618:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3505
		{
		}
	case 619:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3508
		{
			unimplemented()
		}
	case 620:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3509
		{
		}
	case 621:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3513
		{
			unimplemented()
		}
	case 622:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3514
		{
		}
	case 623:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3517
		{
			unimplemented()
		}
	case 624:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3518
		{
			unimplemented()
		}
	case 625:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3521
		{
			unimplemented()
		}
	case 626:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3524
		{
			unimplemented()
		}
	case 627:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3525
		{
			unimplemented()
		}
	case 628:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3526
		{
		}
	case 629:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3530
		{
			unimplemented()
		}
	case 630:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3541
		{
			unimplemented()
		}
	case 631:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3542
		{
		}
	case 632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3545
		{
			unimplemented()
		}
	case 633:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3546
		{
		}
	case 634:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3554
		{
			unimplemented()
		}
	case 635:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3555
		{
			unimplemented()
		}
	case 636:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3556
		{
		}
	case 637:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3559
		{
			unimplemented()
		}
	case 638:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3560
		{
			unimplemented()
		}
	case 639:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3566
		{
			unimplemented()
		}
	case 640:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3567
		{
			unimplemented()
		}
	case 641:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3568
		{
			unimplemented()
		}
	case 642:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3569
		{
			unimplemented()
		}
	case 643:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3570
		{
			unimplemented()
		}
	case 644:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3581
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3585
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3589
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3595
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3599
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3605
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3646
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3650
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 652:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3656
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3660
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 654:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3666
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3670
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3674
		{
			sqlVAL.union.val = &Array{nil}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3680
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3684
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 659:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3690
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3712
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3716
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3722
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 670:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3729
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3733
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 672:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3750
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3754
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3758
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3762
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3766
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 677:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3770
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 678:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3776
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 679:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3782
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 680:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3788
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 681:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3792
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 682:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3796
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 683:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3802
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3806
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3817
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3824
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3828
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 688:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3834
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3840
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 690:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3844
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 692:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3851
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 693:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3857
		{
			sqlVAL.union.val = sqlDollar[1].union.indirectElem()
		}
	case 694:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3861
		{
			sqlVAL.union.val = sqlDollar[1].union.indirectElem()
		}
	case 695:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3865
		{
			sqlVAL.union.val = &ArrayIndirection{Begin: sqlDollar[2].union.expr()}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3869
		{
			sqlVAL.union.val = &ArrayIndirection{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr()}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3875
		{
			sqlVAL.union.val = NameIndirection(sqlDollar[2].str)
		}
	case 698:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3881
		{
			sqlVAL.union.val = qualifiedStar
		}
	case 699:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3887
		{
			sqlVAL.union.val = Indirection{sqlDollar[1].union.indirectElem()}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3891
		{
			sqlVAL.union.val = append(sqlDollar[1].union.indirect(), sqlDollar[2].union.indirectElem())
		}
	case 701:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3896
		{
		}
	case 702:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3897
		{
		}
	case 704:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3906
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3912
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3916
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 707:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3925
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 708:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3931
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3935
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 710:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3941
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3950
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3954
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3958
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 714:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3966
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3970
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 716:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3976
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3980
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 718:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3986
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3990
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 720:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4001
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4005
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4011
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.qname(), Index: Name(sqlDollar[3].str)}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4022
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4026
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: Indirection{sqlDollar[2].union.indirectElem()}}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4030
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: Indirection{sqlDollar[2].union.indirectElem()}}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4034
		{
			sqlVAL.union.val = &QualifiedName{Indirect: Indirection{unqualifiedStar}}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4040
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4044
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 729:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4050
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 730:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4053
		{
		}
	case 731:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4063
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4067
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4074
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 734:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4078
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 735:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4082
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4086
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4089
		{
			unimplemented()
		}
	case 738:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4091
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4095
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4099
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[5].str}, Type: sqlDollar[1].union.colType()}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4103
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 742:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4107
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 743:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4111
		{
			sqlVAL.union.val = DNull
		}
	case 745:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4118
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 746:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4122
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4144
		{
			sqlVAL.str = ""
		}
	case 752:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4150
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 753:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4154
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
