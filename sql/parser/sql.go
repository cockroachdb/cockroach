// Code generated by go yacc.
//line sql.y:21
package parser

import __yyfmt__ "fmt"

//line sql.y:21
import (
	"errors"

	"github.com/cockroachdb/cockroach/sql/privilege"
)

var errUnimplemented = errors.New("unimplemented")

func unimplemented() {
	panic(errUnimplemented)
}

//line sql.y:37

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new sytax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in two forms, depending on the
// type of the value being accessed. Values and pointers are directly
// type asserted from the empty interface, meaning that they will panic
// if the type assertion is incorrect. Interfaces are handled differently
// because a nil instance of an interface inserted into the empty interface
// becomes a nil instance of the empty interface and therefore will fail a
// direct type assertion. Instead, a guarded type assertion must be used,
// which returns nil if the type assertion fails.
func (u *sqlSymUnion) ival() IntVal {
	return u.val.(IntVal)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) qname() *QualifiedName {
	return u.val.(*QualifiedName)
}
func (u *sqlSymUnion) qnames() QualifiedNames {
	return u.val.(QualifiedNames)
}
func (u *sqlSymUnion) indirectElem() IndirectionElem {
	if indirectElem, ok := u.val.(IndirectionElem); ok {
		return indirectElem
	}
	return nil
}
func (u *sqlSymUnion) indirect() Indirection {
	return u.val.(Indirection)
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	if selectStmt, ok := u.val.(SelectStatement); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	if constraintDef, ok := u.val.(ConstraintTableDef); ok {
		return constraintDef
	}
	return nil
}
func (u *sqlSymUnion) tblDef() TableDef {
	if tblDef, ok := u.val.(TableDef); ok {
		return tblDef
	}
	return nil
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() ColumnQualification {
	if colQual, ok := u.val.(ColumnQualification); ok {
		return colQual
	}
	return nil
}
func (u *sqlSymUnion) colQuals() []ColumnQualification {
	return u.val.([]ColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retExprs() ReturningExprs {
	return ReturningExprs(u.val.(SelectExprs))
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	if tblExpr, ok := u.val.(TableExpr); ok {
		return tblExpr
	}
	return nil
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	if joinCond, ok := u.val.(JoinCond); ok {
		return joinCond
	}
	return nil
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	if alterTableCmd, ok := u.val.(AlterTableCmd); ok {
		return alterTableCmd
	}
	return nil
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}

//line sql.y:244
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const FCONST = 57347
const SCONST = 57348
const BCONST = 57349
const ICONST = 57350
const PARAM = 57351
const TYPECAST = 57352
const DOT_DOT = 57353
const LESS_EQUALS = 57354
const GREATER_EQUALS = 57355
const NOT_EQUALS = 57356
const ERROR = 57357
const ACTION = 57358
const ADD = 57359
const ALL = 57360
const ALTER = 57361
const ANALYSE = 57362
const ANALYZE = 57363
const AND = 57364
const ANY = 57365
const ARRAY = 57366
const AS = 57367
const ASC = 57368
const ASYMMETRIC = 57369
const AT = 57370
const BEGIN = 57371
const BETWEEN = 57372
const BIGINT = 57373
const BIT = 57374
const BLOB = 57375
const BOOL = 57376
const BOOLEAN = 57377
const BOTH = 57378
const BY = 57379
const BYTEA = 57380
const BYTES = 57381
const CASCADE = 57382
const CASE = 57383
const CAST = 57384
const CHAR = 57385
const CHARACTER = 57386
const CHARACTERISTICS = 57387
const CHECK = 57388
const COALESCE = 57389
const COLLATE = 57390
const COLLATION = 57391
const COLUMN = 57392
const COLUMNS = 57393
const COMMIT = 57394
const COMMITTED = 57395
const CONCAT = 57396
const CONFLICT = 57397
const CONSTRAINT = 57398
const COVERING = 57399
const CREATE = 57400
const CROSS = 57401
const CUBE = 57402
const CURRENT = 57403
const CURRENT_CATALOG = 57404
const CURRENT_DATE = 57405
const CURRENT_ROLE = 57406
const CURRENT_TIME = 57407
const CURRENT_TIMESTAMP = 57408
const CURRENT_USER = 57409
const CYCLE = 57410
const DATA = 57411
const DATABASE = 57412
const DATABASES = 57413
const DATE = 57414
const DAY = 57415
const DEC = 57416
const DECIMAL = 57417
const DEFAULT = 57418
const DEFERRABLE = 57419
const DELETE = 57420
const DESC = 57421
const DISTINCT = 57422
const DO = 57423
const DOUBLE = 57424
const DROP = 57425
const ELSE = 57426
const END = 57427
const ESCAPE = 57428
const EXCEPT = 57429
const EXISTS = 57430
const EXPLAIN = 57431
const EXTRACT = 57432
const FALSE = 57433
const FETCH = 57434
const FILTER = 57435
const FIRST = 57436
const FLOAT = 57437
const FOLLOWING = 57438
const FOR = 57439
const FOREIGN = 57440
const FROM = 57441
const FULL = 57442
const GRANT = 57443
const GRANTS = 57444
const GREATEST = 57445
const GROUP = 57446
const GROUPING = 57447
const HAVING = 57448
const HIGH = 57449
const HOUR = 57450
const IF = 57451
const IFNULL = 57452
const IN = 57453
const INDEX = 57454
const INITIALLY = 57455
const INNER = 57456
const INSERT = 57457
const INT = 57458
const INT64 = 57459
const INTEGER = 57460
const INTERSECT = 57461
const INTERVAL = 57462
const INTO = 57463
const IS = 57464
const ISOLATION = 57465
const JOIN = 57466
const KEY = 57467
const LATERAL = 57468
const LEADING = 57469
const LEAST = 57470
const LEFT = 57471
const LEVEL = 57472
const LIKE = 57473
const LIMIT = 57474
const LOCAL = 57475
const LOCALTIME = 57476
const LOCALTIMESTAMP = 57477
const LOW = 57478
const LSHIFT = 57479
const MATCH = 57480
const MINUTE = 57481
const MONTH = 57482
const NAME = 57483
const NAMES = 57484
const NATURAL = 57485
const NEXT = 57486
const NO = 57487
const NORMAL = 57488
const NOT = 57489
const NOTHING = 57490
const NULL = 57491
const NULLIF = 57492
const NULLS = 57493
const NUMERIC = 57494
const OF = 57495
const OFF = 57496
const OFFSET = 57497
const ON = 57498
const ONLY = 57499
const OR = 57500
const ORDER = 57501
const ORDINALITY = 57502
const OUT = 57503
const OUTER = 57504
const OVER = 57505
const OVERLAPS = 57506
const OVERLAY = 57507
const PARTIAL = 57508
const PARTITION = 57509
const PLACING = 57510
const POSITION = 57511
const PRECEDING = 57512
const PRECISION = 57513
const PRIMARY = 57514
const PRIORITY = 57515
const RANGE = 57516
const READ = 57517
const REAL = 57518
const RECURSIVE = 57519
const REF = 57520
const REFERENCES = 57521
const RENAME = 57522
const REPEATABLE = 57523
const RESTRICT = 57524
const RETURNING = 57525
const REVOKE = 57526
const RIGHT = 57527
const ROLLBACK = 57528
const ROLLUP = 57529
const ROW = 57530
const ROWS = 57531
const RSHIFT = 57532
const SEARCH = 57533
const SECOND = 57534
const SELECT = 57535
const SERIALIZABLE = 57536
const SESSION = 57537
const SESSION_USER = 57538
const SET = 57539
const SHOW = 57540
const SIMILAR = 57541
const SIMPLE = 57542
const SMALLINT = 57543
const SNAPSHOT = 57544
const SOME = 57545
const SQL = 57546
const START = 57547
const STRICT = 57548
const STRING = 57549
const STORING = 57550
const SUBSTRING = 57551
const SYMMETRIC = 57552
const TABLE = 57553
const TABLES = 57554
const TEXT = 57555
const THEN = 57556
const TIME = 57557
const TIMESTAMP = 57558
const TO = 57559
const TRAILING = 57560
const TRANSACTION = 57561
const TREAT = 57562
const TRIM = 57563
const TRUE = 57564
const TRUNCATE = 57565
const TYPE = 57566
const UNBOUNDED = 57567
const UNCOMMITTED = 57568
const UNION = 57569
const UNIQUE = 57570
const UNKNOWN = 57571
const UPDATE = 57572
const USER = 57573
const USING = 57574
const VALID = 57575
const VALIDATE = 57576
const VALUE = 57577
const VALUES = 57578
const VARCHAR = 57579
const VARIADIC = 57580
const VARYING = 57581
const WHEN = 57582
const WHERE = 57583
const WINDOW = 57584
const WITH = 57585
const WITHIN = 57586
const WITHOUT = 57587
const YEAR = 57588
const ZONE = 57589
const NOT_LA = 57590
const WITH_LA = 57591
const POSTFIXOP = 57592
const UMINUS = 57593

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"FCONST",
	"SCONST",
	"BCONST",
	"ICONST",
	"PARAM",
	"TYPECAST",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXPLAIN",
	"EXTRACT",
	"FALSE",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FOLLOWING",
	"FOR",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HOUR",
	"IF",
	"IFNULL",
	"IN",
	"INDEX",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"LATERAL",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARTIAL",
	"PARTITION",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"RENAME",
	"REPEATABLE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SNAPSHOT",
	"SOME",
	"SQL",
	"START",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"TABLE",
	"TABLES",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"USER",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:4086

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 19,
	270, 19,
	-2, 306,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 29,
	1, 277,
	156, 277,
	183, 277,
	268, 277,
	270, 277,
	-2, 287,
	-1, 40,
	1, 280,
	156, 280,
	183, 280,
	268, 280,
	270, 280,
	-2, 286,
	-1, 49,
	1, 19,
	270, 19,
	-2, 306,
	-1, 85,
	1, 136,
	270, 136,
	-2, 766,
	-1, 245,
	132, 316,
	155, 316,
	-2, 283,
	-1, 248,
	132, 315,
	155, 315,
	-2, 281,
	-1, 357,
	132, 315,
	155, 315,
	-2, 284,
	-1, 414,
	267, 714,
	-2, 709,
	-1, 415,
	267, 715,
	-2, 710,
	-1, 421,
	6, 435,
	267, 435,
	-2, 844,
	-1, 443,
	6, 405,
	-2, 821,
	-1, 444,
	6, 432,
	267, 432,
	-2, 822,
	-1, 445,
	6, 413,
	-2, 823,
	-1, 446,
	6, 412,
	-2, 824,
	-1, 447,
	6, 432,
	267, 432,
	-2, 827,
	-1, 448,
	6, 432,
	267, 432,
	-2, 828,
	-1, 449,
	6, 433,
	-2, 831,
	-1, 450,
	6, 400,
	-2, 832,
	-1, 451,
	6, 400,
	-2, 833,
	-1, 452,
	6, 415,
	-2, 836,
	-1, 453,
	6, 401,
	-2, 841,
	-1, 454,
	6, 402,
	-2, 842,
	-1, 455,
	6, 403,
	-2, 843,
	-1, 456,
	6, 400,
	-2, 847,
	-1, 457,
	6, 406,
	-2, 852,
	-1, 458,
	6, 404,
	-2, 854,
	-1, 459,
	6, 434,
	-2, 858,
	-1, 460,
	6, 430,
	267, 430,
	-2, 862,
	-1, 715,
	87, 287,
	119, 287,
	132, 287,
	155, 287,
	159, 287,
	227, 287,
	-2, 537,
	-1, 723,
	267, 694,
	-2, 684,
	-1, 917,
	12, 0,
	13, 0,
	14, 0,
	250, 0,
	251, 0,
	252, 0,
	-2, 468,
	-1, 918,
	12, 0,
	13, 0,
	14, 0,
	250, 0,
	251, 0,
	252, 0,
	-2, 469,
	-1, 919,
	12, 0,
	13, 0,
	14, 0,
	250, 0,
	251, 0,
	252, 0,
	-2, 470,
	-1, 923,
	12, 0,
	13, 0,
	14, 0,
	250, 0,
	251, 0,
	252, 0,
	-2, 474,
	-1, 924,
	12, 0,
	13, 0,
	14, 0,
	250, 0,
	251, 0,
	252, 0,
	-2, 475,
	-1, 925,
	12, 0,
	13, 0,
	14, 0,
	250, 0,
	251, 0,
	252, 0,
	-2, 476,
	-1, 928,
	30, 0,
	111, 0,
	131, 0,
	199, 0,
	248, 0,
	-2, 481,
	-1, 959,
	164, 607,
	-2, 610,
	-1, 1109,
	87, 287,
	119, 287,
	132, 287,
	155, 287,
	159, 287,
	227, 287,
	-2, 357,
	-1, 1117,
	30, 0,
	111, 0,
	131, 0,
	199, 0,
	248, 0,
	-2, 482,
	-1, 1122,
	30, 0,
	111, 0,
	131, 0,
	199, 0,
	248, 0,
	-2, 483,
	-1, 1141,
	164, 606,
	-2, 609,
	-1, 1280,
	30, 0,
	111, 0,
	131, 0,
	199, 0,
	248, 0,
	-2, 484,
	-1, 1285,
	122, 0,
	-2, 494,
	-1, 1294,
	164, 608,
	-2, 611,
	-1, 1334,
	12, 0,
	13, 0,
	14, 0,
	250, 0,
	251, 0,
	252, 0,
	-2, 518,
	-1, 1335,
	12, 0,
	13, 0,
	14, 0,
	250, 0,
	251, 0,
	252, 0,
	-2, 519,
	-1, 1336,
	12, 0,
	13, 0,
	14, 0,
	250, 0,
	251, 0,
	252, 0,
	-2, 520,
	-1, 1340,
	12, 0,
	13, 0,
	14, 0,
	250, 0,
	251, 0,
	252, 0,
	-2, 524,
	-1, 1341,
	12, 0,
	13, 0,
	14, 0,
	250, 0,
	251, 0,
	252, 0,
	-2, 525,
	-1, 1342,
	12, 0,
	13, 0,
	14, 0,
	250, 0,
	251, 0,
	252, 0,
	-2, 526,
	-1, 1435,
	122, 0,
	-2, 495,
	-1, 1439,
	30, 0,
	111, 0,
	131, 0,
	199, 0,
	248, 0,
	-2, 498,
	-1, 1440,
	30, 0,
	111, 0,
	131, 0,
	199, 0,
	248, 0,
	-2, 500,
	-1, 1519,
	30, 0,
	111, 0,
	131, 0,
	199, 0,
	248, 0,
	-2, 499,
	-1, 1520,
	30, 0,
	111, 0,
	131, 0,
	199, 0,
	248, 0,
	-2, 501,
	-1, 1528,
	122, 0,
	-2, 527,
	-1, 1565,
	122, 0,
	-2, 528,
	-1, 1610,
	30, 0,
	131, 0,
	199, 0,
	248, 0,
	-2, 820,
}

const sqlNprod = 954
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 18939

var sqlAct = [...]int{

	956, 1609, 1630, 1592, 1593, 1570, 1476, 1594, 1608, 801,
	1536, 413, 1498, 249, 1509, 1286, 1421, 412, 1372, 1314,
	1105, 857, 844, 1404, 407, 718, 463, 473, 501, 1403,
	1415, 794, 13, 405, 1055, 276, 865, 1260, 841, 1199,
	1198, 1144, 1287, 720, 1269, 480, 976, 653, 1097, 802,
	753, 86, 377, 843, 1093, 254, 28, 780, 61, 944,
	771, 941, 749, 966, 972, 868, 1108, 256, 39, 529,
	18, 514, 669, 483, 347, 10, 6, 1011, 90, 485,
	836, 28, 387, 248, 290, 675, 378, 348, 511, 540,
	461, 474, 297, 39, 556, 673, 63, 59, 475, 846,
	259, 62, 64, 293, 360, 28, 866, 361, 359, 531,
	295, 83, 40, 510, 527, 68, 503, 39, 41, 286,
	1500, 477, 477, 795, 371, 478, 478, 253, 476, 476,
	969, 799, 1606, 1600, 503, 1497, 861, 1599, 1014, 301,
	861, 1591, 1586, 1567, 1438, 861, 1438, 1137, 253, 1558,
	298, 302, 246, 1064, 272, 324, 1561, 279, 245, 861,
	1555, 388, 287, 1497, 1546, 970, 1521, 1497, 325, 1438,
	1516, 1506, 1496, 861, 1497, 1497, 1481, 1480, 1461, 861,
	861, 1137, 1441, 1437, 677, 1137, 1438, 45, 1382, 1290,
	1251, 861, 1137, 502, 676, 1247, 971, 968, 502, 1216,
	1214, 1213, 1217, 1137, 1137, 47, 676, 1212, 1141, 273,
	1137, 1137, 273, 678, 282, 1139, 1138, 273, 1347, 292,
	1140, 1137, 862, 768, 508, 861, 767, 509, 1293, 1077,
	48, 680, 769, 1095, 45, 1079, 861, 43, 816, 1143,
	506, 952, 856, 44, 678, 830, 372, 648, 45, 973,
	647, 679, 47, 521, 520, 318, 271, 693, 504, 358,
	1137, 42, 680, 49, 478, 555, 47, 336, 379, 379,
	1607, 45, 1605, 1562, 678, 415, 504, 48, 481, 1505,
	1466, 1462, 679, 1454, 43, 1453, 1448, 357, 1447, 47,
	44, 48, 680, 352, 1171, 1446, 1445, 1432, 43, 1399,
	1362, 472, 1357, 967, 44, 1356, 89, 468, 60, 949,
	1355, 1297, 679, 1275, 48, 1259, 1219, 1218, 1206, 89,
	89, 467, 798, 89, 1115, 1537, 89, 89, 89, 1197,
	1170, 89, 89, 89, 89, 1167, 300, 477, 1165, 1154,
	694, 478, 1148, 1081, 476, 42, 351, 502, 1078, 1026,
	983, 982, 371, 370, 89, 89, 550, 1316, 726, 1557,
	1538, 721, 1430, 661, 663, 650, 1064, 1530, 1512, 246,
	670, 694, 1503, 1495, 1518, 245, 678, 1473, 677, 649,
	1459, 1426, 1411, 709, 710, 711, 712, 713, 950, 1171,
	1284, 287, 716, 695, 680, 1274, 1257, 1256, 1254, 1231,
	1230, 273, 1196, 1162, 494, 1161, 1153, 301, 301, 1134,
	1398, 1130, 729, 946, 679, 559, 754, 757, 1040, 302,
	302, 1185, 1039, 1021, 695, 981, 723, 560, 860, 759,
	747, 746, 745, 518, 517, 744, 470, 743, 742, 741,
	740, 551, 739, 738, 544, 737, 273, 496, 736, 640,
	735, 734, 644, 643, 645, 733, 724, 689, 686, 687,
	688, 681, 682, 683, 684, 685, 659, 657, 658, 722,
	1277, 42, 462, 671, 1186, 651, 277, 246, 764, 375,
	246, 246, 1517, 665, 1276, 469, 666, 667, 689, 686,
	687, 688, 681, 682, 683, 684, 685, 364, 1040, 1402,
	762, 1065, 755, 694, 330, 1116, 343, 758, 1171, 774,
	751, 752, 331, 731, 1416, 89, 795, 89, 1317, 89,
	1157, 257, 681, 682, 683, 684, 685, 977, 797, 750,
	717, 1061, 1576, 1619, 89, 1545, 346, 1390, 822, 1073,
	420, 61, 1172, 1173, 1174, 1175, 1176, 997, 785, 787,
	89, 28, 234, 760, 53, 559, 695, 559, 811, 295,
	89, 89, 1620, 89, 28, 678, 266, 560, 235, 560,
	486, 763, 487, 765, 243, 1489, 39, 1488, 1243, 63,
	465, 1223, 464, 680, 62, 64, 777, 486, 301, 487,
	810, 54, 781, 89, 969, 89, 824, 790, 1222, 298,
	302, 817, 814, 679, 300, 300, 813, 819, 823, 818,
	1152, 812, 558, 89, 820, 89, 89, 1544, 89, 727,
	1429, 1171, 328, 688, 681, 682, 683, 684, 685, 970,
	89, 1151, 1150, 761, 559, 987, 488, 1172, 1173, 1174,
	1175, 1176, 1149, 773, 784, 486, 560, 487, 89, 1242,
	835, 89, 273, 488, 1118, 793, 933, 329, 815, 805,
	971, 968, 773, 1171, 809, 1184, 792, 292, 772, 791,
	417, 907, 943, 943, 240, 1578, 977, 1233, 379, 1478,
	497, 1306, 908, 909, 910, 911, 912, 913, 914, 915,
	916, 917, 918, 919, 920, 921, 922, 923, 924, 925,
	926, 927, 928, 877, 990, 897, 55, 863, 381, 973,
	826, 488, 1072, 973, 1619, 241, 828, 1627, 783, 854,
	855, 871, 1303, 839, 1056, 1378, 1539, 1596, 1054, 829,
	492, 906, 244, 1051, 973, 838, 984, 827, 995, 991,
	1005, 1007, 1012, 1015, 1016, 1017, 762, 89, 1185, 367,
	368, 762, 558, 1304, 558, 1379, 491, 840, 1174, 1175,
	1176, 1074, 89, 252, 870, 957, 89, 967, 481, 89,
	992, 989, 349, 89, 782, 89, 89, 327, 89, 1588,
	373, 89, 89, 89, 326, 300, 559, 489, 89, 89,
	1185, 1234, 1025, 1597, 1589, 251, 1057, 948, 560, 1035,
	344, 1186, 947, 877, 489, 897, 973, 1127, 484, 503,
	1240, 748, 273, 1029, 1526, 683, 684, 685, 1125, 1633,
	1626, 1037, 714, 993, 253, 1160, 1374, 1598, 1375, 770,
	1479, 558, 1270, 56, 327, 253, 1595, 1618, 273, 1067,
	51, 1616, 1414, 1186, 1378, 1059, 1373, 850, 339, 1030,
	345, 1377, 319, 317, 1371, 1120, 942, 670, 1380, 363,
	953, 958, 489, 961, 1050, 1180, 1177, 1178, 1179, 1172,
	1173, 1174, 1175, 1176, 1379, 57, 1123, 988, 1006, 1483,
	1128, 939, 52, 1060, 1018, 1019, 1020, 1063, 1069, 1457,
	931, 1066, 937, 1088, 1625, 1080, 1068, 1071, 1076, 362,
	1075, 1082, 1070, 250, 1482, 1471, 1111, 1376, 1225, 301,
	1179, 1172, 1173, 1174, 1175, 1176, 28, 1386, 89, 66,
	1034, 302, 363, 1343, 1631, 1640, 89, 89, 39, 1086,
	1117, 1090, 1031, 1104, 1122, 1110, 1089, 1091, 851, 1389,
	656, 1114, 755, 652, 758, 1374, 1388, 1375, 935, 1124,
	934, 504, 89, 1136, 940, 89, 1126, 1302, 526, 69,
	292, 1632, 1458, 1145, 1571, 362, 752, 751, 292, 646,
	1377, 932, 1096, 1472, 58, 1142, 1634, 1380, 1158, 74,
	522, 50, 1163, 558, 70, 326, 1042, 524, 1385, 1041,
	1344, 929, 1121, 1119, 285, 1424, 1345, 525, 1639, 1265,
	1264, 251, 71, 716, 354, 1261, 1094, 980, 1529, 1012,
	1012, 1012, 1083, 1100, 1100, 1456, 73, 1387, 1200, 1283,
	1166, 1129, 1156, 936, 821, 676, 1376, 1103, 1103, 1221,
	938, 273, 342, 340, 337, 284, 1201, 1098, 1268, 732,
	1228, 642, 1101, 1101, 979, 1369, 89, 89, 89, 1238,
	1236, 1224, 89, 1084, 852, 89, 1099, 379, 69, 930,
	849, 89, 89, 89, 89, 89, 481, 89, 89, 1096,
	507, 505, 664, 500, 89, 1237, 89, 1239, 74, 493,
	1220, 490, 89, 70, 1311, 1133, 1203, 1204, 1205, 1135,
	1490, 89, 89, 1245, 72, 1248, 1227, 89, 1102, 1102,
	365, 71, 1146, 1147, 1620, 333, 300, 269, 77, 1244,
	1100, 1250, 1241, 546, 1249, 73, 773, 1279, 858, 1280,
	1492, 773, 788, 89, 1103, 89, 89, 786, 89, 1255,
	1285, 75, 1263, 1253, 1098, 1266, 1229, 89, 1295, 1101,
	789, 1195, 89, 89, 1295, 89, 1271, 1272, 1267, 1246,
	3, 896, 1208, 1099, 678, 877, 678, 897, 1312, 1299,
	1300, 1301, 366, 1500, 1541, 1564, 1423, 1321, 1262, 270,
	1323, 859, 680, 369, 1559, 334, 800, 65, 672, 519,
	1113, 1637, 1638, 1171, 1296, 233, 678, 320, 322, 877,
	1431, 897, 679, 72, 679, 1102, 877, 1363, 897, 1309,
	278, 1352, 1353, 831, 1318, 76, 832, 1320, 1278, 1322,
	1359, 1360, 1361, 1215, 1324, 1305, 1307, 1308, 1024, 876,
	236, 237, 238, 1023, 1022, 974, 805, 877, 833, 897,
	75, 1443, 1310, 834, 725, 239, 1477, 67, 1350, 641,
	1351, 338, 1422, 1450, 1587, 1354, 1159, 1368, 1525, 1508,
	978, 896, 730, 23, 1406, 393, 1370, 273, 1364, 899,
	273, 898, 1417, 1226, 845, 561, 1409, 547, 536, 1409,
	416, 341, 1408, 1291, 530, 1408, 539, 986, 466, 418,
	1400, 874, 419, 1401, 1435, 875, 400, 1413, 1410, 1439,
	1440, 1410, 756, 406, 1442, 1412, 1428, 872, 296, 1444,
	1436, 1419, 1420, 28, 803, 1425, 975, 1155, 728, 877,
	392, 897, 398, 397, 1449, 954, 89, 87, 1452, 876,
	389, 323, 81, 82, 1058, 1397, 1383, 1384, 796, 853,
	260, 260, 660, 1235, 275, 1348, 242, 275, 281, 275,
	89, 1168, 275, 288, 275, 87, 1358, 1004, 1460, 873,
	996, 994, 985, 89, 350, 89, 479, 89, 804, 899,
	89, 898, 1455, 376, 335, 87, 87, 864, 1112, 374,
	1427, 89, 668, 268, 89, 267, 549, 537, 548, 842,
	542, 332, 89, 523, 825, 89, 495, 1540, 1575, 1484,
	1232, 46, 1468, 17, 16, 1467, 15, 14, 12, 11,
	1087, 1418, 1393, 9, 8, 7, 22, 21, 1502, 20,
	1409, 5, 4, 2, 1, 877, 1408, 897, 0, 1501,
	1486, 1487, 0, 1409, 1513, 1470, 273, 273, 1491, 1408,
	273, 1499, 1410, 1485, 1519, 1520, 89, 1511, 1493, 0,
	0, 1504, 0, 0, 0, 1410, 0, 998, 552, 873,
	0, 0, 0, 0, 0, 0, 0, 0, 1524, 0,
	0, 1514, 0, 877, 1533, 897, 0, 0, 0, 0,
	0, 0, 0, 0, 1535, 1531, 0, 0, 0, 0,
	0, 1522, 0, 0, 877, 0, 897, 0, 1534, 1131,
	1132, 0, 554, 0, 0, 0, 481, 0, 89, 89,
	89, 0, 0, 1548, 0, 553, 89, 89, 0, 1409,
	0, 0, 89, 1556, 89, 1408, 89, 89, 89, 89,
	1550, 1549, 1515, 1552, 0, 0, 275, 762, 87, 0,
	355, 1410, 89, 0, 0, 0, 0, 0, 0, 1563,
	89, 89, 1475, 0, 89, 260, 1566, 1192, 1193, 1194,
	89, 89, 1551, 0, 0, 877, 0, 897, 0, 0,
	0, 275, 1582, 0, 0, 0, 1580, 0, 1581, 1409,
	0, 275, 275, 1584, 498, 1408, 1507, 1602, 1579, 1585,
	0, 0, 0, 0, 0, 1601, 273, 1583, 1603, 1613,
	1613, 1410, 89, 1577, 0, 0, 0, 0, 1614, 1617,
	0, 1615, 1604, 896, 515, 0, 515, 1621, 1560, 0,
	0, 1613, 1624, 1623, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1635, 87, 1636, 515, 87, 0, 87,
	543, 538, 0, 1572, 1573, 1622, 0, 896, 1613, 1641,
	0, 655, 1554, 0, 896, 89, 0, 89, 0, 89,
	998, 998, 0, 0, 0, 0, 89, 0, 0, 260,
	0, 0, 674, 0, 0, 0, 0, 1281, 1282, 678,
	0, 876, 0, 0, 0, 896, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 680, 0, 0,
	89, 0, 89, 0, 0, 1171, 0, 0, 0, 0,
	89, 1574, 89, 1590, 0, 876, 0, 679, 998, 998,
	998, 899, 876, 898, 0, 0, 0, 0, 0, 0,
	1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334,
	1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 0, 1346,
	805, 0, 0, 876, 0, 899, 0, 898, 0, 0,
	0, 0, 899, 0, 898, 394, 29, 896, 275, 0,
	0, 0, 0, 0, 89, 89, 0, 0, 89, 0,
	0, 0, 0, 778, 0, 0, 89, 275, 1171, 0,
	275, 29, 0, 899, 275, 898, 807, 808, 89, 275,
	0, 0, 275, 87, 87, 247, 694, 0, 255, 515,
	674, 873, 0, 678, 0, 29, 0, 0, 0, 0,
	0, 0, 0, 89, 89, 89, 255, 89, 0, 0,
	0, 680, 1185, 705, 0, 876, 0, 0, 998, 998,
	0, 0, 0, 0, 89, 873, 0, 0, 0, 0,
	0, 679, 873, 0, 0, 0, 0, 693, 0, 695,
	0, 0, 0, 0, 89, 0, 0, 0, 0, 0,
	0, 0, 0, 896, 0, 899, 0, 898, 0, 0,
	0, 0, 0, 873, 0, 1186, 0, 0, 0, 0,
	0, 998, 998, 998, 998, 998, 998, 998, 998, 998,
	998, 998, 998, 998, 998, 998, 998, 998, 998, 0,
	998, 0, 0, 0, 706, 1185, 0, 0, 0, 0,
	0, 896, 0, 0, 686, 687, 688, 681, 682, 683,
	684, 685, 0, 0, 701, 0, 0, 1474, 0, 837,
	694, 876, 896, 0, 0, 0, 0, 275, 778, 1180,
	1177, 1178, 1179, 1172, 1173, 1174, 1175, 1176, 0, 0,
	0, 0, 0, 0, 0, 873, 0, 0, 1186, 0,
	0, 0, 0, 275, 0, 0, 87, 0, 0, 0,
	0, 899, 0, 898, 0, 0, 0, 0, 1171, 876,
	1187, 1188, 1189, 695, 0, 0, 0, 0, 0, 0,
	1434, 0, 703, 0, 0, 678, 0, 0, 0, 0,
	876, 0, 0, 896, 1528, 0, 0, 0, 0, 0,
	0, 0, 247, 680, 0, 0, 0, 0, 0, 899,
	0, 898, 1184, 1177, 1178, 1179, 1172, 1173, 1174, 1175,
	1176, 0, 0, 679, 0, 0, 0, 0, 0, 0,
	899, 702, 898, 0, 0, 0, 0, 689, 686, 687,
	688, 681, 682, 683, 684, 685, 0, 275, 1032, 1033,
	0, 873, 0, 778, 0, 0, 1038, 0, 0, 0,
	0, 876, 1043, 1044, 1046, 1048, 1049, 1565, 1052, 1053,
	0, 0, 0, 0, 0, 275, 0, 1062, 998, 0,
	1190, 0, 0, 275, 678, 0, 696, 697, 698, 0,
	0, 0, 837, 515, 0, 1185, 699, 0, 837, 873,
	0, 899, 680, 898, 705, 0, 0, 0, 0, 0,
	247, 0, 694, 247, 247, 0, 0, 0, 0, 0,
	873, 0, 679, 0, 655, 0, 87, 275, 693, 1085,
	0, 0, 0, 0, 0, 0, 0, 715, 1092, 0,
	0, 719, 0, 1107, 1107, 0, 275, 0, 1186, 0,
	0, 0, 0, 0, 0, 998, 0, 678, 0, 696,
	697, 698, 0, 0, 0, 695, 0, 0, 0, 699,
	0, 0, 0, 0, 0, 680, 0, 705, 0, 0,
	0, 0, 0, 0, 0, 706, 0, 0, 0, 0,
	0, 873, 0, 0, 0, 679, 704, 0, 0, 0,
	0, 693, 0, 0, 0, 701, 0, 0, 1181, 1182,
	1183, 694, 1180, 1177, 1178, 1179, 1172, 1173, 1174, 1175,
	1176, 0, 0, 0, 0, 0, 0, 0, 998, 0,
	0, 0, 700, 681, 682, 683, 684, 685, 0, 0,
	0, 29, 0, 678, 0, 696, 697, 698, 0, 0,
	0, 0, 223, 0, 29, 699, 0, 0, 706, 0,
	0, 680, 0, 705, 695, 0, 232, 0, 0, 704,
	0, 0, 0, 703, 0, 0, 0, 0, 701, 0,
	0, 679, 0, 0, 694, 0, 0, 693, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 225,
	0, 0, 0, 0, 0, 700, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 674, 224, 226,
	0, 0, 702, 0, 690, 691, 692, 0, 689, 686,
	687, 688, 681, 682, 683, 684, 685, 695, 0, 0,
	1027, 275, 0, 0, 706, 0, 703, 1028, 0, 0,
	227, 0, 0, 0, 1252, 704, 778, 0, 655, 0,
	228, 1258, 0, 0, 701, 0, 0, 0, 0, 0,
	694, 0, 275, 0, 0, 275, 0, 0, 0, 0,
	0, 0, 0, 1273, 0, 0, 1107, 0, 0, 0,
	0, 700, 0, 0, 0, 702, 0, 690, 691, 692,
	0, 689, 686, 687, 688, 681, 682, 683, 684, 685,
	0, 0, 0, 0, 0, 0, 0, 0, 1463, 0,
	0, 0, 867, 695, 0, 0, 0, 0, 0, 0,
	0, 0, 703, 0, 0, 0, 0, 1315, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 945, 0, 0, 0, 0, 0, 0, 0,
	229, 0, 0, 230, 0, 0, 0, 231, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 702, 0, 690, 691, 692, 0, 689, 686, 687,
	688, 681, 682, 683, 684, 685, 0, 0, 0, 1366,
	1367, 778, 0, 0, 1211, 0, 0, 674, 674, 0,
	0, 0, 0, 1391, 0, 1392, 0, 275, 1394, 1395,
	1396, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	19, 1405, 0, 778, 1405, 0, 0, 0, 0, 0,
	32, 275, 275, 0, 255, 275, 678, 0, 696, 697,
	698, 674, 1107, 0, 0, 0, 0, 0, 699, 0,
	0, 0, 0, 34, 680, 0, 705, 0, 0, 38,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 678,
	0, 696, 697, 698, 679, 0, 0, 0, 0, 0,
	693, 0, 0, 1451, 24, 0, 35, 680, 0, 705,
	25, 0, 0, 0, 0, 0, 29, 0, 0, 0,
	0, 0, 26, 0, 0, 1109, 0, 679, 0, 0,
	0, 0, 0, 693, 678, 0, 696, 697, 698, 0,
	0, 0, 0, 0, 0, 0, 699, 0, 0, 0,
	0, 0, 680, 0, 705, 0, 778, 706, 1469, 0,
	87, 0, 0, 0, 0, 0, 0, 275, 704, 0,
	0, 0, 679, 0, 0, 0, 0, 701, 693, 0,
	0, 0, 0, 694, 0, 1405, 0, 0, 945, 0,
	706, 0, 0, 0, 0, 0, 0, 0, 1405, 0,
	0, 275, 715, 1510, 700, 27, 0, 36, 0, 0,
	701, 275, 0, 674, 45, 0, 694, 0, 30, 31,
	0, 0, 0, 0, 0, 0, 33, 0, 0, 0,
	0, 0, 47, 0, 0, 706, 695, 0, 0, 0,
	0, 0, 0, 0, 37, 703, 704, 0, 0, 0,
	0, 0, 0, 0, 0, 701, 0, 48, 715, 0,
	0, 694, 0, 0, 43, 0, 0, 0, 0, 695,
	44, 0, 0, 0, 0, 1542, 1543, 0, 703, 1547,
	0, 0, 700, 0, 1405, 0, 0, 87, 42, 0,
	0, 0, 0, 0, 702, 0, 690, 691, 692, 674,
	689, 686, 687, 688, 681, 682, 683, 684, 685, 0,
	0, 0, 0, 0, 695, 0, 0, 1210, 0, 0,
	0, 0, 0, 703, 674, 674, 275, 702, 87, 690,
	691, 692, 0, 689, 686, 687, 688, 681, 682, 683,
	684, 685, 0, 0, 1405, 1510, 0, 0, 0, 0,
	0, 867, 0, 0, 867, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 275, 0, 0, 0, 0,
	0, 0, 702, 0, 690, 691, 692, 0, 689, 686,
	687, 688, 681, 682, 683, 684, 685, 0, 0, 0,
	0, 0, 0, 88, 0, 1209, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 91, 92, 0, 93, 0,
	0, 0, 0, 0, 0, 0, 0, 94, 95, 181,
	182, 183, 96, 184, 185, 0, 97, 186, 187, 98,
	0, 0, 188, 189, 190, 0, 191, 0, 0, 0,
	99, 100, 101, 0, 102, 0, 103, 0, 0, 104,
	105, 0, 0, 0, 0, 0, 0, 106, 107, 108,
	109, 192, 110, 193, 194, 0, 0, 111, 0, 0,
	0, 112, 113, 0, 0, 0, 0, 195, 114, 196,
	0, 0, 115, 116, 197, 117, 0, 0, 0, 0,
	0, 118, 198, 0, 199, 0, 119, 120, 200, 201,
	0, 0, 0, 29, 121, 202, 203, 204, 0, 205,
	0, 0, 122, 0, 123, 0, 0, 206, 0, 124,
	867, 867, 261, 0, 867, 125, 0, 126, 127, 128,
	129, 262, 0, 130, 131, 132, 0, 133, 0, 207,
	134, 208, 135, 136, 0, 0, 274, 0, 0, 137,
	209, 0, 138, 0, 210, 139, 140, 0, 211, 141,
	212, 0, 142, 143, 144, 213, 145, 146, 0, 147,
	148, 149, 0, 150, 0, 151, 152, 214, 153, 0,
	154, 155, 45, 156, 263, 0, 157, 158, 0, 159,
	215, 160, 0, 161, 162, 164, 216, 163, 217, 0,
	47, 165, 166, 0, 265, 218, 0, 0, 264, 219,
	220, 0, 167, 168, 169, 170, 0, 0, 171, 172,
	0, 0, 173, 174, 175, 303, 222, 0, 176, 0,
	0, 0, 43, 177, 178, 179, 180, 0, 44, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 869, 0, 1494, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 557,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	867, 91, 92, 562, 93, 563, 564, 565, 566, 567,
	568, 569, 570, 94, 95, 181, 182, 183, 96, 184,
	185, 571, 97, 186, 187, 98, 572, 573, 188, 189,
	190, 574, 191, 575, 304, 576, 99, 100, 101, 0,
	102, 577, 103, 578, 305, 104, 105, 579, 580, 581,
	582, 583, 584, 106, 107, 108, 109, 192, 110, 193,
	194, 585, 586, 111, 587, 588, 589, 112, 113, 590,
	591, 715, 592, 195, 114, 196, 593, 594, 115, 116,
	197, 117, 595, 596, 597, 306, 598, 118, 198, 599,
	199, 600, 119, 120, 200, 201, 601, 602, 603, 307,
	121, 202, 203, 204, 604, 205, 605, 308, 122, 309,
	123, 606, 607, 206, 310, 124, 311, 608, 261, 609,
	610, 125, 0, 126, 127, 128, 129, 262, 312, 130,
	131, 132, 611, 133, 612, 207, 134, 208, 135, 136,
	613, 614, 615, 616, 617, 137, 209, 313, 138, 314,
	210, 139, 140, 618, 211, 141, 212, 619, 142, 143,
	144, 213, 145, 146, 620, 147, 148, 149, 621, 150,
	315, 151, 152, 214, 153, 0, 154, 155, 622, 156,
	263, 623, 157, 158, 316, 159, 215, 160, 624, 161,
	162, 164, 216, 163, 217, 625, 626, 165, 166, 627,
	265, 218, 628, 629, 264, 219, 220, 630, 167, 168,
	169, 170, 631, 632, 171, 172, 633, 634, 173, 174,
	175, 221, 222, 635, 176, 636, 637, 638, 639, 177,
	178, 179, 180, 0, 557, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 766, 91, 92, 562, 93,
	563, 564, 565, 566, 567, 568, 569, 570, 94, 95,
	181, 182, 183, 96, 184, 185, 571, 97, 186, 187,
	98, 572, 573, 188, 189, 190, 574, 191, 575, 304,
	576, 99, 100, 101, 0, 102, 577, 103, 578, 305,
	104, 105, 579, 580, 581, 582, 583, 584, 106, 107,
	108, 109, 192, 110, 193, 194, 585, 586, 111, 587,
	588, 589, 112, 113, 590, 591, 0, 592, 195, 114,
	196, 593, 594, 115, 116, 197, 117, 595, 596, 597,
	306, 598, 118, 198, 599, 199, 600, 119, 120, 200,
	201, 601, 602, 603, 307, 121, 202, 203, 204, 604,
	205, 605, 308, 122, 309, 123, 606, 607, 206, 310,
	124, 311, 608, 261, 609, 610, 125, 0, 126, 127,
	128, 129, 262, 312, 130, 131, 132, 611, 133, 612,
	207, 134, 208, 135, 136, 613, 614, 615, 616, 617,
	137, 209, 313, 138, 314, 210, 139, 140, 618, 211,
	141, 212, 619, 142, 143, 144, 213, 145, 146, 620,
	147, 148, 149, 621, 150, 315, 151, 152, 214, 153,
	0, 154, 155, 622, 156, 263, 623, 157, 158, 316,
	159, 215, 160, 624, 161, 162, 164, 216, 163, 217,
	625, 626, 165, 166, 627, 265, 218, 628, 629, 264,
	219, 220, 630, 167, 168, 169, 170, 631, 632, 171,
	172, 633, 634, 173, 174, 175, 221, 222, 635, 176,
	636, 637, 638, 639, 177, 178, 179, 180, 414, 402,
	403, 404, 401, 390, 0, 0, 0, 0, 0, 0,
	91, 92, 963, 93, 0, 0, 0, 0, 396, 0,
	0, 0, 94, 95, 181, 443, 444, 96, 445, 446,
	0, 97, 186, 187, 98, 411, 429, 447, 448, 190,
	0, 439, 0, 422, 0, 99, 100, 101, 0, 102,
	0, 103, 0, 305, 104, 105, 0, 423, 425, 0,
	424, 426, 106, 107, 108, 109, 449, 110, 450, 451,
	0, 0, 111, 0, 964, 0, 442, 113, 0, 0,
	0, 0, 395, 114, 430, 409, 0, 115, 116, 452,
	117, 0, 0, 0, 306, 0, 118, 440, 0, 199,
	0, 119, 120, 436, 438, 0, 0, 0, 307, 121,
	453, 454, 455, 0, 421, 0, 308, 122, 309, 123,
	0, 0, 441, 310, 124, 311, 0, 261, 0, 0,
	125, 0, 126, 127, 128, 129, 262, 312, 130, 131,
	132, 385, 133, 410, 437, 134, 456, 135, 136, 0,
	0, 0, 0, 0, 137, 209, 313, 138, 314, 431,
	139, 140, 0, 432, 141, 212, 0, 142, 143, 144,
	457, 145, 146, 0, 147, 148, 149, 0, 150, 315,
	151, 152, 399, 153, 0, 154, 155, 0, 156, 263,
	427, 157, 158, 316, 159, 458, 160, 0, 161, 162,
	164, 216, 163, 433, 0, 0, 165, 166, 0, 265,
	459, 0, 0, 264, 434, 435, 408, 167, 168, 169,
	170, 0, 0, 171, 172, 428, 0, 173, 174, 175,
	221, 460, 962, 176, 0, 0, 0, 0, 177, 178,
	179, 180, 386, 0, 414, 402, 403, 404, 401, 390,
	0, 0, 382, 383, 965, 0, 91, 92, 384, 93,
	0, 391, 960, 0, 396, 0, 0, 0, 94, 95,
	181, 443, 444, 96, 445, 446, 0, 97, 186, 187,
	98, 411, 429, 447, 448, 190, 0, 439, 0, 422,
	0, 99, 100, 101, 0, 102, 0, 103, 0, 305,
	104, 105, 0, 423, 425, 0, 424, 426, 106, 107,
	108, 109, 449, 110, 450, 451, 482, 0, 111, 0,
	0, 0, 442, 113, 0, 0, 0, 0, 395, 114,
	430, 409, 0, 115, 116, 452, 117, 0, 0, 0,
	306, 0, 118, 440, 0, 199, 0, 119, 120, 436,
	438, 0, 0, 0, 307, 121, 453, 454, 455, 0,
	421, 0, 308, 122, 309, 123, 0, 0, 441, 310,
	124, 311, 0, 261, 0, 0, 125, 0, 126, 127,
	128, 129, 262, 312, 130, 131, 132, 385, 133, 410,
	437, 134, 456, 135, 136, 0, 0, 0, 0, 0,
	137, 209, 313, 138, 314, 431, 139, 140, 0, 432,
	141, 212, 0, 142, 143, 144, 457, 145, 146, 0,
	147, 148, 149, 0, 150, 315, 151, 152, 399, 153,
	0, 154, 155, 45, 156, 263, 427, 157, 158, 316,
	159, 458, 160, 0, 161, 162, 164, 216, 163, 433,
	0, 47, 165, 166, 0, 265, 459, 0, 0, 264,
	434, 435, 408, 167, 168, 169, 170, 0, 0, 171,
	172, 428, 0, 173, 174, 175, 303, 460, 0, 176,
	0, 0, 0, 43, 177, 178, 179, 180, 386, 44,
	414, 402, 403, 404, 401, 390, 0, 0, 382, 383,
	0, 0, 91, 92, 384, 93, 0, 391, 0, 0,
	396, 0, 0, 0, 94, 95, 181, 443, 444, 96,
	445, 446, 0, 97, 186, 187, 98, 411, 429, 447,
	448, 190, 0, 439, 0, 422, 0, 99, 100, 101,
	0, 102, 0, 103, 0, 305, 104, 105, 0, 423,
	425, 0, 424, 426, 106, 107, 108, 109, 449, 110,
	450, 451, 0, 0, 111, 0, 0, 0, 442, 113,
	0, 0, 0, 0, 395, 114, 430, 409, 0, 115,
	116, 452, 117, 0, 0, 0, 306, 0, 118, 440,
	0, 199, 0, 119, 120, 436, 438, 0, 0, 0,
	307, 121, 453, 454, 455, 0, 421, 0, 308, 122,
	309, 123, 0, 0, 441, 310, 124, 311, 0, 261,
	0, 0, 125, 0, 126, 127, 128, 129, 262, 312,
	130, 131, 132, 385, 133, 410, 437, 134, 456, 135,
	136, 0, 0, 0, 0, 0, 137, 209, 313, 138,
	314, 431, 139, 140, 0, 432, 141, 212, 0, 142,
	143, 144, 457, 145, 146, 0, 147, 148, 149, 0,
	150, 315, 151, 152, 399, 153, 0, 154, 155, 45,
	156, 263, 427, 157, 158, 316, 159, 458, 160, 0,
	161, 162, 164, 216, 163, 433, 0, 47, 165, 166,
	0, 265, 459, 0, 0, 264, 434, 435, 408, 167,
	168, 169, 170, 0, 0, 171, 172, 428, 0, 173,
	174, 175, 303, 460, 0, 176, 0, 0, 0, 43,
	177, 178, 179, 180, 386, 44, 414, 402, 403, 404,
	401, 390, 0, 0, 382, 383, 0, 0, 91, 92,
	384, 93, 0, 391, 0, 0, 396, 0, 0, 0,
	94, 95, 181, 443, 444, 96, 445, 446, 1008, 97,
	186, 187, 98, 411, 429, 447, 448, 190, 0, 439,
	0, 422, 0, 99, 100, 101, 0, 102, 0, 103,
	0, 305, 104, 105, 0, 423, 425, 0, 424, 426,
	106, 107, 108, 109, 449, 110, 450, 451, 0, 0,
	111, 0, 0, 0, 442, 113, 0, 0, 0, 0,
	395, 114, 430, 409, 0, 115, 116, 452, 117, 0,
	0, 1013, 306, 0, 118, 440, 0, 199, 0, 119,
	120, 436, 438, 0, 0, 0, 307, 121, 453, 454,
	455, 0, 421, 0, 308, 122, 309, 123, 0, 1009,
	441, 310, 124, 311, 0, 261, 0, 0, 125, 0,
	126, 127, 128, 129, 262, 312, 130, 131, 132, 385,
	133, 410, 437, 134, 456, 135, 136, 0, 0, 0,
	0, 0, 137, 209, 313, 138, 314, 431, 139, 140,
	0, 432, 141, 212, 0, 142, 143, 144, 457, 145,
	146, 0, 147, 148, 149, 0, 150, 315, 151, 152,
	399, 153, 0, 154, 155, 0, 156, 263, 427, 157,
	158, 316, 159, 458, 160, 0, 161, 162, 164, 216,
	163, 433, 0, 0, 165, 166, 0, 265, 459, 0,
	1010, 264, 434, 435, 408, 167, 168, 169, 170, 0,
	0, 171, 172, 428, 0, 173, 174, 175, 221, 460,
	0, 176, 0, 0, 0, 0, 177, 178, 179, 180,
	386, 0, 414, 402, 403, 404, 401, 390, 0, 0,
	382, 383, 0, 0, 91, 92, 384, 93, 0, 391,
	0, 0, 396, 0, 0, 0, 94, 95, 181, 443,
	444, 96, 445, 446, 0, 97, 186, 187, 98, 411,
	429, 447, 448, 190, 0, 439, 0, 422, 0, 99,
	100, 101, 0, 102, 0, 103, 0, 305, 104, 105,
	0, 423, 425, 0, 424, 426, 106, 107, 108, 109,
	449, 110, 450, 451, 0, 0, 111, 0, 0, 0,
	442, 113, 0, 0, 0, 0, 395, 114, 430, 409,
	0, 115, 116, 452, 117, 0, 0, 0, 306, 0,
	118, 440, 0, 199, 0, 119, 120, 436, 438, 0,
	0, 0, 307, 121, 453, 454, 455, 0, 421, 0,
	308, 122, 309, 123, 0, 0, 441, 310, 124, 311,
	0, 261, 0, 0, 125, 0, 126, 127, 128, 129,
	262, 312, 130, 131, 132, 385, 133, 410, 437, 134,
	456, 135, 136, 0, 0, 0, 0, 0, 137, 209,
	313, 138, 314, 431, 139, 140, 0, 432, 141, 212,
	0, 142, 143, 144, 457, 145, 146, 0, 147, 148,
	149, 0, 150, 315, 151, 152, 399, 153, 0, 154,
	155, 0, 156, 263, 427, 157, 158, 316, 159, 458,
	160, 0, 161, 162, 164, 216, 163, 433, 0, 0,
	165, 166, 0, 265, 459, 0, 0, 264, 434, 435,
	408, 167, 168, 169, 170, 0, 0, 171, 172, 428,
	0, 173, 174, 175, 221, 460, 0, 176, 0, 0,
	0, 0, 177, 178, 179, 180, 386, 0, 414, 402,
	403, 404, 401, 390, 0, 0, 382, 383, 0, 0,
	91, 92, 384, 93, 0, 391, 1349, 0, 396, 0,
	0, 0, 94, 95, 181, 443, 444, 96, 445, 446,
	0, 97, 186, 187, 98, 411, 429, 447, 448, 190,
	0, 439, 0, 422, 0, 99, 100, 101, 0, 102,
	0, 103, 0, 305, 104, 105, 0, 423, 425, 0,
	424, 426, 106, 107, 108, 109, 449, 110, 450, 451,
	0, 0, 111, 0, 0, 0, 442, 113, 0, 0,
	0, 0, 395, 114, 430, 409, 0, 115, 116, 452,
	117, 0, 0, 0, 306, 0, 118, 440, 0, 199,
	0, 119, 120, 436, 438, 0, 0, 0, 307, 121,
	453, 454, 455, 0, 421, 0, 308, 122, 309, 123,
	0, 0, 441, 310, 124, 311, 0, 261, 0, 0,
	125, 0, 126, 127, 128, 129, 262, 312, 130, 131,
	132, 385, 133, 410, 437, 134, 456, 135, 136, 0,
	0, 0, 0, 0, 137, 209, 313, 138, 314, 431,
	139, 140, 0, 432, 141, 212, 0, 142, 143, 144,
	457, 145, 146, 0, 147, 148, 149, 0, 150, 315,
	151, 152, 399, 153, 0, 154, 155, 0, 156, 263,
	427, 157, 158, 316, 159, 458, 160, 0, 161, 162,
	164, 216, 163, 433, 0, 0, 165, 166, 0, 265,
	459, 0, 0, 264, 434, 435, 408, 167, 168, 169,
	170, 0, 0, 171, 172, 428, 0, 173, 174, 175,
	221, 460, 0, 176, 0, 0, 0, 0, 177, 178,
	179, 180, 386, 0, 414, 402, 403, 404, 401, 390,
	0, 0, 382, 383, 0, 0, 91, 92, 384, 93,
	0, 391, 1292, 0, 396, 0, 0, 0, 94, 95,
	181, 443, 444, 96, 445, 446, 0, 97, 186, 187,
	98, 411, 429, 447, 448, 190, 0, 439, 0, 422,
	0, 99, 100, 101, 0, 102, 0, 103, 0, 305,
	104, 105, 0, 423, 425, 0, 424, 426, 106, 107,
	108, 109, 449, 110, 450, 451, 0, 0, 111, 0,
	0, 0, 442, 113, 0, 0, 0, 0, 395, 114,
	430, 409, 0, 115, 116, 452, 117, 0, 0, 0,
	306, 0, 118, 440, 0, 199, 0, 119, 120, 436,
	438, 0, 0, 0, 307, 121, 453, 454, 455, 0,
	421, 0, 308, 122, 309, 123, 0, 0, 441, 310,
	124, 311, 0, 261, 0, 0, 125, 0, 126, 127,
	128, 129, 262, 312, 130, 131, 132, 385, 133, 410,
	437, 134, 456, 135, 136, 0, 0, 0, 0, 0,
	137, 209, 313, 138, 314, 431, 139, 140, 0, 432,
	141, 212, 0, 142, 143, 144, 457, 145, 146, 0,
	147, 148, 149, 0, 150, 315, 151, 152, 399, 153,
	0, 154, 155, 0, 156, 263, 427, 157, 158, 316,
	159, 458, 160, 0, 161, 162, 164, 216, 163, 433,
	0, 0, 165, 166, 0, 265, 459, 0, 0, 264,
	434, 435, 408, 167, 168, 169, 170, 0, 0, 171,
	172, 428, 0, 173, 174, 175, 221, 460, 0, 176,
	0, 0, 0, 0, 177, 178, 179, 180, 386, 0,
	414, 402, 403, 404, 401, 390, 0, 0, 382, 383,
	0, 0, 91, 92, 384, 93, 0, 391, 959, 0,
	396, 0, 0, 0, 94, 95, 181, 443, 444, 96,
	445, 446, 0, 97, 186, 187, 98, 411, 429, 447,
	448, 190, 0, 439, 0, 422, 0, 99, 100, 101,
	0, 102, 0, 103, 0, 305, 104, 105, 0, 423,
	425, 0, 424, 426, 106, 107, 108, 109, 449, 110,
	450, 451, 0, 0, 111, 0, 0, 0, 442, 113,
	0, 0, 0, 0, 395, 114, 430, 409, 0, 115,
	116, 452, 117, 0, 0, 0, 306, 0, 118, 440,
	0, 199, 0, 119, 120, 436, 438, 0, 0, 0,
	307, 121, 453, 454, 455, 0, 421, 0, 308, 122,
	309, 123, 0, 0, 441, 310, 124, 311, 0, 261,
	0, 0, 125, 0, 126, 127, 128, 129, 262, 312,
	130, 131, 132, 385, 133, 410, 437, 134, 456, 135,
	136, 0, 0, 0, 0, 0, 137, 209, 313, 138,
	314, 431, 139, 140, 0, 432, 141, 212, 0, 142,
	143, 144, 457, 145, 146, 0, 147, 148, 149, 0,
	150, 315, 151, 152, 399, 153, 0, 154, 155, 0,
	156, 263, 427, 157, 158, 316, 159, 458, 160, 0,
	161, 162, 164, 216, 163, 433, 0, 0, 165, 166,
	0, 265, 459, 0, 0, 264, 434, 435, 408, 167,
	168, 169, 170, 0, 0, 171, 172, 428, 0, 173,
	174, 175, 221, 460, 0, 176, 0, 0, 0, 0,
	177, 178, 179, 180, 386, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 382, 383, 0, 0, 0, 0,
	384, 721, 955, 391, 414, 402, 403, 404, 401, 390,
	0, 0, 0, 0, 0, 0, 91, 92, 0, 93,
	0, 0, 0, 0, 396, 0, 0, 0, 94, 95,
	181, 443, 444, 96, 445, 446, 0, 97, 186, 187,
	98, 411, 429, 447, 448, 190, 0, 439, 0, 422,
	0, 99, 100, 101, 0, 102, 0, 103, 0, 305,
	104, 105, 0, 423, 425, 0, 424, 426, 106, 107,
	108, 109, 449, 110, 450, 451, 0, 0, 111, 0,
	0, 0, 442, 113, 0, 0, 0, 0, 395, 114,
	430, 409, 0, 115, 116, 452, 117, 0, 0, 0,
	306, 0, 118, 440, 0, 199, 0, 119, 120, 436,
	438, 0, 0, 0, 307, 121, 453, 454, 455, 0,
	421, 0, 308, 122, 309, 123, 0, 0, 441, 310,
	124, 311, 0, 261, 0, 0, 125, 0, 126, 127,
	128, 129, 262, 312, 130, 131, 132, 385, 133, 410,
	437, 134, 456, 135, 136, 0, 0, 0, 0, 0,
	137, 209, 313, 138, 314, 431, 139, 140, 0, 432,
	141, 212, 0, 142, 143, 144, 457, 145, 146, 0,
	147, 148, 149, 0, 150, 315, 151, 152, 399, 153,
	0, 154, 155, 0, 156, 263, 427, 157, 158, 316,
	159, 458, 160, 0, 161, 162, 164, 216, 163, 433,
	0, 0, 165, 166, 0, 265, 459, 0, 0, 264,
	434, 435, 408, 167, 168, 169, 170, 0, 0, 171,
	172, 428, 0, 173, 174, 175, 221, 460, 1298, 176,
	0, 0, 0, 0, 177, 178, 179, 180, 386, 0,
	414, 402, 403, 404, 401, 390, 0, 0, 382, 383,
	0, 0, 91, 92, 384, 93, 0, 391, 0, 0,
	396, 0, 0, 0, 94, 95, 181, 443, 444, 96,
	445, 446, 0, 97, 186, 187, 98, 411, 429, 447,
	448, 190, 0, 439, 0, 422, 0, 99, 100, 101,
	0, 102, 0, 103, 0, 305, 104, 105, 0, 423,
	425, 0, 424, 426, 106, 107, 108, 109, 449, 110,
	450, 451, 482, 0, 111, 0, 0, 0, 442, 113,
	0, 0, 0, 0, 395, 114, 430, 409, 0, 115,
	116, 452, 117, 0, 0, 0, 306, 0, 118, 440,
	0, 199, 0, 119, 120, 436, 438, 0, 0, 0,
	307, 121, 453, 454, 455, 0, 421, 0, 308, 122,
	309, 123, 0, 0, 441, 310, 124, 311, 0, 261,
	0, 0, 125, 0, 126, 127, 128, 129, 262, 312,
	130, 131, 132, 385, 133, 410, 437, 134, 456, 135,
	136, 0, 0, 0, 0, 0, 137, 209, 313, 138,
	314, 431, 139, 140, 0, 432, 141, 212, 0, 142,
	143, 144, 457, 145, 146, 0, 147, 148, 149, 0,
	150, 315, 151, 152, 399, 153, 0, 154, 155, 0,
	156, 263, 427, 157, 158, 316, 159, 458, 160, 0,
	161, 162, 164, 216, 163, 433, 0, 0, 165, 166,
	0, 265, 459, 0, 0, 264, 434, 435, 408, 167,
	168, 169, 170, 0, 0, 171, 172, 428, 0, 173,
	174, 175, 221, 460, 0, 176, 0, 0, 0, 0,
	177, 178, 179, 180, 386, 0, 414, 402, 403, 404,
	401, 390, 0, 0, 382, 383, 0, 0, 91, 92,
	384, 93, 0, 391, 0, 0, 396, 0, 0, 0,
	94, 95, 181, 443, 444, 96, 445, 446, 0, 97,
	186, 187, 98, 411, 429, 447, 448, 190, 0, 439,
	0, 422, 0, 99, 100, 101, 0, 102, 0, 103,
	0, 305, 104, 105, 0, 423, 425, 0, 424, 426,
	106, 107, 108, 109, 449, 110, 450, 451, 0, 0,
	111, 0, 0, 0, 442, 113, 0, 0, 0, 0,
	395, 114, 430, 409, 0, 115, 116, 452, 117, 0,
	0, 0, 306, 0, 118, 440, 0, 199, 0, 119,
	120, 436, 438, 0, 0, 0, 307, 121, 453, 454,
	455, 0, 421, 0, 308, 122, 309, 123, 0, 0,
	441, 310, 124, 311, 0, 261, 0, 0, 125, 0,
	126, 127, 128, 129, 262, 312, 130, 131, 132, 385,
	133, 410, 437, 134, 456, 135, 136, 0, 0, 0,
	0, 0, 137, 209, 313, 138, 314, 431, 139, 140,
	0, 432, 141, 212, 0, 142, 143, 144, 457, 145,
	146, 0, 147, 148, 149, 0, 150, 315, 151, 152,
	399, 153, 0, 154, 155, 0, 156, 263, 427, 157,
	158, 316, 159, 458, 160, 0, 161, 162, 164, 216,
	163, 433, 0, 0, 165, 166, 0, 265, 459, 0,
	0, 264, 434, 435, 408, 167, 168, 169, 170, 0,
	0, 171, 172, 428, 0, 173, 174, 175, 221, 460,
	0, 176, 0, 0, 0, 0, 177, 178, 179, 180,
	386, 0, 414, 402, 403, 404, 401, 390, 0, 0,
	382, 383, 380, 0, 91, 92, 384, 93, 0, 391,
	0, 0, 396, 0, 0, 0, 94, 95, 181, 443,
	444, 96, 445, 446, 0, 97, 186, 187, 98, 411,
	429, 447, 448, 190, 0, 439, 0, 422, 0, 99,
	100, 101, 0, 102, 0, 103, 0, 305, 104, 105,
	0, 423, 425, 0, 424, 426, 106, 107, 108, 109,
	449, 110, 450, 451, 0, 0, 111, 0, 0, 0,
	442, 113, 0, 0, 0, 0, 395, 114, 430, 409,
	0, 115, 116, 452, 117, 0, 0, 1013, 306, 0,
	118, 440, 0, 199, 0, 119, 120, 436, 438, 0,
	0, 0, 307, 121, 453, 454, 455, 0, 421, 0,
	308, 122, 309, 123, 0, 0, 441, 310, 124, 311,
	0, 261, 0, 0, 125, 0, 126, 127, 128, 129,
	262, 312, 130, 131, 132, 385, 133, 410, 437, 134,
	456, 135, 136, 0, 0, 0, 0, 0, 137, 209,
	313, 138, 314, 431, 139, 140, 0, 432, 141, 212,
	0, 142, 143, 144, 457, 145, 146, 0, 147, 148,
	149, 0, 150, 315, 151, 152, 399, 153, 0, 154,
	155, 0, 156, 263, 427, 157, 158, 316, 159, 458,
	160, 0, 161, 162, 164, 216, 163, 433, 0, 0,
	165, 166, 0, 265, 459, 0, 0, 264, 434, 435,
	408, 167, 168, 169, 170, 0, 0, 171, 172, 428,
	0, 173, 174, 175, 221, 460, 0, 176, 0, 0,
	0, 0, 177, 178, 179, 180, 386, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 382, 383, 0, 0,
	0, 0, 384, 0, 0, 391, 414, 402, 403, 404,
	401, 390, 0, 0, 0, 0, 0, 0, 91, 92,
	662, 93, 0, 0, 0, 0, 396, 0, 0, 0,
	94, 95, 181, 443, 444, 96, 445, 446, 0, 97,
	186, 187, 98, 411, 429, 447, 448, 190, 0, 439,
	0, 422, 0, 99, 100, 101, 0, 102, 0, 103,
	0, 305, 104, 105, 0, 423, 425, 0, 424, 426,
	106, 107, 108, 109, 449, 110, 450, 451, 0, 0,
	111, 0, 0, 0, 442, 113, 0, 0, 0, 0,
	395, 114, 430, 409, 0, 115, 116, 452, 117, 0,
	0, 0, 306, 0, 118, 440, 0, 199, 0, 119,
	120, 436, 438, 0, 0, 0, 307, 121, 453, 454,
	455, 0, 421, 0, 308, 122, 309, 123, 0, 0,
	441, 310, 124, 311, 0, 261, 0, 0, 125, 0,
	126, 127, 128, 129, 262, 312, 130, 131, 132, 385,
	133, 410, 437, 134, 456, 135, 136, 0, 0, 0,
	0, 0, 137, 209, 313, 138, 314, 431, 139, 140,
	0, 432, 141, 212, 0, 142, 143, 144, 457, 145,
	146, 0, 147, 148, 149, 0, 150, 315, 151, 152,
	399, 153, 0, 154, 155, 0, 156, 263, 427, 157,
	158, 316, 159, 458, 160, 0, 161, 162, 164, 216,
	163, 433, 0, 0, 165, 166, 0, 265, 459, 0,
	0, 264, 434, 435, 408, 167, 168, 169, 170, 0,
	0, 171, 172, 428, 0, 173, 174, 175, 221, 460,
	0, 176, 0, 0, 0, 0, 177, 178, 179, 180,
	386, 0, 414, 402, 403, 404, 401, 390, 0, 0,
	382, 383, 0, 0, 91, 92, 384, 93, 0, 391,
	0, 0, 396, 0, 0, 0, 94, 95, 181, 443,
	444, 96, 445, 446, 0, 97, 186, 187, 98, 411,
	429, 447, 448, 190, 0, 439, 0, 422, 0, 99,
	100, 101, 0, 102, 0, 103, 0, 305, 104, 1612,
	0, 423, 425, 0, 424, 426, 106, 107, 108, 109,
	449, 110, 450, 451, 0, 0, 111, 0, 0, 0,
	442, 113, 0, 0, 0, 0, 395, 114, 430, 409,
	0, 115, 116, 452, 117, 0, 0, 0, 306, 0,
	118, 440, 0, 199, 0, 119, 120, 436, 438, 0,
	0, 0, 307, 121, 453, 454, 455, 0, 421, 0,
	308, 122, 309, 123, 0, 0, 441, 310, 124, 311,
	0, 261, 0, 0, 125, 0, 126, 127, 128, 129,
	262, 312, 130, 131, 132, 385, 133, 410, 437, 134,
	456, 135, 136, 0, 0, 0, 0, 0, 137, 209,
	313, 138, 314, 431, 139, 140, 0, 432, 141, 212,
	0, 142, 143, 144, 457, 145, 146, 0, 147, 148,
	149, 0, 150, 315, 151, 152, 399, 153, 0, 154,
	155, 0, 156, 263, 427, 157, 158, 316, 159, 458,
	160, 0, 161, 162, 164, 216, 163, 433, 0, 0,
	165, 166, 0, 265, 459, 0, 0, 264, 434, 435,
	408, 167, 168, 1611, 170, 0, 0, 171, 172, 428,
	0, 173, 174, 175, 221, 460, 0, 176, 0, 0,
	0, 0, 177, 178, 179, 180, 386, 0, 414, 402,
	403, 404, 401, 390, 0, 0, 382, 383, 0, 0,
	91, 92, 384, 93, 0, 391, 0, 0, 396, 0,
	0, 0, 94, 95, 1610, 443, 444, 96, 445, 446,
	0, 97, 186, 187, 98, 411, 429, 447, 448, 190,
	0, 439, 0, 422, 0, 99, 100, 101, 0, 102,
	0, 103, 0, 305, 104, 1612, 0, 423, 425, 0,
	424, 426, 106, 107, 108, 109, 449, 110, 450, 451,
	0, 0, 111, 0, 0, 0, 442, 113, 0, 0,
	0, 0, 395, 114, 430, 409, 0, 115, 116, 452,
	117, 0, 0, 0, 306, 0, 118, 440, 0, 199,
	0, 119, 120, 436, 438, 0, 0, 0, 307, 121,
	453, 454, 455, 0, 421, 0, 308, 122, 309, 123,
	0, 0, 441, 310, 124, 311, 0, 261, 0, 0,
	125, 0, 126, 127, 128, 129, 262, 312, 130, 131,
	132, 385, 133, 410, 437, 134, 456, 135, 136, 0,
	0, 0, 0, 0, 137, 209, 313, 138, 314, 431,
	139, 140, 0, 432, 141, 212, 0, 142, 143, 144,
	457, 145, 146, 0, 147, 148, 149, 0, 150, 315,
	151, 152, 399, 153, 0, 154, 155, 0, 156, 263,
	427, 157, 158, 316, 159, 458, 160, 0, 161, 162,
	164, 216, 163, 433, 0, 0, 165, 166, 0, 265,
	459, 0, 0, 264, 434, 435, 408, 167, 168, 1611,
	170, 0, 0, 171, 172, 428, 0, 173, 174, 175,
	221, 460, 0, 176, 0, 0, 0, 0, 177, 178,
	179, 180, 386, 0, 414, 402, 403, 404, 401, 390,
	0, 0, 382, 383, 0, 0, 91, 92, 384, 93,
	0, 391, 0, 0, 396, 0, 0, 0, 94, 95,
	181, 443, 444, 96, 445, 446, 0, 97, 186, 187,
	98, 411, 429, 447, 448, 190, 0, 439, 0, 422,
	0, 99, 100, 101, 0, 102, 0, 103, 0, 305,
	104, 105, 0, 423, 425, 0, 424, 426, 106, 107,
	108, 109, 449, 110, 450, 451, 0, 0, 111, 0,
	0, 0, 442, 113, 0, 0, 0, 0, 395, 114,
	430, 409, 0, 115, 116, 452, 117, 0, 0, 0,
	306, 0, 118, 440, 0, 199, 0, 119, 120, 436,
	438, 0, 0, 0, 307, 121, 453, 454, 455, 0,
	421, 0, 308, 122, 309, 123, 0, 0, 441, 310,
	124, 311, 0, 261, 0, 0, 125, 0, 126, 127,
	128, 129, 262, 312, 130, 131, 132, 385, 133, 410,
	437, 134, 456, 135, 136, 0, 0, 0, 0, 0,
	137, 209, 313, 138, 314, 431, 139, 140, 0, 432,
	141, 212, 0, 142, 143, 144, 457, 145, 146, 0,
	147, 148, 149, 0, 150, 315, 151, 152, 399, 153,
	0, 154, 155, 0, 156, 263, 427, 157, 158, 316,
	159, 458, 160, 0, 161, 162, 164, 216, 163, 433,
	0, 0, 165, 166, 0, 265, 459, 0, 0, 264,
	434, 435, 408, 167, 168, 169, 170, 0, 0, 171,
	172, 428, 0, 173, 174, 175, 221, 460, 0, 176,
	0, 0, 0, 0, 177, 178, 179, 180, 386, 0,
	414, 402, 403, 404, 401, 390, 0, 0, 382, 383,
	0, 0, 91, 92, 384, 93, 0, 391, 0, 0,
	396, 0, 0, 0, 94, 95, 181, 443, 444, 96,
	445, 446, 0, 97, 186, 187, 98, 411, 429, 447,
	448, 190, 0, 439, 0, 422, 0, 99, 100, 101,
	0, 102, 0, 103, 0, 305, 104, 105, 0, 423,
	425, 0, 424, 426, 106, 107, 108, 109, 449, 110,
	450, 451, 0, 0, 111, 0, 0, 0, 442, 113,
	0, 0, 0, 0, 395, 114, 430, 409, 0, 115,
	116, 452, 117, 0, 0, 0, 306, 0, 118, 440,
	0, 199, 0, 119, 120, 436, 438, 0, 0, 0,
	307, 121, 453, 454, 455, 0, 421, 0, 308, 122,
	309, 123, 0, 0, 441, 310, 124, 311, 0, 261,
	0, 0, 125, 0, 126, 127, 128, 129, 262, 312,
	130, 131, 132, 0, 133, 410, 437, 134, 456, 135,
	136, 0, 0, 0, 0, 0, 137, 209, 313, 138,
	314, 431, 139, 140, 0, 432, 141, 212, 0, 142,
	143, 144, 457, 145, 146, 0, 147, 148, 149, 0,
	150, 315, 151, 152, 1003, 153, 0, 154, 155, 0,
	156, 263, 427, 157, 158, 316, 159, 458, 160, 0,
	161, 162, 164, 216, 163, 433, 0, 0, 165, 166,
	0, 265, 459, 0, 0, 264, 434, 435, 408, 167,
	168, 169, 170, 0, 0, 171, 172, 428, 0, 173,
	174, 175, 221, 460, 0, 176, 0, 0, 0, 0,
	177, 178, 179, 180, 414, 402, 403, 404, 401, 390,
	0, 0, 0, 0, 999, 1000, 91, 92, 0, 93,
	1001, 0, 0, 1002, 396, 0, 0, 0, 94, 95,
	0, 443, 444, 96, 445, 446, 0, 97, 186, 187,
	98, 411, 429, 447, 448, 190, 0, 439, 0, 422,
	0, 99, 100, 101, 0, 102, 0, 103, 0, 305,
	104, 1612, 0, 423, 425, 0, 424, 426, 106, 107,
	108, 109, 449, 110, 450, 451, 0, 0, 111, 0,
	0, 0, 442, 113, 0, 0, 0, 0, 395, 114,
	430, 409, 0, 115, 116, 452, 117, 0, 0, 0,
	306, 0, 118, 440, 0, 199, 0, 119, 120, 436,
	438, 0, 0, 0, 307, 121, 453, 454, 455, 0,
	421, 0, 0, 122, 309, 123, 0, 0, 441, 310,
	124, 0, 0, 261, 0, 0, 125, 0, 126, 127,
	128, 129, 262, 312, 130, 131, 132, 385, 133, 410,
	437, 134, 456, 135, 136, 0, 0, 0, 0, 0,
	137, 209, 313, 138, 314, 431, 139, 140, 0, 432,
	141, 212, 0, 142, 143, 144, 457, 145, 146, 0,
	147, 148, 149, 0, 150, 315, 151, 152, 399, 153,
	0, 154, 155, 0, 156, 263, 427, 157, 158, 0,
	159, 458, 160, 0, 161, 162, 164, 216, 163, 433,
	0, 0, 165, 166, 0, 265, 459, 0, 0, 264,
	434, 435, 408, 167, 168, 1611, 170, 0, 0, 171,
	172, 428, 0, 173, 174, 175, 221, 460, 0, 176,
	0, 0, 0, 0, 177, 178, 179, 180, 414, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 382, 383,
	91, 92, 0, 93, 384, 0, 0, 391, 0, 0,
	0, 0, 94, 95, 181, 182, 183, 96, 184, 185,
	0, 97, 186, 187, 98, 0, 429, 188, 189, 190,
	0, 439, 0, 422, 0, 99, 100, 101, 0, 102,
	0, 103, 0, 305, 104, 105, 0, 423, 425, 0,
	424, 426, 106, 107, 108, 109, 192, 110, 193, 194,
	0, 0, 111, 0, 0, 0, 112, 113, 0, 0,
	0, 0, 195, 114, 430, 0, 0, 115, 116, 197,
	117, 0, 0, 0, 306, 0, 118, 440, 0, 199,
	0, 119, 120, 436, 438, 0, 0, 0, 307, 121,
	202, 203, 204, 0, 205, 0, 308, 122, 309, 123,
	0, 0, 441, 310, 124, 311, 0, 261, 0, 0,
	125, 0, 126, 127, 128, 129, 262, 312, 130, 131,
	132, 0, 133, 0, 437, 134, 208, 135, 136, 0,
	0, 0, 0, 0, 137, 209, 313, 138, 314, 431,
	139, 140, 0, 432, 141, 212, 0, 142, 143, 144,
	213, 145, 146, 0, 147, 148, 149, 0, 150, 315,
	151, 152, 214, 153, 0, 154, 155, 0, 156, 263,
	427, 157, 158, 316, 159, 215, 160, 0, 161, 162,
	164, 216, 163, 433, 0, 0, 165, 166, 0, 265,
	218, 0, 0, 264, 434, 435, 0, 167, 168, 169,
	170, 0, 0, 171, 172, 428, 0, 173, 174, 175,
	221, 222, 0, 176, 0, 0, 0, 0, 177, 178,
	179, 180, 299, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 91, 92, 0, 93, 0, 0,
	0, 1407, 0, 0, 0, 0, 94, 95, 181, 182,
	183, 96, 184, 185, 0, 97, 186, 187, 98, 0,
	0, 188, 189, 190, 0, 191, 0, 304, 0, 99,
	100, 101, 0, 102, 0, 103, 0, 305, 104, 105,
	0, 0, 0, 0, 0, 0, 106, 107, 108, 109,
	192, 110, 193, 194, 0, 0, 111, 0, 0, 0,
	112, 113, 0, 0, 0, 0, 195, 114, 196, 0,
	0, 115, 116, 197, 117, 0, 0, 0, 306, 0,
	118, 198, 0, 199, 0, 119, 120, 200, 201, 0,
	0, 0, 307, 121, 202, 203, 204, 0, 205, 0,
	308, 122, 309, 123, 0, 0, 206, 310, 124, 311,
	0, 261, 0, 0, 125, 0, 126, 127, 128, 129,
	262, 312, 130, 131, 132, 0, 133, 0, 207, 134,
	208, 135, 136, 0, 0, 0, 0, 0, 137, 209,
	313, 138, 314, 210, 139, 140, 0, 211, 141, 212,
	0, 142, 143, 144, 213, 145, 146, 0, 147, 148,
	149, 0, 150, 315, 151, 152, 214, 153, 0, 154,
	155, 45, 156, 263, 0, 157, 158, 316, 159, 215,
	160, 0, 161, 162, 164, 216, 163, 217, 0, 47,
	165, 166, 0, 265, 218, 0, 0, 264, 219, 220,
	0, 167, 168, 169, 170, 0, 0, 171, 172, 0,
	0, 173, 174, 175, 303, 222, 0, 176, 0, 0,
	0, 43, 177, 178, 179, 180, 0, 44, 299, 537,
	541, 0, 542, 532, 0, 0, 0, 0, 0, 0,
	91, 92, 0, 93, 0, 42, 0, 0, 0, 0,
	0, 0, 94, 95, 181, 182, 183, 96, 184, 185,
	0, 97, 186, 187, 98, 0, 0, 188, 189, 190,
	0, 191, 0, 304, 0, 99, 100, 101, 0, 102,
	0, 103, 0, 305, 104, 105, 0, 0, 0, 0,
	0, 0, 106, 107, 108, 109, 192, 110, 193, 194,
	545, 0, 111, 0, 0, 0, 112, 113, 0, 0,
	0, 0, 195, 114, 196, 534, 0, 115, 116, 197,
	117, 0, 0, 0, 306, 0, 118, 198, 0, 199,
	0, 119, 120, 200, 201, 0, 0, 0, 307, 121,
	202, 203, 204, 0, 205, 0, 308, 122, 309, 123,
	0, 0, 206, 310, 124, 311, 0, 261, 0, 0,
	125, 0, 126, 127, 128, 129, 262, 312, 130, 131,
	132, 0, 133, 0, 207, 134, 208, 135, 136, 0,
	535, 0, 0, 0, 137, 209, 313, 138, 314, 210,
	139, 140, 0, 211, 141, 212, 0, 142, 143, 144,
	213, 145, 146, 0, 147, 148, 149, 0, 150, 315,
	151, 152, 214, 153, 0, 154, 155, 0, 156, 263,
	0, 157, 158, 316, 159, 215, 160, 0, 161, 162,
	164, 216, 163, 217, 0, 0, 165, 166, 0, 265,
	218, 0, 0, 264, 219, 220, 533, 167, 168, 169,
	170, 0, 0, 171, 172, 0, 0, 173, 174, 175,
	221, 222, 0, 176, 0, 0, 0, 0, 177, 178,
	179, 180, 299, 537, 541, 0, 542, 532, 0, 0,
	0, 0, 543, 538, 91, 92, 0, 93, 0, 0,
	0, 0, 0, 0, 0, 0, 94, 95, 181, 182,
	183, 96, 184, 185, 0, 97, 186, 187, 98, 0,
	0, 188, 189, 190, 0, 191, 0, 304, 0, 99,
	100, 101, 0, 102, 0, 103, 0, 305, 104, 105,
	0, 0, 0, 0, 0, 0, 106, 107, 108, 109,
	192, 110, 193, 194, 528, 0, 111, 0, 0, 0,
	112, 113, 0, 0, 0, 0, 195, 114, 196, 534,
	0, 115, 116, 197, 117, 0, 0, 0, 306, 0,
	118, 198, 0, 199, 0, 119, 120, 200, 201, 0,
	0, 0, 307, 121, 202, 203, 204, 0, 205, 0,
	308, 122, 309, 123, 0, 0, 206, 310, 124, 311,
	0, 261, 0, 0, 125, 0, 126, 127, 128, 129,
	262, 312, 130, 131, 132, 0, 133, 0, 207, 134,
	208, 135, 136, 0, 535, 0, 0, 0, 137, 209,
	313, 138, 314, 210, 139, 140, 0, 211, 141, 212,
	0, 142, 143, 144, 213, 145, 146, 0, 147, 148,
	149, 0, 150, 315, 151, 152, 214, 153, 0, 154,
	155, 0, 156, 263, 0, 157, 158, 316, 159, 215,
	160, 0, 161, 162, 164, 216, 163, 217, 0, 0,
	165, 166, 0, 265, 218, 0, 0, 264, 219, 220,
	533, 167, 168, 169, 170, 0, 0, 171, 172, 0,
	0, 173, 174, 175, 221, 222, 0, 176, 0, 0,
	0, 0, 177, 178, 179, 180, 299, 537, 541, 0,
	542, 532, 0, 0, 0, 0, 543, 538, 91, 92,
	0, 93, 0, 0, 0, 0, 0, 0, 0, 0,
	94, 95, 181, 182, 183, 96, 184, 185, 0, 97,
	186, 187, 98, 0, 0, 188, 189, 190, 0, 191,
	0, 304, 0, 99, 100, 101, 0, 102, 0, 103,
	0, 305, 104, 105, 0, 0, 0, 0, 0, 0,
	106, 107, 108, 109, 192, 110, 193, 194, 0, 0,
	111, 0, 0, 0, 112, 113, 0, 0, 0, 0,
	195, 114, 196, 534, 0, 115, 116, 197, 117, 0,
	0, 0, 306, 0, 118, 198, 0, 199, 0, 119,
	120, 200, 201, 0, 0, 0, 307, 121, 202, 203,
	204, 0, 205, 0, 308, 122, 309, 123, 0, 0,
	206, 310, 124, 311, 0, 261, 0, 0, 125, 0,
	126, 127, 128, 129, 262, 312, 130, 131, 132, 0,
	133, 0, 207, 134, 208, 135, 136, 0, 535, 0,
	0, 0, 137, 209, 313, 138, 314, 210, 139, 140,
	0, 211, 141, 212, 0, 142, 143, 144, 213, 145,
	146, 0, 147, 148, 149, 0, 150, 315, 151, 152,
	214, 153, 0, 154, 155, 0, 156, 263, 0, 157,
	158, 316, 159, 215, 160, 0, 161, 162, 164, 216,
	163, 217, 0, 0, 165, 166, 0, 265, 218, 0,
	0, 264, 219, 220, 533, 167, 168, 169, 170, 0,
	0, 171, 172, 0, 0, 173, 174, 175, 221, 222,
	88, 176, 0, 0, 0, 0, 177, 178, 179, 180,
	0, 0, 91, 92, 0, 93, 0, 0, 0, 0,
	543, 538, 0, 0, 94, 95, 181, 182, 183, 96,
	184, 185, 0, 97, 186, 187, 98, 0, 0, 188,
	189, 190, 0, 191, 0, 0, 0, 99, 100, 101,
	0, 102, 0, 103, 0, 0, 104, 105, 0, 0,
	0, 0, 0, 0, 106, 107, 108, 109, 192, 110,
	193, 194, 0, 0, 111, 0, 0, 0, 112, 113,
	0, 0, 0, 0, 195, 114, 196, 0, 0, 115,
	116, 197, 117, 0, 0, 0, 0, 0, 118, 198,
	0, 199, 0, 119, 120, 200, 201, 0, 0, 0,
	0, 121, 202, 203, 204, 0, 205, 0, 0, 122,
	0, 123, 0, 0, 206, 0, 124, 0, 0, 261,
	0, 0, 125, 0, 126, 127, 128, 129, 262, 0,
	130, 131, 132, 0, 133, 0, 207, 134, 208, 135,
	136, 0, 0, 0, 0, 0, 137, 209, 0, 138,
	0, 210, 139, 140, 0, 211, 141, 212, 0, 142,
	143, 144, 213, 145, 146, 0, 147, 148, 149, 0,
	150, 0, 151, 152, 214, 153, 0, 154, 155, 45,
	156, 263, 0, 157, 158, 0, 159, 215, 160, 0,
	161, 162, 164, 216, 163, 217, 0, 47, 165, 166,
	0, 265, 218, 0, 0, 264, 219, 220, 0, 167,
	168, 169, 170, 0, 0, 171, 172, 0, 0, 173,
	174, 175, 303, 222, 0, 176, 0, 0, 0, 43,
	177, 178, 179, 180, 88, 44, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 91, 92, 0, 93,
	0, 0, 0, 42, 0, 1106, 0, 0, 94, 95,
	181, 182, 183, 96, 184, 185, 0, 97, 186, 187,
	98, 0, 0, 188, 189, 190, 0, 191, 0, 0,
	0, 99, 100, 101, 0, 102, 0, 103, 0, 0,
	104, 105, 0, 0, 0, 0, 0, 0, 106, 107,
	108, 109, 192, 110, 193, 194, 0, 0, 111, 0,
	0, 0, 112, 113, 0, 0, 0, 0, 195, 114,
	196, 0, 0, 115, 116, 197, 117, 0, 0, 0,
	0, 0, 118, 198, 0, 199, 0, 119, 120, 200,
	201, 0, 0, 0, 0, 121, 202, 203, 204, 0,
	205, 0, 0, 122, 0, 123, 0, 0, 206, 0,
	124, 0, 0, 261, 0, 0, 125, 0, 126, 127,
	128, 129, 262, 0, 130, 131, 132, 0, 133, 0,
	207, 134, 208, 135, 136, 0, 0, 0, 0, 0,
	137, 209, 0, 138, 0, 210, 139, 140, 0, 211,
	141, 212, 0, 142, 143, 144, 213, 145, 146, 0,
	147, 148, 149, 0, 150, 0, 151, 152, 214, 153,
	0, 154, 155, 0, 156, 263, 0, 157, 158, 0,
	159, 215, 160, 0, 161, 162, 164, 216, 163, 217,
	0, 0, 165, 166, 0, 265, 218, 0, 0, 264,
	219, 220, 0, 167, 168, 169, 170, 0, 0, 171,
	172, 0, 0, 173, 174, 175, 221, 222, 0, 176,
	0, 0, 0, 0, 177, 178, 179, 180, 88, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	91, 92, 0, 93, 0, 0, 0, 0, 371, 0,
	0, 0, 94, 95, 181, 182, 183, 96, 184, 185,
	0, 97, 186, 187, 98, 0, 0, 188, 189, 190,
	0, 191, 0, 0, 0, 99, 100, 101, 0, 102,
	0, 103, 0, 0, 104, 105, 0, 0, 0, 0,
	0, 0, 106, 107, 108, 109, 192, 110, 193, 194,
	0, 0, 111, 0, 0, 0, 112, 113, 0, 0,
	0, 0, 195, 114, 196, 0, 0, 115, 116, 197,
	117, 0, 0, 0, 0, 0, 118, 198, 0, 199,
	0, 119, 120, 200, 201, 0, 0, 0, 0, 121,
	202, 203, 204, 0, 205, 0, 0, 122, 0, 123,
	0, 0, 206, 0, 124, 0, 0, 261, 0, 0,
	125, 0, 126, 127, 128, 129, 262, 0, 130, 131,
	132, 0, 133, 0, 207, 134, 208, 135, 136, 0,
	0, 274, 0, 0, 137, 209, 0, 138, 0, 210,
	139, 140, 0, 211, 141, 212, 0, 142, 143, 144,
	213, 145, 146, 0, 147, 148, 149, 0, 150, 0,
	151, 152, 214, 153, 0, 154, 155, 0, 156, 263,
	0, 157, 158, 0, 159, 215, 160, 0, 161, 162,
	164, 216, 163, 217, 0, 0, 165, 166, 0, 265,
	218, 0, 0, 264, 219, 220, 0, 167, 168, 169,
	170, 0, 0, 171, 172, 0, 0, 173, 174, 175,
	221, 222, 0, 176, 0, 0, 0, 0, 177, 178,
	179, 180, 88, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 91, 92, 0, 93, 0, 0,
	0, 869, 0, 0, 0, 0, 94, 95, 181, 182,
	183, 96, 184, 185, 0, 97, 186, 187, 98, 0,
	0, 188, 189, 190, 0, 191, 0, 0, 0, 99,
	100, 101, 0, 102, 0, 103, 0, 0, 104, 105,
	0, 0, 0, 0, 0, 0, 106, 107, 108, 109,
	192, 110, 193, 194, 0, 0, 111, 0, 0, 0,
	112, 113, 0, 0, 0, 0, 195, 114, 196, 0,
	0, 115, 116, 197, 117, 0, 0, 0, 0, 0,
	118, 198, 0, 199, 0, 119, 120, 200, 201, 0,
	0, 0, 0, 121, 202, 203, 204, 0, 205, 0,
	0, 122, 0, 123, 0, 0, 206, 0, 124, 0,
	0, 261, 0, 0, 125, 0, 126, 127, 128, 129,
	262, 0, 130, 131, 132, 0, 133, 0, 207, 134,
	208, 135, 136, 0, 0, 0, 0, 0, 137, 209,
	0, 138, 0, 210, 139, 140, 0, 211, 141, 212,
	0, 142, 143, 144, 213, 145, 146, 0, 147, 148,
	149, 0, 150, 0, 151, 152, 214, 153, 0, 154,
	155, 0, 156, 263, 0, 157, 158, 0, 159, 215,
	160, 0, 161, 162, 164, 216, 163, 217, 0, 0,
	165, 166, 0, 265, 218, 0, 0, 264, 219, 220,
	0, 167, 168, 169, 170, 0, 0, 171, 172, 0,
	0, 173, 174, 175, 221, 222, 0, 176, 0, 0,
	0, 0, 177, 178, 179, 180, 88, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 91, 92,
	0, 93, 0, 0, 0, 806, 0, 0, 0, 0,
	94, 95, 181, 182, 183, 96, 184, 185, 0, 97,
	186, 187, 98, 0, 0, 188, 189, 190, 0, 191,
	0, 0, 0, 99, 100, 101, 0, 102, 0, 103,
	0, 0, 104, 105, 0, 0, 0, 0, 0, 0,
	106, 107, 108, 109, 192, 110, 193, 194, 0, 0,
	111, 0, 0, 0, 112, 113, 0, 0, 0, 0,
	195, 114, 196, 0, 0, 115, 116, 197, 117, 0,
	0, 0, 0, 0, 118, 198, 0, 199, 0, 119,
	120, 200, 201, 0, 0, 0, 0, 121, 202, 203,
	204, 0, 205, 0, 0, 122, 0, 123, 0, 0,
	206, 0, 124, 0, 0, 261, 0, 0, 125, 0,
	126, 127, 128, 129, 262, 0, 130, 131, 132, 0,
	133, 0, 207, 134, 208, 135, 136, 0, 0, 0,
	0, 0, 137, 209, 0, 138, 0, 210, 139, 140,
	0, 211, 141, 212, 0, 142, 143, 144, 213, 145,
	146, 0, 147, 148, 149, 0, 150, 0, 151, 152,
	214, 153, 0, 154, 155, 0, 156, 263, 0, 157,
	158, 0, 159, 215, 160, 0, 161, 162, 164, 216,
	163, 217, 0, 0, 165, 166, 0, 265, 218, 0,
	0, 264, 219, 220, 0, 167, 168, 169, 170, 0,
	0, 171, 172, 0, 0, 173, 174, 175, 221, 222,
	0, 176, 0, 0, 0, 0, 177, 178, 179, 180,
	88, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 91, 92, 0, 93, 0, 0, 0, 1316,
	0, 0, 0, 0, 94, 95, 181, 182, 183, 96,
	184, 185, 0, 97, 186, 187, 98, 0, 0, 188,
	189, 190, 0, 191, 0, 0, 0, 99, 100, 101,
	0, 102, 0, 103, 0, 0, 104, 105, 0, 0,
	0, 0, 0, 0, 106, 107, 108, 109, 192, 110,
	193, 194, 0, 0, 111, 0, 0, 0, 112, 113,
	0, 0, 0, 0, 195, 114, 196, 0, 0, 115,
	116, 197, 117, 0, 0, 0, 0, 0, 118, 198,
	0, 199, 0, 119, 120, 200, 201, 0, 0, 0,
	0, 121, 202, 203, 204, 0, 205, 0, 0, 122,
	0, 123, 0, 0, 206, 0, 124, 0, 0, 261,
	0, 0, 125, 0, 126, 127, 128, 129, 262, 0,
	130, 131, 132, 0, 133, 0, 207, 134, 208, 135,
	136, 0, 0, 0, 0, 0, 137, 209, 0, 138,
	0, 210, 139, 140, 0, 211, 141, 212, 0, 142,
	143, 144, 213, 145, 146, 0, 147, 148, 149, 0,
	150, 0, 151, 152, 214, 153, 0, 154, 155, 0,
	156, 263, 0, 157, 158, 0, 159, 215, 160, 0,
	161, 162, 164, 216, 163, 217, 0, 0, 165, 166,
	0, 265, 218, 0, 0, 264, 219, 220, 0, 167,
	168, 169, 170, 0, 0, 171, 172, 0, 0, 173,
	174, 175, 221, 222, 0, 176, 0, 0, 0, 0,
	177, 178, 179, 180, 88, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 91, 92, 0, 93,
	0, 0, 0, 471, 0, 0, 0, 0, 94, 95,
	181, 182, 183, 96, 184, 185, 0, 97, 186, 187,
	98, 0, 0, 188, 189, 190, 0, 191, 0, 0,
	0, 99, 100, 101, 0, 102, 0, 103, 0, 0,
	104, 105, 0, 0, 0, 0, 0, 0, 106, 107,
	513, 109, 192, 110, 193, 194, 0, 0, 111, 0,
	0, 0, 112, 113, 0, 0, 0, 0, 195, 114,
	196, 0, 0, 115, 116, 197, 117, 0, 0, 0,
	0, 0, 118, 198, 0, 199, 0, 119, 120, 200,
	201, 0, 0, 0, 0, 121, 202, 203, 204, 0,
	205, 0, 0, 122, 0, 123, 0, 0, 206, 0,
	124, 0, 0, 261, 0, 0, 125, 0, 126, 127,
	128, 129, 262, 0, 130, 131, 132, 0, 133, 0,
	207, 134, 208, 135, 136, 0, 0, 0, 0, 0,
	137, 209, 0, 138, 0, 210, 139, 140, 0, 211,
	141, 212, 0, 142, 143, 144, 213, 145, 146, 0,
	147, 148, 149, 0, 150, 0, 151, 152, 214, 153,
	0, 154, 155, 0, 156, 263, 0, 157, 158, 0,
	159, 215, 160, 0, 161, 162, 164, 216, 163, 217,
	0, 512, 165, 166, 0, 265, 218, 0, 0, 264,
	219, 220, 0, 167, 168, 169, 170, 0, 88, 171,
	172, 0, 0, 173, 174, 175, 221, 222, 0, 176,
	91, 92, 0, 93, 177, 178, 179, 180, 0, 0,
	0, 0, 94, 95, 181, 182, 183, 96, 184, 185,
	516, 97, 186, 187, 98, 0, 0, 188, 189, 190,
	0, 191, 0, 0, 0, 99, 100, 101, 0, 102,
	0, 103, 0, 0, 104, 105, 0, 0, 0, 0,
	0, 0, 106, 107, 108, 109, 192, 110, 193, 194,
	0, 0, 111, 0, 0, 0, 112, 113, 0, 0,
	0, 0, 195, 114, 196, 0, 0, 115, 116, 197,
	117, 0, 0, 0, 0, 0, 118, 198, 0, 199,
	0, 119, 120, 200, 201, 0, 0, 0, 0, 121,
	202, 203, 204, 0, 205, 0, 0, 122, 0, 123,
	0, 0, 206, 0, 124, 0, 0, 261, 0, 0,
	125, 0, 126, 127, 128, 129, 262, 0, 130, 131,
	132, 0, 133, 0, 207, 134, 208, 135, 136, 0,
	0, 0, 0, 0, 137, 209, 0, 138, 0, 210,
	139, 140, 0, 211, 141, 212, 0, 142, 143, 144,
	213, 145, 146, 0, 147, 148, 149, 0, 150, 0,
	151, 152, 214, 153, 0, 154, 155, 0, 156, 263,
	0, 157, 158, 0, 159, 215, 160, 0, 161, 162,
	164, 216, 163, 217, 0, 0, 165, 166, 0, 265,
	218, 0, 0, 264, 219, 220, 0, 167, 168, 169,
	170, 0, 299, 171, 172, 0, 0, 173, 174, 175,
	221, 222, 0, 176, 91, 92, 0, 93, 177, 178,
	179, 180, 0, 0, 0, 0, 94, 95, 181, 182,
	183, 96, 184, 185, 516, 97, 186, 187, 98, 0,
	0, 188, 189, 190, 0, 191, 0, 304, 0, 99,
	100, 101, 0, 102, 0, 103, 0, 305, 104, 105,
	0, 0, 0, 0, 0, 0, 106, 107, 108, 109,
	192, 110, 193, 194, 0, 0, 111, 0, 0, 0,
	112, 113, 0, 0, 0, 0, 195, 114, 196, 0,
	0, 115, 116, 197, 117, 0, 0, 0, 306, 0,
	118, 198, 0, 199, 0, 119, 120, 200, 201, 0,
	0, 0, 307, 121, 202, 203, 204, 0, 205, 0,
	308, 122, 309, 123, 0, 0, 206, 310, 124, 311,
	0, 261, 0, 0, 125, 0, 126, 127, 128, 129,
	262, 312, 130, 131, 132, 0, 133, 0, 207, 134,
	208, 135, 136, 0, 0, 0, 0, 0, 137, 209,
	313, 138, 314, 210, 139, 140, 0, 211, 141, 212,
	0, 142, 143, 144, 213, 145, 146, 0, 147, 148,
	149, 0, 150, 315, 151, 152, 214, 153, 0, 154,
	155, 0, 156, 263, 0, 157, 158, 316, 159, 215,
	160, 0, 161, 162, 164, 216, 163, 217, 0, 0,
	165, 166, 0, 265, 218, 0, 0, 264, 219, 220,
	0, 167, 168, 169, 170, 0, 88, 171, 172, 0,
	0, 173, 174, 175, 221, 222, 0, 176, 91, 92,
	0, 93, 177, 178, 179, 180, 0, 0, 0, 0,
	94, 95, 181, 182, 183, 96, 184, 185, 0, 97,
	186, 187, 98, 0, 0, 188, 189, 190, 781, 191,
	0, 0, 0, 99, 100, 101, 0, 102, 779, 103,
	0, 0, 104, 105, 0, 0, 0, 0, 0, 0,
	106, 107, 108, 109, 192, 110, 193, 194, 0, 0,
	111, 0, 0, 0, 112, 113, 0, 0, 0, 0,
	195, 114, 196, 0, 0, 115, 116, 197, 117, 0,
	784, 0, 0, 0, 118, 198, 0, 199, 0, 119,
	120, 200, 201, 0, 847, 0, 0, 121, 202, 203,
	204, 0, 205, 0, 0, 122, 0, 123, 0, 0,
	206, 0, 124, 0, 0, 261, 0, 0, 125, 0,
	126, 127, 128, 129, 262, 0, 130, 131, 132, 0,
	133, 0, 207, 134, 208, 135, 136, 0, 0, 0,
	0, 0, 137, 209, 0, 138, 0, 210, 139, 140,
	0, 211, 141, 212, 783, 142, 143, 144, 213, 145,
	146, 0, 147, 148, 149, 0, 150, 0, 151, 152,
	214, 153, 0, 154, 155, 0, 156, 263, 0, 157,
	158, 0, 159, 215, 160, 0, 161, 162, 164, 216,
	163, 217, 0, 0, 165, 166, 0, 265, 218, 0,
	0, 264, 219, 220, 0, 167, 168, 169, 170, 0,
	848, 171, 172, 0, 0, 173, 174, 175, 221, 222,
	88, 176, 0, 0, 0, 0, 177, 178, 179, 180,
	0, 0, 91, 92, 0, 93, 0, 0, 0, 0,
	0, 0, 0, 0, 94, 95, 181, 182, 183, 96,
	184, 185, 0, 97, 186, 187, 98, 0, 0, 188,
	189, 190, 781, 191, 0, 0, 776, 99, 100, 101,
	0, 102, 779, 103, 0, 0, 104, 105, 0, 0,
	0, 0, 0, 0, 106, 107, 108, 109, 192, 110,
	193, 194, 0, 0, 111, 0, 0, 0, 112, 113,
	0, 0, 0, 0, 195, 114, 196, 0, 0, 115,
	116, 197, 117, 0, 784, 0, 0, 0, 118, 198,
	0, 199, 0, 119, 120, 775, 201, 0, 0, 0,
	0, 121, 202, 203, 204, 0, 205, 0, 0, 122,
	0, 123, 0, 0, 206, 0, 124, 0, 0, 261,
	0, 0, 125, 0, 126, 127, 128, 129, 262, 0,
	130, 131, 132, 0, 133, 0, 207, 134, 208, 135,
	136, 0, 0, 0, 0, 0, 137, 209, 0, 138,
	0, 210, 139, 140, 0, 211, 141, 212, 783, 142,
	143, 144, 213, 145, 146, 0, 147, 148, 149, 0,
	150, 0, 151, 152, 214, 153, 0, 154, 155, 0,
	156, 263, 0, 157, 158, 0, 159, 215, 160, 0,
	161, 162, 164, 216, 163, 217, 0, 0, 165, 166,
	0, 265, 218, 0, 0, 264, 219, 220, 0, 167,
	168, 169, 170, 0, 782, 171, 172, 0, 0, 173,
	174, 175, 221, 222, 88, 176, 0, 0, 0, 0,
	177, 178, 179, 180, 0, 0, 91, 92, 0, 93,
	0, 0, 0, 0, 0, 1106, 0, 0, 94, 95,
	181, 182, 183, 96, 184, 185, 0, 97, 186, 187,
	98, 0, 0, 188, 189, 190, 0, 191, 0, 0,
	0, 99, 100, 101, 0, 102, 0, 103, 0, 0,
	104, 105, 0, 0, 0, 0, 0, 0, 106, 107,
	108, 109, 192, 110, 193, 194, 0, 0, 111, 0,
	0, 0, 112, 113, 0, 0, 0, 0, 195, 114,
	196, 0, 0, 115, 116, 197, 117, 0, 0, 0,
	0, 0, 118, 198, 0, 199, 0, 119, 120, 200,
	201, 0, 0, 0, 0, 121, 202, 203, 204, 0,
	205, 0, 0, 122, 0, 123, 0, 0, 206, 0,
	124, 0, 0, 261, 0, 0, 125, 0, 126, 127,
	128, 129, 262, 0, 130, 131, 132, 0, 133, 0,
	207, 134, 208, 135, 136, 0, 0, 0, 0, 0,
	137, 209, 0, 138, 0, 210, 139, 140, 0, 211,
	141, 212, 0, 142, 143, 144, 213, 145, 146, 0,
	147, 148, 149, 0, 150, 0, 151, 152, 214, 153,
	0, 154, 155, 0, 156, 263, 0, 157, 158, 0,
	159, 215, 160, 0, 161, 162, 164, 216, 163, 217,
	0, 0, 165, 166, 0, 265, 218, 0, 0, 264,
	219, 220, 0, 167, 168, 169, 170, 0, 88, 171,
	172, 0, 0, 173, 174, 175, 221, 222, 0, 176,
	91, 92, 0, 93, 177, 178, 179, 180, 0, 0,
	0, 0, 94, 95, 181, 182, 183, 96, 184, 185,
	0, 97, 186, 187, 98, 0, 0, 188, 189, 190,
	0, 191, 0, 0, 0, 99, 100, 101, 0, 102,
	0, 103, 0, 0, 104, 105, 0, 0, 0, 0,
	0, 0, 106, 107, 108, 109, 192, 110, 193, 194,
	0, 0, 111, 0, 0, 0, 112, 113, 0, 0,
	0, 0, 195, 114, 196, 0, 0, 115, 116, 197,
	117, 0, 0, 0, 0, 0, 118, 198, 0, 199,
	0, 119, 120, 200, 201, 0, 0, 0, 0, 121,
	202, 203, 204, 0, 205, 0, 0, 122, 0, 123,
	0, 0, 206, 0, 124, 0, 0, 261, 0, 0,
	125, 0, 126, 127, 128, 129, 262, 0, 130, 131,
	132, 0, 133, 0, 207, 134, 208, 135, 136, 0,
	0, 274, 0, 0, 137, 209, 0, 138, 0, 210,
	139, 140, 0, 211, 141, 212, 0, 142, 143, 144,
	213, 145, 146, 0, 147, 148, 149, 0, 150, 0,
	151, 152, 214, 153, 0, 154, 155, 0, 156, 263,
	0, 157, 158, 0, 159, 215, 160, 0, 161, 162,
	164, 216, 163, 217, 0, 0, 165, 166, 0, 265,
	218, 0, 0, 264, 219, 220, 0, 167, 168, 169,
	170, 0, 88, 171, 172, 0, 0, 173, 174, 175,
	221, 222, 0, 176, 91, 92, 0, 93, 177, 178,
	179, 180, 0, 0, 0, 0, 94, 95, 181, 182,
	183, 96, 184, 185, 0, 97, 186, 187, 98, 0,
	0, 188, 189, 190, 0, 191, 0, 0, 0, 99,
	100, 101, 0, 102, 0, 103, 0, 0, 104, 105,
	0, 0, 0, 0, 0, 0, 106, 107, 108, 109,
	192, 110, 193, 194, 0, 0, 111, 0, 0, 0,
	112, 113, 0, 0, 0, 0, 195, 114, 196, 0,
	0, 115, 116, 197, 117, 0, 0, 0, 0, 0,
	118, 198, 0, 199, 0, 119, 120, 280, 201, 0,
	0, 0, 0, 121, 202, 203, 204, 0, 205, 0,
	0, 122, 0, 123, 0, 0, 206, 0, 124, 0,
	0, 261, 0, 0, 125, 0, 126, 127, 128, 129,
	262, 0, 130, 131, 132, 0, 133, 0, 207, 134,
	208, 135, 136, 0, 0, 274, 0, 0, 137, 209,
	0, 138, 0, 210, 139, 140, 0, 211, 141, 212,
	0, 142, 143, 144, 213, 145, 146, 0, 147, 148,
	149, 0, 150, 0, 151, 152, 214, 153, 0, 154,
	155, 0, 156, 263, 0, 157, 158, 0, 159, 215,
	160, 0, 161, 162, 164, 216, 163, 217, 0, 0,
	165, 166, 0, 265, 218, 0, 0, 264, 219, 220,
	0, 167, 168, 169, 170, 0, 88, 171, 172, 0,
	0, 173, 174, 175, 221, 222, 0, 176, 91, 92,
	0, 93, 177, 178, 179, 180, 0, 0, 0, 0,
	94, 95, 181, 182, 183, 96, 184, 185, 0, 97,
	186, 187, 98, 0, 0, 188, 189, 190, 0, 191,
	0, 0, 0, 99, 100, 101, 0, 102, 0, 103,
	0, 0, 104, 105, 0, 0, 0, 0, 0, 0,
	106, 107, 108, 109, 192, 110, 193, 194, 0, 0,
	111, 0, 0, 0, 112, 113, 0, 0, 0, 0,
	195, 114, 196, 0, 0, 115, 116, 197, 117, 0,
	0, 0, 0, 0, 118, 198, 0, 199, 0, 119,
	120, 200, 201, 0, 0, 0, 0, 121, 202, 203,
	204, 0, 205, 0, 0, 122, 0, 123, 0, 0,
	206, 0, 124, 0, 0, 261, 0, 0, 125, 0,
	126, 127, 128, 129, 262, 0, 130, 131, 132, 0,
	133, 0, 207, 134, 208, 135, 136, 0, 0, 0,
	0, 0, 137, 209, 0, 138, 0, 210, 139, 140,
	0, 211, 141, 212, 0, 142, 143, 144, 213, 145,
	146, 0, 147, 148, 149, 0, 150, 0, 151, 152,
	214, 153, 0, 154, 155, 0, 156, 263, 0, 157,
	158, 0, 159, 215, 160, 0, 161, 162, 164, 216,
	163, 217, 0, 0, 165, 166, 0, 265, 218, 0,
	0, 264, 219, 220, 0, 167, 168, 169, 170, 0,
	88, 171, 172, 0, 0, 173, 174, 175, 221, 222,
	0, 176, 91, 92, 0, 93, 177, 178, 179, 180,
	0, 0, 0, 0, 94, 95, 181, 182, 183, 96,
	184, 185, 0, 97, 186, 187, 98, 0, 0, 188,
	189, 190, 0, 191, 0, 0, 0, 99, 100, 101,
	0, 102, 0, 103, 0, 0, 104, 105, 0, 0,
	0, 0, 0, 0, 106, 107, 108, 109, 192, 110,
	193, 194, 0, 0, 111, 0, 0, 0, 112, 113,
	0, 0, 0, 0, 195, 114, 196, 0, 0, 115,
	116, 197, 117, 0, 0, 0, 0, 0, 118, 198,
	0, 199, 0, 119, 120, 1047, 201, 0, 0, 0,
	0, 121, 202, 203, 204, 0, 205, 0, 0, 122,
	0, 123, 0, 0, 206, 0, 124, 0, 0, 261,
	0, 0, 125, 0, 126, 127, 128, 129, 262, 0,
	130, 131, 132, 0, 133, 0, 207, 134, 208, 135,
	136, 0, 0, 0, 0, 0, 137, 209, 0, 138,
	0, 210, 139, 140, 0, 211, 141, 212, 0, 142,
	143, 144, 213, 145, 146, 0, 147, 148, 149, 0,
	150, 0, 151, 152, 214, 153, 0, 154, 155, 0,
	156, 263, 0, 157, 158, 0, 159, 215, 160, 0,
	161, 162, 164, 216, 163, 217, 0, 0, 165, 166,
	0, 265, 218, 0, 0, 264, 219, 220, 0, 167,
	168, 169, 170, 0, 88, 171, 172, 0, 0, 173,
	174, 175, 221, 222, 0, 176, 91, 92, 0, 93,
	177, 178, 179, 180, 0, 0, 0, 0, 94, 95,
	181, 182, 183, 96, 184, 185, 0, 97, 186, 187,
	98, 0, 0, 188, 189, 190, 0, 191, 0, 0,
	0, 99, 100, 101, 0, 102, 0, 103, 0, 0,
	104, 105, 0, 0, 0, 0, 0, 0, 106, 107,
	108, 109, 192, 110, 193, 194, 0, 0, 111, 0,
	0, 0, 112, 113, 0, 0, 0, 0, 195, 114,
	196, 0, 0, 115, 116, 197, 117, 0, 0, 0,
	0, 0, 118, 198, 0, 199, 0, 119, 120, 1045,
	201, 0, 0, 0, 0, 121, 202, 203, 204, 0,
	205, 0, 0, 122, 0, 123, 0, 0, 206, 0,
	124, 0, 0, 261, 0, 0, 125, 0, 126, 127,
	128, 129, 262, 0, 130, 131, 132, 0, 133, 0,
	207, 134, 208, 135, 136, 0, 0, 0, 0, 0,
	137, 209, 0, 138, 0, 210, 139, 140, 0, 211,
	141, 212, 0, 142, 143, 144, 213, 145, 146, 0,
	147, 148, 149, 0, 150, 0, 151, 152, 214, 153,
	0, 154, 155, 0, 156, 263, 0, 157, 158, 0,
	159, 215, 160, 0, 161, 162, 164, 216, 163, 217,
	0, 0, 165, 166, 0, 265, 218, 0, 0, 264,
	219, 220, 0, 167, 168, 169, 170, 0, 88, 171,
	172, 0, 0, 173, 174, 175, 221, 222, 0, 176,
	91, 92, 0, 93, 177, 178, 179, 180, 0, 0,
	0, 0, 94, 95, 181, 182, 183, 96, 184, 185,
	0, 97, 186, 187, 98, 0, 0, 188, 189, 190,
	0, 191, 0, 0, 0, 99, 100, 101, 0, 102,
	0, 103, 0, 0, 104, 105, 0, 0, 0, 0,
	0, 0, 106, 107, 108, 109, 192, 110, 193, 194,
	0, 0, 111, 0, 0, 0, 112, 113, 0, 0,
	0, 0, 195, 114, 196, 0, 0, 115, 116, 197,
	117, 0, 0, 0, 0, 0, 118, 198, 0, 199,
	0, 119, 120, 1036, 201, 0, 0, 0, 0, 121,
	202, 203, 204, 0, 205, 0, 0, 122, 0, 123,
	0, 0, 206, 0, 124, 0, 0, 261, 0, 0,
	125, 0, 126, 127, 128, 129, 262, 0, 130, 131,
	132, 0, 133, 0, 207, 134, 208, 135, 136, 0,
	0, 0, 0, 0, 137, 209, 0, 138, 0, 210,
	139, 140, 0, 211, 141, 212, 0, 142, 143, 144,
	213, 145, 146, 0, 147, 148, 149, 0, 150, 0,
	151, 152, 214, 153, 0, 154, 155, 0, 156, 263,
	0, 157, 158, 0, 159, 215, 160, 0, 161, 162,
	164, 216, 163, 217, 0, 0, 165, 166, 0, 265,
	218, 0, 0, 264, 219, 220, 0, 167, 168, 169,
	170, 0, 88, 171, 172, 0, 0, 173, 174, 175,
	221, 222, 0, 176, 91, 92, 0, 93, 177, 178,
	179, 180, 0, 0, 0, 0, 94, 95, 181, 182,
	183, 96, 184, 185, 0, 97, 186, 187, 98, 0,
	0, 188, 189, 190, 0, 191, 0, 0, 0, 99,
	100, 101, 0, 102, 0, 103, 0, 0, 104, 105,
	0, 0, 0, 0, 0, 0, 106, 107, 108, 109,
	192, 110, 193, 194, 0, 0, 111, 0, 0, 0,
	112, 113, 0, 0, 0, 0, 195, 114, 196, 0,
	0, 115, 116, 197, 117, 0, 0, 0, 0, 0,
	118, 198, 0, 199, 0, 119, 120, 654, 201, 0,
	0, 0, 0, 121, 202, 203, 204, 0, 205, 0,
	0, 122, 0, 123, 0, 0, 206, 0, 124, 0,
	0, 261, 0, 0, 125, 0, 126, 127, 128, 129,
	262, 0, 130, 131, 132, 0, 133, 0, 207, 134,
	208, 135, 136, 0, 0, 0, 0, 0, 137, 209,
	0, 138, 0, 210, 139, 140, 0, 211, 141, 212,
	0, 142, 143, 144, 213, 145, 146, 0, 147, 148,
	149, 0, 150, 0, 151, 152, 214, 153, 0, 154,
	155, 0, 156, 263, 0, 157, 158, 0, 159, 215,
	160, 0, 161, 162, 164, 216, 163, 217, 0, 0,
	165, 166, 0, 265, 218, 0, 0, 264, 219, 220,
	0, 167, 168, 169, 170, 0, 88, 171, 172, 0,
	0, 173, 174, 175, 221, 222, 0, 176, 91, 92,
	0, 93, 177, 178, 179, 180, 0, 499, 0, 0,
	94, 95, 181, 182, 183, 96, 184, 185, 0, 97,
	186, 187, 98, 0, 0, 188, 189, 190, 0, 191,
	0, 0, 0, 99, 100, 101, 0, 102, 0, 103,
	0, 0, 104, 105, 0, 0, 0, 0, 0, 0,
	106, 107, 108, 109, 192, 110, 193, 194, 0, 0,
	111, 0, 0, 0, 112, 113, 0, 0, 0, 0,
	195, 114, 196, 0, 0, 115, 116, 197, 117, 0,
	0, 0, 0, 0, 118, 198, 0, 199, 0, 119,
	120, 200, 201, 0, 0, 0, 0, 121, 202, 203,
	204, 0, 205, 0, 0, 122, 0, 123, 0, 0,
	206, 0, 124, 0, 0, 261, 0, 0, 125, 0,
	126, 127, 128, 129, 262, 0, 130, 131, 132, 0,
	133, 0, 207, 134, 208, 135, 136, 0, 0, 0,
	0, 0, 137, 209, 0, 138, 0, 210, 139, 140,
	0, 211, 141, 212, 0, 142, 143, 144, 213, 145,
	146, 0, 147, 148, 149, 0, 150, 0, 151, 152,
	214, 153, 0, 154, 155, 0, 156, 263, 0, 0,
	158, 0, 159, 215, 160, 0, 161, 162, 164, 216,
	163, 217, 0, 0, 165, 166, 0, 265, 218, 0,
	0, 264, 219, 220, 0, 167, 168, 169, 170, 0,
	88, 171, 172, 0, 0, 173, 174, 175, 221, 222,
	0, 176, 91, 92, 0, 93, 177, 178, 179, 180,
	0, 0, 0, 0, 94, 95, 181, 182, 183, 96,
	184, 185, 0, 97, 186, 187, 98, 0, 0, 188,
	189, 190, 0, 191, 0, 0, 0, 99, 100, 101,
	0, 102, 0, 103, 0, 0, 104, 105, 0, 0,
	0, 0, 0, 0, 106, 107, 108, 109, 192, 110,
	193, 194, 0, 0, 111, 0, 0, 0, 112, 113,
	0, 0, 0, 0, 195, 114, 196, 0, 0, 115,
	116, 197, 117, 0, 0, 0, 0, 0, 118, 198,
	0, 199, 0, 119, 120, 356, 201, 0, 0, 0,
	0, 121, 202, 203, 204, 0, 205, 0, 0, 122,
	0, 123, 0, 0, 206, 0, 124, 0, 0, 261,
	0, 0, 125, 0, 126, 127, 128, 129, 262, 0,
	130, 131, 132, 0, 133, 0, 207, 134, 208, 135,
	136, 0, 0, 0, 0, 0, 137, 209, 0, 138,
	0, 210, 139, 140, 0, 211, 141, 212, 0, 142,
	143, 144, 213, 145, 146, 0, 147, 148, 149, 0,
	150, 0, 151, 152, 214, 153, 0, 154, 155, 0,
	156, 263, 0, 157, 158, 0, 159, 215, 160, 0,
	161, 162, 164, 216, 163, 217, 0, 0, 165, 166,
	0, 265, 218, 0, 0, 264, 219, 220, 0, 167,
	168, 169, 170, 0, 88, 171, 172, 0, 0, 173,
	174, 175, 221, 222, 0, 176, 91, 92, 0, 93,
	177, 178, 179, 180, 0, 0, 0, 0, 94, 95,
	181, 182, 183, 96, 184, 185, 0, 97, 186, 187,
	98, 0, 0, 188, 189, 190, 0, 191, 0, 0,
	0, 99, 100, 101, 0, 102, 0, 103, 0, 0,
	104, 105, 0, 0, 0, 0, 0, 0, 106, 107,
	108, 109, 192, 110, 193, 194, 0, 0, 111, 0,
	0, 0, 112, 113, 0, 0, 0, 0, 195, 114,
	196, 0, 0, 115, 116, 197, 117, 0, 0, 0,
	0, 0, 118, 198, 0, 199, 0, 119, 120, 353,
	201, 0, 0, 0, 0, 121, 202, 203, 204, 0,
	205, 0, 0, 122, 0, 123, 0, 0, 206, 0,
	124, 0, 0, 261, 0, 0, 125, 0, 126, 127,
	128, 129, 262, 0, 130, 131, 132, 0, 133, 0,
	207, 134, 208, 135, 136, 0, 0, 0, 0, 0,
	137, 209, 0, 138, 0, 210, 139, 140, 0, 211,
	141, 212, 0, 142, 143, 144, 213, 145, 146, 0,
	147, 148, 149, 0, 150, 0, 151, 152, 214, 153,
	0, 154, 155, 0, 156, 263, 0, 157, 158, 0,
	159, 215, 160, 0, 161, 162, 164, 216, 163, 217,
	0, 0, 165, 166, 0, 265, 218, 0, 0, 264,
	219, 220, 0, 167, 168, 169, 170, 0, 88, 171,
	172, 0, 0, 173, 174, 175, 221, 222, 0, 176,
	91, 92, 0, 93, 177, 178, 179, 180, 0, 0,
	0, 0, 94, 95, 181, 182, 183, 96, 184, 185,
	0, 97, 186, 187, 98, 0, 0, 188, 189, 321,
	0, 191, 0, 0, 0, 99, 100, 101, 0, 102,
	0, 103, 0, 0, 104, 105, 0, 0, 0, 0,
	0, 0, 106, 107, 108, 109, 192, 110, 193, 194,
	0, 0, 111, 0, 0, 0, 112, 113, 0, 0,
	0, 0, 195, 114, 196, 0, 0, 115, 116, 197,
	117, 0, 0, 0, 0, 0, 118, 198, 0, 199,
	0, 119, 120, 200, 201, 0, 0, 0, 0, 121,
	202, 203, 204, 0, 205, 0, 0, 122, 0, 123,
	0, 0, 206, 0, 124, 0, 0, 261, 0, 0,
	125, 0, 126, 127, 128, 129, 85, 0, 130, 131,
	132, 0, 133, 0, 207, 134, 208, 135, 136, 0,
	0, 0, 0, 0, 137, 209, 0, 138, 0, 210,
	139, 140, 0, 211, 141, 212, 0, 142, 143, 144,
	213, 145, 146, 0, 147, 148, 149, 0, 150, 0,
	151, 152, 214, 153, 0, 154, 155, 0, 156, 263,
	0, 157, 158, 0, 159, 215, 160, 0, 161, 162,
	164, 216, 163, 217, 0, 0, 165, 166, 0, 84,
	218, 0, 0, 80, 219, 220, 0, 167, 168, 169,
	170, 0, 88, 171, 172, 0, 0, 173, 174, 175,
	221, 222, 0, 176, 91, 92, 0, 93, 177, 178,
	179, 180, 0, 0, 0, 0, 94, 95, 181, 182,
	183, 96, 184, 185, 0, 97, 186, 187, 98, 0,
	0, 188, 189, 190, 0, 191, 0, 0, 0, 99,
	100, 101, 0, 102, 0, 103, 0, 0, 104, 105,
	0, 0, 0, 0, 0, 0, 106, 107, 108, 109,
	192, 110, 193, 194, 0, 0, 111, 0, 0, 0,
	112, 113, 0, 0, 0, 0, 195, 114, 196, 0,
	0, 115, 116, 197, 117, 0, 0, 0, 0, 0,
	118, 198, 0, 199, 0, 119, 120, 200, 201, 0,
	0, 0, 0, 121, 202, 203, 204, 0, 205, 0,
	0, 122, 0, 123, 0, 0, 206, 0, 124, 0,
	0, 261, 0, 0, 125, 0, 126, 127, 128, 129,
	85, 0, 130, 131, 132, 0, 133, 0, 207, 134,
	208, 135, 136, 0, 0, 0, 0, 0, 137, 209,
	0, 138, 0, 210, 139, 140, 0, 211, 141, 212,
	0, 142, 143, 144, 213, 145, 146, 0, 147, 148,
	149, 0, 150, 0, 151, 152, 214, 153, 0, 154,
	155, 0, 156, 263, 0, 157, 158, 0, 159, 215,
	160, 0, 161, 162, 164, 216, 163, 217, 0, 0,
	165, 166, 0, 84, 218, 0, 0, 80, 219, 220,
	0, 167, 168, 169, 170, 0, 88, 171, 172, 0,
	0, 173, 174, 175, 221, 222, 0, 176, 91, 92,
	0, 93, 177, 178, 179, 180, 0, 0, 0, 0,
	94, 95, 181, 182, 183, 96, 184, 185, 0, 97,
	186, 187, 98, 0, 0, 188, 189, 190, 0, 191,
	0, 0, 0, 99, 100, 101, 0, 102, 0, 103,
	0, 0, 104, 105, 0, 0, 0, 0, 0, 0,
	106, 107, 108, 109, 192, 110, 193, 194, 0, 0,
	111, 0, 0, 0, 112, 113, 0, 0, 0, 0,
	195, 114, 196, 0, 0, 115, 116, 197, 117, 0,
	0, 0, 0, 0, 118, 198, 0, 199, 0, 119,
	120, 294, 201, 0, 0, 0, 0, 121, 202, 203,
	204, 0, 205, 0, 0, 122, 0, 123, 0, 0,
	206, 0, 124, 0, 0, 261, 0, 0, 125, 0,
	126, 127, 128, 129, 262, 0, 130, 131, 132, 0,
	133, 0, 207, 134, 208, 135, 136, 0, 0, 0,
	0, 0, 137, 209, 0, 138, 0, 210, 139, 140,
	0, 211, 141, 212, 0, 142, 143, 144, 213, 145,
	146, 0, 147, 148, 149, 0, 150, 0, 151, 152,
	214, 153, 0, 154, 155, 0, 156, 263, 0, 157,
	158, 0, 159, 215, 160, 0, 161, 162, 164, 216,
	163, 217, 0, 0, 165, 166, 0, 265, 218, 0,
	0, 264, 219, 220, 0, 167, 168, 169, 170, 0,
	88, 171, 172, 0, 0, 173, 174, 175, 221, 222,
	0, 176, 91, 92, 0, 93, 177, 178, 179, 180,
	0, 0, 0, 0, 94, 95, 181, 182, 183, 96,
	184, 185, 0, 97, 186, 187, 98, 0, 0, 188,
	189, 190, 0, 191, 0, 0, 0, 99, 100, 101,
	0, 102, 0, 103, 0, 0, 104, 105, 0, 0,
	0, 0, 0, 0, 106, 107, 108, 109, 192, 110,
	193, 194, 0, 0, 111, 0, 0, 0, 112, 113,
	0, 0, 0, 0, 195, 114, 196, 0, 0, 115,
	116, 197, 117, 0, 0, 0, 0, 0, 118, 198,
	0, 199, 0, 119, 120, 291, 201, 0, 0, 0,
	0, 121, 202, 203, 204, 0, 205, 0, 0, 122,
	0, 123, 0, 0, 206, 0, 124, 0, 0, 261,
	0, 0, 125, 0, 126, 127, 128, 129, 262, 0,
	130, 131, 132, 0, 133, 0, 207, 134, 208, 135,
	136, 0, 0, 0, 0, 0, 137, 209, 0, 138,
	0, 210, 139, 140, 0, 211, 141, 212, 0, 142,
	143, 144, 213, 145, 146, 0, 147, 148, 149, 0,
	150, 0, 151, 152, 214, 153, 0, 154, 155, 0,
	156, 263, 0, 157, 158, 0, 159, 215, 160, 0,
	161, 162, 164, 216, 163, 217, 0, 0, 165, 166,
	0, 265, 218, 0, 0, 264, 219, 220, 0, 167,
	168, 169, 170, 0, 88, 171, 172, 0, 0, 173,
	174, 175, 221, 222, 0, 176, 91, 92, 0, 93,
	177, 178, 179, 180, 0, 0, 0, 0, 94, 95,
	181, 182, 183, 96, 184, 185, 0, 97, 186, 187,
	98, 0, 0, 188, 189, 190, 0, 191, 0, 0,
	0, 99, 100, 101, 0, 102, 0, 103, 0, 0,
	104, 105, 0, 0, 0, 0, 0, 0, 106, 107,
	108, 109, 192, 110, 193, 194, 0, 0, 111, 0,
	0, 0, 112, 113, 0, 0, 0, 0, 195, 114,
	196, 0, 0, 115, 116, 197, 117, 0, 0, 0,
	0, 0, 118, 198, 0, 199, 0, 119, 120, 289,
	201, 0, 0, 0, 0, 121, 202, 203, 204, 0,
	205, 0, 0, 122, 0, 123, 0, 0, 206, 0,
	124, 0, 0, 261, 0, 0, 125, 0, 126, 127,
	128, 129, 262, 0, 130, 131, 132, 0, 133, 0,
	207, 134, 208, 135, 136, 0, 0, 0, 0, 0,
	137, 209, 0, 138, 0, 210, 139, 140, 0, 211,
	141, 212, 0, 142, 143, 144, 213, 145, 146, 0,
	147, 148, 149, 0, 150, 0, 151, 152, 214, 153,
	0, 154, 155, 0, 156, 263, 0, 157, 158, 0,
	159, 215, 160, 0, 161, 162, 164, 216, 163, 217,
	0, 0, 165, 166, 0, 265, 218, 0, 0, 264,
	219, 220, 0, 167, 168, 169, 170, 0, 88, 171,
	172, 0, 0, 173, 174, 175, 221, 222, 0, 176,
	91, 92, 0, 93, 177, 178, 179, 180, 0, 0,
	0, 0, 94, 95, 181, 182, 183, 96, 184, 185,
	0, 97, 186, 187, 98, 0, 0, 188, 189, 190,
	0, 191, 0, 0, 0, 99, 100, 101, 0, 102,
	0, 103, 0, 0, 104, 105, 0, 0, 0, 0,
	0, 0, 106, 107, 108, 109, 192, 110, 193, 194,
	0, 0, 111, 0, 0, 0, 112, 113, 0, 0,
	0, 0, 195, 114, 196, 0, 0, 115, 116, 197,
	117, 0, 0, 0, 0, 0, 118, 198, 0, 199,
	0, 119, 120, 283, 201, 0, 0, 0, 0, 121,
	202, 203, 204, 0, 205, 0, 0, 122, 0, 123,
	0, 0, 206, 0, 124, 0, 0, 261, 0, 0,
	125, 0, 126, 127, 128, 129, 262, 0, 130, 131,
	132, 0, 133, 0, 207, 134, 208, 135, 136, 0,
	0, 0, 0, 0, 137, 209, 0, 138, 0, 210,
	139, 140, 0, 211, 141, 212, 0, 142, 143, 144,
	213, 145, 146, 0, 147, 148, 149, 0, 150, 0,
	151, 152, 214, 153, 0, 154, 155, 0, 156, 263,
	0, 157, 158, 0, 159, 215, 160, 0, 161, 162,
	164, 216, 163, 217, 0, 0, 165, 166, 0, 265,
	218, 0, 0, 264, 219, 220, 0, 167, 168, 169,
	170, 0, 88, 171, 172, 0, 0, 173, 174, 175,
	221, 222, 0, 176, 91, 92, 0, 93, 177, 178,
	179, 180, 0, 0, 0, 0, 94, 95, 181, 182,
	183, 96, 184, 185, 0, 97, 186, 187, 98, 0,
	0, 188, 189, 190, 0, 191, 0, 0, 0, 99,
	100, 101, 0, 102, 0, 103, 0, 0, 104, 105,
	0, 0, 0, 0, 0, 0, 106, 107, 108, 109,
	192, 110, 193, 194, 0, 0, 111, 0, 0, 0,
	112, 113, 0, 0, 0, 0, 195, 114, 196, 0,
	0, 115, 116, 197, 117, 0, 0, 0, 0, 0,
	118, 198, 0, 199, 0, 119, 120, 200, 201, 0,
	0, 0, 0, 121, 202, 203, 204, 0, 205, 0,
	0, 122, 0, 123, 0, 0, 206, 0, 124, 0,
	0, 261, 0, 0, 125, 0, 126, 127, 128, 129,
	262, 0, 130, 131, 132, 0, 133, 0, 207, 134,
	208, 135, 136, 0, 0, 0, 0, 0, 137, 209,
	0, 138, 0, 210, 139, 140, 0, 211, 141, 212,
	0, 142, 143, 144, 213, 258, 146, 0, 147, 148,
	149, 0, 150, 0, 151, 152, 214, 153, 0, 154,
	155, 0, 156, 263, 0, 157, 158, 0, 159, 215,
	160, 0, 161, 162, 164, 216, 163, 217, 0, 0,
	165, 166, 0, 265, 218, 0, 0, 264, 219, 220,
	0, 167, 168, 169, 170, 0, 88, 171, 172, 0,
	0, 173, 174, 175, 221, 222, 0, 176, 91, 92,
	0, 93, 177, 178, 179, 180, 0, 0, 0, 0,
	94, 95, 181, 182, 183, 96, 184, 185, 0, 97,
	186, 187, 98, 0, 0, 188, 189, 190, 0, 191,
	0, 0, 0, 99, 100, 101, 0, 102, 0, 103,
	0, 0, 104, 105, 0, 0, 0, 0, 0, 0,
	106, 107, 108, 109, 192, 110, 193, 194, 0, 0,
	111, 0, 0, 0, 112, 113, 0, 0, 0, 0,
	195, 114, 196, 0, 0, 115, 116, 197, 117, 0,
	0, 0, 0, 0, 118, 198, 0, 199, 0, 119,
	120, 200, 201, 0, 0, 0, 0, 121, 202, 203,
	204, 0, 205, 0, 0, 122, 0, 123, 0, 0,
	206, 0, 124, 0, 0, 78, 0, 0, 125, 0,
	126, 127, 128, 129, 85, 0, 130, 131, 132, 0,
	133, 0, 207, 134, 208, 135, 136, 0, 0, 0,
	0, 0, 137, 209, 0, 138, 0, 210, 139, 140,
	0, 211, 141, 212, 0, 142, 143, 144, 213, 145,
	146, 0, 147, 148, 149, 0, 150, 0, 151, 152,
	214, 153, 0, 154, 155, 0, 156, 79, 0, 157,
	158, 0, 159, 215, 160, 0, 161, 162, 164, 216,
	163, 217, 0, 0, 165, 166, 0, 84, 218, 0,
	0, 80, 219, 220, 0, 167, 168, 169, 170, 0,
	88, 171, 172, 0, 0, 173, 174, 175, 221, 222,
	0, 176, 91, 92, 0, 93, 177, 178, 179, 180,
	0, 0, 0, 0, 94, 95, 181, 182, 183, 96,
	184, 185, 0, 97, 186, 187, 98, 0, 0, 188,
	189, 190, 0, 191, 0, 0, 0, 99, 100, 101,
	0, 102, 0, 103, 0, 0, 104, 105, 0, 0,
	0, 0, 0, 0, 106, 107, 108, 109, 192, 110,
	193, 194, 0, 0, 111, 0, 0, 0, 112, 113,
	0, 0, 0, 0, 195, 114, 196, 0, 0, 115,
	116, 197, 117, 0, 0, 0, 0, 0, 118, 198,
	0, 199, 0, 119, 120, 200, 201, 0, 0, 0,
	0, 121, 202, 203, 204, 0, 205, 0, 0, 122,
	0, 123, 0, 0, 206, 0, 124, 0, 0, 261,
	0, 0, 125, 0, 126, 127, 128, 129, 262, 0,
	130, 131, 132, 0, 133, 0, 207, 134, 208, 135,
	136, 0, 0, 0, 0, 0, 137, 209, 0, 138,
	0, 210, 139, 0, 0, 211, 141, 212, 0, 142,
	0, 144, 213, 145, 146, 0, 147, 148, 149, 0,
	150, 0, 151, 152, 214, 0, 0, 154, 155, 0,
	156, 263, 0, 157, 158, 0, 159, 215, 160, 0,
	161, 162, 164, 216, 163, 217, 0, 0, 165, 166,
	0, 265, 218, 0, 0, 264, 219, 220, 0, 167,
	168, 169, 170, 0, 0, 171, 172, 0, 0, 173,
	174, 175, 221, 222, 678, 176, 696, 697, 698, 0,
	177, 178, 179, 180, 0, 0, 699, 0, 0, 0,
	0, 0, 680, 678, 705, 696, 697, 698, 0, 0,
	0, 0, 0, 0, 0, 699, 0, 0, 0, 0,
	0, 680, 679, 705, 0, 0, 0, 0, 693, 0,
	0, 0, 678, 0, 696, 697, 698, 0, 0, 0,
	0, 679, 0, 0, 699, 0, 0, 693, 0, 0,
	680, 0, 705, 0, 0, 0, 0, 678, 0, 696,
	697, 698, 0, 0, 0, 0, 0, 0, 0, 699,
	679, 0, 0, 0, 0, 680, 693, 705, 0, 0,
	0, 0, 0, 0, 0, 706, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 679, 704, 0, 0, 0,
	0, 693, 0, 0, 706, 701, 0, 0, 0, 0,
	0, 694, 0, 0, 0, 704, 0, 0, 0, 0,
	0, 0, 0, 0, 701, 0, 0, 0, 0, 0,
	694, 0, 700, 706, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 704, 0, 0, 0, 0, 0,
	0, 700, 0, 701, 0, 0, 0, 0, 706, 694,
	0, 0, 0, 0, 695, 0, 0, 0, 0, 704,
	0, 0, 0, 703, 0, 0, 0, 0, 701, 0,
	700, 0, 0, 695, 694, 0, 0, 0, 0, 0,
	0, 0, 703, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 700, 0, 0, 0, 0,
	0, 0, 695, 0, 0, 0, 0, 0, 0, 0,
	0, 703, 702, 0, 690, 691, 692, 0, 689, 686,
	687, 688, 681, 682, 683, 684, 685, 695, 0, 0,
	0, 702, 1569, 690, 691, 692, 703, 689, 686, 687,
	688, 681, 682, 683, 684, 685, 0, 0, 0, 0,
	0, 1568, 0, 0, 0, 0, 0, 0, 0, 0,
	702, 0, 690, 691, 692, 0, 689, 686, 687, 688,
	681, 682, 683, 684, 685, 0, 0, 0, 0, 0,
	1553, 0, 0, 0, 0, 702, 0, 690, 691, 692,
	0, 689, 686, 687, 688, 681, 682, 683, 684, 685,
	678, 0, 696, 697, 698, 1532, 0, 0, 0, 0,
	0, 0, 699, 0, 0, 0, 0, 0, 680, 678,
	705, 696, 697, 698, 0, 0, 0, 0, 0, 0,
	0, 699, 0, 0, 0, 0, 0, 680, 679, 705,
	0, 0, 0, 0, 693, 0, 0, 0, 678, 0,
	696, 697, 698, 0, 0, 0, 0, 679, 0, 0,
	699, 0, 0, 693, 0, 0, 680, 0, 705, 0,
	0, 0, 0, 678, 0, 696, 697, 698, 0, 0,
	0, 0, 0, 0, 0, 699, 679, 0, 0, 0,
	0, 680, 693, 705, 0, 0, 0, 0, 0, 0,
	0, 706, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 679, 704, 0, 0, 0, 0, 693, 0, 0,
	706, 701, 0, 0, 0, 0, 0, 694, 0, 0,
	0, 704, 0, 0, 0, 0, 0, 0, 0, 0,
	701, 0, 0, 0, 0, 0, 694, 0, 700, 706,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	704, 0, 0, 0, 0, 0, 0, 700, 0, 701,
	0, 0, 0, 0, 706, 694, 0, 0, 0, 0,
	695, 0, 0, 0, 0, 704, 0, 0, 0, 703,
	0, 0, 0, 0, 701, 0, 700, 0, 0, 695,
	694, 0, 0, 0, 0, 0, 0, 0, 703, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 700, 0, 0, 0, 0, 0, 0, 695, 0,
	0, 0, 0, 0, 0, 0, 0, 703, 702, 0,
	690, 691, 692, 0, 689, 686, 687, 688, 681, 682,
	683, 684, 685, 695, 0, 0, 0, 702, 1527, 690,
	691, 692, 703, 689, 686, 687, 688, 681, 682, 683,
	684, 685, 0, 0, 0, 0, 0, 1523, 0, 0,
	0, 0, 0, 0, 0, 0, 702, 0, 690, 691,
	692, 0, 689, 686, 687, 688, 681, 682, 683, 684,
	685, 0, 0, 0, 0, 0, 1465, 0, 0, 0,
	0, 702, 0, 690, 691, 692, 0, 689, 686, 687,
	688, 681, 682, 683, 684, 685, 678, 0, 696, 697,
	698, 1464, 0, 0, 0, 0, 0, 0, 699, 0,
	0, 0, 0, 0, 680, 678, 705, 696, 697, 698,
	0, 0, 0, 0, 0, 0, 0, 699, 0, 0,
	0, 0, 0, 680, 679, 705, 0, 0, 0, 0,
	693, 0, 0, 0, 678, 0, 696, 697, 698, 0,
	0, 0, 0, 679, 0, 0, 699, 0, 0, 693,
	0, 0, 680, 0, 705, 0, 0, 0, 0, 678,
	0, 696, 697, 698, 0, 0, 0, 0, 0, 0,
	0, 699, 679, 0, 0, 0, 0, 680, 693, 705,
	0, 0, 0, 0, 0, 0, 0, 706, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 679, 704, 0,
	0, 0, 0, 693, 0, 0, 706, 701, 0, 0,
	0, 0, 0, 694, 0, 0, 0, 704, 0, 0,
	0, 0, 0, 0, 0, 0, 701, 0, 0, 0,
	0, 0, 694, 0, 700, 706, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 704, 0, 0, 0,
	0, 0, 0, 700, 0, 701, 0, 0, 0, 0,
	706, 694, 0, 0, 0, 0, 695, 0, 0, 0,
	0, 704, 0, 0, 0, 703, 0, 0, 0, 0,
	701, 0, 700, 0, 0, 695, 694, 0, 0, 0,
	0, 0, 0, 0, 703, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 700, 0, 0,
	0, 0, 0, 0, 695, 0, 0, 0, 0, 0,
	0, 0, 0, 703, 702, 0, 690, 691, 692, 0,
	689, 686, 687, 688, 681, 682, 683, 684, 685, 695,
	0, 0, 0, 702, 1381, 690, 691, 692, 703, 689,
	686, 687, 688, 681, 682, 683, 684, 685, 0, 0,
	0, 0, 0, 1319, 0, 0, 0, 0, 0, 0,
	0, 0, 702, 0, 690, 691, 692, 0, 689, 686,
	687, 688, 681, 682, 683, 684, 685, 0, 0, 0,
	0, 0, 1294, 0, 0, 0, 0, 702, 0, 690,
	691, 692, 0, 689, 686, 687, 688, 681, 682, 683,
	684, 685, 678, 0, 696, 697, 698, 951, 0, 0,
	0, 0, 0, 0, 699, 0, 0, 0, 0, 0,
	680, 678, 705, 696, 697, 698, 0, 0, 0, 0,
	0, 0, 0, 699, 0, 0, 0, 0, 0, 680,
	679, 705, 0, 0, 0, 0, 693, 0, 0, 0,
	678, 0, 696, 697, 698, 0, 0, 0, 0, 679,
	0, 0, 699, 0, 0, 693, 0, 0, 680, 0,
	705, 0, 0, 0, 0, 678, 0, 696, 697, 698,
	0, 0, 0, 0, 0, 0, 0, 699, 679, 0,
	0, 858, 0, 680, 693, 705, 0, 0, 0, 0,
	0, 0, 0, 706, 0, 0, 0, 1629, 0, 0,
	0, 0, 0, 679, 704, 0, 0, 0, 0, 693,
	0, 0, 706, 701, 0, 0, 0, 0, 0, 694,
	0, 0, 0, 704, 0, 0, 0, 1201, 0, 1200,
	0, 0, 701, 0, 859, 0, 0, 0, 694, 0,
	700, 706, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 704, 0, 0, 0, 0, 0, 0, 700,
	0, 701, 0, 0, 0, 0, 706, 694, 0, 0,
	0, 1628, 695, 0, 0, 0, 0, 704, 0, 0,
	0, 703, 0, 0, 0, 0, 701, 0, 700, 0,
	0, 695, 694, 0, 0, 0, 0, 0, 0, 0,
	703, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 700, 0, 0, 0, 0, 0, 0,
	695, 0, 0, 0, 0, 0, 0, 0, 0, 703,
	702, 0, 690, 691, 692, 0, 689, 686, 687, 688,
	681, 682, 683, 684, 685, 695, 0, 0, 1365, 702,
	0, 690, 691, 692, 703, 689, 686, 687, 688, 681,
	682, 683, 684, 685, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 702, 0,
	690, 691, 692, 0, 689, 686, 687, 688, 681, 682,
	683, 684, 685, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 702, 0, 690, 691, 692, 0, 689,
	686, 687, 688, 681, 682, 683, 684, 685, 708, 0,
	0, 0, 0, 0, 678, 0, 696, 697, 698, 0,
	0, 0, 0, 0, 0, 0, 699, 0, 0, 707,
	0, 0, 680, 678, 705, 696, 697, 698, 0, 0,
	0, 0, 0, 0, 0, 699, 0, 0, 0, 0,
	0, 680, 679, 705, 0, 0, 0, 0, 693, 0,
	0, 0, 0, 0, 678, 0, 696, 697, 698, 0,
	0, 679, 0, 0, 0, 0, 699, 693, 0, 0,
	0, 0, 680, 0, 705, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 679, 0, 0, 0, 0, 0, 693, 678,
	0, 696, 697, 698, 0, 706, 0, 0, 0, 0,
	0, 699, 0, 0, 0, 0, 704, 680, 0, 705,
	0, 0, 0, 0, 706, 701, 0, 0, 0, 0,
	0, 694, 0, 0, 0, 704, 0, 679, 0, 0,
	0, 0, 0, 693, 701, 0, 0, 0, 0, 0,
	694, 0, 700, 0, 0, 706, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 704, 0, 0, 0,
	0, 700, 253, 0, 0, 701, 0, 0, 0, 0,
	0, 694, 0, 0, 695, 0, 0, 0, 1207, 0,
	0, 0, 0, 703, 0, 0, 0, 0, 0, 0,
	706, 0, 700, 695, 0, 0, 0, 0, 0, 0,
	0, 704, 703, 0, 0, 0, 0, 0, 0, 0,
	701, 0, 0, 0, 0, 0, 694, 0, 0, 0,
	0, 0, 0, 0, 695, 0, 0, 1171, 0, 1187,
	1188, 1189, 702, 703, 690, 691, 692, 700, 689, 686,
	687, 688, 681, 682, 683, 684, 685, 0, 1313, 0,
	0, 702, 0, 690, 691, 692, 0, 689, 686, 687,
	688, 681, 682, 683, 684, 685, 0, 0, 0, 695,
	0, 1184, 0, 0, 0, 0, 0, 0, 703, 0,
	0, 0, 702, 0, 690, 691, 692, 0, 689, 686,
	687, 688, 681, 682, 683, 684, 685, 0, 0, 0,
	0, 0, 0, 0, 678, 0, 696, 697, 698, 0,
	0, 0, 0, 0, 0, 0, 699, 0, 0, 1202,
	0, 0, 680, 0, 705, 0, 0, 702, 0, 690,
	691, 692, 0, 689, 686, 687, 688, 681, 682, 683,
	684, 685, 679, 678, 0, 696, 697, 698, 693, 0,
	0, 0, 0, 0, 1185, 699, 0, 0, 0, 0,
	0, 680, 0, 705, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 679, 678, 0, 696, 697, 698, 693, 0, 0,
	0, 0, 0, 0, 699, 0, 0, 1164, 0, 0,
	680, 0, 705, 0, 0, 706, 0, 1186, 0, 0,
	0, 0, 0, 0, 0, 0, 704, 0, 0, 0,
	679, 0, 0, 0, 0, 701, 693, 0, 0, 0,
	0, 694, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 706, 0, 0, 0, 0, 0,
	0, 0, 700, 0, 0, 704, 0, 0, 0, 0,
	0, 0, 0, 0, 701, 0, 0, 1181, 1182, 1183,
	694, 1180, 1177, 1178, 1179, 1172, 1173, 1174, 1175, 1176,
	0, 0, 0, 706, 695, 0, 0, 0, 0, 0,
	0, 700, 0, 703, 704, 0, 0, 0, 0, 0,
	0, 1169, 0, 701, 0, 0, 0, 0, 0, 694,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 695, 0, 0, 0, 0, 0, 0,
	700, 0, 703, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 702, 0, 690, 691, 692, 0, 689, 686,
	687, 688, 681, 682, 683, 684, 685, 0, 0, 0,
	0, 0, 695, 0, 0, 0, 0, 0, 0, 0,
	0, 703, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 702, 0, 690, 691, 692, 0, 689, 686, 687,
	688, 681, 682, 683, 684, 685, 0, 678, 0, 696,
	697, 698, 0, 0, 0, 0, 0, 0, 0, 699,
	0, 0, 0, 0, 0, 680, 0, 705, 0, 0,
	702, 0, 690, 691, 692, 0, 689, 686, 687, 688,
	681, 682, 683, 684, 685, 679, 678, 0, 696, 697,
	698, 693, 0, 0, 0, 0, 0, 0, 699, 0,
	0, 0, 0, 0, 680, 0, 705, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 678, 679, 696, 697, 698, 0, 0,
	693, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 680, 1171, 705, 1187, 1188, 1189, 0, 706, 0,
	0, 0, 0, 0, 1433, 0, 0, 0, 0, 704,
	0, 679, 0, 0, 0, 0, 0, 693, 701, 0,
	0, 0, 0, 0, 694, 0, 0, 0, 1171, 0,
	1187, 1188, 1189, 0, 0, 0, 1184, 706, 0, 0,
	1289, 0, 0, 0, 0, 700, 0, 0, 704, 0,
	0, 0, 0, 0, 0, 0, 0, 701, 0, 0,
	0, 0, 0, 694, 0, 0, 0, 1171, 0, 1187,
	1188, 1189, 1184, 0, 706, 0, 0, 695, 0, 1288,
	1171, 0, 1187, 1188, 1189, 704, 703, 0, 0, 0,
	0, 0, 0, 0, 701, 0, 0, 0, 0, 0,
	694, 0, 0, 0, 1190, 0, 0, 0, 0, 0,
	0, 1184, 0, 0, 0, 0, 695, 0, 0, 1185,
	0, 0, 0, 0, 1184, 703, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 702, 0, 690, 691, 692,
	1190, 689, 686, 687, 688, 681, 682, 683, 684, 685,
	0, 0, 0, 695, 1171, 1185, 1187, 1188, 1189, 0,
	0, 0, 703, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1186, 0, 702, 0, 690, 691, 692, 1190,
	689, 686, 687, 688, 681, 682, 683, 684, 685, 0,
	0, 0, 1190, 0, 1185, 0, 0, 0, 1184, 0,
	0, 0, 0, 0, 0, 0, 0, 1185, 1186, 0,
	0, 702, 0, 690, 691, 692, 0, 689, 686, 687,
	688, 681, 682, 683, 684, 685, 0, 0, 0, 0,
	0, 0, 1181, 1182, 1183, 0, 1180, 1177, 1178, 1179,
	1172, 1173, 1174, 1175, 1176, 0, 0, 1186, 0, 0,
	0, 0, 0, 0, 0, 1191, 0, 0, 0, 0,
	1186, 0, 0, 0, 0, 0, 1190, 0, 1181, 1182,
	1183, 0, 1180, 1177, 1178, 1179, 1172, 1173, 1174, 1175,
	1176, 1185, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 887, 902, 878, 895, 894, 0, 0, 880,
	879, 0, 0, 0, 904, 903, 0, 1181, 1182, 1183,
	0, 1180, 1177, 1178, 1179, 1172, 1173, 1174, 1175, 1176,
	1181, 1182, 1183, 0, 1180, 1177, 1178, 1179, 1172, 1173,
	1174, 1175, 1176, 900, 1186, 892, 891, 0, 0, 0,
	0, 0, 0, 890, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 889, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 883, 884, 885,
	0, 554, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1181, 1182, 1183, 0, 1180, 1177,
	1178, 1179, 1172, 1173, 1174, 1175, 1176, 0, 0, 0,
	0, 0, 0, 893, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 888, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 886, 0, 0, 0, 0, 0, 882, 0,
	0, 0, 0, 0, 881, 0, 0, 901, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 905,
}
var sqlPact = [...]int{

	2521, -1000, -7, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 770,
	-1000, -1000, -1000, 476, 763, 41, 901, 901, -1000, -1000,
	15962, 2258, 333, 349, 333, 333, 333, 463, 504, 78,
	-1000, 676, -6, 15738, 12602, 1089, -15, 12154, 209, 2521,
	12378, 12602, 15514, 936, 873, 12154, 15290, 15066, 14842, -1000,
	8358, -1000, -1000, -1000, -1000, 697, -1000, -16, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 696, -1000, 14618, 14394,
	661, -1000, -1000, 405, 265, 1099, -1000, -2, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 935, -1000, 692, 934, 933,
	259, 677, -1000, 661, -1000, 661, -1000, -1000, -1000, 12154,
	-1000, 14170, 892, 13946, -1000, 676, -1000, -1000, -1000, 767,
	1082, 1082, 1082, 1136, 85, 84, 78, -25, 12602, -1000,
	212, -1000, -1000, -1000, -1000, -1000, -25, 6132, 6132, -1000,
	-1000, 209, -1000, 225, 10546, -143, -1000, 5886, -1000, 628,
	993, 576, 550, 991, 12154, 12602, 483, 13722, -1000, 985,
	76, 983, -1000, -31, 982, -1000, -44, -1000, -1000, -1000,
	-1000, -1000, -1000, 209, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 10790, 1000, 10790,
	-1000, 1154, -1000, -1000, -17, -18, 850, 851, 8848, 8604,
	1052, 1372, -1000, -1000, -1000, -4, 3410, 12602, 944, 10790,
	12602, -1000, 12602, -1000, 839, -1000, -1000, -21, -24, -1000,
	94, -1000, 208, 796, 13498, -1000, 793, -1000, 767, -1000,
	704, 833, 6642, 7380, 78, -1000, -1000, 78, 78, 7380,
	-1000, -1000, 12602, -25, 1153, 12602, 926, -87, -1000, 17724,
	-1000, -1000, 7380, 7380, 7380, 7380, 7380, 658, -1000, -1000,
	-1000, 4146, -1000, -1000, -143, 204, 96, -1000, -1000, 202,
	-143, -1000, -1000, -1000, -1000, 189, 1228, 352, -1000, -1000,
	-1000, 7380, 269, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 942, 188, 184, -1000, -1000, -1000, -1000, 183,
	181, 178, 176, 175, 173, 172, 171, 170, 168, 165,
	164, 163, 640, -1000, 290, -1000, -1000, 290, 290, -1000,
	149, 149, 150, -1000, -1000, -1000, 149, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 162, 107, -1000, -1000,
	-1000, 12602, -143, -1000, -1000, -1000, 3410, 7380, 3165, -45,
	-1000, 18327, -1000, -39, 612, -1000, 11696, 1071, 1066, 1084,
	12154, 452, 449, 12602, 275, 55, 1151, 10058, -1000, 12602,
	12602, -1000, 12602, -1000, -1000, 12602, 12602, 12602, -6, 11238,
	441, -33, 11014, 12602, -1000, -5, -1000, -1000, 925, 319,
	604, 862, 535, -1000, -1000, -1000, -1000, -26, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1198, -1000,
	-1000, -1000, -1000, 1220, -26, -1000, -1000, -1000, -1000, -1000,
	1227, -1000, -1000, -1000, -1000, 3410, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 12602, -1000, -1000, -1000, -1000, 604, 862, -1000,
	12154, 11462, 972, 691, 791, -1000, 966, -1000, -1000, -1000,
	-1000, 18327, -1000, 18327, 531, 882, -1000, 882, -29, -1000,
	17465, -1000, 161, -46, -1000, 275, 9814, 6132, 18701, 12602,
	456, 7380, 7380, 7380, 7380, 7380, 7380, 7380, 7380, 7380,
	7380, 7380, 7380, 7380, 7380, 7380, 7380, 7380, 7380, 7380,
	7380, 7380, 860, 439, 801, 646, 146, 3410, -1000, 1176,
	1176, 1176, 18403, 18403, 121, -144, 17139, -30, -143, -1000,
	-1000, 5376, 5130, -143, 3654, -1000, 521, 1217, 287, 18327,
	951, 903, 158, 83, 82, 7380, 631, 7380, 7626, 7380,
	7380, 4392, 7380, 7380, 7380, 7380, 7380, 7380, -1000, 156,
	-1000, -1000, -1000, -1000, 1216, -1000, -1000, 1215, -1000, 1210,
	275, 81, -1000, -1000, 2084, -1000, -1000, 5886, -1000, 570,
	12602, 12602, 12602, -1000, -1000, 773, 13274, -1000, 18701, 12602,
	-1000, 155, 151, 864, 861, 12602, 12602, 13050, 12826, 12602,
	553, 12602, 12602, 548, 541, 7380, 689, -1000, 9326, 295,
	12602, 95, -1000, -1000, -1000, 249, 12602, -1000, -1000, -1000,
	76, -1000, -31, -1000, -1000, 12602, 11014, -33, -35, -1000,
	-1000, 12602, 862, -1000, -1000, -1000, 486, -1000, 586, -1000,
	9092, -1000, -1000, -1000, 521, -1000, -42, -1000, -1000, -1000,
	-1000, 80, -36, -1000, -1000, -1000, -1000, 12602, 231, 12602,
	12602, 965, 12602, -1000, -1000, -1000, 7380, -1000, -1000, -1000,
	-6, 12602, -1000, 902, -38, 913, 11930, 11930, -1000, 2889,
	-1000, -1000, 1156, -1000, -1000, -1000, -1000, 57, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 150,
	640, 149, 149, 149, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 290, 290, 290, -1000, -1000, 258, 555, 555,
	1144, 1144, 1144, 366, 366, 1985, 1659, 1793, 1793, 1793,
	234, 264, 264, 1793, 1793, 1793, 18403, 18366, 203, 7380,
	437, 645, 146, 7380, -1000, 727, -1000, -1000, -1000, 922,
	144, 7626, 7626, -1000, -1000, -1000, 4146, -1000, -1000, 142,
	7380, -1000, 7380, -50, -51, -1000, 18327, -1000, -60, -1000,
	-1000, -32, 7380, 7380, 7380, 74, -1000, 425, -1000, 415,
	414, 393, -1000, 139, 71, 436, -1000, 7380, 662, 138,
	136, 7380, -1000, -1000, 18112, 70, 921, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 67, 18073, 62, 18584, -1000, 7626,
	7626, 7626, 4146, 135, 61, 17440, -124, 18034, 6378, 6378,
	6378, 50, 17819, 7380, -124, 2624, 2546, 2243, -61, -67,
	-68, 1205, -69, 49, 48, 902, -1000, -1000, 7380, -1000,
	-1000, -1000, 381, 364, 963, -1000, 761, -1000, 546, 7380,
	12602, 133, 132, 594, -1000, 962, 769, 961, 769, -1000,
	-39, 593, -1000, -1000, 361, -1000, 6132, 18327, 541, 1094,
	-73, -1000, -1000, 275, 10058, 5886, -78, -1000, -42, -1000,
	-42, -1000, -1000, -1000, -1000, -1000, -1000, 12602, -1000, 11462,
	131, 12602, 130, 129, 12602, -1000, -1000, 47, -1000, -1000,
	-1000, -1000, -1000, 899, 1131, 9814, 876, 875, 9814, 914,
	670, 670, 670, -1000, -1000, -1000, 12602, 128, -1000, 9570,
	45, 913, 219, 205, -1000, 1200, 7380, 203, 7380, 7626,
	7626, -1000, 203, -1000, -1000, -1000, -1000, 920, 123, 7380,
	18701, 18497, 18458, -79, 4884, -43, 17114, 7380, -1000, -1000,
	96, -1000, 43, 5640, -1000, 17743, -11, -11, -1000, 817,
	614, 542, 517, 1191, 1226, 999, -1000, 7380, 17774, -1000,
	10302, 277, 665, 17085, 18701, -1000, 7380, -1000, 919, 7380,
	-1000, 18701, 7626, 7626, 7626, 7626, 7626, 7626, 7626, 7626,
	7626, 7626, 7626, 7626, 7626, 7626, 7626, 7626, 7626, 7626,
	843, 7626, 1173, 1173, 1173, -53, 4638, -1000, 939, 919,
	7380, 7380, 18701, 42, 37, 34, -1000, 7380, -124, 7380,
	7380, 7380, -1000, -1000, -1000, 32, -1000, 1189, -1000, -1000,
	899, 17392, 12602, 12602, 12602, 957, 798, -1000, 17066, -80,
	12602, 12602, -1000, 841, 870, 313, 12602, -1000, 12602, -1000,
	12602, 12602, 12602, 12602, -87, -1000, 143, -6, 541, -1000,
	-1000, 247, -1000, -1000, 8114, 115, 11462, 8114, 686, -1000,
	272, 7380, 7380, 913, 9814, 9814, 1010, 871, 9814, -1000,
	-1000, -1000, -1000, 114, 12602, 11930, 354, 1182, 29, 1146,
	203, 18422, 1968, 7380, 18701, 2579, -85, -1000, 7380, 7380,
	-1000, -86, -1000, 7380, -1000, 18327, -1000, 1225, 7380, 28,
	27, 20, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 18,
	-1000, -1000, 18327, 7380, -1000, -1000, 16186, 7380, 17, -1000,
	15, 18327, 939, 18327, -1000, 498, 498, 1173, 1173, 1173,
	653, 653, 284, 1768, 611, 611, 611, 1685, 379, 379,
	611, 611, 611, 916, 809, 113, 18510, 7380, -90, -1000,
	-1000, -1000, 18327, 18327, 13, -1000, -1000, -1000, -124, 2157,
	16813, 16788, -1000, 12, 272, -1000, -1000, -1000, -1000, 12602,
	-1000, 12602, -1000, 12602, 756, -1000, -1000, 848, 110, 7626,
	12602, -1000, 622, -91, -92, 755, -1000, 730, 7380, -1000,
	18701, 769, 769, -1000, 360, 358, -1000, 1009, 8114, 1064,
	-1000, -1000, 106, -96, -1000, 72, 1115, 7380, -1000, -1000,
	105, 8114, 11, -97, 12602, -1000, 12602, 18327, -124, -1000,
	1010, -1000, 101, 7380, 9814, -1000, 12602, -98, -1000, -1000,
	216, 108, -1000, 7380, 7380, 2579, -102, -1000, 18701, 203,
	203, -1000, 16759, -1000, 17743, -1000, -1000, -1000, -1000, 18327,
	647, -1000, 16740, -1000, -1000, -1000, 7626, 909, 100, 18701,
	16487, -1000, -1000, 7380, -1000, -1000, -1000, -1000, -1000, 679,
	-1000, -1000, -1000, 7380, 18510, 58, -1000, 93, -1000, -1000,
	-1000, 547, -1000, -1000, 18327, 1116, -1000, -1000, 12602, 12602,
	387, -104, 12602, -1000, -1000, 3900, 622, 8114, 1092, -143,
	12602, 1092, 16462, 3654, -108, -1000, 622, 92, -122, -1000,
	1149, -1000, 12602, 18327, -1000, -112, -1000, -1000, -1000, 203,
	203, -1000, -1000, -1000, 5, 665, 1128, -1000, 17957, 7626,
	18701, -125, -1000, 16433, -1000, 16414, 826, 12602, 12602, 12602,
	300, 12602, -1000, -1000, 478, -1000, 275, -1000, -1000, -1000,
	-1000, -1000, -1000, 1115, -32, 622, -1000, 8114, 12602, 90,
	-126, -1000, -1000, 605, 7380, 17957, -127, -1000, -1000, -1000,
	680, 627, -131, -135, 58, -1000, 7380, -1000, 10058, -1000,
	1092, 4, -1000, -136, -1000, -1000, -1000, 2, 7134, 7134,
	-124, -1000, -1000, 685, 681, 484, -1000, -1000, -1000, -1000,
	-1000, 826, 18327, -118, -1000, -1000, 622, -1000, -1000, -1000,
	7870, 724, 529, 17411, -1000, -1000, 1026, -1000, 303, 779,
	779, 680, -1000, -1000, 1159, -1000, -1000, -1000, -1000, -1000,
	-1000, 1166, -1000, -1000, 849, -1000, -1000, 6888, -1000, -1000,
	-1000, -1000,
}
var sqlPgo = [...]int{

	0, 1414, 1413, 1150, 1412, 1411, 1409, 1407, 1406, 76,
	1405, 1404, 97, 1403, 75, 1400, 1399, 1398, 32, 1397,
	1396, 1394, 1393, 70, 55, 1755, 118, 112, 1391, 1390,
	1388, 21, 79, 73, 1387, 28, 74, 87, 1286, 47,
	33, 12, 161, 71, 1386, 1384, 1383, 1381, 38, 1379,
	1375, 1373, 10, 41, 13, 1372, 29, 95, 1369, 1368,
	85, 1367, 84, 88, 51, 103, 138, 1364, 52, 1363,
	9, 49, 1358, 25, 1356, 35, 54, 108, 1354, 34,
	497, 44, 16, 48, 1352, 1351, 1350, 1347, 77, 63,
	64, 1341, 1336, 60, 1333, 104, 107, 1332, 1329, 1328,
	1325, 1324, 1323, 1108, 1322, 1321, 536, 6, 22, 53,
	31, 98, 91, 27, 0, 547, 708, 1320, 40, 39,
	59, 37, 43, 15, 1315, 82, 1313, 1312, 1310, 1308,
	1307, 46, 1306, 45, 109, 20, 66, 72, 23, 36,
	65, 106, 119, 86, 1304, 92, 1298, 42, 1297, 1293,
	670, 50, 1292, 1285, 1282, 582, 580, 540, 24, 1281,
	1279, 472, 26, 1278, 1277, 62, 1276, 1274, 114, 1271,
	111, 94, 1270, 89, 1268, 69, 1267, 275, 90, 78,
	1265, 99, 57, 1264, 1263, 1256, 18, 3, 7, 5,
	4, 2, 17, 11, 1255, 1254, 100, 67, 1253, 521,
	1252, 1250, 30, 1249, 1248, 14, 1246, 19, 1244, 8,
	1, 1243, 113, 1241, 80, 1239, 1177, 1237, 115, 1236,
	1235, 1185, 61,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	4, 4, 33, 33, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 29,
	29, 35, 35, 35, 34, 34, 30, 30, 5, 5,
	5, 9, 10, 10, 10, 10, 10, 10, 65, 65,
	64, 64, 67, 67, 11, 11, 12, 12, 12, 12,
	146, 146, 145, 13, 17, 212, 212, 212, 216, 216,
	217, 217, 218, 218, 218, 218, 218, 218, 218, 214,
	214, 19, 19, 19, 19, 103, 103, 105, 105, 105,
	105, 37, 102, 102, 102, 102, 104, 104, 104, 104,
	170, 168, 168, 175, 175, 175, 45, 45, 45, 45,
	45, 46, 46, 46, 167, 167, 167, 167, 176, 176,
	176, 176, 176, 176, 47, 47, 47, 174, 174, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	169, 169, 213, 213, 215, 215, 8, 8, 48, 48,
	49, 49, 109, 109, 109, 108, 184, 184, 185, 185,
	185, 186, 186, 186, 186, 186, 186, 186, 183, 183,
	181, 181, 182, 182, 182, 182, 219, 219, 107, 107,
	52, 52, 189, 189, 189, 189, 187, 187, 187, 187,
	187, 190, 188, 191, 191, 191, 191, 191, 134, 134,
	134, 22, 7, 7, 92, 92, 56, 56, 138, 138,
	138, 41, 41, 31, 31, 31, 16, 16, 16, 16,
	16, 16, 16, 16, 16, 93, 93, 94, 94, 21,
	21, 21, 21, 21, 221, 221, 106, 106, 106, 106,
	106, 36, 6, 6, 14, 44, 44, 99, 99, 99,
	101, 101, 101, 100, 100, 100, 79, 79, 23, 70,
	70, 71, 71, 144, 72, 72, 18, 18, 25, 25,
	24, 24, 24, 24, 24, 24, 26, 26, 27, 27,
	27, 27, 27, 27, 27, 197, 197, 197, 199, 199,
	196, 15, 15, 15, 15, 198, 198, 220, 220, 80,
	80, 80, 51, 50, 50, 54, 54, 53, 55, 55,
	137, 77, 77, 77, 77, 95, 96, 96, 97, 97,
	98, 98, 76, 76, 121, 121, 28, 28, 60, 60,
	61, 61, 139, 139, 139, 139, 140, 140, 140, 140,
	140, 140, 135, 135, 135, 135, 136, 136, 83, 83,
	83, 83, 81, 81, 82, 82, 141, 141, 141, 141,
	78, 78, 142, 142, 142, 110, 110, 147, 147, 147,
	59, 59, 59, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 149, 149, 149, 149, 151, 151,
	151, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 152, 152, 159, 159, 160, 160,
	161, 162, 153, 153, 154, 154, 155, 156, 163, 163,
	163, 165, 165, 157, 157, 158, 89, 89, 89, 89,
	89, 89, 89, 89, 89, 89, 89, 89, 89, 89,
	90, 90, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 192, 192, 192, 192, 192, 192, 192,
	194, 194, 195, 195, 193, 193, 193, 193, 193, 193,
	193, 193, 193, 193, 193, 193, 193, 193, 193, 193,
	193, 193, 193, 193, 193, 193, 193, 193, 193, 200,
	200, 201, 201, 202, 202, 203, 203, 205, 206, 206,
	206, 207, 211, 211, 204, 204, 208, 208, 208, 209,
	209, 210, 210, 210, 210, 210, 125, 125, 125, 126,
	126, 127, 66, 66, 123, 123, 122, 122, 122, 124,
	124, 84, 164, 164, 164, 164, 164, 164, 164, 85,
	85, 91, 86, 86, 87, 87, 87, 87, 87, 87,
	118, 119, 88, 88, 88, 120, 120, 128, 132, 132,
	131, 130, 130, 129, 129, 113, 113, 113, 113, 113,
	112, 111, 73, 73, 222, 222, 133, 133, 74, 74,
	75, 69, 69, 68, 68, 143, 143, 143, 143, 62,
	62, 63, 63, 42, 42, 43, 43, 43, 43, 57,
	57, 58, 58, 40, 40, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 166, 166, 166, 38,
	38, 38, 39, 39, 172, 172, 172, 173, 173, 173,
	173, 171, 171, 171, 171, 171, 177, 177, 177, 177,
	177, 177, 177, 177, 177, 177, 177, 177, 177, 177,
	177, 177, 177, 177, 177, 177, 177, 177, 177, 177,
	177, 177, 177, 177, 177, 177, 177, 177, 177, 177,
	177, 177, 177, 177, 177, 177, 177, 177, 177, 177,
	177, 177, 177, 177, 177, 177, 177, 177, 177, 177,
	177, 177, 177, 177, 177, 177, 177, 177, 177, 177,
	177, 177, 177, 177, 177, 177, 177, 177, 177, 177,
	177, 177, 177, 177, 177, 177, 177, 177, 177, 177,
	177, 177, 177, 177, 177, 177, 177, 177, 177, 177,
	179, 179, 179, 179, 179, 179, 179, 179, 179, 179,
	179, 179, 179, 179, 179, 179, 179, 179, 179, 179,
	179, 179, 179, 179, 179, 179, 179, 179, 179, 179,
	179, 179, 179, 179, 179, 179, 179, 179, 179, 179,
	179, 179, 179, 178, 178, 178, 178, 178, 178, 178,
	178, 178, 178, 178, 178, 178, 180, 180, 180, 180,
	180, 180, 180, 180, 180, 180, 180, 180, 180, 180,
	180, 180, 180, 180, 180, 180, 180, 180, 180, 180,
	180, 180, 180, 180, 180, 180, 180, 180, 180, 180,
	180, 180, 180, 180, 180, 180, 180, 180, 180, 180,
	180, 180, 180, 180, 180, 180, 180, 180, 180, 180,
	180, 180, 180, 180, 180, 180, 180, 180, 180, 180,
	180, 180, 180, 180, 180, 180, 180, 180, 180, 180,
	180, 180, 180, 180,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	4, 6, 1, 3, 2, 5, 3, 6, 4, 6,
	6, 6, 4, 8, 2, 3, 3, 6, 4, 3,
	2, 1, 1, 0, 2, 0, 2, 0, 1, 1,
	1, 6, 3, 5, 4, 6, 3, 5, 1, 3,
	1, 2, 2, 3, 2, 5, 1, 1, 1, 1,
	1, 3, 1, 6, 6, 1, 2, 2, 1, 1,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 2, 3, 6, 3, 2, 1, 1, 1, 3,
	3, 2, 3, 3, 3, 3, 1, 3, 3, 2,
	1, 1, 3, 1, 1, 1, 2, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 1, 1, 1, 1, 1, 0, 1, 1, 2,
	2, 4, 2, 4, 4, 3, 3, 4, 3, 2,
	2, 0, 2, 0, 2, 0, 6, 9, 1, 0,
	1, 3, 1, 1, 1, 3, 2, 0, 3, 1,
	2, 2, 1, 1, 2, 4, 2, 5, 6, 7,
	3, 1, 4, 5, 5, 10, 1, 1, 4, 0,
	3, 0, 2, 2, 2, 0, 1, 1, 2, 2,
	0, 3, 3, 2, 1, 1, 2, 2, 1, 2,
	1, 4, 10, 13, 1, 0, 1, 3, 3, 3,
	5, 2, 0, 1, 1, 0, 6, 6, 8, 6,
	8, 8, 10, 8, 10, 1, 0, 2, 0, 3,
	3, 2, 2, 2, 1, 0, 1, 1, 3, 3,
	0, 3, 3, 6, 7, 1, 3, 1, 4, 2,
	8, 5, 0, 4, 3, 0, 2, 0, 8, 1,
	3, 1, 1, 3, 5, 5, 1, 1, 3, 3,
	1, 2, 3, 2, 3, 4, 1, 1, 8, 8,
	1, 2, 4, 4, 4, 2, 2, 3, 1, 3,
	6, 1, 1, 1, 1, 1, 0, 1, 0, 1,
	1, 0, 1, 1, 0, 1, 0, 3, 1, 3,
	2, 2, 2, 1, 1, 2, 2, 3, 1, 1,
	1, 1, 3, 0, 2, 0, 2, 3, 2, 0,
	1, 3, 2, 2, 1, 4, 3, 4, 5, 4,
	5, 4, 5, 2, 4, 1, 1, 0, 2, 2,
	2, 1, 1, 0, 4, 2, 1, 2, 2, 4,
	1, 3, 1, 2, 3, 2, 0, 2, 5, 2,
	3, 4, 0, 1, 1, 1, 1, 2, 4, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 5,
	0, 1, 1, 1, 1, 1, 1, 2, 2, 2,
	2, 2, 1, 1, 3, 0, 1, 1, 1, 1,
	5, 2, 1, 1, 1, 1, 4, 1, 2, 2,
	1, 1, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 3, 3, 3, 3, 3, 3, 0,
	1, 4, 1, 3, 3, 5, 2, 2, 2, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	2, 3, 4, 4, 5, 3, 4, 3, 3, 4,
	3, 4, 3, 4, 5, 6, 6, 7, 6, 7,
	6, 7, 3, 4, 1, 3, 2, 2, 2, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 5, 6, 6,
	7, 1, 1, 1, 3, 1, 1, 1, 2, 2,
	2, 1, 1, 3, 5, 6, 8, 6, 6, 4,
	4, 1, 1, 1, 5, 1, 3, 1, 3, 1,
	1, 1, 1, 6, 4, 4, 4, 4, 6, 5,
	5, 5, 4, 8, 6, 6, 4, 4, 4, 5,
	0, 5, 0, 2, 0, 1, 3, 3, 2, 2,
	0, 6, 1, 0, 3, 0, 2, 2, 0, 1,
	4, 2, 2, 2, 2, 2, 4, 3, 5, 4,
	3, 5, 1, 3, 1, 3, 3, 3, 2, 1,
	3, 3, 1, 1, 1, 1, 1, 1, 1, 4,
	3, 2, 3, 0, 3, 3, 2, 2, 1, 0,
	2, 2, 3, 2, 1, 1, 3, 5, 1, 2,
	4, 2, 0, 1, 0, 1, 1, 2, 3, 5,
	2, 2, 1, 2, 1, 0, 1, 1, 1, 3,
	3, 1, 0, 1, 3, 3, 2, 1, 1, 1,
	3, 1, 3, 1, 2, 1, 2, 2, 1, 1,
	3, 3, 0, 1, 2, 1, 1, 1, 1, 6,
	2, 3, 5, 1, 1, 1, 1, 2, 2, 1,
	1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -9, -10, -11, -13,
	-14, -16, -17, -18, -19, -20, -21, -22, -23, 19,
	-6, -7, -8, -198, 83, 89, 101, 184, -24, -25,
	197, 198, 29, 205, 52, 85, 186, 223, 58, -197,
	-27, -26, 267, 243, 249, 193, -28, 211, 236, 270,
	211, 70, 112, 78, 115, 230, 70, 112, 211, -12,
	267, -18, -14, -23, -9, -216, 18, -217, -218, 58,
	83, 101, 193, 115, 78, 230, -216, -103, 133, 195,
	219, -104, -102, -170, 215, 142, -64, -38, 4, -177,
	-179, 16, 17, 19, 28, 29, 33, 37, 40, 51,
	52, 53, 55, 57, 60, 61, 68, 69, 70, 71,
	73, 78, 82, 83, 89, 93, 94, 96, 102, 107,
	108, 115, 123, 125, 130, 136, 138, 139, 140, 141,
	144, 145, 146, 148, 151, 153, 154, 160, 163, 166,
	167, 170, 173, 174, 175, 177, 178, 180, 181, 182,
	184, 186, 187, 189, 191, 192, 194, 197, 198, 200,
	202, 204, 205, 208, 206, 212, 213, 223, 224, 225,
	226, 229, 230, 233, 234, 235, 239, 244, 245, 246,
	247, 30, 31, 32, 34, 35, 38, 39, 43, 44,
	45, 47, 72, 74, 75, 88, 90, 95, 103, 105,
	109, 110, 116, 117, 118, 120, 128, 150, 152, 161,
	165, 169, 171, 176, 188, 201, 207, 209, 216, 220,
	221, 236, 237, 4, 70, 51, 71, 102, 112, 212,
	215, 219, 18, -221, 219, 219, -221, -221, -221, -220,
	211, 211, -92, 70, 228, -26, -27, -25, -53, -54,
	227, 119, 87, 159, -24, -25, -197, -199, 177, -196,
	-38, 133, 142, 195, 219, 215, -199, -50, -51, 18,
	80, 271, -141, -42, 157, -38, -75, 267, -3, -141,
	109, -38, -42, 109, 99, 121, -142, -141, -38, 109,
	-62, 109, -42, -65, 109, -64, -146, -145, -173, 4,
	-177, -179, -178, 236, 49, 59, 100, 114, 122, 124,
	129, 131, 143, 162, 164, 185, 199, 156, 271, 156,
	-103, 45, -103, -105, -36, -37, 123, 173, 217, 252,
	99, 247, -47, 6, 76, -67, 269, 99, -213, 156,
	99, -169, 99, 247, 123, 173, -106, -36, -37, -106,
	-78, -141, -64, 109, 112, -38, 109, -53, -54, -77,
	-95, -96, 132, 155, -80, 18, 80, -80, -80, 37,
	268, 268, 271, -199, -58, 267, -69, -68, -143, -114,
	260, -116, 258, 259, 264, 147, 248, -125, -42, -117,
	9, 267, -128, -194, -25, 88, 24, -126, -127, 188,
	-38, 8, 5, 6, 7, -40, -149, -158, 222, 91,
	149, 41, -192, -193, 4, -177, -172, -150, -160, -154,
	-157, 120, 49, 63, 66, 64, 67, 196, 231, 42,
	90, 165, 169, 209, 220, 221, 109, 150, 110, 47,
	103, 128, 82, 31, 32, 34, 35, 43, 44, 72,
	74, 75, 95, 116, 117, 118, 152, 176, 201, 216,
	237, -178, -161, -162, -155, -156, -163, -68, -75, 260,
	-42, 267, -73, -113, -112, -111, 272, 265, 269, -74,
	-133, -114, 76, -33, 180, -32, 17, 19, 83, 234,
	88, 180, 180, 88, -142, -44, -42, 197, -38, 25,
	88, -35, 271, 40, 182, 88, 271, 88, 268, 271,
	-212, -63, 211, 70, -43, -38, 260, -218, -212, 25,
	271, 271, 130, -46, 136, 146, 107, -168, 76, -175,
	-167, -134, 9, 222, 91, 156, -174, 5, 259, -166,
	-173, 6, 8, 258, -168, 76, 61, -176, 6, 4,
	-158, -134, 76, 133, 120, 269, -171, 4, -177, -179,
	-178, -180, 18, 20, 21, 22, 23, 24, 25, 26,
	27, 36, 41, 42, 46, 48, 50, 56, 58, 62,
	63, 64, 65, 66, 67, 76, 77, 79, 80, 81,
	84, 85, 87, 91, 92, 97, 98, 99, 101, 104,
	106, 111, 112, 113, 119, 121, 126, 127, 132, 134,
	135, 147, 149, 155, 156, 157, 158, 159, 168, 172,
	179, 183, 193, 196, 203, 210, 211, 214, 217, 218,
	222, 227, 228, 231, 232, 238, 240, 241, 242, 243,
	-170, -215, 97, -212, -170, -170, 130, 271, 271, -35,
	271, 267, 147, -39, 109, -38, 147, -77, -96, -95,
	-97, -114, 18, -114, -116, -26, -26, -26, -55, -137,
	-114, -196, 25, -57, -38, -60, 99, 271, 10, 48,
	28, 258, 259, 260, 261, 262, 255, 256, 257, 254,
	250, 251, 252, 54, 137, 190, 12, 13, 14, 22,
	158, 131, 248, 199, 122, 30, 111, 25, 4, -114,
	-114, -114, -114, -114, 164, -25, -114, -66, -73, -25,
	-122, 265, 267, -73, 267, 6, 6, 267, -129, -114,
	-200, 244, 97, 267, 267, 267, 267, 267, 267, 267,
	267, 267, 267, 267, 267, 267, 267, 267, 171, -165,
	239, -165, -165, -151, 267, -151, -152, 267, -151, 267,
	-60, -42, -113, -171, -114, -171, 260, 271, 268, 271,
	217, -93, 56, 50, -108, 109, 50, -181, -38, 56,
	-182, 46, 228, 172, 98, -93, 56, -93, 56, 56,
	-141, 217, 217, -42, -110, 241, -99, -18, 267, 76,
	25, -70, -71, -144, -72, -42, 267, -38, -38, -42,
	-62, -64, -65, -12, -145, 217, 271, -63, -57, -112,
	-111, 99, 219, -37, -36, -45, 175, 202, 181, 194,
	271, 5, 8, 8, 6, -171, -214, -38, -37, -36,
	-141, -48, -49, -109, -108, -183, -181, 112, 228, 88,
	156, 147, 88, -98, 188, 189, 271, -31, 26, 79,
	267, 271, 268, -110, -61, -139, -141, -25, -140, 267,
	-143, -147, -148, -150, -159, -153, -157, -158, 33, 39,
	38, 213, 207, 116, 117, 118, 201, 31, 176, 95,
	82, 75, 74, 152, 35, 34, -161, -162, -155, -156,
	72, 216, 32, 44, 43, 237, -64, 215, -114, -114,
	-114, -114, -114, -114, -114, -114, -114, -114, -114, -114,
	-114, -114, -114, -114, -114, -114, -114, -114, -114, 131,
	199, 30, 111, 217, 149, 147, 222, 91, 229, 80,
	153, -222, 210, 27, -120, -25, 267, -171, -125, 188,
	267, 268, 271, -66, -124, 266, -114, -122, -66, 268,
	268, -66, 238, 18, 80, 260, -89, 246, 140, 73,
	108, 139, -90, 192, 8, -132, -131, 240, -201, 93,
	104, 267, 268, 268, -114, -84, -164, 4, 246, 140,
	73, 108, 139, 192, -85, -114, -86, -115, -116, 258,
	259, 264, 267, 188, -87, -114, -66, -114, 36, 127,
	218, -88, -114, 99, -66, -114, -114, -114, -66, -66,
	-66, 267, 8, 8, 8, -110, 268, 266, 273, -133,
	-32, -42, -38, -38, 147, -108, 109, -147, -38, 267,
	267, 125, 125, -38, -38, 109, -38, 109, -38, -38,
	-33, 180, -38, -38, 180, -79, 183, -114, -101, 156,
	-62, 236, -38, -60, 271, 252, -62, -35, -214, -43,
	-214, -36, 226, 53, 175, -175, -89, 271, 268, 271,
	-39, 112, -64, -42, 88, -38, -137, -15, -18, -14,
	-23, -9, -38, -76, 104, 271, 59, -83, 124, 143,
	100, 129, 185, 114, -136, -135, 25, -38, -136, -25,
	-140, -139, -59, 24, -89, 267, 247, -114, 217, -222,
	210, -120, -114, 149, 222, 91, 229, 80, 153, 99,
	267, -115, -115, -66, 267, -66, -114, 271, 266, 266,
	271, 268, -54, 271, -53, -114, -66, -66, 268, 217,
	217, 217, 217, 267, 268, -130, -131, 84, -114, -206,
	163, 267, 267, -114, 25, 268, 99, 268, -91, 168,
	268, 10, 258, 259, 260, 261, 262, 255, 256, 257,
	254, 250, 251, 252, 54, 137, 190, 12, 13, 14,
	122, 111, -115, -115, -115, -66, 267, 268, -118, -119,
	99, 97, 25, -88, -88, -88, 268, 99, -66, 271,
	271, 271, 268, 268, 268, 8, 268, 271, 268, 268,
	-76, -114, 217, 217, 88, 147, -184, -182, -114, -57,
	267, 267, -29, 83, 197, -94, 88, -35, 88, -35,
	217, -93, 56, 217, -68, -79, 55, 268, -110, -71,
	-133, 268, -38, -109, 267, -39, 267, 267, -38, 268,
	-121, 106, 37, -139, 124, 124, -139, -83, 124, -81,
	162, -81, -81, -38, 267, 268, 265, 265, 8, -114,
	-114, -115, -115, 99, 267, -114, -123, -147, 22, 22,
	268, -66, 268, 271, 268, -114, -122, 268, 238, -54,
	-54, -54, 140, 108, 139, -90, 139, -90, -90, 8,
	6, 85, -114, 214, -207, -38, 267, 241, -53, 268,
	-147, -114, -118, -114, -147, -115, -115, -115, -115, -115,
	-115, -115, -115, -115, -115, -115, -115, -115, -115, -115,
	-115, -115, -115, 80, 147, 153, -115, 271, -66, 268,
	-119, -118, -114, -114, -147, 268, 268, 268, -66, -114,
	-114, -114, 268, 8, -121, 266, -38, -38, -108, 88,
	-185, 56, -186, 48, 147, 149, 228, 172, 46, 76,
	179, 268, 268, -57, -57, 147, 76, 147, 76, 69,
	224, -38, -38, -42, -38, -38, -38, -100, 267, 156,
	-18, -79, 252, -56, -138, -38, -195, 267, -192, -193,
	-40, 267, -48, -56, 156, -202, 242, -114, -66, -139,
	-139, -82, 232, 156, 124, -139, 267, -57, -135, 266,
	8, 8, 268, 22, 22, -114, -123, 268, 271, -114,
	-114, 268, -114, 6, -114, 268, 268, 268, 268, -114,
	-211, -38, -114, 268, 268, -119, 99, 80, 153, 267,
	-114, 268, 268, 271, 268, 268, 268, -202, -108, -38,
	-64, 149, 125, 267, -115, -42, -107, -219, 57, 208,
	268, 268, 149, 149, -114, -147, -35, -35, 217, 217,
	81, -56, 56, -75, -25, 267, 268, 271, -41, -73,
	48, -41, -114, 267, -56, 268, 268, -42, -203, -205,
	-38, -82, 267, -114, -139, -57, 268, 266, 266, -114,
	-114, 268, -147, 268, -54, -204, 167, 268, -115, 99,
	267, -123, 268, -114, -186, -114, -52, 267, 267, 179,
	-34, 48, -38, -38, 230, 148, 268, -38, -107, -138,
	-31, -64, -31, 268, -66, 268, -107, 267, 271, 25,
	-57, 268, 268, -54, 37, -115, -123, 268, 268, 268,
	-189, 138, -57, -57, -42, -30, 232, -64, 197, -110,
	-41, -54, -107, -56, -205, -207, 268, -208, 174, 189,
	-66, 268, -187, -190, -188, 156, 100, 166, 200, 268,
	268, -52, -114, -70, -31, 268, 268, 268, -209, -210,
	30, 225, 61, -114, -209, -188, 156, -190, 156, 230,
	78, -189, -110, -107, -210, 170, 96, 188, 170, 96,
	-191, 145, 182, 40, 197, -191, -187, 22, 16, 149,
	76, -210,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 0,
	48, 49, 50, 0, 0, 306, 0, 0, 276, -2,
	0, 0, 245, 0, 245, 245, 245, 308, 215, 305,
	-2, 316, 0, 0, 0, 314, 290, 0, 0, -2,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 64,
	0, 66, 67, 68, 69, 0, 78, 79, 80, 82,
	83, 84, 85, 86, 87, 88, 0, 91, 760, 794,
	805, 96, 106, 0, 857, -2, 110, 60, 709, 710,
	711, 726, 727, 728, 729, 730, 731, 732, 733, 734,
	735, 736, 737, 738, 739, 740, 741, 742, 743, 744,
	745, 746, 747, 748, 749, 750, 751, 752, 753, 754,
	755, 756, 757, 758, 759, 761, 762, 763, 764, 765,
	767, 768, 769, 770, 771, 772, 773, 774, 775, 776,
	777, 778, 779, 780, 781, 782, 783, 784, 785, 786,
	787, 788, 789, 790, 791, 792, 793, 795, 796, 797,
	798, 799, 800, 801, 802, 803, 804, 806, 807, 808,
	809, 810, 811, 812, 813, 814, 815, 816, 817, 818,
	819, 820, 821, 822, 823, 824, 825, 826, 827, 828,
	829, 830, 831, 832, 833, 834, 835, 836, 837, 838,
	839, 840, 841, 842, 843, 844, 845, 846, 847, 848,
	849, 850, 851, 852, 853, 854, 855, 856, 858, 859,
	860, 861, 862, 139, 140, 0, 142, 153, 0, 151,
	0, 0, 149, 250, 244, 250, 241, 242, 243, 0,
	307, 0, 0, 0, 214, -2, 286, 287, -2, 0,
	311, 311, 311, 0, 0, 287, 0, 295, 782, 298,
	692, 760, 766, 794, 805, 857, 296, 672, 0, 313,
	312, 0, 291, 366, 0, 683, 336, 0, 2, 0,
	839, 0, 0, 839, 0, 0, 0, 372, 52, 839,
	43, 839, 679, 56, 839, 58, 0, 70, 72, 717,
	718, 719, 720, 861, 863, 864, 865, 866, 867, 868,
	869, 870, 871, 872, 873, 874, 875, 0, 0, 0,
	92, 829, 94, 95, 97, 98, 0, 0, 0, 0,
	0, 0, 109, 134, 135, 61, 0, 0, 155, 0,
	0, 145, 0, 146, 0, 148, 239, 246, 247, 240,
	43, 370, 0, 839, 713, 252, 839, -2, 0, 282,
	323, 324, 0, 0, 0, 309, 310, 0, 0, 0,
	278, 279, 0, 297, 0, 0, 339, 671, 673, 677,
	678, 452, 0, 0, 0, 0, 0, 0, 531, 532,
	533, 0, 535, 536, 537, 834, 0, 541, 542, 853,
	683, 695, 696, 697, 698, 0, 0, 0, 703, 704,
	705, 654, 580, 551, -2, -2, 693, 394, 395, 396,
	397, -2, 863, 555, 557, 559, 560, 561, 562, 0,
	835, 849, 850, 856, 859, 860, 839, 846, 840, 830,
	837, 845, 747, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, 716, 418, 419, 424, 425, 427, 339, 337, 367,
	368, 0, 684, 662, 655, 656, 0, 0, 0, 0,
	668, 666, 667, 20, 236, 22, 0, 236, 236, 0,
	0, 0, 0, 0, 376, 0, 255, 0, 373, 0,
	0, 54, 0, 41, 42, 0, 0, 0, 306, 0,
	0, 75, 0, 743, 681, 685, 688, 81, 0, 0,
	0, 0, 0, 101, 121, 122, 123, 102, 104, 111,
	113, 114, 115, 124, 125, 126, 127, 208, 0, 210,
	137, 138, 706, 0, 103, 105, 107, 108, 128, 129,
	0, 131, 132, 133, 435, 0, 62, 721, 722, 723,
	724, 725, 876, 877, 878, 879, 880, 881, 882, 883,
	884, 885, 886, 887, 888, 889, 890, 891, 892, 893,
	894, 895, 896, 897, 898, 899, 900, 901, 902, 903,
	904, 905, 906, 907, 908, 909, 910, 911, 912, 913,
	914, 915, 916, 917, 918, 919, 920, 921, 922, 923,
	924, 925, 926, 927, 928, 929, 930, 931, 932, 933,
	934, 935, 936, 937, 938, 939, 940, 941, 942, 943,
	944, 945, 946, 947, 948, 949, 950, 951, 952, 953,
	141, 143, 0, 152, 144, 150, 147, 0, 0, 211,
	0, 159, 0, 0, 839, 712, 0, 285, 321, 322,
	325, 328, 329, 326, 452, 292, 293, 294, 317, 318,
	225, 299, 0, 0, 689, 376, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 665, 0, 0, 676, 456,
	457, 458, 479, 480, 0, -2, 612, 0, 538, 539,
	540, 0, 0, -2, 0, 700, 449, 0, 0, 653,
	582, 0, 0, 0, 0, 0, 0, 0, 633, 639,
	0, 0, 0, 0, 0, 0, 0, 0, 408, 421,
	431, 429, 428, 410, 0, 409, 407, 0, 411, 0,
	376, 0, 663, 657, 0, 660, 661, 0, 670, 0,
	0, 0, 0, 235, 24, 839, 0, 34, 0, 0,
	181, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 267, 0, 262, 257, 0, 0,
	0, 339, 269, 271, 272, 0, 0, 374, 53, 680,
	43, 59, 57, 65, 71, 0, 0, 76, 77, 686,
	687, 0, 0, 99, 100, 251, 0, 118, 0, 120,
	0, 209, 708, 707, 449, 63, 154, 89, 248, 249,
	371, 0, 158, 160, 162, 163, 164, 713, 0, 0,
	0, 0, 0, 327, 330, 331, 0, 320, 223, 224,
	306, 0, 691, 333, 338, 340, 357, 357, 344, 0,
	674, 453, 382, 383, 384, 385, 386, 449, 389, 390,
	391, 392, 393, 401, 402, 403, 404, 405, 406, 415,
	0, 400, 400, 400, 412, 413, 416, 417, 422, 423,
	433, 434, 432, 432, 432, 430, 454, 0, 459, 460,
	461, 462, 463, 464, 465, 466, 467, -2, -2, -2,
	471, 472, 473, -2, -2, -2, 477, 478, -2, 0,
	0, 665, 0, 0, 485, 0, 488, 490, 492, 0,
	0, 0, 0, 664, 502, 645, 0, 675, 487, 0,
	0, 534, 0, 0, 0, 618, 612, 619, 0, -2,
	543, 316, 0, 0, 0, 0, 701, 436, 437, 438,
	439, 440, 441, 450, 0, 652, 648, 0, 590, 0,
	0, 0, 556, 558, 0, 0, 0, 622, 623, 624,
	625, 626, 627, 628, 0, 0, 0, 0, 504, 0,
	0, 0, 0, 853, 0, 612, 638, 0, 0, 0,
	0, 0, 612, 0, 644, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 333, 369, 658, 0, 669,
	23, 227, 0, 0, 0, 26, 839, 167, 0, 0,
	0, 0, 0, 238, 35, 839, 43, 839, 43, 36,
	21, 236, 226, 229, 0, 51, 0, 375, 267, 0,
	0, 259, 256, 376, 0, 0, 0, 55, 73, 682,
	74, 93, 116, 117, 119, 112, 130, 0, 156, 0,
	0, 713, 0, 0, 0, 253, 319, 0, 301, 302,
	303, 304, 690, 335, 0, 0, 0, 0, 0, 0,
	363, 363, 363, 361, 342, 356, 0, 355, 343, -2,
	344, 0, 377, 379, 387, 0, 0, -2, 0, 0,
	0, 503, -2, 486, 489, 491, 493, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 613, 0, 616, 617,
	0, -2, 0, 0, 315, 316, 316, 316, 549, 0,
	0, 0, 0, 0, 0, 0, 649, 0, 0, 550,
	0, 0, 0, 0, 0, 564, 0, 565, 0, 0,
	566, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 506, 507, 508, 0, 0, 567, 636, 637,
	0, 0, 0, 0, 0, 0, 572, 0, 643, 0,
	0, 0, 576, 577, 578, 0, 398, 0, 414, 426,
	335, 0, 0, 0, 0, 0, 165, 180, 0, 0,
	0, 0, 28, 0, 0, 0, 0, 32, 0, 38,
	0, 0, 0, 0, 266, 254, 265, 0, 267, 270,
	273, 0, 90, 161, 0, 0, 159, 0, 0, 300,
	584, 0, 0, 341, 0, 0, 0, 0, 0, 358,
	362, 359, 360, 353, 0, 346, 0, 0, 0, 455,
	-2, 0, 0, 0, 0, -2, 0, 614, 0, 0,
	646, 0, 607, 0, -2, 613, 620, 544, 0, 0,
	0, 0, 442, 443, 444, 445, 446, 447, 448, 0,
	702, 647, 651, 0, 588, 589, 593, 0, 0, 554,
	0, 621, 630, 631, 505, 509, 510, 511, 512, 513,
	514, 515, 516, 517, -2, -2, -2, 521, 522, 523,
	-2, -2, -2, 0, 0, 0, 632, 0, 0, 610,
	634, 635, 640, 641, 0, 569, 570, 571, 642, 0,
	0, 0, 420, 0, 584, 659, 231, 233, 25, 0,
	166, 0, 169, 0, 0, 172, 173, 0, 0, 0,
	0, 182, 189, 0, 0, 0, 40, 0, 0, 237,
	0, 43, 43, 228, 0, 0, 230, 0, 0, 0,
	258, 268, 0, 0, 216, 222, 222, 0, 552, 553,
	0, 0, 0, 0, 0, 288, 0, 334, 332, 347,
	0, 349, 0, 0, 0, 351, 0, 0, 345, 380,
	0, 0, 388, 0, 0, -2, 0, 496, 0, -2,
	-2, 606, 613, 699, 316, 545, 547, 548, 451, 650,
	595, 592, 0, 579, 563, 629, 0, 0, 0, 0,
	613, 609, 568, 0, 574, 575, 399, 289, 27, 0,
	170, 171, 174, 0, 176, 191, 183, 0, 186, 187,
	184, 0, 29, 30, 39, 45, 31, 37, 0, 0,
	0, 0, 0, 274, 275, 0, 189, 0, 225, 694,
	0, 225, 0, 0, 0, 157, 189, 0, 583, 585,
	0, 348, 0, 365, 350, 0, 354, 381, 378, -2,
	-2, 497, 615, 608, 0, 316, 0, 581, -2, 0,
	0, 0, 611, 0, 168, 0, 195, 0, 0, 0,
	47, 0, 232, 234, 0, 261, 376, 264, 178, 217,
	218, 221, 219, 222, 316, 189, 212, 0, 0, 0,
	0, 352, 546, 598, 0, -2, 0, 529, 573, 175,
	200, 0, 0, 0, 191, 33, 0, 44, 0, 263,
	225, 0, 179, 0, 586, 587, 364, 0, 0, 0,
	594, 530, 177, 196, 197, 0, 192, 193, 194, 190,
	188, 195, 46, 376, 220, 544, 189, 591, 596, 599,
	-2, 808, 740, 0, 597, 198, 0, 199, 0, 0,
	0, 200, 260, 213, 0, 601, 602, 603, 604, 605,
	201, 0, 204, 205, 0, 202, 185, 0, 203, 206,
	207, 600,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 256, 3, 262, 257, 3,
	267, 268, 260, 258, 271, 259, 269, 261, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 273, 270,
	250, 252, 251, 3, 272, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 265, 3, 266, 255, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 254, 3, 264,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 253, 263,
}
var sqlTok3 = [...]int{
	0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:623
		{
			sqllex.(*scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:629
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:635
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 13:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:654
		{
			sqlVAL.union.val = sqlDollar[1].union.selectStmt()
		}
	case 19:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:663
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 20:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:669
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.qname(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 21:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:673
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.qname(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 22:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:679
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 23:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:683
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 24:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:690
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 25:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:695
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 26:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:700
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 27:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:705
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 28:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:709
		{
			unimplemented()
		}
	case 29:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:711
		{
			unimplemented()
		}
	case 30:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:713
		{
			unimplemented()
		}
	case 31:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:716
		{
			sqlVAL.union.val = &AlterTableDropColumn{columnKeyword: sqlDollar[2].union.bool(), IfExists: true, Column: sqlDollar[5].str}
		}
	case 32:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:721
		{
			sqlVAL.union.val = &AlterTableDropColumn{columnKeyword: sqlDollar[2].union.bool(), IfExists: false, Column: sqlDollar[3].str}
		}
	case 33:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:726
		{
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:729
		{
			sqlVAL.union.val = &AlterTableAddConstraint{ConstraintDef: sqlDollar[2].union.constraintDef()}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:733
		{
			unimplemented()
		}
	case 36:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:735
		{
			unimplemented()
		}
	case 37:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:738
		{
			sqlVAL.union.val = &AlterTableDropConstraint{IfExists: true, Constraint: sqlDollar[5].str}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:743
		{
			sqlVAL.union.val = &AlterTableDropConstraint{IfExists: false, Constraint: sqlDollar[3].str}
		}
	case 39:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:748
		{
			unimplemented()
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:749
		{
			unimplemented()
		}
	case 41:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:752
		{
			unimplemented()
		}
	case 42:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:753
		{
			unimplemented()
		}
	case 43:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:754
		{
		}
	case 44:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:757
		{
			unimplemented()
		}
	case 45:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:758
		{
		}
	case 46:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:761
		{
			unimplemented()
		}
	case 47:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:762
		{
		}
	case 51:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:773
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retExprs()}
		}
	case 52:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:780
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 53:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:784
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 54:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:788
		{
			sqlVAL.union.val = &DropIndex{Names: sqlDollar[3].union.qnames(), IfExists: false}
		}
	case 55:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:792
		{
			sqlVAL.union.val = &DropIndex{Names: sqlDollar[5].union.qnames(), IfExists: true}
		}
	case 56:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:796
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.qnames(), IfExists: false}
		}
	case 57:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:800
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.qnames(), IfExists: true}
		}
	case 58:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:806
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:810
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 60:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:816
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:820
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:826
		{
			sqlVAL.union.val = Indirection{NameIndirection(sqlDollar[2].str)}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:830
		{
			sqlVAL.union.val = append(sqlDollar[1].union.indirect(), NameIndirection(sqlDollar[3].str))
		}
	case 64:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:837
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:841
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 66:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:847
		{
			sqlVAL.union.val = sqlDollar[1].union.selectStmt()
		}
	case 70:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:856
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 71:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:860
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 73:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:870
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: NameList(sqlDollar[6].union.strs()), Targets: sqlDollar[4].union.targetList()}
		}
	case 74:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:877
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: NameList(sqlDollar[6].union.strs()), Targets: sqlDollar[4].union.targetList()}
		}
	case 75:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:884
		{
			sqlVAL.union.val = TargetList{Tables: QualifiedNames(sqlDollar[1].union.qnames())}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:888
		{
			sqlVAL.union.val = TargetList{Tables: QualifiedNames(sqlDollar[2].union.qnames())}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:892
		{
			sqlVAL.union.val = TargetList{Databases: NameList(sqlDollar[2].union.strs())}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:899
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:902
		{
		}
	case 80:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:906
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:910
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 82:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:917
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 83:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:921
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 84:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:925
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 85:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:929
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 86:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:933
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 87:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:937
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 88:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:941
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 89:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:949
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:953
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 91:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:961
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 92:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:965
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 93:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:969
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:973
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 95:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:979
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 97:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:986
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:990
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:994
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:998
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1005
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1011
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname(), Values: sqlDollar[3].union.exprs()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1015
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname(), Values: sqlDollar[3].union.exprs()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1019
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname()}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1023
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname()}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1030
		{
			unimplemented()
		}
	case 108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1033
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1036
		{
			unimplemented()
		}
	case 111:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1043
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1047
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1055
		{
			sqlVAL.union.val = ValArg{name: sqlDollar[1].str}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1061
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 117:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1065
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1069
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1073
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1077
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1083
		{
			sqlVAL.union.val = Low
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1087
		{
			sqlVAL.union.val = Normal
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1091
		{
			sqlVAL.union.val = High
		}
	case 124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1097
		{
			sqlVAL.union.val = DBool(true)
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1101
		{
			sqlVAL.union.val = DBool(false)
		}
	case 126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1105
		{
			sqlVAL.union.val = DString(sqlDollar[1].str)
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1120
		{
			sqlVAL.union.val = DString(sqlDollar[1].str)
		}
	case 129:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1124
		{
			sqlVAL.union.val = DString(sqlDollar[1].str)
		}
	case 130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1128
		{
			expr := &CastExpr{Expr: DString(sqlDollar[2].str), Type: sqlDollar[1].union.colType()}
			var ctx EvalContext
			d, err := expr.Eval(ctx)
			if err != nil {
				sqllex.Error("cannot evaluate to an interval type")
				return 1
			}
			if _, ok := d.(DInterval); !ok {
				panic("not an interval type")
			}
			sqlVAL.union.val = d
		}
	case 132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1143
		{
			sqlVAL.union.val = DString(sqlDollar[1].str)
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1147
		{
			sqlVAL.union.val = DString(sqlDollar[1].str)
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1152
		{
			unimplemented()
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1153
		{
			unimplemented()
		}
	case 136:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1154
		{
		}
	case 137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1158
		{
			sqlVAL.union.val = DString(sqlDollar[1].str)
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1162
		{
			sqlVAL.union.val = DString(sqlDollar[1].str)
		}
	case 139:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1168
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1172
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1176
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.qname()}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1180
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1184
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.strs()}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1188
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1192
		{
			sqlVAL.union.val = &ShowTables{Name: sqlDollar[3].union.qname()}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1196
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1200
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1204
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1208
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1214
		{
			sqlVAL.union.val = sqlDollar[2].union.qname()
		}
	case 151:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1218
		{
			sqlVAL.union.val = (*QualifiedName)(nil)
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1224
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 153:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1229
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1235
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 155:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1239
		{
			sqlVAL.union.val = []string(nil)
		}
	case 156:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1246
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.qname(), IfNotExists: false, Defs: sqlDollar[5].union.tblDefs()}
		}
	case 157:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1250
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.qname(), IfNotExists: true, Defs: sqlDollar[8].union.tblDefs()}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1257
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1263
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1267
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1273
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1278
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 165:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1284
		{
			sqlVAL.union.val = newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
		}
	case 166:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1290
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 167:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1294
		{
			sqlVAL.union.val = []ColumnQualification(nil)
		}
	case 168:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1300
		{
			sqlVAL.union.val = sqlDollar[3].union.colQual()
		}
	case 170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1304
		{
			unimplemented()
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1320
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1324
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1328
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1332
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1335
		{
			unimplemented()
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1337
		{
			if ContainsVars(sqlDollar[2].union.expr()) {
				sqllex.Error("default expression contains a variable")
				return 1
			}
			if containsSubquery(sqlDollar[2].union.expr()) {
				sqllex.Error("default expression contains a subquery")
				return 1
			}
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1348
		{
			unimplemented()
		}
	case 178:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1352
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.idxElems(),
				Storing: sqlDollar[6].union.strs(),
			}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1360
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:    Name(sqlDollar[3].str),
					Columns: sqlDollar[5].union.idxElems(),
					Storing: sqlDollar[7].union.strs(),
				},
			}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1375
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1380
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 182:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1385
		{
			unimplemented()
		}
	case 183:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1387
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[3].union.strs()),
					Storing: sqlDollar[5].union.strs(),
				},
			}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1396
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[4].union.strs()),
				},
				PrimaryKey: true,
			}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1405
		{
			unimplemented()
		}
	case 188:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1422
		{
			sqlVAL.union.val = sqlDollar[3].union.strs()
		}
	case 189:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1426
		{
			sqlVAL.union.val = []string(nil)
		}
	case 190:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1432
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 191:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1436
		{
			sqlVAL.union.val = []string(nil)
		}
	case 192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1441
		{
			unimplemented()
		}
	case 193:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1442
		{
			unimplemented()
		}
	case 194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1443
		{
			unimplemented()
		}
	case 195:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1444
		{
		}
	case 196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1451
		{
			unimplemented()
		}
	case 197:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1452
		{
			unimplemented()
		}
	case 198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1453
		{
			unimplemented()
		}
	case 199:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1454
		{
			unimplemented()
		}
	case 200:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1455
		{
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1458
		{
			unimplemented()
		}
	case 202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1461
		{
			unimplemented()
		}
	case 203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1464
		{
			unimplemented()
		}
	case 204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1465
		{
			unimplemented()
		}
	case 205:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1466
		{
			unimplemented()
		}
	case 206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1467
		{
			unimplemented()
		}
	case 207:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1468
		{
			unimplemented()
		}
	case 208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1472
		{
			sqlVAL.union.val = NumVal(sqlDollar[1].str)
		}
	case 209:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1476
		{
			sqlVAL.union.val = NumVal("-" + sqlDollar[2].str)
		}
	case 210:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1480
		{
			sqlVAL.union.val = DInt(sqlDollar[1].union.ival().Val)
		}
	case 211:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1487
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.qnames()}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1494
		{
			sqlVAL.union.val = &CreateIndex{
				Name:    Name(sqlDollar[4].str),
				Table:   sqlDollar[6].union.qname(),
				Unique:  sqlDollar[2].union.bool(),
				Columns: sqlDollar[8].union.idxElems(),
				Storing: sqlDollar[10].union.strs(),
			}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql.y:1504
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.qname(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.strs(),
			}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1517
		{
			sqlVAL.union.val = true
		}
	case 215:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1521
		{
			sqlVAL.union.val = false
		}
	case 216:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1527
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1531
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 218:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1540
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1543
		{
			unimplemented()
		}
	case 220:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1544
		{
			unimplemented()
		}
	case 221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1547
		{
			unimplemented()
		}
	case 222:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1548
		{
		}
	case 223:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1552
		{
			sqlVAL.union.val = Ascending
		}
	case 224:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1556
		{
			sqlVAL.union.val = Descending
		}
	case 225:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1560
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 226:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1567
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 227:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1571
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.qname(), NewName: sqlDollar[6].union.qname(), IfExists: false}
		}
	case 228:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1575
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.qname(), NewName: sqlDollar[8].union.qname(), IfExists: true}
		}
	case 229:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1579
		{
			sqlVAL.union.val = &RenameIndex{Name: sqlDollar[3].union.qname(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 230:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1583
		{
			sqlVAL.union.val = &RenameIndex{Name: sqlDollar[5].union.qname(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 231:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1587
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.qname(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1591
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.qname(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1595
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 234:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1599
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 235:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1605
		{
			sqlVAL.union.val = true
		}
	case 236:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1609
		{
			sqlVAL.union.val = false
		}
	case 237:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1614
		{
		}
	case 238:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1615
		{
		}
	case 239:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1620
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 240:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1624
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 241:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1628
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1632
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1636
		{
			sqlVAL.union.val = &RollbackTransaction{}
		}
	case 244:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1641
		{
		}
	case 245:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1642
		{
		}
	case 246:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1646
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 247:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1650
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1654
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1658
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1662
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1668
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1674
		{
			sqlVAL.union.val = &CreateDatabase{Name: Name(sqlDollar[3].str)}
		}
	case 253:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1678
		{
			sqlVAL.union.val = &CreateDatabase{IfNotExists: true, Name: Name(sqlDollar[6].str)}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1684
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.qname()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retExprs()
		}
	case 257:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1701
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.selectStmt()}
		}
	case 258:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1705
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.qnames(), Rows: sqlDollar[4].union.selectStmt()}
		}
	case 259:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1709
		{
			sqlVAL.union.val = &Insert{}
		}
	case 260:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1716
		{
			unimplemented()
		}
	case 261:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1717
		{
			unimplemented()
		}
	case 262:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1718
		{
		}
	case 263:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1721
		{
			unimplemented()
		}
	case 264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1722
		{
			unimplemented()
		}
	case 265:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1723
		{
		}
	case 266:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1727
		{
			sqlVAL.union.val = sqlDollar[2].union.selExprs()
		}
	case 267:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1731
		{
			sqlVAL.union.val = SelectExprs(nil)
		}
	case 268:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1738
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retExprs()}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1744
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1748
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 273:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1758
		{
			sqlVAL.union.val = &UpdateExpr{Names: QualifiedNames{sqlDollar[1].union.qname()}, Expr: sqlDollar[3].union.expr()}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1770
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.qnames(), Expr: &Tuple{sqlDollar[5].union.exprs()}}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1774
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.qnames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1821
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.selectStmt()}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1825
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.selectStmt()}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1841
		{
			sqlVAL.union.val = sqlDollar[1].union.selectStmt()
			if s, ok := sqlVAL.union.val.(*Select); ok {
				s.OrderBy = sqlDollar[2].union.orderBy()
			}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1848
		{
			sqlVAL.union.val = sqlDollar[1].union.selectStmt()
			if s, ok := sqlVAL.union.val.(*Select); ok {
				s.OrderBy = sqlDollar[2].union.orderBy()
				s.Limit = sqlDollar[3].union.limit()
			}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1856
		{
			sqlVAL.union.val = sqlDollar[2].union.selectStmt()
		}
	case 284:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1860
		{
			sqlVAL.union.val = sqlDollar[2].union.selectStmt()
			if s, ok := sqlVAL.union.val.(*Select); ok {
				s.OrderBy = sqlDollar[3].union.orderBy()
			}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1867
		{
			sqlVAL.union.val = sqlDollar[2].union.selectStmt()
			if s, ok := sqlVAL.union.val.(*Select); ok {
				s.OrderBy = sqlDollar[3].union.orderBy()
				s.Limit = sqlDollar[4].union.limit()
			}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1905
		{
			sqlVAL.union.val = &Select{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.tblExprs(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1917
		{
			sqlVAL.union.val = &Select{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.tblExprs(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1929
		{
			sqlVAL.union.val = &Select{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        TableExprs{&AliasedTableExpr{Expr: sqlDollar[2].union.qname()}},
				tableSelect: true,
			}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1937
		{
			sqlVAL.union.val = &Union{
				Type:  astUnion,
				Left:  sqlDollar[1].union.selectStmt(),
				Right: sqlDollar[4].union.selectStmt(),
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1946
		{
			sqlVAL.union.val = &Union{
				Type:  astIntersect,
				Left:  sqlDollar[1].union.selectStmt(),
				Right: sqlDollar[4].union.selectStmt(),
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1955
		{
			sqlVAL.union.val = &Union{
				Type:  astExcept,
				Left:  sqlDollar[1].union.selectStmt(),
				Right: sqlDollar[4].union.selectStmt(),
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1973
		{
			unimplemented()
		}
	case 296:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1974
		{
			unimplemented()
		}
	case 297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1975
		{
			unimplemented()
		}
	case 298:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1978
		{
			unimplemented()
		}
	case 299:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1979
		{
			unimplemented()
		}
	case 300:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1982
		{
			unimplemented()
		}
	case 301:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1986
		{
			sqlVAL.union.val = sqlDollar[1].union.selectStmt()
		}
	case 305:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1994
		{
			unimplemented()
		}
	case 306:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1995
		{
		}
	case 307:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1998
		{
		}
	case 308:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1999
		{
		}
	case 309:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2003
		{
			sqlVAL.union.val = true
		}
	case 310:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2007
		{
			sqlVAL.union.val = false
		}
	case 311:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2011
		{
			sqlVAL.union.val = false
		}
	case 312:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2017
		{
			sqlVAL.union.val = true
		}
	case 313:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2022
		{
		}
	case 314:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2023
		{
		}
	case 315:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2027
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 316:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2031
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 317:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2037
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 318:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2043
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2047
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2053
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2061
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2070
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2081
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2094
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2101
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2108
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 330:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2122
		{
		}
	case 331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2123
		{
		}
	case 332:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2149
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 333:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2153
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 334:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2159
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 335:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2163
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 336:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2169
		{
			sqlVAL.union.val = &Values{[]*Tuple{{sqlDollar[2].union.exprs()}}}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2173
		{
			valNode := sqlDollar[1].union.selectStmt().(*Values)
			valNode.Tuples = append(valNode.Tuples, &Tuple{sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 338:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2185
		{
			sqlVAL.union.val = sqlDollar[2].union.tblExprs()
		}
	case 339:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2189
		{
			sqlVAL.union.val = TableExprs(nil)
		}
	case 340:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2195
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2199
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 342:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2206
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: sqlDollar[2].union.aliasClause()}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2210
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, As: sqlDollar[2].union.aliasClause()}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2214
		{
			unimplemented()
		}
	case 346:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2232
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2236
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2240
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2244
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2248
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astNaturalJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr()}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2252
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astNaturalJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2258
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: NameList(sqlDollar[4].union.strs())}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2262
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2266
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: NameList(sqlDollar[3].union.strs())}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2270
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2277
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2283
		{
			sqlVAL.str = astFullJoin
		}
	case 359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2287
		{
			sqlVAL.str = astLeftJoin
		}
	case 360:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2291
		{
			sqlVAL.str = astRightJoin
		}
	case 361:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2295
		{
			sqlVAL.str = astInnerJoin
		}
	case 362:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2301
		{
		}
	case 363:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2302
		{
		}
	case 364:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2313
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: NameList(sqlDollar[3].union.strs())}
		}
	case 365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2317
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2323
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 367:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2327
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 368:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2331
		{
			sqlVAL.union.val = sqlDollar[2].union.qname()
		}
	case 369:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2335
		{
			sqlVAL.union.val = sqlDollar[3].union.qname()
		}
	case 370:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2341
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2345
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 372:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2358
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname()}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2362
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2366
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2372
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 376:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2376
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2388
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 378:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2392
		{
			unimplemented()
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2393
		{
			unimplemented()
		}
	case 380:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2396
		{
			unimplemented()
		}
	case 381:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2397
		{
			unimplemented()
		}
	case 382:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2398
		{
		}
	case 388:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2406
		{
			unimplemented()
		}
	case 389:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2408
		{
			sqlVAL.union.val = &BytesType{Name: "BLOB"}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2412
		{
			sqlVAL.union.val = &BytesType{Name: "BYTES"}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2416
		{
			sqlVAL.union.val = &BytesType{Name: "BYTEA"}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2420
		{
			sqlVAL.union.val = &StringType{Name: "TEXT"}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2424
		{
			sqlVAL.union.val = &StringType{Name: "STRING"}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2445
		{
			sqlVAL.union.val = &DecimalType{Prec: int(sqlDollar[2].union.ival().Val)}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2449
		{
			sqlVAL.union.val = &DecimalType{Prec: int(sqlDollar[2].union.ival().Val), Scale: int(sqlDollar[4].union.ival().Val)}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2453
		{
			sqlVAL.union.val = &DecimalType{}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2460
		{
			sqlVAL.union.val = &IntType{Name: "INT"}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2464
		{
			sqlVAL.union.val = &IntType{Name: "INT64"}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2468
		{
			sqlVAL.union.val = &IntType{Name: "INTEGER"}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2472
		{
			sqlVAL.union.val = &IntType{Name: "SMALLINT"}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2476
		{
			sqlVAL.union.val = &IntType{Name: "BIGINT"}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2480
		{
			sqlVAL.union.val = &FloatType{Name: "REAL"}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2484
		{
			sqlVAL.union.val = &FloatType{Name: "FLOAT", Prec: int(sqlDollar[2].union.ival().Val)}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2488
		{
			sqlVAL.union.val = &FloatType{Name: "DOUBLE PRECISION"}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2492
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			sqlVAL.union.val.(*DecimalType).Name = "DECIMAL"
		}
	case 410:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2497
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			sqlVAL.union.val.(*DecimalType).Name = "DEC"
		}
	case 411:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2502
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			sqlVAL.union.val.(*DecimalType).Name = "NUMERIC"
		}
	case 412:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2507
		{
			sqlVAL.union.val = &BoolType{Name: "BOOLEAN"}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2511
		{
			sqlVAL.union.val = &BoolType{Name: "BOOL"}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2517
		{
			sqlVAL.union.val = sqlDollar[2].union.ival()
		}
	case 415:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2521
		{
			sqlVAL.union.val = IntVal{}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2539
		{
			sqlVAL.union.val = &IntType{Name: "BIT", N: int(sqlDollar[4].union.ival().Val)}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2545
		{
			sqlVAL.union.val = &IntType{Name: "BIT"}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2561
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
			sqlVAL.union.val.(*StringType).N = int(sqlDollar[3].union.ival().Val)
		}
	case 427:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2568
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 428:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2574
		{
			sqlVAL.union.val = &StringType{Name: "CHAR"}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2578
		{
			sqlVAL.union.val = &StringType{Name: "CHAR"}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2582
		{
			sqlVAL.union.val = &StringType{Name: "VARCHAR"}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2587
		{
		}
	case 432:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2588
		{
		}
	case 433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2593
		{
			sqlVAL.union.val = &DateType{}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2597
		{
			sqlVAL.union.val = &TimestampType{}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2602
		{
			sqlVAL.union.val = &IntervalType{}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2607
		{
			unimplemented()
		}
	case 437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2608
		{
			unimplemented()
		}
	case 438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2609
		{
			unimplemented()
		}
	case 439:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2610
		{
			unimplemented()
		}
	case 440:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2611
		{
			unimplemented()
		}
	case 441:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2612
		{
			unimplemented()
		}
	case 442:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2613
		{
			unimplemented()
		}
	case 443:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2614
		{
			unimplemented()
		}
	case 444:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2615
		{
			unimplemented()
		}
	case 445:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2616
		{
			unimplemented()
		}
	case 446:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2617
		{
			unimplemented()
		}
	case 447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2618
		{
			unimplemented()
		}
	case 448:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2619
		{
			unimplemented()
		}
	case 449:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2620
		{
		}
	case 450:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2623
		{
			unimplemented()
		}
	case 451:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2624
		{
			unimplemented()
		}
	case 453:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2648
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2651
		{
			unimplemented()
		}
	case 455:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2652
		{
			unimplemented()
		}
	case 456:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2661
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2665
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2669
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2673
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2677
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2681
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2685
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2689
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2693
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2697
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2701
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2705
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2709
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2713
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2717
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2721
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2725
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2729
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2733
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2737
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2741
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2745
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2749
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2753
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2757
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2761
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2765
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2769
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2773
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2777
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2781
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2784
		{
			unimplemented()
		}
	case 488:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2786
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DBool(true)}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2790
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DBool(true)}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2794
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DBool(false)}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2798
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DBool(false)}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2802
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2806
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2810
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2814
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2818
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2822
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2826
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2830
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2834
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2838
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2842
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2846
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2863
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2867
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2871
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2875
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2879
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2883
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2887
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2891
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2895
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2899
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2903
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2907
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2911
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2915
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2919
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2923
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2927
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2931
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2935
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2939
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2943
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2947
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2951
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2955
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2959
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2963
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2975
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 533:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2980
		{
			sqlVAL.union.val = ValArg{name: sqlDollar[1].str}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2984
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2990
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2994
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2998
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3004
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 541:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3008
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 542:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3012
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3020
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname()}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3024
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3027
		{
			unimplemented()
		}
	case 546:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3028
		{
			unimplemented()
		}
	case 547:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3030
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Type: All, Exprs: sqlDollar[4].union.exprs()}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3034
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Type: Distinct, Exprs: sqlDollar[4].union.exprs()}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3038
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Exprs: Exprs{StarExpr()}}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3051
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 551:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3055
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 552:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3064
		{
			unimplemented()
		}
	case 553:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3065
		{
			unimplemented()
		}
	case 554:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3069
		{
			unimplemented()
		}
	case 555:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3071
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3075
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3079
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3083
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3086
		{
			unimplemented()
		}
	case 560:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3087
		{
			unimplemented()
		}
	case 561:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3088
		{
			unimplemented()
		}
	case 562:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3089
		{
			unimplemented()
		}
	case 563:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3091
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3095
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3099
		{
			sqlVAL.union.val = &OverlayExpr{FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3103
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "STRPOS"}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3107
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3110
		{
			unimplemented()
		}
	case 569:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3112
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3116
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "LTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3120
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "RTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3124
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3128
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3132
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3136
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3140
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3144
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3148
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3154
		{
			unimplemented()
		}
	case 580:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3155
		{
		}
	case 581:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3158
		{
			unimplemented()
		}
	case 582:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3159
		{
		}
	case 583:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3163
		{
			unimplemented()
		}
	case 584:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3164
		{
		}
	case 585:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3167
		{
			unimplemented()
		}
	case 586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3168
		{
			unimplemented()
		}
	case 587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3171
		{
			unimplemented()
		}
	case 588:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3174
		{
			unimplemented()
		}
	case 589:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3175
		{
			unimplemented()
		}
	case 590:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3176
		{
		}
	case 591:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3180
		{
			unimplemented()
		}
	case 592:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3191
		{
			unimplemented()
		}
	case 593:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3192
		{
		}
	case 594:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3195
		{
			unimplemented()
		}
	case 595:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3196
		{
		}
	case 596:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3204
		{
			unimplemented()
		}
	case 597:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3205
		{
			unimplemented()
		}
	case 598:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3206
		{
		}
	case 599:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3209
		{
			unimplemented()
		}
	case 600:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3210
		{
			unimplemented()
		}
	case 601:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3216
		{
			unimplemented()
		}
	case 602:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3217
		{
			unimplemented()
		}
	case 603:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3218
		{
			unimplemented()
		}
	case 604:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3219
		{
			unimplemented()
		}
	case 605:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3220
		{
			unimplemented()
		}
	case 606:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3231
		{
			sqlVAL.union.val = &Row{sqlDollar[3].union.exprs()}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3235
		{
			sqlVAL.union.val = &Row{nil}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3239
		{
			sqlVAL.union.val = &Tuple{append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3245
		{
			sqlVAL.union.val = &Row{sqlDollar[3].union.exprs()}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3249
		{
			sqlVAL.union.val = &Row{nil}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3255
		{
			sqlVAL.union.val = &Tuple{append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3296
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3300
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 614:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3306
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3310
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 616:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3316
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3320
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3324
		{
			sqlVAL.union.val = &Array{nil}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3330
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3334
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 621:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3340
		{
			sqlVAL.union.val = Exprs{DString(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3362
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3366
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3372
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3379
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3383
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3400
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3404
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3408
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3412
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), DInt(1), sqlDollar[2].union.expr()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3416
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 639:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3420
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 640:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3426
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 641:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3432
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3438
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 643:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3442
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 644:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3446
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 645:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3452
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3456
		{
			sqlVAL.union.val = &Tuple{sqlDollar[2].union.exprs()}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3467
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3474
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3478
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 650:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3484
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3490
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 652:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3494
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 654:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3501
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 655:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3507
		{
			sqlVAL.union.val = sqlDollar[1].union.indirectElem()
		}
	case 656:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3511
		{
			sqlVAL.union.val = sqlDollar[1].union.indirectElem()
		}
	case 657:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3515
		{
			sqlVAL.union.val = IndexIndirection(sqlDollar[2].str)
		}
	case 658:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3519
		{
			sqlVAL.union.val = &ArrayIndirection{Begin: sqlDollar[2].union.expr()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3523
		{
			sqlVAL.union.val = &ArrayIndirection{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr()}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3529
		{
			sqlVAL.union.val = NameIndirection(sqlDollar[2].str)
		}
	case 661:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3535
		{
			sqlVAL.union.val = qualifiedStar
		}
	case 662:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3541
		{
			sqlVAL.union.val = Indirection{sqlDollar[1].union.indirectElem()}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3545
		{
			sqlVAL.union.val = append(sqlDollar[1].union.indirect(), sqlDollar[2].union.indirectElem())
		}
	case 664:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3550
		{
		}
	case 665:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3551
		{
		}
	case 667:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3560
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3566
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3570
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 670:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3579
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 672:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3587
		{
			sqlVAL.union.val = SelectExprs(nil)
		}
	case 673:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3593
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3597
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 675:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3603
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3612
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3616
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3620
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 679:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3628
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3632
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 681:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3638
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3642
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 683:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3653
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3657
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3668
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3672
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: Indirection{sqlDollar[2].union.indirectElem()}}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3676
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: Indirection{sqlDollar[2].union.indirectElem()}}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3680
		{
			sqlVAL.union.val = &QualifiedName{Indirect: Indirection{unqualifiedStar}}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3686
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3690
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 691:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3696
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 692:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3699
		{
		}
	case 693:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3709
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3713
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3720
		{
			sqlVAL.union.val = &IntVal{Val: sqlDollar[1].union.ival().Val, Str: sqlDollar[1].union.ival().Str}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3724
		{
			sqlVAL.union.val = NumVal(sqlDollar[1].str)
		}
	case 697:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3728
		{
			sqlVAL.union.val = DString(sqlDollar[1].str)
		}
	case 698:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3732
		{
			sqlVAL.union.val = DBytes(sqlDollar[1].str)
		}
	case 699:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3735
		{
			unimplemented()
		}
	case 700:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3737
		{
			sqlVAL.union.val = &CastExpr{Expr: DString(sqlDollar[2].str), Type: sqlDollar[1].union.colType()}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3741
		{
			sqlVAL.union.val = &CastExpr{Expr: DString(sqlDollar[2].str), Type: sqlDollar[1].union.colType()}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3745
		{
			sqlVAL.union.val = &CastExpr{Expr: DString(sqlDollar[5].str), Type: sqlDollar[1].union.colType()}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3749
		{
			sqlVAL.union.val = DBool(true)
		}
	case 704:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3753
		{
			sqlVAL.union.val = DBool(false)
		}
	case 705:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3757
		{
			sqlVAL.union.val = DNull
		}
	case 707:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3764
		{
			sqlVAL.union.val = sqlDollar[2].union.ival()
		}
	case 708:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3768
		{
			sqlVAL.union.val = IntVal{Val: -sqlDollar[2].union.ival().Val, Str: "-" + sqlDollar[2].union.ival().Str}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3790
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
