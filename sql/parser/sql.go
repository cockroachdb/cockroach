// Code generated by go yacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"errors"
	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/sql/privilege"
	"github.com/cockroachdb/cockroach/util"
)

var errUnimplemented = errors.New("unimplemented")

func unimplemented() {
	panic(errUnimplemented)
}

func unimplementedWithIssue(issue int) {
	panic(util.UnimplementedWithIssueErrorf(issue, ""))
}

//line sql.y:43

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new sytax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in two forms, depending on the
// type of the value being accessed. Values and pointers are directly
// type asserted from the empty interface, meaning that they will panic
// if the type assertion is incorrect. Interfaces are handled differently
// because a nil instance of an interface inserted into the empty interface
// becomes a nil instance of the empty interface and therefore will fail a
// direct type assertion. Instead, a guarded type assertion must be used,
// which returns nil if the type assertion fails.
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	return u.val.(*StrVal)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) qname() *QualifiedName {
	return u.val.(*QualifiedName)
}
func (u *sqlSymUnion) qnames() QualifiedNames {
	return u.val.(QualifiedNames)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) indirectElem() IndirectionElem {
	if indirectElem, ok := u.val.(IndirectionElem); ok {
		return indirectElem
	}
	return nil
}
func (u *sqlSymUnion) indirect() Indirection {
	return u.val.(Indirection)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	if selectStmt, ok := u.val.(*Select); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	if selectStmt, ok := u.val.(SelectStatement); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	if constraintDef, ok := u.val.(ConstraintTableDef); ok {
		return constraintDef
	}
	return nil
}
func (u *sqlSymUnion) tblDef() TableDef {
	if tblDef, ok := u.val.(TableDef); ok {
		return tblDef
	}
	return nil
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	if colQual, ok := u.val.(NamedColumnQualification); ok {
		return colQual
	}
	return NamedColumnQualification{}
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	if colQual, ok := u.val.(ColumnQualification); ok {
		return colQual
	}
	return nil
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retExprs() ReturningExprs {
	return ReturningExprs(u.val.(SelectExprs))
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	if tblExpr, ok := u.val.(TableExpr); ok {
		return tblExpr
	}
	return nil
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	if joinCond, ok := u.val.(JoinCond); ok {
		return joinCond
	}
	return nil
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	if alterTableCmd, ok := u.val.(AlterTableCmd); ok {
		return alterTableCmd
	}
	return nil
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) famElem() FamilyElem {
	return u.val.(FamilyElem)
}
func (u *sqlSymUnion) famElems() FamilyElemList {
	return u.val.(FamilyElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}

//line sql.y:290
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const DOT_DOT = 57353
const LESS_EQUALS = 57354
const GREATER_EQUALS = 57355
const NOT_EQUALS = 57356
const ERROR = 57357
const ACTION = 57358
const ADD = 57359
const ALL = 57360
const ALTER = 57361
const ANALYSE = 57362
const ANALYZE = 57363
const AND = 57364
const ANY = 57365
const ARRAY = 57366
const AS = 57367
const ASC = 57368
const ASYMMETRIC = 57369
const AT = 57370
const BEGIN = 57371
const BETWEEN = 57372
const BIGINT = 57373
const BIGSERIAL = 57374
const BIT = 57375
const BLOB = 57376
const BOOL = 57377
const BOOLEAN = 57378
const BOTH = 57379
const BY = 57380
const BYTEA = 57381
const BYTES = 57382
const CASCADE = 57383
const CASE = 57384
const CAST = 57385
const CHAR = 57386
const CHARACTER = 57387
const CHARACTERISTICS = 57388
const CHECK = 57389
const COALESCE = 57390
const COLLATE = 57391
const COLLATION = 57392
const COLUMN = 57393
const COLUMNS = 57394
const COMMIT = 57395
const COMMITTED = 57396
const CONCAT = 57397
const CONFLICT = 57398
const CONSTRAINT = 57399
const COVERING = 57400
const CREATE = 57401
const CROSS = 57402
const CUBE = 57403
const CURRENT = 57404
const CURRENT_CATALOG = 57405
const CURRENT_DATE = 57406
const CURRENT_ROLE = 57407
const CURRENT_TIME = 57408
const CURRENT_TIMESTAMP = 57409
const CURRENT_USER = 57410
const CYCLE = 57411
const DATA = 57412
const DATABASE = 57413
const DATABASES = 57414
const DATE = 57415
const DAY = 57416
const DEC = 57417
const DECIMAL = 57418
const DEFAULT = 57419
const DEFERRABLE = 57420
const DELETE = 57421
const DESC = 57422
const DISTINCT = 57423
const DO = 57424
const DOUBLE = 57425
const DROP = 57426
const ELSE = 57427
const ENCODING = 57428
const END = 57429
const ESCAPE = 57430
const EXCEPT = 57431
const EXISTS = 57432
const EXECUTE = 57433
const EXPLAIN = 57434
const EXTRACT = 57435
const FALSE = 57436
const FAMILY = 57437
const FETCH = 57438
const FILTER = 57439
const FIRST = 57440
const FLOAT = 57441
const FLOORDIV = 57442
const FOLLOWING = 57443
const FOR = 57444
const FORCE_INDEX = 57445
const FOREIGN = 57446
const FROM = 57447
const FULL = 57448
const GRANT = 57449
const GRANTS = 57450
const GREATEST = 57451
const GROUP = 57452
const GROUPING = 57453
const HAVING = 57454
const HIGH = 57455
const HOUR = 57456
const IF = 57457
const IFNULL = 57458
const IN = 57459
const INDEX = 57460
const INDEXES = 57461
const INITIALLY = 57462
const INNER = 57463
const INSERT = 57464
const INT = 57465
const INT64 = 57466
const INTEGER = 57467
const INTERSECT = 57468
const INTERVAL = 57469
const INTO = 57470
const IS = 57471
const ISOLATION = 57472
const JOIN = 57473
const KEY = 57474
const KEYS = 57475
const LATERAL = 57476
const LEADING = 57477
const LEAST = 57478
const LEFT = 57479
const LEVEL = 57480
const LIKE = 57481
const LIMIT = 57482
const LOCAL = 57483
const LOCALTIME = 57484
const LOCALTIMESTAMP = 57485
const LOW = 57486
const LSHIFT = 57487
const MATCH = 57488
const MINUTE = 57489
const MONTH = 57490
const NAME = 57491
const NAMES = 57492
const NATURAL = 57493
const NEXT = 57494
const NO = 57495
const NO_INDEX_JOIN = 57496
const NORMAL = 57497
const NOT = 57498
const NOTHING = 57499
const NULL = 57500
const NULLIF = 57501
const NULLS = 57502
const NUMERIC = 57503
const OF = 57504
const OFF = 57505
const OFFSET = 57506
const ON = 57507
const ONLY = 57508
const OR = 57509
const ORDER = 57510
const ORDINALITY = 57511
const OUT = 57512
const OUTER = 57513
const OVER = 57514
const OVERLAPS = 57515
const OVERLAY = 57516
const PARTIAL = 57517
const PARTITION = 57518
const PLACING = 57519
const POSITION = 57520
const PRECEDING = 57521
const PRECISION = 57522
const PREPARE = 57523
const PRIMARY = 57524
const PRIORITY = 57525
const RANGE = 57526
const READ = 57527
const REAL = 57528
const RECURSIVE = 57529
const REF = 57530
const REFERENCES = 57531
const RENAME = 57532
const REPEATABLE = 57533
const RELEASE = 57534
const RESTRICT = 57535
const RETURNING = 57536
const REVOKE = 57537
const RIGHT = 57538
const ROLLBACK = 57539
const ROLLUP = 57540
const ROW = 57541
const ROWS = 57542
const RSHIFT = 57543
const SAVEPOINT = 57544
const SEARCH = 57545
const SECOND = 57546
const SELECT = 57547
const SERIAL = 57548
const SERIALIZABLE = 57549
const SESSION = 57550
const SESSION_USER = 57551
const SET = 57552
const SHOW = 57553
const SIMILAR = 57554
const SIMPLE = 57555
const SMALLINT = 57556
const SMALLSERIAL = 57557
const SNAPSHOT = 57558
const SOME = 57559
const SQL = 57560
const START = 57561
const STRICT = 57562
const STRING = 57563
const STORING = 57564
const SUBSTRING = 57565
const SYMMETRIC = 57566
const SYSTEM = 57567
const TABLE = 57568
const TABLES = 57569
const TEXT = 57570
const THEN = 57571
const TIME = 57572
const TIMESTAMP = 57573
const TIMESTAMPTZ = 57574
const TO = 57575
const TRAILING = 57576
const TRANSACTION = 57577
const TREAT = 57578
const TRIM = 57579
const TRUE = 57580
const TRUNCATE = 57581
const TYPE = 57582
const UNBOUNDED = 57583
const UNCOMMITTED = 57584
const UNION = 57585
const UNIQUE = 57586
const UNKNOWN = 57587
const UPDATE = 57588
const UPSERT = 57589
const USER = 57590
const USING = 57591
const VALID = 57592
const VALIDATE = 57593
const VALUE = 57594
const VALUES = 57595
const VARCHAR = 57596
const VARIADIC = 57597
const VARYING = 57598
const WHEN = 57599
const WHERE = 57600
const WINDOW = 57601
const WITH = 57602
const WITHIN = 57603
const WITHOUT = 57604
const YEAR = 57605
const ZONE = 57606
const NOT_LA = 57607
const WITH_LA = 57608
const AS_LA = 57609
const POSTFIXOP = 57610
const UMINUS = 57611

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPLAIN",
	"EXTRACT",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HOUR",
	"IF",
	"IFNULL",
	"IN",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARTIAL",
	"PARTITION",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SQL",
	"START",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:4533

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 23,
	288, 23,
	-2, 341,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 36,
	1, 316,
	165, 316,
	194, 316,
	286, 316,
	288, 316,
	-2, 326,
	-1, 48,
	1, 319,
	165, 319,
	194, 319,
	286, 319,
	288, 319,
	-2, 325,
	-1, 57,
	1, 23,
	288, 23,
	-2, 341,
	-1, 259,
	1, 154,
	288, 154,
	-2, 825,
	-1, 290,
	140, 351,
	164, 351,
	-2, 322,
	-1, 293,
	140, 350,
	164, 350,
	-2, 320,
	-1, 410,
	140, 350,
	164, 350,
	-2, 323,
	-1, 466,
	285, 768,
	-2, 761,
	-1, 467,
	285, 769,
	-2, 762,
	-1, 473,
	5, 485,
	285, 485,
	-2, 910,
	-1, 495,
	5, 451,
	-2, 886,
	-1, 496,
	5, 479,
	285, 479,
	-2, 888,
	-1, 497,
	5, 459,
	-2, 889,
	-1, 498,
	5, 458,
	-2, 890,
	-1, 499,
	5, 479,
	285, 479,
	-2, 893,
	-1, 500,
	5, 479,
	285, 479,
	-2, 894,
	-1, 501,
	5, 480,
	-2, 897,
	-1, 502,
	5, 446,
	-2, 898,
	-1, 503,
	5, 446,
	-2, 899,
	-1, 504,
	5, 461,
	-2, 902,
	-1, 505,
	5, 447,
	-2, 907,
	-1, 506,
	5, 448,
	-2, 908,
	-1, 507,
	5, 449,
	-2, 909,
	-1, 508,
	5, 446,
	-2, 913,
	-1, 509,
	5, 452,
	-2, 918,
	-1, 510,
	5, 450,
	-2, 921,
	-1, 511,
	5, 477,
	285, 477,
	-2, 923,
	-1, 512,
	5, 481,
	-2, 926,
	-1, 513,
	5, 483,
	-2, 927,
	-1, 514,
	5, 476,
	285, 476,
	-2, 931,
	-1, 824,
	89, 326,
	126, 326,
	140, 326,
	164, 326,
	168, 326,
	243, 326,
	-2, 589,
	-1, 832,
	285, 746,
	-2, 735,
	-1, 1020,
	12, 0,
	13, 0,
	14, 0,
	268, 0,
	269, 0,
	270, 0,
	-2, 519,
	-1, 1021,
	12, 0,
	13, 0,
	14, 0,
	268, 0,
	269, 0,
	270, 0,
	-2, 520,
	-1, 1022,
	12, 0,
	13, 0,
	14, 0,
	268, 0,
	269, 0,
	270, 0,
	-2, 521,
	-1, 1026,
	12, 0,
	13, 0,
	14, 0,
	268, 0,
	269, 0,
	270, 0,
	-2, 525,
	-1, 1027,
	12, 0,
	13, 0,
	14, 0,
	268, 0,
	269, 0,
	270, 0,
	-2, 526,
	-1, 1028,
	12, 0,
	13, 0,
	14, 0,
	268, 0,
	269, 0,
	270, 0,
	-2, 527,
	-1, 1031,
	30, 0,
	117, 0,
	139, 0,
	212, 0,
	265, 0,
	-2, 532,
	-1, 1061,
	173, 659,
	-2, 662,
	-1, 1220,
	89, 326,
	126, 326,
	140, 326,
	164, 326,
	168, 326,
	243, 326,
	-2, 399,
	-1, 1224,
	30, 0,
	117, 0,
	139, 0,
	212, 0,
	265, 0,
	-2, 533,
	-1, 1229,
	30, 0,
	117, 0,
	139, 0,
	212, 0,
	265, 0,
	-2, 534,
	-1, 1247,
	173, 658,
	-2, 661,
	-1, 1400,
	30, 0,
	117, 0,
	139, 0,
	212, 0,
	265, 0,
	-2, 535,
	-1, 1405,
	129, 0,
	-2, 545,
	-1, 1413,
	173, 660,
	-2, 663,
	-1, 1445,
	12, 0,
	13, 0,
	14, 0,
	268, 0,
	269, 0,
	270, 0,
	-2, 570,
	-1, 1446,
	12, 0,
	13, 0,
	14, 0,
	268, 0,
	269, 0,
	270, 0,
	-2, 571,
	-1, 1447,
	12, 0,
	13, 0,
	14, 0,
	268, 0,
	269, 0,
	270, 0,
	-2, 572,
	-1, 1451,
	12, 0,
	13, 0,
	14, 0,
	268, 0,
	269, 0,
	270, 0,
	-2, 576,
	-1, 1452,
	12, 0,
	13, 0,
	14, 0,
	268, 0,
	269, 0,
	270, 0,
	-2, 577,
	-1, 1453,
	12, 0,
	13, 0,
	14, 0,
	268, 0,
	269, 0,
	270, 0,
	-2, 578,
	-1, 1556,
	129, 0,
	-2, 546,
	-1, 1559,
	30, 0,
	117, 0,
	139, 0,
	212, 0,
	265, 0,
	-2, 549,
	-1, 1560,
	30, 0,
	117, 0,
	139, 0,
	212, 0,
	265, 0,
	-2, 551,
	-1, 1642,
	30, 0,
	117, 0,
	139, 0,
	212, 0,
	265, 0,
	-2, 550,
	-1, 1643,
	30, 0,
	117, 0,
	139, 0,
	212, 0,
	265, 0,
	-2, 552,
	-1, 1650,
	129, 0,
	-2, 579,
	-1, 1691,
	129, 0,
	-2, 580,
	-1, 1739,
	30, 0,
	139, 0,
	212, 0,
	265, 0,
	-2, 885,
}

const sqlNprod = 1024
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 21831

var sqlAct = [...]int{

	467, 1738, 1719, 1595, 1720, 1737, 1760, 1696, 905, 993,
	1721, 1520, 913, 1630, 781, 465, 1548, 1424, 464, 260,
	1540, 316, 1617, 1519, 1529, 527, 294, 1483, 457, 1534,
	1301, 81, 81, 827, 569, 81, 556, 35, 81, 82,
	657, 974, 1380, 1217, 16, 81, 570, 429, 1152, 977,
	1300, 1002, 81, 81, 1250, 1216, 81, 976, 1207, 81,
	81, 81, 1389, 829, 762, 81, 81, 81, 81, 759,
	342, 515, 914, 533, 70, 890, 944, 536, 1071, 881,
	1203, 1106, 1047, 398, 1044, 1005, 22, 337, 299, 301,
	47, 12, 777, 937, 928, 631, 6, 1158, 616, 538,
	969, 439, 1003, 528, 293, 783, 430, 299, 399, 343,
	862, 529, 613, 642, 339, 334, 75, 68, 907, 47,
	8, 74, 335, 7, 5, 4, 76, 980, 858, 414,
	332, 304, 612, 412, 413, 248, 459, 633, 239, 549,
	629, 344, 328, 302, 417, 257, 1637, 47, 558, 1638,
	77, 941, 48, 72, 71, 73, 906, 1767, 312, 49,
	997, 319, 558, 1215, 78, 1734, 558, 329, 1616, 1727,
	1718, 1712, 997, 934, 997, 298, 322, 785, 1693, 1687,
	283, 934, 997, 340, 298, 1677, 1668, 1164, 1616, 997,
	1644, 942, 910, 934, 1641, 1627, 306, 997, 1616, 1624,
	291, 547, 1625, 1615, 46, 517, 1616, 290, 786, 1600,
	1599, 1580, 997, 997, 947, 1561, 1558, 53, 947, 934,
	1493, 947, 785, 997, 943, 940, 788, 1409, 1357, 28,
	947, 1352, 1351, 1318, 1681, 1352, 1319, 29, 55, 1316,
	1315, 1314, 947, 947, 947, 786, 1247, 787, 784, 947,
	81, 1245, 1244, 81, 81, 998, 1246, 947, 997, 78,
	1458, 946, 1412, 788, 947, 56, 933, 878, 564, 934,
	877, 565, 51, 1189, 879, 1205, 1191, 997, 52, 949,
	1055, 945, 992, 81, 787, 81, 963, 81, 530, 81,
	802, 424, 531, 425, 1736, 753, 1249, 50, 793, 46,
	559, 1733, 752, 623, 81, 947, 405, 622, 365, 311,
	57, 531, 656, 384, 559, 81, 1619, 411, 559, 530,
	53, 53, 1193, 531, 28, 1726, 81, 81, 81, 1688,
	81, 1626, 29, 522, 1585, 793, 1581, 1573, 372, 1572,
	939, 55, 55, 803, 1567, 410, 1566, 1565, 440, 526,
	53, 1518, 1473, 1468, 1467, 1466, 521, 1415, 1052, 1511,
	81, 1164, 938, 373, 1398, 81, 1379, 81, 56, 56,
	1361, 55, 561, 1272, 1323, 51, 1320, 342, 342, 1308,
	803, 52, 1299, 1271, 1268, 659, 81, 404, 81, 81,
	81, 81, 1266, 81, 1255, 1254, 562, 81, 56, 804,
	909, 50, 81, 1729, 313, 51, 784, 313, 81, 324,
	557, 52, 1190, 313, 756, 324, 343, 343, 402, 1123,
	1078, 1077, 835, 424, 660, 423, 81, 1426, 329, 81,
	50, 1680, 1660, 1659, 1652, 1633, 804, 1622, 1614, 1592,
	755, 420, 421, 1578, 1053, 53, 1551, 426, 344, 344,
	1527, 1404, 1397, 1376, 291, 1375, 661, 1374, 1372, 1335,
	1359, 290, 566, 1277, 1334, 1298, 55, 551, 548, 1263,
	798, 795, 796, 797, 789, 790, 791, 792, 794, 1510,
	1262, 299, 1241, 397, 1237, 1049, 832, 1178, 1137, 1137,
	1136, 1116, 1076, 56, 996, 863, 866, 870, 576, 620,
	51, 1272, 856, 855, 619, 854, 52, 798, 795, 796,
	797, 789, 790, 791, 792, 794, 652, 653, 646, 853,
	745, 786, 516, 852, 472, 69, 81, 519, 851, 850,
	849, 742, 659, 1272, 746, 747, 748, 754, 749, 788,
	81, 848, 751, 766, 81, 765, 1286, 81, 81, 767,
	530, 847, 873, 81, 531, 81, 81, 779, 81, 1272,
	787, 81, 846, 81, 81, 845, 342, 598, 844, 843,
	291, 660, 875, 291, 291, 842, 833, 773, 831, 786,
	774, 775, 923, 337, 50, 757, 317, 428, 363, 884,
	361, 1277, 1517, 1516, 908, 830, 908, 788, 1172, 1109,
	1171, 523, 1639, 661, 1515, 343, 1165, 518, 987, 70,
	1546, 793, 1322, 929, 864, 81, 81, 1321, 787, 867,
	895, 897, 1223, 1277, 393, 379, 941, 871, 860, 861,
	951, 868, 840, 313, 1082, 869, 1287, 344, 1535, 1273,
	1274, 1275, 1276, 1278, 378, 906, 900, 1427, 1272, 1277,
	1072, 75, 859, 1160, 47, 931, 74, 659, 47, 1258,
	930, 76, 903, 524, 1702, 932, 942, 887, 1287, 793,
	912, 1749, 1748, 921, 313, 550, 550, 1501, 955, 340,
	926, 288, 925, 433, 1272, 77, 924, 452, 72, 71,
	73, 922, 1288, 1667, 1287, 276, 660, 968, 277, 943,
	940, 1608, 836, 864, 1085, 867, 1607, 957, 313, 539,
	1347, 540, 1092, 251, 297, 282, 1185, 281, 79, 235,
	1327, 952, 250, 1326, 1288, 261, 1225, 950, 661, 953,
	1177, 956, 250, 1176, 1175, 861, 860, 1358, 1277, 305,
	305, 1174, 786, 315, 1086, 81, 315, 321, 315, 1036,
	1288, 296, 315, 330, 315, 261, 945, 81, 81, 948,
	788, 400, 902, 1282, 1279, 1280, 1281, 1273, 1274, 1275,
	1276, 1278, 376, 901, 1277, 401, 541, 1087, 1084, 396,
	1713, 787, 1666, 1287, 1120, 1119, 81, 1009, 81, 791,
	792, 794, 999, 298, 359, 1282, 1279, 1280, 1281, 1273,
	1274, 1275, 1276, 1278, 539, 65, 540, 1008, 883, 377,
	285, 1684, 1337, 883, 1346, 939, 59, 659, 1704, 882,
	945, 1046, 1279, 1280, 1281, 1273, 1274, 1275, 1276, 1278,
	1042, 1072, 793, 1007, 1088, 1046, 286, 972, 1748, 1288,
	1272, 552, 1757, 1040, 1157, 789, 790, 791, 792, 794,
	990, 991, 66, 873, 289, 1153, 660, 1050, 873, 973,
	1597, 971, 1349, 60, 539, 1234, 540, 1366, 295, 1715,
	1162, 541, 1151, 1153, 872, 1363, 1723, 803, 1232, 545,
	1122, 81, 81, 81, 597, 1716, 575, 81, 661, 600,
	81, 1000, 313, 1083, 1059, 324, 81, 81, 81, 81,
	81, 917, 81, 81, 1184, 1038, 324, 1037, 1364, 324,
	81, 1043, 81, 1281, 1273, 1274, 1275, 1276, 1278, 81,
	544, 1186, 1661, 576, 945, 1051, 375, 469, 81, 1068,
	1277, 541, 857, 804, 1648, 1134, 1132, 367, 1338, 823,
	261, 261, 1230, 542, 558, 1724, 1235, 299, 374, 81,
	81, 1126, 1275, 1276, 1278, 81, 1155, 61, 1756, 1167,
	67, 1168, 1261, 610, 342, 945, 368, 370, 394, 599,
	250, 58, 315, 298, 261, 1287, 408, 1148, 1147, 1127,
	1390, 1170, 81, 1725, 81, 81, 81, 1039, 1722, 81,
	1344, 305, 598, 1747, 1041, 880, 1745, 1533, 81, 985,
	62, 375, 315, 343, 1195, 81, 387, 81, 789, 790,
	791, 792, 794, 315, 315, 315, 1166, 553, 1227, 1163,
	366, 395, 1231, 364, 1598, 576, 415, 786, 416, 1233,
	1169, 1288, 1045, 1576, 959, 344, 1755, 537, 542, 1183,
	961, 929, 1034, 826, 299, 788, 1636, 315, 1181, 1180,
	416, 1192, 617, 1194, 617, 1182, 962, 1602, 1222, 1187,
	1601, 1188, 1590, 1771, 1454, 960, 787, 1497, 1329, 1131,
	628, 576, 1489, 261, 1484, 617, 261, 261, 261, 240,
	261, 986, 1482, 931, 261, 1200, 47, 299, 930, 250,
	1248, 1201, 1221, 932, 598, 761, 559, 1206, 542, 245,
	772, 626, 1490, 891, 241, 313, 1273, 1274, 1275, 1276,
	1278, 764, 627, 305, 1577, 758, 782, 793, 1228, 1226,
	1362, 1697, 1210, 750, 64, 63, 1549, 242, 415, 1035,
	624, 1591, 1763, 1139, 313, 299, 1138, 1213, 81, 1455,
	598, 1543, 244, 1210, 1770, 1456, 1496, 1388, 374, 1257,
	1500, 1032, 1333, 1211, 327, 1385, 296, 1499, 1213, 1384,
	894, 326, 803, 407, 1381, 81, 1651, 1204, 1208, 1075,
	1575, 1302, 1354, 1403, 1211, 1267, 1236, 1550, 954, 392,
	1341, 1485, 1343, 1486, 390, 1305, 1306, 1307, 1209, 389,
	81, 388, 81, 385, 81, 325, 1303, 841, 81, 744,
	1074, 1348, 1542, 1324, 1480, 1342, 81, 1488, 1340, 81,
	1353, 1331, 1212, 315, 1491, 81, 659, 1328, 804, 81,
	1197, 81, 988, 984, 1033, 243, 927, 888, 1345, 1128,
	563, 315, 560, 1212, 315, 904, 1498, 1355, 893, 1356,
	315, 555, 919, 920, 1761, 315, 546, 1147, 315, 1371,
	261, 261, 1365, 1367, 1368, 660, 1394, 1383, 1159, 543,
	1386, 1421, 81, 1373, 1378, 763, 246, 1159, 1387, 1487,
	1393, 1609, 1406, 1749, 1391, 1392, 313, 418, 1417, 1418,
	1419, 309, 381, 994, 1762, 648, 1541, 661, 1611, 572,
	795, 796, 797, 789, 790, 791, 792, 794, 883, 883,
	892, 1764, 617, 782, 898, 896, 3, 899, 1350, 597,
	1414, 575, 1430, 1619, 600, 1663, 1690, 786, 1428, 1434,
	1432, 237, 1382, 275, 786, 422, 236, 81, 81, 81,
	1682, 1461, 1768, 911, 1196, 81, 81, 995, 611, 936,
	419, 81, 788, 81, 310, 81, 81, 81, 81, 1494,
	1495, 1465, 1462, 81, 382, 313, 787, 780, 1206, 621,
	247, 568, 240, 787, 318, 278, 279, 1475, 1769, 1272,
	786, 965, 964, 1474, 576, 81, 81, 1369, 1479, 1360,
	1317, 1173, 245, 1121, 1489, 81, 81, 241, 1525, 81,
	1118, 1524, 1525, 1117, 599, 1524, 1512, 1508, 81, 81,
	1532, 1526, 576, 1514, 1210, 1526, 1069, 966, 1735, 576,
	242, 597, 1552, 575, 1490, 1563, 600, 1531, 1420, 1213,
	1198, 967, 834, 284, 1596, 244, 238, 81, 743, 1208,
	1056, 1060, 970, 1063, 386, 1211, 1538, 1539, 1569, 1557,
	1544, 576, 1553, 598, 315, 888, 1714, 1260, 1101, 1209,
	1647, 1629, 1073, 839, 1113, 1114, 1115, 597, 27, 575,
	1522, 445, 600, 1574, 1481, 1330, 979, 978, 662, 649,
	638, 598, 468, 315, 391, 261, 632, 641, 598, 1081,
	520, 81, 470, 81, 573, 81, 471, 574, 865, 458,
	571, 338, 81, 1485, 1212, 1486, 599, 1545, 915, 1070,
	1256, 837, 444, 450, 1589, 1586, 449, 1057, 243, 360,
	598, 81, 441, 917, 1547, 1214, 371, 255, 256, 1488,
	1156, 1509, 989, 768, 1339, 1610, 1491, 287, 1269, 362,
	1587, 1093, 1099, 1091, 81, 1089, 81, 1612, 1080, 1605,
	1606, 576, 599, 1525, 81, 1620, 1524, 403, 1604, 246,
	532, 1623, 81, 916, 313, 1618, 1526, 313, 383, 1001,
	1632, 935, 427, 1528, 776, 1728, 1640, 308, 315, 1129,
	1130, 307, 975, 380, 888, 625, 958, 1135, 280, 1658,
	1662, 1487, 1336, 1140, 1141, 1143, 1145, 1146, 1701, 1149,
	1150, 1646, 54, 21, 19, 1635, 18, 315, 17, 1161,
	15, 14, 13, 20, 11, 10, 315, 9, 81, 81,
	598, 26, 81, 1653, 25, 315, 1656, 24, 2, 1670,
	81, 1, 0, 0, 0, 0, 81, 1672, 1671, 0,
	1674, 1679, 1525, 0, 81, 1524, 970, 617, 576, 1673,
	659, 0, 970, 0, 873, 1526, 431, 431, 1683, 1240,
	1678, 0, 299, 1242, 1685, 0, 534, 0, 0, 0,
	81, 81, 81, 0, 81, 1252, 1253, 0, 0, 761,
	0, 761, 261, 315, 1689, 1699, 1199, 1705, 0, 660,
	1686, 1708, 81, 1703, 0, 1202, 0, 1692, 0, 0,
	0, 0, 1219, 1504, 315, 1710, 1525, 1297, 1706, 1524,
	1711, 1513, 0, 1707, 1709, 81, 0, 598, 1310, 1526,
	0, 661, 0, 0, 572, 576, 1732, 1731, 0, 0,
	0, 0, 1743, 0, 0, 0, 1746, 0, 1093, 1093,
	81, 1744, 0, 313, 313, 0, 1750, 313, 1753, 0,
	1752, 1754, 0, 0, 1751, 0, 0, 651, 650, 0,
	644, 639, 0, 1766, 769, 771, 1765, 1238, 1239, 0,
	597, 778, 575, 0, 0, 600, 0, 0, 0, 0,
	1772, 0, 0, 818, 819, 820, 821, 822, 1093, 1093,
	1093, 0, 825, 0, 598, 0, 0, 0, 597, 576,
	575, 0, 0, 600, 0, 597, 0, 575, 0, 0,
	600, 0, 838, 0, 0, 0, 0, 1294, 1295, 1296,
	0, 0, 0, 0, 0, 0, 572, 0, 0, 0,
	654, 0, 0, 0, 0, 782, 0, 597, 0, 575,
	0, 0, 600, 0, 0, 0, 0, 0, 0, 0,
	1594, 1410, 0, 0, 0, 599, 0, 0, 0, 0,
	0, 0, 315, 0, 0, 0, 0, 0, 598, 0,
	0, 0, 572, 0, 0, 0, 0, 0, 0, 874,
	604, 0, 0, 599, 0, 0, 0, 1370, 0, 888,
	599, 761, 1628, 0, 655, 1377, 786, 0, 0, 0,
	0, 0, 313, 315, 0, 0, 315, 0, 1459, 0,
	0, 0, 1219, 0, 788, 0, 1396, 0, 1219, 1469,
	1093, 1093, 599, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 787, 0, 597, 0, 575,
	0, 0, 600, 0, 0, 0, 0, 0, 0, 1401,
	1402, 0, 0, 0, 0, 0, 0, 0, 0, 1425,
	0, 0, 0, 0, 0, 0, 0, 1093, 1093, 1093,
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093,
	1093, 1093, 1093, 1093, 1093, 1093, 793, 1093, 0, 0,
	0, 0, 1537, 0, 0, 0, 1435, 1436, 1437, 1438,
	1439, 1440, 1441, 1442, 1443, 1444, 1445, 1446, 1447, 1448,
	1449, 1450, 1451, 1452, 1453, 0, 1457, 0, 0, 0,
	1700, 0, 599, 0, 1477, 1478, 888, 446, 36, 645,
	640, 803, 782, 782, 597, 0, 575, 0, 1502, 600,
	1503, 0, 315, 1505, 1506, 1507, 0, 0, 0, 0,
	315, 0, 0, 0, 0, 0, 0, 36, 0, 0,
	0, 0, 0, 917, 0, 0, 0, 0, 0, 0,
	1521, 0, 1530, 888, 1521, 292, 0, 0, 300, 0,
	0, 0, 315, 315, 0, 36, 315, 804, 0, 0,
	0, 0, 0, 0, 0, 782, 1219, 300, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 597, 0, 575, 0, 0, 600, 0, 0, 599,
	0, 0, 0, 0, 1570, 0, 0, 0, 0, 0,
	0, 0, 0, 431, 0, 0, 0, 0, 1010, 1011,
	1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021,
	1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031,
	0, 797, 789, 790, 791, 792, 794, 0, 0, 0,
	0, 0, 262, 0, 0, 572, 0, 0, 888, 0,
	1588, 0, 261, 0, 1093, 597, 273, 575, 0, 315,
	600, 0, 0, 1079, 0, 1090, 599, 1100, 1102, 1107,
	1110, 1111, 1112, 572, 0, 0, 0, 0, 782, 0,
	572, 0, 0, 1593, 0, 0, 0, 0, 0, 0,
	264, 0, 0, 0, 0, 1521, 534, 274, 0, 0,
	0, 315, 1676, 1631, 0, 0, 0, 0, 0, 263,
	265, 315, 572, 0, 0, 0, 0, 0, 0, 782,
	0, 0, 0, 0, 0, 1154, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1093,
	599, 0, 0, 0, 0, 0, 266, 786, 0, 805,
	806, 807, 0, 0, 0, 0, 267, 268, 0, 808,
	0, 0, 0, 0, 0, 788, 1179, 814, 1650, 0,
	1717, 269, 0, 0, 0, 1664, 1665, 0, 0, 1669,
	0, 0, 0, 0, 1521, 0, 787, 261, 0, 0,
	0, 0, 802, 1530, 0, 0, 0, 0, 0, 292,
	0, 782, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 778, 572, 0, 0, 1093, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1698, 782, 315,
	0, 261, 0, 0, 0, 0, 1272, 793, 1289, 1290,
	1291, 0, 0, 0, 1691, 0, 0, 0, 1521, 1631,
	0, 1224, 0, 0, 815, 1229, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 270, 813, 0, 271, 0,
	0, 0, 315, 272, 1243, 0, 810, 0, 0, 0,
	0, 1286, 803, 1251, 0, 0, 0, 0, 0, 0,
	0, 1259, 0, 0, 0, 1264, 0, 782, 0, 0,
	0, 0, 0, 0, 809, 0, 0, 0, 0, 572,
	0, 0, 0, 0, 0, 292, 825, 0, 292, 292,
	0, 0, 1107, 1107, 1107, 0, 1277, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 804, 0,
	0, 824, 0, 0, 1325, 828, 0, 0, 0, 812,
	786, 0, 805, 806, 807, 1332, 0, 0, 0, 0,
	0, 0, 808, 0, 0, 0, 0, 0, 788, 0,
	814, 1287, 431, 0, 0, 0, 0, 0, 0, 0,
	0, 431, 0, 0, 534, 0, 572, 0, 0, 787,
	0, 0, 0, 0, 0, 802, 0, 0, 0, 0,
	0, 0, 811, 0, 0, 799, 800, 801, 0, 798,
	795, 796, 797, 789, 790, 791, 792, 794, 0, 0,
	0, 1124, 0, 0, 0, 0, 0, 1288, 0, 0,
	1125, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	793, 0, 1399, 0, 1400, 0, 0, 36, 0, 36,
	0, 0, 0, 0, 0, 1405, 0, 815, 0, 0,
	572, 0, 36, 0, 0, 0, 36, 0, 1179, 813,
	0, 0, 0, 0, 0, 0, 0, 1422, 0, 810,
	0, 0, 0, 0, 0, 803, 1431, 0, 0, 1433,
	0, 0, 0, 0, 1283, 1284, 1285, 0, 1282, 1279,
	1280, 1281, 1273, 1274, 1275, 1276, 1278, 809, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1463, 1464, 0, 0, 0, 0, 0, 0, 0,
	1470, 1471, 1472, 0, 0, 0, 0, 0, 0, 0,
	0, 804, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 812, 0, 0, 0, 0, 786, 0, 805,
	806, 807, 0, 0, 0, 0, 0, 0, 431, 808,
	0, 0, 0, 0, 0, 788, 0, 814, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1272,
	0, 1289, 1290, 1291, 0, 0, 787, 0, 0, 0,
	1536, 1555, 802, 0, 0, 811, 0, 0, 799, 800,
	801, 0, 798, 795, 796, 797, 789, 790, 791, 792,
	794, 0, 1556, 0, 0, 0, 1559, 1560, 0, 1582,
	0, 1562, 0, 0, 1286, 1564, 0, 0, 0, 0,
	0, 0, 1568, 0, 0, 0, 1571, 793, 786, 0,
	805, 806, 807, 0, 0, 0, 0, 0, 0, 0,
	808, 0, 0, 0, 815, 0, 788, 0, 814, 0,
	0, 0, 0, 0, 0, 0, 813, 1579, 0, 1277,
	0, 0, 0, 1004, 0, 0, 810, 787, 0, 0,
	0, 0, 803, 802, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1292, 0,
	0, 0, 0, 1048, 809, 0, 0, 0, 1603, 0,
	0, 0, 0, 0, 1287, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 793, 0,
	0, 0, 1621, 0, 0, 0, 0, 0, 804, 0,
	0, 0, 0, 0, 0, 815, 0, 0, 0, 812,
	0, 1634, 0, 0, 0, 0, 0, 813, 0, 0,
	0, 0, 0, 1642, 1643, 0, 0, 810, 0, 0,
	1288, 0, 0, 803, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1655, 0, 0, 0, 809, 0, 300, 0, 0,
	0, 1657, 811, 0, 0, 799, 800, 801, 0, 798,
	795, 796, 797, 789, 790, 791, 792, 794, 0, 0,
	0, 0, 0, 534, 0, 0, 1313, 0, 0, 804,
	0, 0, 0, 0, 0, 0, 0, 1283, 1284, 1285,
	812, 1282, 1279, 1280, 1281, 1273, 1274, 1275, 1276, 1278,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 36, 0, 0, 0, 0, 0,
	0, 0, 0, 811, 1220, 0, 799, 800, 801, 0,
	798, 795, 796, 797, 789, 790, 791, 792, 794, 0,
	0, 1730, 0, 0, 0, 0, 0, 1312, 0, 0,
	0, 0, 0, 1048, 1742, 1742, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 824, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1742, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 466, 455, 456, 453, 454, 442, 1742, 0, 0,
	0, 0, 0, 83, 84, 824, 85, 0, 0, 0,
	0, 448, 0, 0, 0, 86, 87, 0, 495, 190,
	496, 88, 497, 498, 0, 89, 194, 195, 90, 463,
	481, 499, 500, 198, 0, 491, 0, 474, 0, 91,
	92, 93, 0, 94, 0, 95, 0, 347, 96, 1741,
	0, 475, 477, 0, 476, 478, 98, 99, 100, 101,
	501, 102, 502, 503, 0, 0, 103, 0, 0, 0,
	494, 105, 0, 106, 0, 0, 0, 447, 107, 108,
	482, 461, 0, 0, 109, 110, 504, 0, 111, 0,
	112, 0, 0, 348, 0, 113, 492, 0, 207, 0,
	114, 115, 488, 490, 0, 0, 116, 0, 349, 117,
	505, 506, 507, 1004, 473, 0, 1004, 118, 351, 119,
	120, 0, 0, 493, 352, 121, 0, 0, 122, 0,
	0, 123, 0, 124, 125, 126, 127, 128, 354, 129,
	130, 133, 131, 437, 132, 462, 489, 134, 508, 135,
	136, 0, 0, 0, 0, 0, 137, 217, 355, 138,
	356, 483, 139, 140, 0, 484, 141, 220, 142, 0,
	143, 144, 145, 509, 146, 147, 0, 149, 150, 148,
	151, 0, 152, 357, 153, 154, 451, 155, 0, 156,
	157, 158, 0, 223, 159, 160, 479, 161, 162, 0,
	163, 510, 225, 164, 0, 165, 166, 168, 511, 167,
	485, 0, 169, 0, 170, 171, 0, 228, 512, 513,
	0, 0, 172, 486, 487, 460, 173, 174, 1740, 176,
	0, 0, 177, 178, 179, 480, 0, 180, 181, 182,
	233, 514, 0, 183, 0, 0, 0, 0, 184, 185,
	186, 187, 0, 588, 583, 605, 577, 596, 595, 36,
	0, 579, 578, 434, 435, 0, 607, 606, 0, 436,
	0, 0, 443, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1004, 1004, 0, 601, 1004, 593, 592, 0,
	0, 0, 0, 0, 0, 591, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 590, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 584, 585, 586, 0, 604,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 594, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 589, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1613, 0, 0, 0, 0, 581, 0,
	0, 0, 0, 0, 0, 0, 587, 582, 0, 0,
	0, 0, 0, 609, 0, 0, 0, 0, 0, 0,
	580, 1004, 0, 602, 603, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 658, 0, 0, 0, 0, 608, 0, 0, 0,
	0, 0, 0, 83, 84, 663, 85, 664, 665, 666,
	667, 668, 669, 670, 671, 86, 87, 188, 189, 190,
	191, 88, 192, 193, 672, 89, 194, 195, 90, 673,
	674, 196, 197, 198, 675, 199, 676, 346, 677, 91,
	92, 93, 824, 94, 678, 95, 679, 347, 96, 97,
	680, 681, 682, 683, 684, 685, 98, 99, 100, 101,
	200, 102, 201, 202, 686, 687, 103, 688, 689, 690,
	104, 105, 691, 106, 692, 0, 693, 203, 107, 108,
	204, 694, 695, 696, 109, 110, 205, 0, 111, 697,
	112, 698, 699, 348, 700, 113, 206, 701, 207, 702,
	114, 115, 208, 209, 703, 704, 116, 705, 349, 117,
	210, 211, 212, 706, 213, 707, 350, 118, 351, 119,
	120, 708, 709, 214, 352, 121, 353, 710, 122, 711,
	712, 123, 0, 124, 125, 126, 127, 128, 354, 129,
	130, 133, 131, 713, 132, 714, 215, 134, 216, 135,
	136, 715, 716, 717, 718, 719, 137, 217, 355, 138,
	356, 218, 139, 140, 720, 219, 141, 220, 142, 721,
	143, 144, 145, 221, 146, 147, 722, 149, 150, 148,
	151, 723, 152, 357, 153, 154, 222, 155, 0, 156,
	157, 158, 724, 223, 159, 160, 725, 161, 162, 358,
	163, 224, 225, 164, 726, 165, 166, 168, 226, 167,
	227, 727, 169, 728, 170, 171, 729, 228, 229, 230,
	730, 731, 172, 231, 232, 732, 173, 174, 175, 176,
	733, 734, 177, 178, 179, 735, 736, 180, 181, 182,
	233, 234, 737, 183, 738, 739, 740, 741, 184, 185,
	186, 187, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 658, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1395, 83,
	84, 663, 85, 664, 665, 666, 667, 668, 669, 670,
	671, 86, 87, 188, 189, 190, 191, 88, 192, 193,
	672, 89, 194, 195, 90, 673, 674, 196, 197, 198,
	675, 199, 676, 346, 677, 91, 92, 93, 0, 94,
	678, 95, 679, 347, 96, 97, 680, 681, 682, 683,
	684, 685, 98, 99, 100, 101, 200, 102, 201, 202,
	686, 687, 103, 688, 689, 690, 104, 105, 691, 106,
	692, 0, 693, 203, 107, 108, 204, 694, 695, 696,
	109, 110, 205, 0, 111, 697, 112, 698, 699, 348,
	700, 113, 206, 701, 207, 702, 114, 115, 208, 209,
	703, 704, 116, 705, 349, 117, 210, 211, 212, 706,
	213, 707, 350, 118, 351, 119, 120, 708, 709, 214,
	352, 121, 353, 710, 122, 711, 712, 123, 0, 124,
	125, 126, 127, 128, 354, 129, 130, 133, 131, 713,
	132, 714, 215, 134, 216, 135, 136, 715, 716, 717,
	718, 719, 137, 217, 355, 138, 356, 218, 139, 140,
	720, 219, 141, 220, 142, 721, 143, 144, 145, 221,
	146, 147, 722, 149, 150, 148, 151, 723, 152, 357,
	153, 154, 222, 155, 0, 156, 157, 158, 724, 223,
	159, 160, 725, 161, 162, 358, 163, 224, 225, 164,
	726, 165, 166, 168, 226, 167, 227, 727, 169, 728,
	170, 171, 729, 228, 229, 230, 730, 731, 172, 231,
	232, 732, 173, 174, 175, 176, 733, 734, 177, 178,
	179, 735, 736, 180, 181, 182, 233, 234, 737, 183,
	738, 739, 740, 741, 184, 185, 186, 187, 0, 0,
	658, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 876, 83, 84, 663, 85, 664, 665, 666, 667,
	668, 669, 670, 671, 86, 87, 188, 189, 190, 191,
	88, 192, 193, 672, 89, 194, 195, 90, 673, 674,
	196, 197, 198, 675, 199, 676, 346, 677, 91, 92,
	93, 0, 94, 678, 95, 679, 347, 96, 97, 680,
	681, 682, 683, 684, 685, 98, 99, 100, 101, 200,
	102, 201, 202, 686, 687, 103, 688, 689, 690, 104,
	105, 691, 106, 692, 0, 693, 203, 107, 108, 204,
	694, 695, 696, 109, 110, 205, 0, 111, 697, 112,
	698, 699, 348, 700, 113, 206, 701, 207, 702, 114,
	115, 208, 209, 703, 704, 116, 705, 349, 117, 210,
	211, 212, 706, 213, 707, 350, 118, 351, 119, 120,
	708, 709, 214, 352, 121, 353, 710, 122, 711, 712,
	123, 0, 124, 125, 126, 127, 128, 354, 129, 130,
	133, 131, 713, 132, 714, 215, 134, 216, 135, 136,
	715, 716, 717, 718, 719, 137, 217, 355, 138, 356,
	218, 139, 140, 720, 219, 141, 220, 142, 721, 143,
	144, 145, 221, 146, 147, 722, 149, 150, 148, 151,
	723, 152, 357, 153, 154, 222, 155, 0, 156, 157,
	158, 724, 223, 159, 160, 725, 161, 162, 358, 163,
	224, 225, 164, 726, 165, 166, 168, 226, 167, 227,
	727, 169, 728, 170, 171, 729, 228, 229, 230, 730,
	731, 172, 231, 232, 732, 173, 174, 175, 176, 733,
	734, 177, 178, 179, 735, 736, 180, 181, 182, 233,
	234, 737, 183, 738, 739, 740, 741, 184, 185, 186,
	187, 466, 455, 456, 453, 454, 442, 0, 0, 0,
	0, 0, 0, 83, 84, 1065, 85, 0, 0, 0,
	0, 448, 0, 0, 0, 86, 87, 188, 495, 190,
	496, 88, 497, 498, 0, 89, 194, 195, 90, 463,
	481, 499, 500, 198, 0, 491, 0, 474, 0, 91,
	92, 93, 0, 94, 0, 95, 0, 347, 96, 97,
	0, 475, 477, 0, 476, 478, 98, 99, 100, 101,
	501, 102, 502, 503, 0, 0, 103, 0, 1066, 0,
	494, 105, 0, 106, 0, 0, 0, 447, 107, 108,
	482, 461, 0, 0, 109, 110, 504, 0, 111, 0,
	112, 0, 0, 348, 0, 113, 492, 0, 207, 0,
	114, 115, 488, 490, 0, 0, 116, 0, 349, 117,
	505, 506, 507, 0, 473, 0, 350, 118, 351, 119,
	120, 0, 0, 493, 352, 121, 353, 0, 122, 0,
	0, 123, 0, 124, 125, 126, 127, 128, 354, 129,
	130, 133, 131, 437, 132, 462, 489, 134, 508, 135,
	136, 0, 0, 0, 0, 0, 137, 217, 355, 138,
	356, 483, 139, 140, 0, 484, 141, 220, 142, 0,
	143, 144, 145, 509, 146, 147, 0, 149, 150, 148,
	151, 0, 152, 357, 153, 154, 451, 155, 0, 156,
	157, 158, 0, 223, 159, 160, 479, 161, 162, 358,
	163, 510, 225, 164, 0, 165, 166, 168, 511, 167,
	485, 0, 169, 0, 170, 171, 0, 228, 512, 513,
	0, 0, 172, 486, 487, 460, 173, 174, 175, 176,
	0, 0, 177, 178, 179, 480, 0, 180, 181, 182,
	233, 514, 1064, 183, 0, 0, 0, 0, 184, 185,
	186, 187, 438, 0, 0, 466, 455, 456, 453, 454,
	442, 0, 0, 434, 435, 1067, 0, 83, 84, 436,
	85, 0, 443, 1062, 0, 448, 0, 0, 0, 86,
	87, 188, 495, 190, 496, 88, 497, 498, 0, 89,
	194, 195, 90, 463, 481, 499, 500, 198, 0, 491,
	0, 474, 0, 91, 92, 93, 0, 94, 0, 95,
	0, 347, 96, 97, 0, 475, 477, 0, 476, 478,
	98, 99, 100, 101, 501, 102, 502, 503, 535, 0,
	103, 0, 0, 0, 494, 105, 0, 106, 0, 0,
	0, 447, 107, 108, 482, 461, 0, 0, 109, 110,
	504, 0, 111, 0, 112, 0, 0, 348, 0, 113,
	492, 0, 207, 0, 114, 115, 488, 490, 0, 0,
	116, 0, 349, 117, 505, 506, 507, 0, 473, 0,
	350, 118, 351, 119, 120, 0, 0, 493, 352, 121,
	353, 0, 122, 0, 0, 123, 0, 124, 125, 126,
	127, 128, 354, 129, 130, 133, 131, 437, 132, 462,
	489, 134, 508, 135, 136, 0, 0, 0, 0, 0,
	137, 217, 355, 138, 356, 483, 139, 140, 0, 484,
	141, 220, 142, 0, 143, 144, 145, 509, 146, 147,
	0, 149, 150, 148, 151, 0, 152, 357, 153, 154,
	451, 155, 0, 156, 157, 158, 53, 223, 159, 160,
	479, 161, 162, 358, 163, 510, 225, 164, 0, 165,
	166, 168, 511, 167, 485, 0, 169, 55, 170, 171,
	0, 228, 512, 513, 0, 0, 172, 486, 487, 460,
	173, 174, 175, 176, 0, 0, 177, 178, 179, 480,
	0, 180, 181, 182, 345, 514, 0, 183, 0, 0,
	0, 51, 184, 185, 186, 187, 438, 52, 0, 466,
	455, 456, 453, 454, 442, 0, 0, 434, 435, 0,
	0, 83, 84, 436, 85, 0, 443, 0, 0, 448,
	0, 0, 0, 86, 87, 188, 495, 190, 496, 88,
	497, 498, 0, 89, 194, 195, 90, 463, 481, 499,
	500, 198, 0, 491, 0, 474, 0, 91, 92, 93,
	0, 94, 0, 95, 0, 347, 96, 97, 0, 475,
	477, 0, 476, 478, 98, 99, 100, 101, 501, 102,
	502, 503, 0, 0, 103, 0, 0, 0, 494, 105,
	0, 106, 0, 0, 0, 447, 107, 108, 482, 461,
	0, 0, 109, 110, 504, 0, 111, 0, 112, 0,
	0, 348, 0, 113, 492, 0, 207, 0, 114, 115,
	488, 490, 0, 0, 116, 0, 349, 117, 505, 506,
	507, 0, 473, 0, 350, 118, 351, 119, 120, 0,
	0, 493, 352, 121, 353, 0, 122, 0, 0, 123,
	0, 124, 125, 126, 127, 128, 354, 129, 130, 133,
	131, 437, 132, 462, 489, 134, 508, 135, 136, 0,
	0, 0, 0, 0, 137, 217, 355, 138, 356, 483,
	139, 140, 0, 484, 141, 220, 142, 0, 143, 144,
	145, 509, 146, 147, 0, 149, 150, 148, 151, 0,
	152, 357, 153, 154, 451, 155, 0, 156, 157, 158,
	53, 223, 159, 160, 479, 161, 162, 358, 163, 510,
	225, 164, 0, 165, 166, 168, 511, 167, 485, 0,
	169, 55, 170, 171, 0, 228, 512, 513, 0, 0,
	172, 486, 487, 460, 173, 174, 175, 176, 0, 0,
	177, 178, 179, 480, 0, 180, 181, 182, 345, 514,
	0, 183, 0, 0, 0, 51, 184, 185, 186, 187,
	438, 52, 0, 466, 455, 456, 453, 454, 442, 0,
	0, 434, 435, 0, 0, 83, 84, 436, 85, 0,
	443, 0, 0, 448, 0, 0, 0, 86, 87, 188,
	495, 190, 496, 88, 497, 498, 1103, 89, 194, 195,
	90, 463, 481, 499, 500, 198, 0, 491, 0, 474,
	0, 91, 92, 93, 0, 94, 0, 95, 0, 347,
	96, 97, 0, 475, 477, 0, 476, 478, 98, 99,
	100, 101, 501, 102, 502, 503, 0, 0, 103, 0,
	0, 0, 494, 105, 0, 106, 0, 0, 0, 447,
	107, 108, 482, 461, 0, 0, 109, 110, 504, 0,
	111, 0, 112, 0, 1108, 348, 0, 113, 492, 0,
	207, 0, 114, 115, 488, 490, 0, 0, 116, 0,
	349, 117, 505, 506, 507, 0, 473, 0, 350, 118,
	351, 119, 120, 0, 1104, 493, 352, 121, 353, 0,
	122, 0, 0, 123, 0, 124, 125, 126, 127, 128,
	354, 129, 130, 133, 131, 437, 132, 462, 489, 134,
	508, 135, 136, 0, 0, 0, 0, 0, 137, 217,
	355, 138, 356, 483, 139, 140, 0, 484, 141, 220,
	142, 0, 143, 144, 145, 509, 146, 147, 0, 149,
	150, 148, 151, 0, 152, 357, 153, 154, 451, 155,
	0, 156, 157, 158, 0, 223, 159, 160, 479, 161,
	162, 358, 163, 510, 225, 164, 0, 165, 166, 168,
	511, 167, 485, 0, 169, 0, 170, 171, 0, 228,
	512, 513, 0, 1105, 172, 486, 487, 460, 173, 174,
	175, 176, 0, 0, 177, 178, 179, 480, 0, 180,
	181, 182, 233, 514, 0, 183, 0, 0, 0, 0,
	184, 185, 186, 187, 438, 466, 455, 456, 453, 454,
	442, 0, 0, 0, 0, 434, 435, 83, 84, 0,
	85, 436, 0, 0, 443, 448, 0, 0, 0, 86,
	87, 188, 495, 190, 496, 88, 497, 498, 0, 89,
	194, 195, 90, 463, 481, 499, 500, 198, 0, 491,
	0, 474, 0, 91, 92, 93, 0, 94, 0, 95,
	0, 347, 96, 97, 0, 475, 477, 0, 476, 478,
	98, 99, 100, 101, 501, 102, 502, 503, 0, 0,
	103, 0, 0, 0, 494, 105, 0, 106, 0, 0,
	0, 447, 107, 108, 482, 461, 0, 0, 109, 110,
	504, 0, 111, 0, 112, 0, 0, 348, 0, 113,
	492, 0, 207, 0, 114, 115, 488, 490, 0, 0,
	116, 0, 349, 117, 505, 506, 507, 0, 473, 0,
	350, 118, 351, 119, 120, 0, 0, 493, 352, 121,
	353, 0, 122, 0, 0, 123, 0, 124, 125, 126,
	127, 128, 354, 129, 130, 133, 131, 437, 132, 462,
	489, 134, 508, 135, 136, 0, 0, 0, 0, 0,
	137, 217, 355, 138, 356, 483, 139, 140, 0, 484,
	141, 220, 142, 0, 143, 144, 145, 509, 146, 147,
	0, 149, 150, 148, 151, 0, 152, 357, 153, 154,
	451, 155, 0, 156, 157, 158, 0, 223, 159, 160,
	479, 161, 162, 358, 163, 510, 225, 164, 0, 165,
	166, 168, 511, 167, 485, 0, 169, 0, 170, 171,
	0, 228, 512, 513, 0, 0, 172, 486, 487, 460,
	173, 174, 175, 176, 0, 0, 177, 178, 179, 480,
	0, 180, 181, 182, 233, 514, 0, 183, 0, 0,
	0, 0, 184, 185, 186, 187, 438, 0, 0, 466,
	455, 456, 453, 454, 442, 0, 0, 434, 435, 0,
	0, 83, 84, 436, 85, 0, 443, 1460, 0, 448,
	0, 0, 0, 86, 87, 188, 495, 190, 496, 88,
	497, 498, 0, 89, 194, 195, 90, 463, 481, 499,
	500, 198, 0, 491, 0, 474, 0, 91, 92, 93,
	0, 94, 0, 95, 0, 347, 96, 97, 0, 475,
	477, 0, 476, 478, 98, 99, 100, 101, 501, 102,
	502, 503, 0, 0, 103, 0, 0, 0, 494, 105,
	0, 106, 0, 0, 0, 447, 107, 108, 482, 461,
	0, 0, 109, 110, 504, 0, 111, 0, 112, 0,
	0, 348, 0, 113, 492, 0, 207, 0, 114, 115,
	488, 490, 0, 0, 116, 0, 349, 117, 505, 506,
	507, 0, 473, 0, 350, 118, 351, 119, 120, 0,
	0, 493, 352, 121, 353, 0, 122, 0, 0, 123,
	0, 124, 125, 126, 127, 128, 354, 129, 130, 133,
	131, 437, 132, 462, 489, 134, 508, 135, 136, 0,
	0, 0, 0, 0, 137, 217, 355, 138, 356, 483,
	139, 140, 0, 484, 141, 220, 142, 0, 143, 144,
	145, 509, 146, 147, 0, 149, 150, 148, 151, 0,
	152, 357, 153, 154, 451, 155, 0, 156, 157, 158,
	0, 223, 159, 160, 479, 161, 162, 358, 163, 510,
	225, 164, 0, 165, 166, 168, 511, 167, 485, 0,
	169, 0, 170, 171, 0, 228, 512, 513, 0, 0,
	172, 486, 487, 460, 173, 174, 175, 176, 0, 0,
	177, 178, 179, 480, 0, 180, 181, 182, 233, 514,
	0, 183, 0, 0, 0, 0, 184, 185, 186, 187,
	438, 0, 0, 466, 455, 456, 453, 454, 442, 0,
	0, 434, 435, 0, 0, 83, 84, 436, 85, 0,
	443, 1411, 0, 448, 0, 0, 0, 86, 87, 188,
	495, 190, 496, 88, 497, 498, 0, 89, 194, 195,
	90, 463, 481, 499, 500, 198, 0, 491, 0, 474,
	0, 91, 92, 93, 0, 94, 0, 95, 0, 347,
	96, 97, 0, 475, 477, 0, 476, 478, 98, 99,
	100, 101, 501, 102, 502, 503, 0, 0, 103, 0,
	0, 0, 494, 105, 0, 106, 0, 0, 0, 447,
	107, 108, 482, 461, 0, 0, 109, 110, 504, 0,
	111, 0, 112, 0, 0, 348, 0, 113, 492, 0,
	207, 0, 114, 115, 488, 490, 0, 0, 116, 0,
	349, 117, 505, 506, 507, 0, 473, 0, 350, 118,
	351, 119, 120, 0, 0, 493, 352, 121, 353, 0,
	122, 0, 0, 123, 0, 124, 125, 126, 127, 128,
	354, 129, 130, 133, 131, 437, 132, 462, 489, 134,
	508, 135, 136, 0, 0, 0, 0, 0, 137, 217,
	355, 138, 356, 483, 139, 140, 0, 484, 141, 220,
	142, 0, 143, 144, 145, 509, 146, 147, 0, 149,
	150, 148, 151, 0, 152, 357, 153, 154, 451, 155,
	0, 156, 157, 158, 0, 223, 159, 160, 479, 161,
	162, 358, 163, 510, 225, 164, 0, 165, 166, 168,
	511, 167, 485, 0, 169, 0, 170, 171, 0, 228,
	512, 513, 0, 0, 172, 486, 487, 460, 173, 174,
	175, 176, 0, 0, 177, 178, 179, 480, 0, 180,
	181, 182, 233, 514, 0, 183, 0, 0, 0, 0,
	184, 185, 186, 187, 438, 0, 0, 466, 455, 456,
	453, 454, 442, 0, 0, 434, 435, 0, 0, 83,
	84, 436, 85, 0, 443, 1061, 0, 448, 0, 0,
	0, 86, 87, 188, 495, 190, 496, 88, 497, 498,
	0, 89, 194, 195, 90, 463, 481, 499, 500, 198,
	0, 491, 0, 474, 0, 91, 92, 93, 0, 94,
	0, 95, 0, 347, 96, 97, 0, 475, 477, 0,
	476, 478, 98, 99, 100, 101, 501, 102, 502, 503,
	0, 0, 103, 0, 0, 0, 494, 105, 0, 106,
	0, 0, 0, 447, 107, 108, 482, 461, 0, 0,
	109, 110, 504, 0, 111, 0, 112, 0, 0, 348,
	0, 113, 492, 0, 207, 0, 114, 115, 488, 490,
	0, 0, 116, 0, 349, 117, 505, 506, 507, 0,
	473, 0, 350, 118, 351, 119, 120, 0, 0, 493,
	352, 121, 353, 0, 122, 0, 0, 123, 0, 124,
	125, 126, 127, 128, 354, 129, 130, 133, 131, 437,
	132, 462, 489, 134, 508, 135, 136, 0, 0, 0,
	0, 0, 137, 217, 355, 138, 356, 483, 139, 140,
	0, 484, 141, 220, 142, 0, 143, 144, 145, 509,
	146, 147, 0, 149, 150, 148, 151, 0, 152, 357,
	153, 154, 451, 155, 0, 156, 157, 158, 0, 223,
	159, 160, 479, 161, 162, 358, 163, 510, 225, 164,
	0, 165, 166, 168, 511, 167, 485, 0, 169, 0,
	170, 171, 0, 228, 512, 513, 0, 0, 172, 486,
	487, 460, 173, 174, 175, 176, 0, 0, 177, 178,
	179, 480, 0, 180, 181, 182, 233, 514, 0, 183,
	0, 0, 0, 0, 184, 185, 186, 187, 438, 466,
	455, 456, 453, 454, 442, 0, 0, 0, 0, 434,
	435, 83, 84, 0, 85, 436, 830, 1058, 443, 448,
	0, 0, 0, 86, 87, 188, 495, 190, 496, 88,
	497, 498, 0, 89, 194, 195, 90, 463, 481, 499,
	500, 198, 0, 491, 0, 474, 0, 91, 92, 93,
	0, 94, 0, 95, 0, 347, 96, 97, 0, 475,
	477, 0, 476, 478, 98, 99, 100, 101, 501, 102,
	502, 503, 0, 0, 103, 0, 0, 0, 494, 105,
	0, 106, 0, 0, 0, 447, 107, 108, 482, 461,
	0, 0, 109, 110, 504, 0, 111, 0, 112, 0,
	0, 348, 0, 113, 492, 0, 207, 0, 114, 115,
	488, 490, 0, 0, 116, 0, 349, 117, 505, 506,
	507, 0, 473, 0, 350, 118, 351, 119, 120, 0,
	0, 493, 352, 121, 353, 0, 122, 0, 0, 123,
	0, 124, 125, 126, 127, 128, 354, 129, 130, 133,
	131, 437, 132, 462, 489, 134, 508, 135, 136, 0,
	0, 0, 0, 0, 137, 217, 355, 138, 356, 483,
	139, 140, 0, 484, 141, 220, 142, 0, 143, 144,
	145, 509, 146, 147, 0, 149, 150, 148, 151, 0,
	152, 357, 153, 154, 451, 155, 0, 156, 157, 158,
	0, 223, 159, 160, 479, 161, 162, 358, 163, 510,
	225, 164, 0, 165, 166, 168, 511, 167, 485, 0,
	169, 0, 170, 171, 0, 228, 512, 513, 0, 0,
	172, 486, 487, 460, 173, 174, 175, 176, 0, 0,
	177, 178, 179, 480, 0, 180, 181, 182, 233, 514,
	0, 183, 0, 0, 0, 0, 184, 185, 186, 187,
	438, 0, 0, 466, 455, 456, 453, 454, 442, 0,
	0, 434, 435, 432, 0, 83, 84, 436, 85, 0,
	443, 0, 0, 448, 0, 0, 0, 86, 87, 188,
	495, 190, 496, 88, 497, 498, 0, 89, 194, 195,
	90, 463, 481, 499, 500, 198, 0, 491, 0, 474,
	0, 91, 92, 93, 0, 94, 0, 95, 0, 347,
	96, 97, 0, 475, 477, 0, 476, 478, 98, 99,
	100, 101, 501, 102, 502, 503, 0, 0, 103, 0,
	0, 0, 494, 105, 0, 106, 0, 0, 0, 447,
	107, 108, 482, 461, 0, 0, 109, 110, 504, 0,
	111, 0, 112, 0, 0, 348, 0, 113, 492, 0,
	207, 0, 114, 115, 488, 490, 0, 0, 116, 0,
	349, 117, 505, 506, 507, 0, 473, 0, 350, 118,
	351, 119, 120, 0, 0, 493, 352, 121, 353, 0,
	122, 0, 0, 123, 0, 124, 125, 126, 127, 128,
	354, 129, 130, 133, 131, 437, 132, 462, 489, 134,
	508, 135, 136, 0, 0, 0, 0, 0, 137, 217,
	355, 138, 356, 483, 139, 140, 0, 484, 141, 220,
	142, 0, 143, 144, 145, 509, 146, 147, 0, 149,
	150, 148, 151, 0, 152, 357, 153, 154, 451, 155,
	0, 156, 157, 158, 0, 223, 159, 160, 479, 161,
	162, 358, 163, 510, 225, 164, 0, 165, 166, 168,
	511, 167, 485, 0, 169, 0, 170, 171, 0, 228,
	512, 513, 0, 0, 172, 486, 487, 460, 173, 174,
	175, 176, 0, 0, 177, 178, 179, 480, 0, 180,
	181, 182, 233, 514, 1416, 183, 0, 0, 0, 0,
	184, 185, 186, 187, 438, 466, 455, 456, 453, 454,
	442, 0, 0, 0, 0, 434, 435, 83, 84, 0,
	85, 436, 0, 0, 443, 448, 0, 0, 0, 86,
	87, 188, 495, 190, 496, 88, 497, 498, 0, 89,
	194, 195, 90, 463, 481, 499, 500, 198, 0, 491,
	0, 474, 0, 91, 92, 93, 0, 94, 0, 95,
	0, 347, 96, 97, 0, 475, 477, 0, 476, 478,
	98, 99, 100, 101, 501, 102, 502, 503, 535, 0,
	103, 0, 0, 0, 494, 105, 0, 106, 0, 0,
	0, 447, 107, 108, 482, 461, 0, 0, 109, 110,
	504, 0, 111, 0, 112, 0, 0, 348, 0, 113,
	492, 0, 207, 0, 114, 115, 488, 490, 0, 0,
	116, 0, 349, 117, 505, 506, 507, 0, 473, 0,
	350, 118, 351, 119, 120, 0, 0, 493, 352, 121,
	353, 0, 122, 0, 0, 123, 0, 124, 125, 126,
	127, 128, 354, 129, 130, 133, 131, 437, 132, 462,
	489, 134, 508, 135, 136, 0, 0, 0, 0, 0,
	137, 217, 355, 138, 356, 483, 139, 140, 0, 484,
	141, 220, 142, 0, 143, 144, 145, 509, 146, 147,
	0, 149, 150, 148, 151, 0, 152, 357, 153, 154,
	451, 155, 0, 156, 157, 158, 0, 223, 159, 160,
	479, 161, 162, 358, 163, 510, 225, 164, 0, 165,
	166, 168, 511, 167, 485, 0, 169, 0, 170, 171,
	0, 228, 512, 513, 0, 0, 172, 486, 487, 460,
	173, 174, 175, 176, 0, 0, 177, 178, 179, 480,
	0, 180, 181, 182, 233, 514, 0, 183, 0, 0,
	0, 0, 184, 185, 186, 187, 438, 466, 455, 456,
	453, 454, 442, 0, 0, 0, 0, 434, 435, 83,
	84, 0, 85, 436, 0, 0, 443, 448, 0, 0,
	0, 86, 87, 188, 495, 190, 496, 88, 497, 498,
	0, 89, 194, 195, 90, 463, 481, 499, 500, 198,
	0, 491, 0, 474, 0, 91, 92, 93, 0, 94,
	0, 95, 0, 347, 96, 97, 0, 475, 477, 0,
	476, 478, 98, 99, 100, 101, 501, 102, 502, 503,
	0, 0, 103, 0, 0, 0, 494, 105, 0, 106,
	0, 0, 0, 447, 107, 108, 482, 461, 0, 0,
	109, 110, 504, 0, 111, 0, 112, 0, 1108, 348,
	0, 113, 492, 0, 207, 0, 114, 115, 488, 490,
	0, 0, 116, 0, 349, 117, 505, 506, 507, 0,
	473, 0, 350, 118, 351, 119, 120, 0, 0, 493,
	352, 121, 353, 0, 122, 0, 0, 123, 0, 124,
	125, 126, 127, 128, 354, 129, 130, 133, 131, 437,
	132, 462, 489, 134, 508, 135, 136, 0, 0, 0,
	0, 0, 137, 217, 355, 138, 356, 483, 139, 140,
	0, 484, 141, 220, 142, 0, 143, 144, 145, 509,
	146, 147, 0, 149, 150, 148, 151, 0, 152, 357,
	153, 154, 451, 155, 0, 156, 157, 158, 0, 223,
	159, 160, 479, 161, 162, 358, 163, 510, 225, 164,
	0, 165, 166, 168, 511, 167, 485, 0, 169, 0,
	170, 171, 0, 228, 512, 513, 0, 0, 172, 486,
	487, 460, 173, 174, 175, 176, 0, 0, 177, 178,
	179, 480, 0, 180, 181, 182, 233, 514, 0, 183,
	0, 0, 0, 0, 184, 185, 186, 187, 438, 466,
	455, 456, 453, 454, 442, 0, 0, 0, 0, 434,
	435, 83, 84, 770, 85, 436, 0, 0, 443, 448,
	0, 0, 0, 86, 87, 188, 495, 190, 496, 88,
	497, 498, 0, 89, 194, 195, 90, 463, 481, 499,
	500, 198, 0, 491, 0, 474, 0, 91, 92, 93,
	0, 94, 0, 95, 0, 347, 96, 97, 0, 475,
	477, 0, 476, 478, 98, 99, 100, 101, 501, 102,
	502, 503, 0, 0, 103, 0, 0, 0, 494, 105,
	0, 106, 0, 0, 0, 447, 107, 108, 482, 461,
	0, 0, 109, 110, 504, 0, 111, 0, 112, 0,
	0, 348, 0, 113, 492, 0, 207, 0, 114, 115,
	488, 490, 0, 0, 116, 0, 349, 117, 505, 506,
	507, 0, 473, 0, 350, 118, 351, 119, 120, 0,
	0, 493, 352, 121, 353, 0, 122, 0, 0, 123,
	0, 124, 125, 126, 127, 128, 354, 129, 130, 133,
	131, 437, 132, 462, 489, 134, 508, 135, 136, 0,
	0, 0, 0, 0, 137, 217, 355, 138, 356, 483,
	139, 140, 0, 484, 141, 220, 142, 0, 143, 144,
	145, 509, 146, 147, 0, 149, 150, 148, 151, 0,
	152, 357, 153, 154, 451, 155, 0, 156, 157, 158,
	0, 223, 159, 160, 479, 161, 162, 358, 163, 510,
	225, 164, 0, 165, 166, 168, 511, 167, 485, 0,
	169, 0, 170, 171, 0, 228, 512, 513, 0, 0,
	172, 486, 487, 460, 173, 174, 175, 176, 0, 0,
	177, 178, 179, 480, 0, 180, 181, 182, 233, 514,
	0, 183, 0, 0, 0, 0, 184, 185, 186, 187,
	438, 466, 455, 456, 453, 454, 442, 0, 0, 0,
	0, 434, 435, 83, 84, 0, 85, 436, 0, 0,
	443, 448, 0, 0, 0, 86, 87, 188, 495, 190,
	496, 88, 497, 498, 0, 89, 194, 195, 90, 463,
	481, 499, 500, 198, 0, 491, 0, 474, 0, 91,
	92, 93, 0, 94, 0, 95, 0, 347, 96, 1741,
	0, 475, 477, 0, 476, 478, 98, 99, 100, 101,
	501, 102, 502, 503, 0, 0, 103, 0, 0, 0,
	494, 105, 0, 106, 0, 0, 0, 447, 107, 108,
	482, 461, 0, 0, 109, 110, 504, 0, 111, 0,
	112, 0, 0, 348, 0, 113, 492, 0, 207, 0,
	114, 115, 488, 490, 0, 0, 116, 0, 349, 117,
	505, 506, 507, 0, 473, 0, 350, 118, 351, 119,
	120, 0, 0, 493, 352, 121, 353, 0, 122, 0,
	0, 123, 0, 124, 125, 126, 127, 128, 354, 129,
	130, 133, 131, 437, 132, 462, 489, 134, 508, 135,
	136, 0, 0, 0, 0, 0, 137, 217, 355, 138,
	356, 483, 139, 140, 0, 484, 141, 220, 142, 0,
	143, 144, 145, 509, 146, 147, 0, 149, 150, 148,
	151, 0, 152, 357, 153, 154, 451, 155, 0, 156,
	157, 158, 0, 223, 159, 160, 479, 161, 162, 358,
	163, 510, 225, 164, 0, 165, 166, 168, 511, 167,
	485, 0, 169, 0, 170, 171, 0, 228, 512, 513,
	0, 0, 172, 486, 487, 460, 173, 174, 1740, 176,
	0, 0, 177, 178, 179, 480, 0, 180, 181, 182,
	233, 514, 0, 183, 0, 0, 0, 0, 184, 185,
	186, 187, 438, 466, 455, 456, 453, 454, 442, 0,
	0, 0, 0, 434, 435, 83, 84, 0, 85, 436,
	0, 0, 443, 448, 0, 0, 0, 86, 87, 1739,
	495, 190, 496, 88, 497, 498, 0, 89, 194, 195,
	90, 463, 481, 499, 500, 198, 0, 491, 0, 474,
	0, 91, 92, 93, 0, 94, 0, 95, 0, 347,
	96, 1741, 0, 475, 477, 0, 476, 478, 98, 99,
	100, 101, 501, 102, 502, 503, 0, 0, 103, 0,
	0, 0, 494, 105, 0, 106, 0, 0, 0, 447,
	107, 108, 482, 461, 0, 0, 109, 110, 504, 0,
	111, 0, 112, 0, 0, 348, 0, 113, 492, 0,
	207, 0, 114, 115, 488, 490, 0, 0, 116, 0,
	349, 117, 505, 506, 507, 0, 473, 0, 350, 118,
	351, 119, 120, 0, 0, 493, 352, 121, 353, 0,
	122, 0, 0, 123, 0, 124, 125, 126, 127, 128,
	354, 129, 130, 133, 131, 437, 132, 462, 489, 134,
	508, 135, 136, 0, 0, 0, 0, 0, 137, 217,
	355, 138, 356, 483, 139, 140, 0, 484, 141, 220,
	142, 0, 143, 144, 145, 509, 146, 147, 0, 149,
	150, 148, 151, 0, 152, 357, 153, 154, 451, 155,
	0, 156, 157, 158, 0, 223, 159, 160, 479, 161,
	162, 358, 163, 510, 225, 164, 0, 165, 166, 168,
	511, 167, 485, 0, 169, 0, 170, 171, 0, 228,
	512, 513, 0, 0, 172, 486, 487, 460, 173, 174,
	1740, 176, 0, 0, 177, 178, 179, 480, 0, 180,
	181, 182, 233, 514, 0, 183, 0, 0, 0, 0,
	184, 185, 186, 187, 438, 466, 455, 456, 453, 454,
	442, 0, 0, 0, 0, 434, 435, 83, 84, 0,
	85, 436, 0, 0, 443, 448, 0, 0, 0, 86,
	87, 188, 495, 190, 496, 88, 497, 498, 0, 89,
	194, 195, 90, 463, 481, 499, 500, 198, 0, 491,
	0, 474, 0, 91, 92, 93, 0, 94, 0, 95,
	0, 347, 96, 97, 0, 475, 477, 0, 476, 478,
	98, 99, 100, 101, 501, 102, 502, 503, 0, 0,
	103, 0, 0, 0, 494, 105, 0, 106, 0, 0,
	0, 447, 107, 108, 482, 461, 0, 0, 109, 110,
	504, 0, 111, 0, 112, 0, 0, 348, 0, 113,
	492, 0, 207, 0, 114, 115, 488, 490, 0, 0,
	116, 0, 349, 117, 505, 506, 507, 0, 473, 0,
	350, 118, 351, 119, 120, 0, 0, 493, 352, 121,
	353, 0, 122, 0, 0, 123, 0, 124, 125, 126,
	127, 128, 354, 129, 130, 133, 131, 437, 132, 462,
	489, 134, 508, 135, 136, 0, 0, 0, 0, 0,
	137, 217, 355, 138, 356, 483, 139, 140, 0, 484,
	141, 220, 142, 0, 143, 144, 145, 509, 146, 147,
	0, 149, 150, 148, 151, 0, 152, 357, 153, 154,
	451, 155, 0, 156, 157, 158, 0, 223, 159, 160,
	479, 161, 162, 358, 163, 510, 225, 164, 0, 165,
	166, 168, 511, 167, 485, 0, 169, 0, 170, 171,
	0, 228, 512, 513, 0, 0, 172, 486, 487, 460,
	173, 174, 175, 176, 0, 0, 177, 178, 179, 480,
	0, 180, 181, 182, 233, 514, 0, 183, 0, 0,
	0, 0, 184, 185, 186, 187, 438, 466, 455, 456,
	453, 454, 442, 0, 0, 0, 0, 434, 435, 83,
	84, 0, 85, 436, 0, 0, 443, 448, 0, 0,
	0, 86, 87, 188, 495, 190, 496, 88, 497, 498,
	0, 89, 194, 195, 90, 463, 481, 499, 500, 198,
	0, 491, 0, 474, 0, 91, 92, 93, 0, 94,
	0, 95, 0, 347, 96, 97, 0, 475, 477, 0,
	476, 478, 98, 99, 100, 101, 501, 102, 502, 503,
	0, 0, 103, 0, 0, 0, 494, 105, 0, 106,
	0, 0, 0, 447, 107, 108, 482, 461, 0, 0,
	109, 110, 504, 0, 111, 0, 112, 0, 0, 348,
	0, 113, 492, 0, 207, 0, 114, 115, 488, 490,
	0, 0, 116, 0, 349, 117, 505, 506, 507, 0,
	473, 0, 350, 118, 351, 119, 120, 0, 0, 493,
	352, 121, 353, 0, 122, 0, 0, 123, 0, 124,
	125, 126, 127, 128, 354, 129, 130, 133, 131, 0,
	132, 462, 489, 134, 508, 135, 136, 0, 0, 0,
	0, 0, 137, 217, 355, 138, 356, 483, 139, 140,
	0, 484, 141, 220, 142, 0, 143, 144, 145, 509,
	146, 147, 0, 149, 150, 148, 151, 0, 152, 357,
	153, 154, 1098, 155, 0, 156, 157, 158, 0, 223,
	159, 160, 479, 161, 162, 358, 163, 510, 225, 164,
	0, 165, 166, 168, 511, 167, 485, 0, 169, 0,
	170, 171, 0, 228, 512, 513, 0, 0, 172, 486,
	487, 460, 173, 174, 175, 176, 0, 0, 177, 178,
	179, 480, 0, 180, 181, 182, 233, 514, 0, 183,
	0, 0, 0, 0, 184, 185, 186, 187, 0, 466,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1094,
	1095, 83, 84, 0, 85, 1096, 0, 0, 1097, 0,
	0, 0, 0, 86, 87, 188, 189, 190, 191, 88,
	192, 193, 0, 89, 194, 195, 90, 0, 481, 196,
	197, 198, 0, 491, 0, 474, 0, 91, 92, 93,
	0, 94, 0, 95, 0, 347, 96, 97, 0, 475,
	477, 0, 476, 478, 98, 99, 100, 101, 200, 102,
	201, 202, 0, 0, 103, 0, 0, 0, 104, 105,
	0, 106, 0, 0, 0, 203, 107, 108, 482, 0,
	0, 0, 109, 110, 205, 0, 111, 0, 112, 0,
	0, 348, 0, 113, 492, 0, 207, 0, 114, 115,
	488, 490, 0, 0, 116, 0, 349, 117, 210, 211,
	212, 0, 213, 0, 350, 118, 351, 119, 120, 0,
	0, 493, 352, 121, 353, 0, 122, 0, 0, 123,
	0, 124, 125, 126, 127, 128, 354, 129, 130, 133,
	131, 0, 132, 0, 489, 134, 216, 135, 136, 0,
	0, 0, 0, 0, 137, 217, 355, 138, 356, 483,
	139, 140, 0, 484, 141, 220, 142, 0, 143, 144,
	145, 221, 146, 147, 0, 149, 150, 148, 151, 0,
	152, 357, 153, 154, 222, 155, 0, 156, 157, 158,
	0, 223, 159, 160, 479, 161, 162, 358, 163, 224,
	225, 164, 0, 165, 166, 168, 226, 167, 485, 0,
	169, 0, 170, 171, 0, 228, 229, 230, 0, 0,
	172, 486, 487, 0, 173, 174, 175, 176, 0, 0,
	177, 178, 179, 480, 0, 180, 181, 182, 233, 234,
	0, 183, 0, 0, 0, 0, 184, 185, 186, 187,
	341, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 83, 84, 0, 85, 0, 0, 0, 0,
	1523, 0, 0, 0, 86, 87, 188, 189, 190, 191,
	88, 192, 193, 0, 89, 194, 195, 90, 0, 0,
	196, 197, 198, 0, 199, 0, 346, 0, 91, 92,
	93, 0, 94, 0, 95, 0, 347, 96, 97, 0,
	0, 0, 0, 0, 0, 98, 99, 100, 101, 200,
	102, 201, 202, 0, 0, 103, 0, 0, 0, 104,
	105, 0, 106, 0, 0, 0, 203, 107, 108, 204,
	0, 0, 0, 109, 110, 205, 0, 111, 0, 112,
	0, 0, 348, 0, 113, 206, 0, 207, 0, 114,
	115, 208, 209, 0, 0, 116, 0, 349, 117, 210,
	211, 212, 0, 213, 0, 350, 118, 351, 119, 120,
	0, 0, 214, 352, 121, 353, 0, 122, 0, 0,
	123, 0, 124, 125, 126, 127, 128, 354, 129, 130,
	133, 131, 0, 132, 0, 215, 134, 216, 135, 136,
	0, 0, 0, 0, 0, 137, 217, 355, 138, 356,
	218, 139, 140, 0, 219, 141, 220, 142, 0, 143,
	144, 145, 221, 146, 147, 0, 149, 150, 148, 151,
	0, 152, 357, 153, 154, 222, 155, 0, 156, 157,
	158, 53, 223, 159, 160, 0, 161, 162, 358, 163,
	224, 225, 164, 0, 165, 166, 168, 226, 167, 227,
	0, 169, 55, 170, 171, 0, 228, 229, 230, 0,
	0, 172, 231, 232, 0, 173, 174, 175, 176, 0,
	0, 177, 178, 179, 0, 0, 180, 181, 182, 345,
	234, 0, 183, 0, 0, 0, 51, 184, 185, 186,
	187, 0, 52, 341, 643, 0, 644, 639, 634, 0,
	0, 0, 0, 0, 0, 83, 84, 0, 85, 0,
	0, 50, 0, 0, 0, 0, 0, 86, 87, 188,
	189, 190, 191, 88, 192, 193, 0, 89, 194, 195,
	90, 0, 0, 196, 197, 198, 0, 199, 0, 346,
	0, 91, 92, 93, 0, 94, 0, 95, 0, 347,
	96, 97, 0, 0, 0, 0, 0, 0, 98, 99,
	100, 101, 200, 102, 201, 202, 647, 0, 103, 0,
	0, 0, 104, 105, 0, 106, 0, 0, 0, 203,
	107, 108, 204, 636, 0, 0, 109, 110, 205, 0,
	111, 0, 112, 0, 0, 348, 0, 113, 206, 0,
	207, 0, 114, 115, 208, 209, 0, 0, 116, 0,
	349, 117, 210, 211, 212, 0, 213, 0, 350, 118,
	351, 119, 120, 0, 0, 214, 352, 121, 353, 0,
	122, 0, 0, 123, 0, 124, 125, 126, 127, 128,
	354, 129, 130, 133, 131, 0, 132, 0, 215, 134,
	216, 135, 136, 0, 637, 0, 0, 0, 137, 217,
	355, 138, 356, 218, 139, 140, 0, 219, 141, 220,
	142, 0, 143, 144, 145, 221, 146, 147, 0, 149,
	150, 148, 151, 0, 152, 357, 153, 154, 222, 155,
	0, 156, 157, 158, 0, 223, 159, 160, 0, 161,
	162, 358, 163, 224, 225, 164, 0, 165, 166, 168,
	226, 167, 227, 0, 169, 0, 170, 171, 0, 228,
	229, 230, 0, 0, 172, 231, 232, 635, 173, 174,
	175, 176, 0, 0, 177, 178, 179, 0, 0, 180,
	181, 182, 233, 234, 0, 183, 0, 0, 0, 0,
	184, 185, 186, 187, 0, 341, 643, 0, 644, 639,
	634, 0, 0, 0, 0, 645, 640, 83, 84, 0,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	87, 188, 189, 190, 191, 88, 192, 193, 0, 89,
	194, 195, 90, 0, 0, 196, 197, 198, 0, 199,
	0, 346, 0, 91, 92, 93, 0, 94, 0, 95,
	0, 347, 96, 97, 0, 0, 0, 0, 0, 0,
	98, 99, 100, 101, 200, 102, 201, 202, 630, 0,
	103, 0, 0, 0, 104, 105, 0, 106, 0, 0,
	0, 203, 107, 108, 204, 636, 0, 0, 109, 110,
	205, 0, 111, 0, 112, 0, 0, 348, 0, 113,
	206, 0, 207, 0, 114, 115, 208, 209, 0, 0,
	116, 0, 349, 117, 210, 211, 212, 0, 213, 0,
	350, 118, 351, 119, 120, 0, 0, 214, 352, 121,
	353, 0, 122, 0, 0, 123, 0, 124, 125, 126,
	127, 128, 354, 129, 130, 133, 131, 0, 132, 0,
	215, 134, 216, 135, 136, 0, 637, 0, 0, 0,
	137, 217, 355, 138, 356, 218, 139, 140, 0, 219,
	141, 220, 142, 0, 143, 144, 145, 221, 146, 147,
	0, 149, 150, 148, 151, 0, 152, 357, 153, 154,
	222, 155, 0, 156, 157, 158, 0, 223, 159, 160,
	0, 161, 162, 358, 163, 224, 225, 164, 0, 165,
	166, 168, 226, 167, 227, 0, 169, 0, 170, 171,
	0, 228, 229, 230, 0, 0, 172, 231, 232, 635,
	173, 174, 175, 176, 0, 0, 177, 178, 179, 0,
	0, 180, 181, 182, 233, 234, 0, 183, 0, 0,
	0, 0, 184, 185, 186, 187, 0, 341, 643, 0,
	644, 639, 634, 0, 0, 0, 0, 645, 640, 83,
	84, 0, 85, 0, 0, 0, 0, 0, 0, 0,
	0, 86, 87, 188, 189, 190, 191, 88, 192, 193,
	0, 89, 194, 195, 90, 0, 0, 196, 197, 198,
	0, 199, 0, 346, 0, 91, 92, 93, 0, 94,
	0, 95, 0, 347, 96, 97, 0, 0, 0, 0,
	0, 0, 98, 99, 100, 101, 200, 102, 201, 202,
	0, 0, 103, 0, 0, 0, 104, 105, 0, 106,
	0, 0, 0, 203, 107, 108, 204, 636, 0, 0,
	109, 110, 205, 0, 111, 0, 112, 0, 0, 348,
	0, 113, 206, 0, 207, 0, 114, 115, 208, 209,
	0, 0, 116, 0, 349, 117, 210, 211, 212, 0,
	213, 0, 350, 118, 351, 119, 120, 0, 0, 214,
	352, 121, 353, 0, 122, 0, 0, 123, 0, 124,
	125, 126, 127, 128, 354, 129, 130, 133, 131, 0,
	132, 0, 215, 134, 216, 135, 136, 0, 637, 0,
	0, 0, 137, 217, 355, 138, 356, 218, 139, 140,
	0, 219, 141, 220, 142, 0, 143, 144, 145, 221,
	146, 147, 0, 149, 150, 148, 151, 0, 152, 357,
	153, 154, 222, 155, 0, 156, 157, 158, 0, 223,
	159, 160, 0, 161, 162, 358, 163, 224, 225, 164,
	0, 165, 166, 168, 226, 167, 227, 0, 169, 0,
	170, 171, 0, 228, 229, 230, 0, 0, 172, 231,
	232, 635, 173, 174, 175, 176, 0, 0, 177, 178,
	179, 0, 0, 180, 181, 182, 233, 234, 80, 183,
	0, 0, 0, 0, 184, 185, 186, 187, 0, 0,
	83, 84, 0, 85, 0, 0, 0, 0, 0, 645,
	640, 0, 86, 87, 188, 189, 190, 191, 88, 192,
	193, 0, 89, 194, 195, 90, 0, 0, 196, 197,
	198, 0, 199, 0, 0, 0, 91, 92, 93, 0,
	94, 0, 95, 0, 0, 96, 97, 0, 0, 0,
	0, 0, 0, 98, 99, 100, 101, 200, 102, 201,
	202, 0, 0, 103, 0, 0, 0, 104, 105, 0,
	106, 0, 0, 0, 203, 107, 108, 204, 0, 0,
	0, 109, 110, 205, 0, 111, 0, 112, 0, 0,
	0, 0, 113, 206, 0, 207, 0, 114, 115, 208,
	209, 0, 0, 116, 0, 0, 117, 210, 211, 212,
	0, 213, 0, 0, 118, 0, 119, 120, 0, 0,
	214, 0, 121, 0, 0, 122, 0, 0, 123, 0,
	124, 125, 126, 127, 128, 0, 129, 130, 133, 131,
	0, 132, 0, 215, 134, 216, 135, 136, 0, 0,
	314, 0, 0, 137, 217, 0, 138, 0, 218, 139,
	140, 0, 219, 141, 220, 142, 0, 143, 144, 145,
	221, 146, 147, 0, 149, 150, 148, 151, 0, 152,
	0, 153, 154, 222, 155, 0, 156, 157, 158, 53,
	223, 159, 160, 0, 161, 162, 0, 163, 224, 225,
	164, 0, 165, 166, 168, 226, 167, 227, 0, 169,
	55, 170, 171, 0, 228, 229, 230, 0, 0, 172,
	231, 232, 0, 173, 174, 175, 176, 0, 0, 177,
	178, 179, 0, 0, 180, 181, 182, 345, 234, 0,
	183, 0, 0, 0, 51, 184, 185, 186, 187, 80,
	52, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 83, 84, 0, 85, 0, 0, 0, 0, 1006,
	0, 0, 0, 86, 87, 188, 189, 190, 191, 88,
	192, 193, 0, 89, 194, 195, 90, 0, 0, 196,
	197, 198, 0, 199, 0, 0, 0, 91, 92, 93,
	0, 94, 0, 95, 0, 0, 96, 97, 0, 0,
	0, 0, 0, 0, 98, 99, 100, 101, 200, 102,
	201, 202, 0, 0, 103, 0, 0, 0, 104, 105,
	0, 106, 0, 0, 0, 203, 107, 108, 204, 0,
	0, 0, 109, 110, 205, 0, 111, 0, 112, 0,
	0, 0, 0, 113, 206, 0, 207, 0, 114, 115,
	208, 209, 0, 0, 116, 0, 0, 117, 210, 211,
	212, 0, 213, 0, 0, 118, 0, 119, 120, 0,
	0, 214, 0, 121, 0, 0, 122, 0, 0, 123,
	0, 124, 125, 126, 127, 128, 0, 129, 130, 133,
	131, 0, 132, 0, 215, 134, 216, 135, 136, 0,
	0, 0, 0, 0, 137, 217, 0, 138, 0, 218,
	139, 140, 0, 219, 141, 220, 142, 0, 143, 144,
	145, 221, 146, 147, 0, 149, 150, 148, 151, 0,
	152, 0, 153, 154, 222, 155, 0, 156, 157, 158,
	53, 223, 159, 160, 0, 161, 162, 0, 163, 224,
	225, 164, 0, 165, 166, 168, 226, 167, 227, 0,
	169, 55, 170, 171, 0, 228, 229, 230, 0, 0,
	172, 231, 232, 0, 173, 174, 175, 176, 0, 0,
	177, 178, 179, 0, 0, 180, 181, 182, 345, 234,
	0, 183, 0, 0, 0, 51, 184, 185, 186, 187,
	80, 52, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 83, 84, 0, 85, 0, 0, 0, 0,
	50, 1218, 0, 0, 86, 87, 188, 189, 190, 191,
	88, 192, 193, 0, 89, 194, 195, 90, 0, 0,
	196, 197, 198, 0, 199, 0, 0, 0, 91, 92,
	93, 0, 94, 0, 95, 0, 0, 96, 97, 0,
	0, 0, 0, 0, 0, 98, 99, 100, 101, 200,
	102, 201, 202, 0, 0, 103, 0, 0, 0, 104,
	105, 0, 106, 0, 0, 0, 203, 107, 108, 204,
	0, 0, 0, 109, 110, 205, 0, 111, 0, 112,
	0, 0, 0, 0, 113, 206, 0, 207, 0, 114,
	115, 208, 209, 0, 0, 116, 0, 0, 117, 210,
	211, 212, 0, 213, 0, 0, 118, 0, 119, 120,
	0, 0, 214, 0, 121, 0, 0, 122, 0, 0,
	123, 0, 124, 125, 126, 127, 128, 0, 129, 130,
	133, 131, 0, 132, 0, 215, 134, 216, 135, 136,
	0, 0, 0, 0, 0, 137, 217, 0, 138, 0,
	218, 139, 140, 0, 219, 141, 220, 142, 0, 143,
	144, 145, 221, 146, 147, 0, 149, 150, 148, 151,
	0, 152, 0, 153, 154, 222, 155, 0, 156, 157,
	158, 0, 223, 159, 160, 0, 161, 162, 0, 163,
	224, 225, 164, 0, 165, 166, 168, 226, 167, 227,
	0, 169, 0, 170, 171, 0, 228, 229, 230, 0,
	0, 172, 231, 232, 0, 173, 174, 175, 176, 0,
	0, 177, 178, 179, 0, 0, 180, 181, 182, 233,
	234, 0, 183, 0, 0, 0, 0, 184, 185, 186,
	187, 80, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 83, 84, 0, 85, 0, 0, 0,
	0, 0, 424, 0, 0, 86, 87, 188, 189, 190,
	191, 88, 192, 193, 0, 89, 194, 195, 90, 0,
	0, 196, 197, 198, 0, 199, 0, 0, 0, 91,
	92, 93, 0, 94, 0, 95, 0, 0, 96, 97,
	0, 0, 0, 0, 0, 0, 98, 99, 100, 101,
	200, 102, 201, 202, 0, 0, 103, 0, 0, 0,
	104, 105, 0, 106, 0, 0, 0, 203, 107, 108,
	204, 0, 0, 0, 109, 110, 205, 0, 111, 0,
	112, 0, 0, 0, 0, 113, 206, 0, 207, 0,
	114, 115, 208, 209, 0, 0, 116, 0, 0, 117,
	210, 211, 212, 0, 213, 0, 0, 118, 0, 119,
	120, 0, 0, 214, 0, 121, 0, 0, 122, 0,
	0, 123, 0, 124, 125, 126, 127, 128, 0, 129,
	130, 133, 131, 0, 132, 0, 215, 134, 216, 135,
	136, 0, 0, 314, 0, 0, 137, 217, 0, 138,
	0, 218, 139, 140, 0, 219, 141, 220, 142, 0,
	143, 144, 145, 221, 146, 147, 0, 149, 150, 148,
	151, 0, 152, 0, 153, 154, 222, 155, 0, 156,
	157, 158, 0, 223, 159, 160, 0, 161, 162, 0,
	163, 224, 225, 164, 0, 165, 166, 168, 226, 167,
	227, 0, 169, 0, 170, 171, 0, 228, 229, 230,
	0, 0, 172, 231, 232, 0, 173, 174, 175, 176,
	0, 0, 177, 178, 179, 0, 0, 180, 181, 182,
	233, 234, 0, 183, 0, 0, 0, 0, 184, 185,
	186, 187, 80, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 83, 84, 0, 85, 0, 0,
	0, 0, 1006, 0, 0, 0, 86, 87, 188, 189,
	190, 191, 88, 192, 193, 0, 89, 194, 195, 90,
	0, 0, 196, 197, 198, 0, 199, 0, 0, 0,
	91, 92, 93, 0, 94, 0, 95, 0, 0, 96,
	97, 0, 0, 0, 0, 0, 0, 98, 99, 100,
	101, 200, 102, 201, 202, 0, 0, 103, 0, 0,
	0, 104, 105, 0, 106, 0, 0, 0, 203, 107,
	108, 204, 0, 0, 0, 109, 110, 205, 0, 111,
	0, 112, 0, 0, 0, 0, 113, 206, 0, 207,
	0, 114, 115, 208, 209, 0, 0, 116, 0, 0,
	117, 210, 211, 212, 0, 213, 0, 0, 118, 0,
	119, 120, 0, 0, 214, 0, 121, 0, 0, 122,
	0, 0, 123, 0, 124, 125, 126, 127, 128, 0,
	129, 130, 133, 131, 0, 132, 0, 215, 134, 216,
	135, 136, 0, 0, 0, 0, 0, 137, 217, 0,
	138, 0, 218, 139, 140, 0, 219, 141, 220, 142,
	0, 143, 144, 145, 221, 146, 147, 0, 149, 150,
	148, 151, 0, 152, 0, 153, 154, 222, 155, 0,
	156, 157, 158, 0, 223, 159, 160, 0, 161, 162,
	0, 163, 224, 225, 164, 0, 165, 166, 168, 226,
	167, 227, 0, 169, 0, 170, 171, 0, 228, 229,
	230, 0, 0, 172, 231, 232, 0, 173, 174, 175,
	176, 0, 0, 177, 178, 179, 0, 0, 180, 181,
	182, 233, 234, 0, 183, 0, 0, 0, 0, 184,
	185, 186, 187, 80, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 83, 84, 0, 85, 0,
	0, 0, 0, 918, 0, 0, 0, 86, 87, 188,
	189, 190, 191, 88, 192, 193, 0, 89, 194, 195,
	90, 0, 0, 196, 197, 198, 0, 199, 0, 0,
	0, 91, 92, 93, 0, 94, 0, 95, 0, 0,
	96, 97, 0, 0, 0, 0, 0, 0, 98, 99,
	100, 101, 200, 102, 201, 202, 0, 0, 103, 0,
	0, 0, 104, 105, 0, 106, 0, 0, 0, 203,
	107, 108, 204, 0, 0, 0, 109, 110, 205, 0,
	111, 0, 112, 0, 0, 0, 0, 113, 206, 0,
	207, 0, 114, 115, 208, 209, 0, 0, 116, 0,
	0, 117, 210, 211, 212, 0, 213, 0, 0, 118,
	0, 119, 120, 0, 0, 214, 0, 121, 0, 0,
	122, 0, 0, 123, 0, 124, 125, 126, 127, 128,
	0, 129, 130, 133, 131, 0, 132, 0, 215, 134,
	216, 135, 136, 0, 0, 0, 0, 0, 137, 217,
	0, 138, 0, 218, 139, 140, 0, 219, 141, 220,
	142, 0, 143, 144, 145, 221, 146, 147, 0, 149,
	150, 148, 151, 0, 152, 0, 153, 154, 222, 155,
	0, 156, 157, 158, 0, 223, 159, 160, 0, 161,
	162, 0, 163, 224, 225, 164, 0, 165, 166, 168,
	226, 167, 227, 0, 169, 0, 170, 171, 0, 228,
	229, 230, 0, 0, 172, 231, 232, 0, 173, 174,
	175, 176, 0, 0, 177, 178, 179, 0, 0, 180,
	181, 182, 233, 234, 0, 183, 0, 0, 0, 0,
	184, 185, 186, 187, 80, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 83, 84, 0, 85,
	0, 0, 0, 0, 1426, 0, 0, 0, 86, 87,
	188, 189, 190, 191, 88, 192, 193, 0, 89, 194,
	195, 90, 0, 0, 196, 197, 198, 0, 199, 0,
	0, 0, 91, 92, 93, 0, 94, 0, 95, 0,
	0, 96, 97, 0, 0, 0, 0, 0, 0, 98,
	99, 100, 101, 200, 102, 201, 202, 0, 0, 103,
	0, 0, 0, 104, 105, 0, 106, 0, 0, 0,
	203, 107, 108, 204, 0, 0, 0, 109, 110, 205,
	0, 111, 0, 112, 0, 0, 0, 0, 113, 206,
	0, 207, 0, 114, 115, 208, 209, 0, 0, 116,
	0, 0, 117, 210, 211, 212, 0, 213, 0, 0,
	118, 0, 119, 120, 0, 0, 214, 0, 121, 0,
	0, 122, 0, 0, 123, 0, 124, 125, 126, 127,
	128, 0, 129, 130, 133, 131, 0, 132, 0, 215,
	134, 216, 135, 136, 0, 0, 0, 0, 0, 137,
	217, 0, 138, 0, 218, 139, 140, 0, 219, 141,
	220, 142, 0, 143, 144, 145, 221, 146, 147, 0,
	149, 150, 148, 151, 0, 152, 0, 153, 154, 222,
	155, 0, 156, 157, 158, 0, 223, 159, 160, 0,
	161, 162, 0, 163, 224, 225, 164, 0, 165, 166,
	168, 226, 167, 227, 0, 169, 0, 170, 171, 0,
	228, 229, 230, 0, 0, 172, 231, 232, 0, 173,
	174, 175, 176, 0, 0, 177, 178, 179, 0, 0,
	180, 181, 182, 233, 234, 0, 183, 0, 0, 0,
	0, 184, 185, 186, 187, 80, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 83, 84, 0,
	85, 0, 0, 0, 0, 525, 0, 0, 0, 86,
	87, 188, 189, 190, 191, 88, 192, 193, 0, 89,
	194, 195, 90, 0, 0, 196, 197, 198, 0, 199,
	0, 0, 0, 91, 92, 93, 0, 94, 0, 95,
	0, 0, 96, 97, 0, 0, 0, 0, 0, 0,
	98, 99, 615, 101, 200, 102, 201, 202, 0, 0,
	103, 0, 0, 0, 104, 105, 0, 106, 0, 0,
	0, 203, 107, 108, 204, 0, 0, 0, 109, 110,
	205, 0, 111, 0, 112, 0, 0, 0, 0, 113,
	206, 0, 207, 0, 114, 115, 208, 209, 0, 0,
	116, 0, 0, 117, 210, 211, 212, 0, 213, 0,
	0, 118, 0, 119, 120, 0, 0, 214, 0, 121,
	0, 0, 122, 0, 0, 123, 0, 124, 125, 126,
	127, 128, 0, 129, 130, 133, 131, 0, 132, 0,
	215, 134, 216, 135, 136, 0, 0, 0, 0, 0,
	137, 217, 0, 138, 0, 218, 139, 140, 0, 219,
	141, 220, 142, 0, 143, 144, 145, 221, 146, 147,
	0, 149, 150, 148, 151, 0, 152, 0, 153, 154,
	222, 155, 0, 156, 157, 158, 0, 223, 159, 160,
	0, 161, 162, 0, 163, 224, 225, 164, 0, 165,
	166, 168, 226, 167, 227, 0, 169, 614, 170, 171,
	0, 228, 229, 230, 0, 0, 172, 231, 232, 0,
	173, 174, 175, 176, 0, 0, 177, 178, 179, 0,
	0, 180, 181, 182, 233, 234, 80, 183, 0, 0,
	0, 0, 184, 185, 186, 187, 0, 0, 83, 84,
	0, 85, 0, 0, 0, 0, 0, 0, 0, 618,
	86, 87, 188, 189, 190, 191, 88, 192, 193, 0,
	89, 194, 195, 90, 0, 0, 196, 197, 198, 0,
	199, 0, 0, 0, 91, 92, 93, 0, 94, 0,
	95, 0, 0, 96, 97, 0, 0, 0, 0, 0,
	0, 98, 99, 100, 101, 200, 102, 201, 202, 0,
	0, 103, 0, 0, 0, 104, 105, 0, 106, 0,
	0, 0, 203, 107, 108, 204, 0, 0, 0, 109,
	110, 205, 0, 111, 0, 112, 0, 0, 0, 0,
	113, 206, 0, 207, 0, 114, 115, 208, 209, 0,
	0, 116, 0, 0, 117, 210, 211, 212, 0, 213,
	0, 0, 118, 0, 119, 120, 0, 0, 214, 0,
	121, 0, 0, 122, 0, 0, 123, 0, 124, 125,
	126, 127, 128, 0, 129, 130, 133, 131, 0, 132,
	0, 215, 134, 216, 135, 136, 0, 0, 0, 0,
	0, 137, 217, 0, 138, 0, 218, 139, 140, 0,
	219, 141, 220, 142, 0, 143, 144, 145, 221, 146,
	147, 0, 149, 150, 148, 151, 0, 152, 0, 153,
	154, 222, 155, 0, 156, 157, 158, 0, 223, 159,
	160, 0, 161, 162, 0, 163, 224, 225, 164, 0,
	165, 166, 168, 226, 167, 227, 0, 169, 0, 170,
	171, 0, 228, 229, 230, 0, 0, 172, 231, 232,
	0, 173, 174, 175, 176, 0, 0, 177, 178, 179,
	0, 0, 180, 181, 182, 233, 234, 341, 183, 0,
	0, 0, 0, 184, 185, 186, 187, 0, 0, 83,
	84, 0, 85, 0, 0, 0, 0, 0, 0, 0,
	618, 86, 87, 188, 189, 190, 191, 88, 192, 193,
	0, 89, 194, 195, 90, 0, 0, 196, 197, 198,
	0, 199, 0, 346, 0, 91, 92, 93, 0, 94,
	0, 95, 0, 347, 96, 97, 0, 0, 0, 0,
	0, 0, 98, 99, 100, 101, 200, 102, 201, 202,
	0, 0, 103, 0, 0, 0, 104, 105, 0, 106,
	0, 0, 0, 203, 107, 108, 204, 0, 0, 0,
	109, 110, 205, 0, 111, 0, 112, 0, 0, 348,
	0, 113, 206, 0, 207, 0, 114, 115, 208, 209,
	0, 0, 116, 0, 349, 117, 210, 211, 212, 0,
	213, 0, 350, 118, 351, 119, 120, 0, 0, 214,
	352, 121, 353, 0, 122, 0, 0, 123, 0, 124,
	125, 126, 127, 128, 354, 129, 130, 133, 131, 0,
	132, 0, 215, 134, 216, 135, 136, 0, 0, 0,
	0, 0, 137, 217, 355, 138, 356, 218, 139, 140,
	0, 219, 141, 220, 142, 0, 143, 144, 145, 221,
	146, 147, 0, 149, 150, 148, 151, 0, 152, 357,
	153, 154, 222, 155, 0, 156, 157, 158, 0, 223,
	159, 160, 0, 161, 162, 358, 163, 224, 225, 164,
	0, 165, 166, 168, 226, 167, 227, 0, 169, 0,
	170, 171, 0, 228, 229, 230, 0, 0, 172, 231,
	232, 0, 173, 174, 175, 176, 0, 0, 177, 178,
	179, 0, 0, 180, 181, 182, 233, 234, 80, 183,
	0, 0, 0, 0, 184, 185, 186, 187, 0, 0,
	83, 84, 0, 85, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 87, 188, 189, 190, 191, 88, 192,
	193, 0, 89, 194, 195, 90, 0, 0, 196, 197,
	198, 891, 199, 0, 0, 0, 91, 92, 93, 0,
	94, 889, 95, 0, 0, 96, 97, 0, 0, 0,
	0, 0, 0, 98, 99, 100, 101, 200, 102, 201,
	202, 0, 0, 103, 0, 0, 0, 104, 105, 0,
	106, 0, 0, 0, 203, 107, 108, 204, 0, 983,
	0, 109, 110, 205, 0, 111, 0, 112, 894, 0,
	0, 0, 113, 206, 0, 207, 0, 114, 115, 208,
	209, 0, 981, 116, 0, 0, 117, 210, 211, 212,
	0, 213, 0, 0, 118, 0, 119, 120, 0, 0,
	214, 0, 121, 0, 0, 122, 0, 0, 123, 0,
	124, 125, 126, 127, 128, 0, 129, 130, 133, 131,
	0, 132, 0, 215, 134, 216, 135, 136, 0, 0,
	0, 0, 0, 137, 217, 0, 138, 0, 218, 139,
	140, 0, 219, 141, 220, 142, 893, 143, 144, 145,
	221, 146, 147, 0, 149, 150, 148, 151, 0, 152,
	0, 153, 154, 222, 155, 0, 156, 157, 158, 0,
	223, 159, 160, 0, 161, 162, 0, 163, 224, 225,
	164, 0, 165, 166, 168, 226, 167, 227, 0, 169,
	0, 170, 171, 0, 228, 229, 230, 0, 0, 172,
	231, 232, 0, 173, 174, 175, 176, 0, 982, 177,
	178, 179, 0, 0, 180, 181, 182, 233, 234, 80,
	183, 0, 0, 0, 0, 184, 185, 186, 187, 0,
	0, 83, 84, 0, 85, 0, 0, 0, 0, 0,
	0, 0, 0, 86, 87, 188, 189, 190, 191, 88,
	192, 193, 0, 89, 194, 195, 90, 0, 0, 196,
	197, 198, 891, 199, 0, 0, 886, 91, 92, 93,
	0, 94, 889, 95, 0, 0, 96, 97, 0, 0,
	0, 0, 0, 0, 98, 99, 100, 101, 200, 102,
	201, 202, 0, 0, 103, 0, 0, 0, 104, 105,
	0, 106, 0, 0, 0, 203, 107, 108, 204, 0,
	0, 0, 109, 110, 205, 0, 111, 0, 112, 894,
	0, 0, 0, 113, 206, 0, 207, 0, 114, 115,
	885, 209, 0, 0, 116, 0, 0, 117, 210, 211,
	212, 0, 213, 0, 0, 118, 0, 119, 120, 0,
	0, 214, 0, 121, 0, 0, 122, 0, 0, 123,
	0, 124, 125, 126, 127, 128, 0, 129, 130, 133,
	131, 0, 132, 0, 215, 134, 216, 135, 136, 0,
	0, 0, 0, 0, 137, 217, 0, 138, 0, 218,
	139, 140, 0, 219, 141, 220, 142, 893, 143, 144,
	145, 221, 146, 147, 0, 149, 150, 148, 151, 0,
	152, 0, 153, 154, 222, 155, 0, 156, 157, 158,
	0, 223, 159, 160, 0, 161, 162, 0, 163, 224,
	225, 164, 0, 165, 166, 168, 226, 167, 227, 0,
	169, 0, 170, 171, 0, 228, 229, 230, 0, 0,
	172, 231, 232, 0, 173, 174, 175, 176, 0, 892,
	177, 178, 179, 0, 0, 180, 181, 182, 233, 234,
	80, 183, 0, 0, 0, 0, 184, 185, 186, 187,
	0, 0, 83, 84, 0, 85, 0, 0, 0, 0,
	0, 1218, 0, 0, 86, 87, 188, 189, 190, 191,
	88, 192, 193, 0, 89, 194, 195, 90, 0, 0,
	196, 197, 198, 0, 199, 0, 0, 0, 91, 92,
	93, 0, 94, 0, 95, 0, 0, 96, 97, 0,
	0, 0, 0, 0, 0, 98, 99, 100, 101, 200,
	102, 201, 202, 0, 0, 103, 0, 0, 0, 104,
	105, 0, 106, 0, 0, 0, 203, 107, 108, 204,
	0, 0, 0, 109, 110, 205, 0, 111, 0, 112,
	0, 0, 0, 0, 113, 206, 0, 207, 0, 114,
	115, 208, 209, 0, 0, 116, 0, 0, 117, 210,
	211, 212, 0, 213, 0, 0, 118, 0, 119, 120,
	0, 0, 214, 0, 121, 0, 0, 122, 0, 0,
	123, 0, 124, 125, 126, 127, 128, 0, 129, 130,
	133, 131, 0, 132, 0, 215, 134, 216, 135, 136,
	0, 0, 0, 0, 0, 137, 217, 0, 138, 0,
	218, 139, 140, 0, 219, 141, 220, 142, 0, 143,
	144, 145, 221, 146, 147, 0, 149, 150, 148, 151,
	0, 152, 0, 153, 154, 222, 155, 0, 156, 157,
	158, 0, 223, 159, 160, 0, 161, 162, 0, 163,
	224, 225, 164, 0, 165, 166, 168, 226, 167, 227,
	0, 169, 0, 170, 171, 0, 228, 229, 230, 0,
	0, 172, 231, 232, 0, 173, 174, 175, 176, 0,
	0, 177, 178, 179, 0, 0, 180, 181, 182, 233,
	234, 80, 183, 0, 0, 0, 0, 184, 185, 186,
	187, 0, 0, 83, 84, 0, 85, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 87, 188, 189, 190,
	191, 88, 192, 193, 0, 89, 194, 195, 90, 0,
	0, 196, 197, 198, 0, 199, 0, 0, 0, 91,
	92, 93, 0, 94, 0, 95, 0, 0, 96, 97,
	0, 0, 0, 0, 0, 0, 98, 99, 100, 101,
	200, 102, 201, 202, 0, 0, 103, 0, 0, 0,
	104, 105, 0, 106, 0, 0, 0, 203, 107, 108,
	204, 0, 0, 0, 109, 110, 205, 0, 111, 0,
	112, 0, 0, 0, 0, 113, 206, 0, 207, 0,
	114, 115, 208, 209, 0, 0, 116, 0, 0, 117,
	210, 211, 212, 0, 213, 0, 0, 118, 0, 119,
	120, 0, 0, 214, 0, 121, 0, 0, 122, 0,
	0, 123, 0, 124, 125, 126, 127, 128, 0, 129,
	130, 133, 131, 0, 132, 0, 215, 134, 216, 135,
	136, 0, 0, 314, 0, 0, 137, 217, 0, 138,
	0, 218, 139, 140, 0, 219, 141, 220, 142, 0,
	143, 144, 145, 221, 146, 147, 0, 149, 150, 148,
	151, 0, 152, 0, 153, 154, 222, 155, 0, 156,
	157, 158, 0, 223, 159, 160, 0, 161, 162, 0,
	163, 224, 225, 164, 0, 165, 166, 168, 226, 167,
	227, 0, 169, 0, 170, 171, 0, 228, 229, 230,
	0, 0, 172, 231, 232, 0, 173, 174, 175, 176,
	0, 0, 177, 178, 179, 0, 0, 180, 181, 182,
	233, 234, 80, 183, 0, 0, 0, 0, 184, 185,
	186, 187, 0, 0, 83, 84, 0, 85, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 87, 188, 189,
	190, 191, 88, 192, 193, 0, 89, 194, 195, 90,
	0, 0, 196, 197, 198, 0, 199, 0, 0, 0,
	91, 92, 93, 0, 94, 0, 95, 0, 0, 96,
	97, 0, 0, 0, 0, 0, 0, 98, 99, 100,
	101, 200, 102, 201, 202, 0, 0, 103, 0, 0,
	0, 104, 105, 0, 106, 0, 0, 0, 203, 107,
	108, 204, 0, 0, 0, 109, 110, 205, 0, 111,
	0, 112, 0, 0, 0, 0, 113, 206, 0, 207,
	0, 114, 115, 567, 209, 0, 0, 116, 0, 0,
	117, 210, 211, 212, 0, 213, 0, 0, 118, 0,
	119, 120, 0, 0, 214, 0, 121, 0, 0, 122,
	0, 0, 123, 0, 124, 125, 126, 127, 128, 0,
	129, 130, 133, 131, 0, 132, 0, 215, 134, 216,
	135, 136, 0, 0, 314, 0, 0, 137, 217, 0,
	138, 0, 218, 139, 140, 0, 219, 141, 220, 142,
	0, 143, 144, 145, 221, 146, 147, 0, 149, 150,
	148, 151, 0, 152, 0, 153, 154, 222, 155, 0,
	156, 157, 158, 0, 223, 159, 160, 0, 161, 162,
	0, 163, 224, 225, 164, 0, 165, 166, 168, 226,
	167, 227, 0, 169, 0, 170, 171, 0, 228, 229,
	230, 0, 0, 172, 231, 232, 0, 173, 174, 175,
	176, 0, 0, 177, 178, 179, 0, 0, 180, 181,
	182, 233, 234, 80, 183, 0, 0, 0, 0, 184,
	185, 186, 187, 0, 0, 83, 84, 0, 85, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 87, 188,
	189, 190, 191, 88, 192, 193, 0, 89, 194, 195,
	90, 0, 0, 196, 197, 198, 0, 199, 0, 0,
	0, 91, 92, 93, 0, 94, 0, 95, 0, 0,
	96, 97, 0, 0, 0, 0, 0, 0, 98, 99,
	100, 101, 200, 102, 201, 202, 0, 0, 103, 0,
	0, 0, 104, 105, 0, 106, 0, 0, 0, 203,
	107, 108, 204, 0, 0, 0, 109, 110, 205, 0,
	111, 0, 112, 0, 0, 0, 0, 113, 206, 0,
	207, 0, 114, 115, 320, 209, 0, 0, 116, 0,
	0, 117, 210, 211, 212, 0, 213, 0, 0, 118,
	0, 119, 120, 0, 0, 214, 0, 121, 0, 0,
	122, 0, 0, 123, 0, 124, 125, 126, 127, 128,
	0, 129, 130, 133, 131, 0, 132, 0, 215, 134,
	216, 135, 136, 0, 0, 314, 0, 0, 137, 217,
	0, 138, 0, 218, 139, 140, 0, 219, 141, 220,
	142, 0, 143, 144, 145, 221, 146, 147, 0, 149,
	150, 148, 151, 0, 152, 0, 153, 154, 222, 155,
	0, 156, 157, 158, 0, 223, 159, 160, 0, 161,
	162, 0, 163, 224, 225, 164, 0, 165, 166, 168,
	226, 167, 227, 0, 169, 0, 170, 171, 0, 228,
	229, 230, 0, 0, 172, 231, 232, 0, 173, 174,
	175, 176, 0, 0, 177, 178, 179, 0, 0, 180,
	181, 182, 233, 234, 80, 183, 0, 0, 0, 0,
	184, 185, 186, 187, 0, 0, 83, 84, 0, 85,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 87,
	188, 189, 190, 191, 88, 192, 193, 0, 89, 194,
	195, 90, 0, 0, 196, 197, 198, 0, 199, 0,
	0, 0, 91, 92, 93, 0, 94, 0, 95, 0,
	0, 96, 97, 0, 0, 0, 0, 0, 0, 98,
	99, 100, 101, 200, 102, 201, 202, 0, 0, 103,
	0, 0, 0, 104, 105, 0, 106, 0, 0, 0,
	203, 107, 108, 204, 0, 0, 0, 109, 110, 205,
	0, 111, 0, 112, 0, 0, 0, 0, 113, 206,
	0, 207, 0, 114, 115, 208, 209, 0, 0, 116,
	0, 0, 117, 210, 211, 212, 0, 213, 0, 0,
	118, 0, 119, 120, 0, 0, 214, 0, 121, 0,
	0, 122, 0, 0, 123, 0, 124, 125, 126, 127,
	128, 0, 129, 130, 133, 131, 0, 132, 0, 215,
	134, 216, 135, 136, 0, 0, 0, 0, 0, 137,
	217, 0, 138, 0, 218, 139, 140, 0, 219, 141,
	220, 142, 0, 143, 144, 145, 221, 146, 147, 0,
	149, 150, 148, 151, 0, 152, 0, 153, 154, 222,
	155, 0, 156, 157, 158, 0, 223, 159, 160, 0,
	161, 162, 0, 163, 224, 225, 164, 0, 165, 166,
	168, 226, 167, 227, 0, 169, 0, 170, 171, 0,
	228, 229, 230, 0, 0, 172, 231, 232, 0, 173,
	174, 175, 176, 0, 0, 177, 178, 179, 0, 0,
	180, 181, 182, 233, 234, 80, 183, 0, 0, 0,
	0, 184, 185, 186, 187, 0, 0, 83, 84, 0,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	87, 188, 189, 190, 191, 88, 192, 193, 0, 89,
	194, 195, 90, 0, 0, 196, 197, 198, 0, 199,
	0, 0, 0, 91, 92, 93, 0, 94, 0, 95,
	0, 0, 96, 97, 0, 0, 0, 0, 0, 0,
	98, 99, 100, 101, 200, 102, 201, 202, 0, 0,
	103, 0, 0, 0, 104, 105, 0, 106, 0, 0,
	0, 203, 107, 108, 204, 0, 0, 0, 109, 110,
	205, 0, 111, 0, 112, 0, 0, 0, 0, 113,
	206, 0, 207, 0, 114, 115, 1144, 209, 0, 0,
	116, 0, 0, 117, 210, 211, 212, 0, 213, 0,
	0, 118, 0, 119, 120, 0, 0, 214, 0, 121,
	0, 0, 122, 0, 0, 123, 0, 124, 125, 126,
	127, 128, 0, 129, 130, 133, 131, 0, 132, 0,
	215, 134, 216, 135, 136, 0, 0, 0, 0, 0,
	137, 217, 0, 138, 0, 218, 139, 140, 0, 219,
	141, 220, 142, 0, 143, 144, 145, 221, 146, 147,
	0, 149, 150, 148, 151, 0, 152, 0, 153, 154,
	222, 155, 0, 156, 157, 158, 0, 223, 159, 160,
	0, 161, 162, 0, 163, 224, 225, 164, 0, 165,
	166, 168, 226, 167, 227, 0, 169, 0, 170, 171,
	0, 228, 229, 230, 0, 0, 172, 231, 232, 0,
	173, 174, 175, 176, 0, 0, 177, 178, 179, 0,
	0, 180, 181, 182, 233, 234, 80, 183, 0, 0,
	0, 0, 184, 185, 186, 187, 0, 0, 83, 84,
	0, 85, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 87, 188, 189, 190, 191, 88, 192, 193, 0,
	89, 194, 195, 90, 0, 0, 196, 197, 198, 0,
	199, 0, 0, 0, 91, 92, 93, 0, 94, 0,
	95, 0, 0, 96, 97, 0, 0, 0, 0, 0,
	0, 98, 99, 100, 101, 200, 102, 201, 202, 0,
	0, 103, 0, 0, 0, 104, 105, 0, 106, 0,
	0, 0, 203, 107, 108, 204, 0, 0, 0, 109,
	110, 205, 0, 111, 0, 112, 0, 0, 0, 0,
	113, 206, 0, 207, 0, 114, 115, 1142, 209, 0,
	0, 116, 0, 0, 117, 210, 211, 212, 0, 213,
	0, 0, 118, 0, 119, 120, 0, 0, 214, 0,
	121, 0, 0, 122, 0, 0, 123, 0, 124, 125,
	126, 127, 128, 0, 129, 130, 133, 131, 0, 132,
	0, 215, 134, 216, 135, 136, 0, 0, 0, 0,
	0, 137, 217, 0, 138, 0, 218, 139, 140, 0,
	219, 141, 220, 142, 0, 143, 144, 145, 221, 146,
	147, 0, 149, 150, 148, 151, 0, 152, 0, 153,
	154, 222, 155, 0, 156, 157, 158, 0, 223, 159,
	160, 0, 161, 162, 0, 163, 224, 225, 164, 0,
	165, 166, 168, 226, 167, 227, 0, 169, 0, 170,
	171, 0, 228, 229, 230, 0, 0, 172, 231, 232,
	0, 173, 174, 175, 176, 0, 0, 177, 178, 179,
	0, 0, 180, 181, 182, 233, 234, 80, 183, 0,
	0, 0, 0, 184, 185, 186, 187, 0, 0, 83,
	84, 0, 85, 0, 0, 0, 0, 0, 0, 0,
	0, 86, 87, 188, 189, 190, 191, 88, 192, 193,
	0, 89, 194, 195, 90, 0, 0, 196, 197, 198,
	0, 199, 0, 0, 0, 91, 92, 93, 0, 94,
	0, 95, 0, 0, 96, 97, 0, 0, 0, 0,
	0, 0, 98, 99, 100, 101, 200, 102, 201, 202,
	0, 0, 103, 0, 0, 0, 104, 105, 0, 106,
	0, 0, 0, 203, 107, 108, 204, 0, 0, 0,
	109, 110, 205, 0, 111, 0, 112, 0, 0, 0,
	0, 113, 206, 0, 207, 0, 114, 115, 1133, 209,
	0, 0, 116, 0, 0, 117, 210, 211, 212, 0,
	213, 0, 0, 118, 0, 119, 120, 0, 0, 214,
	0, 121, 0, 0, 122, 0, 0, 123, 0, 124,
	125, 126, 127, 128, 0, 129, 130, 133, 131, 0,
	132, 0, 215, 134, 216, 135, 136, 0, 0, 0,
	0, 0, 137, 217, 0, 138, 0, 218, 139, 140,
	0, 219, 141, 220, 142, 0, 143, 144, 145, 221,
	146, 147, 0, 149, 150, 148, 151, 0, 152, 0,
	153, 154, 222, 155, 0, 156, 157, 158, 0, 223,
	159, 160, 0, 161, 162, 0, 163, 224, 225, 164,
	0, 165, 166, 168, 226, 167, 227, 0, 169, 0,
	170, 171, 0, 228, 229, 230, 0, 0, 172, 231,
	232, 0, 173, 174, 175, 176, 0, 0, 177, 178,
	179, 0, 0, 180, 181, 182, 233, 234, 80, 183,
	0, 0, 0, 0, 184, 185, 186, 187, 0, 0,
	83, 84, 0, 85, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 87, 188, 189, 190, 191, 88, 192,
	193, 0, 89, 194, 195, 90, 0, 0, 196, 197,
	198, 0, 199, 0, 0, 0, 91, 92, 93, 0,
	94, 0, 95, 0, 0, 96, 97, 0, 0, 0,
	0, 0, 0, 98, 99, 100, 101, 200, 102, 201,
	202, 0, 0, 103, 0, 0, 0, 104, 105, 0,
	106, 0, 0, 0, 203, 107, 108, 204, 0, 0,
	0, 109, 110, 205, 0, 111, 0, 112, 0, 0,
	0, 0, 113, 206, 0, 207, 0, 114, 115, 760,
	209, 0, 0, 116, 0, 0, 117, 210, 211, 212,
	0, 213, 0, 0, 118, 0, 119, 120, 0, 0,
	214, 0, 121, 0, 0, 122, 0, 0, 123, 0,
	124, 125, 126, 127, 128, 0, 129, 130, 133, 131,
	0, 132, 0, 215, 134, 216, 135, 136, 0, 0,
	0, 0, 0, 137, 217, 0, 138, 0, 218, 139,
	140, 0, 219, 141, 220, 142, 0, 143, 144, 145,
	221, 146, 147, 0, 149, 150, 148, 151, 0, 152,
	0, 153, 154, 222, 155, 0, 156, 157, 158, 0,
	223, 159, 160, 0, 161, 162, 0, 163, 224, 225,
	164, 0, 165, 166, 168, 226, 167, 227, 0, 169,
	0, 170, 171, 0, 228, 229, 230, 0, 0, 172,
	231, 232, 0, 173, 174, 175, 176, 0, 0, 177,
	178, 179, 0, 0, 180, 181, 182, 233, 234, 80,
	183, 0, 0, 0, 0, 184, 185, 186, 187, 0,
	0, 83, 84, 0, 85, 0, 0, 0, 0, 0,
	0, 0, 0, 86, 87, 188, 189, 190, 191, 88,
	192, 193, 0, 89, 194, 195, 90, 0, 0, 196,
	197, 198, 0, 199, 0, 0, 0, 91, 92, 93,
	0, 94, 0, 95, 0, 0, 96, 97, 0, 0,
	0, 0, 0, 0, 98, 99, 100, 101, 200, 102,
	201, 202, 0, 0, 103, 0, 0, 0, 104, 105,
	0, 106, 0, 0, 0, 203, 107, 108, 204, 0,
	0, 0, 109, 110, 205, 0, 111, 0, 112, 0,
	0, 0, 0, 113, 206, 0, 207, 0, 114, 115,
	208, 209, 0, 0, 116, 0, 0, 117, 210, 211,
	212, 0, 213, 0, 0, 118, 0, 119, 120, 0,
	0, 214, 0, 121, 0, 0, 122, 0, 0, 123,
	0, 124, 125, 126, 127, 128, 0, 129, 130, 133,
	131, 0, 132, 0, 215, 134, 216, 135, 136, 0,
	0, 0, 0, 0, 137, 217, 0, 138, 0, 218,
	139, 140, 0, 219, 141, 220, 142, 0, 143, 144,
	145, 221, 146, 147, 0, 149, 150, 148, 151, 0,
	152, 0, 153, 154, 222, 155, 0, 249, 157, 158,
	0, 223, 159, 160, 0, 161, 162, 0, 163, 224,
	225, 164, 0, 165, 166, 168, 226, 167, 227, 0,
	169, 0, 170, 171, 0, 228, 229, 230, 0, 0,
	172, 231, 232, 0, 173, 174, 175, 176, 0, 0,
	177, 178, 179, 0, 0, 180, 181, 182, 233, 234,
	80, 183, 0, 0, 0, 0, 184, 185, 186, 187,
	0, 0, 83, 84, 0, 85, 0, 0, 0, 0,
	0, 554, 0, 0, 86, 87, 188, 189, 190, 191,
	88, 192, 193, 0, 89, 194, 195, 90, 0, 0,
	196, 197, 198, 0, 199, 0, 0, 0, 91, 92,
	93, 0, 94, 0, 95, 0, 0, 96, 97, 0,
	0, 0, 0, 0, 0, 98, 99, 100, 101, 200,
	102, 201, 202, 0, 0, 103, 0, 0, 0, 104,
	105, 0, 106, 0, 0, 0, 203, 107, 108, 204,
	0, 0, 0, 109, 110, 205, 0, 111, 0, 112,
	0, 0, 0, 0, 113, 206, 0, 207, 0, 114,
	115, 208, 209, 0, 0, 116, 0, 0, 117, 210,
	211, 212, 0, 213, 0, 0, 118, 0, 119, 120,
	0, 0, 214, 0, 121, 0, 0, 122, 0, 0,
	123, 0, 124, 125, 126, 127, 128, 0, 129, 130,
	133, 131, 0, 132, 0, 215, 134, 216, 135, 136,
	0, 0, 0, 0, 0, 137, 217, 0, 138, 0,
	218, 139, 140, 0, 219, 141, 220, 142, 0, 143,
	144, 145, 221, 146, 147, 0, 149, 150, 148, 151,
	0, 152, 0, 153, 154, 222, 155, 0, 156, 157,
	158, 0, 223, 159, 160, 0, 0, 162, 0, 163,
	224, 225, 164, 0, 165, 166, 168, 226, 167, 227,
	0, 169, 0, 170, 171, 0, 228, 229, 230, 0,
	0, 172, 231, 232, 0, 173, 174, 175, 176, 0,
	0, 177, 178, 179, 0, 0, 180, 181, 182, 233,
	234, 80, 183, 0, 0, 0, 0, 184, 185, 186,
	187, 0, 0, 83, 84, 0, 85, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 87, 188, 189, 190,
	191, 88, 192, 193, 0, 89, 194, 195, 90, 0,
	0, 196, 197, 198, 0, 199, 0, 0, 0, 91,
	92, 93, 0, 94, 0, 95, 0, 0, 96, 97,
	0, 0, 0, 0, 0, 0, 98, 99, 100, 101,
	200, 102, 201, 202, 0, 0, 103, 0, 0, 0,
	104, 105, 0, 106, 0, 0, 0, 203, 107, 108,
	204, 0, 0, 0, 109, 110, 205, 0, 111, 0,
	112, 0, 0, 0, 0, 113, 206, 0, 207, 0,
	114, 115, 409, 209, 0, 0, 116, 0, 0, 117,
	210, 211, 212, 0, 213, 0, 0, 118, 0, 119,
	120, 0, 0, 214, 0, 121, 0, 0, 122, 0,
	0, 123, 0, 124, 125, 126, 127, 128, 0, 129,
	130, 133, 131, 0, 132, 0, 215, 134, 216, 135,
	136, 0, 0, 0, 0, 0, 137, 217, 0, 138,
	0, 218, 139, 140, 0, 219, 141, 220, 142, 0,
	143, 144, 145, 221, 146, 147, 0, 149, 150, 148,
	151, 0, 152, 0, 153, 154, 222, 155, 0, 156,
	157, 158, 0, 223, 159, 160, 0, 161, 162, 0,
	163, 224, 225, 164, 0, 165, 166, 168, 226, 167,
	227, 0, 169, 0, 170, 171, 0, 228, 229, 230,
	0, 0, 172, 231, 232, 0, 173, 174, 175, 176,
	0, 0, 177, 178, 179, 0, 0, 180, 181, 182,
	233, 234, 80, 183, 0, 0, 0, 0, 184, 185,
	186, 187, 0, 0, 83, 84, 0, 85, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 87, 188, 189,
	190, 191, 88, 192, 193, 0, 89, 194, 195, 90,
	0, 0, 196, 197, 198, 0, 199, 0, 0, 0,
	91, 92, 93, 0, 94, 0, 95, 0, 0, 96,
	97, 0, 0, 0, 0, 0, 0, 98, 99, 100,
	101, 200, 102, 201, 202, 0, 0, 103, 0, 0,
	0, 104, 105, 0, 106, 0, 0, 0, 203, 107,
	108, 204, 0, 0, 0, 109, 110, 205, 0, 111,
	0, 112, 0, 0, 0, 0, 113, 206, 0, 207,
	0, 114, 115, 406, 209, 0, 0, 116, 0, 0,
	117, 210, 211, 212, 0, 213, 0, 0, 118, 0,
	119, 120, 0, 0, 214, 0, 121, 0, 0, 122,
	0, 0, 123, 0, 124, 125, 126, 127, 128, 0,
	129, 130, 133, 131, 0, 132, 0, 215, 134, 216,
	135, 136, 0, 0, 0, 0, 0, 137, 217, 0,
	138, 0, 218, 139, 140, 0, 219, 141, 220, 142,
	0, 143, 144, 145, 221, 146, 147, 0, 149, 150,
	148, 151, 0, 152, 0, 153, 154, 222, 155, 0,
	156, 157, 158, 0, 223, 159, 160, 0, 161, 162,
	0, 163, 224, 225, 164, 0, 165, 166, 168, 226,
	167, 227, 0, 169, 0, 170, 171, 0, 228, 229,
	230, 0, 0, 172, 231, 232, 0, 173, 174, 175,
	176, 0, 0, 177, 178, 179, 0, 0, 180, 181,
	182, 233, 234, 80, 183, 0, 0, 0, 0, 184,
	185, 186, 187, 0, 0, 83, 84, 0, 85, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 87, 188,
	189, 190, 191, 88, 192, 193, 0, 89, 194, 195,
	90, 0, 0, 196, 197, 369, 0, 199, 0, 0,
	0, 91, 92, 93, 0, 94, 0, 95, 0, 0,
	96, 97, 0, 0, 0, 0, 0, 0, 98, 99,
	100, 101, 200, 102, 201, 202, 0, 0, 103, 0,
	0, 0, 104, 105, 0, 106, 0, 0, 0, 203,
	107, 108, 204, 0, 0, 0, 109, 110, 205, 0,
	111, 0, 112, 0, 0, 0, 0, 113, 206, 0,
	207, 0, 114, 115, 208, 209, 0, 0, 116, 0,
	0, 117, 210, 211, 212, 0, 213, 0, 0, 118,
	0, 119, 120, 0, 0, 214, 0, 121, 0, 0,
	122, 0, 0, 123, 0, 124, 125, 126, 127, 259,
	0, 129, 130, 133, 131, 0, 132, 0, 215, 134,
	216, 135, 136, 0, 0, 0, 0, 0, 137, 217,
	0, 138, 0, 218, 139, 140, 0, 219, 141, 220,
	142, 0, 143, 144, 145, 221, 146, 147, 0, 149,
	150, 148, 151, 0, 152, 0, 153, 154, 222, 155,
	0, 156, 157, 158, 0, 223, 159, 160, 0, 161,
	162, 0, 163, 224, 225, 164, 0, 165, 166, 168,
	226, 167, 227, 0, 169, 0, 170, 171, 0, 258,
	229, 230, 0, 0, 254, 231, 232, 0, 173, 174,
	175, 176, 0, 0, 177, 178, 179, 0, 0, 180,
	181, 182, 233, 234, 80, 183, 0, 0, 0, 0,
	184, 185, 186, 187, 0, 0, 83, 84, 0, 85,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 87,
	188, 189, 190, 191, 88, 192, 193, 0, 89, 194,
	195, 90, 0, 0, 196, 197, 198, 0, 199, 0,
	0, 0, 91, 92, 93, 0, 94, 0, 95, 0,
	0, 96, 97, 0, 0, 0, 0, 0, 0, 98,
	99, 100, 101, 200, 102, 201, 202, 0, 0, 103,
	0, 0, 0, 104, 105, 0, 106, 0, 0, 0,
	203, 107, 108, 204, 0, 0, 0, 109, 110, 205,
	0, 111, 0, 112, 0, 0, 0, 0, 113, 206,
	0, 207, 0, 114, 115, 208, 209, 0, 0, 116,
	0, 0, 117, 210, 211, 212, 0, 213, 0, 0,
	118, 0, 119, 120, 0, 0, 214, 0, 121, 0,
	0, 122, 0, 0, 123, 0, 124, 125, 126, 127,
	259, 0, 129, 130, 133, 131, 0, 132, 0, 215,
	134, 216, 135, 136, 0, 0, 0, 0, 0, 137,
	217, 0, 138, 0, 218, 139, 140, 0, 219, 141,
	220, 142, 0, 143, 144, 145, 221, 146, 147, 0,
	149, 150, 148, 151, 0, 152, 0, 153, 154, 222,
	155, 0, 156, 157, 158, 0, 223, 159, 160, 0,
	161, 162, 0, 163, 224, 225, 164, 0, 165, 166,
	168, 226, 167, 227, 0, 169, 0, 170, 171, 0,
	258, 229, 230, 0, 0, 254, 231, 232, 0, 173,
	174, 175, 176, 0, 0, 177, 178, 179, 0, 0,
	180, 181, 182, 233, 234, 80, 183, 0, 0, 0,
	0, 184, 185, 186, 187, 0, 0, 83, 84, 0,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	87, 188, 189, 190, 191, 88, 192, 193, 0, 89,
	194, 195, 90, 0, 0, 196, 197, 198, 0, 199,
	0, 0, 0, 91, 92, 93, 0, 94, 0, 95,
	0, 0, 96, 97, 0, 0, 0, 0, 0, 0,
	98, 99, 100, 101, 200, 102, 201, 202, 0, 0,
	103, 0, 0, 0, 104, 105, 0, 106, 0, 0,
	0, 203, 107, 108, 204, 0, 0, 0, 109, 110,
	205, 0, 111, 0, 112, 0, 0, 0, 0, 113,
	206, 0, 207, 0, 114, 115, 336, 209, 0, 0,
	116, 0, 0, 117, 210, 211, 212, 0, 213, 0,
	0, 118, 0, 119, 120, 0, 0, 214, 0, 121,
	0, 0, 122, 0, 0, 123, 0, 124, 125, 126,
	127, 128, 0, 129, 130, 133, 131, 0, 132, 0,
	215, 134, 216, 135, 136, 0, 0, 0, 0, 0,
	137, 217, 0, 138, 0, 218, 139, 140, 0, 219,
	141, 220, 142, 0, 143, 144, 145, 221, 146, 147,
	0, 149, 150, 148, 151, 0, 152, 0, 153, 154,
	222, 155, 0, 156, 157, 158, 0, 223, 159, 160,
	0, 161, 162, 0, 163, 224, 225, 164, 0, 165,
	166, 168, 226, 167, 227, 0, 169, 0, 170, 171,
	0, 228, 229, 230, 0, 0, 172, 231, 232, 0,
	173, 174, 175, 176, 0, 0, 177, 178, 179, 0,
	0, 180, 181, 182, 233, 234, 80, 183, 0, 0,
	0, 0, 184, 185, 186, 187, 0, 0, 83, 84,
	0, 85, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 87, 188, 189, 190, 191, 88, 192, 193, 0,
	89, 194, 195, 90, 0, 0, 196, 197, 198, 0,
	199, 0, 0, 0, 91, 92, 93, 0, 94, 0,
	95, 0, 0, 96, 97, 0, 0, 0, 0, 0,
	0, 98, 99, 100, 101, 200, 102, 201, 202, 0,
	0, 103, 0, 0, 0, 104, 105, 0, 106, 0,
	0, 0, 203, 107, 108, 204, 0, 0, 0, 109,
	110, 205, 0, 111, 0, 112, 0, 0, 0, 0,
	113, 206, 0, 207, 0, 114, 115, 333, 209, 0,
	0, 116, 0, 0, 117, 210, 211, 212, 0, 213,
	0, 0, 118, 0, 119, 120, 0, 0, 214, 0,
	121, 0, 0, 122, 0, 0, 123, 0, 124, 125,
	126, 127, 128, 0, 129, 130, 133, 131, 0, 132,
	0, 215, 134, 216, 135, 136, 0, 0, 0, 0,
	0, 137, 217, 0, 138, 0, 218, 139, 140, 0,
	219, 141, 220, 142, 0, 143, 144, 145, 221, 146,
	147, 0, 149, 150, 148, 151, 0, 152, 0, 153,
	154, 222, 155, 0, 156, 157, 158, 0, 223, 159,
	160, 0, 161, 162, 0, 163, 224, 225, 164, 0,
	165, 166, 168, 226, 167, 227, 0, 169, 0, 170,
	171, 0, 228, 229, 230, 0, 0, 172, 231, 232,
	0, 173, 174, 175, 176, 0, 0, 177, 178, 179,
	0, 0, 180, 181, 182, 233, 234, 80, 183, 0,
	0, 0, 0, 184, 185, 186, 187, 0, 0, 83,
	84, 0, 85, 0, 0, 0, 0, 0, 0, 0,
	0, 86, 87, 188, 189, 190, 191, 88, 192, 193,
	0, 89, 194, 195, 90, 0, 0, 196, 197, 198,
	0, 199, 0, 0, 0, 91, 92, 93, 0, 94,
	0, 95, 0, 0, 96, 97, 0, 0, 0, 0,
	0, 0, 98, 99, 100, 101, 200, 102, 201, 202,
	0, 0, 103, 0, 0, 0, 104, 105, 0, 106,
	0, 0, 0, 203, 107, 108, 204, 0, 0, 0,
	109, 110, 205, 0, 111, 0, 112, 0, 0, 0,
	0, 113, 206, 0, 207, 0, 114, 115, 331, 209,
	0, 0, 116, 0, 0, 117, 210, 211, 212, 0,
	213, 0, 0, 118, 0, 119, 120, 0, 0, 214,
	0, 121, 0, 0, 122, 0, 0, 123, 0, 124,
	125, 126, 127, 128, 0, 129, 130, 133, 131, 0,
	132, 0, 215, 134, 216, 135, 136, 0, 0, 0,
	0, 0, 137, 217, 0, 138, 0, 218, 139, 140,
	0, 219, 141, 220, 142, 0, 143, 144, 145, 221,
	146, 147, 0, 149, 150, 148, 151, 0, 152, 0,
	153, 154, 222, 155, 0, 156, 157, 158, 0, 223,
	159, 160, 0, 161, 162, 0, 163, 224, 225, 164,
	0, 165, 166, 168, 226, 167, 227, 0, 169, 0,
	170, 171, 0, 228, 229, 230, 0, 0, 172, 231,
	232, 0, 173, 174, 175, 176, 0, 0, 177, 178,
	179, 0, 0, 180, 181, 182, 233, 234, 80, 183,
	0, 0, 0, 0, 184, 185, 186, 187, 0, 0,
	83, 84, 0, 85, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 87, 188, 189, 190, 191, 88, 192,
	193, 0, 89, 194, 195, 90, 0, 0, 196, 197,
	198, 0, 199, 0, 0, 0, 91, 92, 93, 0,
	94, 0, 95, 0, 0, 96, 97, 0, 0, 0,
	0, 0, 0, 98, 99, 100, 101, 200, 102, 201,
	202, 0, 0, 103, 0, 0, 0, 104, 105, 0,
	106, 0, 0, 0, 203, 107, 108, 204, 0, 0,
	0, 109, 110, 205, 0, 111, 0, 112, 0, 0,
	0, 0, 113, 206, 0, 207, 0, 114, 115, 323,
	209, 0, 0, 116, 0, 0, 117, 210, 211, 212,
	0, 213, 0, 0, 118, 0, 119, 120, 0, 0,
	214, 0, 121, 0, 0, 122, 0, 0, 123, 0,
	124, 125, 126, 127, 128, 0, 129, 130, 133, 131,
	0, 132, 0, 215, 134, 216, 135, 136, 0, 0,
	0, 0, 0, 137, 217, 0, 138, 0, 218, 139,
	140, 0, 219, 141, 220, 142, 0, 143, 144, 145,
	221, 146, 147, 0, 149, 150, 148, 151, 0, 152,
	0, 153, 154, 222, 155, 0, 156, 157, 158, 0,
	223, 159, 160, 0, 161, 162, 0, 163, 224, 225,
	164, 0, 165, 166, 168, 226, 167, 227, 0, 169,
	0, 170, 171, 0, 228, 229, 230, 0, 0, 172,
	231, 232, 0, 173, 174, 175, 176, 0, 0, 177,
	178, 179, 0, 0, 180, 181, 182, 233, 234, 80,
	183, 0, 0, 0, 0, 184, 185, 186, 187, 0,
	0, 83, 84, 0, 85, 0, 0, 0, 0, 0,
	0, 0, 0, 86, 87, 188, 189, 190, 191, 88,
	192, 193, 0, 89, 194, 195, 90, 0, 0, 196,
	197, 198, 0, 199, 0, 0, 0, 91, 92, 93,
	0, 94, 0, 95, 0, 0, 96, 97, 0, 0,
	0, 0, 0, 0, 98, 99, 100, 101, 200, 102,
	201, 202, 0, 0, 103, 0, 0, 0, 104, 105,
	0, 106, 0, 0, 0, 203, 107, 108, 204, 0,
	0, 0, 109, 110, 205, 0, 111, 0, 112, 0,
	0, 0, 0, 113, 206, 0, 207, 0, 114, 115,
	208, 209, 0, 0, 116, 0, 0, 117, 210, 211,
	212, 0, 213, 0, 0, 118, 0, 119, 120, 0,
	0, 214, 0, 121, 0, 0, 122, 0, 0, 123,
	0, 124, 125, 126, 127, 128, 0, 129, 130, 133,
	131, 0, 132, 0, 215, 134, 216, 135, 136, 0,
	0, 0, 0, 0, 137, 217, 0, 138, 0, 218,
	139, 140, 0, 219, 141, 220, 142, 0, 143, 144,
	145, 221, 303, 147, 0, 149, 150, 148, 151, 0,
	152, 0, 153, 154, 222, 155, 0, 156, 157, 158,
	0, 223, 159, 160, 0, 161, 162, 0, 163, 224,
	225, 164, 0, 165, 166, 168, 226, 167, 227, 0,
	169, 0, 170, 171, 0, 228, 229, 230, 0, 0,
	172, 231, 232, 0, 173, 174, 175, 176, 0, 0,
	177, 178, 179, 0, 0, 180, 181, 182, 233, 234,
	80, 183, 0, 0, 0, 0, 184, 185, 186, 187,
	0, 0, 83, 84, 0, 85, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 87, 188, 189, 190, 191,
	88, 192, 193, 0, 89, 194, 195, 90, 0, 0,
	196, 197, 198, 0, 199, 0, 0, 0, 91, 92,
	93, 0, 94, 0, 95, 0, 0, 96, 97, 0,
	0, 0, 0, 0, 0, 98, 99, 100, 101, 200,
	102, 201, 202, 0, 0, 103, 0, 0, 0, 104,
	105, 0, 106, 0, 0, 0, 203, 107, 108, 204,
	0, 0, 0, 109, 110, 205, 0, 111, 0, 112,
	0, 0, 0, 0, 113, 206, 0, 207, 0, 114,
	115, 208, 209, 0, 0, 116, 0, 0, 117, 210,
	211, 212, 0, 213, 0, 0, 118, 0, 119, 120,
	0, 0, 214, 0, 121, 0, 0, 252, 0, 0,
	123, 0, 124, 125, 126, 127, 259, 0, 129, 130,
	133, 131, 0, 132, 0, 215, 134, 216, 135, 136,
	0, 0, 0, 0, 0, 137, 217, 0, 138, 0,
	218, 139, 140, 0, 219, 141, 220, 142, 0, 143,
	144, 145, 221, 146, 147, 0, 149, 150, 148, 151,
	0, 152, 0, 153, 154, 222, 155, 0, 156, 157,
	158, 0, 223, 159, 253, 0, 161, 162, 0, 163,
	224, 225, 164, 0, 165, 166, 168, 226, 167, 227,
	0, 169, 0, 170, 171, 0, 258, 229, 230, 0,
	0, 254, 231, 232, 0, 173, 174, 175, 176, 0,
	0, 177, 178, 179, 0, 0, 180, 181, 182, 233,
	234, 80, 183, 0, 0, 0, 0, 184, 185, 186,
	187, 0, 0, 83, 84, 0, 85, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 87, 188, 189, 190,
	191, 88, 192, 193, 0, 89, 194, 195, 90, 0,
	0, 196, 197, 198, 0, 199, 0, 0, 0, 91,
	92, 93, 0, 94, 0, 95, 0, 0, 96, 97,
	0, 0, 0, 0, 0, 0, 98, 99, 100, 101,
	200, 102, 201, 202, 0, 0, 103, 0, 0, 0,
	104, 105, 0, 106, 0, 0, 0, 203, 107, 108,
	204, 0, 0, 0, 109, 110, 205, 0, 111, 0,
	112, 0, 0, 0, 0, 113, 206, 0, 207, 0,
	114, 115, 208, 209, 0, 0, 116, 0, 0, 117,
	210, 211, 212, 0, 213, 0, 0, 118, 0, 119,
	120, 0, 0, 214, 0, 121, 0, 0, 122, 0,
	0, 123, 0, 124, 125, 126, 127, 128, 0, 129,
	130, 133, 131, 0, 132, 0, 215, 134, 216, 135,
	136, 0, 0, 0, 0, 0, 137, 217, 0, 138,
	0, 218, 139, 0, 0, 219, 141, 220, 142, 0,
	143, 0, 145, 221, 146, 147, 0, 149, 150, 148,
	151, 0, 152, 0, 153, 154, 222, 0, 0, 156,
	157, 158, 0, 223, 159, 160, 0, 161, 162, 0,
	163, 224, 225, 164, 0, 165, 166, 168, 226, 167,
	227, 0, 169, 0, 170, 171, 0, 228, 229, 230,
	0, 0, 172, 231, 232, 0, 173, 174, 175, 176,
	0, 0, 177, 178, 179, 0, 0, 180, 181, 182,
	233, 234, 786, 183, 805, 806, 807, 0, 184, 185,
	186, 187, 0, 0, 808, 0, 0, 0, 0, 0,
	788, 0, 814, 0, 0, 786, 0, 805, 806, 807,
	0, 0, 0, 0, 0, 0, 0, 808, 0, 0,
	0, 787, 0, 788, 0, 814, 0, 802, 786, 0,
	805, 806, 807, 0, 0, 0, 0, 0, 0, 0,
	808, 0, 0, 0, 787, 0, 788, 0, 814, 0,
	802, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 787, 0, 0,
	0, 0, 793, 802, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 815,
	0, 0, 0, 0, 0, 793, 0, 0, 0, 0,
	0, 813, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 810, 815, 0, 0, 0, 0, 803, 793, 0,
	0, 0, 0, 0, 813, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 810, 815, 0, 0, 0, 809,
	803, 0, 0, 0, 0, 0, 0, 813, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 810, 0, 0,
	0, 0, 809, 803, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 804, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 812, 809, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 804, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 812, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 804,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	812, 0, 0, 0, 0, 0, 0, 811, 0, 0,
	799, 800, 801, 0, 798, 795, 796, 797, 789, 790,
	791, 792, 794, 0, 0, 0, 0, 0, 0, 0,
	811, 1311, 0, 799, 800, 801, 0, 798, 795, 796,
	797, 789, 790, 791, 792, 794, 0, 0, 0, 0,
	0, 1695, 0, 811, 0, 0, 799, 800, 801, 0,
	798, 795, 796, 797, 789, 790, 791, 792, 794, 786,
	0, 805, 806, 807, 1694, 0, 0, 0, 0, 0,
	0, 808, 0, 0, 0, 0, 0, 788, 0, 814,
	0, 0, 786, 0, 805, 806, 807, 0, 0, 0,
	0, 0, 0, 0, 808, 0, 0, 0, 787, 0,
	788, 0, 814, 0, 802, 786, 0, 805, 806, 807,
	0, 0, 0, 0, 0, 0, 0, 808, 0, 0,
	0, 787, 0, 788, 0, 814, 0, 802, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 787, 0, 0, 0, 0, 793,
	802, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 815, 0, 0, 0,
	0, 0, 793, 0, 0, 0, 0, 0, 813, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 810, 815,
	0, 0, 0, 0, 803, 793, 0, 0, 0, 0,
	0, 813, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 810, 815, 0, 0, 0, 809, 803, 0, 0,
	0, 0, 0, 0, 813, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 810, 0, 0, 0, 0, 809,
	803, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	804, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 812, 809, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 804, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 812, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 804, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 812, 0, 0,
	0, 0, 0, 0, 811, 0, 0, 799, 800, 801,
	0, 798, 795, 796, 797, 789, 790, 791, 792, 794,
	0, 0, 0, 0, 0, 1675, 0, 811, 0, 0,
	799, 800, 801, 0, 798, 795, 796, 797, 789, 790,
	791, 792, 794, 0, 0, 0, 0, 0, 1654, 0,
	811, 0, 0, 799, 800, 801, 0, 798, 795, 796,
	797, 789, 790, 791, 792, 794, 786, 0, 805, 806,
	807, 1649, 0, 0, 0, 0, 0, 0, 808, 0,
	0, 0, 0, 0, 788, 0, 814, 0, 0, 786,
	0, 805, 806, 807, 0, 0, 0, 0, 0, 0,
	0, 808, 0, 0, 0, 787, 0, 788, 0, 814,
	0, 802, 786, 0, 805, 806, 807, 0, 0, 0,
	0, 0, 0, 0, 808, 0, 0, 0, 787, 0,
	788, 0, 814, 0, 802, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 787, 0, 0, 0, 0, 793, 802, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 815, 0, 0, 0, 0, 0, 793,
	0, 0, 0, 0, 0, 813, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 810, 815, 0, 0, 0,
	0, 803, 793, 0, 0, 0, 0, 0, 813, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 810, 815,
	0, 0, 0, 809, 803, 0, 0, 0, 0, 0,
	0, 813, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 810, 0, 0, 0, 0, 809, 803, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 804, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 812, 809,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	804, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 812, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 804, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 812, 0, 0, 0, 0, 0,
	0, 811, 0, 0, 799, 800, 801, 0, 798, 795,
	796, 797, 789, 790, 791, 792, 794, 0, 0, 0,
	0, 0, 1645, 0, 811, 0, 0, 799, 800, 801,
	0, 798, 795, 796, 797, 789, 790, 791, 792, 794,
	0, 0, 0, 0, 0, 1584, 0, 811, 0, 0,
	799, 800, 801, 0, 798, 795, 796, 797, 789, 790,
	791, 792, 794, 786, 0, 805, 806, 807, 1583, 0,
	0, 0, 0, 0, 0, 808, 0, 0, 0, 0,
	0, 788, 0, 814, 0, 0, 786, 0, 805, 806,
	807, 0, 0, 0, 0, 0, 0, 0, 808, 0,
	0, 0, 787, 0, 788, 0, 814, 0, 802, 786,
	0, 805, 806, 807, 0, 0, 0, 0, 0, 0,
	0, 808, 0, 0, 0, 787, 0, 788, 0, 814,
	0, 802, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 787, 0,
	0, 0, 0, 793, 802, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	815, 0, 0, 0, 0, 0, 793, 0, 0, 0,
	0, 0, 813, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 810, 815, 0, 0, 0, 0, 803, 793,
	0, 0, 0, 0, 0, 813, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 810, 815, 0, 0, 0,
	809, 803, 0, 0, 0, 0, 0, 0, 813, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 810, 0,
	0, 0, 0, 809, 803, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 804, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 812, 809, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 804, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 812, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	804, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 812, 0, 0, 0, 0, 0, 0, 811, 0,
	0, 799, 800, 801, 0, 798, 795, 796, 797, 789,
	790, 791, 792, 794, 0, 0, 0, 0, 0, 1492,
	0, 811, 0, 0, 799, 800, 801, 0, 798, 795,
	796, 797, 789, 790, 791, 792, 794, 0, 0, 0,
	0, 0, 1429, 0, 811, 0, 0, 799, 800, 801,
	0, 798, 795, 796, 797, 789, 790, 791, 792, 794,
	786, 0, 805, 806, 807, 1413, 0, 0, 0, 0,
	0, 0, 808, 0, 0, 0, 0, 0, 788, 0,
	814, 0, 0, 786, 0, 805, 806, 807, 0, 0,
	0, 0, 0, 0, 0, 808, 0, 0, 0, 787,
	0, 788, 0, 814, 0, 802, 786, 0, 805, 806,
	807, 0, 0, 0, 0, 0, 0, 0, 808, 0,
	0, 0, 787, 0, 788, 0, 814, 0, 802, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 787, 0, 0, 0, 0,
	793, 802, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 815, 0, 0,
	0, 0, 0, 793, 0, 0, 0, 0, 0, 813,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 810,
	815, 0, 0, 0, 0, 803, 793, 1759, 0, 0,
	0, 0, 813, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 810, 815, 0, 0, 0, 809, 803, 0,
	0, 0, 0, 0, 0, 813, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 810, 0, 0, 0, 0,
	809, 803, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 804, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 812, 809, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 804, 1758, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 812, 0, 0, 0, 0,
	0, 0, 786, 0, 805, 806, 807, 804, 0, 0,
	0, 0, 0, 0, 808, 0, 0, 0, 812, 0,
	788, 0, 814, 0, 0, 811, 0, 0, 799, 800,
	801, 0, 798, 795, 796, 797, 789, 790, 791, 792,
	794, 787, 0, 0, 0, 0, 1054, 802, 811, 0,
	0, 799, 800, 801, 0, 798, 795, 796, 797, 789,
	790, 791, 792, 794, 0, 0, 0, 1476, 0, 0,
	0, 811, 0, 0, 799, 800, 801, 0, 798, 795,
	796, 797, 789, 790, 791, 792, 794, 786, 0, 805,
	806, 807, 793, 0, 1303, 0, 0, 1302, 0, 808,
	0, 0, 0, 994, 0, 788, 0, 814, 0, 815,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 813, 0, 0, 0, 0, 787, 0, 0, 0,
	0, 810, 802, 0, 0, 0, 0, 803, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 995, 0, 809,
	0, 0, 817, 0, 0, 0, 0, 0, 786, 0,
	805, 806, 807, 0, 0, 0, 0, 793, 0, 0,
	808, 0, 0, 816, 0, 0, 788, 0, 814, 0,
	0, 0, 0, 804, 815, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 812, 0, 813, 787, 786, 0,
	805, 806, 807, 802, 0, 0, 810, 0, 0, 0,
	808, 0, 803, 0, 0, 0, 788, 0, 814, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 809, 0, 0, 787, 0, 0,
	0, 0, 0, 802, 0, 0, 0, 811, 793, 0,
	799, 800, 801, 0, 798, 795, 796, 797, 789, 790,
	791, 792, 794, 0, 0, 815, 0, 0, 804, 0,
	0, 0, 0, 0, 0, 0, 0, 813, 0, 812,
	786, 0, 805, 806, 807, 0, 0, 810, 793, 0,
	0, 0, 808, 803, 0, 0, 0, 0, 788, 0,
	814, 0, 0, 0, 0, 815, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 809, 0, 813, 0, 787,
	0, 0, 0, 0, 0, 802, 0, 810, 0, 0,
	0, 0, 811, 803, 0, 799, 800, 801, 0, 798,
	795, 796, 797, 789, 790, 791, 792, 794, 0, 804,
	0, 0, 0, 0, 0, 809, 298, 0, 0, 0,
	812, 0, 786, 0, 805, 806, 807, 0, 0, 0,
	793, 0, 0, 0, 808, 0, 0, 1304, 0, 0,
	788, 0, 814, 0, 0, 0, 0, 815, 0, 804,
	0, 0, 0, 0, 786, 0, 805, 806, 807, 813,
	812, 787, 0, 0, 0, 0, 808, 802, 0, 810,
	0, 0, 788, 811, 814, 803, 799, 800, 801, 0,
	798, 795, 796, 797, 789, 790, 791, 792, 794, 0,
	0, 0, 0, 787, 0, 0, 0, 809, 0, 802,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 793, 811, 0, 0, 799, 800, 801, 0,
	798, 795, 796, 797, 789, 790, 791, 792, 794, 815,
	0, 804, 0, 0, 0, 0, 786, 0, 805, 806,
	807, 813, 812, 0, 793, 0, 0, 0, 808, 1309,
	0, 810, 0, 0, 788, 0, 814, 803, 0, 1423,
	0, 815, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 813, 0, 787, 0, 0, 0, 809,
	0, 802, 0, 810, 0, 0, 0, 0, 0, 803,
	0, 0, 0, 0, 0, 811, 0, 0, 799, 800,
	801, 0, 798, 795, 796, 797, 789, 790, 791, 792,
	794, 809, 0, 804, 0, 0, 0, 0, 786, 0,
	805, 806, 807, 0, 812, 0, 793, 0, 0, 0,
	808, 0, 0, 1265, 0, 0, 788, 0, 814, 0,
	0, 0, 0, 815, 0, 804, 0, 0, 0, 1272,
	0, 1289, 1290, 1291, 0, 813, 812, 787, 0, 0,
	0, 1554, 0, 802, 0, 810, 0, 0, 0, 0,
	0, 803, 0, 0, 0, 0, 0, 811, 0, 0,
	799, 800, 801, 0, 798, 795, 796, 797, 789, 790,
	791, 792, 794, 809, 1286, 0, 0, 0, 0, 0,
	0, 0, 0, 1270, 0, 0, 0, 0, 793, 811,
	0, 0, 799, 800, 801, 0, 798, 795, 796, 797,
	789, 790, 791, 792, 794, 815, 0, 804, 0, 0,
	0, 0, 786, 0, 805, 806, 807, 813, 812, 1277,
	0, 0, 0, 0, 808, 0, 0, 810, 0, 0,
	788, 0, 814, 803, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1292, 0,
	0, 787, 0, 0, 0, 809, 0, 802, 0, 0,
	0, 0, 0, 0, 1287, 0, 0, 0, 0, 0,
	0, 811, 0, 0, 799, 800, 801, 0, 798, 795,
	796, 797, 789, 790, 791, 792, 794, 0, 0, 804,
	0, 0, 0, 786, 0, 805, 806, 807, 0, 0,
	812, 0, 793, 0, 0, 808, 0, 0, 0, 0,
	0, 788, 0, 814, 0, 0, 0, 0, 0, 815,
	1288, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 813, 787, 0, 0, 0, 0, 0, 802, 0,
	0, 810, 0, 0, 0, 0, 0, 803, 0, 0,
	0, 0, 0, 811, 0, 0, 799, 800, 801, 0,
	798, 795, 796, 797, 789, 790, 791, 792, 794, 809,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 793, 0, 0, 0, 1283, 1284, 1285,
	0, 1282, 1279, 1280, 1281, 1273, 1274, 1275, 1276, 1278,
	815, 0, 0, 804, 0, 0, 0, 0, 0, 0,
	0, 0, 813, 0, 812, 0, 0, 0, 0, 0,
	23, 0, 810, 0, 0, 0, 0, 0, 803, 0,
	39, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1272, 0, 1289, 1290, 1291,
	0, 0, 0, 0, 41, 0, 0, 1408, 0, 0,
	46, 0, 0, 0, 0, 0, 0, 811, 0, 0,
	799, 800, 801, 0, 798, 795, 796, 797, 789, 790,
	791, 792, 794, 0, 804, 28, 0, 0, 42, 0,
	1286, 0, 31, 29, 786, 812, 805, 806, 807, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 32, 0,
	0, 0, 788, 0, 814, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 786, 0, 805,
	806, 807, 0, 787, 0, 1277, 0, 0, 0, 802,
	1272, 0, 1289, 1290, 1291, 788, 0, 814, 811, 0,
	0, 799, 800, 801, 0, 798, 795, 796, 797, 789,
	790, 791, 792, 794, 1292, 0, 787, 0, 0, 0,
	0, 0, 802, 0, 0, 0, 0, 0, 0, 0,
	1287, 0, 30, 0, 793, 1286, 0, 1272, 0, 1289,
	1290, 1291, 0, 44, 0, 0, 33, 0, 43, 1407,
	0, 815, 0, 34, 0, 0, 53, 0, 0, 0,
	0, 37, 38, 813, 0, 0, 0, 793, 0, 0,
	40, 0, 0, 810, 0, 0, 0, 55, 0, 803,
	1277, 0, 1286, 0, 815, 0, 1288, 0, 0, 0,
	45, 0, 0, 0, 0, 0, 1272, 1293, 1289, 1290,
	1291, 0, 0, 0, 56, 0, 810, 0, 0, 1292,
	0, 51, 803, 0, 0, 0, 0, 52, 0, 0,
	0, 0, 0, 0, 0, 1287, 0, 1277, 0, 0,
	0, 0, 0, 0, 0, 804, 50, 0, 0, 0,
	0, 1286, 0, 0, 0, 0, 812, 0, 0, 0,
	0, 0, 0, 1283, 1284, 1285, 1292, 1282, 1279, 1280,
	1281, 1273, 1274, 1275, 1276, 1278, 0, 0, 804, 0,
	0, 0, 1287, 0, 0, 0, 0, 0, 0, 812,
	0, 1288, 0, 0, 0, 0, 1277, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 811,
	0, 0, 799, 800, 801, 0, 798, 795, 796, 797,
	789, 790, 791, 792, 794, 1292, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1288, 0,
	0, 1287, 811, 0, 0, 799, 800, 801, 0, 798,
	795, 796, 797, 789, 790, 791, 792, 794, 1283, 1284,
	1285, 0, 1282, 1279, 1280, 1281, 1273, 1274, 1275, 1276,
	1278, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1288, 0, 0,
	786, 0, 0, 0, 0, 1283, 1284, 1285, 0, 1282,
	1279, 1280, 1281, 1273, 1274, 1275, 1276, 1278, 788, 0,
	814, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 787,
	0, 0, 0, 0, 0, 802, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1283, 1284, 1285, 0, 1282, 1279,
	1280, 1281, 1273, 1274, 1275, 1276, 1278, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	793, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 815, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 810,
	0, 0, 0, 0, 0, 803, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 804, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 812, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 811, 0, 0, 0, 0,
	0, 0, 798, 795, 796, 797, 789, 790, 791, 792,
	794,
}
var sqlPact = [...]int{

	21121, -1000, 22, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 745, -1000, -1000, -1000, 878, 734, 240,
	14230, 14230, 1303, 1303, 15485, -1000, -1000, 18246, 2158, 460,
	463, 460, 460, 482, 15485, 584, 610, 116, -1000, 625,
	12, 17995, 14230, 1263, 20, 13477, 301, 21121, 13979, 14230,
	17744, 1090, 1033, 1026, 13477, 17493, 17242, 16991, -1000, 9106,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 568, 305,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 303, 858, -1000, 19, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 855, -1000, 14230,
	-1000, -1000, 16740, 16489, 818, -1000, -1000, 539, 361, 1277,
	-1000, 26, -1000, -1000, 1088, -1000, 841, 1086, 1084, 1079,
	1074, 360, 838, -1000, 553, 818, -1000, 818, -1000, -1000,
	-1000, 542, 15485, -1000, 13477, -1000, 16238, 1045, 15987, -1000,
	625, -1000, -1000, -1000, 886, 1259, 1259, 1259, 1287, 139,
	137, 116, 4, 14230, -1000, 302, 4, 6485, 6485, -1000,
	-1000, 301, -1000, 323, 11710, 36, -1000, 7011, -1000, 847,
	1169, 730, 689, 1156, -89, 13477, 14230, 14230, 631, 15736,
	-1000, 1151, 121, 1142, -1000, 107, 1140, -1000, -18, -1000,
	-1000, -1000, -1000, -1000, -1000, 301, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 13728,
	1336, 3332, -1000, 8321, 11971, 1020, 11971, -1000, -1000, 1334,
	-1000, -1000, 18, 14, 992, 957, 9631, 9369, 1223, 1743,
	-1000, -1000, -1000, 25, 4116, 14230, 1097, 11971, 14230, 14230,
	14230, -1000, 14230, -1000, 985, -1000, 14230, -1000, 13, 6,
	-1000, 15485, -1000, 125, -1000, 300, 959, 15234, 1179, 955,
	-1000, 886, -1000, 864, 988, 7535, 8321, 116, -1000, -1000,
	116, 116, 8321, -1000, -1000, 14230, 4, 1332, 14230, 117,
	-1000, 20408, -1000, -1000, 8321, 8321, 8321, 8321, 8321, 766,
	-1000, -1000, -1000, 4905, -1000, -1000, 36, 299, 312, -1000,
	-1000, 293, 36, -1000, -1000, -1000, -1000, 291, 1417, 417,
	-1000, -1000, -1000, 8321, 371, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1095, 290, 284, -1000, -1000, -1000,
	-1000, 283, 280, 277, 266, 256, 245, 244, 243, 238,
	234, 220, 218, 217, 752, -1000, 396, -1000, -1000, 396,
	396, -1000, 210, 210, 211, -1000, -1000, -1000, 210, -1000,
	-1000, -1000, 369, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	212, 117, -1000, -1000, -1000, 14230, 36, -1000, -1000, -1000,
	8321, 3853, -19, -1000, 20922, -1000, -15, 762, -1000, 12975,
	1248, 1247, 1250, 13477, 540, 529, 14230, 14230, 387, 115,
	1308, 115, 11188, -1000, 14230, 14230, -1000, 14230, -1000, -1000,
	14230, -1000, 14230, 14230, 145, 12473, 692, 1136, 12, -20,
	-1000, 1315, -1000, -1000, -1000, -1000, 77, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	211, 752, 210, 210, 210, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 369, -1000, -1000, 396, 396, 396, -1000, -1000,
	-25, 20922, 526, -10, 12222, 14230, -1000, 24, -1000, -1000,
	1073, 443, 743, 1018, 849, -1000, -1000, -1000, -1000, -3,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1364, -1000, -1000, -1000, -1000, 1400, -3, -1000, -1000, -1000,
	-1000, -1000, 1416, -1000, -1000, -1000, 4116, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 14230, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 743, 1018, -1000, -1000, 13477, 12724, 1133, 834,
	925, -1000, -1000, 338, 1132, -1000, -1000, -1000, -1000, 20922,
	-1000, 20922, 651, 1030, -1000, 1030, -7, -1000, 20327, -1000,
	209, -31, -1000, 387, 6485, 10927, 3332, 14230, 557, 8321,
	8321, 8321, 8321, 8321, 8321, 8321, 8321, 8321, 8321, 8321,
	8321, 8321, 8321, 8321, 8321, 8321, 8321, 8321, 8321, 8321,
	8321, 1012, 516, 749, 808, 200, 4116, -1000, 1360, 1360,
	1360, 21204, 21204, 159, 5, 20010, -9, 36, -1000, -1000,
	6223, 5959, 36, 4377, -1000, 552, 1399, 393, 20922, 1103,
	1059, 207, 135, 134, 8321, 630, 8321, 8583, 8321, 8321,
	5169, 8321, 8321, 8321, 8321, 8321, 8321, -1000, 206, -1000,
	-1000, -1000, -1000, 1386, -1000, -1000, 1383, -1000, 555, 554,
	1376, 387, 133, -1000, 2257, -1000, -1000, 7011, -1000, 692,
	14230, 14230, 14230, -1000, -1000, 913, 14983, -1000, 3332, 14230,
	-1000, 205, 203, 1004, 1001, 14230, 14230, 14732, 14481, 14230,
	787, 14230, 14230, 682, -1000, 661, 8321, 679, -1000, 10405,
	400, 14230, 676, 72, -1000, -1000, -1000, 336, 14230, -1000,
	-1000, -1000, 121, -1000, 107, -1000, -1000, 13477, -1000, -1000,
	-1000, -1000, -1000, -1000, 3332, 317, 315, -1000, 1374, 508,
	-1000, 501, 500, 497, -1000, 202, -1000, 8321, 14230, 12222,
	-10, -12, -1000, -1000, 14230, 1018, -1000, -1000, -1000, 662,
	-1000, 736, -1000, 9893, -1000, -1000, -1000, 552, -1000, -16,
	-1000, -1000, -1000, -1000, 126, -13, -1000, -1000, -1000, -1000,
	-1000, 14230, 204, 14230, 14230, 14230, 1130, 1415, 14230, -1000,
	-1000, -1000, 8321, -1000, -1000, -1000, 12, 14230, -1000, 1057,
	-1000, -14, 1298, -127, 13226, -1000, 10144, -1000, -1000, 358,
	511, 511, 1314, 1314, 1314, 1314, 1876, 1876, 732, 1017,
	21550, 21550, 21550, 198, 569, 569, 21550, 21550, 21550, 21204,
	21003, 235, 8321, 493, 794, 200, 8321, -1000, 784, -1000,
	-1000, -1000, 1071, 199, 8583, 8583, -1000, -1000, -1000, 4905,
	-1000, -1000, 197, 8321, -1000, 8321, -32, -33, -1000, -1000,
	-40, -1000, -1000, 7, 8321, 8321, 8321, 109, -1000, 108,
	574, -1000, 8321, 790, 195, 184, 8321, -1000, -1000, 20808,
	106, 1070, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 98,
	20726, 97, 21250, -1000, 8583, 8583, 8583, 4905, 180, 96,
	20242, -68, 20612, 7273, 7273, 7273, 93, 20644, 8321, -68,
	18742, 2758, 2667, -45, -46, -47, 1373, -53, 90, 353,
	348, 88, 1057, -1000, -1000, 8321, -1000, -1000, -1000, 490,
	487, 1127, -1000, 912, -1000, 1056, 8321, 14230, 179, 174,
	728, -1000, 1118, 903, 1115, 903, -1000, -15, 757, -1000,
	-1000, 477, -1000, 6485, 20922, -1000, 668, 1252, -54, -1000,
	-1000, -1000, 6485, 387, 11188, 7011, -58, -1000, -1000, 692,
	-1000, 453, 1372, 84, 972, 761, 720, 616, 1370, 20922,
	-16, -1000, -16, -1000, -1000, -1000, -1000, -1000, -1000, 14230,
	-1000, 12724, 173, 14230, 172, 170, 168, 14230, -1000, 1179,
	-1000, 80, -1000, 1052, 1284, 10927, 1028, 1024, 10927, 1016,
	809, 809, 809, -1000, 13226, 3577, -1000, -1000, 14230, 167,
	10666, 78, 1298, 8321, 235, 8321, 8583, 8583, -1000, 235,
	-1000, -1000, -1000, -1000, 1068, 166, 8321, 3332, 21297, 21155,
	-59, 5695, -27, 19739, -1000, -1000, 312, -1000, 71, 6749,
	-1000, 20448, 16, 16, -1000, 1413, 1174, -1000, 8321, 20530,
	-1000, 11449, 389, 805, 19716, 3332, -1000, 8321, -1000, 1066,
	8321, -1000, 3332, 8583, 8583, 8583, 8583, 8583, 8583, 8583,
	8583, 8583, 8583, 8583, 8583, 8583, 8583, 8583, 8583, 8583,
	8583, 8583, 983, 8583, 1359, 1359, 1359, -29, 5431, -1000,
	1094, 1066, 8321, 8321, 3332, 69, 68, 67, -1000, 8321,
	-68, 8321, 8321, 8321, -1000, -1000, -1000, 66, -1000, 1366,
	-1000, -1000, -1000, -1000, 1052, 20033, 14230, 14230, 14230, 1114,
	1025, -1000, 19693, -66, 14230, 14230, -1000, 990, 1080, 437,
	14230, -1000, 14230, -1000, 14230, 14230, 14230, 14230, -41, 6485,
	194, 12, 14230, -41, 661, -1000, -1000, 334, -1000, 309,
	308, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 65,
	-1000, -1000, 8845, 165, 14230, 12724, 8845, 832, -1000, -1000,
	379, 8321, 8321, 1298, 10927, 10927, 1037, 1010, 10927, -1000,
	-1000, -1000, -1000, 343, -1000, 1023, 161, 14230, 13226, 1307,
	235, 20839, 2699, 8321, 3332, 21237, -70, 8321, 8321, -1000,
	-71, -1000, 8321, -1000, -1000, 1410, 8321, 61, 60, 58,
	-1000, -1000, 20922, 8321, -1000, -1000, 18497, 8321, 53, -1000,
	51, 20922, 1094, 20922, -1000, 674, 674, 1359, 1359, 1359,
	1359, 638, 638, 830, 549, 491, 491, 491, 523, 363,
	363, 491, 491, 491, 1065, 952, 158, 21356, 8321, -75,
	-1000, -1000, -1000, 20922, 20922, 50, -1000, -1000, -1000, -68,
	2460, 19422, 19399, -1000, 48, 379, -1000, -1000, -1000, -1000,
	14230, -1000, 14230, -1000, 14230, 904, -1000, -1000, 999, 154,
	8583, 14230, -1000, 802, -76, -77, 902, -1000, 899, 8321,
	-1000, 3332, 903, 903, -1000, 473, 468, -1000, -41, 1189,
	14230, 1231, -1000, -1000, -1000, 153, -1000, -1000, -1000, -83,
	-1000, 267, 1264, 8321, -1000, -1000, 152, 8845, -87, -1000,
	-1000, 45, -91, 14230, -1000, 14230, 20922, -68, -1000, 1037,
	-1000, 150, 8321, 10927, -1000, -1000, 884, -143, -1000, 332,
	-1000, 14230, -92, -1000, 8321, 8321, 21237, -96, -1000, 235,
	235, -1000, 19376, -1000, 20448, -1000, -1000, -1000, 20922, 758,
	-1000, 19105, -1000, -1000, -1000, 8583, 1061, 149, 3332, 19082,
	-1000, -1000, 8321, -1000, -1000, -1000, -1000, -1000, 1337, -1000,
	-1000, -1000, 8321, 21356, 148, -1000, 147, -1000, -1000, -1000,
	733, -1000, -1000, 20922, 1266, -1000, -1000, 14230, 14230, 536,
	-100, 14230, -1000, -1000, 4641, 802, 8845, 1257, 36, 14230,
	1257, 19059, 4377, -101, -1000, 14230, -1000, 802, 146, -55,
	-1000, 1305, -1000, 14230, 20922, -1000, 586, 1023, -1000, 4116,
	-107, -1000, 235, 235, -1000, -1000, 43, 805, 1278, -1000,
	2346, 8583, 3332, -108, -1000, 18788, -1000, 18765, 975, 14230,
	14230, 14230, 415, 14230, -1000, -1000, 608, -1000, 387, -1000,
	-1000, -1000, -1000, -1000, -1000, 1264, 7, 802, -1000, -1000,
	8845, 14230, 142, -115, 550, -1000, -1000, -1000, -1000, 685,
	8321, 2346, -116, -1000, -1000, -1000, 823, 770, 39, -117,
	118, -1000, 8321, -1000, 11188, -1000, 1257, 15, -1000, -121,
	-1000, -1000, -1000, 1403, 8, 8059, 8059, -68, -1000, -1000,
	831, 828, 592, -1000, -1000, -1000, -1000, -1000, 975, 14230,
	20922, -102, -1000, -1000, 802, -1000, -1000, -1000, -1000, 3097,
	857, 643, 20056, -1000, -1000, 1194, -1000, 426, 1091, 1091,
	823, -129, -1000, -1000, 1310, -1000, -1000, -1000, -1000, -1000,
	-1000, 1352, -1000, -1000, 986, -1000, -1000, -1000, 7797, -1000,
	-1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1621, 1618, 1306, 125, 124, 1617, 1614, 1611, 96,
	123, 120, 117, 1607, 94, 1605, 1604, 91, 1603, 1602,
	1601, 44, 1600, 1598, 1596, 1594, 1593, 86, 37, 159,
	2017, 152, 1592, 1588, 1582, 9, 99, 77, 1580, 36,
	64, 83, 108, 687, 69, 1579, 1578, 135, 28, 22,
	348, 98, 139, 115, 130, 1576, 1575, 1573, 41, 1572,
	1571, 1567, 1565, 54, 26, 1564, 23, 1563, 14, 1562,
	1561, 105, 1559, 97, 112, 19, 122, 599, 1558, 47,
	12, 72, 1553, 33, 1550, 21, 80, 133, 1547, 48,
	144, 62, 20, 58, 1538, 1535, 1533, 1532, 81, 1529,
	93, 76, 1528, 1527, 79, 1524, 134, 129, 1523, 1522,
	118, 1521, 1520, 1518, 713, 1517, 1516, 483, 3, 49,
	57, 8, 111, 103, 25, 1515, 16, 1514, 1338, 712,
	683, 1512, 50, 30, 82, 42, 63, 34, 1509, 1507,
	101, 1506, 1503, 1502, 1501, 1500, 78, 1499, 73, 137,
	43, 55, 92, 11, 24, 51, 85, 102, 142, 106,
	1498, 1497, 114, 1491, 46, 1490, 1489, 927, 110, 1488,
	1487, 1486, 607, 527, 524, 136, 1484, 1482, 522, 205,
	1480, 1479, 128, 1477, 1476, 140, 1474, 145, 40, 1472,
	113, 1470, 95, 1469, 0, 71, 39, 1468, 127, 75,
	1467, 1466, 1465, 1464, 27, 2, 10, 7, 4, 6,
	18, 15, 1461, 1460, 131, 89, 1458, 143, 1453, 1452,
	29, 1451, 1450, 13, 1447, 17, 1446, 5, 1, 1438,
	132, 1434, 100, 1428, 1326, 1426, 138, 1424, 1423, 1323,
	84,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 4, 4, 37, 37, 36, 36,
	36, 36, 36, 36, 36, 36, 36, 36, 36, 36,
	36, 36, 36, 34, 34, 39, 39, 39, 38, 38,
	33, 33, 5, 5, 5, 9, 10, 10, 10, 10,
	10, 10, 76, 76, 75, 75, 78, 78, 11, 11,
	12, 12, 12, 12, 12, 12, 12, 12, 163, 163,
	162, 13, 138, 138, 14, 14, 14, 14, 15, 99,
	99, 16, 20, 230, 230, 230, 234, 234, 235, 235,
	236, 236, 236, 236, 236, 236, 236, 232, 232, 23,
	23, 23, 23, 114, 114, 116, 116, 116, 116, 42,
	113, 113, 113, 113, 115, 115, 115, 115, 187, 185,
	185, 192, 192, 192, 55, 55, 55, 55, 55, 56,
	56, 56, 184, 184, 184, 184, 193, 193, 193, 193,
	193, 193, 57, 57, 57, 191, 191, 24, 24, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	24, 186, 186, 231, 231, 233, 233, 8, 8, 58,
	58, 59, 59, 120, 120, 120, 120, 119, 202, 202,
	203, 203, 203, 204, 204, 204, 204, 204, 204, 204,
	200, 200, 201, 198, 198, 199, 199, 199, 199, 237,
	237, 118, 118, 62, 62, 207, 207, 207, 207, 205,
	205, 205, 205, 205, 208, 206, 209, 209, 209, 209,
	209, 149, 149, 149, 26, 7, 7, 103, 103, 66,
	66, 153, 153, 153, 67, 67, 154, 49, 49, 35,
	35, 35, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 104, 104, 105, 105, 18, 22, 25, 25, 25,
	25, 25, 239, 239, 46, 46, 46, 46, 47, 47,
	117, 117, 117, 117, 117, 41, 6, 6, 40, 40,
	17, 17, 17, 17, 17, 52, 52, 110, 110, 110,
	112, 112, 111, 111, 111, 89, 89, 27, 80, 80,
	81, 81, 160, 82, 82, 21, 21, 30, 30, 28,
	28, 28, 28, 28, 28, 29, 29, 31, 31, 31,
	31, 31, 31, 31, 215, 215, 215, 217, 217, 214,
	216, 216, 238, 238, 90, 90, 90, 61, 60, 60,
	64, 64, 63, 65, 65, 152, 87, 87, 87, 87,
	106, 107, 107, 108, 108, 109, 109, 86, 86, 135,
	135, 32, 32, 71, 71, 72, 72, 126, 126, 127,
	127, 125, 125, 125, 155, 155, 155, 155, 156, 156,
	156, 156, 156, 156, 150, 150, 150, 150, 151, 151,
	161, 161, 93, 93, 93, 93, 91, 91, 92, 92,
	157, 157, 157, 157, 88, 88, 158, 158, 158, 121,
	121, 164, 164, 164, 70, 70, 70, 165, 165, 165,
	165, 165, 165, 165, 165, 165, 165, 165, 165, 165,
	166, 166, 166, 166, 168, 168, 168, 167, 167, 167,
	167, 167, 167, 167, 167, 167, 167, 167, 167, 167,
	169, 169, 176, 176, 177, 177, 178, 179, 170, 170,
	171, 171, 172, 173, 180, 180, 180, 180, 182, 182,
	174, 174, 174, 174, 174, 175, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	101, 101, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 210, 210, 210, 210, 210,
	210, 210, 212, 212, 213, 213, 211, 211, 211, 211,
	211, 211, 211, 211, 211, 211, 211, 211, 211, 211,
	211, 211, 211, 211, 211, 211, 211, 211, 211, 211,
	211, 218, 218, 219, 219, 220, 220, 221, 221, 223,
	224, 224, 224, 225, 229, 229, 222, 222, 226, 226,
	226, 227, 227, 228, 228, 228, 228, 228, 140, 140,
	140, 141, 141, 142, 77, 77, 137, 137, 136, 136,
	136, 139, 139, 94, 181, 181, 181, 181, 181, 181,
	181, 95, 95, 102, 96, 96, 97, 97, 97, 97,
	97, 97, 132, 133, 98, 98, 98, 134, 134, 143,
	147, 147, 146, 145, 145, 144, 144, 124, 124, 124,
	124, 123, 122, 83, 83, 240, 240, 148, 148, 84,
	84, 85, 79, 79, 159, 159, 159, 159, 73, 73,
	54, 54, 74, 74, 50, 50, 53, 51, 51, 51,
	51, 68, 68, 69, 69, 48, 48, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 183, 183,
	183, 43, 43, 43, 44, 44, 45, 45, 189, 189,
	189, 190, 190, 190, 190, 188, 188, 188, 188, 188,
	194, 194, 194, 194, 194, 194, 194, 194, 194, 194,
	194, 194, 194, 194, 194, 194, 194, 194, 194, 194,
	194, 194, 194, 194, 194, 194, 194, 194, 194, 194,
	194, 194, 194, 194, 194, 194, 194, 194, 194, 194,
	194, 194, 194, 194, 194, 194, 194, 194, 194, 194,
	194, 194, 194, 194, 194, 194, 194, 194, 194, 194,
	194, 194, 194, 194, 194, 194, 194, 194, 194, 194,
	194, 194, 194, 194, 194, 194, 194, 194, 194, 194,
	194, 194, 194, 194, 194, 194, 194, 194, 194, 194,
	194, 194, 194, 194, 194, 194, 194, 194, 194, 194,
	194, 194, 194, 194, 194, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 195, 195, 195, 195, 195, 195, 195, 195,
	195, 195, 195, 195, 195, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 4, 6, 1, 3, 2, 5,
	3, 6, 4, 6, 6, 6, 4, 8, 2, 3,
	3, 6, 4, 3, 2, 1, 1, 0, 2, 0,
	2, 0, 1, 1, 1, 6, 3, 5, 4, 6,
	4, 6, 1, 3, 1, 2, 2, 3, 2, 5,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	1, 5, 3, 0, 1, 1, 1, 1, 3, 3,
	0, 6, 6, 1, 2, 2, 1, 1, 1, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 2,
	3, 6, 3, 2, 1, 1, 1, 3, 3, 2,
	3, 3, 3, 3, 1, 3, 3, 2, 1, 1,
	3, 1, 1, 1, 2, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 1,
	1, 1, 1, 1, 0, 1, 1, 2, 2, 4,
	2, 4, 4, 4, 4, 3, 3, 4, 3, 2,
	4, 2, 0, 2, 0, 2, 0, 6, 9, 1,
	0, 1, 3, 1, 1, 1, 1, 3, 2, 0,
	3, 1, 2, 2, 1, 1, 2, 4, 2, 5,
	6, 7, 5, 3, 1, 4, 5, 5, 10, 1,
	1, 4, 0, 3, 0, 2, 2, 2, 0, 1,
	1, 2, 2, 0, 3, 3, 2, 1, 1, 2,
	2, 1, 2, 1, 4, 10, 13, 1, 0, 1,
	3, 3, 3, 5, 1, 3, 1, 2, 0, 1,
	1, 0, 6, 6, 8, 6, 8, 8, 10, 8,
	10, 1, 0, 2, 0, 2, 2, 3, 3, 2,
	2, 2, 1, 0, 1, 3, 2, 0, 2, 1,
	1, 1, 3, 3, 0, 3, 4, 7, 3, 0,
	6, 6, 8, 5, 7, 1, 3, 1, 4, 2,
	8, 5, 4, 3, 0, 2, 0, 8, 1, 3,
	1, 1, 3, 5, 5, 1, 1, 3, 3, 1,
	2, 3, 2, 3, 4, 1, 1, 8, 8, 1,
	2, 4, 4, 4, 2, 2, 3, 1, 3, 6,
	1, 0, 1, 0, 1, 1, 0, 1, 1, 0,
	1, 0, 3, 1, 3, 2, 2, 2, 1, 1,
	2, 2, 3, 1, 1, 1, 1, 3, 0, 2,
	0, 2, 3, 2, 0, 1, 3, 3, 1, 1,
	3, 2, 4, 0, 4, 2, 1, 4, 3, 4,
	5, 4, 5, 4, 5, 2, 4, 1, 1, 0,
	5, 0, 2, 2, 2, 1, 1, 0, 4, 2,
	1, 2, 2, 4, 1, 3, 1, 2, 3, 2,
	0, 2, 5, 2, 3, 4, 0, 1, 1, 1,
	1, 2, 4, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 5, 0, 1, 1, 1,
	1, 1, 1, 2, 2, 2, 2, 2, 1, 1,
	3, 0, 1, 1, 1, 1, 5, 2, 1, 1,
	1, 1, 4, 1, 2, 2, 1, 1, 1, 0,
	1, 1, 4, 1, 4, 1, 1, 1, 1, 1,
	1, 1, 3, 3, 3, 3, 3, 3, 3, 0,
	1, 4, 1, 3, 3, 5, 2, 2, 2, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	2, 2, 3, 4, 4, 5, 3, 4, 3, 3,
	4, 3, 4, 3, 4, 5, 6, 6, 7, 6,
	7, 6, 7, 3, 4, 1, 3, 2, 2, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 5,
	6, 6, 7, 1, 1, 1, 3, 1, 1, 1,
	2, 2, 2, 1, 1, 3, 5, 6, 8, 6,
	6, 4, 4, 1, 1, 1, 5, 1, 3, 1,
	3, 1, 1, 1, 1, 6, 4, 4, 4, 4,
	6, 5, 5, 5, 4, 8, 6, 6, 4, 4,
	4, 5, 0, 5, 0, 2, 0, 1, 3, 3,
	2, 2, 0, 6, 1, 0, 3, 0, 2, 2,
	0, 1, 4, 2, 2, 2, 2, 2, 4, 3,
	5, 4, 3, 5, 1, 3, 1, 3, 3, 3,
	2, 1, 3, 3, 1, 1, 1, 1, 1, 1,
	1, 4, 3, 2, 3, 0, 3, 3, 2, 2,
	1, 0, 2, 2, 3, 2, 1, 1, 3, 5,
	1, 2, 4, 2, 0, 1, 0, 1, 1, 3,
	5, 2, 2, 1, 2, 1, 0, 1, 1, 1,
	3, 3, 1, 3, 3, 2, 1, 1, 1, 3,
	1, 3, 1, 3, 1, 2, 3, 1, 2, 2,
	1, 1, 3, 3, 0, 1, 2, 1, 1, 1,
	1, 6, 2, 3, 5, 1, 1, 1, 1, 2,
	2, 1, 1, 1, 1, 0, 3, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -9, -10, -11, -13,
	-15, -16, -17, -19, -20, -22, -21, -23, -24, -25,
	-18, -26, -27, 19, -6, -7, -8, -216, 84, 92,
	181, 91, 107, 195, 202, -28, -30, 210, 211, 29,
	219, 53, 87, 197, 192, 239, 59, -215, -31, -29,
	285, 260, 266, 205, -32, 226, 253, 288, 226, 71,
	118, 79, 122, 247, 246, 71, 118, 226, -12, 285,
	-21, -5, -10, -4, -17, -27, -9, -11, 19, -43,
	4, -194, -196, 16, 17, 19, 28, 29, 34, 38,
	41, 52, 53, 54, 56, 58, 61, 62, 69, 70,
	71, 72, 74, 79, 83, 84, 86, 91, 92, 97,
	98, 101, 103, 108, 113, 114, 119, 122, 130, 132,
	133, 138, 141, 144, 146, 147, 148, 149, 150, 152,
	153, 155, 157, 154, 160, 162, 163, 169, 172, 175,
	176, 179, 181, 183, 184, 185, 187, 188, 192, 190,
	191, 193, 195, 197, 198, 200, 202, 203, 204, 207,
	208, 210, 211, 213, 216, 218, 219, 222, 220, 225,
	227, 228, 235, 239, 240, 241, 242, 245, 246, 247,
	250, 251, 252, 256, 261, 262, 263, 264, 30, 31,
	32, 33, 35, 36, 39, 40, 44, 45, 46, 48,
	73, 75, 76, 90, 93, 99, 109, 111, 115, 116,
	123, 124, 125, 127, 136, 159, 161, 170, 174, 178,
	180, 186, 199, 206, 214, 215, 221, 223, 230, 231,
	232, 236, 237, 253, 254, -43, -234, 18, -235, -236,
	59, 84, 107, 205, 122, 79, 246, -234, -47, 202,
	-43, -114, 141, 208, 235, -115, -113, -187, 230, 150,
	-75, -43, 4, 71, 52, 72, 108, 118, 119, 133,
	227, 230, 235, 18, 59, -239, 235, 235, -239, -239,
	-46, 235, 233, -47, -238, 226, 226, -103, 71, 244,
	-29, -31, -30, -63, -64, 243, 126, 89, 168, -28,
	-30, -215, -217, 187, -214, -43, -217, -60, -61, 18,
	81, 289, -157, -50, 166, -43, -85, 285, -3, -157,
	115, -43, -53, 115, -50, 105, 128, 128, -158, -157,
	-43, 115, -54, 115, -53, -76, 115, -75, -163, -162,
	-190, 4, -194, -196, -195, 253, 50, 60, 106, 121,
	129, 131, 137, 139, 151, 171, 173, 196, 212, 226,
	-138, 285, -99, 285, 165, 289, 165, -43, -114, 46,
	-114, -116, -41, -42, 130, 183, 233, 270, 105, 264,
	-57, 5, 77, -78, 287, 105, -231, 165, 105, 105,
	105, -186, 105, 264, 130, 183, 226, -117, -41, -42,
	-117, 233, -47, -88, -157, -75, 115, 118, -43, 115,
	-63, -64, -87, -106, -107, 140, 164, -90, 18, 81,
	-90, -90, 38, 286, 286, 289, -217, -69, 285, -79,
	-159, -128, 278, -130, 276, 277, 282, 156, 265, -140,
	-50, -131, 9, 285, -143, -212, -30, 90, 24, -141,
	-142, 199, -43, 7, 8, 5, 6, -48, -166, -175,
	238, 94, 158, 42, -210, -211, 4, -194, -189, -167,
	-177, -171, -174, 127, 50, 64, 67, 65, 68, 209,
	248, 43, 93, 174, 178, 223, 236, 237, 115, 159,
	116, 48, 109, 136, 83, 31, 33, 35, 36, 44,
	45, 73, 75, 76, 99, 123, 124, 125, 161, 186,
	214, 221, 231, 232, 254, -195, -178, -179, -172, -173,
	-180, -79, -85, 278, -50, 285, -83, -124, -123, -122,
	283, 287, -84, -148, -128, 77, -37, 190, -36, 17,
	19, 84, 251, 90, 190, 190, 90, 290, -158, -52,
	-50, -52, 210, -43, 25, 90, -39, 289, 41, 193,
	90, -39, 289, 90, 286, 289, -157, 115, 25, -137,
	-164, -165, -167, -176, -170, -174, -175, 34, 40, 39,
	228, 206, 215, 32, 123, 124, 125, 214, 31, 186,
	99, 83, 76, 75, 161, 36, 35, -178, -179, -172,
	-173, 73, 231, 232, 127, 33, 45, 44, 254, 221,
	-77, -128, -230, -74, 226, 71, -51, -43, 278, -236,
	-230, 25, 289, 289, 138, -56, 144, 155, 113, -185,
	77, -192, -184, -149, 9, 238, 94, 165, -191, 8,
	277, -183, -190, 5, 7, 276, -185, 77, 62, -193,
	5, 4, -175, -149, 77, 141, 287, -188, 4, -194,
	-196, -195, -197, 18, 20, 21, 22, 23, 24, 25,
	26, 27, 37, 42, 43, 47, 49, 51, 57, 59,
	63, 64, 65, 66, 67, 68, 77, 78, 80, 81,
	82, 85, 87, 89, 94, 95, 96, 102, 104, 105,
	107, 110, 112, 117, 118, 120, 126, 128, 134, 135,
	140, 142, 143, 156, 158, 164, 165, 166, 167, 168,
	177, 182, 189, 194, 205, 209, 217, 224, 226, 229,
	233, 234, 238, 243, 244, 248, 249, 255, 257, 258,
	259, 260, -187, -233, 102, -230, -187, -187, -187, -187,
	138, -187, 289, 289, -47, -39, 289, 285, 156, -44,
	115, -43, -40, 86, 156, -87, -107, -106, -108, -128,
	18, -128, -130, -29, -29, -29, -65, -152, -128, -214,
	25, -68, -43, -71, 289, 105, 10, 49, 28, 276,
	277, 278, 279, 100, 280, 273, 274, 275, 272, 268,
	269, 270, 55, 145, 201, 12, 13, 14, 22, 167,
	139, 265, 212, 129, 30, 117, 25, 4, -128, -128,
	-128, -128, -128, 173, -30, -128, -77, -83, -30, -136,
	283, 285, -83, 285, 5, 5, 285, -144, -128, -218,
	261, 102, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 180, -182, 256,
	-182, -182, -168, 285, -168, -169, 285, -168, 262, 266,
	285, -71, -50, -124, -128, -188, 278, 289, 286, 289,
	233, -104, 57, 51, -119, 115, 51, -198, -43, 57,
	-199, 47, 244, 182, 104, -104, 57, -104, 57, 57,
	-157, 233, 233, -53, -43, -121, 258, -110, -21, 285,
	77, 25, -110, -80, -81, -160, -82, -50, 285, -43,
	-43, -53, -54, -75, -76, -12, -162, 90, -14, -21,
	-17, -27, -9, 286, 289, -70, 24, -100, 285, 263,
	148, 74, 114, 147, -101, 204, 286, 289, 233, 289,
	-74, -68, -123, -122, 105, 235, -42, -41, -55, 185,
	216, 191, 207, 289, 8, 7, 7, 5, -188, -232,
	-43, -42, -41, -157, -58, -59, -120, -119, -200, -201,
	-198, 118, 244, 95, 90, 165, 156, 270, 90, -109,
	199, 200, 289, -35, 26, 80, 285, 289, 286, -121,
	-159, -72, -155, -157, -30, -156, 285, -164, -75, 230,
	-128, -128, -128, -128, -128, -128, -128, -128, -128, -128,
	-128, -128, -128, -128, -128, -128, -128, -128, -128, -128,
	-128, -128, 139, 212, 30, 117, 233, 158, 156, 238,
	94, 245, 81, 162, -240, 224, 27, -134, -30, 285,
	-188, -140, 199, 285, 286, 289, -77, -139, 284, -136,
	-77, 286, 286, -77, 255, 18, 81, 278, -100, 7,
	-147, -146, 257, -219, 97, 110, 285, 286, 286, -128,
	-94, -181, 4, 263, 148, 74, 114, 147, 204, -95,
	-128, -96, -129, -130, 276, 277, 282, 285, 199, -97,
	-128, -77, -128, 37, 135, 234, -98, -128, 105, -77,
	-128, -128, -128, -77, -77, -77, 285, 7, 7, 230,
	230, 7, -121, 286, 284, 293, -148, -36, -50, -43,
	-43, 156, -119, 115, -164, -43, 285, 285, 132, 132,
	-43, -43, 115, -43, 115, -43, -43, -37, 190, -43,
	-43, 190, -89, 194, -128, -89, -112, 165, -73, -50,
	253, -43, 194, -71, 289, 270, -73, -39, -39, -157,
	-164, 283, 283, 7, 233, 233, 233, 233, 285, -128,
	-232, -51, -232, -41, 242, 54, 185, -192, -100, 289,
	286, 289, -44, 118, -44, -75, -50, 90, 5, -43,
	-152, -14, -43, -86, 110, 289, 60, -93, 131, 151,
	106, 137, 196, 121, -125, 290, -151, -150, 25, -43,
	-30, -156, -155, 264, -128, 233, -240, 224, -134, -128,
	158, 238, 94, 245, 81, 162, 105, 285, -129, -129,
	-77, 285, -77, -128, 284, 284, 289, 286, -64, 289,
	-63, -128, -77, -77, 286, 286, -145, -146, 85, -128,
	-224, 172, 285, 285, -128, 25, 286, 105, 286, -102,
	177, 286, 10, 276, 277, 278, 279, 100, 280, 273,
	274, 275, 272, 268, 269, 270, 55, 145, 201, 12,
	13, 14, 129, 117, -129, -129, -129, -77, 285, 286,
	-132, -133, 105, 102, 25, -98, -98, -98, 286, 105,
	-77, 289, 289, 289, 286, 286, 286, 7, 286, 289,
	286, 264, 264, 286, -86, -128, 233, 233, 90, 156,
	-202, -199, -128, -68, 285, 285, -34, 84, 210, -105,
	90, -39, 90, -39, 233, -104, 57, 233, -79, 194,
	56, 286, 289, -79, -121, -81, -148, 286, 284, 7,
	7, 286, 148, 114, 147, -101, 147, -101, -101, 7,
	-43, -120, 285, -44, 285, 285, 285, -43, -40, 286,
	-135, 112, 38, -155, 131, 131, -155, -93, 131, -91,
	171, -91, -91, -151, -188, 291, -43, 285, 286, -128,
	-128, -129, -129, 105, 285, -128, -137, 22, 22, 286,
	-77, 286, 289, 286, -136, 286, 255, -64, -64, -64,
	5, 87, -128, 229, -225, -43, 285, 258, -63, 286,
	-164, -128, -132, -128, -164, -129, -129, -129, -129, -129,
	-129, -129, -129, -129, -129, -129, -129, -129, -129, -129,
	-129, -129, -129, -129, 81, 156, 162, -129, 289, -77,
	286, -133, -132, -128, -128, -164, 286, 286, 286, -77,
	-128, -128, -128, 286, 7, -135, 284, -43, -43, -119,
	90, -203, 57, -204, 49, 156, 158, 244, 182, 47,
	77, 189, 286, 286, -68, -68, 156, 77, 156, 77,
	70, 240, -43, -43, -50, -43, -43, -43, -79, -111,
	285, 165, -21, -50, -89, 270, 284, 284, 286, -66,
	-153, -43, -213, 285, -210, -211, -48, 285, -67, -154,
	-43, -58, -66, 165, -220, 259, -128, -77, -155, -155,
	-92, 249, 165, 131, -155, -161, 267, -127, -126, 103,
	154, 285, -68, -150, 22, 22, -128, -137, 286, -128,
	-128, 286, -128, 5, -128, 286, 286, 286, -128, -229,
	-43, -128, 286, 286, -133, 105, 81, 162, 285, -128,
	286, 286, 289, 286, 286, 286, -220, -119, -43, -75,
	158, 132, 285, -129, -50, -118, -237, 58, 222, 286,
	286, 158, 158, -128, -164, -39, -39, 233, 233, 82,
	-68, 57, -85, -30, 285, 286, 289, -49, -83, 49,
	-49, -128, 285, -66, 286, 289, 286, 286, -50, -221,
	-223, -43, -92, 285, -128, -155, 162, 289, 292, 270,
	-68, 286, -128, -128, 286, 286, -64, -222, 176, 286,
	-129, 105, 285, -137, 286, -128, -204, -128, -45, 285,
	285, 189, -38, 49, -43, -43, 246, 157, 286, -43,
	-118, -153, -35, -75, -35, 286, -77, 286, -154, -118,
	285, 289, 25, -68, 225, -126, -188, 286, 286, -64,
	38, -129, -137, 286, 286, 286, -207, 146, -43, -68,
	-50, -33, 249, -75, 210, -121, -49, -64, -118, -66,
	-223, -225, 286, 230, -226, 184, 200, -77, 286, -205,
	-208, -206, 165, 106, 175, 213, 286, 286, -62, 285,
	-128, -80, -35, 286, 286, 5, 286, -227, -228, 30,
	241, 62, -128, -227, -206, 165, -208, 165, 246, 79,
	-207, -68, -121, -118, -228, 179, 101, 199, 179, 101,
	-209, 153, 193, 41, 210, -209, -205, 286, 22, 16,
	158, 77, -228,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 0, 52, 53, 54, 0, 0, 341,
	0, 0, 0, 0, 0, 315, -2, 0, 0, 273,
	0, 273, 273, 277, 0, 343, 238, 340, -2, 351,
	0, 0, 0, 349, 329, 0, 0, -2, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 68, 0,
	70, 71, 72, 73, 74, 75, 76, 77, 0, 83,
	761, 762, 763, 780, 781, 782, 783, 784, 785, 786,
	787, 788, 789, 790, 791, 792, 793, 794, 795, 796,
	797, 798, 799, 800, 801, 802, 803, 804, 805, 806,
	807, 808, 809, 810, 811, 812, 813, 814, 815, 816,
	817, 818, 819, 820, 821, 822, 823, 824, 825, 826,
	827, 828, 829, 830, 831, 832, 833, 834, 835, 836,
	837, 838, 839, 840, 841, 842, 843, 844, 845, 846,
	847, 848, 849, 850, 851, 852, 853, 854, 855, 856,
	857, 858, 859, 860, 861, 862, 863, 864, 865, 866,
	867, 868, 869, 870, 871, 872, 873, 874, 875, 876,
	877, 878, 879, 880, 881, 882, 883, 884, 885, 886,
	887, 888, 889, 890, 891, 892, 893, 894, 895, 896,
	897, 898, 899, 900, 901, 902, 903, 904, 905, 906,
	907, 908, 909, 910, 911, 912, 913, 914, 915, 916,
	917, 918, 919, 920, 921, 922, 923, 924, 925, 926,
	927, 928, 929, 930, 931, 90, 0, 96, 97, 98,
	100, 101, 102, 103, 104, 105, 106, 0, 266, 853,
	279, 109, 819, 857, 869, 114, 124, 0, 925, -2,
	128, 64, 157, 158, 0, 160, 174, 0, 0, 0,
	172, 0, 0, 169, 0, 284, 272, 284, 269, 270,
	271, 274, 0, 265, 0, 342, 0, 0, 0, 237,
	-2, 325, 326, -2, 0, 346, 346, 346, 0, 0,
	326, 0, 334, 843, 337, 744, 335, 0, 0, 348,
	347, 0, 330, 410, 0, 734, 371, 0, 2, 0,
	905, 0, 0, 905, 0, 0, 0, 0, 0, 416,
	56, 905, 47, 905, 730, 47, 905, 62, 0, 78,
	80, 771, 772, 773, 774, 930, 932, 933, 934, 935,
	936, 937, 938, 939, 940, 941, 942, 943, 944, 0,
	0, 0, 88, 0, 0, 0, 0, 278, 110, 895,
	112, 113, 115, 116, 0, 0, 0, 0, 0, 0,
	127, 152, 153, 65, 0, 0, 176, 0, 0, 0,
	0, 165, 0, 166, 0, 168, 0, 267, 280, 281,
	268, 0, 276, 47, 414, 0, 905, 765, 289, 905,
	-2, 0, 321, 358, 359, 0, 0, 0, 344, 345,
	0, 0, 0, 317, 318, 0, 336, 0, 0, 374,
	722, 726, 727, 502, 0, 0, 0, 0, 0, 0,
	583, 584, 585, 0, 587, 588, 589, 900, 0, 593,
	594, 919, 734, 747, 748, 749, 750, 0, 0, 0,
	755, 756, 757, 706, 632, 603, -2, -2, 745, 440,
	441, 442, 443, -2, 932, 607, 609, 611, 612, 613,
	614, 0, 901, 915, 916, 924, 928, 929, 905, 912,
	906, 896, 903, 911, 801, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, 770, 464, 465, 470, 471,
	473, 374, 372, 411, 412, 0, 735, 713, 707, 708,
	0, 0, 0, 719, 717, 718, 24, 262, 26, 0,
	262, 262, 0, 0, 0, 0, 0, 0, 420, 0,
	295, 0, 0, 417, 0, 0, 58, 0, 45, 46,
	0, 60, 0, 0, 341, 0, 0, 905, 341, 0,
	666, 426, 427, 428, 429, 430, 499, 433, 434, 435,
	436, 437, 438, 439, 447, 448, 449, 450, 451, 452,
	461, 0, 446, 446, 446, 458, 459, 462, 463, 468,
	469, 480, 481, 483, 485, 479, 479, 479, 476, 477,
	0, 664, 0, 93, 0, 797, 732, 737, 740, 99,
	0, 0, 0, 0, 0, 119, 139, 140, 141, 120,
	122, 129, 131, 132, 133, 142, 143, 144, 145, 231,
	0, 233, 155, 156, 758, 0, 121, 123, 125, 126,
	146, 147, 0, 149, 150, 151, 0, 66, 775, 776,
	777, 778, 779, 945, 946, 947, 948, 949, 950, 951,
	952, 953, 954, 955, 956, 957, 958, 959, 960, 961,
	962, 963, 964, 965, 966, 967, 968, 969, 970, 971,
	972, 973, 974, 975, 976, 977, 978, 979, 980, 981,
	982, 983, 984, 985, 986, 987, 988, 989, 990, 991,
	992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001,
	1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011,
	1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021,
	1022, 1023, 159, 161, 0, 173, 162, 163, 164, 171,
	167, 170, 0, 0, 275, 234, 0, 180, 0, 0,
	905, 764, 286, 0, 0, 324, 356, 357, 360, 363,
	364, 361, 502, 331, 332, 333, 352, 353, 251, 338,
	0, 0, 741, 420, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 716, 0, 0, 725, 506, 507,
	508, 530, 531, 0, -2, 664, 0, 590, 591, 592,
	0, 0, -2, 0, 752, 499, 0, 0, 705, 634,
	0, 0, 0, 0, 0, 0, 0, 685, 691, 0,
	0, 0, 0, 0, 0, 0, 0, 454, 467, 478,
	475, 474, 456, 0, 455, 453, 0, 457, 0, 0,
	0, 420, 0, 714, 0, 711, 712, 0, 721, 0,
	0, 0, 0, 261, 28, 905, 0, 38, 0, 0,
	204, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 736, 306, 0, 306, 297, 0,
	0, 0, 293, 374, 308, 310, 311, 0, 0, 418,
	57, 731, 47, 63, 47, 69, 79, 0, 81, 84,
	85, 86, 87, 82, 0, 421, 423, 431, 0, 486,
	487, 488, 489, 490, 491, 500, 89, 0, 0, 0,
	94, 95, 738, 739, 0, 0, 117, 118, 285, 0,
	136, 0, 138, 0, 232, 760, 759, 499, 67, 175,
	107, 282, 283, 415, 0, 179, 181, 183, 184, 185,
	186, 765, 0, 765, 0, 0, 0, 0, 0, 362,
	365, 366, 0, 355, 249, 250, 341, 0, 743, 368,
	723, 373, 375, 383, 399, 386, 0, 503, 504, 0,
	509, 510, 511, 512, 513, 514, 515, 516, 517, 518,
	-2, -2, -2, 522, 523, 524, -2, -2, -2, 528,
	529, -2, 0, 0, 716, 0, 0, 536, 0, 539,
	541, 543, 0, 0, 0, 0, 715, 553, 697, 0,
	724, 538, 0, 0, 586, 0, 0, 0, 670, 671,
	0, -2, 595, 351, 0, 0, 0, 0, 753, 0,
	704, 700, 0, 642, 0, 0, 0, 608, 610, 0,
	0, 0, 674, 675, 676, 677, 678, 679, 680, 0,
	0, 0, 0, 555, 0, 0, 0, 0, 919, 0,
	664, 690, 0, 0, 0, 0, 0, 664, 0, 696,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 368, 413, 709, 0, 720, 27, 253, 0,
	0, 0, 30, 905, 189, 0, 0, 0, 0, 0,
	264, 39, 905, 47, 905, 47, 40, 25, 262, 252,
	255, 0, 55, 0, 419, 290, 291, 0, 0, 728,
	299, 296, 0, 420, 0, 0, 0, 59, 61, 0,
	667, 0, 0, 0, 0, 0, 0, 0, 0, 665,
	91, 733, 92, 111, 134, 135, 137, 130, 148, 0,
	177, 0, 0, 765, 0, 0, 0, 0, 288, 289,
	354, 0, 742, 370, 0, 0, 0, 0, 0, 0,
	407, 407, 407, 405, 399, 0, 385, 398, 0, 397,
	-2, 386, 0, 0, -2, 0, 0, 0, 554, -2,
	537, 540, 542, 544, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 665, 668, 669, 0, -2, 0, 0,
	350, 351, 351, 351, 601, 0, 0, 701, 0, 0,
	602, 0, 0, 0, 0, 0, 616, 0, 617, 0,
	0, 618, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 557, 558, 559, 0, 0, 619,
	688, 689, 0, 0, 0, 0, 0, 0, 624, 0,
	695, 0, 0, 0, 628, 629, 630, 0, 444, 0,
	460, 482, 484, 472, 370, 0, 0, 0, 0, 0,
	187, 203, 0, 0, 0, 0, 32, 0, 0, 0,
	0, 36, 0, 42, 0, 0, 0, 0, 305, 0,
	304, 0, 0, 294, 306, 309, 312, 0, 424, 0,
	0, 432, 492, 493, 494, 495, 496, 497, 498, 0,
	108, 182, 0, 0, 0, 180, 0, 0, 287, 339,
	636, 0, 0, 376, 0, 0, 0, 0, 0, 402,
	406, 403, 404, 401, 381, 0, 395, 0, 388, 505,
	-2, 0, 0, 0, 0, -2, 0, 0, 0, 698,
	0, 659, 0, -2, 672, 596, 0, 0, 0, 0,
	754, 699, 703, 0, 640, 641, 645, 0, 0, 606,
	0, 673, 682, 683, 556, 560, 561, 562, 563, 564,
	565, 566, 567, 568, 569, -2, -2, -2, 573, 574,
	575, -2, -2, -2, 0, 0, 0, 684, 0, 0,
	662, 686, 687, 692, 693, 0, 621, 622, 623, 694,
	0, 0, 0, 466, 0, 636, 710, 257, 259, 29,
	0, 188, 0, 191, 0, 0, 194, 195, 0, 0,
	0, 0, 205, 212, 0, 0, 0, 44, 0, 0,
	263, 0, 47, 47, 254, 0, 0, 256, 292, 0,
	0, 0, 298, 729, 307, 0, 425, 422, 501, 0,
	239, 248, 248, 0, 604, 605, 0, 0, 0, 244,
	246, 0, 0, 0, 327, 0, 369, 367, 389, 0,
	391, 0, 0, 0, 393, 384, 0, 0, 379, 0,
	378, 0, 0, 387, 0, 0, -2, 0, 547, -2,
	-2, 658, 665, 751, 351, 597, 599, 600, 702, 647,
	644, 0, 631, 615, 681, 0, 0, 0, 0, 665,
	661, 620, 0, 626, 627, 445, 328, 31, 0, 192,
	193, 196, 0, 198, 767, 206, 0, 209, 210, 207,
	0, 33, 34, 43, 49, 35, 41, 0, 0, 0,
	0, 0, 313, 314, 0, 212, 0, 251, 746, 0,
	251, 0, 0, 0, 202, 0, 178, 212, 0, 635,
	637, 0, 390, 0, 409, 392, 0, 0, 382, 0,
	0, 396, -2, -2, 548, 660, 0, 351, 0, 633,
	-2, 0, 0, 0, 663, 0, 190, 0, 218, 0,
	0, 0, 51, 0, 258, 260, 0, 301, 420, 303,
	200, 240, 241, 247, 242, 248, 351, 212, 245, 235,
	0, 0, 0, 0, 0, 380, 377, 394, 598, 650,
	0, -2, 0, 581, 625, 197, 223, 0, 0, 0,
	214, 37, 0, 48, 0, 302, 251, 0, 201, 0,
	638, 639, 408, 0, 0, 0, 0, 646, 582, 199,
	219, 220, 0, 215, 216, 217, 766, 211, 218, 0,
	50, 420, 243, 596, 212, 400, 643, 648, 651, -2,
	872, 794, 0, 649, 221, 0, 222, 0, 0, 0,
	223, 0, 300, 236, 0, 653, 654, 655, 656, 657,
	224, 0, 227, 228, 0, 225, 208, 213, 0, 226,
	229, 230, 652,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 274, 3, 280, 275, 3,
	285, 286, 278, 276, 289, 277, 287, 279, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 293, 288,
	268, 270, 269, 3, 290, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 283, 3, 284, 273, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 291, 272, 292, 282,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 271, 57611, 281, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:689
		{
			sqllex.(*scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:695
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:701
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 16:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:723
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 23:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:733
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 24:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:739
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.qname(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 25:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:743
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.qname(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 26:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:749
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 27:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:753
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:760
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 29:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:765
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 30:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:770
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 31:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:775
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 32:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:780
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: sqlDollar[3].str, Default: sqlDollar[4].union.expr()}
		}
	case 33:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:785
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: sqlDollar[3].str}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:789
		{
			unimplemented()
		}
	case 35:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:792
		{
			sqlVAL.union.val = &AlterTableDropColumn{columnKeyword: sqlDollar[2].union.bool(), IfExists: true, Column: sqlDollar[5].str}
		}
	case 36:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:797
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        sqlDollar[3].str,
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:807
		{
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:810
		{
			sqlVAL.union.val = &AlterTableAddConstraint{ConstraintDef: sqlDollar[2].union.constraintDef()}
		}
	case 39:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:814
		{
			unimplemented()
		}
	case 40:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:816
		{
			unimplemented()
		}
	case 41:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:819
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   sqlDollar[5].str,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 42:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:828
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   sqlDollar[3].str,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 43:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:838
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 44:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:842
		{
			sqlVAL.union.val = nil
		}
	case 45:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:848
		{
			sqlVAL.union.val = DropCascade
		}
	case 46:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:852
		{
			sqlVAL.union.val = DropRestrict
		}
	case 47:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:856
		{
			sqlVAL.union.val = DropDefault
		}
	case 48:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:861
		{
			unimplementedWithIssue(2473)
		}
	case 49:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:862
		{
		}
	case 50:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:865
		{
			unimplemented()
		}
	case 51:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:866
		{
		}
	case 55:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:877
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retExprs()}
		}
	case 56:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:884
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 57:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:888
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 58:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:892
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:900
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:908
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.qnames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:912
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.qnames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:918
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:922
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 64:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:928
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:932
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 66:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:938
		{
			sqlVAL.union.val = Indirection{NameIndirection(sqlDollar[2].str)}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:942
		{
			sqlVAL.union.val = append(sqlDollar[1].union.indirect(), NameIndirection(sqlDollar[3].str))
		}
	case 68:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:949
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 69:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:953
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 70:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:959
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 77:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:968
		{ /* SKIP DOC */
		}
	case 78:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:972
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:976
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 81:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:986
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:996
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 83:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1000
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 84:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1006
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 88:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1016
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1027
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 90:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1031
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 91:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1038
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: NameList(sqlDollar[6].union.strs()), Targets: sqlDollar[4].union.targetList()}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1045
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: NameList(sqlDollar[6].union.strs()), Targets: sqlDollar[4].union.targetList()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1052
		{
			sqlVAL.union.val = TargetList{Tables: QualifiedNames(sqlDollar[1].union.qnames())}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1056
		{
			sqlVAL.union.val = TargetList{Tables: QualifiedNames(sqlDollar[2].union.qnames())}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1060
		{
			sqlVAL.union.val = TargetList{Databases: NameList(sqlDollar[2].union.strs())}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1067
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1070
		{
		}
	case 98:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1074
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1078
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 100:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1085
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1089
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 102:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1093
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1097
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 104:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1101
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 105:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1105
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 106:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1109
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1117
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1121
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 109:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1129
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1133
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 111:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1137
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1141
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 113:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1147
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1154
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1158
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1162
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1166
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1173
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1179
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname(), Values: sqlDollar[3].union.exprs()}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1183
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname(), Values: sqlDollar[3].union.exprs()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1187
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname()}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1191
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1198
		{
			unimplemented()
		}
	case 126:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1201
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1204
		{
			unimplemented()
		}
	case 129:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1211
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1215
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1223
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1229
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 135:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1233
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1237
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 137:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1241
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1245
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1251
		{
			sqlVAL.union.val = Low
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1255
		{
			sqlVAL.union.val = Normal
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1259
		{
			sqlVAL.union.val = High
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1265
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1269
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1273
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1288
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1292
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1296
		{
			d, err := ParseDInterval(sqlDollar[2].str)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1306
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1310
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1315
		{
			unimplemented()
		}
	case 153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1316
		{
			unimplemented()
		}
	case 154:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1317
		{
		}
	case 155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1321
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1325
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1331
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1335
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1339
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.qname()}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1343
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1347
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.strs()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1351
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1355
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1359
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1363
		{
			sqlVAL.union.val = &ShowTables{Name: sqlDollar[3].union.qname()}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1367
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1371
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1375
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1379
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 170:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1383
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.qname()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1389
		{
			sqlVAL.union.val = sqlDollar[2].union.qname()
		}
	case 172:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1393
		{
			sqlVAL.union.val = (*QualifiedName)(nil)
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1399
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 174:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1404
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1410
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 176:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1414
		{
			sqlVAL.union.val = []string(nil)
		}
	case 177:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1421
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.qname(), IfNotExists: false, Defs: sqlDollar[5].union.tblDefs()}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1425
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.qname(), IfNotExists: true, Defs: sqlDollar[8].union.tblDefs()}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1432
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1438
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1442
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1448
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1452
		{ /* unimplemented */
		}
	case 186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1454
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 187:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1460
		{
			sqlVAL.union.val = newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
		}
	case 188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1466
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 189:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1470
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 190:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1476
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1480
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1483
		{
			unimplemented()
		}
	case 193:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1499
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1503
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1507
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1511
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1515
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1519
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1523
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.qname(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1532
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.idxElems(),
				Storing: sqlDollar[6].union.strs(),
			}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1540
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:    Name(sqlDollar[3].str),
					Columns: sqlDollar[5].union.idxElems(),
					Storing: sqlDollar[7].union.strs(),
				},
			}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1552
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.famElems(),
			}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1564
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1569
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 205:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1575
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1581
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[3].union.strs()),
					Storing: sqlDollar[5].union.strs(),
				},
			}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1590
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[4].union.strs()),
				},
				PrimaryKey: true,
			}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1599
		{
			unimplemented()
		}
	case 211:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1616
		{
			sqlVAL.union.val = sqlDollar[3].union.strs()
		}
	case 212:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1620
		{
			sqlVAL.union.val = []string(nil)
		}
	case 213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1626
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 214:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1630
		{
			sqlVAL.union.val = []string(nil)
		}
	case 215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1635
		{
			unimplemented()
		}
	case 216:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1636
		{
			unimplemented()
		}
	case 217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1637
		{
			unimplemented()
		}
	case 218:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1638
		{
		}
	case 219:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1645
		{
			unimplemented()
		}
	case 220:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1646
		{
			unimplemented()
		}
	case 221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1647
		{
			unimplemented()
		}
	case 222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1648
		{
			unimplemented()
		}
	case 223:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1649
		{
		}
	case 224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1652
		{
			unimplemented()
		}
	case 225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1655
		{
			unimplemented()
		}
	case 226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1658
		{
			unimplemented()
		}
	case 227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1659
		{
			unimplemented()
		}
	case 228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1660
		{
			unimplemented()
		}
	case 229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1661
		{
			unimplemented()
		}
	case 230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1662
		{
			unimplemented()
		}
	case 231:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1666
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1670
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1674
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 234:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1681
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.qnames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1688
		{
			sqlVAL.union.val = &CreateIndex{
				Name:    Name(sqlDollar[4].str),
				Table:   sqlDollar[6].union.qname(),
				Unique:  sqlDollar[2].union.bool(),
				Columns: sqlDollar[8].union.idxElems(),
				Storing: sqlDollar[10].union.strs(),
			}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql.y:1698
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.qname(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.strs(),
			}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1711
		{
			sqlVAL.union.val = true
		}
	case 238:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1715
		{
			sqlVAL.union.val = false
		}
	case 239:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1721
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1725
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 241:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1734
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1737
		{
			unimplemented()
		}
	case 243:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1738
		{
			unimplemented()
		}
	case 244:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1742
		{
			sqlVAL.union.val = FamilyElemList{sqlDollar[1].union.famElem()}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1746
		{
			sqlVAL.union.val = append(sqlDollar[1].union.famElems(), sqlDollar[3].union.famElem())
		}
	case 246:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1752
		{
			sqlVAL.union.val = FamilyElem{Column: Name(sqlDollar[1].str)}
		}
	case 247:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1757
		{
			unimplemented()
		}
	case 248:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1758
		{
		}
	case 249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1762
		{
			sqlVAL.union.val = Ascending
		}
	case 250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1766
		{
			sqlVAL.union.val = Descending
		}
	case 251:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1770
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 252:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1777
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 253:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1781
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.qname(), NewName: sqlDollar[6].union.qname(), IfExists: false}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1785
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.qname(), NewName: sqlDollar[8].union.qname(), IfExists: true}
		}
	case 255:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1789
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1793
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1797
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.qname(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 258:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1801
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.qname(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 259:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1805
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 260:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1809
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 261:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1815
		{
			sqlVAL.union.val = true
		}
	case 262:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1819
		{
			sqlVAL.union.val = false
		}
	case 263:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1824
		{
		}
	case 264:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1825
		{
		}
	case 265:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1829
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1835
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1842
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1846
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 269:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1850
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1854
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1858
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1867
		{
		}
	case 273:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1868
		{
		}
	case 274:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1872
		{
			sqlVAL.str = ""
		}
	case 275:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1876
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 276:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1880
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 277:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1884
		{
			sqlVAL.str = ""
		}
	case 278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1890
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 279:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1894
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 280:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1900
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1904
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1908
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1912
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1916
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1922
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 286:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1928
		{
			sqlVAL.union.val = &CreateDatabase{Name: Name(sqlDollar[3].str), Encoding: sqlDollar[4].union.strVal()}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1932
		{
			sqlVAL.union.val = &CreateDatabase{IfNotExists: true, Name: Name(sqlDollar[6].str), Encoding: sqlDollar[7].union.strVal()}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1938
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1941
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 290:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1951
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retExprs()
		}
	case 291:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1957
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
		}
	case 292:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1962
		{
			unimplementedWithIssue(6637)
		}
	case 293:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1964
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1969
		{
			unimplementedWithIssue(6637)
		}
	case 295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1977
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname()}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1981
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1987
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1991
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.qnames(), Rows: sqlDollar[4].union.slct()}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1995
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2001
		{
			sqlVAL.union.val = &OnConflict{Columns: NameList(sqlDollar[3].union.strs()), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2005
		{
			sqlVAL.union.val = &OnConflict{Columns: NameList(sqlDollar[3].union.strs()), DoNothing: true}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2011
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 303:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2015
		{
			unimplemented()
		}
	case 304:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2017
		{
			sqlVAL.union.val = []string(nil)
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2023
		{
			sqlVAL.union.val = sqlDollar[2].union.selExprs()
		}
	case 306:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2027
		{
			sqlVAL.union.val = SelectExprs(nil)
		}
	case 307:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2034
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retExprs()}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2040
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2044
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 312:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2054
		{
			sqlVAL.union.val = &UpdateExpr{Names: QualifiedNames{sqlDollar[1].union.qname()}, Expr: sqlDollar[3].union.expr()}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2066
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.qnames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2070
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.qnames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2114
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2120
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2124
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2139
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2143
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2147
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2151
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2155
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2159
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2193
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.tblExprs(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2205
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.tblExprs(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2217
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        TableExprs{&AliasedTableExpr{Expr: sqlDollar[2].union.qname()}},
				tableSelect: true,
			}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2225
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2234
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2243
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2261
		{
			unimplemented()
		}
	case 335:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2262
		{
			unimplemented()
		}
	case 336:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2263
		{
			unimplemented()
		}
	case 337:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2266
		{
			unimplemented()
		}
	case 338:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2267
		{
			unimplemented()
		}
	case 339:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2270
		{
			unimplemented()
		}
	case 340:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2273
		{
			unimplemented()
		}
	case 341:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2274
		{
		}
	case 342:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2277
		{
		}
	case 343:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2278
		{
		}
	case 344:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2282
		{
			sqlVAL.union.val = true
		}
	case 345:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2286
		{
			sqlVAL.union.val = false
		}
	case 346:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2290
		{
			sqlVAL.union.val = false
		}
	case 347:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2296
		{
			sqlVAL.union.val = true
		}
	case 348:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2301
		{
		}
	case 349:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2302
		{
		}
	case 350:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2306
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 351:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2310
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 352:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2316
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 353:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2322
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2326
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2332
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2340
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2349
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 360:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2360
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2373
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2380
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2387
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 365:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2401
		{
		}
	case 366:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2402
		{
		}
	case 367:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2428
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 368:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2432
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2438
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 370:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2442
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2448
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2452
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2464
		{
			sqlVAL.union.val = sqlDollar[2].union.tblExprs()
		}
	case 374:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2468
		{
			sqlVAL.union.val = TableExprs(nil)
		}
	case 375:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2474
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2478
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2484
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 378:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2489
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2495
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 380:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2500
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			index := a.Index
			if index == "" {
				index = b.Index
			} else if b.Index != "" {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			noIndexJoin := a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = &IndexHints{Index: index, NoIndexJoin: noIndexJoin}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2520
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 382:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2524
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 383:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2528
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 384:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2535
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), Hints: sqlDollar[2].union.indexHints(), As: sqlDollar[3].union.aliasClause(), AsOf: sqlDollar[4].union.asOfClause()}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2539
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, As: sqlDollar[2].union.aliasClause()}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2542
		{ /* SKIP DOC */
		}
	case 387:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2543
		{
			unimplemented()
		}
	case 388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2561
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2565
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2569
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2573
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2577
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astNaturalJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr()}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2581
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astNaturalJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2587
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: NameList(sqlDollar[4].union.strs())}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2591
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2595
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: NameList(sqlDollar[3].union.strs())}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2599
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2606
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2612
		{
			sqlVAL.union.val = AsOfClause{Expr: &StrVal{s: sqlDollar[5].str}}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2616
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2622
		{
			sqlVAL.str = astFullJoin
		}
	case 403:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2626
		{
			sqlVAL.str = astLeftJoin
		}
	case 404:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2630
		{
			sqlVAL.str = astRightJoin
		}
	case 405:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2634
		{
			sqlVAL.str = astInnerJoin
		}
	case 406:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2640
		{
		}
	case 407:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2641
		{
		}
	case 408:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2652
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: NameList(sqlDollar[3].union.strs())}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2656
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2662
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 411:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2666
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 412:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2670
		{
			sqlVAL.union.val = sqlDollar[2].union.qname()
		}
	case 413:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2674
		{
			sqlVAL.union.val = sqlDollar[3].union.qname()
		}
	case 414:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2680
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2684
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 416:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2697
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname()}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2701
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2705
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2711
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 420:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2715
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 421:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2727
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 422:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2731
		{
			unimplementedWithIssue(2115)
		}
	case 423:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2732
		{
			unimplementedWithIssue(2115)
		}
	case 424:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2735
		{
			unimplementedWithIssue(2115)
		}
	case 425:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2736
		{
			unimplementedWithIssue(2115)
		}
	case 426:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2737
		{
		}
	case 432:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2745
		{
			unimplemented()
		}
	case 433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2747
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2751
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2755
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2759
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2763
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2767
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 439:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2771
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 444:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2792
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2801
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2815
		{
			sqlVAL.union.val = nil
		}
	case 447:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2822
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 448:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2826
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 449:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2830
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 450:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2834
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 451:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2838
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 452:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2842
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 453:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2846
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newFloatColType(int(prec))
		}
	case 454:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2855
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 455:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2859
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2868
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2877
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2886
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 459:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2890
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 460:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2896
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 461:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2900
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2918
		{
			n, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newIntBitType(int(n))
		}
	case 467:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2929
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 472:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2945
		{
			n, err := sqlDollar[3].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2961
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 474:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2967
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 475:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2971
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 476:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2975
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 477:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2979
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 478:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2984
		{
		}
	case 479:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2985
		{
		}
	case 480:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2990
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 481:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2994
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 482:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2998
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 483:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3002
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 484:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3006
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 485:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3011
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 486:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3016
		{
			unimplemented()
		}
	case 487:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3017
		{
			unimplemented()
		}
	case 488:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3018
		{
			unimplemented()
		}
	case 489:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3019
		{
			unimplemented()
		}
	case 490:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3020
		{
			unimplemented()
		}
	case 491:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3021
		{
			unimplemented()
		}
	case 492:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3022
		{
			unimplemented()
		}
	case 493:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3023
		{
			unimplemented()
		}
	case 494:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3024
		{
			unimplemented()
		}
	case 495:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3025
		{
			unimplemented()
		}
	case 496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3026
		{
			unimplemented()
		}
	case 497:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3027
		{
			unimplemented()
		}
	case 498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3028
		{
			unimplemented()
		}
	case 499:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3029
		{
		}
	case 500:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3032
		{
			unimplemented()
		}
	case 501:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3033
		{
			unimplemented()
		}
	case 503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3057
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3060
		{
			unimplemented()
		}
	case 505:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3061
		{
			unimplemented()
		}
	case 506:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3070
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3074
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3078
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3082
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3086
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3090
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3094
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3098
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3102
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3106
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3110
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3114
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3118
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3122
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3126
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3130
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3134
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3138
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3142
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3146
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3150
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3154
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3158
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3162
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3166
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3170
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3174
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3178
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3182
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3186
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3190
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3194
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3197
		{
			unimplemented()
		}
	case 539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3199
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3203
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3207
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3211
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3215
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3219
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3223
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3227
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3231
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3235
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3239
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3243
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3247
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3251
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3255
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3259
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3276
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3280
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3284
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3288
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3292
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3296
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3300
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3304
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3308
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3312
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3316
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3320
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3324
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3328
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3332
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3336
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3340
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3344
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3348
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3352
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3356
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3360
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3364
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3368
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3372
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3376
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3380
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3392
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 585:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3397
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3401
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3407
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3411
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3415
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3421
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 593:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3425
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 594:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3429
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 595:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3437
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname()}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3441
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3444
		{
			unimplemented()
		}
	case 598:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3445
		{
			unimplemented()
		}
	case 599:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3447
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Type: All, Exprs: sqlDollar[4].union.exprs()}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3451
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Type: Distinct, Exprs: sqlDollar[4].union.exprs()}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3455
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Exprs: Exprs{StarExpr()}}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3468
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 603:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3472
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 604:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3481
		{
			unimplemented()
		}
	case 605:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3482
		{
			unimplemented()
		}
	case 606:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3486
		{
			unimplemented()
		}
	case 607:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3488
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3492
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3496
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3500
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3503
		{
			unimplemented()
		}
	case 612:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3504
		{
			unimplemented()
		}
	case 613:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3505
		{
			unimplemented()
		}
	case 614:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3506
		{
			unimplemented()
		}
	case 615:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3508
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3512
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3516
		{
			sqlVAL.union.val = &OverlayExpr{FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3520
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "STRPOS"}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3524
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3527
		{
			unimplemented()
		}
	case 621:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3529
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3533
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "LTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3537
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "RTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3541
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3545
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3549
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3553
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3557
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3561
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3565
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3571
		{
			unimplemented()
		}
	case 632:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3572
		{
		}
	case 633:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3575
		{
			unimplemented()
		}
	case 634:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3576
		{
		}
	case 635:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3580
		{
			unimplemented()
		}
	case 636:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3581
		{
		}
	case 637:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3584
		{
			unimplemented()
		}
	case 638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3585
		{
			unimplemented()
		}
	case 639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3588
		{
			unimplemented()
		}
	case 640:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3591
		{
			unimplemented()
		}
	case 641:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3592
		{
			unimplemented()
		}
	case 642:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3593
		{
		}
	case 643:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3597
		{
			unimplemented()
		}
	case 644:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3608
		{
			unimplemented()
		}
	case 645:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3609
		{
		}
	case 646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3612
		{
			unimplemented()
		}
	case 647:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3613
		{
		}
	case 648:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3621
		{
			unimplemented()
		}
	case 649:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3622
		{
			unimplemented()
		}
	case 650:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3623
		{
		}
	case 651:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3626
		{
			unimplemented()
		}
	case 652:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3627
		{
			unimplemented()
		}
	case 653:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3633
		{
			unimplemented()
		}
	case 654:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3634
		{
			unimplemented()
		}
	case 655:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3635
		{
			unimplemented()
		}
	case 656:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3636
		{
			unimplemented()
		}
	case 657:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3637
		{
			unimplemented()
		}
	case 658:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3648
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3652
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3656
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3662
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3666
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3672
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3713
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3717
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 666:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3723
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3727
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 668:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3733
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3737
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3741
		{
			sqlVAL.union.val = &Array{nil}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3747
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3751
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 673:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3757
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3779
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3783
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3789
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 684:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3796
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3800
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 686:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3817
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3821
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3825
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3829
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3833
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 691:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3837
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 692:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3843
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 693:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3849
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 694:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3855
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 695:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3859
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 696:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3863
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 697:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3869
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3873
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3884
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3891
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3895
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 702:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3901
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3907
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 704:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3911
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 706:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3918
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 707:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3924
		{
			sqlVAL.union.val = sqlDollar[1].union.indirectElem()
		}
	case 708:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3928
		{
			sqlVAL.union.val = sqlDollar[1].union.indirectElem()
		}
	case 709:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3932
		{
			sqlVAL.union.val = &ArrayIndirection{Begin: sqlDollar[2].union.expr()}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3936
		{
			sqlVAL.union.val = &ArrayIndirection{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr()}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3942
		{
			sqlVAL.union.val = NameIndirection(sqlDollar[2].str)
		}
	case 712:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3948
		{
			sqlVAL.union.val = qualifiedStar
		}
	case 713:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3954
		{
			sqlVAL.union.val = Indirection{sqlDollar[1].union.indirectElem()}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3958
		{
			sqlVAL.union.val = append(sqlDollar[1].union.indirect(), sqlDollar[2].union.indirectElem())
		}
	case 715:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3963
		{
		}
	case 716:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3964
		{
		}
	case 718:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3973
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3979
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3983
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 721:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3992
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 722:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3998
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4002
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 724:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4008
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4017
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4021
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4025
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 728:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4033
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4037
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 730:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4043
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4047
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 732:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4053
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4057
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 734:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4068
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4072
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4078
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.qname(), Index: Name(sqlDollar[3].str)}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4089
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4093
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: Indirection{sqlDollar[2].union.indirectElem()}}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4097
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: Indirection{sqlDollar[2].union.indirectElem()}}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4101
		{
			sqlVAL.union.val = &QualifiedName{Indirect: Indirection{unqualifiedStar}}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4107
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4111
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 743:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4117
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 744:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4120
		{
		}
	case 745:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4130
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4134
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4141
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 748:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4145
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 749:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4149
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4153
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4156
		{
			unimplemented()
		}
	case 752:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4158
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4162
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4166
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[5].str}, Type: sqlDollar[1].union.colType()}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4170
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 756:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4174
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 757:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4178
		{
			sqlVAL.union.val = DNull
		}
	case 759:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4185
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 760:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4189
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4211
		{
			sqlVAL.str = ""
		}
	case 766:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4217
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 767:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4221
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
