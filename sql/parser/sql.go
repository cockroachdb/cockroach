// Code generated by go yacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"go/constant"
	"go/token"

	"github.com/pkg/errors"

	"github.com/cockroachdb/cockroach/sql/privilege"
	"github.com/cockroachdb/cockroach/util"
)

var errUnimplemented = errors.New("unimplemented")

func unimplemented() {
	panic(errUnimplemented)
}

func unimplementedWithIssue(issue int) {
	panic(util.UnimplementedWithIssueErrorf(issue, ""))
}

//line sql.y:44

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new sytax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in two forms, depending on the
// type of the value being accessed. Values and pointers are directly
// type asserted from the empty interface, meaning that they will panic
// if the type assertion is incorrect. Interfaces are handled differently
// because a nil instance of an interface inserted into the empty interface
// becomes a nil instance of the empty interface and therefore will fail a
// direct type assertion. Instead, a guarded type assertion must be used,
// which returns nil if the type assertion fails.
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	return u.val.(*StrVal)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	if namePart, ok := u.val.(NamePart); ok {
		return namePart
	}
	return nil
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionName() FunctionName {
	return u.val.(FunctionName)
}
func (u *sqlSymUnion) normalizableFunctionName() NormalizableFunctionName {
	return NormalizableFunctionName{u.val.(FunctionName)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	if selectStmt, ok := u.val.(*Select); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	if selectStmt, ok := u.val.(SelectStatement); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	if constraintDef, ok := u.val.(ConstraintTableDef); ok {
		return constraintDef
	}
	return nil
}
func (u *sqlSymUnion) tblDef() TableDef {
	if tblDef, ok := u.val.(TableDef); ok {
		return tblDef
	}
	return nil
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	if colQual, ok := u.val.(NamedColumnQualification); ok {
		return colQual
	}
	return NamedColumnQualification{}
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	if colQual, ok := u.val.(ColumnQualification); ok {
		return colQual
	}
	return nil
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retExprs() ReturningExprs {
	return ReturningExprs(u.val.(SelectExprs))
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	if tblExpr, ok := u.val.(TableExpr); ok {
		return tblExpr
	}
	return nil
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	if joinCond, ok := u.val.(JoinCond); ok {
		return joinCond
	}
	return nil
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	if alterTableCmd, ok := u.val.(AlterTableCmd); ok {
		return alterTableCmd
	}
	return nil
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}

//line sql.y:309
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const DOT_DOT = 57353
const LESS_EQUALS = 57354
const GREATER_EQUALS = 57355
const NOT_EQUALS = 57356
const NOT_REGMATCH = 57357
const REGIMATCH = 57358
const NOT_REGIMATCH = 57359
const ERROR = 57360
const ACTION = 57361
const ADD = 57362
const ALL = 57363
const ALTER = 57364
const ANALYSE = 57365
const ANALYZE = 57366
const AND = 57367
const ANY = 57368
const ANNOTATE_TYPE = 57369
const ARRAY = 57370
const AS = 57371
const ASC = 57372
const ASYMMETRIC = 57373
const AT = 57374
const BEGIN = 57375
const BETWEEN = 57376
const BIGINT = 57377
const BIGSERIAL = 57378
const BIT = 57379
const BLOB = 57380
const BOOL = 57381
const BOOLEAN = 57382
const BOTH = 57383
const BY = 57384
const BYTEA = 57385
const BYTES = 57386
const CASCADE = 57387
const CASE = 57388
const CAST = 57389
const CHAR = 57390
const CHARACTER = 57391
const CHARACTERISTICS = 57392
const CHECK = 57393
const COALESCE = 57394
const COLLATE = 57395
const COLLATION = 57396
const COLUMN = 57397
const COLUMNS = 57398
const COMMIT = 57399
const COMMITTED = 57400
const CONCAT = 57401
const CONFLICT = 57402
const CONSTRAINT = 57403
const CONSTRAINTS = 57404
const COVERING = 57405
const CREATE = 57406
const CROSS = 57407
const CUBE = 57408
const CURRENT = 57409
const CURRENT_CATALOG = 57410
const CURRENT_DATE = 57411
const CURRENT_ROLE = 57412
const CURRENT_TIME = 57413
const CURRENT_TIMESTAMP = 57414
const CURRENT_USER = 57415
const CYCLE = 57416
const DATA = 57417
const DATABASE = 57418
const DATABASES = 57419
const DATE = 57420
const DAY = 57421
const DEC = 57422
const DECIMAL = 57423
const DEFAULT = 57424
const DEALLOCATE = 57425
const DEFERRABLE = 57426
const DELETE = 57427
const DESC = 57428
const DISTINCT = 57429
const DO = 57430
const DOUBLE = 57431
const DROP = 57432
const ELSE = 57433
const ENCODING = 57434
const END = 57435
const ESCAPE = 57436
const EXCEPT = 57437
const EXISTS = 57438
const EXECUTE = 57439
const EXPLAIN = 57440
const EXTRACT = 57441
const FALSE = 57442
const FAMILY = 57443
const FETCH = 57444
const FILTER = 57445
const FIRST = 57446
const FLOAT = 57447
const FLOORDIV = 57448
const FOLLOWING = 57449
const FOR = 57450
const FORCE_INDEX = 57451
const FOREIGN = 57452
const FROM = 57453
const FULL = 57454
const GRANT = 57455
const GRANTS = 57456
const GREATEST = 57457
const GROUP = 57458
const GROUPING = 57459
const HAVING = 57460
const HIGH = 57461
const HOUR = 57462
const IF = 57463
const IFNULL = 57464
const ILIKE = 57465
const IN = 57466
const INTERLEAVE = 57467
const INDEX = 57468
const INDEXES = 57469
const INITIALLY = 57470
const INNER = 57471
const INSERT = 57472
const INT = 57473
const INT8 = 57474
const INT64 = 57475
const INTEGER = 57476
const INTERSECT = 57477
const INTERVAL = 57478
const INTO = 57479
const IS = 57480
const ISOLATION = 57481
const JOIN = 57482
const KEY = 57483
const KEYS = 57484
const LATERAL = 57485
const LEADING = 57486
const LEAST = 57487
const LEFT = 57488
const LEVEL = 57489
const LIKE = 57490
const LIMIT = 57491
const LOCAL = 57492
const LOCALTIME = 57493
const LOCALTIMESTAMP = 57494
const LOW = 57495
const LSHIFT = 57496
const MATCH = 57497
const MINUTE = 57498
const MONTH = 57499
const NAME = 57500
const NAMES = 57501
const NATURAL = 57502
const NEXT = 57503
const NO = 57504
const NO_INDEX_JOIN = 57505
const NORMAL = 57506
const NOT = 57507
const NOTHING = 57508
const NULL = 57509
const NULLIF = 57510
const NULLS = 57511
const NUMERIC = 57512
const OF = 57513
const OFF = 57514
const OFFSET = 57515
const ON = 57516
const ONLY = 57517
const OR = 57518
const ORDER = 57519
const ORDINALITY = 57520
const OUT = 57521
const OUTER = 57522
const OVER = 57523
const OVERLAPS = 57524
const OVERLAY = 57525
const PARENT = 57526
const PARTIAL = 57527
const PARTITION = 57528
const PLACING = 57529
const POSITION = 57530
const PRECEDING = 57531
const PRECISION = 57532
const PREPARE = 57533
const PRIMARY = 57534
const PRIORITY = 57535
const RANGE = 57536
const READ = 57537
const REAL = 57538
const RECURSIVE = 57539
const REF = 57540
const REFERENCES = 57541
const RENAME = 57542
const REPEATABLE = 57543
const RELEASE = 57544
const RESTRICT = 57545
const RETURNING = 57546
const REVOKE = 57547
const RIGHT = 57548
const ROLLBACK = 57549
const ROLLUP = 57550
const ROW = 57551
const ROWS = 57552
const RSHIFT = 57553
const SAVEPOINT = 57554
const SEARCH = 57555
const SECOND = 57556
const SELECT = 57557
const SERIAL = 57558
const SERIALIZABLE = 57559
const SESSION = 57560
const SESSION_USER = 57561
const SET = 57562
const SHOW = 57563
const SIMILAR = 57564
const SIMPLE = 57565
const SMALLINT = 57566
const SMALLSERIAL = 57567
const SNAPSHOT = 57568
const SOME = 57569
const SPLIT = 57570
const SQL = 57571
const START = 57572
const STRICT = 57573
const STRING = 57574
const STORING = 57575
const SUBSTRING = 57576
const SYMMETRIC = 57577
const SYSTEM = 57578
const TABLE = 57579
const TABLES = 57580
const TEXT = 57581
const THEN = 57582
const TIME = 57583
const TIMESTAMP = 57584
const TIMESTAMPTZ = 57585
const TO = 57586
const TRAILING = 57587
const TRANSACTION = 57588
const TREAT = 57589
const TRIM = 57590
const TRUE = 57591
const TRUNCATE = 57592
const TYPE = 57593
const UNBOUNDED = 57594
const UNCOMMITTED = 57595
const UNION = 57596
const UNIQUE = 57597
const UNKNOWN = 57598
const UPDATE = 57599
const UPSERT = 57600
const USER = 57601
const USING = 57602
const VALID = 57603
const VALIDATE = 57604
const VALUE = 57605
const VALUES = 57606
const VARCHAR = 57607
const VARIADIC = 57608
const VARYING = 57609
const WHEN = 57610
const WHERE = 57611
const WINDOW = 57612
const WITH = 57613
const WITHIN = 57614
const WITHOUT = 57615
const YEAR = 57616
const ZONE = 57617
const NOT_LA = 57618
const WITH_LA = 57619
const AS_LA = 57620
const POSTFIXOP = 57621
const UMINUS = 57622

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPLAIN",
	"EXTRACT",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HOUR",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:4701

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 25,
	299, 25,
	-2, 358,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 40,
	1, 333,
	174, 333,
	204, 333,
	297, 333,
	299, 333,
	-2, 343,
	-1, 54,
	1, 336,
	174, 336,
	204, 336,
	297, 336,
	299, 336,
	-2, 342,
	-1, 63,
	1, 25,
	299, 25,
	-2, 358,
	-1, 276,
	1, 163,
	299, 163,
	-2, 853,
	-1, 311,
	149, 368,
	173, 368,
	-2, 339,
	-1, 314,
	149, 367,
	173, 367,
	-2, 337,
	-1, 442,
	149, 367,
	173, 367,
	-2, 340,
	-1, 498,
	296, 793,
	-2, 786,
	-1, 499,
	296, 794,
	-2, 787,
	-1, 505,
	5, 503,
	296, 503,
	-2, 942,
	-1, 528,
	5, 469,
	-2, 917,
	-1, 529,
	5, 497,
	296, 497,
	-2, 919,
	-1, 530,
	5, 477,
	-2, 920,
	-1, 531,
	5, 476,
	-2, 921,
	-1, 532,
	5, 497,
	296, 497,
	-2, 924,
	-1, 533,
	5, 497,
	296, 497,
	-2, 925,
	-1, 534,
	5, 498,
	-2, 928,
	-1, 535,
	5, 463,
	-2, 929,
	-1, 536,
	5, 463,
	-2, 930,
	-1, 537,
	5, 479,
	-2, 933,
	-1, 538,
	5, 464,
	-2, 938,
	-1, 539,
	5, 465,
	-2, 939,
	-1, 540,
	5, 466,
	-2, 940,
	-1, 541,
	5, 467,
	-2, 941,
	-1, 542,
	5, 463,
	-2, 945,
	-1, 543,
	5, 470,
	-2, 950,
	-1, 544,
	5, 468,
	-2, 953,
	-1, 545,
	5, 495,
	296, 495,
	-2, 955,
	-1, 546,
	5, 499,
	-2, 958,
	-1, 547,
	5, 501,
	-2, 959,
	-1, 548,
	5, 494,
	296, 494,
	-2, 963,
	-1, 867,
	95, 343,
	135, 343,
	149, 343,
	173, 343,
	177, 343,
	254, 343,
	-2, 613,
	-1, 875,
	296, 771,
	-2, 760,
	-1, 1064,
	12, 0,
	13, 0,
	14, 0,
	279, 0,
	280, 0,
	281, 0,
	-2, 537,
	-1, 1065,
	12, 0,
	13, 0,
	14, 0,
	279, 0,
	280, 0,
	281, 0,
	-2, 538,
	-1, 1066,
	12, 0,
	13, 0,
	14, 0,
	279, 0,
	280, 0,
	281, 0,
	-2, 539,
	-1, 1070,
	12, 0,
	13, 0,
	14, 0,
	279, 0,
	280, 0,
	281, 0,
	-2, 543,
	-1, 1071,
	12, 0,
	13, 0,
	14, 0,
	279, 0,
	280, 0,
	281, 0,
	-2, 544,
	-1, 1072,
	12, 0,
	13, 0,
	14, 0,
	279, 0,
	280, 0,
	281, 0,
	-2, 545,
	-1, 1075,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	148, 0,
	222, 0,
	276, 0,
	-2, 550,
	-1, 1081,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	148, 0,
	222, 0,
	276, 0,
	-2, 552,
	-1, 1084,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	148, 0,
	222, 0,
	276, 0,
	-2, 557,
	-1, 1085,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	148, 0,
	222, 0,
	276, 0,
	-2, 558,
	-1, 1086,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	148, 0,
	222, 0,
	276, 0,
	-2, 559,
	-1, 1111,
	182, 684,
	-2, 687,
	-1, 1273,
	95, 343,
	135, 343,
	149, 343,
	173, 343,
	177, 343,
	254, 343,
	-2, 416,
	-1, 1277,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	148, 0,
	222, 0,
	276, 0,
	-2, 551,
	-1, 1278,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	148, 0,
	222, 0,
	276, 0,
	-2, 553,
	-1, 1283,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	148, 0,
	222, 0,
	276, 0,
	-2, 554,
	-1, 1301,
	182, 683,
	-2, 686,
	-1, 1460,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	148, 0,
	222, 0,
	276, 0,
	-2, 555,
	-1, 1465,
	138, 0,
	-2, 569,
	-1, 1473,
	182, 685,
	-2, 688,
	-1, 1506,
	12, 0,
	13, 0,
	14, 0,
	279, 0,
	280, 0,
	281, 0,
	-2, 594,
	-1, 1507,
	12, 0,
	13, 0,
	14, 0,
	279, 0,
	280, 0,
	281, 0,
	-2, 595,
	-1, 1508,
	12, 0,
	13, 0,
	14, 0,
	279, 0,
	280, 0,
	281, 0,
	-2, 596,
	-1, 1512,
	12, 0,
	13, 0,
	14, 0,
	279, 0,
	280, 0,
	281, 0,
	-2, 600,
	-1, 1513,
	12, 0,
	13, 0,
	14, 0,
	279, 0,
	280, 0,
	281, 0,
	-2, 601,
	-1, 1514,
	12, 0,
	13, 0,
	14, 0,
	279, 0,
	280, 0,
	281, 0,
	-2, 602,
	-1, 1617,
	138, 0,
	-2, 570,
	-1, 1620,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	148, 0,
	222, 0,
	276, 0,
	-2, 573,
	-1, 1621,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	148, 0,
	222, 0,
	276, 0,
	-2, 575,
	-1, 1707,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	148, 0,
	222, 0,
	276, 0,
	-2, 574,
	-1, 1708,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	148, 0,
	222, 0,
	276, 0,
	-2, 576,
	-1, 1715,
	138, 0,
	-2, 603,
	-1, 1760,
	138, 0,
	-2, 604,
	-1, 1813,
	34, 0,
	123, 0,
	148, 0,
	222, 0,
	276, 0,
	-2, 916,
}

const sqlNprod = 1057
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 23971

var sqlAct = [...]int{

	499, 1812, 584, 1427, 1792, 1766, 1660, 1793, 945, 1836,
	1794, 1811, 953, 1484, 1037, 1695, 1609, 424, 1582, 1683,
	819, 597, 1603, 315, 1583, 598, 870, 1543, 491, 1596,
	687, 497, 496, 489, 87, 87, 87, 797, 1356, 87,
	336, 1270, 87, 88, 39, 87, 1020, 1439, 461, 1355,
	800, 87, 1304, 954, 549, 1019, 1017, 872, 87, 87,
	984, 1449, 87, 1046, 1269, 87, 87, 87, 561, 277,
	564, 87, 87, 87, 87, 1260, 362, 1045, 930, 1254,
	921, 1157, 1121, 1201, 1097, 1049, 1094, 968, 661, 471,
	815, 430, 566, 1010, 645, 462, 977, 1047, 1207, 431,
	642, 320, 425, 426, 17, 322, 53, 24, 314, 672,
	906, 359, 947, 13, 6, 8, 7, 1023, 902, 363,
	320, 355, 5, 4, 821, 74, 445, 325, 274, 264,
	364, 352, 446, 444, 641, 663, 255, 76, 53, 577,
	81, 323, 348, 357, 586, 551, 80, 82, 83, 78,
	354, 54, 659, 55, 472, 77, 79, 1702, 946, 333,
	1703, 449, 339, 319, 1843, 586, 586, 1041, 349, 53,
	981, 1828, 1809, 1800, 1041, 1682, 1041, 1299, 1790, 1160,
	304, 974, 1300, 1785, 1762, 360, 1041, 974, 1756, 1213,
	1746, 1041, 1736, 1682, 1709, 1041, 59, 974, 1706, 294,
	327, 1041, 1258, 1692, 319, 312, 1682, 311, 1268, 1690,
	1681, 982, 1041, 1682, 550, 84, 334, 342, 61, 334,
	1665, 344, 575, 1041, 1257, 334, 1664, 344, 1642, 1041,
	1622, 987, 1619, 987, 1555, 974, 1469, 1041, 824, 987,
	1412, 1405, 1214, 1406, 1406, 62, 1373, 983, 980, 1374,
	1298, 87, 57, 824, 987, 987, 504, 52, 58, 1371,
	826, 1370, 987, 1750, 987, 1369, 87, 822, 987, 87,
	87, 1301, 1257, 1042, 987, 826, 1041, 56, 824, 996,
	823, 825, 987, 31, 986, 973, 1303, 987, 974, 918,
	592, 32, 917, 593, 1519, 1472, 825, 1239, 919, 1242,
	826, 1041, 587, 989, 87, 985, 87, 1105, 87, 427,
	87, 1036, 456, 428, 1004, 1573, 457, 790, 789, 653,
	652, 825, 423, 587, 587, 87, 1685, 987, 388, 332,
	63, 428, 824, 427, 831, 443, 87, 428, 686, 429,
	408, 1810, 1807, 1799, 59, 1757, 87, 87, 87, 831,
	87, 1691, 1647, 1643, 826, 1635, 1634, 1633, 589, 1628,
	1627, 1626, 1580, 396, 442, 979, 61, 1534, 1529, 1528,
	1527, 397, 1475, 556, 831, 825, 1458, 437, 555, 1438,
	1416, 87, 841, 1378, 1375, 1363, 1354, 978, 87, 1434,
	87, 1326, 1323, 62, 1321, 1309, 1802, 841, 1308, 590,
	1244, 362, 362, 436, 1241, 1174, 1128, 1127, 59, 689,
	87, 604, 87, 87, 87, 87, 87, 87, 87, 1102,
	585, 793, 87, 795, 456, 56, 873, 455, 831, 689,
	61, 1213, 682, 434, 87, 1486, 1776, 1572, 792, 842,
	87, 785, 878, 349, 363, 363, 1749, 1728, 1726, 1717,
	1699, 1688, 690, 1679, 842, 364, 364, 62, 87, 787,
	334, 87, 1657, 691, 57, 1414, 458, 1640, 1612, 822,
	58, 1590, 690, 1464, 312, 1457, 311, 1435, 594, 452,
	453, 1432, 1430, 691, 1389, 1388, 1353, 579, 576, 56,
	558, 1317, 1327, 1316, 1295, 1291, 1099, 553, 1228, 1186,
	334, 578, 578, 1185, 1167, 1126, 1103, 1040, 907, 910,
	914, 875, 833, 834, 835, 827, 828, 829, 830, 832,
	320, 852, 900, 899, 649, 648, 824, 898, 627, 835,
	827, 828, 829, 830, 832, 334, 852, 897, 772, 683,
	896, 776, 777, 778, 779, 780, 775, 895, 826, 894,
	783, 893, 892, 891, 676, 827, 828, 829, 830, 832,
	87, 852, 890, 791, 639, 889, 84, 427, 87, 825,
	1186, 428, 87, 805, 651, 87, 87, 803, 804, 888,
	887, 87, 886, 87, 87, 817, 87, 824, 1332, 87,
	885, 87, 87, 876, 362, 1327, 874, 626, 824, 56,
	337, 312, 784, 811, 312, 312, 812, 813, 52, 826,
	460, 829, 830, 832, 924, 852, 394, 384, 1222, 382,
	826, 824, 831, 1579, 1578, 1221, 552, 557, 402, 1704,
	825, 1577, 824, 824, 31, 1215, 1342, 363, 432, 603,
	1031, 825, 32, 1377, 87, 87, 1376, 908, 364, 935,
	937, 904, 905, 911, 826, 869, 1433, 1276, 912, 418,
	963, 357, 913, 950, 825, 991, 403, 883, 1597, 940,
	841, 946, 1487, 1122, 1312, 825, 1133, 903, 1209, 1772,
	915, 840, 948, 831, 948, 927, 567, 689, 568, 1735,
	794, 1332, 952, 1343, 267, 1823, 1563, 76, 53, 1824,
	81, 969, 53, 360, 971, 966, 80, 82, 83, 78,
	970, 972, 67, 964, 916, 77, 79, 1009, 965, 567,
	962, 568, 309, 995, 297, 943, 334, 842, 831, 344,
	690, 841, 908, 879, 911, 957, 961, 298, 1327, 1235,
	344, 691, 1673, 344, 990, 998, 567, 501, 568, 992,
	993, 1136, 997, 1413, 905, 904, 569, 68, 303, 59,
	302, 400, 1672, 1401, 1381, 1337, 1334, 1335, 1336, 1328,
	1329, 1330, 1331, 1333, 318, 87, 841, 923, 1380, 1279,
	1734, 61, 1227, 1400, 981, 923, 1226, 1225, 842, 569,
	465, 922, 1137, 1224, 87, 87, 59, 1082, 401, 836,
	833, 834, 835, 827, 828, 829, 830, 832, 62, 852,
	931, 988, 942, 941, 317, 57, 569, 1143, 61, 433,
	1697, 58, 1096, 1171, 87, 982, 87, 1170, 1138, 1135,
	1043, 1053, 421, 842, 1332, 380, 306, 71, 1600, 1096,
	75, 1839, 1391, 1662, 1774, 62, 580, 65, 985, 1833,
	1051, 1122, 57, 604, 1034, 1035, 319, 586, 58, 1421,
	689, 983, 980, 1787, 827, 828, 829, 830, 832, 934,
	852, 1823, 1328, 1329, 1330, 1331, 1333, 949, 1202, 1788,
	629, 852, 1015, 307, 70, 69, 1139, 72, 785, 1014,
	1100, 1016, 1403, 785, 1211, 1052, 1327, 66, 1200, 1197,
	1027, 310, 573, 690, 852, 836, 833, 834, 835, 827,
	828, 829, 830, 832, 691, 852, 852, 985, 1044, 985,
	572, 87, 87, 87, 1173, 399, 565, 87, 570, 1259,
	87, 1109, 1206, 316, 1234, 1729, 87, 87, 87, 87,
	87, 1418, 87, 87, 1236, 1341, 1134, 1796, 334, 1000,
	87, 933, 87, 398, 1183, 1002, 1101, 604, 1837, 87,
	901, 570, 1202, 391, 393, 1217, 1398, 1218, 87, 419,
	627, 1003, 1392, 1181, 920, 1118, 1263, 1419, 334, 979,
	1001, 1832, 1680, 1713, 866, 1315, 1175, 1450, 570, 87,
	87, 1795, 1332, 1266, 320, 87, 319, 1822, 73, 1838,
	1220, 1820, 1595, 604, 1261, 362, 1029, 399, 64, 628,
	1264, 1196, 1176, 1663, 932, 587, 1840, 1330, 1331, 1333,
	1797, 1079, 447, 420, 1262, 87, 1281, 87, 411, 87,
	87, 1204, 389, 87, 387, 985, 448, 1092, 1605, 626,
	1342, 1443, 87, 1095, 1667, 1666, 448, 1638, 363, 87,
	1090, 87, 1655, 1106, 1110, 1723, 1113, 1216, 1798, 364,
	1383, 1180, 1243, 1831, 1245, 1219, 1263, 484, 1030, 802,
	1265, 1849, 1152, 1288, 627, 1177, 1551, 796, 1164, 1165,
	1166, 603, 1230, 1266, 1231, 1559, 1286, 1233, 1232, 1562,
	1417, 1767, 447, 1237, 1448, 320, 1561, 1343, 1246, 782,
	1264, 85, 248, 249, 1208, 1238, 266, 1552, 1610, 278,
	1077, 1080, 295, 1208, 1275, 1088, 1515, 1087, 266, 654,
	627, 1093, 334, 1656, 1604, 326, 326, 1251, 1252, 295,
	600, 1639, 295, 341, 295, 1076, 1274, 1302, 295, 350,
	295, 278, 1188, 626, 320, 969, 53, 1187, 971, 1606,
	1445, 1444, 398, 1284, 970, 972, 1848, 1289, 347, 346,
	1265, 317, 1611, 1327, 439, 1282, 1280, 658, 1558, 1337,
	1334, 1335, 1336, 1328, 1329, 1330, 1331, 1333, 1428, 1560,
	1581, 1440, 1653, 1255, 1247, 603, 1125, 87, 1716, 626,
	1547, 1637, 1548, 320, 1516, 1395, 1357, 1397, 1463, 1089,
	1517, 656, 1654, 1311, 1322, 334, 1091, 1387, 1290, 1078,
	994, 417, 657, 416, 87, 87, 415, 1550, 1327, 681,
	680, 1408, 674, 669, 1553, 414, 413, 412, 409, 345,
	1358, 603, 884, 774, 1124, 1285, 1360, 1361, 1362, 810,
	87, 1791, 1287, 87, 1764, 87, 1540, 1396, 1394, 87,
	1382, 1402, 1248, 1379, 1032, 1028, 967, 591, 87, 1332,
	1407, 588, 87, 1385, 583, 574, 571, 1409, 87, 689,
	1481, 801, 87, 1674, 87, 450, 330, 1824, 1399, 1294,
	1549, 678, 1431, 1296, 1411, 1676, 1420, 1422, 1423, 405,
	1196, 1038, 1410, 3, 923, 1306, 1307, 684, 1429, 1454,
	938, 1437, 923, 939, 1404, 1685, 1731, 1342, 936, 1759,
	1441, 296, 690, 1466, 1332, 454, 87, 252, 385, 422,
	604, 1442, 629, 691, 1751, 1446, 1451, 1452, 1352, 1477,
	1478, 1479, 1453, 390, 951, 818, 278, 278, 1447, 1365,
	650, 451, 331, 596, 976, 1490, 1491, 1039, 604, 604,
	1846, 633, 1847, 1495, 1327, 263, 604, 338, 1474, 299,
	300, 824, 1342, 1535, 1343, 685, 406, 1424, 957, 334,
	1488, 266, 256, 295, 1493, 278, 1415, 440, 1006, 1005,
	1372, 87, 87, 87, 1223, 1526, 1172, 1169, 604, 87,
	87, 1168, 326, 261, 1522, 87, 1119, 87, 257, 87,
	87, 87, 87, 295, 640, 1007, 1523, 87, 1752, 1556,
	1557, 1624, 334, 295, 295, 295, 334, 581, 1480, 1343,
	1249, 258, 1008, 877, 305, 1661, 629, 1536, 254, 1539,
	773, 410, 1630, 87, 87, 1786, 1314, 627, 260, 1336,
	1328, 1329, 1330, 1331, 1333, 87, 87, 1712, 295, 87,
	1694, 628, 1570, 1591, 1594, 646, 1123, 646, 87, 87,
	882, 30, 1588, 1587, 1589, 627, 627, 1588, 1587, 1589,
	1585, 477, 629, 627, 1541, 1470, 1384, 278, 1613, 646,
	278, 278, 278, 278, 278, 781, 1618, 87, 1022, 278,
	1592, 1021, 1576, 604, 692, 1328, 1329, 1330, 1331, 1333,
	1614, 266, 675, 670, 679, 627, 626, 799, 1601, 1602,
	1574, 668, 1607, 500, 662, 671, 1132, 554, 502, 601,
	503, 602, 909, 259, 490, 326, 599, 358, 820, 1256,
	955, 1259, 1636, 1520, 626, 626, 1120, 1310, 880, 1593,
	476, 87, 626, 87, 1530, 87, 87, 482, 603, 481,
	1107, 381, 473, 1566, 87, 628, 1608, 1267, 42, 395,
	272, 1575, 273, 1205, 1571, 262, 1648, 1670, 1671, 1033,
	806, 1393, 600, 87, 626, 308, 603, 603, 1263, 1324,
	383, 1150, 1142, 1140, 603, 1131, 435, 1649, 560, 1669,
	956, 407, 604, 1675, 1212, 1266, 87, 975, 87, 334,
	334, 628, 459, 334, 814, 1686, 1261, 87, 1801, 1689,
	627, 1684, 1264, 87, 1651, 329, 603, 328, 1677, 1018,
	404, 1599, 1588, 1587, 1589, 1698, 1262, 295, 655, 999,
	301, 1725, 1730, 1705, 1390, 928, 1771, 60, 23, 295,
	21, 20, 295, 944, 19, 18, 16, 15, 295, 1711,
	959, 960, 14, 295, 87, 22, 295, 12, 278, 278,
	11, 10, 1718, 9, 1727, 29, 28, 27, 26, 604,
	1701, 2, 1265, 87, 87, 1, 600, 87, 1721, 626,
	0, 87, 1144, 0, 0, 0, 87, 0, 1739, 0,
	0, 1722, 0, 0, 0, 1747, 0, 0, 1741, 1748,
	87, 1743, 785, 0, 0, 689, 0, 1740, 1659, 627,
	0, 646, 820, 0, 1588, 1587, 1589, 0, 0, 1754,
	1753, 603, 600, 0, 320, 0, 0, 87, 0, 87,
	87, 0, 87, 463, 463, 1755, 1758, 0, 0, 1761,
	0, 0, 562, 1777, 0, 1775, 604, 0, 690, 1769,
	1693, 87, 1781, 1780, 0, 1742, 0, 0, 0, 691,
	0, 334, 0, 0, 1778, 1784, 1783, 0, 1782, 1779,
	0, 0, 0, 0, 0, 87, 0, 87, 626, 0,
	0, 1588, 1587, 1589, 1808, 0, 627, 1804, 0, 629,
	0, 0, 87, 1806, 0, 0, 0, 1805, 0, 0,
	1817, 1773, 1821, 87, 1819, 0, 0, 1825, 0, 0,
	0, 0, 0, 1827, 0, 1830, 1829, 629, 629, 0,
	603, 0, 0, 1826, 0, 629, 0, 1551, 0, 1544,
	1842, 1844, 786, 1845, 1841, 0, 0, 1542, 0, 0,
	1546, 0, 1011, 0, 0, 0, 0, 0, 1850, 0,
	0, 0, 807, 809, 0, 626, 0, 629, 1552, 816,
	0, 295, 928, 627, 0, 0, 0, 0, 1745, 0,
	0, 861, 862, 863, 864, 865, 0, 1545, 0, 0,
	868, 0, 0, 0, 1770, 1144, 1144, 0, 0, 0,
	0, 295, 0, 278, 0, 0, 0, 603, 0, 0,
	881, 0, 824, 0, 843, 844, 845, 853, 854, 855,
	0, 0, 1292, 1293, 0, 0, 0, 846, 628, 0,
	0, 0, 0, 0, 826, 0, 857, 0, 0, 957,
	0, 0, 626, 0, 0, 0, 1144, 1144, 1144, 1789,
	0, 1547, 1327, 1548, 0, 825, 628, 628, 0, 0,
	0, 840, 0, 0, 628, 0, 0, 0, 0, 0,
	0, 0, 629, 1349, 1350, 1351, 0, 0, 1550, 0,
	0, 0, 0, 0, 603, 1553, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 628, 0, 295, 1178,
	1179, 0, 0, 0, 928, 0, 0, 1184, 831, 0,
	0, 0, 0, 1189, 1190, 1192, 1194, 1195, 0, 1198,
	1199, 0, 0, 0, 0, 850, 858, 295, 0, 1210,
	0, 0, 0, 0, 0, 0, 295, 0, 0, 0,
	856, 1549, 0, 0, 0, 295, 0, 0, 1332, 600,
	848, 0, 0, 0, 0, 0, 841, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1011, 646, 0, 0,
	0, 629, 1011, 0, 0, 0, 0, 600, 600, 0,
	0, 1144, 1144, 0, 0, 600, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1342, 0, 0, 0,
	0, 628, 799, 0, 799, 0, 278, 295, 1461, 1462,
	1250, 0, 0, 842, 0, 0, 0, 600, 0, 1253,
	0, 0, 0, 0, 851, 0, 1272, 0, 295, 1144,
	1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
	1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 629, 1144,
	0, 0, 0, 1343, 0, 0, 1496, 1497, 1498, 1499,
	1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507, 1508, 1509,
	1510, 1511, 1512, 1513, 1514, 0, 1518, 0, 849, 0,
	0, 837, 838, 839, 0, 836, 833, 834, 835, 827,
	828, 829, 830, 832, 0, 852, 0, 0, 0, 0,
	628, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 600, 0, 0, 629, 1334, 1335, 1336, 1328,
	1329, 1330, 1331, 1333, 0, 253, 0, 463, 0, 0,
	0, 0, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061,
	1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071,
	1072, 1073, 1074, 1075, 820, 1081, 0, 1083, 1084, 1085,
	1086, 0, 0, 0, 0, 0, 0, 628, 256, 1327,
	0, 1344, 1345, 1346, 0, 0, 0, 0, 0, 0,
	0, 295, 295, 0, 1616, 0, 0, 0, 0, 261,
	0, 0, 1129, 1130, 257, 1141, 0, 1151, 1153, 1158,
	1161, 1162, 1163, 0, 478, 40, 0, 1425, 0, 0,
	928, 600, 799, 0, 0, 0, 1436, 258, 1341, 0,
	0, 279, 562, 0, 0, 295, 0, 0, 0, 295,
	0, 0, 0, 0, 260, 1272, 0, 40, 292, 1456,
	0, 1272, 0, 1144, 628, 0, 0, 0, 0, 0,
	0, 1203, 0, 0, 0, 0, 0, 0, 313, 0,
	0, 321, 0, 0, 0, 1332, 0, 0, 40, 0,
	1658, 0, 0, 281, 0, 0, 0, 0, 286, 287,
	321, 293, 0, 1485, 0, 0, 0, 0, 600, 0,
	0, 0, 1229, 280, 282, 0, 0, 1347, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1342, 0, 0, 0, 0, 1240, 259,
	0, 0, 0, 0, 0, 0, 0, 0, 1144, 0,
	0, 283, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 816, 0, 284, 285, 0, 0, 0, 1537, 1538,
	928, 0, 0, 0, 0, 1715, 820, 820, 0, 288,
	0, 262, 1564, 0, 1565, 600, 295, 1567, 1568, 1569,
	1343, 0, 0, 0, 295, 0, 0, 0, 0, 0,
	0, 1277, 1278, 0, 0, 0, 0, 1283, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1584, 0,
	820, 928, 0, 1584, 0, 0, 0, 1144, 0, 0,
	1297, 0, 295, 295, 0, 0, 295, 0, 0, 1305,
	0, 0, 0, 0, 0, 820, 1272, 1313, 0, 0,
	0, 1318, 0, 0, 1760, 0, 0, 0, 1338, 1339,
	1340, 0, 1337, 1334, 1335, 1336, 1328, 1329, 1330, 1331,
	1333, 0, 0, 868, 1631, 289, 0, 0, 290, 1158,
	1158, 1158, 0, 291, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 824, 0, 0, 0, 0, 853,
	854, 855, 0, 0, 0, 0, 0, 0, 0, 0,
	1386, 0, 0, 0, 0, 0, 826, 0, 857, 0,
	0, 0, 0, 0, 0, 0, 0, 463, 928, 0,
	1650, 0, 278, 1652, 0, 0, 463, 825, 0, 0,
	562, 295, 0, 840, 0, 0, 0, 313, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	820, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1584, 0,
	0, 0, 0, 295, 0, 1696, 0, 0, 0, 0,
	831, 0, 0, 0, 295, 0, 0, 0, 0, 0,
	820, 1459, 0, 0, 1460, 0, 0, 850, 858, 0,
	0, 0, 0, 0, 0, 1465, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1229, 0,
	0, 0, 848, 0, 0, 0, 0, 1482, 841, 0,
	0, 799, 0, 0, 0, 0, 0, 1492, 0, 0,
	1494, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1732, 1733, 0, 0, 1737, 0, 0, 0, 1738, 0,
	1584, 0, 0, 278, 313, 0, 0, 313, 313, 0,
	0, 0, 1524, 1525, 0, 0, 0, 820, 0, 0,
	0, 1531, 1532, 1533, 0, 842, 0, 0, 0, 0,
	867, 0, 0, 0, 871, 0, 851, 0, 0, 0,
	0, 0, 0, 0, 1768, 0, 820, 295, 0, 278,
	0, 0, 0, 0, 0, 0, 0, 0, 463, 0,
	0, 0, 0, 0, 0, 0, 0, 1584, 1696, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 25, 0, 0, 0, 0, 0, 0, 0,
	849, 0, 295, 45, 820, 1598, 0, 836, 833, 834,
	835, 827, 828, 829, 830, 832, 0, 852, 0, 1818,
	0, 0, 0, 0, 0, 0, 0, 47, 1617, 0,
	820, 0, 1620, 1621, 52, 0, 0, 1623, 0, 0,
	0, 1625, 40, 0, 40, 0, 0, 0, 1629, 0,
	0, 0, 1632, 35, 0, 0, 0, 40, 0, 0,
	31, 40, 0, 48, 0, 0, 0, 34, 32, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 36, 1641, 0, 0, 0, 824, 0,
	843, 844, 845, 853, 854, 855, 0, 0, 0, 0,
	0, 0, 0, 846, 0, 0, 0, 0, 0, 0,
	826, 0, 857, 0, 824, 0, 843, 844, 845, 853,
	854, 855, 0, 0, 0, 0, 1668, 0, 0, 846,
	0, 825, 0, 0, 0, 0, 826, 840, 857, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1687, 0, 0, 0, 0, 0, 825, 0, 0,
	0, 33, 0, 840, 0, 0, 0, 0, 0, 0,
	1700, 0, 50, 0, 0, 37, 0, 49, 0, 0,
	1707, 1708, 38, 0, 831, 59, 0, 0, 0, 0,
	41, 43, 0, 0, 0, 0, 0, 0, 44, 0,
	46, 850, 858, 0, 0, 0, 0, 61, 0, 1720,
	831, 0, 0, 0, 0, 0, 856, 0, 0, 0,
	51, 0, 1724, 0, 0, 0, 848, 850, 858, 0,
	0, 0, 841, 0, 62, 0, 0, 0, 0, 0,
	0, 57, 856, 0, 562, 0, 0, 58, 0, 0,
	0, 0, 848, 0, 847, 0, 0, 0, 841, 0,
	40, 0, 0, 0, 0, 0, 56, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	847, 0, 0, 0, 0, 0, 0, 0, 1048, 842,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	851, 0, 0, 0, 0, 0, 824, 0, 843, 844,
	845, 853, 854, 855, 0, 842, 0, 0, 0, 0,
	0, 846, 0, 1098, 0, 0, 851, 0, 826, 0,
	857, 0, 0, 0, 0, 0, 0, 1803, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 825,
	0, 0, 1816, 1816, 849, 840, 0, 837, 838, 839,
	0, 836, 833, 834, 835, 827, 828, 829, 830, 832,
	0, 852, 0, 1012, 0, 0, 0, 0, 1816, 0,
	849, 0, 1013, 837, 838, 839, 0, 836, 833, 834,
	835, 827, 828, 829, 830, 832, 0, 852, 0, 0,
	0, 0, 831, 0, 1644, 0, 0, 0, 0, 0,
	0, 1816, 0, 0, 321, 0, 0, 0, 0, 850,
	858, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 856, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 848, 0, 0, 0, 0, 0,
	841, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 847, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 40, 0, 842, 0, 0,
	0, 0, 0, 0, 0, 1273, 0, 0, 851, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1098, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 867, 0, 0, 0, 0, 0,
	0, 0, 849, 0, 0, 837, 838, 839, 0, 836,
	833, 834, 835, 827, 828, 829, 830, 832, 0, 852,
	0, 0, 0, 0, 0, 0, 1368, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 867, 86, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 89,
	90, 0, 91, 0, 0, 0, 0, 199, 0, 0,
	0, 0, 92, 93, 200, 201, 202, 203, 94, 204,
	205, 0, 95, 206, 207, 96, 0, 0, 208, 209,
	210, 0, 211, 0, 0, 0, 97, 98, 99, 0,
	100, 0, 101, 102, 0, 0, 103, 104, 0, 1048,
	0, 0, 0, 0, 105, 106, 107, 108, 212, 109,
	213, 214, 0, 110, 0, 111, 0, 0, 0, 112,
	113, 1327, 114, 1344, 1345, 1346, 215, 115, 116, 216,
	0, 0, 0, 117, 118, 217, 1615, 119, 0, 120,
	0, 0, 1048, 0, 121, 218, 1048, 219, 0, 122,
	123, 220, 221, 0, 0, 126, 0, 124, 0, 0,
	125, 222, 223, 224, 225, 0, 226, 0, 0, 127,
	1341, 128, 129, 0, 0, 227, 0, 130, 0, 0,
	131, 0, 0, 132, 0, 133, 134, 135, 136, 137,
	0, 138, 139, 142, 140, 0, 141, 0, 228, 143,
	229, 144, 145, 0, 0, 335, 0, 0, 146, 230,
	0, 147, 0, 231, 148, 149, 150, 1332, 232, 151,
	233, 152, 0, 153, 154, 155, 234, 156, 157, 0,
	159, 160, 158, 161, 0, 162, 0, 163, 164, 235,
	165, 0, 166, 167, 168, 59, 236, 169, 170, 1347,
	171, 172, 0, 173, 237, 238, 174, 0, 179, 175,
	176, 178, 239, 177, 240, 1342, 180, 61, 181, 182,
	0, 241, 242, 243, 0, 0, 183, 244, 245, 0,
	184, 185, 186, 187, 0, 0, 188, 189, 190, 0,
	40, 191, 192, 193, 365, 247, 0, 194, 0, 0,
	0, 57, 195, 196, 197, 198, 0, 58, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 40,
	0, 0, 1343, 0, 0, 0, 1050, 0, 0, 1048,
	1048, 0, 0, 1048, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1338, 1339, 1340, 0, 1337, 1334, 1335, 1336, 1328, 1329,
	1330, 1331, 1333, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1678, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1048, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 688,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 89, 90, 693, 91, 694, 695,
	696, 697, 199, 698, 699, 700, 701, 92, 93, 200,
	201, 202, 203, 94, 204, 205, 702, 95, 206, 207,
	96, 703, 704, 208, 209, 210, 705, 211, 706, 366,
	707, 97, 98, 99, 867, 100, 708, 101, 102, 709,
	367, 103, 104, 710, 711, 712, 713, 714, 715, 105,
	106, 107, 108, 212, 109, 213, 214, 716, 110, 717,
	111, 718, 719, 720, 112, 113, 721, 114, 722, 0,
	723, 215, 115, 116, 216, 724, 725, 726, 117, 118,
	217, 0, 119, 727, 120, 728, 729, 368, 730, 121,
	218, 731, 219, 732, 122, 123, 220, 221, 370, 733,
	126, 734, 124, 735, 369, 125, 222, 223, 224, 225,
	736, 226, 737, 371, 127, 372, 128, 129, 738, 739,
	227, 373, 130, 374, 740, 131, 741, 742, 132, 0,
	133, 134, 135, 136, 137, 375, 138, 139, 142, 140,
	743, 141, 744, 228, 143, 229, 144, 145, 745, 746,
	747, 748, 749, 146, 230, 376, 147, 377, 231, 148,
	149, 150, 750, 232, 151, 233, 152, 751, 153, 154,
	155, 234, 156, 157, 752, 159, 160, 158, 161, 753,
	162, 378, 163, 164, 235, 165, 0, 166, 167, 168,
	754, 236, 169, 170, 755, 171, 172, 379, 173, 237,
	238, 174, 756, 179, 175, 176, 178, 239, 177, 240,
	757, 180, 758, 181, 182, 759, 241, 242, 243, 760,
	761, 183, 244, 245, 762, 184, 185, 186, 187, 763,
	764, 188, 189, 190, 765, 766, 191, 192, 193, 246,
	247, 767, 194, 768, 769, 770, 771, 195, 196, 197,
	198, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 688, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1455, 89, 90,
	693, 91, 694, 695, 696, 697, 199, 698, 699, 700,
	701, 92, 93, 200, 201, 202, 203, 94, 204, 205,
	702, 95, 206, 207, 96, 703, 704, 208, 209, 210,
	705, 211, 706, 366, 707, 97, 98, 99, 0, 100,
	708, 101, 102, 709, 367, 103, 104, 710, 711, 712,
	713, 714, 715, 105, 106, 107, 108, 212, 109, 213,
	214, 716, 110, 717, 111, 718, 719, 720, 112, 113,
	721, 114, 722, 0, 723, 215, 115, 116, 216, 724,
	725, 726, 117, 118, 217, 0, 119, 727, 120, 728,
	729, 368, 730, 121, 218, 731, 219, 732, 122, 123,
	220, 221, 370, 733, 126, 734, 124, 735, 369, 125,
	222, 223, 224, 225, 736, 226, 737, 371, 127, 372,
	128, 129, 738, 739, 227, 373, 130, 374, 740, 131,
	741, 742, 132, 0, 133, 134, 135, 136, 137, 375,
	138, 139, 142, 140, 743, 141, 744, 228, 143, 229,
	144, 145, 745, 746, 747, 748, 749, 146, 230, 376,
	147, 377, 231, 148, 149, 150, 750, 232, 151, 233,
	152, 751, 153, 154, 155, 234, 156, 157, 752, 159,
	160, 158, 161, 753, 162, 378, 163, 164, 235, 165,
	0, 166, 167, 168, 754, 236, 169, 170, 755, 171,
	172, 379, 173, 237, 238, 174, 756, 179, 175, 176,
	178, 239, 177, 240, 757, 180, 758, 181, 182, 759,
	241, 242, 243, 760, 761, 183, 244, 245, 762, 184,
	185, 186, 187, 763, 764, 188, 189, 190, 765, 766,
	191, 192, 193, 246, 247, 767, 194, 768, 769, 770,
	771, 195, 196, 197, 198, 688, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 788, 0,
	89, 90, 693, 91, 694, 695, 696, 697, 199, 698,
	699, 700, 701, 92, 93, 200, 201, 202, 203, 94,
	204, 205, 702, 95, 206, 207, 96, 703, 704, 208,
	209, 210, 705, 211, 706, 366, 707, 97, 98, 99,
	0, 100, 708, 101, 102, 709, 367, 103, 104, 710,
	711, 712, 713, 714, 715, 105, 106, 107, 108, 212,
	109, 213, 214, 716, 110, 717, 111, 718, 719, 720,
	112, 113, 721, 114, 722, 0, 723, 215, 115, 116,
	216, 724, 725, 726, 117, 118, 217, 0, 119, 727,
	120, 728, 729, 368, 730, 121, 218, 731, 219, 732,
	122, 123, 220, 221, 370, 733, 126, 734, 124, 735,
	369, 125, 222, 223, 224, 225, 736, 226, 737, 371,
	127, 372, 128, 129, 738, 739, 227, 373, 130, 374,
	740, 131, 741, 742, 132, 0, 133, 134, 135, 136,
	137, 375, 138, 139, 142, 140, 743, 141, 744, 228,
	143, 229, 144, 145, 745, 746, 747, 748, 749, 146,
	230, 376, 147, 377, 231, 148, 149, 150, 750, 232,
	151, 233, 152, 751, 153, 154, 155, 234, 156, 157,
	752, 159, 160, 158, 161, 753, 162, 378, 163, 164,
	235, 165, 0, 166, 167, 168, 754, 236, 169, 170,
	755, 171, 172, 379, 173, 237, 238, 174, 756, 179,
	175, 176, 178, 239, 177, 240, 757, 180, 758, 181,
	182, 759, 241, 242, 243, 760, 761, 183, 244, 245,
	762, 184, 185, 186, 187, 763, 764, 188, 189, 190,
	765, 766, 191, 192, 193, 246, 247, 767, 194, 768,
	769, 770, 771, 195, 196, 197, 198, 498, 487, 488,
	485, 486, 474, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 89, 90, 1115, 91, 0, 0, 0, 0,
	514, 480, 0, 0, 0, 92, 93, 200, 528, 202,
	529, 94, 530, 531, 0, 95, 206, 207, 96, 495,
	513, 532, 533, 210, 0, 524, 0, 506, 0, 97,
	98, 99, 0, 100, 0, 101, 102, 0, 367, 103,
	104, 0, 507, 509, 0, 508, 510, 105, 106, 107,
	108, 534, 109, 535, 536, 0, 110, 0, 111, 0,
	1116, 0, 527, 113, 0, 114, 0, 0, 0, 479,
	115, 116, 515, 493, 0, 0, 117, 118, 537, 0,
	119, 0, 120, 0, 0, 368, 0, 121, 525, 0,
	219, 0, 122, 123, 521, 523, 370, 0, 126, 0,
	124, 0, 369, 125, 538, 539, 540, 541, 0, 505,
	0, 371, 127, 372, 128, 129, 0, 0, 526, 373,
	130, 374, 0, 131, 0, 0, 132, 0, 133, 134,
	135, 136, 137, 375, 138, 139, 142, 140, 469, 141,
	494, 522, 143, 542, 144, 145, 0, 0, 0, 0,
	0, 146, 230, 376, 147, 377, 516, 148, 149, 150,
	0, 517, 151, 233, 152, 0, 153, 154, 155, 543,
	156, 157, 0, 159, 160, 158, 161, 0, 162, 378,
	163, 164, 483, 165, 0, 166, 167, 168, 0, 236,
	169, 170, 511, 171, 172, 379, 173, 544, 238, 174,
	0, 179, 175, 176, 178, 545, 177, 518, 0, 180,
	0, 181, 182, 0, 241, 546, 547, 0, 0, 183,
	519, 520, 492, 184, 185, 186, 187, 0, 0, 188,
	189, 190, 512, 0, 191, 192, 193, 246, 548, 1114,
	194, 0, 0, 0, 0, 195, 196, 197, 198, 470,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	466, 467, 1117, 0, 0, 0, 468, 0, 0, 475,
	1112, 498, 487, 488, 485, 486, 474, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 89, 90, 0, 91,
	0, 0, 0, 0, 514, 480, 0, 0, 0, 92,
	93, 200, 528, 202, 529, 94, 530, 531, 0, 95,
	206, 207, 96, 495, 513, 532, 533, 210, 0, 524,
	0, 506, 0, 97, 98, 99, 0, 100, 0, 101,
	102, 0, 367, 103, 104, 0, 507, 509, 0, 508,
	510, 105, 106, 107, 108, 534, 109, 535, 536, 563,
	110, 0, 111, 0, 0, 0, 527, 113, 0, 114,
	0, 0, 0, 479, 115, 116, 515, 493, 0, 0,
	117, 118, 537, 0, 119, 0, 120, 0, 0, 368,
	0, 121, 525, 0, 219, 0, 122, 123, 521, 523,
	370, 0, 126, 0, 124, 0, 369, 125, 538, 539,
	540, 541, 0, 505, 0, 371, 127, 372, 128, 129,
	0, 0, 526, 373, 130, 374, 0, 131, 0, 0,
	132, 0, 133, 134, 135, 136, 137, 375, 138, 139,
	142, 140, 469, 141, 494, 522, 143, 542, 144, 145,
	0, 0, 0, 0, 0, 146, 230, 376, 147, 377,
	516, 148, 149, 150, 0, 517, 151, 233, 152, 0,
	153, 154, 155, 543, 156, 157, 0, 159, 160, 158,
	161, 0, 162, 378, 163, 164, 483, 165, 0, 166,
	167, 168, 59, 236, 169, 170, 511, 171, 172, 379,
	173, 544, 238, 174, 0, 179, 175, 176, 178, 545,
	177, 518, 0, 180, 61, 181, 182, 0, 241, 546,
	547, 0, 0, 183, 519, 520, 492, 184, 185, 186,
	187, 0, 0, 188, 189, 190, 512, 0, 191, 192,
	193, 365, 548, 0, 194, 0, 0, 0, 57, 195,
	196, 197, 198, 470, 58, 0, 498, 487, 488, 485,
	486, 474, 0, 0, 466, 467, 0, 0, 0, 0,
	468, 89, 90, 475, 91, 0, 0, 0, 0, 514,
	480, 0, 0, 0, 92, 93, 200, 528, 202, 529,
	94, 530, 531, 0, 95, 206, 207, 96, 495, 513,
	532, 533, 210, 0, 524, 0, 506, 0, 97, 98,
	99, 0, 100, 0, 101, 102, 0, 367, 103, 104,
	0, 507, 509, 0, 508, 510, 105, 106, 107, 108,
	534, 109, 535, 536, 0, 110, 0, 111, 0, 0,
	0, 527, 113, 0, 114, 0, 0, 0, 479, 115,
	116, 515, 493, 0, 0, 117, 118, 537, 0, 119,
	0, 120, 0, 0, 368, 0, 121, 525, 0, 219,
	0, 122, 123, 521, 523, 370, 0, 126, 0, 124,
	0, 369, 125, 538, 539, 540, 541, 0, 505, 0,
	371, 127, 372, 128, 129, 0, 0, 526, 373, 130,
	374, 0, 131, 0, 0, 132, 0, 133, 134, 135,
	136, 137, 375, 138, 139, 142, 140, 469, 141, 494,
	522, 143, 542, 144, 145, 0, 0, 0, 0, 0,
	146, 230, 376, 147, 377, 516, 148, 149, 150, 0,
	517, 151, 233, 152, 0, 153, 154, 155, 543, 156,
	157, 0, 159, 160, 158, 161, 0, 162, 378, 163,
	164, 483, 165, 0, 166, 167, 168, 59, 236, 169,
	170, 511, 171, 172, 379, 173, 544, 238, 174, 0,
	179, 175, 176, 178, 545, 177, 518, 0, 180, 61,
	181, 182, 0, 241, 546, 547, 0, 0, 183, 519,
	520, 492, 184, 185, 186, 187, 0, 0, 188, 189,
	190, 512, 0, 191, 192, 193, 365, 548, 0, 194,
	0, 0, 0, 57, 195, 196, 197, 198, 470, 58,
	0, 498, 487, 488, 485, 486, 474, 0, 0, 466,
	467, 0, 0, 0, 0, 468, 89, 90, 475, 91,
	0, 0, 0, 0, 514, 480, 0, 0, 0, 92,
	93, 200, 528, 202, 529, 94, 530, 531, 1154, 95,
	206, 207, 96, 495, 513, 532, 533, 210, 0, 524,
	0, 506, 0, 97, 98, 99, 0, 100, 0, 101,
	102, 0, 367, 103, 104, 0, 507, 509, 0, 508,
	510, 105, 106, 107, 108, 534, 109, 535, 536, 0,
	110, 0, 111, 0, 0, 0, 527, 113, 0, 114,
	0, 0, 0, 479, 115, 116, 515, 493, 0, 0,
	117, 118, 537, 0, 119, 0, 120, 0, 1159, 368,
	0, 121, 525, 0, 219, 0, 122, 123, 521, 523,
	370, 0, 126, 0, 124, 0, 369, 125, 538, 539,
	540, 541, 0, 505, 0, 371, 127, 372, 128, 129,
	0, 1155, 526, 373, 130, 374, 0, 131, 0, 0,
	132, 0, 133, 134, 135, 136, 137, 375, 138, 139,
	142, 140, 469, 141, 494, 522, 143, 542, 144, 145,
	0, 0, 0, 0, 0, 146, 230, 376, 147, 377,
	516, 148, 149, 150, 0, 517, 151, 233, 152, 0,
	153, 154, 155, 543, 156, 157, 0, 159, 160, 158,
	161, 0, 162, 378, 163, 164, 483, 165, 0, 166,
	167, 168, 0, 236, 169, 170, 511, 171, 172, 379,
	173, 544, 238, 174, 0, 179, 175, 176, 178, 545,
	177, 518, 0, 180, 0, 181, 182, 0, 241, 546,
	547, 0, 1156, 183, 519, 520, 492, 184, 185, 186,
	187, 0, 0, 188, 189, 190, 512, 0, 191, 192,
	193, 246, 548, 0, 194, 0, 0, 0, 0, 195,
	196, 197, 198, 470, 0, 0, 498, 487, 488, 485,
	486, 474, 0, 0, 466, 467, 0, 0, 0, 0,
	468, 89, 90, 475, 91, 0, 0, 0, 0, 514,
	480, 0, 0, 0, 92, 93, 200, 528, 202, 529,
	94, 530, 531, 0, 95, 206, 207, 96, 495, 513,
	532, 533, 210, 0, 524, 0, 506, 0, 97, 98,
	99, 0, 100, 0, 101, 102, 0, 367, 103, 104,
	0, 507, 509, 0, 508, 510, 105, 106, 107, 108,
	534, 109, 535, 536, 0, 110, 0, 111, 0, 0,
	0, 527, 113, 0, 114, 0, 0, 0, 479, 115,
	116, 515, 493, 0, 0, 117, 118, 537, 0, 119,
	0, 120, 0, 0, 368, 0, 121, 525, 0, 219,
	0, 122, 123, 521, 523, 370, 0, 126, 0, 124,
	0, 369, 125, 538, 539, 540, 541, 0, 505, 0,
	371, 127, 372, 128, 129, 0, 0, 526, 373, 130,
	374, 0, 131, 0, 0, 132, 0, 133, 134, 135,
	136, 137, 375, 138, 139, 142, 140, 469, 141, 494,
	522, 143, 542, 144, 145, 0, 0, 0, 0, 0,
	146, 230, 376, 147, 377, 516, 148, 149, 150, 0,
	517, 151, 233, 152, 0, 153, 154, 155, 543, 156,
	157, 0, 159, 160, 158, 161, 0, 162, 378, 163,
	164, 483, 165, 0, 166, 167, 168, 0, 236, 169,
	170, 511, 171, 172, 379, 173, 544, 238, 174, 0,
	179, 175, 176, 178, 545, 177, 518, 0, 180, 0,
	181, 182, 0, 241, 546, 547, 0, 0, 183, 519,
	520, 492, 184, 185, 186, 187, 0, 0, 188, 189,
	190, 512, 0, 191, 192, 193, 246, 548, 0, 194,
	0, 0, 0, 0, 195, 196, 197, 198, 470, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 466,
	467, 0, 0, 0, 0, 468, 0, 0, 475, 1521,
	498, 487, 488, 485, 486, 474, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 89, 90, 0, 91, 0,
	0, 0, 0, 514, 480, 0, 0, 0, 92, 93,
	200, 528, 202, 529, 94, 530, 531, 0, 95, 206,
	207, 96, 495, 513, 532, 533, 210, 0, 524, 0,
	506, 0, 97, 98, 99, 0, 100, 0, 101, 102,
	0, 367, 103, 104, 0, 507, 509, 0, 508, 510,
	105, 106, 107, 108, 534, 109, 535, 536, 0, 110,
	0, 111, 0, 0, 0, 527, 113, 0, 114, 0,
	0, 0, 479, 115, 116, 515, 493, 0, 0, 117,
	118, 537, 0, 119, 0, 120, 0, 0, 368, 0,
	121, 525, 0, 219, 0, 122, 123, 521, 523, 370,
	0, 126, 0, 124, 0, 369, 125, 538, 539, 540,
	541, 0, 505, 0, 371, 127, 372, 128, 129, 0,
	0, 526, 373, 130, 374, 0, 131, 0, 0, 132,
	0, 133, 134, 135, 136, 137, 375, 138, 139, 142,
	140, 469, 141, 494, 522, 143, 542, 144, 145, 0,
	0, 0, 0, 0, 146, 230, 376, 147, 377, 516,
	148, 149, 150, 0, 517, 151, 233, 152, 0, 153,
	154, 155, 543, 156, 157, 0, 159, 160, 158, 161,
	0, 162, 378, 163, 164, 483, 165, 0, 166, 167,
	168, 0, 236, 169, 170, 511, 171, 172, 379, 173,
	544, 238, 174, 0, 179, 175, 176, 178, 545, 177,
	518, 0, 180, 0, 181, 182, 0, 241, 546, 547,
	0, 0, 183, 519, 520, 492, 184, 185, 186, 187,
	0, 0, 188, 189, 190, 512, 0, 191, 192, 193,
	246, 548, 0, 194, 0, 0, 0, 0, 195, 196,
	197, 198, 470, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 466, 467, 0, 0, 0, 0, 468,
	0, 0, 475, 1471, 498, 487, 488, 485, 486, 474,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 89,
	90, 0, 91, 0, 0, 0, 0, 514, 480, 0,
	0, 0, 92, 93, 200, 528, 202, 529, 94, 530,
	531, 0, 95, 206, 207, 96, 495, 513, 532, 533,
	210, 0, 524, 0, 506, 0, 97, 98, 99, 0,
	100, 0, 101, 102, 0, 367, 103, 104, 0, 507,
	509, 0, 508, 510, 105, 106, 107, 108, 534, 109,
	535, 536, 0, 110, 0, 111, 0, 0, 0, 527,
	113, 0, 114, 0, 0, 0, 479, 115, 116, 515,
	493, 0, 0, 117, 118, 537, 0, 119, 0, 120,
	0, 0, 368, 0, 121, 525, 0, 219, 0, 122,
	123, 521, 523, 370, 0, 126, 0, 124, 0, 369,
	125, 538, 539, 540, 541, 0, 505, 0, 371, 127,
	372, 128, 129, 0, 0, 526, 373, 130, 374, 0,
	131, 0, 0, 132, 0, 133, 134, 135, 136, 137,
	375, 138, 139, 142, 140, 469, 141, 494, 522, 143,
	542, 144, 145, 0, 0, 0, 0, 0, 146, 230,
	376, 147, 377, 516, 148, 149, 150, 0, 517, 151,
	233, 152, 0, 153, 154, 155, 543, 156, 157, 0,
	159, 160, 158, 161, 0, 162, 378, 163, 164, 483,
	165, 0, 166, 167, 168, 0, 236, 169, 170, 511,
	171, 172, 379, 173, 544, 238, 174, 0, 179, 175,
	176, 178, 545, 177, 518, 0, 180, 0, 181, 182,
	0, 241, 546, 547, 0, 0, 183, 519, 520, 492,
	184, 185, 186, 187, 0, 0, 188, 189, 190, 512,
	0, 191, 192, 193, 246, 548, 0, 194, 0, 0,
	0, 0, 195, 196, 197, 198, 470, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 466, 467, 0,
	0, 0, 0, 468, 0, 0, 475, 1111, 498, 487,
	488, 485, 486, 474, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 89, 90, 0, 91, 0, 0, 0,
	0, 514, 480, 0, 0, 0, 92, 93, 200, 528,
	202, 529, 94, 530, 531, 0, 95, 206, 207, 96,
	495, 513, 532, 533, 210, 0, 524, 0, 506, 0,
	97, 98, 99, 0, 100, 0, 101, 102, 0, 367,
	103, 104, 0, 507, 509, 0, 508, 510, 105, 106,
	107, 108, 534, 109, 535, 536, 0, 110, 0, 111,
	0, 0, 0, 527, 113, 0, 114, 0, 0, 0,
	479, 115, 116, 515, 493, 0, 0, 117, 118, 537,
	0, 119, 0, 120, 0, 0, 368, 0, 121, 525,
	0, 219, 0, 122, 123, 521, 523, 370, 0, 126,
	0, 124, 0, 369, 125, 538, 539, 540, 541, 0,
	505, 0, 371, 127, 372, 128, 129, 0, 0, 526,
	373, 130, 374, 0, 131, 0, 0, 132, 0, 133,
	134, 135, 136, 137, 375, 138, 139, 142, 140, 469,
	141, 494, 522, 143, 542, 144, 145, 0, 0, 0,
	0, 0, 146, 230, 376, 147, 377, 516, 148, 149,
	150, 0, 517, 151, 233, 152, 0, 153, 154, 155,
	543, 156, 157, 0, 159, 160, 158, 161, 0, 162,
	378, 163, 164, 483, 165, 0, 166, 167, 168, 0,
	236, 169, 170, 511, 171, 172, 379, 173, 544, 238,
	174, 0, 179, 175, 176, 178, 545, 177, 518, 0,
	180, 0, 181, 182, 0, 241, 546, 547, 0, 0,
	183, 519, 520, 492, 184, 185, 186, 187, 0, 0,
	188, 189, 190, 512, 0, 191, 192, 193, 246, 548,
	0, 194, 0, 0, 0, 0, 195, 196, 197, 198,
	470, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 466, 467, 0, 0, 0, 0, 468, 873, 1108,
	475, 498, 487, 488, 485, 486, 474, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 89, 90, 0, 91,
	0, 0, 0, 0, 514, 480, 0, 0, 0, 92,
	93, 200, 528, 202, 529, 94, 530, 531, 0, 95,
	206, 207, 96, 495, 513, 532, 533, 210, 0, 524,
	0, 506, 0, 97, 98, 99, 0, 100, 0, 101,
	102, 0, 367, 103, 104, 0, 507, 509, 0, 508,
	510, 105, 106, 107, 108, 534, 109, 535, 536, 0,
	110, 0, 111, 0, 0, 0, 527, 113, 0, 114,
	0, 0, 0, 479, 115, 116, 515, 493, 0, 0,
	117, 118, 537, 0, 119, 0, 120, 0, 0, 368,
	0, 121, 525, 0, 219, 0, 122, 123, 521, 523,
	370, 0, 126, 0, 124, 0, 369, 125, 538, 539,
	540, 541, 0, 505, 0, 371, 127, 372, 128, 129,
	0, 0, 526, 373, 130, 374, 0, 131, 0, 0,
	132, 0, 133, 134, 135, 136, 137, 375, 138, 139,
	142, 140, 469, 141, 494, 522, 143, 542, 144, 145,
	0, 0, 0, 0, 0, 146, 230, 376, 147, 377,
	516, 148, 149, 150, 0, 517, 151, 233, 152, 0,
	153, 154, 155, 543, 156, 157, 0, 159, 160, 158,
	161, 0, 162, 378, 163, 164, 483, 165, 0, 166,
	167, 168, 0, 236, 169, 170, 511, 171, 172, 379,
	173, 544, 238, 174, 0, 179, 175, 176, 178, 545,
	177, 518, 0, 180, 0, 181, 182, 0, 241, 546,
	547, 0, 0, 183, 519, 520, 492, 184, 185, 186,
	187, 0, 0, 188, 189, 190, 512, 0, 191, 192,
	193, 246, 548, 0, 194, 0, 0, 0, 0, 195,
	196, 197, 198, 470, 0, 0, 498, 487, 488, 485,
	486, 474, 0, 0, 466, 467, 464, 0, 0, 0,
	468, 89, 90, 475, 91, 0, 0, 0, 0, 514,
	480, 0, 0, 0, 92, 93, 200, 528, 202, 529,
	94, 530, 531, 0, 95, 206, 207, 96, 495, 513,
	532, 533, 210, 0, 524, 0, 506, 0, 97, 98,
	99, 0, 100, 0, 101, 102, 0, 367, 103, 104,
	0, 507, 509, 0, 508, 510, 105, 106, 107, 108,
	534, 109, 535, 536, 0, 110, 0, 111, 0, 0,
	0, 527, 113, 0, 114, 0, 0, 0, 479, 115,
	116, 515, 493, 0, 0, 117, 118, 537, 0, 119,
	0, 120, 0, 0, 368, 0, 121, 525, 0, 219,
	0, 122, 123, 521, 523, 370, 0, 126, 0, 124,
	0, 369, 125, 538, 539, 540, 541, 0, 505, 0,
	371, 127, 372, 128, 129, 0, 0, 526, 373, 130,
	374, 0, 131, 0, 0, 132, 0, 133, 134, 135,
	136, 137, 375, 138, 139, 142, 140, 469, 141, 494,
	522, 143, 542, 144, 145, 0, 0, 0, 0, 0,
	146, 230, 376, 147, 377, 516, 148, 149, 150, 0,
	517, 151, 233, 152, 0, 153, 154, 155, 543, 156,
	157, 0, 159, 160, 158, 161, 0, 162, 378, 163,
	164, 483, 165, 0, 166, 167, 168, 0, 236, 169,
	170, 511, 171, 172, 379, 173, 544, 238, 174, 0,
	179, 175, 176, 178, 545, 177, 518, 0, 180, 0,
	181, 182, 0, 241, 546, 547, 0, 0, 183, 519,
	520, 492, 184, 185, 186, 187, 0, 0, 188, 189,
	190, 512, 0, 191, 192, 193, 246, 548, 1476, 194,
	0, 0, 0, 0, 195, 196, 197, 198, 470, 0,
	0, 498, 487, 488, 485, 486, 474, 0, 0, 466,
	467, 0, 0, 0, 0, 468, 89, 90, 475, 91,
	0, 0, 0, 0, 514, 480, 0, 0, 0, 92,
	93, 200, 528, 202, 529, 94, 530, 531, 0, 95,
	206, 207, 96, 495, 513, 532, 533, 210, 0, 524,
	0, 506, 0, 97, 98, 99, 0, 100, 0, 101,
	102, 0, 367, 103, 104, 0, 507, 509, 0, 508,
	510, 105, 106, 107, 108, 534, 109, 535, 536, 563,
	110, 0, 111, 0, 0, 0, 527, 113, 0, 114,
	0, 0, 0, 479, 115, 116, 515, 493, 0, 0,
	117, 118, 537, 0, 119, 0, 120, 0, 0, 368,
	0, 121, 525, 0, 219, 0, 122, 123, 521, 523,
	370, 0, 126, 0, 124, 0, 369, 125, 538, 539,
	540, 541, 0, 505, 0, 371, 127, 372, 128, 129,
	0, 0, 526, 373, 130, 374, 0, 131, 0, 0,
	132, 0, 133, 134, 135, 136, 137, 375, 138, 139,
	142, 140, 469, 141, 494, 522, 143, 542, 144, 145,
	0, 0, 0, 0, 0, 146, 230, 376, 147, 377,
	516, 148, 149, 150, 0, 517, 151, 233, 152, 0,
	153, 154, 155, 543, 156, 157, 0, 159, 160, 158,
	161, 0, 162, 378, 163, 164, 483, 165, 0, 166,
	167, 168, 0, 236, 169, 170, 511, 171, 172, 379,
	173, 544, 238, 174, 0, 179, 175, 176, 178, 545,
	177, 518, 0, 180, 0, 181, 182, 0, 241, 546,
	547, 0, 0, 183, 519, 520, 492, 184, 185, 186,
	187, 0, 0, 188, 189, 190, 512, 0, 191, 192,
	193, 246, 548, 0, 194, 0, 0, 0, 0, 195,
	196, 197, 198, 470, 0, 0, 498, 487, 488, 485,
	486, 474, 0, 0, 466, 467, 0, 0, 0, 0,
	468, 89, 90, 475, 91, 0, 0, 0, 0, 514,
	480, 0, 0, 0, 92, 93, 200, 528, 202, 529,
	94, 530, 531, 0, 95, 206, 207, 96, 495, 513,
	532, 533, 210, 0, 524, 0, 506, 0, 97, 98,
	99, 0, 100, 0, 101, 102, 0, 367, 103, 104,
	0, 507, 509, 0, 508, 510, 105, 106, 107, 108,
	534, 109, 535, 536, 0, 110, 0, 111, 0, 0,
	0, 527, 113, 0, 114, 0, 0, 0, 479, 115,
	116, 515, 493, 0, 0, 117, 118, 537, 0, 119,
	0, 120, 0, 1159, 368, 0, 121, 525, 0, 219,
	0, 122, 123, 521, 523, 370, 0, 126, 0, 124,
	0, 369, 125, 538, 539, 540, 541, 0, 505, 0,
	371, 127, 372, 128, 129, 0, 0, 526, 373, 130,
	374, 0, 131, 0, 0, 132, 0, 133, 134, 135,
	136, 137, 375, 138, 139, 142, 140, 469, 141, 494,
	522, 143, 542, 144, 145, 0, 0, 0, 0, 0,
	146, 230, 376, 147, 377, 516, 148, 149, 150, 0,
	517, 151, 233, 152, 0, 153, 154, 155, 543, 156,
	157, 0, 159, 160, 158, 161, 0, 162, 378, 163,
	164, 483, 165, 0, 166, 167, 168, 0, 236, 169,
	170, 511, 171, 172, 379, 173, 544, 238, 174, 0,
	179, 175, 176, 178, 545, 177, 518, 0, 180, 0,
	181, 182, 0, 241, 546, 547, 0, 0, 183, 519,
	520, 492, 184, 185, 186, 187, 0, 0, 188, 189,
	190, 512, 0, 191, 192, 193, 246, 548, 0, 194,
	0, 0, 0, 0, 195, 196, 197, 198, 470, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 466,
	467, 0, 0, 0, 0, 468, 0, 0, 475, 498,
	487, 488, 485, 486, 474, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 89, 90, 808, 91, 0, 0,
	0, 0, 514, 480, 0, 0, 0, 92, 93, 200,
	528, 202, 529, 94, 530, 531, 0, 95, 206, 207,
	96, 495, 513, 532, 533, 210, 0, 524, 0, 506,
	0, 97, 98, 99, 0, 100, 0, 101, 102, 0,
	367, 103, 104, 0, 507, 509, 0, 508, 510, 105,
	106, 107, 108, 534, 109, 535, 536, 0, 110, 0,
	111, 0, 0, 0, 527, 113, 0, 114, 0, 0,
	0, 479, 115, 116, 515, 493, 0, 0, 117, 118,
	537, 0, 119, 0, 120, 0, 0, 368, 0, 121,
	525, 0, 219, 0, 122, 123, 521, 523, 370, 0,
	126, 0, 124, 0, 369, 125, 538, 539, 540, 541,
	0, 505, 0, 371, 127, 372, 128, 129, 0, 0,
	526, 373, 130, 374, 0, 131, 0, 0, 132, 0,
	133, 134, 135, 136, 137, 375, 138, 139, 142, 140,
	469, 141, 494, 522, 143, 542, 144, 145, 0, 0,
	0, 0, 0, 146, 230, 376, 147, 377, 516, 148,
	149, 150, 0, 517, 151, 233, 152, 0, 153, 154,
	155, 543, 156, 157, 0, 159, 160, 158, 161, 0,
	162, 378, 163, 164, 483, 165, 0, 166, 167, 168,
	0, 236, 169, 170, 511, 171, 172, 379, 173, 544,
	238, 174, 0, 179, 175, 176, 178, 545, 177, 518,
	0, 180, 0, 181, 182, 0, 241, 546, 547, 0,
	0, 183, 519, 520, 492, 184, 185, 186, 187, 0,
	0, 188, 189, 190, 512, 0, 191, 192, 193, 246,
	548, 0, 194, 0, 0, 0, 0, 195, 196, 197,
	198, 470, 0, 0, 498, 487, 488, 485, 486, 474,
	0, 0, 466, 467, 0, 0, 0, 0, 468, 89,
	90, 475, 91, 0, 0, 0, 0, 514, 480, 0,
	0, 0, 92, 93, 200, 528, 202, 529, 94, 530,
	531, 0, 95, 206, 207, 96, 495, 513, 532, 533,
	210, 0, 524, 0, 506, 0, 97, 98, 99, 0,
	100, 0, 101, 102, 0, 367, 103, 1815, 0, 507,
	509, 0, 508, 510, 105, 106, 107, 108, 534, 109,
	535, 536, 0, 110, 0, 111, 0, 0, 0, 527,
	113, 0, 114, 0, 0, 0, 479, 115, 116, 515,
	493, 0, 0, 117, 118, 537, 0, 119, 0, 120,
	0, 0, 368, 0, 121, 525, 0, 219, 0, 122,
	123, 521, 523, 370, 0, 126, 0, 124, 0, 369,
	125, 538, 539, 540, 541, 0, 505, 0, 371, 127,
	372, 128, 129, 0, 0, 526, 373, 130, 374, 0,
	131, 0, 0, 132, 0, 133, 134, 135, 136, 137,
	375, 138, 139, 142, 140, 469, 141, 494, 522, 143,
	542, 144, 145, 0, 0, 0, 0, 0, 146, 230,
	376, 147, 377, 516, 148, 149, 150, 0, 517, 151,
	233, 152, 0, 153, 154, 155, 543, 156, 157, 0,
	159, 160, 158, 161, 0, 162, 378, 163, 164, 483,
	165, 0, 166, 167, 168, 0, 236, 169, 170, 511,
	171, 172, 379, 173, 544, 238, 174, 0, 179, 175,
	176, 178, 545, 177, 518, 0, 180, 0, 181, 182,
	0, 241, 546, 547, 0, 0, 183, 519, 520, 492,
	184, 185, 1814, 187, 0, 0, 188, 189, 190, 512,
	0, 191, 192, 193, 246, 548, 0, 194, 0, 0,
	0, 0, 195, 196, 197, 198, 470, 0, 0, 498,
	487, 488, 485, 486, 474, 0, 0, 466, 467, 0,
	0, 0, 0, 468, 89, 90, 475, 91, 0, 0,
	0, 0, 514, 480, 0, 0, 0, 92, 93, 1813,
	528, 202, 529, 94, 530, 531, 0, 95, 206, 207,
	96, 495, 513, 532, 533, 210, 0, 524, 0, 506,
	0, 97, 98, 99, 0, 100, 0, 101, 102, 0,
	367, 103, 1815, 0, 507, 509, 0, 508, 510, 105,
	106, 107, 108, 534, 109, 535, 536, 0, 110, 0,
	111, 0, 0, 0, 527, 113, 0, 114, 0, 0,
	0, 479, 115, 116, 515, 493, 0, 0, 117, 118,
	537, 0, 119, 0, 120, 0, 0, 368, 0, 121,
	525, 0, 219, 0, 122, 123, 521, 523, 370, 0,
	126, 0, 124, 0, 369, 125, 538, 539, 540, 541,
	0, 505, 0, 371, 127, 372, 128, 129, 0, 0,
	526, 373, 130, 374, 0, 131, 0, 0, 132, 0,
	133, 134, 135, 136, 137, 375, 138, 139, 142, 140,
	469, 141, 494, 522, 143, 542, 144, 145, 0, 0,
	0, 0, 0, 146, 230, 376, 147, 377, 516, 148,
	149, 150, 0, 517, 151, 233, 152, 0, 153, 154,
	155, 543, 156, 157, 0, 159, 160, 158, 161, 0,
	162, 378, 163, 164, 483, 165, 0, 166, 167, 168,
	0, 236, 169, 170, 511, 171, 172, 379, 173, 544,
	238, 174, 0, 179, 175, 176, 178, 545, 177, 518,
	0, 180, 0, 181, 182, 0, 241, 546, 547, 0,
	0, 183, 519, 520, 492, 184, 185, 1814, 187, 0,
	0, 188, 189, 190, 512, 0, 191, 192, 193, 246,
	548, 0, 194, 0, 0, 0, 0, 195, 196, 197,
	198, 470, 0, 0, 498, 487, 488, 485, 486, 474,
	0, 0, 466, 467, 0, 0, 0, 0, 468, 89,
	90, 475, 91, 0, 0, 0, 0, 514, 480, 0,
	0, 0, 92, 93, 200, 528, 202, 529, 94, 530,
	531, 0, 95, 206, 207, 96, 495, 513, 532, 533,
	210, 0, 524, 0, 506, 0, 97, 98, 99, 0,
	100, 0, 101, 102, 0, 367, 103, 104, 0, 507,
	509, 0, 508, 510, 105, 106, 107, 108, 534, 109,
	535, 536, 0, 110, 0, 111, 0, 0, 0, 527,
	113, 0, 114, 0, 0, 0, 479, 115, 116, 515,
	493, 0, 0, 117, 118, 537, 0, 119, 0, 120,
	0, 0, 368, 0, 121, 525, 0, 219, 0, 122,
	123, 521, 523, 370, 0, 126, 0, 124, 0, 369,
	125, 538, 539, 540, 541, 0, 505, 0, 371, 127,
	372, 128, 129, 0, 0, 526, 373, 130, 374, 0,
	131, 0, 0, 132, 0, 133, 134, 135, 136, 137,
	375, 138, 139, 142, 140, 469, 141, 494, 522, 143,
	542, 144, 145, 0, 0, 0, 0, 0, 146, 230,
	376, 147, 377, 516, 148, 149, 150, 0, 517, 151,
	233, 152, 0, 153, 154, 155, 543, 156, 157, 0,
	159, 160, 158, 161, 0, 162, 378, 163, 164, 483,
	165, 0, 166, 167, 168, 0, 236, 169, 170, 511,
	171, 172, 379, 173, 544, 238, 174, 0, 179, 175,
	176, 178, 545, 177, 518, 0, 180, 0, 181, 182,
	0, 241, 546, 547, 0, 0, 183, 519, 520, 492,
	184, 185, 186, 187, 0, 0, 188, 189, 190, 512,
	0, 191, 192, 193, 246, 548, 0, 194, 0, 0,
	0, 0, 195, 196, 197, 198, 470, 0, 0, 498,
	487, 488, 485, 486, 474, 0, 0, 466, 467, 0,
	0, 0, 0, 468, 89, 90, 475, 91, 0, 0,
	0, 0, 514, 480, 0, 0, 0, 92, 93, 200,
	528, 202, 529, 94, 530, 531, 0, 95, 206, 207,
	96, 495, 513, 532, 533, 210, 0, 524, 0, 506,
	0, 97, 98, 99, 0, 100, 0, 101, 102, 0,
	367, 103, 104, 0, 507, 509, 0, 508, 510, 105,
	106, 107, 108, 534, 109, 535, 536, 0, 110, 0,
	111, 0, 0, 0, 527, 113, 0, 114, 0, 0,
	0, 479, 115, 116, 515, 493, 0, 0, 117, 118,
	537, 0, 119, 0, 120, 0, 0, 368, 0, 121,
	525, 0, 219, 0, 122, 123, 521, 523, 370, 0,
	126, 0, 124, 0, 369, 125, 538, 539, 540, 541,
	0, 505, 0, 371, 127, 372, 128, 129, 0, 0,
	526, 373, 130, 374, 0, 131, 0, 0, 132, 0,
	133, 134, 135, 136, 137, 375, 138, 139, 142, 140,
	0, 141, 494, 522, 143, 542, 144, 145, 0, 0,
	0, 0, 0, 146, 230, 376, 147, 377, 516, 148,
	149, 150, 0, 517, 151, 233, 152, 0, 153, 154,
	155, 543, 156, 157, 0, 159, 160, 158, 161, 0,
	162, 378, 163, 164, 1149, 165, 0, 166, 167, 168,
	0, 236, 169, 170, 511, 171, 172, 379, 173, 544,
	238, 174, 0, 179, 175, 176, 178, 545, 177, 518,
	0, 180, 0, 181, 182, 0, 241, 546, 547, 0,
	0, 183, 519, 520, 492, 184, 185, 186, 187, 0,
	0, 188, 189, 190, 512, 0, 191, 192, 193, 246,
	548, 0, 194, 0, 0, 0, 0, 195, 196, 197,
	198, 498, 487, 488, 485, 486, 474, 0, 0, 0,
	0, 0, 1145, 1146, 0, 0, 89, 90, 1147, 91,
	0, 1148, 0, 0, 514, 480, 0, 0, 0, 92,
	93, 0, 528, 202, 529, 94, 530, 531, 0, 95,
	206, 207, 96, 495, 513, 532, 533, 210, 0, 524,
	0, 506, 0, 97, 98, 99, 0, 100, 0, 101,
	102, 0, 367, 103, 1815, 0, 507, 509, 0, 508,
	510, 105, 106, 107, 108, 534, 109, 535, 536, 0,
	110, 0, 111, 0, 0, 0, 527, 113, 0, 114,
	0, 0, 0, 479, 115, 116, 515, 493, 0, 0,
	117, 118, 537, 0, 119, 0, 120, 0, 0, 368,
	0, 121, 525, 0, 219, 0, 122, 123, 521, 523,
	0, 0, 126, 0, 124, 0, 369, 125, 538, 539,
	540, 541, 0, 505, 0, 0, 127, 372, 128, 129,
	0, 0, 526, 373, 130, 0, 0, 131, 0, 0,
	132, 0, 133, 134, 135, 136, 137, 375, 138, 139,
	142, 140, 469, 141, 494, 522, 143, 542, 144, 145,
	0, 0, 0, 0, 0, 146, 230, 376, 147, 377,
	516, 148, 149, 150, 0, 517, 151, 233, 152, 0,
	153, 154, 155, 543, 156, 157, 0, 159, 160, 158,
	161, 0, 162, 378, 163, 164, 483, 165, 0, 166,
	167, 168, 0, 236, 169, 170, 511, 171, 172, 0,
	173, 544, 238, 174, 0, 179, 175, 176, 178, 545,
	177, 518, 0, 180, 0, 181, 182, 0, 241, 546,
	547, 0, 0, 183, 519, 520, 492, 184, 185, 1814,
	187, 0, 0, 188, 189, 190, 512, 0, 191, 192,
	193, 246, 548, 0, 194, 0, 0, 0, 0, 195,
	196, 197, 198, 498, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 466, 467, 0, 0, 89, 90,
	468, 91, 0, 475, 0, 0, 514, 0, 0, 0,
	0, 92, 93, 200, 201, 202, 203, 94, 204, 205,
	0, 95, 206, 207, 96, 0, 513, 208, 209, 210,
	0, 524, 0, 506, 0, 97, 98, 99, 0, 100,
	0, 101, 102, 0, 367, 103, 104, 0, 507, 509,
	0, 508, 510, 105, 106, 107, 108, 212, 109, 213,
	214, 0, 110, 0, 111, 0, 0, 0, 112, 113,
	0, 114, 0, 0, 0, 215, 115, 116, 515, 0,
	0, 0, 117, 118, 217, 0, 119, 0, 120, 0,
	0, 368, 0, 121, 525, 0, 219, 0, 122, 123,
	521, 523, 370, 0, 126, 0, 124, 0, 369, 125,
	222, 223, 224, 225, 0, 226, 0, 371, 127, 372,
	128, 129, 0, 0, 526, 373, 130, 374, 0, 131,
	0, 0, 132, 0, 133, 134, 135, 136, 137, 375,
	138, 139, 142, 140, 0, 141, 0, 522, 143, 229,
	144, 145, 0, 0, 0, 0, 0, 146, 230, 376,
	147, 377, 516, 148, 149, 150, 0, 517, 151, 233,
	152, 0, 153, 154, 155, 234, 156, 157, 0, 159,
	160, 158, 161, 0, 162, 378, 163, 164, 235, 165,
	0, 166, 167, 168, 0, 236, 169, 170, 511, 171,
	172, 379, 173, 237, 238, 174, 0, 179, 175, 176,
	178, 239, 177, 518, 0, 180, 0, 181, 182, 0,
	241, 242, 243, 0, 0, 183, 519, 520, 0, 184,
	185, 186, 187, 0, 0, 188, 189, 190, 512, 0,
	191, 192, 193, 246, 247, 0, 194, 0, 361, 0,
	0, 195, 196, 197, 198, 0, 0, 0, 0, 0,
	0, 0, 0, 89, 90, 0, 91, 0, 0, 0,
	0, 199, 0, 0, 0, 1586, 92, 93, 200, 201,
	202, 203, 94, 204, 205, 0, 95, 206, 207, 96,
	0, 0, 208, 209, 210, 0, 211, 0, 366, 0,
	97, 98, 99, 0, 100, 0, 101, 102, 0, 367,
	103, 104, 0, 0, 0, 0, 0, 0, 105, 106,
	107, 108, 212, 109, 213, 214, 0, 110, 0, 111,
	0, 0, 0, 112, 113, 0, 114, 0, 0, 0,
	215, 115, 116, 216, 0, 0, 0, 117, 118, 217,
	0, 119, 0, 120, 0, 0, 368, 0, 121, 218,
	0, 219, 0, 122, 123, 220, 221, 370, 0, 126,
	0, 124, 0, 369, 125, 222, 223, 224, 225, 0,
	226, 0, 371, 127, 372, 128, 129, 0, 0, 227,
	373, 130, 374, 0, 131, 0, 0, 132, 0, 133,
	134, 135, 136, 137, 375, 138, 139, 142, 140, 0,
	141, 0, 228, 143, 229, 144, 145, 0, 0, 0,
	0, 0, 146, 230, 376, 147, 377, 231, 148, 149,
	150, 0, 232, 151, 233, 152, 0, 153, 154, 155,
	234, 156, 157, 0, 159, 160, 158, 161, 0, 162,
	378, 163, 164, 235, 165, 0, 166, 167, 168, 59,
	236, 169, 170, 0, 171, 172, 379, 173, 237, 238,
	174, 0, 179, 175, 176, 178, 239, 177, 240, 0,
	180, 61, 181, 182, 0, 241, 242, 243, 0, 0,
	183, 244, 245, 0, 184, 185, 186, 187, 0, 0,
	188, 189, 190, 0, 0, 191, 192, 193, 365, 247,
	0, 194, 0, 0, 0, 57, 195, 196, 197, 198,
	0, 58, 0, 361, 673, 0, 674, 669, 664, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 89, 90,
	56, 91, 0, 0, 0, 0, 199, 0, 0, 0,
	0, 92, 93, 200, 201, 202, 203, 94, 204, 205,
	0, 95, 206, 207, 96, 0, 0, 208, 209, 210,
	0, 211, 0, 366, 0, 97, 98, 99, 0, 100,
	0, 101, 102, 0, 367, 103, 104, 0, 0, 0,
	0, 0, 0, 105, 106, 107, 108, 212, 109, 213,
	214, 677, 110, 0, 111, 0, 0, 0, 112, 113,
	0, 114, 0, 0, 0, 215, 115, 116, 216, 666,
	0, 0, 117, 118, 217, 0, 119, 0, 120, 0,
	0, 368, 0, 121, 218, 0, 219, 0, 122, 123,
	220, 221, 370, 0, 126, 0, 124, 0, 369, 125,
	222, 223, 224, 225, 0, 226, 0, 371, 127, 372,
	128, 129, 0, 0, 227, 373, 130, 374, 0, 131,
	0, 0, 132, 0, 133, 134, 135, 136, 137, 375,
	138, 139, 142, 140, 0, 141, 0, 228, 143, 229,
	144, 145, 0, 667, 0, 0, 0, 146, 230, 376,
	147, 377, 231, 148, 149, 150, 0, 232, 151, 233,
	152, 0, 153, 154, 155, 234, 156, 157, 0, 159,
	160, 158, 161, 0, 162, 378, 163, 164, 235, 165,
	0, 166, 167, 168, 0, 236, 169, 170, 0, 171,
	172, 379, 173, 237, 238, 174, 0, 179, 175, 176,
	178, 239, 177, 240, 0, 180, 0, 181, 182, 0,
	241, 242, 243, 0, 0, 183, 244, 245, 665, 184,
	185, 186, 187, 0, 0, 188, 189, 190, 0, 0,
	191, 192, 193, 246, 247, 0, 194, 0, 0, 0,
	0, 195, 196, 197, 198, 361, 673, 0, 674, 669,
	664, 0, 0, 0, 0, 0, 675, 670, 0, 0,
	89, 90, 0, 91, 0, 0, 0, 0, 199, 0,
	0, 0, 0, 92, 93, 200, 201, 202, 203, 94,
	204, 205, 0, 95, 206, 207, 96, 0, 0, 208,
	209, 210, 0, 211, 0, 366, 0, 97, 98, 99,
	0, 100, 0, 101, 102, 0, 367, 103, 104, 0,
	0, 0, 0, 0, 0, 105, 106, 107, 108, 212,
	109, 213, 214, 660, 110, 0, 111, 0, 0, 0,
	112, 113, 0, 114, 0, 0, 0, 215, 115, 116,
	216, 666, 0, 0, 117, 118, 217, 0, 119, 0,
	120, 0, 0, 368, 0, 121, 218, 0, 219, 0,
	122, 123, 220, 221, 370, 0, 126, 0, 124, 0,
	369, 125, 222, 223, 224, 225, 0, 226, 0, 371,
	127, 372, 128, 129, 0, 0, 227, 373, 130, 374,
	0, 131, 0, 0, 132, 0, 133, 134, 135, 136,
	137, 375, 138, 139, 142, 140, 0, 141, 0, 228,
	143, 229, 144, 145, 0, 667, 0, 0, 0, 146,
	230, 376, 147, 377, 231, 148, 149, 150, 0, 232,
	151, 233, 152, 0, 153, 154, 155, 234, 156, 157,
	0, 159, 160, 158, 161, 0, 162, 378, 163, 164,
	235, 165, 0, 166, 167, 168, 0, 236, 169, 170,
	0, 171, 172, 379, 173, 237, 238, 174, 0, 179,
	175, 176, 178, 239, 177, 240, 0, 180, 0, 181,
	182, 0, 241, 242, 243, 0, 0, 183, 244, 245,
	665, 184, 185, 186, 187, 0, 0, 188, 189, 190,
	0, 0, 191, 192, 193, 246, 247, 0, 194, 0,
	0, 0, 0, 195, 196, 197, 198, 361, 673, 0,
	674, 669, 664, 0, 0, 0, 0, 0, 675, 670,
	0, 0, 89, 90, 0, 91, 0, 0, 0, 0,
	199, 0, 0, 0, 0, 92, 93, 200, 201, 202,
	203, 94, 204, 205, 0, 95, 206, 207, 96, 0,
	0, 208, 209, 210, 0, 211, 0, 366, 0, 97,
	98, 99, 0, 100, 0, 101, 102, 0, 367, 103,
	104, 0, 0, 0, 0, 0, 0, 105, 106, 107,
	108, 212, 109, 213, 214, 0, 110, 0, 111, 0,
	0, 0, 112, 113, 0, 114, 0, 0, 0, 215,
	115, 116, 216, 666, 0, 0, 117, 118, 217, 0,
	119, 0, 120, 0, 0, 368, 0, 121, 218, 0,
	219, 0, 122, 123, 220, 221, 370, 0, 126, 0,
	124, 0, 369, 125, 222, 223, 224, 225, 0, 226,
	0, 371, 127, 372, 128, 129, 0, 0, 227, 373,
	130, 374, 0, 131, 0, 0, 132, 0, 133, 134,
	135, 136, 137, 375, 138, 139, 142, 140, 0, 141,
	0, 228, 143, 229, 144, 145, 0, 667, 0, 0,
	0, 146, 230, 376, 147, 377, 231, 148, 149, 150,
	0, 232, 151, 233, 152, 0, 153, 154, 155, 234,
	156, 157, 0, 159, 160, 158, 161, 0, 162, 378,
	163, 164, 235, 165, 0, 166, 167, 168, 0, 236,
	169, 170, 0, 171, 172, 379, 173, 237, 238, 174,
	0, 179, 175, 176, 178, 239, 177, 240, 0, 180,
	0, 181, 182, 0, 241, 242, 243, 0, 0, 183,
	244, 245, 665, 184, 185, 186, 187, 0, 0, 188,
	189, 190, 0, 0, 191, 192, 193, 246, 247, 86,
	194, 0, 0, 0, 0, 195, 196, 197, 198, 0,
	0, 0, 0, 0, 89, 90, 0, 91, 0, 0,
	675, 670, 199, 0, 0, 0, 0, 92, 93, 200,
	201, 202, 203, 94, 204, 205, 0, 95, 206, 207,
	96, 0, 0, 208, 209, 210, 0, 211, 0, 0,
	0, 97, 98, 99, 0, 100, 0, 101, 102, 0,
	0, 103, 104, 0, 0, 0, 0, 0, 0, 105,
	106, 107, 108, 212, 109, 213, 214, 0, 110, 0,
	111, 0, 0, 0, 112, 113, 0, 114, 0, 0,
	0, 215, 115, 116, 216, 0, 0, 0, 117, 118,
	217, 0, 119, 0, 120, 0, 0, 0, 0, 121,
	218, 0, 219, 0, 122, 123, 220, 221, 0, 0,
	126, 0, 124, 0, 0, 125, 222, 223, 224, 225,
	0, 226, 0, 0, 127, 0, 128, 129, 0, 0,
	227, 0, 130, 0, 0, 131, 0, 0, 132, 0,
	133, 134, 135, 136, 137, 0, 138, 139, 142, 140,
	0, 141, 0, 228, 143, 229, 144, 145, 0, 0,
	0, 0, 0, 146, 230, 0, 147, 0, 231, 148,
	149, 150, 0, 232, 151, 233, 152, 0, 153, 154,
	155, 234, 156, 157, 0, 159, 160, 158, 161, 0,
	162, 0, 163, 164, 235, 165, 0, 166, 167, 168,
	59, 236, 169, 170, 0, 171, 172, 0, 173, 237,
	238, 174, 0, 179, 175, 176, 178, 239, 177, 240,
	0, 180, 61, 181, 182, 0, 241, 242, 243, 0,
	0, 183, 244, 245, 0, 184, 185, 186, 187, 0,
	0, 188, 189, 190, 0, 0, 191, 192, 193, 365,
	247, 0, 194, 0, 86, 0, 57, 195, 196, 197,
	198, 0, 58, 0, 0, 0, 0, 0, 0, 89,
	90, 0, 91, 0, 0, 0, 0, 199, 0, 1271,
	0, 56, 92, 93, 200, 201, 202, 203, 94, 204,
	205, 0, 95, 206, 207, 96, 0, 0, 208, 209,
	210, 0, 211, 0, 0, 0, 97, 98, 99, 0,
	100, 0, 101, 102, 0, 0, 103, 104, 0, 0,
	0, 0, 0, 0, 105, 106, 107, 108, 212, 109,
	213, 214, 0, 110, 0, 111, 0, 0, 0, 112,
	113, 0, 114, 0, 0, 0, 215, 115, 116, 216,
	0, 0, 0, 117, 118, 217, 0, 119, 0, 120,
	0, 0, 0, 0, 121, 218, 0, 219, 0, 122,
	123, 220, 221, 0, 0, 126, 0, 124, 0, 0,
	125, 222, 223, 224, 225, 0, 226, 0, 0, 127,
	0, 128, 129, 0, 0, 227, 0, 130, 0, 0,
	131, 0, 0, 132, 0, 133, 134, 135, 136, 137,
	0, 138, 139, 142, 140, 0, 141, 0, 228, 143,
	229, 144, 145, 0, 0, 0, 0, 0, 146, 230,
	0, 147, 0, 231, 148, 149, 150, 0, 232, 151,
	233, 152, 0, 153, 154, 155, 234, 156, 157, 0,
	159, 160, 158, 161, 0, 162, 0, 163, 164, 235,
	165, 0, 166, 167, 168, 0, 236, 169, 170, 0,
	171, 172, 0, 173, 237, 238, 174, 0, 179, 175,
	176, 178, 239, 177, 240, 0, 180, 0, 181, 182,
	0, 241, 242, 243, 0, 0, 183, 244, 245, 0,
	184, 185, 186, 187, 0, 0, 188, 189, 190, 0,
	0, 191, 192, 193, 246, 247, 0, 194, 0, 0,
	86, 0, 195, 196, 197, 198, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 89, 90, 0, 91, 0,
	0, 0, 0, 199, 0, 0, 0, 456, 92, 93,
	200, 201, 202, 203, 94, 204, 205, 0, 95, 206,
	207, 96, 0, 0, 208, 209, 210, 0, 211, 0,
	0, 0, 97, 98, 99, 0, 100, 0, 101, 102,
	0, 0, 103, 104, 0, 0, 0, 0, 0, 0,
	105, 106, 107, 108, 212, 109, 213, 214, 0, 110,
	0, 111, 0, 0, 0, 112, 113, 0, 114, 0,
	0, 0, 215, 115, 116, 216, 0, 0, 0, 117,
	118, 217, 0, 119, 0, 120, 0, 0, 0, 0,
	121, 218, 0, 219, 0, 122, 123, 220, 221, 0,
	0, 126, 0, 124, 0, 0, 125, 222, 223, 224,
	225, 0, 226, 0, 0, 127, 0, 128, 129, 0,
	0, 227, 0, 130, 0, 0, 131, 0, 0, 132,
	0, 133, 134, 135, 136, 137, 0, 138, 139, 142,
	140, 0, 141, 0, 228, 143, 229, 144, 145, 0,
	0, 335, 0, 0, 146, 230, 0, 147, 0, 231,
	148, 149, 150, 0, 232, 151, 233, 152, 0, 153,
	154, 155, 234, 156, 157, 0, 159, 160, 158, 161,
	0, 162, 0, 163, 164, 235, 165, 0, 166, 167,
	168, 0, 236, 169, 170, 0, 171, 172, 0, 173,
	237, 238, 174, 0, 179, 175, 176, 178, 239, 177,
	240, 0, 180, 0, 181, 182, 0, 241, 242, 243,
	0, 0, 183, 244, 245, 0, 184, 185, 186, 187,
	0, 0, 188, 189, 190, 0, 0, 191, 192, 193,
	246, 247, 0, 194, 0, 86, 0, 0, 195, 196,
	197, 198, 0, 0, 0, 0, 0, 0, 0, 0,
	89, 90, 0, 91, 0, 0, 0, 0, 199, 0,
	0, 0, 1050, 92, 93, 200, 201, 202, 203, 94,
	204, 205, 0, 95, 206, 207, 96, 0, 0, 208,
	209, 210, 0, 211, 0, 0, 0, 97, 98, 99,
	0, 100, 0, 101, 102, 0, 0, 103, 104, 0,
	0, 0, 0, 0, 0, 105, 106, 107, 108, 212,
	109, 213, 214, 0, 110, 0, 111, 0, 0, 0,
	112, 113, 0, 114, 0, 0, 0, 215, 115, 116,
	216, 0, 0, 0, 117, 118, 217, 0, 119, 0,
	120, 0, 0, 0, 0, 121, 218, 0, 219, 0,
	122, 123, 220, 221, 0, 0, 126, 0, 124, 0,
	0, 125, 222, 223, 224, 225, 0, 226, 0, 0,
	127, 0, 128, 129, 0, 0, 227, 0, 130, 0,
	0, 131, 0, 0, 132, 0, 133, 134, 135, 136,
	137, 0, 138, 139, 142, 140, 0, 141, 0, 228,
	143, 229, 144, 145, 0, 0, 0, 0, 0, 146,
	230, 0, 147, 0, 231, 148, 149, 150, 0, 232,
	151, 233, 152, 0, 153, 154, 155, 234, 156, 157,
	0, 159, 160, 158, 161, 0, 162, 0, 163, 164,
	235, 165, 0, 166, 167, 168, 0, 236, 169, 170,
	0, 171, 172, 0, 173, 237, 238, 174, 0, 179,
	175, 176, 178, 239, 177, 240, 0, 180, 0, 181,
	182, 0, 241, 242, 243, 0, 0, 183, 244, 245,
	0, 184, 185, 186, 187, 0, 0, 188, 189, 190,
	0, 0, 191, 192, 193, 246, 247, 0, 194, 0,
	86, 0, 0, 195, 196, 197, 198, 0, 0, 0,
	0, 0, 0, 0, 0, 89, 90, 0, 91, 0,
	0, 0, 0, 199, 0, 0, 0, 958, 92, 93,
	200, 201, 202, 203, 94, 204, 205, 0, 95, 206,
	207, 96, 0, 0, 208, 209, 210, 0, 211, 0,
	0, 0, 97, 98, 99, 0, 100, 0, 101, 102,
	0, 0, 103, 104, 0, 0, 0, 0, 0, 0,
	105, 106, 107, 108, 212, 109, 213, 214, 0, 110,
	0, 111, 0, 0, 0, 112, 113, 0, 114, 0,
	0, 0, 215, 115, 116, 216, 0, 0, 0, 117,
	118, 217, 0, 119, 0, 120, 0, 0, 0, 0,
	121, 218, 0, 219, 0, 122, 123, 220, 221, 0,
	0, 126, 0, 124, 0, 0, 125, 222, 223, 224,
	225, 0, 226, 0, 0, 127, 0, 128, 129, 0,
	0, 227, 0, 130, 0, 0, 131, 0, 0, 132,
	0, 133, 134, 135, 136, 137, 0, 138, 139, 142,
	140, 0, 141, 0, 228, 143, 229, 144, 145, 0,
	0, 0, 0, 0, 146, 230, 0, 147, 0, 231,
	148, 149, 150, 0, 232, 151, 233, 152, 0, 153,
	154, 155, 234, 156, 157, 0, 159, 160, 158, 161,
	0, 162, 0, 163, 164, 235, 165, 0, 166, 167,
	168, 0, 236, 169, 170, 0, 171, 172, 0, 173,
	237, 238, 174, 0, 179, 175, 176, 178, 239, 177,
	240, 0, 180, 0, 181, 182, 0, 241, 242, 243,
	0, 0, 183, 244, 245, 0, 184, 185, 186, 187,
	0, 0, 188, 189, 190, 0, 0, 191, 192, 193,
	246, 247, 0, 194, 0, 86, 0, 0, 195, 196,
	197, 198, 0, 0, 0, 0, 0, 0, 0, 0,
	89, 90, 0, 91, 0, 0, 0, 0, 199, 0,
	0, 0, 1486, 92, 93, 200, 201, 202, 203, 94,
	204, 205, 0, 95, 206, 207, 96, 0, 0, 208,
	209, 210, 0, 211, 0, 0, 0, 97, 98, 99,
	0, 100, 0, 101, 102, 0, 0, 103, 104, 0,
	0, 0, 0, 0, 0, 105, 106, 107, 108, 212,
	109, 213, 214, 0, 110, 0, 111, 0, 0, 0,
	112, 113, 0, 114, 0, 0, 0, 215, 115, 116,
	216, 0, 0, 0, 117, 118, 217, 0, 119, 0,
	120, 0, 0, 0, 0, 121, 218, 0, 219, 0,
	122, 123, 220, 221, 0, 0, 126, 0, 124, 0,
	0, 125, 222, 223, 224, 225, 0, 226, 0, 0,
	127, 0, 128, 129, 0, 0, 227, 0, 130, 0,
	0, 131, 0, 0, 132, 0, 133, 134, 135, 136,
	137, 0, 138, 139, 142, 140, 0, 141, 0, 228,
	143, 229, 144, 145, 0, 0, 0, 0, 0, 146,
	230, 0, 147, 0, 231, 148, 149, 150, 0, 232,
	151, 233, 152, 0, 153, 154, 155, 234, 156, 157,
	0, 159, 160, 158, 161, 0, 162, 0, 163, 164,
	235, 165, 0, 166, 167, 168, 0, 236, 169, 170,
	0, 171, 172, 0, 173, 237, 238, 174, 0, 179,
	175, 176, 178, 239, 177, 240, 0, 180, 0, 181,
	182, 0, 241, 242, 243, 0, 0, 183, 244, 245,
	0, 184, 185, 186, 187, 0, 0, 188, 189, 190,
	0, 0, 191, 192, 193, 246, 247, 0, 194, 0,
	86, 0, 0, 195, 196, 197, 198, 0, 0, 0,
	0, 0, 0, 0, 0, 89, 90, 0, 91, 0,
	0, 0, 0, 199, 0, 0, 0, 559, 92, 93,
	200, 201, 202, 203, 94, 204, 205, 0, 95, 206,
	207, 96, 0, 0, 208, 209, 210, 0, 211, 0,
	0, 0, 97, 98, 99, 0, 100, 0, 101, 102,
	0, 0, 103, 104, 0, 0, 0, 0, 0, 0,
	105, 106, 644, 108, 212, 109, 213, 214, 0, 110,
	0, 111, 0, 0, 0, 112, 113, 0, 114, 0,
	0, 0, 215, 115, 116, 216, 0, 0, 0, 117,
	118, 217, 0, 119, 0, 120, 0, 0, 0, 0,
	121, 218, 0, 219, 0, 122, 123, 220, 221, 0,
	0, 126, 0, 124, 0, 0, 125, 222, 223, 224,
	225, 0, 226, 0, 0, 127, 0, 128, 129, 0,
	0, 227, 0, 130, 0, 0, 131, 0, 0, 132,
	0, 133, 134, 135, 136, 137, 0, 138, 139, 142,
	140, 0, 141, 0, 228, 143, 229, 144, 145, 0,
	0, 0, 0, 0, 146, 230, 0, 147, 0, 231,
	148, 149, 150, 0, 232, 151, 233, 152, 0, 153,
	154, 155, 234, 156, 157, 0, 159, 160, 158, 161,
	0, 162, 0, 163, 164, 235, 165, 0, 166, 167,
	168, 0, 236, 169, 170, 0, 171, 172, 0, 173,
	237, 238, 174, 0, 179, 175, 176, 178, 239, 177,
	240, 0, 180, 643, 181, 182, 0, 241, 242, 243,
	0, 0, 183, 244, 245, 0, 184, 185, 186, 187,
	0, 0, 188, 189, 190, 0, 0, 191, 192, 193,
	246, 247, 0, 194, 86, 0, 0, 0, 195, 196,
	197, 198, 0, 0, 0, 0, 0, 0, 0, 89,
	90, 0, 91, 0, 0, 647, 0, 199, 0, 0,
	0, 0, 92, 93, 200, 201, 202, 203, 94, 204,
	205, 0, 95, 206, 207, 96, 0, 0, 208, 209,
	210, 0, 211, 0, 0, 0, 97, 98, 99, 0,
	100, 0, 101, 102, 0, 0, 103, 104, 0, 0,
	0, 0, 0, 0, 105, 106, 107, 108, 212, 109,
	213, 214, 0, 110, 0, 111, 0, 0, 0, 112,
	113, 0, 114, 0, 0, 0, 215, 115, 116, 216,
	0, 0, 0, 117, 118, 217, 0, 119, 0, 120,
	0, 0, 0, 0, 121, 218, 0, 219, 0, 122,
	123, 220, 221, 0, 0, 126, 0, 124, 0, 0,
	125, 222, 223, 224, 225, 0, 226, 0, 0, 127,
	0, 128, 129, 0, 0, 227, 0, 130, 0, 0,
	131, 0, 0, 132, 0, 133, 134, 135, 136, 137,
	0, 138, 139, 142, 140, 0, 141, 0, 228, 143,
	229, 144, 145, 0, 0, 0, 0, 0, 146, 230,
	0, 147, 0, 231, 148, 149, 150, 0, 232, 151,
	233, 152, 0, 153, 154, 155, 234, 156, 157, 0,
	159, 160, 158, 161, 0, 162, 0, 163, 164, 235,
	165, 0, 166, 167, 168, 0, 236, 169, 170, 0,
	171, 172, 0, 173, 237, 238, 174, 0, 179, 175,
	176, 178, 239, 177, 240, 0, 180, 0, 181, 182,
	0, 241, 242, 243, 0, 0, 183, 244, 245, 0,
	184, 185, 186, 187, 0, 0, 188, 189, 190, 0,
	0, 191, 192, 193, 246, 247, 0, 194, 361, 0,
	0, 0, 195, 196, 197, 198, 0, 0, 0, 0,
	0, 0, 0, 89, 90, 0, 91, 0, 0, 647,
	0, 199, 0, 0, 0, 0, 92, 93, 200, 201,
	202, 203, 94, 204, 205, 0, 95, 206, 207, 96,
	0, 0, 208, 209, 210, 0, 211, 0, 366, 0,
	97, 98, 99, 0, 100, 0, 101, 102, 0, 367,
	103, 104, 0, 0, 0, 0, 0, 0, 105, 106,
	107, 108, 212, 109, 213, 214, 0, 110, 0, 111,
	0, 0, 0, 112, 113, 0, 114, 0, 0, 0,
	215, 115, 116, 216, 0, 0, 0, 117, 118, 217,
	0, 119, 0, 120, 0, 0, 368, 0, 121, 218,
	0, 219, 0, 122, 123, 220, 221, 370, 0, 126,
	0, 124, 0, 369, 125, 222, 223, 224, 225, 0,
	226, 0, 371, 127, 372, 128, 129, 0, 0, 227,
	373, 130, 374, 0, 131, 0, 0, 132, 0, 133,
	134, 135, 136, 137, 375, 138, 139, 142, 140, 0,
	141, 0, 228, 143, 229, 144, 145, 0, 0, 0,
	0, 0, 146, 230, 376, 147, 377, 231, 148, 149,
	150, 0, 232, 151, 233, 152, 0, 153, 154, 155,
	234, 156, 157, 0, 159, 160, 158, 161, 0, 162,
	378, 163, 164, 235, 165, 0, 166, 167, 168, 0,
	236, 169, 170, 0, 171, 172, 379, 173, 237, 238,
	174, 0, 179, 175, 176, 178, 239, 177, 240, 0,
	180, 0, 181, 182, 0, 241, 242, 243, 0, 0,
	183, 244, 245, 0, 184, 185, 186, 187, 0, 0,
	188, 189, 190, 0, 0, 191, 192, 193, 246, 247,
	86, 194, 0, 0, 0, 0, 195, 196, 197, 198,
	0, 0, 0, 0, 0, 89, 90, 0, 91, 0,
	0, 0, 0, 199, 0, 0, 0, 0, 92, 93,
	200, 201, 202, 203, 94, 204, 205, 0, 95, 206,
	207, 96, 0, 0, 208, 209, 210, 931, 211, 0,
	0, 0, 97, 98, 99, 0, 100, 929, 101, 102,
	0, 0, 103, 104, 0, 0, 0, 0, 0, 0,
	105, 106, 107, 108, 212, 109, 213, 214, 0, 110,
	0, 111, 0, 0, 0, 112, 113, 0, 114, 0,
	0, 0, 215, 115, 116, 216, 0, 1026, 0, 117,
	118, 217, 0, 119, 0, 120, 934, 0, 0, 0,
	121, 218, 0, 219, 0, 122, 123, 220, 221, 0,
	0, 126, 1024, 124, 0, 0, 125, 222, 223, 224,
	225, 0, 226, 0, 0, 127, 0, 128, 129, 0,
	0, 227, 0, 130, 0, 0, 131, 0, 0, 132,
	0, 133, 134, 135, 136, 137, 0, 138, 139, 142,
	140, 0, 141, 0, 228, 143, 229, 144, 145, 0,
	0, 0, 0, 0, 146, 230, 0, 147, 0, 231,
	148, 149, 150, 0, 232, 151, 233, 152, 933, 153,
	154, 155, 234, 156, 157, 0, 159, 160, 158, 161,
	0, 162, 0, 163, 164, 235, 165, 0, 166, 167,
	168, 0, 236, 169, 170, 0, 171, 172, 0, 173,
	237, 238, 174, 0, 179, 175, 176, 178, 239, 177,
	240, 0, 180, 0, 181, 182, 0, 241, 242, 243,
	0, 0, 183, 244, 245, 0, 184, 185, 186, 187,
	0, 1025, 188, 189, 190, 0, 0, 191, 192, 193,
	246, 247, 86, 194, 0, 0, 0, 0, 195, 196,
	197, 198, 0, 0, 0, 0, 0, 89, 90, 0,
	91, 0, 0, 0, 0, 199, 0, 0, 0, 0,
	92, 93, 200, 201, 202, 203, 94, 204, 205, 0,
	95, 206, 207, 96, 0, 0, 208, 209, 210, 931,
	211, 0, 0, 926, 97, 98, 99, 0, 100, 929,
	101, 102, 0, 0, 103, 104, 0, 0, 0, 0,
	0, 0, 105, 106, 107, 108, 212, 109, 213, 214,
	0, 110, 0, 111, 0, 0, 0, 112, 113, 0,
	114, 0, 0, 0, 215, 115, 116, 216, 0, 0,
	0, 117, 118, 217, 0, 119, 0, 120, 934, 0,
	0, 0, 121, 218, 0, 219, 0, 122, 123, 925,
	221, 0, 0, 126, 0, 124, 0, 0, 125, 222,
	223, 224, 225, 0, 226, 0, 0, 127, 0, 128,
	129, 0, 0, 227, 0, 130, 0, 0, 131, 0,
	0, 132, 0, 133, 134, 135, 136, 137, 0, 138,
	139, 142, 140, 0, 141, 0, 228, 143, 229, 144,
	145, 0, 0, 0, 0, 0, 146, 230, 0, 147,
	0, 231, 148, 149, 150, 0, 232, 151, 233, 152,
	933, 153, 154, 155, 234, 156, 157, 0, 159, 160,
	158, 161, 0, 162, 0, 163, 164, 235, 165, 0,
	166, 167, 168, 0, 236, 169, 170, 0, 171, 172,
	0, 173, 237, 238, 174, 0, 179, 175, 176, 178,
	239, 177, 240, 0, 180, 0, 181, 182, 0, 241,
	242, 243, 0, 0, 183, 244, 245, 0, 184, 185,
	186, 187, 0, 932, 188, 189, 190, 0, 0, 191,
	192, 193, 246, 247, 86, 194, 0, 0, 0, 0,
	195, 196, 197, 198, 0, 0, 0, 0, 0, 89,
	90, 0, 91, 0, 0, 0, 0, 199, 0, 1271,
	0, 0, 92, 93, 200, 201, 202, 203, 94, 204,
	205, 0, 95, 206, 207, 96, 0, 0, 208, 209,
	210, 0, 211, 0, 0, 0, 97, 98, 99, 0,
	100, 0, 101, 102, 0, 0, 103, 104, 0, 0,
	0, 0, 0, 0, 105, 106, 107, 108, 212, 109,
	213, 214, 0, 110, 0, 111, 0, 0, 0, 112,
	113, 0, 114, 0, 0, 0, 215, 115, 116, 216,
	0, 0, 0, 117, 118, 217, 0, 119, 0, 120,
	0, 0, 0, 0, 121, 218, 0, 219, 0, 122,
	123, 220, 221, 0, 0, 126, 0, 124, 0, 0,
	125, 222, 223, 224, 225, 0, 226, 0, 0, 127,
	0, 128, 129, 0, 0, 227, 0, 130, 0, 0,
	131, 0, 0, 132, 0, 133, 134, 135, 136, 137,
	0, 138, 139, 142, 140, 0, 141, 0, 228, 143,
	229, 144, 145, 0, 0, 0, 0, 0, 146, 230,
	0, 147, 0, 231, 148, 149, 150, 0, 232, 151,
	233, 152, 0, 153, 154, 155, 234, 156, 157, 0,
	159, 160, 158, 161, 0, 162, 0, 163, 164, 235,
	165, 0, 166, 167, 168, 0, 236, 169, 170, 0,
	171, 172, 0, 173, 237, 238, 174, 0, 179, 175,
	176, 178, 239, 177, 240, 0, 180, 0, 181, 182,
	0, 241, 242, 243, 0, 0, 183, 244, 245, 0,
	184, 185, 186, 187, 0, 0, 188, 189, 190, 0,
	0, 191, 192, 193, 246, 247, 86, 194, 0, 0,
	0, 0, 195, 196, 197, 198, 0, 0, 0, 0,
	0, 89, 90, 0, 91, 0, 0, 0, 0, 199,
	0, 0, 0, 0, 92, 93, 200, 201, 202, 203,
	94, 204, 205, 0, 95, 206, 207, 96, 0, 0,
	208, 209, 210, 0, 211, 0, 0, 0, 97, 98,
	99, 0, 100, 0, 101, 102, 0, 0, 103, 104,
	0, 0, 0, 0, 0, 0, 105, 106, 107, 108,
	212, 109, 213, 214, 0, 110, 0, 111, 0, 0,
	0, 112, 113, 0, 114, 0, 0, 0, 215, 115,
	116, 216, 0, 0, 0, 117, 118, 217, 0, 119,
	0, 120, 0, 0, 0, 0, 121, 218, 0, 219,
	0, 122, 123, 220, 221, 0, 0, 126, 0, 124,
	0, 0, 125, 222, 223, 224, 225, 0, 226, 0,
	0, 127, 0, 128, 129, 0, 0, 227, 0, 130,
	0, 0, 131, 0, 0, 132, 0, 133, 134, 135,
	136, 137, 0, 138, 139, 142, 140, 0, 141, 0,
	228, 143, 229, 144, 145, 0, 0, 335, 0, 0,
	146, 230, 0, 147, 0, 231, 148, 149, 150, 0,
	232, 151, 233, 152, 0, 153, 154, 155, 234, 156,
	157, 0, 159, 160, 158, 161, 0, 162, 0, 163,
	164, 235, 165, 0, 166, 167, 168, 0, 236, 169,
	170, 0, 171, 172, 0, 173, 237, 238, 174, 0,
	179, 175, 176, 178, 239, 177, 240, 0, 180, 0,
	181, 182, 0, 241, 242, 243, 0, 0, 183, 244,
	245, 0, 184, 185, 186, 187, 0, 0, 188, 189,
	190, 0, 0, 191, 192, 193, 246, 247, 86, 194,
	0, 0, 0, 0, 195, 196, 197, 198, 0, 0,
	0, 0, 0, 89, 90, 0, 91, 0, 0, 0,
	0, 199, 0, 0, 0, 0, 92, 93, 200, 201,
	202, 203, 94, 204, 205, 0, 95, 206, 207, 96,
	0, 0, 208, 209, 210, 0, 211, 0, 0, 0,
	97, 98, 99, 0, 100, 0, 101, 102, 0, 0,
	103, 104, 0, 0, 0, 0, 0, 0, 105, 106,
	107, 108, 212, 109, 213, 214, 0, 110, 0, 111,
	0, 0, 0, 112, 113, 0, 114, 0, 0, 0,
	215, 115, 116, 216, 0, 0, 0, 117, 118, 217,
	0, 119, 0, 120, 0, 0, 0, 0, 121, 218,
	0, 219, 0, 122, 123, 595, 221, 0, 0, 126,
	0, 124, 0, 0, 125, 222, 223, 224, 225, 0,
	226, 0, 0, 127, 0, 128, 129, 0, 0, 227,
	0, 130, 0, 0, 131, 0, 0, 132, 0, 133,
	134, 135, 136, 137, 0, 138, 139, 142, 140, 0,
	141, 0, 228, 143, 229, 144, 145, 0, 0, 335,
	0, 0, 146, 230, 0, 147, 0, 231, 148, 149,
	150, 0, 232, 151, 233, 152, 0, 153, 154, 155,
	234, 156, 157, 0, 159, 160, 158, 161, 0, 162,
	0, 163, 164, 235, 165, 0, 166, 167, 168, 0,
	236, 169, 170, 0, 171, 172, 0, 173, 237, 238,
	174, 0, 179, 175, 176, 178, 239, 177, 240, 0,
	180, 0, 181, 182, 0, 241, 242, 243, 0, 0,
	183, 244, 245, 0, 184, 185, 186, 187, 0, 0,
	188, 189, 190, 0, 0, 191, 192, 193, 246, 247,
	86, 194, 0, 0, 0, 0, 195, 196, 197, 198,
	0, 0, 0, 0, 0, 89, 90, 386, 91, 0,
	0, 0, 0, 199, 0, 0, 0, 0, 92, 93,
	200, 201, 202, 203, 94, 204, 205, 0, 95, 206,
	207, 96, 0, 0, 208, 209, 210, 0, 211, 0,
	0, 0, 97, 98, 99, 0, 100, 0, 101, 102,
	0, 0, 103, 104, 0, 0, 0, 0, 0, 0,
	105, 106, 107, 108, 212, 109, 213, 214, 0, 110,
	0, 111, 0, 0, 0, 112, 113, 0, 114, 0,
	0, 0, 215, 115, 116, 216, 0, 0, 0, 117,
	118, 217, 0, 119, 0, 120, 0, 0, 0, 0,
	121, 218, 0, 219, 0, 122, 123, 220, 221, 0,
	0, 126, 0, 124, 0, 0, 125, 222, 223, 224,
	225, 0, 226, 0, 0, 127, 0, 128, 129, 0,
	0, 227, 0, 130, 0, 0, 131, 0, 0, 132,
	0, 133, 134, 135, 136, 137, 0, 138, 139, 142,
	140, 0, 141, 0, 228, 143, 229, 144, 145, 0,
	0, 0, 0, 0, 146, 230, 0, 147, 0, 231,
	148, 149, 150, 0, 232, 151, 233, 152, 0, 153,
	154, 155, 234, 156, 157, 0, 159, 160, 158, 161,
	0, 162, 0, 163, 164, 235, 165, 0, 166, 167,
	168, 0, 236, 169, 170, 0, 171, 172, 0, 173,
	237, 238, 174, 0, 179, 175, 176, 178, 239, 177,
	240, 0, 180, 0, 181, 182, 0, 241, 242, 243,
	0, 0, 183, 244, 245, 0, 184, 185, 186, 187,
	0, 0, 188, 189, 190, 0, 0, 191, 192, 193,
	246, 247, 86, 194, 0, 0, 0, 0, 195, 196,
	197, 198, 0, 0, 0, 0, 0, 89, 90, 0,
	91, 0, 0, 0, 0, 199, 0, 0, 0, 0,
	92, 93, 200, 201, 202, 203, 94, 204, 205, 0,
	95, 206, 207, 96, 0, 0, 208, 209, 210, 0,
	211, 0, 0, 0, 97, 98, 99, 0, 100, 0,
	101, 102, 0, 0, 103, 104, 0, 0, 0, 0,
	0, 0, 105, 106, 107, 108, 212, 109, 213, 214,
	0, 110, 0, 111, 0, 0, 0, 112, 113, 0,
	114, 0, 0, 0, 215, 115, 116, 216, 0, 0,
	0, 117, 118, 217, 0, 119, 0, 120, 0, 0,
	0, 0, 121, 218, 0, 219, 0, 122, 123, 340,
	221, 0, 0, 126, 0, 124, 0, 0, 125, 222,
	223, 224, 225, 0, 226, 0, 0, 127, 0, 128,
	129, 0, 0, 227, 0, 130, 0, 0, 131, 0,
	0, 132, 0, 133, 134, 135, 136, 137, 0, 138,
	139, 142, 140, 0, 141, 0, 228, 143, 229, 144,
	145, 0, 0, 335, 0, 0, 146, 230, 0, 147,
	0, 231, 148, 149, 150, 0, 232, 151, 233, 152,
	0, 153, 154, 155, 234, 156, 157, 0, 159, 160,
	158, 161, 0, 162, 0, 163, 164, 235, 165, 0,
	166, 167, 168, 0, 236, 169, 170, 0, 171, 172,
	0, 173, 237, 238, 174, 0, 179, 175, 176, 178,
	239, 177, 240, 0, 180, 0, 181, 182, 0, 241,
	242, 243, 0, 0, 183, 244, 245, 0, 184, 185,
	186, 187, 0, 0, 188, 189, 190, 0, 0, 191,
	192, 193, 246, 247, 86, 194, 0, 0, 0, 0,
	195, 196, 197, 198, 0, 0, 0, 0, 0, 89,
	90, 251, 91, 0, 0, 0, 0, 199, 0, 0,
	0, 0, 92, 93, 200, 201, 202, 203, 94, 204,
	205, 0, 95, 206, 207, 96, 0, 0, 208, 209,
	210, 0, 211, 0, 0, 0, 97, 98, 99, 0,
	100, 0, 101, 102, 0, 0, 103, 104, 0, 0,
	0, 0, 0, 0, 105, 106, 107, 108, 212, 109,
	213, 214, 0, 110, 0, 111, 0, 0, 0, 112,
	113, 0, 114, 0, 0, 0, 215, 115, 116, 216,
	0, 0, 0, 117, 118, 217, 0, 119, 0, 120,
	0, 0, 0, 0, 121, 218, 0, 219, 0, 122,
	123, 220, 221, 0, 0, 126, 0, 124, 0, 0,
	125, 222, 223, 224, 225, 0, 226, 0, 0, 127,
	0, 128, 129, 0, 0, 227, 0, 130, 0, 0,
	131, 0, 0, 132, 0, 133, 134, 135, 136, 137,
	0, 138, 139, 142, 140, 0, 141, 0, 228, 143,
	229, 144, 145, 0, 0, 0, 0, 0, 146, 230,
	0, 147, 0, 231, 148, 149, 150, 0, 232, 151,
	233, 250, 0, 153, 154, 155, 234, 156, 157, 0,
	159, 160, 158, 161, 0, 162, 0, 163, 164, 235,
	165, 0, 166, 167, 168, 0, 236, 169, 170, 0,
	171, 172, 0, 173, 237, 238, 174, 0, 179, 175,
	176, 178, 239, 177, 240, 0, 180, 0, 181, 182,
	0, 241, 242, 243, 0, 0, 183, 244, 245, 0,
	184, 185, 186, 187, 0, 0, 188, 189, 190, 0,
	0, 191, 192, 193, 246, 247, 86, 194, 0, 0,
	0, 0, 195, 196, 197, 198, 0, 0, 0, 0,
	0, 89, 90, 0, 91, 0, 0, 0, 0, 199,
	0, 0, 0, 0, 92, 93, 200, 201, 202, 203,
	94, 204, 205, 0, 95, 206, 207, 96, 0, 0,
	208, 209, 210, 0, 211, 0, 0, 0, 97, 98,
	99, 0, 100, 0, 101, 102, 0, 0, 103, 104,
	0, 0, 0, 0, 0, 0, 105, 106, 107, 108,
	212, 109, 213, 214, 0, 110, 0, 111, 0, 0,
	0, 112, 113, 0, 114, 0, 0, 0, 215, 115,
	116, 216, 0, 0, 0, 117, 118, 217, 0, 119,
	0, 120, 0, 0, 0, 0, 121, 218, 0, 219,
	0, 122, 123, 220, 221, 0, 0, 126, 0, 124,
	0, 0, 125, 222, 223, 224, 225, 0, 226, 0,
	0, 127, 0, 128, 129, 0, 0, 227, 0, 130,
	0, 0, 131, 0, 0, 132, 0, 133, 134, 135,
	136, 137, 0, 138, 139, 142, 140, 0, 141, 0,
	228, 143, 229, 144, 145, 0, 0, 0, 0, 0,
	146, 230, 0, 147, 0, 231, 148, 149, 150, 0,
	232, 151, 233, 152, 0, 153, 154, 155, 234, 156,
	157, 0, 159, 160, 158, 161, 0, 162, 0, 163,
	164, 235, 165, 0, 166, 167, 168, 0, 236, 169,
	170, 0, 171, 172, 0, 173, 237, 238, 174, 0,
	179, 175, 176, 178, 239, 177, 240, 0, 180, 0,
	181, 182, 0, 241, 242, 243, 0, 0, 183, 244,
	245, 0, 184, 185, 186, 187, 0, 0, 188, 189,
	190, 0, 0, 191, 192, 193, 246, 247, 86, 194,
	0, 0, 0, 0, 195, 196, 197, 198, 0, 0,
	0, 0, 0, 89, 90, 0, 91, 0, 0, 0,
	0, 199, 0, 0, 0, 0, 92, 93, 200, 201,
	202, 203, 94, 204, 205, 0, 95, 206, 207, 96,
	0, 0, 208, 209, 210, 0, 211, 0, 0, 0,
	97, 98, 99, 0, 100, 0, 101, 102, 0, 0,
	103, 104, 0, 0, 0, 0, 0, 0, 105, 106,
	107, 108, 212, 109, 213, 214, 0, 110, 0, 111,
	0, 0, 0, 112, 113, 0, 114, 0, 0, 0,
	215, 115, 116, 216, 0, 0, 0, 117, 118, 217,
	0, 119, 0, 120, 0, 0, 0, 0, 121, 218,
	0, 219, 0, 122, 123, 1193, 221, 0, 0, 126,
	0, 124, 0, 0, 125, 222, 223, 224, 225, 0,
	226, 0, 0, 127, 0, 128, 129, 0, 0, 227,
	0, 130, 0, 0, 131, 0, 0, 132, 0, 133,
	134, 135, 136, 137, 0, 138, 139, 142, 140, 0,
	141, 0, 228, 143, 229, 144, 145, 0, 0, 0,
	0, 0, 146, 230, 0, 147, 0, 231, 148, 149,
	150, 0, 232, 151, 233, 152, 0, 153, 154, 155,
	234, 156, 157, 0, 159, 160, 158, 161, 0, 162,
	0, 163, 164, 235, 165, 0, 166, 167, 168, 0,
	236, 169, 170, 0, 171, 172, 0, 173, 237, 238,
	174, 0, 179, 175, 176, 178, 239, 177, 240, 0,
	180, 0, 181, 182, 0, 241, 242, 243, 0, 0,
	183, 244, 245, 0, 184, 185, 186, 187, 0, 0,
	188, 189, 190, 0, 0, 191, 192, 193, 246, 247,
	86, 194, 0, 0, 0, 0, 195, 196, 197, 198,
	0, 0, 0, 0, 0, 89, 90, 0, 91, 0,
	0, 0, 0, 199, 0, 0, 0, 0, 92, 93,
	200, 201, 202, 203, 94, 204, 205, 0, 95, 206,
	207, 96, 0, 0, 208, 209, 210, 0, 211, 0,
	0, 0, 97, 98, 99, 0, 100, 0, 101, 102,
	0, 0, 103, 104, 0, 0, 0, 0, 0, 0,
	105, 106, 107, 108, 212, 109, 213, 214, 0, 110,
	0, 111, 0, 0, 0, 112, 113, 0, 114, 0,
	0, 0, 215, 115, 116, 216, 0, 0, 0, 117,
	118, 217, 0, 119, 0, 120, 0, 0, 0, 0,
	121, 218, 0, 219, 0, 122, 123, 1191, 221, 0,
	0, 126, 0, 124, 0, 0, 125, 222, 223, 224,
	225, 0, 226, 0, 0, 127, 0, 128, 129, 0,
	0, 227, 0, 130, 0, 0, 131, 0, 0, 132,
	0, 133, 134, 135, 136, 137, 0, 138, 139, 142,
	140, 0, 141, 0, 228, 143, 229, 144, 145, 0,
	0, 0, 0, 0, 146, 230, 0, 147, 0, 231,
	148, 149, 150, 0, 232, 151, 233, 152, 0, 153,
	154, 155, 234, 156, 157, 0, 159, 160, 158, 161,
	0, 162, 0, 163, 164, 235, 165, 0, 166, 167,
	168, 0, 236, 169, 170, 0, 171, 172, 0, 173,
	237, 238, 174, 0, 179, 175, 176, 178, 239, 177,
	240, 0, 180, 0, 181, 182, 0, 241, 242, 243,
	0, 0, 183, 244, 245, 0, 184, 185, 186, 187,
	0, 0, 188, 189, 190, 0, 0, 191, 192, 193,
	246, 247, 86, 194, 0, 0, 0, 0, 195, 196,
	197, 198, 0, 0, 0, 0, 0, 89, 90, 0,
	91, 0, 0, 0, 0, 199, 0, 0, 0, 0,
	92, 93, 200, 201, 202, 203, 94, 204, 205, 0,
	95, 206, 207, 96, 0, 0, 208, 209, 210, 0,
	211, 0, 0, 0, 97, 98, 99, 0, 100, 0,
	101, 102, 0, 0, 103, 104, 0, 0, 0, 0,
	0, 0, 105, 106, 107, 108, 212, 109, 213, 214,
	0, 110, 0, 111, 0, 0, 0, 112, 113, 0,
	114, 0, 0, 0, 215, 115, 116, 216, 0, 0,
	0, 117, 118, 217, 0, 119, 0, 120, 0, 0,
	0, 0, 121, 218, 0, 219, 0, 122, 123, 1182,
	221, 0, 0, 126, 0, 124, 0, 0, 125, 222,
	223, 224, 225, 0, 226, 0, 0, 127, 0, 128,
	129, 0, 0, 227, 0, 130, 0, 0, 131, 0,
	0, 132, 0, 133, 134, 135, 136, 137, 0, 138,
	139, 142, 140, 0, 141, 0, 228, 143, 229, 144,
	145, 0, 0, 0, 0, 0, 146, 230, 0, 147,
	0, 231, 148, 149, 150, 0, 232, 151, 233, 152,
	0, 153, 154, 155, 234, 156, 157, 0, 159, 160,
	158, 161, 0, 162, 0, 163, 164, 235, 165, 0,
	166, 167, 168, 0, 236, 169, 170, 0, 171, 172,
	0, 173, 237, 238, 174, 0, 179, 175, 176, 178,
	239, 177, 240, 0, 180, 0, 181, 182, 0, 241,
	242, 243, 0, 0, 183, 244, 245, 0, 184, 185,
	186, 187, 0, 0, 188, 189, 190, 0, 0, 191,
	192, 193, 246, 247, 86, 194, 0, 0, 0, 0,
	195, 196, 197, 198, 0, 0, 0, 0, 0, 89,
	90, 0, 91, 0, 0, 0, 0, 199, 0, 0,
	0, 0, 92, 93, 200, 201, 202, 203, 94, 204,
	205, 0, 95, 206, 207, 96, 0, 0, 208, 209,
	210, 0, 211, 0, 0, 0, 97, 98, 99, 0,
	100, 0, 101, 102, 0, 0, 103, 104, 0, 0,
	0, 0, 0, 0, 105, 106, 107, 108, 212, 109,
	213, 214, 0, 110, 0, 111, 0, 0, 0, 112,
	113, 0, 114, 0, 0, 0, 215, 115, 116, 216,
	0, 0, 0, 117, 118, 217, 0, 119, 0, 120,
	0, 0, 0, 0, 121, 218, 0, 219, 0, 122,
	123, 798, 221, 0, 0, 126, 0, 124, 0, 0,
	125, 222, 223, 224, 225, 0, 226, 0, 0, 127,
	0, 128, 129, 0, 0, 227, 0, 130, 0, 0,
	131, 0, 0, 132, 0, 133, 134, 135, 136, 137,
	0, 138, 139, 142, 140, 0, 141, 0, 228, 143,
	229, 144, 145, 0, 0, 0, 0, 0, 146, 230,
	0, 147, 0, 231, 148, 149, 150, 0, 232, 151,
	233, 152, 0, 153, 154, 155, 234, 156, 157, 0,
	159, 160, 158, 161, 0, 162, 0, 163, 164, 235,
	165, 0, 166, 167, 168, 0, 236, 169, 170, 0,
	171, 172, 0, 173, 237, 238, 174, 0, 179, 175,
	176, 178, 239, 177, 240, 0, 180, 0, 181, 182,
	0, 241, 242, 243, 0, 0, 183, 244, 245, 0,
	184, 185, 186, 187, 0, 0, 188, 189, 190, 0,
	0, 191, 192, 193, 246, 247, 86, 194, 0, 0,
	0, 0, 195, 196, 197, 198, 0, 0, 0, 0,
	0, 89, 90, 0, 91, 0, 0, 0, 0, 199,
	0, 0, 0, 0, 92, 93, 200, 201, 202, 203,
	94, 204, 205, 0, 95, 206, 207, 96, 0, 0,
	208, 209, 210, 0, 211, 0, 0, 0, 97, 98,
	99, 0, 100, 0, 101, 102, 0, 0, 103, 104,
	0, 0, 0, 0, 0, 0, 105, 106, 107, 108,
	212, 109, 213, 214, 0, 110, 0, 111, 0, 0,
	0, 112, 113, 0, 114, 0, 0, 0, 215, 115,
	116, 216, 0, 0, 0, 117, 118, 217, 0, 119,
	0, 120, 0, 0, 0, 0, 121, 218, 0, 219,
	0, 122, 123, 220, 221, 0, 0, 126, 0, 124,
	0, 0, 125, 222, 223, 224, 225, 0, 226, 0,
	0, 127, 0, 128, 129, 0, 0, 227, 0, 130,
	0, 0, 131, 0, 0, 132, 0, 133, 134, 135,
	136, 137, 0, 138, 139, 142, 140, 0, 141, 0,
	228, 143, 229, 144, 145, 0, 0, 0, 0, 0,
	146, 230, 0, 147, 0, 231, 148, 149, 150, 0,
	232, 151, 233, 152, 0, 153, 154, 155, 234, 156,
	157, 0, 159, 160, 158, 161, 0, 162, 0, 163,
	164, 235, 165, 0, 265, 167, 168, 0, 236, 169,
	170, 0, 171, 172, 0, 173, 237, 238, 174, 0,
	179, 175, 176, 178, 239, 177, 240, 0, 180, 0,
	181, 182, 0, 241, 242, 243, 0, 0, 183, 244,
	245, 0, 184, 185, 186, 187, 0, 0, 188, 189,
	190, 0, 0, 191, 192, 193, 246, 247, 86, 194,
	0, 0, 0, 0, 195, 196, 197, 198, 0, 0,
	0, 0, 0, 89, 90, 0, 91, 0, 0, 0,
	0, 199, 0, 582, 0, 0, 92, 93, 200, 201,
	202, 203, 94, 204, 205, 0, 95, 206, 207, 96,
	0, 0, 208, 209, 210, 0, 211, 0, 0, 0,
	97, 98, 99, 0, 100, 0, 101, 102, 0, 0,
	103, 104, 0, 0, 0, 0, 0, 0, 105, 106,
	107, 108, 212, 109, 213, 214, 0, 110, 0, 111,
	0, 0, 0, 112, 113, 0, 114, 0, 0, 0,
	215, 115, 116, 216, 0, 0, 0, 117, 118, 217,
	0, 119, 0, 120, 0, 0, 0, 0, 121, 218,
	0, 219, 0, 122, 123, 220, 221, 0, 0, 126,
	0, 124, 0, 0, 125, 222, 223, 224, 225, 0,
	226, 0, 0, 127, 0, 128, 129, 0, 0, 227,
	0, 130, 0, 0, 131, 0, 0, 132, 0, 133,
	134, 135, 136, 137, 0, 138, 139, 142, 140, 0,
	141, 0, 228, 143, 229, 144, 145, 0, 0, 0,
	0, 0, 146, 230, 0, 147, 0, 231, 148, 149,
	150, 0, 232, 151, 233, 152, 0, 153, 154, 155,
	234, 156, 157, 0, 159, 160, 158, 161, 0, 162,
	0, 163, 164, 235, 165, 0, 166, 167, 168, 0,
	236, 169, 170, 0, 0, 172, 0, 173, 237, 238,
	174, 0, 179, 175, 176, 178, 239, 177, 240, 0,
	180, 0, 181, 182, 0, 241, 242, 243, 0, 0,
	183, 244, 245, 0, 184, 185, 186, 187, 0, 0,
	188, 189, 190, 0, 0, 191, 192, 193, 246, 247,
	86, 194, 0, 0, 0, 0, 195, 196, 197, 198,
	0, 0, 0, 0, 0, 89, 90, 0, 91, 0,
	0, 0, 0, 199, 0, 0, 0, 0, 92, 93,
	200, 201, 202, 203, 94, 204, 205, 0, 95, 206,
	207, 96, 0, 0, 208, 209, 210, 0, 211, 0,
	0, 0, 97, 98, 99, 0, 100, 0, 101, 102,
	0, 0, 103, 104, 0, 0, 0, 0, 0, 0,
	105, 106, 107, 108, 212, 109, 213, 214, 0, 110,
	0, 111, 0, 0, 0, 112, 113, 0, 114, 0,
	0, 0, 215, 115, 116, 216, 0, 0, 0, 117,
	118, 217, 0, 119, 0, 120, 0, 0, 0, 0,
	121, 218, 0, 219, 0, 122, 123, 441, 221, 0,
	0, 126, 0, 124, 0, 0, 125, 222, 223, 224,
	225, 0, 226, 0, 0, 127, 0, 128, 129, 0,
	0, 227, 0, 130, 0, 0, 131, 0, 0, 132,
	0, 133, 134, 135, 136, 137, 0, 138, 139, 142,
	140, 0, 141, 0, 228, 143, 229, 144, 145, 0,
	0, 0, 0, 0, 146, 230, 0, 147, 0, 231,
	148, 149, 150, 0, 232, 151, 233, 152, 0, 153,
	154, 155, 234, 156, 157, 0, 159, 160, 158, 161,
	0, 162, 0, 163, 164, 235, 165, 0, 166, 167,
	168, 0, 236, 169, 170, 0, 171, 172, 0, 173,
	237, 238, 174, 0, 179, 175, 176, 178, 239, 177,
	240, 0, 180, 0, 181, 182, 0, 241, 242, 243,
	0, 0, 183, 244, 245, 0, 184, 185, 186, 187,
	0, 0, 188, 189, 190, 0, 0, 191, 192, 193,
	246, 247, 86, 194, 0, 0, 0, 0, 195, 196,
	197, 198, 0, 0, 0, 0, 0, 89, 90, 0,
	91, 0, 0, 0, 0, 199, 0, 0, 0, 0,
	92, 93, 200, 201, 202, 203, 94, 204, 205, 0,
	95, 206, 207, 96, 0, 0, 208, 209, 210, 0,
	211, 0, 0, 0, 97, 98, 99, 0, 100, 0,
	101, 102, 0, 0, 103, 104, 0, 0, 0, 0,
	0, 0, 105, 106, 107, 108, 212, 109, 213, 214,
	0, 110, 0, 111, 0, 0, 0, 112, 113, 0,
	114, 0, 0, 0, 215, 115, 116, 216, 0, 0,
	0, 117, 118, 217, 0, 119, 0, 120, 0, 0,
	0, 0, 121, 218, 0, 219, 0, 122, 123, 438,
	221, 0, 0, 126, 0, 124, 0, 0, 125, 222,
	223, 224, 225, 0, 226, 0, 0, 127, 0, 128,
	129, 0, 0, 227, 0, 130, 0, 0, 131, 0,
	0, 132, 0, 133, 134, 135, 136, 137, 0, 138,
	139, 142, 140, 0, 141, 0, 228, 143, 229, 144,
	145, 0, 0, 0, 0, 0, 146, 230, 0, 147,
	0, 231, 148, 149, 150, 0, 232, 151, 233, 152,
	0, 153, 154, 155, 234, 156, 157, 0, 159, 160,
	158, 161, 0, 162, 0, 163, 164, 235, 165, 0,
	166, 167, 168, 0, 236, 169, 170, 0, 171, 172,
	0, 173, 237, 238, 174, 0, 179, 175, 176, 178,
	239, 177, 240, 0, 180, 0, 181, 182, 0, 241,
	242, 243, 0, 0, 183, 244, 245, 0, 184, 185,
	186, 187, 0, 0, 188, 189, 190, 0, 0, 191,
	192, 193, 246, 247, 86, 194, 0, 0, 0, 0,
	195, 196, 197, 198, 0, 0, 0, 0, 0, 89,
	90, 0, 91, 0, 0, 0, 0, 199, 0, 0,
	0, 0, 92, 93, 200, 201, 202, 203, 94, 204,
	205, 0, 95, 206, 207, 96, 0, 0, 208, 209,
	392, 0, 211, 0, 0, 0, 97, 98, 99, 0,
	100, 0, 101, 102, 0, 0, 103, 104, 0, 0,
	0, 0, 0, 0, 105, 106, 107, 108, 212, 109,
	213, 214, 0, 110, 0, 111, 0, 0, 0, 112,
	113, 0, 114, 0, 0, 0, 215, 115, 116, 216,
	0, 0, 0, 117, 118, 217, 0, 119, 0, 120,
	0, 0, 0, 0, 121, 218, 0, 219, 0, 122,
	123, 220, 221, 0, 0, 126, 0, 124, 0, 0,
	125, 222, 223, 224, 225, 0, 226, 0, 0, 127,
	0, 128, 129, 0, 0, 227, 0, 130, 0, 0,
	131, 0, 0, 132, 0, 133, 134, 135, 136, 276,
	0, 138, 139, 142, 140, 0, 141, 0, 228, 143,
	229, 144, 145, 0, 0, 0, 0, 0, 146, 230,
	0, 147, 0, 231, 148, 149, 150, 0, 232, 151,
	233, 152, 0, 153, 154, 155, 234, 156, 157, 0,
	159, 160, 158, 161, 0, 162, 0, 163, 164, 235,
	165, 0, 166, 167, 168, 0, 236, 169, 170, 0,
	171, 172, 0, 173, 237, 238, 174, 0, 179, 175,
	176, 178, 239, 177, 240, 0, 180, 0, 181, 182,
	0, 275, 242, 243, 0, 0, 271, 244, 245, 0,
	184, 185, 186, 187, 0, 0, 188, 189, 190, 0,
	0, 191, 192, 193, 246, 247, 86, 194, 0, 0,
	0, 0, 195, 196, 197, 198, 0, 0, 0, 0,
	0, 89, 90, 0, 91, 0, 0, 0, 0, 199,
	0, 0, 0, 0, 92, 93, 200, 201, 202, 203,
	94, 204, 205, 0, 95, 206, 207, 96, 0, 0,
	208, 209, 210, 0, 211, 0, 0, 0, 97, 98,
	99, 0, 100, 0, 101, 102, 0, 0, 103, 104,
	0, 0, 0, 0, 0, 0, 105, 106, 107, 108,
	212, 109, 213, 214, 0, 110, 0, 111, 0, 0,
	0, 112, 113, 0, 114, 0, 0, 0, 215, 115,
	116, 216, 0, 0, 0, 117, 118, 217, 0, 119,
	0, 120, 0, 0, 0, 0, 121, 218, 0, 219,
	0, 122, 123, 220, 221, 0, 0, 126, 0, 124,
	0, 0, 125, 222, 223, 224, 225, 0, 226, 0,
	0, 127, 0, 128, 129, 0, 0, 227, 0, 130,
	0, 0, 131, 0, 0, 132, 0, 133, 134, 135,
	136, 276, 0, 138, 139, 142, 140, 0, 141, 0,
	228, 143, 229, 144, 145, 0, 0, 0, 0, 0,
	146, 230, 0, 147, 0, 231, 148, 149, 150, 0,
	232, 151, 233, 152, 0, 153, 154, 155, 234, 156,
	157, 0, 159, 160, 158, 161, 0, 162, 0, 163,
	164, 235, 165, 0, 166, 167, 168, 0, 236, 169,
	170, 0, 171, 172, 0, 173, 237, 238, 174, 0,
	179, 175, 176, 178, 239, 177, 240, 0, 180, 0,
	181, 182, 0, 275, 242, 243, 0, 0, 271, 244,
	245, 0, 184, 185, 186, 187, 0, 0, 188, 189,
	190, 0, 0, 191, 192, 193, 246, 247, 86, 194,
	0, 0, 0, 0, 195, 196, 197, 198, 0, 0,
	0, 0, 0, 89, 90, 0, 91, 0, 0, 0,
	0, 199, 0, 0, 0, 0, 92, 93, 200, 201,
	202, 203, 94, 204, 205, 0, 95, 206, 207, 96,
	0, 0, 208, 209, 210, 0, 211, 0, 0, 0,
	97, 98, 99, 0, 100, 0, 101, 102, 0, 0,
	103, 104, 0, 0, 0, 0, 0, 0, 105, 106,
	107, 108, 212, 109, 213, 214, 0, 110, 0, 111,
	0, 0, 0, 112, 113, 0, 114, 0, 0, 0,
	215, 115, 116, 216, 0, 0, 0, 117, 118, 217,
	0, 119, 0, 120, 0, 0, 0, 0, 121, 218,
	0, 219, 0, 122, 123, 356, 221, 0, 0, 126,
	0, 124, 0, 0, 125, 222, 223, 224, 225, 0,
	226, 0, 0, 127, 0, 128, 129, 0, 0, 227,
	0, 130, 0, 0, 131, 0, 0, 132, 0, 133,
	134, 135, 136, 137, 0, 138, 139, 142, 140, 0,
	141, 0, 228, 143, 229, 144, 145, 0, 0, 0,
	0, 0, 146, 230, 0, 147, 0, 231, 148, 149,
	150, 0, 232, 151, 233, 152, 0, 153, 154, 155,
	234, 156, 157, 0, 159, 160, 158, 161, 0, 162,
	0, 163, 164, 235, 165, 0, 166, 167, 168, 0,
	236, 169, 170, 0, 171, 172, 0, 173, 237, 238,
	174, 0, 179, 175, 176, 178, 239, 177, 240, 0,
	180, 0, 181, 182, 0, 241, 242, 243, 0, 0,
	183, 244, 245, 0, 184, 185, 186, 187, 0, 0,
	188, 189, 190, 0, 0, 191, 192, 193, 246, 247,
	86, 194, 0, 0, 0, 0, 195, 196, 197, 198,
	0, 0, 0, 0, 0, 89, 90, 0, 91, 0,
	0, 0, 0, 199, 0, 0, 0, 0, 92, 93,
	200, 201, 202, 203, 94, 204, 205, 0, 95, 206,
	207, 96, 0, 0, 208, 209, 210, 0, 211, 0,
	0, 0, 97, 98, 99, 0, 100, 0, 101, 102,
	0, 0, 103, 104, 0, 0, 0, 0, 0, 0,
	105, 106, 107, 108, 212, 109, 213, 214, 0, 110,
	0, 111, 0, 0, 0, 112, 113, 0, 114, 0,
	0, 0, 215, 115, 116, 216, 0, 0, 0, 117,
	118, 217, 0, 119, 0, 120, 0, 0, 0, 0,
	121, 218, 0, 219, 0, 122, 123, 353, 221, 0,
	0, 126, 0, 124, 0, 0, 125, 222, 223, 224,
	225, 0, 226, 0, 0, 127, 0, 128, 129, 0,
	0, 227, 0, 130, 0, 0, 131, 0, 0, 132,
	0, 133, 134, 135, 136, 137, 0, 138, 139, 142,
	140, 0, 141, 0, 228, 143, 229, 144, 145, 0,
	0, 0, 0, 0, 146, 230, 0, 147, 0, 231,
	148, 149, 150, 0, 232, 151, 233, 152, 0, 153,
	154, 155, 234, 156, 157, 0, 159, 160, 158, 161,
	0, 162, 0, 163, 164, 235, 165, 0, 166, 167,
	168, 0, 236, 169, 170, 0, 171, 172, 0, 173,
	237, 238, 174, 0, 179, 175, 176, 178, 239, 177,
	240, 0, 180, 0, 181, 182, 0, 241, 242, 243,
	0, 0, 183, 244, 245, 0, 184, 185, 186, 187,
	0, 0, 188, 189, 190, 0, 0, 191, 192, 193,
	246, 247, 86, 194, 0, 0, 0, 0, 195, 196,
	197, 198, 0, 0, 0, 0, 0, 89, 90, 0,
	91, 0, 0, 0, 0, 199, 0, 0, 0, 0,
	92, 93, 200, 201, 202, 203, 94, 204, 205, 0,
	95, 206, 207, 96, 0, 0, 208, 209, 210, 0,
	211, 0, 0, 0, 97, 98, 99, 0, 100, 0,
	101, 102, 0, 0, 103, 104, 0, 0, 0, 0,
	0, 0, 105, 106, 107, 108, 212, 109, 213, 214,
	0, 110, 0, 111, 0, 0, 0, 112, 113, 0,
	114, 0, 0, 0, 215, 115, 116, 216, 0, 0,
	0, 117, 118, 217, 0, 119, 0, 120, 0, 0,
	0, 0, 121, 218, 0, 219, 0, 122, 123, 351,
	221, 0, 0, 126, 0, 124, 0, 0, 125, 222,
	223, 224, 225, 0, 226, 0, 0, 127, 0, 128,
	129, 0, 0, 227, 0, 130, 0, 0, 131, 0,
	0, 132, 0, 133, 134, 135, 136, 137, 0, 138,
	139, 142, 140, 0, 141, 0, 228, 143, 229, 144,
	145, 0, 0, 0, 0, 0, 146, 230, 0, 147,
	0, 231, 148, 149, 150, 0, 232, 151, 233, 152,
	0, 153, 154, 155, 234, 156, 157, 0, 159, 160,
	158, 161, 0, 162, 0, 163, 164, 235, 165, 0,
	166, 167, 168, 0, 236, 169, 170, 0, 171, 172,
	0, 173, 237, 238, 174, 0, 179, 175, 176, 178,
	239, 177, 240, 0, 180, 0, 181, 182, 0, 241,
	242, 243, 0, 0, 183, 244, 245, 0, 184, 185,
	186, 187, 0, 0, 188, 189, 190, 0, 0, 191,
	192, 193, 246, 247, 86, 194, 0, 0, 0, 0,
	195, 196, 197, 198, 0, 0, 0, 0, 0, 89,
	90, 0, 91, 0, 0, 0, 0, 199, 0, 0,
	0, 0, 92, 93, 200, 201, 202, 203, 94, 204,
	205, 0, 95, 206, 207, 96, 0, 0, 208, 209,
	210, 0, 211, 0, 0, 0, 97, 98, 99, 0,
	100, 0, 101, 102, 0, 0, 103, 104, 0, 0,
	0, 0, 0, 0, 105, 106, 107, 108, 212, 109,
	213, 214, 0, 110, 0, 111, 0, 0, 0, 112,
	113, 0, 114, 0, 0, 0, 215, 115, 116, 216,
	0, 0, 0, 117, 118, 217, 0, 119, 0, 120,
	0, 0, 0, 0, 121, 218, 0, 219, 0, 122,
	123, 343, 221, 0, 0, 126, 0, 124, 0, 0,
	125, 222, 223, 224, 225, 0, 226, 0, 0, 127,
	0, 128, 129, 0, 0, 227, 0, 130, 0, 0,
	131, 0, 0, 132, 0, 133, 134, 135, 136, 137,
	0, 138, 139, 142, 140, 0, 141, 0, 228, 143,
	229, 144, 145, 0, 0, 0, 0, 0, 146, 230,
	0, 147, 0, 231, 148, 149, 150, 0, 232, 151,
	233, 152, 0, 153, 154, 155, 234, 156, 157, 0,
	159, 160, 158, 161, 0, 162, 0, 163, 164, 235,
	165, 0, 166, 167, 168, 0, 236, 169, 170, 0,
	171, 172, 0, 173, 237, 238, 174, 0, 179, 175,
	176, 178, 239, 177, 240, 0, 180, 0, 181, 182,
	0, 241, 242, 243, 0, 0, 183, 244, 245, 0,
	184, 185, 186, 187, 0, 0, 188, 189, 190, 0,
	0, 191, 192, 193, 246, 247, 86, 194, 0, 0,
	0, 0, 195, 196, 197, 198, 0, 0, 0, 0,
	0, 89, 90, 0, 91, 0, 0, 0, 0, 199,
	0, 0, 0, 0, 92, 93, 200, 201, 202, 203,
	94, 204, 205, 0, 95, 206, 207, 96, 0, 0,
	208, 209, 210, 0, 211, 0, 0, 0, 97, 98,
	99, 0, 100, 0, 101, 102, 0, 0, 103, 104,
	0, 0, 0, 0, 0, 0, 105, 106, 107, 108,
	212, 109, 213, 214, 0, 110, 0, 111, 0, 0,
	0, 112, 113, 0, 114, 0, 0, 0, 215, 115,
	116, 216, 0, 0, 0, 117, 118, 217, 0, 119,
	0, 120, 0, 0, 0, 0, 121, 218, 0, 219,
	0, 122, 123, 220, 221, 0, 0, 126, 0, 124,
	0, 0, 125, 222, 223, 224, 225, 0, 226, 0,
	0, 127, 0, 128, 129, 0, 0, 227, 0, 130,
	0, 0, 131, 0, 0, 132, 0, 133, 134, 135,
	136, 137, 0, 138, 139, 142, 140, 0, 141, 0,
	228, 143, 229, 144, 145, 0, 0, 0, 0, 0,
	146, 230, 0, 147, 0, 231, 148, 149, 150, 0,
	232, 151, 233, 152, 0, 153, 154, 155, 234, 324,
	157, 0, 159, 160, 158, 161, 0, 162, 0, 163,
	164, 235, 165, 0, 166, 167, 168, 0, 236, 169,
	170, 0, 171, 172, 0, 173, 237, 238, 174, 0,
	179, 175, 176, 178, 239, 177, 240, 0, 180, 0,
	181, 182, 0, 241, 242, 243, 0, 0, 183, 244,
	245, 0, 184, 185, 186, 187, 0, 0, 188, 189,
	190, 0, 0, 191, 192, 193, 246, 247, 86, 194,
	0, 0, 0, 0, 195, 196, 197, 198, 0, 0,
	0, 0, 0, 89, 90, 0, 91, 0, 0, 0,
	0, 199, 0, 0, 0, 0, 92, 93, 200, 201,
	202, 203, 94, 204, 205, 0, 95, 206, 207, 96,
	0, 0, 208, 209, 210, 0, 211, 0, 0, 0,
	97, 98, 99, 0, 100, 0, 101, 102, 0, 0,
	103, 104, 0, 0, 0, 0, 0, 0, 105, 106,
	107, 108, 212, 109, 213, 214, 0, 110, 0, 111,
	0, 0, 0, 112, 113, 0, 114, 0, 0, 0,
	215, 115, 116, 216, 0, 0, 0, 117, 118, 217,
	0, 119, 0, 120, 0, 0, 0, 0, 121, 218,
	0, 219, 0, 122, 123, 220, 221, 0, 0, 126,
	0, 124, 0, 0, 125, 222, 223, 224, 225, 0,
	226, 0, 0, 127, 0, 128, 129, 0, 0, 227,
	0, 130, 0, 0, 268, 0, 0, 132, 0, 133,
	134, 135, 136, 276, 0, 138, 139, 142, 140, 0,
	141, 0, 228, 143, 229, 144, 145, 0, 0, 0,
	0, 0, 146, 230, 0, 147, 0, 231, 148, 149,
	150, 0, 232, 151, 233, 152, 0, 153, 154, 155,
	234, 156, 157, 0, 159, 160, 158, 161, 0, 162,
	0, 163, 164, 270, 165, 0, 166, 167, 168, 0,
	236, 169, 269, 0, 171, 172, 0, 173, 237, 238,
	174, 0, 179, 175, 176, 178, 239, 177, 240, 0,
	180, 0, 181, 182, 0, 275, 242, 243, 0, 0,
	271, 244, 245, 0, 184, 185, 186, 187, 0, 0,
	188, 189, 190, 0, 0, 191, 192, 193, 246, 247,
	86, 194, 0, 0, 0, 0, 195, 196, 197, 198,
	0, 0, 0, 0, 0, 89, 90, 0, 91, 0,
	0, 0, 0, 199, 0, 0, 0, 0, 92, 93,
	200, 201, 202, 203, 94, 204, 205, 0, 95, 206,
	207, 96, 0, 0, 208, 209, 210, 0, 211, 0,
	0, 0, 97, 98, 99, 0, 100, 0, 101, 102,
	0, 0, 103, 104, 0, 0, 0, 0, 0, 0,
	105, 106, 107, 108, 212, 109, 213, 214, 0, 110,
	0, 111, 0, 0, 0, 112, 113, 0, 114, 0,
	0, 0, 215, 115, 116, 216, 0, 0, 0, 117,
	118, 217, 0, 119, 0, 120, 0, 0, 0, 0,
	121, 218, 0, 219, 0, 122, 123, 220, 221, 0,
	0, 126, 0, 124, 0, 0, 125, 222, 223, 224,
	225, 0, 226, 0, 0, 127, 0, 128, 129, 0,
	0, 227, 0, 130, 0, 0, 131, 0, 0, 132,
	0, 133, 134, 135, 136, 137, 0, 138, 139, 142,
	140, 0, 141, 0, 228, 143, 229, 144, 145, 0,
	0, 0, 0, 0, 146, 230, 0, 147, 0, 231,
	148, 149, 0, 0, 232, 151, 233, 152, 0, 153,
	0, 155, 234, 156, 157, 0, 159, 160, 158, 161,
	0, 162, 0, 163, 164, 235, 0, 0, 166, 167,
	168, 0, 236, 169, 170, 0, 171, 172, 0, 173,
	237, 238, 174, 0, 179, 175, 176, 178, 239, 177,
	240, 0, 180, 0, 181, 182, 0, 241, 242, 243,
	0, 0, 183, 244, 245, 0, 184, 185, 186, 187,
	0, 0, 188, 189, 190, 0, 0, 191, 192, 193,
	246, 247, 0, 194, 0, 0, 0, 0, 195, 196,
	197, 198, 824, 0, 843, 844, 845, 853, 854, 855,
	0, 0, 0, 0, 0, 0, 0, 846, 0, 0,
	0, 0, 0, 0, 826, 824, 857, 843, 844, 845,
	853, 854, 855, 0, 0, 0, 0, 0, 0, 0,
	846, 0, 0, 0, 0, 825, 0, 826, 0, 857,
	0, 840, 0, 0, 0, 0, 0, 0, 824, 0,
	843, 844, 845, 853, 854, 855, 0, 0, 825, 0,
	0, 0, 0, 846, 840, 0, 0, 0, 0, 0,
	826, 0, 857, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 831, 0,
	0, 825, 0, 0, 0, 0, 0, 840, 0, 0,
	0, 0, 0, 0, 0, 850, 858, 0, 0, 0,
	0, 831, 0, 0, 0, 0, 0, 0, 0, 0,
	856, 0, 0, 0, 0, 0, 0, 0, 850, 858,
	848, 0, 0, 0, 0, 0, 841, 0, 0, 0,
	0, 0, 0, 856, 831, 0, 0, 0, 0, 0,
	0, 0, 0, 848, 0, 0, 0, 0, 847, 841,
	0, 850, 858, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 856, 0, 0, 0,
	0, 847, 0, 0, 0, 0, 848, 0, 0, 0,
	0, 0, 841, 842, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 851, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 847, 0, 842, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 851, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 842,
	0, 0, 0, 0, 0, 0, 0, 0, 849, 0,
	851, 837, 838, 839, 0, 836, 833, 834, 835, 827,
	828, 829, 830, 832, 0, 852, 0, 0, 0, 0,
	0, 849, 1367, 0, 837, 838, 839, 0, 836, 833,
	834, 835, 827, 828, 829, 830, 832, 0, 852, 0,
	0, 0, 0, 0, 0, 1366, 0, 0, 0, 0,
	0, 0, 0, 0, 849, 0, 0, 837, 838, 839,
	0, 836, 833, 834, 835, 827, 828, 829, 830, 832,
	824, 852, 843, 844, 845, 853, 854, 855, 1320, 0,
	0, 0, 0, 0, 0, 846, 0, 0, 0, 0,
	0, 0, 826, 824, 857, 843, 844, 845, 853, 854,
	855, 0, 0, 0, 0, 0, 0, 0, 846, 0,
	0, 0, 0, 825, 0, 826, 0, 857, 0, 840,
	0, 0, 0, 0, 0, 0, 824, 0, 843, 844,
	845, 853, 854, 855, 0, 0, 825, 0, 0, 0,
	0, 846, 840, 0, 0, 0, 0, 0, 826, 0,
	857, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 831, 0, 0, 825,
	0, 0, 0, 0, 0, 840, 0, 0, 0, 0,
	0, 0, 0, 850, 858, 0, 0, 0, 0, 831,
	0, 0, 0, 0, 0, 0, 0, 0, 856, 0,
	0, 0, 0, 0, 0, 0, 850, 858, 848, 0,
	0, 0, 0, 0, 841, 0, 0, 0, 0, 0,
	0, 856, 831, 0, 0, 0, 0, 0, 0, 0,
	0, 848, 0, 0, 0, 0, 847, 841, 0, 850,
	858, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 856, 0, 0, 0, 0, 847,
	0, 0, 0, 0, 848, 0, 0, 0, 0, 0,
	841, 842, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 851, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 847, 0, 842, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 851, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 842, 0, 0,
	0, 0, 0, 0, 0, 0, 849, 0, 851, 837,
	838, 839, 0, 836, 833, 834, 835, 827, 828, 829,
	830, 832, 0, 852, 0, 0, 0, 1765, 0, 849,
	0, 0, 837, 838, 839, 0, 836, 833, 834, 835,
	827, 828, 829, 830, 832, 0, 852, 0, 0, 0,
	1763, 0, 0, 0, 1327, 0, 1344, 1345, 1346, 0,
	0, 0, 849, 0, 0, 837, 838, 839, 0, 836,
	833, 834, 835, 827, 828, 829, 830, 832, 0, 852,
	0, 0, 824, 1744, 843, 844, 845, 853, 854, 855,
	0, 0, 0, 0, 0, 0, 0, 846, 0, 0,
	0, 0, 0, 1341, 826, 824, 857, 843, 844, 845,
	853, 854, 855, 0, 0, 0, 0, 0, 0, 0,
	846, 0, 0, 0, 0, 825, 0, 826, 0, 857,
	0, 840, 0, 0, 0, 0, 0, 0, 824, 0,
	843, 844, 845, 853, 854, 855, 0, 0, 825, 0,
	1332, 0, 0, 846, 840, 0, 0, 0, 0, 0,
	826, 0, 857, 0, 0, 0, 0, 0, 1348, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 831, 0,
	0, 825, 1347, 0, 0, 0, 0, 840, 0, 0,
	0, 0, 0, 0, 0, 850, 858, 0, 1342, 0,
	0, 831, 0, 0, 0, 0, 0, 0, 0, 0,
	856, 0, 0, 0, 0, 0, 0, 0, 850, 858,
	848, 0, 0, 0, 0, 0, 841, 0, 0, 0,
	0, 0, 0, 856, 831, 0, 0, 0, 0, 0,
	0, 0, 0, 848, 0, 0, 0, 0, 847, 841,
	0, 850, 858, 0, 0, 1343, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 856, 0, 0, 0,
	0, 847, 0, 0, 0, 0, 848, 0, 0, 0,
	0, 0, 841, 842, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 851, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 847, 0, 842, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 851, 0, 0,
	0, 0, 0, 1338, 1339, 1340, 0, 1337, 1334, 1335,
	1336, 1328, 1329, 1330, 1331, 1333, 0, 0, 0, 842,
	0, 0, 0, 0, 0, 0, 0, 0, 849, 0,
	851, 837, 838, 839, 0, 836, 833, 834, 835, 827,
	828, 829, 830, 832, 0, 852, 0, 0, 0, 1719,
	0, 849, 0, 0, 837, 838, 839, 0, 836, 833,
	834, 835, 827, 828, 829, 830, 832, 0, 852, 0,
	0, 0, 1714, 0, 0, 0, 1327, 0, 1344, 1345,
	1346, 0, 0, 0, 849, 0, 0, 837, 838, 839,
	0, 836, 833, 834, 835, 827, 828, 829, 830, 832,
	0, 852, 0, 0, 824, 1710, 843, 844, 845, 853,
	854, 855, 0, 0, 0, 0, 0, 0, 0, 846,
	0, 0, 0, 0, 0, 1341, 826, 824, 857, 843,
	844, 845, 853, 854, 855, 0, 0, 0, 0, 0,
	0, 0, 846, 0, 0, 0, 0, 825, 0, 826,
	0, 857, 0, 840, 0, 0, 0, 0, 0, 0,
	824, 0, 843, 844, 845, 853, 854, 855, 0, 0,
	825, 0, 1332, 0, 0, 846, 840, 0, 0, 0,
	0, 0, 826, 0, 857, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	831, 0, 0, 825, 1347, 0, 0, 0, 0, 840,
	0, 0, 0, 0, 0, 0, 0, 850, 858, 0,
	1342, 0, 0, 831, 0, 0, 0, 0, 0, 0,
	0, 0, 856, 0, 0, 0, 0, 0, 0, 0,
	850, 858, 848, 0, 0, 0, 0, 0, 841, 0,
	0, 0, 0, 0, 0, 856, 831, 0, 0, 0,
	0, 0, 0, 0, 0, 848, 0, 0, 0, 0,
	847, 841, 0, 850, 858, 0, 0, 1343, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 856, 0,
	0, 0, 0, 847, 0, 0, 0, 0, 848, 0,
	0, 0, 0, 0, 841, 842, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 851, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 847, 0, 842, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 851,
	0, 0, 0, 0, 0, 1338, 1339, 1340, 0, 1337,
	1334, 1335, 1336, 1328, 1329, 1330, 1331, 1333, 0, 0,
	0, 842, 0, 0, 0, 0, 0, 0, 0, 0,
	849, 0, 851, 837, 838, 839, 0, 836, 833, 834,
	835, 827, 828, 829, 830, 832, 0, 852, 0, 0,
	0, 1646, 0, 849, 0, 0, 837, 838, 839, 0,
	836, 833, 834, 835, 827, 828, 829, 830, 832, 0,
	852, 0, 0, 0, 1645, 0, 0, 1327, 0, 1344,
	1345, 1346, 0, 0, 0, 0, 849, 0, 0, 837,
	838, 839, 0, 836, 833, 834, 835, 827, 828, 829,
	830, 832, 0, 852, 0, 0, 824, 1554, 843, 844,
	845, 853, 854, 855, 0, 0, 0, 0, 0, 0,
	0, 846, 0, 0, 0, 0, 1341, 0, 826, 824,
	857, 843, 844, 845, 853, 854, 855, 0, 0, 0,
	0, 0, 0, 0, 846, 0, 0, 0, 0, 825,
	0, 826, 0, 857, 0, 840, 0, 0, 0, 0,
	0, 0, 824, 0, 843, 844, 845, 853, 854, 855,
	0, 0, 825, 1332, 0, 0, 0, 846, 840, 0,
	0, 0, 0, 0, 826, 0, 857, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 831, 0, 0, 825, 0, 0, 0, 0,
	0, 840, 0, 0, 0, 0, 0, 0, 0, 850,
	858, 1342, 0, 0, 0, 831, 0, 0, 0, 0,
	0, 0, 0, 0, 856, 0, 0, 0, 0, 0,
	0, 0, 850, 858, 848, 0, 0, 0, 0, 0,
	841, 0, 0, 0, 0, 0, 0, 856, 831, 0,
	0, 0, 0, 0, 0, 0, 0, 848, 0, 0,
	0, 0, 847, 841, 0, 850, 858, 0, 1343, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	856, 0, 0, 0, 0, 847, 0, 0, 0, 0,
	848, 0, 0, 0, 0, 0, 841, 842, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 851, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 847, 0,
	842, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 851, 0, 0, 0, 0, 1338, 1339, 1340, 0,
	1337, 1334, 1335, 1336, 1328, 1329, 1330, 1331, 1333, 0,
	0, 0, 0, 842, 0, 0, 0, 0, 0, 0,
	0, 0, 849, 0, 851, 837, 838, 839, 0, 836,
	833, 834, 835, 827, 828, 829, 830, 832, 0, 852,
	0, 0, 0, 1489, 0, 849, 0, 0, 837, 838,
	839, 0, 836, 833, 834, 835, 827, 828, 829, 830,
	832, 0, 852, 0, 0, 0, 1473, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 849, 0,
	0, 837, 838, 839, 0, 836, 833, 834, 835, 827,
	828, 829, 830, 832, 0, 852, 0, 0, 824, 1104,
	843, 844, 845, 853, 854, 855, 0, 0, 0, 0,
	0, 0, 0, 846, 0, 0, 0, 0, 0, 0,
	826, 824, 857, 843, 844, 845, 853, 854, 855, 0,
	0, 0, 0, 0, 0, 0, 846, 0, 0, 0,
	0, 825, 0, 826, 0, 857, 0, 840, 0, 0,
	0, 0, 0, 0, 824, 0, 843, 844, 845, 853,
	854, 855, 0, 0, 825, 0, 0, 0, 0, 846,
	840, 0, 0, 0, 0, 0, 826, 0, 857, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 831, 0, 0, 825, 0, 0,
	0, 0, 0, 840, 0, 0, 0, 0, 0, 0,
	0, 850, 858, 0, 0, 0, 0, 831, 1835, 0,
	0, 0, 0, 0, 0, 0, 856, 0, 0, 0,
	0, 0, 0, 0, 850, 858, 848, 0, 0, 0,
	0, 0, 841, 0, 0, 0, 0, 0, 0, 856,
	831, 0, 1358, 0, 0, 1357, 0, 0, 0, 848,
	0, 0, 0, 0, 847, 841, 0, 850, 858, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 856, 0, 0, 0, 0, 847, 0, 0,
	0, 0, 848, 0, 0, 0, 0, 0, 841, 842,
	1834, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	851, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	847, 0, 842, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 851, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 842, 0, 0, 0, 0,
	0, 0, 0, 0, 849, 0, 851, 837, 838, 839,
	0, 836, 833, 834, 835, 827, 828, 829, 830, 832,
	0, 852, 0, 1426, 0, 0, 0, 849, 0, 0,
	837, 838, 839, 0, 836, 833, 834, 835, 827, 828,
	829, 830, 832, 0, 852, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	849, 0, 0, 837, 838, 839, 0, 836, 833, 834,
	835, 827, 828, 829, 830, 832, 824, 852, 843, 844,
	845, 853, 854, 855, 0, 0, 0, 0, 0, 0,
	0, 846, 0, 860, 0, 0, 1038, 0, 826, 824,
	857, 843, 844, 845, 853, 854, 855, 0, 0, 0,
	0, 0, 0, 0, 846, 0, 0, 0, 859, 825,
	0, 826, 0, 857, 0, 840, 0, 0, 0, 0,
	0, 0, 824, 0, 843, 844, 845, 853, 854, 855,
	0, 0, 825, 0, 0, 0, 0, 846, 840, 0,
	0, 0, 1039, 0, 826, 0, 857, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 831, 0, 0, 825, 0, 0, 0, 0,
	0, 840, 0, 0, 0, 0, 0, 0, 0, 850,
	858, 0, 0, 0, 0, 831, 0, 0, 0, 0,
	0, 0, 0, 0, 856, 0, 0, 0, 0, 0,
	0, 0, 850, 858, 848, 0, 0, 0, 0, 0,
	841, 0, 0, 0, 0, 0, 0, 856, 831, 0,
	0, 0, 0, 0, 0, 0, 0, 848, 0, 0,
	0, 0, 847, 841, 0, 850, 858, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	856, 0, 0, 0, 0, 847, 0, 0, 0, 0,
	848, 0, 0, 0, 0, 0, 841, 842, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 851, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 847, 319,
	842, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 851, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 842, 0, 0, 0, 0, 0, 0,
	0, 0, 849, 0, 851, 837, 838, 839, 0, 836,
	833, 834, 835, 827, 828, 829, 830, 832, 0, 852,
	0, 0, 0, 0, 0, 849, 0, 0, 837, 838,
	839, 0, 836, 833, 834, 835, 827, 828, 829, 830,
	832, 0, 852, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 849, 0,
	0, 837, 838, 839, 0, 836, 833, 834, 835, 827,
	828, 829, 830, 832, 824, 852, 843, 844, 845, 853,
	854, 855, 0, 0, 0, 0, 0, 0, 0, 846,
	0, 0, 0, 0, 0, 0, 826, 824, 857, 843,
	844, 845, 853, 854, 855, 0, 0, 0, 0, 0,
	0, 0, 846, 0, 0, 0, 0, 825, 0, 826,
	0, 857, 0, 840, 0, 0, 0, 0, 0, 0,
	824, 0, 843, 844, 845, 853, 854, 855, 0, 0,
	825, 0, 0, 0, 0, 846, 840, 0, 0, 1359,
	0, 0, 826, 0, 857, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	831, 0, 0, 825, 0, 0, 0, 0, 0, 840,
	0, 0, 0, 0, 0, 0, 0, 850, 858, 0,
	0, 0, 0, 831, 0, 0, 0, 0, 1364, 0,
	0, 0, 856, 0, 0, 0, 0, 0, 0, 0,
	850, 858, 848, 0, 0, 0, 0, 0, 841, 0,
	0, 0, 0, 0, 0, 856, 831, 0, 0, 0,
	0, 0, 0, 0, 0, 848, 0, 0, 0, 0,
	847, 841, 0, 850, 858, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 856, 0,
	0, 0, 0, 847, 0, 0, 0, 0, 848, 0,
	0, 0, 0, 0, 841, 842, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 851, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 847, 0, 842, 0,
	0, 0, 0, 0, 1483, 0, 0, 0, 0, 851,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 842, 0, 0, 0, 0, 0, 0, 0, 0,
	849, 0, 851, 837, 838, 839, 0, 836, 833, 834,
	835, 827, 828, 829, 830, 832, 0, 852, 0, 0,
	0, 0, 0, 849, 0, 0, 837, 838, 839, 0,
	836, 833, 834, 835, 827, 828, 829, 830, 832, 0,
	852, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 849, 0, 0, 837,
	838, 839, 0, 836, 833, 834, 835, 827, 828, 829,
	830, 832, 824, 852, 843, 844, 845, 853, 854, 855,
	0, 0, 0, 0, 0, 0, 0, 846, 0, 0,
	0, 0, 0, 0, 826, 824, 857, 843, 844, 845,
	853, 854, 855, 0, 0, 0, 0, 0, 0, 0,
	846, 0, 0, 0, 1319, 825, 0, 826, 0, 857,
	0, 840, 0, 0, 0, 0, 0, 0, 824, 0,
	843, 844, 845, 853, 854, 855, 0, 0, 825, 0,
	0, 0, 0, 846, 840, 0, 0, 0, 0, 0,
	826, 0, 857, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 831, 0,
	0, 825, 0, 0, 0, 0, 0, 840, 0, 0,
	0, 0, 0, 0, 0, 850, 858, 0, 0, 0,
	0, 831, 0, 0, 0, 0, 0, 0, 0, 0,
	856, 0, 0, 0, 0, 0, 0, 0, 850, 858,
	848, 0, 0, 0, 0, 0, 841, 0, 0, 0,
	0, 0, 0, 856, 831, 0, 0, 0, 0, 0,
	0, 0, 0, 848, 0, 0, 0, 0, 847, 841,
	0, 850, 858, 0, 0, 0, 0, 0, 0, 1325,
	0, 0, 0, 0, 0, 0, 856, 0, 0, 0,
	0, 847, 0, 0, 0, 0, 848, 0, 0, 0,
	0, 0, 841, 842, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 851, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 847, 0, 842, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 851, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 842,
	0, 0, 0, 0, 0, 0, 0, 0, 849, 0,
	851, 837, 838, 839, 0, 836, 833, 834, 835, 827,
	828, 829, 830, 832, 0, 852, 0, 0, 0, 0,
	0, 849, 0, 0, 837, 838, 839, 0, 836, 833,
	834, 835, 827, 828, 829, 830, 832, 1327, 852, 1344,
	1345, 1346, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1468, 0, 849, 0, 0, 837, 838, 839,
	0, 836, 833, 834, 835, 827, 828, 829, 830, 832,
	824, 852, 843, 844, 845, 853, 854, 855, 0, 0,
	0, 0, 0, 0, 0, 0, 1341, 0, 0, 0,
	0, 0, 826, 824, 857, 843, 844, 845, 853, 854,
	855, 0, 0, 0, 0, 0, 0, 0, 1327, 0,
	1344, 1345, 1346, 825, 0, 826, 0, 857, 0, 840,
	0, 0, 0, 1467, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1332, 0, 0, 825, 0, 0, 0,
	0, 0, 840, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1341, 0, 0,
	0, 0, 0, 0, 0, 1347, 831, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1342, 0, 850, 858, 0, 0, 0, 0, 831,
	0, 0, 0, 0, 0, 0, 0, 0, 856, 0,
	0, 0, 0, 0, 1332, 0, 850, 858, 848, 0,
	0, 0, 0, 0, 841, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 848, 0, 0, 0, 0, 1347, 841, 1343, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1342, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 842, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 851, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 842, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 851, 1338, 1339, 1340, 1343,
	1337, 1334, 1335, 1336, 1328, 1329, 1330, 1331, 1333, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 849, 0, 0, 837,
	838, 839, 0, 836, 833, 834, 835, 827, 828, 829,
	830, 832, 0, 852, 0, 0, 0, 0, 0, 849,
	0, 0, 837, 838, 839, 0, 836, 833, 834, 835,
	827, 828, 829, 830, 832, 0, 852, 1338, 1339, 1340,
	0, 1337, 1334, 1335, 1336, 1328, 1329, 1330, 1331, 1333,
	617, 611, 634, 605, 625, 624, 0, 0, 607, 606,
	0, 0, 0, 636, 635, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 630, 0, 622, 621, 0, 0, 0,
	0, 0, 0, 0, 620, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	619, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 612, 613, 614, 615,
	0, 633, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 623, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 618, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 609, 0, 0, 0, 0, 0, 0, 0, 616,
	610, 0, 0, 0, 0, 0, 0, 638, 0, 0,
	0, 0, 0, 0, 608, 0, 0, 631, 632, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	637,
}
var sqlPact = [...]int{

	2810, -1000, 31, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 771, -1000, -1000, -1000, -1000,
	627, 761, 544, 15632, 15632, 15370, 2204, 2204, 16942, -1000,
	-1000, 19824, -1000, 2317, 15632, 478, 491, 478, 478, 514,
	16942, 599, 646, 129, -1000, 679, -19, 19562, 15632, 1255,
	29, 14322, 304, 2810, 15108, 15632, 19300, 1118, 1022, 1021,
	14322, 19038, 18776, 18514, -1000, 10074, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 598, 323, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 321, -1000,
	14846, -1000, 860, -1000, 28, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 858, -1000, 15632, -1000, -1000, 18252, 17990,
	320, 814, -1000, -1000, 517, 391, 1284, -1000, 42, -1000,
	-1000, 1117, -1000, 854, 1116, 1115, 1114, 1105, 1102, 1100,
	384, 830, -1000, 595, 1287, 39, 814, -1000, 814, -1000,
	-1000, -1000, 575, 16942, -1000, 14322, -1000, 17728, 1038, 17466,
	-1000, 679, -1000, -1000, -1000, 873, 1254, 1254, 1254, 1273,
	130, 127, 129, 16, 15632, -1000, 314, 16, 7047, 7047,
	-1000, -1000, 304, -1000, 338, 12481, -1000, 7597, -1000, 726,
	1170, 720, 702, 1169, -79, 14322, 15632, 15632, 626, 17204,
	-1000, 1168, 120, 1165, -1000, 99, 1161, -1000, -7, -1000,
	-1000, -1000, -1000, -1000, -1000, 304, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	14584, 1314, 23705, -1000, 8990, -1000, -1000, 12746, 1308, 12746,
	-1000, -1000, 1311, -1000, 8990, -1000, 20, 19, 972, 1048,
	10621, 10349, 1214, 1215, -1000, -1000, -1000, 40, 4481, 15632,
	1125, 12746, 15632, 15632, 15632, 15632, 15632, 15632, -1000, 952,
	-1000, 15632, 8990, 39, -1000, -1000, -1000, 8990, 4209, -1000,
	18, 17, -1000, 16942, -1000, 121, -1000, 394, 912, 16680,
	1179, 904, -1000, 873, -1000, 863, 943, 8165, 8990, 129,
	-1000, -1000, 129, 129, 8990, -1000, -1000, 15632, 16, 1306,
	15632, 169, -1000, 22419, -1000, -1000, 8990, 8990, 8990, 8990,
	8990, 802, -1000, -1000, -1000, 5322, -1000, -1000, 39, 303,
	132, -1000, -1000, 300, 39, -1000, -1000, -1000, -1000, 297,
	1418, 437, -1000, -1000, -1000, 8990, 395, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1124, 294, 286, -1000,
	-1000, -1000, -1000, 284, 283, 269, 266, 257, 256, 255,
	253, 251, 244, 241, 231, 227, 226, 770, -1000, 410,
	-1000, -1000, 410, 410, -1000, 212, 212, 213, -1000, -1000,
	-1000, -1000, 212, -1000, -1000, -1000, 385, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 214, 169, -1000, -1000, -1000, 15632,
	-8, -1000, 23128, -1000, -2, 730, -1000, 13798, 1247, 1239,
	1242, 14322, 569, 568, 15632, 15632, 402, 581, 1305, 581,
	11951, -1000, 15632, 15632, -1000, 15632, -1000, -1000, 15632, -1000,
	15632, 15632, 193, 13274, 666, 1160, -19, -12, -1000, 1316,
	-1000, -1000, -1000, -1000, 91, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 213,
	770, 212, 212, 212, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 385, -1000, -1000, 410, 410, 410, -1000, -1000, -13,
	23128, 567, 3, 13010, 15632, -1000, 33, -1000, -1000, 1099,
	477, -18, 732, 1013, 754, -1000, -1000, -1000, -1000, 14,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1371, -1000, -1000, -1000, -1000, 1398, 14, -1000, -1000, -1000,
	-1000, -1000, 1417, -1000, -1000, -1000, 4481, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 15632, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -46, -1000, 2918, -1000, -1000, 732,
	1013, -1000, -1000, 14322, 13536, -19, 1159, 832, 903, -1000,
	-1000, 359, 1158, -1000, -1000, -1000, -1000, 23128, -1000, 23128,
	645, 1026, -1000, 1026, 11, -1000, 22396, -1000, 211, -24,
	-1000, 402, 7047, 11686, 23705, 15632, 590, 8990, 8990, 8990,
	8990, 8990, 8990, 8990, 8990, 8990, 8990, 8990, 8990, 8990,
	8990, 8990, 8990, 8990, 8990, 8990, 8990, 8990, 8990, 987,
	8990, 553, 8990, 8990, 8990, 8990, 950, 808, 200, 4481,
	-1000, 623, 623, 623, 23410, 23410, 210, 15, 21772, 7,
	39, -1000, -1000, 6754, 6460, 39, 4753, -1000, 705, 1389,
	405, 23128, 1131, 1070, 209, 110, 109, 8990, 8990, 672,
	8990, 9265, 8990, 8990, 5597, 8990, 8990, 8990, 8990, 8990,
	8990, -1000, 208, -1000, -1000, -1000, -1000, 1384, -1000, -1000,
	1380, -1000, 586, 582, 1379, 402, 108, 7597, -1000, 666,
	15632, 15632, 15632, -1000, -1000, 896, 16418, -1000, 23705, 15632,
	-1000, 207, 203, 1006, 1001, 15632, 15632, 16156, 15894, 15632,
	699, 15632, 15632, 698, -1000, 674, 8990, 758, -1000, 11155,
	414, 15632, 690, 131, -1000, -1000, -1000, 354, 15632, -1000,
	-1000, -1000, 120, -1000, 99, -1000, -1000, 14322, -1000, -1000,
	-1000, -1000, -1000, -1000, 23705, 331, 324, -1000, 1377, 549,
	-1000, 543, 542, 538, -1000, 202, -1000, 8990, 15632, 13010,
	3, 1, -1000, -1000, 15632, 1013, -1000, -1000, -1000, -1000,
	681, -1000, 749, -1000, 10893, -1000, -1000, -1000, 705, -1000,
	-3, -1000, -1000, 8990, -1000, -1000, -1000, 107, -1, -1000,
	-1000, -1000, -1000, -1000, 15632, 274, 15632, -1000, 15632, 15632,
	1156, 1415, 15632, -1000, -1000, -1000, 8990, -1000, -1000, -1000,
	-19, 15632, -1000, 1067, -1000, -76, 1466, -93, 14060, -1000,
	3450, -1000, -1000, 382, 322, 322, 588, 588, 588, 588,
	243, 243, 577, 228, 2564, 2564, 2564, 516, 268, 268,
	2564, 2564, 2564, 23410, 1892, 622, 8990, 8990, 535, 791,
	200, 622, 8990, 1351, 622, 622, 622, -1000, 986, -1000,
	-1000, -1000, 1097, 199, 9265, 9265, -1000, -1000, -1000, 5322,
	-1000, -1000, 198, 8990, -1000, 8990, -45, -118, -1000, -1000,
	-26, -1000, -1000, -14, 8990, 8990, 8990, 101, -1000, 98,
	583, -1000, 8990, 804, 197, 195, 8990, -1000, -1000, 23095,
	20408, 97, 1093, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	95, 23072, 94, 21004, -1000, 9265, 9265, 9265, 5322, 190,
	89, 22114, -46, 22790, 7872, 7872, 7872, 88, 22757, 8990,
	-46, 20375, 20352, 3136, -32, -36, -38, 1373, -51, 87,
	371, 368, 86, 1067, -1000, -1000, -1000, -1000, 534, 520,
	1154, -1000, 895, -1000, 759, 8990, 15632, 189, 188, 752,
	-1000, 1152, 812, 1151, 812, -1000, -2, 722, -1000, -1000,
	519, -1000, 7047, 23128, -1000, 688, 1244, -56, -1000, -1000,
	-1000, 7047, 402, 11951, 11686, 7597, -57, -1000, -1000, 666,
	-1000, 458, 1369, 83, 933, 821, 703, 634, 1360, 23128,
	-3, -1000, -3, -1000, -1000, -1000, -1000, -1000, -1000, 15632,
	22058, 1053, 13536, 186, 15632, 185, 360, 181, 15632, -1000,
	1179, -1000, 82, -1000, 1063, 1268, -1000, 11686, 870, 1011,
	1010, 11686, 954, 807, 807, 807, -1000, 14060, 3925, -1000,
	-1000, 15632, 179, 11420, 79, 1466, 8990, 622, 622, 8990,
	9265, 9265, -1000, 622, -1000, -1000, -1000, -1000, 1087, 177,
	8990, 23705, 23448, 23377, -61, 6166, -5, 21739, -1000, -1000,
	132, -1000, 75, 7322, -1000, 22452, 27, 27, -1000, 1413,
	1177, -1000, 8990, 22734, -1000, 12216, 403, 819, 21716, 23705,
	23705, -1000, 8990, -1000, 1085, 8990, -1000, 23705, 9265, 9265,
	9265, 9265, 9265, 9265, 9265, 9265, 9265, 9265, 9265, 9265,
	9265, 9265, 9265, 9265, 9265, 9265, 9265, 1029, 9265, 1344,
	1344, 1344, -6, 5872, -1000, 1122, 1085, 8990, 8990, 23705,
	73, 72, 71, -1000, 8990, -46, 8990, 8990, 8990, -1000,
	-1000, -1000, 70, -1000, 1356, -1000, -1000, -1000, -1000, 1063,
	15632, 15632, 15632, 1150, 1776, -1000, 21430, -63, 15632, 15632,
	-1000, 1003, 1014, 445, 15632, -1000, 15632, -1000, 15632, 15632,
	15632, 15632, -33, 7047, 141, -19, 15632, -33, 674, -1000,
	-28, -1000, 350, -1000, 329, 328, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 65, -1000, -1000, -1000, 1056, -1000,
	9809, 175, 15632, 13536, -19, 9809, 828, -1000, -1000, 398,
	8990, 8990, 1466, 602, 11686, 11686, 864, 1009, 11686, -1000,
	-1000, -1000, -1000, -1000, -1000, 999, 172, 15632, 14060, 611,
	622, 3531, 2259, 8990, 23705, 23433, -65, 8990, 8990, -1000,
	-67, -1000, 8990, -1000, -1000, 1406, 8990, 64, 63, 62,
	-1000, -1000, 23128, 8990, -1000, -1000, 20086, 8990, 60, -1000,
	59, 58, 23128, 1122, 23128, -1000, 728, 728, 1344, 1344,
	1344, 1344, 1153, 1153, 1208, 1932, 886, 886, 886, 482,
	585, 585, 886, 886, 886, 1080, 960, 171, 21346, 8990,
	-69, -1000, -1000, -1000, 23128, 23128, 56, -1000, -1000, -1000,
	-46, 2944, 21397, 21374, -1000, 55, 398, -1000, -1000, -1000,
	15632, -1000, 15632, -1000, 15632, 15632, 1081, 885, -1000, -1000,
	982, 166, 9265, 15632, -1000, 780, -71, -77, 878, -1000,
	877, 8990, -1000, 23705, 812, 812, -1000, 518, 498, -1000,
	-33, 1185, 15632, 1224, -1000, -1000, -1000, 157, -1000, -1000,
	-1000, 798, -87, -1000, 273, 1252, 8990, -1000, -1000, 155,
	9809, -88, 54, -1000, -94, 15632, -1000, 15632, 23128, -46,
	579, -1000, 864, -1000, 154, 8990, 11686, -1000, -143, -1000,
	348, -1000, 15632, -99, -1000, 8990, 8990, 23433, -103, -1000,
	622, 622, -1000, 21088, -1000, 22452, -1000, -1000, -1000, 23128,
	797, -1000, 21055, -1000, -1000, -1000, -1000, 9265, 1077, 153,
	23705, 21032, -1000, -1000, 8990, -1000, -1000, -1000, -1000, -1000,
	1025, -1000, -1000, 15632, 890, -1000, -1000, 8990, 21346, 152,
	1053, 151, -1000, -1000, -1000, 736, -1000, -1000, 23128, 1253,
	-1000, -1000, 15632, 15632, 523, -105, 15632, -1000, -1000, 5047,
	15632, 780, 9809, 1261, 39, 15632, 1261, 20746, 4753, -107,
	-1000, 1053, 780, 150, -37, -1000, 1295, 1403, -1000, 15632,
	23128, -1000, 999, -1000, 4481, -109, -1000, 622, 622, -1000,
	-1000, 48, 819, 1267, -1000, 21687, 9265, 23705, -113, -1000,
	20713, -1000, -1000, 1148, 20690, 936, 15632, -1000, 15632, 15632,
	419, 15632, -1000, -1000, 624, -1000, 402, -1000, 140, 1053,
	-1000, -1000, -1000, -1000, 1252, -14, 780, -1000, 1053, 9809,
	15632, 139, -1000, -114, -1000, -1000, -1000, -1000, 669, 8990,
	21687, -119, -1000, -1000, 1140, -1000, 817, 835, 46, -124,
	100, -1000, 8990, -1000, 11951, -1000, 15632, -1000, 1261, 45,
	1053, -1000, -125, -1000, -1000, -1000, 44, 8715, 8715, -46,
	-1000, 15632, -1000, 827, 823, 614, -1000, -1000, -1000, -1000,
	-1000, 936, 15632, 23128, -111, -126, -1000, -1000, -1000, 780,
	-1000, -1000, -1000, 9537, 874, 640, 22081, -1000, -1000, -1000,
	1192, -1000, 438, 796, 796, 817, -133, -1000, 812, 1053,
	1325, -1000, -1000, -1000, -1000, -1000, -1000, 1333, -1000, -1000,
	989, -1000, -1000, -1000, -1000, -1000, 8440, -1000, -1000, -1000,
	-1000,
}
var sqlPgo = [...]int{

	0, 1675, 1671, 1293, 123, 122, 1668, 1667, 1666, 1665,
	114, 116, 115, 125, 1663, 87, 1661, 1660, 1657, 113,
	1655, 1652, 1647, 104, 1646, 1645, 1644, 1641, 1640, 1638,
	107, 44, 153, 2304, 151, 1637, 1636, 1634, 14, 92,
	70, 1632, 2, 50, 91, 99, 1067, 37, 1631, 1630,
	129, 33, 19, 154, 94, 139, 150, 131, 1629, 1628,
	1620, 56, 1619, 3, 1617, 1615, 1608, 52, 23, 1604,
	18, 20, 1602, 1597, 124, 1594, 77, 98, 100, 69,
	121, 179, 1591, 48, 12, 53, 1590, 26, 1588, 40,
	79, 133, 1586, 83, 161, 61, 22, 75, 1585, 1583,
	1582, 1581, 81, 1580, 96, 60, 1579, 1575, 80, 1571,
	126, 132, 1570, 1569, 112, 1564, 1563, 1562, 694, 1560,
	1559, 339, 1558, 6, 46, 55, 8, 103, 102, 17,
	1557, 16, 1556, 1404, 817, 790, 1552, 49, 38, 84,
	47, 57, 21, 1551, 1550, 89, 1549, 1547, 1540, 1538,
	1537, 82, 1536, 68, 135, 41, 64, 90, 24, 63,
	85, 97, 142, 95, 1530, 1529, 111, 1527, 25, 1526,
	1524, 747, 110, 1522, 1521, 1520, 626, 497, 256, 28,
	1519, 1518, 214, 145, 1517, 1516, 118, 1515, 1514, 152,
	128, 30, 1513, 109, 1511, 88, 1504, 0, 54, 43,
	1494, 117, 78, 1491, 1488, 1476, 1474, 27, 4, 10,
	5, 7, 9, 32, 31, 1471, 1470, 127, 105, 1461,
	141, 1460, 1456, 29, 1450, 1447, 15, 1436, 13, 1435,
	11, 1, 1432, 134, 1431, 93, 1430, 1317, 1428, 136,
	1425, 1424, 1311, 86,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 4, 4, 40, 40,
	39, 39, 39, 39, 39, 39, 39, 39, 39, 39,
	39, 39, 39, 39, 39, 37, 37, 42, 42, 42,
	41, 41, 36, 36, 5, 5, 5, 5, 10, 11,
	11, 11, 11, 11, 11, 80, 80, 79, 79, 82,
	82, 12, 12, 13, 13, 13, 13, 13, 13, 13,
	13, 167, 167, 166, 14, 143, 143, 15, 15, 15,
	15, 16, 103, 103, 17, 17, 17, 17, 18, 22,
	233, 233, 233, 237, 237, 238, 238, 239, 239, 239,
	239, 239, 239, 239, 235, 235, 25, 25, 25, 25,
	25, 122, 118, 118, 120, 120, 120, 120, 45, 117,
	117, 117, 117, 119, 119, 119, 119, 190, 189, 189,
	195, 195, 195, 58, 58, 58, 58, 58, 59, 59,
	59, 188, 188, 188, 188, 196, 196, 196, 196, 196,
	196, 60, 60, 60, 194, 194, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 234, 234, 236, 236, 27, 8, 8,
	9, 9, 61, 61, 62, 62, 125, 125, 125, 125,
	63, 63, 124, 205, 205, 206, 206, 206, 206, 206,
	206, 207, 207, 207, 207, 207, 207, 207, 203, 203,
	204, 201, 201, 202, 202, 202, 202, 240, 240, 123,
	123, 66, 66, 210, 210, 210, 210, 208, 208, 208,
	208, 208, 211, 209, 212, 212, 212, 212, 212, 154,
	154, 154, 29, 7, 7, 107, 107, 70, 70, 158,
	158, 158, 52, 52, 38, 38, 38, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 108, 108, 109, 109,
	20, 24, 28, 28, 28, 28, 28, 242, 242, 49,
	49, 49, 49, 50, 50, 121, 121, 121, 121, 121,
	44, 6, 6, 43, 43, 19, 19, 19, 19, 19,
	55, 55, 114, 114, 114, 116, 116, 115, 115, 115,
	93, 93, 30, 75, 75, 84, 84, 85, 85, 164,
	86, 86, 23, 23, 33, 33, 31, 31, 31, 31,
	31, 31, 32, 32, 34, 34, 34, 34, 34, 34,
	34, 218, 218, 218, 220, 220, 217, 219, 219, 241,
	241, 94, 94, 94, 65, 64, 64, 68, 68, 67,
	69, 69, 157, 91, 91, 91, 91, 110, 111, 111,
	112, 112, 113, 113, 90, 90, 140, 140, 35, 35,
	74, 74, 76, 76, 131, 131, 132, 132, 130, 130,
	130, 159, 159, 159, 159, 160, 160, 160, 160, 160,
	160, 155, 155, 155, 155, 156, 156, 165, 165, 97,
	97, 97, 97, 95, 95, 96, 96, 161, 161, 161,
	161, 92, 92, 162, 162, 162, 126, 126, 168, 168,
	168, 73, 73, 73, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 170, 170, 170,
	170, 172, 172, 172, 171, 171, 171, 171, 171, 171,
	171, 171, 171, 171, 171, 171, 171, 171, 173, 173,
	180, 180, 181, 181, 182, 183, 174, 174, 175, 175,
	176, 177, 184, 184, 184, 184, 186, 186, 178, 178,
	178, 178, 178, 179, 104, 104, 104, 104, 104, 104,
	104, 104, 104, 104, 104, 104, 104, 104, 105, 105,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 213,
	213, 213, 213, 213, 213, 213, 215, 215, 216, 216,
	214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
	214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
	214, 214, 214, 214, 214, 214, 221, 221, 222, 222,
	223, 223, 224, 224, 226, 227, 227, 227, 228, 232,
	232, 225, 225, 229, 229, 229, 230, 230, 231, 231,
	231, 231, 231, 145, 145, 145, 146, 146, 147, 81,
	81, 142, 142, 141, 141, 141, 144, 144, 98, 185,
	185, 185, 185, 185, 185, 185, 99, 99, 106, 100,
	100, 101, 101, 101, 101, 101, 101, 137, 138, 102,
	102, 102, 139, 139, 148, 152, 152, 151, 150, 150,
	149, 149, 129, 129, 129, 129, 128, 127, 87, 87,
	243, 243, 153, 153, 88, 88, 89, 83, 83, 163,
	163, 163, 163, 77, 77, 57, 57, 78, 78, 53,
	53, 56, 54, 54, 54, 54, 71, 71, 72, 72,
	51, 51, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 187, 187, 187, 46, 46, 46, 47,
	47, 48, 48, 192, 192, 192, 193, 193, 193, 193,
	191, 191, 191, 191, 191, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 4, 6, 1, 3,
	2, 5, 3, 6, 4, 6, 6, 6, 4, 8,
	2, 3, 3, 6, 4, 3, 2, 1, 1, 0,
	2, 0, 2, 0, 1, 1, 1, 1, 6, 3,
	5, 4, 6, 4, 6, 1, 3, 1, 2, 2,
	3, 2, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 5, 3, 0, 1, 1, 1,
	1, 3, 3, 0, 2, 3, 2, 3, 6, 6,
	1, 2, 2, 1, 1, 1, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 2, 3, 6, 3,
	1, 5, 2, 1, 1, 1, 3, 3, 2, 3,
	3, 3, 3, 1, 3, 3, 2, 1, 1, 3,
	1, 1, 1, 2, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 1,
	1, 1, 1, 0, 1, 1, 2, 2, 4, 2,
	4, 4, 4, 4, 4, 4, 4, 2, 3, 4,
	3, 2, 4, 2, 0, 2, 0, 4, 7, 10,
	5, 8, 1, 0, 1, 3, 1, 1, 1, 1,
	8, 0, 3, 2, 0, 3, 1, 2, 2, 3,
	6, 2, 1, 1, 2, 4, 2, 5, 7, 8,
	5, 3, 1, 4, 6, 5, 10, 1, 1, 4,
	0, 3, 0, 2, 2, 2, 0, 1, 1, 2,
	2, 0, 3, 3, 2, 1, 1, 2, 2, 1,
	2, 1, 4, 11, 14, 1, 0, 1, 3, 3,
	3, 5, 2, 0, 1, 1, 0, 6, 6, 8,
	6, 8, 8, 10, 8, 10, 1, 0, 2, 0,
	2, 2, 3, 3, 2, 2, 2, 1, 0, 1,
	3, 2, 0, 2, 1, 1, 1, 3, 3, 0,
	3, 4, 7, 3, 0, 6, 6, 8, 5, 7,
	1, 3, 1, 4, 2, 8, 5, 4, 3, 0,
	2, 0, 8, 2, 0, 1, 3, 1, 1, 3,
	5, 5, 1, 1, 3, 3, 1, 2, 3, 2,
	3, 4, 1, 1, 8, 8, 1, 2, 4, 4,
	4, 2, 2, 3, 1, 3, 6, 1, 0, 1,
	0, 1, 1, 0, 1, 1, 0, 1, 0, 3,
	1, 3, 2, 2, 2, 1, 1, 2, 2, 3,
	1, 1, 1, 1, 3, 0, 2, 0, 2, 3,
	3, 0, 1, 3, 3, 1, 1, 3, 2, 4,
	0, 3, 2, 1, 4, 3, 4, 5, 4, 5,
	4, 5, 2, 4, 1, 1, 0, 5, 0, 2,
	2, 2, 1, 1, 0, 4, 2, 1, 2, 2,
	4, 1, 3, 1, 2, 3, 2, 0, 2, 5,
	2, 3, 4, 0, 1, 1, 1, 1, 2, 4,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 5, 0, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 2, 2, 2, 1, 1, 3, 0,
	1, 1, 1, 1, 5, 2, 1, 1, 1, 1,
	4, 1, 2, 2, 1, 1, 1, 0, 1, 1,
	4, 1, 4, 1, 1, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 0, 1, 4,
	1, 3, 3, 5, 2, 2, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 2, 2,
	3, 4, 3, 4, 4, 5, 3, 3, 3, 3,
	3, 4, 3, 3, 4, 3, 4, 3, 4, 5,
	6, 6, 7, 6, 7, 6, 7, 3, 4, 1,
	3, 2, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 5, 6, 6, 7, 1, 1, 1,
	3, 1, 1, 1, 2, 2, 2, 1, 1, 3,
	5, 6, 8, 6, 6, 4, 4, 1, 1, 1,
	5, 1, 3, 1, 3, 1, 1, 1, 1, 6,
	6, 4, 4, 4, 4, 6, 5, 5, 5, 4,
	8, 6, 6, 4, 4, 4, 5, 0, 5, 0,
	2, 0, 1, 3, 3, 2, 2, 0, 6, 1,
	0, 3, 0, 2, 2, 0, 1, 4, 2, 2,
	2, 2, 2, 4, 3, 5, 4, 3, 5, 1,
	3, 1, 3, 3, 3, 2, 1, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 4, 3, 2, 3,
	0, 3, 3, 2, 2, 1, 0, 2, 2, 3,
	2, 1, 1, 3, 5, 1, 2, 4, 2, 0,
	1, 0, 1, 1, 3, 5, 2, 2, 1, 2,
	1, 0, 1, 1, 1, 3, 3, 1, 3, 3,
	2, 1, 1, 1, 3, 1, 3, 1, 3, 1,
	2, 3, 1, 1, 2, 2, 1, 3, 3, 0,
	1, 2, 1, 1, 1, 1, 6, 2, 3, 5,
	1, 1, 1, 1, 2, 2, 1, 1, 1, 1,
	0, 3, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -10, -11, -12, -14,
	-16, -17, -18, -19, -21, -22, -24, -23, -25, -26,
	-27, -28, -20, -29, -30, 22, -6, -7, -8, -9,
	-219, 90, 98, 191, 97, 83, 113, 205, 212, -31,
	-33, 220, -122, 221, 228, 33, 230, 57, 93, 207,
	202, 250, 64, -218, -34, -32, 296, 271, 277, 215,
	-35, 237, 264, 299, 237, 76, 126, 85, 130, 258,
	257, 76, 126, 237, -13, 296, -23, -5, -11, -4,
	-19, -30, -10, -12, 22, -46, 4, -197, -199, 19,
	20, 22, 32, 33, 38, 42, 45, 56, 57, 58,
	60, 62, 63, 66, 67, 74, 75, 76, 77, 79,
	83, 85, 89, 90, 92, 97, 98, 103, 104, 107,
	109, 114, 119, 120, 127, 130, 125, 139, 141, 142,
	147, 150, 153, 155, 156, 157, 158, 159, 161, 162,
	164, 166, 163, 169, 171, 172, 178, 181, 184, 185,
	186, 189, 191, 193, 194, 195, 197, 198, 202, 200,
	201, 203, 205, 207, 208, 210, 212, 213, 214, 217,
	218, 220, 221, 223, 226, 229, 230, 233, 231, 228,
	236, 238, 239, 246, 250, 251, 252, 253, 256, 257,
	258, 261, 262, 263, 267, 272, 273, 274, 275, 27,
	34, 35, 36, 37, 39, 40, 43, 44, 48, 49,
	50, 52, 78, 80, 81, 96, 99, 105, 115, 117,
	121, 122, 131, 132, 133, 134, 136, 145, 168, 170,
	179, 183, 188, 190, 196, 209, 216, 224, 225, 232,
	234, 241, 242, 243, 247, 248, 264, 265, -46, -46,
	191, 21, -237, 21, -238, -239, 64, 90, 113, 215,
	130, 85, 257, -237, -50, 212, -46, -118, 150, 218,
	209, 246, -119, -117, -190, 241, 159, -79, -46, 4,
	76, 56, 77, 114, 126, 127, 61, 62, 142, 238,
	241, 246, 21, 64, -53, -46, -242, 246, 246, -242,
	-242, -49, 246, 244, -50, -241, 237, 237, -107, 76,
	255, -32, -34, -33, -67, -68, 254, 135, 95, 177,
	-31, -33, -218, -220, 197, -217, -46, -220, -64, -65,
	21, 87, 300, -161, -53, 175, -89, 296, -3, -161,
	121, -46, -56, 121, -53, 111, 137, 137, -162, -161,
	-46, 121, -57, 121, -56, -80, 121, -79, -167, -166,
	-193, 4, -197, -199, -198, 264, 54, 65, 112, 129,
	123, 138, 140, 146, 148, 160, 180, 182, 206, 222,
	237, -143, 296, -103, 296, -46, 21, 174, 300, 174,
	-46, -118, 50, -118, 296, -120, -44, -45, 139, 193,
	244, 281, 111, 275, -60, 5, 82, -82, 298, 111,
	-234, 174, 111, 111, 111, 111, 111, 111, 275, 139,
	193, 237, 32, -87, -129, -128, -127, 294, 298, -121,
	-44, -45, -121, 244, -50, -92, -161, -79, 121, 126,
	-46, 121, -67, -68, -91, -110, -111, 149, 173, -94,
	21, 87, -94, -94, 42, 297, 297, 300, -220, -72,
	296, -83, -163, -133, 289, -135, 287, 288, 293, 165,
	276, -145, -53, -136, 9, 296, -148, -215, -33, 96,
	28, -146, -147, 209, -46, 7, 8, 5, 6, -51,
	-170, -179, 249, 100, 167, 46, -213, -214, 4, -197,
	-192, -171, -181, -175, -178, 136, 54, 69, 72, 70,
	73, 219, 259, 47, 27, 99, 183, 188, 234, 247,
	248, 121, 168, 122, 52, 115, 145, 89, 35, 37,
	39, 40, 48, 49, 78, 80, 81, 105, 131, 132,
	133, 134, 170, 196, 224, 232, 242, 243, 265, -198,
	-182, -183, -176, -177, -184, -83, -89, 289, -53, 296,
	-88, -153, -133, 82, -40, 200, -39, 20, 22, 90,
	262, 96, 200, 200, 96, 301, -162, -55, -53, -55,
	220, -46, 29, 96, -42, 300, 45, 203, 96, -42,
	300, 96, 297, 300, -161, 121, 29, -142, -168, -169,
	-171, -180, -174, -178, -179, 38, 44, 43, 239, 216,
	225, 36, 131, 132, 133, 134, 224, 35, 196, 105,
	89, 81, 80, 170, 40, 39, -182, -183, -176, -177,
	78, 242, 243, 136, 37, 49, 48, 265, 232, -81,
	-133, -233, -78, 237, 76, -54, -46, 289, -239, -233,
	29, -81, 300, 300, 147, -59, 153, 164, 119, -189,
	82, -195, -188, -154, 9, 249, 100, 174, -194, 8,
	288, -187, -193, 5, 7, 287, -189, 82, 67, -196,
	5, 4, -179, -154, 82, 150, 298, -191, 4, -197,
	-199, -198, -200, 21, 23, 24, 25, 26, 28, 29,
	30, 31, 41, 46, 47, 51, 53, 55, 61, 64,
	68, 69, 70, 71, 72, 73, 82, 84, 86, 87,
	88, 91, 93, 95, 100, 101, 102, 108, 110, 111,
	113, 116, 118, 124, 126, 128, 135, 137, 143, 144,
	149, 151, 152, 165, 167, 173, 174, 175, 176, 177,
	187, 192, 199, 204, 215, 219, 227, 235, 237, 240,
	244, 245, 249, 254, 255, 259, 260, 266, 268, 269,
	270, 271, -190, -236, 108, -233, -190, -190, -190, -190,
	-190, -46, 147, -190, -81, -129, -133, -191, 289, 300,
	300, -50, -42, 300, 296, 29, 165, -47, 121, -46,
	-43, 92, 165, -91, -111, -110, -112, -133, 21, -133,
	-135, -32, -32, -32, -69, -157, -133, -217, 29, -71,
	-46, -74, 300, 111, 10, 53, 32, 287, 288, 289,
	290, 106, 291, 284, 285, 286, 283, 279, 280, 281,
	59, 154, 211, 12, 13, 14, 25, 176, 148, 276,
	123, 222, 293, 15, 16, 17, 138, 34, 124, 29,
	4, -133, -133, -133, -133, -133, 182, -33, -133, -81,
	-87, -33, -141, 294, 296, -87, 296, 5, 5, 296,
	-149, -133, -221, 272, 108, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 190, -186, 267, -186, -186, -172, 296, -172, -173,
	296, -172, 273, 277, 296, -74, -53, 300, 297, 300,
	244, -108, 61, 55, -124, 121, 55, -201, -46, 61,
	-202, 51, 255, 192, 110, -108, 61, -108, 61, 61,
	-161, 244, 244, -56, -46, -126, 269, -114, -23, 296,
	82, 29, -114, -84, -85, -164, -86, -53, 296, -46,
	-46, -56, -57, -79, -80, -13, -166, 96, -15, -23,
	-19, -30, -10, 297, 300, -73, 28, -104, 296, 274,
	157, 79, 120, 156, -105, 214, 297, 300, 244, 300,
	-78, -71, -128, -127, 111, 246, 297, -45, -44, -58,
	195, 226, 201, 217, 300, 8, 7, 7, 5, -191,
	-235, -46, 295, 304, -45, -44, -161, -61, -62, -125,
	-124, -203, -204, -201, 126, 255, 101, -23, 96, 174,
	165, 281, 96, -113, 209, 210, 300, -38, 30, 86,
	296, 300, 297, -126, -163, -76, -159, -161, -33, -160,
	296, -168, -79, 241, -133, -133, -133, -133, -133, -133,
	-133, -133, -133, -133, -133, -133, -133, -133, -133, -133,
	-133, -133, -133, -133, -133, -133, 148, 123, 222, 34,
	124, -133, 244, -133, -133, -133, -133, 167, 165, 249,
	100, 256, 87, 171, -243, 235, 31, -139, -33, 296,
	-191, -145, 209, 296, 297, 300, -81, -144, 295, -141,
	-81, 297, 297, -81, 266, 21, 87, 289, -104, 7,
	-152, -151, 268, -222, 103, 116, 296, 297, 297, -133,
	-133, -98, -185, 4, 274, 157, 79, 120, 156, 214,
	-99, -133, -100, -134, -135, 287, 288, 293, 296, 209,
	-101, -133, -81, -133, 41, 144, 245, -102, -133, 111,
	-81, -133, -133, -133, -81, -81, -81, 296, 7, 7,
	241, 241, 7, -126, 297, -153, -39, -53, -46, -46,
	165, -124, 121, -168, -46, 296, 296, 141, 141, -46,
	-46, 121, -46, 121, -46, -46, -40, 200, -46, -46,
	200, -93, 204, -133, -93, -116, 174, -77, -53, 264,
	-46, 204, -75, 300, 111, 281, -77, -42, -42, -161,
	-168, 294, 294, 7, 244, 244, 244, 244, 296, -133,
	-235, -54, -235, -44, 253, 58, 195, -195, -104, 300,
	-133, 297, 300, -47, 126, -47, -79, -53, 96, 5,
	-46, -157, -15, -46, -90, 116, -165, 300, 278, 65,
	-97, 140, 160, 112, 146, 206, 129, -130, 301, -156,
	-155, 29, -46, -33, -160, -159, 275, -133, -133, 244,
	-243, 235, -139, -133, 167, 249, 100, 256, 87, 171,
	111, 296, -134, -134, -81, 296, -81, -133, 295, 295,
	300, 297, -68, 300, -67, -133, -81, -81, 297, 297,
	-150, -151, 91, -133, -227, 181, 296, 296, -133, 29,
	300, 297, 111, 297, -106, 187, 297, 10, 287, 288,
	289, 290, 106, 291, 284, 285, 286, 283, 279, 280,
	281, 59, 154, 211, 12, 13, 14, 138, 124, -134,
	-134, -134, -81, 296, 297, -137, -138, 111, 108, 29,
	-102, -102, -102, 297, 111, -81, 300, 300, 300, 297,
	297, 297, 7, 297, 300, 297, 275, 275, 297, -90,
	244, 244, 96, 165, -205, -202, -133, -71, 296, 296,
	-37, 90, 220, -109, 96, -42, 96, -42, 244, -108,
	61, 244, -83, 204, 60, 297, 300, -83, -126, -85,
	-76, -153, 297, 295, 7, 7, 297, 157, 120, 156,
	-105, 156, -105, -105, 7, -46, 295, -63, 125, -125,
	296, -47, 296, 296, 29, 296, -46, -43, 297, -140,
	118, 42, -159, 171, 140, 140, -159, -97, 140, -95,
	180, -95, -95, -156, -191, 302, -46, 296, 297, -133,
	-133, -134, -134, 111, 296, -133, -142, 25, 25, 297,
	-81, 297, 300, 297, -141, 297, 266, -68, -68, -68,
	5, 93, -133, 240, -228, -46, 296, 269, -67, 297,
	-168, -168, -133, -137, -133, -168, -134, -134, -134, -134,
	-134, -134, -134, -134, -134, -134, -134, -134, -134, -134,
	-134, -134, -134, -134, -134, 87, 165, 171, -134, 300,
	-81, 297, -138, -137, -133, -133, -168, 297, 297, 297,
	-81, -133, -133, -133, 297, 7, -140, -46, -46, -124,
	96, -206, 61, -207, 53, 101, 64, 165, 167, 255,
	192, 51, 82, 199, 297, 297, -71, -71, 165, 82,
	165, 82, 75, 251, -46, -46, -53, -46, -46, -46,
	-83, -115, 296, 174, -23, -53, -93, 281, 295, 295,
	297, 124, -70, -158, -46, -216, 296, -213, -214, -51,
	296, -71, -61, -23, -70, 174, -223, 270, -133, -81,
	236, -159, -159, -96, 260, 174, 140, -159, -132, -131,
	109, 163, 296, -71, -155, 25, 25, -133, -142, 297,
	-133, -133, 297, -133, 5, -133, 297, 297, 297, -133,
	-232, -46, -133, 297, 297, 297, -138, 111, 87, 171,
	296, -133, 297, 297, 300, 297, 297, 297, -223, -124,
	-46, -79, -46, 101, 121, 167, 141, 296, -134, -53,
	-123, -240, 63, 233, 297, 297, 167, 167, -133, -168,
	-42, -42, 244, 244, 88, -71, 61, -89, -33, 296,
	184, 297, 300, -52, -87, 53, -52, -133, 296, -70,
	297, 297, 297, -53, -224, -226, -46, 241, -96, 296,
	-133, -159, 300, 303, 281, -71, 297, -133, -133, 297,
	297, -68, -225, 186, 297, -134, 111, 296, -142, 297,
	-133, -207, -47, 165, -133, -48, 296, -63, 296, 199,
	-41, 53, -46, -46, 257, 166, 297, -46, -46, -123,
	-158, -38, -79, -38, 297, -81, 297, -63, -123, 296,
	300, 29, 5, -71, -131, -191, 297, 297, -68, 42,
	-134, -142, 297, 297, 96, 297, -210, 155, -46, -71,
	-53, -36, 260, -79, 220, -126, 296, -63, -52, -68,
	-123, -63, -70, -226, -228, 297, -229, 194, 210, -81,
	297, 101, -208, -211, -209, 174, 112, 185, 223, 297,
	297, -66, 296, -133, -84, -71, -38, 297, -63, 297,
	297, -230, -231, 34, 252, 67, -133, -230, -46, -209,
	174, -211, 174, 257, 85, -210, -71, -126, 297, -123,
	-231, 189, 107, 209, 189, 107, -212, 162, 203, 45,
	220, -212, -208, 297, -42, -63, 25, 19, 167, 82,
	-231,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 0, 54, 55, 56, 57,
	0, 0, 358, 0, 0, 0, 0, 0, 0, 332,
	-2, 0, 120, 0, 0, 288, 0, 288, 288, 292,
	0, 360, 256, 357, -2, 368, 0, 0, 0, 366,
	346, 0, 0, -2, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 71, 0, 73, 74, 75, 76,
	77, 78, 79, 80, 0, 86, 786, 787, 788, 805,
	806, 807, 808, 809, 810, 811, 812, 813, 814, 815,
	816, 817, 818, 819, 820, 821, 822, 823, 824, 825,
	826, 827, 828, 829, 830, 831, 832, 833, 834, 835,
	836, 837, 838, 839, 840, 841, 842, 843, 844, 845,
	846, 847, 848, 849, 850, 851, 852, 853, 854, 855,
	856, 857, 858, 859, 860, 861, 862, 863, 864, 865,
	866, 867, 868, 869, 870, 871, 872, 873, 874, 875,
	876, 877, 878, 879, 880, 881, 882, 883, 884, 885,
	886, 887, 888, 889, 890, 891, 892, 893, 894, 895,
	896, 897, 898, 899, 900, 901, 902, 903, 904, 905,
	906, 907, 908, 909, 910, 911, 912, 913, 914, 915,
	916, 917, 918, 919, 920, 921, 922, 923, 924, 925,
	926, 927, 928, 929, 930, 931, 932, 933, 934, 935,
	936, 937, 938, 939, 940, 941, 942, 943, 944, 945,
	946, 947, 948, 949, 950, 951, 952, 953, 954, 955,
	956, 957, 958, 959, 960, 961, 962, 963, 93, 94,
	868, 96, 0, 103, 104, 105, 107, 108, 109, 110,
	111, 112, 113, 0, 281, 882, 294, 116, 847, 886,
	951, 899, 123, 133, 0, 957, -2, 137, 67, 166,
	167, 0, 169, 184, 0, 0, 0, 0, 0, 177,
	0, 0, 181, 0, 0, 759, 299, 287, 299, 284,
	285, 286, 289, 0, 280, 0, 359, 0, 0, 0,
	255, -2, 342, 343, -2, 0, 363, 363, 363, 0,
	0, 343, 0, 351, 872, 354, 769, 352, 0, 0,
	365, 364, 0, 347, 427, 0, 388, 0, 2, 0,
	936, 0, 0, 936, 0, 0, 0, 0, 0, 433,
	59, 936, 49, 936, 755, 49, 936, 65, 0, 81,
	83, 796, 797, 798, 799, 962, 964, 965, 966, 967,
	968, 969, 970, 971, 972, 973, 974, 975, 976, 977,
	0, 0, 0, 91, 0, 95, 97, 0, 0, 0,
	293, 117, 926, 119, 0, 122, 124, 125, 0, 0,
	0, 0, 0, 0, 136, 161, 162, 68, 0, 0,
	186, 0, 0, 0, 0, 0, 0, 0, 178, 0,
	180, 0, 0, 760, 738, 732, 733, 0, 0, 282,
	295, 296, 283, 0, 291, 49, 431, 0, 936, 790,
	304, 936, -2, 0, 338, 375, 376, 0, 0, 0,
	361, 362, 0, 0, 0, 334, 335, 0, 353, 0,
	0, 391, 747, 751, 752, 520, 0, 0, 0, 0,
	0, 0, 607, 608, 609, 0, 611, 612, 613, 931,
	0, 617, 618, 951, 759, 772, 773, 774, 775, 0,
	0, 0, 780, 781, 782, 731, 657, 627, -2, -2,
	770, 457, 458, 459, 460, -2, 964, 631, 633, 635,
	636, 637, 638, 0, 915, 932, 947, 948, 956, 960,
	961, 936, 944, 937, 927, 934, 943, 828, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, 795,
	482, 483, 488, 489, 491, 391, 389, 428, 429, 0,
	0, 744, 742, 743, 26, 277, 28, 0, 277, 277,
	0, 0, 0, 0, 0, 0, 437, 0, 310, 0,
	0, 434, 0, 0, 61, 0, 47, 48, 0, 63,
	0, 0, 358, 0, 0, 936, 358, 0, 691, 443,
	444, 445, 446, 447, 517, 450, 451, 452, 453, 454,
	455, 456, 464, 465, 466, 467, 468, 469, 470, 479,
	0, 463, 463, 463, 476, 477, 480, 481, 486, 487,
	498, 499, 501, 503, 497, 497, 497, 494, 495, 0,
	689, 0, 100, 0, 823, 757, 762, 763, 106, 0,
	0, 0, 0, 0, 0, 128, 148, 149, 150, 129,
	131, 138, 140, 141, 142, 151, 152, 153, 154, 249,
	0, 251, 164, 165, 783, 0, 130, 132, 134, 135,
	155, 156, 0, 158, 159, 160, 0, 69, 800, 801,
	802, 803, 804, 978, 979, 980, 981, 982, 983, 984,
	985, 986, 987, 988, 989, 990, 991, 992, 993, 994,
	995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004,
	1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014,
	1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024,
	1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034,
	1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044,
	1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054,
	1055, 1056, 168, 170, 0, 183, 171, 172, 173, 174,
	175, 176, 179, 182, 187, 739, 0, 736, 737, 0,
	0, 290, 252, 0, 193, 0, 0, 0, 936, 789,
	301, 0, 0, 341, 373, 374, 377, 380, 381, 378,
	520, 348, 349, 350, 369, 370, 266, 355, 0, 0,
	766, 437, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 741, 0, 0,
	750, 524, 525, 526, 548, 549, 0, -2, 689, 0,
	614, 615, 616, 0, 0, -2, 0, 777, 517, 0,
	0, 730, 659, 0, 0, 0, 0, 0, 0, 0,
	0, 710, 716, 0, 0, 0, 0, 0, 0, 0,
	0, 472, 485, 496, 493, 492, 474, 0, 473, 471,
	0, 475, 0, 0, 0, 437, 0, 0, 746, 0,
	0, 0, 0, 276, 30, 936, 0, 40, 0, 0,
	222, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 761, 321, 0, 321, 312, 0,
	0, 0, 308, 324, 325, 327, 328, 0, 0, 435,
	60, 756, 49, 66, 49, 72, 82, 0, 84, 87,
	88, 89, 90, 85, 0, 438, 440, 448, 0, 504,
	505, 506, 507, 508, 509, 518, 92, 0, 0, 0,
	101, 102, 764, 765, 0, 0, 121, 126, 127, 300,
	0, 145, 0, 147, 0, 250, 785, 784, 517, 70,
	185, 114, 734, 0, 297, 298, 432, 0, 192, 194,
	196, 197, 198, 199, 790, 0, 790, 190, 0, 0,
	0, 0, 0, 379, 382, 383, 0, 372, 264, 265,
	358, 0, 768, 385, 748, 418, 392, 400, 416, 403,
	0, 521, 522, 0, 527, 528, 529, 530, 531, 532,
	533, 534, 535, 536, -2, -2, -2, 540, 541, 542,
	-2, -2, -2, 546, 547, -2, 0, 0, 0, 741,
	0, -2, 0, 556, -2, -2, -2, 560, 0, 563,
	565, 567, 0, 0, 0, 0, 740, 577, 722, 0,
	749, 562, 0, 0, 610, 0, 0, 0, 695, 696,
	0, -2, 619, 368, 0, 0, 0, 0, 778, 0,
	729, 725, 0, 667, 0, 0, 0, 632, 634, 0,
	0, 0, 0, 699, 700, 701, 702, 703, 704, 705,
	0, 0, 0, 0, 579, 0, 0, 0, 0, 951,
	0, 689, 715, 0, 0, 0, 0, 0, 689, 0,
	721, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 385, 430, 745, 29, 268, 0, 0,
	0, 32, 936, 204, 0, 0, 0, 0, 0, 279,
	41, 936, 49, 936, 49, 42, 27, 277, 267, 270,
	0, 58, 0, 436, 305, 306, 0, 0, 753, 314,
	311, 0, 437, 0, 0, 0, 0, 62, 64, 0,
	692, 0, 0, 0, 0, 0, 0, 0, 0, 690,
	98, 758, 99, 118, 143, 144, 146, 139, 157, 0,
	0, 201, 0, 0, 790, 0, 0, 0, 0, 303,
	304, 371, 0, 767, 387, 0, 390, 0, 0, 0,
	0, 0, 0, 424, 424, 424, 422, 416, 0, 402,
	415, 0, 414, -2, 403, 0, 0, -2, -2, 0,
	0, 0, 578, -2, 561, 564, 566, 568, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 690, 693, 694,
	0, -2, 0, 0, 367, 368, 368, 368, 625, 0,
	0, 726, 0, 0, 626, 0, 0, 0, 0, 0,
	0, 641, 0, 642, 0, 0, 643, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 581,
	582, 583, 0, 0, 644, 713, 714, 0, 0, 0,
	0, 0, 0, 649, 0, 720, 0, 0, 0, 653,
	654, 655, 0, 461, 0, 478, 500, 502, 490, 387,
	0, 0, 0, 0, 202, 221, 0, 0, 0, 0,
	34, 0, 0, 0, 0, 38, 0, 44, 0, 0,
	0, 0, 320, 0, 319, 0, 0, 309, 321, 326,
	323, 329, 0, 441, 0, 0, 449, 510, 511, 512,
	513, 514, 515, 516, 0, 115, 735, 188, 0, 195,
	0, 0, 0, 193, 0, 0, 0, 302, 356, 661,
	0, 0, 393, 0, 0, 0, 0, 0, 0, 419,
	423, 420, 421, 401, 398, 0, 412, 0, 405, 523,
	-2, 0, 0, 0, 0, -2, 0, 0, 0, 723,
	0, 684, 0, -2, 697, 620, 0, 0, 0, 0,
	779, 724, 728, 0, 665, 666, 670, 0, 0, 630,
	0, 0, 698, 707, 708, 580, 584, 585, 586, 587,
	588, 589, 590, 591, 592, 593, -2, -2, -2, 597,
	598, 599, -2, -2, -2, 0, 0, 0, 709, 0,
	0, 687, 711, 712, 717, 718, 0, 646, 647, 648,
	719, 0, 0, 0, 484, 0, 661, 272, 274, 31,
	0, 203, 0, 206, 0, 0, 0, 0, 212, 213,
	0, 0, 0, 0, 223, 230, 0, 0, 0, 46,
	0, 0, 278, 0, 49, 49, 269, 0, 0, 271,
	307, 0, 0, 0, 313, 754, 322, 0, 442, 439,
	519, 0, 0, 257, 263, 263, 0, 628, 629, 0,
	0, 0, 0, 191, 0, 0, 344, 0, 386, 384,
	0, 406, 0, 408, 0, 0, 0, 410, 0, 396,
	0, 395, 0, 0, 404, 0, 0, -2, 0, 571,
	-2, -2, 683, 690, 776, 368, 621, 623, 624, 727,
	672, 669, 0, 656, 639, 640, 706, 0, 0, 0,
	0, 690, 686, 645, 0, 651, 652, 462, 345, 33,
	0, 207, 208, 790, 0, 211, 214, 0, 216, 792,
	201, 0, 227, 228, 225, 0, 35, 36, 45, 51,
	37, 43, 0, 0, 0, 0, 0, 330, 331, 0,
	0, 230, 0, 266, 771, 0, 266, 0, 0, 0,
	220, 201, 230, 0, 660, 662, 0, 0, 407, 0,
	426, 409, 0, 399, 0, 0, 413, -2, -2, 572,
	685, 0, 368, 0, 658, -2, 0, 0, 0, 688,
	0, 205, 209, 0, 0, 236, 0, 224, 0, 0,
	53, 0, 273, 275, 0, 316, 437, 318, 0, 201,
	258, 259, 262, 260, 263, 368, 230, 189, 201, 0,
	0, 0, 417, 0, 397, 394, 411, 622, 675, 0,
	-2, 0, 605, 650, 0, 215, 241, 0, 0, 0,
	232, 39, 0, 50, 0, 317, 0, 218, 266, 0,
	201, 253, 0, 663, 664, 425, 0, 0, 0, 671,
	606, 0, 217, 237, 238, 0, 233, 234, 235, 791,
	229, 236, 0, 52, 437, 0, 261, 620, 219, 230,
	668, 673, 676, -2, 902, 820, 0, 674, 210, 239,
	0, 240, 0, 0, 0, 241, 0, 315, 49, 201,
	0, 678, 679, 680, 681, 682, 242, 0, 245, 246,
	0, 243, 226, 231, 200, 254, 0, 244, 247, 248,
	677,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 285, 3, 291, 286, 3,
	296, 297, 289, 287, 300, 288, 298, 290, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 304, 299,
	279, 281, 280, 3, 301, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 294, 3, 295, 284, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 302, 283, 303, 293,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 282, 57622, 292, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:714
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:720
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:726
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 17:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:749
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 25:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:760
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 26:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:766
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 27:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:770
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 28:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:776
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 29:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:780
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:787
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 31:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:792
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 32:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:797
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 33:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:802
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:807
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:812
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 36:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:816
		{
			unimplemented()
		}
	case 37:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:819
		{
			sqlVAL.union.val = &AlterTableDropColumn{columnKeyword: sqlDollar[2].union.bool(), IfExists: true, Column: Name(sqlDollar[5].str)}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:824
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 39:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:834
		{
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:837
		{
			sqlVAL.union.val = &AlterTableAddConstraint{ConstraintDef: sqlDollar[2].union.constraintDef()}
		}
	case 41:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:841
		{
			unimplemented()
		}
	case 42:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:843
		{
			unimplemented()
		}
	case 43:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:846
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 44:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:855
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 45:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:865
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 46:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:869
		{
			sqlVAL.union.val = nil
		}
	case 47:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:875
		{
			sqlVAL.union.val = DropCascade
		}
	case 48:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:879
		{
			sqlVAL.union.val = DropRestrict
		}
	case 49:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:883
		{
			sqlVAL.union.val = DropDefault
		}
	case 50:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:888
		{
			unimplementedWithIssue(2473)
		}
	case 51:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:889
		{
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:892
		{
			unimplemented()
		}
	case 53:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:893
		{
		}
	case 58:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:905
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retExprs()}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:912
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:916
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:920
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:928
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:936
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:940
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:946
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 66:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:950
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 67:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:956
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:960
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 69:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:966
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 70:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:970
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 71:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:977
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 72:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:981
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 73:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:987
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 80:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:996
		{ /* SKIP DOC */
		}
	case 81:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1000
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1004
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 84:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1014
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1024
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 86:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1028
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 87:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1034
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 91:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1044
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1055
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 93:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1059
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 94:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1066
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1072
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1078
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1082
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1089
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1096
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1103
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1107
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1111
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1118
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1121
		{
		}
	case 105:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1125
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1129
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1136
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1140
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1144
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 110:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1148
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 111:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1152
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 112:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1156
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 113:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1160
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1168
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1172
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 116:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1180
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1184
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 118:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1188
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1192
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1195
		{ /* SKIP DOC */
		}
	case 121:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1201
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1207
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1214
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1218
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1222
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1226
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1233
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1239
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1243
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1247
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1251
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1258
		{
			unimplemented()
		}
	case 135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1261
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1264
		{
			unimplemented()
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1271
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1275
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1283
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1289
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1293
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1297
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1301
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1305
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1311
		{
			sqlVAL.union.val = Low
		}
	case 149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1315
		{
			sqlVAL.union.val = Normal
		}
	case 150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1319
		{
			sqlVAL.union.val = High
		}
	case 151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1325
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1329
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1333
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1348
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1352
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1356
		{
			d, err := ParseDInterval(sqlDollar[2].str)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1366
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1370
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1375
		{
			unimplemented()
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1376
		{
			unimplemented()
		}
	case 163:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1377
		{
		}
	case 164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1381
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1385
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1391
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1395
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1399
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1403
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1407
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1411
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1415
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1419
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1423
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1427
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1431
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1435
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1439
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1443
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1447
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1451
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 182:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1455
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1461
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 184:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1466
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1472
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 186:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1476
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 187:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1482
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[2].union.normalizableTableName(), Exprs: sqlDollar[4].union.exprs()}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1489
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1493
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1499
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[5].union.slct()}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1503
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[8].union.slct()}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1510
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1516
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1520
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1526
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1532
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 200:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1538
		{
			/* SKIP DOC */
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1546
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1552
		{
			sqlVAL.union.val = newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
		}
	case 203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1558
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 204:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1562
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1568
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1572
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1575
		{
			unimplemented()
		}
	case 208:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1577
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1581
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1585
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1603
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1607
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1611
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1615
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1619
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1623
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1627
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1636
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1645
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1658
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1670
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 222:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1675
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 223:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1681
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 224:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1687
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    NameListToIndexElems(sqlDollar[3].union.nameList()),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 225:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1697
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[4].union.nameList()),
				},
				PrimaryKey: true,
			}
		}
	case 226:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1707
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 229:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1730
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 230:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1734
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 231:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1740
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 232:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1744
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 233:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1749
		{
			unimplemented()
		}
	case 234:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1750
		{
			unimplemented()
		}
	case 235:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1751
		{
			unimplemented()
		}
	case 236:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1752
		{
		}
	case 237:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1759
		{
			unimplemented()
		}
	case 238:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1760
		{
			unimplemented()
		}
	case 239:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1761
		{
			unimplemented()
		}
	case 240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1762
		{
			unimplemented()
		}
	case 241:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1763
		{
		}
	case 242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1766
		{
			unimplemented()
		}
	case 243:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1769
		{
			unimplemented()
		}
	case 244:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1772
		{
			unimplemented()
		}
	case 245:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1773
		{
			unimplemented()
		}
	case 246:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1774
		{
			unimplemented()
		}
	case 247:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1775
		{
			unimplemented()
		}
	case 248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1776
		{
			unimplemented()
		}
	case 249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1780
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1784
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1788
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 252:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1795
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 253:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:1802
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:1813
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 255:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1827
		{
			sqlVAL.union.val = true
		}
	case 256:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1831
		{
			sqlVAL.union.val = false
		}
	case 257:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1837
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1841
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1850
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 260:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1853
		{
			unimplemented()
		}
	case 261:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1854
		{
			unimplemented()
		}
	case 262:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1857
		{
			unimplemented()
		}
	case 263:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1858
		{
		}
	case 264:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1862
		{
			sqlVAL.union.val = Ascending
		}
	case 265:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1866
		{
			sqlVAL.union.val = Descending
		}
	case 266:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1870
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 267:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1877
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1881
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1885
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1889
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1893
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1897
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1901
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1905
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 275:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1909
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 276:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1915
		{
			sqlVAL.union.val = true
		}
	case 277:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1919
		{
			sqlVAL.union.val = false
		}
	case 278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1924
		{
		}
	case 279:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1925
		{
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1929
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1935
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1942
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1946
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1950
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1954
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1958
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1967
		{
		}
	case 288:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1968
		{
		}
	case 289:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1972
		{
			sqlVAL.str = ""
		}
	case 290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1976
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1980
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 292:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1984
		{
			sqlVAL.str = ""
		}
	case 293:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1990
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 294:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1994
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2000
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2004
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2008
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2012
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2016
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2022
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 301:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2028
		{
			sqlVAL.union.val = &CreateDatabase{Name: Name(sqlDollar[3].str), Encoding: sqlDollar[4].union.strVal()}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2032
		{
			sqlVAL.union.val = &CreateDatabase{IfNotExists: true, Name: Name(sqlDollar[6].str), Encoding: sqlDollar[7].union.strVal()}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2038
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2041
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 305:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2051
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retExprs()
		}
	case 306:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2057
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
		}
	case 307:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2062
		{
			unimplementedWithIssue(6637)
		}
	case 308:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2064
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2069
		{
			unimplementedWithIssue(6637)
		}
	case 310:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2077
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2081
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2087
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2091
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2095
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2101
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2105
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2111
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 318:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2115
		{
			unimplemented()
		}
	case 319:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2117
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2123
		{
			sqlVAL.union.val = sqlDollar[2].union.selExprs()
		}
	case 321:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2127
		{
			sqlVAL.union.val = SelectExprs(nil)
		}
	case 322:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2134
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retExprs()}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2140
		{
			unimplementedWithIssue(7841)
		}
	case 324:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2141
		{
		}
	case 325:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2145
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2149
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 329:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2159
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2171
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2175
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2219
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2225
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2229
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2244
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2248
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2252
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2256
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2260
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2264
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2298
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2310
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2322
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2330
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2339
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2348
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2366
		{
			unimplemented()
		}
	case 352:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2367
		{
			unimplemented()
		}
	case 353:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2368
		{
			unimplemented()
		}
	case 354:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2371
		{
			unimplemented()
		}
	case 355:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2372
		{
			unimplemented()
		}
	case 356:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2375
		{
			unimplemented()
		}
	case 357:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2378
		{
			unimplemented()
		}
	case 358:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2379
		{
		}
	case 359:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2382
		{
		}
	case 360:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2383
		{
		}
	case 361:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2387
		{
			sqlVAL.union.val = true
		}
	case 362:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2391
		{
			sqlVAL.union.val = false
		}
	case 363:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2395
		{
			sqlVAL.union.val = false
		}
	case 364:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2401
		{
			sqlVAL.union.val = true
		}
	case 365:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2406
		{
		}
	case 366:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2407
		{
		}
	case 367:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2411
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 368:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2415
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2421
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 370:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2427
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2431
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2437
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2445
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2454
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2465
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2478
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2485
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2492
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 382:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2506
		{
		}
	case 383:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2507
		{
		}
	case 384:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2533
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 385:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2537
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 386:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2543
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 387:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2547
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2553
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2557
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 390:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2569
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2573
		{
			sqlVAL.union.val = &From{}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2579
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2583
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 394:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2589
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2594
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2600
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2605
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			index := a.Index
			if index == "" {
				index = b.Index
			} else if b.Index != "" {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			noIndexJoin := a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = &IndexHints{Index: index, NoIndexJoin: noIndexJoin}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2625
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2629
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 400:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2633
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2640
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), As: sqlDollar[3].union.aliasClause()}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2644
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, As: sqlDollar[2].union.aliasClause()}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2648
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 404:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2652
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[2].union.tblExpr(), As: sqlDollar[4].union.aliasClause()}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2672
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2676
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2680
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2684
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2688
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2692
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2698
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2702
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2706
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2710
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2717
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2723
		{
			sqlVAL.union.val = AsOfClause{Expr: &StrVal{s: sqlDollar[5].str}}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2727
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2733
		{
			sqlVAL.str = astFullJoin
		}
	case 420:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2737
		{
			sqlVAL.str = astLeftJoin
		}
	case 421:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2741
		{
			sqlVAL.str = astRightJoin
		}
	case 422:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2745
		{
			sqlVAL.str = astInnerJoin
		}
	case 423:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2751
		{
		}
	case 424:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2752
		{
		}
	case 425:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2763
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2767
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2773
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 428:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2777
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2781
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 430:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2785
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 431:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2791
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2795
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2808
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 434:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2812
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2816
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2822
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 437:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2826
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 438:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2838
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 439:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2842
		{
			unimplementedWithIssue(2115)
		}
	case 440:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2843
		{
			unimplementedWithIssue(2115)
		}
	case 441:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2846
		{
			unimplementedWithIssue(2115)
		}
	case 442:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2847
		{
			unimplementedWithIssue(2115)
		}
	case 443:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2848
		{
		}
	case 449:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2856
		{
			unimplemented()
		}
	case 450:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2858
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 451:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2862
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 452:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2866
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 453:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2870
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 454:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2874
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 455:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2878
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 456:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2882
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 461:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2903
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2912
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2926
		{
			sqlVAL.union.val = nil
		}
	case 464:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2933
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 465:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2937
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 466:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2941
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 467:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2945
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 468:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2949
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 469:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2953
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2957
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 471:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2961
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newFloatColType(int(prec))
		}
	case 472:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2970
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 473:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2974
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2983
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2992
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3001
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 477:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3005
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 478:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3011
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 479:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3015
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3033
		{
			n, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 485:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3049
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 490:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3065
		{
			n, err := sqlDollar[3].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3081
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 492:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3087
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 493:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3091
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 494:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3095
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 495:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3099
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 496:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3104
		{
		}
	case 497:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3105
		{
		}
	case 498:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3110
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3114
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 500:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3118
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 501:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3122
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 502:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3126
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 503:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3131
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 504:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3136
		{
			unimplemented()
		}
	case 505:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3137
		{
			unimplemented()
		}
	case 506:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3138
		{
			unimplemented()
		}
	case 507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3139
		{
			unimplemented()
		}
	case 508:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3140
		{
			unimplemented()
		}
	case 509:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3141
		{
			unimplemented()
		}
	case 510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3142
		{
			unimplemented()
		}
	case 511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3143
		{
			unimplemented()
		}
	case 512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3144
		{
			unimplemented()
		}
	case 513:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3145
		{
			unimplemented()
		}
	case 514:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3146
		{
			unimplemented()
		}
	case 515:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3147
		{
			unimplemented()
		}
	case 516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3148
		{
			unimplemented()
		}
	case 517:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3149
		{
		}
	case 518:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3152
		{
			unimplemented()
		}
	case 519:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3153
		{
			unimplemented()
		}
	case 521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3177
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3185
		{
			unimplemented()
		}
	case 523:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3186
		{
			unimplemented()
		}
	case 524:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3195
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3199
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3203
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3207
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3211
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3215
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3219
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3223
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3227
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3231
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3235
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3239
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3243
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3247
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3251
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3255
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3259
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3263
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3267
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3271
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3275
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3279
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3283
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3287
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3291
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3295
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3299
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3303
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3307
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3311
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3315
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3319
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3323
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3327
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3331
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3335
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3339
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3343
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3346
		{
			unimplemented()
		}
	case 563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3348
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3352
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3356
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3360
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3364
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3368
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3372
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3376
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3380
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3384
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3388
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3392
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3396
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3400
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3404
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3408
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3425
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3434
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3438
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3442
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3446
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3450
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3454
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3458
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3462
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3466
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3470
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3474
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3478
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3482
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3486
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3490
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3494
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3498
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3502
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3506
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3510
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3514
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3518
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3522
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3526
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3530
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3534
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3546
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 609:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3551
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3555
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3561
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3565
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3569
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3575
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 617:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3579
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 618:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3583
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3591
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName()}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3595
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3598
		{
			unimplemented()
		}
	case 622:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3599
		{
			unimplemented()
		}
	case 623:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3601
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Type: All, Exprs: sqlDollar[4].union.exprs()}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3605
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Type: Distinct, Exprs: sqlDollar[4].union.exprs()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3609
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Exprs: Exprs{StarExpr()}}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3622
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 627:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3626
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 628:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3635
		{
			unimplemented()
		}
	case 629:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3636
		{
			unimplemented()
		}
	case 630:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3640
		{
			unimplemented()
		}
	case 631:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3642
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3646
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3650
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3654
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3657
		{
			unimplemented()
		}
	case 636:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3658
		{
			unimplemented()
		}
	case 637:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3659
		{
			unimplemented()
		}
	case 638:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3660
		{
			unimplemented()
		}
	case 639:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3662
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3666
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3670
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3674
		{
			sqlVAL.union.val = &OverlayExpr{FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3678
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3682
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3685
		{
			unimplemented()
		}
	case 646:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3687
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3691
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3695
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3699
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3703
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3707
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3711
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3715
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3719
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3723
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3729
		{
			unimplemented()
		}
	case 657:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3730
		{
		}
	case 658:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3733
		{
			unimplemented()
		}
	case 659:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3734
		{
		}
	case 660:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3738
		{
			unimplemented()
		}
	case 661:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3739
		{
		}
	case 662:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3742
		{
			unimplemented()
		}
	case 663:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3743
		{
			unimplemented()
		}
	case 664:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3746
		{
			unimplemented()
		}
	case 665:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3749
		{
			unimplemented()
		}
	case 666:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3750
		{
			unimplemented()
		}
	case 667:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3751
		{
		}
	case 668:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3755
		{
			unimplemented()
		}
	case 669:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3766
		{
			unimplemented()
		}
	case 670:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3767
		{
		}
	case 671:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3770
		{
			unimplemented()
		}
	case 672:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3771
		{
		}
	case 673:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3779
		{
			unimplemented()
		}
	case 674:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3780
		{
			unimplemented()
		}
	case 675:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3781
		{
		}
	case 676:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3784
		{
			unimplemented()
		}
	case 677:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3785
		{
			unimplemented()
		}
	case 678:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3791
		{
			unimplemented()
		}
	case 679:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3792
		{
			unimplemented()
		}
	case 680:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3793
		{
			unimplemented()
		}
	case 681:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3794
		{
			unimplemented()
		}
	case 682:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3795
		{
			unimplemented()
		}
	case 683:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3806
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3810
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3814
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3820
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3824
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3830
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3873
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3877
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 691:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3883
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3887
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 693:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3893
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3897
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3901
		{
			sqlVAL.union.val = &Array{nil}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3907
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3911
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 698:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3917
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3939
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3943
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3949
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 709:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3956
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3960
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 711:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3977
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3981
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3985
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3989
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3993
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 716:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3997
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 717:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4003
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 718:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4009
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 719:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4015
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 720:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4019
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 721:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4023
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 722:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4029
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4033
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4044
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4051
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4055
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 727:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4061
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4067
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 729:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4071
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 731:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4078
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 732:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4084
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 733:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4088
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 734:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4092
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4096
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr()}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4102
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 737:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4108
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4114
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4118
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 740:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4123
		{
		}
	case 741:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4124
		{
		}
	case 743:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4133
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4139
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4143
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 746:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4152
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 747:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4158
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4162
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 749:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4168
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4177
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4181
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4185
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 753:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4193
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4197
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 755:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4203
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4207
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 757:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4213
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4217
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 759:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4228
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4232
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 761:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4238
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4249
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4253
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4257
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4261
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4267
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4271
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 768:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4277
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 769:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4280
		{
		}
	case 770:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4290
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4294
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 772:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4301
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 773:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4305
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 774:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4309
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4313
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4316
		{
			unimplemented()
		}
	case 777:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4318
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4322
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4326
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[5].str}, Type: sqlDollar[1].union.colType()}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4330
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 781:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4334
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 782:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4338
		{
			sqlVAL.union.val = DNull
		}
	case 784:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4345
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 785:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4349
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4371
		{
			sqlVAL.str = ""
		}
	case 791:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4377
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 792:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4381
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
