// Code generated by go yacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"errors"
	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/sql/privilege"
	"github.com/cockroachdb/cockroach/util"
)

var errUnimplemented = errors.New("unimplemented")

func unimplemented() {
	panic(errUnimplemented)
}

func unimplementedWithIssue(issue int) {
	panic(util.UnimplementedWithIssueErrorf(issue, ""))
}

//line sql.y:43

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new sytax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in two forms, depending on the
// type of the value being accessed. Values and pointers are directly
// type asserted from the empty interface, meaning that they will panic
// if the type assertion is incorrect. Interfaces are handled differently
// because a nil instance of an interface inserted into the empty interface
// becomes a nil instance of the empty interface and therefore will fail a
// direct type assertion. Instead, a guarded type assertion must be used,
// which returns nil if the type assertion fails.
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	return u.val.(*StrVal)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) qname() *QualifiedName {
	return u.val.(*QualifiedName)
}
func (u *sqlSymUnion) qnames() QualifiedNames {
	return u.val.(QualifiedNames)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) indirectElem() IndirectionElem {
	if indirectElem, ok := u.val.(IndirectionElem); ok {
		return indirectElem
	}
	return nil
}
func (u *sqlSymUnion) indirect() Indirection {
	return u.val.(Indirection)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	if selectStmt, ok := u.val.(*Select); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	if selectStmt, ok := u.val.(SelectStatement); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	if constraintDef, ok := u.val.(ConstraintTableDef); ok {
		return constraintDef
	}
	return nil
}
func (u *sqlSymUnion) tblDef() TableDef {
	if tblDef, ok := u.val.(TableDef); ok {
		return tblDef
	}
	return nil
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() ColumnQualification {
	if colQual, ok := u.val.(ColumnQualification); ok {
		return colQual
	}
	return nil
}
func (u *sqlSymUnion) colQuals() []ColumnQualification {
	return u.val.([]ColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retExprs() ReturningExprs {
	return ReturningExprs(u.val.(SelectExprs))
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	if tblExpr, ok := u.val.(TableExpr); ok {
		return tblExpr
	}
	return nil
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	if joinCond, ok := u.val.(JoinCond); ok {
		return joinCond
	}
	return nil
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	if alterTableCmd, ok := u.val.(AlterTableCmd); ok {
		return alterTableCmd
	}
	return nil
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) famElem() FamilyElem {
	return u.val.(FamilyElem)
}
func (u *sqlSymUnion) famElems() FamilyElemList {
	return u.val.(FamilyElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}

//line sql.y:281
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const DOT_DOT = 57353
const LESS_EQUALS = 57354
const GREATER_EQUALS = 57355
const NOT_EQUALS = 57356
const ERROR = 57357
const ACTION = 57358
const ADD = 57359
const ALL = 57360
const ALTER = 57361
const ANALYSE = 57362
const ANALYZE = 57363
const AND = 57364
const ANY = 57365
const ARRAY = 57366
const AS = 57367
const ASC = 57368
const ASYMMETRIC = 57369
const AT = 57370
const BEGIN = 57371
const BETWEEN = 57372
const BIGINT = 57373
const BIT = 57374
const BLOB = 57375
const BOOL = 57376
const BOOLEAN = 57377
const BOTH = 57378
const BY = 57379
const BYTEA = 57380
const BYTES = 57381
const CASCADE = 57382
const CASE = 57383
const CAST = 57384
const CHAR = 57385
const CHARACTER = 57386
const CHARACTERISTICS = 57387
const CHECK = 57388
const COALESCE = 57389
const COLLATE = 57390
const COLLATION = 57391
const COLUMN = 57392
const COLUMNS = 57393
const COMMIT = 57394
const COMMITTED = 57395
const CONCAT = 57396
const CONFLICT = 57397
const CONSTRAINT = 57398
const COVERING = 57399
const CREATE = 57400
const CROSS = 57401
const CUBE = 57402
const CURRENT = 57403
const CURRENT_CATALOG = 57404
const CURRENT_DATE = 57405
const CURRENT_ROLE = 57406
const CURRENT_TIME = 57407
const CURRENT_TIMESTAMP = 57408
const CURRENT_USER = 57409
const CYCLE = 57410
const DATA = 57411
const DATABASE = 57412
const DATABASES = 57413
const DATE = 57414
const DAY = 57415
const DEC = 57416
const DECIMAL = 57417
const DEFAULT = 57418
const DEFERRABLE = 57419
const DELETE = 57420
const DESC = 57421
const DISTINCT = 57422
const DO = 57423
const DOUBLE = 57424
const DROP = 57425
const ELSE = 57426
const ENCODING = 57427
const END = 57428
const ESCAPE = 57429
const EXCEPT = 57430
const EXISTS = 57431
const EXPLAIN = 57432
const EXTRACT = 57433
const FALSE = 57434
const FAMILY = 57435
const FETCH = 57436
const FILTER = 57437
const FIRST = 57438
const FLOAT = 57439
const FLOORDIV = 57440
const FOLLOWING = 57441
const FOR = 57442
const FORCE_INDEX = 57443
const FOREIGN = 57444
const FROM = 57445
const FULL = 57446
const GRANT = 57447
const GRANTS = 57448
const GREATEST = 57449
const GROUP = 57450
const GROUPING = 57451
const HAVING = 57452
const HIGH = 57453
const HOUR = 57454
const IF = 57455
const IFNULL = 57456
const IN = 57457
const INDEX = 57458
const INDEXES = 57459
const INITIALLY = 57460
const INNER = 57461
const INSERT = 57462
const INT = 57463
const INT64 = 57464
const INTEGER = 57465
const INTERSECT = 57466
const INTERVAL = 57467
const INTO = 57468
const IS = 57469
const ISOLATION = 57470
const JOIN = 57471
const KEY = 57472
const KEYS = 57473
const LATERAL = 57474
const LEADING = 57475
const LEAST = 57476
const LEFT = 57477
const LEVEL = 57478
const LIKE = 57479
const LIMIT = 57480
const LOCAL = 57481
const LOCALTIME = 57482
const LOCALTIMESTAMP = 57483
const LOW = 57484
const LSHIFT = 57485
const MATCH = 57486
const MINUTE = 57487
const MONTH = 57488
const NAME = 57489
const NAMES = 57490
const NATURAL = 57491
const NEXT = 57492
const NO = 57493
const NO_INDEX_JOIN = 57494
const NORMAL = 57495
const NOT = 57496
const NOTHING = 57497
const NULL = 57498
const NULLIF = 57499
const NULLS = 57500
const NUMERIC = 57501
const OF = 57502
const OFF = 57503
const OFFSET = 57504
const ON = 57505
const ONLY = 57506
const OR = 57507
const ORDER = 57508
const ORDINALITY = 57509
const OUT = 57510
const OUTER = 57511
const OVER = 57512
const OVERLAPS = 57513
const OVERLAY = 57514
const PARTIAL = 57515
const PARTITION = 57516
const PLACING = 57517
const POSITION = 57518
const PRECEDING = 57519
const PRECISION = 57520
const PRIMARY = 57521
const PRIORITY = 57522
const RANGE = 57523
const READ = 57524
const REAL = 57525
const RECURSIVE = 57526
const REF = 57527
const REFERENCES = 57528
const RENAME = 57529
const REPEATABLE = 57530
const RELEASE = 57531
const RESTRICT = 57532
const RETURNING = 57533
const REVOKE = 57534
const RIGHT = 57535
const ROLLBACK = 57536
const ROLLUP = 57537
const ROW = 57538
const ROWS = 57539
const RSHIFT = 57540
const SAVEPOINT = 57541
const SEARCH = 57542
const SECOND = 57543
const SELECT = 57544
const SERIAL = 57545
const SERIALIZABLE = 57546
const SESSION = 57547
const SESSION_USER = 57548
const SET = 57549
const SHOW = 57550
const SIMILAR = 57551
const SIMPLE = 57552
const SMALLINT = 57553
const SNAPSHOT = 57554
const SOME = 57555
const SQL = 57556
const START = 57557
const STRICT = 57558
const STRING = 57559
const STORING = 57560
const SUBSTRING = 57561
const SYMMETRIC = 57562
const TABLE = 57563
const TABLES = 57564
const TEXT = 57565
const THEN = 57566
const TIME = 57567
const TIMESTAMP = 57568
const TIMESTAMPTZ = 57569
const TO = 57570
const TRAILING = 57571
const TRANSACTION = 57572
const TREAT = 57573
const TRIM = 57574
const TRUE = 57575
const TRUNCATE = 57576
const TYPE = 57577
const UNBOUNDED = 57578
const UNCOMMITTED = 57579
const UNION = 57580
const UNIQUE = 57581
const UNKNOWN = 57582
const UPDATE = 57583
const UPSERT = 57584
const USER = 57585
const USING = 57586
const VALID = 57587
const VALIDATE = 57588
const VALUE = 57589
const VALUES = 57590
const VARCHAR = 57591
const VARIADIC = 57592
const VARYING = 57593
const WHEN = 57594
const WHERE = 57595
const WINDOW = 57596
const WITH = 57597
const WITHIN = 57598
const WITHOUT = 57599
const YEAR = 57600
const ZONE = 57601
const NOT_LA = 57602
const WITH_LA = 57603
const POSTFIXOP = 57604
const UMINUS = 57605

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXPLAIN",
	"EXTRACT",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HOUR",
	"IF",
	"IFNULL",
	"IN",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARTIAL",
	"PARTITION",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SNAPSHOT",
	"SOME",
	"SQL",
	"START",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"TABLE",
	"TABLES",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:4453

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 21,
	282, 21,
	-2, 330,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 32,
	1, 301,
	163, 301,
	191, 301,
	280, 301,
	282, 301,
	-2, 311,
	-1, 44,
	1, 304,
	163, 304,
	191, 304,
	280, 304,
	282, 304,
	-2, 310,
	-1, 53,
	1, 21,
	282, 21,
	-2, 330,
	-1, 243,
	1, 139,
	282, 139,
	-2, 809,
	-1, 275,
	138, 340,
	162, 340,
	-2, 307,
	-1, 278,
	138, 339,
	162, 339,
	-2, 305,
	-1, 390,
	138, 339,
	162, 339,
	-2, 308,
	-1, 446,
	279, 753,
	-2, 746,
	-1, 447,
	279, 754,
	-2, 747,
	-1, 453,
	5, 470,
	279, 470,
	-2, 891,
	-1, 475,
	5, 436,
	-2, 868,
	-1, 476,
	5, 464,
	279, 464,
	-2, 869,
	-1, 477,
	5, 444,
	-2, 870,
	-1, 478,
	5, 443,
	-2, 871,
	-1, 479,
	5, 464,
	279, 464,
	-2, 874,
	-1, 480,
	5, 464,
	279, 464,
	-2, 875,
	-1, 481,
	5, 465,
	-2, 878,
	-1, 482,
	5, 431,
	-2, 879,
	-1, 483,
	5, 431,
	-2, 880,
	-1, 484,
	5, 446,
	-2, 883,
	-1, 485,
	5, 432,
	-2, 888,
	-1, 486,
	5, 433,
	-2, 889,
	-1, 487,
	5, 434,
	-2, 890,
	-1, 488,
	5, 431,
	-2, 894,
	-1, 489,
	5, 437,
	-2, 899,
	-1, 490,
	5, 435,
	-2, 902,
	-1, 491,
	5, 462,
	279, 462,
	-2, 903,
	-1, 492,
	5, 466,
	-2, 906,
	-1, 493,
	5, 468,
	-2, 907,
	-1, 494,
	5, 461,
	279, 461,
	-2, 911,
	-1, 759,
	88, 311,
	124, 311,
	138, 311,
	162, 311,
	166, 311,
	238, 311,
	-2, 574,
	-1, 767,
	279, 731,
	-2, 720,
	-1, 970,
	12, 0,
	13, 0,
	14, 0,
	262, 0,
	263, 0,
	264, 0,
	-2, 504,
	-1, 971,
	12, 0,
	13, 0,
	14, 0,
	262, 0,
	263, 0,
	264, 0,
	-2, 505,
	-1, 972,
	12, 0,
	13, 0,
	14, 0,
	262, 0,
	263, 0,
	264, 0,
	-2, 506,
	-1, 976,
	12, 0,
	13, 0,
	14, 0,
	262, 0,
	263, 0,
	264, 0,
	-2, 510,
	-1, 977,
	12, 0,
	13, 0,
	14, 0,
	262, 0,
	263, 0,
	264, 0,
	-2, 511,
	-1, 978,
	12, 0,
	13, 0,
	14, 0,
	262, 0,
	263, 0,
	264, 0,
	-2, 512,
	-1, 981,
	30, 0,
	115, 0,
	137, 0,
	209, 0,
	260, 0,
	-2, 517,
	-1, 1012,
	171, 644,
	-2, 647,
	-1, 1171,
	88, 311,
	124, 311,
	138, 311,
	162, 311,
	166, 311,
	238, 311,
	-2, 388,
	-1, 1179,
	30, 0,
	115, 0,
	137, 0,
	209, 0,
	260, 0,
	-2, 518,
	-1, 1184,
	30, 0,
	115, 0,
	137, 0,
	209, 0,
	260, 0,
	-2, 519,
	-1, 1203,
	171, 643,
	-2, 646,
	-1, 1352,
	30, 0,
	115, 0,
	137, 0,
	209, 0,
	260, 0,
	-2, 520,
	-1, 1357,
	127, 0,
	-2, 530,
	-1, 1366,
	171, 645,
	-2, 648,
	-1, 1407,
	12, 0,
	13, 0,
	14, 0,
	262, 0,
	263, 0,
	264, 0,
	-2, 555,
	-1, 1408,
	12, 0,
	13, 0,
	14, 0,
	262, 0,
	263, 0,
	264, 0,
	-2, 556,
	-1, 1409,
	12, 0,
	13, 0,
	14, 0,
	262, 0,
	263, 0,
	264, 0,
	-2, 557,
	-1, 1413,
	12, 0,
	13, 0,
	14, 0,
	262, 0,
	263, 0,
	264, 0,
	-2, 561,
	-1, 1414,
	12, 0,
	13, 0,
	14, 0,
	262, 0,
	263, 0,
	264, 0,
	-2, 562,
	-1, 1415,
	12, 0,
	13, 0,
	14, 0,
	262, 0,
	263, 0,
	264, 0,
	-2, 563,
	-1, 1517,
	127, 0,
	-2, 531,
	-1, 1521,
	30, 0,
	115, 0,
	137, 0,
	209, 0,
	260, 0,
	-2, 534,
	-1, 1522,
	30, 0,
	115, 0,
	137, 0,
	209, 0,
	260, 0,
	-2, 536,
	-1, 1606,
	30, 0,
	115, 0,
	137, 0,
	209, 0,
	260, 0,
	-2, 535,
	-1, 1607,
	30, 0,
	115, 0,
	137, 0,
	209, 0,
	260, 0,
	-2, 537,
	-1, 1615,
	127, 0,
	-2, 564,
	-1, 1655,
	127, 0,
	-2, 565,
	-1, 1701,
	30, 0,
	137, 0,
	209, 0,
	260, 0,
	-2, 867,
}

const sqlNprod = 1004
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 20906

var sqlAct = [...]int{

	447, 1700, 1682, 1558, 1722, 840, 1660, 1683, 1699, 907,
	1684, 445, 848, 1386, 716, 1593, 1488, 1478, 279, 444,
	437, 1479, 1505, 1580, 1445, 507, 1499, 762, 891, 1493,
	244, 87, 1262, 301, 87, 1358, 916, 1359, 888, 31,
	88, 87, 1168, 1110, 1329, 14, 592, 1206, 87, 87,
	495, 1158, 87, 439, 1261, 87, 87, 87, 1167, 513,
	1025, 87, 87, 87, 87, 409, 327, 1338, 697, 890,
	694, 849, 816, 66, 764, 825, 1029, 994, 536, 997,
	1154, 919, 797, 20, 1064, 87, 284, 793, 712, 10,
	1019, 565, 6, 278, 322, 286, 43, 1116, 883, 550,
	378, 516, 497, 718, 508, 284, 328, 518, 419, 410,
	509, 68, 379, 576, 547, 917, 329, 67, 324, 317,
	69, 64, 8, 43, 320, 842, 894, 393, 289, 394,
	241, 567, 83, 392, 319, 563, 546, 529, 74, 287,
	313, 1599, 1729, 538, 1600, 911, 538, 841, 1022, 43,
	70, 27, 845, 44, 283, 45, 1697, 496, 1067, 1579,
	1690, 1681, 1676, 911, 1520, 911, 283, 297, 1657, 538,
	304, 1520, 1651, 268, 721, 911, 314, 1122, 1642, 325,
	1633, 1579, 1199, 911, 1646, 452, 1608, 1023, 291, 1520,
	1603, 307, 723, 911, 720, 1590, 1166, 276, 1579, 275,
	1587, 1578, 1563, 1588, 1579, 911, 1562, 1543, 1523, 911,
	1199, 1199, 722, 1519, 720, 721, 1520, 740, 741, 742,
	1024, 1021, 1455, 1362, 527, 911, 1199, 743, 397, 1318,
	719, 49, 1313, 723, 1420, 749, 1312, 87, 87, 1313,
	1279, 1277, 1276, 1280, 1199, 1199, 1365, 1136, 1275, 499,
	51, 1199, 27, 722, 1203, 1201, 1200, 1199, 814, 737,
	1202, 1199, 728, 49, 912, 1582, 813, 911, 87, 812,
	87, 1205, 87, 1156, 87, 1138, 1026, 52, 49, 911,
	863, 1005, 51, 1199, 47, 544, 906, 877, 545, 87,
	48, 405, 688, 539, 391, 510, 539, 51, 404, 511,
	87, 53, 385, 728, 687, 557, 556, 738, 46, 52,
	345, 87, 87, 87, 296, 87, 47, 510, 511, 539,
	750, 511, 48, 390, 52, 591, 364, 1698, 506, 1696,
	502, 47, 748, 1020, 1689, 1652, 1589, 48, 1548, 352,
	46, 49, 745, 1544, 1536, 87, 1535, 87, 738, 1530,
	1529, 353, 1528, 1527, 1177, 844, 1233, 327, 327, 501,
	51, 1514, 739, 1435, 49, 594, 87, 1430, 87, 87,
	87, 87, 1473, 87, 1122, 1429, 1428, 87, 1369, 1347,
	1328, 1284, 87, 51, 1281, 384, 542, 52, 87, 537,
	1269, 765, 1260, 1232, 719, 1229, 1227, 328, 328, 541,
	382, 1216, 1210, 739, 1137, 595, 87, 329, 329, 87,
	52, 498, 691, 586, 747, 596, 1140, 47, 46, 1002,
	1081, 721, 1036, 48, 1035, 404, 314, 403, 406, 1692,
	733, 730, 731, 732, 724, 725, 726, 727, 729, 723,
	276, 65, 275, 1233, 1238, 1250, 1251, 1252, 1388, 1645,
	531, 528, 1625, 770, 1624, 1516, 1617, 1596, 1585, 722,
	767, 1577, 690, 284, 1555, 746, 1541, 734, 735, 736,
	1512, 733, 730, 731, 732, 724, 725, 726, 727, 729,
	1508, 1486, 1356, 554, 553, 1346, 1325, 1247, 1472, 1324,
	1323, 587, 1321, 580, 510, 1296, 677, 1295, 511, 681,
	682, 683, 1003, 684, 680, 1259, 87, 686, 1224, 728,
	400, 401, 594, 1223, 689, 1215, 1196, 1192, 999, 798,
	87, 721, 702, 701, 87, 700, 801, 87, 87, 1095,
	1094, 1238, 808, 87, 714, 87, 87, 1074, 87, 723,
	1034, 87, 910, 87, 87, 805, 327, 721, 819, 87,
	87, 276, 595, 708, 276, 276, 709, 710, 810, 722,
	1253, 791, 596, 790, 865, 723, 799, 795, 796, 789,
	449, 802, 788, 858, 322, 843, 1248, 843, 787, 1095,
	786, 785, 761, 784, 783, 722, 328, 782, 781, 780,
	66, 779, 594, 830, 832, 778, 329, 777, 768, 766,
	46, 692, 302, 408, 1605, 806, 1604, 1349, 1348, 728,
	503, 1601, 1477, 358, 1123, 901, 1234, 1235, 1236, 1237,
	1239, 803, 377, 1494, 1283, 804, 1282, 1233, 68, 1178,
	373, 1249, 595, 359, 67, 728, 775, 69, 882, 835,
	43, 841, 596, 1389, 1030, 1219, 822, 1233, 794, 1118,
	1666, 1711, 1132, 1632, 738, 413, 866, 847, 871, 325,
	857, 838, 867, 864, 861, 420, 860, 70, 859, 870,
	1710, 1463, 856, 585, 584, 869, 578, 573, 282, 273,
	87, 724, 725, 726, 727, 729, 261, 267, 519, 266,
	520, 262, 87, 87, 1571, 1244, 1245, 1246, 1570, 1243,
	1240, 1241, 1242, 1234, 1235, 1236, 1237, 1239, 235, 739,
	1308, 1288, 1287, 1451, 281, 1238, 432, 298, 1214, 57,
	298, 87, 309, 87, 913, 1213, 298, 771, 309, 1212,
	519, 1022, 520, 1211, 1180, 1238, 986, 862, 356, 1631,
	837, 1511, 836, 1452, 381, 588, 1078, 85, 1077, 959,
	245, 61, 594, 958, 521, 376, 283, 85, 1668, 921,
	1248, 58, 996, 270, 290, 290, 532, 1026, 300, 996,
	1023, 300, 306, 300, 357, 927, 1719, 300, 315, 300,
	245, 724, 725, 726, 727, 729, 1560, 1233, 808, 886,
	1109, 1686, 595, 808, 590, 1378, 521, 62, 1000, 826,
	885, 347, 596, 1024, 1021, 1111, 1298, 887, 589, 726,
	727, 729, 1080, 1030, 1710, 1249, 87, 87, 87, 1310,
	818, 1447, 87, 1448, 947, 87, 1307, 1120, 280, 914,
	271, 87, 87, 87, 87, 87, 1131, 87, 87, 525,
	1010, 1678, 519, 818, 520, 87, 1450, 87, 274, 817,
	1090, 1026, 1115, 1453, 87, 829, 721, 1679, 1106, 1026,
	1687, 1092, 524, 87, 87, 1626, 1133, 1001, 355, 87,
	904, 905, 1084, 792, 723, 1238, 1613, 927, 327, 946,
	1111, 758, 60, 59, 284, 380, 1113, 1234, 1235, 1236,
	1237, 1239, 1233, 1339, 722, 1718, 87, 1688, 87, 87,
	87, 1222, 63, 87, 283, 396, 1449, 926, 521, 1236,
	1237, 1239, 87, 1685, 1040, 1709, 1020, 522, 328, 87,
	1248, 87, 1085, 984, 1006, 1011, 947, 1014, 329, 1142,
	1299, 1375, 828, 354, 1707, 298, 1125, 1105, 1126, 579,
	574, 55, 1059, 1492, 728, 348, 350, 1561, 1071, 1072,
	1073, 1124, 1121, 245, 245, 1182, 1149, 1173, 538, 522,
	284, 1127, 995, 1128, 1376, 504, 1139, 1129, 1141, 1134,
	1130, 949, 1135, 1717, 1565, 1249, 298, 530, 530, 899,
	1238, 946, 374, 1043, 85, 355, 300, 56, 245, 738,
	388, 1050, 827, 873, 1151, 1147, 367, 346, 1305, 875,
	1150, 344, 1172, 1152, 1564, 290, 43, 1553, 985, 926,
	1539, 395, 517, 1459, 1416, 876, 300, 1290, 1176, 1733,
	1026, 815, 1044, 874, 799, 1248, 802, 300, 300, 300,
	982, 533, 1089, 1204, 375, 396, 562, 900, 699, 284,
	693, 1374, 796, 795, 739, 1161, 1242, 1234, 1235, 1236,
	1237, 1239, 707, 1661, 1725, 1045, 1042, 1462, 1506, 395,
	1164, 551, 1181, 551, 1461, 1183, 1554, 560, 685, 558,
	1337, 522, 1097, 949, 1096, 1502, 1162, 1334, 561, 1333,
	1249, 354, 245, 281, 551, 245, 245, 245, 1417, 245,
	1540, 1458, 54, 245, 1418, 284, 87, 312, 85, 1732,
	311, 387, 983, 1330, 696, 1218, 1155, 1033, 539, 1507,
	1294, 1046, 1616, 730, 731, 732, 724, 725, 726, 727,
	729, 1538, 290, 87, 1263, 717, 1355, 1315, 1228, 1191,
	868, 372, 370, 948, 1163, 369, 368, 87, 365, 87,
	310, 87, 1460, 1264, 776, 87, 1266, 1267, 1268, 1240,
	1241, 1242, 1234, 1235, 1236, 1237, 1239, 87, 1195, 679,
	87, 1285, 1197, 1032, 1442, 1723, 87, 594, 1041, 1292,
	87, 807, 87, 1303, 1301, 1208, 1209, 1309, 1289, 1306,
	1302, 1144, 1304, 1317, 902, 898, 1314, 543, 540, 298,
	535, 526, 309, 1332, 1316, 523, 1335, 1383, 852, 698,
	1572, 398, 908, 309, 1724, 294, 309, 595, 1320, 1711,
	361, 1322, 1336, 1343, 1258, 1327, 582, 596, 72, 1574,
	834, 1726, 300, 87, 1342, 1271, 1371, 1372, 1373, 1311,
	1340, 1341, 818, 1582, 1628, 948, 823, 3, 833, 818,
	300, 1654, 1647, 300, 839, 831, 927, 1331, 721, 300,
	402, 854, 855, 846, 300, 909, 715, 300, 75, 245,
	245, 721, 260, 399, 1392, 551, 717, 295, 71, 555,
	1175, 1396, 1390, 1377, 1379, 1380, 1730, 1368, 80, 723,
	927, 362, 1731, 76, 1233, 1394, 722, 927, 87, 87,
	87, 303, 923, 721, 1423, 947, 87, 87, 82, 722,
	263, 264, 87, 1427, 87, 77, 87, 87, 87, 87,
	1456, 1457, 879, 878, 87, 1513, 1436, 1424, 1441, 927,
	79, 1381, 1350, 1278, 87, 87, 269, 1157, 1079, 947,
	1437, 1525, 1076, 1484, 87, 87, 947, 1484, 87, 1075,
	1009, 1483, 1485, 1491, 1027, 1483, 1485, 87, 87, 880,
	946, 1382, 1145, 881, 769, 1363, 1559, 298, 1474, 1476,
	1157, 1509, 73, 1490, 678, 366, 1532, 1677, 947, 1221,
	1497, 1498, 1161, 1612, 1503, 1592, 1470, 1031, 926, 774,
	25, 1481, 425, 1443, 946, 1291, 298, 1164, 893, 87,
	1510, 946, 1518, 892, 923, 597, 884, 1159, 583, 1189,
	572, 448, 78, 1162, 992, 1161, 371, 566, 300, 823,
	927, 1187, 926, 575, 1039, 500, 990, 1160, 1421, 926,
	1164, 450, 924, 946, 451, 925, 800, 1537, 438, 1431,
	1159, 1501, 922, 323, 850, 1028, 1162, 300, 1051, 245,
	1217, 81, 949, 87, 772, 87, 424, 87, 430, 429,
	1160, 926, 1007, 421, 87, 1504, 1165, 351, 239, 947,
	240, 1163, 1114, 1471, 903, 703, 1300, 1549, 272, 1230,
	1057, 1550, 1049, 87, 1047, 1185, 949, 1552, 988, 1190,
	987, 1086, 1038, 949, 993, 383, 512, 1573, 851, 363,
	1496, 915, 1174, 87, 1163, 87, 407, 1487, 1484, 711,
	1691, 1567, 293, 87, 1586, 1583, 1483, 1485, 1581, 87,
	1117, 1575, 1500, 292, 946, 949, 889, 927, 360, 1117,
	559, 872, 265, 1602, 1623, 1595, 1627, 1297, 1665, 50,
	19, 17, 300, 1087, 1088, 16, 15, 13, 823, 1598,
	12, 1093, 926, 1568, 1569, 1611, 11, 1098, 1099, 1101,
	1103, 1104, 1186, 1107, 1108, 18, 1148, 989, 1609, 1188,
	9, 300, 7, 1119, 991, 1143, 947, 24, 23, 22,
	300, 87, 87, 5, 927, 87, 1621, 1618, 4, 884,
	551, 2, 1635, 87, 1, 884, 298, 0, 0, 87,
	1637, 1484, 0, 1639, 1644, 927, 0, 87, 0, 1483,
	1485, 1636, 594, 0, 948, 1643, 949, 808, 0, 0,
	0, 1648, 696, 1638, 696, 245, 300, 284, 0, 1146,
	0, 946, 1649, 947, 0, 87, 87, 87, 1153, 87,
	0, 1653, 0, 411, 411, 1170, 0, 300, 948, 1669,
	1663, 0, 595, 514, 947, 948, 1672, 87, 1650, 926,
	1051, 1051, 596, 1656, 0, 0, 0, 1484, 0, 1667,
	1671, 1675, 1674, 1673, 1670, 1483, 1485, 0, 0, 87,
	0, 927, 0, 0, 0, 0, 0, 948, 946, 0,
	1695, 1694, 0, 0, 0, 0, 0, 0, 1705, 0,
	0, 0, 1708, 87, 1706, 0, 0, 0, 1712, 946,
	1714, 1715, 0, 1716, 0, 0, 926, 1713, 1051, 1051,
	1051, 0, 0, 949, 0, 1728, 1727, 0, 0, 0,
	947, 0, 0, 1451, 0, 1446, 0, 926, 0, 721,
	0, 0, 1734, 1444, 0, 0, 704, 706, 0, 0,
	0, 0, 0, 713, 1641, 0, 0, 723, 426, 32,
	0, 0, 0, 1452, 0, 753, 754, 755, 756, 757,
	0, 0, 0, 923, 760, 0, 0, 722, 948, 0,
	949, 0, 0, 0, 0, 946, 32, 0, 0, 0,
	0, 0, 0, 0, 773, 75, 0, 0, 852, 0,
	0, 949, 277, 0, 0, 285, 0, 923, 0, 0,
	0, 0, 32, 926, 923, 80, 0, 0, 0, 0,
	76, 0, 717, 1680, 285, 0, 0, 728, 0, 0,
	0, 0, 298, 0, 0, 298, 0, 0, 0, 0,
	0, 1447, 77, 1448, 0, 0, 923, 1051, 1051, 300,
	721, 0, 740, 741, 742, 0, 0, 79, 0, 0,
	0, 809, 743, 1319, 0, 823, 1450, 696, 723, 0,
	749, 1326, 738, 1453, 0, 0, 0, 949, 0, 0,
	0, 0, 0, 300, 1233, 948, 300, 0, 722, 0,
	0, 0, 1170, 0, 737, 0, 1345, 0, 1170, 0,
	1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051,
	1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 0,
	1051, 0, 0, 0, 0, 0, 1449, 739, 1247, 0,
	0, 0, 0, 0, 0, 0, 0, 923, 728, 78,
	0, 0, 948, 0, 0, 0, 0, 0, 0, 1387,
	0, 0, 0, 0, 0, 750, 0, 0, 0, 0,
	0, 0, 0, 948, 0, 0, 0, 748, 0, 0,
	0, 0, 1238, 0, 0, 0, 0, 745, 81, 0,
	0, 1466, 0, 738, 0, 0, 0, 0, 0, 1475,
	0, 0, 0, 0, 0, 0, 1193, 1194, 732, 724,
	725, 726, 727, 729, 0, 744, 0, 0, 0, 298,
	298, 0, 0, 298, 1439, 1440, 823, 1248, 0, 0,
	0, 0, 717, 717, 0, 0, 0, 0, 1464, 0,
	1465, 0, 300, 1467, 1468, 1469, 0, 0, 739, 948,
	300, 0, 0, 0, 923, 277, 0, 0, 1480, 747,
	1489, 823, 1480, 0, 1255, 1256, 1257, 0, 0, 0,
	300, 300, 0, 0, 300, 0, 0, 0, 0, 0,
	411, 0, 1249, 717, 1170, 960, 961, 962, 963, 964,
	965, 966, 967, 968, 969, 970, 971, 972, 973, 974,
	975, 976, 977, 978, 979, 980, 981, 0, 0, 0,
	746, 923, 734, 735, 736, 0, 733, 730, 731, 732,
	724, 725, 726, 727, 729, 1533, 0, 0, 1051, 0,
	0, 0, 923, 1545, 0, 0, 0, 0, 0, 1557,
	1037, 0, 1048, 0, 1058, 1060, 1065, 1068, 1069, 1070,
	1243, 1240, 1241, 1242, 1234, 1235, 1236, 1237, 1239, 0,
	0, 0, 0, 0, 0, 0, 277, 0, 247, 277,
	277, 0, 0, 514, 0, 0, 0, 0, 1591, 823,
	0, 1551, 258, 245, 0, 0, 0, 0, 298, 721,
	300, 0, 759, 1353, 1354, 0, 763, 0, 0, 0,
	0, 0, 1112, 0, 0, 0, 0, 723, 923, 717,
	0, 0, 0, 0, 1051, 249, 0, 0, 0, 0,
	0, 0, 259, 1480, 0, 0, 0, 722, 0, 300,
	0, 1594, 0, 737, 248, 250, 0, 0, 1233, 300,
	1250, 1251, 1252, 0, 0, 717, 1397, 1398, 1399, 1400,
	1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408, 1409, 1410,
	1411, 1412, 1413, 1414, 1415, 0, 1419, 713, 0, 0,
	251, 0, 0, 0, 0, 0, 0, 728, 0, 0,
	252, 253, 1247, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1051, 0, 0, 254, 0, 0, 32, 0,
	32, 0, 0, 0, 0, 0, 0, 1629, 1630, 0,
	0, 1634, 1664, 32, 0, 0, 1480, 0, 0, 245,
	0, 0, 738, 0, 0, 1489, 1238, 0, 0, 0,
	0, 0, 0, 717, 0, 0, 0, 0, 0, 0,
	0, 0, 21, 1179, 0, 0, 0, 1184, 0, 0,
	0, 0, 35, 0, 852, 1253, 0, 0, 0, 0,
	0, 1662, 717, 300, 0, 245, 1198, 0, 0, 0,
	0, 1248, 0, 0, 0, 37, 1207, 739, 0, 0,
	0, 42, 1480, 1594, 0, 0, 255, 0, 0, 256,
	0, 1220, 0, 0, 257, 1225, 0, 0, 0, 721,
	0, 740, 741, 742, 0, 300, 26, 0, 0, 38,
	0, 743, 0, 27, 0, 0, 760, 723, 0, 749,
	0, 0, 1065, 1065, 1065, 0, 1249, 0, 28, 717,
	0, 0, 0, 0, 0, 0, 0, 722, 0, 0,
	0, 0, 0, 737, 1286, 733, 730, 731, 732, 724,
	725, 726, 727, 729, 0, 1293, 0, 0, 0, 0,
	0, 0, 0, 0, 1556, 0, 0, 0, 0, 0,
	0, 0, 411, 0, 0, 0, 0, 0, 0, 0,
	0, 411, 0, 0, 514, 0, 0, 728, 0, 918,
	1244, 1245, 1246, 0, 1243, 1240, 1241, 1242, 1234, 1235,
	1236, 1237, 1239, 0, 750, 0, 0, 0, 0, 0,
	0, 0, 40, 0, 0, 29, 748, 39, 0, 998,
	0, 0, 30, 0, 0, 49, 745, 0, 0, 0,
	33, 34, 738, 0, 0, 0, 0, 0, 36, 1351,
	0, 1352, 0, 0, 51, 0, 0, 0, 0, 0,
	1615, 0, 1357, 0, 744, 0, 0, 41, 0, 0,
	1367, 0, 0, 0, 0, 0, 1367, 0, 0, 0,
	0, 52, 0, 0, 0, 0, 0, 0, 47, 0,
	1384, 0, 0, 0, 48, 0, 0, 739, 0, 1393,
	0, 0, 1395, 0, 0, 0, 0, 1233, 747, 1250,
	1251, 1252, 46, 0, 0, 0, 0, 0, 0, 1515,
	0, 0, 0, 285, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1233, 1425, 1426, 0, 0, 1655, 0,
	0, 0, 0, 1432, 1433, 1434, 0, 0, 0, 0,
	0, 1247, 0, 0, 0, 0, 0, 0, 0, 746,
	0, 734, 735, 736, 0, 733, 730, 731, 732, 724,
	725, 726, 727, 729, 0, 0, 0, 1082, 0, 0,
	0, 411, 0, 0, 0, 0, 1083, 0, 0, 32,
	0, 0, 0, 0, 0, 1238, 0, 0, 0, 1171,
	721, 1495, 740, 741, 742, 0, 0, 0, 0, 0,
	0, 0, 743, 0, 0, 0, 0, 0, 723, 0,
	749, 1238, 0, 0, 1253, 721, 1517, 740, 741, 742,
	0, 1521, 1522, 0, 0, 0, 1524, 743, 722, 0,
	1248, 1526, 0, 723, 737, 749, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1531, 0, 0, 0,
	1534, 0, 0, 722, 998, 0, 1248, 0, 0, 737,
	0, 0, 0, 0, 0, 0, 0, 0, 759, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 728, 0,
	0, 1542, 0, 0, 0, 1249, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 750, 0, 0, 0, 0,
	0, 0, 0, 728, 0, 0, 0, 748, 0, 0,
	0, 1249, 0, 0, 0, 0, 0, 745, 0, 0,
	750, 0, 1566, 738, 759, 0, 0, 0, 0, 0,
	0, 0, 748, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 745, 1584, 0, 744, 0, 0, 738, 1244,
	1245, 1246, 0, 1243, 1240, 1241, 1242, 1234, 1235, 1236,
	1237, 1239, 1597, 0, 0, 0, 0, 0, 0, 0,
	744, 0, 0, 0, 0, 0, 1606, 1607, 739, 1243,
	1240, 1241, 1242, 1234, 1235, 1236, 1237, 1239, 0, 747,
	0, 0, 0, 0, 0, 721, 0, 740, 741, 742,
	0, 0, 0, 739, 0, 0, 1620, 743, 0, 0,
	0, 0, 0, 723, 747, 749, 1622, 0, 0, 0,
	0, 0, 0, 0, 0, 918, 0, 0, 918, 0,
	0, 0, 0, 722, 0, 0, 0, 0, 514, 737,
	746, 0, 734, 735, 736, 0, 733, 730, 731, 732,
	724, 725, 726, 727, 729, 1233, 0, 1250, 1251, 1252,
	0, 0, 0, 1274, 0, 746, 0, 734, 735, 736,
	0, 733, 730, 731, 732, 724, 725, 726, 727, 729,
	0, 0, 0, 728, 0, 0, 0, 0, 1273, 0,
	0, 721, 0, 740, 741, 742, 0, 0, 0, 1247,
	750, 0, 0, 743, 0, 0, 0, 0, 0, 723,
	0, 749, 748, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 745, 0, 0, 0, 0, 1693, 738, 722,
	0, 0, 0, 0, 0, 737, 0, 0, 0, 1704,
	1704, 0, 0, 1238, 0, 0, 0, 0, 0, 0,
	744, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1254, 0, 1704, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1253, 0, 0, 0, 0, 0, 0, 728,
	0, 32, 0, 739, 0, 0, 0, 0, 1248, 0,
	0, 1704, 0, 0, 747, 0, 750, 0, 0, 0,
	0, 0, 918, 918, 0, 0, 918, 0, 748, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 745, 0,
	0, 0, 0, 0, 738, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1249, 0, 746, 744, 734, 735, 736,
	0, 733, 730, 731, 732, 724, 725, 726, 727, 729,
	0, 0, 0, 0, 0, 0, 0, 0, 1272, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 739,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	747, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1244, 1245, 1246,
	0, 1243, 1240, 1241, 1242, 1234, 1235, 1236, 1237, 1239,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 746, 0, 734, 735, 736, 1576, 733, 730, 731,
	732, 724, 725, 726, 727, 729, 0, 0, 0, 0,
	0, 1659, 0, 593, 0, 0, 0, 0, 0, 0,
	0, 918, 0, 0, 0, 89, 90, 598, 91, 599,
	600, 601, 602, 603, 604, 605, 606, 92, 93, 190,
	191, 192, 94, 193, 194, 607, 95, 195, 196, 96,
	608, 609, 197, 198, 199, 610, 200, 611, 331, 612,
	97, 98, 99, 0, 100, 613, 101, 614, 332, 102,
	103, 615, 616, 617, 618, 619, 620, 104, 105, 106,
	107, 201, 108, 202, 203, 621, 622, 109, 623, 624,
	625, 110, 111, 626, 112, 627, 759, 628, 204, 113,
	205, 629, 630, 631, 114, 115, 206, 0, 116, 632,
	117, 633, 634, 333, 635, 118, 207, 636, 208, 637,
	119, 120, 209, 210, 638, 639, 121, 640, 334, 122,
	211, 212, 213, 641, 214, 642, 335, 123, 336, 124,
	125, 643, 644, 215, 337, 126, 338, 645, 127, 646,
	647, 128, 0, 129, 130, 131, 132, 133, 339, 134,
	135, 138, 136, 648, 137, 649, 216, 139, 217, 140,
	141, 650, 651, 652, 653, 654, 142, 218, 340, 143,
	341, 219, 144, 145, 655, 220, 146, 221, 656, 147,
	148, 149, 222, 150, 151, 657, 153, 154, 152, 155,
	658, 156, 342, 157, 158, 223, 159, 0, 246, 160,
	161, 659, 224, 162, 163, 660, 164, 165, 343, 166,
	225, 167, 661, 168, 169, 171, 226, 170, 227, 662,
	663, 172, 173, 664, 228, 229, 230, 665, 666, 174,
	231, 232, 667, 175, 176, 177, 178, 668, 669, 179,
	180, 181, 670, 671, 182, 183, 184, 233, 234, 672,
	185, 673, 674, 675, 676, 186, 187, 188, 189, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 593, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1344, 89, 90, 598, 91, 599,
	600, 601, 602, 603, 604, 605, 606, 92, 93, 190,
	191, 192, 94, 193, 194, 607, 95, 195, 196, 96,
	608, 609, 197, 198, 199, 610, 200, 611, 331, 612,
	97, 98, 99, 0, 100, 613, 101, 614, 332, 102,
	103, 615, 616, 617, 618, 619, 620, 104, 105, 106,
	107, 201, 108, 202, 203, 621, 622, 109, 623, 624,
	625, 110, 111, 626, 112, 627, 0, 628, 204, 113,
	205, 629, 630, 631, 114, 115, 206, 0, 116, 632,
	117, 633, 634, 333, 635, 118, 207, 636, 208, 637,
	119, 120, 209, 210, 638, 639, 121, 640, 334, 122,
	211, 212, 213, 641, 214, 642, 335, 123, 336, 124,
	125, 643, 644, 215, 337, 126, 338, 645, 127, 646,
	647, 128, 0, 129, 130, 131, 132, 133, 339, 134,
	135, 138, 136, 648, 137, 649, 216, 139, 217, 140,
	141, 650, 651, 652, 653, 654, 142, 218, 340, 143,
	341, 219, 144, 145, 655, 220, 146, 221, 656, 147,
	148, 149, 222, 150, 151, 657, 153, 154, 152, 155,
	658, 156, 342, 157, 158, 223, 159, 0, 246, 160,
	161, 659, 224, 162, 163, 660, 164, 165, 343, 166,
	225, 167, 661, 168, 169, 171, 226, 170, 227, 662,
	663, 172, 173, 664, 228, 229, 230, 665, 666, 174,
	231, 232, 667, 175, 176, 177, 178, 668, 669, 179,
	180, 181, 670, 671, 182, 183, 184, 233, 234, 672,
	185, 673, 674, 675, 676, 186, 187, 188, 189, 0,
	593, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 811, 89, 90, 598, 91, 599, 600, 601, 602,
	603, 604, 605, 606, 92, 93, 190, 191, 192, 94,
	193, 194, 607, 95, 195, 196, 96, 608, 609, 197,
	198, 199, 610, 200, 611, 331, 612, 97, 98, 99,
	0, 100, 613, 101, 614, 332, 102, 103, 615, 616,
	617, 618, 619, 620, 104, 105, 106, 107, 201, 108,
	202, 203, 621, 622, 109, 623, 624, 625, 110, 111,
	626, 112, 627, 0, 628, 204, 113, 205, 629, 630,
	631, 114, 115, 206, 0, 116, 632, 117, 633, 634,
	333, 635, 118, 207, 636, 208, 637, 119, 120, 209,
	210, 638, 639, 121, 640, 334, 122, 211, 212, 213,
	641, 214, 642, 335, 123, 336, 124, 125, 643, 644,
	215, 337, 126, 338, 645, 127, 646, 647, 128, 0,
	129, 130, 131, 132, 133, 339, 134, 135, 138, 136,
	648, 137, 649, 216, 139, 217, 140, 141, 650, 651,
	652, 653, 654, 142, 218, 340, 143, 341, 219, 144,
	145, 655, 220, 146, 221, 656, 147, 148, 149, 222,
	150, 151, 657, 153, 154, 152, 155, 658, 156, 342,
	157, 158, 223, 159, 0, 246, 160, 161, 659, 224,
	162, 163, 660, 164, 165, 343, 166, 225, 167, 661,
	168, 169, 171, 226, 170, 227, 662, 663, 172, 173,
	664, 228, 229, 230, 665, 666, 174, 231, 232, 667,
	175, 176, 177, 178, 668, 669, 179, 180, 181, 670,
	671, 182, 183, 184, 233, 234, 672, 185, 673, 674,
	675, 676, 186, 187, 188, 189, 446, 435, 436, 433,
	434, 422, 0, 0, 0, 0, 0, 0, 89, 90,
	1016, 91, 0, 0, 0, 0, 428, 0, 0, 0,
	92, 93, 190, 475, 476, 94, 477, 478, 0, 95,
	195, 196, 96, 443, 461, 479, 480, 199, 0, 471,
	0, 454, 0, 97, 98, 99, 0, 100, 0, 101,
	0, 332, 102, 103, 0, 455, 457, 0, 456, 458,
	104, 105, 106, 107, 481, 108, 482, 483, 0, 0,
	109, 0, 1017, 0, 474, 111, 0, 112, 0, 0,
	0, 427, 113, 462, 441, 0, 0, 114, 115, 484,
	0, 116, 0, 117, 0, 0, 333, 0, 118, 472,
	0, 208, 0, 119, 120, 468, 470, 0, 0, 121,
	0, 334, 122, 485, 486, 487, 0, 453, 0, 335,
	123, 336, 124, 125, 0, 0, 473, 337, 126, 338,
	0, 127, 0, 0, 128, 0, 129, 130, 131, 132,
	133, 339, 134, 135, 138, 136, 417, 137, 442, 469,
	139, 488, 140, 141, 0, 0, 0, 0, 0, 142,
	218, 340, 143, 341, 463, 144, 145, 0, 464, 146,
	221, 0, 147, 148, 149, 489, 150, 151, 0, 153,
	154, 152, 155, 0, 156, 342, 157, 158, 431, 159,
	0, 246, 160, 161, 0, 224, 162, 163, 459, 164,
	165, 343, 166, 490, 167, 0, 168, 169, 171, 491,
	170, 465, 0, 0, 172, 173, 0, 228, 492, 493,
	0, 0, 174, 466, 467, 440, 175, 176, 177, 178,
	0, 0, 179, 180, 181, 460, 0, 182, 183, 184,
	233, 494, 1015, 185, 0, 0, 0, 0, 186, 187,
	188, 189, 418, 0, 446, 435, 436, 433, 434, 422,
	0, 0, 414, 415, 1018, 0, 89, 90, 416, 91,
	0, 423, 1013, 0, 428, 0, 0, 0, 92, 93,
	190, 475, 476, 94, 477, 478, 0, 95, 195, 196,
	96, 443, 461, 479, 480, 199, 0, 471, 0, 454,
	0, 97, 98, 99, 0, 100, 0, 101, 0, 332,
	102, 103, 0, 455, 457, 0, 456, 458, 104, 105,
	106, 107, 481, 108, 482, 483, 515, 0, 109, 0,
	0, 0, 474, 111, 0, 112, 0, 0, 0, 427,
	113, 462, 441, 0, 0, 114, 115, 484, 0, 116,
	0, 117, 0, 0, 333, 0, 118, 472, 0, 208,
	0, 119, 120, 468, 470, 0, 0, 121, 0, 334,
	122, 485, 486, 487, 0, 453, 0, 335, 123, 336,
	124, 125, 0, 0, 473, 337, 126, 338, 0, 127,
	0, 0, 128, 0, 129, 130, 131, 132, 133, 339,
	134, 135, 138, 136, 417, 137, 442, 469, 139, 488,
	140, 141, 0, 0, 0, 0, 0, 142, 218, 340,
	143, 341, 463, 144, 145, 0, 464, 146, 221, 0,
	147, 148, 149, 489, 150, 151, 0, 153, 154, 152,
	155, 0, 156, 342, 157, 158, 431, 159, 0, 246,
	160, 161, 49, 224, 162, 163, 459, 164, 165, 343,
	166, 490, 167, 0, 168, 169, 171, 491, 170, 465,
	0, 51, 172, 173, 0, 228, 492, 493, 0, 0,
	174, 466, 467, 440, 175, 176, 177, 178, 0, 0,
	179, 180, 181, 460, 0, 182, 183, 184, 330, 494,
	0, 185, 0, 0, 0, 47, 186, 187, 188, 189,
	418, 48, 446, 435, 436, 433, 434, 422, 0, 0,
	414, 415, 0, 0, 89, 90, 416, 91, 0, 423,
	0, 0, 428, 0, 0, 0, 92, 93, 190, 475,
	476, 94, 477, 478, 0, 95, 195, 196, 96, 443,
	461, 479, 480, 199, 0, 471, 0, 454, 0, 97,
	98, 99, 0, 100, 0, 101, 0, 332, 102, 103,
	0, 455, 457, 0, 456, 458, 104, 105, 106, 107,
	481, 108, 482, 483, 0, 0, 109, 0, 0, 0,
	474, 111, 0, 112, 0, 0, 0, 427, 113, 462,
	441, 0, 0, 114, 115, 484, 0, 116, 0, 117,
	0, 0, 333, 0, 118, 472, 0, 208, 0, 119,
	120, 468, 470, 0, 0, 121, 0, 334, 122, 485,
	486, 487, 0, 453, 0, 335, 123, 336, 124, 125,
	0, 0, 473, 337, 126, 338, 0, 127, 0, 0,
	128, 0, 129, 130, 131, 132, 133, 339, 134, 135,
	138, 136, 417, 137, 442, 469, 139, 488, 140, 141,
	0, 0, 0, 0, 0, 142, 218, 340, 143, 341,
	463, 144, 145, 0, 464, 146, 221, 0, 147, 148,
	149, 489, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 342, 157, 158, 431, 159, 0, 246, 160, 161,
	49, 224, 162, 163, 459, 164, 165, 343, 166, 490,
	167, 0, 168, 169, 171, 491, 170, 465, 0, 51,
	172, 173, 0, 228, 492, 493, 0, 0, 174, 466,
	467, 440, 175, 176, 177, 178, 0, 0, 179, 180,
	181, 460, 0, 182, 183, 184, 330, 494, 0, 185,
	0, 0, 0, 47, 186, 187, 188, 189, 418, 48,
	446, 435, 436, 433, 434, 422, 0, 0, 414, 415,
	0, 0, 89, 90, 416, 91, 0, 423, 0, 0,
	428, 0, 0, 0, 92, 93, 190, 475, 476, 94,
	477, 478, 1061, 95, 195, 196, 96, 443, 461, 479,
	480, 199, 0, 471, 0, 454, 0, 97, 98, 99,
	0, 100, 0, 101, 0, 332, 102, 103, 0, 455,
	457, 0, 456, 458, 104, 105, 106, 107, 481, 108,
	482, 483, 0, 0, 109, 0, 0, 0, 474, 111,
	0, 112, 0, 0, 0, 427, 113, 462, 441, 0,
	0, 114, 115, 484, 0, 116, 0, 117, 0, 1066,
	333, 0, 118, 472, 0, 208, 0, 119, 120, 468,
	470, 0, 0, 121, 0, 334, 122, 485, 486, 487,
	0, 453, 0, 335, 123, 336, 124, 125, 0, 1062,
	473, 337, 126, 338, 0, 127, 0, 0, 128, 0,
	129, 130, 131, 132, 133, 339, 134, 135, 138, 136,
	417, 137, 442, 469, 139, 488, 140, 141, 0, 0,
	0, 0, 0, 142, 218, 340, 143, 341, 463, 144,
	145, 0, 464, 146, 221, 0, 147, 148, 149, 489,
	150, 151, 0, 153, 154, 152, 155, 0, 156, 342,
	157, 158, 431, 159, 0, 246, 160, 161, 0, 224,
	162, 163, 459, 164, 165, 343, 166, 490, 167, 0,
	168, 169, 171, 491, 170, 465, 0, 0, 172, 173,
	0, 228, 492, 493, 0, 1063, 174, 466, 467, 440,
	175, 176, 177, 178, 0, 0, 179, 180, 181, 460,
	0, 182, 183, 184, 233, 494, 0, 185, 0, 0,
	0, 0, 186, 187, 188, 189, 418, 0, 446, 435,
	436, 433, 434, 422, 0, 0, 414, 415, 0, 0,
	89, 90, 416, 91, 0, 423, 0, 0, 428, 0,
	0, 0, 92, 93, 190, 475, 476, 94, 477, 478,
	0, 95, 195, 196, 96, 443, 461, 479, 480, 199,
	0, 471, 0, 454, 0, 97, 98, 99, 0, 100,
	0, 101, 0, 332, 102, 103, 0, 455, 457, 0,
	456, 458, 104, 105, 106, 107, 481, 108, 482, 483,
	0, 0, 109, 0, 0, 0, 474, 111, 0, 112,
	0, 0, 0, 427, 113, 462, 441, 0, 0, 114,
	115, 484, 0, 116, 0, 117, 0, 0, 333, 0,
	118, 472, 0, 208, 0, 119, 120, 468, 470, 0,
	0, 121, 0, 334, 122, 485, 486, 487, 0, 453,
	0, 335, 123, 336, 124, 125, 0, 0, 473, 337,
	126, 338, 0, 127, 0, 0, 128, 0, 129, 130,
	131, 132, 133, 339, 134, 135, 138, 136, 417, 137,
	442, 469, 139, 488, 140, 141, 0, 0, 0, 0,
	0, 142, 218, 340, 143, 341, 463, 144, 145, 0,
	464, 146, 221, 0, 147, 148, 149, 489, 150, 151,
	0, 153, 154, 152, 155, 0, 156, 342, 157, 158,
	431, 159, 0, 246, 160, 161, 0, 224, 162, 163,
	459, 164, 165, 343, 166, 490, 167, 0, 168, 169,
	171, 491, 170, 465, 0, 0, 172, 173, 0, 228,
	492, 493, 0, 0, 174, 466, 467, 440, 175, 176,
	177, 178, 0, 0, 179, 180, 181, 460, 0, 182,
	183, 184, 233, 494, 0, 185, 0, 0, 0, 0,
	186, 187, 188, 189, 418, 0, 446, 435, 436, 433,
	434, 422, 0, 0, 414, 415, 0, 0, 89, 90,
	416, 91, 0, 423, 1422, 0, 428, 0, 0, 0,
	92, 93, 190, 475, 476, 94, 477, 478, 0, 95,
	195, 196, 96, 443, 461, 479, 480, 199, 0, 471,
	0, 454, 0, 97, 98, 99, 0, 100, 0, 101,
	0, 332, 102, 103, 0, 455, 457, 0, 456, 458,
	104, 105, 106, 107, 481, 108, 482, 483, 0, 0,
	109, 0, 0, 0, 474, 111, 0, 112, 0, 0,
	0, 427, 113, 462, 441, 0, 0, 114, 115, 484,
	0, 116, 0, 117, 0, 0, 333, 0, 118, 472,
	0, 208, 0, 119, 120, 468, 470, 0, 0, 121,
	0, 334, 122, 485, 486, 487, 0, 453, 0, 335,
	123, 336, 124, 125, 0, 0, 473, 337, 126, 338,
	0, 127, 0, 0, 128, 0, 129, 130, 131, 132,
	133, 339, 134, 135, 138, 136, 417, 137, 442, 469,
	139, 488, 140, 141, 0, 0, 0, 0, 0, 142,
	218, 340, 143, 341, 463, 144, 145, 0, 464, 146,
	221, 0, 147, 148, 149, 489, 150, 151, 0, 153,
	154, 152, 155, 0, 156, 342, 157, 158, 431, 159,
	0, 246, 160, 161, 0, 224, 162, 163, 459, 164,
	165, 343, 166, 490, 167, 0, 168, 169, 171, 491,
	170, 465, 0, 0, 172, 173, 0, 228, 492, 493,
	0, 0, 174, 466, 467, 440, 175, 176, 177, 178,
	0, 0, 179, 180, 181, 460, 0, 182, 183, 184,
	233, 494, 0, 185, 0, 0, 0, 0, 186, 187,
	188, 189, 418, 0, 446, 435, 436, 433, 434, 422,
	0, 0, 414, 415, 0, 0, 89, 90, 416, 91,
	0, 423, 1364, 0, 428, 0, 0, 0, 92, 93,
	190, 475, 476, 94, 477, 478, 0, 95, 195, 196,
	96, 443, 461, 479, 480, 199, 0, 471, 0, 454,
	0, 97, 98, 99, 0, 100, 0, 101, 0, 332,
	102, 103, 0, 455, 457, 0, 456, 458, 104, 105,
	106, 107, 481, 108, 482, 483, 0, 0, 109, 0,
	0, 0, 474, 111, 0, 112, 0, 0, 0, 427,
	113, 462, 441, 0, 0, 114, 115, 484, 0, 116,
	0, 117, 0, 0, 333, 0, 118, 472, 0, 208,
	0, 119, 120, 468, 470, 0, 0, 121, 0, 334,
	122, 485, 486, 487, 0, 453, 0, 335, 123, 336,
	124, 125, 0, 0, 473, 337, 126, 338, 0, 127,
	0, 0, 128, 0, 129, 130, 131, 132, 133, 339,
	134, 135, 138, 136, 417, 137, 442, 469, 139, 488,
	140, 141, 0, 0, 0, 0, 0, 142, 218, 340,
	143, 341, 463, 144, 145, 0, 464, 146, 221, 0,
	147, 148, 149, 489, 150, 151, 0, 153, 154, 152,
	155, 0, 156, 342, 157, 158, 431, 159, 0, 246,
	160, 161, 0, 224, 162, 163, 459, 164, 165, 343,
	166, 490, 167, 0, 168, 169, 171, 491, 170, 465,
	0, 0, 172, 173, 0, 228, 492, 493, 0, 0,
	174, 466, 467, 440, 175, 176, 177, 178, 0, 0,
	179, 180, 181, 460, 0, 182, 183, 184, 233, 494,
	0, 185, 0, 0, 0, 0, 186, 187, 188, 189,
	418, 0, 446, 435, 436, 433, 434, 422, 0, 0,
	414, 415, 0, 0, 89, 90, 416, 91, 0, 423,
	1012, 0, 428, 0, 0, 0, 92, 93, 190, 475,
	476, 94, 477, 478, 0, 95, 195, 196, 96, 443,
	461, 479, 480, 199, 0, 471, 0, 454, 0, 97,
	98, 99, 0, 100, 0, 101, 0, 332, 102, 103,
	0, 455, 457, 0, 456, 458, 104, 105, 106, 107,
	481, 108, 482, 483, 0, 0, 109, 0, 0, 0,
	474, 111, 0, 112, 0, 0, 0, 427, 113, 462,
	441, 0, 0, 114, 115, 484, 0, 116, 0, 117,
	0, 0, 333, 0, 118, 472, 0, 208, 0, 119,
	120, 468, 470, 0, 0, 121, 0, 334, 122, 485,
	486, 487, 0, 453, 0, 335, 123, 336, 124, 125,
	0, 0, 473, 337, 126, 338, 0, 127, 0, 0,
	128, 0, 129, 130, 131, 132, 133, 339, 134, 135,
	138, 136, 417, 137, 442, 469, 139, 488, 140, 141,
	0, 0, 0, 0, 0, 142, 218, 340, 143, 341,
	463, 144, 145, 0, 464, 146, 221, 0, 147, 148,
	149, 489, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 342, 157, 158, 431, 159, 0, 246, 160, 161,
	0, 224, 162, 163, 459, 164, 165, 343, 166, 490,
	167, 0, 168, 169, 171, 491, 170, 465, 0, 0,
	172, 173, 0, 228, 492, 493, 0, 0, 174, 466,
	467, 440, 175, 176, 177, 178, 0, 0, 179, 180,
	181, 460, 0, 182, 183, 184, 233, 494, 0, 185,
	0, 0, 0, 0, 186, 187, 188, 189, 418, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 414, 415,
	0, 0, 0, 0, 416, 765, 1008, 423, 446, 435,
	436, 433, 434, 422, 0, 0, 0, 0, 0, 0,
	89, 90, 0, 91, 0, 0, 0, 0, 428, 0,
	0, 0, 92, 93, 190, 475, 476, 94, 477, 478,
	0, 95, 195, 196, 96, 443, 461, 479, 480, 199,
	0, 471, 0, 454, 0, 97, 98, 99, 0, 100,
	0, 101, 0, 332, 102, 103, 0, 455, 457, 0,
	456, 458, 104, 105, 106, 107, 481, 108, 482, 483,
	0, 0, 109, 0, 0, 0, 474, 111, 0, 112,
	0, 0, 0, 427, 113, 462, 441, 0, 0, 114,
	115, 484, 0, 116, 0, 117, 0, 0, 333, 0,
	118, 472, 0, 208, 0, 119, 120, 468, 470, 0,
	0, 121, 0, 334, 122, 485, 486, 487, 0, 453,
	0, 335, 123, 336, 124, 125, 0, 0, 473, 337,
	126, 338, 0, 127, 0, 0, 128, 0, 129, 130,
	131, 132, 133, 339, 134, 135, 138, 136, 417, 137,
	442, 469, 139, 488, 140, 141, 0, 0, 0, 0,
	0, 142, 218, 340, 143, 341, 463, 144, 145, 0,
	464, 146, 221, 0, 147, 148, 149, 489, 150, 151,
	0, 153, 154, 152, 155, 0, 156, 342, 157, 158,
	431, 159, 0, 246, 160, 161, 0, 224, 162, 163,
	459, 164, 165, 343, 166, 490, 167, 0, 168, 169,
	171, 491, 170, 465, 0, 0, 172, 173, 0, 228,
	492, 493, 0, 0, 174, 466, 467, 440, 175, 176,
	177, 178, 0, 0, 179, 180, 181, 460, 0, 182,
	183, 184, 233, 494, 0, 185, 0, 0, 0, 0,
	186, 187, 188, 189, 418, 0, 446, 435, 436, 433,
	434, 422, 0, 0, 414, 415, 412, 0, 89, 90,
	416, 91, 0, 423, 0, 0, 428, 0, 0, 0,
	92, 93, 190, 475, 476, 94, 477, 478, 0, 95,
	195, 196, 96, 443, 461, 479, 480, 199, 0, 471,
	0, 454, 0, 97, 98, 99, 0, 100, 0, 101,
	0, 332, 102, 103, 0, 455, 457, 0, 456, 458,
	104, 105, 106, 107, 481, 108, 482, 483, 0, 0,
	109, 0, 0, 0, 474, 111, 0, 112, 0, 0,
	0, 427, 113, 462, 441, 0, 0, 114, 115, 484,
	0, 116, 0, 117, 0, 0, 333, 0, 118, 472,
	0, 208, 0, 119, 120, 468, 470, 0, 0, 121,
	0, 334, 122, 485, 486, 487, 0, 453, 0, 335,
	123, 336, 124, 125, 0, 0, 473, 337, 126, 338,
	0, 127, 0, 0, 128, 0, 129, 130, 131, 132,
	133, 339, 134, 135, 138, 136, 417, 137, 442, 469,
	139, 488, 140, 141, 0, 0, 0, 0, 0, 142,
	218, 340, 143, 341, 463, 144, 145, 0, 464, 146,
	221, 0, 147, 148, 149, 489, 150, 151, 0, 153,
	154, 152, 155, 0, 156, 342, 157, 158, 431, 159,
	0, 246, 160, 161, 0, 224, 162, 163, 459, 164,
	165, 343, 166, 490, 167, 0, 168, 169, 171, 491,
	170, 465, 0, 0, 172, 173, 0, 228, 492, 493,
	0, 0, 174, 466, 467, 440, 175, 176, 177, 178,
	0, 0, 179, 180, 181, 460, 0, 182, 183, 184,
	233, 494, 1370, 185, 0, 0, 0, 0, 186, 187,
	188, 189, 418, 0, 446, 435, 436, 433, 434, 422,
	0, 0, 414, 415, 0, 0, 89, 90, 416, 91,
	0, 423, 0, 0, 428, 0, 0, 0, 92, 93,
	190, 475, 476, 94, 477, 478, 0, 95, 195, 196,
	96, 443, 461, 479, 480, 199, 0, 471, 0, 454,
	0, 97, 98, 99, 0, 100, 0, 101, 0, 332,
	102, 103, 0, 455, 457, 0, 456, 458, 104, 105,
	106, 107, 481, 108, 482, 483, 515, 0, 109, 0,
	0, 0, 474, 111, 0, 112, 0, 0, 0, 427,
	113, 462, 441, 0, 0, 114, 115, 484, 0, 116,
	0, 117, 0, 0, 333, 0, 118, 472, 0, 208,
	0, 119, 120, 468, 470, 0, 0, 121, 0, 334,
	122, 485, 486, 487, 0, 453, 0, 335, 123, 336,
	124, 125, 0, 0, 473, 337, 126, 338, 0, 127,
	0, 0, 128, 0, 129, 130, 131, 132, 133, 339,
	134, 135, 138, 136, 417, 137, 442, 469, 139, 488,
	140, 141, 0, 0, 0, 0, 0, 142, 218, 340,
	143, 341, 463, 144, 145, 0, 464, 146, 221, 0,
	147, 148, 149, 489, 150, 151, 0, 153, 154, 152,
	155, 0, 156, 342, 157, 158, 431, 159, 0, 246,
	160, 161, 0, 224, 162, 163, 459, 164, 165, 343,
	166, 490, 167, 0, 168, 169, 171, 491, 170, 465,
	0, 0, 172, 173, 0, 228, 492, 493, 0, 0,
	174, 466, 467, 440, 175, 176, 177, 178, 0, 0,
	179, 180, 181, 460, 0, 182, 183, 184, 233, 494,
	0, 185, 0, 0, 0, 0, 186, 187, 188, 189,
	418, 0, 446, 435, 436, 433, 434, 422, 0, 0,
	414, 415, 0, 0, 89, 90, 416, 91, 0, 423,
	0, 0, 428, 0, 0, 0, 92, 93, 190, 475,
	476, 94, 477, 478, 0, 95, 195, 196, 96, 443,
	461, 479, 480, 199, 0, 471, 0, 454, 0, 97,
	98, 99, 0, 100, 0, 101, 0, 332, 102, 103,
	0, 455, 457, 0, 456, 458, 104, 105, 106, 107,
	481, 108, 482, 483, 0, 0, 109, 0, 0, 0,
	474, 111, 0, 112, 0, 0, 0, 427, 113, 462,
	441, 0, 0, 114, 115, 484, 0, 116, 0, 117,
	0, 1066, 333, 0, 118, 472, 0, 208, 0, 119,
	120, 468, 470, 0, 0, 121, 0, 334, 122, 485,
	486, 487, 0, 453, 0, 335, 123, 336, 124, 125,
	0, 0, 473, 337, 126, 338, 0, 127, 0, 0,
	128, 0, 129, 130, 131, 132, 133, 339, 134, 135,
	138, 136, 417, 137, 442, 469, 139, 488, 140, 141,
	0, 0, 0, 0, 0, 142, 218, 340, 143, 341,
	463, 144, 145, 0, 464, 146, 221, 0, 147, 148,
	149, 489, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 342, 157, 158, 431, 159, 0, 246, 160, 161,
	0, 224, 162, 163, 459, 164, 165, 343, 166, 490,
	167, 0, 168, 169, 171, 491, 170, 465, 0, 0,
	172, 173, 0, 228, 492, 493, 0, 0, 174, 466,
	467, 440, 175, 176, 177, 178, 0, 0, 179, 180,
	181, 460, 0, 182, 183, 184, 233, 494, 0, 185,
	0, 0, 0, 0, 186, 187, 188, 189, 418, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 414, 415,
	0, 0, 0, 0, 416, 0, 0, 423, 446, 435,
	436, 433, 434, 422, 0, 0, 0, 0, 0, 0,
	89, 90, 705, 91, 0, 0, 0, 0, 428, 0,
	0, 0, 92, 93, 190, 475, 476, 94, 477, 478,
	0, 95, 195, 196, 96, 443, 461, 479, 480, 199,
	0, 471, 0, 454, 0, 97, 98, 99, 0, 100,
	0, 101, 0, 332, 102, 103, 0, 455, 457, 0,
	456, 458, 104, 105, 106, 107, 481, 108, 482, 483,
	0, 0, 109, 0, 0, 0, 474, 111, 0, 112,
	0, 0, 0, 427, 113, 462, 441, 0, 0, 114,
	115, 484, 0, 116, 0, 117, 0, 0, 333, 0,
	118, 472, 0, 208, 0, 119, 120, 468, 470, 0,
	0, 121, 0, 334, 122, 485, 486, 487, 0, 453,
	0, 335, 123, 336, 124, 125, 0, 0, 473, 337,
	126, 338, 0, 127, 0, 0, 128, 0, 129, 130,
	131, 132, 133, 339, 134, 135, 138, 136, 417, 137,
	442, 469, 139, 488, 140, 141, 0, 0, 0, 0,
	0, 142, 218, 340, 143, 341, 463, 144, 145, 0,
	464, 146, 221, 0, 147, 148, 149, 489, 150, 151,
	0, 153, 154, 152, 155, 0, 156, 342, 157, 158,
	431, 159, 0, 246, 160, 161, 0, 224, 162, 163,
	459, 164, 165, 343, 166, 490, 167, 0, 168, 169,
	171, 491, 170, 465, 0, 0, 172, 173, 0, 228,
	492, 493, 0, 0, 174, 466, 467, 440, 175, 176,
	177, 178, 0, 0, 179, 180, 181, 460, 0, 182,
	183, 184, 233, 494, 0, 185, 0, 0, 0, 0,
	186, 187, 188, 189, 418, 0, 446, 435, 436, 433,
	434, 422, 0, 0, 414, 415, 0, 0, 89, 90,
	416, 91, 0, 423, 0, 0, 428, 0, 0, 0,
	92, 93, 190, 475, 476, 94, 477, 478, 0, 95,
	195, 196, 96, 443, 461, 479, 480, 199, 0, 471,
	0, 454, 0, 97, 98, 99, 0, 100, 0, 101,
	0, 332, 102, 1703, 0, 455, 457, 0, 456, 458,
	104, 105, 106, 107, 481, 108, 482, 483, 0, 0,
	109, 0, 0, 0, 474, 111, 0, 112, 0, 0,
	0, 427, 113, 462, 441, 0, 0, 114, 115, 484,
	0, 116, 0, 117, 0, 0, 333, 0, 118, 472,
	0, 208, 0, 119, 120, 468, 470, 0, 0, 121,
	0, 334, 122, 485, 486, 487, 0, 453, 0, 335,
	123, 336, 124, 125, 0, 0, 473, 337, 126, 338,
	0, 127, 0, 0, 128, 0, 129, 130, 131, 132,
	133, 339, 134, 135, 138, 136, 417, 137, 442, 469,
	139, 488, 140, 141, 0, 0, 0, 0, 0, 142,
	218, 340, 143, 341, 463, 144, 145, 0, 464, 146,
	221, 0, 147, 148, 149, 489, 150, 151, 0, 153,
	154, 152, 155, 0, 156, 342, 157, 158, 431, 159,
	0, 246, 160, 161, 0, 224, 162, 163, 459, 164,
	165, 343, 166, 490, 167, 0, 168, 169, 171, 491,
	170, 465, 0, 0, 172, 173, 0, 228, 492, 493,
	0, 0, 174, 466, 467, 440, 175, 176, 1702, 178,
	0, 0, 179, 180, 181, 460, 0, 182, 183, 184,
	233, 494, 0, 185, 0, 0, 0, 0, 186, 187,
	188, 189, 418, 0, 446, 435, 436, 433, 434, 422,
	0, 0, 414, 415, 0, 0, 89, 90, 416, 91,
	0, 423, 0, 0, 428, 0, 0, 0, 92, 93,
	1701, 475, 476, 94, 477, 478, 0, 95, 195, 196,
	96, 443, 461, 479, 480, 199, 0, 471, 0, 454,
	0, 97, 98, 99, 0, 100, 0, 101, 0, 332,
	102, 1703, 0, 455, 457, 0, 456, 458, 104, 105,
	106, 107, 481, 108, 482, 483, 0, 0, 109, 0,
	0, 0, 474, 111, 0, 112, 0, 0, 0, 427,
	113, 462, 441, 0, 0, 114, 115, 484, 0, 116,
	0, 117, 0, 0, 333, 0, 118, 472, 0, 208,
	0, 119, 120, 468, 470, 0, 0, 121, 0, 334,
	122, 485, 486, 487, 0, 453, 0, 335, 123, 336,
	124, 125, 0, 0, 473, 337, 126, 338, 0, 127,
	0, 0, 128, 0, 129, 130, 131, 132, 133, 339,
	134, 135, 138, 136, 417, 137, 442, 469, 139, 488,
	140, 141, 0, 0, 0, 0, 0, 142, 218, 340,
	143, 341, 463, 144, 145, 0, 464, 146, 221, 0,
	147, 148, 149, 489, 150, 151, 0, 153, 154, 152,
	155, 0, 156, 342, 157, 158, 431, 159, 0, 246,
	160, 161, 0, 224, 162, 163, 459, 164, 165, 343,
	166, 490, 167, 0, 168, 169, 171, 491, 170, 465,
	0, 0, 172, 173, 0, 228, 492, 493, 0, 0,
	174, 466, 467, 440, 175, 176, 1702, 178, 0, 0,
	179, 180, 181, 460, 0, 182, 183, 184, 233, 494,
	0, 185, 0, 0, 0, 0, 186, 187, 188, 189,
	418, 0, 446, 435, 436, 433, 434, 422, 0, 0,
	414, 415, 0, 0, 89, 90, 416, 91, 0, 423,
	0, 0, 428, 0, 0, 0, 92, 93, 190, 475,
	476, 94, 477, 478, 0, 95, 195, 196, 96, 443,
	461, 479, 480, 199, 0, 471, 0, 454, 0, 97,
	98, 99, 0, 100, 0, 101, 0, 332, 102, 103,
	0, 455, 457, 0, 456, 458, 104, 105, 106, 107,
	481, 108, 482, 483, 0, 0, 109, 0, 0, 0,
	474, 111, 0, 112, 0, 0, 0, 427, 113, 462,
	441, 0, 0, 114, 115, 484, 0, 116, 0, 117,
	0, 0, 333, 0, 118, 472, 0, 208, 0, 119,
	120, 468, 470, 0, 0, 121, 0, 334, 122, 485,
	486, 487, 0, 453, 0, 335, 123, 336, 124, 125,
	0, 0, 473, 337, 126, 338, 0, 127, 0, 0,
	128, 0, 129, 130, 131, 132, 133, 339, 134, 135,
	138, 136, 417, 137, 442, 469, 139, 488, 140, 141,
	0, 0, 0, 0, 0, 142, 218, 340, 143, 341,
	463, 144, 145, 0, 464, 146, 221, 0, 147, 148,
	149, 489, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 342, 157, 158, 431, 159, 0, 246, 160, 161,
	0, 224, 162, 163, 459, 164, 165, 343, 166, 490,
	167, 0, 168, 169, 171, 491, 170, 465, 0, 0,
	172, 173, 0, 228, 492, 493, 0, 0, 174, 466,
	467, 440, 175, 176, 177, 178, 0, 0, 179, 180,
	181, 460, 0, 182, 183, 184, 233, 494, 0, 185,
	0, 0, 0, 0, 186, 187, 188, 189, 418, 0,
	446, 435, 436, 433, 434, 422, 0, 0, 414, 415,
	0, 0, 89, 90, 416, 91, 0, 423, 0, 0,
	428, 0, 0, 0, 92, 93, 190, 475, 476, 94,
	477, 478, 0, 95, 195, 196, 96, 443, 461, 479,
	480, 199, 0, 471, 0, 454, 0, 97, 98, 99,
	0, 100, 0, 101, 0, 332, 102, 103, 0, 455,
	457, 0, 456, 458, 104, 105, 106, 107, 481, 108,
	482, 483, 0, 0, 109, 0, 0, 0, 474, 111,
	0, 112, 0, 0, 0, 427, 113, 462, 441, 0,
	0, 114, 115, 484, 0, 116, 0, 117, 0, 0,
	333, 0, 118, 472, 0, 208, 0, 119, 120, 468,
	470, 0, 0, 121, 0, 334, 122, 485, 486, 487,
	0, 453, 0, 335, 123, 336, 124, 125, 0, 0,
	473, 337, 126, 338, 0, 127, 0, 0, 128, 0,
	129, 130, 131, 132, 133, 339, 134, 135, 138, 136,
	0, 137, 442, 469, 139, 488, 140, 141, 0, 0,
	0, 0, 0, 142, 218, 340, 143, 341, 463, 144,
	145, 0, 464, 146, 221, 0, 147, 148, 149, 489,
	150, 151, 0, 153, 154, 152, 155, 0, 156, 342,
	157, 158, 1056, 159, 0, 246, 160, 161, 0, 224,
	162, 163, 459, 164, 165, 343, 166, 490, 167, 0,
	168, 169, 171, 491, 170, 465, 0, 0, 172, 173,
	0, 228, 492, 493, 0, 0, 174, 466, 467, 440,
	175, 176, 177, 178, 0, 0, 179, 180, 181, 460,
	0, 182, 183, 184, 233, 494, 0, 185, 0, 0,
	0, 0, 186, 187, 188, 189, 446, 435, 436, 433,
	434, 422, 0, 0, 0, 0, 1052, 1053, 89, 90,
	0, 91, 1054, 0, 0, 1055, 428, 0, 0, 0,
	92, 93, 0, 475, 476, 94, 477, 478, 0, 95,
	195, 196, 96, 443, 461, 479, 480, 199, 0, 471,
	0, 454, 0, 97, 98, 99, 0, 100, 0, 101,
	0, 332, 102, 1703, 0, 455, 457, 0, 456, 458,
	104, 105, 106, 107, 481, 108, 482, 483, 0, 0,
	109, 0, 0, 0, 474, 111, 0, 112, 0, 0,
	0, 427, 113, 462, 441, 0, 0, 114, 115, 484,
	0, 116, 0, 117, 0, 0, 333, 0, 118, 472,
	0, 208, 0, 119, 120, 468, 470, 0, 0, 121,
	0, 334, 122, 485, 486, 487, 0, 453, 0, 0,
	123, 336, 124, 125, 0, 0, 473, 337, 126, 0,
	0, 127, 0, 0, 128, 0, 129, 130, 131, 132,
	133, 339, 134, 135, 138, 136, 417, 137, 442, 469,
	139, 488, 140, 141, 0, 0, 0, 0, 0, 142,
	218, 340, 143, 341, 463, 144, 145, 0, 464, 146,
	221, 0, 147, 148, 149, 489, 150, 151, 0, 153,
	154, 152, 155, 0, 156, 342, 157, 158, 431, 159,
	0, 246, 160, 161, 0, 224, 162, 163, 459, 164,
	165, 0, 166, 490, 167, 0, 168, 169, 171, 491,
	170, 465, 0, 0, 172, 173, 0, 228, 492, 493,
	0, 0, 174, 466, 467, 440, 175, 176, 1702, 178,
	0, 0, 179, 180, 181, 460, 0, 182, 183, 184,
	233, 494, 0, 185, 0, 0, 0, 0, 186, 187,
	188, 189, 446, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 414, 415, 89, 90, 0, 91, 416, 0,
	0, 423, 0, 0, 0, 0, 92, 93, 190, 191,
	192, 94, 193, 194, 0, 95, 195, 196, 96, 0,
	461, 197, 198, 199, 0, 471, 0, 454, 0, 97,
	98, 99, 0, 100, 0, 101, 0, 332, 102, 103,
	0, 455, 457, 0, 456, 458, 104, 105, 106, 107,
	201, 108, 202, 203, 0, 0, 109, 0, 0, 0,
	110, 111, 0, 112, 0, 0, 0, 204, 113, 462,
	0, 0, 0, 114, 115, 206, 0, 116, 0, 117,
	0, 0, 333, 0, 118, 472, 0, 208, 0, 119,
	120, 468, 470, 0, 0, 121, 0, 334, 122, 211,
	212, 213, 0, 214, 0, 335, 123, 336, 124, 125,
	0, 0, 473, 337, 126, 338, 0, 127, 0, 0,
	128, 0, 129, 130, 131, 132, 133, 339, 134, 135,
	138, 136, 0, 137, 0, 469, 139, 217, 140, 141,
	0, 0, 0, 0, 0, 142, 218, 340, 143, 341,
	463, 144, 145, 0, 464, 146, 221, 0, 147, 148,
	149, 222, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 342, 157, 158, 223, 159, 0, 246, 160, 161,
	0, 224, 162, 163, 459, 164, 165, 343, 166, 225,
	167, 0, 168, 169, 171, 226, 170, 465, 0, 0,
	172, 173, 0, 228, 229, 230, 0, 0, 174, 466,
	467, 0, 175, 176, 177, 178, 0, 0, 179, 180,
	181, 460, 0, 182, 183, 184, 233, 234, 0, 185,
	0, 0, 0, 0, 186, 187, 188, 189, 326, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	89, 90, 0, 91, 0, 0, 0, 1482, 0, 0,
	0, 0, 92, 93, 190, 191, 192, 94, 193, 194,
	0, 95, 195, 196, 96, 0, 0, 197, 198, 199,
	0, 200, 0, 331, 0, 97, 98, 99, 0, 100,
	0, 101, 0, 332, 102, 103, 0, 0, 0, 0,
	0, 0, 104, 105, 106, 107, 201, 108, 202, 203,
	0, 0, 109, 0, 0, 0, 110, 111, 0, 112,
	0, 0, 0, 204, 113, 205, 0, 0, 0, 114,
	115, 206, 0, 116, 0, 117, 0, 0, 333, 0,
	118, 207, 0, 208, 0, 119, 120, 209, 210, 0,
	0, 121, 0, 334, 122, 211, 212, 213, 0, 214,
	0, 335, 123, 336, 124, 125, 0, 0, 215, 337,
	126, 338, 0, 127, 0, 0, 128, 0, 129, 130,
	131, 132, 133, 339, 134, 135, 138, 136, 0, 137,
	0, 216, 139, 217, 140, 141, 0, 0, 0, 0,
	0, 142, 218, 340, 143, 341, 219, 144, 145, 0,
	220, 146, 221, 0, 147, 148, 149, 222, 150, 151,
	0, 153, 154, 152, 155, 0, 156, 342, 157, 158,
	223, 159, 0, 246, 160, 161, 49, 224, 162, 163,
	0, 164, 165, 343, 166, 225, 167, 0, 168, 169,
	171, 226, 170, 227, 0, 51, 172, 173, 0, 228,
	229, 230, 0, 0, 174, 231, 232, 0, 175, 176,
	177, 178, 0, 0, 179, 180, 181, 0, 0, 182,
	183, 184, 330, 234, 0, 185, 0, 0, 0, 47,
	186, 187, 188, 189, 0, 48, 326, 577, 0, 578,
	573, 568, 0, 0, 0, 0, 0, 0, 89, 90,
	0, 91, 0, 46, 0, 0, 0, 0, 0, 0,
	92, 93, 190, 191, 192, 94, 193, 194, 0, 95,
	195, 196, 96, 0, 0, 197, 198, 199, 0, 200,
	0, 331, 0, 97, 98, 99, 0, 100, 0, 101,
	0, 332, 102, 103, 0, 0, 0, 0, 0, 0,
	104, 105, 106, 107, 201, 108, 202, 203, 581, 0,
	109, 0, 0, 0, 110, 111, 0, 112, 0, 0,
	0, 204, 113, 205, 570, 0, 0, 114, 115, 206,
	0, 116, 0, 117, 0, 0, 333, 0, 118, 207,
	0, 208, 0, 119, 120, 209, 210, 0, 0, 121,
	0, 334, 122, 211, 212, 213, 0, 214, 0, 335,
	123, 336, 124, 125, 0, 0, 215, 337, 126, 338,
	0, 127, 0, 0, 128, 0, 129, 130, 131, 132,
	133, 339, 134, 135, 138, 136, 0, 137, 0, 216,
	139, 217, 140, 141, 0, 571, 0, 0, 0, 142,
	218, 340, 143, 341, 219, 144, 145, 0, 220, 146,
	221, 0, 147, 148, 149, 222, 150, 151, 0, 153,
	154, 152, 155, 0, 156, 342, 157, 158, 223, 159,
	0, 246, 160, 161, 0, 224, 162, 163, 0, 164,
	165, 343, 166, 225, 167, 0, 168, 169, 171, 226,
	170, 227, 0, 0, 172, 173, 0, 228, 229, 230,
	0, 0, 174, 231, 232, 569, 175, 176, 177, 178,
	0, 0, 179, 180, 181, 0, 0, 182, 183, 184,
	233, 234, 0, 185, 0, 0, 0, 0, 186, 187,
	188, 189, 326, 577, 0, 578, 573, 568, 0, 0,
	0, 0, 579, 574, 89, 90, 0, 91, 0, 0,
	0, 0, 0, 0, 0, 0, 92, 93, 190, 191,
	192, 94, 193, 194, 0, 95, 195, 196, 96, 0,
	0, 197, 198, 199, 0, 200, 0, 331, 0, 97,
	98, 99, 0, 100, 0, 101, 0, 332, 102, 103,
	0, 0, 0, 0, 0, 0, 104, 105, 106, 107,
	201, 108, 202, 203, 564, 0, 109, 0, 0, 0,
	110, 111, 0, 112, 0, 0, 0, 204, 113, 205,
	570, 0, 0, 114, 115, 206, 0, 116, 0, 117,
	0, 0, 333, 0, 118, 207, 0, 208, 0, 119,
	120, 209, 210, 0, 0, 121, 0, 334, 122, 211,
	212, 213, 0, 214, 0, 335, 123, 336, 124, 125,
	0, 0, 215, 337, 126, 338, 0, 127, 0, 0,
	128, 0, 129, 130, 131, 132, 133, 339, 134, 135,
	138, 136, 0, 137, 0, 216, 139, 217, 140, 141,
	0, 571, 0, 0, 0, 142, 218, 340, 143, 341,
	219, 144, 145, 0, 220, 146, 221, 0, 147, 148,
	149, 222, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 342, 157, 158, 223, 159, 0, 246, 160, 161,
	0, 224, 162, 163, 0, 164, 165, 343, 166, 225,
	167, 0, 168, 169, 171, 226, 170, 227, 0, 0,
	172, 173, 0, 228, 229, 230, 0, 0, 174, 231,
	232, 569, 175, 176, 177, 178, 0, 0, 179, 180,
	181, 0, 0, 182, 183, 184, 233, 234, 0, 185,
	0, 0, 0, 0, 186, 187, 188, 189, 326, 577,
	0, 578, 573, 568, 0, 0, 0, 0, 579, 574,
	89, 90, 0, 91, 0, 0, 0, 0, 0, 0,
	0, 0, 92, 93, 190, 191, 192, 94, 193, 194,
	0, 95, 195, 196, 96, 0, 0, 197, 198, 199,
	0, 200, 0, 331, 0, 97, 98, 99, 0, 100,
	0, 101, 0, 332, 102, 103, 0, 0, 0, 0,
	0, 0, 104, 105, 106, 107, 201, 108, 202, 203,
	0, 0, 109, 0, 0, 0, 110, 111, 0, 112,
	0, 0, 0, 204, 113, 205, 570, 0, 0, 114,
	115, 206, 0, 116, 0, 117, 0, 0, 333, 0,
	118, 207, 0, 208, 0, 119, 120, 209, 210, 0,
	0, 121, 0, 334, 122, 211, 212, 213, 0, 214,
	0, 335, 123, 336, 124, 125, 0, 0, 215, 337,
	126, 338, 0, 127, 0, 0, 128, 0, 129, 130,
	131, 132, 133, 339, 134, 135, 138, 136, 0, 137,
	0, 216, 139, 217, 140, 141, 0, 571, 0, 0,
	0, 142, 218, 340, 143, 341, 219, 144, 145, 0,
	220, 146, 221, 0, 147, 148, 149, 222, 150, 151,
	0, 153, 154, 152, 155, 0, 156, 342, 157, 158,
	223, 159, 0, 246, 160, 161, 0, 224, 162, 163,
	0, 164, 165, 343, 166, 225, 167, 0, 168, 169,
	171, 226, 170, 227, 0, 0, 172, 173, 0, 228,
	229, 230, 0, 0, 174, 231, 232, 569, 175, 176,
	177, 178, 0, 0, 179, 180, 181, 0, 0, 182,
	183, 184, 233, 234, 86, 185, 0, 0, 0, 0,
	186, 187, 188, 189, 0, 0, 89, 90, 0, 91,
	0, 0, 0, 0, 579, 574, 0, 0, 92, 93,
	190, 191, 192, 94, 193, 194, 0, 95, 195, 196,
	96, 0, 0, 197, 198, 199, 0, 200, 0, 0,
	0, 97, 98, 99, 0, 100, 0, 101, 0, 0,
	102, 103, 0, 0, 0, 0, 0, 0, 104, 105,
	106, 107, 201, 108, 202, 203, 0, 0, 109, 0,
	0, 0, 110, 111, 0, 112, 0, 0, 0, 204,
	113, 205, 0, 0, 0, 114, 115, 206, 0, 116,
	0, 117, 0, 0, 0, 0, 118, 207, 0, 208,
	0, 119, 120, 209, 210, 0, 0, 121, 0, 0,
	122, 211, 212, 213, 0, 214, 0, 0, 123, 0,
	124, 125, 0, 0, 215, 0, 126, 0, 0, 127,
	0, 0, 128, 0, 129, 130, 131, 132, 133, 0,
	134, 135, 138, 136, 0, 137, 0, 216, 139, 217,
	140, 141, 0, 0, 299, 0, 0, 142, 218, 0,
	143, 0, 219, 144, 145, 0, 220, 146, 221, 0,
	147, 148, 149, 222, 150, 151, 0, 153, 154, 152,
	155, 0, 156, 0, 157, 158, 223, 159, 0, 246,
	160, 161, 49, 224, 162, 163, 0, 164, 165, 0,
	166, 225, 167, 0, 168, 169, 171, 226, 170, 227,
	0, 51, 172, 173, 0, 228, 229, 230, 0, 0,
	174, 231, 232, 0, 175, 176, 177, 178, 0, 0,
	179, 180, 181, 0, 0, 182, 183, 184, 330, 234,
	0, 185, 0, 0, 0, 47, 186, 187, 188, 189,
	86, 48, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 89, 90, 0, 91, 0, 0, 0, 920,
	0, 0, 0, 0, 92, 93, 190, 191, 192, 94,
	193, 194, 0, 95, 195, 196, 96, 0, 0, 197,
	198, 199, 0, 200, 0, 0, 0, 97, 98, 99,
	0, 100, 0, 101, 0, 0, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 106, 107, 201, 108,
	202, 203, 0, 0, 109, 0, 0, 0, 110, 111,
	0, 112, 0, 0, 0, 204, 113, 205, 0, 0,
	0, 114, 115, 206, 0, 116, 0, 117, 0, 0,
	0, 0, 118, 207, 0, 208, 0, 119, 120, 209,
	210, 0, 0, 121, 0, 0, 122, 211, 212, 213,
	0, 214, 0, 0, 123, 0, 124, 125, 0, 0,
	215, 0, 126, 0, 0, 127, 0, 0, 128, 0,
	129, 130, 131, 132, 133, 0, 134, 135, 138, 136,
	0, 137, 0, 216, 139, 217, 140, 141, 0, 0,
	0, 0, 0, 142, 218, 0, 143, 0, 219, 144,
	145, 0, 220, 146, 221, 0, 147, 148, 149, 222,
	150, 151, 0, 153, 154, 152, 155, 0, 156, 0,
	157, 158, 223, 159, 0, 246, 160, 161, 49, 224,
	162, 163, 0, 164, 165, 0, 166, 225, 167, 0,
	168, 169, 171, 226, 170, 227, 0, 51, 172, 173,
	0, 228, 229, 230, 0, 0, 174, 231, 232, 0,
	175, 176, 177, 178, 0, 0, 179, 180, 181, 0,
	0, 182, 183, 184, 330, 234, 0, 185, 0, 0,
	0, 47, 186, 187, 188, 189, 86, 48, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 89, 90,
	0, 91, 0, 0, 0, 46, 0, 1169, 0, 0,
	92, 93, 190, 191, 192, 94, 193, 194, 0, 95,
	195, 196, 96, 0, 0, 197, 198, 199, 0, 200,
	0, 0, 0, 97, 98, 99, 0, 100, 0, 101,
	0, 0, 102, 103, 0, 0, 0, 0, 0, 0,
	104, 105, 106, 107, 201, 108, 202, 203, 0, 0,
	109, 0, 0, 0, 110, 111, 0, 112, 0, 0,
	0, 204, 113, 205, 0, 0, 0, 114, 115, 206,
	0, 116, 0, 117, 0, 0, 0, 0, 118, 207,
	0, 208, 0, 119, 120, 209, 210, 0, 0, 121,
	0, 0, 122, 211, 212, 213, 0, 214, 0, 0,
	123, 0, 124, 125, 0, 0, 215, 0, 126, 0,
	0, 127, 0, 0, 128, 0, 129, 130, 131, 132,
	133, 0, 134, 135, 138, 136, 0, 137, 0, 216,
	139, 217, 140, 141, 0, 0, 0, 0, 0, 142,
	218, 0, 143, 0, 219, 144, 145, 0, 220, 146,
	221, 0, 147, 148, 149, 222, 150, 151, 0, 153,
	154, 152, 155, 0, 156, 0, 157, 158, 223, 159,
	0, 246, 160, 161, 0, 224, 162, 163, 0, 164,
	165, 0, 166, 225, 167, 0, 168, 169, 171, 226,
	170, 227, 0, 0, 172, 173, 0, 228, 229, 230,
	0, 0, 174, 231, 232, 0, 175, 176, 177, 178,
	0, 0, 179, 180, 181, 0, 0, 182, 183, 184,
	233, 234, 0, 185, 0, 0, 0, 0, 186, 187,
	188, 189, 86, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 89, 90, 0, 91, 0, 0,
	0, 0, 404, 0, 0, 0, 92, 93, 190, 191,
	192, 94, 193, 194, 0, 95, 195, 196, 96, 0,
	0, 197, 198, 199, 0, 200, 0, 0, 0, 97,
	98, 99, 0, 100, 0, 101, 0, 0, 102, 103,
	0, 0, 0, 0, 0, 0, 104, 105, 106, 107,
	201, 108, 202, 203, 0, 0, 109, 0, 0, 0,
	110, 111, 0, 112, 0, 0, 0, 204, 113, 205,
	0, 0, 0, 114, 115, 206, 0, 116, 0, 117,
	0, 0, 0, 0, 118, 207, 0, 208, 0, 119,
	120, 209, 210, 0, 0, 121, 0, 0, 122, 211,
	212, 213, 0, 214, 0, 0, 123, 0, 124, 125,
	0, 0, 215, 0, 126, 0, 0, 127, 0, 0,
	128, 0, 129, 130, 131, 132, 133, 0, 134, 135,
	138, 136, 0, 137, 0, 216, 139, 217, 140, 141,
	0, 0, 299, 0, 0, 142, 218, 0, 143, 0,
	219, 144, 145, 0, 220, 146, 221, 0, 147, 148,
	149, 222, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 0, 157, 158, 223, 159, 0, 246, 160, 161,
	0, 224, 162, 163, 0, 164, 165, 0, 166, 225,
	167, 0, 168, 169, 171, 226, 170, 227, 0, 0,
	172, 173, 0, 228, 229, 230, 0, 0, 174, 231,
	232, 0, 175, 176, 177, 178, 0, 0, 179, 180,
	181, 0, 0, 182, 183, 184, 233, 234, 0, 185,
	0, 0, 0, 0, 186, 187, 188, 189, 86, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	89, 90, 0, 91, 0, 0, 0, 920, 0, 0,
	0, 0, 92, 93, 190, 191, 192, 94, 193, 194,
	0, 95, 195, 196, 96, 0, 0, 197, 198, 199,
	0, 200, 0, 0, 0, 97, 98, 99, 0, 100,
	0, 101, 0, 0, 102, 103, 0, 0, 0, 0,
	0, 0, 104, 105, 106, 107, 201, 108, 202, 203,
	0, 0, 109, 0, 0, 0, 110, 111, 0, 112,
	0, 0, 0, 204, 113, 205, 0, 0, 0, 114,
	115, 206, 0, 116, 0, 117, 0, 0, 0, 0,
	118, 207, 0, 208, 0, 119, 120, 209, 210, 0,
	0, 121, 0, 0, 122, 211, 212, 213, 0, 214,
	0, 0, 123, 0, 124, 125, 0, 0, 215, 0,
	126, 0, 0, 127, 0, 0, 128, 0, 129, 130,
	131, 132, 133, 0, 134, 135, 138, 136, 0, 137,
	0, 216, 139, 217, 140, 141, 0, 0, 0, 0,
	0, 142, 218, 0, 143, 0, 219, 144, 145, 0,
	220, 146, 221, 0, 147, 148, 149, 222, 150, 151,
	0, 153, 154, 152, 155, 0, 156, 0, 157, 158,
	223, 159, 0, 246, 160, 161, 0, 224, 162, 163,
	0, 164, 165, 0, 166, 225, 167, 0, 168, 169,
	171, 226, 170, 227, 0, 0, 172, 173, 0, 228,
	229, 230, 0, 0, 174, 231, 232, 0, 175, 176,
	177, 178, 0, 0, 179, 180, 181, 0, 0, 182,
	183, 184, 233, 234, 0, 185, 0, 0, 0, 0,
	186, 187, 188, 189, 86, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 89, 90, 0, 91,
	0, 0, 0, 853, 0, 0, 0, 0, 92, 93,
	190, 191, 192, 94, 193, 194, 0, 95, 195, 196,
	96, 0, 0, 197, 198, 199, 0, 200, 0, 0,
	0, 97, 98, 99, 0, 100, 0, 101, 0, 0,
	102, 103, 0, 0, 0, 0, 0, 0, 104, 105,
	106, 107, 201, 108, 202, 203, 0, 0, 109, 0,
	0, 0, 110, 111, 0, 112, 0, 0, 0, 204,
	113, 205, 0, 0, 0, 114, 115, 206, 0, 116,
	0, 117, 0, 0, 0, 0, 118, 207, 0, 208,
	0, 119, 120, 209, 210, 0, 0, 121, 0, 0,
	122, 211, 212, 213, 0, 214, 0, 0, 123, 0,
	124, 125, 0, 0, 215, 0, 126, 0, 0, 127,
	0, 0, 128, 0, 129, 130, 131, 132, 133, 0,
	134, 135, 138, 136, 0, 137, 0, 216, 139, 217,
	140, 141, 0, 0, 0, 0, 0, 142, 218, 0,
	143, 0, 219, 144, 145, 0, 220, 146, 221, 0,
	147, 148, 149, 222, 150, 151, 0, 153, 154, 152,
	155, 0, 156, 0, 157, 158, 223, 159, 0, 246,
	160, 161, 0, 224, 162, 163, 0, 164, 165, 0,
	166, 225, 167, 0, 168, 169, 171, 226, 170, 227,
	0, 0, 172, 173, 0, 228, 229, 230, 0, 0,
	174, 231, 232, 0, 175, 176, 177, 178, 0, 0,
	179, 180, 181, 0, 0, 182, 183, 184, 233, 234,
	0, 185, 0, 0, 0, 0, 186, 187, 188, 189,
	86, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 89, 90, 0, 91, 0, 0, 0, 1388,
	0, 0, 0, 0, 92, 93, 190, 191, 192, 94,
	193, 194, 0, 95, 195, 196, 96, 0, 0, 197,
	198, 199, 0, 200, 0, 0, 0, 97, 98, 99,
	0, 100, 0, 101, 0, 0, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 106, 107, 201, 108,
	202, 203, 0, 0, 109, 0, 0, 0, 110, 111,
	0, 112, 0, 0, 0, 204, 113, 205, 0, 0,
	0, 114, 115, 206, 0, 116, 0, 117, 0, 0,
	0, 0, 118, 207, 0, 208, 0, 119, 120, 209,
	210, 0, 0, 121, 0, 0, 122, 211, 212, 213,
	0, 214, 0, 0, 123, 0, 124, 125, 0, 0,
	215, 0, 126, 0, 0, 127, 0, 0, 128, 0,
	129, 130, 131, 132, 133, 0, 134, 135, 138, 136,
	0, 137, 0, 216, 139, 217, 140, 141, 0, 0,
	0, 0, 0, 142, 218, 0, 143, 0, 219, 144,
	145, 0, 220, 146, 221, 0, 147, 148, 149, 222,
	150, 151, 0, 153, 154, 152, 155, 0, 156, 0,
	157, 158, 223, 159, 0, 246, 160, 161, 0, 224,
	162, 163, 0, 164, 165, 0, 166, 225, 167, 0,
	168, 169, 171, 226, 170, 227, 0, 0, 172, 173,
	0, 228, 229, 230, 0, 0, 174, 231, 232, 0,
	175, 176, 177, 178, 0, 0, 179, 180, 181, 0,
	0, 182, 183, 184, 233, 234, 0, 185, 0, 0,
	0, 0, 186, 187, 188, 189, 86, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 89, 90,
	0, 91, 0, 0, 0, 505, 0, 0, 0, 0,
	92, 93, 190, 191, 192, 94, 193, 194, 0, 95,
	195, 196, 96, 0, 0, 197, 198, 199, 0, 200,
	0, 0, 0, 97, 98, 99, 0, 100, 0, 101,
	0, 0, 102, 103, 0, 0, 0, 0, 0, 0,
	104, 105, 549, 107, 201, 108, 202, 203, 0, 0,
	109, 0, 0, 0, 110, 111, 0, 112, 0, 0,
	0, 204, 113, 205, 0, 0, 0, 114, 115, 206,
	0, 116, 0, 117, 0, 0, 0, 0, 118, 207,
	0, 208, 0, 119, 120, 209, 210, 0, 0, 121,
	0, 0, 122, 211, 212, 213, 0, 214, 0, 0,
	123, 0, 124, 125, 0, 0, 215, 0, 126, 0,
	0, 127, 0, 0, 128, 0, 129, 130, 131, 132,
	133, 0, 134, 135, 138, 136, 0, 137, 0, 216,
	139, 217, 140, 141, 0, 0, 0, 0, 0, 142,
	218, 0, 143, 0, 219, 144, 145, 0, 220, 146,
	221, 0, 147, 148, 149, 222, 150, 151, 0, 153,
	154, 152, 155, 0, 156, 0, 157, 158, 223, 159,
	0, 246, 160, 161, 0, 224, 162, 163, 0, 164,
	165, 0, 166, 225, 167, 0, 168, 169, 171, 226,
	170, 227, 0, 548, 172, 173, 0, 228, 229, 230,
	0, 0, 174, 231, 232, 0, 175, 176, 177, 178,
	0, 0, 179, 180, 181, 0, 0, 182, 183, 184,
	233, 234, 86, 185, 0, 0, 0, 0, 186, 187,
	188, 189, 0, 0, 89, 90, 0, 91, 0, 0,
	0, 0, 0, 0, 552, 0, 92, 93, 190, 191,
	192, 94, 193, 194, 0, 95, 195, 196, 96, 0,
	0, 197, 198, 199, 0, 200, 0, 0, 0, 97,
	98, 99, 0, 100, 0, 101, 0, 0, 102, 103,
	0, 0, 0, 0, 0, 0, 104, 105, 106, 107,
	201, 108, 202, 203, 0, 0, 109, 0, 0, 0,
	110, 111, 0, 112, 0, 0, 0, 204, 113, 205,
	0, 0, 0, 114, 115, 206, 0, 116, 0, 117,
	0, 0, 0, 0, 118, 207, 0, 208, 0, 119,
	120, 209, 210, 0, 0, 121, 0, 0, 122, 211,
	212, 213, 0, 214, 0, 0, 123, 0, 124, 125,
	0, 0, 215, 0, 126, 0, 0, 127, 0, 0,
	128, 0, 129, 130, 131, 132, 133, 0, 134, 135,
	138, 136, 0, 137, 0, 216, 139, 217, 140, 141,
	0, 0, 0, 0, 0, 142, 218, 0, 143, 0,
	219, 144, 145, 0, 220, 146, 221, 0, 147, 148,
	149, 222, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 0, 157, 158, 223, 159, 0, 246, 160, 161,
	0, 224, 162, 163, 0, 164, 165, 0, 166, 225,
	167, 0, 168, 169, 171, 226, 170, 227, 0, 0,
	172, 173, 0, 228, 229, 230, 0, 0, 174, 231,
	232, 0, 175, 176, 177, 178, 0, 0, 179, 180,
	181, 0, 0, 182, 183, 184, 233, 234, 326, 185,
	0, 0, 0, 0, 186, 187, 188, 189, 0, 0,
	89, 90, 0, 91, 0, 0, 0, 0, 0, 0,
	552, 0, 92, 93, 190, 191, 192, 94, 193, 194,
	0, 95, 195, 196, 96, 0, 0, 197, 198, 199,
	0, 200, 0, 331, 0, 97, 98, 99, 0, 100,
	0, 101, 0, 332, 102, 103, 0, 0, 0, 0,
	0, 0, 104, 105, 106, 107, 201, 108, 202, 203,
	0, 0, 109, 0, 0, 0, 110, 111, 0, 112,
	0, 0, 0, 204, 113, 205, 0, 0, 0, 114,
	115, 206, 0, 116, 0, 117, 0, 0, 333, 0,
	118, 207, 0, 208, 0, 119, 120, 209, 210, 0,
	0, 121, 0, 334, 122, 211, 212, 213, 0, 214,
	0, 335, 123, 336, 124, 125, 0, 0, 215, 337,
	126, 338, 0, 127, 0, 0, 128, 0, 129, 130,
	131, 132, 133, 339, 134, 135, 138, 136, 0, 137,
	0, 216, 139, 217, 140, 141, 0, 0, 0, 0,
	0, 142, 218, 340, 143, 341, 219, 144, 145, 0,
	220, 146, 221, 0, 147, 148, 149, 222, 150, 151,
	0, 153, 154, 152, 155, 0, 156, 342, 157, 158,
	223, 159, 0, 246, 160, 161, 0, 224, 162, 163,
	0, 164, 165, 343, 166, 225, 167, 0, 168, 169,
	171, 226, 170, 227, 0, 0, 172, 173, 0, 228,
	229, 230, 0, 0, 174, 231, 232, 0, 175, 176,
	177, 178, 0, 0, 179, 180, 181, 0, 0, 182,
	183, 184, 233, 234, 86, 185, 0, 0, 0, 0,
	186, 187, 188, 189, 0, 0, 89, 90, 0, 91,
	0, 0, 0, 0, 0, 0, 0, 0, 92, 93,
	190, 191, 192, 94, 193, 194, 0, 95, 195, 196,
	96, 0, 0, 197, 198, 199, 826, 200, 0, 0,
	0, 97, 98, 99, 0, 100, 824, 101, 0, 0,
	102, 103, 0, 0, 0, 0, 0, 0, 104, 105,
	106, 107, 201, 108, 202, 203, 0, 0, 109, 0,
	0, 0, 110, 111, 0, 112, 0, 0, 0, 204,
	113, 205, 0, 897, 0, 114, 115, 206, 0, 116,
	0, 117, 829, 0, 0, 0, 118, 207, 0, 208,
	0, 119, 120, 209, 210, 0, 895, 121, 0, 0,
	122, 211, 212, 213, 0, 214, 0, 0, 123, 0,
	124, 125, 0, 0, 215, 0, 126, 0, 0, 127,
	0, 0, 128, 0, 129, 130, 131, 132, 133, 0,
	134, 135, 138, 136, 0, 137, 0, 216, 139, 217,
	140, 141, 0, 0, 0, 0, 0, 142, 218, 0,
	143, 0, 219, 144, 145, 0, 220, 146, 221, 828,
	147, 148, 149, 222, 150, 151, 0, 153, 154, 152,
	155, 0, 156, 0, 157, 158, 223, 159, 0, 246,
	160, 161, 0, 224, 162, 163, 0, 164, 165, 0,
	166, 225, 167, 0, 168, 169, 171, 226, 170, 227,
	0, 0, 172, 173, 0, 228, 229, 230, 0, 0,
	174, 231, 232, 0, 175, 176, 177, 178, 0, 896,
	179, 180, 181, 0, 0, 182, 183, 184, 233, 234,
	86, 185, 0, 0, 0, 0, 186, 187, 188, 189,
	0, 0, 89, 90, 0, 91, 0, 0, 0, 0,
	0, 0, 0, 0, 92, 93, 190, 191, 192, 94,
	193, 194, 0, 95, 195, 196, 96, 0, 0, 197,
	198, 199, 826, 200, 0, 0, 821, 97, 98, 99,
	0, 100, 824, 101, 0, 0, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 106, 107, 201, 108,
	202, 203, 0, 0, 109, 0, 0, 0, 110, 111,
	0, 112, 0, 0, 0, 204, 113, 205, 0, 0,
	0, 114, 115, 206, 0, 116, 0, 117, 829, 0,
	0, 0, 118, 207, 0, 208, 0, 119, 120, 820,
	210, 0, 0, 121, 0, 0, 122, 211, 212, 213,
	0, 214, 0, 0, 123, 0, 124, 125, 0, 0,
	215, 0, 126, 0, 0, 127, 0, 0, 128, 0,
	129, 130, 131, 132, 133, 0, 134, 135, 138, 136,
	0, 137, 0, 216, 139, 217, 140, 141, 0, 0,
	0, 0, 0, 142, 218, 0, 143, 0, 219, 144,
	145, 0, 220, 146, 221, 828, 147, 148, 149, 222,
	150, 151, 0, 153, 154, 152, 155, 0, 156, 0,
	157, 158, 223, 159, 0, 246, 160, 161, 0, 224,
	162, 163, 0, 164, 165, 0, 166, 225, 167, 0,
	168, 169, 171, 226, 170, 227, 0, 0, 172, 173,
	0, 228, 229, 230, 0, 0, 174, 231, 232, 0,
	175, 176, 177, 178, 0, 827, 179, 180, 181, 0,
	0, 182, 183, 184, 233, 234, 86, 185, 0, 0,
	0, 0, 186, 187, 188, 189, 0, 0, 89, 90,
	0, 91, 0, 0, 0, 0, 0, 1169, 0, 0,
	92, 93, 190, 191, 192, 94, 193, 194, 0, 95,
	195, 196, 96, 0, 0, 197, 198, 199, 0, 200,
	0, 0, 0, 97, 98, 99, 0, 100, 0, 101,
	0, 0, 102, 103, 0, 0, 0, 0, 0, 0,
	104, 105, 106, 107, 201, 108, 202, 203, 0, 0,
	109, 0, 0, 0, 110, 111, 0, 112, 0, 0,
	0, 204, 113, 205, 0, 0, 0, 114, 115, 206,
	0, 116, 0, 117, 0, 0, 0, 0, 118, 207,
	0, 208, 0, 119, 120, 209, 210, 0, 0, 121,
	0, 0, 122, 211, 212, 213, 0, 214, 0, 0,
	123, 0, 124, 125, 0, 0, 215, 0, 126, 0,
	0, 127, 0, 0, 128, 0, 129, 130, 131, 132,
	133, 0, 134, 135, 138, 136, 0, 137, 0, 216,
	139, 217, 140, 141, 0, 0, 0, 0, 0, 142,
	218, 0, 143, 0, 219, 144, 145, 0, 220, 146,
	221, 0, 147, 148, 149, 222, 150, 151, 0, 153,
	154, 152, 155, 0, 156, 0, 157, 158, 223, 159,
	0, 246, 160, 161, 0, 224, 162, 163, 0, 164,
	165, 0, 166, 225, 167, 0, 168, 169, 171, 226,
	170, 227, 0, 0, 172, 173, 0, 228, 229, 230,
	0, 0, 174, 231, 232, 0, 175, 176, 177, 178,
	0, 0, 179, 180, 181, 0, 0, 182, 183, 184,
	233, 234, 86, 185, 0, 0, 0, 0, 186, 187,
	188, 189, 0, 0, 89, 90, 0, 91, 0, 0,
	0, 0, 0, 0, 0, 0, 92, 93, 190, 191,
	192, 94, 193, 194, 0, 95, 195, 196, 96, 0,
	0, 197, 198, 199, 0, 200, 0, 0, 0, 97,
	98, 99, 0, 100, 0, 101, 0, 0, 102, 103,
	0, 0, 0, 0, 0, 0, 104, 105, 106, 107,
	201, 108, 202, 203, 0, 0, 109, 0, 0, 0,
	110, 111, 0, 112, 0, 0, 0, 204, 113, 205,
	0, 0, 0, 114, 115, 206, 0, 116, 0, 117,
	0, 0, 0, 0, 118, 207, 0, 208, 0, 119,
	120, 209, 210, 0, 0, 121, 0, 0, 122, 211,
	212, 213, 0, 214, 0, 0, 123, 0, 124, 125,
	0, 0, 215, 0, 126, 0, 0, 127, 0, 0,
	128, 0, 129, 130, 131, 132, 133, 0, 134, 135,
	138, 136, 0, 137, 0, 216, 139, 217, 140, 141,
	0, 0, 299, 0, 0, 142, 218, 0, 143, 0,
	219, 144, 145, 0, 220, 146, 221, 0, 147, 148,
	149, 222, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 0, 157, 158, 223, 159, 0, 246, 160, 161,
	0, 224, 162, 163, 0, 164, 165, 0, 166, 225,
	167, 0, 168, 169, 171, 226, 170, 227, 0, 0,
	172, 173, 0, 228, 229, 230, 0, 0, 174, 231,
	232, 0, 175, 176, 177, 178, 0, 0, 179, 180,
	181, 0, 0, 182, 183, 184, 233, 234, 86, 185,
	0, 0, 0, 0, 186, 187, 188, 189, 0, 0,
	89, 90, 0, 91, 0, 0, 0, 0, 0, 0,
	0, 0, 92, 93, 190, 191, 192, 94, 193, 194,
	0, 95, 195, 196, 96, 0, 0, 197, 198, 199,
	0, 200, 0, 0, 0, 97, 98, 99, 0, 100,
	0, 101, 0, 0, 102, 103, 0, 0, 0, 0,
	0, 0, 104, 105, 106, 107, 201, 108, 202, 203,
	0, 0, 109, 0, 0, 0, 110, 111, 0, 112,
	0, 0, 0, 204, 113, 205, 0, 0, 0, 114,
	115, 206, 0, 116, 0, 117, 0, 0, 0, 0,
	118, 207, 0, 208, 0, 119, 120, 305, 210, 0,
	0, 121, 0, 0, 122, 211, 212, 213, 0, 214,
	0, 0, 123, 0, 124, 125, 0, 0, 215, 0,
	126, 0, 0, 127, 0, 0, 128, 0, 129, 130,
	131, 132, 133, 0, 134, 135, 138, 136, 0, 137,
	0, 216, 139, 217, 140, 141, 0, 0, 299, 0,
	0, 142, 218, 0, 143, 0, 219, 144, 145, 0,
	220, 146, 221, 0, 147, 148, 149, 222, 150, 151,
	0, 153, 154, 152, 155, 0, 156, 0, 157, 158,
	223, 159, 0, 246, 160, 161, 0, 224, 162, 163,
	0, 164, 165, 0, 166, 225, 167, 0, 168, 169,
	171, 226, 170, 227, 0, 0, 172, 173, 0, 228,
	229, 230, 0, 0, 174, 231, 232, 0, 175, 176,
	177, 178, 0, 0, 179, 180, 181, 0, 0, 182,
	183, 184, 233, 234, 86, 185, 0, 0, 0, 0,
	186, 187, 188, 189, 0, 0, 89, 90, 0, 91,
	0, 0, 0, 0, 0, 0, 0, 0, 92, 93,
	190, 191, 192, 94, 193, 194, 0, 95, 195, 196,
	96, 0, 0, 197, 198, 199, 0, 200, 0, 0,
	0, 97, 98, 99, 0, 100, 0, 101, 0, 0,
	102, 103, 0, 0, 0, 0, 0, 0, 104, 105,
	106, 107, 201, 108, 202, 203, 0, 0, 109, 0,
	0, 0, 110, 111, 0, 112, 0, 0, 0, 204,
	113, 205, 0, 0, 0, 114, 115, 206, 0, 116,
	0, 117, 0, 0, 0, 0, 118, 207, 0, 208,
	0, 119, 120, 209, 210, 0, 0, 121, 0, 0,
	122, 211, 212, 213, 0, 214, 0, 0, 123, 0,
	124, 125, 0, 0, 215, 0, 126, 0, 0, 127,
	0, 0, 128, 0, 129, 130, 131, 132, 133, 0,
	134, 135, 138, 136, 0, 137, 0, 216, 139, 217,
	140, 141, 0, 0, 0, 0, 0, 142, 218, 0,
	143, 0, 219, 144, 145, 0, 220, 146, 221, 0,
	147, 148, 149, 222, 150, 151, 0, 153, 154, 152,
	155, 0, 156, 0, 157, 158, 223, 159, 0, 246,
	160, 161, 0, 224, 162, 163, 0, 164, 165, 0,
	166, 225, 167, 0, 168, 169, 171, 226, 170, 227,
	0, 0, 172, 173, 0, 228, 229, 230, 0, 0,
	174, 231, 232, 0, 175, 176, 177, 178, 0, 0,
	179, 180, 181, 0, 0, 182, 183, 184, 233, 234,
	86, 185, 0, 0, 0, 0, 186, 187, 188, 189,
	0, 0, 89, 90, 0, 91, 0, 0, 0, 0,
	0, 0, 0, 0, 92, 93, 190, 191, 192, 94,
	193, 194, 0, 95, 195, 196, 96, 0, 0, 197,
	198, 199, 0, 200, 0, 0, 0, 97, 98, 99,
	0, 100, 0, 101, 0, 0, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 106, 107, 201, 108,
	202, 203, 0, 0, 109, 0, 0, 0, 110, 111,
	0, 112, 0, 0, 0, 204, 113, 205, 0, 0,
	0, 114, 115, 206, 0, 116, 0, 117, 0, 0,
	0, 0, 118, 207, 0, 208, 0, 119, 120, 1102,
	210, 0, 0, 121, 0, 0, 122, 211, 212, 213,
	0, 214, 0, 0, 123, 0, 124, 125, 0, 0,
	215, 0, 126, 0, 0, 127, 0, 0, 128, 0,
	129, 130, 131, 132, 133, 0, 134, 135, 138, 136,
	0, 137, 0, 216, 139, 217, 140, 141, 0, 0,
	0, 0, 0, 142, 218, 0, 143, 0, 219, 144,
	145, 0, 220, 146, 221, 0, 147, 148, 149, 222,
	150, 151, 0, 153, 154, 152, 155, 0, 156, 0,
	157, 158, 223, 159, 0, 246, 160, 161, 0, 224,
	162, 163, 0, 164, 165, 0, 166, 225, 167, 0,
	168, 169, 171, 226, 170, 227, 0, 0, 172, 173,
	0, 228, 229, 230, 0, 0, 174, 231, 232, 0,
	175, 176, 177, 178, 0, 0, 179, 180, 181, 0,
	0, 182, 183, 184, 233, 234, 86, 185, 0, 0,
	0, 0, 186, 187, 188, 189, 0, 0, 89, 90,
	0, 91, 0, 0, 0, 0, 0, 0, 0, 0,
	92, 93, 190, 191, 192, 94, 193, 194, 0, 95,
	195, 196, 96, 0, 0, 197, 198, 199, 0, 200,
	0, 0, 0, 97, 98, 99, 0, 100, 0, 101,
	0, 0, 102, 103, 0, 0, 0, 0, 0, 0,
	104, 105, 106, 107, 201, 108, 202, 203, 0, 0,
	109, 0, 0, 0, 110, 111, 0, 112, 0, 0,
	0, 204, 113, 205, 0, 0, 0, 114, 115, 206,
	0, 116, 0, 117, 0, 0, 0, 0, 118, 207,
	0, 208, 0, 119, 120, 1100, 210, 0, 0, 121,
	0, 0, 122, 211, 212, 213, 0, 214, 0, 0,
	123, 0, 124, 125, 0, 0, 215, 0, 126, 0,
	0, 127, 0, 0, 128, 0, 129, 130, 131, 132,
	133, 0, 134, 135, 138, 136, 0, 137, 0, 216,
	139, 217, 140, 141, 0, 0, 0, 0, 0, 142,
	218, 0, 143, 0, 219, 144, 145, 0, 220, 146,
	221, 0, 147, 148, 149, 222, 150, 151, 0, 153,
	154, 152, 155, 0, 156, 0, 157, 158, 223, 159,
	0, 246, 160, 161, 0, 224, 162, 163, 0, 164,
	165, 0, 166, 225, 167, 0, 168, 169, 171, 226,
	170, 227, 0, 0, 172, 173, 0, 228, 229, 230,
	0, 0, 174, 231, 232, 0, 175, 176, 177, 178,
	0, 0, 179, 180, 181, 0, 0, 182, 183, 184,
	233, 234, 86, 185, 0, 0, 0, 0, 186, 187,
	188, 189, 0, 0, 89, 90, 0, 91, 0, 0,
	0, 0, 0, 0, 0, 0, 92, 93, 190, 191,
	192, 94, 193, 194, 0, 95, 195, 196, 96, 0,
	0, 197, 198, 199, 0, 200, 0, 0, 0, 97,
	98, 99, 0, 100, 0, 101, 0, 0, 102, 103,
	0, 0, 0, 0, 0, 0, 104, 105, 106, 107,
	201, 108, 202, 203, 0, 0, 109, 0, 0, 0,
	110, 111, 0, 112, 0, 0, 0, 204, 113, 205,
	0, 0, 0, 114, 115, 206, 0, 116, 0, 117,
	0, 0, 0, 0, 118, 207, 0, 208, 0, 119,
	120, 1091, 210, 0, 0, 121, 0, 0, 122, 211,
	212, 213, 0, 214, 0, 0, 123, 0, 124, 125,
	0, 0, 215, 0, 126, 0, 0, 127, 0, 0,
	128, 0, 129, 130, 131, 132, 133, 0, 134, 135,
	138, 136, 0, 137, 0, 216, 139, 217, 140, 141,
	0, 0, 0, 0, 0, 142, 218, 0, 143, 0,
	219, 144, 145, 0, 220, 146, 221, 0, 147, 148,
	149, 222, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 0, 157, 158, 223, 159, 0, 246, 160, 161,
	0, 224, 162, 163, 0, 164, 165, 0, 166, 225,
	167, 0, 168, 169, 171, 226, 170, 227, 0, 0,
	172, 173, 0, 228, 229, 230, 0, 0, 174, 231,
	232, 0, 175, 176, 177, 178, 0, 0, 179, 180,
	181, 0, 0, 182, 183, 184, 233, 234, 86, 185,
	0, 0, 0, 0, 186, 187, 188, 189, 0, 0,
	89, 90, 0, 91, 0, 0, 0, 0, 0, 0,
	0, 0, 92, 93, 190, 191, 192, 94, 193, 194,
	0, 95, 195, 196, 96, 0, 0, 197, 198, 199,
	0, 200, 0, 0, 0, 97, 98, 99, 0, 100,
	0, 101, 0, 0, 102, 103, 0, 0, 0, 0,
	0, 0, 104, 105, 106, 107, 201, 108, 202, 203,
	0, 0, 109, 0, 0, 0, 110, 111, 0, 112,
	0, 0, 0, 204, 113, 205, 0, 0, 0, 114,
	115, 206, 0, 116, 0, 117, 0, 0, 0, 0,
	118, 207, 0, 208, 0, 119, 120, 695, 210, 0,
	0, 121, 0, 0, 122, 211, 212, 213, 0, 214,
	0, 0, 123, 0, 124, 125, 0, 0, 215, 0,
	126, 0, 0, 127, 0, 0, 128, 0, 129, 130,
	131, 132, 133, 0, 134, 135, 138, 136, 0, 137,
	0, 216, 139, 217, 140, 141, 0, 0, 0, 0,
	0, 142, 218, 0, 143, 0, 219, 144, 145, 0,
	220, 146, 221, 0, 147, 148, 149, 222, 150, 151,
	0, 153, 154, 152, 155, 0, 156, 0, 157, 158,
	223, 159, 0, 246, 160, 161, 0, 224, 162, 163,
	0, 164, 165, 0, 166, 225, 167, 0, 168, 169,
	171, 226, 170, 227, 0, 0, 172, 173, 0, 228,
	229, 230, 0, 0, 174, 231, 232, 0, 175, 176,
	177, 178, 0, 0, 179, 180, 181, 0, 0, 182,
	183, 184, 233, 234, 86, 185, 0, 0, 0, 0,
	186, 187, 188, 189, 0, 0, 89, 90, 0, 91,
	0, 0, 0, 0, 0, 0, 0, 0, 92, 93,
	190, 191, 192, 94, 193, 194, 0, 95, 195, 196,
	96, 0, 0, 197, 198, 199, 0, 200, 0, 0,
	0, 97, 98, 99, 0, 100, 0, 101, 0, 0,
	102, 103, 0, 0, 0, 0, 0, 0, 104, 105,
	106, 107, 201, 108, 202, 203, 0, 0, 109, 0,
	0, 0, 110, 111, 0, 112, 0, 0, 0, 204,
	113, 205, 0, 0, 0, 114, 115, 206, 0, 116,
	0, 117, 0, 0, 0, 0, 118, 207, 0, 208,
	0, 119, 120, 209, 210, 0, 0, 121, 0, 0,
	122, 211, 212, 213, 0, 214, 0, 0, 123, 0,
	124, 125, 0, 0, 215, 0, 126, 0, 0, 127,
	0, 0, 128, 0, 129, 130, 131, 132, 133, 0,
	134, 135, 138, 136, 0, 137, 0, 216, 139, 217,
	140, 141, 0, 0, 0, 0, 0, 142, 218, 0,
	143, 0, 219, 144, 145, 0, 220, 146, 221, 0,
	147, 148, 149, 222, 150, 151, 0, 153, 154, 152,
	155, 0, 156, 0, 157, 158, 223, 159, 0, 84,
	160, 161, 0, 224, 162, 163, 0, 164, 165, 0,
	166, 225, 167, 0, 168, 169, 171, 226, 170, 227,
	0, 0, 172, 173, 0, 228, 229, 230, 0, 0,
	174, 231, 232, 0, 175, 176, 177, 178, 0, 0,
	179, 180, 181, 0, 0, 182, 183, 184, 233, 234,
	86, 185, 0, 0, 0, 0, 186, 187, 188, 189,
	0, 0, 89, 90, 0, 91, 0, 0, 0, 0,
	0, 534, 0, 0, 92, 93, 190, 191, 192, 94,
	193, 194, 0, 95, 195, 196, 96, 0, 0, 197,
	198, 199, 0, 200, 0, 0, 0, 97, 98, 99,
	0, 100, 0, 101, 0, 0, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 106, 107, 201, 108,
	202, 203, 0, 0, 109, 0, 0, 0, 110, 111,
	0, 112, 0, 0, 0, 204, 113, 205, 0, 0,
	0, 114, 115, 206, 0, 116, 0, 117, 0, 0,
	0, 0, 118, 207, 0, 208, 0, 119, 120, 209,
	210, 0, 0, 121, 0, 0, 122, 211, 212, 213,
	0, 214, 0, 0, 123, 0, 124, 125, 0, 0,
	215, 0, 126, 0, 0, 127, 0, 0, 128, 0,
	129, 130, 131, 132, 133, 0, 134, 135, 138, 136,
	0, 137, 0, 216, 139, 217, 140, 141, 0, 0,
	0, 0, 0, 142, 218, 0, 143, 0, 219, 144,
	145, 0, 220, 146, 221, 0, 147, 148, 149, 222,
	150, 151, 0, 153, 154, 152, 155, 0, 156, 0,
	157, 158, 223, 159, 0, 246, 160, 161, 0, 224,
	162, 163, 0, 0, 165, 0, 166, 225, 167, 0,
	168, 169, 171, 226, 170, 227, 0, 0, 172, 173,
	0, 228, 229, 230, 0, 0, 174, 231, 232, 0,
	175, 176, 177, 178, 0, 0, 179, 180, 181, 0,
	0, 182, 183, 184, 233, 234, 86, 185, 0, 0,
	0, 0, 186, 187, 188, 189, 0, 0, 89, 90,
	0, 91, 0, 0, 0, 0, 0, 0, 0, 0,
	92, 93, 190, 191, 192, 94, 193, 194, 0, 95,
	195, 196, 96, 0, 0, 197, 198, 199, 0, 200,
	0, 0, 0, 97, 98, 99, 0, 100, 0, 101,
	0, 0, 102, 103, 0, 0, 0, 0, 0, 0,
	104, 105, 106, 107, 201, 108, 202, 203, 0, 0,
	109, 0, 0, 0, 110, 111, 0, 112, 0, 0,
	0, 204, 113, 205, 0, 0, 0, 114, 115, 206,
	0, 116, 0, 117, 0, 0, 0, 0, 118, 207,
	0, 208, 0, 119, 120, 389, 210, 0, 0, 121,
	0, 0, 122, 211, 212, 213, 0, 214, 0, 0,
	123, 0, 124, 125, 0, 0, 215, 0, 126, 0,
	0, 127, 0, 0, 128, 0, 129, 130, 131, 132,
	133, 0, 134, 135, 138, 136, 0, 137, 0, 216,
	139, 217, 140, 141, 0, 0, 0, 0, 0, 142,
	218, 0, 143, 0, 219, 144, 145, 0, 220, 146,
	221, 0, 147, 148, 149, 222, 150, 151, 0, 153,
	154, 152, 155, 0, 156, 0, 157, 158, 223, 159,
	0, 246, 160, 161, 0, 224, 162, 163, 0, 164,
	165, 0, 166, 225, 167, 0, 168, 169, 171, 226,
	170, 227, 0, 0, 172, 173, 0, 228, 229, 230,
	0, 0, 174, 231, 232, 0, 175, 176, 177, 178,
	0, 0, 179, 180, 181, 0, 0, 182, 183, 184,
	233, 234, 86, 185, 0, 0, 0, 0, 186, 187,
	188, 189, 0, 0, 89, 90, 0, 91, 0, 0,
	0, 0, 0, 0, 0, 0, 92, 93, 190, 191,
	192, 94, 193, 194, 0, 95, 195, 196, 96, 0,
	0, 197, 198, 199, 0, 200, 0, 0, 0, 97,
	98, 99, 0, 100, 0, 101, 0, 0, 102, 103,
	0, 0, 0, 0, 0, 0, 104, 105, 106, 107,
	201, 108, 202, 203, 0, 0, 109, 0, 0, 0,
	110, 111, 0, 112, 0, 0, 0, 204, 113, 205,
	0, 0, 0, 114, 115, 206, 0, 116, 0, 117,
	0, 0, 0, 0, 118, 207, 0, 208, 0, 119,
	120, 386, 210, 0, 0, 121, 0, 0, 122, 211,
	212, 213, 0, 214, 0, 0, 123, 0, 124, 125,
	0, 0, 215, 0, 126, 0, 0, 127, 0, 0,
	128, 0, 129, 130, 131, 132, 133, 0, 134, 135,
	138, 136, 0, 137, 0, 216, 139, 217, 140, 141,
	0, 0, 0, 0, 0, 142, 218, 0, 143, 0,
	219, 144, 145, 0, 220, 146, 221, 0, 147, 148,
	149, 222, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 0, 157, 158, 223, 159, 0, 246, 160, 161,
	0, 224, 162, 163, 0, 164, 165, 0, 166, 225,
	167, 0, 168, 169, 171, 226, 170, 227, 0, 0,
	172, 173, 0, 228, 229, 230, 0, 0, 174, 231,
	232, 0, 175, 176, 177, 178, 0, 0, 179, 180,
	181, 0, 0, 182, 183, 184, 233, 234, 86, 185,
	0, 0, 0, 0, 186, 187, 188, 189, 0, 0,
	89, 90, 0, 91, 0, 0, 0, 0, 0, 0,
	0, 0, 92, 93, 190, 191, 192, 94, 193, 194,
	0, 95, 195, 196, 96, 0, 0, 197, 198, 349,
	0, 200, 0, 0, 0, 97, 98, 99, 0, 100,
	0, 101, 0, 0, 102, 103, 0, 0, 0, 0,
	0, 0, 104, 105, 106, 107, 201, 108, 202, 203,
	0, 0, 109, 0, 0, 0, 110, 111, 0, 112,
	0, 0, 0, 204, 113, 205, 0, 0, 0, 114,
	115, 206, 0, 116, 0, 117, 0, 0, 0, 0,
	118, 207, 0, 208, 0, 119, 120, 209, 210, 0,
	0, 121, 0, 0, 122, 211, 212, 213, 0, 214,
	0, 0, 123, 0, 124, 125, 0, 0, 215, 0,
	126, 0, 0, 127, 0, 0, 128, 0, 129, 130,
	131, 132, 243, 0, 134, 135, 138, 136, 0, 137,
	0, 216, 139, 217, 140, 141, 0, 0, 0, 0,
	0, 142, 218, 0, 143, 0, 219, 144, 145, 0,
	220, 146, 221, 0, 147, 148, 149, 222, 150, 151,
	0, 153, 154, 152, 155, 0, 156, 0, 157, 158,
	223, 159, 0, 246, 160, 161, 0, 224, 162, 163,
	0, 164, 165, 0, 166, 225, 167, 0, 168, 169,
	171, 226, 170, 227, 0, 0, 172, 173, 0, 242,
	229, 230, 0, 0, 238, 231, 232, 0, 175, 176,
	177, 178, 0, 0, 179, 180, 181, 0, 0, 182,
	183, 184, 233, 234, 86, 185, 0, 0, 0, 0,
	186, 187, 188, 189, 0, 0, 89, 90, 0, 91,
	0, 0, 0, 0, 0, 0, 0, 0, 92, 93,
	190, 191, 192, 94, 193, 194, 0, 95, 195, 196,
	96, 0, 0, 197, 198, 199, 0, 200, 0, 0,
	0, 97, 98, 99, 0, 100, 0, 101, 0, 0,
	102, 103, 0, 0, 0, 0, 0, 0, 104, 105,
	106, 107, 201, 108, 202, 203, 0, 0, 109, 0,
	0, 0, 110, 111, 0, 112, 0, 0, 0, 204,
	113, 205, 0, 0, 0, 114, 115, 206, 0, 116,
	0, 117, 0, 0, 0, 0, 118, 207, 0, 208,
	0, 119, 120, 209, 210, 0, 0, 121, 0, 0,
	122, 211, 212, 213, 0, 214, 0, 0, 123, 0,
	124, 125, 0, 0, 215, 0, 126, 0, 0, 127,
	0, 0, 128, 0, 129, 130, 131, 132, 243, 0,
	134, 135, 138, 136, 0, 137, 0, 216, 139, 217,
	140, 141, 0, 0, 0, 0, 0, 142, 218, 0,
	143, 0, 219, 144, 145, 0, 220, 146, 221, 0,
	147, 148, 149, 222, 150, 151, 0, 153, 154, 152,
	155, 0, 156, 0, 157, 158, 223, 159, 0, 246,
	160, 161, 0, 224, 162, 163, 0, 164, 165, 0,
	166, 225, 167, 0, 168, 169, 171, 226, 170, 227,
	0, 0, 172, 173, 0, 242, 229, 230, 0, 0,
	238, 231, 232, 0, 175, 176, 177, 178, 0, 0,
	179, 180, 181, 0, 0, 182, 183, 184, 233, 234,
	86, 185, 0, 0, 0, 0, 186, 187, 188, 189,
	0, 0, 89, 90, 0, 91, 0, 0, 0, 0,
	0, 0, 0, 0, 92, 93, 190, 191, 192, 94,
	193, 194, 0, 95, 195, 196, 96, 0, 0, 197,
	198, 199, 0, 200, 0, 0, 0, 97, 98, 99,
	0, 100, 0, 101, 0, 0, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 106, 107, 201, 108,
	202, 203, 0, 0, 109, 0, 0, 0, 110, 111,
	0, 112, 0, 0, 0, 204, 113, 205, 0, 0,
	0, 114, 115, 206, 0, 116, 0, 117, 0, 0,
	0, 0, 118, 207, 0, 208, 0, 119, 120, 321,
	210, 0, 0, 121, 0, 0, 122, 211, 212, 213,
	0, 214, 0, 0, 123, 0, 124, 125, 0, 0,
	215, 0, 126, 0, 0, 127, 0, 0, 128, 0,
	129, 130, 131, 132, 133, 0, 134, 135, 138, 136,
	0, 137, 0, 216, 139, 217, 140, 141, 0, 0,
	0, 0, 0, 142, 218, 0, 143, 0, 219, 144,
	145, 0, 220, 146, 221, 0, 147, 148, 149, 222,
	150, 151, 0, 153, 154, 152, 155, 0, 156, 0,
	157, 158, 223, 159, 0, 246, 160, 161, 0, 224,
	162, 163, 0, 164, 165, 0, 166, 225, 167, 0,
	168, 169, 171, 226, 170, 227, 0, 0, 172, 173,
	0, 228, 229, 230, 0, 0, 174, 231, 232, 0,
	175, 176, 177, 178, 0, 0, 179, 180, 181, 0,
	0, 182, 183, 184, 233, 234, 86, 185, 0, 0,
	0, 0, 186, 187, 188, 189, 0, 0, 89, 90,
	0, 91, 0, 0, 0, 0, 0, 0, 0, 0,
	92, 93, 190, 191, 192, 94, 193, 194, 0, 95,
	195, 196, 96, 0, 0, 197, 198, 199, 0, 200,
	0, 0, 0, 97, 98, 99, 0, 100, 0, 101,
	0, 0, 102, 103, 0, 0, 0, 0, 0, 0,
	104, 105, 106, 107, 201, 108, 202, 203, 0, 0,
	109, 0, 0, 0, 110, 111, 0, 112, 0, 0,
	0, 204, 113, 205, 0, 0, 0, 114, 115, 206,
	0, 116, 0, 117, 0, 0, 0, 0, 118, 207,
	0, 208, 0, 119, 120, 318, 210, 0, 0, 121,
	0, 0, 122, 211, 212, 213, 0, 214, 0, 0,
	123, 0, 124, 125, 0, 0, 215, 0, 126, 0,
	0, 127, 0, 0, 128, 0, 129, 130, 131, 132,
	133, 0, 134, 135, 138, 136, 0, 137, 0, 216,
	139, 217, 140, 141, 0, 0, 0, 0, 0, 142,
	218, 0, 143, 0, 219, 144, 145, 0, 220, 146,
	221, 0, 147, 148, 149, 222, 150, 151, 0, 153,
	154, 152, 155, 0, 156, 0, 157, 158, 223, 159,
	0, 246, 160, 161, 0, 224, 162, 163, 0, 164,
	165, 0, 166, 225, 167, 0, 168, 169, 171, 226,
	170, 227, 0, 0, 172, 173, 0, 228, 229, 230,
	0, 0, 174, 231, 232, 0, 175, 176, 177, 178,
	0, 0, 179, 180, 181, 0, 0, 182, 183, 184,
	233, 234, 86, 185, 0, 0, 0, 0, 186, 187,
	188, 189, 0, 0, 89, 90, 0, 91, 0, 0,
	0, 0, 0, 0, 0, 0, 92, 93, 190, 191,
	192, 94, 193, 194, 0, 95, 195, 196, 96, 0,
	0, 197, 198, 199, 0, 200, 0, 0, 0, 97,
	98, 99, 0, 100, 0, 101, 0, 0, 102, 103,
	0, 0, 0, 0, 0, 0, 104, 105, 106, 107,
	201, 108, 202, 203, 0, 0, 109, 0, 0, 0,
	110, 111, 0, 112, 0, 0, 0, 204, 113, 205,
	0, 0, 0, 114, 115, 206, 0, 116, 0, 117,
	0, 0, 0, 0, 118, 207, 0, 208, 0, 119,
	120, 316, 210, 0, 0, 121, 0, 0, 122, 211,
	212, 213, 0, 214, 0, 0, 123, 0, 124, 125,
	0, 0, 215, 0, 126, 0, 0, 127, 0, 0,
	128, 0, 129, 130, 131, 132, 133, 0, 134, 135,
	138, 136, 0, 137, 0, 216, 139, 217, 140, 141,
	0, 0, 0, 0, 0, 142, 218, 0, 143, 0,
	219, 144, 145, 0, 220, 146, 221, 0, 147, 148,
	149, 222, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 0, 157, 158, 223, 159, 0, 246, 160, 161,
	0, 224, 162, 163, 0, 164, 165, 0, 166, 225,
	167, 0, 168, 169, 171, 226, 170, 227, 0, 0,
	172, 173, 0, 228, 229, 230, 0, 0, 174, 231,
	232, 0, 175, 176, 177, 178, 0, 0, 179, 180,
	181, 0, 0, 182, 183, 184, 233, 234, 86, 185,
	0, 0, 0, 0, 186, 187, 188, 189, 0, 0,
	89, 90, 0, 91, 0, 0, 0, 0, 0, 0,
	0, 0, 92, 93, 190, 191, 192, 94, 193, 194,
	0, 95, 195, 196, 96, 0, 0, 197, 198, 199,
	0, 200, 0, 0, 0, 97, 98, 99, 0, 100,
	0, 101, 0, 0, 102, 103, 0, 0, 0, 0,
	0, 0, 104, 105, 106, 107, 201, 108, 202, 203,
	0, 0, 109, 0, 0, 0, 110, 111, 0, 112,
	0, 0, 0, 204, 113, 205, 0, 0, 0, 114,
	115, 206, 0, 116, 0, 117, 0, 0, 0, 0,
	118, 207, 0, 208, 0, 119, 120, 308, 210, 0,
	0, 121, 0, 0, 122, 211, 212, 213, 0, 214,
	0, 0, 123, 0, 124, 125, 0, 0, 215, 0,
	126, 0, 0, 127, 0, 0, 128, 0, 129, 130,
	131, 132, 133, 0, 134, 135, 138, 136, 0, 137,
	0, 216, 139, 217, 140, 141, 0, 0, 0, 0,
	0, 142, 218, 0, 143, 0, 219, 144, 145, 0,
	220, 146, 221, 0, 147, 148, 149, 222, 150, 151,
	0, 153, 154, 152, 155, 0, 156, 0, 157, 158,
	223, 159, 0, 246, 160, 161, 0, 224, 162, 163,
	0, 164, 165, 0, 166, 225, 167, 0, 168, 169,
	171, 226, 170, 227, 0, 0, 172, 173, 0, 228,
	229, 230, 0, 0, 174, 231, 232, 0, 175, 176,
	177, 178, 0, 0, 179, 180, 181, 0, 0, 182,
	183, 184, 233, 234, 86, 185, 0, 0, 0, 0,
	186, 187, 188, 189, 0, 0, 89, 90, 0, 91,
	0, 0, 0, 0, 0, 0, 0, 0, 92, 93,
	190, 191, 192, 94, 193, 194, 0, 95, 195, 196,
	96, 0, 0, 197, 198, 199, 0, 200, 0, 0,
	0, 97, 98, 99, 0, 100, 0, 101, 0, 0,
	102, 103, 0, 0, 0, 0, 0, 0, 104, 105,
	106, 107, 201, 108, 202, 203, 0, 0, 109, 0,
	0, 0, 110, 111, 0, 112, 0, 0, 0, 204,
	113, 205, 0, 0, 0, 114, 115, 206, 0, 116,
	0, 117, 0, 0, 0, 0, 118, 207, 0, 208,
	0, 119, 120, 209, 210, 0, 0, 121, 0, 0,
	122, 211, 212, 213, 0, 214, 0, 0, 123, 0,
	124, 125, 0, 0, 215, 0, 126, 0, 0, 127,
	0, 0, 128, 0, 129, 130, 131, 132, 133, 0,
	134, 135, 138, 136, 0, 137, 0, 216, 139, 217,
	140, 141, 0, 0, 0, 0, 0, 142, 218, 0,
	143, 0, 219, 144, 145, 0, 220, 146, 221, 0,
	147, 148, 149, 222, 288, 151, 0, 153, 154, 152,
	155, 0, 156, 0, 157, 158, 223, 159, 0, 246,
	160, 161, 0, 224, 162, 163, 0, 164, 165, 0,
	166, 225, 167, 0, 168, 169, 171, 226, 170, 227,
	0, 0, 172, 173, 0, 228, 229, 230, 0, 0,
	174, 231, 232, 0, 175, 176, 177, 178, 0, 0,
	179, 180, 181, 0, 0, 182, 183, 184, 233, 234,
	86, 185, 0, 0, 0, 0, 186, 187, 188, 189,
	0, 0, 89, 90, 0, 91, 0, 0, 0, 0,
	0, 0, 0, 0, 92, 93, 190, 191, 192, 94,
	193, 194, 0, 95, 195, 196, 96, 0, 0, 197,
	198, 199, 0, 200, 0, 0, 0, 97, 98, 99,
	0, 100, 0, 101, 0, 0, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 106, 107, 201, 108,
	202, 203, 0, 0, 109, 0, 0, 0, 110, 111,
	0, 112, 0, 0, 0, 204, 113, 205, 0, 0,
	0, 114, 115, 206, 0, 116, 0, 117, 0, 0,
	0, 0, 118, 207, 0, 208, 0, 119, 120, 209,
	210, 0, 0, 121, 0, 0, 122, 211, 212, 213,
	0, 214, 0, 0, 123, 0, 124, 125, 0, 0,
	215, 0, 126, 0, 0, 236, 0, 0, 128, 0,
	129, 130, 131, 132, 243, 0, 134, 135, 138, 136,
	0, 137, 0, 216, 139, 217, 140, 141, 0, 0,
	0, 0, 0, 142, 218, 0, 143, 0, 219, 144,
	145, 0, 220, 146, 221, 0, 147, 148, 149, 222,
	150, 151, 0, 153, 154, 152, 155, 0, 156, 0,
	157, 158, 223, 159, 0, 246, 160, 161, 0, 224,
	162, 237, 0, 164, 165, 0, 166, 225, 167, 0,
	168, 169, 171, 226, 170, 227, 0, 0, 172, 173,
	0, 242, 229, 230, 0, 0, 238, 231, 232, 0,
	175, 176, 177, 178, 0, 0, 179, 180, 181, 0,
	0, 182, 183, 184, 233, 234, 86, 185, 0, 0,
	0, 0, 186, 187, 188, 189, 0, 0, 89, 90,
	0, 91, 0, 0, 0, 0, 0, 0, 0, 0,
	92, 93, 190, 191, 192, 94, 193, 194, 0, 95,
	195, 196, 96, 0, 0, 197, 198, 199, 0, 200,
	0, 0, 0, 97, 98, 99, 0, 100, 0, 101,
	0, 0, 102, 103, 0, 0, 0, 0, 0, 0,
	104, 105, 106, 107, 201, 108, 202, 203, 0, 0,
	109, 0, 0, 0, 110, 111, 0, 112, 0, 0,
	0, 204, 113, 205, 0, 0, 0, 114, 115, 206,
	0, 116, 0, 117, 0, 0, 0, 0, 118, 207,
	0, 208, 0, 119, 120, 209, 210, 0, 0, 121,
	0, 0, 122, 211, 212, 213, 0, 214, 0, 0,
	123, 0, 124, 125, 0, 0, 215, 0, 126, 0,
	0, 127, 0, 0, 128, 0, 129, 130, 131, 132,
	133, 0, 134, 135, 138, 136, 0, 137, 0, 216,
	139, 217, 140, 141, 0, 0, 0, 0, 0, 142,
	218, 0, 143, 0, 219, 144, 0, 0, 220, 146,
	221, 0, 147, 0, 149, 222, 150, 151, 0, 153,
	154, 152, 155, 0, 156, 0, 157, 158, 223, 0,
	0, 246, 160, 161, 0, 224, 162, 163, 0, 164,
	165, 0, 166, 225, 167, 0, 168, 169, 171, 226,
	170, 227, 0, 0, 172, 173, 0, 228, 229, 230,
	0, 0, 174, 231, 232, 0, 175, 176, 177, 178,
	0, 0, 179, 180, 181, 0, 0, 182, 183, 184,
	233, 234, 721, 185, 740, 741, 742, 0, 186, 187,
	188, 189, 0, 0, 743, 0, 0, 0, 0, 0,
	723, 721, 749, 740, 741, 742, 0, 0, 0, 0,
	0, 0, 0, 743, 0, 0, 0, 0, 0, 723,
	722, 749, 0, 0, 0, 0, 737, 0, 721, 0,
	740, 741, 742, 0, 0, 0, 0, 0, 0, 722,
	743, 0, 0, 0, 0, 737, 723, 0, 749, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 722, 0, 0, 0,
	728, 0, 737, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 750, 0, 728,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 748,
	0, 0, 0, 0, 0, 0, 750, 0, 0, 745,
	0, 0, 0, 0, 0, 738, 728, 0, 748, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 745, 0,
	0, 0, 0, 750, 738, 0, 0, 744, 0, 0,
	0, 0, 0, 0, 0, 748, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 745, 744, 0, 0, 0,
	0, 738, 0, 0, 0, 0, 0, 0, 0, 0,
	739, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 747, 0, 744, 0, 0, 0, 0, 0, 739,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	747, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 739, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 747, 0, 0,
	0, 0, 746, 0, 734, 735, 736, 0, 733, 730,
	731, 732, 724, 725, 726, 727, 729, 0, 0, 0,
	0, 746, 1658, 734, 735, 736, 0, 733, 730, 731,
	732, 724, 725, 726, 727, 729, 0, 0, 0, 0,
	0, 1640, 0, 0, 0, 0, 0, 0, 746, 0,
	734, 735, 736, 0, 733, 730, 731, 732, 724, 725,
	726, 727, 729, 721, 0, 740, 741, 742, 1619, 0,
	0, 0, 0, 0, 0, 743, 0, 0, 0, 0,
	0, 723, 721, 749, 740, 741, 742, 0, 0, 0,
	0, 0, 0, 0, 743, 0, 0, 0, 0, 0,
	723, 722, 749, 0, 0, 0, 0, 737, 0, 721,
	0, 740, 741, 742, 0, 0, 0, 0, 0, 0,
	722, 743, 0, 0, 0, 0, 737, 723, 0, 749,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 722, 0, 0,
	0, 728, 0, 737, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 750, 0,
	728, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	748, 0, 0, 0, 0, 0, 0, 750, 0, 0,
	745, 0, 0, 0, 0, 0, 738, 728, 0, 748,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 745,
	0, 0, 0, 0, 750, 738, 0, 0, 744, 0,
	0, 0, 0, 0, 0, 0, 748, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 745, 744, 0, 0,
	0, 0, 738, 0, 0, 0, 0, 0, 0, 0,
	0, 739, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 747, 0, 744, 0, 0, 0, 0, 0,
	739, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 747, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 739, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 747, 0,
	0, 0, 0, 746, 0, 734, 735, 736, 0, 733,
	730, 731, 732, 724, 725, 726, 727, 729, 0, 0,
	0, 0, 746, 1614, 734, 735, 736, 0, 733, 730,
	731, 732, 724, 725, 726, 727, 729, 0, 0, 0,
	0, 0, 1610, 0, 0, 0, 0, 0, 0, 746,
	0, 734, 735, 736, 0, 733, 730, 731, 732, 724,
	725, 726, 727, 729, 721, 0, 740, 741, 742, 1547,
	0, 0, 0, 0, 0, 0, 743, 0, 0, 0,
	0, 0, 723, 721, 749, 740, 741, 742, 0, 0,
	0, 0, 0, 0, 0, 743, 0, 0, 0, 0,
	0, 723, 722, 749, 0, 0, 0, 0, 737, 0,
	721, 0, 740, 741, 742, 0, 0, 0, 0, 0,
	0, 722, 743, 0, 0, 0, 0, 737, 723, 0,
	749, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 722, 0,
	0, 0, 728, 0, 737, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 750,
	0, 728, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 748, 0, 0, 0, 0, 0, 0, 750, 0,
	0, 745, 0, 0, 0, 0, 0, 738, 728, 0,
	748, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	745, 0, 0, 0, 0, 750, 738, 0, 0, 744,
	0, 0, 0, 0, 0, 0, 0, 748, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 745, 744, 0,
	0, 0, 0, 738, 0, 0, 0, 0, 0, 0,
	0, 0, 739, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 747, 0, 744, 0, 0, 0, 0,
	0, 739, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 747, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 739, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 747,
	0, 0, 0, 0, 746, 0, 734, 735, 736, 0,
	733, 730, 731, 732, 724, 725, 726, 727, 729, 0,
	0, 0, 0, 746, 1546, 734, 735, 736, 0, 733,
	730, 731, 732, 724, 725, 726, 727, 729, 0, 0,
	0, 0, 0, 1454, 0, 0, 0, 0, 0, 0,
	746, 0, 734, 735, 736, 0, 733, 730, 731, 732,
	724, 725, 726, 727, 729, 721, 0, 740, 741, 742,
	1391, 0, 0, 0, 0, 0, 0, 743, 0, 0,
	0, 0, 0, 723, 721, 749, 740, 741, 742, 0,
	0, 0, 0, 0, 0, 0, 743, 0, 0, 0,
	0, 0, 723, 722, 749, 0, 0, 0, 0, 737,
	0, 721, 0, 740, 741, 742, 0, 0, 0, 0,
	0, 0, 722, 743, 0, 0, 0, 0, 737, 723,
	0, 749, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 722,
	0, 0, 0, 728, 0, 737, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	750, 0, 728, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 748, 0, 0, 0, 0, 0, 0, 750,
	0, 0, 745, 0, 0, 0, 0, 0, 738, 728,
	0, 748, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 745, 0, 0, 0, 0, 750, 738, 0, 0,
	744, 0, 0, 0, 0, 0, 0, 0, 748, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 745, 744,
	0, 0, 0, 0, 738, 0, 0, 0, 0, 0,
	0, 0, 0, 739, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 747, 0, 744, 0, 0, 0,
	0, 0, 739, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 747, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 739,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	747, 0, 0, 0, 0, 746, 0, 734, 735, 736,
	0, 733, 730, 731, 732, 724, 725, 726, 727, 729,
	0, 0, 0, 0, 746, 1366, 734, 735, 736, 0,
	733, 730, 731, 732, 724, 725, 726, 727, 729, 0,
	0, 0, 0, 0, 1004, 0, 0, 0, 0, 0,
	0, 746, 0, 734, 735, 736, 0, 733, 730, 731,
	732, 724, 725, 726, 727, 729, 0, 0, 721, 1438,
	740, 741, 742, 0, 0, 0, 0, 0, 0, 0,
	743, 0, 0, 0, 0, 0, 723, 721, 749, 740,
	741, 742, 0, 0, 0, 0, 0, 0, 0, 743,
	0, 0, 0, 0, 0, 723, 722, 749, 0, 0,
	0, 0, 737, 0, 721, 0, 740, 741, 742, 0,
	0, 0, 0, 0, 0, 722, 743, 0, 0, 0,
	908, 737, 723, 0, 749, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 722, 0, 0, 0, 728, 1721, 737, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 750, 0, 728, 0, 1264, 0, 0,
	1263, 0, 0, 909, 0, 748, 0, 0, 0, 0,
	0, 0, 750, 0, 0, 745, 0, 0, 0, 0,
	0, 738, 728, 0, 748, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 745, 0, 0, 0, 0, 750,
	738, 0, 0, 744, 0, 0, 0, 0, 0, 0,
	0, 748, 0, 0, 0, 1720, 0, 0, 0, 0,
	0, 745, 744, 0, 0, 0, 0, 738, 0, 0,
	0, 0, 0, 0, 0, 0, 739, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 747, 0, 744,
	0, 0, 0, 0, 0, 739, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 747, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 739, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 747, 0, 0, 0, 0, 746, 0,
	734, 735, 736, 0, 733, 730, 731, 732, 724, 725,
	726, 727, 729, 0, 0, 0, 0, 746, 0, 734,
	735, 736, 0, 733, 730, 731, 732, 724, 725, 726,
	727, 729, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 746, 0, 734, 735, 736, 0,
	733, 730, 731, 732, 724, 725, 726, 727, 729, 752,
	0, 0, 0, 0, 0, 721, 0, 740, 741, 742,
	0, 0, 0, 0, 0, 0, 0, 743, 0, 0,
	751, 0, 0, 723, 721, 749, 740, 741, 742, 0,
	0, 0, 0, 0, 0, 0, 743, 0, 0, 0,
	0, 0, 723, 722, 749, 0, 0, 0, 0, 737,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 721, 722, 740, 741, 742, 0, 0, 737, 0,
	0, 0, 0, 743, 0, 0, 0, 0, 0, 723,
	0, 749, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 728, 0, 0, 0, 0, 0, 722,
	0, 0, 0, 0, 0, 737, 0, 0, 0, 0,
	750, 0, 728, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 748, 0, 0, 0, 0, 0, 0, 750,
	0, 0, 745, 0, 0, 0, 0, 0, 738, 0,
	0, 748, 0, 0, 0, 0, 0, 0, 0, 728,
	0, 745, 0, 0, 0, 0, 0, 738, 0, 0,
	744, 0, 0, 0, 0, 0, 750, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 748, 744,
	283, 0, 0, 0, 0, 0, 0, 0, 745, 0,
	0, 0, 0, 739, 738, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 747, 0, 0, 0, 0, 0,
	0, 0, 739, 0, 0, 0, 744, 0, 0, 0,
	0, 0, 0, 747, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 739,
	0, 0, 0, 0, 0, 746, 0, 734, 735, 736,
	747, 733, 730, 731, 732, 724, 725, 726, 727, 729,
	0, 0, 0, 0, 746, 1385, 734, 735, 736, 0,
	733, 730, 731, 732, 724, 725, 726, 727, 729, 721,
	0, 740, 741, 742, 0, 0, 0, 0, 0, 0,
	0, 743, 0, 0, 0, 0, 0, 723, 0, 749,
	0, 746, 0, 734, 735, 736, 0, 733, 730, 731,
	732, 724, 725, 726, 727, 729, 721, 722, 740, 741,
	742, 0, 0, 737, 0, 0, 0, 0, 743, 0,
	0, 1265, 0, 0, 723, 721, 749, 740, 741, 742,
	0, 0, 0, 0, 0, 0, 0, 743, 0, 0,
	0, 0, 0, 723, 722, 749, 0, 0, 0, 0,
	737, 0, 0, 0, 0, 0, 0, 728, 0, 0,
	0, 0, 1270, 722, 0, 0, 0, 0, 0, 737,
	0, 0, 0, 0, 750, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 748, 0, 0, 0,
	0, 0, 0, 0, 728, 0, 745, 0, 0, 0,
	0, 0, 738, 0, 0, 0, 0, 721, 0, 0,
	0, 750, 0, 728, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 748, 744, 723, 0, 749, 0, 0,
	750, 0, 0, 745, 0, 0, 0, 0, 0, 738,
	0, 0, 748, 0, 0, 722, 0, 0, 0, 0,
	0, 737, 745, 0, 0, 0, 0, 739, 738, 0,
	0, 744, 0, 0, 0, 0, 0, 0, 747, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	744, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1231, 0, 0, 0, 739, 728, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 747, 0, 0, 0, 0,
	0, 0, 750, 739, 0, 0, 0, 0, 0, 746,
	0, 734, 735, 736, 747, 733, 730, 731, 732, 724,
	725, 726, 727, 729, 745, 0, 0, 0, 0, 0,
	738, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 746, 0, 734, 735,
	736, 0, 733, 730, 731, 732, 724, 725, 726, 727,
	729, 0, 0, 0, 0, 746, 0, 734, 735, 736,
	0, 733, 730, 731, 732, 724, 725, 726, 727, 729,
	721, 0, 740, 741, 742, 739, 0, 0, 0, 0,
	0, 0, 743, 0, 0, 1226, 747, 0, 723, 721,
	749, 740, 741, 742, 0, 0, 0, 0, 0, 0,
	0, 743, 0, 0, 0, 0, 0, 723, 722, 749,
	0, 0, 0, 0, 737, 0, 721, 0, 740, 741,
	742, 0, 0, 0, 0, 0, 0, 722, 0, 0,
	0, 0, 0, 737, 723, 0, 749, 746, 0, 0,
	0, 0, 0, 733, 730, 731, 732, 724, 725, 726,
	727, 729, 0, 0, 722, 0, 0, 0, 728, 0,
	737, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 750, 1233, 728, 1250, 1251,
	1252, 0, 0, 0, 0, 0, 0, 748, 1361, 0,
	0, 0, 0, 0, 750, 0, 0, 745, 0, 0,
	0, 0, 0, 738, 728, 0, 748, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 745, 0, 0, 0,
	1247, 750, 738, 0, 0, 744, 0, 0, 0, 0,
	0, 0, 0, 748, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 745, 744, 0, 0, 0, 0, 738,
	0, 0, 0, 0, 0, 0, 0, 0, 739, 0,
	0, 0, 0, 0, 1238, 0, 0, 0, 0, 747,
	1233, 0, 1250, 1251, 1252, 0, 0, 739, 0, 0,
	0, 0, 1360, 0, 0, 0, 0, 0, 747, 0,
	0, 0, 0, 1253, 1233, 0, 1250, 1251, 1252, 0,
	0, 0, 0, 0, 739, 0, 0, 0, 0, 1248,
	0, 0, 0, 0, 1247, 747, 0, 0, 0, 0,
	746, 0, 734, 735, 736, 0, 733, 730, 731, 732,
	724, 725, 726, 727, 729, 0, 0, 0, 1247, 746,
	0, 734, 735, 736, 0, 733, 730, 731, 732, 724,
	725, 726, 727, 729, 0, 0, 0, 0, 1238, 0,
	0, 0, 0, 0, 1249, 0, 746, 0, 734, 735,
	736, 0, 733, 730, 731, 732, 724, 725, 726, 727,
	729, 721, 1238, 740, 741, 742, 0, 1253, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 723,
	0, 749, 0, 1248, 0, 0, 0, 0, 0, 937,
	953, 928, 945, 944, 0, 0, 930, 929, 0, 722,
	0, 955, 954, 0, 0, 737, 0, 1248, 1244, 1245,
	1246, 0, 1243, 1240, 1241, 1242, 1234, 1235, 1236, 1237,
	1239, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	950, 0, 942, 941, 0, 0, 0, 0, 1249, 0,
	940, 0, 0, 0, 0, 0, 0, 0, 0, 728,
	0, 0, 0, 0, 0, 939, 0, 0, 0, 0,
	0, 0, 1249, 0, 0, 0, 750, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 933,
	934, 935, 0, 590, 0, 0, 0, 0, 745, 0,
	0, 0, 0, 0, 738, 0, 0, 0, 0, 0,
	0, 0, 1244, 1245, 1246, 0, 1243, 1240, 1241, 1242,
	1234, 1235, 1236, 1237, 1239, 0, 0, 943, 0, 0,
	0, 0, 0, 0, 0, 0, 1244, 1245, 1246, 0,
	1243, 1240, 1241, 1242, 1234, 1235, 1236, 1237, 1239, 0,
	0, 938, 0, 0, 0, 0, 0, 0, 0, 739,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	747, 932, 0, 0, 0, 0, 0, 0, 0, 936,
	0, 0, 0, 0, 0, 957, 0, 0, 0, 0,
	0, 931, 0, 0, 951, 952, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 956, 0, 0,
	0, 746, 0, 734, 735, 736, 0, 733, 730, 731,
	732, 724, 725, 726, 727, 729,
}
var sqlPact = [...]int{

	2303, -1000, 19, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 871, -1000, -1000, -1000, 641, 681, 162, 1200, 1200,
	14960, -1000, -1000, 17666, 2144, 456, 461, 456, 456, 459,
	14960, 542, 609, 139, -1000, 590, 29, 17420, 13730, 1187,
	31, 13238, 323, 2303, 13484, 13730, 17174, 1037, 974, 971,
	13238, 16928, 16682, 16436, -1000, 8954, -1000, -1000, -1000, -1000,
	-1000, 838, -1000, 27, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 834, -1000, 13730, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 16190, 15944, 805, -1000,
	-1000, 510, 374, 1205, -1000, 45, -1000, -1000, -1000, 1035,
	-1000, 833, 1033, 1032, 1029, 1028, 371, 854, -1000, 534,
	805, -1000, 805, -1000, -1000, -1000, 516, 14960, -1000, 13238,
	-1000, 15698, 985, 15452, -1000, 590, -1000, -1000, -1000, 873,
	1183, 1183, 1183, 1213, 147, 145, 139, 8, 13730, -1000,
	324, 8, 6104, 6104, -1000, -1000, 323, -1000, 338, 11506,
	40, -1000, 6620, -1000, 825, 1106, 675, 652, 1102, -60,
	13238, 13730, 13730, 559, 15206, -1000, 1101, 106, 1099, -1000,
	103, 1098, -1000, 5, -1000, -1000, -1000, -1000, -1000, -1000,
	323, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 11762, 1727, 11762, -1000, -1000, 1244,
	-1000, -1000, 23, 22, 933, 925, 9468, 9212, 1155, 669,
	-1000, -1000, -1000, 44, 3766, 13730, 1059, 11762, 13730, 13730,
	13730, -1000, 13730, -1000, 932, -1000, 13730, -1000, 21, 9,
	-1000, 14960, -1000, 129, -1000, 322, 886, 14714, 1114, 884,
	-1000, 873, -1000, 743, 921, 7154, 7928, 139, -1000, -1000,
	139, 139, 7928, -1000, -1000, 13730, 8, 1231, 13730, 111,
	-1000, 19715, -1000, -1000, 7928, 7928, 7928, 7928, 7928, 710,
	-1000, -1000, -1000, 4538, -1000, -1000, 40, 321, 114, -1000,
	-1000, 320, 40, -1000, -1000, -1000, -1000, 319, 1349, 448,
	-1000, -1000, -1000, 7928, 380, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1044, 318, 316, -1000, -1000, -1000,
	-1000, 312, 310, 309, 308, 305, 304, 302, 301, 299,
	293, 290, 284, 282, 695, -1000, 397, -1000, -1000, 397,
	397, -1000, 240, 240, 247, -1000, -1000, -1000, 240, -1000,
	-1000, -1000, 364, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	266, 111, -1000, -1000, -1000, 13730, 40, -1000, -1000, -1000,
	7928, 3509, -14, -1000, 20339, -1000, -25, 793, -1000, 12746,
	1189, 1182, 1164, 13238, 514, 512, 13730, 13730, 388, 76,
	1228, 76, 10994, -1000, 13730, 13730, -1000, 13730, -1000, -1000,
	13730, -1000, 13730, 13730, 61, 12254, 509, -3, 12008, 13730,
	-1000, 37, -1000, -1000, 1027, 445, 688, 953, 811, -1000,
	-1000, -1000, -1000, 4, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1305, -1000, -1000, -1000, -1000, 1342,
	4, -1000, -1000, -1000, -1000, -1000, 1348, -1000, -1000, -1000,
	-1000, 3766, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 13730,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 688, 953, -1000,
	-1000, 13238, 12500, 1096, 816, 883, -1000, -1000, 351, 1095,
	-1000, -1000, -1000, -1000, 20339, -1000, 20339, 674, 959, -1000,
	959, 3, -1000, 19444, -1000, 263, -16, -1000, 388, 6104,
	10738, 20638, 13730, 524, 7928, 7928, 7928, 7928, 7928, 7928,
	7928, 7928, 7928, 7928, 7928, 7928, 7928, 7928, 7928, 7928,
	7928, 7928, 7928, 7928, 7928, 7928, 893, 508, 1324, 742,
	239, 3766, -1000, 1283, 1283, 1283, 20366, 20366, 223, 18,
	19104, -2, 40, -1000, -1000, 5828, 5570, 40, 4022, -1000,
	658, 1337, 392, 20339, 1068, 999, 261, 144, 142, 7928,
	910, 7928, 8186, 7928, 7928, 4796, 7928, 7928, 7928, 7928,
	7928, 7928, -1000, 258, -1000, -1000, -1000, -1000, 1332, -1000,
	-1000, 1325, -1000, 523, 521, 1321, 388, 140, -1000, 2369,
	-1000, -1000, 6620, -1000, 713, 13730, 13730, 13730, -1000, -1000,
	878, 14468, -1000, 20638, 13730, -1000, 251, 250, 944, 942,
	13730, 13730, 14222, 13976, 13730, 671, 13730, 13730, 603, -1000,
	614, 7928, 689, -1000, 10226, 401, 13730, 636, 91, -1000,
	-1000, -1000, 350, 13730, -1000, -1000, -1000, 106, -1000, 103,
	-1000, -1000, 13730, 12008, -3, -4, -1000, -1000, 13730, 953,
	-1000, -1000, -1000, 599, -1000, 684, -1000, 9724, -1000, -1000,
	-1000, 658, -1000, -36, -1000, -1000, -1000, -1000, 124, -8,
	-1000, -1000, -1000, -1000, -1000, 13730, 300, 13730, 13730, 13730,
	1092, 1347, 13730, -1000, -1000, -1000, 7928, -1000, -1000, -1000,
	29, 13730, -1000, 998, -1000, -10, 1301, -88, 12992, -1000,
	9970, -1000, 1246, -1000, -1000, -1000, -1000, 75, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 247,
	695, 240, 240, 240, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 364, -1000, 397, 397, 397, -1000, -1000, -1000, 370,
	537, 537, 1251, 1251, 1251, 1251, 1719, 1719, 511, 846,
	20137, 20137, 20137, 164, 411, 411, 20137, 20137, 20137, 20366,
	205, 2159, 7928, 506, 735, 239, 7928, -1000, 1319, -1000,
	-1000, -1000, 1026, 238, 8186, 8186, -1000, -1000, -1000, 4538,
	-1000, -1000, 237, 7928, -1000, 7928, -22, -23, -1000, 20339,
	-1000, -26, -1000, -1000, -12, 7928, 7928, 7928, 122, -1000,
	505, -1000, 501, 497, 490, -1000, 236, 121, 561, -1000,
	7928, 731, 234, 229, 7928, -1000, -1000, 20320, 116, 1025,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 115, 20055, 113,
	2925, -1000, 8186, 8186, 8186, 4538, 226, 112, 19417, -101,
	20036, 6878, 6878, 6878, 110, 19999, 7928, -101, 2865, 2685,
	2660, -32, -38, -39, 1316, -40, 104, 367, 365, 101,
	998, -1000, -1000, 7928, -1000, -1000, -1000, 484, 483, 1089,
	-1000, 863, -1000, 753, 7928, 13730, 218, 216, 723, -1000,
	1085, 918, 1084, 918, -1000, -25, 770, -1000, -1000, 482,
	-1000, 6104, 20339, -1000, 628, 1174, -44, -1000, -1000, -1000,
	6104, 388, 10994, 6620, -51, -1000, -1000, -36, -1000, -36,
	-1000, -1000, -1000, -1000, -1000, -1000, 13730, -1000, 12500, 213,
	13730, 211, 210, 207, 13730, -1000, 1114, -1000, 100, -1000,
	-1000, -1000, -1000, -1000, 993, 1210, 10738, 950, 948, 10738,
	941, 724, 724, 724, -1000, 12992, 3239, -1000, -1000, 13730,
	206, 10482, 99, 1301, 331, 330, -1000, 1315, 7928, 2159,
	7928, 8186, 8186, -1000, 2159, -1000, -1000, -1000, -1000, 1023,
	203, 7928, 20638, 20520, 20426, -57, 5312, -37, 19085, 7928,
	-1000, -1000, 114, -1000, 98, 6362, -1000, 19734, 0, 0,
	-1000, 895, 819, 650, 566, 1314, 1346, 1111, -1000, 7928,
	19771, -1000, 11250, 390, 738, 18820, 20638, -1000, 7928, -1000,
	1021, 7928, -1000, 20638, 8186, 8186, 8186, 8186, 8186, 8186,
	8186, 8186, 8186, 8186, 8186, 8186, 8186, 8186, 8186, 8186,
	8186, 8186, 8186, 934, 8186, 1274, 1274, 1274, -49, 5054,
	-1000, 1043, 1021, 7928, 7928, 20638, 96, 95, 87, -1000,
	7928, -101, 7928, 7928, 7928, -1000, -1000, -1000, 83, -1000,
	1309, -1000, -1000, -1000, -1000, 993, 19131, 13730, 13730, 13730,
	1075, 1677, -1000, 18793, -58, 13730, 13730, -1000, 937, 988,
	436, 13730, -1000, 13730, -1000, 13730, 13730, 13730, 13730, -53,
	6104, 209, 29, 13730, -53, 614, -1000, -1000, 348, -1000,
	-1000, 8698, 202, 13730, 12500, 8698, 780, -1000, -1000, 369,
	7928, 7928, 1301, 10738, 10738, 1268, 946, 10738, -1000, -1000,
	-1000, -1000, -1000, -1000, 957, 201, 13730, 12992, 463, 1308,
	81, 1238, 2159, 2567, 433, 7928, 20638, 20631, -67, -1000,
	7928, 7928, -1000, -72, -1000, 7928, -1000, 20339, -1000, 1326,
	7928, 73, 72, 70, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 69, -1000, -1000, 20339, 7928, -1000, -1000, 17912, 7928,
	66, -1000, 64, 20339, 1043, 20339, -1000, 637, 637, 1274,
	1274, 1274, 1274, 777, 777, 617, 882, 1864, 1864, 1864,
	2593, 346, 346, 1864, 1864, 1864, 1018, 930, 187, 2208,
	7928, -73, -1000, -1000, -1000, 20339, 20339, 63, -1000, -1000,
	-1000, -101, 1830, 18774, 18509, -1000, 58, 369, -1000, -1000,
	-1000, -1000, 13730, -1000, 13730, -1000, 13730, 851, -1000, -1000,
	936, 185, 8186, 13730, -1000, 729, -74, -78, 848, -1000,
	818, 7928, -1000, 20638, 918, 918, -1000, 470, 466, -1000,
	-53, 1119, 13730, 1163, -1000, -1000, -1000, 182, -79, -1000,
	217, 1185, 7928, -1000, -1000, 179, 8698, -80, -1000, -1000,
	56, -85, 13730, -1000, 13730, 20339, -101, -1000, 1268, -1000,
	178, 7928, 10738, -1000, -142, -1000, 347, -1000, 13730, -90,
	-1000, -1000, 328, 326, -1000, 7928, 7928, 20631, -94, -1000,
	20638, 2159, 2159, -1000, 18482, -1000, 19734, -1000, -1000, -1000,
	-1000, 20339, 702, -1000, 18463, -1000, -1000, -1000, 8186, 1009,
	177, 20638, 18198, -1000, -1000, 7928, -1000, -1000, -1000, -1000,
	-1000, 667, -1000, -1000, -1000, 7928, 2208, 175, -1000, 173,
	-1000, -1000, -1000, 679, -1000, -1000, 20339, 1186, -1000, -1000,
	13730, 13730, 498, -100, 13730, -1000, -1000, 4280, 729, 8698,
	1176, 40, 13730, 1176, 18171, 4022, -102, -1000, 13730, -1000,
	729, 170, -99, -1000, 1217, -1000, 13730, 20339, -1000, 957,
	-1000, 3766, -108, -1000, -1000, -1000, 2159, 2159, -1000, -1000,
	-1000, 55, 738, 1204, -1000, 20544, 8186, 20638, -112, -1000,
	18152, -1000, 2961, 909, 13730, 13730, 13730, 406, 13730, -1000,
	-1000, 551, -1000, 388, -1000, -1000, -1000, -1000, -1000, -1000,
	1185, -12, 729, -1000, -1000, 8698, 13730, 169, -118, -1000,
	-1000, -1000, -1000, 660, 7928, 20544, -119, -1000, -1000, -1000,
	750, 687, 54, -120, 150, -1000, 7928, -1000, 10994, -1000,
	1176, 49, -1000, -124, -1000, -1000, -1000, 47, 7670, 7670,
	-101, -1000, -1000, 771, 752, 573, -1000, -1000, -1000, -1000,
	-1000, 909, 13730, 20339, -106, -1000, -1000, 729, -1000, -1000,
	-1000, 8442, 796, 580, 19398, -1000, -1000, 1131, -1000, 429,
	1014, 1014, 750, -138, -1000, -1000, 1254, -1000, -1000, -1000,
	-1000, -1000, -1000, 1266, -1000, -1000, 943, -1000, -1000, -1000,
	7412, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1584, 1581, 1237, 1578, 1573, 1569, 1568, 1567, 92,
	1562, 122, 121, 1560, 89, 1556, 1555, 1546, 1540, 45,
	1537, 1536, 1535, 1531, 1530, 83, 39, 155, 1748, 153,
	1529, 1528, 1527, 9, 107, 101, 1526, 78, 68, 100,
	112, 716, 70, 1524, 1522, 132, 20, 23, 665, 99,
	137, 134, 119, 1521, 1520, 1518, 38, 1516, 1513, 1502,
	1500, 47, 18, 1499, 17, 1497, 14, 1496, 1492, 103,
	1491, 97, 114, 30, 124, 158, 1489, 65, 12, 71,
	1488, 27, 1486, 33, 80, 133, 1485, 43, 228, 67,
	26, 51, 1482, 1474, 1472, 1470, 84, 90, 60, 1469,
	1468, 72, 1466, 127, 129, 1465, 1464, 125, 1463, 1462,
	1460, 708, 1458, 1457, 622, 3, 28, 69, 5, 110,
	104, 25, 1456, 22, 1455, 1340, 991, 655, 1453, 54,
	32, 79, 44, 74, 35, 1452, 108, 1449, 1448, 1446,
	1444, 1440, 76, 1435, 59, 131, 42, 58, 88, 21,
	16, 36, 81, 115, 140, 109, 1434, 118, 1433, 37,
	1432, 1428, 570, 82, 1426, 1425, 1424, 411, 249, 185,
	53, 1422, 1421, 157, 102, 1415, 1414, 87, 1413, 1407,
	135, 1406, 130, 46, 1401, 113, 1400, 91, 1398, 0,
	50, 40, 1395, 126, 75, 1393, 1388, 1385, 1383, 24,
	2, 10, 6, 7, 4, 19, 11, 1382, 1381, 128,
	95, 1380, 139, 1379, 1377, 29, 1375, 1373, 15, 1369,
	13, 1367, 8, 1, 1366, 136, 1365, 98, 1364, 1268,
	1362, 138, 1356, 1326, 1262, 77,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 4, 4, 35, 35, 34, 34, 34, 34,
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
	34, 32, 32, 37, 37, 37, 36, 36, 31, 31,
	5, 5, 5, 9, 10, 10, 10, 10, 10, 10,
	74, 74, 73, 73, 76, 76, 11, 11, 12, 12,
	12, 12, 12, 158, 158, 157, 13, 18, 225, 225,
	225, 229, 229, 230, 230, 231, 231, 231, 231, 231,
	231, 231, 227, 227, 21, 21, 21, 21, 111, 111,
	113, 113, 113, 113, 40, 110, 110, 110, 110, 112,
	112, 112, 112, 182, 180, 180, 187, 187, 187, 53,
	53, 53, 53, 53, 54, 54, 54, 179, 179, 179,
	179, 188, 188, 188, 188, 188, 188, 55, 55, 55,
	186, 186, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 181, 181, 226, 226,
	228, 228, 8, 8, 56, 56, 57, 57, 117, 117,
	117, 117, 116, 197, 197, 198, 198, 198, 199, 199,
	199, 199, 199, 199, 199, 195, 195, 196, 193, 193,
	194, 194, 194, 194, 232, 232, 115, 115, 60, 60,
	202, 202, 202, 202, 200, 200, 200, 200, 200, 203,
	201, 204, 204, 204, 204, 204, 145, 145, 145, 24,
	7, 7, 100, 100, 64, 64, 149, 149, 149, 65,
	65, 150, 47, 47, 33, 33, 33, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 101, 101, 102, 102,
	16, 20, 23, 23, 23, 23, 23, 234, 234, 44,
	44, 44, 44, 45, 45, 114, 114, 114, 114, 114,
	39, 6, 6, 38, 38, 14, 14, 14, 14, 14,
	50, 50, 107, 107, 107, 109, 109, 108, 108, 108,
	87, 87, 25, 78, 78, 79, 79, 156, 80, 80,
	19, 19, 28, 28, 26, 26, 26, 26, 26, 26,
	27, 27, 29, 29, 29, 29, 29, 29, 29, 210,
	210, 210, 212, 212, 209, 15, 15, 15, 15, 211,
	211, 233, 233, 88, 88, 88, 59, 58, 58, 62,
	62, 61, 63, 63, 148, 85, 85, 85, 85, 103,
	104, 104, 105, 105, 106, 106, 84, 84, 132, 132,
	30, 30, 69, 69, 70, 70, 123, 123, 124, 124,
	122, 122, 122, 151, 151, 151, 151, 152, 152, 152,
	152, 152, 152, 146, 146, 146, 146, 147, 147, 91,
	91, 91, 91, 89, 89, 90, 90, 153, 153, 153,
	153, 86, 86, 154, 154, 154, 118, 118, 159, 159,
	159, 68, 68, 68, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 161, 161, 161, 161, 163,
	163, 163, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 164, 164, 171, 171, 172,
	172, 173, 174, 165, 165, 166, 166, 167, 168, 175,
	175, 175, 175, 177, 177, 169, 169, 169, 169, 169,
	170, 97, 97, 97, 97, 97, 97, 97, 97, 97,
	97, 97, 97, 97, 97, 98, 98, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
	126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
	126, 126, 126, 126, 126, 126, 126, 126, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	205, 205, 205, 205, 205, 205, 205, 207, 207, 208,
	208, 206, 206, 206, 206, 206, 206, 206, 206, 206,
	206, 206, 206, 206, 206, 206, 206, 206, 206, 206,
	206, 206, 206, 206, 206, 206, 213, 213, 214, 214,
	215, 215, 216, 216, 218, 219, 219, 219, 220, 224,
	224, 217, 217, 221, 221, 221, 222, 222, 223, 223,
	223, 223, 223, 136, 136, 136, 137, 137, 138, 75,
	75, 134, 134, 133, 133, 133, 135, 135, 92, 176,
	176, 176, 176, 176, 176, 176, 93, 93, 99, 94,
	94, 95, 95, 95, 95, 95, 95, 129, 130, 96,
	96, 96, 131, 131, 139, 143, 143, 142, 141, 141,
	140, 140, 121, 121, 121, 121, 120, 119, 81, 81,
	235, 235, 144, 144, 82, 82, 83, 77, 77, 155,
	155, 155, 155, 71, 71, 52, 52, 72, 72, 48,
	48, 51, 49, 49, 49, 49, 66, 66, 67, 67,
	46, 46, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 178, 178, 178, 41, 41, 41, 42,
	42, 43, 43, 184, 184, 184, 185, 185, 185, 185,
	183, 183, 183, 183, 183, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 191, 191, 191,
	191, 191, 191, 191, 191, 191, 191, 191, 191, 191,
	191, 191, 191, 191, 191, 191, 191, 191, 191, 191,
	191, 191, 191, 191, 191, 191, 191, 191, 191, 191,
	191, 191, 191, 191, 191, 191, 191, 191, 191, 191,
	191, 191, 190, 190, 190, 190, 190, 190, 190, 190,
	190, 190, 190, 190, 190, 192, 192, 192, 192, 192,
	192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
	192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
	192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
	192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
	192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
	192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
	192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
	192, 192, 192, 192,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 4, 6, 1, 3, 2, 5, 3, 6,
	4, 6, 6, 6, 4, 8, 2, 3, 3, 6,
	4, 3, 2, 1, 1, 0, 2, 0, 2, 0,
	1, 1, 1, 6, 3, 5, 4, 6, 4, 6,
	1, 3, 1, 2, 2, 3, 2, 5, 1, 1,
	1, 1, 1, 1, 3, 1, 6, 6, 1, 2,
	2, 1, 1, 1, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 2, 3, 6, 3, 2, 1,
	1, 1, 3, 3, 2, 3, 3, 3, 3, 1,
	3, 3, 2, 1, 1, 3, 1, 1, 1, 2,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 1, 1, 1, 1, 1, 0,
	1, 1, 2, 2, 4, 2, 4, 4, 4, 4,
	3, 3, 4, 3, 2, 4, 2, 0, 2, 0,
	2, 0, 6, 9, 1, 0, 1, 3, 1, 1,
	1, 1, 3, 2, 0, 3, 1, 2, 2, 1,
	1, 2, 4, 2, 5, 6, 7, 5, 3, 1,
	4, 5, 5, 10, 1, 1, 4, 0, 3, 0,
	2, 2, 2, 0, 1, 1, 2, 2, 0, 3,
	3, 2, 1, 1, 2, 2, 1, 2, 1, 4,
	10, 13, 1, 0, 1, 3, 3, 3, 5, 1,
	3, 1, 2, 0, 1, 1, 0, 6, 6, 8,
	6, 8, 8, 10, 8, 10, 1, 0, 2, 0,
	2, 2, 3, 3, 2, 2, 2, 1, 0, 1,
	3, 2, 0, 2, 1, 1, 1, 3, 3, 0,
	3, 4, 7, 3, 0, 6, 6, 8, 5, 7,
	1, 3, 1, 4, 2, 8, 5, 4, 3, 0,
	2, 0, 8, 1, 3, 1, 1, 3, 5, 5,
	1, 1, 3, 3, 1, 2, 3, 2, 3, 4,
	1, 1, 8, 8, 1, 2, 4, 4, 4, 2,
	2, 3, 1, 3, 6, 1, 1, 1, 1, 1,
	0, 1, 0, 1, 1, 0, 1, 1, 0, 1,
	0, 3, 1, 3, 2, 2, 2, 1, 1, 2,
	2, 3, 1, 1, 1, 1, 3, 0, 2, 0,
	2, 3, 2, 0, 1, 3, 3, 1, 1, 3,
	2, 4, 0, 3, 2, 1, 4, 3, 4, 5,
	4, 5, 4, 5, 2, 4, 1, 1, 0, 2,
	2, 2, 1, 1, 0, 4, 2, 1, 2, 2,
	4, 1, 3, 1, 2, 3, 2, 0, 2, 5,
	2, 3, 4, 0, 1, 1, 1, 1, 2, 4,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	5, 0, 1, 1, 1, 1, 1, 1, 2, 2,
	2, 2, 2, 1, 1, 3, 0, 1, 1, 1,
	1, 5, 2, 1, 1, 1, 1, 4, 1, 2,
	2, 1, 1, 1, 0, 1, 1, 4, 1, 4,
	1, 1, 1, 1, 1, 1, 1, 3, 3, 3,
	3, 3, 3, 3, 0, 1, 4, 1, 3, 3,
	5, 2, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 2, 3, 4, 4,
	5, 3, 4, 3, 3, 4, 3, 4, 3, 4,
	5, 6, 6, 7, 6, 7, 6, 7, 3, 4,
	1, 3, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 5, 6, 6, 7, 1, 1,
	1, 3, 1, 1, 1, 2, 2, 2, 1, 1,
	3, 5, 6, 8, 6, 6, 4, 4, 1, 1,
	1, 5, 1, 3, 1, 3, 1, 1, 1, 1,
	6, 4, 4, 4, 4, 6, 5, 5, 5, 4,
	8, 6, 6, 4, 4, 4, 5, 0, 5, 0,
	2, 0, 1, 3, 3, 2, 2, 0, 6, 1,
	0, 3, 0, 2, 2, 0, 1, 4, 2, 2,
	2, 2, 2, 4, 3, 5, 4, 3, 5, 1,
	3, 1, 3, 3, 3, 2, 1, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 4, 3, 2, 3,
	0, 3, 3, 2, 2, 1, 0, 2, 2, 3,
	2, 1, 1, 3, 5, 1, 2, 4, 2, 0,
	1, 0, 1, 1, 3, 5, 2, 2, 1, 2,
	1, 0, 1, 1, 1, 3, 3, 1, 3, 3,
	2, 1, 1, 1, 3, 1, 3, 1, 3, 1,
	2, 3, 1, 2, 2, 1, 1, 3, 3, 0,
	1, 2, 1, 1, 1, 1, 6, 2, 3, 5,
	1, 1, 1, 1, 2, 2, 1, 1, 1, 1,
	0, 3, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -9, -10, -11, -13,
	-14, -17, -18, -20, -19, -21, -22, -23, -16, -24,
	-25, 19, -6, -7, -8, -211, 83, 90, 105, 192,
	199, -26, -28, 207, 208, 29, 215, 52, 86, 194,
	189, 234, 58, -210, -29, -27, 279, 255, 261, 202,
	-30, 221, 248, 282, 221, 70, 116, 78, 120, 242,
	241, 70, 116, 221, -12, 279, -19, -14, -25, -9,
	-11, -229, 18, -230, -231, 58, 83, 105, 202, 120,
	78, 241, -229, -45, 199, -41, 4, -189, -191, 16,
	17, 19, 28, 29, 33, 37, 40, 51, 52, 53,
	55, 57, 60, 61, 68, 69, 70, 71, 73, 78,
	82, 83, 85, 90, 95, 96, 99, 101, 106, 111,
	112, 117, 120, 128, 130, 131, 136, 139, 142, 144,
	145, 146, 147, 148, 150, 151, 153, 155, 152, 158,
	160, 161, 167, 170, 173, 174, 177, 180, 181, 182,
	184, 185, 189, 187, 188, 190, 192, 194, 195, 197,
	200, 201, 204, 205, 207, 208, 210, 212, 214, 215,
	218, 216, 222, 223, 230, 234, 235, 236, 237, 240,
	241, 242, 245, 246, 247, 251, 256, 257, 258, 259,
	30, 31, 32, 34, 35, 38, 39, 43, 44, 45,
	47, 72, 74, 75, 89, 91, 97, 107, 109, 113,
	114, 121, 122, 123, 125, 134, 157, 159, 168, 172,
	176, 178, 183, 196, 203, 211, 217, 219, 225, 226,
	227, 231, 232, 248, 249, -111, 139, 205, 230, -112,
	-110, -182, 225, 148, -73, -41, 199, 4, 70, 51,
	71, 106, 116, 117, 131, 222, 225, 230, 18, 58,
	-234, 230, 230, -234, -234, -44, 230, 228, -45, -233,
	221, 221, -100, 70, 239, -27, -29, -28, -61, -62,
	238, 124, 88, 166, -26, -28, -210, -212, 184, -209,
	-41, -212, -58, -59, 18, 80, 283, -153, -48, 164,
	-41, -83, 279, -3, -153, 113, -41, -51, 113, -48,
	103, 126, 126, -154, -153, -41, 113, -52, 113, -51,
	-74, 113, -73, -158, -157, -185, 4, -189, -191, -190,
	248, 49, 59, 104, 119, 127, 129, 135, 137, 149,
	169, 171, 193, 209, 163, 283, 163, -41, -111, 45,
	-111, -113, -39, -40, 128, 180, 228, 264, 103, 259,
	-55, 5, 76, -76, 281, 103, -226, 163, 103, 103,
	103, -181, 103, 259, 128, 180, 221, -114, -39, -40,
	-114, 228, -45, -86, -153, -73, 113, 116, -41, 113,
	-61, -62, -85, -103, -104, 138, 162, -88, 18, 80,
	-88, -88, 37, 280, 280, 283, -212, -67, 279, -77,
	-155, -125, 272, -127, 270, 271, 276, 154, 260, -136,
	-48, -128, 9, 279, -139, -207, -28, 89, 24, -137,
	-138, 196, -41, 7, 8, 5, 6, -46, -161, -170,
	233, 92, 156, 41, -205, -206, 4, -189, -184, -162,
	-172, -166, -169, 125, 49, 63, 66, 64, 67, 206,
	243, 42, 91, 172, 176, 219, 231, 232, 113, 157,
	114, 47, 107, 134, 82, 31, 32, 34, 35, 43,
	44, 72, 74, 75, 97, 121, 122, 123, 159, 183,
	211, 217, 226, 227, 249, -190, -173, -174, -167, -168,
	-175, -77, -83, 272, -48, 279, -81, -121, -120, -119,
	277, 281, -82, -144, -125, 76, -35, 187, -34, 17,
	19, 83, 246, 89, 187, 187, 89, 284, -154, -50,
	-48, -50, 207, -41, 25, 89, -37, 283, 40, 190,
	89, -37, 283, 89, 280, 283, -225, -72, 221, 70,
	-49, -41, 272, -231, -225, 25, 283, 283, 136, -54,
	142, 153, 111, -180, 76, -187, -179, -145, 9, 233,
	92, 163, -186, 8, 271, -178, -185, 5, 7, 270,
	-180, 76, 61, -188, 5, 4, -170, -145, 76, 139,
	125, 281, -183, 4, -189, -191, -190, -192, 18, 20,
	21, 22, 23, 24, 25, 26, 27, 36, 41, 42,
	46, 48, 50, 56, 58, 62, 63, 64, 65, 66,
	67, 76, 77, 79, 80, 81, 84, 86, 88, 92,
	93, 94, 100, 102, 103, 105, 108, 110, 115, 116,
	118, 124, 126, 132, 133, 138, 140, 141, 154, 156,
	162, 163, 164, 165, 166, 175, 179, 186, 191, 202,
	206, 213, 220, 221, 224, 228, 229, 233, 238, 239,
	243, 244, 250, 252, 253, 254, 255, -182, -228, 100,
	-225, -182, -182, -182, -182, 136, -182, 283, 283, -45,
	-37, 283, 279, 154, -42, 113, -41, -38, 85, 154,
	-85, -104, -103, -105, -125, 18, -125, -127, -27, -27,
	-27, -63, -148, -125, -209, 25, -66, -41, -69, 283,
	103, 10, 48, 28, 270, 271, 272, 273, 98, 274,
	267, 268, 269, 266, 262, 263, 264, 54, 143, 198,
	12, 13, 14, 22, 165, 137, 260, 209, 127, 30,
	115, 25, 4, -125, -125, -125, -125, -125, 171, -28,
	-125, -75, -81, -28, -133, 277, 279, -81, 279, 5,
	5, 279, -140, -125, -213, 256, 100, 279, 279, 279,
	279, 279, 279, 279, 279, 279, 279, 279, 279, 279,
	279, 279, 178, -177, 251, -177, -177, -163, 279, -163,
	-164, 279, -163, 257, 261, 279, -69, -48, -121, -125,
	-183, 272, 283, 280, 283, 228, -101, 56, 50, -116,
	113, 50, -193, -41, 56, -194, 46, 239, 179, 102,
	-101, 56, -101, 56, 56, -153, 228, 228, -51, -41,
	-118, 253, -107, -19, 279, 76, 25, -107, -78, -79,
	-156, -80, -48, 279, -41, -41, -51, -52, -73, -74,
	-12, -157, 228, 283, -72, -66, -120, -119, 103, 230,
	-40, -39, -53, 182, 212, 188, 204, 283, 8, 7,
	7, 5, -183, -227, -41, -40, -39, -153, -56, -57,
	-117, -116, -195, -196, -193, 116, 239, 93, 89, 163,
	154, 264, 89, -106, 196, 197, 283, -33, 26, 79,
	279, 283, 280, -118, -155, -70, -151, -153, -28, -152,
	279, -159, -160, -162, -171, -165, -169, -170, 33, 39,
	38, 223, 203, 121, 122, 123, 211, 31, 183, 97,
	82, 75, 74, 159, 35, 34, -173, -174, -167, -168,
	72, 226, 227, 32, 44, 43, 249, 217, -73, 225,
	-125, -125, -125, -125, -125, -125, -125, -125, -125, -125,
	-125, -125, -125, -125, -125, -125, -125, -125, -125, -125,
	-125, -125, 137, 209, 30, 115, 228, 156, 154, 233,
	92, 240, 80, 160, -235, 220, 27, -131, -28, 279,
	-183, -136, 196, 279, 280, 283, -75, -135, 278, -125,
	-133, -75, 280, 280, -75, 250, 18, 80, 272, -97,
	258, 146, 73, 112, 145, -98, 201, 7, -143, -142,
	252, -214, 95, 108, 279, 280, 280, -125, -92, -176,
	4, 258, 146, 73, 112, 145, 201, -93, -125, -94,
	-126, -127, 270, 271, 276, 279, 196, -95, -125, -75,
	-125, 36, 133, 229, -96, -125, 103, -75, -125, -125,
	-125, -75, -75, -75, 279, 7, 7, 225, 225, 7,
	-118, 280, 278, 287, -144, -34, -48, -41, -41, 154,
	-116, 113, -159, -41, 279, 279, 130, 130, -41, -41,
	113, -41, 113, -41, -41, -35, 187, -41, -41, 187,
	-87, 191, -125, -87, -109, 163, -71, -48, 248, -41,
	191, -69, 283, 264, -71, -37, -37, -227, -49, -227,
	-39, 237, 53, 182, -187, -97, 283, 280, 283, -42,
	116, -42, -73, -48, 89, 5, -41, -148, -15, -19,
	-14, -25, -9, -41, -84, 108, 283, 59, -91, 129,
	149, 104, 135, 193, 119, -122, 284, -147, -146, 25,
	-41, -28, -152, -151, -68, 24, -97, 279, 259, -125,
	228, -235, 220, -131, -125, 156, 233, 92, 240, 80,
	160, 103, 279, -126, -126, -75, 279, -75, -125, 283,
	278, 278, 283, 280, -62, 283, -61, -125, -75, -75,
	280, 228, 228, 228, 228, 279, 280, -141, -142, 84,
	-125, -219, 170, 279, 279, -125, 25, 280, 103, 280,
	-99, 175, 280, 10, 270, 271, 272, 273, 98, 274,
	267, 268, 269, 266, 262, 263, 264, 54, 143, 198,
	12, 13, 14, 127, 115, -126, -126, -126, -75, 279,
	280, -129, -130, 103, 100, 25, -96, -96, -96, 280,
	103, -75, 283, 283, 283, 280, 280, 280, 7, 280,
	283, 280, 259, 259, 280, -84, -125, 228, 228, 89,
	154, -197, -194, -125, -66, 279, 279, -32, 83, 207,
	-102, 89, -37, 89, -37, 228, -101, 56, 228, -77,
	191, 55, 280, 283, -77, -118, -79, -144, 280, -41,
	-117, 279, -42, 279, 279, 279, -41, -38, 280, -132,
	110, 37, -151, 129, 129, -151, -91, 129, -89, 169,
	-89, -89, -147, -183, 285, -41, 279, 280, 277, 277,
	7, -125, -125, -126, -126, 103, 279, -125, -134, -159,
	22, 22, 280, -75, 280, 283, 280, -125, -133, 280,
	250, -62, -62, -62, 146, 112, 145, -98, 145, -98,
	-98, 7, 5, 86, -125, 224, -220, -41, 279, 253,
	-61, 280, -159, -125, -129, -125, -159, -126, -126, -126,
	-126, -126, -126, -126, -126, -126, -126, -126, -126, -126,
	-126, -126, -126, -126, -126, -126, 80, 154, 160, -126,
	283, -75, 280, -130, -129, -125, -125, -159, 280, 280,
	280, -75, -125, -125, -125, 280, 7, -132, 278, -41,
	-41, -116, 89, -198, 56, -199, 48, 154, 156, 239,
	179, 46, 76, 186, 280, 280, -66, -66, 154, 76,
	154, 76, 69, 235, -41, -41, -48, -41, -41, -41,
	-77, -108, 279, 163, -19, -48, -87, 264, -64, -149,
	-41, -208, 279, -205, -206, -46, 279, -65, -150, -41,
	-56, -64, 163, -215, 254, -125, -75, -151, -151, -90,
	244, 163, 129, -151, -124, -123, 101, 152, 279, -66,
	-146, 278, 7, 7, 280, 22, 22, -125, -134, 280,
	283, -125, -125, 280, -125, 5, -125, 280, 280, 280,
	280, -125, -224, -41, -125, 280, 280, -130, 103, 80,
	160, 279, -125, 280, 280, 283, 280, 280, 280, -215,
	-116, -41, -73, 156, 130, 279, -126, -48, -115, -232,
	57, 218, 280, 280, 156, 156, -125, -159, -37, -37,
	228, 228, 81, -66, 56, -83, -28, 279, 280, 283,
	-47, -81, 48, -47, -125, 279, -64, 280, 283, 280,
	280, -48, -216, -218, -41, -90, 279, -125, -151, 283,
	286, 264, -66, 280, 278, 278, -125, -125, 280, -159,
	280, -62, -217, 174, 280, -126, 103, 279, -134, 280,
	-125, -199, -125, -43, 279, 279, 186, -36, 48, -41,
	-41, 241, 155, 280, -41, -115, -149, -33, -73, -33,
	280, -75, 280, -150, -115, 279, 283, 25, -66, -123,
	-183, 280, 280, -62, 37, -126, -134, 280, 280, 280,
	-202, 144, -41, -66, -48, -31, 244, -73, 207, -118,
	-47, -62, -115, -64, -218, -220, 280, -221, 181, 197,
	-75, 280, -200, -203, -201, 163, 104, 173, 210, 280,
	280, -60, 279, -125, -78, -33, 280, 280, 280, -222,
	-223, 30, 236, 61, -125, -222, -201, 163, -203, 163,
	241, 78, -202, -66, -118, -115, -223, 177, 99, 196,
	177, 99, -204, 151, 190, 40, 207, -204, -200, 280,
	22, 16, 156, 76, -223,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 0, 50, 51, 52, 0, 0, 330, 0, 0,
	0, 300, -2, 0, 0, 258, 0, 258, 258, 262,
	0, 332, 223, 329, -2, 340, 0, 0, 0, 338,
	314, 0, 0, -2, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 66, 0, 68, 69, 70, 71,
	72, 0, 81, 82, 83, 85, 86, 87, 88, 89,
	90, 91, 0, 251, 836, 264, 746, 747, 748, 765,
	766, 767, 768, 769, 770, 771, 772, 773, 774, 775,
	776, 777, 778, 779, 780, 781, 782, 783, 784, 785,
	786, 787, 788, 789, 790, 791, 792, 793, 794, 795,
	796, 797, 798, 799, 800, 801, 802, 803, 804, 805,
	806, 807, 808, 809, 810, 811, 812, 813, 814, 815,
	816, 817, 818, 819, 820, 821, 822, 823, 824, 825,
	826, 827, 828, 829, 830, 831, 832, 833, 834, 835,
	837, 838, 839, 840, 841, 842, 843, 844, 845, 846,
	847, 848, 849, 850, 851, 852, 853, 854, 855, 856,
	857, 858, 859, 860, 861, 862, 863, 864, 865, 866,
	867, 868, 869, 870, 871, 872, 873, 874, 875, 876,
	877, 878, 879, 880, 881, 882, 883, 884, 885, 886,
	887, 888, 889, 890, 891, 892, 893, 894, 895, 896,
	897, 898, 899, 900, 901, 902, 903, 904, 905, 906,
	907, 908, 909, 910, 911, 94, 803, 840, 851, 99,
	109, 0, 905, -2, 113, 62, 836, 142, 143, 0,
	145, 159, 0, 0, 0, 157, 0, 0, 154, 0,
	269, 257, 269, 254, 255, 256, 259, 0, 250, 0,
	331, 0, 0, 0, 222, -2, 310, 311, -2, 0,
	335, 335, 335, 0, 0, 311, 0, 319, 826, 322,
	729, 320, 0, 0, 337, 336, 0, 315, 397, 0,
	719, 360, 0, 2, 0, 886, 0, 0, 886, 0,
	0, 0, 0, 0, 403, 54, 886, 45, 886, 715,
	45, 886, 60, 0, 73, 75, 756, 757, 758, 759,
	910, 912, 913, 914, 915, 916, 917, 918, 919, 920,
	921, 922, 923, 924, 0, 0, 0, 263, 95, 876,
	97, 98, 100, 101, 0, 0, 0, 0, 0, 0,
	112, 137, 138, 63, 0, 0, 161, 0, 0, 0,
	0, 150, 0, 151, 0, 153, 0, 252, 265, 266,
	253, 0, 261, 45, 401, 0, 886, 750, 274, 886,
	-2, 0, 306, 347, 348, 0, 0, 0, 333, 334,
	0, 0, 0, 302, 303, 0, 321, 0, 0, 363,
	707, 711, 712, 487, 0, 0, 0, 0, 0, 0,
	568, 569, 570, 0, 572, 573, 574, 881, 0, 578,
	579, 900, 719, 732, 733, 734, 735, 0, 0, 0,
	740, 741, 742, 691, 617, 588, -2, -2, 730, 425,
	426, 427, 428, -2, 912, 592, 594, 596, 597, 598,
	599, 0, 882, 896, 897, 904, 908, 909, 886, 893,
	887, 877, 884, 892, 786, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, 755, 449, 450, 455, 456,
	458, 363, 361, 398, 399, 0, 720, 698, 692, 693,
	0, 0, 0, 704, 702, 703, 22, 247, 24, 0,
	247, 247, 0, 0, 0, 0, 0, 0, 407, 0,
	280, 0, 0, 404, 0, 0, 56, 0, 43, 44,
	0, 58, 0, 0, 330, 0, 0, 78, 0, 782,
	717, 722, 725, 84, 0, 0, 0, 0, 0, 104,
	124, 125, 126, 105, 107, 114, 116, 117, 118, 127,
	128, 129, 130, 216, 0, 218, 140, 141, 743, 0,
	106, 108, 110, 111, 131, 132, 0, 134, 135, 136,
	470, 0, 64, 760, 761, 762, 763, 764, 925, 926,
	927, 928, 929, 930, 931, 932, 933, 934, 935, 936,
	937, 938, 939, 940, 941, 942, 943, 944, 945, 946,
	947, 948, 949, 950, 951, 952, 953, 954, 955, 956,
	957, 958, 959, 960, 961, 962, 963, 964, 965, 966,
	967, 968, 969, 970, 971, 972, 973, 974, 975, 976,
	977, 978, 979, 980, 981, 982, 983, 984, 985, 986,
	987, 988, 989, 990, 991, 992, 993, 994, 995, 996,
	997, 998, 999, 1000, 1001, 1002, 1003, 144, 146, 0,
	158, 147, 148, 149, 156, 152, 155, 0, 0, 260,
	219, 0, 165, 0, 0, 886, 749, 271, 0, 0,
	309, 345, 346, 349, 352, 353, 350, 487, 316, 317,
	318, 341, 342, 236, 323, 0, 0, 726, 407, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 701,
	0, 0, 710, 491, 492, 493, 515, 516, 0, -2,
	649, 0, 575, 576, 577, 0, 0, -2, 0, 737,
	484, 0, 0, 690, 619, 0, 0, 0, 0, 0,
	0, 0, 670, 676, 0, 0, 0, 0, 0, 0,
	0, 0, 439, 452, 463, 460, 459, 441, 0, 440,
	438, 0, 442, 0, 0, 0, 407, 0, 699, 0,
	696, 697, 0, 706, 0, 0, 0, 0, 246, 26,
	886, 0, 36, 0, 0, 189, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 721,
	291, 0, 291, 282, 0, 0, 0, 278, 363, 293,
	295, 296, 0, 0, 405, 55, 716, 45, 61, 45,
	67, 74, 0, 0, 79, 80, 723, 724, 0, 0,
	102, 103, 270, 0, 121, 0, 123, 0, 217, 745,
	744, 484, 65, 160, 92, 267, 268, 402, 0, 164,
	166, 168, 169, 170, 171, 750, 0, 750, 0, 0,
	0, 0, 0, 351, 354, 355, 0, 344, 234, 235,
	330, 0, 728, 357, 708, 362, 364, 372, 388, 375,
	0, 488, 413, 414, 415, 416, 417, 484, 420, 421,
	422, 423, 424, 432, 433, 434, 435, 436, 437, 446,
	0, 431, 431, 431, 443, 444, 447, 448, 453, 454,
	465, 466, 468, 464, 464, 464, 461, 462, 489, 0,
	494, 495, 496, 497, 498, 499, 500, 501, 502, 503,
	-2, -2, -2, 507, 508, 509, -2, -2, -2, 513,
	514, -2, 0, 0, 701, 0, 0, 521, 0, 524,
	526, 528, 0, 0, 0, 0, 700, 538, 682, 0,
	709, 523, 0, 0, 571, 0, 0, 0, 655, 649,
	656, 0, -2, 580, 340, 0, 0, 0, 0, 738,
	471, 472, 473, 474, 475, 476, 485, 0, 689, 685,
	0, 627, 0, 0, 0, 593, 595, 0, 0, 0,
	659, 660, 661, 662, 663, 664, 665, 0, 0, 0,
	0, 540, 0, 0, 0, 0, 900, 0, 649, 675,
	0, 0, 0, 0, 0, 649, 0, 681, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	357, 400, 694, 0, 705, 25, 238, 0, 0, 0,
	28, 886, 174, 0, 0, 0, 0, 0, 249, 37,
	886, 45, 886, 45, 38, 23, 247, 237, 240, 0,
	53, 0, 406, 275, 276, 0, 0, 713, 284, 281,
	0, 407, 0, 0, 0, 57, 59, 76, 718, 77,
	96, 119, 120, 122, 115, 133, 0, 162, 0, 0,
	750, 0, 0, 0, 0, 273, 274, 343, 0, 325,
	326, 327, 328, 727, 359, 0, 0, 0, 0, 0,
	0, 394, 394, 394, 392, 388, 0, 374, 387, 0,
	386, -2, 375, 0, 408, 410, 418, 0, 0, -2,
	0, 0, 0, 539, -2, 522, 525, 527, 529, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 650, 0,
	653, 654, 0, -2, 0, 0, 339, 340, 340, 340,
	586, 0, 0, 0, 0, 0, 0, 0, 686, 0,
	0, 587, 0, 0, 0, 0, 0, 601, 0, 602,
	0, 0, 603, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 542, 543, 544, 0, 0,
	604, 673, 674, 0, 0, 0, 0, 0, 0, 609,
	0, 680, 0, 0, 0, 613, 614, 615, 0, 429,
	0, 445, 467, 469, 457, 359, 0, 0, 0, 0,
	0, 172, 188, 0, 0, 0, 0, 30, 0, 0,
	0, 0, 34, 0, 40, 0, 0, 0, 0, 290,
	0, 289, 0, 0, 279, 291, 294, 297, 0, 93,
	167, 0, 0, 0, 165, 0, 0, 272, 324, 621,
	0, 0, 365, 0, 0, 0, 0, 0, 389, 393,
	390, 391, 373, 370, 0, 384, 0, 377, 0, 0,
	0, 490, -2, 0, 0, 0, 0, -2, 0, 651,
	0, 0, 683, 0, 644, 0, -2, 650, 657, 581,
	0, 0, 0, 0, 477, 478, 479, 480, 481, 482,
	483, 0, 739, 684, 688, 0, 625, 626, 630, 0,
	0, 591, 0, 658, 667, 668, 541, 545, 546, 547,
	548, 549, 550, 551, 552, 553, 554, -2, -2, -2,
	558, 559, 560, -2, -2, -2, 0, 0, 0, 669,
	0, 0, 647, 671, 672, 677, 678, 0, 606, 607,
	608, 679, 0, 0, 0, 451, 0, 621, 695, 242,
	244, 27, 0, 173, 0, 176, 0, 0, 179, 180,
	0, 0, 0, 0, 190, 197, 0, 0, 0, 42,
	0, 0, 248, 0, 45, 45, 239, 0, 0, 241,
	277, 0, 0, 0, 283, 714, 292, 0, 0, 224,
	233, 233, 0, 589, 590, 0, 0, 0, 229, 231,
	0, 0, 0, 312, 0, 358, 356, 378, 0, 380,
	0, 0, 0, 382, 0, 368, 0, 367, 0, 0,
	376, 411, 0, 0, 419, 0, 0, -2, 0, 532,
	0, -2, -2, 643, 650, 736, 340, 582, 584, 585,
	486, 687, 632, 629, 0, 616, 600, 666, 0, 0,
	0, 0, 650, 646, 605, 0, 611, 612, 430, 313,
	29, 0, 177, 178, 181, 0, 183, 752, 191, 0,
	194, 195, 192, 0, 31, 32, 41, 47, 33, 39,
	0, 0, 0, 0, 0, 298, 299, 0, 197, 0,
	236, 731, 0, 236, 0, 0, 0, 187, 0, 163,
	197, 0, 620, 622, 0, 379, 0, 396, 381, 0,
	371, 0, 0, 385, 412, 409, -2, -2, 533, 652,
	645, 0, 340, 0, 618, -2, 0, 0, 0, 648,
	0, 175, 0, 203, 0, 0, 0, 49, 0, 243,
	245, 0, 286, 407, 288, 185, 225, 226, 232, 227,
	233, 340, 197, 230, 220, 0, 0, 0, 0, 369,
	366, 383, 583, 635, 0, -2, 0, 566, 610, 182,
	208, 0, 0, 0, 199, 35, 0, 46, 0, 287,
	236, 0, 186, 0, 623, 624, 395, 0, 0, 0,
	631, 567, 184, 204, 205, 0, 200, 201, 202, 751,
	196, 203, 0, 48, 407, 228, 581, 197, 628, 633,
	636, -2, 854, 779, 0, 634, 206, 0, 207, 0,
	0, 0, 208, 0, 285, 221, 0, 638, 639, 640,
	641, 642, 209, 0, 212, 213, 0, 210, 193, 198,
	0, 211, 214, 215, 637,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 268, 3, 274, 269, 3,
	279, 280, 272, 270, 283, 271, 281, 273, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 287, 282,
	262, 264, 263, 3, 284, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 277, 3, 278, 267, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 285, 266, 286, 276,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 265,
	57605, 275, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:675
		{
			sqllex.(*scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:681
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:687
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 14:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:707
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 21:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:717
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 22:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:723
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.qname(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 23:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:727
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.qname(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 24:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:733
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 25:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:737
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:744
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 27:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:749
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 28:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:754
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 29:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:759
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 30:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:764
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: sqlDollar[3].str, Default: sqlDollar[4].union.expr()}
		}
	case 31:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:769
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: sqlDollar[3].str}
		}
	case 32:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:773
		{
			unimplemented()
		}
	case 33:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:776
		{
			sqlVAL.union.val = &AlterTableDropColumn{columnKeyword: sqlDollar[2].union.bool(), IfExists: true, Column: sqlDollar[5].str}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:781
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        sqlDollar[3].str,
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:791
		{
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:794
		{
			sqlVAL.union.val = &AlterTableAddConstraint{ConstraintDef: sqlDollar[2].union.constraintDef()}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:798
		{
			unimplemented()
		}
	case 38:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:800
		{
			unimplemented()
		}
	case 39:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:803
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   sqlDollar[5].str,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:812
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   sqlDollar[3].str,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 41:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:822
		{
			if containsSubquery(sqlDollar[3].union.expr()) {
				sqllex.Error("default expression contains a subquery")
				return 1
			}
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:830
		{
			sqlVAL.union.val = nil
		}
	case 43:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:836
		{
			sqlVAL.union.val = DropCascade
		}
	case 44:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:840
		{
			sqlVAL.union.val = DropRestrict
		}
	case 45:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:844
		{
			sqlVAL.union.val = DropDefault
		}
	case 46:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:849
		{
			unimplementedWithIssue(2473)
		}
	case 47:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:850
		{
		}
	case 48:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:853
		{
			unimplemented()
		}
	case 49:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:854
		{
		}
	case 53:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:865
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retExprs()}
		}
	case 54:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:872
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 55:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:876
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 56:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:880
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 57:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:888
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 58:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:896
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.qnames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:900
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.qnames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:906
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:910
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 62:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:916
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:920
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:926
		{
			sqlVAL.union.val = Indirection{NameIndirection(sqlDollar[2].str)}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:930
		{
			sqlVAL.union.val = append(sqlDollar[1].union.indirect(), NameIndirection(sqlDollar[3].str))
		}
	case 66:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:937
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:941
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:947
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 73:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:957
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 74:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:961
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 76:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:971
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: NameList(sqlDollar[6].union.strs()), Targets: sqlDollar[4].union.targetList()}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:978
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: NameList(sqlDollar[6].union.strs()), Targets: sqlDollar[4].union.targetList()}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:985
		{
			sqlVAL.union.val = TargetList{Tables: QualifiedNames(sqlDollar[1].union.qnames())}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:989
		{
			sqlVAL.union.val = TargetList{Tables: QualifiedNames(sqlDollar[2].union.qnames())}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:993
		{
			sqlVAL.union.val = TargetList{Databases: NameList(sqlDollar[2].union.strs())}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1000
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1003
		{
		}
	case 83:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1007
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1011
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 85:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1018
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 86:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1022
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 87:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1026
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 88:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1030
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 89:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1034
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 90:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1038
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 91:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1042
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 92:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1050
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1054
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 94:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1062
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 95:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1066
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 96:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1070
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1074
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 98:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1080
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 100:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1087
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1091
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1095
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1099
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1106
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1112
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname(), Values: sqlDollar[3].union.exprs()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1116
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname(), Values: sqlDollar[3].union.exprs()}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1120
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname()}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1124
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1131
		{
			unimplemented()
		}
	case 111:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1134
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1137
		{
			unimplemented()
		}
	case 114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1144
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1148
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1156
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1162
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1166
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1170
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 122:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1174
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1178
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1184
		{
			sqlVAL.union.val = Low
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1188
		{
			sqlVAL.union.val = Normal
		}
	case 126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1192
		{
			sqlVAL.union.val = High
		}
	case 127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1198
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1202
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 129:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1206
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1221
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1225
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1229
		{
			d, err := ParseDInterval(sqlDollar[2].str)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1239
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1243
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1248
		{
			unimplemented()
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1249
		{
			unimplemented()
		}
	case 139:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1250
		{
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1254
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1258
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1264
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1268
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1272
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.qname()}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1276
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1280
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.strs()}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1284
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1288
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1292
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1296
		{
			sqlVAL.union.val = &ShowTables{Name: sqlDollar[3].union.qname()}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1300
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1304
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1308
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1312
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 155:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1316
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.qname()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1322
		{
			sqlVAL.union.val = sqlDollar[2].union.qname()
		}
	case 157:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1326
		{
			sqlVAL.union.val = (*QualifiedName)(nil)
		}
	case 158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1332
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 159:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1337
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1343
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 161:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1347
		{
			sqlVAL.union.val = []string(nil)
		}
	case 162:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1354
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.qname(), IfNotExists: false, Defs: sqlDollar[5].union.tblDefs()}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1358
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.qname(), IfNotExists: true, Defs: sqlDollar[8].union.tblDefs()}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1365
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1371
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1375
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1381
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1385
		{ /* unimplemented */
		}
	case 171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1387
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1393
		{
			sqlVAL.union.val = newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1399
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 174:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1403
		{
			sqlVAL.union.val = []ColumnQualification(nil)
		}
	case 175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1409
		{
			sqlVAL.union.val = sqlDollar[3].union.colQual()
		}
	case 177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1413
		{
			unimplemented()
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1429
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1433
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1437
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1441
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1445
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1449
		{
			if containsSubquery(sqlDollar[2].union.expr()) {
				sqllex.Error("default expression contains a subquery")
				return 1
			}
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1457
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.qname(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1466
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.idxElems(),
				Storing: sqlDollar[6].union.strs(),
			}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1474
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:    Name(sqlDollar[3].str),
					Columns: sqlDollar[5].union.idxElems(),
					Storing: sqlDollar[7].union.strs(),
				},
			}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1486
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.famElems(),
			}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1498
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1503
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 190:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1509
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1515
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[3].union.strs()),
					Storing: sqlDollar[5].union.strs(),
				},
			}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1524
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[4].union.strs()),
				},
				PrimaryKey: true,
			}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1533
		{
			unimplemented()
		}
	case 196:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1550
		{
			sqlVAL.union.val = sqlDollar[3].union.strs()
		}
	case 197:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1554
		{
			sqlVAL.union.val = []string(nil)
		}
	case 198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1560
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 199:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1564
		{
			sqlVAL.union.val = []string(nil)
		}
	case 200:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1569
		{
			unimplemented()
		}
	case 201:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1570
		{
			unimplemented()
		}
	case 202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1571
		{
			unimplemented()
		}
	case 203:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1572
		{
		}
	case 204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1579
		{
			unimplemented()
		}
	case 205:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1580
		{
			unimplemented()
		}
	case 206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1581
		{
			unimplemented()
		}
	case 207:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1582
		{
			unimplemented()
		}
	case 208:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1583
		{
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1586
		{
			unimplemented()
		}
	case 210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1589
		{
			unimplemented()
		}
	case 211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1592
		{
			unimplemented()
		}
	case 212:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1593
		{
			unimplemented()
		}
	case 213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1594
		{
			unimplemented()
		}
	case 214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1595
		{
			unimplemented()
		}
	case 215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1596
		{
			unimplemented()
		}
	case 216:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1600
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1604
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1608
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 219:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1615
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.qnames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1622
		{
			sqlVAL.union.val = &CreateIndex{
				Name:    Name(sqlDollar[4].str),
				Table:   sqlDollar[6].union.qname(),
				Unique:  sqlDollar[2].union.bool(),
				Columns: sqlDollar[8].union.idxElems(),
				Storing: sqlDollar[10].union.strs(),
			}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql.y:1632
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.qname(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.strs(),
			}
		}
	case 222:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1645
		{
			sqlVAL.union.val = true
		}
	case 223:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1649
		{
			sqlVAL.union.val = false
		}
	case 224:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1655
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1659
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1668
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1671
		{
			unimplemented()
		}
	case 228:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1672
		{
			unimplemented()
		}
	case 229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1676
		{
			sqlVAL.union.val = FamilyElemList{sqlDollar[1].union.famElem()}
		}
	case 230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1680
		{
			sqlVAL.union.val = append(sqlDollar[1].union.famElems(), sqlDollar[3].union.famElem())
		}
	case 231:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1686
		{
			sqlVAL.union.val = FamilyElem{Column: Name(sqlDollar[1].str)}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1691
		{
			unimplemented()
		}
	case 233:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1692
		{
		}
	case 234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1696
		{
			sqlVAL.union.val = Ascending
		}
	case 235:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1700
		{
			sqlVAL.union.val = Descending
		}
	case 236:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1704
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 237:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1711
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1715
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.qname(), NewName: sqlDollar[6].union.qname(), IfExists: false}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1719
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.qname(), NewName: sqlDollar[8].union.qname(), IfExists: true}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1723
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 241:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1727
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 242:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1731
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.qname(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1735
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.qname(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 244:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1739
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 245:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1743
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 246:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1749
		{
			sqlVAL.union.val = true
		}
	case 247:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1753
		{
			sqlVAL.union.val = false
		}
	case 248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1758
		{
		}
	case 249:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1759
		{
		}
	case 250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1763
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1769
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1776
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1780
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1784
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1788
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1792
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1801
		{
		}
	case 258:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1802
		{
		}
	case 259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1806
		{
			sqlVAL.str = ""
		}
	case 260:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1810
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1814
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 262:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1818
		{
			sqlVAL.str = ""
		}
	case 263:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1824
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 264:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1828
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 265:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1834
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1838
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1842
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1846
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1850
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1856
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 271:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1862
		{
			sqlVAL.union.val = &CreateDatabase{Name: Name(sqlDollar[3].str), Encoding: sqlDollar[4].union.strVal()}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1866
		{
			sqlVAL.union.val = &CreateDatabase{IfNotExists: true, Name: Name(sqlDollar[6].str), Encoding: sqlDollar[7].union.strVal()}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1872
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1875
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 275:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1885
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retExprs()
		}
	case 276:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1891
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
		}
	case 277:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1896
		{
			unimplementedWithIssue(6637)
		}
	case 278:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1898
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1903
		{
			unimplementedWithIssue(6637)
		}
	case 280:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1911
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname()}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1915
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1921
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1925
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.qnames(), Rows: sqlDollar[4].union.slct()}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1929
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1935
		{
			sqlVAL.union.val = &OnConflict{Columns: NameList(sqlDollar[3].union.strs()), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1939
		{
			sqlVAL.union.val = &OnConflict{Columns: NameList(sqlDollar[3].union.strs()), DoNothing: true}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1945
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 288:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1949
		{
			unimplemented()
		}
	case 289:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1951
		{
			sqlVAL.union.val = []string(nil)
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1957
		{
			sqlVAL.union.val = sqlDollar[2].union.selExprs()
		}
	case 291:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1961
		{
			sqlVAL.union.val = SelectExprs(nil)
		}
	case 292:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1968
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retExprs()}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1974
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1978
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1988
		{
			sqlVAL.union.val = &UpdateExpr{Names: QualifiedNames{sqlDollar[1].union.qname()}, Expr: sqlDollar[3].union.expr()}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2000
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.qnames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2004
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.qnames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2048
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2054
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2058
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2073
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2077
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2081
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2085
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2089
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2093
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2127
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.tblExprs(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2139
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.tblExprs(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2151
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        TableExprs{&AliasedTableExpr{Expr: sqlDollar[2].union.qname()}},
				tableSelect: true,
			}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2159
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2168
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2177
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2195
		{
			unimplemented()
		}
	case 320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2196
		{
			unimplemented()
		}
	case 321:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2197
		{
			unimplemented()
		}
	case 322:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2200
		{
			unimplemented()
		}
	case 323:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2201
		{
			unimplemented()
		}
	case 324:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2204
		{
			unimplemented()
		}
	case 325:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2208
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 329:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2216
		{
			unimplemented()
		}
	case 330:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2217
		{
		}
	case 331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2220
		{
		}
	case 332:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2221
		{
		}
	case 333:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2225
		{
			sqlVAL.union.val = true
		}
	case 334:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2229
		{
			sqlVAL.union.val = false
		}
	case 335:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2233
		{
			sqlVAL.union.val = false
		}
	case 336:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2239
		{
			sqlVAL.union.val = true
		}
	case 337:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2244
		{
		}
	case 338:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2245
		{
		}
	case 339:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2249
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 340:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2253
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 341:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2259
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 342:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2265
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2269
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 344:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2275
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2283
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2292
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2303
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2316
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2323
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2330
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 354:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2344
		{
		}
	case 355:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2345
		{
		}
	case 356:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2371
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 357:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2375
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2381
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 359:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2385
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 360:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2391
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 361:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2395
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2407
		{
			sqlVAL.union.val = sqlDollar[2].union.tblExprs()
		}
	case 363:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2411
		{
			sqlVAL.union.val = TableExprs(nil)
		}
	case 364:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2417
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2421
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 366:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2427
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 367:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2432
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2438
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2443
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			index := a.Index
			if index == "" {
				index = b.Index
			} else if b.Index != "" {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			noIndexJoin := a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = &IndexHints{Index: index, NoIndexJoin: noIndexJoin}
		}
	case 370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2463
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2467
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 372:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2471
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 373:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2478
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), Hints: sqlDollar[2].union.indexHints(), As: sqlDollar[3].union.aliasClause()}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2482
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, As: sqlDollar[2].union.aliasClause()}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2486
		{
			unimplemented()
		}
	case 377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2504
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 378:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2508
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2512
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2516
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2520
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astNaturalJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr()}
		}
	case 382:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2524
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astNaturalJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2530
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: NameList(sqlDollar[4].union.strs())}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2534
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2538
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: NameList(sqlDollar[3].union.strs())}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2542
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2549
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2555
		{
			sqlVAL.str = astFullJoin
		}
	case 390:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2559
		{
			sqlVAL.str = astLeftJoin
		}
	case 391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2563
		{
			sqlVAL.str = astRightJoin
		}
	case 392:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2567
		{
			sqlVAL.str = astInnerJoin
		}
	case 393:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2573
		{
		}
	case 394:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2574
		{
		}
	case 395:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2585
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: NameList(sqlDollar[3].union.strs())}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2589
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2595
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 398:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2599
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 399:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2603
		{
			sqlVAL.union.val = sqlDollar[2].union.qname()
		}
	case 400:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2607
		{
			sqlVAL.union.val = sqlDollar[3].union.qname()
		}
	case 401:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2613
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2617
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 403:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2630
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname()}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2634
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2638
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2644
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 407:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2648
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2660
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 409:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2664
		{
			unimplementedWithIssue(2115)
		}
	case 410:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2665
		{
			unimplementedWithIssue(2115)
		}
	case 411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2668
		{
			unimplementedWithIssue(2115)
		}
	case 412:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2669
		{
			unimplementedWithIssue(2115)
		}
	case 413:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2670
		{
		}
	case 419:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2678
		{
			unimplemented()
		}
	case 420:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2680
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 421:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2684
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 422:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2688
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 423:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2692
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2696
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2717
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2726
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2740
		{
			sqlVAL.union.val = nil
		}
	case 432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2747
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2751
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2755
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2759
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2763
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2767
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 438:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2771
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newFloatColType(int(prec))
		}
	case 439:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2780
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 440:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2784
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2793
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2802
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2811
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 444:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2815
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 445:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2821
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 446:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2825
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2843
		{
			n, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newIntBitType(int(n))
		}
	case 452:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2854
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 457:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2870
		{
			n, err := sqlDollar[3].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2886
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 459:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2892
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 460:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2896
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2900
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 462:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2904
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 463:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2909
		{
		}
	case 464:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2910
		{
		}
	case 465:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2915
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 466:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2919
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 467:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2923
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 468:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2927
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 469:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2931
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2936
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 471:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2941
		{
			unimplemented()
		}
	case 472:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2942
		{
			unimplemented()
		}
	case 473:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2943
		{
			unimplemented()
		}
	case 474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2944
		{
			unimplemented()
		}
	case 475:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2945
		{
			unimplemented()
		}
	case 476:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2946
		{
			unimplemented()
		}
	case 477:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2947
		{
			unimplemented()
		}
	case 478:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2948
		{
			unimplemented()
		}
	case 479:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2949
		{
			unimplemented()
		}
	case 480:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2950
		{
			unimplemented()
		}
	case 481:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2951
		{
			unimplemented()
		}
	case 482:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2952
		{
			unimplemented()
		}
	case 483:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2953
		{
			unimplemented()
		}
	case 484:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2954
		{
		}
	case 485:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2957
		{
			unimplemented()
		}
	case 486:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2958
		{
			unimplemented()
		}
	case 488:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2982
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2985
		{
			unimplemented()
		}
	case 490:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2986
		{
			unimplemented()
		}
	case 491:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2995
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2999
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3003
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3007
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3011
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3015
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3019
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3023
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3027
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3031
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3035
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3039
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3043
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3047
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3051
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3055
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3059
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3063
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3067
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3071
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3075
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3079
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3083
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3087
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3091
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3095
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3099
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3103
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3107
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3111
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3115
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3119
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3122
		{
			unimplemented()
		}
	case 524:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3124
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3128
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3132
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3136
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3140
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3144
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3148
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3152
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3156
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3160
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3164
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3168
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3172
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3176
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3180
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3184
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3201
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3205
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3209
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3213
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3217
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3221
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3225
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3229
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3233
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3237
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3241
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3245
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3249
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3253
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3257
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3261
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3265
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3269
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3273
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3277
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3281
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3285
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3289
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3293
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3297
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3301
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3305
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3317
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 570:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3322
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3326
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3332
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3336
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3340
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3346
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 578:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3350
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 579:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3354
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 580:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3362
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname()}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3366
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3369
		{
			unimplemented()
		}
	case 583:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3370
		{
			unimplemented()
		}
	case 584:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3372
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Type: All, Exprs: sqlDollar[4].union.exprs()}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3376
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Type: Distinct, Exprs: sqlDollar[4].union.exprs()}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3380
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Exprs: Exprs{StarExpr()}}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3393
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 588:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3397
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 589:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3406
		{
			unimplemented()
		}
	case 590:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3407
		{
			unimplemented()
		}
	case 591:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3411
		{
			unimplemented()
		}
	case 592:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3413
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3417
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3421
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3425
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3428
		{
			unimplemented()
		}
	case 597:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3429
		{
			unimplemented()
		}
	case 598:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3430
		{
			unimplemented()
		}
	case 599:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3431
		{
			unimplemented()
		}
	case 600:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3433
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3437
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3441
		{
			sqlVAL.union.val = &OverlayExpr{FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3445
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "STRPOS"}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3449
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3452
		{
			unimplemented()
		}
	case 606:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3454
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3458
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "LTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3462
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "RTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3466
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3470
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3474
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3478
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3482
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3486
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3490
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3496
		{
			unimplemented()
		}
	case 617:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3497
		{
		}
	case 618:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3500
		{
			unimplemented()
		}
	case 619:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3501
		{
		}
	case 620:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3505
		{
			unimplemented()
		}
	case 621:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3506
		{
		}
	case 622:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3509
		{
			unimplemented()
		}
	case 623:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3510
		{
			unimplemented()
		}
	case 624:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3513
		{
			unimplemented()
		}
	case 625:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3516
		{
			unimplemented()
		}
	case 626:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3517
		{
			unimplemented()
		}
	case 627:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3518
		{
		}
	case 628:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3522
		{
			unimplemented()
		}
	case 629:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3533
		{
			unimplemented()
		}
	case 630:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3534
		{
		}
	case 631:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3537
		{
			unimplemented()
		}
	case 632:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3538
		{
		}
	case 633:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3546
		{
			unimplemented()
		}
	case 634:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3547
		{
			unimplemented()
		}
	case 635:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3548
		{
		}
	case 636:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3551
		{
			unimplemented()
		}
	case 637:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3552
		{
			unimplemented()
		}
	case 638:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3558
		{
			unimplemented()
		}
	case 639:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3559
		{
			unimplemented()
		}
	case 640:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3560
		{
			unimplemented()
		}
	case 641:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3561
		{
			unimplemented()
		}
	case 642:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3562
		{
			unimplemented()
		}
	case 643:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3573
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3577
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3581
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3587
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3591
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3597
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3638
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3642
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 651:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3648
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3652
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3658
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3662
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3666
		{
			sqlVAL.union.val = &Array{nil}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3672
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3676
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 658:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3682
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3704
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3708
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3714
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 669:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3721
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3725
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 671:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3742
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3746
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3750
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3754
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3758
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 676:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3762
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 677:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3768
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 678:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3774
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 679:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3780
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 680:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3784
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 681:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3788
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 682:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3794
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3798
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3809
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3816
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3820
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 687:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3826
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3832
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 689:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3836
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 691:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3843
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 692:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3849
		{
			sqlVAL.union.val = sqlDollar[1].union.indirectElem()
		}
	case 693:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3853
		{
			sqlVAL.union.val = sqlDollar[1].union.indirectElem()
		}
	case 694:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3857
		{
			sqlVAL.union.val = &ArrayIndirection{Begin: sqlDollar[2].union.expr()}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3861
		{
			sqlVAL.union.val = &ArrayIndirection{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr()}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3867
		{
			sqlVAL.union.val = NameIndirection(sqlDollar[2].str)
		}
	case 697:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3873
		{
			sqlVAL.union.val = qualifiedStar
		}
	case 698:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3879
		{
			sqlVAL.union.val = Indirection{sqlDollar[1].union.indirectElem()}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3883
		{
			sqlVAL.union.val = append(sqlDollar[1].union.indirect(), sqlDollar[2].union.indirectElem())
		}
	case 700:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3888
		{
		}
	case 701:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3889
		{
		}
	case 703:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3898
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3904
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3908
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 706:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3917
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 707:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3923
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3927
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 709:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3933
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3942
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3946
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3950
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 713:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3958
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3962
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 715:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3968
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3972
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 717:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3978
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3982
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 719:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3993
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3997
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4003
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.qname(), Index: Name(sqlDollar[3].str)}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4014
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4018
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: Indirection{sqlDollar[2].union.indirectElem()}}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4022
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: Indirection{sqlDollar[2].union.indirectElem()}}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4026
		{
			sqlVAL.union.val = &QualifiedName{Indirect: Indirection{unqualifiedStar}}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4032
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4036
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 728:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4042
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 729:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4045
		{
		}
	case 730:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4055
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4059
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4066
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 733:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4070
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 734:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4074
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4078
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4081
		{
			unimplemented()
		}
	case 737:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4083
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4087
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4091
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[5].str}, Type: sqlDollar[1].union.colType()}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4095
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 741:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4099
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 742:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4103
		{
			sqlVAL.union.val = DNull
		}
	case 744:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4110
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 745:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4114
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4136
		{
			sqlVAL.str = ""
		}
	case 751:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4142
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 752:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4146
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
