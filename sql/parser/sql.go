// Code generated by go yacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"errors"
	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/sql/privilege"
	"github.com/cockroachdb/cockroach/util"
)

var errUnimplemented = errors.New("unimplemented")

func unimplemented() {
	panic(errUnimplemented)
}

func unimplementedWithIssue(issue int) {
	panic(util.UnimplementedWithIssueErrorf(issue, ""))
}

//line sql.y:43

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new sytax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in two forms, depending on the
// type of the value being accessed. Values and pointers are directly
// type asserted from the empty interface, meaning that they will panic
// if the type assertion is incorrect. Interfaces are handled differently
// because a nil instance of an interface inserted into the empty interface
// becomes a nil instance of the empty interface and therefore will fail a
// direct type assertion. Instead, a guarded type assertion must be used,
// which returns nil if the type assertion fails.
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	return u.val.(*StrVal)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) qname() *QualifiedName {
	return u.val.(*QualifiedName)
}
func (u *sqlSymUnion) qnames() QualifiedNames {
	return u.val.(QualifiedNames)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) indirectElem() IndirectionElem {
	if indirectElem, ok := u.val.(IndirectionElem); ok {
		return indirectElem
	}
	return nil
}
func (u *sqlSymUnion) indirect() Indirection {
	return u.val.(Indirection)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	if selectStmt, ok := u.val.(*Select); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	if selectStmt, ok := u.val.(SelectStatement); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	if constraintDef, ok := u.val.(ConstraintTableDef); ok {
		return constraintDef
	}
	return nil
}
func (u *sqlSymUnion) tblDef() TableDef {
	if tblDef, ok := u.val.(TableDef); ok {
		return tblDef
	}
	return nil
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() ColumnQualification {
	if colQual, ok := u.val.(ColumnQualification); ok {
		return colQual
	}
	return nil
}
func (u *sqlSymUnion) colQuals() []ColumnQualification {
	return u.val.([]ColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retExprs() ReturningExprs {
	return ReturningExprs(u.val.(SelectExprs))
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	if tblExpr, ok := u.val.(TableExpr); ok {
		return tblExpr
	}
	return nil
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	if joinCond, ok := u.val.(JoinCond); ok {
		return joinCond
	}
	return nil
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	if alterTableCmd, ok := u.val.(AlterTableCmd); ok {
		return alterTableCmd
	}
	return nil
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) famElem() FamilyElem {
	return u.val.(FamilyElem)
}
func (u *sqlSymUnion) famElems() FamilyElemList {
	return u.val.(FamilyElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}

//line sql.y:281
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const DOT_DOT = 57353
const LESS_EQUALS = 57354
const GREATER_EQUALS = 57355
const NOT_EQUALS = 57356
const ERROR = 57357
const ACTION = 57358
const ADD = 57359
const ALL = 57360
const ALTER = 57361
const ANALYSE = 57362
const ANALYZE = 57363
const AND = 57364
const ANY = 57365
const ANNOTATE_TYPE = 57366
const ARRAY = 57367
const AS = 57368
const ASC = 57369
const ASYMMETRIC = 57370
const AT = 57371
const BEGIN = 57372
const BETWEEN = 57373
const BIGINT = 57374
const BIT = 57375
const BLOB = 57376
const BOOL = 57377
const BOOLEAN = 57378
const BOTH = 57379
const BY = 57380
const BYTEA = 57381
const BYTES = 57382
const CASCADE = 57383
const CASE = 57384
const CAST = 57385
const CHAR = 57386
const CHARACTER = 57387
const CHARACTERISTICS = 57388
const CHECK = 57389
const COALESCE = 57390
const COLLATE = 57391
const COLLATION = 57392
const COLUMN = 57393
const COLUMNS = 57394
const COMMIT = 57395
const COMMITTED = 57396
const CONCAT = 57397
const CONFLICT = 57398
const CONSTRAINT = 57399
const COVERING = 57400
const CREATE = 57401
const CROSS = 57402
const CUBE = 57403
const CURRENT = 57404
const CURRENT_CATALOG = 57405
const CURRENT_DATE = 57406
const CURRENT_ROLE = 57407
const CURRENT_TIME = 57408
const CURRENT_TIMESTAMP = 57409
const CURRENT_USER = 57410
const CYCLE = 57411
const DATA = 57412
const DATABASE = 57413
const DATABASES = 57414
const DATE = 57415
const DAY = 57416
const DEC = 57417
const DECIMAL = 57418
const DEFAULT = 57419
const DEFERRABLE = 57420
const DELETE = 57421
const DESC = 57422
const DISTINCT = 57423
const DO = 57424
const DOUBLE = 57425
const DROP = 57426
const ELSE = 57427
const ENCODING = 57428
const END = 57429
const ESCAPE = 57430
const EXCEPT = 57431
const EXISTS = 57432
const EXPLAIN = 57433
const EXTRACT = 57434
const FALSE = 57435
const FAMILY = 57436
const FETCH = 57437
const FILTER = 57438
const FIRST = 57439
const FLOAT = 57440
const FLOORDIV = 57441
const FOLLOWING = 57442
const FOR = 57443
const FORCE_INDEX = 57444
const FOREIGN = 57445
const FROM = 57446
const FULL = 57447
const GRANT = 57448
const GRANTS = 57449
const GREATEST = 57450
const GROUP = 57451
const GROUPING = 57452
const HAVING = 57453
const HIGH = 57454
const HOUR = 57455
const IF = 57456
const IFNULL = 57457
const IN = 57458
const INDEX = 57459
const INDEXES = 57460
const INITIALLY = 57461
const INNER = 57462
const INSERT = 57463
const INT = 57464
const INT64 = 57465
const INTEGER = 57466
const INTERSECT = 57467
const INTERVAL = 57468
const INTO = 57469
const IS = 57470
const ISOLATION = 57471
const JOIN = 57472
const KEY = 57473
const KEYS = 57474
const LATERAL = 57475
const LEADING = 57476
const LEAST = 57477
const LEFT = 57478
const LEVEL = 57479
const LIKE = 57480
const LIMIT = 57481
const LOCAL = 57482
const LOCALTIME = 57483
const LOCALTIMESTAMP = 57484
const LOW = 57485
const LSHIFT = 57486
const MATCH = 57487
const MINUTE = 57488
const MONTH = 57489
const NAME = 57490
const NAMES = 57491
const NATURAL = 57492
const NEXT = 57493
const NO = 57494
const NO_INDEX_JOIN = 57495
const NORMAL = 57496
const NOT = 57497
const NOTHING = 57498
const NULL = 57499
const NULLIF = 57500
const NULLS = 57501
const NUMERIC = 57502
const OF = 57503
const OFF = 57504
const OFFSET = 57505
const ON = 57506
const ONLY = 57507
const OR = 57508
const ORDER = 57509
const ORDINALITY = 57510
const OUT = 57511
const OUTER = 57512
const OVER = 57513
const OVERLAPS = 57514
const OVERLAY = 57515
const PARTIAL = 57516
const PARTITION = 57517
const PLACING = 57518
const POSITION = 57519
const PRECEDING = 57520
const PRECISION = 57521
const PRIMARY = 57522
const PRIORITY = 57523
const RANGE = 57524
const READ = 57525
const REAL = 57526
const RECURSIVE = 57527
const REF = 57528
const REFERENCES = 57529
const RENAME = 57530
const REPEATABLE = 57531
const RELEASE = 57532
const RESTRICT = 57533
const RETURNING = 57534
const REVOKE = 57535
const RIGHT = 57536
const ROLLBACK = 57537
const ROLLUP = 57538
const ROW = 57539
const ROWS = 57540
const RSHIFT = 57541
const SAVEPOINT = 57542
const SEARCH = 57543
const SECOND = 57544
const SELECT = 57545
const SERIAL = 57546
const SERIALIZABLE = 57547
const SESSION = 57548
const SESSION_USER = 57549
const SET = 57550
const SHOW = 57551
const SIMILAR = 57552
const SIMPLE = 57553
const SMALLINT = 57554
const SNAPSHOT = 57555
const SOME = 57556
const SQL = 57557
const START = 57558
const STRICT = 57559
const STRING = 57560
const STORING = 57561
const SUBSTRING = 57562
const SYMMETRIC = 57563
const TABLE = 57564
const TABLES = 57565
const TEXT = 57566
const THEN = 57567
const TIME = 57568
const TIMESTAMP = 57569
const TIMESTAMPTZ = 57570
const TO = 57571
const TRAILING = 57572
const TRANSACTION = 57573
const TREAT = 57574
const TRIM = 57575
const TRUE = 57576
const TRUNCATE = 57577
const TYPE = 57578
const UNBOUNDED = 57579
const UNCOMMITTED = 57580
const UNION = 57581
const UNIQUE = 57582
const UNKNOWN = 57583
const UPDATE = 57584
const UPSERT = 57585
const USER = 57586
const USING = 57587
const VALID = 57588
const VALIDATE = 57589
const VALUE = 57590
const VALUES = 57591
const VARCHAR = 57592
const VARIADIC = 57593
const VARYING = 57594
const WHEN = 57595
const WHERE = 57596
const WINDOW = 57597
const WITH = 57598
const WITHIN = 57599
const WITHOUT = 57600
const YEAR = 57601
const ZONE = 57602
const NOT_LA = 57603
const WITH_LA = 57604
const POSTFIXOP = 57605
const UMINUS = 57606

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXPLAIN",
	"EXTRACT",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HOUR",
	"IF",
	"IFNULL",
	"IN",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARTIAL",
	"PARTITION",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SNAPSHOT",
	"SOME",
	"SQL",
	"START",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"TABLE",
	"TABLES",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'!'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:4458

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 21,
	284, 21,
	-2, 330,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 32,
	1, 301,
	164, 301,
	192, 301,
	281, 301,
	284, 301,
	-2, 311,
	-1, 44,
	1, 304,
	164, 304,
	192, 304,
	281, 304,
	284, 304,
	-2, 310,
	-1, 53,
	1, 21,
	284, 21,
	-2, 330,
	-1, 244,
	1, 139,
	284, 139,
	-2, 812,
	-1, 276,
	139, 340,
	163, 340,
	-2, 307,
	-1, 279,
	139, 339,
	163, 339,
	-2, 305,
	-1, 391,
	139, 339,
	163, 339,
	-2, 308,
	-1, 447,
	280, 756,
	-2, 749,
	-1, 448,
	280, 757,
	-2, 750,
	-1, 454,
	5, 470,
	280, 470,
	-2, 895,
	-1, 477,
	5, 436,
	-2, 872,
	-1, 478,
	5, 464,
	280, 464,
	-2, 873,
	-1, 479,
	5, 444,
	-2, 874,
	-1, 480,
	5, 443,
	-2, 875,
	-1, 481,
	5, 464,
	280, 464,
	-2, 878,
	-1, 482,
	5, 464,
	280, 464,
	-2, 879,
	-1, 483,
	5, 465,
	-2, 882,
	-1, 484,
	5, 431,
	-2, 883,
	-1, 485,
	5, 431,
	-2, 884,
	-1, 486,
	5, 446,
	-2, 887,
	-1, 487,
	5, 432,
	-2, 892,
	-1, 488,
	5, 433,
	-2, 893,
	-1, 489,
	5, 434,
	-2, 894,
	-1, 490,
	5, 431,
	-2, 898,
	-1, 491,
	5, 437,
	-2, 903,
	-1, 492,
	5, 435,
	-2, 906,
	-1, 493,
	5, 462,
	280, 462,
	-2, 907,
	-1, 494,
	5, 466,
	-2, 910,
	-1, 495,
	5, 468,
	-2, 911,
	-1, 496,
	5, 461,
	280, 461,
	-2, 915,
	-1, 762,
	89, 311,
	125, 311,
	139, 311,
	163, 311,
	167, 311,
	239, 311,
	-2, 576,
	-1, 770,
	280, 734,
	-2, 723,
	-1, 975,
	12, 0,
	13, 0,
	14, 0,
	263, 0,
	264, 0,
	265, 0,
	-2, 505,
	-1, 976,
	12, 0,
	13, 0,
	14, 0,
	263, 0,
	264, 0,
	265, 0,
	-2, 506,
	-1, 977,
	12, 0,
	13, 0,
	14, 0,
	263, 0,
	264, 0,
	265, 0,
	-2, 507,
	-1, 981,
	12, 0,
	13, 0,
	14, 0,
	263, 0,
	264, 0,
	265, 0,
	-2, 511,
	-1, 982,
	12, 0,
	13, 0,
	14, 0,
	263, 0,
	264, 0,
	265, 0,
	-2, 512,
	-1, 983,
	12, 0,
	13, 0,
	14, 0,
	263, 0,
	264, 0,
	265, 0,
	-2, 513,
	-1, 986,
	31, 0,
	116, 0,
	138, 0,
	210, 0,
	261, 0,
	-2, 518,
	-1, 1017,
	172, 647,
	-2, 650,
	-1, 1177,
	89, 311,
	125, 311,
	139, 311,
	163, 311,
	167, 311,
	239, 311,
	-2, 388,
	-1, 1185,
	31, 0,
	116, 0,
	138, 0,
	210, 0,
	261, 0,
	-2, 519,
	-1, 1190,
	31, 0,
	116, 0,
	138, 0,
	210, 0,
	261, 0,
	-2, 520,
	-1, 1209,
	172, 646,
	-2, 649,
	-1, 1360,
	31, 0,
	116, 0,
	138, 0,
	210, 0,
	261, 0,
	-2, 521,
	-1, 1365,
	128, 0,
	-2, 531,
	-1, 1374,
	172, 648,
	-2, 651,
	-1, 1417,
	12, 0,
	13, 0,
	14, 0,
	263, 0,
	264, 0,
	265, 0,
	-2, 557,
	-1, 1418,
	12, 0,
	13, 0,
	14, 0,
	263, 0,
	264, 0,
	265, 0,
	-2, 558,
	-1, 1419,
	12, 0,
	13, 0,
	14, 0,
	263, 0,
	264, 0,
	265, 0,
	-2, 559,
	-1, 1423,
	12, 0,
	13, 0,
	14, 0,
	263, 0,
	264, 0,
	265, 0,
	-2, 563,
	-1, 1424,
	12, 0,
	13, 0,
	14, 0,
	263, 0,
	264, 0,
	265, 0,
	-2, 564,
	-1, 1425,
	12, 0,
	13, 0,
	14, 0,
	263, 0,
	264, 0,
	265, 0,
	-2, 565,
	-1, 1527,
	128, 0,
	-2, 532,
	-1, 1531,
	31, 0,
	116, 0,
	138, 0,
	210, 0,
	261, 0,
	-2, 535,
	-1, 1532,
	31, 0,
	116, 0,
	138, 0,
	210, 0,
	261, 0,
	-2, 537,
	-1, 1617,
	31, 0,
	116, 0,
	138, 0,
	210, 0,
	261, 0,
	-2, 536,
	-1, 1618,
	31, 0,
	116, 0,
	138, 0,
	210, 0,
	261, 0,
	-2, 538,
	-1, 1626,
	128, 0,
	-2, 566,
	-1, 1666,
	128, 0,
	-2, 567,
	-1, 1712,
	31, 0,
	138, 0,
	210, 0,
	261, 0,
	-2, 871,
}

const sqlNprod = 1008
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 21396

var sqlAct = [...]int{

	448, 1711, 1693, 1569, 1733, 1671, 1694, 844, 1695, 1710,
	852, 446, 1394, 1488, 1604, 1591, 718, 1515, 445, 911,
	1366, 280, 594, 1498, 438, 1509, 1489, 31, 1455, 765,
	302, 87, 1270, 1503, 87, 88, 245, 1174, 509, 892,
	920, 87, 1337, 14, 767, 1116, 1173, 1346, 87, 87,
	853, 538, 87, 497, 1269, 87, 87, 87, 1212, 410,
	1164, 87, 87, 87, 87, 894, 328, 1030, 699, 515,
	895, 66, 820, 696, 285, 829, 1002, 1160, 1034, 999,
	923, 1024, 714, 797, 20, 87, 1070, 801, 287, 43,
	567, 552, 10, 285, 6, 887, 720, 518, 420, 1122,
	323, 329, 379, 520, 279, 411, 510, 380, 549, 511,
	578, 921, 68, 325, 320, 846, 43, 8, 64, 330,
	67, 321, 69, 898, 290, 318, 395, 394, 83, 242,
	569, 393, 74, 548, 565, 531, 314, 1610, 722, 845,
	1611, 540, 43, 540, 288, 70, 1367, 284, 284, 1740,
	1172, 44, 1240, 915, 540, 1708, 45, 1701, 1692, 1590,
	1073, 915, 1530, 298, 529, 1205, 305, 1657, 723, 269,
	1128, 308, 315, 1687, 1668, 1662, 326, 915, 1530, 915,
	1653, 1644, 1619, 1207, 1590, 915, 1530, 726, 1614, 1208,
	1601, 721, 915, 292, 1590, 277, 722, 1598, 1589, 1574,
	276, 1599, 1590, 915, 1573, 1554, 1533, 725, 915, 1205,
	1205, 1240, 1529, 1258, 1259, 1260, 1530, 1465, 1370, 1430,
	1326, 915, 1205, 1526, 1321, 1320, 1287, 1285, 1284, 1321,
	1288, 1205, 1205, 1283, 1373, 1142, 1209, 1205, 87, 87,
	1205, 1246, 1206, 916, 818, 817, 546, 915, 1205, 816,
	547, 1593, 1162, 1027, 1144, 723, 1255, 731, 915, 867,
	1010, 910, 49, 881, 406, 1211, 1205, 512, 690, 87,
	405, 87, 513, 87, 726, 87, 689, 559, 558, 346,
	297, 51, 512, 53, 513, 723, 1256, 513, 593, 365,
	87, 541, 1028, 541, 725, 1709, 440, 1240, 392, 1707,
	1246, 87, 741, 1700, 541, 1663, 1600, 1240, 52, 386,
	1559, 1555, 87, 87, 87, 47, 87, 723, 49, 1128,
	398, 48, 1547, 1546, 725, 1029, 1026, 1545, 504, 1261,
	723, 508, 1540, 1539, 1538, 391, 726, 51, 1537, 46,
	773, 1257, 353, 1524, 731, 1256, 87, 354, 87, 1445,
	1440, 1483, 1439, 1438, 503, 1377, 725, 742, 328, 328,
	1355, 1240, 1336, 1292, 52, 1289, 596, 87, 1277, 87,
	87, 87, 87, 543, 87, 1268, 1239, 721, 87, 1236,
	1234, 1031, 385, 87, 1222, 544, 1246, 539, 1216, 87,
	1143, 1087, 1041, 329, 329, 46, 1703, 383, 693, 1040,
	1257, 597, 405, 1007, 404, 1396, 1656, 87, 1636, 1146,
	87, 330, 330, 1242, 1243, 1244, 1245, 1247, 1635, 598,
	1628, 1607, 1616, 315, 1241, 736, 733, 734, 735, 727,
	728, 729, 730, 732, 407, 1596, 692, 1588, 1025, 277,
	724, 1566, 1552, 1518, 276, 1496, 1364, 1354, 530, 533,
	1246, 1333, 285, 1240, 1332, 1258, 1259, 1260, 1522, 1183,
	1331, 1329, 1304, 770, 1252, 1253, 1254, 1482, 1251, 1248,
	1249, 1250, 1242, 1243, 1244, 1245, 1247, 1303, 1267, 555,
	512, 556, 1615, 1241, 1230, 513, 1008, 1240, 1229, 1221,
	1202, 589, 1198, 582, 1004, 802, 679, 805, 1255, 683,
	684, 685, 682, 686, 1101, 1100, 849, 688, 87, 1080,
	1039, 691, 914, 809, 596, 27, 727, 728, 729, 730,
	732, 703, 87, 704, 702, 768, 87, 724, 795, 87,
	87, 716, 1255, 794, 793, 87, 814, 87, 87, 792,
	87, 791, 1246, 87, 790, 87, 87, 812, 328, 597,
	277, 87, 87, 277, 277, 710, 499, 724, 711, 712,
	1244, 1245, 1247, 789, 788, 799, 800, 598, 869, 1241,
	787, 1261, 1101, 803, 786, 847, 1246, 847, 806, 1241,
	723, 862, 323, 329, 785, 764, 784, 1256, 783, 724,
	66, 782, 823, 781, 596, 834, 836, 780, 771, 726,
	810, 330, 724, 401, 402, 769, 46, 694, 303, 409,
	1357, 1356, 505, 359, 1612, 774, 886, 1487, 1129, 725,
	905, 1256, 1242, 1243, 1244, 1245, 1247, 49, 1291, 597,
	378, 68, 49, 1241, 807, 43, 778, 839, 808, 67,
	1290, 69, 1257, 842, 1184, 826, 51, 598, 374, 851,
	360, 51, 1504, 845, 860, 1397, 1035, 588, 326, 868,
	870, 865, 875, 871, 70, 864, 874, 863, 861, 731,
	798, 1124, 1225, 52, 1643, 1677, 1257, 1721, 52, 274,
	47, 1473, 87, 1722, 873, 47, 48, 268, 262, 267,
	521, 48, 522, 263, 87, 87, 1138, 521, 1582, 522,
	498, 57, 236, 1581, 46, 1316, 1252, 1253, 1254, 848,
	1251, 1248, 1249, 1250, 1242, 1243, 1244, 1245, 1247, 27,
	1296, 822, 723, 87, 1295, 1241, 87, 1315, 917, 283,
	1521, 1220, 1219, 587, 586, 1218, 580, 575, 357, 433,
	1217, 726, 1186, 58, 1251, 1248, 1249, 1250, 1242, 1243,
	1244, 1245, 1247, 991, 830, 596, 866, 523, 841, 1241,
	1642, 725, 963, 1046, 523, 282, 822, 740, 840, 382,
	85, 1084, 821, 246, 358, 1083, 964, 1005, 1001, 377,
	85, 271, 1571, 1679, 1736, 1306, 534, 291, 291, 1730,
	597, 301, 1383, 890, 301, 307, 301, 889, 1001, 1240,
	301, 316, 301, 246, 812, 891, 590, 284, 598, 812,
	833, 731, 1031, 1015, 908, 909, 540, 1117, 1086, 1318,
	87, 87, 87, 1126, 348, 1384, 87, 918, 1637, 87,
	272, 49, 1697, 1049, 1115, 87, 87, 87, 87, 87,
	1035, 87, 87, 729, 730, 732, 1721, 61, 275, 87,
	51, 87, 724, 527, 1386, 592, 741, 989, 87, 1689,
	1006, 1112, 526, 1121, 60, 59, 55, 87, 87, 591,
	925, 962, 1050, 87, 1139, 1690, 285, 52, 356, 281,
	1137, 1031, 328, 796, 47, 1729, 1090, 832, 1246, 1624,
	48, 1117, 1119, 62, 381, 1734, 1096, 1027, 355, 1313,
	87, 1698, 87, 87, 87, 1051, 1048, 87, 65, 1307,
	1031, 742, 56, 1131, 761, 1132, 87, 329, 1228, 1347,
	524, 284, 1091, 87, 1696, 87, 1720, 524, 1718, 1011,
	1016, 1502, 1019, 1256, 1735, 330, 1028, 1111, 1699, 1148,
	349, 351, 990, 1572, 819, 375, 903, 831, 1065, 1127,
	356, 1737, 285, 397, 1077, 1078, 1079, 1130, 1155, 1134,
	368, 1052, 1133, 1728, 987, 1179, 541, 1141, 1135, 1029,
	1026, 1188, 1140, 1145, 1098, 1147, 1136, 246, 246, 736,
	733, 734, 735, 727, 728, 729, 730, 732, 1257, 877,
	1550, 1000, 396, 1153, 724, 879, 347, 376, 63, 1157,
	581, 576, 345, 43, 1426, 1178, 1744, 1156, 85, 1158,
	301, 880, 246, 1182, 389, 1576, 397, 54, 1047, 878,
	931, 931, 453, 1575, 1564, 1031, 521, 997, 522, 291,
	1472, 1298, 285, 803, 1095, 806, 988, 1471, 72, 995,
	301, 1210, 800, 799, 904, 1469, 564, 701, 695, 1516,
	1167, 301, 301, 301, 1382, 535, 1251, 1248, 1249, 1250,
	1242, 1243, 1244, 1245, 1247, 1170, 1672, 1189, 687, 1187,
	1551, 1241, 1014, 560, 396, 1345, 282, 562, 1427, 75,
	1565, 1168, 1025, 1103, 1428, 553, 1743, 553, 563, 285,
	1102, 1512, 1342, 523, 1341, 355, 313, 312, 388, 80,
	1517, 993, 87, 992, 76, 1338, 246, 998, 553, 246,
	246, 246, 1224, 246, 1161, 1470, 1038, 246, 1302, 1627,
	1549, 1271, 85, 1468, 931, 1363, 77, 501, 698, 87,
	1461, 1235, 1456, 1197, 872, 1323, 373, 371, 370, 1169,
	1454, 79, 369, 87, 366, 87, 291, 87, 311, 719,
	1272, 87, 500, 779, 1274, 1275, 1276, 681, 1037, 1310,
	1462, 1312, 1452, 87, 1293, 1201, 87, 1311, 1309, 1203,
	1297, 1150, 87, 596, 1163, 1300, 87, 1317, 87, 1324,
	994, 906, 1214, 1215, 1240, 1314, 1322, 996, 902, 545,
	542, 537, 528, 525, 1391, 1351, 700, 519, 1583, 1325,
	1722, 584, 912, 1340, 399, 1585, 1343, 822, 597, 295,
	1328, 362, 838, 837, 1319, 1593, 1348, 1349, 1350, 1167,
	1330, 1335, 1266, 78, 822, 1639, 598, 1344, 414, 87,
	835, 1665, 1339, 1279, 1170, 1379, 1380, 1381, 1457, 3,
	1458, 403, 1658, 850, 1165, 717, 557, 301, 1195, 1181,
	1168, 1741, 1742, 1376, 1523, 913, 524, 883, 882, 1446,
	1193, 827, 81, 1460, 1166, 301, 1389, 400, 301, 843,
	1463, 71, 296, 1246, 301, 1056, 858, 859, 1511, 301,
	951, 951, 301, 363, 246, 246, 1385, 1387, 1388, 1398,
	553, 719, 1403, 304, 1358, 1286, 87, 87, 87, 261,
	1085, 82, 1433, 1082, 87, 87, 1081, 1032, 1169, 450,
	87, 884, 87, 1535, 87, 87, 87, 87, 1256, 1390,
	1466, 1467, 87, 1459, 1191, 1434, 1151, 885, 1196, 1163,
	772, 270, 87, 87, 1570, 73, 1447, 264, 265, 680,
	367, 1494, 87, 87, 1542, 1494, 87, 1501, 1493, 1688,
	1227, 1623, 1493, 1603, 1495, 87, 87, 1036, 1495, 1510,
	777, 25, 1491, 1371, 1484, 426, 412, 412, 1451, 1486,
	1453, 1519, 1500, 1257, 1167, 1299, 516, 897, 1480, 1400,
	1401, 896, 1507, 1508, 951, 1528, 1513, 1405, 1406, 1170,
	599, 585, 574, 1520, 449, 372, 568, 87, 577, 1165,
	1045, 1192, 502, 451, 928, 1168, 452, 929, 1194, 804,
	439, 926, 75, 324, 854, 1033, 1223, 775, 425, 1166,
	1437, 888, 431, 421, 950, 950, 430, 1012, 1431, 422,
	1514, 1171, 80, 301, 827, 352, 1548, 76, 240, 1441,
	241, 1120, 1248, 1249, 1250, 1242, 1243, 1244, 1245, 1247,
	1481, 907, 705, 87, 1308, 87, 1241, 87, 273, 77,
	1237, 1063, 301, 1169, 87, 246, 1055, 1053, 1044, 706,
	708, 384, 514, 855, 79, 299, 715, 364, 299, 919,
	310, 1560, 1180, 87, 299, 408, 310, 1497, 756, 757,
	758, 759, 760, 1563, 713, 931, 1702, 763, 294, 1584,
	1506, 293, 893, 87, 361, 87, 561, 1594, 1494, 876,
	1597, 266, 1634, 87, 1638, 1493, 1305, 776, 1586, 87,
	1592, 1495, 1676, 1561, 50, 19, 1579, 1580, 950, 931,
	931, 17, 16, 15, 1606, 1613, 13, 931, 931, 12,
	11, 18, 1154, 9, 7, 24, 23, 22, 5, 4,
	2, 1, 0, 1609, 0, 0, 78, 0, 1622, 301,
	1093, 1094, 0, 0, 0, 827, 0, 0, 1099, 0,
	931, 0, 0, 1629, 1104, 1105, 1107, 1109, 1110, 0,
	1113, 1114, 87, 87, 0, 813, 87, 0, 301, 1461,
	1125, 1632, 0, 1646, 87, 81, 0, 301, 0, 0,
	87, 0, 1494, 0, 0, 1655, 888, 553, 87, 1493,
	0, 1648, 888, 596, 1650, 1495, 285, 1647, 0, 1462,
	1578, 0, 0, 1654, 1659, 0, 709, 0, 1660, 0,
	1649, 812, 0, 0, 0, 1661, 87, 87, 87, 698,
	87, 698, 246, 301, 0, 1664, 1152, 0, 597, 1667,
	0, 0, 1680, 1674, 0, 1159, 0, 1683, 87, 0,
	0, 931, 1176, 0, 301, 0, 598, 1681, 1494, 0,
	1684, 1686, 1685, 0, 1682, 1493, 1678, 1620, 0, 0,
	87, 1495, 0, 0, 0, 0, 0, 0, 0, 0,
	1705, 0, 0, 0, 299, 0, 0, 1457, 0, 1458,
	1716, 1706, 1719, 1717, 87, 0, 0, 0, 1723, 0,
	0, 0, 1726, 1725, 1727, 0, 0, 0, 0, 0,
	1724, 0, 1460, 0, 506, 0, 1739, 1738, 0, 1463,
	0, 0, 0, 0, 0, 299, 532, 532, 0, 723,
	0, 0, 0, 1745, 0, 0, 930, 930, 0, 0,
	0, 0, 0, 0, 0, 951, 0, 1652, 726, 0,
	752, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	931, 0, 0, 0, 0, 0, 0, 0, 725, 0,
	0, 0, 1459, 0, 740, 0, 0, 0, 0, 951,
	951, 0, 0, 0, 412, 0, 0, 951, 951, 0,
	965, 966, 967, 968, 969, 970, 971, 972, 973, 974,
	975, 976, 977, 978, 979, 980, 981, 982, 983, 984,
	985, 986, 0, 0, 0, 0, 1691, 931, 731, 0,
	951, 0, 0, 0, 0, 723, 0, 0, 0, 0,
	0, 719, 0, 0, 0, 753, 0, 0, 0, 931,
	930, 953, 953, 0, 726, 1042, 1043, 0, 1054, 723,
	1064, 1066, 1071, 1074, 1075, 1076, 0, 748, 301, 0,
	0, 0, 0, 741, 725, 0, 952, 952, 726, 0,
	0, 0, 1327, 0, 827, 0, 698, 0, 0, 516,
	1334, 427, 32, 0, 0, 0, 0, 0, 725, 950,
	0, 0, 301, 0, 0, 301, 0, 0, 0, 0,
	0, 1176, 0, 0, 0, 1353, 0, 1176, 1118, 32,
	0, 951, 0, 0, 731, 931, 0, 0, 742, 0,
	0, 811, 0, 950, 950, 278, 0, 0, 286, 750,
	0, 950, 950, 0, 0, 32, 0, 0, 731, 299,
	0, 0, 310, 0, 21, 953, 0, 286, 856, 0,
	0, 0, 0, 310, 0, 35, 310, 0, 1395, 741,
	0, 0, 0, 0, 950, 0, 0, 0, 0, 0,
	952, 0, 0, 715, 0, 0, 0, 0, 37, 0,
	749, 0, 0, 741, 42, 0, 736, 733, 734, 735,
	727, 728, 729, 730, 732, 0, 0, 0, 0, 0,
	0, 724, 0, 0, 0, 1057, 0, 0, 0, 26,
	0, 0, 38, 0, 742, 0, 27, 0, 0, 0,
	951, 0, 0, 927, 927, 1449, 1450, 827, 0, 0,
	0, 28, 0, 719, 719, 0, 0, 0, 742, 1474,
	0, 1475, 0, 301, 1477, 1478, 1479, 0, 0, 0,
	1185, 301, 0, 0, 1190, 950, 0, 0, 0, 1490,
	0, 1499, 827, 1490, 0, 0, 0, 0, 0, 0,
	0, 301, 301, 1204, 0, 301, 0, 951, 0, 0,
	0, 0, 0, 1213, 719, 1176, 727, 728, 729, 730,
	732, 0, 0, 0, 0, 0, 0, 724, 1226, 951,
	0, 0, 1231, 0, 0, 0, 0, 299, 0, 735,
	727, 728, 729, 730, 732, 40, 0, 0, 29, 0,
	39, 724, 0, 0, 763, 30, 1543, 927, 49, 0,
	1071, 1071, 1071, 33, 34, 0, 299, 0, 0, 0,
	0, 36, 0, 0, 0, 0, 0, 51, 0, 0,
	0, 0, 1294, 0, 0, 0, 0, 0, 0, 0,
	41, 0, 0, 1301, 950, 0, 0, 0, 0, 278,
	0, 0, 0, 0, 52, 951, 0, 0, 0, 0,
	412, 47, 827, 0, 1562, 0, 246, 48, 0, 412,
	0, 0, 516, 301, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 46, 0, 0, 0, 0,
	0, 930, 719, 0, 0, 0, 0, 0, 1057, 1057,
	0, 950, 0, 0, 0, 0, 1490, 0, 0, 0,
	0, 0, 301, 1092, 1605, 0, 0, 0, 0, 0,
	0, 0, 301, 950, 0, 930, 930, 1359, 719, 1360,
	0, 0, 0, 930, 930, 0, 0, 0, 0, 0,
	1365, 0, 1123, 0, 0, 1199, 1200, 0, 1375, 0,
	0, 1123, 0, 0, 1375, 0, 0, 1057, 1057, 1057,
	278, 0, 0, 278, 278, 0, 930, 0, 1392, 0,
	0, 0, 0, 0, 0, 0, 1240, 0, 1402, 0,
	0, 1404, 0, 0, 0, 0, 762, 0, 0, 0,
	766, 1640, 1641, 0, 0, 1645, 953, 1149, 0, 950,
	1490, 0, 0, 246, 1263, 1264, 1265, 0, 0, 1499,
	0, 0, 0, 0, 1435, 1436, 0, 719, 299, 0,
	0, 952, 0, 1442, 1443, 1444, 0, 0, 0, 723,
	953, 953, 0, 0, 0, 0, 0, 0, 953, 953,
	0, 0, 0, 0, 0, 1673, 719, 301, 726, 246,
	0, 0, 0, 0, 0, 952, 952, 930, 0, 0,
	0, 412, 0, 952, 952, 1246, 1490, 1605, 725, 0,
	0, 953, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1505, 0, 0, 0, 0, 1057, 1057, 0, 301,
	0, 0, 0, 32, 0, 32, 952, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1527, 0, 32, 0,
	1256, 1531, 1532, 719, 0, 0, 1534, 0, 731, 0,
	0, 1536, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1361, 1362, 0, 1541, 0, 0, 0,
	1544, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057,
	1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057,
	0, 1057, 953, 741, 0, 1257, 930, 0, 0, 0,
	0, 0, 0, 1553, 0, 0, 0, 0, 927, 0,
	0, 0, 0, 0, 0, 0, 0, 952, 1407, 1408,
	1409, 1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418,
	1419, 1420, 1421, 1422, 1423, 1424, 1425, 0, 1429, 0,
	0, 0, 927, 927, 1577, 0, 0, 0, 742, 0,
	927, 927, 856, 930, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1595, 1250, 1242, 1243, 1244,
	1245, 1247, 0, 0, 0, 930, 0, 0, 1241, 0,
	0, 0, 0, 927, 1608, 0, 299, 0, 723, 299,
	743, 744, 745, 0, 0, 0, 0, 0, 1617, 1618,
	746, 953, 0, 0, 0, 0, 0, 726, 0, 752,
	0, 248, 0, 0, 922, 0, 0, 733, 734, 735,
	727, 728, 729, 730, 732, 259, 952, 725, 0, 1631,
	0, 724, 0, 740, 0, 0, 0, 0, 0, 1633,
	0, 0, 0, 0, 0, 1003, 0, 0, 0, 0,
	0, 930, 0, 0, 0, 0, 0, 0, 953, 250,
	0, 516, 0, 0, 0, 0, 260, 0, 0, 0,
	0, 0, 0, 0, 927, 0, 0, 731, 249, 251,
	953, 0, 0, 952, 0, 0, 0, 0, 0, 0,
	0, 1057, 0, 0, 753, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 952, 751, 0, 0, 0,
	0, 0, 0, 0, 252, 0, 748, 0, 0, 0,
	0, 0, 741, 0, 253, 254, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1476, 1567, 255,
	286, 0, 0, 0, 747, 1485, 0, 0, 0, 0,
	1704, 0, 0, 0, 0, 0, 953, 0, 0, 0,
	0, 0, 1715, 1715, 0, 299, 299, 0, 0, 299,
	0, 0, 0, 0, 0, 0, 0, 742, 1057, 0,
	0, 952, 0, 927, 0, 1715, 0, 0, 750, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 32, 0, 0, 0,
	0, 0, 0, 0, 1715, 0, 1177, 0, 0, 0,
	0, 0, 0, 0, 0, 1626, 0, 0, 0, 0,
	256, 0, 0, 257, 0, 0, 0, 0, 258, 749,
	927, 737, 738, 739, 0, 736, 733, 734, 735, 727,
	728, 729, 730, 732, 0, 0, 1057, 1088, 0, 0,
	724, 0, 927, 0, 0, 0, 0, 1089, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1003, 0, 0, 0, 0, 1568, 0, 0,
	0, 0, 0, 0, 0, 0, 762, 0, 0, 0,
	0, 0, 0, 1666, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1602, 0, 0, 0,
	0, 86, 0, 0, 0, 0, 299, 0, 927, 0,
	0, 0, 0, 89, 90, 0, 91, 0, 0, 0,
	0, 190, 0, 762, 0, 0, 92, 93, 191, 192,
	193, 94, 194, 195, 0, 95, 196, 197, 96, 0,
	0, 198, 199, 200, 0, 201, 0, 0, 0, 97,
	98, 99, 0, 100, 0, 101, 0, 0, 102, 103,
	0, 0, 0, 0, 0, 0, 104, 105, 106, 107,
	202, 108, 203, 204, 0, 0, 109, 0, 0, 0,
	110, 111, 0, 112, 0, 0, 0, 205, 113, 206,
	0, 0, 0, 114, 115, 207, 0, 116, 0, 117,
	0, 0, 0, 0, 118, 208, 0, 209, 0, 119,
	120, 210, 211, 0, 0, 121, 0, 0, 122, 212,
	213, 214, 0, 215, 922, 0, 123, 922, 124, 125,
	0, 1675, 216, 0, 126, 0, 0, 127, 0, 0,
	128, 0, 129, 130, 131, 132, 133, 0, 134, 135,
	138, 136, 0, 137, 0, 217, 139, 218, 140, 141,
	0, 0, 300, 0, 0, 142, 219, 0, 143, 0,
	220, 144, 145, 856, 221, 146, 222, 0, 147, 148,
	149, 223, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 0, 157, 158, 224, 159, 0, 247, 160, 161,
	49, 225, 162, 163, 0, 164, 165, 0, 166, 226,
	167, 0, 168, 169, 171, 227, 170, 228, 0, 51,
	172, 173, 0, 229, 230, 231, 0, 0, 174, 232,
	233, 0, 175, 176, 177, 178, 0, 0, 179, 180,
	181, 0, 0, 182, 183, 184, 331, 235, 0, 185,
	0, 0, 0, 47, 186, 187, 188, 189, 0, 48,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 924, 0, 0,
	0, 0, 32, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 922, 922, 0, 0, 922, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1587,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 595, 0, 0, 0,
	0, 0, 0, 0, 922, 0, 0, 0, 89, 90,
	600, 91, 601, 602, 603, 604, 190, 605, 606, 607,
	608, 92, 93, 191, 192, 193, 94, 194, 195, 609,
	95, 196, 197, 96, 610, 611, 198, 199, 200, 612,
	201, 613, 332, 614, 97, 98, 99, 0, 100, 615,
	101, 616, 333, 102, 103, 617, 618, 619, 620, 621,
	622, 104, 105, 106, 107, 202, 108, 203, 204, 623,
	624, 109, 625, 626, 627, 110, 111, 628, 112, 629,
	762, 630, 205, 113, 206, 631, 632, 633, 114, 115,
	207, 0, 116, 634, 117, 635, 636, 334, 637, 118,
	208, 638, 209, 639, 119, 120, 210, 211, 640, 641,
	121, 642, 335, 122, 212, 213, 214, 643, 215, 644,
	336, 123, 337, 124, 125, 645, 646, 216, 338, 126,
	339, 647, 127, 648, 649, 128, 0, 129, 130, 131,
	132, 133, 340, 134, 135, 138, 136, 650, 137, 651,
	217, 139, 218, 140, 141, 652, 653, 654, 655, 656,
	142, 219, 341, 143, 342, 220, 144, 145, 657, 221,
	146, 222, 658, 147, 148, 149, 223, 150, 151, 659,
	153, 154, 152, 155, 660, 156, 343, 157, 158, 224,
	159, 0, 247, 160, 161, 661, 225, 162, 163, 662,
	164, 165, 344, 166, 226, 167, 663, 168, 169, 171,
	227, 170, 228, 664, 665, 172, 173, 666, 229, 230,
	231, 667, 668, 174, 232, 233, 669, 175, 176, 177,
	178, 670, 671, 179, 180, 181, 672, 673, 182, 183,
	184, 234, 235, 674, 185, 675, 676, 677, 678, 186,
	187, 188, 189, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 595, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1352,
	89, 90, 600, 91, 601, 602, 603, 604, 190, 605,
	606, 607, 608, 92, 93, 191, 192, 193, 94, 194,
	195, 609, 95, 196, 197, 96, 610, 611, 198, 199,
	200, 612, 201, 613, 332, 614, 97, 98, 99, 0,
	100, 615, 101, 616, 333, 102, 103, 617, 618, 619,
	620, 621, 622, 104, 105, 106, 107, 202, 108, 203,
	204, 623, 624, 109, 625, 626, 627, 110, 111, 628,
	112, 629, 0, 630, 205, 113, 206, 631, 632, 633,
	114, 115, 207, 0, 116, 634, 117, 635, 636, 334,
	637, 118, 208, 638, 209, 639, 119, 120, 210, 211,
	640, 641, 121, 642, 335, 122, 212, 213, 214, 643,
	215, 644, 336, 123, 337, 124, 125, 645, 646, 216,
	338, 126, 339, 647, 127, 648, 649, 128, 0, 129,
	130, 131, 132, 133, 340, 134, 135, 138, 136, 650,
	137, 651, 217, 139, 218, 140, 141, 652, 653, 654,
	655, 656, 142, 219, 341, 143, 342, 220, 144, 145,
	657, 221, 146, 222, 658, 147, 148, 149, 223, 150,
	151, 659, 153, 154, 152, 155, 660, 156, 343, 157,
	158, 224, 159, 0, 247, 160, 161, 661, 225, 162,
	163, 662, 164, 165, 344, 166, 226, 167, 663, 168,
	169, 171, 227, 170, 228, 664, 665, 172, 173, 666,
	229, 230, 231, 667, 668, 174, 232, 233, 669, 175,
	176, 177, 178, 670, 671, 179, 180, 181, 672, 673,
	182, 183, 184, 234, 235, 674, 185, 675, 676, 677,
	678, 186, 187, 188, 189, 0, 595, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 815, 89, 90,
	600, 91, 601, 602, 603, 604, 190, 605, 606, 607,
	608, 92, 93, 191, 192, 193, 94, 194, 195, 609,
	95, 196, 197, 96, 610, 611, 198, 199, 200, 612,
	201, 613, 332, 614, 97, 98, 99, 0, 100, 615,
	101, 616, 333, 102, 103, 617, 618, 619, 620, 621,
	622, 104, 105, 106, 107, 202, 108, 203, 204, 623,
	624, 109, 625, 626, 627, 110, 111, 628, 112, 629,
	0, 630, 205, 113, 206, 631, 632, 633, 114, 115,
	207, 0, 116, 634, 117, 635, 636, 334, 637, 118,
	208, 638, 209, 639, 119, 120, 210, 211, 640, 641,
	121, 642, 335, 122, 212, 213, 214, 643, 215, 644,
	336, 123, 337, 124, 125, 645, 646, 216, 338, 126,
	339, 647, 127, 648, 649, 128, 0, 129, 130, 131,
	132, 133, 340, 134, 135, 138, 136, 650, 137, 651,
	217, 139, 218, 140, 141, 652, 653, 654, 655, 656,
	142, 219, 341, 143, 342, 220, 144, 145, 657, 221,
	146, 222, 658, 147, 148, 149, 223, 150, 151, 659,
	153, 154, 152, 155, 660, 156, 343, 157, 158, 224,
	159, 0, 247, 160, 161, 661, 225, 162, 163, 662,
	164, 165, 344, 166, 226, 167, 663, 168, 169, 171,
	227, 170, 228, 664, 665, 172, 173, 666, 229, 230,
	231, 667, 668, 174, 232, 233, 669, 175, 176, 177,
	178, 670, 671, 179, 180, 181, 672, 673, 182, 183,
	184, 234, 235, 674, 185, 675, 676, 677, 678, 186,
	187, 188, 189, 447, 436, 437, 434, 435, 423, 0,
	0, 0, 0, 0, 0, 89, 90, 1021, 91, 0,
	0, 0, 0, 463, 429, 0, 0, 0, 92, 93,
	191, 477, 478, 94, 479, 480, 0, 95, 196, 197,
	96, 444, 462, 481, 482, 200, 0, 473, 0, 455,
	0, 97, 98, 99, 0, 100, 0, 101, 0, 333,
	102, 103, 0, 456, 458, 0, 457, 459, 104, 105,
	106, 107, 483, 108, 484, 485, 0, 0, 109, 0,
	1022, 0, 476, 111, 0, 112, 0, 0, 0, 428,
	113, 464, 442, 0, 0, 114, 115, 486, 0, 116,
	0, 117, 0, 0, 334, 0, 118, 474, 0, 209,
	0, 119, 120, 470, 472, 0, 0, 121, 0, 335,
	122, 487, 488, 489, 0, 454, 0, 336, 123, 337,
	124, 125, 0, 0, 475, 338, 126, 339, 0, 127,
	0, 0, 128, 0, 129, 130, 131, 132, 133, 340,
	134, 135, 138, 136, 418, 137, 443, 471, 139, 490,
	140, 141, 0, 0, 0, 0, 0, 142, 219, 341,
	143, 342, 465, 144, 145, 0, 466, 146, 222, 0,
	147, 148, 149, 491, 150, 151, 0, 153, 154, 152,
	155, 0, 156, 343, 157, 158, 432, 159, 0, 247,
	160, 161, 0, 225, 162, 163, 460, 164, 165, 344,
	166, 492, 167, 0, 168, 169, 171, 493, 170, 467,
	0, 0, 172, 173, 0, 229, 494, 495, 0, 0,
	174, 468, 469, 441, 175, 176, 177, 178, 0, 0,
	179, 180, 181, 461, 0, 182, 183, 184, 234, 496,
	1020, 185, 0, 0, 0, 0, 186, 187, 188, 189,
	419, 0, 447, 436, 437, 434, 435, 423, 0, 0,
	415, 416, 1023, 0, 89, 90, 417, 91, 0, 424,
	1018, 0, 463, 429, 0, 0, 0, 92, 93, 191,
	477, 478, 94, 479, 480, 0, 95, 196, 197, 96,
	444, 462, 481, 482, 200, 0, 473, 0, 455, 0,
	97, 98, 99, 0, 100, 0, 101, 0, 333, 102,
	103, 0, 456, 458, 0, 457, 459, 104, 105, 106,
	107, 483, 108, 484, 485, 517, 0, 109, 0, 0,
	0, 476, 111, 0, 112, 0, 0, 0, 428, 113,
	464, 442, 0, 0, 114, 115, 486, 0, 116, 0,
	117, 0, 0, 334, 0, 118, 474, 0, 209, 0,
	119, 120, 470, 472, 0, 0, 121, 0, 335, 122,
	487, 488, 489, 0, 454, 0, 336, 123, 337, 124,
	125, 0, 0, 475, 338, 126, 339, 0, 127, 0,
	0, 128, 0, 129, 130, 131, 132, 133, 340, 134,
	135, 138, 136, 418, 137, 443, 471, 139, 490, 140,
	141, 0, 0, 0, 0, 0, 142, 219, 341, 143,
	342, 465, 144, 145, 0, 466, 146, 222, 0, 147,
	148, 149, 491, 150, 151, 0, 153, 154, 152, 155,
	0, 156, 343, 157, 158, 432, 159, 0, 247, 160,
	161, 49, 225, 162, 163, 460, 164, 165, 344, 166,
	492, 167, 0, 168, 169, 171, 493, 170, 467, 0,
	51, 172, 173, 0, 229, 494, 495, 0, 0, 174,
	468, 469, 441, 175, 176, 177, 178, 0, 0, 179,
	180, 181, 461, 0, 182, 183, 184, 331, 496, 0,
	185, 0, 0, 0, 47, 186, 187, 188, 189, 419,
	48, 447, 436, 437, 434, 435, 423, 0, 0, 415,
	416, 0, 0, 89, 90, 417, 91, 0, 424, 0,
	0, 463, 429, 0, 0, 0, 92, 93, 191, 477,
	478, 94, 479, 480, 0, 95, 196, 197, 96, 444,
	462, 481, 482, 200, 0, 473, 0, 455, 0, 97,
	98, 99, 0, 100, 0, 101, 0, 333, 102, 103,
	0, 456, 458, 0, 457, 459, 104, 105, 106, 107,
	483, 108, 484, 485, 0, 0, 109, 0, 0, 0,
	476, 111, 0, 112, 0, 0, 0, 428, 113, 464,
	442, 0, 0, 114, 115, 486, 0, 116, 0, 117,
	0, 0, 334, 0, 118, 474, 0, 209, 0, 119,
	120, 470, 472, 0, 0, 121, 0, 335, 122, 487,
	488, 489, 0, 454, 0, 336, 123, 337, 124, 125,
	0, 0, 475, 338, 126, 339, 0, 127, 0, 0,
	128, 0, 129, 130, 131, 132, 133, 340, 134, 135,
	138, 136, 418, 137, 443, 471, 139, 490, 140, 141,
	0, 0, 0, 0, 0, 142, 219, 341, 143, 342,
	465, 144, 145, 0, 466, 146, 222, 0, 147, 148,
	149, 491, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 343, 157, 158, 432, 159, 0, 247, 160, 161,
	49, 225, 162, 163, 460, 164, 165, 344, 166, 492,
	167, 0, 168, 169, 171, 493, 170, 467, 0, 51,
	172, 173, 0, 229, 494, 495, 0, 0, 174, 468,
	469, 441, 175, 176, 177, 178, 0, 0, 179, 180,
	181, 461, 0, 182, 183, 184, 331, 496, 0, 185,
	0, 0, 0, 47, 186, 187, 188, 189, 419, 48,
	447, 436, 437, 434, 435, 423, 0, 0, 415, 416,
	0, 0, 89, 90, 417, 91, 0, 424, 0, 0,
	463, 429, 0, 0, 0, 92, 93, 191, 477, 478,
	94, 479, 480, 1067, 95, 196, 197, 96, 444, 462,
	481, 482, 200, 0, 473, 0, 455, 0, 97, 98,
	99, 0, 100, 0, 101, 0, 333, 102, 103, 0,
	456, 458, 0, 457, 459, 104, 105, 106, 107, 483,
	108, 484, 485, 0, 0, 109, 0, 0, 0, 476,
	111, 0, 112, 0, 0, 0, 428, 113, 464, 442,
	0, 0, 114, 115, 486, 0, 116, 0, 117, 0,
	1072, 334, 0, 118, 474, 0, 209, 0, 119, 120,
	470, 472, 0, 0, 121, 0, 335, 122, 487, 488,
	489, 0, 454, 0, 336, 123, 337, 124, 125, 0,
	1068, 475, 338, 126, 339, 0, 127, 0, 0, 128,
	0, 129, 130, 131, 132, 133, 340, 134, 135, 138,
	136, 418, 137, 443, 471, 139, 490, 140, 141, 0,
	0, 0, 0, 0, 142, 219, 341, 143, 342, 465,
	144, 145, 0, 466, 146, 222, 0, 147, 148, 149,
	491, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	343, 157, 158, 432, 159, 0, 247, 160, 161, 0,
	225, 162, 163, 460, 164, 165, 344, 166, 492, 167,
	0, 168, 169, 171, 493, 170, 467, 0, 0, 172,
	173, 0, 229, 494, 495, 0, 1069, 174, 468, 469,
	441, 175, 176, 177, 178, 0, 0, 179, 180, 181,
	461, 0, 182, 183, 184, 234, 496, 0, 185, 0,
	0, 0, 0, 186, 187, 188, 189, 419, 0, 447,
	436, 437, 434, 435, 423, 0, 0, 415, 416, 0,
	0, 89, 90, 417, 91, 0, 424, 0, 0, 463,
	429, 0, 0, 0, 92, 93, 191, 477, 478, 94,
	479, 480, 0, 95, 196, 197, 96, 444, 462, 481,
	482, 200, 0, 473, 0, 455, 0, 97, 98, 99,
	0, 100, 0, 101, 0, 333, 102, 103, 0, 456,
	458, 0, 457, 459, 104, 105, 106, 107, 483, 108,
	484, 485, 0, 0, 109, 0, 0, 0, 476, 111,
	0, 112, 0, 0, 0, 428, 113, 464, 442, 0,
	0, 114, 115, 486, 0, 116, 0, 117, 0, 0,
	334, 0, 118, 474, 0, 209, 0, 119, 120, 470,
	472, 0, 0, 121, 0, 335, 122, 487, 488, 489,
	0, 454, 0, 336, 123, 337, 124, 125, 0, 0,
	475, 338, 126, 339, 0, 127, 0, 0, 128, 0,
	129, 130, 131, 132, 133, 340, 134, 135, 138, 136,
	418, 137, 443, 471, 139, 490, 140, 141, 0, 0,
	0, 0, 0, 142, 219, 341, 143, 342, 465, 144,
	145, 0, 466, 146, 222, 0, 147, 148, 149, 491,
	150, 151, 0, 153, 154, 152, 155, 0, 156, 343,
	157, 158, 432, 159, 0, 247, 160, 161, 0, 225,
	162, 163, 460, 164, 165, 344, 166, 492, 167, 0,
	168, 169, 171, 493, 170, 467, 0, 0, 172, 173,
	0, 229, 494, 495, 0, 0, 174, 468, 469, 441,
	175, 176, 177, 178, 0, 0, 179, 180, 181, 461,
	0, 182, 183, 184, 234, 496, 0, 185, 0, 0,
	0, 0, 186, 187, 188, 189, 419, 0, 447, 436,
	437, 434, 435, 423, 0, 0, 415, 416, 0, 0,
	89, 90, 417, 91, 0, 424, 1432, 0, 463, 429,
	0, 0, 0, 92, 93, 191, 477, 478, 94, 479,
	480, 0, 95, 196, 197, 96, 444, 462, 481, 482,
	200, 0, 473, 0, 455, 0, 97, 98, 99, 0,
	100, 0, 101, 0, 333, 102, 103, 0, 456, 458,
	0, 457, 459, 104, 105, 106, 107, 483, 108, 484,
	485, 0, 0, 109, 0, 0, 0, 476, 111, 0,
	112, 0, 0, 0, 428, 113, 464, 442, 0, 0,
	114, 115, 486, 0, 116, 0, 117, 0, 0, 334,
	0, 118, 474, 0, 209, 0, 119, 120, 470, 472,
	0, 0, 121, 0, 335, 122, 487, 488, 489, 0,
	454, 0, 336, 123, 337, 124, 125, 0, 0, 475,
	338, 126, 339, 0, 127, 0, 0, 128, 0, 129,
	130, 131, 132, 133, 340, 134, 135, 138, 136, 418,
	137, 443, 471, 139, 490, 140, 141, 0, 0, 0,
	0, 0, 142, 219, 341, 143, 342, 465, 144, 145,
	0, 466, 146, 222, 0, 147, 148, 149, 491, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 343, 157,
	158, 432, 159, 0, 247, 160, 161, 0, 225, 162,
	163, 460, 164, 165, 344, 166, 492, 167, 0, 168,
	169, 171, 493, 170, 467, 0, 0, 172, 173, 0,
	229, 494, 495, 0, 0, 174, 468, 469, 441, 175,
	176, 177, 178, 0, 0, 179, 180, 181, 461, 0,
	182, 183, 184, 234, 496, 0, 185, 0, 0, 0,
	0, 186, 187, 188, 189, 419, 0, 447, 436, 437,
	434, 435, 423, 0, 0, 415, 416, 0, 0, 89,
	90, 417, 91, 0, 424, 1372, 0, 463, 429, 0,
	0, 0, 92, 93, 191, 477, 478, 94, 479, 480,
	0, 95, 196, 197, 96, 444, 462, 481, 482, 200,
	0, 473, 0, 455, 0, 97, 98, 99, 0, 100,
	0, 101, 0, 333, 102, 103, 0, 456, 458, 0,
	457, 459, 104, 105, 106, 107, 483, 108, 484, 485,
	0, 0, 109, 0, 0, 0, 476, 111, 0, 112,
	0, 0, 0, 428, 113, 464, 442, 0, 0, 114,
	115, 486, 0, 116, 0, 117, 0, 0, 334, 0,
	118, 474, 0, 209, 0, 119, 120, 470, 472, 0,
	0, 121, 0, 335, 122, 487, 488, 489, 0, 454,
	0, 336, 123, 337, 124, 125, 0, 0, 475, 338,
	126, 339, 0, 127, 0, 0, 128, 0, 129, 130,
	131, 132, 133, 340, 134, 135, 138, 136, 418, 137,
	443, 471, 139, 490, 140, 141, 0, 0, 0, 0,
	0, 142, 219, 341, 143, 342, 465, 144, 145, 0,
	466, 146, 222, 0, 147, 148, 149, 491, 150, 151,
	0, 153, 154, 152, 155, 0, 156, 343, 157, 158,
	432, 159, 0, 247, 160, 161, 0, 225, 162, 163,
	460, 164, 165, 344, 166, 492, 167, 0, 168, 169,
	171, 493, 170, 467, 0, 0, 172, 173, 0, 229,
	494, 495, 0, 0, 174, 468, 469, 441, 175, 176,
	177, 178, 0, 0, 179, 180, 181, 461, 0, 182,
	183, 184, 234, 496, 0, 185, 0, 0, 0, 0,
	186, 187, 188, 189, 419, 0, 447, 436, 437, 434,
	435, 423, 0, 0, 415, 416, 0, 0, 89, 90,
	417, 91, 0, 424, 1017, 0, 463, 429, 0, 0,
	0, 92, 93, 191, 477, 478, 94, 479, 480, 0,
	95, 196, 197, 96, 444, 462, 481, 482, 200, 0,
	473, 0, 455, 0, 97, 98, 99, 0, 100, 0,
	101, 0, 333, 102, 103, 0, 456, 458, 0, 457,
	459, 104, 105, 106, 107, 483, 108, 484, 485, 0,
	0, 109, 0, 0, 0, 476, 111, 0, 112, 0,
	0, 0, 428, 113, 464, 442, 0, 0, 114, 115,
	486, 0, 116, 0, 117, 0, 0, 334, 0, 118,
	474, 0, 209, 0, 119, 120, 470, 472, 0, 0,
	121, 0, 335, 122, 487, 488, 489, 0, 454, 0,
	336, 123, 337, 124, 125, 0, 0, 475, 338, 126,
	339, 0, 127, 0, 0, 128, 0, 129, 130, 131,
	132, 133, 340, 134, 135, 138, 136, 418, 137, 443,
	471, 139, 490, 140, 141, 0, 0, 0, 0, 0,
	142, 219, 341, 143, 342, 465, 144, 145, 0, 466,
	146, 222, 0, 147, 148, 149, 491, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 343, 157, 158, 432,
	159, 0, 247, 160, 161, 0, 225, 162, 163, 460,
	164, 165, 344, 166, 492, 167, 0, 168, 169, 171,
	493, 170, 467, 0, 0, 172, 173, 0, 229, 494,
	495, 0, 0, 174, 468, 469, 441, 175, 176, 177,
	178, 0, 0, 179, 180, 181, 461, 0, 182, 183,
	184, 234, 496, 0, 185, 0, 0, 0, 0, 186,
	187, 188, 189, 419, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 415, 416, 0, 0, 0, 0, 417,
	768, 1013, 424, 447, 436, 437, 434, 435, 423, 0,
	0, 0, 0, 0, 0, 89, 90, 0, 91, 0,
	0, 0, 0, 463, 429, 0, 0, 0, 92, 93,
	191, 477, 478, 94, 479, 480, 0, 95, 196, 197,
	96, 444, 462, 481, 482, 200, 0, 473, 0, 455,
	0, 97, 98, 99, 0, 100, 0, 101, 0, 333,
	102, 103, 0, 456, 458, 0, 457, 459, 104, 105,
	106, 107, 483, 108, 484, 485, 0, 0, 109, 0,
	0, 0, 476, 111, 0, 112, 0, 0, 0, 428,
	113, 464, 442, 0, 0, 114, 115, 486, 0, 116,
	0, 117, 0, 0, 334, 0, 118, 474, 0, 209,
	0, 119, 120, 470, 472, 0, 0, 121, 0, 335,
	122, 487, 488, 489, 0, 454, 0, 336, 123, 337,
	124, 125, 0, 0, 475, 338, 126, 339, 0, 127,
	0, 0, 128, 0, 129, 130, 131, 132, 133, 340,
	134, 135, 138, 136, 418, 137, 443, 471, 139, 490,
	140, 141, 0, 0, 0, 0, 0, 142, 219, 341,
	143, 342, 465, 144, 145, 0, 466, 146, 222, 0,
	147, 148, 149, 491, 150, 151, 0, 153, 154, 152,
	155, 0, 156, 343, 157, 158, 432, 159, 0, 247,
	160, 161, 0, 225, 162, 163, 460, 164, 165, 344,
	166, 492, 167, 0, 168, 169, 171, 493, 170, 467,
	0, 0, 172, 173, 0, 229, 494, 495, 0, 0,
	174, 468, 469, 441, 175, 176, 177, 178, 0, 0,
	179, 180, 181, 461, 0, 182, 183, 184, 234, 496,
	0, 185, 0, 0, 0, 0, 186, 187, 188, 189,
	419, 0, 447, 436, 437, 434, 435, 423, 0, 0,
	415, 416, 413, 0, 89, 90, 417, 91, 0, 424,
	0, 0, 463, 429, 0, 0, 0, 92, 93, 191,
	477, 478, 94, 479, 480, 0, 95, 196, 197, 96,
	444, 462, 481, 482, 200, 0, 473, 0, 455, 0,
	97, 98, 99, 0, 100, 0, 101, 0, 333, 102,
	103, 0, 456, 458, 0, 457, 459, 104, 105, 106,
	107, 483, 108, 484, 485, 0, 0, 109, 0, 0,
	0, 476, 111, 0, 112, 0, 0, 0, 428, 113,
	464, 442, 0, 0, 114, 115, 486, 0, 116, 0,
	117, 0, 0, 334, 0, 118, 474, 0, 209, 0,
	119, 120, 470, 472, 0, 0, 121, 0, 335, 122,
	487, 488, 489, 0, 454, 0, 336, 123, 337, 124,
	125, 0, 0, 475, 338, 126, 339, 0, 127, 0,
	0, 128, 0, 129, 130, 131, 132, 133, 340, 134,
	135, 138, 136, 418, 137, 443, 471, 139, 490, 140,
	141, 0, 0, 0, 0, 0, 142, 219, 341, 143,
	342, 465, 144, 145, 0, 466, 146, 222, 0, 147,
	148, 149, 491, 150, 151, 0, 153, 154, 152, 155,
	0, 156, 343, 157, 158, 432, 159, 0, 247, 160,
	161, 0, 225, 162, 163, 460, 164, 165, 344, 166,
	492, 167, 0, 168, 169, 171, 493, 170, 467, 0,
	0, 172, 173, 0, 229, 494, 495, 0, 0, 174,
	468, 469, 441, 175, 176, 177, 178, 0, 0, 179,
	180, 181, 461, 0, 182, 183, 184, 234, 496, 1378,
	185, 0, 0, 0, 0, 186, 187, 188, 189, 419,
	0, 447, 436, 437, 434, 435, 423, 0, 0, 415,
	416, 0, 0, 89, 90, 417, 91, 0, 424, 0,
	0, 463, 429, 0, 0, 0, 92, 93, 191, 477,
	478, 94, 479, 480, 0, 95, 196, 197, 96, 444,
	462, 481, 482, 200, 0, 473, 0, 455, 0, 97,
	98, 99, 0, 100, 0, 101, 0, 333, 102, 103,
	0, 456, 458, 0, 457, 459, 104, 105, 106, 107,
	483, 108, 484, 485, 517, 0, 109, 0, 0, 0,
	476, 111, 0, 112, 0, 0, 0, 428, 113, 464,
	442, 0, 0, 114, 115, 486, 0, 116, 0, 117,
	0, 0, 334, 0, 118, 474, 0, 209, 0, 119,
	120, 470, 472, 0, 0, 121, 0, 335, 122, 487,
	488, 489, 0, 454, 0, 336, 123, 337, 124, 125,
	0, 0, 475, 338, 126, 339, 0, 127, 0, 0,
	128, 0, 129, 130, 131, 132, 133, 340, 134, 135,
	138, 136, 418, 137, 443, 471, 139, 490, 140, 141,
	0, 0, 0, 0, 0, 142, 219, 341, 143, 342,
	465, 144, 145, 0, 466, 146, 222, 0, 147, 148,
	149, 491, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 343, 157, 158, 432, 159, 0, 247, 160, 161,
	0, 225, 162, 163, 460, 164, 165, 344, 166, 492,
	167, 0, 168, 169, 171, 493, 170, 467, 0, 0,
	172, 173, 0, 229, 494, 495, 0, 0, 174, 468,
	469, 441, 175, 176, 177, 178, 0, 0, 179, 180,
	181, 461, 0, 182, 183, 184, 234, 496, 0, 185,
	0, 0, 0, 0, 186, 187, 188, 189, 419, 0,
	447, 436, 437, 434, 435, 423, 0, 0, 415, 416,
	0, 0, 89, 90, 417, 91, 0, 424, 0, 0,
	463, 429, 0, 0, 0, 92, 93, 191, 477, 478,
	94, 479, 480, 0, 95, 196, 197, 96, 444, 462,
	481, 482, 200, 0, 473, 0, 455, 0, 97, 98,
	99, 0, 100, 0, 101, 0, 333, 102, 103, 0,
	456, 458, 0, 457, 459, 104, 105, 106, 107, 483,
	108, 484, 485, 0, 0, 109, 0, 0, 0, 476,
	111, 0, 112, 0, 0, 0, 428, 113, 464, 442,
	0, 0, 114, 115, 486, 0, 116, 0, 117, 0,
	1072, 334, 0, 118, 474, 0, 209, 0, 119, 120,
	470, 472, 0, 0, 121, 0, 335, 122, 487, 488,
	489, 0, 454, 0, 336, 123, 337, 124, 125, 0,
	0, 475, 338, 126, 339, 0, 127, 0, 0, 128,
	0, 129, 130, 131, 132, 133, 340, 134, 135, 138,
	136, 418, 137, 443, 471, 139, 490, 140, 141, 0,
	0, 0, 0, 0, 142, 219, 341, 143, 342, 465,
	144, 145, 0, 466, 146, 222, 0, 147, 148, 149,
	491, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	343, 157, 158, 432, 159, 0, 247, 160, 161, 0,
	225, 162, 163, 460, 164, 165, 344, 166, 492, 167,
	0, 168, 169, 171, 493, 170, 467, 0, 0, 172,
	173, 0, 229, 494, 495, 0, 0, 174, 468, 469,
	441, 175, 176, 177, 178, 0, 0, 179, 180, 181,
	461, 0, 182, 183, 184, 234, 496, 0, 185, 0,
	0, 0, 0, 186, 187, 188, 189, 419, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 415, 416, 0,
	0, 0, 0, 417, 0, 0, 424, 447, 436, 437,
	434, 435, 423, 0, 0, 0, 0, 0, 0, 89,
	90, 707, 91, 0, 0, 0, 0, 463, 429, 0,
	0, 0, 92, 93, 191, 477, 478, 94, 479, 480,
	0, 95, 196, 197, 96, 444, 462, 481, 482, 200,
	0, 473, 0, 455, 0, 97, 98, 99, 0, 100,
	0, 101, 0, 333, 102, 103, 0, 456, 458, 0,
	457, 459, 104, 105, 106, 107, 483, 108, 484, 485,
	0, 0, 109, 0, 0, 0, 476, 111, 0, 112,
	0, 0, 0, 428, 113, 464, 442, 0, 0, 114,
	115, 486, 0, 116, 0, 117, 0, 0, 334, 0,
	118, 474, 0, 209, 0, 119, 120, 470, 472, 0,
	0, 121, 0, 335, 122, 487, 488, 489, 0, 454,
	0, 336, 123, 337, 124, 125, 0, 0, 475, 338,
	126, 339, 0, 127, 0, 0, 128, 0, 129, 130,
	131, 132, 133, 340, 134, 135, 138, 136, 418, 137,
	443, 471, 139, 490, 140, 141, 0, 0, 0, 0,
	0, 142, 219, 341, 143, 342, 465, 144, 145, 0,
	466, 146, 222, 0, 147, 148, 149, 491, 150, 151,
	0, 153, 154, 152, 155, 0, 156, 343, 157, 158,
	432, 159, 0, 247, 160, 161, 0, 225, 162, 163,
	460, 164, 165, 344, 166, 492, 167, 0, 168, 169,
	171, 493, 170, 467, 0, 0, 172, 173, 0, 229,
	494, 495, 0, 0, 174, 468, 469, 441, 175, 176,
	177, 178, 0, 0, 179, 180, 181, 461, 0, 182,
	183, 184, 234, 496, 0, 185, 0, 0, 0, 0,
	186, 187, 188, 189, 419, 0, 447, 436, 437, 434,
	435, 423, 0, 0, 415, 416, 0, 0, 89, 90,
	417, 91, 0, 424, 0, 0, 463, 429, 0, 0,
	0, 92, 93, 191, 477, 478, 94, 479, 480, 0,
	95, 196, 197, 96, 444, 462, 481, 482, 200, 0,
	473, 0, 455, 0, 97, 98, 99, 0, 100, 0,
	101, 0, 333, 102, 1714, 0, 456, 458, 0, 457,
	459, 104, 105, 106, 107, 483, 108, 484, 485, 0,
	0, 109, 0, 0, 0, 476, 111, 0, 112, 0,
	0, 0, 428, 113, 464, 442, 0, 0, 114, 115,
	486, 0, 116, 0, 117, 0, 0, 334, 0, 118,
	474, 0, 209, 0, 119, 120, 470, 472, 0, 0,
	121, 0, 335, 122, 487, 488, 489, 0, 454, 0,
	336, 123, 337, 124, 125, 0, 0, 475, 338, 126,
	339, 0, 127, 0, 0, 128, 0, 129, 130, 131,
	132, 133, 340, 134, 135, 138, 136, 418, 137, 443,
	471, 139, 490, 140, 141, 0, 0, 0, 0, 0,
	142, 219, 341, 143, 342, 465, 144, 145, 0, 466,
	146, 222, 0, 147, 148, 149, 491, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 343, 157, 158, 432,
	159, 0, 247, 160, 161, 0, 225, 162, 163, 460,
	164, 165, 344, 166, 492, 167, 0, 168, 169, 171,
	493, 170, 467, 0, 0, 172, 173, 0, 229, 494,
	495, 0, 0, 174, 468, 469, 441, 175, 176, 1713,
	178, 0, 0, 179, 180, 181, 461, 0, 182, 183,
	184, 234, 496, 0, 185, 0, 0, 0, 0, 186,
	187, 188, 189, 419, 0, 447, 436, 437, 434, 435,
	423, 0, 0, 415, 416, 0, 0, 89, 90, 417,
	91, 0, 424, 0, 0, 463, 429, 0, 0, 0,
	92, 93, 1712, 477, 478, 94, 479, 480, 0, 95,
	196, 197, 96, 444, 462, 481, 482, 200, 0, 473,
	0, 455, 0, 97, 98, 99, 0, 100, 0, 101,
	0, 333, 102, 1714, 0, 456, 458, 0, 457, 459,
	104, 105, 106, 107, 483, 108, 484, 485, 0, 0,
	109, 0, 0, 0, 476, 111, 0, 112, 0, 0,
	0, 428, 113, 464, 442, 0, 0, 114, 115, 486,
	0, 116, 0, 117, 0, 0, 334, 0, 118, 474,
	0, 209, 0, 119, 120, 470, 472, 0, 0, 121,
	0, 335, 122, 487, 488, 489, 0, 454, 0, 336,
	123, 337, 124, 125, 0, 0, 475, 338, 126, 339,
	0, 127, 0, 0, 128, 0, 129, 130, 131, 132,
	133, 340, 134, 135, 138, 136, 418, 137, 443, 471,
	139, 490, 140, 141, 0, 0, 0, 0, 0, 142,
	219, 341, 143, 342, 465, 144, 145, 0, 466, 146,
	222, 0, 147, 148, 149, 491, 150, 151, 0, 153,
	154, 152, 155, 0, 156, 343, 157, 158, 432, 159,
	0, 247, 160, 161, 0, 225, 162, 163, 460, 164,
	165, 344, 166, 492, 167, 0, 168, 169, 171, 493,
	170, 467, 0, 0, 172, 173, 0, 229, 494, 495,
	0, 0, 174, 468, 469, 441, 175, 176, 1713, 178,
	0, 0, 179, 180, 181, 461, 0, 182, 183, 184,
	234, 496, 0, 185, 0, 0, 0, 0, 186, 187,
	188, 189, 419, 0, 447, 436, 437, 434, 435, 423,
	0, 0, 415, 416, 0, 0, 89, 90, 417, 91,
	0, 424, 0, 0, 463, 429, 0, 0, 0, 92,
	93, 191, 477, 478, 94, 479, 480, 0, 95, 196,
	197, 96, 444, 462, 481, 482, 200, 0, 473, 0,
	455, 0, 97, 98, 99, 0, 100, 0, 101, 0,
	333, 102, 103, 0, 456, 458, 0, 457, 459, 104,
	105, 106, 107, 483, 108, 484, 485, 0, 0, 109,
	0, 0, 0, 476, 111, 0, 112, 0, 0, 0,
	428, 113, 464, 442, 0, 0, 114, 115, 486, 0,
	116, 0, 117, 0, 0, 334, 0, 118, 474, 0,
	209, 0, 119, 120, 470, 472, 0, 0, 121, 0,
	335, 122, 487, 488, 489, 0, 454, 0, 336, 123,
	337, 124, 125, 0, 0, 475, 338, 126, 339, 0,
	127, 0, 0, 128, 0, 129, 130, 131, 132, 133,
	340, 134, 135, 138, 136, 418, 137, 443, 471, 139,
	490, 140, 141, 0, 0, 0, 0, 0, 142, 219,
	341, 143, 342, 465, 144, 145, 0, 466, 146, 222,
	0, 147, 148, 149, 491, 150, 151, 0, 153, 154,
	152, 155, 0, 156, 343, 157, 158, 432, 159, 0,
	247, 160, 161, 0, 225, 162, 163, 460, 164, 165,
	344, 166, 492, 167, 0, 168, 169, 171, 493, 170,
	467, 0, 0, 172, 173, 0, 229, 494, 495, 0,
	0, 174, 468, 469, 441, 175, 176, 177, 178, 0,
	0, 179, 180, 181, 461, 0, 182, 183, 184, 234,
	496, 0, 185, 0, 0, 0, 0, 186, 187, 188,
	189, 419, 0, 447, 436, 437, 434, 435, 423, 0,
	0, 415, 416, 0, 0, 89, 90, 417, 91, 0,
	424, 0, 0, 463, 429, 0, 0, 0, 92, 93,
	191, 477, 478, 94, 479, 480, 0, 95, 196, 197,
	96, 444, 462, 481, 482, 200, 0, 473, 0, 455,
	0, 97, 98, 99, 0, 100, 0, 101, 0, 333,
	102, 103, 0, 456, 458, 0, 457, 459, 104, 105,
	106, 107, 483, 108, 484, 485, 0, 0, 109, 0,
	0, 0, 476, 111, 0, 112, 0, 0, 0, 428,
	113, 464, 442, 0, 0, 114, 115, 486, 0, 116,
	0, 117, 0, 0, 334, 0, 118, 474, 0, 209,
	0, 119, 120, 470, 472, 0, 0, 121, 0, 335,
	122, 487, 488, 489, 0, 454, 0, 336, 123, 337,
	124, 125, 0, 0, 475, 338, 126, 339, 0, 127,
	0, 0, 128, 0, 129, 130, 131, 132, 133, 340,
	134, 135, 138, 136, 0, 137, 443, 471, 139, 490,
	140, 141, 0, 0, 0, 0, 0, 142, 219, 341,
	143, 342, 465, 144, 145, 0, 466, 146, 222, 0,
	147, 148, 149, 491, 150, 151, 0, 153, 154, 152,
	155, 0, 156, 343, 157, 158, 1062, 159, 0, 247,
	160, 161, 0, 225, 162, 163, 460, 164, 165, 344,
	166, 492, 167, 0, 168, 169, 171, 493, 170, 467,
	0, 0, 172, 173, 0, 229, 494, 495, 0, 0,
	174, 468, 469, 441, 175, 176, 177, 178, 0, 0,
	179, 180, 181, 461, 0, 182, 183, 184, 234, 496,
	0, 185, 0, 0, 0, 0, 186, 187, 188, 189,
	447, 436, 437, 434, 435, 423, 0, 0, 0, 0,
	1058, 1059, 89, 90, 0, 91, 1060, 0, 0, 1061,
	463, 429, 0, 0, 0, 92, 93, 0, 477, 478,
	94, 479, 480, 0, 95, 196, 197, 96, 444, 462,
	481, 482, 200, 0, 473, 0, 455, 0, 97, 98,
	99, 0, 100, 0, 101, 0, 333, 102, 1714, 0,
	456, 458, 0, 457, 459, 104, 105, 106, 107, 483,
	108, 484, 485, 0, 0, 109, 0, 0, 0, 476,
	111, 0, 112, 0, 0, 0, 428, 113, 464, 442,
	0, 0, 114, 115, 486, 0, 116, 0, 117, 0,
	0, 334, 0, 118, 474, 0, 209, 0, 119, 120,
	470, 472, 0, 0, 121, 0, 335, 122, 487, 488,
	489, 0, 454, 0, 0, 123, 337, 124, 125, 0,
	0, 475, 338, 126, 0, 0, 127, 0, 0, 128,
	0, 129, 130, 131, 132, 133, 340, 134, 135, 138,
	136, 418, 137, 443, 471, 139, 490, 140, 141, 0,
	0, 0, 0, 0, 142, 219, 341, 143, 342, 465,
	144, 145, 0, 466, 146, 222, 0, 147, 148, 149,
	491, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	343, 157, 158, 432, 159, 0, 247, 160, 161, 0,
	225, 162, 163, 460, 164, 165, 0, 166, 492, 167,
	0, 168, 169, 171, 493, 170, 467, 0, 0, 172,
	173, 0, 229, 494, 495, 0, 0, 174, 468, 469,
	441, 175, 176, 1713, 178, 0, 0, 179, 180, 181,
	461, 0, 182, 183, 184, 234, 496, 0, 185, 0,
	0, 0, 0, 186, 187, 188, 189, 447, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 415, 416, 89,
	90, 0, 91, 417, 0, 0, 424, 463, 0, 0,
	0, 0, 92, 93, 191, 192, 193, 94, 194, 195,
	0, 95, 196, 197, 96, 0, 462, 198, 199, 200,
	0, 473, 0, 455, 0, 97, 98, 99, 0, 100,
	0, 101, 0, 333, 102, 103, 0, 456, 458, 0,
	457, 459, 104, 105, 106, 107, 202, 108, 203, 204,
	0, 0, 109, 0, 0, 0, 110, 111, 0, 112,
	0, 0, 0, 205, 113, 464, 0, 0, 0, 114,
	115, 207, 0, 116, 0, 117, 0, 0, 334, 0,
	118, 474, 0, 209, 0, 119, 120, 470, 472, 0,
	0, 121, 0, 335, 122, 212, 213, 214, 0, 215,
	0, 336, 123, 337, 124, 125, 0, 0, 475, 338,
	126, 339, 0, 127, 0, 0, 128, 0, 129, 130,
	131, 132, 133, 340, 134, 135, 138, 136, 0, 137,
	0, 471, 139, 218, 140, 141, 0, 0, 0, 0,
	0, 142, 219, 341, 143, 342, 465, 144, 145, 0,
	466, 146, 222, 0, 147, 148, 149, 223, 150, 151,
	0, 153, 154, 152, 155, 0, 156, 343, 157, 158,
	224, 159, 0, 247, 160, 161, 0, 225, 162, 163,
	460, 164, 165, 344, 166, 226, 167, 0, 168, 169,
	171, 227, 170, 467, 0, 0, 172, 173, 0, 229,
	230, 231, 0, 0, 174, 468, 469, 0, 175, 176,
	177, 178, 0, 0, 179, 180, 181, 461, 0, 182,
	183, 184, 234, 235, 0, 185, 0, 0, 0, 327,
	186, 187, 188, 189, 0, 0, 0, 0, 0, 0,
	0, 89, 90, 0, 91, 0, 0, 0, 0, 190,
	0, 0, 0, 1492, 92, 93, 191, 192, 193, 94,
	194, 195, 0, 95, 196, 197, 96, 0, 0, 198,
	199, 200, 0, 201, 0, 332, 0, 97, 98, 99,
	0, 100, 0, 101, 0, 333, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 106, 107, 202, 108,
	203, 204, 0, 0, 109, 0, 0, 0, 110, 111,
	0, 112, 0, 0, 0, 205, 113, 206, 0, 0,
	0, 114, 115, 207, 0, 116, 0, 117, 0, 0,
	334, 0, 118, 208, 0, 209, 0, 119, 120, 210,
	211, 0, 0, 121, 0, 335, 122, 212, 213, 214,
	0, 215, 0, 336, 123, 337, 124, 125, 0, 0,
	216, 338, 126, 339, 0, 127, 0, 0, 128, 0,
	129, 130, 131, 132, 133, 340, 134, 135, 138, 136,
	0, 137, 0, 217, 139, 218, 140, 141, 0, 0,
	0, 0, 0, 142, 219, 341, 143, 342, 220, 144,
	145, 0, 221, 146, 222, 0, 147, 148, 149, 223,
	150, 151, 0, 153, 154, 152, 155, 0, 156, 343,
	157, 158, 224, 159, 0, 247, 160, 161, 49, 225,
	162, 163, 0, 164, 165, 344, 166, 226, 167, 0,
	168, 169, 171, 227, 170, 228, 0, 51, 172, 173,
	0, 229, 230, 231, 0, 0, 174, 232, 233, 0,
	175, 176, 177, 178, 0, 0, 179, 180, 181, 0,
	0, 182, 183, 184, 331, 235, 0, 185, 0, 0,
	0, 47, 186, 187, 188, 189, 0, 48, 327, 579,
	0, 580, 575, 570, 0, 0, 0, 0, 0, 0,
	89, 90, 0, 91, 0, 46, 0, 0, 190, 0,
	0, 0, 0, 92, 93, 191, 192, 193, 94, 194,
	195, 0, 95, 196, 197, 96, 0, 0, 198, 199,
	200, 0, 201, 0, 332, 0, 97, 98, 99, 0,
	100, 0, 101, 0, 333, 102, 103, 0, 0, 0,
	0, 0, 0, 104, 105, 106, 107, 202, 108, 203,
	204, 583, 0, 109, 0, 0, 0, 110, 111, 0,
	112, 0, 0, 0, 205, 113, 206, 572, 0, 0,
	114, 115, 207, 0, 116, 0, 117, 0, 0, 334,
	0, 118, 208, 0, 209, 0, 119, 120, 210, 211,
	0, 0, 121, 0, 335, 122, 212, 213, 214, 0,
	215, 0, 336, 123, 337, 124, 125, 0, 0, 216,
	338, 126, 339, 0, 127, 0, 0, 128, 0, 129,
	130, 131, 132, 133, 340, 134, 135, 138, 136, 0,
	137, 0, 217, 139, 218, 140, 141, 0, 573, 0,
	0, 0, 142, 219, 341, 143, 342, 220, 144, 145,
	0, 221, 146, 222, 0, 147, 148, 149, 223, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 343, 157,
	158, 224, 159, 0, 247, 160, 161, 0, 225, 162,
	163, 0, 164, 165, 344, 166, 226, 167, 0, 168,
	169, 171, 227, 170, 228, 0, 0, 172, 173, 0,
	229, 230, 231, 0, 0, 174, 232, 233, 571, 175,
	176, 177, 178, 0, 0, 179, 180, 181, 0, 0,
	182, 183, 184, 234, 235, 0, 185, 0, 0, 0,
	0, 186, 187, 188, 189, 327, 579, 0, 580, 575,
	570, 0, 0, 0, 0, 581, 576, 89, 90, 0,
	91, 0, 0, 0, 0, 190, 0, 0, 0, 0,
	92, 93, 191, 192, 193, 94, 194, 195, 0, 95,
	196, 197, 96, 0, 0, 198, 199, 200, 0, 201,
	0, 332, 0, 97, 98, 99, 0, 100, 0, 101,
	0, 333, 102, 103, 0, 0, 0, 0, 0, 0,
	104, 105, 106, 107, 202, 108, 203, 204, 566, 0,
	109, 0, 0, 0, 110, 111, 0, 112, 0, 0,
	0, 205, 113, 206, 572, 0, 0, 114, 115, 207,
	0, 116, 0, 117, 0, 0, 334, 0, 118, 208,
	0, 209, 0, 119, 120, 210, 211, 0, 0, 121,
	0, 335, 122, 212, 213, 214, 0, 215, 0, 336,
	123, 337, 124, 125, 0, 0, 216, 338, 126, 339,
	0, 127, 0, 0, 128, 0, 129, 130, 131, 132,
	133, 340, 134, 135, 138, 136, 0, 137, 0, 217,
	139, 218, 140, 141, 0, 573, 0, 0, 0, 142,
	219, 341, 143, 342, 220, 144, 145, 0, 221, 146,
	222, 0, 147, 148, 149, 223, 150, 151, 0, 153,
	154, 152, 155, 0, 156, 343, 157, 158, 224, 159,
	0, 247, 160, 161, 0, 225, 162, 163, 0, 164,
	165, 344, 166, 226, 167, 0, 168, 169, 171, 227,
	170, 228, 0, 0, 172, 173, 0, 229, 230, 231,
	0, 0, 174, 232, 233, 571, 175, 176, 177, 178,
	0, 0, 179, 180, 181, 0, 0, 182, 183, 184,
	234, 235, 0, 185, 0, 0, 0, 0, 186, 187,
	188, 189, 327, 579, 0, 580, 575, 570, 0, 0,
	0, 0, 581, 576, 89, 90, 0, 91, 0, 0,
	0, 0, 190, 0, 0, 0, 0, 92, 93, 191,
	192, 193, 94, 194, 195, 0, 95, 196, 197, 96,
	0, 0, 198, 199, 200, 0, 201, 0, 332, 0,
	97, 98, 99, 0, 100, 0, 101, 0, 333, 102,
	103, 0, 0, 0, 0, 0, 0, 104, 105, 106,
	107, 202, 108, 203, 204, 0, 0, 109, 0, 0,
	0, 110, 111, 0, 112, 0, 0, 0, 205, 113,
	206, 572, 0, 0, 114, 115, 207, 0, 116, 0,
	117, 0, 0, 334, 0, 118, 208, 0, 209, 0,
	119, 120, 210, 211, 0, 0, 121, 0, 335, 122,
	212, 213, 214, 0, 215, 0, 336, 123, 337, 124,
	125, 0, 0, 216, 338, 126, 339, 0, 127, 0,
	0, 128, 0, 129, 130, 131, 132, 133, 340, 134,
	135, 138, 136, 0, 137, 0, 217, 139, 218, 140,
	141, 0, 573, 0, 0, 0, 142, 219, 341, 143,
	342, 220, 144, 145, 0, 221, 146, 222, 0, 147,
	148, 149, 223, 150, 151, 0, 153, 154, 152, 155,
	0, 156, 343, 157, 158, 224, 159, 0, 247, 160,
	161, 0, 225, 162, 163, 0, 164, 165, 344, 166,
	226, 167, 0, 168, 169, 171, 227, 170, 228, 0,
	0, 172, 173, 0, 229, 230, 231, 0, 0, 174,
	232, 233, 571, 175, 176, 177, 178, 0, 0, 179,
	180, 181, 0, 0, 182, 183, 184, 234, 235, 0,
	185, 86, 0, 0, 0, 186, 187, 188, 189, 0,
	0, 0, 0, 89, 90, 0, 91, 0, 0, 581,
	576, 190, 0, 0, 0, 0, 92, 93, 191, 192,
	193, 94, 194, 195, 0, 95, 196, 197, 96, 0,
	0, 198, 199, 200, 0, 201, 0, 0, 0, 97,
	98, 99, 0, 100, 0, 101, 0, 0, 102, 103,
	0, 0, 0, 0, 0, 0, 104, 105, 106, 107,
	202, 108, 203, 204, 0, 0, 109, 0, 0, 0,
	110, 111, 0, 112, 0, 0, 0, 205, 113, 206,
	0, 0, 0, 114, 115, 207, 0, 116, 0, 117,
	0, 0, 0, 0, 118, 208, 0, 209, 0, 119,
	120, 210, 211, 0, 0, 121, 0, 0, 122, 212,
	213, 214, 0, 215, 0, 0, 123, 0, 124, 125,
	0, 0, 216, 0, 126, 0, 0, 127, 0, 0,
	128, 0, 129, 130, 131, 132, 133, 0, 134, 135,
	138, 136, 0, 137, 0, 217, 139, 218, 140, 141,
	0, 0, 0, 0, 0, 142, 219, 0, 143, 0,
	220, 144, 145, 0, 221, 146, 222, 0, 147, 148,
	149, 223, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 0, 157, 158, 224, 159, 0, 247, 160, 161,
	49, 225, 162, 163, 0, 164, 165, 0, 166, 226,
	167, 0, 168, 169, 171, 227, 170, 228, 0, 51,
	172, 173, 0, 229, 230, 231, 0, 0, 174, 232,
	233, 0, 175, 176, 177, 178, 0, 0, 179, 180,
	181, 0, 0, 182, 183, 184, 331, 235, 0, 185,
	0, 0, 0, 47, 186, 187, 188, 189, 86, 48,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	89, 90, 0, 91, 0, 0, 0, 46, 190, 0,
	1175, 0, 0, 92, 93, 191, 192, 193, 94, 194,
	195, 0, 95, 196, 197, 96, 0, 0, 198, 199,
	200, 0, 201, 0, 0, 0, 97, 98, 99, 0,
	100, 0, 101, 0, 0, 102, 103, 0, 0, 0,
	0, 0, 0, 104, 105, 106, 107, 202, 108, 203,
	204, 0, 0, 109, 0, 0, 0, 110, 111, 0,
	112, 0, 0, 0, 205, 113, 206, 0, 0, 0,
	114, 115, 207, 0, 116, 0, 117, 0, 0, 0,
	0, 118, 208, 0, 209, 0, 119, 120, 210, 211,
	0, 0, 121, 0, 0, 122, 212, 213, 214, 0,
	215, 0, 0, 123, 0, 124, 125, 0, 0, 216,
	0, 126, 0, 0, 127, 0, 0, 128, 0, 129,
	130, 131, 132, 133, 0, 134, 135, 138, 136, 0,
	137, 0, 217, 139, 218, 140, 141, 0, 0, 0,
	0, 0, 142, 219, 0, 143, 0, 220, 144, 145,
	0, 221, 146, 222, 0, 147, 148, 149, 223, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 0, 157,
	158, 224, 159, 0, 247, 160, 161, 0, 225, 162,
	163, 0, 164, 165, 0, 166, 226, 167, 0, 168,
	169, 171, 227, 170, 228, 0, 0, 172, 173, 0,
	229, 230, 231, 0, 0, 174, 232, 233, 0, 175,
	176, 177, 178, 0, 0, 179, 180, 181, 0, 0,
	182, 183, 184, 234, 235, 0, 185, 0, 0, 0,
	0, 186, 187, 188, 189, 0, 86, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 89, 90,
	0, 91, 0, 0, 0, 405, 190, 0, 0, 0,
	0, 92, 93, 191, 192, 193, 94, 194, 195, 0,
	95, 196, 197, 96, 0, 0, 198, 199, 200, 0,
	201, 0, 0, 0, 97, 98, 99, 0, 100, 0,
	101, 0, 0, 102, 103, 0, 0, 0, 0, 0,
	0, 104, 105, 106, 107, 202, 108, 203, 204, 0,
	0, 109, 0, 0, 0, 110, 111, 0, 112, 0,
	0, 0, 205, 113, 206, 0, 0, 0, 114, 115,
	207, 0, 116, 0, 117, 0, 0, 0, 0, 118,
	208, 0, 209, 0, 119, 120, 210, 211, 0, 0,
	121, 0, 0, 122, 212, 213, 214, 0, 215, 0,
	0, 123, 0, 124, 125, 0, 0, 216, 0, 126,
	0, 0, 127, 0, 0, 128, 0, 129, 130, 131,
	132, 133, 0, 134, 135, 138, 136, 0, 137, 0,
	217, 139, 218, 140, 141, 0, 0, 300, 0, 0,
	142, 219, 0, 143, 0, 220, 144, 145, 0, 221,
	146, 222, 0, 147, 148, 149, 223, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 0, 157, 158, 224,
	159, 0, 247, 160, 161, 0, 225, 162, 163, 0,
	164, 165, 0, 166, 226, 167, 0, 168, 169, 171,
	227, 170, 228, 0, 0, 172, 173, 0, 229, 230,
	231, 0, 0, 174, 232, 233, 0, 175, 176, 177,
	178, 0, 0, 179, 180, 181, 0, 0, 182, 183,
	184, 234, 235, 0, 185, 0, 0, 0, 86, 186,
	187, 188, 189, 0, 0, 0, 0, 0, 0, 0,
	89, 90, 0, 91, 0, 0, 0, 0, 190, 0,
	0, 0, 924, 92, 93, 191, 192, 193, 94, 194,
	195, 0, 95, 196, 197, 96, 0, 0, 198, 199,
	200, 0, 201, 0, 0, 0, 97, 98, 99, 0,
	100, 0, 101, 0, 0, 102, 103, 0, 0, 0,
	0, 0, 0, 104, 105, 106, 107, 202, 108, 203,
	204, 0, 0, 109, 0, 0, 0, 110, 111, 0,
	112, 0, 0, 0, 205, 113, 206, 0, 0, 0,
	114, 115, 207, 0, 116, 0, 117, 0, 0, 0,
	0, 118, 208, 0, 209, 0, 119, 120, 210, 211,
	0, 0, 121, 0, 0, 122, 212, 213, 214, 0,
	215, 0, 0, 123, 0, 124, 125, 0, 0, 216,
	0, 126, 0, 0, 127, 0, 0, 128, 0, 129,
	130, 131, 132, 133, 0, 134, 135, 138, 136, 0,
	137, 0, 217, 139, 218, 140, 141, 0, 0, 0,
	0, 0, 142, 219, 0, 143, 0, 220, 144, 145,
	0, 221, 146, 222, 0, 147, 148, 149, 223, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 0, 157,
	158, 224, 159, 0, 247, 160, 161, 0, 225, 162,
	163, 0, 164, 165, 0, 166, 226, 167, 0, 168,
	169, 171, 227, 170, 228, 0, 0, 172, 173, 0,
	229, 230, 231, 0, 0, 174, 232, 233, 0, 175,
	176, 177, 178, 0, 0, 179, 180, 181, 0, 0,
	182, 183, 184, 234, 235, 0, 185, 0, 0, 0,
	86, 186, 187, 188, 189, 0, 0, 0, 0, 0,
	0, 0, 89, 90, 0, 91, 0, 0, 0, 0,
	190, 0, 0, 0, 857, 92, 93, 191, 192, 193,
	94, 194, 195, 0, 95, 196, 197, 96, 0, 0,
	198, 199, 200, 0, 201, 0, 0, 0, 97, 98,
	99, 0, 100, 0, 101, 0, 0, 102, 103, 0,
	0, 0, 0, 0, 0, 104, 105, 106, 107, 202,
	108, 203, 204, 0, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 205, 113, 206, 0,
	0, 0, 114, 115, 207, 0, 116, 0, 117, 0,
	0, 0, 0, 118, 208, 0, 209, 0, 119, 120,
	210, 211, 0, 0, 121, 0, 0, 122, 212, 213,
	214, 0, 215, 0, 0, 123, 0, 124, 125, 0,
	0, 216, 0, 126, 0, 0, 127, 0, 0, 128,
	0, 129, 130, 131, 132, 133, 0, 134, 135, 138,
	136, 0, 137, 0, 217, 139, 218, 140, 141, 0,
	0, 0, 0, 0, 142, 219, 0, 143, 0, 220,
	144, 145, 0, 221, 146, 222, 0, 147, 148, 149,
	223, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	0, 157, 158, 224, 159, 0, 247, 160, 161, 0,
	225, 162, 163, 0, 164, 165, 0, 166, 226, 167,
	0, 168, 169, 171, 227, 170, 228, 0, 0, 172,
	173, 0, 229, 230, 231, 0, 0, 174, 232, 233,
	0, 175, 176, 177, 178, 0, 0, 179, 180, 181,
	0, 0, 182, 183, 184, 234, 235, 0, 185, 0,
	0, 0, 86, 186, 187, 188, 189, 0, 0, 0,
	0, 0, 0, 0, 89, 90, 0, 91, 0, 0,
	0, 0, 190, 0, 0, 0, 1396, 92, 93, 191,
	192, 193, 94, 194, 195, 0, 95, 196, 197, 96,
	0, 0, 198, 199, 200, 0, 201, 0, 0, 0,
	97, 98, 99, 0, 100, 0, 101, 0, 0, 102,
	103, 0, 0, 0, 0, 0, 0, 104, 105, 106,
	107, 202, 108, 203, 204, 0, 0, 109, 0, 0,
	0, 110, 111, 0, 112, 0, 0, 0, 205, 113,
	206, 0, 0, 0, 114, 115, 207, 0, 116, 0,
	117, 0, 0, 0, 0, 118, 208, 0, 209, 0,
	119, 120, 210, 211, 0, 0, 121, 0, 0, 122,
	212, 213, 214, 0, 215, 0, 0, 123, 0, 124,
	125, 0, 0, 216, 0, 126, 0, 0, 127, 0,
	0, 128, 0, 129, 130, 131, 132, 133, 0, 134,
	135, 138, 136, 0, 137, 0, 217, 139, 218, 140,
	141, 0, 0, 0, 0, 0, 142, 219, 0, 143,
	0, 220, 144, 145, 0, 221, 146, 222, 0, 147,
	148, 149, 223, 150, 151, 0, 153, 154, 152, 155,
	0, 156, 0, 157, 158, 224, 159, 0, 247, 160,
	161, 0, 225, 162, 163, 0, 164, 165, 0, 166,
	226, 167, 0, 168, 169, 171, 227, 170, 228, 0,
	0, 172, 173, 0, 229, 230, 231, 0, 0, 174,
	232, 233, 0, 175, 176, 177, 178, 0, 0, 179,
	180, 181, 0, 0, 182, 183, 184, 234, 235, 0,
	185, 0, 0, 0, 86, 186, 187, 188, 189, 0,
	0, 0, 0, 0, 0, 0, 89, 90, 0, 91,
	0, 0, 0, 0, 190, 0, 0, 0, 507, 92,
	93, 191, 192, 193, 94, 194, 195, 0, 95, 196,
	197, 96, 0, 0, 198, 199, 200, 0, 201, 0,
	0, 0, 97, 98, 99, 0, 100, 0, 101, 0,
	0, 102, 103, 0, 0, 0, 0, 0, 0, 104,
	105, 551, 107, 202, 108, 203, 204, 0, 0, 109,
	0, 0, 0, 110, 111, 0, 112, 0, 0, 0,
	205, 113, 206, 0, 0, 0, 114, 115, 207, 0,
	116, 0, 117, 0, 0, 0, 0, 118, 208, 0,
	209, 0, 119, 120, 210, 211, 0, 0, 121, 0,
	0, 122, 212, 213, 214, 0, 215, 0, 0, 123,
	0, 124, 125, 0, 0, 216, 0, 126, 0, 0,
	127, 0, 0, 128, 0, 129, 130, 131, 132, 133,
	0, 134, 135, 138, 136, 0, 137, 0, 217, 139,
	218, 140, 141, 0, 0, 0, 0, 0, 142, 219,
	0, 143, 0, 220, 144, 145, 0, 221, 146, 222,
	0, 147, 148, 149, 223, 150, 151, 0, 153, 154,
	152, 155, 0, 156, 0, 157, 158, 224, 159, 0,
	247, 160, 161, 0, 225, 162, 163, 0, 164, 165,
	0, 166, 226, 167, 0, 168, 169, 171, 227, 170,
	228, 0, 550, 172, 173, 0, 229, 230, 231, 0,
	0, 174, 232, 233, 0, 175, 176, 177, 178, 0,
	0, 179, 180, 181, 0, 0, 182, 183, 184, 234,
	235, 86, 185, 0, 0, 0, 0, 186, 187, 188,
	189, 0, 0, 89, 90, 0, 91, 0, 0, 0,
	0, 190, 0, 554, 0, 0, 92, 93, 191, 192,
	193, 94, 194, 195, 0, 95, 196, 197, 96, 0,
	0, 198, 199, 200, 0, 201, 0, 0, 0, 97,
	98, 99, 0, 100, 0, 101, 0, 0, 102, 103,
	0, 0, 0, 0, 0, 0, 104, 105, 106, 107,
	202, 108, 203, 204, 0, 0, 109, 0, 0, 0,
	110, 111, 0, 112, 0, 0, 0, 205, 113, 206,
	0, 0, 0, 114, 115, 207, 0, 116, 0, 117,
	0, 0, 0, 0, 118, 208, 0, 209, 0, 119,
	120, 210, 211, 0, 0, 121, 0, 0, 122, 212,
	213, 214, 0, 215, 0, 0, 123, 0, 124, 125,
	0, 0, 216, 0, 126, 0, 0, 127, 0, 0,
	128, 0, 129, 130, 131, 132, 133, 0, 134, 135,
	138, 136, 0, 137, 0, 217, 139, 218, 140, 141,
	0, 0, 0, 0, 0, 142, 219, 0, 143, 0,
	220, 144, 145, 0, 221, 146, 222, 0, 147, 148,
	149, 223, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 0, 157, 158, 224, 159, 0, 247, 160, 161,
	0, 225, 162, 163, 0, 164, 165, 0, 166, 226,
	167, 0, 168, 169, 171, 227, 170, 228, 0, 0,
	172, 173, 0, 229, 230, 231, 0, 0, 174, 232,
	233, 0, 175, 176, 177, 178, 0, 0, 179, 180,
	181, 0, 0, 182, 183, 184, 234, 235, 327, 185,
	0, 0, 0, 0, 186, 187, 188, 189, 0, 0,
	89, 90, 0, 91, 0, 0, 0, 0, 190, 0,
	554, 0, 0, 92, 93, 191, 192, 193, 94, 194,
	195, 0, 95, 196, 197, 96, 0, 0, 198, 199,
	200, 0, 201, 0, 332, 0, 97, 98, 99, 0,
	100, 0, 101, 0, 333, 102, 103, 0, 0, 0,
	0, 0, 0, 104, 105, 106, 107, 202, 108, 203,
	204, 0, 0, 109, 0, 0, 0, 110, 111, 0,
	112, 0, 0, 0, 205, 113, 206, 0, 0, 0,
	114, 115, 207, 0, 116, 0, 117, 0, 0, 334,
	0, 118, 208, 0, 209, 0, 119, 120, 210, 211,
	0, 0, 121, 0, 335, 122, 212, 213, 214, 0,
	215, 0, 336, 123, 337, 124, 125, 0, 0, 216,
	338, 126, 339, 0, 127, 0, 0, 128, 0, 129,
	130, 131, 132, 133, 340, 134, 135, 138, 136, 0,
	137, 0, 217, 139, 218, 140, 141, 0, 0, 0,
	0, 0, 142, 219, 341, 143, 342, 220, 144, 145,
	0, 221, 146, 222, 0, 147, 148, 149, 223, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 343, 157,
	158, 224, 159, 0, 247, 160, 161, 0, 225, 162,
	163, 0, 164, 165, 344, 166, 226, 167, 0, 168,
	169, 171, 227, 170, 228, 0, 0, 172, 173, 0,
	229, 230, 231, 0, 0, 174, 232, 233, 0, 175,
	176, 177, 178, 0, 0, 179, 180, 181, 0, 0,
	182, 183, 184, 234, 235, 86, 185, 0, 0, 0,
	0, 186, 187, 188, 189, 0, 0, 89, 90, 0,
	91, 0, 0, 0, 0, 190, 0, 0, 0, 0,
	92, 93, 191, 192, 193, 94, 194, 195, 0, 95,
	196, 197, 96, 0, 0, 198, 199, 200, 830, 201,
	0, 0, 0, 97, 98, 99, 0, 100, 828, 101,
	0, 0, 102, 103, 0, 0, 0, 0, 0, 0,
	104, 105, 106, 107, 202, 108, 203, 204, 0, 0,
	109, 0, 0, 0, 110, 111, 0, 112, 0, 0,
	0, 205, 113, 206, 0, 901, 0, 114, 115, 207,
	0, 116, 0, 117, 833, 0, 0, 0, 118, 208,
	0, 209, 0, 119, 120, 210, 211, 0, 899, 121,
	0, 0, 122, 212, 213, 214, 0, 215, 0, 0,
	123, 0, 124, 125, 0, 0, 216, 0, 126, 0,
	0, 127, 0, 0, 128, 0, 129, 130, 131, 132,
	133, 0, 134, 135, 138, 136, 0, 137, 0, 217,
	139, 218, 140, 141, 0, 0, 0, 0, 0, 142,
	219, 0, 143, 0, 220, 144, 145, 0, 221, 146,
	222, 832, 147, 148, 149, 223, 150, 151, 0, 153,
	154, 152, 155, 0, 156, 0, 157, 158, 224, 159,
	0, 247, 160, 161, 0, 225, 162, 163, 0, 164,
	165, 0, 166, 226, 167, 0, 168, 169, 171, 227,
	170, 228, 0, 0, 172, 173, 0, 229, 230, 231,
	0, 0, 174, 232, 233, 0, 175, 176, 177, 178,
	0, 900, 179, 180, 181, 0, 0, 182, 183, 184,
	234, 235, 86, 185, 0, 0, 0, 0, 186, 187,
	188, 189, 0, 0, 89, 90, 0, 91, 0, 0,
	0, 0, 190, 0, 0, 0, 0, 92, 93, 191,
	192, 193, 94, 194, 195, 0, 95, 196, 197, 96,
	0, 0, 198, 199, 200, 830, 201, 0, 0, 825,
	97, 98, 99, 0, 100, 828, 101, 0, 0, 102,
	103, 0, 0, 0, 0, 0, 0, 104, 105, 106,
	107, 202, 108, 203, 204, 0, 0, 109, 0, 0,
	0, 110, 111, 0, 112, 0, 0, 0, 205, 113,
	206, 0, 0, 0, 114, 115, 207, 0, 116, 0,
	117, 833, 0, 0, 0, 118, 208, 0, 209, 0,
	119, 120, 824, 211, 0, 0, 121, 0, 0, 122,
	212, 213, 214, 0, 215, 0, 0, 123, 0, 124,
	125, 0, 0, 216, 0, 126, 0, 0, 127, 0,
	0, 128, 0, 129, 130, 131, 132, 133, 0, 134,
	135, 138, 136, 0, 137, 0, 217, 139, 218, 140,
	141, 0, 0, 0, 0, 0, 142, 219, 0, 143,
	0, 220, 144, 145, 0, 221, 146, 222, 832, 147,
	148, 149, 223, 150, 151, 0, 153, 154, 152, 155,
	0, 156, 0, 157, 158, 224, 159, 0, 247, 160,
	161, 0, 225, 162, 163, 0, 164, 165, 0, 166,
	226, 167, 0, 168, 169, 171, 227, 170, 228, 0,
	0, 172, 173, 0, 229, 230, 231, 0, 0, 174,
	232, 233, 0, 175, 176, 177, 178, 0, 831, 179,
	180, 181, 0, 0, 182, 183, 184, 234, 235, 86,
	185, 0, 0, 0, 0, 186, 187, 188, 189, 0,
	0, 89, 90, 0, 91, 0, 0, 0, 0, 190,
	0, 1175, 0, 0, 92, 93, 191, 192, 193, 94,
	194, 195, 0, 95, 196, 197, 96, 0, 0, 198,
	199, 200, 0, 201, 0, 0, 0, 97, 98, 99,
	0, 100, 0, 101, 0, 0, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 106, 107, 202, 108,
	203, 204, 0, 0, 109, 0, 0, 0, 110, 111,
	0, 112, 0, 0, 0, 205, 113, 206, 0, 0,
	0, 114, 115, 207, 0, 116, 0, 117, 0, 0,
	0, 0, 118, 208, 0, 209, 0, 119, 120, 210,
	211, 0, 0, 121, 0, 0, 122, 212, 213, 214,
	0, 215, 0, 0, 123, 0, 124, 125, 0, 0,
	216, 0, 126, 0, 0, 127, 0, 0, 128, 0,
	129, 130, 131, 132, 133, 0, 134, 135, 138, 136,
	0, 137, 0, 217, 139, 218, 140, 141, 0, 0,
	0, 0, 0, 142, 219, 0, 143, 0, 220, 144,
	145, 0, 221, 146, 222, 0, 147, 148, 149, 223,
	150, 151, 0, 153, 154, 152, 155, 0, 156, 0,
	157, 158, 224, 159, 0, 247, 160, 161, 0, 225,
	162, 163, 0, 164, 165, 0, 166, 226, 167, 0,
	168, 169, 171, 227, 170, 228, 0, 0, 172, 173,
	0, 229, 230, 231, 0, 0, 174, 232, 233, 0,
	175, 176, 177, 178, 0, 0, 179, 180, 181, 0,
	0, 182, 183, 184, 234, 235, 86, 185, 0, 0,
	0, 0, 186, 187, 188, 189, 0, 0, 89, 90,
	0, 91, 0, 0, 0, 0, 190, 0, 0, 0,
	0, 92, 93, 191, 192, 193, 94, 194, 195, 0,
	95, 196, 197, 96, 0, 0, 198, 199, 200, 0,
	201, 0, 0, 0, 97, 98, 99, 0, 100, 0,
	101, 0, 0, 102, 103, 0, 0, 0, 0, 0,
	0, 104, 105, 106, 107, 202, 108, 203, 204, 0,
	0, 109, 0, 0, 0, 110, 111, 0, 112, 0,
	0, 0, 205, 113, 206, 0, 0, 0, 114, 115,
	207, 0, 116, 0, 117, 0, 0, 0, 0, 118,
	208, 0, 209, 0, 119, 120, 210, 211, 0, 0,
	121, 0, 0, 122, 212, 213, 214, 0, 215, 0,
	0, 123, 0, 124, 125, 0, 0, 216, 0, 126,
	0, 0, 127, 0, 0, 128, 0, 129, 130, 131,
	132, 133, 0, 134, 135, 138, 136, 0, 137, 0,
	217, 139, 218, 140, 141, 0, 0, 300, 0, 0,
	142, 219, 0, 143, 0, 220, 144, 145, 0, 221,
	146, 222, 0, 147, 148, 149, 223, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 0, 157, 158, 224,
	159, 0, 247, 160, 161, 0, 225, 162, 163, 0,
	164, 165, 0, 166, 226, 167, 0, 168, 169, 171,
	227, 170, 228, 0, 0, 172, 173, 0, 229, 230,
	231, 0, 0, 174, 232, 233, 0, 175, 176, 177,
	178, 0, 0, 179, 180, 181, 0, 0, 182, 183,
	184, 234, 235, 86, 185, 0, 0, 0, 0, 186,
	187, 188, 189, 0, 0, 89, 90, 0, 91, 0,
	0, 0, 0, 190, 0, 0, 0, 0, 92, 93,
	191, 192, 193, 94, 194, 195, 0, 95, 196, 197,
	96, 0, 0, 198, 199, 200, 0, 201, 0, 0,
	0, 97, 98, 99, 0, 100, 0, 101, 0, 0,
	102, 103, 0, 0, 0, 0, 0, 0, 104, 105,
	106, 107, 202, 108, 203, 204, 0, 0, 109, 0,
	0, 0, 110, 111, 0, 112, 0, 0, 0, 205,
	113, 206, 0, 0, 0, 114, 115, 207, 0, 116,
	0, 117, 0, 0, 0, 0, 118, 208, 0, 209,
	0, 119, 120, 306, 211, 0, 0, 121, 0, 0,
	122, 212, 213, 214, 0, 215, 0, 0, 123, 0,
	124, 125, 0, 0, 216, 0, 126, 0, 0, 127,
	0, 0, 128, 0, 129, 130, 131, 132, 133, 0,
	134, 135, 138, 136, 0, 137, 0, 217, 139, 218,
	140, 141, 0, 0, 300, 0, 0, 142, 219, 0,
	143, 0, 220, 144, 145, 0, 221, 146, 222, 0,
	147, 148, 149, 223, 150, 151, 0, 153, 154, 152,
	155, 0, 156, 0, 157, 158, 224, 159, 0, 247,
	160, 161, 0, 225, 162, 163, 0, 164, 165, 0,
	166, 226, 167, 0, 168, 169, 171, 227, 170, 228,
	0, 0, 172, 173, 0, 229, 230, 231, 0, 0,
	174, 232, 233, 0, 175, 176, 177, 178, 0, 0,
	179, 180, 181, 0, 0, 182, 183, 184, 234, 235,
	86, 185, 0, 0, 0, 0, 186, 187, 188, 189,
	0, 0, 89, 90, 0, 91, 0, 0, 0, 0,
	190, 0, 0, 0, 0, 92, 93, 191, 192, 193,
	94, 194, 195, 0, 95, 196, 197, 96, 0, 0,
	198, 199, 200, 0, 201, 0, 0, 0, 97, 98,
	99, 0, 100, 0, 101, 0, 0, 102, 103, 0,
	0, 0, 0, 0, 0, 104, 105, 106, 107, 202,
	108, 203, 204, 0, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 205, 113, 206, 0,
	0, 0, 114, 115, 207, 0, 116, 0, 117, 0,
	0, 0, 0, 118, 208, 0, 209, 0, 119, 120,
	210, 211, 0, 0, 121, 0, 0, 122, 212, 213,
	214, 0, 215, 0, 0, 123, 0, 124, 125, 0,
	0, 216, 0, 126, 0, 0, 127, 0, 0, 128,
	0, 129, 130, 131, 132, 133, 0, 134, 135, 138,
	136, 0, 137, 0, 217, 139, 218, 140, 141, 0,
	0, 0, 0, 0, 142, 219, 0, 143, 0, 220,
	144, 145, 0, 221, 146, 222, 0, 147, 148, 149,
	223, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	0, 157, 158, 224, 159, 0, 247, 160, 161, 0,
	225, 162, 163, 0, 164, 165, 0, 166, 226, 167,
	0, 168, 169, 171, 227, 170, 228, 0, 0, 172,
	173, 0, 229, 230, 231, 0, 0, 174, 232, 233,
	0, 175, 176, 177, 178, 0, 0, 179, 180, 181,
	0, 0, 182, 183, 184, 234, 235, 86, 185, 0,
	0, 0, 0, 186, 187, 188, 189, 0, 0, 89,
	90, 0, 91, 0, 0, 0, 0, 190, 0, 0,
	0, 0, 92, 93, 191, 192, 193, 94, 194, 195,
	0, 95, 196, 197, 96, 0, 0, 198, 199, 200,
	0, 201, 0, 0, 0, 97, 98, 99, 0, 100,
	0, 101, 0, 0, 102, 103, 0, 0, 0, 0,
	0, 0, 104, 105, 106, 107, 202, 108, 203, 204,
	0, 0, 109, 0, 0, 0, 110, 111, 0, 112,
	0, 0, 0, 205, 113, 206, 0, 0, 0, 114,
	115, 207, 0, 116, 0, 117, 0, 0, 0, 0,
	118, 208, 0, 209, 0, 119, 120, 1108, 211, 0,
	0, 121, 0, 0, 122, 212, 213, 214, 0, 215,
	0, 0, 123, 0, 124, 125, 0, 0, 216, 0,
	126, 0, 0, 127, 0, 0, 128, 0, 129, 130,
	131, 132, 133, 0, 134, 135, 138, 136, 0, 137,
	0, 217, 139, 218, 140, 141, 0, 0, 0, 0,
	0, 142, 219, 0, 143, 0, 220, 144, 145, 0,
	221, 146, 222, 0, 147, 148, 149, 223, 150, 151,
	0, 153, 154, 152, 155, 0, 156, 0, 157, 158,
	224, 159, 0, 247, 160, 161, 0, 225, 162, 163,
	0, 164, 165, 0, 166, 226, 167, 0, 168, 169,
	171, 227, 170, 228, 0, 0, 172, 173, 0, 229,
	230, 231, 0, 0, 174, 232, 233, 0, 175, 176,
	177, 178, 0, 0, 179, 180, 181, 0, 0, 182,
	183, 184, 234, 235, 86, 185, 0, 0, 0, 0,
	186, 187, 188, 189, 0, 0, 89, 90, 0, 91,
	0, 0, 0, 0, 190, 0, 0, 0, 0, 92,
	93, 191, 192, 193, 94, 194, 195, 0, 95, 196,
	197, 96, 0, 0, 198, 199, 200, 0, 201, 0,
	0, 0, 97, 98, 99, 0, 100, 0, 101, 0,
	0, 102, 103, 0, 0, 0, 0, 0, 0, 104,
	105, 106, 107, 202, 108, 203, 204, 0, 0, 109,
	0, 0, 0, 110, 111, 0, 112, 0, 0, 0,
	205, 113, 206, 0, 0, 0, 114, 115, 207, 0,
	116, 0, 117, 0, 0, 0, 0, 118, 208, 0,
	209, 0, 119, 120, 1106, 211, 0, 0, 121, 0,
	0, 122, 212, 213, 214, 0, 215, 0, 0, 123,
	0, 124, 125, 0, 0, 216, 0, 126, 0, 0,
	127, 0, 0, 128, 0, 129, 130, 131, 132, 133,
	0, 134, 135, 138, 136, 0, 137, 0, 217, 139,
	218, 140, 141, 0, 0, 0, 0, 0, 142, 219,
	0, 143, 0, 220, 144, 145, 0, 221, 146, 222,
	0, 147, 148, 149, 223, 150, 151, 0, 153, 154,
	152, 155, 0, 156, 0, 157, 158, 224, 159, 0,
	247, 160, 161, 0, 225, 162, 163, 0, 164, 165,
	0, 166, 226, 167, 0, 168, 169, 171, 227, 170,
	228, 0, 0, 172, 173, 0, 229, 230, 231, 0,
	0, 174, 232, 233, 0, 175, 176, 177, 178, 0,
	0, 179, 180, 181, 0, 0, 182, 183, 184, 234,
	235, 86, 185, 0, 0, 0, 0, 186, 187, 188,
	189, 0, 0, 89, 90, 0, 91, 0, 0, 0,
	0, 190, 0, 0, 0, 0, 92, 93, 191, 192,
	193, 94, 194, 195, 0, 95, 196, 197, 96, 0,
	0, 198, 199, 200, 0, 201, 0, 0, 0, 97,
	98, 99, 0, 100, 0, 101, 0, 0, 102, 103,
	0, 0, 0, 0, 0, 0, 104, 105, 106, 107,
	202, 108, 203, 204, 0, 0, 109, 0, 0, 0,
	110, 111, 0, 112, 0, 0, 0, 205, 113, 206,
	0, 0, 0, 114, 115, 207, 0, 116, 0, 117,
	0, 0, 0, 0, 118, 208, 0, 209, 0, 119,
	120, 1097, 211, 0, 0, 121, 0, 0, 122, 212,
	213, 214, 0, 215, 0, 0, 123, 0, 124, 125,
	0, 0, 216, 0, 126, 0, 0, 127, 0, 0,
	128, 0, 129, 130, 131, 132, 133, 0, 134, 135,
	138, 136, 0, 137, 0, 217, 139, 218, 140, 141,
	0, 0, 0, 0, 0, 142, 219, 0, 143, 0,
	220, 144, 145, 0, 221, 146, 222, 0, 147, 148,
	149, 223, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 0, 157, 158, 224, 159, 0, 247, 160, 161,
	0, 225, 162, 163, 0, 164, 165, 0, 166, 226,
	167, 0, 168, 169, 171, 227, 170, 228, 0, 0,
	172, 173, 0, 229, 230, 231, 0, 0, 174, 232,
	233, 0, 175, 176, 177, 178, 0, 0, 179, 180,
	181, 0, 0, 182, 183, 184, 234, 235, 86, 185,
	0, 0, 0, 0, 186, 187, 188, 189, 0, 0,
	89, 90, 0, 91, 0, 0, 0, 0, 190, 0,
	0, 0, 0, 92, 93, 191, 192, 193, 94, 194,
	195, 0, 95, 196, 197, 96, 0, 0, 198, 199,
	200, 0, 201, 0, 0, 0, 97, 98, 99, 0,
	100, 0, 101, 0, 0, 102, 103, 0, 0, 0,
	0, 0, 0, 104, 105, 106, 107, 202, 108, 203,
	204, 0, 0, 109, 0, 0, 0, 110, 111, 0,
	112, 0, 0, 0, 205, 113, 206, 0, 0, 0,
	114, 115, 207, 0, 116, 0, 117, 0, 0, 0,
	0, 118, 208, 0, 209, 0, 119, 120, 697, 211,
	0, 0, 121, 0, 0, 122, 212, 213, 214, 0,
	215, 0, 0, 123, 0, 124, 125, 0, 0, 216,
	0, 126, 0, 0, 127, 0, 0, 128, 0, 129,
	130, 131, 132, 133, 0, 134, 135, 138, 136, 0,
	137, 0, 217, 139, 218, 140, 141, 0, 0, 0,
	0, 0, 142, 219, 0, 143, 0, 220, 144, 145,
	0, 221, 146, 222, 0, 147, 148, 149, 223, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 0, 157,
	158, 224, 159, 0, 247, 160, 161, 0, 225, 162,
	163, 0, 164, 165, 0, 166, 226, 167, 0, 168,
	169, 171, 227, 170, 228, 0, 0, 172, 173, 0,
	229, 230, 231, 0, 0, 174, 232, 233, 0, 175,
	176, 177, 178, 0, 0, 179, 180, 181, 0, 0,
	182, 183, 184, 234, 235, 86, 185, 0, 0, 0,
	0, 186, 187, 188, 189, 0, 0, 89, 90, 0,
	91, 0, 0, 0, 0, 190, 0, 0, 0, 0,
	92, 93, 191, 192, 193, 94, 194, 195, 0, 95,
	196, 197, 96, 0, 0, 198, 199, 200, 0, 201,
	0, 0, 0, 97, 98, 99, 0, 100, 0, 101,
	0, 0, 102, 103, 0, 0, 0, 0, 0, 0,
	104, 105, 106, 107, 202, 108, 203, 204, 0, 0,
	109, 0, 0, 0, 110, 111, 0, 112, 0, 0,
	0, 205, 113, 206, 0, 0, 0, 114, 115, 207,
	0, 116, 0, 117, 0, 0, 0, 0, 118, 208,
	0, 209, 0, 119, 120, 210, 211, 0, 0, 121,
	0, 0, 122, 212, 213, 214, 0, 215, 0, 0,
	123, 0, 124, 125, 0, 0, 216, 0, 126, 0,
	0, 127, 0, 0, 128, 0, 129, 130, 131, 132,
	133, 0, 134, 135, 138, 136, 0, 137, 0, 217,
	139, 218, 140, 141, 0, 0, 0, 0, 0, 142,
	219, 0, 143, 0, 220, 144, 145, 0, 221, 146,
	222, 0, 147, 148, 149, 223, 150, 151, 0, 153,
	154, 152, 155, 0, 156, 0, 157, 158, 224, 159,
	0, 84, 160, 161, 0, 225, 162, 163, 0, 164,
	165, 0, 166, 226, 167, 0, 168, 169, 171, 227,
	170, 228, 0, 0, 172, 173, 0, 229, 230, 231,
	0, 0, 174, 232, 233, 0, 175, 176, 177, 178,
	0, 0, 179, 180, 181, 0, 0, 182, 183, 184,
	234, 235, 86, 185, 0, 0, 0, 0, 186, 187,
	188, 189, 0, 0, 89, 90, 0, 91, 0, 0,
	0, 0, 190, 0, 536, 0, 0, 92, 93, 191,
	192, 193, 94, 194, 195, 0, 95, 196, 197, 96,
	0, 0, 198, 199, 200, 0, 201, 0, 0, 0,
	97, 98, 99, 0, 100, 0, 101, 0, 0, 102,
	103, 0, 0, 0, 0, 0, 0, 104, 105, 106,
	107, 202, 108, 203, 204, 0, 0, 109, 0, 0,
	0, 110, 111, 0, 112, 0, 0, 0, 205, 113,
	206, 0, 0, 0, 114, 115, 207, 0, 116, 0,
	117, 0, 0, 0, 0, 118, 208, 0, 209, 0,
	119, 120, 210, 211, 0, 0, 121, 0, 0, 122,
	212, 213, 214, 0, 215, 0, 0, 123, 0, 124,
	125, 0, 0, 216, 0, 126, 0, 0, 127, 0,
	0, 128, 0, 129, 130, 131, 132, 133, 0, 134,
	135, 138, 136, 0, 137, 0, 217, 139, 218, 140,
	141, 0, 0, 0, 0, 0, 142, 219, 0, 143,
	0, 220, 144, 145, 0, 221, 146, 222, 0, 147,
	148, 149, 223, 150, 151, 0, 153, 154, 152, 155,
	0, 156, 0, 157, 158, 224, 159, 0, 247, 160,
	161, 0, 225, 162, 163, 0, 0, 165, 0, 166,
	226, 167, 0, 168, 169, 171, 227, 170, 228, 0,
	0, 172, 173, 0, 229, 230, 231, 0, 0, 174,
	232, 233, 0, 175, 176, 177, 178, 0, 0, 179,
	180, 181, 0, 0, 182, 183, 184, 234, 235, 86,
	185, 0, 0, 0, 0, 186, 187, 188, 189, 0,
	0, 89, 90, 0, 91, 0, 0, 0, 0, 190,
	0, 0, 0, 0, 92, 93, 191, 192, 193, 94,
	194, 195, 0, 95, 196, 197, 96, 0, 0, 198,
	199, 200, 0, 201, 0, 0, 0, 97, 98, 99,
	0, 100, 0, 101, 0, 0, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 106, 107, 202, 108,
	203, 204, 0, 0, 109, 0, 0, 0, 110, 111,
	0, 112, 0, 0, 0, 205, 113, 206, 0, 0,
	0, 114, 115, 207, 0, 116, 0, 117, 0, 0,
	0, 0, 118, 208, 0, 209, 0, 119, 120, 390,
	211, 0, 0, 121, 0, 0, 122, 212, 213, 214,
	0, 215, 0, 0, 123, 0, 124, 125, 0, 0,
	216, 0, 126, 0, 0, 127, 0, 0, 128, 0,
	129, 130, 131, 132, 133, 0, 134, 135, 138, 136,
	0, 137, 0, 217, 139, 218, 140, 141, 0, 0,
	0, 0, 0, 142, 219, 0, 143, 0, 220, 144,
	145, 0, 221, 146, 222, 0, 147, 148, 149, 223,
	150, 151, 0, 153, 154, 152, 155, 0, 156, 0,
	157, 158, 224, 159, 0, 247, 160, 161, 0, 225,
	162, 163, 0, 164, 165, 0, 166, 226, 167, 0,
	168, 169, 171, 227, 170, 228, 0, 0, 172, 173,
	0, 229, 230, 231, 0, 0, 174, 232, 233, 0,
	175, 176, 177, 178, 0, 0, 179, 180, 181, 0,
	0, 182, 183, 184, 234, 235, 86, 185, 0, 0,
	0, 0, 186, 187, 188, 189, 0, 0, 89, 90,
	0, 91, 0, 0, 0, 0, 190, 0, 0, 0,
	0, 92, 93, 191, 192, 193, 94, 194, 195, 0,
	95, 196, 197, 96, 0, 0, 198, 199, 200, 0,
	201, 0, 0, 0, 97, 98, 99, 0, 100, 0,
	101, 0, 0, 102, 103, 0, 0, 0, 0, 0,
	0, 104, 105, 106, 107, 202, 108, 203, 204, 0,
	0, 109, 0, 0, 0, 110, 111, 0, 112, 0,
	0, 0, 205, 113, 206, 0, 0, 0, 114, 115,
	207, 0, 116, 0, 117, 0, 0, 0, 0, 118,
	208, 0, 209, 0, 119, 120, 387, 211, 0, 0,
	121, 0, 0, 122, 212, 213, 214, 0, 215, 0,
	0, 123, 0, 124, 125, 0, 0, 216, 0, 126,
	0, 0, 127, 0, 0, 128, 0, 129, 130, 131,
	132, 133, 0, 134, 135, 138, 136, 0, 137, 0,
	217, 139, 218, 140, 141, 0, 0, 0, 0, 0,
	142, 219, 0, 143, 0, 220, 144, 145, 0, 221,
	146, 222, 0, 147, 148, 149, 223, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 0, 157, 158, 224,
	159, 0, 247, 160, 161, 0, 225, 162, 163, 0,
	164, 165, 0, 166, 226, 167, 0, 168, 169, 171,
	227, 170, 228, 0, 0, 172, 173, 0, 229, 230,
	231, 0, 0, 174, 232, 233, 0, 175, 176, 177,
	178, 0, 0, 179, 180, 181, 0, 0, 182, 183,
	184, 234, 235, 86, 185, 0, 0, 0, 0, 186,
	187, 188, 189, 0, 0, 89, 90, 0, 91, 0,
	0, 0, 0, 190, 0, 0, 0, 0, 92, 93,
	191, 192, 193, 94, 194, 195, 0, 95, 196, 197,
	96, 0, 0, 198, 199, 350, 0, 201, 0, 0,
	0, 97, 98, 99, 0, 100, 0, 101, 0, 0,
	102, 103, 0, 0, 0, 0, 0, 0, 104, 105,
	106, 107, 202, 108, 203, 204, 0, 0, 109, 0,
	0, 0, 110, 111, 0, 112, 0, 0, 0, 205,
	113, 206, 0, 0, 0, 114, 115, 207, 0, 116,
	0, 117, 0, 0, 0, 0, 118, 208, 0, 209,
	0, 119, 120, 210, 211, 0, 0, 121, 0, 0,
	122, 212, 213, 214, 0, 215, 0, 0, 123, 0,
	124, 125, 0, 0, 216, 0, 126, 0, 0, 127,
	0, 0, 128, 0, 129, 130, 131, 132, 244, 0,
	134, 135, 138, 136, 0, 137, 0, 217, 139, 218,
	140, 141, 0, 0, 0, 0, 0, 142, 219, 0,
	143, 0, 220, 144, 145, 0, 221, 146, 222, 0,
	147, 148, 149, 223, 150, 151, 0, 153, 154, 152,
	155, 0, 156, 0, 157, 158, 224, 159, 0, 247,
	160, 161, 0, 225, 162, 163, 0, 164, 165, 0,
	166, 226, 167, 0, 168, 169, 171, 227, 170, 228,
	0, 0, 172, 173, 0, 243, 230, 231, 0, 0,
	239, 232, 233, 0, 175, 176, 177, 178, 0, 0,
	179, 180, 181, 0, 0, 182, 183, 184, 234, 235,
	86, 185, 0, 0, 0, 0, 186, 187, 188, 189,
	0, 0, 89, 90, 0, 91, 0, 0, 0, 0,
	190, 0, 0, 0, 0, 92, 93, 191, 192, 193,
	94, 194, 195, 0, 95, 196, 197, 96, 0, 0,
	198, 199, 200, 0, 201, 0, 0, 0, 97, 98,
	99, 0, 100, 0, 101, 0, 0, 102, 103, 0,
	0, 0, 0, 0, 0, 104, 105, 106, 107, 202,
	108, 203, 204, 0, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 205, 113, 206, 0,
	0, 0, 114, 115, 207, 0, 116, 0, 117, 0,
	0, 0, 0, 118, 208, 0, 209, 0, 119, 120,
	210, 211, 0, 0, 121, 0, 0, 122, 212, 213,
	214, 0, 215, 0, 0, 123, 0, 124, 125, 0,
	0, 216, 0, 126, 0, 0, 127, 0, 0, 128,
	0, 129, 130, 131, 132, 244, 0, 134, 135, 138,
	136, 0, 137, 0, 217, 139, 218, 140, 141, 0,
	0, 0, 0, 0, 142, 219, 0, 143, 0, 220,
	144, 145, 0, 221, 146, 222, 0, 147, 148, 149,
	223, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	0, 157, 158, 224, 159, 0, 247, 160, 161, 0,
	225, 162, 163, 0, 164, 165, 0, 166, 226, 167,
	0, 168, 169, 171, 227, 170, 228, 0, 0, 172,
	173, 0, 243, 230, 231, 0, 0, 239, 232, 233,
	0, 175, 176, 177, 178, 0, 0, 179, 180, 181,
	0, 0, 182, 183, 184, 234, 235, 86, 185, 0,
	0, 0, 0, 186, 187, 188, 189, 0, 0, 89,
	90, 0, 91, 0, 0, 0, 0, 190, 0, 0,
	0, 0, 92, 93, 191, 192, 193, 94, 194, 195,
	0, 95, 196, 197, 96, 0, 0, 198, 199, 200,
	0, 201, 0, 0, 0, 97, 98, 99, 0, 100,
	0, 101, 0, 0, 102, 103, 0, 0, 0, 0,
	0, 0, 104, 105, 106, 107, 202, 108, 203, 204,
	0, 0, 109, 0, 0, 0, 110, 111, 0, 112,
	0, 0, 0, 205, 113, 206, 0, 0, 0, 114,
	115, 207, 0, 116, 0, 117, 0, 0, 0, 0,
	118, 208, 0, 209, 0, 119, 120, 322, 211, 0,
	0, 121, 0, 0, 122, 212, 213, 214, 0, 215,
	0, 0, 123, 0, 124, 125, 0, 0, 216, 0,
	126, 0, 0, 127, 0, 0, 128, 0, 129, 130,
	131, 132, 133, 0, 134, 135, 138, 136, 0, 137,
	0, 217, 139, 218, 140, 141, 0, 0, 0, 0,
	0, 142, 219, 0, 143, 0, 220, 144, 145, 0,
	221, 146, 222, 0, 147, 148, 149, 223, 150, 151,
	0, 153, 154, 152, 155, 0, 156, 0, 157, 158,
	224, 159, 0, 247, 160, 161, 0, 225, 162, 163,
	0, 164, 165, 0, 166, 226, 167, 0, 168, 169,
	171, 227, 170, 228, 0, 0, 172, 173, 0, 229,
	230, 231, 0, 0, 174, 232, 233, 0, 175, 176,
	177, 178, 0, 0, 179, 180, 181, 0, 0, 182,
	183, 184, 234, 235, 86, 185, 0, 0, 0, 0,
	186, 187, 188, 189, 0, 0, 89, 90, 0, 91,
	0, 0, 0, 0, 190, 0, 0, 0, 0, 92,
	93, 191, 192, 193, 94, 194, 195, 0, 95, 196,
	197, 96, 0, 0, 198, 199, 200, 0, 201, 0,
	0, 0, 97, 98, 99, 0, 100, 0, 101, 0,
	0, 102, 103, 0, 0, 0, 0, 0, 0, 104,
	105, 106, 107, 202, 108, 203, 204, 0, 0, 109,
	0, 0, 0, 110, 111, 0, 112, 0, 0, 0,
	205, 113, 206, 0, 0, 0, 114, 115, 207, 0,
	116, 0, 117, 0, 0, 0, 0, 118, 208, 0,
	209, 0, 119, 120, 319, 211, 0, 0, 121, 0,
	0, 122, 212, 213, 214, 0, 215, 0, 0, 123,
	0, 124, 125, 0, 0, 216, 0, 126, 0, 0,
	127, 0, 0, 128, 0, 129, 130, 131, 132, 133,
	0, 134, 135, 138, 136, 0, 137, 0, 217, 139,
	218, 140, 141, 0, 0, 0, 0, 0, 142, 219,
	0, 143, 0, 220, 144, 145, 0, 221, 146, 222,
	0, 147, 148, 149, 223, 150, 151, 0, 153, 154,
	152, 155, 0, 156, 0, 157, 158, 224, 159, 0,
	247, 160, 161, 0, 225, 162, 163, 0, 164, 165,
	0, 166, 226, 167, 0, 168, 169, 171, 227, 170,
	228, 0, 0, 172, 173, 0, 229, 230, 231, 0,
	0, 174, 232, 233, 0, 175, 176, 177, 178, 0,
	0, 179, 180, 181, 0, 0, 182, 183, 184, 234,
	235, 86, 185, 0, 0, 0, 0, 186, 187, 188,
	189, 0, 0, 89, 90, 0, 91, 0, 0, 0,
	0, 190, 0, 0, 0, 0, 92, 93, 191, 192,
	193, 94, 194, 195, 0, 95, 196, 197, 96, 0,
	0, 198, 199, 200, 0, 201, 0, 0, 0, 97,
	98, 99, 0, 100, 0, 101, 0, 0, 102, 103,
	0, 0, 0, 0, 0, 0, 104, 105, 106, 107,
	202, 108, 203, 204, 0, 0, 109, 0, 0, 0,
	110, 111, 0, 112, 0, 0, 0, 205, 113, 206,
	0, 0, 0, 114, 115, 207, 0, 116, 0, 117,
	0, 0, 0, 0, 118, 208, 0, 209, 0, 119,
	120, 317, 211, 0, 0, 121, 0, 0, 122, 212,
	213, 214, 0, 215, 0, 0, 123, 0, 124, 125,
	0, 0, 216, 0, 126, 0, 0, 127, 0, 0,
	128, 0, 129, 130, 131, 132, 133, 0, 134, 135,
	138, 136, 0, 137, 0, 217, 139, 218, 140, 141,
	0, 0, 0, 0, 0, 142, 219, 0, 143, 0,
	220, 144, 145, 0, 221, 146, 222, 0, 147, 148,
	149, 223, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 0, 157, 158, 224, 159, 0, 247, 160, 161,
	0, 225, 162, 163, 0, 164, 165, 0, 166, 226,
	167, 0, 168, 169, 171, 227, 170, 228, 0, 0,
	172, 173, 0, 229, 230, 231, 0, 0, 174, 232,
	233, 0, 175, 176, 177, 178, 0, 0, 179, 180,
	181, 0, 0, 182, 183, 184, 234, 235, 86, 185,
	0, 0, 0, 0, 186, 187, 188, 189, 0, 0,
	89, 90, 0, 91, 0, 0, 0, 0, 190, 0,
	0, 0, 0, 92, 93, 191, 192, 193, 94, 194,
	195, 0, 95, 196, 197, 96, 0, 0, 198, 199,
	200, 0, 201, 0, 0, 0, 97, 98, 99, 0,
	100, 0, 101, 0, 0, 102, 103, 0, 0, 0,
	0, 0, 0, 104, 105, 106, 107, 202, 108, 203,
	204, 0, 0, 109, 0, 0, 0, 110, 111, 0,
	112, 0, 0, 0, 205, 113, 206, 0, 0, 0,
	114, 115, 207, 0, 116, 0, 117, 0, 0, 0,
	0, 118, 208, 0, 209, 0, 119, 120, 309, 211,
	0, 0, 121, 0, 0, 122, 212, 213, 214, 0,
	215, 0, 0, 123, 0, 124, 125, 0, 0, 216,
	0, 126, 0, 0, 127, 0, 0, 128, 0, 129,
	130, 131, 132, 133, 0, 134, 135, 138, 136, 0,
	137, 0, 217, 139, 218, 140, 141, 0, 0, 0,
	0, 0, 142, 219, 0, 143, 0, 220, 144, 145,
	0, 221, 146, 222, 0, 147, 148, 149, 223, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 0, 157,
	158, 224, 159, 0, 247, 160, 161, 0, 225, 162,
	163, 0, 164, 165, 0, 166, 226, 167, 0, 168,
	169, 171, 227, 170, 228, 0, 0, 172, 173, 0,
	229, 230, 231, 0, 0, 174, 232, 233, 0, 175,
	176, 177, 178, 0, 0, 179, 180, 181, 0, 0,
	182, 183, 184, 234, 235, 86, 185, 0, 0, 0,
	0, 186, 187, 188, 189, 0, 0, 89, 90, 0,
	91, 0, 0, 0, 0, 190, 0, 0, 0, 0,
	92, 93, 191, 192, 193, 94, 194, 195, 0, 95,
	196, 197, 96, 0, 0, 198, 199, 200, 0, 201,
	0, 0, 0, 97, 98, 99, 0, 100, 0, 101,
	0, 0, 102, 103, 0, 0, 0, 0, 0, 0,
	104, 105, 106, 107, 202, 108, 203, 204, 0, 0,
	109, 0, 0, 0, 110, 111, 0, 112, 0, 0,
	0, 205, 113, 206, 0, 0, 0, 114, 115, 207,
	0, 116, 0, 117, 0, 0, 0, 0, 118, 208,
	0, 209, 0, 119, 120, 210, 211, 0, 0, 121,
	0, 0, 122, 212, 213, 214, 0, 215, 0, 0,
	123, 0, 124, 125, 0, 0, 216, 0, 126, 0,
	0, 127, 0, 0, 128, 0, 129, 130, 131, 132,
	133, 0, 134, 135, 138, 136, 0, 137, 0, 217,
	139, 218, 140, 141, 0, 0, 0, 0, 0, 142,
	219, 0, 143, 0, 220, 144, 145, 0, 221, 146,
	222, 0, 147, 148, 149, 223, 289, 151, 0, 153,
	154, 152, 155, 0, 156, 0, 157, 158, 224, 159,
	0, 247, 160, 161, 0, 225, 162, 163, 0, 164,
	165, 0, 166, 226, 167, 0, 168, 169, 171, 227,
	170, 228, 0, 0, 172, 173, 0, 229, 230, 231,
	0, 0, 174, 232, 233, 0, 175, 176, 177, 178,
	0, 0, 179, 180, 181, 0, 0, 182, 183, 184,
	234, 235, 86, 185, 0, 0, 0, 0, 186, 187,
	188, 189, 0, 0, 89, 90, 0, 91, 0, 0,
	0, 0, 190, 0, 0, 0, 0, 92, 93, 191,
	192, 193, 94, 194, 195, 0, 95, 196, 197, 96,
	0, 0, 198, 199, 200, 0, 201, 0, 0, 0,
	97, 98, 99, 0, 100, 0, 101, 0, 0, 102,
	103, 0, 0, 0, 0, 0, 0, 104, 105, 106,
	107, 202, 108, 203, 204, 0, 0, 109, 0, 0,
	0, 110, 111, 0, 112, 0, 0, 0, 205, 113,
	206, 0, 0, 0, 114, 115, 207, 0, 116, 0,
	117, 0, 0, 0, 0, 118, 208, 0, 209, 0,
	119, 120, 210, 211, 0, 0, 121, 0, 0, 122,
	212, 213, 214, 0, 215, 0, 0, 123, 0, 124,
	125, 0, 0, 216, 0, 126, 0, 0, 237, 0,
	0, 128, 0, 129, 130, 131, 132, 244, 0, 134,
	135, 138, 136, 0, 137, 0, 217, 139, 218, 140,
	141, 0, 0, 0, 0, 0, 142, 219, 0, 143,
	0, 220, 144, 145, 0, 221, 146, 222, 0, 147,
	148, 149, 223, 150, 151, 0, 153, 154, 152, 155,
	0, 156, 0, 157, 158, 224, 159, 0, 247, 160,
	161, 0, 225, 162, 238, 0, 164, 165, 0, 166,
	226, 167, 0, 168, 169, 171, 227, 170, 228, 0,
	0, 172, 173, 0, 243, 230, 231, 0, 0, 239,
	232, 233, 0, 175, 176, 177, 178, 0, 0, 179,
	180, 181, 0, 0, 182, 183, 184, 234, 235, 86,
	185, 0, 0, 0, 0, 186, 187, 188, 189, 0,
	0, 89, 90, 0, 91, 0, 0, 0, 0, 190,
	0, 0, 0, 0, 92, 93, 191, 192, 193, 94,
	194, 195, 0, 95, 196, 197, 96, 0, 0, 198,
	199, 200, 0, 201, 0, 0, 0, 97, 98, 99,
	0, 100, 0, 101, 0, 0, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 106, 107, 202, 108,
	203, 204, 0, 0, 109, 0, 0, 0, 110, 111,
	0, 112, 0, 0, 0, 205, 113, 206, 0, 0,
	0, 114, 115, 207, 0, 116, 0, 117, 0, 0,
	0, 0, 118, 208, 0, 209, 0, 119, 120, 210,
	211, 0, 0, 121, 0, 0, 122, 212, 213, 214,
	0, 215, 0, 0, 123, 0, 124, 125, 0, 0,
	216, 0, 126, 0, 0, 127, 0, 0, 128, 0,
	129, 130, 131, 132, 133, 0, 134, 135, 138, 136,
	0, 137, 0, 217, 139, 218, 140, 141, 0, 0,
	0, 0, 0, 142, 219, 0, 143, 0, 220, 144,
	0, 0, 221, 146, 222, 0, 147, 0, 149, 223,
	150, 151, 0, 153, 154, 152, 155, 0, 156, 0,
	157, 158, 224, 0, 0, 247, 160, 161, 0, 225,
	162, 163, 0, 164, 165, 0, 166, 226, 167, 0,
	168, 169, 171, 227, 170, 228, 0, 0, 172, 173,
	0, 229, 230, 231, 0, 0, 174, 232, 233, 0,
	175, 176, 177, 178, 0, 0, 179, 180, 181, 0,
	0, 182, 183, 184, 234, 235, 723, 185, 743, 744,
	745, 0, 186, 187, 188, 189, 0, 0, 746, 0,
	0, 0, 0, 0, 0, 726, 0, 752, 0, 723,
	0, 743, 744, 745, 0, 0, 0, 0, 0, 0,
	0, 746, 0, 0, 0, 725, 0, 0, 726, 0,
	752, 740, 723, 0, 743, 744, 745, 0, 0, 0,
	0, 0, 0, 0, 746, 0, 0, 0, 725, 0,
	0, 726, 0, 752, 740, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 725, 0, 0, 0, 731, 0, 740, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 753, 0, 0, 0, 0, 0, 731, 0,
	0, 0, 0, 0, 751, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 748, 753, 0, 0, 0, 0,
	741, 731, 0, 0, 0, 0, 0, 751, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 748, 753, 0,
	0, 0, 747, 741, 0, 0, 0, 0, 0, 0,
	751, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	748, 0, 0, 0, 0, 747, 741, 0, 0, 0,
	0, 0, 0, 0, 0, 742, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 750, 0, 747, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 742, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 750,
	0, 0, 0, 0, 723, 0, 743, 744, 745, 0,
	0, 742, 0, 0, 0, 0, 746, 0, 0, 0,
	0, 0, 750, 726, 0, 752, 0, 749, 0, 737,
	738, 739, 0, 736, 733, 734, 735, 727, 728, 729,
	730, 732, 0, 725, 0, 0, 0, 0, 724, 740,
	749, 1556, 737, 738, 739, 0, 736, 733, 734, 735,
	727, 728, 729, 730, 732, 0, 0, 0, 0, 0,
	0, 724, 0, 749, 1282, 737, 738, 739, 0, 736,
	733, 734, 735, 727, 728, 729, 730, 732, 723, 0,
	743, 744, 745, 731, 724, 0, 0, 1281, 0, 0,
	746, 0, 0, 0, 0, 0, 0, 726, 0, 752,
	753, 0, 0, 0, 0, 0, 1240, 0, 1258, 1259,
	1260, 0, 751, 0, 0, 0, 0, 725, 1525, 0,
	0, 0, 748, 740, 0, 0, 0, 0, 741, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	747, 1255, 0, 0, 0, 0, 0, 1240, 0, 1258,
	1259, 1260, 0, 0, 0, 0, 0, 731, 0, 1369,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 742, 753, 0, 0, 0, 723, 0,
	743, 744, 745, 0, 750, 1246, 751, 0, 0, 0,
	746, 0, 1255, 0, 0, 0, 748, 726, 0, 752,
	0, 0, 741, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1261, 0, 0, 725, 0, 0,
	0, 0, 0, 740, 747, 0, 0, 0, 0, 0,
	1256, 0, 0, 0, 0, 749, 1246, 737, 738, 739,
	0, 736, 733, 734, 735, 727, 728, 729, 730, 732,
	0, 0, 0, 0, 0, 0, 724, 742, 723, 1280,
	743, 744, 745, 0, 0, 1261, 0, 731, 750, 1272,
	746, 0, 1271, 0, 0, 0, 0, 726, 0, 752,
	0, 1256, 0, 0, 753, 1257, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 751, 725, 0, 0,
	0, 0, 0, 740, 0, 0, 748, 0, 0, 0,
	0, 0, 741, 0, 0, 0, 0, 0, 0, 749,
	0, 737, 738, 739, 0, 736, 733, 734, 735, 727,
	728, 729, 730, 732, 747, 0, 1257, 0, 0, 0,
	724, 0, 0, 1233, 0, 0, 0, 731, 1732, 1252,
	1253, 1254, 0, 1251, 1248, 1249, 1250, 1242, 1243, 1244,
	1245, 1247, 0, 0, 753, 0, 0, 742, 1241, 0,
	0, 0, 0, 0, 0, 0, 751, 0, 750, 0,
	0, 0, 0, 0, 0, 0, 748, 0, 0, 0,
	0, 0, 741, 0, 0, 0, 0, 0, 0, 0,
	1252, 1253, 1254, 0, 1251, 1248, 1249, 1250, 1242, 1243,
	1244, 1245, 1247, 0, 747, 0, 0, 0, 0, 1241,
	0, 0, 0, 0, 0, 0, 1731, 0, 0, 749,
	0, 737, 738, 739, 0, 736, 733, 734, 735, 727,
	728, 729, 730, 732, 0, 0, 0, 742, 0, 0,
	724, 0, 0, 0, 0, 0, 0, 723, 750, 743,
	744, 745, 0, 0, 0, 0, 0, 0, 0, 746,
	0, 0, 0, 0, 912, 0, 726, 0, 752, 0,
	0, 755, 0, 0, 0, 0, 0, 723, 0, 743,
	744, 745, 0, 0, 0, 0, 725, 0, 0, 746,
	0, 0, 740, 754, 0, 0, 726, 0, 752, 749,
	0, 737, 738, 739, 0, 736, 733, 734, 735, 727,
	728, 729, 730, 732, 0, 0, 725, 913, 0, 0,
	724, 0, 740, 0, 0, 723, 0, 743, 744, 745,
	0, 0, 0, 0, 0, 0, 731, 746, 0, 0,
	0, 0, 0, 0, 726, 0, 752, 0, 0, 0,
	0, 0, 0, 753, 0, 0, 0, 723, 0, 743,
	744, 745, 0, 0, 725, 751, 731, 0, 0, 746,
	740, 0, 0, 0, 0, 748, 726, 0, 752, 0,
	0, 741, 0, 753, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 751, 725, 0, 0, 0,
	0, 0, 740, 747, 0, 748, 0, 0, 0, 0,
	0, 741, 0, 0, 731, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 753, 0, 747, 0, 0, 742, 723, 0, 743,
	744, 745, 0, 751, 0, 0, 731, 750, 0, 746,
	0, 0, 0, 748, 0, 0, 726, 0, 752, 741,
	0, 0, 0, 753, 0, 0, 742, 0, 0, 0,
	0, 0, 0, 0, 0, 751, 725, 750, 0, 0,
	0, 747, 740, 0, 0, 748, 0, 0, 0, 0,
	0, 741, 0, 0, 0, 0, 0, 0, 749, 0,
	737, 738, 739, 0, 736, 733, 734, 735, 727, 728,
	729, 730, 732, 747, 742, 0, 0, 0, 0, 724,
	0, 0, 0, 0, 0, 750, 731, 0, 749, 0,
	737, 738, 739, 0, 736, 733, 734, 735, 727, 728,
	729, 730, 732, 753, 0, 0, 742, 0, 0, 724,
	0, 0, 0, 0, 0, 751, 0, 750, 0, 0,
	0, 0, 0, 0, 0, 748, 0, 0, 0, 0,
	0, 741, 0, 0, 0, 0, 749, 0, 737, 738,
	739, 0, 736, 733, 734, 735, 727, 728, 729, 730,
	732, 0, 0, 747, 0, 0, 1670, 724, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 749, 0,
	737, 738, 739, 0, 736, 733, 734, 735, 727, 728,
	729, 730, 732, 0, 0, 0, 742, 0, 1669, 724,
	723, 0, 743, 744, 745, 0, 0, 750, 0, 0,
	0, 0, 746, 0, 0, 0, 0, 0, 0, 726,
	0, 752, 0, 0, 0, 0, 0, 0, 1240, 0,
	1258, 1259, 1260, 0, 0, 0, 0, 0, 0, 725,
	1368, 0, 0, 0, 0, 740, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 749, 0,
	737, 738, 739, 0, 736, 733, 734, 735, 727, 728,
	729, 730, 732, 1255, 0, 0, 0, 0, 1651, 724,
	723, 0, 743, 744, 745, 0, 0, 0, 0, 731,
	0, 0, 746, 0, 0, 0, 0, 0, 0, 726,
	0, 752, 0, 0, 0, 0, 753, 0, 0, 0,
	723, 0, 743, 744, 745, 0, 0, 1246, 751, 725,
	0, 0, 746, 0, 0, 740, 0, 0, 748, 726,
	0, 752, 0, 0, 741, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1261, 0, 0, 725,
	0, 0, 0, 0, 0, 740, 747, 0, 0, 0,
	0, 0, 1256, 0, 0, 0, 0, 0, 0, 731,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 753, 0, 0, 742,
	723, 0, 743, 744, 745, 0, 0, 0, 751, 731,
	750, 0, 746, 0, 0, 0, 0, 0, 748, 726,
	0, 752, 0, 0, 741, 0, 753, 1257, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 751, 725,
	0, 0, 0, 0, 0, 740, 747, 0, 748, 0,
	0, 0, 0, 0, 741, 0, 0, 0, 0, 0,
	0, 749, 0, 737, 738, 739, 0, 736, 733, 734,
	735, 727, 728, 729, 730, 732, 747, 284, 0, 742,
	0, 1630, 724, 0, 0, 0, 0, 0, 0, 731,
	750, 1252, 1253, 1254, 0, 1251, 1248, 1249, 1250, 1242,
	1243, 1244, 1245, 1247, 0, 0, 753, 0, 0, 742,
	1241, 0, 0, 0, 0, 0, 0, 0, 751, 0,
	750, 0, 0, 0, 0, 0, 0, 0, 748, 0,
	0, 0, 0, 0, 741, 0, 0, 0, 0, 0,
	0, 749, 0, 737, 738, 739, 0, 736, 733, 734,
	735, 727, 728, 729, 730, 732, 747, 0, 0, 0,
	0, 1625, 724, 0, 0, 0, 0, 0, 0, 0,
	0, 749, 0, 737, 738, 739, 0, 736, 733, 734,
	735, 727, 728, 729, 730, 732, 0, 0, 0, 742,
	0, 723, 724, 743, 744, 745, 0, 0, 0, 0,
	750, 0, 0, 746, 0, 0, 0, 0, 0, 0,
	726, 0, 752, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	725, 723, 0, 743, 744, 745, 740, 0, 0, 0,
	0, 0, 0, 746, 0, 0, 0, 0, 0, 0,
	726, 749, 752, 737, 738, 739, 0, 736, 733, 734,
	735, 727, 728, 729, 730, 732, 0, 0, 0, 0,
	725, 1621, 724, 0, 0, 0, 740, 0, 0, 723,
	731, 743, 744, 745, 0, 0, 0, 0, 0, 0,
	0, 746, 0, 0, 0, 0, 0, 753, 726, 0,
	752, 0, 0, 0, 0, 0, 0, 0, 0, 751,
	0, 0, 0, 0, 0, 0, 0, 0, 725, 748,
	731, 0, 0, 0, 740, 741, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 753, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 747, 0, 751,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 748,
	0, 0, 0, 0, 0, 741, 0, 0, 731, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	742, 0, 0, 0, 0, 753, 0, 747, 0, 0,
	0, 750, 0, 0, 0, 0, 0, 751, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 748, 0, 0,
	0, 0, 0, 741, 0, 0, 0, 0, 0, 0,
	742, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 750, 0, 0, 0, 747, 0, 0, 0, 0,
	0, 0, 749, 0, 737, 738, 739, 0, 736, 733,
	734, 735, 727, 728, 729, 730, 732, 0, 0, 0,
	0, 0, 1558, 724, 0, 0, 0, 0, 742, 0,
	0, 0, 0, 1240, 0, 1258, 1259, 1260, 0, 750,
	0, 0, 749, 0, 737, 738, 739, 0, 736, 733,
	734, 735, 727, 728, 729, 730, 732, 0, 0, 0,
	0, 0, 1557, 724, 0, 0, 0, 723, 0, 743,
	744, 745, 0, 0, 0, 0, 0, 0, 1255, 746,
	0, 0, 0, 0, 0, 0, 726, 0, 752, 0,
	749, 0, 737, 738, 739, 0, 736, 733, 734, 735,
	727, 728, 729, 730, 732, 0, 725, 0, 0, 0,
	1464, 724, 740, 723, 0, 743, 744, 745, 0, 0,
	0, 0, 1246, 0, 0, 746, 0, 0, 0, 0,
	0, 0, 726, 0, 752, 0, 0, 0, 0, 1262,
	0, 0, 0, 0, 0, 723, 0, 743, 744, 745,
	0, 1261, 725, 0, 0, 0, 731, 746, 740, 0,
	0, 0, 0, 0, 726, 0, 752, 1256, 0, 0,
	0, 0, 0, 753, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 725, 751, 0, 0, 0, 0,
	740, 0, 0, 0, 0, 748, 0, 0, 0, 0,
	0, 741, 731, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 753,
	0, 0, 1257, 747, 0, 0, 0, 0, 0, 0,
	0, 751, 0, 0, 731, 0, 0, 0, 0, 0,
	0, 748, 0, 0, 0, 0, 0, 741, 0, 0,
	0, 753, 0, 0, 0, 0, 742, 0, 0, 0,
	0, 0, 0, 751, 0, 0, 0, 750, 0, 747,
	0, 0, 0, 748, 0, 0, 0, 0, 0, 741,
	0, 0, 0, 0, 0, 0, 1252, 1253, 1254, 0,
	1251, 1248, 1249, 1250, 1242, 1243, 1244, 1245, 1247, 0,
	0, 747, 742, 0, 0, 1241, 0, 0, 0, 0,
	0, 0, 0, 750, 0, 0, 0, 0, 749, 0,
	737, 738, 739, 0, 736, 733, 734, 735, 727, 728,
	729, 730, 732, 0, 742, 0, 1448, 0, 0, 724,
	0, 0, 0, 0, 723, 750, 743, 744, 745, 0,
	0, 0, 0, 0, 0, 0, 746, 0, 0, 0,
	1393, 0, 0, 726, 749, 752, 737, 738, 739, 0,
	736, 733, 734, 735, 727, 728, 729, 730, 732, 0,
	0, 0, 0, 725, 1399, 724, 0, 0, 0, 740,
	0, 0, 0, 0, 0, 0, 749, 0, 737, 738,
	739, 0, 736, 733, 734, 735, 727, 728, 729, 730,
	732, 0, 0, 0, 0, 0, 0, 724, 0, 0,
	0, 0, 723, 0, 743, 744, 745, 0, 0, 0,
	0, 0, 0, 731, 746, 0, 0, 0, 0, 0,
	0, 726, 0, 752, 0, 0, 0, 0, 0, 0,
	753, 0, 0, 0, 723, 0, 743, 744, 745, 0,
	0, 725, 751, 0, 0, 0, 746, 740, 0, 0,
	1273, 0, 748, 726, 0, 752, 0, 0, 741, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 725, 0, 0, 0, 0, 0, 740,
	747, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 731, 0, 0, 0, 0, 1278, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 753, 0,
	0, 0, 0, 742, 723, 0, 743, 744, 745, 0,
	751, 0, 0, 731, 750, 0, 746, 0, 0, 0,
	748, 0, 0, 726, 0, 752, 741, 0, 0, 0,
	753, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 751, 725, 0, 0, 0, 0, 747, 740,
	0, 0, 748, 0, 0, 0, 0, 0, 741, 0,
	0, 0, 0, 0, 0, 749, 0, 737, 738, 739,
	0, 736, 733, 734, 735, 727, 728, 729, 730, 732,
	747, 742, 0, 0, 0, 1374, 724, 0, 0, 0,
	0, 0, 750, 731, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	753, 0, 0, 742, 0, 0, 0, 0, 0, 0,
	0, 0, 751, 0, 750, 0, 0, 0, 0, 0,
	0, 0, 748, 0, 0, 0, 0, 0, 741, 0,
	0, 0, 0, 749, 0, 737, 738, 739, 0, 736,
	733, 734, 735, 727, 728, 729, 730, 732, 0, 0,
	747, 0, 0, 0, 724, 0, 0, 0, 0, 0,
	1238, 0, 0, 0, 0, 749, 0, 737, 738, 739,
	0, 736, 733, 734, 735, 727, 728, 729, 730, 732,
	0, 0, 0, 742, 0, 723, 724, 743, 744, 745,
	0, 0, 0, 0, 750, 0, 0, 746, 0, 0,
	0, 1232, 0, 0, 726, 0, 752, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 725, 723, 0, 743, 744, 745,
	740, 0, 0, 0, 0, 0, 0, 746, 0, 0,
	0, 0, 0, 0, 726, 749, 752, 737, 738, 739,
	0, 736, 733, 734, 735, 727, 728, 729, 730, 732,
	0, 0, 0, 0, 725, 723, 724, 743, 744, 745,
	740, 0, 0, 0, 731, 0, 0, 746, 0, 0,
	0, 0, 0, 0, 726, 0, 752, 0, 0, 0,
	0, 753, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 751, 725, 0, 0, 0, 0, 0,
	740, 0, 0, 748, 731, 0, 0, 0, 0, 741,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 753, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 747, 0, 751, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 748, 731, 0, 0, 0, 0, 741,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 753, 0, 0, 742, 0, 0, 0, 0, 0,
	0, 747, 0, 751, 0, 750, 0, 0, 0, 0,
	0, 0, 0, 748, 0, 0, 0, 0, 0, 741,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 742, 0, 0, 0, 0, 0,
	0, 747, 0, 0, 0, 750, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 749, 0, 737, 738,
	739, 0, 736, 733, 734, 735, 727, 728, 729, 730,
	732, 0, 0, 0, 742, 0, 723, 724, 743, 744,
	745, 0, 0, 0, 0, 750, 0, 0, 746, 0,
	0, 0, 0, 0, 0, 726, 749, 752, 737, 738,
	739, 0, 736, 733, 734, 735, 727, 728, 729, 730,
	732, 0, 0, 0, 0, 725, 1009, 724, 0, 0,
	0, 740, 0, 0, 0, 1240, 0, 1258, 1259, 1260,
	0, 0, 0, 0, 0, 0, 749, 0, 737, 738,
	739, 0, 736, 733, 734, 735, 727, 728, 729, 730,
	732, 0, 0, 0, 0, 0, 723, 724, 743, 744,
	745, 0, 0, 0, 0, 731, 0, 0, 0, 0,
	1255, 0, 0, 0, 0, 726, 0, 752, 0, 0,
	0, 723, 753, 743, 744, 745, 0, 0, 0, 0,
	0, 0, 0, 0, 751, 725, 0, 0, 0, 0,
	726, 740, 752, 0, 748, 0, 0, 0, 0, 0,
	741, 0, 0, 0, 1246, 0, 0, 0, 0, 0,
	725, 0, 0, 0, 0, 0, 740, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 731, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1256,
	0, 0, 753, 0, 0, 742, 0, 0, 0, 0,
	731, 0, 0, 0, 751, 0, 750, 0, 0, 0,
	0, 0, 0, 0, 748, 0, 0, 753, 0, 0,
	741, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 748,
	0, 0, 0, 0, 1257, 741, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 749, 0, 737,
	738, 739, 0, 736, 733, 734, 735, 727, 728, 729,
	730, 732, 0, 0, 0, 742, 0, 0, 724, 0,
	0, 0, 0, 0, 0, 0, 750, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	742, 0, 0, 0, 0, 0, 0, 0, 1252, 1253,
	1254, 750, 1251, 1248, 1249, 1250, 1242, 1243, 1244, 1245,
	1247, 0, 0, 0, 0, 0, 0, 1241, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 749, 0, 737,
	738, 739, 0, 736, 733, 734, 735, 727, 728, 729,
	730, 732, 0, 0, 0, 0, 0, 0, 724, 0,
	0, 0, 749, 0, 737, 738, 739, 0, 736, 733,
	734, 735, 727, 728, 729, 730, 732, 941, 957, 932,
	949, 948, 0, 724, 934, 933, 0, 0, 0, 959,
	958, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 954, 0,
	946, 945, 0, 0, 0, 0, 0, 0, 944, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 943, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 937, 938, 939,
	0, 592, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 947, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 942,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 936,
	0, 0, 0, 0, 0, 0, 0, 940, 0, 0,
	0, 0, 0, 961, 0, 0, 0, 0, 0, 935,
	0, 0, 955, 956, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 960,
}
var sqlPact = [...]int{

	1935, -1000, -1, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 795, -1000, -1000, -1000, 622, 776, 628, 1020, 1020,
	14881, -1000, -1000, 17598, 2607, 457, 462, 457, 457, 458,
	14881, 559, 608, 115, -1000, 640, 59, 17351, 13646, 1191,
	-5, 13152, 328, 1935, 13399, 13646, 17104, 1044, 970, 969,
	13152, 16857, 16610, 16363, -1000, 9125, -1000, -1000, -1000, -1000,
	-1000, 838, -1000, -6, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 832, -1000, 13646, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 16116, 15869, 769,
	-1000, -1000, 509, 390, 1206, -1000, 6, -1000, -1000, -1000,
	1040, -1000, 796, 1038, 1034, 1033, 1032, 388, 816, -1000,
	557, 769, -1000, 769, -1000, -1000, -1000, 540, 14881, -1000,
	13152, -1000, 15622, 981, 15375, -1000, 640, -1000, -1000, -1000,
	853, 1186, 1186, 1186, 1203, 123, 121, 115, -21, 13646,
	-1000, 329, -21, 6269, 6269, -1000, -1000, 328, -1000, 339,
	11418, 4, -1000, 6787, -1000, 1009, 1103, 674, 665, 1102,
	-122, 13152, 13646, 13646, 578, 15128, -1000, 1101, 102, 1100,
	-1000, 100, 1099, -1000, -35, -1000, -1000, -1000, -1000, -1000,
	-1000, 328, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 11670, 1353, 11670, -1000, -1000,
	1220, -1000, -1000, -7, -8, 936, 934, 9641, 9384, 1139,
	729, -1000, -1000, -1000, 5, 3922, 13646, 1056, 11670, 13646,
	13646, 13646, -1000, 13646, -1000, 931, -1000, 13646, -1000, -9,
	-17, -1000, 14881, -1000, 113, -1000, 327, 893, 14634, 1110,
	892, -1000, 853, -1000, 790, 935, 7323, 8100, 115, -1000,
	-1000, 115, 115, 8100, -1000, -1000, 13646, -21, 1219, 13646,
	92, -1000, 18817, -1000, -1000, 8100, 8100, 8100, 8100, 8100,
	742, -1000, -1000, -1000, 4697, -1000, -1000, 4, 326, 247,
	-1000, -1000, 325, 4, -1000, -1000, -1000, -1000, 318, 1325,
	335, -1000, -1000, -1000, 8100, 379, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1052, 317, 313, -1000, -1000,
	-1000, -1000, 311, 308, 306, 304, 294, 290, 284, 283,
	264, 261, 259, 254, 253, 248, 704, -1000, 418, -1000,
	-1000, 418, 418, -1000, 215, 215, 217, -1000, -1000, -1000,
	215, -1000, -1000, -1000, 376, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 233, 92, -1000, -1000, -1000, 13646, 4, -1000,
	-1000, -1000, 8100, 3664, -36, -1000, 20605, -1000, -41, 715,
	-1000, 12658, 1173, 1156, 1155, 13152, 539, 529, 13646, 13646,
	399, 429, 1217, 429, 10914, -1000, 13646, 13646, -1000, 13646,
	-1000, -1000, 13646, -1000, 13646, 13646, 424, 12164, 527, -26,
	11917, 13646, -1000, 1, -1000, -1000, 1030, 453, 697, 966,
	806, -1000, -1000, -1000, -1000, -22, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1250, -1000, -1000, -1000,
	-1000, 1304, -22, -1000, -1000, -1000, -1000, -1000, 1322, -1000,
	-1000, -1000, -1000, 3922, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 13646, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 697,
	966, -1000, -1000, 13152, 12411, 1098, 782, 889, -1000, -1000,
	355, 1091, -1000, -1000, -1000, -1000, 20605, -1000, 20605, 617,
	951, -1000, 951, -24, -1000, 18787, -1000, 232, -38, -1000,
	399, 6269, 10662, 21145, 21145, 13646, 550, 8100, 8100, 8100,
	8100, 8100, 8100, 8100, 8100, 8100, 8100, 8100, 8100, 8100,
	8100, 8100, 8100, 8100, 8100, 8100, 8100, 8100, 8100, 826,
	524, 946, 770, 214, 3922, -1000, 320, 320, 320, 20876,
	20876, 206, -11, 20565, -25, 4, -1000, -1000, 5992, 5733,
	4, 4179, -1000, 823, 1300, 403, 20605, 1062, 1007, 230,
	118, 111, 8100, 8100, 759, 8100, 8359, 8100, 8100, 4956,
	8100, 8100, 8100, 8100, 8100, 8100, -1000, 229, -1000, -1000,
	-1000, -1000, 1299, -1000, -1000, 1296, -1000, 549, 545, 1293,
	399, 110, -1000, 2578, -1000, -1000, 6787, -1000, 680, 13646,
	13646, 13646, -1000, -1000, 879, 14387, -1000, 21145, 13646, -1000,
	225, 224, 959, 952, 13646, 13646, 14140, 13893, 13646, 673,
	13646, 13646, 646, -1000, 625, 8100, 699, -1000, 10147, 422,
	13646, 631, 34, -1000, -1000, -1000, 353, 13646, -1000, -1000,
	-1000, 102, -1000, 100, -1000, -1000, 13646, 11917, -26, -27,
	-1000, -1000, 13646, 966, -1000, -1000, -1000, 642, -1000, 691,
	-1000, 9898, -1000, -1000, -1000, 823, -1000, -50, -1000, -1000,
	-1000, -1000, 109, -31, -1000, -1000, -1000, -1000, -1000, 13646,
	292, 13646, 13646, 13646, 1081, 1321, 13646, -1000, -1000, -1000,
	8100, -1000, -1000, -1000, 59, 13646, -1000, 1005, -1000, -33,
	1269, -136, 12905, -1000, 2927, -1000, 1224, -1000, -1000, -1000,
	-1000, 179, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 217, 704, 215, 215, 215, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 376, -1000, 418, 418, 418,
	-1000, -1000, -1000, -1000, 384, 570, 570, 307, 307, 307,
	307, 1849, 1849, 1825, 2349, 1729, 1729, 1729, 158, 245,
	245, 1729, 1729, 1729, 20876, 20796, 712, 8100, 513, 750,
	214, 8100, -1000, 1167, -1000, -1000, -1000, 1029, 212, 8359,
	8359, -1000, -1000, -1000, 4697, -1000, -1000, 210, 8100, -1000,
	8100, -37, -96, -1000, 20605, -1000, -45, -1000, -1000, -20,
	8100, 8100, 8100, 107, -1000, 511, -1000, 506, 503, 502,
	-1000, 209, 103, 587, -1000, 8100, 747, 208, 204, 8100,
	-1000, -1000, 20525, 18398, 99, 1027, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 98, 20334, 95, 19833, -1000, 8359, 8359,
	8359, 4697, 198, 94, 18508, -120, 20254, 7046, 7046, 7046,
	87, 20222, 8100, -120, 18314, 18132, 18109, -48, -53, -54,
	1288, -55, 84, 380, 368, 82, 1005, -1000, -1000, 8100,
	-1000, -1000, -1000, 495, 491, 1080, -1000, 876, -1000, 707,
	8100, 13646, 197, 182, 701, -1000, 1078, 775, 1077, 775,
	-1000, -41, 670, -1000, -1000, 476, -1000, 6269, 20605, -1000,
	627, 1158, -56, -1000, -1000, -1000, 6269, 399, 10914, 6787,
	-61, -1000, -1000, -50, -1000, -50, -1000, -1000, -1000, -1000,
	-1000, -1000, 13646, -1000, 12411, 181, 13646, 180, 174, 171,
	13646, -1000, 1110, -1000, 81, -1000, -1000, -1000, -1000, -1000,
	994, 1194, 10662, 964, 962, 10662, 945, 749, 749, 749,
	-1000, 12905, 3392, -1000, -1000, 13646, 167, 10404, 79, 1269,
	333, 332, -1000, 1287, 8100, 712, 8100, 8359, 8359, -1000,
	712, -1000, -1000, -1000, -1000, 1021, 166, 8100, 21145, 19198,
	18477, -63, 5474, -51, 20144, 8100, -1000, -1000, 247, -1000,
	74, 6528, -1000, 19280, -19, -19, -1000, 907, 679, 708,
	610, 1259, 1314, 1107, -1000, 8100, 19945, -1000, 11166, 401,
	754, 19913, 21145, 21145, -1000, 8100, -1000, 1017, 8100, -1000,
	21145, 21145, 8359, 8359, 8359, 8359, 8359, 8359, 8359, 8359,
	8359, 8359, 8359, 8359, 8359, 8359, 8359, 8359, 8359, 8359,
	8359, 923, 8359, 297, 297, 297, -66, 5215, -1000, 1049,
	1017, 8100, 8100, 21145, 72, 71, 69, -1000, 8100, -120,
	8100, 8100, 8100, -1000, -1000, -1000, 68, -1000, 1252, -1000,
	-1000, -1000, -1000, 994, 19867, 13646, 13646, 13646, 1072, 1083,
	-1000, 19639, -64, 13646, 13646, -1000, 968, 960, 445, 13646,
	-1000, 13646, -1000, 13646, 13646, 13646, 13646, -94, 6269, 187,
	59, 13646, -94, 625, -1000, -1000, 352, -1000, -1000, 8873,
	165, 13646, 12411, 8873, 767, -1000, -1000, 397, 8100, 8100,
	1269, 10662, 10662, 1114, 961, 10662, -1000, -1000, -1000, -1000,
	-1000, -1000, 947, 163, 13646, 12905, 451, 1247, 62, 275,
	712, 18426, 201, 8100, 21145, 20901, -69, -1000, 8100, 8100,
	-1000, -75, -1000, 8100, -1000, 20605, -1000, 1308, 8100, 57,
	53, 52, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 51,
	-1000, -1000, 20605, 8100, -1000, -1000, 17845, 8100, 46, -1000,
	42, 41, 20605, 1049, 20605, -1000, -1000, 287, 287, 297,
	297, 297, 297, 2296, 2296, 142, 1174, 477, 477, 477,
	789, 351, 351, 477, 477, 477, 1016, 909, 162, 443,
	8100, -76, -1000, -1000, -1000, 20605, 20605, 30, -1000, -1000,
	-1000, -120, 18086, 19591, 19551, -1000, 29, 397, -1000, -1000,
	-1000, -1000, 13646, -1000, 13646, -1000, 13646, 867, -1000, -1000,
	949, 161, 8359, 13646, -1000, 724, -77, -82, 866, -1000,
	858, 8100, -1000, 21145, 775, 775, -1000, 474, 469, -1000,
	-94, 1116, 13646, 1148, -1000, -1000, -1000, 157, -83, -1000,
	202, 1166, 8100, -1000, -1000, 155, 8873, -84, -1000, -1000,
	25, -91, 13646, -1000, 13646, 20605, -120, -1000, 1114, -1000,
	141, 8100, 10662, -1000, -148, -1000, 349, -1000, 13646, -93,
	-1000, -1000, 203, 143, -1000, 8100, 8100, 20901, -99, -1000,
	21145, 712, 712, -1000, 19360, -1000, 19280, -1000, -1000, -1000,
	-1000, 20605, 714, -1000, 19250, -1000, -1000, -1000, -1000, 8359,
	1015, 140, 21145, 19170, -1000, -1000, 8100, -1000, -1000, -1000,
	-1000, -1000, 1542, -1000, -1000, -1000, 8100, 443, 138, -1000,
	128, -1000, -1000, -1000, 641, -1000, -1000, 20605, 1176, -1000,
	-1000, 13646, 13646, 518, -100, 13646, -1000, -1000, 4438, 724,
	8873, 1175, 4, 13646, 1175, 18977, 4179, -101, -1000, 13646,
	-1000, 724, 126, -118, -1000, 1216, -1000, 13646, 20605, -1000,
	947, -1000, 3922, -106, -1000, -1000, -1000, 712, 712, -1000,
	-1000, -1000, 24, 754, 1193, -1000, 20845, 8359, 21145, -107,
	-1000, 18897, -1000, 18865, 921, 13646, 13646, 13646, 430, 13646,
	-1000, -1000, 575, -1000, 399, -1000, -1000, -1000, -1000, -1000,
	-1000, 1166, -20, 724, -1000, -1000, 8873, 13646, 125, -108,
	-1000, -1000, -1000, -1000, 677, 8100, 20845, -123, -1000, -1000,
	-1000, 760, 727, 22, -124, 116, -1000, 8100, -1000, 10914,
	-1000, 1175, 18, -1000, -126, -1000, -1000, -1000, 14, 7841,
	7841, -120, -1000, -1000, 764, 762, 604, -1000, -1000, -1000,
	-1000, -1000, 921, 13646, 20605, -115, -1000, -1000, 724, -1000,
	-1000, -1000, 8616, 785, 592, 18588, -1000, -1000, 1121, -1000,
	435, 743, 743, 760, -132, -1000, -1000, 1229, -1000, -1000,
	-1000, -1000, -1000, -1000, 1236, -1000, -1000, 929, -1000, -1000,
	-1000, 7582, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1551, 1550, 1239, 1549, 1548, 1547, 1546, 1545, 94,
	1544, 117, 118, 1543, 92, 1542, 1541, 1540, 1539, 43,
	1536, 1533, 1532, 1531, 1525, 84, 27, 156, 1891, 151,
	1524, 1522, 1516, 19, 103, 97, 1514, 51, 68, 102,
	107, 739, 73, 1512, 1511, 128, 24, 15, 1423, 91,
	135, 114, 125, 1509, 1506, 1504, 39, 1502, 1501, 1498,
	1496, 58, 21, 1494, 13, 1487, 16, 1485, 1482, 96,
	1479, 99, 108, 36, 121, 160, 1477, 59, 10, 50,
	1473, 29, 1472, 30, 77, 131, 1471, 45, 320, 47,
	25, 60, 1468, 1467, 1466, 1461, 86, 81, 67, 1460,
	1458, 72, 1454, 127, 126, 1452, 1451, 115, 1450, 1441,
	1440, 702, 1438, 1435, 630, 3, 70, 65, 7, 109,
	106, 38, 1431, 17, 1430, 1072, 1275, 1228, 1429, 54,
	32, 76, 42, 44, 20, 1427, 98, 1426, 1422, 1418,
	1417, 1416, 78, 1415, 69, 130, 37, 46, 82, 26,
	23, 40, 80, 111, 136, 105, 1414, 113, 1413, 146,
	1411, 1410, 1309, 87, 1409, 1407, 1406, 1152, 1127, 1022,
	296, 1404, 1403, 700, 556, 1402, 1400, 83, 1398, 1396,
	134, 1395, 129, 22, 1394, 110, 1392, 90, 1391, 0,
	53, 35, 1390, 123, 75, 1381, 1377, 1375, 1370, 28,
	2, 8, 5, 6, 4, 18, 11, 1365, 1362, 124,
	88, 1361, 144, 1360, 1357, 33, 1353, 1351, 14, 1350,
	12, 1349, 9, 1, 1344, 133, 1340, 95, 1339, 1271,
	1335, 132, 1334, 1331, 1299, 79,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 4, 4, 35, 35, 34, 34, 34, 34,
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
	34, 32, 32, 37, 37, 37, 36, 36, 31, 31,
	5, 5, 5, 9, 10, 10, 10, 10, 10, 10,
	74, 74, 73, 73, 76, 76, 11, 11, 12, 12,
	12, 12, 12, 158, 158, 157, 13, 18, 225, 225,
	225, 229, 229, 230, 230, 231, 231, 231, 231, 231,
	231, 231, 227, 227, 21, 21, 21, 21, 111, 111,
	113, 113, 113, 113, 40, 110, 110, 110, 110, 112,
	112, 112, 112, 182, 180, 180, 187, 187, 187, 53,
	53, 53, 53, 53, 54, 54, 54, 179, 179, 179,
	179, 188, 188, 188, 188, 188, 188, 55, 55, 55,
	186, 186, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 181, 181, 226, 226,
	228, 228, 8, 8, 56, 56, 57, 57, 117, 117,
	117, 117, 116, 197, 197, 198, 198, 198, 199, 199,
	199, 199, 199, 199, 199, 195, 195, 196, 193, 193,
	194, 194, 194, 194, 232, 232, 115, 115, 60, 60,
	202, 202, 202, 202, 200, 200, 200, 200, 200, 203,
	201, 204, 204, 204, 204, 204, 145, 145, 145, 24,
	7, 7, 100, 100, 64, 64, 149, 149, 149, 65,
	65, 150, 47, 47, 33, 33, 33, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 101, 101, 102, 102,
	16, 20, 23, 23, 23, 23, 23, 234, 234, 44,
	44, 44, 44, 45, 45, 114, 114, 114, 114, 114,
	39, 6, 6, 38, 38, 14, 14, 14, 14, 14,
	50, 50, 107, 107, 107, 109, 109, 108, 108, 108,
	87, 87, 25, 78, 78, 79, 79, 156, 80, 80,
	19, 19, 28, 28, 26, 26, 26, 26, 26, 26,
	27, 27, 29, 29, 29, 29, 29, 29, 29, 210,
	210, 210, 212, 212, 209, 15, 15, 15, 15, 211,
	211, 233, 233, 88, 88, 88, 59, 58, 58, 62,
	62, 61, 63, 63, 148, 85, 85, 85, 85, 103,
	104, 104, 105, 105, 106, 106, 84, 84, 132, 132,
	30, 30, 69, 69, 70, 70, 123, 123, 124, 124,
	122, 122, 122, 151, 151, 151, 151, 152, 152, 152,
	152, 152, 152, 146, 146, 146, 146, 147, 147, 91,
	91, 91, 91, 89, 89, 90, 90, 153, 153, 153,
	153, 86, 86, 154, 154, 154, 118, 118, 159, 159,
	159, 68, 68, 68, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 161, 161, 161, 161, 163,
	163, 163, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 164, 164, 171, 171, 172,
	172, 173, 174, 165, 165, 166, 166, 167, 168, 175,
	175, 175, 175, 177, 177, 169, 169, 169, 169, 169,
	170, 97, 97, 97, 97, 97, 97, 97, 97, 97,
	97, 97, 97, 97, 97, 98, 98, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 126, 126, 126, 126, 126, 126, 126, 126, 126,
	126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
	126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 205, 205, 205, 205, 205, 205, 205, 207,
	207, 208, 208, 206, 206, 206, 206, 206, 206, 206,
	206, 206, 206, 206, 206, 206, 206, 206, 206, 206,
	206, 206, 206, 206, 206, 206, 206, 206, 206, 213,
	213, 214, 214, 215, 215, 216, 216, 218, 219, 219,
	219, 220, 224, 224, 217, 217, 221, 221, 221, 222,
	222, 223, 223, 223, 223, 223, 136, 136, 136, 137,
	137, 138, 75, 75, 134, 134, 133, 133, 133, 135,
	135, 92, 176, 176, 176, 176, 176, 176, 176, 93,
	93, 99, 94, 94, 95, 95, 95, 95, 95, 95,
	129, 130, 96, 96, 96, 131, 131, 139, 143, 143,
	142, 141, 141, 140, 140, 121, 121, 121, 121, 120,
	119, 81, 81, 235, 235, 144, 144, 82, 82, 83,
	77, 77, 155, 155, 155, 155, 71, 71, 52, 52,
	72, 72, 48, 48, 51, 49, 49, 49, 49, 66,
	66, 67, 67, 46, 46, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 178, 178, 178, 41,
	41, 41, 42, 42, 43, 43, 184, 184, 184, 185,
	185, 185, 185, 183, 183, 183, 183, 183, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	191, 191, 191, 191, 191, 191, 191, 191, 191, 191,
	191, 191, 191, 191, 191, 191, 191, 191, 191, 191,
	191, 191, 191, 191, 191, 191, 191, 191, 191, 191,
	191, 191, 191, 191, 191, 191, 191, 191, 191, 191,
	191, 191, 191, 191, 191, 191, 190, 190, 190, 190,
	190, 190, 190, 190, 190, 190, 190, 190, 190, 192,
	192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
	192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
	192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
	192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
	192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
	192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
	192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
	192, 192, 192, 192, 192, 192, 192, 192,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 4, 6, 1, 3, 2, 5, 3, 6,
	4, 6, 6, 6, 4, 8, 2, 3, 3, 6,
	4, 3, 2, 1, 1, 0, 2, 0, 2, 0,
	1, 1, 1, 6, 3, 5, 4, 6, 4, 6,
	1, 3, 1, 2, 2, 3, 2, 5, 1, 1,
	1, 1, 1, 1, 3, 1, 6, 6, 1, 2,
	2, 1, 1, 1, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 2, 3, 6, 3, 2, 1,
	1, 1, 3, 3, 2, 3, 3, 3, 3, 1,
	3, 3, 2, 1, 1, 3, 1, 1, 1, 2,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 1, 1, 1, 1, 1, 0,
	1, 1, 2, 2, 4, 2, 4, 4, 4, 4,
	3, 3, 4, 3, 2, 4, 2, 0, 2, 0,
	2, 0, 6, 9, 1, 0, 1, 3, 1, 1,
	1, 1, 3, 2, 0, 3, 1, 2, 2, 1,
	1, 2, 4, 2, 5, 6, 7, 5, 3, 1,
	4, 5, 5, 10, 1, 1, 4, 0, 3, 0,
	2, 2, 2, 0, 1, 1, 2, 2, 0, 3,
	3, 2, 1, 1, 2, 2, 1, 2, 1, 4,
	10, 13, 1, 0, 1, 3, 3, 3, 5, 1,
	3, 1, 2, 0, 1, 1, 0, 6, 6, 8,
	6, 8, 8, 10, 8, 10, 1, 0, 2, 0,
	2, 2, 3, 3, 2, 2, 2, 1, 0, 1,
	3, 2, 0, 2, 1, 1, 1, 3, 3, 0,
	3, 4, 7, 3, 0, 6, 6, 8, 5, 7,
	1, 3, 1, 4, 2, 8, 5, 4, 3, 0,
	2, 0, 8, 1, 3, 1, 1, 3, 5, 5,
	1, 1, 3, 3, 1, 2, 3, 2, 3, 4,
	1, 1, 8, 8, 1, 2, 4, 4, 4, 2,
	2, 3, 1, 3, 6, 1, 1, 1, 1, 1,
	0, 1, 0, 1, 1, 0, 1, 1, 0, 1,
	0, 3, 1, 3, 2, 2, 2, 1, 1, 2,
	2, 3, 1, 1, 1, 1, 3, 0, 2, 0,
	2, 3, 2, 0, 1, 3, 3, 1, 1, 3,
	2, 4, 0, 3, 2, 1, 4, 3, 4, 5,
	4, 5, 4, 5, 2, 4, 1, 1, 0, 2,
	2, 2, 1, 1, 0, 4, 2, 1, 2, 2,
	4, 1, 3, 1, 2, 3, 2, 0, 2, 5,
	2, 3, 4, 0, 1, 1, 1, 1, 2, 4,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	5, 0, 1, 1, 1, 1, 1, 1, 2, 2,
	2, 2, 2, 1, 1, 3, 0, 1, 1, 1,
	1, 5, 2, 1, 1, 1, 1, 4, 1, 2,
	2, 1, 1, 1, 0, 1, 1, 4, 1, 4,
	1, 1, 1, 1, 1, 1, 1, 3, 3, 3,
	3, 3, 3, 3, 0, 1, 4, 1, 3, 3,
	3, 5, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 2, 2, 3, 4,
	4, 5, 3, 4, 3, 3, 4, 3, 4, 3,
	4, 5, 6, 6, 7, 6, 7, 6, 7, 3,
	4, 1, 3, 3, 2, 2, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 5, 6, 6, 7,
	1, 1, 1, 3, 1, 1, 1, 2, 2, 2,
	1, 1, 3, 5, 6, 8, 6, 6, 4, 4,
	1, 1, 1, 5, 1, 3, 1, 3, 1, 1,
	1, 1, 6, 6, 4, 4, 4, 4, 6, 5,
	5, 5, 4, 8, 6, 6, 4, 4, 4, 5,
	0, 5, 0, 2, 0, 1, 3, 3, 2, 2,
	0, 6, 1, 0, 3, 0, 2, 2, 0, 1,
	4, 2, 2, 2, 2, 2, 4, 3, 5, 4,
	3, 5, 1, 3, 1, 3, 3, 3, 2, 1,
	3, 3, 1, 1, 1, 1, 1, 1, 1, 4,
	3, 2, 3, 0, 3, 3, 2, 2, 1, 0,
	2, 2, 3, 2, 1, 1, 3, 5, 1, 2,
	4, 2, 0, 1, 0, 1, 1, 3, 5, 2,
	2, 1, 2, 1, 0, 1, 1, 1, 3, 3,
	1, 3, 3, 2, 1, 1, 1, 3, 1, 3,
	1, 3, 1, 2, 3, 1, 2, 2, 1, 1,
	3, 3, 0, 1, 2, 1, 1, 1, 1, 6,
	2, 3, 5, 1, 1, 1, 1, 2, 2, 1,
	1, 1, 1, 0, 3, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -9, -10, -11, -13,
	-14, -17, -18, -20, -19, -21, -22, -23, -16, -24,
	-25, 19, -6, -7, -8, -211, 84, 91, 106, 193,
	200, -26, -28, 208, 209, 30, 216, 53, 87, 195,
	190, 235, 59, -210, -29, -27, 280, 256, 262, 203,
	-30, 222, 249, 284, 222, 71, 117, 79, 121, 243,
	242, 71, 117, 222, -12, 280, -19, -14, -25, -9,
	-11, -229, 18, -230, -231, 59, 84, 106, 203, 121,
	79, 242, -229, -45, 200, -41, 4, -189, -191, 16,
	17, 19, 29, 30, 34, 38, 41, 52, 53, 54,
	56, 58, 61, 62, 69, 70, 71, 72, 74, 79,
	83, 84, 86, 91, 96, 97, 100, 102, 107, 112,
	113, 118, 121, 129, 131, 132, 137, 140, 143, 145,
	146, 147, 148, 149, 151, 152, 154, 156, 153, 159,
	161, 162, 168, 171, 174, 175, 178, 181, 182, 183,
	185, 186, 190, 188, 189, 191, 193, 195, 196, 198,
	201, 202, 205, 206, 208, 209, 211, 213, 215, 216,
	219, 217, 223, 224, 231, 235, 236, 237, 238, 241,
	242, 243, 246, 247, 248, 252, 257, 258, 259, 260,
	24, 31, 32, 33, 35, 36, 39, 40, 44, 45,
	46, 48, 73, 75, 76, 90, 92, 98, 108, 110,
	114, 115, 122, 123, 124, 126, 135, 158, 160, 169,
	173, 177, 179, 184, 197, 204, 212, 218, 220, 226,
	227, 228, 232, 233, 249, 250, -111, 140, 206, 231,
	-112, -110, -182, 226, 149, -73, -41, 200, 4, 71,
	52, 72, 107, 117, 118, 132, 223, 226, 231, 18,
	59, -234, 231, 231, -234, -234, -44, 231, 229, -45,
	-233, 222, 222, -100, 71, 240, -27, -29, -28, -61,
	-62, 239, 125, 89, 167, -26, -28, -210, -212, 185,
	-209, -41, -212, -58, -59, 18, 81, 285, -153, -48,
	165, -41, -83, 280, -3, -153, 114, -41, -51, 114,
	-48, 104, 127, 127, -154, -153, -41, 114, -52, 114,
	-51, -74, 114, -73, -158, -157, -185, 4, -189, -191,
	-190, 249, 50, 60, 105, 120, 128, 130, 136, 138,
	150, 170, 172, 194, 210, 164, 285, 164, -41, -111,
	46, -111, -113, -39, -40, 129, 181, 229, 265, 104,
	260, -55, 5, 77, -76, 283, 104, -226, 164, 104,
	104, 104, -181, 104, 260, 129, 181, 222, -114, -39,
	-40, -114, 229, -45, -86, -153, -73, 114, 117, -41,
	114, -61, -62, -85, -103, -104, 139, 163, -88, 18,
	81, -88, -88, 38, 281, 281, 285, -212, -67, 280,
	-77, -155, -125, 273, -127, 271, 272, 277, 155, 261,
	-136, -48, -128, 9, 280, -139, -207, -28, 90, 25,
	-137, -138, 197, -41, 7, 8, 5, 6, -46, -161,
	-170, 234, 93, 157, 42, -205, -206, 4, -189, -184,
	-162, -172, -166, -169, 126, 50, 64, 67, 65, 68,
	207, 244, 43, 24, 92, 173, 177, 220, 232, 233,
	114, 158, 115, 48, 108, 135, 83, 32, 33, 35,
	36, 44, 45, 73, 75, 76, 98, 122, 123, 124,
	160, 184, 212, 218, 227, 228, 250, -190, -173, -174,
	-167, -168, -175, -77, -83, 273, -48, 280, -81, -121,
	-120, -119, 278, 283, -82, -144, -125, 77, -35, 188,
	-34, 17, 19, 84, 247, 90, 188, 188, 90, 286,
	-154, -50, -48, -50, 208, -41, 26, 90, -37, 285,
	41, 191, 90, -37, 285, 90, 281, 285, -225, -72,
	222, 71, -49, -41, 273, -231, -225, 26, 285, 285,
	137, -54, 143, 154, 112, -180, 77, -187, -179, -145,
	9, 234, 93, 164, -186, 8, 272, -178, -185, 5,
	7, 271, -180, 77, 62, -188, 5, 4, -170, -145,
	77, 140, 126, 283, -183, 4, -189, -191, -190, -192,
	18, 20, 21, 22, 23, 25, 26, 27, 28, 37,
	42, 43, 47, 49, 51, 57, 59, 63, 64, 65,
	66, 67, 68, 77, 78, 80, 81, 82, 85, 87,
	89, 93, 94, 95, 101, 103, 104, 106, 109, 111,
	116, 117, 119, 125, 127, 133, 134, 139, 141, 142,
	155, 157, 163, 164, 165, 166, 167, 176, 180, 187,
	192, 203, 207, 214, 221, 222, 225, 229, 230, 234,
	239, 240, 244, 245, 251, 253, 254, 255, 256, -182,
	-228, 101, -225, -182, -182, -182, -182, 137, -182, 285,
	285, -45, -37, 285, 280, 155, -42, 114, -41, -38,
	86, 155, -85, -104, -103, -105, -125, 18, -125, -127,
	-27, -27, -27, -63, -148, -125, -209, 26, -66, -41,
	-69, 285, 104, 10, 282, 49, 29, 271, 272, 273,
	274, 99, 275, 268, 269, 270, 267, 263, 264, 265,
	55, 144, 199, 12, 13, 14, 22, 166, 138, 261,
	210, 128, 31, 116, 26, 4, -125, -125, -125, -125,
	-125, 172, -28, -125, -75, -81, -28, -133, 278, 280,
	-81, 280, 5, 5, 280, -140, -125, -213, 257, 101,
	280, 280, 280, 280, 280, 280, 280, 280, 280, 280,
	280, 280, 280, 280, 280, 280, 179, -177, 252, -177,
	-177, -163, 280, -163, -164, 280, -163, 258, 262, 280,
	-69, -48, -121, -125, -183, 273, 285, 281, 285, 229,
	-101, 57, 51, -116, 114, 51, -193, -41, 57, -194,
	47, 240, 180, 103, -101, 57, -101, 57, 57, -153,
	229, 229, -51, -41, -118, 254, -107, -19, 280, 77,
	26, -107, -78, -79, -156, -80, -48, 280, -41, -41,
	-51, -52, -73, -74, -12, -157, 229, 285, -72, -66,
	-120, -119, 104, 231, -40, -39, -53, 183, 213, 189,
	205, 285, 8, 7, 7, 5, -183, -227, -41, -40,
	-39, -153, -56, -57, -117, -116, -195, -196, -193, 117,
	240, 94, 90, 164, 155, 265, 90, -106, 197, 198,
	285, -33, 27, 80, 280, 285, 281, -118, -155, -70,
	-151, -153, -28, -152, 280, -159, -160, -162, -171, -165,
	-169, -170, 34, 40, 39, 224, 204, 122, 123, 124,
	212, 32, 184, 98, 83, 76, 75, 160, 36, 35,
	-173, -174, -167, -168, 73, 227, 228, 33, 45, 44,
	250, 218, -159, -73, 226, -125, -125, -125, -125, -125,
	-125, -125, -125, -125, -125, -125, -125, -125, -125, -125,
	-125, -125, -125, -125, -125, -125, -125, 138, 210, 31,
	116, 229, 157, 155, 234, 93, 241, 81, 161, -235,
	221, 28, -131, -28, 280, -183, -136, 197, 280, 281,
	285, -75, -135, 279, -125, -133, -75, 281, 281, -75,
	251, 18, 81, 273, -97, 259, 147, 74, 113, 146,
	-98, 202, 7, -143, -142, 253, -214, 96, 109, 280,
	281, 281, -125, -125, -92, -176, 4, 259, 147, 74,
	113, 146, 202, -93, -125, -94, -126, -127, 271, 272,
	277, 280, 197, -95, -125, -75, -125, 37, 134, 230,
	-96, -125, 104, -75, -125, -125, -125, -75, -75, -75,
	280, 7, 7, 226, 226, 7, -118, 281, 279, 289,
	-144, -34, -48, -41, -41, 155, -116, 114, -159, -41,
	280, 280, 131, 131, -41, -41, 114, -41, 114, -41,
	-41, -35, 188, -41, -41, 188, -87, 192, -125, -87,
	-109, 164, -71, -48, 249, -41, 192, -69, 285, 265,
	-71, -37, -37, -227, -49, -227, -39, 238, 54, 183,
	-187, -97, 285, 281, 285, -42, 117, -42, -73, -48,
	90, 5, -41, -148, -15, -19, -14, -25, -9, -41,
	-84, 109, 285, 60, -91, 130, 150, 105, 136, 194,
	120, -122, 286, -147, -146, 26, -41, -28, -152, -151,
	-68, 25, -97, 280, 260, -125, 229, -235, 221, -131,
	-125, 157, 234, 93, 241, 81, 161, 104, 280, -126,
	-126, -75, 280, -75, -125, 285, 279, 279, 285, 281,
	-62, 285, -61, -125, -75, -75, 281, 229, 229, 229,
	229, 280, 281, -141, -142, 85, -125, -219, 171, 280,
	280, -125, 26, 285, 281, 104, 281, -99, 176, 281,
	10, 282, 271, 272, 273, 274, 99, 275, 268, 269,
	270, 267, 263, 264, 265, 55, 144, 199, 12, 13,
	14, 128, 116, -126, -126, -126, -75, 280, 281, -129,
	-130, 104, 101, 26, -96, -96, -96, 281, 104, -75,
	285, 285, 285, 281, 281, 281, 7, 281, 285, 281,
	260, 260, 281, -84, -125, 229, 229, 90, 155, -197,
	-194, -125, -66, 280, 280, -32, 84, 208, -102, 90,
	-37, 90, -37, 229, -101, 57, 229, -77, 192, 56,
	281, 285, -77, -118, -79, -144, 281, -41, -117, 280,
	-42, 280, 280, 280, -41, -38, 281, -132, 111, 38,
	-151, 130, 130, -151, -91, 130, -89, 170, -89, -89,
	-147, -183, 287, -41, 280, 281, 278, 278, 7, -125,
	-125, -126, -126, 104, 280, -125, -134, -159, 22, 22,
	281, -75, 281, 285, 281, -125, -133, 281, 251, -62,
	-62, -62, 147, 113, 146, -98, 146, -98, -98, 7,
	5, 87, -125, 225, -220, -41, 280, 254, -61, 281,
	-159, -159, -125, -129, -125, -159, -159, -126, -126, -126,
	-126, -126, -126, -126, -126, -126, -126, -126, -126, -126,
	-126, -126, -126, -126, -126, -126, 81, 155, 161, -126,
	285, -75, 281, -130, -129, -125, -125, -159, 281, 281,
	281, -75, -125, -125, -125, 281, 7, -132, 279, -41,
	-41, -116, 90, -198, 57, -199, 49, 155, 157, 240,
	180, 47, 77, 187, 281, 281, -66, -66, 155, 77,
	155, 77, 70, 236, -41, -41, -48, -41, -41, -41,
	-77, -108, 280, 164, -19, -48, -87, 265, -64, -149,
	-41, -208, 280, -205, -206, -46, 280, -65, -150, -41,
	-56, -64, 164, -215, 255, -125, -75, -151, -151, -90,
	245, 164, 130, -151, -124, -123, 102, 153, 280, -66,
	-146, 279, 7, 7, 281, 22, 22, -125, -134, 281,
	285, -125, -125, 281, -125, 5, -125, 281, 281, 281,
	281, -125, -224, -41, -125, 281, 281, 281, -130, 104,
	81, 161, 280, -125, 281, 281, 285, 281, 281, 281,
	-215, -116, -41, -73, 157, 131, 280, -126, -48, -115,
	-232, 58, 219, 281, 281, 157, 157, -125, -159, -37,
	-37, 229, 229, 82, -66, 57, -83, -28, 280, 281,
	285, -47, -81, 49, -47, -125, 280, -64, 281, 285,
	281, 281, -48, -216, -218, -41, -90, 280, -125, -151,
	285, 288, 265, -66, 281, 279, 279, -125, -125, 281,
	-159, 281, -62, -217, 175, 281, -126, 104, 280, -134,
	281, -125, -199, -125, -43, 280, 280, 187, -36, 49,
	-41, -41, 242, 156, 281, -41, -115, -149, -33, -73,
	-33, 281, -75, 281, -150, -115, 280, 285, 26, -66,
	-123, -183, 281, 281, -62, 38, -126, -134, 281, 281,
	281, -202, 145, -41, -66, -48, -31, 245, -73, 208,
	-118, -47, -62, -115, -64, -218, -220, 281, -221, 182,
	198, -75, 281, -200, -203, -201, 164, 105, 174, 211,
	281, 281, -60, 280, -125, -78, -33, 281, 281, 281,
	-222, -223, 31, 237, 62, -125, -222, -201, 164, -203,
	164, 242, 79, -202, -66, -118, -115, -223, 178, 100,
	197, 178, 100, -204, 152, 191, 41, 208, -204, -200,
	281, 22, 16, 157, 77, -223,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 0, 50, 51, 52, 0, 0, 330, 0, 0,
	0, 300, -2, 0, 0, 258, 0, 258, 258, 262,
	0, 332, 223, 329, -2, 340, 0, 0, 0, 338,
	314, 0, 0, -2, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 66, 0, 68, 69, 70, 71,
	72, 0, 81, 82, 83, 85, 86, 87, 88, 89,
	90, 91, 0, 251, 839, 264, 749, 750, 751, 768,
	769, 770, 771, 772, 773, 774, 775, 776, 777, 778,
	779, 780, 781, 782, 783, 784, 785, 786, 787, 788,
	789, 790, 791, 792, 793, 794, 795, 796, 797, 798,
	799, 800, 801, 802, 803, 804, 805, 806, 807, 808,
	809, 810, 811, 812, 813, 814, 815, 816, 817, 818,
	819, 820, 821, 822, 823, 824, 825, 826, 827, 828,
	829, 830, 831, 832, 833, 834, 835, 836, 837, 838,
	840, 841, 842, 843, 844, 845, 846, 847, 848, 849,
	850, 851, 852, 853, 854, 855, 856, 857, 858, 859,
	860, 861, 862, 863, 864, 865, 866, 867, 868, 869,
	870, 871, 872, 873, 874, 875, 876, 877, 878, 879,
	880, 881, 882, 883, 884, 885, 886, 887, 888, 889,
	890, 891, 892, 893, 894, 895, 896, 897, 898, 899,
	900, 901, 902, 903, 904, 905, 906, 907, 908, 909,
	910, 911, 912, 913, 914, 915, 94, 806, 843, 854,
	99, 109, 0, 909, -2, 113, 62, 839, 142, 143,
	0, 145, 159, 0, 0, 0, 157, 0, 0, 154,
	0, 269, 257, 269, 254, 255, 256, 259, 0, 250,
	0, 331, 0, 0, 0, 222, -2, 310, 311, -2,
	0, 335, 335, 335, 0, 0, 311, 0, 319, 829,
	322, 732, 320, 0, 0, 337, 336, 0, 315, 397,
	0, 722, 360, 0, 2, 0, 890, 0, 0, 890,
	0, 0, 0, 0, 0, 403, 54, 890, 45, 890,
	718, 45, 890, 60, 0, 73, 75, 759, 760, 761,
	762, 914, 916, 917, 918, 919, 920, 921, 922, 923,
	924, 925, 926, 927, 928, 0, 0, 0, 263, 95,
	880, 97, 98, 100, 101, 0, 0, 0, 0, 0,
	0, 112, 137, 138, 63, 0, 0, 161, 0, 0,
	0, 0, 150, 0, 151, 0, 153, 0, 252, 265,
	266, 253, 0, 261, 45, 401, 0, 890, 753, 274,
	890, -2, 0, 306, 347, 348, 0, 0, 0, 333,
	334, 0, 0, 0, 302, 303, 0, 321, 0, 0,
	363, 710, 714, 715, 487, 0, 0, 0, 0, 0,
	0, 570, 571, 572, 0, 574, 575, 576, 885, 0,
	580, 581, 904, 722, 735, 736, 737, 738, 0, 0,
	0, 743, 744, 745, 694, 620, 590, -2, -2, 733,
	425, 426, 427, 428, -2, 916, 594, 596, 598, 599,
	600, 601, 0, 870, 886, 900, 901, 908, 912, 913,
	890, 897, 891, 881, 888, 896, 789, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, 758, 449, 450,
	455, 456, 458, 363, 361, 398, 399, 0, 723, 701,
	695, 696, 0, 0, 0, 707, 705, 706, 22, 247,
	24, 0, 247, 247, 0, 0, 0, 0, 0, 0,
	407, 0, 280, 0, 0, 404, 0, 0, 56, 0,
	43, 44, 0, 58, 0, 0, 330, 0, 0, 78,
	0, 785, 720, 725, 728, 84, 0, 0, 0, 0,
	0, 104, 124, 125, 126, 105, 107, 114, 116, 117,
	118, 127, 128, 129, 130, 216, 0, 218, 140, 141,
	746, 0, 106, 108, 110, 111, 131, 132, 0, 134,
	135, 136, 470, 0, 64, 763, 764, 765, 766, 767,
	929, 930, 931, 932, 933, 934, 935, 936, 937, 938,
	939, 940, 941, 942, 943, 944, 945, 946, 947, 948,
	949, 950, 951, 952, 953, 954, 955, 956, 957, 958,
	959, 960, 961, 962, 963, 964, 965, 966, 967, 968,
	969, 970, 971, 972, 973, 974, 975, 976, 977, 978,
	979, 980, 981, 982, 983, 984, 985, 986, 987, 988,
	989, 990, 991, 992, 993, 994, 995, 996, 997, 998,
	999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 144,
	146, 0, 158, 147, 148, 149, 156, 152, 155, 0,
	0, 260, 219, 0, 165, 0, 0, 890, 752, 271,
	0, 0, 309, 345, 346, 349, 352, 353, 350, 487,
	316, 317, 318, 341, 342, 236, 323, 0, 0, 729,
	407, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 704, 0, 0, 713, 492, 493, 494, 516,
	517, 0, -2, 652, 0, 577, 578, 579, 0, 0,
	-2, 0, 740, 484, 0, 0, 693, 622, 0, 0,
	0, 0, 0, 0, 0, 0, 673, 679, 0, 0,
	0, 0, 0, 0, 0, 0, 439, 452, 463, 460,
	459, 441, 0, 440, 438, 0, 442, 0, 0, 0,
	407, 0, 702, 0, 699, 700, 0, 709, 0, 0,
	0, 0, 246, 26, 890, 0, 36, 0, 0, 189,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 724, 291, 0, 291, 282, 0, 0,
	0, 278, 363, 293, 295, 296, 0, 0, 405, 55,
	719, 45, 61, 45, 67, 74, 0, 0, 79, 80,
	726, 727, 0, 0, 102, 103, 270, 0, 121, 0,
	123, 0, 217, 748, 747, 484, 65, 160, 92, 267,
	268, 402, 0, 164, 166, 168, 169, 170, 171, 753,
	0, 753, 0, 0, 0, 0, 0, 351, 354, 355,
	0, 344, 234, 235, 330, 0, 731, 357, 711, 362,
	364, 372, 388, 375, 0, 488, 413, 414, 415, 416,
	417, 484, 420, 421, 422, 423, 424, 432, 433, 434,
	435, 436, 437, 446, 0, 431, 431, 431, 443, 444,
	447, 448, 453, 454, 465, 466, 468, 464, 464, 464,
	461, 462, 489, 490, 0, 495, 496, 497, 498, 499,
	500, 501, 502, 503, 504, -2, -2, -2, 508, 509,
	510, -2, -2, -2, 514, 515, -2, 0, 0, 704,
	0, 0, 522, 0, 525, 527, 529, 0, 0, 0,
	0, 703, 539, 685, 0, 712, 524, 0, 0, 573,
	0, 0, 0, 658, 652, 659, 0, -2, 582, 340,
	0, 0, 0, 0, 741, 471, 472, 473, 474, 475,
	476, 485, 0, 692, 688, 0, 630, 0, 0, 0,
	595, 597, 0, 0, 0, 0, 662, 663, 664, 665,
	666, 667, 668, 0, 0, 0, 0, 541, 0, 0,
	0, 0, 904, 0, 652, 678, 0, 0, 0, 0,
	0, 652, 0, 684, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 357, 400, 697, 0,
	708, 25, 238, 0, 0, 0, 28, 890, 174, 0,
	0, 0, 0, 0, 249, 37, 890, 45, 890, 45,
	38, 23, 247, 237, 240, 0, 53, 0, 406, 275,
	276, 0, 0, 716, 284, 281, 0, 407, 0, 0,
	0, 57, 59, 76, 721, 77, 96, 119, 120, 122,
	115, 133, 0, 162, 0, 0, 753, 0, 0, 0,
	0, 273, 274, 343, 0, 325, 326, 327, 328, 730,
	359, 0, 0, 0, 0, 0, 0, 394, 394, 394,
	392, 388, 0, 374, 387, 0, 386, -2, 375, 0,
	408, 410, 418, 0, 0, -2, 0, 0, 0, 540,
	-2, 523, 526, 528, 530, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 653, 0, 656, 657, 0, -2,
	0, 0, 339, 340, 340, 340, 588, 0, 0, 0,
	0, 0, 0, 0, 689, 0, 0, 589, 0, 0,
	0, 0, 0, 0, 604, 0, 605, 0, 0, 606,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 544, 545, 546, 0, 0, 607, 676,
	677, 0, 0, 0, 0, 0, 0, 612, 0, 683,
	0, 0, 0, 616, 617, 618, 0, 429, 0, 445,
	467, 469, 457, 359, 0, 0, 0, 0, 0, 172,
	188, 0, 0, 0, 0, 30, 0, 0, 0, 0,
	34, 0, 40, 0, 0, 0, 0, 290, 0, 289,
	0, 0, 279, 291, 294, 297, 0, 93, 167, 0,
	0, 0, 165, 0, 0, 272, 324, 624, 0, 0,
	365, 0, 0, 0, 0, 0, 389, 393, 390, 391,
	373, 370, 0, 384, 0, 377, 0, 0, 0, 491,
	-2, 0, 0, 0, 0, -2, 0, 654, 0, 0,
	686, 0, 647, 0, -2, 653, 660, 583, 0, 0,
	0, 0, 477, 478, 479, 480, 481, 482, 483, 0,
	742, 687, 691, 0, 628, 629, 633, 0, 0, 593,
	0, 0, 661, 670, 671, 542, 543, 547, 548, 549,
	550, 551, 552, 553, 554, 555, 556, -2, -2, -2,
	560, 561, 562, -2, -2, -2, 0, 0, 0, 672,
	0, 0, 650, 674, 675, 680, 681, 0, 609, 610,
	611, 682, 0, 0, 0, 451, 0, 624, 698, 242,
	244, 27, 0, 173, 0, 176, 0, 0, 179, 180,
	0, 0, 0, 0, 190, 197, 0, 0, 0, 42,
	0, 0, 248, 0, 45, 45, 239, 0, 0, 241,
	277, 0, 0, 0, 283, 717, 292, 0, 0, 224,
	233, 233, 0, 591, 592, 0, 0, 0, 229, 231,
	0, 0, 0, 312, 0, 358, 356, 378, 0, 380,
	0, 0, 0, 382, 0, 368, 0, 367, 0, 0,
	376, 411, 0, 0, 419, 0, 0, -2, 0, 533,
	0, -2, -2, 646, 653, 739, 340, 584, 586, 587,
	486, 690, 635, 632, 0, 619, 602, 603, 669, 0,
	0, 0, 0, 653, 649, 608, 0, 614, 615, 430,
	313, 29, 0, 177, 178, 181, 0, 183, 755, 191,
	0, 194, 195, 192, 0, 31, 32, 41, 47, 33,
	39, 0, 0, 0, 0, 0, 298, 299, 0, 197,
	0, 236, 734, 0, 236, 0, 0, 0, 187, 0,
	163, 197, 0, 623, 625, 0, 379, 0, 396, 381,
	0, 371, 0, 0, 385, 412, 409, -2, -2, 534,
	655, 648, 0, 340, 0, 621, -2, 0, 0, 0,
	651, 0, 175, 0, 203, 0, 0, 0, 49, 0,
	243, 245, 0, 286, 407, 288, 185, 225, 226, 232,
	227, 233, 340, 197, 230, 220, 0, 0, 0, 0,
	369, 366, 383, 585, 638, 0, -2, 0, 568, 613,
	182, 208, 0, 0, 0, 199, 35, 0, 46, 0,
	287, 236, 0, 186, 0, 626, 627, 395, 0, 0,
	0, 634, 569, 184, 204, 205, 0, 200, 201, 202,
	754, 196, 203, 0, 48, 407, 228, 583, 197, 631,
	636, 639, -2, 857, 782, 0, 637, 206, 0, 207,
	0, 0, 0, 208, 0, 285, 221, 0, 641, 642,
	643, 644, 645, 209, 0, 212, 213, 0, 210, 193,
	198, 0, 211, 214, 215, 640,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 282, 3, 269, 3, 275, 270, 3,
	280, 281, 273, 271, 285, 272, 283, 274, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 289, 284,
	263, 265, 264, 3, 286, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 278, 3, 279, 268, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 287, 267, 288, 277,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 266, 57606, 276, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:675
		{
			sqllex.(*scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:681
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:687
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 14:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:707
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 21:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:717
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 22:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:723
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.qname(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 23:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:727
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.qname(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 24:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:733
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 25:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:737
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:744
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 27:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:749
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 28:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:754
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 29:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:759
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 30:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:764
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: sqlDollar[3].str, Default: sqlDollar[4].union.expr()}
		}
	case 31:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:769
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: sqlDollar[3].str}
		}
	case 32:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:773
		{
			unimplemented()
		}
	case 33:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:776
		{
			sqlVAL.union.val = &AlterTableDropColumn{columnKeyword: sqlDollar[2].union.bool(), IfExists: true, Column: sqlDollar[5].str}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:781
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        sqlDollar[3].str,
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:791
		{
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:794
		{
			sqlVAL.union.val = &AlterTableAddConstraint{ConstraintDef: sqlDollar[2].union.constraintDef()}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:798
		{
			unimplemented()
		}
	case 38:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:800
		{
			unimplemented()
		}
	case 39:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:803
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   sqlDollar[5].str,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:812
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   sqlDollar[3].str,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 41:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:822
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:826
		{
			sqlVAL.union.val = nil
		}
	case 43:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:832
		{
			sqlVAL.union.val = DropCascade
		}
	case 44:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:836
		{
			sqlVAL.union.val = DropRestrict
		}
	case 45:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:840
		{
			sqlVAL.union.val = DropDefault
		}
	case 46:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:845
		{
			unimplementedWithIssue(2473)
		}
	case 47:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:846
		{
		}
	case 48:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:849
		{
			unimplemented()
		}
	case 49:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:850
		{
		}
	case 53:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:861
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retExprs()}
		}
	case 54:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:868
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 55:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:872
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 56:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:876
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 57:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:884
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 58:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:892
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.qnames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:896
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.qnames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:902
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:906
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 62:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:912
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:916
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:922
		{
			sqlVAL.union.val = Indirection{NameIndirection(sqlDollar[2].str)}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:926
		{
			sqlVAL.union.val = append(sqlDollar[1].union.indirect(), NameIndirection(sqlDollar[3].str))
		}
	case 66:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:933
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:937
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:943
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 73:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:953
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 74:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:957
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 76:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:967
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: NameList(sqlDollar[6].union.strs()), Targets: sqlDollar[4].union.targetList()}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:974
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: NameList(sqlDollar[6].union.strs()), Targets: sqlDollar[4].union.targetList()}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:981
		{
			sqlVAL.union.val = TargetList{Tables: QualifiedNames(sqlDollar[1].union.qnames())}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:985
		{
			sqlVAL.union.val = TargetList{Tables: QualifiedNames(sqlDollar[2].union.qnames())}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:989
		{
			sqlVAL.union.val = TargetList{Databases: NameList(sqlDollar[2].union.strs())}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:996
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:999
		{
		}
	case 83:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1003
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1007
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 85:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1014
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 86:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1018
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 87:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1022
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 88:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1026
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 89:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1030
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 90:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1034
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 91:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1038
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 92:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1046
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1050
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 94:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1058
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 95:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1062
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 96:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1066
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1070
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 98:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1076
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 100:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1083
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1087
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1091
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1095
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1102
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1108
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname(), Values: sqlDollar[3].union.exprs()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1112
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname(), Values: sqlDollar[3].union.exprs()}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1116
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname()}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1120
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1127
		{
			unimplemented()
		}
	case 111:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1130
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1133
		{
			unimplemented()
		}
	case 114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1140
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1144
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1152
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1158
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1162
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1166
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 122:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1170
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1174
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1180
		{
			sqlVAL.union.val = Low
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1184
		{
			sqlVAL.union.val = Normal
		}
	case 126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1188
		{
			sqlVAL.union.val = High
		}
	case 127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1194
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1198
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 129:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1202
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1217
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1221
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1225
		{
			d, err := ParseDInterval(sqlDollar[2].str)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1235
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1239
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1244
		{
			unimplemented()
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1245
		{
			unimplemented()
		}
	case 139:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1246
		{
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1250
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1254
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1260
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1264
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1268
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.qname()}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1272
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1276
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.strs()}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1280
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1284
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1288
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1292
		{
			sqlVAL.union.val = &ShowTables{Name: sqlDollar[3].union.qname()}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1296
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1300
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1304
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1308
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 155:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1312
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.qname()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1318
		{
			sqlVAL.union.val = sqlDollar[2].union.qname()
		}
	case 157:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1322
		{
			sqlVAL.union.val = (*QualifiedName)(nil)
		}
	case 158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1328
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 159:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1333
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1339
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 161:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1343
		{
			sqlVAL.union.val = []string(nil)
		}
	case 162:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1350
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.qname(), IfNotExists: false, Defs: sqlDollar[5].union.tblDefs()}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1354
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.qname(), IfNotExists: true, Defs: sqlDollar[8].union.tblDefs()}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1361
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1367
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1371
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1377
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1381
		{ /* unimplemented */
		}
	case 171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1383
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1389
		{
			sqlVAL.union.val = newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1395
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 174:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1399
		{
			sqlVAL.union.val = []ColumnQualification(nil)
		}
	case 175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1405
		{
			sqlVAL.union.val = sqlDollar[3].union.colQual()
		}
	case 177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1409
		{
			unimplemented()
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1425
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1429
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1433
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1437
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1441
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1445
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1449
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.qname(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1458
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.idxElems(),
				Storing: sqlDollar[6].union.strs(),
			}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1466
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:    Name(sqlDollar[3].str),
					Columns: sqlDollar[5].union.idxElems(),
					Storing: sqlDollar[7].union.strs(),
				},
			}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1478
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.famElems(),
			}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1490
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1495
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 190:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1501
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1507
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[3].union.strs()),
					Storing: sqlDollar[5].union.strs(),
				},
			}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1516
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[4].union.strs()),
				},
				PrimaryKey: true,
			}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1525
		{
			unimplemented()
		}
	case 196:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1542
		{
			sqlVAL.union.val = sqlDollar[3].union.strs()
		}
	case 197:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1546
		{
			sqlVAL.union.val = []string(nil)
		}
	case 198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1552
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 199:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1556
		{
			sqlVAL.union.val = []string(nil)
		}
	case 200:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1561
		{
			unimplemented()
		}
	case 201:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1562
		{
			unimplemented()
		}
	case 202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1563
		{
			unimplemented()
		}
	case 203:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1564
		{
		}
	case 204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1571
		{
			unimplemented()
		}
	case 205:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1572
		{
			unimplemented()
		}
	case 206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1573
		{
			unimplemented()
		}
	case 207:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1574
		{
			unimplemented()
		}
	case 208:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1575
		{
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1578
		{
			unimplemented()
		}
	case 210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1581
		{
			unimplemented()
		}
	case 211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1584
		{
			unimplemented()
		}
	case 212:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1585
		{
			unimplemented()
		}
	case 213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1586
		{
			unimplemented()
		}
	case 214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1587
		{
			unimplemented()
		}
	case 215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1588
		{
			unimplemented()
		}
	case 216:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1592
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1596
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1600
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 219:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1607
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.qnames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1614
		{
			sqlVAL.union.val = &CreateIndex{
				Name:    Name(sqlDollar[4].str),
				Table:   sqlDollar[6].union.qname(),
				Unique:  sqlDollar[2].union.bool(),
				Columns: sqlDollar[8].union.idxElems(),
				Storing: sqlDollar[10].union.strs(),
			}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql.y:1624
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.qname(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.strs(),
			}
		}
	case 222:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1637
		{
			sqlVAL.union.val = true
		}
	case 223:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1641
		{
			sqlVAL.union.val = false
		}
	case 224:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1647
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1651
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1660
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1663
		{
			unimplemented()
		}
	case 228:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1664
		{
			unimplemented()
		}
	case 229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1668
		{
			sqlVAL.union.val = FamilyElemList{sqlDollar[1].union.famElem()}
		}
	case 230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1672
		{
			sqlVAL.union.val = append(sqlDollar[1].union.famElems(), sqlDollar[3].union.famElem())
		}
	case 231:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1678
		{
			sqlVAL.union.val = FamilyElem{Column: Name(sqlDollar[1].str)}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1683
		{
			unimplemented()
		}
	case 233:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1684
		{
		}
	case 234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1688
		{
			sqlVAL.union.val = Ascending
		}
	case 235:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1692
		{
			sqlVAL.union.val = Descending
		}
	case 236:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1696
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 237:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1703
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1707
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.qname(), NewName: sqlDollar[6].union.qname(), IfExists: false}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1711
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.qname(), NewName: sqlDollar[8].union.qname(), IfExists: true}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1715
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 241:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1719
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 242:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1723
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.qname(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1727
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.qname(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 244:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1731
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 245:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1735
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 246:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1741
		{
			sqlVAL.union.val = true
		}
	case 247:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1745
		{
			sqlVAL.union.val = false
		}
	case 248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1750
		{
		}
	case 249:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1751
		{
		}
	case 250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1755
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1761
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1768
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1772
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1776
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1780
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1784
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1793
		{
		}
	case 258:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1794
		{
		}
	case 259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1798
		{
			sqlVAL.str = ""
		}
	case 260:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1802
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1806
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 262:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1810
		{
			sqlVAL.str = ""
		}
	case 263:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1816
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 264:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1820
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 265:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1826
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1830
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1834
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1838
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1842
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1848
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 271:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1854
		{
			sqlVAL.union.val = &CreateDatabase{Name: Name(sqlDollar[3].str), Encoding: sqlDollar[4].union.strVal()}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1858
		{
			sqlVAL.union.val = &CreateDatabase{IfNotExists: true, Name: Name(sqlDollar[6].str), Encoding: sqlDollar[7].union.strVal()}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1864
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1867
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 275:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1877
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retExprs()
		}
	case 276:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1883
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
		}
	case 277:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1888
		{
			unimplementedWithIssue(6637)
		}
	case 278:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1890
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1895
		{
			unimplementedWithIssue(6637)
		}
	case 280:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1903
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname()}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1907
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1913
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1917
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.qnames(), Rows: sqlDollar[4].union.slct()}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1921
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1927
		{
			sqlVAL.union.val = &OnConflict{Columns: NameList(sqlDollar[3].union.strs()), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1931
		{
			sqlVAL.union.val = &OnConflict{Columns: NameList(sqlDollar[3].union.strs()), DoNothing: true}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1937
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 288:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1941
		{
			unimplemented()
		}
	case 289:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1943
		{
			sqlVAL.union.val = []string(nil)
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1949
		{
			sqlVAL.union.val = sqlDollar[2].union.selExprs()
		}
	case 291:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1953
		{
			sqlVAL.union.val = SelectExprs(nil)
		}
	case 292:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1960
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retExprs()}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1966
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1970
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1980
		{
			sqlVAL.union.val = &UpdateExpr{Names: QualifiedNames{sqlDollar[1].union.qname()}, Expr: sqlDollar[3].union.expr()}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1992
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.qnames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1996
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.qnames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2040
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2046
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2050
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2065
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2069
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2073
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2077
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2081
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2085
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2119
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.tblExprs(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2131
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.tblExprs(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2143
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        TableExprs{&AliasedTableExpr{Expr: sqlDollar[2].union.qname()}},
				tableSelect: true,
			}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2151
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2160
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2169
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2187
		{
			unimplemented()
		}
	case 320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2188
		{
			unimplemented()
		}
	case 321:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2189
		{
			unimplemented()
		}
	case 322:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2192
		{
			unimplemented()
		}
	case 323:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2193
		{
			unimplemented()
		}
	case 324:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2196
		{
			unimplemented()
		}
	case 325:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2200
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 329:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2208
		{
			unimplemented()
		}
	case 330:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2209
		{
		}
	case 331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2212
		{
		}
	case 332:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2213
		{
		}
	case 333:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2217
		{
			sqlVAL.union.val = true
		}
	case 334:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2221
		{
			sqlVAL.union.val = false
		}
	case 335:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2225
		{
			sqlVAL.union.val = false
		}
	case 336:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2231
		{
			sqlVAL.union.val = true
		}
	case 337:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2236
		{
		}
	case 338:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2237
		{
		}
	case 339:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2241
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 340:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2245
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 341:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2251
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 342:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2257
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2261
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 344:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2267
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2275
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2284
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2295
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2308
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2315
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2322
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 354:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2336
		{
		}
	case 355:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2337
		{
		}
	case 356:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2363
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 357:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2367
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2373
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 359:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2377
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 360:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2383
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 361:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2387
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2399
		{
			sqlVAL.union.val = sqlDollar[2].union.tblExprs()
		}
	case 363:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2403
		{
			sqlVAL.union.val = TableExprs(nil)
		}
	case 364:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2409
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2413
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 366:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2419
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 367:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2424
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2430
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2435
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			index := a.Index
			if index == "" {
				index = b.Index
			} else if b.Index != "" {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			noIndexJoin := a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = &IndexHints{Index: index, NoIndexJoin: noIndexJoin}
		}
	case 370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2455
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2459
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 372:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2463
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 373:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2470
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), Hints: sqlDollar[2].union.indexHints(), As: sqlDollar[3].union.aliasClause()}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2474
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, As: sqlDollar[2].union.aliasClause()}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2478
		{
			unimplemented()
		}
	case 377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2496
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 378:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2500
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2504
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2508
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2512
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astNaturalJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr()}
		}
	case 382:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2516
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astNaturalJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2522
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: NameList(sqlDollar[4].union.strs())}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2526
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2530
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: NameList(sqlDollar[3].union.strs())}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2534
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2541
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2547
		{
			sqlVAL.str = astFullJoin
		}
	case 390:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2551
		{
			sqlVAL.str = astLeftJoin
		}
	case 391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2555
		{
			sqlVAL.str = astRightJoin
		}
	case 392:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2559
		{
			sqlVAL.str = astInnerJoin
		}
	case 393:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2565
		{
		}
	case 394:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2566
		{
		}
	case 395:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2577
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: NameList(sqlDollar[3].union.strs())}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2581
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2587
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 398:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2591
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 399:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2595
		{
			sqlVAL.union.val = sqlDollar[2].union.qname()
		}
	case 400:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2599
		{
			sqlVAL.union.val = sqlDollar[3].union.qname()
		}
	case 401:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2605
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2609
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 403:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2622
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname()}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2626
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2630
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2636
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 407:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2640
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2652
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 409:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2656
		{
			unimplementedWithIssue(2115)
		}
	case 410:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2657
		{
			unimplementedWithIssue(2115)
		}
	case 411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2660
		{
			unimplementedWithIssue(2115)
		}
	case 412:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2661
		{
			unimplementedWithIssue(2115)
		}
	case 413:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2662
		{
		}
	case 419:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2670
		{
			unimplemented()
		}
	case 420:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2672
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 421:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2676
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 422:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2680
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 423:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2684
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2688
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2709
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2718
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2732
		{
			sqlVAL.union.val = nil
		}
	case 432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2739
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2743
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2747
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2751
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2755
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2759
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 438:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2763
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newFloatColType(int(prec))
		}
	case 439:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2772
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 440:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2776
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2785
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2794
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2803
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 444:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2807
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 445:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2813
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 446:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2817
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2835
		{
			n, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newIntBitType(int(n))
		}
	case 452:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2846
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 457:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2862
		{
			n, err := sqlDollar[3].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2878
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 459:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2884
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 460:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2888
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2892
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 462:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2896
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 463:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2901
		{
		}
	case 464:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2902
		{
		}
	case 465:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2907
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 466:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2911
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 467:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2915
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 468:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2919
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 469:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2923
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2928
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 471:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2933
		{
			unimplemented()
		}
	case 472:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2934
		{
			unimplemented()
		}
	case 473:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2935
		{
			unimplemented()
		}
	case 474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2936
		{
			unimplemented()
		}
	case 475:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2937
		{
			unimplemented()
		}
	case 476:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2938
		{
			unimplemented()
		}
	case 477:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2939
		{
			unimplemented()
		}
	case 478:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2940
		{
			unimplemented()
		}
	case 479:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2941
		{
			unimplemented()
		}
	case 480:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2942
		{
			unimplemented()
		}
	case 481:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2943
		{
			unimplemented()
		}
	case 482:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2944
		{
			unimplemented()
		}
	case 483:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2945
		{
			unimplemented()
		}
	case 484:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2946
		{
		}
	case 485:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2949
		{
			unimplemented()
		}
	case 486:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2950
		{
			unimplemented()
		}
	case 488:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2974
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2978
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2981
		{
			unimplemented()
		}
	case 491:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2982
		{
			unimplemented()
		}
	case 492:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2991
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2995
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2999
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3003
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3007
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3011
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3015
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3019
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3023
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3027
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3031
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3035
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3039
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3043
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3047
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3051
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3055
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3059
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3063
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3067
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3071
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3075
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3079
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3083
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3087
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3091
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3095
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3099
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3103
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3107
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3111
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3115
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3118
		{
			unimplemented()
		}
	case 525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3120
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3124
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3128
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3132
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3136
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3140
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3144
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3148
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3152
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3156
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3160
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3164
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3168
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3172
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3176
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3180
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3197
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3201
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3205
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3209
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3213
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3217
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3221
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3225
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3229
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3233
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3237
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3241
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3245
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3249
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3253
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3257
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3261
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3265
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3269
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3273
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3277
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3281
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3285
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3289
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3293
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3297
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3301
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3305
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3317
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 572:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3322
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3326
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3332
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3336
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3340
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3346
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 580:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3350
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 581:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3354
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 582:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3362
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname()}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3366
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3369
		{
			unimplemented()
		}
	case 585:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3370
		{
			unimplemented()
		}
	case 586:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3372
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Type: All, Exprs: sqlDollar[4].union.exprs()}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3376
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Type: Distinct, Exprs: sqlDollar[4].union.exprs()}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3380
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Exprs: Exprs{StarExpr()}}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3393
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 590:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3397
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 591:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3406
		{
			unimplemented()
		}
	case 592:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3407
		{
			unimplemented()
		}
	case 593:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3411
		{
			unimplemented()
		}
	case 594:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3413
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3417
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3421
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3425
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3428
		{
			unimplemented()
		}
	case 599:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3429
		{
			unimplemented()
		}
	case 600:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3430
		{
			unimplemented()
		}
	case 601:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3431
		{
			unimplemented()
		}
	case 602:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3433
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3437
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3441
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3445
		{
			sqlVAL.union.val = &OverlayExpr{FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3449
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "STRPOS"}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3453
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3456
		{
			unimplemented()
		}
	case 609:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3458
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3462
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "LTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3466
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "RTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3470
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3474
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3478
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3482
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3486
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3490
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3494
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3500
		{
			unimplemented()
		}
	case 620:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3501
		{
		}
	case 621:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3504
		{
			unimplemented()
		}
	case 622:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3505
		{
		}
	case 623:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3509
		{
			unimplemented()
		}
	case 624:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3510
		{
		}
	case 625:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3513
		{
			unimplemented()
		}
	case 626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3514
		{
			unimplemented()
		}
	case 627:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3517
		{
			unimplemented()
		}
	case 628:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3520
		{
			unimplemented()
		}
	case 629:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3521
		{
			unimplemented()
		}
	case 630:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3522
		{
		}
	case 631:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3526
		{
			unimplemented()
		}
	case 632:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3537
		{
			unimplemented()
		}
	case 633:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3538
		{
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3541
		{
			unimplemented()
		}
	case 635:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3542
		{
		}
	case 636:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3550
		{
			unimplemented()
		}
	case 637:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3551
		{
			unimplemented()
		}
	case 638:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3552
		{
		}
	case 639:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3555
		{
			unimplemented()
		}
	case 640:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3556
		{
			unimplemented()
		}
	case 641:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3562
		{
			unimplemented()
		}
	case 642:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3563
		{
			unimplemented()
		}
	case 643:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3564
		{
			unimplemented()
		}
	case 644:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3565
		{
			unimplemented()
		}
	case 645:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3566
		{
			unimplemented()
		}
	case 646:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3577
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3581
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3585
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3591
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3595
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3601
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3642
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3646
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 654:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3652
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3656
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3662
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3666
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3670
		{
			sqlVAL.union.val = &Array{nil}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3676
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3680
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 661:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3686
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3708
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3712
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3718
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 672:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3725
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3729
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3746
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3750
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3754
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3758
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3762
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 679:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3766
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 680:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3772
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 681:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3778
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3784
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 683:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3788
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 684:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3792
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 685:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3798
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3802
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3813
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3820
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3824
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 690:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3830
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3836
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 692:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3840
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 694:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3847
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 695:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3853
		{
			sqlVAL.union.val = sqlDollar[1].union.indirectElem()
		}
	case 696:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3857
		{
			sqlVAL.union.val = sqlDollar[1].union.indirectElem()
		}
	case 697:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3861
		{
			sqlVAL.union.val = &ArrayIndirection{Begin: sqlDollar[2].union.expr()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3865
		{
			sqlVAL.union.val = &ArrayIndirection{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr()}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3871
		{
			sqlVAL.union.val = NameIndirection(sqlDollar[2].str)
		}
	case 700:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3877
		{
			sqlVAL.union.val = qualifiedStar
		}
	case 701:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3883
		{
			sqlVAL.union.val = Indirection{sqlDollar[1].union.indirectElem()}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3887
		{
			sqlVAL.union.val = append(sqlDollar[1].union.indirect(), sqlDollar[2].union.indirectElem())
		}
	case 703:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3892
		{
		}
	case 704:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3893
		{
		}
	case 706:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3902
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3908
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3912
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 709:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3921
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 710:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3927
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3931
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 712:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3937
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3946
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3950
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3954
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 716:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3962
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3966
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 718:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3972
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3976
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 720:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3982
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3986
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 722:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3997
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4001
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4007
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.qname(), Index: Name(sqlDollar[3].str)}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4018
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4022
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: Indirection{sqlDollar[2].union.indirectElem()}}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4026
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: Indirection{sqlDollar[2].union.indirectElem()}}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4030
		{
			sqlVAL.union.val = &QualifiedName{Indirect: Indirection{unqualifiedStar}}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4036
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4040
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 731:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4046
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 732:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4049
		{
		}
	case 733:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4059
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4063
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4070
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 736:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4074
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 737:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4078
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4082
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4085
		{
			unimplemented()
		}
	case 740:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4087
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4091
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4095
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[5].str}, Type: sqlDollar[1].union.colType()}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4099
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 744:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4103
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 745:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4107
		{
			sqlVAL.union.val = DNull
		}
	case 747:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4114
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 748:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4118
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4140
		{
			sqlVAL.str = ""
		}
	case 754:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4146
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 755:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4150
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
