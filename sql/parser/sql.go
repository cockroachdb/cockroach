// Code generated by goyacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"go/constant"
	"go/token"

	"github.com/pkg/errors"

	"github.com/cockroachdb/cockroach/sql/privilege"
	"github.com/cockroachdb/cockroach/util"
)

var errUnimplemented = errors.New("unimplemented")

func unimplemented() {
	panic(errUnimplemented)
}

func unimplementedWithIssue(issue int) {
	panic(util.UnimplementedWithIssueErrorf(issue, ""))
}

//line sql.y:44

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in two forms, depending on the
// type of the value being accessed. Values and pointers are directly
// type asserted from the empty interface, meaning that they will panic
// if the type assertion is incorrect. Interfaces are handled differently
// because a nil instance of an interface inserted into the empty interface
// becomes a nil instance of the empty interface and therefore will fail a
// direct type assertion. Instead, a guarded type assertion must be used,
// which returns nil if the type assertion fails.
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	return u.val.(*StrVal)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionName() FunctionName {
	return u.val.(FunctionName)
}
func (u *sqlSymUnion) normalizableFunctionName() NormalizableFunctionName {
	return NormalizableFunctionName{u.val.(FunctionName)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retExprs() ReturningExprs {
	return ReturningExprs(u.val.(SelectExprs))
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}

//line sql.y:288
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BEGIN = 57376
const BETWEEN = 57377
const BIGINT = 57378
const BIGSERIAL = 57379
const BIT = 57380
const BLOB = 57381
const BOOL = 57382
const BOOLEAN = 57383
const BOTH = 57384
const BY = 57385
const BYTEA = 57386
const BYTES = 57387
const CASCADE = 57388
const CASE = 57389
const CAST = 57390
const CHAR = 57391
const CHARACTER = 57392
const CHARACTERISTICS = 57393
const CHECK = 57394
const COALESCE = 57395
const COLLATE = 57396
const COLLATION = 57397
const COLUMN = 57398
const COLUMNS = 57399
const COMMIT = 57400
const COMMITTED = 57401
const CONCAT = 57402
const CONFLICT = 57403
const CONSTRAINT = 57404
const CONSTRAINTS = 57405
const COPY = 57406
const COVERING = 57407
const CREATE = 57408
const CROSS = 57409
const CUBE = 57410
const CURRENT = 57411
const CURRENT_CATALOG = 57412
const CURRENT_DATE = 57413
const CURRENT_ROLE = 57414
const CURRENT_TIME = 57415
const CURRENT_TIMESTAMP = 57416
const CURRENT_USER = 57417
const CYCLE = 57418
const DATA = 57419
const DATABASE = 57420
const DATABASES = 57421
const DATE = 57422
const DAY = 57423
const DEC = 57424
const DECIMAL = 57425
const DEFAULT = 57426
const DEALLOCATE = 57427
const DEFERRABLE = 57428
const DELETE = 57429
const DESC = 57430
const DISTINCT = 57431
const DO = 57432
const DOUBLE = 57433
const DROP = 57434
const ELSE = 57435
const ENCODING = 57436
const END = 57437
const ESCAPE = 57438
const EXCEPT = 57439
const EXISTS = 57440
const EXECUTE = 57441
const EXPLAIN = 57442
const EXTRACT = 57443
const EXTRACT_DURATION = 57444
const FALSE = 57445
const FAMILY = 57446
const FETCH = 57447
const FILTER = 57448
const FIRST = 57449
const FLOAT = 57450
const FLOORDIV = 57451
const FOLLOWING = 57452
const FOR = 57453
const FORCE_INDEX = 57454
const FOREIGN = 57455
const FROM = 57456
const FULL = 57457
const GRANT = 57458
const GRANTS = 57459
const GREATEST = 57460
const GROUP = 57461
const GROUPING = 57462
const HAVING = 57463
const HELP = 57464
const HIGH = 57465
const HOUR = 57466
const IF = 57467
const IFNULL = 57468
const ILIKE = 57469
const IN = 57470
const INTERLEAVE = 57471
const INDEX = 57472
const INDEXES = 57473
const INITIALLY = 57474
const INNER = 57475
const INSERT = 57476
const INT = 57477
const INT8 = 57478
const INT64 = 57479
const INTEGER = 57480
const INTERSECT = 57481
const INTERVAL = 57482
const INTO = 57483
const IS = 57484
const ISOLATION = 57485
const JOIN = 57486
const KEY = 57487
const KEYS = 57488
const LATERAL = 57489
const LEADING = 57490
const LEAST = 57491
const LEFT = 57492
const LEVEL = 57493
const LIKE = 57494
const LIMIT = 57495
const LOCAL = 57496
const LOCALTIME = 57497
const LOCALTIMESTAMP = 57498
const LOW = 57499
const LSHIFT = 57500
const MATCH = 57501
const MINUTE = 57502
const MONTH = 57503
const NAME = 57504
const NAMES = 57505
const NATURAL = 57506
const NEXT = 57507
const NO = 57508
const NO_INDEX_JOIN = 57509
const NORMAL = 57510
const NOT = 57511
const NOTHING = 57512
const NULL = 57513
const NULLIF = 57514
const NULLS = 57515
const NUMERIC = 57516
const OF = 57517
const OFF = 57518
const OFFSET = 57519
const ON = 57520
const ONLY = 57521
const OR = 57522
const ORDER = 57523
const ORDINALITY = 57524
const OUT = 57525
const OUTER = 57526
const OVER = 57527
const OVERLAPS = 57528
const OVERLAY = 57529
const PARENT = 57530
const PARTIAL = 57531
const PARTITION = 57532
const PASSWORD = 57533
const PLACING = 57534
const POSITION = 57535
const PRECEDING = 57536
const PRECISION = 57537
const PREPARE = 57538
const PRIMARY = 57539
const PRIORITY = 57540
const RANGE = 57541
const READ = 57542
const REAL = 57543
const RECURSIVE = 57544
const REF = 57545
const REFERENCES = 57546
const RENAME = 57547
const REPEATABLE = 57548
const RELEASE = 57549
const RESTRICT = 57550
const RETURNING = 57551
const REVOKE = 57552
const RIGHT = 57553
const ROLLBACK = 57554
const ROLLUP = 57555
const ROW = 57556
const ROWS = 57557
const RSHIFT = 57558
const SAVEPOINT = 57559
const SEARCH = 57560
const SECOND = 57561
const SELECT = 57562
const SERIAL = 57563
const SERIALIZABLE = 57564
const SESSION = 57565
const SESSION_USER = 57566
const SET = 57567
const SHOW = 57568
const SIMILAR = 57569
const SIMPLE = 57570
const SMALLINT = 57571
const SMALLSERIAL = 57572
const SNAPSHOT = 57573
const SOME = 57574
const SPLIT = 57575
const SQL = 57576
const START = 57577
const STDIN = 57578
const STRICT = 57579
const STRING = 57580
const STORING = 57581
const SUBSTRING = 57582
const SYMMETRIC = 57583
const SYSTEM = 57584
const TABLE = 57585
const TABLES = 57586
const TEXT = 57587
const THEN = 57588
const TIME = 57589
const TIMESTAMP = 57590
const TIMESTAMPTZ = 57591
const TO = 57592
const TRAILING = 57593
const TRANSACTION = 57594
const TREAT = 57595
const TRIM = 57596
const TRUE = 57597
const TRUNCATE = 57598
const TYPE = 57599
const UNBOUNDED = 57600
const UNCOMMITTED = 57601
const UNION = 57602
const UNIQUE = 57603
const UNKNOWN = 57604
const UPDATE = 57605
const UPSERT = 57606
const USER = 57607
const USING = 57608
const VALID = 57609
const VALIDATE = 57610
const VALUE = 57611
const VALUES = 57612
const VARCHAR = 57613
const VARIADIC = 57614
const VIEW = 57615
const VARYING = 57616
const WHEN = 57617
const WHERE = 57618
const WINDOW = 57619
const WITH = 57620
const WITHIN = 57621
const WITHOUT = 57622
const YEAR = 57623
const ZONE = 57624
const NOT_LA = 57625
const WITH_LA = 57626
const AS_LA = 57627
const POSTFIXOP = 57628
const UMINUS = 57629

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:4857

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 27,
	306, 27,
	-2, 381,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 46,
	1, 354,
	178, 354,
	209, 354,
	304, 354,
	306, 354,
	-2, 364,
	-1, 59,
	1, 357,
	178, 357,
	209, 357,
	304, 357,
	306, 357,
	-2, 363,
	-1, 68,
	1, 27,
	306, 27,
	-2, 381,
	-1, 389,
	1, 174,
	306, 174,
	-2, 883,
	-1, 424,
	153, 391,
	177, 391,
	-2, 360,
	-1, 427,
	153, 390,
	177, 390,
	-2, 358,
	-1, 548,
	153, 390,
	177, 390,
	-2, 361,
	-1, 604,
	303, 821,
	-2, 814,
	-1, 605,
	303, 822,
	-2, 815,
	-1, 611,
	5, 526,
	303, 526,
	-2, 975,
	-1, 635,
	5, 492,
	-2, 949,
	-1, 636,
	5, 520,
	303, 520,
	-2, 951,
	-1, 637,
	5, 500,
	-2, 952,
	-1, 638,
	5, 499,
	-2, 953,
	-1, 639,
	5, 520,
	303, 520,
	-2, 956,
	-1, 640,
	5, 520,
	303, 520,
	-2, 957,
	-1, 641,
	5, 521,
	-2, 960,
	-1, 642,
	5, 486,
	-2, 961,
	-1, 643,
	5, 486,
	-2, 962,
	-1, 644,
	5, 502,
	-2, 966,
	-1, 645,
	5, 487,
	-2, 971,
	-1, 646,
	5, 488,
	-2, 972,
	-1, 647,
	5, 489,
	-2, 973,
	-1, 648,
	5, 490,
	-2, 974,
	-1, 649,
	5, 486,
	-2, 978,
	-1, 650,
	5, 493,
	-2, 983,
	-1, 651,
	5, 491,
	-2, 986,
	-1, 652,
	5, 518,
	303, 518,
	-2, 988,
	-1, 653,
	5, 522,
	-2, 991,
	-1, 654,
	5, 524,
	-2, 992,
	-1, 655,
	5, 517,
	303, 517,
	-2, 996,
	-1, 903,
	97, 364,
	139, 364,
	153, 364,
	177, 364,
	181, 364,
	260, 364,
	-2, 638,
	-1, 911,
	303, 799,
	-2, 788,
	-1, 1113,
	13, 0,
	14, 0,
	15, 0,
	286, 0,
	287, 0,
	288, 0,
	-2, 561,
	-1, 1114,
	13, 0,
	14, 0,
	15, 0,
	286, 0,
	287, 0,
	288, 0,
	-2, 562,
	-1, 1115,
	13, 0,
	14, 0,
	15, 0,
	286, 0,
	287, 0,
	288, 0,
	-2, 563,
	-1, 1119,
	13, 0,
	14, 0,
	15, 0,
	286, 0,
	287, 0,
	288, 0,
	-2, 567,
	-1, 1120,
	13, 0,
	14, 0,
	15, 0,
	286, 0,
	287, 0,
	288, 0,
	-2, 568,
	-1, 1121,
	13, 0,
	14, 0,
	15, 0,
	286, 0,
	287, 0,
	288, 0,
	-2, 569,
	-1, 1124,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	227, 0,
	283, 0,
	-2, 574,
	-1, 1130,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	227, 0,
	283, 0,
	-2, 576,
	-1, 1133,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	227, 0,
	283, 0,
	-2, 581,
	-1, 1134,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	227, 0,
	283, 0,
	-2, 582,
	-1, 1135,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	227, 0,
	283, 0,
	-2, 583,
	-1, 1160,
	186, 710,
	-2, 713,
	-1, 1183,
	114, 726,
	303, 821,
	-2, 814,
	-1, 1184,
	114, 727,
	-2, 945,
	-1, 1185,
	114, 728,
	-2, 881,
	-1, 1186,
	114, 729,
	-2, 854,
	-1, 1187,
	114, 730,
	-2, 869,
	-1, 1188,
	114, 731,
	-2, 880,
	-1, 1189,
	114, 732,
	-2, 915,
	-1, 1336,
	97, 364,
	139, 364,
	153, 364,
	177, 364,
	181, 364,
	260, 364,
	-2, 439,
	-1, 1340,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	227, 0,
	283, 0,
	-2, 575,
	-1, 1341,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	227, 0,
	283, 0,
	-2, 577,
	-1, 1346,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	227, 0,
	283, 0,
	-2, 578,
	-1, 1364,
	186, 709,
	-2, 712,
	-1, 1528,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	227, 0,
	283, 0,
	-2, 579,
	-1, 1533,
	142, 0,
	-2, 593,
	-1, 1541,
	186, 711,
	-2, 714,
	-1, 1575,
	13, 0,
	14, 0,
	15, 0,
	286, 0,
	287, 0,
	288, 0,
	-2, 619,
	-1, 1576,
	13, 0,
	14, 0,
	15, 0,
	286, 0,
	287, 0,
	288, 0,
	-2, 620,
	-1, 1577,
	13, 0,
	14, 0,
	15, 0,
	286, 0,
	287, 0,
	288, 0,
	-2, 621,
	-1, 1581,
	13, 0,
	14, 0,
	15, 0,
	286, 0,
	287, 0,
	288, 0,
	-2, 625,
	-1, 1582,
	13, 0,
	14, 0,
	15, 0,
	286, 0,
	287, 0,
	288, 0,
	-2, 626,
	-1, 1583,
	13, 0,
	14, 0,
	15, 0,
	286, 0,
	287, 0,
	288, 0,
	-2, 627,
	-1, 1687,
	142, 0,
	-2, 594,
	-1, 1690,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	227, 0,
	283, 0,
	-2, 597,
	-1, 1691,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	227, 0,
	283, 0,
	-2, 599,
	-1, 1778,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	227, 0,
	283, 0,
	-2, 598,
	-1, 1779,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	227, 0,
	283, 0,
	-2, 600,
	-1, 1786,
	142, 0,
	-2, 628,
	-1, 1831,
	142, 0,
	-2, 629,
	-1, 1883,
	35, 0,
	127, 0,
	152, 0,
	227, 0,
	283, 0,
	-2, 948,
}

const sqlNprod = 1091
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 25267

var sqlAct = [...]int{

	605, 1882, 1863, 1495, 1905, 1837, 1730, 1865, 989, 1864,
	1881, 997, 1085, 1552, 826, 1766, 1679, 1753, 716, 1094,
	1653, 428, 45, 76, 1652, 1612, 462, 1673, 449, 75,
	1261, 832, 390, 1333, 260, 906, 656, 1065, 1421, 262,
	75, 75, 75, 603, 1061, 75, 1666, 1060, 75, 1507,
	1420, 717, 1367, 602, 1332, 595, 75, 1323, 908, 1064,
	835, 671, 263, 75, 75, 1517, 1029, 75, 668, 998,
	75, 75, 75, 1317, 1093, 264, 967, 1170, 958, 1209,
	1143, 1146, 1097, 26, 433, 850, 780, 1013, 567, 435,
	58, 15, 1022, 534, 673, 1055, 764, 687, 701, 1180,
	7, 577, 535, 463, 1095, 568, 464, 761, 943, 461,
	791, 483, 474, 427, 476, 9, 8, 991, 19, 1068,
	551, 256, 856, 438, 477, 939, 6, 58, 552, 255,
	59, 4, 249, 760, 782, 60, 377, 778, 257, 694,
	368, 1026, 550, 436, 470, 387, 555, 533, 259, 1773,
	703, 703, 1774, 258, 253, 990, 251, 380, 58, 1897,
	432, 259, 1089, 703, 252, 994, 432, 1879, 1331, 254,
	1752, 446, 859, 860, 452, 1871, 1861, 1856, 1089, 1019,
	1089, 1273, 858, 1362, 1027, 455, 1272, 1833, 1363, 425,
	1019, 57, 415, 683, 424, 862, 859, 860, 1827, 1817,
	1807, 1089, 1752, 1089, 57, 1780, 64, 440, 1019, 859,
	860, 1777, 1763, 1361, 1089, 1752, 861, 36, 1032, 862,
	1028, 1025, 1032, 1760, 1751, 37, 1089, 1752, 1321, 66,
	36, 571, 862, 1735, 1734, 1821, 1089, 1089, 37, 1712,
	861, 1692, 1032, 857, 1032, 75, 75, 75, 75, 75,
	1320, 486, 1689, 861, 1639, 1019, 67, 1032, 1638, 1624,
	1537, 1032, 1089, 1032, 62, 1481, 1475, 1755, 986, 986,
	63, 867, 1438, 433, 487, 1439, 1320, 1588, 1540, 1030,
	479, 479, 1436, 1299, 956, 1032, 1366, 488, 1435, 61,
	1302, 1032, 1032, 1434, 1364, 867, 1032, 1032, 1089, 1034,
	1154, 64, 1391, 1392, 1301, 1084, 1090, 1089, 867, 1089,
	1049, 1041, 704, 704, 1032, 1031, 1018, 563, 1032, 1019,
	877, 821, 820, 985, 66, 704, 986, 955, 772, 771,
	954, 1391, 1392, 711, 498, 445, 712, 68, 597, 465,
	466, 1024, 562, 466, 877, 64, 465, 805, 64, 471,
	466, 67, 1406, 518, 1880, 1877, 1870, 1828, 64, 62,
	1761, 484, 1717, 1023, 75, 63, 859, 860, 66, 1713,
	1705, 66, 1304, 480, 1272, 857, 1704, 1703, 878, 75,
	1698, 66, 75, 75, 993, 1644, 1697, 1696, 1650, 862,
	1603, 1598, 1597, 1596, 1543, 67, 1526, 1506, 67, 1485,
	1443, 1397, 878, 62, 1440, 1428, 1419, 1390, 67, 63,
	861, 707, 702, 1387, 1386, 75, 62, 75, 1384, 75,
	75, 75, 63, 75, 824, 1372, 1371, 1300, 61, 831,
	1397, 61, 664, 1226, 1177, 1176, 562, 561, 75, 914,
	459, 250, 1391, 1392, 1554, 1847, 549, 1151, 1820, 75,
	1407, 541, 1799, 544, 1797, 871, 863, 864, 865, 866,
	868, 75, 888, 1788, 1770, 867, 1758, 262, 75, 75,
	75, 1749, 75, 1727, 663, 1710, 1682, 548, 506, 1407,
	863, 864, 865, 866, 868, 1660, 888, 507, 689, 1483,
	263, 75, 1532, 863, 864, 865, 866, 868, 75, 888,
	75, 691, 1649, 264, 1391, 1392, 859, 860, 1408, 1525,
	1643, 486, 486, 1503, 465, 1501, 909, 1500, 466, 262,
	75, 540, 75, 75, 75, 75, 75, 75, 75, 862,
	1498, 662, 75, 75, 487, 487, 1152, 1408, 75, 501,
	503, 1397, 263, 1455, 1454, 1240, 75, 488, 488, 1418,
	861, 538, 1380, 806, 1379, 264, 1358, 536, 1354, 830,
	1148, 1288, 1253, 1252, 75, 1240, 425, 75, 1239, 1219,
	1175, 424, 471, 1088, 944, 947, 706, 558, 559, 709,
	951, 564, 1402, 1399, 1400, 1401, 1393, 1394, 1395, 1396,
	1398, 937, 578, 859, 860, 713, 936, 935, 934, 933,
	932, 931, 930, 1397, 433, 929, 928, 927, 926, 696,
	925, 854, 693, 924, 1401, 1393, 1394, 1395, 1396, 1398,
	923, 72, 922, 921, 1282, 912, 911, 910, 61, 460,
	825, 450, 566, 768, 504, 494, 492, 861, 823, 767,
	1391, 1392, 1648, 1281, 679, 512, 859, 860, 802, 795,
	1775, 1647, 865, 866, 868, 810, 888, 1274, 1079, 447,
	949, 1442, 454, 457, 950, 807, 1441, 75, 811, 812,
	813, 814, 815, 840, 822, 75, 1339, 818, 819, 75,
	839, 528, 513, 75, 75, 919, 425, 852, 829, 425,
	425, 846, 838, 1667, 847, 848, 990, 1555, 75, 1171,
	75, 75, 422, 75, 1375, 590, 75, 664, 75, 75,
	245, 75, 961, 486, 940, 1268, 1449, 1843, 531, 1893,
	1295, 1632, 674, 1040, 675, 1894, 1393, 1394, 1395, 1396,
	1398, 241, 408, 674, 73, 675, 487, 915, 409, 1397,
	1007, 479, 414, 479, 413, 360, 361, 362, 532, 488,
	379, 1743, 945, 391, 972, 974, 800, 799, 948, 793,
	788, 379, 246, 75, 75, 941, 942, 1806, 439, 439,
	1742, 1469, 73, 1446, 1445, 73, 73, 458, 242, 431,
	1342, 510, 1287, 977, 1482, 952, 845, 1195, 1407, 1286,
	1395, 1396, 1398, 676, 964, 256, 888, 981, 1285, 1016,
	1284, 58, 1131, 255, 676, 58, 262, 1015, 1036, 1033,
	75, 1026, 257, 992, 996, 992, 1017, 1005, 1006, 511,
	983, 430, 980, 484, 1011, 75, 75, 258, 253, 263,
	251, 723, 75, 1008, 1014, 1009, 803, 447, 252, 457,
	1054, 537, 264, 254, 1010, 674, 1408, 675, 968, 945,
	960, 948, 801, 1768, 1027, 960, 1466, 1223, 490, 75,
	1805, 959, 75, 432, 1222, 1091, 1043, 418, 1102, 1037,
	1035, 417, 1038, 1670, 1042, 247, 1145, 1470, 366, 1257,
	942, 941, 1732, 888, 685, 423, 1171, 71, 1845, 419,
	1028, 1025, 752, 1145, 1101, 697, 262, 420, 1457, 1030,
	1902, 1893, 1858, 1913, 1487, 248, 804, 244, 243, 971,
	1800, 1099, 1100, 681, 1262, 1058, 676, 1251, 1859, 263,
	1294, 1255, 369, 1057, 1393, 1394, 1395, 1396, 1398, 1059,
	1149, 1322, 264, 689, 859, 860, 888, 1473, 689, 70,
	1488, 680, 429, 374, 1270, 1867, 1490, 684, 370, 1030,
	73, 472, 73, 391, 391, 1082, 1083, 862, 75, 75,
	75, 1225, 369, 1092, 75, 703, 1296, 75, 1158, 677,
	509, 1266, 371, 75, 75, 75, 75, 75, 861, 1326,
	677, 75, 508, 374, 75, 938, 1075, 75, 370, 902,
	373, 1784, 1620, 970, 75, 1750, 75, 1329, 1378, 1030,
	1518, 1233, 1262, 75, 1150, 1030, 432, 1167, 1324, 447,
	1901, 1024, 371, 75, 1327, 1866, 433, 1237, 1892, 1868,
	1890, 1128, 1264, 1227, 1621, 1908, 1190, 1665, 1325, 672,
	373, 1458, 1045, 867, 75, 75, 1077, 509, 1047, 1250,
	75, 665, 1675, 553, 1464, 521, 794, 789, 499, 957,
	486, 1228, 69, 688, 1048, 529, 1733, 969, 1869, 497,
	447, 695, 695, 1046, 554, 1914, 1708, 554, 1511, 495,
	75, 1280, 75, 487, 75, 1328, 372, 1584, 75, 1351,
	1919, 75, 877, 447, 500, 1344, 488, 391, 391, 1737,
	75, 1267, 677, 1349, 1900, 658, 1736, 75, 657, 75,
	1275, 1303, 1144, 1305, 1725, 1276, 1307, 1277, 1278, 1616,
	530, 1617, 1628, 1126, 1129, 1237, 372, 1279, 1338, 375,
	379, 433, 73, 1794, 391, 543, 391, 704, 546, 1290,
	1674, 1291, 1448, 1236, 1293, 1292, 1297, 1619, 1125, 1232,
	878, 1078, 1631, 439, 1622, 1906, 1298, 837, 777, 1630,
	1326, 827, 1709, 1680, 73, 1486, 1838, 1585, 553, 375,
	1196, 1347, 817, 1586, 773, 1352, 73, 1918, 1329, 1726,
	1314, 433, 1016, 73, 73, 73, 1315, 698, 58, 1516,
	1015, 1337, 775, 1242, 1365, 1327, 1676, 1907, 1241, 1017,
	1513, 1306, 1512, 776, 508, 1309, 73, 1627, 723, 723,
	469, 1618, 468, 765, 1909, 765, 430, 1014, 1681, 1343,
	1212, 1345, 545, 1127, 872, 869, 870, 871, 863, 864,
	865, 866, 868, 433, 888, 391, 1496, 765, 391, 391,
	391, 391, 391, 816, 1629, 1651, 1723, 391, 391, 1508,
	1318, 75, 610, 379, 1174, 1348, 1328, 1374, 1787, 1707,
	1422, 834, 1350, 1531, 1385, 1353, 1258, 1724, 1039, 953,
	984, 527, 526, 525, 524, 523, 522, 519, 467, 439,
	1423, 447, 855, 75, 75, 457, 920, 809, 1173, 1862,
	1477, 660, 1835, 1609, 1462, 1453, 1425, 1426, 1427, 1460,
	1001, 1447, 1311, 1080, 1073, 457, 1012, 710, 457, 1444,
	75, 708, 705, 75, 723, 75, 700, 682, 678, 1549,
	836, 1744, 75, 1086, 556, 1451, 1894, 515, 797, 443,
	1746, 75, 1502, 960, 976, 75, 3, 960, 1755, 975,
	1465, 75, 262, 973, 1474, 75, 1499, 75, 1802, 1830,
	1510, 1250, 1478, 1480, 1514, 1461, 1141, 1463, 1479, 1509,
	560, 1472, 1489, 1491, 1492, 263, 365, 979, 723, 1476,
	1139, 978, 1497, 1822, 1663, 407, 1522, 1076, 264, 1072,
	1087, 995, 73, 1534, 1505, 1196, 1196, 853, 769, 75,
	965, 557, 715, 1515, 73, 1521, 444, 1021, 73, 982,
	1545, 1546, 1547, 1519, 1520, 451, 516, 1916, 1917, 1604,
	376, 1493, 723, 73, 1484, 1003, 1004, 759, 73, 1322,
	1437, 73, 1283, 391, 391, 1224, 391, 447, 410, 411,
	1391, 1392, 1542, 859, 860, 1221, 1137, 1220, 1136, 1196,
	1196, 1196, 1142, 1556, 1558, 1559, 1051, 1050, 1168, 1561,
	1052, 1823, 1694, 1563, 1564, 1548, 75, 75, 75, 1312,
	1308, 447, 659, 1053, 913, 75, 75, 1326, 416, 1591,
	1731, 75, 367, 75, 607, 75, 75, 75, 765, 855,
	75, 808, 1592, 520, 1857, 1329, 1595, 1700, 1377, 1765,
	1783, 1172, 918, 35, 828, 1608, 1324, 1655, 583, 1610,
	1450, 1067, 1327, 1066, 1605, 265, 798, 787, 606, 1625,
	1626, 75, 75, 781, 790, 1181, 1325, 661, 1646, 608,
	720, 609, 1138, 75, 75, 1056, 721, 75, 946, 1140,
	596, 718, 482, 1319, 999, 1169, 75, 75, 1664, 1373,
	73, 1063, 1671, 1672, 916, 582, 1677, 855, 588, 587,
	1156, 491, 1658, 579, 1678, 1661, 1330, 1658, 48, 1662,
	1229, 1688, 1657, 1328, 1659, 75, 505, 1657, 385, 1659,
	1684, 386, 1641, 1265, 73, 1642, 1081, 391, 841, 1459,
	1683, 421, 1388, 493, 1202, 1196, 1196, 1194, 1191, 1259,
	539, 667, 1000, 517, 1271, 1020, 688, 565, 746, 849,
	442, 745, 441, 1062, 1645, 688, 514, 774, 1044, 412,
	1706, 1796, 1074, 1235, 1912, 447, 1801, 1456, 1842, 65,
	75, 25, 75, 23, 75, 75, 22, 21, 20, 18,
	17, 16, 24, 75, 14, 1196, 1196, 1196, 1196, 1196,
	1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
	1196, 1196, 1196, 1196, 75, 1196, 1721, 1719, 13, 12,
	11, 10, 1718, 34, 33, 32, 31, 30, 29, 5,
	2, 1, 0, 73, 1230, 1231, 75, 0, 75, 965,
	1310, 0, 1238, 1756, 0, 0, 1747, 75, 1243, 1244,
	1246, 1248, 1249, 75, 1739, 1759, 1254, 0, 1745, 1256,
	1754, 447, 73, 723, 0, 0, 1772, 0, 0, 73,
	1769, 1269, 0, 0, 1658, 758, 0, 0, 73, 0,
	0, 0, 0, 0, 1657, 770, 1659, 1782, 73, 0,
	0, 723, 723, 0, 75, 0, 0, 1776, 0, 1789,
	723, 723, 1740, 1741, 1798, 722, 0, 0, 0, 1056,
	765, 0, 0, 75, 75, 1056, 1792, 75, 0, 0,
	0, 75, 0, 0, 0, 1793, 75, 0, 1810, 0,
	0, 0, 0, 723, 0, 1818, 1812, 0, 0, 1814,
	1819, 75, 433, 1811, 748, 834, 262, 834, 0, 391,
	0, 689, 1762, 73, 0, 0, 1313, 0, 1813, 0,
	1825, 0, 905, 0, 0, 1316, 1658, 0, 75, 263,
	75, 75, 1335, 75, 73, 1829, 1657, 1832, 1659, 0,
	1826, 0, 264, 0, 1848, 1824, 1846, 0, 0, 0,
	0, 0, 75, 1852, 1851, 0, 0, 0, 0, 0,
	0, 0, 0, 1849, 0, 1844, 1855, 1854, 1850, 0,
	0, 0, 0, 0, 1840, 1853, 75, 0, 75, 569,
	569, 0, 0, 1196, 0, 1878, 1872, 1874, 669, 0,
	0, 0, 1876, 75, 1658, 1001, 447, 0, 0, 0,
	1887, 723, 1889, 690, 1657, 1891, 1659, 0, 1895, 0,
	0, 0, 0, 1896, 0, 1899, 1898, 0, 0, 0,
	0, 0, 1875, 0, 0, 0, 0, 0, 1911, 1910,
	0, 0, 1915, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 447, 0, 0, 0, 447, 1920, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1355, 1356, 0, 0, 0, 0, 0, 0, 1196,
	0, 0, 0, 0, 0, 747, 855, 0, 0, 0,
	0, 0, 859, 860, 0, 746, 746, 719, 745, 745,
	0, 842, 844, 0, 0, 0, 0, 0, 851, 0,
	0, 723, 0, 0, 0, 862, 0, 0, 73, 73,
	897, 898, 899, 900, 901, 1414, 1415, 1416, 0, 904,
	0, 0, 0, 0, 0, 0, 861, 0, 0, 0,
	584, 46, 0, 0, 0, 1494, 0, 0, 965, 917,
	834, 1620, 0, 1613, 0, 0, 0, 1504, 0, 1196,
	0, 1611, 0, 0, 0, 1615, 73, 0, 0, 0,
	73, 0, 0, 0, 0, 0, 1335, 0, 46, 0,
	1524, 0, 1335, 1621, 0, 0, 0, 0, 0, 723,
	0, 867, 0, 0, 0, 0, 0, 1635, 0, 426,
	0, 746, 434, 1614, 745, 0, 0, 0, 0, 46,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1553, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	877, 0, 722, 722, 0, 447, 447, 0, 0, 447,
	0, 0, 0, 0, 0, 746, 0, 0, 745, 0,
	1155, 1159, 0, 1162, 0, 0, 0, 723, 1616, 0,
	1617, 1529, 1530, 0, 0, 0, 1182, 1182, 1193, 0,
	1204, 748, 748, 0, 0, 0, 1216, 1217, 1218, 0,
	0, 1606, 1607, 965, 0, 0, 1619, 0, 878, 746,
	855, 855, 745, 1622, 0, 0, 1633, 0, 1634, 0,
	73, 1636, 1637, 0, 0, 1640, 0, 0, 0, 0,
	0, 1565, 1566, 1567, 1568, 1569, 1570, 1571, 1572, 1573,
	1574, 1575, 1576, 1577, 1578, 1579, 1580, 1581, 1582, 1583,
	0, 1587, 0, 0, 1654, 0, 855, 1063, 722, 1654,
	0, 0, 0, 0, 0, 1729, 0, 0, 73, 73,
	1618, 0, 73, 0, 0, 0, 0, 0, 0, 0,
	0, 855, 1335, 869, 870, 871, 863, 864, 865, 866,
	868, 0, 888, 0, 0, 0, 0, 748, 0, 0,
	0, 434, 0, 0, 0, 0, 0, 0, 1764, 0,
	1701, 0, 722, 0, 0, 569, 0, 0, 0, 447,
	0, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111,
	1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121,
	1122, 1123, 1124, 0, 1130, 0, 1132, 1133, 1134, 1135,
	0, 748, 0, 0, 0, 0, 722, 0, 0, 0,
	0, 0, 747, 747, 0, 965, 0, 1720, 0, 391,
	1722, 0, 0, 0, 719, 719, 0, 0, 73, 0,
	0, 1178, 1179, 0, 0, 1192, 0, 1203, 1205, 1210,
	1213, 1214, 1215, 0, 0, 748, 0, 0, 0, 855,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1357,
	0, 0, 669, 1359, 0, 0, 1654, 1391, 1392, 0,
	0, 73, 0, 1767, 0, 1369, 1370, 0, 0, 0,
	0, 0, 73, 0, 0, 0, 0, 0, 855, 0,
	0, 0, 0, 1841, 0, 0, 1260, 0, 1263, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1728,
	0, 1417, 0, 0, 0, 0, 0, 0, 747, 0,
	0, 0, 1430, 0, 0, 0, 0, 0, 0, 834,
	719, 0, 0, 0, 0, 0, 426, 0, 1001, 0,
	1289, 0, 0, 0, 0, 0, 0, 0, 1803, 1804,
	746, 0, 1808, 745, 0, 0, 1809, 0, 1654, 0,
	0, 391, 0, 1467, 1468, 0, 1397, 0, 0, 0,
	0, 0, 747, 0, 0, 0, 855, 0, 746, 746,
	0, 745, 745, 0, 719, 0, 0, 746, 746, 0,
	745, 745, 851, 0, 0, 1786, 0, 0, 0, 0,
	0, 0, 0, 1839, 0, 855, 73, 0, 391, 0,
	0, 0, 0, 0, 0, 1407, 747, 0, 0, 392,
	746, 0, 0, 745, 0, 0, 1654, 1767, 719, 0,
	0, 0, 0, 1340, 1341, 0, 0, 405, 0, 1346,
	1391, 1392, 0, 1409, 1410, 1411, 0, 0, 0, 0,
	0, 73, 0, 855, 0, 0, 426, 0, 0, 426,
	426, 0, 1360, 0, 0, 0, 0, 0, 1888, 1538,
	0, 1368, 394, 1408, 0, 1831, 0, 399, 400, 1376,
	0, 406, 903, 1381, 1391, 1392, 907, 0, 0, 0,
	1406, 0, 0, 393, 395, 0, 0, 722, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 904, 0,
	0, 0, 0, 0, 1210, 1210, 1210, 0, 0, 0,
	0, 0, 0, 0, 0, 722, 722, 0, 746, 1589,
	0, 745, 396, 0, 722, 722, 748, 0, 0, 1397,
	1599, 0, 0, 0, 0, 397, 398, 1452, 1399, 1400,
	1401, 1393, 1394, 1395, 1396, 1398, 0, 0, 1413, 0,
	0, 401, 0, 0, 748, 748, 0, 722, 0, 0,
	569, 0, 1412, 748, 748, 0, 0, 0, 569, 0,
	0, 0, 669, 1397, 0, 0, 0, 0, 1407, 0,
	859, 860, 0, 0, 0, 46, 0, 46, 0, 0,
	0, 0, 0, 0, 0, 0, 748, 0, 0, 0,
	0, 0, 46, 862, 0, 0, 46, 0, 0, 0,
	1669, 0, 0, 0, 0, 0, 0, 0, 746, 0,
	0, 745, 1407, 0, 861, 0, 0, 0, 0, 0,
	876, 0, 0, 0, 0, 0, 1408, 1527, 0, 0,
	1528, 0, 0, 0, 0, 0, 0, 0, 0, 402,
	0, 1533, 403, 0, 0, 0, 0, 404, 0, 0,
	0, 0, 0, 0, 1289, 722, 0, 0, 0, 0,
	0, 0, 0, 1550, 0, 0, 0, 0, 0, 867,
	1408, 0, 0, 1560, 0, 0, 0, 1562, 0, 0,
	0, 0, 0, 0, 0, 0, 746, 747, 0, 745,
	0, 0, 0, 0, 748, 0, 1403, 1404, 1405, 719,
	1402, 1399, 1400, 1401, 1393, 1394, 1395, 1396, 1398, 0,
	1593, 1594, 0, 0, 0, 747, 747, 0, 877, 1600,
	1601, 1602, 0, 0, 747, 747, 0, 719, 719, 0,
	0, 0, 0, 0, 0, 0, 719, 719, 0, 1096,
	0, 0, 0, 0, 1402, 1399, 1400, 1401, 1393, 1394,
	1395, 1396, 1398, 0, 0, 722, 0, 747, 0, 0,
	0, 569, 0, 0, 746, 0, 0, 745, 0, 719,
	0, 0, 0, 0, 0, 1147, 878, 0, 0, 0,
	0, 859, 860, 0, 879, 880, 881, 889, 890, 891,
	0, 0, 0, 0, 748, 0, 1668, 882, 0, 0,
	0, 0, 0, 0, 862, 0, 893, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1687,
	0, 0, 0, 1690, 1691, 861, 0, 0, 1693, 0,
	0, 876, 1695, 722, 0, 0, 0, 0, 0, 1699,
	0, 0, 0, 1702, 0, 0, 0, 0, 0, 1816,
	872, 869, 870, 871, 863, 864, 865, 866, 868, 0,
	888, 0, 0, 0, 0, 747, 0, 0, 0, 0,
	0, 0, 748, 0, 434, 0, 1711, 719, 0, 0,
	867, 0, 859, 860, 0, 879, 880, 881, 889, 890,
	891, 0, 0, 0, 0, 0, 0, 0, 886, 894,
	0, 0, 859, 860, 0, 862, 0, 893, 889, 890,
	891, 722, 0, 892, 0, 0, 0, 0, 1738, 0,
	0, 1860, 0, 884, 0, 862, 861, 893, 0, 877,
	0, 0, 876, 0, 0, 1391, 1392, 0, 1409, 1410,
	1411, 0, 0, 0, 1757, 0, 861, 0, 0, 0,
	748, 883, 876, 46, 0, 0, 0, 46, 0, 0,
	0, 0, 0, 1771, 0, 747, 0, 0, 0, 46,
	0, 0, 0, 1778, 1779, 0, 0, 719, 0, 1336,
	0, 867, 0, 0, 0, 1406, 0, 878, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 887, 886,
	894, 867, 1791, 0, 0, 0, 0, 0, 0, 0,
	1147, 0, 0, 0, 892, 1795, 0, 0, 0, 886,
	894, 0, 0, 0, 884, 0, 0, 0, 0, 903,
	877, 0, 0, 0, 1397, 0, 0, 669, 0, 0,
	0, 0, 0, 747, 884, 0, 0, 0, 0, 0,
	877, 0, 0, 0, 885, 719, 0, 873, 874, 875,
	0, 872, 869, 870, 871, 863, 864, 865, 866, 868,
	0, 888, 0, 987, 0, 0, 0, 0, 0, 0,
	0, 903, 988, 1407, 0, 0, 0, 0, 878, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 887,
	0, 0, 0, 0, 0, 0, 0, 0, 878, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 887,
	0, 747, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1873, 0, 719, 0, 0, 0, 0, 0, 0,
	0, 1408, 0, 0, 0, 0, 1886, 1886, 0, 0,
	0, 0, 0, 0, 1096, 885, 0, 0, 873, 874,
	875, 0, 872, 869, 870, 871, 863, 864, 865, 866,
	868, 1886, 888, 0, 0, 885, 0, 0, 0, 0,
	0, 0, 872, 869, 870, 871, 863, 864, 865, 866,
	868, 0, 888, 0, 0, 0, 0, 0, 0, 0,
	0, 1096, 0, 0, 1886, 1096, 0, 0, 0, 0,
	0, 1403, 1404, 1405, 0, 1402, 1399, 1400, 1401, 1393,
	1394, 1395, 1396, 1398, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 74, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 77, 78, 0, 79, 0, 0, 0, 0, 191,
	0, 1334, 0, 0, 80, 81, 192, 193, 194, 195,
	82, 196, 197, 0, 83, 198, 199, 84, 0, 0,
	200, 201, 202, 0, 203, 0, 0, 0, 85, 86,
	87, 0, 88, 0, 89, 90, 91, 0, 0, 92,
	93, 0, 0, 0, 0, 0, 0, 94, 95, 96,
	97, 204, 98, 205, 206, 0, 99, 0, 100, 0,
	0, 0, 101, 102, 0, 103, 0, 0, 0, 207,
	104, 105, 208, 209, 0, 0, 0, 106, 107, 210,
	0, 108, 0, 109, 0, 0, 46, 0, 110, 211,
	0, 212, 0, 111, 112, 113, 213, 214, 0, 0,
	116, 0, 114, 0, 0, 115, 215, 216, 217, 218,
	0, 219, 0, 0, 117, 0, 118, 119, 0, 0,
	220, 0, 120, 1096, 1096, 121, 0, 1096, 122, 0,
	123, 124, 125, 126, 127, 0, 128, 129, 132, 130,
	0, 131, 0, 221, 133, 222, 134, 135, 0, 0,
	0, 0, 0, 136, 223, 0, 137, 0, 224, 138,
	139, 140, 141, 0, 225, 142, 226, 143, 0, 144,
	145, 146, 227, 147, 148, 0, 150, 151, 149, 152,
	0, 153, 0, 154, 155, 228, 156, 0, 157, 158,
	159, 0, 229, 160, 161, 0, 162, 163, 0, 164,
	230, 231, 165, 0, 171, 166, 167, 168, 170, 232,
	169, 233, 0, 172, 0, 173, 174, 0, 234, 235,
	236, 0, 0, 175, 237, 238, 0, 176, 177, 178,
	179, 0, 0, 180, 181, 182, 0, 0, 183, 184,
	185, 239, 240, 0, 0, 186, 0, 0, 0, 0,
	187, 188, 189, 190, 0, 0, 0, 0, 1748, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 46, 562, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1096, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 261, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	77, 78, 280, 79, 281, 282, 283, 284, 191, 285,
	286, 287, 288, 80, 81, 192, 193, 194, 195, 82,
	196, 197, 289, 83, 198, 199, 84, 290, 291, 200,
	201, 202, 292, 203, 293, 266, 294, 85, 86, 87,
	903, 88, 295, 89, 90, 91, 296, 267, 92, 93,
	297, 298, 299, 300, 301, 302, 94, 95, 96, 97,
	204, 98, 205, 206, 303, 99, 304, 100, 305, 306,
	307, 101, 102, 308, 103, 309, 0, 310, 207, 104,
	105, 208, 209, 311, 312, 313, 106, 107, 210, 0,
	108, 314, 109, 315, 316, 268, 317, 110, 211, 318,
	212, 319, 111, 112, 113, 213, 214, 270, 320, 116,
	321, 114, 322, 269, 115, 215, 216, 217, 218, 323,
	219, 324, 271, 117, 272, 118, 119, 325, 326, 220,
	273, 120, 274, 327, 121, 328, 329, 122, 0, 123,
	124, 125, 126, 127, 275, 128, 129, 132, 130, 330,
	131, 331, 221, 133, 222, 134, 135, 332, 333, 334,
	335, 336, 136, 223, 276, 137, 277, 224, 138, 139,
	140, 141, 337, 225, 142, 226, 143, 338, 144, 145,
	146, 227, 147, 148, 339, 150, 151, 149, 152, 340,
	153, 278, 154, 155, 228, 156, 0, 157, 158, 159,
	341, 229, 160, 161, 342, 162, 163, 279, 164, 230,
	231, 165, 343, 171, 166, 167, 168, 170, 232, 169,
	233, 344, 172, 345, 173, 174, 346, 234, 235, 236,
	347, 348, 175, 237, 238, 349, 176, 177, 178, 179,
	350, 351, 180, 181, 182, 352, 353, 183, 184, 185,
	239, 240, 354, 355, 186, 356, 357, 358, 359, 187,
	188, 189, 190, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 261, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1523,
	77, 78, 280, 79, 281, 282, 283, 284, 191, 285,
	286, 287, 288, 80, 81, 192, 193, 194, 195, 82,
	196, 197, 289, 83, 198, 199, 84, 290, 291, 200,
	201, 202, 292, 203, 293, 266, 294, 85, 86, 87,
	0, 88, 295, 89, 90, 91, 296, 267, 92, 93,
	297, 298, 299, 300, 301, 302, 94, 95, 96, 97,
	204, 98, 205, 206, 303, 99, 304, 100, 305, 306,
	307, 101, 102, 308, 103, 309, 0, 310, 207, 104,
	105, 208, 209, 311, 312, 313, 106, 107, 210, 0,
	108, 314, 109, 315, 316, 268, 317, 110, 211, 318,
	212, 319, 111, 112, 113, 213, 214, 270, 320, 116,
	321, 114, 322, 269, 115, 215, 216, 217, 218, 323,
	219, 324, 271, 117, 272, 118, 119, 325, 326, 220,
	273, 120, 274, 327, 121, 328, 329, 122, 0, 123,
	124, 125, 126, 127, 275, 128, 129, 132, 130, 330,
	131, 331, 221, 133, 222, 134, 135, 332, 333, 334,
	335, 336, 136, 223, 276, 137, 277, 224, 138, 139,
	140, 141, 337, 225, 142, 226, 143, 338, 144, 145,
	146, 227, 147, 148, 339, 150, 151, 149, 152, 340,
	153, 278, 154, 155, 228, 156, 0, 157, 158, 159,
	341, 229, 160, 161, 342, 162, 163, 279, 164, 230,
	231, 165, 343, 171, 166, 167, 168, 170, 232, 169,
	233, 344, 172, 345, 173, 174, 346, 234, 235, 236,
	347, 348, 175, 237, 238, 349, 176, 177, 178, 179,
	350, 351, 180, 181, 182, 352, 353, 183, 184, 185,
	239, 240, 354, 355, 186, 356, 357, 358, 359, 187,
	188, 189, 190, 261, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 692, 0, 0, 77,
	78, 280, 79, 281, 282, 283, 284, 191, 285, 286,
	287, 288, 80, 81, 192, 193, 194, 195, 82, 196,
	197, 289, 83, 198, 199, 84, 290, 291, 200, 201,
	202, 292, 203, 293, 266, 294, 85, 86, 87, 0,
	88, 295, 89, 90, 91, 296, 267, 92, 93, 297,
	298, 299, 300, 301, 302, 94, 95, 96, 97, 204,
	98, 205, 206, 303, 99, 304, 100, 305, 306, 307,
	101, 102, 308, 103, 309, 0, 310, 207, 104, 105,
	208, 209, 311, 312, 313, 106, 107, 210, 0, 108,
	314, 109, 315, 316, 268, 317, 110, 211, 318, 212,
	319, 111, 112, 113, 213, 214, 270, 320, 116, 321,
	114, 322, 269, 115, 215, 216, 217, 218, 323, 219,
	324, 271, 117, 272, 118, 119, 325, 326, 220, 273,
	120, 274, 327, 121, 328, 329, 122, 0, 123, 124,
	125, 126, 127, 275, 128, 129, 132, 130, 330, 131,
	331, 221, 133, 222, 134, 135, 332, 333, 334, 335,
	336, 136, 223, 276, 137, 277, 224, 138, 139, 140,
	141, 337, 225, 142, 226, 143, 338, 144, 145, 146,
	227, 147, 148, 339, 150, 151, 149, 152, 340, 153,
	278, 154, 155, 228, 156, 0, 157, 158, 159, 341,
	229, 160, 161, 342, 162, 163, 279, 164, 230, 231,
	165, 343, 171, 166, 167, 168, 170, 232, 169, 233,
	344, 172, 345, 173, 174, 346, 234, 235, 236, 347,
	348, 175, 237, 238, 349, 176, 177, 178, 179, 350,
	351, 180, 181, 182, 352, 353, 183, 184, 185, 239,
	240, 354, 355, 186, 356, 357, 358, 359, 187, 188,
	189, 190, 604, 593, 594, 591, 592, 580, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 77, 78,
	1164, 79, 0, 0, 0, 0, 620, 586, 0, 0,
	0, 80, 81, 192, 635, 194, 636, 82, 637, 638,
	0, 83, 198, 199, 84, 601, 619, 639, 640, 202,
	0, 631, 0, 612, 0, 85, 86, 87, 0, 88,
	0, 89, 90, 91, 0, 267, 92, 93, 0, 613,
	615, 0, 614, 616, 94, 95, 96, 97, 641, 98,
	642, 643, 0, 99, 0, 100, 0, 1165, 0, 634,
	102, 0, 103, 0, 0, 0, 585, 104, 105, 621,
	622, 599, 0, 0, 106, 107, 644, 0, 108, 0,
	109, 0, 0, 268, 0, 110, 632, 0, 212, 0,
	111, 112, 113, 628, 630, 270, 0, 116, 0, 114,
	0, 269, 115, 645, 646, 647, 648, 0, 611, 0,
	271, 117, 272, 118, 119, 0, 0, 633, 273, 120,
	274, 0, 121, 0, 0, 122, 0, 123, 124, 125,
	126, 127, 275, 128, 129, 132, 130, 575, 131, 600,
	629, 133, 649, 134, 135, 0, 0, 0, 0, 0,
	136, 223, 276, 137, 277, 623, 138, 139, 140, 141,
	0, 624, 142, 226, 143, 0, 144, 145, 146, 650,
	147, 148, 0, 150, 151, 149, 152, 0, 153, 278,
	154, 155, 589, 156, 0, 157, 158, 159, 0, 229,
	160, 161, 617, 162, 163, 279, 164, 651, 231, 165,
	0, 171, 166, 167, 168, 170, 652, 169, 625, 0,
	172, 0, 173, 174, 0, 234, 653, 654, 0, 0,
	175, 626, 627, 598, 176, 177, 178, 179, 0, 0,
	180, 181, 182, 618, 0, 183, 184, 185, 239, 655,
	1163, 0, 186, 0, 0, 0, 0, 187, 188, 189,
	190, 576, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 572, 573, 1166, 0, 0, 0, 574, 0,
	0, 581, 1161, 604, 593, 594, 591, 592, 580, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 77,
	78, 0, 79, 0, 0, 0, 0, 620, 586, 0,
	0, 0, 80, 81, 192, 635, 194, 636, 82, 637,
	638, 0, 83, 198, 199, 84, 601, 619, 639, 640,
	202, 0, 631, 0, 612, 0, 85, 86, 87, 0,
	88, 0, 89, 90, 91, 0, 267, 92, 93, 0,
	613, 615, 0, 614, 616, 94, 95, 96, 97, 641,
	98, 642, 643, 670, 99, 0, 100, 0, 0, 0,
	634, 102, 0, 103, 0, 0, 0, 585, 104, 105,
	621, 622, 599, 0, 0, 106, 107, 644, 0, 108,
	0, 109, 0, 0, 268, 0, 110, 632, 0, 212,
	0, 111, 112, 113, 628, 630, 270, 0, 116, 0,
	114, 0, 269, 115, 645, 646, 647, 648, 0, 611,
	0, 271, 117, 272, 118, 119, 0, 0, 633, 273,
	120, 274, 0, 121, 0, 0, 122, 0, 123, 124,
	125, 126, 127, 275, 128, 129, 132, 130, 575, 131,
	600, 629, 133, 649, 134, 135, 0, 0, 0, 0,
	0, 136, 223, 276, 137, 277, 623, 138, 139, 140,
	141, 0, 624, 142, 226, 143, 0, 144, 145, 146,
	650, 147, 148, 0, 150, 151, 149, 152, 0, 153,
	278, 154, 155, 589, 156, 0, 157, 158, 159, 64,
	229, 160, 161, 617, 162, 163, 279, 164, 651, 231,
	165, 0, 171, 166, 167, 168, 170, 652, 169, 625,
	0, 172, 66, 173, 174, 0, 234, 653, 654, 0,
	0, 175, 626, 627, 598, 176, 177, 178, 179, 0,
	0, 180, 181, 182, 618, 0, 183, 184, 185, 489,
	655, 0, 0, 186, 0, 0, 0, 62, 187, 188,
	189, 190, 576, 63, 604, 593, 594, 591, 592, 580,
	0, 0, 0, 572, 573, 0, 0, 0, 0, 574,
	77, 78, 581, 79, 0, 0, 0, 0, 620, 586,
	0, 0, 0, 80, 81, 192, 635, 194, 636, 82,
	637, 638, 0, 83, 198, 199, 84, 601, 619, 639,
	640, 202, 0, 631, 0, 612, 0, 85, 86, 87,
	0, 88, 0, 89, 90, 91, 0, 267, 92, 93,
	0, 613, 615, 0, 614, 616, 94, 95, 96, 97,
	641, 98, 642, 643, 0, 99, 0, 100, 0, 0,
	0, 634, 102, 0, 103, 0, 0, 0, 585, 104,
	105, 621, 622, 599, 0, 0, 106, 107, 644, 0,
	108, 0, 109, 0, 0, 268, 0, 110, 632, 0,
	212, 0, 111, 112, 113, 628, 630, 270, 0, 116,
	0, 114, 0, 269, 115, 645, 646, 647, 648, 0,
	611, 0, 271, 117, 272, 118, 119, 0, 0, 633,
	273, 120, 274, 0, 121, 0, 0, 122, 0, 123,
	124, 125, 126, 127, 275, 128, 129, 132, 130, 575,
	131, 600, 629, 133, 649, 134, 135, 0, 0, 0,
	0, 0, 136, 223, 276, 137, 277, 623, 138, 139,
	140, 141, 0, 624, 142, 226, 143, 0, 144, 145,
	146, 650, 147, 148, 0, 150, 151, 149, 152, 0,
	153, 278, 154, 155, 589, 156, 0, 157, 158, 159,
	64, 229, 160, 161, 617, 162, 163, 279, 164, 651,
	231, 165, 0, 171, 166, 167, 168, 170, 652, 169,
	625, 0, 172, 66, 173, 174, 0, 234, 653, 654,
	0, 0, 175, 626, 627, 598, 176, 177, 178, 179,
	0, 0, 180, 181, 182, 618, 0, 183, 184, 185,
	489, 655, 0, 0, 186, 0, 0, 0, 62, 187,
	188, 189, 190, 576, 63, 604, 593, 594, 591, 592,
	580, 0, 0, 0, 572, 573, 0, 0, 0, 0,
	574, 77, 78, 581, 79, 0, 0, 0, 0, 620,
	586, 0, 0, 0, 80, 81, 192, 635, 194, 636,
	82, 637, 638, 1206, 83, 198, 199, 84, 601, 619,
	639, 640, 202, 0, 631, 0, 612, 0, 85, 86,
	87, 0, 88, 0, 89, 90, 91, 0, 267, 92,
	93, 0, 613, 615, 0, 614, 616, 94, 95, 96,
	97, 641, 98, 642, 643, 0, 99, 0, 100, 0,
	0, 0, 634, 102, 0, 103, 0, 0, 0, 585,
	104, 105, 621, 622, 599, 0, 0, 106, 107, 644,
	0, 108, 0, 109, 0, 1211, 268, 0, 110, 632,
	0, 212, 0, 111, 112, 113, 628, 630, 270, 0,
	116, 0, 114, 0, 269, 115, 645, 646, 647, 648,
	0, 611, 0, 271, 117, 272, 118, 119, 0, 1207,
	633, 273, 120, 274, 0, 121, 0, 0, 122, 0,
	123, 124, 125, 126, 127, 275, 128, 129, 132, 130,
	575, 131, 600, 629, 133, 649, 134, 135, 0, 0,
	0, 0, 0, 136, 223, 276, 137, 277, 623, 138,
	139, 140, 141, 0, 624, 142, 226, 143, 0, 144,
	145, 146, 650, 147, 148, 0, 150, 151, 149, 152,
	0, 153, 278, 154, 155, 589, 156, 0, 157, 158,
	159, 0, 229, 160, 161, 617, 162, 163, 279, 164,
	651, 231, 165, 0, 171, 166, 167, 168, 170, 652,
	169, 625, 0, 172, 0, 173, 174, 0, 234, 653,
	654, 0, 1208, 175, 626, 627, 598, 176, 177, 178,
	179, 0, 0, 180, 181, 182, 618, 0, 183, 184,
	185, 239, 655, 0, 0, 186, 0, 0, 0, 0,
	187, 188, 189, 190, 576, 0, 604, 593, 594, 591,
	592, 580, 0, 0, 0, 572, 573, 0, 0, 0,
	0, 574, 77, 78, 581, 79, 0, 0, 0, 0,
	620, 586, 0, 0, 0, 80, 81, 192, 635, 194,
	636, 82, 637, 638, 0, 83, 198, 199, 84, 601,
	619, 639, 640, 202, 0, 631, 0, 612, 0, 85,
	86, 87, 0, 88, 0, 89, 90, 91, 0, 267,
	92, 93, 0, 613, 615, 0, 614, 616, 94, 95,
	96, 97, 641, 98, 642, 643, 0, 99, 0, 100,
	0, 0, 0, 634, 102, 0, 103, 0, 0, 0,
	585, 104, 105, 621, 622, 599, 0, 0, 106, 107,
	644, 0, 108, 0, 109, 0, 0, 268, 0, 110,
	632, 0, 212, 0, 111, 112, 113, 628, 630, 270,
	0, 116, 0, 114, 0, 269, 115, 645, 646, 647,
	648, 0, 611, 0, 271, 117, 272, 118, 119, 0,
	0, 633, 273, 120, 274, 0, 121, 0, 0, 122,
	0, 123, 124, 125, 126, 127, 275, 128, 129, 132,
	130, 575, 131, 600, 629, 133, 649, 134, 135, 0,
	0, 0, 0, 0, 136, 223, 276, 137, 277, 623,
	138, 139, 140, 141, 0, 624, 142, 226, 143, 0,
	144, 145, 146, 650, 147, 148, 0, 150, 151, 149,
	152, 0, 153, 278, 154, 155, 589, 156, 0, 157,
	158, 159, 0, 229, 160, 161, 617, 162, 163, 279,
	164, 651, 231, 165, 0, 171, 166, 167, 168, 170,
	652, 169, 625, 0, 172, 0, 173, 174, 0, 234,
	653, 654, 0, 0, 175, 626, 627, 598, 176, 177,
	178, 179, 0, 0, 180, 181, 182, 618, 0, 183,
	184, 185, 239, 655, 0, 0, 186, 0, 0, 0,
	0, 187, 188, 189, 190, 576, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 572, 573, 0, 0,
	0, 0, 574, 0, 0, 581, 1590, 604, 593, 594,
	591, 592, 580, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 77, 78, 0, 79, 0, 0, 0,
	0, 620, 586, 0, 0, 0, 80, 81, 192, 635,
	194, 636, 82, 637, 638, 0, 83, 198, 199, 84,
	601, 619, 639, 640, 202, 0, 631, 0, 612, 0,
	85, 86, 87, 0, 88, 0, 89, 90, 91, 0,
	267, 92, 93, 0, 613, 615, 0, 614, 616, 94,
	95, 96, 97, 641, 98, 642, 643, 0, 99, 0,
	100, 0, 0, 0, 634, 102, 0, 103, 0, 0,
	0, 585, 104, 105, 621, 622, 599, 0, 0, 106,
	107, 644, 0, 108, 0, 109, 0, 0, 268, 0,
	110, 632, 0, 212, 0, 111, 112, 113, 628, 630,
	270, 0, 116, 0, 114, 0, 269, 115, 645, 646,
	647, 648, 0, 611, 0, 271, 117, 272, 118, 119,
	0, 0, 633, 273, 120, 274, 0, 121, 0, 0,
	122, 0, 123, 124, 125, 126, 127, 275, 128, 129,
	132, 130, 575, 131, 600, 629, 133, 649, 134, 135,
	0, 0, 0, 0, 0, 136, 223, 276, 137, 277,
	623, 138, 139, 140, 141, 0, 624, 142, 226, 143,
	0, 144, 145, 146, 650, 147, 148, 0, 150, 151,
	149, 152, 0, 153, 278, 154, 155, 589, 156, 0,
	157, 158, 159, 0, 229, 160, 161, 617, 162, 163,
	279, 164, 651, 231, 165, 0, 171, 166, 167, 168,
	170, 652, 169, 625, 0, 172, 0, 173, 174, 0,
	234, 653, 654, 0, 0, 175, 626, 627, 598, 176,
	177, 178, 179, 0, 0, 180, 181, 182, 618, 0,
	183, 184, 185, 239, 655, 0, 0, 186, 0, 0,
	0, 0, 187, 188, 189, 190, 576, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 572, 573, 0,
	0, 0, 0, 574, 0, 0, 581, 1539, 604, 593,
	594, 591, 592, 580, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 77, 78, 0, 79, 0, 0,
	0, 0, 620, 586, 0, 0, 0, 80, 81, 192,
	635, 194, 636, 82, 637, 638, 0, 83, 198, 199,
	84, 601, 619, 639, 640, 202, 0, 631, 0, 612,
	0, 85, 86, 87, 0, 88, 0, 89, 90, 91,
	0, 267, 92, 93, 0, 613, 615, 0, 614, 616,
	94, 95, 96, 97, 641, 98, 642, 643, 0, 99,
	0, 100, 0, 0, 0, 634, 102, 0, 103, 0,
	0, 0, 585, 104, 105, 621, 622, 599, 0, 0,
	106, 107, 644, 0, 108, 0, 109, 0, 0, 268,
	0, 110, 632, 0, 212, 0, 111, 112, 113, 628,
	630, 270, 0, 116, 0, 114, 0, 269, 115, 645,
	646, 647, 648, 0, 611, 0, 271, 117, 272, 118,
	119, 0, 0, 633, 273, 120, 274, 0, 121, 0,
	0, 122, 0, 123, 124, 125, 126, 127, 275, 128,
	129, 132, 130, 575, 131, 600, 629, 133, 649, 134,
	135, 0, 0, 0, 0, 0, 136, 223, 276, 137,
	277, 623, 138, 139, 140, 141, 0, 624, 142, 226,
	143, 0, 144, 145, 146, 650, 147, 148, 0, 150,
	151, 149, 152, 0, 153, 278, 154, 155, 589, 156,
	0, 157, 158, 159, 0, 229, 160, 161, 617, 162,
	163, 279, 164, 651, 231, 165, 0, 171, 166, 167,
	168, 170, 652, 169, 625, 0, 172, 0, 173, 174,
	0, 234, 653, 654, 0, 0, 175, 626, 627, 598,
	176, 177, 178, 179, 0, 0, 180, 181, 182, 618,
	0, 183, 184, 185, 239, 655, 0, 0, 186, 0,
	0, 0, 0, 187, 188, 189, 190, 576, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 572, 573,
	0, 0, 0, 0, 574, 0, 0, 581, 1160, 604,
	593, 594, 591, 592, 580, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 77, 78, 0, 79, 0,
	0, 0, 0, 620, 586, 0, 0, 0, 80, 81,
	192, 635, 194, 636, 82, 637, 638, 0, 83, 198,
	199, 84, 601, 619, 639, 640, 202, 0, 631, 0,
	612, 0, 85, 86, 87, 0, 88, 0, 89, 90,
	91, 0, 267, 92, 93, 0, 613, 615, 0, 614,
	616, 94, 95, 96, 97, 641, 98, 642, 643, 0,
	99, 0, 100, 0, 0, 0, 634, 102, 0, 103,
	0, 0, 0, 585, 104, 105, 621, 622, 599, 0,
	0, 106, 107, 644, 0, 108, 0, 109, 0, 0,
	268, 0, 110, 632, 0, 212, 0, 111, 112, 113,
	628, 630, 270, 0, 116, 0, 114, 0, 269, 115,
	645, 646, 647, 648, 0, 611, 0, 271, 117, 272,
	118, 119, 0, 0, 633, 273, 120, 274, 0, 121,
	0, 0, 122, 0, 123, 124, 125, 126, 127, 275,
	128, 129, 132, 130, 575, 131, 600, 629, 133, 649,
	134, 135, 0, 0, 0, 0, 0, 136, 223, 276,
	137, 277, 623, 138, 139, 140, 141, 0, 624, 142,
	226, 143, 0, 144, 145, 146, 650, 147, 148, 0,
	150, 151, 149, 152, 0, 153, 278, 154, 155, 589,
	156, 0, 157, 158, 159, 0, 229, 160, 161, 617,
	162, 163, 279, 164, 651, 231, 165, 0, 171, 166,
	167, 168, 170, 652, 169, 625, 0, 172, 0, 173,
	174, 0, 234, 653, 654, 0, 0, 175, 626, 627,
	598, 176, 177, 178, 179, 0, 0, 180, 181, 182,
	618, 0, 183, 184, 185, 239, 655, 0, 0, 186,
	0, 0, 0, 0, 187, 188, 189, 190, 576, 0,
	0, 0, 0, 604, 593, 594, 591, 592, 580, 572,
	573, 0, 0, 0, 0, 574, 909, 1157, 581, 77,
	78, 0, 79, 0, 0, 0, 0, 620, 586, 0,
	0, 0, 80, 81, 192, 635, 194, 636, 82, 637,
	638, 0, 83, 198, 199, 84, 601, 619, 639, 640,
	202, 0, 631, 0, 612, 0, 85, 86, 87, 0,
	88, 0, 89, 90, 91, 0, 267, 92, 93, 0,
	613, 615, 0, 614, 616, 94, 95, 96, 97, 641,
	98, 642, 643, 0, 99, 0, 100, 0, 0, 0,
	634, 102, 0, 103, 0, 0, 0, 585, 104, 105,
	621, 622, 599, 0, 0, 106, 107, 644, 0, 108,
	0, 109, 0, 0, 268, 0, 110, 632, 0, 212,
	0, 111, 112, 113, 628, 630, 270, 0, 116, 0,
	114, 0, 269, 115, 645, 646, 647, 648, 0, 611,
	0, 271, 117, 272, 118, 119, 0, 0, 633, 273,
	120, 274, 0, 121, 0, 0, 122, 0, 123, 124,
	125, 126, 127, 275, 128, 129, 132, 130, 575, 131,
	600, 629, 133, 649, 134, 135, 0, 0, 0, 0,
	0, 136, 223, 276, 137, 277, 623, 138, 139, 140,
	141, 0, 624, 142, 226, 143, 0, 144, 145, 146,
	650, 147, 148, 0, 150, 151, 149, 152, 0, 153,
	278, 154, 155, 589, 156, 0, 157, 158, 159, 0,
	229, 160, 161, 617, 162, 163, 279, 164, 651, 231,
	165, 0, 171, 166, 167, 168, 170, 652, 169, 625,
	0, 172, 0, 173, 174, 0, 234, 653, 654, 0,
	0, 175, 626, 627, 598, 176, 177, 178, 179, 0,
	0, 180, 181, 182, 618, 0, 183, 184, 185, 239,
	655, 0, 0, 186, 0, 0, 0, 0, 187, 188,
	189, 190, 576, 0, 604, 593, 594, 591, 592, 580,
	0, 0, 0, 572, 573, 570, 0, 0, 0, 574,
	77, 78, 581, 79, 0, 0, 0, 0, 620, 586,
	0, 0, 0, 80, 81, 192, 635, 194, 636, 82,
	637, 638, 0, 83, 198, 199, 84, 601, 619, 639,
	640, 202, 0, 631, 0, 612, 0, 85, 86, 87,
	0, 88, 0, 89, 90, 91, 0, 267, 92, 93,
	0, 613, 615, 0, 614, 616, 94, 95, 96, 97,
	641, 98, 642, 643, 0, 99, 0, 100, 0, 0,
	0, 634, 102, 0, 103, 0, 0, 0, 585, 104,
	105, 621, 622, 599, 0, 0, 106, 107, 644, 0,
	108, 0, 109, 0, 0, 268, 0, 110, 632, 0,
	212, 0, 111, 112, 113, 628, 630, 270, 0, 116,
	0, 114, 0, 269, 115, 645, 646, 647, 648, 0,
	611, 0, 271, 117, 272, 118, 119, 0, 0, 633,
	273, 120, 274, 0, 121, 0, 0, 122, 0, 123,
	124, 125, 126, 127, 275, 128, 129, 132, 130, 575,
	131, 600, 629, 133, 649, 134, 135, 0, 0, 0,
	0, 0, 136, 223, 276, 137, 277, 623, 138, 139,
	140, 141, 0, 624, 142, 226, 143, 0, 144, 145,
	146, 650, 147, 148, 0, 150, 151, 149, 152, 0,
	153, 278, 154, 155, 589, 156, 0, 157, 158, 159,
	0, 229, 160, 161, 617, 162, 163, 279, 164, 651,
	231, 165, 0, 171, 166, 167, 168, 170, 652, 169,
	625, 0, 172, 0, 173, 174, 0, 234, 653, 654,
	0, 0, 175, 626, 627, 598, 176, 177, 178, 179,
	0, 0, 180, 181, 182, 618, 0, 183, 184, 185,
	239, 655, 1544, 0, 186, 0, 0, 0, 0, 187,
	188, 189, 190, 576, 0, 604, 593, 594, 591, 592,
	580, 0, 0, 0, 572, 573, 0, 0, 0, 0,
	574, 77, 78, 581, 79, 0, 0, 0, 0, 620,
	586, 0, 0, 0, 80, 81, 192, 635, 194, 636,
	82, 637, 638, 0, 83, 198, 199, 84, 601, 619,
	639, 640, 202, 0, 631, 0, 612, 0, 85, 86,
	87, 0, 88, 0, 89, 90, 91, 0, 267, 92,
	93, 0, 613, 615, 0, 614, 616, 94, 95, 96,
	97, 641, 98, 642, 643, 670, 99, 0, 100, 0,
	0, 0, 634, 102, 0, 103, 0, 0, 0, 585,
	104, 105, 621, 622, 599, 0, 0, 106, 107, 644,
	0, 108, 0, 109, 0, 0, 268, 0, 110, 632,
	0, 212, 0, 111, 112, 113, 628, 630, 270, 0,
	116, 0, 114, 0, 269, 115, 645, 646, 647, 648,
	0, 611, 0, 271, 117, 272, 118, 119, 0, 0,
	633, 273, 120, 274, 0, 121, 0, 0, 122, 0,
	123, 124, 125, 126, 127, 275, 128, 129, 132, 130,
	575, 131, 600, 629, 133, 649, 134, 135, 0, 0,
	0, 0, 0, 136, 223, 276, 137, 277, 623, 138,
	139, 140, 141, 0, 624, 142, 226, 143, 0, 144,
	145, 146, 650, 147, 148, 0, 150, 151, 149, 152,
	0, 153, 278, 154, 155, 589, 156, 0, 157, 158,
	159, 0, 229, 160, 161, 617, 162, 163, 279, 164,
	651, 231, 165, 0, 171, 166, 167, 168, 170, 652,
	169, 625, 0, 172, 0, 173, 174, 0, 234, 653,
	654, 0, 0, 175, 626, 627, 598, 176, 177, 178,
	179, 0, 0, 180, 181, 182, 618, 0, 183, 184,
	185, 239, 655, 0, 0, 186, 0, 0, 0, 0,
	187, 188, 189, 190, 576, 0, 604, 593, 594, 591,
	592, 580, 0, 0, 0, 572, 573, 0, 0, 0,
	0, 574, 77, 78, 581, 79, 0, 0, 0, 0,
	620, 586, 0, 0, 0, 80, 81, 192, 635, 194,
	636, 82, 637, 638, 0, 83, 198, 199, 84, 601,
	619, 639, 640, 202, 0, 631, 0, 612, 0, 85,
	86, 87, 0, 88, 0, 89, 90, 91, 0, 267,
	92, 93, 0, 613, 615, 0, 614, 616, 94, 95,
	96, 97, 641, 98, 642, 643, 0, 99, 0, 100,
	0, 0, 0, 634, 102, 0, 103, 0, 0, 0,
	585, 104, 105, 621, 622, 599, 0, 0, 106, 107,
	644, 0, 108, 0, 109, 0, 1211, 268, 0, 110,
	632, 0, 212, 0, 111, 112, 113, 628, 630, 270,
	0, 116, 0, 114, 0, 269, 115, 645, 646, 647,
	648, 0, 611, 0, 271, 117, 272, 118, 119, 0,
	0, 633, 273, 120, 274, 0, 121, 0, 0, 122,
	0, 123, 124, 125, 126, 127, 275, 128, 129, 132,
	130, 575, 131, 600, 629, 133, 649, 134, 135, 0,
	0, 0, 0, 0, 136, 223, 276, 137, 277, 623,
	138, 139, 140, 141, 0, 624, 142, 226, 143, 0,
	144, 145, 146, 650, 147, 148, 0, 150, 151, 149,
	152, 0, 153, 278, 154, 155, 589, 156, 0, 157,
	158, 159, 0, 229, 160, 161, 617, 162, 163, 279,
	164, 651, 231, 165, 0, 171, 166, 167, 168, 170,
	652, 169, 625, 0, 172, 0, 173, 174, 0, 234,
	653, 654, 0, 0, 175, 626, 627, 598, 176, 177,
	178, 179, 0, 0, 180, 181, 182, 618, 0, 183,
	184, 185, 239, 655, 0, 0, 186, 0, 0, 0,
	0, 187, 188, 189, 190, 576, 0, 0, 0, 0,
	604, 593, 594, 591, 592, 580, 572, 573, 0, 0,
	0, 0, 574, 0, 0, 581, 77, 78, 843, 79,
	0, 0, 0, 0, 620, 586, 0, 0, 0, 80,
	81, 192, 635, 194, 636, 82, 637, 638, 0, 83,
	198, 199, 84, 601, 619, 639, 640, 202, 0, 631,
	0, 612, 0, 85, 86, 87, 0, 88, 0, 89,
	90, 91, 0, 267, 92, 93, 0, 613, 615, 0,
	614, 616, 94, 95, 96, 97, 641, 98, 642, 643,
	0, 99, 0, 100, 0, 0, 0, 634, 102, 0,
	103, 0, 0, 0, 585, 104, 105, 621, 622, 599,
	0, 0, 106, 107, 644, 0, 108, 0, 109, 0,
	0, 268, 0, 110, 632, 0, 212, 0, 111, 112,
	113, 628, 630, 270, 0, 116, 0, 114, 0, 269,
	115, 645, 646, 647, 648, 0, 611, 0, 271, 117,
	272, 118, 119, 0, 0, 633, 273, 120, 274, 0,
	121, 0, 0, 122, 0, 123, 124, 125, 126, 127,
	275, 128, 129, 132, 130, 575, 131, 600, 629, 133,
	649, 134, 135, 0, 0, 0, 0, 0, 136, 223,
	276, 137, 277, 623, 138, 139, 140, 141, 0, 624,
	142, 226, 143, 0, 144, 145, 146, 650, 147, 148,
	0, 150, 151, 149, 152, 0, 153, 278, 154, 155,
	589, 156, 0, 157, 158, 159, 0, 229, 160, 161,
	617, 162, 163, 279, 164, 651, 231, 165, 0, 171,
	166, 167, 168, 170, 652, 169, 625, 0, 172, 0,
	173, 174, 0, 234, 653, 654, 0, 0, 175, 626,
	627, 598, 176, 177, 178, 179, 0, 0, 180, 181,
	182, 618, 0, 183, 184, 185, 239, 655, 0, 0,
	186, 0, 0, 0, 0, 187, 188, 189, 190, 576,
	0, 604, 593, 594, 591, 592, 580, 0, 0, 0,
	572, 573, 0, 0, 0, 0, 574, 77, 78, 581,
	79, 0, 0, 0, 0, 620, 586, 0, 0, 0,
	80, 81, 192, 635, 194, 636, 82, 637, 638, 0,
	83, 198, 199, 84, 601, 619, 639, 640, 202, 0,
	631, 0, 612, 0, 85, 86, 87, 0, 88, 0,
	89, 90, 91, 0, 267, 92, 1885, 0, 613, 615,
	0, 614, 616, 94, 95, 96, 97, 641, 98, 642,
	643, 0, 99, 0, 100, 0, 0, 0, 634, 102,
	0, 103, 0, 0, 0, 585, 104, 105, 621, 622,
	599, 0, 0, 106, 107, 644, 0, 108, 0, 109,
	0, 0, 268, 0, 110, 632, 0, 212, 0, 111,
	112, 113, 628, 630, 270, 0, 116, 0, 114, 0,
	269, 115, 645, 646, 647, 648, 0, 611, 0, 271,
	117, 272, 118, 119, 0, 0, 633, 273, 120, 274,
	0, 121, 0, 0, 122, 0, 123, 124, 125, 126,
	127, 275, 128, 129, 132, 130, 575, 131, 600, 629,
	133, 649, 134, 135, 0, 0, 0, 0, 0, 136,
	223, 276, 137, 277, 623, 138, 139, 140, 141, 0,
	624, 142, 226, 143, 0, 144, 145, 146, 650, 147,
	148, 0, 150, 151, 149, 152, 0, 153, 278, 154,
	155, 589, 156, 0, 157, 158, 159, 0, 229, 160,
	161, 617, 162, 163, 279, 164, 651, 231, 165, 0,
	171, 166, 167, 168, 170, 652, 169, 625, 0, 172,
	0, 173, 174, 0, 234, 653, 654, 0, 0, 175,
	626, 627, 598, 176, 177, 1884, 179, 0, 0, 180,
	181, 182, 618, 0, 183, 184, 185, 239, 655, 0,
	0, 186, 0, 0, 0, 0, 187, 188, 189, 190,
	576, 0, 604, 593, 594, 591, 592, 580, 0, 0,
	0, 572, 573, 0, 0, 0, 0, 574, 77, 78,
	581, 79, 0, 0, 0, 0, 620, 586, 0, 0,
	0, 80, 81, 1883, 635, 194, 636, 82, 637, 638,
	0, 83, 198, 199, 84, 601, 619, 639, 640, 202,
	0, 631, 0, 612, 0, 85, 86, 87, 0, 88,
	0, 89, 90, 91, 0, 267, 92, 1885, 0, 613,
	615, 0, 614, 616, 94, 95, 96, 97, 641, 98,
	642, 643, 0, 99, 0, 100, 0, 0, 0, 634,
	102, 0, 103, 0, 0, 0, 585, 104, 105, 621,
	622, 599, 0, 0, 106, 107, 644, 0, 108, 0,
	109, 0, 0, 268, 0, 110, 632, 0, 212, 0,
	111, 112, 113, 628, 630, 270, 0, 116, 0, 114,
	0, 269, 115, 645, 646, 647, 648, 0, 611, 0,
	271, 117, 272, 118, 119, 0, 0, 633, 273, 120,
	274, 0, 121, 0, 0, 122, 0, 123, 124, 125,
	126, 127, 275, 128, 129, 132, 130, 575, 131, 600,
	629, 133, 649, 134, 135, 0, 0, 0, 0, 0,
	136, 223, 276, 137, 277, 623, 138, 139, 140, 141,
	0, 624, 142, 226, 143, 0, 144, 145, 146, 650,
	147, 148, 0, 150, 151, 149, 152, 0, 153, 278,
	154, 155, 589, 156, 0, 157, 158, 159, 0, 229,
	160, 161, 617, 162, 163, 279, 164, 651, 231, 165,
	0, 171, 166, 167, 168, 170, 652, 169, 625, 0,
	172, 0, 173, 174, 0, 234, 653, 654, 0, 0,
	175, 626, 627, 598, 176, 177, 1884, 179, 0, 0,
	180, 181, 182, 618, 0, 183, 184, 185, 239, 655,
	0, 0, 186, 0, 0, 0, 0, 187, 188, 189,
	190, 576, 0, 604, 593, 594, 591, 592, 580, 0,
	0, 0, 572, 573, 0, 0, 0, 0, 574, 77,
	78, 581, 79, 0, 0, 0, 0, 620, 586, 0,
	0, 0, 80, 81, 192, 635, 194, 636, 82, 637,
	638, 0, 83, 198, 199, 84, 601, 619, 639, 640,
	202, 0, 631, 0, 612, 0, 85, 86, 87, 0,
	88, 0, 89, 90, 91, 0, 267, 92, 93, 0,
	613, 615, 0, 614, 616, 94, 95, 96, 97, 641,
	98, 642, 643, 0, 99, 0, 100, 0, 0, 0,
	634, 102, 0, 103, 0, 0, 0, 585, 104, 105,
	621, 622, 599, 0, 0, 106, 107, 644, 0, 108,
	0, 109, 0, 0, 268, 0, 110, 632, 0, 212,
	0, 111, 112, 113, 628, 630, 270, 0, 116, 0,
	114, 0, 269, 115, 645, 646, 647, 648, 0, 611,
	0, 271, 117, 272, 118, 119, 0, 0, 633, 273,
	120, 274, 0, 121, 0, 0, 122, 0, 123, 124,
	125, 126, 127, 275, 128, 129, 132, 130, 575, 131,
	600, 629, 133, 649, 134, 135, 0, 0, 0, 0,
	0, 136, 223, 276, 137, 277, 623, 138, 139, 140,
	141, 0, 624, 142, 226, 143, 0, 144, 145, 146,
	650, 147, 148, 0, 150, 151, 149, 152, 0, 153,
	278, 154, 155, 589, 156, 0, 157, 158, 159, 0,
	229, 160, 161, 617, 162, 163, 279, 164, 651, 231,
	165, 0, 171, 166, 167, 168, 170, 652, 169, 625,
	0, 172, 0, 173, 174, 0, 234, 653, 654, 0,
	0, 175, 626, 627, 598, 176, 177, 178, 179, 0,
	0, 180, 181, 182, 618, 0, 183, 184, 185, 239,
	655, 0, 0, 186, 0, 0, 0, 0, 187, 188,
	189, 190, 576, 0, 1183, 593, 594, 591, 592, 580,
	0, 0, 0, 572, 573, 0, 0, 0, 0, 574,
	77, 78, 581, 79, 0, 0, 0, 0, 620, 586,
	0, 0, 0, 80, 81, 192, 635, 194, 636, 82,
	637, 638, 0, 83, 198, 199, 84, 601, 619, 639,
	640, 202, 0, 631, 0, 612, 0, 85, 86, 87,
	0, 88, 0, 89, 90, 91, 0, 267, 92, 93,
	0, 613, 615, 0, 614, 616, 94, 95, 96, 97,
	641, 1186, 642, 643, 0, 99, 0, 100, 0, 0,
	0, 634, 102, 0, 103, 0, 0, 0, 585, 104,
	105, 621, 622, 599, 0, 0, 106, 107, 644, 0,
	108, 0, 109, 0, 0, 268, 0, 110, 632, 0,
	212, 0, 111, 112, 1187, 628, 630, 270, 0, 116,
	0, 114, 0, 269, 115, 645, 646, 647, 648, 0,
	611, 0, 271, 117, 272, 118, 119, 0, 0, 633,
	273, 120, 274, 0, 121, 0, 0, 122, 0, 123,
	1188, 1185, 126, 127, 275, 128, 129, 132, 130, 575,
	131, 600, 629, 133, 649, 134, 135, 0, 0, 0,
	0, 0, 136, 223, 276, 137, 277, 623, 138, 139,
	140, 141, 0, 624, 142, 226, 143, 0, 144, 145,
	146, 650, 147, 148, 0, 150, 151, 149, 152, 0,
	153, 278, 154, 155, 589, 156, 0, 157, 158, 1189,
	0, 229, 160, 161, 617, 162, 163, 279, 164, 651,
	231, 165, 0, 171, 166, 167, 168, 170, 652, 169,
	625, 0, 172, 0, 173, 174, 0, 234, 653, 654,
	0, 0, 175, 626, 627, 598, 176, 177, 178, 179,
	0, 0, 180, 181, 182, 618, 0, 183, 184, 185,
	239, 655, 0, 0, 186, 0, 0, 0, 0, 187,
	188, 1184, 190, 576, 0, 604, 593, 594, 591, 592,
	580, 0, 0, 0, 572, 573, 0, 0, 0, 0,
	574, 77, 78, 581, 79, 0, 0, 0, 0, 620,
	586, 0, 0, 0, 80, 81, 192, 635, 194, 636,
	82, 637, 638, 0, 83, 198, 199, 84, 601, 619,
	639, 640, 202, 0, 631, 0, 612, 0, 85, 86,
	87, 0, 88, 0, 89, 90, 91, 0, 267, 92,
	93, 0, 613, 615, 0, 614, 616, 94, 95, 96,
	97, 641, 98, 642, 643, 0, 99, 0, 100, 0,
	0, 0, 634, 102, 0, 103, 0, 0, 0, 585,
	104, 105, 621, 622, 599, 0, 0, 106, 107, 644,
	0, 108, 0, 109, 0, 0, 268, 0, 110, 632,
	0, 212, 0, 111, 112, 113, 628, 630, 270, 0,
	116, 0, 114, 0, 269, 115, 645, 646, 647, 648,
	0, 611, 0, 271, 117, 272, 118, 119, 0, 0,
	633, 273, 120, 274, 0, 121, 0, 0, 122, 0,
	123, 124, 125, 126, 127, 275, 128, 129, 132, 130,
	0, 131, 600, 629, 133, 649, 134, 135, 0, 0,
	0, 0, 0, 136, 223, 276, 137, 277, 623, 138,
	139, 140, 141, 0, 624, 142, 226, 143, 0, 144,
	145, 146, 650, 147, 148, 0, 150, 151, 149, 152,
	0, 153, 278, 154, 155, 1201, 156, 0, 157, 158,
	159, 0, 229, 160, 161, 617, 162, 163, 279, 164,
	651, 231, 165, 0, 171, 166, 167, 168, 170, 652,
	169, 625, 0, 172, 0, 173, 174, 0, 234, 653,
	654, 0, 0, 175, 626, 627, 598, 176, 177, 178,
	179, 0, 0, 180, 181, 182, 618, 0, 183, 184,
	185, 239, 655, 0, 0, 186, 0, 0, 0, 0,
	187, 188, 189, 190, 0, 0, 604, 593, 594, 591,
	592, 580, 0, 0, 0, 1197, 1198, 0, 0, 0,
	0, 1199, 77, 78, 1200, 79, 0, 0, 0, 0,
	620, 586, 0, 0, 0, 80, 81, 0, 635, 194,
	636, 82, 637, 638, 0, 83, 198, 199, 84, 601,
	619, 639, 640, 202, 0, 631, 0, 612, 0, 85,
	86, 87, 0, 88, 0, 89, 90, 91, 0, 267,
	92, 1885, 0, 613, 615, 0, 614, 616, 94, 95,
	96, 97, 641, 98, 642, 643, 0, 99, 0, 100,
	0, 0, 0, 634, 102, 0, 103, 0, 0, 0,
	585, 104, 105, 621, 622, 599, 0, 0, 106, 107,
	644, 0, 108, 0, 109, 0, 0, 268, 0, 110,
	632, 0, 212, 0, 111, 112, 113, 628, 630, 0,
	0, 116, 0, 114, 0, 269, 115, 645, 646, 647,
	648, 0, 611, 0, 0, 117, 272, 118, 119, 0,
	0, 633, 273, 120, 0, 0, 121, 0, 0, 122,
	0, 123, 124, 125, 126, 127, 275, 128, 129, 132,
	130, 575, 131, 600, 629, 133, 649, 134, 135, 0,
	0, 0, 0, 0, 136, 223, 276, 137, 277, 623,
	138, 139, 140, 141, 0, 624, 142, 226, 143, 0,
	144, 145, 146, 650, 147, 148, 0, 150, 151, 149,
	152, 0, 153, 278, 154, 155, 589, 156, 0, 157,
	158, 159, 0, 229, 160, 161, 617, 162, 163, 0,
	164, 651, 231, 165, 0, 171, 166, 167, 168, 170,
	652, 169, 625, 0, 172, 0, 173, 174, 0, 234,
	653, 654, 0, 0, 175, 626, 627, 598, 176, 177,
	1884, 179, 0, 0, 180, 181, 182, 618, 0, 183,
	184, 185, 239, 655, 0, 0, 186, 0, 0, 0,
	0, 187, 188, 189, 190, 0, 0, 604, 0, 0,
	0, 0, 0, 0, 0, 0, 572, 573, 0, 0,
	0, 0, 574, 77, 78, 581, 79, 0, 0, 0,
	0, 620, 0, 0, 0, 0, 80, 81, 192, 193,
	194, 195, 82, 196, 197, 0, 83, 198, 199, 84,
	0, 619, 200, 201, 202, 0, 631, 0, 612, 0,
	85, 86, 87, 0, 88, 0, 89, 90, 91, 0,
	267, 92, 93, 0, 613, 615, 0, 614, 616, 94,
	95, 96, 97, 204, 98, 205, 206, 0, 99, 0,
	100, 0, 0, 0, 101, 102, 0, 103, 0, 0,
	0, 207, 104, 105, 621, 622, 0, 0, 0, 106,
	107, 210, 0, 108, 0, 109, 0, 0, 268, 0,
	110, 632, 0, 212, 0, 111, 112, 113, 628, 630,
	270, 0, 116, 0, 114, 0, 269, 115, 215, 216,
	217, 218, 0, 219, 0, 271, 117, 272, 118, 119,
	0, 0, 633, 273, 120, 274, 0, 121, 0, 0,
	122, 0, 123, 124, 125, 126, 127, 275, 128, 129,
	132, 130, 0, 131, 0, 629, 133, 222, 134, 135,
	0, 0, 0, 0, 0, 136, 223, 276, 137, 277,
	623, 138, 139, 140, 141, 0, 624, 142, 226, 143,
	0, 144, 145, 146, 227, 147, 148, 0, 150, 151,
	149, 152, 0, 153, 278, 154, 155, 228, 156, 0,
	157, 158, 159, 0, 229, 160, 161, 617, 162, 163,
	279, 164, 230, 231, 165, 0, 171, 166, 167, 168,
	170, 232, 169, 625, 0, 172, 0, 173, 174, 0,
	234, 235, 236, 0, 0, 175, 626, 627, 0, 176,
	177, 178, 179, 0, 0, 180, 181, 182, 618, 0,
	183, 184, 185, 239, 240, 0, 0, 186, 485, 0,
	0, 0, 187, 188, 189, 190, 0, 0, 0, 0,
	0, 0, 0, 0, 77, 78, 0, 79, 0, 0,
	0, 0, 191, 0, 0, 0, 1656, 80, 81, 192,
	193, 194, 195, 82, 196, 197, 0, 83, 198, 199,
	84, 0, 0, 200, 201, 202, 0, 203, 0, 266,
	0, 85, 86, 87, 0, 88, 0, 89, 90, 91,
	0, 267, 92, 93, 0, 0, 0, 0, 0, 0,
	94, 95, 96, 97, 204, 98, 205, 206, 0, 99,
	0, 100, 0, 0, 0, 101, 102, 0, 103, 0,
	0, 0, 207, 104, 105, 208, 209, 0, 0, 0,
	106, 107, 210, 0, 108, 0, 109, 0, 0, 268,
	0, 110, 211, 0, 212, 0, 111, 112, 113, 213,
	214, 270, 0, 116, 0, 114, 0, 269, 115, 215,
	216, 217, 218, 0, 219, 0, 271, 117, 272, 118,
	119, 0, 0, 220, 273, 120, 274, 0, 121, 0,
	0, 122, 0, 123, 124, 125, 126, 127, 275, 128,
	129, 132, 130, 0, 131, 0, 221, 133, 222, 134,
	135, 0, 0, 0, 0, 0, 136, 223, 276, 137,
	277, 224, 138, 139, 140, 141, 0, 225, 142, 226,
	143, 0, 144, 145, 146, 227, 147, 148, 0, 150,
	151, 149, 152, 0, 153, 278, 154, 155, 228, 156,
	0, 157, 158, 159, 64, 229, 160, 161, 0, 162,
	163, 279, 164, 230, 231, 165, 0, 171, 166, 167,
	168, 170, 232, 169, 233, 0, 172, 66, 173, 174,
	0, 234, 235, 236, 0, 0, 175, 237, 238, 0,
	176, 177, 178, 179, 0, 0, 180, 181, 182, 0,
	0, 183, 184, 185, 489, 240, 0, 0, 186, 0,
	0, 0, 62, 187, 188, 189, 190, 0, 63, 485,
	792, 0, 793, 788, 783, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 77, 78, 61, 79, 0,
	0, 0, 0, 191, 0, 0, 0, 0, 80, 81,
	192, 193, 194, 195, 82, 196, 197, 0, 83, 198,
	199, 84, 0, 0, 200, 201, 202, 0, 203, 0,
	266, 0, 85, 86, 87, 0, 88, 0, 89, 90,
	91, 0, 267, 92, 93, 0, 0, 0, 0, 0,
	0, 94, 95, 96, 97, 204, 98, 205, 206, 796,
	99, 0, 100, 0, 0, 0, 101, 102, 0, 103,
	0, 0, 0, 207, 104, 105, 208, 209, 785, 0,
	0, 106, 107, 210, 0, 108, 0, 109, 0, 0,
	268, 0, 110, 211, 0, 212, 0, 111, 112, 113,
	213, 214, 270, 0, 116, 0, 114, 0, 269, 115,
	215, 216, 217, 218, 0, 219, 0, 271, 117, 272,
	118, 119, 0, 0, 220, 273, 120, 274, 0, 121,
	0, 0, 122, 0, 123, 124, 125, 126, 127, 275,
	128, 129, 132, 130, 0, 131, 0, 221, 133, 222,
	134, 135, 0, 786, 0, 0, 0, 136, 223, 276,
	137, 277, 224, 138, 139, 140, 141, 0, 225, 142,
	226, 143, 0, 144, 145, 146, 227, 147, 148, 0,
	150, 151, 149, 152, 0, 153, 278, 154, 155, 228,
	156, 0, 157, 158, 159, 0, 229, 160, 161, 0,
	162, 163, 279, 164, 230, 231, 165, 0, 171, 166,
	167, 168, 170, 232, 169, 233, 0, 172, 0, 173,
	174, 0, 234, 235, 236, 0, 0, 175, 237, 238,
	784, 176, 177, 178, 179, 0, 0, 180, 181, 182,
	0, 0, 183, 184, 185, 239, 240, 485, 792, 186,
	793, 788, 783, 0, 187, 188, 189, 190, 0, 0,
	0, 0, 0, 77, 78, 0, 79, 0, 0, 794,
	789, 191, 0, 0, 0, 0, 80, 81, 192, 193,
	194, 195, 82, 196, 197, 0, 83, 198, 199, 84,
	0, 0, 200, 201, 202, 0, 203, 0, 266, 0,
	85, 86, 87, 0, 88, 0, 89, 90, 91, 0,
	267, 92, 93, 0, 0, 0, 0, 0, 0, 94,
	95, 96, 97, 204, 98, 205, 206, 779, 99, 0,
	100, 0, 0, 0, 101, 102, 0, 103, 0, 0,
	0, 207, 104, 105, 208, 209, 785, 0, 0, 106,
	107, 210, 0, 108, 0, 109, 0, 0, 268, 0,
	110, 211, 0, 212, 0, 111, 112, 113, 213, 214,
	270, 0, 116, 0, 114, 0, 269, 115, 215, 216,
	217, 218, 0, 219, 0, 271, 117, 272, 118, 119,
	0, 0, 220, 273, 120, 274, 0, 121, 0, 0,
	122, 0, 123, 124, 125, 126, 127, 275, 128, 129,
	132, 130, 0, 131, 0, 221, 133, 222, 134, 135,
	0, 786, 0, 0, 0, 136, 223, 276, 137, 277,
	224, 138, 139, 140, 141, 0, 225, 142, 226, 143,
	0, 144, 145, 146, 227, 147, 148, 0, 150, 151,
	149, 152, 0, 153, 278, 154, 155, 228, 156, 0,
	157, 158, 159, 0, 229, 160, 161, 0, 162, 163,
	279, 164, 230, 231, 165, 0, 171, 166, 167, 168,
	170, 232, 169, 233, 0, 172, 0, 173, 174, 0,
	234, 235, 236, 0, 0, 175, 237, 238, 784, 176,
	177, 178, 179, 0, 0, 180, 181, 182, 0, 0,
	183, 184, 185, 239, 240, 485, 792, 186, 793, 788,
	783, 0, 187, 188, 189, 190, 0, 0, 0, 0,
	0, 77, 78, 0, 79, 0, 0, 794, 789, 191,
	0, 0, 0, 0, 80, 81, 192, 193, 194, 195,
	82, 196, 197, 0, 83, 198, 199, 84, 0, 0,
	200, 201, 202, 0, 203, 0, 266, 0, 85, 86,
	87, 0, 88, 0, 89, 90, 91, 0, 267, 92,
	93, 0, 0, 0, 0, 0, 0, 94, 95, 96,
	97, 204, 98, 205, 206, 0, 99, 0, 100, 0,
	0, 0, 101, 102, 0, 103, 0, 0, 0, 207,
	104, 105, 208, 209, 785, 0, 0, 106, 107, 210,
	0, 108, 0, 109, 0, 0, 268, 0, 110, 211,
	0, 212, 0, 111, 112, 113, 213, 214, 270, 0,
	116, 0, 114, 0, 269, 115, 215, 216, 217, 218,
	0, 219, 0, 271, 117, 272, 118, 119, 0, 0,
	220, 273, 120, 274, 0, 121, 0, 0, 122, 0,
	123, 124, 125, 126, 127, 275, 128, 129, 132, 130,
	0, 131, 0, 221, 133, 222, 134, 135, 0, 786,
	0, 0, 0, 136, 223, 276, 137, 277, 224, 138,
	139, 140, 141, 0, 225, 142, 226, 143, 0, 144,
	145, 146, 227, 147, 148, 0, 150, 151, 149, 152,
	0, 153, 278, 154, 155, 228, 156, 0, 157, 158,
	159, 0, 229, 160, 161, 0, 162, 163, 279, 164,
	230, 231, 165, 0, 171, 166, 167, 168, 170, 232,
	169, 233, 0, 172, 0, 173, 174, 0, 234, 235,
	236, 0, 0, 175, 237, 238, 784, 176, 177, 178,
	179, 0, 0, 180, 181, 182, 0, 0, 183, 184,
	185, 239, 240, 74, 0, 186, 0, 0, 0, 0,
	187, 188, 189, 190, 0, 0, 0, 0, 0, 77,
	78, 0, 79, 0, 0, 794, 789, 191, 0, 0,
	0, 0, 80, 81, 192, 193, 194, 195, 82, 196,
	197, 0, 83, 198, 199, 84, 0, 0, 200, 201,
	202, 0, 203, 0, 0, 0, 85, 86, 87, 0,
	88, 0, 89, 90, 91, 0, 0, 92, 93, 0,
	0, 0, 0, 0, 0, 94, 95, 96, 97, 204,
	98, 205, 206, 0, 99, 0, 100, 0, 0, 0,
	101, 102, 0, 103, 0, 0, 0, 207, 104, 105,
	208, 209, 0, 0, 0, 106, 107, 210, 0, 108,
	0, 109, 0, 0, 0, 0, 110, 211, 0, 212,
	0, 111, 112, 113, 213, 214, 0, 0, 116, 0,
	114, 0, 0, 115, 215, 216, 217, 218, 0, 219,
	0, 0, 117, 0, 118, 119, 0, 0, 220, 0,
	120, 0, 0, 121, 0, 0, 122, 0, 123, 124,
	125, 126, 127, 0, 128, 129, 132, 130, 0, 131,
	0, 221, 133, 222, 134, 135, 0, 0, 448, 0,
	0, 136, 223, 0, 137, 0, 224, 138, 139, 140,
	141, 0, 225, 142, 226, 143, 0, 144, 145, 146,
	227, 147, 148, 0, 150, 151, 149, 152, 0, 153,
	0, 154, 155, 228, 156, 0, 157, 158, 159, 64,
	229, 160, 161, 0, 162, 163, 0, 164, 230, 231,
	165, 0, 171, 166, 167, 168, 170, 232, 169, 233,
	0, 172, 66, 173, 174, 0, 234, 235, 236, 0,
	0, 175, 237, 238, 0, 176, 177, 178, 179, 0,
	0, 180, 181, 182, 0, 0, 183, 184, 185, 489,
	240, 0, 0, 186, 74, 0, 0, 62, 187, 188,
	189, 190, 0, 63, 0, 0, 0, 0, 0, 0,
	77, 78, 0, 79, 0, 0, 0, 0, 191, 0,
	0, 0, 1098, 80, 81, 192, 193, 194, 195, 82,
	196, 197, 0, 83, 198, 199, 84, 0, 0, 200,
	201, 202, 0, 203, 0, 0, 0, 85, 86, 87,
	0, 88, 0, 89, 90, 91, 0, 0, 92, 93,
	0, 0, 0, 0, 0, 0, 94, 95, 96, 97,
	204, 98, 205, 206, 0, 99, 0, 100, 0, 0,
	0, 101, 102, 0, 103, 0, 0, 0, 207, 104,
	105, 208, 209, 0, 0, 0, 106, 107, 210, 0,
	108, 0, 109, 0, 0, 0, 0, 110, 211, 0,
	212, 0, 111, 112, 113, 213, 214, 0, 0, 116,
	0, 114, 0, 0, 115, 215, 216, 217, 218, 0,
	219, 0, 0, 117, 0, 118, 119, 0, 0, 220,
	0, 120, 0, 0, 121, 0, 0, 122, 0, 123,
	124, 125, 126, 127, 0, 128, 129, 132, 130, 0,
	131, 0, 221, 133, 222, 134, 135, 0, 0, 0,
	0, 0, 136, 223, 0, 137, 0, 224, 138, 139,
	140, 141, 0, 225, 142, 226, 143, 0, 144, 145,
	146, 227, 147, 148, 0, 150, 151, 149, 152, 0,
	153, 0, 154, 155, 228, 156, 0, 157, 158, 159,
	64, 229, 160, 161, 0, 162, 163, 0, 164, 230,
	231, 165, 0, 171, 166, 167, 168, 170, 232, 169,
	233, 0, 172, 66, 173, 174, 0, 234, 235, 236,
	0, 0, 175, 237, 238, 0, 176, 177, 178, 179,
	0, 0, 180, 181, 182, 0, 0, 183, 184, 185,
	489, 240, 0, 0, 186, 74, 0, 0, 62, 187,
	188, 189, 190, 0, 63, 0, 0, 0, 0, 0,
	0, 77, 78, 0, 79, 0, 0, 0, 0, 191,
	0, 0, 0, 61, 80, 81, 192, 193, 194, 195,
	82, 196, 197, 0, 83, 198, 199, 84, 0, 0,
	200, 201, 202, 0, 203, 0, 0, 0, 85, 86,
	87, 0, 88, 0, 89, 90, 91, 0, 0, 92,
	93, 0, 0, 0, 0, 0, 0, 94, 95, 96,
	97, 204, 98, 205, 206, 0, 99, 0, 100, 0,
	0, 0, 101, 102, 0, 103, 0, 0, 0, 207,
	104, 105, 208, 209, 0, 0, 0, 106, 107, 210,
	0, 108, 0, 109, 0, 0, 0, 0, 110, 211,
	0, 212, 0, 111, 112, 113, 213, 214, 0, 0,
	116, 0, 114, 0, 0, 115, 215, 216, 217, 218,
	0, 219, 0, 0, 117, 0, 118, 119, 0, 0,
	220, 0, 120, 0, 0, 121, 0, 0, 122, 0,
	123, 124, 125, 126, 127, 0, 128, 129, 132, 130,
	0, 131, 0, 221, 133, 222, 134, 135, 0, 0,
	448, 0, 0, 136, 223, 0, 137, 0, 224, 138,
	139, 140, 141, 0, 225, 142, 226, 143, 0, 144,
	145, 146, 227, 147, 148, 0, 150, 151, 149, 152,
	0, 153, 0, 154, 155, 228, 156, 0, 157, 158,
	159, 0, 229, 160, 161, 0, 162, 163, 0, 164,
	230, 231, 165, 0, 171, 166, 167, 168, 170, 232,
	169, 233, 0, 172, 0, 173, 174, 0, 234, 235,
	236, 0, 0, 175, 237, 238, 0, 176, 177, 178,
	179, 0, 0, 180, 181, 182, 0, 0, 183, 184,
	185, 239, 240, 0, 0, 186, 74, 0, 0, 0,
	187, 188, 189, 190, 0, 0, 0, 0, 0, 0,
	0, 0, 77, 78, 0, 79, 0, 0, 0, 0,
	191, 0, 0, 0, 1098, 80, 81, 192, 193, 194,
	195, 82, 196, 197, 0, 83, 198, 199, 84, 0,
	0, 200, 201, 202, 0, 203, 0, 0, 0, 85,
	86, 87, 0, 88, 0, 89, 90, 91, 0, 0,
	92, 93, 0, 0, 0, 0, 0, 0, 94, 95,
	96, 97, 204, 98, 205, 206, 0, 99, 0, 100,
	0, 0, 0, 101, 102, 0, 103, 0, 0, 0,
	207, 104, 105, 208, 209, 0, 0, 0, 106, 107,
	210, 0, 108, 0, 109, 0, 0, 0, 0, 110,
	211, 0, 212, 0, 111, 112, 113, 213, 214, 0,
	0, 116, 0, 114, 0, 0, 115, 215, 216, 217,
	218, 0, 219, 0, 0, 117, 0, 118, 119, 0,
	0, 220, 0, 120, 0, 0, 121, 0, 0, 122,
	0, 123, 124, 125, 126, 127, 0, 128, 129, 132,
	130, 0, 131, 0, 221, 133, 222, 134, 135, 0,
	0, 0, 0, 0, 136, 223, 0, 137, 0, 224,
	138, 139, 140, 141, 0, 225, 142, 226, 143, 0,
	144, 145, 146, 227, 147, 148, 0, 150, 151, 149,
	152, 0, 153, 0, 154, 155, 228, 156, 0, 157,
	158, 159, 0, 229, 160, 161, 0, 162, 163, 0,
	164, 230, 231, 165, 0, 171, 166, 167, 168, 170,
	232, 169, 233, 0, 172, 0, 173, 174, 0, 234,
	235, 236, 0, 0, 175, 237, 238, 0, 176, 177,
	178, 179, 0, 0, 180, 181, 182, 0, 0, 183,
	184, 185, 239, 240, 0, 0, 186, 0, 74, 0,
	0, 187, 188, 189, 190, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 77, 78, 0, 79, 0, 0,
	0, 0, 191, 0, 0, 0, 686, 80, 81, 192,
	193, 194, 195, 82, 196, 197, 0, 83, 198, 199,
	84, 0, 0, 200, 201, 202, 0, 203, 0, 0,
	0, 85, 86, 87, 0, 88, 0, 89, 90, 91,
	0, 0, 92, 93, 0, 0, 0, 0, 0, 0,
	94, 95, 96, 97, 204, 98, 205, 206, 0, 99,
	0, 100, 0, 0, 0, 101, 102, 0, 103, 0,
	0, 0, 207, 104, 105, 208, 209, 0, 0, 0,
	106, 107, 210, 0, 108, 0, 109, 0, 0, 0,
	0, 110, 211, 0, 212, 0, 111, 112, 113, 213,
	214, 0, 0, 116, 0, 114, 0, 0, 115, 215,
	216, 217, 218, 0, 219, 0, 0, 117, 0, 118,
	119, 0, 0, 220, 0, 120, 0, 0, 121, 0,
	0, 122, 0, 123, 124, 125, 126, 127, 0, 128,
	129, 132, 130, 0, 131, 0, 221, 133, 222, 134,
	135, 0, 0, 0, 0, 0, 136, 223, 0, 137,
	0, 224, 138, 139, 140, 141, 0, 225, 142, 226,
	143, 0, 144, 145, 146, 227, 147, 148, 0, 150,
	151, 149, 152, 0, 153, 0, 154, 155, 228, 156,
	0, 157, 158, 159, 0, 229, 160, 161, 0, 162,
	163, 0, 164, 230, 231, 165, 0, 171, 166, 167,
	168, 170, 232, 169, 233, 0, 172, 0, 173, 174,
	0, 234, 235, 236, 0, 0, 175, 237, 238, 0,
	176, 177, 178, 179, 0, 0, 180, 181, 182, 0,
	0, 183, 184, 185, 239, 240, 0, 0, 186, 74,
	0, 0, 0, 187, 188, 189, 190, 0, 0, 0,
	0, 0, 0, 0, 0, 77, 78, 0, 79, 0,
	0, 0, 0, 191, 0, 0, 0, 1002, 80, 81,
	192, 193, 194, 195, 82, 196, 197, 0, 83, 198,
	199, 84, 0, 0, 200, 201, 202, 0, 203, 0,
	0, 0, 85, 86, 87, 0, 88, 0, 89, 90,
	91, 0, 0, 92, 93, 0, 0, 0, 0, 0,
	0, 94, 95, 96, 97, 204, 98, 205, 206, 0,
	99, 0, 100, 0, 0, 0, 101, 102, 0, 103,
	0, 0, 0, 207, 104, 105, 208, 209, 0, 0,
	0, 106, 107, 210, 0, 108, 0, 109, 0, 0,
	0, 0, 110, 211, 0, 212, 0, 111, 112, 113,
	213, 214, 0, 0, 116, 0, 114, 0, 0, 115,
	215, 216, 217, 218, 0, 219, 0, 0, 117, 0,
	118, 119, 0, 0, 220, 0, 120, 0, 0, 121,
	0, 0, 122, 0, 123, 124, 125, 126, 127, 0,
	128, 129, 132, 130, 0, 131, 0, 221, 133, 222,
	134, 135, 0, 0, 0, 0, 0, 136, 223, 0,
	137, 0, 224, 138, 139, 140, 141, 0, 225, 142,
	226, 143, 0, 144, 145, 146, 227, 147, 148, 0,
	150, 151, 149, 152, 0, 153, 0, 154, 155, 228,
	156, 0, 157, 158, 159, 0, 229, 160, 161, 0,
	162, 163, 0, 164, 230, 231, 165, 0, 171, 166,
	167, 168, 170, 232, 169, 233, 0, 172, 0, 173,
	174, 0, 234, 235, 236, 0, 0, 175, 237, 238,
	0, 176, 177, 178, 179, 0, 0, 180, 181, 182,
	0, 0, 183, 184, 185, 239, 240, 0, 0, 186,
	74, 0, 0, 0, 187, 188, 189, 190, 0, 0,
	0, 0, 0, 0, 0, 0, 77, 78, 0, 79,
	0, 0, 0, 0, 191, 0, 0, 0, 1554, 80,
	81, 192, 193, 194, 195, 82, 196, 197, 0, 83,
	198, 199, 84, 0, 0, 200, 201, 202, 0, 203,
	0, 0, 0, 85, 86, 87, 0, 88, 0, 89,
	90, 91, 0, 0, 92, 93, 0, 0, 0, 0,
	0, 0, 94, 95, 96, 97, 204, 98, 205, 206,
	0, 99, 0, 100, 0, 0, 0, 101, 102, 0,
	103, 0, 0, 0, 207, 104, 105, 208, 209, 0,
	0, 0, 106, 107, 210, 0, 108, 0, 109, 0,
	0, 0, 0, 110, 211, 0, 212, 0, 111, 112,
	113, 213, 214, 0, 0, 116, 0, 114, 0, 0,
	115, 215, 216, 217, 218, 0, 219, 0, 0, 117,
	0, 118, 119, 0, 0, 220, 0, 120, 0, 0,
	121, 0, 0, 122, 0, 123, 124, 125, 126, 127,
	0, 128, 129, 132, 130, 0, 131, 0, 221, 133,
	222, 134, 135, 0, 0, 0, 0, 0, 136, 223,
	0, 137, 0, 224, 138, 139, 140, 141, 0, 225,
	142, 226, 143, 0, 144, 145, 146, 227, 147, 148,
	0, 150, 151, 149, 152, 0, 153, 0, 154, 155,
	228, 156, 0, 157, 158, 159, 0, 229, 160, 161,
	0, 162, 163, 0, 164, 230, 231, 165, 0, 171,
	166, 167, 168, 170, 232, 169, 233, 0, 172, 0,
	173, 174, 0, 234, 235, 236, 0, 0, 175, 237,
	238, 0, 176, 177, 178, 179, 0, 0, 180, 181,
	182, 0, 0, 183, 184, 185, 239, 240, 0, 0,
	186, 74, 0, 0, 0, 187, 188, 189, 190, 0,
	0, 0, 0, 0, 0, 0, 0, 77, 78, 0,
	79, 0, 0, 0, 0, 191, 0, 0, 0, 666,
	80, 81, 192, 193, 194, 195, 82, 196, 197, 0,
	83, 198, 199, 84, 0, 0, 200, 201, 202, 0,
	203, 0, 0, 0, 85, 86, 87, 0, 88, 0,
	89, 90, 91, 0, 0, 92, 93, 0, 0, 0,
	0, 0, 0, 94, 95, 763, 97, 204, 98, 205,
	206, 0, 99, 0, 100, 0, 0, 0, 101, 102,
	0, 103, 0, 0, 0, 207, 104, 105, 208, 209,
	0, 0, 0, 106, 107, 210, 0, 108, 0, 109,
	0, 0, 0, 0, 110, 211, 0, 212, 0, 111,
	112, 113, 213, 214, 0, 0, 116, 0, 114, 0,
	0, 115, 215, 216, 217, 218, 0, 219, 0, 0,
	117, 0, 118, 119, 0, 0, 220, 0, 120, 0,
	0, 121, 0, 0, 122, 0, 123, 124, 125, 126,
	127, 0, 128, 129, 132, 130, 0, 131, 0, 221,
	133, 222, 134, 135, 0, 0, 0, 0, 0, 136,
	223, 0, 137, 0, 224, 138, 139, 140, 141, 0,
	225, 142, 226, 143, 0, 144, 145, 146, 227, 147,
	148, 0, 150, 151, 149, 152, 0, 153, 0, 154,
	155, 228, 156, 0, 157, 158, 159, 0, 229, 160,
	161, 0, 162, 163, 0, 164, 230, 231, 165, 0,
	171, 166, 167, 168, 170, 232, 169, 233, 0, 172,
	762, 173, 174, 0, 234, 235, 236, 0, 0, 175,
	237, 238, 0, 176, 177, 178, 179, 0, 0, 180,
	181, 182, 0, 0, 183, 184, 185, 239, 240, 0,
	74, 186, 0, 0, 0, 0, 187, 188, 189, 190,
	0, 0, 0, 0, 0, 0, 77, 78, 0, 79,
	0, 0, 0, 766, 191, 0, 0, 0, 0, 80,
	81, 192, 193, 194, 195, 82, 196, 197, 0, 83,
	198, 199, 84, 0, 0, 200, 201, 202, 0, 203,
	0, 0, 0, 85, 86, 87, 0, 88, 0, 89,
	90, 91, 0, 0, 92, 93, 0, 0, 0, 0,
	0, 0, 94, 95, 96, 97, 204, 98, 205, 206,
	0, 99, 0, 100, 0, 0, 0, 101, 102, 0,
	103, 0, 0, 0, 207, 104, 105, 208, 209, 0,
	0, 0, 106, 107, 210, 0, 108, 0, 109, 0,
	0, 0, 0, 110, 211, 0, 212, 0, 111, 112,
	113, 213, 214, 0, 0, 116, 0, 114, 0, 0,
	115, 215, 216, 217, 218, 0, 219, 0, 0, 117,
	0, 118, 119, 0, 0, 220, 0, 120, 0, 0,
	121, 0, 0, 122, 0, 123, 124, 125, 126, 127,
	0, 128, 129, 132, 130, 0, 131, 0, 221, 133,
	222, 134, 135, 0, 0, 0, 0, 0, 136, 223,
	0, 137, 0, 224, 138, 139, 140, 141, 0, 225,
	142, 226, 143, 0, 144, 145, 146, 227, 147, 148,
	0, 150, 151, 149, 152, 0, 153, 0, 154, 155,
	228, 156, 0, 157, 158, 159, 0, 229, 160, 161,
	0, 162, 163, 0, 164, 230, 231, 165, 0, 171,
	166, 167, 168, 170, 232, 169, 233, 0, 172, 0,
	173, 174, 0, 234, 235, 236, 0, 0, 175, 237,
	238, 0, 176, 177, 178, 179, 0, 0, 180, 181,
	182, 0, 0, 183, 184, 185, 239, 240, 0, 485,
	186, 0, 0, 0, 0, 187, 188, 189, 190, 0,
	0, 0, 0, 0, 0, 77, 78, 0, 79, 0,
	0, 0, 766, 191, 0, 0, 0, 0, 80, 81,
	192, 193, 194, 195, 82, 196, 197, 0, 83, 198,
	199, 84, 0, 0, 200, 201, 202, 0, 203, 0,
	266, 0, 85, 86, 87, 0, 88, 0, 89, 90,
	91, 0, 267, 92, 93, 0, 0, 0, 0, 0,
	0, 94, 95, 96, 97, 204, 98, 205, 206, 0,
	99, 0, 100, 0, 0, 0, 101, 102, 0, 103,
	0, 0, 0, 207, 104, 105, 208, 209, 0, 0,
	0, 106, 107, 210, 0, 108, 0, 109, 0, 0,
	268, 0, 110, 211, 0, 212, 0, 111, 112, 113,
	213, 214, 270, 0, 116, 0, 114, 0, 269, 115,
	215, 216, 217, 218, 0, 219, 0, 271, 117, 272,
	118, 119, 0, 0, 220, 273, 120, 274, 0, 121,
	0, 0, 122, 0, 123, 124, 125, 126, 127, 275,
	128, 129, 132, 130, 0, 131, 0, 221, 133, 222,
	134, 135, 0, 0, 0, 0, 0, 136, 223, 276,
	137, 277, 224, 138, 139, 140, 141, 0, 225, 142,
	226, 143, 0, 144, 145, 146, 227, 147, 148, 0,
	150, 151, 149, 152, 0, 153, 278, 154, 155, 228,
	156, 0, 157, 158, 159, 0, 229, 160, 161, 0,
	162, 163, 279, 164, 230, 231, 165, 0, 171, 166,
	167, 168, 170, 232, 169, 233, 0, 172, 0, 173,
	174, 0, 234, 235, 236, 0, 0, 175, 237, 238,
	0, 176, 177, 178, 179, 0, 0, 180, 181, 182,
	0, 0, 183, 184, 185, 239, 240, 74, 0, 186,
	0, 0, 0, 0, 187, 188, 189, 190, 0, 0,
	0, 0, 0, 77, 78, 0, 79, 0, 0, 0,
	0, 191, 0, 0, 0, 0, 80, 81, 192, 193,
	194, 195, 82, 196, 197, 0, 83, 198, 199, 84,
	0, 0, 200, 201, 202, 968, 203, 0, 0, 0,
	85, 86, 87, 0, 88, 966, 89, 90, 91, 0,
	0, 92, 93, 0, 0, 0, 0, 0, 0, 94,
	95, 96, 97, 204, 98, 205, 206, 0, 99, 0,
	100, 0, 0, 0, 101, 102, 0, 103, 0, 0,
	0, 207, 104, 105, 208, 209, 0, 1071, 0, 106,
	107, 210, 0, 108, 0, 109, 971, 0, 0, 0,
	110, 211, 0, 212, 0, 111, 112, 113, 213, 214,
	0, 0, 116, 1069, 114, 0, 0, 115, 215, 216,
	217, 218, 0, 219, 0, 0, 117, 0, 118, 119,
	0, 0, 220, 0, 120, 0, 0, 121, 0, 0,
	122, 0, 123, 124, 125, 126, 127, 0, 128, 129,
	132, 130, 0, 131, 0, 221, 133, 222, 134, 135,
	0, 0, 0, 0, 0, 136, 223, 0, 137, 0,
	224, 138, 139, 140, 141, 0, 225, 142, 226, 143,
	970, 144, 145, 146, 227, 147, 148, 0, 150, 151,
	149, 152, 0, 153, 0, 154, 155, 228, 156, 0,
	157, 158, 159, 0, 229, 160, 161, 0, 162, 163,
	0, 164, 230, 231, 165, 0, 171, 166, 167, 168,
	170, 232, 169, 233, 0, 172, 0, 173, 174, 0,
	234, 235, 236, 0, 0, 175, 237, 238, 0, 176,
	177, 178, 179, 0, 1070, 180, 181, 182, 0, 0,
	183, 184, 185, 239, 240, 74, 0, 186, 0, 0,
	0, 0, 187, 188, 189, 190, 0, 0, 0, 0,
	0, 77, 78, 0, 79, 0, 0, 0, 0, 191,
	0, 0, 0, 0, 80, 81, 192, 193, 194, 195,
	82, 196, 197, 0, 83, 198, 199, 84, 0, 0,
	200, 201, 202, 968, 203, 0, 0, 963, 85, 86,
	87, 0, 88, 966, 89, 90, 91, 0, 0, 92,
	93, 0, 0, 0, 0, 0, 0, 94, 95, 96,
	97, 204, 98, 205, 206, 0, 99, 0, 100, 0,
	0, 0, 101, 102, 0, 103, 0, 0, 0, 207,
	104, 105, 208, 209, 0, 0, 0, 106, 107, 210,
	0, 108, 0, 109, 971, 0, 0, 0, 110, 211,
	0, 212, 0, 111, 112, 113, 962, 214, 0, 0,
	116, 0, 114, 0, 0, 115, 215, 216, 217, 218,
	0, 219, 0, 0, 117, 0, 118, 119, 0, 0,
	220, 0, 120, 0, 0, 121, 0, 0, 122, 0,
	123, 124, 125, 126, 127, 0, 128, 129, 132, 130,
	0, 131, 0, 221, 133, 222, 134, 135, 0, 0,
	0, 0, 0, 136, 223, 0, 137, 0, 224, 138,
	139, 140, 141, 0, 225, 142, 226, 143, 970, 144,
	145, 146, 227, 147, 148, 0, 150, 151, 149, 152,
	0, 153, 0, 154, 155, 228, 156, 0, 157, 158,
	159, 0, 229, 160, 161, 0, 162, 163, 0, 164,
	230, 231, 165, 0, 171, 166, 167, 168, 170, 232,
	169, 233, 0, 172, 0, 173, 174, 0, 234, 235,
	236, 0, 0, 175, 237, 238, 0, 176, 177, 178,
	179, 0, 969, 180, 181, 182, 0, 0, 183, 184,
	185, 239, 240, 74, 0, 186, 0, 0, 0, 0,
	187, 188, 189, 190, 0, 0, 0, 0, 0, 77,
	78, 0, 79, 0, 0, 0, 0, 191, 0, 1334,
	0, 0, 80, 81, 192, 193, 194, 195, 82, 196,
	197, 0, 83, 198, 199, 84, 0, 0, 200, 201,
	202, 0, 203, 0, 0, 0, 85, 86, 87, 0,
	88, 0, 89, 90, 91, 0, 0, 92, 93, 0,
	0, 0, 0, 0, 0, 94, 95, 96, 97, 204,
	98, 205, 206, 0, 99, 0, 100, 0, 0, 0,
	101, 102, 0, 103, 0, 0, 0, 207, 104, 105,
	208, 209, 0, 0, 0, 106, 107, 210, 0, 108,
	0, 109, 0, 0, 0, 0, 110, 211, 0, 212,
	0, 111, 112, 113, 213, 214, 0, 0, 116, 0,
	114, 0, 0, 115, 215, 216, 217, 218, 0, 219,
	0, 0, 117, 0, 118, 119, 0, 0, 220, 0,
	120, 0, 0, 121, 0, 0, 122, 0, 123, 124,
	125, 126, 127, 0, 128, 129, 132, 130, 0, 131,
	0, 221, 133, 222, 134, 135, 0, 0, 0, 0,
	0, 136, 223, 0, 137, 0, 224, 138, 139, 140,
	141, 0, 225, 142, 226, 143, 0, 144, 145, 146,
	227, 147, 148, 0, 150, 151, 149, 152, 0, 153,
	0, 154, 155, 228, 156, 0, 157, 158, 159, 0,
	229, 160, 161, 0, 162, 163, 0, 164, 230, 231,
	165, 0, 171, 166, 167, 168, 170, 232, 169, 233,
	0, 172, 0, 173, 174, 0, 234, 235, 236, 0,
	0, 175, 237, 238, 0, 176, 177, 178, 179, 0,
	0, 180, 181, 182, 0, 0, 183, 184, 185, 239,
	240, 74, 0, 186, 0, 0, 0, 0, 187, 188,
	189, 190, 0, 0, 0, 0, 0, 77, 78, 0,
	79, 0, 0, 0, 0, 191, 0, 0, 0, 0,
	80, 81, 192, 193, 194, 195, 82, 196, 197, 0,
	83, 198, 199, 84, 0, 0, 200, 201, 202, 0,
	203, 0, 0, 0, 85, 86, 87, 0, 88, 0,
	89, 90, 91, 0, 0, 92, 93, 0, 0, 0,
	0, 0, 0, 94, 95, 96, 97, 204, 98, 205,
	206, 0, 99, 0, 100, 0, 0, 0, 101, 102,
	0, 103, 0, 0, 0, 207, 104, 105, 208, 209,
	0, 0, 0, 106, 107, 210, 0, 108, 0, 109,
	0, 0, 0, 0, 110, 211, 0, 212, 0, 111,
	112, 113, 213, 214, 0, 0, 116, 0, 114, 0,
	0, 115, 215, 216, 217, 218, 0, 219, 0, 0,
	117, 0, 118, 119, 0, 0, 220, 0, 120, 0,
	0, 121, 0, 0, 122, 0, 123, 124, 125, 126,
	127, 0, 128, 129, 132, 130, 0, 131, 0, 221,
	133, 222, 134, 135, 0, 0, 448, 0, 0, 136,
	223, 0, 137, 0, 224, 138, 139, 140, 141, 0,
	225, 142, 226, 143, 0, 144, 145, 146, 227, 147,
	148, 0, 150, 151, 149, 152, 0, 153, 0, 154,
	155, 228, 156, 0, 157, 158, 159, 0, 229, 160,
	161, 0, 162, 163, 0, 164, 230, 231, 165, 0,
	171, 166, 167, 168, 170, 232, 169, 233, 0, 172,
	0, 173, 174, 0, 234, 235, 236, 0, 0, 175,
	237, 238, 0, 176, 177, 178, 179, 0, 0, 180,
	181, 182, 0, 0, 183, 184, 185, 239, 240, 74,
	0, 186, 0, 0, 0, 0, 187, 188, 189, 190,
	0, 0, 0, 0, 0, 77, 78, 0, 79, 0,
	0, 0, 0, 191, 0, 0, 0, 0, 80, 81,
	192, 193, 194, 195, 82, 196, 197, 0, 83, 198,
	199, 84, 0, 0, 200, 201, 202, 0, 203, 0,
	0, 0, 85, 86, 87, 0, 88, 0, 89, 90,
	91, 0, 0, 92, 93, 0, 0, 0, 0, 0,
	0, 94, 95, 96, 97, 204, 98, 205, 206, 0,
	99, 0, 100, 0, 0, 0, 101, 102, 0, 103,
	0, 0, 0, 207, 104, 105, 208, 209, 0, 0,
	0, 106, 107, 210, 0, 108, 0, 109, 0, 0,
	0, 0, 110, 211, 0, 212, 0, 111, 112, 113,
	714, 214, 0, 0, 116, 0, 114, 0, 0, 115,
	215, 216, 217, 218, 0, 219, 0, 0, 117, 0,
	118, 119, 0, 0, 220, 0, 120, 0, 0, 121,
	0, 0, 122, 0, 123, 124, 125, 126, 127, 0,
	128, 129, 132, 130, 0, 131, 0, 221, 133, 222,
	134, 135, 0, 0, 448, 0, 0, 136, 223, 0,
	137, 0, 224, 138, 139, 140, 141, 0, 225, 142,
	226, 143, 0, 144, 145, 146, 227, 147, 148, 0,
	150, 151, 149, 152, 0, 153, 0, 154, 155, 228,
	156, 0, 157, 158, 159, 0, 229, 160, 161, 0,
	162, 163, 0, 164, 230, 231, 165, 0, 171, 166,
	167, 168, 170, 232, 169, 233, 0, 172, 0, 173,
	174, 0, 234, 235, 236, 0, 0, 175, 237, 238,
	0, 176, 177, 178, 179, 0, 0, 180, 181, 182,
	0, 0, 183, 184, 185, 239, 240, 74, 0, 186,
	0, 0, 0, 0, 187, 188, 189, 190, 0, 0,
	0, 0, 0, 77, 78, 496, 79, 0, 0, 0,
	0, 191, 0, 0, 0, 0, 80, 81, 192, 193,
	194, 195, 82, 196, 197, 0, 83, 198, 199, 84,
	0, 0, 200, 201, 202, 0, 203, 0, 0, 0,
	85, 86, 87, 0, 88, 0, 89, 90, 91, 0,
	0, 92, 93, 0, 0, 0, 0, 0, 0, 94,
	95, 96, 97, 204, 98, 205, 206, 0, 99, 0,
	100, 0, 0, 0, 101, 102, 0, 103, 0, 0,
	0, 207, 104, 105, 208, 209, 0, 0, 0, 106,
	107, 210, 0, 108, 0, 109, 0, 0, 0, 0,
	110, 211, 0, 212, 0, 111, 112, 113, 213, 214,
	0, 0, 116, 0, 114, 0, 0, 115, 215, 216,
	217, 218, 0, 219, 0, 0, 117, 0, 118, 119,
	0, 0, 220, 0, 120, 0, 0, 121, 0, 0,
	122, 0, 123, 124, 125, 126, 127, 0, 128, 129,
	132, 130, 0, 131, 0, 221, 133, 222, 134, 135,
	0, 0, 0, 0, 0, 136, 223, 0, 137, 0,
	224, 138, 139, 140, 141, 0, 225, 142, 226, 143,
	0, 144, 145, 146, 227, 147, 148, 0, 150, 151,
	149, 152, 0, 153, 0, 154, 155, 228, 156, 0,
	157, 158, 159, 0, 229, 160, 161, 0, 162, 163,
	0, 164, 230, 231, 165, 0, 171, 166, 167, 168,
	170, 232, 169, 233, 0, 172, 0, 173, 174, 0,
	234, 235, 236, 0, 0, 175, 237, 238, 0, 176,
	177, 178, 179, 0, 0, 180, 181, 182, 0, 0,
	183, 184, 185, 239, 240, 74, 0, 186, 0, 0,
	0, 0, 187, 188, 189, 190, 0, 0, 0, 0,
	0, 77, 78, 0, 79, 0, 0, 0, 0, 191,
	0, 0, 0, 0, 80, 81, 192, 193, 194, 195,
	82, 196, 197, 0, 83, 198, 199, 84, 0, 0,
	200, 201, 202, 0, 203, 0, 0, 0, 85, 86,
	87, 0, 88, 0, 89, 90, 91, 0, 0, 92,
	93, 0, 0, 0, 0, 0, 0, 94, 95, 96,
	97, 204, 98, 205, 206, 0, 99, 0, 100, 0,
	0, 0, 101, 102, 0, 103, 0, 0, 0, 207,
	104, 105, 208, 209, 0, 0, 0, 106, 107, 210,
	0, 108, 0, 109, 0, 0, 0, 0, 110, 211,
	0, 212, 0, 111, 112, 113, 453, 214, 0, 0,
	116, 0, 114, 0, 0, 115, 215, 216, 217, 218,
	0, 219, 0, 0, 117, 0, 118, 119, 0, 0,
	220, 0, 120, 0, 0, 121, 0, 0, 122, 0,
	123, 124, 125, 126, 127, 0, 128, 129, 132, 130,
	0, 131, 0, 221, 133, 222, 134, 135, 0, 0,
	448, 0, 0, 136, 223, 0, 137, 0, 224, 138,
	139, 140, 141, 0, 225, 142, 226, 143, 0, 144,
	145, 146, 227, 147, 148, 0, 150, 151, 149, 152,
	0, 153, 0, 154, 155, 228, 156, 0, 157, 158,
	159, 0, 229, 160, 161, 0, 162, 163, 0, 164,
	230, 231, 165, 0, 171, 166, 167, 168, 170, 232,
	169, 233, 0, 172, 0, 173, 174, 0, 234, 235,
	236, 0, 0, 175, 237, 238, 0, 176, 177, 178,
	179, 0, 0, 180, 181, 182, 0, 0, 183, 184,
	185, 239, 240, 74, 0, 186, 0, 0, 0, 0,
	187, 188, 189, 190, 0, 0, 0, 0, 0, 77,
	78, 364, 79, 0, 0, 0, 0, 191, 0, 0,
	0, 0, 80, 81, 192, 193, 194, 195, 82, 196,
	197, 0, 83, 198, 199, 84, 0, 0, 200, 201,
	202, 0, 203, 0, 0, 0, 85, 86, 87, 0,
	88, 0, 89, 90, 91, 0, 0, 92, 93, 0,
	0, 0, 0, 0, 0, 94, 95, 96, 97, 204,
	98, 205, 206, 0, 99, 0, 100, 0, 0, 0,
	101, 102, 0, 103, 0, 0, 0, 207, 104, 105,
	208, 209, 0, 0, 0, 106, 107, 210, 0, 108,
	0, 109, 0, 0, 0, 0, 110, 211, 0, 212,
	0, 111, 112, 113, 213, 214, 0, 0, 116, 0,
	114, 0, 0, 115, 215, 216, 217, 218, 0, 219,
	0, 0, 117, 0, 118, 119, 0, 0, 220, 0,
	120, 0, 0, 121, 0, 0, 122, 0, 123, 124,
	125, 126, 127, 0, 128, 129, 132, 130, 0, 131,
	0, 221, 133, 222, 134, 135, 0, 0, 0, 0,
	0, 136, 223, 0, 137, 0, 224, 138, 139, 140,
	141, 0, 225, 142, 226, 363, 0, 144, 145, 146,
	227, 147, 148, 0, 150, 151, 149, 152, 0, 153,
	0, 154, 155, 228, 156, 0, 157, 158, 159, 0,
	229, 160, 161, 0, 162, 163, 0, 164, 230, 231,
	165, 0, 171, 166, 167, 168, 170, 232, 169, 233,
	0, 172, 0, 173, 174, 0, 234, 235, 236, 0,
	0, 175, 237, 238, 0, 176, 177, 178, 179, 0,
	0, 180, 181, 182, 0, 0, 183, 184, 185, 239,
	240, 74, 0, 186, 0, 0, 0, 0, 187, 188,
	189, 190, 0, 0, 0, 0, 0, 77, 78, 0,
	79, 0, 0, 0, 0, 191, 0, 0, 0, 0,
	80, 81, 192, 193, 194, 195, 82, 196, 197, 0,
	83, 198, 199, 84, 0, 0, 200, 201, 202, 0,
	203, 0, 0, 0, 85, 86, 87, 0, 88, 0,
	89, 90, 91, 0, 0, 92, 93, 0, 0, 0,
	0, 0, 0, 94, 95, 96, 97, 204, 98, 205,
	206, 0, 99, 0, 100, 0, 0, 0, 101, 102,
	0, 103, 0, 0, 0, 207, 104, 105, 208, 209,
	0, 0, 0, 106, 107, 210, 0, 108, 0, 109,
	0, 0, 0, 0, 110, 211, 0, 212, 0, 111,
	112, 113, 213, 214, 0, 0, 116, 0, 114, 0,
	0, 115, 215, 216, 217, 218, 0, 219, 0, 0,
	117, 0, 118, 119, 0, 0, 220, 0, 120, 0,
	0, 121, 0, 0, 122, 0, 123, 124, 125, 126,
	127, 0, 128, 129, 132, 130, 0, 131, 0, 221,
	133, 222, 134, 135, 0, 0, 0, 0, 0, 136,
	223, 0, 137, 0, 224, 138, 139, 140, 141, 0,
	225, 142, 226, 143, 0, 144, 145, 146, 227, 147,
	148, 0, 150, 151, 149, 152, 0, 153, 0, 154,
	155, 228, 156, 0, 157, 158, 159, 0, 229, 160,
	161, 0, 162, 163, 0, 164, 230, 231, 165, 0,
	171, 166, 167, 168, 170, 232, 169, 233, 0, 172,
	0, 173, 174, 0, 234, 235, 236, 0, 0, 175,
	237, 238, 0, 176, 177, 178, 179, 0, 0, 180,
	181, 182, 0, 0, 183, 184, 185, 239, 240, 74,
	0, 186, 0, 0, 0, 0, 187, 188, 189, 190,
	0, 0, 0, 0, 0, 77, 78, 0, 79, 0,
	0, 0, 0, 191, 0, 0, 0, 0, 80, 81,
	192, 193, 194, 195, 82, 196, 197, 0, 83, 198,
	199, 84, 0, 0, 200, 201, 202, 0, 203, 0,
	0, 0, 85, 86, 87, 0, 88, 0, 89, 90,
	91, 0, 0, 92, 93, 0, 0, 0, 0, 0,
	0, 94, 95, 96, 97, 204, 98, 205, 206, 0,
	99, 0, 100, 0, 0, 0, 101, 102, 0, 103,
	0, 0, 0, 207, 104, 105, 208, 209, 0, 0,
	0, 106, 107, 210, 0, 108, 0, 109, 0, 0,
	0, 0, 110, 211, 0, 212, 0, 111, 112, 113,
	1247, 214, 0, 0, 116, 0, 114, 0, 0, 115,
	215, 216, 217, 218, 0, 219, 0, 0, 117, 0,
	118, 119, 0, 0, 220, 0, 120, 0, 0, 121,
	0, 0, 122, 0, 123, 124, 125, 126, 127, 0,
	128, 129, 132, 130, 0, 131, 0, 221, 133, 222,
	134, 135, 0, 0, 0, 0, 0, 136, 223, 0,
	137, 0, 224, 138, 139, 140, 141, 0, 225, 142,
	226, 143, 0, 144, 145, 146, 227, 147, 148, 0,
	150, 151, 149, 152, 0, 153, 0, 154, 155, 228,
	156, 0, 157, 158, 159, 0, 229, 160, 161, 0,
	162, 163, 0, 164, 230, 231, 165, 0, 171, 166,
	167, 168, 170, 232, 169, 233, 0, 172, 0, 173,
	174, 0, 234, 235, 236, 0, 0, 175, 237, 238,
	0, 176, 177, 178, 179, 0, 0, 180, 181, 182,
	0, 0, 183, 184, 185, 239, 240, 74, 0, 186,
	0, 0, 0, 0, 187, 188, 189, 190, 0, 0,
	0, 0, 0, 77, 78, 0, 79, 0, 0, 0,
	0, 191, 0, 0, 0, 0, 80, 81, 192, 193,
	194, 195, 82, 196, 197, 0, 83, 198, 199, 84,
	0, 0, 200, 201, 202, 0, 203, 0, 0, 0,
	85, 86, 87, 0, 88, 0, 89, 90, 91, 0,
	0, 92, 93, 0, 0, 0, 0, 0, 0, 94,
	95, 96, 97, 204, 98, 205, 206, 0, 99, 0,
	100, 0, 0, 0, 101, 102, 0, 103, 0, 0,
	0, 207, 104, 105, 208, 209, 0, 0, 0, 106,
	107, 210, 0, 108, 0, 109, 0, 0, 0, 0,
	110, 211, 0, 212, 0, 111, 112, 113, 1245, 214,
	0, 0, 116, 0, 114, 0, 0, 115, 215, 216,
	217, 218, 0, 219, 0, 0, 117, 0, 118, 119,
	0, 0, 220, 0, 120, 0, 0, 121, 0, 0,
	122, 0, 123, 124, 125, 126, 127, 0, 128, 129,
	132, 130, 0, 131, 0, 221, 133, 222, 134, 135,
	0, 0, 0, 0, 0, 136, 223, 0, 137, 0,
	224, 138, 139, 140, 141, 0, 225, 142, 226, 143,
	0, 144, 145, 146, 227, 147, 148, 0, 150, 151,
	149, 152, 0, 153, 0, 154, 155, 228, 156, 0,
	157, 158, 159, 0, 229, 160, 161, 0, 162, 163,
	0, 164, 230, 231, 165, 0, 171, 166, 167, 168,
	170, 232, 169, 233, 0, 172, 0, 173, 174, 0,
	234, 235, 236, 0, 0, 175, 237, 238, 0, 176,
	177, 178, 179, 0, 0, 180, 181, 182, 0, 0,
	183, 184, 185, 239, 240, 74, 0, 186, 0, 0,
	0, 0, 187, 188, 189, 190, 0, 0, 0, 0,
	0, 77, 78, 0, 79, 0, 0, 0, 0, 191,
	0, 0, 0, 0, 80, 81, 192, 193, 194, 195,
	82, 196, 197, 0, 83, 198, 199, 84, 0, 0,
	200, 201, 202, 0, 203, 0, 0, 0, 85, 86,
	87, 0, 88, 0, 89, 90, 91, 0, 0, 92,
	93, 0, 0, 0, 0, 0, 0, 94, 95, 96,
	97, 204, 98, 205, 206, 0, 99, 0, 100, 0,
	0, 0, 101, 102, 0, 103, 0, 0, 0, 207,
	104, 105, 208, 209, 0, 0, 0, 106, 107, 210,
	0, 108, 0, 109, 0, 0, 0, 0, 110, 211,
	0, 212, 0, 111, 112, 113, 1234, 214, 0, 0,
	116, 0, 114, 0, 0, 115, 215, 216, 217, 218,
	0, 219, 0, 0, 117, 0, 118, 119, 0, 0,
	220, 0, 120, 0, 0, 121, 0, 0, 122, 0,
	123, 124, 125, 126, 127, 0, 128, 129, 132, 130,
	0, 131, 0, 221, 133, 222, 134, 135, 0, 0,
	0, 0, 0, 136, 223, 0, 137, 0, 224, 138,
	139, 140, 141, 0, 225, 142, 226, 143, 0, 144,
	145, 146, 227, 147, 148, 0, 150, 151, 149, 152,
	0, 153, 0, 154, 155, 228, 156, 0, 157, 158,
	159, 0, 229, 160, 161, 0, 162, 163, 0, 164,
	230, 231, 165, 0, 171, 166, 167, 168, 170, 232,
	169, 233, 0, 172, 0, 173, 174, 0, 234, 235,
	236, 0, 0, 175, 237, 238, 0, 176, 177, 178,
	179, 0, 0, 180, 181, 182, 0, 0, 183, 184,
	185, 239, 240, 74, 0, 186, 0, 0, 0, 0,
	187, 188, 189, 190, 0, 0, 0, 0, 0, 77,
	78, 0, 79, 0, 0, 0, 0, 191, 0, 0,
	0, 0, 80, 81, 192, 193, 194, 195, 82, 196,
	197, 0, 83, 198, 199, 84, 0, 0, 200, 201,
	202, 0, 203, 0, 0, 0, 85, 86, 87, 0,
	88, 0, 89, 90, 91, 0, 0, 92, 93, 0,
	0, 0, 0, 0, 0, 94, 95, 96, 97, 204,
	98, 205, 206, 0, 99, 0, 100, 0, 0, 0,
	101, 102, 0, 103, 0, 0, 0, 207, 104, 105,
	208, 209, 0, 0, 0, 106, 107, 210, 0, 108,
	0, 109, 0, 0, 0, 0, 110, 211, 0, 212,
	0, 111, 112, 113, 833, 214, 0, 0, 116, 0,
	114, 0, 0, 115, 215, 216, 217, 218, 0, 219,
	0, 0, 117, 0, 118, 119, 0, 0, 220, 0,
	120, 0, 0, 121, 0, 0, 122, 0, 123, 124,
	125, 126, 127, 0, 128, 129, 132, 130, 0, 131,
	0, 221, 133, 222, 134, 135, 0, 0, 0, 0,
	0, 136, 223, 0, 137, 0, 224, 138, 139, 140,
	141, 0, 225, 142, 226, 143, 0, 144, 145, 146,
	227, 147, 148, 0, 150, 151, 149, 152, 0, 153,
	0, 154, 155, 228, 156, 0, 157, 158, 159, 0,
	229, 160, 161, 0, 162, 163, 0, 164, 230, 231,
	165, 0, 171, 166, 167, 168, 170, 232, 169, 233,
	0, 172, 0, 173, 174, 0, 234, 235, 236, 0,
	0, 175, 237, 238, 0, 176, 177, 178, 179, 0,
	0, 180, 181, 182, 0, 0, 183, 184, 185, 239,
	240, 74, 0, 186, 0, 0, 0, 0, 187, 188,
	189, 190, 0, 0, 0, 0, 0, 77, 78, 0,
	79, 0, 0, 0, 0, 191, 0, 0, 0, 0,
	80, 81, 192, 193, 194, 195, 82, 196, 197, 0,
	83, 198, 199, 84, 0, 0, 200, 201, 202, 0,
	203, 0, 0, 0, 85, 86, 87, 0, 88, 0,
	89, 90, 91, 0, 0, 92, 93, 0, 0, 0,
	0, 0, 0, 94, 95, 96, 97, 204, 98, 205,
	206, 0, 99, 0, 100, 0, 0, 0, 101, 102,
	0, 103, 0, 0, 0, 207, 104, 105, 208, 209,
	0, 0, 0, 106, 107, 210, 0, 108, 0, 109,
	0, 0, 0, 0, 110, 211, 0, 212, 0, 111,
	112, 113, 213, 214, 0, 0, 116, 0, 114, 0,
	0, 115, 215, 216, 217, 218, 0, 219, 0, 0,
	117, 0, 118, 119, 0, 0, 220, 0, 120, 0,
	0, 121, 0, 0, 122, 0, 123, 124, 125, 126,
	127, 0, 128, 129, 132, 130, 0, 131, 0, 221,
	133, 222, 134, 135, 0, 0, 0, 0, 0, 136,
	223, 0, 137, 0, 224, 138, 139, 140, 141, 0,
	225, 142, 226, 143, 0, 144, 145, 146, 227, 147,
	148, 0, 150, 151, 149, 152, 0, 153, 0, 154,
	155, 228, 156, 0, 378, 158, 159, 0, 229, 160,
	161, 0, 162, 163, 0, 164, 230, 231, 165, 0,
	171, 166, 167, 168, 170, 232, 169, 233, 0, 172,
	0, 173, 174, 0, 234, 235, 236, 0, 0, 175,
	237, 238, 0, 176, 177, 178, 179, 0, 0, 180,
	181, 182, 0, 0, 183, 184, 185, 239, 240, 74,
	0, 186, 0, 0, 0, 0, 187, 188, 189, 190,
	0, 0, 0, 0, 0, 77, 78, 0, 79, 0,
	0, 0, 0, 191, 0, 699, 0, 0, 80, 81,
	192, 193, 194, 195, 82, 196, 197, 0, 83, 198,
	199, 84, 0, 0, 200, 201, 202, 0, 203, 0,
	0, 0, 85, 86, 87, 0, 88, 0, 89, 90,
	91, 0, 0, 92, 93, 0, 0, 0, 0, 0,
	0, 94, 95, 96, 97, 204, 98, 205, 206, 0,
	99, 0, 100, 0, 0, 0, 101, 102, 0, 103,
	0, 0, 0, 207, 104, 105, 208, 209, 0, 0,
	0, 106, 107, 210, 0, 108, 0, 109, 0, 0,
	0, 0, 110, 211, 0, 212, 0, 111, 112, 113,
	213, 214, 0, 0, 116, 0, 114, 0, 0, 115,
	215, 216, 217, 218, 0, 219, 0, 0, 117, 0,
	118, 119, 0, 0, 220, 0, 120, 0, 0, 121,
	0, 0, 122, 0, 123, 124, 125, 126, 127, 0,
	128, 129, 132, 130, 0, 131, 0, 221, 133, 222,
	134, 135, 0, 0, 0, 0, 0, 136, 223, 0,
	137, 0, 224, 138, 139, 140, 141, 0, 225, 142,
	226, 143, 0, 144, 145, 146, 227, 147, 148, 0,
	150, 151, 149, 152, 0, 153, 0, 154, 155, 228,
	156, 0, 157, 158, 159, 0, 229, 160, 161, 0,
	0, 163, 0, 164, 230, 231, 165, 0, 171, 166,
	167, 168, 170, 232, 169, 233, 0, 172, 0, 173,
	174, 0, 234, 235, 236, 0, 0, 175, 237, 238,
	0, 176, 177, 178, 179, 0, 0, 180, 181, 182,
	0, 0, 183, 184, 185, 239, 240, 74, 0, 186,
	0, 0, 0, 0, 187, 188, 189, 190, 0, 0,
	0, 0, 0, 77, 78, 0, 79, 0, 0, 0,
	0, 191, 0, 0, 0, 0, 80, 81, 192, 193,
	194, 195, 82, 196, 197, 0, 83, 198, 199, 84,
	0, 0, 200, 201, 202, 0, 203, 0, 0, 0,
	85, 86, 87, 0, 88, 0, 89, 90, 91, 0,
	0, 92, 93, 0, 0, 0, 0, 0, 0, 94,
	95, 96, 97, 204, 98, 205, 206, 0, 99, 0,
	100, 0, 0, 0, 101, 102, 0, 103, 0, 0,
	0, 207, 104, 105, 208, 209, 0, 0, 0, 106,
	107, 210, 0, 108, 0, 109, 0, 0, 0, 0,
	110, 211, 0, 212, 0, 111, 112, 113, 547, 214,
	0, 0, 116, 0, 114, 0, 0, 115, 215, 216,
	217, 218, 0, 219, 0, 0, 117, 0, 118, 119,
	0, 0, 220, 0, 120, 0, 0, 121, 0, 0,
	122, 0, 123, 124, 125, 126, 127, 0, 128, 129,
	132, 130, 0, 131, 0, 221, 133, 222, 134, 135,
	0, 0, 0, 0, 0, 136, 223, 0, 137, 0,
	224, 138, 139, 140, 141, 0, 225, 142, 226, 143,
	0, 144, 145, 146, 227, 147, 148, 0, 150, 151,
	149, 152, 0, 153, 0, 154, 155, 228, 156, 0,
	157, 158, 159, 0, 229, 160, 161, 0, 162, 163,
	0, 164, 230, 231, 165, 0, 171, 166, 167, 168,
	170, 232, 169, 233, 0, 172, 0, 173, 174, 0,
	234, 235, 236, 0, 0, 175, 237, 238, 0, 176,
	177, 178, 179, 0, 0, 180, 181, 182, 0, 0,
	183, 184, 185, 239, 240, 74, 0, 186, 0, 0,
	0, 0, 187, 188, 189, 190, 0, 0, 0, 0,
	0, 77, 78, 0, 79, 0, 0, 0, 0, 191,
	0, 0, 0, 0, 80, 81, 192, 193, 194, 195,
	82, 196, 197, 0, 83, 198, 199, 84, 0, 0,
	200, 201, 202, 0, 203, 0, 0, 0, 85, 86,
	87, 0, 88, 0, 89, 90, 91, 0, 0, 92,
	93, 0, 0, 0, 0, 0, 0, 94, 95, 96,
	97, 204, 98, 205, 206, 0, 99, 0, 100, 0,
	0, 0, 101, 102, 0, 103, 0, 0, 0, 207,
	104, 105, 208, 209, 0, 0, 0, 106, 107, 210,
	0, 108, 0, 109, 0, 0, 0, 0, 110, 211,
	0, 212, 0, 111, 112, 113, 542, 214, 0, 0,
	116, 0, 114, 0, 0, 115, 215, 216, 217, 218,
	0, 219, 0, 0, 117, 0, 118, 119, 0, 0,
	220, 0, 120, 0, 0, 121, 0, 0, 122, 0,
	123, 124, 125, 126, 127, 0, 128, 129, 132, 130,
	0, 131, 0, 221, 133, 222, 134, 135, 0, 0,
	0, 0, 0, 136, 223, 0, 137, 0, 224, 138,
	139, 140, 141, 0, 225, 142, 226, 143, 0, 144,
	145, 146, 227, 147, 148, 0, 150, 151, 149, 152,
	0, 153, 0, 154, 155, 228, 156, 0, 157, 158,
	159, 0, 229, 160, 161, 0, 162, 163, 0, 164,
	230, 231, 165, 0, 171, 166, 167, 168, 170, 232,
	169, 233, 0, 172, 0, 173, 174, 0, 234, 235,
	236, 0, 0, 175, 237, 238, 0, 176, 177, 178,
	179, 0, 0, 180, 181, 182, 0, 0, 183, 184,
	185, 239, 240, 74, 0, 186, 0, 0, 0, 0,
	187, 188, 189, 190, 0, 0, 0, 0, 0, 77,
	78, 0, 79, 0, 0, 0, 0, 191, 0, 0,
	0, 0, 80, 81, 192, 193, 194, 195, 82, 196,
	197, 0, 83, 198, 199, 84, 0, 0, 200, 201,
	502, 0, 203, 0, 0, 0, 85, 86, 87, 0,
	88, 0, 89, 90, 91, 0, 0, 92, 93, 0,
	0, 0, 0, 0, 0, 94, 95, 96, 97, 204,
	98, 205, 206, 0, 99, 0, 100, 0, 0, 0,
	101, 102, 0, 103, 0, 0, 0, 207, 104, 105,
	208, 209, 0, 0, 0, 106, 107, 210, 0, 108,
	0, 109, 0, 0, 0, 0, 110, 211, 0, 212,
	0, 111, 112, 113, 213, 214, 0, 0, 116, 0,
	114, 0, 0, 115, 215, 216, 217, 218, 0, 219,
	0, 0, 117, 0, 118, 119, 0, 0, 220, 0,
	120, 0, 0, 121, 0, 0, 122, 0, 123, 124,
	125, 126, 389, 0, 128, 129, 132, 130, 0, 131,
	0, 221, 133, 222, 134, 135, 0, 0, 0, 0,
	0, 136, 223, 0, 137, 0, 224, 138, 139, 140,
	141, 0, 225, 142, 226, 143, 0, 144, 145, 146,
	227, 147, 148, 0, 150, 151, 149, 152, 0, 153,
	0, 154, 155, 228, 156, 0, 157, 158, 159, 0,
	229, 160, 161, 0, 162, 163, 0, 164, 230, 231,
	165, 0, 171, 166, 167, 168, 170, 232, 169, 233,
	0, 172, 0, 173, 174, 0, 388, 235, 236, 0,
	0, 384, 237, 238, 0, 176, 177, 178, 179, 0,
	0, 180, 181, 182, 0, 0, 183, 184, 185, 239,
	240, 74, 0, 186, 0, 0, 0, 0, 187, 188,
	189, 190, 0, 0, 0, 0, 0, 77, 78, 0,
	79, 0, 0, 0, 0, 191, 0, 0, 0, 0,
	80, 81, 192, 193, 194, 195, 82, 196, 197, 0,
	83, 198, 199, 84, 0, 0, 200, 201, 202, 0,
	203, 0, 0, 0, 85, 86, 87, 0, 88, 0,
	89, 90, 91, 0, 0, 92, 93, 0, 0, 0,
	0, 0, 0, 94, 95, 96, 97, 204, 98, 205,
	206, 0, 99, 0, 100, 0, 0, 0, 101, 102,
	0, 103, 0, 0, 0, 207, 104, 105, 208, 209,
	0, 0, 0, 106, 107, 210, 0, 108, 0, 109,
	0, 0, 0, 0, 110, 211, 0, 212, 0, 111,
	112, 113, 213, 214, 0, 0, 116, 0, 114, 0,
	0, 115, 215, 216, 217, 218, 0, 219, 0, 0,
	117, 0, 118, 119, 0, 0, 220, 0, 120, 0,
	0, 121, 0, 0, 122, 0, 123, 124, 125, 126,
	389, 0, 128, 129, 132, 130, 0, 131, 0, 221,
	133, 222, 134, 135, 0, 0, 0, 0, 0, 136,
	223, 0, 137, 0, 224, 138, 139, 140, 141, 0,
	225, 142, 226, 143, 0, 144, 145, 146, 227, 147,
	148, 0, 150, 151, 149, 152, 0, 153, 0, 154,
	155, 228, 156, 0, 157, 158, 159, 0, 229, 160,
	161, 0, 162, 163, 0, 164, 230, 231, 165, 0,
	171, 166, 167, 168, 170, 232, 169, 233, 0, 172,
	0, 173, 174, 0, 388, 235, 236, 0, 0, 384,
	237, 238, 0, 176, 177, 178, 179, 0, 0, 180,
	181, 182, 0, 0, 183, 184, 185, 239, 240, 74,
	0, 186, 0, 0, 0, 0, 187, 188, 189, 190,
	0, 0, 0, 0, 0, 77, 78, 0, 79, 0,
	0, 0, 0, 191, 0, 0, 0, 0, 80, 81,
	192, 193, 194, 195, 82, 196, 197, 0, 83, 198,
	199, 84, 0, 0, 200, 201, 202, 0, 203, 0,
	0, 0, 85, 86, 87, 0, 88, 0, 89, 90,
	91, 0, 0, 92, 93, 0, 0, 0, 0, 0,
	0, 94, 95, 96, 97, 204, 98, 205, 206, 0,
	99, 0, 100, 0, 0, 0, 101, 102, 0, 103,
	0, 0, 0, 207, 104, 105, 208, 209, 0, 0,
	0, 106, 107, 210, 0, 108, 0, 109, 0, 0,
	0, 0, 110, 211, 0, 212, 0, 111, 112, 113,
	481, 214, 0, 0, 116, 0, 114, 0, 0, 115,
	215, 216, 217, 218, 0, 219, 0, 0, 117, 0,
	118, 119, 0, 0, 220, 0, 120, 0, 0, 121,
	0, 0, 122, 0, 123, 124, 125, 126, 127, 0,
	128, 129, 132, 130, 0, 131, 0, 221, 133, 222,
	134, 135, 0, 0, 0, 0, 0, 136, 223, 0,
	137, 0, 224, 138, 139, 140, 141, 0, 225, 142,
	226, 143, 0, 144, 145, 146, 227, 147, 148, 0,
	150, 151, 149, 152, 0, 153, 0, 154, 155, 228,
	156, 0, 157, 158, 159, 0, 229, 160, 161, 0,
	162, 163, 0, 164, 230, 231, 165, 0, 171, 166,
	167, 168, 170, 232, 169, 233, 0, 172, 0, 173,
	174, 0, 234, 235, 236, 0, 0, 175, 237, 238,
	0, 176, 177, 178, 179, 0, 0, 180, 181, 182,
	0, 0, 183, 184, 185, 239, 240, 74, 0, 186,
	0, 0, 0, 0, 187, 188, 189, 190, 0, 0,
	0, 0, 0, 77, 78, 0, 79, 0, 0, 0,
	0, 191, 0, 0, 0, 0, 80, 81, 192, 193,
	194, 195, 82, 196, 197, 0, 83, 198, 199, 84,
	0, 0, 200, 201, 202, 0, 203, 0, 0, 0,
	85, 86, 87, 0, 88, 0, 89, 90, 91, 0,
	0, 92, 93, 0, 0, 0, 0, 0, 0, 94,
	95, 96, 97, 204, 98, 205, 206, 0, 99, 0,
	100, 0, 0, 0, 101, 102, 0, 103, 0, 0,
	0, 207, 104, 105, 208, 209, 0, 0, 0, 106,
	107, 210, 0, 108, 0, 109, 0, 0, 0, 0,
	110, 211, 0, 212, 0, 111, 112, 113, 478, 214,
	0, 0, 116, 0, 114, 0, 0, 115, 215, 216,
	217, 218, 0, 219, 0, 0, 117, 0, 118, 119,
	0, 0, 220, 0, 120, 0, 0, 121, 0, 0,
	122, 0, 123, 124, 125, 126, 127, 0, 128, 129,
	132, 130, 0, 131, 0, 221, 133, 222, 134, 135,
	0, 0, 0, 0, 0, 136, 223, 0, 137, 0,
	224, 138, 139, 140, 141, 0, 225, 142, 226, 143,
	0, 144, 145, 146, 227, 147, 148, 0, 150, 151,
	149, 152, 0, 153, 0, 154, 155, 228, 156, 0,
	157, 158, 159, 0, 229, 160, 161, 0, 162, 163,
	0, 164, 230, 231, 165, 0, 171, 166, 167, 168,
	170, 232, 169, 233, 0, 172, 0, 173, 174, 0,
	234, 235, 236, 0, 0, 175, 237, 238, 0, 176,
	177, 178, 179, 0, 0, 180, 181, 182, 0, 0,
	183, 184, 185, 239, 240, 74, 0, 186, 0, 0,
	0, 0, 187, 188, 189, 190, 0, 0, 0, 0,
	0, 77, 78, 0, 79, 0, 0, 0, 0, 191,
	0, 0, 0, 0, 80, 81, 192, 193, 194, 195,
	82, 196, 197, 0, 83, 198, 199, 84, 0, 0,
	200, 201, 202, 0, 203, 0, 0, 0, 85, 86,
	87, 0, 88, 0, 89, 90, 91, 0, 0, 92,
	93, 0, 0, 0, 0, 0, 0, 94, 95, 96,
	97, 204, 98, 205, 206, 0, 99, 0, 100, 0,
	0, 0, 101, 102, 0, 103, 0, 0, 0, 207,
	104, 105, 208, 209, 0, 0, 0, 106, 107, 210,
	0, 108, 0, 109, 0, 0, 0, 0, 110, 211,
	0, 212, 0, 111, 112, 113, 475, 214, 0, 0,
	116, 0, 114, 0, 0, 115, 215, 216, 217, 218,
	0, 219, 0, 0, 117, 0, 118, 119, 0, 0,
	220, 0, 120, 0, 0, 121, 0, 0, 122, 0,
	123, 124, 125, 126, 127, 0, 128, 129, 132, 130,
	0, 131, 0, 221, 133, 222, 134, 135, 0, 0,
	0, 0, 0, 136, 223, 0, 137, 0, 224, 138,
	139, 140, 141, 0, 225, 142, 226, 143, 0, 144,
	145, 146, 227, 147, 148, 0, 150, 151, 149, 152,
	0, 153, 0, 154, 155, 228, 156, 0, 157, 158,
	159, 0, 229, 160, 161, 0, 162, 163, 0, 164,
	230, 231, 165, 0, 171, 166, 167, 168, 170, 232,
	169, 233, 0, 172, 0, 173, 174, 0, 234, 235,
	236, 0, 0, 175, 237, 238, 0, 176, 177, 178,
	179, 0, 0, 180, 181, 182, 0, 0, 183, 184,
	185, 239, 240, 74, 0, 186, 0, 0, 0, 0,
	187, 188, 189, 190, 0, 0, 0, 0, 0, 77,
	78, 0, 79, 0, 0, 0, 0, 191, 0, 0,
	0, 0, 80, 81, 192, 193, 194, 195, 82, 196,
	197, 0, 83, 198, 199, 84, 0, 0, 200, 201,
	202, 0, 203, 0, 0, 0, 85, 86, 87, 0,
	88, 0, 89, 90, 91, 0, 0, 92, 93, 0,
	0, 0, 0, 0, 0, 94, 95, 96, 97, 204,
	98, 205, 206, 0, 99, 0, 100, 0, 0, 0,
	101, 102, 0, 103, 0, 0, 0, 207, 104, 105,
	208, 209, 0, 0, 0, 106, 107, 210, 0, 108,
	0, 109, 0, 0, 0, 0, 110, 211, 0, 212,
	0, 111, 112, 113, 473, 214, 0, 0, 116, 0,
	114, 0, 0, 115, 215, 216, 217, 218, 0, 219,
	0, 0, 117, 0, 118, 119, 0, 0, 220, 0,
	120, 0, 0, 121, 0, 0, 122, 0, 123, 124,
	125, 126, 127, 0, 128, 129, 132, 130, 0, 131,
	0, 221, 133, 222, 134, 135, 0, 0, 0, 0,
	0, 136, 223, 0, 137, 0, 224, 138, 139, 140,
	141, 0, 225, 142, 226, 143, 0, 144, 145, 146,
	227, 147, 148, 0, 150, 151, 149, 152, 0, 153,
	0, 154, 155, 228, 156, 0, 157, 158, 159, 0,
	229, 160, 161, 0, 162, 163, 0, 164, 230, 231,
	165, 0, 171, 166, 167, 168, 170, 232, 169, 233,
	0, 172, 0, 173, 174, 0, 234, 235, 236, 0,
	0, 175, 237, 238, 0, 176, 177, 178, 179, 0,
	0, 180, 181, 182, 0, 0, 183, 184, 185, 239,
	240, 74, 0, 186, 0, 0, 0, 0, 187, 188,
	189, 190, 0, 0, 0, 0, 0, 77, 78, 0,
	79, 0, 0, 0, 0, 191, 0, 0, 0, 0,
	80, 81, 192, 193, 194, 195, 82, 196, 197, 0,
	83, 198, 199, 84, 0, 0, 200, 201, 202, 0,
	203, 0, 0, 0, 85, 86, 87, 0, 88, 0,
	89, 90, 91, 0, 0, 92, 93, 0, 0, 0,
	0, 0, 0, 94, 95, 96, 97, 204, 98, 205,
	206, 0, 99, 0, 100, 0, 0, 0, 101, 102,
	0, 103, 0, 0, 0, 207, 104, 105, 208, 209,
	0, 0, 0, 106, 107, 210, 0, 108, 0, 109,
	0, 0, 0, 0, 110, 211, 0, 212, 0, 111,
	112, 113, 456, 214, 0, 0, 116, 0, 114, 0,
	0, 115, 215, 216, 217, 218, 0, 219, 0, 0,
	117, 0, 118, 119, 0, 0, 220, 0, 120, 0,
	0, 121, 0, 0, 122, 0, 123, 124, 125, 126,
	127, 0, 128, 129, 132, 130, 0, 131, 0, 221,
	133, 222, 134, 135, 0, 0, 0, 0, 0, 136,
	223, 0, 137, 0, 224, 138, 139, 140, 141, 0,
	225, 142, 226, 143, 0, 144, 145, 146, 227, 147,
	148, 0, 150, 151, 149, 152, 0, 153, 0, 154,
	155, 228, 156, 0, 157, 158, 159, 0, 229, 160,
	161, 0, 162, 163, 0, 164, 230, 231, 165, 0,
	171, 166, 167, 168, 170, 232, 169, 233, 0, 172,
	0, 173, 174, 0, 234, 235, 236, 0, 0, 175,
	237, 238, 0, 176, 177, 178, 179, 0, 0, 180,
	181, 182, 0, 0, 183, 184, 185, 239, 240, 74,
	0, 186, 0, 0, 0, 0, 187, 188, 189, 190,
	0, 0, 0, 0, 0, 77, 78, 0, 79, 0,
	0, 0, 0, 191, 0, 0, 0, 0, 80, 81,
	192, 193, 194, 195, 82, 196, 197, 0, 83, 198,
	199, 84, 0, 0, 200, 201, 202, 0, 203, 0,
	0, 0, 85, 86, 87, 0, 88, 0, 89, 90,
	91, 0, 0, 92, 93, 0, 0, 0, 0, 0,
	0, 94, 95, 96, 97, 204, 98, 205, 206, 0,
	99, 0, 100, 0, 0, 0, 101, 102, 0, 103,
	0, 0, 0, 207, 104, 105, 208, 209, 0, 0,
	0, 106, 107, 210, 0, 108, 0, 109, 0, 0,
	0, 0, 110, 211, 0, 212, 0, 111, 112, 113,
	213, 214, 0, 0, 116, 0, 114, 0, 0, 115,
	215, 216, 217, 218, 0, 219, 0, 0, 117, 0,
	118, 119, 0, 0, 220, 0, 120, 0, 0, 121,
	0, 0, 122, 0, 123, 124, 125, 126, 127, 0,
	128, 129, 132, 130, 0, 131, 0, 221, 133, 222,
	134, 135, 0, 0, 0, 0, 0, 136, 223, 0,
	137, 0, 224, 138, 139, 140, 141, 0, 225, 142,
	226, 143, 0, 144, 145, 146, 227, 437, 148, 0,
	150, 151, 149, 152, 0, 153, 0, 154, 155, 228,
	156, 0, 157, 158, 159, 0, 229, 160, 161, 0,
	162, 163, 0, 164, 230, 231, 165, 0, 171, 166,
	167, 168, 170, 232, 169, 233, 0, 172, 0, 173,
	174, 0, 234, 235, 236, 0, 0, 175, 237, 238,
	0, 176, 177, 178, 179, 0, 0, 180, 181, 182,
	0, 0, 183, 184, 185, 239, 240, 74, 0, 186,
	0, 0, 0, 0, 187, 188, 189, 190, 0, 0,
	0, 0, 0, 77, 78, 0, 79, 0, 0, 0,
	0, 191, 0, 0, 0, 0, 80, 81, 192, 193,
	194, 195, 82, 196, 197, 0, 83, 198, 199, 84,
	0, 0, 200, 201, 202, 0, 203, 0, 0, 0,
	85, 86, 87, 0, 88, 0, 89, 90, 91, 0,
	0, 92, 93, 0, 0, 0, 0, 0, 0, 94,
	95, 96, 97, 204, 98, 205, 206, 0, 99, 0,
	100, 0, 0, 0, 101, 102, 0, 103, 0, 0,
	0, 207, 104, 105, 208, 209, 0, 0, 0, 106,
	107, 210, 0, 108, 0, 109, 0, 0, 0, 0,
	110, 211, 0, 212, 0, 111, 112, 113, 213, 214,
	0, 0, 116, 0, 114, 0, 0, 115, 215, 216,
	217, 218, 0, 219, 0, 0, 117, 0, 118, 119,
	0, 0, 220, 0, 120, 0, 0, 381, 0, 0,
	122, 0, 123, 124, 125, 126, 389, 0, 128, 129,
	132, 130, 0, 131, 0, 221, 133, 222, 134, 135,
	0, 0, 0, 0, 0, 136, 223, 0, 137, 0,
	224, 138, 139, 140, 141, 0, 225, 142, 226, 143,
	0, 144, 145, 146, 227, 147, 148, 0, 150, 151,
	149, 152, 0, 153, 0, 154, 155, 383, 156, 0,
	157, 158, 159, 0, 229, 160, 382, 0, 162, 163,
	0, 164, 230, 231, 165, 0, 171, 166, 167, 168,
	170, 232, 169, 233, 0, 172, 0, 173, 174, 0,
	388, 235, 236, 0, 0, 384, 237, 238, 0, 176,
	177, 178, 179, 0, 0, 180, 181, 182, 0, 0,
	183, 184, 185, 239, 240, 74, 0, 186, 0, 0,
	0, 0, 187, 188, 189, 190, 0, 0, 0, 0,
	0, 77, 78, 0, 79, 0, 0, 0, 0, 191,
	0, 0, 0, 0, 80, 81, 192, 193, 194, 195,
	82, 196, 197, 0, 83, 198, 199, 84, 0, 0,
	200, 201, 202, 0, 203, 0, 0, 0, 85, 86,
	87, 0, 88, 0, 89, 90, 91, 0, 0, 92,
	93, 0, 0, 0, 0, 0, 0, 94, 95, 96,
	97, 204, 98, 205, 206, 0, 99, 0, 100, 0,
	0, 0, 101, 102, 0, 103, 0, 0, 0, 207,
	104, 105, 208, 209, 0, 0, 0, 106, 107, 210,
	0, 108, 0, 109, 0, 0, 0, 0, 110, 211,
	0, 212, 0, 111, 112, 113, 213, 214, 0, 0,
	116, 0, 114, 0, 0, 115, 215, 216, 217, 218,
	0, 219, 0, 0, 117, 0, 118, 119, 0, 0,
	220, 0, 120, 0, 0, 121, 0, 0, 122, 0,
	123, 124, 125, 126, 127, 0, 128, 129, 132, 130,
	0, 131, 0, 221, 133, 222, 134, 135, 0, 0,
	0, 0, 0, 136, 223, 0, 137, 0, 224, 138,
	139, 0, 141, 0, 225, 142, 226, 143, 0, 144,
	0, 146, 227, 147, 148, 0, 150, 151, 149, 152,
	0, 153, 0, 154, 155, 228, 0, 0, 157, 158,
	159, 0, 229, 160, 161, 0, 162, 163, 0, 164,
	230, 231, 165, 0, 171, 166, 167, 168, 170, 232,
	169, 233, 0, 172, 0, 173, 174, 0, 234, 235,
	236, 0, 0, 175, 237, 238, 0, 176, 177, 178,
	179, 0, 0, 180, 181, 182, 0, 0, 183, 184,
	185, 239, 240, 0, 0, 186, 0, 0, 0, 0,
	187, 188, 189, 190, 859, 860, 0, 879, 880, 881,
	889, 890, 891, 0, 0, 0, 0, 0, 0, 0,
	882, 0, 0, 0, 0, 0, 0, 862, 0, 893,
	859, 860, 0, 879, 880, 881, 889, 890, 891, 0,
	0, 0, 0, 0, 0, 0, 882, 0, 861, 0,
	0, 0, 0, 862, 876, 893, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 861, 0, 0, 0, 0, 0,
	876, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 867, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 886, 894, 0, 0, 0, 0, 0, 0, 867,
	0, 0, 0, 0, 0, 0, 892, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 884, 886, 894, 0,
	0, 0, 877, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 892, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 884, 0, 883, 0, 0, 0, 877, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	883, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	878, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 887, 0, 859, 860, 0, 879, 880, 881, 889,
	890, 891, 0, 0, 0, 0, 878, 0, 0, 882,
	0, 0, 0, 0, 0, 0, 862, 887, 893, 859,
	860, 0, 879, 880, 881, 889, 890, 891, 0, 0,
	0, 0, 0, 0, 0, 882, 0, 861, 0, 0,
	0, 0, 862, 876, 893, 0, 0, 885, 0, 0,
	873, 874, 875, 0, 872, 869, 870, 871, 863, 864,
	865, 866, 868, 861, 888, 0, 0, 0, 0, 876,
	0, 1714, 0, 885, 0, 0, 873, 874, 875, 0,
	872, 869, 870, 871, 863, 864, 865, 866, 868, 0,
	888, 0, 867, 0, 0, 0, 0, 1433, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	886, 894, 0, 0, 0, 0, 0, 0, 867, 0,
	0, 0, 0, 0, 0, 892, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 884, 886, 894, 0, 0,
	0, 877, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 892, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 884, 0, 883, 0, 0, 0, 877, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 883,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 878,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	887, 0, 859, 860, 0, 879, 880, 881, 889, 890,
	891, 0, 0, 0, 0, 878, 0, 0, 882, 0,
	0, 0, 0, 0, 0, 862, 887, 893, 859, 860,
	0, 879, 880, 881, 889, 890, 891, 0, 0, 0,
	0, 0, 0, 0, 882, 0, 861, 0, 0, 0,
	0, 862, 876, 893, 0, 0, 885, 0, 0, 873,
	874, 875, 0, 872, 869, 870, 871, 863, 864, 865,
	866, 868, 861, 888, 0, 0, 0, 0, 876, 0,
	1432, 0, 885, 0, 0, 873, 874, 875, 0, 872,
	869, 870, 871, 863, 864, 865, 866, 868, 0, 888,
	0, 867, 0, 0, 0, 0, 1431, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 886,
	894, 0, 0, 0, 0, 0, 0, 867, 0, 0,
	0, 0, 0, 0, 892, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 884, 886, 894, 0, 0, 0,
	877, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	892, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	884, 0, 883, 0, 0, 0, 877, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 883, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 878, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 887,
	0, 859, 860, 0, 879, 880, 881, 889, 890, 891,
	0, 0, 0, 0, 878, 0, 0, 882, 0, 0,
	0, 0, 0, 0, 862, 887, 893, 859, 860, 0,
	879, 880, 881, 889, 890, 891, 0, 0, 0, 0,
	0, 0, 0, 882, 0, 861, 0, 0, 0, 0,
	862, 876, 893, 0, 0, 885, 0, 0, 873, 874,
	875, 0, 872, 869, 870, 871, 863, 864, 865, 866,
	868, 861, 888, 0, 0, 0, 0, 876, 0, 1383,
	0, 885, 0, 0, 873, 874, 875, 0, 872, 869,
	870, 871, 863, 864, 865, 866, 868, 0, 888, 0,
	867, 0, 1836, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 886, 894,
	0, 0, 0, 0, 0, 0, 867, 0, 0, 0,
	0, 0, 0, 892, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 884, 886, 894, 0, 0, 0, 877,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 892,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 884,
	0, 883, 0, 0, 0, 877, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 883, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 878, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 887, 0,
	859, 860, 0, 879, 880, 881, 889, 890, 891, 0,
	0, 0, 0, 878, 0, 0, 882, 0, 0, 0,
	0, 0, 0, 862, 887, 893, 859, 860, 0, 879,
	880, 881, 889, 890, 891, 0, 0, 0, 0, 0,
	0, 0, 882, 0, 861, 0, 0, 0, 0, 862,
	876, 893, 0, 0, 885, 0, 0, 873, 874, 875,
	0, 872, 869, 870, 871, 863, 864, 865, 866, 868,
	861, 888, 0, 0, 0, 1834, 876, 0, 0, 0,
	885, 0, 0, 873, 874, 875, 0, 872, 869, 870,
	871, 863, 864, 865, 866, 868, 0, 888, 0, 867,
	0, 1815, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 886, 894, 0,
	0, 0, 0, 0, 0, 867, 0, 0, 0, 0,
	0, 0, 892, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 884, 886, 894, 0, 0, 0, 877, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 892, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 884, 0,
	883, 0, 0, 0, 877, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 883, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 878, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 887, 0, 859,
	860, 0, 879, 880, 881, 889, 890, 891, 0, 0,
	0, 0, 878, 0, 0, 882, 0, 0, 0, 0,
	0, 0, 862, 887, 893, 859, 860, 0, 879, 880,
	881, 889, 890, 891, 0, 0, 0, 0, 0, 0,
	0, 882, 0, 861, 0, 0, 0, 0, 862, 876,
	893, 0, 0, 885, 0, 0, 873, 874, 875, 0,
	872, 869, 870, 871, 863, 864, 865, 866, 868, 861,
	888, 0, 0, 0, 1790, 876, 0, 0, 0, 885,
	0, 0, 873, 874, 875, 0, 872, 869, 870, 871,
	863, 864, 865, 866, 868, 0, 888, 0, 867, 0,
	1785, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 886, 894, 0, 0,
	0, 0, 0, 0, 867, 0, 0, 0, 0, 0,
	0, 892, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 884, 886, 894, 0, 0, 0, 877, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 892, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 884, 0, 883,
	0, 0, 0, 877, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 883, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 878, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 887, 0, 859, 860,
	0, 879, 880, 881, 889, 890, 891, 0, 0, 0,
	0, 878, 0, 0, 882, 0, 0, 0, 0, 0,
	0, 862, 887, 893, 859, 860, 0, 879, 880, 881,
	889, 890, 891, 0, 0, 0, 0, 0, 0, 0,
	882, 0, 861, 0, 0, 0, 0, 862, 876, 893,
	0, 0, 885, 0, 0, 873, 874, 875, 0, 872,
	869, 870, 871, 863, 864, 865, 866, 868, 861, 888,
	0, 0, 0, 1781, 876, 0, 0, 0, 885, 0,
	0, 873, 874, 875, 0, 872, 869, 870, 871, 863,
	864, 865, 866, 868, 0, 888, 0, 867, 0, 1716,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 886, 894, 0, 0, 0,
	0, 0, 0, 867, 0, 0, 0, 0, 0, 0,
	892, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	884, 886, 894, 0, 0, 0, 877, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 892, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 884, 0, 883, 0,
	0, 0, 877, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 883, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 878, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 887, 0, 859, 860, 0,
	879, 880, 881, 889, 890, 891, 0, 0, 0, 0,
	878, 0, 0, 882, 0, 0, 0, 0, 0, 0,
	862, 887, 893, 859, 860, 0, 879, 880, 881, 889,
	890, 891, 0, 0, 0, 0, 0, 0, 0, 882,
	0, 861, 0, 0, 0, 0, 862, 876, 893, 0,
	0, 885, 0, 0, 873, 874, 875, 0, 872, 869,
	870, 871, 863, 864, 865, 866, 868, 861, 888, 0,
	0, 0, 1715, 876, 0, 0, 0, 885, 0, 0,
	873, 874, 875, 0, 872, 869, 870, 871, 863, 864,
	865, 866, 868, 0, 888, 0, 867, 0, 1623, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 886, 894, 0, 0, 0, 0,
	0, 0, 867, 0, 0, 0, 0, 0, 0, 892,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 884,
	886, 894, 0, 0, 0, 877, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 892, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 884, 0, 883, 0, 0,
	0, 877, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 883, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 878, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 887, 0, 859, 860, 0, 879,
	880, 881, 889, 890, 891, 0, 0, 0, 0, 878,
	0, 0, 882, 0, 0, 0, 0, 0, 0, 862,
	887, 893, 859, 860, 0, 879, 880, 881, 889, 890,
	891, 0, 0, 0, 0, 0, 0, 0, 882, 0,
	861, 0, 0, 0, 0, 862, 876, 893, 0, 0,
	885, 0, 0, 873, 874, 875, 0, 872, 869, 870,
	871, 863, 864, 865, 866, 868, 861, 888, 0, 0,
	0, 1557, 876, 0, 0, 0, 885, 0, 0, 873,
	874, 875, 0, 872, 869, 870, 871, 863, 864, 865,
	866, 868, 0, 888, 0, 867, 0, 1541, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 886, 894, 0, 0, 0, 0, 0,
	0, 867, 0, 0, 0, 0, 0, 0, 892, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 884, 886,
	894, 0, 0, 0, 877, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 892, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 884, 0, 883, 0, 0, 0,
	877, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 883, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 878, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 887, 0, 0, 0, 859, 860, 0,
	879, 880, 881, 889, 890, 891, 0, 0, 878, 0,
	0, 0, 0, 882, 0, 0, 0, 0, 0, 887,
	862, 0, 893, 859, 860, 0, 879, 880, 881, 889,
	890, 891, 0, 0, 0, 0, 0, 0, 0, 882,
	0, 861, 0, 0, 0, 0, 862, 876, 893, 885,
	0, 0, 873, 874, 875, 0, 872, 869, 870, 871,
	863, 864, 865, 866, 868, 0, 888, 861, 0, 0,
	1153, 0, 0, 876, 0, 885, 0, 0, 873, 874,
	875, 0, 872, 869, 870, 871, 863, 864, 865, 866,
	868, 0, 888, 0, 1471, 0, 867, 1904, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 886, 894, 0, 0, 0, 0,
	0, 0, 867, 0, 1423, 0, 0, 1422, 0, 892,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 884,
	886, 894, 0, 0, 0, 877, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 892, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 884, 0, 883, 0, 0,
	0, 877, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1903, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 883, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 878, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 887, 0, 859, 860, 0, 879,
	880, 881, 889, 890, 891, 0, 0, 0, 0, 878,
	0, 0, 882, 0, 0, 0, 896, 1086, 0, 862,
	887, 893, 859, 860, 0, 879, 880, 881, 889, 890,
	891, 0, 0, 0, 0, 0, 0, 0, 882, 0,
	861, 0, 895, 0, 0, 862, 876, 893, 0, 0,
	885, 0, 0, 873, 874, 875, 0, 872, 869, 870,
	871, 863, 864, 865, 866, 868, 861, 888, 0, 0,
	0, 0, 876, 0, 1087, 0, 885, 0, 0, 873,
	874, 875, 0, 872, 869, 870, 871, 863, 864, 865,
	866, 868, 0, 888, 0, 867, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 886, 894, 0, 0, 0, 0, 0,
	0, 867, 0, 0, 0, 0, 0, 0, 892, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 884, 886,
	894, 0, 0, 0, 877, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 892, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 884, 0, 883, 0, 0, 0,
	877, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 883, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 878, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 887, 0, 859, 860, 0, 879, 880,
	881, 889, 890, 891, 0, 0, 0, 0, 878, 0,
	0, 882, 0, 0, 0, 0, 0, 0, 862, 887,
	893, 859, 860, 0, 879, 880, 881, 889, 890, 891,
	0, 0, 0, 0, 0, 0, 0, 882, 0, 861,
	0, 0, 0, 0, 862, 876, 893, 0, 0, 885,
	0, 0, 873, 874, 875, 0, 872, 869, 870, 871,
	863, 864, 865, 866, 868, 861, 888, 0, 0, 0,
	0, 876, 0, 0, 0, 885, 0, 0, 873, 874,
	875, 0, 872, 869, 870, 871, 863, 864, 865, 866,
	868, 0, 888, 0, 867, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 886, 894, 0, 0, 0, 0, 0, 0,
	867, 0, 0, 0, 0, 0, 0, 892, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 884, 886, 894,
	0, 0, 0, 877, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 892, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 884, 0, 883, 432, 0, 0, 877,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 883, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 878, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 887, 0, 859, 860, 0, 879, 880, 881,
	889, 890, 891, 0, 0, 0, 0, 878, 0, 0,
	882, 0, 0, 0, 0, 0, 0, 862, 887, 893,
	859, 860, 0, 879, 880, 881, 889, 890, 891, 0,
	0, 0, 0, 0, 0, 0, 882, 1551, 861, 0,
	1424, 0, 0, 862, 876, 893, 0, 0, 885, 0,
	0, 873, 874, 875, 0, 872, 869, 870, 871, 863,
	864, 865, 866, 868, 861, 888, 0, 0, 0, 0,
	876, 0, 0, 0, 885, 0, 0, 873, 874, 875,
	0, 872, 869, 870, 871, 863, 864, 865, 866, 868,
	0, 888, 0, 867, 0, 0, 0, 0, 1429, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 886, 894, 0, 0, 0, 0, 0, 0, 867,
	0, 0, 0, 0, 0, 0, 892, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 884, 886, 894, 0,
	0, 0, 877, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 892, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 884, 0, 883, 0, 0, 0, 877, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	883, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	878, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 887, 0, 859, 860, 0, 879, 880, 881, 889,
	890, 891, 0, 0, 0, 0, 878, 0, 0, 882,
	0, 0, 0, 0, 0, 0, 862, 887, 893, 859,
	860, 0, 879, 880, 881, 889, 890, 891, 0, 0,
	0, 0, 0, 0, 0, 882, 0, 861, 0, 1382,
	0, 0, 862, 876, 893, 0, 0, 885, 0, 0,
	873, 874, 875, 0, 872, 869, 870, 871, 863, 864,
	865, 866, 868, 861, 888, 0, 0, 0, 0, 876,
	0, 0, 0, 885, 0, 0, 873, 874, 875, 0,
	872, 869, 870, 871, 863, 864, 865, 866, 868, 0,
	888, 0, 867, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	886, 894, 0, 0, 0, 0, 0, 0, 867, 0,
	0, 0, 0, 0, 0, 892, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 884, 886, 894, 0, 0,
	0, 877, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 892, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 884, 0, 883, 0, 0, 0, 877, 0, 0,
	0, 0, 0, 0, 0, 1389, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 883,
	1391, 1392, 0, 1409, 1410, 1411, 0, 0, 0, 878,
	0, 0, 0, 0, 0, 0, 1686, 0, 0, 0,
	887, 0, 859, 860, 0, 879, 880, 881, 889, 890,
	891, 0, 0, 0, 0, 878, 0, 0, 882, 0,
	0, 0, 0, 0, 0, 862, 887, 893, 859, 860,
	1406, 879, 880, 881, 889, 890, 891, 0, 0, 0,
	0, 0, 0, 0, 882, 0, 861, 0, 0, 0,
	0, 862, 876, 893, 0, 0, 885, 0, 0, 873,
	874, 875, 0, 872, 869, 870, 871, 863, 864, 865,
	866, 868, 861, 888, 0, 0, 0, 0, 876, 1397,
	0, 0, 885, 0, 0, 873, 874, 875, 0, 872,
	869, 870, 871, 863, 864, 865, 866, 868, 0, 888,
	0, 867, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1412, 0, 0, 0, 0, 0, 0, 886,
	894, 0, 0, 0, 0, 0, 0, 867, 1407, 0,
	0, 0, 0, 0, 892, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 884, 886, 894, 0, 0, 0,
	877, 0, 0, 27, 0, 0, 0, 0, 0, 0,
	892, 0, 0, 0, 50, 0, 0, 0, 0, 0,
	884, 0, 883, 0, 0, 0, 877, 859, 860, 0,
	879, 880, 881, 889, 890, 891, 1408, 0, 52, 0,
	0, 0, 0, 0, 28, 0, 57, 0, 0, 0,
	862, 0, 893, 0, 0, 0, 0, 0, 878, 0,
	0, 0, 0, 0, 0, 41, 0, 0, 0, 887,
	0, 861, 36, 0, 0, 53, 0, 876, 0, 40,
	37, 0, 0, 0, 878, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 887, 42, 0, 0, 0,
	0, 0, 38, 0, 0, 0, 1403, 1404, 1405, 0,
	1402, 1399, 1400, 1401, 1393, 1394, 1395, 1396, 1398, 0,
	0, 0, 0, 0, 0, 885, 867, 0, 873, 874,
	875, 0, 872, 869, 870, 871, 863, 864, 865, 866,
	868, 0, 888, 0, 886, 894, 0, 0, 0, 0,
	0, 885, 0, 0, 873, 874, 875, 0, 872, 869,
	870, 871, 863, 864, 865, 866, 868, 0, 888, 884,
	0, 0, 0, 0, 0, 877, 39, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 55, 0, 0,
	43, 0, 54, 0, 0, 0, 0, 44, 1391, 1392,
	64, 1409, 1410, 1411, 0, 47, 49, 0, 0, 0,
	0, 0, 0, 0, 1685, 51, 0, 0, 0, 0,
	0, 1391, 1392, 66, 1409, 1410, 1411, 0, 0, 0,
	0, 0, 0, 878, 0, 0, 56, 1536, 1391, 1392,
	0, 1409, 1410, 1411, 887, 0, 0, 0, 1406, 0,
	67, 0, 1391, 1392, 1535, 1409, 1410, 1411, 62, 0,
	0, 0, 0, 0, 63, 0, 0, 0, 0, 0,
	0, 1406, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 61, 0, 0, 0, 0, 1406, 0,
	0, 0, 0, 0, 0, 0, 0, 1397, 0, 0,
	885, 0, 1406, 873, 874, 875, 0, 872, 869, 870,
	871, 863, 864, 865, 866, 868, 0, 888, 0, 0,
	1397, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1412, 0, 0, 0, 0, 0, 0, 1397, 0, 0,
	0, 0, 0, 0, 0, 0, 1407, 0, 0, 0,
	0, 1397, 0, 1412, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1407,
	1412, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1412, 0, 1407, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1407, 0, 0, 0, 1408, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1408, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1408, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1408, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1403, 1404, 1405, 0, 1402, 1399,
	1400, 1401, 1393, 1394, 1395, 1396, 1398, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1403, 1404, 1405,
	0, 1402, 1399, 1400, 1401, 1393, 1394, 1395, 1396, 1398,
	0, 0, 0, 0, 1403, 1404, 1405, 0, 1402, 1399,
	1400, 1401, 1393, 1394, 1395, 1396, 1398, 0, 1403, 1404,
	1405, 0, 1402, 1399, 1400, 1401, 1393, 1394, 1395, 1396,
	1398, 736, 730, 753, 724, 744, 743, 0, 0, 726,
	725, 0, 0, 0, 755, 754, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 749, 0, 741, 740, 0,
	0, 0, 0, 0, 0, 0, 739, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 738, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	731, 732, 733, 734, 0, 752, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 742,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 737, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 728, 0, 0, 0,
	0, 0, 0, 0, 735, 729, 0, 0, 0, 0,
	0, 0, 0, 757, 0, 0, 0, 0, 0, 0,
	727, 0, 0, 750, 751, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 756,
}
var sqlPact = [...]int{

	24470, -1000, 31, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 809, 16167, -1000,
	-1000, -1000, -1000, -1000, -1000, 644, 632, 138, 4259, 16167,
	16167, 15899, 856, 856, 17507, -1000, -1000, 20723, -1000, 2515,
	480, 486, 480, 480, 492, 17507, 628, 624, 128, -1000,
	682, -14, 20455, 16167, 1297, 28, 14827, 328, 24470, 15631,
	20187, 16167, 326, 45, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1154, 1061, 1059, 14827, 19919, 19651, 19383, 19115, -1000,
	10234, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 615,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	333, 332, -1000, 15363, -1000, 881, -1000, 27, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 870, -1000, 16167, -1000,
	-1000, 18847, 18579, 331, 839, -1000, -1000, 531, 400, 1312,
	-1000, 48, -1000, -1000, 1153, -1000, 867, 1152, 1151, 1150,
	1149, 1148, 1147, 399, 912, -1000, 475, 839, -1000, 839,
	-1000, -1000, -1000, 591, 17507, -1000, 14827, -1000, 18311, 16167,
	16167, 1082, 18043, -1000, 682, -1000, -1000, -1000, 890, 1292,
	1292, 1292, 1307, 133, 132, 128, 10, 16167, -1000, 329,
	10, 6869, 6869, -1000, -1000, 328, -1000, 136, 12946, -1000,
	7431, -1000, 824, 1210, 411, 708, 1209, -115, 742, 648,
	12132, 45, -1000, -1000, -1000, 8839, 3980, 14827, 16167, 16167,
	670, 17775, -1000, 1208, 105, 1204, -1000, 104, 1203, -1000,
	104, 1199, 29, -1000, -1000, -1000, -1000, -1000, -1000, 328,
	15095, 1352, 24995, -1000, 8839, -1000, -1000, 13217, 896, 13217,
	-1000, -1000, 1348, -1000, 8839, -1000, 22, 21, 1013, 1025,
	10783, 10515, 1249, 752, -1000, -1000, -1000, 42, 4259, 16167,
	1166, 13217, 16167, 16167, 16167, 16167, 16167, 16167, -1000, 1011,
	-1000, 16167, 16167, -1000, 15, 14, -1000, 17507, -1000, 117,
	-1000, 327, 982, 410, 126, 17239, 1216, 978, -1000, 890,
	-1000, 887, 1005, 7996, 8839, 128, -1000, -1000, 128, 128,
	8839, -1000, -1000, 16167, 10, 1347, 16167, 68, -1000, 23482,
	-1000, -1000, 8839, 8839, 8839, 8839, 8839, 803, -1000, -1000,
	-1000, 5120, -1000, -1000, 45, 325, 215, -1000, -1000, 324,
	45, -1000, -1000, -1000, -1000, 322, 1449, 434, -1000, -1000,
	-1000, 8839, 406, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1165, 320, 319, -1000, -1000, -1000, -1000, 317,
	310, 307, 305, 304, 303, 302, 299, 298, 297, 296,
	295, 294, 293, 288, 790, -1000, 440, -1000, -1000, 440,
	440, -1000, 271, 271, 272, -1000, -1000, -1000, -1000, 271,
	-1000, -1000, -1000, 380, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 277, 68, -1000, -1000, -1000, 16167, 23, -1000, 24332,
	-1000, -23, 799, -1000, 14291, 1271, 1267, 1262, 14827, 1328,
	1324, 572, 16167, 16167, 570, -1000, 1146, 19, -1000, -1000,
	2891, -1000, -1000, 420, 81, 1341, 81, 12404, -1000, 16167,
	16167, -1000, 16167, -1000, -1000, 16167, -1000, 16167, 16167, -1000,
	16167, 125, 13755, 701, 1198, -14, 12, -1000, 1358, -1000,
	-1000, -1000, -1000, 60, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 272, 790,
	271, 271, 271, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	380, -1000, -1000, 440, 440, 440, -1000, -1000, 11, 24332,
	559, -8, 13486, 16167, -1000, 35, -1000, -1000, 1144, 471,
	7, 772, 1051, 832, -1000, -1000, -1000, -1000, 3, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1429,
	-1000, -1000, -1000, -1000, 1433, 3, -1000, -1000, -1000, -1000,
	-1000, 1448, -1000, -1000, -1000, 4259, -1000, -1000, -1000, 16167,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	772, 1051, -1000, -1000, 14827, 14023, 1339, 1196, 795, -1000,
	1337, 16167, 858, 972, -1000, -1000, 370, 1195, -1000, -1000,
	-1000, -1000, 24332, -1000, 24332, 741, 1067, -1000, 1067, -2,
	-1000, 23456, -1000, 270, 2, -1000, 420, 6869, 11861, 24995,
	24995, 16167, 621, 8839, 8839, 8839, 8839, 8839, 8839, 8839,
	8839, 8839, 8839, 8839, 8839, 8839, 8839, 8839, 8839, 8839,
	8839, 8839, 8839, 8839, 8839, 986, 8839, 552, 8839, 8839,
	8839, 8839, 1257, 861, 257, 4259, -1000, 636, 636, 636,
	2992, 2992, 233, 38, 23016, -7, 45, -1000, -1000, 6585,
	6284, 45, 4538, -1000, 730, 1431, 424, 24332, 1172, 1125,
	267, 131, 130, 8839, 8839, 9120, 9120, 8839, 9401, 8839,
	8839, 5401, 8839, 8839, 8839, 8839, 8839, 8839, -1000, 266,
	-1000, -1000, -1000, -1000, 1420, -1000, -1000, 1418, -1000, 617,
	610, 1408, 420, 129, 7431, -1000, 701, 16167, 16167, 16167,
	-1000, -1000, 970, 16971, 964, 24995, 16167, -1000, 265, 262,
	1043, 1038, 16167, 16167, 16703, 16435, 16167, 712, 260, 259,
	16167, 716, -1000, 16167, 643, 1142, 16167, -1000, 8839, 705,
	8839, 793, -1000, 11590, 445, 16167, 735, 67, -1000, -1000,
	-1000, 369, 16167, -1000, -1000, -1000, 105, -1000, 104, 104,
	-1000, -1000, 14827, -1000, -1000, -1000, -1000, -1000, -1000, 24995,
	342, 323, -1000, 1405, 550, -1000, 548, 539, 532, -1000,
	258, -1000, 8839, 16167, 13486, -8, -9, -1000, -1000, 16167,
	1051, -1000, -1000, -1000, -1000, 661, -1000, 766, -1000, 11051,
	-1000, -1000, -1000, 730, -1000, -24, -1000, -1000, -1000, -1000,
	123, 0, -17, 24995, -1000, -1000, -1000, -1000, -1000, 16167,
	242, 16167, -14, 16167, -1000, 1445, -14, 16167, 1194, 1444,
	16167, -1000, -1000, -1000, 8839, -1000, -1000, -1000, -14, 16167,
	-1000, 1121, -1000, -57, 1342, -140, 14559, -1000, 11319, -1000,
	-1000, -1000, 394, 356, 356, 496, 496, 496, 496, 162,
	162, 186, 1942, 3012, 3012, 3012, 924, 199, 199, 3012,
	3012, 3012, 2992, 24358, 2680, 8839, 8839, 530, 844, 257,
	2680, 8839, 1413, 2680, 2680, 2680, -1000, 990, -1000, -1000,
	-1000, 1141, 255, 9401, 9401, -1000, -1000, -1000, 5120, -1000,
	-1000, 253, 8839, -1000, 8839, -89, -119, -1000, -1000, -10,
	-1000, -1000, -21, 8839, 8839, 8839, 122, -1000, 121, 611,
	-1000, 8839, 813, 251, 249, 8839, -1000, -1000, 24139, 21702,
	114, 1140, -85, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	110, 109, 24113, -85, 103, 2530, -1000, 9401, 9401, 9401,
	5120, 246, 102, 23263, -85, 23920, 7712, 7712, 7712, 101,
	23894, 8839, -85, 21509, 21483, 21290, -11, -16, -22, 1403,
	-32, 100, 384, 379, 96, 1121, -1000, -1000, -1000, -1000,
	524, 523, 1193, -1000, 963, -1000, 449, -1000, 796, 8839,
	16167, 241, 240, 806, -1000, 1191, 919, 1186, 919, -1000,
	-23, 794, 8839, 8839, -1000, 521, -1000, -1000, 641, -1000,
	23042, -1000, 6869, 24332, -1000, 728, 1273, -38, -1000, -1000,
	6869, 420, 12404, 11861, 7431, -39, -1000, -1000, -1000, 701,
	-1000, 482, 1397, 95, 994, 780, 786, 680, 1394, 24332,
	-24, -1000, -24, -1000, -1000, -1000, -1000, -1000, -1000, 16167,
	1097, -1000, 14023, 227, 16167, 214, -1000, 212, -1000, -1000,
	210, 16167, -1000, 1216, -1000, 93, -1000, 1118, 1306, -1000,
	11861, 893, 1048, 1046, 11861, 1035, 816, 816, 816, -1000,
	14559, 3690, -1000, -1000, 16167, 206, 3361, 92, 1342, 8839,
	2680, 2680, 8839, 9401, 9401, -1000, 2680, -1000, -1000, -1000,
	-1000, 1139, 189, 8839, 24995, 24718, 24701, -44, 5983, -29,
	22823, -1000, -1000, 215, -1000, 90, 7150, -1000, 23675, -15,
	-15, -1000, 1440, 1214, -1000, 8839, 23701, -1000, 12675, 421,
	825, 22797, 24995, 24995, -1000, 8839, -1000, -1000, 1136, 8839,
	-1000, 24995, 24995, 9401, 9401, 9401, 9401, 9401, 9401, 9401,
	9401, 9401, 9401, 9401, 9401, 9401, 9401, 9401, 9401, 9401,
	9401, 9401, 988, 9401, 1410, 1410, 1410, -30, 5682, -1000,
	1159, 1136, 8839, 8839, 24995, 89, 88, 87, -1000, 8839,
	-85, 8839, 8839, 8839, -1000, -1000, -1000, 86, -1000, 1392,
	-1000, -1000, -1000, -1000, 1118, 16167, 16167, 16167, 1185, -1000,
	1959, -1000, 22604, -45, 16167, 16167, -1000, 1028, 1065, 464,
	16167, -1000, 16167, -1000, 16167, 16167, 16167, -46, -50, 16167,
	-1000, -1000, -64, 6869, 207, -14, -64, 705, -1000, -31,
	-1000, 363, -1000, 340, 200, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 84, -1000, -1000, 1107, -1000, 9963, 182,
	16167, 14023, 1334, 9963, 849, -1000, -1000, 416, 8839, 8839,
	1342, 631, 11861, 11861, 864, 1042, 11861, -1000, -1000, -1000,
	-1000, -1000, -1000, 1041, 173, 16167, 14559, 583, 2680, 24678,
	24310, 8839, 24995, 24507, -52, 8839, 8839, -1000, -63, -1000,
	8839, -1000, -1000, 1437, 8839, 83, 82, 76, -1000, -1000,
	24332, 8839, -1000, -1000, 20991, 8839, 73, -1000, 72, 66,
	24332, 1159, 24332, -1000, -1000, 494, 494, 1410, 1410, 1410,
	1410, 321, 321, 630, 2357, 292, 292, 292, 2574, 432,
	432, 292, 292, 292, 1135, 977, 172, 24732, 8839, -65,
	-1000, -1000, -1000, 24332, 24332, 65, -1000, -1000, -1000, -85,
	21264, 22578, 22385, -1000, 58, 416, -1000, -1000, -1000, 16167,
	-1000, 16167, -1000, 16167, 16167, 1132, 933, -1000, -1000, 1024,
	170, 9401, 16167, -1000, 817, -70, -71, 925, -1000, 918,
	8839, -1000, 24995, 919, 919, -1000, 520, 501, -1000, -1000,
	-1000, -64, 1221, 16167, 1258, -1000, -1000, 168, -1000, -1000,
	-1000, 807, -80, -1000, 213, 1274, 8839, -1000, -1000, 163,
	9963, -81, 56, -14, -92, 16167, -1000, 16167, 24332, -85,
	606, -1000, 864, -1000, 161, 8839, 11861, -1000, -158, -1000,
	362, -1000, 16167, -93, -1000, 8839, 8839, 24507, -99, -1000,
	2680, 2680, -1000, 22359, -1000, 23675, -1000, -1000, -1000, 24332,
	801, -1000, 22166, -1000, -1000, -1000, -1000, 9401, 1134, 160,
	24995, 22140, -1000, -1000, 8839, -1000, -1000, -1000, -1000, -1000,
	940, -1000, -1000, 16167, 954, -1000, -1000, 8839, 24732, 151,
	1097, 149, -1000, -1000, -1000, 706, -1000, -1000, 24332, 1284,
	-1000, -1000, 16167, 16167, 597, -104, 16167, -1000, -1000, 4839,
	16167, 817, 9963, 1282, 45, 16167, 1282, 21947, 4538, -105,
	-1000, 1097, -1000, 817, 145, -72, -1000, 1333, 1436, -1000,
	16167, 24332, -1000, 1041, -1000, 4259, -106, -1000, 2680, 2680,
	-1000, -1000, 53, 825, 1296, -1000, 3045, 9401, 24995, -117,
	-1000, 21921, -1000, -1000, 1184, 21728, 997, 16167, -1000, 16167,
	16167, 451, 16167, -1000, -1000, 663, -1000, 420, -1000, 142,
	1097, -1000, -1000, -1000, -1000, 1274, -21, 817, -1000, 1097,
	9963, 16167, 141, -1000, -127, -1000, -1000, -1000, -1000, 703,
	8839, 3045, -128, -1000, -1000, 1175, -1000, 837, 830, 52,
	-129, 126, -1000, 8839, -1000, 12404, -1000, 16167, -1000, 1282,
	51, 1097, -1000, -137, -1000, -1000, -1000, 50, 8558, 8558,
	-85, -1000, 16167, -1000, 842, 840, 638, -1000, -1000, -1000,
	-1000, -1000, 997, 24332, -121, -145, -1000, -1000, -1000, 817,
	-1000, -1000, -1000, 9682, 900, 686, 23237, -1000, -1000, -1000,
	1229, -1000, 456, 979, 979, 837, -1000, 857, 1097, 1371,
	-1000, -1000, -1000, -1000, -1000, -1000, 1378, -1000, -1000, 996,
	-1000, -1000, -1000, -1000, -1000, -1000, 8277, -1000, -1000, -1000,
	-1000,
}
var sqlPgo = [...]int{

	0, 1661, 1660, 1326, 131, 1659, 126, 1658, 1657, 1656,
	1655, 1654, 1653, 100, 116, 115, 132, 1651, 1650, 87,
	1649, 1648, 1624, 91, 1622, 1621, 1620, 118, 1619, 1618,
	1617, 1616, 1613, 1611, 83, 22, 135, 2000, 130, 1609,
	1608, 1607, 12, 94, 61, 1606, 98, 1604, 1603, 60,
	1602, 93, 102, 705, 31, 1601, 1599, 136, 55, 17,
	592, 96, 139, 114, 112, 1598, 1597, 1596, 47, 1593,
	3, 1592, 1590, 14, 52, 21, 1589, 24, 44, 1587,
	1585, 122, 1584, 74, 97, 107, 32, 124, 1210, 1583,
	88, 11, 69, 1582, 35, 1581, 28, 73, 142, 1580,
	30, 146, 65, 27, 57, 99, 1578, 1577, 1574, 79,
	1573, 92, 66, 1572, 1571, 78, 1569, 120, 128, 1568,
	1566, 117, 1565, 1563, 1561, 157, 1558, 1556, 147, 1548,
	6, 37, 59, 8, 106, 103, 26, 1546, 16, 1544,
	1407, 787, 231, 1543, 50, 38, 81, 49, 58, 18,
	1541, 1540, 101, 1539, 1538, 1535, 1534, 1529, 77, 1525,
	68, 134, 33, 54, 85, 20, 19, 82, 104, 144,
	105, 1524, 1523, 111, 1522, 51, 1521, 1520, 1464, 108,
	1518, 1516, 1511, 1452, 1281, 1242, 338, 1510, 1509, 1098,
	1095, 1507, 1505, 125, 1504, 1503, 137, 145, 34, 1498,
	110, 1497, 86, 1496, 0, 36, 23, 1495, 119, 76,
	1493, 1491, 1490, 1489, 25, 2, 7, 5, 9, 4,
	53, 43, 1488, 1487, 123, 89, 1484, 1483, 143, 1482,
	1481, 1480, 46, 1479, 15, 1478, 13, 1477, 1474, 10,
	1, 133, 1473, 95, 1471, 1356, 1462, 140, 1460, 1458,
	1365, 80,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 4, 4,
	44, 44, 43, 43, 43, 43, 43, 43, 43, 43,
	43, 43, 43, 43, 43, 43, 43, 41, 41, 46,
	46, 46, 48, 48, 45, 45, 40, 40, 5, 5,
	5, 6, 6, 6, 6, 6, 6, 13, 14, 14,
	14, 14, 14, 14, 14, 14, 87, 87, 86, 86,
	89, 89, 15, 15, 16, 16, 16, 16, 16, 16,
	16, 16, 174, 174, 173, 18, 150, 150, 19, 19,
	19, 19, 20, 110, 110, 21, 21, 21, 21, 22,
	26, 241, 241, 241, 245, 245, 246, 246, 247, 247,
	247, 247, 247, 247, 247, 243, 243, 29, 29, 29,
	29, 29, 129, 125, 125, 127, 127, 127, 127, 52,
	124, 124, 124, 124, 126, 126, 126, 126, 197, 196,
	196, 202, 202, 202, 65, 65, 65, 65, 65, 66,
	66, 66, 195, 195, 195, 195, 203, 203, 203, 203,
	203, 203, 67, 67, 67, 201, 201, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 17, 242, 242, 244, 244,
	31, 31, 9, 9, 10, 10, 68, 68, 69, 69,
	132, 132, 132, 132, 70, 70, 47, 47, 47, 131,
	212, 212, 213, 213, 213, 213, 213, 213, 214, 214,
	214, 214, 214, 214, 214, 210, 210, 211, 208, 208,
	209, 209, 209, 209, 248, 248, 130, 130, 73, 73,
	217, 217, 217, 217, 215, 215, 215, 215, 215, 218,
	216, 219, 219, 219, 219, 219, 161, 161, 161, 33,
	11, 50, 50, 12, 8, 8, 114, 114, 77, 77,
	165, 165, 165, 59, 59, 42, 42, 42, 25, 25,
	25, 25, 25, 25, 25, 25, 25, 115, 115, 116,
	116, 24, 28, 32, 32, 32, 32, 32, 250, 250,
	56, 56, 56, 56, 57, 57, 128, 128, 128, 128,
	128, 51, 7, 7, 49, 49, 23, 23, 23, 23,
	23, 62, 62, 121, 121, 121, 123, 123, 122, 122,
	122, 100, 100, 34, 82, 82, 91, 91, 92, 92,
	171, 93, 93, 27, 27, 37, 37, 35, 35, 35,
	35, 35, 35, 36, 36, 38, 38, 38, 38, 38,
	38, 38, 225, 225, 225, 228, 228, 224, 226, 226,
	227, 227, 249, 249, 101, 101, 101, 72, 71, 71,
	75, 75, 74, 76, 76, 164, 98, 98, 98, 98,
	117, 118, 118, 119, 119, 120, 120, 97, 97, 147,
	147, 39, 39, 81, 81, 83, 83, 138, 138, 139,
	139, 137, 137, 137, 166, 166, 166, 166, 167, 167,
	167, 167, 167, 167, 162, 162, 162, 162, 163, 163,
	172, 172, 104, 104, 104, 104, 102, 102, 103, 103,
	168, 168, 168, 168, 99, 99, 169, 169, 169, 133,
	133, 175, 175, 175, 80, 80, 80, 176, 176, 176,
	176, 176, 176, 176, 176, 176, 176, 176, 176, 176,
	177, 177, 177, 177, 179, 179, 179, 178, 178, 178,
	178, 178, 178, 178, 178, 178, 178, 178, 178, 178,
	178, 180, 180, 187, 187, 188, 188, 189, 190, 181,
	181, 182, 182, 183, 184, 191, 191, 191, 191, 193,
	193, 185, 185, 185, 185, 185, 186, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 112, 112, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 142, 142, 142, 142, 142, 142, 142, 142,
	142, 142, 142, 142, 220, 220, 220, 220, 220, 220,
	220, 222, 222, 223, 223, 221, 221, 221, 221, 221,
	221, 221, 221, 221, 221, 221, 221, 221, 221, 221,
	221, 221, 221, 221, 221, 221, 221, 221, 221, 221,
	221, 221, 229, 229, 230, 230, 232, 232, 233, 233,
	234, 235, 235, 235, 236, 237, 237, 231, 231, 238,
	238, 238, 239, 239, 240, 240, 240, 240, 240, 152,
	152, 152, 153, 153, 154, 88, 88, 149, 149, 148,
	148, 148, 151, 151, 105, 105, 192, 192, 192, 192,
	192, 192, 192, 106, 106, 106, 113, 107, 107, 108,
	108, 108, 108, 108, 108, 144, 145, 109, 109, 109,
	146, 146, 155, 159, 159, 158, 157, 157, 156, 156,
	136, 136, 136, 136, 135, 134, 94, 94, 251, 251,
	160, 160, 95, 95, 96, 90, 90, 170, 170, 170,
	170, 84, 84, 64, 64, 85, 85, 60, 60, 63,
	61, 61, 61, 61, 78, 78, 79, 79, 58, 58,
	143, 143, 143, 143, 143, 143, 143, 143, 143, 143,
	143, 194, 194, 194, 53, 53, 53, 54, 54, 55,
	55, 199, 199, 199, 200, 200, 200, 200, 198, 198,
	198, 198, 198, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 206, 206, 206,
	206, 206, 206, 206, 206, 206, 206, 206, 206, 206,
	206, 206, 206, 206, 206, 206, 206, 206, 206, 206,
	206, 206, 206, 206, 206, 206, 206, 206, 206, 206,
	206, 206, 206, 206, 206, 206, 206, 206, 206, 206,
	206, 206, 206, 206, 206, 206, 206, 205, 205, 205,
	205, 205, 205, 205, 205, 205, 205, 205, 205, 205,
	205, 207, 207, 207, 207, 207, 207, 207, 207, 207,
	207, 207, 207, 207, 207, 207, 207, 207, 207, 207,
	207, 207, 207, 207, 207, 207, 207, 207, 207, 207,
	207, 207, 207, 207, 207, 207, 207, 207, 207, 207,
	207, 207, 207, 207, 207, 207, 207, 207, 207, 207,
	207, 207, 207, 207, 207, 207, 207, 207, 207, 207,
	207, 207, 207, 207, 207, 207, 207, 207, 207, 207,
	207, 207, 207, 207, 207, 207, 207, 207, 207, 207,
	207,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 4, 6,
	1, 3, 2, 5, 3, 6, 4, 6, 6, 6,
	4, 8, 3, 3, 3, 6, 4, 3, 2, 1,
	1, 0, 2, 0, 2, 0, 2, 0, 4, 6,
	7, 1, 1, 1, 1, 1, 1, 6, 3, 5,
	4, 6, 4, 6, 4, 6, 1, 3, 1, 2,
	2, 3, 2, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 1, 5, 3, 0, 1, 1,
	1, 1, 3, 3, 0, 2, 3, 2, 3, 6,
	6, 1, 2, 2, 1, 1, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 2, 3, 6,
	3, 1, 5, 2, 1, 1, 1, 3, 3, 2,
	3, 3, 3, 3, 1, 3, 3, 2, 1, 1,
	3, 1, 1, 1, 2, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 1,
	1, 1, 1, 1, 0, 1, 1, 2, 2, 4,
	2, 4, 4, 4, 4, 4, 4, 4, 2, 3,
	4, 3, 2, 4, 4, 2, 2, 0, 2, 0,
	8, 8, 7, 10, 6, 9, 1, 0, 1, 3,
	1, 1, 1, 1, 8, 0, 1, 1, 0, 3,
	2, 0, 3, 1, 2, 2, 3, 6, 2, 1,
	1, 2, 4, 2, 5, 7, 8, 5, 3, 1,
	4, 6, 5, 10, 1, 1, 4, 0, 3, 0,
	2, 2, 2, 0, 1, 1, 2, 2, 0, 3,
	3, 2, 1, 1, 2, 2, 1, 2, 1, 4,
	5, 2, 0, 6, 11, 14, 1, 0, 1, 3,
	3, 3, 5, 2, 0, 1, 1, 0, 6, 6,
	8, 6, 8, 8, 10, 8, 10, 1, 0, 2,
	0, 2, 2, 3, 3, 2, 2, 2, 1, 0,
	1, 3, 2, 0, 2, 1, 1, 1, 3, 3,
	0, 3, 4, 7, 3, 0, 6, 6, 8, 5,
	7, 1, 3, 1, 4, 2, 8, 5, 4, 3,
	0, 2, 0, 8, 2, 0, 1, 3, 1, 1,
	3, 5, 5, 1, 1, 3, 3, 1, 2, 3,
	2, 3, 4, 1, 1, 8, 8, 1, 2, 4,
	4, 4, 2, 2, 3, 1, 3, 6, 1, 0,
	1, 0, 1, 0, 1, 1, 0, 1, 1, 0,
	1, 0, 3, 1, 3, 2, 2, 2, 1, 1,
	2, 2, 3, 1, 1, 1, 1, 3, 0, 2,
	0, 2, 3, 3, 0, 1, 3, 3, 1, 1,
	3, 2, 4, 0, 3, 2, 1, 4, 3, 4,
	5, 4, 5, 4, 5, 2, 4, 1, 1, 0,
	5, 0, 2, 2, 2, 1, 1, 0, 4, 2,
	1, 2, 2, 4, 1, 3, 1, 2, 3, 2,
	0, 2, 5, 2, 3, 4, 0, 1, 1, 1,
	1, 2, 4, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 5, 0, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 2, 2, 1,
	1, 3, 0, 1, 1, 1, 1, 5, 2, 1,
	1, 1, 1, 4, 1, 2, 2, 1, 1, 1,
	0, 1, 1, 4, 1, 4, 1, 1, 1, 1,
	1, 1, 1, 3, 3, 3, 3, 3, 3, 3,
	0, 1, 4, 1, 3, 3, 3, 5, 2, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 2, 3, 4, 3, 4, 4, 5,
	3, 3, 3, 3, 3, 4, 3, 3, 4, 3,
	4, 3, 4, 5, 6, 6, 7, 6, 7, 6,
	7, 3, 4, 1, 3, 3, 2, 2, 2, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 5, 6,
	6, 7, 1, 1, 1, 3, 1, 1, 1, 2,
	2, 2, 1, 1, 3, 5, 6, 8, 6, 6,
	4, 4, 1, 1, 1, 5, 1, 3, 1, 3,
	1, 1, 1, 1, 6, 6, 4, 4, 4, 4,
	4, 6, 5, 5, 5, 4, 8, 6, 6, 4,
	4, 4, 5, 0, 5, 0, 2, 0, 1, 3,
	3, 2, 2, 0, 6, 1, 0, 3, 0, 2,
	2, 0, 1, 4, 2, 2, 2, 2, 2, 4,
	3, 5, 4, 3, 5, 1, 3, 1, 3, 3,
	3, 2, 1, 3, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 3, 1, 2, 3, 0, 3,
	3, 2, 2, 1, 0, 2, 2, 3, 2, 1,
	1, 3, 5, 1, 2, 4, 2, 0, 1, 0,
	1, 1, 3, 5, 2, 2, 1, 2, 1, 0,
	1, 1, 1, 3, 3, 1, 3, 3, 2, 1,
	1, 1, 3, 1, 3, 1, 3, 1, 2, 3,
	1, 1, 2, 2, 1, 3, 3, 0, 1, 2,
	1, 1, 1, 1, 6, 2, 3, 5, 1, 1,
	1, 1, 2, 2, 1, 1, 1, 1, 0, 3,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -6, -13, -14, -15,
	-17, -18, -20, -21, -22, -23, -25, -26, -28, -27,
	-29, -30, -31, -32, -24, -33, -34, 23, 64, -7,
	-8, -9, -10, -11, -12, -227, 92, 100, 122, 196,
	99, 85, 116, 210, 217, -35, -37, 225, -129, 226,
	34, 235, 58, 95, 212, 207, 256, 66, -225, -38,
	-36, 303, 278, 284, 220, -39, 243, 270, 306, 243,
	130, 78, -60, -53, 4, -204, -206, 20, 21, 23,
	33, 34, 39, 43, 46, 57, 58, 59, 61, 63,
	64, 65, 68, 69, 76, 77, 78, 79, 81, 85,
	87, 91, 92, 94, 99, 100, 106, 107, 110, 112,
	117, 122, 123, 124, 131, 134, 129, 143, 145, 146,
	151, 154, 157, 159, 160, 161, 162, 163, 165, 166,
	168, 170, 167, 173, 175, 176, 182, 185, 188, 189,
	190, 191, 194, 196, 198, 199, 200, 202, 203, 207,
	205, 206, 208, 210, 212, 213, 215, 217, 218, 219,
	222, 223, 225, 226, 228, 231, 234, 235, 236, 239,
	237, 233, 242, 244, 245, 252, 256, 257, 258, 259,
	262, 263, 264, 267, 268, 269, 274, 279, 280, 281,
	282, 28, 35, 36, 37, 38, 40, 41, 44, 45,
	49, 50, 51, 53, 80, 82, 83, 98, 101, 102,
	108, 118, 120, 125, 126, 135, 136, 137, 138, 140,
	149, 172, 174, 183, 187, 193, 195, 201, 214, 221,
	229, 230, 238, 240, 247, 248, 249, 253, 254, 270,
	271, 87, 134, 264, 263, 78, 130, 243, 273, -16,
	303, -27, -6, -14, -4, -23, -34, -13, -15, 23,
	-198, 4, -204, -206, -205, -207, 55, 67, 115, 133,
	127, 142, 144, 150, 152, 164, 184, 186, 211, 227,
	22, 24, 25, 26, 27, 29, 30, 31, 32, 42,
	47, 48, 52, 54, 56, 62, 66, 70, 71, 72,
	73, 74, 75, 84, 86, 88, 89, 90, 93, 95,
	97, 103, 104, 105, 111, 113, 114, 116, 119, 121,
	128, 130, 132, 139, 141, 147, 148, 153, 155, 156,
	169, 171, 177, 178, 179, 180, 181, 192, 197, 204,
	209, 220, 224, 232, 241, 243, 246, 250, 251, 255,
	260, 261, 265, 266, 272, 273, 275, 276, 277, 278,
	-53, -53, -53, 196, 22, -245, 22, -246, -247, 66,
	92, 116, 220, 134, 87, 263, -245, -57, 217, -53,
	-125, 154, 223, 214, 252, -126, -124, -197, 247, 163,
	-86, -53, 4, 78, 57, 79, 117, 130, 131, 62,
	63, 146, 244, 247, 252, 22, 66, -250, 252, 252,
	-250, -250, -56, 252, 250, -57, -249, 243, 243, 265,
	273, -114, 78, 261, -36, -38, -37, -74, -75, 260,
	139, 97, 181, -35, -37, -225, -228, 202, -224, -53,
	-228, -71, -72, 22, 89, 307, -168, -60, 179, -96,
	303, -3, -168, 125, -60, -63, 125, -60, -53, 114,
	303, -94, -136, -135, -134, 301, 305, 114, 141, 141,
	-169, -168, -53, 125, -64, 125, -63, -87, 125, -86,
	-87, 125, -174, -173, -200, 4, -204, -206, -205, 270,
	243, -150, 303, -110, 303, -53, 22, 178, 307, 178,
	-53, -125, 51, -125, 303, -127, -51, -52, 143, 198,
	250, 288, 114, 282, -67, 5, 84, -89, 305, 114,
	-242, 178, 114, 114, 114, 114, 114, 114, 282, 143,
	198, 243, 273, -128, -51, -52, -128, 250, -57, -99,
	-168, -86, 125, -53, -86, 130, -53, 125, -74, -75,
	-98, -117, -118, 153, 177, -101, 22, 89, -101, -101,
	43, 304, 304, 307, -228, -79, 303, -90, -170, -140,
	296, -142, 294, 295, 300, 169, 283, -152, -60, -143,
	9, 303, -155, -222, -37, 98, 29, -153, -154, 214,
	-53, 7, 8, 5, 6, -58, -177, -186, 255, 103,
	171, 47, -220, -221, 4, -204, -199, -178, -188, -182,
	-185, 140, 55, 71, 74, 72, 75, 224, 265, 48,
	28, 101, 102, 187, 193, 240, 253, 254, 125, 172,
	126, 53, 118, 149, 91, 36, 38, 40, 41, 49,
	50, 80, 82, 83, 108, 135, 136, 137, 138, 174,
	201, 229, 238, 248, 249, 271, -205, -189, -190, -183,
	-184, -191, -90, -96, 296, -60, 303, -95, -160, -140,
	84, -44, 205, -43, 21, 23, 92, 268, 98, 233,
	233, 205, 98, 308, 205, 236, 304, -84, -60, -136,
	-140, -198, 296, -169, -62, -60, -62, 225, -53, 30,
	98, -46, 307, 46, 208, 98, -46, 307, 98, -46,
	98, 304, 307, -168, 125, 30, -149, -175, -176, -178,
	-187, -181, -185, -186, 39, 45, 44, 245, 221, 230,
	37, 135, 136, 137, 138, 229, 36, 201, 108, 91,
	83, 82, 174, 41, 40, -189, -190, -183, -184, 80,
	248, 249, 140, 38, 50, 49, 271, 238, -88, -140,
	-241, -85, 243, 78, -61, -53, 296, -247, -241, 30,
	-88, 307, 307, 151, -66, 157, 168, 123, -196, 84,
	-202, -195, -161, 9, 255, 103, 178, -201, 8, 295,
	-194, -200, 5, 7, 294, -196, 84, 69, -203, 5,
	4, -186, -161, 84, 154, 305, -198, -197, -244, 111,
	-241, -197, -197, -197, -197, -197, -53, 151, -197, -197,
	307, 307, -57, -46, 307, 303, -73, 169, -226, 278,
	-73, 303, -54, 125, -53, -49, 94, 169, -98, -118,
	-117, -119, -140, 22, -140, -142, -36, -36, -36, -76,
	-164, -140, -224, 30, -78, -53, -81, 307, 114, 10,
	11, 54, 33, 294, 295, 296, 297, 109, 298, 291,
	292, 293, 290, 286, 287, 288, 60, 158, 216, 13,
	14, 15, 26, 180, 152, 283, 127, 227, 300, 16,
	17, 18, 142, 35, 128, 30, 4, -140, -140, -140,
	-140, -140, 186, -37, -140, -88, -94, -37, -148, 301,
	303, -94, 303, 5, 5, 303, -156, -140, -229, 279,
	111, 303, 303, 303, 303, 303, 303, 303, 303, 303,
	303, 303, 303, 303, 303, 303, 303, 303, 195, -193,
	274, -193, -193, -179, 303, -179, -180, 303, -179, 280,
	284, 303, -81, -60, 307, 304, 307, 250, -115, 62,
	56, -131, 125, 56, -208, -53, 62, -209, 52, 261,
	197, 113, -115, 62, -115, 62, 62, -168, 33, 33,
	250, -63, -53, 250, 114, 304, 307, 302, 311, -133,
	276, -121, -27, 303, 84, 30, -121, -91, -92, -171,
	-93, -60, 303, -53, -53, -63, -64, -86, -87, -87,
	-16, -173, 98, -19, -27, -23, -34, -13, 304, 307,
	-80, 29, -111, 303, 281, 161, 81, 124, 160, -112,
	219, 304, 307, 250, 307, -85, -78, -135, -134, 114,
	252, 304, -52, -51, -65, 200, 231, 206, 222, 307,
	8, 7, 7, 5, -198, -243, -53, -52, -51, -168,
	-68, -78, -69, -53, -132, -131, -210, -211, -208, 130,
	261, 104, 30, 98, -50, 191, 30, 178, 169, 288,
	98, -120, 214, 215, 307, -42, 31, 88, 303, 307,
	304, -133, -170, -83, -166, -168, -37, -167, 303, -175,
	-175, -86, 247, -140, -140, -140, -140, -140, -140, -140,
	-140, -140, -140, -140, -140, -140, -140, -140, -140, -140,
	-140, -140, -140, -140, -140, 152, 127, 227, 35, 128,
	-140, 250, -140, -140, -140, -140, 171, 169, 255, 103,
	262, 89, 175, -251, 241, 32, -146, -37, 303, -198,
	-152, 214, 303, 304, 307, -88, -151, 302, -148, -88,
	304, 304, -88, 272, 22, 89, 296, -111, 7, -159,
	-158, 275, -230, 106, 119, 303, 304, 304, -140, -140,
	-105, -192, -88, 4, 281, 161, 81, 124, 160, 219,
	-105, -106, -140, -88, -107, -141, -142, 294, 295, 300,
	303, 214, -108, -140, -88, -140, 42, 148, 251, -109,
	-140, 114, -88, -140, -140, -140, -88, -88, -88, 303,
	7, 7, 247, 247, 7, -133, 304, -160, -43, -60,
	-53, -53, 169, -131, 125, -48, 169, -175, -53, 303,
	303, 145, 145, -53, -53, 125, -53, 125, -53, -53,
	-44, 205, 303, 303, -53, 205, -53, 236, 114, -60,
	-140, -100, 209, -140, -100, -123, 178, -84, 270, -53,
	209, -82, 307, 114, 288, -84, -46, -46, -46, -168,
	-175, 301, 301, 7, 250, 250, 250, 250, 303, -140,
	-243, -61, -243, -51, 259, 59, 200, -202, -111, 307,
	304, 304, 307, -54, 130, -54, -27, -86, 5, -27,
	-60, 98, 5, -53, -164, -19, -53, -97, 119, -172,
	307, 285, 67, -104, 144, 164, 115, 150, 211, 133,
	-137, 308, -163, -162, 30, -53, -37, -167, -166, 282,
	-140, -140, 250, -251, 241, -146, -140, 171, 255, 103,
	262, 89, 175, 114, 303, -141, -141, -88, 303, -88,
	-140, 302, 302, 307, 304, -75, 307, -74, -140, -88,
	-88, 304, 304, -157, -158, 93, -140, -235, 185, 303,
	303, -140, 30, 307, 304, 114, 304, 304, -113, 192,
	304, 10, 11, 294, 295, 296, 297, 109, 298, 291,
	292, 293, 290, 286, 287, 288, 60, 158, 216, 13,
	14, 15, 142, 128, -141, -141, -141, -88, 303, 304,
	-144, -145, 114, 111, 30, -109, -109, -109, 304, 114,
	-88, 307, 307, 307, 304, 304, 304, 7, 304, 307,
	304, 282, 282, 304, -97, 250, 250, 98, 169, 267,
	-212, -209, -140, -78, 303, 303, -41, 92, 225, -116,
	98, -46, 98, -46, 250, -115, 62, -88, -88, 250,
	236, 302, -90, 209, 61, 304, -90, -133, -92, -83,
	-160, 304, 302, 7, 7, 304, 161, 124, 160, -112,
	160, -112, -112, 7, -53, -70, 129, -132, 303, -54,
	303, 303, -73, 303, -53, -49, 304, -147, 121, 43,
	-166, 175, 144, 144, -166, -104, 144, -102, 184, -102,
	-102, -163, -198, 309, -53, 303, 304, -140, -140, -141,
	-141, 114, 303, -140, -149, 26, 26, 304, -88, 304,
	307, 304, -148, 304, 272, -75, -75, -75, 5, 95,
	-140, 246, -236, -53, 303, 276, -74, 304, -175, -175,
	-140, -144, -140, -175, -175, -141, -141, -141, -141, -141,
	-141, -141, -141, -141, -141, -141, -141, -141, -141, -141,
	-141, -141, -141, -141, 89, 169, 175, -141, 307, -88,
	304, -145, -144, -140, -140, -175, 304, 304, 304, -88,
	-140, -140, -140, 304, 7, -147, -53, -53, -131, 98,
	-213, 62, -214, 54, 104, 66, 169, 171, 261, 197,
	52, 84, 204, 304, 304, -78, -78, 169, 84, 169,
	84, 77, 257, -53, -53, -60, -53, -53, 304, 304,
	-53, -90, -122, 303, 178, -27, -100, 288, 302, 302,
	304, 128, -77, -165, -53, -223, 303, -220, -221, -58,
	303, -78, -68, 30, -77, 178, -232, 277, -140, -88,
	242, -166, -166, -103, 266, 178, 144, -166, -139, -138,
	112, 167, 303, -78, -162, 26, 26, -140, -149, 304,
	-140, -140, 304, -140, 5, -140, 304, 304, 304, -140,
	-237, -53, -140, 304, 304, 304, -145, 114, 89, 175,
	303, -140, 304, 304, 307, 304, 304, 304, -232, -131,
	-53, -86, -53, 104, 125, 171, 145, 303, -141, -60,
	-130, -248, 65, 239, 304, 304, 171, 171, -140, -175,
	-46, -46, 250, 250, 90, -78, 62, -96, -37, 303,
	188, 304, 307, -59, -94, 54, -59, -140, 303, -77,
	304, 304, -27, 304, -60, -233, -234, -53, 247, -103,
	303, -140, -166, 307, 310, 288, -78, 304, -140, -140,
	304, 304, -75, -231, 190, 304, -141, 114, 303, -149,
	304, -140, -214, -54, 169, -140, -55, 303, -70, 303,
	204, -45, 54, -53, -53, 263, 170, 304, -53, -53,
	-130, -165, -42, -86, -42, 304, -88, 304, -70, -130,
	303, 307, 30, 5, -78, -138, -198, 304, 304, -75,
	43, -141, -149, 304, 304, 98, 304, -217, 159, -53,
	-78, -60, -40, 266, -86, 225, -133, 303, -70, -59,
	-75, -130, -70, -77, -234, -236, 304, -238, 199, 215,
	-88, 304, 104, -215, -218, -216, 178, 115, 189, 228,
	304, 304, -73, -140, -91, -78, -42, 304, -70, 304,
	304, -239, -240, 35, 258, 69, -140, -239, -53, -216,
	178, -218, 178, 263, 87, -217, -133, 304, -130, -240,
	194, 110, 214, 194, 110, -219, 166, 208, 46, 225,
	-219, -215, -47, 46, 208, -70, 26, 20, 171, 84,
	-240,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 0, 0, 61,
	62, 63, 64, 65, 66, 0, 0, 381, 0, 0,
	0, 0, 0, 0, 0, 353, -2, 0, 131, 0,
	309, 0, 309, 309, 313, 0, 383, 277, 380, -2,
	391, 0, 0, 0, 389, 367, 0, 0, -2, 0,
	0, 0, 0, 787, 814, 815, 816, 833, 834, 835,
	836, 837, 838, 839, 840, 841, 842, 843, 844, 845,
	846, 847, 848, 849, 850, 851, 852, 853, 854, 855,
	856, 857, 858, 859, 860, 861, 862, 863, 864, 865,
	866, 867, 868, 869, 870, 871, 872, 873, 874, 875,
	876, 877, 878, 879, 880, 881, 882, 883, 884, 885,
	886, 887, 888, 889, 890, 891, 892, 893, 894, 895,
	896, 897, 898, 899, 900, 901, 902, 903, 904, 905,
	906, 907, 908, 909, 910, 911, 912, 913, 914, 915,
	916, 917, 918, 919, 920, 921, 922, 923, 924, 925,
	926, 927, 928, 929, 930, 931, 932, 933, 934, 935,
	936, 937, 938, 939, 940, 941, 942, 943, 944, 945,
	946, 947, 948, 949, 950, 951, 952, 953, 954, 955,
	956, 957, 958, 959, 960, 961, 962, 963, 964, 965,
	966, 967, 968, 969, 970, 971, 972, 973, 974, 975,
	976, 977, 978, 979, 980, 981, 982, 983, 984, 985,
	986, 987, 988, 989, 990, 991, 992, 993, 994, 995,
	996, 0, 0, 0, 0, 0, 0, 0, 0, 82,
	0, 84, 85, 86, 87, 88, 89, 90, 91, 0,
	195, 828, 829, 830, 831, 832, 997, 998, 999, 1000,
	1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010,
	1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020,
	1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030,
	1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040,
	1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050,
	1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060,
	1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070,
	1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080,
	1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090,
	97, 104, 105, 899, 107, 0, 114, 115, 116, 118,
	119, 120, 121, 122, 123, 124, 0, 302, 913, 315,
	127, 877, 917, 984, 931, 134, 144, 0, 990, -2,
	148, 78, 177, 178, 0, 180, 197, 0, 0, 0,
	0, 0, 188, 0, 0, 192, 0, 320, 308, 320,
	305, 306, 307, 310, 0, 301, 0, 382, 0, 0,
	0, 0, 0, 276, -2, 363, 364, -2, 0, 386,
	386, 386, 0, 0, 364, 0, 372, 903, 375, 797,
	373, 0, 0, 388, 387, 0, 368, 450, 0, 411,
	0, 2, 0, 969, 450, 0, 969, 0, 0, 0,
	0, 788, 766, 760, 761, 0, 0, 0, 0, 0,
	0, 456, 68, 969, 51, 969, 783, 51, 969, 76,
	51, 969, 0, 92, 94, 824, 825, 826, 827, 995,
	0, 0, 0, 102, 0, 106, 108, 0, 0, 0,
	314, 128, 958, 130, 0, 133, 135, 136, 0, 0,
	0, 0, 0, 0, 147, 172, 173, 79, 0, 0,
	199, 0, 0, 0, 0, 0, 0, 0, 189, 0,
	191, 0, 0, 303, 316, 317, 304, 0, 312, 51,
	454, 249, 969, 379, 249, 818, 325, 969, -2, 0,
	359, 398, 399, 0, 0, 0, 384, 385, 0, 0,
	0, 355, 356, 0, 374, 0, 0, 414, 775, 779,
	780, 543, 0, 0, 0, 0, 0, 0, 632, 633,
	634, 0, 636, 637, 638, 963, 0, 642, 643, 984,
	787, 800, 801, 802, 803, 0, 0, 0, 808, 809,
	810, 759, 683, 652, -2, -2, 798, 480, 481, 482,
	483, -2, 997, 656, 658, 660, 661, 662, 663, 0,
	947, 964, 965, 980, 981, 989, 993, 994, 969, 977,
	970, 959, 967, 976, 857, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, 823, 505, 506, 511,
	512, 514, 414, 412, 451, 452, 0, 0, 772, 770,
	771, 28, 298, 30, 0, 298, 298, 0, 0, 0,
	0, 0, 0, 0, 0, 58, 0, 0, 781, 767,
	0, 764, 765, 460, 0, 331, 0, 0, 457, 0,
	0, 70, 0, 49, 50, 0, 72, 0, 0, 74,
	0, 381, 0, 0, 969, 381, 0, 717, 466, 467,
	468, 469, 470, 540, 473, 474, 475, 476, 477, 478,
	479, 487, 488, 489, 490, 491, 492, 493, 502, 0,
	486, 486, 486, 499, 500, 503, 504, 509, 510, 521,
	522, 524, 526, 520, 520, 520, 517, 518, 0, 715,
	0, 111, 0, 852, 785, 790, 791, 117, 0, 0,
	0, 0, 0, 0, 139, 159, 160, 161, 140, 142,
	149, 151, 152, 153, 162, 163, 164, 165, 266, 0,
	268, 175, 176, 811, 0, 141, 143, 145, 146, 166,
	167, 0, 169, 170, 171, 0, 80, 179, 181, 0,
	196, 182, 183, 184, 185, 186, 187, 190, 193, 194,
	0, 0, 311, 269, 0, 207, 0, 0, 272, 378,
	0, 0, 0, 969, 817, 322, 0, 0, 362, 396,
	397, 400, 403, 404, 401, 543, 369, 370, 371, 392,
	393, 287, 376, 0, 0, 794, 460, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 769, 0, 0, 778, 548, 549, 550,
	572, 573, 0, -2, 715, 0, 639, 640, 641, 0,
	0, -2, 0, 805, 540, 0, 0, 758, 685, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 738, 744,
	0, 0, 0, 0, 0, 0, 0, 0, 495, 508,
	519, 516, 515, 497, 0, 496, 494, 0, 498, 0,
	0, 0, 460, 0, 0, 774, 0, 0, 0, 0,
	297, 32, 969, 0, 53, 0, 0, 239, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 789, 0, 0, 0, 0, 762, 0, 342,
	0, 342, 333, 0, 0, 0, 329, 345, 346, 348,
	349, 0, 0, 458, 69, 784, 51, 77, 51, 51,
	83, 93, 0, 95, 98, 99, 100, 101, 96, 0,
	461, 463, 471, 0, 527, 528, 529, 530, 531, 532,
	541, 103, 0, 0, 0, 112, 113, 792, 793, 0,
	0, 132, 137, 138, 321, 0, 156, 0, 158, 0,
	267, 813, 812, 540, 81, 198, 125, 318, 319, 455,
	0, 0, 206, 794, 208, 210, 211, 212, 213, 818,
	0, 818, 0, 0, 270, 0, 0, 0, 0, 0,
	0, 402, 405, 406, 0, 395, 285, 286, 381, 0,
	796, 408, 776, 441, 415, 423, 439, 426, 0, 544,
	545, 546, 0, 551, 552, 553, 554, 555, 556, 557,
	558, 559, 560, -2, -2, -2, 564, 565, 566, -2,
	-2, -2, 570, 571, -2, 0, 0, 0, 769, 0,
	-2, 0, 580, -2, -2, -2, 584, 0, 587, 589,
	591, 0, 0, 0, 0, 768, 601, 750, 0, 777,
	586, 0, 0, 635, 0, 0, 0, 721, 722, 0,
	-2, 644, 391, 0, 0, 0, 0, 806, 0, 757,
	753, 0, 693, 0, 0, 0, 657, 659, 0, 0,
	0, 0, 725, -2, -2, -2, -2, -2, -2, -2,
	0, 0, 715, 735, 0, 0, 603, 0, 0, 0,
	0, 984, 0, 715, 743, 0, 0, 0, 0, 0,
	715, 0, 749, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 408, 453, 773, 31, 289,
	0, 0, 0, 34, 969, 42, 0, 221, 0, 0,
	0, 0, 0, 300, 43, 969, 51, 969, 51, 44,
	29, 298, 0, 0, 291, 0, 288, 59, 0, 782,
	0, 67, 0, 459, 326, 327, 0, 0, 335, 332,
	0, 460, 0, 0, 0, 0, 71, 73, 75, 0,
	718, 0, 0, 0, 0, 0, 0, 0, 0, 716,
	109, 786, 110, 129, 154, 155, 157, 150, 168, 0,
	215, 248, 0, 0, 818, 0, 204, 249, 271, 273,
	0, 0, 324, 325, 394, 0, 795, 410, 0, 413,
	0, 0, 0, 0, 0, 0, 447, 447, 447, 445,
	439, 0, 425, 438, 0, 437, -2, 426, 0, 0,
	-2, -2, 0, 0, 0, 602, -2, 585, 588, 590,
	592, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	716, 719, 720, 0, -2, 0, 0, 390, 391, 391,
	391, 650, 0, 0, 754, 0, 0, 651, 0, 0,
	0, 0, 0, 0, 666, 0, 667, 668, 0, 0,
	669, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 606, 607, 608, 0, 0, 670,
	741, 742, 0, 0, 0, 0, 0, 0, 675, 0,
	748, 0, 0, 0, 679, 680, 681, 0, 484, 0,
	501, 523, 525, 513, 410, 0, 0, 0, 0, 52,
	219, 238, 0, 0, 0, 0, 36, 0, 0, 0,
	0, 40, 0, 46, 0, 0, 0, 0, 0, 0,
	60, 763, 341, 0, 340, 0, 330, 342, 347, 344,
	350, 0, 464, 0, 0, 472, 533, 534, 535, 536,
	537, 538, 539, 0, 126, 202, 0, 209, 0, 0,
	0, 207, 0, 0, 0, 323, 377, 687, 0, 0,
	416, 0, 0, 0, 0, 0, 0, 442, 446, 443,
	444, 424, 421, 0, 435, 0, 428, 547, -2, 0,
	0, 0, 0, -2, 0, 0, 0, 751, 0, 710,
	0, -2, 723, 645, 0, 0, 0, 0, 807, 752,
	756, 0, 691, 692, 696, 0, 0, 655, 0, 0,
	724, 734, 736, 604, 605, 609, 610, 611, 612, 613,
	614, 615, 616, 617, 618, -2, -2, -2, 622, 623,
	624, -2, -2, -2, 0, 0, 0, 737, 0, 0,
	713, 739, 740, 745, 746, 0, 672, 673, 674, 747,
	0, 0, 0, 507, 0, 687, 293, 295, 33, 0,
	220, 0, 223, 0, 0, 0, 0, 229, 230, 0,
	0, 0, 0, 240, 247, 0, 0, 0, 48, 0,
	0, 299, 0, 51, 51, 290, 0, 0, 200, 201,
	292, 328, 0, 0, 0, 334, 343, 0, 465, 462,
	542, 0, 0, 278, 284, 284, 0, 653, 654, 0,
	0, 0, 0, 0, 0, 0, 365, 0, 409, 407,
	0, 429, 0, 431, 0, 0, 0, 433, 0, 419,
	0, 418, 0, 0, 427, 0, 0, -2, 0, 595,
	-2, -2, 709, 716, 804, 391, 646, 648, 649, 755,
	698, 695, 0, 682, 664, 665, 733, 0, 0, 0,
	0, 716, 712, 671, 0, 677, 678, 485, 366, 35,
	0, 224, 225, 818, 0, 228, 231, 0, 233, 820,
	215, 0, 244, 245, 242, 0, 37, 38, 47, 55,
	39, 45, 0, 0, 0, 0, 0, 351, 352, 0,
	0, 247, 0, 287, 799, 0, 287, 0, 0, 0,
	237, 215, 205, 247, 0, 686, 688, 0, 0, 430,
	0, 449, 432, 0, 422, 0, 0, 436, -2, -2,
	596, 711, 0, 391, 0, 684, -2, 0, 0, 0,
	714, 0, 222, 226, 0, 0, 253, 0, 241, 0,
	0, 57, 0, 294, 296, 0, 337, 460, 339, 0,
	215, 279, 280, 283, 281, 284, 391, 247, 203, 215,
	0, 0, 0, 440, 0, 420, 417, 434, 647, 701,
	0, -2, 0, 630, 676, 0, 232, 258, 0, 0,
	0, 249, 41, 0, 54, 0, 338, 0, 235, 287,
	0, 215, 274, 0, 689, 690, 448, 0, 0, 0,
	697, 631, 0, 234, 254, 255, 0, 250, 251, 252,
	819, 246, 253, 56, 460, 0, 282, 645, 236, 247,
	694, 699, 702, -2, 934, 849, 0, 700, 227, 256,
	0, 257, 0, 0, 0, 258, 336, 218, 215, 0,
	704, 705, 706, 707, 708, 259, 0, 262, 263, 0,
	260, 243, 214, 216, 217, 275, 0, 261, 264, 265,
	703,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 292, 3, 298, 293, 3,
	303, 304, 296, 294, 307, 295, 305, 297, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 311, 306,
	286, 288, 287, 3, 308, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 301, 3, 302, 291, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 309, 290, 310, 300,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 289, 57629, 299,
	0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:702
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:708
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:714
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 19:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:739
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 27:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:750
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 28:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:756
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 29:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:760
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 30:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:766
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 31:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:770
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:777
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 33:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:782
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:787
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:792
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 36:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:797
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:802
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:806
		{
			unimplemented()
		}
	case 39:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:809
		{
			sqlVAL.union.val = &AlterTableDropColumn{columnKeyword: sqlDollar[2].union.bool(), IfExists: true, Column: Name(sqlDollar[5].str)}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:814
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 41:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:824
		{
			unimplemented()
		}
	case 42:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:827
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 43:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:834
		{
			unimplemented()
		}
	case 44:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:837
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 45:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:844
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 46:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:853
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 47:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:863
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 48:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:867
		{
			sqlVAL.union.val = nil
		}
	case 49:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:873
		{
			sqlVAL.union.val = DropCascade
		}
	case 50:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:877
		{
			sqlVAL.union.val = DropRestrict
		}
	case 51:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:881
		{
			sqlVAL.union.val = DropDefault
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:887
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 53:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:891
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 54:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:896
		{
			unimplementedWithIssue(2473)
		}
	case 55:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:897
		{
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:900
		{
			unimplemented()
		}
	case 57:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:901
		{
		}
	case 58:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:905
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:909
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:913
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:929
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retExprs()}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:936
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 69:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:940
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 70:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:944
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 71:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:952
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 72:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:960
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 73:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:964
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 74:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:968
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 75:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:972
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:978
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:982
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 78:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:988
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:992
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 80:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:998
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1002
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 82:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1009
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1013
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1019
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 91:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1028
		{ /* SKIP DOC */
		}
	case 92:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1032
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1036
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 95:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1046
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1056
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 97:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1060
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 98:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1066
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1076
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1087
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 104:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1091
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 105:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1098
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1104
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1110
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1114
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1121
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1128
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1135
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1139
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1143
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1150
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1153
		{
		}
	case 116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1157
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1161
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1168
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1172
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1176
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1180
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1184
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1188
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1192
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1200
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1204
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 127:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1212
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1216
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 129:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1220
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1224
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1227
		{ /* SKIP DOC */
		}
	case 132:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1233
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1239
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1246
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1250
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1254
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1258
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1265
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1271
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1275
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1279
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1283
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1290
		{
			unimplemented()
		}
	case 146:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1293
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1296
		{
			unimplemented()
		}
	case 149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1303
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1307
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1315
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1321
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 155:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1325
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1329
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1333
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1337
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1343
		{
			sqlVAL.union.val = Low
		}
	case 160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1347
		{
			sqlVAL.union.val = Normal
		}
	case 161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1351
		{
			sqlVAL.union.val = High
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1357
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1361
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1365
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1380
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1384
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1388
		{
			d, err := ParseDInterval(sqlDollar[2].str)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1398
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1402
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1407
		{
			unimplemented()
		}
	case 173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1408
		{
			unimplemented()
		}
	case 174:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1409
		{
		}
	case 175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1413
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1417
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1423
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1427
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1431
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1435
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1439
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1443
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1447
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1451
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1455
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1459
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1463
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1467
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1471
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1475
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1479
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1483
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 193:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1487
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1491
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1497
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1503
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 197:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1508
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1514
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 199:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1518
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 200:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1524
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.normalizableTableName(), Exprs: sqlDollar[7].union.exprs()}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1528
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Exprs: sqlDollar[7].union.exprs()}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1535
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1539
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1545
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1549
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1556
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1562
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1566
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 210:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1572
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1578
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 214:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1584
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1592
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 216:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1599
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 217:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1603
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 218:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1607
		{
			sqlVAL.union.val = DropDefault
		}
	case 219:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1613
		{
			sqlVAL.union.val = newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
		}
	case 220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1619
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 221:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1623
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1629
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1633
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1636
		{
			unimplemented()
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1638
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1642
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 227:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1646
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1664
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1668
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 230:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1672
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 231:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1676
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1680
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1684
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1688
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1697
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1706
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1719
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1731
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 239:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1736
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 240:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1742
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 241:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1748
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    NameListToIndexElems(sqlDollar[3].union.nameList()),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 242:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1758
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[4].union.nameList()),
				},
				PrimaryKey: true,
			}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1768
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1791
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 247:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1795
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1801
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 249:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1805
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1810
		{
			unimplemented()
		}
	case 251:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1811
		{
			unimplemented()
		}
	case 252:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1812
		{
			unimplemented()
		}
	case 253:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1813
		{
		}
	case 254:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1820
		{
			unimplemented()
		}
	case 255:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1821
		{
			unimplemented()
		}
	case 256:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1822
		{
			unimplemented()
		}
	case 257:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1823
		{
			unimplemented()
		}
	case 258:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1824
		{
		}
	case 259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1827
		{
			unimplemented()
		}
	case 260:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1830
		{
			unimplemented()
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1833
		{
			unimplemented()
		}
	case 262:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1834
		{
			unimplemented()
		}
	case 263:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1835
		{
			unimplemented()
		}
	case 264:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1836
		{
			unimplemented()
		}
	case 265:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1837
		{
			unimplemented()
		}
	case 266:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1841
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 267:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1845
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1849
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 269:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1856
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1863
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[5].union.strVal()}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1869
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[2].str}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1872
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 273:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1879
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:1892
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:1903
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1917
		{
			sqlVAL.union.val = true
		}
	case 277:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1921
		{
			sqlVAL.union.val = false
		}
	case 278:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1927
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1931
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 280:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1940
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1943
		{
			unimplemented()
		}
	case 282:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1944
		{
			unimplemented()
		}
	case 283:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1947
		{
			unimplemented()
		}
	case 284:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1948
		{
		}
	case 285:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1952
		{
			sqlVAL.union.val = Ascending
		}
	case 286:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1956
		{
			sqlVAL.union.val = Descending
		}
	case 287:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1960
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 288:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1967
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1971
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1975
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1979
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1983
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1987
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1991
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1995
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 296:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1999
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 297:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2005
		{
			sqlVAL.union.val = true
		}
	case 298:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2009
		{
			sqlVAL.union.val = false
		}
	case 299:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2014
		{
		}
	case 300:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2015
		{
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2019
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2025
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2032
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 304:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2036
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2040
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2044
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2048
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2057
		{
		}
	case 309:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2058
		{
		}
	case 310:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2062
		{
			sqlVAL.str = ""
		}
	case 311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2066
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 312:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2070
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 313:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2074
		{
			sqlVAL.str = ""
		}
	case 314:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2080
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 315:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2084
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 316:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2090
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2094
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2098
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2102
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2106
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2112
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 322:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2118
		{
			sqlVAL.union.val = &CreateDatabase{Name: Name(sqlDollar[3].str), Encoding: sqlDollar[4].union.strVal()}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2122
		{
			sqlVAL.union.val = &CreateDatabase{IfNotExists: true, Name: Name(sqlDollar[6].str), Encoding: sqlDollar[7].union.strVal()}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2128
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2131
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 326:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2141
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retExprs()
		}
	case 327:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2147
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
		}
	case 328:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2152
		{
			unimplementedWithIssue(6637)
		}
	case 329:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2154
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2159
		{
			unimplementedWithIssue(6637)
		}
	case 331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2167
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 332:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2171
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2177
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2181
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2185
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2191
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2195
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2201
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 339:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2205
		{
			unimplemented()
		}
	case 340:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2207
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 341:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2213
		{
			sqlVAL.union.val = sqlDollar[2].union.selExprs()
		}
	case 342:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2217
		{
			sqlVAL.union.val = SelectExprs(nil)
		}
	case 343:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2224
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retExprs()}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2230
		{
			unimplementedWithIssue(7841)
		}
	case 345:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2231
		{
		}
	case 346:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2235
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2239
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 350:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2249
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2261
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2265
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2309
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2315
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2319
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2334
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2338
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 359:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2342
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 360:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2346
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 361:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2350
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2354
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 365:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2388
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2401
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2414
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 369:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2422
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 370:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2431
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2440
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2458
		{
			unimplemented()
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2459
		{
			unimplemented()
		}
	case 374:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2460
		{
			unimplemented()
		}
	case 375:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2463
		{
			unimplemented()
		}
	case 376:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2464
		{
			unimplemented()
		}
	case 377:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2467
		{
			unimplemented()
		}
	case 378:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2470
		{
		}
	case 379:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2471
		{
		}
	case 380:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2474
		{
			unimplemented()
		}
	case 381:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2475
		{
		}
	case 382:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2478
		{
		}
	case 383:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2479
		{
		}
	case 384:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2483
		{
			sqlVAL.union.val = true
		}
	case 385:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2487
		{
			sqlVAL.union.val = false
		}
	case 386:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2491
		{
			sqlVAL.union.val = false
		}
	case 387:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2497
		{
			sqlVAL.union.val = true
		}
	case 388:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2502
		{
		}
	case 389:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2503
		{
		}
	case 390:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2507
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 391:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2511
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 392:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2517
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 393:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2523
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2527
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 395:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2533
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2541
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2550
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2561
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2574
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2581
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2588
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 405:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2602
		{
		}
	case 406:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2603
		{
		}
	case 407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2629
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 408:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2633
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 409:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2639
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 410:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2643
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 411:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2649
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2653
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2665
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2669
		{
			sqlVAL.union.val = &From{}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2675
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2679
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2685
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2690
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2696
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 420:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2701
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			index := a.Index
			if index == "" {
				index = b.Index
			} else if b.Index != "" {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			noIndexJoin := a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = &IndexHints{Index: index, NoIndexJoin: noIndexJoin}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2721
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2725
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 423:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2729
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 424:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2736
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), As: sqlDollar[3].union.aliasClause()}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2740
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, As: sqlDollar[2].union.aliasClause()}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2744
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 427:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2748
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[2].union.tblExpr(), As: sqlDollar[4].union.aliasClause()}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2768
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2772
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2776
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2780
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2784
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2788
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2794
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2798
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2802
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2806
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2813
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2819
		{
			sqlVAL.union.val = AsOfClause{Expr: &StrVal{s: sqlDollar[5].str}}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2823
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2829
		{
			sqlVAL.str = astFullJoin
		}
	case 443:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2833
		{
			sqlVAL.str = astLeftJoin
		}
	case 444:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2837
		{
			sqlVAL.str = astRightJoin
		}
	case 445:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2841
		{
			sqlVAL.str = astInnerJoin
		}
	case 446:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2847
		{
		}
	case 447:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2848
		{
		}
	case 448:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2859
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2863
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2869
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 451:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2873
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 452:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2877
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 453:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2881
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 454:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2887
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2891
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 456:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2904
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 457:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2908
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2912
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2918
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 460:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2922
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 461:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2934
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 462:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2938
		{
			unimplementedWithIssue(2115)
		}
	case 463:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2939
		{
			unimplementedWithIssue(2115)
		}
	case 464:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2942
		{
			unimplementedWithIssue(2115)
		}
	case 465:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2943
		{
			unimplementedWithIssue(2115)
		}
	case 466:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2944
		{
		}
	case 472:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2952
		{
			unimplemented()
		}
	case 473:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2954
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2958
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 475:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2962
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 476:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2966
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 477:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2970
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 478:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2974
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 479:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2978
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 484:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2999
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3008
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3022
		{
			sqlVAL.union.val = nil
		}
	case 487:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3029
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 488:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3033
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 489:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3037
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 490:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3041
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 491:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3045
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 492:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3049
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 493:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3053
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 494:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3057
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newFloatColType(int(prec))
		}
	case 495:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3066
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 496:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3070
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3079
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3088
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3097
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 500:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3101
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3107
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 502:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3111
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3129
		{
			n, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 508:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3145
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 513:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3161
		{
			n, err := sqlDollar[3].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3177
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 515:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3183
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 516:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3187
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 517:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3191
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 518:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3195
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 519:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3200
		{
		}
	case 520:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3201
		{
		}
	case 521:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3206
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 522:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3210
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 523:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3214
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 524:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3218
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 525:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3222
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3227
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 527:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3232
		{
			unimplemented()
		}
	case 528:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3233
		{
			unimplemented()
		}
	case 529:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3234
		{
			unimplemented()
		}
	case 530:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3235
		{
			unimplemented()
		}
	case 531:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3236
		{
			unimplemented()
		}
	case 532:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3237
		{
			unimplemented()
		}
	case 533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3238
		{
			unimplemented()
		}
	case 534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3239
		{
			unimplemented()
		}
	case 535:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3240
		{
			unimplemented()
		}
	case 536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3241
		{
			unimplemented()
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3242
		{
			unimplemented()
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3243
		{
			unimplemented()
		}
	case 539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3244
		{
			unimplemented()
		}
	case 540:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3245
		{
		}
	case 541:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3248
		{
			unimplemented()
		}
	case 542:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3249
		{
			unimplemented()
		}
	case 544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3273
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: castShort}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3277
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3280
		{
			unimplemented()
		}
	case 547:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3281
		{
			unimplemented()
		}
	case 548:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3290
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3294
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3298
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3302
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3306
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3310
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3314
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3318
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3322
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3326
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3330
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3334
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3338
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3342
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3346
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3350
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3354
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3358
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3362
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3366
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3370
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3374
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3378
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3382
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3386
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3390
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3394
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3398
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3402
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3406
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3410
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3414
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3418
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3422
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3426
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3430
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3434
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3438
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3441
		{
			unimplemented()
		}
	case 587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3443
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3447
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3451
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3455
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3459
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3463
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3467
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3471
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3475
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3479
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3483
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3487
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3491
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3495
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3499
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3503
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3520
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: castShort}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3524
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3528
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3532
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3536
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3540
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3544
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3548
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3552
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3556
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3560
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3564
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3568
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3572
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3576
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3580
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3584
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3588
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3592
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3596
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3600
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3604
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3608
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3612
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3616
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3620
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3624
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3628
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3640
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 634:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3645
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3649
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3655
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3659
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3663
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3669
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 642:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3673
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 643:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3677
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3685
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3689
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3692
		{
			unimplemented()
		}
	case 647:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3693
		{
			unimplemented()
		}
	case 648:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3695
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Type: All, Exprs: sqlDollar[4].union.exprs()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3699
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Type: Distinct, Exprs: sqlDollar[4].union.exprs()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3703
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Exprs: Exprs{StarExpr()}}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3716
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 652:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3722
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 653:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3731
		{
			unimplemented()
		}
	case 654:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3732
		{
			unimplemented()
		}
	case 655:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3736
		{
			unimplemented()
		}
	case 656:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3738
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3742
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3746
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3750
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3753
		{
			unimplemented()
		}
	case 661:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3754
		{
			unimplemented()
		}
	case 662:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3755
		{
			unimplemented()
		}
	case 663:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3756
		{
			unimplemented()
		}
	case 664:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3758
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: castExplicit}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3762
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3766
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3770
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3774
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3778
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3782
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3785
		{
			unimplemented()
		}
	case 672:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3787
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3791
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3795
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3799
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3803
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3807
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3811
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3815
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3819
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3823
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3829
		{
			unimplemented()
		}
	case 683:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3830
		{
		}
	case 684:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3833
		{
			unimplemented()
		}
	case 685:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3834
		{
		}
	case 686:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3839
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 687:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3843
		{
			sqlVAL.union.val = Window(nil)
		}
	case 688:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3849
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3853
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 690:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3859
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 691:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3867
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 692:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3871
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3875
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 694:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3882
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3901
		{
			sqlVAL.str = ""
		}
	case 697:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3907
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 698:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3911
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 699:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3921
		{
			unimplemented()
		}
	case 700:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3922
		{
			unimplemented()
		}
	case 701:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3923
		{
		}
	case 702:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3926
		{
			unimplemented()
		}
	case 703:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3927
		{
			unimplemented()
		}
	case 704:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3933
		{
			unimplemented()
		}
	case 705:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3934
		{
			unimplemented()
		}
	case 706:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3935
		{
			unimplemented()
		}
	case 707:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3936
		{
			unimplemented()
		}
	case 708:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3937
		{
			unimplemented()
		}
	case 709:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3948
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3952
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3956
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3962
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3966
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3972
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4015
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4019
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 717:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4025
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4029
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 719:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4035
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4039
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4043
		{
			sqlVAL.union.val = &Array{nil}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4049
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4053
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 724:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4059
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4063
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 733:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4085
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4089
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4093
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 736:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4099
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 737:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4106
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4110
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 739:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4127
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4131
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4135
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4139
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4143
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 744:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4147
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 745:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4153
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 746:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4159
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 747:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4165
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 748:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4169
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 749:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4173
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 750:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4179
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4183
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4194
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4201
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4205
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 755:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4211
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4217
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 757:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4221
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 759:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4228
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 760:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4234
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 761:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4238
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 762:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4242
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4246
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr()}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4252
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 765:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4258
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4264
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4268
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 768:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4273
		{
		}
	case 769:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4274
		{
		}
	case 771:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4283
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4289
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4293
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 774:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4302
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 775:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4308
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4312
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 777:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4318
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4327
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4331
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4335
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 781:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4343
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4347
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 783:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4353
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4357
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 785:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4363
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4367
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 787:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4378
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4382
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 789:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4388
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4399
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4403
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4407
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4411
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4417
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4421
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 796:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4427
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 797:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4430
		{
		}
	case 798:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4440
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 799:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4444
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 800:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4451
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 801:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4455
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 802:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4459
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4463
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 804:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4466
		{
			unimplemented()
		}
	case 805:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4468
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrefix}
		}
	case 806:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4472
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrefix}
		}
	case 807:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4476
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[5].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrefixParens}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4480
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 809:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4484
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 810:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4488
		{
			sqlVAL.union.val = DNull
		}
	case 812:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4495
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 813:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4499
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 818:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4521
		{
			sqlVAL.str = ""
		}
	case 819:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4527
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 820:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4531
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
