// Code generated by go yacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"go/constant"
	"go/token"

	"github.com/pkg/errors"

	"github.com/cockroachdb/cockroach/sql/privilege"
	"github.com/cockroachdb/cockroach/util"
)

var errUnimplemented = errors.New("unimplemented")

func unimplemented() {
	panic(errUnimplemented)
}

func unimplementedWithIssue(issue int) {
	panic(util.UnimplementedWithIssueErrorf(issue, ""))
}

//line sql.y:44

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in two forms, depending on the
// type of the value being accessed. Values and pointers are directly
// type asserted from the empty interface, meaning that they will panic
// if the type assertion is incorrect. Interfaces are handled differently
// because a nil instance of an interface inserted into the empty interface
// becomes a nil instance of the empty interface and therefore will fail a
// direct type assertion. Instead, a guarded type assertion must be used,
// which returns nil if the type assertion fails.
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	return u.val.(*StrVal)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	if namePart, ok := u.val.(NamePart); ok {
		return namePart
	}
	return nil
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionName() FunctionName {
	return u.val.(FunctionName)
}
func (u *sqlSymUnion) normalizableFunctionName() NormalizableFunctionName {
	return NormalizableFunctionName{u.val.(FunctionName)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	if selectStmt, ok := u.val.(*Select); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	if selectStmt, ok := u.val.(SelectStatement); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	if constraintDef, ok := u.val.(ConstraintTableDef); ok {
		return constraintDef
	}
	return nil
}
func (u *sqlSymUnion) tblDef() TableDef {
	if tblDef, ok := u.val.(TableDef); ok {
		return tblDef
	}
	return nil
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	if colQual, ok := u.val.(NamedColumnQualification); ok {
		return colQual
	}
	return NamedColumnQualification{}
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	if colQual, ok := u.val.(ColumnQualification); ok {
		return colQual
	}
	return nil
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retExprs() ReturningExprs {
	return ReturningExprs(u.val.(SelectExprs))
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	if tblExpr, ok := u.val.(TableExpr); ok {
		return tblExpr
	}
	return nil
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	if joinCond, ok := u.val.(JoinCond); ok {
		return joinCond
	}
	return nil
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	if alterTableCmd, ok := u.val.(AlterTableCmd); ok {
		return alterTableCmd
	}
	return nil
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}

//line sql.y:315
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BEGIN = 57376
const BETWEEN = 57377
const BIGINT = 57378
const BIGSERIAL = 57379
const BIT = 57380
const BLOB = 57381
const BOOL = 57382
const BOOLEAN = 57383
const BOTH = 57384
const BY = 57385
const BYTEA = 57386
const BYTES = 57387
const CASCADE = 57388
const CASE = 57389
const CAST = 57390
const CHAR = 57391
const CHARACTER = 57392
const CHARACTERISTICS = 57393
const CHECK = 57394
const COALESCE = 57395
const COLLATE = 57396
const COLLATION = 57397
const COLUMN = 57398
const COLUMNS = 57399
const COMMIT = 57400
const COMMITTED = 57401
const CONCAT = 57402
const CONFLICT = 57403
const CONSTRAINT = 57404
const CONSTRAINTS = 57405
const COPY = 57406
const COVERING = 57407
const CREATE = 57408
const CROSS = 57409
const CUBE = 57410
const CURRENT = 57411
const CURRENT_CATALOG = 57412
const CURRENT_DATE = 57413
const CURRENT_ROLE = 57414
const CURRENT_TIME = 57415
const CURRENT_TIMESTAMP = 57416
const CURRENT_USER = 57417
const CYCLE = 57418
const DATA = 57419
const DATABASE = 57420
const DATABASES = 57421
const DATE = 57422
const DAY = 57423
const DEC = 57424
const DECIMAL = 57425
const DEFAULT = 57426
const DEALLOCATE = 57427
const DEFERRABLE = 57428
const DELETE = 57429
const DESC = 57430
const DISTINCT = 57431
const DO = 57432
const DOUBLE = 57433
const DROP = 57434
const ELSE = 57435
const ENCODING = 57436
const END = 57437
const ESCAPE = 57438
const EXCEPT = 57439
const EXISTS = 57440
const EXECUTE = 57441
const EXPLAIN = 57442
const EXTRACT = 57443
const FALSE = 57444
const FAMILY = 57445
const FETCH = 57446
const FILTER = 57447
const FIRST = 57448
const FLOAT = 57449
const FLOORDIV = 57450
const FOLLOWING = 57451
const FOR = 57452
const FORCE_INDEX = 57453
const FOREIGN = 57454
const FROM = 57455
const FULL = 57456
const GRANT = 57457
const GRANTS = 57458
const GREATEST = 57459
const GROUP = 57460
const GROUPING = 57461
const HAVING = 57462
const HIGH = 57463
const HOUR = 57464
const IF = 57465
const IFNULL = 57466
const ILIKE = 57467
const IN = 57468
const INTERLEAVE = 57469
const INDEX = 57470
const INDEXES = 57471
const INITIALLY = 57472
const INNER = 57473
const INSERT = 57474
const INT = 57475
const INT8 = 57476
const INT64 = 57477
const INTEGER = 57478
const INTERSECT = 57479
const INTERVAL = 57480
const INTO = 57481
const IS = 57482
const ISOLATION = 57483
const JOIN = 57484
const KEY = 57485
const KEYS = 57486
const LATERAL = 57487
const LEADING = 57488
const LEAST = 57489
const LEFT = 57490
const LEVEL = 57491
const LIKE = 57492
const LIMIT = 57493
const LOCAL = 57494
const LOCALTIME = 57495
const LOCALTIMESTAMP = 57496
const LOW = 57497
const LSHIFT = 57498
const MATCH = 57499
const MINUTE = 57500
const MONTH = 57501
const NAME = 57502
const NAMES = 57503
const NATURAL = 57504
const NEXT = 57505
const NO = 57506
const NO_INDEX_JOIN = 57507
const NORMAL = 57508
const NOT = 57509
const NOTHING = 57510
const NULL = 57511
const NULLIF = 57512
const NULLS = 57513
const NUMERIC = 57514
const OF = 57515
const OFF = 57516
const OFFSET = 57517
const ON = 57518
const ONLY = 57519
const OR = 57520
const ORDER = 57521
const ORDINALITY = 57522
const OUT = 57523
const OUTER = 57524
const OVER = 57525
const OVERLAPS = 57526
const OVERLAY = 57527
const PARENT = 57528
const PARTIAL = 57529
const PARTITION = 57530
const PLACING = 57531
const POSITION = 57532
const PRECEDING = 57533
const PRECISION = 57534
const PREPARE = 57535
const PRIMARY = 57536
const PRIORITY = 57537
const RANGE = 57538
const READ = 57539
const REAL = 57540
const RECURSIVE = 57541
const REF = 57542
const REFERENCES = 57543
const RENAME = 57544
const REPEATABLE = 57545
const RELEASE = 57546
const RESTRICT = 57547
const RETURNING = 57548
const REVOKE = 57549
const RIGHT = 57550
const ROLLBACK = 57551
const ROLLUP = 57552
const ROW = 57553
const ROWS = 57554
const RSHIFT = 57555
const SAVEPOINT = 57556
const SEARCH = 57557
const SECOND = 57558
const SELECT = 57559
const SERIAL = 57560
const SERIALIZABLE = 57561
const SESSION = 57562
const SESSION_USER = 57563
const SET = 57564
const SHOW = 57565
const SIMILAR = 57566
const SIMPLE = 57567
const SMALLINT = 57568
const SMALLSERIAL = 57569
const SNAPSHOT = 57570
const SOME = 57571
const SPLIT = 57572
const SQL = 57573
const START = 57574
const STDIN = 57575
const STRICT = 57576
const STRING = 57577
const STORING = 57578
const SUBSTRING = 57579
const SYMMETRIC = 57580
const SYSTEM = 57581
const TABLE = 57582
const TABLES = 57583
const TEXT = 57584
const THEN = 57585
const TIME = 57586
const TIMESTAMP = 57587
const TIMESTAMPTZ = 57588
const TO = 57589
const TRAILING = 57590
const TRANSACTION = 57591
const TREAT = 57592
const TRIM = 57593
const TRUE = 57594
const TRUNCATE = 57595
const TYPE = 57596
const UNBOUNDED = 57597
const UNCOMMITTED = 57598
const UNION = 57599
const UNIQUE = 57600
const UNKNOWN = 57601
const UPDATE = 57602
const UPSERT = 57603
const USER = 57604
const USING = 57605
const VALID = 57606
const VALIDATE = 57607
const VALUE = 57608
const VALUES = 57609
const VARCHAR = 57610
const VARIADIC = 57611
const VIEW = 57612
const VARYING = 57613
const WHEN = 57614
const WHERE = 57615
const WINDOW = 57616
const WITH = 57617
const WITHIN = 57618
const WITHOUT = 57619
const YEAR = 57620
const ZONE = 57621
const NOT_LA = 57622
const WITH_LA = 57623
const AS_LA = 57624
const POSTFIXOP = 57625
const UMINUS = 57626

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPLAIN",
	"EXTRACT",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HOUR",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:4805

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 26,
	303, 26,
	-2, 368,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 43,
	1, 343,
	176, 343,
	206, 343,
	301, 343,
	303, 343,
	-2, 353,
	-1, 56,
	1, 346,
	176, 346,
	206, 346,
	301, 346,
	303, 346,
	-2, 352,
	-1, 65,
	1, 26,
	303, 26,
	-2, 368,
	-1, 282,
	1, 168,
	303, 168,
	-2, 866,
	-1, 316,
	151, 378,
	175, 378,
	-2, 349,
	-1, 319,
	151, 377,
	175, 377,
	-2, 347,
	-1, 450,
	151, 377,
	175, 377,
	-2, 350,
	-1, 506,
	300, 805,
	-2, 798,
	-1, 507,
	300, 806,
	-2, 799,
	-1, 513,
	5, 513,
	300, 513,
	-2, 956,
	-1, 536,
	5, 479,
	-2, 931,
	-1, 537,
	5, 507,
	300, 507,
	-2, 933,
	-1, 538,
	5, 487,
	-2, 934,
	-1, 539,
	5, 486,
	-2, 935,
	-1, 540,
	5, 507,
	300, 507,
	-2, 938,
	-1, 541,
	5, 507,
	300, 507,
	-2, 939,
	-1, 542,
	5, 508,
	-2, 942,
	-1, 543,
	5, 473,
	-2, 943,
	-1, 544,
	5, 473,
	-2, 944,
	-1, 545,
	5, 489,
	-2, 947,
	-1, 546,
	5, 474,
	-2, 952,
	-1, 547,
	5, 475,
	-2, 953,
	-1, 548,
	5, 476,
	-2, 954,
	-1, 549,
	5, 477,
	-2, 955,
	-1, 550,
	5, 473,
	-2, 959,
	-1, 551,
	5, 480,
	-2, 964,
	-1, 552,
	5, 478,
	-2, 967,
	-1, 553,
	5, 505,
	300, 505,
	-2, 969,
	-1, 554,
	5, 509,
	-2, 972,
	-1, 555,
	5, 511,
	-2, 973,
	-1, 556,
	5, 504,
	300, 504,
	-2, 977,
	-1, 884,
	97, 353,
	137, 353,
	151, 353,
	175, 353,
	179, 353,
	257, 353,
	-2, 625,
	-1, 892,
	300, 783,
	-2, 772,
	-1, 1089,
	13, 0,
	14, 0,
	15, 0,
	283, 0,
	284, 0,
	285, 0,
	-2, 548,
	-1, 1090,
	13, 0,
	14, 0,
	15, 0,
	283, 0,
	284, 0,
	285, 0,
	-2, 549,
	-1, 1091,
	13, 0,
	14, 0,
	15, 0,
	283, 0,
	284, 0,
	285, 0,
	-2, 550,
	-1, 1095,
	13, 0,
	14, 0,
	15, 0,
	283, 0,
	284, 0,
	285, 0,
	-2, 554,
	-1, 1096,
	13, 0,
	14, 0,
	15, 0,
	283, 0,
	284, 0,
	285, 0,
	-2, 555,
	-1, 1097,
	13, 0,
	14, 0,
	15, 0,
	283, 0,
	284, 0,
	285, 0,
	-2, 556,
	-1, 1100,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	280, 0,
	-2, 561,
	-1, 1106,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	280, 0,
	-2, 563,
	-1, 1109,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	280, 0,
	-2, 568,
	-1, 1110,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	280, 0,
	-2, 569,
	-1, 1111,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	280, 0,
	-2, 570,
	-1, 1136,
	184, 696,
	-2, 699,
	-1, 1304,
	97, 353,
	137, 353,
	151, 353,
	175, 353,
	179, 353,
	257, 353,
	-2, 426,
	-1, 1308,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	280, 0,
	-2, 562,
	-1, 1309,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	280, 0,
	-2, 564,
	-1, 1314,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	280, 0,
	-2, 565,
	-1, 1332,
	184, 695,
	-2, 698,
	-1, 1494,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	280, 0,
	-2, 566,
	-1, 1499,
	140, 0,
	-2, 580,
	-1, 1507,
	184, 697,
	-2, 700,
	-1, 1541,
	13, 0,
	14, 0,
	15, 0,
	283, 0,
	284, 0,
	285, 0,
	-2, 606,
	-1, 1542,
	13, 0,
	14, 0,
	15, 0,
	283, 0,
	284, 0,
	285, 0,
	-2, 607,
	-1, 1543,
	13, 0,
	14, 0,
	15, 0,
	283, 0,
	284, 0,
	285, 0,
	-2, 608,
	-1, 1547,
	13, 0,
	14, 0,
	15, 0,
	283, 0,
	284, 0,
	285, 0,
	-2, 612,
	-1, 1548,
	13, 0,
	14, 0,
	15, 0,
	283, 0,
	284, 0,
	285, 0,
	-2, 613,
	-1, 1549,
	13, 0,
	14, 0,
	15, 0,
	283, 0,
	284, 0,
	285, 0,
	-2, 614,
	-1, 1653,
	140, 0,
	-2, 581,
	-1, 1656,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	280, 0,
	-2, 584,
	-1, 1657,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	280, 0,
	-2, 586,
	-1, 1743,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	280, 0,
	-2, 585,
	-1, 1744,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	280, 0,
	-2, 587,
	-1, 1751,
	140, 0,
	-2, 615,
	-1, 1796,
	140, 0,
	-2, 616,
	-1, 1848,
	35, 0,
	125, 0,
	150, 0,
	224, 0,
	280, 0,
	-2, 930,
}

const sqlNprod = 1072
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 24111

var sqlAct = [...]int{

	507, 1847, 1828, 1461, 969, 1870, 1696, 1802, 1829, 1846,
	1830, 977, 811, 1185, 1061, 1518, 1719, 1731, 320, 473,
	835, 505, 1645, 1619, 480, 354, 283, 700, 72, 1578,
	504, 497, 1639, 813, 73, 592, 42, 72, 72, 72,
	1070, 1618, 72, 887, 1473, 72, 1042, 1388, 1039, 1632,
	1232, 341, 69, 72, 1335, 1387, 1483, 1291, 557, 816,
	72, 72, 469, 1300, 72, 1041, 1301, 72, 72, 72,
	1008, 1069, 687, 572, 889, 978, 569, 947, 1285, 1146,
	1182, 1119, 831, 938, 1073, 327, 55, 1122, 339, 1001,
	764, 346, 349, 25, 437, 325, 748, 992, 588, 14,
	574, 1071, 479, 470, 1034, 7, 355, 356, 745, 368,
	438, 923, 319, 919, 353, 373, 369, 971, 9, 775,
	1045, 55, 8, 18, 6, 4, 242, 837, 330, 249,
	452, 453, 270, 454, 366, 248, 280, 766, 762, 56,
	261, 250, 680, 744, 57, 362, 1738, 328, 1005, 1739,
	689, 55, 970, 1862, 251, 457, 1065, 324, 246, 244,
	245, 247, 1299, 1844, 324, 338, 1718, 689, 344, 1836,
	1826, 1821, 1065, 998, 1065, 1798, 1792, 347, 998, 1065,
	1011, 1782, 1289, 1243, 1718, 308, 584, 1772, 1745, 1006,
	1065, 998, 1244, 252, 1742, 317, 1728, 1065, 1726, 1718,
	316, 1065, 1717, 839, 1288, 1718, 840, 841, 332, 1701,
	689, 1700, 1065, 1678, 1065, 1658, 1011, 1655, 1011, 1605,
	998, 1604, 1011, 61, 1011, 1007, 1004, 1590, 1503, 843,
	1065, 1011, 1447, 1330, 1441, 966, 54, 966, 1331, 72,
	72, 72, 72, 1786, 376, 1405, 63, 838, 1406, 1403,
	842, 1402, 1011, 1288, 1011, 1401, 857, 72, 1011, 1721,
	499, 1332, 34, 339, 1011, 349, 1329, 1554, 371, 1506,
	35, 1011, 72, 64, 1277, 72, 72, 1065, 377, 1269,
	325, 59, 1334, 1009, 936, 701, 1271, 60, 1066, 1011,
	1020, 1065, 1010, 1011, 997, 1011, 965, 998, 935, 966,
	1065, 934, 378, 559, 848, 1013, 58, 1130, 72, 690,
	72, 695, 72, 72, 696, 72, 357, 1060, 1028, 464,
	358, 465, 1610, 804, 803, 756, 690, 755, 402, 337,
	72, 61, 357, 65, 339, 451, 358, 358, 444, 446,
	363, 72, 974, 436, 789, 1003, 1358, 1359, 422, 1376,
	1377, 1378, 858, 72, 63, 558, 1358, 1359, 1845, 595,
	72, 72, 72, 374, 72, 566, 1842, 1002, 1273, 690,
	1835, 450, 410, 1793, 1727, 1683, 1679, 589, 1671, 590,
	1468, 64, 1670, 1243, 339, 681, 681, 61, 411, 564,
	1669, 351, 1664, 596, 838, 72, 1373, 563, 1663, 1662,
	1616, 1569, 72, 1564, 72, 809, 1373, 1563, 693, 859,
	63, 443, 742, 1562, 58, 376, 376, 597, 1509, 339,
	840, 841, 754, 595, 72, 688, 72, 72, 72, 72,
	72, 72, 72, 1492, 1472, 1451, 72, 64, 1410, 1407,
	441, 72, 692, 843, 1364, 59, 1609, 812, 72, 377,
	377, 60, 1395, 1386, 1364, 1358, 1359, 596, 790, 1357,
	1354, 363, 1352, 1340, 842, 252, 72, 317, 807, 72,
	58, 895, 316, 378, 378, 61, 826, 466, 460, 461,
	1339, 597, 1270, 853, 850, 851, 852, 844, 845, 846,
	847, 849, 1374, 869, 1199, 1153, 697, 886, 63, 1152,
	464, 1127, 1374, 357, 682, 679, 1520, 358, 54, 463,
	1812, 1785, 1764, 1762, 1753, 806, 1735, 1724, 848, 1715,
	325, 1693, 1676, 1648, 1626, 64, 1498, 1491, 1469, 512,
	840, 841, 1466, 59, 34, 1464, 892, 1421, 1449, 60,
	1211, 1420, 35, 751, 1358, 1359, 1385, 752, 1348, 1375,
	1347, 1326, 1322, 1364, 779, 786, 1124, 1258, 973, 1375,
	791, 1224, 1223, 795, 796, 797, 798, 799, 72, 794,
	1211, 1210, 802, 805, 842, 1192, 72, 1151, 352, 1064,
	72, 924, 819, 927, 72, 72, 821, 820, 840, 841,
	1128, 931, 933, 917, 833, 916, 915, 317, 1168, 914,
	317, 317, 827, 913, 339, 828, 829, 912, 349, 911,
	910, 843, 1358, 1359, 909, 908, 907, 906, 905, 1370,
	1371, 1372, 941, 1369, 1366, 1367, 1368, 1360, 1361, 1362,
	1363, 1365, 842, 1369, 1366, 1367, 1368, 1360, 1361, 1362,
	1363, 1365, 1364, 904, 903, 902, 439, 893, 891, 58,
	1467, 342, 468, 408, 921, 922, 925, 707, 398, 61,
	952, 954, 928, 396, 1615, 1614, 890, 1252, 1251, 580,
	565, 840, 841, 416, 1740, 808, 1613, 1245, 785, 1055,
	1409, 957, 63, 1408, 72, 1307, 72, 72, 432, 72,
	743, 932, 72, 961, 72, 72, 944, 376, 417, 900,
	730, 844, 845, 846, 847, 849, 273, 869, 981, 64,
	1364, 929, 1633, 349, 970, 930, 349, 59, 314, 1521,
	987, 371, 1343, 60, 1147, 920, 575, 1239, 576, 235,
	262, 377, 565, 1808, 1858, 1859, 1360, 1361, 1362, 1363,
	1365, 1598, 243, 948, 307, 1019, 306, 72, 72, 1265,
	301, 267, 729, 302, 1771, 378, 263, 1117, 1374, 940,
	1358, 1359, 323, 1709, 1708, 1432, 896, 1733, 1015, 1435,
	1115, 1413, 1412, 1310, 236, 561, 1257, 940, 435, 264,
	1256, 55, 1255, 939, 1254, 55, 1107, 560, 1012, 249,
	595, 963, 960, 995, 72, 248, 266, 577, 985, 994,
	976, 250, 322, 951, 972, 996, 972, 414, 72, 72,
	440, 988, 990, 72, 251, 1375, 374, 869, 246, 244,
	245, 247, 989, 993, 596, 1033, 986, 1362, 1363, 1365,
	1448, 1196, 339, 1052, 1195, 1113, 925, 1112, 928, 1078,
	72, 1118, 1067, 72, 324, 415, 1770, 394, 597, 310,
	1636, 1022, 922, 921, 1121, 1014, 1016, 1017, 1364, 1121,
	1436, 1698, 1009, 1228, 339, 575, 1021, 576, 586, 1077,
	1423, 1810, 575, 683, 576, 869, 1233, 595, 1832, 1226,
	311, 265, 1058, 1059, 1867, 950, 1439, 582, 1241, 1369,
	1366, 1367, 1368, 1360, 1361, 1362, 1363, 1365, 315, 1037,
	1005, 1147, 238, 237, 1131, 1135, 1374, 1138, 1858, 1038,
	312, 596, 1125, 590, 1036, 581, 1823, 1456, 590, 585,
	1114, 413, 321, 1177, 268, 1765, 706, 1116, 1169, 1189,
	1190, 1191, 1824, 1049, 239, 597, 577, 1198, 72, 72,
	72, 1006, 1068, 577, 72, 68, 1264, 72, 1266, 949,
	1430, 1833, 412, 72, 72, 72, 72, 72, 869, 1878,
	918, 72, 1202, 1375, 72, 1134, 433, 72, 937, 1237,
	578, 840, 841, 1873, 72, 1009, 72, 1007, 1004, 1749,
	1716, 405, 407, 72, 240, 1143, 1126, 1024, 1866, 1834,
	1206, 1230, 72, 1026, 843, 67, 883, 1346, 589, 1233,
	1424, 1550, 1484, 324, 689, 509, 413, 589, 1831, 1027,
	325, 1200, 1857, 72, 72, 842, 339, 1855, 1025, 72,
	434, 1631, 1235, 1158, 471, 471, 1453, 840, 841, 376,
	1053, 1221, 1699, 570, 455, 1009, 425, 1201, 1366, 1367,
	1368, 1360, 1361, 1362, 1363, 1365, 1222, 72, 591, 72,
	843, 72, 403, 573, 72, 1477, 401, 72, 456, 1247,
	1312, 1248, 1454, 377, 456, 1120, 72, 1674, 1703, 848,
	1865, 842, 1238, 72, 1702, 72, 1319, 1275, 1278, 1551,
	1272, 1246, 1274, 1358, 1359, 1552, 1884, 378, 1691, 1317,
	1759, 1871, 1586, 1249, 1452, 1415, 241, 1003, 1205, 339,
	1161, 707, 707, 761, 1054, 1597, 1594, 66, 818, 578,
	1261, 325, 1596, 810, 1263, 1306, 578, 1260, 1879, 1267,
	1009, 1803, 1268, 1262, 1587, 848, 1075, 1076, 455, 1646,
	801, 1692, 1872, 757, 1213, 1358, 1359, 759, 1325, 1169,
	1169, 1162, 1327, 1282, 730, 730, 823, 825, 760, 1874,
	55, 1675, 1212, 832, 1337, 1338, 1315, 1333, 995, 1305,
	1320, 325, 1283, 690, 994, 878, 879, 880, 881, 882,
	996, 1883, 732, 858, 885, 1276, 1642, 1163, 1160, 1479,
	1478, 1364, 412, 1647, 731, 1294, 1311, 1384, 993, 1593,
	1169, 1169, 1169, 1313, 898, 1595, 729, 729, 1397, 361,
	360, 322, 1297, 447, 1462, 1617, 707, 1582, 1689, 1583,
	325, 1474, 72, 1482, 1286, 1150, 1752, 1673, 1827, 1295,
	1389, 1497, 1353, 1321, 1229, 1342, 1018, 964, 1690, 1374,
	859, 1208, 1419, 1364, 1585, 1164, 431, 1433, 1434, 1316,
	430, 1588, 429, 428, 72, 72, 1318, 1443, 427, 730,
	259, 426, 423, 359, 846, 847, 849, 1390, 869, 707,
	1392, 1393, 1394, 901, 793, 1149, 1800, 1575, 981, 339,
	72, 1428, 72, 1426, 72, 1414, 1279, 1411, 1056, 1296,
	72, 1374, 1050, 991, 1250, 694, 1375, 1417, 691, 72,
	1427, 686, 1429, 72, 262, 583, 1438, 1159, 1584, 72,
	595, 729, 730, 72, 1442, 72, 1431, 1465, 844, 845,
	846, 847, 849, 339, 869, 267, 1445, 339, 579, 1444,
	263, 1515, 1446, 1221, 817, 1710, 1455, 1457, 1458, 1476,
	1859, 1169, 1169, 1480, 596, 1488, 781, 1463, 1375, 3,
	1504, 1471, 458, 264, 1062, 335, 419, 72, 1712, 956,
	1500, 1481, 1485, 1486, 729, 1511, 1512, 1513, 597, 1440,
	266, 1721, 1487, 1368, 1360, 1361, 1362, 1363, 1365, 1767,
	706, 706, 940, 940, 1795, 1104, 1290, 1475, 955, 953,
	1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
	1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1555,
	1169, 1063, 703, 1522, 462, 343, 1508, 258, 300, 459,
	1565, 1527, 336, 72, 72, 72, 1360, 1361, 1362, 1363,
	1365, 72, 72, 1294, 959, 420, 958, 72, 1787, 72,
	1051, 72, 72, 72, 975, 1557, 72, 834, 753, 699,
	1297, 1591, 1592, 1000, 1558, 265, 1881, 1882, 269, 1358,
	1359, 1292, 840, 841, 1570, 1601, 1571, 1295, 303, 304,
	1459, 1574, 1030, 1029, 1450, 1102, 1105, 72, 72, 1404,
	1253, 1293, 1197, 1194, 1193, 706, 1144, 1031, 1788, 72,
	72, 1660, 1514, 72, 1280, 1641, 1624, 1627, 268, 1635,
	1101, 1624, 72, 72, 1612, 1623, 1625, 1032, 894, 309,
	1623, 1625, 1607, 339, 339, 1697, 260, 339, 792, 424,
	1822, 1630, 1649, 1666, 1345, 1730, 1628, 1296, 1748, 1637,
	1638, 72, 1148, 1643, 899, 33, 1654, 1621, 706, 471,
	485, 1576, 1416, 1044, 1043, 1079, 1080, 1081, 1082, 1083,
	1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093,
	1094, 1095, 1096, 1097, 1098, 1099, 1100, 598, 1106, 1650,
	1108, 1109, 1110, 1111, 1103, 1611, 782, 771, 508, 765,
	774, 1157, 1640, 562, 510, 1672, 72, 704, 72, 511,
	72, 72, 705, 707, 926, 498, 702, 372, 1287, 72,
	979, 1145, 1629, 1341, 897, 1154, 1155, 484, 1166, 490,
	1176, 1178, 1183, 1186, 1187, 1188, 1687, 1169, 489, 1132,
	72, 707, 707, 1695, 395, 481, 732, 732, 1644, 707,
	707, 1684, 1685, 1298, 45, 570, 730, 409, 731, 731,
	1711, 278, 72, 279, 72, 1236, 1524, 1525, 1722, 1608,
	1057, 822, 1425, 72, 1529, 1530, 313, 1355, 1624, 72,
	397, 1175, 707, 1167, 730, 730, 1729, 1623, 1625, 1231,
	1165, 1234, 730, 730, 1720, 1713, 1156, 339, 1725, 1741,
	442, 1734, 1706, 1707, 568, 980, 421, 1561, 729, 1242,
	1747, 999, 467, 1737, 830, 334, 333, 1040, 418, 758,
	72, 1023, 305, 1169, 1761, 730, 1877, 1766, 1422, 1807,
	1763, 62, 1259, 24, 1754, 22, 729, 729, 21, 72,
	72, 20, 19, 72, 729, 729, 1757, 72, 1323, 1324,
	17, 732, 72, 1758, 1775, 16, 15, 23, 13, 12,
	11, 1783, 10, 731, 1777, 1784, 72, 1779, 1781, 32,
	1624, 595, 1776, 31, 30, 29, 590, 729, 1778, 1623,
	1625, 832, 325, 28, 5, 2, 1789, 1, 0, 707,
	0, 1790, 0, 72, 0, 72, 72, 1794, 72, 1381,
	1382, 1383, 1169, 0, 732, 596, 1791, 1811, 0, 1813,
	0, 1797, 0, 0, 0, 1805, 731, 72, 1817, 1816,
	1806, 0, 1308, 1309, 1809, 0, 0, 1814, 1314, 597,
	1815, 0, 730, 1820, 1819, 0, 0, 1624, 0, 1825,
	0, 72, 0, 72, 0, 0, 1623, 1625, 0, 1837,
	1843, 1328, 1839, 0, 0, 0, 0, 1818, 72, 1841,
	1336, 0, 0, 1840, 1852, 981, 0, 0, 1344, 1856,
	1854, 0, 1349, 0, 1861, 1860, 703, 703, 0, 0,
	1864, 1863, 706, 1290, 729, 0, 0, 0, 0, 707,
	0, 0, 0, 1876, 885, 1875, 0, 1880, 0, 0,
	1183, 1183, 1183, 0, 0, 0, 0, 0, 0, 0,
	706, 706, 0, 1885, 1705, 0, 0, 0, 706, 706,
	0, 840, 841, 0, 0, 0, 0, 0, 0, 0,
	1294, 1418, 730, 0, 0, 0, 0, 0, 0, 0,
	1495, 1496, 0, 0, 843, 0, 0, 1297, 0, 0,
	0, 706, 784, 783, 471, 777, 772, 0, 1292, 0,
	0, 0, 471, 0, 1295, 842, 570, 707, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1293, 0,
	0, 703, 0, 0, 729, 0, 0, 0, 0, 1531,
	1532, 1533, 1534, 1535, 1536, 1537, 1538, 1539, 1540, 1541,
	1542, 1543, 1544, 1545, 1546, 1547, 1548, 1549, 0, 1553,
	730, 0, 0, 0, 0, 492, 0, 0, 0, 848,
	0, 0, 0, 0, 1296, 840, 841, 0, 1493, 0,
	0, 1494, 787, 0, 703, 0, 0, 486, 43, 0,
	0, 0, 1499, 70, 707, 0, 0, 0, 843, 0,
	0, 0, 253, 254, 255, 1259, 0, 272, 706, 0,
	284, 0, 729, 0, 1516, 0, 0, 858, 272, 842,
	0, 0, 0, 43, 1526, 331, 331, 1528, 0, 70,
	0, 0, 70, 70, 350, 0, 736, 730, 0, 0,
	0, 0, 0, 318, 0, 1586, 326, 1579, 0, 0,
	788, 0, 0, 43, 0, 1577, 0, 0, 0, 1581,
	1559, 1560, 0, 0, 0, 0, 0, 0, 0, 1566,
	1567, 1568, 0, 848, 859, 0, 0, 1587, 732, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 729,
	731, 0, 0, 0, 0, 0, 1580, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 732, 732, 706, 0,
	471, 0, 0, 0, 732, 732, 0, 0, 731, 731,
	0, 858, 0, 0, 0, 0, 731, 731, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1634, 0, 732, 853, 850,
	851, 852, 844, 845, 846, 847, 849, 0, 869, 731,
	1582, 0, 1583, 0, 0, 0, 1694, 0, 1653, 0,
	0, 0, 1656, 1657, 0, 0, 0, 1659, 859, 0,
	0, 1661, 0, 0, 0, 0, 706, 1585, 1665, 778,
	773, 0, 1668, 0, 1588, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 70, 364, 70, 284, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 399, 0, 0, 1677, 0, 0, 0, 0,
	0, 326, 0, 0, 0, 0, 0, 404, 0, 0,
	284, 284, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1584, 1751, 0, 732, 852, 844, 845, 846, 847,
	849, 0, 869, 706, 0, 0, 731, 1704, 0, 0,
	0, 0, 0, 272, 0, 70, 0, 284, 284, 0,
	448, 0, 0, 0, 840, 841, 0, 860, 861, 862,
	870, 871, 872, 1723, 0, 331, 0, 0, 0, 0,
	863, 0, 0, 0, 0, 0, 70, 843, 703, 874,
	0, 0, 1736, 0, 0, 318, 0, 0, 70, 0,
	0, 0, 1743, 1744, 0, 70, 70, 70, 842, 684,
	0, 1796, 0, 0, 857, 0, 703, 703, 0, 0,
	0, 0, 0, 0, 703, 703, 0, 0, 0, 0,
	0, 1756, 0, 0, 732, 0, 0, 0, 0, 0,
	70, 0, 0, 0, 1760, 0, 731, 749, 0, 749,
	0, 0, 0, 0, 0, 0, 0, 703, 0, 0,
	0, 0, 848, 0, 0, 0, 570, 0, 0, 284,
	0, 749, 284, 284, 284, 284, 284, 800, 285, 867,
	875, 284, 0, 0, 0, 0, 272, 0, 0, 0,
	0, 0, 0, 815, 873, 0, 298, 0, 0, 0,
	0, 0, 0, 0, 865, 0, 0, 0, 0, 0,
	858, 331, 732, 0, 836, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 731, 318, 0, 0, 318, 318,
	0, 287, 864, 0, 0, 0, 292, 293, 0, 0,
	299, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 884, 286, 288, 0, 888, 0, 0, 0, 1838,
	0, 0, 0, 0, 703, 0, 0, 859, 0, 0,
	0, 0, 0, 0, 1851, 1851, 0, 0, 868, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 732,
	289, 0, 0, 0, 0, 0, 0, 0, 0, 1851,
	0, 731, 290, 291, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 70, 0, 0, 0, 26, 294, 0,
	0, 945, 0, 0, 0, 70, 0, 0, 47, 70,
	962, 0, 1851, 0, 866, 0, 0, 854, 855, 856,
	0, 853, 850, 851, 852, 844, 845, 846, 847, 849,
	0, 869, 49, 967, 0, 0, 0, 0, 27, 0,
	54, 0, 968, 0, 703, 0, 0, 840, 841, 0,
	860, 861, 862, 870, 871, 872, 0, 0, 0, 38,
	0, 0, 0, 863, 0, 0, 34, 0, 0, 50,
	843, 0, 874, 37, 35, 0, 0, 1358, 1359, 0,
	1376, 1377, 1378, 0, 0, 0, 0, 0, 0, 39,
	0, 842, 0, 1652, 0, 295, 0, 857, 296, 0,
	0, 0, 0, 297, 0, 0, 0, 0, 0, 70,
	0, 983, 984, 0, 70, 0, 0, 70, 0, 284,
	284, 0, 703, 0, 0, 0, 0, 1373, 43, 0,
	43, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 43, 0, 848, 0, 43, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 867, 875, 0, 0, 0, 36, 0, 0,
	0, 0, 749, 836, 0, 1364, 0, 873, 52, 0,
	0, 40, 0, 51, 0, 0, 0, 865, 41, 0,
	0, 61, 0, 858, 0, 0, 44, 46, 0, 703,
	0, 0, 0, 0, 0, 0, 48, 1379, 0, 0,
	0, 0, 0, 0, 63, 864, 0, 0, 0, 1035,
	0, 0, 0, 1374, 0, 0, 0, 53, 0, 0,
	0, 0, 0, 70, 945, 0, 0, 0, 836, 0,
	0, 64, 0, 0, 0, 0, 0, 0, 0, 59,
	859, 0, 0, 0, 0, 60, 0, 43, 0, 0,
	0, 868, 0, 0, 0, 70, 0, 0, 284, 0,
	0, 0, 0, 0, 58, 0, 0, 0, 0, 0,
	1375, 0, 0, 0, 0, 0, 0, 1072, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 866, 0, 0,
	854, 855, 856, 1123, 853, 850, 851, 852, 844, 845,
	846, 847, 849, 0, 869, 0, 0, 0, 0, 0,
	0, 1680, 0, 0, 0, 0, 0, 0, 0, 0,
	1370, 1371, 1372, 0, 1369, 1366, 1367, 1368, 1360, 1361,
	1362, 1363, 1365, 70, 1203, 1204, 0, 0, 0, 945,
	0, 0, 1209, 0, 0, 0, 0, 0, 1214, 1215,
	1217, 1219, 1220, 0, 0, 0, 1225, 0, 0, 1227,
	0, 0, 70, 0, 0, 0, 0, 0, 0, 70,
	0, 1240, 0, 0, 0, 0, 0, 0, 70, 0,
	0, 0, 0, 0, 0, 0, 0, 70, 0, 0,
	0, 326, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1035, 749,
	0, 0, 0, 0, 1035, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 815, 0, 815, 0, 284, 0, 0, 70,
	840, 841, 1281, 860, 861, 862, 870, 871, 872, 0,
	0, 1284, 0, 0, 0, 0, 863, 0, 1303, 43,
	70, 0, 0, 843, 0, 874, 0, 0, 0, 0,
	0, 0, 43, 840, 841, 0, 860, 861, 862, 870,
	871, 872, 1304, 0, 842, 0, 0, 0, 0, 863,
	857, 0, 0, 0, 0, 0, 843, 0, 874, 0,
	0, 0, 840, 841, 0, 860, 861, 862, 870, 871,
	872, 0, 0, 1123, 0, 0, 0, 842, 863, 0,
	0, 0, 0, 857, 0, 843, 0, 874, 0, 0,
	0, 0, 884, 0, 0, 0, 0, 0, 848, 0,
	0, 0, 0, 0, 0, 0, 842, 0, 0, 0,
	0, 0, 857, 0, 0, 867, 875, 0, 0, 0,
	0, 0, 1358, 1359, 0, 1376, 1377, 1378, 0, 0,
	873, 848, 0, 0, 0, 0, 0, 0, 1651, 0,
	865, 884, 0, 0, 0, 0, 858, 0, 867, 875,
	0, 0, 0, 0, 0, 0, 0, 836, 0, 0,
	848, 0, 0, 873, 0, 0, 0, 0, 864, 0,
	0, 0, 1373, 865, 0, 0, 0, 867, 875, 858,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 70,
	70, 0, 873, 0, 0, 0, 0, 0, 0, 0,
	0, 864, 865, 859, 0, 0, 0, 0, 858, 0,
	0, 0, 1072, 0, 868, 1460, 0, 945, 0, 815,
	1364, 0, 0, 840, 841, 1470, 0, 0, 0, 0,
	864, 0, 0, 0, 70, 0, 859, 0, 70, 0,
	0, 0, 0, 0, 1303, 0, 843, 868, 1490, 0,
	1303, 0, 1379, 0, 0, 0, 1072, 0, 0, 0,
	1072, 0, 0, 0, 0, 859, 0, 842, 1374, 0,
	866, 0, 0, 854, 855, 856, 868, 853, 850, 851,
	852, 844, 845, 846, 847, 849, 0, 869, 0, 0,
	0, 0, 1519, 0, 1400, 0, 0, 0, 0, 0,
	0, 0, 0, 866, 0, 0, 854, 855, 856, 0,
	853, 850, 851, 852, 844, 845, 846, 847, 849, 0,
	869, 848, 0, 0, 0, 1375, 0, 1399, 0, 0,
	0, 0, 866, 0, 0, 854, 855, 856, 0, 853,
	850, 851, 852, 844, 845, 846, 847, 849, 0, 869,
	0, 0, 0, 0, 0, 0, 1398, 0, 1572, 1573,
	945, 0, 0, 0, 0, 0, 836, 836, 0, 858,
	0, 0, 1599, 0, 1600, 0, 70, 1602, 1603, 0,
	0, 1606, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1370, 1371, 1372, 0, 1369,
	1366, 1367, 1368, 1360, 1361, 1362, 1363, 1365, 0, 43,
	1620, 0, 836, 945, 0, 1620, 0, 1358, 1359, 0,
	1376, 1377, 1378, 0, 70, 70, 859, 0, 70, 0,
	0, 0, 0, 1502, 0, 0, 43, 836, 1303, 0,
	0, 0, 0, 0, 0, 0, 1072, 1072, 0, 0,
	1072, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1667, 1373, 840, 841,
	0, 860, 861, 862, 870, 871, 872, 0, 0, 0,
	0, 0, 0, 0, 863, 0, 0, 0, 0, 0,
	0, 843, 0, 874, 0, 0, 0, 0, 0, 0,
	0, 850, 851, 852, 844, 845, 846, 847, 849, 0,
	869, 0, 842, 0, 0, 1364, 0, 0, 857, 0,
	0, 945, 0, 1686, 0, 284, 1688, 0, 0, 0,
	0, 0, 0, 0, 70, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1379, 0, 0,
	0, 0, 0, 0, 0, 836, 0, 0, 0, 0,
	0, 0, 0, 1374, 0, 0, 848, 0, 0, 0,
	0, 0, 1620, 0, 0, 0, 0, 70, 0, 1732,
	0, 1714, 0, 867, 875, 0, 0, 0, 70, 0,
	0, 0, 0, 0, 836, 0, 0, 0, 873, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 865, 0,
	1072, 0, 0, 0, 858, 0, 0, 0, 0, 0,
	1375, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 815, 864, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1768, 1769, 0, 0, 1773, 0,
	0, 0, 1774, 0, 1620, 0, 0, 284, 0, 0,
	0, 859, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 836, 868, 884, 0, 0, 0, 0, 0, 0,
	1370, 1371, 1372, 0, 1369, 1366, 1367, 1368, 1360, 1361,
	1362, 1363, 1365, 0, 0, 0, 0, 0, 1804, 0,
	836, 70, 0, 284, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1620, 1732, 0, 0, 0, 0, 0, 866, 0,
	0, 854, 855, 856, 0, 853, 850, 851, 852, 844,
	845, 846, 847, 849, 0, 869, 70, 0, 836, 594,
	0, 0, 1351, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1853, 0, 74, 75, 599, 76, 600,
	601, 602, 603, 186, 604, 605, 606, 607, 77, 78,
	187, 188, 189, 190, 79, 191, 192, 608, 80, 193,
	194, 81, 609, 610, 195, 196, 197, 611, 198, 612,
	380, 613, 82, 83, 84, 0, 85, 614, 86, 87,
	88, 615, 381, 89, 90, 616, 617, 618, 619, 620,
	621, 91, 92, 93, 94, 199, 95, 200, 201, 622,
	96, 623, 97, 624, 625, 626, 98, 99, 627, 100,
	628, 0, 629, 202, 101, 102, 203, 630, 631, 632,
	103, 104, 204, 0, 105, 633, 106, 634, 635, 382,
	636, 107, 205, 637, 206, 638, 108, 109, 207, 208,
	384, 639, 112, 640, 110, 641, 383, 111, 209, 210,
	211, 212, 642, 213, 643, 385, 113, 386, 114, 115,
	644, 645, 214, 387, 116, 388, 646, 117, 647, 648,
	118, 0, 119, 120, 121, 122, 123, 389, 124, 125,
	128, 126, 649, 127, 650, 215, 129, 216, 130, 131,
	651, 652, 653, 654, 655, 132, 217, 390, 133, 391,
	218, 134, 135, 136, 656, 219, 137, 220, 138, 657,
	139, 140, 141, 221, 142, 143, 658, 145, 146, 144,
	147, 659, 148, 392, 149, 150, 222, 151, 0, 152,
	153, 154, 660, 223, 155, 156, 661, 157, 158, 393,
	159, 224, 225, 160, 662, 166, 161, 162, 163, 165,
	226, 164, 227, 663, 167, 664, 168, 169, 665, 228,
	229, 230, 666, 667, 170, 231, 232, 668, 171, 172,
	173, 174, 669, 670, 175, 176, 177, 671, 672, 178,
	179, 180, 233, 234, 673, 674, 181, 675, 676, 677,
	678, 182, 183, 184, 185, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 594, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1489, 74, 75, 599, 76, 600, 601, 602, 603,
	186, 604, 605, 606, 607, 77, 78, 187, 188, 189,
	190, 79, 191, 192, 608, 80, 193, 194, 81, 609,
	610, 195, 196, 197, 611, 198, 612, 380, 613, 82,
	83, 84, 0, 85, 614, 86, 87, 88, 615, 381,
	89, 90, 616, 617, 618, 619, 620, 621, 91, 92,
	93, 94, 199, 95, 200, 201, 622, 96, 623, 97,
	624, 625, 626, 98, 99, 627, 100, 628, 0, 629,
	202, 101, 102, 203, 630, 631, 632, 103, 104, 204,
	0, 105, 633, 106, 634, 635, 382, 636, 107, 205,
	637, 206, 638, 108, 109, 207, 208, 384, 639, 112,
	640, 110, 641, 383, 111, 209, 210, 211, 212, 642,
	213, 643, 385, 113, 386, 114, 115, 644, 645, 214,
	387, 116, 388, 646, 117, 647, 648, 118, 0, 119,
	120, 121, 122, 123, 389, 124, 125, 128, 126, 649,
	127, 650, 215, 129, 216, 130, 131, 651, 652, 653,
	654, 655, 132, 217, 390, 133, 391, 218, 134, 135,
	136, 656, 219, 137, 220, 138, 657, 139, 140, 141,
	221, 142, 143, 658, 145, 146, 144, 147, 659, 148,
	392, 149, 150, 222, 151, 0, 152, 153, 154, 660,
	223, 155, 156, 661, 157, 158, 393, 159, 224, 225,
	160, 662, 166, 161, 162, 163, 165, 226, 164, 227,
	663, 167, 664, 168, 169, 665, 228, 229, 230, 666,
	667, 170, 231, 232, 668, 171, 172, 173, 174, 669,
	670, 175, 176, 177, 671, 672, 178, 179, 180, 233,
	234, 673, 674, 181, 675, 676, 677, 678, 182, 183,
	184, 185, 594, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 593, 0, 0, 74, 75,
	599, 76, 600, 601, 602, 603, 186, 604, 605, 606,
	607, 77, 78, 187, 188, 189, 190, 79, 191, 192,
	608, 80, 193, 194, 81, 609, 610, 195, 196, 197,
	611, 198, 612, 380, 613, 82, 83, 84, 0, 85,
	614, 86, 87, 88, 615, 381, 89, 90, 616, 617,
	618, 619, 620, 621, 91, 92, 93, 94, 199, 95,
	200, 201, 622, 96, 623, 97, 624, 625, 626, 98,
	99, 627, 100, 628, 0, 629, 202, 101, 102, 203,
	630, 631, 632, 103, 104, 204, 0, 105, 633, 106,
	634, 635, 382, 636, 107, 205, 637, 206, 638, 108,
	109, 207, 208, 384, 639, 112, 640, 110, 641, 383,
	111, 209, 210, 211, 212, 642, 213, 643, 385, 113,
	386, 114, 115, 644, 645, 214, 387, 116, 388, 646,
	117, 647, 648, 118, 0, 119, 120, 121, 122, 123,
	389, 124, 125, 128, 126, 649, 127, 650, 215, 129,
	216, 130, 131, 651, 652, 653, 654, 655, 132, 217,
	390, 133, 391, 218, 134, 135, 136, 656, 219, 137,
	220, 138, 657, 139, 140, 141, 221, 142, 143, 658,
	145, 146, 144, 147, 659, 148, 392, 149, 150, 222,
	151, 0, 152, 153, 154, 660, 223, 155, 156, 661,
	157, 158, 393, 159, 224, 225, 160, 662, 166, 161,
	162, 163, 165, 226, 164, 227, 663, 167, 664, 168,
	169, 665, 228, 229, 230, 666, 667, 170, 231, 232,
	668, 171, 172, 173, 174, 669, 670, 175, 176, 177,
	671, 672, 178, 179, 180, 233, 234, 673, 674, 181,
	675, 676, 677, 678, 182, 183, 184, 185, 506, 495,
	496, 493, 494, 482, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 74, 75, 1140, 76, 0, 0,
	0, 0, 522, 488, 0, 0, 0, 77, 78, 187,
	536, 189, 537, 79, 538, 539, 0, 80, 193, 194,
	81, 503, 521, 540, 541, 197, 0, 532, 0, 514,
	0, 82, 83, 84, 0, 85, 0, 86, 87, 88,
	0, 381, 89, 90, 0, 515, 517, 0, 516, 518,
	91, 92, 93, 94, 542, 95, 543, 544, 0, 96,
	0, 97, 0, 1141, 0, 535, 99, 0, 100, 0,
	0, 0, 487, 101, 102, 523, 501, 0, 0, 103,
	104, 545, 0, 105, 0, 106, 0, 0, 382, 0,
	107, 533, 0, 206, 0, 108, 109, 529, 531, 384,
	0, 112, 0, 110, 0, 383, 111, 546, 547, 548,
	549, 0, 513, 0, 385, 113, 386, 114, 115, 0,
	0, 534, 387, 116, 388, 0, 117, 0, 0, 118,
	0, 119, 120, 121, 122, 123, 389, 124, 125, 128,
	126, 477, 127, 502, 530, 129, 550, 130, 131, 0,
	0, 0, 0, 0, 132, 217, 390, 133, 391, 524,
	134, 135, 136, 0, 525, 137, 220, 138, 0, 139,
	140, 141, 551, 142, 143, 0, 145, 146, 144, 147,
	0, 148, 392, 149, 150, 491, 151, 0, 152, 153,
	154, 0, 223, 155, 156, 519, 157, 158, 393, 159,
	552, 225, 160, 0, 166, 161, 162, 163, 165, 553,
	164, 526, 0, 167, 0, 168, 169, 0, 228, 554,
	555, 0, 0, 170, 527, 528, 500, 171, 172, 173,
	174, 0, 0, 175, 176, 177, 520, 0, 178, 179,
	180, 233, 556, 1139, 0, 181, 0, 0, 0, 0,
	182, 183, 184, 185, 478, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 474, 475, 1142, 0, 0,
	0, 476, 0, 0, 483, 1137, 506, 495, 496, 493,
	494, 482, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 74, 75, 0, 76, 0, 0, 0, 0,
	522, 488, 0, 0, 0, 77, 78, 187, 536, 189,
	537, 79, 538, 539, 0, 80, 193, 194, 81, 503,
	521, 540, 541, 197, 0, 532, 0, 514, 0, 82,
	83, 84, 0, 85, 0, 86, 87, 88, 0, 381,
	89, 90, 0, 515, 517, 0, 516, 518, 91, 92,
	93, 94, 542, 95, 543, 544, 571, 96, 0, 97,
	0, 0, 0, 535, 99, 0, 100, 0, 0, 0,
	487, 101, 102, 523, 501, 0, 0, 103, 104, 545,
	0, 105, 0, 106, 0, 0, 382, 0, 107, 533,
	0, 206, 0, 108, 109, 529, 531, 384, 0, 112,
	0, 110, 0, 383, 111, 546, 547, 548, 549, 0,
	513, 0, 385, 113, 386, 114, 115, 0, 0, 534,
	387, 116, 388, 0, 117, 0, 0, 118, 0, 119,
	120, 121, 122, 123, 389, 124, 125, 128, 126, 477,
	127, 502, 530, 129, 550, 130, 131, 0, 0, 0,
	0, 0, 132, 217, 390, 133, 391, 524, 134, 135,
	136, 0, 525, 137, 220, 138, 0, 139, 140, 141,
	551, 142, 143, 0, 145, 146, 144, 147, 0, 148,
	392, 149, 150, 491, 151, 0, 152, 153, 154, 61,
	223, 155, 156, 519, 157, 158, 393, 159, 552, 225,
	160, 0, 166, 161, 162, 163, 165, 553, 164, 526,
	0, 167, 63, 168, 169, 0, 228, 554, 555, 0,
	0, 170, 527, 528, 500, 171, 172, 173, 174, 0,
	0, 175, 176, 177, 520, 0, 178, 179, 180, 379,
	556, 0, 0, 181, 0, 0, 0, 59, 182, 183,
	184, 185, 478, 60, 506, 495, 496, 493, 494, 482,
	0, 0, 0, 474, 475, 0, 0, 0, 0, 476,
	74, 75, 483, 76, 0, 0, 0, 0, 522, 488,
	0, 0, 0, 77, 78, 187, 536, 189, 537, 79,
	538, 539, 0, 80, 193, 194, 81, 503, 521, 540,
	541, 197, 0, 532, 0, 514, 0, 82, 83, 84,
	0, 85, 0, 86, 87, 88, 0, 381, 89, 90,
	0, 515, 517, 0, 516, 518, 91, 92, 93, 94,
	542, 95, 543, 544, 0, 96, 0, 97, 0, 0,
	0, 535, 99, 0, 100, 0, 0, 0, 487, 101,
	102, 523, 501, 0, 0, 103, 104, 545, 0, 105,
	0, 106, 0, 0, 382, 0, 107, 533, 0, 206,
	0, 108, 109, 529, 531, 384, 0, 112, 0, 110,
	0, 383, 111, 546, 547, 548, 549, 0, 513, 0,
	385, 113, 386, 114, 115, 0, 0, 534, 387, 116,
	388, 0, 117, 0, 0, 118, 0, 119, 120, 121,
	122, 123, 389, 124, 125, 128, 126, 477, 127, 502,
	530, 129, 550, 130, 131, 0, 0, 0, 0, 0,
	132, 217, 390, 133, 391, 524, 134, 135, 136, 0,
	525, 137, 220, 138, 0, 139, 140, 141, 551, 142,
	143, 0, 145, 146, 144, 147, 0, 148, 392, 149,
	150, 491, 151, 0, 152, 153, 154, 61, 223, 155,
	156, 519, 157, 158, 393, 159, 552, 225, 160, 0,
	166, 161, 162, 163, 165, 553, 164, 526, 0, 167,
	63, 168, 169, 0, 228, 554, 555, 0, 0, 170,
	527, 528, 500, 171, 172, 173, 174, 0, 0, 175,
	176, 177, 520, 0, 178, 179, 180, 379, 556, 0,
	0, 181, 0, 0, 0, 59, 182, 183, 184, 185,
	478, 60, 506, 495, 496, 493, 494, 482, 0, 0,
	0, 474, 475, 0, 0, 0, 0, 476, 74, 75,
	483, 76, 0, 0, 0, 0, 522, 488, 0, 0,
	0, 77, 78, 187, 536, 189, 537, 79, 538, 539,
	1179, 80, 193, 194, 81, 503, 521, 540, 541, 197,
	0, 532, 0, 514, 0, 82, 83, 84, 0, 85,
	0, 86, 87, 88, 0, 381, 89, 90, 0, 515,
	517, 0, 516, 518, 91, 92, 93, 94, 542, 95,
	543, 544, 0, 96, 0, 97, 0, 0, 0, 535,
	99, 0, 100, 0, 0, 0, 487, 101, 102, 523,
	501, 0, 0, 103, 104, 545, 0, 105, 0, 106,
	0, 1184, 382, 0, 107, 533, 0, 206, 0, 108,
	109, 529, 531, 384, 0, 112, 0, 110, 0, 383,
	111, 546, 547, 548, 549, 0, 513, 0, 385, 113,
	386, 114, 115, 0, 1180, 534, 387, 116, 388, 0,
	117, 0, 0, 118, 0, 119, 120, 121, 122, 123,
	389, 124, 125, 128, 126, 477, 127, 502, 530, 129,
	550, 130, 131, 0, 0, 0, 0, 0, 132, 217,
	390, 133, 391, 524, 134, 135, 136, 0, 525, 137,
	220, 138, 0, 139, 140, 141, 551, 142, 143, 0,
	145, 146, 144, 147, 0, 148, 392, 149, 150, 491,
	151, 0, 152, 153, 154, 0, 223, 155, 156, 519,
	157, 158, 393, 159, 552, 225, 160, 0, 166, 161,
	162, 163, 165, 553, 164, 526, 0, 167, 0, 168,
	169, 0, 228, 554, 555, 0, 1181, 170, 527, 528,
	500, 171, 172, 173, 174, 0, 0, 175, 176, 177,
	520, 0, 178, 179, 180, 233, 556, 0, 0, 181,
	0, 0, 0, 0, 182, 183, 184, 185, 478, 0,
	506, 495, 496, 493, 494, 482, 0, 0, 0, 474,
	475, 0, 0, 0, 0, 476, 74, 75, 483, 76,
	0, 0, 0, 0, 522, 488, 0, 0, 0, 77,
	78, 187, 536, 189, 537, 79, 538, 539, 0, 80,
	193, 194, 81, 503, 521, 540, 541, 197, 0, 532,
	0, 514, 0, 82, 83, 84, 0, 85, 0, 86,
	87, 88, 0, 381, 89, 90, 0, 515, 517, 0,
	516, 518, 91, 92, 93, 94, 542, 95, 543, 544,
	0, 96, 0, 97, 0, 0, 0, 535, 99, 0,
	100, 0, 0, 0, 487, 101, 102, 523, 501, 0,
	0, 103, 104, 545, 0, 105, 0, 106, 0, 0,
	382, 0, 107, 533, 0, 206, 0, 108, 109, 529,
	531, 384, 0, 112, 0, 110, 0, 383, 111, 546,
	547, 548, 549, 0, 513, 0, 385, 113, 386, 114,
	115, 0, 0, 534, 387, 116, 388, 0, 117, 0,
	0, 118, 0, 119, 120, 121, 122, 123, 389, 124,
	125, 128, 126, 477, 127, 502, 530, 129, 550, 130,
	131, 0, 0, 0, 0, 0, 132, 217, 390, 133,
	391, 524, 134, 135, 136, 0, 525, 137, 220, 138,
	0, 139, 140, 141, 551, 142, 143, 0, 145, 146,
	144, 147, 0, 148, 392, 149, 150, 491, 151, 0,
	152, 153, 154, 0, 223, 155, 156, 519, 157, 158,
	393, 159, 552, 225, 160, 0, 166, 161, 162, 163,
	165, 553, 164, 526, 0, 167, 0, 168, 169, 0,
	228, 554, 555, 0, 0, 170, 527, 528, 500, 171,
	172, 173, 174, 0, 0, 175, 176, 177, 520, 0,
	178, 179, 180, 233, 556, 0, 0, 181, 0, 0,
	0, 0, 182, 183, 184, 185, 478, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 474, 475, 0,
	0, 0, 0, 476, 0, 0, 483, 1556, 506, 495,
	496, 493, 494, 482, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 74, 75, 0, 76, 0, 0,
	0, 0, 522, 488, 0, 0, 0, 77, 78, 187,
	536, 189, 537, 79, 538, 539, 0, 80, 193, 194,
	81, 503, 521, 540, 541, 197, 0, 532, 0, 514,
	0, 82, 83, 84, 0, 85, 0, 86, 87, 88,
	0, 381, 89, 90, 0, 515, 517, 0, 516, 518,
	91, 92, 93, 94, 542, 95, 543, 544, 0, 96,
	0, 97, 0, 0, 0, 535, 99, 0, 100, 0,
	0, 0, 487, 101, 102, 523, 501, 0, 0, 103,
	104, 545, 0, 105, 0, 106, 0, 0, 382, 0,
	107, 533, 0, 206, 0, 108, 109, 529, 531, 384,
	0, 112, 0, 110, 0, 383, 111, 546, 547, 548,
	549, 0, 513, 0, 385, 113, 386, 114, 115, 0,
	0, 534, 387, 116, 388, 0, 117, 0, 0, 118,
	0, 119, 120, 121, 122, 123, 389, 124, 125, 128,
	126, 477, 127, 502, 530, 129, 550, 130, 131, 0,
	0, 0, 0, 0, 132, 217, 390, 133, 391, 524,
	134, 135, 136, 0, 525, 137, 220, 138, 0, 139,
	140, 141, 551, 142, 143, 0, 145, 146, 144, 147,
	0, 148, 392, 149, 150, 491, 151, 0, 152, 153,
	154, 0, 223, 155, 156, 519, 157, 158, 393, 159,
	552, 225, 160, 0, 166, 161, 162, 163, 165, 553,
	164, 526, 0, 167, 0, 168, 169, 0, 228, 554,
	555, 0, 0, 170, 527, 528, 500, 171, 172, 173,
	174, 0, 0, 175, 176, 177, 520, 0, 178, 179,
	180, 233, 556, 0, 0, 181, 0, 0, 0, 0,
	182, 183, 184, 185, 478, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 474, 475, 0, 0, 0,
	0, 476, 0, 0, 483, 1505, 506, 495, 496, 493,
	494, 482, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 74, 75, 0, 76, 0, 0, 0, 0,
	522, 488, 0, 0, 0, 77, 78, 187, 536, 189,
	537, 79, 538, 539, 0, 80, 193, 194, 81, 503,
	521, 540, 541, 197, 0, 532, 0, 514, 0, 82,
	83, 84, 0, 85, 0, 86, 87, 88, 0, 381,
	89, 90, 0, 515, 517, 0, 516, 518, 91, 92,
	93, 94, 542, 95, 543, 544, 0, 96, 0, 97,
	0, 0, 0, 535, 99, 0, 100, 0, 0, 0,
	487, 101, 102, 523, 501, 0, 0, 103, 104, 545,
	0, 105, 0, 106, 0, 0, 382, 0, 107, 533,
	0, 206, 0, 108, 109, 529, 531, 384, 0, 112,
	0, 110, 0, 383, 111, 546, 547, 548, 549, 0,
	513, 0, 385, 113, 386, 114, 115, 0, 0, 534,
	387, 116, 388, 0, 117, 0, 0, 118, 0, 119,
	120, 121, 122, 123, 389, 124, 125, 128, 126, 477,
	127, 502, 530, 129, 550, 130, 131, 0, 0, 0,
	0, 0, 132, 217, 390, 133, 391, 524, 134, 135,
	136, 0, 525, 137, 220, 138, 0, 139, 140, 141,
	551, 142, 143, 0, 145, 146, 144, 147, 0, 148,
	392, 149, 150, 491, 151, 0, 152, 153, 154, 0,
	223, 155, 156, 519, 157, 158, 393, 159, 552, 225,
	160, 0, 166, 161, 162, 163, 165, 553, 164, 526,
	0, 167, 0, 168, 169, 0, 228, 554, 555, 0,
	0, 170, 527, 528, 500, 171, 172, 173, 174, 0,
	0, 175, 176, 177, 520, 0, 178, 179, 180, 233,
	556, 0, 0, 181, 0, 0, 0, 0, 182, 183,
	184, 185, 478, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 474, 475, 0, 0, 0, 0, 476,
	0, 0, 483, 1136, 506, 495, 496, 493, 494, 482,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	74, 75, 0, 76, 0, 0, 0, 0, 522, 488,
	0, 0, 0, 77, 78, 187, 536, 189, 537, 79,
	538, 539, 0, 80, 193, 194, 81, 503, 521, 540,
	541, 197, 0, 532, 0, 514, 0, 82, 83, 84,
	0, 85, 0, 86, 87, 88, 0, 381, 89, 90,
	0, 515, 517, 0, 516, 518, 91, 92, 93, 94,
	542, 95, 543, 544, 0, 96, 0, 97, 0, 0,
	0, 535, 99, 0, 100, 0, 0, 0, 487, 101,
	102, 523, 501, 0, 0, 103, 104, 545, 0, 105,
	0, 106, 0, 0, 382, 0, 107, 533, 0, 206,
	0, 108, 109, 529, 531, 384, 0, 112, 0, 110,
	0, 383, 111, 546, 547, 548, 549, 0, 513, 0,
	385, 113, 386, 114, 115, 0, 0, 534, 387, 116,
	388, 0, 117, 0, 0, 118, 0, 119, 120, 121,
	122, 123, 389, 124, 125, 128, 126, 477, 127, 502,
	530, 129, 550, 130, 131, 0, 0, 0, 0, 0,
	132, 217, 390, 133, 391, 524, 134, 135, 136, 0,
	525, 137, 220, 138, 0, 139, 140, 141, 551, 142,
	143, 0, 145, 146, 144, 147, 0, 148, 392, 149,
	150, 491, 151, 0, 152, 153, 154, 0, 223, 155,
	156, 519, 157, 158, 393, 159, 552, 225, 160, 0,
	166, 161, 162, 163, 165, 553, 164, 526, 0, 167,
	0, 168, 169, 0, 228, 554, 555, 0, 0, 170,
	527, 528, 500, 171, 172, 173, 174, 0, 0, 175,
	176, 177, 520, 0, 178, 179, 180, 233, 556, 0,
	0, 181, 0, 0, 0, 0, 182, 183, 184, 185,
	478, 0, 0, 0, 0, 506, 495, 496, 493, 494,
	482, 474, 475, 0, 0, 0, 0, 476, 890, 1133,
	483, 74, 75, 0, 76, 0, 0, 0, 0, 522,
	488, 0, 0, 0, 77, 78, 187, 536, 189, 537,
	79, 538, 539, 0, 80, 193, 194, 81, 503, 521,
	540, 541, 197, 0, 532, 0, 514, 0, 82, 83,
	84, 0, 85, 0, 86, 87, 88, 0, 381, 89,
	90, 0, 515, 517, 0, 516, 518, 91, 92, 93,
	94, 542, 95, 543, 544, 0, 96, 0, 97, 0,
	0, 0, 535, 99, 0, 100, 0, 0, 0, 487,
	101, 102, 523, 501, 0, 0, 103, 104, 545, 0,
	105, 0, 106, 0, 0, 382, 0, 107, 533, 0,
	206, 0, 108, 109, 529, 531, 384, 0, 112, 0,
	110, 0, 383, 111, 546, 547, 548, 549, 0, 513,
	0, 385, 113, 386, 114, 115, 0, 0, 534, 387,
	116, 388, 0, 117, 0, 0, 118, 0, 119, 120,
	121, 122, 123, 389, 124, 125, 128, 126, 477, 127,
	502, 530, 129, 550, 130, 131, 0, 0, 0, 0,
	0, 132, 217, 390, 133, 391, 524, 134, 135, 136,
	0, 525, 137, 220, 138, 0, 139, 140, 141, 551,
	142, 143, 0, 145, 146, 144, 147, 0, 148, 392,
	149, 150, 491, 151, 0, 152, 153, 154, 0, 223,
	155, 156, 519, 157, 158, 393, 159, 552, 225, 160,
	0, 166, 161, 162, 163, 165, 553, 164, 526, 0,
	167, 0, 168, 169, 0, 228, 554, 555, 0, 0,
	170, 527, 528, 500, 171, 172, 173, 174, 0, 0,
	175, 176, 177, 520, 0, 178, 179, 180, 233, 556,
	0, 0, 181, 0, 0, 0, 0, 182, 183, 184,
	185, 478, 0, 506, 495, 496, 493, 494, 482, 0,
	0, 0, 474, 475, 472, 0, 0, 0, 476, 74,
	75, 483, 76, 0, 0, 0, 0, 522, 488, 0,
	0, 0, 77, 78, 187, 536, 189, 537, 79, 538,
	539, 0, 80, 193, 194, 81, 503, 521, 540, 541,
	197, 0, 532, 0, 514, 0, 82, 83, 84, 0,
	85, 0, 86, 87, 88, 0, 381, 89, 90, 0,
	515, 517, 0, 516, 518, 91, 92, 93, 94, 542,
	95, 543, 544, 0, 96, 0, 97, 0, 0, 0,
	535, 99, 0, 100, 0, 0, 0, 487, 101, 102,
	523, 501, 0, 0, 103, 104, 545, 0, 105, 0,
	106, 0, 0, 382, 0, 107, 533, 0, 206, 0,
	108, 109, 529, 531, 384, 0, 112, 0, 110, 0,
	383, 111, 546, 547, 548, 549, 0, 513, 0, 385,
	113, 386, 114, 115, 0, 0, 534, 387, 116, 388,
	0, 117, 0, 0, 118, 0, 119, 120, 121, 122,
	123, 389, 124, 125, 128, 126, 477, 127, 502, 530,
	129, 550, 130, 131, 0, 0, 0, 0, 0, 132,
	217, 390, 133, 391, 524, 134, 135, 136, 0, 525,
	137, 220, 138, 0, 139, 140, 141, 551, 142, 143,
	0, 145, 146, 144, 147, 0, 148, 392, 149, 150,
	491, 151, 0, 152, 153, 154, 0, 223, 155, 156,
	519, 157, 158, 393, 159, 552, 225, 160, 0, 166,
	161, 162, 163, 165, 553, 164, 526, 0, 167, 0,
	168, 169, 0, 228, 554, 555, 0, 0, 170, 527,
	528, 500, 171, 172, 173, 174, 0, 0, 175, 176,
	177, 520, 0, 178, 179, 180, 233, 556, 1510, 0,
	181, 0, 0, 0, 0, 182, 183, 184, 185, 478,
	0, 506, 495, 496, 493, 494, 482, 0, 0, 0,
	474, 475, 0, 0, 0, 0, 476, 74, 75, 483,
	76, 0, 0, 0, 0, 522, 488, 0, 0, 0,
	77, 78, 187, 536, 189, 537, 79, 538, 539, 0,
	80, 193, 194, 81, 503, 521, 540, 541, 197, 0,
	532, 0, 514, 0, 82, 83, 84, 0, 85, 0,
	86, 87, 88, 0, 381, 89, 90, 0, 515, 517,
	0, 516, 518, 91, 92, 93, 94, 542, 95, 543,
	544, 571, 96, 0, 97, 0, 0, 0, 535, 99,
	0, 100, 0, 0, 0, 487, 101, 102, 523, 501,
	0, 0, 103, 104, 545, 0, 105, 0, 106, 0,
	0, 382, 0, 107, 533, 0, 206, 0, 108, 109,
	529, 531, 384, 0, 112, 0, 110, 0, 383, 111,
	546, 547, 548, 549, 0, 513, 0, 385, 113, 386,
	114, 115, 0, 0, 534, 387, 116, 388, 0, 117,
	0, 0, 118, 0, 119, 120, 121, 122, 123, 389,
	124, 125, 128, 126, 477, 127, 502, 530, 129, 550,
	130, 131, 0, 0, 0, 0, 0, 132, 217, 390,
	133, 391, 524, 134, 135, 136, 0, 525, 137, 220,
	138, 0, 139, 140, 141, 551, 142, 143, 0, 145,
	146, 144, 147, 0, 148, 392, 149, 150, 491, 151,
	0, 152, 153, 154, 0, 223, 155, 156, 519, 157,
	158, 393, 159, 552, 225, 160, 0, 166, 161, 162,
	163, 165, 553, 164, 526, 0, 167, 0, 168, 169,
	0, 228, 554, 555, 0, 0, 170, 527, 528, 500,
	171, 172, 173, 174, 0, 0, 175, 176, 177, 520,
	0, 178, 179, 180, 233, 556, 0, 0, 181, 0,
	0, 0, 0, 182, 183, 184, 185, 478, 0, 506,
	495, 496, 493, 494, 482, 0, 0, 0, 474, 475,
	0, 0, 0, 0, 476, 74, 75, 483, 76, 0,
	0, 0, 0, 522, 488, 0, 0, 0, 77, 78,
	187, 536, 189, 537, 79, 538, 539, 0, 80, 193,
	194, 81, 503, 521, 540, 541, 197, 0, 532, 0,
	514, 0, 82, 83, 84, 0, 85, 0, 86, 87,
	88, 0, 381, 89, 90, 0, 515, 517, 0, 516,
	518, 91, 92, 93, 94, 542, 95, 543, 544, 0,
	96, 0, 97, 0, 0, 0, 535, 99, 0, 100,
	0, 0, 0, 487, 101, 102, 523, 501, 0, 0,
	103, 104, 545, 0, 105, 0, 106, 0, 1184, 382,
	0, 107, 533, 0, 206, 0, 108, 109, 529, 531,
	384, 0, 112, 0, 110, 0, 383, 111, 546, 547,
	548, 549, 0, 513, 0, 385, 113, 386, 114, 115,
	0, 0, 534, 387, 116, 388, 0, 117, 0, 0,
	118, 0, 119, 120, 121, 122, 123, 389, 124, 125,
	128, 126, 477, 127, 502, 530, 129, 550, 130, 131,
	0, 0, 0, 0, 0, 132, 217, 390, 133, 391,
	524, 134, 135, 136, 0, 525, 137, 220, 138, 0,
	139, 140, 141, 551, 142, 143, 0, 145, 146, 144,
	147, 0, 148, 392, 149, 150, 491, 151, 0, 152,
	153, 154, 0, 223, 155, 156, 519, 157, 158, 393,
	159, 552, 225, 160, 0, 166, 161, 162, 163, 165,
	553, 164, 526, 0, 167, 0, 168, 169, 0, 228,
	554, 555, 0, 0, 170, 527, 528, 500, 171, 172,
	173, 174, 0, 0, 175, 176, 177, 520, 0, 178,
	179, 180, 233, 556, 0, 0, 181, 0, 0, 0,
	0, 182, 183, 184, 185, 478, 0, 0, 0, 0,
	506, 495, 496, 493, 494, 482, 474, 475, 0, 0,
	0, 0, 476, 0, 0, 483, 74, 75, 824, 76,
	0, 0, 0, 0, 522, 488, 0, 0, 0, 77,
	78, 187, 536, 189, 537, 79, 538, 539, 0, 80,
	193, 194, 81, 503, 521, 540, 541, 197, 0, 532,
	0, 514, 0, 82, 83, 84, 0, 85, 0, 86,
	87, 88, 0, 381, 89, 90, 0, 515, 517, 0,
	516, 518, 91, 92, 93, 94, 542, 95, 543, 544,
	0, 96, 0, 97, 0, 0, 0, 535, 99, 0,
	100, 0, 0, 0, 487, 101, 102, 523, 501, 0,
	0, 103, 104, 545, 0, 105, 0, 106, 0, 0,
	382, 0, 107, 533, 0, 206, 0, 108, 109, 529,
	531, 384, 0, 112, 0, 110, 0, 383, 111, 546,
	547, 548, 549, 0, 513, 0, 385, 113, 386, 114,
	115, 0, 0, 534, 387, 116, 388, 0, 117, 0,
	0, 118, 0, 119, 120, 121, 122, 123, 389, 124,
	125, 128, 126, 477, 127, 502, 530, 129, 550, 130,
	131, 0, 0, 0, 0, 0, 132, 217, 390, 133,
	391, 524, 134, 135, 136, 0, 525, 137, 220, 138,
	0, 139, 140, 141, 551, 142, 143, 0, 145, 146,
	144, 147, 0, 148, 392, 149, 150, 491, 151, 0,
	152, 153, 154, 0, 223, 155, 156, 519, 157, 158,
	393, 159, 552, 225, 160, 0, 166, 161, 162, 163,
	165, 553, 164, 526, 0, 167, 0, 168, 169, 0,
	228, 554, 555, 0, 0, 170, 527, 528, 500, 171,
	172, 173, 174, 0, 0, 175, 176, 177, 520, 0,
	178, 179, 180, 233, 556, 0, 0, 181, 0, 0,
	0, 0, 182, 183, 184, 185, 478, 0, 506, 495,
	496, 493, 494, 482, 0, 0, 0, 474, 475, 0,
	0, 0, 0, 476, 74, 75, 483, 76, 0, 0,
	0, 0, 522, 488, 0, 0, 0, 77, 78, 187,
	536, 189, 537, 79, 538, 539, 0, 80, 193, 194,
	81, 503, 521, 540, 541, 197, 0, 532, 0, 514,
	0, 82, 83, 84, 0, 85, 0, 86, 87, 88,
	0, 381, 89, 1850, 0, 515, 517, 0, 516, 518,
	91, 92, 93, 94, 542, 95, 543, 544, 0, 96,
	0, 97, 0, 0, 0, 535, 99, 0, 100, 0,
	0, 0, 487, 101, 102, 523, 501, 0, 0, 103,
	104, 545, 0, 105, 0, 106, 0, 0, 382, 0,
	107, 533, 0, 206, 0, 108, 109, 529, 531, 384,
	0, 112, 0, 110, 0, 383, 111, 546, 547, 548,
	549, 0, 513, 0, 385, 113, 386, 114, 115, 0,
	0, 534, 387, 116, 388, 0, 117, 0, 0, 118,
	0, 119, 120, 121, 122, 123, 389, 124, 125, 128,
	126, 477, 127, 502, 530, 129, 550, 130, 131, 0,
	0, 0, 0, 0, 132, 217, 390, 133, 391, 524,
	134, 135, 136, 0, 525, 137, 220, 138, 0, 139,
	140, 141, 551, 142, 143, 0, 145, 146, 144, 147,
	0, 148, 392, 149, 150, 491, 151, 0, 152, 153,
	154, 0, 223, 155, 156, 519, 157, 158, 393, 159,
	552, 225, 160, 0, 166, 161, 162, 163, 165, 553,
	164, 526, 0, 167, 0, 168, 169, 0, 228, 554,
	555, 0, 0, 170, 527, 528, 500, 171, 172, 1849,
	174, 0, 0, 175, 176, 177, 520, 0, 178, 179,
	180, 233, 556, 0, 0, 181, 0, 0, 0, 0,
	182, 183, 184, 185, 478, 0, 506, 495, 496, 493,
	494, 482, 0, 0, 0, 474, 475, 0, 0, 0,
	0, 476, 74, 75, 483, 76, 0, 0, 0, 0,
	522, 488, 0, 0, 0, 77, 78, 1848, 536, 189,
	537, 79, 538, 539, 0, 80, 193, 194, 81, 503,
	521, 540, 541, 197, 0, 532, 0, 514, 0, 82,
	83, 84, 0, 85, 0, 86, 87, 88, 0, 381,
	89, 1850, 0, 515, 517, 0, 516, 518, 91, 92,
	93, 94, 542, 95, 543, 544, 0, 96, 0, 97,
	0, 0, 0, 535, 99, 0, 100, 0, 0, 0,
	487, 101, 102, 523, 501, 0, 0, 103, 104, 545,
	0, 105, 0, 106, 0, 0, 382, 0, 107, 533,
	0, 206, 0, 108, 109, 529, 531, 384, 0, 112,
	0, 110, 0, 383, 111, 546, 547, 548, 549, 0,
	513, 0, 385, 113, 386, 114, 115, 0, 0, 534,
	387, 116, 388, 0, 117, 0, 0, 118, 0, 119,
	120, 121, 122, 123, 389, 124, 125, 128, 126, 477,
	127, 502, 530, 129, 550, 130, 131, 0, 0, 0,
	0, 0, 132, 217, 390, 133, 391, 524, 134, 135,
	136, 0, 525, 137, 220, 138, 0, 139, 140, 141,
	551, 142, 143, 0, 145, 146, 144, 147, 0, 148,
	392, 149, 150, 491, 151, 0, 152, 153, 154, 0,
	223, 155, 156, 519, 157, 158, 393, 159, 552, 225,
	160, 0, 166, 161, 162, 163, 165, 553, 164, 526,
	0, 167, 0, 168, 169, 0, 228, 554, 555, 0,
	0, 170, 527, 528, 500, 171, 172, 1849, 174, 0,
	0, 175, 176, 177, 520, 0, 178, 179, 180, 233,
	556, 0, 0, 181, 0, 0, 0, 0, 182, 183,
	184, 185, 478, 0, 506, 495, 496, 493, 494, 482,
	0, 0, 0, 474, 475, 0, 0, 0, 0, 476,
	74, 75, 483, 76, 0, 0, 0, 0, 522, 488,
	0, 0, 0, 77, 78, 187, 536, 189, 537, 79,
	538, 539, 0, 80, 193, 194, 81, 503, 521, 540,
	541, 197, 0, 532, 0, 514, 0, 82, 83, 84,
	0, 85, 0, 86, 87, 88, 0, 381, 89, 90,
	0, 515, 517, 0, 516, 518, 91, 92, 93, 94,
	542, 95, 543, 544, 0, 96, 0, 97, 0, 0,
	0, 535, 99, 0, 100, 0, 0, 0, 487, 101,
	102, 523, 501, 0, 0, 103, 104, 545, 0, 105,
	0, 106, 0, 0, 382, 0, 107, 533, 0, 206,
	0, 108, 109, 529, 531, 384, 0, 112, 0, 110,
	0, 383, 111, 546, 547, 548, 549, 0, 513, 0,
	385, 113, 386, 114, 115, 0, 0, 534, 387, 116,
	388, 0, 117, 0, 0, 118, 0, 119, 120, 121,
	122, 123, 389, 124, 125, 128, 126, 477, 127, 502,
	530, 129, 550, 130, 131, 0, 0, 0, 0, 0,
	132, 217, 390, 133, 391, 524, 134, 135, 136, 0,
	525, 137, 220, 138, 0, 139, 140, 141, 551, 142,
	143, 0, 145, 146, 144, 147, 0, 148, 392, 149,
	150, 491, 151, 0, 152, 153, 154, 0, 223, 155,
	156, 519, 157, 158, 393, 159, 552, 225, 160, 0,
	166, 161, 162, 163, 165, 553, 164, 526, 0, 167,
	0, 168, 169, 0, 228, 554, 555, 0, 0, 170,
	527, 528, 500, 171, 172, 173, 174, 0, 0, 175,
	176, 177, 520, 0, 178, 179, 180, 233, 556, 0,
	0, 181, 0, 0, 0, 0, 182, 183, 184, 185,
	478, 0, 506, 495, 496, 493, 494, 482, 0, 0,
	0, 474, 475, 0, 0, 0, 0, 476, 74, 75,
	483, 76, 0, 0, 0, 0, 522, 488, 0, 0,
	0, 77, 78, 187, 536, 189, 537, 79, 538, 539,
	0, 80, 193, 194, 81, 503, 521, 540, 541, 197,
	0, 532, 0, 514, 0, 82, 83, 84, 0, 85,
	0, 86, 87, 88, 0, 381, 89, 90, 0, 515,
	517, 0, 516, 518, 91, 92, 93, 94, 542, 95,
	543, 544, 0, 96, 0, 97, 0, 0, 0, 535,
	99, 0, 100, 0, 0, 0, 487, 101, 102, 523,
	501, 0, 0, 103, 104, 545, 0, 105, 0, 106,
	0, 0, 382, 0, 107, 533, 0, 206, 0, 108,
	109, 529, 531, 384, 0, 112, 0, 110, 0, 383,
	111, 546, 547, 548, 549, 0, 513, 0, 385, 113,
	386, 114, 115, 0, 0, 534, 387, 116, 388, 0,
	117, 0, 0, 118, 0, 119, 120, 121, 122, 123,
	389, 124, 125, 128, 126, 0, 127, 502, 530, 129,
	550, 130, 131, 0, 0, 0, 0, 0, 132, 217,
	390, 133, 391, 524, 134, 135, 136, 0, 525, 137,
	220, 138, 0, 139, 140, 141, 551, 142, 143, 0,
	145, 146, 144, 147, 0, 148, 392, 149, 150, 1174,
	151, 0, 152, 153, 154, 0, 223, 155, 156, 519,
	157, 158, 393, 159, 552, 225, 160, 0, 166, 161,
	162, 163, 165, 553, 164, 526, 0, 167, 0, 168,
	169, 0, 228, 554, 555, 0, 0, 170, 527, 528,
	500, 171, 172, 173, 174, 0, 0, 175, 176, 177,
	520, 0, 178, 179, 180, 233, 556, 0, 0, 181,
	0, 0, 0, 0, 182, 183, 184, 185, 0, 0,
	506, 495, 496, 493, 494, 482, 0, 0, 0, 1170,
	1171, 0, 0, 0, 0, 1172, 74, 75, 1173, 76,
	0, 0, 0, 0, 522, 488, 0, 0, 0, 77,
	78, 0, 536, 189, 537, 79, 538, 539, 0, 80,
	193, 194, 81, 503, 521, 540, 541, 197, 0, 532,
	0, 514, 0, 82, 83, 84, 0, 85, 0, 86,
	87, 88, 0, 381, 89, 1850, 0, 515, 517, 0,
	516, 518, 91, 92, 93, 94, 542, 95, 543, 544,
	0, 96, 0, 97, 0, 0, 0, 535, 99, 0,
	100, 0, 0, 0, 487, 101, 102, 523, 501, 0,
	0, 103, 104, 545, 0, 105, 0, 106, 0, 0,
	382, 0, 107, 533, 0, 206, 0, 108, 109, 529,
	531, 0, 0, 112, 0, 110, 0, 383, 111, 546,
	547, 548, 549, 0, 513, 0, 0, 113, 386, 114,
	115, 0, 0, 534, 387, 116, 0, 0, 117, 0,
	0, 118, 0, 119, 120, 121, 122, 123, 389, 124,
	125, 128, 126, 477, 127, 502, 530, 129, 550, 130,
	131, 0, 0, 0, 0, 0, 132, 217, 390, 133,
	391, 524, 134, 135, 136, 0, 525, 137, 220, 138,
	0, 139, 140, 141, 551, 142, 143, 0, 145, 146,
	144, 147, 0, 148, 392, 149, 150, 491, 151, 0,
	152, 153, 154, 0, 223, 155, 156, 519, 157, 158,
	0, 159, 552, 225, 160, 0, 166, 161, 162, 163,
	165, 553, 164, 526, 0, 167, 0, 168, 169, 0,
	228, 554, 555, 0, 0, 170, 527, 528, 500, 171,
	172, 1849, 174, 0, 0, 175, 176, 177, 520, 0,
	178, 179, 180, 233, 556, 0, 0, 181, 0, 0,
	0, 0, 182, 183, 184, 185, 0, 0, 506, 0,
	0, 0, 0, 0, 0, 0, 0, 474, 475, 0,
	0, 0, 0, 476, 74, 75, 483, 76, 0, 0,
	0, 0, 522, 0, 0, 0, 0, 77, 78, 187,
	188, 189, 190, 79, 191, 192, 0, 80, 193, 194,
	81, 0, 521, 195, 196, 197, 0, 532, 0, 514,
	0, 82, 83, 84, 0, 85, 0, 86, 87, 88,
	0, 381, 89, 90, 0, 515, 517, 0, 516, 518,
	91, 92, 93, 94, 199, 95, 200, 201, 0, 96,
	0, 97, 0, 0, 0, 98, 99, 0, 100, 0,
	0, 0, 202, 101, 102, 523, 0, 0, 0, 103,
	104, 204, 0, 105, 0, 106, 0, 0, 382, 0,
	107, 533, 0, 206, 0, 108, 109, 529, 531, 384,
	0, 112, 0, 110, 0, 383, 111, 209, 210, 211,
	212, 0, 213, 0, 385, 113, 386, 114, 115, 0,
	0, 534, 387, 116, 388, 0, 117, 0, 0, 118,
	0, 119, 120, 121, 122, 123, 389, 124, 125, 128,
	126, 0, 127, 0, 530, 129, 216, 130, 131, 0,
	0, 0, 0, 0, 132, 217, 390, 133, 391, 524,
	134, 135, 136, 0, 525, 137, 220, 138, 0, 139,
	140, 141, 221, 142, 143, 0, 145, 146, 144, 147,
	0, 148, 392, 149, 150, 222, 151, 0, 152, 153,
	154, 0, 223, 155, 156, 519, 157, 158, 393, 159,
	224, 225, 160, 0, 166, 161, 162, 163, 165, 226,
	164, 526, 0, 167, 0, 168, 169, 0, 228, 229,
	230, 0, 0, 170, 527, 528, 0, 171, 172, 173,
	174, 0, 0, 175, 176, 177, 520, 0, 178, 179,
	180, 233, 234, 0, 0, 181, 375, 0, 0, 0,
	182, 183, 184, 185, 0, 0, 0, 0, 0, 0,
	0, 0, 74, 75, 0, 76, 0, 0, 0, 0,
	186, 0, 0, 0, 1622, 77, 78, 187, 188, 189,
	190, 79, 191, 192, 0, 80, 193, 194, 81, 0,
	0, 195, 196, 197, 0, 198, 0, 380, 0, 82,
	83, 84, 0, 85, 0, 86, 87, 88, 0, 381,
	89, 90, 0, 0, 0, 0, 0, 0, 91, 92,
	93, 94, 199, 95, 200, 201, 0, 96, 0, 97,
	0, 0, 0, 98, 99, 0, 100, 0, 0, 0,
	202, 101, 102, 203, 0, 0, 0, 103, 104, 204,
	0, 105, 0, 106, 0, 0, 382, 0, 107, 205,
	0, 206, 0, 108, 109, 207, 208, 384, 0, 112,
	0, 110, 0, 383, 111, 209, 210, 211, 212, 0,
	213, 0, 385, 113, 386, 114, 115, 0, 0, 214,
	387, 116, 388, 0, 117, 0, 0, 118, 0, 119,
	120, 121, 122, 123, 389, 124, 125, 128, 126, 0,
	127, 0, 215, 129, 216, 130, 131, 0, 0, 0,
	0, 0, 132, 217, 390, 133, 391, 218, 134, 135,
	136, 0, 219, 137, 220, 138, 0, 139, 140, 141,
	221, 142, 143, 0, 145, 146, 144, 147, 0, 148,
	392, 149, 150, 222, 151, 0, 152, 153, 154, 61,
	223, 155, 156, 0, 157, 158, 393, 159, 224, 225,
	160, 0, 166, 161, 162, 163, 165, 226, 164, 227,
	0, 167, 63, 168, 169, 0, 228, 229, 230, 0,
	0, 170, 231, 232, 0, 171, 172, 173, 174, 0,
	0, 175, 176, 177, 0, 0, 178, 179, 180, 379,
	234, 0, 0, 181, 0, 0, 0, 59, 182, 183,
	184, 185, 0, 60, 375, 776, 0, 777, 772, 767,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	74, 75, 58, 76, 0, 0, 0, 0, 186, 0,
	0, 0, 0, 77, 78, 187, 188, 189, 190, 79,
	191, 192, 0, 80, 193, 194, 81, 0, 0, 195,
	196, 197, 0, 198, 0, 380, 0, 82, 83, 84,
	0, 85, 0, 86, 87, 88, 0, 381, 89, 90,
	0, 0, 0, 0, 0, 0, 91, 92, 93, 94,
	199, 95, 200, 201, 780, 96, 0, 97, 0, 0,
	0, 98, 99, 0, 100, 0, 0, 0, 202, 101,
	102, 203, 769, 0, 0, 103, 104, 204, 0, 105,
	0, 106, 0, 0, 382, 0, 107, 205, 0, 206,
	0, 108, 109, 207, 208, 384, 0, 112, 0, 110,
	0, 383, 111, 209, 210, 211, 212, 0, 213, 0,
	385, 113, 386, 114, 115, 0, 0, 214, 387, 116,
	388, 0, 117, 0, 0, 118, 0, 119, 120, 121,
	122, 123, 389, 124, 125, 128, 126, 0, 127, 0,
	215, 129, 216, 130, 131, 0, 770, 0, 0, 0,
	132, 217, 390, 133, 391, 218, 134, 135, 136, 0,
	219, 137, 220, 138, 0, 139, 140, 141, 221, 142,
	143, 0, 145, 146, 144, 147, 0, 148, 392, 149,
	150, 222, 151, 0, 152, 153, 154, 0, 223, 155,
	156, 0, 157, 158, 393, 159, 224, 225, 160, 0,
	166, 161, 162, 163, 165, 226, 164, 227, 0, 167,
	0, 168, 169, 0, 228, 229, 230, 0, 0, 170,
	231, 232, 768, 171, 172, 173, 174, 0, 0, 175,
	176, 177, 0, 0, 178, 179, 180, 233, 234, 375,
	776, 181, 777, 772, 767, 0, 182, 183, 184, 185,
	0, 0, 0, 0, 0, 74, 75, 0, 76, 0,
	0, 778, 773, 186, 0, 0, 0, 0, 77, 78,
	187, 188, 189, 190, 79, 191, 192, 0, 80, 193,
	194, 81, 0, 0, 195, 196, 197, 0, 198, 0,
	380, 0, 82, 83, 84, 0, 85, 0, 86, 87,
	88, 0, 381, 89, 90, 0, 0, 0, 0, 0,
	0, 91, 92, 93, 94, 199, 95, 200, 201, 763,
	96, 0, 97, 0, 0, 0, 98, 99, 0, 100,
	0, 0, 0, 202, 101, 102, 203, 769, 0, 0,
	103, 104, 204, 0, 105, 0, 106, 0, 0, 382,
	0, 107, 205, 0, 206, 0, 108, 109, 207, 208,
	384, 0, 112, 0, 110, 0, 383, 111, 209, 210,
	211, 212, 0, 213, 0, 385, 113, 386, 114, 115,
	0, 0, 214, 387, 116, 388, 0, 117, 0, 0,
	118, 0, 119, 120, 121, 122, 123, 389, 124, 125,
	128, 126, 0, 127, 0, 215, 129, 216, 130, 131,
	0, 770, 0, 0, 0, 132, 217, 390, 133, 391,
	218, 134, 135, 136, 0, 219, 137, 220, 138, 0,
	139, 140, 141, 221, 142, 143, 0, 145, 146, 144,
	147, 0, 148, 392, 149, 150, 222, 151, 0, 152,
	153, 154, 0, 223, 155, 156, 0, 157, 158, 393,
	159, 224, 225, 160, 0, 166, 161, 162, 163, 165,
	226, 164, 227, 0, 167, 0, 168, 169, 0, 228,
	229, 230, 0, 0, 170, 231, 232, 768, 171, 172,
	173, 174, 0, 0, 175, 176, 177, 0, 0, 178,
	179, 180, 233, 234, 375, 776, 181, 777, 772, 767,
	0, 182, 183, 184, 185, 0, 0, 0, 0, 0,
	74, 75, 0, 76, 0, 0, 778, 773, 186, 0,
	0, 0, 0, 77, 78, 187, 188, 189, 190, 79,
	191, 192, 0, 80, 193, 194, 81, 0, 0, 195,
	196, 197, 0, 198, 0, 380, 0, 82, 83, 84,
	0, 85, 0, 86, 87, 88, 0, 381, 89, 90,
	0, 0, 0, 0, 0, 0, 91, 92, 93, 94,
	199, 95, 200, 201, 0, 96, 0, 97, 0, 0,
	0, 98, 99, 0, 100, 0, 0, 0, 202, 101,
	102, 203, 769, 0, 0, 103, 104, 204, 0, 105,
	0, 106, 0, 0, 382, 0, 107, 205, 0, 206,
	0, 108, 109, 207, 208, 384, 0, 112, 0, 110,
	0, 383, 111, 209, 210, 211, 212, 0, 213, 0,
	385, 113, 386, 114, 115, 0, 0, 214, 387, 116,
	388, 0, 117, 0, 0, 118, 0, 119, 120, 121,
	122, 123, 389, 124, 125, 128, 126, 0, 127, 0,
	215, 129, 216, 130, 131, 0, 770, 0, 0, 0,
	132, 217, 390, 133, 391, 218, 134, 135, 136, 0,
	219, 137, 220, 138, 0, 139, 140, 141, 221, 142,
	143, 0, 145, 146, 144, 147, 0, 148, 392, 149,
	150, 222, 151, 0, 152, 153, 154, 0, 223, 155,
	156, 0, 157, 158, 393, 159, 224, 225, 160, 0,
	166, 161, 162, 163, 165, 226, 164, 227, 0, 167,
	0, 168, 169, 0, 228, 229, 230, 0, 0, 170,
	231, 232, 768, 171, 172, 173, 174, 0, 0, 175,
	176, 177, 0, 0, 178, 179, 180, 233, 234, 71,
	0, 181, 0, 0, 0, 0, 182, 183, 184, 185,
	0, 0, 0, 0, 0, 74, 75, 0, 76, 0,
	0, 778, 773, 186, 0, 0, 0, 0, 77, 78,
	187, 188, 189, 190, 79, 191, 192, 0, 80, 193,
	194, 81, 0, 0, 195, 196, 197, 0, 198, 0,
	0, 0, 82, 83, 84, 0, 85, 0, 86, 87,
	88, 0, 0, 89, 90, 0, 0, 0, 0, 0,
	0, 91, 92, 93, 94, 199, 95, 200, 201, 0,
	96, 0, 97, 0, 0, 0, 98, 99, 0, 100,
	0, 0, 0, 202, 101, 102, 203, 0, 0, 0,
	103, 104, 204, 0, 105, 0, 106, 0, 0, 0,
	0, 107, 205, 0, 206, 0, 108, 109, 207, 208,
	0, 0, 112, 0, 110, 0, 0, 111, 209, 210,
	211, 212, 0, 213, 0, 0, 113, 0, 114, 115,
	0, 0, 214, 0, 116, 0, 0, 117, 0, 0,
	118, 0, 119, 120, 121, 122, 123, 0, 124, 125,
	128, 126, 0, 127, 0, 215, 129, 216, 130, 131,
	0, 0, 340, 0, 0, 132, 217, 0, 133, 0,
	218, 134, 135, 136, 0, 219, 137, 220, 138, 0,
	139, 140, 141, 221, 142, 143, 0, 145, 146, 144,
	147, 0, 148, 0, 149, 150, 222, 151, 0, 152,
	153, 154, 61, 223, 155, 156, 0, 157, 158, 0,
	159, 224, 225, 160, 0, 166, 161, 162, 163, 165,
	226, 164, 227, 0, 167, 63, 168, 169, 0, 228,
	229, 230, 0, 0, 170, 231, 232, 0, 171, 172,
	173, 174, 0, 0, 175, 176, 177, 0, 0, 178,
	179, 180, 379, 234, 0, 0, 181, 71, 0, 0,
	59, 182, 183, 184, 185, 0, 60, 0, 0, 0,
	0, 0, 0, 74, 75, 0, 76, 0, 0, 0,
	0, 186, 0, 0, 0, 1074, 77, 78, 187, 188,
	189, 190, 79, 191, 192, 0, 80, 193, 194, 81,
	0, 0, 195, 196, 197, 0, 198, 0, 0, 0,
	82, 83, 84, 0, 85, 0, 86, 87, 88, 0,
	0, 89, 90, 0, 0, 0, 0, 0, 0, 91,
	92, 93, 94, 199, 95, 200, 201, 0, 96, 0,
	97, 0, 0, 0, 98, 99, 0, 100, 0, 0,
	0, 202, 101, 102, 203, 0, 0, 0, 103, 104,
	204, 0, 105, 0, 106, 0, 0, 0, 0, 107,
	205, 0, 206, 0, 108, 109, 207, 208, 0, 0,
	112, 0, 110, 0, 0, 111, 209, 210, 211, 212,
	0, 213, 0, 0, 113, 0, 114, 115, 0, 0,
	214, 0, 116, 0, 0, 117, 0, 0, 118, 0,
	119, 120, 121, 122, 123, 0, 124, 125, 128, 126,
	0, 127, 0, 215, 129, 216, 130, 131, 0, 0,
	0, 0, 0, 132, 217, 0, 133, 0, 218, 134,
	135, 136, 0, 219, 137, 220, 138, 0, 139, 140,
	141, 221, 142, 143, 0, 145, 146, 144, 147, 0,
	148, 0, 149, 150, 222, 151, 0, 152, 153, 154,
	61, 223, 155, 156, 0, 157, 158, 0, 159, 224,
	225, 160, 0, 166, 161, 162, 163, 165, 226, 164,
	227, 0, 167, 63, 168, 169, 0, 228, 229, 230,
	0, 0, 170, 231, 232, 0, 171, 172, 173, 174,
	0, 0, 175, 176, 177, 0, 0, 178, 179, 180,
	379, 234, 0, 0, 181, 71, 0, 0, 59, 182,
	183, 184, 185, 0, 60, 0, 0, 0, 0, 0,
	0, 74, 75, 0, 76, 0, 0, 0, 0, 186,
	0, 1302, 0, 58, 77, 78, 187, 188, 189, 190,
	79, 191, 192, 0, 80, 193, 194, 81, 0, 0,
	195, 196, 197, 0, 198, 0, 0, 0, 82, 83,
	84, 0, 85, 0, 86, 87, 88, 0, 0, 89,
	90, 0, 0, 0, 0, 0, 0, 91, 92, 93,
	94, 199, 95, 200, 201, 0, 96, 0, 97, 0,
	0, 0, 98, 99, 0, 100, 0, 0, 0, 202,
	101, 102, 203, 0, 0, 0, 103, 104, 204, 0,
	105, 0, 106, 0, 0, 0, 0, 107, 205, 0,
	206, 0, 108, 109, 207, 208, 0, 0, 112, 0,
	110, 0, 0, 111, 209, 210, 211, 212, 0, 213,
	0, 0, 113, 0, 114, 115, 0, 0, 214, 0,
	116, 0, 0, 117, 0, 0, 118, 0, 119, 120,
	121, 122, 123, 0, 124, 125, 128, 126, 0, 127,
	0, 215, 129, 216, 130, 131, 0, 0, 0, 0,
	0, 132, 217, 0, 133, 0, 218, 134, 135, 136,
	0, 219, 137, 220, 138, 0, 139, 140, 141, 221,
	142, 143, 0, 145, 146, 144, 147, 0, 148, 0,
	149, 150, 222, 151, 0, 152, 153, 154, 0, 223,
	155, 156, 0, 157, 158, 0, 159, 224, 225, 160,
	0, 166, 161, 162, 163, 165, 226, 164, 227, 0,
	167, 0, 168, 169, 0, 228, 229, 230, 0, 0,
	170, 231, 232, 0, 171, 172, 173, 174, 0, 0,
	175, 176, 177, 0, 0, 178, 179, 180, 233, 234,
	0, 0, 181, 0, 71, 0, 0, 182, 183, 184,
	185, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	74, 75, 0, 76, 0, 0, 0, 0, 186, 0,
	0, 0, 464, 77, 78, 187, 188, 189, 190, 79,
	191, 192, 0, 80, 193, 194, 81, 0, 0, 195,
	196, 197, 0, 198, 0, 0, 0, 82, 83, 84,
	0, 85, 0, 86, 87, 88, 0, 0, 89, 90,
	0, 0, 0, 0, 0, 0, 91, 92, 93, 94,
	199, 95, 200, 201, 0, 96, 0, 97, 0, 0,
	0, 98, 99, 0, 100, 0, 0, 0, 202, 101,
	102, 203, 0, 0, 0, 103, 104, 204, 0, 105,
	0, 106, 0, 0, 0, 0, 107, 205, 0, 206,
	0, 108, 109, 207, 208, 0, 0, 112, 0, 110,
	0, 0, 111, 209, 210, 211, 212, 0, 213, 0,
	0, 113, 0, 114, 115, 0, 0, 214, 0, 116,
	0, 0, 117, 0, 0, 118, 0, 119, 120, 121,
	122, 123, 0, 124, 125, 128, 126, 0, 127, 0,
	215, 129, 216, 130, 131, 0, 0, 340, 0, 0,
	132, 217, 0, 133, 0, 218, 134, 135, 136, 0,
	219, 137, 220, 138, 0, 139, 140, 141, 221, 142,
	143, 0, 145, 146, 144, 147, 0, 148, 0, 149,
	150, 222, 151, 0, 152, 153, 154, 0, 223, 155,
	156, 0, 157, 158, 0, 159, 224, 225, 160, 0,
	166, 161, 162, 163, 165, 226, 164, 227, 0, 167,
	0, 168, 169, 0, 228, 229, 230, 0, 0, 170,
	231, 232, 0, 171, 172, 173, 174, 0, 0, 175,
	176, 177, 0, 0, 178, 179, 180, 233, 234, 0,
	0, 181, 71, 0, 0, 0, 182, 183, 184, 185,
	0, 0, 0, 0, 0, 0, 0, 0, 74, 75,
	0, 76, 0, 0, 0, 0, 186, 0, 0, 0,
	1074, 77, 78, 187, 188, 189, 190, 79, 191, 192,
	0, 80, 193, 194, 81, 0, 0, 195, 196, 197,
	0, 198, 0, 0, 0, 82, 83, 84, 0, 85,
	0, 86, 87, 88, 0, 0, 89, 90, 0, 0,
	0, 0, 0, 0, 91, 92, 93, 94, 199, 95,
	200, 201, 0, 96, 0, 97, 0, 0, 0, 98,
	99, 0, 100, 0, 0, 0, 202, 101, 102, 203,
	0, 0, 0, 103, 104, 204, 0, 105, 0, 106,
	0, 0, 0, 0, 107, 205, 0, 206, 0, 108,
	109, 207, 208, 0, 0, 112, 0, 110, 0, 0,
	111, 209, 210, 211, 212, 0, 213, 0, 0, 113,
	0, 114, 115, 0, 0, 214, 0, 116, 0, 0,
	117, 0, 0, 118, 0, 119, 120, 121, 122, 123,
	0, 124, 125, 128, 126, 0, 127, 0, 215, 129,
	216, 130, 131, 0, 0, 0, 0, 0, 132, 217,
	0, 133, 0, 218, 134, 135, 136, 0, 219, 137,
	220, 138, 0, 139, 140, 141, 221, 142, 143, 0,
	145, 146, 144, 147, 0, 148, 0, 149, 150, 222,
	151, 0, 152, 153, 154, 0, 223, 155, 156, 0,
	157, 158, 0, 159, 224, 225, 160, 0, 166, 161,
	162, 163, 165, 226, 164, 227, 0, 167, 0, 168,
	169, 0, 228, 229, 230, 0, 0, 170, 231, 232,
	0, 171, 172, 173, 174, 0, 0, 175, 176, 177,
	0, 0, 178, 179, 180, 233, 234, 0, 0, 181,
	0, 71, 0, 0, 182, 183, 184, 185, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 74, 75, 0,
	76, 0, 0, 0, 0, 186, 0, 0, 0, 587,
	77, 78, 187, 188, 189, 190, 79, 191, 192, 0,
	80, 193, 194, 81, 0, 0, 195, 196, 197, 0,
	198, 0, 0, 0, 82, 83, 84, 0, 85, 0,
	86, 87, 88, 0, 0, 89, 90, 0, 0, 0,
	0, 0, 0, 91, 92, 93, 94, 199, 95, 200,
	201, 0, 96, 0, 97, 0, 0, 0, 98, 99,
	0, 100, 0, 0, 0, 202, 101, 102, 203, 0,
	0, 0, 103, 104, 204, 0, 105, 0, 106, 0,
	0, 0, 0, 107, 205, 0, 206, 0, 108, 109,
	207, 208, 0, 0, 112, 0, 110, 0, 0, 111,
	209, 210, 211, 212, 0, 213, 0, 0, 113, 0,
	114, 115, 0, 0, 214, 0, 116, 0, 0, 117,
	0, 0, 118, 0, 119, 120, 121, 122, 123, 0,
	124, 125, 128, 126, 0, 127, 0, 215, 129, 216,
	130, 131, 0, 0, 0, 0, 0, 132, 217, 0,
	133, 0, 218, 134, 135, 136, 0, 219, 137, 220,
	138, 0, 139, 140, 141, 221, 142, 143, 0, 145,
	146, 144, 147, 0, 148, 0, 149, 150, 222, 151,
	0, 152, 153, 154, 0, 223, 155, 156, 0, 157,
	158, 0, 159, 224, 225, 160, 0, 166, 161, 162,
	163, 165, 226, 164, 227, 0, 167, 0, 168, 169,
	0, 228, 229, 230, 0, 0, 170, 231, 232, 0,
	171, 172, 173, 174, 0, 0, 175, 176, 177, 0,
	0, 178, 179, 180, 233, 234, 0, 0, 181, 71,
	0, 0, 0, 182, 183, 184, 185, 0, 0, 0,
	0, 0, 0, 0, 0, 74, 75, 0, 76, 0,
	0, 0, 0, 186, 0, 0, 0, 982, 77, 78,
	187, 188, 189, 190, 79, 191, 192, 0, 80, 193,
	194, 81, 0, 0, 195, 196, 197, 0, 198, 0,
	0, 0, 82, 83, 84, 0, 85, 0, 86, 87,
	88, 0, 0, 89, 90, 0, 0, 0, 0, 0,
	0, 91, 92, 93, 94, 199, 95, 200, 201, 0,
	96, 0, 97, 0, 0, 0, 98, 99, 0, 100,
	0, 0, 0, 202, 101, 102, 203, 0, 0, 0,
	103, 104, 204, 0, 105, 0, 106, 0, 0, 0,
	0, 107, 205, 0, 206, 0, 108, 109, 207, 208,
	0, 0, 112, 0, 110, 0, 0, 111, 209, 210,
	211, 212, 0, 213, 0, 0, 113, 0, 114, 115,
	0, 0, 214, 0, 116, 0, 0, 117, 0, 0,
	118, 0, 119, 120, 121, 122, 123, 0, 124, 125,
	128, 126, 0, 127, 0, 215, 129, 216, 130, 131,
	0, 0, 0, 0, 0, 132, 217, 0, 133, 0,
	218, 134, 135, 136, 0, 219, 137, 220, 138, 0,
	139, 140, 141, 221, 142, 143, 0, 145, 146, 144,
	147, 0, 148, 0, 149, 150, 222, 151, 0, 152,
	153, 154, 0, 223, 155, 156, 0, 157, 158, 0,
	159, 224, 225, 160, 0, 166, 161, 162, 163, 165,
	226, 164, 227, 0, 167, 0, 168, 169, 0, 228,
	229, 230, 0, 0, 170, 231, 232, 0, 171, 172,
	173, 174, 0, 0, 175, 176, 177, 0, 0, 178,
	179, 180, 233, 234, 0, 0, 181, 71, 0, 0,
	0, 182, 183, 184, 185, 0, 0, 0, 0, 0,
	0, 0, 0, 74, 75, 0, 76, 0, 0, 0,
	0, 186, 0, 0, 0, 1520, 77, 78, 187, 188,
	189, 190, 79, 191, 192, 0, 80, 193, 194, 81,
	0, 0, 195, 196, 197, 0, 198, 0, 0, 0,
	82, 83, 84, 0, 85, 0, 86, 87, 88, 0,
	0, 89, 90, 0, 0, 0, 0, 0, 0, 91,
	92, 93, 94, 199, 95, 200, 201, 0, 96, 0,
	97, 0, 0, 0, 98, 99, 0, 100, 0, 0,
	0, 202, 101, 102, 203, 0, 0, 0, 103, 104,
	204, 0, 105, 0, 106, 0, 0, 0, 0, 107,
	205, 0, 206, 0, 108, 109, 207, 208, 0, 0,
	112, 0, 110, 0, 0, 111, 209, 210, 211, 212,
	0, 213, 0, 0, 113, 0, 114, 115, 0, 0,
	214, 0, 116, 0, 0, 117, 0, 0, 118, 0,
	119, 120, 121, 122, 123, 0, 124, 125, 128, 126,
	0, 127, 0, 215, 129, 216, 130, 131, 0, 0,
	0, 0, 0, 132, 217, 0, 133, 0, 218, 134,
	135, 136, 0, 219, 137, 220, 138, 0, 139, 140,
	141, 221, 142, 143, 0, 145, 146, 144, 147, 0,
	148, 0, 149, 150, 222, 151, 0, 152, 153, 154,
	0, 223, 155, 156, 0, 157, 158, 0, 159, 224,
	225, 160, 0, 166, 161, 162, 163, 165, 226, 164,
	227, 0, 167, 0, 168, 169, 0, 228, 229, 230,
	0, 0, 170, 231, 232, 0, 171, 172, 173, 174,
	0, 0, 175, 176, 177, 0, 0, 178, 179, 180,
	233, 234, 0, 0, 181, 71, 0, 0, 0, 182,
	183, 184, 185, 0, 0, 0, 0, 0, 0, 0,
	0, 74, 75, 0, 76, 0, 0, 0, 0, 186,
	0, 0, 0, 567, 77, 78, 187, 188, 189, 190,
	79, 191, 192, 0, 80, 193, 194, 81, 0, 0,
	195, 196, 197, 0, 198, 0, 0, 0, 82, 83,
	84, 0, 85, 0, 86, 87, 88, 0, 0, 89,
	90, 0, 0, 0, 0, 0, 0, 91, 92, 747,
	94, 199, 95, 200, 201, 0, 96, 0, 97, 0,
	0, 0, 98, 99, 0, 100, 0, 0, 0, 202,
	101, 102, 203, 0, 0, 0, 103, 104, 204, 0,
	105, 0, 106, 0, 0, 0, 0, 107, 205, 0,
	206, 0, 108, 109, 207, 208, 0, 0, 112, 0,
	110, 0, 0, 111, 209, 210, 211, 212, 0, 213,
	0, 0, 113, 0, 114, 115, 0, 0, 214, 0,
	116, 0, 0, 117, 0, 0, 118, 0, 119, 120,
	121, 122, 123, 0, 124, 125, 128, 126, 0, 127,
	0, 215, 129, 216, 130, 131, 0, 0, 0, 0,
	0, 132, 217, 0, 133, 0, 218, 134, 135, 136,
	0, 219, 137, 220, 138, 0, 139, 140, 141, 221,
	142, 143, 0, 145, 146, 144, 147, 0, 148, 0,
	149, 150, 222, 151, 0, 152, 153, 154, 0, 223,
	155, 156, 0, 157, 158, 0, 159, 224, 225, 160,
	0, 166, 161, 162, 163, 165, 226, 164, 227, 0,
	167, 746, 168, 169, 0, 228, 229, 230, 0, 0,
	170, 231, 232, 0, 171, 172, 173, 174, 0, 0,
	175, 176, 177, 0, 0, 178, 179, 180, 233, 234,
	0, 71, 181, 0, 0, 0, 0, 182, 183, 184,
	185, 0, 0, 0, 0, 0, 0, 74, 75, 0,
	76, 0, 0, 0, 750, 186, 0, 0, 0, 0,
	77, 78, 187, 188, 189, 190, 79, 191, 192, 0,
	80, 193, 194, 81, 0, 0, 195, 196, 197, 0,
	198, 0, 0, 0, 82, 83, 84, 0, 85, 0,
	86, 87, 88, 0, 0, 89, 90, 0, 0, 0,
	0, 0, 0, 91, 92, 93, 94, 199, 95, 200,
	201, 0, 96, 0, 97, 0, 0, 0, 98, 99,
	0, 100, 0, 0, 0, 202, 101, 102, 203, 0,
	0, 0, 103, 104, 204, 0, 105, 0, 106, 0,
	0, 0, 0, 107, 205, 0, 206, 0, 108, 109,
	207, 208, 0, 0, 112, 0, 110, 0, 0, 111,
	209, 210, 211, 212, 0, 213, 0, 0, 113, 0,
	114, 115, 0, 0, 214, 0, 116, 0, 0, 117,
	0, 0, 118, 0, 119, 120, 121, 122, 123, 0,
	124, 125, 128, 126, 0, 127, 0, 215, 129, 216,
	130, 131, 0, 0, 0, 0, 0, 132, 217, 0,
	133, 0, 218, 134, 135, 136, 0, 219, 137, 220,
	138, 0, 139, 140, 141, 221, 142, 143, 0, 145,
	146, 144, 147, 0, 148, 0, 149, 150, 222, 151,
	0, 152, 153, 154, 0, 223, 155, 156, 0, 157,
	158, 0, 159, 224, 225, 160, 0, 166, 161, 162,
	163, 165, 226, 164, 227, 0, 167, 0, 168, 169,
	0, 228, 229, 230, 0, 0, 170, 231, 232, 0,
	171, 172, 173, 174, 0, 0, 175, 176, 177, 0,
	0, 178, 179, 180, 233, 234, 0, 375, 181, 0,
	0, 0, 0, 182, 183, 184, 185, 0, 0, 0,
	0, 0, 0, 74, 75, 0, 76, 0, 0, 0,
	750, 186, 0, 0, 0, 0, 77, 78, 187, 188,
	189, 190, 79, 191, 192, 0, 80, 193, 194, 81,
	0, 0, 195, 196, 197, 0, 198, 0, 380, 0,
	82, 83, 84, 0, 85, 0, 86, 87, 88, 0,
	381, 89, 90, 0, 0, 0, 0, 0, 0, 91,
	92, 93, 94, 199, 95, 200, 201, 0, 96, 0,
	97, 0, 0, 0, 98, 99, 0, 100, 0, 0,
	0, 202, 101, 102, 203, 0, 0, 0, 103, 104,
	204, 0, 105, 0, 106, 0, 0, 382, 0, 107,
	205, 0, 206, 0, 108, 109, 207, 208, 384, 0,
	112, 0, 110, 0, 383, 111, 209, 210, 211, 212,
	0, 213, 0, 385, 113, 386, 114, 115, 0, 0,
	214, 387, 116, 388, 0, 117, 0, 0, 118, 0,
	119, 120, 121, 122, 123, 389, 124, 125, 128, 126,
	0, 127, 0, 215, 129, 216, 130, 131, 0, 0,
	0, 0, 0, 132, 217, 390, 133, 391, 218, 134,
	135, 136, 0, 219, 137, 220, 138, 0, 139, 140,
	141, 221, 142, 143, 0, 145, 146, 144, 147, 0,
	148, 392, 149, 150, 222, 151, 0, 152, 153, 154,
	0, 223, 155, 156, 0, 157, 158, 393, 159, 224,
	225, 160, 0, 166, 161, 162, 163, 165, 226, 164,
	227, 0, 167, 0, 168, 169, 0, 228, 229, 230,
	0, 0, 170, 231, 232, 0, 171, 172, 173, 174,
	0, 0, 175, 176, 177, 0, 0, 178, 179, 180,
	233, 234, 71, 0, 181, 0, 0, 0, 0, 182,
	183, 184, 185, 0, 0, 0, 0, 0, 74, 75,
	0, 76, 0, 0, 0, 0, 186, 0, 0, 0,
	0, 77, 78, 187, 188, 189, 190, 79, 191, 192,
	0, 80, 193, 194, 81, 0, 0, 195, 196, 197,
	948, 198, 0, 0, 0, 82, 83, 84, 0, 85,
	946, 86, 87, 88, 0, 0, 89, 90, 0, 0,
	0, 0, 0, 0, 91, 92, 93, 94, 199, 95,
	200, 201, 0, 96, 0, 97, 0, 0, 0, 98,
	99, 0, 100, 0, 0, 0, 202, 101, 102, 203,
	0, 1048, 0, 103, 104, 204, 0, 105, 0, 106,
	951, 0, 0, 0, 107, 205, 0, 206, 0, 108,
	109, 207, 208, 0, 0, 112, 1046, 110, 0, 0,
	111, 209, 210, 211, 212, 0, 213, 0, 0, 113,
	0, 114, 115, 0, 0, 214, 0, 116, 0, 0,
	117, 0, 0, 118, 0, 119, 120, 121, 122, 123,
	0, 124, 125, 128, 126, 0, 127, 0, 215, 129,
	216, 130, 131, 0, 0, 0, 0, 0, 132, 217,
	0, 133, 0, 218, 134, 135, 136, 0, 219, 137,
	220, 138, 950, 139, 140, 141, 221, 142, 143, 0,
	145, 146, 144, 147, 0, 148, 0, 149, 150, 222,
	151, 0, 152, 153, 154, 0, 223, 155, 156, 0,
	157, 158, 0, 159, 224, 225, 160, 0, 166, 161,
	162, 163, 165, 226, 164, 227, 0, 167, 0, 168,
	169, 0, 228, 229, 230, 0, 0, 170, 231, 232,
	0, 171, 172, 173, 174, 0, 1047, 175, 176, 177,
	0, 0, 178, 179, 180, 233, 234, 71, 0, 181,
	0, 0, 0, 0, 182, 183, 184, 185, 0, 0,
	0, 0, 0, 74, 75, 0, 76, 0, 0, 0,
	0, 186, 0, 0, 0, 0, 77, 78, 187, 188,
	189, 190, 79, 191, 192, 0, 80, 193, 194, 81,
	0, 0, 195, 196, 197, 948, 198, 0, 0, 943,
	82, 83, 84, 0, 85, 946, 86, 87, 88, 0,
	0, 89, 90, 0, 0, 0, 0, 0, 0, 91,
	92, 93, 94, 199, 95, 200, 201, 0, 96, 0,
	97, 0, 0, 0, 98, 99, 0, 100, 0, 0,
	0, 202, 101, 102, 203, 0, 0, 0, 103, 104,
	204, 0, 105, 0, 106, 951, 0, 0, 0, 107,
	205, 0, 206, 0, 108, 109, 942, 208, 0, 0,
	112, 0, 110, 0, 0, 111, 209, 210, 211, 212,
	0, 213, 0, 0, 113, 0, 114, 115, 0, 0,
	214, 0, 116, 0, 0, 117, 0, 0, 118, 0,
	119, 120, 121, 122, 123, 0, 124, 125, 128, 126,
	0, 127, 0, 215, 129, 216, 130, 131, 0, 0,
	0, 0, 0, 132, 217, 0, 133, 0, 218, 134,
	135, 136, 0, 219, 137, 220, 138, 950, 139, 140,
	141, 221, 142, 143, 0, 145, 146, 144, 147, 0,
	148, 0, 149, 150, 222, 151, 0, 152, 153, 154,
	0, 223, 155, 156, 0, 157, 158, 0, 159, 224,
	225, 160, 0, 166, 161, 162, 163, 165, 226, 164,
	227, 0, 167, 0, 168, 169, 0, 228, 229, 230,
	0, 0, 170, 231, 232, 0, 171, 172, 173, 174,
	0, 949, 175, 176, 177, 0, 0, 178, 179, 180,
	233, 234, 71, 0, 181, 0, 0, 0, 0, 182,
	183, 184, 185, 0, 0, 0, 0, 0, 74, 75,
	0, 76, 0, 0, 0, 0, 186, 0, 1302, 0,
	0, 77, 78, 187, 188, 189, 190, 79, 191, 192,
	0, 80, 193, 194, 81, 0, 0, 195, 196, 197,
	0, 198, 0, 0, 0, 82, 83, 84, 0, 85,
	0, 86, 87, 88, 0, 0, 89, 90, 0, 0,
	0, 0, 0, 0, 91, 92, 93, 94, 199, 95,
	200, 201, 0, 96, 0, 97, 0, 0, 0, 98,
	99, 0, 100, 0, 0, 0, 202, 101, 102, 203,
	0, 0, 0, 103, 104, 204, 0, 105, 0, 106,
	0, 0, 0, 0, 107, 205, 0, 206, 0, 108,
	109, 207, 208, 0, 0, 112, 0, 110, 0, 0,
	111, 209, 210, 211, 212, 0, 213, 0, 0, 113,
	0, 114, 115, 0, 0, 214, 0, 116, 0, 0,
	117, 0, 0, 118, 0, 119, 120, 121, 122, 123,
	0, 124, 125, 128, 126, 0, 127, 0, 215, 129,
	216, 130, 131, 0, 0, 0, 0, 0, 132, 217,
	0, 133, 0, 218, 134, 135, 136, 0, 219, 137,
	220, 138, 0, 139, 140, 141, 221, 142, 143, 0,
	145, 146, 144, 147, 0, 148, 0, 149, 150, 222,
	151, 0, 152, 153, 154, 0, 223, 155, 156, 0,
	157, 158, 0, 159, 224, 225, 160, 0, 166, 161,
	162, 163, 165, 226, 164, 227, 0, 167, 0, 168,
	169, 0, 228, 229, 230, 0, 0, 170, 231, 232,
	0, 171, 172, 173, 174, 0, 0, 175, 176, 177,
	0, 0, 178, 179, 180, 233, 234, 71, 0, 181,
	0, 0, 0, 0, 182, 183, 184, 185, 0, 0,
	0, 0, 0, 74, 75, 0, 76, 0, 0, 0,
	0, 186, 0, 0, 0, 0, 77, 78, 187, 188,
	189, 190, 79, 191, 192, 0, 80, 193, 194, 81,
	0, 0, 195, 196, 197, 0, 198, 0, 0, 0,
	82, 83, 84, 0, 85, 0, 86, 87, 88, 0,
	0, 89, 90, 0, 0, 0, 0, 0, 0, 91,
	92, 93, 94, 199, 95, 200, 201, 0, 96, 0,
	97, 0, 0, 0, 98, 99, 0, 100, 0, 0,
	0, 202, 101, 102, 203, 0, 0, 0, 103, 104,
	204, 0, 105, 0, 106, 0, 0, 0, 0, 107,
	205, 0, 206, 0, 108, 109, 207, 208, 0, 0,
	112, 0, 110, 0, 0, 111, 209, 210, 211, 212,
	0, 213, 0, 0, 113, 0, 114, 115, 0, 0,
	214, 0, 116, 0, 0, 117, 0, 0, 118, 0,
	119, 120, 121, 122, 123, 0, 124, 125, 128, 126,
	0, 127, 0, 215, 129, 216, 130, 131, 0, 0,
	340, 0, 0, 132, 217, 0, 133, 0, 218, 134,
	135, 136, 0, 219, 137, 220, 138, 0, 139, 140,
	141, 221, 142, 143, 0, 145, 146, 144, 147, 0,
	148, 0, 149, 150, 222, 151, 0, 152, 153, 154,
	0, 223, 155, 156, 0, 157, 158, 0, 159, 224,
	225, 160, 0, 166, 161, 162, 163, 165, 226, 164,
	227, 0, 167, 0, 168, 169, 0, 228, 229, 230,
	0, 0, 170, 231, 232, 0, 171, 172, 173, 174,
	0, 0, 175, 176, 177, 0, 0, 178, 179, 180,
	233, 234, 71, 0, 181, 0, 0, 0, 0, 182,
	183, 184, 185, 0, 0, 0, 0, 0, 74, 75,
	0, 76, 0, 0, 0, 0, 186, 0, 0, 0,
	0, 77, 78, 187, 188, 189, 190, 79, 191, 192,
	0, 80, 193, 194, 81, 0, 0, 195, 196, 197,
	0, 198, 0, 0, 0, 82, 83, 84, 0, 85,
	0, 86, 87, 88, 0, 0, 89, 90, 0, 0,
	0, 0, 0, 0, 91, 92, 93, 94, 199, 95,
	200, 201, 0, 96, 0, 97, 0, 0, 0, 98,
	99, 0, 100, 0, 0, 0, 202, 101, 102, 203,
	0, 0, 0, 103, 104, 204, 0, 105, 0, 106,
	0, 0, 0, 0, 107, 205, 0, 206, 0, 108,
	109, 698, 208, 0, 0, 112, 0, 110, 0, 0,
	111, 209, 210, 211, 212, 0, 213, 0, 0, 113,
	0, 114, 115, 0, 0, 214, 0, 116, 0, 0,
	117, 0, 0, 118, 0, 119, 120, 121, 122, 123,
	0, 124, 125, 128, 126, 0, 127, 0, 215, 129,
	216, 130, 131, 0, 0, 340, 0, 0, 132, 217,
	0, 133, 0, 218, 134, 135, 136, 0, 219, 137,
	220, 138, 0, 139, 140, 141, 221, 142, 143, 0,
	145, 146, 144, 147, 0, 148, 0, 149, 150, 222,
	151, 0, 152, 153, 154, 0, 223, 155, 156, 0,
	157, 158, 0, 159, 224, 225, 160, 0, 166, 161,
	162, 163, 165, 226, 164, 227, 0, 167, 0, 168,
	169, 0, 228, 229, 230, 0, 0, 170, 231, 232,
	0, 171, 172, 173, 174, 0, 0, 175, 176, 177,
	0, 0, 178, 179, 180, 233, 234, 71, 0, 181,
	0, 0, 0, 0, 182, 183, 184, 185, 0, 0,
	0, 0, 0, 74, 75, 400, 76, 0, 0, 0,
	0, 186, 0, 0, 0, 0, 77, 78, 187, 188,
	189, 190, 79, 191, 192, 0, 80, 193, 194, 81,
	0, 0, 195, 196, 197, 0, 198, 0, 0, 0,
	82, 83, 84, 0, 85, 0, 86, 87, 88, 0,
	0, 89, 90, 0, 0, 0, 0, 0, 0, 91,
	92, 93, 94, 199, 95, 200, 201, 0, 96, 0,
	97, 0, 0, 0, 98, 99, 0, 100, 0, 0,
	0, 202, 101, 102, 203, 0, 0, 0, 103, 104,
	204, 0, 105, 0, 106, 0, 0, 0, 0, 107,
	205, 0, 206, 0, 108, 109, 207, 208, 0, 0,
	112, 0, 110, 0, 0, 111, 209, 210, 211, 212,
	0, 213, 0, 0, 113, 0, 114, 115, 0, 0,
	214, 0, 116, 0, 0, 117, 0, 0, 118, 0,
	119, 120, 121, 122, 123, 0, 124, 125, 128, 126,
	0, 127, 0, 215, 129, 216, 130, 131, 0, 0,
	0, 0, 0, 132, 217, 0, 133, 0, 218, 134,
	135, 136, 0, 219, 137, 220, 138, 0, 139, 140,
	141, 221, 142, 143, 0, 145, 146, 144, 147, 0,
	148, 0, 149, 150, 222, 151, 0, 152, 153, 154,
	0, 223, 155, 156, 0, 157, 158, 0, 159, 224,
	225, 160, 0, 166, 161, 162, 163, 165, 226, 164,
	227, 0, 167, 0, 168, 169, 0, 228, 229, 230,
	0, 0, 170, 231, 232, 0, 171, 172, 173, 174,
	0, 0, 175, 176, 177, 0, 0, 178, 179, 180,
	233, 234, 71, 0, 181, 0, 0, 0, 0, 182,
	183, 184, 185, 0, 0, 0, 0, 0, 74, 75,
	0, 76, 0, 0, 0, 0, 186, 0, 0, 0,
	0, 77, 78, 187, 188, 189, 190, 79, 191, 192,
	0, 80, 193, 194, 81, 0, 0, 195, 196, 197,
	0, 198, 0, 0, 0, 82, 83, 84, 0, 85,
	0, 86, 87, 88, 0, 0, 89, 90, 0, 0,
	0, 0, 0, 0, 91, 92, 93, 94, 199, 95,
	200, 201, 0, 96, 0, 97, 0, 0, 0, 98,
	99, 0, 100, 0, 0, 0, 202, 101, 102, 203,
	0, 0, 0, 103, 104, 204, 0, 105, 0, 106,
	0, 0, 0, 0, 107, 205, 0, 206, 0, 108,
	109, 345, 208, 0, 0, 112, 0, 110, 0, 0,
	111, 209, 210, 211, 212, 0, 213, 0, 0, 113,
	0, 114, 115, 0, 0, 214, 0, 116, 0, 0,
	117, 0, 0, 118, 0, 119, 120, 121, 122, 123,
	0, 124, 125, 128, 126, 0, 127, 0, 215, 129,
	216, 130, 131, 0, 0, 340, 0, 0, 132, 217,
	0, 133, 0, 218, 134, 135, 136, 0, 219, 137,
	220, 138, 0, 139, 140, 141, 221, 142, 143, 0,
	145, 146, 144, 147, 0, 148, 0, 149, 150, 222,
	151, 0, 152, 153, 154, 0, 223, 155, 156, 0,
	157, 158, 0, 159, 224, 225, 160, 0, 166, 161,
	162, 163, 165, 226, 164, 227, 0, 167, 0, 168,
	169, 0, 228, 229, 230, 0, 0, 170, 231, 232,
	0, 171, 172, 173, 174, 0, 0, 175, 176, 177,
	0, 0, 178, 179, 180, 233, 234, 71, 0, 181,
	0, 0, 0, 0, 182, 183, 184, 185, 0, 0,
	0, 0, 0, 74, 75, 257, 76, 0, 0, 0,
	0, 186, 0, 0, 0, 0, 77, 78, 187, 188,
	189, 190, 79, 191, 192, 0, 80, 193, 194, 81,
	0, 0, 195, 196, 197, 0, 198, 0, 0, 0,
	82, 83, 84, 0, 85, 0, 86, 87, 88, 0,
	0, 89, 90, 0, 0, 0, 0, 0, 0, 91,
	92, 93, 94, 199, 95, 200, 201, 0, 96, 0,
	97, 0, 0, 0, 98, 99, 0, 100, 0, 0,
	0, 202, 101, 102, 203, 0, 0, 0, 103, 104,
	204, 0, 105, 0, 106, 0, 0, 0, 0, 107,
	205, 0, 206, 0, 108, 109, 207, 208, 0, 0,
	112, 0, 110, 0, 0, 111, 209, 210, 211, 212,
	0, 213, 0, 0, 113, 0, 114, 115, 0, 0,
	214, 0, 116, 0, 0, 117, 0, 0, 118, 0,
	119, 120, 121, 122, 123, 0, 124, 125, 128, 126,
	0, 127, 0, 215, 129, 216, 130, 131, 0, 0,
	0, 0, 0, 132, 217, 0, 133, 0, 218, 134,
	135, 136, 0, 219, 137, 220, 256, 0, 139, 140,
	141, 221, 142, 143, 0, 145, 146, 144, 147, 0,
	148, 0, 149, 150, 222, 151, 0, 152, 153, 154,
	0, 223, 155, 156, 0, 157, 158, 0, 159, 224,
	225, 160, 0, 166, 161, 162, 163, 165, 226, 164,
	227, 0, 167, 0, 168, 169, 0, 228, 229, 230,
	0, 0, 170, 231, 232, 0, 171, 172, 173, 174,
	0, 0, 175, 176, 177, 0, 0, 178, 179, 180,
	233, 234, 71, 0, 181, 0, 0, 0, 0, 182,
	183, 184, 185, 0, 0, 0, 0, 0, 74, 75,
	0, 76, 0, 0, 0, 0, 186, 0, 0, 0,
	0, 77, 78, 187, 188, 189, 190, 79, 191, 192,
	0, 80, 193, 194, 81, 0, 0, 195, 196, 197,
	0, 198, 0, 0, 0, 82, 83, 84, 0, 85,
	0, 86, 87, 88, 0, 0, 89, 90, 0, 0,
	0, 0, 0, 0, 91, 92, 93, 94, 199, 95,
	200, 201, 0, 96, 0, 97, 0, 0, 0, 98,
	99, 0, 100, 0, 0, 0, 202, 101, 102, 203,
	0, 0, 0, 103, 104, 204, 0, 105, 0, 106,
	0, 0, 0, 0, 107, 205, 0, 206, 0, 108,
	109, 207, 208, 0, 0, 112, 0, 110, 0, 0,
	111, 209, 210, 211, 212, 0, 213, 0, 0, 113,
	0, 114, 115, 0, 0, 214, 0, 116, 0, 0,
	117, 0, 0, 118, 0, 119, 120, 121, 122, 123,
	0, 124, 125, 128, 126, 0, 127, 0, 215, 129,
	216, 130, 131, 0, 0, 0, 0, 0, 132, 217,
	0, 133, 0, 218, 134, 135, 136, 0, 219, 137,
	220, 138, 0, 139, 140, 141, 221, 142, 143, 0,
	145, 146, 144, 147, 0, 148, 0, 149, 150, 222,
	151, 0, 152, 153, 154, 0, 223, 155, 156, 0,
	157, 158, 0, 159, 224, 225, 160, 0, 166, 161,
	162, 163, 165, 226, 164, 227, 0, 167, 0, 168,
	169, 0, 228, 229, 230, 0, 0, 170, 231, 232,
	0, 171, 172, 173, 174, 0, 0, 175, 176, 177,
	0, 0, 178, 179, 180, 233, 234, 71, 0, 181,
	0, 0, 0, 0, 182, 183, 184, 185, 0, 0,
	0, 0, 0, 74, 75, 0, 76, 0, 0, 0,
	0, 186, 0, 0, 0, 0, 77, 78, 187, 188,
	189, 190, 79, 191, 192, 0, 80, 193, 194, 81,
	0, 0, 195, 196, 197, 0, 198, 0, 0, 0,
	82, 83, 84, 0, 85, 0, 86, 87, 88, 0,
	0, 89, 90, 0, 0, 0, 0, 0, 0, 91,
	92, 93, 94, 199, 95, 200, 201, 0, 96, 0,
	97, 0, 0, 0, 98, 99, 0, 100, 0, 0,
	0, 202, 101, 102, 203, 0, 0, 0, 103, 104,
	204, 0, 105, 0, 106, 0, 0, 0, 0, 107,
	205, 0, 206, 0, 108, 109, 1218, 208, 0, 0,
	112, 0, 110, 0, 0, 111, 209, 210, 211, 212,
	0, 213, 0, 0, 113, 0, 114, 115, 0, 0,
	214, 0, 116, 0, 0, 117, 0, 0, 118, 0,
	119, 120, 121, 122, 123, 0, 124, 125, 128, 126,
	0, 127, 0, 215, 129, 216, 130, 131, 0, 0,
	0, 0, 0, 132, 217, 0, 133, 0, 218, 134,
	135, 136, 0, 219, 137, 220, 138, 0, 139, 140,
	141, 221, 142, 143, 0, 145, 146, 144, 147, 0,
	148, 0, 149, 150, 222, 151, 0, 152, 153, 154,
	0, 223, 155, 156, 0, 157, 158, 0, 159, 224,
	225, 160, 0, 166, 161, 162, 163, 165, 226, 164,
	227, 0, 167, 0, 168, 169, 0, 228, 229, 230,
	0, 0, 170, 231, 232, 0, 171, 172, 173, 174,
	0, 0, 175, 176, 177, 0, 0, 178, 179, 180,
	233, 234, 71, 0, 181, 0, 0, 0, 0, 182,
	183, 184, 185, 0, 0, 0, 0, 0, 74, 75,
	0, 76, 0, 0, 0, 0, 186, 0, 0, 0,
	0, 77, 78, 187, 188, 189, 190, 79, 191, 192,
	0, 80, 193, 194, 81, 0, 0, 195, 196, 197,
	0, 198, 0, 0, 0, 82, 83, 84, 0, 85,
	0, 86, 87, 88, 0, 0, 89, 90, 0, 0,
	0, 0, 0, 0, 91, 92, 93, 94, 199, 95,
	200, 201, 0, 96, 0, 97, 0, 0, 0, 98,
	99, 0, 100, 0, 0, 0, 202, 101, 102, 203,
	0, 0, 0, 103, 104, 204, 0, 105, 0, 106,
	0, 0, 0, 0, 107, 205, 0, 206, 0, 108,
	109, 1216, 208, 0, 0, 112, 0, 110, 0, 0,
	111, 209, 210, 211, 212, 0, 213, 0, 0, 113,
	0, 114, 115, 0, 0, 214, 0, 116, 0, 0,
	117, 0, 0, 118, 0, 119, 120, 121, 122, 123,
	0, 124, 125, 128, 126, 0, 127, 0, 215, 129,
	216, 130, 131, 0, 0, 0, 0, 0, 132, 217,
	0, 133, 0, 218, 134, 135, 136, 0, 219, 137,
	220, 138, 0, 139, 140, 141, 221, 142, 143, 0,
	145, 146, 144, 147, 0, 148, 0, 149, 150, 222,
	151, 0, 152, 153, 154, 0, 223, 155, 156, 0,
	157, 158, 0, 159, 224, 225, 160, 0, 166, 161,
	162, 163, 165, 226, 164, 227, 0, 167, 0, 168,
	169, 0, 228, 229, 230, 0, 0, 170, 231, 232,
	0, 171, 172, 173, 174, 0, 0, 175, 176, 177,
	0, 0, 178, 179, 180, 233, 234, 71, 0, 181,
	0, 0, 0, 0, 182, 183, 184, 185, 0, 0,
	0, 0, 0, 74, 75, 0, 76, 0, 0, 0,
	0, 186, 0, 0, 0, 0, 77, 78, 187, 188,
	189, 190, 79, 191, 192, 0, 80, 193, 194, 81,
	0, 0, 195, 196, 197, 0, 198, 0, 0, 0,
	82, 83, 84, 0, 85, 0, 86, 87, 88, 0,
	0, 89, 90, 0, 0, 0, 0, 0, 0, 91,
	92, 93, 94, 199, 95, 200, 201, 0, 96, 0,
	97, 0, 0, 0, 98, 99, 0, 100, 0, 0,
	0, 202, 101, 102, 203, 0, 0, 0, 103, 104,
	204, 0, 105, 0, 106, 0, 0, 0, 0, 107,
	205, 0, 206, 0, 108, 109, 1207, 208, 0, 0,
	112, 0, 110, 0, 0, 111, 209, 210, 211, 212,
	0, 213, 0, 0, 113, 0, 114, 115, 0, 0,
	214, 0, 116, 0, 0, 117, 0, 0, 118, 0,
	119, 120, 121, 122, 123, 0, 124, 125, 128, 126,
	0, 127, 0, 215, 129, 216, 130, 131, 0, 0,
	0, 0, 0, 132, 217, 0, 133, 0, 218, 134,
	135, 136, 0, 219, 137, 220, 138, 0, 139, 140,
	141, 221, 142, 143, 0, 145, 146, 144, 147, 0,
	148, 0, 149, 150, 222, 151, 0, 152, 153, 154,
	0, 223, 155, 156, 0, 157, 158, 0, 159, 224,
	225, 160, 0, 166, 161, 162, 163, 165, 226, 164,
	227, 0, 167, 0, 168, 169, 0, 228, 229, 230,
	0, 0, 170, 231, 232, 0, 171, 172, 173, 174,
	0, 0, 175, 176, 177, 0, 0, 178, 179, 180,
	233, 234, 71, 0, 181, 0, 0, 0, 0, 182,
	183, 184, 185, 0, 0, 0, 0, 0, 74, 75,
	0, 76, 0, 0, 0, 0, 186, 0, 0, 0,
	0, 77, 78, 187, 188, 189, 190, 79, 191, 192,
	0, 80, 193, 194, 81, 0, 0, 195, 196, 197,
	0, 198, 0, 0, 0, 82, 83, 84, 0, 85,
	0, 86, 87, 88, 0, 0, 89, 90, 0, 0,
	0, 0, 0, 0, 91, 92, 93, 94, 199, 95,
	200, 201, 0, 96, 0, 97, 0, 0, 0, 98,
	99, 0, 100, 0, 0, 0, 202, 101, 102, 203,
	0, 0, 0, 103, 104, 204, 0, 105, 0, 106,
	0, 0, 0, 0, 107, 205, 0, 206, 0, 108,
	109, 814, 208, 0, 0, 112, 0, 110, 0, 0,
	111, 209, 210, 211, 212, 0, 213, 0, 0, 113,
	0, 114, 115, 0, 0, 214, 0, 116, 0, 0,
	117, 0, 0, 118, 0, 119, 120, 121, 122, 123,
	0, 124, 125, 128, 126, 0, 127, 0, 215, 129,
	216, 130, 131, 0, 0, 0, 0, 0, 132, 217,
	0, 133, 0, 218, 134, 135, 136, 0, 219, 137,
	220, 138, 0, 139, 140, 141, 221, 142, 143, 0,
	145, 146, 144, 147, 0, 148, 0, 149, 150, 222,
	151, 0, 152, 153, 154, 0, 223, 155, 156, 0,
	157, 158, 0, 159, 224, 225, 160, 0, 166, 161,
	162, 163, 165, 226, 164, 227, 0, 167, 0, 168,
	169, 0, 228, 229, 230, 0, 0, 170, 231, 232,
	0, 171, 172, 173, 174, 0, 0, 175, 176, 177,
	0, 0, 178, 179, 180, 233, 234, 71, 0, 181,
	0, 0, 0, 0, 182, 183, 184, 185, 0, 0,
	0, 0, 0, 74, 75, 0, 76, 0, 0, 0,
	0, 186, 0, 0, 0, 0, 77, 78, 187, 188,
	189, 190, 79, 191, 192, 0, 80, 193, 194, 81,
	0, 0, 195, 196, 197, 0, 198, 0, 0, 0,
	82, 83, 84, 0, 85, 0, 86, 87, 88, 0,
	0, 89, 90, 0, 0, 0, 0, 0, 0, 91,
	92, 93, 94, 199, 95, 200, 201, 0, 96, 0,
	97, 0, 0, 0, 98, 99, 0, 100, 0, 0,
	0, 202, 101, 102, 203, 0, 0, 0, 103, 104,
	204, 0, 105, 0, 106, 0, 0, 0, 0, 107,
	205, 0, 206, 0, 108, 109, 207, 208, 0, 0,
	112, 0, 110, 0, 0, 111, 209, 210, 211, 212,
	0, 213, 0, 0, 113, 0, 114, 115, 0, 0,
	214, 0, 116, 0, 0, 117, 0, 0, 118, 0,
	119, 120, 121, 122, 123, 0, 124, 125, 128, 126,
	0, 127, 0, 215, 129, 216, 130, 131, 0, 0,
	0, 0, 0, 132, 217, 0, 133, 0, 218, 134,
	135, 136, 0, 219, 137, 220, 138, 0, 139, 140,
	141, 221, 142, 143, 0, 145, 146, 144, 147, 0,
	148, 0, 149, 150, 222, 151, 0, 271, 153, 154,
	0, 223, 155, 156, 0, 157, 158, 0, 159, 224,
	225, 160, 0, 166, 161, 162, 163, 165, 226, 164,
	227, 0, 167, 0, 168, 169, 0, 228, 229, 230,
	0, 0, 170, 231, 232, 0, 171, 172, 173, 174,
	0, 0, 175, 176, 177, 0, 0, 178, 179, 180,
	233, 234, 71, 0, 181, 0, 0, 0, 0, 182,
	183, 184, 185, 0, 0, 0, 0, 0, 74, 75,
	0, 76, 0, 0, 0, 0, 186, 0, 685, 0,
	0, 77, 78, 187, 188, 189, 190, 79, 191, 192,
	0, 80, 193, 194, 81, 0, 0, 195, 196, 197,
	0, 198, 0, 0, 0, 82, 83, 84, 0, 85,
	0, 86, 87, 88, 0, 0, 89, 90, 0, 0,
	0, 0, 0, 0, 91, 92, 93, 94, 199, 95,
	200, 201, 0, 96, 0, 97, 0, 0, 0, 98,
	99, 0, 100, 0, 0, 0, 202, 101, 102, 203,
	0, 0, 0, 103, 104, 204, 0, 105, 0, 106,
	0, 0, 0, 0, 107, 205, 0, 206, 0, 108,
	109, 207, 208, 0, 0, 112, 0, 110, 0, 0,
	111, 209, 210, 211, 212, 0, 213, 0, 0, 113,
	0, 114, 115, 0, 0, 214, 0, 116, 0, 0,
	117, 0, 0, 118, 0, 119, 120, 121, 122, 123,
	0, 124, 125, 128, 126, 0, 127, 0, 215, 129,
	216, 130, 131, 0, 0, 0, 0, 0, 132, 217,
	0, 133, 0, 218, 134, 135, 136, 0, 219, 137,
	220, 138, 0, 139, 140, 141, 221, 142, 143, 0,
	145, 146, 144, 147, 0, 148, 0, 149, 150, 222,
	151, 0, 152, 153, 154, 0, 223, 155, 156, 0,
	0, 158, 0, 159, 224, 225, 160, 0, 166, 161,
	162, 163, 165, 226, 164, 227, 0, 167, 0, 168,
	169, 0, 228, 229, 230, 0, 0, 170, 231, 232,
	0, 171, 172, 173, 174, 0, 0, 175, 176, 177,
	0, 0, 178, 179, 180, 233, 234, 71, 0, 181,
	0, 0, 0, 0, 182, 183, 184, 185, 0, 0,
	0, 0, 0, 74, 75, 0, 76, 0, 0, 0,
	0, 186, 0, 0, 0, 0, 77, 78, 187, 188,
	189, 190, 79, 191, 192, 0, 80, 193, 194, 81,
	0, 0, 195, 196, 197, 0, 198, 0, 0, 0,
	82, 83, 84, 0, 85, 0, 86, 87, 88, 0,
	0, 89, 90, 0, 0, 0, 0, 0, 0, 91,
	92, 93, 94, 199, 95, 200, 201, 0, 96, 0,
	97, 0, 0, 0, 98, 99, 0, 100, 0, 0,
	0, 202, 101, 102, 203, 0, 0, 0, 103, 104,
	204, 0, 105, 0, 106, 0, 0, 0, 0, 107,
	205, 0, 206, 0, 108, 109, 449, 208, 0, 0,
	112, 0, 110, 0, 0, 111, 209, 210, 211, 212,
	0, 213, 0, 0, 113, 0, 114, 115, 0, 0,
	214, 0, 116, 0, 0, 117, 0, 0, 118, 0,
	119, 120, 121, 122, 123, 0, 124, 125, 128, 126,
	0, 127, 0, 215, 129, 216, 130, 131, 0, 0,
	0, 0, 0, 132, 217, 0, 133, 0, 218, 134,
	135, 136, 0, 219, 137, 220, 138, 0, 139, 140,
	141, 221, 142, 143, 0, 145, 146, 144, 147, 0,
	148, 0, 149, 150, 222, 151, 0, 152, 153, 154,
	0, 223, 155, 156, 0, 157, 158, 0, 159, 224,
	225, 160, 0, 166, 161, 162, 163, 165, 226, 164,
	227, 0, 167, 0, 168, 169, 0, 228, 229, 230,
	0, 0, 170, 231, 232, 0, 171, 172, 173, 174,
	0, 0, 175, 176, 177, 0, 0, 178, 179, 180,
	233, 234, 71, 0, 181, 0, 0, 0, 0, 182,
	183, 184, 185, 0, 0, 0, 0, 0, 74, 75,
	0, 76, 0, 0, 0, 0, 186, 0, 0, 0,
	0, 77, 78, 187, 188, 189, 190, 79, 191, 192,
	0, 80, 193, 194, 81, 0, 0, 195, 196, 197,
	0, 198, 0, 0, 0, 82, 83, 84, 0, 85,
	0, 86, 87, 88, 0, 0, 89, 90, 0, 0,
	0, 0, 0, 0, 91, 92, 93, 94, 199, 95,
	200, 201, 0, 96, 0, 97, 0, 0, 0, 98,
	99, 0, 100, 0, 0, 0, 202, 101, 102, 203,
	0, 0, 0, 103, 104, 204, 0, 105, 0, 106,
	0, 0, 0, 0, 107, 205, 0, 206, 0, 108,
	109, 445, 208, 0, 0, 112, 0, 110, 0, 0,
	111, 209, 210, 211, 212, 0, 213, 0, 0, 113,
	0, 114, 115, 0, 0, 214, 0, 116, 0, 0,
	117, 0, 0, 118, 0, 119, 120, 121, 122, 123,
	0, 124, 125, 128, 126, 0, 127, 0, 215, 129,
	216, 130, 131, 0, 0, 0, 0, 0, 132, 217,
	0, 133, 0, 218, 134, 135, 136, 0, 219, 137,
	220, 138, 0, 139, 140, 141, 221, 142, 143, 0,
	145, 146, 144, 147, 0, 148, 0, 149, 150, 222,
	151, 0, 152, 153, 154, 0, 223, 155, 156, 0,
	157, 158, 0, 159, 224, 225, 160, 0, 166, 161,
	162, 163, 165, 226, 164, 227, 0, 167, 0, 168,
	169, 0, 228, 229, 230, 0, 0, 170, 231, 232,
	0, 171, 172, 173, 174, 0, 0, 175, 176, 177,
	0, 0, 178, 179, 180, 233, 234, 71, 0, 181,
	0, 0, 0, 0, 182, 183, 184, 185, 0, 0,
	0, 0, 0, 74, 75, 0, 76, 0, 0, 0,
	0, 186, 0, 0, 0, 0, 77, 78, 187, 188,
	189, 190, 79, 191, 192, 0, 80, 193, 194, 81,
	0, 0, 195, 196, 406, 0, 198, 0, 0, 0,
	82, 83, 84, 0, 85, 0, 86, 87, 88, 0,
	0, 89, 90, 0, 0, 0, 0, 0, 0, 91,
	92, 93, 94, 199, 95, 200, 201, 0, 96, 0,
	97, 0, 0, 0, 98, 99, 0, 100, 0, 0,
	0, 202, 101, 102, 203, 0, 0, 0, 103, 104,
	204, 0, 105, 0, 106, 0, 0, 0, 0, 107,
	205, 0, 206, 0, 108, 109, 207, 208, 0, 0,
	112, 0, 110, 0, 0, 111, 209, 210, 211, 212,
	0, 213, 0, 0, 113, 0, 114, 115, 0, 0,
	214, 0, 116, 0, 0, 117, 0, 0, 118, 0,
	119, 120, 121, 122, 282, 0, 124, 125, 128, 126,
	0, 127, 0, 215, 129, 216, 130, 131, 0, 0,
	0, 0, 0, 132, 217, 0, 133, 0, 218, 134,
	135, 136, 0, 219, 137, 220, 138, 0, 139, 140,
	141, 221, 142, 143, 0, 145, 146, 144, 147, 0,
	148, 0, 149, 150, 222, 151, 0, 152, 153, 154,
	0, 223, 155, 156, 0, 157, 158, 0, 159, 224,
	225, 160, 0, 166, 161, 162, 163, 165, 226, 164,
	227, 0, 167, 0, 168, 169, 0, 281, 229, 230,
	0, 0, 277, 231, 232, 0, 171, 172, 173, 174,
	0, 0, 175, 176, 177, 0, 0, 178, 179, 180,
	233, 234, 71, 0, 181, 0, 0, 0, 0, 182,
	183, 184, 185, 0, 0, 0, 0, 0, 74, 75,
	0, 76, 0, 0, 0, 0, 186, 0, 0, 0,
	0, 77, 78, 187, 188, 189, 190, 79, 191, 192,
	0, 80, 193, 194, 81, 0, 0, 195, 196, 197,
	0, 198, 0, 0, 0, 82, 83, 84, 0, 85,
	0, 86, 87, 88, 0, 0, 89, 90, 0, 0,
	0, 0, 0, 0, 91, 92, 93, 94, 199, 95,
	200, 201, 0, 96, 0, 97, 0, 0, 0, 98,
	99, 0, 100, 0, 0, 0, 202, 101, 102, 203,
	0, 0, 0, 103, 104, 204, 0, 105, 0, 106,
	0, 0, 0, 0, 107, 205, 0, 206, 0, 108,
	109, 207, 208, 0, 0, 112, 0, 110, 0, 0,
	111, 209, 210, 211, 212, 0, 213, 0, 0, 113,
	0, 114, 115, 0, 0, 214, 0, 116, 0, 0,
	117, 0, 0, 118, 0, 119, 120, 121, 122, 282,
	0, 124, 125, 128, 126, 0, 127, 0, 215, 129,
	216, 130, 131, 0, 0, 0, 0, 0, 132, 217,
	0, 133, 0, 218, 134, 135, 136, 0, 219, 137,
	220, 138, 0, 139, 140, 141, 221, 142, 143, 0,
	145, 146, 144, 147, 0, 148, 0, 149, 150, 222,
	151, 0, 152, 153, 154, 0, 223, 155, 156, 0,
	157, 158, 0, 159, 224, 225, 160, 0, 166, 161,
	162, 163, 165, 226, 164, 227, 0, 167, 0, 168,
	169, 0, 281, 229, 230, 0, 0, 277, 231, 232,
	0, 171, 172, 173, 174, 0, 0, 175, 176, 177,
	0, 0, 178, 179, 180, 233, 234, 71, 0, 181,
	0, 0, 0, 0, 182, 183, 184, 185, 0, 0,
	0, 0, 0, 74, 75, 0, 76, 0, 0, 0,
	0, 186, 0, 0, 0, 0, 77, 78, 187, 188,
	189, 190, 79, 191, 192, 0, 80, 193, 194, 81,
	0, 0, 195, 196, 197, 0, 198, 0, 0, 0,
	82, 83, 84, 0, 85, 0, 86, 87, 88, 0,
	0, 89, 90, 0, 0, 0, 0, 0, 0, 91,
	92, 93, 94, 199, 95, 200, 201, 0, 96, 0,
	97, 0, 0, 0, 98, 99, 0, 100, 0, 0,
	0, 202, 101, 102, 203, 0, 0, 0, 103, 104,
	204, 0, 105, 0, 106, 0, 0, 0, 0, 107,
	205, 0, 206, 0, 108, 109, 370, 208, 0, 0,
	112, 0, 110, 0, 0, 111, 209, 210, 211, 212,
	0, 213, 0, 0, 113, 0, 114, 115, 0, 0,
	214, 0, 116, 0, 0, 117, 0, 0, 118, 0,
	119, 120, 121, 122, 123, 0, 124, 125, 128, 126,
	0, 127, 0, 215, 129, 216, 130, 131, 0, 0,
	0, 0, 0, 132, 217, 0, 133, 0, 218, 134,
	135, 136, 0, 219, 137, 220, 138, 0, 139, 140,
	141, 221, 142, 143, 0, 145, 146, 144, 147, 0,
	148, 0, 149, 150, 222, 151, 0, 152, 153, 154,
	0, 223, 155, 156, 0, 157, 158, 0, 159, 224,
	225, 160, 0, 166, 161, 162, 163, 165, 226, 164,
	227, 0, 167, 0, 168, 169, 0, 228, 229, 230,
	0, 0, 170, 231, 232, 0, 171, 172, 173, 174,
	0, 0, 175, 176, 177, 0, 0, 178, 179, 180,
	233, 234, 71, 0, 181, 0, 0, 0, 0, 182,
	183, 184, 185, 0, 0, 0, 0, 0, 74, 75,
	0, 76, 0, 0, 0, 0, 186, 0, 0, 0,
	0, 77, 78, 187, 188, 189, 190, 79, 191, 192,
	0, 80, 193, 194, 81, 0, 0, 195, 196, 197,
	0, 198, 0, 0, 0, 82, 83, 84, 0, 85,
	0, 86, 87, 88, 0, 0, 89, 90, 0, 0,
	0, 0, 0, 0, 91, 92, 93, 94, 199, 95,
	200, 201, 0, 96, 0, 97, 0, 0, 0, 98,
	99, 0, 100, 0, 0, 0, 202, 101, 102, 203,
	0, 0, 0, 103, 104, 204, 0, 105, 0, 106,
	0, 0, 0, 0, 107, 205, 0, 206, 0, 108,
	109, 367, 208, 0, 0, 112, 0, 110, 0, 0,
	111, 209, 210, 211, 212, 0, 213, 0, 0, 113,
	0, 114, 115, 0, 0, 214, 0, 116, 0, 0,
	117, 0, 0, 118, 0, 119, 120, 121, 122, 123,
	0, 124, 125, 128, 126, 0, 127, 0, 215, 129,
	216, 130, 131, 0, 0, 0, 0, 0, 132, 217,
	0, 133, 0, 218, 134, 135, 136, 0, 219, 137,
	220, 138, 0, 139, 140, 141, 221, 142, 143, 0,
	145, 146, 144, 147, 0, 148, 0, 149, 150, 222,
	151, 0, 152, 153, 154, 0, 223, 155, 156, 0,
	157, 158, 0, 159, 224, 225, 160, 0, 166, 161,
	162, 163, 165, 226, 164, 227, 0, 167, 0, 168,
	169, 0, 228, 229, 230, 0, 0, 170, 231, 232,
	0, 171, 172, 173, 174, 0, 0, 175, 176, 177,
	0, 0, 178, 179, 180, 233, 234, 71, 0, 181,
	0, 0, 0, 0, 182, 183, 184, 185, 0, 0,
	0, 0, 0, 74, 75, 0, 76, 0, 0, 0,
	0, 186, 0, 0, 0, 0, 77, 78, 187, 188,
	189, 190, 79, 191, 192, 0, 80, 193, 194, 81,
	0, 0, 195, 196, 197, 0, 198, 0, 0, 0,
	82, 83, 84, 0, 85, 0, 86, 87, 88, 0,
	0, 89, 90, 0, 0, 0, 0, 0, 0, 91,
	92, 93, 94, 199, 95, 200, 201, 0, 96, 0,
	97, 0, 0, 0, 98, 99, 0, 100, 0, 0,
	0, 202, 101, 102, 203, 0, 0, 0, 103, 104,
	204, 0, 105, 0, 106, 0, 0, 0, 0, 107,
	205, 0, 206, 0, 108, 109, 365, 208, 0, 0,
	112, 0, 110, 0, 0, 111, 209, 210, 211, 212,
	0, 213, 0, 0, 113, 0, 114, 115, 0, 0,
	214, 0, 116, 0, 0, 117, 0, 0, 118, 0,
	119, 120, 121, 122, 123, 0, 124, 125, 128, 126,
	0, 127, 0, 215, 129, 216, 130, 131, 0, 0,
	0, 0, 0, 132, 217, 0, 133, 0, 218, 134,
	135, 136, 0, 219, 137, 220, 138, 0, 139, 140,
	141, 221, 142, 143, 0, 145, 146, 144, 147, 0,
	148, 0, 149, 150, 222, 151, 0, 152, 153, 154,
	0, 223, 155, 156, 0, 157, 158, 0, 159, 224,
	225, 160, 0, 166, 161, 162, 163, 165, 226, 164,
	227, 0, 167, 0, 168, 169, 0, 228, 229, 230,
	0, 0, 170, 231, 232, 0, 171, 172, 173, 174,
	0, 0, 175, 176, 177, 0, 0, 178, 179, 180,
	233, 234, 71, 0, 181, 0, 0, 0, 0, 182,
	183, 184, 185, 0, 0, 0, 0, 0, 74, 75,
	0, 76, 0, 0, 0, 0, 186, 0, 0, 0,
	0, 77, 78, 187, 188, 189, 190, 79, 191, 192,
	0, 80, 193, 194, 81, 0, 0, 195, 196, 197,
	0, 198, 0, 0, 0, 82, 83, 84, 0, 85,
	0, 86, 87, 88, 0, 0, 89, 90, 0, 0,
	0, 0, 0, 0, 91, 92, 93, 94, 199, 95,
	200, 201, 0, 96, 0, 97, 0, 0, 0, 98,
	99, 0, 100, 0, 0, 0, 202, 101, 102, 203,
	0, 0, 0, 103, 104, 204, 0, 105, 0, 106,
	0, 0, 0, 0, 107, 205, 0, 206, 0, 108,
	109, 348, 208, 0, 0, 112, 0, 110, 0, 0,
	111, 209, 210, 211, 212, 0, 213, 0, 0, 113,
	0, 114, 115, 0, 0, 214, 0, 116, 0, 0,
	117, 0, 0, 118, 0, 119, 120, 121, 122, 123,
	0, 124, 125, 128, 126, 0, 127, 0, 215, 129,
	216, 130, 131, 0, 0, 0, 0, 0, 132, 217,
	0, 133, 0, 218, 134, 135, 136, 0, 219, 137,
	220, 138, 0, 139, 140, 141, 221, 142, 143, 0,
	145, 146, 144, 147, 0, 148, 0, 149, 150, 222,
	151, 0, 152, 153, 154, 0, 223, 155, 156, 0,
	157, 158, 0, 159, 224, 225, 160, 0, 166, 161,
	162, 163, 165, 226, 164, 227, 0, 167, 0, 168,
	169, 0, 228, 229, 230, 0, 0, 170, 231, 232,
	0, 171, 172, 173, 174, 0, 0, 175, 176, 177,
	0, 0, 178, 179, 180, 233, 234, 71, 0, 181,
	0, 0, 0, 0, 182, 183, 184, 185, 0, 0,
	0, 0, 0, 74, 75, 0, 76, 0, 0, 0,
	0, 186, 0, 0, 0, 0, 77, 78, 187, 188,
	189, 190, 79, 191, 192, 0, 80, 193, 194, 81,
	0, 0, 195, 196, 197, 0, 198, 0, 0, 0,
	82, 83, 84, 0, 85, 0, 86, 87, 88, 0,
	0, 89, 90, 0, 0, 0, 0, 0, 0, 91,
	92, 93, 94, 199, 95, 200, 201, 0, 96, 0,
	97, 0, 0, 0, 98, 99, 0, 100, 0, 0,
	0, 202, 101, 102, 203, 0, 0, 0, 103, 104,
	204, 0, 105, 0, 106, 0, 0, 0, 0, 107,
	205, 0, 206, 0, 108, 109, 207, 208, 0, 0,
	112, 0, 110, 0, 0, 111, 209, 210, 211, 212,
	0, 213, 0, 0, 113, 0, 114, 115, 0, 0,
	214, 0, 116, 0, 0, 117, 0, 0, 118, 0,
	119, 120, 121, 122, 123, 0, 124, 125, 128, 126,
	0, 127, 0, 215, 129, 216, 130, 131, 0, 0,
	0, 0, 0, 132, 217, 0, 133, 0, 218, 134,
	135, 136, 0, 219, 137, 220, 138, 0, 139, 140,
	141, 221, 329, 143, 0, 145, 146, 144, 147, 0,
	148, 0, 149, 150, 222, 151, 0, 152, 153, 154,
	0, 223, 155, 156, 0, 157, 158, 0, 159, 224,
	225, 160, 0, 166, 161, 162, 163, 165, 226, 164,
	227, 0, 167, 0, 168, 169, 0, 228, 229, 230,
	0, 0, 170, 231, 232, 0, 171, 172, 173, 174,
	0, 0, 175, 176, 177, 0, 0, 178, 179, 180,
	233, 234, 71, 0, 181, 0, 0, 0, 0, 182,
	183, 184, 185, 0, 0, 0, 0, 0, 74, 75,
	0, 76, 0, 0, 0, 0, 186, 0, 0, 0,
	0, 77, 78, 187, 188, 189, 190, 79, 191, 192,
	0, 80, 193, 194, 81, 0, 0, 195, 196, 197,
	0, 198, 0, 0, 0, 82, 83, 84, 0, 85,
	0, 86, 87, 88, 0, 0, 89, 90, 0, 0,
	0, 0, 0, 0, 91, 92, 93, 94, 199, 95,
	200, 201, 0, 96, 0, 97, 0, 0, 0, 98,
	99, 0, 100, 0, 0, 0, 202, 101, 102, 203,
	0, 0, 0, 103, 104, 204, 0, 105, 0, 106,
	0, 0, 0, 0, 107, 205, 0, 206, 0, 108,
	109, 207, 208, 0, 0, 112, 0, 110, 0, 0,
	111, 209, 210, 211, 212, 0, 213, 0, 0, 113,
	0, 114, 115, 0, 0, 214, 0, 116, 0, 0,
	274, 0, 0, 118, 0, 119, 120, 121, 122, 282,
	0, 124, 125, 128, 126, 0, 127, 0, 215, 129,
	216, 130, 131, 0, 0, 0, 0, 0, 132, 217,
	0, 133, 0, 218, 134, 135, 136, 0, 219, 137,
	220, 138, 0, 139, 140, 141, 221, 142, 143, 0,
	145, 146, 144, 147, 0, 148, 0, 149, 150, 276,
	151, 0, 152, 153, 154, 0, 223, 155, 275, 0,
	157, 158, 0, 159, 224, 225, 160, 0, 166, 161,
	162, 163, 165, 226, 164, 227, 0, 167, 0, 168,
	169, 0, 281, 229, 230, 0, 0, 277, 231, 232,
	0, 171, 172, 173, 174, 0, 0, 175, 176, 177,
	0, 0, 178, 179, 180, 233, 234, 71, 0, 181,
	0, 0, 0, 0, 182, 183, 184, 185, 0, 0,
	0, 0, 0, 74, 75, 0, 76, 0, 0, 0,
	0, 186, 0, 0, 0, 0, 77, 78, 187, 188,
	189, 190, 79, 191, 192, 0, 80, 193, 194, 81,
	0, 0, 195, 196, 197, 0, 198, 0, 0, 0,
	82, 83, 84, 0, 85, 0, 86, 87, 88, 0,
	0, 89, 90, 0, 0, 0, 0, 0, 0, 91,
	92, 93, 94, 199, 95, 200, 201, 0, 96, 0,
	97, 0, 0, 0, 98, 99, 0, 100, 0, 0,
	0, 202, 101, 102, 203, 0, 0, 0, 103, 104,
	204, 0, 105, 0, 106, 0, 0, 0, 0, 107,
	205, 0, 206, 0, 108, 109, 207, 208, 0, 0,
	112, 0, 110, 0, 0, 111, 209, 210, 211, 212,
	0, 213, 0, 0, 113, 0, 114, 115, 0, 0,
	214, 0, 116, 0, 0, 117, 0, 0, 118, 0,
	119, 120, 121, 122, 123, 0, 124, 125, 128, 126,
	0, 127, 0, 215, 129, 216, 130, 131, 0, 0,
	0, 0, 0, 132, 217, 0, 133, 0, 218, 134,
	135, 0, 0, 219, 137, 220, 138, 0, 139, 0,
	141, 221, 142, 143, 0, 145, 146, 144, 147, 0,
	148, 0, 149, 150, 222, 0, 0, 152, 153, 154,
	0, 223, 155, 156, 0, 157, 158, 0, 159, 224,
	225, 160, 0, 166, 161, 162, 163, 165, 226, 164,
	227, 0, 167, 0, 168, 169, 0, 228, 229, 230,
	0, 0, 170, 231, 232, 0, 171, 172, 173, 174,
	0, 0, 175, 176, 177, 0, 0, 178, 179, 180,
	233, 234, 0, 0, 181, 0, 0, 0, 0, 182,
	183, 184, 185, 840, 841, 0, 860, 861, 862, 870,
	871, 872, 0, 0, 0, 0, 0, 0, 0, 863,
	0, 0, 0, 0, 0, 0, 843, 0, 874, 840,
	841, 0, 860, 861, 862, 870, 871, 872, 0, 0,
	0, 0, 0, 0, 0, 863, 0, 842, 0, 0,
	0, 0, 843, 857, 874, 0, 0, 0, 840, 841,
	0, 860, 861, 862, 870, 871, 872, 0, 0, 0,
	0, 0, 0, 842, 863, 0, 0, 0, 0, 857,
	0, 843, 0, 874, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 848, 842, 0, 0, 0, 0, 0, 857, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 867, 875,
	0, 0, 0, 0, 0, 0, 0, 848, 0, 0,
	0, 0, 0, 873, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 865, 867, 875, 0, 0, 0, 858,
	0, 0, 0, 0, 0, 0, 848, 0, 0, 873,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 865,
	0, 864, 0, 867, 875, 858, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 873, 0,
	0, 0, 0, 0, 0, 0, 0, 864, 865, 0,
	0, 0, 0, 0, 858, 0, 859, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 868, 0, 0,
	0, 0, 0, 0, 0, 0, 864, 0, 0, 0,
	0, 0, 859, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 868, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 859, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 868, 866, 0, 0, 854, 855, 856, 0,
	853, 850, 851, 852, 844, 845, 846, 847, 849, 0,
	869, 0, 0, 0, 1801, 0, 0, 0, 0, 866,
	0, 0, 854, 855, 856, 0, 853, 850, 851, 852,
	844, 845, 846, 847, 849, 0, 869, 0, 1358, 1359,
	1799, 1376, 1377, 1378, 0, 0, 0, 0, 866, 0,
	0, 854, 855, 856, 1501, 853, 850, 851, 852, 844,
	845, 846, 847, 849, 0, 869, 0, 840, 841, 1780,
	860, 861, 862, 870, 871, 872, 0, 0, 0, 0,
	0, 0, 0, 863, 0, 0, 0, 0, 1373, 0,
	843, 0, 874, 840, 841, 0, 860, 861, 862, 870,
	871, 872, 0, 0, 0, 0, 0, 0, 0, 863,
	0, 842, 0, 0, 0, 0, 843, 857, 874, 0,
	0, 0, 840, 841, 0, 860, 861, 862, 870, 871,
	872, 0, 0, 0, 0, 0, 1364, 842, 863, 0,
	0, 0, 0, 857, 0, 843, 0, 874, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 848, 842, 0, 1379, 0,
	0, 0, 857, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 867, 875, 1374, 0, 0, 0, 0, 0,
	0, 848, 0, 0, 0, 0, 0, 873, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 865, 867, 875,
	0, 0, 0, 858, 0, 0, 0, 0, 0, 0,
	848, 0, 0, 873, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 865, 0, 864, 0, 867, 875, 858,
	0, 1375, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 873, 0, 0, 0, 0, 0, 0, 0,
	0, 864, 865, 0, 0, 0, 0, 0, 858, 0,
	859, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 868, 0, 0, 0, 0, 0, 0, 0, 0,
	864, 0, 0, 0, 0, 0, 859, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 868, 0, 0,
	0, 1370, 1371, 1372, 0, 1369, 1366, 1367, 1368, 1360,
	1361, 1362, 1363, 1365, 0, 859, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 868, 866, 0, 0,
	854, 855, 856, 0, 853, 850, 851, 852, 844, 845,
	846, 847, 849, 0, 869, 0, 0, 0, 1755, 0,
	0, 0, 0, 866, 0, 0, 854, 855, 856, 0,
	853, 850, 851, 852, 844, 845, 846, 847, 849, 0,
	869, 0, 1358, 1359, 1750, 1376, 1377, 1378, 0, 0,
	0, 0, 866, 0, 0, 854, 855, 856, 0, 853,
	850, 851, 852, 844, 845, 846, 847, 849, 0, 869,
	0, 840, 841, 1746, 860, 861, 862, 870, 871, 872,
	0, 0, 0, 0, 0, 0, 0, 863, 0, 0,
	0, 0, 1373, 0, 843, 0, 874, 840, 841, 0,
	860, 861, 862, 870, 871, 872, 0, 0, 0, 0,
	0, 0, 0, 863, 0, 842, 0, 0, 0, 0,
	843, 857, 874, 0, 0, 0, 840, 841, 0, 860,
	861, 862, 870, 871, 872, 0, 0, 0, 0, 0,
	1364, 842, 863, 0, 0, 0, 0, 857, 0, 843,
	0, 874, 0, 0, 0, 0, 0, 0, 1380, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 848,
	842, 0, 1379, 0, 0, 0, 857, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 867, 875, 1374, 0,
	0, 0, 0, 0, 0, 848, 0, 0, 0, 0,
	0, 873, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 865, 867, 875, 0, 0, 0, 858, 0, 0,
	0, 0, 0, 0, 848, 0, 0, 873, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 865, 0, 864,
	0, 867, 875, 858, 0, 1375, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 873, 0, 0, 0,
	0, 0, 0, 0, 0, 864, 865, 0, 0, 0,
	0, 0, 858, 0, 859, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 868, 0, 0, 0, 0,
	0, 0, 0, 0, 864, 0, 0, 0, 0, 0,
	859, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 868, 0, 0, 0, 1370, 1371, 1372, 0, 1369,
	1366, 1367, 1368, 1360, 1361, 1362, 1363, 1365, 0, 859,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	868, 866, 0, 0, 854, 855, 856, 0, 853, 850,
	851, 852, 844, 845, 846, 847, 849, 0, 869, 0,
	0, 0, 1682, 0, 0, 0, 0, 866, 0, 0,
	854, 855, 856, 0, 853, 850, 851, 852, 844, 845,
	846, 847, 849, 0, 869, 0, 1358, 1359, 1681, 1376,
	1377, 1378, 0, 0, 0, 0, 866, 0, 0, 854,
	855, 856, 0, 853, 850, 851, 852, 844, 845, 846,
	847, 849, 0, 869, 0, 840, 841, 1589, 860, 861,
	862, 870, 871, 872, 0, 0, 0, 0, 0, 0,
	0, 863, 0, 0, 0, 0, 1373, 0, 843, 0,
	874, 840, 841, 0, 860, 861, 862, 870, 871, 872,
	0, 0, 0, 0, 0, 0, 0, 863, 0, 842,
	0, 0, 0, 0, 843, 857, 874, 0, 0, 0,
	840, 841, 0, 860, 861, 862, 870, 871, 872, 0,
	0, 0, 0, 0, 1364, 842, 863, 0, 0, 0,
	0, 857, 0, 843, 0, 874, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 848, 842, 0, 1379, 0, 0, 0,
	857, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	867, 875, 1374, 0, 0, 0, 0, 0, 0, 848,
	0, 0, 0, 0, 0, 873, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 865, 867, 875, 0, 0,
	0, 858, 0, 0, 0, 0, 0, 0, 848, 0,
	0, 873, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 865, 0, 864, 0, 867, 875, 858, 0, 1375,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	873, 0, 0, 0, 0, 0, 0, 0, 0, 864,
	865, 0, 0, 0, 0, 0, 858, 0, 859, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 868,
	0, 0, 0, 0, 0, 0, 0, 0, 864, 0,
	0, 0, 0, 0, 859, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 868, 0, 0, 0, 1370,
	1371, 1372, 0, 1369, 1366, 1367, 1368, 1360, 1361, 1362,
	1363, 1365, 0, 859, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 868, 866, 0, 0, 854, 855,
	856, 0, 853, 850, 851, 852, 844, 845, 846, 847,
	849, 0, 869, 0, 0, 0, 1523, 0, 0, 0,
	0, 866, 0, 0, 854, 855, 856, 0, 853, 850,
	851, 852, 844, 845, 846, 847, 849, 0, 869, 0,
	0, 0, 1507, 0, 0, 0, 0, 0, 0, 0,
	866, 0, 0, 854, 855, 856, 0, 853, 850, 851,
	852, 844, 845, 846, 847, 849, 0, 869, 0, 840,
	841, 1129, 860, 861, 862, 870, 871, 872, 0, 0,
	0, 0, 0, 0, 0, 863, 0, 0, 0, 0,
	0, 0, 843, 0, 874, 840, 841, 0, 860, 861,
	862, 870, 871, 872, 0, 0, 0, 0, 0, 0,
	0, 863, 0, 842, 0, 0, 0, 0, 843, 857,
	874, 0, 0, 0, 840, 841, 0, 860, 861, 862,
	870, 871, 872, 0, 0, 0, 0, 0, 0, 842,
	863, 0, 0, 0, 0, 857, 0, 843, 0, 874,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 848, 842, 0,
	0, 0, 0, 0, 857, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 867, 875, 0, 0, 0, 0,
	0, 0, 0, 848, 1869, 0, 0, 0, 0, 873,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 865,
	867, 875, 0, 0, 0, 858, 0, 0, 0, 0,
	0, 0, 848, 0, 1390, 873, 0, 1389, 0, 0,
	0, 0, 0, 0, 0, 865, 0, 864, 0, 867,
	875, 858, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 873, 0, 0, 0, 0, 0,
	0, 0, 0, 864, 865, 0, 0, 0, 0, 0,
	858, 0, 859, 0, 0, 0, 1868, 0, 0, 0,
	0, 0, 0, 868, 0, 0, 720, 714, 737, 708,
	728, 727, 864, 0, 710, 709, 0, 0, 859, 739,
	738, 0, 0, 0, 0, 0, 0, 0, 0, 868,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 859, 0, 0,
	733, 0, 725, 724, 0, 0, 0, 0, 868, 866,
	0, 723, 854, 855, 856, 0, 853, 850, 851, 852,
	844, 845, 846, 847, 849, 0, 869, 722, 1437, 0,
	0, 0, 0, 0, 0, 866, 0, 0, 854, 855,
	856, 0, 853, 850, 851, 852, 844, 845, 846, 847,
	849, 0, 869, 715, 716, 717, 718, 0, 736, 0,
	0, 0, 0, 0, 866, 0, 0, 854, 855, 856,
	0, 853, 850, 851, 852, 844, 845, 846, 847, 849,
	0, 869, 840, 841, 0, 860, 861, 862, 870, 871,
	872, 0, 726, 0, 0, 0, 0, 0, 863, 0,
	0, 0, 877, 1062, 0, 843, 0, 874, 840, 841,
	0, 860, 861, 862, 870, 871, 872, 0, 721, 0,
	0, 0, 0, 0, 863, 0, 842, 0, 876, 0,
	0, 843, 857, 874, 0, 0, 0, 0, 712, 0,
	0, 0, 0, 0, 0, 0, 719, 713, 0, 0,
	0, 0, 842, 0, 0, 741, 0, 0, 857, 0,
	1063, 0, 711, 0, 0, 734, 735, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	848, 0, 0, 0, 0, 0, 0, 0, 740, 0,
	0, 0, 0, 0, 0, 0, 0, 867, 875, 0,
	0, 0, 0, 0, 0, 0, 848, 0, 0, 0,
	0, 0, 873, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 865, 867, 875, 0, 0, 0, 858, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 873, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 865, 0,
	864, 0, 0, 0, 858, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 864, 0, 0, 0,
	0, 0, 0, 0, 0, 859, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 868, 0, 840, 841,
	0, 860, 861, 862, 870, 871, 872, 0, 0, 0,
	0, 859, 0, 0, 863, 0, 0, 0, 0, 0,
	0, 843, 868, 874, 840, 841, 0, 860, 861, 862,
	870, 871, 872, 0, 0, 0, 0, 0, 0, 0,
	863, 0, 842, 0, 0, 0, 0, 843, 857, 874,
	0, 0, 866, 0, 0, 854, 855, 856, 0, 853,
	850, 851, 852, 844, 845, 846, 847, 849, 842, 869,
	0, 0, 0, 0, 857, 0, 0, 0, 866, 0,
	0, 854, 855, 856, 0, 853, 850, 851, 852, 844,
	845, 846, 847, 849, 0, 869, 848, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 867, 875, 0, 0, 0, 0, 0,
	0, 0, 848, 0, 0, 0, 0, 0, 873, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 865, 867,
	875, 0, 0, 0, 858, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 873, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 865, 0, 864, 324, 0, 0,
	858, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 864, 0, 0, 0, 0, 0, 0, 0,
	0, 859, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 868, 0, 840, 841, 0, 860, 861, 862,
	870, 871, 872, 0, 0, 0, 0, 859, 0, 0,
	863, 0, 0, 0, 0, 0, 0, 843, 868, 874,
	840, 841, 0, 860, 861, 862, 870, 871, 872, 0,
	0, 0, 0, 0, 0, 0, 863, 1517, 842, 0,
	1391, 0, 0, 843, 857, 874, 0, 0, 866, 0,
	0, 854, 855, 856, 0, 853, 850, 851, 852, 844,
	845, 846, 847, 849, 842, 869, 0, 0, 0, 0,
	857, 0, 0, 0, 866, 0, 0, 854, 855, 856,
	0, 853, 850, 851, 852, 844, 845, 846, 847, 849,
	0, 869, 848, 0, 0, 0, 0, 1396, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 867,
	875, 0, 0, 0, 0, 0, 0, 0, 848, 0,
	0, 0, 0, 0, 873, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 865, 867, 875, 0, 0, 0,
	858, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	873, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	865, 0, 864, 0, 0, 0, 858, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 864, 0,
	0, 0, 0, 0, 0, 0, 0, 859, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 868, 0,
	840, 841, 0, 860, 861, 862, 870, 871, 872, 0,
	0, 0, 0, 859, 0, 0, 863, 0, 0, 0,
	0, 0, 0, 843, 868, 874, 840, 841, 0, 860,
	861, 862, 870, 871, 872, 0, 0, 0, 0, 0,
	0, 0, 863, 0, 842, 0, 1350, 0, 0, 843,
	857, 874, 0, 0, 866, 0, 0, 854, 855, 856,
	0, 853, 850, 851, 852, 844, 845, 846, 847, 849,
	842, 869, 0, 0, 0, 0, 857, 0, 0, 0,
	866, 0, 0, 854, 855, 856, 0, 853, 850, 851,
	852, 844, 845, 846, 847, 849, 0, 869, 848, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 867, 875, 0, 0, 0,
	0, 0, 0, 0, 848, 0, 0, 0, 0, 0,
	873, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	865, 867, 875, 0, 0, 0, 858, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 873, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 865, 0, 864, 0,
	0, 0, 858, 0, 0, 0, 0, 0, 0, 1356,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 864, 0, 0, 0, 0, 0,
	0, 0, 0, 859, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 868, 0, 840, 841, 0, 860,
	861, 862, 870, 871, 872, 0, 0, 0, 0, 859,
	0, 0, 863, 0, 0, 0, 0, 0, 0, 843,
	868, 874, 840, 841, 0, 860, 861, 862, 870, 871,
	872, 0, 0, 0, 0, 0, 0, 0, 863, 0,
	842, 0, 0, 0, 0, 843, 857, 874, 0, 0,
	866, 0, 0, 854, 855, 856, 0, 853, 850, 851,
	852, 844, 845, 846, 847, 849, 842, 869, 0, 0,
	0, 0, 857, 0, 0, 0, 866, 0, 0, 854,
	855, 856, 0, 853, 850, 851, 852, 844, 845, 846,
	847, 849, 0, 869, 848, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 867, 875, 0, 0, 0, 0, 0, 0, 0,
	848, 0, 0, 0, 0, 0, 873, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 865, 867, 875, 0,
	0, 0, 858, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 873, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 865, 0, 864, 0, 0, 0, 858, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 859,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	868, 0, 840, 841, 0, 860, 861, 862, 870, 871,
	872, 0, 0, 0, 0, 859, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 843, 868, 874, 840, 841,
	0, 860, 861, 862, 870, 871, 872, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 842, 0, 0, 0,
	0, 843, 857, 874, 0, 0, 866, 0, 0, 854,
	855, 856, 0, 853, 850, 851, 852, 844, 845, 846,
	847, 849, 842, 869, 0, 0, 0, 0, 857, 0,
	0, 0, 866, 0, 0, 854, 855, 856, 0, 853,
	850, 851, 852, 844, 845, 846, 847, 849, 0, 869,
	848, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 840, 841, 0, 0, 867, 875, 870,
	871, 872, 0, 0, 0, 0, 848, 0, 0, 0,
	0, 0, 873, 0, 0, 0, 843, 0, 874, 0,
	0, 0, 865, 867, 875, 0, 0, 0, 858, 0,
	0, 0, 0, 0, 0, 0, 0, 842, 0, 0,
	0, 0, 0, 857, 0, 0, 0, 0, 865, 0,
	0, 0, 0, 0, 858, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 859, 0, 0, 0, 0,
	0, 848, 0, 0, 0, 0, 868, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 867, 875,
	0, 859, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 868, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 865, 0, 0, 0, 0, 0, 858,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 866, 0, 0, 854, 855, 856, 0, 853,
	850, 851, 852, 844, 845, 846, 847, 849, 0, 869,
	0, 0, 0, 0, 0, 0, 0, 0, 866, 0,
	0, 854, 855, 856, 0, 853, 850, 851, 852, 844,
	845, 846, 847, 849, 0, 869, 859, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 868, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 866, 0, 0, 0, 0, 0, 0,
	853, 850, 851, 852, 844, 845, 846, 847, 849, 0,
	869,
}
var sqlPact = [...]int{

	2534, -1000, 30, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 867, 16128, -1000, -1000,
	-1000, -1000, -1000, 642, 856, 442, 16128, 16128, 15863, 1228,
	1228, 17453, -1000, -1000, 20368, -1000, 2414, 501, 504, 501,
	501, 497, 17453, 609, 640, 114, -1000, 665, 6, 20103,
	16128, 1323, 25, 14803, 351, 2534, 15598, 19838, 16128, 278,
	34, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1140, 1061, 1060, 14803, 19573,
	19308, 19043, -1000, 9992, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 607, 363, 358, -1000, 15333, -1000, 880, -1000,
	24, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 876,
	-1000, 16128, -1000, -1000, 18778, 18513, 353, 811, -1000, -1000,
	560, 419, 1341, -1000, 46, -1000, -1000, 1139, -1000, 860,
	1138, 1135, 1130, 1129, 1127, 1123, 409, 825, -1000, 538,
	811, -1000, 811, -1000, -1000, -1000, 563, 17453, -1000, 14803,
	-1000, 18248, 16128, 1075, 17983, -1000, 665, -1000, -1000, -1000,
	883, 1320, 1320, 1320, 1361, 208, 199, 114, 17, 16128,
	-1000, 352, 17, 6941, 6941, -1000, -1000, 351, -1000, 377,
	12943, -1000, 7497, -1000, 851, 1220, 439, 685, 1197, -119,
	717, 635, 12138, 34, -1000, -1000, -1000, 8890, 4082, 14803,
	16128, 16128, 651, 17718, -1000, 1193, 121, 1190, -1000, 104,
	1187, -1000, 10, -1000, -1000, -1000, -1000, -1000, -1000, 351,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 15068, 1409, 22470, -1000, 8890, -1000,
	-1000, 13211, 664, 13211, -1000, -1000, 1408, -1000, 8890, -1000,
	23, 21, 984, 982, 10535, 10270, 1267, 1918, -1000, -1000,
	-1000, 42, 4358, 16128, 1154, 13211, 16128, 16128, 16128, 16128,
	16128, 16128, -1000, 981, -1000, 16128, -1000, 20, 19, -1000,
	17453, -1000, 164, -1000, 375, 946, 147, 17188, 1230, 941,
	-1000, 883, -1000, 889, 977, 8056, 8890, 114, -1000, -1000,
	114, 114, 8890, -1000, -1000, 16128, 17, 1407, 16128, 90,
	-1000, 22648, -1000, -1000, 8890, 8890, 8890, 8890, 8890, 812,
	-1000, -1000, -1000, 5210, -1000, -1000, 34, 349, 368, -1000,
	-1000, 348, 34, -1000, -1000, -1000, -1000, 347, 1493, 466,
	-1000, -1000, -1000, 8890, 423, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1153, 345, 344, -1000, -1000, -1000,
	-1000, 343, 318, 317, 316, 315, 314, 310, 309, 307,
	303, 299, 296, 295, 293, 768, -1000, 454, -1000, -1000,
	454, 454, -1000, 281, 281, 283, -1000, -1000, -1000, -1000,
	281, -1000, -1000, -1000, 434, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 291, 90, -1000, -1000, -1000, 16128, -3, -1000,
	23486, -1000, -20, 721, -1000, 14273, 1317, 1316, 1287, 14803,
	1393, 1391, 545, 16128, 16128, 544, -1000, 1114, -5, -1000,
	-1000, 2294, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 441,
	258, 1404, 258, 12407, -1000, 16128, 16128, -1000, 16128, -1000,
	-1000, 16128, -1000, 16128, 16128, 170, 13743, 705, 1185, 6,
	-7, -1000, 1414, -1000, -1000, -1000, -1000, 67, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 283, 768, 281, 281, 281, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 434, -1000, -1000, 454, 454, 454,
	-1000, -1000, -9, 23486, 541, 1, 13477, 16128, -1000, 35,
	-1000, -1000, 1113, 496, -11, 726, 1041, 790, -1000, -1000,
	-1000, -1000, 14, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1455, -1000, -1000, -1000, -1000, 1470, 14,
	-1000, -1000, -1000, -1000, -1000, 1492, -1000, -1000, -1000, 4358,
	-1000, -1000, -1000, 16128, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 726, 1041, -1000, -1000, 14803, 14008, 6,
	1184, 1400, 16128, 854, 937, -1000, -1000, 394, 1180, -1000,
	-1000, -1000, -1000, 23486, -1000, 23486, 671, 1064, -1000, 1064,
	13, -1000, 22622, -1000, 279, -13, -1000, 441, 6941, 11870,
	22470, 22470, 16128, 595, 8890, 8890, 8890, 8890, 8890, 8890,
	8890, 8890, 8890, 8890, 8890, 8890, 8890, 8890, 8890, 8890,
	8890, 8890, 8890, 8890, 8890, 8890, 1340, 8890, 539, 8890,
	8890, 8890, 8890, 668, 827, 256, 4358, -1000, 661, 661,
	661, 23702, 23702, 290, 18, 21990, 3, 34, -1000, -1000,
	6660, 6362, 34, 4634, -1000, 819, 1469, 452, 23486, 1160,
	1097, 277, 198, 194, 8890, 8890, 1019, 8890, 9168, 8890,
	8890, 5488, 8890, 8890, 8890, 8890, 8890, 8890, -1000, 275,
	-1000, -1000, -1000, -1000, 1467, -1000, -1000, 1466, -1000, 590,
	587, 1465, 441, 193, 7497, -1000, 705, 16128, 16128, 16128,
	-1000, -1000, 931, 16923, -1000, 22470, 16128, -1000, 271, 270,
	1009, 991, 16128, 16128, 16658, 16393, 16128, 844, 262, 261,
	16128, 677, -1000, 16128, 630, 1111, 16128, -1000, 8890, 670,
	8890, 793, -1000, 11333, 460, 16128, 682, 79, -1000, -1000,
	-1000, 392, 16128, -1000, -1000, -1000, 121, -1000, 104, -1000,
	-1000, 14803, -1000, -1000, -1000, -1000, -1000, -1000, 22470, 370,
	369, -1000, 1463, 537, -1000, 535, 533, 529, -1000, 257,
	-1000, 8890, 16128, 13477, 1, -4, -1000, -1000, 16128, 1041,
	-1000, -1000, -1000, -1000, 690, -1000, 751, -1000, 10800, -1000,
	-1000, -1000, 819, -1000, -25, -1000, -1000, -1000, -1000, 181,
	-18, -1000, -1000, -1000, -1000, -1000, 16128, 240, 16128, -1000,
	16128, 6, -27, 16128, 1178, 1479, 16128, -1000, -1000, -1000,
	8890, -1000, -1000, -1000, 6, 16128, -1000, 1096, -1000, -100,
	1786, -143, 14538, -1000, 11065, -1000, -1000, -1000, 406, 961,
	961, 578, 578, 578, 578, 1985, 1985, 1017, 3253, 23813,
	23813, 23813, 1881, 410, 410, 23813, 23813, 23813, 23702, 23512,
	196, 8890, 8890, 526, 822, 256, 196, 8890, 1442, 196,
	196, 196, -1000, 987, -1000, -1000, -1000, 1110, 252, 9168,
	9168, -1000, -1000, -1000, 5210, -1000, -1000, 251, 8890, -1000,
	8890, -33, -66, -1000, -1000, -40, -1000, -1000, -22, 8890,
	8890, 8890, 179, -1000, 162, 629, -1000, 8890, 814, 250,
	248, 8890, -1000, -1000, 23296, 3498, 161, 1109, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 159, 23270, 158, 21562, -1000,
	9168, 9168, 9168, 5210, 246, 152, 22334, -124, 23080, 7775,
	7775, 7775, 151, 23054, 8890, -124, 3092, 3063, 3030, -46,
	-50, -52, 1462, -56, 138, 404, 401, 137, 1096, -1000,
	-1000, -1000, -1000, 525, 524, 1177, -1000, 928, -1000, 691,
	8890, 16128, 241, 237, 778, -1000, 1175, 958, 1173, 958,
	-1000, -20, 703, 8890, 8890, -1000, 522, -1000, -1000, 627,
	-1000, 22279, -1000, 6941, 23486, -1000, 680, 1298, -67, -1000,
	-1000, 6941, 441, 12407, 11870, 7497, -69, -1000, -1000, 705,
	-1000, 531, 1457, 134, 935, 904, 759, 646, 1453, 23486,
	-25, -1000, -25, -1000, -1000, -1000, -1000, -1000, -1000, 16128,
	1077, 14008, 235, 16128, 232, 350, -1000, -1000, 228, 16128,
	-1000, 1230, -1000, 133, -1000, 1091, 1334, -1000, 11870, 882,
	1038, 1037, 11870, 1071, 820, 820, 820, -1000, 14538, 3795,
	-1000, -1000, 16128, 227, 11601, 132, 1786, 8890, 196, 196,
	8890, 9168, 9168, -1000, 196, -1000, -1000, -1000, -1000, 1108,
	226, 8890, 22470, 21218, 3447, -73, 6064, -35, 21961, -1000,
	-1000, 368, -1000, 117, 7219, -1000, 22838, -15, -15, -1000,
	1477, 1226, -1000, 8890, 22864, -1000, 12675, 446, 824, 21935,
	22470, 22470, -1000, 8890, -1000, 1107, 8890, -1000, 22470, 22470,
	9168, 9168, 9168, 9168, 9168, 9168, 9168, 9168, 9168, 9168,
	9168, 9168, 9168, 9168, 9168, 9168, 9168, 9168, 9168, 912,
	9168, 1439, 1439, 1439, -37, 5766, -1000, 1147, 1107, 8890,
	8890, 22470, 112, 106, 102, -1000, 8890, -124, 8890, 8890,
	8890, -1000, -1000, -1000, 100, -1000, 1447, -1000, -1000, -1000,
	-1000, 1091, 16128, 16128, 16128, 1169, 2013, -1000, 21646, -74,
	16128, 16128, -1000, 1022, 1028, 487, 16128, -1000, 16128, -1000,
	16128, 16128, 16128, -80, -82, 16128, -1000, -1000, -57, 6941,
	146, 6, -57, 670, -1000, -51, -1000, 391, -1000, 366,
	365, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 99,
	-1000, -1000, 1079, -1000, 9724, 224, 16128, 14008, 6, 9724,
	845, -1000, -1000, 438, 8890, 8890, 1786, 611, 11870, 11870,
	1309, 1034, 11870, -1000, -1000, -1000, -1000, -1000, -1000, 1018,
	223, 16128, 14538, 520, 196, 3152, 2627, 8890, 22470, 23728,
	-84, 8890, 8890, -1000, -86, -1000, 8890, -1000, -1000, 1476,
	8890, 98, 97, 91, -1000, -1000, 23486, 8890, -1000, -1000,
	20633, 8890, 89, -1000, 81, 77, 23486, 1147, 23486, -1000,
	-1000, 534, 534, 1439, 1439, 1439, 1439, 1073, 1073, 1125,
	750, 346, 346, 346, 602, 445, 445, 346, 346, 346,
	1104, 978, 222, 21906, 8890, -88, -1000, -1000, -1000, 23486,
	23486, 75, -1000, -1000, -1000, -124, 2597, 21617, 21591, -1000,
	74, 438, -1000, -1000, -1000, 16128, -1000, 16128, -1000, 16128,
	16128, 1105, 919, -1000, -1000, 988, 221, 9168, 16128, -1000,
	796, -90, -92, 905, -1000, 899, 8890, -1000, 22470, 958,
	958, -1000, 517, 516, -1000, -1000, -1000, -57, 1235, 16128,
	1286, -1000, -1000, 219, -1000, -1000, -1000, 794, -99, -1000,
	205, 1307, 8890, -1000, -1000, 217, 9724, -103, 73, -1000,
	-105, 16128, -1000, 16128, 23486, -124, 523, -1000, 1309, -1000,
	216, 8890, 11870, -1000, -158, -1000, 389, -1000, 16128, -107,
	-1000, 8890, 8890, 23728, -113, -1000, 196, 196, -1000, 21302,
	-1000, 22838, -1000, -1000, -1000, 23486, 791, -1000, 21273, -1000,
	-1000, -1000, -1000, 9168, 1103, 214, 22470, 21247, -1000, -1000,
	8890, -1000, -1000, -1000, -1000, -1000, 1040, -1000, -1000, 16128,
	923, -1000, -1000, 8890, 21906, 213, 1077, 212, -1000, -1000,
	-1000, 724, -1000, -1000, 23486, 1315, -1000, -1000, 16128, 16128,
	586, -114, 16128, -1000, -1000, 4932, 16128, 796, 9724, 1313,
	34, 16128, 1313, 20958, 4634, -120, -1000, 1077, 796, 211,
	-61, -1000, 1398, 1473, -1000, 16128, 23486, -1000, 1018, -1000,
	4358, -125, -1000, 196, 196, -1000, -1000, 72, 824, 1331,
	-1000, 336, 9168, 22470, -126, -1000, 20929, -1000, -1000, 1168,
	20903, 964, 16128, -1000, 16128, 16128, 470, 16128, -1000, -1000,
	649, -1000, 441, -1000, 210, 1077, -1000, -1000, -1000, -1000,
	1307, -22, 796, -1000, 1077, 9724, 16128, 206, -1000, -130,
	-1000, -1000, -1000, -1000, 720, 8890, 336, -131, -1000, -1000,
	1115, -1000, 832, 764, 69, -132, 147, -1000, 8890, -1000,
	12407, -1000, 16128, -1000, 1313, 65, 1077, -1000, -138, -1000,
	-1000, -1000, 57, 8612, 8612, -124, -1000, 16128, -1000, 841,
	836, 648, -1000, -1000, -1000, -1000, -1000, 964, 23486, -121,
	-148, -1000, -1000, -1000, 796, -1000, -1000, -1000, 9446, 879,
	673, 22305, -1000, -1000, -1000, 1243, -1000, 474, 927, 927,
	832, -1000, 913, 1077, 1420, -1000, -1000, -1000, -1000, -1000,
	-1000, 1427, -1000, -1000, 1002, -1000, -1000, -1000, -1000, -1000,
	-1000, 8334, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1757, 1755, 1339, 125, 1754, 124, 1753, 1745, 1744,
	1743, 1739, 105, 122, 118, 126, 1732, 97, 1730, 1729,
	1728, 99, 1727, 1726, 1725, 123, 1720, 1712, 1711, 1708,
	1705, 1703, 93, 36, 144, 2007, 139, 1701, 1699, 1698,
	14, 100, 73, 1697, 72, 1696, 59, 94, 110, 1985,
	33, 1694, 1692, 132, 31, 16, 24, 96, 142, 109,
	134, 1691, 1689, 1688, 48, 1687, 3, 1686, 1685, 12,
	54, 18, 1684, 41, 20, 1682, 1681, 127, 1679, 71,
	98, 108, 26, 116, 13, 1676, 62, 11, 75, 1675,
	43, 1674, 51, 78, 130, 1670, 50, 155, 56, 32,
	57, 1666, 1660, 1653, 1651, 80, 1650, 89, 70, 1647,
	1646, 83, 1642, 131, 133, 1641, 1640, 117, 1639, 1635,
	1633, 706, 1631, 1627, 343, 1624, 6, 46, 65, 4,
	107, 106, 25, 1623, 22, 1618, 690, 598, 19, 1615,
	55, 47, 87, 44, 74, 27, 1614, 1609, 102, 1608,
	1599, 1597, 1594, 1593, 79, 1591, 76, 137, 66, 63,
	82, 23, 40, 84, 101, 145, 103, 1590, 1588, 115,
	1587, 285, 1586, 1585, 1005, 111, 1584, 1582, 1579, 787,
	775, 529, 260, 1577, 1574, 355, 303, 1573, 1571, 113,
	1570, 1569, 138, 136, 35, 1568, 119, 1567, 90, 1566,
	0, 58, 34, 1557, 120, 77, 1534, 1533, 1532, 1531,
	29, 2, 10, 7, 8, 5, 30, 21, 1530, 1527,
	128, 85, 1525, 147, 1524, 1522, 1518, 49, 1515, 17,
	1514, 15, 1513, 1510, 9, 1, 143, 1509, 104, 1508,
	1407, 1506, 140, 1505, 1499, 1408, 81,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 4, 4, 42,
	42, 41, 41, 41, 41, 41, 41, 41, 41, 41,
	41, 41, 41, 41, 41, 41, 39, 39, 44, 44,
	44, 43, 43, 38, 38, 5, 5, 5, 6, 6,
	6, 6, 6, 12, 13, 13, 13, 13, 13, 13,
	83, 83, 82, 82, 85, 85, 14, 14, 15, 15,
	15, 15, 15, 15, 15, 15, 170, 170, 169, 16,
	146, 146, 17, 17, 17, 17, 18, 106, 106, 19,
	19, 19, 19, 20, 24, 236, 236, 236, 240, 240,
	241, 241, 242, 242, 242, 242, 242, 242, 242, 238,
	238, 27, 27, 27, 27, 27, 125, 121, 121, 123,
	123, 123, 123, 48, 120, 120, 120, 120, 122, 122,
	122, 122, 193, 192, 192, 198, 198, 198, 61, 61,
	61, 61, 61, 62, 62, 62, 191, 191, 191, 191,
	199, 199, 199, 199, 199, 199, 63, 63, 63, 197,
	197, 28, 28, 28, 28, 28, 28, 28, 28, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 237, 237,
	239, 239, 29, 29, 9, 9, 10, 10, 64, 64,
	65, 65, 128, 128, 128, 128, 66, 66, 45, 45,
	45, 127, 208, 208, 209, 209, 209, 209, 209, 209,
	210, 210, 210, 210, 210, 210, 210, 206, 206, 207,
	204, 204, 205, 205, 205, 205, 243, 243, 126, 126,
	69, 69, 213, 213, 213, 213, 211, 211, 211, 211,
	211, 214, 212, 215, 215, 215, 215, 215, 157, 157,
	157, 31, 11, 8, 8, 110, 110, 73, 73, 161,
	161, 161, 55, 55, 40, 40, 40, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 111, 111, 112, 112,
	22, 26, 30, 30, 30, 30, 30, 245, 245, 52,
	52, 52, 52, 53, 53, 124, 124, 124, 124, 124,
	47, 7, 7, 46, 46, 21, 21, 21, 21, 21,
	58, 58, 117, 117, 117, 119, 119, 118, 118, 118,
	96, 96, 32, 78, 78, 87, 87, 88, 88, 167,
	89, 89, 25, 25, 35, 35, 33, 33, 33, 33,
	33, 33, 34, 34, 36, 36, 36, 36, 36, 36,
	36, 221, 221, 221, 223, 223, 220, 222, 222, 244,
	244, 97, 97, 97, 68, 67, 67, 71, 71, 70,
	72, 72, 160, 94, 94, 94, 94, 113, 114, 114,
	115, 115, 116, 116, 93, 93, 143, 143, 37, 37,
	77, 77, 79, 79, 134, 134, 135, 135, 133, 133,
	133, 162, 162, 162, 162, 163, 163, 163, 163, 163,
	163, 158, 158, 158, 158, 159, 159, 168, 168, 100,
	100, 100, 100, 98, 98, 99, 99, 164, 164, 164,
	164, 95, 95, 165, 165, 165, 129, 129, 171, 171,
	171, 76, 76, 76, 172, 172, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 173, 173, 173,
	173, 175, 175, 175, 174, 174, 174, 174, 174, 174,
	174, 174, 174, 174, 174, 174, 174, 174, 176, 176,
	183, 183, 184, 184, 185, 186, 177, 177, 178, 178,
	179, 180, 187, 187, 187, 187, 189, 189, 181, 181,
	181, 181, 181, 182, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 108, 108,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 216, 216, 216, 216, 216, 216, 216, 218, 218,
	219, 219, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 224, 224,
	225, 225, 227, 227, 228, 228, 229, 230, 230, 230,
	231, 232, 232, 226, 226, 233, 233, 233, 234, 234,
	235, 235, 235, 235, 235, 148, 148, 148, 149, 149,
	150, 84, 84, 145, 145, 144, 144, 144, 147, 147,
	101, 188, 188, 188, 188, 188, 188, 188, 102, 102,
	109, 103, 103, 104, 104, 104, 104, 104, 104, 140,
	141, 105, 105, 105, 142, 142, 151, 155, 155, 154,
	153, 153, 152, 152, 132, 132, 132, 132, 131, 130,
	90, 90, 246, 246, 156, 156, 91, 91, 92, 86,
	86, 166, 166, 166, 166, 80, 80, 60, 60, 81,
	81, 56, 56, 59, 57, 57, 57, 57, 74, 74,
	75, 75, 54, 54, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 190, 190, 190, 49, 49,
	49, 50, 50, 51, 51, 195, 195, 195, 196, 196,
	196, 196, 194, 194, 194, 194, 194, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	201, 201, 203, 203, 203, 203, 203, 203, 203, 203,
	203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
	203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
	203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
	203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
	203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
	203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
	203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
	203, 203,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 4, 6, 1,
	3, 2, 5, 3, 6, 4, 6, 6, 6, 4,
	8, 2, 3, 3, 6, 4, 3, 2, 1, 1,
	0, 2, 0, 2, 0, 4, 6, 7, 1, 1,
	1, 1, 1, 6, 3, 5, 4, 6, 4, 6,
	1, 3, 1, 2, 2, 3, 2, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 5,
	3, 0, 1, 1, 1, 1, 3, 3, 0, 2,
	3, 2, 3, 6, 6, 1, 2, 2, 1, 1,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 2, 3, 6, 3, 1, 5, 2, 1, 1,
	1, 3, 3, 2, 3, 3, 3, 3, 1, 3,
	3, 2, 1, 1, 3, 1, 1, 1, 2, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 1, 1, 1, 1, 0, 1,
	1, 2, 2, 4, 2, 4, 4, 4, 4, 4,
	4, 4, 2, 3, 4, 3, 2, 4, 2, 0,
	2, 0, 8, 8, 7, 10, 5, 8, 1, 0,
	1, 3, 1, 1, 1, 1, 8, 0, 1, 1,
	0, 3, 2, 0, 3, 1, 2, 2, 3, 6,
	2, 1, 1, 2, 4, 2, 5, 7, 8, 5,
	3, 1, 4, 6, 5, 10, 1, 1, 4, 0,
	3, 0, 2, 2, 2, 0, 1, 1, 2, 2,
	0, 3, 3, 2, 1, 1, 2, 2, 1, 2,
	1, 4, 6, 11, 14, 1, 0, 1, 3, 3,
	3, 5, 2, 0, 1, 1, 0, 6, 6, 8,
	6, 8, 8, 10, 8, 10, 1, 0, 2, 0,
	2, 2, 3, 3, 2, 2, 2, 1, 0, 1,
	3, 2, 0, 2, 1, 1, 1, 3, 3, 0,
	3, 4, 7, 3, 0, 6, 6, 8, 5, 7,
	1, 3, 1, 4, 2, 8, 5, 4, 3, 0,
	2, 0, 8, 2, 0, 1, 3, 1, 1, 3,
	5, 5, 1, 1, 3, 3, 1, 2, 3, 2,
	3, 4, 1, 1, 8, 8, 1, 2, 4, 4,
	4, 2, 2, 3, 1, 3, 6, 1, 0, 1,
	0, 1, 1, 0, 1, 1, 0, 1, 0, 3,
	1, 3, 2, 2, 2, 1, 1, 2, 2, 3,
	1, 1, 1, 1, 3, 0, 2, 0, 2, 3,
	3, 0, 1, 3, 3, 1, 1, 3, 2, 4,
	0, 3, 2, 1, 4, 3, 4, 5, 4, 5,
	4, 5, 2, 4, 1, 1, 0, 5, 0, 2,
	2, 2, 1, 1, 0, 4, 2, 1, 2, 2,
	4, 1, 3, 1, 2, 3, 2, 0, 2, 5,
	2, 3, 4, 0, 1, 1, 1, 1, 2, 4,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 5, 0, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 2, 2, 2, 1, 1, 3, 0,
	1, 1, 1, 1, 5, 2, 1, 1, 1, 1,
	4, 1, 2, 2, 1, 1, 1, 0, 1, 1,
	4, 1, 4, 1, 1, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 0, 1, 4,
	1, 3, 3, 3, 5, 2, 2, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	2, 3, 4, 3, 4, 4, 5, 3, 3, 3,
	3, 3, 4, 3, 3, 4, 3, 4, 3, 4,
	5, 6, 6, 7, 6, 7, 6, 7, 3, 4,
	1, 3, 3, 2, 2, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 5, 6, 6, 7, 1,
	1, 1, 3, 1, 1, 1, 2, 2, 2, 1,
	1, 3, 5, 6, 8, 6, 6, 4, 4, 1,
	1, 1, 5, 1, 3, 1, 3, 1, 1, 1,
	1, 6, 6, 4, 4, 4, 4, 6, 5, 5,
	5, 4, 8, 6, 6, 4, 4, 4, 5, 0,
	5, 0, 2, 0, 1, 3, 3, 2, 2, 0,
	6, 1, 0, 3, 0, 2, 2, 0, 1, 4,
	2, 2, 2, 2, 2, 4, 3, 5, 4, 3,
	5, 1, 3, 1, 3, 3, 3, 2, 1, 3,
	3, 1, 1, 1, 1, 1, 1, 1, 4, 3,
	2, 3, 0, 3, 3, 2, 2, 1, 0, 2,
	2, 3, 2, 1, 1, 3, 5, 1, 2, 4,
	2, 0, 1, 0, 1, 1, 3, 5, 2, 2,
	1, 2, 1, 0, 1, 1, 1, 3, 3, 1,
	3, 3, 2, 1, 1, 1, 3, 1, 3, 1,
	3, 1, 2, 3, 1, 1, 2, 2, 1, 3,
	3, 0, 1, 2, 1, 1, 1, 1, 6, 2,
	3, 5, 1, 1, 1, 1, 2, 2, 1, 1,
	1, 1, 0, 3, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -6, -12, -13, -14,
	-16, -18, -19, -20, -21, -23, -24, -26, -25, -27,
	-28, -29, -30, -22, -31, -32, 23, 64, -7, -8,
	-9, -10, -11, -222, 92, 100, 193, 99, 85, 115,
	207, 214, -33, -35, 222, -125, 223, 34, 232, 58,
	95, 209, 204, 253, 66, -221, -36, -34, 300, 275,
	281, 217, -37, 240, 267, 303, 240, 128, 78, -56,
	-49, 4, -200, -202, 20, 21, 23, 33, 34, 39,
	43, 46, 57, 58, 59, 61, 63, 64, 65, 68,
	69, 76, 77, 78, 79, 81, 85, 87, 91, 92,
	94, 99, 100, 105, 106, 109, 111, 116, 121, 122,
	129, 132, 127, 141, 143, 144, 149, 152, 155, 157,
	158, 159, 160, 161, 163, 164, 166, 168, 165, 171,
	173, 174, 180, 183, 186, 187, 188, 191, 193, 195,
	196, 197, 199, 200, 204, 202, 203, 205, 207, 209,
	210, 212, 214, 215, 216, 219, 220, 222, 223, 225,
	228, 231, 232, 233, 236, 234, 230, 239, 241, 242,
	249, 253, 254, 255, 256, 259, 260, 261, 264, 265,
	266, 271, 276, 277, 278, 279, 28, 35, 36, 37,
	38, 40, 41, 44, 45, 49, 50, 51, 53, 80,
	82, 83, 98, 101, 107, 117, 119, 123, 124, 133,
	134, 135, 136, 138, 147, 170, 172, 181, 185, 190,
	192, 198, 211, 218, 226, 227, 235, 237, 244, 245,
	246, 250, 251, 267, 268, 87, 132, 261, 260, 78,
	128, 240, -15, 300, -25, -6, -13, -4, -21, -32,
	-12, -14, 23, -49, -49, -49, 193, 22, -240, 22,
	-241, -242, 66, 92, 115, 217, 132, 87, 260, -240,
	-53, 214, -49, -121, 152, 220, 211, 249, -122, -120,
	-193, 244, 161, -82, -49, 4, 78, 57, 79, 116,
	128, 129, 62, 63, 144, 241, 244, 249, 22, 66,
	-245, 249, 249, -245, -245, -52, 249, 247, -53, -244,
	240, 240, 270, -110, 78, 258, -34, -36, -35, -70,
	-71, 257, 137, 97, 179, -33, -35, -221, -223, 199,
	-220, -49, -223, -67, -68, 22, 89, 304, -164, -56,
	177, -92, 300, -3, -164, 123, -56, -59, 123, -56,
	-49, 113, 300, -90, -132, -131, -130, 298, 302, 113,
	139, 139, -165, -164, -49, 123, -60, 123, -59, -83,
	123, -82, -170, -169, -196, 4, -200, -202, -201, 267,
	55, 67, 114, 131, 125, 140, 142, 148, 150, 162,
	182, 184, 208, 224, 240, -146, 300, -106, 300, -49,
	22, 176, 304, 176, -49, -121, 51, -121, 300, -123,
	-47, -48, 141, 195, 247, 285, 113, 279, -63, 5,
	84, -85, 302, 113, -237, 176, 113, 113, 113, 113,
	113, 113, 279, 141, 195, 240, -124, -47, -48, -124,
	247, -53, -95, -164, -82, 123, -82, 128, -49, 123,
	-70, -71, -94, -113, -114, 151, 175, -97, 22, 89,
	-97, -97, 43, 301, 301, 304, -223, -75, 300, -86,
	-166, -136, 293, -138, 291, 292, 297, 167, 280, -148,
	-56, -139, 9, 300, -151, -218, -35, 98, 29, -149,
	-150, 211, -49, 7, 8, 5, 6, -54, -173, -182,
	252, 102, 169, 47, -216, -217, 4, -200, -195, -174,
	-184, -178, -181, 138, 55, 71, 74, 72, 75, 221,
	262, 48, 28, 101, 185, 190, 237, 250, 251, 123,
	170, 124, 53, 117, 147, 91, 36, 38, 40, 41,
	49, 50, 80, 82, 83, 107, 133, 134, 135, 136,
	172, 198, 226, 235, 245, 246, 268, -201, -185, -186,
	-179, -180, -187, -86, -92, 293, -56, 300, -91, -156,
	-136, 84, -42, 202, -41, 21, 23, 92, 265, 98,
	230, 230, 202, 98, 305, 202, 233, 301, -80, -56,
	-132, -136, -194, 293, 4, -200, -202, -201, -203, 22,
	24, 25, 26, 27, 29, 30, 31, 32, 42, 47,
	48, 52, 54, 56, 62, 66, 70, 71, 72, 73,
	74, 75, 84, 86, 88, 89, 90, 93, 95, 97,
	102, 103, 104, 110, 112, 113, 115, 118, 120, 126,
	128, 130, 137, 139, 145, 146, 151, 153, 154, 167,
	169, 175, 176, 177, 178, 179, 189, 194, 201, 206,
	217, 221, 229, 238, 240, 243, 247, 248, 252, 257,
	258, 262, 263, 269, 270, 272, 273, 274, 275, -165,
	-58, -56, -58, 222, -49, 30, 98, -44, 304, 46,
	205, 98, -44, 304, 98, 301, 304, -164, 123, 30,
	-145, -171, -172, -174, -183, -177, -181, -182, 39, 45,
	44, 242, 218, 227, 37, 133, 134, 135, 136, 226,
	36, 198, 107, 91, 83, 82, 172, 41, 40, -185,
	-186, -179, -180, 80, 245, 246, 138, 38, 50, 49,
	268, 235, -84, -136, -236, -81, 240, 78, -57, -49,
	293, -242, -236, 30, -84, 304, 304, 149, -62, 155,
	166, 121, -192, 84, -198, -191, -157, 9, 252, 102,
	176, -197, 8, 292, -190, -196, 5, 7, 291, -192,
	84, 69, -199, 5, 4, -182, -157, 84, 152, 302,
	-194, -193, -239, 110, -236, -193, -193, -193, -193, -193,
	-49, 149, -193, 304, 304, -53, -44, 304, 300, 30,
	167, -69, 300, -50, 123, -49, -46, 94, 167, -94,
	-114, -113, -115, -136, 22, -136, -138, -34, -34, -34,
	-72, -160, -136, -220, 30, -74, -49, -77, 304, 113,
	10, 11, 54, 33, 291, 292, 293, 294, 108, 295,
	288, 289, 290, 287, 283, 284, 285, 60, 156, 213,
	13, 14, 15, 26, 178, 150, 280, 125, 224, 297,
	16, 17, 18, 140, 35, 126, 30, 4, -136, -136,
	-136, -136, -136, 184, -35, -136, -84, -90, -35, -144,
	298, 300, -90, 300, 5, 5, 300, -152, -136, -224,
	276, 110, 300, 300, 300, 300, 300, 300, 300, 300,
	300, 300, 300, 300, 300, 300, 300, 300, 192, -189,
	271, -189, -189, -175, 300, -175, -176, 300, -175, 277,
	281, 300, -77, -56, 304, 301, 304, 247, -111, 62,
	56, -127, 123, 56, -204, -49, 62, -205, 52, 258,
	194, 112, -111, 62, -111, 62, 62, -164, 33, 33,
	247, -59, -49, 247, 113, 301, 304, 299, 308, -129,
	273, -117, -25, 300, 84, 30, -117, -87, -88, -167,
	-89, -56, 300, -49, -49, -59, -60, -82, -83, -15,
	-169, 98, -17, -25, -21, -32, -12, 301, 304, -76,
	29, -107, 300, 278, 159, 81, 122, 158, -108, 216,
	301, 304, 247, 304, -81, -74, -131, -130, 113, 249,
	301, -48, -47, -61, 197, 228, 203, 219, 304, 8,
	7, 7, 5, -194, -238, -49, -48, -47, -164, -64,
	-65, -128, -127, -206, -207, -204, 128, 258, 103, -25,
	98, 30, -74, 176, 167, 285, 98, -116, 211, 212,
	304, -40, 31, 88, 300, 304, 301, -129, -166, -79,
	-162, -164, -35, -163, 300, -171, -171, -82, 244, -136,
	-136, -136, -136, -136, -136, -136, -136, -136, -136, -136,
	-136, -136, -136, -136, -136, -136, -136, -136, -136, -136,
	-136, 150, 125, 224, 35, 126, -136, 247, -136, -136,
	-136, -136, 169, 167, 252, 102, 259, 89, 173, -246,
	238, 32, -142, -35, 300, -194, -148, 211, 300, 301,
	304, -84, -147, 299, -144, -84, 301, 301, -84, 269,
	22, 89, 293, -107, 7, -155, -154, 272, -225, 105,
	118, 300, 301, 301, -136, -136, -101, -188, 4, 278,
	159, 81, 122, 158, 216, -102, -136, -103, -137, -138,
	291, 292, 297, 300, 211, -104, -136, -84, -136, 42,
	146, 248, -105, -136, 113, -84, -136, -136, -136, -84,
	-84, -84, 300, 7, 7, 244, 244, 7, -129, 301,
	-156, -41, -56, -49, -49, 167, -127, 123, -171, -49,
	300, 300, 143, 143, -49, -49, 123, -49, 123, -49,
	-49, -42, 202, 300, 300, -49, 202, -49, 233, 113,
	-56, -136, -96, 206, -136, -96, -119, 176, -80, 267,
	-49, 206, -78, 304, 113, 285, -80, -44, -44, -164,
	-171, 298, 298, 7, 247, 247, 247, 247, 300, -136,
	-238, -57, -238, -47, 256, 59, 197, -198, -107, 304,
	301, 304, -50, 128, -50, -82, -25, 301, -56, 98,
	5, -49, -160, -17, -49, -93, 118, -168, 304, 282,
	67, -100, 142, 162, 114, 148, 208, 131, -133, 305,
	-159, -158, 30, -49, -35, -163, -162, 279, -136, -136,
	247, -246, 238, -142, -136, 169, 252, 102, 259, 89,
	173, 113, 300, -137, -137, -84, 300, -84, -136, 299,
	299, 304, 301, -71, 304, -70, -136, -84, -84, 301,
	301, -153, -154, 93, -136, -230, 183, 300, 300, -136,
	30, 304, 301, 113, 301, -109, 189, 301, 10, 11,
	291, 292, 293, 294, 108, 295, 288, 289, 290, 287,
	283, 284, 285, 60, 156, 213, 13, 14, 15, 140,
	126, -137, -137, -137, -84, 300, 301, -140, -141, 113,
	110, 30, -105, -105, -105, 301, 113, -84, 304, 304,
	304, 301, 301, 301, 7, 301, 304, 301, 279, 279,
	301, -93, 247, 247, 98, 167, -208, -205, -136, -74,
	300, 300, -39, 92, 222, -112, 98, -44, 98, -44,
	247, -111, 62, -84, -84, 247, 233, 299, -86, 206,
	61, 301, -86, -129, -88, -79, -156, 301, 299, 7,
	7, 301, 159, 122, 158, -108, 158, -108, -108, 7,
	-49, -66, 127, -128, 300, -50, 300, 300, 30, 300,
	-49, -46, 301, -143, 120, 43, -162, 173, 142, 142,
	-162, -100, 142, -98, 182, -98, -98, -159, -194, 306,
	-49, 300, 301, -136, -136, -137, -137, 113, 300, -136,
	-145, 26, 26, 301, -84, 301, 304, 301, -144, 301,
	269, -71, -71, -71, 5, 95, -136, 243, -231, -49,
	300, 273, -70, 301, -171, -171, -136, -140, -136, -171,
	-171, -137, -137, -137, -137, -137, -137, -137, -137, -137,
	-137, -137, -137, -137, -137, -137, -137, -137, -137, -137,
	89, 167, 173, -137, 304, -84, 301, -141, -140, -136,
	-136, -171, 301, 301, 301, -84, -136, -136, -136, 301,
	7, -143, -49, -49, -127, 98, -209, 62, -210, 54,
	103, 66, 167, 169, 258, 194, 52, 84, 201, 301,
	301, -74, -74, 167, 84, 167, 84, 77, 254, -49,
	-49, -56, -49, -49, 301, 301, -49, -86, -118, 300,
	176, -25, -96, 285, 299, 299, 301, 126, -73, -161,
	-49, -219, 300, -216, -217, -54, 300, -74, -64, -25,
	-73, 176, -227, 274, -136, -84, 239, -162, -162, -99,
	263, 176, 142, -162, -135, -134, 111, 165, 300, -74,
	-158, 26, 26, -136, -145, 301, -136, -136, 301, -136,
	5, -136, 301, 301, 301, -136, -232, -49, -136, 301,
	301, 301, -141, 113, 89, 173, 300, -136, 301, 301,
	304, 301, 301, 301, -227, -127, -49, -82, -49, 103,
	123, 169, 143, 300, -137, -56, -126, -243, 65, 236,
	301, 301, 169, 169, -136, -171, -44, -44, 247, 247,
	90, -74, 62, -92, -35, 300, 186, 301, 304, -55,
	-90, 54, -55, -136, 300, -73, 301, 301, 301, -56,
	-228, -229, -49, 244, -99, 300, -136, -162, 304, 307,
	285, -74, 301, -136, -136, 301, 301, -71, -226, 188,
	301, -137, 113, 300, -145, 301, -136, -210, -50, 167,
	-136, -51, 300, -66, 300, 201, -43, 54, -49, -49,
	260, 168, 301, -49, -49, -126, -161, -40, -82, -40,
	301, -84, 301, -66, -126, 300, 304, 30, 5, -74,
	-134, -194, 301, 301, -71, 43, -137, -145, 301, 301,
	98, 301, -213, 157, -49, -74, -56, -38, 263, -82,
	222, -129, 300, -66, -55, -71, -126, -66, -73, -229,
	-231, 301, -233, 196, 212, -84, 301, 103, -211, -214,
	-212, 176, 114, 187, 225, 301, 301, -69, -136, -87,
	-74, -40, 301, -66, 301, 301, -234, -235, 35, 255,
	69, -136, -234, -49, -212, 176, -214, 176, 260, 87,
	-213, -129, 301, -126, -235, 191, 109, 211, 191, 109,
	-215, 164, 205, 46, 222, -215, -211, -45, 46, 205,
	-66, 26, 20, 169, 84, -235,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 0, 0, 58, 59,
	60, 61, 62, 0, 0, 368, 0, 0, 0, 0,
	0, 0, 342, -2, 0, 125, 0, 298, 0, 298,
	298, 302, 0, 370, 266, 367, -2, 378, 0, 0,
	0, 376, 356, 0, 0, -2, 0, 0, 0, 0,
	771, 798, 799, 800, 817, 818, 819, 820, 821, 822,
	823, 824, 825, 826, 827, 828, 829, 830, 831, 832,
	833, 834, 835, 836, 837, 838, 839, 840, 841, 842,
	843, 844, 845, 846, 847, 848, 849, 850, 851, 852,
	853, 854, 855, 856, 857, 858, 859, 860, 861, 862,
	863, 864, 865, 866, 867, 868, 869, 870, 871, 872,
	873, 874, 875, 876, 877, 878, 879, 880, 881, 882,
	883, 884, 885, 886, 887, 888, 889, 890, 891, 892,
	893, 894, 895, 896, 897, 898, 899, 900, 901, 902,
	903, 904, 905, 906, 907, 908, 909, 910, 911, 912,
	913, 914, 915, 916, 917, 918, 919, 920, 921, 922,
	923, 924, 925, 926, 927, 928, 929, 930, 931, 932,
	933, 934, 935, 936, 937, 938, 939, 940, 941, 942,
	943, 944, 945, 946, 947, 948, 949, 950, 951, 952,
	953, 954, 955, 956, 957, 958, 959, 960, 961, 962,
	963, 964, 965, 966, 967, 968, 969, 970, 971, 972,
	973, 974, 975, 976, 977, 0, 0, 0, 0, 0,
	0, 0, 76, 0, 78, 79, 80, 81, 82, 83,
	84, 85, 0, 91, 98, 99, 881, 101, 0, 108,
	109, 110, 112, 113, 114, 115, 116, 117, 118, 0,
	291, 895, 304, 121, 860, 899, 965, 913, 128, 138,
	0, 971, -2, 142, 72, 171, 172, 0, 174, 189,
	0, 0, 0, 0, 0, 182, 0, 0, 186, 0,
	309, 297, 309, 294, 295, 296, 299, 0, 290, 0,
	369, 0, 0, 0, 0, 265, -2, 352, 353, -2,
	0, 373, 373, 373, 0, 0, 353, 0, 361, 885,
	364, 781, 362, 0, 0, 375, 374, 0, 357, 437,
	0, 398, 0, 2, 0, 950, 437, 0, 950, 0,
	0, 0, 0, 772, 750, 744, 745, 0, 0, 0,
	0, 0, 0, 443, 64, 950, 50, 950, 767, 50,
	950, 70, 0, 86, 88, 808, 809, 810, 811, 976,
	978, 979, 980, 981, 982, 983, 984, 985, 986, 987,
	988, 989, 990, 991, 0, 0, 0, 96, 0, 100,
	102, 0, 0, 0, 303, 122, 940, 124, 0, 127,
	129, 130, 0, 0, 0, 0, 0, 0, 141, 166,
	167, 73, 0, 0, 191, 0, 0, 0, 0, 0,
	0, 0, 183, 0, 185, 0, 292, 305, 306, 293,
	0, 301, 50, 441, 0, 950, 241, 802, 314, 950,
	-2, 0, 348, 385, 386, 0, 0, 0, 371, 372,
	0, 0, 0, 344, 345, 0, 363, 0, 0, 401,
	759, 763, 764, 530, 0, 0, 0, 0, 0, 0,
	619, 620, 621, 0, 623, 624, 625, 945, 0, 629,
	630, 965, 771, 784, 785, 786, 787, 0, 0, 0,
	792, 793, 794, 743, 669, 639, -2, -2, 782, 467,
	468, 469, 470, -2, 978, 643, 645, 647, 648, 649,
	650, 0, 929, 946, 961, 962, 970, 974, 975, 950,
	958, 951, 941, 948, 957, 841, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, 807, 492, 493,
	498, 499, 501, 401, 399, 438, 439, 0, 0, 756,
	754, 755, 27, 287, 29, 0, 287, 287, 0, 0,
	0, 0, 0, 0, 0, 0, 55, 0, 0, 765,
	751, 0, 748, 749, 812, 813, 814, 815, 816, 992,
	993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002,
	1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012,
	1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022,
	1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032,
	1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042,
	1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052,
	1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062,
	1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 447,
	0, 320, 0, 0, 444, 0, 0, 66, 0, 48,
	49, 0, 68, 0, 0, 368, 0, 0, 950, 368,
	0, 703, 453, 454, 455, 456, 457, 527, 460, 461,
	462, 463, 464, 465, 466, 474, 475, 476, 477, 478,
	479, 480, 489, 0, 473, 473, 473, 486, 487, 490,
	491, 496, 497, 508, 509, 511, 513, 507, 507, 507,
	504, 505, 0, 701, 0, 105, 0, 836, 769, 774,
	775, 111, 0, 0, 0, 0, 0, 0, 133, 153,
	154, 155, 134, 136, 143, 145, 146, 147, 156, 157,
	158, 159, 258, 0, 260, 169, 170, 795, 0, 135,
	137, 139, 140, 160, 161, 0, 163, 164, 165, 0,
	74, 173, 175, 0, 188, 176, 177, 178, 179, 180,
	181, 184, 187, 0, 0, 300, 261, 0, 199, 0,
	0, 0, 0, 0, 950, 801, 311, 0, 0, 351,
	383, 384, 387, 390, 391, 388, 530, 358, 359, 360,
	379, 380, 276, 365, 0, 0, 778, 447, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 753, 0, 0, 762, 535, 536,
	537, 559, 560, 0, -2, 701, 0, 626, 627, 628,
	0, 0, -2, 0, 789, 527, 0, 0, 742, 671,
	0, 0, 0, 0, 0, 0, 0, 0, 722, 728,
	0, 0, 0, 0, 0, 0, 0, 0, 482, 495,
	506, 503, 502, 484, 0, 483, 481, 0, 485, 0,
	0, 0, 447, 0, 0, 758, 0, 0, 0, 0,
	286, 31, 950, 0, 41, 0, 0, 231, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 773, 0, 0, 0, 0, 746, 0, 331,
	0, 331, 322, 0, 0, 0, 318, 334, 335, 337,
	338, 0, 0, 445, 65, 768, 50, 71, 50, 77,
	87, 0, 89, 92, 93, 94, 95, 90, 0, 448,
	450, 458, 0, 514, 515, 516, 517, 518, 519, 528,
	97, 0, 0, 0, 106, 107, 776, 777, 0, 0,
	126, 131, 132, 310, 0, 150, 0, 152, 0, 259,
	797, 796, 527, 75, 190, 119, 307, 308, 442, 0,
	198, 200, 202, 203, 204, 205, 802, 0, 802, 196,
	0, 0, 0, 0, 0, 0, 0, 389, 392, 393,
	0, 382, 274, 275, 368, 0, 780, 395, 760, 428,
	402, 410, 426, 413, 0, 531, 532, 533, 0, 538,
	539, 540, 541, 542, 543, 544, 545, 546, 547, -2,
	-2, -2, 551, 552, 553, -2, -2, -2, 557, 558,
	-2, 0, 0, 0, 753, 0, -2, 0, 567, -2,
	-2, -2, 571, 0, 574, 576, 578, 0, 0, 0,
	0, 752, 588, 734, 0, 761, 573, 0, 0, 622,
	0, 0, 0, 707, 708, 0, -2, 631, 378, 0,
	0, 0, 0, 790, 0, 741, 737, 0, 679, 0,
	0, 0, 644, 646, 0, 0, 0, 0, 711, 712,
	713, 714, 715, 716, 717, 0, 0, 0, 0, 590,
	0, 0, 0, 0, 965, 0, 701, 727, 0, 0,
	0, 0, 0, 701, 0, 733, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 395, 440,
	757, 30, 278, 0, 0, 0, 33, 950, 213, 0,
	0, 0, 0, 0, 289, 42, 950, 50, 950, 50,
	43, 28, 287, 0, 0, 280, 0, 277, 56, 0,
	766, 0, 63, 0, 446, 315, 316, 0, 0, 324,
	321, 0, 447, 0, 0, 0, 0, 67, 69, 0,
	704, 0, 0, 0, 0, 0, 0, 0, 0, 702,
	103, 770, 104, 123, 148, 149, 151, 144, 162, 0,
	207, 0, 0, 802, 0, 0, 262, 240, 0, 0,
	313, 314, 381, 0, 779, 397, 0, 400, 0, 0,
	0, 0, 0, 0, 434, 434, 434, 432, 426, 0,
	412, 425, 0, 424, -2, 413, 0, 0, -2, -2,
	0, 0, 0, 589, -2, 572, 575, 577, 579, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 702, 705,
	706, 0, -2, 0, 0, 377, 378, 378, 378, 637,
	0, 0, 738, 0, 0, 638, 0, 0, 0, 0,
	0, 0, 653, 0, 654, 0, 0, 655, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 593, 594, 595, 0, 0, 656, 725, 726, 0,
	0, 0, 0, 0, 0, 661, 0, 732, 0, 0,
	0, 665, 666, 667, 0, 471, 0, 488, 510, 512,
	500, 397, 0, 0, 0, 0, 211, 230, 0, 0,
	0, 0, 35, 0, 0, 0, 0, 39, 0, 45,
	0, 0, 0, 0, 0, 0, 57, 747, 330, 0,
	329, 0, 319, 331, 336, 333, 339, 0, 451, 0,
	0, 459, 520, 521, 522, 523, 524, 525, 526, 0,
	120, 194, 0, 201, 0, 0, 0, 199, 0, 0,
	0, 312, 366, 673, 0, 0, 403, 0, 0, 0,
	0, 0, 0, 429, 433, 430, 431, 411, 408, 0,
	422, 0, 415, 534, -2, 0, 0, 0, 0, -2,
	0, 0, 0, 735, 0, 696, 0, -2, 709, 632,
	0, 0, 0, 0, 791, 736, 740, 0, 677, 678,
	682, 0, 0, 642, 0, 0, 710, 719, 720, 591,
	592, 596, 597, 598, 599, 600, 601, 602, 603, 604,
	605, -2, -2, -2, 609, 610, 611, -2, -2, -2,
	0, 0, 0, 721, 0, 0, 699, 723, 724, 729,
	730, 0, 658, 659, 660, 731, 0, 0, 0, 494,
	0, 673, 282, 284, 32, 0, 212, 0, 215, 0,
	0, 0, 0, 221, 222, 0, 0, 0, 0, 232,
	239, 0, 0, 0, 47, 0, 0, 288, 0, 50,
	50, 279, 0, 0, 192, 193, 281, 317, 0, 0,
	0, 323, 332, 0, 452, 449, 529, 0, 0, 267,
	273, 273, 0, 640, 641, 0, 0, 0, 0, 197,
	0, 0, 354, 0, 396, 394, 0, 416, 0, 418,
	0, 0, 0, 420, 0, 406, 0, 405, 0, 0,
	414, 0, 0, -2, 0, 582, -2, -2, 695, 702,
	788, 378, 633, 635, 636, 739, 684, 681, 0, 668,
	651, 652, 718, 0, 0, 0, 0, 702, 698, 657,
	0, 663, 664, 472, 355, 34, 0, 216, 217, 802,
	0, 220, 223, 0, 225, 804, 207, 0, 236, 237,
	234, 0, 36, 37, 46, 52, 38, 44, 0, 0,
	0, 0, 0, 340, 341, 0, 0, 239, 0, 276,
	783, 0, 276, 0, 0, 0, 229, 207, 239, 0,
	672, 674, 0, 0, 417, 0, 436, 419, 0, 409,
	0, 0, 423, -2, -2, 583, 697, 0, 378, 0,
	670, -2, 0, 0, 0, 700, 0, 214, 218, 0,
	0, 245, 0, 233, 0, 0, 54, 0, 283, 285,
	0, 326, 447, 328, 0, 207, 268, 269, 272, 270,
	273, 378, 239, 195, 207, 0, 0, 0, 427, 0,
	407, 404, 421, 634, 687, 0, -2, 0, 617, 662,
	0, 224, 250, 0, 0, 0, 241, 40, 0, 51,
	0, 327, 0, 227, 276, 0, 207, 263, 0, 675,
	676, 435, 0, 0, 0, 683, 618, 0, 226, 246,
	247, 0, 242, 243, 244, 803, 238, 245, 53, 447,
	0, 271, 632, 228, 239, 680, 685, 688, -2, 916,
	833, 0, 686, 219, 248, 0, 249, 0, 0, 0,
	250, 325, 210, 207, 0, 690, 691, 692, 693, 694,
	251, 0, 254, 255, 0, 252, 235, 206, 208, 209,
	264, 0, 253, 256, 257, 689,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 289, 3, 295, 290, 3,
	300, 301, 293, 291, 304, 292, 302, 294, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 308, 303,
	283, 285, 284, 3, 305, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 298, 3, 299, 288, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 306, 287, 307, 297,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 286, 57626, 296, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:723
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:729
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:735
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 18:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:759
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 26:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:770
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 27:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:776
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 28:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:780
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 29:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:786
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 30:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:790
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 31:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:797
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 32:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:802
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 33:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:807
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:812
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:817
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 36:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:822
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:826
		{
			unimplemented()
		}
	case 38:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:829
		{
			sqlVAL.union.val = &AlterTableDropColumn{columnKeyword: sqlDollar[2].union.bool(), IfExists: true, Column: Name(sqlDollar[5].str)}
		}
	case 39:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:834
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:844
		{
			unimplemented()
		}
	case 41:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:847
		{
			sqlVAL.union.val = &AlterTableAddConstraint{ConstraintDef: sqlDollar[2].union.constraintDef()}
		}
	case 42:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:851
		{
			unimplemented()
		}
	case 43:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:853
		{
			unimplemented()
		}
	case 44:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:856
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 45:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:865
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 46:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:875
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 47:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:879
		{
			sqlVAL.union.val = nil
		}
	case 48:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:885
		{
			sqlVAL.union.val = DropCascade
		}
	case 49:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:889
		{
			sqlVAL.union.val = DropRestrict
		}
	case 50:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:893
		{
			sqlVAL.union.val = DropDefault
		}
	case 51:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:898
		{
			unimplementedWithIssue(2473)
		}
	case 52:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:899
		{
		}
	case 53:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:902
		{
			unimplemented()
		}
	case 54:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:903
		{
		}
	case 55:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:907
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 56:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:911
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 57:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:915
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:930
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retExprs()}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:937
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:941
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 66:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:945
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:953
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:961
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 69:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:965
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 70:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:971
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 71:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:975
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 72:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:981
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 73:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:985
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 74:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:991
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 75:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:995
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 76:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1002
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1006
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1012
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 85:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1021
		{ /* SKIP DOC */
		}
	case 86:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1025
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1029
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 89:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1039
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1049
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 91:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1053
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 92:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1059
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 96:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1069
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1080
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 98:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1084
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 99:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1091
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1097
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1103
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1107
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1114
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1121
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1128
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1132
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1136
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1143
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1146
		{
		}
	case 110:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1150
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1154
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 112:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1161
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 113:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1165
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1169
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1173
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1177
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1181
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1185
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1193
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1197
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1205
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 122:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1209
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 123:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1213
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1217
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1220
		{ /* SKIP DOC */
		}
	case 126:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1226
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1232
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 129:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1239
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1243
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1247
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1251
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1258
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1264
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1268
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1272
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1276
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1283
		{
			unimplemented()
		}
	case 140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1286
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1289
		{
			unimplemented()
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1296
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1300
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1308
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1314
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 149:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1318
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1322
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1326
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1330
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1336
		{
			sqlVAL.union.val = Low
		}
	case 154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1340
		{
			sqlVAL.union.val = Normal
		}
	case 155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1344
		{
			sqlVAL.union.val = High
		}
	case 156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1350
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1354
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1358
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1373
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1377
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1381
		{
			d, err := ParseDInterval(sqlDollar[2].str)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1391
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1395
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1400
		{
			unimplemented()
		}
	case 167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1401
		{
			unimplemented()
		}
	case 168:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1402
		{
		}
	case 169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1406
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1410
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1416
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1420
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1424
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1428
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1432
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1436
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1440
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1444
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1448
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1452
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1456
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1460
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1464
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1468
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1472
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1476
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 187:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1480
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1486
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 189:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1491
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1497
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 191:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1501
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 192:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1507
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.normalizableTableName(), Exprs: sqlDollar[7].union.exprs()}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1511
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Exprs: sqlDollar[7].union.exprs()}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1518
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1522
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1528
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[5].union.slct()}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1532
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[8].union.slct()}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1539
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1545
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1549
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 202:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1555
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 205:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1561
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 206:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1567
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1575
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1582
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1586
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 210:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1590
		{
			sqlVAL.union.val = DropDefault
		}
	case 211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1596
		{
			sqlVAL.union.val = newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
		}
	case 212:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1602
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 213:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1606
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 214:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1612
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1616
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1619
		{
			unimplemented()
		}
	case 217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1621
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1625
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1629
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1647
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1651
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 222:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1655
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1659
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 224:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1663
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1667
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 226:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1671
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 227:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1680
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 228:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1689
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 229:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1702
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1714
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 231:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1719
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 232:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1725
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1731
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    NameListToIndexElems(sqlDollar[3].union.nameList()),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1741
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[4].union.nameList()),
				},
				PrimaryKey: true,
			}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1751
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1774
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 239:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1778
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 240:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1784
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 241:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1788
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1793
		{
			unimplemented()
		}
	case 243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1794
		{
			unimplemented()
		}
	case 244:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1795
		{
			unimplemented()
		}
	case 245:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1796
		{
		}
	case 246:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1803
		{
			unimplemented()
		}
	case 247:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1804
		{
			unimplemented()
		}
	case 248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1805
		{
			unimplemented()
		}
	case 249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1806
		{
			unimplemented()
		}
	case 250:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1807
		{
		}
	case 251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1810
		{
			unimplemented()
		}
	case 252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1813
		{
			unimplemented()
		}
	case 253:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1816
		{
			unimplemented()
		}
	case 254:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1817
		{
			unimplemented()
		}
	case 255:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1818
		{
			unimplemented()
		}
	case 256:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1819
		{
			unimplemented()
		}
	case 257:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1820
		{
			unimplemented()
		}
	case 258:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1824
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 259:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1828
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 260:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1832
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 261:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1839
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1846
		{
			sqlVAL.union.val = &CreateView{
				Name:     sqlDollar[3].union.normalizableTableName(),
				ToCols:   sqlDollar[4].union.nameList(),
				AsSource: sqlDollar[6].union.slct(),
			}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:1859
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:1870
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1884
		{
			sqlVAL.union.val = true
		}
	case 266:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1888
		{
			sqlVAL.union.val = false
		}
	case 267:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1894
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1898
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1907
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1910
		{
			unimplemented()
		}
	case 271:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1911
		{
			unimplemented()
		}
	case 272:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1914
		{
			unimplemented()
		}
	case 273:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1915
		{
		}
	case 274:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1919
		{
			sqlVAL.union.val = Ascending
		}
	case 275:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1923
		{
			sqlVAL.union.val = Descending
		}
	case 276:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1927
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 277:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1934
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1938
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1942
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1946
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1950
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1954
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1958
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1962
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 285:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1966
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 286:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1972
		{
			sqlVAL.union.val = true
		}
	case 287:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1976
		{
			sqlVAL.union.val = false
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1981
		{
		}
	case 289:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1982
		{
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1986
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1992
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1999
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 293:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2003
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 294:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2007
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2011
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2015
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2024
		{
		}
	case 298:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2025
		{
		}
	case 299:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2029
		{
			sqlVAL.str = ""
		}
	case 300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2033
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2037
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 302:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2041
		{
			sqlVAL.str = ""
		}
	case 303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2047
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 304:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2051
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 305:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2057
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2061
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2065
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2069
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2073
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2079
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 311:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2085
		{
			sqlVAL.union.val = &CreateDatabase{Name: Name(sqlDollar[3].str), Encoding: sqlDollar[4].union.strVal()}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2089
		{
			sqlVAL.union.val = &CreateDatabase{IfNotExists: true, Name: Name(sqlDollar[6].str), Encoding: sqlDollar[7].union.strVal()}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2095
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2098
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 315:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2108
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retExprs()
		}
	case 316:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2114
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
		}
	case 317:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2119
		{
			unimplementedWithIssue(6637)
		}
	case 318:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2121
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2126
		{
			unimplementedWithIssue(6637)
		}
	case 320:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2134
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 321:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2138
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2144
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2148
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2152
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2158
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2162
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2168
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2172
		{
			unimplemented()
		}
	case 329:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2174
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2180
		{
			sqlVAL.union.val = sqlDollar[2].union.selExprs()
		}
	case 331:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2184
		{
			sqlVAL.union.val = SelectExprs(nil)
		}
	case 332:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2191
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retExprs()}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2197
		{
			unimplementedWithIssue(7841)
		}
	case 334:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2198
		{
		}
	case 335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2202
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2206
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 339:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2216
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2228
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2232
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2276
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2282
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2286
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2301
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2305
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2309
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2313
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2317
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2321
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2355
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2368
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2381
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2389
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 359:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2398
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 360:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2407
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2425
		{
			unimplemented()
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2426
		{
			unimplemented()
		}
	case 363:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2427
		{
			unimplemented()
		}
	case 364:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2430
		{
			unimplemented()
		}
	case 365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2431
		{
			unimplemented()
		}
	case 366:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2434
		{
			unimplemented()
		}
	case 367:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2437
		{
			unimplemented()
		}
	case 368:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2438
		{
		}
	case 369:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2441
		{
		}
	case 370:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2442
		{
		}
	case 371:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2446
		{
			sqlVAL.union.val = true
		}
	case 372:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2450
		{
			sqlVAL.union.val = false
		}
	case 373:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2454
		{
			sqlVAL.union.val = false
		}
	case 374:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2460
		{
			sqlVAL.union.val = true
		}
	case 375:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2465
		{
		}
	case 376:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2466
		{
		}
	case 377:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2470
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 378:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2474
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 379:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2480
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 380:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2486
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2490
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 382:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2496
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2504
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2513
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2524
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2537
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2544
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2551
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 392:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2565
		{
		}
	case 393:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2566
		{
		}
	case 394:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2592
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 395:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2596
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 396:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2602
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 397:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2606
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 398:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2612
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2616
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2628
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2632
		{
			sqlVAL.union.val = &From{}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2638
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2642
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 404:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2648
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2653
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2659
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2664
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			index := a.Index
			if index == "" {
				index = b.Index
			} else if b.Index != "" {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			noIndexJoin := a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = &IndexHints{Index: index, NoIndexJoin: noIndexJoin}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2684
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2688
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 410:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2692
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2699
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), As: sqlDollar[3].union.aliasClause()}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2703
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, As: sqlDollar[2].union.aliasClause()}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2707
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 414:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2711
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[2].union.tblExpr(), As: sqlDollar[4].union.aliasClause()}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2731
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2735
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2739
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2743
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2747
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2751
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2757
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2761
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2765
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2769
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2776
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2782
		{
			sqlVAL.union.val = AsOfClause{Expr: &StrVal{s: sqlDollar[5].str}}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2786
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2792
		{
			sqlVAL.str = astFullJoin
		}
	case 430:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2796
		{
			sqlVAL.str = astLeftJoin
		}
	case 431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2800
		{
			sqlVAL.str = astRightJoin
		}
	case 432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2804
		{
			sqlVAL.str = astInnerJoin
		}
	case 433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2810
		{
		}
	case 434:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2811
		{
		}
	case 435:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2822
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2826
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2832
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 438:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2836
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 439:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2840
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 440:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2844
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 441:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2850
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2854
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2867
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 444:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2871
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2875
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2881
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 447:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2885
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 448:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2897
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 449:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2901
		{
			unimplementedWithIssue(2115)
		}
	case 450:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2902
		{
			unimplementedWithIssue(2115)
		}
	case 451:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2905
		{
			unimplementedWithIssue(2115)
		}
	case 452:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2906
		{
			unimplementedWithIssue(2115)
		}
	case 453:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2907
		{
		}
	case 459:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2915
		{
			unimplemented()
		}
	case 460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2917
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2921
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 462:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2925
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 463:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2929
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 464:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2933
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 465:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2937
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 466:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2941
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 471:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2962
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2971
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2985
		{
			sqlVAL.union.val = nil
		}
	case 474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2992
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 475:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2996
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 476:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3000
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 477:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3004
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 478:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3008
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 479:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3012
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 480:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3016
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 481:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3020
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newFloatColType(int(prec))
		}
	case 482:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3029
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 483:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3033
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3042
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3051
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3060
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 487:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3064
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 488:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3070
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 489:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3074
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3092
		{
			n, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 495:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3108
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 500:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3124
		{
			n, err := sqlDollar[3].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3140
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 502:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3146
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 503:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3150
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 504:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3154
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 505:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3158
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 506:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3163
		{
		}
	case 507:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3164
		{
		}
	case 508:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3169
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 509:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3173
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 510:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3177
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 511:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3181
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 512:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3185
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 513:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3190
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 514:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3195
		{
			unimplemented()
		}
	case 515:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3196
		{
			unimplemented()
		}
	case 516:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3197
		{
			unimplemented()
		}
	case 517:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3198
		{
			unimplemented()
		}
	case 518:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3199
		{
			unimplemented()
		}
	case 519:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3200
		{
			unimplemented()
		}
	case 520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3201
		{
			unimplemented()
		}
	case 521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3202
		{
			unimplemented()
		}
	case 522:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3203
		{
			unimplemented()
		}
	case 523:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3204
		{
			unimplemented()
		}
	case 524:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3205
		{
			unimplemented()
		}
	case 525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3206
		{
			unimplemented()
		}
	case 526:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3207
		{
			unimplemented()
		}
	case 527:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3208
		{
		}
	case 528:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3211
		{
			unimplemented()
		}
	case 529:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3212
		{
			unimplemented()
		}
	case 531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3236
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3240
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3243
		{
			unimplemented()
		}
	case 534:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3244
		{
			unimplemented()
		}
	case 535:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3253
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3257
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3261
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3265
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3269
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3273
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3277
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3281
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3285
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3289
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3293
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3297
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3301
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3305
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3309
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3313
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3317
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3321
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3325
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3329
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3333
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3337
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3341
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3345
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3349
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3353
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3357
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3361
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3365
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3369
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3373
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3377
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3381
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3385
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3389
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3393
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3397
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3401
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3404
		{
			unimplemented()
		}
	case 574:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3406
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3410
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3414
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3418
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3422
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3426
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3430
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3434
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3438
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3442
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3446
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3450
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3454
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3458
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3462
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3466
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3483
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3487
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3491
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3495
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3499
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3503
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3507
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3511
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3515
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3519
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3523
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3527
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3531
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3535
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3539
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3543
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3547
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3551
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3555
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3559
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3563
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3567
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3571
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3575
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3579
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3583
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3587
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3591
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3603
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 621:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3608
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3612
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3618
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3622
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3626
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3632
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 629:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3636
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 630:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3640
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 631:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3648
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3652
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3655
		{
			unimplemented()
		}
	case 634:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3656
		{
			unimplemented()
		}
	case 635:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3658
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Type: All, Exprs: sqlDollar[4].union.exprs()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3662
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Type: Distinct, Exprs: sqlDollar[4].union.exprs()}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3666
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Exprs: Exprs{StarExpr()}}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3679
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 639:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3685
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 640:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3694
		{
			unimplemented()
		}
	case 641:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3695
		{
			unimplemented()
		}
	case 642:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3699
		{
			unimplemented()
		}
	case 643:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3701
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3705
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3709
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3713
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3716
		{
			unimplemented()
		}
	case 648:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3717
		{
			unimplemented()
		}
	case 649:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3718
		{
			unimplemented()
		}
	case 650:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3719
		{
			unimplemented()
		}
	case 651:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3721
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3725
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3729
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3733
		{
			sqlVAL.union.val = &OverlayExpr{FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3737
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3741
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3744
		{
			unimplemented()
		}
	case 658:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3746
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3750
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3754
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3758
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3762
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3766
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3770
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3774
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3778
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3782
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3788
		{
			unimplemented()
		}
	case 669:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3789
		{
		}
	case 670:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3792
		{
			unimplemented()
		}
	case 671:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3793
		{
		}
	case 672:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3798
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 673:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3802
		{
			sqlVAL.union.val = Window(nil)
		}
	case 674:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3808
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3812
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 676:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3818
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 677:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3826
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 678:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3830
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3834
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 680:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3841
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3860
		{
			sqlVAL.str = ""
		}
	case 683:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3866
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 684:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3870
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 685:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3880
		{
			unimplemented()
		}
	case 686:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3881
		{
			unimplemented()
		}
	case 687:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3882
		{
		}
	case 688:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3885
		{
			unimplemented()
		}
	case 689:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3886
		{
			unimplemented()
		}
	case 690:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3892
		{
			unimplemented()
		}
	case 691:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3893
		{
			unimplemented()
		}
	case 692:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3894
		{
			unimplemented()
		}
	case 693:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3895
		{
			unimplemented()
		}
	case 694:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3896
		{
			unimplemented()
		}
	case 695:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3907
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3911
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3915
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3921
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3925
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3931
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3974
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3978
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 703:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3984
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3988
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 705:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3994
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3998
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4002
		{
			sqlVAL.union.val = &Array{nil}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4008
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4012
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 710:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4018
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4040
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4044
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4050
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 721:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4057
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4061
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4078
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4082
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4086
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4090
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4094
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 728:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4098
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 729:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4104
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 730:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4110
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 731:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4116
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 732:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4120
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 733:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4124
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 734:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4130
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4134
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4145
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4152
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4156
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 739:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4162
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4168
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 741:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4172
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 743:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4179
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 744:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4185
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 745:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4189
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 746:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4193
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4197
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr()}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4203
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 749:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4209
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4215
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4219
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 752:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4224
		{
		}
	case 753:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4225
		{
		}
	case 755:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4234
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4240
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4244
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 758:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4253
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 759:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4259
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4263
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 761:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4269
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4278
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4282
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4286
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 765:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4294
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4298
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 767:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4304
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4308
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 769:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4314
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4318
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 771:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4329
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4333
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 773:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4339
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4350
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4354
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4358
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4362
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4368
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4372
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 780:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4378
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 781:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4381
		{
		}
	case 782:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4391
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4395
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 784:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4402
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 785:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4406
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 786:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4410
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4414
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4417
		{
			unimplemented()
		}
	case 789:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4419
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4423
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4427
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[5].str}, Type: sqlDollar[1].union.colType()}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4431
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 793:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4435
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 794:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4439
		{
			sqlVAL.union.val = DNull
		}
	case 796:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4446
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 797:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4450
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4472
		{
			sqlVAL.str = ""
		}
	case 803:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4478
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 804:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4482
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
