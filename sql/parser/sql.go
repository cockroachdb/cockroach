// Code generated by go yacc.
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"errors"

	"github.com/cockroachdb/cockroach/sql/privilege"
)

var errUnimplemented = errors.New("unimplemented")

func unimplemented() {
	panic(errUnimplemented)
}

//line sql.y:36

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new sytax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in two forms, depending on the
// type of the value being accessed. Values and pointers are directly
// type asserted from the empty interface, meaning that they will panic
// if the type assertion is incorrect. Interfaces are handled differently
// because a nil instance of an interface inserted into the empty interface
// becomes a nil instance of the empty interface and therefore will fail a
// direct type assertion. Instead, a guarded type assertion must be used,
// which returns nil if the type assertion fails.
func (u *sqlSymUnion) ival() IntVal {
	return u.val.(IntVal)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) qname() *QualifiedName {
	return u.val.(*QualifiedName)
}
func (u *sqlSymUnion) qnames() QualifiedNames {
	return u.val.(QualifiedNames)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) indirectElem() IndirectionElem {
	if indirectElem, ok := u.val.(IndirectionElem); ok {
		return indirectElem
	}
	return nil
}
func (u *sqlSymUnion) indirect() Indirection {
	return u.val.(Indirection)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	if selectStmt, ok := u.val.(*Select); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	if selectStmt, ok := u.val.(SelectStatement); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	if constraintDef, ok := u.val.(ConstraintTableDef); ok {
		return constraintDef
	}
	return nil
}
func (u *sqlSymUnion) tblDef() TableDef {
	if tblDef, ok := u.val.(TableDef); ok {
		return tblDef
	}
	return nil
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() ColumnQualification {
	if colQual, ok := u.val.(ColumnQualification); ok {
		return colQual
	}
	return nil
}
func (u *sqlSymUnion) colQuals() []ColumnQualification {
	return u.val.([]ColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retExprs() ReturningExprs {
	return ReturningExprs(u.val.(SelectExprs))
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	if tblExpr, ok := u.val.(TableExpr); ok {
		return tblExpr
	}
	return nil
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	if joinCond, ok := u.val.(JoinCond); ok {
		return joinCond
	}
	return nil
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	if alterTableCmd, ok := u.val.(AlterTableCmd); ok {
		return alterTableCmd
	}
	return nil
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}

//line sql.y:262
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const FCONST = 57347
const SCONST = 57348
const BCONST = 57349
const ICONST = 57350
const PARAM = 57351
const TYPECAST = 57352
const DOT_DOT = 57353
const LESS_EQUALS = 57354
const GREATER_EQUALS = 57355
const NOT_EQUALS = 57356
const ERROR = 57357
const ACTION = 57358
const ADD = 57359
const ALL = 57360
const ALTER = 57361
const ANALYSE = 57362
const ANALYZE = 57363
const AND = 57364
const ANY = 57365
const ARRAY = 57366
const AS = 57367
const ASC = 57368
const ASYMMETRIC = 57369
const AT = 57370
const BEGIN = 57371
const BETWEEN = 57372
const BIGINT = 57373
const BIT = 57374
const BLOB = 57375
const BOOL = 57376
const BOOLEAN = 57377
const BOTH = 57378
const BY = 57379
const BYTEA = 57380
const BYTES = 57381
const CASCADE = 57382
const CASE = 57383
const CAST = 57384
const CHAR = 57385
const CHARACTER = 57386
const CHARACTERISTICS = 57387
const CHECK = 57388
const COALESCE = 57389
const COLLATE = 57390
const COLLATION = 57391
const COLUMN = 57392
const COLUMNS = 57393
const COMMIT = 57394
const COMMITTED = 57395
const CONCAT = 57396
const CONFLICT = 57397
const CONSTRAINT = 57398
const COVERING = 57399
const CREATE = 57400
const CROSS = 57401
const CUBE = 57402
const CURRENT = 57403
const CURRENT_CATALOG = 57404
const CURRENT_DATE = 57405
const CURRENT_ROLE = 57406
const CURRENT_TIME = 57407
const CURRENT_TIMESTAMP = 57408
const CURRENT_USER = 57409
const CYCLE = 57410
const DATA = 57411
const DATABASE = 57412
const DATABASES = 57413
const DATE = 57414
const DAY = 57415
const DEC = 57416
const DECIMAL = 57417
const DEFAULT = 57418
const DEFERRABLE = 57419
const DELETE = 57420
const DESC = 57421
const DISTINCT = 57422
const DO = 57423
const DOUBLE = 57424
const DROP = 57425
const ELSE = 57426
const END = 57427
const ESCAPE = 57428
const EXCEPT = 57429
const EXISTS = 57430
const EXPLAIN = 57431
const EXTRACT = 57432
const FALSE = 57433
const FETCH = 57434
const FILTER = 57435
const FIRST = 57436
const FLOAT = 57437
const FOLLOWING = 57438
const FOR = 57439
const FORCE_INDEX = 57440
const FOREIGN = 57441
const FROM = 57442
const FULL = 57443
const GRANT = 57444
const GRANTS = 57445
const GREATEST = 57446
const GROUP = 57447
const GROUPING = 57448
const HAVING = 57449
const HIGH = 57450
const HOUR = 57451
const IF = 57452
const IFNULL = 57453
const IN = 57454
const INDEX = 57455
const INDEXES = 57456
const INITIALLY = 57457
const INNER = 57458
const INSERT = 57459
const INT = 57460
const INT64 = 57461
const INTEGER = 57462
const INTERSECT = 57463
const INTERVAL = 57464
const INTO = 57465
const IS = 57466
const ISOLATION = 57467
const JOIN = 57468
const KEY = 57469
const KEYS = 57470
const LATERAL = 57471
const LEADING = 57472
const LEAST = 57473
const LEFT = 57474
const LEVEL = 57475
const LIKE = 57476
const LIMIT = 57477
const LOCAL = 57478
const LOCALTIME = 57479
const LOCALTIMESTAMP = 57480
const LOW = 57481
const LSHIFT = 57482
const MATCH = 57483
const MINUTE = 57484
const MONTH = 57485
const NAME = 57486
const NAMES = 57487
const NATURAL = 57488
const NEXT = 57489
const NO = 57490
const NO_INDEX_JOIN = 57491
const NORMAL = 57492
const NOT = 57493
const NOTHING = 57494
const NULL = 57495
const NULLIF = 57496
const NULLS = 57497
const NUMERIC = 57498
const OF = 57499
const OFF = 57500
const OFFSET = 57501
const ON = 57502
const ONLY = 57503
const OR = 57504
const ORDER = 57505
const ORDINALITY = 57506
const OUT = 57507
const OUTER = 57508
const OVER = 57509
const OVERLAPS = 57510
const OVERLAY = 57511
const PARTIAL = 57512
const PARTITION = 57513
const PLACING = 57514
const POSITION = 57515
const PRECEDING = 57516
const PRECISION = 57517
const PRIMARY = 57518
const PRIORITY = 57519
const RANGE = 57520
const READ = 57521
const REAL = 57522
const RECURSIVE = 57523
const REF = 57524
const REFERENCES = 57525
const RENAME = 57526
const REPEATABLE = 57527
const RELEASE = 57528
const RESTRICT = 57529
const RETURNING = 57530
const REVOKE = 57531
const RIGHT = 57532
const ROLLBACK = 57533
const ROLLUP = 57534
const ROW = 57535
const ROWS = 57536
const RSHIFT = 57537
const SAVEPOINT = 57538
const SEARCH = 57539
const SECOND = 57540
const SELECT = 57541
const SERIALIZABLE = 57542
const SESSION = 57543
const SESSION_USER = 57544
const SET = 57545
const SHOW = 57546
const SIMILAR = 57547
const SIMPLE = 57548
const SMALLINT = 57549
const SNAPSHOT = 57550
const SOME = 57551
const SQL = 57552
const START = 57553
const STRICT = 57554
const STRING = 57555
const STORING = 57556
const SUBSTRING = 57557
const SYMMETRIC = 57558
const TABLE = 57559
const TABLES = 57560
const TEXT = 57561
const THEN = 57562
const TIME = 57563
const TIMESTAMP = 57564
const TIMESTAMPTZ = 57565
const TO = 57566
const TRAILING = 57567
const TRANSACTION = 57568
const TREAT = 57569
const TRIM = 57570
const TRUE = 57571
const TRUNCATE = 57572
const TYPE = 57573
const UNBOUNDED = 57574
const UNCOMMITTED = 57575
const UNION = 57576
const UNIQUE = 57577
const UNKNOWN = 57578
const UPDATE = 57579
const USER = 57580
const USING = 57581
const VALID = 57582
const VALIDATE = 57583
const VALUE = 57584
const VALUES = 57585
const VARCHAR = 57586
const VARIADIC = 57587
const VARYING = 57588
const WHEN = 57589
const WHERE = 57590
const WINDOW = 57591
const WITH = 57592
const WITHIN = 57593
const WITHOUT = 57594
const YEAR = 57595
const ZONE = 57596
const NOT_LA = 57597
const WITH_LA = 57598
const POSTFIXOP = 57599
const UMINUS = 57600

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"FCONST",
	"SCONST",
	"BCONST",
	"ICONST",
	"PARAM",
	"TYPECAST",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXPLAIN",
	"EXTRACT",
	"FALSE",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HOUR",
	"IF",
	"IFNULL",
	"IN",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARTIAL",
	"PARTITION",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SNAPSHOT",
	"SOME",
	"SQL",
	"START",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"TABLE",
	"TABLES",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"USER",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:4279

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 21,
	277, 21,
	-2, 319,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 32,
	1, 290,
	160, 290,
	188, 290,
	275, 290,
	277, 290,
	-2, 300,
	-1, 44,
	1, 293,
	160, 293,
	188, 293,
	275, 293,
	277, 293,
	-2, 299,
	-1, 53,
	1, 21,
	277, 21,
	-2, 319,
	-1, 238,
	1, 138,
	277, 138,
	-2, 790,
	-1, 270,
	135, 329,
	159, 329,
	-2, 296,
	-1, 273,
	135, 328,
	159, 328,
	-2, 294,
	-1, 384,
	135, 328,
	159, 328,
	-2, 297,
	-1, 440,
	274, 735,
	-2, 730,
	-1, 441,
	274, 736,
	-2, 731,
	-1, 447,
	6, 456,
	274, 456,
	-2, 871,
	-1, 469,
	6, 424,
	-2, 848,
	-1, 470,
	6, 452,
	274, 452,
	-2, 849,
	-1, 471,
	6, 432,
	-2, 850,
	-1, 472,
	6, 431,
	-2, 851,
	-1, 473,
	6, 452,
	274, 452,
	-2, 854,
	-1, 474,
	6, 452,
	274, 452,
	-2, 855,
	-1, 475,
	6, 453,
	-2, 858,
	-1, 476,
	6, 419,
	-2, 859,
	-1, 477,
	6, 419,
	-2, 860,
	-1, 478,
	6, 434,
	-2, 863,
	-1, 479,
	6, 420,
	-2, 868,
	-1, 480,
	6, 421,
	-2, 869,
	-1, 481,
	6, 422,
	-2, 870,
	-1, 482,
	6, 419,
	-2, 874,
	-1, 483,
	6, 425,
	-2, 879,
	-1, 484,
	6, 423,
	-2, 881,
	-1, 485,
	6, 450,
	274, 450,
	-2, 882,
	-1, 486,
	6, 454,
	-2, 885,
	-1, 487,
	6, 455,
	-2, 886,
	-1, 488,
	6, 449,
	274, 449,
	-2, 890,
	-1, 747,
	87, 300,
	121, 300,
	135, 300,
	159, 300,
	163, 300,
	234, 300,
	-2, 558,
	-1, 755,
	274, 715,
	-2, 704,
	-1, 950,
	12, 0,
	13, 0,
	14, 0,
	257, 0,
	258, 0,
	259, 0,
	-2, 489,
	-1, 951,
	12, 0,
	13, 0,
	14, 0,
	257, 0,
	258, 0,
	259, 0,
	-2, 490,
	-1, 952,
	12, 0,
	13, 0,
	14, 0,
	257, 0,
	258, 0,
	259, 0,
	-2, 491,
	-1, 956,
	12, 0,
	13, 0,
	14, 0,
	257, 0,
	258, 0,
	259, 0,
	-2, 495,
	-1, 957,
	12, 0,
	13, 0,
	14, 0,
	257, 0,
	258, 0,
	259, 0,
	-2, 496,
	-1, 958,
	12, 0,
	13, 0,
	14, 0,
	257, 0,
	258, 0,
	259, 0,
	-2, 497,
	-1, 961,
	30, 0,
	112, 0,
	134, 0,
	205, 0,
	255, 0,
	-2, 502,
	-1, 992,
	168, 628,
	-2, 631,
	-1, 1144,
	87, 300,
	121, 300,
	135, 300,
	159, 300,
	163, 300,
	234, 300,
	-2, 377,
	-1, 1152,
	30, 0,
	112, 0,
	134, 0,
	205, 0,
	255, 0,
	-2, 503,
	-1, 1157,
	30, 0,
	112, 0,
	134, 0,
	205, 0,
	255, 0,
	-2, 504,
	-1, 1176,
	168, 627,
	-2, 630,
	-1, 1319,
	30, 0,
	112, 0,
	134, 0,
	205, 0,
	255, 0,
	-2, 505,
	-1, 1324,
	124, 0,
	-2, 515,
	-1, 1333,
	168, 629,
	-2, 632,
	-1, 1373,
	12, 0,
	13, 0,
	14, 0,
	257, 0,
	258, 0,
	259, 0,
	-2, 539,
	-1, 1374,
	12, 0,
	13, 0,
	14, 0,
	257, 0,
	258, 0,
	259, 0,
	-2, 540,
	-1, 1375,
	12, 0,
	13, 0,
	14, 0,
	257, 0,
	258, 0,
	259, 0,
	-2, 541,
	-1, 1379,
	12, 0,
	13, 0,
	14, 0,
	257, 0,
	258, 0,
	259, 0,
	-2, 545,
	-1, 1380,
	12, 0,
	13, 0,
	14, 0,
	257, 0,
	258, 0,
	259, 0,
	-2, 546,
	-1, 1381,
	12, 0,
	13, 0,
	14, 0,
	257, 0,
	258, 0,
	259, 0,
	-2, 547,
	-1, 1479,
	124, 0,
	-2, 516,
	-1, 1483,
	30, 0,
	112, 0,
	134, 0,
	205, 0,
	255, 0,
	-2, 519,
	-1, 1484,
	30, 0,
	112, 0,
	134, 0,
	205, 0,
	255, 0,
	-2, 521,
	-1, 1566,
	30, 0,
	112, 0,
	134, 0,
	205, 0,
	255, 0,
	-2, 520,
	-1, 1567,
	30, 0,
	112, 0,
	134, 0,
	205, 0,
	255, 0,
	-2, 522,
	-1, 1575,
	124, 0,
	-2, 548,
	-1, 1614,
	124, 0,
	-2, 549,
	-1, 1659,
	30, 0,
	134, 0,
	205, 0,
	255, 0,
	-2, 847,
}

const sqlNprod = 982
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 20123

var sqlAct = [...]int{

	989, 1658, 1641, 1520, 1679, 826, 1619, 1642, 1657, 1643,
	1047, 439, 833, 889, 1353, 274, 1553, 1583, 1443, 1325,
	438, 1444, 1461, 584, 1467, 705, 1542, 501, 431, 239,
	1455, 750, 1411, 296, 876, 1234, 529, 1141, 873, 1088,
	1296, 433, 1179, 752, 1326, 1233, 1140, 1305, 1131, 279,
	31, 685, 875, 14, 834, 403, 507, 811, 1127, 1009,
	977, 414, 974, 781, 785, 1044, 999, 20, 491, 1005,
	701, 901, 542, 802, 557, 86, 868, 31, 898, 281,
	43, 65, 10, 1093, 707, 510, 6, 512, 273, 413,
	373, 489, 316, 404, 502, 67, 318, 503, 568, 314,
	372, 539, 284, 31, 878, 44, 63, 43, 388, 899,
	66, 311, 386, 293, 68, 387, 293, 81, 304, 236,
	559, 293, 45, 304, 555, 313, 538, 307, 72, 827,
	1139, 1559, 282, 43, 1560, 531, 1655, 278, 21, 1541,
	322, 1649, 1648, 531, 893, 893, 278, 1640, 35, 271,
	1482, 490, 1635, 1002, 1616, 893, 323, 1482, 263, 1098,
	709, 292, 1610, 319, 299, 893, 270, 1602, 831, 308,
	1541, 37, 1593, 1568, 1174, 1541, 1482, 42, 521, 1175,
	1563, 286, 302, 893, 1550, 1540, 709, 1541, 1541, 1003,
	1525, 1524, 1505, 893, 893, 1172, 1485, 1481, 49, 1172,
	1482, 1172, 26, 1421, 38, 1605, 893, 710, 27, 708,
	1329, 1287, 446, 1172, 1283, 493, 51, 1282, 49, 1386,
	1283, 28, 1004, 1001, 1251, 712, 1249, 1252, 1248, 1172,
	1247, 1172, 1176, 1172, 1173, 1172, 51, 894, 799, 1172,
	893, 798, 52, 536, 1332, 711, 537, 1544, 1111, 47,
	800, 1129, 1178, 1113, 391, 48, 893, 848, 534, 985,
	504, 1172, 52, 398, 505, 888, 505, 862, 1206, 47,
	399, 679, 678, 46, 549, 48, 548, 504, 1006, 339,
	291, 505, 532, 53, 49, 583, 385, 358, 405, 405,
	532, 49, 1656, 64, 1438, 1654, 379, 1611, 508, 1549,
	1206, 1510, 51, 1506, 1498, 40, 1497, 1492, 29, 51,
	39, 1491, 1219, 384, 1490, 30, 1489, 1476, 49, 1401,
	1396, 1395, 33, 34, 347, 496, 293, 500, 52, 1394,
	36, 1336, 1314, 1000, 346, 52, 51, 726, 1098, 1295,
	1254, 1253, 47, 1241, 495, 1232, 1205, 1202, 48, 41,
	1200, 1189, 1183, 1112, 1150, 1115, 498, 1059, 1016, 46,
	982, 1584, 52, 1015, 708, 398, 830, 293, 524, 47,
	1565, 397, 1355, 530, 378, 48, 1604, 1561, 1585, 1577,
	376, 682, 1556, 758, 1547, 1539, 1517, 271, 1503, 1470,
	693, 695, 727, 46, 1451, 578, 1323, 702, 1220, 1313,
	1474, 1293, 1292, 1290, 270, 1266, 1265, 1231, 1437, 741,
	742, 743, 744, 745, 681, 308, 400, 1197, 748, 1196,
	1188, 1169, 1165, 979, 786, 789, 322, 322, 749, 1206,
	1220, 1073, 1072, 522, 587, 1054, 1014, 892, 761, 710,
	791, 983, 323, 323, 779, 778, 777, 776, 1206, 775,
	588, 774, 773, 1221, 772, 771, 770, 712, 755, 718,
	719, 720, 713, 714, 715, 716, 717, 546, 545, 769,
	768, 504, 767, 1564, 579, 505, 572, 711, 766, 668,
	765, 756, 672, 673, 674, 1221, 675, 754, 671, 46,
	677, 683, 710, 680, 297, 402, 690, 271, 689, 753,
	271, 271, 703, 1206, 691, 795, 1316, 1315, 497, 1442,
	712, 1099, 1456, 1151, 697, 367, 1073, 698, 699, 1215,
	1212, 1213, 1214, 1207, 1208, 1209, 1210, 1211, 794, 796,
	711, 394, 395, 371, 353, 763, 827, 783, 784, 1356,
	1010, 782, 787, 1095, 407, 1625, 1592, 790, 805, 352,
	1206, 1215, 1212, 1213, 1214, 1207, 1208, 1209, 1210, 1211,
	1668, 793, 1429, 1107, 843, 316, 262, 850, 261, 726,
	854, 256, 492, 31, 1192, 257, 1533, 829, 1220, 293,
	792, 587, 304, 1669, 1532, 804, 31, 837, 816, 818,
	65, 1277, 304, 1278, 513, 304, 514, 588, 1258, 1257,
	1187, 940, 1186, 1185, 67, 1184, 441, 867, 1153, 1206,
	966, 230, 847, 322, 823, 822, 43, 375, 808, 66,
	370, 976, 726, 68, 727, 265, 710, 821, 812, 323,
	443, 1591, 1006, 1221, 846, 844, 319, 85, 851, 855,
	85, 852, 849, 845, 712, 842, 824, 85, 1627, 268,
	856, 759, 1676, 525, 85, 85, 841, 976, 85, 587,
	515, 85, 85, 85, 711, 1473, 85, 85, 85, 85,
	513, 321, 514, 350, 513, 588, 514, 727, 886, 887,
	1220, 815, 1089, 1087, 1207, 1208, 1209, 1210, 1211, 85,
	721, 718, 719, 720, 713, 714, 715, 716, 717, 57,
	1212, 1213, 1214, 1207, 1208, 1209, 1210, 1211, 351, 405,
	60, 519, 1268, 895, 941, 942, 943, 944, 945, 946,
	947, 948, 949, 950, 951, 952, 953, 954, 955, 956,
	957, 958, 959, 960, 961, 1221, 515, 1010, 58, 1220,
	515, 939, 1668, 1106, 293, 964, 720, 713, 714, 715,
	716, 717, 909, 61, 518, 903, 726, 55, 814, 1275,
	1209, 1210, 1211, 980, 986, 991, 1586, 994, 1017, 870,
	1028, 293, 1038, 1040, 1045, 1048, 1049, 1050, 794, 928,
	871, 531, 1039, 794, 1522, 1108, 349, 780, 1051, 1052,
	1053, 374, 872, 1573, 1221, 710, 266, 990, 1058, 508,
	56, 277, 896, 1645, 1214, 1207, 1208, 1209, 1210, 1211,
	1155, 727, 710, 712, 269, 587, 746, 813, 516, 1030,
	1306, 577, 565, 576, 1345, 570, 1195, 965, 1090, 1162,
	712, 588, 1269, 711, 278, 276, 981, 1084, 85, 85,
	1160, 511, 1068, 342, 344, 1020, 975, 804, 1644, 962,
	711, 909, 1667, 803, 1070, 1062, 1675, 62, 59, 1665,
	1454, 1092, 927, 1064, 1207, 1208, 1209, 1210, 1211, 85,
	858, 85, 1646, 85, 1527, 85, 860, 278, 928, 1101,
	1006, 713, 714, 715, 716, 717, 1417, 1637, 1063, 702,
	85, 861, 1094, 580, 516, 882, 361, 348, 516, 859,
	1094, 85, 1158, 1638, 54, 340, 1163, 1083, 1647, 1526,
	338, 1116, 85, 85, 1023, 85, 1418, 390, 1097, 389,
	963, 1103, 1100, 908, 1102, 1501, 930, 1382, 532, 1682,
	1104, 1114, 1515, 1110, 1674, 696, 1689, 1109, 322, 582,
	1260, 1523, 31, 390, 1117, 85, 1122, 85, 275, 349,
	1024, 368, 1067, 581, 323, 1105, 883, 321, 321, 1120,
	1124, 927, 688, 1152, 293, 586, 85, 1157, 85, 85,
	85, 85, 43, 85, 1145, 1123, 1149, 85, 1159, 1125,
	1425, 1146, 85, 1025, 1022, 1161, 1171, 787, 85, 790,
	1168, 1413, 1130, 1414, 1170, 1342, 1180, 1002, 1383, 784,
	783, 972, 1502, 369, 1384, 684, 85, 1181, 1182, 85,
	1177, 1193, 970, 1688, 554, 1198, 1416, 1341, 1620, 389,
	70, 801, 908, 1419, 676, 930, 1156, 1154, 1343, 550,
	1468, 1428, 1516, 1003, 1134, 1075, 748, 1680, 1427, 1026,
	1074, 1464, 1045, 1045, 1045, 552, 1230, 276, 1301, 1137,
	713, 714, 715, 716, 717, 1424, 553, 1243, 381, 1132,
	73, 1300, 1256, 348, 306, 1135, 1004, 1001, 1191, 715,
	716, 717, 968, 1263, 967, 1415, 1681, 1297, 973, 1133,
	78, 1469, 571, 566, 1006, 74, 1128, 1013, 1576, 1500,
	405, 1235, 1683, 1463, 1021, 1322, 1201, 1164, 853, 1264,
	508, 366, 1012, 1284, 75, 364, 85, 1238, 1239, 1240,
	363, 362, 586, 1426, 359, 305, 1272, 1255, 1274, 77,
	85, 1236, 1006, 1136, 85, 764, 670, 85, 85, 1262,
	1408, 1280, 85, 1273, 85, 85, 1271, 85, 1259, 1118,
	85, 85, 85, 884, 321, 1279, 881, 85, 85, 535,
	969, 533, 1318, 1285, 1319, 528, 1286, 971, 1276, 520,
	837, 1134, 517, 1310, 1350, 1324, 1289, 1291, 1534, 890,
	392, 289, 1462, 1334, 1669, 574, 1137, 1000, 1536, 1334,
	1330, 804, 1303, 1307, 1308, 1309, 1304, 819, 355, 804,
	586, 293, 1135, 1351, 293, 817, 1338, 1339, 1340, 1544,
	820, 76, 1360, 1281, 1588, 1362, 3, 909, 1299, 1613,
	1298, 1302, 396, 1606, 710, 587, 832, 704, 547, 1335,
	1148, 1686, 891, 1687, 69, 1206, 710, 863, 255, 1475,
	864, 588, 393, 290, 928, 1402, 1391, 1392, 1348, 79,
	1357, 909, 1387, 710, 1359, 1398, 1399, 1400, 909, 1361,
	1136, 1363, 711, 1397, 80, 1344, 1346, 1347, 356, 1317,
	298, 712, 1250, 1417, 1057, 1412, 258, 259, 928, 1389,
	1056, 1055, 1007, 1410, 865, 928, 1487, 85, 1349, 909,
	1390, 711, 1393, 929, 866, 757, 264, 1521, 71, 85,
	85, 1422, 1423, 1418, 1407, 669, 1403, 360, 1457, 1494,
	1636, 1194, 1449, 1572, 1552, 1449, 928, 1011, 762, 1458,
	25, 1448, 1453, 1446, 1448, 1031, 85, 927, 85, 1450,
	419, 1409, 1450, 1479, 1441, 1261, 877, 589, 1483, 1484,
	575, 1452, 31, 1486, 564, 442, 1439, 1432, 1488, 1471,
	365, 905, 558, 1480, 567, 1440, 586, 1019, 494, 444,
	906, 927, 1472, 1493, 445, 907, 788, 1496, 927, 432,
	904, 317, 293, 293, 835, 909, 293, 1008, 1413, 1190,
	1414, 760, 418, 424, 1130, 423, 73, 987, 908, 1459,
	1460, 930, 929, 1465, 415, 1466, 1138, 1504, 345, 927,
	234, 235, 928, 1416, 1091, 1436, 78, 1499, 828, 885,
	1419, 74, 692, 1270, 267, 1203, 1037, 1029, 85, 85,
	85, 1027, 908, 1018, 85, 930, 1134, 85, 377, 908,
	75, 506, 930, 85, 85, 85, 85, 85, 1528, 85,
	85, 1137, 836, 357, 1511, 77, 897, 85, 1147, 85,
	905, 1132, 1514, 1512, 401, 85, 700, 1135, 1546, 1449,
	908, 288, 1415, 930, 85, 85, 1535, 287, 1448, 874,
	85, 1133, 354, 1449, 1557, 551, 1450, 1530, 1531, 321,
	1548, 909, 1448, 1545, 1529, 927, 1537, 1543, 1566, 1567,
	1450, 1519, 857, 1555, 523, 260, 85, 1587, 85, 85,
	1267, 85, 1624, 50, 19, 17, 1562, 16, 928, 15,
	85, 13, 12, 11, 1571, 1136, 18, 85, 1580, 85,
	1121, 9, 8, 7, 24, 23, 1551, 76, 1582, 1031,
	1031, 22, 5, 1578, 909, 4, 293, 1569, 2, 1,
	0, 0, 0, 0, 0, 0, 908, 0, 0, 930,
	508, 0, 0, 1558, 1595, 909, 1581, 0, 0, 0,
	0, 928, 426, 1449, 1603, 79, 1597, 0, 1601, 1599,
	0, 0, 1448, 1596, 0, 0, 0, 0, 0, 0,
	1450, 794, 928, 0, 1598, 0, 0, 1031, 1031, 1031,
	0, 927, 1607, 83, 1608, 1609, 240, 0, 1612, 0,
	0, 0, 0, 83, 0, 0, 0, 1615, 0, 1628,
	285, 285, 0, 0, 295, 0, 1631, 295, 301, 295,
	1621, 1622, 295, 309, 295, 240, 1449, 1630, 1626, 909,
	0, 1634, 1633, 1632, 1639, 1448, 1651, 1629, 0, 0,
	0, 0, 0, 1450, 927, 341, 0, 587, 1662, 1662,
	1652, 1650, 908, 1653, 0, 930, 928, 1663, 1623, 0,
	0, 1666, 1664, 588, 0, 927, 0, 1670, 1671, 1672,
	1662, 1673, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1685, 1684, 0, 0, 0, 0, 0,
	85, 0, 0, 0, 0, 0, 0, 1662, 1690, 837,
	0, 0, 0, 0, 0, 908, 0, 0, 930, 1031,
	1031, 0, 0, 0, 0, 85, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 908, 0, 85, 930,
	85, 0, 85, 0, 0, 85, 0, 0, 0, 927,
	0, 0, 0, 0, 0, 0, 85, 0, 929, 85,
	0, 0, 0, 0, 0, 85, 586, 0, 0, 85,
	0, 85, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031,
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031,
	0, 1031, 929, 0, 0, 0, 0, 242, 0, 929,
	0, 0, 0, 0, 240, 240, 0, 0, 0, 0,
	908, 253, 0, 930, 1166, 1167, 905, 0, 0, 0,
	0, 0, 85, 0, 0, 0, 0, 0, 0, 0,
	929, 0, 0, 0, 0, 83, 0, 295, 0, 240,
	0, 382, 0, 0, 244, 0, 0, 0, 0, 0,
	905, 254, 0, 0, 0, 0, 285, 905, 0, 0,
	0, 0, 0, 243, 245, 0, 0, 295, 0, 0,
	0, 0, 1227, 1228, 1229, 0, 0, 0, 295, 295,
	0, 526, 0, 0, 85, 85, 85, 0, 905, 0,
	0, 0, 85, 85, 0, 0, 246, 0, 85, 0,
	85, 0, 85, 85, 85, 85, 247, 248, 0, 0,
	85, 543, 0, 543, 420, 32, 929, 0, 0, 85,
	0, 249, 0, 0, 0, 0, 0, 85, 85, 0,
	0, 85, 240, 0, 543, 240, 240, 240, 0, 240,
	85, 85, 32, 240, 0, 0, 0, 710, 83, 0,
	0, 0, 0, 0, 687, 0, 0, 0, 272, 0,
	0, 280, 0, 0, 0, 712, 0, 0, 32, 0,
	0, 0, 285, 0, 905, 706, 0, 0, 0, 280,
	0, 0, 85, 1031, 0, 711, 0, 0, 0, 0,
	0, 725, 0, 0, 1320, 1321, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 250, 0, 0, 251, 0, 0, 0, 0, 252,
	0, 0, 929, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 85, 0, 85, 1206, 85,
	1222, 1223, 1224, 0, 0, 0, 85, 1364, 1365, 1366,
	1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376,
	1377, 1378, 1379, 1380, 1381, 1031, 1385, 710, 0, 728,
	729, 730, 295, 0, 0, 929, 0, 726, 0, 731,
	905, 85, 1219, 85, 0, 712, 809, 737, 0, 0,
	295, 85, 0, 295, 825, 0, 929, 85, 295, 0,
	839, 840, 0, 295, 0, 711, 295, 240, 240, 0,
	0, 725, 0, 543, 706, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 727, 905, 0, 0, 0, 0, 0, 0,
	1226, 1031, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1225, 0, 905, 0, 0, 0, 0, 85,
	85, 0, 0, 85, 0, 0, 0, 0, 1220, 738,
	929, 85, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 736, 0, 85, 0, 0, 0, 0, 586, 0,
	0, 733, 0, 0, 0, 0, 272, 726, 721, 718,
	719, 720, 713, 714, 715, 716, 717, 0, 0, 0,
	0, 85, 85, 85, 0, 85, 0, 0, 0, 732,
	0, 0, 0, 1221, 0, 0, 0, 0, 905, 0,
	0, 0, 85, 710, 0, 728, 729, 730, 0, 0,
	0, 0, 0, 869, 0, 731, 0, 0, 0, 0,
	0, 712, 727, 737, 85, 295, 809, 0, 1518, 0,
	0, 0, 735, 0, 0, 0, 0, 0, 0, 0,
	0, 711, 0, 0, 0, 0, 0, 725, 0, 0,
	0, 0, 295, 0, 240, 1216, 1217, 1218, 0, 1215,
	1212, 1213, 1214, 1207, 1208, 1209, 1210, 1211, 0, 0,
	0, 0, 0, 0, 0, 0, 272, 0, 0, 272,
	272, 0, 734, 0, 722, 723, 724, 0, 721, 718,
	719, 720, 713, 714, 715, 716, 717, 0, 0, 0,
	1060, 0, 747, 0, 0, 738, 751, 0, 0, 1061,
	1575, 0, 0, 0, 0, 0, 0, 736, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 733, 0, 0,
	0, 0, 0, 726, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 295, 1065, 1066, 0, 0, 0,
	809, 0, 0, 1071, 0, 732, 0, 0, 0, 1076,
	1077, 1079, 1081, 1082, 0, 1085, 1086, 0, 0, 0,
	0, 0, 0, 295, 0, 1096, 0, 0, 0, 0,
	0, 295, 0, 0, 0, 0, 1614, 0, 727, 0,
	869, 543, 0, 0, 0, 0, 869, 0, 735, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 32, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 32, 687, 0, 240, 295, 0, 1119, 0, 0,
	0, 0, 0, 0, 0, 0, 1126, 0, 0, 0,
	0, 0, 0, 1143, 0, 295, 0, 0, 734, 0,
	722, 723, 724, 0, 721, 718, 719, 720, 713, 714,
	715, 716, 717, 0, 0, 710, 0, 728, 729, 730,
	0, 1507, 0, 0, 0, 0, 0, 731, 0, 0,
	0, 0, 0, 712, 0, 737, 0, 0, 0, 0,
	0, 0, 0, 0, 710, 0, 728, 729, 730, 0,
	0, 0, 0, 711, 0, 0, 731, 0, 0, 725,
	0, 0, 712, 0, 737, 0, 0, 1206, 0, 1222,
	1223, 1224, 0, 0, 0, 0, 0, 0, 0, 1478,
	0, 0, 711, 0, 0, 0, 0, 0, 725, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1219, 0, 0, 0, 0, 0, 738, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 736,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 733,
	0, 0, 0, 0, 900, 726, 738, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 736, 0,
	0, 0, 0, 0, 0, 0, 706, 732, 733, 0,
	0, 0, 0, 978, 726, 0, 0, 0, 0, 0,
	0, 1225, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 295, 0, 0, 0, 0, 732, 1220, 0, 0,
	727, 0, 0, 0, 1288, 0, 809, 0, 687, 0,
	735, 1294, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 295, 0, 0, 295, 0, 0, 0, 727,
	0, 1143, 0, 0, 0, 1312, 0, 1143, 0, 735,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1221, 0, 0, 0, 0, 0, 0, 0,
	734, 0, 722, 723, 724, 280, 721, 718, 719, 720,
	713, 714, 715, 716, 717, 0, 0, 0, 0, 0,
	0, 0, 0, 1246, 0, 0, 0, 0, 1354, 734,
	0, 722, 723, 724, 0, 721, 718, 719, 720, 713,
	714, 715, 716, 717, 0, 0, 0, 0, 0, 0,
	0, 0, 1245, 0, 1216, 1217, 1218, 0, 1215, 1212,
	1213, 1214, 1207, 1208, 1209, 1210, 1211, 32, 0, 710,
	0, 728, 729, 730, 0, 0, 0, 1144, 0, 0,
	0, 731, 0, 0, 0, 0, 0, 712, 0, 737,
	1405, 1406, 809, 0, 0, 0, 0, 0, 706, 706,
	0, 0, 0, 0, 1430, 0, 1431, 711, 295, 1433,
	1434, 1435, 0, 725, 0, 0, 295, 0, 0, 0,
	0, 0, 0, 1445, 0, 809, 1445, 0, 0, 0,
	0, 0, 0, 295, 295, 0, 0, 295, 0, 0,
	978, 0, 0, 0, 0, 0, 706, 1143, 710, 0,
	728, 729, 730, 0, 747, 0, 0, 0, 0, 0,
	731, 0, 0, 0, 0, 0, 712, 0, 737, 0,
	0, 738, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 736, 0, 0, 711, 0, 1495, 0,
	0, 0, 725, 733, 0, 0, 0, 0, 0, 726,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	747, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 732, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 809, 0, 1513, 0, 240, 0, 0, 0, 0,
	738, 0, 295, 0, 727, 0, 0, 710, 0, 728,
	729, 730, 736, 0, 735, 0, 0, 0, 0, 731,
	1445, 0, 733, 0, 0, 712, 0, 737, 726, 0,
	0, 0, 0, 0, 1445, 0, 0, 295, 0, 1554,
	0, 0, 0, 0, 0, 711, 0, 295, 0, 0,
	732, 725, 0, 706, 900, 0, 0, 900, 0, 1206,
	0, 1222, 1223, 1224, 734, 0, 722, 723, 724, 0,
	721, 718, 719, 720, 713, 714, 715, 716, 717, 0,
	0, 0, 710, 727, 728, 729, 730, 1244, 0, 0,
	0, 0, 0, 735, 731, 0, 0, 0, 0, 0,
	712, 0, 737, 1219, 0, 0, 0, 0, 0, 738,
	0, 0, 0, 0, 0, 1589, 1590, 0, 0, 1594,
	711, 736, 0, 0, 1445, 0, 725, 240, 0, 0,
	0, 733, 0, 0, 0, 0, 0, 726, 0, 706,
	0, 0, 0, 734, 0, 722, 723, 724, 0, 721,
	718, 719, 720, 713, 714, 715, 716, 717, 0, 732,
	0, 0, 0, 1618, 0, 0, 0, 706, 706, 295,
	0, 240, 0, 1225, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 738, 0, 0, 1445, 1554, 1220,
	0, 0, 727, 0, 0, 0, 736, 0, 0, 0,
	0, 0, 735, 0, 0, 0, 733, 32, 0, 0,
	295, 0, 726, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 900, 900, 0, 0, 900,
	0, 0, 0, 0, 732, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1221, 0, 0, 0, 0, 0,
	0, 0, 734, 0, 722, 723, 724, 0, 721, 718,
	719, 720, 713, 714, 715, 716, 717, 727, 0, 0,
	0, 0, 1617, 0, 0, 0, 0, 735, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1216, 1217, 1218, 0,
	1215, 1212, 1213, 1214, 1207, 1208, 1209, 1210, 1211, 0,
	0, 0, 0, 0, 0, 0, 0, 734, 0, 722,
	723, 724, 0, 721, 718, 719, 720, 713, 714, 715,
	716, 717, 0, 0, 0, 0, 0, 1600, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1538, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 585, 0, 0, 0, 0, 0, 0, 900,
	0, 0, 0, 0, 87, 88, 590, 89, 591, 592,
	593, 594, 595, 596, 597, 598, 90, 91, 186, 187,
	188, 92, 189, 190, 599, 93, 191, 192, 94, 600,
	601, 193, 194, 195, 602, 196, 603, 325, 604, 95,
	96, 97, 0, 98, 605, 99, 606, 326, 100, 101,
	607, 608, 609, 610, 611, 612, 102, 103, 104, 105,
	197, 106, 198, 199, 613, 614, 107, 615, 616, 617,
	108, 109, 618, 619, 747, 620, 200, 110, 201, 621,
	622, 111, 112, 202, 113, 623, 114, 624, 625, 327,
	626, 115, 203, 627, 204, 628, 116, 117, 205, 206,
	629, 630, 118, 631, 328, 119, 207, 208, 209, 632,
	210, 633, 329, 120, 330, 121, 122, 634, 635, 211,
	331, 123, 332, 636, 124, 637, 638, 125, 0, 126,
	127, 128, 129, 130, 333, 131, 132, 135, 133, 639,
	134, 640, 212, 136, 213, 137, 138, 641, 642, 643,
	644, 645, 139, 214, 334, 140, 335, 215, 141, 142,
	646, 216, 143, 217, 647, 144, 145, 146, 218, 147,
	148, 648, 150, 151, 149, 152, 649, 153, 336, 154,
	155, 219, 156, 0, 241, 157, 158, 650, 159, 160,
	651, 161, 162, 337, 163, 220, 164, 652, 165, 166,
	168, 221, 167, 222, 653, 654, 169, 170, 655, 223,
	224, 225, 656, 657, 171, 226, 227, 658, 172, 173,
	174, 175, 659, 660, 176, 177, 661, 662, 178, 179,
	180, 228, 229, 663, 181, 664, 665, 666, 667, 182,
	183, 184, 185, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 585, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1311, 87,
	88, 590, 89, 591, 592, 593, 594, 595, 596, 597,
	598, 90, 91, 186, 187, 188, 92, 189, 190, 599,
	93, 191, 192, 94, 600, 601, 193, 194, 195, 602,
	196, 603, 325, 604, 95, 96, 97, 0, 98, 605,
	99, 606, 326, 100, 101, 607, 608, 609, 610, 611,
	612, 102, 103, 104, 105, 197, 106, 198, 199, 613,
	614, 107, 615, 616, 617, 108, 109, 618, 619, 0,
	620, 200, 110, 201, 621, 622, 111, 112, 202, 113,
	623, 114, 624, 625, 327, 626, 115, 203, 627, 204,
	628, 116, 117, 205, 206, 629, 630, 118, 631, 328,
	119, 207, 208, 209, 632, 210, 633, 329, 120, 330,
	121, 122, 634, 635, 211, 331, 123, 332, 636, 124,
	637, 638, 125, 0, 126, 127, 128, 129, 130, 333,
	131, 132, 135, 133, 639, 134, 640, 212, 136, 213,
	137, 138, 641, 642, 643, 644, 645, 139, 214, 334,
	140, 335, 215, 141, 142, 646, 216, 143, 217, 647,
	144, 145, 146, 218, 147, 148, 648, 150, 151, 149,
	152, 649, 153, 336, 154, 155, 219, 156, 0, 241,
	157, 158, 650, 159, 160, 651, 161, 162, 337, 163,
	220, 164, 652, 165, 166, 168, 221, 167, 222, 653,
	654, 169, 170, 655, 223, 224, 225, 656, 657, 171,
	226, 227, 658, 172, 173, 174, 175, 659, 660, 176,
	177, 661, 662, 178, 179, 180, 228, 229, 663, 181,
	664, 665, 666, 667, 182, 183, 184, 185, 0, 585,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	797, 87, 88, 590, 89, 591, 592, 593, 594, 595,
	596, 597, 598, 90, 91, 186, 187, 188, 92, 189,
	190, 599, 93, 191, 192, 94, 600, 601, 193, 194,
	195, 602, 196, 603, 325, 604, 95, 96, 97, 0,
	98, 605, 99, 606, 326, 100, 101, 607, 608, 609,
	610, 611, 612, 102, 103, 104, 105, 197, 106, 198,
	199, 613, 614, 107, 615, 616, 617, 108, 109, 618,
	619, 0, 620, 200, 110, 201, 621, 622, 111, 112,
	202, 113, 623, 114, 624, 625, 327, 626, 115, 203,
	627, 204, 628, 116, 117, 205, 206, 629, 630, 118,
	631, 328, 119, 207, 208, 209, 632, 210, 633, 329,
	120, 330, 121, 122, 634, 635, 211, 331, 123, 332,
	636, 124, 637, 638, 125, 0, 126, 127, 128, 129,
	130, 333, 131, 132, 135, 133, 639, 134, 640, 212,
	136, 213, 137, 138, 641, 642, 643, 644, 645, 139,
	214, 334, 140, 335, 215, 141, 142, 646, 216, 143,
	217, 647, 144, 145, 146, 218, 147, 148, 648, 150,
	151, 149, 152, 649, 153, 336, 154, 155, 219, 156,
	0, 241, 157, 158, 650, 159, 160, 651, 161, 162,
	337, 163, 220, 164, 652, 165, 166, 168, 221, 167,
	222, 653, 654, 169, 170, 655, 223, 224, 225, 656,
	657, 171, 226, 227, 658, 172, 173, 174, 175, 659,
	660, 176, 177, 661, 662, 178, 179, 180, 228, 229,
	663, 181, 664, 665, 666, 667, 182, 183, 184, 185,
	440, 428, 429, 430, 427, 416, 0, 0, 0, 0,
	0, 0, 87, 88, 996, 89, 0, 0, 0, 0,
	422, 0, 0, 0, 90, 91, 186, 469, 470, 92,
	471, 472, 0, 93, 191, 192, 94, 437, 455, 473,
	474, 195, 0, 465, 0, 448, 0, 95, 96, 97,
	0, 98, 0, 99, 0, 326, 100, 101, 0, 449,
	451, 0, 450, 452, 102, 103, 104, 105, 475, 106,
	476, 477, 0, 0, 107, 0, 997, 0, 468, 109,
	0, 0, 0, 0, 421, 110, 456, 435, 0, 111,
	112, 478, 113, 0, 114, 0, 0, 327, 0, 115,
	466, 0, 204, 0, 116, 117, 462, 464, 0, 0,
	118, 0, 328, 119, 479, 480, 481, 0, 447, 0,
	329, 120, 330, 121, 122, 0, 0, 467, 331, 123,
	332, 0, 124, 0, 0, 125, 0, 126, 127, 128,
	129, 130, 333, 131, 132, 135, 133, 411, 134, 436,
	463, 136, 482, 137, 138, 0, 0, 0, 0, 0,
	139, 214, 334, 140, 335, 457, 141, 142, 0, 458,
	143, 217, 0, 144, 145, 146, 483, 147, 148, 0,
	150, 151, 149, 152, 0, 153, 336, 154, 155, 425,
	156, 0, 241, 157, 158, 0, 159, 160, 453, 161,
	162, 337, 163, 484, 164, 0, 165, 166, 168, 485,
	167, 459, 0, 0, 169, 170, 0, 223, 486, 487,
	0, 0, 171, 460, 461, 434, 172, 173, 174, 175,
	0, 0, 176, 177, 454, 0, 178, 179, 180, 228,
	488, 995, 181, 0, 0, 0, 0, 182, 183, 184,
	185, 412, 0, 440, 428, 429, 430, 427, 416, 0,
	0, 408, 409, 998, 0, 87, 88, 410, 89, 0,
	417, 993, 0, 422, 0, 0, 0, 90, 91, 186,
	469, 470, 92, 471, 472, 0, 93, 191, 192, 94,
	437, 455, 473, 474, 195, 0, 465, 0, 448, 0,
	95, 96, 97, 0, 98, 0, 99, 0, 326, 100,
	101, 0, 449, 451, 0, 450, 452, 102, 103, 104,
	105, 475, 106, 476, 477, 509, 0, 107, 0, 0,
	0, 468, 109, 0, 0, 0, 0, 421, 110, 456,
	435, 0, 111, 112, 478, 113, 0, 114, 0, 0,
	327, 0, 115, 466, 0, 204, 0, 116, 117, 462,
	464, 0, 0, 118, 0, 328, 119, 479, 480, 481,
	0, 447, 0, 329, 120, 330, 121, 122, 0, 0,
	467, 331, 123, 332, 0, 124, 0, 0, 125, 0,
	126, 127, 128, 129, 130, 333, 131, 132, 135, 133,
	411, 134, 436, 463, 136, 482, 137, 138, 0, 0,
	0, 0, 0, 139, 214, 334, 140, 335, 457, 141,
	142, 0, 458, 143, 217, 0, 144, 145, 146, 483,
	147, 148, 0, 150, 151, 149, 152, 0, 153, 336,
	154, 155, 425, 156, 0, 241, 157, 158, 49, 159,
	160, 453, 161, 162, 337, 163, 484, 164, 0, 165,
	166, 168, 485, 167, 459, 0, 51, 169, 170, 0,
	223, 486, 487, 0, 0, 171, 460, 461, 434, 172,
	173, 174, 175, 0, 0, 176, 177, 454, 0, 178,
	179, 180, 324, 488, 0, 181, 0, 0, 0, 47,
	182, 183, 184, 185, 412, 48, 440, 428, 429, 430,
	427, 416, 0, 0, 408, 409, 0, 0, 87, 88,
	410, 89, 0, 417, 0, 0, 422, 0, 0, 0,
	90, 91, 186, 469, 470, 92, 471, 472, 0, 93,
	191, 192, 94, 437, 455, 473, 474, 195, 0, 465,
	0, 448, 0, 95, 96, 97, 0, 98, 0, 99,
	0, 326, 100, 101, 0, 449, 451, 0, 450, 452,
	102, 103, 104, 105, 475, 106, 476, 477, 0, 0,
	107, 0, 0, 0, 468, 109, 0, 0, 0, 0,
	421, 110, 456, 435, 0, 111, 112, 478, 113, 0,
	114, 0, 0, 327, 0, 115, 466, 0, 204, 0,
	116, 117, 462, 464, 0, 0, 118, 0, 328, 119,
	479, 480, 481, 0, 447, 0, 329, 120, 330, 121,
	122, 0, 0, 467, 331, 123, 332, 0, 124, 0,
	0, 125, 0, 126, 127, 128, 129, 130, 333, 131,
	132, 135, 133, 411, 134, 436, 463, 136, 482, 137,
	138, 0, 0, 0, 0, 0, 139, 214, 334, 140,
	335, 457, 141, 142, 0, 458, 143, 217, 0, 144,
	145, 146, 483, 147, 148, 0, 150, 151, 149, 152,
	0, 153, 336, 154, 155, 425, 156, 0, 241, 157,
	158, 49, 159, 160, 453, 161, 162, 337, 163, 484,
	164, 0, 165, 166, 168, 485, 167, 459, 0, 51,
	169, 170, 0, 223, 486, 487, 0, 0, 171, 460,
	461, 434, 172, 173, 174, 175, 0, 0, 176, 177,
	454, 0, 178, 179, 180, 324, 488, 0, 181, 0,
	0, 0, 47, 182, 183, 184, 185, 412, 48, 440,
	428, 429, 430, 427, 416, 0, 0, 408, 409, 0,
	0, 87, 88, 410, 89, 0, 417, 0, 0, 422,
	0, 0, 0, 90, 91, 186, 469, 470, 92, 471,
	472, 1041, 93, 191, 192, 94, 437, 455, 473, 474,
	195, 0, 465, 0, 448, 0, 95, 96, 97, 0,
	98, 0, 99, 0, 326, 100, 101, 0, 449, 451,
	0, 450, 452, 102, 103, 104, 105, 475, 106, 476,
	477, 0, 0, 107, 0, 0, 0, 468, 109, 0,
	0, 0, 0, 421, 110, 456, 435, 0, 111, 112,
	478, 113, 0, 114, 0, 1046, 327, 0, 115, 466,
	0, 204, 0, 116, 117, 462, 464, 0, 0, 118,
	0, 328, 119, 479, 480, 481, 0, 447, 0, 329,
	120, 330, 121, 122, 0, 1042, 467, 331, 123, 332,
	0, 124, 0, 0, 125, 0, 126, 127, 128, 129,
	130, 333, 131, 132, 135, 133, 411, 134, 436, 463,
	136, 482, 137, 138, 0, 0, 0, 0, 0, 139,
	214, 334, 140, 335, 457, 141, 142, 0, 458, 143,
	217, 0, 144, 145, 146, 483, 147, 148, 0, 150,
	151, 149, 152, 0, 153, 336, 154, 155, 425, 156,
	0, 241, 157, 158, 0, 159, 160, 453, 161, 162,
	337, 163, 484, 164, 0, 165, 166, 168, 485, 167,
	459, 0, 0, 169, 170, 0, 223, 486, 487, 0,
	1043, 171, 460, 461, 434, 172, 173, 174, 175, 0,
	0, 176, 177, 454, 0, 178, 179, 180, 228, 488,
	0, 181, 0, 0, 0, 0, 182, 183, 184, 185,
	412, 0, 440, 428, 429, 430, 427, 416, 0, 0,
	408, 409, 0, 0, 87, 88, 410, 89, 0, 417,
	0, 0, 422, 0, 0, 0, 90, 91, 186, 469,
	470, 92, 471, 472, 0, 93, 191, 192, 94, 437,
	455, 473, 474, 195, 0, 465, 0, 448, 0, 95,
	96, 97, 0, 98, 0, 99, 0, 326, 100, 101,
	0, 449, 451, 0, 450, 452, 102, 103, 104, 105,
	475, 106, 476, 477, 0, 0, 107, 0, 0, 0,
	468, 109, 0, 0, 0, 0, 421, 110, 456, 435,
	0, 111, 112, 478, 113, 0, 114, 0, 0, 327,
	0, 115, 466, 0, 204, 0, 116, 117, 462, 464,
	0, 0, 118, 0, 328, 119, 479, 480, 481, 0,
	447, 0, 329, 120, 330, 121, 122, 0, 0, 467,
	331, 123, 332, 0, 124, 0, 0, 125, 0, 126,
	127, 128, 129, 130, 333, 131, 132, 135, 133, 411,
	134, 436, 463, 136, 482, 137, 138, 0, 0, 0,
	0, 0, 139, 214, 334, 140, 335, 457, 141, 142,
	0, 458, 143, 217, 0, 144, 145, 146, 483, 147,
	148, 0, 150, 151, 149, 152, 0, 153, 336, 154,
	155, 425, 156, 0, 241, 157, 158, 0, 159, 160,
	453, 161, 162, 337, 163, 484, 164, 0, 165, 166,
	168, 485, 167, 459, 0, 0, 169, 170, 0, 223,
	486, 487, 0, 0, 171, 460, 461, 434, 172, 173,
	174, 175, 0, 0, 176, 177, 454, 0, 178, 179,
	180, 228, 488, 0, 181, 0, 0, 0, 0, 182,
	183, 184, 185, 412, 0, 440, 428, 429, 430, 427,
	416, 0, 0, 408, 409, 0, 0, 87, 88, 410,
	89, 0, 417, 1388, 0, 422, 0, 0, 0, 90,
	91, 186, 469, 470, 92, 471, 472, 0, 93, 191,
	192, 94, 437, 455, 473, 474, 195, 0, 465, 0,
	448, 0, 95, 96, 97, 0, 98, 0, 99, 0,
	326, 100, 101, 0, 449, 451, 0, 450, 452, 102,
	103, 104, 105, 475, 106, 476, 477, 0, 0, 107,
	0, 0, 0, 468, 109, 0, 0, 0, 0, 421,
	110, 456, 435, 0, 111, 112, 478, 113, 0, 114,
	0, 0, 327, 0, 115, 466, 0, 204, 0, 116,
	117, 462, 464, 0, 0, 118, 0, 328, 119, 479,
	480, 481, 0, 447, 0, 329, 120, 330, 121, 122,
	0, 0, 467, 331, 123, 332, 0, 124, 0, 0,
	125, 0, 126, 127, 128, 129, 130, 333, 131, 132,
	135, 133, 411, 134, 436, 463, 136, 482, 137, 138,
	0, 0, 0, 0, 0, 139, 214, 334, 140, 335,
	457, 141, 142, 0, 458, 143, 217, 0, 144, 145,
	146, 483, 147, 148, 0, 150, 151, 149, 152, 0,
	153, 336, 154, 155, 425, 156, 0, 241, 157, 158,
	0, 159, 160, 453, 161, 162, 337, 163, 484, 164,
	0, 165, 166, 168, 485, 167, 459, 0, 0, 169,
	170, 0, 223, 486, 487, 0, 0, 171, 460, 461,
	434, 172, 173, 174, 175, 0, 0, 176, 177, 454,
	0, 178, 179, 180, 228, 488, 0, 181, 0, 0,
	0, 0, 182, 183, 184, 185, 412, 0, 440, 428,
	429, 430, 427, 416, 0, 0, 408, 409, 0, 0,
	87, 88, 410, 89, 0, 417, 1331, 0, 422, 0,
	0, 0, 90, 91, 186, 469, 470, 92, 471, 472,
	0, 93, 191, 192, 94, 437, 455, 473, 474, 195,
	0, 465, 0, 448, 0, 95, 96, 97, 0, 98,
	0, 99, 0, 326, 100, 101, 0, 449, 451, 0,
	450, 452, 102, 103, 104, 105, 475, 106, 476, 477,
	0, 0, 107, 0, 0, 0, 468, 109, 0, 0,
	0, 0, 421, 110, 456, 435, 0, 111, 112, 478,
	113, 0, 114, 0, 0, 327, 0, 115, 466, 0,
	204, 0, 116, 117, 462, 464, 0, 0, 118, 0,
	328, 119, 479, 480, 481, 0, 447, 0, 329, 120,
	330, 121, 122, 0, 0, 467, 331, 123, 332, 0,
	124, 0, 0, 125, 0, 126, 127, 128, 129, 130,
	333, 131, 132, 135, 133, 411, 134, 436, 463, 136,
	482, 137, 138, 0, 0, 0, 0, 0, 139, 214,
	334, 140, 335, 457, 141, 142, 0, 458, 143, 217,
	0, 144, 145, 146, 483, 147, 148, 0, 150, 151,
	149, 152, 0, 153, 336, 154, 155, 425, 156, 0,
	241, 157, 158, 0, 159, 160, 453, 161, 162, 337,
	163, 484, 164, 0, 165, 166, 168, 485, 167, 459,
	0, 0, 169, 170, 0, 223, 486, 487, 0, 0,
	171, 460, 461, 434, 172, 173, 174, 175, 0, 0,
	176, 177, 454, 0, 178, 179, 180, 228, 488, 0,
	181, 0, 0, 0, 0, 182, 183, 184, 185, 412,
	0, 440, 428, 429, 430, 427, 416, 0, 0, 408,
	409, 0, 0, 87, 88, 410, 89, 0, 417, 992,
	0, 422, 0, 0, 0, 90, 91, 186, 469, 470,
	92, 471, 472, 0, 93, 191, 192, 94, 437, 455,
	473, 474, 195, 0, 465, 0, 448, 0, 95, 96,
	97, 0, 98, 0, 99, 0, 326, 100, 101, 0,
	449, 451, 0, 450, 452, 102, 103, 104, 105, 475,
	106, 476, 477, 0, 0, 107, 0, 0, 0, 468,
	109, 0, 0, 0, 0, 421, 110, 456, 435, 0,
	111, 112, 478, 113, 0, 114, 0, 0, 327, 0,
	115, 466, 0, 204, 0, 116, 117, 462, 464, 0,
	0, 118, 0, 328, 119, 479, 480, 481, 0, 447,
	0, 329, 120, 330, 121, 122, 0, 0, 467, 331,
	123, 332, 0, 124, 0, 0, 125, 0, 126, 127,
	128, 129, 130, 333, 131, 132, 135, 133, 411, 134,
	436, 463, 136, 482, 137, 138, 0, 0, 0, 0,
	0, 139, 214, 334, 140, 335, 457, 141, 142, 0,
	458, 143, 217, 0, 144, 145, 146, 483, 147, 148,
	0, 150, 151, 149, 152, 0, 153, 336, 154, 155,
	425, 156, 0, 241, 157, 158, 0, 159, 160, 453,
	161, 162, 337, 163, 484, 164, 0, 165, 166, 168,
	485, 167, 459, 0, 0, 169, 170, 0, 223, 486,
	487, 0, 0, 171, 460, 461, 434, 172, 173, 174,
	175, 0, 0, 176, 177, 454, 0, 178, 179, 180,
	228, 488, 0, 181, 0, 0, 0, 0, 182, 183,
	184, 185, 412, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 408, 409, 0, 0, 0, 0, 410, 753,
	988, 417, 440, 428, 429, 430, 427, 416, 0, 0,
	0, 0, 0, 0, 87, 88, 0, 89, 0, 0,
	0, 0, 422, 0, 0, 0, 90, 91, 186, 469,
	470, 92, 471, 472, 0, 93, 191, 192, 94, 437,
	455, 473, 474, 195, 0, 465, 0, 448, 0, 95,
	96, 97, 0, 98, 0, 99, 0, 326, 100, 101,
	0, 449, 451, 0, 450, 452, 102, 103, 104, 105,
	475, 106, 476, 477, 0, 0, 107, 0, 0, 0,
	468, 109, 0, 0, 0, 0, 421, 110, 456, 435,
	0, 111, 112, 478, 113, 0, 114, 0, 0, 327,
	0, 115, 466, 0, 204, 0, 116, 117, 462, 464,
	0, 0, 118, 0, 328, 119, 479, 480, 481, 0,
	447, 0, 329, 120, 330, 121, 122, 0, 0, 467,
	331, 123, 332, 0, 124, 0, 0, 125, 0, 126,
	127, 128, 129, 130, 333, 131, 132, 135, 133, 411,
	134, 436, 463, 136, 482, 137, 138, 0, 0, 0,
	0, 0, 139, 214, 334, 140, 335, 457, 141, 142,
	0, 458, 143, 217, 0, 144, 145, 146, 483, 147,
	148, 0, 150, 151, 149, 152, 0, 153, 336, 154,
	155, 425, 156, 0, 241, 157, 158, 0, 159, 160,
	453, 161, 162, 337, 163, 484, 164, 0, 165, 166,
	168, 485, 167, 459, 0, 0, 169, 170, 0, 223,
	486, 487, 0, 0, 171, 460, 461, 434, 172, 173,
	174, 175, 0, 0, 176, 177, 454, 0, 178, 179,
	180, 228, 488, 1337, 181, 0, 0, 0, 0, 182,
	183, 184, 185, 412, 0, 440, 428, 429, 430, 427,
	416, 0, 0, 408, 409, 0, 0, 87, 88, 410,
	89, 0, 417, 0, 0, 422, 0, 0, 0, 90,
	91, 186, 469, 470, 92, 471, 472, 0, 93, 191,
	192, 94, 437, 455, 473, 474, 195, 0, 465, 0,
	448, 0, 95, 96, 97, 0, 98, 0, 99, 0,
	326, 100, 101, 0, 449, 451, 0, 450, 452, 102,
	103, 104, 105, 475, 106, 476, 477, 509, 0, 107,
	0, 0, 0, 468, 109, 0, 0, 0, 0, 421,
	110, 456, 435, 0, 111, 112, 478, 113, 0, 114,
	0, 0, 327, 0, 115, 466, 0, 204, 0, 116,
	117, 462, 464, 0, 0, 118, 0, 328, 119, 479,
	480, 481, 0, 447, 0, 329, 120, 330, 121, 122,
	0, 0, 467, 331, 123, 332, 0, 124, 0, 0,
	125, 0, 126, 127, 128, 129, 130, 333, 131, 132,
	135, 133, 411, 134, 436, 463, 136, 482, 137, 138,
	0, 0, 0, 0, 0, 139, 214, 334, 140, 335,
	457, 141, 142, 0, 458, 143, 217, 0, 144, 145,
	146, 483, 147, 148, 0, 150, 151, 149, 152, 0,
	153, 336, 154, 155, 425, 156, 0, 241, 157, 158,
	0, 159, 160, 453, 161, 162, 337, 163, 484, 164,
	0, 165, 166, 168, 485, 167, 459, 0, 0, 169,
	170, 0, 223, 486, 487, 0, 0, 171, 460, 461,
	434, 172, 173, 174, 175, 0, 0, 176, 177, 454,
	0, 178, 179, 180, 228, 488, 0, 181, 0, 0,
	0, 0, 182, 183, 184, 185, 412, 0, 440, 428,
	429, 430, 427, 416, 0, 0, 408, 409, 0, 0,
	87, 88, 410, 89, 0, 417, 0, 0, 422, 0,
	0, 0, 90, 91, 186, 469, 470, 92, 471, 472,
	0, 93, 191, 192, 94, 437, 455, 473, 474, 195,
	0, 465, 0, 448, 0, 95, 96, 97, 0, 98,
	0, 99, 0, 326, 100, 101, 0, 449, 451, 0,
	450, 452, 102, 103, 104, 105, 475, 106, 476, 477,
	0, 0, 107, 0, 0, 0, 468, 109, 0, 0,
	0, 0, 421, 110, 456, 435, 0, 111, 112, 478,
	113, 0, 114, 0, 0, 327, 0, 115, 466, 0,
	204, 0, 116, 117, 462, 464, 0, 0, 118, 0,
	328, 119, 479, 480, 481, 0, 447, 0, 329, 120,
	330, 121, 122, 0, 0, 467, 331, 123, 332, 0,
	124, 0, 0, 125, 0, 126, 127, 128, 129, 130,
	333, 131, 132, 135, 133, 411, 134, 436, 463, 136,
	482, 137, 138, 0, 0, 0, 0, 0, 139, 214,
	334, 140, 335, 457, 141, 142, 0, 458, 143, 217,
	0, 144, 145, 146, 483, 147, 148, 0, 150, 151,
	149, 152, 0, 153, 336, 154, 155, 425, 156, 0,
	241, 157, 158, 0, 159, 160, 453, 161, 162, 337,
	163, 484, 164, 0, 165, 166, 168, 485, 167, 459,
	0, 0, 169, 170, 0, 223, 486, 487, 0, 0,
	171, 460, 461, 434, 172, 173, 174, 175, 0, 0,
	176, 177, 454, 0, 178, 179, 180, 228, 488, 0,
	181, 0, 0, 0, 0, 182, 183, 184, 185, 412,
	0, 440, 428, 429, 430, 427, 416, 0, 0, 408,
	409, 406, 0, 87, 88, 410, 89, 0, 417, 0,
	0, 422, 0, 0, 0, 90, 91, 186, 469, 470,
	92, 471, 472, 0, 93, 191, 192, 94, 437, 455,
	473, 474, 195, 0, 465, 0, 448, 0, 95, 96,
	97, 0, 98, 0, 99, 0, 326, 100, 101, 0,
	449, 451, 0, 450, 452, 102, 103, 104, 105, 475,
	106, 476, 477, 0, 0, 107, 0, 0, 0, 468,
	109, 0, 0, 0, 0, 421, 110, 456, 435, 0,
	111, 112, 478, 113, 0, 114, 0, 1046, 327, 0,
	115, 466, 0, 204, 0, 116, 117, 462, 464, 0,
	0, 118, 0, 328, 119, 479, 480, 481, 0, 447,
	0, 329, 120, 330, 121, 122, 0, 0, 467, 331,
	123, 332, 0, 124, 0, 0, 125, 0, 126, 127,
	128, 129, 130, 333, 131, 132, 135, 133, 411, 134,
	436, 463, 136, 482, 137, 138, 0, 0, 0, 0,
	0, 139, 214, 334, 140, 335, 457, 141, 142, 0,
	458, 143, 217, 0, 144, 145, 146, 483, 147, 148,
	0, 150, 151, 149, 152, 0, 153, 336, 154, 155,
	425, 156, 0, 241, 157, 158, 0, 159, 160, 453,
	161, 162, 337, 163, 484, 164, 0, 165, 166, 168,
	485, 167, 459, 0, 0, 169, 170, 0, 223, 486,
	487, 0, 0, 171, 460, 461, 434, 172, 173, 174,
	175, 0, 0, 176, 177, 454, 0, 178, 179, 180,
	228, 488, 0, 181, 0, 0, 0, 0, 182, 183,
	184, 185, 412, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 408, 409, 0, 0, 0, 0, 410, 0,
	0, 417, 440, 428, 429, 430, 427, 416, 0, 0,
	0, 0, 0, 0, 87, 88, 694, 89, 0, 0,
	0, 0, 422, 0, 0, 0, 90, 91, 186, 469,
	470, 92, 471, 472, 0, 93, 191, 192, 94, 437,
	455, 473, 474, 195, 0, 465, 0, 448, 0, 95,
	96, 97, 0, 98, 0, 99, 0, 326, 100, 101,
	0, 449, 451, 0, 450, 452, 102, 103, 104, 105,
	475, 106, 476, 477, 0, 0, 107, 0, 0, 0,
	468, 109, 0, 0, 0, 0, 421, 110, 456, 435,
	0, 111, 112, 478, 113, 0, 114, 0, 0, 327,
	0, 115, 466, 0, 204, 0, 116, 117, 462, 464,
	0, 0, 118, 0, 328, 119, 479, 480, 481, 0,
	447, 0, 329, 120, 330, 121, 122, 0, 0, 467,
	331, 123, 332, 0, 124, 0, 0, 125, 0, 126,
	127, 128, 129, 130, 333, 131, 132, 135, 133, 411,
	134, 436, 463, 136, 482, 137, 138, 0, 0, 0,
	0, 0, 139, 214, 334, 140, 335, 457, 141, 142,
	0, 458, 143, 217, 0, 144, 145, 146, 483, 147,
	148, 0, 150, 151, 149, 152, 0, 153, 336, 154,
	155, 425, 156, 0, 241, 157, 158, 0, 159, 160,
	453, 161, 162, 337, 163, 484, 164, 0, 165, 166,
	168, 485, 167, 459, 0, 0, 169, 170, 0, 223,
	486, 487, 0, 0, 171, 460, 461, 434, 172, 173,
	174, 175, 0, 0, 176, 177, 454, 0, 178, 179,
	180, 228, 488, 0, 181, 0, 0, 0, 0, 182,
	183, 184, 185, 412, 0, 440, 428, 429, 430, 427,
	416, 0, 0, 408, 409, 0, 0, 87, 88, 410,
	89, 0, 417, 0, 0, 422, 0, 0, 0, 90,
	91, 186, 469, 470, 92, 471, 472, 0, 93, 191,
	192, 94, 437, 455, 473, 474, 195, 0, 465, 0,
	448, 0, 95, 96, 97, 0, 98, 0, 99, 0,
	326, 100, 1661, 0, 449, 451, 0, 450, 452, 102,
	103, 104, 105, 475, 106, 476, 477, 0, 0, 107,
	0, 0, 0, 468, 109, 0, 0, 0, 0, 421,
	110, 456, 435, 0, 111, 112, 478, 113, 0, 114,
	0, 0, 327, 0, 115, 466, 0, 204, 0, 116,
	117, 462, 464, 0, 0, 118, 0, 328, 119, 479,
	480, 481, 0, 447, 0, 329, 120, 330, 121, 122,
	0, 0, 467, 331, 123, 332, 0, 124, 0, 0,
	125, 0, 126, 127, 128, 129, 130, 333, 131, 132,
	135, 133, 411, 134, 436, 463, 136, 482, 137, 138,
	0, 0, 0, 0, 0, 139, 214, 334, 140, 335,
	457, 141, 142, 0, 458, 143, 217, 0, 144, 145,
	146, 483, 147, 148, 0, 150, 151, 149, 152, 0,
	153, 336, 154, 155, 425, 156, 0, 241, 157, 158,
	0, 159, 160, 453, 161, 162, 337, 163, 484, 164,
	0, 165, 166, 168, 485, 167, 459, 0, 0, 169,
	170, 0, 223, 486, 487, 0, 0, 171, 460, 461,
	434, 172, 173, 1660, 175, 0, 0, 176, 177, 454,
	0, 178, 179, 180, 228, 488, 0, 181, 0, 0,
	0, 0, 182, 183, 184, 185, 412, 0, 440, 428,
	429, 430, 427, 416, 0, 0, 408, 409, 0, 0,
	87, 88, 410, 89, 0, 417, 0, 0, 422, 0,
	0, 0, 90, 91, 1659, 469, 470, 92, 471, 472,
	0, 93, 191, 192, 94, 437, 455, 473, 474, 195,
	0, 465, 0, 448, 0, 95, 96, 97, 0, 98,
	0, 99, 0, 326, 100, 1661, 0, 449, 451, 0,
	450, 452, 102, 103, 104, 105, 475, 106, 476, 477,
	0, 0, 107, 0, 0, 0, 468, 109, 0, 0,
	0, 0, 421, 110, 456, 435, 0, 111, 112, 478,
	113, 0, 114, 0, 0, 327, 0, 115, 466, 0,
	204, 0, 116, 117, 462, 464, 0, 0, 118, 0,
	328, 119, 479, 480, 481, 0, 447, 0, 329, 120,
	330, 121, 122, 0, 0, 467, 331, 123, 332, 0,
	124, 0, 0, 125, 0, 126, 127, 128, 129, 130,
	333, 131, 132, 135, 133, 411, 134, 436, 463, 136,
	482, 137, 138, 0, 0, 0, 0, 0, 139, 214,
	334, 140, 335, 457, 141, 142, 0, 458, 143, 217,
	0, 144, 145, 146, 483, 147, 148, 0, 150, 151,
	149, 152, 0, 153, 336, 154, 155, 425, 156, 0,
	241, 157, 158, 0, 159, 160, 453, 161, 162, 337,
	163, 484, 164, 0, 165, 166, 168, 485, 167, 459,
	0, 0, 169, 170, 0, 223, 486, 487, 0, 0,
	171, 460, 461, 434, 172, 173, 1660, 175, 0, 0,
	176, 177, 454, 0, 178, 179, 180, 228, 488, 0,
	181, 0, 0, 0, 0, 182, 183, 184, 185, 412,
	0, 440, 428, 429, 430, 427, 416, 0, 0, 408,
	409, 0, 0, 87, 88, 410, 89, 0, 417, 0,
	0, 422, 0, 0, 0, 90, 91, 186, 469, 470,
	92, 471, 472, 0, 93, 191, 192, 94, 437, 455,
	473, 474, 195, 0, 465, 0, 448, 0, 95, 96,
	97, 0, 98, 0, 99, 0, 326, 100, 101, 0,
	449, 451, 0, 450, 452, 102, 103, 104, 105, 475,
	106, 476, 477, 0, 0, 107, 0, 0, 0, 468,
	109, 0, 0, 0, 0, 421, 110, 456, 435, 0,
	111, 112, 478, 113, 0, 114, 0, 0, 327, 0,
	115, 466, 0, 204, 0, 116, 117, 462, 464, 0,
	0, 118, 0, 328, 119, 479, 480, 481, 0, 447,
	0, 329, 120, 330, 121, 122, 0, 0, 467, 331,
	123, 332, 0, 124, 0, 0, 125, 0, 126, 127,
	128, 129, 130, 333, 131, 132, 135, 133, 411, 134,
	436, 463, 136, 482, 137, 138, 0, 0, 0, 0,
	0, 139, 214, 334, 140, 335, 457, 141, 142, 0,
	458, 143, 217, 0, 144, 145, 146, 483, 147, 148,
	0, 150, 151, 149, 152, 0, 153, 336, 154, 155,
	425, 156, 0, 241, 157, 158, 0, 159, 160, 453,
	161, 162, 337, 163, 484, 164, 0, 165, 166, 168,
	485, 167, 459, 0, 0, 169, 170, 0, 223, 486,
	487, 0, 0, 171, 460, 461, 434, 172, 173, 174,
	175, 0, 0, 176, 177, 454, 0, 178, 179, 180,
	228, 488, 0, 181, 0, 0, 0, 0, 182, 183,
	184, 185, 412, 0, 440, 428, 429, 430, 427, 416,
	0, 0, 408, 409, 0, 0, 87, 88, 410, 89,
	0, 417, 0, 0, 422, 0, 0, 0, 90, 91,
	186, 469, 470, 92, 471, 472, 0, 93, 191, 192,
	94, 437, 455, 473, 474, 195, 0, 465, 0, 448,
	0, 95, 96, 97, 0, 98, 0, 99, 0, 326,
	100, 101, 0, 449, 451, 0, 450, 452, 102, 103,
	104, 105, 475, 106, 476, 477, 0, 0, 107, 0,
	0, 0, 468, 109, 0, 0, 0, 0, 421, 110,
	456, 435, 0, 111, 112, 478, 113, 0, 114, 0,
	0, 327, 0, 115, 466, 0, 204, 0, 116, 117,
	462, 464, 0, 0, 118, 0, 328, 119, 479, 480,
	481, 0, 447, 0, 329, 120, 330, 121, 122, 0,
	0, 467, 331, 123, 332, 0, 124, 0, 0, 125,
	0, 126, 127, 128, 129, 130, 333, 131, 132, 135,
	133, 0, 134, 436, 463, 136, 482, 137, 138, 0,
	0, 0, 0, 0, 139, 214, 334, 140, 335, 457,
	141, 142, 0, 458, 143, 217, 0, 144, 145, 146,
	483, 147, 148, 0, 150, 151, 149, 152, 0, 153,
	336, 154, 155, 1036, 156, 0, 241, 157, 158, 0,
	159, 160, 453, 161, 162, 337, 163, 484, 164, 0,
	165, 166, 168, 485, 167, 459, 0, 0, 169, 170,
	0, 223, 486, 487, 0, 0, 171, 460, 461, 434,
	172, 173, 174, 175, 0, 0, 176, 177, 454, 0,
	178, 179, 180, 228, 488, 0, 181, 0, 0, 0,
	0, 182, 183, 184, 185, 440, 428, 429, 430, 427,
	416, 0, 0, 0, 0, 1032, 1033, 87, 88, 0,
	89, 1034, 0, 0, 1035, 422, 0, 0, 0, 90,
	91, 0, 469, 470, 92, 471, 472, 0, 93, 191,
	192, 94, 437, 455, 473, 474, 195, 0, 465, 0,
	448, 0, 95, 96, 97, 0, 98, 0, 99, 0,
	326, 100, 1661, 0, 449, 451, 0, 450, 452, 102,
	103, 104, 105, 475, 106, 476, 477, 0, 0, 107,
	0, 0, 0, 468, 109, 0, 0, 0, 0, 421,
	110, 456, 435, 0, 111, 112, 478, 113, 0, 114,
	0, 0, 327, 0, 115, 466, 0, 204, 0, 116,
	117, 462, 464, 0, 0, 118, 0, 328, 119, 479,
	480, 481, 0, 447, 0, 0, 120, 330, 121, 122,
	0, 0, 467, 331, 123, 0, 0, 124, 0, 0,
	125, 0, 126, 127, 128, 129, 130, 333, 131, 132,
	135, 133, 411, 134, 436, 463, 136, 482, 137, 138,
	0, 0, 0, 0, 0, 139, 214, 334, 140, 335,
	457, 141, 142, 0, 458, 143, 217, 0, 144, 145,
	146, 483, 147, 148, 0, 150, 151, 149, 152, 0,
	153, 336, 154, 155, 425, 156, 0, 241, 157, 158,
	0, 159, 160, 453, 161, 162, 0, 163, 484, 164,
	0, 165, 166, 168, 485, 167, 459, 0, 0, 169,
	170, 0, 223, 486, 487, 0, 0, 171, 460, 461,
	434, 172, 173, 1660, 175, 0, 0, 176, 177, 454,
	0, 178, 179, 180, 228, 488, 0, 181, 0, 0,
	0, 0, 182, 183, 184, 185, 440, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 408, 409, 87, 88,
	0, 89, 410, 0, 0, 417, 0, 0, 0, 0,
	90, 91, 186, 187, 188, 92, 189, 190, 0, 93,
	191, 192, 94, 0, 455, 193, 194, 195, 0, 465,
	0, 448, 0, 95, 96, 97, 0, 98, 0, 99,
	0, 326, 100, 101, 0, 449, 451, 0, 450, 452,
	102, 103, 104, 105, 197, 106, 198, 199, 0, 0,
	107, 0, 0, 0, 108, 109, 0, 0, 0, 0,
	200, 110, 456, 0, 0, 111, 112, 202, 113, 0,
	114, 0, 0, 327, 0, 115, 466, 0, 204, 0,
	116, 117, 462, 464, 0, 0, 118, 0, 328, 119,
	207, 208, 209, 0, 210, 0, 329, 120, 330, 121,
	122, 0, 0, 467, 331, 123, 332, 0, 124, 0,
	0, 125, 0, 126, 127, 128, 129, 130, 333, 131,
	132, 135, 133, 0, 134, 0, 463, 136, 213, 137,
	138, 0, 0, 0, 0, 0, 139, 214, 334, 140,
	335, 457, 141, 142, 0, 458, 143, 217, 0, 144,
	145, 146, 218, 147, 148, 0, 150, 151, 149, 152,
	0, 153, 336, 154, 155, 219, 156, 0, 241, 157,
	158, 0, 159, 160, 453, 161, 162, 337, 163, 220,
	164, 0, 165, 166, 168, 221, 167, 459, 0, 0,
	169, 170, 0, 223, 224, 225, 0, 0, 171, 460,
	461, 0, 172, 173, 174, 175, 0, 0, 176, 177,
	454, 0, 178, 179, 180, 228, 229, 0, 181, 0,
	0, 0, 0, 182, 183, 184, 185, 320, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	88, 0, 89, 0, 0, 0, 1447, 0, 0, 0,
	0, 90, 91, 186, 187, 188, 92, 189, 190, 0,
	93, 191, 192, 94, 0, 0, 193, 194, 195, 0,
	196, 0, 325, 0, 95, 96, 97, 0, 98, 0,
	99, 0, 326, 100, 101, 0, 0, 0, 0, 0,
	0, 102, 103, 104, 105, 197, 106, 198, 199, 0,
	0, 107, 0, 0, 0, 108, 109, 0, 0, 0,
	0, 200, 110, 201, 0, 0, 111, 112, 202, 113,
	0, 114, 0, 0, 327, 0, 115, 203, 0, 204,
	0, 116, 117, 205, 206, 0, 0, 118, 0, 328,
	119, 207, 208, 209, 0, 210, 0, 329, 120, 330,
	121, 122, 0, 0, 211, 331, 123, 332, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 333,
	131, 132, 135, 133, 0, 134, 0, 212, 136, 213,
	137, 138, 0, 0, 0, 0, 0, 139, 214, 334,
	140, 335, 215, 141, 142, 0, 216, 143, 217, 0,
	144, 145, 146, 218, 147, 148, 0, 150, 151, 149,
	152, 0, 153, 336, 154, 155, 219, 156, 0, 241,
	157, 158, 49, 159, 160, 0, 161, 162, 337, 163,
	220, 164, 0, 165, 166, 168, 221, 167, 222, 0,
	51, 169, 170, 0, 223, 224, 225, 0, 0, 171,
	226, 227, 0, 172, 173, 174, 175, 0, 0, 176,
	177, 0, 0, 178, 179, 180, 324, 229, 0, 181,
	0, 0, 0, 47, 182, 183, 184, 185, 0, 48,
	320, 565, 569, 0, 570, 560, 0, 0, 0, 0,
	0, 0, 87, 88, 0, 89, 0, 46, 0, 0,
	0, 0, 0, 0, 90, 91, 186, 187, 188, 92,
	189, 190, 0, 93, 191, 192, 94, 0, 0, 193,
	194, 195, 0, 196, 0, 325, 0, 95, 96, 97,
	0, 98, 0, 99, 0, 326, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 197, 106,
	198, 199, 573, 0, 107, 0, 0, 0, 108, 109,
	0, 0, 0, 0, 200, 110, 201, 562, 0, 111,
	112, 202, 113, 0, 114, 0, 0, 327, 0, 115,
	203, 0, 204, 0, 116, 117, 205, 206, 0, 0,
	118, 0, 328, 119, 207, 208, 209, 0, 210, 0,
	329, 120, 330, 121, 122, 0, 0, 211, 331, 123,
	332, 0, 124, 0, 0, 125, 0, 126, 127, 128,
	129, 130, 333, 131, 132, 135, 133, 0, 134, 0,
	212, 136, 213, 137, 138, 0, 563, 0, 0, 0,
	139, 214, 334, 140, 335, 215, 141, 142, 0, 216,
	143, 217, 0, 144, 145, 146, 218, 147, 148, 0,
	150, 151, 149, 152, 0, 153, 336, 154, 155, 219,
	156, 0, 241, 157, 158, 0, 159, 160, 0, 161,
	162, 337, 163, 220, 164, 0, 165, 166, 168, 221,
	167, 222, 0, 0, 169, 170, 0, 223, 224, 225,
	0, 0, 171, 226, 227, 561, 172, 173, 174, 175,
	0, 0, 176, 177, 0, 0, 178, 179, 180, 228,
	229, 0, 181, 0, 0, 0, 0, 182, 183, 184,
	185, 320, 565, 569, 0, 570, 560, 0, 0, 0,
	0, 571, 566, 87, 88, 0, 89, 0, 0, 0,
	0, 0, 0, 0, 0, 90, 91, 186, 187, 188,
	92, 189, 190, 0, 93, 191, 192, 94, 0, 0,
	193, 194, 195, 0, 196, 0, 325, 0, 95, 96,
	97, 0, 98, 0, 99, 0, 326, 100, 101, 0,
	0, 0, 0, 0, 0, 102, 103, 104, 105, 197,
	106, 198, 199, 556, 0, 107, 0, 0, 0, 108,
	109, 0, 0, 0, 0, 200, 110, 201, 562, 0,
	111, 112, 202, 113, 0, 114, 0, 0, 327, 0,
	115, 203, 0, 204, 0, 116, 117, 205, 206, 0,
	0, 118, 0, 328, 119, 207, 208, 209, 0, 210,
	0, 329, 120, 330, 121, 122, 0, 0, 211, 331,
	123, 332, 0, 124, 0, 0, 125, 0, 126, 127,
	128, 129, 130, 333, 131, 132, 135, 133, 0, 134,
	0, 212, 136, 213, 137, 138, 0, 563, 0, 0,
	0, 139, 214, 334, 140, 335, 215, 141, 142, 0,
	216, 143, 217, 0, 144, 145, 146, 218, 147, 148,
	0, 150, 151, 149, 152, 0, 153, 336, 154, 155,
	219, 156, 0, 241, 157, 158, 0, 159, 160, 0,
	161, 162, 337, 163, 220, 164, 0, 165, 166, 168,
	221, 167, 222, 0, 0, 169, 170, 0, 223, 224,
	225, 0, 0, 171, 226, 227, 561, 172, 173, 174,
	175, 0, 0, 176, 177, 0, 0, 178, 179, 180,
	228, 229, 0, 181, 0, 0, 0, 0, 182, 183,
	184, 185, 320, 565, 569, 0, 570, 560, 0, 0,
	0, 0, 571, 566, 87, 88, 0, 89, 0, 0,
	0, 0, 0, 0, 0, 0, 90, 91, 186, 187,
	188, 92, 189, 190, 0, 93, 191, 192, 94, 0,
	0, 193, 194, 195, 0, 196, 0, 325, 0, 95,
	96, 97, 0, 98, 0, 99, 0, 326, 100, 101,
	0, 0, 0, 0, 0, 0, 102, 103, 104, 105,
	197, 106, 198, 199, 0, 0, 107, 0, 0, 0,
	108, 109, 0, 0, 0, 0, 200, 110, 201, 562,
	0, 111, 112, 202, 113, 0, 114, 0, 0, 327,
	0, 115, 203, 0, 204, 0, 116, 117, 205, 206,
	0, 0, 118, 0, 328, 119, 207, 208, 209, 0,
	210, 0, 329, 120, 330, 121, 122, 0, 0, 211,
	331, 123, 332, 0, 124, 0, 0, 125, 0, 126,
	127, 128, 129, 130, 333, 131, 132, 135, 133, 0,
	134, 0, 212, 136, 213, 137, 138, 0, 563, 0,
	0, 0, 139, 214, 334, 140, 335, 215, 141, 142,
	0, 216, 143, 217, 0, 144, 145, 146, 218, 147,
	148, 0, 150, 151, 149, 152, 0, 153, 336, 154,
	155, 219, 156, 0, 241, 157, 158, 0, 159, 160,
	0, 161, 162, 337, 163, 220, 164, 0, 165, 166,
	168, 221, 167, 222, 0, 0, 169, 170, 0, 223,
	224, 225, 0, 0, 171, 226, 227, 561, 172, 173,
	174, 175, 0, 0, 176, 177, 0, 0, 178, 179,
	180, 228, 229, 84, 181, 0, 0, 0, 0, 182,
	183, 184, 185, 0, 0, 87, 88, 0, 89, 0,
	0, 0, 0, 571, 566, 0, 0, 90, 91, 186,
	187, 188, 92, 189, 190, 0, 93, 191, 192, 94,
	0, 0, 193, 194, 195, 0, 196, 0, 0, 0,
	95, 96, 97, 0, 98, 0, 99, 0, 0, 100,
	101, 0, 0, 0, 0, 0, 0, 102, 103, 104,
	105, 197, 106, 198, 199, 0, 0, 107, 0, 0,
	0, 108, 109, 0, 0, 0, 0, 200, 110, 201,
	0, 0, 111, 112, 202, 113, 0, 114, 0, 0,
	0, 0, 115, 203, 0, 204, 0, 116, 117, 205,
	206, 0, 0, 118, 0, 0, 119, 207, 208, 209,
	0, 210, 0, 0, 120, 0, 121, 122, 0, 0,
	211, 0, 123, 0, 0, 124, 0, 0, 125, 0,
	126, 127, 128, 129, 130, 0, 131, 132, 135, 133,
	0, 134, 0, 212, 136, 213, 137, 138, 0, 0,
	294, 0, 0, 139, 214, 0, 140, 0, 215, 141,
	142, 0, 216, 143, 217, 0, 144, 145, 146, 218,
	147, 148, 0, 150, 151, 149, 152, 0, 153, 0,
	154, 155, 219, 156, 0, 241, 157, 158, 49, 159,
	160, 0, 161, 162, 0, 163, 220, 164, 0, 165,
	166, 168, 221, 167, 222, 0, 51, 169, 170, 0,
	223, 224, 225, 0, 0, 171, 226, 227, 0, 172,
	173, 174, 175, 0, 0, 176, 177, 0, 0, 178,
	179, 180, 324, 229, 0, 181, 0, 0, 0, 47,
	182, 183, 184, 185, 84, 48, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 87, 88, 0, 89,
	0, 0, 0, 902, 0, 0, 0, 0, 90, 91,
	186, 187, 188, 92, 189, 190, 0, 93, 191, 192,
	94, 0, 0, 193, 194, 195, 0, 196, 0, 0,
	0, 95, 96, 97, 0, 98, 0, 99, 0, 0,
	100, 101, 0, 0, 0, 0, 0, 0, 102, 103,
	104, 105, 197, 106, 198, 199, 0, 0, 107, 0,
	0, 0, 108, 109, 0, 0, 0, 0, 200, 110,
	201, 0, 0, 111, 112, 202, 113, 0, 114, 0,
	0, 0, 0, 115, 203, 0, 204, 0, 116, 117,
	205, 206, 0, 0, 118, 0, 0, 119, 207, 208,
	209, 0, 210, 0, 0, 120, 0, 121, 122, 0,
	0, 211, 0, 123, 0, 0, 124, 0, 0, 125,
	0, 126, 127, 128, 129, 130, 0, 131, 132, 135,
	133, 0, 134, 0, 212, 136, 213, 137, 138, 0,
	0, 0, 0, 0, 139, 214, 0, 140, 0, 215,
	141, 142, 0, 216, 143, 217, 0, 144, 145, 146,
	218, 147, 148, 0, 150, 151, 149, 152, 0, 153,
	0, 154, 155, 219, 156, 0, 241, 157, 158, 49,
	159, 160, 0, 161, 162, 0, 163, 220, 164, 0,
	165, 166, 168, 221, 167, 222, 0, 51, 169, 170,
	0, 223, 224, 225, 0, 0, 171, 226, 227, 0,
	172, 173, 174, 175, 0, 0, 176, 177, 0, 0,
	178, 179, 180, 324, 229, 0, 181, 0, 0, 0,
	47, 182, 183, 184, 185, 84, 48, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 87, 88, 0,
	89, 0, 0, 0, 46, 0, 1142, 0, 0, 90,
	91, 186, 187, 188, 92, 189, 190, 0, 93, 191,
	192, 94, 0, 0, 193, 194, 195, 0, 196, 0,
	0, 0, 95, 96, 97, 0, 98, 0, 99, 0,
	0, 100, 101, 0, 0, 0, 0, 0, 0, 102,
	103, 104, 105, 197, 106, 198, 199, 0, 0, 107,
	0, 0, 0, 108, 109, 0, 0, 0, 0, 200,
	110, 201, 0, 0, 111, 112, 202, 113, 0, 114,
	0, 0, 0, 0, 115, 203, 0, 204, 0, 116,
	117, 205, 206, 0, 0, 118, 0, 0, 119, 207,
	208, 209, 0, 210, 0, 0, 120, 0, 121, 122,
	0, 0, 211, 0, 123, 0, 0, 124, 0, 0,
	125, 0, 126, 127, 128, 129, 130, 0, 131, 132,
	135, 133, 0, 134, 0, 212, 136, 213, 137, 138,
	0, 0, 0, 0, 0, 139, 214, 0, 140, 0,
	215, 141, 142, 0, 216, 143, 217, 0, 144, 145,
	146, 218, 147, 148, 0, 150, 151, 149, 152, 0,
	153, 0, 154, 155, 219, 156, 0, 241, 157, 158,
	0, 159, 160, 0, 161, 162, 0, 163, 220, 164,
	0, 165, 166, 168, 221, 167, 222, 0, 0, 169,
	170, 0, 223, 224, 225, 0, 0, 171, 226, 227,
	0, 172, 173, 174, 175, 0, 0, 176, 177, 0,
	0, 178, 179, 180, 228, 229, 0, 181, 0, 0,
	0, 0, 182, 183, 184, 185, 84, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 87, 88,
	0, 89, 0, 0, 0, 0, 398, 0, 0, 0,
	90, 91, 186, 187, 188, 92, 189, 190, 0, 93,
	191, 192, 94, 0, 0, 193, 194, 195, 0, 196,
	0, 0, 0, 95, 96, 97, 0, 98, 0, 99,
	0, 0, 100, 101, 0, 0, 0, 0, 0, 0,
	102, 103, 104, 105, 197, 106, 198, 199, 0, 0,
	107, 0, 0, 0, 108, 109, 0, 0, 0, 0,
	200, 110, 201, 0, 0, 111, 112, 202, 113, 0,
	114, 0, 0, 0, 0, 115, 203, 0, 204, 0,
	116, 117, 205, 206, 0, 0, 118, 0, 0, 119,
	207, 208, 209, 0, 210, 0, 0, 120, 0, 121,
	122, 0, 0, 211, 0, 123, 0, 0, 124, 0,
	0, 125, 0, 126, 127, 128, 129, 130, 0, 131,
	132, 135, 133, 0, 134, 0, 212, 136, 213, 137,
	138, 0, 0, 294, 0, 0, 139, 214, 0, 140,
	0, 215, 141, 142, 0, 216, 143, 217, 0, 144,
	145, 146, 218, 147, 148, 0, 150, 151, 149, 152,
	0, 153, 0, 154, 155, 219, 156, 0, 241, 157,
	158, 0, 159, 160, 0, 161, 162, 0, 163, 220,
	164, 0, 165, 166, 168, 221, 167, 222, 0, 0,
	169, 170, 0, 223, 224, 225, 0, 0, 171, 226,
	227, 0, 172, 173, 174, 175, 0, 0, 176, 177,
	0, 0, 178, 179, 180, 228, 229, 0, 181, 0,
	0, 0, 0, 182, 183, 184, 185, 84, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	88, 0, 89, 0, 0, 0, 902, 0, 0, 0,
	0, 90, 91, 186, 187, 188, 92, 189, 190, 0,
	93, 191, 192, 94, 0, 0, 193, 194, 195, 0,
	196, 0, 0, 0, 95, 96, 97, 0, 98, 0,
	99, 0, 0, 100, 101, 0, 0, 0, 0, 0,
	0, 102, 103, 104, 105, 197, 106, 198, 199, 0,
	0, 107, 0, 0, 0, 108, 109, 0, 0, 0,
	0, 200, 110, 201, 0, 0, 111, 112, 202, 113,
	0, 114, 0, 0, 0, 0, 115, 203, 0, 204,
	0, 116, 117, 205, 206, 0, 0, 118, 0, 0,
	119, 207, 208, 209, 0, 210, 0, 0, 120, 0,
	121, 122, 0, 0, 211, 0, 123, 0, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 0,
	131, 132, 135, 133, 0, 134, 0, 212, 136, 213,
	137, 138, 0, 0, 0, 0, 0, 139, 214, 0,
	140, 0, 215, 141, 142, 0, 216, 143, 217, 0,
	144, 145, 146, 218, 147, 148, 0, 150, 151, 149,
	152, 0, 153, 0, 154, 155, 219, 156, 0, 241,
	157, 158, 0, 159, 160, 0, 161, 162, 0, 163,
	220, 164, 0, 165, 166, 168, 221, 167, 222, 0,
	0, 169, 170, 0, 223, 224, 225, 0, 0, 171,
	226, 227, 0, 172, 173, 174, 175, 0, 0, 176,
	177, 0, 0, 178, 179, 180, 228, 229, 0, 181,
	0, 0, 0, 0, 182, 183, 184, 185, 84, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	87, 88, 0, 89, 0, 0, 0, 838, 0, 0,
	0, 0, 90, 91, 186, 187, 188, 92, 189, 190,
	0, 93, 191, 192, 94, 0, 0, 193, 194, 195,
	0, 196, 0, 0, 0, 95, 96, 97, 0, 98,
	0, 99, 0, 0, 100, 101, 0, 0, 0, 0,
	0, 0, 102, 103, 104, 105, 197, 106, 198, 199,
	0, 0, 107, 0, 0, 0, 108, 109, 0, 0,
	0, 0, 200, 110, 201, 0, 0, 111, 112, 202,
	113, 0, 114, 0, 0, 0, 0, 115, 203, 0,
	204, 0, 116, 117, 205, 206, 0, 0, 118, 0,
	0, 119, 207, 208, 209, 0, 210, 0, 0, 120,
	0, 121, 122, 0, 0, 211, 0, 123, 0, 0,
	124, 0, 0, 125, 0, 126, 127, 128, 129, 130,
	0, 131, 132, 135, 133, 0, 134, 0, 212, 136,
	213, 137, 138, 0, 0, 0, 0, 0, 139, 214,
	0, 140, 0, 215, 141, 142, 0, 216, 143, 217,
	0, 144, 145, 146, 218, 147, 148, 0, 150, 151,
	149, 152, 0, 153, 0, 154, 155, 219, 156, 0,
	241, 157, 158, 0, 159, 160, 0, 161, 162, 0,
	163, 220, 164, 0, 165, 166, 168, 221, 167, 222,
	0, 0, 169, 170, 0, 223, 224, 225, 0, 0,
	171, 226, 227, 0, 172, 173, 174, 175, 0, 0,
	176, 177, 0, 0, 178, 179, 180, 228, 229, 0,
	181, 0, 0, 0, 0, 182, 183, 184, 185, 84,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 88, 0, 89, 0, 0, 0, 1355, 0,
	0, 0, 0, 90, 91, 186, 187, 188, 92, 189,
	190, 0, 93, 191, 192, 94, 0, 0, 193, 194,
	195, 0, 196, 0, 0, 0, 95, 96, 97, 0,
	98, 0, 99, 0, 0, 100, 101, 0, 0, 0,
	0, 0, 0, 102, 103, 104, 105, 197, 106, 198,
	199, 0, 0, 107, 0, 0, 0, 108, 109, 0,
	0, 0, 0, 200, 110, 201, 0, 0, 111, 112,
	202, 113, 0, 114, 0, 0, 0, 0, 115, 203,
	0, 204, 0, 116, 117, 205, 206, 0, 0, 118,
	0, 0, 119, 207, 208, 209, 0, 210, 0, 0,
	120, 0, 121, 122, 0, 0, 211, 0, 123, 0,
	0, 124, 0, 0, 125, 0, 126, 127, 128, 129,
	130, 0, 131, 132, 135, 133, 0, 134, 0, 212,
	136, 213, 137, 138, 0, 0, 0, 0, 0, 139,
	214, 0, 140, 0, 215, 141, 142, 0, 216, 143,
	217, 0, 144, 145, 146, 218, 147, 148, 0, 150,
	151, 149, 152, 0, 153, 0, 154, 155, 219, 156,
	0, 241, 157, 158, 0, 159, 160, 0, 161, 162,
	0, 163, 220, 164, 0, 165, 166, 168, 221, 167,
	222, 0, 0, 169, 170, 0, 223, 224, 225, 0,
	0, 171, 226, 227, 0, 172, 173, 174, 175, 0,
	0, 176, 177, 0, 0, 178, 179, 180, 228, 229,
	0, 181, 0, 0, 0, 0, 182, 183, 184, 185,
	84, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 88, 0, 89, 0, 0, 0, 499,
	0, 0, 0, 0, 90, 91, 186, 187, 188, 92,
	189, 190, 0, 93, 191, 192, 94, 0, 0, 193,
	194, 195, 0, 196, 0, 0, 0, 95, 96, 97,
	0, 98, 0, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 541, 105, 197, 106,
	198, 199, 0, 0, 107, 0, 0, 0, 108, 109,
	0, 0, 0, 0, 200, 110, 201, 0, 0, 111,
	112, 202, 113, 0, 114, 0, 0, 0, 0, 115,
	203, 0, 204, 0, 116, 117, 205, 206, 0, 0,
	118, 0, 0, 119, 207, 208, 209, 0, 210, 0,
	0, 120, 0, 121, 122, 0, 0, 211, 0, 123,
	0, 0, 124, 0, 0, 125, 0, 126, 127, 128,
	129, 130, 0, 131, 132, 135, 133, 0, 134, 0,
	212, 136, 213, 137, 138, 0, 0, 0, 0, 0,
	139, 214, 0, 140, 0, 215, 141, 142, 0, 216,
	143, 217, 0, 144, 145, 146, 218, 147, 148, 0,
	150, 151, 149, 152, 0, 153, 0, 154, 155, 219,
	156, 0, 241, 157, 158, 0, 159, 160, 0, 161,
	162, 0, 163, 220, 164, 0, 165, 166, 168, 221,
	167, 222, 0, 540, 169, 170, 0, 223, 224, 225,
	0, 0, 171, 226, 227, 0, 172, 173, 174, 175,
	0, 84, 176, 177, 0, 0, 178, 179, 180, 228,
	229, 0, 181, 87, 88, 0, 89, 182, 183, 184,
	185, 0, 0, 0, 0, 90, 91, 186, 187, 188,
	92, 189, 190, 544, 93, 191, 192, 94, 0, 0,
	193, 194, 195, 0, 196, 0, 0, 0, 95, 96,
	97, 0, 98, 0, 99, 0, 0, 100, 101, 0,
	0, 0, 0, 0, 0, 102, 103, 104, 105, 197,
	106, 198, 199, 0, 0, 107, 0, 0, 0, 108,
	109, 0, 0, 0, 0, 200, 110, 201, 0, 0,
	111, 112, 202, 113, 0, 114, 0, 0, 0, 0,
	115, 203, 0, 204, 0, 116, 117, 205, 206, 0,
	0, 118, 0, 0, 119, 207, 208, 209, 0, 210,
	0, 0, 120, 0, 121, 122, 0, 0, 211, 0,
	123, 0, 0, 124, 0, 0, 125, 0, 126, 127,
	128, 129, 130, 0, 131, 132, 135, 133, 0, 134,
	0, 212, 136, 213, 137, 138, 0, 0, 0, 0,
	0, 139, 214, 0, 140, 0, 215, 141, 142, 0,
	216, 143, 217, 0, 144, 145, 146, 218, 147, 148,
	0, 150, 151, 149, 152, 0, 153, 0, 154, 155,
	219, 156, 0, 241, 157, 158, 0, 159, 160, 0,
	161, 162, 0, 163, 220, 164, 0, 165, 166, 168,
	221, 167, 222, 0, 0, 169, 170, 0, 223, 224,
	225, 0, 0, 171, 226, 227, 0, 172, 173, 174,
	175, 0, 320, 176, 177, 0, 0, 178, 179, 180,
	228, 229, 0, 181, 87, 88, 0, 89, 182, 183,
	184, 185, 0, 0, 0, 0, 90, 91, 186, 187,
	188, 92, 189, 190, 544, 93, 191, 192, 94, 0,
	0, 193, 194, 195, 0, 196, 0, 325, 0, 95,
	96, 97, 0, 98, 0, 99, 0, 326, 100, 101,
	0, 0, 0, 0, 0, 0, 102, 103, 104, 105,
	197, 106, 198, 199, 0, 0, 107, 0, 0, 0,
	108, 109, 0, 0, 0, 0, 200, 110, 201, 0,
	0, 111, 112, 202, 113, 0, 114, 0, 0, 327,
	0, 115, 203, 0, 204, 0, 116, 117, 205, 206,
	0, 0, 118, 0, 328, 119, 207, 208, 209, 0,
	210, 0, 329, 120, 330, 121, 122, 0, 0, 211,
	331, 123, 332, 0, 124, 0, 0, 125, 0, 126,
	127, 128, 129, 130, 333, 131, 132, 135, 133, 0,
	134, 0, 212, 136, 213, 137, 138, 0, 0, 0,
	0, 0, 139, 214, 334, 140, 335, 215, 141, 142,
	0, 216, 143, 217, 0, 144, 145, 146, 218, 147,
	148, 0, 150, 151, 149, 152, 0, 153, 336, 154,
	155, 219, 156, 0, 241, 157, 158, 0, 159, 160,
	0, 161, 162, 337, 163, 220, 164, 0, 165, 166,
	168, 221, 167, 222, 0, 0, 169, 170, 0, 223,
	224, 225, 0, 0, 171, 226, 227, 0, 172, 173,
	174, 175, 0, 84, 176, 177, 0, 0, 178, 179,
	180, 228, 229, 0, 181, 87, 88, 0, 89, 182,
	183, 184, 185, 0, 0, 0, 0, 90, 91, 186,
	187, 188, 92, 189, 190, 0, 93, 191, 192, 94,
	0, 0, 193, 194, 195, 812, 196, 0, 0, 0,
	95, 96, 97, 0, 98, 810, 99, 0, 0, 100,
	101, 0, 0, 0, 0, 0, 0, 102, 103, 104,
	105, 197, 106, 198, 199, 0, 0, 107, 0, 0,
	0, 108, 109, 0, 0, 0, 0, 200, 110, 201,
	0, 0, 111, 112, 202, 113, 0, 114, 815, 0,
	0, 0, 115, 203, 0, 204, 0, 116, 117, 205,
	206, 0, 879, 118, 0, 0, 119, 207, 208, 209,
	0, 210, 0, 0, 120, 0, 121, 122, 0, 0,
	211, 0, 123, 0, 0, 124, 0, 0, 125, 0,
	126, 127, 128, 129, 130, 0, 131, 132, 135, 133,
	0, 134, 0, 212, 136, 213, 137, 138, 0, 0,
	0, 0, 0, 139, 214, 0, 140, 0, 215, 141,
	142, 0, 216, 143, 217, 814, 144, 145, 146, 218,
	147, 148, 0, 150, 151, 149, 152, 0, 153, 0,
	154, 155, 219, 156, 0, 241, 157, 158, 0, 159,
	160, 0, 161, 162, 0, 163, 220, 164, 0, 165,
	166, 168, 221, 167, 222, 0, 0, 169, 170, 0,
	223, 224, 225, 0, 0, 171, 226, 227, 0, 172,
	173, 174, 175, 0, 880, 176, 177, 0, 0, 178,
	179, 180, 228, 229, 84, 181, 0, 0, 0, 0,
	182, 183, 184, 185, 0, 0, 87, 88, 0, 89,
	0, 0, 0, 0, 0, 0, 0, 0, 90, 91,
	186, 187, 188, 92, 189, 190, 0, 93, 191, 192,
	94, 0, 0, 193, 194, 195, 812, 196, 0, 0,
	807, 95, 96, 97, 0, 98, 810, 99, 0, 0,
	100, 101, 0, 0, 0, 0, 0, 0, 102, 103,
	104, 105, 197, 106, 198, 199, 0, 0, 107, 0,
	0, 0, 108, 109, 0, 0, 0, 0, 200, 110,
	201, 0, 0, 111, 112, 202, 113, 0, 114, 815,
	0, 0, 0, 115, 203, 0, 204, 0, 116, 117,
	806, 206, 0, 0, 118, 0, 0, 119, 207, 208,
	209, 0, 210, 0, 0, 120, 0, 121, 122, 0,
	0, 211, 0, 123, 0, 0, 124, 0, 0, 125,
	0, 126, 127, 128, 129, 130, 0, 131, 132, 135,
	133, 0, 134, 0, 212, 136, 213, 137, 138, 0,
	0, 0, 0, 0, 139, 214, 0, 140, 0, 215,
	141, 142, 0, 216, 143, 217, 814, 144, 145, 146,
	218, 147, 148, 0, 150, 151, 149, 152, 0, 153,
	0, 154, 155, 219, 156, 0, 241, 157, 158, 0,
	159, 160, 0, 161, 162, 0, 163, 220, 164, 0,
	165, 166, 168, 221, 167, 222, 0, 0, 169, 170,
	0, 223, 224, 225, 0, 0, 171, 226, 227, 0,
	172, 173, 174, 175, 0, 813, 176, 177, 0, 0,
	178, 179, 180, 228, 229, 84, 181, 0, 0, 0,
	0, 182, 183, 184, 185, 0, 0, 87, 88, 0,
	89, 0, 0, 0, 0, 0, 1142, 0, 0, 90,
	91, 186, 187, 188, 92, 189, 190, 0, 93, 191,
	192, 94, 0, 0, 193, 194, 195, 0, 196, 0,
	0, 0, 95, 96, 97, 0, 98, 0, 99, 0,
	0, 100, 101, 0, 0, 0, 0, 0, 0, 102,
	103, 104, 105, 197, 106, 198, 199, 0, 0, 107,
	0, 0, 0, 108, 109, 0, 0, 0, 0, 200,
	110, 201, 0, 0, 111, 112, 202, 113, 0, 114,
	0, 0, 0, 0, 115, 203, 0, 204, 0, 116,
	117, 205, 206, 0, 0, 118, 0, 0, 119, 207,
	208, 209, 0, 210, 0, 0, 120, 0, 121, 122,
	0, 0, 211, 0, 123, 0, 0, 124, 0, 0,
	125, 0, 126, 127, 128, 129, 130, 0, 131, 132,
	135, 133, 0, 134, 0, 212, 136, 213, 137, 138,
	0, 0, 0, 0, 0, 139, 214, 0, 140, 0,
	215, 141, 142, 0, 216, 143, 217, 0, 144, 145,
	146, 218, 147, 148, 0, 150, 151, 149, 152, 0,
	153, 0, 154, 155, 219, 156, 0, 241, 157, 158,
	0, 159, 160, 0, 161, 162, 0, 163, 220, 164,
	0, 165, 166, 168, 221, 167, 222, 0, 0, 169,
	170, 0, 223, 224, 225, 0, 0, 171, 226, 227,
	0, 172, 173, 174, 175, 0, 84, 176, 177, 0,
	0, 178, 179, 180, 228, 229, 0, 181, 87, 88,
	0, 89, 182, 183, 184, 185, 0, 0, 0, 0,
	90, 91, 186, 187, 188, 92, 189, 190, 0, 93,
	191, 192, 94, 0, 0, 193, 194, 195, 0, 196,
	0, 0, 0, 95, 96, 97, 0, 98, 0, 99,
	0, 0, 100, 101, 0, 0, 0, 0, 0, 0,
	102, 103, 104, 105, 197, 106, 198, 199, 0, 0,
	107, 0, 0, 0, 108, 109, 0, 0, 0, 0,
	200, 110, 201, 0, 0, 111, 112, 202, 113, 0,
	114, 0, 0, 0, 0, 115, 203, 0, 204, 0,
	116, 117, 205, 206, 0, 0, 118, 0, 0, 119,
	207, 208, 209, 0, 210, 0, 0, 120, 0, 121,
	122, 0, 0, 211, 0, 123, 0, 0, 124, 0,
	0, 125, 0, 126, 127, 128, 129, 130, 0, 131,
	132, 135, 133, 0, 134, 0, 212, 136, 213, 137,
	138, 0, 0, 294, 0, 0, 139, 214, 0, 140,
	0, 215, 141, 142, 0, 216, 143, 217, 0, 144,
	145, 146, 218, 147, 148, 0, 150, 151, 149, 152,
	0, 153, 0, 154, 155, 219, 156, 0, 241, 157,
	158, 0, 159, 160, 0, 161, 162, 0, 163, 220,
	164, 0, 165, 166, 168, 221, 167, 222, 0, 0,
	169, 170, 0, 223, 224, 225, 0, 0, 171, 226,
	227, 0, 172, 173, 174, 175, 0, 84, 176, 177,
	0, 0, 178, 179, 180, 228, 229, 0, 181, 87,
	88, 0, 89, 182, 183, 184, 185, 0, 0, 0,
	0, 90, 91, 186, 187, 188, 92, 189, 190, 0,
	93, 191, 192, 94, 0, 0, 193, 194, 195, 0,
	196, 0, 0, 0, 95, 96, 97, 0, 98, 0,
	99, 0, 0, 100, 101, 0, 0, 0, 0, 0,
	0, 102, 103, 104, 105, 197, 106, 198, 199, 0,
	0, 107, 0, 0, 0, 108, 109, 0, 0, 0,
	0, 200, 110, 201, 0, 0, 111, 112, 202, 113,
	0, 114, 0, 0, 0, 0, 115, 203, 0, 204,
	0, 116, 117, 300, 206, 0, 0, 118, 0, 0,
	119, 207, 208, 209, 0, 210, 0, 0, 120, 0,
	121, 122, 0, 0, 211, 0, 123, 0, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 0,
	131, 132, 135, 133, 0, 134, 0, 212, 136, 213,
	137, 138, 0, 0, 294, 0, 0, 139, 214, 0,
	140, 0, 215, 141, 142, 0, 216, 143, 217, 0,
	144, 145, 146, 218, 147, 148, 0, 150, 151, 149,
	152, 0, 153, 0, 154, 155, 219, 156, 0, 241,
	157, 158, 0, 159, 160, 0, 161, 162, 0, 163,
	220, 164, 0, 165, 166, 168, 221, 167, 222, 0,
	0, 169, 170, 0, 223, 224, 225, 0, 0, 171,
	226, 227, 0, 172, 173, 174, 175, 0, 84, 176,
	177, 0, 0, 178, 179, 180, 228, 229, 0, 181,
	87, 88, 0, 89, 182, 183, 184, 185, 0, 0,
	0, 0, 90, 91, 186, 187, 188, 92, 189, 190,
	0, 93, 191, 192, 94, 0, 0, 193, 194, 195,
	0, 196, 0, 0, 0, 95, 96, 97, 0, 98,
	0, 99, 0, 0, 100, 101, 0, 0, 0, 0,
	0, 0, 102, 103, 104, 105, 197, 106, 198, 199,
	0, 0, 107, 0, 0, 0, 108, 109, 0, 0,
	0, 0, 200, 110, 201, 0, 0, 111, 112, 202,
	113, 0, 114, 0, 0, 0, 0, 115, 203, 0,
	204, 0, 116, 117, 205, 206, 0, 0, 118, 0,
	0, 119, 207, 208, 209, 0, 210, 0, 0, 120,
	0, 121, 122, 0, 0, 211, 0, 123, 0, 0,
	124, 0, 0, 125, 0, 126, 127, 128, 129, 130,
	0, 131, 132, 135, 133, 0, 134, 0, 212, 136,
	213, 137, 138, 0, 0, 0, 0, 0, 139, 214,
	0, 140, 0, 215, 141, 142, 0, 216, 143, 217,
	0, 144, 145, 146, 218, 147, 148, 0, 150, 151,
	149, 152, 0, 153, 0, 154, 155, 219, 156, 0,
	241, 157, 158, 0, 159, 160, 0, 161, 162, 0,
	163, 220, 164, 0, 165, 166, 168, 221, 167, 222,
	0, 0, 169, 170, 0, 223, 224, 225, 0, 0,
	171, 226, 227, 0, 172, 173, 174, 175, 0, 84,
	176, 177, 0, 0, 178, 179, 180, 228, 229, 0,
	181, 87, 88, 0, 89, 182, 183, 184, 185, 0,
	0, 0, 0, 90, 91, 186, 187, 188, 92, 189,
	190, 0, 93, 191, 192, 94, 0, 0, 193, 194,
	195, 0, 196, 0, 0, 0, 95, 96, 97, 0,
	98, 0, 99, 0, 0, 100, 101, 0, 0, 0,
	0, 0, 0, 102, 103, 104, 105, 197, 106, 198,
	199, 0, 0, 107, 0, 0, 0, 108, 109, 0,
	0, 0, 0, 200, 110, 201, 0, 0, 111, 112,
	202, 113, 0, 114, 0, 0, 0, 0, 115, 203,
	0, 204, 0, 116, 117, 1080, 206, 0, 0, 118,
	0, 0, 119, 207, 208, 209, 0, 210, 0, 0,
	120, 0, 121, 122, 0, 0, 211, 0, 123, 0,
	0, 124, 0, 0, 125, 0, 126, 127, 128, 129,
	130, 0, 131, 132, 135, 133, 0, 134, 0, 212,
	136, 213, 137, 138, 0, 0, 0, 0, 0, 139,
	214, 0, 140, 0, 215, 141, 142, 0, 216, 143,
	217, 0, 144, 145, 146, 218, 147, 148, 0, 150,
	151, 149, 152, 0, 153, 0, 154, 155, 219, 156,
	0, 241, 157, 158, 0, 159, 160, 0, 161, 162,
	0, 163, 220, 164, 0, 165, 166, 168, 221, 167,
	222, 0, 0, 169, 170, 0, 223, 224, 225, 0,
	0, 171, 226, 227, 0, 172, 173, 174, 175, 0,
	84, 176, 177, 0, 0, 178, 179, 180, 228, 229,
	0, 181, 87, 88, 0, 89, 182, 183, 184, 185,
	0, 0, 0, 0, 90, 91, 186, 187, 188, 92,
	189, 190, 0, 93, 191, 192, 94, 0, 0, 193,
	194, 195, 0, 196, 0, 0, 0, 95, 96, 97,
	0, 98, 0, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 197, 106,
	198, 199, 0, 0, 107, 0, 0, 0, 108, 109,
	0, 0, 0, 0, 200, 110, 201, 0, 0, 111,
	112, 202, 113, 0, 114, 0, 0, 0, 0, 115,
	203, 0, 204, 0, 116, 117, 1078, 206, 0, 0,
	118, 0, 0, 119, 207, 208, 209, 0, 210, 0,
	0, 120, 0, 121, 122, 0, 0, 211, 0, 123,
	0, 0, 124, 0, 0, 125, 0, 126, 127, 128,
	129, 130, 0, 131, 132, 135, 133, 0, 134, 0,
	212, 136, 213, 137, 138, 0, 0, 0, 0, 0,
	139, 214, 0, 140, 0, 215, 141, 142, 0, 216,
	143, 217, 0, 144, 145, 146, 218, 147, 148, 0,
	150, 151, 149, 152, 0, 153, 0, 154, 155, 219,
	156, 0, 241, 157, 158, 0, 159, 160, 0, 161,
	162, 0, 163, 220, 164, 0, 165, 166, 168, 221,
	167, 222, 0, 0, 169, 170, 0, 223, 224, 225,
	0, 0, 171, 226, 227, 0, 172, 173, 174, 175,
	0, 84, 176, 177, 0, 0, 178, 179, 180, 228,
	229, 0, 181, 87, 88, 0, 89, 182, 183, 184,
	185, 0, 0, 0, 0, 90, 91, 186, 187, 188,
	92, 189, 190, 0, 93, 191, 192, 94, 0, 0,
	193, 194, 195, 0, 196, 0, 0, 0, 95, 96,
	97, 0, 98, 0, 99, 0, 0, 100, 101, 0,
	0, 0, 0, 0, 0, 102, 103, 104, 105, 197,
	106, 198, 199, 0, 0, 107, 0, 0, 0, 108,
	109, 0, 0, 0, 0, 200, 110, 201, 0, 0,
	111, 112, 202, 113, 0, 114, 0, 0, 0, 0,
	115, 203, 0, 204, 0, 116, 117, 1069, 206, 0,
	0, 118, 0, 0, 119, 207, 208, 209, 0, 210,
	0, 0, 120, 0, 121, 122, 0, 0, 211, 0,
	123, 0, 0, 124, 0, 0, 125, 0, 126, 127,
	128, 129, 130, 0, 131, 132, 135, 133, 0, 134,
	0, 212, 136, 213, 137, 138, 0, 0, 0, 0,
	0, 139, 214, 0, 140, 0, 215, 141, 142, 0,
	216, 143, 217, 0, 144, 145, 146, 218, 147, 148,
	0, 150, 151, 149, 152, 0, 153, 0, 154, 155,
	219, 156, 0, 241, 157, 158, 0, 159, 160, 0,
	161, 162, 0, 163, 220, 164, 0, 165, 166, 168,
	221, 167, 222, 0, 0, 169, 170, 0, 223, 224,
	225, 0, 0, 171, 226, 227, 0, 172, 173, 174,
	175, 0, 84, 176, 177, 0, 0, 178, 179, 180,
	228, 229, 0, 181, 87, 88, 0, 89, 182, 183,
	184, 185, 0, 0, 0, 0, 90, 91, 186, 187,
	188, 92, 189, 190, 0, 93, 191, 192, 94, 0,
	0, 193, 194, 195, 0, 196, 0, 0, 0, 95,
	96, 97, 0, 98, 0, 99, 0, 0, 100, 101,
	0, 0, 0, 0, 0, 0, 102, 103, 104, 105,
	197, 106, 198, 199, 0, 0, 107, 0, 0, 0,
	108, 109, 0, 0, 0, 0, 200, 110, 201, 0,
	0, 111, 112, 202, 113, 0, 114, 0, 0, 0,
	0, 115, 203, 0, 204, 0, 116, 117, 686, 206,
	0, 0, 118, 0, 0, 119, 207, 208, 209, 0,
	210, 0, 0, 120, 0, 121, 122, 0, 0, 211,
	0, 123, 0, 0, 124, 0, 0, 125, 0, 126,
	127, 128, 129, 130, 0, 131, 132, 135, 133, 0,
	134, 0, 212, 136, 213, 137, 138, 0, 0, 0,
	0, 0, 139, 214, 0, 140, 0, 215, 141, 142,
	0, 216, 143, 217, 0, 144, 145, 146, 218, 147,
	148, 0, 150, 151, 149, 152, 0, 153, 0, 154,
	155, 219, 156, 0, 241, 157, 158, 0, 159, 160,
	0, 161, 162, 0, 163, 220, 164, 0, 165, 166,
	168, 221, 167, 222, 0, 0, 169, 170, 0, 223,
	224, 225, 0, 0, 171, 226, 227, 0, 172, 173,
	174, 175, 0, 84, 176, 177, 0, 0, 178, 179,
	180, 228, 229, 0, 181, 87, 88, 0, 89, 182,
	183, 184, 185, 0, 0, 0, 0, 90, 91, 186,
	187, 188, 92, 189, 190, 0, 93, 191, 192, 94,
	0, 0, 193, 194, 195, 0, 196, 0, 0, 0,
	95, 96, 97, 0, 98, 0, 99, 0, 0, 100,
	101, 0, 0, 0, 0, 0, 0, 102, 103, 104,
	105, 197, 106, 198, 199, 0, 0, 107, 0, 0,
	0, 108, 109, 0, 0, 0, 0, 200, 110, 201,
	0, 0, 111, 112, 202, 113, 0, 114, 0, 0,
	0, 0, 115, 203, 0, 204, 0, 116, 117, 205,
	206, 0, 0, 118, 0, 0, 119, 207, 208, 209,
	0, 210, 0, 0, 120, 0, 121, 122, 0, 0,
	211, 0, 123, 0, 0, 124, 0, 0, 125, 0,
	126, 127, 128, 129, 130, 0, 131, 132, 135, 133,
	0, 134, 0, 212, 136, 213, 137, 138, 0, 0,
	0, 0, 0, 139, 214, 0, 140, 0, 215, 141,
	142, 0, 216, 143, 217, 0, 144, 145, 146, 218,
	147, 148, 0, 150, 151, 149, 152, 0, 153, 0,
	154, 155, 219, 156, 0, 82, 157, 158, 0, 159,
	160, 0, 161, 162, 0, 163, 220, 164, 0, 165,
	166, 168, 221, 167, 222, 0, 0, 169, 170, 0,
	223, 224, 225, 0, 0, 171, 226, 227, 0, 172,
	173, 174, 175, 0, 84, 176, 177, 0, 0, 178,
	179, 180, 228, 229, 0, 181, 87, 88, 0, 89,
	182, 183, 184, 185, 0, 527, 0, 0, 90, 91,
	186, 187, 188, 92, 189, 190, 0, 93, 191, 192,
	94, 0, 0, 193, 194, 195, 0, 196, 0, 0,
	0, 95, 96, 97, 0, 98, 0, 99, 0, 0,
	100, 101, 0, 0, 0, 0, 0, 0, 102, 103,
	104, 105, 197, 106, 198, 199, 0, 0, 107, 0,
	0, 0, 108, 109, 0, 0, 0, 0, 200, 110,
	201, 0, 0, 111, 112, 202, 113, 0, 114, 0,
	0, 0, 0, 115, 203, 0, 204, 0, 116, 117,
	205, 206, 0, 0, 118, 0, 0, 119, 207, 208,
	209, 0, 210, 0, 0, 120, 0, 121, 122, 0,
	0, 211, 0, 123, 0, 0, 124, 0, 0, 125,
	0, 126, 127, 128, 129, 130, 0, 131, 132, 135,
	133, 0, 134, 0, 212, 136, 213, 137, 138, 0,
	0, 0, 0, 0, 139, 214, 0, 140, 0, 215,
	141, 142, 0, 216, 143, 217, 0, 144, 145, 146,
	218, 147, 148, 0, 150, 151, 149, 152, 0, 153,
	0, 154, 155, 219, 156, 0, 241, 157, 158, 0,
	159, 160, 0, 0, 162, 0, 163, 220, 164, 0,
	165, 166, 168, 221, 167, 222, 0, 0, 169, 170,
	0, 223, 224, 225, 0, 0, 171, 226, 227, 0,
	172, 173, 174, 175, 0, 84, 176, 177, 0, 0,
	178, 179, 180, 228, 229, 0, 181, 87, 88, 0,
	89, 182, 183, 184, 185, 0, 0, 0, 0, 90,
	91, 186, 187, 188, 92, 189, 190, 0, 93, 191,
	192, 94, 0, 0, 193, 194, 195, 0, 196, 0,
	0, 0, 95, 96, 97, 0, 98, 0, 99, 0,
	0, 100, 101, 0, 0, 0, 0, 0, 0, 102,
	103, 104, 105, 197, 106, 198, 199, 0, 0, 107,
	0, 0, 0, 108, 109, 0, 0, 0, 0, 200,
	110, 201, 0, 0, 111, 112, 202, 113, 0, 114,
	0, 0, 0, 0, 115, 203, 0, 204, 0, 116,
	117, 383, 206, 0, 0, 118, 0, 0, 119, 207,
	208, 209, 0, 210, 0, 0, 120, 0, 121, 122,
	0, 0, 211, 0, 123, 0, 0, 124, 0, 0,
	125, 0, 126, 127, 128, 129, 130, 0, 131, 132,
	135, 133, 0, 134, 0, 212, 136, 213, 137, 138,
	0, 0, 0, 0, 0, 139, 214, 0, 140, 0,
	215, 141, 142, 0, 216, 143, 217, 0, 144, 145,
	146, 218, 147, 148, 0, 150, 151, 149, 152, 0,
	153, 0, 154, 155, 219, 156, 0, 241, 157, 158,
	0, 159, 160, 0, 161, 162, 0, 163, 220, 164,
	0, 165, 166, 168, 221, 167, 222, 0, 0, 169,
	170, 0, 223, 224, 225, 0, 0, 171, 226, 227,
	0, 172, 173, 174, 175, 0, 84, 176, 177, 0,
	0, 178, 179, 180, 228, 229, 0, 181, 87, 88,
	0, 89, 182, 183, 184, 185, 0, 0, 0, 0,
	90, 91, 186, 187, 188, 92, 189, 190, 0, 93,
	191, 192, 94, 0, 0, 193, 194, 195, 0, 196,
	0, 0, 0, 95, 96, 97, 0, 98, 0, 99,
	0, 0, 100, 101, 0, 0, 0, 0, 0, 0,
	102, 103, 104, 105, 197, 106, 198, 199, 0, 0,
	107, 0, 0, 0, 108, 109, 0, 0, 0, 0,
	200, 110, 201, 0, 0, 111, 112, 202, 113, 0,
	114, 0, 0, 0, 0, 115, 203, 0, 204, 0,
	116, 117, 380, 206, 0, 0, 118, 0, 0, 119,
	207, 208, 209, 0, 210, 0, 0, 120, 0, 121,
	122, 0, 0, 211, 0, 123, 0, 0, 124, 0,
	0, 125, 0, 126, 127, 128, 129, 130, 0, 131,
	132, 135, 133, 0, 134, 0, 212, 136, 213, 137,
	138, 0, 0, 0, 0, 0, 139, 214, 0, 140,
	0, 215, 141, 142, 0, 216, 143, 217, 0, 144,
	145, 146, 218, 147, 148, 0, 150, 151, 149, 152,
	0, 153, 0, 154, 155, 219, 156, 0, 241, 157,
	158, 0, 159, 160, 0, 161, 162, 0, 163, 220,
	164, 0, 165, 166, 168, 221, 167, 222, 0, 0,
	169, 170, 0, 223, 224, 225, 0, 0, 171, 226,
	227, 0, 172, 173, 174, 175, 0, 84, 176, 177,
	0, 0, 178, 179, 180, 228, 229, 0, 181, 87,
	88, 0, 89, 182, 183, 184, 185, 0, 0, 0,
	0, 90, 91, 186, 187, 188, 92, 189, 190, 0,
	93, 191, 192, 94, 0, 0, 193, 194, 343, 0,
	196, 0, 0, 0, 95, 96, 97, 0, 98, 0,
	99, 0, 0, 100, 101, 0, 0, 0, 0, 0,
	0, 102, 103, 104, 105, 197, 106, 198, 199, 0,
	0, 107, 0, 0, 0, 108, 109, 0, 0, 0,
	0, 200, 110, 201, 0, 0, 111, 112, 202, 113,
	0, 114, 0, 0, 0, 0, 115, 203, 0, 204,
	0, 116, 117, 205, 206, 0, 0, 118, 0, 0,
	119, 207, 208, 209, 0, 210, 0, 0, 120, 0,
	121, 122, 0, 0, 211, 0, 123, 0, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 238, 0,
	131, 132, 135, 133, 0, 134, 0, 212, 136, 213,
	137, 138, 0, 0, 0, 0, 0, 139, 214, 0,
	140, 0, 215, 141, 142, 0, 216, 143, 217, 0,
	144, 145, 146, 218, 147, 148, 0, 150, 151, 149,
	152, 0, 153, 0, 154, 155, 219, 156, 0, 241,
	157, 158, 0, 159, 160, 0, 161, 162, 0, 163,
	220, 164, 0, 165, 166, 168, 221, 167, 222, 0,
	0, 169, 170, 0, 237, 224, 225, 0, 0, 233,
	226, 227, 0, 172, 173, 174, 175, 0, 84, 176,
	177, 0, 0, 178, 179, 180, 228, 229, 0, 181,
	87, 88, 0, 89, 182, 183, 184, 185, 0, 0,
	0, 0, 90, 91, 186, 187, 188, 92, 189, 190,
	0, 93, 191, 192, 94, 0, 0, 193, 194, 195,
	0, 196, 0, 0, 0, 95, 96, 97, 0, 98,
	0, 99, 0, 0, 100, 101, 0, 0, 0, 0,
	0, 0, 102, 103, 104, 105, 197, 106, 198, 199,
	0, 0, 107, 0, 0, 0, 108, 109, 0, 0,
	0, 0, 200, 110, 201, 0, 0, 111, 112, 202,
	113, 0, 114, 0, 0, 0, 0, 115, 203, 0,
	204, 0, 116, 117, 205, 206, 0, 0, 118, 0,
	0, 119, 207, 208, 209, 0, 210, 0, 0, 120,
	0, 121, 122, 0, 0, 211, 0, 123, 0, 0,
	124, 0, 0, 125, 0, 126, 127, 128, 129, 238,
	0, 131, 132, 135, 133, 0, 134, 0, 212, 136,
	213, 137, 138, 0, 0, 0, 0, 0, 139, 214,
	0, 140, 0, 215, 141, 142, 0, 216, 143, 217,
	0, 144, 145, 146, 218, 147, 148, 0, 150, 151,
	149, 152, 0, 153, 0, 154, 155, 219, 156, 0,
	241, 157, 158, 0, 159, 160, 0, 161, 162, 0,
	163, 220, 164, 0, 165, 166, 168, 221, 167, 222,
	0, 0, 169, 170, 0, 237, 224, 225, 0, 0,
	233, 226, 227, 0, 172, 173, 174, 175, 0, 84,
	176, 177, 0, 0, 178, 179, 180, 228, 229, 0,
	181, 87, 88, 0, 89, 182, 183, 184, 185, 0,
	0, 0, 0, 90, 91, 186, 187, 188, 92, 189,
	190, 0, 93, 191, 192, 94, 0, 0, 193, 194,
	195, 0, 196, 0, 0, 0, 95, 96, 97, 0,
	98, 0, 99, 0, 0, 100, 101, 0, 0, 0,
	0, 0, 0, 102, 103, 104, 105, 197, 106, 198,
	199, 0, 0, 107, 0, 0, 0, 108, 109, 0,
	0, 0, 0, 200, 110, 201, 0, 0, 111, 112,
	202, 113, 0, 114, 0, 0, 0, 0, 115, 203,
	0, 204, 0, 116, 117, 315, 206, 0, 0, 118,
	0, 0, 119, 207, 208, 209, 0, 210, 0, 0,
	120, 0, 121, 122, 0, 0, 211, 0, 123, 0,
	0, 124, 0, 0, 125, 0, 126, 127, 128, 129,
	130, 0, 131, 132, 135, 133, 0, 134, 0, 212,
	136, 213, 137, 138, 0, 0, 0, 0, 0, 139,
	214, 0, 140, 0, 215, 141, 142, 0, 216, 143,
	217, 0, 144, 145, 146, 218, 147, 148, 0, 150,
	151, 149, 152, 0, 153, 0, 154, 155, 219, 156,
	0, 241, 157, 158, 0, 159, 160, 0, 161, 162,
	0, 163, 220, 164, 0, 165, 166, 168, 221, 167,
	222, 0, 0, 169, 170, 0, 223, 224, 225, 0,
	0, 171, 226, 227, 0, 172, 173, 174, 175, 0,
	84, 176, 177, 0, 0, 178, 179, 180, 228, 229,
	0, 181, 87, 88, 0, 89, 182, 183, 184, 185,
	0, 0, 0, 0, 90, 91, 186, 187, 188, 92,
	189, 190, 0, 93, 191, 192, 94, 0, 0, 193,
	194, 195, 0, 196, 0, 0, 0, 95, 96, 97,
	0, 98, 0, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 197, 106,
	198, 199, 0, 0, 107, 0, 0, 0, 108, 109,
	0, 0, 0, 0, 200, 110, 201, 0, 0, 111,
	112, 202, 113, 0, 114, 0, 0, 0, 0, 115,
	203, 0, 204, 0, 116, 117, 312, 206, 0, 0,
	118, 0, 0, 119, 207, 208, 209, 0, 210, 0,
	0, 120, 0, 121, 122, 0, 0, 211, 0, 123,
	0, 0, 124, 0, 0, 125, 0, 126, 127, 128,
	129, 130, 0, 131, 132, 135, 133, 0, 134, 0,
	212, 136, 213, 137, 138, 0, 0, 0, 0, 0,
	139, 214, 0, 140, 0, 215, 141, 142, 0, 216,
	143, 217, 0, 144, 145, 146, 218, 147, 148, 0,
	150, 151, 149, 152, 0, 153, 0, 154, 155, 219,
	156, 0, 241, 157, 158, 0, 159, 160, 0, 161,
	162, 0, 163, 220, 164, 0, 165, 166, 168, 221,
	167, 222, 0, 0, 169, 170, 0, 223, 224, 225,
	0, 0, 171, 226, 227, 0, 172, 173, 174, 175,
	0, 84, 176, 177, 0, 0, 178, 179, 180, 228,
	229, 0, 181, 87, 88, 0, 89, 182, 183, 184,
	185, 0, 0, 0, 0, 90, 91, 186, 187, 188,
	92, 189, 190, 0, 93, 191, 192, 94, 0, 0,
	193, 194, 195, 0, 196, 0, 0, 0, 95, 96,
	97, 0, 98, 0, 99, 0, 0, 100, 101, 0,
	0, 0, 0, 0, 0, 102, 103, 104, 105, 197,
	106, 198, 199, 0, 0, 107, 0, 0, 0, 108,
	109, 0, 0, 0, 0, 200, 110, 201, 0, 0,
	111, 112, 202, 113, 0, 114, 0, 0, 0, 0,
	115, 203, 0, 204, 0, 116, 117, 310, 206, 0,
	0, 118, 0, 0, 119, 207, 208, 209, 0, 210,
	0, 0, 120, 0, 121, 122, 0, 0, 211, 0,
	123, 0, 0, 124, 0, 0, 125, 0, 126, 127,
	128, 129, 130, 0, 131, 132, 135, 133, 0, 134,
	0, 212, 136, 213, 137, 138, 0, 0, 0, 0,
	0, 139, 214, 0, 140, 0, 215, 141, 142, 0,
	216, 143, 217, 0, 144, 145, 146, 218, 147, 148,
	0, 150, 151, 149, 152, 0, 153, 0, 154, 155,
	219, 156, 0, 241, 157, 158, 0, 159, 160, 0,
	161, 162, 0, 163, 220, 164, 0, 165, 166, 168,
	221, 167, 222, 0, 0, 169, 170, 0, 223, 224,
	225, 0, 0, 171, 226, 227, 0, 172, 173, 174,
	175, 0, 84, 176, 177, 0, 0, 178, 179, 180,
	228, 229, 0, 181, 87, 88, 0, 89, 182, 183,
	184, 185, 0, 0, 0, 0, 90, 91, 186, 187,
	188, 92, 189, 190, 0, 93, 191, 192, 94, 0,
	0, 193, 194, 195, 0, 196, 0, 0, 0, 95,
	96, 97, 0, 98, 0, 99, 0, 0, 100, 101,
	0, 0, 0, 0, 0, 0, 102, 103, 104, 105,
	197, 106, 198, 199, 0, 0, 107, 0, 0, 0,
	108, 109, 0, 0, 0, 0, 200, 110, 201, 0,
	0, 111, 112, 202, 113, 0, 114, 0, 0, 0,
	0, 115, 203, 0, 204, 0, 116, 117, 303, 206,
	0, 0, 118, 0, 0, 119, 207, 208, 209, 0,
	210, 0, 0, 120, 0, 121, 122, 0, 0, 211,
	0, 123, 0, 0, 124, 0, 0, 125, 0, 126,
	127, 128, 129, 130, 0, 131, 132, 135, 133, 0,
	134, 0, 212, 136, 213, 137, 138, 0, 0, 0,
	0, 0, 139, 214, 0, 140, 0, 215, 141, 142,
	0, 216, 143, 217, 0, 144, 145, 146, 218, 147,
	148, 0, 150, 151, 149, 152, 0, 153, 0, 154,
	155, 219, 156, 0, 241, 157, 158, 0, 159, 160,
	0, 161, 162, 0, 163, 220, 164, 0, 165, 166,
	168, 221, 167, 222, 0, 0, 169, 170, 0, 223,
	224, 225, 0, 0, 171, 226, 227, 0, 172, 173,
	174, 175, 0, 84, 176, 177, 0, 0, 178, 179,
	180, 228, 229, 0, 181, 87, 88, 0, 89, 182,
	183, 184, 185, 0, 0, 0, 0, 90, 91, 186,
	187, 188, 92, 189, 190, 0, 93, 191, 192, 94,
	0, 0, 193, 194, 195, 0, 196, 0, 0, 0,
	95, 96, 97, 0, 98, 0, 99, 0, 0, 100,
	101, 0, 0, 0, 0, 0, 0, 102, 103, 104,
	105, 197, 106, 198, 199, 0, 0, 107, 0, 0,
	0, 108, 109, 0, 0, 0, 0, 200, 110, 201,
	0, 0, 111, 112, 202, 113, 0, 114, 0, 0,
	0, 0, 115, 203, 0, 204, 0, 116, 117, 205,
	206, 0, 0, 118, 0, 0, 119, 207, 208, 209,
	0, 210, 0, 0, 120, 0, 121, 122, 0, 0,
	211, 0, 123, 0, 0, 124, 0, 0, 125, 0,
	126, 127, 128, 129, 130, 0, 131, 132, 135, 133,
	0, 134, 0, 212, 136, 213, 137, 138, 0, 0,
	0, 0, 0, 139, 214, 0, 140, 0, 215, 141,
	142, 0, 216, 143, 217, 0, 144, 145, 146, 218,
	283, 148, 0, 150, 151, 149, 152, 0, 153, 0,
	154, 155, 219, 156, 0, 241, 157, 158, 0, 159,
	160, 0, 161, 162, 0, 163, 220, 164, 0, 165,
	166, 168, 221, 167, 222, 0, 0, 169, 170, 0,
	223, 224, 225, 0, 0, 171, 226, 227, 0, 172,
	173, 174, 175, 0, 84, 176, 177, 0, 0, 178,
	179, 180, 228, 229, 0, 181, 87, 88, 0, 89,
	182, 183, 184, 185, 0, 0, 0, 0, 90, 91,
	186, 187, 188, 92, 189, 190, 0, 93, 191, 192,
	94, 0, 0, 193, 194, 195, 0, 196, 0, 0,
	0, 95, 96, 97, 0, 98, 0, 99, 0, 0,
	100, 101, 0, 0, 0, 0, 0, 0, 102, 103,
	104, 105, 197, 106, 198, 199, 0, 0, 107, 0,
	0, 0, 108, 109, 0, 0, 0, 0, 200, 110,
	201, 0, 0, 111, 112, 202, 113, 0, 114, 0,
	0, 0, 0, 115, 203, 0, 204, 0, 116, 117,
	205, 206, 0, 0, 118, 0, 0, 119, 207, 208,
	209, 0, 210, 0, 0, 120, 0, 121, 122, 0,
	0, 211, 0, 123, 0, 0, 231, 0, 0, 125,
	0, 126, 127, 128, 129, 238, 0, 131, 132, 135,
	133, 0, 134, 0, 212, 136, 213, 137, 138, 0,
	0, 0, 0, 0, 139, 214, 0, 140, 0, 215,
	141, 142, 0, 216, 143, 217, 0, 144, 145, 146,
	218, 147, 148, 0, 150, 151, 149, 152, 0, 153,
	0, 154, 155, 219, 156, 0, 241, 157, 158, 0,
	159, 232, 0, 161, 162, 0, 163, 220, 164, 0,
	165, 166, 168, 221, 167, 222, 0, 0, 169, 170,
	0, 237, 224, 225, 0, 0, 233, 226, 227, 0,
	172, 173, 174, 175, 0, 84, 176, 177, 0, 0,
	178, 179, 180, 228, 229, 0, 181, 87, 88, 0,
	89, 182, 183, 184, 185, 0, 0, 0, 0, 90,
	91, 186, 187, 188, 92, 189, 190, 0, 93, 191,
	192, 94, 0, 0, 193, 194, 195, 0, 196, 0,
	0, 0, 95, 96, 97, 0, 98, 0, 99, 0,
	0, 100, 101, 0, 0, 0, 0, 0, 0, 102,
	103, 104, 105, 197, 106, 198, 199, 0, 0, 107,
	0, 0, 0, 108, 109, 0, 0, 0, 0, 200,
	110, 201, 0, 0, 111, 112, 202, 113, 0, 114,
	0, 0, 0, 0, 115, 203, 0, 204, 0, 116,
	117, 205, 206, 0, 0, 118, 0, 0, 119, 207,
	208, 209, 0, 210, 0, 0, 120, 0, 121, 122,
	0, 0, 211, 0, 123, 0, 0, 124, 0, 0,
	125, 0, 126, 127, 128, 129, 130, 0, 131, 132,
	135, 133, 0, 134, 0, 212, 136, 213, 137, 138,
	0, 0, 0, 0, 0, 139, 214, 0, 140, 0,
	215, 141, 0, 0, 216, 143, 217, 0, 144, 0,
	146, 218, 147, 148, 0, 150, 151, 149, 152, 0,
	153, 0, 154, 155, 219, 0, 0, 241, 157, 158,
	0, 159, 160, 0, 161, 162, 0, 163, 220, 164,
	0, 165, 166, 168, 221, 167, 222, 0, 0, 169,
	170, 0, 223, 224, 225, 0, 0, 171, 226, 227,
	0, 172, 173, 174, 175, 0, 0, 176, 177, 0,
	0, 178, 179, 180, 228, 229, 710, 181, 728, 729,
	730, 0, 182, 183, 184, 185, 0, 0, 731, 0,
	0, 0, 0, 0, 712, 710, 737, 728, 729, 730,
	0, 0, 0, 0, 0, 0, 0, 731, 0, 0,
	0, 0, 0, 712, 711, 737, 0, 0, 0, 0,
	725, 0, 710, 0, 728, 729, 730, 0, 0, 0,
	0, 0, 0, 711, 731, 0, 0, 0, 0, 725,
	712, 0, 737, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	711, 0, 0, 0, 0, 0, 725, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 738, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	736, 0, 0, 0, 0, 0, 0, 738, 0, 0,
	733, 0, 0, 0, 0, 0, 726, 0, 0, 736,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 733,
	0, 0, 0, 0, 738, 726, 0, 0, 732, 0,
	0, 0, 0, 0, 0, 0, 736, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 733, 732, 0, 0,
	0, 0, 726, 0, 0, 0, 0, 0, 0, 0,
	0, 727, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 735, 0, 0, 732, 0, 0, 0, 0, 0,
	727, 0, 710, 0, 728, 729, 730, 0, 0, 0,
	735, 0, 0, 0, 731, 0, 0, 0, 0, 0,
	712, 0, 737, 0, 0, 0, 0, 727, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 735, 0, 0,
	711, 734, 0, 722, 723, 724, 725, 721, 718, 719,
	720, 713, 714, 715, 716, 717, 0, 0, 0, 0,
	734, 1579, 722, 723, 724, 0, 721, 718, 719, 720,
	713, 714, 715, 716, 717, 0, 0, 0, 0, 0,
	1574, 0, 0, 0, 0, 0, 0, 734, 0, 722,
	723, 724, 710, 721, 718, 719, 720, 713, 714, 715,
	716, 717, 0, 0, 738, 0, 0, 1570, 0, 0,
	712, 710, 737, 728, 729, 730, 736, 0, 0, 0,
	0, 0, 0, 731, 0, 0, 733, 0, 0, 712,
	711, 737, 726, 0, 0, 0, 725, 0, 710, 0,
	728, 729, 730, 0, 0, 0, 0, 0, 0, 711,
	731, 0, 0, 0, 732, 725, 712, 0, 737, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 711, 0, 0, 0,
	0, 0, 725, 0, 0, 0, 710, 727, 728, 729,
	730, 0, 0, 0, 738, 0, 0, 735, 731, 0,
	0, 0, 0, 0, 712, 0, 737, 0, 0, 0,
	0, 0, 0, 738, 0, 0, 733, 0, 0, 0,
	0, 0, 726, 0, 711, 736, 0, 0, 0, 0,
	725, 0, 0, 0, 0, 733, 0, 0, 0, 0,
	738, 726, 0, 0, 0, 0, 0, 734, 0, 722,
	723, 724, 736, 721, 718, 719, 720, 713, 714, 715,
	716, 717, 733, 732, 0, 0, 0, 1509, 726, 0,
	0, 0, 0, 0, 0, 0, 0, 727, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 735, 738, 0,
	732, 0, 0, 0, 0, 1206, 727, 1222, 1223, 1224,
	736, 0, 0, 0, 0, 0, 735, 1477, 0, 0,
	733, 0, 0, 0, 0, 0, 726, 0, 0, 0,
	0, 0, 0, 727, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 735, 0, 0, 0, 734, 732, 1219,
	0, 0, 0, 721, 718, 719, 720, 713, 714, 715,
	716, 717, 0, 0, 0, 0, 734, 0, 722, 723,
	724, 0, 721, 718, 719, 720, 713, 714, 715, 716,
	717, 727, 0, 0, 0, 0, 1508, 0, 0, 0,
	0, 735, 0, 734, 0, 722, 723, 724, 0, 721,
	718, 719, 720, 713, 714, 715, 716, 717, 0, 0,
	0, 0, 0, 1420, 0, 0, 0, 0, 710, 1225,
	728, 729, 730, 0, 0, 0, 0, 0, 0, 0,
	731, 0, 0, 0, 0, 1220, 712, 0, 737, 0,
	0, 734, 0, 722, 723, 724, 0, 721, 718, 719,
	720, 713, 714, 715, 716, 717, 711, 0, 0, 0,
	0, 1358, 725, 710, 0, 728, 729, 730, 0, 0,
	0, 0, 0, 0, 0, 731, 0, 0, 0, 0,
	0, 712, 0, 737, 0, 0, 0, 0, 0, 0,
	1221, 0, 0, 710, 0, 728, 729, 730, 0, 0,
	0, 711, 0, 0, 0, 731, 0, 725, 0, 0,
	0, 712, 0, 737, 0, 0, 0, 0, 0, 0,
	738, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 711, 736, 0, 0, 0, 0, 725, 0, 0,
	0, 0, 733, 0, 0, 0, 0, 0, 726, 0,
	0, 0, 1216, 1217, 1218, 0, 1215, 1212, 1213, 1214,
	1207, 1208, 1209, 1210, 1211, 738, 0, 0, 0, 0,
	732, 0, 1206, 0, 1222, 1223, 1224, 736, 0, 0,
	0, 0, 0, 0, 1328, 0, 0, 733, 0, 0,
	0, 0, 0, 726, 0, 738, 0, 0, 0, 0,
	0, 0, 0, 727, 0, 0, 0, 736, 0, 0,
	0, 0, 0, 735, 0, 732, 1219, 733, 0, 0,
	0, 0, 0, 726, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 732, 0, 0, 727, 0,
	0, 1206, 0, 1222, 1223, 1224, 0, 0, 735, 0,
	0, 0, 0, 734, 0, 722, 723, 724, 0, 721,
	718, 719, 720, 713, 714, 715, 716, 717, 727, 0,
	0, 0, 0, 1333, 0, 0, 1225, 710, 735, 728,
	729, 730, 0, 0, 0, 1219, 0, 0, 0, 731,
	0, 0, 1220, 0, 0, 712, 0, 737, 734, 0,
	722, 723, 724, 0, 721, 718, 719, 720, 713, 714,
	715, 716, 717, 0, 0, 711, 0, 0, 984, 0,
	0, 725, 0, 0, 0, 0, 0, 0, 734, 0,
	722, 723, 724, 0, 721, 718, 719, 720, 713, 714,
	715, 716, 717, 0, 0, 0, 1404, 1221, 0, 0,
	0, 0, 710, 0, 728, 729, 730, 0, 0, 0,
	0, 0, 0, 1678, 731, 0, 0, 0, 0, 0,
	712, 1220, 737, 0, 0, 0, 0, 0, 0, 738,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	711, 736, 0, 0, 0, 0, 725, 0, 0, 0,
	0, 733, 0, 0, 0, 0, 0, 726, 0, 1216,
	1217, 1218, 0, 1215, 1212, 1213, 1214, 1207, 1208, 1209,
	1210, 1211, 0, 0, 0, 0, 1221, 0, 0, 732,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1236,
	0, 1677, 1235, 710, 0, 728, 729, 730, 0, 0,
	0, 0, 0, 0, 738, 731, 0, 0, 0, 890,
	0, 712, 727, 737, 0, 0, 736, 0, 0, 0,
	0, 0, 735, 0, 0, 0, 733, 0, 0, 0,
	0, 711, 726, 0, 0, 0, 0, 725, 1216, 1217,
	1218, 0, 1215, 1212, 1213, 1214, 1207, 1208, 1209, 1210,
	1211, 0, 0, 0, 732, 0, 0, 0, 0, 0,
	0, 0, 891, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 734, 0, 722, 723, 724, 0, 721, 718,
	719, 720, 713, 714, 715, 716, 717, 727, 0, 0,
	0, 0, 0, 0, 0, 738, 0, 735, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 736, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 733, 0, 0,
	0, 0, 0, 726, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 732, 0, 734, 0, 722,
	723, 724, 0, 721, 718, 719, 720, 713, 714, 715,
	716, 717, 0, 740, 0, 0, 0, 0, 0, 710,
	0, 728, 729, 730, 0, 0, 0, 0, 727, 0,
	0, 731, 0, 0, 739, 0, 0, 712, 735, 737,
	710, 0, 728, 729, 730, 0, 0, 0, 0, 0,
	0, 0, 731, 0, 0, 0, 0, 711, 712, 0,
	737, 0, 0, 725, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 711, 0,
	0, 0, 0, 0, 725, 0, 0, 0, 734, 0,
	722, 723, 724, 0, 721, 718, 719, 720, 713, 714,
	715, 716, 717, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 738, 0, 0, 0, 0, 0, 0, 710, 0,
	728, 729, 730, 736, 0, 0, 0, 0, 0, 0,
	731, 0, 738, 733, 0, 0, 712, 0, 737, 726,
	0, 0, 0, 0, 736, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 733, 0, 711, 0, 0, 0,
	726, 732, 725, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 732, 278, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 727, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 735, 0, 710, 0, 728, 729,
	730, 0, 0, 0, 0, 727, 0, 0, 731, 0,
	738, 0, 0, 0, 712, 735, 737, 0, 0, 0,
	0, 0, 736, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 733, 0, 711, 0, 0, 0, 726, 0,
	725, 0, 0, 0, 734, 0, 722, 723, 724, 0,
	721, 718, 719, 720, 713, 714, 715, 716, 717, 0,
	732, 0, 0, 0, 0, 734, 0, 722, 723, 724,
	0, 721, 718, 719, 720, 713, 714, 715, 716, 717,
	0, 0, 0, 0, 0, 0, 1242, 710, 0, 728,
	729, 730, 0, 727, 0, 0, 0, 0, 738, 731,
	0, 0, 1237, 735, 0, 712, 0, 737, 0, 0,
	736, 0, 0, 0, 0, 0, 0, 0, 1352, 0,
	733, 0, 0, 0, 0, 711, 726, 0, 0, 0,
	0, 725, 710, 0, 728, 729, 730, 0, 0, 0,
	0, 0, 0, 0, 731, 0, 0, 0, 732, 0,
	712, 0, 737, 734, 0, 722, 723, 724, 0, 721,
	718, 719, 720, 713, 714, 715, 716, 717, 0, 0,
	711, 0, 0, 0, 0, 0, 725, 0, 0, 0,
	0, 727, 0, 0, 0, 0, 0, 0, 0, 738,
	0, 735, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 736, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 733, 0, 0, 0, 0, 0, 726, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 738, 0, 0, 0, 0, 732,
	0, 734, 0, 722, 723, 724, 736, 721, 718, 719,
	720, 713, 714, 715, 716, 717, 733, 0, 0, 0,
	0, 0, 726, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 727, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 735, 0, 732, 0, 0, 0, 0, 0,
	0, 0, 0, 710, 1204, 728, 729, 730, 0, 0,
	0, 0, 0, 0, 0, 731, 0, 0, 1199, 0,
	0, 712, 0, 737, 0, 0, 0, 727, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 735, 0, 0,
	0, 711, 734, 0, 722, 723, 724, 725, 721, 718,
	719, 720, 713, 714, 715, 716, 717, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 734, 0, 722,
	723, 724, 0, 721, 718, 719, 720, 713, 714, 715,
	716, 717, 0, 0, 0, 738, 0, 0, 0, 0,
	0, 0, 710, 0, 728, 729, 730, 736, 0, 0,
	0, 0, 0, 0, 731, 0, 0, 733, 0, 0,
	712, 0, 737, 726, 0, 0, 0, 0, 0, 710,
	0, 728, 729, 730, 0, 0, 0, 0, 0, 0,
	711, 731, 0, 0, 0, 732, 725, 712, 0, 737,
	1206, 0, 1222, 1223, 1224, 0, 0, 0, 0, 0,
	0, 0, 1327, 0, 0, 0, 0, 711, 0, 0,
	0, 0, 0, 725, 0, 0, 0, 710, 727, 728,
	729, 730, 0, 0, 0, 0, 0, 0, 735, 0,
	0, 0, 0, 0, 1219, 712, 0, 737, 0, 0,
	0, 0, 0, 0, 738, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 711, 736, 0, 0, 0,
	0, 725, 0, 0, 0, 0, 733, 0, 0, 0,
	0, 738, 726, 0, 0, 0, 0, 0, 734, 0,
	722, 723, 724, 736, 721, 718, 719, 720, 713, 714,
	715, 716, 717, 733, 732, 0, 0, 0, 0, 726,
	0, 0, 0, 0, 1225, 710, 0, 728, 729, 730,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 738,
	1220, 0, 0, 712, 0, 737, 0, 727, 0, 0,
	0, 736, 0, 0, 0, 0, 0, 735, 0, 0,
	0, 733, 0, 711, 0, 0, 0, 726, 0, 725,
	0, 0, 0, 0, 727, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 735, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1221, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 734, 0, 722,
	723, 724, 0, 721, 718, 719, 720, 713, 714, 715,
	716, 717, 727, 0, 0, 0, 0, 738, 0, 0,
	0, 0, 735, 0, 734, 0, 722, 723, 724, 0,
	721, 718, 719, 720, 713, 714, 715, 716, 717, 733,
	0, 0, 0, 0, 0, 726, 0, 1216, 1217, 1218,
	0, 1215, 1212, 1213, 1214, 1207, 1208, 1209, 1210, 1211,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 734, 0, 722, 723, 724, 0, 721, 718,
	719, 720, 713, 714, 715, 716, 717, 0, 0, 918,
	934, 910, 926, 925, 0, 0, 912, 911, 0, 0,
	727, 936, 935, 0, 0, 0, 0, 0, 0, 0,
	735, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	931, 0, 923, 922, 0, 0, 0, 0, 0, 0,
	921, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 920, 0, 0, 0, 0, 0, 0,
	734, 0, 722, 723, 724, 0, 721, 718, 719, 720,
	713, 714, 715, 716, 717, 0, 914, 915, 916, 0,
	582, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 924, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 919, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 917, 0, 0, 0, 0,
	0, 938, 0, 0, 0, 0, 0, 913, 0, 0,
	932, 933, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 937,
}
var sqlPact = [...]int{

	119, -1000, 6, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 687, -1000, -1000, -1000, 621, 640, 19, 1002, 1002,
	14729, -1000, -1000, 17270, 1773, 345, 349, 345, 345, 342,
	14729, 408, 579, 85, -1000, 714, -1, 17039, 13574, 1153,
	2, 13112, 220, 119, 13343, 13574, 16808, 1015, 941, 13112,
	16577, 16346, 16115, -1000, 8953, -1000, -1000, -1000, -1000, 750,
	-1000, 1, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	745, -1000, 13574, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 15884, 15653, 772, -1000, -1000, 449, 280, 1182, -1000,
	11, -1000, -1000, -1000, 1014, -1000, 736, 1011, 1010, 1005,
	1001, 261, 826, -1000, 403, 772, -1000, 772, -1000, -1000,
	-1000, 393, 14729, -1000, 13112, -1000, 15422, 945, 15191, -1000,
	714, -1000, -1000, -1000, 784, 1152, 1152, 1152, 1175, 96,
	90, 85, -8, 13574, -1000, 221, -8, 6664, 6664, -1000,
	-1000, 220, -1000, 241, 11455, 5, -1000, 6411, -1000, 657,
	1074, 570, 527, 1071, -101, 13112, 13574, 450, 14960, -1000,
	1067, 95, 1063, -1000, -20, 1061, -1000, -32, -1000, -1000,
	-1000, -1000, -1000, -1000, 220, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 11706, 1318,
	11706, -1000, -1000, 1193, -1000, -1000, -2, -4, 896, 906,
	9457, 9206, 1114, 817, -1000, -1000, -1000, 9, 3865, 13574,
	1029, 11706, 13574, 13574, 13574, -1000, 13574, -1000, 891, -1000,
	13574, -1000, -6, -7, -1000, 14729, -1000, 103, -1000, 217,
	854, 14498, -1000, 811, -1000, 784, -1000, 758, 884, 7188,
	7947, 85, -1000, -1000, 85, 85, 7947, -1000, -1000, 13574,
	-8, 1192, 13574, 86, -1000, 18959, -1000, -1000, 7947, 7947,
	7947, 7947, 7947, 648, -1000, -1000, -1000, 4622, -1000, -1000,
	5, 215, 227, -1000, -1000, 213, 5, -1000, -1000, -1000,
	-1000, 207, 1279, 377, -1000, -1000, -1000, 7947, 284, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1028, 206,
	204, -1000, -1000, -1000, -1000, 198, 196, 195, 182, 181,
	180, 178, 177, 175, 173, 172, 171, 170, 612, -1000,
	295, -1000, -1000, 295, 295, -1000, 150, 150, 151, -1000,
	-1000, -1000, 150, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 166, 86, -1000, -1000, -1000, 13574,
	5, -1000, -1000, -1000, 7947, 3613, -37, -1000, 19562, -1000,
	-28, 797, -1000, 12640, 1139, 1131, 1144, 13112, 391, 390,
	13574, 13574, 288, 92, 1191, 10953, -1000, 13574, 13574, -1000,
	13574, -1000, -1000, 13574, 13574, 13574, -1, 12168, 388, -21,
	11937, 13574, -1000, -10, -1000, -1000, 998, 344, 609, 938,
	691, -1000, -1000, -1000, -1000, -11, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1222, -1000, -1000, -1000,
	-1000, 1266, -11, -1000, -1000, -1000, -1000, -1000, 1278, -1000,
	-1000, -1000, -1000, 3865, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	13574, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 609, 938,
	-1000, -1000, 13112, 12399, 1058, 735, 805, -1000, 1055, -1000,
	-1000, -1000, -1000, 19562, -1000, 19562, 485, 926, -1000, 926,
	-13, -1000, 18783, -1000, 163, -38, -1000, 288, 6664, 10702,
	19878, 13574, 380, 7947, 7947, 7947, 7947, 7947, 7947, 7947,
	7947, 7947, 7947, 7947, 7947, 7947, 7947, 7947, 7947, 7947,
	7947, 7947, 7947, 7947, 715, 386, 921, 630, 149, 3865,
	-1000, 1216, 1216, 1216, 19637, 19637, 167, -12, 18393, -19,
	5, -1000, -1000, 5887, 5634, 5, 4116, -1000, 924, 1264,
	293, 19562, 1009, 982, 162, 88, 83, 7947, 841, 7947,
	8200, 7947, 7947, 4875, 7947, 7947, 7947, 7947, 7947, 7947,
	-1000, 161, -1000, -1000, -1000, -1000, 1263, -1000, -1000, 1262,
	-1000, 1256, 288, 82, -1000, 2037, -1000, -1000, 6411, -1000,
	577, 13574, 13574, 13574, -1000, -1000, 801, 14267, -1000, 19878,
	13574, -1000, 158, 157, 913, 908, 13574, 13574, 14036, 13805,
	13574, 653, 13574, 13574, 499, -1000, 494, 7947, 701, -1000,
	10200, 300, 13574, 60, -1000, -1000, -1000, 252, 13574, -1000,
	-1000, -1000, 95, -1000, -20, -1000, -1000, 13574, 11937, -21,
	-22, -1000, -1000, 13574, 938, -1000, -1000, -1000, 510, -1000,
	606, -1000, 9708, -1000, -1000, -1000, 924, -1000, -30, -1000,
	-1000, -1000, -1000, 78, -25, -1000, -1000, -1000, -1000, 13574,
	242, 13574, 13574, 1051, 13574, -1000, -1000, -1000, 7947, -1000,
	-1000, -1000, -1, 13574, -1000, 981, -1000, -27, 1315, -149,
	12881, -1000, 9949, -1000, 1196, -1000, -1000, -1000, -1000, 80,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	151, 612, 150, 150, 150, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 295, 295, 295, -1000, -1000, -1000,
	259, 802, 802, 1233, 1233, 1233, 482, 482, 616, 197,
	18032, 18032, 18032, 429, 785, 785, 18032, 18032, 18032, 19637,
	19589, 1917, 7947, 384, 594, 149, 7947, -1000, 749, -1000,
	-1000, -1000, 997, 148, 8200, 8200, -1000, -1000, -1000, 4622,
	-1000, -1000, 147, 7947, -1000, 7947, -39, -99, -1000, 19562,
	-1000, -43, -1000, -1000, -26, 7947, 7947, 7947, 77, -1000,
	381, -1000, 379, 378, 376, -1000, 146, 76, 490, -1000,
	7947, 659, 145, 143, 7947, -1000, -1000, 19453, 75, 996,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 72, 19292, 71,
	2008, -1000, 8200, 8200, 8200, 4622, 133, 70, 18692, -77,
	19247, 6917, 6917, 6917, 68, 19156, 7947, -77, 2779, 2494,
	2465, -45, -47, -49, 1254, -51, 66, 65, 981, -1000,
	-1000, 7947, -1000, -1000, -1000, 375, 374, 1050, -1000, 789,
	-1000, 582, 7947, 13574, 132, 131, 629, -1000, 1048, 741,
	1045, 741, -1000, -28, 535, -1000, -1000, 369, -1000, 6664,
	19562, 494, 1148, -58, -1000, -1000, -1000, 288, 10953, 6411,
	-64, -1000, -30, -1000, -30, -1000, -1000, -1000, -1000, -1000,
	-1000, 13574, -1000, 12399, 129, 13574, 128, 127, 13574, -1000,
	-1000, 64, -1000, -1000, -1000, -1000, -1000, 970, 1173, 10702,
	935, 922, 10702, 1060, 654, 654, 654, -1000, 12881, 3348,
	-1000, -1000, 13574, 125, 10451, 57, 1315, 235, 234, -1000,
	1251, 7947, 1917, 7947, 8200, 8200, -1000, 1917, -1000, -1000,
	-1000, -1000, 995, 122, 7947, 19878, 19610, 18502, -65, 5381,
	-34, 18348, 7947, -1000, -1000, 227, -1000, 56, 6158, -1000,
	18980, -17, -17, -1000, 874, 886, 682, 434, 1230, 1272,
	1079, -1000, 7947, 19068, -1000, 11204, 291, 671, 18126, 19878,
	-1000, 7947, -1000, 991, 7947, -1000, 19878, 8200, 8200, 8200,
	8200, 8200, 8200, 8200, 8200, 8200, 8200, 8200, 8200, 8200,
	8200, 8200, 8200, 8200, 8200, 847, 8200, 1215, 1215, 1215,
	-59, 5128, -1000, 1024, 991, 7947, 7947, 19878, 54, 46,
	45, -1000, 7947, -77, 7947, 7947, 7947, -1000, -1000, -1000,
	44, -1000, 1227, -1000, -1000, 970, 18423, 13574, 13574, 13574,
	1042, 1217, -1000, 18078, -72, 13574, 13574, -1000, 904, 962,
	331, 13574, -1000, 13574, -1000, 13574, 13574, 13574, 13574, -69,
	-1000, 134, -1, 13574, 494, -1000, -1000, 250, -1000, -1000,
	8702, 120, 12399, 8702, 700, -1000, 263, 7947, 7947, 1315,
	10702, 10702, 933, 915, 10702, -1000, -1000, -1000, -1000, -1000,
	-1000, 932, 115, 13574, 12881, 392, 1221, 42, 1204, 1917,
	18235, 2517, 7947, 19878, 19725, -78, -1000, 7947, 7947, -1000,
	-79, -1000, 7947, -1000, 19562, -1000, 1270, 7947, 41, 39,
	36, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 32, -1000,
	-1000, 19562, 7947, -1000, -1000, 17501, 7947, 31, -1000, 29,
	19562, 1024, 19562, -1000, 493, 493, 1215, 1215, 1215, 540,
	540, 599, 438, 258, 258, 258, 290, 419, 419, 258,
	258, 258, 989, 845, 114, 3019, 7947, -83, -1000, -1000,
	-1000, 19562, 19562, 28, -1000, -1000, -1000, -77, 2203, 18051,
	17942, -1000, 26, 263, -1000, -1000, -1000, -1000, 13574, -1000,
	13574, -1000, 13574, 779, -1000, -1000, 905, 112, 8200, 13574,
	-1000, 727, -84, -85, 756, -1000, 721, 7947, -1000, 19878,
	741, 741, -1000, 360, 352, -1000, 1087, 8702, 1122, -1000,
	-1000, -1000, 111, -90, -1000, 199, 1151, 7947, -1000, -1000,
	110, 8702, 24, -91, 13574, -1000, 13574, 19562, -77, -1000,
	933, -1000, 108, 7947, 10702, -1000, -147, -1000, 118, -1000,
	13574, -95, -1000, -1000, 200, 97, -1000, 7947, 7947, 19725,
	-102, -1000, 19878, 1917, 1917, -1000, 17782, -1000, 18980, -1000,
	-1000, -1000, -1000, 19562, 622, -1000, 17755, -1000, -1000, -1000,
	8200, 988, 105, 19878, 17736, -1000, -1000, 7947, -1000, -1000,
	-1000, -1000, -1000, 840, -1000, -1000, -1000, 7947, 3019, 87,
	-1000, 104, -1000, -1000, -1000, 583, -1000, -1000, 19562, 1156,
	-1000, -1000, 13574, 13574, 394, -103, 13574, -1000, -1000, 4369,
	727, 8702, 1143, 5, 13574, 1143, 3042, 4116, -108, -1000,
	727, 102, -73, -1000, 1188, -1000, 13574, 19562, -1000, 932,
	-1000, 3865, -113, -1000, -1000, -1000, 1917, 1917, -1000, -1000,
	-1000, 22, 671, 1172, -1000, 18581, 8200, 19878, -121, -1000,
	2967, -1000, 2858, 877, 13574, 13574, 13574, 306, 13574, -1000,
	-1000, 445, -1000, 288, -1000, -1000, -1000, -1000, -1000, -1000,
	1151, -26, 727, -1000, 8702, 13574, 98, -123, -1000, -1000,
	-1000, -1000, 709, 7947, 18581, -128, -1000, -1000, -1000, 688,
	702, -133, -134, 87, -1000, 7947, -1000, 10953, -1000, 1143,
	20, -1000, -139, -1000, -1000, -1000, 17, 7694, 7694, -77,
	-1000, -1000, 699, 692, 505, -1000, -1000, -1000, -1000, -1000,
	877, 19562, -119, -1000, -1000, 727, -1000, -1000, -1000, 8451,
	760, 459, 18617, -1000, -1000, 1096, -1000, 323, 889, 889,
	688, -1000, -1000, 1199, -1000, -1000, -1000, -1000, -1000, -1000,
	1207, -1000, -1000, 860, -1000, -1000, 7441, -1000, -1000, -1000,
	-1000,
}
var sqlPgo = [...]int{

	0, 1529, 1528, 1206, 1525, 1522, 1521, 1515, 1514, 86,
	1513, 1512, 106, 1511, 82, 1510, 1506, 1503, 1502, 53,
	1501, 1499, 1497, 1495, 1494, 67, 49, 122, 1894, 105,
	1493, 1492, 1490, 13, 87, 85, 1487, 36, 100, 90,
	1552, 51, 1485, 117, 28, 26, 61, 72, 1484, 125,
	111, 1482, 1465, 1462, 38, 1459, 1457, 1451, 17, 42,
	15, 1446, 18, 25, 1444, 1438, 84, 1436, 83, 101,
	29, 99, 10, 1433, 55, 12, 54, 1432, 31, 1421,
	33, 58, 112, 1418, 39, 254, 47, 22, 48, 1413,
	1411, 1407, 1406, 65, 66, 69, 1405, 1404, 73, 1403,
	115, 108, 1402, 1399, 1398, 1395, 1394, 1391, 611, 1390,
	1388, 533, 3, 34, 52, 5, 97, 94, 27, 1386,
	24, 1385, 0, 819, 544, 1384, 45, 35, 60, 40,
	43, 19, 1377, 89, 1375, 1373, 1372, 1371, 1369, 59,
	1367, 56, 120, 37, 46, 70, 21, 78, 71, 109,
	127, 93, 1364, 96, 1361, 44, 1360, 1359, 630, 64,
	1356, 1355, 1354, 572, 215, 212, 41, 1350, 1349, 151,
	68, 1348, 1347, 63, 1344, 1342, 124, 1340, 119, 23,
	1335, 98, 1334, 74, 1330, 606, 91, 75, 1327, 104,
	57, 1326, 1325, 1321, 32, 2, 9, 6, 7, 4,
	20, 11, 1320, 1313, 102, 79, 1310, 132, 1308, 1307,
	30, 1304, 1303, 16, 1301, 14, 1300, 8, 1, 1299,
	126, 1297, 76, 1295, 1224, 1288, 128, 1287, 1286, 1228,
	62,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 4, 4, 35, 35, 34, 34, 34, 34,
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
	34, 32, 32, 37, 37, 37, 36, 36, 31, 31,
	5, 5, 5, 9, 10, 10, 10, 10, 10, 10,
	71, 71, 70, 70, 73, 73, 11, 11, 12, 12,
	12, 12, 154, 154, 153, 13, 18, 220, 220, 220,
	224, 224, 225, 225, 226, 226, 226, 226, 226, 226,
	226, 222, 222, 21, 21, 21, 21, 108, 108, 110,
	110, 110, 110, 39, 107, 107, 107, 107, 109, 109,
	109, 109, 178, 176, 176, 183, 183, 183, 51, 51,
	51, 51, 51, 52, 52, 52, 175, 175, 175, 175,
	184, 184, 184, 184, 184, 184, 53, 53, 53, 182,
	182, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 177, 177, 221, 221, 223,
	223, 8, 8, 54, 54, 55, 55, 114, 114, 114,
	113, 192, 192, 193, 193, 193, 194, 194, 194, 194,
	194, 194, 194, 191, 191, 189, 189, 190, 190, 190,
	190, 227, 227, 112, 112, 58, 58, 197, 197, 197,
	197, 195, 195, 195, 195, 195, 198, 196, 199, 199,
	199, 199, 199, 142, 142, 142, 24, 7, 7, 97,
	97, 62, 62, 146, 146, 146, 45, 45, 33, 33,
	33, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	98, 98, 99, 99, 16, 20, 23, 23, 23, 23,
	23, 229, 229, 42, 42, 42, 42, 43, 43, 111,
	111, 111, 111, 111, 38, 6, 6, 14, 48, 48,
	104, 104, 104, 106, 106, 106, 105, 105, 105, 84,
	84, 25, 75, 75, 76, 76, 152, 77, 77, 19,
	19, 28, 28, 26, 26, 26, 26, 26, 26, 27,
	27, 29, 29, 29, 29, 29, 29, 29, 205, 205,
	205, 207, 207, 204, 15, 15, 15, 15, 206, 206,
	228, 228, 85, 85, 85, 57, 56, 56, 60, 60,
	59, 61, 61, 145, 82, 82, 82, 82, 100, 101,
	101, 102, 102, 103, 103, 81, 81, 129, 129, 30,
	30, 66, 66, 67, 67, 120, 120, 121, 121, 119,
	119, 119, 147, 147, 147, 147, 148, 148, 148, 148,
	148, 148, 143, 143, 143, 143, 144, 144, 88, 88,
	88, 88, 86, 86, 87, 87, 149, 149, 149, 149,
	83, 83, 150, 150, 150, 115, 115, 155, 155, 155,
	65, 65, 65, 156, 156, 156, 156, 156, 156, 156,
	156, 156, 156, 157, 157, 157, 157, 159, 159, 159,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 160, 160, 167, 167, 168, 168, 169,
	170, 161, 161, 162, 162, 163, 164, 171, 171, 171,
	171, 173, 173, 165, 165, 165, 166, 94, 94, 94,
	94, 94, 94, 94, 94, 94, 94, 94, 94, 94,
	94, 95, 95, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 200, 200, 200, 200, 200, 200,
	200, 202, 202, 203, 203, 201, 201, 201, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	208, 208, 209, 209, 210, 210, 211, 211, 213, 214,
	214, 214, 215, 219, 219, 212, 212, 216, 216, 216,
	217, 217, 218, 218, 218, 218, 218, 133, 133, 133,
	134, 134, 135, 72, 72, 131, 131, 130, 130, 130,
	132, 132, 89, 172, 172, 172, 172, 172, 172, 172,
	90, 90, 96, 91, 91, 92, 92, 92, 92, 92,
	92, 126, 127, 93, 93, 93, 128, 128, 136, 140,
	140, 139, 138, 138, 137, 137, 118, 118, 118, 118,
	117, 116, 78, 78, 230, 230, 141, 141, 79, 79,
	80, 74, 74, 151, 151, 151, 151, 68, 68, 50,
	50, 69, 69, 46, 46, 49, 47, 47, 47, 47,
	63, 63, 64, 64, 44, 44, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 174, 174, 174,
	40, 40, 40, 41, 41, 180, 180, 180, 181, 181,
	181, 181, 179, 179, 179, 179, 179, 185, 185, 185,
	185, 185, 185, 185, 185, 185, 185, 185, 185, 185,
	185, 185, 185, 185, 185, 185, 185, 185, 185, 185,
	185, 185, 185, 185, 185, 185, 185, 185, 185, 185,
	185, 185, 185, 185, 185, 185, 185, 185, 185, 185,
	185, 185, 185, 185, 185, 185, 185, 185, 185, 185,
	185, 185, 185, 185, 185, 185, 185, 185, 185, 185,
	185, 185, 185, 185, 185, 185, 185, 185, 185, 185,
	185, 185, 185, 185, 185, 185, 185, 185, 185, 185,
	185, 185, 185, 185, 185, 185, 185, 185, 185, 185,
	185, 185, 185, 185, 185, 185, 185, 187, 187, 187,
	187, 187, 187, 187, 187, 187, 187, 187, 187, 187,
	187, 187, 187, 187, 187, 187, 187, 187, 187, 187,
	187, 187, 187, 187, 187, 187, 187, 187, 187, 187,
	187, 187, 187, 187, 187, 187, 187, 187, 187, 187,
	187, 186, 186, 186, 186, 186, 186, 186, 186, 186,
	186, 186, 186, 186, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 188, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 188, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 188, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 188, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 188, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 188, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 188, 188, 188, 188, 188, 188, 188,
	188, 188,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 4, 6, 1, 3, 2, 5, 3, 6,
	4, 6, 6, 6, 4, 8, 2, 3, 3, 6,
	4, 3, 2, 1, 1, 0, 2, 0, 2, 0,
	1, 1, 1, 6, 3, 5, 4, 6, 3, 5,
	1, 3, 1, 2, 2, 3, 2, 5, 1, 1,
	1, 1, 1, 3, 1, 6, 6, 1, 2, 2,
	1, 1, 1, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 2, 3, 6, 3, 2, 1, 1,
	1, 3, 3, 2, 3, 3, 3, 3, 1, 3,
	3, 2, 1, 1, 3, 1, 1, 1, 2, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 1, 1, 1, 1, 0, 1,
	1, 2, 2, 4, 2, 4, 4, 4, 4, 3,
	3, 4, 3, 2, 4, 2, 0, 2, 0, 2,
	0, 6, 9, 1, 0, 1, 3, 1, 1, 1,
	3, 2, 0, 3, 1, 2, 2, 1, 1, 2,
	4, 2, 5, 6, 7, 3, 1, 4, 5, 5,
	10, 1, 1, 4, 0, 3, 0, 2, 2, 2,
	0, 1, 1, 2, 2, 0, 3, 3, 2, 1,
	1, 2, 2, 1, 2, 1, 4, 10, 13, 1,
	0, 1, 3, 3, 3, 5, 2, 0, 1, 1,
	0, 6, 6, 8, 6, 8, 8, 10, 8, 10,
	1, 0, 2, 0, 2, 2, 3, 3, 2, 2,
	2, 1, 0, 1, 3, 2, 0, 2, 1, 1,
	1, 3, 3, 0, 3, 3, 6, 7, 1, 3,
	1, 4, 2, 8, 5, 0, 4, 3, 0, 2,
	0, 8, 1, 3, 1, 1, 3, 5, 5, 1,
	1, 3, 3, 1, 2, 3, 2, 3, 4, 1,
	1, 8, 8, 1, 2, 4, 4, 4, 2, 2,
	3, 1, 3, 6, 1, 1, 1, 1, 1, 0,
	1, 0, 1, 1, 0, 1, 1, 0, 1, 0,
	3, 1, 3, 2, 2, 2, 1, 1, 2, 2,
	3, 1, 1, 1, 1, 3, 0, 2, 0, 2,
	3, 2, 0, 1, 3, 3, 1, 1, 3, 2,
	4, 0, 3, 2, 1, 4, 3, 4, 5, 4,
	5, 4, 5, 2, 4, 1, 1, 0, 2, 2,
	2, 1, 1, 0, 4, 2, 1, 2, 2, 4,
	1, 3, 1, 2, 3, 2, 0, 2, 5, 2,
	3, 4, 0, 1, 1, 1, 1, 2, 4, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 5, 0,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 2,
	2, 1, 1, 3, 0, 1, 1, 1, 1, 5,
	2, 1, 1, 1, 1, 4, 1, 2, 2, 1,
	1, 1, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 3, 3, 3, 3, 3, 3,
	0, 1, 4, 1, 3, 3, 5, 2, 2, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	2, 2, 3, 4, 4, 5, 3, 4, 3, 3,
	4, 3, 4, 3, 4, 5, 6, 6, 7, 6,
	7, 6, 7, 3, 4, 1, 3, 2, 2, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 5, 6,
	6, 7, 1, 1, 1, 3, 1, 1, 1, 2,
	2, 2, 1, 1, 3, 5, 6, 8, 6, 6,
	4, 4, 1, 1, 1, 5, 1, 3, 1, 3,
	1, 1, 1, 1, 6, 4, 4, 4, 4, 6,
	5, 5, 5, 4, 8, 6, 6, 4, 4, 4,
	5, 0, 5, 0, 2, 0, 1, 3, 3, 2,
	2, 0, 6, 1, 0, 3, 0, 2, 2, 0,
	1, 4, 2, 2, 2, 2, 2, 4, 3, 5,
	4, 3, 5, 1, 3, 1, 3, 3, 3, 2,
	1, 3, 3, 1, 1, 1, 1, 1, 1, 1,
	4, 3, 2, 3, 0, 3, 3, 2, 2, 1,
	0, 2, 2, 3, 2, 1, 1, 3, 5, 1,
	2, 4, 2, 0, 1, 0, 1, 1, 3, 5,
	2, 2, 1, 2, 1, 0, 1, 1, 1, 3,
	3, 1, 3, 3, 2, 1, 1, 1, 3, 1,
	3, 1, 3, 1, 2, 3, 1, 2, 2, 1,
	1, 3, 3, 0, 1, 2, 1, 1, 1, 1,
	6, 2, 3, 5, 1, 1, 1, 1, 2, 2,
	1, 1, 1, 1, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -9, -10, -11, -13,
	-14, -17, -18, -20, -19, -21, -22, -23, -16, -24,
	-25, 19, -6, -7, -8, -206, 83, 89, 102, 189,
	196, -26, -28, 203, 204, 29, 211, 52, 85, 191,
	186, 230, 58, -205, -29, -27, 274, 250, 256, 199,
	-30, 217, 243, 277, 217, 70, 113, 78, 117, 237,
	70, 113, 217, -12, 274, -19, -14, -25, -9, -224,
	18, -225, -226, 58, 83, 102, 199, 117, 78, 237,
	-224, -43, 196, -40, 4, -185, -187, 16, 17, 19,
	28, 29, 33, 37, 40, 51, 52, 53, 55, 57,
	60, 61, 68, 69, 70, 71, 73, 78, 82, 83,
	89, 93, 94, 96, 98, 103, 108, 109, 114, 117,
	125, 127, 128, 133, 136, 139, 141, 142, 143, 144,
	145, 147, 148, 150, 152, 149, 155, 157, 158, 164,
	167, 170, 171, 174, 177, 178, 179, 181, 182, 186,
	184, 185, 187, 189, 191, 192, 194, 197, 198, 200,
	201, 203, 204, 206, 208, 210, 211, 214, 212, 218,
	219, 226, 230, 231, 232, 233, 236, 237, 240, 241,
	242, 246, 251, 252, 253, 254, 30, 31, 32, 34,
	35, 38, 39, 43, 44, 45, 47, 72, 74, 75,
	88, 90, 95, 104, 106, 110, 111, 118, 119, 120,
	122, 131, 154, 156, 165, 169, 173, 175, 180, 193,
	207, 213, 215, 221, 222, 223, 227, 228, 243, 244,
	-108, 136, 201, 226, -109, -107, -178, 221, 145, -70,
	-40, 196, 4, 70, 51, 71, 103, 113, 114, 128,
	218, 221, 226, 18, 58, -229, 226, 226, -229, -229,
	-42, 226, 224, -43, -228, 217, 217, -97, 70, 235,
	-27, -29, -28, -59, -60, 234, 121, 87, 163, -26,
	-28, -205, -207, 181, -204, -40, -207, -56, -57, 18,
	80, 278, -149, -46, 161, -40, -80, 274, -3, -149,
	110, -40, -49, 110, -46, 100, 123, -150, -149, -40,
	110, -50, 110, -49, -71, 110, -70, -154, -153, -181,
	4, -185, -187, -186, 243, 49, 59, 101, 116, 124,
	126, 132, 134, 146, 166, 168, 190, 205, 160, 278,
	160, -40, -108, 45, -108, -110, -38, -39, 125, 177,
	224, 259, 100, 254, -53, 6, 76, -73, 276, 100,
	-221, 160, 100, 100, 100, -177, 100, 254, 125, 177,
	217, -111, -38, -39, -111, 224, -43, -83, -149, -70,
	110, 113, -40, 110, -59, -60, -82, -100, -101, 135,
	159, -85, 18, 80, -85, -85, 37, 275, 275, 278,
	-207, -64, 274, -74, -151, -122, 267, -124, 265, 266,
	271, 151, 255, -133, -46, -125, 9, 274, -136, -202,
	-28, 88, 24, -134, -135, 193, -40, 8, 5, 6,
	7, -44, -157, -166, 229, 91, 153, 41, -200, -201,
	4, -185, -180, -158, -168, -162, -165, 122, 49, 63,
	66, 64, 67, 202, 238, 42, 90, 169, 173, 215,
	227, 228, 110, 154, 111, 47, 104, 131, 82, 31,
	32, 34, 35, 43, 44, 72, 74, 75, 95, 118,
	119, 120, 156, 180, 207, 213, 222, 223, 244, -186,
	-169, -170, -163, -164, -171, -74, -80, 267, -46, 274,
	-78, -118, -117, -116, 272, 276, -79, -141, -122, 76,
	-35, 184, -34, 17, 19, 83, 241, 88, 184, 184,
	88, 279, -150, -48, -46, 203, -40, 25, 88, -37,
	278, 40, 187, 88, 278, 88, 275, 278, -220, -69,
	217, 70, -47, -40, 267, -226, -220, 25, 278, 278,
	133, -52, 139, 150, 108, -176, 76, -183, -175, -142,
	9, 229, 91, 160, -182, 5, 266, -174, -181, 6,
	8, 265, -176, 76, 61, -184, 6, 4, -166, -142,
	76, 136, 122, 276, -179, 4, -185, -187, -186, -188,
	18, 20, 21, 22, 23, 24, 25, 26, 27, 36,
	41, 42, 46, 48, 50, 56, 58, 62, 63, 64,
	65, 66, 67, 76, 77, 79, 80, 81, 84, 85,
	87, 91, 92, 97, 99, 100, 102, 105, 107, 112,
	113, 115, 121, 123, 129, 130, 135, 137, 138, 151,
	153, 159, 160, 161, 162, 163, 172, 176, 183, 188,
	199, 202, 209, 216, 217, 220, 224, 225, 229, 234,
	235, 238, 239, 245, 247, 248, 249, 250, -178, -223,
	97, -220, -178, -178, -178, -178, 133, -178, 278, 278,
	-43, -37, 278, 274, 151, -41, 110, -40, 151, -82,
	-101, -100, -102, -122, 18, -122, -124, -27, -27, -27,
	-61, -145, -122, -204, 25, -63, -40, -66, 278, 100,
	10, 48, 28, 265, 266, 267, 268, 269, 262, 263,
	264, 261, 257, 258, 259, 54, 140, 195, 12, 13,
	14, 22, 162, 134, 255, 205, 124, 30, 112, 25,
	4, -122, -122, -122, -122, -122, 168, -28, -122, -72,
	-78, -28, -130, 272, 274, -78, 274, 6, 6, 274,
	-137, -122, -208, 251, 97, 274, 274, 274, 274, 274,
	274, 274, 274, 274, 274, 274, 274, 274, 274, 274,
	175, -173, 246, -173, -173, -159, 274, -159, -160, 274,
	-159, 274, -66, -46, -118, -122, -179, 267, 278, 275,
	278, 224, -98, 56, 50, -113, 110, 50, -189, -40,
	56, -190, 46, 235, 176, 99, -98, 56, -98, 56,
	56, -149, 224, 224, -49, -40, -115, 248, -104, -19,
	274, 76, 25, -75, -76, -152, -77, -46, 274, -40,
	-40, -49, -50, -70, -71, -12, -153, 224, 278, -69,
	-63, -117, -116, 100, 226, -39, -38, -51, 179, 208,
	185, 200, 278, 5, 8, 8, 6, -179, -222, -40,
	-39, -38, -149, -54, -55, -114, -113, -191, -189, 113,
	235, 88, 160, 151, 88, -103, 193, 194, 278, -33,
	26, 79, 274, 278, 275, -115, -151, -67, -147, -149,
	-28, -148, 274, -155, -156, -158, -167, -161, -165, -166,
	33, 39, 38, 219, 118, 119, 120, 207, 31, 180,
	95, 82, 75, 74, 156, 35, 34, -169, -170, -163,
	-164, 72, 222, 223, 32, 44, 43, 244, 213, -70,
	221, -122, -122, -122, -122, -122, -122, -122, -122, -122,
	-122, -122, -122, -122, -122, -122, -122, -122, -122, -122,
	-122, -122, 134, 205, 30, 112, 224, 153, 151, 229,
	91, 236, 80, 157, -230, 216, 27, -128, -28, 274,
	-179, -133, 193, 274, 275, 278, -72, -132, 273, -122,
	-130, -72, 275, 275, -72, 245, 18, 80, 267, -94,
	253, 143, 73, 109, 142, -95, 198, 8, -140, -139,
	247, -209, 93, 105, 274, 275, 275, -122, -89, -172,
	4, 253, 143, 73, 109, 142, 198, -90, -122, -91,
	-123, -124, 265, 266, 271, 274, 193, -92, -122, -72,
	-122, 36, 130, 225, -93, -122, 100, -72, -122, -122,
	-122, -72, -72, -72, 274, 8, 8, 8, -115, 275,
	273, 282, -141, -34, -46, -40, -40, 151, -113, 110,
	-155, -40, 274, 274, 127, 127, -40, -40, 110, -40,
	110, -40, -40, -35, 184, -40, -40, 184, -84, 188,
	-122, -106, 160, -68, -46, 243, -40, -66, 278, 259,
	-68, -37, -222, -47, -222, -38, 233, 53, 179, -183,
	-94, 278, 275, 278, -41, 113, -70, -46, 88, -40,
	-145, -15, -19, -14, -25, -9, -40, -81, 105, 278,
	59, -88, 126, 146, 101, 132, 190, 116, -119, 279,
	-144, -143, 25, -40, -28, -148, -147, -65, 24, -94,
	274, 254, -122, 224, -230, 216, -128, -122, 153, 229,
	91, 236, 80, 157, 100, 274, -123, -123, -72, 274,
	-72, -122, 278, 273, 273, 278, 275, -60, 278, -59,
	-122, -72, -72, 275, 224, 224, 224, 224, 274, 275,
	-138, -139, 84, -122, -214, 167, 274, 274, -122, 25,
	275, 100, 275, -96, 172, 275, 10, 265, 266, 267,
	268, 269, 262, 263, 264, 261, 257, 258, 259, 54,
	140, 195, 12, 13, 14, 124, 112, -123, -123, -123,
	-72, 274, 275, -126, -127, 100, 97, 25, -93, -93,
	-93, 275, 100, -72, 278, 278, 278, 275, 275, 275,
	8, 275, 278, 275, 275, -81, -122, 224, 224, 88,
	151, -192, -190, -122, -63, 274, 274, -32, 83, 203,
	-99, 88, -37, 88, -37, 224, -98, 56, 224, -74,
	-84, 55, 275, 278, -115, -76, -141, 275, -40, -114,
	274, -41, 274, 274, -40, 275, -129, 107, 37, -147,
	126, 126, -147, -88, 126, -86, 166, -86, -86, -144,
	-179, 280, -40, 274, 275, 272, 272, 8, -122, -122,
	-123, -123, 100, 274, -122, -131, -155, 22, 22, 275,
	-72, 275, 278, 275, -122, -130, 275, 245, -60, -60,
	-60, 143, 109, 142, -95, 142, -95, -95, 8, 6,
	85, -122, 220, -215, -40, 274, 248, -59, 275, -155,
	-122, -126, -122, -155, -123, -123, -123, -123, -123, -123,
	-123, -123, -123, -123, -123, -123, -123, -123, -123, -123,
	-123, -123, 80, 151, 157, -123, 278, -72, 275, -127,
	-126, -122, -122, -155, 275, 275, 275, -72, -122, -122,
	-122, 275, 8, -129, 273, -40, -40, -113, 88, -193,
	56, -194, 48, 151, 153, 235, 176, 46, 76, 183,
	275, 275, -63, -63, 151, 76, 151, 76, 69, 231,
	-40, -40, -46, -40, -40, -40, -105, 274, 160, -19,
	-46, -84, 259, -62, -146, -40, -203, 274, -200, -201,
	-44, 274, -54, -62, 160, -210, 249, -122, -72, -147,
	-147, -87, 239, 160, 126, -147, -121, -120, 98, 149,
	274, -63, -143, 273, 8, 8, 275, 22, 22, -122,
	-131, 275, 278, -122, -122, 275, -122, 6, -122, 275,
	275, 275, 275, -122, -219, -40, -122, 275, 275, -127,
	100, 80, 157, 274, -122, 275, 275, 278, 275, 275,
	275, -210, -113, -40, -70, 153, 127, 274, -123, -46,
	-112, -227, 57, 214, 275, 275, 153, 153, -122, -155,
	-37, -37, 224, 224, 81, -62, 56, -80, -28, 274,
	275, 278, -45, -78, 48, -45, -122, 274, -62, 275,
	275, -46, -211, -213, -40, -87, 274, -122, -147, 278,
	281, 259, -63, 275, 273, 273, -122, -122, 275, -155,
	275, -60, -212, 171, 275, -123, 100, 274, -131, 275,
	-122, -194, -122, -58, 274, 274, 183, -36, 48, -40,
	-40, 237, 152, 275, -40, -112, -146, -33, -70, -33,
	275, -72, 275, -112, 274, 278, 25, -63, -120, -179,
	275, 275, -60, 37, -123, -131, 275, 275, 275, -197,
	141, -63, -63, -46, -31, 239, -70, 203, -115, -45,
	-60, -112, -62, -213, -215, 275, -216, 178, 194, -72,
	275, -195, -198, -196, 160, 101, 170, 206, 275, 275,
	-58, -122, -75, -33, 275, 275, 275, -217, -218, 30,
	232, 61, -122, -217, -196, 160, -198, 160, 237, 78,
	-197, -115, -112, -218, 174, 96, 193, 174, 96, -199,
	148, 187, 40, 203, -199, -195, 22, 16, 153, 76,
	-218,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 0, 50, 51, 52, 0, 0, 319, 0, 0,
	0, 289, -2, 0, 0, 252, 0, 252, 252, 256,
	0, 321, 220, 318, -2, 329, 0, 0, 0, 327,
	303, 0, 0, -2, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 66, 0, 68, 69, 70, 71, 0,
	80, 81, 82, 84, 85, 86, 87, 88, 89, 90,
	0, 245, 817, 258, 730, 731, 732, 747, 748, 749,
	750, 751, 752, 753, 754, 755, 756, 757, 758, 759,
	760, 761, 762, 763, 764, 765, 766, 767, 768, 769,
	770, 771, 772, 773, 774, 775, 776, 777, 778, 779,
	780, 781, 782, 783, 784, 785, 786, 787, 788, 789,
	790, 791, 792, 793, 794, 795, 796, 797, 798, 799,
	800, 801, 802, 803, 804, 805, 806, 807, 808, 809,
	810, 811, 812, 813, 814, 815, 816, 818, 819, 820,
	821, 822, 823, 824, 825, 826, 827, 828, 829, 830,
	831, 832, 833, 834, 835, 836, 837, 838, 839, 840,
	841, 842, 843, 844, 845, 846, 847, 848, 849, 850,
	851, 852, 853, 854, 855, 856, 857, 858, 859, 860,
	861, 862, 863, 864, 865, 866, 867, 868, 869, 870,
	871, 872, 873, 874, 875, 876, 877, 878, 879, 880,
	881, 882, 883, 884, 885, 886, 887, 888, 889, 890,
	93, 784, 821, 832, 98, 108, 0, 884, -2, 112,
	62, 817, 141, 142, 0, 144, 158, 0, 0, 0,
	156, 0, 0, 153, 0, 263, 251, 263, 248, 249,
	250, 253, 0, 244, 0, 320, 0, 0, 0, 219,
	-2, 299, 300, -2, 0, 324, 324, 324, 0, 0,
	300, 0, 308, 807, 311, 713, 309, 0, 0, 326,
	325, 0, 304, 386, 0, 703, 349, 0, 2, 0,
	866, 0, 0, 866, 0, 0, 0, 0, 392, 54,
	866, 45, 866, 699, 58, 866, 60, 0, 72, 74,
	738, 739, 740, 741, 889, 891, 892, 893, 894, 895,
	896, 897, 898, 899, 900, 901, 902, 903, 0, 0,
	0, 257, 94, 856, 96, 97, 99, 100, 0, 0,
	0, 0, 0, 0, 111, 136, 137, 63, 0, 0,
	160, 0, 0, 0, 0, 149, 0, 150, 0, 152,
	0, 246, 259, 260, 247, 0, 255, 45, 390, 0,
	866, 734, 265, 866, -2, 0, 295, 336, 337, 0,
	0, 0, 322, 323, 0, 0, 0, 291, 292, 0,
	310, 0, 0, 352, 691, 695, 696, 473, 0, 0,
	0, 0, 0, 0, 552, 553, 554, 0, 556, 557,
	558, 861, 0, 562, 563, 880, 703, 716, 717, 718,
	719, 0, 0, 0, 724, 725, 726, 675, 601, 572,
	-2, -2, 714, 413, 414, 415, 416, -2, 891, 576,
	578, 580, 581, 582, 583, 0, 862, 876, 877, 883,
	887, 888, 866, 873, 867, 857, 864, 872, 768, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, 737,
	437, 438, 443, 444, 446, 352, 350, 387, 388, 0,
	704, 682, 676, 677, 0, 0, 0, 688, 686, 687,
	22, 241, 24, 0, 241, 241, 0, 0, 0, 0,
	0, 0, 396, 0, 268, 0, 393, 0, 0, 56,
	0, 43, 44, 0, 0, 0, 319, 0, 0, 77,
	0, 764, 701, 706, 709, 83, 0, 0, 0, 0,
	0, 103, 123, 124, 125, 104, 106, 113, 115, 116,
	117, 126, 127, 128, 129, 213, 0, 215, 139, 140,
	727, 0, 105, 107, 109, 110, 130, 131, 0, 133,
	134, 135, 456, 0, 64, 742, 743, 744, 745, 746,
	904, 905, 906, 907, 908, 909, 910, 911, 912, 913,
	914, 915, 916, 917, 918, 919, 920, 921, 922, 923,
	924, 925, 926, 927, 928, 929, 930, 931, 932, 933,
	934, 935, 936, 937, 938, 939, 940, 941, 942, 943,
	944, 945, 946, 947, 948, 949, 950, 951, 952, 953,
	954, 955, 956, 957, 958, 959, 960, 961, 962, 963,
	964, 965, 966, 967, 968, 969, 970, 971, 972, 973,
	974, 975, 976, 977, 978, 979, 980, 981, 143, 145,
	0, 157, 146, 147, 148, 155, 151, 154, 0, 0,
	254, 216, 0, 164, 0, 0, 866, 733, 0, 298,
	334, 335, 338, 341, 342, 339, 473, 305, 306, 307,
	330, 331, 230, 312, 0, 0, 710, 396, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 685, 0, 0,
	694, 477, 478, 479, 500, 501, 0, -2, 633, 0,
	559, 560, 561, 0, 0, -2, 0, 721, 470, 0,
	0, 674, 603, 0, 0, 0, 0, 0, 0, 0,
	654, 660, 0, 0, 0, 0, 0, 0, 0, 0,
	427, 440, 451, 448, 447, 429, 0, 428, 426, 0,
	430, 0, 396, 0, 683, 0, 680, 681, 0, 690,
	0, 0, 0, 0, 240, 26, 866, 0, 36, 0,
	0, 186, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 705, 280, 0, 275, 270,
	0, 0, 0, 352, 282, 284, 285, 0, 0, 394,
	55, 700, 45, 61, 59, 67, 73, 0, 0, 78,
	79, 707, 708, 0, 0, 101, 102, 264, 0, 120,
	0, 122, 0, 214, 729, 728, 470, 65, 159, 91,
	261, 262, 391, 0, 163, 165, 167, 168, 169, 734,
	0, 0, 0, 0, 0, 340, 343, 344, 0, 333,
	228, 229, 319, 0, 712, 346, 692, 351, 353, 361,
	377, 364, 0, 474, 402, 403, 404, 405, 406, 470,
	409, 410, 411, 412, 420, 421, 422, 423, 424, 425,
	434, 0, 419, 419, 419, 431, 432, 435, 436, 441,
	442, 453, 454, 455, 452, 452, 452, 449, 450, 475,
	0, 480, 481, 482, 483, 484, 485, 486, 487, 488,
	-2, -2, -2, 492, 493, 494, -2, -2, -2, 498,
	499, -2, 0, 0, 685, 0, 0, 506, 0, 509,
	511, 513, 0, 0, 0, 0, 684, 523, 666, 0,
	693, 508, 0, 0, 555, 0, 0, 0, 639, 633,
	640, 0, -2, 564, 329, 0, 0, 0, 0, 722,
	457, 458, 459, 460, 461, 462, 471, 0, 673, 669,
	0, 611, 0, 0, 0, 577, 579, 0, 0, 0,
	643, 644, 645, 646, 647, 648, 649, 0, 0, 0,
	0, 525, 0, 0, 0, 0, 880, 0, 633, 659,
	0, 0, 0, 0, 0, 633, 0, 665, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 346, 389,
	678, 0, 689, 25, 232, 0, 0, 0, 28, 866,
	172, 0, 0, 0, 0, 0, 243, 37, 866, 45,
	866, 45, 38, 23, 241, 231, 234, 0, 53, 0,
	395, 280, 0, 0, 697, 272, 269, 396, 0, 0,
	0, 57, 75, 702, 76, 95, 118, 119, 121, 114,
	132, 0, 161, 0, 0, 734, 0, 0, 0, 266,
	332, 0, 314, 315, 316, 317, 711, 348, 0, 0,
	0, 0, 0, 0, 383, 383, 383, 381, 377, 0,
	363, 376, 0, 375, -2, 364, 0, 397, 399, 407,
	0, 0, -2, 0, 0, 0, 524, -2, 507, 510,
	512, 514, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 634, 0, 637, 638, 0, -2, 0, 0, 328,
	329, 329, 329, 570, 0, 0, 0, 0, 0, 0,
	0, 670, 0, 0, 571, 0, 0, 0, 0, 0,
	585, 0, 586, 0, 0, 587, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 527, 528, 529,
	0, 0, 588, 657, 658, 0, 0, 0, 0, 0,
	0, 593, 0, 664, 0, 0, 0, 597, 598, 599,
	0, 417, 0, 433, 445, 348, 0, 0, 0, 0,
	0, 170, 185, 0, 0, 0, 0, 30, 0, 0,
	0, 0, 34, 0, 40, 0, 0, 0, 0, 279,
	267, 278, 0, 0, 280, 283, 286, 0, 92, 166,
	0, 0, 164, 0, 0, 313, 605, 0, 0, 354,
	0, 0, 0, 0, 0, 378, 382, 379, 380, 362,
	359, 0, 373, 0, 366, 0, 0, 0, 476, -2,
	0, 0, 0, 0, -2, 0, 635, 0, 0, 667,
	0, 628, 0, -2, 634, 641, 565, 0, 0, 0,
	0, 463, 464, 465, 466, 467, 468, 469, 0, 723,
	668, 672, 0, 609, 610, 614, 0, 0, 575, 0,
	642, 651, 652, 526, 530, 531, 532, 533, 534, 535,
	536, 537, 538, -2, -2, -2, 542, 543, 544, -2,
	-2, -2, 0, 0, 0, 653, 0, 0, 631, 655,
	656, 661, 662, 0, 590, 591, 592, 663, 0, 0,
	0, 439, 0, 605, 679, 236, 238, 27, 0, 171,
	0, 174, 0, 0, 177, 178, 0, 0, 0, 0,
	187, 194, 0, 0, 0, 42, 0, 0, 242, 0,
	45, 45, 233, 0, 0, 235, 0, 0, 0, 271,
	698, 281, 0, 0, 221, 227, 227, 0, 573, 574,
	0, 0, 0, 0, 0, 301, 0, 347, 345, 367,
	0, 369, 0, 0, 0, 371, 0, 357, 0, 356,
	0, 0, 365, 400, 0, 0, 408, 0, 0, -2,
	0, 517, 0, -2, -2, 627, 634, 720, 329, 566,
	568, 569, 472, 671, 616, 613, 0, 600, 584, 650,
	0, 0, 0, 0, 634, 630, 589, 0, 595, 596,
	418, 302, 29, 0, 175, 176, 179, 0, 181, 196,
	188, 0, 191, 192, 189, 0, 31, 32, 41, 47,
	33, 39, 0, 0, 0, 0, 0, 287, 288, 0,
	194, 0, 230, 715, 0, 230, 0, 0, 0, 162,
	194, 0, 604, 606, 0, 368, 0, 385, 370, 0,
	360, 0, 0, 374, 401, 398, -2, -2, 518, 636,
	629, 0, 329, 0, 602, -2, 0, 0, 0, 632,
	0, 173, 0, 200, 0, 0, 0, 49, 0, 237,
	239, 0, 274, 396, 277, 183, 222, 223, 226, 224,
	227, 329, 194, 217, 0, 0, 0, 0, 358, 355,
	372, 567, 619, 0, -2, 0, 550, 594, 180, 205,
	0, 0, 0, 196, 35, 0, 46, 0, 276, 230,
	0, 184, 0, 607, 608, 384, 0, 0, 0, 615,
	551, 182, 201, 202, 0, 197, 198, 199, 195, 193,
	200, 48, 396, 225, 565, 194, 612, 617, 620, -2,
	835, 761, 0, 618, 203, 0, 204, 0, 0, 0,
	205, 273, 218, 0, 622, 623, 624, 625, 626, 206,
	0, 209, 210, 0, 207, 190, 0, 208, 211, 212,
	621,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 263, 3, 269, 264, 3,
	274, 275, 267, 265, 278, 266, 276, 268, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 282, 277,
	257, 259, 258, 3, 279, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 272, 3, 273, 262, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 280, 261, 281, 271,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 260,
}
var sqlTok3 = [...]int{
	57600, 270, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:651
		{
			sqllex.(*scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:657
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:663
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 14:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:683
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 21:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:693
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 22:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:699
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.qname(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 23:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:703
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.qname(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 24:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:709
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 25:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:713
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:720
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 27:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:725
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 28:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:730
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 29:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:735
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 30:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:740
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: sqlDollar[3].str, Default: sqlDollar[4].union.expr()}
		}
	case 31:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:745
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: sqlDollar[3].str}
		}
	case 32:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:749
		{
			unimplemented()
		}
	case 33:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:752
		{
			sqlVAL.union.val = &AlterTableDropColumn{columnKeyword: sqlDollar[2].union.bool(), IfExists: true, Column: sqlDollar[5].str}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:757
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        sqlDollar[3].str,
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:767
		{
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:770
		{
			sqlVAL.union.val = &AlterTableAddConstraint{ConstraintDef: sqlDollar[2].union.constraintDef()}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:774
		{
			unimplemented()
		}
	case 38:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:776
		{
			unimplemented()
		}
	case 39:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:779
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   sqlDollar[5].str,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:788
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   sqlDollar[3].str,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 41:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:798
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:802
		{
			sqlVAL.union.val = nil
		}
	case 43:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:808
		{
			sqlVAL.union.val = DropCascade
		}
	case 44:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:812
		{
			sqlVAL.union.val = DropRestrict
		}
	case 45:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:816
		{
			sqlVAL.union.val = DropDefault
		}
	case 46:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:821
		{
			unimplemented()
		}
	case 47:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:822
		{
		}
	case 48:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:825
		{
			unimplemented()
		}
	case 49:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:826
		{
		}
	case 53:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:837
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retExprs()}
		}
	case 54:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:844
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 55:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:848
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 56:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:852
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 57:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:860
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 58:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:868
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.qnames(), IfExists: false}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:872
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.qnames(), IfExists: true}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:878
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:882
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 62:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:888
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:892
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:898
		{
			sqlVAL.union.val = Indirection{NameIndirection(sqlDollar[2].str)}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:902
		{
			sqlVAL.union.val = append(sqlDollar[1].union.indirect(), NameIndirection(sqlDollar[3].str))
		}
	case 66:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:909
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:913
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:919
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 72:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:928
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 73:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:932
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 75:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:942
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: NameList(sqlDollar[6].union.strs()), Targets: sqlDollar[4].union.targetList()}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:949
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: NameList(sqlDollar[6].union.strs()), Targets: sqlDollar[4].union.targetList()}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:956
		{
			sqlVAL.union.val = TargetList{Tables: QualifiedNames(sqlDollar[1].union.qnames())}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:960
		{
			sqlVAL.union.val = TargetList{Tables: QualifiedNames(sqlDollar[2].union.qnames())}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:964
		{
			sqlVAL.union.val = TargetList{Databases: NameList(sqlDollar[2].union.strs())}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:971
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:974
		{
		}
	case 82:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:978
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:982
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 84:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:989
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 85:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:993
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 86:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:997
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 87:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1001
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 88:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1005
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 89:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1009
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 90:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1013
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 91:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1021
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1025
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 93:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1033
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 94:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1037
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 95:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1041
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1045
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 97:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1051
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 99:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1058
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1062
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1066
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1070
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1077
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1083
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname(), Values: sqlDollar[3].union.exprs()}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1087
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname(), Values: sqlDollar[3].union.exprs()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1091
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname()}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1095
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname()}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1102
		{
			unimplemented()
		}
	case 110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1105
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1108
		{
			unimplemented()
		}
	case 113:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1115
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1119
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1127
		{
			sqlVAL.union.val = ValArg{name: sqlDollar[1].str}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1133
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1137
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1141
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1145
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1149
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1155
		{
			sqlVAL.union.val = Low
		}
	case 124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1159
		{
			sqlVAL.union.val = Normal
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1163
		{
			sqlVAL.union.val = High
		}
	case 126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1169
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1173
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1177
		{
			sqlVAL.union.val = NewDString(sqlDollar[1].str)
		}
	case 130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1192
		{
			sqlVAL.union.val = NewDString(sqlDollar[1].str)
		}
	case 131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1196
		{
			sqlVAL.union.val = NewDString(sqlDollar[1].str)
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1200
		{
			expr := &CastExpr{Expr: NewDString(sqlDollar[2].str), Type: sqlDollar[1].union.colType()}
			var ctx EvalContext
			d, err := expr.Eval(ctx)
			if err != nil {
				sqllex.Error("cannot evaluate to an interval type")
				return 1
			}
			if _, ok := d.(*DInterval); !ok {
				panic("not an interval type")
			}
			sqlVAL.union.val = d
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1215
		{
			sqlVAL.union.val = NewDString(sqlDollar[1].str)
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1219
		{
			sqlVAL.union.val = NewDString(sqlDollar[1].str)
		}
	case 136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1224
		{
			unimplemented()
		}
	case 137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1225
		{
			unimplemented()
		}
	case 138:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1226
		{
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1230
		{
			sqlVAL.union.val = NewDString(sqlDollar[1].str)
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1234
		{
			sqlVAL.union.val = NewDString(sqlDollar[1].str)
		}
	case 141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1240
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1244
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1248
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.qname()}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1252
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1256
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.strs()}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1260
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1264
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1268
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1272
		{
			sqlVAL.union.val = &ShowTables{Name: sqlDollar[3].union.qname()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1276
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1280
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1284
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1288
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 154:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1292
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.qname()}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1298
		{
			sqlVAL.union.val = sqlDollar[2].union.qname()
		}
	case 156:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1302
		{
			sqlVAL.union.val = (*QualifiedName)(nil)
		}
	case 157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1308
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 158:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1313
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1319
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 160:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1323
		{
			sqlVAL.union.val = []string(nil)
		}
	case 161:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1330
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.qname(), IfNotExists: false, Defs: sqlDollar[5].union.tblDefs()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1334
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.qname(), IfNotExists: true, Defs: sqlDollar[8].union.tblDefs()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1341
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1347
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1351
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1357
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1362
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1368
		{
			sqlVAL.union.val = newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1374
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 172:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1378
		{
			sqlVAL.union.val = []ColumnQualification(nil)
		}
	case 173:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1384
		{
			sqlVAL.union.val = sqlDollar[3].union.colQual()
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1388
		{
			unimplemented()
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1404
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1408
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1412
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1416
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1420
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1424
		{
			if ContainsVars(sqlDollar[2].union.expr()) {
				sqllex.Error("default expression contains a variable")
				return 1
			}
			if containsSubquery(sqlDollar[2].union.expr()) {
				sqllex.Error("default expression contains a subquery")
				return 1
			}
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1435
		{
			unimplemented()
		}
	case 183:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1439
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.idxElems(),
				Storing: sqlDollar[6].union.strs(),
			}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1447
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:    Name(sqlDollar[3].str),
					Columns: sqlDollar[5].union.idxElems(),
					Storing: sqlDollar[7].union.strs(),
				},
			}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1462
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1467
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 187:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1472
		{
			unimplemented()
		}
	case 188:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1474
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[3].union.strs()),
					Storing: sqlDollar[5].union.strs(),
				},
			}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1483
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[4].union.strs()),
				},
				PrimaryKey: true,
			}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1492
		{
			unimplemented()
		}
	case 193:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1509
		{
			sqlVAL.union.val = sqlDollar[3].union.strs()
		}
	case 194:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1513
		{
			sqlVAL.union.val = []string(nil)
		}
	case 195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1519
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 196:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1523
		{
			sqlVAL.union.val = []string(nil)
		}
	case 197:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1528
		{
			unimplemented()
		}
	case 198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1529
		{
			unimplemented()
		}
	case 199:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1530
		{
			unimplemented()
		}
	case 200:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1531
		{
		}
	case 201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1538
		{
			unimplemented()
		}
	case 202:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1539
		{
			unimplemented()
		}
	case 203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1540
		{
			unimplemented()
		}
	case 204:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1541
		{
			unimplemented()
		}
	case 205:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1542
		{
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1545
		{
			unimplemented()
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1548
		{
			unimplemented()
		}
	case 208:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1551
		{
			unimplemented()
		}
	case 209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1552
		{
			unimplemented()
		}
	case 210:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1553
		{
			unimplemented()
		}
	case 211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1554
		{
			unimplemented()
		}
	case 212:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1555
		{
			unimplemented()
		}
	case 213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1559
		{
			sqlVAL.union.val = NumVal(sqlDollar[1].str)
		}
	case 214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1563
		{
			sqlVAL.union.val = NumVal("-" + sqlDollar[2].str)
		}
	case 215:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1567
		{
			sqlVAL.union.val = NewDInt(DInt(sqlDollar[1].union.ival().Val))
		}
	case 216:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1574
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.qnames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1581
		{
			sqlVAL.union.val = &CreateIndex{
				Name:    Name(sqlDollar[4].str),
				Table:   sqlDollar[6].union.qname(),
				Unique:  sqlDollar[2].union.bool(),
				Columns: sqlDollar[8].union.idxElems(),
				Storing: sqlDollar[10].union.strs(),
			}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql.y:1591
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.qname(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.strs(),
			}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1604
		{
			sqlVAL.union.val = true
		}
	case 220:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1608
		{
			sqlVAL.union.val = false
		}
	case 221:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1614
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1618
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1627
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1630
		{
			unimplemented()
		}
	case 225:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1631
		{
			unimplemented()
		}
	case 226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1634
		{
			unimplemented()
		}
	case 227:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1635
		{
		}
	case 228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1639
		{
			sqlVAL.union.val = Ascending
		}
	case 229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1643
		{
			sqlVAL.union.val = Descending
		}
	case 230:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1647
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 231:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1654
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1658
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.qname(), NewName: sqlDollar[6].union.qname(), IfExists: false}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1662
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.qname(), NewName: sqlDollar[8].union.qname(), IfExists: true}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1666
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1670
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1674
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.qname(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1678
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.qname(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1682
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 239:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1686
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 240:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1692
		{
			sqlVAL.union.val = true
		}
	case 241:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1696
		{
			sqlVAL.union.val = false
		}
	case 242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1701
		{
		}
	case 243:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1702
		{
		}
	case 244:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1706
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1712
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1719
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1723
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1727
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1731
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1735
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1744
		{
		}
	case 252:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1745
		{
		}
	case 253:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1749
		{
			sqlVAL.str = ""
		}
	case 254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1753
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1757
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 256:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1761
		{
			sqlVAL.str = ""
		}
	case 257:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1767
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 258:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1771
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1777
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 260:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1781
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 261:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1785
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1789
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1793
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1799
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 265:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1805
		{
			sqlVAL.union.val = &CreateDatabase{Name: Name(sqlDollar[3].str)}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1809
		{
			sqlVAL.union.val = &CreateDatabase{IfNotExists: true, Name: Name(sqlDollar[6].str)}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1815
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retExprs()
		}
	case 268:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1827
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname()}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1831
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1837
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1841
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.qnames(), Rows: sqlDollar[4].union.slct()}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1845
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1852
		{
			unimplemented()
		}
	case 274:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1853
		{
			unimplemented()
		}
	case 275:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1854
		{
		}
	case 276:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1857
		{
			unimplemented()
		}
	case 277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1858
		{
			unimplemented()
		}
	case 278:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1859
		{
		}
	case 279:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1863
		{
			sqlVAL.union.val = sqlDollar[2].union.selExprs()
		}
	case 280:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1867
		{
			sqlVAL.union.val = SelectExprs(nil)
		}
	case 281:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1874
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retExprs()}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1880
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1884
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 286:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1894
		{
			sqlVAL.union.val = &UpdateExpr{Names: QualifiedNames{sqlDollar[1].union.qname()}, Expr: sqlDollar[3].union.expr()}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1906
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.qnames(), Expr: &Tuple{sqlDollar[5].union.exprs()}}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1910
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.qnames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1954
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1960
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1964
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1979
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1983
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1987
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1991
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1995
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1999
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2033
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.tblExprs(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2045
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.tblExprs(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2057
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        TableExprs{&AliasedTableExpr{Expr: sqlDollar[2].union.qname()}},
				tableSelect: true,
			}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2065
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2074
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2083
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2101
		{
			unimplemented()
		}
	case 309:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2102
		{
			unimplemented()
		}
	case 310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2103
		{
			unimplemented()
		}
	case 311:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2106
		{
			unimplemented()
		}
	case 312:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2107
		{
			unimplemented()
		}
	case 313:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2110
		{
			unimplemented()
		}
	case 314:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2114
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 318:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2122
		{
			unimplemented()
		}
	case 319:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2123
		{
		}
	case 320:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2126
		{
		}
	case 321:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2127
		{
		}
	case 322:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2131
		{
			sqlVAL.union.val = true
		}
	case 323:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2135
		{
			sqlVAL.union.val = false
		}
	case 324:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2139
		{
			sqlVAL.union.val = false
		}
	case 325:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2145
		{
			sqlVAL.union.val = true
		}
	case 326:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2150
		{
		}
	case 327:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2151
		{
		}
	case 328:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2155
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 329:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2159
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 330:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2165
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2171
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2175
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2181
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2189
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2198
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2209
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2222
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2229
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2236
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 343:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2250
		{
		}
	case 344:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2251
		{
		}
	case 345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2277
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 346:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2281
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 347:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2287
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 348:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2291
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 349:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2297
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{sqlDollar[2].union.exprs()}}}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2301
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 351:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2313
		{
			sqlVAL.union.val = sqlDollar[2].union.tblExprs()
		}
	case 352:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2317
		{
			sqlVAL.union.val = TableExprs(nil)
		}
	case 353:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2323
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2327
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 355:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2333
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2338
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2344
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 358:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2349
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			index := a.Index
			if index == "" {
				index = b.Index
			} else if b.Index != "" {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			noIndexJoin := a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = &IndexHints{Index: index, NoIndexJoin: noIndexJoin}
		}
	case 359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2369
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 360:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2373
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 361:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2377
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 362:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2384
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), Hints: sqlDollar[2].union.indexHints(), As: sqlDollar[3].union.aliasClause()}
		}
	case 363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2388
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, As: sqlDollar[2].union.aliasClause()}
		}
	case 365:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2392
		{
			unimplemented()
		}
	case 366:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2410
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 367:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2414
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2418
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 369:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2422
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 370:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2426
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astNaturalJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr()}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2430
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astNaturalJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2436
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: NameList(sqlDollar[4].union.strs())}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2440
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2444
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: NameList(sqlDollar[3].union.strs())}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2448
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2455
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2461
		{
			sqlVAL.str = astFullJoin
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2465
		{
			sqlVAL.str = astLeftJoin
		}
	case 380:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2469
		{
			sqlVAL.str = astRightJoin
		}
	case 381:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2473
		{
			sqlVAL.str = astInnerJoin
		}
	case 382:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2479
		{
		}
	case 383:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2480
		{
		}
	case 384:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2491
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: NameList(sqlDollar[3].union.strs())}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2495
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2501
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 387:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2505
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2509
		{
			sqlVAL.union.val = sqlDollar[2].union.qname()
		}
	case 389:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2513
		{
			sqlVAL.union.val = sqlDollar[3].union.qname()
		}
	case 390:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2519
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2523
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 392:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2536
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname()}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2540
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2544
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2550
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 396:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2554
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 397:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2566
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 398:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2570
		{
			unimplemented()
		}
	case 399:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2571
		{
			unimplemented()
		}
	case 400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2574
		{
			unimplemented()
		}
	case 401:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2575
		{
			unimplemented()
		}
	case 402:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2576
		{
		}
	case 408:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2584
		{
			unimplemented()
		}
	case 409:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2586
		{
			sqlVAL.union.val = &BytesType{Name: "BLOB"}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2590
		{
			sqlVAL.union.val = &BytesType{Name: "BYTES"}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2594
		{
			sqlVAL.union.val = &BytesType{Name: "BYTEA"}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2598
		{
			sqlVAL.union.val = &StringType{Name: "TEXT"}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2619
		{
			sqlVAL.union.val = &DecimalType{Prec: int(sqlDollar[2].union.ival().Val)}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2623
		{
			sqlVAL.union.val = &DecimalType{Prec: int(sqlDollar[2].union.ival().Val), Scale: int(sqlDollar[4].union.ival().Val)}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2627
		{
			sqlVAL.union.val = &DecimalType{}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2634
		{
			sqlVAL.union.val = &IntType{Name: "INT"}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2638
		{
			sqlVAL.union.val = &IntType{Name: "INT64"}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2642
		{
			sqlVAL.union.val = &IntType{Name: "INTEGER"}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2646
		{
			sqlVAL.union.val = &IntType{Name: "SMALLINT"}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2650
		{
			sqlVAL.union.val = &IntType{Name: "BIGINT"}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2654
		{
			sqlVAL.union.val = &FloatType{Name: "REAL"}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2658
		{
			sqlVAL.union.val = &FloatType{Name: "FLOAT", Prec: int(sqlDollar[2].union.ival().Val)}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2662
		{
			sqlVAL.union.val = &FloatType{Name: "DOUBLE PRECISION"}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2666
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			sqlVAL.union.val.(*DecimalType).Name = "DECIMAL"
		}
	case 429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2671
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			sqlVAL.union.val.(*DecimalType).Name = "DEC"
		}
	case 430:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2676
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			sqlVAL.union.val.(*DecimalType).Name = "NUMERIC"
		}
	case 431:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2681
		{
			sqlVAL.union.val = &BoolType{Name: "BOOLEAN"}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2685
		{
			sqlVAL.union.val = &BoolType{Name: "BOOL"}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2691
		{
			sqlVAL.union.val = sqlDollar[2].union.ival()
		}
	case 434:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2695
		{
			sqlVAL.union.val = IntVal{}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2713
		{
			sqlVAL.union.val = &IntType{Name: "BIT", N: int(sqlDollar[4].union.ival().Val)}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2719
		{
			sqlVAL.union.val = &IntType{Name: "BIT"}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2735
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
			sqlVAL.union.val.(*StringType).N = int(sqlDollar[3].union.ival().Val)
		}
	case 446:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2742
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 447:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2748
		{
			sqlVAL.union.val = &StringType{Name: "CHAR"}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2752
		{
			sqlVAL.union.val = &StringType{Name: "CHAR"}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2756
		{
			sqlVAL.union.val = &StringType{Name: "VARCHAR"}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2760
		{
			sqlVAL.union.val = &StringType{Name: "STRING"}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2765
		{
		}
	case 452:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2766
		{
		}
	case 453:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2771
		{
			sqlVAL.union.val = &DateType{}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2775
		{
			sqlVAL.union.val = &TimestampType{}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2779
		{
			sqlVAL.union.val = &TimestampType{withZone: true}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2784
		{
			sqlVAL.union.val = &IntervalType{}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2789
		{
			unimplemented()
		}
	case 458:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2790
		{
			unimplemented()
		}
	case 459:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2791
		{
			unimplemented()
		}
	case 460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2792
		{
			unimplemented()
		}
	case 461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2793
		{
			unimplemented()
		}
	case 462:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2794
		{
			unimplemented()
		}
	case 463:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2795
		{
			unimplemented()
		}
	case 464:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2796
		{
			unimplemented()
		}
	case 465:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2797
		{
			unimplemented()
		}
	case 466:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2798
		{
			unimplemented()
		}
	case 467:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2799
		{
			unimplemented()
		}
	case 468:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2800
		{
			unimplemented()
		}
	case 469:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2801
		{
			unimplemented()
		}
	case 470:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2802
		{
		}
	case 471:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2805
		{
			unimplemented()
		}
	case 472:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2806
		{
			unimplemented()
		}
	case 474:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2830
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2833
		{
			unimplemented()
		}
	case 476:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2834
		{
			unimplemented()
		}
	case 477:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2843
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2847
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2851
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2855
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2859
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2863
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2867
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2871
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2875
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2879
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2883
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2887
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2891
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2895
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2899
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2903
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2907
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2911
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2915
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2919
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2923
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2927
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2931
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2935
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2939
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2943
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2947
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2951
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2955
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2959
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2963
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2966
		{
			unimplemented()
		}
	case 509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2968
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2972
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2976
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2980
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2984
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2988
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2992
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2996
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3000
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3004
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3008
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3012
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3016
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3020
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3024
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3028
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3045
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3049
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3053
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3057
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3061
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3065
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3069
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3073
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3077
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3081
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3085
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3089
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3093
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3097
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3101
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3105
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3109
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3113
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3117
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3121
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3125
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3129
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3133
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3137
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3141
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3145
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3157
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 554:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3162
		{
			sqlVAL.union.val = ValArg{name: sqlDollar[1].str}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3166
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3172
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3176
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3180
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3186
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 562:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3190
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 563:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3194
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3202
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname()}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3206
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3209
		{
			unimplemented()
		}
	case 567:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3210
		{
			unimplemented()
		}
	case 568:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3212
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Type: All, Exprs: sqlDollar[4].union.exprs()}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3216
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Type: Distinct, Exprs: sqlDollar[4].union.exprs()}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3220
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Exprs: Exprs{StarExpr()}}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3233
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 572:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3237
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 573:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3246
		{
			unimplemented()
		}
	case 574:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3247
		{
			unimplemented()
		}
	case 575:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3251
		{
			unimplemented()
		}
	case 576:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3253
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3257
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3261
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3265
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3268
		{
			unimplemented()
		}
	case 581:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3269
		{
			unimplemented()
		}
	case 582:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3270
		{
			unimplemented()
		}
	case 583:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3271
		{
			unimplemented()
		}
	case 584:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3273
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3277
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3281
		{
			sqlVAL.union.val = &OverlayExpr{FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3285
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "STRPOS"}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3289
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3292
		{
			unimplemented()
		}
	case 590:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3294
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3298
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "LTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3302
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "RTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3306
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3310
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3314
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3318
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3322
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3326
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3330
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3336
		{
			unimplemented()
		}
	case 601:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3337
		{
		}
	case 602:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3340
		{
			unimplemented()
		}
	case 603:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3341
		{
		}
	case 604:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3345
		{
			unimplemented()
		}
	case 605:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3346
		{
		}
	case 606:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3349
		{
			unimplemented()
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3350
		{
			unimplemented()
		}
	case 608:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3353
		{
			unimplemented()
		}
	case 609:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3356
		{
			unimplemented()
		}
	case 610:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3357
		{
			unimplemented()
		}
	case 611:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3358
		{
		}
	case 612:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3362
		{
			unimplemented()
		}
	case 613:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3373
		{
			unimplemented()
		}
	case 614:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3374
		{
		}
	case 615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3377
		{
			unimplemented()
		}
	case 616:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3378
		{
		}
	case 617:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3386
		{
			unimplemented()
		}
	case 618:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3387
		{
			unimplemented()
		}
	case 619:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3388
		{
		}
	case 620:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3391
		{
			unimplemented()
		}
	case 621:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3392
		{
			unimplemented()
		}
	case 622:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3398
		{
			unimplemented()
		}
	case 623:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3399
		{
			unimplemented()
		}
	case 624:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3400
		{
			unimplemented()
		}
	case 625:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3401
		{
			unimplemented()
		}
	case 626:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3402
		{
			unimplemented()
		}
	case 627:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3413
		{
			sqlVAL.union.val = &Row{sqlDollar[3].union.exprs()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3417
		{
			sqlVAL.union.val = &Row{nil}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3421
		{
			sqlVAL.union.val = &Tuple{append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3427
		{
			sqlVAL.union.val = &Row{sqlDollar[3].union.exprs()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3431
		{
			sqlVAL.union.val = &Row{nil}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3437
		{
			sqlVAL.union.val = &Tuple{append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3478
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3482
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 635:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3488
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3492
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3498
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3502
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3506
		{
			sqlVAL.union.val = &Array{nil}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3512
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3516
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3522
		{
			sqlVAL.union.val = Exprs{NewDString(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3544
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3548
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3554
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3561
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3565
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 655:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3582
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3586
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3590
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3594
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3598
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 660:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3602
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 661:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3608
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 662:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3614
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 663:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3620
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 664:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3624
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 665:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3628
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 666:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3634
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3638
		{
			sqlVAL.union.val = &Tuple{sqlDollar[2].union.exprs()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3649
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3656
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3660
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 671:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3666
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3672
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 673:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3676
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 675:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3683
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 676:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3689
		{
			sqlVAL.union.val = sqlDollar[1].union.indirectElem()
		}
	case 677:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3693
		{
			sqlVAL.union.val = sqlDollar[1].union.indirectElem()
		}
	case 678:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3697
		{
			sqlVAL.union.val = &ArrayIndirection{Begin: sqlDollar[2].union.expr()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3701
		{
			sqlVAL.union.val = &ArrayIndirection{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3707
		{
			sqlVAL.union.val = NameIndirection(sqlDollar[2].str)
		}
	case 681:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3713
		{
			sqlVAL.union.val = qualifiedStar
		}
	case 682:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3719
		{
			sqlVAL.union.val = Indirection{sqlDollar[1].union.indirectElem()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3723
		{
			sqlVAL.union.val = append(sqlDollar[1].union.indirect(), sqlDollar[2].union.indirectElem())
		}
	case 684:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3728
		{
		}
	case 685:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3729
		{
		}
	case 687:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3738
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3744
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3748
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 690:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3757
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 691:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3763
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3767
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 693:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3773
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3782
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3786
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3790
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 697:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3798
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3802
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 699:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3808
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3812
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 701:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3818
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3822
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 703:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3833
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3837
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3843
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.qname(), Index: Name(sqlDollar[3].str)}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3854
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3858
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: Indirection{sqlDollar[2].union.indirectElem()}}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3862
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: Indirection{sqlDollar[2].union.indirectElem()}}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3866
		{
			sqlVAL.union.val = &QualifiedName{Indirect: Indirection{unqualifiedStar}}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3872
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3876
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 712:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3882
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 713:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3885
		{
		}
	case 714:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3895
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3899
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3906
		{
			sqlVAL.union.val = &IntVal{Val: sqlDollar[1].union.ival().Val, Str: sqlDollar[1].union.ival().Str}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3910
		{
			sqlVAL.union.val = NumVal(sqlDollar[1].str)
		}
	case 718:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3914
		{
			sqlVAL.union.val = NewDString(sqlDollar[1].str)
		}
	case 719:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3918
		{
			sqlVAL.union.val = NewDBytes(DBytes(sqlDollar[1].str))
		}
	case 720:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3921
		{
			unimplemented()
		}
	case 721:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3923
		{
			sqlVAL.union.val = &CastExpr{Expr: NewDString(sqlDollar[2].str), Type: sqlDollar[1].union.colType()}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3927
		{
			sqlVAL.union.val = &CastExpr{Expr: NewDString(sqlDollar[2].str), Type: sqlDollar[1].union.colType()}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3931
		{
			sqlVAL.union.val = &CastExpr{Expr: NewDString(sqlDollar[5].str), Type: sqlDollar[1].union.colType()}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3935
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 725:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3939
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 726:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3943
		{
			sqlVAL.union.val = DNull
		}
	case 728:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3950
		{
			sqlVAL.union.val = sqlDollar[2].union.ival()
		}
	case 729:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3954
		{
			sqlVAL.union.val = IntVal{Val: -sqlDollar[2].union.ival().Val, Str: "-" + sqlDollar[2].union.ival().Str}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3976
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
