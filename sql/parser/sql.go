// Code generated by go yacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"go/constant"
	"go/token"

	"github.com/pkg/errors"

	"github.com/cockroachdb/cockroach/sql/privilege"
	"github.com/cockroachdb/cockroach/util"
)

var errUnimplemented = errors.New("unimplemented")

func unimplemented() {
	panic(errUnimplemented)
}

func unimplementedWithIssue(issue int) {
	panic(util.UnimplementedWithIssueErrorf(issue, ""))
}

//line sql.y:44

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in two forms, depending on the
// type of the value being accessed. Values and pointers are directly
// type asserted from the empty interface, meaning that they will panic
// if the type assertion is incorrect. Interfaces are handled differently
// because a nil instance of an interface inserted into the empty interface
// becomes a nil instance of the empty interface and therefore will fail a
// direct type assertion. Instead, a guarded type assertion must be used,
// which returns nil if the type assertion fails.
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	return u.val.(*StrVal)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	if namePart, ok := u.val.(NamePart); ok {
		return namePart
	}
	return nil
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionName() FunctionName {
	return u.val.(FunctionName)
}
func (u *sqlSymUnion) normalizableFunctionName() NormalizableFunctionName {
	return NormalizableFunctionName{u.val.(FunctionName)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	if selectStmt, ok := u.val.(*Select); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	if selectStmt, ok := u.val.(SelectStatement); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	if constraintDef, ok := u.val.(ConstraintTableDef); ok {
		return constraintDef
	}
	return nil
}
func (u *sqlSymUnion) tblDef() TableDef {
	if tblDef, ok := u.val.(TableDef); ok {
		return tblDef
	}
	return nil
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	if colQual, ok := u.val.(NamedColumnQualification); ok {
		return colQual
	}
	return NamedColumnQualification{}
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	if colQual, ok := u.val.(ColumnQualification); ok {
		return colQual
	}
	return nil
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retExprs() ReturningExprs {
	return ReturningExprs(u.val.(SelectExprs))
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	if tblExpr, ok := u.val.(TableExpr); ok {
		return tblExpr
	}
	return nil
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	if joinCond, ok := u.val.(JoinCond); ok {
		return joinCond
	}
	return nil
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	if alterTableCmd, ok := u.val.(AlterTableCmd); ok {
		return alterTableCmd
	}
	return nil
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}

//line sql.y:318
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BEGIN = 57376
const BETWEEN = 57377
const BIGINT = 57378
const BIGSERIAL = 57379
const BIT = 57380
const BLOB = 57381
const BOOL = 57382
const BOOLEAN = 57383
const BOTH = 57384
const BY = 57385
const BYTEA = 57386
const BYTES = 57387
const CASCADE = 57388
const CASE = 57389
const CAST = 57390
const CHAR = 57391
const CHARACTER = 57392
const CHARACTERISTICS = 57393
const CHECK = 57394
const COALESCE = 57395
const COLLATE = 57396
const COLLATION = 57397
const COLUMN = 57398
const COLUMNS = 57399
const COMMIT = 57400
const COMMITTED = 57401
const CONCAT = 57402
const CONFLICT = 57403
const CONSTRAINT = 57404
const CONSTRAINTS = 57405
const COPY = 57406
const COVERING = 57407
const CREATE = 57408
const CROSS = 57409
const CUBE = 57410
const CURRENT = 57411
const CURRENT_CATALOG = 57412
const CURRENT_DATE = 57413
const CURRENT_ROLE = 57414
const CURRENT_TIME = 57415
const CURRENT_TIMESTAMP = 57416
const CURRENT_USER = 57417
const CYCLE = 57418
const DATA = 57419
const DATABASE = 57420
const DATABASES = 57421
const DATE = 57422
const DAY = 57423
const DEC = 57424
const DECIMAL = 57425
const DEFAULT = 57426
const DEALLOCATE = 57427
const DEFERRABLE = 57428
const DELETE = 57429
const DESC = 57430
const DISTINCT = 57431
const DO = 57432
const DOUBLE = 57433
const DROP = 57434
const ELSE = 57435
const ENCODING = 57436
const END = 57437
const ESCAPE = 57438
const EXCEPT = 57439
const EXISTS = 57440
const EXECUTE = 57441
const EXPLAIN = 57442
const EXTRACT = 57443
const EXTRACT_DURATION = 57444
const FALSE = 57445
const FAMILY = 57446
const FETCH = 57447
const FILTER = 57448
const FIRST = 57449
const FLOAT = 57450
const FLOORDIV = 57451
const FOLLOWING = 57452
const FOR = 57453
const FORCE_INDEX = 57454
const FOREIGN = 57455
const FROM = 57456
const FULL = 57457
const GRANT = 57458
const GRANTS = 57459
const GREATEST = 57460
const GROUP = 57461
const GROUPING = 57462
const HAVING = 57463
const HELP = 57464
const HIGH = 57465
const HOUR = 57466
const IF = 57467
const IFNULL = 57468
const ILIKE = 57469
const IN = 57470
const INTERLEAVE = 57471
const INDEX = 57472
const INDEXES = 57473
const INITIALLY = 57474
const INNER = 57475
const INSERT = 57476
const INT = 57477
const INT8 = 57478
const INT64 = 57479
const INTEGER = 57480
const INTERSECT = 57481
const INTERVAL = 57482
const INTO = 57483
const IS = 57484
const ISOLATION = 57485
const JOIN = 57486
const KEY = 57487
const KEYS = 57488
const LATERAL = 57489
const LEADING = 57490
const LEAST = 57491
const LEFT = 57492
const LEVEL = 57493
const LIKE = 57494
const LIMIT = 57495
const LOCAL = 57496
const LOCALTIME = 57497
const LOCALTIMESTAMP = 57498
const LOW = 57499
const LSHIFT = 57500
const MATCH = 57501
const MINUTE = 57502
const MONTH = 57503
const NAME = 57504
const NAMES = 57505
const NATURAL = 57506
const NEXT = 57507
const NO = 57508
const NO_INDEX_JOIN = 57509
const NORMAL = 57510
const NOT = 57511
const NOTHING = 57512
const NULL = 57513
const NULLIF = 57514
const NULLS = 57515
const NUMERIC = 57516
const OF = 57517
const OFF = 57518
const OFFSET = 57519
const ON = 57520
const ONLY = 57521
const OR = 57522
const ORDER = 57523
const ORDINALITY = 57524
const OUT = 57525
const OUTER = 57526
const OVER = 57527
const OVERLAPS = 57528
const OVERLAY = 57529
const PARENT = 57530
const PARTIAL = 57531
const PARTITION = 57532
const PASSWORD = 57533
const PLACING = 57534
const POSITION = 57535
const PRECEDING = 57536
const PRECISION = 57537
const PREPARE = 57538
const PRIMARY = 57539
const PRIORITY = 57540
const RANGE = 57541
const READ = 57542
const REAL = 57543
const RECURSIVE = 57544
const REF = 57545
const REFERENCES = 57546
const RENAME = 57547
const REPEATABLE = 57548
const RELEASE = 57549
const RESTRICT = 57550
const RETURNING = 57551
const REVOKE = 57552
const RIGHT = 57553
const ROLLBACK = 57554
const ROLLUP = 57555
const ROW = 57556
const ROWS = 57557
const RSHIFT = 57558
const SAVEPOINT = 57559
const SEARCH = 57560
const SECOND = 57561
const SELECT = 57562
const SERIAL = 57563
const SERIALIZABLE = 57564
const SESSION = 57565
const SESSION_USER = 57566
const SET = 57567
const SHOW = 57568
const SIMILAR = 57569
const SIMPLE = 57570
const SMALLINT = 57571
const SMALLSERIAL = 57572
const SNAPSHOT = 57573
const SOME = 57574
const SPLIT = 57575
const SQL = 57576
const START = 57577
const STDIN = 57578
const STRICT = 57579
const STRING = 57580
const STORING = 57581
const SUBSTRING = 57582
const SYMMETRIC = 57583
const SYSTEM = 57584
const TABLE = 57585
const TABLES = 57586
const TEXT = 57587
const THEN = 57588
const TIME = 57589
const TIMESTAMP = 57590
const TIMESTAMPTZ = 57591
const TO = 57592
const TRAILING = 57593
const TRANSACTION = 57594
const TREAT = 57595
const TRIM = 57596
const TRUE = 57597
const TRUNCATE = 57598
const TYPE = 57599
const UNBOUNDED = 57600
const UNCOMMITTED = 57601
const UNION = 57602
const UNIQUE = 57603
const UNKNOWN = 57604
const UPDATE = 57605
const UPSERT = 57606
const USER = 57607
const USING = 57608
const VALID = 57609
const VALIDATE = 57610
const VALUE = 57611
const VALUES = 57612
const VARCHAR = 57613
const VARIADIC = 57614
const VIEW = 57615
const VARYING = 57616
const WHEN = 57617
const WHERE = 57618
const WINDOW = 57619
const WITH = 57620
const WITHIN = 57621
const WITHOUT = 57622
const YEAR = 57623
const ZONE = 57624
const NOT_LA = 57625
const WITH_LA = 57626
const AS_LA = 57627
const POSTFIXOP = 57628
const UMINUS = 57629

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:4883

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 27,
	306, 27,
	-2, 380,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 46,
	1, 353,
	178, 353,
	209, 353,
	304, 353,
	306, 353,
	-2, 363,
	-1, 59,
	1, 356,
	178, 356,
	209, 356,
	304, 356,
	306, 356,
	-2, 362,
	-1, 68,
	1, 27,
	306, 27,
	-2, 380,
	-1, 389,
	1, 174,
	306, 174,
	-2, 882,
	-1, 424,
	153, 390,
	177, 390,
	-2, 359,
	-1, 427,
	153, 389,
	177, 389,
	-2, 357,
	-1, 547,
	153, 389,
	177, 389,
	-2, 360,
	-1, 603,
	303, 820,
	-2, 813,
	-1, 604,
	303, 821,
	-2, 814,
	-1, 610,
	5, 525,
	303, 525,
	-2, 974,
	-1, 634,
	5, 491,
	-2, 948,
	-1, 635,
	5, 519,
	303, 519,
	-2, 950,
	-1, 636,
	5, 499,
	-2, 951,
	-1, 637,
	5, 498,
	-2, 952,
	-1, 638,
	5, 519,
	303, 519,
	-2, 955,
	-1, 639,
	5, 519,
	303, 519,
	-2, 956,
	-1, 640,
	5, 520,
	-2, 959,
	-1, 641,
	5, 485,
	-2, 960,
	-1, 642,
	5, 485,
	-2, 961,
	-1, 643,
	5, 501,
	-2, 965,
	-1, 644,
	5, 486,
	-2, 970,
	-1, 645,
	5, 487,
	-2, 971,
	-1, 646,
	5, 488,
	-2, 972,
	-1, 647,
	5, 489,
	-2, 973,
	-1, 648,
	5, 485,
	-2, 977,
	-1, 649,
	5, 492,
	-2, 982,
	-1, 650,
	5, 490,
	-2, 985,
	-1, 651,
	5, 517,
	303, 517,
	-2, 987,
	-1, 652,
	5, 521,
	-2, 990,
	-1, 653,
	5, 523,
	-2, 991,
	-1, 654,
	5, 516,
	303, 516,
	-2, 995,
	-1, 901,
	97, 363,
	139, 363,
	153, 363,
	177, 363,
	181, 363,
	260, 363,
	-2, 637,
	-1, 909,
	303, 798,
	-2, 787,
	-1, 1111,
	13, 0,
	14, 0,
	15, 0,
	286, 0,
	287, 0,
	288, 0,
	-2, 560,
	-1, 1112,
	13, 0,
	14, 0,
	15, 0,
	286, 0,
	287, 0,
	288, 0,
	-2, 561,
	-1, 1113,
	13, 0,
	14, 0,
	15, 0,
	286, 0,
	287, 0,
	288, 0,
	-2, 562,
	-1, 1117,
	13, 0,
	14, 0,
	15, 0,
	286, 0,
	287, 0,
	288, 0,
	-2, 566,
	-1, 1118,
	13, 0,
	14, 0,
	15, 0,
	286, 0,
	287, 0,
	288, 0,
	-2, 567,
	-1, 1119,
	13, 0,
	14, 0,
	15, 0,
	286, 0,
	287, 0,
	288, 0,
	-2, 568,
	-1, 1122,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	227, 0,
	283, 0,
	-2, 573,
	-1, 1128,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	227, 0,
	283, 0,
	-2, 575,
	-1, 1131,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	227, 0,
	283, 0,
	-2, 580,
	-1, 1132,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	227, 0,
	283, 0,
	-2, 581,
	-1, 1133,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	227, 0,
	283, 0,
	-2, 582,
	-1, 1158,
	186, 709,
	-2, 712,
	-1, 1181,
	114, 725,
	303, 820,
	-2, 813,
	-1, 1182,
	114, 726,
	-2, 944,
	-1, 1183,
	114, 727,
	-2, 880,
	-1, 1184,
	114, 728,
	-2, 853,
	-1, 1185,
	114, 729,
	-2, 868,
	-1, 1186,
	114, 730,
	-2, 879,
	-1, 1187,
	114, 731,
	-2, 914,
	-1, 1334,
	97, 363,
	139, 363,
	153, 363,
	177, 363,
	181, 363,
	260, 363,
	-2, 438,
	-1, 1338,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	227, 0,
	283, 0,
	-2, 574,
	-1, 1339,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	227, 0,
	283, 0,
	-2, 576,
	-1, 1344,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	227, 0,
	283, 0,
	-2, 577,
	-1, 1362,
	186, 708,
	-2, 711,
	-1, 1526,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	227, 0,
	283, 0,
	-2, 578,
	-1, 1531,
	142, 0,
	-2, 592,
	-1, 1539,
	186, 710,
	-2, 713,
	-1, 1573,
	13, 0,
	14, 0,
	15, 0,
	286, 0,
	287, 0,
	288, 0,
	-2, 618,
	-1, 1574,
	13, 0,
	14, 0,
	15, 0,
	286, 0,
	287, 0,
	288, 0,
	-2, 619,
	-1, 1575,
	13, 0,
	14, 0,
	15, 0,
	286, 0,
	287, 0,
	288, 0,
	-2, 620,
	-1, 1579,
	13, 0,
	14, 0,
	15, 0,
	286, 0,
	287, 0,
	288, 0,
	-2, 624,
	-1, 1580,
	13, 0,
	14, 0,
	15, 0,
	286, 0,
	287, 0,
	288, 0,
	-2, 625,
	-1, 1581,
	13, 0,
	14, 0,
	15, 0,
	286, 0,
	287, 0,
	288, 0,
	-2, 626,
	-1, 1685,
	142, 0,
	-2, 593,
	-1, 1688,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	227, 0,
	283, 0,
	-2, 596,
	-1, 1689,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	227, 0,
	283, 0,
	-2, 598,
	-1, 1776,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	227, 0,
	283, 0,
	-2, 597,
	-1, 1777,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	227, 0,
	283, 0,
	-2, 599,
	-1, 1784,
	142, 0,
	-2, 627,
	-1, 1829,
	142, 0,
	-2, 628,
	-1, 1881,
	35, 0,
	127, 0,
	152, 0,
	227, 0,
	283, 0,
	-2, 947,
}

const sqlNprod = 1090
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 25278

var sqlAct = [...]int{

	604, 1880, 1861, 987, 1903, 1493, 1728, 1835, 1862, 1879,
	995, 1083, 1863, 1210, 1550, 715, 824, 1059, 428, 1677,
	602, 601, 1751, 1764, 1610, 462, 1671, 1092, 1651, 75,
	904, 1650, 449, 390, 1331, 1505, 830, 1664, 1419, 262,
	75, 75, 75, 1063, 45, 75, 594, 1058, 75, 1418,
	260, 1259, 700, 906, 1365, 1330, 75, 716, 1321, 833,
	1091, 1062, 1515, 75, 75, 667, 996, 75, 965, 670,
	75, 75, 75, 76, 956, 1144, 1315, 1207, 1168, 1027,
	1141, 779, 1011, 1095, 655, 1020, 435, 58, 848, 533,
	763, 686, 566, 937, 672, 1053, 1093, 19, 1178, 26,
	15, 576, 7, 567, 461, 463, 433, 464, 534, 760,
	941, 9, 263, 483, 790, 427, 476, 249, 1066, 477,
	8, 6, 4, 264, 58, 854, 438, 550, 549, 474,
	551, 387, 59, 377, 781, 251, 368, 256, 255, 989,
	257, 777, 759, 693, 470, 554, 532, 988, 436, 258,
	259, 1771, 702, 259, 1772, 58, 380, 702, 253, 252,
	254, 60, 992, 446, 702, 1895, 452, 1877, 1087, 1030,
	1750, 1869, 857, 858, 1087, 432, 1859, 432, 1270, 1017,
	1024, 1854, 1831, 1825, 1087, 1017, 1087, 455, 1329, 415,
	682, 425, 1319, 57, 1815, 860, 57, 1750, 857, 858,
	1805, 1778, 1775, 1087, 1017, 1087, 1761, 1758, 1749, 1750,
	1087, 1750, 440, 1819, 1318, 855, 859, 857, 858, 36,
	424, 860, 36, 1025, 1753, 1733, 1318, 37, 1087, 64,
	37, 1732, 1710, 1690, 1087, 1030, 1030, 1586, 1687, 1360,
	860, 1017, 859, 1271, 1361, 75, 75, 75, 75, 75,
	1637, 486, 66, 1030, 1636, 1622, 1538, 1030, 1087, 1026,
	1023, 859, 1535, 1479, 1473, 1030, 984, 984, 1297, 954,
	1436, 865, 596, 1437, 1434, 1433, 1300, 1030, 1030, 67,
	1432, 479, 479, 1030, 1359, 1362, 1087, 62, 1030, 1030,
	1032, 1299, 1152, 63, 1087, 433, 1088, 865, 64, 1087,
	1082, 1364, 1039, 1030, 1029, 1030, 1016, 1030, 983, 1017,
	953, 984, 61, 952, 703, 1047, 865, 856, 1028, 703,
	875, 66, 710, 562, 487, 711, 703, 465, 857, 858,
	561, 466, 819, 466, 818, 488, 771, 770, 498, 445,
	465, 471, 68, 64, 466, 804, 875, 64, 67, 518,
	64, 860, 1389, 1390, 1878, 1875, 62, 1868, 1826, 1759,
	1715, 1711, 63, 1703, 75, 484, 66, 1702, 480, 1701,
	66, 1696, 859, 66, 1695, 1694, 1648, 1601, 876, 75,
	1022, 991, 75, 75, 1642, 1596, 1595, 1594, 1541, 1524,
	1504, 1483, 1441, 67, 1438, 1426, 1417, 67, 1388, 1385,
	67, 1384, 1021, 1149, 876, 62, 1382, 1370, 62, 1369,
	459, 63, 1298, 706, 63, 75, 1302, 75, 701, 75,
	75, 75, 829, 75, 1224, 822, 61, 865, 1175, 1174,
	61, 912, 561, 250, 1647, 560, 1270, 1552, 75, 1845,
	1818, 1797, 1795, 548, 1786, 1768, 1756, 1747, 1725, 75,
	1708, 1395, 540, 1680, 543, 869, 861, 862, 863, 864,
	866, 75, 886, 1658, 1530, 1481, 1523, 262, 75, 75,
	75, 465, 75, 1646, 506, 466, 1501, 1499, 662, 547,
	1389, 1390, 861, 862, 863, 864, 866, 688, 886, 1498,
	1496, 75, 1150, 507, 1453, 1452, 1416, 1378, 75, 1377,
	75, 861, 862, 863, 864, 866, 907, 886, 757, 1641,
	855, 486, 486, 539, 857, 858, 1356, 690, 769, 262,
	75, 1352, 75, 75, 75, 75, 75, 75, 75, 1146,
	705, 1286, 75, 708, 1251, 661, 1250, 75, 501, 503,
	263, 1238, 1237, 1217, 1173, 75, 1086, 942, 537, 857,
	858, 264, 945, 949, 935, 934, 535, 933, 859, 932,
	828, 931, 930, 75, 471, 929, 75, 928, 425, 805,
	927, 926, 860, 925, 924, 923, 557, 558, 922, 1395,
	921, 920, 919, 852, 487, 487, 563, 712, 910, 1238,
	908, 821, 263, 859, 903, 488, 488, 424, 61, 460,
	823, 450, 565, 264, 504, 494, 492, 857, 858, 1280,
	1279, 663, 692, 695, 863, 864, 866, 678, 886, 1773,
	909, 512, 1645, 1272, 1077, 433, 947, 1440, 1665, 1439,
	948, 1337, 528, 1193, 513, 766, 1391, 1392, 1393, 1394,
	1396, 917, 767, 827, 988, 1553, 1169, 938, 801, 1266,
	1447, 806, 1841, 794, 810, 811, 812, 813, 814, 1373,
	673, 1892, 674, 817, 809, 673, 75, 674, 1024, 1891,
	820, 1804, 1630, 673, 75, 674, 1293, 836, 75, 838,
	663, 837, 75, 75, 1038, 408, 245, 425, 241, 850,
	425, 425, 414, 966, 413, 409, 1741, 75, 1740, 75,
	75, 422, 75, 1467, 431, 75, 1444, 75, 75, 1443,
	75, 1025, 486, 1340, 1285, 1284, 844, 959, 1283, 845,
	846, 1282, 1129, 799, 798, 1031, 792, 787, 657, 913,
	981, 675, 939, 940, 978, 242, 675, 536, 246, 1766,
	1005, 479, 656, 479, 675, 1221, 430, 1026, 1023, 970,
	972, 1730, 958, 943, 969, 1220, 1100, 510, 1464, 946,
	1480, 531, 75, 75, 1803, 722, 1393, 1394, 1396, 490,
	958, 417, 1668, 1468, 975, 1455, 957, 1143, 1389, 1390,
	1034, 1143, 1255, 684, 1618, 487, 800, 950, 432, 1843,
	696, 990, 962, 990, 1488, 511, 488, 58, 979, 1028,
	1900, 58, 1260, 802, 886, 262, 1028, 1471, 251, 75,
	256, 255, 1012, 257, 1014, 1013, 1619, 1015, 1003, 1911,
	1856, 570, 258, 75, 75, 1009, 484, 1006, 1008, 1007,
	75, 253, 252, 254, 1004, 994, 1857, 1891, 968, 886,
	1865, 1169, 1080, 1081, 1249, 702, 1268, 940, 939, 671,
	943, 247, 946, 1028, 71, 1052, 1264, 75, 1089, 751,
	75, 1041, 680, 1253, 244, 243, 418, 429, 1022, 1043,
	1035, 1033, 1036, 803, 1798, 1045, 1292, 1395, 263, 1040,
	683, 248, 1294, 509, 423, 936, 1320, 1260, 419, 264,
	679, 1046, 369, 1099, 262, 1126, 420, 886, 1073, 1782,
	1044, 1614, 967, 1615, 1485, 1899, 70, 676, 1456, 1056,
	1389, 1390, 676, 374, 1866, 1097, 1098, 1748, 370, 1057,
	676, 1153, 1157, 900, 1160, 1731, 1405, 1055, 1376, 1617,
	688, 1906, 857, 858, 1324, 688, 1620, 1180, 1180, 1191,
	1486, 1202, 371, 1516, 1147, 508, 1462, 1214, 1215, 1216,
	432, 529, 1327, 1867, 1223, 860, 75, 75, 75, 1090,
	373, 1156, 75, 1322, 955, 75, 1864, 263, 1890, 1325,
	1888, 75, 75, 75, 75, 75, 859, 553, 264, 75,
	552, 1912, 75, 1323, 1406, 75, 1342, 1124, 1127, 1898,
	1142, 1663, 75, 1616, 75, 1075, 521, 1673, 1165, 1028,
	509, 75, 1148, 499, 553, 1231, 530, 703, 366, 1395,
	497, 75, 1123, 793, 788, 1706, 1509, 1735, 1225, 69,
	1734, 1235, 1917, 1188, 1723, 1792, 1446, 1234, 1582, 1484,
	1326, 865, 75, 75, 1230, 1076, 433, 776, 75, 835,
	1626, 1262, 609, 1629, 825, 1248, 372, 1836, 486, 1226,
	1628, 1904, 369, 816, 552, 772, 1724, 1274, 1405, 1275,
	1276, 1399, 1391, 1392, 1393, 1394, 1396, 1674, 75, 1240,
	75, 774, 75, 374, 1239, 1278, 75, 1511, 370, 75,
	875, 1510, 775, 1265, 1349, 1672, 508, 1125, 75, 375,
	1678, 469, 1273, 1905, 468, 75, 430, 75, 1347, 659,
	544, 1707, 371, 1494, 1301, 1305, 1303, 1277, 1583, 1916,
	1907, 589, 1389, 1390, 1584, 1649, 1406, 1506, 1721, 1235,
	373, 487, 1139, 1289, 1336, 1625, 1316, 1288, 1291, 1295,
	722, 722, 488, 1290, 1172, 1627, 1137, 1296, 876, 1722,
	73, 433, 1785, 1705, 1420, 1679, 1529, 1547, 1383, 1351,
	1256, 360, 361, 362, 1037, 982, 379, 527, 526, 391,
	1355, 525, 1404, 524, 1357, 523, 1345, 379, 1304, 1313,
	1350, 1312, 1307, 58, 439, 439, 1367, 1368, 73, 1363,
	1335, 73, 73, 458, 1012, 522, 1014, 1013, 519, 1015,
	467, 433, 1320, 1421, 1391, 1392, 1393, 1394, 1396, 918,
	808, 1171, 1135, 1343, 1134, 1860, 372, 1341, 1140, 1833,
	1607, 1395, 1415, 867, 868, 869, 861, 862, 863, 864,
	866, 745, 886, 1428, 1324, 1460, 1458, 1445, 1309, 1078,
	1071, 1010, 709, 707, 704, 744, 722, 699, 681, 75,
	1324, 677, 1327, 433, 834, 1742, 1372, 555, 443, 375,
	1346, 1084, 1892, 1514, 796, 1744, 1451, 1348, 1327, 1325,
	1405, 515, 3, 974, 1465, 1466, 1472, 1753, 958, 1322,
	958, 75, 75, 1475, 973, 1325, 971, 1800, 1828, 1507,
	658, 365, 1423, 1424, 1425, 559, 977, 976, 1136, 1323,
	722, 407, 1820, 1661, 1074, 1138, 1070, 1459, 75, 1461,
	1442, 75, 993, 75, 851, 1449, 768, 714, 1085, 1019,
	75, 1914, 1915, 1821, 556, 444, 1389, 1390, 1406, 75,
	1326, 1602, 1500, 75, 1463, 376, 857, 858, 1491, 75,
	262, 451, 1477, 75, 722, 75, 1326, 1476, 1478, 1497,
	516, 1049, 1048, 1482, 410, 411, 1508, 1248, 1435, 1281,
	1512, 1222, 1219, 1470, 1218, 1166, 73, 472, 73, 391,
	391, 1474, 1495, 1487, 1489, 1490, 1050, 1692, 1532, 1546,
	1536, 1503, 1310, 1306, 1051, 843, 911, 75, 416, 1729,
	1520, 367, 1513, 807, 1519, 1543, 1544, 1545, 1517, 1518,
	520, 1855, 1400, 1397, 1398, 1399, 1391, 1392, 1393, 1394,
	1396, 1698, 1375, 263, 1763, 1781, 1170, 916, 35, 826,
	1653, 582, 1608, 1448, 264, 1540, 1065, 1064, 265, 797,
	786, 605, 780, 789, 1179, 606, 660, 607, 719, 608,
	1587, 720, 944, 1554, 595, 717, 1559, 482, 1556, 1557,
	1317, 1597, 997, 1167, 75, 75, 75, 1561, 1562, 1371,
	914, 581, 587, 75, 75, 586, 1154, 1589, 491, 75,
	578, 75, 1676, 75, 75, 75, 1328, 48, 75, 1590,
	1623, 1624, 505, 385, 386, 495, 1263, 1640, 1603, 1079,
	1593, 839, 1457, 421, 1386, 493, 1200, 1192, 1189, 1606,
	500, 577, 538, 391, 391, 666, 998, 517, 1269, 75,
	75, 1018, 564, 847, 442, 441, 1060, 514, 773, 1042,
	412, 75, 75, 1794, 1072, 75, 1659, 1656, 1655, 1233,
	72, 1667, 1656, 1655, 75, 75, 379, 1644, 73, 1910,
	391, 542, 391, 1662, 545, 721, 1799, 1454, 1669, 1670,
	1840, 1681, 1675, 1657, 65, 25, 1686, 1660, 1657, 439,
	23, 22, 21, 75, 20, 18, 17, 16, 447, 1682,
	73, 454, 457, 24, 1639, 14, 13, 12, 11, 10,
	34, 1643, 73, 33, 1618, 32, 1611, 31, 30, 73,
	73, 73, 29, 697, 1609, 5, 745, 745, 1613, 2,
	1, 0, 747, 0, 0, 0, 0, 0, 1704, 0,
	744, 744, 73, 0, 0, 0, 1619, 0, 75, 764,
	75, 764, 75, 75, 0, 0, 0, 0, 0, 0,
	0, 75, 0, 0, 0, 722, 1612, 0, 0, 0,
	0, 391, 0, 764, 391, 391, 391, 391, 391, 815,
	0, 1716, 75, 391, 0, 1719, 0, 0, 379, 0,
	0, 1717, 0, 722, 722, 0, 832, 0, 0, 1743,
	0, 0, 722, 722, 75, 0, 75, 0, 0, 0,
	0, 0, 0, 0, 439, 75, 1754, 853, 1745, 1656,
	1655, 75, 0, 1752, 1738, 1739, 0, 0, 1737, 0,
	1757, 1614, 745, 1615, 0, 722, 0, 1767, 1774, 0,
	0, 0, 1770, 0, 0, 1657, 744, 0, 0, 0,
	0, 0, 1780, 0, 0, 0, 0, 0, 0, 1617,
	0, 0, 75, 0, 1787, 0, 1620, 0, 0, 0,
	0, 0, 0, 0, 1796, 0, 447, 0, 457, 0,
	0, 75, 75, 1790, 0, 75, 745, 0, 1194, 75,
	0, 0, 0, 0, 75, 0, 1808, 0, 1791, 1760,
	744, 0, 0, 1810, 0, 1816, 1812, 0, 1817, 75,
	1814, 1656, 1655, 746, 262, 1353, 1354, 73, 688, 1809,
	0, 0, 0, 1616, 0, 963, 1822, 1811, 0, 73,
	745, 1823, 433, 73, 980, 0, 75, 1657, 75, 75,
	1827, 75, 1830, 722, 744, 0, 0, 0, 73, 1844,
	1001, 1002, 758, 73, 1846, 1838, 73, 0, 391, 391,
	75, 391, 1849, 1850, 1824, 0, 0, 0, 0, 1412,
	1413, 1414, 0, 1848, 1842, 1853, 1847, 0, 0, 1656,
	1655, 0, 1858, 1852, 75, 0, 75, 263, 0, 0,
	1851, 0, 0, 0, 1872, 1876, 1870, 0, 264, 1874,
	0, 75, 0, 1873, 0, 1657, 0, 1885, 0, 0,
	0, 0, 1889, 764, 853, 1887, 1894, 0, 1893, 0,
	0, 0, 0, 1897, 1896, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1909, 1908, 0, 0,
	721, 721, 1913, 722, 0, 0, 0, 0, 447, 0,
	0, 0, 0, 0, 0, 0, 1918, 0, 718, 0,
	1054, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 73, 1061, 0, 0, 0, 0,
	664, 853, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 687, 0, 1389, 1390, 0, 747, 747, 447,
	694, 694, 0, 1194, 1194, 0, 0, 0, 73, 0,
	0, 391, 0, 0, 0, 1527, 1528, 0, 0, 0,
	0, 722, 447, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 392, 0, 0, 721, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1194, 1194, 1194,
	0, 405, 0, 0, 0, 1563, 1564, 1565, 1566, 1567,
	1568, 1569, 1570, 1571, 1572, 1573, 1574, 1575, 1576, 1577,
	1578, 1579, 1580, 1581, 0, 1585, 0, 0, 0, 0,
	0, 0, 0, 1395, 0, 0, 394, 0, 0, 722,
	721, 399, 400, 747, 0, 406, 0, 73, 1228, 1229,
	0, 0, 0, 963, 0, 0, 1236, 393, 395, 0,
	0, 745, 1241, 1242, 1244, 1246, 1247, 0, 0, 0,
	1252, 0, 0, 1254, 0, 744, 73, 0, 0, 0,
	0, 0, 1405, 73, 721, 1267, 0, 0, 0, 745,
	745, 0, 73, 0, 0, 0, 396, 747, 745, 745,
	0, 0, 73, 744, 744, 0, 0, 0, 0, 397,
	398, 0, 744, 744, 0, 0, 0, 0, 746, 746,
	0, 0, 0, 1054, 764, 401, 0, 0, 0, 1054,
	0, 745, 0, 0, 0, 0, 0, 951, 0, 0,
	1406, 747, 0, 1194, 1194, 744, 0, 0, 0, 447,
	0, 0, 0, 457, 0, 0, 0, 0, 0, 832,
	0, 832, 0, 391, 0, 0, 0, 73, 999, 0,
	1311, 0, 0, 457, 0, 0, 457, 0, 0, 1314,
	0, 0, 0, 0, 0, 0, 1333, 0, 73, 0,
	0, 0, 0, 1194, 1194, 1194, 1194, 1194, 1194, 1194,
	1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194,
	1194, 1194, 0, 1194, 1400, 1397, 1398, 1399, 1391, 1392,
	1393, 1394, 1396, 402, 746, 0, 403, 0, 0, 0,
	0, 404, 0, 1726, 568, 568, 0, 1389, 1390, 745,
	1407, 1408, 1409, 668, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 744, 0, 0, 0, 0, 689, 0,
	0, 0, 0, 718, 718, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 746, 0,
	0, 0, 0, 0, 0, 0, 0, 1404, 0, 0,
	0, 857, 858, 0, 447, 0, 0, 887, 888, 889,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 583, 46, 860, 0, 891, 0, 0, 1784,
	0, 0, 746, 0, 0, 0, 0, 0, 447, 0,
	853, 0, 0, 0, 0, 859, 1395, 1389, 1390, 745,
	0, 874, 0, 0, 0, 840, 842, 0, 0, 0,
	46, 0, 849, 744, 0, 0, 0, 0, 0, 0,
	0, 0, 73, 73, 895, 896, 897, 898, 899, 718,
	0, 426, 0, 902, 434, 721, 0, 0, 0, 0,
	0, 46, 0, 0, 0, 1405, 0, 0, 0, 1492,
	865, 0, 963, 915, 832, 0, 0, 0, 0, 1829,
	0, 1502, 0, 721, 721, 0, 0, 0, 884, 892,
	73, 0, 721, 721, 73, 0, 0, 745, 0, 0,
	1333, 1194, 0, 718, 1522, 0, 1333, 1227, 0, 0,
	0, 744, 747, 882, 0, 0, 1395, 0, 0, 875,
	0, 0, 0, 1406, 0, 721, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1257, 0, 0, 0,
	747, 747, 0, 687, 0, 0, 0, 718, 1551, 747,
	747, 0, 687, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 447, 0, 0, 1405, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 745, 0, 876, 0, 0,
	0, 0, 747, 0, 0, 0, 0, 1194, 885, 744,
	0, 0, 0, 1401, 1402, 1403, 0, 1400, 1397, 1398,
	1399, 1391, 1392, 1393, 1394, 1396, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1604, 1605, 963, 0, 0,
	0, 0, 0, 1406, 853, 853, 0, 1308, 0, 0,
	1631, 0, 1632, 721, 73, 1634, 1635, 0, 0, 1638,
	0, 0, 0, 434, 883, 0, 0, 0, 447, 0,
	0, 870, 867, 868, 869, 861, 862, 863, 864, 866,
	0, 886, 0, 0, 0, 0, 0, 1194, 1652, 0,
	853, 1061, 0, 1652, 0, 0, 1389, 1390, 0, 1407,
	1408, 1409, 73, 73, 0, 0, 73, 0, 0, 0,
	747, 0, 1684, 746, 0, 853, 1333, 0, 1397, 1398,
	1399, 1391, 1392, 1393, 1394, 1396, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 746, 746, 0, 1699, 0, 1404, 0, 568, 0,
	746, 746, 0, 721, 1101, 1102, 1103, 1104, 1105, 1106,
	1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116,
	1117, 1118, 1119, 1120, 1121, 1122, 0, 1128, 0, 1130,
	1131, 1132, 1133, 746, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1395, 0, 0, 0, 963,
	0, 1718, 0, 391, 1720, 0, 0, 0, 0, 0,
	747, 0, 73, 0, 1176, 1177, 0, 0, 1190, 0,
	1201, 1203, 1208, 1211, 1212, 1213, 0, 0, 1410, 0,
	0, 721, 0, 853, 0, 0, 0, 0, 0, 0,
	0, 0, 999, 447, 1405, 668, 0, 0, 426, 0,
	1652, 0, 0, 0, 0, 73, 0, 1765, 718, 0,
	0, 0, 0, 0, 0, 0, 73, 0, 0, 0,
	0, 0, 853, 0, 0, 0, 0, 0, 0, 1258,
	0, 1261, 0, 0, 0, 0, 718, 718, 747, 0,
	447, 746, 0, 0, 447, 718, 718, 0, 0, 0,
	0, 0, 1406, 0, 0, 0, 0, 0, 0, 721,
	0, 0, 0, 832, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1287, 0, 0, 0, 0, 718, 0,
	0, 0, 1801, 1802, 0, 0, 1806, 0, 0, 0,
	1807, 0, 1652, 0, 0, 391, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	853, 0, 0, 0, 0, 0, 747, 426, 0, 0,
	426, 426, 1401, 1402, 1403, 849, 1400, 1397, 1398, 1399,
	1391, 1392, 1393, 1394, 1396, 0, 0, 1837, 0, 853,
	73, 746, 391, 901, 0, 0, 0, 905, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1652, 1765, 0, 0, 0, 0, 1338, 1339, 0, 0,
	0, 0, 1344, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1633, 73, 718, 853, 0, 0,
	0, 0, 0, 0, 0, 1358, 0, 0, 0, 0,
	0, 0, 1886, 0, 1366, 0, 0, 0, 0, 0,
	0, 0, 1374, 0, 0, 0, 1379, 0, 0, 746,
	0, 857, 858, 0, 877, 878, 879, 887, 888, 889,
	0, 0, 447, 447, 0, 0, 447, 880, 0, 0,
	0, 902, 0, 0, 860, 0, 891, 1208, 1208, 1208,
	0, 0, 0, 0, 0, 0, 46, 0, 46, 0,
	0, 0, 0, 0, 0, 859, 0, 0, 0, 0,
	0, 874, 0, 46, 0, 0, 0, 46, 0, 0,
	1450, 0, 0, 0, 0, 0, 718, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 746, 0, 0,
	0, 0, 0, 568, 0, 0, 0, 0, 0, 0,
	0, 568, 0, 0, 0, 668, 0, 0, 0, 0,
	865, 0, 0, 0, 0, 0, 0, 0, 0, 857,
	858, 0, 877, 878, 879, 887, 888, 889, 884, 892,
	0, 0, 1727, 0, 0, 880, 0, 0, 0, 0,
	0, 0, 860, 890, 891, 0, 0, 0, 0, 0,
	0, 0, 0, 882, 718, 0, 0, 0, 0, 875,
	0, 0, 0, 859, 0, 0, 0, 0, 0, 874,
	1525, 0, 0, 1526, 0, 1762, 0, 0, 0, 0,
	0, 881, 0, 0, 1531, 0, 447, 857, 858, 0,
	0, 0, 0, 0, 0, 0, 0, 1287, 0, 0,
	0, 0, 0, 0, 0, 0, 1548, 0, 0, 1094,
	860, 0, 0, 0, 0, 0, 1558, 876, 865, 0,
	1560, 0, 0, 0, 0, 0, 0, 0, 885, 0,
	0, 859, 718, 0, 0, 0, 884, 892, 0, 0,
	0, 0, 0, 0, 0, 1145, 0, 0, 0, 0,
	0, 890, 0, 1591, 1592, 0, 0, 0, 0, 0,
	0, 882, 1598, 1599, 1600, 0, 0, 875, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 883, 0, 865, 871, 872, 873,
	0, 870, 867, 868, 869, 861, 862, 863, 864, 866,
	0, 886, 0, 985, 568, 0, 0, 0, 0, 0,
	1839, 0, 986, 0, 0, 857, 858, 0, 877, 878,
	879, 887, 888, 889, 0, 876, 0, 0, 0, 0,
	0, 880, 0, 0, 0, 875, 885, 0, 860, 1666,
	891, 0, 0, 0, 434, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 999, 0, 0, 0, 859,
	0, 0, 1685, 0, 0, 874, 1688, 1689, 0, 0,
	0, 1691, 0, 0, 0, 1693, 0, 0, 0, 0,
	0, 0, 1697, 0, 0, 0, 1700, 0, 0, 0,
	0, 0, 883, 876, 0, 871, 872, 873, 0, 870,
	867, 868, 869, 861, 862, 863, 864, 866, 0, 886,
	0, 0, 0, 0, 865, 0, 0, 0, 0, 1709,
	0, 0, 0, 46, 0, 0, 0, 46, 0, 0,
	0, 0, 884, 892, 0, 0, 0, 0, 0, 46,
	0, 0, 0, 0, 0, 0, 0, 890, 0, 1334,
	0, 0, 0, 0, 0, 0, 0, 882, 0, 0,
	0, 1736, 0, 875, 0, 0, 0, 870, 867, 868,
	869, 861, 862, 863, 864, 866, 0, 886, 0, 0,
	1145, 0, 0, 0, 0, 881, 0, 1755, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 901,
	0, 0, 0, 0, 0, 0, 1769, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1776, 1777, 0, 0,
	0, 876, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 885, 0, 857, 858, 0, 877, 878, 879,
	887, 888, 889, 0, 0, 1789, 0, 0, 0, 0,
	880, 901, 0, 0, 0, 0, 0, 860, 1793, 891,
	857, 858, 0, 877, 878, 879, 887, 888, 889, 0,
	0, 0, 0, 0, 0, 0, 880, 0, 859, 0,
	668, 0, 0, 860, 874, 891, 0, 0, 883, 0,
	0, 871, 872, 873, 0, 870, 867, 868, 869, 861,
	862, 863, 864, 866, 859, 886, 0, 0, 0, 0,
	874, 0, 1712, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1094, 0, 0, 0, 0, 0,
	0, 0, 0, 865, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 884, 892, 1389, 1390, 0, 1407, 1408, 1409, 865,
	0, 0, 0, 0, 0, 0, 890, 0, 0, 1683,
	0, 1094, 0, 0, 1871, 1094, 882, 884, 892, 0,
	0, 0, 875, 0, 0, 0, 0, 0, 0, 1884,
	1884, 0, 890, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 882, 1404, 881, 857, 858, 0, 875, 0,
	0, 0, 0, 0, 1884, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 860, 0,
	881, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	876, 0, 0, 0, 0, 0, 0, 1884, 0, 859,
	0, 885, 1395, 857, 858, 874, 877, 878, 879, 887,
	888, 889, 0, 0, 0, 0, 876, 0, 0, 880,
	0, 0, 0, 0, 0, 0, 860, 885, 891, 0,
	0, 0, 0, 0, 0, 1410, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 859, 0, 0,
	0, 1405, 0, 874, 865, 0, 0, 883, 0, 0,
	871, 872, 873, 0, 870, 867, 868, 869, 861, 862,
	863, 864, 866, 0, 886, 0, 46, 0, 0, 0,
	0, 1431, 0, 883, 0, 0, 871, 872, 873, 0,
	870, 867, 868, 869, 861, 862, 863, 864, 866, 0,
	886, 0, 865, 875, 0, 0, 0, 1430, 0, 1406,
	0, 0, 0, 1094, 1094, 0, 0, 1094, 0, 0,
	884, 892, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 890, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 882, 0, 0, 0, 0,
	0, 875, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 876, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 881, 0, 0, 0, 0, 0, 1401,
	1402, 1403, 0, 1400, 1397, 1398, 1399, 1391, 1392, 1393,
	1394, 1396, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 876,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	885, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 870, 867, 868, 869, 861,
	862, 863, 864, 866, 0, 886, 0, 0, 1746, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 46, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 883, 1094, 0, 871,
	872, 873, 0, 870, 867, 868, 869, 861, 862, 863,
	864, 866, 0, 886, 261, 0, 0, 0, 0, 0,
	1429, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	77, 78, 280, 79, 281, 282, 283, 284, 191, 285,
	286, 287, 288, 80, 81, 192, 193, 194, 195, 82,
	196, 197, 289, 83, 198, 199, 84, 290, 291, 200,
	201, 202, 292, 203, 293, 266, 294, 85, 86, 87,
	901, 88, 295, 89, 90, 91, 296, 267, 92, 93,
	297, 298, 299, 300, 301, 302, 94, 95, 96, 97,
	204, 98, 205, 206, 303, 99, 304, 100, 305, 306,
	307, 101, 102, 308, 103, 309, 0, 310, 207, 104,
	105, 208, 209, 311, 312, 313, 106, 107, 210, 0,
	108, 314, 109, 315, 316, 268, 317, 110, 211, 318,
	212, 319, 111, 112, 113, 213, 214, 270, 320, 116,
	321, 114, 322, 269, 115, 215, 216, 217, 218, 323,
	219, 324, 271, 117, 272, 118, 119, 325, 326, 220,
	273, 120, 274, 327, 121, 328, 329, 122, 0, 123,
	124, 125, 126, 127, 275, 128, 129, 132, 130, 330,
	131, 331, 221, 133, 222, 134, 135, 332, 333, 334,
	335, 336, 136, 223, 276, 137, 277, 224, 138, 139,
	140, 141, 337, 225, 142, 226, 143, 338, 144, 145,
	146, 227, 147, 148, 339, 150, 151, 149, 152, 340,
	153, 278, 154, 155, 228, 156, 0, 157, 158, 159,
	341, 229, 160, 161, 342, 162, 163, 279, 164, 230,
	231, 165, 343, 171, 166, 167, 168, 170, 232, 169,
	233, 344, 172, 345, 173, 174, 346, 234, 235, 236,
	347, 348, 175, 237, 238, 349, 176, 177, 178, 179,
	350, 351, 180, 181, 182, 352, 353, 183, 184, 185,
	239, 240, 354, 355, 186, 356, 357, 358, 359, 187,
	188, 189, 190, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 261, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1521,
	77, 78, 280, 79, 281, 282, 283, 284, 191, 285,
	286, 287, 288, 80, 81, 192, 193, 194, 195, 82,
	196, 197, 289, 83, 198, 199, 84, 290, 291, 200,
	201, 202, 292, 203, 293, 266, 294, 85, 86, 87,
	0, 88, 295, 89, 90, 91, 296, 267, 92, 93,
	297, 298, 299, 300, 301, 302, 94, 95, 96, 97,
	204, 98, 205, 206, 303, 99, 304, 100, 305, 306,
	307, 101, 102, 308, 103, 309, 0, 310, 207, 104,
	105, 208, 209, 311, 312, 313, 106, 107, 210, 0,
	108, 314, 109, 315, 316, 268, 317, 110, 211, 318,
	212, 319, 111, 112, 113, 213, 214, 270, 320, 116,
	321, 114, 322, 269, 115, 215, 216, 217, 218, 323,
	219, 324, 271, 117, 272, 118, 119, 325, 326, 220,
	273, 120, 274, 327, 121, 328, 329, 122, 0, 123,
	124, 125, 126, 127, 275, 128, 129, 132, 130, 330,
	131, 331, 221, 133, 222, 134, 135, 332, 333, 334,
	335, 336, 136, 223, 276, 137, 277, 224, 138, 139,
	140, 141, 337, 225, 142, 226, 143, 338, 144, 145,
	146, 227, 147, 148, 339, 150, 151, 149, 152, 340,
	153, 278, 154, 155, 228, 156, 0, 157, 158, 159,
	341, 229, 160, 161, 342, 162, 163, 279, 164, 230,
	231, 165, 343, 171, 166, 167, 168, 170, 232, 169,
	233, 344, 172, 345, 173, 174, 346, 234, 235, 236,
	347, 348, 175, 237, 238, 349, 176, 177, 178, 179,
	350, 351, 180, 181, 182, 352, 353, 183, 184, 185,
	239, 240, 354, 355, 186, 356, 357, 358, 359, 187,
	188, 189, 190, 261, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 691, 0, 0, 77,
	78, 280, 79, 281, 282, 283, 284, 191, 285, 286,
	287, 288, 80, 81, 192, 193, 194, 195, 82, 196,
	197, 289, 83, 198, 199, 84, 290, 291, 200, 201,
	202, 292, 203, 293, 266, 294, 85, 86, 87, 0,
	88, 295, 89, 90, 91, 296, 267, 92, 93, 297,
	298, 299, 300, 301, 302, 94, 95, 96, 97, 204,
	98, 205, 206, 303, 99, 304, 100, 305, 306, 307,
	101, 102, 308, 103, 309, 0, 310, 207, 104, 105,
	208, 209, 311, 312, 313, 106, 107, 210, 0, 108,
	314, 109, 315, 316, 268, 317, 110, 211, 318, 212,
	319, 111, 112, 113, 213, 214, 270, 320, 116, 321,
	114, 322, 269, 115, 215, 216, 217, 218, 323, 219,
	324, 271, 117, 272, 118, 119, 325, 326, 220, 273,
	120, 274, 327, 121, 328, 329, 122, 0, 123, 124,
	125, 126, 127, 275, 128, 129, 132, 130, 330, 131,
	331, 221, 133, 222, 134, 135, 332, 333, 334, 335,
	336, 136, 223, 276, 137, 277, 224, 138, 139, 140,
	141, 337, 225, 142, 226, 143, 338, 144, 145, 146,
	227, 147, 148, 339, 150, 151, 149, 152, 340, 153,
	278, 154, 155, 228, 156, 0, 157, 158, 159, 341,
	229, 160, 161, 342, 162, 163, 279, 164, 230, 231,
	165, 343, 171, 166, 167, 168, 170, 232, 169, 233,
	344, 172, 345, 173, 174, 346, 234, 235, 236, 347,
	348, 175, 237, 238, 349, 176, 177, 178, 179, 350,
	351, 180, 181, 182, 352, 353, 183, 184, 185, 239,
	240, 354, 355, 186, 356, 357, 358, 359, 187, 188,
	189, 190, 603, 592, 593, 590, 591, 579, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 77, 78,
	1162, 79, 0, 0, 0, 0, 619, 585, 0, 0,
	0, 80, 81, 192, 634, 194, 635, 82, 636, 637,
	0, 83, 198, 199, 84, 600, 618, 638, 639, 202,
	0, 630, 0, 611, 0, 85, 86, 87, 0, 88,
	0, 89, 90, 91, 0, 267, 92, 93, 0, 612,
	614, 0, 613, 615, 94, 95, 96, 97, 640, 98,
	641, 642, 0, 99, 0, 100, 0, 1163, 0, 633,
	102, 0, 103, 0, 0, 0, 584, 104, 105, 620,
	621, 598, 0, 0, 106, 107, 643, 0, 108, 0,
	109, 0, 0, 268, 0, 110, 631, 0, 212, 0,
	111, 112, 113, 627, 629, 270, 0, 116, 0, 114,
	0, 269, 115, 644, 645, 646, 647, 0, 610, 0,
	271, 117, 272, 118, 119, 0, 0, 632, 273, 120,
	274, 0, 121, 0, 0, 122, 0, 123, 124, 125,
	126, 127, 275, 128, 129, 132, 130, 574, 131, 599,
	628, 133, 648, 134, 135, 0, 0, 0, 0, 0,
	136, 223, 276, 137, 277, 622, 138, 139, 140, 141,
	0, 623, 142, 226, 143, 0, 144, 145, 146, 649,
	147, 148, 0, 150, 151, 149, 152, 0, 153, 278,
	154, 155, 588, 156, 0, 157, 158, 159, 0, 229,
	160, 161, 616, 162, 163, 279, 164, 650, 231, 165,
	0, 171, 166, 167, 168, 170, 651, 169, 624, 0,
	172, 0, 173, 174, 0, 234, 652, 653, 0, 0,
	175, 625, 626, 597, 176, 177, 178, 179, 0, 0,
	180, 181, 182, 617, 0, 183, 184, 185, 239, 654,
	1161, 0, 186, 0, 0, 0, 0, 187, 188, 189,
	190, 575, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 571, 572, 1164, 0, 0, 0, 573, 0,
	0, 580, 1159, 603, 592, 593, 590, 591, 579, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 77,
	78, 0, 79, 0, 0, 0, 0, 619, 585, 0,
	0, 0, 80, 81, 192, 634, 194, 635, 82, 636,
	637, 0, 83, 198, 199, 84, 600, 618, 638, 639,
	202, 0, 630, 0, 611, 0, 85, 86, 87, 0,
	88, 0, 89, 90, 91, 0, 267, 92, 93, 0,
	612, 614, 0, 613, 615, 94, 95, 96, 97, 640,
	98, 641, 642, 669, 99, 0, 100, 0, 0, 0,
	633, 102, 0, 103, 0, 0, 0, 584, 104, 105,
	620, 621, 598, 0, 0, 106, 107, 643, 0, 108,
	0, 109, 0, 0, 268, 0, 110, 631, 0, 212,
	0, 111, 112, 113, 627, 629, 270, 0, 116, 0,
	114, 0, 269, 115, 644, 645, 646, 647, 0, 610,
	0, 271, 117, 272, 118, 119, 0, 0, 632, 273,
	120, 274, 0, 121, 0, 0, 122, 0, 123, 124,
	125, 126, 127, 275, 128, 129, 132, 130, 574, 131,
	599, 628, 133, 648, 134, 135, 0, 0, 0, 0,
	0, 136, 223, 276, 137, 277, 622, 138, 139, 140,
	141, 0, 623, 142, 226, 143, 0, 144, 145, 146,
	649, 147, 148, 0, 150, 151, 149, 152, 0, 153,
	278, 154, 155, 588, 156, 0, 157, 158, 159, 64,
	229, 160, 161, 616, 162, 163, 279, 164, 650, 231,
	165, 0, 171, 166, 167, 168, 170, 651, 169, 624,
	0, 172, 66, 173, 174, 0, 234, 652, 653, 0,
	0, 175, 625, 626, 597, 176, 177, 178, 179, 0,
	0, 180, 181, 182, 617, 0, 183, 184, 185, 489,
	654, 0, 0, 186, 0, 0, 0, 62, 187, 188,
	189, 190, 575, 63, 603, 592, 593, 590, 591, 579,
	0, 0, 0, 571, 572, 0, 0, 0, 0, 573,
	77, 78, 580, 79, 0, 0, 0, 0, 619, 585,
	0, 0, 0, 80, 81, 192, 634, 194, 635, 82,
	636, 637, 0, 83, 198, 199, 84, 600, 618, 638,
	639, 202, 0, 630, 0, 611, 0, 85, 86, 87,
	0, 88, 0, 89, 90, 91, 0, 267, 92, 93,
	0, 612, 614, 0, 613, 615, 94, 95, 96, 97,
	640, 98, 641, 642, 0, 99, 0, 100, 0, 0,
	0, 633, 102, 0, 103, 0, 0, 0, 584, 104,
	105, 620, 621, 598, 0, 0, 106, 107, 643, 0,
	108, 0, 109, 0, 0, 268, 0, 110, 631, 0,
	212, 0, 111, 112, 113, 627, 629, 270, 0, 116,
	0, 114, 0, 269, 115, 644, 645, 646, 647, 0,
	610, 0, 271, 117, 272, 118, 119, 0, 0, 632,
	273, 120, 274, 0, 121, 0, 0, 122, 0, 123,
	124, 125, 126, 127, 275, 128, 129, 132, 130, 574,
	131, 599, 628, 133, 648, 134, 135, 0, 0, 0,
	0, 0, 136, 223, 276, 137, 277, 622, 138, 139,
	140, 141, 0, 623, 142, 226, 143, 0, 144, 145,
	146, 649, 147, 148, 0, 150, 151, 149, 152, 0,
	153, 278, 154, 155, 588, 156, 0, 157, 158, 159,
	64, 229, 160, 161, 616, 162, 163, 279, 164, 650,
	231, 165, 0, 171, 166, 167, 168, 170, 651, 169,
	624, 0, 172, 66, 173, 174, 0, 234, 652, 653,
	0, 0, 175, 625, 626, 597, 176, 177, 178, 179,
	0, 0, 180, 181, 182, 617, 0, 183, 184, 185,
	489, 654, 0, 0, 186, 0, 0, 0, 62, 187,
	188, 189, 190, 575, 63, 603, 592, 593, 590, 591,
	579, 0, 0, 0, 571, 572, 0, 0, 0, 0,
	573, 77, 78, 580, 79, 0, 0, 0, 0, 619,
	585, 0, 0, 0, 80, 81, 192, 634, 194, 635,
	82, 636, 637, 1204, 83, 198, 199, 84, 600, 618,
	638, 639, 202, 0, 630, 0, 611, 0, 85, 86,
	87, 0, 88, 0, 89, 90, 91, 0, 267, 92,
	93, 0, 612, 614, 0, 613, 615, 94, 95, 96,
	97, 640, 98, 641, 642, 0, 99, 0, 100, 0,
	0, 0, 633, 102, 0, 103, 0, 0, 0, 584,
	104, 105, 620, 621, 598, 0, 0, 106, 107, 643,
	0, 108, 0, 109, 0, 1209, 268, 0, 110, 631,
	0, 212, 0, 111, 112, 113, 627, 629, 270, 0,
	116, 0, 114, 0, 269, 115, 644, 645, 646, 647,
	0, 610, 0, 271, 117, 272, 118, 119, 0, 1205,
	632, 273, 120, 274, 0, 121, 0, 0, 122, 0,
	123, 124, 125, 126, 127, 275, 128, 129, 132, 130,
	574, 131, 599, 628, 133, 648, 134, 135, 0, 0,
	0, 0, 0, 136, 223, 276, 137, 277, 622, 138,
	139, 140, 141, 0, 623, 142, 226, 143, 0, 144,
	145, 146, 649, 147, 148, 0, 150, 151, 149, 152,
	0, 153, 278, 154, 155, 588, 156, 0, 157, 158,
	159, 0, 229, 160, 161, 616, 162, 163, 279, 164,
	650, 231, 165, 0, 171, 166, 167, 168, 170, 651,
	169, 624, 0, 172, 0, 173, 174, 0, 234, 652,
	653, 0, 1206, 175, 625, 626, 597, 176, 177, 178,
	179, 0, 0, 180, 181, 182, 617, 0, 183, 184,
	185, 239, 654, 0, 0, 186, 0, 0, 0, 0,
	187, 188, 189, 190, 575, 0, 603, 592, 593, 590,
	591, 579, 0, 0, 0, 571, 572, 0, 0, 0,
	0, 573, 77, 78, 580, 79, 0, 0, 0, 0,
	619, 585, 0, 0, 0, 80, 81, 192, 634, 194,
	635, 82, 636, 637, 0, 83, 198, 199, 84, 600,
	618, 638, 639, 202, 0, 630, 0, 611, 0, 85,
	86, 87, 0, 88, 0, 89, 90, 91, 0, 267,
	92, 93, 0, 612, 614, 0, 613, 615, 94, 95,
	96, 97, 640, 98, 641, 642, 0, 99, 0, 100,
	0, 0, 0, 633, 102, 0, 103, 0, 0, 0,
	584, 104, 105, 620, 621, 598, 0, 0, 106, 107,
	643, 0, 108, 0, 109, 0, 0, 268, 0, 110,
	631, 0, 212, 0, 111, 112, 113, 627, 629, 270,
	0, 116, 0, 114, 0, 269, 115, 644, 645, 646,
	647, 0, 610, 0, 271, 117, 272, 118, 119, 0,
	0, 632, 273, 120, 274, 0, 121, 0, 0, 122,
	0, 123, 124, 125, 126, 127, 275, 128, 129, 132,
	130, 574, 131, 599, 628, 133, 648, 134, 135, 0,
	0, 0, 0, 0, 136, 223, 276, 137, 277, 622,
	138, 139, 140, 141, 0, 623, 142, 226, 143, 0,
	144, 145, 146, 649, 147, 148, 0, 150, 151, 149,
	152, 0, 153, 278, 154, 155, 588, 156, 0, 157,
	158, 159, 0, 229, 160, 161, 616, 162, 163, 279,
	164, 650, 231, 165, 0, 171, 166, 167, 168, 170,
	651, 169, 624, 0, 172, 0, 173, 174, 0, 234,
	652, 653, 0, 0, 175, 625, 626, 597, 176, 177,
	178, 179, 0, 0, 180, 181, 182, 617, 0, 183,
	184, 185, 239, 654, 0, 0, 186, 0, 0, 0,
	0, 187, 188, 189, 190, 575, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 571, 572, 0, 0,
	0, 0, 573, 0, 0, 580, 1588, 603, 592, 593,
	590, 591, 579, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 77, 78, 0, 79, 0, 0, 0,
	0, 619, 585, 0, 0, 0, 80, 81, 192, 634,
	194, 635, 82, 636, 637, 0, 83, 198, 199, 84,
	600, 618, 638, 639, 202, 0, 630, 0, 611, 0,
	85, 86, 87, 0, 88, 0, 89, 90, 91, 0,
	267, 92, 93, 0, 612, 614, 0, 613, 615, 94,
	95, 96, 97, 640, 98, 641, 642, 0, 99, 0,
	100, 0, 0, 0, 633, 102, 0, 103, 0, 0,
	0, 584, 104, 105, 620, 621, 598, 0, 0, 106,
	107, 643, 0, 108, 0, 109, 0, 0, 268, 0,
	110, 631, 0, 212, 0, 111, 112, 113, 627, 629,
	270, 0, 116, 0, 114, 0, 269, 115, 644, 645,
	646, 647, 0, 610, 0, 271, 117, 272, 118, 119,
	0, 0, 632, 273, 120, 274, 0, 121, 0, 0,
	122, 0, 123, 124, 125, 126, 127, 275, 128, 129,
	132, 130, 574, 131, 599, 628, 133, 648, 134, 135,
	0, 0, 0, 0, 0, 136, 223, 276, 137, 277,
	622, 138, 139, 140, 141, 0, 623, 142, 226, 143,
	0, 144, 145, 146, 649, 147, 148, 0, 150, 151,
	149, 152, 0, 153, 278, 154, 155, 588, 156, 0,
	157, 158, 159, 0, 229, 160, 161, 616, 162, 163,
	279, 164, 650, 231, 165, 0, 171, 166, 167, 168,
	170, 651, 169, 624, 0, 172, 0, 173, 174, 0,
	234, 652, 653, 0, 0, 175, 625, 626, 597, 176,
	177, 178, 179, 0, 0, 180, 181, 182, 617, 0,
	183, 184, 185, 239, 654, 0, 0, 186, 0, 0,
	0, 0, 187, 188, 189, 190, 575, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 571, 572, 0,
	0, 0, 0, 573, 0, 0, 580, 1537, 603, 592,
	593, 590, 591, 579, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 77, 78, 0, 79, 0, 0,
	0, 0, 619, 585, 0, 0, 0, 80, 81, 192,
	634, 194, 635, 82, 636, 637, 0, 83, 198, 199,
	84, 600, 618, 638, 639, 202, 0, 630, 0, 611,
	0, 85, 86, 87, 0, 88, 0, 89, 90, 91,
	0, 267, 92, 93, 0, 612, 614, 0, 613, 615,
	94, 95, 96, 97, 640, 98, 641, 642, 0, 99,
	0, 100, 0, 0, 0, 633, 102, 0, 103, 0,
	0, 0, 584, 104, 105, 620, 621, 598, 0, 0,
	106, 107, 643, 0, 108, 0, 109, 0, 0, 268,
	0, 110, 631, 0, 212, 0, 111, 112, 113, 627,
	629, 270, 0, 116, 0, 114, 0, 269, 115, 644,
	645, 646, 647, 0, 610, 0, 271, 117, 272, 118,
	119, 0, 0, 632, 273, 120, 274, 0, 121, 0,
	0, 122, 0, 123, 124, 125, 126, 127, 275, 128,
	129, 132, 130, 574, 131, 599, 628, 133, 648, 134,
	135, 0, 0, 0, 0, 0, 136, 223, 276, 137,
	277, 622, 138, 139, 140, 141, 0, 623, 142, 226,
	143, 0, 144, 145, 146, 649, 147, 148, 0, 150,
	151, 149, 152, 0, 153, 278, 154, 155, 588, 156,
	0, 157, 158, 159, 0, 229, 160, 161, 616, 162,
	163, 279, 164, 650, 231, 165, 0, 171, 166, 167,
	168, 170, 651, 169, 624, 0, 172, 0, 173, 174,
	0, 234, 652, 653, 0, 0, 175, 625, 626, 597,
	176, 177, 178, 179, 0, 0, 180, 181, 182, 617,
	0, 183, 184, 185, 239, 654, 0, 0, 186, 0,
	0, 0, 0, 187, 188, 189, 190, 575, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 571, 572,
	0, 0, 0, 0, 573, 0, 0, 580, 1158, 603,
	592, 593, 590, 591, 579, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 77, 78, 0, 79, 0,
	0, 0, 0, 619, 585, 0, 0, 0, 80, 81,
	192, 634, 194, 635, 82, 636, 637, 0, 83, 198,
	199, 84, 600, 618, 638, 639, 202, 0, 630, 0,
	611, 0, 85, 86, 87, 0, 88, 0, 89, 90,
	91, 0, 267, 92, 93, 0, 612, 614, 0, 613,
	615, 94, 95, 96, 97, 640, 98, 641, 642, 0,
	99, 0, 100, 0, 0, 0, 633, 102, 0, 103,
	0, 0, 0, 584, 104, 105, 620, 621, 598, 0,
	0, 106, 107, 643, 0, 108, 0, 109, 0, 0,
	268, 0, 110, 631, 0, 212, 0, 111, 112, 113,
	627, 629, 270, 0, 116, 0, 114, 0, 269, 115,
	644, 645, 646, 647, 0, 610, 0, 271, 117, 272,
	118, 119, 0, 0, 632, 273, 120, 274, 0, 121,
	0, 0, 122, 0, 123, 124, 125, 126, 127, 275,
	128, 129, 132, 130, 574, 131, 599, 628, 133, 648,
	134, 135, 0, 0, 0, 0, 0, 136, 223, 276,
	137, 277, 622, 138, 139, 140, 141, 0, 623, 142,
	226, 143, 0, 144, 145, 146, 649, 147, 148, 0,
	150, 151, 149, 152, 0, 153, 278, 154, 155, 588,
	156, 0, 157, 158, 159, 0, 229, 160, 161, 616,
	162, 163, 279, 164, 650, 231, 165, 0, 171, 166,
	167, 168, 170, 651, 169, 624, 0, 172, 0, 173,
	174, 0, 234, 652, 653, 0, 0, 175, 625, 626,
	597, 176, 177, 178, 179, 0, 0, 180, 181, 182,
	617, 0, 183, 184, 185, 239, 654, 0, 0, 186,
	0, 0, 0, 0, 187, 188, 189, 190, 575, 0,
	0, 0, 0, 603, 592, 593, 590, 591, 579, 571,
	572, 0, 0, 0, 0, 573, 907, 1155, 580, 77,
	78, 0, 79, 0, 0, 0, 0, 619, 585, 0,
	0, 0, 80, 81, 192, 634, 194, 635, 82, 636,
	637, 0, 83, 198, 199, 84, 600, 618, 638, 639,
	202, 0, 630, 0, 611, 0, 85, 86, 87, 0,
	88, 0, 89, 90, 91, 0, 267, 92, 93, 0,
	612, 614, 0, 613, 615, 94, 95, 96, 97, 640,
	98, 641, 642, 0, 99, 0, 100, 0, 0, 0,
	633, 102, 0, 103, 0, 0, 0, 584, 104, 105,
	620, 621, 598, 0, 0, 106, 107, 643, 0, 108,
	0, 109, 0, 0, 268, 0, 110, 631, 0, 212,
	0, 111, 112, 113, 627, 629, 270, 0, 116, 0,
	114, 0, 269, 115, 644, 645, 646, 647, 0, 610,
	0, 271, 117, 272, 118, 119, 0, 0, 632, 273,
	120, 274, 0, 121, 0, 0, 122, 0, 123, 124,
	125, 126, 127, 275, 128, 129, 132, 130, 574, 131,
	599, 628, 133, 648, 134, 135, 0, 0, 0, 0,
	0, 136, 223, 276, 137, 277, 622, 138, 139, 140,
	141, 0, 623, 142, 226, 143, 0, 144, 145, 146,
	649, 147, 148, 0, 150, 151, 149, 152, 0, 153,
	278, 154, 155, 588, 156, 0, 157, 158, 159, 0,
	229, 160, 161, 616, 162, 163, 279, 164, 650, 231,
	165, 0, 171, 166, 167, 168, 170, 651, 169, 624,
	0, 172, 0, 173, 174, 0, 234, 652, 653, 0,
	0, 175, 625, 626, 597, 176, 177, 178, 179, 0,
	0, 180, 181, 182, 617, 0, 183, 184, 185, 239,
	654, 0, 0, 186, 0, 0, 0, 0, 187, 188,
	189, 190, 575, 0, 603, 592, 593, 590, 591, 579,
	0, 0, 0, 571, 572, 569, 0, 0, 0, 573,
	77, 78, 580, 79, 0, 0, 0, 0, 619, 585,
	0, 0, 0, 80, 81, 192, 634, 194, 635, 82,
	636, 637, 0, 83, 198, 199, 84, 600, 618, 638,
	639, 202, 0, 630, 0, 611, 0, 85, 86, 87,
	0, 88, 0, 89, 90, 91, 0, 267, 92, 93,
	0, 612, 614, 0, 613, 615, 94, 95, 96, 97,
	640, 98, 641, 642, 0, 99, 0, 100, 0, 0,
	0, 633, 102, 0, 103, 0, 0, 0, 584, 104,
	105, 620, 621, 598, 0, 0, 106, 107, 643, 0,
	108, 0, 109, 0, 0, 268, 0, 110, 631, 0,
	212, 0, 111, 112, 113, 627, 629, 270, 0, 116,
	0, 114, 0, 269, 115, 644, 645, 646, 647, 0,
	610, 0, 271, 117, 272, 118, 119, 0, 0, 632,
	273, 120, 274, 0, 121, 0, 0, 122, 0, 123,
	124, 125, 126, 127, 275, 128, 129, 132, 130, 574,
	131, 599, 628, 133, 648, 134, 135, 0, 0, 0,
	0, 0, 136, 223, 276, 137, 277, 622, 138, 139,
	140, 141, 0, 623, 142, 226, 143, 0, 144, 145,
	146, 649, 147, 148, 0, 150, 151, 149, 152, 0,
	153, 278, 154, 155, 588, 156, 0, 157, 158, 159,
	0, 229, 160, 161, 616, 162, 163, 279, 164, 650,
	231, 165, 0, 171, 166, 167, 168, 170, 651, 169,
	624, 0, 172, 0, 173, 174, 0, 234, 652, 653,
	0, 0, 175, 625, 626, 597, 176, 177, 178, 179,
	0, 0, 180, 181, 182, 617, 0, 183, 184, 185,
	239, 654, 1542, 0, 186, 0, 0, 0, 0, 187,
	188, 189, 190, 575, 0, 603, 592, 593, 590, 591,
	579, 0, 0, 0, 571, 572, 0, 0, 0, 0,
	573, 77, 78, 580, 79, 0, 0, 0, 0, 619,
	585, 0, 0, 0, 80, 81, 192, 634, 194, 635,
	82, 636, 637, 0, 83, 198, 199, 84, 600, 618,
	638, 639, 202, 0, 630, 0, 611, 0, 85, 86,
	87, 0, 88, 0, 89, 90, 91, 0, 267, 92,
	93, 0, 612, 614, 0, 613, 615, 94, 95, 96,
	97, 640, 98, 641, 642, 669, 99, 0, 100, 0,
	0, 0, 633, 102, 0, 103, 0, 0, 0, 584,
	104, 105, 620, 621, 598, 0, 0, 106, 107, 643,
	0, 108, 0, 109, 0, 0, 268, 0, 110, 631,
	0, 212, 0, 111, 112, 113, 627, 629, 270, 0,
	116, 0, 114, 0, 269, 115, 644, 645, 646, 647,
	0, 610, 0, 271, 117, 272, 118, 119, 0, 0,
	632, 273, 120, 274, 0, 121, 0, 0, 122, 0,
	123, 124, 125, 126, 127, 275, 128, 129, 132, 130,
	574, 131, 599, 628, 133, 648, 134, 135, 0, 0,
	0, 0, 0, 136, 223, 276, 137, 277, 622, 138,
	139, 140, 141, 0, 623, 142, 226, 143, 0, 144,
	145, 146, 649, 147, 148, 0, 150, 151, 149, 152,
	0, 153, 278, 154, 155, 588, 156, 0, 157, 158,
	159, 0, 229, 160, 161, 616, 162, 163, 279, 164,
	650, 231, 165, 0, 171, 166, 167, 168, 170, 651,
	169, 624, 0, 172, 0, 173, 174, 0, 234, 652,
	653, 0, 0, 175, 625, 626, 597, 176, 177, 178,
	179, 0, 0, 180, 181, 182, 617, 0, 183, 184,
	185, 239, 654, 0, 0, 186, 0, 0, 0, 0,
	187, 188, 189, 190, 575, 0, 603, 592, 593, 590,
	591, 579, 0, 0, 0, 571, 572, 0, 0, 0,
	0, 573, 77, 78, 580, 79, 0, 0, 0, 0,
	619, 585, 0, 0, 0, 80, 81, 192, 634, 194,
	635, 82, 636, 637, 0, 83, 198, 199, 84, 600,
	618, 638, 639, 202, 0, 630, 0, 611, 0, 85,
	86, 87, 0, 88, 0, 89, 90, 91, 0, 267,
	92, 93, 0, 612, 614, 0, 613, 615, 94, 95,
	96, 97, 640, 98, 641, 642, 0, 99, 0, 100,
	0, 0, 0, 633, 102, 0, 103, 0, 0, 0,
	584, 104, 105, 620, 621, 598, 0, 0, 106, 107,
	643, 0, 108, 0, 109, 0, 1209, 268, 0, 110,
	631, 0, 212, 0, 111, 112, 113, 627, 629, 270,
	0, 116, 0, 114, 0, 269, 115, 644, 645, 646,
	647, 0, 610, 0, 271, 117, 272, 118, 119, 0,
	0, 632, 273, 120, 274, 0, 121, 0, 0, 122,
	0, 123, 124, 125, 126, 127, 275, 128, 129, 132,
	130, 574, 131, 599, 628, 133, 648, 134, 135, 0,
	0, 0, 0, 0, 136, 223, 276, 137, 277, 622,
	138, 139, 140, 141, 0, 623, 142, 226, 143, 0,
	144, 145, 146, 649, 147, 148, 0, 150, 151, 149,
	152, 0, 153, 278, 154, 155, 588, 156, 0, 157,
	158, 159, 0, 229, 160, 161, 616, 162, 163, 279,
	164, 650, 231, 165, 0, 171, 166, 167, 168, 170,
	651, 169, 624, 0, 172, 0, 173, 174, 0, 234,
	652, 653, 0, 0, 175, 625, 626, 597, 176, 177,
	178, 179, 0, 0, 180, 181, 182, 617, 0, 183,
	184, 185, 239, 654, 0, 0, 186, 0, 0, 0,
	0, 187, 188, 189, 190, 575, 0, 0, 0, 0,
	603, 592, 593, 590, 591, 579, 571, 572, 0, 0,
	0, 0, 573, 0, 0, 580, 77, 78, 841, 79,
	0, 0, 0, 0, 619, 585, 0, 0, 0, 80,
	81, 192, 634, 194, 635, 82, 636, 637, 0, 83,
	198, 199, 84, 600, 618, 638, 639, 202, 0, 630,
	0, 611, 0, 85, 86, 87, 0, 88, 0, 89,
	90, 91, 0, 267, 92, 93, 0, 612, 614, 0,
	613, 615, 94, 95, 96, 97, 640, 98, 641, 642,
	0, 99, 0, 100, 0, 0, 0, 633, 102, 0,
	103, 0, 0, 0, 584, 104, 105, 620, 621, 598,
	0, 0, 106, 107, 643, 0, 108, 0, 109, 0,
	0, 268, 0, 110, 631, 0, 212, 0, 111, 112,
	113, 627, 629, 270, 0, 116, 0, 114, 0, 269,
	115, 644, 645, 646, 647, 0, 610, 0, 271, 117,
	272, 118, 119, 0, 0, 632, 273, 120, 274, 0,
	121, 0, 0, 122, 0, 123, 124, 125, 126, 127,
	275, 128, 129, 132, 130, 574, 131, 599, 628, 133,
	648, 134, 135, 0, 0, 0, 0, 0, 136, 223,
	276, 137, 277, 622, 138, 139, 140, 141, 0, 623,
	142, 226, 143, 0, 144, 145, 146, 649, 147, 148,
	0, 150, 151, 149, 152, 0, 153, 278, 154, 155,
	588, 156, 0, 157, 158, 159, 0, 229, 160, 161,
	616, 162, 163, 279, 164, 650, 231, 165, 0, 171,
	166, 167, 168, 170, 651, 169, 624, 0, 172, 0,
	173, 174, 0, 234, 652, 653, 0, 0, 175, 625,
	626, 597, 176, 177, 178, 179, 0, 0, 180, 181,
	182, 617, 0, 183, 184, 185, 239, 654, 0, 0,
	186, 0, 0, 0, 0, 187, 188, 189, 190, 575,
	0, 603, 592, 593, 590, 591, 579, 0, 0, 0,
	571, 572, 0, 0, 0, 0, 573, 77, 78, 580,
	79, 0, 0, 0, 0, 619, 585, 0, 0, 0,
	80, 81, 192, 634, 194, 635, 82, 636, 637, 0,
	83, 198, 199, 84, 600, 618, 638, 639, 202, 0,
	630, 0, 611, 0, 85, 86, 87, 0, 88, 0,
	89, 90, 91, 0, 267, 92, 1883, 0, 612, 614,
	0, 613, 615, 94, 95, 96, 97, 640, 98, 641,
	642, 0, 99, 0, 100, 0, 0, 0, 633, 102,
	0, 103, 0, 0, 0, 584, 104, 105, 620, 621,
	598, 0, 0, 106, 107, 643, 0, 108, 0, 109,
	0, 0, 268, 0, 110, 631, 0, 212, 0, 111,
	112, 113, 627, 629, 270, 0, 116, 0, 114, 0,
	269, 115, 644, 645, 646, 647, 0, 610, 0, 271,
	117, 272, 118, 119, 0, 0, 632, 273, 120, 274,
	0, 121, 0, 0, 122, 0, 123, 124, 125, 126,
	127, 275, 128, 129, 132, 130, 574, 131, 599, 628,
	133, 648, 134, 135, 0, 0, 0, 0, 0, 136,
	223, 276, 137, 277, 622, 138, 139, 140, 141, 0,
	623, 142, 226, 143, 0, 144, 145, 146, 649, 147,
	148, 0, 150, 151, 149, 152, 0, 153, 278, 154,
	155, 588, 156, 0, 157, 158, 159, 0, 229, 160,
	161, 616, 162, 163, 279, 164, 650, 231, 165, 0,
	171, 166, 167, 168, 170, 651, 169, 624, 0, 172,
	0, 173, 174, 0, 234, 652, 653, 0, 0, 175,
	625, 626, 597, 176, 177, 1882, 179, 0, 0, 180,
	181, 182, 617, 0, 183, 184, 185, 239, 654, 0,
	0, 186, 0, 0, 0, 0, 187, 188, 189, 190,
	575, 0, 603, 592, 593, 590, 591, 579, 0, 0,
	0, 571, 572, 0, 0, 0, 0, 573, 77, 78,
	580, 79, 0, 0, 0, 0, 619, 585, 0, 0,
	0, 80, 81, 1881, 634, 194, 635, 82, 636, 637,
	0, 83, 198, 199, 84, 600, 618, 638, 639, 202,
	0, 630, 0, 611, 0, 85, 86, 87, 0, 88,
	0, 89, 90, 91, 0, 267, 92, 1883, 0, 612,
	614, 0, 613, 615, 94, 95, 96, 97, 640, 98,
	641, 642, 0, 99, 0, 100, 0, 0, 0, 633,
	102, 0, 103, 0, 0, 0, 584, 104, 105, 620,
	621, 598, 0, 0, 106, 107, 643, 0, 108, 0,
	109, 0, 0, 268, 0, 110, 631, 0, 212, 0,
	111, 112, 113, 627, 629, 270, 0, 116, 0, 114,
	0, 269, 115, 644, 645, 646, 647, 0, 610, 0,
	271, 117, 272, 118, 119, 0, 0, 632, 273, 120,
	274, 0, 121, 0, 0, 122, 0, 123, 124, 125,
	126, 127, 275, 128, 129, 132, 130, 574, 131, 599,
	628, 133, 648, 134, 135, 0, 0, 0, 0, 0,
	136, 223, 276, 137, 277, 622, 138, 139, 140, 141,
	0, 623, 142, 226, 143, 0, 144, 145, 146, 649,
	147, 148, 0, 150, 151, 149, 152, 0, 153, 278,
	154, 155, 588, 156, 0, 157, 158, 159, 0, 229,
	160, 161, 616, 162, 163, 279, 164, 650, 231, 165,
	0, 171, 166, 167, 168, 170, 651, 169, 624, 0,
	172, 0, 173, 174, 0, 234, 652, 653, 0, 0,
	175, 625, 626, 597, 176, 177, 1882, 179, 0, 0,
	180, 181, 182, 617, 0, 183, 184, 185, 239, 654,
	0, 0, 186, 0, 0, 0, 0, 187, 188, 189,
	190, 575, 0, 603, 592, 593, 590, 591, 579, 0,
	0, 0, 571, 572, 0, 0, 0, 0, 573, 77,
	78, 580, 79, 0, 0, 0, 0, 619, 585, 0,
	0, 0, 80, 81, 192, 634, 194, 635, 82, 636,
	637, 0, 83, 198, 199, 84, 600, 618, 638, 639,
	202, 0, 630, 0, 611, 0, 85, 86, 87, 0,
	88, 0, 89, 90, 91, 0, 267, 92, 93, 0,
	612, 614, 0, 613, 615, 94, 95, 96, 97, 640,
	98, 641, 642, 0, 99, 0, 100, 0, 0, 0,
	633, 102, 0, 103, 0, 0, 0, 584, 104, 105,
	620, 621, 598, 0, 0, 106, 107, 643, 0, 108,
	0, 109, 0, 0, 268, 0, 110, 631, 0, 212,
	0, 111, 112, 113, 627, 629, 270, 0, 116, 0,
	114, 0, 269, 115, 644, 645, 646, 647, 0, 610,
	0, 271, 117, 272, 118, 119, 0, 0, 632, 273,
	120, 274, 0, 121, 0, 0, 122, 0, 123, 124,
	125, 126, 127, 275, 128, 129, 132, 130, 574, 131,
	599, 628, 133, 648, 134, 135, 0, 0, 0, 0,
	0, 136, 223, 276, 137, 277, 622, 138, 139, 140,
	141, 0, 623, 142, 226, 143, 0, 144, 145, 146,
	649, 147, 148, 0, 150, 151, 149, 152, 0, 153,
	278, 154, 155, 588, 156, 0, 157, 158, 159, 0,
	229, 160, 161, 616, 162, 163, 279, 164, 650, 231,
	165, 0, 171, 166, 167, 168, 170, 651, 169, 624,
	0, 172, 0, 173, 174, 0, 234, 652, 653, 0,
	0, 175, 625, 626, 597, 176, 177, 178, 179, 0,
	0, 180, 181, 182, 617, 0, 183, 184, 185, 239,
	654, 0, 0, 186, 0, 0, 0, 0, 187, 188,
	189, 190, 575, 0, 1181, 592, 593, 590, 591, 579,
	0, 0, 0, 571, 572, 0, 0, 0, 0, 573,
	77, 78, 580, 79, 0, 0, 0, 0, 619, 585,
	0, 0, 0, 80, 81, 192, 634, 194, 635, 82,
	636, 637, 0, 83, 198, 199, 84, 600, 618, 638,
	639, 202, 0, 630, 0, 611, 0, 85, 86, 87,
	0, 88, 0, 89, 90, 91, 0, 267, 92, 93,
	0, 612, 614, 0, 613, 615, 94, 95, 96, 97,
	640, 1184, 641, 642, 0, 99, 0, 100, 0, 0,
	0, 633, 102, 0, 103, 0, 0, 0, 584, 104,
	105, 620, 621, 598, 0, 0, 106, 107, 643, 0,
	108, 0, 109, 0, 0, 268, 0, 110, 631, 0,
	212, 0, 111, 112, 1185, 627, 629, 270, 0, 116,
	0, 114, 0, 269, 115, 644, 645, 646, 647, 0,
	610, 0, 271, 117, 272, 118, 119, 0, 0, 632,
	273, 120, 274, 0, 121, 0, 0, 122, 0, 123,
	1186, 1183, 126, 127, 275, 128, 129, 132, 130, 574,
	131, 599, 628, 133, 648, 134, 135, 0, 0, 0,
	0, 0, 136, 223, 276, 137, 277, 622, 138, 139,
	140, 141, 0, 623, 142, 226, 143, 0, 144, 145,
	146, 649, 147, 148, 0, 150, 151, 149, 152, 0,
	153, 278, 154, 155, 588, 156, 0, 157, 158, 1187,
	0, 229, 160, 161, 616, 162, 163, 279, 164, 650,
	231, 165, 0, 171, 166, 167, 168, 170, 651, 169,
	624, 0, 172, 0, 173, 174, 0, 234, 652, 653,
	0, 0, 175, 625, 626, 597, 176, 177, 178, 179,
	0, 0, 180, 181, 182, 617, 0, 183, 184, 185,
	239, 654, 0, 0, 186, 0, 0, 0, 0, 187,
	188, 1182, 190, 575, 0, 603, 592, 593, 590, 591,
	579, 0, 0, 0, 571, 572, 0, 0, 0, 0,
	573, 77, 78, 580, 79, 0, 0, 0, 0, 619,
	585, 0, 0, 0, 80, 81, 192, 634, 194, 635,
	82, 636, 637, 0, 83, 198, 199, 84, 600, 618,
	638, 639, 202, 0, 630, 0, 611, 0, 85, 86,
	87, 0, 88, 0, 89, 90, 91, 0, 267, 92,
	93, 0, 612, 614, 0, 613, 615, 94, 95, 96,
	97, 640, 98, 641, 642, 0, 99, 0, 100, 0,
	0, 0, 633, 102, 0, 103, 0, 0, 0, 584,
	104, 105, 620, 621, 598, 0, 0, 106, 107, 643,
	0, 108, 0, 109, 0, 0, 268, 0, 110, 631,
	0, 212, 0, 111, 112, 113, 627, 629, 270, 0,
	116, 0, 114, 0, 269, 115, 644, 645, 646, 647,
	0, 610, 0, 271, 117, 272, 118, 119, 0, 0,
	632, 273, 120, 274, 0, 121, 0, 0, 122, 0,
	123, 124, 125, 126, 127, 275, 128, 129, 132, 130,
	0, 131, 599, 628, 133, 648, 134, 135, 0, 0,
	0, 0, 0, 136, 223, 276, 137, 277, 622, 138,
	139, 140, 141, 0, 623, 142, 226, 143, 0, 144,
	145, 146, 649, 147, 148, 0, 150, 151, 149, 152,
	0, 153, 278, 154, 155, 1199, 156, 0, 157, 158,
	159, 0, 229, 160, 161, 616, 162, 163, 279, 164,
	650, 231, 165, 0, 171, 166, 167, 168, 170, 651,
	169, 624, 0, 172, 0, 173, 174, 0, 234, 652,
	653, 0, 0, 175, 625, 626, 597, 176, 177, 178,
	179, 0, 0, 180, 181, 182, 617, 0, 183, 184,
	185, 239, 654, 0, 0, 186, 0, 0, 0, 0,
	187, 188, 189, 190, 0, 0, 603, 592, 593, 590,
	591, 579, 0, 0, 0, 1195, 1196, 0, 0, 0,
	0, 1197, 77, 78, 1198, 79, 0, 0, 0, 0,
	619, 585, 0, 0, 0, 80, 81, 0, 634, 194,
	635, 82, 636, 637, 0, 83, 198, 199, 84, 600,
	618, 638, 639, 202, 0, 630, 0, 611, 0, 85,
	86, 87, 0, 88, 0, 89, 90, 91, 0, 267,
	92, 1883, 0, 612, 614, 0, 613, 615, 94, 95,
	96, 97, 640, 98, 641, 642, 0, 99, 0, 100,
	0, 0, 0, 633, 102, 0, 103, 0, 0, 0,
	584, 104, 105, 620, 621, 598, 0, 0, 106, 107,
	643, 0, 108, 0, 109, 0, 0, 268, 0, 110,
	631, 0, 212, 0, 111, 112, 113, 627, 629, 0,
	0, 116, 0, 114, 0, 269, 115, 644, 645, 646,
	647, 0, 610, 0, 0, 117, 272, 118, 119, 0,
	0, 632, 273, 120, 0, 0, 121, 0, 0, 122,
	0, 123, 124, 125, 126, 127, 275, 128, 129, 132,
	130, 574, 131, 599, 628, 133, 648, 134, 135, 0,
	0, 0, 0, 0, 136, 223, 276, 137, 277, 622,
	138, 139, 140, 141, 0, 623, 142, 226, 143, 0,
	144, 145, 146, 649, 147, 148, 0, 150, 151, 149,
	152, 0, 153, 278, 154, 155, 588, 156, 0, 157,
	158, 159, 0, 229, 160, 161, 616, 162, 163, 0,
	164, 650, 231, 165, 0, 171, 166, 167, 168, 170,
	651, 169, 624, 0, 172, 0, 173, 174, 0, 234,
	652, 653, 0, 0, 175, 625, 626, 597, 176, 177,
	1882, 179, 0, 0, 180, 181, 182, 617, 0, 183,
	184, 185, 239, 654, 0, 0, 186, 0, 0, 0,
	0, 187, 188, 189, 190, 0, 0, 603, 0, 0,
	0, 0, 0, 0, 0, 0, 571, 572, 0, 0,
	0, 0, 573, 77, 78, 580, 79, 0, 0, 0,
	0, 619, 0, 0, 0, 0, 80, 81, 192, 193,
	194, 195, 82, 196, 197, 0, 83, 198, 199, 84,
	0, 618, 200, 201, 202, 0, 630, 0, 611, 0,
	85, 86, 87, 0, 88, 0, 89, 90, 91, 0,
	267, 92, 93, 0, 612, 614, 0, 613, 615, 94,
	95, 96, 97, 204, 98, 205, 206, 0, 99, 0,
	100, 0, 0, 0, 101, 102, 0, 103, 0, 0,
	0, 207, 104, 105, 620, 621, 0, 0, 0, 106,
	107, 210, 0, 108, 0, 109, 0, 0, 268, 0,
	110, 631, 0, 212, 0, 111, 112, 113, 627, 629,
	270, 0, 116, 0, 114, 0, 269, 115, 215, 216,
	217, 218, 0, 219, 0, 271, 117, 272, 118, 119,
	0, 0, 632, 273, 120, 274, 0, 121, 0, 0,
	122, 0, 123, 124, 125, 126, 127, 275, 128, 129,
	132, 130, 0, 131, 0, 628, 133, 222, 134, 135,
	0, 0, 0, 0, 0, 136, 223, 276, 137, 277,
	622, 138, 139, 140, 141, 0, 623, 142, 226, 143,
	0, 144, 145, 146, 227, 147, 148, 0, 150, 151,
	149, 152, 0, 153, 278, 154, 155, 228, 156, 0,
	157, 158, 159, 0, 229, 160, 161, 616, 162, 163,
	279, 164, 230, 231, 165, 0, 171, 166, 167, 168,
	170, 232, 169, 624, 0, 172, 0, 173, 174, 0,
	234, 235, 236, 0, 0, 175, 625, 626, 0, 176,
	177, 178, 179, 0, 0, 180, 181, 182, 617, 0,
	183, 184, 185, 239, 240, 0, 0, 186, 485, 0,
	0, 0, 187, 188, 189, 190, 0, 0, 0, 0,
	0, 0, 0, 0, 77, 78, 0, 79, 0, 0,
	0, 0, 191, 0, 0, 0, 1654, 80, 81, 192,
	193, 194, 195, 82, 196, 197, 0, 83, 198, 199,
	84, 0, 0, 200, 201, 202, 0, 203, 0, 266,
	0, 85, 86, 87, 0, 88, 0, 89, 90, 91,
	0, 267, 92, 93, 0, 0, 0, 0, 0, 0,
	94, 95, 96, 97, 204, 98, 205, 206, 0, 99,
	0, 100, 0, 0, 0, 101, 102, 0, 103, 0,
	0, 0, 207, 104, 105, 208, 209, 0, 0, 0,
	106, 107, 210, 0, 108, 0, 109, 0, 0, 268,
	0, 110, 211, 0, 212, 0, 111, 112, 113, 213,
	214, 270, 0, 116, 0, 114, 0, 269, 115, 215,
	216, 217, 218, 0, 219, 0, 271, 117, 272, 118,
	119, 0, 0, 220, 273, 120, 274, 0, 121, 0,
	0, 122, 0, 123, 124, 125, 126, 127, 275, 128,
	129, 132, 130, 0, 131, 0, 221, 133, 222, 134,
	135, 0, 0, 0, 0, 0, 136, 223, 276, 137,
	277, 224, 138, 139, 140, 141, 0, 225, 142, 226,
	143, 0, 144, 145, 146, 227, 147, 148, 0, 150,
	151, 149, 152, 0, 153, 278, 154, 155, 228, 156,
	0, 157, 158, 159, 64, 229, 160, 161, 0, 162,
	163, 279, 164, 230, 231, 165, 0, 171, 166, 167,
	168, 170, 232, 169, 233, 0, 172, 66, 173, 174,
	0, 234, 235, 236, 0, 0, 175, 237, 238, 0,
	176, 177, 178, 179, 0, 0, 180, 181, 182, 0,
	0, 183, 184, 185, 489, 240, 0, 0, 186, 0,
	0, 0, 62, 187, 188, 189, 190, 0, 63, 485,
	791, 0, 792, 787, 782, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 77, 78, 61, 79, 0,
	0, 0, 0, 191, 0, 0, 0, 0, 80, 81,
	192, 193, 194, 195, 82, 196, 197, 0, 83, 198,
	199, 84, 0, 0, 200, 201, 202, 0, 203, 0,
	266, 0, 85, 86, 87, 0, 88, 0, 89, 90,
	91, 0, 267, 92, 93, 0, 0, 0, 0, 0,
	0, 94, 95, 96, 97, 204, 98, 205, 206, 795,
	99, 0, 100, 0, 0, 0, 101, 102, 0, 103,
	0, 0, 0, 207, 104, 105, 208, 209, 784, 0,
	0, 106, 107, 210, 0, 108, 0, 109, 0, 0,
	268, 0, 110, 211, 0, 212, 0, 111, 112, 113,
	213, 214, 270, 0, 116, 0, 114, 0, 269, 115,
	215, 216, 217, 218, 0, 219, 0, 271, 117, 272,
	118, 119, 0, 0, 220, 273, 120, 274, 0, 121,
	0, 0, 122, 0, 123, 124, 125, 126, 127, 275,
	128, 129, 132, 130, 0, 131, 0, 221, 133, 222,
	134, 135, 0, 785, 0, 0, 0, 136, 223, 276,
	137, 277, 224, 138, 139, 140, 141, 0, 225, 142,
	226, 143, 0, 144, 145, 146, 227, 147, 148, 0,
	150, 151, 149, 152, 0, 153, 278, 154, 155, 228,
	156, 0, 157, 158, 159, 0, 229, 160, 161, 0,
	162, 163, 279, 164, 230, 231, 165, 0, 171, 166,
	167, 168, 170, 232, 169, 233, 0, 172, 0, 173,
	174, 0, 234, 235, 236, 0, 0, 175, 237, 238,
	783, 176, 177, 178, 179, 0, 0, 180, 181, 182,
	0, 0, 183, 184, 185, 239, 240, 485, 791, 186,
	792, 787, 782, 0, 187, 188, 189, 190, 0, 0,
	0, 0, 0, 77, 78, 0, 79, 0, 0, 793,
	788, 191, 0, 0, 0, 0, 80, 81, 192, 193,
	194, 195, 82, 196, 197, 0, 83, 198, 199, 84,
	0, 0, 200, 201, 202, 0, 203, 0, 266, 0,
	85, 86, 87, 0, 88, 0, 89, 90, 91, 0,
	267, 92, 93, 0, 0, 0, 0, 0, 0, 94,
	95, 96, 97, 204, 98, 205, 206, 778, 99, 0,
	100, 0, 0, 0, 101, 102, 0, 103, 0, 0,
	0, 207, 104, 105, 208, 209, 784, 0, 0, 106,
	107, 210, 0, 108, 0, 109, 0, 0, 268, 0,
	110, 211, 0, 212, 0, 111, 112, 113, 213, 214,
	270, 0, 116, 0, 114, 0, 269, 115, 215, 216,
	217, 218, 0, 219, 0, 271, 117, 272, 118, 119,
	0, 0, 220, 273, 120, 274, 0, 121, 0, 0,
	122, 0, 123, 124, 125, 126, 127, 275, 128, 129,
	132, 130, 0, 131, 0, 221, 133, 222, 134, 135,
	0, 785, 0, 0, 0, 136, 223, 276, 137, 277,
	224, 138, 139, 140, 141, 0, 225, 142, 226, 143,
	0, 144, 145, 146, 227, 147, 148, 0, 150, 151,
	149, 152, 0, 153, 278, 154, 155, 228, 156, 0,
	157, 158, 159, 0, 229, 160, 161, 0, 162, 163,
	279, 164, 230, 231, 165, 0, 171, 166, 167, 168,
	170, 232, 169, 233, 0, 172, 0, 173, 174, 0,
	234, 235, 236, 0, 0, 175, 237, 238, 783, 176,
	177, 178, 179, 0, 0, 180, 181, 182, 0, 0,
	183, 184, 185, 239, 240, 485, 791, 186, 792, 787,
	782, 0, 187, 188, 189, 190, 0, 0, 0, 0,
	0, 77, 78, 0, 79, 0, 0, 793, 788, 191,
	0, 0, 0, 0, 80, 81, 192, 193, 194, 195,
	82, 196, 197, 0, 83, 198, 199, 84, 0, 0,
	200, 201, 202, 0, 203, 0, 266, 0, 85, 86,
	87, 0, 88, 0, 89, 90, 91, 0, 267, 92,
	93, 0, 0, 0, 0, 0, 0, 94, 95, 96,
	97, 204, 98, 205, 206, 0, 99, 0, 100, 0,
	0, 0, 101, 102, 0, 103, 0, 0, 0, 207,
	104, 105, 208, 209, 784, 0, 0, 106, 107, 210,
	0, 108, 0, 109, 0, 0, 268, 0, 110, 211,
	0, 212, 0, 111, 112, 113, 213, 214, 270, 0,
	116, 0, 114, 0, 269, 115, 215, 216, 217, 218,
	0, 219, 0, 271, 117, 272, 118, 119, 0, 0,
	220, 273, 120, 274, 0, 121, 0, 0, 122, 0,
	123, 124, 125, 126, 127, 275, 128, 129, 132, 130,
	0, 131, 0, 221, 133, 222, 134, 135, 0, 785,
	0, 0, 0, 136, 223, 276, 137, 277, 224, 138,
	139, 140, 141, 0, 225, 142, 226, 143, 0, 144,
	145, 146, 227, 147, 148, 0, 150, 151, 149, 152,
	0, 153, 278, 154, 155, 228, 156, 0, 157, 158,
	159, 0, 229, 160, 161, 0, 162, 163, 279, 164,
	230, 231, 165, 0, 171, 166, 167, 168, 170, 232,
	169, 233, 0, 172, 0, 173, 174, 0, 234, 235,
	236, 0, 0, 175, 237, 238, 783, 176, 177, 178,
	179, 0, 0, 180, 181, 182, 0, 0, 183, 184,
	185, 239, 240, 74, 0, 186, 0, 0, 0, 0,
	187, 188, 189, 190, 0, 0, 0, 0, 0, 77,
	78, 0, 79, 0, 0, 793, 788, 191, 0, 0,
	0, 0, 80, 81, 192, 193, 194, 195, 82, 196,
	197, 0, 83, 198, 199, 84, 0, 0, 200, 201,
	202, 0, 203, 0, 0, 0, 85, 86, 87, 0,
	88, 0, 89, 90, 91, 0, 0, 92, 93, 0,
	0, 0, 0, 0, 0, 94, 95, 96, 97, 204,
	98, 205, 206, 0, 99, 0, 100, 0, 0, 0,
	101, 102, 0, 103, 0, 0, 0, 207, 104, 105,
	208, 209, 0, 0, 0, 106, 107, 210, 0, 108,
	0, 109, 0, 0, 0, 0, 110, 211, 0, 212,
	0, 111, 112, 113, 213, 214, 0, 0, 116, 0,
	114, 0, 0, 115, 215, 216, 217, 218, 0, 219,
	0, 0, 117, 0, 118, 119, 0, 0, 220, 0,
	120, 0, 0, 121, 0, 0, 122, 0, 123, 124,
	125, 126, 127, 0, 128, 129, 132, 130, 0, 131,
	0, 221, 133, 222, 134, 135, 0, 0, 448, 0,
	0, 136, 223, 0, 137, 0, 224, 138, 139, 140,
	141, 0, 225, 142, 226, 143, 0, 144, 145, 146,
	227, 147, 148, 0, 150, 151, 149, 152, 0, 153,
	0, 154, 155, 228, 156, 0, 157, 158, 159, 64,
	229, 160, 161, 0, 162, 163, 0, 164, 230, 231,
	165, 0, 171, 166, 167, 168, 170, 232, 169, 233,
	0, 172, 66, 173, 174, 0, 234, 235, 236, 0,
	0, 175, 237, 238, 0, 176, 177, 178, 179, 0,
	0, 180, 181, 182, 0, 0, 183, 184, 185, 489,
	240, 0, 0, 186, 74, 0, 0, 62, 187, 188,
	189, 190, 0, 63, 0, 0, 0, 0, 0, 0,
	77, 78, 0, 79, 0, 0, 0, 0, 191, 0,
	0, 0, 1096, 80, 81, 192, 193, 194, 195, 82,
	196, 197, 0, 83, 198, 199, 84, 0, 0, 200,
	201, 202, 0, 203, 0, 0, 0, 85, 86, 87,
	0, 88, 0, 89, 90, 91, 0, 0, 92, 93,
	0, 0, 0, 0, 0, 0, 94, 95, 96, 97,
	204, 98, 205, 206, 0, 99, 0, 100, 0, 0,
	0, 101, 102, 0, 103, 0, 0, 0, 207, 104,
	105, 208, 209, 0, 0, 0, 106, 107, 210, 0,
	108, 0, 109, 0, 0, 0, 0, 110, 211, 0,
	212, 0, 111, 112, 113, 213, 214, 0, 0, 116,
	0, 114, 0, 0, 115, 215, 216, 217, 218, 0,
	219, 0, 0, 117, 0, 118, 119, 0, 0, 220,
	0, 120, 0, 0, 121, 0, 0, 122, 0, 123,
	124, 125, 126, 127, 0, 128, 129, 132, 130, 0,
	131, 0, 221, 133, 222, 134, 135, 0, 0, 0,
	0, 0, 136, 223, 0, 137, 0, 224, 138, 139,
	140, 141, 0, 225, 142, 226, 143, 0, 144, 145,
	146, 227, 147, 148, 0, 150, 151, 149, 152, 0,
	153, 0, 154, 155, 228, 156, 0, 157, 158, 159,
	64, 229, 160, 161, 0, 162, 163, 0, 164, 230,
	231, 165, 0, 171, 166, 167, 168, 170, 232, 169,
	233, 0, 172, 66, 173, 174, 0, 234, 235, 236,
	0, 0, 175, 237, 238, 0, 176, 177, 178, 179,
	0, 0, 180, 181, 182, 0, 0, 183, 184, 185,
	489, 240, 0, 0, 186, 74, 0, 0, 62, 187,
	188, 189, 190, 0, 63, 0, 0, 0, 0, 0,
	0, 77, 78, 0, 79, 0, 0, 0, 0, 191,
	0, 1332, 0, 61, 80, 81, 192, 193, 194, 195,
	82, 196, 197, 0, 83, 198, 199, 84, 0, 0,
	200, 201, 202, 0, 203, 0, 0, 0, 85, 86,
	87, 0, 88, 0, 89, 90, 91, 0, 0, 92,
	93, 0, 0, 0, 0, 0, 0, 94, 95, 96,
	97, 204, 98, 205, 206, 0, 99, 0, 100, 0,
	0, 0, 101, 102, 0, 103, 0, 0, 0, 207,
	104, 105, 208, 209, 0, 0, 0, 106, 107, 210,
	0, 108, 0, 109, 0, 0, 0, 0, 110, 211,
	0, 212, 0, 111, 112, 113, 213, 214, 0, 0,
	116, 0, 114, 0, 0, 115, 215, 216, 217, 218,
	0, 219, 0, 0, 117, 0, 118, 119, 0, 0,
	220, 0, 120, 0, 0, 121, 0, 0, 122, 0,
	123, 124, 125, 126, 127, 0, 128, 129, 132, 130,
	0, 131, 0, 221, 133, 222, 134, 135, 0, 0,
	0, 0, 0, 136, 223, 0, 137, 0, 224, 138,
	139, 140, 141, 0, 225, 142, 226, 143, 0, 144,
	145, 146, 227, 147, 148, 0, 150, 151, 149, 152,
	0, 153, 0, 154, 155, 228, 156, 0, 157, 158,
	159, 0, 229, 160, 161, 0, 162, 163, 0, 164,
	230, 231, 165, 0, 171, 166, 167, 168, 170, 232,
	169, 233, 0, 172, 0, 173, 174, 0, 234, 235,
	236, 0, 0, 175, 237, 238, 0, 176, 177, 178,
	179, 0, 0, 180, 181, 182, 0, 0, 183, 184,
	185, 239, 240, 0, 0, 186, 0, 74, 0, 0,
	187, 188, 189, 190, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 77, 78, 0, 79, 0, 0, 0,
	0, 191, 0, 0, 0, 561, 80, 81, 192, 193,
	194, 195, 82, 196, 197, 0, 83, 198, 199, 84,
	0, 0, 200, 201, 202, 0, 203, 0, 0, 0,
	85, 86, 87, 0, 88, 0, 89, 90, 91, 0,
	0, 92, 93, 0, 0, 0, 0, 0, 0, 94,
	95, 96, 97, 204, 98, 205, 206, 0, 99, 0,
	100, 0, 0, 0, 101, 102, 0, 103, 0, 0,
	0, 207, 104, 105, 208, 209, 0, 0, 0, 106,
	107, 210, 0, 108, 0, 109, 0, 0, 0, 0,
	110, 211, 0, 212, 0, 111, 112, 113, 213, 214,
	0, 0, 116, 0, 114, 0, 0, 115, 215, 216,
	217, 218, 0, 219, 0, 0, 117, 0, 118, 119,
	0, 0, 220, 0, 120, 0, 0, 121, 0, 0,
	122, 0, 123, 124, 125, 126, 127, 0, 128, 129,
	132, 130, 0, 131, 0, 221, 133, 222, 134, 135,
	0, 0, 448, 0, 0, 136, 223, 0, 137, 0,
	224, 138, 139, 140, 141, 0, 225, 142, 226, 143,
	0, 144, 145, 146, 227, 147, 148, 0, 150, 151,
	149, 152, 0, 153, 0, 154, 155, 228, 156, 0,
	157, 158, 159, 0, 229, 160, 161, 0, 162, 163,
	0, 164, 230, 231, 165, 0, 171, 166, 167, 168,
	170, 232, 169, 233, 0, 172, 0, 173, 174, 0,
	234, 235, 236, 0, 0, 175, 237, 238, 0, 176,
	177, 178, 179, 0, 0, 180, 181, 182, 0, 0,
	183, 184, 185, 239, 240, 0, 0, 186, 74, 0,
	0, 0, 187, 188, 189, 190, 0, 0, 0, 0,
	0, 0, 0, 0, 77, 78, 0, 79, 0, 0,
	0, 0, 191, 0, 0, 0, 1096, 80, 81, 192,
	193, 194, 195, 82, 196, 197, 0, 83, 198, 199,
	84, 0, 0, 200, 201, 202, 0, 203, 0, 0,
	0, 85, 86, 87, 0, 88, 0, 89, 90, 91,
	0, 0, 92, 93, 0, 0, 0, 0, 0, 0,
	94, 95, 96, 97, 204, 98, 205, 206, 0, 99,
	0, 100, 0, 0, 0, 101, 102, 0, 103, 0,
	0, 0, 207, 104, 105, 208, 209, 0, 0, 0,
	106, 107, 210, 0, 108, 0, 109, 0, 0, 0,
	0, 110, 211, 0, 212, 0, 111, 112, 113, 213,
	214, 0, 0, 116, 0, 114, 0, 0, 115, 215,
	216, 217, 218, 0, 219, 0, 0, 117, 0, 118,
	119, 0, 0, 220, 0, 120, 0, 0, 121, 0,
	0, 122, 0, 123, 124, 125, 126, 127, 0, 128,
	129, 132, 130, 0, 131, 0, 221, 133, 222, 134,
	135, 0, 0, 0, 0, 0, 136, 223, 0, 137,
	0, 224, 138, 139, 140, 141, 0, 225, 142, 226,
	143, 0, 144, 145, 146, 227, 147, 148, 0, 150,
	151, 149, 152, 0, 153, 0, 154, 155, 228, 156,
	0, 157, 158, 159, 0, 229, 160, 161, 0, 162,
	163, 0, 164, 230, 231, 165, 0, 171, 166, 167,
	168, 170, 232, 169, 233, 0, 172, 0, 173, 174,
	0, 234, 235, 236, 0, 0, 175, 237, 238, 0,
	176, 177, 178, 179, 0, 0, 180, 181, 182, 0,
	0, 183, 184, 185, 239, 240, 0, 0, 186, 0,
	74, 0, 0, 187, 188, 189, 190, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 77, 78, 0, 79,
	0, 0, 0, 0, 191, 0, 0, 0, 685, 80,
	81, 192, 193, 194, 195, 82, 196, 197, 0, 83,
	198, 199, 84, 0, 0, 200, 201, 202, 0, 203,
	0, 0, 0, 85, 86, 87, 0, 88, 0, 89,
	90, 91, 0, 0, 92, 93, 0, 0, 0, 0,
	0, 0, 94, 95, 96, 97, 204, 98, 205, 206,
	0, 99, 0, 100, 0, 0, 0, 101, 102, 0,
	103, 0, 0, 0, 207, 104, 105, 208, 209, 0,
	0, 0, 106, 107, 210, 0, 108, 0, 109, 0,
	0, 0, 0, 110, 211, 0, 212, 0, 111, 112,
	113, 213, 214, 0, 0, 116, 0, 114, 0, 0,
	115, 215, 216, 217, 218, 0, 219, 0, 0, 117,
	0, 118, 119, 0, 0, 220, 0, 120, 0, 0,
	121, 0, 0, 122, 0, 123, 124, 125, 126, 127,
	0, 128, 129, 132, 130, 0, 131, 0, 221, 133,
	222, 134, 135, 0, 0, 0, 0, 0, 136, 223,
	0, 137, 0, 224, 138, 139, 140, 141, 0, 225,
	142, 226, 143, 0, 144, 145, 146, 227, 147, 148,
	0, 150, 151, 149, 152, 0, 153, 0, 154, 155,
	228, 156, 0, 157, 158, 159, 0, 229, 160, 161,
	0, 162, 163, 0, 164, 230, 231, 165, 0, 171,
	166, 167, 168, 170, 232, 169, 233, 0, 172, 0,
	173, 174, 0, 234, 235, 236, 0, 0, 175, 237,
	238, 0, 176, 177, 178, 179, 0, 0, 180, 181,
	182, 0, 0, 183, 184, 185, 239, 240, 0, 0,
	186, 74, 0, 0, 0, 187, 188, 189, 190, 0,
	0, 0, 0, 0, 0, 0, 0, 77, 78, 0,
	79, 0, 0, 0, 0, 191, 0, 0, 0, 1000,
	80, 81, 192, 193, 194, 195, 82, 196, 197, 0,
	83, 198, 199, 84, 0, 0, 200, 201, 202, 0,
	203, 0, 0, 0, 85, 86, 87, 0, 88, 0,
	89, 90, 91, 0, 0, 92, 93, 0, 0, 0,
	0, 0, 0, 94, 95, 96, 97, 204, 98, 205,
	206, 0, 99, 0, 100, 0, 0, 0, 101, 102,
	0, 103, 0, 0, 0, 207, 104, 105, 208, 209,
	0, 0, 0, 106, 107, 210, 0, 108, 0, 109,
	0, 0, 0, 0, 110, 211, 0, 212, 0, 111,
	112, 113, 213, 214, 0, 0, 116, 0, 114, 0,
	0, 115, 215, 216, 217, 218, 0, 219, 0, 0,
	117, 0, 118, 119, 0, 0, 220, 0, 120, 0,
	0, 121, 0, 0, 122, 0, 123, 124, 125, 126,
	127, 0, 128, 129, 132, 130, 0, 131, 0, 221,
	133, 222, 134, 135, 0, 0, 0, 0, 0, 136,
	223, 0, 137, 0, 224, 138, 139, 140, 141, 0,
	225, 142, 226, 143, 0, 144, 145, 146, 227, 147,
	148, 0, 150, 151, 149, 152, 0, 153, 0, 154,
	155, 228, 156, 0, 157, 158, 159, 0, 229, 160,
	161, 0, 162, 163, 0, 164, 230, 231, 165, 0,
	171, 166, 167, 168, 170, 232, 169, 233, 0, 172,
	0, 173, 174, 0, 234, 235, 236, 0, 0, 175,
	237, 238, 0, 176, 177, 178, 179, 0, 0, 180,
	181, 182, 0, 0, 183, 184, 185, 239, 240, 0,
	0, 186, 74, 0, 0, 0, 187, 188, 189, 190,
	0, 0, 0, 0, 0, 0, 0, 0, 77, 78,
	0, 79, 0, 0, 0, 0, 191, 0, 0, 0,
	1552, 80, 81, 192, 193, 194, 195, 82, 196, 197,
	0, 83, 198, 199, 84, 0, 0, 200, 201, 202,
	0, 203, 0, 0, 0, 85, 86, 87, 0, 88,
	0, 89, 90, 91, 0, 0, 92, 93, 0, 0,
	0, 0, 0, 0, 94, 95, 96, 97, 204, 98,
	205, 206, 0, 99, 0, 100, 0, 0, 0, 101,
	102, 0, 103, 0, 0, 0, 207, 104, 105, 208,
	209, 0, 0, 0, 106, 107, 210, 0, 108, 0,
	109, 0, 0, 0, 0, 110, 211, 0, 212, 0,
	111, 112, 113, 213, 214, 0, 0, 116, 0, 114,
	0, 0, 115, 215, 216, 217, 218, 0, 219, 0,
	0, 117, 0, 118, 119, 0, 0, 220, 0, 120,
	0, 0, 121, 0, 0, 122, 0, 123, 124, 125,
	126, 127, 0, 128, 129, 132, 130, 0, 131, 0,
	221, 133, 222, 134, 135, 0, 0, 0, 0, 0,
	136, 223, 0, 137, 0, 224, 138, 139, 140, 141,
	0, 225, 142, 226, 143, 0, 144, 145, 146, 227,
	147, 148, 0, 150, 151, 149, 152, 0, 153, 0,
	154, 155, 228, 156, 0, 157, 158, 159, 0, 229,
	160, 161, 0, 162, 163, 0, 164, 230, 231, 165,
	0, 171, 166, 167, 168, 170, 232, 169, 233, 0,
	172, 0, 173, 174, 0, 234, 235, 236, 0, 0,
	175, 237, 238, 0, 176, 177, 178, 179, 0, 0,
	180, 181, 182, 0, 0, 183, 184, 185, 239, 240,
	0, 0, 186, 74, 0, 0, 0, 187, 188, 189,
	190, 0, 0, 0, 0, 0, 0, 0, 0, 77,
	78, 0, 79, 0, 0, 0, 0, 191, 0, 0,
	0, 665, 80, 81, 192, 193, 194, 195, 82, 196,
	197, 0, 83, 198, 199, 84, 0, 0, 200, 201,
	202, 0, 203, 0, 0, 0, 85, 86, 87, 0,
	88, 0, 89, 90, 91, 0, 0, 92, 93, 0,
	0, 0, 0, 0, 0, 94, 95, 762, 97, 204,
	98, 205, 206, 0, 99, 0, 100, 0, 0, 0,
	101, 102, 0, 103, 0, 0, 0, 207, 104, 105,
	208, 209, 0, 0, 0, 106, 107, 210, 0, 108,
	0, 109, 0, 0, 0, 0, 110, 211, 0, 212,
	0, 111, 112, 113, 213, 214, 0, 0, 116, 0,
	114, 0, 0, 115, 215, 216, 217, 218, 0, 219,
	0, 0, 117, 0, 118, 119, 0, 0, 220, 0,
	120, 0, 0, 121, 0, 0, 122, 0, 123, 124,
	125, 126, 127, 0, 128, 129, 132, 130, 0, 131,
	0, 221, 133, 222, 134, 135, 0, 0, 0, 0,
	0, 136, 223, 0, 137, 0, 224, 138, 139, 140,
	141, 0, 225, 142, 226, 143, 0, 144, 145, 146,
	227, 147, 148, 0, 150, 151, 149, 152, 0, 153,
	0, 154, 155, 228, 156, 0, 157, 158, 159, 0,
	229, 160, 161, 0, 162, 163, 0, 164, 230, 231,
	165, 0, 171, 166, 167, 168, 170, 232, 169, 233,
	0, 172, 761, 173, 174, 0, 234, 235, 236, 0,
	0, 175, 237, 238, 0, 176, 177, 178, 179, 0,
	0, 180, 181, 182, 0, 0, 183, 184, 185, 239,
	240, 0, 74, 186, 0, 0, 0, 0, 187, 188,
	189, 190, 0, 0, 0, 0, 0, 0, 77, 78,
	0, 79, 0, 0, 0, 765, 191, 0, 0, 0,
	0, 80, 81, 192, 193, 194, 195, 82, 196, 197,
	0, 83, 198, 199, 84, 0, 0, 200, 201, 202,
	0, 203, 0, 0, 0, 85, 86, 87, 0, 88,
	0, 89, 90, 91, 0, 0, 92, 93, 0, 0,
	0, 0, 0, 0, 94, 95, 96, 97, 204, 98,
	205, 206, 0, 99, 0, 100, 0, 0, 0, 101,
	102, 0, 103, 0, 0, 0, 207, 104, 105, 208,
	209, 0, 0, 0, 106, 107, 210, 0, 108, 0,
	109, 0, 0, 0, 0, 110, 211, 0, 212, 0,
	111, 112, 113, 213, 214, 0, 0, 116, 0, 114,
	0, 0, 115, 215, 216, 217, 218, 0, 219, 0,
	0, 117, 0, 118, 119, 0, 0, 220, 0, 120,
	0, 0, 121, 0, 0, 122, 0, 123, 124, 125,
	126, 127, 0, 128, 129, 132, 130, 0, 131, 0,
	221, 133, 222, 134, 135, 0, 0, 0, 0, 0,
	136, 223, 0, 137, 0, 224, 138, 139, 140, 141,
	0, 225, 142, 226, 143, 0, 144, 145, 146, 227,
	147, 148, 0, 150, 151, 149, 152, 0, 153, 0,
	154, 155, 228, 156, 0, 157, 158, 159, 0, 229,
	160, 161, 0, 162, 163, 0, 164, 230, 231, 165,
	0, 171, 166, 167, 168, 170, 232, 169, 233, 0,
	172, 0, 173, 174, 0, 234, 235, 236, 0, 0,
	175, 237, 238, 0, 176, 177, 178, 179, 0, 0,
	180, 181, 182, 0, 0, 183, 184, 185, 239, 240,
	0, 485, 186, 0, 0, 0, 0, 187, 188, 189,
	190, 0, 0, 0, 0, 0, 0, 77, 78, 0,
	79, 0, 0, 0, 765, 191, 0, 0, 0, 0,
	80, 81, 192, 193, 194, 195, 82, 196, 197, 0,
	83, 198, 199, 84, 0, 0, 200, 201, 202, 0,
	203, 0, 266, 0, 85, 86, 87, 0, 88, 0,
	89, 90, 91, 0, 267, 92, 93, 0, 0, 0,
	0, 0, 0, 94, 95, 96, 97, 204, 98, 205,
	206, 0, 99, 0, 100, 0, 0, 0, 101, 102,
	0, 103, 0, 0, 0, 207, 104, 105, 208, 209,
	0, 0, 0, 106, 107, 210, 0, 108, 0, 109,
	0, 0, 268, 0, 110, 211, 0, 212, 0, 111,
	112, 113, 213, 214, 270, 0, 116, 0, 114, 0,
	269, 115, 215, 216, 217, 218, 0, 219, 0, 271,
	117, 272, 118, 119, 0, 0, 220, 273, 120, 274,
	0, 121, 0, 0, 122, 0, 123, 124, 125, 126,
	127, 275, 128, 129, 132, 130, 0, 131, 0, 221,
	133, 222, 134, 135, 0, 0, 0, 0, 0, 136,
	223, 276, 137, 277, 224, 138, 139, 140, 141, 0,
	225, 142, 226, 143, 0, 144, 145, 146, 227, 147,
	148, 0, 150, 151, 149, 152, 0, 153, 278, 154,
	155, 228, 156, 0, 157, 158, 159, 0, 229, 160,
	161, 0, 162, 163, 279, 164, 230, 231, 165, 0,
	171, 166, 167, 168, 170, 232, 169, 233, 0, 172,
	0, 173, 174, 0, 234, 235, 236, 0, 0, 175,
	237, 238, 0, 176, 177, 178, 179, 0, 0, 180,
	181, 182, 0, 0, 183, 184, 185, 239, 240, 74,
	0, 186, 0, 0, 0, 0, 187, 188, 189, 190,
	0, 0, 0, 0, 0, 77, 78, 0, 79, 0,
	0, 0, 0, 191, 0, 0, 0, 0, 80, 81,
	192, 193, 194, 195, 82, 196, 197, 0, 83, 198,
	199, 84, 0, 0, 200, 201, 202, 966, 203, 0,
	0, 0, 85, 86, 87, 0, 88, 964, 89, 90,
	91, 0, 0, 92, 93, 0, 0, 0, 0, 0,
	0, 94, 95, 96, 97, 204, 98, 205, 206, 0,
	99, 0, 100, 0, 0, 0, 101, 102, 0, 103,
	0, 0, 0, 207, 104, 105, 208, 209, 0, 1069,
	0, 106, 107, 210, 0, 108, 0, 109, 969, 0,
	0, 0, 110, 211, 0, 212, 0, 111, 112, 113,
	213, 214, 0, 0, 116, 1067, 114, 0, 0, 115,
	215, 216, 217, 218, 0, 219, 0, 0, 117, 0,
	118, 119, 0, 0, 220, 0, 120, 0, 0, 121,
	0, 0, 122, 0, 123, 124, 125, 126, 127, 0,
	128, 129, 132, 130, 0, 131, 0, 221, 133, 222,
	134, 135, 0, 0, 0, 0, 0, 136, 223, 0,
	137, 0, 224, 138, 139, 140, 141, 0, 225, 142,
	226, 143, 968, 144, 145, 146, 227, 147, 148, 0,
	150, 151, 149, 152, 0, 153, 0, 154, 155, 228,
	156, 0, 157, 158, 159, 0, 229, 160, 161, 0,
	162, 163, 0, 164, 230, 231, 165, 0, 171, 166,
	167, 168, 170, 232, 169, 233, 0, 172, 0, 173,
	174, 0, 234, 235, 236, 0, 0, 175, 237, 238,
	0, 176, 177, 178, 179, 0, 1068, 180, 181, 182,
	0, 0, 183, 184, 185, 239, 240, 74, 0, 186,
	0, 0, 0, 0, 187, 188, 189, 190, 0, 0,
	0, 0, 0, 77, 78, 0, 79, 0, 0, 0,
	0, 191, 0, 0, 0, 0, 80, 81, 192, 193,
	194, 195, 82, 196, 197, 0, 83, 198, 199, 84,
	0, 0, 200, 201, 202, 966, 203, 0, 0, 961,
	85, 86, 87, 0, 88, 964, 89, 90, 91, 0,
	0, 92, 93, 0, 0, 0, 0, 0, 0, 94,
	95, 96, 97, 204, 98, 205, 206, 0, 99, 0,
	100, 0, 0, 0, 101, 102, 0, 103, 0, 0,
	0, 207, 104, 105, 208, 209, 0, 0, 0, 106,
	107, 210, 0, 108, 0, 109, 969, 0, 0, 0,
	110, 211, 0, 212, 0, 111, 112, 113, 960, 214,
	0, 0, 116, 0, 114, 0, 0, 115, 215, 216,
	217, 218, 0, 219, 0, 0, 117, 0, 118, 119,
	0, 0, 220, 0, 120, 0, 0, 121, 0, 0,
	122, 0, 123, 124, 125, 126, 127, 0, 128, 129,
	132, 130, 0, 131, 0, 221, 133, 222, 134, 135,
	0, 0, 0, 0, 0, 136, 223, 0, 137, 0,
	224, 138, 139, 140, 141, 0, 225, 142, 226, 143,
	968, 144, 145, 146, 227, 147, 148, 0, 150, 151,
	149, 152, 0, 153, 0, 154, 155, 228, 156, 0,
	157, 158, 159, 0, 229, 160, 161, 0, 162, 163,
	0, 164, 230, 231, 165, 0, 171, 166, 167, 168,
	170, 232, 169, 233, 0, 172, 0, 173, 174, 0,
	234, 235, 236, 0, 0, 175, 237, 238, 0, 176,
	177, 178, 179, 0, 967, 180, 181, 182, 0, 0,
	183, 184, 185, 239, 240, 74, 0, 186, 0, 0,
	0, 0, 187, 188, 189, 190, 0, 0, 0, 0,
	0, 77, 78, 0, 79, 0, 0, 0, 0, 191,
	0, 1332, 0, 0, 80, 81, 192, 193, 194, 195,
	82, 196, 197, 0, 83, 198, 199, 84, 0, 0,
	200, 201, 202, 0, 203, 0, 0, 0, 85, 86,
	87, 0, 88, 0, 89, 90, 91, 0, 0, 92,
	93, 0, 0, 0, 0, 0, 0, 94, 95, 96,
	97, 204, 98, 205, 206, 0, 99, 0, 100, 0,
	0, 0, 101, 102, 0, 103, 0, 0, 0, 207,
	104, 105, 208, 209, 0, 0, 0, 106, 107, 210,
	0, 108, 0, 109, 0, 0, 0, 0, 110, 211,
	0, 212, 0, 111, 112, 113, 213, 214, 0, 0,
	116, 0, 114, 0, 0, 115, 215, 216, 217, 218,
	0, 219, 0, 0, 117, 0, 118, 119, 0, 0,
	220, 0, 120, 0, 0, 121, 0, 0, 122, 0,
	123, 124, 125, 126, 127, 0, 128, 129, 132, 130,
	0, 131, 0, 221, 133, 222, 134, 135, 0, 0,
	0, 0, 0, 136, 223, 0, 137, 0, 224, 138,
	139, 140, 141, 0, 225, 142, 226, 143, 0, 144,
	145, 146, 227, 147, 148, 0, 150, 151, 149, 152,
	0, 153, 0, 154, 155, 228, 156, 0, 157, 158,
	159, 0, 229, 160, 161, 0, 162, 163, 0, 164,
	230, 231, 165, 0, 171, 166, 167, 168, 170, 232,
	169, 233, 0, 172, 0, 173, 174, 0, 234, 235,
	236, 0, 0, 175, 237, 238, 0, 176, 177, 178,
	179, 0, 0, 180, 181, 182, 0, 0, 183, 184,
	185, 239, 240, 74, 0, 186, 0, 0, 0, 0,
	187, 188, 189, 190, 0, 0, 0, 0, 0, 77,
	78, 0, 79, 0, 0, 0, 0, 191, 0, 0,
	0, 0, 80, 81, 192, 193, 194, 195, 82, 196,
	197, 0, 83, 198, 199, 84, 0, 0, 200, 201,
	202, 0, 203, 0, 0, 0, 85, 86, 87, 0,
	88, 0, 89, 90, 91, 0, 0, 92, 93, 0,
	0, 0, 0, 0, 0, 94, 95, 96, 97, 204,
	98, 205, 206, 0, 99, 0, 100, 0, 0, 0,
	101, 102, 0, 103, 0, 0, 0, 207, 104, 105,
	208, 209, 0, 0, 0, 106, 107, 210, 0, 108,
	0, 109, 0, 0, 0, 0, 110, 211, 0, 212,
	0, 111, 112, 113, 213, 214, 0, 0, 116, 0,
	114, 0, 0, 115, 215, 216, 217, 218, 0, 219,
	0, 0, 117, 0, 118, 119, 0, 0, 220, 0,
	120, 0, 0, 121, 0, 0, 122, 0, 123, 124,
	125, 126, 127, 0, 128, 129, 132, 130, 0, 131,
	0, 221, 133, 222, 134, 135, 0, 0, 448, 0,
	0, 136, 223, 0, 137, 0, 224, 138, 139, 140,
	141, 0, 225, 142, 226, 143, 0, 144, 145, 146,
	227, 147, 148, 0, 150, 151, 149, 152, 0, 153,
	0, 154, 155, 228, 156, 0, 157, 158, 159, 0,
	229, 160, 161, 0, 162, 163, 0, 164, 230, 231,
	165, 0, 171, 166, 167, 168, 170, 232, 169, 233,
	0, 172, 0, 173, 174, 0, 234, 235, 236, 0,
	0, 175, 237, 238, 0, 176, 177, 178, 179, 0,
	0, 180, 181, 182, 0, 0, 183, 184, 185, 239,
	240, 74, 0, 186, 0, 0, 0, 0, 187, 188,
	189, 190, 0, 0, 0, 0, 0, 77, 78, 0,
	79, 0, 0, 0, 0, 191, 0, 0, 0, 0,
	80, 81, 192, 193, 194, 195, 82, 196, 197, 0,
	83, 198, 199, 84, 0, 0, 200, 201, 202, 0,
	203, 0, 0, 0, 85, 86, 87, 0, 88, 0,
	89, 90, 91, 0, 0, 92, 93, 0, 0, 0,
	0, 0, 0, 94, 95, 96, 97, 204, 98, 205,
	206, 0, 99, 0, 100, 0, 0, 0, 101, 102,
	0, 103, 0, 0, 0, 207, 104, 105, 208, 209,
	0, 0, 0, 106, 107, 210, 0, 108, 0, 109,
	0, 0, 0, 0, 110, 211, 0, 212, 0, 111,
	112, 113, 713, 214, 0, 0, 116, 0, 114, 0,
	0, 115, 215, 216, 217, 218, 0, 219, 0, 0,
	117, 0, 118, 119, 0, 0, 220, 0, 120, 0,
	0, 121, 0, 0, 122, 0, 123, 124, 125, 126,
	127, 0, 128, 129, 132, 130, 0, 131, 0, 221,
	133, 222, 134, 135, 0, 0, 448, 0, 0, 136,
	223, 0, 137, 0, 224, 138, 139, 140, 141, 0,
	225, 142, 226, 143, 0, 144, 145, 146, 227, 147,
	148, 0, 150, 151, 149, 152, 0, 153, 0, 154,
	155, 228, 156, 0, 157, 158, 159, 0, 229, 160,
	161, 0, 162, 163, 0, 164, 230, 231, 165, 0,
	171, 166, 167, 168, 170, 232, 169, 233, 0, 172,
	0, 173, 174, 0, 234, 235, 236, 0, 0, 175,
	237, 238, 0, 176, 177, 178, 179, 0, 0, 180,
	181, 182, 0, 0, 183, 184, 185, 239, 240, 74,
	0, 186, 0, 0, 0, 0, 187, 188, 189, 190,
	0, 0, 0, 0, 0, 77, 78, 496, 79, 0,
	0, 0, 0, 191, 0, 0, 0, 0, 80, 81,
	192, 193, 194, 195, 82, 196, 197, 0, 83, 198,
	199, 84, 0, 0, 200, 201, 202, 0, 203, 0,
	0, 0, 85, 86, 87, 0, 88, 0, 89, 90,
	91, 0, 0, 92, 93, 0, 0, 0, 0, 0,
	0, 94, 95, 96, 97, 204, 98, 205, 206, 0,
	99, 0, 100, 0, 0, 0, 101, 102, 0, 103,
	0, 0, 0, 207, 104, 105, 208, 209, 0, 0,
	0, 106, 107, 210, 0, 108, 0, 109, 0, 0,
	0, 0, 110, 211, 0, 212, 0, 111, 112, 113,
	213, 214, 0, 0, 116, 0, 114, 0, 0, 115,
	215, 216, 217, 218, 0, 219, 0, 0, 117, 0,
	118, 119, 0, 0, 220, 0, 120, 0, 0, 121,
	0, 0, 122, 0, 123, 124, 125, 126, 127, 0,
	128, 129, 132, 130, 0, 131, 0, 221, 133, 222,
	134, 135, 0, 0, 0, 0, 0, 136, 223, 0,
	137, 0, 224, 138, 139, 140, 141, 0, 225, 142,
	226, 143, 0, 144, 145, 146, 227, 147, 148, 0,
	150, 151, 149, 152, 0, 153, 0, 154, 155, 228,
	156, 0, 157, 158, 159, 0, 229, 160, 161, 0,
	162, 163, 0, 164, 230, 231, 165, 0, 171, 166,
	167, 168, 170, 232, 169, 233, 0, 172, 0, 173,
	174, 0, 234, 235, 236, 0, 0, 175, 237, 238,
	0, 176, 177, 178, 179, 0, 0, 180, 181, 182,
	0, 0, 183, 184, 185, 239, 240, 74, 0, 186,
	0, 0, 0, 0, 187, 188, 189, 190, 0, 0,
	0, 0, 0, 77, 78, 0, 79, 0, 0, 0,
	0, 191, 0, 0, 0, 0, 80, 81, 192, 193,
	194, 195, 82, 196, 197, 0, 83, 198, 199, 84,
	0, 0, 200, 201, 202, 0, 203, 0, 0, 0,
	85, 86, 87, 0, 88, 0, 89, 90, 91, 0,
	0, 92, 93, 0, 0, 0, 0, 0, 0, 94,
	95, 96, 97, 204, 98, 205, 206, 0, 99, 0,
	100, 0, 0, 0, 101, 102, 0, 103, 0, 0,
	0, 207, 104, 105, 208, 209, 0, 0, 0, 106,
	107, 210, 0, 108, 0, 109, 0, 0, 0, 0,
	110, 211, 0, 212, 0, 111, 112, 113, 453, 214,
	0, 0, 116, 0, 114, 0, 0, 115, 215, 216,
	217, 218, 0, 219, 0, 0, 117, 0, 118, 119,
	0, 0, 220, 0, 120, 0, 0, 121, 0, 0,
	122, 0, 123, 124, 125, 126, 127, 0, 128, 129,
	132, 130, 0, 131, 0, 221, 133, 222, 134, 135,
	0, 0, 448, 0, 0, 136, 223, 0, 137, 0,
	224, 138, 139, 140, 141, 0, 225, 142, 226, 143,
	0, 144, 145, 146, 227, 147, 148, 0, 150, 151,
	149, 152, 0, 153, 0, 154, 155, 228, 156, 0,
	157, 158, 159, 0, 229, 160, 161, 0, 162, 163,
	0, 164, 230, 231, 165, 0, 171, 166, 167, 168,
	170, 232, 169, 233, 0, 172, 0, 173, 174, 0,
	234, 235, 236, 0, 0, 175, 237, 238, 0, 176,
	177, 178, 179, 0, 0, 180, 181, 182, 0, 0,
	183, 184, 185, 239, 240, 74, 0, 186, 0, 0,
	0, 0, 187, 188, 189, 190, 0, 0, 0, 0,
	0, 77, 78, 364, 79, 0, 0, 0, 0, 191,
	0, 0, 0, 0, 80, 81, 192, 193, 194, 195,
	82, 196, 197, 0, 83, 198, 199, 84, 0, 0,
	200, 201, 202, 0, 203, 0, 0, 0, 85, 86,
	87, 0, 88, 0, 89, 90, 91, 0, 0, 92,
	93, 0, 0, 0, 0, 0, 0, 94, 95, 96,
	97, 204, 98, 205, 206, 0, 99, 0, 100, 0,
	0, 0, 101, 102, 0, 103, 0, 0, 0, 207,
	104, 105, 208, 209, 0, 0, 0, 106, 107, 210,
	0, 108, 0, 109, 0, 0, 0, 0, 110, 211,
	0, 212, 0, 111, 112, 113, 213, 214, 0, 0,
	116, 0, 114, 0, 0, 115, 215, 216, 217, 218,
	0, 219, 0, 0, 117, 0, 118, 119, 0, 0,
	220, 0, 120, 0, 0, 121, 0, 0, 122, 0,
	123, 124, 125, 126, 127, 0, 128, 129, 132, 130,
	0, 131, 0, 221, 133, 222, 134, 135, 0, 0,
	0, 0, 0, 136, 223, 0, 137, 0, 224, 138,
	139, 140, 141, 0, 225, 142, 226, 363, 0, 144,
	145, 146, 227, 147, 148, 0, 150, 151, 149, 152,
	0, 153, 0, 154, 155, 228, 156, 0, 157, 158,
	159, 0, 229, 160, 161, 0, 162, 163, 0, 164,
	230, 231, 165, 0, 171, 166, 167, 168, 170, 232,
	169, 233, 0, 172, 0, 173, 174, 0, 234, 235,
	236, 0, 0, 175, 237, 238, 0, 176, 177, 178,
	179, 0, 0, 180, 181, 182, 0, 0, 183, 184,
	185, 239, 240, 74, 0, 186, 0, 0, 0, 0,
	187, 188, 189, 190, 0, 0, 0, 0, 0, 77,
	78, 0, 79, 0, 0, 0, 0, 191, 0, 0,
	0, 0, 80, 81, 192, 193, 194, 195, 82, 196,
	197, 0, 83, 198, 199, 84, 0, 0, 200, 201,
	202, 0, 203, 0, 0, 0, 85, 86, 87, 0,
	88, 0, 89, 90, 91, 0, 0, 92, 93, 0,
	0, 0, 0, 0, 0, 94, 95, 96, 97, 204,
	98, 205, 206, 0, 99, 0, 100, 0, 0, 0,
	101, 102, 0, 103, 0, 0, 0, 207, 104, 105,
	208, 209, 0, 0, 0, 106, 107, 210, 0, 108,
	0, 109, 0, 0, 0, 0, 110, 211, 0, 212,
	0, 111, 112, 113, 213, 214, 0, 0, 116, 0,
	114, 0, 0, 115, 215, 216, 217, 218, 0, 219,
	0, 0, 117, 0, 118, 119, 0, 0, 220, 0,
	120, 0, 0, 121, 0, 0, 122, 0, 123, 124,
	125, 126, 127, 0, 128, 129, 132, 130, 0, 131,
	0, 221, 133, 222, 134, 135, 0, 0, 0, 0,
	0, 136, 223, 0, 137, 0, 224, 138, 139, 140,
	141, 0, 225, 142, 226, 143, 0, 144, 145, 146,
	227, 147, 148, 0, 150, 151, 149, 152, 0, 153,
	0, 154, 155, 228, 156, 0, 157, 158, 159, 0,
	229, 160, 161, 0, 162, 163, 0, 164, 230, 231,
	165, 0, 171, 166, 167, 168, 170, 232, 169, 233,
	0, 172, 0, 173, 174, 0, 234, 235, 236, 0,
	0, 175, 237, 238, 0, 176, 177, 178, 179, 0,
	0, 180, 181, 182, 0, 0, 183, 184, 185, 239,
	240, 74, 0, 186, 0, 0, 0, 0, 187, 188,
	189, 190, 0, 0, 0, 0, 0, 77, 78, 0,
	79, 0, 0, 0, 0, 191, 0, 0, 0, 0,
	80, 81, 192, 193, 194, 195, 82, 196, 197, 0,
	83, 198, 199, 84, 0, 0, 200, 201, 202, 0,
	203, 0, 0, 0, 85, 86, 87, 0, 88, 0,
	89, 90, 91, 0, 0, 92, 93, 0, 0, 0,
	0, 0, 0, 94, 95, 96, 97, 204, 98, 205,
	206, 0, 99, 0, 100, 0, 0, 0, 101, 102,
	0, 103, 0, 0, 0, 207, 104, 105, 208, 209,
	0, 0, 0, 106, 107, 210, 0, 108, 0, 109,
	0, 0, 0, 0, 110, 211, 0, 212, 0, 111,
	112, 113, 1245, 214, 0, 0, 116, 0, 114, 0,
	0, 115, 215, 216, 217, 218, 0, 219, 0, 0,
	117, 0, 118, 119, 0, 0, 220, 0, 120, 0,
	0, 121, 0, 0, 122, 0, 123, 124, 125, 126,
	127, 0, 128, 129, 132, 130, 0, 131, 0, 221,
	133, 222, 134, 135, 0, 0, 0, 0, 0, 136,
	223, 0, 137, 0, 224, 138, 139, 140, 141, 0,
	225, 142, 226, 143, 0, 144, 145, 146, 227, 147,
	148, 0, 150, 151, 149, 152, 0, 153, 0, 154,
	155, 228, 156, 0, 157, 158, 159, 0, 229, 160,
	161, 0, 162, 163, 0, 164, 230, 231, 165, 0,
	171, 166, 167, 168, 170, 232, 169, 233, 0, 172,
	0, 173, 174, 0, 234, 235, 236, 0, 0, 175,
	237, 238, 0, 176, 177, 178, 179, 0, 0, 180,
	181, 182, 0, 0, 183, 184, 185, 239, 240, 74,
	0, 186, 0, 0, 0, 0, 187, 188, 189, 190,
	0, 0, 0, 0, 0, 77, 78, 0, 79, 0,
	0, 0, 0, 191, 0, 0, 0, 0, 80, 81,
	192, 193, 194, 195, 82, 196, 197, 0, 83, 198,
	199, 84, 0, 0, 200, 201, 202, 0, 203, 0,
	0, 0, 85, 86, 87, 0, 88, 0, 89, 90,
	91, 0, 0, 92, 93, 0, 0, 0, 0, 0,
	0, 94, 95, 96, 97, 204, 98, 205, 206, 0,
	99, 0, 100, 0, 0, 0, 101, 102, 0, 103,
	0, 0, 0, 207, 104, 105, 208, 209, 0, 0,
	0, 106, 107, 210, 0, 108, 0, 109, 0, 0,
	0, 0, 110, 211, 0, 212, 0, 111, 112, 113,
	1243, 214, 0, 0, 116, 0, 114, 0, 0, 115,
	215, 216, 217, 218, 0, 219, 0, 0, 117, 0,
	118, 119, 0, 0, 220, 0, 120, 0, 0, 121,
	0, 0, 122, 0, 123, 124, 125, 126, 127, 0,
	128, 129, 132, 130, 0, 131, 0, 221, 133, 222,
	134, 135, 0, 0, 0, 0, 0, 136, 223, 0,
	137, 0, 224, 138, 139, 140, 141, 0, 225, 142,
	226, 143, 0, 144, 145, 146, 227, 147, 148, 0,
	150, 151, 149, 152, 0, 153, 0, 154, 155, 228,
	156, 0, 157, 158, 159, 0, 229, 160, 161, 0,
	162, 163, 0, 164, 230, 231, 165, 0, 171, 166,
	167, 168, 170, 232, 169, 233, 0, 172, 0, 173,
	174, 0, 234, 235, 236, 0, 0, 175, 237, 238,
	0, 176, 177, 178, 179, 0, 0, 180, 181, 182,
	0, 0, 183, 184, 185, 239, 240, 74, 0, 186,
	0, 0, 0, 0, 187, 188, 189, 190, 0, 0,
	0, 0, 0, 77, 78, 0, 79, 0, 0, 0,
	0, 191, 0, 0, 0, 0, 80, 81, 192, 193,
	194, 195, 82, 196, 197, 0, 83, 198, 199, 84,
	0, 0, 200, 201, 202, 0, 203, 0, 0, 0,
	85, 86, 87, 0, 88, 0, 89, 90, 91, 0,
	0, 92, 93, 0, 0, 0, 0, 0, 0, 94,
	95, 96, 97, 204, 98, 205, 206, 0, 99, 0,
	100, 0, 0, 0, 101, 102, 0, 103, 0, 0,
	0, 207, 104, 105, 208, 209, 0, 0, 0, 106,
	107, 210, 0, 108, 0, 109, 0, 0, 0, 0,
	110, 211, 0, 212, 0, 111, 112, 113, 1232, 214,
	0, 0, 116, 0, 114, 0, 0, 115, 215, 216,
	217, 218, 0, 219, 0, 0, 117, 0, 118, 119,
	0, 0, 220, 0, 120, 0, 0, 121, 0, 0,
	122, 0, 123, 124, 125, 126, 127, 0, 128, 129,
	132, 130, 0, 131, 0, 221, 133, 222, 134, 135,
	0, 0, 0, 0, 0, 136, 223, 0, 137, 0,
	224, 138, 139, 140, 141, 0, 225, 142, 226, 143,
	0, 144, 145, 146, 227, 147, 148, 0, 150, 151,
	149, 152, 0, 153, 0, 154, 155, 228, 156, 0,
	157, 158, 159, 0, 229, 160, 161, 0, 162, 163,
	0, 164, 230, 231, 165, 0, 171, 166, 167, 168,
	170, 232, 169, 233, 0, 172, 0, 173, 174, 0,
	234, 235, 236, 0, 0, 175, 237, 238, 0, 176,
	177, 178, 179, 0, 0, 180, 181, 182, 0, 0,
	183, 184, 185, 239, 240, 74, 0, 186, 0, 0,
	0, 0, 187, 188, 189, 190, 0, 0, 0, 0,
	0, 77, 78, 0, 79, 0, 0, 0, 0, 191,
	0, 0, 0, 0, 80, 81, 192, 193, 194, 195,
	82, 196, 197, 0, 83, 198, 199, 84, 0, 0,
	200, 201, 202, 0, 203, 0, 0, 0, 85, 86,
	87, 0, 88, 0, 89, 90, 91, 0, 0, 92,
	93, 0, 0, 0, 0, 0, 0, 94, 95, 96,
	97, 204, 98, 205, 206, 0, 99, 0, 100, 0,
	0, 0, 101, 102, 0, 103, 0, 0, 0, 207,
	104, 105, 208, 209, 0, 0, 0, 106, 107, 210,
	0, 108, 0, 109, 0, 0, 0, 0, 110, 211,
	0, 212, 0, 111, 112, 113, 831, 214, 0, 0,
	116, 0, 114, 0, 0, 115, 215, 216, 217, 218,
	0, 219, 0, 0, 117, 0, 118, 119, 0, 0,
	220, 0, 120, 0, 0, 121, 0, 0, 122, 0,
	123, 124, 125, 126, 127, 0, 128, 129, 132, 130,
	0, 131, 0, 221, 133, 222, 134, 135, 0, 0,
	0, 0, 0, 136, 223, 0, 137, 0, 224, 138,
	139, 140, 141, 0, 225, 142, 226, 143, 0, 144,
	145, 146, 227, 147, 148, 0, 150, 151, 149, 152,
	0, 153, 0, 154, 155, 228, 156, 0, 157, 158,
	159, 0, 229, 160, 161, 0, 162, 163, 0, 164,
	230, 231, 165, 0, 171, 166, 167, 168, 170, 232,
	169, 233, 0, 172, 0, 173, 174, 0, 234, 235,
	236, 0, 0, 175, 237, 238, 0, 176, 177, 178,
	179, 0, 0, 180, 181, 182, 0, 0, 183, 184,
	185, 239, 240, 74, 0, 186, 0, 0, 0, 0,
	187, 188, 189, 190, 0, 0, 0, 0, 0, 77,
	78, 0, 79, 0, 0, 0, 0, 191, 0, 0,
	0, 0, 80, 81, 192, 193, 194, 195, 82, 196,
	197, 0, 83, 198, 199, 84, 0, 0, 200, 201,
	202, 0, 203, 0, 0, 0, 85, 86, 87, 0,
	88, 0, 89, 90, 91, 0, 0, 92, 93, 0,
	0, 0, 0, 0, 0, 94, 95, 96, 97, 204,
	98, 205, 206, 0, 99, 0, 100, 0, 0, 0,
	101, 102, 0, 103, 0, 0, 0, 207, 104, 105,
	208, 209, 0, 0, 0, 106, 107, 210, 0, 108,
	0, 109, 0, 0, 0, 0, 110, 211, 0, 212,
	0, 111, 112, 113, 213, 214, 0, 0, 116, 0,
	114, 0, 0, 115, 215, 216, 217, 218, 0, 219,
	0, 0, 117, 0, 118, 119, 0, 0, 220, 0,
	120, 0, 0, 121, 0, 0, 122, 0, 123, 124,
	125, 126, 127, 0, 128, 129, 132, 130, 0, 131,
	0, 221, 133, 222, 134, 135, 0, 0, 0, 0,
	0, 136, 223, 0, 137, 0, 224, 138, 139, 140,
	141, 0, 225, 142, 226, 143, 0, 144, 145, 146,
	227, 147, 148, 0, 150, 151, 149, 152, 0, 153,
	0, 154, 155, 228, 156, 0, 378, 158, 159, 0,
	229, 160, 161, 0, 162, 163, 0, 164, 230, 231,
	165, 0, 171, 166, 167, 168, 170, 232, 169, 233,
	0, 172, 0, 173, 174, 0, 234, 235, 236, 0,
	0, 175, 237, 238, 0, 176, 177, 178, 179, 0,
	0, 180, 181, 182, 0, 0, 183, 184, 185, 239,
	240, 74, 0, 186, 0, 0, 0, 0, 187, 188,
	189, 190, 0, 0, 0, 0, 0, 77, 78, 0,
	79, 0, 0, 0, 0, 191, 0, 698, 0, 0,
	80, 81, 192, 193, 194, 195, 82, 196, 197, 0,
	83, 198, 199, 84, 0, 0, 200, 201, 202, 0,
	203, 0, 0, 0, 85, 86, 87, 0, 88, 0,
	89, 90, 91, 0, 0, 92, 93, 0, 0, 0,
	0, 0, 0, 94, 95, 96, 97, 204, 98, 205,
	206, 0, 99, 0, 100, 0, 0, 0, 101, 102,
	0, 103, 0, 0, 0, 207, 104, 105, 208, 209,
	0, 0, 0, 106, 107, 210, 0, 108, 0, 109,
	0, 0, 0, 0, 110, 211, 0, 212, 0, 111,
	112, 113, 213, 214, 0, 0, 116, 0, 114, 0,
	0, 115, 215, 216, 217, 218, 0, 219, 0, 0,
	117, 0, 118, 119, 0, 0, 220, 0, 120, 0,
	0, 121, 0, 0, 122, 0, 123, 124, 125, 126,
	127, 0, 128, 129, 132, 130, 0, 131, 0, 221,
	133, 222, 134, 135, 0, 0, 0, 0, 0, 136,
	223, 0, 137, 0, 224, 138, 139, 140, 141, 0,
	225, 142, 226, 143, 0, 144, 145, 146, 227, 147,
	148, 0, 150, 151, 149, 152, 0, 153, 0, 154,
	155, 228, 156, 0, 157, 158, 159, 0, 229, 160,
	161, 0, 0, 163, 0, 164, 230, 231, 165, 0,
	171, 166, 167, 168, 170, 232, 169, 233, 0, 172,
	0, 173, 174, 0, 234, 235, 236, 0, 0, 175,
	237, 238, 0, 176, 177, 178, 179, 0, 0, 180,
	181, 182, 0, 0, 183, 184, 185, 239, 240, 74,
	0, 186, 0, 0, 0, 0, 187, 188, 189, 190,
	0, 0, 0, 0, 0, 77, 78, 0, 79, 0,
	0, 0, 0, 191, 0, 0, 0, 0, 80, 81,
	192, 193, 194, 195, 82, 196, 197, 0, 83, 198,
	199, 84, 0, 0, 200, 201, 202, 0, 203, 0,
	0, 0, 85, 86, 87, 0, 88, 0, 89, 90,
	91, 0, 0, 92, 93, 0, 0, 0, 0, 0,
	0, 94, 95, 96, 97, 204, 98, 205, 206, 0,
	99, 0, 100, 0, 0, 0, 101, 102, 0, 103,
	0, 0, 0, 207, 104, 105, 208, 209, 0, 0,
	0, 106, 107, 210, 0, 108, 0, 109, 0, 0,
	0, 0, 110, 211, 0, 212, 0, 111, 112, 113,
	546, 214, 0, 0, 116, 0, 114, 0, 0, 115,
	215, 216, 217, 218, 0, 219, 0, 0, 117, 0,
	118, 119, 0, 0, 220, 0, 120, 0, 0, 121,
	0, 0, 122, 0, 123, 124, 125, 126, 127, 0,
	128, 129, 132, 130, 0, 131, 0, 221, 133, 222,
	134, 135, 0, 0, 0, 0, 0, 136, 223, 0,
	137, 0, 224, 138, 139, 140, 141, 0, 225, 142,
	226, 143, 0, 144, 145, 146, 227, 147, 148, 0,
	150, 151, 149, 152, 0, 153, 0, 154, 155, 228,
	156, 0, 157, 158, 159, 0, 229, 160, 161, 0,
	162, 163, 0, 164, 230, 231, 165, 0, 171, 166,
	167, 168, 170, 232, 169, 233, 0, 172, 0, 173,
	174, 0, 234, 235, 236, 0, 0, 175, 237, 238,
	0, 176, 177, 178, 179, 0, 0, 180, 181, 182,
	0, 0, 183, 184, 185, 239, 240, 74, 0, 186,
	0, 0, 0, 0, 187, 188, 189, 190, 0, 0,
	0, 0, 0, 77, 78, 0, 79, 0, 0, 0,
	0, 191, 0, 0, 0, 0, 80, 81, 192, 193,
	194, 195, 82, 196, 197, 0, 83, 198, 199, 84,
	0, 0, 200, 201, 202, 0, 203, 0, 0, 0,
	85, 86, 87, 0, 88, 0, 89, 90, 91, 0,
	0, 92, 93, 0, 0, 0, 0, 0, 0, 94,
	95, 96, 97, 204, 98, 205, 206, 0, 99, 0,
	100, 0, 0, 0, 101, 102, 0, 103, 0, 0,
	0, 207, 104, 105, 208, 209, 0, 0, 0, 106,
	107, 210, 0, 108, 0, 109, 0, 0, 0, 0,
	110, 211, 0, 212, 0, 111, 112, 113, 541, 214,
	0, 0, 116, 0, 114, 0, 0, 115, 215, 216,
	217, 218, 0, 219, 0, 0, 117, 0, 118, 119,
	0, 0, 220, 0, 120, 0, 0, 121, 0, 0,
	122, 0, 123, 124, 125, 126, 127, 0, 128, 129,
	132, 130, 0, 131, 0, 221, 133, 222, 134, 135,
	0, 0, 0, 0, 0, 136, 223, 0, 137, 0,
	224, 138, 139, 140, 141, 0, 225, 142, 226, 143,
	0, 144, 145, 146, 227, 147, 148, 0, 150, 151,
	149, 152, 0, 153, 0, 154, 155, 228, 156, 0,
	157, 158, 159, 0, 229, 160, 161, 0, 162, 163,
	0, 164, 230, 231, 165, 0, 171, 166, 167, 168,
	170, 232, 169, 233, 0, 172, 0, 173, 174, 0,
	234, 235, 236, 0, 0, 175, 237, 238, 0, 176,
	177, 178, 179, 0, 0, 180, 181, 182, 0, 0,
	183, 184, 185, 239, 240, 74, 0, 186, 0, 0,
	0, 0, 187, 188, 189, 190, 0, 0, 0, 0,
	0, 77, 78, 0, 79, 0, 0, 0, 0, 191,
	0, 0, 0, 0, 80, 81, 192, 193, 194, 195,
	82, 196, 197, 0, 83, 198, 199, 84, 0, 0,
	200, 201, 502, 0, 203, 0, 0, 0, 85, 86,
	87, 0, 88, 0, 89, 90, 91, 0, 0, 92,
	93, 0, 0, 0, 0, 0, 0, 94, 95, 96,
	97, 204, 98, 205, 206, 0, 99, 0, 100, 0,
	0, 0, 101, 102, 0, 103, 0, 0, 0, 207,
	104, 105, 208, 209, 0, 0, 0, 106, 107, 210,
	0, 108, 0, 109, 0, 0, 0, 0, 110, 211,
	0, 212, 0, 111, 112, 113, 213, 214, 0, 0,
	116, 0, 114, 0, 0, 115, 215, 216, 217, 218,
	0, 219, 0, 0, 117, 0, 118, 119, 0, 0,
	220, 0, 120, 0, 0, 121, 0, 0, 122, 0,
	123, 124, 125, 126, 389, 0, 128, 129, 132, 130,
	0, 131, 0, 221, 133, 222, 134, 135, 0, 0,
	0, 0, 0, 136, 223, 0, 137, 0, 224, 138,
	139, 140, 141, 0, 225, 142, 226, 143, 0, 144,
	145, 146, 227, 147, 148, 0, 150, 151, 149, 152,
	0, 153, 0, 154, 155, 228, 156, 0, 157, 158,
	159, 0, 229, 160, 161, 0, 162, 163, 0, 164,
	230, 231, 165, 0, 171, 166, 167, 168, 170, 232,
	169, 233, 0, 172, 0, 173, 174, 0, 388, 235,
	236, 0, 0, 384, 237, 238, 0, 176, 177, 178,
	179, 0, 0, 180, 181, 182, 0, 0, 183, 184,
	185, 239, 240, 74, 0, 186, 0, 0, 0, 0,
	187, 188, 189, 190, 0, 0, 0, 0, 0, 77,
	78, 0, 79, 0, 0, 0, 0, 191, 0, 0,
	0, 0, 80, 81, 192, 193, 194, 195, 82, 196,
	197, 0, 83, 198, 199, 84, 0, 0, 200, 201,
	202, 0, 203, 0, 0, 0, 85, 86, 87, 0,
	88, 0, 89, 90, 91, 0, 0, 92, 93, 0,
	0, 0, 0, 0, 0, 94, 95, 96, 97, 204,
	98, 205, 206, 0, 99, 0, 100, 0, 0, 0,
	101, 102, 0, 103, 0, 0, 0, 207, 104, 105,
	208, 209, 0, 0, 0, 106, 107, 210, 0, 108,
	0, 109, 0, 0, 0, 0, 110, 211, 0, 212,
	0, 111, 112, 113, 213, 214, 0, 0, 116, 0,
	114, 0, 0, 115, 215, 216, 217, 218, 0, 219,
	0, 0, 117, 0, 118, 119, 0, 0, 220, 0,
	120, 0, 0, 121, 0, 0, 122, 0, 123, 124,
	125, 126, 389, 0, 128, 129, 132, 130, 0, 131,
	0, 221, 133, 222, 134, 135, 0, 0, 0, 0,
	0, 136, 223, 0, 137, 0, 224, 138, 139, 140,
	141, 0, 225, 142, 226, 143, 0, 144, 145, 146,
	227, 147, 148, 0, 150, 151, 149, 152, 0, 153,
	0, 154, 155, 228, 156, 0, 157, 158, 159, 0,
	229, 160, 161, 0, 162, 163, 0, 164, 230, 231,
	165, 0, 171, 166, 167, 168, 170, 232, 169, 233,
	0, 172, 0, 173, 174, 0, 388, 235, 236, 0,
	0, 384, 237, 238, 0, 176, 177, 178, 179, 0,
	0, 180, 181, 182, 0, 0, 183, 184, 185, 239,
	240, 74, 0, 186, 0, 0, 0, 0, 187, 188,
	189, 190, 0, 0, 0, 0, 0, 77, 78, 0,
	79, 0, 0, 0, 0, 191, 0, 0, 0, 0,
	80, 81, 192, 193, 194, 195, 82, 196, 197, 0,
	83, 198, 199, 84, 0, 0, 200, 201, 202, 0,
	203, 0, 0, 0, 85, 86, 87, 0, 88, 0,
	89, 90, 91, 0, 0, 92, 93, 0, 0, 0,
	0, 0, 0, 94, 95, 96, 97, 204, 98, 205,
	206, 0, 99, 0, 100, 0, 0, 0, 101, 102,
	0, 103, 0, 0, 0, 207, 104, 105, 208, 209,
	0, 0, 0, 106, 107, 210, 0, 108, 0, 109,
	0, 0, 0, 0, 110, 211, 0, 212, 0, 111,
	112, 113, 481, 214, 0, 0, 116, 0, 114, 0,
	0, 115, 215, 216, 217, 218, 0, 219, 0, 0,
	117, 0, 118, 119, 0, 0, 220, 0, 120, 0,
	0, 121, 0, 0, 122, 0, 123, 124, 125, 126,
	127, 0, 128, 129, 132, 130, 0, 131, 0, 221,
	133, 222, 134, 135, 0, 0, 0, 0, 0, 136,
	223, 0, 137, 0, 224, 138, 139, 140, 141, 0,
	225, 142, 226, 143, 0, 144, 145, 146, 227, 147,
	148, 0, 150, 151, 149, 152, 0, 153, 0, 154,
	155, 228, 156, 0, 157, 158, 159, 0, 229, 160,
	161, 0, 162, 163, 0, 164, 230, 231, 165, 0,
	171, 166, 167, 168, 170, 232, 169, 233, 0, 172,
	0, 173, 174, 0, 234, 235, 236, 0, 0, 175,
	237, 238, 0, 176, 177, 178, 179, 0, 0, 180,
	181, 182, 0, 0, 183, 184, 185, 239, 240, 74,
	0, 186, 0, 0, 0, 0, 187, 188, 189, 190,
	0, 0, 0, 0, 0, 77, 78, 0, 79, 0,
	0, 0, 0, 191, 0, 0, 0, 0, 80, 81,
	192, 193, 194, 195, 82, 196, 197, 0, 83, 198,
	199, 84, 0, 0, 200, 201, 202, 0, 203, 0,
	0, 0, 85, 86, 87, 0, 88, 0, 89, 90,
	91, 0, 0, 92, 93, 0, 0, 0, 0, 0,
	0, 94, 95, 96, 97, 204, 98, 205, 206, 0,
	99, 0, 100, 0, 0, 0, 101, 102, 0, 103,
	0, 0, 0, 207, 104, 105, 208, 209, 0, 0,
	0, 106, 107, 210, 0, 108, 0, 109, 0, 0,
	0, 0, 110, 211, 0, 212, 0, 111, 112, 113,
	478, 214, 0, 0, 116, 0, 114, 0, 0, 115,
	215, 216, 217, 218, 0, 219, 0, 0, 117, 0,
	118, 119, 0, 0, 220, 0, 120, 0, 0, 121,
	0, 0, 122, 0, 123, 124, 125, 126, 127, 0,
	128, 129, 132, 130, 0, 131, 0, 221, 133, 222,
	134, 135, 0, 0, 0, 0, 0, 136, 223, 0,
	137, 0, 224, 138, 139, 140, 141, 0, 225, 142,
	226, 143, 0, 144, 145, 146, 227, 147, 148, 0,
	150, 151, 149, 152, 0, 153, 0, 154, 155, 228,
	156, 0, 157, 158, 159, 0, 229, 160, 161, 0,
	162, 163, 0, 164, 230, 231, 165, 0, 171, 166,
	167, 168, 170, 232, 169, 233, 0, 172, 0, 173,
	174, 0, 234, 235, 236, 0, 0, 175, 237, 238,
	0, 176, 177, 178, 179, 0, 0, 180, 181, 182,
	0, 0, 183, 184, 185, 239, 240, 74, 0, 186,
	0, 0, 0, 0, 187, 188, 189, 190, 0, 0,
	0, 0, 0, 77, 78, 0, 79, 0, 0, 0,
	0, 191, 0, 0, 0, 0, 80, 81, 192, 193,
	194, 195, 82, 196, 197, 0, 83, 198, 199, 84,
	0, 0, 200, 201, 202, 0, 203, 0, 0, 0,
	85, 86, 87, 0, 88, 0, 89, 90, 91, 0,
	0, 92, 93, 0, 0, 0, 0, 0, 0, 94,
	95, 96, 97, 204, 98, 205, 206, 0, 99, 0,
	100, 0, 0, 0, 101, 102, 0, 103, 0, 0,
	0, 207, 104, 105, 208, 209, 0, 0, 0, 106,
	107, 210, 0, 108, 0, 109, 0, 0, 0, 0,
	110, 211, 0, 212, 0, 111, 112, 113, 475, 214,
	0, 0, 116, 0, 114, 0, 0, 115, 215, 216,
	217, 218, 0, 219, 0, 0, 117, 0, 118, 119,
	0, 0, 220, 0, 120, 0, 0, 121, 0, 0,
	122, 0, 123, 124, 125, 126, 127, 0, 128, 129,
	132, 130, 0, 131, 0, 221, 133, 222, 134, 135,
	0, 0, 0, 0, 0, 136, 223, 0, 137, 0,
	224, 138, 139, 140, 141, 0, 225, 142, 226, 143,
	0, 144, 145, 146, 227, 147, 148, 0, 150, 151,
	149, 152, 0, 153, 0, 154, 155, 228, 156, 0,
	157, 158, 159, 0, 229, 160, 161, 0, 162, 163,
	0, 164, 230, 231, 165, 0, 171, 166, 167, 168,
	170, 232, 169, 233, 0, 172, 0, 173, 174, 0,
	234, 235, 236, 0, 0, 175, 237, 238, 0, 176,
	177, 178, 179, 0, 0, 180, 181, 182, 0, 0,
	183, 184, 185, 239, 240, 74, 0, 186, 0, 0,
	0, 0, 187, 188, 189, 190, 0, 0, 0, 0,
	0, 77, 78, 0, 79, 0, 0, 0, 0, 191,
	0, 0, 0, 0, 80, 81, 192, 193, 194, 195,
	82, 196, 197, 0, 83, 198, 199, 84, 0, 0,
	200, 201, 202, 0, 203, 0, 0, 0, 85, 86,
	87, 0, 88, 0, 89, 90, 91, 0, 0, 92,
	93, 0, 0, 0, 0, 0, 0, 94, 95, 96,
	97, 204, 98, 205, 206, 0, 99, 0, 100, 0,
	0, 0, 101, 102, 0, 103, 0, 0, 0, 207,
	104, 105, 208, 209, 0, 0, 0, 106, 107, 210,
	0, 108, 0, 109, 0, 0, 0, 0, 110, 211,
	0, 212, 0, 111, 112, 113, 473, 214, 0, 0,
	116, 0, 114, 0, 0, 115, 215, 216, 217, 218,
	0, 219, 0, 0, 117, 0, 118, 119, 0, 0,
	220, 0, 120, 0, 0, 121, 0, 0, 122, 0,
	123, 124, 125, 126, 127, 0, 128, 129, 132, 130,
	0, 131, 0, 221, 133, 222, 134, 135, 0, 0,
	0, 0, 0, 136, 223, 0, 137, 0, 224, 138,
	139, 140, 141, 0, 225, 142, 226, 143, 0, 144,
	145, 146, 227, 147, 148, 0, 150, 151, 149, 152,
	0, 153, 0, 154, 155, 228, 156, 0, 157, 158,
	159, 0, 229, 160, 161, 0, 162, 163, 0, 164,
	230, 231, 165, 0, 171, 166, 167, 168, 170, 232,
	169, 233, 0, 172, 0, 173, 174, 0, 234, 235,
	236, 0, 0, 175, 237, 238, 0, 176, 177, 178,
	179, 0, 0, 180, 181, 182, 0, 0, 183, 184,
	185, 239, 240, 74, 0, 186, 0, 0, 0, 0,
	187, 188, 189, 190, 0, 0, 0, 0, 0, 77,
	78, 0, 79, 0, 0, 0, 0, 191, 0, 0,
	0, 0, 80, 81, 192, 193, 194, 195, 82, 196,
	197, 0, 83, 198, 199, 84, 0, 0, 200, 201,
	202, 0, 203, 0, 0, 0, 85, 86, 87, 0,
	88, 0, 89, 90, 91, 0, 0, 92, 93, 0,
	0, 0, 0, 0, 0, 94, 95, 96, 97, 204,
	98, 205, 206, 0, 99, 0, 100, 0, 0, 0,
	101, 102, 0, 103, 0, 0, 0, 207, 104, 105,
	208, 209, 0, 0, 0, 106, 107, 210, 0, 108,
	0, 109, 0, 0, 0, 0, 110, 211, 0, 212,
	0, 111, 112, 113, 456, 214, 0, 0, 116, 0,
	114, 0, 0, 115, 215, 216, 217, 218, 0, 219,
	0, 0, 117, 0, 118, 119, 0, 0, 220, 0,
	120, 0, 0, 121, 0, 0, 122, 0, 123, 124,
	125, 126, 127, 0, 128, 129, 132, 130, 0, 131,
	0, 221, 133, 222, 134, 135, 0, 0, 0, 0,
	0, 136, 223, 0, 137, 0, 224, 138, 139, 140,
	141, 0, 225, 142, 226, 143, 0, 144, 145, 146,
	227, 147, 148, 0, 150, 151, 149, 152, 0, 153,
	0, 154, 155, 228, 156, 0, 157, 158, 159, 0,
	229, 160, 161, 0, 162, 163, 0, 164, 230, 231,
	165, 0, 171, 166, 167, 168, 170, 232, 169, 233,
	0, 172, 0, 173, 174, 0, 234, 235, 236, 0,
	0, 175, 237, 238, 0, 176, 177, 178, 179, 0,
	0, 180, 181, 182, 0, 0, 183, 184, 185, 239,
	240, 74, 0, 186, 0, 0, 0, 0, 187, 188,
	189, 190, 0, 0, 0, 0, 0, 77, 78, 0,
	79, 0, 0, 0, 0, 191, 0, 0, 0, 0,
	80, 81, 192, 193, 194, 195, 82, 196, 197, 0,
	83, 198, 199, 84, 0, 0, 200, 201, 202, 0,
	203, 0, 0, 0, 85, 86, 87, 0, 88, 0,
	89, 90, 91, 0, 0, 92, 93, 0, 0, 0,
	0, 0, 0, 94, 95, 96, 97, 204, 98, 205,
	206, 0, 99, 0, 100, 0, 0, 0, 101, 102,
	0, 103, 0, 0, 0, 207, 104, 105, 208, 209,
	0, 0, 0, 106, 107, 210, 0, 108, 0, 109,
	0, 0, 0, 0, 110, 211, 0, 212, 0, 111,
	112, 113, 213, 214, 0, 0, 116, 0, 114, 0,
	0, 115, 215, 216, 217, 218, 0, 219, 0, 0,
	117, 0, 118, 119, 0, 0, 220, 0, 120, 0,
	0, 121, 0, 0, 122, 0, 123, 124, 125, 126,
	127, 0, 128, 129, 132, 130, 0, 131, 0, 221,
	133, 222, 134, 135, 0, 0, 0, 0, 0, 136,
	223, 0, 137, 0, 224, 138, 139, 140, 141, 0,
	225, 142, 226, 143, 0, 144, 145, 146, 227, 437,
	148, 0, 150, 151, 149, 152, 0, 153, 0, 154,
	155, 228, 156, 0, 157, 158, 159, 0, 229, 160,
	161, 0, 162, 163, 0, 164, 230, 231, 165, 0,
	171, 166, 167, 168, 170, 232, 169, 233, 0, 172,
	0, 173, 174, 0, 234, 235, 236, 0, 0, 175,
	237, 238, 0, 176, 177, 178, 179, 0, 0, 180,
	181, 182, 0, 0, 183, 184, 185, 239, 240, 74,
	0, 186, 0, 0, 0, 0, 187, 188, 189, 190,
	0, 0, 0, 0, 0, 77, 78, 0, 79, 0,
	0, 0, 0, 191, 0, 0, 0, 0, 80, 81,
	192, 193, 194, 195, 82, 196, 197, 0, 83, 198,
	199, 84, 0, 0, 200, 201, 202, 0, 203, 0,
	0, 0, 85, 86, 87, 0, 88, 0, 89, 90,
	91, 0, 0, 92, 93, 0, 0, 0, 0, 0,
	0, 94, 95, 96, 97, 204, 98, 205, 206, 0,
	99, 0, 100, 0, 0, 0, 101, 102, 0, 103,
	0, 0, 0, 207, 104, 105, 208, 209, 0, 0,
	0, 106, 107, 210, 0, 108, 0, 109, 0, 0,
	0, 0, 110, 211, 0, 212, 0, 111, 112, 113,
	213, 214, 0, 0, 116, 0, 114, 0, 0, 115,
	215, 216, 217, 218, 0, 219, 0, 0, 117, 0,
	118, 119, 0, 0, 220, 0, 120, 0, 0, 381,
	0, 0, 122, 0, 123, 124, 125, 126, 389, 0,
	128, 129, 132, 130, 0, 131, 0, 221, 133, 222,
	134, 135, 0, 0, 0, 0, 0, 136, 223, 0,
	137, 0, 224, 138, 139, 140, 141, 0, 225, 142,
	226, 143, 0, 144, 145, 146, 227, 147, 148, 0,
	150, 151, 149, 152, 0, 153, 0, 154, 155, 383,
	156, 0, 157, 158, 159, 0, 229, 160, 382, 0,
	162, 163, 0, 164, 230, 231, 165, 0, 171, 166,
	167, 168, 170, 232, 169, 233, 0, 172, 0, 173,
	174, 0, 388, 235, 236, 0, 0, 384, 237, 238,
	0, 176, 177, 178, 179, 0, 0, 180, 181, 182,
	0, 0, 183, 184, 185, 239, 240, 74, 0, 186,
	0, 0, 0, 0, 187, 188, 189, 190, 0, 0,
	0, 0, 0, 77, 78, 0, 79, 0, 0, 0,
	0, 191, 0, 0, 0, 0, 80, 81, 192, 193,
	194, 195, 82, 196, 197, 0, 83, 198, 199, 84,
	0, 0, 200, 201, 202, 0, 203, 0, 0, 0,
	85, 86, 87, 0, 88, 0, 89, 90, 91, 0,
	0, 92, 93, 0, 0, 0, 0, 0, 0, 94,
	95, 96, 97, 204, 98, 205, 206, 0, 99, 0,
	100, 0, 0, 0, 101, 102, 0, 103, 0, 0,
	0, 207, 104, 105, 208, 209, 0, 0, 0, 106,
	107, 210, 0, 108, 0, 109, 0, 0, 0, 0,
	110, 211, 0, 212, 0, 111, 112, 113, 213, 214,
	0, 0, 116, 0, 114, 0, 0, 115, 215, 216,
	217, 218, 0, 219, 0, 0, 117, 0, 118, 119,
	0, 0, 220, 0, 120, 0, 0, 121, 0, 0,
	122, 0, 123, 124, 125, 126, 127, 0, 128, 129,
	132, 130, 0, 131, 0, 221, 133, 222, 134, 135,
	0, 0, 0, 0, 0, 136, 223, 0, 137, 0,
	224, 138, 139, 0, 141, 0, 225, 142, 226, 143,
	0, 144, 0, 146, 227, 147, 148, 0, 150, 151,
	149, 152, 0, 153, 0, 154, 155, 228, 0, 0,
	157, 158, 159, 0, 229, 160, 161, 0, 162, 163,
	0, 164, 230, 231, 165, 0, 171, 166, 167, 168,
	170, 232, 169, 233, 0, 172, 0, 173, 174, 0,
	234, 235, 236, 0, 0, 175, 237, 238, 0, 176,
	177, 178, 179, 0, 0, 180, 181, 182, 0, 0,
	183, 184, 185, 239, 240, 0, 0, 186, 0, 0,
	0, 0, 187, 188, 189, 190, 857, 858, 0, 877,
	878, 879, 887, 888, 889, 0, 0, 0, 0, 0,
	0, 0, 880, 0, 0, 0, 0, 0, 0, 860,
	0, 891, 857, 858, 0, 877, 878, 879, 887, 888,
	889, 0, 0, 0, 0, 0, 0, 0, 880, 0,
	859, 0, 0, 0, 0, 860, 874, 891, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 859, 0, 0, 0,
	0, 0, 874, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 865, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 884, 892, 0, 0, 0, 0, 0,
	0, 865, 0, 0, 0, 0, 0, 0, 890, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 882, 884,
	892, 0, 0, 0, 875, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 890, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 882, 0, 881, 0, 0, 0,
	875, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 881, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 876, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 885, 0, 857, 858, 0, 877, 878,
	879, 887, 888, 889, 0, 0, 0, 0, 876, 0,
	0, 880, 0, 0, 0, 0, 0, 0, 860, 885,
	891, 857, 858, 0, 877, 878, 879, 887, 888, 889,
	0, 0, 0, 0, 0, 0, 0, 880, 0, 859,
	0, 0, 0, 0, 860, 874, 891, 0, 0, 883,
	0, 0, 871, 872, 873, 0, 870, 867, 868, 869,
	861, 862, 863, 864, 866, 859, 886, 0, 0, 0,
	0, 874, 0, 1381, 0, 883, 0, 0, 871, 872,
	873, 0, 870, 867, 868, 869, 861, 862, 863, 864,
	866, 0, 886, 0, 865, 0, 1834, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 884, 892, 0, 0, 0, 0, 0, 0,
	865, 0, 0, 0, 0, 0, 0, 890, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 882, 884, 892,
	0, 0, 0, 875, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 890, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 882, 0, 881, 0, 0, 0, 875,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 881, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 876, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 885, 0, 857, 858, 0, 877, 878, 879,
	887, 888, 889, 0, 0, 0, 0, 876, 0, 0,
	880, 0, 0, 0, 0, 0, 0, 860, 885, 891,
	857, 858, 0, 877, 878, 879, 887, 888, 889, 0,
	0, 0, 0, 0, 0, 0, 880, 0, 859, 0,
	0, 0, 0, 860, 874, 891, 0, 0, 883, 0,
	0, 871, 872, 873, 0, 870, 867, 868, 869, 861,
	862, 863, 864, 866, 859, 886, 0, 0, 0, 1832,
	874, 0, 0, 0, 883, 0, 0, 871, 872, 873,
	0, 870, 867, 868, 869, 861, 862, 863, 864, 866,
	0, 886, 0, 865, 0, 1813, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 884, 892, 0, 0, 0, 0, 0, 0, 865,
	0, 0, 0, 0, 0, 0, 890, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 882, 884, 892, 0,
	0, 0, 875, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 890, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 882, 0, 881, 0, 0, 0, 875, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	881, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	876, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 885, 0, 857, 858, 0, 877, 878, 879, 887,
	888, 889, 0, 0, 0, 0, 876, 0, 0, 880,
	0, 0, 0, 0, 0, 0, 860, 885, 891, 857,
	858, 0, 877, 878, 879, 887, 888, 889, 0, 0,
	0, 0, 0, 0, 0, 880, 0, 859, 0, 0,
	0, 0, 860, 874, 891, 0, 0, 883, 0, 0,
	871, 872, 873, 0, 870, 867, 868, 869, 861, 862,
	863, 864, 866, 859, 886, 0, 0, 0, 1788, 874,
	0, 0, 0, 883, 0, 0, 871, 872, 873, 0,
	870, 867, 868, 869, 861, 862, 863, 864, 866, 0,
	886, 0, 865, 0, 1783, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	884, 892, 0, 0, 0, 0, 0, 0, 865, 0,
	0, 0, 0, 0, 0, 890, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 882, 884, 892, 0, 0,
	0, 875, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 890, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 882, 0, 881, 0, 0, 0, 875, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 881,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 876,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	885, 0, 857, 858, 0, 877, 878, 879, 887, 888,
	889, 0, 0, 0, 0, 876, 0, 0, 880, 0,
	0, 0, 0, 0, 0, 860, 885, 891, 857, 858,
	0, 877, 878, 879, 887, 888, 889, 0, 0, 0,
	0, 0, 0, 0, 880, 0, 859, 0, 0, 0,
	0, 860, 874, 891, 0, 0, 883, 0, 0, 871,
	872, 873, 0, 870, 867, 868, 869, 861, 862, 863,
	864, 866, 859, 886, 0, 0, 0, 1779, 874, 0,
	0, 0, 883, 0, 0, 871, 872, 873, 0, 870,
	867, 868, 869, 861, 862, 863, 864, 866, 0, 886,
	0, 865, 0, 1714, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 884,
	892, 0, 0, 0, 0, 0, 0, 865, 0, 0,
	0, 0, 0, 0, 890, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 882, 884, 892, 0, 0, 0,
	875, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	890, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	882, 0, 881, 0, 0, 0, 875, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 881, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 876, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 885,
	0, 857, 858, 0, 877, 878, 879, 887, 888, 889,
	0, 0, 0, 0, 876, 0, 0, 880, 0, 0,
	0, 0, 0, 0, 860, 885, 891, 857, 858, 0,
	877, 878, 879, 887, 888, 889, 0, 0, 0, 0,
	0, 0, 0, 880, 0, 859, 0, 0, 0, 0,
	860, 874, 891, 0, 0, 883, 0, 0, 871, 872,
	873, 0, 870, 867, 868, 869, 861, 862, 863, 864,
	866, 859, 886, 0, 0, 0, 1713, 874, 0, 0,
	0, 883, 0, 0, 871, 872, 873, 0, 870, 867,
	868, 869, 861, 862, 863, 864, 866, 0, 886, 0,
	865, 0, 1621, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 884, 892,
	0, 0, 0, 0, 0, 0, 865, 0, 0, 0,
	0, 0, 0, 890, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 882, 884, 892, 0, 0, 0, 875,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 890,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 882,
	0, 881, 0, 0, 0, 875, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 881, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 876, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 885, 0,
	857, 858, 0, 877, 878, 879, 887, 888, 889, 0,
	0, 0, 0, 876, 0, 0, 880, 0, 0, 0,
	0, 0, 0, 860, 885, 891, 857, 858, 0, 877,
	878, 879, 887, 888, 889, 0, 0, 0, 0, 0,
	0, 0, 880, 0, 859, 0, 0, 0, 0, 860,
	874, 891, 0, 0, 883, 0, 0, 871, 872, 873,
	0, 870, 867, 868, 869, 861, 862, 863, 864, 866,
	859, 886, 0, 0, 0, 1555, 874, 0, 0, 0,
	883, 0, 0, 871, 872, 873, 0, 870, 867, 868,
	869, 861, 862, 863, 864, 866, 0, 886, 0, 865,
	0, 1539, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 884, 892, 0,
	0, 0, 0, 0, 0, 865, 0, 0, 0, 0,
	0, 0, 890, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 882, 884, 892, 0, 0, 0, 875, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 890, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 882, 0,
	881, 0, 0, 0, 875, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 881, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 876, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 885, 0, 0,
	0, 857, 858, 0, 877, 878, 879, 887, 888, 889,
	0, 0, 876, 0, 0, 0, 0, 880, 0, 0,
	0, 0, 0, 885, 860, 0, 891, 857, 858, 0,
	877, 878, 879, 887, 888, 889, 0, 0, 0, 0,
	0, 0, 0, 880, 0, 859, 0, 0, 0, 0,
	860, 874, 891, 883, 0, 0, 871, 872, 873, 0,
	870, 867, 868, 869, 861, 862, 863, 864, 866, 0,
	886, 859, 0, 0, 1151, 0, 0, 874, 0, 883,
	0, 0, 871, 872, 873, 0, 870, 867, 868, 869,
	861, 862, 863, 864, 866, 0, 886, 0, 1469, 0,
	865, 1902, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 884, 892,
	0, 0, 0, 0, 0, 0, 865, 0, 1421, 0,
	0, 1420, 0, 890, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 882, 884, 892, 0, 0, 0, 875,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 890,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 882,
	0, 881, 0, 0, 0, 875, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1901, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 881, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 876, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 885, 0,
	857, 858, 0, 877, 878, 879, 887, 888, 889, 0,
	0, 0, 0, 876, 0, 0, 880, 0, 0, 0,
	894, 1084, 0, 860, 885, 891, 857, 858, 0, 877,
	878, 879, 887, 888, 889, 0, 0, 0, 0, 0,
	0, 0, 880, 0, 859, 0, 893, 0, 0, 860,
	874, 891, 0, 0, 883, 0, 0, 871, 872, 873,
	0, 870, 867, 868, 869, 861, 862, 863, 864, 866,
	859, 886, 0, 0, 0, 0, 874, 0, 1085, 0,
	883, 0, 0, 871, 872, 873, 0, 870, 867, 868,
	869, 861, 862, 863, 864, 866, 0, 886, 0, 865,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 884, 892, 0,
	0, 0, 0, 0, 0, 865, 0, 0, 0, 0,
	0, 0, 890, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 882, 884, 892, 0, 0, 0, 875, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 890, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 882, 0,
	881, 0, 0, 0, 875, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 881, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 876, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 885, 0, 857,
	858, 0, 877, 878, 879, 887, 888, 889, 0, 0,
	0, 0, 876, 0, 0, 880, 0, 0, 0, 0,
	0, 0, 860, 885, 891, 857, 858, 0, 877, 878,
	879, 887, 888, 889, 0, 0, 0, 0, 0, 0,
	0, 880, 0, 859, 0, 0, 0, 0, 860, 874,
	891, 0, 0, 883, 0, 0, 871, 872, 873, 0,
	870, 867, 868, 869, 861, 862, 863, 864, 866, 859,
	886, 0, 0, 0, 0, 874, 0, 0, 0, 883,
	0, 0, 871, 872, 873, 0, 870, 867, 868, 869,
	861, 862, 863, 864, 866, 0, 886, 0, 865, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 884, 892, 0, 0,
	0, 0, 0, 0, 865, 0, 0, 0, 0, 0,
	0, 890, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 882, 884, 892, 0, 0, 0, 875, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 890, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 882, 0, 881,
	432, 0, 0, 875, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 881, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 876, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 885, 0, 857, 858,
	0, 877, 878, 879, 887, 888, 889, 0, 0, 0,
	0, 876, 0, 0, 880, 0, 0, 0, 0, 0,
	0, 860, 885, 891, 857, 858, 0, 877, 878, 879,
	887, 888, 889, 0, 0, 0, 0, 0, 0, 0,
	880, 1549, 859, 0, 1422, 0, 0, 860, 874, 891,
	0, 0, 883, 0, 0, 871, 872, 873, 0, 870,
	867, 868, 869, 861, 862, 863, 864, 866, 859, 886,
	0, 0, 0, 0, 874, 0, 0, 0, 883, 0,
	0, 871, 872, 873, 0, 870, 867, 868, 869, 861,
	862, 863, 864, 866, 0, 886, 0, 865, 0, 0,
	0, 0, 1427, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 884, 892, 0, 0, 0,
	0, 0, 0, 865, 0, 0, 0, 0, 0, 0,
	890, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	882, 884, 892, 0, 0, 0, 875, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 890, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 882, 0, 881, 0,
	0, 0, 875, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 881, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 876, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 885, 0, 857, 858, 0,
	877, 878, 879, 887, 888, 889, 0, 0, 0, 0,
	876, 0, 0, 880, 0, 0, 0, 0, 0, 0,
	860, 885, 891, 857, 858, 0, 877, 878, 879, 887,
	888, 889, 0, 0, 0, 0, 0, 0, 0, 880,
	0, 859, 0, 1380, 0, 0, 860, 874, 891, 0,
	0, 883, 0, 0, 871, 872, 873, 0, 870, 867,
	868, 869, 861, 862, 863, 864, 866, 859, 886, 0,
	0, 0, 0, 874, 0, 0, 0, 883, 0, 0,
	871, 872, 873, 0, 870, 867, 868, 869, 861, 862,
	863, 864, 866, 0, 886, 0, 865, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 884, 892, 0, 0, 0, 0,
	0, 0, 865, 0, 0, 0, 0, 0, 0, 890,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 882,
	884, 892, 0, 0, 0, 875, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 890, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 882, 0, 881, 0, 0,
	0, 875, 0, 0, 0, 0, 0, 0, 0, 1387,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 881, 1389, 1390, 0, 1407, 1408, 1409,
	0, 0, 0, 876, 0, 0, 0, 0, 0, 0,
	1534, 0, 0, 0, 885, 0, 857, 858, 0, 877,
	878, 879, 887, 888, 889, 0, 0, 0, 0, 876,
	0, 0, 880, 0, 0, 0, 0, 0, 0, 860,
	885, 891, 857, 858, 1404, 877, 878, 879, 887, 888,
	889, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	859, 0, 0, 0, 0, 860, 874, 891, 0, 0,
	883, 0, 0, 871, 872, 873, 0, 870, 867, 868,
	869, 861, 862, 863, 864, 866, 859, 886, 0, 0,
	0, 0, 874, 1395, 0, 0, 883, 0, 0, 871,
	872, 873, 0, 870, 867, 868, 869, 861, 862, 863,
	864, 866, 0, 886, 0, 865, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1410, 0, 0, 0,
	0, 0, 0, 884, 892, 0, 0, 0, 0, 0,
	0, 865, 1405, 0, 0, 0, 0, 0, 890, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 882, 884,
	892, 0, 0, 0, 875, 0, 0, 27, 0, 0,
	0, 0, 0, 0, 890, 0, 0, 0, 50, 0,
	0, 0, 0, 0, 882, 0, 881, 0, 0, 0,
	875, 857, 858, 0, 877, 878, 879, 887, 888, 889,
	1406, 0, 52, 0, 0, 0, 0, 0, 28, 0,
	57, 0, 0, 0, 860, 0, 891, 0, 0, 0,
	0, 0, 876, 0, 0, 0, 0, 0, 0, 41,
	0, 0, 0, 885, 0, 859, 36, 0, 0, 53,
	0, 874, 0, 40, 37, 0, 0, 0, 876, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 885,
	42, 0, 0, 0, 0, 0, 38, 0, 0, 0,
	1401, 1402, 1403, 0, 1400, 1397, 1398, 1399, 1391, 1392,
	1393, 1394, 1396, 0, 0, 0, 0, 0, 0, 883,
	865, 0, 871, 872, 873, 0, 870, 867, 868, 869,
	861, 862, 863, 864, 866, 0, 886, 0, 884, 892,
	0, 0, 0, 0, 0, 883, 0, 0, 871, 872,
	873, 0, 870, 867, 868, 869, 861, 862, 863, 864,
	866, 0, 886, 882, 0, 0, 0, 0, 0, 875,
	39, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 55, 0, 0, 43, 0, 54, 0, 0, 0,
	0, 44, 1389, 1390, 64, 1407, 1408, 1409, 0, 47,
	49, 0, 0, 0, 0, 0, 0, 0, 1533, 51,
	0, 1389, 1390, 0, 1407, 1408, 1409, 66, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 876, 1389, 1390,
	56, 1407, 1408, 1409, 0, 0, 0, 0, 885, 0,
	0, 0, 1404, 0, 67, 0, 0, 0, 0, 0,
	0, 0, 62, 0, 0, 0, 0, 0, 63, 0,
	0, 1404, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 61, 1404, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1395, 0, 0, 883, 0, 0, 871, 872, 873,
	0, 870, 867, 868, 869, 861, 862, 863, 864, 866,
	1395, 886, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1410, 0, 0, 1395, 0, 1411,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1405, 0, 0, 1410, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1405,
	1410, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1405, 0, 0, 0,
	0, 0, 735, 729, 752, 723, 743, 742, 0, 0,
	725, 724, 0, 0, 0, 754, 753, 0, 1406, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1406, 0, 0,
	0, 0, 0, 0, 0, 0, 748, 0, 740, 739,
	0, 0, 0, 0, 1406, 0, 0, 738, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 737, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1401, 1402,
	1403, 0, 1400, 1397, 1398, 1399, 1391, 1392, 1393, 1394,
	1396, 730, 731, 732, 733, 0, 751, 1401, 1402, 1403,
	0, 1400, 1397, 1398, 1399, 1391, 1392, 1393, 1394, 1396,
	0, 0, 0, 0, 1401, 1402, 1403, 0, 1400, 1397,
	1398, 1399, 1391, 1392, 1393, 1394, 1396, 0, 0, 0,
	741, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 736, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 727, 0, 0,
	0, 0, 0, 0, 0, 734, 728, 0, 0, 0,
	0, 0, 0, 0, 756, 0, 0, 0, 0, 0,
	0, 726, 0, 0, 749, 750, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 755,
}
var sqlPact = [...]int{

	24634, -1000, 36, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 776, 16769, -1000,
	-1000, -1000, -1000, -1000, -1000, 601, 608, 130, 4589, 16769,
	16769, 16501, 986, 986, 18109, -1000, -1000, 21325, -1000, 1999,
	433, 443, 433, 433, 442, 18109, 528, 623, 123, -1000,
	607, 9, 21057, 16769, 1226, 32, 15429, 298, 24634, 16233,
	20789, 16769, 296, 39, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1076, 953, 950, 15429, 20521, 20253, 19985, 19717, -1000,
	10564, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 526,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	303, 302, -1000, 15965, -1000, 832, -1000, 31, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 825, -1000, 16769, -1000,
	-1000, 19449, 19181, 301, 802, -1000, -1000, 507, 352, 1256,
	-1000, 44, -1000, -1000, 1074, -1000, 818, 1071, 1051, 1049,
	1047, 1044, 1043, 350, 808, -1000, 518, 802, -1000, 802,
	-1000, -1000, -1000, 487, 18109, -1000, 15429, -1000, 18913, 16769,
	16769, 970, 18645, -1000, 607, -1000, -1000, -1000, 827, 1225,
	1225, 1225, 1242, 131, 128, 123, 16, 16769, -1000, 299,
	16, 7199, 7199, -1000, -1000, 298, -1000, 315, 13548, -1000,
	7761, -1000, 644, 1143, 384, 657, 1140, -118, 675, 547,
	12734, 39, -1000, -1000, -1000, 9169, 4310, 15429, 16769, 16769,
	565, 18377, -1000, 1139, 111, 1136, -1000, 106, 1135, -1000,
	106, 1134, 18, -1000, -1000, -1000, -1000, -1000, -1000, 298,
	15697, 1277, 25006, -1000, 9169, -1000, -1000, 13819, 826, 13819,
	-1000, -1000, 1276, -1000, 9169, -1000, 30, 29, 904, 914,
	11113, 10845, 1185, 719, -1000, -1000, -1000, 40, 4589, 16769,
	1089, 13819, 16769, 16769, 16769, 16769, 16769, 16769, -1000, 902,
	-1000, 16769, -1000, 27, 25, -1000, 18109, -1000, 118, -1000,
	297, 875, 365, 119, 17841, 1150, 870, -1000, 827, -1000,
	800, 901, 8326, 9169, 123, -1000, -1000, 123, 123, 9169,
	-1000, -1000, 16769, 16, 1274, 16769, 203, -1000, 23646, -1000,
	-1000, 9169, 9169, 9169, 9169, 9169, 737, -1000, -1000, -1000,
	5450, -1000, -1000, 39, 295, 205, -1000, -1000, 287, 39,
	-1000, -1000, -1000, -1000, 285, 1371, 426, -1000, -1000, -1000,
	9169, 362, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1088, 279, 278, -1000, -1000, -1000, -1000, 277, 275,
	272, 271, 270, 268, 267, 264, 262, 259, 258, 256,
	254, 252, 251, 690, -1000, 373, -1000, -1000, 373, 373,
	-1000, 244, 244, 249, -1000, -1000, -1000, -1000, 244, -1000,
	-1000, -1000, 346, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	250, 203, -1000, -1000, -1000, 16769, 6, -1000, 24496, -1000,
	-38, 714, -1000, 14893, 1214, 1212, 1201, 15429, 1254, 1253,
	484, 16769, 16769, 480, -1000, 1041, 4, -1000, -1000, 2981,
	-1000, -1000, 368, 78, 1272, 78, 13006, -1000, 16769, 16769,
	-1000, 16769, -1000, -1000, 16769, -1000, 16769, 16769, -1000, 16769,
	127, 14357, 652, 1133, 9, 2, -1000, 1280, -1000, -1000,
	-1000, -1000, 99, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 249, 690, 244,
	244, 244, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 346,
	-1000, -1000, 373, 373, 373, -1000, -1000, 0, 24496, 475,
	-17, 14088, 16769, -1000, 28, -1000, -1000, 1040, 432, -2,
	685, 943, 669, -1000, -1000, -1000, -1000, 8, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1334, -1000,
	-1000, -1000, -1000, 1359, 8, -1000, -1000, -1000, -1000, -1000,
	1369, -1000, -1000, -1000, 4589, -1000, -1000, -1000, 16769, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 685, 943,
	-1000, -1000, 15429, 14625, 1266, 1132, 707, -1000, 1264, 16769,
	817, 866, -1000, -1000, 336, 1131, -1000, -1000, -1000, -1000,
	24496, -1000, 24496, 628, 957, -1000, 957, -7, -1000, 23620,
	-1000, 243, -8, -1000, 368, 7199, 12463, 25006, 25006, 16769,
	509, 9169, 9169, 9169, 9169, 9169, 9169, 9169, 9169, 9169,
	9169, 9169, 9169, 9169, 9169, 9169, 9169, 9169, 9169, 9169,
	9169, 9169, 9169, 860, 9169, 472, 9169, 9169, 9169, 9169,
	1033, 749, 226, 4589, -1000, 597, 597, 597, 24522, 24522,
	189, 26, 23180, -15, 39, -1000, -1000, 6915, 6614, 39,
	4868, -1000, 587, 1348, 371, 24496, 1095, 1015, 241, 125,
	124, 9169, 9169, 9450, 9450, 9169, 9731, 9169, 9169, 5731,
	9169, 9169, 9169, 9169, 9169, 9169, -1000, 240, -1000, -1000,
	-1000, -1000, 1347, -1000, -1000, 1345, -1000, 508, 498, 1344,
	368, 120, 7761, -1000, 652, 16769, 16769, 16769, -1000, -1000,
	865, 17573, 858, 25006, 16769, -1000, 239, 238, 929, 924,
	16769, 16769, 17305, 17037, 16769, 639, 233, 231, 16769, 658,
	-1000, 16769, 546, 1036, 16769, -1000, 9169, 593, 9169, 678,
	-1000, 11920, 379, 16769, 637, 129, -1000, -1000, -1000, 335,
	16769, -1000, -1000, -1000, 111, -1000, 106, 106, -1000, -1000,
	15429, -1000, -1000, -1000, -1000, -1000, -1000, 25006, 309, 308,
	-1000, 1342, 471, -1000, 468, 465, 464, -1000, 228, -1000,
	9169, 16769, 14088, -17, -21, -1000, -1000, 16769, 943, -1000,
	-1000, -1000, -1000, 617, -1000, 682, -1000, 11381, -1000, -1000,
	-1000, 587, -1000, -39, -1000, -1000, -1000, -1000, 108, -13,
	-31, 25006, -1000, -1000, -1000, -1000, -1000, 16769, 286, 16769,
	9, 16769, -1000, 1368, 9, 16769, 1130, 1367, 16769, -1000,
	-1000, -1000, 9169, -1000, -1000, -1000, 9, 16769, -1000, 1007,
	-1000, -93, 1125, -120, 15161, -1000, 11649, -1000, -1000, -1000,
	349, 318, 318, 539, 539, 539, 539, 162, 162, 188,
	922, 2301, 2301, 2301, 3157, 207, 207, 2301, 2301, 2301,
	24522, 3089, 3675, 9169, 9169, 463, 745, 226, 3675, 9169,
	1316, 3675, 3675, 3675, -1000, 995, -1000, -1000, -1000, 1035,
	218, 9731, 9731, -1000, -1000, -1000, 5450, -1000, -1000, 213,
	9169, -1000, 9169, -18, -63, -1000, -1000, -19, -1000, -1000,
	-6, 9169, 9169, 9169, 105, -1000, 103, 566, -1000, 9169,
	743, 196, 194, 9169, -1000, -1000, 24303, 21866, 102, 1034,
	-138, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 97, 95,
	24277, -138, 94, 24861, -1000, 9731, 9731, 9731, 5450, 193,
	92, 23427, -138, 24084, 8042, 8042, 8042, 91, 24058, 9169,
	-138, 3723, 3530, 3504, -24, -29, -30, 1341, -34, 90,
	347, 345, 88, 1007, -1000, -1000, -1000, -1000, 459, 456,
	1129, -1000, 857, -1000, 383, -1000, 641, 9169, 16769, 192,
	191, 683, -1000, 1128, 799, 1127, 799, -1000, -38, 696,
	9169, 9169, -1000, 453, -1000, -1000, 537, -1000, 23206, -1000,
	7199, 24496, -1000, 598, 1205, -40, -1000, -1000, 7199, 368,
	13006, 12463, 7761, -41, -1000, -1000, -1000, 652, -1000, 458,
	1336, 87, 868, 780, 634, 580, 1321, 24496, -39, -1000,
	-39, -1000, -1000, -1000, -1000, -1000, -1000, 16769, 974, -1000,
	14625, 187, 16769, 186, -1000, 174, -1000, -1000, 173, 16769,
	-1000, 1150, -1000, 86, -1000, 996, 1236, -1000, 12463, 841,
	937, 933, 12463, 1109, 759, 759, 759, -1000, 15161, 4020,
	-1000, -1000, 16769, 163, 12191, 85, 1125, 9169, 3675, 3675,
	9169, 9731, 9731, -1000, 3675, -1000, -1000, -1000, -1000, 1032,
	161, 9169, 25006, 24842, 24474, -42, 6313, -51, 22987, -1000,
	-1000, 205, -1000, 84, 7480, -1000, 23839, -4, -4, -1000,
	1364, 1052, -1000, 9169, 23865, -1000, 13277, 369, 769, 22961,
	25006, 25006, -1000, 9169, -1000, -1000, 1030, 9169, -1000, 25006,
	25006, 9731, 9731, 9731, 9731, 9731, 9731, 9731, 9731, 9731,
	9731, 9731, 9731, 9731, 9731, 9731, 9731, 9731, 9731, 9731,
	939, 9731, 1306, 1306, 1306, -70, 6012, -1000, 1082, 1030,
	9169, 9169, 25006, 83, 82, 81, -1000, 9169, -138, 9169,
	9169, 9169, -1000, -1000, -1000, 73, -1000, 1314, -1000, -1000,
	-1000, -1000, 996, 16769, 16769, 16769, 1112, -1000, 1522, -1000,
	22768, -49, 16769, 16769, -1000, 956, 966, 415, 16769, -1000,
	16769, -1000, 16769, 16769, 16769, -50, -54, 16769, -1000, -1000,
	-92, 7199, 206, 9, -92, 593, -1000, -81, -1000, 334,
	-1000, 171, 132, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 72, -1000, -1000, 987, -1000, 10293, 160, 16769, 14625,
	1263, 10293, 813, -1000, -1000, 351, 9169, 9169, 1125, 530,
	12463, 12463, 819, 923, 12463, -1000, -1000, -1000, -1000, -1000,
	-1000, 978, 150, 16769, 15161, 504, 3675, 3623, 2606, 9169,
	25006, 24671, -66, 9169, 9169, -1000, -71, -1000, 9169, -1000,
	-1000, 1362, 9169, 71, 70, 67, -1000, -1000, 24496, 9169,
	-1000, -1000, 21593, 9169, 65, -1000, 63, 59, 24496, 1082,
	24496, -1000, -1000, 470, 470, 1306, 1306, 1306, 1306, 768,
	768, 900, 2347, 1102, 1102, 1102, 1944, 342, 342, 1102,
	1102, 1102, 1029, 926, 147, 24878, 9169, -72, -1000, -1000,
	-1000, 24496, 24496, 57, -1000, -1000, -1000, -138, 3285, 22742,
	22549, -1000, 56, 351, -1000, -1000, -1000, 16769, -1000, 16769,
	-1000, 16769, 16769, 1014, 853, -1000, -1000, 911, 145, 9731,
	16769, -1000, 686, -73, -79, 849, -1000, 846, 9169, -1000,
	25006, 799, 799, -1000, 448, 446, -1000, -1000, -1000, -92,
	1155, 16769, 1193, -1000, -1000, 144, -1000, -1000, -1000, 729,
	-96, -1000, 170, 1213, 9169, -1000, -1000, 143, 10293, -97,
	55, 9, -98, 16769, -1000, 16769, 24496, -138, 492, -1000,
	819, -1000, 142, 9169, 12463, -1000, -156, -1000, 331, -1000,
	16769, -102, -1000, 9169, 9169, 24671, -103, -1000, 3675, 3675,
	-1000, 22523, -1000, 23839, -1000, -1000, -1000, 24496, 709, -1000,
	22330, -1000, -1000, -1000, -1000, 9731, 1028, 141, 25006, 22304,
	-1000, -1000, 9169, -1000, -1000, -1000, -1000, -1000, 732, -1000,
	-1000, 16769, 856, -1000, -1000, 9169, 24878, 139, 974, 138,
	-1000, -1000, -1000, 670, -1000, -1000, 24496, 1223, -1000, -1000,
	16769, 16769, 501, -104, 16769, -1000, -1000, 5169, 16769, 686,
	10293, 1220, 39, 16769, 1220, 22111, 4868, -110, -1000, 974,
	-1000, 686, 137, -94, -1000, 1262, 1308, -1000, 16769, 24496,
	-1000, 978, -1000, 4589, -121, -1000, 3675, 3675, -1000, -1000,
	54, 769, 1235, -1000, 2247, 9731, 25006, -122, -1000, 22085,
	-1000, -1000, 1111, 21892, 888, 16769, -1000, 16769, 16769, 386,
	16769, -1000, -1000, 564, -1000, 368, -1000, 136, 974, -1000,
	-1000, -1000, -1000, 1213, -6, 686, -1000, 974, 10293, 16769,
	134, -1000, -123, -1000, -1000, -1000, -1000, 621, 9169, 2247,
	-128, -1000, -1000, 1101, -1000, 788, 725, 53, -133, 119,
	-1000, 9169, -1000, 13006, -1000, 16769, -1000, 1220, 51, 974,
	-1000, -137, -1000, -1000, -1000, 50, 8888, 8888, -138, -1000,
	16769, -1000, 792, 790, 574, -1000, -1000, -1000, -1000, -1000,
	888, 24496, -129, -139, -1000, -1000, -1000, 686, -1000, -1000,
	-1000, 10012, 795, 586, 23401, -1000, -1000, -1000, 1165, -1000,
	406, 885, 885, 788, -1000, 773, 974, 1285, -1000, -1000,
	-1000, -1000, -1000, -1000, 1292, -1000, -1000, 938, -1000, -1000,
	-1000, -1000, -1000, -1000, 8607, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1590, 1589, 1262, 122, 1585, 121, 1582, 1578, 1577,
	1575, 1573, 1570, 102, 120, 111, 117, 1569, 1568, 82,
	1567, 1566, 1565, 100, 1563, 1557, 1556, 97, 1555, 1554,
	1552, 1551, 1550, 1545, 99, 44, 161, 2332, 132, 1544,
	1540, 1537, 11, 94, 69, 1536, 52, 1529, 1519, 59,
	1514, 89, 108, 1111, 36, 1513, 1510, 133, 46, 22,
	1491, 90, 143, 116, 129, 1509, 1508, 1507, 47, 1506,
	5, 1505, 1504, 16, 54, 18, 1503, 31, 17, 1502,
	1501, 125, 1498, 60, 91, 109, 33, 119, 13, 1497,
	92, 10, 66, 1496, 30, 1495, 32, 76, 128, 1492,
	51, 145, 62, 26, 58, 98, 1488, 1487, 1486, 77,
	1485, 85, 79, 1484, 1483, 74, 1482, 127, 130, 1481,
	1479, 139, 1477, 1476, 1474, 156, 1473, 1472, 146, 1467,
	6, 43, 61, 3, 107, 105, 25, 1466, 19, 1462,
	1812, 633, 821, 1460, 49, 38, 75, 35, 53, 15,
	1458, 1456, 101, 1455, 1452, 1451, 1450, 1449, 78, 1443,
	65, 134, 34, 55, 88, 28, 27, 83, 96, 144,
	103, 1442, 1440, 113, 1437, 57, 1435, 1434, 1425, 110,
	1432, 1431, 1429, 1280, 1099, 1042, 272, 1428, 1427, 742,
	728, 1426, 1424, 93, 1423, 1422, 141, 131, 50, 1421,
	114, 1420, 81, 1419, 0, 84, 73, 1418, 118, 68,
	1417, 1416, 1413, 1412, 24, 2, 12, 7, 8, 4,
	21, 20, 1411, 1410, 126, 86, 1409, 1408, 148, 1407,
	1406, 1405, 37, 1404, 23, 1402, 14, 1401, 1391, 9,
	1, 142, 1390, 95, 1383, 1281, 1381, 136, 1379, 1378,
	1291, 80,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 4, 4,
	44, 44, 43, 43, 43, 43, 43, 43, 43, 43,
	43, 43, 43, 43, 43, 43, 43, 41, 41, 46,
	46, 46, 48, 48, 45, 45, 40, 40, 5, 5,
	5, 6, 6, 6, 6, 6, 6, 13, 14, 14,
	14, 14, 14, 14, 14, 14, 87, 87, 86, 86,
	89, 89, 15, 15, 16, 16, 16, 16, 16, 16,
	16, 16, 174, 174, 173, 18, 150, 150, 19, 19,
	19, 19, 20, 110, 110, 21, 21, 21, 21, 22,
	26, 241, 241, 241, 245, 245, 246, 246, 247, 247,
	247, 247, 247, 247, 247, 243, 243, 29, 29, 29,
	29, 29, 129, 125, 125, 127, 127, 127, 127, 52,
	124, 124, 124, 124, 126, 126, 126, 126, 197, 196,
	196, 202, 202, 202, 65, 65, 65, 65, 65, 66,
	66, 66, 195, 195, 195, 195, 203, 203, 203, 203,
	203, 203, 67, 67, 67, 201, 201, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 17, 242, 242, 244, 244, 31,
	31, 9, 9, 10, 10, 68, 68, 69, 69, 132,
	132, 132, 132, 70, 70, 47, 47, 47, 131, 212,
	212, 213, 213, 213, 213, 213, 213, 214, 214, 214,
	214, 214, 214, 214, 210, 210, 211, 208, 208, 209,
	209, 209, 209, 248, 248, 130, 130, 73, 73, 217,
	217, 217, 217, 215, 215, 215, 215, 215, 218, 216,
	219, 219, 219, 219, 219, 161, 161, 161, 33, 11,
	50, 50, 12, 8, 8, 114, 114, 77, 77, 165,
	165, 165, 59, 59, 42, 42, 42, 25, 25, 25,
	25, 25, 25, 25, 25, 25, 115, 115, 116, 116,
	24, 28, 32, 32, 32, 32, 32, 250, 250, 56,
	56, 56, 56, 57, 57, 128, 128, 128, 128, 128,
	51, 7, 7, 49, 49, 23, 23, 23, 23, 23,
	62, 62, 121, 121, 121, 123, 123, 122, 122, 122,
	100, 100, 34, 82, 82, 91, 91, 92, 92, 171,
	93, 93, 27, 27, 37, 37, 35, 35, 35, 35,
	35, 35, 36, 36, 38, 38, 38, 38, 38, 38,
	38, 225, 225, 225, 228, 228, 224, 226, 226, 227,
	227, 249, 249, 101, 101, 101, 72, 71, 71, 75,
	75, 74, 76, 76, 164, 98, 98, 98, 98, 117,
	118, 118, 119, 119, 120, 120, 97, 97, 147, 147,
	39, 39, 81, 81, 83, 83, 138, 138, 139, 139,
	137, 137, 137, 166, 166, 166, 166, 167, 167, 167,
	167, 167, 167, 162, 162, 162, 162, 163, 163, 172,
	172, 104, 104, 104, 104, 102, 102, 103, 103, 168,
	168, 168, 168, 99, 99, 169, 169, 169, 133, 133,
	175, 175, 175, 80, 80, 80, 176, 176, 176, 176,
	176, 176, 176, 176, 176, 176, 176, 176, 176, 177,
	177, 177, 177, 179, 179, 179, 178, 178, 178, 178,
	178, 178, 178, 178, 178, 178, 178, 178, 178, 178,
	180, 180, 187, 187, 188, 188, 189, 190, 181, 181,
	182, 182, 183, 184, 191, 191, 191, 191, 193, 193,
	185, 185, 185, 185, 185, 186, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	112, 112, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 141, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	141, 142, 142, 142, 142, 142, 142, 142, 142, 142,
	142, 142, 142, 220, 220, 220, 220, 220, 220, 220,
	222, 222, 223, 223, 221, 221, 221, 221, 221, 221,
	221, 221, 221, 221, 221, 221, 221, 221, 221, 221,
	221, 221, 221, 221, 221, 221, 221, 221, 221, 221,
	221, 229, 229, 230, 230, 232, 232, 233, 233, 234,
	235, 235, 235, 236, 237, 237, 231, 231, 238, 238,
	238, 239, 239, 240, 240, 240, 240, 240, 152, 152,
	152, 153, 153, 154, 88, 88, 149, 149, 148, 148,
	148, 151, 151, 105, 105, 192, 192, 192, 192, 192,
	192, 192, 106, 106, 106, 113, 107, 107, 108, 108,
	108, 108, 108, 108, 144, 145, 109, 109, 109, 146,
	146, 155, 159, 159, 158, 157, 157, 156, 156, 136,
	136, 136, 136, 135, 134, 94, 94, 251, 251, 160,
	160, 95, 95, 96, 90, 90, 170, 170, 170, 170,
	84, 84, 64, 64, 85, 85, 60, 60, 63, 61,
	61, 61, 61, 78, 78, 79, 79, 58, 58, 143,
	143, 143, 143, 143, 143, 143, 143, 143, 143, 143,
	194, 194, 194, 53, 53, 53, 54, 54, 55, 55,
	199, 199, 199, 200, 200, 200, 200, 198, 198, 198,
	198, 198, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 206, 206, 206, 206,
	206, 206, 206, 206, 206, 206, 206, 206, 206, 206,
	206, 206, 206, 206, 206, 206, 206, 206, 206, 206,
	206, 206, 206, 206, 206, 206, 206, 206, 206, 206,
	206, 206, 206, 206, 206, 206, 206, 206, 206, 206,
	206, 206, 206, 206, 206, 206, 205, 205, 205, 205,
	205, 205, 205, 205, 205, 205, 205, 205, 205, 205,
	207, 207, 207, 207, 207, 207, 207, 207, 207, 207,
	207, 207, 207, 207, 207, 207, 207, 207, 207, 207,
	207, 207, 207, 207, 207, 207, 207, 207, 207, 207,
	207, 207, 207, 207, 207, 207, 207, 207, 207, 207,
	207, 207, 207, 207, 207, 207, 207, 207, 207, 207,
	207, 207, 207, 207, 207, 207, 207, 207, 207, 207,
	207, 207, 207, 207, 207, 207, 207, 207, 207, 207,
	207, 207, 207, 207, 207, 207, 207, 207, 207, 207,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 4, 6,
	1, 3, 2, 5, 3, 6, 4, 6, 6, 6,
	4, 8, 3, 3, 3, 6, 4, 3, 2, 1,
	1, 0, 2, 0, 2, 0, 2, 0, 4, 6,
	7, 1, 1, 1, 1, 1, 1, 6, 3, 5,
	4, 6, 4, 6, 4, 6, 1, 3, 1, 2,
	2, 3, 2, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 1, 5, 3, 0, 1, 1,
	1, 1, 3, 3, 0, 2, 3, 2, 3, 6,
	6, 1, 2, 2, 1, 1, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 2, 3, 6,
	3, 1, 5, 2, 1, 1, 1, 3, 3, 2,
	3, 3, 3, 3, 1, 3, 3, 2, 1, 1,
	3, 1, 1, 1, 2, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 1,
	1, 1, 1, 1, 0, 1, 1, 2, 2, 4,
	2, 4, 4, 4, 4, 4, 4, 4, 2, 3,
	4, 3, 2, 4, 2, 2, 0, 2, 0, 8,
	8, 7, 10, 6, 9, 1, 0, 1, 3, 1,
	1, 1, 1, 8, 0, 1, 1, 0, 3, 2,
	0, 3, 1, 2, 2, 3, 6, 2, 1, 1,
	2, 4, 2, 5, 7, 8, 5, 3, 1, 4,
	6, 5, 10, 1, 1, 4, 0, 3, 0, 2,
	2, 2, 0, 1, 1, 2, 2, 0, 3, 3,
	2, 1, 1, 2, 2, 1, 2, 1, 4, 5,
	2, 0, 6, 11, 14, 1, 0, 1, 3, 3,
	3, 5, 2, 0, 1, 1, 0, 6, 6, 8,
	6, 8, 8, 10, 8, 10, 1, 0, 2, 0,
	2, 2, 3, 3, 2, 2, 2, 1, 0, 1,
	3, 2, 0, 2, 1, 1, 1, 3, 3, 0,
	3, 4, 7, 3, 0, 6, 6, 8, 5, 7,
	1, 3, 1, 4, 2, 8, 5, 4, 3, 0,
	2, 0, 8, 2, 0, 1, 3, 1, 1, 3,
	5, 5, 1, 1, 3, 3, 1, 2, 3, 2,
	3, 4, 1, 1, 8, 8, 1, 2, 4, 4,
	4, 2, 2, 3, 1, 3, 6, 1, 0, 1,
	0, 1, 0, 1, 1, 0, 1, 1, 0, 1,
	0, 3, 1, 3, 2, 2, 2, 1, 1, 2,
	2, 3, 1, 1, 1, 1, 3, 0, 2, 0,
	2, 3, 3, 0, 1, 3, 3, 1, 1, 3,
	2, 4, 0, 3, 2, 1, 4, 3, 4, 5,
	4, 5, 4, 5, 2, 4, 1, 1, 0, 5,
	0, 2, 2, 2, 1, 1, 0, 4, 2, 1,
	2, 2, 4, 1, 3, 1, 2, 3, 2, 0,
	2, 5, 2, 3, 4, 0, 1, 1, 1, 1,
	2, 4, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 5, 0, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 2, 2, 2, 1, 1,
	3, 0, 1, 1, 1, 1, 5, 2, 1, 1,
	1, 1, 4, 1, 2, 2, 1, 1, 1, 0,
	1, 1, 4, 1, 4, 1, 1, 1, 1, 1,
	1, 1, 3, 3, 3, 3, 3, 3, 3, 0,
	1, 4, 1, 3, 3, 3, 5, 2, 2, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 2, 2, 3, 4, 3, 4, 4, 5, 3,
	3, 3, 3, 3, 4, 3, 3, 4, 3, 4,
	3, 4, 5, 6, 6, 7, 6, 7, 6, 7,
	3, 4, 1, 3, 3, 2, 2, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 5, 6, 6,
	7, 1, 1, 1, 3, 1, 1, 1, 2, 2,
	2, 1, 1, 3, 5, 6, 8, 6, 6, 4,
	4, 1, 1, 1, 5, 1, 3, 1, 3, 1,
	1, 1, 1, 6, 6, 4, 4, 4, 4, 4,
	6, 5, 5, 5, 4, 8, 6, 6, 4, 4,
	4, 5, 0, 5, 0, 2, 0, 1, 3, 3,
	2, 2, 0, 6, 1, 0, 3, 0, 2, 2,
	0, 1, 4, 2, 2, 2, 2, 2, 4, 3,
	5, 4, 3, 5, 1, 3, 1, 3, 3, 3,
	2, 1, 3, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 3, 1, 2, 3, 0, 3, 3,
	2, 2, 1, 0, 2, 2, 3, 2, 1, 1,
	3, 5, 1, 2, 4, 2, 0, 1, 0, 1,
	1, 3, 5, 2, 2, 1, 2, 1, 0, 1,
	1, 1, 3, 3, 1, 3, 3, 2, 1, 1,
	1, 3, 1, 3, 1, 3, 1, 2, 3, 1,
	1, 2, 2, 1, 3, 3, 0, 1, 2, 1,
	1, 1, 1, 6, 2, 3, 5, 1, 1, 1,
	1, 2, 2, 1, 1, 1, 1, 0, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -6, -13, -14, -15,
	-17, -18, -20, -21, -22, -23, -25, -26, -28, -27,
	-29, -30, -31, -32, -24, -33, -34, 23, 64, -7,
	-8, -9, -10, -11, -12, -227, 92, 100, 122, 196,
	99, 85, 116, 210, 217, -35, -37, 225, -129, 226,
	34, 235, 58, 95, 212, 207, 256, 66, -225, -38,
	-36, 303, 278, 284, 220, -39, 243, 270, 306, 243,
	130, 78, -60, -53, 4, -204, -206, 20, 21, 23,
	33, 34, 39, 43, 46, 57, 58, 59, 61, 63,
	64, 65, 68, 69, 76, 77, 78, 79, 81, 85,
	87, 91, 92, 94, 99, 100, 106, 107, 110, 112,
	117, 122, 123, 124, 131, 134, 129, 143, 145, 146,
	151, 154, 157, 159, 160, 161, 162, 163, 165, 166,
	168, 170, 167, 173, 175, 176, 182, 185, 188, 189,
	190, 191, 194, 196, 198, 199, 200, 202, 203, 207,
	205, 206, 208, 210, 212, 213, 215, 217, 218, 219,
	222, 223, 225, 226, 228, 231, 234, 235, 236, 239,
	237, 233, 242, 244, 245, 252, 256, 257, 258, 259,
	262, 263, 264, 267, 268, 269, 274, 279, 280, 281,
	282, 28, 35, 36, 37, 38, 40, 41, 44, 45,
	49, 50, 51, 53, 80, 82, 83, 98, 101, 102,
	108, 118, 120, 125, 126, 135, 136, 137, 138, 140,
	149, 172, 174, 183, 187, 193, 195, 201, 214, 221,
	229, 230, 238, 240, 247, 248, 249, 253, 254, 270,
	271, 87, 134, 264, 263, 78, 130, 243, 273, -16,
	303, -27, -6, -14, -4, -23, -34, -13, -15, 23,
	-198, 4, -204, -206, -205, -207, 55, 67, 115, 133,
	127, 142, 144, 150, 152, 164, 184, 186, 211, 227,
	22, 24, 25, 26, 27, 29, 30, 31, 32, 42,
	47, 48, 52, 54, 56, 62, 66, 70, 71, 72,
	73, 74, 75, 84, 86, 88, 89, 90, 93, 95,
	97, 103, 104, 105, 111, 113, 114, 116, 119, 121,
	128, 130, 132, 139, 141, 147, 148, 153, 155, 156,
	169, 171, 177, 178, 179, 180, 181, 192, 197, 204,
	209, 220, 224, 232, 241, 243, 246, 250, 251, 255,
	260, 261, 265, 266, 272, 273, 275, 276, 277, 278,
	-53, -53, -53, 196, 22, -245, 22, -246, -247, 66,
	92, 116, 220, 134, 87, 263, -245, -57, 217, -53,
	-125, 154, 223, 214, 252, -126, -124, -197, 247, 163,
	-86, -53, 4, 78, 57, 79, 117, 130, 131, 62,
	63, 146, 244, 247, 252, 22, 66, -250, 252, 252,
	-250, -250, -56, 252, 250, -57, -249, 243, 243, 265,
	273, -114, 78, 261, -36, -38, -37, -74, -75, 260,
	139, 97, 181, -35, -37, -225, -228, 202, -224, -53,
	-228, -71, -72, 22, 89, 307, -168, -60, 179, -96,
	303, -3, -168, 125, -60, -63, 125, -60, -53, 114,
	303, -94, -136, -135, -134, 301, 305, 114, 141, 141,
	-169, -168, -53, 125, -64, 125, -63, -87, 125, -86,
	-87, 125, -174, -173, -200, 4, -204, -206, -205, 270,
	243, -150, 303, -110, 303, -53, 22, 178, 307, 178,
	-53, -125, 51, -125, 303, -127, -51, -52, 143, 198,
	250, 288, 114, 282, -67, 5, 84, -89, 305, 114,
	-242, 178, 114, 114, 114, 114, 114, 114, 282, 143,
	198, 243, -128, -51, -52, -128, 250, -57, -99, -168,
	-86, 125, -53, -86, 130, -53, 125, -74, -75, -98,
	-117, -118, 153, 177, -101, 22, 89, -101, -101, 43,
	304, 304, 307, -228, -79, 303, -90, -170, -140, 296,
	-142, 294, 295, 300, 169, 283, -152, -60, -143, 9,
	303, -155, -222, -37, 98, 29, -153, -154, 214, -53,
	7, 8, 5, 6, -58, -177, -186, 255, 103, 171,
	47, -220, -221, 4, -204, -199, -178, -188, -182, -185,
	140, 55, 71, 74, 72, 75, 224, 265, 48, 28,
	101, 102, 187, 193, 240, 253, 254, 125, 172, 126,
	53, 118, 149, 91, 36, 38, 40, 41, 49, 50,
	80, 82, 83, 108, 135, 136, 137, 138, 174, 201,
	229, 238, 248, 249, 271, -205, -189, -190, -183, -184,
	-191, -90, -96, 296, -60, 303, -95, -160, -140, 84,
	-44, 205, -43, 21, 23, 92, 268, 98, 233, 233,
	205, 98, 308, 205, 236, 304, -84, -60, -136, -140,
	-198, 296, -169, -62, -60, -62, 225, -53, 30, 98,
	-46, 307, 46, 208, 98, -46, 307, 98, -46, 98,
	304, 307, -168, 125, 30, -149, -175, -176, -178, -187,
	-181, -185, -186, 39, 45, 44, 245, 221, 230, 37,
	135, 136, 137, 138, 229, 36, 201, 108, 91, 83,
	82, 174, 41, 40, -189, -190, -183, -184, 80, 248,
	249, 140, 38, 50, 49, 271, 238, -88, -140, -241,
	-85, 243, 78, -61, -53, 296, -247, -241, 30, -88,
	307, 307, 151, -66, 157, 168, 123, -196, 84, -202,
	-195, -161, 9, 255, 103, 178, -201, 8, 295, -194,
	-200, 5, 7, 294, -196, 84, 69, -203, 5, 4,
	-186, -161, 84, 154, 305, -198, -197, -244, 111, -241,
	-197, -197, -197, -197, -197, -53, 151, -197, 307, 307,
	-57, -46, 307, 303, -73, 169, -226, 278, -73, 303,
	-54, 125, -53, -49, 94, 169, -98, -118, -117, -119,
	-140, 22, -140, -142, -36, -36, -36, -76, -164, -140,
	-224, 30, -78, -53, -81, 307, 114, 10, 11, 54,
	33, 294, 295, 296, 297, 109, 298, 291, 292, 293,
	290, 286, 287, 288, 60, 158, 216, 13, 14, 15,
	26, 180, 152, 283, 127, 227, 300, 16, 17, 18,
	142, 35, 128, 30, 4, -140, -140, -140, -140, -140,
	186, -37, -140, -88, -94, -37, -148, 301, 303, -94,
	303, 5, 5, 303, -156, -140, -229, 279, 111, 303,
	303, 303, 303, 303, 303, 303, 303, 303, 303, 303,
	303, 303, 303, 303, 303, 303, 195, -193, 274, -193,
	-193, -179, 303, -179, -180, 303, -179, 280, 284, 303,
	-81, -60, 307, 304, 307, 250, -115, 62, 56, -131,
	125, 56, -208, -53, 62, -209, 52, 261, 197, 113,
	-115, 62, -115, 62, 62, -168, 33, 33, 250, -63,
	-53, 250, 114, 304, 307, 302, 311, -133, 276, -121,
	-27, 303, 84, 30, -121, -91, -92, -171, -93, -60,
	303, -53, -53, -63, -64, -86, -87, -87, -16, -173,
	98, -19, -27, -23, -34, -13, 304, 307, -80, 29,
	-111, 303, 281, 161, 81, 124, 160, -112, 219, 304,
	307, 250, 307, -85, -78, -135, -134, 114, 252, 304,
	-52, -51, -65, 200, 231, 206, 222, 307, 8, 7,
	7, 5, -198, -243, -53, -52, -51, -168, -68, -78,
	-69, -53, -132, -131, -210, -211, -208, 130, 261, 104,
	30, 98, -50, 191, 30, 178, 169, 288, 98, -120,
	214, 215, 307, -42, 31, 88, 303, 307, 304, -133,
	-170, -83, -166, -168, -37, -167, 303, -175, -175, -86,
	247, -140, -140, -140, -140, -140, -140, -140, -140, -140,
	-140, -140, -140, -140, -140, -140, -140, -140, -140, -140,
	-140, -140, -140, 152, 127, 227, 35, 128, -140, 250,
	-140, -140, -140, -140, 171, 169, 255, 103, 262, 89,
	175, -251, 241, 32, -146, -37, 303, -198, -152, 214,
	303, 304, 307, -88, -151, 302, -148, -88, 304, 304,
	-88, 272, 22, 89, 296, -111, 7, -159, -158, 275,
	-230, 106, 119, 303, 304, 304, -140, -140, -105, -192,
	-88, 4, 281, 161, 81, 124, 160, 219, -105, -106,
	-140, -88, -107, -141, -142, 294, 295, 300, 303, 214,
	-108, -140, -88, -140, 42, 148, 251, -109, -140, 114,
	-88, -140, -140, -140, -88, -88, -88, 303, 7, 7,
	247, 247, 7, -133, 304, -160, -43, -60, -53, -53,
	169, -131, 125, -48, 169, -175, -53, 303, 303, 145,
	145, -53, -53, 125, -53, 125, -53, -53, -44, 205,
	303, 303, -53, 205, -53, 236, 114, -60, -140, -100,
	209, -140, -100, -123, 178, -84, 270, -53, 209, -82,
	307, 114, 288, -84, -46, -46, -46, -168, -175, 301,
	301, 7, 250, 250, 250, 250, 303, -140, -243, -61,
	-243, -51, 259, 59, 200, -202, -111, 307, 304, 304,
	307, -54, 130, -54, -27, -86, 5, -27, -60, 98,
	5, -53, -164, -19, -53, -97, 119, -172, 307, 285,
	67, -104, 144, 164, 115, 150, 211, 133, -137, 308,
	-163, -162, 30, -53, -37, -167, -166, 282, -140, -140,
	250, -251, 241, -146, -140, 171, 255, 103, 262, 89,
	175, 114, 303, -141, -141, -88, 303, -88, -140, 302,
	302, 307, 304, -75, 307, -74, -140, -88, -88, 304,
	304, -157, -158, 93, -140, -235, 185, 303, 303, -140,
	30, 307, 304, 114, 304, 304, -113, 192, 304, 10,
	11, 294, 295, 296, 297, 109, 298, 291, 292, 293,
	290, 286, 287, 288, 60, 158, 216, 13, 14, 15,
	142, 128, -141, -141, -141, -88, 303, 304, -144, -145,
	114, 111, 30, -109, -109, -109, 304, 114, -88, 307,
	307, 307, 304, 304, 304, 7, 304, 307, 304, 282,
	282, 304, -97, 250, 250, 98, 169, 267, -212, -209,
	-140, -78, 303, 303, -41, 92, 225, -116, 98, -46,
	98, -46, 250, -115, 62, -88, -88, 250, 236, 302,
	-90, 209, 61, 304, -90, -133, -92, -83, -160, 304,
	302, 7, 7, 304, 161, 124, 160, -112, 160, -112,
	-112, 7, -53, -70, 129, -132, 303, -54, 303, 303,
	-73, 303, -53, -49, 304, -147, 121, 43, -166, 175,
	144, 144, -166, -104, 144, -102, 184, -102, -102, -163,
	-198, 309, -53, 303, 304, -140, -140, -141, -141, 114,
	303, -140, -149, 26, 26, 304, -88, 304, 307, 304,
	-148, 304, 272, -75, -75, -75, 5, 95, -140, 246,
	-236, -53, 303, 276, -74, 304, -175, -175, -140, -144,
	-140, -175, -175, -141, -141, -141, -141, -141, -141, -141,
	-141, -141, -141, -141, -141, -141, -141, -141, -141, -141,
	-141, -141, 89, 169, 175, -141, 307, -88, 304, -145,
	-144, -140, -140, -175, 304, 304, 304, -88, -140, -140,
	-140, 304, 7, -147, -53, -53, -131, 98, -213, 62,
	-214, 54, 104, 66, 169, 171, 261, 197, 52, 84,
	204, 304, 304, -78, -78, 169, 84, 169, 84, 77,
	257, -53, -53, -60, -53, -53, 304, 304, -53, -90,
	-122, 303, 178, -27, -100, 288, 302, 302, 304, 128,
	-77, -165, -53, -223, 303, -220, -221, -58, 303, -78,
	-68, 30, -77, 178, -232, 277, -140, -88, 242, -166,
	-166, -103, 266, 178, 144, -166, -139, -138, 112, 167,
	303, -78, -162, 26, 26, -140, -149, 304, -140, -140,
	304, -140, 5, -140, 304, 304, 304, -140, -237, -53,
	-140, 304, 304, 304, -145, 114, 89, 175, 303, -140,
	304, 304, 307, 304, 304, 304, -232, -131, -53, -86,
	-53, 104, 125, 171, 145, 303, -141, -60, -130, -248,
	65, 239, 304, 304, 171, 171, -140, -175, -46, -46,
	250, 250, 90, -78, 62, -96, -37, 303, 188, 304,
	307, -59, -94, 54, -59, -140, 303, -77, 304, 304,
	-27, 304, -60, -233, -234, -53, 247, -103, 303, -140,
	-166, 307, 310, 288, -78, 304, -140, -140, 304, 304,
	-75, -231, 190, 304, -141, 114, 303, -149, 304, -140,
	-214, -54, 169, -140, -55, 303, -70, 303, 204, -45,
	54, -53, -53, 263, 170, 304, -53, -53, -130, -165,
	-42, -86, -42, 304, -88, 304, -70, -130, 303, 307,
	30, 5, -78, -138, -198, 304, 304, -75, 43, -141,
	-149, 304, 304, 98, 304, -217, 159, -53, -78, -60,
	-40, 266, -86, 225, -133, 303, -70, -59, -75, -130,
	-70, -77, -234, -236, 304, -238, 199, 215, -88, 304,
	104, -215, -218, -216, 178, 115, 189, 228, 304, 304,
	-73, -140, -91, -78, -42, 304, -70, 304, 304, -239,
	-240, 35, 258, 69, -140, -239, -53, -216, 178, -218,
	178, 263, 87, -217, -133, 304, -130, -240, 194, 110,
	214, 194, 110, -219, 166, 208, 46, 225, -219, -215,
	-47, 46, 208, -70, 26, 20, 171, 84, -240,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 0, 0, 61,
	62, 63, 64, 65, 66, 0, 0, 380, 0, 0,
	0, 0, 0, 0, 0, 352, -2, 0, 131, 0,
	308, 0, 308, 308, 312, 0, 382, 276, 379, -2,
	390, 0, 0, 0, 388, 366, 0, 0, -2, 0,
	0, 0, 0, 786, 813, 814, 815, 832, 833, 834,
	835, 836, 837, 838, 839, 840, 841, 842, 843, 844,
	845, 846, 847, 848, 849, 850, 851, 852, 853, 854,
	855, 856, 857, 858, 859, 860, 861, 862, 863, 864,
	865, 866, 867, 868, 869, 870, 871, 872, 873, 874,
	875, 876, 877, 878, 879, 880, 881, 882, 883, 884,
	885, 886, 887, 888, 889, 890, 891, 892, 893, 894,
	895, 896, 897, 898, 899, 900, 901, 902, 903, 904,
	905, 906, 907, 908, 909, 910, 911, 912, 913, 914,
	915, 916, 917, 918, 919, 920, 921, 922, 923, 924,
	925, 926, 927, 928, 929, 930, 931, 932, 933, 934,
	935, 936, 937, 938, 939, 940, 941, 942, 943, 944,
	945, 946, 947, 948, 949, 950, 951, 952, 953, 954,
	955, 956, 957, 958, 959, 960, 961, 962, 963, 964,
	965, 966, 967, 968, 969, 970, 971, 972, 973, 974,
	975, 976, 977, 978, 979, 980, 981, 982, 983, 984,
	985, 986, 987, 988, 989, 990, 991, 992, 993, 994,
	995, 0, 0, 0, 0, 0, 0, 0, 0, 82,
	0, 84, 85, 86, 87, 88, 89, 90, 91, 0,
	194, 827, 828, 829, 830, 831, 996, 997, 998, 999,
	1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009,
	1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019,
	1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029,
	1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039,
	1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049,
	1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059,
	1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069,
	1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079,
	1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089,
	97, 104, 105, 898, 107, 0, 114, 115, 116, 118,
	119, 120, 121, 122, 123, 124, 0, 301, 912, 314,
	127, 876, 916, 983, 930, 134, 144, 0, 989, -2,
	148, 78, 177, 178, 0, 180, 196, 0, 0, 0,
	0, 0, 188, 0, 0, 192, 0, 319, 307, 319,
	304, 305, 306, 309, 0, 300, 0, 381, 0, 0,
	0, 0, 0, 275, -2, 362, 363, -2, 0, 385,
	385, 385, 0, 0, 363, 0, 371, 902, 374, 796,
	372, 0, 0, 387, 386, 0, 367, 449, 0, 410,
	0, 2, 0, 968, 449, 0, 968, 0, 0, 0,
	0, 787, 765, 759, 760, 0, 0, 0, 0, 0,
	0, 455, 68, 968, 51, 968, 782, 51, 968, 76,
	51, 968, 0, 92, 94, 823, 824, 825, 826, 994,
	0, 0, 0, 102, 0, 106, 108, 0, 0, 0,
	313, 128, 957, 130, 0, 133, 135, 136, 0, 0,
	0, 0, 0, 0, 147, 172, 173, 79, 0, 0,
	198, 0, 0, 0, 0, 0, 0, 0, 189, 0,
	191, 0, 302, 315, 316, 303, 0, 311, 51, 453,
	248, 968, 378, 248, 817, 324, 968, -2, 0, 358,
	397, 398, 0, 0, 0, 383, 384, 0, 0, 0,
	354, 355, 0, 373, 0, 0, 413, 774, 778, 779,
	542, 0, 0, 0, 0, 0, 0, 631, 632, 633,
	0, 635, 636, 637, 962, 0, 641, 642, 983, 786,
	799, 800, 801, 802, 0, 0, 0, 807, 808, 809,
	758, 682, 651, -2, -2, 797, 479, 480, 481, 482,
	-2, 996, 655, 657, 659, 660, 661, 662, 0, 946,
	963, 964, 979, 980, 988, 992, 993, 968, 976, 969,
	958, 966, 975, 856, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, 822, 504, 505, 510, 511,
	513, 413, 411, 450, 451, 0, 0, 771, 769, 770,
	28, 297, 30, 0, 297, 297, 0, 0, 0, 0,
	0, 0, 0, 0, 58, 0, 0, 780, 766, 0,
	763, 764, 459, 0, 330, 0, 0, 456, 0, 0,
	70, 0, 49, 50, 0, 72, 0, 0, 74, 0,
	380, 0, 0, 968, 380, 0, 716, 465, 466, 467,
	468, 469, 539, 472, 473, 474, 475, 476, 477, 478,
	486, 487, 488, 489, 490, 491, 492, 501, 0, 485,
	485, 485, 498, 499, 502, 503, 508, 509, 520, 521,
	523, 525, 519, 519, 519, 516, 517, 0, 714, 0,
	111, 0, 851, 784, 789, 790, 117, 0, 0, 0,
	0, 0, 0, 139, 159, 160, 161, 140, 142, 149,
	151, 152, 153, 162, 163, 164, 165, 265, 0, 267,
	175, 176, 810, 0, 141, 143, 145, 146, 166, 167,
	0, 169, 170, 171, 0, 80, 179, 181, 0, 195,
	182, 183, 184, 185, 186, 187, 190, 193, 0, 0,
	310, 268, 0, 206, 0, 0, 271, 377, 0, 0,
	0, 968, 816, 321, 0, 0, 361, 395, 396, 399,
	402, 403, 400, 542, 368, 369, 370, 391, 392, 286,
	375, 0, 0, 793, 459, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 768, 0, 0, 777, 547, 548, 549, 571, 572,
	0, -2, 714, 0, 638, 639, 640, 0, 0, -2,
	0, 804, 539, 0, 0, 757, 684, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 737, 743, 0, 0,
	0, 0, 0, 0, 0, 0, 494, 507, 518, 515,
	514, 496, 0, 495, 493, 0, 497, 0, 0, 0,
	459, 0, 0, 773, 0, 0, 0, 0, 296, 32,
	968, 0, 53, 0, 0, 238, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	788, 0, 0, 0, 0, 761, 0, 341, 0, 341,
	332, 0, 0, 0, 328, 344, 345, 347, 348, 0,
	0, 457, 69, 783, 51, 77, 51, 51, 83, 93,
	0, 95, 98, 99, 100, 101, 96, 0, 460, 462,
	470, 0, 526, 527, 528, 529, 530, 531, 540, 103,
	0, 0, 0, 112, 113, 791, 792, 0, 0, 132,
	137, 138, 320, 0, 156, 0, 158, 0, 266, 812,
	811, 539, 81, 197, 125, 317, 318, 454, 0, 0,
	205, 793, 207, 209, 210, 211, 212, 817, 0, 817,
	0, 0, 269, 0, 0, 0, 0, 0, 0, 401,
	404, 405, 0, 394, 284, 285, 380, 0, 795, 407,
	775, 440, 414, 422, 438, 425, 0, 543, 544, 545,
	0, 550, 551, 552, 553, 554, 555, 556, 557, 558,
	559, -2, -2, -2, 563, 564, 565, -2, -2, -2,
	569, 570, -2, 0, 0, 0, 768, 0, -2, 0,
	579, -2, -2, -2, 583, 0, 586, 588, 590, 0,
	0, 0, 0, 767, 600, 749, 0, 776, 585, 0,
	0, 634, 0, 0, 0, 720, 721, 0, -2, 643,
	390, 0, 0, 0, 0, 805, 0, 756, 752, 0,
	692, 0, 0, 0, 656, 658, 0, 0, 0, 0,
	724, -2, -2, -2, -2, -2, -2, -2, 0, 0,
	714, 734, 0, 0, 602, 0, 0, 0, 0, 983,
	0, 714, 742, 0, 0, 0, 0, 0, 714, 0,
	748, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 407, 452, 772, 31, 288, 0, 0,
	0, 34, 968, 42, 0, 220, 0, 0, 0, 0,
	0, 299, 43, 968, 51, 968, 51, 44, 29, 297,
	0, 0, 290, 0, 287, 59, 0, 781, 0, 67,
	0, 458, 325, 326, 0, 0, 334, 331, 0, 459,
	0, 0, 0, 0, 71, 73, 75, 0, 717, 0,
	0, 0, 0, 0, 0, 0, 0, 715, 109, 785,
	110, 129, 154, 155, 157, 150, 168, 0, 214, 247,
	0, 0, 817, 0, 203, 248, 270, 272, 0, 0,
	323, 324, 393, 0, 794, 409, 0, 412, 0, 0,
	0, 0, 0, 0, 446, 446, 446, 444, 438, 0,
	424, 437, 0, 436, -2, 425, 0, 0, -2, -2,
	0, 0, 0, 601, -2, 584, 587, 589, 591, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 715, 718,
	719, 0, -2, 0, 0, 389, 390, 390, 390, 649,
	0, 0, 753, 0, 0, 650, 0, 0, 0, 0,
	0, 0, 665, 0, 666, 667, 0, 0, 668, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 606, 607, 0, 0, 669, 740, 741,
	0, 0, 0, 0, 0, 0, 674, 0, 747, 0,
	0, 0, 678, 679, 680, 0, 483, 0, 500, 522,
	524, 512, 409, 0, 0, 0, 0, 52, 218, 237,
	0, 0, 0, 0, 36, 0, 0, 0, 0, 40,
	0, 46, 0, 0, 0, 0, 0, 0, 60, 762,
	340, 0, 339, 0, 329, 341, 346, 343, 349, 0,
	463, 0, 0, 471, 532, 533, 534, 535, 536, 537,
	538, 0, 126, 201, 0, 208, 0, 0, 0, 206,
	0, 0, 0, 322, 376, 686, 0, 0, 415, 0,
	0, 0, 0, 0, 0, 441, 445, 442, 443, 423,
	420, 0, 434, 0, 427, 546, -2, 0, 0, 0,
	0, -2, 0, 0, 0, 750, 0, 709, 0, -2,
	722, 644, 0, 0, 0, 0, 806, 751, 755, 0,
	690, 691, 695, 0, 0, 654, 0, 0, 723, 733,
	735, 603, 604, 608, 609, 610, 611, 612, 613, 614,
	615, 616, 617, -2, -2, -2, 621, 622, 623, -2,
	-2, -2, 0, 0, 0, 736, 0, 0, 712, 738,
	739, 744, 745, 0, 671, 672, 673, 746, 0, 0,
	0, 506, 0, 686, 292, 294, 33, 0, 219, 0,
	222, 0, 0, 0, 0, 228, 229, 0, 0, 0,
	0, 239, 246, 0, 0, 0, 48, 0, 0, 298,
	0, 51, 51, 289, 0, 0, 199, 200, 291, 327,
	0, 0, 0, 333, 342, 0, 464, 461, 541, 0,
	0, 277, 283, 283, 0, 652, 653, 0, 0, 0,
	0, 0, 0, 0, 364, 0, 408, 406, 0, 428,
	0, 430, 0, 0, 0, 432, 0, 418, 0, 417,
	0, 0, 426, 0, 0, -2, 0, 594, -2, -2,
	708, 715, 803, 390, 645, 647, 648, 754, 697, 694,
	0, 681, 663, 664, 732, 0, 0, 0, 0, 715,
	711, 670, 0, 676, 677, 484, 365, 35, 0, 223,
	224, 817, 0, 227, 230, 0, 232, 819, 214, 0,
	243, 244, 241, 0, 37, 38, 47, 55, 39, 45,
	0, 0, 0, 0, 0, 350, 351, 0, 0, 246,
	0, 286, 798, 0, 286, 0, 0, 0, 236, 214,
	204, 246, 0, 685, 687, 0, 0, 429, 0, 448,
	431, 0, 421, 0, 0, 435, -2, -2, 595, 710,
	0, 390, 0, 683, -2, 0, 0, 0, 713, 0,
	221, 225, 0, 0, 252, 0, 240, 0, 0, 57,
	0, 293, 295, 0, 336, 459, 338, 0, 214, 278,
	279, 282, 280, 283, 390, 246, 202, 214, 0, 0,
	0, 439, 0, 419, 416, 433, 646, 700, 0, -2,
	0, 629, 675, 0, 231, 257, 0, 0, 0, 248,
	41, 0, 54, 0, 337, 0, 234, 286, 0, 214,
	273, 0, 688, 689, 447, 0, 0, 0, 696, 630,
	0, 233, 253, 254, 0, 249, 250, 251, 818, 245,
	252, 56, 459, 0, 281, 644, 235, 246, 693, 698,
	701, -2, 933, 848, 0, 699, 226, 255, 0, 256,
	0, 0, 0, 257, 335, 217, 214, 0, 703, 704,
	705, 706, 707, 258, 0, 261, 262, 0, 259, 242,
	213, 215, 216, 274, 0, 260, 263, 264, 702,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 292, 3, 298, 293, 3,
	303, 304, 296, 294, 307, 295, 305, 297, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 311, 306,
	286, 288, 287, 3, 308, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 301, 3, 302, 291, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 309, 290, 310, 300,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 289, 57629, 299,
	0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:732
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:738
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:744
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 19:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:769
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 27:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:780
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 28:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:786
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 29:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:790
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 30:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:796
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 31:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:800
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:807
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 33:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:812
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:817
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:822
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 36:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:827
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:832
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:836
		{
			unimplemented()
		}
	case 39:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:839
		{
			sqlVAL.union.val = &AlterTableDropColumn{columnKeyword: sqlDollar[2].union.bool(), IfExists: true, Column: Name(sqlDollar[5].str)}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:844
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 41:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:854
		{
			unimplemented()
		}
	case 42:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:857
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 43:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:864
		{
			unimplemented()
		}
	case 44:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:867
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 45:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:874
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 46:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:883
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 47:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:893
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 48:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:897
		{
			sqlVAL.union.val = nil
		}
	case 49:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:903
		{
			sqlVAL.union.val = DropCascade
		}
	case 50:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:907
		{
			sqlVAL.union.val = DropRestrict
		}
	case 51:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:911
		{
			sqlVAL.union.val = DropDefault
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:917
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 53:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:921
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 54:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:926
		{
			unimplementedWithIssue(2473)
		}
	case 55:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:927
		{
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:930
		{
			unimplemented()
		}
	case 57:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:931
		{
		}
	case 58:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:935
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:939
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:943
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:959
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retExprs()}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:966
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 69:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:970
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 70:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:974
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 71:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:982
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 72:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:990
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 73:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:994
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 74:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:998
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 75:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1002
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1008
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1012
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 78:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1018
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1022
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 80:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1028
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1032
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 82:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1039
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1043
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1049
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 91:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1058
		{ /* SKIP DOC */
		}
	case 92:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1062
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1066
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 95:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1076
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1086
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 97:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1090
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 98:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1096
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1106
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1117
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 104:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1121
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 105:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1128
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1134
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1140
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1144
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1151
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1158
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1165
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1169
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1173
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1180
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1183
		{
		}
	case 116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1187
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1191
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1198
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1202
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1206
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1210
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1214
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1218
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1222
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1230
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1234
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 127:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1242
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1246
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 129:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1250
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1254
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1257
		{ /* SKIP DOC */
		}
	case 132:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1263
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1269
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1276
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1280
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1284
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1288
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1295
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1301
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1305
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1309
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1313
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1320
		{
			unimplemented()
		}
	case 146:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1323
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1326
		{
			unimplemented()
		}
	case 149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1333
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1337
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1345
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1351
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 155:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1355
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1359
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1363
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1367
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1373
		{
			sqlVAL.union.val = Low
		}
	case 160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1377
		{
			sqlVAL.union.val = Normal
		}
	case 161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1381
		{
			sqlVAL.union.val = High
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1387
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1391
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1395
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1410
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1414
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1418
		{
			d, err := ParseDInterval(sqlDollar[2].str)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1428
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1432
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1437
		{
			unimplemented()
		}
	case 173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1438
		{
			unimplemented()
		}
	case 174:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1439
		{
		}
	case 175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1443
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1447
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1453
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1457
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1461
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1465
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1469
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1473
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1477
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1481
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1485
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1489
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1493
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1497
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1501
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1505
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1509
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1513
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 193:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1517
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1523
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1529
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 196:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1534
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 197:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1540
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 198:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1544
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 199:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1550
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.normalizableTableName(), Exprs: sqlDollar[7].union.exprs()}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1554
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Exprs: sqlDollar[7].union.exprs()}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1561
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1565
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1571
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1575
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1582
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 207:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1588
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1592
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1598
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 212:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1604
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 213:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1610
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1618
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 215:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1625
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 216:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1629
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 217:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1633
		{
			sqlVAL.union.val = DropDefault
		}
	case 218:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1639
		{
			sqlVAL.union.val = newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
		}
	case 219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1645
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 220:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1649
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 221:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1655
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 222:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1659
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1662
		{
			unimplemented()
		}
	case 224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1664
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1668
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 226:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1672
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1690
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1694
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1698
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1702
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 231:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1706
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1710
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1714
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1723
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1732
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1745
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1757
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 238:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1762
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 239:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1768
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1774
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    NameListToIndexElems(sqlDollar[3].union.nameList()),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 241:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1784
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[4].union.nameList()),
				},
				PrimaryKey: true,
			}
		}
	case 242:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1794
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1817
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 246:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1821
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1827
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 248:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1831
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1836
		{
			unimplemented()
		}
	case 250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1837
		{
			unimplemented()
		}
	case 251:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1838
		{
			unimplemented()
		}
	case 252:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1839
		{
		}
	case 253:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1846
		{
			unimplemented()
		}
	case 254:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1847
		{
			unimplemented()
		}
	case 255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1848
		{
			unimplemented()
		}
	case 256:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1849
		{
			unimplemented()
		}
	case 257:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1850
		{
		}
	case 258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1853
		{
			unimplemented()
		}
	case 259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1856
		{
			unimplemented()
		}
	case 260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1859
		{
			unimplemented()
		}
	case 261:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1860
		{
			unimplemented()
		}
	case 262:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1861
		{
			unimplemented()
		}
	case 263:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1862
		{
			unimplemented()
		}
	case 264:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1863
		{
			unimplemented()
		}
	case 265:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1867
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 266:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1871
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1875
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 268:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1882
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1889
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[5].union.strVal()}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1895
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[2].str}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1898
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 272:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1905
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:1918
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:1929
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1943
		{
			sqlVAL.union.val = true
		}
	case 276:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1947
		{
			sqlVAL.union.val = false
		}
	case 277:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1953
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1957
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 279:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1966
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1969
		{
			unimplemented()
		}
	case 281:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1970
		{
			unimplemented()
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1973
		{
			unimplemented()
		}
	case 283:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1974
		{
		}
	case 284:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1978
		{
			sqlVAL.union.val = Ascending
		}
	case 285:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1982
		{
			sqlVAL.union.val = Descending
		}
	case 286:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1986
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 287:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1993
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1997
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2001
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2005
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2009
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2013
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2017
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2021
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 295:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2025
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2031
		{
			sqlVAL.union.val = true
		}
	case 297:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2035
		{
			sqlVAL.union.val = false
		}
	case 298:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2040
		{
		}
	case 299:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2041
		{
		}
	case 300:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2045
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2051
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2058
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 303:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2062
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2066
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2070
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2074
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2083
		{
		}
	case 308:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2084
		{
		}
	case 309:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2088
		{
			sqlVAL.str = ""
		}
	case 310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2092
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 311:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2096
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 312:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2100
		{
			sqlVAL.str = ""
		}
	case 313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2106
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 314:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2110
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 315:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2116
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2120
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2124
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2128
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2132
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2138
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 321:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2144
		{
			sqlVAL.union.val = &CreateDatabase{Name: Name(sqlDollar[3].str), Encoding: sqlDollar[4].union.strVal()}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2148
		{
			sqlVAL.union.val = &CreateDatabase{IfNotExists: true, Name: Name(sqlDollar[6].str), Encoding: sqlDollar[7].union.strVal()}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2154
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2157
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 325:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2167
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retExprs()
		}
	case 326:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2173
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
		}
	case 327:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2178
		{
			unimplementedWithIssue(6637)
		}
	case 328:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2180
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2185
		{
			unimplementedWithIssue(6637)
		}
	case 330:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2193
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 331:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2197
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2203
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2207
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2211
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2217
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2221
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2227
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 338:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2231
		{
			unimplemented()
		}
	case 339:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2233
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 340:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2239
		{
			sqlVAL.union.val = sqlDollar[2].union.selExprs()
		}
	case 341:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2243
		{
			sqlVAL.union.val = SelectExprs(nil)
		}
	case 342:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2250
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retExprs()}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2256
		{
			unimplementedWithIssue(7841)
		}
	case 344:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2257
		{
		}
	case 345:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2261
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2265
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 349:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2275
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2287
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2291
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2335
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2341
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2345
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2360
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2364
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2368
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2372
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 360:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2376
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 361:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2380
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2414
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 365:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2427
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 367:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2440
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2448
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 369:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2457
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 370:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2466
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2484
		{
			unimplemented()
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2485
		{
			unimplemented()
		}
	case 373:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2486
		{
			unimplemented()
		}
	case 374:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2489
		{
			unimplemented()
		}
	case 375:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2490
		{
			unimplemented()
		}
	case 376:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2493
		{
			unimplemented()
		}
	case 377:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2496
		{
		}
	case 378:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2497
		{
		}
	case 379:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2500
		{
			unimplemented()
		}
	case 380:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2501
		{
		}
	case 381:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2504
		{
		}
	case 382:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2505
		{
		}
	case 383:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2509
		{
			sqlVAL.union.val = true
		}
	case 384:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2513
		{
			sqlVAL.union.val = false
		}
	case 385:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2517
		{
			sqlVAL.union.val = false
		}
	case 386:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2523
		{
			sqlVAL.union.val = true
		}
	case 387:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2528
		{
		}
	case 388:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2529
		{
		}
	case 389:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2533
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 390:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2537
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2543
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 392:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2549
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2553
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 394:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2559
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2567
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2576
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2587
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2600
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2607
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2614
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 404:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2628
		{
		}
	case 405:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2629
		{
		}
	case 406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2655
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 407:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2659
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2665
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 409:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2669
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 410:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2675
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2679
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2691
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2695
		{
			sqlVAL.union.val = &From{}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2701
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2705
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2711
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2716
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2722
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 419:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2727
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			index := a.Index
			if index == "" {
				index = b.Index
			} else if b.Index != "" {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			noIndexJoin := a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = &IndexHints{Index: index, NoIndexJoin: noIndexJoin}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2747
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2751
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 422:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2755
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2762
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), As: sqlDollar[3].union.aliasClause()}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2766
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, As: sqlDollar[2].union.aliasClause()}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2770
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 426:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2774
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[2].union.tblExpr(), As: sqlDollar[4].union.aliasClause()}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2794
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2798
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2802
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2806
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2810
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2814
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2820
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2824
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2828
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2832
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2839
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2845
		{
			sqlVAL.union.val = AsOfClause{Expr: &StrVal{s: sqlDollar[5].str}}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2849
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2855
		{
			sqlVAL.str = astFullJoin
		}
	case 442:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2859
		{
			sqlVAL.str = astLeftJoin
		}
	case 443:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2863
		{
			sqlVAL.str = astRightJoin
		}
	case 444:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2867
		{
			sqlVAL.str = astInnerJoin
		}
	case 445:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2873
		{
		}
	case 446:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2874
		{
		}
	case 447:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2885
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2889
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2895
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 450:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2899
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 451:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2903
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 452:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2907
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 453:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2913
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2917
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 455:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2930
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 456:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2934
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2938
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2944
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 459:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2948
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 460:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2960
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 461:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2964
		{
			unimplementedWithIssue(2115)
		}
	case 462:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2965
		{
			unimplementedWithIssue(2115)
		}
	case 463:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2968
		{
			unimplementedWithIssue(2115)
		}
	case 464:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2969
		{
			unimplementedWithIssue(2115)
		}
	case 465:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2970
		{
		}
	case 471:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2978
		{
			unimplemented()
		}
	case 472:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2980
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 473:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2984
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2988
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 475:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2992
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 476:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2996
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 477:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3000
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 478:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3004
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 483:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3025
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3034
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3048
		{
			sqlVAL.union.val = nil
		}
	case 486:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3055
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 487:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3059
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 488:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3063
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 489:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3067
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 490:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3071
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 491:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3075
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 492:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3079
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 493:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3083
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newFloatColType(int(prec))
		}
	case 494:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3092
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 495:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3096
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3105
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3114
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3123
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3127
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 500:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3133
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 501:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3137
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3155
		{
			n, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 507:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3171
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 512:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3187
		{
			n, err := sqlDollar[3].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3203
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 514:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3209
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 515:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3213
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 516:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3217
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 517:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3221
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 518:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3226
		{
		}
	case 519:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3227
		{
		}
	case 520:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3232
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 521:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3236
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 522:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3240
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 523:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3244
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 524:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3248
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 525:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3253
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3258
		{
			unimplemented()
		}
	case 527:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3259
		{
			unimplemented()
		}
	case 528:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3260
		{
			unimplemented()
		}
	case 529:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3261
		{
			unimplemented()
		}
	case 530:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3262
		{
			unimplemented()
		}
	case 531:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3263
		{
			unimplemented()
		}
	case 532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3264
		{
			unimplemented()
		}
	case 533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3265
		{
			unimplemented()
		}
	case 534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3266
		{
			unimplemented()
		}
	case 535:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3267
		{
			unimplemented()
		}
	case 536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3268
		{
			unimplemented()
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3269
		{
			unimplemented()
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3270
		{
			unimplemented()
		}
	case 539:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3271
		{
		}
	case 540:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3274
		{
			unimplemented()
		}
	case 541:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3275
		{
			unimplemented()
		}
	case 543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3299
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: castShort}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3303
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3306
		{
			unimplemented()
		}
	case 546:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3307
		{
			unimplemented()
		}
	case 547:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3316
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3320
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3324
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3328
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3332
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3336
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3340
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3344
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3348
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3352
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3356
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3360
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3364
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3368
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3372
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3376
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3380
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3384
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3388
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3392
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3396
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3400
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3404
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3408
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3412
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3416
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3420
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3424
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3428
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3432
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3436
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3440
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3444
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3448
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3452
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3456
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3460
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3464
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3467
		{
			unimplemented()
		}
	case 586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3469
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3473
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3477
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3481
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3485
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3489
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3493
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3497
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3501
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3505
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3509
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3513
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3517
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3521
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3525
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3529
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3546
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: castShort}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3550
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3554
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3558
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3562
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3566
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3570
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3574
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3578
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3582
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3586
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3590
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3594
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3598
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3602
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3606
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3610
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3614
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3618
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3622
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3626
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3630
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3634
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3638
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3642
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3646
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3650
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3654
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3666
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 633:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3671
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3675
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3681
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3685
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3689
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3695
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 641:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3699
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 642:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3703
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3711
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName()}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3715
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3718
		{
			unimplemented()
		}
	case 646:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3719
		{
			unimplemented()
		}
	case 647:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3721
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Type: All, Exprs: sqlDollar[4].union.exprs()}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3725
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Type: Distinct, Exprs: sqlDollar[4].union.exprs()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3729
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Exprs: Exprs{StarExpr()}}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3742
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 651:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3748
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 652:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3757
		{
			unimplemented()
		}
	case 653:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3758
		{
			unimplemented()
		}
	case 654:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3762
		{
			unimplemented()
		}
	case 655:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3764
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3768
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3772
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3776
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3779
		{
			unimplemented()
		}
	case 660:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3780
		{
			unimplemented()
		}
	case 661:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3781
		{
			unimplemented()
		}
	case 662:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3782
		{
			unimplemented()
		}
	case 663:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3784
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: castExplicit}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3788
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3792
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3796
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3800
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3804
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3808
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3811
		{
			unimplemented()
		}
	case 671:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3813
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3817
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3821
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3825
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3829
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3833
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3837
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3841
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3845
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3849
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3855
		{
			unimplemented()
		}
	case 682:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3856
		{
		}
	case 683:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3859
		{
			unimplemented()
		}
	case 684:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3860
		{
		}
	case 685:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3865
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 686:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3869
		{
			sqlVAL.union.val = Window(nil)
		}
	case 687:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3875
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3879
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 689:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3885
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 690:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3893
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 691:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3897
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3901
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 693:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3908
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3927
		{
			sqlVAL.str = ""
		}
	case 696:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3933
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 697:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3937
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 698:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3947
		{
			unimplemented()
		}
	case 699:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3948
		{
			unimplemented()
		}
	case 700:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3949
		{
		}
	case 701:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3952
		{
			unimplemented()
		}
	case 702:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3953
		{
			unimplemented()
		}
	case 703:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3959
		{
			unimplemented()
		}
	case 704:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3960
		{
			unimplemented()
		}
	case 705:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3961
		{
			unimplemented()
		}
	case 706:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3962
		{
			unimplemented()
		}
	case 707:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3963
		{
			unimplemented()
		}
	case 708:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3974
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3978
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3982
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3988
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3992
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3998
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4041
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4045
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 716:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4051
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4055
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 718:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4061
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4065
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4069
		{
			sqlVAL.union.val = &Array{nil}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4075
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4079
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4085
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4089
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 732:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4111
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4115
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4119
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 735:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4125
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 736:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4132
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4136
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 738:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4153
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4157
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4161
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4165
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4169
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 743:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4173
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 744:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4179
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 745:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4185
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 746:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4191
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 747:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4195
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 748:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4199
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 749:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4205
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4209
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4220
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4227
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4231
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 754:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4237
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4243
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 756:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4247
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 758:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4254
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 759:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4260
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 760:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4264
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 761:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4268
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4272
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr()}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4278
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 764:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4284
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4290
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4294
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 767:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4299
		{
		}
	case 768:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4300
		{
		}
	case 770:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4309
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4315
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4319
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 773:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4328
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 774:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4334
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4338
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 776:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4344
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4353
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4357
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4361
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 780:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4369
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4373
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 782:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4379
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4383
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 784:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4389
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4393
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 786:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4404
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4408
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 788:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4414
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4425
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4429
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4433
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4437
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4443
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4447
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 795:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4453
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 796:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4456
		{
		}
	case 797:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4466
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4470
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 799:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4477
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 800:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4481
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 801:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4485
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4489
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4492
		{
			unimplemented()
		}
	case 804:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4494
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrefix}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4498
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrefix}
		}
	case 806:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4502
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[5].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrefixParens}
		}
	case 807:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4506
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 808:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4510
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 809:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4514
		{
			sqlVAL.union.val = DNull
		}
	case 811:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4521
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 812:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4525
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4547
		{
			sqlVAL.str = ""
		}
	case 818:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4553
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 819:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4557
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
