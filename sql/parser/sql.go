// Code generated by go yacc.
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"errors"

	"github.com/cockroachdb/cockroach/sql/privilege"
)

var errUnimplemented = errors.New("unimplemented")

func unimplemented() {
	panic(errUnimplemented)
}

//line sql.y:36

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new sytax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in two forms, depending on the
// type of the value being accessed. Values and pointers are directly
// type asserted from the empty interface, meaning that they will panic
// if the type assertion is incorrect. Interfaces are handled differently
// because a nil instance of an interface inserted into the empty interface
// becomes a nil instance of the empty interface and therefore will fail a
// direct type assertion. Instead, a guarded type assertion must be used,
// which returns nil if the type assertion fails.
func (u *sqlSymUnion) ival() IntVal {
	return u.val.(IntVal)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) qname() *QualifiedName {
	return u.val.(*QualifiedName)
}
func (u *sqlSymUnion) qnames() QualifiedNames {
	return u.val.(QualifiedNames)
}
func (u *sqlSymUnion) indirectElem() IndirectionElem {
	if indirectElem, ok := u.val.(IndirectionElem); ok {
		return indirectElem
	}
	return nil
}
func (u *sqlSymUnion) indirect() Indirection {
	return u.val.(Indirection)
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	if selectStmt, ok := u.val.(*Select); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	if selectStmt, ok := u.val.(SelectStatement); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	if constraintDef, ok := u.val.(ConstraintTableDef); ok {
		return constraintDef
	}
	return nil
}
func (u *sqlSymUnion) tblDef() TableDef {
	if tblDef, ok := u.val.(TableDef); ok {
		return tblDef
	}
	return nil
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() ColumnQualification {
	if colQual, ok := u.val.(ColumnQualification); ok {
		return colQual
	}
	return nil
}
func (u *sqlSymUnion) colQuals() []ColumnQualification {
	return u.val.([]ColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retExprs() ReturningExprs {
	return ReturningExprs(u.val.(SelectExprs))
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	if tblExpr, ok := u.val.(TableExpr); ok {
		return tblExpr
	}
	return nil
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	if joinCond, ok := u.val.(JoinCond); ok {
		return joinCond
	}
	return nil
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	if alterTableCmd, ok := u.val.(AlterTableCmd); ok {
		return alterTableCmd
	}
	return nil
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}

//line sql.y:250
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const FCONST = 57347
const SCONST = 57348
const BCONST = 57349
const ICONST = 57350
const PARAM = 57351
const TYPECAST = 57352
const DOT_DOT = 57353
const LESS_EQUALS = 57354
const GREATER_EQUALS = 57355
const NOT_EQUALS = 57356
const ERROR = 57357
const ACTION = 57358
const ADD = 57359
const ALL = 57360
const ALTER = 57361
const ANALYSE = 57362
const ANALYZE = 57363
const AND = 57364
const ANY = 57365
const ARRAY = 57366
const AS = 57367
const ASC = 57368
const ASYMMETRIC = 57369
const AT = 57370
const BEGIN = 57371
const BETWEEN = 57372
const BIGINT = 57373
const BIT = 57374
const BLOB = 57375
const BOOL = 57376
const BOOLEAN = 57377
const BOTH = 57378
const BY = 57379
const BYTEA = 57380
const BYTES = 57381
const CASCADE = 57382
const CASE = 57383
const CAST = 57384
const CHAR = 57385
const CHARACTER = 57386
const CHARACTERISTICS = 57387
const CHECK = 57388
const COALESCE = 57389
const COLLATE = 57390
const COLLATION = 57391
const COLUMN = 57392
const COLUMNS = 57393
const COMMIT = 57394
const COMMITTED = 57395
const CONCAT = 57396
const CONFLICT = 57397
const CONSTRAINT = 57398
const COVERING = 57399
const CREATE = 57400
const CROSS = 57401
const CUBE = 57402
const CURRENT = 57403
const CURRENT_CATALOG = 57404
const CURRENT_DATE = 57405
const CURRENT_ROLE = 57406
const CURRENT_TIME = 57407
const CURRENT_TIMESTAMP = 57408
const CURRENT_USER = 57409
const CYCLE = 57410
const DATA = 57411
const DATABASE = 57412
const DATABASES = 57413
const DATE = 57414
const DAY = 57415
const DEC = 57416
const DECIMAL = 57417
const DEFAULT = 57418
const DEFERRABLE = 57419
const DELETE = 57420
const DESC = 57421
const DISTINCT = 57422
const DO = 57423
const DOUBLE = 57424
const DROP = 57425
const ELSE = 57426
const END = 57427
const ESCAPE = 57428
const EXCEPT = 57429
const EXISTS = 57430
const EXPLAIN = 57431
const EXTRACT = 57432
const FALSE = 57433
const FETCH = 57434
const FILTER = 57435
const FIRST = 57436
const FLOAT = 57437
const FOLLOWING = 57438
const FOR = 57439
const FOREIGN = 57440
const FROM = 57441
const FULL = 57442
const GRANT = 57443
const GRANTS = 57444
const GREATEST = 57445
const GROUP = 57446
const GROUPING = 57447
const HAVING = 57448
const HIGH = 57449
const HOUR = 57450
const IF = 57451
const IFNULL = 57452
const IN = 57453
const INDEX = 57454
const INDEXES = 57455
const INITIALLY = 57456
const INNER = 57457
const INSERT = 57458
const INT = 57459
const INT64 = 57460
const INTEGER = 57461
const INTERSECT = 57462
const INTERVAL = 57463
const INTO = 57464
const IS = 57465
const ISOLATION = 57466
const JOIN = 57467
const KEY = 57468
const KEYS = 57469
const LATERAL = 57470
const LEADING = 57471
const LEAST = 57472
const LEFT = 57473
const LEVEL = 57474
const LIKE = 57475
const LIMIT = 57476
const LOCAL = 57477
const LOCALTIME = 57478
const LOCALTIMESTAMP = 57479
const LOW = 57480
const LSHIFT = 57481
const MATCH = 57482
const MINUTE = 57483
const MONTH = 57484
const NAME = 57485
const NAMES = 57486
const NATURAL = 57487
const NEXT = 57488
const NO = 57489
const NORMAL = 57490
const NOT = 57491
const NOTHING = 57492
const NULL = 57493
const NULLIF = 57494
const NULLS = 57495
const NUMERIC = 57496
const OF = 57497
const OFF = 57498
const OFFSET = 57499
const ON = 57500
const ONLY = 57501
const OR = 57502
const ORDER = 57503
const ORDINALITY = 57504
const OUT = 57505
const OUTER = 57506
const OVER = 57507
const OVERLAPS = 57508
const OVERLAY = 57509
const PARTIAL = 57510
const PARTITION = 57511
const PLACING = 57512
const POSITION = 57513
const PRECEDING = 57514
const PRECISION = 57515
const PRIMARY = 57516
const PRIORITY = 57517
const RANGE = 57518
const READ = 57519
const REAL = 57520
const RECURSIVE = 57521
const REF = 57522
const REFERENCES = 57523
const RENAME = 57524
const REPEATABLE = 57525
const RELEASE = 57526
const RESTRICT = 57527
const RETURNING = 57528
const REVOKE = 57529
const RIGHT = 57530
const ROLLBACK = 57531
const ROLLUP = 57532
const ROW = 57533
const ROWS = 57534
const RSHIFT = 57535
const SAVEPOINT = 57536
const SEARCH = 57537
const SECOND = 57538
const SELECT = 57539
const SERIALIZABLE = 57540
const SESSION = 57541
const SESSION_USER = 57542
const SET = 57543
const SHOW = 57544
const SIMILAR = 57545
const SIMPLE = 57546
const SMALLINT = 57547
const SNAPSHOT = 57548
const SOME = 57549
const SQL = 57550
const START = 57551
const STRICT = 57552
const STRING = 57553
const STORING = 57554
const SUBSTRING = 57555
const SYMMETRIC = 57556
const TABLE = 57557
const TABLES = 57558
const TEXT = 57559
const THEN = 57560
const TIME = 57561
const TIMESTAMP = 57562
const TO = 57563
const TRAILING = 57564
const TRANSACTION = 57565
const TREAT = 57566
const TRIM = 57567
const TRUE = 57568
const TRUNCATE = 57569
const TYPE = 57570
const UNBOUNDED = 57571
const UNCOMMITTED = 57572
const UNION = 57573
const UNIQUE = 57574
const UNKNOWN = 57575
const UPDATE = 57576
const USER = 57577
const USING = 57578
const VALID = 57579
const VALIDATE = 57580
const VALUE = 57581
const VALUES = 57582
const VARCHAR = 57583
const VARIADIC = 57584
const VARYING = 57585
const WHEN = 57586
const WHERE = 57587
const WINDOW = 57588
const WITH = 57589
const WITHIN = 57590
const WITHOUT = 57591
const YEAR = 57592
const ZONE = 57593
const NOT_LA = 57594
const WITH_LA = 57595
const POSTFIXOP = 57596
const UMINUS = 57597

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"FCONST",
	"SCONST",
	"BCONST",
	"ICONST",
	"PARAM",
	"TYPECAST",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXPLAIN",
	"EXTRACT",
	"FALSE",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FOLLOWING",
	"FOR",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HOUR",
	"IF",
	"IFNULL",
	"IN",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARTIAL",
	"PARTITION",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SNAPSHOT",
	"SOME",
	"SQL",
	"START",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"TABLE",
	"TABLES",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"USER",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:4145

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 21,
	274, 21,
	-2, 318,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 32,
	1, 289,
	158, 289,
	186, 289,
	272, 289,
	274, 289,
	-2, 299,
	-1, 44,
	1, 292,
	158, 292,
	186, 292,
	272, 292,
	274, 292,
	-2, 298,
	-1, 53,
	1, 21,
	274, 21,
	-2, 318,
	-1, 235,
	1, 138,
	274, 138,
	-2, 780,
	-1, 266,
	134, 328,
	157, 328,
	-2, 295,
	-1, 269,
	134, 327,
	157, 327,
	-2, 293,
	-1, 378,
	134, 327,
	157, 327,
	-2, 296,
	-1, 435,
	271, 726,
	-2, 721,
	-1, 436,
	271, 727,
	-2, 722,
	-1, 442,
	6, 447,
	271, 447,
	-2, 860,
	-1, 464,
	6, 417,
	-2, 837,
	-1, 465,
	6, 444,
	271, 444,
	-2, 838,
	-1, 466,
	6, 425,
	-2, 839,
	-1, 467,
	6, 424,
	-2, 840,
	-1, 468,
	6, 444,
	271, 444,
	-2, 843,
	-1, 469,
	6, 444,
	271, 444,
	-2, 844,
	-1, 470,
	6, 445,
	-2, 847,
	-1, 471,
	6, 412,
	-2, 848,
	-1, 472,
	6, 412,
	-2, 849,
	-1, 473,
	6, 427,
	-2, 852,
	-1, 474,
	6, 413,
	-2, 857,
	-1, 475,
	6, 414,
	-2, 858,
	-1, 476,
	6, 415,
	-2, 859,
	-1, 477,
	6, 412,
	-2, 863,
	-1, 478,
	6, 418,
	-2, 868,
	-1, 479,
	6, 416,
	-2, 870,
	-1, 480,
	6, 446,
	-2, 874,
	-1, 481,
	6, 442,
	271, 442,
	-2, 878,
	-1, 739,
	87, 299,
	120, 299,
	134, 299,
	157, 299,
	161, 299,
	231, 299,
	-2, 549,
	-1, 747,
	271, 706,
	-2, 696,
	-1, 941,
	12, 0,
	13, 0,
	14, 0,
	254, 0,
	255, 0,
	256, 0,
	-2, 480,
	-1, 942,
	12, 0,
	13, 0,
	14, 0,
	254, 0,
	255, 0,
	256, 0,
	-2, 481,
	-1, 943,
	12, 0,
	13, 0,
	14, 0,
	254, 0,
	255, 0,
	256, 0,
	-2, 482,
	-1, 947,
	12, 0,
	13, 0,
	14, 0,
	254, 0,
	255, 0,
	256, 0,
	-2, 486,
	-1, 948,
	12, 0,
	13, 0,
	14, 0,
	254, 0,
	255, 0,
	256, 0,
	-2, 487,
	-1, 949,
	12, 0,
	13, 0,
	14, 0,
	254, 0,
	255, 0,
	256, 0,
	-2, 488,
	-1, 952,
	30, 0,
	111, 0,
	133, 0,
	203, 0,
	252, 0,
	-2, 493,
	-1, 983,
	166, 619,
	-2, 622,
	-1, 1133,
	87, 299,
	120, 299,
	134, 299,
	157, 299,
	161, 299,
	231, 299,
	-2, 369,
	-1, 1141,
	30, 0,
	111, 0,
	133, 0,
	203, 0,
	252, 0,
	-2, 494,
	-1, 1146,
	30, 0,
	111, 0,
	133, 0,
	203, 0,
	252, 0,
	-2, 495,
	-1, 1165,
	166, 618,
	-2, 621,
	-1, 1304,
	30, 0,
	111, 0,
	133, 0,
	203, 0,
	252, 0,
	-2, 496,
	-1, 1309,
	123, 0,
	-2, 506,
	-1, 1318,
	166, 620,
	-2, 623,
	-1, 1358,
	12, 0,
	13, 0,
	14, 0,
	254, 0,
	255, 0,
	256, 0,
	-2, 530,
	-1, 1359,
	12, 0,
	13, 0,
	14, 0,
	254, 0,
	255, 0,
	256, 0,
	-2, 531,
	-1, 1360,
	12, 0,
	13, 0,
	14, 0,
	254, 0,
	255, 0,
	256, 0,
	-2, 532,
	-1, 1364,
	12, 0,
	13, 0,
	14, 0,
	254, 0,
	255, 0,
	256, 0,
	-2, 536,
	-1, 1365,
	12, 0,
	13, 0,
	14, 0,
	254, 0,
	255, 0,
	256, 0,
	-2, 537,
	-1, 1366,
	12, 0,
	13, 0,
	14, 0,
	254, 0,
	255, 0,
	256, 0,
	-2, 538,
	-1, 1459,
	123, 0,
	-2, 507,
	-1, 1463,
	30, 0,
	111, 0,
	133, 0,
	203, 0,
	252, 0,
	-2, 510,
	-1, 1464,
	30, 0,
	111, 0,
	133, 0,
	203, 0,
	252, 0,
	-2, 512,
	-1, 1543,
	30, 0,
	111, 0,
	133, 0,
	203, 0,
	252, 0,
	-2, 511,
	-1, 1544,
	30, 0,
	111, 0,
	133, 0,
	203, 0,
	252, 0,
	-2, 513,
	-1, 1552,
	123, 0,
	-2, 539,
	-1, 1589,
	123, 0,
	-2, 540,
	-1, 1634,
	30, 0,
	133, 0,
	203, 0,
	252, 0,
	-2, 836,
}

const sqlNprod = 970
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 19517

var sqlAct = [...]int{

	980, 1633, 1616, 1618, 1654, 1617, 1594, 825, 1560, 1632,
	1500, 1338, 881, 1522, 1396, 270, 1427, 1428, 1445, 1533,
	292, 742, 1310, 1284, 865, 868, 236, 744, 494, 1439,
	1129, 1311, 818, 434, 1223, 14, 1222, 433, 1293, 275,
	31, 996, 1121, 677, 867, 426, 697, 501, 1079, 826,
	1168, 804, 1117, 795, 398, 1000, 965, 968, 777, 522,
	990, 892, 1132, 65, 366, 773, 20, 31, 550, 693,
	306, 535, 1038, 504, 1035, 277, 43, 699, 10, 6,
	506, 860, 399, 408, 495, 532, 890, 367, 496, 311,
	63, 86, 577, 31, 67, 561, 269, 280, 870, 313,
	44, 428, 309, 43, 381, 531, 66, 68, 45, 81,
	382, 233, 552, 482, 72, 380, 548, 278, 819, 1630,
	1161, 1195, 1521, 1211, 1212, 1213, 302, 889, 498, 43,
	1524, 392, 499, 1458, 993, 497, 498, 274, 288, 1582,
	499, 295, 274, 497, 267, 524, 303, 700, 1088, 700,
	259, 1624, 266, 524, 885, 1623, 317, 823, 885, 1615,
	314, 1610, 1462, 701, 885, 1208, 282, 1371, 1591, 994,
	702, 1462, 720, 721, 722, 1317, 1585, 1579, 318, 885,
	1521, 1570, 723, 1545, 1521, 1101, 1462, 49, 704, 1540,
	729, 1530, 885, 1520, 1521, 1505, 1521, 1504, 885, 793,
	885, 1485, 995, 992, 1161, 51, 1465, 1461, 703, 1161,
	1462, 1119, 1406, 484, 717, 885, 1314, 1275, 1271, 1161,
	523, 523, 1240, 1238, 1237, 1241, 1161, 1161, 1236, 1165,
	52, 1161, 1161, 1163, 1214, 1162, 886, 47, 1164, 885,
	1161, 792, 529, 48, 791, 530, 1103, 885, 840, 527,
	1209, 1167, 976, 1195, 880, 854, 1161, 997, 393, 671,
	670, 46, 542, 541, 1195, 1631, 334, 287, 53, 499,
	576, 730, 353, 1629, 1195, 385, 1586, 1529, 49, 1490,
	1486, 436, 379, 728, 400, 400, 1478, 1477, 49, 373,
	525, 1472, 1471, 725, 502, 341, 51, 1208, 525, 718,
	1470, 1469, 1456, 1386, 1210, 1381, 51, 1380, 489, 1379,
	1321, 991, 85, 493, 1299, 85, 483, 378, 342, 1423,
	724, 52, 85, 1088, 1283, 701, 1243, 1242, 47, 85,
	85, 52, 1139, 85, 48, 1230, 85, 85, 85, 488,
	1221, 85, 85, 85, 85, 1194, 316, 372, 1191, 1189,
	1178, 498, 822, 719, 973, 499, 1172, 1102, 497, 1050,
	1007, 1006, 46, 727, 85, 1205, 1206, 1207, 370, 1204,
	1201, 1202, 1203, 1196, 1197, 1198, 1199, 1200, 267, 1105,
	523, 750, 1209, 1561, 685, 687, 266, 303, 674, 392,
	391, 694, 1340, 1209, 1581, 1562, 1554, 394, 1536, 1527,
	1519, 1497, 1483, 1209, 733, 734, 735, 736, 737, 1450,
	702, 1454, 726, 740, 714, 715, 716, 1435, 713, 710,
	711, 712, 705, 706, 707, 708, 709, 515, 704, 1195,
	1308, 673, 1422, 753, 974, 1487, 1210, 317, 317, 1298,
	1281, 539, 1195, 747, 1280, 580, 1278, 1210, 703, 538,
	571, 1255, 1254, 1220, 717, 1186, 1185, 1210, 1177, 318,
	318, 572, 664, 565, 1158, 1154, 661, 581, 970, 665,
	666, 667, 778, 668, 781, 1064, 1063, 1045, 1005, 672,
	884, 783, 771, 770, 769, 741, 267, 683, 768, 267,
	267, 695, 682, 767, 689, 681, 766, 690, 691, 788,
	765, 1204, 1201, 1202, 1203, 1196, 1197, 1198, 1199, 1200,
	85, 85, 1204, 1201, 1202, 1203, 1196, 1197, 1198, 1199,
	1200, 764, 786, 1201, 1202, 1203, 1196, 1197, 1198, 1199,
	1200, 779, 763, 798, 775, 776, 782, 762, 1064, 718,
	85, 761, 85, 760, 85, 759, 85, 758, 388, 389,
	757, 748, 821, 746, 835, 311, 31, 46, 1209, 441,
	49, 85, 809, 811, 675, 65, 784, 293, 396, 31,
	486, 1542, 85, 1541, 485, 745, 702, 1301, 51, 1300,
	490, 842, 85, 85, 1426, 85, 1089, 365, 1140, 580,
	787, 580, 789, 719, 704, 1195, 67, 834, 814, 362,
	348, 755, 1440, 52, 819, 43, 801, 848, 66, 68,
	47, 581, 1210, 581, 703, 85, 48, 85, 1341, 841,
	837, 843, 317, 1195, 1001, 844, 314, 316, 316, 847,
	838, 836, 774, 347, 64, 579, 85, 1181, 85, 85,
	85, 85, 1085, 85, 318, 1600, 751, 1569, 1643, 1414,
	846, 85, 805, 227, 702, 57, 252, 85, 713, 710,
	711, 712, 705, 706, 707, 708, 709, 253, 580, 859,
	273, 438, 704, 1453, 1513, 85, 1097, 1512, 85, 1644,
	1203, 1196, 1197, 1198, 1199, 1200, 1267, 258, 409, 257,
	581, 1247, 703, 58, 1196, 1197, 1198, 1199, 1200, 1246,
	1176, 1175, 400, 272, 808, 718, 932, 933, 934, 935,
	936, 937, 938, 939, 940, 941, 942, 943, 944, 945,
	946, 947, 948, 949, 950, 951, 952, 264, 402, 1174,
	930, 1568, 887, 1173, 895, 1142, 863, 957, 839, 816,
	289, 815, 369, 289, 274, 298, 931, 967, 289, 967,
	308, 797, 1209, 261, 997, 345, 1602, 1266, 862, 719,
	1008, 864, 1019, 518, 1029, 1031, 1036, 1039, 1040, 1041,
	1502, 786, 1257, 981, 85, 1651, 786, 878, 879, 579,
	807, 579, 1080, 718, 894, 1078, 513, 512, 1563, 85,
	346, 1620, 502, 85, 1011, 702, 85, 1001, 1098, 507,
	85, 508, 85, 85, 901, 85, 1210, 1021, 85, 85,
	85, 59, 316, 704, 271, 85, 85, 1049, 977, 982,
	1081, 985, 972, 580, 971, 344, 1059, 712, 705, 706,
	707, 708, 709, 703, 1061, 1643, 1030, 719, 806, 1053,
	1327, 368, 1042, 1043, 1044, 581, 524, 1330, 1612, 1198,
	1199, 1200, 507, 1096, 508, 772, 1550, 1184, 579, 1621,
	738, 993, 1657, 1014, 1613, 509, 570, 558, 569, 1151,
	563, 1650, 262, 1328, 1054, 1196, 1197, 1198, 1199, 1200,
	1149, 694, 337, 339, 60, 955, 797, 1294, 1074, 265,
	1258, 55, 796, 1084, 1091, 1622, 994, 343, 1015, 274,
	1106, 1090, 997, 1087, 901, 1619, 705, 706, 707, 708,
	709, 1095, 1093, 1642, 1640, 1104, 921, 1438, 509, 1100,
	1112, 1092, 1264, 1099, 31, 1503, 61, 1094, 997, 995,
	992, 1016, 1013, 56, 1144, 1083, 966, 874, 573, 356,
	1147, 363, 383, 702, 1152, 85, 317, 1649, 344, 289,
	1110, 1114, 335, 1128, 1141, 1134, 85, 85, 1146, 333,
	43, 704, 1138, 1113, 1115, 384, 956, 384, 318, 1655,
	1507, 1506, 1249, 1481, 779, 1495, 782, 1160, 1058, 491,
	875, 703, 85, 575, 997, 85, 1017, 1169, 953, 289,
	517, 525, 364, 776, 775, 680, 1664, 574, 676, 1367,
	1326, 1166, 1182, 1413, 1595, 70, 1187, 1656, 383, 507,
	1412, 508, 1143, 579, 1145, 1148, 921, 1075, 669, 920,
	510, 1135, 1150, 1658, 543, 850, 1496, 740, 1410, 62,
	1066, 852, 1065, 1036, 1036, 1036, 54, 1448, 991, 1289,
	1012, 1288, 1402, 1157, 1397, 73, 853, 1159, 1482, 707,
	708, 709, 1395, 1245, 851, 1180, 343, 794, 954, 301,
	1170, 1171, 272, 375, 1252, 78, 1285, 1118, 1368, 1004,
	74, 1663, 1403, 510, 1369, 509, 85, 85, 85, 1225,
	1553, 400, 85, 1411, 1480, 85, 756, 547, 75, 1224,
	502, 85, 85, 85, 85, 85, 1307, 85, 85, 1219,
	1190, 1409, 1244, 77, 85, 1153, 85, 1227, 1228, 1229,
	1232, 1253, 85, 688, 1251, 845, 700, 361, 545, 920,
	1272, 85, 85, 359, 564, 559, 358, 85, 546, 1265,
	1261, 1269, 1263, 357, 354, 1268, 316, 1274, 1273, 963,
	300, 1303, 702, 1304, 663, 1398, 1003, 1399, 1277, 1279,
	961, 1393, 1262, 85, 1309, 85, 85, 1260, 85, 1248,
	704, 1108, 1319, 876, 1295, 1296, 1291, 85, 1319, 873,
	1401, 528, 85, 85, 505, 85, 526, 1404, 521, 514,
	703, 785, 1336, 511, 76, 1323, 1324, 1325, 1335, 1514,
	386, 1345, 1320, 285, 1347, 705, 706, 707, 708, 709,
	289, 1644, 350, 817, 567, 1516, 813, 829, 959, 1270,
	958, 882, 833, 797, 964, 308, 1329, 1331, 1332, 812,
	1344, 79, 3, 702, 1524, 1376, 1377, 1348, 1400, 1346,
	510, 1315, 797, 69, 1383, 1384, 1385, 1342, 810, 1565,
	702, 704, 251, 1588, 1124, 73, 1286, 1287, 390, 1583,
	1290, 824, 387, 696, 540, 286, 901, 1374, 1378, 1127,
	1375, 703, 900, 80, 883, 78, 1137, 1661, 1388, 1292,
	74, 718, 351, 923, 1392, 1125, 294, 922, 703, 1662,
	254, 255, 1195, 702, 855, 960, 1441, 856, 75, 1455,
	901, 1387, 962, 1372, 1333, 421, 1302, 901, 1437, 1239,
	1048, 1407, 1408, 77, 1382, 1436, 1047, 1424, 1459, 1046,
	998, 31, 1433, 1463, 1464, 1433, 1432, 857, 1466, 1432,
	1467, 1425, 1334, 1468, 1434, 719, 83, 1434, 901, 237,
	1452, 1460, 1126, 858, 749, 260, 83, 1501, 1473, 71,
	662, 355, 1476, 281, 281, 1451, 85, 291, 1474, 1611,
	291, 297, 291, 1183, 1549, 291, 304, 291, 237, 1442,
	1532, 1002, 900, 289, 754, 25, 1430, 414, 921, 1394,
	85, 1250, 1484, 923, 897, 1402, 869, 922, 336, 582,
	568, 1479, 557, 85, 76, 85, 437, 85, 360, 289,
	85, 710, 711, 712, 705, 706, 707, 708, 709, 551,
	560, 85, 921, 1010, 85, 1403, 487, 439, 898, 921,
	901, 440, 85, 1508, 899, 85, 1443, 1444, 1491, 1492,
	1449, 79, 780, 427, 1494, 896, 312, 827, 999, 1179,
	752, 413, 1526, 419, 418, 978, 410, 340, 231, 1515,
	921, 232, 1082, 1421, 1525, 820, 1509, 1517, 1537, 877,
	684, 1523, 1528, 1259, 263, 1192, 1433, 1028, 1543, 1544,
	1432, 1020, 1018, 1535, 1009, 371, 85, 500, 1434, 1433,
	828, 920, 397, 1432, 897, 1510, 1511, 352, 1398, 888,
	1399, 1434, 1136, 1055, 1548, 395, 692, 284, 1557, 702,
	283, 1022, 866, 349, 1546, 544, 849, 1539, 1559, 516,
	256, 1564, 1599, 1401, 1256, 920, 1555, 704, 1558, 50,
	1404, 308, 920, 19, 17, 16, 901, 15, 13, 308,
	502, 12, 921, 11, 237, 237, 18, 703, 85, 85,
	85, 1572, 1111, 9, 8, 1574, 85, 85, 1576, 1573,
	7, 1580, 85, 920, 85, 24, 85, 85, 85, 85,
	23, 1575, 786, 22, 83, 1433, 291, 5, 237, 1432,
	376, 1400, 85, 1107, 901, 1587, 4, 1434, 2, 1,
	85, 85, 0, 0, 85, 281, 1538, 1590, 0, 0,
	85, 85, 289, 1584, 0, 901, 291, 0, 0, 0,
	1606, 1604, 1601, 0, 1605, 1609, 291, 291, 1607, 519,
	1578, 1626, 1608, 1603, 0, 0, 0, 1625, 1596, 1597,
	1627, 0, 0, 1637, 1637, 1433, 0, 1628, 718, 1432,
	0, 1639, 85, 1638, 1641, 920, 0, 1434, 921, 536,
	0, 536, 1645, 0, 0, 1637, 1648, 0, 0, 0,
	1120, 1647, 0, 0, 0, 0, 415, 32, 1660, 1659,
	237, 0, 536, 237, 237, 237, 901, 237, 0, 0,
	1646, 1614, 1637, 1665, 0, 83, 0, 0, 0, 0,
	0, 679, 719, 0, 32, 85, 921, 85, 0, 85,
	0, 1124, 0, 0, 0, 0, 85, 0, 0, 281,
	268, 0, 698, 276, 1022, 1022, 1127, 921, 0, 0,
	32, 0, 0, 0, 0, 0, 1122, 0, 0, 0,
	0, 276, 1125, 0, 900, 0, 0, 0, 0, 0,
	85, 0, 85, 0, 0, 923, 1123, 0, 0, 922,
	85, 920, 85, 0, 0, 0, 0, 713, 710, 711,
	712, 705, 706, 707, 708, 709, 0, 0, 900, 0,
	0, 0, 1022, 1022, 1022, 900, 0, 0, 0, 923,
	0, 0, 0, 922, 0, 0, 923, 0, 921, 1126,
	922, 0, 0, 1155, 1156, 0, 0, 829, 0, 920,
	0, 0, 0, 0, 0, 0, 900, 0, 291, 0,
	0, 0, 0, 0, 85, 85, 0, 923, 85, 0,
	920, 922, 0, 802, 0, 0, 85, 291, 289, 0,
	291, 289, 0, 0, 291, 0, 831, 832, 85, 291,
	1120, 0, 291, 237, 237, 0, 897, 0, 0, 536,
	698, 1216, 1217, 1218, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 85, 85, 85, 0, 85, 0, 239,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	897, 1124, 0, 250, 85, 0, 0, 897, 900, 0,
	0, 920, 1022, 1022, 0, 0, 1127, 0, 0, 923,
	0, 0, 0, 922, 85, 0, 1122, 0, 0, 0,
	0, 0, 1125, 0, 0, 0, 241, 0, 897, 0,
	0, 0, 0, 0, 0, 0, 1123, 0, 0, 0,
	0, 0, 0, 0, 0, 240, 242, 0, 0, 1447,
	0, 0, 0, 0, 268, 1022, 1022, 1022, 1022, 1022,
	1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022,
	1022, 1022, 1022, 0, 1022, 0, 0, 243, 0, 1126,
	0, 1305, 1306, 1417, 0, 0, 0, 244, 245, 861,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	291, 802, 246, 0, 900, 0, 0, 289, 289, 0,
	897, 289, 0, 0, 0, 923, 0, 0, 0, 922,
	0, 0, 0, 0, 0, 0, 291, 1446, 0, 237,
	0, 0, 0, 0, 1349, 1350, 1351, 1352, 1353, 1354,
	1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364,
	1365, 1366, 900, 1370, 0, 0, 0, 0, 0, 0,
	0, 0, 268, 923, 0, 268, 268, 922, 0, 0,
	0, 0, 0, 900, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 923, 0, 0, 0, 922, 739,
	0, 247, 0, 743, 248, 0, 0, 0, 249, 0,
	0, 0, 0, 0, 0, 0, 0, 702, 0, 720,
	721, 722, 0, 0, 0, 0, 897, 0, 0, 723,
	291, 1056, 1057, 1499, 0, 704, 802, 729, 0, 1062,
	0, 0, 0, 0, 0, 1067, 1068, 1070, 1072, 1073,
	0, 1076, 1077, 0, 900, 703, 0, 0, 291, 0,
	1086, 717, 0, 0, 0, 923, 291, 1531, 0, 922,
	0, 0, 1022, 0, 897, 861, 536, 289, 0, 0,
	0, 861, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 897, 0, 0, 0, 0,
	0, 0, 0, 32, 0, 0, 0, 679, 0, 237,
	291, 0, 1109, 0, 0, 0, 32, 0, 730, 0,
	0, 1116, 0, 0, 0, 0, 1131, 1131, 0, 291,
	728, 0, 0, 0, 0, 702, 0, 720, 721, 722,
	725, 0, 0, 0, 0, 0, 718, 723, 0, 1022,
	0, 1498, 0, 704, 0, 729, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 897, 724, 0, 0,
	0, 0, 0, 703, 0, 0, 0, 0, 0, 717,
	0, 702, 0, 720, 721, 722, 0, 0, 0, 0,
	0, 0, 1598, 723, 0, 0, 0, 0, 0, 704,
	719, 729, 0, 0, 0, 0, 0, 0, 0, 0,
	727, 0, 0, 0, 0, 0, 0, 0, 0, 703,
	0, 0, 1022, 0, 0, 717, 0, 0, 1552, 0,
	0, 829, 0, 0, 0, 0, 730, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 728, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 725, 726,
	0, 714, 715, 716, 718, 713, 710, 711, 712, 705,
	706, 707, 708, 709, 0, 0, 0, 1051, 0, 0,
	0, 0, 730, 0, 1052, 724, 0, 891, 0, 0,
	0, 0, 0, 0, 728, 0, 0, 0, 0, 0,
	698, 1589, 0, 0, 725, 0, 0, 0, 0, 0,
	718, 0, 0, 0, 0, 0, 0, 969, 719, 0,
	0, 0, 0, 0, 291, 0, 0, 0, 727, 0,
	0, 724, 0, 0, 0, 0, 0, 1276, 0, 802,
	0, 679, 0, 0, 1282, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 291, 0, 0, 291, 0,
	0, 0, 0, 0, 719, 0, 1297, 0, 0, 1131,
	0, 0, 0, 0, 727, 0, 0, 726, 0, 714,
	715, 716, 0, 713, 710, 711, 712, 705, 706, 707,
	708, 709, 0, 0, 0, 0, 0, 0, 0, 0,
	1235, 0, 0, 0, 0, 0, 0, 0, 0, 276,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1339, 0, 0, 726, 0, 714, 715, 716, 0, 713,
	710, 711, 712, 705, 706, 707, 708, 709, 0, 0,
	0, 0, 0, 0, 0, 0, 1234, 0, 0, 702,
	0, 720, 721, 722, 0, 0, 0, 0, 0, 0,
	0, 723, 0, 0, 0, 0, 0, 704, 0, 729,
	0, 32, 0, 0, 702, 0, 720, 721, 722, 0,
	1133, 0, 1390, 1391, 802, 0, 723, 703, 0, 0,
	698, 698, 704, 717, 729, 0, 1415, 0, 1416, 0,
	291, 1418, 1419, 1420, 0, 0, 0, 0, 0, 0,
	0, 0, 703, 0, 1429, 0, 802, 1429, 717, 0,
	0, 0, 0, 0, 291, 291, 0, 0, 291, 0,
	0, 0, 0, 0, 698, 1131, 0, 0, 0, 0,
	0, 0, 0, 969, 0, 0, 0, 0, 0, 0,
	730, 0, 0, 0, 0, 0, 0, 739, 0, 0,
	0, 0, 728, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 725, 0, 0, 730, 1475, 0, 718, 0,
	0, 0, 0, 0, 0, 0, 0, 728, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 725, 0, 724,
	0, 0, 0, 718, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 739, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 724, 0, 0, 0, 0, 802,
	0, 1493, 719, 237, 0, 0, 0, 0, 0, 0,
	291, 702, 727, 720, 721, 722, 0, 0, 0, 0,
	0, 0, 0, 723, 0, 0, 0, 719, 1429, 704,
	0, 729, 0, 0, 0, 0, 1195, 727, 1211, 1212,
	1213, 1429, 0, 0, 291, 0, 1534, 0, 0, 703,
	0, 0, 0, 0, 291, 717, 698, 0, 0, 0,
	0, 726, 0, 714, 715, 716, 0, 713, 710, 711,
	712, 705, 706, 707, 708, 709, 891, 0, 0, 891,
	1208, 0, 0, 0, 1233, 0, 726, 0, 714, 715,
	716, 0, 713, 710, 711, 712, 705, 706, 707, 708,
	709, 0, 0, 0, 0, 0, 1593, 0, 0, 0,
	0, 702, 730, 720, 721, 722, 0, 0, 1566, 1567,
	0, 0, 1571, 723, 728, 0, 0, 1429, 0, 704,
	237, 729, 0, 0, 725, 0, 0, 0, 0, 0,
	718, 0, 698, 0, 0, 0, 0, 0, 0, 703,
	21, 0, 0, 0, 0, 717, 0, 0, 0, 0,
	35, 724, 0, 0, 0, 1209, 0, 698, 698, 291,
	0, 237, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 37, 0, 0, 0, 1429, 1534, 42,
	0, 0, 0, 0, 719, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 727, 0, 0, 0, 291, 0,
	0, 0, 730, 0, 26, 0, 38, 0, 0, 1210,
	27, 0, 0, 0, 728, 0, 0, 0, 32, 0,
	0, 0, 28, 0, 725, 0, 0, 0, 0, 0,
	718, 0, 0, 0, 0, 891, 891, 0, 0, 891,
	0, 0, 0, 726, 0, 714, 715, 716, 0, 713,
	710, 711, 712, 705, 706, 707, 708, 709, 0, 0,
	0, 0, 0, 1592, 0, 0, 0, 0, 0, 0,
	1205, 1206, 1207, 0, 1204, 1201, 1202, 1203, 1196, 1197,
	1198, 1199, 1200, 0, 719, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 727, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 40, 0, 0, 29, 0,
	39, 0, 0, 0, 0, 30, 0, 0, 49, 0,
	0, 0, 33, 34, 0, 0, 0, 0, 0, 0,
	36, 0, 0, 0, 0, 0, 51, 0, 0, 0,
	0, 0, 0, 726, 0, 714, 715, 716, 41, 713,
	710, 711, 712, 705, 706, 707, 708, 709, 0, 0,
	0, 52, 0, 0, 0, 0, 0, 0, 47, 0,
	0, 0, 0, 1518, 48, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 578, 0, 0, 0, 0, 0,
	0, 0, 46, 0, 0, 891, 87, 88, 583, 89,
	584, 585, 586, 587, 588, 589, 590, 591, 90, 91,
	184, 185, 186, 92, 187, 188, 592, 93, 189, 190,
	94, 593, 594, 191, 192, 193, 595, 194, 596, 320,
	597, 95, 96, 97, 0, 98, 598, 99, 599, 321,
	100, 101, 600, 601, 602, 603, 604, 605, 102, 103,
	104, 105, 195, 106, 196, 197, 606, 607, 107, 608,
	609, 610, 108, 109, 611, 612, 739, 613, 198, 110,
	199, 614, 615, 111, 112, 200, 113, 616, 617, 618,
	322, 619, 114, 201, 620, 202, 621, 115, 116, 203,
	204, 622, 623, 117, 624, 323, 118, 205, 206, 207,
	625, 208, 626, 324, 119, 325, 120, 121, 627, 628,
	209, 326, 122, 327, 629, 123, 630, 631, 124, 0,
	125, 126, 127, 128, 129, 328, 130, 131, 132, 632,
	133, 633, 210, 134, 211, 135, 136, 634, 635, 636,
	637, 638, 137, 212, 329, 138, 330, 213, 139, 140,
	639, 214, 141, 215, 640, 142, 143, 144, 216, 145,
	146, 641, 148, 149, 147, 150, 642, 151, 331, 152,
	153, 217, 154, 0, 238, 155, 156, 643, 157, 158,
	644, 159, 160, 332, 161, 218, 162, 645, 163, 164,
	166, 219, 165, 220, 646, 647, 167, 168, 648, 221,
	222, 649, 650, 169, 223, 224, 651, 170, 171, 172,
	173, 652, 653, 174, 175, 654, 655, 176, 177, 178,
	225, 226, 656, 179, 657, 658, 659, 660, 180, 181,
	182, 183, 0, 578, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 790, 87, 88, 583, 89, 584,
	585, 586, 587, 588, 589, 590, 591, 90, 91, 184,
	185, 186, 92, 187, 188, 592, 93, 189, 190, 94,
	593, 594, 191, 192, 193, 595, 194, 596, 320, 597,
	95, 96, 97, 0, 98, 598, 99, 599, 321, 100,
	101, 600, 601, 602, 603, 604, 605, 102, 103, 104,
	105, 195, 106, 196, 197, 606, 607, 107, 608, 609,
	610, 108, 109, 611, 612, 0, 613, 198, 110, 199,
	614, 615, 111, 112, 200, 113, 616, 617, 618, 322,
	619, 114, 201, 620, 202, 621, 115, 116, 203, 204,
	622, 623, 117, 624, 323, 118, 205, 206, 207, 625,
	208, 626, 324, 119, 325, 120, 121, 627, 628, 209,
	326, 122, 327, 629, 123, 630, 631, 124, 0, 125,
	126, 127, 128, 129, 328, 130, 131, 132, 632, 133,
	633, 210, 134, 211, 135, 136, 634, 635, 636, 637,
	638, 137, 212, 329, 138, 330, 213, 139, 140, 639,
	214, 141, 215, 640, 142, 143, 144, 216, 145, 146,
	641, 148, 149, 147, 150, 642, 151, 331, 152, 153,
	217, 154, 0, 238, 155, 156, 643, 157, 158, 644,
	159, 160, 332, 161, 218, 162, 645, 163, 164, 166,
	219, 165, 220, 646, 647, 167, 168, 648, 221, 222,
	649, 650, 169, 223, 224, 651, 170, 171, 172, 173,
	652, 653, 174, 175, 654, 655, 176, 177, 178, 225,
	226, 656, 179, 657, 658, 659, 660, 180, 181, 182,
	183, 435, 423, 424, 425, 422, 411, 0, 0, 0,
	0, 0, 0, 87, 88, 987, 89, 0, 0, 0,
	0, 417, 0, 0, 0, 90, 91, 184, 464, 465,
	92, 466, 467, 0, 93, 189, 190, 94, 432, 450,
	468, 469, 193, 0, 460, 0, 443, 0, 95, 96,
	97, 0, 98, 0, 99, 0, 321, 100, 101, 0,
	444, 446, 0, 445, 447, 102, 103, 104, 105, 470,
	106, 471, 472, 0, 0, 107, 0, 988, 0, 463,
	109, 0, 0, 0, 0, 416, 110, 451, 430, 0,
	111, 112, 473, 113, 0, 0, 0, 322, 0, 114,
	461, 0, 202, 0, 115, 116, 457, 459, 0, 0,
	117, 0, 323, 118, 474, 475, 476, 0, 442, 0,
	324, 119, 325, 120, 121, 0, 0, 462, 326, 122,
	327, 0, 123, 0, 0, 124, 0, 125, 126, 127,
	128, 129, 328, 130, 131, 132, 406, 133, 431, 458,
	134, 477, 135, 136, 0, 0, 0, 0, 0, 137,
	212, 329, 138, 330, 452, 139, 140, 0, 453, 141,
	215, 0, 142, 143, 144, 478, 145, 146, 0, 148,
	149, 147, 150, 0, 151, 331, 152, 153, 420, 154,
	0, 238, 155, 156, 0, 157, 158, 448, 159, 160,
	332, 161, 479, 162, 0, 163, 164, 166, 219, 165,
	454, 0, 0, 167, 168, 0, 221, 480, 0, 0,
	169, 455, 456, 429, 170, 171, 172, 173, 0, 0,
	174, 175, 449, 0, 176, 177, 178, 225, 481, 986,
	179, 0, 0, 0, 0, 180, 181, 182, 183, 407,
	0, 435, 423, 424, 425, 422, 411, 0, 0, 403,
	404, 989, 0, 87, 88, 405, 89, 0, 412, 984,
	0, 417, 0, 0, 0, 90, 91, 184, 464, 465,
	92, 466, 467, 0, 93, 189, 190, 94, 432, 450,
	468, 469, 193, 0, 460, 0, 443, 0, 95, 96,
	97, 0, 98, 0, 99, 0, 321, 100, 101, 0,
	444, 446, 0, 445, 447, 102, 103, 104, 105, 470,
	106, 471, 472, 503, 0, 107, 0, 0, 0, 463,
	109, 0, 0, 0, 0, 416, 110, 451, 430, 0,
	111, 112, 473, 113, 0, 0, 0, 322, 0, 114,
	461, 0, 202, 0, 115, 116, 457, 459, 0, 0,
	117, 0, 323, 118, 474, 475, 476, 0, 442, 0,
	324, 119, 325, 120, 121, 0, 0, 462, 326, 122,
	327, 0, 123, 0, 0, 124, 0, 125, 126, 127,
	128, 129, 328, 130, 131, 132, 406, 133, 431, 458,
	134, 477, 135, 136, 0, 0, 0, 0, 0, 137,
	212, 329, 138, 330, 452, 139, 140, 0, 453, 141,
	215, 0, 142, 143, 144, 478, 145, 146, 0, 148,
	149, 147, 150, 0, 151, 331, 152, 153, 420, 154,
	0, 238, 155, 156, 49, 157, 158, 448, 159, 160,
	332, 161, 479, 162, 0, 163, 164, 166, 219, 165,
	454, 0, 51, 167, 168, 0, 221, 480, 0, 0,
	169, 455, 456, 429, 170, 171, 172, 173, 0, 0,
	174, 175, 449, 0, 176, 177, 178, 319, 481, 0,
	179, 0, 0, 0, 47, 180, 181, 182, 183, 407,
	48, 435, 423, 424, 425, 422, 411, 0, 0, 403,
	404, 0, 0, 87, 88, 405, 89, 0, 412, 0,
	0, 417, 0, 0, 0, 90, 91, 184, 464, 465,
	92, 466, 467, 0, 93, 189, 190, 94, 432, 450,
	468, 469, 193, 0, 460, 0, 443, 0, 95, 96,
	97, 0, 98, 0, 99, 0, 321, 100, 101, 0,
	444, 446, 0, 445, 447, 102, 103, 104, 105, 470,
	106, 471, 472, 0, 0, 107, 0, 0, 0, 463,
	109, 0, 0, 0, 0, 416, 110, 451, 430, 0,
	111, 112, 473, 113, 0, 0, 0, 322, 0, 114,
	461, 0, 202, 0, 115, 116, 457, 459, 0, 0,
	117, 0, 323, 118, 474, 475, 476, 0, 442, 0,
	324, 119, 325, 120, 121, 0, 0, 462, 326, 122,
	327, 0, 123, 0, 0, 124, 0, 125, 126, 127,
	128, 129, 328, 130, 131, 132, 406, 133, 431, 458,
	134, 477, 135, 136, 0, 0, 0, 0, 0, 137,
	212, 329, 138, 330, 452, 139, 140, 0, 453, 141,
	215, 0, 142, 143, 144, 478, 145, 146, 0, 148,
	149, 147, 150, 0, 151, 331, 152, 153, 420, 154,
	0, 238, 155, 156, 49, 157, 158, 448, 159, 160,
	332, 161, 479, 162, 0, 163, 164, 166, 219, 165,
	454, 0, 51, 167, 168, 0, 221, 480, 0, 0,
	169, 455, 456, 429, 170, 171, 172, 173, 0, 0,
	174, 175, 449, 0, 176, 177, 178, 319, 481, 0,
	179, 0, 0, 0, 47, 180, 181, 182, 183, 407,
	48, 435, 423, 424, 425, 422, 411, 0, 0, 403,
	404, 0, 0, 87, 88, 405, 89, 0, 412, 0,
	0, 417, 0, 0, 0, 90, 91, 184, 464, 465,
	92, 466, 467, 1032, 93, 189, 190, 94, 432, 450,
	468, 469, 193, 0, 460, 0, 443, 0, 95, 96,
	97, 0, 98, 0, 99, 0, 321, 100, 101, 0,
	444, 446, 0, 445, 447, 102, 103, 104, 105, 470,
	106, 471, 472, 0, 0, 107, 0, 0, 0, 463,
	109, 0, 0, 0, 0, 416, 110, 451, 430, 0,
	111, 112, 473, 113, 0, 0, 1037, 322, 0, 114,
	461, 0, 202, 0, 115, 116, 457, 459, 0, 0,
	117, 0, 323, 118, 474, 475, 476, 0, 442, 0,
	324, 119, 325, 120, 121, 0, 1033, 462, 326, 122,
	327, 0, 123, 0, 0, 124, 0, 125, 126, 127,
	128, 129, 328, 130, 131, 132, 406, 133, 431, 458,
	134, 477, 135, 136, 0, 0, 0, 0, 0, 137,
	212, 329, 138, 330, 452, 139, 140, 0, 453, 141,
	215, 0, 142, 143, 144, 478, 145, 146, 0, 148,
	149, 147, 150, 0, 151, 331, 152, 153, 420, 154,
	0, 238, 155, 156, 0, 157, 158, 448, 159, 160,
	332, 161, 479, 162, 0, 163, 164, 166, 219, 165,
	454, 0, 0, 167, 168, 0, 221, 480, 0, 1034,
	169, 455, 456, 429, 170, 171, 172, 173, 0, 0,
	174, 175, 449, 0, 176, 177, 178, 225, 481, 0,
	179, 0, 0, 0, 0, 180, 181, 182, 183, 407,
	0, 435, 423, 424, 425, 422, 411, 0, 0, 403,
	404, 0, 0, 87, 88, 405, 89, 0, 412, 0,
	0, 417, 0, 0, 0, 90, 91, 184, 464, 465,
	92, 466, 467, 0, 93, 189, 190, 94, 432, 450,
	468, 469, 193, 0, 460, 0, 443, 0, 95, 96,
	97, 0, 98, 0, 99, 0, 321, 100, 101, 0,
	444, 446, 0, 445, 447, 102, 103, 104, 105, 470,
	106, 471, 472, 0, 0, 107, 0, 0, 0, 463,
	109, 0, 0, 0, 0, 416, 110, 451, 430, 0,
	111, 112, 473, 113, 0, 0, 0, 322, 0, 114,
	461, 0, 202, 0, 115, 116, 457, 459, 0, 0,
	117, 0, 323, 118, 474, 475, 476, 0, 442, 0,
	324, 119, 325, 120, 121, 0, 0, 462, 326, 122,
	327, 0, 123, 0, 0, 124, 0, 125, 126, 127,
	128, 129, 328, 130, 131, 132, 406, 133, 431, 458,
	134, 477, 135, 136, 0, 0, 0, 0, 0, 137,
	212, 329, 138, 330, 452, 139, 140, 0, 453, 141,
	215, 0, 142, 143, 144, 478, 145, 146, 0, 148,
	149, 147, 150, 0, 151, 331, 152, 153, 420, 154,
	0, 238, 155, 156, 0, 157, 158, 448, 159, 160,
	332, 161, 479, 162, 0, 163, 164, 166, 219, 165,
	454, 0, 0, 167, 168, 0, 221, 480, 0, 0,
	169, 455, 456, 429, 170, 171, 172, 173, 0, 0,
	174, 175, 449, 0, 176, 177, 178, 225, 481, 0,
	179, 0, 0, 0, 0, 180, 181, 182, 183, 407,
	0, 435, 423, 424, 425, 422, 411, 0, 0, 403,
	404, 0, 0, 87, 88, 405, 89, 0, 412, 1373,
	0, 417, 0, 0, 0, 90, 91, 184, 464, 465,
	92, 466, 467, 0, 93, 189, 190, 94, 432, 450,
	468, 469, 193, 0, 460, 0, 443, 0, 95, 96,
	97, 0, 98, 0, 99, 0, 321, 100, 101, 0,
	444, 446, 0, 445, 447, 102, 103, 104, 105, 470,
	106, 471, 472, 0, 0, 107, 0, 0, 0, 463,
	109, 0, 0, 0, 0, 416, 110, 451, 430, 0,
	111, 112, 473, 113, 0, 0, 0, 322, 0, 114,
	461, 0, 202, 0, 115, 116, 457, 459, 0, 0,
	117, 0, 323, 118, 474, 475, 476, 0, 442, 0,
	324, 119, 325, 120, 121, 0, 0, 462, 326, 122,
	327, 0, 123, 0, 0, 124, 0, 125, 126, 127,
	128, 129, 328, 130, 131, 132, 406, 133, 431, 458,
	134, 477, 135, 136, 0, 0, 0, 0, 0, 137,
	212, 329, 138, 330, 452, 139, 140, 0, 453, 141,
	215, 0, 142, 143, 144, 478, 145, 146, 0, 148,
	149, 147, 150, 0, 151, 331, 152, 153, 420, 154,
	0, 238, 155, 156, 0, 157, 158, 448, 159, 160,
	332, 161, 479, 162, 0, 163, 164, 166, 219, 165,
	454, 0, 0, 167, 168, 0, 221, 480, 0, 0,
	169, 455, 456, 429, 170, 171, 172, 173, 0, 0,
	174, 175, 449, 0, 176, 177, 178, 225, 481, 0,
	179, 0, 0, 0, 0, 180, 181, 182, 183, 407,
	0, 435, 423, 424, 425, 422, 411, 0, 0, 403,
	404, 0, 0, 87, 88, 405, 89, 0, 412, 1316,
	0, 417, 0, 0, 0, 90, 91, 184, 464, 465,
	92, 466, 467, 0, 93, 189, 190, 94, 432, 450,
	468, 469, 193, 0, 460, 0, 443, 0, 95, 96,
	97, 0, 98, 0, 99, 0, 321, 100, 101, 0,
	444, 446, 0, 445, 447, 102, 103, 104, 105, 470,
	106, 471, 472, 0, 0, 107, 0, 0, 0, 463,
	109, 0, 0, 0, 0, 416, 110, 451, 430, 0,
	111, 112, 473, 113, 0, 0, 0, 322, 0, 114,
	461, 0, 202, 0, 115, 116, 457, 459, 0, 0,
	117, 0, 323, 118, 474, 475, 476, 0, 442, 0,
	324, 119, 325, 120, 121, 0, 0, 462, 326, 122,
	327, 0, 123, 0, 0, 124, 0, 125, 126, 127,
	128, 129, 328, 130, 131, 132, 406, 133, 431, 458,
	134, 477, 135, 136, 0, 0, 0, 0, 0, 137,
	212, 329, 138, 330, 452, 139, 140, 0, 453, 141,
	215, 0, 142, 143, 144, 478, 145, 146, 0, 148,
	149, 147, 150, 0, 151, 331, 152, 153, 420, 154,
	0, 238, 155, 156, 0, 157, 158, 448, 159, 160,
	332, 161, 479, 162, 0, 163, 164, 166, 219, 165,
	454, 0, 0, 167, 168, 0, 221, 480, 0, 0,
	169, 455, 456, 429, 170, 171, 172, 173, 0, 0,
	174, 175, 449, 0, 176, 177, 178, 225, 481, 0,
	179, 0, 0, 0, 0, 180, 181, 182, 183, 407,
	0, 435, 423, 424, 425, 422, 411, 0, 0, 403,
	404, 0, 0, 87, 88, 405, 89, 0, 412, 983,
	0, 417, 0, 0, 0, 90, 91, 184, 464, 465,
	92, 466, 467, 0, 93, 189, 190, 94, 432, 450,
	468, 469, 193, 0, 460, 0, 443, 0, 95, 96,
	97, 0, 98, 0, 99, 0, 321, 100, 101, 0,
	444, 446, 0, 445, 447, 102, 103, 104, 105, 470,
	106, 471, 472, 0, 0, 107, 0, 0, 0, 463,
	109, 0, 0, 0, 0, 416, 110, 451, 430, 0,
	111, 112, 473, 113, 0, 0, 0, 322, 0, 114,
	461, 0, 202, 0, 115, 116, 457, 459, 0, 0,
	117, 0, 323, 118, 474, 475, 476, 0, 442, 0,
	324, 119, 325, 120, 121, 0, 0, 462, 326, 122,
	327, 0, 123, 0, 0, 124, 0, 125, 126, 127,
	128, 129, 328, 130, 131, 132, 406, 133, 431, 458,
	134, 477, 135, 136, 0, 0, 0, 0, 0, 137,
	212, 329, 138, 330, 452, 139, 140, 0, 453, 141,
	215, 0, 142, 143, 144, 478, 145, 146, 0, 148,
	149, 147, 150, 0, 151, 331, 152, 153, 420, 154,
	0, 238, 155, 156, 0, 157, 158, 448, 159, 160,
	332, 161, 479, 162, 0, 163, 164, 166, 219, 165,
	454, 0, 0, 167, 168, 0, 221, 480, 0, 0,
	169, 455, 456, 429, 170, 171, 172, 173, 0, 0,
	174, 175, 449, 0, 176, 177, 178, 225, 481, 0,
	179, 0, 0, 0, 0, 180, 181, 182, 183, 407,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 403,
	404, 0, 0, 0, 0, 405, 745, 979, 412, 435,
	423, 424, 425, 422, 411, 0, 0, 0, 0, 0,
	0, 87, 88, 0, 89, 0, 0, 0, 0, 417,
	0, 0, 0, 90, 91, 184, 464, 465, 92, 466,
	467, 0, 93, 189, 190, 94, 432, 450, 468, 469,
	193, 0, 460, 0, 443, 0, 95, 96, 97, 0,
	98, 0, 99, 0, 321, 100, 101, 0, 444, 446,
	0, 445, 447, 102, 103, 104, 105, 470, 106, 471,
	472, 0, 0, 107, 0, 0, 0, 463, 109, 0,
	0, 0, 0, 416, 110, 451, 430, 0, 111, 112,
	473, 113, 0, 0, 0, 322, 0, 114, 461, 0,
	202, 0, 115, 116, 457, 459, 0, 0, 117, 0,
	323, 118, 474, 475, 476, 0, 442, 0, 324, 119,
	325, 120, 121, 0, 0, 462, 326, 122, 327, 0,
	123, 0, 0, 124, 0, 125, 126, 127, 128, 129,
	328, 130, 131, 132, 406, 133, 431, 458, 134, 477,
	135, 136, 0, 0, 0, 0, 0, 137, 212, 329,
	138, 330, 452, 139, 140, 0, 453, 141, 215, 0,
	142, 143, 144, 478, 145, 146, 0, 148, 149, 147,
	150, 0, 151, 331, 152, 153, 420, 154, 0, 238,
	155, 156, 0, 157, 158, 448, 159, 160, 332, 161,
	479, 162, 0, 163, 164, 166, 219, 165, 454, 0,
	0, 167, 168, 0, 221, 480, 0, 0, 169, 455,
	456, 429, 170, 171, 172, 173, 0, 0, 174, 175,
	449, 0, 176, 177, 178, 225, 481, 1322, 179, 0,
	0, 0, 0, 180, 181, 182, 183, 407, 0, 435,
	423, 424, 425, 422, 411, 0, 0, 403, 404, 0,
	0, 87, 88, 405, 89, 0, 412, 0, 0, 417,
	0, 0, 0, 90, 91, 184, 464, 465, 92, 466,
	467, 0, 93, 189, 190, 94, 432, 450, 468, 469,
	193, 0, 460, 0, 443, 0, 95, 96, 97, 0,
	98, 0, 99, 0, 321, 100, 101, 0, 444, 446,
	0, 445, 447, 102, 103, 104, 105, 470, 106, 471,
	472, 503, 0, 107, 0, 0, 0, 463, 109, 0,
	0, 0, 0, 416, 110, 451, 430, 0, 111, 112,
	473, 113, 0, 0, 0, 322, 0, 114, 461, 0,
	202, 0, 115, 116, 457, 459, 0, 0, 117, 0,
	323, 118, 474, 475, 476, 0, 442, 0, 324, 119,
	325, 120, 121, 0, 0, 462, 326, 122, 327, 0,
	123, 0, 0, 124, 0, 125, 126, 127, 128, 129,
	328, 130, 131, 132, 406, 133, 431, 458, 134, 477,
	135, 136, 0, 0, 0, 0, 0, 137, 212, 329,
	138, 330, 452, 139, 140, 0, 453, 141, 215, 0,
	142, 143, 144, 478, 145, 146, 0, 148, 149, 147,
	150, 0, 151, 331, 152, 153, 420, 154, 0, 238,
	155, 156, 0, 157, 158, 448, 159, 160, 332, 161,
	479, 162, 0, 163, 164, 166, 219, 165, 454, 0,
	0, 167, 168, 0, 221, 480, 0, 0, 169, 455,
	456, 429, 170, 171, 172, 173, 0, 0, 174, 175,
	449, 0, 176, 177, 178, 225, 481, 0, 179, 0,
	0, 0, 0, 180, 181, 182, 183, 407, 0, 435,
	423, 424, 425, 422, 411, 0, 0, 403, 404, 0,
	0, 87, 88, 405, 89, 0, 412, 0, 0, 417,
	0, 0, 0, 90, 91, 184, 464, 465, 92, 466,
	467, 0, 93, 189, 190, 94, 432, 450, 468, 469,
	193, 0, 460, 0, 443, 0, 95, 96, 97, 0,
	98, 0, 99, 0, 321, 100, 101, 0, 444, 446,
	0, 445, 447, 102, 103, 104, 105, 470, 106, 471,
	472, 0, 0, 107, 0, 0, 0, 463, 109, 0,
	0, 0, 0, 416, 110, 451, 430, 0, 111, 112,
	473, 113, 0, 0, 0, 322, 0, 114, 461, 0,
	202, 0, 115, 116, 457, 459, 0, 0, 117, 0,
	323, 118, 474, 475, 476, 0, 442, 0, 324, 119,
	325, 120, 121, 0, 0, 462, 326, 122, 327, 0,
	123, 0, 0, 124, 0, 125, 126, 127, 128, 129,
	328, 130, 131, 132, 406, 133, 431, 458, 134, 477,
	135, 136, 0, 0, 0, 0, 0, 137, 212, 329,
	138, 330, 452, 139, 140, 0, 453, 141, 215, 0,
	142, 143, 144, 478, 145, 146, 0, 148, 149, 147,
	150, 0, 151, 331, 152, 153, 420, 154, 0, 238,
	155, 156, 0, 157, 158, 448, 159, 160, 332, 161,
	479, 162, 0, 163, 164, 166, 219, 165, 454, 0,
	0, 167, 168, 0, 221, 480, 0, 0, 169, 455,
	456, 429, 170, 171, 172, 173, 0, 0, 174, 175,
	449, 0, 176, 177, 178, 225, 481, 0, 179, 0,
	0, 0, 0, 180, 181, 182, 183, 407, 0, 435,
	423, 424, 425, 422, 411, 0, 0, 403, 404, 401,
	0, 87, 88, 405, 89, 0, 412, 0, 0, 417,
	0, 0, 0, 90, 91, 184, 464, 465, 92, 466,
	467, 0, 93, 189, 190, 94, 432, 450, 468, 469,
	193, 0, 460, 0, 443, 0, 95, 96, 97, 0,
	98, 0, 99, 0, 321, 100, 101, 0, 444, 446,
	0, 445, 447, 102, 103, 104, 105, 470, 106, 471,
	472, 0, 0, 107, 0, 0, 0, 463, 109, 0,
	0, 0, 0, 416, 110, 451, 430, 0, 111, 112,
	473, 113, 0, 0, 1037, 322, 0, 114, 461, 0,
	202, 0, 115, 116, 457, 459, 0, 0, 117, 0,
	323, 118, 474, 475, 476, 0, 442, 0, 324, 119,
	325, 120, 121, 0, 0, 462, 326, 122, 327, 0,
	123, 0, 0, 124, 0, 125, 126, 127, 128, 129,
	328, 130, 131, 132, 406, 133, 431, 458, 134, 477,
	135, 136, 0, 0, 0, 0, 0, 137, 212, 329,
	138, 330, 452, 139, 140, 0, 453, 141, 215, 0,
	142, 143, 144, 478, 145, 146, 0, 148, 149, 147,
	150, 0, 151, 331, 152, 153, 420, 154, 0, 238,
	155, 156, 0, 157, 158, 448, 159, 160, 332, 161,
	479, 162, 0, 163, 164, 166, 219, 165, 454, 0,
	0, 167, 168, 0, 221, 480, 0, 0, 169, 455,
	456, 429, 170, 171, 172, 173, 0, 0, 174, 175,
	449, 0, 176, 177, 178, 225, 481, 0, 179, 0,
	0, 0, 0, 180, 181, 182, 183, 407, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 403, 404, 0,
	0, 0, 0, 405, 0, 0, 412, 435, 423, 424,
	425, 422, 411, 0, 0, 0, 0, 0, 0, 87,
	88, 686, 89, 0, 0, 0, 0, 417, 0, 0,
	0, 90, 91, 184, 464, 465, 92, 466, 467, 0,
	93, 189, 190, 94, 432, 450, 468, 469, 193, 0,
	460, 0, 443, 0, 95, 96, 97, 0, 98, 0,
	99, 0, 321, 100, 101, 0, 444, 446, 0, 445,
	447, 102, 103, 104, 105, 470, 106, 471, 472, 0,
	0, 107, 0, 0, 0, 463, 109, 0, 0, 0,
	0, 416, 110, 451, 430, 0, 111, 112, 473, 113,
	0, 0, 0, 322, 0, 114, 461, 0, 202, 0,
	115, 116, 457, 459, 0, 0, 117, 0, 323, 118,
	474, 475, 476, 0, 442, 0, 324, 119, 325, 120,
	121, 0, 0, 462, 326, 122, 327, 0, 123, 0,
	0, 124, 0, 125, 126, 127, 128, 129, 328, 130,
	131, 132, 406, 133, 431, 458, 134, 477, 135, 136,
	0, 0, 0, 0, 0, 137, 212, 329, 138, 330,
	452, 139, 140, 0, 453, 141, 215, 0, 142, 143,
	144, 478, 145, 146, 0, 148, 149, 147, 150, 0,
	151, 331, 152, 153, 420, 154, 0, 238, 155, 156,
	0, 157, 158, 448, 159, 160, 332, 161, 479, 162,
	0, 163, 164, 166, 219, 165, 454, 0, 0, 167,
	168, 0, 221, 480, 0, 0, 169, 455, 456, 429,
	170, 171, 172, 173, 0, 0, 174, 175, 449, 0,
	176, 177, 178, 225, 481, 0, 179, 0, 0, 0,
	0, 180, 181, 182, 183, 407, 0, 435, 423, 424,
	425, 422, 411, 0, 0, 403, 404, 0, 0, 87,
	88, 405, 89, 0, 412, 0, 0, 417, 0, 0,
	0, 90, 91, 184, 464, 465, 92, 466, 467, 0,
	93, 189, 190, 94, 432, 450, 468, 469, 193, 0,
	460, 0, 443, 0, 95, 96, 97, 0, 98, 0,
	99, 0, 321, 100, 1636, 0, 444, 446, 0, 445,
	447, 102, 103, 104, 105, 470, 106, 471, 472, 0,
	0, 107, 0, 0, 0, 463, 109, 0, 0, 0,
	0, 416, 110, 451, 430, 0, 111, 112, 473, 113,
	0, 0, 0, 322, 0, 114, 461, 0, 202, 0,
	115, 116, 457, 459, 0, 0, 117, 0, 323, 118,
	474, 475, 476, 0, 442, 0, 324, 119, 325, 120,
	121, 0, 0, 462, 326, 122, 327, 0, 123, 0,
	0, 124, 0, 125, 126, 127, 128, 129, 328, 130,
	131, 132, 406, 133, 431, 458, 134, 477, 135, 136,
	0, 0, 0, 0, 0, 137, 212, 329, 138, 330,
	452, 139, 140, 0, 453, 141, 215, 0, 142, 143,
	144, 478, 145, 146, 0, 148, 149, 147, 150, 0,
	151, 331, 152, 153, 420, 154, 0, 238, 155, 156,
	0, 157, 158, 448, 159, 160, 332, 161, 479, 162,
	0, 163, 164, 166, 219, 165, 454, 0, 0, 167,
	168, 0, 221, 480, 0, 0, 169, 455, 456, 429,
	170, 171, 1635, 173, 0, 0, 174, 175, 449, 0,
	176, 177, 178, 225, 481, 0, 179, 0, 0, 0,
	0, 180, 181, 182, 183, 407, 0, 435, 423, 424,
	425, 422, 411, 0, 0, 403, 404, 0, 0, 87,
	88, 405, 89, 0, 412, 0, 0, 417, 0, 0,
	0, 90, 91, 1634, 464, 465, 92, 466, 467, 0,
	93, 189, 190, 94, 432, 450, 468, 469, 193, 0,
	460, 0, 443, 0, 95, 96, 97, 0, 98, 0,
	99, 0, 321, 100, 1636, 0, 444, 446, 0, 445,
	447, 102, 103, 104, 105, 470, 106, 471, 472, 0,
	0, 107, 0, 0, 0, 463, 109, 0, 0, 0,
	0, 416, 110, 451, 430, 0, 111, 112, 473, 113,
	0, 0, 0, 322, 0, 114, 461, 0, 202, 0,
	115, 116, 457, 459, 0, 0, 117, 0, 323, 118,
	474, 475, 476, 0, 442, 0, 324, 119, 325, 120,
	121, 0, 0, 462, 326, 122, 327, 0, 123, 0,
	0, 124, 0, 125, 126, 127, 128, 129, 328, 130,
	131, 132, 406, 133, 431, 458, 134, 477, 135, 136,
	0, 0, 0, 0, 0, 137, 212, 329, 138, 330,
	452, 139, 140, 0, 453, 141, 215, 0, 142, 143,
	144, 478, 145, 146, 0, 148, 149, 147, 150, 0,
	151, 331, 152, 153, 420, 154, 0, 238, 155, 156,
	0, 157, 158, 448, 159, 160, 332, 161, 479, 162,
	0, 163, 164, 166, 219, 165, 454, 0, 0, 167,
	168, 0, 221, 480, 0, 0, 169, 455, 456, 429,
	170, 171, 1635, 173, 0, 0, 174, 175, 449, 0,
	176, 177, 178, 225, 481, 0, 179, 0, 0, 0,
	0, 180, 181, 182, 183, 407, 0, 435, 423, 424,
	425, 422, 411, 0, 0, 403, 404, 0, 0, 87,
	88, 405, 89, 0, 412, 0, 0, 417, 0, 0,
	0, 90, 91, 184, 464, 465, 92, 466, 467, 0,
	93, 189, 190, 94, 432, 450, 468, 469, 193, 0,
	460, 0, 443, 0, 95, 96, 97, 0, 98, 0,
	99, 0, 321, 100, 101, 0, 444, 446, 0, 445,
	447, 102, 103, 104, 105, 470, 106, 471, 472, 0,
	0, 107, 0, 0, 0, 463, 109, 0, 0, 0,
	0, 416, 110, 451, 430, 0, 111, 112, 473, 113,
	0, 0, 0, 322, 0, 114, 461, 0, 202, 0,
	115, 116, 457, 459, 0, 0, 117, 0, 323, 118,
	474, 475, 476, 0, 442, 0, 324, 119, 325, 120,
	121, 0, 0, 462, 326, 122, 327, 0, 123, 0,
	0, 124, 0, 125, 126, 127, 128, 129, 328, 130,
	131, 132, 406, 133, 431, 458, 134, 477, 135, 136,
	0, 0, 0, 0, 0, 137, 212, 329, 138, 330,
	452, 139, 140, 0, 453, 141, 215, 0, 142, 143,
	144, 478, 145, 146, 0, 148, 149, 147, 150, 0,
	151, 331, 152, 153, 420, 154, 0, 238, 155, 156,
	0, 157, 158, 448, 159, 160, 332, 161, 479, 162,
	0, 163, 164, 166, 219, 165, 454, 0, 0, 167,
	168, 0, 221, 480, 0, 0, 169, 455, 456, 429,
	170, 171, 172, 173, 0, 0, 174, 175, 449, 0,
	176, 177, 178, 225, 481, 0, 179, 0, 0, 0,
	0, 180, 181, 182, 183, 407, 0, 435, 423, 424,
	425, 422, 411, 0, 0, 403, 404, 0, 0, 87,
	88, 405, 89, 0, 412, 0, 0, 417, 0, 0,
	0, 90, 91, 184, 464, 465, 92, 466, 467, 0,
	93, 189, 190, 94, 432, 450, 468, 469, 193, 0,
	460, 0, 443, 0, 95, 96, 97, 0, 98, 0,
	99, 0, 321, 100, 101, 0, 444, 446, 0, 445,
	447, 102, 103, 104, 105, 470, 106, 471, 472, 0,
	0, 107, 0, 0, 0, 463, 109, 0, 0, 0,
	0, 416, 110, 451, 430, 0, 111, 112, 473, 113,
	0, 0, 0, 322, 0, 114, 461, 0, 202, 0,
	115, 116, 457, 459, 0, 0, 117, 0, 323, 118,
	474, 475, 476, 0, 442, 0, 324, 119, 325, 120,
	121, 0, 0, 462, 326, 122, 327, 0, 123, 0,
	0, 124, 0, 125, 126, 127, 128, 129, 328, 130,
	131, 132, 0, 133, 431, 458, 134, 477, 135, 136,
	0, 0, 0, 0, 0, 137, 212, 329, 138, 330,
	452, 139, 140, 0, 453, 141, 215, 0, 142, 143,
	144, 478, 145, 146, 0, 148, 149, 147, 150, 0,
	151, 331, 152, 153, 1027, 154, 0, 238, 155, 156,
	0, 157, 158, 448, 159, 160, 332, 161, 479, 162,
	0, 163, 164, 166, 219, 165, 454, 0, 0, 167,
	168, 0, 221, 480, 0, 0, 169, 455, 456, 429,
	170, 171, 172, 173, 0, 0, 174, 175, 449, 0,
	176, 177, 178, 225, 481, 0, 179, 0, 0, 0,
	0, 180, 181, 182, 183, 435, 423, 424, 425, 422,
	411, 0, 0, 0, 0, 1023, 1024, 87, 88, 0,
	89, 1025, 0, 0, 1026, 417, 0, 0, 0, 90,
	91, 0, 464, 465, 92, 466, 467, 0, 93, 189,
	190, 94, 432, 450, 468, 469, 193, 0, 460, 0,
	443, 0, 95, 96, 97, 0, 98, 0, 99, 0,
	321, 100, 1636, 0, 444, 446, 0, 445, 447, 102,
	103, 104, 105, 470, 106, 471, 472, 0, 0, 107,
	0, 0, 0, 463, 109, 0, 0, 0, 0, 416,
	110, 451, 430, 0, 111, 112, 473, 113, 0, 0,
	0, 322, 0, 114, 461, 0, 202, 0, 115, 116,
	457, 459, 0, 0, 117, 0, 323, 118, 474, 475,
	476, 0, 442, 0, 0, 119, 325, 120, 121, 0,
	0, 462, 326, 122, 0, 0, 123, 0, 0, 124,
	0, 125, 126, 127, 128, 129, 328, 130, 131, 132,
	406, 133, 431, 458, 134, 477, 135, 136, 0, 0,
	0, 0, 0, 137, 212, 329, 138, 330, 452, 139,
	140, 0, 453, 141, 215, 0, 142, 143, 144, 478,
	145, 146, 0, 148, 149, 147, 150, 0, 151, 331,
	152, 153, 420, 154, 0, 238, 155, 156, 0, 157,
	158, 448, 159, 160, 0, 161, 479, 162, 0, 163,
	164, 166, 219, 165, 454, 0, 0, 167, 168, 0,
	221, 480, 0, 0, 169, 455, 456, 429, 170, 171,
	1635, 173, 0, 0, 174, 175, 449, 0, 176, 177,
	178, 225, 481, 0, 179, 0, 0, 0, 0, 180,
	181, 182, 183, 435, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 403, 404, 87, 88, 0, 89, 405,
	0, 0, 412, 0, 0, 0, 0, 90, 91, 184,
	185, 186, 92, 187, 188, 0, 93, 189, 190, 94,
	0, 450, 191, 192, 193, 0, 460, 0, 443, 0,
	95, 96, 97, 0, 98, 0, 99, 0, 321, 100,
	101, 0, 444, 446, 0, 445, 447, 102, 103, 104,
	105, 195, 106, 196, 197, 0, 0, 107, 0, 0,
	0, 108, 109, 0, 0, 0, 0, 198, 110, 451,
	0, 0, 111, 112, 200, 113, 0, 0, 0, 322,
	0, 114, 461, 0, 202, 0, 115, 116, 457, 459,
	0, 0, 117, 0, 323, 118, 205, 206, 207, 0,
	208, 0, 324, 119, 325, 120, 121, 0, 0, 462,
	326, 122, 327, 0, 123, 0, 0, 124, 0, 125,
	126, 127, 128, 129, 328, 130, 131, 132, 0, 133,
	0, 458, 134, 211, 135, 136, 0, 0, 0, 0,
	0, 137, 212, 329, 138, 330, 452, 139, 140, 0,
	453, 141, 215, 0, 142, 143, 144, 216, 145, 146,
	0, 148, 149, 147, 150, 0, 151, 331, 152, 153,
	217, 154, 0, 238, 155, 156, 0, 157, 158, 448,
	159, 160, 332, 161, 218, 162, 0, 163, 164, 166,
	219, 165, 454, 0, 0, 167, 168, 0, 221, 222,
	0, 0, 169, 455, 456, 0, 170, 171, 172, 173,
	0, 0, 174, 175, 449, 0, 176, 177, 178, 225,
	226, 0, 179, 0, 0, 0, 0, 180, 181, 182,
	183, 315, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 87, 88, 0, 89, 0, 0, 0,
	1431, 0, 0, 0, 0, 90, 91, 184, 185, 186,
	92, 187, 188, 0, 93, 189, 190, 94, 0, 0,
	191, 192, 193, 0, 194, 0, 320, 0, 95, 96,
	97, 0, 98, 0, 99, 0, 321, 100, 101, 0,
	0, 0, 0, 0, 0, 102, 103, 104, 105, 195,
	106, 196, 197, 0, 0, 107, 0, 0, 0, 108,
	109, 0, 0, 0, 0, 198, 110, 199, 0, 0,
	111, 112, 200, 113, 0, 0, 0, 322, 0, 114,
	201, 0, 202, 0, 115, 116, 203, 204, 0, 0,
	117, 0, 323, 118, 205, 206, 207, 0, 208, 0,
	324, 119, 325, 120, 121, 0, 0, 209, 326, 122,
	327, 0, 123, 0, 0, 124, 0, 125, 126, 127,
	128, 129, 328, 130, 131, 132, 0, 133, 0, 210,
	134, 211, 135, 136, 0, 0, 0, 0, 0, 137,
	212, 329, 138, 330, 213, 139, 140, 0, 214, 141,
	215, 0, 142, 143, 144, 216, 145, 146, 0, 148,
	149, 147, 150, 0, 151, 331, 152, 153, 217, 154,
	0, 238, 155, 156, 49, 157, 158, 0, 159, 160,
	332, 161, 218, 162, 0, 163, 164, 166, 219, 165,
	220, 0, 51, 167, 168, 0, 221, 222, 0, 0,
	169, 223, 224, 0, 170, 171, 172, 173, 0, 0,
	174, 175, 0, 0, 176, 177, 178, 319, 226, 0,
	179, 0, 0, 0, 47, 180, 181, 182, 183, 0,
	48, 315, 558, 562, 0, 563, 553, 0, 0, 0,
	0, 0, 0, 87, 88, 0, 89, 0, 46, 0,
	0, 0, 0, 0, 0, 90, 91, 184, 185, 186,
	92, 187, 188, 0, 93, 189, 190, 94, 0, 0,
	191, 192, 193, 0, 194, 0, 320, 0, 95, 96,
	97, 0, 98, 0, 99, 0, 321, 100, 101, 0,
	0, 0, 0, 0, 0, 102, 103, 104, 105, 195,
	106, 196, 197, 566, 0, 107, 0, 0, 0, 108,
	109, 0, 0, 0, 0, 198, 110, 199, 555, 0,
	111, 112, 200, 113, 0, 0, 0, 322, 0, 114,
	201, 0, 202, 0, 115, 116, 203, 204, 0, 0,
	117, 0, 323, 118, 205, 206, 207, 0, 208, 0,
	324, 119, 325, 120, 121, 0, 0, 209, 326, 122,
	327, 0, 123, 0, 0, 124, 0, 125, 126, 127,
	128, 129, 328, 130, 131, 132, 0, 133, 0, 210,
	134, 211, 135, 136, 0, 556, 0, 0, 0, 137,
	212, 329, 138, 330, 213, 139, 140, 0, 214, 141,
	215, 0, 142, 143, 144, 216, 145, 146, 0, 148,
	149, 147, 150, 0, 151, 331, 152, 153, 217, 154,
	0, 238, 155, 156, 0, 157, 158, 0, 159, 160,
	332, 161, 218, 162, 0, 163, 164, 166, 219, 165,
	220, 0, 0, 167, 168, 0, 221, 222, 0, 0,
	169, 223, 224, 554, 170, 171, 172, 173, 0, 0,
	174, 175, 0, 0, 176, 177, 178, 225, 226, 0,
	179, 0, 0, 0, 0, 180, 181, 182, 183, 315,
	558, 562, 0, 563, 553, 0, 0, 0, 0, 564,
	559, 87, 88, 0, 89, 0, 0, 0, 0, 0,
	0, 0, 0, 90, 91, 184, 185, 186, 92, 187,
	188, 0, 93, 189, 190, 94, 0, 0, 191, 192,
	193, 0, 194, 0, 320, 0, 95, 96, 97, 0,
	98, 0, 99, 0, 321, 100, 101, 0, 0, 0,
	0, 0, 0, 102, 103, 104, 105, 195, 106, 196,
	197, 549, 0, 107, 0, 0, 0, 108, 109, 0,
	0, 0, 0, 198, 110, 199, 555, 0, 111, 112,
	200, 113, 0, 0, 0, 322, 0, 114, 201, 0,
	202, 0, 115, 116, 203, 204, 0, 0, 117, 0,
	323, 118, 205, 206, 207, 0, 208, 0, 324, 119,
	325, 120, 121, 0, 0, 209, 326, 122, 327, 0,
	123, 0, 0, 124, 0, 125, 126, 127, 128, 129,
	328, 130, 131, 132, 0, 133, 0, 210, 134, 211,
	135, 136, 0, 556, 0, 0, 0, 137, 212, 329,
	138, 330, 213, 139, 140, 0, 214, 141, 215, 0,
	142, 143, 144, 216, 145, 146, 0, 148, 149, 147,
	150, 0, 151, 331, 152, 153, 217, 154, 0, 238,
	155, 156, 0, 157, 158, 0, 159, 160, 332, 161,
	218, 162, 0, 163, 164, 166, 219, 165, 220, 0,
	0, 167, 168, 0, 221, 222, 0, 0, 169, 223,
	224, 554, 170, 171, 172, 173, 0, 0, 174, 175,
	0, 0, 176, 177, 178, 225, 226, 0, 179, 0,
	0, 0, 0, 180, 181, 182, 183, 315, 558, 562,
	0, 563, 553, 0, 0, 0, 0, 564, 559, 87,
	88, 0, 89, 0, 0, 0, 0, 0, 0, 0,
	0, 90, 91, 184, 185, 186, 92, 187, 188, 0,
	93, 189, 190, 94, 0, 0, 191, 192, 193, 0,
	194, 0, 320, 0, 95, 96, 97, 0, 98, 0,
	99, 0, 321, 100, 101, 0, 0, 0, 0, 0,
	0, 102, 103, 104, 105, 195, 106, 196, 197, 0,
	0, 107, 0, 0, 0, 108, 109, 0, 0, 0,
	0, 198, 110, 199, 555, 0, 111, 112, 200, 113,
	0, 0, 0, 322, 0, 114, 201, 0, 202, 0,
	115, 116, 203, 204, 0, 0, 117, 0, 323, 118,
	205, 206, 207, 0, 208, 0, 324, 119, 325, 120,
	121, 0, 0, 209, 326, 122, 327, 0, 123, 0,
	0, 124, 0, 125, 126, 127, 128, 129, 328, 130,
	131, 132, 0, 133, 0, 210, 134, 211, 135, 136,
	0, 556, 0, 0, 0, 137, 212, 329, 138, 330,
	213, 139, 140, 0, 214, 141, 215, 0, 142, 143,
	144, 216, 145, 146, 0, 148, 149, 147, 150, 0,
	151, 331, 152, 153, 217, 154, 0, 238, 155, 156,
	0, 157, 158, 0, 159, 160, 332, 161, 218, 162,
	0, 163, 164, 166, 219, 165, 220, 0, 0, 167,
	168, 0, 221, 222, 0, 0, 169, 223, 224, 554,
	170, 171, 172, 173, 0, 0, 174, 175, 0, 0,
	176, 177, 178, 225, 226, 84, 179, 0, 0, 0,
	0, 180, 181, 182, 183, 0, 0, 87, 88, 0,
	89, 0, 0, 0, 0, 564, 559, 0, 0, 90,
	91, 184, 185, 186, 92, 187, 188, 0, 93, 189,
	190, 94, 0, 0, 191, 192, 193, 0, 194, 0,
	0, 0, 95, 96, 97, 0, 98, 0, 99, 0,
	0, 100, 101, 0, 0, 0, 0, 0, 0, 102,
	103, 104, 105, 195, 106, 196, 197, 0, 0, 107,
	0, 0, 0, 108, 109, 0, 0, 0, 0, 198,
	110, 199, 0, 0, 111, 112, 200, 113, 0, 0,
	0, 0, 0, 114, 201, 0, 202, 0, 115, 116,
	203, 204, 0, 0, 117, 0, 0, 118, 205, 206,
	207, 0, 208, 0, 0, 119, 0, 120, 121, 0,
	0, 209, 0, 122, 0, 0, 123, 0, 0, 124,
	0, 125, 126, 127, 128, 129, 0, 130, 131, 132,
	0, 133, 0, 210, 134, 211, 135, 136, 0, 0,
	290, 0, 0, 137, 212, 0, 138, 0, 213, 139,
	140, 0, 214, 141, 215, 0, 142, 143, 144, 216,
	145, 146, 0, 148, 149, 147, 150, 0, 151, 0,
	152, 153, 217, 154, 0, 238, 155, 156, 49, 157,
	158, 0, 159, 160, 0, 161, 218, 162, 0, 163,
	164, 166, 219, 165, 220, 0, 51, 167, 168, 0,
	221, 222, 0, 0, 169, 223, 224, 0, 170, 171,
	172, 173, 0, 0, 174, 175, 0, 0, 176, 177,
	178, 319, 226, 0, 179, 0, 0, 0, 47, 180,
	181, 182, 183, 84, 48, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 87, 88, 0, 89, 0,
	0, 0, 893, 0, 0, 0, 0, 90, 91, 184,
	185, 186, 92, 187, 188, 0, 93, 189, 190, 94,
	0, 0, 191, 192, 193, 0, 194, 0, 0, 0,
	95, 96, 97, 0, 98, 0, 99, 0, 0, 100,
	101, 0, 0, 0, 0, 0, 0, 102, 103, 104,
	105, 195, 106, 196, 197, 0, 0, 107, 0, 0,
	0, 108, 109, 0, 0, 0, 0, 198, 110, 199,
	0, 0, 111, 112, 200, 113, 0, 0, 0, 0,
	0, 114, 201, 0, 202, 0, 115, 116, 203, 204,
	0, 0, 117, 0, 0, 118, 205, 206, 207, 0,
	208, 0, 0, 119, 0, 120, 121, 0, 0, 209,
	0, 122, 0, 0, 123, 0, 0, 124, 0, 125,
	126, 127, 128, 129, 0, 130, 131, 132, 0, 133,
	0, 210, 134, 211, 135, 136, 0, 0, 0, 0,
	0, 137, 212, 0, 138, 0, 213, 139, 140, 0,
	214, 141, 215, 0, 142, 143, 144, 216, 145, 146,
	0, 148, 149, 147, 150, 0, 151, 0, 152, 153,
	217, 154, 0, 238, 155, 156, 49, 157, 158, 0,
	159, 160, 0, 161, 218, 162, 0, 163, 164, 166,
	219, 165, 220, 0, 51, 167, 168, 0, 221, 222,
	0, 0, 169, 223, 224, 0, 170, 171, 172, 173,
	0, 0, 174, 175, 0, 0, 176, 177, 178, 319,
	226, 0, 179, 0, 0, 0, 47, 180, 181, 182,
	183, 84, 48, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 87, 88, 0, 89, 0, 0, 0,
	46, 0, 1130, 0, 0, 90, 91, 184, 185, 186,
	92, 187, 188, 0, 93, 189, 190, 94, 0, 0,
	191, 192, 193, 0, 194, 0, 0, 0, 95, 96,
	97, 0, 98, 0, 99, 0, 0, 100, 101, 0,
	0, 0, 0, 0, 0, 102, 103, 104, 105, 195,
	106, 196, 197, 0, 0, 107, 0, 0, 0, 108,
	109, 0, 0, 0, 0, 198, 110, 199, 0, 0,
	111, 112, 200, 113, 0, 0, 0, 0, 0, 114,
	201, 0, 202, 0, 115, 116, 203, 204, 0, 0,
	117, 0, 0, 118, 205, 206, 207, 0, 208, 0,
	0, 119, 0, 120, 121, 0, 0, 209, 0, 122,
	0, 0, 123, 0, 0, 124, 0, 125, 126, 127,
	128, 129, 0, 130, 131, 132, 0, 133, 0, 210,
	134, 211, 135, 136, 0, 0, 0, 0, 0, 137,
	212, 0, 138, 0, 213, 139, 140, 0, 214, 141,
	215, 0, 142, 143, 144, 216, 145, 146, 0, 148,
	149, 147, 150, 0, 151, 0, 152, 153, 217, 154,
	0, 238, 155, 156, 0, 157, 158, 0, 159, 160,
	0, 161, 218, 162, 0, 163, 164, 166, 219, 165,
	220, 0, 0, 167, 168, 0, 221, 222, 0, 0,
	169, 223, 224, 0, 170, 171, 172, 173, 0, 0,
	174, 175, 0, 0, 176, 177, 178, 225, 226, 0,
	179, 0, 0, 0, 0, 180, 181, 182, 183, 84,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 88, 0, 89, 0, 0, 0, 0, 392,
	0, 0, 0, 90, 91, 184, 185, 186, 92, 187,
	188, 0, 93, 189, 190, 94, 0, 0, 191, 192,
	193, 0, 194, 0, 0, 0, 95, 96, 97, 0,
	98, 0, 99, 0, 0, 100, 101, 0, 0, 0,
	0, 0, 0, 102, 103, 104, 105, 195, 106, 196,
	197, 0, 0, 107, 0, 0, 0, 108, 109, 0,
	0, 0, 0, 198, 110, 199, 0, 0, 111, 112,
	200, 113, 0, 0, 0, 0, 0, 114, 201, 0,
	202, 0, 115, 116, 203, 204, 0, 0, 117, 0,
	0, 118, 205, 206, 207, 0, 208, 0, 0, 119,
	0, 120, 121, 0, 0, 209, 0, 122, 0, 0,
	123, 0, 0, 124, 0, 125, 126, 127, 128, 129,
	0, 130, 131, 132, 0, 133, 0, 210, 134, 211,
	135, 136, 0, 0, 290, 0, 0, 137, 212, 0,
	138, 0, 213, 139, 140, 0, 214, 141, 215, 0,
	142, 143, 144, 216, 145, 146, 0, 148, 149, 147,
	150, 0, 151, 0, 152, 153, 217, 154, 0, 238,
	155, 156, 0, 157, 158, 0, 159, 160, 0, 161,
	218, 162, 0, 163, 164, 166, 219, 165, 220, 0,
	0, 167, 168, 0, 221, 222, 0, 0, 169, 223,
	224, 0, 170, 171, 172, 173, 0, 0, 174, 175,
	0, 0, 176, 177, 178, 225, 226, 0, 179, 0,
	0, 0, 0, 180, 181, 182, 183, 84, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	88, 0, 89, 0, 0, 0, 893, 0, 0, 0,
	0, 90, 91, 184, 185, 186, 92, 187, 188, 0,
	93, 189, 190, 94, 0, 0, 191, 192, 193, 0,
	194, 0, 0, 0, 95, 96, 97, 0, 98, 0,
	99, 0, 0, 100, 101, 0, 0, 0, 0, 0,
	0, 102, 103, 104, 105, 195, 106, 196, 197, 0,
	0, 107, 0, 0, 0, 108, 109, 0, 0, 0,
	0, 198, 110, 199, 0, 0, 111, 112, 200, 113,
	0, 0, 0, 0, 0, 114, 201, 0, 202, 0,
	115, 116, 203, 204, 0, 0, 117, 0, 0, 118,
	205, 206, 207, 0, 208, 0, 0, 119, 0, 120,
	121, 0, 0, 209, 0, 122, 0, 0, 123, 0,
	0, 124, 0, 125, 126, 127, 128, 129, 0, 130,
	131, 132, 0, 133, 0, 210, 134, 211, 135, 136,
	0, 0, 0, 0, 0, 137, 212, 0, 138, 0,
	213, 139, 140, 0, 214, 141, 215, 0, 142, 143,
	144, 216, 145, 146, 0, 148, 149, 147, 150, 0,
	151, 0, 152, 153, 217, 154, 0, 238, 155, 156,
	0, 157, 158, 0, 159, 160, 0, 161, 218, 162,
	0, 163, 164, 166, 219, 165, 220, 0, 0, 167,
	168, 0, 221, 222, 0, 0, 169, 223, 224, 0,
	170, 171, 172, 173, 0, 0, 174, 175, 0, 0,
	176, 177, 178, 225, 226, 0, 179, 0, 0, 0,
	0, 180, 181, 182, 183, 84, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 87, 88, 0,
	89, 0, 0, 0, 830, 0, 0, 0, 0, 90,
	91, 184, 185, 186, 92, 187, 188, 0, 93, 189,
	190, 94, 0, 0, 191, 192, 193, 0, 194, 0,
	0, 0, 95, 96, 97, 0, 98, 0, 99, 0,
	0, 100, 101, 0, 0, 0, 0, 0, 0, 102,
	103, 104, 105, 195, 106, 196, 197, 0, 0, 107,
	0, 0, 0, 108, 109, 0, 0, 0, 0, 198,
	110, 199, 0, 0, 111, 112, 200, 113, 0, 0,
	0, 0, 0, 114, 201, 0, 202, 0, 115, 116,
	203, 204, 0, 0, 117, 0, 0, 118, 205, 206,
	207, 0, 208, 0, 0, 119, 0, 120, 121, 0,
	0, 209, 0, 122, 0, 0, 123, 0, 0, 124,
	0, 125, 126, 127, 128, 129, 0, 130, 131, 132,
	0, 133, 0, 210, 134, 211, 135, 136, 0, 0,
	0, 0, 0, 137, 212, 0, 138, 0, 213, 139,
	140, 0, 214, 141, 215, 0, 142, 143, 144, 216,
	145, 146, 0, 148, 149, 147, 150, 0, 151, 0,
	152, 153, 217, 154, 0, 238, 155, 156, 0, 157,
	158, 0, 159, 160, 0, 161, 218, 162, 0, 163,
	164, 166, 219, 165, 220, 0, 0, 167, 168, 0,
	221, 222, 0, 0, 169, 223, 224, 0, 170, 171,
	172, 173, 0, 0, 174, 175, 0, 0, 176, 177,
	178, 225, 226, 0, 179, 0, 0, 0, 0, 180,
	181, 182, 183, 84, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 87, 88, 0, 89, 0,
	0, 0, 1340, 0, 0, 0, 0, 90, 91, 184,
	185, 186, 92, 187, 188, 0, 93, 189, 190, 94,
	0, 0, 191, 192, 193, 0, 194, 0, 0, 0,
	95, 96, 97, 0, 98, 0, 99, 0, 0, 100,
	101, 0, 0, 0, 0, 0, 0, 102, 103, 104,
	105, 195, 106, 196, 197, 0, 0, 107, 0, 0,
	0, 108, 109, 0, 0, 0, 0, 198, 110, 199,
	0, 0, 111, 112, 200, 113, 0, 0, 0, 0,
	0, 114, 201, 0, 202, 0, 115, 116, 203, 204,
	0, 0, 117, 0, 0, 118, 205, 206, 207, 0,
	208, 0, 0, 119, 0, 120, 121, 0, 0, 209,
	0, 122, 0, 0, 123, 0, 0, 124, 0, 125,
	126, 127, 128, 129, 0, 130, 131, 132, 0, 133,
	0, 210, 134, 211, 135, 136, 0, 0, 0, 0,
	0, 137, 212, 0, 138, 0, 213, 139, 140, 0,
	214, 141, 215, 0, 142, 143, 144, 216, 145, 146,
	0, 148, 149, 147, 150, 0, 151, 0, 152, 153,
	217, 154, 0, 238, 155, 156, 0, 157, 158, 0,
	159, 160, 0, 161, 218, 162, 0, 163, 164, 166,
	219, 165, 220, 0, 0, 167, 168, 0, 221, 222,
	0, 0, 169, 223, 224, 0, 170, 171, 172, 173,
	0, 0, 174, 175, 0, 0, 176, 177, 178, 225,
	226, 0, 179, 0, 0, 0, 0, 180, 181, 182,
	183, 84, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 87, 88, 0, 89, 0, 0, 0,
	492, 0, 0, 0, 0, 90, 91, 184, 185, 186,
	92, 187, 188, 0, 93, 189, 190, 94, 0, 0,
	191, 192, 193, 0, 194, 0, 0, 0, 95, 96,
	97, 0, 98, 0, 99, 0, 0, 100, 101, 0,
	0, 0, 0, 0, 0, 102, 103, 534, 105, 195,
	106, 196, 197, 0, 0, 107, 0, 0, 0, 108,
	109, 0, 0, 0, 0, 198, 110, 199, 0, 0,
	111, 112, 200, 113, 0, 0, 0, 0, 0, 114,
	201, 0, 202, 0, 115, 116, 203, 204, 0, 0,
	117, 0, 0, 118, 205, 206, 207, 0, 208, 0,
	0, 119, 0, 120, 121, 0, 0, 209, 0, 122,
	0, 0, 123, 0, 0, 124, 0, 125, 126, 127,
	128, 129, 0, 130, 131, 132, 0, 133, 0, 210,
	134, 211, 135, 136, 0, 0, 0, 0, 0, 137,
	212, 0, 138, 0, 213, 139, 140, 0, 214, 141,
	215, 0, 142, 143, 144, 216, 145, 146, 0, 148,
	149, 147, 150, 0, 151, 0, 152, 153, 217, 154,
	0, 238, 155, 156, 0, 157, 158, 0, 159, 160,
	0, 161, 218, 162, 0, 163, 164, 166, 219, 165,
	220, 0, 533, 167, 168, 0, 221, 222, 0, 0,
	169, 223, 224, 0, 170, 171, 172, 173, 0, 84,
	174, 175, 0, 0, 176, 177, 178, 225, 226, 0,
	179, 87, 88, 0, 89, 180, 181, 182, 183, 0,
	0, 0, 0, 90, 91, 184, 185, 186, 92, 187,
	188, 537, 93, 189, 190, 94, 0, 0, 191, 192,
	193, 0, 194, 0, 0, 0, 95, 96, 97, 0,
	98, 0, 99, 0, 0, 100, 101, 0, 0, 0,
	0, 0, 0, 102, 103, 104, 105, 195, 106, 196,
	197, 0, 0, 107, 0, 0, 0, 108, 109, 0,
	0, 0, 0, 198, 110, 199, 0, 0, 111, 112,
	200, 113, 0, 0, 0, 0, 0, 114, 201, 0,
	202, 0, 115, 116, 203, 204, 0, 0, 117, 0,
	0, 118, 205, 206, 207, 0, 208, 0, 0, 119,
	0, 120, 121, 0, 0, 209, 0, 122, 0, 0,
	123, 0, 0, 124, 0, 125, 126, 127, 128, 129,
	0, 130, 131, 132, 0, 133, 0, 210, 134, 211,
	135, 136, 0, 0, 0, 0, 0, 137, 212, 0,
	138, 0, 213, 139, 140, 0, 214, 141, 215, 0,
	142, 143, 144, 216, 145, 146, 0, 148, 149, 147,
	150, 0, 151, 0, 152, 153, 217, 154, 0, 238,
	155, 156, 0, 157, 158, 0, 159, 160, 0, 161,
	218, 162, 0, 163, 164, 166, 219, 165, 220, 0,
	0, 167, 168, 0, 221, 222, 0, 0, 169, 223,
	224, 0, 170, 171, 172, 173, 0, 315, 174, 175,
	0, 0, 176, 177, 178, 225, 226, 0, 179, 87,
	88, 0, 89, 180, 181, 182, 183, 0, 0, 0,
	0, 90, 91, 184, 185, 186, 92, 187, 188, 537,
	93, 189, 190, 94, 0, 0, 191, 192, 193, 0,
	194, 0, 320, 0, 95, 96, 97, 0, 98, 0,
	99, 0, 321, 100, 101, 0, 0, 0, 0, 0,
	0, 102, 103, 104, 105, 195, 106, 196, 197, 0,
	0, 107, 0, 0, 0, 108, 109, 0, 0, 0,
	0, 198, 110, 199, 0, 0, 111, 112, 200, 113,
	0, 0, 0, 322, 0, 114, 201, 0, 202, 0,
	115, 116, 203, 204, 0, 0, 117, 0, 323, 118,
	205, 206, 207, 0, 208, 0, 324, 119, 325, 120,
	121, 0, 0, 209, 326, 122, 327, 0, 123, 0,
	0, 124, 0, 125, 126, 127, 128, 129, 328, 130,
	131, 132, 0, 133, 0, 210, 134, 211, 135, 136,
	0, 0, 0, 0, 0, 137, 212, 329, 138, 330,
	213, 139, 140, 0, 214, 141, 215, 0, 142, 143,
	144, 216, 145, 146, 0, 148, 149, 147, 150, 0,
	151, 331, 152, 153, 217, 154, 0, 238, 155, 156,
	0, 157, 158, 0, 159, 160, 332, 161, 218, 162,
	0, 163, 164, 166, 219, 165, 220, 0, 0, 167,
	168, 0, 221, 222, 0, 0, 169, 223, 224, 0,
	170, 171, 172, 173, 0, 84, 174, 175, 0, 0,
	176, 177, 178, 225, 226, 0, 179, 87, 88, 0,
	89, 180, 181, 182, 183, 0, 0, 0, 0, 90,
	91, 184, 185, 186, 92, 187, 188, 0, 93, 189,
	190, 94, 0, 0, 191, 192, 193, 805, 194, 0,
	0, 0, 95, 96, 97, 0, 98, 803, 99, 0,
	0, 100, 101, 0, 0, 0, 0, 0, 0, 102,
	103, 104, 105, 195, 106, 196, 197, 0, 0, 107,
	0, 0, 0, 108, 109, 0, 0, 0, 0, 198,
	110, 199, 0, 0, 111, 112, 200, 113, 0, 808,
	0, 0, 0, 114, 201, 0, 202, 0, 115, 116,
	203, 204, 0, 871, 117, 0, 0, 118, 205, 206,
	207, 0, 208, 0, 0, 119, 0, 120, 121, 0,
	0, 209, 0, 122, 0, 0, 123, 0, 0, 124,
	0, 125, 126, 127, 128, 129, 0, 130, 131, 132,
	0, 133, 0, 210, 134, 211, 135, 136, 0, 0,
	0, 0, 0, 137, 212, 0, 138, 0, 213, 139,
	140, 0, 214, 141, 215, 807, 142, 143, 144, 216,
	145, 146, 0, 148, 149, 147, 150, 0, 151, 0,
	152, 153, 217, 154, 0, 238, 155, 156, 0, 157,
	158, 0, 159, 160, 0, 161, 218, 162, 0, 163,
	164, 166, 219, 165, 220, 0, 0, 167, 168, 0,
	221, 222, 0, 0, 169, 223, 224, 0, 170, 171,
	172, 173, 0, 872, 174, 175, 0, 0, 176, 177,
	178, 225, 226, 84, 179, 0, 0, 0, 0, 180,
	181, 182, 183, 0, 0, 87, 88, 0, 89, 0,
	0, 0, 0, 0, 0, 0, 0, 90, 91, 184,
	185, 186, 92, 187, 188, 0, 93, 189, 190, 94,
	0, 0, 191, 192, 193, 805, 194, 0, 0, 800,
	95, 96, 97, 0, 98, 803, 99, 0, 0, 100,
	101, 0, 0, 0, 0, 0, 0, 102, 103, 104,
	105, 195, 106, 196, 197, 0, 0, 107, 0, 0,
	0, 108, 109, 0, 0, 0, 0, 198, 110, 199,
	0, 0, 111, 112, 200, 113, 0, 808, 0, 0,
	0, 114, 201, 0, 202, 0, 115, 116, 799, 204,
	0, 0, 117, 0, 0, 118, 205, 206, 207, 0,
	208, 0, 0, 119, 0, 120, 121, 0, 0, 209,
	0, 122, 0, 0, 123, 0, 0, 124, 0, 125,
	126, 127, 128, 129, 0, 130, 131, 132, 0, 133,
	0, 210, 134, 211, 135, 136, 0, 0, 0, 0,
	0, 137, 212, 0, 138, 0, 213, 139, 140, 0,
	214, 141, 215, 807, 142, 143, 144, 216, 145, 146,
	0, 148, 149, 147, 150, 0, 151, 0, 152, 153,
	217, 154, 0, 238, 155, 156, 0, 157, 158, 0,
	159, 160, 0, 161, 218, 162, 0, 163, 164, 166,
	219, 165, 220, 0, 0, 167, 168, 0, 221, 222,
	0, 0, 169, 223, 224, 0, 170, 171, 172, 173,
	0, 806, 174, 175, 0, 0, 176, 177, 178, 225,
	226, 84, 179, 0, 0, 0, 0, 180, 181, 182,
	183, 0, 0, 87, 88, 0, 89, 0, 0, 0,
	0, 0, 1130, 0, 0, 90, 91, 184, 185, 186,
	92, 187, 188, 0, 93, 189, 190, 94, 0, 0,
	191, 192, 193, 0, 194, 0, 0, 0, 95, 96,
	97, 0, 98, 0, 99, 0, 0, 100, 101, 0,
	0, 0, 0, 0, 0, 102, 103, 104, 105, 195,
	106, 196, 197, 0, 0, 107, 0, 0, 0, 108,
	109, 0, 0, 0, 0, 198, 110, 199, 0, 0,
	111, 112, 200, 113, 0, 0, 0, 0, 0, 114,
	201, 0, 202, 0, 115, 116, 203, 204, 0, 0,
	117, 0, 0, 118, 205, 206, 207, 0, 208, 0,
	0, 119, 0, 120, 121, 0, 0, 209, 0, 122,
	0, 0, 123, 0, 0, 124, 0, 125, 126, 127,
	128, 129, 0, 130, 131, 132, 0, 133, 0, 210,
	134, 211, 135, 136, 0, 0, 0, 0, 0, 137,
	212, 0, 138, 0, 213, 139, 140, 0, 214, 141,
	215, 0, 142, 143, 144, 216, 145, 146, 0, 148,
	149, 147, 150, 0, 151, 0, 152, 153, 217, 154,
	0, 238, 155, 156, 0, 157, 158, 0, 159, 160,
	0, 161, 218, 162, 0, 163, 164, 166, 219, 165,
	220, 0, 0, 167, 168, 0, 221, 222, 0, 0,
	169, 223, 224, 0, 170, 171, 172, 173, 0, 84,
	174, 175, 0, 0, 176, 177, 178, 225, 226, 0,
	179, 87, 88, 0, 89, 180, 181, 182, 183, 0,
	0, 0, 0, 90, 91, 184, 185, 186, 92, 187,
	188, 0, 93, 189, 190, 94, 0, 0, 191, 192,
	193, 0, 194, 0, 0, 0, 95, 96, 97, 0,
	98, 0, 99, 0, 0, 100, 101, 0, 0, 0,
	0, 0, 0, 102, 103, 104, 105, 195, 106, 196,
	197, 0, 0, 107, 0, 0, 0, 108, 109, 0,
	0, 0, 0, 198, 110, 199, 0, 0, 111, 112,
	200, 113, 0, 0, 0, 0, 0, 114, 201, 0,
	202, 0, 115, 116, 203, 204, 0, 0, 117, 0,
	0, 118, 205, 206, 207, 0, 208, 0, 0, 119,
	0, 120, 121, 0, 0, 209, 0, 122, 0, 0,
	123, 0, 0, 124, 0, 125, 126, 127, 128, 129,
	0, 130, 131, 132, 0, 133, 0, 210, 134, 211,
	135, 136, 0, 0, 290, 0, 0, 137, 212, 0,
	138, 0, 213, 139, 140, 0, 214, 141, 215, 0,
	142, 143, 144, 216, 145, 146, 0, 148, 149, 147,
	150, 0, 151, 0, 152, 153, 217, 154, 0, 238,
	155, 156, 0, 157, 158, 0, 159, 160, 0, 161,
	218, 162, 0, 163, 164, 166, 219, 165, 220, 0,
	0, 167, 168, 0, 221, 222, 0, 0, 169, 223,
	224, 0, 170, 171, 172, 173, 0, 84, 174, 175,
	0, 0, 176, 177, 178, 225, 226, 0, 179, 87,
	88, 0, 89, 180, 181, 182, 183, 0, 0, 0,
	0, 90, 91, 184, 185, 186, 92, 187, 188, 0,
	93, 189, 190, 94, 0, 0, 191, 192, 193, 0,
	194, 0, 0, 0, 95, 96, 97, 0, 98, 0,
	99, 0, 0, 100, 101, 0, 0, 0, 0, 0,
	0, 102, 103, 104, 105, 195, 106, 196, 197, 0,
	0, 107, 0, 0, 0, 108, 109, 0, 0, 0,
	0, 198, 110, 199, 0, 0, 111, 112, 200, 113,
	0, 0, 0, 0, 0, 114, 201, 0, 202, 0,
	115, 116, 296, 204, 0, 0, 117, 0, 0, 118,
	205, 206, 207, 0, 208, 0, 0, 119, 0, 120,
	121, 0, 0, 209, 0, 122, 0, 0, 123, 0,
	0, 124, 0, 125, 126, 127, 128, 129, 0, 130,
	131, 132, 0, 133, 0, 210, 134, 211, 135, 136,
	0, 0, 290, 0, 0, 137, 212, 0, 138, 0,
	213, 139, 140, 0, 214, 141, 215, 0, 142, 143,
	144, 216, 145, 146, 0, 148, 149, 147, 150, 0,
	151, 0, 152, 153, 217, 154, 0, 238, 155, 156,
	0, 157, 158, 0, 159, 160, 0, 161, 218, 162,
	0, 163, 164, 166, 219, 165, 220, 0, 0, 167,
	168, 0, 221, 222, 0, 0, 169, 223, 224, 0,
	170, 171, 172, 173, 0, 84, 174, 175, 0, 0,
	176, 177, 178, 225, 226, 0, 179, 87, 88, 0,
	89, 180, 181, 182, 183, 0, 0, 0, 0, 90,
	91, 184, 185, 186, 92, 187, 188, 0, 93, 189,
	190, 94, 0, 0, 191, 192, 193, 0, 194, 0,
	0, 0, 95, 96, 97, 0, 98, 0, 99, 0,
	0, 100, 101, 0, 0, 0, 0, 0, 0, 102,
	103, 104, 105, 195, 106, 196, 197, 0, 0, 107,
	0, 0, 0, 108, 109, 0, 0, 0, 0, 198,
	110, 199, 0, 0, 111, 112, 200, 113, 0, 0,
	0, 0, 0, 114, 201, 0, 202, 0, 115, 116,
	203, 204, 0, 0, 117, 0, 0, 118, 205, 206,
	207, 0, 208, 0, 0, 119, 0, 120, 121, 0,
	0, 209, 0, 122, 0, 0, 123, 0, 0, 124,
	0, 125, 126, 127, 128, 129, 0, 130, 131, 132,
	0, 133, 0, 210, 134, 211, 135, 136, 0, 0,
	0, 0, 0, 137, 212, 0, 138, 0, 213, 139,
	140, 0, 214, 141, 215, 0, 142, 143, 144, 216,
	145, 146, 0, 148, 149, 147, 150, 0, 151, 0,
	152, 153, 217, 154, 0, 238, 155, 156, 0, 157,
	158, 0, 159, 160, 0, 161, 218, 162, 0, 163,
	164, 166, 219, 165, 220, 0, 0, 167, 168, 0,
	221, 222, 0, 0, 169, 223, 224, 0, 170, 171,
	172, 173, 0, 84, 174, 175, 0, 0, 176, 177,
	178, 225, 226, 0, 179, 87, 88, 0, 89, 180,
	181, 182, 183, 0, 0, 0, 0, 90, 91, 184,
	185, 186, 92, 187, 188, 0, 93, 189, 190, 94,
	0, 0, 191, 192, 193, 0, 194, 0, 0, 0,
	95, 96, 97, 0, 98, 0, 99, 0, 0, 100,
	101, 0, 0, 0, 0, 0, 0, 102, 103, 104,
	105, 195, 106, 196, 197, 0, 0, 107, 0, 0,
	0, 108, 109, 0, 0, 0, 0, 198, 110, 199,
	0, 0, 111, 112, 200, 113, 0, 0, 0, 0,
	0, 114, 201, 0, 202, 0, 115, 116, 1071, 204,
	0, 0, 117, 0, 0, 118, 205, 206, 207, 0,
	208, 0, 0, 119, 0, 120, 121, 0, 0, 209,
	0, 122, 0, 0, 123, 0, 0, 124, 0, 125,
	126, 127, 128, 129, 0, 130, 131, 132, 0, 133,
	0, 210, 134, 211, 135, 136, 0, 0, 0, 0,
	0, 137, 212, 0, 138, 0, 213, 139, 140, 0,
	214, 141, 215, 0, 142, 143, 144, 216, 145, 146,
	0, 148, 149, 147, 150, 0, 151, 0, 152, 153,
	217, 154, 0, 238, 155, 156, 0, 157, 158, 0,
	159, 160, 0, 161, 218, 162, 0, 163, 164, 166,
	219, 165, 220, 0, 0, 167, 168, 0, 221, 222,
	0, 0, 169, 223, 224, 0, 170, 171, 172, 173,
	0, 84, 174, 175, 0, 0, 176, 177, 178, 225,
	226, 0, 179, 87, 88, 0, 89, 180, 181, 182,
	183, 0, 0, 0, 0, 90, 91, 184, 185, 186,
	92, 187, 188, 0, 93, 189, 190, 94, 0, 0,
	191, 192, 193, 0, 194, 0, 0, 0, 95, 96,
	97, 0, 98, 0, 99, 0, 0, 100, 101, 0,
	0, 0, 0, 0, 0, 102, 103, 104, 105, 195,
	106, 196, 197, 0, 0, 107, 0, 0, 0, 108,
	109, 0, 0, 0, 0, 198, 110, 199, 0, 0,
	111, 112, 200, 113, 0, 0, 0, 0, 0, 114,
	201, 0, 202, 0, 115, 116, 1069, 204, 0, 0,
	117, 0, 0, 118, 205, 206, 207, 0, 208, 0,
	0, 119, 0, 120, 121, 0, 0, 209, 0, 122,
	0, 0, 123, 0, 0, 124, 0, 125, 126, 127,
	128, 129, 0, 130, 131, 132, 0, 133, 0, 210,
	134, 211, 135, 136, 0, 0, 0, 0, 0, 137,
	212, 0, 138, 0, 213, 139, 140, 0, 214, 141,
	215, 0, 142, 143, 144, 216, 145, 146, 0, 148,
	149, 147, 150, 0, 151, 0, 152, 153, 217, 154,
	0, 238, 155, 156, 0, 157, 158, 0, 159, 160,
	0, 161, 218, 162, 0, 163, 164, 166, 219, 165,
	220, 0, 0, 167, 168, 0, 221, 222, 0, 0,
	169, 223, 224, 0, 170, 171, 172, 173, 0, 84,
	174, 175, 0, 0, 176, 177, 178, 225, 226, 0,
	179, 87, 88, 0, 89, 180, 181, 182, 183, 0,
	0, 0, 0, 90, 91, 184, 185, 186, 92, 187,
	188, 0, 93, 189, 190, 94, 0, 0, 191, 192,
	193, 0, 194, 0, 0, 0, 95, 96, 97, 0,
	98, 0, 99, 0, 0, 100, 101, 0, 0, 0,
	0, 0, 0, 102, 103, 104, 105, 195, 106, 196,
	197, 0, 0, 107, 0, 0, 0, 108, 109, 0,
	0, 0, 0, 198, 110, 199, 0, 0, 111, 112,
	200, 113, 0, 0, 0, 0, 0, 114, 201, 0,
	202, 0, 115, 116, 1060, 204, 0, 0, 117, 0,
	0, 118, 205, 206, 207, 0, 208, 0, 0, 119,
	0, 120, 121, 0, 0, 209, 0, 122, 0, 0,
	123, 0, 0, 124, 0, 125, 126, 127, 128, 129,
	0, 130, 131, 132, 0, 133, 0, 210, 134, 211,
	135, 136, 0, 0, 0, 0, 0, 137, 212, 0,
	138, 0, 213, 139, 140, 0, 214, 141, 215, 0,
	142, 143, 144, 216, 145, 146, 0, 148, 149, 147,
	150, 0, 151, 0, 152, 153, 217, 154, 0, 238,
	155, 156, 0, 157, 158, 0, 159, 160, 0, 161,
	218, 162, 0, 163, 164, 166, 219, 165, 220, 0,
	0, 167, 168, 0, 221, 222, 0, 0, 169, 223,
	224, 0, 170, 171, 172, 173, 0, 84, 174, 175,
	0, 0, 176, 177, 178, 225, 226, 0, 179, 87,
	88, 0, 89, 180, 181, 182, 183, 0, 0, 0,
	0, 90, 91, 184, 185, 186, 92, 187, 188, 0,
	93, 189, 190, 94, 0, 0, 191, 192, 193, 0,
	194, 0, 0, 0, 95, 96, 97, 0, 98, 0,
	99, 0, 0, 100, 101, 0, 0, 0, 0, 0,
	0, 102, 103, 104, 105, 195, 106, 196, 197, 0,
	0, 107, 0, 0, 0, 108, 109, 0, 0, 0,
	0, 198, 110, 199, 0, 0, 111, 112, 200, 113,
	0, 0, 0, 0, 0, 114, 201, 0, 202, 0,
	115, 116, 678, 204, 0, 0, 117, 0, 0, 118,
	205, 206, 207, 0, 208, 0, 0, 119, 0, 120,
	121, 0, 0, 209, 0, 122, 0, 0, 123, 0,
	0, 124, 0, 125, 126, 127, 128, 129, 0, 130,
	131, 132, 0, 133, 0, 210, 134, 211, 135, 136,
	0, 0, 0, 0, 0, 137, 212, 0, 138, 0,
	213, 139, 140, 0, 214, 141, 215, 0, 142, 143,
	144, 216, 145, 146, 0, 148, 149, 147, 150, 0,
	151, 0, 152, 153, 217, 154, 0, 238, 155, 156,
	0, 157, 158, 0, 159, 160, 0, 161, 218, 162,
	0, 163, 164, 166, 219, 165, 220, 0, 0, 167,
	168, 0, 221, 222, 0, 0, 169, 223, 224, 0,
	170, 171, 172, 173, 0, 84, 174, 175, 0, 0,
	176, 177, 178, 225, 226, 0, 179, 87, 88, 0,
	89, 180, 181, 182, 183, 0, 0, 0, 0, 90,
	91, 184, 185, 186, 92, 187, 188, 0, 93, 189,
	190, 94, 0, 0, 191, 192, 193, 0, 194, 0,
	0, 0, 95, 96, 97, 0, 98, 0, 99, 0,
	0, 100, 101, 0, 0, 0, 0, 0, 0, 102,
	103, 104, 105, 195, 106, 196, 197, 0, 0, 107,
	0, 0, 0, 108, 109, 0, 0, 0, 0, 198,
	110, 199, 0, 0, 111, 112, 200, 113, 0, 0,
	0, 0, 0, 114, 201, 0, 202, 0, 115, 116,
	203, 204, 0, 0, 117, 0, 0, 118, 205, 206,
	207, 0, 208, 0, 0, 119, 0, 120, 121, 0,
	0, 209, 0, 122, 0, 0, 123, 0, 0, 124,
	0, 125, 126, 127, 128, 129, 0, 130, 131, 132,
	0, 133, 0, 210, 134, 211, 135, 136, 0, 0,
	0, 0, 0, 137, 212, 0, 138, 0, 213, 139,
	140, 0, 214, 141, 215, 0, 142, 143, 144, 216,
	145, 146, 0, 148, 149, 147, 150, 0, 151, 0,
	152, 153, 217, 154, 0, 82, 155, 156, 0, 157,
	158, 0, 159, 160, 0, 161, 218, 162, 0, 163,
	164, 166, 219, 165, 220, 0, 0, 167, 168, 0,
	221, 222, 0, 0, 169, 223, 224, 0, 170, 171,
	172, 173, 0, 84, 174, 175, 0, 0, 176, 177,
	178, 225, 226, 0, 179, 87, 88, 0, 89, 180,
	181, 182, 183, 0, 520, 0, 0, 90, 91, 184,
	185, 186, 92, 187, 188, 0, 93, 189, 190, 94,
	0, 0, 191, 192, 193, 0, 194, 0, 0, 0,
	95, 96, 97, 0, 98, 0, 99, 0, 0, 100,
	101, 0, 0, 0, 0, 0, 0, 102, 103, 104,
	105, 195, 106, 196, 197, 0, 0, 107, 0, 0,
	0, 108, 109, 0, 0, 0, 0, 198, 110, 199,
	0, 0, 111, 112, 200, 113, 0, 0, 0, 0,
	0, 114, 201, 0, 202, 0, 115, 116, 203, 204,
	0, 0, 117, 0, 0, 118, 205, 206, 207, 0,
	208, 0, 0, 119, 0, 120, 121, 0, 0, 209,
	0, 122, 0, 0, 123, 0, 0, 124, 0, 125,
	126, 127, 128, 129, 0, 130, 131, 132, 0, 133,
	0, 210, 134, 211, 135, 136, 0, 0, 0, 0,
	0, 137, 212, 0, 138, 0, 213, 139, 140, 0,
	214, 141, 215, 0, 142, 143, 144, 216, 145, 146,
	0, 148, 149, 147, 150, 0, 151, 0, 152, 153,
	217, 154, 0, 238, 155, 156, 0, 157, 158, 0,
	0, 160, 0, 161, 218, 162, 0, 163, 164, 166,
	219, 165, 220, 0, 0, 167, 168, 0, 221, 222,
	0, 0, 169, 223, 224, 0, 170, 171, 172, 173,
	0, 84, 174, 175, 0, 0, 176, 177, 178, 225,
	226, 0, 179, 87, 88, 0, 89, 180, 181, 182,
	183, 0, 0, 0, 0, 90, 91, 184, 185, 186,
	92, 187, 188, 0, 93, 189, 190, 94, 0, 0,
	191, 192, 193, 0, 194, 0, 0, 0, 95, 96,
	97, 0, 98, 0, 99, 0, 0, 100, 101, 0,
	0, 0, 0, 0, 0, 102, 103, 104, 105, 195,
	106, 196, 197, 0, 0, 107, 0, 0, 0, 108,
	109, 0, 0, 0, 0, 198, 110, 199, 0, 0,
	111, 112, 200, 113, 0, 0, 0, 0, 0, 114,
	201, 0, 202, 0, 115, 116, 377, 204, 0, 0,
	117, 0, 0, 118, 205, 206, 207, 0, 208, 0,
	0, 119, 0, 120, 121, 0, 0, 209, 0, 122,
	0, 0, 123, 0, 0, 124, 0, 125, 126, 127,
	128, 129, 0, 130, 131, 132, 0, 133, 0, 210,
	134, 211, 135, 136, 0, 0, 0, 0, 0, 137,
	212, 0, 138, 0, 213, 139, 140, 0, 214, 141,
	215, 0, 142, 143, 144, 216, 145, 146, 0, 148,
	149, 147, 150, 0, 151, 0, 152, 153, 217, 154,
	0, 238, 155, 156, 0, 157, 158, 0, 159, 160,
	0, 161, 218, 162, 0, 163, 164, 166, 219, 165,
	220, 0, 0, 167, 168, 0, 221, 222, 0, 0,
	169, 223, 224, 0, 170, 171, 172, 173, 0, 84,
	174, 175, 0, 0, 176, 177, 178, 225, 226, 0,
	179, 87, 88, 0, 89, 180, 181, 182, 183, 0,
	0, 0, 0, 90, 91, 184, 185, 186, 92, 187,
	188, 0, 93, 189, 190, 94, 0, 0, 191, 192,
	193, 0, 194, 0, 0, 0, 95, 96, 97, 0,
	98, 0, 99, 0, 0, 100, 101, 0, 0, 0,
	0, 0, 0, 102, 103, 104, 105, 195, 106, 196,
	197, 0, 0, 107, 0, 0, 0, 108, 109, 0,
	0, 0, 0, 198, 110, 199, 0, 0, 111, 112,
	200, 113, 0, 0, 0, 0, 0, 114, 201, 0,
	202, 0, 115, 116, 374, 204, 0, 0, 117, 0,
	0, 118, 205, 206, 207, 0, 208, 0, 0, 119,
	0, 120, 121, 0, 0, 209, 0, 122, 0, 0,
	123, 0, 0, 124, 0, 125, 126, 127, 128, 129,
	0, 130, 131, 132, 0, 133, 0, 210, 134, 211,
	135, 136, 0, 0, 0, 0, 0, 137, 212, 0,
	138, 0, 213, 139, 140, 0, 214, 141, 215, 0,
	142, 143, 144, 216, 145, 146, 0, 148, 149, 147,
	150, 0, 151, 0, 152, 153, 217, 154, 0, 238,
	155, 156, 0, 157, 158, 0, 159, 160, 0, 161,
	218, 162, 0, 163, 164, 166, 219, 165, 220, 0,
	0, 167, 168, 0, 221, 222, 0, 0, 169, 223,
	224, 0, 170, 171, 172, 173, 0, 84, 174, 175,
	0, 0, 176, 177, 178, 225, 226, 0, 179, 87,
	88, 0, 89, 180, 181, 182, 183, 0, 0, 0,
	0, 90, 91, 184, 185, 186, 92, 187, 188, 0,
	93, 189, 190, 94, 0, 0, 191, 192, 338, 0,
	194, 0, 0, 0, 95, 96, 97, 0, 98, 0,
	99, 0, 0, 100, 101, 0, 0, 0, 0, 0,
	0, 102, 103, 104, 105, 195, 106, 196, 197, 0,
	0, 107, 0, 0, 0, 108, 109, 0, 0, 0,
	0, 198, 110, 199, 0, 0, 111, 112, 200, 113,
	0, 0, 0, 0, 0, 114, 201, 0, 202, 0,
	115, 116, 203, 204, 0, 0, 117, 0, 0, 118,
	205, 206, 207, 0, 208, 0, 0, 119, 0, 120,
	121, 0, 0, 209, 0, 122, 0, 0, 123, 0,
	0, 124, 0, 125, 126, 127, 128, 235, 0, 130,
	131, 132, 0, 133, 0, 210, 134, 211, 135, 136,
	0, 0, 0, 0, 0, 137, 212, 0, 138, 0,
	213, 139, 140, 0, 214, 141, 215, 0, 142, 143,
	144, 216, 145, 146, 0, 148, 149, 147, 150, 0,
	151, 0, 152, 153, 217, 154, 0, 238, 155, 156,
	0, 157, 158, 0, 159, 160, 0, 161, 218, 162,
	0, 163, 164, 166, 219, 165, 220, 0, 0, 167,
	168, 0, 234, 222, 0, 0, 230, 223, 224, 0,
	170, 171, 172, 173, 0, 84, 174, 175, 0, 0,
	176, 177, 178, 225, 226, 0, 179, 87, 88, 0,
	89, 180, 181, 182, 183, 0, 0, 0, 0, 90,
	91, 184, 185, 186, 92, 187, 188, 0, 93, 189,
	190, 94, 0, 0, 191, 192, 193, 0, 194, 0,
	0, 0, 95, 96, 97, 0, 98, 0, 99, 0,
	0, 100, 101, 0, 0, 0, 0, 0, 0, 102,
	103, 104, 105, 195, 106, 196, 197, 0, 0, 107,
	0, 0, 0, 108, 109, 0, 0, 0, 0, 198,
	110, 199, 0, 0, 111, 112, 200, 113, 0, 0,
	0, 0, 0, 114, 201, 0, 202, 0, 115, 116,
	203, 204, 0, 0, 117, 0, 0, 118, 205, 206,
	207, 0, 208, 0, 0, 119, 0, 120, 121, 0,
	0, 209, 0, 122, 0, 0, 123, 0, 0, 124,
	0, 125, 126, 127, 128, 235, 0, 130, 131, 132,
	0, 133, 0, 210, 134, 211, 135, 136, 0, 0,
	0, 0, 0, 137, 212, 0, 138, 0, 213, 139,
	140, 0, 214, 141, 215, 0, 142, 143, 144, 216,
	145, 146, 0, 148, 149, 147, 150, 0, 151, 0,
	152, 153, 217, 154, 0, 238, 155, 156, 0, 157,
	158, 0, 159, 160, 0, 161, 218, 162, 0, 163,
	164, 166, 219, 165, 220, 0, 0, 167, 168, 0,
	234, 222, 0, 0, 230, 223, 224, 0, 170, 171,
	172, 173, 0, 84, 174, 175, 0, 0, 176, 177,
	178, 225, 226, 0, 179, 87, 88, 0, 89, 180,
	181, 182, 183, 0, 0, 0, 0, 90, 91, 184,
	185, 186, 92, 187, 188, 0, 93, 189, 190, 94,
	0, 0, 191, 192, 193, 0, 194, 0, 0, 0,
	95, 96, 97, 0, 98, 0, 99, 0, 0, 100,
	101, 0, 0, 0, 0, 0, 0, 102, 103, 104,
	105, 195, 106, 196, 197, 0, 0, 107, 0, 0,
	0, 108, 109, 0, 0, 0, 0, 198, 110, 199,
	0, 0, 111, 112, 200, 113, 0, 0, 0, 0,
	0, 114, 201, 0, 202, 0, 115, 116, 310, 204,
	0, 0, 117, 0, 0, 118, 205, 206, 207, 0,
	208, 0, 0, 119, 0, 120, 121, 0, 0, 209,
	0, 122, 0, 0, 123, 0, 0, 124, 0, 125,
	126, 127, 128, 129, 0, 130, 131, 132, 0, 133,
	0, 210, 134, 211, 135, 136, 0, 0, 0, 0,
	0, 137, 212, 0, 138, 0, 213, 139, 140, 0,
	214, 141, 215, 0, 142, 143, 144, 216, 145, 146,
	0, 148, 149, 147, 150, 0, 151, 0, 152, 153,
	217, 154, 0, 238, 155, 156, 0, 157, 158, 0,
	159, 160, 0, 161, 218, 162, 0, 163, 164, 166,
	219, 165, 220, 0, 0, 167, 168, 0, 221, 222,
	0, 0, 169, 223, 224, 0, 170, 171, 172, 173,
	0, 84, 174, 175, 0, 0, 176, 177, 178, 225,
	226, 0, 179, 87, 88, 0, 89, 180, 181, 182,
	183, 0, 0, 0, 0, 90, 91, 184, 185, 186,
	92, 187, 188, 0, 93, 189, 190, 94, 0, 0,
	191, 192, 193, 0, 194, 0, 0, 0, 95, 96,
	97, 0, 98, 0, 99, 0, 0, 100, 101, 0,
	0, 0, 0, 0, 0, 102, 103, 104, 105, 195,
	106, 196, 197, 0, 0, 107, 0, 0, 0, 108,
	109, 0, 0, 0, 0, 198, 110, 199, 0, 0,
	111, 112, 200, 113, 0, 0, 0, 0, 0, 114,
	201, 0, 202, 0, 115, 116, 307, 204, 0, 0,
	117, 0, 0, 118, 205, 206, 207, 0, 208, 0,
	0, 119, 0, 120, 121, 0, 0, 209, 0, 122,
	0, 0, 123, 0, 0, 124, 0, 125, 126, 127,
	128, 129, 0, 130, 131, 132, 0, 133, 0, 210,
	134, 211, 135, 136, 0, 0, 0, 0, 0, 137,
	212, 0, 138, 0, 213, 139, 140, 0, 214, 141,
	215, 0, 142, 143, 144, 216, 145, 146, 0, 148,
	149, 147, 150, 0, 151, 0, 152, 153, 217, 154,
	0, 238, 155, 156, 0, 157, 158, 0, 159, 160,
	0, 161, 218, 162, 0, 163, 164, 166, 219, 165,
	220, 0, 0, 167, 168, 0, 221, 222, 0, 0,
	169, 223, 224, 0, 170, 171, 172, 173, 0, 84,
	174, 175, 0, 0, 176, 177, 178, 225, 226, 0,
	179, 87, 88, 0, 89, 180, 181, 182, 183, 0,
	0, 0, 0, 90, 91, 184, 185, 186, 92, 187,
	188, 0, 93, 189, 190, 94, 0, 0, 191, 192,
	193, 0, 194, 0, 0, 0, 95, 96, 97, 0,
	98, 0, 99, 0, 0, 100, 101, 0, 0, 0,
	0, 0, 0, 102, 103, 104, 105, 195, 106, 196,
	197, 0, 0, 107, 0, 0, 0, 108, 109, 0,
	0, 0, 0, 198, 110, 199, 0, 0, 111, 112,
	200, 113, 0, 0, 0, 0, 0, 114, 201, 0,
	202, 0, 115, 116, 305, 204, 0, 0, 117, 0,
	0, 118, 205, 206, 207, 0, 208, 0, 0, 119,
	0, 120, 121, 0, 0, 209, 0, 122, 0, 0,
	123, 0, 0, 124, 0, 125, 126, 127, 128, 129,
	0, 130, 131, 132, 0, 133, 0, 210, 134, 211,
	135, 136, 0, 0, 0, 0, 0, 137, 212, 0,
	138, 0, 213, 139, 140, 0, 214, 141, 215, 0,
	142, 143, 144, 216, 145, 146, 0, 148, 149, 147,
	150, 0, 151, 0, 152, 153, 217, 154, 0, 238,
	155, 156, 0, 157, 158, 0, 159, 160, 0, 161,
	218, 162, 0, 163, 164, 166, 219, 165, 220, 0,
	0, 167, 168, 0, 221, 222, 0, 0, 169, 223,
	224, 0, 170, 171, 172, 173, 0, 84, 174, 175,
	0, 0, 176, 177, 178, 225, 226, 0, 179, 87,
	88, 0, 89, 180, 181, 182, 183, 0, 0, 0,
	0, 90, 91, 184, 185, 186, 92, 187, 188, 0,
	93, 189, 190, 94, 0, 0, 191, 192, 193, 0,
	194, 0, 0, 0, 95, 96, 97, 0, 98, 0,
	99, 0, 0, 100, 101, 0, 0, 0, 0, 0,
	0, 102, 103, 104, 105, 195, 106, 196, 197, 0,
	0, 107, 0, 0, 0, 108, 109, 0, 0, 0,
	0, 198, 110, 199, 0, 0, 111, 112, 200, 113,
	0, 0, 0, 0, 0, 114, 201, 0, 202, 0,
	115, 116, 299, 204, 0, 0, 117, 0, 0, 118,
	205, 206, 207, 0, 208, 0, 0, 119, 0, 120,
	121, 0, 0, 209, 0, 122, 0, 0, 123, 0,
	0, 124, 0, 125, 126, 127, 128, 129, 0, 130,
	131, 132, 0, 133, 0, 210, 134, 211, 135, 136,
	0, 0, 0, 0, 0, 137, 212, 0, 138, 0,
	213, 139, 140, 0, 214, 141, 215, 0, 142, 143,
	144, 216, 145, 146, 0, 148, 149, 147, 150, 0,
	151, 0, 152, 153, 217, 154, 0, 238, 155, 156,
	0, 157, 158, 0, 159, 160, 0, 161, 218, 162,
	0, 163, 164, 166, 219, 165, 220, 0, 0, 167,
	168, 0, 221, 222, 0, 0, 169, 223, 224, 0,
	170, 171, 172, 173, 0, 84, 174, 175, 0, 0,
	176, 177, 178, 225, 226, 0, 179, 87, 88, 0,
	89, 180, 181, 182, 183, 0, 0, 0, 0, 90,
	91, 184, 185, 186, 92, 187, 188, 0, 93, 189,
	190, 94, 0, 0, 191, 192, 193, 0, 194, 0,
	0, 0, 95, 96, 97, 0, 98, 0, 99, 0,
	0, 100, 101, 0, 0, 0, 0, 0, 0, 102,
	103, 104, 105, 195, 106, 196, 197, 0, 0, 107,
	0, 0, 0, 108, 109, 0, 0, 0, 0, 198,
	110, 199, 0, 0, 111, 112, 200, 113, 0, 0,
	0, 0, 0, 114, 201, 0, 202, 0, 115, 116,
	203, 204, 0, 0, 117, 0, 0, 118, 205, 206,
	207, 0, 208, 0, 0, 119, 0, 120, 121, 0,
	0, 209, 0, 122, 0, 0, 123, 0, 0, 124,
	0, 125, 126, 127, 128, 129, 0, 130, 131, 132,
	0, 133, 0, 210, 134, 211, 135, 136, 0, 0,
	0, 0, 0, 137, 212, 0, 138, 0, 213, 139,
	140, 0, 214, 141, 215, 0, 142, 143, 144, 216,
	279, 146, 0, 148, 149, 147, 150, 0, 151, 0,
	152, 153, 217, 154, 0, 238, 155, 156, 0, 157,
	158, 0, 159, 160, 0, 161, 218, 162, 0, 163,
	164, 166, 219, 165, 220, 0, 0, 167, 168, 0,
	221, 222, 0, 0, 169, 223, 224, 0, 170, 171,
	172, 173, 0, 84, 174, 175, 0, 0, 176, 177,
	178, 225, 226, 0, 179, 87, 88, 0, 89, 180,
	181, 182, 183, 0, 0, 0, 0, 90, 91, 184,
	185, 186, 92, 187, 188, 0, 93, 189, 190, 94,
	0, 0, 191, 192, 193, 0, 194, 0, 0, 0,
	95, 96, 97, 0, 98, 0, 99, 0, 0, 100,
	101, 0, 0, 0, 0, 0, 0, 102, 103, 104,
	105, 195, 106, 196, 197, 0, 0, 107, 0, 0,
	0, 108, 109, 0, 0, 0, 0, 198, 110, 199,
	0, 0, 111, 112, 200, 113, 0, 0, 0, 0,
	0, 114, 201, 0, 202, 0, 115, 116, 203, 204,
	0, 0, 117, 0, 0, 118, 205, 206, 207, 0,
	208, 0, 0, 119, 0, 120, 121, 0, 0, 209,
	0, 122, 0, 0, 228, 0, 0, 124, 0, 125,
	126, 127, 128, 235, 0, 130, 131, 132, 0, 133,
	0, 210, 134, 211, 135, 136, 0, 0, 0, 0,
	0, 137, 212, 0, 138, 0, 213, 139, 140, 0,
	214, 141, 215, 0, 142, 143, 144, 216, 145, 146,
	0, 148, 149, 147, 150, 0, 151, 0, 152, 153,
	217, 154, 0, 238, 155, 156, 0, 157, 229, 0,
	159, 160, 0, 161, 218, 162, 0, 163, 164, 166,
	219, 165, 220, 0, 0, 167, 168, 0, 234, 222,
	0, 0, 230, 223, 224, 0, 170, 171, 172, 173,
	0, 84, 174, 175, 0, 0, 176, 177, 178, 225,
	226, 0, 179, 87, 88, 0, 89, 180, 181, 182,
	183, 0, 0, 0, 0, 90, 91, 184, 185, 186,
	92, 187, 188, 0, 93, 189, 190, 94, 0, 0,
	191, 192, 193, 0, 194, 0, 0, 0, 95, 96,
	97, 0, 98, 0, 99, 0, 0, 100, 101, 0,
	0, 0, 0, 0, 0, 102, 103, 104, 105, 195,
	106, 196, 197, 0, 0, 107, 0, 0, 0, 108,
	109, 0, 0, 0, 0, 198, 110, 199, 0, 0,
	111, 112, 200, 113, 0, 0, 0, 0, 0, 114,
	201, 0, 202, 0, 115, 116, 203, 204, 0, 0,
	117, 0, 0, 118, 205, 206, 207, 0, 208, 0,
	0, 119, 0, 120, 121, 0, 0, 209, 0, 122,
	0, 0, 123, 0, 0, 124, 0, 125, 126, 127,
	128, 129, 0, 130, 131, 132, 0, 133, 0, 210,
	134, 211, 135, 136, 0, 0, 0, 0, 0, 137,
	212, 0, 138, 0, 213, 139, 0, 0, 214, 141,
	215, 0, 142, 0, 144, 216, 145, 146, 0, 148,
	149, 147, 150, 0, 151, 0, 152, 153, 217, 0,
	0, 238, 155, 156, 0, 157, 158, 0, 159, 160,
	0, 161, 218, 162, 0, 163, 164, 166, 219, 165,
	220, 0, 0, 167, 168, 0, 221, 222, 0, 0,
	169, 223, 224, 0, 170, 171, 172, 173, 0, 0,
	174, 175, 0, 0, 176, 177, 178, 225, 226, 702,
	179, 720, 721, 722, 0, 180, 181, 182, 183, 0,
	0, 723, 0, 0, 0, 0, 0, 704, 702, 729,
	720, 721, 722, 0, 0, 0, 0, 0, 0, 0,
	723, 0, 0, 0, 0, 0, 704, 703, 729, 0,
	0, 0, 0, 717, 0, 0, 0, 702, 0, 720,
	721, 722, 0, 0, 0, 0, 703, 0, 0, 723,
	0, 0, 717, 0, 0, 704, 0, 729, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 703, 0, 0, 0, 0,
	0, 717, 0, 0, 0, 0, 0, 0, 0, 0,
	730, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 728, 0, 0, 0, 0, 0, 0, 730,
	0, 0, 725, 0, 0, 0, 0, 0, 718, 0,
	0, 728, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 725, 0, 0, 0, 0, 0, 718, 730, 724,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	728, 0, 0, 0, 0, 0, 0, 0, 724, 0,
	725, 0, 0, 0, 0, 0, 718, 0, 0, 0,
	0, 0, 719, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 727, 0, 0, 0, 0, 724, 0, 0,
	0, 719, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 727, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	719, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	727, 726, 0, 714, 715, 716, 0, 713, 710, 711,
	712, 705, 706, 707, 708, 709, 0, 0, 0, 0,
	726, 1577, 714, 715, 716, 0, 713, 710, 711, 712,
	705, 706, 707, 708, 709, 1195, 0, 1211, 1212, 1213,
	1556, 0, 0, 0, 0, 0, 0, 1457, 0, 726,
	0, 714, 715, 716, 0, 713, 710, 711, 712, 705,
	706, 707, 708, 709, 702, 0, 720, 721, 722, 1551,
	0, 0, 0, 0, 0, 0, 723, 0, 0, 1208,
	0, 0, 704, 702, 729, 720, 721, 722, 0, 0,
	0, 0, 0, 0, 0, 723, 0, 0, 0, 0,
	0, 704, 703, 729, 0, 0, 0, 0, 717, 0,
	0, 0, 702, 0, 720, 721, 722, 0, 0, 0,
	0, 703, 0, 0, 723, 0, 0, 717, 0, 0,
	704, 0, 729, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1214, 0,
	703, 0, 0, 0, 0, 0, 717, 0, 0, 0,
	0, 0, 0, 0, 1209, 730, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 728, 0, 0,
	0, 0, 0, 0, 730, 0, 0, 725, 0, 0,
	0, 0, 0, 718, 0, 0, 728, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 725, 0, 0, 0,
	0, 0, 718, 730, 724, 0, 0, 0, 1210, 0,
	0, 0, 0, 0, 0, 728, 0, 0, 0, 0,
	0, 0, 0, 724, 0, 725, 0, 0, 0, 0,
	0, 718, 0, 0, 0, 0, 0, 719, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 727, 0, 0,
	0, 0, 724, 0, 0, 0, 719, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 727, 0, 0, 1205,
	1206, 1207, 0, 1204, 1201, 1202, 1203, 1196, 1197, 1198,
	1199, 1200, 0, 0, 0, 719, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 727, 726, 0, 714, 715,
	716, 0, 713, 710, 711, 712, 705, 706, 707, 708,
	709, 0, 0, 0, 0, 726, 1547, 714, 715, 716,
	0, 713, 710, 711, 712, 705, 706, 707, 708, 709,
	1195, 0, 1211, 1212, 1213, 1489, 0, 0, 0, 0,
	0, 0, 1313, 0, 726, 0, 714, 715, 716, 0,
	713, 710, 711, 712, 705, 706, 707, 708, 709, 702,
	0, 720, 721, 722, 1488, 0, 0, 0, 0, 0,
	0, 723, 0, 0, 1208, 0, 0, 704, 702, 729,
	720, 721, 722, 0, 0, 0, 0, 0, 0, 0,
	723, 0, 0, 0, 0, 0, 704, 703, 729, 0,
	0, 0, 0, 717, 0, 0, 0, 702, 0, 720,
	721, 722, 0, 0, 0, 0, 703, 0, 0, 723,
	0, 0, 717, 0, 0, 704, 0, 729, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1214, 0, 703, 0, 0, 0, 0,
	0, 717, 0, 0, 0, 0, 0, 0, 0, 1209,
	730, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 728, 0, 0, 0, 0, 0, 0, 730,
	0, 0, 725, 0, 0, 0, 0, 0, 718, 0,
	0, 728, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 725, 0, 0, 0, 0, 0, 718, 730, 724,
	0, 0, 0, 1210, 0, 0, 0, 0, 0, 0,
	728, 0, 0, 0, 0, 0, 0, 0, 724, 0,
	725, 0, 0, 0, 0, 0, 718, 0, 0, 0,
	0, 0, 719, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 727, 0, 0, 0, 0, 724, 0, 0,
	0, 719, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 727, 0, 0, 1205, 1206, 1207, 0, 1204, 1201,
	1202, 1203, 1196, 1197, 1198, 1199, 1200, 0, 0, 0,
	719, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	727, 726, 0, 714, 715, 716, 0, 713, 710, 711,
	712, 705, 706, 707, 708, 709, 0, 0, 0, 0,
	726, 1405, 714, 715, 716, 0, 713, 710, 711, 712,
	705, 706, 707, 708, 709, 1195, 0, 1211, 1212, 1213,
	1343, 0, 0, 0, 0, 0, 0, 1312, 0, 726,
	0, 714, 715, 716, 0, 713, 710, 711, 712, 705,
	706, 707, 708, 709, 702, 0, 720, 721, 722, 1318,
	0, 0, 0, 0, 0, 0, 723, 0, 0, 1208,
	0, 0, 704, 702, 729, 720, 721, 722, 0, 0,
	0, 0, 0, 0, 0, 723, 0, 0, 0, 0,
	0, 704, 703, 729, 0, 0, 0, 0, 717, 0,
	0, 0, 702, 0, 720, 721, 722, 0, 0, 0,
	0, 703, 0, 0, 723, 0, 0, 717, 0, 0,
	704, 0, 729, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1214, 0,
	703, 0, 0, 0, 0, 0, 717, 0, 0, 0,
	0, 0, 0, 0, 1209, 730, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 728, 0, 0,
	0, 0, 0, 0, 730, 0, 0, 725, 0, 0,
	0, 0, 0, 718, 0, 0, 728, 0, 1653, 0,
	0, 0, 0, 0, 0, 0, 725, 0, 0, 0,
	0, 0, 718, 730, 724, 0, 0, 0, 1210, 0,
	0, 0, 0, 0, 0, 728, 0, 0, 0, 0,
	0, 0, 0, 724, 0, 725, 0, 0, 0, 0,
	0, 718, 0, 0, 0, 0, 0, 719, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 727, 0, 0,
	0, 0, 724, 0, 0, 0, 719, 0, 0, 0,
	0, 0, 0, 0, 1652, 0, 727, 0, 0, 1205,
	1206, 1207, 0, 1204, 1201, 1202, 1203, 1196, 1197, 1198,
	1199, 1200, 0, 0, 0, 719, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 727, 726, 0, 714, 715,
	716, 0, 713, 710, 711, 712, 705, 706, 707, 708,
	709, 0, 0, 0, 0, 726, 975, 714, 715, 716,
	0, 713, 710, 711, 712, 705, 706, 707, 708, 709,
	0, 0, 1195, 1389, 1211, 1212, 1213, 0, 0, 0,
	0, 0, 0, 0, 726, 0, 714, 715, 716, 0,
	713, 710, 711, 712, 705, 706, 707, 708, 709, 702,
	0, 720, 721, 722, 0, 0, 0, 0, 0, 0,
	0, 723, 0, 0, 0, 0, 1208, 704, 702, 729,
	720, 721, 722, 0, 0, 0, 0, 0, 0, 0,
	723, 0, 0, 0, 882, 0, 704, 703, 729, 0,
	0, 0, 0, 717, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 703, 0, 0, 0,
	0, 0, 717, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1215, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1214, 1225, 883, 1224, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	730, 1209, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 728, 0, 0, 0, 0, 0, 0, 730,
	0, 0, 725, 0, 0, 0, 0, 0, 718, 0,
	0, 728, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 725, 0, 0, 0, 0, 0, 718, 0, 724,
	0, 0, 0, 0, 0, 1210, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 724, 732,
	0, 0, 0, 0, 0, 702, 0, 720, 721, 722,
	0, 0, 719, 0, 0, 0, 0, 723, 0, 0,
	731, 0, 727, 704, 702, 729, 720, 721, 722, 0,
	0, 719, 0, 0, 0, 0, 723, 0, 0, 0,
	0, 727, 704, 703, 729, 0, 1205, 1206, 1207, 717,
	1204, 1201, 1202, 1203, 1196, 1197, 1198, 1199, 1200, 0,
	0, 0, 703, 0, 0, 0, 0, 0, 717, 0,
	0, 726, 0, 714, 715, 716, 0, 713, 710, 711,
	712, 705, 706, 707, 708, 709, 0, 0, 0, 0,
	726, 0, 714, 715, 716, 0, 713, 710, 711, 712,
	705, 706, 707, 708, 709, 0, 730, 0, 0, 0,
	0, 0, 702, 0, 720, 721, 722, 0, 728, 0,
	0, 0, 0, 0, 723, 730, 0, 0, 725, 0,
	704, 0, 729, 0, 718, 0, 0, 728, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 725, 0, 0,
	703, 0, 0, 718, 0, 724, 717, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 724, 274, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 719, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 727, 0,
	702, 0, 720, 721, 722, 0, 0, 719, 0, 0,
	0, 0, 723, 730, 0, 0, 0, 727, 704, 0,
	729, 0, 0, 0, 0, 728, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 725, 0, 0, 703, 0,
	0, 718, 0, 0, 717, 0, 0, 726, 0, 714,
	715, 716, 0, 713, 710, 711, 712, 705, 706, 707,
	708, 709, 724, 0, 0, 0, 726, 0, 714, 715,
	716, 0, 713, 710, 711, 712, 705, 706, 707, 708,
	709, 0, 0, 0, 702, 0, 720, 721, 722, 1231,
	0, 0, 0, 0, 0, 719, 723, 0, 0, 1226,
	0, 730, 704, 0, 729, 727, 0, 0, 0, 0,
	0, 0, 0, 728, 0, 0, 0, 0, 0, 0,
	1337, 0, 703, 725, 0, 0, 0, 0, 717, 718,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	724, 0, 0, 0, 726, 0, 714, 715, 716, 0,
	713, 710, 711, 712, 705, 706, 707, 708, 709, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 719, 0, 730, 0, 0, 0, 0,
	0, 0, 702, 727, 720, 721, 722, 728, 0, 0,
	0, 0, 0, 0, 723, 0, 0, 725, 0, 0,
	704, 0, 729, 718, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	703, 0, 0, 0, 724, 0, 717, 0, 0, 0,
	0, 0, 726, 0, 714, 715, 716, 0, 713, 710,
	711, 712, 705, 706, 707, 708, 709, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 702, 719, 720, 721,
	722, 0, 0, 0, 0, 0, 0, 727, 723, 0,
	0, 1188, 0, 0, 704, 0, 729, 0, 0, 0,
	0, 0, 0, 730, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 703, 728, 0, 0, 0, 0,
	717, 0, 0, 0, 0, 725, 0, 0, 0, 0,
	0, 718, 0, 0, 0, 0, 726, 0, 714, 715,
	716, 0, 713, 710, 711, 712, 705, 706, 707, 708,
	709, 0, 724, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1193, 702, 0, 720, 721, 722, 0, 0,
	0, 0, 0, 0, 0, 723, 1195, 730, 1211, 1212,
	1213, 704, 0, 729, 0, 719, 0, 0, 0, 728,
	0, 0, 0, 0, 702, 727, 720, 721, 722, 725,
	0, 703, 0, 0, 0, 718, 0, 717, 0, 0,
	0, 0, 704, 0, 729, 0, 0, 0, 0, 0,
	1208, 0, 0, 0, 0, 0, 724, 0, 0, 0,
	0, 0, 703, 0, 0, 0, 0, 0, 717, 0,
	0, 0, 0, 0, 726, 0, 714, 715, 716, 0,
	713, 710, 711, 712, 705, 706, 707, 708, 709, 719,
	0, 0, 0, 0, 730, 0, 0, 0, 0, 727,
	702, 0, 720, 721, 722, 0, 728, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 725, 0, 704, 1214,
	729, 0, 718, 0, 0, 730, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1209, 0, 728, 703, 0,
	0, 0, 0, 724, 717, 0, 0, 725, 726, 0,
	714, 715, 716, 718, 713, 710, 711, 712, 705, 706,
	707, 708, 709, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 719, 0, 0, 0,
	702, 0, 0, 0, 0, 0, 727, 0, 0, 1210,
	0, 0, 0, 0, 0, 0, 0, 0, 704, 0,
	729, 730, 0, 0, 0, 0, 0, 719, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 727, 703, 0,
	0, 0, 0, 725, 717, 0, 0, 0, 0, 718,
	0, 0, 0, 0, 0, 726, 0, 714, 715, 716,
	0, 713, 710, 711, 712, 705, 706, 707, 708, 709,
	1205, 1206, 1207, 0, 1204, 1201, 1202, 1203, 1196, 1197,
	1198, 1199, 1200, 0, 0, 0, 726, 0, 714, 715,
	716, 0, 713, 710, 711, 712, 705, 706, 707, 708,
	709, 730, 0, 719, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 727, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 725, 0, 0, 0, 0, 0, 718,
	0, 0, 0, 0, 0, 0, 911, 926, 902, 919,
	918, 0, 0, 904, 903, 0, 0, 0, 928, 927,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 726, 0, 714, 715, 716, 0, 713, 710,
	711, 712, 705, 706, 707, 708, 709, 924, 0, 916,
	915, 0, 0, 719, 0, 0, 0, 914, 0, 0,
	0, 0, 0, 727, 0, 0, 0, 0, 0, 0,
	913, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 907, 908, 909, 0, 575, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 726, 0, 0, 0, 0, 0, 713, 710,
	711, 712, 705, 706, 707, 708, 709, 0, 0, 917,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 912, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	910, 0, 0, 0, 0, 0, 906, 0, 0, 0,
	0, 0, 905, 0, 0, 925, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 929,
}
var sqlPact = [...]int{

	2821, -1000, -6, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 821, -1000, -1000, -1000, 577, 814, 363, 987, 987,
	14061, -1000, -1000, 16569, 1845, 433, 444, 433, 433, 466,
	14061, 538, 657, 91, -1000, 583, -10, 16341, 12921, 1175,
	-8, 12465, 296, 2821, 12693, 12921, 16113, 1041, 937, 12465,
	15885, 15657, 15429, -1000, 8357, -1000, -1000, -1000, -1000, 801,
	-1000, -9, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	794, -1000, 12921, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 15201, 14973,
	773, -1000, -1000, 534, 349, 1196, -1000, -1, -1000, -1000,
	-1000, 1035, -1000, 781, 1034, 1027, 1024, 1018, 348, 817,
	-1000, 773, -1000, 773, -1000, -1000, -1000, 521, 14061, -1000,
	12465, -1000, 14745, 951, 14517, -1000, 583, -1000, -1000, -1000,
	808, 1172, 1172, 1172, 1211, 118, 117, 91, -17, 12921,
	-1000, 297, -17, 6095, 6095, -1000, -1000, 296, -1000, 316,
	10829, -133, -1000, 5845, -1000, 992, 1095, 605, 604, 1091,
	12465, 12921, 562, 14289, -1000, 1090, 105, 1088, -1000, -26,
	1083, -1000, -30, -1000, -1000, -1000, -1000, -1000, -1000, 296,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 11077, 1187, 11077, -1000, -1000, 1229, -1000,
	-1000, -12, -13, 892, 980, 8855, 8607, 1143, 862, -1000,
	-1000, -1000, -3, 3329, 12921, 1047, 11077, 12921, 12921, 12921,
	-1000, 12921, -1000, 886, -1000, -1000, -15, -16, -1000, 14061,
	-1000, 113, -1000, 293, 849, 13833, -1000, 846, -1000, 808,
	-1000, 810, 874, 6613, 7363, 91, -1000, -1000, 91, 91,
	7363, -1000, -1000, 12921, -17, 1228, 12921, 1017, -112, -1000,
	18425, -1000, -1000, 7363, 7363, 7363, 7363, 7363, 694, -1000,
	-1000, -1000, 4077, -1000, -1000, -133, 286, 306, -1000, -1000,
	282, -133, -1000, -1000, -1000, -1000, 280, 1328, 375, -1000,
	-1000, -1000, 7363, 353, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 989, 279, 276, -1000, -1000, -1000, -1000,
	274, 272, 270, 266, 261, 250, 229, 225, 222, 217,
	213, 212, 211, 682, -1000, 389, -1000, -1000, 389, 389,
	-1000, 201, 201, 203, -1000, -1000, -1000, 201, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 210, 50, -1000,
	-1000, -1000, 12921, -133, -1000, -1000, -1000, 3329, 7363, 3080,
	-31, -1000, 18973, -1000, -76, 836, -1000, 11999, 1182, 1163,
	1150, 12465, 520, 518, 12921, 359, 81, 1226, 10333, -1000,
	12921, 12921, -1000, 12921, -1000, -1000, 12921, 12921, 12921, -10,
	11533, 517, -27, 11305, 12921, -1000, -4, -1000, -1000, 1016,
	427, 650, 932, 848, -1000, -1000, -1000, -1000, -20, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1279,
	-1000, -1000, -1000, -1000, 1309, -20, -1000, -1000, -1000, -1000,
	-1000, 1327, -1000, -1000, -1000, -1000, 3329, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 12921, -1000, -1000, -1000, -1000, -1000, -1000,
	650, 932, -1000, -1000, 12465, 11761, 1081, 779, 831, -1000,
	1075, -1000, -1000, -1000, -1000, 18973, -1000, 18973, 586, 942,
	-1000, 942, -21, -1000, 18268, -1000, 209, -36, -1000, 359,
	10085, 6095, 19275, 12921, 527, 7363, 7363, 7363, 7363, 7363,
	7363, 7363, 7363, 7363, 7363, 7363, 7363, 7363, 7363, 7363,
	7363, 7363, 7363, 7363, 7363, 7363, 855, 516, 1059, 722,
	197, 3329, -1000, 1273, 1273, 1273, 19004, 19004, 163, -141,
	17944, -23, -133, -1000, -1000, 5327, 5077, -133, 3577, -1000,
	788, 1302, 380, 18973, 1053, 965, 207, 89, 88, 7363,
	790, 7363, 7613, 7363, 7363, 4327, 7363, 7363, 7363, 7363,
	7363, 7363, -1000, 206, -1000, -1000, -1000, -1000, 1301, -1000,
	-1000, 1298, -1000, 1292, 359, 87, -1000, -1000, 2067, -1000,
	-1000, 5845, -1000, 782, 12921, 12921, 12921, -1000, -1000, 829,
	13605, -1000, 19275, 12921, -1000, 205, 204, 906, 904, 12921,
	12921, 13377, 13149, 12921, 835, 12921, 12921, 603, 596, 7363,
	777, -1000, 9589, 402, 12921, 48, -1000, -1000, -1000, 330,
	12921, -1000, -1000, -1000, 105, -1000, -26, -1000, -1000, 12921,
	11305, -27, -28, -1000, -1000, 12921, 932, -1000, -1000, -1000,
	623, -1000, 621, -1000, 9103, -1000, -1000, -1000, 788, -1000,
	-90, -1000, -1000, -1000, -1000, 85, -29, -1000, -1000, -1000,
	-1000, 12921, 267, 12921, 12921, 1073, 12921, -1000, -1000, -1000,
	7363, -1000, -1000, -1000, -10, 12921, -1000, 963, -64, 1581,
	12237, 12237, -1000, 9341, -1000, -1000, 1242, -1000, -1000, -1000,
	-1000, 61, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 203, 682, 201, 201, 201, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 389, 389, 389, -1000,
	-1000, 337, 785, 785, 1213, 1213, 1213, 566, 566, 644,
	1132, 19160, 19160, 19160, 1479, 933, 933, 19160, 19160, 19160,
	19004, 2791, 400, 7363, 514, 720, 197, 7363, -1000, 789,
	-1000, -1000, -1000, 1006, 194, 7613, 7613, -1000, -1000, -1000,
	4077, -1000, -1000, 193, 7363, -1000, 7363, -35, -37, -1000,
	18973, -1000, -43, -1000, -1000, -24, 7363, 7363, 7363, 84,
	-1000, 512, -1000, 508, 480, 479, -1000, 187, 78, 553,
	-1000, 7363, 692, 185, 184, 7363, -1000, -1000, 18886, 77,
	1001, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 76, 18812,
	73, 18222, -1000, 7613, 7613, 7613, 4077, 182, 68, 18249,
	-155, 18704, 6345, 6345, 6345, 63, 18620, 7363, -155, 2499,
	2231, 2185, -44, -48, -49, 1291, -50, 55, 54, 963,
	-1000, -1000, 7363, -1000, -1000, -1000, 478, 470, 1071, -1000,
	823, -1000, 606, 7363, 12921, 181, 180, 689, -1000, 1069,
	806, 1064, 806, -1000, -76, 701, -1000, -1000, 465, -1000,
	6095, 18973, 596, 1154, -54, -1000, -1000, 359, 10333, 5845,
	-55, -1000, -90, -1000, -90, -1000, -1000, -1000, -1000, -1000,
	-1000, 12921, -1000, 11761, 175, 12921, 173, 169, 12921, -1000,
	-1000, 52, -1000, -1000, -1000, -1000, -1000, 960, 1209, 10085,
	916, 914, 10085, 1144, 723, 723, 723, -1000, -1000, -1000,
	12921, 168, -1000, 9837, 42, 1581, 310, 308, -1000, 1288,
	7363, 400, 7363, 7613, 7613, -1000, 400, -1000, -1000, -1000,
	-1000, 997, 159, 7363, 19275, 17915, 17610, -56, 4827, -100,
	17687, 7363, -1000, -1000, 306, -1000, 38, 5595, -1000, 18444,
	-19, -19, -1000, 858, 732, 706, 558, 1286, 1316, 1103,
	-1000, 7363, 18532, -1000, 10581, 373, 738, 17658, 19275, -1000,
	7363, -1000, 990, 7363, -1000, 19275, 7613, 7613, 7613, 7613,
	7613, 7613, 7613, 7613, 7613, 7613, 7613, 7613, 7613, 7613,
	7613, 7613, 7613, 7613, 919, 7613, 1272, 1272, 1272, -108,
	4577, -1000, 982, 990, 7363, 7363, 19275, 37, 35, 33,
	-1000, 7363, -155, 7363, 7363, 7363, -1000, -1000, -1000, 31,
	-1000, 1283, -1000, -1000, 960, 17963, 12921, 12921, 12921, 1063,
	996, -1000, 17639, -60, 12921, 12921, -1000, 952, 934, 421,
	12921, -1000, 12921, -1000, 12921, 12921, 12921, 12921, -112, -1000,
	161, -10, 596, -1000, -1000, 328, -1000, -1000, 8109, 146,
	11761, 8109, 759, -1000, 356, 7363, 7363, 1581, 10085, 10085,
	1761, 912, 10085, -1000, -1000, -1000, -1000, 138, 12921, 12237,
	403, 1281, 30, 1230, 400, 17305, 111, 7363, 19275, 19080,
	-65, -1000, 7363, 7363, -1000, -66, -1000, 7363, -1000, 18973,
	-1000, 1314, 7363, 29, 28, 20, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 19, -1000, -1000, 18973, 7363, -1000, -1000,
	16797, 7363, 15, -1000, 14, 18973, 982, 18973, -1000, 585,
	585, 1272, 1272, 1272, 419, 419, 613, 264, 243, 243,
	243, 254, 432, 432, 243, 243, 243, 985, 893, 131,
	18986, 7363, -71, -1000, -1000, -1000, 18973, 18973, 8, -1000,
	-1000, -1000, -155, 160, 17382, 17353, -1000, 7, 356, -1000,
	-1000, -1000, -1000, 12921, -1000, 12921, -1000, 12921, 824, -1000,
	-1000, 900, 130, 7613, 12921, -1000, 713, -75, -77, 820,
	-1000, 819, 7363, -1000, 19275, 806, 806, -1000, 456, 453,
	-1000, 1108, 8109, 1149, -1000, -1000, 129, -79, -1000, 82,
	1176, 7363, -1000, -1000, 128, 8109, 5, -81, 12921, -1000,
	12921, 18973, -155, -1000, 1761, -1000, 127, 7363, 10085, -1000,
	12921, -83, -1000, -1000, 303, 301, -1000, 7363, 7363, 19080,
	-89, -1000, 19275, 400, 400, -1000, 17334, -1000, 18444, -1000,
	-1000, -1000, -1000, 18973, 687, -1000, 17077, -1000, -1000, -1000,
	7613, 981, 125, 19275, 17048, -1000, -1000, 7363, -1000, -1000,
	-1000, -1000, -1000, 1329, -1000, -1000, -1000, 7363, 18986, 112,
	-1000, 124, -1000, -1000, -1000, 607, -1000, -1000, 18973, 1191,
	-1000, -1000, 12921, 12921, 497, -91, 12921, -1000, -1000, 3827,
	713, 8109, 1185, -133, 12921, 1185, 17029, 3577, -95, -1000,
	713, 123, -136, -1000, 1224, -1000, 12921, 18973, -1000, -96,
	-1000, -1000, -1000, 400, 400, -1000, -1000, -1000, 4, 738,
	1206, -1000, 2716, 7613, 19275, -104, -1000, 2691, -1000, 2524,
	864, 12921, 12921, 12921, 409, 12921, -1000, -1000, 555, -1000,
	359, -1000, -1000, -1000, -1000, -1000, -1000, 1176, -24, 713,
	-1000, 8109, 12921, 121, -111, -1000, -1000, 672, 7363, 2716,
	-113, -1000, -1000, -1000, 747, 691, -117, -121, 112, -1000,
	7363, -1000, 10333, -1000, 1185, 1, -1000, -153, -1000, -1000,
	-1000, -7, 7113, 7113, -155, -1000, -1000, 756, 755, 601,
	-1000, -1000, -1000, -1000, -1000, 864, 18973, -127, -1000, -1000,
	713, -1000, -1000, -1000, 7861, 775, 584, 17992, -1000, -1000,
	1123, -1000, 414, 822, 822, 747, -1000, -1000, 1245, -1000,
	-1000, -1000, -1000, -1000, -1000, 1263, -1000, -1000, 920, -1000,
	-1000, 6863, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1569, 1568, 1222, 1566, 1557, 1553, 1550, 1545, 79,
	1540, 1534, 90, 1533, 78, 1532, 1526, 1523, 1521, 35,
	1518, 1517, 1515, 1514, 1513, 66, 39, 108, 1646, 100,
	1509, 1504, 1502, 12, 80, 73, 1501, 59, 64, 87,
	1295, 43, 1500, 109, 45, 13, 688, 71, 1499, 1496,
	1495, 1493, 24, 1492, 1490, 1487, 8, 50, 15, 1486,
	16, 46, 1485, 1482, 77, 1479, 70, 85, 26, 102,
	72, 1477, 54, 1472, 7, 49, 1470, 21, 1467, 20,
	52, 115, 1465, 48, 275, 38, 18, 42, 1464, 1462,
	1461, 1457, 74, 60, 41, 1455, 1454, 53, 1453, 104,
	110, 1450, 1449, 1445, 1443, 1442, 1441, 653, 1438, 1437,
	587, 10, 25, 44, 32, 88, 84, 28, 0, 807,
	728, 1436, 36, 34, 57, 23, 27, 22, 1435, 83,
	1434, 1433, 1431, 1430, 1429, 55, 1428, 47, 112, 30,
	62, 69, 17, 127, 61, 86, 126, 82, 1427, 99,
	1426, 31, 1425, 1423, 671, 58, 1422, 1414, 1411, 574,
	570, 559, 101, 1408, 1407, 316, 213, 1406, 1403, 65,
	1400, 1399, 116, 1388, 111, 92, 1386, 95, 1382, 68,
	1380, 281, 113, 91, 1379, 98, 51, 1376, 1371, 1369,
	14, 2, 3, 6, 5, 4, 37, 33, 1367, 1366,
	97, 75, 1365, 117, 1364, 1361, 29, 1360, 1354, 19,
	1353, 11, 1349, 9, 1, 1348, 105, 1341, 81, 1340,
	1233, 1339, 114, 1337, 1335, 1242, 56,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 4, 4, 35, 35, 34, 34, 34, 34,
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
	34, 31, 31, 37, 37, 37, 36, 36, 32, 32,
	5, 5, 5, 9, 10, 10, 10, 10, 10, 10,
	69, 69, 68, 68, 71, 71, 11, 11, 12, 12,
	12, 12, 150, 150, 149, 13, 18, 216, 216, 216,
	220, 220, 221, 221, 222, 222, 222, 222, 222, 222,
	222, 218, 218, 21, 21, 21, 21, 107, 107, 109,
	109, 109, 109, 39, 106, 106, 106, 106, 108, 108,
	108, 108, 174, 172, 172, 179, 179, 179, 49, 49,
	49, 49, 49, 50, 50, 50, 171, 171, 171, 171,
	180, 180, 180, 180, 180, 180, 51, 51, 51, 178,
	178, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 173, 173, 217, 217, 219, 219,
	8, 8, 52, 52, 53, 53, 113, 113, 113, 112,
	188, 188, 189, 189, 189, 190, 190, 190, 190, 190,
	190, 190, 187, 187, 185, 185, 186, 186, 186, 186,
	223, 223, 111, 111, 56, 56, 193, 193, 193, 193,
	191, 191, 191, 191, 191, 194, 192, 195, 195, 195,
	195, 195, 138, 138, 138, 24, 7, 7, 96, 96,
	60, 60, 142, 142, 142, 45, 45, 33, 33, 33,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 97,
	97, 98, 98, 16, 20, 23, 23, 23, 23, 23,
	225, 225, 42, 42, 42, 42, 43, 43, 110, 110,
	110, 110, 110, 38, 6, 6, 14, 48, 48, 103,
	103, 103, 105, 105, 105, 104, 104, 104, 83, 83,
	25, 74, 74, 75, 75, 148, 76, 76, 19, 19,
	28, 28, 26, 26, 26, 26, 26, 26, 27, 27,
	29, 29, 29, 29, 29, 29, 29, 201, 201, 201,
	203, 203, 200, 15, 15, 15, 15, 202, 202, 224,
	224, 84, 84, 84, 55, 54, 54, 58, 58, 57,
	59, 59, 141, 81, 81, 81, 81, 99, 100, 100,
	101, 101, 102, 102, 80, 80, 125, 125, 30, 30,
	64, 64, 65, 65, 143, 143, 143, 143, 144, 144,
	144, 144, 144, 144, 139, 139, 139, 139, 140, 140,
	87, 87, 87, 87, 85, 85, 86, 86, 145, 145,
	145, 145, 82, 82, 146, 146, 146, 114, 114, 151,
	151, 151, 63, 63, 63, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 153, 153, 153, 153,
	155, 155, 155, 154, 154, 154, 154, 154, 154, 154,
	154, 154, 154, 154, 154, 154, 156, 156, 163, 163,
	164, 164, 165, 166, 157, 157, 158, 158, 159, 160,
	167, 167, 167, 169, 169, 161, 161, 162, 93, 93,
	93, 93, 93, 93, 93, 93, 93, 93, 93, 93,
	93, 93, 94, 94, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 196, 196, 196, 196, 196,
	196, 196, 198, 198, 199, 199, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 204, 204, 205, 205, 206, 206, 207, 207, 209,
	210, 210, 210, 211, 215, 215, 208, 208, 212, 212,
	212, 213, 213, 214, 214, 214, 214, 214, 129, 129,
	129, 130, 130, 131, 70, 70, 127, 127, 126, 126,
	126, 128, 128, 88, 168, 168, 168, 168, 168, 168,
	168, 89, 89, 95, 90, 90, 91, 91, 91, 91,
	91, 91, 122, 123, 92, 92, 92, 124, 124, 132,
	136, 136, 135, 134, 134, 133, 133, 117, 117, 117,
	117, 117, 116, 115, 77, 77, 226, 226, 137, 137,
	78, 78, 79, 73, 73, 72, 72, 147, 147, 147,
	147, 66, 66, 67, 67, 46, 46, 47, 47, 47,
	47, 61, 61, 62, 62, 44, 44, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 170, 170,
	170, 40, 40, 40, 41, 41, 176, 176, 176, 177,
	177, 177, 177, 175, 175, 175, 175, 175, 181, 181,
	181, 181, 181, 181, 181, 181, 181, 181, 181, 181,
	181, 181, 181, 181, 181, 181, 181, 181, 181, 181,
	181, 181, 181, 181, 181, 181, 181, 181, 181, 181,
	181, 181, 181, 181, 181, 181, 181, 181, 181, 181,
	181, 181, 181, 181, 181, 181, 181, 181, 181, 181,
	181, 181, 181, 181, 181, 181, 181, 181, 181, 181,
	181, 181, 181, 181, 181, 181, 181, 181, 181, 181,
	181, 181, 181, 181, 181, 181, 181, 181, 181, 181,
	181, 181, 181, 181, 181, 181, 181, 181, 181, 181,
	181, 181, 181, 181, 181, 181, 183, 183, 183, 183,
	183, 183, 183, 183, 183, 183, 183, 183, 183, 183,
	183, 183, 183, 183, 183, 183, 183, 183, 183, 183,
	183, 183, 183, 183, 183, 183, 183, 183, 183, 183,
	183, 183, 183, 183, 183, 183, 183, 183, 183, 182,
	182, 182, 182, 182, 182, 182, 182, 182, 182, 182,
	182, 182, 184, 184, 184, 184, 184, 184, 184, 184,
	184, 184, 184, 184, 184, 184, 184, 184, 184, 184,
	184, 184, 184, 184, 184, 184, 184, 184, 184, 184,
	184, 184, 184, 184, 184, 184, 184, 184, 184, 184,
	184, 184, 184, 184, 184, 184, 184, 184, 184, 184,
	184, 184, 184, 184, 184, 184, 184, 184, 184, 184,
	184, 184, 184, 184, 184, 184, 184, 184, 184, 184,
	184, 184, 184, 184, 184, 184, 184, 184, 184, 184,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 4, 6, 1, 3, 2, 5, 3, 6,
	4, 6, 6, 6, 4, 8, 2, 3, 3, 6,
	4, 3, 2, 1, 1, 0, 2, 0, 2, 0,
	1, 1, 1, 6, 3, 5, 4, 6, 3, 5,
	1, 3, 1, 2, 2, 3, 2, 5, 1, 1,
	1, 1, 1, 3, 1, 6, 6, 1, 2, 2,
	1, 1, 1, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 2, 3, 6, 3, 2, 1, 1,
	1, 3, 3, 2, 3, 3, 3, 3, 1, 3,
	3, 2, 1, 1, 3, 1, 1, 1, 2, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 1, 1, 1, 1, 0, 1,
	1, 2, 2, 4, 2, 4, 4, 4, 4, 3,
	3, 4, 3, 2, 2, 0, 2, 0, 2, 0,
	6, 9, 1, 0, 1, 3, 1, 1, 1, 3,
	2, 0, 3, 1, 2, 2, 1, 1, 2, 4,
	2, 5, 6, 7, 3, 1, 4, 5, 5, 10,
	1, 1, 4, 0, 3, 0, 2, 2, 2, 0,
	1, 1, 2, 2, 0, 3, 3, 2, 1, 1,
	2, 2, 1, 2, 1, 4, 10, 13, 1, 0,
	1, 3, 3, 3, 5, 2, 0, 1, 1, 0,
	6, 6, 8, 6, 8, 8, 10, 8, 10, 1,
	0, 2, 0, 2, 2, 3, 3, 2, 2, 2,
	1, 0, 1, 3, 2, 0, 2, 1, 1, 1,
	3, 3, 0, 3, 3, 6, 7, 1, 3, 1,
	4, 2, 8, 5, 0, 4, 3, 0, 2, 0,
	8, 1, 3, 1, 1, 3, 5, 5, 1, 1,
	3, 3, 1, 2, 3, 2, 3, 4, 1, 1,
	8, 8, 1, 2, 4, 4, 4, 2, 2, 3,
	1, 3, 6, 1, 1, 1, 1, 1, 0, 1,
	0, 1, 1, 0, 1, 1, 0, 1, 0, 3,
	1, 3, 2, 2, 2, 1, 1, 2, 2, 3,
	1, 1, 1, 1, 3, 0, 2, 0, 2, 3,
	2, 0, 1, 3, 2, 2, 1, 4, 3, 4,
	5, 4, 5, 4, 5, 2, 4, 1, 1, 0,
	2, 2, 2, 1, 1, 0, 4, 2, 1, 2,
	2, 4, 1, 3, 1, 2, 3, 2, 0, 2,
	5, 2, 3, 4, 0, 1, 1, 1, 1, 2,
	4, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 5, 0, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 2, 1, 1, 3, 0, 1, 1,
	1, 1, 5, 2, 1, 1, 1, 1, 4, 1,
	2, 2, 1, 1, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 0, 1, 4, 1, 3, 3, 5, 2, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 2, 2, 3, 4, 4, 5, 3, 4, 3,
	3, 4, 3, 4, 3, 4, 5, 6, 6, 7,
	6, 7, 6, 7, 3, 4, 1, 3, 2, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 5,
	6, 6, 7, 1, 1, 1, 3, 1, 1, 1,
	2, 2, 2, 1, 1, 3, 5, 6, 8, 6,
	6, 4, 4, 1, 1, 1, 5, 1, 3, 1,
	3, 1, 1, 1, 1, 6, 4, 4, 4, 4,
	6, 5, 5, 5, 4, 8, 6, 6, 4, 4,
	4, 5, 0, 5, 0, 2, 0, 1, 3, 3,
	2, 2, 0, 6, 1, 0, 3, 0, 2, 2,
	0, 1, 4, 2, 2, 2, 2, 2, 4, 3,
	5, 4, 3, 5, 1, 3, 1, 3, 3, 3,
	2, 1, 3, 3, 1, 1, 1, 1, 1, 1,
	1, 4, 3, 2, 3, 0, 3, 3, 2, 2,
	1, 0, 2, 2, 3, 2, 1, 1, 3, 5,
	1, 2, 4, 2, 0, 1, 0, 1, 1, 2,
	3, 5, 2, 2, 1, 2, 1, 0, 1, 1,
	1, 3, 3, 1, 0, 1, 3, 3, 2, 1,
	1, 1, 3, 1, 3, 1, 2, 1, 2, 2,
	1, 1, 3, 3, 0, 1, 2, 1, 1, 1,
	1, 6, 2, 3, 5, 1, 1, 1, 1, 2,
	2, 1, 1, 1, 1, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -9, -10, -11, -13,
	-14, -17, -18, -20, -19, -21, -22, -23, -16, -24,
	-25, 19, -6, -7, -8, -202, 83, 89, 101, 187,
	194, -26, -28, 201, 202, 29, 209, 52, 85, 189,
	184, 227, 58, -201, -29, -27, 271, 247, 253, 197,
	-30, 215, 240, 274, 215, 70, 112, 78, 116, 234,
	70, 112, 215, -12, 271, -19, -14, -25, -9, -220,
	18, -221, -222, 58, 83, 101, 197, 116, 78, 234,
	-220, -43, 194, -40, 4, -181, -183, 16, 17, 19,
	28, 29, 33, 37, 40, 51, 52, 53, 55, 57,
	60, 61, 68, 69, 70, 71, 73, 78, 82, 83,
	89, 93, 94, 96, 102, 107, 108, 113, 116, 124,
	126, 127, 132, 135, 138, 140, 141, 142, 143, 144,
	146, 147, 148, 150, 153, 155, 156, 162, 165, 168,
	169, 172, 175, 176, 177, 179, 180, 184, 182, 183,
	185, 187, 189, 190, 192, 195, 196, 198, 199, 201,
	202, 204, 206, 208, 209, 212, 210, 216, 217, 223,
	227, 228, 229, 230, 233, 234, 237, 238, 239, 243,
	248, 249, 250, 251, 30, 31, 32, 34, 35, 38,
	39, 43, 44, 45, 47, 72, 74, 75, 88, 90,
	95, 103, 105, 109, 110, 117, 118, 119, 121, 130,
	152, 154, 163, 167, 171, 173, 178, 191, 205, 211,
	213, 219, 220, 224, 225, 240, 241, -107, 135, 199,
	223, -108, -106, -174, 219, 144, -68, -40, 194, 4,
	70, 51, 71, 102, 112, 113, 127, 216, 219, 223,
	18, -225, 223, 223, -225, -225, -42, 223, 221, -43,
	-224, 215, 215, -96, 70, 232, -27, -29, -28, -57,
	-58, 231, 120, 87, 161, -26, -28, -201, -203, 179,
	-200, -40, -203, -54, -55, 18, 80, 275, -145, -46,
	159, -40, -79, 271, -3, -145, 109, -40, -46, 109,
	99, 122, -146, -145, -40, 109, -66, 109, -46, -69,
	109, -68, -150, -149, -177, 4, -181, -183, -182, 240,
	49, 59, 100, 115, 123, 125, 131, 133, 145, 164,
	166, 188, 203, 158, 275, 158, -40, -107, 45, -107,
	-109, -38, -39, 124, 175, 221, 256, 99, 251, -51,
	6, 76, -71, 273, 99, -217, 158, 99, 99, 99,
	-173, 99, 251, 124, 175, -110, -38, -39, -110, 221,
	-43, -82, -145, -68, 109, 112, -40, 109, -57, -58,
	-81, -99, -100, 134, 157, -84, 18, 80, -84, -84,
	37, 272, 272, 275, -203, -62, 271, -73, -72, -147,
	-118, 264, -120, 262, 263, 268, 149, 252, -129, -46,
	-121, 9, 271, -132, -198, -28, 88, 24, -130, -131,
	191, -40, 8, 5, 6, 7, -44, -153, -162, 226,
	91, 151, 41, -196, -197, 4, -181, -176, -154, -164,
	-158, -161, 121, 49, 63, 66, 64, 67, 200, 235,
	42, 90, 167, 171, 213, 224, 225, 109, 152, 110,
	47, 103, 130, 82, 31, 32, 34, 35, 43, 44,
	72, 74, 75, 95, 117, 118, 119, 154, 178, 205,
	220, 241, -182, -165, -166, -159, -160, -167, -72, -79,
	264, -46, 271, -77, -117, -116, -115, 276, 269, 273,
	-78, -137, -118, 76, -35, 182, -34, 17, 19, 83,
	238, 88, 182, 182, 88, -146, -48, -46, 201, -40,
	25, 88, -37, 275, 40, 185, 88, 275, 88, 272,
	275, -216, -67, 215, 70, -47, -40, 264, -222, -216,
	25, 275, 275, 132, -50, 138, 148, 107, -172, 76,
	-179, -171, -138, 9, 226, 91, 158, -178, 5, 263,
	-170, -177, 6, 8, 262, -172, 76, 61, -180, 6,
	4, -162, -138, 76, 135, 121, 273, -175, 4, -181,
	-183, -182, -184, 18, 20, 21, 22, 23, 24, 25,
	26, 27, 36, 41, 42, 46, 48, 50, 56, 58,
	62, 63, 64, 65, 66, 67, 76, 77, 79, 80,
	81, 84, 85, 87, 91, 92, 97, 98, 99, 101,
	104, 106, 111, 112, 114, 120, 122, 128, 129, 134,
	136, 137, 149, 151, 157, 158, 159, 160, 161, 170,
	174, 181, 186, 197, 200, 207, 214, 215, 218, 221,
	222, 226, 231, 232, 235, 236, 242, 244, 245, 246,
	247, -174, -219, 97, -216, -174, -174, -174, -174, 132,
	275, 275, -43, -37, 275, 271, 149, -41, 109, -40,
	149, -81, -100, -99, -101, -118, 18, -118, -120, -27,
	-27, -27, -59, -141, -118, -200, 25, -61, -40, -64,
	99, 275, 10, 48, 28, 262, 263, 264, 265, 266,
	259, 260, 261, 258, 254, 255, 256, 54, 139, 193,
	12, 13, 14, 22, 160, 133, 252, 203, 123, 30,
	111, 25, 4, -118, -118, -118, -118, -118, 166, -28,
	-118, -70, -77, -28, -126, 269, 271, -77, 271, 6,
	6, 271, -133, -118, -204, 248, 97, 271, 271, 271,
	271, 271, 271, 271, 271, 271, 271, 271, 271, 271,
	271, 271, 173, -169, 243, -169, -169, -155, 271, -155,
	-156, 271, -155, 271, -64, -46, -117, -175, -118, -175,
	264, 275, 272, 275, 221, -97, 56, 50, -112, 109,
	50, -185, -40, 56, -186, 46, 232, 174, 98, -97,
	56, -97, 56, 56, -145, 221, 221, -46, -114, 245,
	-103, -19, 271, 76, 25, -74, -75, -148, -76, -46,
	271, -40, -40, -46, -66, -68, -69, -12, -149, 221,
	275, -67, -61, -116, -115, 99, 223, -39, -38, -49,
	177, 206, 183, 198, 275, 5, 8, 8, 6, -175,
	-218, -40, -39, -38, -145, -52, -53, -113, -112, -187,
	-185, 112, 232, 88, 158, 149, 88, -102, 191, 192,
	275, -33, 26, 79, 271, 275, 272, -114, -65, -143,
	-145, -28, -144, 271, -147, -151, -152, -154, -163, -157,
	-161, -162, 33, 39, 38, 217, 211, 117, 118, 119,
	205, 31, 178, 95, 82, 75, 74, 154, 35, 34,
	-165, -166, -159, -160, 72, 220, 32, 44, 43, 241,
	-68, 219, -118, -118, -118, -118, -118, -118, -118, -118,
	-118, -118, -118, -118, -118, -118, -118, -118, -118, -118,
	-118, -118, -118, 133, 203, 30, 111, 221, 151, 149,
	226, 91, 233, 80, 155, -226, 214, 27, -124, -28,
	271, -175, -129, 191, 271, 272, 275, -70, -128, 270,
	-118, -126, -70, 272, 272, -70, 242, 18, 80, 264,
	-93, 250, 142, 73, 108, 141, -94, 196, 8, -136,
	-135, 244, -205, 93, 104, 271, 272, 272, -118, -88,
	-168, 4, 250, 142, 73, 108, 141, 196, -89, -118,
	-90, -119, -120, 262, 263, 268, 271, 191, -91, -118,
	-70, -118, 36, 129, 222, -92, -118, 99, -70, -118,
	-118, -118, -70, -70, -70, 271, 8, 8, 8, -114,
	272, 270, 277, -137, -34, -46, -40, -40, 149, -112,
	109, -151, -40, 271, 271, 126, 126, -40, -40, 109,
	-40, 109, -40, -40, -35, 182, -40, -40, 182, -83,
	186, -118, -105, 158, -66, 240, -40, -64, 275, 256,
	-66, -37, -218, -47, -218, -38, 230, 53, 177, -179,
	-93, 275, 272, 275, -41, 112, -68, -46, 88, -40,
	-141, -15, -19, -14, -25, -9, -40, -80, 104, 275,
	59, -87, 125, 145, 100, 131, 188, 115, -140, -139,
	25, -40, -140, -28, -144, -143, -63, 24, -93, 271,
	251, -118, 221, -226, 214, -124, -118, 151, 226, 91,
	233, 80, 155, 99, 271, -119, -119, -70, 271, -70,
	-118, 275, 270, 270, 275, 272, -58, 275, -57, -118,
	-70, -70, 272, 221, 221, 221, 221, 271, 272, -134,
	-135, 84, -118, -210, 165, 271, 271, -118, 25, 272,
	99, 272, -95, 170, 272, 10, 262, 263, 264, 265,
	266, 259, 260, 261, 258, 254, 255, 256, 54, 139,
	193, 12, 13, 14, 123, 111, -119, -119, -119, -70,
	271, 272, -122, -123, 99, 97, 25, -92, -92, -92,
	272, 99, -70, 275, 275, 275, 272, 272, 272, 8,
	272, 275, 272, 272, -80, -118, 221, 221, 88, 149,
	-188, -186, -118, -61, 271, 271, -31, 83, 201, -98,
	88, -37, 88, -37, 221, -97, 56, 221, -72, -83,
	55, 272, -114, -75, -137, 272, -40, -113, 271, -41,
	271, 271, -40, 272, -125, 106, 37, -143, 125, 125,
	-143, -87, 125, -85, 164, -85, -85, -40, 271, 272,
	269, 269, 8, -118, -118, -119, -119, 99, 271, -118,
	-127, -151, 22, 22, 272, -70, 272, 275, 272, -118,
	-126, 272, 242, -58, -58, -58, 142, 108, 141, -94,
	141, -94, -94, 8, 6, 85, -118, 218, -211, -40,
	271, 245, -57, 272, -151, -118, -122, -118, -151, -119,
	-119, -119, -119, -119, -119, -119, -119, -119, -119, -119,
	-119, -119, -119, -119, -119, -119, -119, 80, 149, 155,
	-119, 275, -70, 272, -123, -122, -118, -118, -151, 272,
	272, 272, -70, -118, -118, -118, 272, 8, -125, 270,
	-40, -40, -112, 88, -189, 56, -190, 48, 149, 151,
	232, 174, 46, 76, 181, 272, 272, -61, -61, 149,
	76, 149, 76, 69, 228, -40, -40, -46, -40, -40,
	-40, -104, 271, 158, -19, -83, 256, -60, -142, -40,
	-199, 271, -196, -197, -44, 271, -52, -60, 158, -206,
	246, -118, -70, -143, -143, -86, 236, 158, 125, -143,
	271, -61, -139, 270, 8, 8, 272, 22, 22, -118,
	-127, 272, 275, -118, -118, 272, -118, 6, -118, 272,
	272, 272, 272, -118, -215, -40, -118, 272, 272, -123,
	99, 80, 155, 271, -118, 272, 272, 275, 272, 272,
	272, -206, -112, -40, -68, 151, 126, 271, -119, -46,
	-111, -223, 57, 212, 272, 272, 151, 151, -118, -151,
	-37, -37, 221, 221, 81, -60, 56, -79, -28, 271,
	272, 275, -45, -77, 48, -45, -118, 271, -60, 272,
	272, -46, -207, -209, -40, -86, 271, -118, -143, -61,
	272, 270, 270, -118, -118, 272, -151, 272, -58, -208,
	169, 272, -119, 99, 271, -127, 272, -118, -190, -118,
	-56, 271, 271, 181, -36, 48, -40, -40, 234, 150,
	272, -40, -111, -142, -33, -68, -33, 272, -70, 272,
	-111, 271, 275, 25, -61, 272, 272, -58, 37, -119,
	-127, 272, 272, 272, -193, 140, -61, -61, -46, -32,
	236, -68, 201, -114, -45, -58, -111, -60, -209, -211,
	272, -212, 176, 192, -70, 272, -191, -194, -192, 158,
	100, 168, 204, 272, 272, -56, -118, -74, -33, 272,
	272, 272, -213, -214, 30, 229, 61, -118, -213, -192,
	158, -194, 158, 234, 78, -193, -114, -111, -214, 172,
	96, 191, 172, 96, -195, 147, 185, 40, 201, -195,
	-191, 22, 16, 151, 76, -214,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 0, 50, 51, 52, 0, 0, 318, 0, 0,
	0, 288, -2, 0, 0, 251, 0, 251, 251, 255,
	0, 320, 219, 317, -2, 328, 0, 0, 0, 326,
	302, 0, 0, -2, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 66, 0, 68, 69, 70, 71, 0,
	80, 81, 82, 84, 85, 86, 87, 88, 89, 90,
	0, 244, 806, 257, 721, 722, 723, 738, 739, 740,
	741, 742, 743, 744, 745, 746, 747, 748, 749, 750,
	751, 752, 753, 754, 755, 756, 757, 758, 759, 760,
	761, 762, 763, 764, 765, 766, 767, 768, 769, 770,
	771, 772, 773, 774, 775, 776, 777, 778, 779, 780,
	781, 782, 783, 784, 785, 786, 787, 788, 789, 790,
	791, 792, 793, 794, 795, 796, 797, 798, 799, 800,
	801, 802, 803, 804, 805, 807, 808, 809, 810, 811,
	812, 813, 814, 815, 816, 817, 818, 819, 820, 821,
	822, 823, 824, 825, 826, 827, 828, 829, 830, 831,
	832, 833, 834, 835, 836, 837, 838, 839, 840, 841,
	842, 843, 844, 845, 846, 847, 848, 849, 850, 851,
	852, 853, 854, 855, 856, 857, 858, 859, 860, 861,
	862, 863, 864, 865, 866, 867, 868, 869, 870, 871,
	872, 873, 874, 875, 876, 877, 878, 93, 774, 810,
	821, 98, 108, 0, 873, -2, 112, 62, 806, 141,
	142, 0, 144, 157, 0, 0, 0, 155, 0, 0,
	153, 262, 250, 262, 247, 248, 249, 252, 0, 243,
	0, 319, 0, 0, 0, 218, -2, 298, 299, -2,
	0, 323, 323, 323, 0, 0, 299, 0, 307, 796,
	310, 704, 308, 684, 0, 325, 324, 0, 303, 378,
	0, 695, 348, 0, 2, 0, 855, 0, 0, 855,
	0, 0, 0, 384, 54, 855, 45, 855, 691, 58,
	855, 60, 0, 72, 74, 729, 730, 731, 732, 877,
	879, 880, 881, 882, 883, 884, 885, 886, 887, 888,
	889, 890, 891, 0, 0, 0, 256, 94, 845, 96,
	97, 99, 100, 0, 0, 0, 0, 0, 0, 111,
	136, 137, 63, 0, 0, 159, 0, 0, 0, 0,
	149, 0, 150, 0, 152, 245, 258, 259, 246, 0,
	254, 45, 382, 0, 855, 725, 264, 855, -2, 0,
	294, 335, 336, 0, 0, 0, 321, 322, 0, 0,
	0, 290, 291, 0, 309, 0, 0, 351, 683, 685,
	689, 690, 464, 0, 0, 0, 0, 0, 0, 543,
	544, 545, 0, 547, 548, 549, 850, 0, 553, 554,
	869, 695, 707, 708, 709, 710, 0, 0, 0, 715,
	716, 717, 666, 592, 563, -2, -2, 705, 406, 407,
	408, 409, -2, 879, 567, 569, 571, 572, 573, 574,
	0, 851, 865, 866, 872, 875, 876, 855, 862, 856,
	846, 853, 861, 759, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, 728, 430, 431, 436, 437, 439, 351, 349,
	379, 380, 0, 696, 674, 667, 668, 0, 0, 0,
	0, 680, 678, 679, 22, 240, 24, 0, 240, 240,
	0, 0, 0, 0, 0, 388, 0, 267, 0, 385,
	0, 0, 56, 0, 43, 44, 0, 0, 0, 318,
	0, 0, 77, 0, 755, 693, 697, 700, 83, 0,
	0, 0, 0, 0, 103, 123, 124, 125, 104, 106,
	113, 115, 116, 117, 126, 127, 128, 129, 212, 0,
	214, 139, 140, 718, 0, 105, 107, 109, 110, 130,
	131, 0, 133, 134, 135, 447, 0, 64, 733, 734,
	735, 736, 737, 892, 893, 894, 895, 896, 897, 898,
	899, 900, 901, 902, 903, 904, 905, 906, 907, 908,
	909, 910, 911, 912, 913, 914, 915, 916, 917, 918,
	919, 920, 921, 922, 923, 924, 925, 926, 927, 928,
	929, 930, 931, 932, 933, 934, 935, 936, 937, 938,
	939, 940, 941, 942, 943, 944, 945, 946, 947, 948,
	949, 950, 951, 952, 953, 954, 955, 956, 957, 958,
	959, 960, 961, 962, 963, 964, 965, 966, 967, 968,
	969, 143, 145, 0, 156, 146, 147, 148, 154, 151,
	0, 0, 253, 215, 0, 163, 0, 0, 855, 724,
	0, 297, 333, 334, 337, 340, 341, 338, 464, 304,
	305, 306, 329, 330, 229, 311, 0, 0, 701, 388,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 677,
	0, 0, 688, 468, 469, 470, 491, 492, 0, -2,
	624, 0, 550, 551, 552, 0, 0, -2, 0, 712,
	461, 0, 0, 665, 594, 0, 0, 0, 0, 0,
	0, 0, 645, 651, 0, 0, 0, 0, 0, 0,
	0, 0, 420, 433, 443, 441, 440, 422, 0, 421,
	419, 0, 423, 0, 388, 0, 675, 669, 0, 672,
	673, 0, 682, 0, 0, 0, 0, 239, 26, 855,
	0, 36, 0, 0, 185, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 279, 0,
	274, 269, 0, 0, 0, 351, 281, 283, 284, 0,
	0, 386, 55, 692, 45, 61, 59, 67, 73, 0,
	0, 78, 79, 698, 699, 0, 0, 101, 102, 263,
	0, 120, 0, 122, 0, 213, 720, 719, 461, 65,
	158, 91, 260, 261, 383, 0, 162, 164, 166, 167,
	168, 725, 0, 0, 0, 0, 0, 339, 342, 343,
	0, 332, 227, 228, 318, 0, 703, 345, 350, 352,
	369, 369, 356, 0, 686, 465, 394, 395, 396, 397,
	398, 461, 401, 402, 403, 404, 405, 413, 414, 415,
	416, 417, 418, 427, 0, 412, 412, 412, 424, 425,
	428, 429, 434, 435, 445, 446, 444, 444, 444, 442,
	466, 0, 471, 472, 473, 474, 475, 476, 477, 478,
	479, -2, -2, -2, 483, 484, 485, -2, -2, -2,
	489, 490, -2, 0, 0, 677, 0, 0, 497, 0,
	500, 502, 504, 0, 0, 0, 0, 676, 514, 657,
	0, 687, 499, 0, 0, 546, 0, 0, 0, 630,
	624, 631, 0, -2, 555, 328, 0, 0, 0, 0,
	713, 448, 449, 450, 451, 452, 453, 462, 0, 664,
	660, 0, 602, 0, 0, 0, 568, 570, 0, 0,
	0, 634, 635, 636, 637, 638, 639, 640, 0, 0,
	0, 0, 516, 0, 0, 0, 0, 869, 0, 624,
	650, 0, 0, 0, 0, 0, 624, 0, 656, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 345,
	381, 670, 0, 681, 25, 231, 0, 0, 0, 28,
	855, 171, 0, 0, 0, 0, 0, 242, 37, 855,
	45, 855, 45, 38, 23, 240, 230, 233, 0, 53,
	0, 387, 279, 0, 0, 271, 268, 388, 0, 0,
	0, 57, 75, 694, 76, 95, 118, 119, 121, 114,
	132, 0, 160, 0, 0, 725, 0, 0, 0, 265,
	331, 0, 313, 314, 315, 316, 702, 347, 0, 0,
	0, 0, 0, 0, 375, 375, 375, 373, 354, 368,
	0, 367, 355, -2, 356, 0, 389, 391, 399, 0,
	0, -2, 0, 0, 0, 515, -2, 498, 501, 503,
	505, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	625, 0, 628, 629, 0, -2, 0, 0, 327, 328,
	328, 328, 561, 0, 0, 0, 0, 0, 0, 0,
	661, 0, 0, 562, 0, 0, 0, 0, 0, 576,
	0, 577, 0, 0, 578, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 518, 519, 520, 0,
	0, 579, 648, 649, 0, 0, 0, 0, 0, 0,
	584, 0, 655, 0, 0, 0, 588, 589, 590, 0,
	410, 0, 426, 438, 347, 0, 0, 0, 0, 0,
	169, 184, 0, 0, 0, 0, 30, 0, 0, 0,
	0, 34, 0, 40, 0, 0, 0, 0, 278, 266,
	277, 0, 279, 282, 285, 0, 92, 165, 0, 0,
	163, 0, 0, 312, 596, 0, 0, 353, 0, 0,
	0, 0, 0, 370, 374, 371, 372, 365, 0, 358,
	0, 0, 0, 467, -2, 0, 0, 0, 0, -2,
	0, 626, 0, 0, 658, 0, 619, 0, -2, 625,
	632, 556, 0, 0, 0, 0, 454, 455, 456, 457,
	458, 459, 460, 0, 714, 659, 663, 0, 600, 601,
	605, 0, 0, 566, 0, 633, 642, 643, 517, 521,
	522, 523, 524, 525, 526, 527, 528, 529, -2, -2,
	-2, 533, 534, 535, -2, -2, -2, 0, 0, 0,
	644, 0, 0, 622, 646, 647, 652, 653, 0, 581,
	582, 583, 654, 0, 0, 0, 432, 0, 596, 671,
	235, 237, 27, 0, 170, 0, 173, 0, 0, 176,
	177, 0, 0, 0, 0, 186, 193, 0, 0, 0,
	42, 0, 0, 241, 0, 45, 45, 232, 0, 0,
	234, 0, 0, 0, 270, 280, 0, 0, 220, 226,
	226, 0, 564, 565, 0, 0, 0, 0, 0, 300,
	0, 346, 344, 359, 0, 361, 0, 0, 0, 363,
	0, 0, 357, 392, 0, 0, 400, 0, 0, -2,
	0, 508, 0, -2, -2, 618, 625, 711, 328, 557,
	559, 560, 463, 662, 607, 604, 0, 591, 575, 641,
	0, 0, 0, 0, 625, 621, 580, 0, 586, 587,
	411, 301, 29, 0, 174, 175, 178, 0, 180, 195,
	187, 0, 190, 191, 188, 0, 31, 32, 41, 47,
	33, 39, 0, 0, 0, 0, 0, 286, 287, 0,
	193, 0, 229, 706, 0, 229, 0, 0, 0, 161,
	193, 0, 595, 597, 0, 360, 0, 377, 362, 0,
	366, 393, 390, -2, -2, 509, 627, 620, 0, 328,
	0, 593, -2, 0, 0, 0, 623, 0, 172, 0,
	199, 0, 0, 0, 49, 0, 236, 238, 0, 273,
	388, 276, 182, 221, 222, 225, 223, 226, 328, 193,
	216, 0, 0, 0, 0, 364, 558, 610, 0, -2,
	0, 541, 585, 179, 204, 0, 0, 0, 195, 35,
	0, 46, 0, 275, 229, 0, 183, 0, 598, 599,
	376, 0, 0, 0, 606, 542, 181, 200, 201, 0,
	196, 197, 198, 194, 192, 199, 48, 388, 224, 556,
	193, 603, 608, 611, -2, 824, 752, 0, 609, 202,
	0, 203, 0, 0, 0, 204, 272, 217, 0, 613,
	614, 615, 616, 617, 205, 0, 208, 209, 0, 206,
	189, 0, 207, 210, 211, 612,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 260, 3, 266, 261, 3,
	271, 272, 264, 262, 275, 263, 273, 265, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 277, 274,
	254, 256, 255, 3, 276, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 269, 3, 270, 259, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 258, 3, 268,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 257, 267,
}
var sqlTok3 = [...]int{
	0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:632
		{
			sqllex.(*scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:638
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:644
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 14:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:664
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 21:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:674
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 22:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:680
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.qname(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 23:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:684
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.qname(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 24:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:690
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 25:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:694
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:701
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 27:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:706
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 28:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:711
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 29:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:716
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 30:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:720
		{
			unimplemented()
		}
	case 31:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:722
		{
			unimplemented()
		}
	case 32:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:724
		{
			unimplemented()
		}
	case 33:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:727
		{
			sqlVAL.union.val = &AlterTableDropColumn{columnKeyword: sqlDollar[2].union.bool(), IfExists: true, Column: sqlDollar[5].str}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:732
		{
			sqlVAL.union.val = &AlterTableDropColumn{columnKeyword: sqlDollar[2].union.bool(), IfExists: false, Column: sqlDollar[3].str}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:737
		{
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:740
		{
			sqlVAL.union.val = &AlterTableAddConstraint{ConstraintDef: sqlDollar[2].union.constraintDef()}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:744
		{
			unimplemented()
		}
	case 38:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:746
		{
			unimplemented()
		}
	case 39:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:749
		{
			sqlVAL.union.val = &AlterTableDropConstraint{IfExists: true, Constraint: sqlDollar[5].str}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:754
		{
			sqlVAL.union.val = &AlterTableDropConstraint{IfExists: false, Constraint: sqlDollar[3].str}
		}
	case 41:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:759
		{
			unimplemented()
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:760
		{
			unimplemented()
		}
	case 43:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:763
		{
			unimplemented()
		}
	case 44:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:764
		{
			unimplemented()
		}
	case 45:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:765
		{
		}
	case 46:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:768
		{
			unimplemented()
		}
	case 47:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:769
		{
		}
	case 48:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:772
		{
			unimplemented()
		}
	case 49:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:773
		{
		}
	case 53:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:784
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retExprs()}
		}
	case 54:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:791
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 55:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:795
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 56:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:799
		{
			sqlVAL.union.val = &DropIndex{Names: sqlDollar[3].union.qnames(), IfExists: false}
		}
	case 57:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:803
		{
			sqlVAL.union.val = &DropIndex{Names: sqlDollar[5].union.qnames(), IfExists: true}
		}
	case 58:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:807
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.qnames(), IfExists: false}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:811
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.qnames(), IfExists: true}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:817
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:821
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 62:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:827
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:831
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:837
		{
			sqlVAL.union.val = Indirection{NameIndirection(sqlDollar[2].str)}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:841
		{
			sqlVAL.union.val = append(sqlDollar[1].union.indirect(), NameIndirection(sqlDollar[3].str))
		}
	case 66:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:848
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:852
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:858
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 72:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:867
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 73:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:871
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 75:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:881
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: NameList(sqlDollar[6].union.strs()), Targets: sqlDollar[4].union.targetList()}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:888
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: NameList(sqlDollar[6].union.strs()), Targets: sqlDollar[4].union.targetList()}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:895
		{
			sqlVAL.union.val = TargetList{Tables: QualifiedNames(sqlDollar[1].union.qnames())}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:899
		{
			sqlVAL.union.val = TargetList{Tables: QualifiedNames(sqlDollar[2].union.qnames())}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:903
		{
			sqlVAL.union.val = TargetList{Databases: NameList(sqlDollar[2].union.strs())}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:910
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:913
		{
		}
	case 82:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:917
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:921
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 84:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:928
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 85:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:932
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 86:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:936
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 87:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:940
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 88:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:944
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 89:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:948
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 90:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:952
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 91:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:960
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:964
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 93:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:972
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 94:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:976
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 95:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:980
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:984
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 97:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:990
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 99:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:997
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1001
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1005
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1009
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1016
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1022
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname(), Values: sqlDollar[3].union.exprs()}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1026
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname(), Values: sqlDollar[3].union.exprs()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1030
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname()}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1034
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname()}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1041
		{
			unimplemented()
		}
	case 110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1044
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1047
		{
			unimplemented()
		}
	case 113:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1054
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1058
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1066
		{
			sqlVAL.union.val = ValArg{name: sqlDollar[1].str}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1072
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1076
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1080
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1084
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1088
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1094
		{
			sqlVAL.union.val = Low
		}
	case 124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1098
		{
			sqlVAL.union.val = Normal
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1102
		{
			sqlVAL.union.val = High
		}
	case 126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1108
		{
			sqlVAL.union.val = DBool(true)
		}
	case 127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1112
		{
			sqlVAL.union.val = DBool(false)
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1116
		{
			sqlVAL.union.val = DString(sqlDollar[1].str)
		}
	case 130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1131
		{
			sqlVAL.union.val = DString(sqlDollar[1].str)
		}
	case 131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1135
		{
			sqlVAL.union.val = DString(sqlDollar[1].str)
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1139
		{
			expr := &CastExpr{Expr: DString(sqlDollar[2].str), Type: sqlDollar[1].union.colType()}
			var ctx EvalContext
			d, err := expr.Eval(ctx)
			if err != nil {
				sqllex.Error("cannot evaluate to an interval type")
				return 1
			}
			if _, ok := d.(DInterval); !ok {
				panic("not an interval type")
			}
			sqlVAL.union.val = d
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1154
		{
			sqlVAL.union.val = DString(sqlDollar[1].str)
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1158
		{
			sqlVAL.union.val = DString(sqlDollar[1].str)
		}
	case 136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1163
		{
			unimplemented()
		}
	case 137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1164
		{
			unimplemented()
		}
	case 138:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1165
		{
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1169
		{
			sqlVAL.union.val = DString(sqlDollar[1].str)
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1173
		{
			sqlVAL.union.val = DString(sqlDollar[1].str)
		}
	case 141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1179
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1183
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1187
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.qname()}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1191
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1195
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.strs()}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1199
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1203
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1207
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1211
		{
			sqlVAL.union.val = &ShowTables{Name: sqlDollar[3].union.qname()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1215
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1219
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1223
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1227
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1233
		{
			sqlVAL.union.val = sqlDollar[2].union.qname()
		}
	case 155:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1237
		{
			sqlVAL.union.val = (*QualifiedName)(nil)
		}
	case 156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1243
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 157:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1248
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1254
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 159:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1258
		{
			sqlVAL.union.val = []string(nil)
		}
	case 160:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1265
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.qname(), IfNotExists: false, Defs: sqlDollar[5].union.tblDefs()}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1269
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.qname(), IfNotExists: true, Defs: sqlDollar[8].union.tblDefs()}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1276
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1282
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1286
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1292
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1297
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1303
		{
			sqlVAL.union.val = newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
		}
	case 170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1309
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 171:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1313
		{
			sqlVAL.union.val = []ColumnQualification(nil)
		}
	case 172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1319
		{
			sqlVAL.union.val = sqlDollar[3].union.colQual()
		}
	case 174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1323
		{
			unimplemented()
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1339
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1343
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1347
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1351
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1354
		{
			unimplemented()
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1356
		{
			if ContainsVars(sqlDollar[2].union.expr()) {
				sqllex.Error("default expression contains a variable")
				return 1
			}
			if containsSubquery(sqlDollar[2].union.expr()) {
				sqllex.Error("default expression contains a subquery")
				return 1
			}
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1367
		{
			unimplemented()
		}
	case 182:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1371
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.idxElems(),
				Storing: sqlDollar[6].union.strs(),
			}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1379
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:    Name(sqlDollar[3].str),
					Columns: sqlDollar[5].union.idxElems(),
					Storing: sqlDollar[7].union.strs(),
				},
			}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1394
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1399
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 186:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1404
		{
			unimplemented()
		}
	case 187:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1406
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[3].union.strs()),
					Storing: sqlDollar[5].union.strs(),
				},
			}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1415
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[4].union.strs()),
				},
				PrimaryKey: true,
			}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1424
		{
			unimplemented()
		}
	case 192:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1441
		{
			sqlVAL.union.val = sqlDollar[3].union.strs()
		}
	case 193:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1445
		{
			sqlVAL.union.val = []string(nil)
		}
	case 194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1451
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 195:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1455
		{
			sqlVAL.union.val = []string(nil)
		}
	case 196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1460
		{
			unimplemented()
		}
	case 197:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1461
		{
			unimplemented()
		}
	case 198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1462
		{
			unimplemented()
		}
	case 199:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1463
		{
		}
	case 200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1470
		{
			unimplemented()
		}
	case 201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1471
		{
			unimplemented()
		}
	case 202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1472
		{
			unimplemented()
		}
	case 203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1473
		{
			unimplemented()
		}
	case 204:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1474
		{
		}
	case 205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1477
		{
			unimplemented()
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1480
		{
			unimplemented()
		}
	case 207:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1483
		{
			unimplemented()
		}
	case 208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1484
		{
			unimplemented()
		}
	case 209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1485
		{
			unimplemented()
		}
	case 210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1486
		{
			unimplemented()
		}
	case 211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1487
		{
			unimplemented()
		}
	case 212:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1491
		{
			sqlVAL.union.val = NumVal(sqlDollar[1].str)
		}
	case 213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1495
		{
			sqlVAL.union.val = NumVal("-" + sqlDollar[2].str)
		}
	case 214:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1499
		{
			sqlVAL.union.val = DInt(sqlDollar[1].union.ival().Val)
		}
	case 215:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1506
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.qnames()}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1513
		{
			sqlVAL.union.val = &CreateIndex{
				Name:    Name(sqlDollar[4].str),
				Table:   sqlDollar[6].union.qname(),
				Unique:  sqlDollar[2].union.bool(),
				Columns: sqlDollar[8].union.idxElems(),
				Storing: sqlDollar[10].union.strs(),
			}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql.y:1523
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.qname(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.strs(),
			}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1536
		{
			sqlVAL.union.val = true
		}
	case 219:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1540
		{
			sqlVAL.union.val = false
		}
	case 220:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1546
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1550
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1559
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1562
		{
			unimplemented()
		}
	case 224:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1563
		{
			unimplemented()
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1566
		{
			unimplemented()
		}
	case 226:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1567
		{
		}
	case 227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1571
		{
			sqlVAL.union.val = Ascending
		}
	case 228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1575
		{
			sqlVAL.union.val = Descending
		}
	case 229:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1579
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 230:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1586
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 231:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1590
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.qname(), NewName: sqlDollar[6].union.qname(), IfExists: false}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1594
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.qname(), NewName: sqlDollar[8].union.qname(), IfExists: true}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1598
		{
			sqlVAL.union.val = &RenameIndex{Name: sqlDollar[3].union.qname(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1602
		{
			sqlVAL.union.val = &RenameIndex{Name: sqlDollar[5].union.qname(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1606
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.qname(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1610
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.qname(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1614
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 238:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1618
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 239:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1624
		{
			sqlVAL.union.val = true
		}
	case 240:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1628
		{
			sqlVAL.union.val = false
		}
	case 241:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1633
		{
		}
	case 242:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1634
		{
		}
	case 243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1638
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 244:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1644
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1651
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1655
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 247:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1659
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1663
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1667
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1676
		{
		}
	case 251:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1677
		{
		}
	case 252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1681
		{
			sqlVAL.str = ""
		}
	case 253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1685
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1689
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 255:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1693
		{
			sqlVAL.str = ""
		}
	case 256:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1699
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 257:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1703
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 258:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1709
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1713
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 260:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1717
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 261:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1721
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1725
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1731
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1737
		{
			sqlVAL.union.val = &CreateDatabase{Name: Name(sqlDollar[3].str)}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1741
		{
			sqlVAL.union.val = &CreateDatabase{IfNotExists: true, Name: Name(sqlDollar[6].str)}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1747
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.qname()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retExprs()
		}
	case 269:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1764
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1768
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.qnames(), Rows: sqlDollar[4].union.slct()}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1772
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1779
		{
			unimplemented()
		}
	case 273:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1780
		{
			unimplemented()
		}
	case 274:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1781
		{
		}
	case 275:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1784
		{
			unimplemented()
		}
	case 276:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1785
		{
			unimplemented()
		}
	case 277:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1786
		{
		}
	case 278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1790
		{
			sqlVAL.union.val = sqlDollar[2].union.selExprs()
		}
	case 279:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1794
		{
			sqlVAL.union.val = SelectExprs(nil)
		}
	case 280:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1801
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retExprs()}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1807
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1811
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1821
		{
			sqlVAL.union.val = &UpdateExpr{Names: QualifiedNames{sqlDollar[1].union.qname()}, Expr: sqlDollar[3].union.expr()}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1833
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.qnames(), Expr: &Tuple{sqlDollar[5].union.exprs()}}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1837
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.qnames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1881
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1887
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1891
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1906
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1910
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1914
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1918
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1922
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1926
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1960
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.tblExprs(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1972
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.tblExprs(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1984
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        TableExprs{&AliasedTableExpr{Expr: sqlDollar[2].union.qname()}},
				tableSelect: true,
			}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1992
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2001
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2010
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2028
		{
			unimplemented()
		}
	case 308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2029
		{
			unimplemented()
		}
	case 309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2030
		{
			unimplemented()
		}
	case 310:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2033
		{
			unimplemented()
		}
	case 311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2034
		{
			unimplemented()
		}
	case 312:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2037
		{
			unimplemented()
		}
	case 313:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2041
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 317:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2049
		{
			unimplemented()
		}
	case 318:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2050
		{
		}
	case 319:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2053
		{
		}
	case 320:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2054
		{
		}
	case 321:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2058
		{
			sqlVAL.union.val = true
		}
	case 322:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2062
		{
			sqlVAL.union.val = false
		}
	case 323:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2066
		{
			sqlVAL.union.val = false
		}
	case 324:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2072
		{
			sqlVAL.union.val = true
		}
	case 325:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2077
		{
		}
	case 326:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2078
		{
		}
	case 327:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2082
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 328:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2086
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 329:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2092
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 330:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2098
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2102
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 332:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2108
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2116
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2125
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2136
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2149
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2156
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2163
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 342:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2177
		{
		}
	case 343:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2178
		{
		}
	case 344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2204
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 345:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2208
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 346:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2214
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 347:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2218
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 348:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2224
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{sqlDollar[2].union.exprs()}}}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2228
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2240
		{
			sqlVAL.union.val = sqlDollar[2].union.tblExprs()
		}
	case 351:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2244
		{
			sqlVAL.union.val = TableExprs(nil)
		}
	case 352:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2250
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2254
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 354:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2261
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: sqlDollar[2].union.aliasClause()}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2265
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, As: sqlDollar[2].union.aliasClause()}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2269
		{
			unimplemented()
		}
	case 358:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2287
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 359:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2291
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 360:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2295
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 361:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2299
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2303
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astNaturalJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr()}
		}
	case 363:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2307
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astNaturalJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2313
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: NameList(sqlDollar[4].union.strs())}
		}
	case 365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2317
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2321
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: NameList(sqlDollar[3].union.strs())}
		}
	case 367:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2325
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 369:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2332
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2338
		{
			sqlVAL.str = astFullJoin
		}
	case 371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2342
		{
			sqlVAL.str = astLeftJoin
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2346
		{
			sqlVAL.str = astRightJoin
		}
	case 373:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2350
		{
			sqlVAL.str = astInnerJoin
		}
	case 374:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2356
		{
		}
	case 375:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2357
		{
		}
	case 376:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2368
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: NameList(sqlDollar[3].union.strs())}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2372
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 378:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2378
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2382
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 380:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2386
		{
			sqlVAL.union.val = sqlDollar[2].union.qname()
		}
	case 381:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2390
		{
			sqlVAL.union.val = sqlDollar[3].union.qname()
		}
	case 382:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2396
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2400
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 384:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2413
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname()}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2417
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2421
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2427
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 388:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2431
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 389:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2443
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 390:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2447
		{
			unimplemented()
		}
	case 391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2448
		{
			unimplemented()
		}
	case 392:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2451
		{
			unimplemented()
		}
	case 393:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2452
		{
			unimplemented()
		}
	case 394:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2453
		{
		}
	case 400:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2461
		{
			unimplemented()
		}
	case 401:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2463
		{
			sqlVAL.union.val = &BytesType{Name: "BLOB"}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2467
		{
			sqlVAL.union.val = &BytesType{Name: "BYTES"}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2471
		{
			sqlVAL.union.val = &BytesType{Name: "BYTEA"}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2475
		{
			sqlVAL.union.val = &StringType{Name: "TEXT"}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2479
		{
			sqlVAL.union.val = &StringType{Name: "STRING"}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2500
		{
			sqlVAL.union.val = &DecimalType{Prec: int(sqlDollar[2].union.ival().Val)}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2504
		{
			sqlVAL.union.val = &DecimalType{Prec: int(sqlDollar[2].union.ival().Val), Scale: int(sqlDollar[4].union.ival().Val)}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2508
		{
			sqlVAL.union.val = &DecimalType{}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2515
		{
			sqlVAL.union.val = &IntType{Name: "INT"}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2519
		{
			sqlVAL.union.val = &IntType{Name: "INT64"}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2523
		{
			sqlVAL.union.val = &IntType{Name: "INTEGER"}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2527
		{
			sqlVAL.union.val = &IntType{Name: "SMALLINT"}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2531
		{
			sqlVAL.union.val = &IntType{Name: "BIGINT"}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2535
		{
			sqlVAL.union.val = &FloatType{Name: "REAL"}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2539
		{
			sqlVAL.union.val = &FloatType{Name: "FLOAT", Prec: int(sqlDollar[2].union.ival().Val)}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2543
		{
			sqlVAL.union.val = &FloatType{Name: "DOUBLE PRECISION"}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2547
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			sqlVAL.union.val.(*DecimalType).Name = "DECIMAL"
		}
	case 422:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2552
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			sqlVAL.union.val.(*DecimalType).Name = "DEC"
		}
	case 423:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2557
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			sqlVAL.union.val.(*DecimalType).Name = "NUMERIC"
		}
	case 424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2562
		{
			sqlVAL.union.val = &BoolType{Name: "BOOLEAN"}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2566
		{
			sqlVAL.union.val = &BoolType{Name: "BOOL"}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2572
		{
			sqlVAL.union.val = sqlDollar[2].union.ival()
		}
	case 427:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2576
		{
			sqlVAL.union.val = IntVal{}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2594
		{
			sqlVAL.union.val = &IntType{Name: "BIT", N: int(sqlDollar[4].union.ival().Val)}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2600
		{
			sqlVAL.union.val = &IntType{Name: "BIT"}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2616
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
			sqlVAL.union.val.(*StringType).N = int(sqlDollar[3].union.ival().Val)
		}
	case 439:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2623
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 440:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2629
		{
			sqlVAL.union.val = &StringType{Name: "CHAR"}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2633
		{
			sqlVAL.union.val = &StringType{Name: "CHAR"}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2637
		{
			sqlVAL.union.val = &StringType{Name: "VARCHAR"}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2642
		{
		}
	case 444:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2643
		{
		}
	case 445:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2648
		{
			sqlVAL.union.val = &DateType{}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2652
		{
			sqlVAL.union.val = &TimestampType{}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2657
		{
			sqlVAL.union.val = &IntervalType{}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2662
		{
			unimplemented()
		}
	case 449:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2663
		{
			unimplemented()
		}
	case 450:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2664
		{
			unimplemented()
		}
	case 451:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2665
		{
			unimplemented()
		}
	case 452:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2666
		{
			unimplemented()
		}
	case 453:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2667
		{
			unimplemented()
		}
	case 454:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2668
		{
			unimplemented()
		}
	case 455:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2669
		{
			unimplemented()
		}
	case 456:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2670
		{
			unimplemented()
		}
	case 457:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2671
		{
			unimplemented()
		}
	case 458:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2672
		{
			unimplemented()
		}
	case 459:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2673
		{
			unimplemented()
		}
	case 460:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2674
		{
			unimplemented()
		}
	case 461:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2675
		{
		}
	case 462:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2678
		{
			unimplemented()
		}
	case 463:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2679
		{
			unimplemented()
		}
	case 465:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2703
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2706
		{
			unimplemented()
		}
	case 467:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2707
		{
			unimplemented()
		}
	case 468:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2716
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2720
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2724
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2728
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2732
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2736
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2740
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2744
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2748
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2752
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2756
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2760
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2764
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2768
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2772
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2776
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2780
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2784
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2788
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2792
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2796
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2800
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2804
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2808
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2812
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2816
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2820
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2824
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2828
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2832
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2836
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2839
		{
			unimplemented()
		}
	case 500:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2841
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DBool(true)}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2845
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DBool(true)}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2849
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DBool(false)}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2853
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DBool(false)}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2857
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2861
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2865
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2869
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2873
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2877
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2881
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2885
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2889
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2893
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2897
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2901
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2918
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2922
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2926
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2930
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2934
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2938
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2942
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2946
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2950
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2954
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2958
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2962
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2966
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2970
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2974
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2978
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2982
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2986
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2990
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2994
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2998
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3002
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3006
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3010
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3014
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3018
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3030
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 545:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3035
		{
			sqlVAL.union.val = ValArg{name: sqlDollar[1].str}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3039
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3045
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3049
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3053
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3059
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 553:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3063
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 554:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3067
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 555:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3075
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname()}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3079
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3082
		{
			unimplemented()
		}
	case 558:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3083
		{
			unimplemented()
		}
	case 559:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3085
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Type: All, Exprs: sqlDollar[4].union.exprs()}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3089
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Type: Distinct, Exprs: sqlDollar[4].union.exprs()}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3093
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Exprs: Exprs{StarExpr()}}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3106
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 563:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3110
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 564:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3119
		{
			unimplemented()
		}
	case 565:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3120
		{
			unimplemented()
		}
	case 566:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3124
		{
			unimplemented()
		}
	case 567:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3126
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3130
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3134
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3138
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3141
		{
			unimplemented()
		}
	case 572:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3142
		{
			unimplemented()
		}
	case 573:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3143
		{
			unimplemented()
		}
	case 574:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3144
		{
			unimplemented()
		}
	case 575:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3146
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3150
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3154
		{
			sqlVAL.union.val = &OverlayExpr{FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3158
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "STRPOS"}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3162
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3165
		{
			unimplemented()
		}
	case 581:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3167
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3171
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "LTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3175
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "RTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3179
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3183
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3187
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3191
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3195
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3199
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3203
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3209
		{
			unimplemented()
		}
	case 592:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3210
		{
		}
	case 593:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3213
		{
			unimplemented()
		}
	case 594:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3214
		{
		}
	case 595:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3218
		{
			unimplemented()
		}
	case 596:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3219
		{
		}
	case 597:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3222
		{
			unimplemented()
		}
	case 598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3223
		{
			unimplemented()
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3226
		{
			unimplemented()
		}
	case 600:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3229
		{
			unimplemented()
		}
	case 601:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3230
		{
			unimplemented()
		}
	case 602:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3231
		{
		}
	case 603:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3235
		{
			unimplemented()
		}
	case 604:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3246
		{
			unimplemented()
		}
	case 605:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3247
		{
		}
	case 606:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3250
		{
			unimplemented()
		}
	case 607:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3251
		{
		}
	case 608:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3259
		{
			unimplemented()
		}
	case 609:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3260
		{
			unimplemented()
		}
	case 610:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3261
		{
		}
	case 611:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3264
		{
			unimplemented()
		}
	case 612:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3265
		{
			unimplemented()
		}
	case 613:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3271
		{
			unimplemented()
		}
	case 614:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3272
		{
			unimplemented()
		}
	case 615:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3273
		{
			unimplemented()
		}
	case 616:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3274
		{
			unimplemented()
		}
	case 617:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3275
		{
			unimplemented()
		}
	case 618:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3286
		{
			sqlVAL.union.val = &Row{sqlDollar[3].union.exprs()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3290
		{
			sqlVAL.union.val = &Row{nil}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3294
		{
			sqlVAL.union.val = &Tuple{append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3300
		{
			sqlVAL.union.val = &Row{sqlDollar[3].union.exprs()}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3304
		{
			sqlVAL.union.val = &Row{nil}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3310
		{
			sqlVAL.union.val = &Tuple{append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3351
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3355
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 626:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3361
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3365
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 628:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3371
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3375
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3379
		{
			sqlVAL.union.val = &Array{nil}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3385
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3389
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3395
		{
			sqlVAL.union.val = Exprs{DString(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3417
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3421
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3427
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3434
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3438
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3455
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3459
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3463
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3467
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), DInt(1), sqlDollar[2].union.expr()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3471
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 651:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3475
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 652:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3481
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 653:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3487
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 654:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3493
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 655:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3497
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 656:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3501
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 657:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3507
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3511
		{
			sqlVAL.union.val = &Tuple{sqlDollar[2].union.exprs()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3522
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3529
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3533
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 662:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3539
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3545
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 664:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3549
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 666:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3556
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 667:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3562
		{
			sqlVAL.union.val = sqlDollar[1].union.indirectElem()
		}
	case 668:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3566
		{
			sqlVAL.union.val = sqlDollar[1].union.indirectElem()
		}
	case 669:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3570
		{
			sqlVAL.union.val = IndexIndirection(sqlDollar[2].str)
		}
	case 670:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3574
		{
			sqlVAL.union.val = &ArrayIndirection{Begin: sqlDollar[2].union.expr()}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3578
		{
			sqlVAL.union.val = &ArrayIndirection{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr()}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3584
		{
			sqlVAL.union.val = NameIndirection(sqlDollar[2].str)
		}
	case 673:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3590
		{
			sqlVAL.union.val = qualifiedStar
		}
	case 674:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3596
		{
			sqlVAL.union.val = Indirection{sqlDollar[1].union.indirectElem()}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3600
		{
			sqlVAL.union.val = append(sqlDollar[1].union.indirect(), sqlDollar[2].union.indirectElem())
		}
	case 676:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3605
		{
		}
	case 677:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3606
		{
		}
	case 679:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3615
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3621
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3625
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3634
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 684:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3642
		{
			sqlVAL.union.val = SelectExprs(nil)
		}
	case 685:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3648
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3652
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 687:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3658
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3667
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3671
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3675
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 691:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3683
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3687
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 693:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3693
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3697
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 695:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3708
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3712
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3723
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3727
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: Indirection{sqlDollar[2].union.indirectElem()}}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3731
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: Indirection{sqlDollar[2].union.indirectElem()}}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3735
		{
			sqlVAL.union.val = &QualifiedName{Indirect: Indirection{unqualifiedStar}}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3741
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3745
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 703:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3751
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 704:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3754
		{
		}
	case 705:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3764
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3768
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3775
		{
			sqlVAL.union.val = &IntVal{Val: sqlDollar[1].union.ival().Val, Str: sqlDollar[1].union.ival().Str}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3779
		{
			sqlVAL.union.val = NumVal(sqlDollar[1].str)
		}
	case 709:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3783
		{
			sqlVAL.union.val = DString(sqlDollar[1].str)
		}
	case 710:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3787
		{
			sqlVAL.union.val = DBytes(sqlDollar[1].str)
		}
	case 711:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3790
		{
			unimplemented()
		}
	case 712:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3792
		{
			sqlVAL.union.val = &CastExpr{Expr: DString(sqlDollar[2].str), Type: sqlDollar[1].union.colType()}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3796
		{
			sqlVAL.union.val = &CastExpr{Expr: DString(sqlDollar[2].str), Type: sqlDollar[1].union.colType()}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3800
		{
			sqlVAL.union.val = &CastExpr{Expr: DString(sqlDollar[5].str), Type: sqlDollar[1].union.colType()}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3804
		{
			sqlVAL.union.val = DBool(true)
		}
	case 716:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3808
		{
			sqlVAL.union.val = DBool(false)
		}
	case 717:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3812
		{
			sqlVAL.union.val = DNull
		}
	case 719:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3819
		{
			sqlVAL.union.val = sqlDollar[2].union.ival()
		}
	case 720:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3823
		{
			sqlVAL.union.val = IntVal{Val: -sqlDollar[2].union.ival().Val, Str: "-" + sqlDollar[2].union.ival().Str}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3845
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
