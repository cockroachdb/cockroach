// Code generated by go yacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"go/constant"
	"go/token"

	"github.com/pkg/errors"

	"github.com/cockroachdb/cockroach/sql/privilege"
	"github.com/cockroachdb/cockroach/util"
)

var errUnimplemented = errors.New("unimplemented")

func unimplemented() {
	panic(errUnimplemented)
}

func unimplementedWithIssue(issue int) {
	panic(util.UnimplementedWithIssueErrorf(issue, ""))
}

//line sql.y:44

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new sytax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in two forms, depending on the
// type of the value being accessed. Values and pointers are directly
// type asserted from the empty interface, meaning that they will panic
// if the type assertion is incorrect. Interfaces are handled differently
// because a nil instance of an interface inserted into the empty interface
// becomes a nil instance of the empty interface and therefore will fail a
// direct type assertion. Instead, a guarded type assertion must be used,
// which returns nil if the type assertion fails.
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	return u.val.(*StrVal)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	if namePart, ok := u.val.(NamePart); ok {
		return namePart
	}
	return nil
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionName() FunctionName {
	return u.val.(FunctionName)
}
func (u *sqlSymUnion) normalizableFunctionName() NormalizableFunctionName {
	return NormalizableFunctionName{u.val.(FunctionName)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	if selectStmt, ok := u.val.(*Select); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	if selectStmt, ok := u.val.(SelectStatement); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	if constraintDef, ok := u.val.(ConstraintTableDef); ok {
		return constraintDef
	}
	return nil
}
func (u *sqlSymUnion) tblDef() TableDef {
	if tblDef, ok := u.val.(TableDef); ok {
		return tblDef
	}
	return nil
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	if colQual, ok := u.val.(NamedColumnQualification); ok {
		return colQual
	}
	return NamedColumnQualification{}
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	if colQual, ok := u.val.(ColumnQualification); ok {
		return colQual
	}
	return nil
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retExprs() ReturningExprs {
	return ReturningExprs(u.val.(SelectExprs))
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	if tblExpr, ok := u.val.(TableExpr); ok {
		return tblExpr
	}
	return nil
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	if joinCond, ok := u.val.(JoinCond); ok {
		return joinCond
	}
	return nil
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	if alterTableCmd, ok := u.val.(AlterTableCmd); ok {
		return alterTableCmd
	}
	return nil
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}

//line sql.y:309
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const DOT_DOT = 57353
const LESS_EQUALS = 57354
const GREATER_EQUALS = 57355
const NOT_EQUALS = 57356
const NOT_REGMATCH = 57357
const REGIMATCH = 57358
const NOT_REGIMATCH = 57359
const ERROR = 57360
const ACTION = 57361
const ADD = 57362
const ALL = 57363
const ALTER = 57364
const ANALYSE = 57365
const ANALYZE = 57366
const AND = 57367
const ANY = 57368
const ANNOTATE_TYPE = 57369
const ARRAY = 57370
const AS = 57371
const ASC = 57372
const ASYMMETRIC = 57373
const AT = 57374
const BEGIN = 57375
const BETWEEN = 57376
const BIGINT = 57377
const BIGSERIAL = 57378
const BIT = 57379
const BLOB = 57380
const BOOL = 57381
const BOOLEAN = 57382
const BOTH = 57383
const BY = 57384
const BYTEA = 57385
const BYTES = 57386
const CASCADE = 57387
const CASE = 57388
const CAST = 57389
const CHAR = 57390
const CHARACTER = 57391
const CHARACTERISTICS = 57392
const CHECK = 57393
const COALESCE = 57394
const COLLATE = 57395
const COLLATION = 57396
const COLUMN = 57397
const COLUMNS = 57398
const COMMIT = 57399
const COMMITTED = 57400
const CONCAT = 57401
const CONFLICT = 57402
const CONSTRAINT = 57403
const CONSTRAINTS = 57404
const COPY = 57405
const COVERING = 57406
const CREATE = 57407
const CROSS = 57408
const CUBE = 57409
const CURRENT = 57410
const CURRENT_CATALOG = 57411
const CURRENT_DATE = 57412
const CURRENT_ROLE = 57413
const CURRENT_TIME = 57414
const CURRENT_TIMESTAMP = 57415
const CURRENT_USER = 57416
const CYCLE = 57417
const DATA = 57418
const DATABASE = 57419
const DATABASES = 57420
const DATE = 57421
const DAY = 57422
const DEC = 57423
const DECIMAL = 57424
const DEFAULT = 57425
const DEALLOCATE = 57426
const DEFERRABLE = 57427
const DELETE = 57428
const DESC = 57429
const DISTINCT = 57430
const DO = 57431
const DOUBLE = 57432
const DROP = 57433
const ELSE = 57434
const ENCODING = 57435
const END = 57436
const ESCAPE = 57437
const EXCEPT = 57438
const EXISTS = 57439
const EXECUTE = 57440
const EXPLAIN = 57441
const EXTRACT = 57442
const FALSE = 57443
const FAMILY = 57444
const FETCH = 57445
const FILTER = 57446
const FIRST = 57447
const FLOAT = 57448
const FLOORDIV = 57449
const FOLLOWING = 57450
const FOR = 57451
const FORCE_INDEX = 57452
const FOREIGN = 57453
const FROM = 57454
const FULL = 57455
const GRANT = 57456
const GRANTS = 57457
const GREATEST = 57458
const GROUP = 57459
const GROUPING = 57460
const HAVING = 57461
const HIGH = 57462
const HOUR = 57463
const IF = 57464
const IFNULL = 57465
const ILIKE = 57466
const IN = 57467
const INTERLEAVE = 57468
const INDEX = 57469
const INDEXES = 57470
const INITIALLY = 57471
const INNER = 57472
const INSERT = 57473
const INT = 57474
const INT64 = 57475
const INTEGER = 57476
const INTERSECT = 57477
const INTERVAL = 57478
const INTO = 57479
const IS = 57480
const ISOLATION = 57481
const JOIN = 57482
const KEY = 57483
const KEYS = 57484
const LATERAL = 57485
const LEADING = 57486
const LEAST = 57487
const LEFT = 57488
const LEVEL = 57489
const LIKE = 57490
const LIMIT = 57491
const LOCAL = 57492
const LOCALTIME = 57493
const LOCALTIMESTAMP = 57494
const LOW = 57495
const LSHIFT = 57496
const MATCH = 57497
const MINUTE = 57498
const MONTH = 57499
const NAME = 57500
const NAMES = 57501
const NATURAL = 57502
const NEXT = 57503
const NO = 57504
const NO_INDEX_JOIN = 57505
const NORMAL = 57506
const NOT = 57507
const NOTHING = 57508
const NULL = 57509
const NULLIF = 57510
const NULLS = 57511
const NUMERIC = 57512
const OF = 57513
const OFF = 57514
const OFFSET = 57515
const ON = 57516
const ONLY = 57517
const OR = 57518
const ORDER = 57519
const ORDINALITY = 57520
const OUT = 57521
const OUTER = 57522
const OVER = 57523
const OVERLAPS = 57524
const OVERLAY = 57525
const PARENT = 57526
const PARTIAL = 57527
const PARTITION = 57528
const PLACING = 57529
const POSITION = 57530
const PRECEDING = 57531
const PRECISION = 57532
const PREPARE = 57533
const PRIMARY = 57534
const PRIORITY = 57535
const RANGE = 57536
const READ = 57537
const REAL = 57538
const RECURSIVE = 57539
const REF = 57540
const REFERENCES = 57541
const RENAME = 57542
const REPEATABLE = 57543
const RELEASE = 57544
const RESTRICT = 57545
const RETURNING = 57546
const REVOKE = 57547
const RIGHT = 57548
const ROLLBACK = 57549
const ROLLUP = 57550
const ROW = 57551
const ROWS = 57552
const RSHIFT = 57553
const SAVEPOINT = 57554
const SEARCH = 57555
const SECOND = 57556
const SELECT = 57557
const SERIAL = 57558
const SERIALIZABLE = 57559
const SESSION = 57560
const SESSION_USER = 57561
const SET = 57562
const SHOW = 57563
const SIMILAR = 57564
const SIMPLE = 57565
const SMALLINT = 57566
const SMALLSERIAL = 57567
const SNAPSHOT = 57568
const SOME = 57569
const SQL = 57570
const START = 57571
const STDIN = 57572
const STRICT = 57573
const STRING = 57574
const STORING = 57575
const SUBSTRING = 57576
const SYMMETRIC = 57577
const SYSTEM = 57578
const TABLE = 57579
const TABLES = 57580
const TEXT = 57581
const THEN = 57582
const TIME = 57583
const TIMESTAMP = 57584
const TIMESTAMPTZ = 57585
const TO = 57586
const TRAILING = 57587
const TRANSACTION = 57588
const TREAT = 57589
const TRIM = 57590
const TRUE = 57591
const TRUNCATE = 57592
const TYPE = 57593
const UNBOUNDED = 57594
const UNCOMMITTED = 57595
const UNION = 57596
const UNIQUE = 57597
const UNKNOWN = 57598
const UPDATE = 57599
const UPSERT = 57600
const USER = 57601
const USING = 57602
const VALID = 57603
const VALIDATE = 57604
const VALUE = 57605
const VALUES = 57606
const VARCHAR = 57607
const VARIADIC = 57608
const VARYING = 57609
const WHEN = 57610
const WHERE = 57611
const WINDOW = 57612
const WITH = 57613
const WITHIN = 57614
const WITHOUT = 57615
const YEAR = 57616
const ZONE = 57617
const NOT_LA = 57618
const WITH_LA = 57619
const AS_LA = 57620
const POSTFIXOP = 57621
const UMINUS = 57622

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPLAIN",
	"EXTRACT",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HOUR",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SQL",
	"START",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:4705

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 25,
	299, 25,
	-2, 360,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 41,
	1, 335,
	174, 335,
	204, 335,
	297, 335,
	299, 335,
	-2, 345,
	-1, 54,
	1, 338,
	174, 338,
	204, 338,
	297, 338,
	299, 338,
	-2, 344,
	-1, 63,
	1, 25,
	299, 25,
	-2, 360,
	-1, 278,
	1, 166,
	299, 166,
	-2, 855,
	-1, 311,
	149, 370,
	173, 370,
	-2, 341,
	-1, 314,
	149, 369,
	173, 369,
	-2, 339,
	-1, 443,
	149, 369,
	173, 369,
	-2, 342,
	-1, 499,
	296, 794,
	-2, 787,
	-1, 500,
	296, 795,
	-2, 788,
	-1, 506,
	5, 504,
	296, 504,
	-2, 943,
	-1, 529,
	5, 470,
	-2, 919,
	-1, 530,
	5, 498,
	296, 498,
	-2, 921,
	-1, 531,
	5, 478,
	-2, 922,
	-1, 532,
	5, 477,
	-2, 923,
	-1, 533,
	5, 498,
	296, 498,
	-2, 926,
	-1, 534,
	5, 498,
	296, 498,
	-2, 927,
	-1, 535,
	5, 499,
	-2, 930,
	-1, 536,
	5, 465,
	-2, 931,
	-1, 537,
	5, 465,
	-2, 932,
	-1, 538,
	5, 480,
	-2, 935,
	-1, 539,
	5, 466,
	-2, 940,
	-1, 540,
	5, 467,
	-2, 941,
	-1, 541,
	5, 468,
	-2, 942,
	-1, 542,
	5, 465,
	-2, 946,
	-1, 543,
	5, 471,
	-2, 951,
	-1, 544,
	5, 469,
	-2, 954,
	-1, 545,
	5, 496,
	296, 496,
	-2, 956,
	-1, 546,
	5, 500,
	-2, 959,
	-1, 547,
	5, 502,
	-2, 960,
	-1, 548,
	5, 495,
	296, 495,
	-2, 964,
	-1, 869,
	96, 345,
	135, 345,
	149, 345,
	173, 345,
	177, 345,
	254, 345,
	-2, 614,
	-1, 877,
	296, 772,
	-2, 761,
	-1, 1069,
	12, 0,
	13, 0,
	14, 0,
	279, 0,
	280, 0,
	281, 0,
	-2, 538,
	-1, 1070,
	12, 0,
	13, 0,
	14, 0,
	279, 0,
	280, 0,
	281, 0,
	-2, 539,
	-1, 1071,
	12, 0,
	13, 0,
	14, 0,
	279, 0,
	280, 0,
	281, 0,
	-2, 540,
	-1, 1075,
	12, 0,
	13, 0,
	14, 0,
	279, 0,
	280, 0,
	281, 0,
	-2, 544,
	-1, 1076,
	12, 0,
	13, 0,
	14, 0,
	279, 0,
	280, 0,
	281, 0,
	-2, 545,
	-1, 1077,
	12, 0,
	13, 0,
	14, 0,
	279, 0,
	280, 0,
	281, 0,
	-2, 546,
	-1, 1080,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	124, 0,
	125, 0,
	148, 0,
	222, 0,
	276, 0,
	-2, 551,
	-1, 1086,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	124, 0,
	125, 0,
	148, 0,
	222, 0,
	276, 0,
	-2, 553,
	-1, 1089,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	124, 0,
	125, 0,
	148, 0,
	222, 0,
	276, 0,
	-2, 558,
	-1, 1090,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	124, 0,
	125, 0,
	148, 0,
	222, 0,
	276, 0,
	-2, 559,
	-1, 1091,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	124, 0,
	125, 0,
	148, 0,
	222, 0,
	276, 0,
	-2, 560,
	-1, 1116,
	182, 685,
	-2, 688,
	-1, 1280,
	96, 345,
	135, 345,
	149, 345,
	173, 345,
	177, 345,
	254, 345,
	-2, 418,
	-1, 1284,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	124, 0,
	125, 0,
	148, 0,
	222, 0,
	276, 0,
	-2, 552,
	-1, 1285,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	124, 0,
	125, 0,
	148, 0,
	222, 0,
	276, 0,
	-2, 554,
	-1, 1290,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	124, 0,
	125, 0,
	148, 0,
	222, 0,
	276, 0,
	-2, 555,
	-1, 1308,
	182, 684,
	-2, 687,
	-1, 1467,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	124, 0,
	125, 0,
	148, 0,
	222, 0,
	276, 0,
	-2, 556,
	-1, 1472,
	138, 0,
	-2, 570,
	-1, 1480,
	182, 686,
	-2, 689,
	-1, 1513,
	12, 0,
	13, 0,
	14, 0,
	279, 0,
	280, 0,
	281, 0,
	-2, 595,
	-1, 1514,
	12, 0,
	13, 0,
	14, 0,
	279, 0,
	280, 0,
	281, 0,
	-2, 596,
	-1, 1515,
	12, 0,
	13, 0,
	14, 0,
	279, 0,
	280, 0,
	281, 0,
	-2, 597,
	-1, 1519,
	12, 0,
	13, 0,
	14, 0,
	279, 0,
	280, 0,
	281, 0,
	-2, 601,
	-1, 1520,
	12, 0,
	13, 0,
	14, 0,
	279, 0,
	280, 0,
	281, 0,
	-2, 602,
	-1, 1521,
	12, 0,
	13, 0,
	14, 0,
	279, 0,
	280, 0,
	281, 0,
	-2, 603,
	-1, 1623,
	138, 0,
	-2, 571,
	-1, 1626,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	124, 0,
	125, 0,
	148, 0,
	222, 0,
	276, 0,
	-2, 574,
	-1, 1627,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	124, 0,
	125, 0,
	148, 0,
	222, 0,
	276, 0,
	-2, 576,
	-1, 1713,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	124, 0,
	125, 0,
	148, 0,
	222, 0,
	276, 0,
	-2, 575,
	-1, 1714,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	124, 0,
	125, 0,
	148, 0,
	222, 0,
	276, 0,
	-2, 577,
	-1, 1721,
	138, 0,
	-2, 604,
	-1, 1766,
	138, 0,
	-2, 605,
	-1, 1819,
	34, 0,
	124, 0,
	148, 0,
	222, 0,
	276, 0,
	-2, 918,
}

const sqlNprod = 1058
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 24090

var sqlAct = [...]int{

	500, 1818, 676, 1798, 1772, 1842, 1434, 1799, 1817, 1666,
	1042, 960, 952, 1800, 1491, 1689, 582, 1588, 1701, 821,
	498, 1615, 1602, 1589, 497, 315, 279, 70, 1550, 872,
	348, 490, 1609, 799, 690, 70, 70, 70, 71, 336,
	70, 1277, 1025, 70, 1210, 1022, 874, 1446, 1267, 1311,
	1363, 70, 564, 40, 549, 1362, 1276, 802, 70, 70,
	689, 18, 70, 1456, 991, 70, 70, 70, 1050, 1024,
	923, 561, 1261, 932, 462, 1165, 1162, 1126, 1102, 961,
	1054, 1099, 322, 53, 24, 14, 975, 817, 984, 752,
	431, 736, 7, 1017, 472, 240, 566, 432, 347, 349,
	350, 578, 463, 904, 733, 314, 908, 367, 363, 763,
	320, 1051, 362, 9, 8, 6, 53, 4, 245, 244,
	238, 1028, 1052, 360, 823, 325, 246, 54, 445, 954,
	473, 446, 754, 447, 266, 732, 669, 55, 750, 257,
	276, 356, 323, 953, 678, 678, 53, 247, 242, 241,
	1708, 243, 1849, 1709, 450, 1046, 1834, 67, 678, 1046,
	1815, 1806, 319, 1688, 1046, 988, 1796, 1791, 1768, 981,
	1046, 981, 1762, 1752, 1221, 1046, 1688, 1742, 319, 342,
	1046, 312, 1275, 1715, 333, 304, 981, 339, 957, 1306,
	1712, 311, 334, 1046, 1307, 334, 1698, 344, 59, 1688,
	1696, 327, 1687, 1046, 1671, 1688, 989, 1046, 1670, 1648,
	1628, 1046, 994, 994, 1222, 1625, 479, 41, 981, 1562,
	61, 1476, 1046, 1265, 994, 1420, 826, 1414, 949, 1380,
	949, 1378, 1381, 994, 994, 70, 70, 70, 70, 575,
	370, 990, 987, 826, 492, 1264, 1377, 62, 828, 994,
	41, 1756, 1376, 70, 57, 994, 1308, 1305, 1047, 994,
	58, 1046, 994, 1003, 365, 828, 994, 1691, 70, 827,
	313, 70, 70, 321, 993, 842, 824, 994, 371, 56,
	41, 980, 825, 1816, 981, 1310, 827, 948, 920, 684,
	949, 919, 685, 320, 372, 1264, 1526, 1479, 1247, 992,
	921, 994, 679, 679, 70, 1249, 70, 1046, 70, 996,
	70, 1110, 1041, 1011, 458, 351, 679, 826, 457, 352,
	59, 352, 792, 833, 791, 70, 744, 743, 396, 332,
	63, 777, 416, 1813, 438, 551, 70, 444, 1805, 828,
	833, 351, 61, 430, 1441, 352, 1763, 70, 1697, 368,
	1653, 1649, 1334, 585, 70, 70, 70, 357, 70, 986,
	827, 443, 1641, 1640, 404, 334, 681, 344, 1639, 62,
	843, 405, 556, 1634, 1633, 1632, 57, 1586, 580, 1541,
	1536, 985, 58, 1535, 1334, 1534, 1482, 843, 1465, 70,
	1445, 586, 1580, 59, 1424, 1385, 70, 1251, 70, 682,
	677, 956, 1221, 1382, 555, 1370, 1361, 587, 1333, 370,
	370, 248, 1330, 795, 833, 61, 1328, 585, 70, 1316,
	70, 70, 70, 70, 70, 70, 70, 844, 437, 1315,
	70, 1248, 1179, 778, 1133, 70, 334, 1132, 435, 794,
	1334, 70, 62, 880, 844, 1107, 797, 371, 371, 1339,
	312, 457, 456, 1808, 52, 586, 321, 345, 1493, 70,
	311, 843, 70, 372, 372, 1782, 558, 459, 730, 1755,
	824, 587, 453, 454, 56, 1734, 357, 579, 742, 1732,
	32, 1339, 1723, 1705, 334, 670, 670, 1694, 33, 1685,
	1663, 1646, 671, 1618, 1596, 668, 1349, 1471, 1464, 838,
	835, 836, 837, 829, 830, 831, 832, 834, 351, 854,
	1585, 686, 352, 1442, 1579, 877, 1439, 1437, 844, 334,
	829, 830, 831, 832, 834, 1422, 854, 1396, 1349, 1584,
	320, 1395, 1108, 740, 1360, 1324, 739, 1339, 1323, 313,
	1302, 1298, 1104, 1236, 774, 1191, 550, 1190, 767, 1172,
	1131, 1045, 871, 1350, 909, 782, 912, 505, 779, 916,
	70, 783, 784, 785, 786, 787, 1191, 902, 70, 793,
	790, 1334, 70, 805, 901, 70, 70, 900, 312, 807,
	806, 312, 312, 899, 819, 1350, 898, 897, 813, 466,
	896, 814, 815, 837, 829, 830, 831, 832, 834, 895,
	854, 894, 826, 557, 59, 893, 892, 891, 890, 889,
	926, 1440, 888, 887, 878, 876, 56, 337, 461, 402,
	1348, 392, 390, 875, 828, 1230, 61, 1229, 1343, 1335,
	1336, 1337, 1338, 1340, 826, 696, 1710, 906, 907, 937,
	939, 346, 433, 410, 910, 827, 1583, 1223, 826, 913,
	1036, 914, 1384, 62, 1383, 915, 773, 1283, 426, 411,
	57, 1335, 1336, 1337, 1338, 1340, 58, 313, 1339, 885,
	313, 313, 1603, 70, 953, 70, 70, 827, 70, 248,
	917, 70, 1494, 70, 70, 56, 370, 945, 1319, 929,
	918, 1127, 905, 869, 942, 1217, 1778, 873, 1830, 1829,
	1741, 1243, 334, 309, 1570, 344, 1002, 297, 988, 970,
	365, 269, 303, 796, 302, 1349, 933, 1335, 1336, 1337,
	1338, 1340, 52, 925, 371, 1334, 718, 298, 1679, 1407,
	1678, 955, 1408, 955, 881, 70, 70, 1388, 1387, 567,
	372, 568, 1286, 826, 1235, 1234, 240, 1148, 32, 989,
	976, 1558, 1233, 1232, 1087, 998, 33, 1138, 995, 944,
	925, 943, 1703, 434, 1176, 828, 924, 53, 1175, 245,
	244, 53, 1350, 978, 977, 408, 936, 246, 585, 1058,
	429, 979, 70, 1559, 990, 987, 827, 388, 306, 231,
	968, 1740, 971, 973, 1016, 368, 70, 70, 247, 242,
	241, 959, 243, 964, 969, 972, 1606, 1101, 344, 1101,
	569, 344, 409, 1421, 1409, 553, 586, 1206, 1668, 910,
	235, 913, 1339, 576, 1780, 1802, 70, 672, 70, 65,
	907, 906, 587, 1141, 232, 1005, 1048, 999, 1000, 997,
	833, 1004, 992, 992, 1344, 1341, 1342, 1343, 1335, 1336,
	1337, 1338, 1340, 1429, 1057, 1398, 1839, 935, 1211, 1032,
	1412, 1056, 585, 307, 1127, 1554, 1793, 1555, 1219, 1829,
	236, 826, 59, 678, 1142, 567, 826, 568, 1105, 66,
	1205, 310, 1794, 1020, 1007, 854, 41, 573, 41, 1019,
	1009, 572, 1557, 828, 61, 1735, 1242, 1803, 828, 1560,
	586, 41, 986, 580, 318, 41, 1010, 407, 580, 1143,
	1140, 992, 1405, 1244, 827, 1008, 587, 854, 1021, 827,
	934, 62, 1114, 70, 70, 70, 334, 1049, 57, 70,
	1178, 854, 70, 552, 58, 1804, 502, 717, 70, 70,
	70, 70, 70, 317, 70, 70, 569, 1838, 695, 922,
	70, 1111, 1115, 239, 1118, 1556, 334, 70, 1426, 70,
	234, 233, 1215, 1106, 903, 1188, 70, 1144, 833, 1123,
	1157, 1186, 1225, 833, 1226, 70, 1169, 1170, 1171, 406,
	237, 570, 399, 401, 1399, 319, 427, 1669, 567, 64,
	568, 1180, 1211, 1427, 1686, 1201, 70, 70, 1719, 1213,
	1084, 868, 70, 1845, 1337, 1338, 1340, 1039, 1040, 1457,
	320, 1288, 370, 1100, 41, 843, 1228, 1322, 1181, 319,
	829, 830, 831, 832, 834, 1801, 854, 1139, 1837, 449,
	70, 679, 70, 407, 70, 70, 1828, 1826, 70, 812,
	428, 1601, 1053, 1034, 1097, 448, 419, 70, 397, 395,
	371, 992, 1644, 1182, 70, 1202, 70, 1095, 1216, 569,
	1253, 1450, 316, 1250, 1673, 1252, 372, 1224, 1672, 449,
	1661, 696, 844, 1729, 1390, 485, 1185, 1103, 1035, 804,
	1208, 772, 771, 798, 765, 760, 1522, 579, 1239, 1238,
	1082, 1085, 1855, 1241, 1425, 1240, 579, 1227, 1773, 1566,
	1616, 1245, 68, 448, 1246, 334, 1295, 976, 789, 320,
	249, 250, 251, 1662, 1081, 268, 745, 570, 280, 1293,
	1843, 1093, 1193, 1092, 1192, 1612, 268, 1098, 53, 1258,
	978, 977, 1259, 326, 326, 1645, 1281, 68, 979, 255,
	68, 341, 68, 1452, 1309, 835, 836, 837, 829, 830,
	831, 832, 834, 1617, 854, 831, 832, 834, 320, 854,
	775, 1844, 718, 1523, 1289, 1254, 1287, 1282, 565, 1524,
	1569, 1451, 406, 321, 355, 696, 1854, 1568, 1846, 354,
	1301, 1565, 317, 258, 1303, 1291, 334, 440, 1083, 1296,
	1435, 1270, 70, 1587, 258, 749, 1313, 1314, 1447, 1659,
	1402, 1262, 1404, 1318, 263, 1094, 720, 320, 1273, 259,
	1130, 1394, 1096, 724, 1722, 263, 1643, 1364, 1455, 1660,
	259, 1470, 70, 70, 1271, 1329, 696, 776, 747, 1359,
	570, 1297, 260, 1416, 1207, 1001, 1367, 1368, 1369, 748,
	1372, 1129, 947, 260, 425, 424, 423, 422, 70, 262,
	70, 1386, 70, 421, 420, 417, 70, 353, 1365, 1567,
	262, 886, 41, 1392, 781, 70, 718, 1292, 1797, 70,
	1770, 1547, 1280, 1406, 1294, 70, 585, 1403, 1401, 70,
	1201, 70, 1389, 1255, 1272, 1438, 1411, 1037, 1033, 974,
	683, 1418, 1461, 680, 1415, 1419, 675, 574, 1428, 1430,
	1431, 1417, 1103, 571, 1488, 803, 1680, 1830, 769, 1043,
	68, 358, 68, 280, 586, 1444, 413, 718, 1454, 1436,
	1682, 869, 941, 70, 719, 451, 330, 692, 393, 1413,
	587, 1460, 254, 261, 3, 1458, 1459, 1691, 1484, 1485,
	1486, 1737, 925, 398, 261, 925, 280, 280, 940, 1765,
	1448, 938, 964, 334, 1481, 455, 1757, 958, 820, 1473,
	741, 1497, 1498, 688, 766, 761, 1044, 983, 1852, 1502,
	869, 265, 296, 717, 1495, 264, 1449, 1853, 1477, 268,
	1453, 68, 1334, 280, 695, 441, 264, 1500, 70, 70,
	70, 826, 452, 331, 414, 334, 70, 70, 338, 334,
	326, 1533, 70, 1542, 70, 1432, 70, 70, 70, 70,
	1423, 68, 1379, 1529, 1231, 1563, 1564, 1013, 1012, 1530,
	299, 300, 68, 305, 1177, 1174, 1173, 1124, 1014, 68,
	68, 68, 1546, 673, 1543, 1758, 1527, 1630, 1487, 1053,
	70, 70, 1256, 1015, 879, 1667, 256, 1537, 780, 418,
	1636, 1792, 70, 70, 1321, 1718, 70, 1700, 1594, 1597,
	1600, 1582, 1593, 1594, 68, 70, 70, 1593, 1128, 1595,
	884, 737, 31, 737, 1595, 1591, 1581, 717, 478, 1548,
	1391, 1053, 1266, 1149, 1619, 1053, 1598, 1577, 695, 1027,
	1026, 588, 770, 280, 70, 737, 280, 280, 280, 280,
	280, 788, 759, 1599, 501, 280, 753, 1620, 762, 1137,
	268, 554, 503, 693, 504, 694, 801, 911, 491, 691,
	366, 1266, 1263, 962, 1605, 1125, 1317, 882, 717, 1270,
	477, 483, 1624, 482, 326, 1112, 1573, 822, 389, 695,
	474, 1614, 1274, 696, 43, 403, 1273, 274, 70, 275,
	70, 1642, 70, 70, 1214, 1578, 1268, 1038, 808, 1400,
	308, 70, 1271, 1607, 1608, 1331, 1654, 1613, 1270, 391,
	1155, 696, 696, 1147, 1676, 1677, 1269, 1145, 1657, 696,
	70, 1136, 334, 334, 436, 1273, 334, 560, 963, 415,
	1655, 1220, 982, 460, 816, 1268, 1807, 329, 328, 1681,
	1023, 1271, 70, 412, 70, 1675, 746, 1692, 1006, 301,
	1731, 696, 1736, 70, 1695, 1269, 1397, 1594, 1777, 70,
	1690, 1593, 1272, 1683, 60, 23, 21, 20, 1595, 1611,
	19, 41, 17, 16, 718, 68, 15, 22, 1711, 13,
	12, 1704, 720, 930, 11, 10, 30, 68, 29, 28,
	68, 946, 27, 5, 2, 1, 0, 1717, 41, 0,
	70, 1272, 718, 718, 0, 0, 0, 0, 1053, 1053,
	718, 0, 1053, 1733, 1334, 0, 0, 0, 0, 70,
	70, 0, 1334, 70, 0, 1727, 0, 70, 0, 1149,
	1149, 1665, 70, 1728, 0, 0, 0, 1745, 0, 0,
	1747, 0, 718, 1749, 1753, 0, 70, 1724, 1754, 1594,
	0, 585, 1746, 1593, 0, 1610, 696, 731, 1748, 0,
	1595, 580, 0, 0, 1707, 1759, 0, 1761, 0, 0,
	1760, 0, 1699, 70, 0, 70, 70, 0, 70, 320,
	1149, 1149, 1149, 334, 1764, 0, 720, 0, 68, 586,
	966, 967, 1783, 68, 1775, 1781, 68, 70, 280, 280,
	719, 1787, 1786, 692, 1779, 587, 1784, 0, 0, 0,
	1751, 1339, 1790, 1788, 0, 1789, 1594, 1785, 0, 1339,
	1593, 70, 0, 70, 1767, 0, 0, 1595, 0, 0,
	0, 0, 1810, 1814, 0, 1812, 0, 720, 70, 0,
	1684, 0, 1811, 1823, 0, 0, 0, 718, 1827, 70,
	737, 822, 1831, 1825, 0, 696, 0, 0, 1349, 0,
	0, 1836, 0, 1833, 0, 1835, 1349, 0, 1832, 1053,
	0, 0, 0, 0, 0, 1848, 1847, 1850, 0, 0,
	0, 1795, 1851, 0, 0, 717, 0, 1299, 1300, 0,
	0, 0, 0, 0, 1856, 0, 695, 1018, 0, 0,
	0, 0, 0, 0, 719, 0, 1776, 692, 0, 0,
	0, 68, 930, 717, 717, 1350, 0, 1149, 1149, 0,
	0, 717, 0, 1350, 695, 695, 0, 0, 0, 0,
	0, 696, 695, 0, 0, 0, 0, 0, 1356, 1357,
	1358, 68, 869, 280, 0, 0, 718, 0, 0, 0,
	0, 964, 0, 717, 0, 719, 0, 0, 692, 0,
	0, 0, 0, 0, 695, 1149, 1149, 1149, 1149, 1149,
	1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
	1149, 1149, 1149, 1149, 0, 1149, 0, 1344, 1341, 1342,
	1343, 1335, 1336, 1337, 1338, 1340, 1341, 1342, 1343, 1335,
	1336, 1337, 1338, 1340, 0, 0, 0, 826, 696, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 718, 0, 0, 0, 0, 0, 0, 828,
	0, 0, 1558, 0, 1551, 0, 0, 0, 68, 1183,
	1184, 0, 1549, 0, 930, 0, 1553, 1189, 0, 0,
	827, 0, 0, 1194, 1195, 1197, 1199, 1200, 717, 1203,
	1204, 0, 0, 0, 1559, 68, 0, 0, 0, 695,
	0, 0, 68, 0, 1218, 1468, 1469, 0, 0, 0,
	0, 68, 0, 1552, 0, 0, 464, 464, 0, 0,
	68, 0, 0, 0, 0, 562, 0, 0, 0, 718,
	0, 0, 0, 0, 833, 0, 0, 0, 0, 581,
	0, 1018, 737, 0, 0, 0, 0, 1018, 0, 0,
	0, 0, 0, 1503, 1504, 1505, 1506, 1507, 1508, 1509,
	1510, 1511, 1512, 1513, 1514, 1515, 1516, 1517, 1518, 1519,
	1520, 1521, 0, 1525, 0, 801, 1554, 801, 1555, 280,
	68, 843, 0, 1257, 720, 0, 0, 717, 0, 0,
	0, 0, 1260, 0, 0, 0, 0, 0, 695, 1279,
	0, 68, 0, 1557, 0, 0, 0, 0, 0, 0,
	1560, 826, 720, 720, 0, 0, 855, 856, 857, 1149,
	720, 0, 0, 0, 0, 0, 0, 1334, 0, 1351,
	1352, 1353, 0, 828, 0, 859, 809, 811, 844, 0,
	0, 0, 0, 818, 0, 0, 1334, 0, 1351, 1352,
	1353, 0, 720, 0, 827, 863, 864, 865, 866, 867,
	842, 1622, 0, 717, 870, 0, 1556, 0, 0, 0,
	0, 0, 0, 0, 695, 0, 1348, 0, 0, 0,
	0, 0, 0, 0, 883, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1348, 0, 0, 0, 0,
	0, 0, 719, 1149, 0, 692, 0, 0, 833, 0,
	838, 835, 836, 837, 829, 830, 831, 832, 834, 0,
	854, 0, 0, 0, 1339, 852, 860, 0, 0, 0,
	719, 719, 0, 692, 692, 0, 0, 822, 719, 0,
	717, 692, 281, 1339, 0, 0, 0, 0, 0, 850,
	0, 695, 0, 0, 0, 843, 0, 720, 0, 294,
	0, 0, 0, 0, 0, 0, 0, 68, 68, 0,
	719, 1349, 0, 692, 1354, 0, 0, 1664, 0, 0,
	0, 0, 1149, 0, 0, 0, 0, 0, 0, 0,
	1349, 0, 0, 1433, 283, 930, 0, 801, 0, 288,
	289, 1443, 0, 295, 0, 0, 0, 0, 0, 0,
	68, 0, 844, 0, 68, 282, 284, 0, 0, 0,
	1279, 0, 0, 853, 1463, 0, 1279, 0, 1350, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1350, 0, 0,
	0, 0, 0, 285, 0, 0, 720, 0, 0, 0,
	0, 1721, 0, 0, 0, 286, 287, 0, 1492, 0,
	0, 0, 0, 0, 0, 719, 0, 851, 692, 0,
	290, 0, 0, 0, 838, 835, 836, 837, 829, 830,
	831, 832, 834, 0, 854, 0, 1345, 1346, 1347, 0,
	1344, 1341, 1342, 1343, 1335, 1336, 1337, 1338, 1340, 0,
	0, 0, 0, 0, 0, 1345, 1346, 1347, 0, 1344,
	1341, 1342, 1343, 1335, 1336, 1337, 1338, 1340, 0, 0,
	0, 0, 720, 1544, 1545, 930, 0, 0, 0, 0,
	1766, 822, 822, 0, 0, 0, 0, 1571, 0, 1572,
	0, 68, 1574, 1575, 1576, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 719, 0, 291, 692, 0, 292,
	0, 0, 0, 1590, 293, 822, 930, 0, 1590, 0,
	0, 0, 0, 0, 0, 0, 0, 68, 68, 0,
	0, 68, 0, 0, 0, 0, 0, 0, 0, 720,
	822, 1279, 464, 0, 0, 0, 0, 1059, 1060, 1061,
	1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071,
	1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1637,
	1086, 0, 1088, 1089, 1090, 1091, 0, 0, 0, 0,
	719, 0, 0, 692, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1134, 1135, 0,
	1146, 0, 1156, 1158, 1163, 1166, 1167, 1168, 0, 0,
	0, 0, 0, 930, 0, 1656, 0, 280, 1658, 0,
	0, 0, 0, 0, 0, 0, 68, 562, 0, 0,
	0, 1334, 0, 1351, 1352, 1353, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 822, 1621, 719, 0, 0,
	692, 0, 0, 0, 0, 0, 0, 0, 0, 1209,
	0, 1212, 1590, 0, 0, 0, 0, 68, 0, 1702,
	0, 0, 0, 0, 0, 0, 0, 0, 68, 0,
	1348, 0, 0, 0, 822, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1237, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 801, 0, 0, 1339, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1738, 1739, 0, 0, 1743, 818,
	0, 0, 1744, 0, 1590, 0, 0, 280, 0, 1354,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 822, 0, 0, 0, 1349, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1284,
	1285, 0, 0, 0, 0, 1290, 0, 0, 1774, 0,
	822, 68, 0, 280, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1304, 0,
	0, 1590, 1702, 0, 0, 0, 0, 1312, 0, 0,
	0, 0, 1350, 0, 0, 1320, 0, 0, 826, 1325,
	845, 846, 847, 855, 856, 857, 68, 0, 822, 0,
	0, 0, 0, 848, 0, 0, 0, 0, 0, 0,
	828, 870, 859, 1824, 0, 0, 0, 1163, 1163, 1163,
	0, 0, 0, 0, 822, 0, 0, 0, 0, 0,
	0, 827, 0, 0, 0, 0, 0, 842, 0, 0,
	0, 0, 1334, 0, 1351, 1352, 1353, 0, 1393, 0,
	1345, 1346, 1347, 0, 1344, 1341, 1342, 1343, 1335, 1336,
	1337, 1338, 1340, 0, 0, 0, 0, 0, 0, 464,
	0, 0, 0, 0, 0, 0, 0, 464, 0, 0,
	0, 562, 0, 0, 1334, 833, 1351, 1352, 1353, 0,
	0, 1348, 0, 0, 0, 0, 0, 0, 0, 1475,
	0, 0, 852, 860, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 858, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 850, 0, 0, 0,
	0, 0, 843, 1348, 0, 0, 0, 0, 0, 1339,
	0, 1466, 0, 0, 1467, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 849, 1472, 0, 1355, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1237, 0,
	1354, 0, 0, 0, 0, 0, 0, 1489, 0, 0,
	0, 1339, 0, 0, 0, 0, 1349, 1499, 0, 844,
	1501, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	853, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1354, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1531, 1532, 0, 0, 0, 0, 1349, 0,
	0, 1538, 1539, 1540, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1350, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 851, 0, 0, 839, 840, 841,
	0, 838, 835, 836, 837, 829, 830, 831, 832, 834,
	464, 854, 0, 950, 0, 0, 0, 0, 0, 0,
	0, 0, 951, 0, 0, 1350, 826, 0, 845, 846,
	847, 855, 856, 857, 0, 0, 0, 0, 0, 0,
	0, 848, 0, 0, 0, 1604, 0, 0, 828, 0,
	859, 1345, 1346, 1347, 0, 1344, 1341, 1342, 1343, 1335,
	1336, 1337, 1338, 1340, 0, 0, 0, 0, 1623, 827,
	0, 0, 1626, 1627, 0, 842, 0, 1629, 0, 0,
	0, 1631, 0, 0, 0, 0, 0, 1334, 1635, 1351,
	1352, 1353, 1638, 1345, 1346, 1347, 0, 1344, 1341, 1342,
	1343, 1335, 1336, 1337, 1338, 1340, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 833, 1647, 0, 0, 0, 826, 0,
	845, 846, 847, 855, 856, 857, 1348, 0, 0, 0,
	852, 860, 0, 848, 0, 0, 0, 0, 0, 0,
	828, 0, 859, 0, 858, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 850, 0, 1674, 0, 0, 0,
	843, 827, 0, 0, 0, 0, 0, 842, 0, 0,
	0, 0, 0, 0, 1339, 0, 0, 0, 0, 0,
	1693, 0, 849, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1706,
	0, 0, 0, 0, 0, 1354, 0, 0, 0, 1713,
	1714, 0, 0, 0, 0, 833, 0, 844, 0, 0,
	0, 1349, 0, 0, 0, 0, 0, 0, 853, 0,
	0, 0, 852, 860, 0, 0, 0, 0, 1726, 0,
	0, 0, 0, 0, 0, 0, 858, 0, 0, 0,
	0, 1730, 0, 0, 0, 0, 850, 0, 0, 0,
	0, 0, 843, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 562, 0, 0, 0, 0, 1350, 0,
	0, 0, 851, 0, 849, 839, 840, 841, 0, 838,
	835, 836, 837, 829, 830, 831, 832, 834, 0, 854,
	0, 0, 0, 0, 0, 0, 1650, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 844,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	853, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1345, 1346, 1347, 0,
	1344, 1341, 1342, 1343, 1335, 1336, 1337, 1338, 1340, 0,
	0, 0, 0, 0, 0, 0, 1809, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1822, 1822, 0, 851, 0, 0, 839, 840, 841,
	0, 838, 835, 836, 837, 829, 830, 831, 832, 834,
	0, 854, 0, 0, 0, 0, 0, 1822, 1375, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 584, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1822, 72, 73, 589, 74, 590, 591, 592, 593, 183,
	594, 595, 596, 597, 75, 76, 184, 185, 186, 187,
	77, 188, 189, 598, 78, 190, 191, 79, 599, 600,
	192, 193, 194, 601, 195, 602, 374, 603, 80, 81,
	82, 0, 83, 604, 84, 85, 86, 605, 375, 87,
	88, 606, 607, 608, 609, 610, 611, 89, 90, 91,
	92, 196, 93, 197, 198, 612, 94, 613, 95, 614,
	615, 616, 96, 97, 617, 98, 618, 0, 619, 199,
	99, 100, 200, 620, 621, 622, 101, 102, 201, 0,
	103, 623, 104, 624, 625, 376, 626, 105, 202, 627,
	203, 628, 106, 107, 204, 205, 378, 629, 110, 630,
	108, 631, 377, 109, 206, 207, 208, 632, 209, 633,
	379, 111, 380, 112, 113, 634, 635, 210, 381, 114,
	382, 636, 115, 637, 638, 116, 0, 117, 118, 119,
	120, 121, 383, 122, 123, 126, 124, 639, 125, 640,
	211, 127, 212, 128, 129, 641, 642, 643, 644, 645,
	130, 213, 384, 131, 385, 214, 132, 133, 134, 646,
	215, 135, 216, 136, 647, 137, 138, 139, 217, 140,
	141, 648, 143, 144, 142, 145, 649, 146, 386, 147,
	148, 218, 149, 0, 150, 151, 152, 650, 219, 153,
	154, 651, 155, 156, 387, 157, 220, 221, 158, 652,
	159, 160, 161, 163, 222, 162, 223, 653, 164, 654,
	165, 166, 655, 224, 225, 226, 656, 657, 167, 227,
	228, 658, 168, 169, 170, 171, 659, 660, 172, 173,
	174, 661, 662, 175, 176, 177, 229, 230, 663, 178,
	664, 665, 666, 667, 179, 180, 181, 182, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	584, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1462, 72, 73, 589, 74, 590,
	591, 592, 593, 183, 594, 595, 596, 597, 75, 76,
	184, 185, 186, 187, 77, 188, 189, 598, 78, 190,
	191, 79, 599, 600, 192, 193, 194, 601, 195, 602,
	374, 603, 80, 81, 82, 0, 83, 604, 84, 85,
	86, 605, 375, 87, 88, 606, 607, 608, 609, 610,
	611, 89, 90, 91, 92, 196, 93, 197, 198, 612,
	94, 613, 95, 614, 615, 616, 96, 97, 617, 98,
	618, 0, 619, 199, 99, 100, 200, 620, 621, 622,
	101, 102, 201, 0, 103, 623, 104, 624, 625, 376,
	626, 105, 202, 627, 203, 628, 106, 107, 204, 205,
	378, 629, 110, 630, 108, 631, 377, 109, 206, 207,
	208, 632, 209, 633, 379, 111, 380, 112, 113, 634,
	635, 210, 381, 114, 382, 636, 115, 637, 638, 116,
	0, 117, 118, 119, 120, 121, 383, 122, 123, 126,
	124, 639, 125, 640, 211, 127, 212, 128, 129, 641,
	642, 643, 644, 645, 130, 213, 384, 131, 385, 214,
	132, 133, 134, 646, 215, 135, 216, 136, 647, 137,
	138, 139, 217, 140, 141, 648, 143, 144, 142, 145,
	649, 146, 386, 147, 148, 218, 149, 0, 150, 151,
	152, 650, 219, 153, 154, 651, 155, 156, 387, 157,
	220, 221, 158, 652, 159, 160, 161, 163, 222, 162,
	223, 653, 164, 654, 165, 166, 655, 224, 225, 226,
	656, 657, 167, 227, 228, 658, 168, 169, 170, 171,
	659, 660, 172, 173, 174, 661, 662, 175, 176, 177,
	229, 230, 663, 178, 664, 665, 666, 667, 179, 180,
	181, 182, 584, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 583, 0, 72, 73, 589,
	74, 590, 591, 592, 593, 183, 594, 595, 596, 597,
	75, 76, 184, 185, 186, 187, 77, 188, 189, 598,
	78, 190, 191, 79, 599, 600, 192, 193, 194, 601,
	195, 602, 374, 603, 80, 81, 82, 0, 83, 604,
	84, 85, 86, 605, 375, 87, 88, 606, 607, 608,
	609, 610, 611, 89, 90, 91, 92, 196, 93, 197,
	198, 612, 94, 613, 95, 614, 615, 616, 96, 97,
	617, 98, 618, 0, 619, 199, 99, 100, 200, 620,
	621, 622, 101, 102, 201, 0, 103, 623, 104, 624,
	625, 376, 626, 105, 202, 627, 203, 628, 106, 107,
	204, 205, 378, 629, 110, 630, 108, 631, 377, 109,
	206, 207, 208, 632, 209, 633, 379, 111, 380, 112,
	113, 634, 635, 210, 381, 114, 382, 636, 115, 637,
	638, 116, 0, 117, 118, 119, 120, 121, 383, 122,
	123, 126, 124, 639, 125, 640, 211, 127, 212, 128,
	129, 641, 642, 643, 644, 645, 130, 213, 384, 131,
	385, 214, 132, 133, 134, 646, 215, 135, 216, 136,
	647, 137, 138, 139, 217, 140, 141, 648, 143, 144,
	142, 145, 649, 146, 386, 147, 148, 218, 149, 0,
	150, 151, 152, 650, 219, 153, 154, 651, 155, 156,
	387, 157, 220, 221, 158, 652, 159, 160, 161, 163,
	222, 162, 223, 653, 164, 654, 165, 166, 655, 224,
	225, 226, 656, 657, 167, 227, 228, 658, 168, 169,
	170, 171, 659, 660, 172, 173, 174, 661, 662, 175,
	176, 177, 229, 230, 663, 178, 664, 665, 666, 667,
	179, 180, 181, 182, 499, 488, 489, 486, 487, 475,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 72,
	73, 1120, 74, 0, 0, 0, 0, 515, 481, 0,
	0, 0, 75, 76, 184, 529, 186, 530, 77, 531,
	532, 0, 78, 190, 191, 79, 496, 514, 533, 534,
	194, 0, 525, 0, 507, 0, 80, 81, 82, 0,
	83, 0, 84, 85, 86, 0, 375, 87, 88, 0,
	508, 510, 0, 509, 511, 89, 90, 91, 92, 535,
	93, 536, 537, 0, 94, 0, 95, 0, 1121, 0,
	528, 97, 0, 98, 0, 0, 0, 480, 99, 100,
	516, 494, 0, 0, 101, 102, 538, 0, 103, 0,
	104, 0, 0, 376, 0, 105, 526, 0, 203, 0,
	106, 107, 522, 524, 378, 0, 110, 0, 108, 0,
	377, 109, 539, 540, 541, 0, 506, 0, 379, 111,
	380, 112, 113, 0, 0, 527, 381, 114, 382, 0,
	115, 0, 0, 116, 0, 117, 118, 119, 120, 121,
	383, 122, 123, 126, 124, 470, 125, 495, 523, 127,
	542, 128, 129, 0, 0, 0, 0, 0, 130, 213,
	384, 131, 385, 517, 132, 133, 134, 0, 518, 135,
	216, 136, 0, 137, 138, 139, 543, 140, 141, 0,
	143, 144, 142, 145, 0, 146, 386, 147, 148, 484,
	149, 0, 150, 151, 152, 0, 219, 153, 154, 512,
	155, 156, 387, 157, 544, 221, 158, 0, 159, 160,
	161, 163, 545, 162, 519, 0, 164, 0, 165, 166,
	0, 224, 546, 547, 0, 0, 167, 520, 521, 493,
	168, 169, 170, 171, 0, 0, 172, 173, 174, 513,
	0, 175, 176, 177, 229, 548, 1119, 178, 0, 0,
	0, 0, 179, 180, 181, 182, 471, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 467, 468, 1122,
	0, 0, 0, 469, 0, 0, 476, 1117, 499, 488,
	489, 486, 487, 475, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 72, 73, 0, 74, 0, 0, 0,
	0, 515, 481, 0, 0, 0, 75, 76, 184, 529,
	186, 530, 77, 531, 532, 0, 78, 190, 191, 79,
	496, 514, 533, 534, 194, 0, 525, 0, 507, 0,
	80, 81, 82, 0, 83, 0, 84, 85, 86, 0,
	375, 87, 88, 0, 508, 510, 0, 509, 511, 89,
	90, 91, 92, 535, 93, 536, 537, 563, 94, 0,
	95, 0, 0, 0, 528, 97, 0, 98, 0, 0,
	0, 480, 99, 100, 516, 494, 0, 0, 101, 102,
	538, 0, 103, 0, 104, 0, 0, 376, 0, 105,
	526, 0, 203, 0, 106, 107, 522, 524, 378, 0,
	110, 0, 108, 0, 377, 109, 539, 540, 541, 0,
	506, 0, 379, 111, 380, 112, 113, 0, 0, 527,
	381, 114, 382, 0, 115, 0, 0, 116, 0, 117,
	118, 119, 120, 121, 383, 122, 123, 126, 124, 470,
	125, 495, 523, 127, 542, 128, 129, 0, 0, 0,
	0, 0, 130, 213, 384, 131, 385, 517, 132, 133,
	134, 0, 518, 135, 216, 136, 0, 137, 138, 139,
	543, 140, 141, 0, 143, 144, 142, 145, 0, 146,
	386, 147, 148, 484, 149, 0, 150, 151, 152, 59,
	219, 153, 154, 512, 155, 156, 387, 157, 544, 221,
	158, 0, 159, 160, 161, 163, 545, 162, 519, 0,
	164, 61, 165, 166, 0, 224, 546, 547, 0, 0,
	167, 520, 521, 493, 168, 169, 170, 171, 0, 0,
	172, 173, 174, 513, 0, 175, 176, 177, 373, 548,
	0, 178, 0, 0, 0, 57, 179, 180, 181, 182,
	471, 58, 0, 499, 488, 489, 486, 487, 475, 0,
	0, 467, 468, 0, 0, 0, 0, 469, 72, 73,
	476, 74, 0, 0, 0, 0, 515, 481, 0, 0,
	0, 75, 76, 184, 529, 186, 530, 77, 531, 532,
	0, 78, 190, 191, 79, 496, 514, 533, 534, 194,
	0, 525, 0, 507, 0, 80, 81, 82, 0, 83,
	0, 84, 85, 86, 0, 375, 87, 88, 0, 508,
	510, 0, 509, 511, 89, 90, 91, 92, 535, 93,
	536, 537, 0, 94, 0, 95, 0, 0, 0, 528,
	97, 0, 98, 0, 0, 0, 480, 99, 100, 516,
	494, 0, 0, 101, 102, 538, 0, 103, 0, 104,
	0, 0, 376, 0, 105, 526, 0, 203, 0, 106,
	107, 522, 524, 378, 0, 110, 0, 108, 0, 377,
	109, 539, 540, 541, 0, 506, 0, 379, 111, 380,
	112, 113, 0, 0, 527, 381, 114, 382, 0, 115,
	0, 0, 116, 0, 117, 118, 119, 120, 121, 383,
	122, 123, 126, 124, 470, 125, 495, 523, 127, 542,
	128, 129, 0, 0, 0, 0, 0, 130, 213, 384,
	131, 385, 517, 132, 133, 134, 0, 518, 135, 216,
	136, 0, 137, 138, 139, 543, 140, 141, 0, 143,
	144, 142, 145, 0, 146, 386, 147, 148, 484, 149,
	0, 150, 151, 152, 59, 219, 153, 154, 512, 155,
	156, 387, 157, 544, 221, 158, 0, 159, 160, 161,
	163, 545, 162, 519, 0, 164, 61, 165, 166, 0,
	224, 546, 547, 0, 0, 167, 520, 521, 493, 168,
	169, 170, 171, 0, 0, 172, 173, 174, 513, 0,
	175, 176, 177, 373, 548, 0, 178, 0, 0, 0,
	57, 179, 180, 181, 182, 471, 58, 0, 499, 488,
	489, 486, 487, 475, 0, 0, 467, 468, 0, 0,
	0, 0, 469, 72, 73, 476, 74, 0, 0, 0,
	0, 515, 481, 0, 0, 0, 75, 76, 184, 529,
	186, 530, 77, 531, 532, 1159, 78, 190, 191, 79,
	496, 514, 533, 534, 194, 0, 525, 0, 507, 0,
	80, 81, 82, 0, 83, 0, 84, 85, 86, 0,
	375, 87, 88, 0, 508, 510, 0, 509, 511, 89,
	90, 91, 92, 535, 93, 536, 537, 0, 94, 0,
	95, 0, 0, 0, 528, 97, 0, 98, 0, 0,
	0, 480, 99, 100, 516, 494, 0, 0, 101, 102,
	538, 0, 103, 0, 104, 0, 1164, 376, 0, 105,
	526, 0, 203, 0, 106, 107, 522, 524, 378, 0,
	110, 0, 108, 0, 377, 109, 539, 540, 541, 0,
	506, 0, 379, 111, 380, 112, 113, 0, 1160, 527,
	381, 114, 382, 0, 115, 0, 0, 116, 0, 117,
	118, 119, 120, 121, 383, 122, 123, 126, 124, 470,
	125, 495, 523, 127, 542, 128, 129, 0, 0, 0,
	0, 0, 130, 213, 384, 131, 385, 517, 132, 133,
	134, 0, 518, 135, 216, 136, 0, 137, 138, 139,
	543, 140, 141, 0, 143, 144, 142, 145, 0, 146,
	386, 147, 148, 484, 149, 0, 150, 151, 152, 0,
	219, 153, 154, 512, 155, 156, 387, 157, 544, 221,
	158, 0, 159, 160, 161, 163, 545, 162, 519, 0,
	164, 0, 165, 166, 0, 224, 546, 547, 0, 1161,
	167, 520, 521, 493, 168, 169, 170, 171, 0, 0,
	172, 173, 174, 513, 0, 175, 176, 177, 229, 548,
	0, 178, 0, 0, 0, 0, 179, 180, 181, 182,
	471, 0, 0, 499, 488, 489, 486, 487, 475, 0,
	0, 467, 468, 0, 0, 0, 0, 469, 72, 73,
	476, 74, 0, 0, 0, 0, 515, 481, 0, 0,
	0, 75, 76, 184, 529, 186, 530, 77, 531, 532,
	0, 78, 190, 191, 79, 496, 514, 533, 534, 194,
	0, 525, 0, 507, 0, 80, 81, 82, 0, 83,
	0, 84, 85, 86, 0, 375, 87, 88, 0, 508,
	510, 0, 509, 511, 89, 90, 91, 92, 535, 93,
	536, 537, 0, 94, 0, 95, 0, 0, 0, 528,
	97, 0, 98, 0, 0, 0, 480, 99, 100, 516,
	494, 0, 0, 101, 102, 538, 0, 103, 0, 104,
	0, 0, 376, 0, 105, 526, 0, 203, 0, 106,
	107, 522, 524, 378, 0, 110, 0, 108, 0, 377,
	109, 539, 540, 541, 0, 506, 0, 379, 111, 380,
	112, 113, 0, 0, 527, 381, 114, 382, 0, 115,
	0, 0, 116, 0, 117, 118, 119, 120, 121, 383,
	122, 123, 126, 124, 470, 125, 495, 523, 127, 542,
	128, 129, 0, 0, 0, 0, 0, 130, 213, 384,
	131, 385, 517, 132, 133, 134, 0, 518, 135, 216,
	136, 0, 137, 138, 139, 543, 140, 141, 0, 143,
	144, 142, 145, 0, 146, 386, 147, 148, 484, 149,
	0, 150, 151, 152, 0, 219, 153, 154, 512, 155,
	156, 387, 157, 544, 221, 158, 0, 159, 160, 161,
	163, 545, 162, 519, 0, 164, 0, 165, 166, 0,
	224, 546, 547, 0, 0, 167, 520, 521, 493, 168,
	169, 170, 171, 0, 0, 172, 173, 174, 513, 0,
	175, 176, 177, 229, 548, 0, 178, 0, 0, 0,
	0, 179, 180, 181, 182, 471, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 467, 468, 0, 0,
	0, 0, 469, 0, 0, 476, 1528, 499, 488, 489,
	486, 487, 475, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 72, 73, 0, 74, 0, 0, 0, 0,
	515, 481, 0, 0, 0, 75, 76, 184, 529, 186,
	530, 77, 531, 532, 0, 78, 190, 191, 79, 496,
	514, 533, 534, 194, 0, 525, 0, 507, 0, 80,
	81, 82, 0, 83, 0, 84, 85, 86, 0, 375,
	87, 88, 0, 508, 510, 0, 509, 511, 89, 90,
	91, 92, 535, 93, 536, 537, 0, 94, 0, 95,
	0, 0, 0, 528, 97, 0, 98, 0, 0, 0,
	480, 99, 100, 516, 494, 0, 0, 101, 102, 538,
	0, 103, 0, 104, 0, 0, 376, 0, 105, 526,
	0, 203, 0, 106, 107, 522, 524, 378, 0, 110,
	0, 108, 0, 377, 109, 539, 540, 541, 0, 506,
	0, 379, 111, 380, 112, 113, 0, 0, 527, 381,
	114, 382, 0, 115, 0, 0, 116, 0, 117, 118,
	119, 120, 121, 383, 122, 123, 126, 124, 470, 125,
	495, 523, 127, 542, 128, 129, 0, 0, 0, 0,
	0, 130, 213, 384, 131, 385, 517, 132, 133, 134,
	0, 518, 135, 216, 136, 0, 137, 138, 139, 543,
	140, 141, 0, 143, 144, 142, 145, 0, 146, 386,
	147, 148, 484, 149, 0, 150, 151, 152, 0, 219,
	153, 154, 512, 155, 156, 387, 157, 544, 221, 158,
	0, 159, 160, 161, 163, 545, 162, 519, 0, 164,
	0, 165, 166, 0, 224, 546, 547, 0, 0, 167,
	520, 521, 493, 168, 169, 170, 171, 0, 0, 172,
	173, 174, 513, 0, 175, 176, 177, 229, 548, 0,
	178, 0, 0, 0, 0, 179, 180, 181, 182, 471,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	467, 468, 0, 0, 0, 0, 469, 0, 0, 476,
	1478, 499, 488, 489, 486, 487, 475, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 72, 73, 0, 74,
	0, 0, 0, 0, 515, 481, 0, 0, 0, 75,
	76, 184, 529, 186, 530, 77, 531, 532, 0, 78,
	190, 191, 79, 496, 514, 533, 534, 194, 0, 525,
	0, 507, 0, 80, 81, 82, 0, 83, 0, 84,
	85, 86, 0, 375, 87, 88, 0, 508, 510, 0,
	509, 511, 89, 90, 91, 92, 535, 93, 536, 537,
	0, 94, 0, 95, 0, 0, 0, 528, 97, 0,
	98, 0, 0, 0, 480, 99, 100, 516, 494, 0,
	0, 101, 102, 538, 0, 103, 0, 104, 0, 0,
	376, 0, 105, 526, 0, 203, 0, 106, 107, 522,
	524, 378, 0, 110, 0, 108, 0, 377, 109, 539,
	540, 541, 0, 506, 0, 379, 111, 380, 112, 113,
	0, 0, 527, 381, 114, 382, 0, 115, 0, 0,
	116, 0, 117, 118, 119, 120, 121, 383, 122, 123,
	126, 124, 470, 125, 495, 523, 127, 542, 128, 129,
	0, 0, 0, 0, 0, 130, 213, 384, 131, 385,
	517, 132, 133, 134, 0, 518, 135, 216, 136, 0,
	137, 138, 139, 543, 140, 141, 0, 143, 144, 142,
	145, 0, 146, 386, 147, 148, 484, 149, 0, 150,
	151, 152, 0, 219, 153, 154, 512, 155, 156, 387,
	157, 544, 221, 158, 0, 159, 160, 161, 163, 545,
	162, 519, 0, 164, 0, 165, 166, 0, 224, 546,
	547, 0, 0, 167, 520, 521, 493, 168, 169, 170,
	171, 0, 0, 172, 173, 174, 513, 0, 175, 176,
	177, 229, 548, 0, 178, 0, 0, 0, 0, 179,
	180, 181, 182, 471, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 467, 468, 0, 0, 0, 0,
	469, 0, 0, 476, 1116, 499, 488, 489, 486, 487,
	475, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	72, 73, 0, 74, 0, 0, 0, 0, 515, 481,
	0, 0, 0, 75, 76, 184, 529, 186, 530, 77,
	531, 532, 0, 78, 190, 191, 79, 496, 514, 533,
	534, 194, 0, 525, 0, 507, 0, 80, 81, 82,
	0, 83, 0, 84, 85, 86, 0, 375, 87, 88,
	0, 508, 510, 0, 509, 511, 89, 90, 91, 92,
	535, 93, 536, 537, 0, 94, 0, 95, 0, 0,
	0, 528, 97, 0, 98, 0, 0, 0, 480, 99,
	100, 516, 494, 0, 0, 101, 102, 538, 0, 103,
	0, 104, 0, 0, 376, 0, 105, 526, 0, 203,
	0, 106, 107, 522, 524, 378, 0, 110, 0, 108,
	0, 377, 109, 539, 540, 541, 0, 506, 0, 379,
	111, 380, 112, 113, 0, 0, 527, 381, 114, 382,
	0, 115, 0, 0, 116, 0, 117, 118, 119, 120,
	121, 383, 122, 123, 126, 124, 470, 125, 495, 523,
	127, 542, 128, 129, 0, 0, 0, 0, 0, 130,
	213, 384, 131, 385, 517, 132, 133, 134, 0, 518,
	135, 216, 136, 0, 137, 138, 139, 543, 140, 141,
	0, 143, 144, 142, 145, 0, 146, 386, 147, 148,
	484, 149, 0, 150, 151, 152, 0, 219, 153, 154,
	512, 155, 156, 387, 157, 544, 221, 158, 0, 159,
	160, 161, 163, 545, 162, 519, 0, 164, 0, 165,
	166, 0, 224, 546, 547, 0, 0, 167, 520, 521,
	493, 168, 169, 170, 171, 0, 0, 172, 173, 174,
	513, 0, 175, 176, 177, 229, 548, 0, 178, 0,
	0, 0, 0, 179, 180, 181, 182, 471, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 467, 468,
	0, 0, 0, 0, 469, 875, 1113, 476, 499, 488,
	489, 486, 487, 475, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 72, 73, 0, 74, 0, 0, 0,
	0, 515, 481, 0, 0, 0, 75, 76, 184, 529,
	186, 530, 77, 531, 532, 0, 78, 190, 191, 79,
	496, 514, 533, 534, 194, 0, 525, 0, 507, 0,
	80, 81, 82, 0, 83, 0, 84, 85, 86, 0,
	375, 87, 88, 0, 508, 510, 0, 509, 511, 89,
	90, 91, 92, 535, 93, 536, 537, 0, 94, 0,
	95, 0, 0, 0, 528, 97, 0, 98, 0, 0,
	0, 480, 99, 100, 516, 494, 0, 0, 101, 102,
	538, 0, 103, 0, 104, 0, 0, 376, 0, 105,
	526, 0, 203, 0, 106, 107, 522, 524, 378, 0,
	110, 0, 108, 0, 377, 109, 539, 540, 541, 0,
	506, 0, 379, 111, 380, 112, 113, 0, 0, 527,
	381, 114, 382, 0, 115, 0, 0, 116, 0, 117,
	118, 119, 120, 121, 383, 122, 123, 126, 124, 470,
	125, 495, 523, 127, 542, 128, 129, 0, 0, 0,
	0, 0, 130, 213, 384, 131, 385, 517, 132, 133,
	134, 0, 518, 135, 216, 136, 0, 137, 138, 139,
	543, 140, 141, 0, 143, 144, 142, 145, 0, 146,
	386, 147, 148, 484, 149, 0, 150, 151, 152, 0,
	219, 153, 154, 512, 155, 156, 387, 157, 544, 221,
	158, 0, 159, 160, 161, 163, 545, 162, 519, 0,
	164, 0, 165, 166, 0, 224, 546, 547, 0, 0,
	167, 520, 521, 493, 168, 169, 170, 171, 0, 0,
	172, 173, 174, 513, 0, 175, 176, 177, 229, 548,
	0, 178, 0, 0, 0, 0, 179, 180, 181, 182,
	471, 0, 0, 499, 488, 489, 486, 487, 475, 0,
	0, 467, 468, 465, 0, 0, 0, 469, 72, 73,
	476, 74, 0, 0, 0, 0, 515, 481, 0, 0,
	0, 75, 76, 184, 529, 186, 530, 77, 531, 532,
	0, 78, 190, 191, 79, 496, 514, 533, 534, 194,
	0, 525, 0, 507, 0, 80, 81, 82, 0, 83,
	0, 84, 85, 86, 0, 375, 87, 88, 0, 508,
	510, 0, 509, 511, 89, 90, 91, 92, 535, 93,
	536, 537, 0, 94, 0, 95, 0, 0, 0, 528,
	97, 0, 98, 0, 0, 0, 480, 99, 100, 516,
	494, 0, 0, 101, 102, 538, 0, 103, 0, 104,
	0, 0, 376, 0, 105, 526, 0, 203, 0, 106,
	107, 522, 524, 378, 0, 110, 0, 108, 0, 377,
	109, 539, 540, 541, 0, 506, 0, 379, 111, 380,
	112, 113, 0, 0, 527, 381, 114, 382, 0, 115,
	0, 0, 116, 0, 117, 118, 119, 120, 121, 383,
	122, 123, 126, 124, 470, 125, 495, 523, 127, 542,
	128, 129, 0, 0, 0, 0, 0, 130, 213, 384,
	131, 385, 517, 132, 133, 134, 0, 518, 135, 216,
	136, 0, 137, 138, 139, 543, 140, 141, 0, 143,
	144, 142, 145, 0, 146, 386, 147, 148, 484, 149,
	0, 150, 151, 152, 0, 219, 153, 154, 512, 155,
	156, 387, 157, 544, 221, 158, 0, 159, 160, 161,
	163, 545, 162, 519, 0, 164, 0, 165, 166, 0,
	224, 546, 547, 0, 0, 167, 520, 521, 493, 168,
	169, 170, 171, 0, 0, 172, 173, 174, 513, 0,
	175, 176, 177, 229, 548, 1483, 178, 0, 0, 0,
	0, 179, 180, 181, 182, 471, 0, 0, 499, 488,
	489, 486, 487, 475, 0, 0, 467, 468, 0, 0,
	0, 0, 469, 72, 73, 476, 74, 0, 0, 0,
	0, 515, 481, 0, 0, 0, 75, 76, 184, 529,
	186, 530, 77, 531, 532, 0, 78, 190, 191, 79,
	496, 514, 533, 534, 194, 0, 525, 0, 507, 0,
	80, 81, 82, 0, 83, 0, 84, 85, 86, 0,
	375, 87, 88, 0, 508, 510, 0, 509, 511, 89,
	90, 91, 92, 535, 93, 536, 537, 563, 94, 0,
	95, 0, 0, 0, 528, 97, 0, 98, 0, 0,
	0, 480, 99, 100, 516, 494, 0, 0, 101, 102,
	538, 0, 103, 0, 104, 0, 0, 376, 0, 105,
	526, 0, 203, 0, 106, 107, 522, 524, 378, 0,
	110, 0, 108, 0, 377, 109, 539, 540, 541, 0,
	506, 0, 379, 111, 380, 112, 113, 0, 0, 527,
	381, 114, 382, 0, 115, 0, 0, 116, 0, 117,
	118, 119, 120, 121, 383, 122, 123, 126, 124, 470,
	125, 495, 523, 127, 542, 128, 129, 0, 0, 0,
	0, 0, 130, 213, 384, 131, 385, 517, 132, 133,
	134, 0, 518, 135, 216, 136, 0, 137, 138, 139,
	543, 140, 141, 0, 143, 144, 142, 145, 0, 146,
	386, 147, 148, 484, 149, 0, 150, 151, 152, 0,
	219, 153, 154, 512, 155, 156, 387, 157, 544, 221,
	158, 0, 159, 160, 161, 163, 545, 162, 519, 0,
	164, 0, 165, 166, 0, 224, 546, 547, 0, 0,
	167, 520, 521, 493, 168, 169, 170, 171, 0, 0,
	172, 173, 174, 513, 0, 175, 176, 177, 229, 548,
	0, 178, 0, 0, 0, 0, 179, 180, 181, 182,
	471, 0, 0, 499, 488, 489, 486, 487, 475, 0,
	0, 467, 468, 0, 0, 0, 0, 469, 72, 73,
	476, 74, 0, 0, 0, 0, 515, 481, 0, 0,
	0, 75, 76, 184, 529, 186, 530, 77, 531, 532,
	0, 78, 190, 191, 79, 496, 514, 533, 534, 194,
	0, 525, 0, 507, 0, 80, 81, 82, 0, 83,
	0, 84, 85, 86, 0, 375, 87, 88, 0, 508,
	510, 0, 509, 511, 89, 90, 91, 92, 535, 93,
	536, 537, 0, 94, 0, 95, 0, 0, 0, 528,
	97, 0, 98, 0, 0, 0, 480, 99, 100, 516,
	494, 0, 0, 101, 102, 538, 0, 103, 0, 104,
	0, 1164, 376, 0, 105, 526, 0, 203, 0, 106,
	107, 522, 524, 378, 0, 110, 0, 108, 0, 377,
	109, 539, 540, 541, 0, 506, 0, 379, 111, 380,
	112, 113, 0, 0, 527, 381, 114, 382, 0, 115,
	0, 0, 116, 0, 117, 118, 119, 120, 121, 383,
	122, 123, 126, 124, 470, 125, 495, 523, 127, 542,
	128, 129, 0, 0, 0, 0, 0, 130, 213, 384,
	131, 385, 517, 132, 133, 134, 0, 518, 135, 216,
	136, 0, 137, 138, 139, 543, 140, 141, 0, 143,
	144, 142, 145, 0, 146, 386, 147, 148, 484, 149,
	0, 150, 151, 152, 0, 219, 153, 154, 512, 155,
	156, 387, 157, 544, 221, 158, 0, 159, 160, 161,
	163, 545, 162, 519, 0, 164, 0, 165, 166, 0,
	224, 546, 547, 0, 0, 167, 520, 521, 493, 168,
	169, 170, 171, 0, 0, 172, 173, 174, 513, 0,
	175, 176, 177, 229, 548, 0, 178, 0, 0, 0,
	0, 179, 180, 181, 182, 471, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 467, 468, 0, 0,
	0, 0, 469, 0, 0, 476, 499, 488, 489, 486,
	487, 475, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 72, 73, 810, 74, 0, 0, 0, 0, 515,
	481, 0, 0, 0, 75, 76, 184, 529, 186, 530,
	77, 531, 532, 0, 78, 190, 191, 79, 496, 514,
	533, 534, 194, 0, 525, 0, 507, 0, 80, 81,
	82, 0, 83, 0, 84, 85, 86, 0, 375, 87,
	88, 0, 508, 510, 0, 509, 511, 89, 90, 91,
	92, 535, 93, 536, 537, 0, 94, 0, 95, 0,
	0, 0, 528, 97, 0, 98, 0, 0, 0, 480,
	99, 100, 516, 494, 0, 0, 101, 102, 538, 0,
	103, 0, 104, 0, 0, 376, 0, 105, 526, 0,
	203, 0, 106, 107, 522, 524, 378, 0, 110, 0,
	108, 0, 377, 109, 539, 540, 541, 0, 506, 0,
	379, 111, 380, 112, 113, 0, 0, 527, 381, 114,
	382, 0, 115, 0, 0, 116, 0, 117, 118, 119,
	120, 121, 383, 122, 123, 126, 124, 470, 125, 495,
	523, 127, 542, 128, 129, 0, 0, 0, 0, 0,
	130, 213, 384, 131, 385, 517, 132, 133, 134, 0,
	518, 135, 216, 136, 0, 137, 138, 139, 543, 140,
	141, 0, 143, 144, 142, 145, 0, 146, 386, 147,
	148, 484, 149, 0, 150, 151, 152, 0, 219, 153,
	154, 512, 155, 156, 387, 157, 544, 221, 158, 0,
	159, 160, 161, 163, 545, 162, 519, 0, 164, 0,
	165, 166, 0, 224, 546, 547, 0, 0, 167, 520,
	521, 493, 168, 169, 170, 171, 0, 0, 172, 173,
	174, 513, 0, 175, 176, 177, 229, 548, 0, 178,
	0, 0, 0, 0, 179, 180, 181, 182, 471, 0,
	0, 499, 488, 489, 486, 487, 475, 0, 0, 467,
	468, 0, 0, 0, 0, 469, 72, 73, 476, 74,
	0, 0, 0, 0, 515, 481, 0, 0, 0, 75,
	76, 184, 529, 186, 530, 77, 531, 532, 0, 78,
	190, 191, 79, 496, 514, 533, 534, 194, 0, 525,
	0, 507, 0, 80, 81, 82, 0, 83, 0, 84,
	85, 86, 0, 375, 87, 1821, 0, 508, 510, 0,
	509, 511, 89, 90, 91, 92, 535, 93, 536, 537,
	0, 94, 0, 95, 0, 0, 0, 528, 97, 0,
	98, 0, 0, 0, 480, 99, 100, 516, 494, 0,
	0, 101, 102, 538, 0, 103, 0, 104, 0, 0,
	376, 0, 105, 526, 0, 203, 0, 106, 107, 522,
	524, 378, 0, 110, 0, 108, 0, 377, 109, 539,
	540, 541, 0, 506, 0, 379, 111, 380, 112, 113,
	0, 0, 527, 381, 114, 382, 0, 115, 0, 0,
	116, 0, 117, 118, 119, 120, 121, 383, 122, 123,
	126, 124, 470, 125, 495, 523, 127, 542, 128, 129,
	0, 0, 0, 0, 0, 130, 213, 384, 131, 385,
	517, 132, 133, 134, 0, 518, 135, 216, 136, 0,
	137, 138, 139, 543, 140, 141, 0, 143, 144, 142,
	145, 0, 146, 386, 147, 148, 484, 149, 0, 150,
	151, 152, 0, 219, 153, 154, 512, 155, 156, 387,
	157, 544, 221, 158, 0, 159, 160, 161, 163, 545,
	162, 519, 0, 164, 0, 165, 166, 0, 224, 546,
	547, 0, 0, 167, 520, 521, 493, 168, 169, 1820,
	171, 0, 0, 172, 173, 174, 513, 0, 175, 176,
	177, 229, 548, 0, 178, 0, 0, 0, 0, 179,
	180, 181, 182, 471, 0, 0, 499, 488, 489, 486,
	487, 475, 0, 0, 467, 468, 0, 0, 0, 0,
	469, 72, 73, 476, 74, 0, 0, 0, 0, 515,
	481, 0, 0, 0, 75, 76, 1819, 529, 186, 530,
	77, 531, 532, 0, 78, 190, 191, 79, 496, 514,
	533, 534, 194, 0, 525, 0, 507, 0, 80, 81,
	82, 0, 83, 0, 84, 85, 86, 0, 375, 87,
	1821, 0, 508, 510, 0, 509, 511, 89, 90, 91,
	92, 535, 93, 536, 537, 0, 94, 0, 95, 0,
	0, 0, 528, 97, 0, 98, 0, 0, 0, 480,
	99, 100, 516, 494, 0, 0, 101, 102, 538, 0,
	103, 0, 104, 0, 0, 376, 0, 105, 526, 0,
	203, 0, 106, 107, 522, 524, 378, 0, 110, 0,
	108, 0, 377, 109, 539, 540, 541, 0, 506, 0,
	379, 111, 380, 112, 113, 0, 0, 527, 381, 114,
	382, 0, 115, 0, 0, 116, 0, 117, 118, 119,
	120, 121, 383, 122, 123, 126, 124, 470, 125, 495,
	523, 127, 542, 128, 129, 0, 0, 0, 0, 0,
	130, 213, 384, 131, 385, 517, 132, 133, 134, 0,
	518, 135, 216, 136, 0, 137, 138, 139, 543, 140,
	141, 0, 143, 144, 142, 145, 0, 146, 386, 147,
	148, 484, 149, 0, 150, 151, 152, 0, 219, 153,
	154, 512, 155, 156, 387, 157, 544, 221, 158, 0,
	159, 160, 161, 163, 545, 162, 519, 0, 164, 0,
	165, 166, 0, 224, 546, 547, 0, 0, 167, 520,
	521, 493, 168, 169, 1820, 171, 0, 0, 172, 173,
	174, 513, 0, 175, 176, 177, 229, 548, 0, 178,
	0, 0, 0, 0, 179, 180, 181, 182, 471, 0,
	0, 499, 488, 489, 486, 487, 475, 0, 0, 467,
	468, 0, 0, 0, 0, 469, 72, 73, 476, 74,
	0, 0, 0, 0, 515, 481, 0, 0, 0, 75,
	76, 184, 529, 186, 530, 77, 531, 532, 0, 78,
	190, 191, 79, 496, 514, 533, 534, 194, 0, 525,
	0, 507, 0, 80, 81, 82, 0, 83, 0, 84,
	85, 86, 0, 375, 87, 88, 0, 508, 510, 0,
	509, 511, 89, 90, 91, 92, 535, 93, 536, 537,
	0, 94, 0, 95, 0, 0, 0, 528, 97, 0,
	98, 0, 0, 0, 480, 99, 100, 516, 494, 0,
	0, 101, 102, 538, 0, 103, 0, 104, 0, 0,
	376, 0, 105, 526, 0, 203, 0, 106, 107, 522,
	524, 378, 0, 110, 0, 108, 0, 377, 109, 539,
	540, 541, 0, 506, 0, 379, 111, 380, 112, 113,
	0, 0, 527, 381, 114, 382, 0, 115, 0, 0,
	116, 0, 117, 118, 119, 120, 121, 383, 122, 123,
	126, 124, 470, 125, 495, 523, 127, 542, 128, 129,
	0, 0, 0, 0, 0, 130, 213, 384, 131, 385,
	517, 132, 133, 134, 0, 518, 135, 216, 136, 0,
	137, 138, 139, 543, 140, 141, 0, 143, 144, 142,
	145, 0, 146, 386, 147, 148, 484, 149, 0, 150,
	151, 152, 0, 219, 153, 154, 512, 155, 156, 387,
	157, 544, 221, 158, 0, 159, 160, 161, 163, 545,
	162, 519, 0, 164, 0, 165, 166, 0, 224, 546,
	547, 0, 0, 167, 520, 521, 493, 168, 169, 170,
	171, 0, 0, 172, 173, 174, 513, 0, 175, 176,
	177, 229, 548, 0, 178, 0, 0, 0, 0, 179,
	180, 181, 182, 471, 0, 0, 499, 488, 489, 486,
	487, 475, 0, 0, 467, 468, 0, 0, 0, 0,
	469, 72, 73, 476, 74, 0, 0, 0, 0, 515,
	481, 0, 0, 0, 75, 76, 184, 529, 186, 530,
	77, 531, 532, 0, 78, 190, 191, 79, 496, 514,
	533, 534, 194, 0, 525, 0, 507, 0, 80, 81,
	82, 0, 83, 0, 84, 85, 86, 0, 375, 87,
	88, 0, 508, 510, 0, 509, 511, 89, 90, 91,
	92, 535, 93, 536, 537, 0, 94, 0, 95, 0,
	0, 0, 528, 97, 0, 98, 0, 0, 0, 480,
	99, 100, 516, 494, 0, 0, 101, 102, 538, 0,
	103, 0, 104, 0, 0, 376, 0, 105, 526, 0,
	203, 0, 106, 107, 522, 524, 378, 0, 110, 0,
	108, 0, 377, 109, 539, 540, 541, 0, 506, 0,
	379, 111, 380, 112, 113, 0, 0, 527, 381, 114,
	382, 0, 115, 0, 0, 116, 0, 117, 118, 119,
	120, 121, 383, 122, 123, 126, 124, 0, 125, 495,
	523, 127, 542, 128, 129, 0, 0, 0, 0, 0,
	130, 213, 384, 131, 385, 517, 132, 133, 134, 0,
	518, 135, 216, 136, 0, 137, 138, 139, 543, 140,
	141, 0, 143, 144, 142, 145, 0, 146, 386, 147,
	148, 1154, 149, 0, 150, 151, 152, 0, 219, 153,
	154, 512, 155, 156, 387, 157, 544, 221, 158, 0,
	159, 160, 161, 163, 545, 162, 519, 0, 164, 0,
	165, 166, 0, 224, 546, 547, 0, 0, 167, 520,
	521, 493, 168, 169, 170, 171, 0, 0, 172, 173,
	174, 513, 0, 175, 176, 177, 229, 548, 0, 178,
	0, 0, 0, 0, 179, 180, 181, 182, 499, 488,
	489, 486, 487, 475, 0, 0, 0, 0, 0, 1150,
	1151, 0, 0, 72, 73, 1152, 74, 0, 1153, 0,
	0, 515, 481, 0, 0, 0, 75, 76, 0, 529,
	186, 530, 77, 531, 532, 0, 78, 190, 191, 79,
	496, 514, 533, 534, 194, 0, 525, 0, 507, 0,
	80, 81, 82, 0, 83, 0, 84, 85, 86, 0,
	375, 87, 1821, 0, 508, 510, 0, 509, 511, 89,
	90, 91, 92, 535, 93, 536, 537, 0, 94, 0,
	95, 0, 0, 0, 528, 97, 0, 98, 0, 0,
	0, 480, 99, 100, 516, 494, 0, 0, 101, 102,
	538, 0, 103, 0, 104, 0, 0, 376, 0, 105,
	526, 0, 203, 0, 106, 107, 522, 524, 0, 0,
	110, 0, 108, 0, 377, 109, 539, 540, 541, 0,
	506, 0, 0, 111, 380, 112, 113, 0, 0, 527,
	381, 114, 0, 0, 115, 0, 0, 116, 0, 117,
	118, 119, 120, 121, 383, 122, 123, 126, 124, 470,
	125, 495, 523, 127, 542, 128, 129, 0, 0, 0,
	0, 0, 130, 213, 384, 131, 385, 517, 132, 133,
	134, 0, 518, 135, 216, 136, 0, 137, 138, 139,
	543, 140, 141, 0, 143, 144, 142, 145, 0, 146,
	386, 147, 148, 484, 149, 0, 150, 151, 152, 0,
	219, 153, 154, 512, 155, 156, 0, 157, 544, 221,
	158, 0, 159, 160, 161, 163, 545, 162, 519, 0,
	164, 0, 165, 166, 0, 224, 546, 547, 0, 0,
	167, 520, 521, 493, 168, 169, 1820, 171, 0, 0,
	172, 173, 174, 513, 0, 175, 176, 177, 229, 548,
	0, 178, 0, 0, 0, 0, 179, 180, 181, 182,
	499, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 467, 468, 0, 0, 72, 73, 469, 74, 0,
	476, 0, 0, 515, 0, 0, 0, 0, 75, 76,
	184, 185, 186, 187, 77, 188, 189, 0, 78, 190,
	191, 79, 0, 514, 192, 193, 194, 0, 525, 0,
	507, 0, 80, 81, 82, 0, 83, 0, 84, 85,
	86, 0, 375, 87, 88, 0, 508, 510, 0, 509,
	511, 89, 90, 91, 92, 196, 93, 197, 198, 0,
	94, 0, 95, 0, 0, 0, 96, 97, 0, 98,
	0, 0, 0, 199, 99, 100, 516, 0, 0, 0,
	101, 102, 201, 0, 103, 0, 104, 0, 0, 376,
	0, 105, 526, 0, 203, 0, 106, 107, 522, 524,
	378, 0, 110, 0, 108, 0, 377, 109, 206, 207,
	208, 0, 209, 0, 379, 111, 380, 112, 113, 0,
	0, 527, 381, 114, 382, 0, 115, 0, 0, 116,
	0, 117, 118, 119, 120, 121, 383, 122, 123, 126,
	124, 0, 125, 0, 523, 127, 212, 128, 129, 0,
	0, 0, 0, 0, 130, 213, 384, 131, 385, 517,
	132, 133, 134, 0, 518, 135, 216, 136, 0, 137,
	138, 139, 217, 140, 141, 0, 143, 144, 142, 145,
	0, 146, 386, 147, 148, 218, 149, 0, 150, 151,
	152, 0, 219, 153, 154, 512, 155, 156, 387, 157,
	220, 221, 158, 0, 159, 160, 161, 163, 222, 162,
	519, 0, 164, 0, 165, 166, 0, 224, 225, 226,
	0, 0, 167, 520, 521, 0, 168, 169, 170, 171,
	0, 0, 172, 173, 174, 513, 0, 175, 176, 177,
	229, 230, 0, 178, 0, 369, 0, 0, 179, 180,
	181, 182, 0, 0, 0, 0, 0, 0, 0, 0,
	72, 73, 0, 74, 0, 0, 0, 0, 183, 0,
	0, 0, 1592, 75, 76, 184, 185, 186, 187, 77,
	188, 189, 0, 78, 190, 191, 79, 0, 0, 192,
	193, 194, 0, 195, 0, 374, 0, 80, 81, 82,
	0, 83, 0, 84, 85, 86, 0, 375, 87, 88,
	0, 0, 0, 0, 0, 0, 89, 90, 91, 92,
	196, 93, 197, 198, 0, 94, 0, 95, 0, 0,
	0, 96, 97, 0, 98, 0, 0, 0, 199, 99,
	100, 200, 0, 0, 0, 101, 102, 201, 0, 103,
	0, 104, 0, 0, 376, 0, 105, 202, 0, 203,
	0, 106, 107, 204, 205, 378, 0, 110, 0, 108,
	0, 377, 109, 206, 207, 208, 0, 209, 0, 379,
	111, 380, 112, 113, 0, 0, 210, 381, 114, 382,
	0, 115, 0, 0, 116, 0, 117, 118, 119, 120,
	121, 383, 122, 123, 126, 124, 0, 125, 0, 211,
	127, 212, 128, 129, 0, 0, 0, 0, 0, 130,
	213, 384, 131, 385, 214, 132, 133, 134, 0, 215,
	135, 216, 136, 0, 137, 138, 139, 217, 140, 141,
	0, 143, 144, 142, 145, 0, 146, 386, 147, 148,
	218, 149, 0, 150, 151, 152, 59, 219, 153, 154,
	0, 155, 156, 387, 157, 220, 221, 158, 0, 159,
	160, 161, 163, 222, 162, 223, 0, 164, 61, 165,
	166, 0, 224, 225, 226, 0, 0, 167, 227, 228,
	0, 168, 169, 170, 171, 0, 0, 172, 173, 174,
	0, 0, 175, 176, 177, 373, 230, 0, 178, 0,
	0, 0, 57, 179, 180, 181, 182, 0, 58, 0,
	369, 764, 0, 765, 760, 755, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 72, 73, 56, 74, 0,
	0, 0, 0, 183, 0, 0, 0, 0, 75, 76,
	184, 185, 186, 187, 77, 188, 189, 0, 78, 190,
	191, 79, 0, 0, 192, 193, 194, 0, 195, 0,
	374, 0, 80, 81, 82, 0, 83, 0, 84, 85,
	86, 0, 375, 87, 88, 0, 0, 0, 0, 0,
	0, 89, 90, 91, 92, 196, 93, 197, 198, 768,
	94, 0, 95, 0, 0, 0, 96, 97, 0, 98,
	0, 0, 0, 199, 99, 100, 200, 757, 0, 0,
	101, 102, 201, 0, 103, 0, 104, 0, 0, 376,
	0, 105, 202, 0, 203, 0, 106, 107, 204, 205,
	378, 0, 110, 0, 108, 0, 377, 109, 206, 207,
	208, 0, 209, 0, 379, 111, 380, 112, 113, 0,
	0, 210, 381, 114, 382, 0, 115, 0, 0, 116,
	0, 117, 118, 119, 120, 121, 383, 122, 123, 126,
	124, 0, 125, 0, 211, 127, 212, 128, 129, 0,
	758, 0, 0, 0, 130, 213, 384, 131, 385, 214,
	132, 133, 134, 0, 215, 135, 216, 136, 0, 137,
	138, 139, 217, 140, 141, 0, 143, 144, 142, 145,
	0, 146, 386, 147, 148, 218, 149, 0, 150, 151,
	152, 0, 219, 153, 154, 0, 155, 156, 387, 157,
	220, 221, 158, 0, 159, 160, 161, 163, 222, 162,
	223, 0, 164, 0, 165, 166, 0, 224, 225, 226,
	0, 0, 167, 227, 228, 756, 168, 169, 170, 171,
	0, 0, 172, 173, 174, 0, 0, 175, 176, 177,
	229, 230, 0, 178, 0, 0, 0, 0, 179, 180,
	181, 182, 369, 764, 0, 765, 760, 755, 0, 0,
	0, 0, 0, 766, 761, 0, 0, 72, 73, 0,
	74, 0, 0, 0, 0, 183, 0, 0, 0, 0,
	75, 76, 184, 185, 186, 187, 77, 188, 189, 0,
	78, 190, 191, 79, 0, 0, 192, 193, 194, 0,
	195, 0, 374, 0, 80, 81, 82, 0, 83, 0,
	84, 85, 86, 0, 375, 87, 88, 0, 0, 0,
	0, 0, 0, 89, 90, 91, 92, 196, 93, 197,
	198, 751, 94, 0, 95, 0, 0, 0, 96, 97,
	0, 98, 0, 0, 0, 199, 99, 100, 200, 757,
	0, 0, 101, 102, 201, 0, 103, 0, 104, 0,
	0, 376, 0, 105, 202, 0, 203, 0, 106, 107,
	204, 205, 378, 0, 110, 0, 108, 0, 377, 109,
	206, 207, 208, 0, 209, 0, 379, 111, 380, 112,
	113, 0, 0, 210, 381, 114, 382, 0, 115, 0,
	0, 116, 0, 117, 118, 119, 120, 121, 383, 122,
	123, 126, 124, 0, 125, 0, 211, 127, 212, 128,
	129, 0, 758, 0, 0, 0, 130, 213, 384, 131,
	385, 214, 132, 133, 134, 0, 215, 135, 216, 136,
	0, 137, 138, 139, 217, 140, 141, 0, 143, 144,
	142, 145, 0, 146, 386, 147, 148, 218, 149, 0,
	150, 151, 152, 0, 219, 153, 154, 0, 155, 156,
	387, 157, 220, 221, 158, 0, 159, 160, 161, 163,
	222, 162, 223, 0, 164, 0, 165, 166, 0, 224,
	225, 226, 0, 0, 167, 227, 228, 756, 168, 169,
	170, 171, 0, 0, 172, 173, 174, 0, 0, 175,
	176, 177, 229, 230, 0, 178, 0, 0, 0, 0,
	179, 180, 181, 182, 369, 764, 0, 765, 760, 755,
	0, 0, 0, 0, 0, 766, 761, 0, 0, 72,
	73, 0, 74, 0, 0, 0, 0, 183, 0, 0,
	0, 0, 75, 76, 184, 185, 186, 187, 77, 188,
	189, 0, 78, 190, 191, 79, 0, 0, 192, 193,
	194, 0, 195, 0, 374, 0, 80, 81, 82, 0,
	83, 0, 84, 85, 86, 0, 375, 87, 88, 0,
	0, 0, 0, 0, 0, 89, 90, 91, 92, 196,
	93, 197, 198, 0, 94, 0, 95, 0, 0, 0,
	96, 97, 0, 98, 0, 0, 0, 199, 99, 100,
	200, 757, 0, 0, 101, 102, 201, 0, 103, 0,
	104, 0, 0, 376, 0, 105, 202, 0, 203, 0,
	106, 107, 204, 205, 378, 0, 110, 0, 108, 0,
	377, 109, 206, 207, 208, 0, 209, 0, 379, 111,
	380, 112, 113, 0, 0, 210, 381, 114, 382, 0,
	115, 0, 0, 116, 0, 117, 118, 119, 120, 121,
	383, 122, 123, 126, 124, 0, 125, 0, 211, 127,
	212, 128, 129, 0, 758, 0, 0, 0, 130, 213,
	384, 131, 385, 214, 132, 133, 134, 0, 215, 135,
	216, 136, 0, 137, 138, 139, 217, 140, 141, 0,
	143, 144, 142, 145, 0, 146, 386, 147, 148, 218,
	149, 0, 150, 151, 152, 0, 219, 153, 154, 0,
	155, 156, 387, 157, 220, 221, 158, 0, 159, 160,
	161, 163, 222, 162, 223, 0, 164, 0, 165, 166,
	0, 224, 225, 226, 0, 0, 167, 227, 228, 756,
	168, 169, 170, 171, 0, 0, 172, 173, 174, 0,
	0, 175, 176, 177, 229, 230, 69, 178, 0, 0,
	0, 0, 179, 180, 181, 182, 0, 0, 0, 0,
	0, 72, 73, 0, 74, 0, 0, 766, 761, 183,
	0, 0, 0, 0, 75, 76, 184, 185, 186, 187,
	77, 188, 189, 0, 78, 190, 191, 79, 0, 0,
	192, 193, 194, 0, 195, 0, 0, 0, 80, 81,
	82, 0, 83, 0, 84, 85, 86, 0, 0, 87,
	88, 0, 0, 0, 0, 0, 0, 89, 90, 91,
	92, 196, 93, 197, 198, 0, 94, 0, 95, 0,
	0, 0, 96, 97, 0, 98, 0, 0, 0, 199,
	99, 100, 200, 0, 0, 0, 101, 102, 201, 0,
	103, 0, 104, 0, 0, 0, 0, 105, 202, 0,
	203, 0, 106, 107, 204, 205, 0, 0, 110, 0,
	108, 0, 0, 109, 206, 207, 208, 0, 209, 0,
	0, 111, 0, 112, 113, 0, 0, 210, 0, 114,
	0, 0, 115, 0, 0, 116, 0, 117, 118, 119,
	120, 121, 0, 122, 123, 126, 124, 0, 125, 0,
	211, 127, 212, 128, 129, 0, 0, 335, 0, 0,
	130, 213, 0, 131, 0, 214, 132, 133, 134, 0,
	215, 135, 216, 136, 0, 137, 138, 139, 217, 140,
	141, 0, 143, 144, 142, 145, 0, 146, 0, 147,
	148, 218, 149, 0, 150, 151, 152, 59, 219, 153,
	154, 0, 155, 156, 0, 157, 220, 221, 158, 0,
	159, 160, 161, 163, 222, 162, 223, 0, 164, 61,
	165, 166, 0, 224, 225, 226, 0, 0, 167, 227,
	228, 0, 168, 169, 170, 171, 0, 0, 172, 173,
	174, 0, 0, 175, 176, 177, 373, 230, 0, 178,
	0, 69, 0, 57, 179, 180, 181, 182, 0, 58,
	0, 0, 0, 0, 0, 0, 72, 73, 0, 74,
	0, 0, 0, 0, 183, 0, 0, 0, 1055, 75,
	76, 184, 185, 186, 187, 77, 188, 189, 0, 78,
	190, 191, 79, 0, 0, 192, 193, 194, 0, 195,
	0, 0, 0, 80, 81, 82, 0, 83, 0, 84,
	85, 86, 0, 0, 87, 88, 0, 0, 0, 0,
	0, 0, 89, 90, 91, 92, 196, 93, 197, 198,
	0, 94, 0, 95, 0, 0, 0, 96, 97, 0,
	98, 0, 0, 0, 199, 99, 100, 200, 0, 0,
	0, 101, 102, 201, 0, 103, 0, 104, 0, 0,
	0, 0, 105, 202, 0, 203, 0, 106, 107, 204,
	205, 0, 0, 110, 0, 108, 0, 0, 109, 206,
	207, 208, 0, 209, 0, 0, 111, 0, 112, 113,
	0, 0, 210, 0, 114, 0, 0, 115, 0, 0,
	116, 0, 117, 118, 119, 120, 121, 0, 122, 123,
	126, 124, 0, 125, 0, 211, 127, 212, 128, 129,
	0, 0, 0, 0, 0, 130, 213, 0, 131, 0,
	214, 132, 133, 134, 0, 215, 135, 216, 136, 0,
	137, 138, 139, 217, 140, 141, 0, 143, 144, 142,
	145, 0, 146, 0, 147, 148, 218, 149, 0, 150,
	151, 152, 59, 219, 153, 154, 0, 155, 156, 0,
	157, 220, 221, 158, 0, 159, 160, 161, 163, 222,
	162, 223, 0, 164, 61, 165, 166, 0, 224, 225,
	226, 0, 0, 167, 227, 228, 0, 168, 169, 170,
	171, 0, 0, 172, 173, 174, 0, 0, 175, 176,
	177, 373, 230, 0, 178, 0, 69, 0, 57, 179,
	180, 181, 182, 0, 58, 0, 0, 0, 0, 0,
	0, 72, 73, 0, 74, 0, 0, 0, 0, 183,
	0, 1278, 0, 56, 75, 76, 184, 185, 186, 187,
	77, 188, 189, 0, 78, 190, 191, 79, 0, 0,
	192, 193, 194, 0, 195, 0, 0, 0, 80, 81,
	82, 0, 83, 0, 84, 85, 86, 0, 0, 87,
	88, 0, 0, 0, 0, 0, 0, 89, 90, 91,
	92, 196, 93, 197, 198, 0, 94, 0, 95, 0,
	0, 0, 96, 97, 0, 98, 0, 0, 0, 199,
	99, 100, 200, 0, 0, 0, 101, 102, 201, 0,
	103, 0, 104, 0, 0, 0, 0, 105, 202, 0,
	203, 0, 106, 107, 204, 205, 0, 0, 110, 0,
	108, 0, 0, 109, 206, 207, 208, 0, 209, 0,
	0, 111, 0, 112, 113, 0, 0, 210, 0, 114,
	0, 0, 115, 0, 0, 116, 0, 117, 118, 119,
	120, 121, 0, 122, 123, 126, 124, 0, 125, 0,
	211, 127, 212, 128, 129, 0, 0, 0, 0, 0,
	130, 213, 0, 131, 0, 214, 132, 133, 134, 0,
	215, 135, 216, 136, 0, 137, 138, 139, 217, 140,
	141, 0, 143, 144, 142, 145, 0, 146, 0, 147,
	148, 218, 149, 0, 150, 151, 152, 0, 219, 153,
	154, 0, 155, 156, 0, 157, 220, 221, 158, 0,
	159, 160, 161, 163, 222, 162, 223, 0, 164, 0,
	165, 166, 0, 224, 225, 226, 0, 0, 167, 227,
	228, 0, 168, 169, 170, 171, 0, 0, 172, 173,
	174, 0, 0, 175, 176, 177, 229, 230, 0, 178,
	0, 0, 69, 0, 179, 180, 181, 182, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 72, 73, 0,
	74, 0, 0, 0, 0, 183, 0, 0, 0, 457,
	75, 76, 184, 185, 186, 187, 77, 188, 189, 0,
	78, 190, 191, 79, 0, 0, 192, 193, 194, 0,
	195, 0, 0, 0, 80, 81, 82, 0, 83, 0,
	84, 85, 86, 0, 0, 87, 88, 0, 0, 0,
	0, 0, 0, 89, 90, 91, 92, 196, 93, 197,
	198, 0, 94, 0, 95, 0, 0, 0, 96, 97,
	0, 98, 0, 0, 0, 199, 99, 100, 200, 0,
	0, 0, 101, 102, 201, 0, 103, 0, 104, 0,
	0, 0, 0, 105, 202, 0, 203, 0, 106, 107,
	204, 205, 0, 0, 110, 0, 108, 0, 0, 109,
	206, 207, 208, 0, 209, 0, 0, 111, 0, 112,
	113, 0, 0, 210, 0, 114, 0, 0, 115, 0,
	0, 116, 0, 117, 118, 119, 120, 121, 0, 122,
	123, 126, 124, 0, 125, 0, 211, 127, 212, 128,
	129, 0, 0, 335, 0, 0, 130, 213, 0, 131,
	0, 214, 132, 133, 134, 0, 215, 135, 216, 136,
	0, 137, 138, 139, 217, 140, 141, 0, 143, 144,
	142, 145, 0, 146, 0, 147, 148, 218, 149, 0,
	150, 151, 152, 0, 219, 153, 154, 0, 155, 156,
	0, 157, 220, 221, 158, 0, 159, 160, 161, 163,
	222, 162, 223, 0, 164, 0, 165, 166, 0, 224,
	225, 226, 0, 0, 167, 227, 228, 0, 168, 169,
	170, 171, 0, 0, 172, 173, 174, 0, 0, 175,
	176, 177, 229, 230, 0, 178, 0, 69, 0, 0,
	179, 180, 181, 182, 0, 0, 0, 0, 0, 0,
	0, 0, 72, 73, 0, 74, 0, 0, 0, 0,
	183, 0, 0, 0, 1055, 75, 76, 184, 185, 186,
	187, 77, 188, 189, 0, 78, 190, 191, 79, 0,
	0, 192, 193, 194, 0, 195, 0, 0, 0, 80,
	81, 82, 0, 83, 0, 84, 85, 86, 0, 0,
	87, 88, 0, 0, 0, 0, 0, 0, 89, 90,
	91, 92, 196, 93, 197, 198, 0, 94, 0, 95,
	0, 0, 0, 96, 97, 0, 98, 0, 0, 0,
	199, 99, 100, 200, 0, 0, 0, 101, 102, 201,
	0, 103, 0, 104, 0, 0, 0, 0, 105, 202,
	0, 203, 0, 106, 107, 204, 205, 0, 0, 110,
	0, 108, 0, 0, 109, 206, 207, 208, 0, 209,
	0, 0, 111, 0, 112, 113, 0, 0, 210, 0,
	114, 0, 0, 115, 0, 0, 116, 0, 117, 118,
	119, 120, 121, 0, 122, 123, 126, 124, 0, 125,
	0, 211, 127, 212, 128, 129, 0, 0, 0, 0,
	0, 130, 213, 0, 131, 0, 214, 132, 133, 134,
	0, 215, 135, 216, 136, 0, 137, 138, 139, 217,
	140, 141, 0, 143, 144, 142, 145, 0, 146, 0,
	147, 148, 218, 149, 0, 150, 151, 152, 0, 219,
	153, 154, 0, 155, 156, 0, 157, 220, 221, 158,
	0, 159, 160, 161, 163, 222, 162, 223, 0, 164,
	0, 165, 166, 0, 224, 225, 226, 0, 0, 167,
	227, 228, 0, 168, 169, 170, 171, 0, 0, 172,
	173, 174, 0, 0, 175, 176, 177, 229, 230, 0,
	178, 0, 0, 69, 0, 179, 180, 181, 182, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 72, 73,
	0, 74, 0, 0, 0, 0, 183, 0, 0, 0,
	577, 75, 76, 184, 185, 186, 187, 77, 188, 189,
	0, 78, 190, 191, 79, 0, 0, 192, 193, 194,
	0, 195, 0, 0, 0, 80, 81, 82, 0, 83,
	0, 84, 85, 86, 0, 0, 87, 88, 0, 0,
	0, 0, 0, 0, 89, 90, 91, 92, 196, 93,
	197, 198, 0, 94, 0, 95, 0, 0, 0, 96,
	97, 0, 98, 0, 0, 0, 199, 99, 100, 200,
	0, 0, 0, 101, 102, 201, 0, 103, 0, 104,
	0, 0, 0, 0, 105, 202, 0, 203, 0, 106,
	107, 204, 205, 0, 0, 110, 0, 108, 0, 0,
	109, 206, 207, 208, 0, 209, 0, 0, 111, 0,
	112, 113, 0, 0, 210, 0, 114, 0, 0, 115,
	0, 0, 116, 0, 117, 118, 119, 120, 121, 0,
	122, 123, 126, 124, 0, 125, 0, 211, 127, 212,
	128, 129, 0, 0, 0, 0, 0, 130, 213, 0,
	131, 0, 214, 132, 133, 134, 0, 215, 135, 216,
	136, 0, 137, 138, 139, 217, 140, 141, 0, 143,
	144, 142, 145, 0, 146, 0, 147, 148, 218, 149,
	0, 150, 151, 152, 0, 219, 153, 154, 0, 155,
	156, 0, 157, 220, 221, 158, 0, 159, 160, 161,
	163, 222, 162, 223, 0, 164, 0, 165, 166, 0,
	224, 225, 226, 0, 0, 167, 227, 228, 0, 168,
	169, 170, 171, 0, 0, 172, 173, 174, 0, 0,
	175, 176, 177, 229, 230, 0, 178, 0, 69, 0,
	0, 179, 180, 181, 182, 0, 0, 0, 0, 0,
	0, 0, 0, 72, 73, 0, 74, 0, 0, 0,
	0, 183, 0, 0, 0, 965, 75, 76, 184, 185,
	186, 187, 77, 188, 189, 0, 78, 190, 191, 79,
	0, 0, 192, 193, 194, 0, 195, 0, 0, 0,
	80, 81, 82, 0, 83, 0, 84, 85, 86, 0,
	0, 87, 88, 0, 0, 0, 0, 0, 0, 89,
	90, 91, 92, 196, 93, 197, 198, 0, 94, 0,
	95, 0, 0, 0, 96, 97, 0, 98, 0, 0,
	0, 199, 99, 100, 200, 0, 0, 0, 101, 102,
	201, 0, 103, 0, 104, 0, 0, 0, 0, 105,
	202, 0, 203, 0, 106, 107, 204, 205, 0, 0,
	110, 0, 108, 0, 0, 109, 206, 207, 208, 0,
	209, 0, 0, 111, 0, 112, 113, 0, 0, 210,
	0, 114, 0, 0, 115, 0, 0, 116, 0, 117,
	118, 119, 120, 121, 0, 122, 123, 126, 124, 0,
	125, 0, 211, 127, 212, 128, 129, 0, 0, 0,
	0, 0, 130, 213, 0, 131, 0, 214, 132, 133,
	134, 0, 215, 135, 216, 136, 0, 137, 138, 139,
	217, 140, 141, 0, 143, 144, 142, 145, 0, 146,
	0, 147, 148, 218, 149, 0, 150, 151, 152, 0,
	219, 153, 154, 0, 155, 156, 0, 157, 220, 221,
	158, 0, 159, 160, 161, 163, 222, 162, 223, 0,
	164, 0, 165, 166, 0, 224, 225, 226, 0, 0,
	167, 227, 228, 0, 168, 169, 170, 171, 0, 0,
	172, 173, 174, 0, 0, 175, 176, 177, 229, 230,
	0, 178, 0, 69, 0, 0, 179, 180, 181, 182,
	0, 0, 0, 0, 0, 0, 0, 0, 72, 73,
	0, 74, 0, 0, 0, 0, 183, 0, 0, 0,
	1493, 75, 76, 184, 185, 186, 187, 77, 188, 189,
	0, 78, 190, 191, 79, 0, 0, 192, 193, 194,
	0, 195, 0, 0, 0, 80, 81, 82, 0, 83,
	0, 84, 85, 86, 0, 0, 87, 88, 0, 0,
	0, 0, 0, 0, 89, 90, 91, 92, 196, 93,
	197, 198, 0, 94, 0, 95, 0, 0, 0, 96,
	97, 0, 98, 0, 0, 0, 199, 99, 100, 200,
	0, 0, 0, 101, 102, 201, 0, 103, 0, 104,
	0, 0, 0, 0, 105, 202, 0, 203, 0, 106,
	107, 204, 205, 0, 0, 110, 0, 108, 0, 0,
	109, 206, 207, 208, 0, 209, 0, 0, 111, 0,
	112, 113, 0, 0, 210, 0, 114, 0, 0, 115,
	0, 0, 116, 0, 117, 118, 119, 120, 121, 0,
	122, 123, 126, 124, 0, 125, 0, 211, 127, 212,
	128, 129, 0, 0, 0, 0, 0, 130, 213, 0,
	131, 0, 214, 132, 133, 134, 0, 215, 135, 216,
	136, 0, 137, 138, 139, 217, 140, 141, 0, 143,
	144, 142, 145, 0, 146, 0, 147, 148, 218, 149,
	0, 150, 151, 152, 0, 219, 153, 154, 0, 155,
	156, 0, 157, 220, 221, 158, 0, 159, 160, 161,
	163, 222, 162, 223, 0, 164, 0, 165, 166, 0,
	224, 225, 226, 0, 0, 167, 227, 228, 0, 168,
	169, 170, 171, 0, 0, 172, 173, 174, 0, 0,
	175, 176, 177, 229, 230, 0, 178, 0, 69, 0,
	0, 179, 180, 181, 182, 0, 0, 0, 0, 0,
	0, 0, 0, 72, 73, 0, 74, 0, 0, 0,
	0, 183, 0, 0, 0, 559, 75, 76, 184, 185,
	186, 187, 77, 188, 189, 0, 78, 190, 191, 79,
	0, 0, 192, 193, 194, 0, 195, 0, 0, 0,
	80, 81, 82, 0, 83, 0, 84, 85, 86, 0,
	0, 87, 88, 0, 0, 0, 0, 0, 0, 89,
	90, 735, 92, 196, 93, 197, 198, 0, 94, 0,
	95, 0, 0, 0, 96, 97, 0, 98, 0, 0,
	0, 199, 99, 100, 200, 0, 0, 0, 101, 102,
	201, 0, 103, 0, 104, 0, 0, 0, 0, 105,
	202, 0, 203, 0, 106, 107, 204, 205, 0, 0,
	110, 0, 108, 0, 0, 109, 206, 207, 208, 0,
	209, 0, 0, 111, 0, 112, 113, 0, 0, 210,
	0, 114, 0, 0, 115, 0, 0, 116, 0, 117,
	118, 119, 120, 121, 0, 122, 123, 126, 124, 0,
	125, 0, 211, 127, 212, 128, 129, 0, 0, 0,
	0, 0, 130, 213, 0, 131, 0, 214, 132, 133,
	134, 0, 215, 135, 216, 136, 0, 137, 138, 139,
	217, 140, 141, 0, 143, 144, 142, 145, 0, 146,
	0, 147, 148, 218, 149, 0, 150, 151, 152, 0,
	219, 153, 154, 0, 155, 156, 0, 157, 220, 221,
	158, 0, 159, 160, 161, 163, 222, 162, 223, 0,
	164, 734, 165, 166, 0, 224, 225, 226, 0, 0,
	167, 227, 228, 0, 168, 169, 170, 171, 0, 0,
	172, 173, 174, 0, 0, 175, 176, 177, 229, 230,
	0, 178, 69, 0, 0, 0, 179, 180, 181, 182,
	0, 0, 0, 0, 0, 0, 0, 72, 73, 0,
	74, 0, 0, 738, 0, 183, 0, 0, 0, 0,
	75, 76, 184, 185, 186, 187, 77, 188, 189, 0,
	78, 190, 191, 79, 0, 0, 192, 193, 194, 0,
	195, 0, 0, 0, 80, 81, 82, 0, 83, 0,
	84, 85, 86, 0, 0, 87, 88, 0, 0, 0,
	0, 0, 0, 89, 90, 91, 92, 196, 93, 197,
	198, 0, 94, 0, 95, 0, 0, 0, 96, 97,
	0, 98, 0, 0, 0, 199, 99, 100, 200, 0,
	0, 0, 101, 102, 201, 0, 103, 0, 104, 0,
	0, 0, 0, 105, 202, 0, 203, 0, 106, 107,
	204, 205, 0, 0, 110, 0, 108, 0, 0, 109,
	206, 207, 208, 0, 209, 0, 0, 111, 0, 112,
	113, 0, 0, 210, 0, 114, 0, 0, 115, 0,
	0, 116, 0, 117, 118, 119, 120, 121, 0, 122,
	123, 126, 124, 0, 125, 0, 211, 127, 212, 128,
	129, 0, 0, 0, 0, 0, 130, 213, 0, 131,
	0, 214, 132, 133, 134, 0, 215, 135, 216, 136,
	0, 137, 138, 139, 217, 140, 141, 0, 143, 144,
	142, 145, 0, 146, 0, 147, 148, 218, 149, 0,
	150, 151, 152, 0, 219, 153, 154, 0, 155, 156,
	0, 157, 220, 221, 158, 0, 159, 160, 161, 163,
	222, 162, 223, 0, 164, 0, 165, 166, 0, 224,
	225, 226, 0, 0, 167, 227, 228, 0, 168, 169,
	170, 171, 0, 0, 172, 173, 174, 0, 0, 175,
	176, 177, 229, 230, 0, 178, 369, 0, 0, 0,
	179, 180, 181, 182, 0, 0, 0, 0, 0, 0,
	0, 72, 73, 0, 74, 0, 0, 738, 0, 183,
	0, 0, 0, 0, 75, 76, 184, 185, 186, 187,
	77, 188, 189, 0, 78, 190, 191, 79, 0, 0,
	192, 193, 194, 0, 195, 0, 374, 0, 80, 81,
	82, 0, 83, 0, 84, 85, 86, 0, 375, 87,
	88, 0, 0, 0, 0, 0, 0, 89, 90, 91,
	92, 196, 93, 197, 198, 0, 94, 0, 95, 0,
	0, 0, 96, 97, 0, 98, 0, 0, 0, 199,
	99, 100, 200, 0, 0, 0, 101, 102, 201, 0,
	103, 0, 104, 0, 0, 376, 0, 105, 202, 0,
	203, 0, 106, 107, 204, 205, 378, 0, 110, 0,
	108, 0, 377, 109, 206, 207, 208, 0, 209, 0,
	379, 111, 380, 112, 113, 0, 0, 210, 381, 114,
	382, 0, 115, 0, 0, 116, 0, 117, 118, 119,
	120, 121, 383, 122, 123, 126, 124, 0, 125, 0,
	211, 127, 212, 128, 129, 0, 0, 0, 0, 0,
	130, 213, 384, 131, 385, 214, 132, 133, 134, 0,
	215, 135, 216, 136, 0, 137, 138, 139, 217, 140,
	141, 0, 143, 144, 142, 145, 0, 146, 386, 147,
	148, 218, 149, 0, 150, 151, 152, 0, 219, 153,
	154, 0, 155, 156, 387, 157, 220, 221, 158, 0,
	159, 160, 161, 163, 222, 162, 223, 0, 164, 0,
	165, 166, 0, 224, 225, 226, 0, 0, 167, 227,
	228, 0, 168, 169, 170, 171, 0, 0, 172, 173,
	174, 0, 0, 175, 176, 177, 229, 230, 69, 178,
	0, 0, 0, 0, 179, 180, 181, 182, 0, 0,
	0, 0, 0, 72, 73, 0, 74, 0, 0, 0,
	0, 183, 0, 0, 0, 0, 75, 76, 184, 185,
	186, 187, 77, 188, 189, 0, 78, 190, 191, 79,
	0, 0, 192, 193, 194, 933, 195, 0, 0, 0,
	80, 81, 82, 0, 83, 931, 84, 85, 86, 0,
	0, 87, 88, 0, 0, 0, 0, 0, 0, 89,
	90, 91, 92, 196, 93, 197, 198, 0, 94, 0,
	95, 0, 0, 0, 96, 97, 0, 98, 0, 0,
	0, 199, 99, 100, 200, 0, 1031, 0, 101, 102,
	201, 0, 103, 0, 104, 936, 0, 0, 0, 105,
	202, 0, 203, 0, 106, 107, 204, 205, 0, 0,
	110, 1029, 108, 0, 0, 109, 206, 207, 208, 0,
	209, 0, 0, 111, 0, 112, 113, 0, 0, 210,
	0, 114, 0, 0, 115, 0, 0, 116, 0, 117,
	118, 119, 120, 121, 0, 122, 123, 126, 124, 0,
	125, 0, 211, 127, 212, 128, 129, 0, 0, 0,
	0, 0, 130, 213, 0, 131, 0, 214, 132, 133,
	134, 0, 215, 135, 216, 136, 935, 137, 138, 139,
	217, 140, 141, 0, 143, 144, 142, 145, 0, 146,
	0, 147, 148, 218, 149, 0, 150, 151, 152, 0,
	219, 153, 154, 0, 155, 156, 0, 157, 220, 221,
	158, 0, 159, 160, 161, 163, 222, 162, 223, 0,
	164, 0, 165, 166, 0, 224, 225, 226, 0, 0,
	167, 227, 228, 0, 168, 169, 170, 171, 0, 1030,
	172, 173, 174, 0, 0, 175, 176, 177, 229, 230,
	69, 178, 0, 0, 0, 0, 179, 180, 181, 182,
	0, 0, 0, 0, 0, 72, 73, 0, 74, 0,
	0, 0, 0, 183, 0, 0, 0, 0, 75, 76,
	184, 185, 186, 187, 77, 188, 189, 0, 78, 190,
	191, 79, 0, 0, 192, 193, 194, 933, 195, 0,
	0, 928, 80, 81, 82, 0, 83, 931, 84, 85,
	86, 0, 0, 87, 88, 0, 0, 0, 0, 0,
	0, 89, 90, 91, 92, 196, 93, 197, 198, 0,
	94, 0, 95, 0, 0, 0, 96, 97, 0, 98,
	0, 0, 0, 199, 99, 100, 200, 0, 0, 0,
	101, 102, 201, 0, 103, 0, 104, 936, 0, 0,
	0, 105, 202, 0, 203, 0, 106, 107, 927, 205,
	0, 0, 110, 0, 108, 0, 0, 109, 206, 207,
	208, 0, 209, 0, 0, 111, 0, 112, 113, 0,
	0, 210, 0, 114, 0, 0, 115, 0, 0, 116,
	0, 117, 118, 119, 120, 121, 0, 122, 123, 126,
	124, 0, 125, 0, 211, 127, 212, 128, 129, 0,
	0, 0, 0, 0, 130, 213, 0, 131, 0, 214,
	132, 133, 134, 0, 215, 135, 216, 136, 935, 137,
	138, 139, 217, 140, 141, 0, 143, 144, 142, 145,
	0, 146, 0, 147, 148, 218, 149, 0, 150, 151,
	152, 0, 219, 153, 154, 0, 155, 156, 0, 157,
	220, 221, 158, 0, 159, 160, 161, 163, 222, 162,
	223, 0, 164, 0, 165, 166, 0, 224, 225, 226,
	0, 0, 167, 227, 228, 0, 168, 169, 170, 171,
	0, 934, 172, 173, 174, 0, 0, 175, 176, 177,
	229, 230, 69, 178, 0, 0, 0, 0, 179, 180,
	181, 182, 0, 0, 0, 0, 0, 72, 73, 0,
	74, 0, 0, 0, 0, 183, 0, 1278, 0, 0,
	75, 76, 184, 185, 186, 187, 77, 188, 189, 0,
	78, 190, 191, 79, 0, 0, 192, 193, 194, 0,
	195, 0, 0, 0, 80, 81, 82, 0, 83, 0,
	84, 85, 86, 0, 0, 87, 88, 0, 0, 0,
	0, 0, 0, 89, 90, 91, 92, 196, 93, 197,
	198, 0, 94, 0, 95, 0, 0, 0, 96, 97,
	0, 98, 0, 0, 0, 199, 99, 100, 200, 0,
	0, 0, 101, 102, 201, 0, 103, 0, 104, 0,
	0, 0, 0, 105, 202, 0, 203, 0, 106, 107,
	204, 205, 0, 0, 110, 0, 108, 0, 0, 109,
	206, 207, 208, 0, 209, 0, 0, 111, 0, 112,
	113, 0, 0, 210, 0, 114, 0, 0, 115, 0,
	0, 116, 0, 117, 118, 119, 120, 121, 0, 122,
	123, 126, 124, 0, 125, 0, 211, 127, 212, 128,
	129, 0, 0, 0, 0, 0, 130, 213, 0, 131,
	0, 214, 132, 133, 134, 0, 215, 135, 216, 136,
	0, 137, 138, 139, 217, 140, 141, 0, 143, 144,
	142, 145, 0, 146, 0, 147, 148, 218, 149, 0,
	150, 151, 152, 0, 219, 153, 154, 0, 155, 156,
	0, 157, 220, 221, 158, 0, 159, 160, 161, 163,
	222, 162, 223, 0, 164, 0, 165, 166, 0, 224,
	225, 226, 0, 0, 167, 227, 228, 0, 168, 169,
	170, 171, 0, 0, 172, 173, 174, 0, 0, 175,
	176, 177, 229, 230, 69, 178, 0, 0, 0, 0,
	179, 180, 181, 182, 0, 0, 0, 0, 0, 72,
	73, 0, 74, 0, 0, 0, 0, 183, 0, 0,
	0, 0, 75, 76, 184, 185, 186, 187, 77, 188,
	189, 0, 78, 190, 191, 79, 0, 0, 192, 193,
	194, 0, 195, 0, 0, 0, 80, 81, 82, 0,
	83, 0, 84, 85, 86, 0, 0, 87, 88, 0,
	0, 0, 0, 0, 0, 89, 90, 91, 92, 196,
	93, 197, 198, 0, 94, 0, 95, 0, 0, 0,
	96, 97, 0, 98, 0, 0, 0, 199, 99, 100,
	200, 0, 0, 0, 101, 102, 201, 0, 103, 0,
	104, 0, 0, 0, 0, 105, 202, 0, 203, 0,
	106, 107, 204, 205, 0, 0, 110, 0, 108, 0,
	0, 109, 206, 207, 208, 0, 209, 0, 0, 111,
	0, 112, 113, 0, 0, 210, 0, 114, 0, 0,
	115, 0, 0, 116, 0, 117, 118, 119, 120, 121,
	0, 122, 123, 126, 124, 0, 125, 0, 211, 127,
	212, 128, 129, 0, 0, 335, 0, 0, 130, 213,
	0, 131, 0, 214, 132, 133, 134, 0, 215, 135,
	216, 136, 0, 137, 138, 139, 217, 140, 141, 0,
	143, 144, 142, 145, 0, 146, 0, 147, 148, 218,
	149, 0, 150, 151, 152, 0, 219, 153, 154, 0,
	155, 156, 0, 157, 220, 221, 158, 0, 159, 160,
	161, 163, 222, 162, 223, 0, 164, 0, 165, 166,
	0, 224, 225, 226, 0, 0, 167, 227, 228, 0,
	168, 169, 170, 171, 0, 0, 172, 173, 174, 0,
	0, 175, 176, 177, 229, 230, 69, 178, 0, 0,
	0, 0, 179, 180, 181, 182, 0, 0, 0, 0,
	0, 72, 73, 0, 74, 0, 0, 0, 0, 183,
	0, 0, 0, 0, 75, 76, 184, 185, 186, 187,
	77, 188, 189, 0, 78, 190, 191, 79, 0, 0,
	192, 193, 194, 0, 195, 0, 0, 0, 80, 81,
	82, 0, 83, 0, 84, 85, 86, 0, 0, 87,
	88, 0, 0, 0, 0, 0, 0, 89, 90, 91,
	92, 196, 93, 197, 198, 0, 94, 0, 95, 0,
	0, 0, 96, 97, 0, 98, 0, 0, 0, 199,
	99, 100, 200, 0, 0, 0, 101, 102, 201, 0,
	103, 0, 104, 0, 0, 0, 0, 105, 202, 0,
	203, 0, 106, 107, 687, 205, 0, 0, 110, 0,
	108, 0, 0, 109, 206, 207, 208, 0, 209, 0,
	0, 111, 0, 112, 113, 0, 0, 210, 0, 114,
	0, 0, 115, 0, 0, 116, 0, 117, 118, 119,
	120, 121, 0, 122, 123, 126, 124, 0, 125, 0,
	211, 127, 212, 128, 129, 0, 0, 335, 0, 0,
	130, 213, 0, 131, 0, 214, 132, 133, 134, 0,
	215, 135, 216, 136, 0, 137, 138, 139, 217, 140,
	141, 0, 143, 144, 142, 145, 0, 146, 0, 147,
	148, 218, 149, 0, 150, 151, 152, 0, 219, 153,
	154, 0, 155, 156, 0, 157, 220, 221, 158, 0,
	159, 160, 161, 163, 222, 162, 223, 0, 164, 0,
	165, 166, 0, 224, 225, 226, 0, 0, 167, 227,
	228, 0, 168, 169, 170, 171, 0, 0, 172, 173,
	174, 0, 0, 175, 176, 177, 229, 230, 69, 178,
	0, 0, 0, 0, 179, 180, 181, 182, 0, 0,
	0, 0, 0, 72, 73, 394, 74, 0, 0, 0,
	0, 183, 0, 0, 0, 0, 75, 76, 184, 185,
	186, 187, 77, 188, 189, 0, 78, 190, 191, 79,
	0, 0, 192, 193, 194, 0, 195, 0, 0, 0,
	80, 81, 82, 0, 83, 0, 84, 85, 86, 0,
	0, 87, 88, 0, 0, 0, 0, 0, 0, 89,
	90, 91, 92, 196, 93, 197, 198, 0, 94, 0,
	95, 0, 0, 0, 96, 97, 0, 98, 0, 0,
	0, 199, 99, 100, 200, 0, 0, 0, 101, 102,
	201, 0, 103, 0, 104, 0, 0, 0, 0, 105,
	202, 0, 203, 0, 106, 107, 204, 205, 0, 0,
	110, 0, 108, 0, 0, 109, 206, 207, 208, 0,
	209, 0, 0, 111, 0, 112, 113, 0, 0, 210,
	0, 114, 0, 0, 115, 0, 0, 116, 0, 117,
	118, 119, 120, 121, 0, 122, 123, 126, 124, 0,
	125, 0, 211, 127, 212, 128, 129, 0, 0, 0,
	0, 0, 130, 213, 0, 131, 0, 214, 132, 133,
	134, 0, 215, 135, 216, 136, 0, 137, 138, 139,
	217, 140, 141, 0, 143, 144, 142, 145, 0, 146,
	0, 147, 148, 218, 149, 0, 150, 151, 152, 0,
	219, 153, 154, 0, 155, 156, 0, 157, 220, 221,
	158, 0, 159, 160, 161, 163, 222, 162, 223, 0,
	164, 0, 165, 166, 0, 224, 225, 226, 0, 0,
	167, 227, 228, 0, 168, 169, 170, 171, 0, 0,
	172, 173, 174, 0, 0, 175, 176, 177, 229, 230,
	69, 178, 0, 0, 0, 0, 179, 180, 181, 182,
	0, 0, 0, 0, 0, 72, 73, 0, 74, 0,
	0, 0, 0, 183, 0, 0, 0, 0, 75, 76,
	184, 185, 186, 187, 77, 188, 189, 0, 78, 190,
	191, 79, 0, 0, 192, 193, 194, 0, 195, 0,
	0, 0, 80, 81, 82, 0, 83, 0, 84, 85,
	86, 0, 0, 87, 88, 0, 0, 0, 0, 0,
	0, 89, 90, 91, 92, 196, 93, 197, 198, 0,
	94, 0, 95, 0, 0, 0, 96, 97, 0, 98,
	0, 0, 0, 199, 99, 100, 200, 0, 0, 0,
	101, 102, 201, 0, 103, 0, 104, 0, 0, 0,
	0, 105, 202, 0, 203, 0, 106, 107, 340, 205,
	0, 0, 110, 0, 108, 0, 0, 109, 206, 207,
	208, 0, 209, 0, 0, 111, 0, 112, 113, 0,
	0, 210, 0, 114, 0, 0, 115, 0, 0, 116,
	0, 117, 118, 119, 120, 121, 0, 122, 123, 126,
	124, 0, 125, 0, 211, 127, 212, 128, 129, 0,
	0, 335, 0, 0, 130, 213, 0, 131, 0, 214,
	132, 133, 134, 0, 215, 135, 216, 136, 0, 137,
	138, 139, 217, 140, 141, 0, 143, 144, 142, 145,
	0, 146, 0, 147, 148, 218, 149, 0, 150, 151,
	152, 0, 219, 153, 154, 0, 155, 156, 0, 157,
	220, 221, 158, 0, 159, 160, 161, 163, 222, 162,
	223, 0, 164, 0, 165, 166, 0, 224, 225, 226,
	0, 0, 167, 227, 228, 0, 168, 169, 170, 171,
	0, 0, 172, 173, 174, 0, 0, 175, 176, 177,
	229, 230, 69, 178, 0, 0, 0, 0, 179, 180,
	181, 182, 0, 0, 0, 0, 0, 72, 73, 253,
	74, 0, 0, 0, 0, 183, 0, 0, 0, 0,
	75, 76, 184, 185, 186, 187, 77, 188, 189, 0,
	78, 190, 191, 79, 0, 0, 192, 193, 194, 0,
	195, 0, 0, 0, 80, 81, 82, 0, 83, 0,
	84, 85, 86, 0, 0, 87, 88, 0, 0, 0,
	0, 0, 0, 89, 90, 91, 92, 196, 93, 197,
	198, 0, 94, 0, 95, 0, 0, 0, 96, 97,
	0, 98, 0, 0, 0, 199, 99, 100, 200, 0,
	0, 0, 101, 102, 201, 0, 103, 0, 104, 0,
	0, 0, 0, 105, 202, 0, 203, 0, 106, 107,
	204, 205, 0, 0, 110, 0, 108, 0, 0, 109,
	206, 207, 208, 0, 209, 0, 0, 111, 0, 112,
	113, 0, 0, 210, 0, 114, 0, 0, 115, 0,
	0, 116, 0, 117, 118, 119, 120, 121, 0, 122,
	123, 126, 124, 0, 125, 0, 211, 127, 212, 128,
	129, 0, 0, 0, 0, 0, 130, 213, 0, 131,
	0, 214, 132, 133, 134, 0, 215, 135, 216, 252,
	0, 137, 138, 139, 217, 140, 141, 0, 143, 144,
	142, 145, 0, 146, 0, 147, 148, 218, 149, 0,
	150, 151, 152, 0, 219, 153, 154, 0, 155, 156,
	0, 157, 220, 221, 158, 0, 159, 160, 161, 163,
	222, 162, 223, 0, 164, 0, 165, 166, 0, 224,
	225, 226, 0, 0, 167, 227, 228, 0, 168, 169,
	170, 171, 0, 0, 172, 173, 174, 0, 0, 175,
	176, 177, 229, 230, 69, 178, 0, 0, 0, 0,
	179, 180, 181, 182, 0, 0, 0, 0, 0, 72,
	73, 0, 74, 0, 0, 0, 0, 183, 0, 0,
	0, 0, 75, 76, 184, 185, 186, 187, 77, 188,
	189, 0, 78, 190, 191, 79, 0, 0, 192, 193,
	194, 0, 195, 0, 0, 0, 80, 81, 82, 0,
	83, 0, 84, 85, 86, 0, 0, 87, 88, 0,
	0, 0, 0, 0, 0, 89, 90, 91, 92, 196,
	93, 197, 198, 0, 94, 0, 95, 0, 0, 0,
	96, 97, 0, 98, 0, 0, 0, 199, 99, 100,
	200, 0, 0, 0, 101, 102, 201, 0, 103, 0,
	104, 0, 0, 0, 0, 105, 202, 0, 203, 0,
	106, 107, 204, 205, 0, 0, 110, 0, 108, 0,
	0, 109, 206, 207, 208, 0, 209, 0, 0, 111,
	0, 112, 113, 0, 0, 210, 0, 114, 0, 0,
	115, 0, 0, 116, 0, 117, 118, 119, 120, 121,
	0, 122, 123, 126, 124, 0, 125, 0, 211, 127,
	212, 128, 129, 0, 0, 0, 0, 0, 130, 213,
	0, 131, 0, 214, 132, 133, 134, 0, 215, 135,
	216, 136, 0, 137, 138, 139, 217, 140, 141, 0,
	143, 144, 142, 145, 0, 146, 0, 147, 148, 218,
	149, 0, 150, 151, 152, 0, 219, 153, 154, 0,
	155, 156, 0, 157, 220, 221, 158, 0, 159, 160,
	161, 163, 222, 162, 223, 0, 164, 0, 165, 166,
	0, 224, 225, 226, 0, 0, 167, 227, 228, 0,
	168, 169, 170, 171, 0, 0, 172, 173, 174, 0,
	0, 175, 176, 177, 229, 230, 69, 178, 0, 0,
	0, 0, 179, 180, 181, 182, 0, 0, 0, 0,
	0, 72, 73, 0, 74, 0, 0, 0, 0, 183,
	0, 0, 0, 0, 75, 76, 184, 185, 186, 187,
	77, 188, 189, 0, 78, 190, 191, 79, 0, 0,
	192, 193, 194, 0, 195, 0, 0, 0, 80, 81,
	82, 0, 83, 0, 84, 85, 86, 0, 0, 87,
	88, 0, 0, 0, 0, 0, 0, 89, 90, 91,
	92, 196, 93, 197, 198, 0, 94, 0, 95, 0,
	0, 0, 96, 97, 0, 98, 0, 0, 0, 199,
	99, 100, 200, 0, 0, 0, 101, 102, 201, 0,
	103, 0, 104, 0, 0, 0, 0, 105, 202, 0,
	203, 0, 106, 107, 1198, 205, 0, 0, 110, 0,
	108, 0, 0, 109, 206, 207, 208, 0, 209, 0,
	0, 111, 0, 112, 113, 0, 0, 210, 0, 114,
	0, 0, 115, 0, 0, 116, 0, 117, 118, 119,
	120, 121, 0, 122, 123, 126, 124, 0, 125, 0,
	211, 127, 212, 128, 129, 0, 0, 0, 0, 0,
	130, 213, 0, 131, 0, 214, 132, 133, 134, 0,
	215, 135, 216, 136, 0, 137, 138, 139, 217, 140,
	141, 0, 143, 144, 142, 145, 0, 146, 0, 147,
	148, 218, 149, 0, 150, 151, 152, 0, 219, 153,
	154, 0, 155, 156, 0, 157, 220, 221, 158, 0,
	159, 160, 161, 163, 222, 162, 223, 0, 164, 0,
	165, 166, 0, 224, 225, 226, 0, 0, 167, 227,
	228, 0, 168, 169, 170, 171, 0, 0, 172, 173,
	174, 0, 0, 175, 176, 177, 229, 230, 69, 178,
	0, 0, 0, 0, 179, 180, 181, 182, 0, 0,
	0, 0, 0, 72, 73, 0, 74, 0, 0, 0,
	0, 183, 0, 0, 0, 0, 75, 76, 184, 185,
	186, 187, 77, 188, 189, 0, 78, 190, 191, 79,
	0, 0, 192, 193, 194, 0, 195, 0, 0, 0,
	80, 81, 82, 0, 83, 0, 84, 85, 86, 0,
	0, 87, 88, 0, 0, 0, 0, 0, 0, 89,
	90, 91, 92, 196, 93, 197, 198, 0, 94, 0,
	95, 0, 0, 0, 96, 97, 0, 98, 0, 0,
	0, 199, 99, 100, 200, 0, 0, 0, 101, 102,
	201, 0, 103, 0, 104, 0, 0, 0, 0, 105,
	202, 0, 203, 0, 106, 107, 1196, 205, 0, 0,
	110, 0, 108, 0, 0, 109, 206, 207, 208, 0,
	209, 0, 0, 111, 0, 112, 113, 0, 0, 210,
	0, 114, 0, 0, 115, 0, 0, 116, 0, 117,
	118, 119, 120, 121, 0, 122, 123, 126, 124, 0,
	125, 0, 211, 127, 212, 128, 129, 0, 0, 0,
	0, 0, 130, 213, 0, 131, 0, 214, 132, 133,
	134, 0, 215, 135, 216, 136, 0, 137, 138, 139,
	217, 140, 141, 0, 143, 144, 142, 145, 0, 146,
	0, 147, 148, 218, 149, 0, 150, 151, 152, 0,
	219, 153, 154, 0, 155, 156, 0, 157, 220, 221,
	158, 0, 159, 160, 161, 163, 222, 162, 223, 0,
	164, 0, 165, 166, 0, 224, 225, 226, 0, 0,
	167, 227, 228, 0, 168, 169, 170, 171, 0, 0,
	172, 173, 174, 0, 0, 175, 176, 177, 229, 230,
	69, 178, 0, 0, 0, 0, 179, 180, 181, 182,
	0, 0, 0, 0, 0, 72, 73, 0, 74, 0,
	0, 0, 0, 183, 0, 0, 0, 0, 75, 76,
	184, 185, 186, 187, 77, 188, 189, 0, 78, 190,
	191, 79, 0, 0, 192, 193, 194, 0, 195, 0,
	0, 0, 80, 81, 82, 0, 83, 0, 84, 85,
	86, 0, 0, 87, 88, 0, 0, 0, 0, 0,
	0, 89, 90, 91, 92, 196, 93, 197, 198, 0,
	94, 0, 95, 0, 0, 0, 96, 97, 0, 98,
	0, 0, 0, 199, 99, 100, 200, 0, 0, 0,
	101, 102, 201, 0, 103, 0, 104, 0, 0, 0,
	0, 105, 202, 0, 203, 0, 106, 107, 1187, 205,
	0, 0, 110, 0, 108, 0, 0, 109, 206, 207,
	208, 0, 209, 0, 0, 111, 0, 112, 113, 0,
	0, 210, 0, 114, 0, 0, 115, 0, 0, 116,
	0, 117, 118, 119, 120, 121, 0, 122, 123, 126,
	124, 0, 125, 0, 211, 127, 212, 128, 129, 0,
	0, 0, 0, 0, 130, 213, 0, 131, 0, 214,
	132, 133, 134, 0, 215, 135, 216, 136, 0, 137,
	138, 139, 217, 140, 141, 0, 143, 144, 142, 145,
	0, 146, 0, 147, 148, 218, 149, 0, 150, 151,
	152, 0, 219, 153, 154, 0, 155, 156, 0, 157,
	220, 221, 158, 0, 159, 160, 161, 163, 222, 162,
	223, 0, 164, 0, 165, 166, 0, 224, 225, 226,
	0, 0, 167, 227, 228, 0, 168, 169, 170, 171,
	0, 0, 172, 173, 174, 0, 0, 175, 176, 177,
	229, 230, 69, 178, 0, 0, 0, 0, 179, 180,
	181, 182, 0, 0, 0, 0, 0, 72, 73, 0,
	74, 0, 0, 0, 0, 183, 0, 0, 0, 0,
	75, 76, 184, 185, 186, 187, 77, 188, 189, 0,
	78, 190, 191, 79, 0, 0, 192, 193, 194, 0,
	195, 0, 0, 0, 80, 81, 82, 0, 83, 0,
	84, 85, 86, 0, 0, 87, 88, 0, 0, 0,
	0, 0, 0, 89, 90, 91, 92, 196, 93, 197,
	198, 0, 94, 0, 95, 0, 0, 0, 96, 97,
	0, 98, 0, 0, 0, 199, 99, 100, 200, 0,
	0, 0, 101, 102, 201, 0, 103, 0, 104, 0,
	0, 0, 0, 105, 202, 0, 203, 0, 106, 107,
	800, 205, 0, 0, 110, 0, 108, 0, 0, 109,
	206, 207, 208, 0, 209, 0, 0, 111, 0, 112,
	113, 0, 0, 210, 0, 114, 0, 0, 115, 0,
	0, 116, 0, 117, 118, 119, 120, 121, 0, 122,
	123, 126, 124, 0, 125, 0, 211, 127, 212, 128,
	129, 0, 0, 0, 0, 0, 130, 213, 0, 131,
	0, 214, 132, 133, 134, 0, 215, 135, 216, 136,
	0, 137, 138, 139, 217, 140, 141, 0, 143, 144,
	142, 145, 0, 146, 0, 147, 148, 218, 149, 0,
	150, 151, 152, 0, 219, 153, 154, 0, 155, 156,
	0, 157, 220, 221, 158, 0, 159, 160, 161, 163,
	222, 162, 223, 0, 164, 0, 165, 166, 0, 224,
	225, 226, 0, 0, 167, 227, 228, 0, 168, 169,
	170, 171, 0, 0, 172, 173, 174, 0, 0, 175,
	176, 177, 229, 230, 69, 178, 0, 0, 0, 0,
	179, 180, 181, 182, 0, 0, 0, 0, 0, 72,
	73, 0, 74, 0, 0, 0, 0, 183, 0, 0,
	0, 0, 75, 76, 184, 185, 186, 187, 77, 188,
	189, 0, 78, 190, 191, 79, 0, 0, 192, 193,
	194, 0, 195, 0, 0, 0, 80, 81, 82, 0,
	83, 0, 84, 85, 86, 0, 0, 87, 88, 0,
	0, 0, 0, 0, 0, 89, 90, 91, 92, 196,
	93, 197, 198, 0, 94, 0, 95, 0, 0, 0,
	96, 97, 0, 98, 0, 0, 0, 199, 99, 100,
	200, 0, 0, 0, 101, 102, 201, 0, 103, 0,
	104, 0, 0, 0, 0, 105, 202, 0, 203, 0,
	106, 107, 204, 205, 0, 0, 110, 0, 108, 0,
	0, 109, 206, 207, 208, 0, 209, 0, 0, 111,
	0, 112, 113, 0, 0, 210, 0, 114, 0, 0,
	115, 0, 0, 116, 0, 117, 118, 119, 120, 121,
	0, 122, 123, 126, 124, 0, 125, 0, 211, 127,
	212, 128, 129, 0, 0, 0, 0, 0, 130, 213,
	0, 131, 0, 214, 132, 133, 134, 0, 215, 135,
	216, 136, 0, 137, 138, 139, 217, 140, 141, 0,
	143, 144, 142, 145, 0, 146, 0, 147, 148, 218,
	149, 0, 267, 151, 152, 0, 219, 153, 154, 0,
	155, 156, 0, 157, 220, 221, 158, 0, 159, 160,
	161, 163, 222, 162, 223, 0, 164, 0, 165, 166,
	0, 224, 225, 226, 0, 0, 167, 227, 228, 0,
	168, 169, 170, 171, 0, 0, 172, 173, 174, 0,
	0, 175, 176, 177, 229, 230, 69, 178, 0, 0,
	0, 0, 179, 180, 181, 182, 0, 0, 0, 0,
	0, 72, 73, 0, 74, 0, 0, 0, 0, 183,
	0, 674, 0, 0, 75, 76, 184, 185, 186, 187,
	77, 188, 189, 0, 78, 190, 191, 79, 0, 0,
	192, 193, 194, 0, 195, 0, 0, 0, 80, 81,
	82, 0, 83, 0, 84, 85, 86, 0, 0, 87,
	88, 0, 0, 0, 0, 0, 0, 89, 90, 91,
	92, 196, 93, 197, 198, 0, 94, 0, 95, 0,
	0, 0, 96, 97, 0, 98, 0, 0, 0, 199,
	99, 100, 200, 0, 0, 0, 101, 102, 201, 0,
	103, 0, 104, 0, 0, 0, 0, 105, 202, 0,
	203, 0, 106, 107, 204, 205, 0, 0, 110, 0,
	108, 0, 0, 109, 206, 207, 208, 0, 209, 0,
	0, 111, 0, 112, 113, 0, 0, 210, 0, 114,
	0, 0, 115, 0, 0, 116, 0, 117, 118, 119,
	120, 121, 0, 122, 123, 126, 124, 0, 125, 0,
	211, 127, 212, 128, 129, 0, 0, 0, 0, 0,
	130, 213, 0, 131, 0, 214, 132, 133, 134, 0,
	215, 135, 216, 136, 0, 137, 138, 139, 217, 140,
	141, 0, 143, 144, 142, 145, 0, 146, 0, 147,
	148, 218, 149, 0, 150, 151, 152, 0, 219, 153,
	154, 0, 0, 156, 0, 157, 220, 221, 158, 0,
	159, 160, 161, 163, 222, 162, 223, 0, 164, 0,
	165, 166, 0, 224, 225, 226, 0, 0, 167, 227,
	228, 0, 168, 169, 170, 171, 0, 0, 172, 173,
	174, 0, 0, 175, 176, 177, 229, 230, 69, 178,
	0, 0, 0, 0, 179, 180, 181, 182, 0, 0,
	0, 0, 0, 72, 73, 0, 74, 0, 0, 0,
	0, 183, 0, 0, 0, 0, 75, 76, 184, 185,
	186, 187, 77, 188, 189, 0, 78, 190, 191, 79,
	0, 0, 192, 193, 194, 0, 195, 0, 0, 0,
	80, 81, 82, 0, 83, 0, 84, 85, 86, 0,
	0, 87, 88, 0, 0, 0, 0, 0, 0, 89,
	90, 91, 92, 196, 93, 197, 198, 0, 94, 0,
	95, 0, 0, 0, 96, 97, 0, 98, 0, 0,
	0, 199, 99, 100, 200, 0, 0, 0, 101, 102,
	201, 0, 103, 0, 104, 0, 0, 0, 0, 105,
	202, 0, 203, 0, 106, 107, 442, 205, 0, 0,
	110, 0, 108, 0, 0, 109, 206, 207, 208, 0,
	209, 0, 0, 111, 0, 112, 113, 0, 0, 210,
	0, 114, 0, 0, 115, 0, 0, 116, 0, 117,
	118, 119, 120, 121, 0, 122, 123, 126, 124, 0,
	125, 0, 211, 127, 212, 128, 129, 0, 0, 0,
	0, 0, 130, 213, 0, 131, 0, 214, 132, 133,
	134, 0, 215, 135, 216, 136, 0, 137, 138, 139,
	217, 140, 141, 0, 143, 144, 142, 145, 0, 146,
	0, 147, 148, 218, 149, 0, 150, 151, 152, 0,
	219, 153, 154, 0, 155, 156, 0, 157, 220, 221,
	158, 0, 159, 160, 161, 163, 222, 162, 223, 0,
	164, 0, 165, 166, 0, 224, 225, 226, 0, 0,
	167, 227, 228, 0, 168, 169, 170, 171, 0, 0,
	172, 173, 174, 0, 0, 175, 176, 177, 229, 230,
	69, 178, 0, 0, 0, 0, 179, 180, 181, 182,
	0, 0, 0, 0, 0, 72, 73, 0, 74, 0,
	0, 0, 0, 183, 0, 0, 0, 0, 75, 76,
	184, 185, 186, 187, 77, 188, 189, 0, 78, 190,
	191, 79, 0, 0, 192, 193, 194, 0, 195, 0,
	0, 0, 80, 81, 82, 0, 83, 0, 84, 85,
	86, 0, 0, 87, 88, 0, 0, 0, 0, 0,
	0, 89, 90, 91, 92, 196, 93, 197, 198, 0,
	94, 0, 95, 0, 0, 0, 96, 97, 0, 98,
	0, 0, 0, 199, 99, 100, 200, 0, 0, 0,
	101, 102, 201, 0, 103, 0, 104, 0, 0, 0,
	0, 105, 202, 0, 203, 0, 106, 107, 439, 205,
	0, 0, 110, 0, 108, 0, 0, 109, 206, 207,
	208, 0, 209, 0, 0, 111, 0, 112, 113, 0,
	0, 210, 0, 114, 0, 0, 115, 0, 0, 116,
	0, 117, 118, 119, 120, 121, 0, 122, 123, 126,
	124, 0, 125, 0, 211, 127, 212, 128, 129, 0,
	0, 0, 0, 0, 130, 213, 0, 131, 0, 214,
	132, 133, 134, 0, 215, 135, 216, 136, 0, 137,
	138, 139, 217, 140, 141, 0, 143, 144, 142, 145,
	0, 146, 0, 147, 148, 218, 149, 0, 150, 151,
	152, 0, 219, 153, 154, 0, 155, 156, 0, 157,
	220, 221, 158, 0, 159, 160, 161, 163, 222, 162,
	223, 0, 164, 0, 165, 166, 0, 224, 225, 226,
	0, 0, 167, 227, 228, 0, 168, 169, 170, 171,
	0, 0, 172, 173, 174, 0, 0, 175, 176, 177,
	229, 230, 69, 178, 0, 0, 0, 0, 179, 180,
	181, 182, 0, 0, 0, 0, 0, 72, 73, 0,
	74, 0, 0, 0, 0, 183, 0, 0, 0, 0,
	75, 76, 184, 185, 186, 187, 77, 188, 189, 0,
	78, 190, 191, 79, 0, 0, 192, 193, 400, 0,
	195, 0, 0, 0, 80, 81, 82, 0, 83, 0,
	84, 85, 86, 0, 0, 87, 88, 0, 0, 0,
	0, 0, 0, 89, 90, 91, 92, 196, 93, 197,
	198, 0, 94, 0, 95, 0, 0, 0, 96, 97,
	0, 98, 0, 0, 0, 199, 99, 100, 200, 0,
	0, 0, 101, 102, 201, 0, 103, 0, 104, 0,
	0, 0, 0, 105, 202, 0, 203, 0, 106, 107,
	204, 205, 0, 0, 110, 0, 108, 0, 0, 109,
	206, 207, 208, 0, 209, 0, 0, 111, 0, 112,
	113, 0, 0, 210, 0, 114, 0, 0, 115, 0,
	0, 116, 0, 117, 118, 119, 120, 278, 0, 122,
	123, 126, 124, 0, 125, 0, 211, 127, 212, 128,
	129, 0, 0, 0, 0, 0, 130, 213, 0, 131,
	0, 214, 132, 133, 134, 0, 215, 135, 216, 136,
	0, 137, 138, 139, 217, 140, 141, 0, 143, 144,
	142, 145, 0, 146, 0, 147, 148, 218, 149, 0,
	150, 151, 152, 0, 219, 153, 154, 0, 155, 156,
	0, 157, 220, 221, 158, 0, 159, 160, 161, 163,
	222, 162, 223, 0, 164, 0, 165, 166, 0, 277,
	225, 226, 0, 0, 273, 227, 228, 0, 168, 169,
	170, 171, 0, 0, 172, 173, 174, 0, 0, 175,
	176, 177, 229, 230, 69, 178, 0, 0, 0, 0,
	179, 180, 181, 182, 0, 0, 0, 0, 0, 72,
	73, 0, 74, 0, 0, 0, 0, 183, 0, 0,
	0, 0, 75, 76, 184, 185, 186, 187, 77, 188,
	189, 0, 78, 190, 191, 79, 0, 0, 192, 193,
	194, 0, 195, 0, 0, 0, 80, 81, 82, 0,
	83, 0, 84, 85, 86, 0, 0, 87, 88, 0,
	0, 0, 0, 0, 0, 89, 90, 91, 92, 196,
	93, 197, 198, 0, 94, 0, 95, 0, 0, 0,
	96, 97, 0, 98, 0, 0, 0, 199, 99, 100,
	200, 0, 0, 0, 101, 102, 201, 0, 103, 0,
	104, 0, 0, 0, 0, 105, 202, 0, 203, 0,
	106, 107, 204, 205, 0, 0, 110, 0, 108, 0,
	0, 109, 206, 207, 208, 0, 209, 0, 0, 111,
	0, 112, 113, 0, 0, 210, 0, 114, 0, 0,
	115, 0, 0, 116, 0, 117, 118, 119, 120, 278,
	0, 122, 123, 126, 124, 0, 125, 0, 211, 127,
	212, 128, 129, 0, 0, 0, 0, 0, 130, 213,
	0, 131, 0, 214, 132, 133, 134, 0, 215, 135,
	216, 136, 0, 137, 138, 139, 217, 140, 141, 0,
	143, 144, 142, 145, 0, 146, 0, 147, 148, 218,
	149, 0, 150, 151, 152, 0, 219, 153, 154, 0,
	155, 156, 0, 157, 220, 221, 158, 0, 159, 160,
	161, 163, 222, 162, 223, 0, 164, 0, 165, 166,
	0, 277, 225, 226, 0, 0, 273, 227, 228, 0,
	168, 169, 170, 171, 0, 0, 172, 173, 174, 0,
	0, 175, 176, 177, 229, 230, 69, 178, 0, 0,
	0, 0, 179, 180, 181, 182, 0, 0, 0, 0,
	0, 72, 73, 0, 74, 0, 0, 0, 0, 183,
	0, 0, 0, 0, 75, 76, 184, 185, 186, 187,
	77, 188, 189, 0, 78, 190, 191, 79, 0, 0,
	192, 193, 194, 0, 195, 0, 0, 0, 80, 81,
	82, 0, 83, 0, 84, 85, 86, 0, 0, 87,
	88, 0, 0, 0, 0, 0, 0, 89, 90, 91,
	92, 196, 93, 197, 198, 0, 94, 0, 95, 0,
	0, 0, 96, 97, 0, 98, 0, 0, 0, 199,
	99, 100, 200, 0, 0, 0, 101, 102, 201, 0,
	103, 0, 104, 0, 0, 0, 0, 105, 202, 0,
	203, 0, 106, 107, 364, 205, 0, 0, 110, 0,
	108, 0, 0, 109, 206, 207, 208, 0, 209, 0,
	0, 111, 0, 112, 113, 0, 0, 210, 0, 114,
	0, 0, 115, 0, 0, 116, 0, 117, 118, 119,
	120, 121, 0, 122, 123, 126, 124, 0, 125, 0,
	211, 127, 212, 128, 129, 0, 0, 0, 0, 0,
	130, 213, 0, 131, 0, 214, 132, 133, 134, 0,
	215, 135, 216, 136, 0, 137, 138, 139, 217, 140,
	141, 0, 143, 144, 142, 145, 0, 146, 0, 147,
	148, 218, 149, 0, 150, 151, 152, 0, 219, 153,
	154, 0, 155, 156, 0, 157, 220, 221, 158, 0,
	159, 160, 161, 163, 222, 162, 223, 0, 164, 0,
	165, 166, 0, 224, 225, 226, 0, 0, 167, 227,
	228, 0, 168, 169, 170, 171, 0, 0, 172, 173,
	174, 0, 0, 175, 176, 177, 229, 230, 69, 178,
	0, 0, 0, 0, 179, 180, 181, 182, 0, 0,
	0, 0, 0, 72, 73, 0, 74, 0, 0, 0,
	0, 183, 0, 0, 0, 0, 75, 76, 184, 185,
	186, 187, 77, 188, 189, 0, 78, 190, 191, 79,
	0, 0, 192, 193, 194, 0, 195, 0, 0, 0,
	80, 81, 82, 0, 83, 0, 84, 85, 86, 0,
	0, 87, 88, 0, 0, 0, 0, 0, 0, 89,
	90, 91, 92, 196, 93, 197, 198, 0, 94, 0,
	95, 0, 0, 0, 96, 97, 0, 98, 0, 0,
	0, 199, 99, 100, 200, 0, 0, 0, 101, 102,
	201, 0, 103, 0, 104, 0, 0, 0, 0, 105,
	202, 0, 203, 0, 106, 107, 361, 205, 0, 0,
	110, 0, 108, 0, 0, 109, 206, 207, 208, 0,
	209, 0, 0, 111, 0, 112, 113, 0, 0, 210,
	0, 114, 0, 0, 115, 0, 0, 116, 0, 117,
	118, 119, 120, 121, 0, 122, 123, 126, 124, 0,
	125, 0, 211, 127, 212, 128, 129, 0, 0, 0,
	0, 0, 130, 213, 0, 131, 0, 214, 132, 133,
	134, 0, 215, 135, 216, 136, 0, 137, 138, 139,
	217, 140, 141, 0, 143, 144, 142, 145, 0, 146,
	0, 147, 148, 218, 149, 0, 150, 151, 152, 0,
	219, 153, 154, 0, 155, 156, 0, 157, 220, 221,
	158, 0, 159, 160, 161, 163, 222, 162, 223, 0,
	164, 0, 165, 166, 0, 224, 225, 226, 0, 0,
	167, 227, 228, 0, 168, 169, 170, 171, 0, 0,
	172, 173, 174, 0, 0, 175, 176, 177, 229, 230,
	69, 178, 0, 0, 0, 0, 179, 180, 181, 182,
	0, 0, 0, 0, 0, 72, 73, 0, 74, 0,
	0, 0, 0, 183, 0, 0, 0, 0, 75, 76,
	184, 185, 186, 187, 77, 188, 189, 0, 78, 190,
	191, 79, 0, 0, 192, 193, 194, 0, 195, 0,
	0, 0, 80, 81, 82, 0, 83, 0, 84, 85,
	86, 0, 0, 87, 88, 0, 0, 0, 0, 0,
	0, 89, 90, 91, 92, 196, 93, 197, 198, 0,
	94, 0, 95, 0, 0, 0, 96, 97, 0, 98,
	0, 0, 0, 199, 99, 100, 200, 0, 0, 0,
	101, 102, 201, 0, 103, 0, 104, 0, 0, 0,
	0, 105, 202, 0, 203, 0, 106, 107, 359, 205,
	0, 0, 110, 0, 108, 0, 0, 109, 206, 207,
	208, 0, 209, 0, 0, 111, 0, 112, 113, 0,
	0, 210, 0, 114, 0, 0, 115, 0, 0, 116,
	0, 117, 118, 119, 120, 121, 0, 122, 123, 126,
	124, 0, 125, 0, 211, 127, 212, 128, 129, 0,
	0, 0, 0, 0, 130, 213, 0, 131, 0, 214,
	132, 133, 134, 0, 215, 135, 216, 136, 0, 137,
	138, 139, 217, 140, 141, 0, 143, 144, 142, 145,
	0, 146, 0, 147, 148, 218, 149, 0, 150, 151,
	152, 0, 219, 153, 154, 0, 155, 156, 0, 157,
	220, 221, 158, 0, 159, 160, 161, 163, 222, 162,
	223, 0, 164, 0, 165, 166, 0, 224, 225, 226,
	0, 0, 167, 227, 228, 0, 168, 169, 170, 171,
	0, 0, 172, 173, 174, 0, 0, 175, 176, 177,
	229, 230, 69, 178, 0, 0, 0, 0, 179, 180,
	181, 182, 0, 0, 0, 0, 0, 72, 73, 0,
	74, 0, 0, 0, 0, 183, 0, 0, 0, 0,
	75, 76, 184, 185, 186, 187, 77, 188, 189, 0,
	78, 190, 191, 79, 0, 0, 192, 193, 194, 0,
	195, 0, 0, 0, 80, 81, 82, 0, 83, 0,
	84, 85, 86, 0, 0, 87, 88, 0, 0, 0,
	0, 0, 0, 89, 90, 91, 92, 196, 93, 197,
	198, 0, 94, 0, 95, 0, 0, 0, 96, 97,
	0, 98, 0, 0, 0, 199, 99, 100, 200, 0,
	0, 0, 101, 102, 201, 0, 103, 0, 104, 0,
	0, 0, 0, 105, 202, 0, 203, 0, 106, 107,
	343, 205, 0, 0, 110, 0, 108, 0, 0, 109,
	206, 207, 208, 0, 209, 0, 0, 111, 0, 112,
	113, 0, 0, 210, 0, 114, 0, 0, 115, 0,
	0, 116, 0, 117, 118, 119, 120, 121, 0, 122,
	123, 126, 124, 0, 125, 0, 211, 127, 212, 128,
	129, 0, 0, 0, 0, 0, 130, 213, 0, 131,
	0, 214, 132, 133, 134, 0, 215, 135, 216, 136,
	0, 137, 138, 139, 217, 140, 141, 0, 143, 144,
	142, 145, 0, 146, 0, 147, 148, 218, 149, 0,
	150, 151, 152, 0, 219, 153, 154, 0, 155, 156,
	0, 157, 220, 221, 158, 0, 159, 160, 161, 163,
	222, 162, 223, 0, 164, 0, 165, 166, 0, 224,
	225, 226, 0, 0, 167, 227, 228, 0, 168, 169,
	170, 171, 0, 0, 172, 173, 174, 0, 0, 175,
	176, 177, 229, 230, 69, 178, 0, 0, 0, 0,
	179, 180, 181, 182, 0, 0, 0, 0, 0, 72,
	73, 0, 74, 0, 0, 0, 0, 183, 0, 0,
	0, 0, 75, 76, 184, 185, 186, 187, 77, 188,
	189, 0, 78, 190, 191, 79, 0, 0, 192, 193,
	194, 0, 195, 0, 0, 0, 80, 81, 82, 0,
	83, 0, 84, 85, 86, 0, 0, 87, 88, 0,
	0, 0, 0, 0, 0, 89, 90, 91, 92, 196,
	93, 197, 198, 0, 94, 0, 95, 0, 0, 0,
	96, 97, 0, 98, 0, 0, 0, 199, 99, 100,
	200, 0, 0, 0, 101, 102, 201, 0, 103, 0,
	104, 0, 0, 0, 0, 105, 202, 0, 203, 0,
	106, 107, 204, 205, 0, 0, 110, 0, 108, 0,
	0, 109, 206, 207, 208, 0, 209, 0, 0, 111,
	0, 112, 113, 0, 0, 210, 0, 114, 0, 0,
	115, 0, 0, 116, 0, 117, 118, 119, 120, 121,
	0, 122, 123, 126, 124, 0, 125, 0, 211, 127,
	212, 128, 129, 0, 0, 0, 0, 0, 130, 213,
	0, 131, 0, 214, 132, 133, 134, 0, 215, 135,
	216, 136, 0, 137, 138, 139, 217, 324, 141, 0,
	143, 144, 142, 145, 0, 146, 0, 147, 148, 218,
	149, 0, 150, 151, 152, 0, 219, 153, 154, 0,
	155, 156, 0, 157, 220, 221, 158, 0, 159, 160,
	161, 163, 222, 162, 223, 0, 164, 0, 165, 166,
	0, 224, 225, 226, 0, 0, 167, 227, 228, 0,
	168, 169, 170, 171, 0, 0, 172, 173, 174, 0,
	0, 175, 176, 177, 229, 230, 69, 178, 0, 0,
	0, 0, 179, 180, 181, 182, 0, 0, 0, 0,
	0, 72, 73, 0, 74, 0, 0, 0, 0, 183,
	0, 0, 0, 0, 75, 76, 184, 185, 186, 187,
	77, 188, 189, 0, 78, 190, 191, 79, 0, 0,
	192, 193, 194, 0, 195, 0, 0, 0, 80, 81,
	82, 0, 83, 0, 84, 85, 86, 0, 0, 87,
	88, 0, 0, 0, 0, 0, 0, 89, 90, 91,
	92, 196, 93, 197, 198, 0, 94, 0, 95, 0,
	0, 0, 96, 97, 0, 98, 0, 0, 0, 199,
	99, 100, 200, 0, 0, 0, 101, 102, 201, 0,
	103, 0, 104, 0, 0, 0, 0, 105, 202, 0,
	203, 0, 106, 107, 204, 205, 0, 0, 110, 0,
	108, 0, 0, 109, 206, 207, 208, 0, 209, 0,
	0, 111, 0, 112, 113, 0, 0, 210, 0, 114,
	0, 0, 270, 0, 0, 116, 0, 117, 118, 119,
	120, 278, 0, 122, 123, 126, 124, 0, 125, 0,
	211, 127, 212, 128, 129, 0, 0, 0, 0, 0,
	130, 213, 0, 131, 0, 214, 132, 133, 134, 0,
	215, 135, 216, 136, 0, 137, 138, 139, 217, 140,
	141, 0, 143, 144, 142, 145, 0, 146, 0, 147,
	148, 272, 149, 0, 150, 151, 152, 0, 219, 153,
	271, 0, 155, 156, 0, 157, 220, 221, 158, 0,
	159, 160, 161, 163, 222, 162, 223, 0, 164, 0,
	165, 166, 0, 277, 225, 226, 0, 0, 273, 227,
	228, 0, 168, 169, 170, 171, 0, 0, 172, 173,
	174, 0, 0, 175, 176, 177, 229, 230, 69, 178,
	0, 0, 0, 0, 179, 180, 181, 182, 0, 0,
	0, 0, 0, 72, 73, 0, 74, 0, 0, 0,
	0, 183, 0, 0, 0, 0, 75, 76, 184, 185,
	186, 187, 77, 188, 189, 0, 78, 190, 191, 79,
	0, 0, 192, 193, 194, 0, 195, 0, 0, 0,
	80, 81, 82, 0, 83, 0, 84, 85, 86, 0,
	0, 87, 88, 0, 0, 0, 0, 0, 0, 89,
	90, 91, 92, 196, 93, 197, 198, 0, 94, 0,
	95, 0, 0, 0, 96, 97, 0, 98, 0, 0,
	0, 199, 99, 100, 200, 0, 0, 0, 101, 102,
	201, 0, 103, 0, 104, 0, 0, 0, 0, 105,
	202, 0, 203, 0, 106, 107, 204, 205, 0, 0,
	110, 0, 108, 0, 0, 109, 206, 207, 208, 0,
	209, 0, 0, 111, 0, 112, 113, 0, 0, 210,
	0, 114, 0, 0, 115, 0, 0, 116, 0, 117,
	118, 119, 120, 121, 0, 122, 123, 126, 124, 0,
	125, 0, 211, 127, 212, 128, 129, 0, 0, 0,
	0, 0, 130, 213, 0, 131, 0, 214, 132, 133,
	0, 0, 215, 135, 216, 136, 0, 137, 0, 139,
	217, 140, 141, 0, 143, 144, 142, 145, 0, 146,
	0, 147, 148, 218, 0, 0, 150, 151, 152, 0,
	219, 153, 154, 0, 155, 156, 0, 157, 220, 221,
	158, 0, 159, 160, 161, 163, 222, 162, 223, 0,
	164, 0, 165, 166, 0, 224, 225, 226, 0, 0,
	167, 227, 228, 0, 168, 169, 170, 171, 0, 0,
	172, 173, 174, 0, 0, 175, 176, 177, 229, 230,
	0, 178, 0, 0, 0, 0, 179, 180, 181, 182,
	826, 0, 845, 846, 847, 855, 856, 857, 0, 0,
	0, 0, 0, 0, 0, 848, 0, 0, 0, 0,
	0, 0, 828, 0, 859, 0, 826, 0, 845, 846,
	847, 855, 856, 857, 0, 0, 0, 0, 0, 0,
	0, 848, 0, 827, 0, 0, 0, 0, 828, 842,
	859, 0, 0, 0, 708, 703, 725, 697, 716, 715,
	0, 0, 699, 698, 0, 0, 0, 727, 726, 827,
	0, 0, 0, 0, 0, 842, 0, 0, 0, 0,
	0, 826, 0, 845, 846, 847, 855, 856, 857, 0,
	0, 0, 0, 0, 0, 0, 848, 833, 721, 0,
	713, 712, 0, 828, 0, 859, 0, 0, 0, 711,
	0, 0, 0, 0, 852, 860, 0, 0, 0, 0,
	0, 0, 0, 833, 827, 710, 0, 0, 858, 0,
	842, 0, 0, 0, 0, 0, 0, 0, 850, 0,
	852, 860, 0, 0, 843, 0, 0, 0, 0, 0,
	0, 704, 705, 706, 858, 724, 0, 0, 0, 0,
	0, 0, 0, 0, 850, 0, 849, 0, 0, 0,
	843, 0, 0, 0, 0, 0, 0, 0, 833, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 714,
	0, 0, 849, 0, 0, 852, 860, 0, 0, 0,
	0, 844, 0, 0, 0, 0, 0, 0, 0, 858,
	0, 0, 853, 0, 0, 709, 0, 0, 0, 850,
	0, 0, 0, 0, 0, 843, 0, 844, 0, 0,
	0, 0, 0, 0, 0, 701, 0, 0, 853, 0,
	0, 0, 0, 707, 702, 0, 0, 849, 0, 0,
	0, 729, 0, 0, 0, 0, 0, 0, 700, 0,
	0, 722, 723, 0, 0, 0, 851, 0, 0, 839,
	840, 841, 0, 838, 835, 836, 837, 829, 830, 831,
	832, 834, 844, 854, 728, 0, 0, 0, 0, 0,
	1374, 0, 851, 853, 0, 839, 840, 841, 0, 838,
	835, 836, 837, 829, 830, 831, 832, 834, 0, 854,
	0, 0, 0, 0, 0, 0, 1373, 0, 0, 0,
	826, 0, 845, 846, 847, 855, 856, 857, 0, 0,
	0, 0, 0, 0, 0, 848, 0, 0, 0, 0,
	0, 0, 828, 0, 859, 0, 0, 851, 0, 0,
	839, 840, 841, 0, 838, 835, 836, 837, 829, 830,
	831, 832, 834, 827, 854, 0, 0, 0, 0, 842,
	826, 1327, 845, 846, 847, 855, 856, 857, 0, 0,
	0, 0, 0, 0, 0, 848, 0, 0, 0, 0,
	0, 0, 828, 0, 859, 0, 0, 0, 0, 0,
	0, 0, 0, 826, 0, 845, 846, 847, 855, 856,
	857, 0, 0, 827, 0, 0, 0, 833, 848, 842,
	0, 0, 0, 0, 0, 828, 0, 859, 0, 0,
	0, 0, 0, 0, 852, 860, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 827, 0, 858, 0,
	0, 0, 842, 0, 0, 0, 0, 0, 850, 0,
	0, 0, 0, 0, 843, 0, 0, 833, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 852, 860, 849, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 858, 0,
	833, 0, 0, 0, 0, 0, 0, 0, 850, 0,
	0, 0, 0, 0, 843, 0, 0, 852, 860, 0,
	0, 844, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 858, 853, 0, 0, 0, 849, 0, 0, 0,
	0, 850, 0, 0, 0, 0, 0, 843, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 849,
	0, 844, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 853, 0, 0, 0, 851, 0, 0, 839,
	840, 841, 0, 838, 835, 836, 837, 829, 830, 831,
	832, 834, 0, 854, 844, 0, 0, 1771, 0, 0,
	0, 0, 0, 0, 0, 853, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 851, 0, 0, 839,
	840, 841, 0, 838, 835, 836, 837, 829, 830, 831,
	832, 834, 0, 854, 0, 0, 0, 1769, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 851,
	0, 0, 839, 840, 841, 0, 838, 835, 836, 837,
	829, 830, 831, 832, 834, 0, 854, 0, 0, 826,
	1750, 845, 846, 847, 855, 856, 857, 0, 0, 0,
	0, 0, 0, 0, 848, 0, 0, 0, 0, 0,
	0, 828, 0, 859, 0, 826, 0, 845, 846, 847,
	855, 856, 857, 0, 0, 0, 0, 0, 0, 0,
	848, 0, 827, 0, 0, 0, 0, 828, 842, 859,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 827, 0,
	0, 0, 0, 0, 842, 0, 0, 0, 0, 0,
	826, 0, 845, 846, 847, 855, 856, 857, 0, 0,
	0, 0, 0, 0, 0, 848, 833, 0, 0, 0,
	0, 0, 828, 0, 859, 0, 0, 0, 0, 0,
	0, 0, 0, 852, 860, 0, 0, 0, 0, 0,
	0, 0, 833, 827, 0, 0, 0, 858, 0, 842,
	0, 0, 0, 0, 0, 0, 0, 850, 0, 852,
	860, 0, 0, 843, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 858, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 850, 0, 849, 0, 0, 0, 843,
	0, 0, 0, 0, 0, 0, 0, 833, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 849, 0, 0, 852, 860, 0, 0, 0, 0,
	844, 0, 0, 0, 0, 0, 0, 0, 858, 0,
	0, 853, 0, 0, 0, 0, 0, 0, 850, 0,
	0, 0, 0, 0, 843, 0, 844, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 853, 0, 0,
	0, 0, 0, 0, 0, 0, 849, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 851, 0, 0, 839, 840,
	841, 0, 838, 835, 836, 837, 829, 830, 831, 832,
	834, 844, 854, 0, 0, 0, 1725, 0, 0, 0,
	0, 851, 853, 0, 839, 840, 841, 0, 838, 835,
	836, 837, 829, 830, 831, 832, 834, 0, 854, 0,
	0, 0, 1720, 0, 0, 0, 0, 0, 0, 826,
	0, 845, 846, 847, 855, 856, 857, 0, 0, 0,
	0, 0, 0, 0, 848, 0, 0, 0, 0, 0,
	0, 828, 0, 859, 0, 0, 851, 0, 0, 839,
	840, 841, 0, 838, 835, 836, 837, 829, 830, 831,
	832, 834, 827, 854, 0, 0, 0, 1716, 842, 826,
	0, 845, 846, 847, 855, 856, 857, 0, 0, 0,
	0, 0, 0, 0, 848, 0, 0, 0, 0, 0,
	0, 828, 0, 859, 0, 0, 0, 0, 0, 0,
	0, 0, 826, 0, 845, 846, 847, 855, 856, 857,
	0, 0, 827, 0, 0, 0, 833, 848, 842, 0,
	0, 0, 0, 0, 828, 0, 859, 0, 0, 0,
	0, 0, 0, 852, 860, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 827, 0, 858, 0, 0,
	0, 842, 0, 0, 0, 0, 0, 850, 0, 0,
	0, 0, 0, 843, 0, 0, 833, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 852, 860, 849, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 858, 0, 833,
	0, 0, 0, 0, 0, 0, 0, 850, 0, 0,
	0, 0, 0, 843, 0, 0, 852, 860, 0, 0,
	844, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	858, 853, 0, 0, 0, 849, 0, 0, 0, 0,
	850, 0, 0, 0, 0, 0, 843, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 849, 0,
	844, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 853, 0, 0, 0, 851, 0, 0, 839, 840,
	841, 0, 838, 835, 836, 837, 829, 830, 831, 832,
	834, 0, 854, 844, 0, 0, 1652, 0, 0, 0,
	0, 0, 0, 0, 853, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 851, 0, 0, 839, 840,
	841, 0, 838, 835, 836, 837, 829, 830, 831, 832,
	834, 0, 854, 0, 0, 0, 1651, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 851, 0,
	0, 839, 840, 841, 0, 838, 835, 836, 837, 829,
	830, 831, 832, 834, 0, 854, 0, 0, 826, 1561,
	845, 846, 847, 855, 856, 857, 0, 0, 0, 0,
	0, 0, 0, 848, 0, 0, 0, 0, 0, 0,
	828, 0, 859, 0, 826, 0, 845, 846, 847, 855,
	856, 857, 0, 0, 0, 0, 0, 0, 0, 848,
	0, 827, 0, 0, 0, 0, 828, 842, 859, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 827, 0, 0,
	0, 0, 0, 842, 0, 0, 0, 0, 0, 826,
	0, 845, 846, 847, 855, 856, 857, 0, 0, 0,
	0, 0, 0, 0, 848, 833, 0, 0, 0, 0,
	0, 828, 0, 859, 0, 0, 0, 0, 0, 0,
	0, 0, 852, 860, 0, 0, 0, 0, 0, 0,
	0, 833, 827, 0, 0, 0, 858, 0, 842, 0,
	0, 0, 0, 0, 0, 0, 850, 0, 852, 860,
	0, 0, 843, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 858, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 850, 0, 849, 0, 0, 0, 843, 0,
	0, 0, 0, 0, 0, 0, 833, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	849, 0, 0, 852, 860, 0, 0, 0, 0, 844,
	0, 0, 0, 0, 0, 0, 0, 858, 0, 0,
	853, 0, 0, 0, 0, 0, 0, 850, 0, 0,
	0, 0, 0, 843, 0, 844, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 853, 0, 0, 0,
	0, 0, 0, 0, 0, 849, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 851, 0, 0, 839, 840, 841,
	0, 838, 835, 836, 837, 829, 830, 831, 832, 834,
	844, 854, 0, 0, 0, 1496, 0, 0, 0, 0,
	851, 853, 0, 839, 840, 841, 0, 838, 835, 836,
	837, 829, 830, 831, 832, 834, 0, 854, 0, 0,
	0, 1480, 0, 0, 0, 0, 0, 0, 826, 0,
	845, 846, 847, 855, 856, 857, 0, 0, 0, 0,
	0, 0, 0, 848, 0, 0, 0, 0, 0, 0,
	828, 0, 859, 0, 0, 851, 0, 0, 839, 840,
	841, 0, 838, 835, 836, 837, 829, 830, 831, 832,
	834, 827, 854, 0, 0, 0, 1109, 842, 826, 0,
	845, 846, 847, 855, 856, 857, 0, 0, 0, 0,
	0, 0, 0, 848, 0, 0, 0, 0, 0, 0,
	828, 0, 859, 0, 0, 0, 0, 0, 0, 0,
	0, 826, 0, 845, 846, 847, 855, 856, 857, 0,
	0, 827, 0, 0, 0, 833, 848, 842, 0, 0,
	0, 0, 0, 828, 0, 859, 0, 0, 0, 0,
	0, 0, 852, 860, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 827, 0, 858, 0, 0, 0,
	842, 0, 0, 0, 0, 0, 850, 0, 0, 0,
	0, 0, 843, 0, 0, 833, 1841, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 852, 860, 849, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 858, 0, 833, 0,
	1365, 0, 0, 1364, 0, 0, 850, 0, 0, 0,
	0, 0, 843, 0, 0, 852, 860, 0, 0, 844,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 858,
	853, 0, 0, 0, 849, 0, 0, 0, 0, 850,
	0, 0, 0, 0, 0, 843, 0, 1840, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 849, 0, 844,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	853, 0, 0, 0, 851, 0, 0, 839, 840, 841,
	0, 838, 835, 836, 837, 829, 830, 831, 832, 834,
	0, 854, 844, 1410, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 853, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 851, 0, 0, 839, 840, 841,
	0, 838, 835, 836, 837, 829, 830, 831, 832, 834,
	0, 854, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 851, 0, 0,
	839, 840, 841, 0, 838, 835, 836, 837, 829, 830,
	831, 832, 834, 826, 854, 845, 846, 847, 855, 856,
	857, 0, 0, 0, 0, 0, 0, 0, 848, 0,
	0, 0, 0, 1043, 0, 828, 0, 859, 0, 862,
	0, 0, 0, 0, 0, 826, 0, 845, 846, 847,
	855, 856, 857, 0, 0, 0, 827, 0, 0, 0,
	848, 0, 842, 0, 861, 0, 0, 828, 0, 859,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 827, 0,
	1044, 0, 0, 0, 842, 0, 0, 0, 0, 0,
	0, 826, 0, 845, 846, 847, 855, 856, 857, 0,
	833, 0, 0, 0, 0, 0, 848, 0, 0, 0,
	0, 0, 0, 828, 0, 859, 0, 852, 860, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 858, 833, 0, 827, 0, 0, 0, 0, 0,
	842, 850, 0, 0, 0, 0, 0, 843, 0, 852,
	860, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 858, 0, 0, 0, 0, 0, 849,
	0, 0, 0, 850, 0, 0, 0, 0, 0, 843,
	0, 0, 0, 0, 0, 0, 0, 0, 833, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 849, 0, 0, 844, 852, 860, 0, 0, 0,
	0, 0, 0, 0, 0, 853, 0, 0, 0, 858,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 850,
	0, 0, 0, 0, 0, 843, 844, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 853, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 849, 319, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 851,
	0, 0, 839, 840, 841, 0, 838, 835, 836, 837,
	829, 830, 831, 832, 834, 0, 854, 0, 0, 0,
	0, 0, 844, 0, 0, 0, 0, 0, 0, 0,
	0, 851, 0, 853, 839, 840, 841, 0, 838, 835,
	836, 837, 829, 830, 831, 832, 834, 0, 854, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	826, 0, 845, 846, 847, 855, 856, 857, 0, 0,
	0, 0, 0, 0, 0, 848, 0, 0, 0, 0,
	0, 0, 828, 0, 859, 0, 0, 851, 0, 0,
	839, 840, 841, 0, 838, 835, 836, 837, 829, 830,
	831, 832, 834, 827, 854, 0, 0, 0, 0, 842,
	826, 0, 845, 846, 847, 855, 856, 857, 0, 0,
	0, 0, 0, 0, 0, 848, 0, 0, 0, 0,
	0, 0, 828, 0, 859, 0, 0, 0, 0, 0,
	0, 0, 0, 826, 0, 845, 846, 847, 855, 856,
	857, 0, 0, 827, 0, 0, 0, 833, 848, 842,
	0, 0, 1366, 0, 0, 828, 0, 859, 0, 0,
	0, 0, 0, 0, 852, 860, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 827, 0, 858, 0,
	0, 0, 842, 0, 0, 0, 0, 0, 850, 0,
	0, 0, 0, 0, 843, 0, 0, 833, 0, 0,
	0, 0, 1371, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 852, 860, 849, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 858, 0,
	833, 0, 0, 0, 0, 0, 0, 0, 850, 0,
	0, 0, 0, 0, 843, 0, 0, 852, 860, 0,
	0, 844, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 858, 853, 0, 0, 0, 849, 0, 0, 0,
	0, 850, 0, 0, 0, 0, 0, 843, 0, 0,
	1490, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 849,
	0, 844, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 853, 0, 0, 0, 851, 0, 0, 839,
	840, 841, 0, 838, 835, 836, 837, 829, 830, 831,
	832, 834, 0, 854, 844, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 853, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 851, 0, 0, 839,
	840, 841, 0, 838, 835, 836, 837, 829, 830, 831,
	832, 834, 0, 854, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 851,
	0, 0, 839, 840, 841, 0, 838, 835, 836, 837,
	829, 830, 831, 832, 834, 826, 854, 845, 846, 847,
	855, 856, 857, 0, 0, 0, 0, 0, 0, 0,
	848, 0, 0, 0, 0, 0, 0, 828, 0, 859,
	0, 826, 0, 845, 846, 847, 855, 856, 857, 0,
	0, 0, 0, 0, 0, 0, 848, 0, 827, 0,
	1326, 0, 0, 828, 842, 859, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 827, 0, 0, 0, 0, 0,
	842, 0, 0, 0, 0, 0, 826, 0, 845, 846,
	847, 855, 856, 857, 0, 0, 0, 0, 0, 0,
	0, 848, 833, 0, 0, 0, 0, 0, 828, 0,
	859, 0, 0, 0, 0, 0, 0, 0, 0, 852,
	860, 0, 0, 0, 0, 0, 0, 0, 833, 827,
	0, 0, 0, 858, 0, 842, 0, 0, 0, 0,
	0, 0, 0, 850, 0, 852, 860, 0, 0, 843,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 858,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 850,
	0, 849, 0, 0, 0, 843, 0, 0, 0, 0,
	0, 0, 1332, 833, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 849, 0, 0,
	852, 860, 0, 0, 0, 0, 844, 0, 0, 0,
	0, 0, 0, 0, 858, 0, 0, 853, 0, 0,
	0, 0, 0, 0, 850, 0, 0, 0, 0, 0,
	843, 0, 844, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 853, 0, 0, 0, 0, 0, 0,
	0, 0, 849, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 851, 0, 0, 839, 840, 841, 0, 838, 835,
	836, 837, 829, 830, 831, 832, 834, 844, 854, 0,
	0, 0, 0, 0, 0, 0, 0, 851, 853, 0,
	839, 840, 841, 0, 838, 835, 836, 837, 829, 830,
	831, 832, 834, 0, 854, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 826, 0, 845, 846, 847,
	855, 856, 857, 0, 0, 0, 0, 0, 0, 0,
	848, 0, 0, 0, 0, 0, 0, 828, 0, 859,
	0, 0, 851, 0, 0, 839, 840, 841, 0, 838,
	835, 836, 837, 829, 830, 831, 832, 834, 827, 854,
	0, 0, 0, 0, 842, 826, 0, 845, 846, 847,
	855, 856, 857, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 828, 0, 859,
	0, 0, 0, 0, 0, 0, 0, 0, 826, 0,
	845, 846, 847, 855, 856, 857, 0, 0, 827, 0,
	0, 0, 833, 0, 842, 0, 0, 0, 0, 0,
	828, 1334, 859, 1351, 1352, 1353, 0, 0, 0, 852,
	860, 0, 0, 0, 0, 0, 1474, 0, 0, 0,
	0, 827, 0, 858, 0, 0, 0, 842, 0, 0,
	0, 0, 0, 850, 0, 0, 0, 0, 0, 843,
	0, 0, 833, 0, 0, 0, 0, 0, 0, 0,
	1348, 0, 0, 0, 0, 0, 0, 0, 0, 852,
	860, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 858, 0, 833, 0, 0, 0, 0,
	0, 0, 0, 850, 0, 0, 0, 0, 0, 843,
	0, 0, 852, 860, 0, 0, 844, 0, 1339, 0,
	0, 0, 0, 0, 0, 0, 0, 853, 0, 0,
	0, 0, 0, 0, 0, 25, 850, 0, 0, 0,
	0, 0, 843, 0, 0, 0, 45, 0, 0, 1354,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1349, 844, 0, 0, 0,
	47, 0, 0, 0, 0, 0, 26, 853, 52, 0,
	0, 851, 0, 0, 839, 840, 841, 0, 838, 835,
	836, 837, 829, 830, 831, 832, 834, 36, 854, 844,
	0, 0, 0, 0, 32, 0, 0, 48, 0, 0,
	853, 35, 33, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1350, 0, 0, 0, 0, 37, 0, 0,
	0, 851, 0, 0, 839, 840, 841, 0, 838, 835,
	836, 837, 829, 830, 831, 832, 834, 0, 854, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 851, 0, 0, 839, 840, 841,
	0, 838, 835, 836, 837, 829, 830, 831, 832, 834,
	0, 854, 0, 0, 0, 0, 0, 0, 0, 0,
	1345, 1346, 1347, 0, 1344, 1341, 1342, 1343, 1335, 1336,
	1337, 1338, 1340, 0, 34, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 0, 38, 0,
	49, 0, 0, 0, 0, 39, 0, 0, 59, 0,
	0, 0, 0, 42, 44, 0, 0, 0, 0, 0,
	0, 0, 46, 0, 0, 0, 0, 0, 0, 0,
	61, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 51, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 62, 0, 0,
	0, 0, 0, 0, 57, 0, 0, 0, 0, 0,
	58, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 56,
}
var sqlPact = [...]int{

	23793, -1000, 31, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 752, 15790, -1000, -1000, -1000,
	-1000, 703, 743, 657, 15790, 15790, 15528, 1118, 1118, 17100,
	-1000, -1000, 19982, -1000, 2268, 461, 481, 461, 461, 468,
	17100, 551, 626, 178, -1000, 808, -17, 19720, 15790, 1305,
	29, 14480, 321, 23793, 15266, 15790, 19458, 345, 47, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1145, 1042, 1037, 14480, 19196, 18934, 18672, -1000, 9701,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 550, 326,
	325, -1000, 15004, -1000, 875, -1000, 28, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 874, -1000, 15790, -1000, -1000,
	18410, 18148, 323, 840, -1000, -1000, 531, 384, 1311, -1000,
	34, -1000, -1000, 1143, -1000, 872, 1142, 1141, 1135, 1134,
	1133, 1132, 383, 847, -1000, 543, 840, -1000, 840, -1000,
	-1000, -1000, 519, 17100, -1000, 14480, -1000, 17886, 1060, 17624,
	-1000, 808, -1000, -1000, -1000, 896, 1304, 1304, 1304, 1313,
	155, 154, 178, 14, 15790, -1000, 322, 14, 6674, 6674,
	-1000, -1000, 321, -1000, 314, 12639, -1000, 7224, -1000, 968,
	1206, 691, 687, 1200, -62, 593, 11843, 47, -1000, -1000,
	-1000, 8617, 3836, 14480, 15790, 15790, 607, 17362, -1000, 1199,
	100, 1196, -1000, 99, 1193, -1000, -8, -1000, -1000, -1000,
	-1000, -1000, -1000, 321, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 14742, 1334,
	20539, -1000, 8617, -1000, -1000, 12904, 1129, 12904, -1000, -1000,
	1331, -1000, 8617, -1000, 27, 26, 969, 1075, 10248, 9976,
	1240, 1077, -1000, -1000, -1000, 33, 4108, 15790, 1155, 12904,
	15790, 15790, 15790, 15790, 15790, 15790, -1000, 961, -1000, 15790,
	-1000, 24, 22, -1000, 17100, -1000, 113, -1000, 417, 918,
	16838, 1212, 914, -1000, 896, -1000, 856, 954, 7792, 8617,
	178, -1000, -1000, 178, 178, 8617, -1000, -1000, 15790, 14,
	1329, 15790, 170, -1000, 22605, -1000, -1000, 8617, 8617, 8617,
	8617, 8617, 819, -1000, -1000, -1000, 4949, -1000, -1000, 47,
	320, 329, -1000, -1000, 319, 47, -1000, -1000, -1000, -1000,
	318, 1439, 438, -1000, -1000, -1000, 8617, 397, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1152, 317, 316,
	-1000, -1000, -1000, -1000, 313, 312, 311, 310, 309, 305,
	303, 294, 291, 290, 287, 281, 278, 271, 774, -1000,
	425, -1000, -1000, 425, 425, -1000, 258, 258, 260, -1000,
	-1000, -1000, 258, -1000, -1000, -1000, 378, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 263, 170, -1000, -1000, -1000, 15790,
	-9, -1000, 23346, -1000, 0, 705, -1000, 13956, 1290, 1287,
	1261, 14480, 517, 515, 15790, 15790, -1000, 1130, -10, -1000,
	-1000, 2838, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 405, 105,
	1328, 105, 12109, -1000, 15790, 15790, -1000, 15790, -1000, -1000,
	15790, -1000, 15790, 15790, 389, 13432, 719, 1192, -17, -16,
	-1000, 1339, -1000, -1000, -1000, -1000, 85, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	260, 774, 258, 258, 258, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 378, -1000, -1000, 425, 425, 425, -1000, -1000,
	-23, 23346, 514, 9, 13168, 15790, -1000, 23, -1000, -1000,
	1123, 460, -34, 714, 1033, 689, -1000, -1000, -1000, -1000,
	13, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1410, -1000, -1000, -1000, -1000, 1421, 13, -1000, -1000,
	-1000, -1000, -1000, 1438, -1000, -1000, -1000, 4108, -1000, -1000,
	-1000, 15790, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 714, 1033, -1000, -1000, 14480, 13694, -17, 1191, 869,
	913, -1000, -1000, 369, 1190, -1000, -1000, -1000, -1000, 23346,
	-1000, 23346, 798, 1047, -1000, 1047, 12, -1000, 22573, -1000,
	255, -39, -1000, 405, 6674, 11578, 20539, 15790, 538, 8617,
	8617, 8617, 8617, 8617, 8617, 8617, 8617, 8617, 8617, 8617,
	8617, 8617, 8617, 8617, 8617, 8617, 8617, 8617, 8617, 8617,
	8617, 966, 8617, 510, 8617, 8617, 8617, 8617, 956, 778,
	246, 4108, -1000, 638, 638, 638, 23635, 23635, 236, 21,
	21969, 11, 47, -1000, -1000, 6381, 6087, 47, 4380, -1000,
	628, 1420, 423, 23346, 1137, 1093, 254, 140, 137, 8617,
	8617, 753, 8617, 8892, 8617, 8617, 5224, 8617, 8617, 8617,
	8617, 8617, 8617, -1000, 253, -1000, -1000, -1000, -1000, 1419,
	-1000, -1000, 1418, -1000, 527, 523, 1417, 405, 135, 7224,
	-1000, 719, 15790, 15790, 15790, -1000, -1000, 911, 16576, -1000,
	20539, 15790, -1000, 251, 249, 983, 981, 15790, 15790, 16314,
	16052, 15790, 855, 15790, 15790, 680, -1000, 587, 1122, 15790,
	-1000, 8617, 654, 8617, 788, -1000, 11047, 431, 15790, 664,
	102, -1000, -1000, -1000, 366, 15790, -1000, -1000, -1000, 100,
	-1000, 99, -1000, -1000, 14480, -1000, -1000, -1000, -1000, -1000,
	-1000, 20539, 333, 331, -1000, 1407, 509, -1000, 508, 501,
	500, -1000, 247, -1000, 8617, 15790, 13168, 9, 7, -1000,
	-1000, 15790, 1033, -1000, -1000, -1000, -1000, 643, -1000, 718,
	-1000, 10520, -1000, -1000, -1000, 628, -1000, -2, -1000, -1000,
	-1000, -1000, 134, 5, -1000, -1000, -1000, -1000, -1000, 15790,
	270, 15790, -1000, 15790, 15790, 1186, 1437, 15790, -1000, -1000,
	-1000, 8617, -1000, -1000, -1000, -17, 15790, -1000, 1084, -1000,
	-55, 1416, -119, 14218, -1000, 10782, -1000, -1000, 382, 866,
	866, 592, 592, 592, 592, 307, 307, 233, 861, 2131,
	2131, 2131, 1957, 733, 733, 2131, 2131, 2131, 23635, 23585,
	216, 8617, 8617, 498, 776, 246, 216, 8617, 1381, 216,
	216, 216, -1000, 1018, -1000, -1000, -1000, 1119, 245, 8892,
	8892, -1000, -1000, -1000, 4949, -1000, -1000, 244, 8617, -1000,
	8617, -38, -106, -1000, -1000, -41, -1000, -1000, -15, 8617,
	8617, 8617, 132, -1000, 122, 596, -1000, 8617, 836, 242,
	239, 8617, -1000, -1000, 23291, 20591, 119, 1113, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 115, 23265, 111, 2892, -1000,
	8892, 8892, 8892, 4949, 238, 109, 22291, -67, 22983, 7499,
	7499, 7499, 108, 22950, 8617, -67, 20536, 20510, 3238, -45,
	-51, -66, 1405, -68, 106, 379, 377, 98, 1084, -1000,
	-1000, -1000, -1000, 494, 493, 1185, -1000, 909, -1000, 665,
	8617, 15790, 235, 231, 764, -1000, 1181, 828, 1180, 828,
	-1000, 0, 668, -1000, -1000, 488, -1000, 584, -1000, 22208,
	-1000, 6674, 23346, -1000, 656, 1269, -70, -1000, -1000, 6674,
	405, 12109, 11578, 7224, -72, -1000, -1000, 719, -1000, 518,
	1403, 97, 937, 837, 697, 629, 1398, 23346, -2, -1000,
	-2, -1000, -1000, -1000, -1000, -1000, -1000, 15790, 1064, 13694,
	221, 15790, 220, 315, 217, 15790, -1000, 1212, -1000, 93,
	-1000, 1079, 1308, -1000, 11578, 890, 1031, 1003, 11578, 1078,
	829, 829, 829, -1000, 14218, 3552, -1000, -1000, 15790, 202,
	11312, 91, 1416, 8617, 216, 216, 8617, 8892, 8892, -1000,
	216, -1000, -1000, -1000, -1000, 1109, 201, 8617, 20539, 23691,
	2934, -76, 5793, -3, 21914, -1000, -1000, 329, -1000, 89,
	6949, -1000, 22661, 1, 1, -1000, 1433, 1210, -1000, 8617,
	22900, -1000, 12374, 413, 842, 21888, 20539, 20539, -1000, 8617,
	-1000, 1105, 8617, -1000, 20539, 8892, 8892, 8892, 8892, 8892,
	8892, 8892, 8892, 8892, 8892, 8892, 8892, 8892, 8892, 8892,
	8892, 8892, 8892, 8892, 998, 8892, 1372, 1372, 1372, -4,
	5499, -1000, 1149, 1105, 8617, 8617, 20539, 88, 86, 83,
	-1000, 8617, -67, 8617, 8617, 8617, -1000, -1000, -1000, 82,
	-1000, 1396, -1000, -1000, -1000, -1000, 1079, 15790, 15790, 15790,
	1174, 1941, -1000, 21602, -78, 15790, 15790, -1000, 1016, 1094,
	453, 15790, -1000, 15790, -1000, 15790, 15790, 15790, 15790, -1000,
	-1000, -24, 6674, 218, -17, -24, 654, -1000, -5, -1000,
	365, -1000, 234, 215, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 80, -1000, -1000, 1068, -1000, 9436, 198, 15790,
	13694, -17, 9436, 867, -1000, -1000, 402, 8617, 8617, 1416,
	570, 11578, 11578, 1455, 985, 11578, -1000, -1000, -1000, -1000,
	-1000, -1000, 990, 197, 15790, 14218, 624, 216, 2631, 2166,
	8617, 20539, 23668, -82, 8617, 8617, -1000, -87, -1000, 8617,
	-1000, -1000, 1432, 8617, 78, 77, 76, -1000, -1000, 23346,
	8617, -1000, -1000, 20244, 8617, 71, -1000, 66, 65, 23346,
	1149, 23346, -1000, 715, 715, 1372, 1372, 1372, 1372, 342,
	342, 374, 1672, 561, 561, 561, 1664, 430, 430, 561,
	561, 561, 1104, 964, 195, 3197, 8617, -88, -1000, -1000,
	-1000, 23346, 23346, 54, -1000, -1000, -1000, -67, 3136, 21569,
	21519, -1000, 53, 402, -1000, -1000, -1000, 15790, -1000, 15790,
	-1000, 15790, 15790, 1097, 903, -1000, -1000, 972, 194, 8892,
	15790, -1000, 754, -89, -93, 901, -1000, 897, 8617, -1000,
	20539, 828, 828, -1000, 486, 484, -1000, -24, 1217, 15790,
	1259, -1000, -1000, 193, -1000, -1000, -1000, 810, -95, -1000,
	214, 1284, 8617, -1000, -1000, 191, 9436, -97, 51, -1000,
	-101, 15790, -1000, 15790, 23346, -67, 521, -1000, 1455, -1000,
	187, 8617, 11578, -1000, -150, -1000, 355, -1000, 15790, -107,
	-1000, 8617, 8617, 23668, -114, -1000, 216, 216, -1000, 21280,
	-1000, 22661, -1000, -1000, -1000, 23346, 812, -1000, 21225, -1000,
	-1000, -1000, -1000, 8892, 1102, 186, 20539, 21199, -1000, -1000,
	8617, -1000, -1000, -1000, -1000, -1000, 700, -1000, -1000, 15790,
	908, -1000, -1000, 8617, 3197, 183, 1064, 179, -1000, -1000,
	-1000, 696, -1000, -1000, 23346, 1288, -1000, -1000, 15790, 15790,
	534, -120, 15790, -1000, -1000, 4674, 15790, 754, 9436, 1279,
	47, 15790, 1279, 20913, 4380, -124, -1000, 1064, 754, 173,
	-49, -1000, 1327, 1430, -1000, 15790, 23346, -1000, 990, -1000,
	4108, -125, -1000, 216, 216, -1000, -1000, 49, 842, 1307,
	-1000, 2147, 8892, 20539, -129, -1000, 20880, -1000, -1000, 1173,
	20830, 943, 15790, -1000, 15790, 15790, 436, 15790, -1000, -1000,
	604, -1000, 405, -1000, 169, 1064, -1000, -1000, -1000, -1000,
	1284, -15, 754, -1000, 1064, 9436, 15790, 162, -1000, -130,
	-1000, -1000, -1000, -1000, 672, 8617, 2147, -131, -1000, -1000,
	1166, -1000, 851, 712, 41, -136, 157, -1000, 8617, -1000,
	12109, -1000, 15790, -1000, 1279, 36, 1064, -1000, -137, -1000,
	-1000, -1000, -14, 8342, 8342, -67, -1000, 15790, -1000, 863,
	862, 612, -1000, -1000, -1000, -1000, -1000, 943, 15790, 23346,
	-126, -141, -1000, -1000, -1000, 754, -1000, -1000, -1000, 9164,
	839, 647, 22258, -1000, -1000, -1000, 1221, -1000, 442, 958,
	958, 851, -145, -1000, 828, 1064, 1343, -1000, -1000, -1000,
	-1000, -1000, -1000, 1358, -1000, -1000, 1009, -1000, -1000, -1000,
	-1000, -1000, 8067, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1655, 1654, 1334, 117, 1653, 115, 1652, 1649, 1648,
	1646, 92, 114, 113, 120, 1645, 86, 1644, 1640, 1639,
	85, 1637, 1636, 1633, 61, 1632, 1630, 1627, 1626, 1625,
	84, 53, 137, 216, 127, 1624, 1618, 1616, 10, 96,
	52, 1612, 2, 57, 90, 97, 1075, 33, 1610, 1609,
	134, 31, 15, 130, 91, 136, 112, 123, 1608, 1606,
	1603, 45, 1600, 6, 1598, 1597, 1596, 49, 25, 1594,
	17, 19, 1593, 1592, 124, 1591, 68, 101, 104, 26,
	108, 75, 1589, 74, 11, 79, 1588, 29, 1587, 39,
	72, 128, 1584, 44, 154, 63, 32, 48, 1581, 1577,
	1573, 1570, 76, 1569, 88, 64, 1565, 1560, 70, 1559,
	131, 133, 1558, 1557, 129, 1555, 1554, 1549, 711, 1547,
	1545, 343, 1544, 9, 42, 69, 12, 100, 99, 30,
	1542, 21, 1541, 1717, 747, 589, 1540, 55, 50, 78,
	47, 46, 60, 1538, 1535, 94, 1533, 1531, 1530, 1527,
	1526, 77, 1525, 71, 132, 41, 56, 87, 23, 111,
	80, 122, 141, 102, 1523, 1522, 107, 1520, 34, 1519,
	1518, 936, 106, 1517, 1515, 1514, 933, 815, 557, 244,
	1513, 1512, 546, 335, 1511, 1509, 103, 1508, 1506, 138,
	140, 16, 1504, 109, 1502, 89, 1492, 0, 54, 38,
	1491, 121, 73, 1490, 1489, 1480, 1479, 28, 3, 13,
	4, 7, 5, 24, 20, 1478, 1475, 125, 82, 1472,
	142, 1470, 1468, 22, 1457, 1455, 18, 1454, 14, 1451,
	8, 1, 1450, 135, 1449, 93, 1448, 1332, 1446, 139,
	1445, 1423, 1372, 81,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 4, 4, 40, 40,
	39, 39, 39, 39, 39, 39, 39, 39, 39, 39,
	39, 39, 39, 39, 39, 37, 37, 42, 42, 42,
	41, 41, 36, 36, 5, 5, 5, 6, 6, 6,
	6, 11, 12, 12, 12, 12, 12, 12, 80, 80,
	79, 79, 82, 82, 13, 13, 14, 14, 14, 14,
	14, 14, 14, 14, 167, 167, 166, 15, 143, 143,
	16, 16, 16, 16, 17, 103, 103, 18, 18, 18,
	18, 19, 23, 233, 233, 233, 237, 237, 238, 238,
	239, 239, 239, 239, 239, 239, 239, 235, 235, 26,
	26, 26, 26, 26, 122, 118, 118, 120, 120, 120,
	120, 45, 117, 117, 117, 117, 119, 119, 119, 119,
	190, 189, 189, 195, 195, 195, 58, 58, 58, 58,
	58, 59, 59, 59, 188, 188, 188, 188, 196, 196,
	196, 196, 196, 196, 60, 60, 60, 194, 194, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 234, 234, 236, 236,
	9, 9, 10, 10, 61, 61, 62, 62, 125, 125,
	125, 125, 63, 63, 124, 205, 205, 206, 206, 206,
	206, 206, 206, 207, 207, 207, 207, 207, 207, 207,
	203, 203, 204, 201, 201, 202, 202, 202, 202, 240,
	240, 123, 123, 66, 66, 210, 210, 210, 210, 208,
	208, 208, 208, 208, 211, 209, 212, 212, 212, 212,
	212, 154, 154, 154, 29, 8, 8, 107, 107, 70,
	70, 158, 158, 158, 52, 52, 38, 38, 38, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 108, 108,
	109, 109, 21, 25, 28, 28, 28, 28, 28, 242,
	242, 49, 49, 49, 49, 50, 50, 121, 121, 121,
	121, 121, 44, 7, 7, 43, 43, 20, 20, 20,
	20, 20, 55, 55, 114, 114, 114, 116, 116, 115,
	115, 115, 93, 93, 30, 75, 75, 84, 84, 85,
	85, 164, 86, 86, 24, 24, 33, 33, 31, 31,
	31, 31, 31, 31, 32, 32, 34, 34, 34, 34,
	34, 34, 34, 218, 218, 218, 220, 220, 217, 219,
	219, 241, 241, 94, 94, 94, 65, 64, 64, 68,
	68, 67, 69, 69, 157, 91, 91, 91, 91, 110,
	111, 111, 112, 112, 113, 113, 90, 90, 140, 140,
	35, 35, 74, 74, 76, 76, 131, 131, 132, 132,
	130, 130, 130, 159, 159, 159, 159, 160, 160, 160,
	160, 160, 160, 155, 155, 155, 155, 156, 156, 165,
	165, 97, 97, 97, 97, 95, 95, 96, 96, 161,
	161, 161, 161, 92, 92, 162, 162, 162, 126, 126,
	168, 168, 168, 73, 73, 73, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 170,
	170, 170, 170, 172, 172, 172, 171, 171, 171, 171,
	171, 171, 171, 171, 171, 171, 171, 171, 171, 173,
	173, 180, 180, 181, 181, 182, 183, 174, 174, 175,
	175, 176, 177, 184, 184, 184, 184, 186, 186, 178,
	178, 178, 178, 178, 179, 104, 104, 104, 104, 104,
	104, 104, 104, 104, 104, 104, 104, 104, 104, 105,
	105, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	213, 213, 213, 213, 213, 213, 213, 215, 215, 216,
	216, 214, 214, 214, 214, 214, 214, 214, 214, 214,
	214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
	214, 214, 214, 214, 214, 214, 214, 221, 221, 222,
	222, 223, 223, 224, 224, 226, 227, 227, 227, 228,
	232, 232, 225, 225, 229, 229, 229, 230, 230, 231,
	231, 231, 231, 231, 145, 145, 145, 146, 146, 147,
	81, 81, 142, 142, 141, 141, 141, 144, 144, 98,
	185, 185, 185, 185, 185, 185, 185, 99, 99, 106,
	100, 100, 101, 101, 101, 101, 101, 101, 137, 138,
	102, 102, 102, 139, 139, 148, 152, 152, 151, 150,
	150, 149, 149, 129, 129, 129, 129, 128, 127, 87,
	87, 243, 243, 153, 153, 88, 88, 89, 83, 83,
	163, 163, 163, 163, 77, 77, 57, 57, 78, 78,
	53, 53, 56, 54, 54, 54, 54, 71, 71, 72,
	72, 51, 51, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 187, 187, 187, 46, 46, 46,
	47, 47, 48, 48, 192, 192, 192, 193, 193, 193,
	193, 191, 191, 191, 191, 191, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 4, 6, 1, 3,
	2, 5, 3, 6, 4, 6, 6, 6, 4, 8,
	2, 3, 3, 6, 4, 3, 2, 1, 1, 0,
	2, 0, 2, 0, 4, 6, 7, 1, 1, 1,
	1, 6, 3, 5, 4, 6, 4, 6, 1, 3,
	1, 2, 2, 3, 2, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 1, 5, 3, 0,
	1, 1, 1, 1, 3, 3, 0, 2, 3, 2,
	3, 6, 6, 1, 2, 2, 1, 1, 1, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 2,
	3, 6, 3, 1, 5, 2, 1, 1, 1, 3,
	3, 2, 3, 3, 3, 3, 1, 3, 3, 2,
	1, 1, 3, 1, 1, 1, 2, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 1, 1, 1, 1, 1, 0, 1, 1, 2,
	2, 4, 2, 4, 4, 4, 4, 4, 4, 4,
	2, 3, 4, 3, 2, 4, 2, 0, 2, 0,
	7, 10, 5, 8, 1, 0, 1, 3, 1, 1,
	1, 1, 8, 0, 3, 2, 0, 3, 1, 2,
	2, 3, 6, 2, 1, 1, 2, 4, 2, 5,
	7, 8, 5, 3, 1, 4, 6, 5, 10, 1,
	1, 4, 0, 3, 0, 2, 2, 2, 0, 1,
	1, 2, 2, 0, 3, 3, 2, 1, 1, 2,
	2, 1, 2, 1, 4, 11, 14, 1, 0, 1,
	3, 3, 3, 5, 2, 0, 1, 1, 0, 6,
	6, 8, 6, 8, 8, 10, 8, 10, 1, 0,
	2, 0, 2, 2, 3, 3, 2, 2, 2, 1,
	0, 1, 3, 2, 0, 2, 1, 1, 1, 3,
	3, 0, 3, 4, 7, 3, 0, 6, 6, 8,
	5, 7, 1, 3, 1, 4, 2, 8, 5, 4,
	3, 0, 2, 0, 8, 2, 0, 1, 3, 1,
	1, 3, 5, 5, 1, 1, 3, 3, 1, 2,
	3, 2, 3, 4, 1, 1, 8, 8, 1, 2,
	4, 4, 4, 2, 2, 3, 1, 3, 6, 1,
	0, 1, 0, 1, 1, 0, 1, 1, 0, 1,
	0, 3, 1, 3, 2, 2, 2, 1, 1, 2,
	2, 3, 1, 1, 1, 1, 3, 0, 2, 0,
	2, 3, 3, 0, 1, 3, 3, 1, 1, 3,
	2, 4, 0, 3, 2, 1, 4, 3, 4, 5,
	4, 5, 4, 5, 2, 4, 1, 1, 0, 5,
	0, 2, 2, 2, 1, 1, 0, 4, 2, 1,
	2, 2, 4, 1, 3, 1, 2, 3, 2, 0,
	2, 5, 2, 3, 4, 0, 1, 1, 1, 1,
	2, 4, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 5, 0, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 2, 2, 1, 1, 3,
	0, 1, 1, 1, 1, 5, 2, 1, 1, 1,
	1, 4, 1, 2, 2, 1, 1, 1, 0, 1,
	1, 4, 1, 4, 1, 1, 1, 1, 1, 1,
	1, 3, 3, 3, 3, 3, 3, 3, 0, 1,
	4, 1, 3, 3, 5, 2, 2, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	2, 3, 4, 3, 4, 4, 5, 3, 3, 3,
	3, 3, 4, 3, 3, 4, 3, 4, 3, 4,
	5, 6, 6, 7, 6, 7, 6, 7, 3, 4,
	1, 3, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 5, 6, 6, 7, 1, 1,
	1, 3, 1, 1, 1, 2, 2, 2, 1, 1,
	3, 5, 6, 8, 6, 6, 4, 4, 1, 1,
	1, 5, 1, 3, 1, 3, 1, 1, 1, 1,
	6, 6, 4, 4, 4, 4, 6, 5, 5, 5,
	4, 8, 6, 6, 4, 4, 4, 5, 0, 5,
	0, 2, 0, 1, 3, 3, 2, 2, 0, 6,
	1, 0, 3, 0, 2, 2, 0, 1, 4, 2,
	2, 2, 2, 2, 4, 3, 5, 4, 3, 5,
	1, 3, 1, 3, 3, 3, 2, 1, 3, 3,
	1, 1, 1, 1, 1, 1, 1, 4, 3, 2,
	3, 0, 3, 3, 2, 2, 1, 0, 2, 2,
	3, 2, 1, 1, 3, 5, 1, 2, 4, 2,
	0, 1, 0, 1, 1, 3, 5, 2, 2, 1,
	2, 1, 0, 1, 1, 1, 3, 3, 1, 3,
	3, 2, 1, 1, 1, 3, 1, 3, 1, 3,
	1, 2, 3, 1, 1, 2, 2, 1, 3, 3,
	0, 1, 2, 1, 1, 1, 1, 6, 2, 3,
	5, 1, 1, 1, 1, 2, 2, 1, 1, 1,
	1, 0, 3, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -6, -11, -12, -13,
	-15, -17, -18, -19, -20, -22, -23, -25, -24, -26,
	-27, -28, -21, -29, -30, 22, 63, -7, -8, -9,
	-10, -219, 91, 99, 191, 98, 84, 114, 205, 212,
	-31, -33, 220, -122, 221, 33, 229, 57, 94, 207,
	202, 250, 65, -218, -34, -32, 296, 271, 277, 215,
	-35, 237, 264, 299, 237, 77, 127, -53, -46, 4,
	-197, -199, 19, 20, 22, 32, 33, 38, 42, 45,
	56, 57, 58, 60, 62, 63, 64, 67, 68, 75,
	76, 77, 78, 80, 84, 86, 90, 91, 93, 98,
	99, 104, 105, 108, 110, 115, 120, 121, 128, 131,
	126, 139, 141, 142, 147, 150, 153, 155, 156, 157,
	158, 159, 161, 162, 164, 166, 163, 169, 171, 172,
	178, 181, 184, 185, 186, 189, 191, 193, 194, 195,
	197, 198, 202, 200, 201, 203, 205, 207, 208, 210,
	212, 213, 214, 217, 218, 220, 221, 223, 226, 228,
	229, 230, 233, 231, 236, 238, 239, 246, 250, 251,
	252, 253, 256, 257, 258, 261, 262, 263, 267, 272,
	273, 274, 275, 27, 34, 35, 36, 37, 39, 40,
	43, 44, 48, 49, 50, 52, 79, 81, 82, 97,
	100, 106, 116, 118, 122, 123, 132, 133, 134, 136,
	145, 168, 170, 179, 183, 188, 190, 196, 209, 216,
	224, 225, 232, 234, 241, 242, 243, 247, 248, 264,
	265, 86, 131, 258, 257, 77, 127, 237, -14, 296,
	-24, -6, -12, -4, -20, -30, -11, -13, 22, -46,
	-46, -46, 191, 21, -237, 21, -238, -239, 65, 91,
	114, 215, 131, 86, 257, -237, -50, 212, -46, -118,
	150, 218, 209, 246, -119, -117, -190, 241, 159, -79,
	-46, 4, 77, 56, 78, 115, 127, 128, 61, 62,
	142, 238, 241, 246, 21, 65, -242, 246, 246, -242,
	-242, -49, 246, 244, -50, -241, 237, 237, -107, 77,
	255, -32, -34, -33, -67, -68, 254, 135, 96, 177,
	-31, -33, -218, -220, 197, -217, -46, -220, -64, -65,
	21, 88, 300, -161, -53, 175, -89, 296, -3, -161,
	122, -46, -56, 122, -53, 112, 296, -87, -129, -128,
	-127, 294, 298, 112, 137, 137, -162, -161, -46, 122,
	-57, 122, -56, -80, 122, -79, -167, -166, -193, 4,
	-197, -199, -198, 264, 54, 66, 113, 130, 124, 138,
	140, 146, 148, 160, 180, 182, 206, 222, 237, -143,
	296, -103, 296, -46, 21, 174, 300, 174, -46, -118,
	50, -118, 296, -120, -44, -45, 139, 193, 244, 281,
	112, 275, -60, 5, 83, -82, 298, 112, -234, 174,
	112, 112, 112, 112, 112, 112, 275, 139, 193, 237,
	-121, -44, -45, -121, 244, -50, -92, -161, -79, 122,
	127, -46, 122, -67, -68, -91, -110, -111, 149, 173,
	-94, 21, 88, -94, -94, 42, 297, 297, 300, -220,
	-72, 296, -83, -163, -133, 289, -135, 287, 288, 293,
	165, 276, -145, -53, -136, 9, 296, -148, -215, -33,
	97, 28, -146, -147, 209, -46, 7, 8, 5, 6,
	-51, -170, -179, 249, 101, 167, 46, -213, -214, 4,
	-197, -192, -171, -181, -175, -178, 136, 54, 70, 73,
	71, 74, 219, 259, 47, 27, 100, 183, 188, 234,
	247, 248, 122, 168, 123, 52, 116, 145, 90, 35,
	37, 39, 40, 48, 49, 79, 81, 82, 106, 132,
	133, 134, 170, 196, 224, 232, 242, 243, 265, -198,
	-182, -183, -176, -177, -184, -83, -89, 289, -53, 296,
	-88, -153, -133, 83, -40, 200, -39, 20, 22, 91,
	262, 97, 200, 200, 97, 301, 230, 297, -77, -53,
	-129, -133, -191, 289, 4, -197, -199, -198, -200, 21,
	23, 24, 25, 26, 28, 29, 30, 31, 41, 46,
	47, 51, 53, 55, 61, 65, 69, 70, 71, 72,
	73, 74, 83, 85, 87, 88, 89, 92, 94, 96,
	101, 102, 103, 109, 111, 112, 114, 117, 119, 125,
	127, 129, 135, 137, 143, 144, 149, 151, 152, 165,
	167, 173, 174, 175, 176, 177, 187, 192, 199, 204,
	215, 219, 227, 235, 237, 240, 244, 245, 249, 254,
	255, 259, 260, 266, 268, 269, 270, 271, -162, -55,
	-53, -55, 220, -46, 29, 97, -42, 300, 45, 203,
	97, -42, 300, 97, 297, 300, -161, 122, 29, -142,
	-168, -169, -171, -180, -174, -178, -179, 38, 44, 43,
	239, 216, 225, 36, 132, 133, 134, 224, 35, 196,
	106, 90, 82, 81, 170, 40, 39, -182, -183, -176,
	-177, 79, 242, 243, 136, 37, 49, 48, 265, 232,
	-81, -133, -233, -78, 237, 77, -54, -46, 289, -239,
	-233, 29, -81, 300, 300, 147, -59, 153, 164, 120,
	-189, 83, -195, -188, -154, 9, 249, 101, 174, -194,
	8, 288, -187, -193, 5, 7, 287, -189, 83, 68,
	-196, 5, 4, -179, -154, 83, 150, 298, -191, -190,
	-236, 109, -233, -190, -190, -190, -190, -190, -46, 147,
	-190, 300, 300, -50, -42, 300, 296, 29, 165, -47,
	122, -46, -43, 93, 165, -91, -111, -110, -112, -133,
	21, -133, -135, -32, -32, -32, -69, -157, -133, -217,
	29, -71, -46, -74, 300, 112, 10, 53, 32, 287,
	288, 289, 290, 107, 291, 284, 285, 286, 283, 279,
	280, 281, 59, 154, 211, 12, 13, 14, 25, 176,
	148, 276, 124, 222, 293, 15, 16, 17, 138, 34,
	125, 29, 4, -133, -133, -133, -133, -133, 182, -33,
	-133, -81, -87, -33, -141, 294, 296, -87, 296, 5,
	5, 296, -149, -133, -221, 272, 109, 296, 296, 296,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 190, -186, 267, -186, -186, -172, 296,
	-172, -173, 296, -172, 273, 277, 296, -74, -53, 300,
	297, 300, 244, -108, 61, 55, -124, 122, 55, -201,
	-46, 61, -202, 51, 255, 192, 111, -108, 61, -108,
	61, 61, -161, 244, 244, -56, -46, 112, 297, 300,
	295, 304, -126, 269, -114, -24, 296, 83, 29, -114,
	-84, -85, -164, -86, -53, 296, -46, -46, -56, -57,
	-79, -80, -14, -166, 97, -16, -24, -20, -30, -11,
	297, 300, -73, 28, -104, 296, 274, 157, 80, 121,
	156, -105, 214, 297, 300, 244, 300, -78, -71, -128,
	-127, 112, 246, 297, -45, -44, -58, 195, 226, 201,
	217, 300, 8, 7, 7, 5, -191, -235, -46, -45,
	-44, -161, -61, -62, -125, -124, -203, -204, -201, 127,
	255, 102, -24, 97, 174, 165, 281, 97, -113, 209,
	210, 300, -38, 30, 87, 296, 300, 297, -126, -163,
	-76, -159, -161, -33, -160, 296, -168, -79, 241, -133,
	-133, -133, -133, -133, -133, -133, -133, -133, -133, -133,
	-133, -133, -133, -133, -133, -133, -133, -133, -133, -133,
	-133, 148, 124, 222, 34, 125, -133, 244, -133, -133,
	-133, -133, 167, 165, 249, 101, 256, 88, 171, -243,
	235, 31, -139, -33, 296, -191, -145, 209, 296, 297,
	300, -81, -144, 295, -141, -81, 297, 297, -81, 266,
	21, 88, 289, -104, 7, -152, -151, 268, -222, 104,
	117, 296, 297, 297, -133, -133, -98, -185, 4, 274,
	157, 80, 121, 156, 214, -99, -133, -100, -134, -135,
	287, 288, 293, 296, 209, -101, -133, -81, -133, 41,
	144, 245, -102, -133, 112, -81, -133, -133, -133, -81,
	-81, -81, 296, 7, 7, 241, 241, 7, -126, 297,
	-153, -39, -53, -46, -46, 165, -124, 122, -168, -46,
	296, 296, 141, 141, -46, -46, 122, -46, 122, -46,
	-46, -40, 200, -46, -46, 200, 230, 112, -53, -133,
	-93, 204, -133, -93, -116, 174, -77, 264, -46, 204,
	-75, 300, 112, 281, -77, -42, -42, -161, -168, 294,
	294, 7, 244, 244, 244, 244, 296, -133, -235, -54,
	-235, -44, 253, 58, 195, -195, -104, 300, 297, 300,
	-47, 127, -47, -79, -53, 97, 5, -46, -157, -16,
	-46, -90, 117, -165, 300, 278, 66, -97, 140, 160,
	113, 146, 206, 130, -130, 301, -156, -155, 29, -46,
	-33, -160, -159, 275, -133, -133, 244, -243, 235, -139,
	-133, 167, 249, 101, 256, 88, 171, 112, 296, -134,
	-134, -81, 296, -81, -133, 295, 295, 300, 297, -68,
	300, -67, -133, -81, -81, 297, 297, -150, -151, 92,
	-133, -227, 181, 296, 296, -133, 29, 300, 297, 112,
	297, -106, 187, 297, 10, 287, 288, 289, 290, 107,
	291, 284, 285, 286, 283, 279, 280, 281, 59, 154,
	211, 12, 13, 14, 138, 125, -134, -134, -134, -81,
	296, 297, -137, -138, 112, 109, 29, -102, -102, -102,
	297, 112, -81, 300, 300, 300, 297, 297, 297, 7,
	297, 300, 297, 275, 275, 297, -90, 244, 244, 97,
	165, -205, -202, -133, -71, 296, 296, -37, 91, 220,
	-109, 97, -42, 97, -42, 244, -108, 61, 244, 230,
	295, -83, 204, 60, 297, -83, -126, -85, -76, -153,
	297, 295, 7, 7, 297, 157, 121, 156, -105, 156,
	-105, -105, 7, -46, -63, 126, -125, 296, -47, 296,
	296, 29, 296, -46, -43, 297, -140, 119, 42, -159,
	171, 140, 140, -159, -97, 140, -95, 180, -95, -95,
	-156, -191, 302, -46, 296, 297, -133, -133, -134, -134,
	112, 296, -133, -142, 25, 25, 297, -81, 297, 300,
	297, -141, 297, 266, -68, -68, -68, 5, 94, -133,
	240, -228, -46, 296, 269, -67, 297, -168, -168, -133,
	-137, -133, -168, -134, -134, -134, -134, -134, -134, -134,
	-134, -134, -134, -134, -134, -134, -134, -134, -134, -134,
	-134, -134, 88, 165, 171, -134, 300, -81, 297, -138,
	-137, -133, -133, -168, 297, 297, 297, -81, -133, -133,
	-133, 297, 7, -140, -46, -46, -124, 97, -206, 61,
	-207, 53, 102, 65, 165, 167, 255, 192, 51, 83,
	199, 297, 297, -71, -71, 165, 83, 165, 83, 76,
	251, -46, -46, -53, -46, -46, -46, -83, -115, 296,
	174, -24, -93, 281, 295, 295, 297, 125, -70, -158,
	-46, -216, 296, -213, -214, -51, 296, -71, -61, -24,
	-70, 174, -223, 270, -133, -81, 236, -159, -159, -96,
	260, 174, 140, -159, -132, -131, 110, 163, 296, -71,
	-155, 25, 25, -133, -142, 297, -133, -133, 297, -133,
	5, -133, 297, 297, 297, -133, -232, -46, -133, 297,
	297, 297, -138, 112, 88, 171, 296, -133, 297, 297,
	300, 297, 297, 297, -223, -124, -46, -79, -46, 102,
	122, 167, 141, 296, -134, -53, -123, -240, 64, 233,
	297, 297, 167, 167, -133, -168, -42, -42, 244, 244,
	89, -71, 61, -89, -33, 296, 184, 297, 300, -52,
	-87, 53, -52, -133, 296, -70, 297, 297, 297, -53,
	-224, -226, -46, 241, -96, 296, -133, -159, 300, 303,
	281, -71, 297, -133, -133, 297, 297, -68, -225, 186,
	297, -134, 112, 296, -142, 297, -133, -207, -47, 165,
	-133, -48, 296, -63, 296, 199, -41, 53, -46, -46,
	257, 166, 297, -46, -46, -123, -158, -38, -79, -38,
	297, -81, 297, -63, -123, 296, 300, 29, 5, -71,
	-131, -191, 297, 297, -68, 42, -134, -142, 297, 297,
	97, 297, -210, 155, -46, -71, -53, -36, 260, -79,
	220, -126, 296, -63, -52, -68, -123, -63, -70, -226,
	-228, 297, -229, 194, 210, -81, 297, 102, -208, -211,
	-209, 174, 113, 185, 223, 297, 297, -66, 296, -133,
	-84, -71, -38, 297, -63, 297, 297, -230, -231, 34,
	252, 68, -133, -230, -46, -209, 174, -211, 174, 257,
	86, -210, -71, -126, 297, -123, -231, 189, 108, 209,
	189, 108, -212, 162, 203, 45, 220, -212, -208, 297,
	-42, -63, 25, 19, 167, 83, -231,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 0, 0, 57, 58, 59,
	60, 0, 0, 360, 0, 0, 0, 0, 0, 0,
	334, -2, 0, 123, 0, 290, 0, 290, 290, 294,
	0, 362, 258, 359, -2, 370, 0, 0, 0, 368,
	348, 0, 0, -2, 0, 0, 0, 0, 760, 787,
	788, 789, 806, 807, 808, 809, 810, 811, 812, 813,
	814, 815, 816, 817, 818, 819, 820, 821, 822, 823,
	824, 825, 826, 827, 828, 829, 830, 831, 832, 833,
	834, 835, 836, 837, 838, 839, 840, 841, 842, 843,
	844, 845, 846, 847, 848, 849, 850, 851, 852, 853,
	854, 855, 856, 857, 858, 859, 860, 861, 862, 863,
	864, 865, 866, 867, 868, 869, 870, 871, 872, 873,
	874, 875, 876, 877, 878, 879, 880, 881, 882, 883,
	884, 885, 886, 887, 888, 889, 890, 891, 892, 893,
	894, 895, 896, 897, 898, 899, 900, 901, 902, 903,
	904, 905, 906, 907, 908, 909, 910, 911, 912, 913,
	914, 915, 916, 917, 918, 919, 920, 921, 922, 923,
	924, 925, 926, 927, 928, 929, 930, 931, 932, 933,
	934, 935, 936, 937, 938, 939, 940, 941, 942, 943,
	944, 945, 946, 947, 948, 949, 950, 951, 952, 953,
	954, 955, 956, 957, 958, 959, 960, 961, 962, 963,
	964, 0, 0, 0, 0, 0, 0, 0, 74, 0,
	76, 77, 78, 79, 80, 81, 82, 83, 0, 89,
	96, 97, 870, 99, 0, 106, 107, 108, 110, 111,
	112, 113, 114, 115, 116, 0, 283, 884, 296, 119,
	849, 888, 952, 901, 126, 136, 0, 958, -2, 140,
	70, 169, 170, 0, 172, 187, 0, 0, 0, 0,
	0, 180, 0, 0, 184, 0, 301, 289, 301, 286,
	287, 288, 291, 0, 282, 0, 361, 0, 0, 0,
	257, -2, 344, 345, -2, 0, 365, 365, 365, 0,
	0, 345, 0, 353, 874, 356, 770, 354, 0, 0,
	367, 366, 0, 349, 429, 0, 390, 0, 2, 0,
	938, 0, 0, 938, 0, 0, 0, 761, 739, 733,
	734, 0, 0, 0, 0, 0, 0, 435, 62, 938,
	49, 938, 756, 49, 938, 68, 0, 84, 86, 797,
	798, 799, 800, 963, 965, 966, 967, 968, 969, 970,
	971, 972, 973, 974, 975, 976, 977, 978, 0, 0,
	0, 94, 0, 98, 100, 0, 0, 0, 295, 120,
	928, 122, 0, 125, 127, 128, 0, 0, 0, 0,
	0, 0, 139, 164, 165, 71, 0, 0, 189, 0,
	0, 0, 0, 0, 0, 0, 181, 0, 183, 0,
	284, 297, 298, 285, 0, 293, 49, 433, 0, 938,
	791, 306, 938, -2, 0, 340, 377, 378, 0, 0,
	0, 363, 364, 0, 0, 0, 336, 337, 0, 355,
	0, 0, 393, 748, 752, 753, 521, 0, 0, 0,
	0, 0, 0, 608, 609, 610, 0, 612, 613, 614,
	933, 0, 618, 619, 952, 760, 773, 774, 775, 776,
	0, 0, 0, 781, 782, 783, 732, 658, 628, -2,
	-2, 771, 459, 460, 461, 462, -2, 965, 632, 634,
	636, 637, 638, 639, 0, 917, 934, 948, 949, 957,
	961, 962, 938, 945, 939, 929, 936, 944, 830, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, 796,
	483, 484, 489, 490, 492, 393, 391, 430, 431, 0,
	0, 745, 743, 744, 26, 279, 28, 0, 279, 279,
	0, 0, 0, 0, 0, 0, 54, 0, 0, 754,
	740, 0, 737, 738, 801, 802, 803, 804, 805, 979,
	980, 981, 982, 983, 984, 985, 986, 987, 988, 989,
	990, 991, 992, 993, 994, 995, 996, 997, 998, 999,
	1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009,
	1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019,
	1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029,
	1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039,
	1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049,
	1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 439, 0,
	312, 0, 0, 436, 0, 0, 64, 0, 47, 48,
	0, 66, 0, 0, 360, 0, 0, 938, 360, 0,
	692, 445, 446, 447, 448, 449, 518, 452, 453, 454,
	455, 456, 457, 458, 466, 467, 468, 469, 470, 471,
	480, 0, 465, 465, 465, 477, 478, 481, 482, 487,
	488, 499, 500, 502, 504, 498, 498, 498, 495, 496,
	0, 690, 0, 103, 0, 825, 758, 763, 764, 109,
	0, 0, 0, 0, 0, 0, 131, 151, 152, 153,
	132, 134, 141, 143, 144, 145, 154, 155, 156, 157,
	251, 0, 253, 167, 168, 784, 0, 133, 135, 137,
	138, 158, 159, 0, 161, 162, 163, 0, 72, 171,
	173, 0, 186, 174, 175, 176, 177, 178, 179, 182,
	185, 0, 0, 292, 254, 0, 195, 0, 0, 0,
	938, 790, 303, 0, 0, 343, 375, 376, 379, 382,
	383, 380, 521, 350, 351, 352, 371, 372, 268, 357,
	0, 0, 767, 439, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 742,
	0, 0, 751, 525, 526, 527, 549, 550, 0, -2,
	690, 0, 615, 616, 617, 0, 0, -2, 0, 778,
	518, 0, 0, 731, 660, 0, 0, 0, 0, 0,
	0, 0, 0, 711, 717, 0, 0, 0, 0, 0,
	0, 0, 0, 473, 486, 497, 494, 493, 475, 0,
	474, 472, 0, 476, 0, 0, 0, 439, 0, 0,
	747, 0, 0, 0, 0, 278, 30, 938, 0, 40,
	0, 0, 224, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 762, 0, 0, 0,
	735, 0, 323, 0, 323, 314, 0, 0, 0, 310,
	326, 327, 329, 330, 0, 0, 437, 63, 757, 49,
	69, 49, 75, 85, 0, 87, 90, 91, 92, 93,
	88, 0, 440, 442, 450, 0, 505, 506, 507, 508,
	509, 510, 519, 95, 0, 0, 0, 104, 105, 765,
	766, 0, 0, 124, 129, 130, 302, 0, 148, 0,
	150, 0, 252, 786, 785, 518, 73, 188, 117, 299,
	300, 434, 0, 194, 196, 198, 199, 200, 201, 791,
	0, 791, 192, 0, 0, 0, 0, 0, 381, 384,
	385, 0, 374, 266, 267, 360, 0, 769, 387, 749,
	420, 394, 402, 418, 405, 0, 522, 523, 0, 528,
	529, 530, 531, 532, 533, 534, 535, 536, 537, -2,
	-2, -2, 541, 542, 543, -2, -2, -2, 547, 548,
	-2, 0, 0, 0, 742, 0, -2, 0, 557, -2,
	-2, -2, 561, 0, 564, 566, 568, 0, 0, 0,
	0, 741, 578, 723, 0, 750, 563, 0, 0, 611,
	0, 0, 0, 696, 697, 0, -2, 620, 370, 0,
	0, 0, 0, 779, 0, 730, 726, 0, 668, 0,
	0, 0, 633, 635, 0, 0, 0, 0, 700, 701,
	702, 703, 704, 705, 706, 0, 0, 0, 0, 580,
	0, 0, 0, 0, 952, 0, 690, 716, 0, 0,
	0, 0, 0, 690, 0, 722, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 387, 432,
	746, 29, 270, 0, 0, 0, 32, 938, 206, 0,
	0, 0, 0, 0, 281, 41, 938, 49, 938, 49,
	42, 27, 279, 269, 272, 0, 55, 0, 755, 0,
	61, 0, 438, 307, 308, 0, 0, 316, 313, 0,
	439, 0, 0, 0, 0, 65, 67, 0, 693, 0,
	0, 0, 0, 0, 0, 0, 0, 691, 101, 759,
	102, 121, 146, 147, 149, 142, 160, 0, 203, 0,
	0, 791, 0, 0, 0, 0, 305, 306, 373, 0,
	768, 389, 0, 392, 0, 0, 0, 0, 0, 0,
	426, 426, 426, 424, 418, 0, 404, 417, 0, 416,
	-2, 405, 0, 0, -2, -2, 0, 0, 0, 579,
	-2, 562, 565, 567, 569, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 691, 694, 695, 0, -2, 0,
	0, 369, 370, 370, 370, 626, 0, 0, 727, 0,
	0, 627, 0, 0, 0, 0, 0, 0, 642, 0,
	643, 0, 0, 644, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 582, 583, 584, 0,
	0, 645, 714, 715, 0, 0, 0, 0, 0, 0,
	650, 0, 721, 0, 0, 0, 654, 655, 656, 0,
	463, 0, 479, 501, 503, 491, 389, 0, 0, 0,
	0, 204, 223, 0, 0, 0, 0, 34, 0, 0,
	0, 0, 38, 0, 44, 0, 0, 0, 0, 56,
	736, 322, 0, 321, 0, 311, 323, 328, 325, 331,
	0, 443, 0, 0, 451, 511, 512, 513, 514, 515,
	516, 517, 0, 118, 190, 0, 197, 0, 0, 0,
	195, 0, 0, 0, 304, 358, 662, 0, 0, 395,
	0, 0, 0, 0, 0, 0, 421, 425, 422, 423,
	403, 400, 0, 414, 0, 407, 524, -2, 0, 0,
	0, 0, -2, 0, 0, 0, 724, 0, 685, 0,
	-2, 698, 621, 0, 0, 0, 0, 780, 725, 729,
	0, 666, 667, 671, 0, 0, 631, 0, 0, 699,
	708, 709, 581, 585, 586, 587, 588, 589, 590, 591,
	592, 593, 594, -2, -2, -2, 598, 599, 600, -2,
	-2, -2, 0, 0, 0, 710, 0, 0, 688, 712,
	713, 718, 719, 0, 647, 648, 649, 720, 0, 0,
	0, 485, 0, 662, 274, 276, 31, 0, 205, 0,
	208, 0, 0, 0, 0, 214, 215, 0, 0, 0,
	0, 225, 232, 0, 0, 0, 46, 0, 0, 280,
	0, 49, 49, 271, 0, 0, 273, 309, 0, 0,
	0, 315, 324, 0, 444, 441, 520, 0, 0, 259,
	265, 265, 0, 629, 630, 0, 0, 0, 0, 193,
	0, 0, 346, 0, 388, 386, 0, 408, 0, 410,
	0, 0, 0, 412, 0, 398, 0, 397, 0, 0,
	406, 0, 0, -2, 0, 572, -2, -2, 684, 691,
	777, 370, 622, 624, 625, 728, 673, 670, 0, 657,
	640, 641, 707, 0, 0, 0, 0, 691, 687, 646,
	0, 652, 653, 464, 347, 33, 0, 209, 210, 791,
	0, 213, 216, 0, 218, 793, 203, 0, 229, 230,
	227, 0, 35, 36, 45, 51, 37, 43, 0, 0,
	0, 0, 0, 332, 333, 0, 0, 232, 0, 268,
	772, 0, 268, 0, 0, 0, 222, 203, 232, 0,
	661, 663, 0, 0, 409, 0, 428, 411, 0, 401,
	0, 0, 415, -2, -2, 573, 686, 0, 370, 0,
	659, -2, 0, 0, 0, 689, 0, 207, 211, 0,
	0, 238, 0, 226, 0, 0, 53, 0, 275, 277,
	0, 318, 439, 320, 0, 203, 260, 261, 264, 262,
	265, 370, 232, 191, 203, 0, 0, 0, 419, 0,
	399, 396, 413, 623, 676, 0, -2, 0, 606, 651,
	0, 217, 243, 0, 0, 0, 234, 39, 0, 50,
	0, 319, 0, 220, 268, 0, 203, 255, 0, 664,
	665, 427, 0, 0, 0, 672, 607, 0, 219, 239,
	240, 0, 235, 236, 237, 792, 231, 238, 0, 52,
	439, 0, 263, 621, 221, 232, 669, 674, 677, -2,
	904, 822, 0, 675, 212, 241, 0, 242, 0, 0,
	0, 243, 0, 317, 49, 203, 0, 679, 680, 681,
	682, 683, 244, 0, 247, 248, 0, 245, 228, 233,
	202, 256, 0, 246, 249, 250, 678,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 285, 3, 291, 286, 3,
	296, 297, 289, 287, 300, 288, 298, 290, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 304, 299,
	279, 281, 280, 3, 301, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 294, 3, 295, 284, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 302, 283, 303, 293,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 282, 57622, 292, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:714
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:720
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:726
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 18:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:750
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 25:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:760
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 26:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:766
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 27:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:770
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 28:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:776
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 29:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:780
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:787
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 31:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:792
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 32:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:797
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 33:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:802
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:807
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:812
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 36:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:816
		{
			unimplemented()
		}
	case 37:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:819
		{
			sqlVAL.union.val = &AlterTableDropColumn{columnKeyword: sqlDollar[2].union.bool(), IfExists: true, Column: Name(sqlDollar[5].str)}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:824
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 39:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:834
		{
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:837
		{
			sqlVAL.union.val = &AlterTableAddConstraint{ConstraintDef: sqlDollar[2].union.constraintDef()}
		}
	case 41:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:841
		{
			unimplemented()
		}
	case 42:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:843
		{
			unimplemented()
		}
	case 43:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:846
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 44:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:855
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 45:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:865
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 46:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:869
		{
			sqlVAL.union.val = nil
		}
	case 47:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:875
		{
			sqlVAL.union.val = DropCascade
		}
	case 48:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:879
		{
			sqlVAL.union.val = DropRestrict
		}
	case 49:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:883
		{
			sqlVAL.union.val = DropDefault
		}
	case 50:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:888
		{
			unimplementedWithIssue(2473)
		}
	case 51:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:889
		{
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:892
		{
			unimplemented()
		}
	case 53:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:893
		{
		}
	case 54:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:897
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 55:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:901
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 56:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:905
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:919
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retExprs()}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:926
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:930
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:934
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:942
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 66:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:950
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:954
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:960
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 69:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:964
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 70:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:970
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 71:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:974
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 72:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:980
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 73:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:984
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 74:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:991
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 75:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:995
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1001
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 83:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1010
		{ /* SKIP DOC */
		}
	case 84:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1014
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1018
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 87:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1028
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1038
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 89:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1042
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 90:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1048
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 94:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1058
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1069
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 96:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1073
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 97:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1080
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1086
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1092
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1096
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1103
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1110
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1117
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1121
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1125
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1132
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1135
		{
		}
	case 108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1139
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1143
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 110:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1150
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 111:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1154
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 112:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1158
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 113:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1162
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1166
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1170
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1174
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1182
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1186
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1194
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1198
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 121:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1202
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1206
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1209
		{ /* SKIP DOC */
		}
	case 124:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1215
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1221
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1228
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1232
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1236
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1240
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1247
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1253
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1257
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1261
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1265
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1272
		{
			unimplemented()
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1275
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1278
		{
			unimplemented()
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1285
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1289
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1297
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1303
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 147:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1307
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1311
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 149:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1315
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1319
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1325
		{
			sqlVAL.union.val = Low
		}
	case 152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1329
		{
			sqlVAL.union.val = Normal
		}
	case 153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1333
		{
			sqlVAL.union.val = High
		}
	case 154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1339
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1343
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1347
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1362
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1366
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1370
		{
			d, err := ParseDInterval(sqlDollar[2].str)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1380
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1384
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1389
		{
			unimplemented()
		}
	case 165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1390
		{
			unimplemented()
		}
	case 166:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1391
		{
		}
	case 167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1395
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1399
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1405
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1409
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1413
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1417
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1421
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1425
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1429
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1433
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1437
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1441
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1445
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1449
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1453
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1457
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1461
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1465
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 185:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1469
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1475
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 187:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1480
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1486
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 189:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1490
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 190:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1497
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1501
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1507
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[5].union.slct()}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1511
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[8].union.slct()}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1518
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1524
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1528
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1534
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1540
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 202:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1546
		{
			/* SKIP DOC */
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1554
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1560
		{
			sqlVAL.union.val = newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
		}
	case 205:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1566
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 206:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1570
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1576
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1580
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1583
		{
			unimplemented()
		}
	case 210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1585
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1589
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1593
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1611
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1615
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1619
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1623
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1627
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1631
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1635
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1644
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1653
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 222:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1666
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1678
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 224:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1683
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 225:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1689
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 226:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1695
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    NameListToIndexElems(sqlDollar[3].union.nameList()),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 227:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1705
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[4].union.nameList()),
				},
				PrimaryKey: true,
			}
		}
	case 228:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1715
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 231:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1738
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 232:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1742
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 233:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1748
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 234:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1752
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 235:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1757
		{
			unimplemented()
		}
	case 236:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1758
		{
			unimplemented()
		}
	case 237:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1759
		{
			unimplemented()
		}
	case 238:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1760
		{
		}
	case 239:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1767
		{
			unimplemented()
		}
	case 240:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1768
		{
			unimplemented()
		}
	case 241:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1769
		{
			unimplemented()
		}
	case 242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1770
		{
			unimplemented()
		}
	case 243:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1771
		{
		}
	case 244:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1774
		{
			unimplemented()
		}
	case 245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1777
		{
			unimplemented()
		}
	case 246:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1780
		{
			unimplemented()
		}
	case 247:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1781
		{
			unimplemented()
		}
	case 248:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1782
		{
			unimplemented()
		}
	case 249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1783
		{
			unimplemented()
		}
	case 250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1784
		{
			unimplemented()
		}
	case 251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1788
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 252:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1792
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 253:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1796
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 254:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1803
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 255:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:1810
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:1821
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1835
		{
			sqlVAL.union.val = true
		}
	case 258:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1839
		{
			sqlVAL.union.val = false
		}
	case 259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1845
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 260:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1849
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 261:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1858
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1861
		{
			unimplemented()
		}
	case 263:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1862
		{
			unimplemented()
		}
	case 264:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1865
		{
			unimplemented()
		}
	case 265:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1866
		{
		}
	case 266:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1870
		{
			sqlVAL.union.val = Ascending
		}
	case 267:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1874
		{
			sqlVAL.union.val = Descending
		}
	case 268:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1878
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 269:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1885
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1889
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1893
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1897
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1901
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1905
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1909
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1913
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 277:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1917
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 278:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1923
		{
			sqlVAL.union.val = true
		}
	case 279:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1927
		{
			sqlVAL.union.val = false
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1932
		{
		}
	case 281:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1933
		{
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1937
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1943
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1950
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1954
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 286:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1958
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1962
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1966
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1975
		{
		}
	case 290:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1976
		{
		}
	case 291:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1980
		{
			sqlVAL.str = ""
		}
	case 292:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1984
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 293:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1988
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 294:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1992
		{
			sqlVAL.str = ""
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1998
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2002
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 297:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2008
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2012
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2016
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2020
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2024
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2030
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 303:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2036
		{
			sqlVAL.union.val = &CreateDatabase{Name: Name(sqlDollar[3].str), Encoding: sqlDollar[4].union.strVal()}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2040
		{
			sqlVAL.union.val = &CreateDatabase{IfNotExists: true, Name: Name(sqlDollar[6].str), Encoding: sqlDollar[7].union.strVal()}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2046
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2049
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 307:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2059
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retExprs()
		}
	case 308:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2065
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
		}
	case 309:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2070
		{
			unimplementedWithIssue(6637)
		}
	case 310:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2072
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2077
		{
			unimplementedWithIssue(6637)
		}
	case 312:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2085
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2089
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2095
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2099
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2103
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2109
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2113
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2119
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 320:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2123
		{
			unimplemented()
		}
	case 321:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2125
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 322:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2131
		{
			sqlVAL.union.val = sqlDollar[2].union.selExprs()
		}
	case 323:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2135
		{
			sqlVAL.union.val = SelectExprs(nil)
		}
	case 324:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2142
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retExprs()}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2148
		{
			unimplementedWithIssue(7841)
		}
	case 326:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2149
		{
		}
	case 327:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2153
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2157
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 331:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2167
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2179
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2183
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2227
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2233
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2237
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2252
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2256
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2260
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2264
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2268
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2272
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2306
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2318
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2330
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2338
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2347
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2356
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2374
		{
			unimplemented()
		}
	case 354:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2375
		{
			unimplemented()
		}
	case 355:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2376
		{
			unimplemented()
		}
	case 356:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2379
		{
			unimplemented()
		}
	case 357:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2380
		{
			unimplemented()
		}
	case 358:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2383
		{
			unimplemented()
		}
	case 359:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2386
		{
			unimplemented()
		}
	case 360:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2387
		{
		}
	case 361:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2390
		{
		}
	case 362:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2391
		{
		}
	case 363:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2395
		{
			sqlVAL.union.val = true
		}
	case 364:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2399
		{
			sqlVAL.union.val = false
		}
	case 365:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2403
		{
			sqlVAL.union.val = false
		}
	case 366:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2409
		{
			sqlVAL.union.val = true
		}
	case 367:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2414
		{
		}
	case 368:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2415
		{
		}
	case 369:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2419
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 370:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2423
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 371:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2429
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 372:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2435
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2439
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2445
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2453
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2462
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2473
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2486
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2493
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2500
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 384:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2514
		{
		}
	case 385:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2515
		{
		}
	case 386:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2541
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 387:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2545
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2551
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 389:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2555
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 390:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2561
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2565
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 392:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2577
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2581
		{
			sqlVAL.union.val = &From{}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2587
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2591
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 396:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2597
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2602
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2608
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 399:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2613
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			index := a.Index
			if index == "" {
				index = b.Index
			} else if b.Index != "" {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			noIndexJoin := a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = &IndexHints{Index: index, NoIndexJoin: noIndexJoin}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2633
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2637
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 402:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2641
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2648
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), As: sqlDollar[3].union.aliasClause()}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2652
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, As: sqlDollar[2].union.aliasClause()}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2656
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 406:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2660
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[2].union.tblExpr(), As: sqlDollar[4].union.aliasClause()}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2680
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2684
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2688
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2692
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2696
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2700
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2706
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2710
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2714
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2718
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2725
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2731
		{
			sqlVAL.union.val = AsOfClause{Expr: &StrVal{s: sqlDollar[5].str}}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2735
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2741
		{
			sqlVAL.str = astFullJoin
		}
	case 422:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2745
		{
			sqlVAL.str = astLeftJoin
		}
	case 423:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2749
		{
			sqlVAL.str = astRightJoin
		}
	case 424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2753
		{
			sqlVAL.str = astInnerJoin
		}
	case 425:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2759
		{
		}
	case 426:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2760
		{
		}
	case 427:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2771
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2775
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2781
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 430:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2785
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2789
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 432:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2793
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2799
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2803
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2816
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 436:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2820
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2824
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2830
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 439:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2834
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 440:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2846
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 441:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2850
		{
			unimplementedWithIssue(2115)
		}
	case 442:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2851
		{
			unimplementedWithIssue(2115)
		}
	case 443:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2854
		{
			unimplementedWithIssue(2115)
		}
	case 444:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2855
		{
			unimplementedWithIssue(2115)
		}
	case 445:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2856
		{
		}
	case 451:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2864
		{
			unimplemented()
		}
	case 452:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2866
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 453:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2870
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 454:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2874
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 455:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2878
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 456:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2882
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 457:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2886
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 458:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2890
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 463:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2911
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2920
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2934
		{
			sqlVAL.union.val = nil
		}
	case 466:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2941
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 467:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2945
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 468:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2949
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 469:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2953
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2957
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 471:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2961
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 472:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2965
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newFloatColType(int(prec))
		}
	case 473:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2974
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 474:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2978
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2987
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2996
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3005
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 478:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3009
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 479:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3015
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 480:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3019
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3037
		{
			n, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 486:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3053
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 491:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3069
		{
			n, err := sqlDollar[3].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3085
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 493:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3091
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 494:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3095
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 495:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3099
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 496:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3103
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 497:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3108
		{
		}
	case 498:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3109
		{
		}
	case 499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3114
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 500:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3118
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 501:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3122
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 502:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3126
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 503:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3130
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 504:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3135
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 505:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3140
		{
			unimplemented()
		}
	case 506:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3141
		{
			unimplemented()
		}
	case 507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3142
		{
			unimplemented()
		}
	case 508:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3143
		{
			unimplemented()
		}
	case 509:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3144
		{
			unimplemented()
		}
	case 510:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3145
		{
			unimplemented()
		}
	case 511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3146
		{
			unimplemented()
		}
	case 512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3147
		{
			unimplemented()
		}
	case 513:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3148
		{
			unimplemented()
		}
	case 514:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3149
		{
			unimplemented()
		}
	case 515:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3150
		{
			unimplemented()
		}
	case 516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3151
		{
			unimplemented()
		}
	case 517:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3152
		{
			unimplemented()
		}
	case 518:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3153
		{
		}
	case 519:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3156
		{
			unimplemented()
		}
	case 520:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3157
		{
			unimplemented()
		}
	case 522:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3181
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3189
		{
			unimplemented()
		}
	case 524:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3190
		{
			unimplemented()
		}
	case 525:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3199
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3203
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3207
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3211
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3215
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3219
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3223
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3227
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3231
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3235
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3239
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3243
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3247
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3251
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3255
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3259
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3263
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3267
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3271
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3275
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3279
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3283
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3287
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3291
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3295
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3299
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3303
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3307
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3311
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3315
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3319
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3323
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3327
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3331
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3335
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3339
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3343
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3347
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3350
		{
			unimplemented()
		}
	case 564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3352
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3356
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3360
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3364
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3368
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3372
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3376
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3380
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3384
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3388
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3392
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3396
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3400
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3404
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3408
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3412
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3429
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3438
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3442
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3446
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3450
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3454
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3458
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3462
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3466
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3470
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3474
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3478
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3482
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3486
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3490
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3494
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3498
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3502
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3506
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3510
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3514
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3518
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3522
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3526
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3530
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3534
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3538
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3550
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 610:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3555
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3559
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3565
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3569
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3573
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3579
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 618:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3583
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 619:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3587
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3595
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName()}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3599
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3602
		{
			unimplemented()
		}
	case 623:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3603
		{
			unimplemented()
		}
	case 624:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3605
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Type: All, Exprs: sqlDollar[4].union.exprs()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3609
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Type: Distinct, Exprs: sqlDollar[4].union.exprs()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3613
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Exprs: Exprs{StarExpr()}}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3626
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 628:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3630
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 629:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3639
		{
			unimplemented()
		}
	case 630:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3640
		{
			unimplemented()
		}
	case 631:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3644
		{
			unimplemented()
		}
	case 632:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3646
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3650
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3654
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3658
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3661
		{
			unimplemented()
		}
	case 637:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3662
		{
			unimplemented()
		}
	case 638:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3663
		{
			unimplemented()
		}
	case 639:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3664
		{
			unimplemented()
		}
	case 640:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3666
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3670
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3674
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3678
		{
			sqlVAL.union.val = &OverlayExpr{FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3682
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3686
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3689
		{
			unimplemented()
		}
	case 647:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3691
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3695
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3699
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3703
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3707
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3711
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3715
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3719
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3723
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3727
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3733
		{
			unimplemented()
		}
	case 658:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3734
		{
		}
	case 659:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3737
		{
			unimplemented()
		}
	case 660:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3738
		{
		}
	case 661:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3742
		{
			unimplemented()
		}
	case 662:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3743
		{
		}
	case 663:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3746
		{
			unimplemented()
		}
	case 664:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3747
		{
			unimplemented()
		}
	case 665:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3750
		{
			unimplemented()
		}
	case 666:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3753
		{
			unimplemented()
		}
	case 667:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3754
		{
			unimplemented()
		}
	case 668:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3755
		{
		}
	case 669:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3759
		{
			unimplemented()
		}
	case 670:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3770
		{
			unimplemented()
		}
	case 671:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3771
		{
		}
	case 672:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3774
		{
			unimplemented()
		}
	case 673:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3775
		{
		}
	case 674:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3783
		{
			unimplemented()
		}
	case 675:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3784
		{
			unimplemented()
		}
	case 676:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3785
		{
		}
	case 677:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3788
		{
			unimplemented()
		}
	case 678:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3789
		{
			unimplemented()
		}
	case 679:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3795
		{
			unimplemented()
		}
	case 680:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3796
		{
			unimplemented()
		}
	case 681:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3797
		{
			unimplemented()
		}
	case 682:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3798
		{
			unimplemented()
		}
	case 683:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3799
		{
			unimplemented()
		}
	case 684:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3810
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3814
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3818
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3824
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3828
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3834
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3877
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3881
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 692:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3887
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3891
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 694:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3897
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3901
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3905
		{
			sqlVAL.union.val = &Array{nil}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3911
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3915
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 699:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3921
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3943
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3947
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3953
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 710:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3960
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3964
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 712:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3981
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3985
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3989
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3993
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3997
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 717:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4001
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 718:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4007
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 719:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4013
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4019
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 721:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4023
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 722:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4027
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 723:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4033
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4037
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4048
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4055
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4059
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 728:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4065
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4071
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 730:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4075
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 732:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4082
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 733:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4088
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 734:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4092
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 735:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4096
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4100
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr()}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4106
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 738:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4112
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4118
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4122
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 741:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4127
		{
		}
	case 742:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4128
		{
		}
	case 744:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4137
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4143
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4147
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 747:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4156
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 748:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4162
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4166
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 750:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4172
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4181
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4185
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4189
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 754:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4197
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4201
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 756:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4207
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4211
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 758:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4217
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4221
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 760:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4232
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4236
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 762:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4242
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4253
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4257
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4261
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4265
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4271
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4275
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 769:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4281
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 770:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4284
		{
		}
	case 771:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4294
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4298
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 773:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4305
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 774:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4309
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 775:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4313
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4317
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4320
		{
			unimplemented()
		}
	case 778:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4322
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4326
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4330
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[5].str}, Type: sqlDollar[1].union.colType()}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4334
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 782:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4338
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 783:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4342
		{
			sqlVAL.union.val = DNull
		}
	case 785:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4349
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 786:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4353
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4375
		{
			sqlVAL.str = ""
		}
	case 792:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4381
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 793:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4385
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
