// Code generated by go yacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"errors"
	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/sql/privilege"
	"github.com/cockroachdb/cockroach/util"
)

var errUnimplemented = errors.New("unimplemented")

func unimplemented() {
	panic(errUnimplemented)
}

func unimplementedWithIssue(issue int) {
	panic(util.UnimplementedWithIssueErrorf(issue, ""))
}

//line sql.y:43

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new sytax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in two forms, depending on the
// type of the value being accessed. Values and pointers are directly
// type asserted from the empty interface, meaning that they will panic
// if the type assertion is incorrect. Interfaces are handled differently
// because a nil instance of an interface inserted into the empty interface
// becomes a nil instance of the empty interface and therefore will fail a
// direct type assertion. Instead, a guarded type assertion must be used,
// which returns nil if the type assertion fails.
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	return u.val.(*StrVal)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) qname() *QualifiedName {
	return u.val.(*QualifiedName)
}
func (u *sqlSymUnion) qnames() QualifiedNames {
	return u.val.(QualifiedNames)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) indirectElem() IndirectionElem {
	if indirectElem, ok := u.val.(IndirectionElem); ok {
		return indirectElem
	}
	return nil
}
func (u *sqlSymUnion) indirect() Indirection {
	return u.val.(Indirection)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	if selectStmt, ok := u.val.(*Select); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	if selectStmt, ok := u.val.(SelectStatement); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	if constraintDef, ok := u.val.(ConstraintTableDef); ok {
		return constraintDef
	}
	return nil
}
func (u *sqlSymUnion) tblDef() TableDef {
	if tblDef, ok := u.val.(TableDef); ok {
		return tblDef
	}
	return nil
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	if colQual, ok := u.val.(NamedColumnQualification); ok {
		return colQual
	}
	return NamedColumnQualification{}
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	if colQual, ok := u.val.(ColumnQualification); ok {
		return colQual
	}
	return nil
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retExprs() ReturningExprs {
	return ReturningExprs(u.val.(SelectExprs))
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	if tblExpr, ok := u.val.(TableExpr); ok {
		return tblExpr
	}
	return nil
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	if joinCond, ok := u.val.(JoinCond); ok {
		return joinCond
	}
	return nil
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	if alterTableCmd, ok := u.val.(AlterTableCmd); ok {
		return alterTableCmd
	}
	return nil
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) famElem() FamilyElem {
	return u.val.(FamilyElem)
}
func (u *sqlSymUnion) famElems() FamilyElemList {
	return u.val.(FamilyElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}

//line sql.y:290
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const DOT_DOT = 57353
const LESS_EQUALS = 57354
const GREATER_EQUALS = 57355
const NOT_EQUALS = 57356
const ERROR = 57357
const ACTION = 57358
const ADD = 57359
const ALL = 57360
const ALTER = 57361
const ANALYSE = 57362
const ANALYZE = 57363
const AND = 57364
const ANY = 57365
const ARRAY = 57366
const AS = 57367
const ASC = 57368
const ASYMMETRIC = 57369
const AT = 57370
const BEGIN = 57371
const BETWEEN = 57372
const BIGINT = 57373
const BIGSERIAL = 57374
const BIT = 57375
const BLOB = 57376
const BOOL = 57377
const BOOLEAN = 57378
const BOTH = 57379
const BY = 57380
const BYTEA = 57381
const BYTES = 57382
const CASCADE = 57383
const CASE = 57384
const CAST = 57385
const CHAR = 57386
const CHARACTER = 57387
const CHARACTERISTICS = 57388
const CHECK = 57389
const COALESCE = 57390
const COLLATE = 57391
const COLLATION = 57392
const COLUMN = 57393
const COLUMNS = 57394
const COMMIT = 57395
const COMMITTED = 57396
const CONCAT = 57397
const CONFLICT = 57398
const CONSTRAINT = 57399
const COVERING = 57400
const CREATE = 57401
const CROSS = 57402
const CUBE = 57403
const CURRENT = 57404
const CURRENT_CATALOG = 57405
const CURRENT_DATE = 57406
const CURRENT_ROLE = 57407
const CURRENT_TIME = 57408
const CURRENT_TIMESTAMP = 57409
const CURRENT_USER = 57410
const CYCLE = 57411
const DATA = 57412
const DATABASE = 57413
const DATABASES = 57414
const DATE = 57415
const DAY = 57416
const DEC = 57417
const DECIMAL = 57418
const DEFAULT = 57419
const DEFERRABLE = 57420
const DELETE = 57421
const DESC = 57422
const DISTINCT = 57423
const DO = 57424
const DOUBLE = 57425
const DROP = 57426
const ELSE = 57427
const ENCODING = 57428
const END = 57429
const ESCAPE = 57430
const EXCEPT = 57431
const EXISTS = 57432
const EXPLAIN = 57433
const EXTRACT = 57434
const FALSE = 57435
const FAMILY = 57436
const FETCH = 57437
const FILTER = 57438
const FIRST = 57439
const FLOAT = 57440
const FLOORDIV = 57441
const FOLLOWING = 57442
const FOR = 57443
const FORCE_INDEX = 57444
const FOREIGN = 57445
const FROM = 57446
const FULL = 57447
const GRANT = 57448
const GRANTS = 57449
const GREATEST = 57450
const GROUP = 57451
const GROUPING = 57452
const HAVING = 57453
const HIGH = 57454
const HOUR = 57455
const IF = 57456
const IFNULL = 57457
const IN = 57458
const INDEX = 57459
const INDEXES = 57460
const INITIALLY = 57461
const INNER = 57462
const INSERT = 57463
const INT = 57464
const INT64 = 57465
const INTEGER = 57466
const INTERSECT = 57467
const INTERVAL = 57468
const INTO = 57469
const IS = 57470
const ISOLATION = 57471
const JOIN = 57472
const KEY = 57473
const KEYS = 57474
const LATERAL = 57475
const LEADING = 57476
const LEAST = 57477
const LEFT = 57478
const LEVEL = 57479
const LIKE = 57480
const LIMIT = 57481
const LOCAL = 57482
const LOCALTIME = 57483
const LOCALTIMESTAMP = 57484
const LOW = 57485
const LSHIFT = 57486
const MATCH = 57487
const MINUTE = 57488
const MONTH = 57489
const NAME = 57490
const NAMES = 57491
const NATURAL = 57492
const NEXT = 57493
const NO = 57494
const NO_INDEX_JOIN = 57495
const NORMAL = 57496
const NOT = 57497
const NOTHING = 57498
const NULL = 57499
const NULLIF = 57500
const NULLS = 57501
const NUMERIC = 57502
const OF = 57503
const OFF = 57504
const OFFSET = 57505
const ON = 57506
const ONLY = 57507
const OR = 57508
const ORDER = 57509
const ORDINALITY = 57510
const OUT = 57511
const OUTER = 57512
const OVER = 57513
const OVERLAPS = 57514
const OVERLAY = 57515
const PARTIAL = 57516
const PARTITION = 57517
const PLACING = 57518
const POSITION = 57519
const PRECEDING = 57520
const PRECISION = 57521
const PRIMARY = 57522
const PRIORITY = 57523
const RANGE = 57524
const READ = 57525
const REAL = 57526
const RECURSIVE = 57527
const REF = 57528
const REFERENCES = 57529
const RENAME = 57530
const REPEATABLE = 57531
const RELEASE = 57532
const RESTRICT = 57533
const RETURNING = 57534
const REVOKE = 57535
const RIGHT = 57536
const ROLLBACK = 57537
const ROLLUP = 57538
const ROW = 57539
const ROWS = 57540
const RSHIFT = 57541
const SAVEPOINT = 57542
const SEARCH = 57543
const SECOND = 57544
const SELECT = 57545
const SERIAL = 57546
const SERIALIZABLE = 57547
const SESSION = 57548
const SESSION_USER = 57549
const SET = 57550
const SHOW = 57551
const SIMILAR = 57552
const SIMPLE = 57553
const SMALLINT = 57554
const SMALLSERIAL = 57555
const SNAPSHOT = 57556
const SOME = 57557
const SQL = 57558
const START = 57559
const STRICT = 57560
const STRING = 57561
const STORING = 57562
const SUBSTRING = 57563
const SYMMETRIC = 57564
const SYSTEM = 57565
const TABLE = 57566
const TABLES = 57567
const TEXT = 57568
const THEN = 57569
const TIME = 57570
const TIMESTAMP = 57571
const TIMESTAMPTZ = 57572
const TO = 57573
const TRAILING = 57574
const TRANSACTION = 57575
const TREAT = 57576
const TRIM = 57577
const TRUE = 57578
const TRUNCATE = 57579
const TYPE = 57580
const UNBOUNDED = 57581
const UNCOMMITTED = 57582
const UNION = 57583
const UNIQUE = 57584
const UNKNOWN = 57585
const UPDATE = 57586
const UPSERT = 57587
const USER = 57588
const USING = 57589
const VALID = 57590
const VALIDATE = 57591
const VALUE = 57592
const VALUES = 57593
const VARCHAR = 57594
const VARIADIC = 57595
const VARYING = 57596
const WHEN = 57597
const WHERE = 57598
const WINDOW = 57599
const WITH = 57600
const WITHIN = 57601
const WITHOUT = 57602
const YEAR = 57603
const ZONE = 57604
const NOT_LA = 57605
const WITH_LA = 57606
const AS_LA = 57607
const POSTFIXOP = 57608
const UMINUS = 57609

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXPLAIN",
	"EXTRACT",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HOUR",
	"IF",
	"IFNULL",
	"IN",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARTIAL",
	"PARTITION",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SQL",
	"START",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:4480

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 21,
	286, 21,
	-2, 330,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 32,
	1, 301,
	164, 301,
	192, 301,
	284, 301,
	286, 301,
	-2, 311,
	-1, 44,
	1, 304,
	164, 304,
	192, 304,
	284, 304,
	286, 304,
	-2, 310,
	-1, 53,
	1, 21,
	286, 21,
	-2, 330,
	-1, 246,
	1, 139,
	286, 139,
	-2, 813,
	-1, 278,
	139, 340,
	163, 340,
	-2, 307,
	-1, 281,
	139, 339,
	163, 339,
	-2, 305,
	-1, 393,
	139, 339,
	163, 339,
	-2, 308,
	-1, 449,
	283, 757,
	-2, 750,
	-1, 450,
	283, 758,
	-2, 751,
	-1, 456,
	5, 474,
	283, 474,
	-2, 897,
	-1, 478,
	5, 440,
	-2, 873,
	-1, 479,
	5, 468,
	283, 468,
	-2, 875,
	-1, 480,
	5, 448,
	-2, 876,
	-1, 481,
	5, 447,
	-2, 877,
	-1, 482,
	5, 468,
	283, 468,
	-2, 880,
	-1, 483,
	5, 468,
	283, 468,
	-2, 881,
	-1, 484,
	5, 469,
	-2, 884,
	-1, 485,
	5, 435,
	-2, 885,
	-1, 486,
	5, 435,
	-2, 886,
	-1, 487,
	5, 450,
	-2, 889,
	-1, 488,
	5, 436,
	-2, 894,
	-1, 489,
	5, 437,
	-2, 895,
	-1, 490,
	5, 438,
	-2, 896,
	-1, 491,
	5, 435,
	-2, 900,
	-1, 492,
	5, 441,
	-2, 905,
	-1, 493,
	5, 439,
	-2, 908,
	-1, 494,
	5, 466,
	283, 466,
	-2, 910,
	-1, 495,
	5, 470,
	-2, 913,
	-1, 496,
	5, 472,
	-2, 914,
	-1, 497,
	5, 465,
	283, 465,
	-2, 918,
	-1, 762,
	89, 311,
	125, 311,
	139, 311,
	163, 311,
	167, 311,
	241, 311,
	-2, 578,
	-1, 770,
	283, 735,
	-2, 724,
	-1, 975,
	12, 0,
	13, 0,
	14, 0,
	266, 0,
	267, 0,
	268, 0,
	-2, 508,
	-1, 976,
	12, 0,
	13, 0,
	14, 0,
	266, 0,
	267, 0,
	268, 0,
	-2, 509,
	-1, 977,
	12, 0,
	13, 0,
	14, 0,
	266, 0,
	267, 0,
	268, 0,
	-2, 510,
	-1, 981,
	12, 0,
	13, 0,
	14, 0,
	266, 0,
	267, 0,
	268, 0,
	-2, 514,
	-1, 982,
	12, 0,
	13, 0,
	14, 0,
	266, 0,
	267, 0,
	268, 0,
	-2, 515,
	-1, 983,
	12, 0,
	13, 0,
	14, 0,
	266, 0,
	267, 0,
	268, 0,
	-2, 516,
	-1, 986,
	30, 0,
	116, 0,
	138, 0,
	210, 0,
	263, 0,
	-2, 521,
	-1, 1017,
	172, 648,
	-2, 651,
	-1, 1176,
	89, 311,
	125, 311,
	139, 311,
	163, 311,
	167, 311,
	241, 311,
	-2, 388,
	-1, 1184,
	30, 0,
	116, 0,
	138, 0,
	210, 0,
	263, 0,
	-2, 522,
	-1, 1189,
	30, 0,
	116, 0,
	138, 0,
	210, 0,
	263, 0,
	-2, 523,
	-1, 1208,
	172, 647,
	-2, 650,
	-1, 1357,
	30, 0,
	116, 0,
	138, 0,
	210, 0,
	263, 0,
	-2, 524,
	-1, 1362,
	128, 0,
	-2, 534,
	-1, 1371,
	172, 649,
	-2, 652,
	-1, 1412,
	12, 0,
	13, 0,
	14, 0,
	266, 0,
	267, 0,
	268, 0,
	-2, 559,
	-1, 1413,
	12, 0,
	13, 0,
	14, 0,
	266, 0,
	267, 0,
	268, 0,
	-2, 560,
	-1, 1414,
	12, 0,
	13, 0,
	14, 0,
	266, 0,
	267, 0,
	268, 0,
	-2, 561,
	-1, 1418,
	12, 0,
	13, 0,
	14, 0,
	266, 0,
	267, 0,
	268, 0,
	-2, 565,
	-1, 1419,
	12, 0,
	13, 0,
	14, 0,
	266, 0,
	267, 0,
	268, 0,
	-2, 566,
	-1, 1420,
	12, 0,
	13, 0,
	14, 0,
	266, 0,
	267, 0,
	268, 0,
	-2, 567,
	-1, 1524,
	128, 0,
	-2, 535,
	-1, 1528,
	30, 0,
	116, 0,
	138, 0,
	210, 0,
	263, 0,
	-2, 538,
	-1, 1529,
	30, 0,
	116, 0,
	138, 0,
	210, 0,
	263, 0,
	-2, 540,
	-1, 1614,
	30, 0,
	116, 0,
	138, 0,
	210, 0,
	263, 0,
	-2, 539,
	-1, 1615,
	30, 0,
	116, 0,
	138, 0,
	210, 0,
	263, 0,
	-2, 541,
	-1, 1623,
	128, 0,
	-2, 568,
	-1, 1664,
	128, 0,
	-2, 569,
	-1, 1712,
	30, 0,
	138, 0,
	210, 0,
	263, 0,
	-2, 872,
}

const sqlNprod = 1011
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 20926

var sqlAct = [...]int{

	450, 1711, 1692, 1669, 1733, 1565, 1693, 843, 1694, 1710,
	851, 910, 1600, 1391, 448, 1587, 247, 1512, 1493, 1504,
	447, 1363, 282, 510, 1484, 1483, 919, 1450, 440, 1498,
	595, 87, 719, 765, 87, 1364, 1267, 1173, 304, 1115,
	88, 87, 498, 31, 891, 1334, 14, 1266, 87, 87,
	1211, 894, 87, 1030, 767, 87, 87, 87, 1172, 1163,
	697, 87, 87, 87, 87, 1343, 330, 700, 516, 539,
	412, 893, 852, 819, 66, 828, 1034, 1159, 1002, 1024,
	325, 999, 922, 796, 1069, 87, 289, 43, 20, 715,
	287, 10, 568, 6, 1121, 553, 281, 886, 519, 442,
	382, 381, 521, 721, 413, 920, 331, 422, 332, 287,
	511, 512, 550, 800, 43, 8, 68, 320, 579, 67,
	327, 69, 64, 845, 323, 897, 292, 396, 83, 397,
	549, 570, 566, 395, 74, 316, 532, 290, 322, 1607,
	43, 286, 1608, 70, 1027, 1740, 541, 844, 914, 541,
	541, 1707, 27, 1700, 1586, 44, 914, 300, 848, 1072,
	307, 286, 1691, 1171, 45, 1527, 317, 530, 1685, 271,
	724, 914, 743, 744, 745, 1204, 1666, 1660, 1127, 1527,
	914, 1654, 746, 1028, 328, 722, 294, 1425, 726, 1370,
	752, 1650, 423, 1641, 1586, 310, 914, 1616, 1611, 279,
	1527, 914, 1597, 1594, 244, 1586, 1595, 1585, 278, 725,
	1586, 1570, 1589, 1141, 914, 740, 1029, 1026, 1569, 1550,
	817, 914, 1204, 500, 724, 1530, 1526, 1460, 1204, 1527,
	914, 1367, 1323, 1317, 1204, 1318, 1318, 723, 723, 1161,
	87, 87, 726, 1284, 301, 1282, 1285, 301, 1204, 312,
	1143, 499, 914, 301, 1281, 312, 866, 1204, 1010, 731,
	909, 1210, 1280, 725, 49, 1204, 880, 1208, 408, 740,
	1204, 87, 1031, 87, 1206, 87, 753, 87, 1205, 1207,
	691, 1204, 690, 1204, 49, 51, 49, 915, 751, 560,
	914, 388, 87, 559, 816, 348, 542, 815, 748, 542,
	542, 394, 299, 87, 741, 51, 27, 51, 547, 49,
	514, 548, 52, 731, 87, 87, 87, 513, 87, 47,
	407, 514, 1709, 53, 400, 48, 747, 455, 594, 393,
	51, 1025, 52, 367, 52, 1706, 513, 509, 505, 47,
	514, 47, 356, 355, 46, 48, 1699, 48, 87, 1661,
	87, 1596, 1555, 1182, 1145, 1551, 1543, 52, 741, 742,
	330, 330, 1542, 1537, 847, 1702, 46, 504, 597, 87,
	750, 87, 87, 87, 87, 1536, 87, 1535, 387, 1238,
	87, 1534, 1521, 1478, 1440, 87, 1435, 1434, 1433, 46,
	1007, 87, 545, 544, 1374, 540, 694, 1352, 1333, 385,
	331, 331, 332, 332, 1289, 1286, 1274, 1265, 598, 87,
	599, 1237, 87, 742, 1234, 1232, 1221, 1519, 49, 317,
	1127, 722, 1215, 749, 1142, 1086, 737, 738, 739, 409,
	736, 733, 734, 735, 727, 728, 729, 730, 732, 51,
	1041, 1040, 1087, 724, 513, 279, 407, 773, 514, 531,
	406, 1088, 534, 1393, 278, 1653, 693, 1633, 1632, 1625,
	1603, 726, 589, 1592, 1584, 301, 52, 1562, 1243, 770,
	287, 1548, 1515, 47, 1491, 1361, 1008, 1351, 1330, 48,
	557, 1329, 725, 556, 736, 733, 734, 735, 727, 728,
	729, 730, 732, 583, 590, 507, 1328, 1510, 65, 1326,
	1301, 683, 1477, 1300, 1264, 1229, 301, 533, 533, 87,
	1228, 1220, 1201, 692, 1197, 597, 1004, 801, 804, 1100,
	1100, 1099, 1079, 87, 1039, 705, 704, 87, 703, 913,
	87, 87, 731, 811, 808, 717, 87, 794, 87, 87,
	793, 87, 792, 791, 87, 813, 87, 87, 790, 330,
	789, 788, 87, 87, 787, 598, 279, 599, 786, 279,
	279, 785, 861, 325, 724, 711, 798, 799, 712, 713,
	784, 783, 782, 680, 822, 781, 684, 685, 686, 846,
	687, 846, 726, 780, 689, 868, 764, 771, 769, 331,
	46, 332, 695, 502, 66, 597, 305, 833, 835, 411,
	802, 1613, 1612, 725, 768, 805, 1354, 1353, 809, 403,
	404, 506, 361, 1609, 1482, 1128, 904, 1027, 806, 1288,
	380, 1287, 807, 1183, 376, 885, 1238, 362, 1499, 778,
	844, 1394, 838, 1224, 43, 598, 68, 599, 1035, 67,
	797, 69, 1123, 1239, 1240, 1241, 1242, 1244, 825, 1675,
	1640, 1721, 1468, 731, 501, 276, 1028, 238, 850, 416,
	873, 860, 874, 70, 867, 869, 870, 328, 841, 864,
	863, 862, 1137, 872, 1722, 724, 264, 265, 829, 859,
	270, 57, 269, 87, 1578, 522, 1055, 523, 1577, 1029,
	1026, 821, 1518, 726, 1313, 87, 87, 1312, 1293, 285,
	1292, 810, 1219, 522, 522, 523, 523, 727, 728, 729,
	730, 732, 1218, 1045, 725, 1243, 1217, 435, 1238, 301,
	1216, 1185, 312, 58, 87, 774, 87, 991, 855, 916,
	865, 840, 839, 312, 832, 284, 312, 384, 1639, 359,
	1686, 1083, 963, 588, 587, 1031, 581, 576, 85, 1082,
	964, 248, 524, 821, 452, 597, 379, 273, 85, 820,
	924, 1657, 1730, 1252, 731, 293, 293, 1677, 535, 303,
	524, 524, 303, 309, 303, 1031, 360, 286, 303, 318,
	303, 248, 1567, 1048, 1303, 1005, 907, 908, 1383, 811,
	1696, 888, 989, 889, 811, 598, 1001, 599, 1116, 1315,
	890, 1125, 350, 1035, 1025, 1114, 1001, 1243, 274, 741,
	528, 831, 527, 1634, 358, 724, 591, 1085, 541, 87,
	87, 87, 1049, 1015, 930, 87, 277, 917, 87, 1688,
	729, 730, 732, 726, 87, 87, 87, 87, 87, 1721,
	87, 87, 61, 75, 1031, 1689, 60, 59, 87, 1138,
	87, 283, 1253, 795, 725, 1050, 1047, 87, 1136, 1697,
	357, 1120, 1097, 80, 742, 593, 87, 87, 76, 1006,
	1621, 1310, 87, 830, 1111, 520, 1095, 761, 990, 592,
	1344, 330, 377, 1227, 1089, 1118, 383, 301, 62, 1116,
	77, 287, 1241, 1242, 1244, 286, 1698, 351, 353, 87,
	987, 87, 87, 87, 731, 79, 87, 1254, 1304, 1695,
	55, 1051, 358, 1194, 1380, 87, 301, 525, 1147, 1729,
	1090, 331, 87, 332, 87, 1192, 930, 1720, 1011, 1016,
	1130, 1019, 1131, 818, 378, 525, 525, 1110, 735, 727,
	728, 729, 730, 732, 1568, 1718, 1064, 1381, 952, 741,
	1178, 1129, 1076, 1077, 1078, 1126, 56, 248, 248, 1144,
	1154, 1146, 1133, 1132, 1140, 997, 1456, 287, 542, 1134,
	1046, 1497, 988, 1139, 1135, 902, 951, 995, 1248, 1245,
	1246, 1247, 1239, 1240, 1241, 1242, 1244, 78, 85, 1190,
	303, 1187, 248, 1195, 391, 63, 1457, 1728, 370, 1152,
	43, 1000, 1156, 1031, 742, 1155, 1177, 1157, 349, 293,
	1181, 1091, 398, 582, 577, 347, 876, 399, 1421, 1736,
	303, 1606, 878, 1546, 1238, 1744, 1572, 1456, 81, 1451,
	565, 303, 303, 303, 1571, 536, 399, 1449, 879, 993,
	1122, 992, 1209, 799, 798, 998, 1560, 877, 287, 1122,
	952, 1467, 929, 72, 1464, 1162, 1295, 1457, 1466, 710,
	802, 563, 805, 54, 1094, 554, 903, 554, 1191, 1188,
	702, 1186, 564, 1513, 1452, 1193, 1453, 696, 951, 727,
	728, 729, 730, 732, 1670, 1379, 248, 688, 554, 248,
	248, 248, 1422, 248, 75, 1148, 398, 248, 1423, 1455,
	1166, 87, 85, 1547, 287, 1743, 1458, 561, 699, 1507,
	1223, 315, 1339, 1243, 80, 1169, 301, 1561, 1102, 76,
	994, 1101, 1338, 357, 1514, 1164, 293, 996, 87, 720,
	1734, 1167, 1463, 1299, 1320, 1452, 1465, 1453, 314, 390,
	284, 77, 87, 1238, 87, 1165, 87, 1335, 1160, 1038,
	87, 1271, 1272, 1273, 929, 1624, 79, 1545, 1253, 1506,
	1455, 1454, 87, 1290, 1200, 87, 1268, 1458, 1202, 1735,
	1360, 87, 597, 1233, 1297, 87, 1307, 87, 1309, 1166,
	1196, 1213, 1214, 871, 375, 1311, 1737, 1314, 1337, 1168,
	373, 1340, 372, 371, 1169, 368, 1319, 1322, 313, 1269,
	1321, 779, 1348, 682, 1342, 1037, 1327, 1447, 1308, 1306,
	1167, 1294, 598, 1254, 599, 1325, 1149, 905, 901, 1332,
	1263, 546, 1454, 1388, 543, 1341, 303, 538, 87, 1347,
	529, 1276, 1243, 1345, 1346, 1376, 1377, 1378, 78, 526,
	826, 701, 1505, 1579, 303, 401, 911, 303, 842, 1722,
	364, 585, 1581, 303, 297, 857, 858, 837, 303, 821,
	821, 303, 1373, 248, 248, 836, 834, 1397, 1168, 554,
	720, 1382, 1384, 1385, 1401, 1316, 1663, 1253, 1589, 81,
	1395, 3, 724, 1399, 1248, 1245, 1246, 1247, 1239, 1240,
	1241, 1242, 1244, 87, 87, 87, 1636, 930, 724, 1336,
	912, 87, 87, 1428, 405, 1655, 1432, 87, 402, 87,
	849, 87, 87, 87, 87, 1429, 726, 298, 954, 87,
	855, 725, 365, 718, 263, 558, 1180, 1741, 71, 87,
	87, 930, 1254, 1461, 1462, 306, 1442, 725, 930, 87,
	87, 1489, 1742, 87, 1238, 1489, 1446, 1488, 1014, 724,
	1520, 1488, 87, 87, 301, 1490, 1496, 301, 82, 1490,
	1481, 1368, 266, 267, 1479, 1502, 1503, 882, 881, 1508,
	930, 1441, 1386, 1355, 1495, 1283, 1084, 1081, 1080, 953,
	1032, 883, 272, 1525, 1516, 1708, 1475, 1532, 1387, 1150,
	1517, 884, 772, 1566, 87, 73, 681, 369, 1539, 1687,
	887, 1226, 1620, 1599, 1245, 1246, 1247, 1239, 1240, 1241,
	1242, 1244, 303, 826, 1036, 777, 25, 1486, 428, 1448,
	954, 952, 1296, 896, 1426, 895, 600, 586, 575, 451,
	374, 569, 578, 1044, 503, 1436, 1544, 1162, 453, 927,
	454, 303, 928, 248, 803, 1056, 441, 925, 87, 951,
	87, 326, 87, 1509, 853, 952, 1033, 1222, 775, 87,
	427, 930, 952, 433, 432, 1012, 424, 1511, 1559, 1170,
	354, 242, 1556, 243, 1119, 1476, 906, 706, 87, 926,
	1305, 953, 1166, 951, 275, 1235, 1062, 1054, 1052, 1043,
	951, 386, 515, 854, 952, 366, 1501, 1169, 87, 1557,
	87, 918, 1590, 1471, 1574, 1179, 1489, 1164, 87, 410,
	1580, 1480, 1488, 1167, 1492, 714, 87, 1593, 1701, 1588,
	1490, 1582, 951, 1602, 296, 929, 295, 1165, 892, 363,
	562, 301, 301, 875, 1605, 301, 303, 1092, 1093, 1575,
	1576, 1238, 826, 268, 1631, 1098, 1635, 1302, 1610, 1238,
	1674, 1103, 1104, 1106, 1108, 1109, 1619, 1112, 1113, 929,
	50, 19, 17, 1617, 16, 303, 929, 1124, 930, 15,
	1626, 1168, 13, 12, 303, 11, 18, 1153, 87, 87,
	9, 926, 87, 887, 554, 952, 1629, 7, 24, 887,
	87, 1643, 23, 22, 5, 4, 87, 2, 929, 1645,
	1, 1489, 1647, 1652, 87, 0, 1646, 1488, 0, 0,
	597, 1644, 811, 951, 1651, 1490, 699, 0, 699, 248,
	303, 0, 0, 1151, 0, 1658, 0, 930, 287, 0,
	1243, 0, 1158, 87, 87, 87, 1656, 87, 1243, 1175,
	1659, 303, 0, 1662, 414, 414, 0, 1665, 930, 1678,
	598, 1564, 599, 1676, 517, 87, 1681, 0, 0, 1056,
	1056, 0, 0, 0, 1679, 0, 1672, 1683, 1489, 1684,
	0, 0, 1680, 0, 1488, 1253, 0, 0, 87, 1682,
	0, 0, 1490, 1253, 0, 0, 1198, 1199, 1704, 929,
	1598, 1705, 952, 0, 0, 0, 0, 0, 0, 1716,
	301, 1719, 1717, 87, 0, 1723, 0, 0, 0, 0,
	0, 0, 1725, 1726, 1727, 0, 0, 1056, 1056, 1056,
	951, 0, 0, 0, 0, 930, 1739, 1738, 0, 0,
	1254, 0, 0, 0, 0, 1724, 0, 0, 1254, 0,
	0, 0, 0, 1745, 1260, 1261, 1262, 707, 709, 0,
	0, 952, 1649, 0, 716, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 756, 757, 758, 759,
	760, 0, 952, 0, 0, 763, 0, 0, 0, 951,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 954, 0, 0, 0, 776, 929, 0, 0, 0,
	951, 0, 0, 0, 1247, 1239, 1240, 1241, 1242, 1244,
	0, 0, 0, 1239, 1240, 1241, 1242, 1244, 720, 0,
	0, 0, 0, 1690, 0, 954, 0, 1673, 0, 0,
	0, 0, 954, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 303, 1056, 1056, 0, 952,
	0, 0, 953, 0, 0, 929, 0, 0, 0, 1324,
	0, 826, 812, 699, 954, 0, 0, 1331, 0, 0,
	855, 0, 0, 1358, 1359, 0, 929, 951, 0, 303,
	0, 0, 303, 0, 0, 0, 953, 0, 1175, 0,
	0, 0, 1350, 953, 1175, 0, 0, 0, 0, 1056,
	1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
	1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 0, 1056,
	0, 0, 0, 0, 0, 953, 1402, 1403, 1404, 1405,
	1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413, 1414, 1415,
	1416, 1417, 1418, 1419, 1420, 1392, 1424, 0, 0, 0,
	0, 0, 926, 929, 0, 954, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 429, 32, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 926, 0, 0, 0,
	0, 0, 0, 926, 0, 0, 0, 0, 0, 0,
	0, 32, 0, 0, 0, 0, 0, 0, 0, 0,
	1444, 1445, 826, 0, 0, 0, 953, 280, 720, 720,
	288, 0, 0, 0, 1469, 926, 1470, 32, 303, 1472,
	1473, 1474, 0, 0, 0, 0, 303, 0, 0, 288,
	0, 0, 0, 0, 1485, 0, 1494, 826, 1485, 0,
	0, 0, 0, 0, 0, 0, 303, 303, 0, 0,
	303, 0, 954, 0, 0, 0, 0, 0, 0, 720,
	1175, 414, 0, 0, 0, 0, 965, 966, 967, 968,
	969, 970, 971, 972, 973, 974, 975, 976, 977, 978,
	979, 980, 981, 982, 983, 984, 985, 986, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1540, 0, 250, 0, 0, 926, 1056, 0, 0,
	0, 954, 0, 953, 0, 0, 0, 261, 0, 0,
	0, 1042, 0, 1053, 0, 1063, 1065, 1070, 1073, 1074,
	1075, 0, 954, 0, 1563, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 252, 0, 0, 517, 826, 0, 1558, 262, 248,
	0, 0, 0, 0, 0, 0, 303, 0, 0, 0,
	251, 253, 953, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1117, 0, 720, 0, 0, 0, 0,
	0, 0, 0, 953, 0, 1056, 0, 0, 0, 1485,
	0, 0, 0, 0, 0, 303, 254, 1601, 0, 954,
	0, 0, 0, 926, 0, 303, 255, 256, 0, 0,
	0, 0, 1623, 720, 0, 0, 0, 21, 0, 0,
	0, 257, 0, 0, 0, 0, 0, 35, 0, 0,
	0, 0, 724, 0, 0, 0, 0, 0, 716, 0,
	0, 0, 0, 280, 0, 0, 0, 0, 0, 0,
	726, 37, 0, 0, 0, 0, 0, 42, 0, 0,
	953, 0, 926, 0, 1056, 0, 0, 0, 0, 0,
	0, 725, 0, 0, 0, 1637, 1638, 0, 0, 1642,
	0, 0, 26, 926, 1485, 38, 0, 248, 0, 27,
	0, 1664, 0, 1494, 0, 0, 0, 0, 0, 0,
	0, 720, 0, 0, 28, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 258, 0, 1184, 259, 0, 0,
	1189, 731, 260, 0, 724, 0, 743, 744, 745, 0,
	1671, 720, 303, 0, 248, 0, 746, 0, 0, 1203,
	0, 0, 726, 0, 752, 0, 0, 0, 0, 1212,
	0, 1485, 1601, 0, 280, 0, 0, 280, 280, 0,
	926, 0, 0, 725, 1225, 0, 741, 0, 1230, 740,
	0, 0, 0, 0, 0, 303, 0, 0, 0, 0,
	762, 0, 0, 0, 766, 724, 0, 0, 40, 763,
	0, 29, 0, 39, 0, 1070, 1070, 1070, 30, 0,
	720, 49, 0, 726, 0, 0, 33, 34, 0, 0,
	0, 0, 0, 731, 0, 36, 0, 1291, 0, 0,
	0, 742, 51, 0, 725, 0, 0, 0, 1298, 0,
	753, 0, 0, 0, 0, 41, 0, 0, 0, 0,
	0, 0, 751, 0, 0, 414, 0, 0, 0, 52,
	0, 0, 748, 0, 414, 0, 47, 517, 741, 0,
	0, 0, 48, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 731, 0, 0, 0, 0, 0,
	747, 46, 0, 0, 0, 0, 32, 0, 32, 0,
	0, 0, 736, 733, 734, 735, 727, 728, 729, 730,
	732, 32, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1356, 742, 1357, 0, 0, 0, 0, 741,
	0, 0, 0, 0, 750, 1362, 0, 0, 0, 0,
	0, 0, 0, 1372, 0, 0, 0, 0, 0, 1372,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1389, 0, 0, 0, 0, 0, 0,
	0, 0, 1398, 0, 0, 1400, 0, 0, 0, 0,
	0, 0, 0, 0, 742, 0, 0, 749, 0, 0,
	737, 738, 739, 0, 736, 733, 734, 735, 727, 728,
	729, 730, 732, 0, 0, 0, 0, 1430, 1431, 0,
	0, 1552, 0, 0, 0, 0, 1437, 1438, 1439, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 724, 0, 743, 744, 745, 0, 0, 0,
	0, 0, 0, 0, 746, 0, 0, 0, 0, 0,
	726, 0, 752, 0, 414, 0, 733, 734, 735, 727,
	728, 729, 730, 732, 0, 0, 0, 0, 0, 0,
	0, 725, 0, 0, 1500, 0, 0, 740, 0, 0,
	724, 0, 743, 744, 745, 0, 0, 921, 0, 0,
	0, 0, 746, 0, 0, 0, 0, 0, 726, 1524,
	752, 0, 0, 0, 1528, 1529, 0, 0, 0, 1531,
	0, 0, 0, 0, 1533, 0, 0, 1003, 0, 725,
	0, 731, 0, 0, 0, 740, 0, 0, 0, 1538,
	0, 0, 0, 1541, 0, 0, 0, 0, 753, 1238,
	0, 1255, 1256, 1257, 0, 0, 0, 0, 0, 0,
	751, 1523, 0, 0, 0, 0, 0, 0, 0, 0,
	748, 0, 0, 0, 1549, 0, 741, 0, 0, 731,
	0, 0, 0, 0, 0, 0, 0, 724, 0, 743,
	744, 745, 0, 0, 1252, 0, 753, 0, 747, 0,
	0, 0, 0, 0, 0, 726, 0, 752, 751, 0,
	0, 0, 0, 0, 0, 1573, 0, 0, 748, 0,
	0, 288, 0, 0, 741, 0, 725, 0, 0, 0,
	0, 742, 740, 0, 0, 0, 1591, 0, 1243, 0,
	0, 1238, 750, 1255, 1256, 1257, 747, 0, 0, 0,
	0, 0, 0, 1522, 0, 1604, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1258, 0, 0,
	0, 1614, 1615, 0, 0, 0, 731, 0, 0, 742,
	0, 0, 0, 1253, 0, 0, 1252, 32, 0, 0,
	750, 0, 0, 753, 0, 749, 0, 1176, 737, 738,
	739, 1628, 736, 733, 734, 735, 727, 728, 729, 730,
	732, 1630, 0, 0, 0, 748, 0, 0, 0, 1279,
	0, 741, 0, 0, 0, 0, 0, 0, 0, 0,
	1243, 0, 0, 517, 0, 0, 0, 0, 1254, 0,
	0, 0, 0, 749, 0, 0, 737, 738, 739, 0,
	736, 733, 734, 735, 727, 728, 729, 730, 732, 1258,
	0, 0, 0, 0, 1003, 0, 0, 1278, 0, 0,
	0, 0, 0, 0, 0, 1253, 742, 0, 762, 0,
	0, 0, 0, 0, 0, 0, 0, 750, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1249, 1250, 1251, 0, 1248,
	1245, 1246, 1247, 1239, 1240, 1241, 1242, 1244, 0, 0,
	0, 0, 0, 0, 1703, 0, 0, 0, 0, 0,
	1254, 0, 0, 0, 762, 0, 0, 1715, 1715, 0,
	749, 0, 0, 737, 738, 739, 0, 736, 733, 734,
	735, 727, 728, 729, 730, 732, 0, 0, 0, 0,
	0, 1715, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1715, 0, 0, 0, 0, 0, 0, 1249, 1250, 1251,
	0, 1248, 1245, 1246, 1247, 1239, 1240, 1241, 1242, 1244,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 921, 0, 0, 921, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 449, 438, 439, 436, 437, 425, 0,
	0, 0, 0, 0, 0, 89, 90, 1021, 91, 0,
	0, 0, 0, 431, 0, 0, 0, 92, 93, 191,
	478, 193, 479, 94, 480, 481, 0, 95, 197, 198,
	96, 446, 464, 482, 483, 201, 0, 474, 0, 457,
	0, 97, 98, 99, 0, 100, 0, 101, 0, 335,
	102, 103, 0, 458, 460, 0, 459, 461, 104, 105,
	106, 107, 484, 108, 485, 486, 0, 0, 109, 0,
	1022, 0, 477, 111, 0, 112, 0, 0, 0, 430,
	113, 465, 444, 0, 0, 114, 115, 487, 0, 116,
	0, 117, 0, 0, 336, 0, 118, 475, 0, 210,
	0, 119, 120, 471, 473, 0, 0, 121, 0, 337,
	122, 488, 489, 490, 0, 456, 0, 338, 123, 339,
	124, 125, 0, 0, 476, 340, 126, 341, 0, 127,
	0, 32, 128, 0, 129, 130, 131, 132, 133, 342,
	134, 135, 138, 136, 420, 137, 445, 472, 139, 491,
	140, 141, 921, 921, 0, 0, 921, 142, 220, 343,
	143, 344, 466, 144, 145, 0, 467, 146, 223, 0,
	147, 148, 149, 492, 150, 151, 0, 153, 154, 152,
	155, 0, 156, 345, 157, 158, 434, 159, 0, 249,
	160, 161, 0, 226, 162, 163, 462, 164, 165, 346,
	166, 493, 228, 167, 0, 168, 169, 171, 494, 170,
	468, 0, 172, 0, 173, 174, 0, 231, 495, 496,
	0, 0, 175, 469, 470, 443, 176, 177, 178, 179,
	0, 0, 180, 181, 182, 463, 0, 183, 184, 185,
	236, 497, 1020, 186, 0, 0, 0, 0, 187, 188,
	189, 190, 421, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 417, 418, 1023, 0, 0, 0, 419,
	0, 0, 426, 1018, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1583, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 596, 0, 0, 0, 0, 0,
	0, 921, 0, 0, 0, 0, 89, 90, 601, 91,
	602, 603, 604, 605, 606, 607, 608, 609, 92, 93,
	191, 192, 193, 194, 94, 195, 196, 610, 95, 197,
	198, 96, 611, 612, 199, 200, 201, 613, 202, 614,
	334, 615, 97, 98, 99, 0, 100, 616, 101, 617,
	335, 102, 103, 618, 619, 620, 621, 622, 623, 104,
	105, 106, 107, 203, 108, 204, 205, 624, 625, 109,
	626, 627, 628, 110, 111, 629, 112, 630, 762, 631,
	206, 113, 207, 632, 633, 634, 114, 115, 208, 0,
	116, 635, 117, 636, 637, 336, 638, 118, 209, 639,
	210, 640, 119, 120, 211, 212, 641, 642, 121, 643,
	337, 122, 213, 214, 215, 644, 216, 645, 338, 123,
	339, 124, 125, 646, 647, 217, 340, 126, 341, 648,
	127, 649, 650, 128, 0, 129, 130, 131, 132, 133,
	342, 134, 135, 138, 136, 651, 137, 652, 218, 139,
	219, 140, 141, 653, 654, 655, 656, 657, 142, 220,
	343, 143, 344, 221, 144, 145, 658, 222, 146, 223,
	659, 147, 148, 149, 224, 150, 151, 660, 153, 154,
	152, 155, 661, 156, 345, 157, 158, 225, 159, 0,
	249, 160, 161, 662, 226, 162, 163, 663, 164, 165,
	346, 166, 227, 228, 167, 664, 168, 169, 171, 229,
	170, 230, 665, 172, 666, 173, 174, 667, 231, 232,
	233, 668, 669, 175, 234, 235, 670, 176, 177, 178,
	179, 671, 672, 180, 181, 182, 673, 674, 183, 184,
	185, 236, 237, 675, 186, 676, 677, 678, 679, 187,
	188, 189, 190, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 596, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1349,
	89, 90, 601, 91, 602, 603, 604, 605, 606, 607,
	608, 609, 92, 93, 191, 192, 193, 194, 94, 195,
	196, 610, 95, 197, 198, 96, 611, 612, 199, 200,
	201, 613, 202, 614, 334, 615, 97, 98, 99, 0,
	100, 616, 101, 617, 335, 102, 103, 618, 619, 620,
	621, 622, 623, 104, 105, 106, 107, 203, 108, 204,
	205, 624, 625, 109, 626, 627, 628, 110, 111, 629,
	112, 630, 0, 631, 206, 113, 207, 632, 633, 634,
	114, 115, 208, 0, 116, 635, 117, 636, 637, 336,
	638, 118, 209, 639, 210, 640, 119, 120, 211, 212,
	641, 642, 121, 643, 337, 122, 213, 214, 215, 644,
	216, 645, 338, 123, 339, 124, 125, 646, 647, 217,
	340, 126, 341, 648, 127, 649, 650, 128, 0, 129,
	130, 131, 132, 133, 342, 134, 135, 138, 136, 651,
	137, 652, 218, 139, 219, 140, 141, 653, 654, 655,
	656, 657, 142, 220, 343, 143, 344, 221, 144, 145,
	658, 222, 146, 223, 659, 147, 148, 149, 224, 150,
	151, 660, 153, 154, 152, 155, 661, 156, 345, 157,
	158, 225, 159, 0, 249, 160, 161, 662, 226, 162,
	163, 663, 164, 165, 346, 166, 227, 228, 167, 664,
	168, 169, 171, 229, 170, 230, 665, 172, 666, 173,
	174, 667, 231, 232, 233, 668, 669, 175, 234, 235,
	670, 176, 177, 178, 179, 671, 672, 180, 181, 182,
	673, 674, 183, 184, 185, 236, 237, 675, 186, 676,
	677, 678, 679, 187, 188, 189, 190, 0, 0, 596,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	814, 89, 90, 601, 91, 602, 603, 604, 605, 606,
	607, 608, 609, 92, 93, 191, 192, 193, 194, 94,
	195, 196, 610, 95, 197, 198, 96, 611, 612, 199,
	200, 201, 613, 202, 614, 334, 615, 97, 98, 99,
	0, 100, 616, 101, 617, 335, 102, 103, 618, 619,
	620, 621, 622, 623, 104, 105, 106, 107, 203, 108,
	204, 205, 624, 625, 109, 626, 627, 628, 110, 111,
	629, 112, 630, 0, 631, 206, 113, 207, 632, 633,
	634, 114, 115, 208, 0, 116, 635, 117, 636, 637,
	336, 638, 118, 209, 639, 210, 640, 119, 120, 211,
	212, 641, 642, 121, 643, 337, 122, 213, 214, 215,
	644, 216, 645, 338, 123, 339, 124, 125, 646, 647,
	217, 340, 126, 341, 648, 127, 649, 650, 128, 0,
	129, 130, 131, 132, 133, 342, 134, 135, 138, 136,
	651, 137, 652, 218, 139, 219, 140, 141, 653, 654,
	655, 656, 657, 142, 220, 343, 143, 344, 221, 144,
	145, 658, 222, 146, 223, 659, 147, 148, 149, 224,
	150, 151, 660, 153, 154, 152, 155, 661, 156, 345,
	157, 158, 225, 159, 0, 249, 160, 161, 662, 226,
	162, 163, 663, 164, 165, 346, 166, 227, 228, 167,
	664, 168, 169, 171, 229, 170, 230, 665, 172, 666,
	173, 174, 667, 231, 232, 233, 668, 669, 175, 234,
	235, 670, 176, 177, 178, 179, 671, 672, 180, 181,
	182, 673, 674, 183, 184, 185, 236, 237, 675, 186,
	676, 677, 678, 679, 187, 188, 189, 190, 449, 438,
	439, 436, 437, 425, 0, 0, 0, 0, 0, 0,
	89, 90, 0, 91, 0, 0, 0, 0, 431, 0,
	0, 0, 92, 93, 191, 478, 193, 479, 94, 480,
	481, 0, 95, 197, 198, 96, 446, 464, 482, 483,
	201, 0, 474, 0, 457, 0, 97, 98, 99, 0,
	100, 0, 101, 0, 335, 102, 103, 0, 458, 460,
	0, 459, 461, 104, 105, 106, 107, 484, 108, 485,
	486, 518, 0, 109, 0, 0, 0, 477, 111, 0,
	112, 0, 0, 0, 430, 113, 465, 444, 0, 0,
	114, 115, 487, 0, 116, 0, 117, 0, 0, 336,
	0, 118, 475, 0, 210, 0, 119, 120, 471, 473,
	0, 0, 121, 0, 337, 122, 488, 489, 490, 0,
	456, 0, 338, 123, 339, 124, 125, 0, 0, 476,
	340, 126, 341, 0, 127, 0, 0, 128, 0, 129,
	130, 131, 132, 133, 342, 134, 135, 138, 136, 420,
	137, 445, 472, 139, 491, 140, 141, 0, 0, 0,
	0, 0, 142, 220, 343, 143, 344, 466, 144, 145,
	0, 467, 146, 223, 0, 147, 148, 149, 492, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 345, 157,
	158, 434, 159, 0, 249, 160, 161, 49, 226, 162,
	163, 462, 164, 165, 346, 166, 493, 228, 167, 0,
	168, 169, 171, 494, 170, 468, 0, 172, 51, 173,
	174, 0, 231, 495, 496, 0, 0, 175, 469, 470,
	443, 176, 177, 178, 179, 0, 0, 180, 181, 182,
	463, 0, 183, 184, 185, 333, 497, 0, 186, 0,
	0, 0, 47, 187, 188, 189, 190, 421, 48, 0,
	449, 438, 439, 436, 437, 425, 0, 0, 417, 418,
	0, 0, 89, 90, 419, 91, 0, 426, 0, 0,
	431, 0, 0, 0, 92, 93, 191, 478, 193, 479,
	94, 480, 481, 0, 95, 197, 198, 96, 446, 464,
	482, 483, 201, 0, 474, 0, 457, 0, 97, 98,
	99, 0, 100, 0, 101, 0, 335, 102, 103, 0,
	458, 460, 0, 459, 461, 104, 105, 106, 107, 484,
	108, 485, 486, 0, 0, 109, 0, 0, 0, 477,
	111, 0, 112, 0, 0, 0, 430, 113, 465, 444,
	0, 0, 114, 115, 487, 0, 116, 0, 117, 0,
	0, 336, 0, 118, 475, 0, 210, 0, 119, 120,
	471, 473, 0, 0, 121, 0, 337, 122, 488, 489,
	490, 0, 456, 0, 338, 123, 339, 124, 125, 0,
	0, 476, 340, 126, 341, 0, 127, 0, 0, 128,
	0, 129, 130, 131, 132, 133, 342, 134, 135, 138,
	136, 420, 137, 445, 472, 139, 491, 140, 141, 0,
	0, 0, 0, 0, 142, 220, 343, 143, 344, 466,
	144, 145, 0, 467, 146, 223, 0, 147, 148, 149,
	492, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	345, 157, 158, 434, 159, 0, 249, 160, 161, 49,
	226, 162, 163, 462, 164, 165, 346, 166, 493, 228,
	167, 0, 168, 169, 171, 494, 170, 468, 0, 172,
	51, 173, 174, 0, 231, 495, 496, 0, 0, 175,
	469, 470, 443, 176, 177, 178, 179, 0, 0, 180,
	181, 182, 463, 0, 183, 184, 185, 333, 497, 0,
	186, 0, 0, 0, 47, 187, 188, 189, 190, 421,
	48, 0, 449, 438, 439, 436, 437, 425, 0, 0,
	417, 418, 0, 0, 89, 90, 419, 91, 0, 426,
	0, 0, 431, 0, 0, 0, 92, 93, 191, 478,
	193, 479, 94, 480, 481, 1066, 95, 197, 198, 96,
	446, 464, 482, 483, 201, 0, 474, 0, 457, 0,
	97, 98, 99, 0, 100, 0, 101, 0, 335, 102,
	103, 0, 458, 460, 0, 459, 461, 104, 105, 106,
	107, 484, 108, 485, 486, 0, 0, 109, 0, 0,
	0, 477, 111, 0, 112, 0, 0, 0, 430, 113,
	465, 444, 0, 0, 114, 115, 487, 0, 116, 0,
	117, 0, 1071, 336, 0, 118, 475, 0, 210, 0,
	119, 120, 471, 473, 0, 0, 121, 0, 337, 122,
	488, 489, 490, 0, 456, 0, 338, 123, 339, 124,
	125, 0, 1067, 476, 340, 126, 341, 0, 127, 0,
	0, 128, 0, 129, 130, 131, 132, 133, 342, 134,
	135, 138, 136, 420, 137, 445, 472, 139, 491, 140,
	141, 0, 0, 0, 0, 0, 142, 220, 343, 143,
	344, 466, 144, 145, 0, 467, 146, 223, 0, 147,
	148, 149, 492, 150, 151, 0, 153, 154, 152, 155,
	0, 156, 345, 157, 158, 434, 159, 0, 249, 160,
	161, 0, 226, 162, 163, 462, 164, 165, 346, 166,
	493, 228, 167, 0, 168, 169, 171, 494, 170, 468,
	0, 172, 0, 173, 174, 0, 231, 495, 496, 0,
	1068, 175, 469, 470, 443, 176, 177, 178, 179, 0,
	0, 180, 181, 182, 463, 0, 183, 184, 185, 236,
	497, 0, 186, 0, 0, 0, 0, 187, 188, 189,
	190, 421, 449, 438, 439, 436, 437, 425, 0, 0,
	0, 0, 417, 418, 89, 90, 0, 91, 419, 0,
	0, 426, 431, 0, 0, 0, 92, 93, 191, 478,
	193, 479, 94, 480, 481, 0, 95, 197, 198, 96,
	446, 464, 482, 483, 201, 0, 474, 0, 457, 0,
	97, 98, 99, 0, 100, 0, 101, 0, 335, 102,
	103, 0, 458, 460, 0, 459, 461, 104, 105, 106,
	107, 484, 108, 485, 486, 0, 0, 109, 0, 0,
	0, 477, 111, 0, 112, 0, 0, 0, 430, 113,
	465, 444, 0, 0, 114, 115, 487, 0, 116, 0,
	117, 0, 0, 336, 0, 118, 475, 0, 210, 0,
	119, 120, 471, 473, 0, 0, 121, 0, 337, 122,
	488, 489, 490, 0, 456, 0, 338, 123, 339, 124,
	125, 0, 0, 476, 340, 126, 341, 0, 127, 0,
	0, 128, 0, 129, 130, 131, 132, 133, 342, 134,
	135, 138, 136, 420, 137, 445, 472, 139, 491, 140,
	141, 0, 0, 0, 0, 0, 142, 220, 343, 143,
	344, 466, 144, 145, 0, 467, 146, 223, 0, 147,
	148, 149, 492, 150, 151, 0, 153, 154, 152, 155,
	0, 156, 345, 157, 158, 434, 159, 0, 249, 160,
	161, 0, 226, 162, 163, 462, 164, 165, 346, 166,
	493, 228, 167, 0, 168, 169, 171, 494, 170, 468,
	0, 172, 0, 173, 174, 0, 231, 495, 496, 0,
	0, 175, 469, 470, 443, 176, 177, 178, 179, 0,
	0, 180, 181, 182, 463, 0, 183, 184, 185, 236,
	497, 0, 186, 0, 0, 0, 0, 187, 188, 189,
	190, 421, 0, 0, 449, 438, 439, 436, 437, 425,
	0, 0, 417, 418, 0, 0, 89, 90, 419, 91,
	0, 426, 1427, 0, 431, 0, 0, 0, 92, 93,
	191, 478, 193, 479, 94, 480, 481, 0, 95, 197,
	198, 96, 446, 464, 482, 483, 201, 0, 474, 0,
	457, 0, 97, 98, 99, 0, 100, 0, 101, 0,
	335, 102, 103, 0, 458, 460, 0, 459, 461, 104,
	105, 106, 107, 484, 108, 485, 486, 0, 0, 109,
	0, 0, 0, 477, 111, 0, 112, 0, 0, 0,
	430, 113, 465, 444, 0, 0, 114, 115, 487, 0,
	116, 0, 117, 0, 0, 336, 0, 118, 475, 0,
	210, 0, 119, 120, 471, 473, 0, 0, 121, 0,
	337, 122, 488, 489, 490, 0, 456, 0, 338, 123,
	339, 124, 125, 0, 0, 476, 340, 126, 341, 0,
	127, 0, 0, 128, 0, 129, 130, 131, 132, 133,
	342, 134, 135, 138, 136, 420, 137, 445, 472, 139,
	491, 140, 141, 0, 0, 0, 0, 0, 142, 220,
	343, 143, 344, 466, 144, 145, 0, 467, 146, 223,
	0, 147, 148, 149, 492, 150, 151, 0, 153, 154,
	152, 155, 0, 156, 345, 157, 158, 434, 159, 0,
	249, 160, 161, 0, 226, 162, 163, 462, 164, 165,
	346, 166, 493, 228, 167, 0, 168, 169, 171, 494,
	170, 468, 0, 172, 0, 173, 174, 0, 231, 495,
	496, 0, 0, 175, 469, 470, 443, 176, 177, 178,
	179, 0, 0, 180, 181, 182, 463, 0, 183, 184,
	185, 236, 497, 0, 186, 0, 0, 0, 0, 187,
	188, 189, 190, 421, 0, 0, 449, 438, 439, 436,
	437, 425, 0, 0, 417, 418, 0, 0, 89, 90,
	419, 91, 0, 426, 1369, 0, 431, 0, 0, 0,
	92, 93, 191, 478, 193, 479, 94, 480, 481, 0,
	95, 197, 198, 96, 446, 464, 482, 483, 201, 0,
	474, 0, 457, 0, 97, 98, 99, 0, 100, 0,
	101, 0, 335, 102, 103, 0, 458, 460, 0, 459,
	461, 104, 105, 106, 107, 484, 108, 485, 486, 0,
	0, 109, 0, 0, 0, 477, 111, 0, 112, 0,
	0, 0, 430, 113, 465, 444, 0, 0, 114, 115,
	487, 0, 116, 0, 117, 0, 0, 336, 0, 118,
	475, 0, 210, 0, 119, 120, 471, 473, 0, 0,
	121, 0, 337, 122, 488, 489, 490, 0, 456, 0,
	338, 123, 339, 124, 125, 0, 0, 476, 340, 126,
	341, 0, 127, 0, 0, 128, 0, 129, 130, 131,
	132, 133, 342, 134, 135, 138, 136, 420, 137, 445,
	472, 139, 491, 140, 141, 0, 0, 0, 0, 0,
	142, 220, 343, 143, 344, 466, 144, 145, 0, 467,
	146, 223, 0, 147, 148, 149, 492, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 345, 157, 158, 434,
	159, 0, 249, 160, 161, 0, 226, 162, 163, 462,
	164, 165, 346, 166, 493, 228, 167, 0, 168, 169,
	171, 494, 170, 468, 0, 172, 0, 173, 174, 0,
	231, 495, 496, 0, 0, 175, 469, 470, 443, 176,
	177, 178, 179, 0, 0, 180, 181, 182, 463, 0,
	183, 184, 185, 236, 497, 0, 186, 0, 0, 0,
	0, 187, 188, 189, 190, 421, 0, 0, 449, 438,
	439, 436, 437, 425, 0, 0, 417, 418, 0, 0,
	89, 90, 419, 91, 0, 426, 1017, 0, 431, 0,
	0, 0, 92, 93, 191, 478, 193, 479, 94, 480,
	481, 0, 95, 197, 198, 96, 446, 464, 482, 483,
	201, 0, 474, 0, 457, 0, 97, 98, 99, 0,
	100, 0, 101, 0, 335, 102, 103, 0, 458, 460,
	0, 459, 461, 104, 105, 106, 107, 484, 108, 485,
	486, 0, 0, 109, 0, 0, 0, 477, 111, 0,
	112, 0, 0, 0, 430, 113, 465, 444, 0, 0,
	114, 115, 487, 0, 116, 0, 117, 0, 0, 336,
	0, 118, 475, 0, 210, 0, 119, 120, 471, 473,
	0, 0, 121, 0, 337, 122, 488, 489, 490, 0,
	456, 0, 338, 123, 339, 124, 125, 0, 0, 476,
	340, 126, 341, 0, 127, 0, 0, 128, 0, 129,
	130, 131, 132, 133, 342, 134, 135, 138, 136, 420,
	137, 445, 472, 139, 491, 140, 141, 0, 0, 0,
	0, 0, 142, 220, 343, 143, 344, 466, 144, 145,
	0, 467, 146, 223, 0, 147, 148, 149, 492, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 345, 157,
	158, 434, 159, 0, 249, 160, 161, 0, 226, 162,
	163, 462, 164, 165, 346, 166, 493, 228, 167, 0,
	168, 169, 171, 494, 170, 468, 0, 172, 0, 173,
	174, 0, 231, 495, 496, 0, 0, 175, 469, 470,
	443, 176, 177, 178, 179, 0, 0, 180, 181, 182,
	463, 0, 183, 184, 185, 236, 497, 0, 186, 0,
	0, 0, 0, 187, 188, 189, 190, 421, 449, 438,
	439, 436, 437, 425, 0, 0, 0, 0, 417, 418,
	89, 90, 0, 91, 419, 768, 1013, 426, 431, 0,
	0, 0, 92, 93, 191, 478, 193, 479, 94, 480,
	481, 0, 95, 197, 198, 96, 446, 464, 482, 483,
	201, 0, 474, 0, 457, 0, 97, 98, 99, 0,
	100, 0, 101, 0, 335, 102, 103, 0, 458, 460,
	0, 459, 461, 104, 105, 106, 107, 484, 108, 485,
	486, 0, 0, 109, 0, 0, 0, 477, 111, 0,
	112, 0, 0, 0, 430, 113, 465, 444, 0, 0,
	114, 115, 487, 0, 116, 0, 117, 0, 0, 336,
	0, 118, 475, 0, 210, 0, 119, 120, 471, 473,
	0, 0, 121, 0, 337, 122, 488, 489, 490, 0,
	456, 0, 338, 123, 339, 124, 125, 0, 0, 476,
	340, 126, 341, 0, 127, 0, 0, 128, 0, 129,
	130, 131, 132, 133, 342, 134, 135, 138, 136, 420,
	137, 445, 472, 139, 491, 140, 141, 0, 0, 0,
	0, 0, 142, 220, 343, 143, 344, 466, 144, 145,
	0, 467, 146, 223, 0, 147, 148, 149, 492, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 345, 157,
	158, 434, 159, 0, 249, 160, 161, 0, 226, 162,
	163, 462, 164, 165, 346, 166, 493, 228, 167, 0,
	168, 169, 171, 494, 170, 468, 0, 172, 0, 173,
	174, 0, 231, 495, 496, 0, 0, 175, 469, 470,
	443, 176, 177, 178, 179, 0, 0, 180, 181, 182,
	463, 0, 183, 184, 185, 236, 497, 0, 186, 0,
	0, 0, 0, 187, 188, 189, 190, 421, 0, 0,
	449, 438, 439, 436, 437, 425, 0, 0, 417, 418,
	415, 0, 89, 90, 419, 91, 0, 426, 0, 0,
	431, 0, 0, 0, 92, 93, 191, 478, 193, 479,
	94, 480, 481, 0, 95, 197, 198, 96, 446, 464,
	482, 483, 201, 0, 474, 0, 457, 0, 97, 98,
	99, 0, 100, 0, 101, 0, 335, 102, 103, 0,
	458, 460, 0, 459, 461, 104, 105, 106, 107, 484,
	108, 485, 486, 0, 0, 109, 0, 0, 0, 477,
	111, 0, 112, 0, 0, 0, 430, 113, 465, 444,
	0, 0, 114, 115, 487, 0, 116, 0, 117, 0,
	0, 336, 0, 118, 475, 0, 210, 0, 119, 120,
	471, 473, 0, 0, 121, 0, 337, 122, 488, 489,
	490, 0, 456, 0, 338, 123, 339, 124, 125, 0,
	0, 476, 340, 126, 341, 0, 127, 0, 0, 128,
	0, 129, 130, 131, 132, 133, 342, 134, 135, 138,
	136, 420, 137, 445, 472, 139, 491, 140, 141, 0,
	0, 0, 0, 0, 142, 220, 343, 143, 344, 466,
	144, 145, 0, 467, 146, 223, 0, 147, 148, 149,
	492, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	345, 157, 158, 434, 159, 0, 249, 160, 161, 0,
	226, 162, 163, 462, 164, 165, 346, 166, 493, 228,
	167, 0, 168, 169, 171, 494, 170, 468, 0, 172,
	0, 173, 174, 0, 231, 495, 496, 0, 0, 175,
	469, 470, 443, 176, 177, 178, 179, 0, 0, 180,
	181, 182, 463, 0, 183, 184, 185, 236, 497, 1375,
	186, 0, 0, 0, 0, 187, 188, 189, 190, 421,
	449, 438, 439, 436, 437, 425, 0, 0, 0, 0,
	417, 418, 89, 90, 0, 91, 419, 0, 0, 426,
	431, 0, 0, 0, 92, 93, 191, 478, 193, 479,
	94, 480, 481, 0, 95, 197, 198, 96, 446, 464,
	482, 483, 201, 0, 474, 0, 457, 0, 97, 98,
	99, 0, 100, 0, 101, 0, 335, 102, 103, 0,
	458, 460, 0, 459, 461, 104, 105, 106, 107, 484,
	108, 485, 486, 518, 0, 109, 0, 0, 0, 477,
	111, 0, 112, 0, 0, 0, 430, 113, 465, 444,
	0, 0, 114, 115, 487, 0, 116, 0, 117, 0,
	0, 336, 0, 118, 475, 0, 210, 0, 119, 120,
	471, 473, 0, 0, 121, 0, 337, 122, 488, 489,
	490, 0, 456, 0, 338, 123, 339, 124, 125, 0,
	0, 476, 340, 126, 341, 0, 127, 0, 0, 128,
	0, 129, 130, 131, 132, 133, 342, 134, 135, 138,
	136, 420, 137, 445, 472, 139, 491, 140, 141, 0,
	0, 0, 0, 0, 142, 220, 343, 143, 344, 466,
	144, 145, 0, 467, 146, 223, 0, 147, 148, 149,
	492, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	345, 157, 158, 434, 159, 0, 249, 160, 161, 0,
	226, 162, 163, 462, 164, 165, 346, 166, 493, 228,
	167, 0, 168, 169, 171, 494, 170, 468, 0, 172,
	0, 173, 174, 0, 231, 495, 496, 0, 0, 175,
	469, 470, 443, 176, 177, 178, 179, 0, 0, 180,
	181, 182, 463, 0, 183, 184, 185, 236, 497, 0,
	186, 0, 0, 0, 0, 187, 188, 189, 190, 421,
	449, 438, 439, 436, 437, 425, 0, 0, 0, 0,
	417, 418, 89, 90, 0, 91, 419, 0, 0, 426,
	431, 0, 0, 0, 92, 93, 191, 478, 193, 479,
	94, 480, 481, 0, 95, 197, 198, 96, 446, 464,
	482, 483, 201, 0, 474, 0, 457, 0, 97, 98,
	99, 0, 100, 0, 101, 0, 335, 102, 103, 0,
	458, 460, 0, 459, 461, 104, 105, 106, 107, 484,
	108, 485, 486, 0, 0, 109, 0, 0, 0, 477,
	111, 0, 112, 0, 0, 0, 430, 113, 465, 444,
	0, 0, 114, 115, 487, 0, 116, 0, 117, 0,
	1071, 336, 0, 118, 475, 0, 210, 0, 119, 120,
	471, 473, 0, 0, 121, 0, 337, 122, 488, 489,
	490, 0, 456, 0, 338, 123, 339, 124, 125, 0,
	0, 476, 340, 126, 341, 0, 127, 0, 0, 128,
	0, 129, 130, 131, 132, 133, 342, 134, 135, 138,
	136, 420, 137, 445, 472, 139, 491, 140, 141, 0,
	0, 0, 0, 0, 142, 220, 343, 143, 344, 466,
	144, 145, 0, 467, 146, 223, 0, 147, 148, 149,
	492, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	345, 157, 158, 434, 159, 0, 249, 160, 161, 0,
	226, 162, 163, 462, 164, 165, 346, 166, 493, 228,
	167, 0, 168, 169, 171, 494, 170, 468, 0, 172,
	0, 173, 174, 0, 231, 495, 496, 0, 0, 175,
	469, 470, 443, 176, 177, 178, 179, 0, 0, 180,
	181, 182, 463, 0, 183, 184, 185, 236, 497, 0,
	186, 0, 0, 0, 0, 187, 188, 189, 190, 421,
	449, 438, 439, 436, 437, 425, 0, 0, 0, 0,
	417, 418, 89, 90, 708, 91, 419, 0, 0, 426,
	431, 0, 0, 0, 92, 93, 191, 478, 193, 479,
	94, 480, 481, 0, 95, 197, 198, 96, 446, 464,
	482, 483, 201, 0, 474, 0, 457, 0, 97, 98,
	99, 0, 100, 0, 101, 0, 335, 102, 103, 0,
	458, 460, 0, 459, 461, 104, 105, 106, 107, 484,
	108, 485, 486, 0, 0, 109, 0, 0, 0, 477,
	111, 0, 112, 0, 0, 0, 430, 113, 465, 444,
	0, 0, 114, 115, 487, 0, 116, 0, 117, 0,
	0, 336, 0, 118, 475, 0, 210, 0, 119, 120,
	471, 473, 0, 0, 121, 0, 337, 122, 488, 489,
	490, 0, 456, 0, 338, 123, 339, 124, 125, 0,
	0, 476, 340, 126, 341, 0, 127, 0, 0, 128,
	0, 129, 130, 131, 132, 133, 342, 134, 135, 138,
	136, 420, 137, 445, 472, 139, 491, 140, 141, 0,
	0, 0, 0, 0, 142, 220, 343, 143, 344, 466,
	144, 145, 0, 467, 146, 223, 0, 147, 148, 149,
	492, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	345, 157, 158, 434, 159, 0, 249, 160, 161, 0,
	226, 162, 163, 462, 164, 165, 346, 166, 493, 228,
	167, 0, 168, 169, 171, 494, 170, 468, 0, 172,
	0, 173, 174, 0, 231, 495, 496, 0, 0, 175,
	469, 470, 443, 176, 177, 178, 179, 0, 0, 180,
	181, 182, 463, 0, 183, 184, 185, 236, 497, 0,
	186, 0, 0, 0, 0, 187, 188, 189, 190, 421,
	449, 438, 439, 436, 437, 425, 0, 0, 0, 0,
	417, 418, 89, 90, 0, 91, 419, 0, 0, 426,
	431, 0, 0, 0, 92, 93, 191, 478, 193, 479,
	94, 480, 481, 0, 95, 197, 198, 96, 446, 464,
	482, 483, 201, 0, 474, 0, 457, 0, 97, 98,
	99, 0, 100, 0, 101, 0, 335, 102, 1714, 0,
	458, 460, 0, 459, 461, 104, 105, 106, 107, 484,
	108, 485, 486, 0, 0, 109, 0, 0, 0, 477,
	111, 0, 112, 0, 0, 0, 430, 113, 465, 444,
	0, 0, 114, 115, 487, 0, 116, 0, 117, 0,
	0, 336, 0, 118, 475, 0, 210, 0, 119, 120,
	471, 473, 0, 0, 121, 0, 337, 122, 488, 489,
	490, 0, 456, 0, 338, 123, 339, 124, 125, 0,
	0, 476, 340, 126, 341, 0, 127, 0, 0, 128,
	0, 129, 130, 131, 132, 133, 342, 134, 135, 138,
	136, 420, 137, 445, 472, 139, 491, 140, 141, 0,
	0, 0, 0, 0, 142, 220, 343, 143, 344, 466,
	144, 145, 0, 467, 146, 223, 0, 147, 148, 149,
	492, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	345, 157, 158, 434, 159, 0, 249, 160, 161, 0,
	226, 162, 163, 462, 164, 165, 346, 166, 493, 228,
	167, 0, 168, 169, 171, 494, 170, 468, 0, 172,
	0, 173, 174, 0, 231, 495, 496, 0, 0, 175,
	469, 470, 443, 176, 177, 1713, 179, 0, 0, 180,
	181, 182, 463, 0, 183, 184, 185, 236, 497, 0,
	186, 0, 0, 0, 0, 187, 188, 189, 190, 421,
	449, 438, 439, 436, 437, 425, 0, 0, 0, 0,
	417, 418, 89, 90, 0, 91, 419, 0, 0, 426,
	431, 0, 0, 0, 92, 93, 1712, 478, 193, 479,
	94, 480, 481, 0, 95, 197, 198, 96, 446, 464,
	482, 483, 201, 0, 474, 0, 457, 0, 97, 98,
	99, 0, 100, 0, 101, 0, 335, 102, 1714, 0,
	458, 460, 0, 459, 461, 104, 105, 106, 107, 484,
	108, 485, 486, 0, 0, 109, 0, 0, 0, 477,
	111, 0, 112, 0, 0, 0, 430, 113, 465, 444,
	0, 0, 114, 115, 487, 0, 116, 0, 117, 0,
	0, 336, 0, 118, 475, 0, 210, 0, 119, 120,
	471, 473, 0, 0, 121, 0, 337, 122, 488, 489,
	490, 0, 456, 0, 338, 123, 339, 124, 125, 0,
	0, 476, 340, 126, 341, 0, 127, 0, 0, 128,
	0, 129, 130, 131, 132, 133, 342, 134, 135, 138,
	136, 420, 137, 445, 472, 139, 491, 140, 141, 0,
	0, 0, 0, 0, 142, 220, 343, 143, 344, 466,
	144, 145, 0, 467, 146, 223, 0, 147, 148, 149,
	492, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	345, 157, 158, 434, 159, 0, 249, 160, 161, 0,
	226, 162, 163, 462, 164, 165, 346, 166, 493, 228,
	167, 0, 168, 169, 171, 494, 170, 468, 0, 172,
	0, 173, 174, 0, 231, 495, 496, 0, 0, 175,
	469, 470, 443, 176, 177, 1713, 179, 0, 0, 180,
	181, 182, 463, 0, 183, 184, 185, 236, 497, 0,
	186, 0, 0, 0, 0, 187, 188, 189, 190, 421,
	449, 438, 439, 436, 437, 425, 0, 0, 0, 0,
	417, 418, 89, 90, 0, 91, 419, 0, 0, 426,
	431, 0, 0, 0, 92, 93, 191, 478, 193, 479,
	94, 480, 481, 0, 95, 197, 198, 96, 446, 464,
	482, 483, 201, 0, 474, 0, 457, 0, 97, 98,
	99, 0, 100, 0, 101, 0, 335, 102, 103, 0,
	458, 460, 0, 459, 461, 104, 105, 106, 107, 484,
	108, 485, 486, 0, 0, 109, 0, 0, 0, 477,
	111, 0, 112, 0, 0, 0, 430, 113, 465, 444,
	0, 0, 114, 115, 487, 0, 116, 0, 117, 0,
	0, 336, 0, 118, 475, 0, 210, 0, 119, 120,
	471, 473, 0, 0, 121, 0, 337, 122, 488, 489,
	490, 0, 456, 0, 338, 123, 339, 124, 125, 0,
	0, 476, 340, 126, 341, 0, 127, 0, 0, 128,
	0, 129, 130, 131, 132, 133, 342, 134, 135, 138,
	136, 420, 137, 445, 472, 139, 491, 140, 141, 0,
	0, 0, 0, 0, 142, 220, 343, 143, 344, 466,
	144, 145, 0, 467, 146, 223, 0, 147, 148, 149,
	492, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	345, 157, 158, 434, 159, 0, 249, 160, 161, 0,
	226, 162, 163, 462, 164, 165, 346, 166, 493, 228,
	167, 0, 168, 169, 171, 494, 170, 468, 0, 172,
	0, 173, 174, 0, 231, 495, 496, 0, 0, 175,
	469, 470, 443, 176, 177, 178, 179, 0, 0, 180,
	181, 182, 463, 0, 183, 184, 185, 236, 497, 0,
	186, 0, 0, 0, 0, 187, 188, 189, 190, 421,
	449, 438, 439, 436, 437, 425, 0, 0, 0, 0,
	417, 418, 89, 90, 0, 91, 419, 0, 0, 426,
	431, 0, 0, 0, 92, 93, 191, 478, 193, 479,
	94, 480, 481, 0, 95, 197, 198, 96, 446, 464,
	482, 483, 201, 0, 474, 0, 457, 0, 97, 98,
	99, 0, 100, 0, 101, 0, 335, 102, 103, 0,
	458, 460, 0, 459, 461, 104, 105, 106, 107, 484,
	108, 485, 486, 0, 0, 109, 0, 0, 0, 477,
	111, 0, 112, 0, 0, 0, 430, 113, 465, 444,
	0, 0, 114, 115, 487, 0, 116, 0, 117, 0,
	0, 336, 0, 118, 475, 0, 210, 0, 119, 120,
	471, 473, 0, 0, 121, 0, 337, 122, 488, 489,
	490, 0, 456, 0, 338, 123, 339, 124, 125, 0,
	0, 476, 340, 126, 341, 0, 127, 0, 0, 128,
	0, 129, 130, 131, 132, 133, 342, 134, 135, 138,
	136, 0, 137, 445, 472, 139, 491, 140, 141, 0,
	0, 0, 0, 0, 142, 220, 343, 143, 344, 466,
	144, 145, 0, 467, 146, 223, 0, 147, 148, 149,
	492, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	345, 157, 158, 1061, 159, 0, 249, 160, 161, 0,
	226, 162, 163, 462, 164, 165, 346, 166, 493, 228,
	167, 0, 168, 169, 171, 494, 170, 468, 0, 172,
	0, 173, 174, 0, 231, 495, 496, 0, 0, 175,
	469, 470, 443, 176, 177, 178, 179, 0, 0, 180,
	181, 182, 463, 0, 183, 184, 185, 236, 497, 0,
	186, 0, 0, 0, 0, 187, 188, 189, 190, 0,
	449, 438, 439, 436, 437, 425, 0, 0, 0, 0,
	1057, 1058, 89, 90, 0, 91, 1059, 0, 0, 1060,
	431, 0, 0, 0, 92, 93, 0, 478, 193, 479,
	94, 480, 481, 0, 95, 197, 198, 96, 446, 464,
	482, 483, 201, 0, 474, 0, 457, 0, 97, 98,
	99, 0, 100, 0, 101, 0, 335, 102, 1714, 0,
	458, 460, 0, 459, 461, 104, 105, 106, 107, 484,
	108, 485, 486, 0, 0, 109, 0, 0, 0, 477,
	111, 0, 112, 0, 0, 0, 430, 113, 465, 444,
	0, 0, 114, 115, 487, 0, 116, 0, 117, 0,
	0, 336, 0, 118, 475, 0, 210, 0, 119, 120,
	471, 473, 0, 0, 121, 0, 337, 122, 488, 489,
	490, 0, 456, 0, 0, 123, 339, 124, 125, 0,
	0, 476, 340, 126, 0, 0, 127, 0, 0, 128,
	0, 129, 130, 131, 132, 133, 342, 134, 135, 138,
	136, 420, 137, 445, 472, 139, 491, 140, 141, 0,
	0, 0, 0, 0, 142, 220, 343, 143, 344, 466,
	144, 145, 0, 467, 146, 223, 0, 147, 148, 149,
	492, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	345, 157, 158, 434, 159, 0, 249, 160, 161, 0,
	226, 162, 163, 462, 164, 165, 0, 166, 493, 228,
	167, 0, 168, 169, 171, 494, 170, 468, 0, 172,
	0, 173, 174, 0, 231, 495, 496, 0, 0, 175,
	469, 470, 443, 176, 177, 1713, 179, 0, 0, 180,
	181, 182, 463, 0, 183, 184, 185, 236, 497, 0,
	186, 0, 0, 0, 0, 187, 188, 189, 190, 0,
	449, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	417, 418, 89, 90, 0, 91, 419, 0, 0, 426,
	0, 0, 0, 0, 92, 93, 191, 192, 193, 194,
	94, 195, 196, 0, 95, 197, 198, 96, 0, 464,
	199, 200, 201, 0, 474, 0, 457, 0, 97, 98,
	99, 0, 100, 0, 101, 0, 335, 102, 103, 0,
	458, 460, 0, 459, 461, 104, 105, 106, 107, 203,
	108, 204, 205, 0, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 206, 113, 465, 0,
	0, 0, 114, 115, 208, 0, 116, 0, 117, 0,
	0, 336, 0, 118, 475, 0, 210, 0, 119, 120,
	471, 473, 0, 0, 121, 0, 337, 122, 213, 214,
	215, 0, 216, 0, 338, 123, 339, 124, 125, 0,
	0, 476, 340, 126, 341, 0, 127, 0, 0, 128,
	0, 129, 130, 131, 132, 133, 342, 134, 135, 138,
	136, 0, 137, 0, 472, 139, 219, 140, 141, 0,
	0, 0, 0, 0, 142, 220, 343, 143, 344, 466,
	144, 145, 0, 467, 146, 223, 0, 147, 148, 149,
	224, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	345, 157, 158, 225, 159, 0, 249, 160, 161, 0,
	226, 162, 163, 462, 164, 165, 346, 166, 227, 228,
	167, 0, 168, 169, 171, 229, 170, 468, 0, 172,
	0, 173, 174, 0, 231, 232, 233, 0, 0, 175,
	469, 470, 0, 176, 177, 178, 179, 0, 0, 180,
	181, 182, 463, 0, 183, 184, 185, 236, 237, 0,
	186, 0, 0, 0, 0, 187, 188, 189, 190, 329,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 89, 90, 0, 91, 0, 0, 0, 0, 1487,
	0, 0, 0, 92, 93, 191, 192, 193, 194, 94,
	195, 196, 0, 95, 197, 198, 96, 0, 0, 199,
	200, 201, 0, 202, 0, 334, 0, 97, 98, 99,
	0, 100, 0, 101, 0, 335, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 106, 107, 203, 108,
	204, 205, 0, 0, 109, 0, 0, 0, 110, 111,
	0, 112, 0, 0, 0, 206, 113, 207, 0, 0,
	0, 114, 115, 208, 0, 116, 0, 117, 0, 0,
	336, 0, 118, 209, 0, 210, 0, 119, 120, 211,
	212, 0, 0, 121, 0, 337, 122, 213, 214, 215,
	0, 216, 0, 338, 123, 339, 124, 125, 0, 0,
	217, 340, 126, 341, 0, 127, 0, 0, 128, 0,
	129, 130, 131, 132, 133, 342, 134, 135, 138, 136,
	0, 137, 0, 218, 139, 219, 140, 141, 0, 0,
	0, 0, 0, 142, 220, 343, 143, 344, 221, 144,
	145, 0, 222, 146, 223, 0, 147, 148, 149, 224,
	150, 151, 0, 153, 154, 152, 155, 0, 156, 345,
	157, 158, 225, 159, 0, 249, 160, 161, 49, 226,
	162, 163, 0, 164, 165, 346, 166, 227, 228, 167,
	0, 168, 169, 171, 229, 170, 230, 0, 172, 51,
	173, 174, 0, 231, 232, 233, 0, 0, 175, 234,
	235, 0, 176, 177, 178, 179, 0, 0, 180, 181,
	182, 0, 0, 183, 184, 185, 333, 237, 0, 186,
	0, 0, 0, 47, 187, 188, 189, 190, 0, 48,
	329, 580, 0, 581, 576, 571, 0, 0, 0, 0,
	0, 0, 89, 90, 0, 91, 0, 0, 46, 0,
	0, 0, 0, 0, 92, 93, 191, 192, 193, 194,
	94, 195, 196, 0, 95, 197, 198, 96, 0, 0,
	199, 200, 201, 0, 202, 0, 334, 0, 97, 98,
	99, 0, 100, 0, 101, 0, 335, 102, 103, 0,
	0, 0, 0, 0, 0, 104, 105, 106, 107, 203,
	108, 204, 205, 584, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 206, 113, 207, 573,
	0, 0, 114, 115, 208, 0, 116, 0, 117, 0,
	0, 336, 0, 118, 209, 0, 210, 0, 119, 120,
	211, 212, 0, 0, 121, 0, 337, 122, 213, 214,
	215, 0, 216, 0, 338, 123, 339, 124, 125, 0,
	0, 217, 340, 126, 341, 0, 127, 0, 0, 128,
	0, 129, 130, 131, 132, 133, 342, 134, 135, 138,
	136, 0, 137, 0, 218, 139, 219, 140, 141, 0,
	574, 0, 0, 0, 142, 220, 343, 143, 344, 221,
	144, 145, 0, 222, 146, 223, 0, 147, 148, 149,
	224, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	345, 157, 158, 225, 159, 0, 249, 160, 161, 0,
	226, 162, 163, 0, 164, 165, 346, 166, 227, 228,
	167, 0, 168, 169, 171, 229, 170, 230, 0, 172,
	0, 173, 174, 0, 231, 232, 233, 0, 0, 175,
	234, 235, 572, 176, 177, 178, 179, 0, 0, 180,
	181, 182, 0, 0, 183, 184, 185, 236, 237, 0,
	186, 0, 0, 0, 0, 187, 188, 189, 190, 0,
	329, 580, 0, 581, 576, 571, 0, 0, 0, 0,
	582, 577, 89, 90, 0, 91, 0, 0, 0, 0,
	0, 0, 0, 0, 92, 93, 191, 192, 193, 194,
	94, 195, 196, 0, 95, 197, 198, 96, 0, 0,
	199, 200, 201, 0, 202, 0, 334, 0, 97, 98,
	99, 0, 100, 0, 101, 0, 335, 102, 103, 0,
	0, 0, 0, 0, 0, 104, 105, 106, 107, 203,
	108, 204, 205, 567, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 206, 113, 207, 573,
	0, 0, 114, 115, 208, 0, 116, 0, 117, 0,
	0, 336, 0, 118, 209, 0, 210, 0, 119, 120,
	211, 212, 0, 0, 121, 0, 337, 122, 213, 214,
	215, 0, 216, 0, 338, 123, 339, 124, 125, 0,
	0, 217, 340, 126, 341, 0, 127, 0, 0, 128,
	0, 129, 130, 131, 132, 133, 342, 134, 135, 138,
	136, 0, 137, 0, 218, 139, 219, 140, 141, 0,
	574, 0, 0, 0, 142, 220, 343, 143, 344, 221,
	144, 145, 0, 222, 146, 223, 0, 147, 148, 149,
	224, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	345, 157, 158, 225, 159, 0, 249, 160, 161, 0,
	226, 162, 163, 0, 164, 165, 346, 166, 227, 228,
	167, 0, 168, 169, 171, 229, 170, 230, 0, 172,
	0, 173, 174, 0, 231, 232, 233, 0, 0, 175,
	234, 235, 572, 176, 177, 178, 179, 0, 0, 180,
	181, 182, 0, 0, 183, 184, 185, 236, 237, 0,
	186, 0, 0, 0, 0, 187, 188, 189, 190, 0,
	329, 580, 0, 581, 576, 571, 0, 0, 0, 0,
	582, 577, 89, 90, 0, 91, 0, 0, 0, 0,
	0, 0, 0, 0, 92, 93, 191, 192, 193, 194,
	94, 195, 196, 0, 95, 197, 198, 96, 0, 0,
	199, 200, 201, 0, 202, 0, 334, 0, 97, 98,
	99, 0, 100, 0, 101, 0, 335, 102, 103, 0,
	0, 0, 0, 0, 0, 104, 105, 106, 107, 203,
	108, 204, 205, 0, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 206, 113, 207, 573,
	0, 0, 114, 115, 208, 0, 116, 0, 117, 0,
	0, 336, 0, 118, 209, 0, 210, 0, 119, 120,
	211, 212, 0, 0, 121, 0, 337, 122, 213, 214,
	215, 0, 216, 0, 338, 123, 339, 124, 125, 0,
	0, 217, 340, 126, 341, 0, 127, 0, 0, 128,
	0, 129, 130, 131, 132, 133, 342, 134, 135, 138,
	136, 0, 137, 0, 218, 139, 219, 140, 141, 0,
	574, 0, 0, 0, 142, 220, 343, 143, 344, 221,
	144, 145, 0, 222, 146, 223, 0, 147, 148, 149,
	224, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	345, 157, 158, 225, 159, 0, 249, 160, 161, 0,
	226, 162, 163, 0, 164, 165, 346, 166, 227, 228,
	167, 0, 168, 169, 171, 229, 170, 230, 0, 172,
	0, 173, 174, 0, 231, 232, 233, 0, 0, 175,
	234, 235, 572, 176, 177, 178, 179, 0, 0, 180,
	181, 182, 0, 0, 183, 184, 185, 236, 237, 86,
	186, 0, 0, 0, 0, 187, 188, 189, 190, 0,
	0, 89, 90, 0, 91, 0, 0, 0, 0, 0,
	582, 577, 0, 92, 93, 191, 192, 193, 194, 94,
	195, 196, 0, 95, 197, 198, 96, 0, 0, 199,
	200, 201, 0, 202, 0, 0, 0, 97, 98, 99,
	0, 100, 0, 101, 0, 0, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 106, 107, 203, 108,
	204, 205, 0, 0, 109, 0, 0, 0, 110, 111,
	0, 112, 0, 0, 0, 206, 113, 207, 0, 0,
	0, 114, 115, 208, 0, 116, 0, 117, 0, 0,
	0, 0, 118, 209, 0, 210, 0, 119, 120, 211,
	212, 0, 0, 121, 0, 0, 122, 213, 214, 215,
	0, 216, 0, 0, 123, 0, 124, 125, 0, 0,
	217, 0, 126, 0, 0, 127, 0, 0, 128, 0,
	129, 130, 131, 132, 133, 0, 134, 135, 138, 136,
	0, 137, 0, 218, 139, 219, 140, 141, 0, 0,
	302, 0, 0, 142, 220, 0, 143, 0, 221, 144,
	145, 0, 222, 146, 223, 0, 147, 148, 149, 224,
	150, 151, 0, 153, 154, 152, 155, 0, 156, 0,
	157, 158, 225, 159, 0, 249, 160, 161, 49, 226,
	162, 163, 0, 164, 165, 0, 166, 227, 228, 167,
	0, 168, 169, 171, 229, 170, 230, 0, 172, 51,
	173, 174, 0, 231, 232, 233, 0, 0, 175, 234,
	235, 0, 176, 177, 178, 179, 0, 0, 180, 181,
	182, 0, 0, 183, 184, 185, 333, 237, 0, 186,
	0, 0, 0, 47, 187, 188, 189, 190, 86, 48,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	89, 90, 0, 91, 0, 0, 0, 0, 923, 0,
	0, 0, 92, 93, 191, 192, 193, 194, 94, 195,
	196, 0, 95, 197, 198, 96, 0, 0, 199, 200,
	201, 0, 202, 0, 0, 0, 97, 98, 99, 0,
	100, 0, 101, 0, 0, 102, 103, 0, 0, 0,
	0, 0, 0, 104, 105, 106, 107, 203, 108, 204,
	205, 0, 0, 109, 0, 0, 0, 110, 111, 0,
	112, 0, 0, 0, 206, 113, 207, 0, 0, 0,
	114, 115, 208, 0, 116, 0, 117, 0, 0, 0,
	0, 118, 209, 0, 210, 0, 119, 120, 211, 212,
	0, 0, 121, 0, 0, 122, 213, 214, 215, 0,
	216, 0, 0, 123, 0, 124, 125, 0, 0, 217,
	0, 126, 0, 0, 127, 0, 0, 128, 0, 129,
	130, 131, 132, 133, 0, 134, 135, 138, 136, 0,
	137, 0, 218, 139, 219, 140, 141, 0, 0, 0,
	0, 0, 142, 220, 0, 143, 0, 221, 144, 145,
	0, 222, 146, 223, 0, 147, 148, 149, 224, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 0, 157,
	158, 225, 159, 0, 249, 160, 161, 49, 226, 162,
	163, 0, 164, 165, 0, 166, 227, 228, 167, 0,
	168, 169, 171, 229, 170, 230, 0, 172, 51, 173,
	174, 0, 231, 232, 233, 0, 0, 175, 234, 235,
	0, 176, 177, 178, 179, 0, 0, 180, 181, 182,
	0, 0, 183, 184, 185, 333, 237, 0, 186, 0,
	0, 0, 47, 187, 188, 189, 190, 86, 48, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 89,
	90, 0, 91, 0, 0, 0, 0, 46, 1174, 0,
	0, 92, 93, 191, 192, 193, 194, 94, 195, 196,
	0, 95, 197, 198, 96, 0, 0, 199, 200, 201,
	0, 202, 0, 0, 0, 97, 98, 99, 0, 100,
	0, 101, 0, 0, 102, 103, 0, 0, 0, 0,
	0, 0, 104, 105, 106, 107, 203, 108, 204, 205,
	0, 0, 109, 0, 0, 0, 110, 111, 0, 112,
	0, 0, 0, 206, 113, 207, 0, 0, 0, 114,
	115, 208, 0, 116, 0, 117, 0, 0, 0, 0,
	118, 209, 0, 210, 0, 119, 120, 211, 212, 0,
	0, 121, 0, 0, 122, 213, 214, 215, 0, 216,
	0, 0, 123, 0, 124, 125, 0, 0, 217, 0,
	126, 0, 0, 127, 0, 0, 128, 0, 129, 130,
	131, 132, 133, 0, 134, 135, 138, 136, 0, 137,
	0, 218, 139, 219, 140, 141, 0, 0, 0, 0,
	0, 142, 220, 0, 143, 0, 221, 144, 145, 0,
	222, 146, 223, 0, 147, 148, 149, 224, 150, 151,
	0, 153, 154, 152, 155, 0, 156, 0, 157, 158,
	225, 159, 0, 249, 160, 161, 0, 226, 162, 163,
	0, 164, 165, 0, 166, 227, 228, 167, 0, 168,
	169, 171, 229, 170, 230, 0, 172, 0, 173, 174,
	0, 231, 232, 233, 0, 0, 175, 234, 235, 0,
	176, 177, 178, 179, 0, 0, 180, 181, 182, 0,
	0, 183, 184, 185, 236, 237, 0, 186, 0, 0,
	0, 0, 187, 188, 189, 190, 86, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 89, 90,
	0, 91, 0, 0, 0, 0, 0, 407, 0, 0,
	92, 93, 191, 192, 193, 194, 94, 195, 196, 0,
	95, 197, 198, 96, 0, 0, 199, 200, 201, 0,
	202, 0, 0, 0, 97, 98, 99, 0, 100, 0,
	101, 0, 0, 102, 103, 0, 0, 0, 0, 0,
	0, 104, 105, 106, 107, 203, 108, 204, 205, 0,
	0, 109, 0, 0, 0, 110, 111, 0, 112, 0,
	0, 0, 206, 113, 207, 0, 0, 0, 114, 115,
	208, 0, 116, 0, 117, 0, 0, 0, 0, 118,
	209, 0, 210, 0, 119, 120, 211, 212, 0, 0,
	121, 0, 0, 122, 213, 214, 215, 0, 216, 0,
	0, 123, 0, 124, 125, 0, 0, 217, 0, 126,
	0, 0, 127, 0, 0, 128, 0, 129, 130, 131,
	132, 133, 0, 134, 135, 138, 136, 0, 137, 0,
	218, 139, 219, 140, 141, 0, 0, 302, 0, 0,
	142, 220, 0, 143, 0, 221, 144, 145, 0, 222,
	146, 223, 0, 147, 148, 149, 224, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 0, 157, 158, 225,
	159, 0, 249, 160, 161, 0, 226, 162, 163, 0,
	164, 165, 0, 166, 227, 228, 167, 0, 168, 169,
	171, 229, 170, 230, 0, 172, 0, 173, 174, 0,
	231, 232, 233, 0, 0, 175, 234, 235, 0, 176,
	177, 178, 179, 0, 0, 180, 181, 182, 0, 0,
	183, 184, 185, 236, 237, 0, 186, 0, 0, 0,
	0, 187, 188, 189, 190, 86, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 89, 90, 0,
	91, 0, 0, 0, 0, 923, 0, 0, 0, 92,
	93, 191, 192, 193, 194, 94, 195, 196, 0, 95,
	197, 198, 96, 0, 0, 199, 200, 201, 0, 202,
	0, 0, 0, 97, 98, 99, 0, 100, 0, 101,
	0, 0, 102, 103, 0, 0, 0, 0, 0, 0,
	104, 105, 106, 107, 203, 108, 204, 205, 0, 0,
	109, 0, 0, 0, 110, 111, 0, 112, 0, 0,
	0, 206, 113, 207, 0, 0, 0, 114, 115, 208,
	0, 116, 0, 117, 0, 0, 0, 0, 118, 209,
	0, 210, 0, 119, 120, 211, 212, 0, 0, 121,
	0, 0, 122, 213, 214, 215, 0, 216, 0, 0,
	123, 0, 124, 125, 0, 0, 217, 0, 126, 0,
	0, 127, 0, 0, 128, 0, 129, 130, 131, 132,
	133, 0, 134, 135, 138, 136, 0, 137, 0, 218,
	139, 219, 140, 141, 0, 0, 0, 0, 0, 142,
	220, 0, 143, 0, 221, 144, 145, 0, 222, 146,
	223, 0, 147, 148, 149, 224, 150, 151, 0, 153,
	154, 152, 155, 0, 156, 0, 157, 158, 225, 159,
	0, 249, 160, 161, 0, 226, 162, 163, 0, 164,
	165, 0, 166, 227, 228, 167, 0, 168, 169, 171,
	229, 170, 230, 0, 172, 0, 173, 174, 0, 231,
	232, 233, 0, 0, 175, 234, 235, 0, 176, 177,
	178, 179, 0, 0, 180, 181, 182, 0, 0, 183,
	184, 185, 236, 237, 0, 186, 0, 0, 0, 0,
	187, 188, 189, 190, 86, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 89, 90, 0, 91,
	0, 0, 0, 0, 856, 0, 0, 0, 92, 93,
	191, 192, 193, 194, 94, 195, 196, 0, 95, 197,
	198, 96, 0, 0, 199, 200, 201, 0, 202, 0,
	0, 0, 97, 98, 99, 0, 100, 0, 101, 0,
	0, 102, 103, 0, 0, 0, 0, 0, 0, 104,
	105, 106, 107, 203, 108, 204, 205, 0, 0, 109,
	0, 0, 0, 110, 111, 0, 112, 0, 0, 0,
	206, 113, 207, 0, 0, 0, 114, 115, 208, 0,
	116, 0, 117, 0, 0, 0, 0, 118, 209, 0,
	210, 0, 119, 120, 211, 212, 0, 0, 121, 0,
	0, 122, 213, 214, 215, 0, 216, 0, 0, 123,
	0, 124, 125, 0, 0, 217, 0, 126, 0, 0,
	127, 0, 0, 128, 0, 129, 130, 131, 132, 133,
	0, 134, 135, 138, 136, 0, 137, 0, 218, 139,
	219, 140, 141, 0, 0, 0, 0, 0, 142, 220,
	0, 143, 0, 221, 144, 145, 0, 222, 146, 223,
	0, 147, 148, 149, 224, 150, 151, 0, 153, 154,
	152, 155, 0, 156, 0, 157, 158, 225, 159, 0,
	249, 160, 161, 0, 226, 162, 163, 0, 164, 165,
	0, 166, 227, 228, 167, 0, 168, 169, 171, 229,
	170, 230, 0, 172, 0, 173, 174, 0, 231, 232,
	233, 0, 0, 175, 234, 235, 0, 176, 177, 178,
	179, 0, 0, 180, 181, 182, 0, 0, 183, 184,
	185, 236, 237, 0, 186, 0, 0, 0, 0, 187,
	188, 189, 190, 86, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 89, 90, 0, 91, 0,
	0, 0, 0, 1393, 0, 0, 0, 92, 93, 191,
	192, 193, 194, 94, 195, 196, 0, 95, 197, 198,
	96, 0, 0, 199, 200, 201, 0, 202, 0, 0,
	0, 97, 98, 99, 0, 100, 0, 101, 0, 0,
	102, 103, 0, 0, 0, 0, 0, 0, 104, 105,
	106, 107, 203, 108, 204, 205, 0, 0, 109, 0,
	0, 0, 110, 111, 0, 112, 0, 0, 0, 206,
	113, 207, 0, 0, 0, 114, 115, 208, 0, 116,
	0, 117, 0, 0, 0, 0, 118, 209, 0, 210,
	0, 119, 120, 211, 212, 0, 0, 121, 0, 0,
	122, 213, 214, 215, 0, 216, 0, 0, 123, 0,
	124, 125, 0, 0, 217, 0, 126, 0, 0, 127,
	0, 0, 128, 0, 129, 130, 131, 132, 133, 0,
	134, 135, 138, 136, 0, 137, 0, 218, 139, 219,
	140, 141, 0, 0, 0, 0, 0, 142, 220, 0,
	143, 0, 221, 144, 145, 0, 222, 146, 223, 0,
	147, 148, 149, 224, 150, 151, 0, 153, 154, 152,
	155, 0, 156, 0, 157, 158, 225, 159, 0, 249,
	160, 161, 0, 226, 162, 163, 0, 164, 165, 0,
	166, 227, 228, 167, 0, 168, 169, 171, 229, 170,
	230, 0, 172, 0, 173, 174, 0, 231, 232, 233,
	0, 0, 175, 234, 235, 0, 176, 177, 178, 179,
	0, 0, 180, 181, 182, 0, 0, 183, 184, 185,
	236, 237, 0, 186, 0, 0, 0, 0, 187, 188,
	189, 190, 86, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 89, 90, 0, 91, 0, 0,
	0, 0, 508, 0, 0, 0, 92, 93, 191, 192,
	193, 194, 94, 195, 196, 0, 95, 197, 198, 96,
	0, 0, 199, 200, 201, 0, 202, 0, 0, 0,
	97, 98, 99, 0, 100, 0, 101, 0, 0, 102,
	103, 0, 0, 0, 0, 0, 0, 104, 105, 552,
	107, 203, 108, 204, 205, 0, 0, 109, 0, 0,
	0, 110, 111, 0, 112, 0, 0, 0, 206, 113,
	207, 0, 0, 0, 114, 115, 208, 0, 116, 0,
	117, 0, 0, 0, 0, 118, 209, 0, 210, 0,
	119, 120, 211, 212, 0, 0, 121, 0, 0, 122,
	213, 214, 215, 0, 216, 0, 0, 123, 0, 124,
	125, 0, 0, 217, 0, 126, 0, 0, 127, 0,
	0, 128, 0, 129, 130, 131, 132, 133, 0, 134,
	135, 138, 136, 0, 137, 0, 218, 139, 219, 140,
	141, 0, 0, 0, 0, 0, 142, 220, 0, 143,
	0, 221, 144, 145, 0, 222, 146, 223, 0, 147,
	148, 149, 224, 150, 151, 0, 153, 154, 152, 155,
	0, 156, 0, 157, 158, 225, 159, 0, 249, 160,
	161, 0, 226, 162, 163, 0, 164, 165, 0, 166,
	227, 228, 167, 0, 168, 169, 171, 229, 170, 230,
	0, 172, 551, 173, 174, 0, 231, 232, 233, 0,
	0, 175, 234, 235, 0, 176, 177, 178, 179, 0,
	0, 180, 181, 182, 0, 0, 183, 184, 185, 236,
	237, 86, 186, 0, 0, 0, 0, 187, 188, 189,
	190, 0, 0, 89, 90, 0, 91, 0, 0, 0,
	0, 0, 0, 0, 555, 92, 93, 191, 192, 193,
	194, 94, 195, 196, 0, 95, 197, 198, 96, 0,
	0, 199, 200, 201, 0, 202, 0, 0, 0, 97,
	98, 99, 0, 100, 0, 101, 0, 0, 102, 103,
	0, 0, 0, 0, 0, 0, 104, 105, 106, 107,
	203, 108, 204, 205, 0, 0, 109, 0, 0, 0,
	110, 111, 0, 112, 0, 0, 0, 206, 113, 207,
	0, 0, 0, 114, 115, 208, 0, 116, 0, 117,
	0, 0, 0, 0, 118, 209, 0, 210, 0, 119,
	120, 211, 212, 0, 0, 121, 0, 0, 122, 213,
	214, 215, 0, 216, 0, 0, 123, 0, 124, 125,
	0, 0, 217, 0, 126, 0, 0, 127, 0, 0,
	128, 0, 129, 130, 131, 132, 133, 0, 134, 135,
	138, 136, 0, 137, 0, 218, 139, 219, 140, 141,
	0, 0, 0, 0, 0, 142, 220, 0, 143, 0,
	221, 144, 145, 0, 222, 146, 223, 0, 147, 148,
	149, 224, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 0, 157, 158, 225, 159, 0, 249, 160, 161,
	0, 226, 162, 163, 0, 164, 165, 0, 166, 227,
	228, 167, 0, 168, 169, 171, 229, 170, 230, 0,
	172, 0, 173, 174, 0, 231, 232, 233, 0, 0,
	175, 234, 235, 0, 176, 177, 178, 179, 0, 0,
	180, 181, 182, 0, 0, 183, 184, 185, 236, 237,
	329, 186, 0, 0, 0, 0, 187, 188, 189, 190,
	0, 0, 89, 90, 0, 91, 0, 0, 0, 0,
	0, 0, 0, 555, 92, 93, 191, 192, 193, 194,
	94, 195, 196, 0, 95, 197, 198, 96, 0, 0,
	199, 200, 201, 0, 202, 0, 334, 0, 97, 98,
	99, 0, 100, 0, 101, 0, 335, 102, 103, 0,
	0, 0, 0, 0, 0, 104, 105, 106, 107, 203,
	108, 204, 205, 0, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 206, 113, 207, 0,
	0, 0, 114, 115, 208, 0, 116, 0, 117, 0,
	0, 336, 0, 118, 209, 0, 210, 0, 119, 120,
	211, 212, 0, 0, 121, 0, 337, 122, 213, 214,
	215, 0, 216, 0, 338, 123, 339, 124, 125, 0,
	0, 217, 340, 126, 341, 0, 127, 0, 0, 128,
	0, 129, 130, 131, 132, 133, 342, 134, 135, 138,
	136, 0, 137, 0, 218, 139, 219, 140, 141, 0,
	0, 0, 0, 0, 142, 220, 343, 143, 344, 221,
	144, 145, 0, 222, 146, 223, 0, 147, 148, 149,
	224, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	345, 157, 158, 225, 159, 0, 249, 160, 161, 0,
	226, 162, 163, 0, 164, 165, 346, 166, 227, 228,
	167, 0, 168, 169, 171, 229, 170, 230, 0, 172,
	0, 173, 174, 0, 231, 232, 233, 0, 0, 175,
	234, 235, 0, 176, 177, 178, 179, 0, 0, 180,
	181, 182, 0, 0, 183, 184, 185, 236, 237, 86,
	186, 0, 0, 0, 0, 187, 188, 189, 190, 0,
	0, 89, 90, 0, 91, 0, 0, 0, 0, 0,
	0, 0, 0, 92, 93, 191, 192, 193, 194, 94,
	195, 196, 0, 95, 197, 198, 96, 0, 0, 199,
	200, 201, 829, 202, 0, 0, 0, 97, 98, 99,
	0, 100, 827, 101, 0, 0, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 106, 107, 203, 108,
	204, 205, 0, 0, 109, 0, 0, 0, 110, 111,
	0, 112, 0, 0, 0, 206, 113, 207, 0, 900,
	0, 114, 115, 208, 0, 116, 0, 117, 832, 0,
	0, 0, 118, 209, 0, 210, 0, 119, 120, 211,
	212, 0, 898, 121, 0, 0, 122, 213, 214, 215,
	0, 216, 0, 0, 123, 0, 124, 125, 0, 0,
	217, 0, 126, 0, 0, 127, 0, 0, 128, 0,
	129, 130, 131, 132, 133, 0, 134, 135, 138, 136,
	0, 137, 0, 218, 139, 219, 140, 141, 0, 0,
	0, 0, 0, 142, 220, 0, 143, 0, 221, 144,
	145, 0, 222, 146, 223, 831, 147, 148, 149, 224,
	150, 151, 0, 153, 154, 152, 155, 0, 156, 0,
	157, 158, 225, 159, 0, 249, 160, 161, 0, 226,
	162, 163, 0, 164, 165, 0, 166, 227, 228, 167,
	0, 168, 169, 171, 229, 170, 230, 0, 172, 0,
	173, 174, 0, 231, 232, 233, 0, 0, 175, 234,
	235, 0, 176, 177, 178, 179, 0, 899, 180, 181,
	182, 0, 0, 183, 184, 185, 236, 237, 86, 186,
	0, 0, 0, 0, 187, 188, 189, 190, 0, 0,
	89, 90, 0, 91, 0, 0, 0, 0, 0, 0,
	0, 0, 92, 93, 191, 192, 193, 194, 94, 195,
	196, 0, 95, 197, 198, 96, 0, 0, 199, 200,
	201, 829, 202, 0, 0, 824, 97, 98, 99, 0,
	100, 827, 101, 0, 0, 102, 103, 0, 0, 0,
	0, 0, 0, 104, 105, 106, 107, 203, 108, 204,
	205, 0, 0, 109, 0, 0, 0, 110, 111, 0,
	112, 0, 0, 0, 206, 113, 207, 0, 0, 0,
	114, 115, 208, 0, 116, 0, 117, 832, 0, 0,
	0, 118, 209, 0, 210, 0, 119, 120, 823, 212,
	0, 0, 121, 0, 0, 122, 213, 214, 215, 0,
	216, 0, 0, 123, 0, 124, 125, 0, 0, 217,
	0, 126, 0, 0, 127, 0, 0, 128, 0, 129,
	130, 131, 132, 133, 0, 134, 135, 138, 136, 0,
	137, 0, 218, 139, 219, 140, 141, 0, 0, 0,
	0, 0, 142, 220, 0, 143, 0, 221, 144, 145,
	0, 222, 146, 223, 831, 147, 148, 149, 224, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 0, 157,
	158, 225, 159, 0, 249, 160, 161, 0, 226, 162,
	163, 0, 164, 165, 0, 166, 227, 228, 167, 0,
	168, 169, 171, 229, 170, 230, 0, 172, 0, 173,
	174, 0, 231, 232, 233, 0, 0, 175, 234, 235,
	0, 176, 177, 178, 179, 0, 830, 180, 181, 182,
	0, 0, 183, 184, 185, 236, 237, 86, 186, 0,
	0, 0, 0, 187, 188, 189, 190, 0, 0, 89,
	90, 0, 91, 0, 0, 0, 0, 0, 1174, 0,
	0, 92, 93, 191, 192, 193, 194, 94, 195, 196,
	0, 95, 197, 198, 96, 0, 0, 199, 200, 201,
	0, 202, 0, 0, 0, 97, 98, 99, 0, 100,
	0, 101, 0, 0, 102, 103, 0, 0, 0, 0,
	0, 0, 104, 105, 106, 107, 203, 108, 204, 205,
	0, 0, 109, 0, 0, 0, 110, 111, 0, 112,
	0, 0, 0, 206, 113, 207, 0, 0, 0, 114,
	115, 208, 0, 116, 0, 117, 0, 0, 0, 0,
	118, 209, 0, 210, 0, 119, 120, 211, 212, 0,
	0, 121, 0, 0, 122, 213, 214, 215, 0, 216,
	0, 0, 123, 0, 124, 125, 0, 0, 217, 0,
	126, 0, 0, 127, 0, 0, 128, 0, 129, 130,
	131, 132, 133, 0, 134, 135, 138, 136, 0, 137,
	0, 218, 139, 219, 140, 141, 0, 0, 0, 0,
	0, 142, 220, 0, 143, 0, 221, 144, 145, 0,
	222, 146, 223, 0, 147, 148, 149, 224, 150, 151,
	0, 153, 154, 152, 155, 0, 156, 0, 157, 158,
	225, 159, 0, 249, 160, 161, 0, 226, 162, 163,
	0, 164, 165, 0, 166, 227, 228, 167, 0, 168,
	169, 171, 229, 170, 230, 0, 172, 0, 173, 174,
	0, 231, 232, 233, 0, 0, 175, 234, 235, 0,
	176, 177, 178, 179, 0, 0, 180, 181, 182, 0,
	0, 183, 184, 185, 236, 237, 86, 186, 0, 0,
	0, 0, 187, 188, 189, 190, 0, 0, 89, 90,
	0, 91, 0, 0, 0, 0, 0, 0, 0, 0,
	92, 93, 191, 192, 193, 194, 94, 195, 196, 0,
	95, 197, 198, 96, 0, 0, 199, 200, 201, 0,
	202, 0, 0, 0, 97, 98, 99, 0, 100, 0,
	101, 0, 0, 102, 103, 0, 0, 0, 0, 0,
	0, 104, 105, 106, 107, 203, 108, 204, 205, 0,
	0, 109, 0, 0, 0, 110, 111, 0, 112, 0,
	0, 0, 206, 113, 207, 0, 0, 0, 114, 115,
	208, 0, 116, 0, 117, 0, 0, 0, 0, 118,
	209, 0, 210, 0, 119, 120, 211, 212, 0, 0,
	121, 0, 0, 122, 213, 214, 215, 0, 216, 0,
	0, 123, 0, 124, 125, 0, 0, 217, 0, 126,
	0, 0, 127, 0, 0, 128, 0, 129, 130, 131,
	132, 133, 0, 134, 135, 138, 136, 0, 137, 0,
	218, 139, 219, 140, 141, 0, 0, 302, 0, 0,
	142, 220, 0, 143, 0, 221, 144, 145, 0, 222,
	146, 223, 0, 147, 148, 149, 224, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 0, 157, 158, 225,
	159, 0, 249, 160, 161, 0, 226, 162, 163, 0,
	164, 165, 0, 166, 227, 228, 167, 0, 168, 169,
	171, 229, 170, 230, 0, 172, 0, 173, 174, 0,
	231, 232, 233, 0, 0, 175, 234, 235, 0, 176,
	177, 178, 179, 0, 0, 180, 181, 182, 0, 0,
	183, 184, 185, 236, 237, 86, 186, 0, 0, 0,
	0, 187, 188, 189, 190, 0, 0, 89, 90, 0,
	91, 0, 0, 0, 0, 0, 0, 0, 0, 92,
	93, 191, 192, 193, 194, 94, 195, 196, 0, 95,
	197, 198, 96, 0, 0, 199, 200, 201, 0, 202,
	0, 0, 0, 97, 98, 99, 0, 100, 0, 101,
	0, 0, 102, 103, 0, 0, 0, 0, 0, 0,
	104, 105, 106, 107, 203, 108, 204, 205, 0, 0,
	109, 0, 0, 0, 110, 111, 0, 112, 0, 0,
	0, 206, 113, 207, 0, 0, 0, 114, 115, 208,
	0, 116, 0, 117, 0, 0, 0, 0, 118, 209,
	0, 210, 0, 119, 120, 308, 212, 0, 0, 121,
	0, 0, 122, 213, 214, 215, 0, 216, 0, 0,
	123, 0, 124, 125, 0, 0, 217, 0, 126, 0,
	0, 127, 0, 0, 128, 0, 129, 130, 131, 132,
	133, 0, 134, 135, 138, 136, 0, 137, 0, 218,
	139, 219, 140, 141, 0, 0, 302, 0, 0, 142,
	220, 0, 143, 0, 221, 144, 145, 0, 222, 146,
	223, 0, 147, 148, 149, 224, 150, 151, 0, 153,
	154, 152, 155, 0, 156, 0, 157, 158, 225, 159,
	0, 249, 160, 161, 0, 226, 162, 163, 0, 164,
	165, 0, 166, 227, 228, 167, 0, 168, 169, 171,
	229, 170, 230, 0, 172, 0, 173, 174, 0, 231,
	232, 233, 0, 0, 175, 234, 235, 0, 176, 177,
	178, 179, 0, 0, 180, 181, 182, 0, 0, 183,
	184, 185, 236, 237, 86, 186, 0, 0, 0, 0,
	187, 188, 189, 190, 0, 0, 89, 90, 0, 91,
	0, 0, 0, 0, 0, 0, 0, 0, 92, 93,
	191, 192, 193, 194, 94, 195, 196, 0, 95, 197,
	198, 96, 0, 0, 199, 200, 201, 0, 202, 0,
	0, 0, 97, 98, 99, 0, 100, 0, 101, 0,
	0, 102, 103, 0, 0, 0, 0, 0, 0, 104,
	105, 106, 107, 203, 108, 204, 205, 0, 0, 109,
	0, 0, 0, 110, 111, 0, 112, 0, 0, 0,
	206, 113, 207, 0, 0, 0, 114, 115, 208, 0,
	116, 0, 117, 0, 0, 0, 0, 118, 209, 0,
	210, 0, 119, 120, 211, 212, 0, 0, 121, 0,
	0, 122, 213, 214, 215, 0, 216, 0, 0, 123,
	0, 124, 125, 0, 0, 217, 0, 126, 0, 0,
	127, 0, 0, 128, 0, 129, 130, 131, 132, 133,
	0, 134, 135, 138, 136, 0, 137, 0, 218, 139,
	219, 140, 141, 0, 0, 0, 0, 0, 142, 220,
	0, 143, 0, 221, 144, 145, 0, 222, 146, 223,
	0, 147, 148, 149, 224, 150, 151, 0, 153, 154,
	152, 155, 0, 156, 0, 157, 158, 225, 159, 0,
	249, 160, 161, 0, 226, 162, 163, 0, 164, 165,
	0, 166, 227, 228, 167, 0, 168, 169, 171, 229,
	170, 230, 0, 172, 0, 173, 174, 0, 231, 232,
	233, 0, 0, 175, 234, 235, 0, 176, 177, 178,
	179, 0, 0, 180, 181, 182, 0, 0, 183, 184,
	185, 236, 237, 86, 186, 0, 0, 0, 0, 187,
	188, 189, 190, 0, 0, 89, 90, 0, 91, 0,
	0, 0, 0, 0, 0, 0, 0, 92, 93, 191,
	192, 193, 194, 94, 195, 196, 0, 95, 197, 198,
	96, 0, 0, 199, 200, 201, 0, 202, 0, 0,
	0, 97, 98, 99, 0, 100, 0, 101, 0, 0,
	102, 103, 0, 0, 0, 0, 0, 0, 104, 105,
	106, 107, 203, 108, 204, 205, 0, 0, 109, 0,
	0, 0, 110, 111, 0, 112, 0, 0, 0, 206,
	113, 207, 0, 0, 0, 114, 115, 208, 0, 116,
	0, 117, 0, 0, 0, 0, 118, 209, 0, 210,
	0, 119, 120, 1107, 212, 0, 0, 121, 0, 0,
	122, 213, 214, 215, 0, 216, 0, 0, 123, 0,
	124, 125, 0, 0, 217, 0, 126, 0, 0, 127,
	0, 0, 128, 0, 129, 130, 131, 132, 133, 0,
	134, 135, 138, 136, 0, 137, 0, 218, 139, 219,
	140, 141, 0, 0, 0, 0, 0, 142, 220, 0,
	143, 0, 221, 144, 145, 0, 222, 146, 223, 0,
	147, 148, 149, 224, 150, 151, 0, 153, 154, 152,
	155, 0, 156, 0, 157, 158, 225, 159, 0, 249,
	160, 161, 0, 226, 162, 163, 0, 164, 165, 0,
	166, 227, 228, 167, 0, 168, 169, 171, 229, 170,
	230, 0, 172, 0, 173, 174, 0, 231, 232, 233,
	0, 0, 175, 234, 235, 0, 176, 177, 178, 179,
	0, 0, 180, 181, 182, 0, 0, 183, 184, 185,
	236, 237, 86, 186, 0, 0, 0, 0, 187, 188,
	189, 190, 0, 0, 89, 90, 0, 91, 0, 0,
	0, 0, 0, 0, 0, 0, 92, 93, 191, 192,
	193, 194, 94, 195, 196, 0, 95, 197, 198, 96,
	0, 0, 199, 200, 201, 0, 202, 0, 0, 0,
	97, 98, 99, 0, 100, 0, 101, 0, 0, 102,
	103, 0, 0, 0, 0, 0, 0, 104, 105, 106,
	107, 203, 108, 204, 205, 0, 0, 109, 0, 0,
	0, 110, 111, 0, 112, 0, 0, 0, 206, 113,
	207, 0, 0, 0, 114, 115, 208, 0, 116, 0,
	117, 0, 0, 0, 0, 118, 209, 0, 210, 0,
	119, 120, 1105, 212, 0, 0, 121, 0, 0, 122,
	213, 214, 215, 0, 216, 0, 0, 123, 0, 124,
	125, 0, 0, 217, 0, 126, 0, 0, 127, 0,
	0, 128, 0, 129, 130, 131, 132, 133, 0, 134,
	135, 138, 136, 0, 137, 0, 218, 139, 219, 140,
	141, 0, 0, 0, 0, 0, 142, 220, 0, 143,
	0, 221, 144, 145, 0, 222, 146, 223, 0, 147,
	148, 149, 224, 150, 151, 0, 153, 154, 152, 155,
	0, 156, 0, 157, 158, 225, 159, 0, 249, 160,
	161, 0, 226, 162, 163, 0, 164, 165, 0, 166,
	227, 228, 167, 0, 168, 169, 171, 229, 170, 230,
	0, 172, 0, 173, 174, 0, 231, 232, 233, 0,
	0, 175, 234, 235, 0, 176, 177, 178, 179, 0,
	0, 180, 181, 182, 0, 0, 183, 184, 185, 236,
	237, 86, 186, 0, 0, 0, 0, 187, 188, 189,
	190, 0, 0, 89, 90, 0, 91, 0, 0, 0,
	0, 0, 0, 0, 0, 92, 93, 191, 192, 193,
	194, 94, 195, 196, 0, 95, 197, 198, 96, 0,
	0, 199, 200, 201, 0, 202, 0, 0, 0, 97,
	98, 99, 0, 100, 0, 101, 0, 0, 102, 103,
	0, 0, 0, 0, 0, 0, 104, 105, 106, 107,
	203, 108, 204, 205, 0, 0, 109, 0, 0, 0,
	110, 111, 0, 112, 0, 0, 0, 206, 113, 207,
	0, 0, 0, 114, 115, 208, 0, 116, 0, 117,
	0, 0, 0, 0, 118, 209, 0, 210, 0, 119,
	120, 1096, 212, 0, 0, 121, 0, 0, 122, 213,
	214, 215, 0, 216, 0, 0, 123, 0, 124, 125,
	0, 0, 217, 0, 126, 0, 0, 127, 0, 0,
	128, 0, 129, 130, 131, 132, 133, 0, 134, 135,
	138, 136, 0, 137, 0, 218, 139, 219, 140, 141,
	0, 0, 0, 0, 0, 142, 220, 0, 143, 0,
	221, 144, 145, 0, 222, 146, 223, 0, 147, 148,
	149, 224, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 0, 157, 158, 225, 159, 0, 249, 160, 161,
	0, 226, 162, 163, 0, 164, 165, 0, 166, 227,
	228, 167, 0, 168, 169, 171, 229, 170, 230, 0,
	172, 0, 173, 174, 0, 231, 232, 233, 0, 0,
	175, 234, 235, 0, 176, 177, 178, 179, 0, 0,
	180, 181, 182, 0, 0, 183, 184, 185, 236, 237,
	86, 186, 0, 0, 0, 0, 187, 188, 189, 190,
	0, 0, 89, 90, 0, 91, 0, 0, 0, 0,
	0, 0, 0, 0, 92, 93, 191, 192, 193, 194,
	94, 195, 196, 0, 95, 197, 198, 96, 0, 0,
	199, 200, 201, 0, 202, 0, 0, 0, 97, 98,
	99, 0, 100, 0, 101, 0, 0, 102, 103, 0,
	0, 0, 0, 0, 0, 104, 105, 106, 107, 203,
	108, 204, 205, 0, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 206, 113, 207, 0,
	0, 0, 114, 115, 208, 0, 116, 0, 117, 0,
	0, 0, 0, 118, 209, 0, 210, 0, 119, 120,
	698, 212, 0, 0, 121, 0, 0, 122, 213, 214,
	215, 0, 216, 0, 0, 123, 0, 124, 125, 0,
	0, 217, 0, 126, 0, 0, 127, 0, 0, 128,
	0, 129, 130, 131, 132, 133, 0, 134, 135, 138,
	136, 0, 137, 0, 218, 139, 219, 140, 141, 0,
	0, 0, 0, 0, 142, 220, 0, 143, 0, 221,
	144, 145, 0, 222, 146, 223, 0, 147, 148, 149,
	224, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	0, 157, 158, 225, 159, 0, 249, 160, 161, 0,
	226, 162, 163, 0, 164, 165, 0, 166, 227, 228,
	167, 0, 168, 169, 171, 229, 170, 230, 0, 172,
	0, 173, 174, 0, 231, 232, 233, 0, 0, 175,
	234, 235, 0, 176, 177, 178, 179, 0, 0, 180,
	181, 182, 0, 0, 183, 184, 185, 236, 237, 86,
	186, 0, 0, 0, 0, 187, 188, 189, 190, 0,
	0, 89, 90, 0, 91, 0, 0, 0, 0, 0,
	0, 0, 0, 92, 93, 191, 192, 193, 194, 94,
	195, 196, 0, 95, 197, 198, 96, 0, 0, 199,
	200, 201, 0, 202, 0, 0, 0, 97, 98, 99,
	0, 100, 0, 101, 0, 0, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 106, 107, 203, 108,
	204, 205, 0, 0, 109, 0, 0, 0, 110, 111,
	0, 112, 0, 0, 0, 206, 113, 207, 0, 0,
	0, 114, 115, 208, 0, 116, 0, 117, 0, 0,
	0, 0, 118, 209, 0, 210, 0, 119, 120, 211,
	212, 0, 0, 121, 0, 0, 122, 213, 214, 215,
	0, 216, 0, 0, 123, 0, 124, 125, 0, 0,
	217, 0, 126, 0, 0, 127, 0, 0, 128, 0,
	129, 130, 131, 132, 133, 0, 134, 135, 138, 136,
	0, 137, 0, 218, 139, 219, 140, 141, 0, 0,
	0, 0, 0, 142, 220, 0, 143, 0, 221, 144,
	145, 0, 222, 146, 223, 0, 147, 148, 149, 224,
	150, 151, 0, 153, 154, 152, 155, 0, 156, 0,
	157, 158, 225, 159, 0, 84, 160, 161, 0, 226,
	162, 163, 0, 164, 165, 0, 166, 227, 228, 167,
	0, 168, 169, 171, 229, 170, 230, 0, 172, 0,
	173, 174, 0, 231, 232, 233, 0, 0, 175, 234,
	235, 0, 176, 177, 178, 179, 0, 0, 180, 181,
	182, 0, 0, 183, 184, 185, 236, 237, 86, 186,
	0, 0, 0, 0, 187, 188, 189, 190, 0, 0,
	89, 90, 0, 91, 0, 0, 0, 0, 0, 537,
	0, 0, 92, 93, 191, 192, 193, 194, 94, 195,
	196, 0, 95, 197, 198, 96, 0, 0, 199, 200,
	201, 0, 202, 0, 0, 0, 97, 98, 99, 0,
	100, 0, 101, 0, 0, 102, 103, 0, 0, 0,
	0, 0, 0, 104, 105, 106, 107, 203, 108, 204,
	205, 0, 0, 109, 0, 0, 0, 110, 111, 0,
	112, 0, 0, 0, 206, 113, 207, 0, 0, 0,
	114, 115, 208, 0, 116, 0, 117, 0, 0, 0,
	0, 118, 209, 0, 210, 0, 119, 120, 211, 212,
	0, 0, 121, 0, 0, 122, 213, 214, 215, 0,
	216, 0, 0, 123, 0, 124, 125, 0, 0, 217,
	0, 126, 0, 0, 127, 0, 0, 128, 0, 129,
	130, 131, 132, 133, 0, 134, 135, 138, 136, 0,
	137, 0, 218, 139, 219, 140, 141, 0, 0, 0,
	0, 0, 142, 220, 0, 143, 0, 221, 144, 145,
	0, 222, 146, 223, 0, 147, 148, 149, 224, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 0, 157,
	158, 225, 159, 0, 249, 160, 161, 0, 226, 162,
	163, 0, 0, 165, 0, 166, 227, 228, 167, 0,
	168, 169, 171, 229, 170, 230, 0, 172, 0, 173,
	174, 0, 231, 232, 233, 0, 0, 175, 234, 235,
	0, 176, 177, 178, 179, 0, 0, 180, 181, 182,
	0, 0, 183, 184, 185, 236, 237, 86, 186, 0,
	0, 0, 0, 187, 188, 189, 190, 0, 0, 89,
	90, 0, 91, 0, 0, 0, 0, 0, 0, 0,
	0, 92, 93, 191, 192, 193, 194, 94, 195, 196,
	0, 95, 197, 198, 96, 0, 0, 199, 200, 201,
	0, 202, 0, 0, 0, 97, 98, 99, 0, 100,
	0, 101, 0, 0, 102, 103, 0, 0, 0, 0,
	0, 0, 104, 105, 106, 107, 203, 108, 204, 205,
	0, 0, 109, 0, 0, 0, 110, 111, 0, 112,
	0, 0, 0, 206, 113, 207, 0, 0, 0, 114,
	115, 208, 0, 116, 0, 117, 0, 0, 0, 0,
	118, 209, 0, 210, 0, 119, 120, 392, 212, 0,
	0, 121, 0, 0, 122, 213, 214, 215, 0, 216,
	0, 0, 123, 0, 124, 125, 0, 0, 217, 0,
	126, 0, 0, 127, 0, 0, 128, 0, 129, 130,
	131, 132, 133, 0, 134, 135, 138, 136, 0, 137,
	0, 218, 139, 219, 140, 141, 0, 0, 0, 0,
	0, 142, 220, 0, 143, 0, 221, 144, 145, 0,
	222, 146, 223, 0, 147, 148, 149, 224, 150, 151,
	0, 153, 154, 152, 155, 0, 156, 0, 157, 158,
	225, 159, 0, 249, 160, 161, 0, 226, 162, 163,
	0, 164, 165, 0, 166, 227, 228, 167, 0, 168,
	169, 171, 229, 170, 230, 0, 172, 0, 173, 174,
	0, 231, 232, 233, 0, 0, 175, 234, 235, 0,
	176, 177, 178, 179, 0, 0, 180, 181, 182, 0,
	0, 183, 184, 185, 236, 237, 86, 186, 0, 0,
	0, 0, 187, 188, 189, 190, 0, 0, 89, 90,
	0, 91, 0, 0, 0, 0, 0, 0, 0, 0,
	92, 93, 191, 192, 193, 194, 94, 195, 196, 0,
	95, 197, 198, 96, 0, 0, 199, 200, 201, 0,
	202, 0, 0, 0, 97, 98, 99, 0, 100, 0,
	101, 0, 0, 102, 103, 0, 0, 0, 0, 0,
	0, 104, 105, 106, 107, 203, 108, 204, 205, 0,
	0, 109, 0, 0, 0, 110, 111, 0, 112, 0,
	0, 0, 206, 113, 207, 0, 0, 0, 114, 115,
	208, 0, 116, 0, 117, 0, 0, 0, 0, 118,
	209, 0, 210, 0, 119, 120, 389, 212, 0, 0,
	121, 0, 0, 122, 213, 214, 215, 0, 216, 0,
	0, 123, 0, 124, 125, 0, 0, 217, 0, 126,
	0, 0, 127, 0, 0, 128, 0, 129, 130, 131,
	132, 133, 0, 134, 135, 138, 136, 0, 137, 0,
	218, 139, 219, 140, 141, 0, 0, 0, 0, 0,
	142, 220, 0, 143, 0, 221, 144, 145, 0, 222,
	146, 223, 0, 147, 148, 149, 224, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 0, 157, 158, 225,
	159, 0, 249, 160, 161, 0, 226, 162, 163, 0,
	164, 165, 0, 166, 227, 228, 167, 0, 168, 169,
	171, 229, 170, 230, 0, 172, 0, 173, 174, 0,
	231, 232, 233, 0, 0, 175, 234, 235, 0, 176,
	177, 178, 179, 0, 0, 180, 181, 182, 0, 0,
	183, 184, 185, 236, 237, 86, 186, 0, 0, 0,
	0, 187, 188, 189, 190, 0, 0, 89, 90, 0,
	91, 0, 0, 0, 0, 0, 0, 0, 0, 92,
	93, 191, 192, 193, 194, 94, 195, 196, 0, 95,
	197, 198, 96, 0, 0, 199, 200, 352, 0, 202,
	0, 0, 0, 97, 98, 99, 0, 100, 0, 101,
	0, 0, 102, 103, 0, 0, 0, 0, 0, 0,
	104, 105, 106, 107, 203, 108, 204, 205, 0, 0,
	109, 0, 0, 0, 110, 111, 0, 112, 0, 0,
	0, 206, 113, 207, 0, 0, 0, 114, 115, 208,
	0, 116, 0, 117, 0, 0, 0, 0, 118, 209,
	0, 210, 0, 119, 120, 211, 212, 0, 0, 121,
	0, 0, 122, 213, 214, 215, 0, 216, 0, 0,
	123, 0, 124, 125, 0, 0, 217, 0, 126, 0,
	0, 127, 0, 0, 128, 0, 129, 130, 131, 132,
	246, 0, 134, 135, 138, 136, 0, 137, 0, 218,
	139, 219, 140, 141, 0, 0, 0, 0, 0, 142,
	220, 0, 143, 0, 221, 144, 145, 0, 222, 146,
	223, 0, 147, 148, 149, 224, 150, 151, 0, 153,
	154, 152, 155, 0, 156, 0, 157, 158, 225, 159,
	0, 249, 160, 161, 0, 226, 162, 163, 0, 164,
	165, 0, 166, 227, 228, 167, 0, 168, 169, 171,
	229, 170, 230, 0, 172, 0, 173, 174, 0, 245,
	232, 233, 0, 0, 241, 234, 235, 0, 176, 177,
	178, 179, 0, 0, 180, 181, 182, 0, 0, 183,
	184, 185, 236, 237, 86, 186, 0, 0, 0, 0,
	187, 188, 189, 190, 0, 0, 89, 90, 0, 91,
	0, 0, 0, 0, 0, 0, 0, 0, 92, 93,
	191, 192, 193, 194, 94, 195, 196, 0, 95, 197,
	198, 96, 0, 0, 199, 200, 201, 0, 202, 0,
	0, 0, 97, 98, 99, 0, 100, 0, 101, 0,
	0, 102, 103, 0, 0, 0, 0, 0, 0, 104,
	105, 106, 107, 203, 108, 204, 205, 0, 0, 109,
	0, 0, 0, 110, 111, 0, 112, 0, 0, 0,
	206, 113, 207, 0, 0, 0, 114, 115, 208, 0,
	116, 0, 117, 0, 0, 0, 0, 118, 209, 0,
	210, 0, 119, 120, 211, 212, 0, 0, 121, 0,
	0, 122, 213, 214, 215, 0, 216, 0, 0, 123,
	0, 124, 125, 0, 0, 217, 0, 126, 0, 0,
	127, 0, 0, 128, 0, 129, 130, 131, 132, 246,
	0, 134, 135, 138, 136, 0, 137, 0, 218, 139,
	219, 140, 141, 0, 0, 0, 0, 0, 142, 220,
	0, 143, 0, 221, 144, 145, 0, 222, 146, 223,
	0, 147, 148, 149, 224, 150, 151, 0, 153, 154,
	152, 155, 0, 156, 0, 157, 158, 225, 159, 0,
	249, 160, 161, 0, 226, 162, 163, 0, 164, 165,
	0, 166, 227, 228, 167, 0, 168, 169, 171, 229,
	170, 230, 0, 172, 0, 173, 174, 0, 245, 232,
	233, 0, 0, 241, 234, 235, 0, 176, 177, 178,
	179, 0, 0, 180, 181, 182, 0, 0, 183, 184,
	185, 236, 237, 86, 186, 0, 0, 0, 0, 187,
	188, 189, 190, 0, 0, 89, 90, 0, 91, 0,
	0, 0, 0, 0, 0, 0, 0, 92, 93, 191,
	192, 193, 194, 94, 195, 196, 0, 95, 197, 198,
	96, 0, 0, 199, 200, 201, 0, 202, 0, 0,
	0, 97, 98, 99, 0, 100, 0, 101, 0, 0,
	102, 103, 0, 0, 0, 0, 0, 0, 104, 105,
	106, 107, 203, 108, 204, 205, 0, 0, 109, 0,
	0, 0, 110, 111, 0, 112, 0, 0, 0, 206,
	113, 207, 0, 0, 0, 114, 115, 208, 0, 116,
	0, 117, 0, 0, 0, 0, 118, 209, 0, 210,
	0, 119, 120, 324, 212, 0, 0, 121, 0, 0,
	122, 213, 214, 215, 0, 216, 0, 0, 123, 0,
	124, 125, 0, 0, 217, 0, 126, 0, 0, 127,
	0, 0, 128, 0, 129, 130, 131, 132, 133, 0,
	134, 135, 138, 136, 0, 137, 0, 218, 139, 219,
	140, 141, 0, 0, 0, 0, 0, 142, 220, 0,
	143, 0, 221, 144, 145, 0, 222, 146, 223, 0,
	147, 148, 149, 224, 150, 151, 0, 153, 154, 152,
	155, 0, 156, 0, 157, 158, 225, 159, 0, 249,
	160, 161, 0, 226, 162, 163, 0, 164, 165, 0,
	166, 227, 228, 167, 0, 168, 169, 171, 229, 170,
	230, 0, 172, 0, 173, 174, 0, 231, 232, 233,
	0, 0, 175, 234, 235, 0, 176, 177, 178, 179,
	0, 0, 180, 181, 182, 0, 0, 183, 184, 185,
	236, 237, 86, 186, 0, 0, 0, 0, 187, 188,
	189, 190, 0, 0, 89, 90, 0, 91, 0, 0,
	0, 0, 0, 0, 0, 0, 92, 93, 191, 192,
	193, 194, 94, 195, 196, 0, 95, 197, 198, 96,
	0, 0, 199, 200, 201, 0, 202, 0, 0, 0,
	97, 98, 99, 0, 100, 0, 101, 0, 0, 102,
	103, 0, 0, 0, 0, 0, 0, 104, 105, 106,
	107, 203, 108, 204, 205, 0, 0, 109, 0, 0,
	0, 110, 111, 0, 112, 0, 0, 0, 206, 113,
	207, 0, 0, 0, 114, 115, 208, 0, 116, 0,
	117, 0, 0, 0, 0, 118, 209, 0, 210, 0,
	119, 120, 321, 212, 0, 0, 121, 0, 0, 122,
	213, 214, 215, 0, 216, 0, 0, 123, 0, 124,
	125, 0, 0, 217, 0, 126, 0, 0, 127, 0,
	0, 128, 0, 129, 130, 131, 132, 133, 0, 134,
	135, 138, 136, 0, 137, 0, 218, 139, 219, 140,
	141, 0, 0, 0, 0, 0, 142, 220, 0, 143,
	0, 221, 144, 145, 0, 222, 146, 223, 0, 147,
	148, 149, 224, 150, 151, 0, 153, 154, 152, 155,
	0, 156, 0, 157, 158, 225, 159, 0, 249, 160,
	161, 0, 226, 162, 163, 0, 164, 165, 0, 166,
	227, 228, 167, 0, 168, 169, 171, 229, 170, 230,
	0, 172, 0, 173, 174, 0, 231, 232, 233, 0,
	0, 175, 234, 235, 0, 176, 177, 178, 179, 0,
	0, 180, 181, 182, 0, 0, 183, 184, 185, 236,
	237, 86, 186, 0, 0, 0, 0, 187, 188, 189,
	190, 0, 0, 89, 90, 0, 91, 0, 0, 0,
	0, 0, 0, 0, 0, 92, 93, 191, 192, 193,
	194, 94, 195, 196, 0, 95, 197, 198, 96, 0,
	0, 199, 200, 201, 0, 202, 0, 0, 0, 97,
	98, 99, 0, 100, 0, 101, 0, 0, 102, 103,
	0, 0, 0, 0, 0, 0, 104, 105, 106, 107,
	203, 108, 204, 205, 0, 0, 109, 0, 0, 0,
	110, 111, 0, 112, 0, 0, 0, 206, 113, 207,
	0, 0, 0, 114, 115, 208, 0, 116, 0, 117,
	0, 0, 0, 0, 118, 209, 0, 210, 0, 119,
	120, 319, 212, 0, 0, 121, 0, 0, 122, 213,
	214, 215, 0, 216, 0, 0, 123, 0, 124, 125,
	0, 0, 217, 0, 126, 0, 0, 127, 0, 0,
	128, 0, 129, 130, 131, 132, 133, 0, 134, 135,
	138, 136, 0, 137, 0, 218, 139, 219, 140, 141,
	0, 0, 0, 0, 0, 142, 220, 0, 143, 0,
	221, 144, 145, 0, 222, 146, 223, 0, 147, 148,
	149, 224, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 0, 157, 158, 225, 159, 0, 249, 160, 161,
	0, 226, 162, 163, 0, 164, 165, 0, 166, 227,
	228, 167, 0, 168, 169, 171, 229, 170, 230, 0,
	172, 0, 173, 174, 0, 231, 232, 233, 0, 0,
	175, 234, 235, 0, 176, 177, 178, 179, 0, 0,
	180, 181, 182, 0, 0, 183, 184, 185, 236, 237,
	86, 186, 0, 0, 0, 0, 187, 188, 189, 190,
	0, 0, 89, 90, 0, 91, 0, 0, 0, 0,
	0, 0, 0, 0, 92, 93, 191, 192, 193, 194,
	94, 195, 196, 0, 95, 197, 198, 96, 0, 0,
	199, 200, 201, 0, 202, 0, 0, 0, 97, 98,
	99, 0, 100, 0, 101, 0, 0, 102, 103, 0,
	0, 0, 0, 0, 0, 104, 105, 106, 107, 203,
	108, 204, 205, 0, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 206, 113, 207, 0,
	0, 0, 114, 115, 208, 0, 116, 0, 117, 0,
	0, 0, 0, 118, 209, 0, 210, 0, 119, 120,
	311, 212, 0, 0, 121, 0, 0, 122, 213, 214,
	215, 0, 216, 0, 0, 123, 0, 124, 125, 0,
	0, 217, 0, 126, 0, 0, 127, 0, 0, 128,
	0, 129, 130, 131, 132, 133, 0, 134, 135, 138,
	136, 0, 137, 0, 218, 139, 219, 140, 141, 0,
	0, 0, 0, 0, 142, 220, 0, 143, 0, 221,
	144, 145, 0, 222, 146, 223, 0, 147, 148, 149,
	224, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	0, 157, 158, 225, 159, 0, 249, 160, 161, 0,
	226, 162, 163, 0, 164, 165, 0, 166, 227, 228,
	167, 0, 168, 169, 171, 229, 170, 230, 0, 172,
	0, 173, 174, 0, 231, 232, 233, 0, 0, 175,
	234, 235, 0, 176, 177, 178, 179, 0, 0, 180,
	181, 182, 0, 0, 183, 184, 185, 236, 237, 86,
	186, 0, 0, 0, 0, 187, 188, 189, 190, 0,
	0, 89, 90, 0, 91, 0, 0, 0, 0, 0,
	0, 0, 0, 92, 93, 191, 192, 193, 194, 94,
	195, 196, 0, 95, 197, 198, 96, 0, 0, 199,
	200, 201, 0, 202, 0, 0, 0, 97, 98, 99,
	0, 100, 0, 101, 0, 0, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 106, 107, 203, 108,
	204, 205, 0, 0, 109, 0, 0, 0, 110, 111,
	0, 112, 0, 0, 0, 206, 113, 207, 0, 0,
	0, 114, 115, 208, 0, 116, 0, 117, 0, 0,
	0, 0, 118, 209, 0, 210, 0, 119, 120, 211,
	212, 0, 0, 121, 0, 0, 122, 213, 214, 215,
	0, 216, 0, 0, 123, 0, 124, 125, 0, 0,
	217, 0, 126, 0, 0, 127, 0, 0, 128, 0,
	129, 130, 131, 132, 133, 0, 134, 135, 138, 136,
	0, 137, 0, 218, 139, 219, 140, 141, 0, 0,
	0, 0, 0, 142, 220, 0, 143, 0, 221, 144,
	145, 0, 222, 146, 223, 0, 147, 148, 149, 224,
	291, 151, 0, 153, 154, 152, 155, 0, 156, 0,
	157, 158, 225, 159, 0, 249, 160, 161, 0, 226,
	162, 163, 0, 164, 165, 0, 166, 227, 228, 167,
	0, 168, 169, 171, 229, 170, 230, 0, 172, 0,
	173, 174, 0, 231, 232, 233, 0, 0, 175, 234,
	235, 0, 176, 177, 178, 179, 0, 0, 180, 181,
	182, 0, 0, 183, 184, 185, 236, 237, 86, 186,
	0, 0, 0, 0, 187, 188, 189, 190, 0, 0,
	89, 90, 0, 91, 0, 0, 0, 0, 0, 0,
	0, 0, 92, 93, 191, 192, 193, 194, 94, 195,
	196, 0, 95, 197, 198, 96, 0, 0, 199, 200,
	201, 0, 202, 0, 0, 0, 97, 98, 99, 0,
	100, 0, 101, 0, 0, 102, 103, 0, 0, 0,
	0, 0, 0, 104, 105, 106, 107, 203, 108, 204,
	205, 0, 0, 109, 0, 0, 0, 110, 111, 0,
	112, 0, 0, 0, 206, 113, 207, 0, 0, 0,
	114, 115, 208, 0, 116, 0, 117, 0, 0, 0,
	0, 118, 209, 0, 210, 0, 119, 120, 211, 212,
	0, 0, 121, 0, 0, 122, 213, 214, 215, 0,
	216, 0, 0, 123, 0, 124, 125, 0, 0, 217,
	0, 126, 0, 0, 239, 0, 0, 128, 0, 129,
	130, 131, 132, 246, 0, 134, 135, 138, 136, 0,
	137, 0, 218, 139, 219, 140, 141, 0, 0, 0,
	0, 0, 142, 220, 0, 143, 0, 221, 144, 145,
	0, 222, 146, 223, 0, 147, 148, 149, 224, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 0, 157,
	158, 225, 159, 0, 249, 160, 161, 0, 226, 162,
	240, 0, 164, 165, 0, 166, 227, 228, 167, 0,
	168, 169, 171, 229, 170, 230, 0, 172, 0, 173,
	174, 0, 245, 232, 233, 0, 0, 241, 234, 235,
	0, 176, 177, 178, 179, 0, 0, 180, 181, 182,
	0, 0, 183, 184, 185, 236, 237, 86, 186, 0,
	0, 0, 0, 187, 188, 189, 190, 0, 0, 89,
	90, 0, 91, 0, 0, 0, 0, 0, 0, 0,
	0, 92, 93, 191, 192, 193, 194, 94, 195, 196,
	0, 95, 197, 198, 96, 0, 0, 199, 200, 201,
	0, 202, 0, 0, 0, 97, 98, 99, 0, 100,
	0, 101, 0, 0, 102, 103, 0, 0, 0, 0,
	0, 0, 104, 105, 106, 107, 203, 108, 204, 205,
	0, 0, 109, 0, 0, 0, 110, 111, 0, 112,
	0, 0, 0, 206, 113, 207, 0, 0, 0, 114,
	115, 208, 0, 116, 0, 117, 0, 0, 0, 0,
	118, 209, 0, 210, 0, 119, 120, 211, 212, 0,
	0, 121, 0, 0, 122, 213, 214, 215, 0, 216,
	0, 0, 123, 0, 124, 125, 0, 0, 217, 0,
	126, 0, 0, 127, 0, 0, 128, 0, 129, 130,
	131, 132, 133, 0, 134, 135, 138, 136, 0, 137,
	0, 218, 139, 219, 140, 141, 0, 0, 0, 0,
	0, 142, 220, 0, 143, 0, 221, 144, 0, 0,
	222, 146, 223, 0, 147, 0, 149, 224, 150, 151,
	0, 153, 154, 152, 155, 0, 156, 0, 157, 158,
	225, 0, 0, 249, 160, 161, 0, 226, 162, 163,
	0, 164, 165, 0, 166, 227, 228, 167, 0, 168,
	169, 171, 229, 170, 230, 0, 172, 0, 173, 174,
	0, 231, 232, 233, 0, 0, 175, 234, 235, 0,
	176, 177, 178, 179, 0, 0, 180, 181, 182, 0,
	0, 183, 184, 185, 236, 237, 724, 186, 743, 744,
	745, 0, 187, 188, 189, 190, 0, 0, 746, 0,
	0, 0, 0, 0, 726, 0, 752, 0, 0, 724,
	0, 743, 744, 745, 0, 0, 0, 0, 0, 0,
	0, 746, 0, 0, 0, 725, 0, 726, 0, 752,
	0, 740, 724, 0, 743, 744, 745, 0, 0, 0,
	0, 0, 0, 0, 746, 0, 0, 0, 725, 0,
	726, 0, 752, 0, 740, 0, 724, 0, 743, 744,
	745, 0, 0, 0, 0, 0, 0, 0, 746, 0,
	0, 725, 0, 0, 726, 731, 752, 740, 0, 724,
	0, 743, 744, 745, 0, 0, 0, 0, 0, 0,
	0, 746, 753, 0, 0, 725, 0, 726, 731, 752,
	0, 740, 0, 0, 751, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 748, 753, 0, 0, 725, 0,
	741, 731, 0, 0, 740, 0, 0, 751, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 748, 753, 0,
	0, 0, 747, 741, 0, 731, 0, 0, 0, 0,
	751, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	748, 0, 753, 0, 0, 747, 741, 0, 731, 0,
	0, 0, 0, 0, 751, 742, 0, 0, 0, 0,
	0, 0, 0, 0, 748, 753, 750, 0, 747, 0,
	741, 0, 0, 0, 0, 0, 0, 751, 742, 0,
	0, 0, 0, 0, 0, 0, 0, 748, 0, 750,
	0, 0, 747, 741, 0, 0, 0, 0, 0, 0,
	0, 742, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 750, 0, 0, 747, 0, 0, 0, 749,
	0, 0, 737, 738, 739, 742, 736, 733, 734, 735,
	727, 728, 729, 730, 732, 0, 750, 0, 0, 0,
	0, 0, 749, 1277, 0, 737, 738, 739, 742, 736,
	733, 734, 735, 727, 728, 729, 730, 732, 0, 750,
	0, 0, 0, 1668, 0, 749, 0, 0, 737, 738,
	739, 0, 736, 733, 734, 735, 727, 728, 729, 730,
	732, 0, 0, 0, 0, 0, 1667, 0, 0, 749,
	0, 0, 737, 738, 739, 0, 736, 733, 734, 735,
	727, 728, 729, 730, 732, 0, 0, 0, 0, 0,
	1648, 0, 749, 0, 0, 737, 738, 739, 0, 736,
	733, 734, 735, 727, 728, 729, 730, 732, 724, 0,
	743, 744, 745, 1627, 0, 0, 0, 0, 0, 0,
	746, 0, 0, 0, 0, 0, 726, 0, 752, 0,
	0, 724, 0, 743, 744, 745, 0, 0, 0, 0,
	0, 0, 0, 746, 0, 0, 0, 725, 0, 726,
	0, 752, 0, 740, 724, 0, 743, 744, 745, 0,
	0, 0, 0, 0, 0, 0, 746, 0, 0, 0,
	725, 0, 726, 0, 752, 0, 740, 0, 724, 0,
	743, 744, 745, 0, 0, 0, 0, 0, 0, 0,
	746, 0, 0, 725, 0, 0, 726, 731, 752, 740,
	0, 724, 0, 743, 744, 745, 0, 0, 0, 0,
	0, 0, 0, 746, 753, 0, 0, 725, 0, 726,
	731, 752, 0, 740, 0, 0, 751, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 748, 753, 0, 0,
	725, 0, 741, 731, 0, 0, 740, 0, 0, 751,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 748,
	753, 0, 0, 0, 747, 741, 0, 731, 0, 0,
	0, 0, 751, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 748, 0, 753, 0, 0, 747, 741, 0,
	731, 0, 0, 0, 0, 0, 751, 742, 0, 0,
	0, 0, 0, 0, 0, 0, 748, 753, 750, 0,
	747, 0, 741, 0, 0, 0, 0, 0, 0, 751,
	742, 0, 0, 0, 0, 0, 0, 0, 0, 748,
	0, 750, 0, 0, 747, 741, 0, 0, 0, 0,
	0, 0, 0, 742, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 750, 0, 0, 747, 0, 0,
	0, 749, 0, 0, 737, 738, 739, 742, 736, 733,
	734, 735, 727, 728, 729, 730, 732, 0, 750, 0,
	0, 0, 1622, 0, 749, 0, 0, 737, 738, 739,
	742, 736, 733, 734, 735, 727, 728, 729, 730, 732,
	0, 750, 0, 0, 0, 1618, 0, 749, 0, 0,
	737, 738, 739, 0, 736, 733, 734, 735, 727, 728,
	729, 730, 732, 0, 0, 0, 0, 0, 1554, 0,
	0, 749, 0, 0, 737, 738, 739, 0, 736, 733,
	734, 735, 727, 728, 729, 730, 732, 0, 0, 0,
	0, 0, 1553, 0, 749, 0, 0, 737, 738, 739,
	0, 736, 733, 734, 735, 727, 728, 729, 730, 732,
	724, 0, 743, 744, 745, 1459, 0, 0, 0, 0,
	0, 0, 746, 0, 0, 0, 0, 0, 726, 0,
	752, 0, 0, 724, 0, 743, 744, 745, 0, 0,
	0, 0, 0, 0, 0, 746, 0, 0, 0, 725,
	0, 726, 0, 752, 0, 740, 724, 0, 743, 744,
	745, 0, 0, 0, 0, 0, 0, 0, 746, 0,
	0, 0, 725, 0, 726, 0, 752, 0, 740, 0,
	724, 0, 743, 744, 745, 0, 0, 0, 0, 0,
	0, 0, 746, 0, 0, 725, 0, 0, 726, 731,
	752, 740, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 753, 0, 0, 725,
	0, 0, 731, 0, 0, 740, 0, 0, 751, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 748, 753,
	0, 0, 0, 0, 741, 731, 0, 0, 0, 0,
	0, 751, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 748, 753, 0, 0, 0, 747, 741, 1238, 731,
	1255, 1256, 1257, 0, 751, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 748, 0, 753, 0, 0, 747,
	741, 0, 0, 0, 0, 0, 0, 0, 751, 742,
	0, 0, 0, 0, 0, 0, 0, 0, 748, 0,
	750, 0, 747, 1252, 741, 0, 0, 0, 0, 0,
	0, 0, 742, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 750, 0, 0, 747, 0, 0, 0,
	0, 0, 0, 0, 0, 742, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 750, 1243, 0, 0,
	0, 0, 0, 749, 0, 0, 737, 738, 739, 742,
	736, 733, 734, 735, 727, 728, 729, 730, 732, 0,
	750, 0, 0, 0, 1396, 0, 749, 0, 0, 737,
	738, 739, 0, 736, 733, 734, 735, 727, 728, 729,
	730, 732, 1253, 0, 0, 0, 0, 1371, 0, 749,
	0, 0, 737, 738, 739, 0, 736, 733, 734, 735,
	727, 728, 729, 730, 732, 0, 0, 0, 0, 0,
	1009, 0, 0, 749, 0, 0, 737, 738, 739, 0,
	736, 733, 734, 735, 727, 728, 729, 730, 732, 0,
	0, 724, 1443, 743, 744, 745, 0, 1254, 0, 0,
	0, 0, 0, 746, 0, 0, 0, 0, 0, 726,
	0, 752, 0, 0, 724, 0, 743, 744, 745, 0,
	0, 0, 0, 0, 0, 0, 746, 0, 0, 0,
	725, 0, 726, 0, 752, 0, 740, 0, 0, 0,
	724, 0, 743, 744, 745, 0, 0, 0, 0, 0,
	0, 0, 746, 725, 0, 0, 911, 0, 726, 740,
	752, 0, 0, 0, 1249, 1250, 1251, 0, 1248, 1245,
	1246, 1247, 1239, 1240, 1241, 1242, 1244, 0, 0, 725,
	731, 1732, 0, 0, 0, 740, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 753, 0, 0,
	0, 0, 0, 731, 0, 1269, 0, 0, 1268, 751,
	912, 0, 0, 0, 0, 0, 0, 0, 0, 748,
	753, 0, 0, 0, 0, 741, 0, 0, 0, 731,
	0, 0, 751, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 748, 0, 0, 0, 753, 747, 741, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 751, 1731,
	0, 0, 0, 0, 0, 0, 0, 0, 748, 0,
	747, 0, 0, 0, 741, 0, 0, 0, 0, 0,
	742, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 750, 0, 0, 0, 0, 747, 0, 0, 0,
	0, 0, 0, 742, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 750, 755, 0, 0, 0, 0,
	0, 724, 0, 743, 744, 745, 0, 0, 0, 742,
	0, 0, 0, 746, 0, 0, 754, 0, 0, 726,
	750, 752, 0, 0, 749, 0, 0, 737, 738, 739,
	0, 736, 733, 734, 735, 727, 728, 729, 730, 732,
	725, 0, 0, 0, 0, 0, 740, 749, 0, 0,
	737, 738, 739, 0, 736, 733, 734, 735, 727, 728,
	729, 730, 732, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 749, 0, 0, 737, 738, 739, 0,
	736, 733, 734, 735, 727, 728, 729, 730, 732, 0,
	731, 724, 0, 743, 744, 745, 0, 0, 0, 0,
	0, 0, 0, 746, 0, 0, 0, 753, 0, 726,
	0, 752, 0, 0, 0, 0, 0, 0, 0, 751,
	0, 724, 0, 743, 744, 745, 0, 0, 0, 748,
	725, 0, 0, 746, 0, 741, 740, 0, 0, 726,
	0, 752, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 747, 0, 0,
	725, 0, 0, 0, 0, 0, 740, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	731, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	742, 0, 0, 0, 0, 0, 0, 753, 0, 0,
	0, 750, 0, 0, 0, 0, 0, 0, 0, 751,
	731, 724, 0, 743, 744, 745, 0, 0, 0, 748,
	0, 0, 0, 746, 0, 741, 0, 753, 0, 726,
	0, 752, 0, 0, 0, 0, 0, 0, 0, 751,
	0, 0, 0, 0, 0, 0, 0, 747, 286, 748,
	725, 0, 0, 0, 749, 741, 740, 737, 738, 739,
	0, 736, 733, 734, 735, 727, 728, 729, 730, 732,
	0, 0, 0, 0, 0, 0, 0, 747, 0, 0,
	742, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 750, 0, 0, 0, 0, 0, 0, 0, 0,
	731, 0, 0, 0, 0, 1275, 0, 0, 0, 0,
	742, 0, 0, 0, 0, 0, 0, 753, 0, 0,
	0, 750, 0, 0, 0, 0, 0, 0, 0, 751,
	0, 0, 0, 0, 0, 0, 0, 0, 1390, 748,
	0, 0, 0, 0, 749, 741, 0, 737, 738, 739,
	0, 736, 733, 734, 735, 727, 728, 729, 730, 732,
	0, 0, 0, 0, 0, 0, 0, 747, 0, 0,
	0, 0, 0, 0, 749, 0, 0, 737, 738, 739,
	0, 736, 733, 734, 735, 727, 728, 729, 730, 732,
	0, 0, 724, 0, 743, 744, 745, 0, 0, 0,
	742, 0, 0, 0, 746, 0, 0, 1270, 0, 0,
	726, 750, 752, 0, 0, 0, 724, 0, 743, 744,
	745, 0, 0, 0, 0, 0, 0, 0, 746, 0,
	0, 725, 0, 0, 726, 0, 752, 740, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 725, 0, 0, 0, 0,
	0, 740, 0, 0, 749, 0, 0, 737, 738, 739,
	0, 736, 733, 734, 735, 727, 728, 729, 730, 732,
	0, 731, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 753, 0,
	0, 0, 0, 0, 0, 731, 0, 0, 0, 0,
	751, 0, 724, 0, 743, 744, 745, 0, 0, 0,
	748, 0, 753, 0, 746, 0, 741, 1231, 0, 0,
	726, 0, 752, 0, 751, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 748, 0, 0, 0, 747, 0,
	741, 725, 1238, 0, 1255, 1256, 1257, 740, 0, 0,
	0, 0, 0, 0, 1366, 0, 0, 0, 0, 0,
	0, 0, 747, 0, 0, 0, 0, 0, 0, 0,
	0, 742, 1236, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 750, 0, 0, 0, 0, 1252, 0, 0,
	0, 731, 0, 0, 0, 742, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 750, 0, 753, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	751, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	748, 1243, 0, 0, 0, 749, 741, 0, 737, 738,
	739, 0, 736, 733, 734, 735, 727, 728, 729, 730,
	732, 0, 0, 0, 0, 0, 0, 0, 747, 749,
	1258, 0, 737, 738, 739, 0, 736, 733, 734, 735,
	727, 728, 729, 730, 732, 0, 1253, 0, 0, 0,
	0, 0, 0, 724, 0, 743, 744, 745, 0, 0,
	0, 742, 0, 0, 0, 746, 0, 0, 0, 0,
	0, 726, 750, 752, 0, 0, 724, 0, 743, 744,
	745, 0, 0, 0, 0, 0, 0, 0, 746, 0,
	0, 0, 725, 0, 726, 0, 752, 0, 740, 0,
	0, 1254, 724, 0, 743, 744, 745, 0, 0, 0,
	0, 0, 0, 0, 0, 725, 0, 0, 0, 0,
	726, 740, 752, 0, 0, 749, 0, 0, 737, 738,
	739, 0, 736, 733, 734, 735, 727, 728, 729, 730,
	732, 725, 731, 0, 0, 0, 0, 740, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 753,
	1238, 0, 1255, 1256, 1257, 731, 0, 0, 1249, 1250,
	1251, 751, 1248, 1245, 1246, 1247, 1239, 1240, 1241, 1242,
	1244, 748, 753, 0, 0, 0, 0, 741, 0, 0,
	0, 731, 0, 0, 751, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 748, 1252, 0, 0, 753, 747,
	741, 0, 1238, 0, 1255, 1256, 1257, 0, 0, 0,
	751, 0, 0, 0, 1365, 0, 0, 0, 0, 0,
	748, 0, 0, 0, 0, 0, 741, 0, 0, 0,
	0, 0, 742, 0, 0, 0, 0, 0, 0, 1243,
	0, 0, 0, 750, 0, 0, 0, 1252, 1238, 0,
	1255, 1256, 1257, 0, 0, 742, 1259, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 750, 0, 1258, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 742, 0, 0, 1253, 0, 0, 0, 0, 0,
	0, 1243, 750, 1252, 0, 0, 749, 0, 0, 737,
	738, 739, 0, 736, 733, 734, 735, 727, 728, 729,
	730, 732, 0, 0, 0, 0, 0, 0, 0, 749,
	1258, 0, 737, 738, 739, 0, 736, 733, 734, 735,
	727, 728, 729, 730, 732, 0, 1253, 1243, 0, 1254,
	0, 0, 0, 0, 724, 749, 0, 0, 737, 738,
	739, 0, 736, 733, 734, 735, 727, 728, 729, 730,
	732, 0, 726, 0, 752, 0, 1258, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1253, 725, 0, 0, 0, 0, 0, 740,
	0, 1254, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1249, 1250, 1251, 0,
	1248, 1245, 1246, 1247, 1239, 1240, 1241, 1242, 1244, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 731, 0, 0, 0, 1254, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	753, 0, 0, 0, 0, 0, 0, 0, 1249, 1250,
	1251, 0, 1248, 1245, 1246, 1247, 1239, 1240, 1241, 1242,
	1244, 0, 748, 0, 0, 0, 0, 0, 741, 0,
	0, 0, 0, 0, 942, 937, 958, 931, 950, 949,
	0, 0, 933, 932, 0, 0, 0, 960, 959, 0,
	0, 0, 0, 0, 1249, 1250, 1251, 0, 1248, 1245,
	1246, 1247, 1239, 1240, 1241, 1242, 1244, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 955, 0, 947, 946,
	0, 0, 0, 742, 0, 0, 945, 0, 0, 0,
	0, 0, 0, 0, 750, 0, 0, 0, 0, 0,
	0, 944, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 938, 939, 940, 0, 593,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 749, 0, 0,
	0, 0, 0, 0, 736, 733, 734, 735, 727, 728,
	729, 730, 732, 948, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 943, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 935, 0, 0,
	0, 0, 0, 0, 0, 941, 936, 0, 0, 0,
	0, 0, 962, 0, 0, 0, 0, 0, 0, 934,
	0, 0, 956, 957, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 961,
}
var sqlPact = [...]int{

	2218, -1000, 37, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 839, -1000, -1000, -1000, 602, 771, 215, 1035, 1035,
	15035, -1000, -1000, 17774, 2109, 443, 444, 443, 443, 449,
	15035, 533, 584, 106, -1000, 610, 83, 17525, 13790, 1236,
	15, 13292, 313, 2218, 13541, 13790, 17276, 1094, 1011, 984,
	13292, 17027, 16778, 16529, -1000, 8955, -1000, -1000, -1000, -1000,
	-1000, 851, -1000, 8, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 844, -1000, 13790, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 16280,
	16031, 731, -1000, -1000, 508, 365, 1245, -1000, 48, -1000,
	-1000, -1000, 1091, -1000, 834, 1089, 1088, 1086, 1080, 362,
	753, -1000, 532, 731, -1000, 731, -1000, -1000, -1000, 506,
	15035, -1000, 13292, -1000, 15782, 1022, 15533, -1000, 610, -1000,
	-1000, -1000, 873, 1227, 1227, 1227, 1266, 166, 162, 106,
	-19, 13790, -1000, 316, -19, 6094, 6094, -1000, -1000, 313,
	-1000, 335, 11539, 55, -1000, 6616, -1000, 687, 1149, 624,
	622, 1140, -121, 13292, 13790, 13790, 560, 15284, -1000, 1137,
	108, 1134, -1000, 105, 1131, -1000, 24, -1000, -1000, -1000,
	-1000, -1000, -1000, 313, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 11798, 784, 11798,
	-1000, -1000, 1300, -1000, -1000, 6, 2, 970, 918, 9476,
	9216, 1189, 739, -1000, -1000, -1000, 43, 4005, 13790, 1102,
	11798, 13790, 13790, 13790, -1000, 13790, -1000, 950, -1000, 13790,
	-1000, -5, -7, -1000, 15035, -1000, 109, -1000, 309, 922,
	14786, 1155, 915, -1000, 873, -1000, 854, 957, 7136, 7916,
	106, -1000, -1000, 106, 106, 7916, -1000, -1000, 13790, -19,
	1298, 13790, 134, -1000, 19561, -1000, -1000, 7916, 7916, 7916,
	7916, 7916, 705, -1000, -1000, -1000, 4526, -1000, -1000, 55,
	307, 323, -1000, -1000, 305, 55, -1000, -1000, -1000, -1000,
	304, 1387, 442, -1000, -1000, -1000, 7916, 370, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1100, 300, 292,
	-1000, -1000, -1000, -1000, 289, 288, 287, 278, 275, 271,
	268, 267, 265, 260, 259, 257, 254, 674, -1000, 386,
	-1000, -1000, 386, 386, -1000, 234, 234, 235, -1000, -1000,
	-1000, 234, -1000, -1000, -1000, 358, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 251, 134, -1000, -1000, -1000, 13790, 55,
	-1000, -1000, -1000, 7916, 3744, 10, -1000, 20253, -1000, -67,
	702, -1000, 12794, 1209, 1208, 1200, 13292, 501, 500, 13790,
	13790, 374, 81, 1285, 81, 11021, -1000, 13790, 13790, -1000,
	13790, -1000, -1000, 13790, -1000, 13790, 13790, 61, 12296, 499,
	-31, 12047, 13790, -1000, 25, -1000, -1000, 1079, 440, 633,
	994, 833, -1000, -1000, -1000, -1000, -21, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1360, -1000, -1000,
	-1000, -1000, 1374, -21, -1000, -1000, -1000, -1000, -1000, 1386,
	-1000, -1000, -1000, -1000, 4005, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 13790, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	633, 994, -1000, -1000, 13292, 12545, 1128, 811, 911, -1000,
	-1000, 348, 1127, -1000, -1000, -1000, -1000, 20253, -1000, 20253,
	589, 1015, -1000, 1015, -27, -1000, 19380, -1000, 246, 3,
	-1000, 374, 6094, 10762, 20673, 13790, 522, 7916, 7916, 7916,
	7916, 7916, 7916, 7916, 7916, 7916, 7916, 7916, 7916, 7916,
	7916, 7916, 7916, 7916, 7916, 7916, 7916, 7916, 7916, 762,
	496, 884, 779, 233, 4005, -1000, 1339, 1339, 1339, 20302,
	20302, 193, 36, 19036, -29, 55, -1000, -1000, 5834, 5572,
	55, 3149, -1000, 543, 1373, 383, 20253, 1109, 1040, 241,
	157, 156, 7916, 709, 7916, 8176, 7916, 7916, 4788, 7916,
	7916, 7916, 7916, 7916, 7916, -1000, 239, -1000, -1000, -1000,
	-1000, 1371, -1000, -1000, 1370, -1000, 521, 513, 1369, 374,
	141, -1000, 160, -1000, -1000, 6616, -1000, 668, 13790, 13790,
	13790, -1000, -1000, 909, 14537, -1000, 20673, 13790, -1000, 238,
	236, 990, 987, 13790, 13790, 14288, 14039, 13790, 686, 13790,
	13790, 617, -1000, 606, 7916, 697, -1000, 10244, 391, 13790,
	609, 133, -1000, -1000, -1000, 347, 13790, -1000, -1000, -1000,
	108, -1000, 105, -1000, -1000, 13790, 12047, -31, -35, -1000,
	-1000, 13790, 994, -1000, -1000, -1000, 618, -1000, 666, -1000,
	9736, -1000, -1000, -1000, 543, -1000, -74, -1000, -1000, -1000,
	-1000, 140, -37, -1000, -1000, -1000, -1000, -1000, 13790, 237,
	13790, 13790, 13790, 1126, 1384, 13790, -1000, -1000, -1000, 7916,
	-1000, -1000, -1000, 83, 13790, -1000, 1039, -1000, -48, 1377,
	-125, 13043, -1000, 9985, -1000, 1302, -1000, -1000, -1000, -1000,
	70, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 235, 674, 234, 234, 234, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 358, -1000, 386, 386,
	386, -1000, -1000, -1000, 361, 554, 554, 1288, 1288, 1288,
	1288, 665, 665, 805, 2395, 20554, 20554, 20554, 2242, 433,
	433, 20554, 20554, 20554, 20302, 20276, 214, 7916, 490, 769,
	233, 7916, -1000, 832, -1000, -1000, -1000, 1076, 231, 8176,
	8176, -1000, -1000, -1000, 4526, -1000, -1000, 229, 7916, -1000,
	7916, -4, -8, -1000, 20253, -1000, -17, -1000, -1000, -26,
	7916, 7916, 7916, 138, -1000, 489, -1000, 485, 481, 471,
	-1000, 228, 132, 548, -1000, 7916, 712, 227, 222, 7916,
	-1000, -1000, 20072, 131, 1069, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 130, 19976, 127, 20360, -1000, 8176, 8176, 8176,
	4526, 221, 123, 19354, -112, 19952, 6876, 6876, 6876, 122,
	19771, 7916, -112, 18266, 2680, 2632, -22, -30, -39, 1368,
	-41, 121, 359, 357, 120, 1039, -1000, -1000, 7916, -1000,
	-1000, -1000, 469, 467, 1121, -1000, 901, -1000, 631, 7916,
	13790, 220, 217, 700, -1000, 1119, 777, 1118, 777, -1000,
	-67, 640, -1000, -1000, 463, -1000, 6094, 20253, -1000, 607,
	1219, -51, -1000, -1000, -1000, 6094, 374, 11021, 6616, -52,
	-1000, -1000, -74, -1000, -74, -1000, -1000, -1000, -1000, -1000,
	-1000, 13790, -1000, 12545, 216, 13790, 213, 198, 195, 13790,
	-1000, 1155, -1000, 114, -1000, -1000, -1000, -1000, -1000, 1036,
	1261, 10762, 992, 982, 10762, 1074, 710, 710, 710, -1000,
	13043, 3470, -1000, -1000, 13790, 194, 10503, 113, 1377, 326,
	325, -1000, 1366, 7916, 214, 7916, 8176, 8176, -1000, 214,
	-1000, -1000, -1000, -1000, 1066, 192, 7916, 20673, 20412, 20112,
	-53, 5310, -98, 19013, 7916, -1000, -1000, 323, -1000, 110,
	6356, -1000, 19651, -6, -6, -1000, 938, 801, 642, 573,
	1365, 1383, 1136, -1000, 7916, 19681, -1000, 11280, 375, 728,
	18990, 20673, -1000, 7916, -1000, 1062, 7916, -1000, 20673, 8176,
	8176, 8176, 8176, 8176, 8176, 8176, 8176, 8176, 8176, 8176,
	8176, 8176, 8176, 8176, 8176, 8176, 8176, 8176, 937, 8176,
	1334, 1334, 1334, -100, 5048, -1000, 1098, 1062, 7916, 7916,
	20673, 104, 103, 102, -1000, 7916, -112, 7916, 7916, 7916,
	-1000, -1000, -1000, 100, -1000, 1364, -1000, -1000, -1000, -1000,
	1036, 19060, 13790, 13790, 13790, 1117, 980, -1000, 18721, -57,
	13790, 13790, -1000, 977, 981, 414, 13790, -1000, 13790, -1000,
	13790, 13790, 13790, 13790, -102, 6094, 219, 83, 13790, -102,
	606, -1000, -1000, 346, -1000, -1000, 8696, 191, 13790, 12545,
	8696, 807, -1000, -1000, 371, 7916, 7916, 1377, 10762, 10762,
	995, 979, 10762, -1000, -1000, -1000, -1000, 232, -1000, 971,
	189, 13790, 13043, 410, 1343, 98, 1272, 214, 2831, 2739,
	7916, 20673, 2777, -58, -1000, 7916, 7916, -1000, -59, -1000,
	7916, -1000, 20253, -1000, 1382, 7916, 97, 93, 91, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 79, -1000, -1000, 20253,
	7916, -1000, -1000, 18023, 7916, 78, -1000, 72, 20253, 1098,
	20253, -1000, 616, 616, 1334, 1334, 1334, 1334, 1531, 1531,
	1539, 1133, 708, 708, 708, 1014, 369, 369, 708, 708,
	708, 1053, 942, 188, 20458, 7916, -65, -1000, -1000, -1000,
	20253, 20253, 71, -1000, -1000, -1000, -112, 2334, 18698, 18674,
	-1000, 68, 371, -1000, -1000, -1000, -1000, 13790, -1000, 13790,
	-1000, 13790, 889, -1000, -1000, 986, 184, 8176, 13790, -1000,
	724, -66, -73, 877, -1000, 869, 7916, -1000, 20673, 777,
	777, -1000, 457, 453, -1000, -102, 1161, 13790, 1195, -1000,
	-1000, -1000, 181, -77, -1000, 163, 1229, 7916, -1000, -1000,
	180, 8696, -81, -1000, -1000, 67, -82, 13790, -1000, 13790,
	20253, -112, -1000, 995, -1000, 177, 7916, 10762, -1000, -1000,
	860, -148, -1000, 345, -1000, 13790, -86, -1000, -1000, 320,
	319, -1000, 7916, 7916, 2777, -87, -1000, 20673, 214, 214,
	-1000, 18651, -1000, 19651, -1000, -1000, -1000, -1000, 20253, 695,
	-1000, 18628, -1000, -1000, -1000, 8176, 1051, 176, 20673, 18359,
	-1000, -1000, 7916, -1000, -1000, -1000, -1000, -1000, 919, -1000,
	-1000, -1000, 7916, 20458, 175, -1000, 174, -1000, -1000, -1000,
	626, -1000, -1000, 20253, 1247, -1000, -1000, 13790, 13790, 494,
	-91, 13790, -1000, -1000, 4264, 724, 8696, 1220, 55, 13790,
	1220, 18336, 3149, -93, -1000, 13790, -1000, 724, 172, -106,
	-1000, 1280, -1000, 13790, 20253, -1000, 538, 971, -1000, 4005,
	-107, -1000, -1000, -1000, 214, 214, -1000, -1000, -1000, 65,
	728, 1238, -1000, 19148, 8176, 20673, -108, -1000, 18312, -1000,
	18289, 939, 13790, 13790, 13790, 402, 13790, -1000, -1000, 559,
	-1000, 374, -1000, -1000, -1000, -1000, -1000, -1000, 1229, -26,
	724, -1000, -1000, 8696, 13790, 170, -116, 512, -1000, -1000,
	-1000, -1000, 647, 7916, 19148, -122, -1000, -1000, -1000, 745,
	685, 62, -131, 82, -1000, 7916, -1000, 11021, -1000, 1220,
	51, -1000, -133, -1000, -1000, -1000, 1380, 38, 7656, 7656,
	-112, -1000, -1000, 781, 763, 595, -1000, -1000, -1000, -1000,
	-1000, 939, 13790, 20253, -109, -1000, -1000, 724, -1000, -1000,
	-1000, -1000, 8436, 819, 565, 19331, -1000, -1000, 1170, -1000,
	407, 978, 978, 745, -139, -1000, -1000, 1305, -1000, -1000,
	-1000, -1000, -1000, -1000, 1326, -1000, -1000, 948, -1000, -1000,
	-1000, 7396, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1600, 1597, 1281, 1595, 1594, 1593, 1592, 1588, 93,
	1587, 115, 122, 1580, 91, 1577, 1576, 1575, 1573, 46,
	1572, 1569, 1564, 1562, 1561, 88, 43, 164, 1973, 155,
	1560, 1550, 1547, 11, 102, 98, 1546, 69, 67, 101,
	100, 717, 60, 1544, 1543, 128, 28, 15, 192, 95,
	136, 138, 117, 1533, 1530, 1529, 44, 1528, 1526, 1524,
	1518, 50, 22, 1515, 25, 1514, 32, 1509, 1505, 103,
	1501, 94, 112, 16, 124, 159, 1495, 70, 10, 72,
	1493, 33, 1492, 38, 77, 133, 1491, 39, 324, 65,
	19, 59, 1489, 1488, 1487, 1486, 84, 79, 53, 1485,
	1484, 73, 1480, 127, 129, 1477, 1476, 123, 1475, 1474,
	1473, 657, 1471, 1470, 620, 5, 51, 71, 7, 111,
	110, 23, 1469, 17, 1467, 1348, 686, 659, 1466, 47,
	36, 78, 45, 54, 21, 1465, 107, 1464, 1463, 1460,
	1458, 1457, 76, 1456, 68, 131, 37, 58, 89, 24,
	18, 26, 82, 105, 135, 104, 1454, 1453, 120, 1451,
	35, 1447, 1446, 754, 113, 1444, 1442, 1440, 654, 593,
	327, 99, 1439, 1438, 251, 223, 1434, 1433, 83, 1432,
	1431, 132, 1430, 204, 30, 1429, 118, 1428, 92, 1427,
	0, 42, 40, 1426, 125, 75, 1425, 1423, 1422, 1419,
	27, 2, 8, 3, 6, 4, 20, 14, 1418, 1417,
	126, 86, 1416, 137, 1415, 1414, 29, 1403, 1402, 12,
	1401, 13, 1399, 9, 1, 1398, 130, 1397, 97, 1396,
	1328, 1395, 134, 1393, 1382, 1324, 81,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 4, 4, 35, 35, 34, 34, 34, 34,
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
	34, 32, 32, 37, 37, 37, 36, 36, 31, 31,
	5, 5, 5, 9, 10, 10, 10, 10, 10, 10,
	74, 74, 73, 73, 76, 76, 11, 11, 12, 12,
	12, 12, 12, 159, 159, 158, 13, 18, 226, 226,
	226, 230, 230, 231, 231, 232, 232, 232, 232, 232,
	232, 232, 228, 228, 21, 21, 21, 21, 111, 111,
	113, 113, 113, 113, 40, 110, 110, 110, 110, 112,
	112, 112, 112, 183, 181, 181, 188, 188, 188, 53,
	53, 53, 53, 53, 54, 54, 54, 180, 180, 180,
	180, 189, 189, 189, 189, 189, 189, 55, 55, 55,
	187, 187, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 182, 182, 227, 227,
	229, 229, 8, 8, 56, 56, 57, 57, 117, 117,
	117, 117, 116, 198, 198, 199, 199, 199, 200, 200,
	200, 200, 200, 200, 200, 196, 196, 197, 194, 194,
	195, 195, 195, 195, 233, 233, 115, 115, 60, 60,
	203, 203, 203, 203, 201, 201, 201, 201, 201, 204,
	202, 205, 205, 205, 205, 205, 145, 145, 145, 24,
	7, 7, 100, 100, 64, 64, 149, 149, 149, 65,
	65, 150, 47, 47, 33, 33, 33, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 101, 101, 102, 102,
	16, 20, 23, 23, 23, 23, 23, 235, 235, 44,
	44, 44, 44, 45, 45, 114, 114, 114, 114, 114,
	39, 6, 6, 38, 38, 14, 14, 14, 14, 14,
	50, 50, 107, 107, 107, 109, 109, 108, 108, 108,
	87, 87, 25, 78, 78, 79, 79, 156, 80, 80,
	19, 19, 28, 28, 26, 26, 26, 26, 26, 26,
	27, 27, 29, 29, 29, 29, 29, 29, 29, 211,
	211, 211, 213, 213, 210, 15, 15, 15, 15, 212,
	212, 234, 234, 88, 88, 88, 59, 58, 58, 62,
	62, 61, 63, 63, 148, 85, 85, 85, 85, 103,
	104, 104, 105, 105, 106, 106, 84, 84, 132, 132,
	30, 30, 69, 69, 70, 70, 123, 123, 124, 124,
	122, 122, 122, 151, 151, 151, 151, 152, 152, 152,
	152, 152, 152, 146, 146, 146, 146, 147, 147, 157,
	157, 91, 91, 91, 91, 89, 89, 90, 90, 153,
	153, 153, 153, 86, 86, 154, 154, 154, 118, 118,
	160, 160, 160, 68, 68, 68, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 162,
	162, 162, 162, 164, 164, 164, 163, 163, 163, 163,
	163, 163, 163, 163, 163, 163, 163, 163, 163, 165,
	165, 172, 172, 173, 173, 174, 175, 166, 166, 167,
	167, 168, 169, 176, 176, 176, 176, 178, 178, 170,
	170, 170, 170, 170, 171, 97, 97, 97, 97, 97,
	97, 97, 97, 97, 97, 97, 97, 97, 97, 98,
	98, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 126, 126, 126, 126, 126, 126,
	126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
	126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
	126, 126, 127, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 206, 206, 206, 206, 206, 206,
	206, 208, 208, 209, 209, 207, 207, 207, 207, 207,
	207, 207, 207, 207, 207, 207, 207, 207, 207, 207,
	207, 207, 207, 207, 207, 207, 207, 207, 207, 207,
	214, 214, 215, 215, 216, 216, 217, 217, 219, 220,
	220, 220, 221, 225, 225, 218, 218, 222, 222, 222,
	223, 223, 224, 224, 224, 224, 224, 136, 136, 136,
	137, 137, 138, 75, 75, 134, 134, 133, 133, 133,
	135, 135, 92, 177, 177, 177, 177, 177, 177, 177,
	93, 93, 99, 94, 94, 95, 95, 95, 95, 95,
	95, 129, 130, 96, 96, 96, 131, 131, 139, 143,
	143, 142, 141, 141, 140, 140, 121, 121, 121, 121,
	120, 119, 81, 81, 236, 236, 144, 144, 82, 82,
	83, 77, 77, 155, 155, 155, 155, 71, 71, 52,
	52, 72, 72, 48, 48, 51, 49, 49, 49, 49,
	66, 66, 67, 67, 46, 46, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 179, 179, 179,
	41, 41, 41, 42, 42, 43, 43, 185, 185, 185,
	186, 186, 186, 186, 184, 184, 184, 184, 184, 190,
	190, 190, 190, 190, 190, 190, 190, 190, 190, 190,
	190, 190, 190, 190, 190, 190, 190, 190, 190, 190,
	190, 190, 190, 190, 190, 190, 190, 190, 190, 190,
	190, 190, 190, 190, 190, 190, 190, 190, 190, 190,
	190, 190, 190, 190, 190, 190, 190, 190, 190, 190,
	190, 190, 190, 190, 190, 190, 190, 190, 190, 190,
	190, 190, 190, 190, 190, 190, 190, 190, 190, 190,
	190, 190, 190, 190, 190, 190, 190, 190, 190, 190,
	190, 190, 190, 190, 190, 190, 190, 190, 190, 190,
	190, 190, 190, 190, 190, 190, 190, 190, 190, 190,
	190, 190, 192, 192, 192, 192, 192, 192, 192, 192,
	192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
	192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
	192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
	192, 192, 192, 192, 192, 192, 192, 192, 192, 191,
	191, 191, 191, 191, 191, 191, 191, 191, 191, 191,
	191, 191, 193, 193, 193, 193, 193, 193, 193, 193,
	193, 193, 193, 193, 193, 193, 193, 193, 193, 193,
	193, 193, 193, 193, 193, 193, 193, 193, 193, 193,
	193, 193, 193, 193, 193, 193, 193, 193, 193, 193,
	193, 193, 193, 193, 193, 193, 193, 193, 193, 193,
	193, 193, 193, 193, 193, 193, 193, 193, 193, 193,
	193, 193, 193, 193, 193, 193, 193, 193, 193, 193,
	193, 193, 193, 193, 193, 193, 193, 193, 193, 193,
	193,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 4, 6, 1, 3, 2, 5, 3, 6,
	4, 6, 6, 6, 4, 8, 2, 3, 3, 6,
	4, 3, 2, 1, 1, 0, 2, 0, 2, 0,
	1, 1, 1, 6, 3, 5, 4, 6, 4, 6,
	1, 3, 1, 2, 2, 3, 2, 5, 1, 1,
	1, 1, 1, 1, 3, 1, 6, 6, 1, 2,
	2, 1, 1, 1, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 2, 3, 6, 3, 2, 1,
	1, 1, 3, 3, 2, 3, 3, 3, 3, 1,
	3, 3, 2, 1, 1, 3, 1, 1, 1, 2,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 1, 1, 1, 1, 1, 0,
	1, 1, 2, 2, 4, 2, 4, 4, 4, 4,
	3, 3, 4, 3, 2, 4, 2, 0, 2, 0,
	2, 0, 6, 9, 1, 0, 1, 3, 1, 1,
	1, 1, 3, 2, 0, 3, 1, 2, 2, 1,
	1, 2, 4, 2, 5, 6, 7, 5, 3, 1,
	4, 5, 5, 10, 1, 1, 4, 0, 3, 0,
	2, 2, 2, 0, 1, 1, 2, 2, 0, 3,
	3, 2, 1, 1, 2, 2, 1, 2, 1, 4,
	10, 13, 1, 0, 1, 3, 3, 3, 5, 1,
	3, 1, 2, 0, 1, 1, 0, 6, 6, 8,
	6, 8, 8, 10, 8, 10, 1, 0, 2, 0,
	2, 2, 3, 3, 2, 2, 2, 1, 0, 1,
	3, 2, 0, 2, 1, 1, 1, 3, 3, 0,
	3, 4, 7, 3, 0, 6, 6, 8, 5, 7,
	1, 3, 1, 4, 2, 8, 5, 4, 3, 0,
	2, 0, 8, 1, 3, 1, 1, 3, 5, 5,
	1, 1, 3, 3, 1, 2, 3, 2, 3, 4,
	1, 1, 8, 8, 1, 2, 4, 4, 4, 2,
	2, 3, 1, 3, 6, 1, 1, 1, 1, 1,
	0, 1, 0, 1, 1, 0, 1, 1, 0, 1,
	0, 3, 1, 3, 2, 2, 2, 1, 1, 2,
	2, 3, 1, 1, 1, 1, 3, 0, 2, 0,
	2, 3, 2, 0, 1, 3, 3, 1, 1, 3,
	2, 4, 0, 4, 2, 1, 4, 3, 4, 5,
	4, 5, 4, 5, 2, 4, 1, 1, 0, 5,
	0, 2, 2, 2, 1, 1, 0, 4, 2, 1,
	2, 2, 4, 1, 3, 1, 2, 3, 2, 0,
	2, 5, 2, 3, 4, 0, 1, 1, 1, 1,
	2, 4, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 5, 0, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 2, 2, 1, 1, 3,
	0, 1, 1, 1, 1, 5, 2, 1, 1, 1,
	1, 4, 1, 2, 2, 1, 1, 1, 0, 1,
	1, 4, 1, 4, 1, 1, 1, 1, 1, 1,
	1, 3, 3, 3, 3, 3, 3, 3, 0, 1,
	4, 1, 3, 3, 5, 2, 2, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	2, 3, 4, 4, 5, 3, 4, 3, 3, 4,
	3, 4, 3, 4, 5, 6, 6, 7, 6, 7,
	6, 7, 3, 4, 1, 3, 2, 2, 2, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 5, 6,
	6, 7, 1, 1, 1, 3, 1, 1, 1, 2,
	2, 2, 1, 1, 3, 5, 6, 8, 6, 6,
	4, 4, 1, 1, 1, 5, 1, 3, 1, 3,
	1, 1, 1, 1, 6, 4, 4, 4, 4, 6,
	5, 5, 5, 4, 8, 6, 6, 4, 4, 4,
	5, 0, 5, 0, 2, 0, 1, 3, 3, 2,
	2, 0, 6, 1, 0, 3, 0, 2, 2, 0,
	1, 4, 2, 2, 2, 2, 2, 4, 3, 5,
	4, 3, 5, 1, 3, 1, 3, 3, 3, 2,
	1, 3, 3, 1, 1, 1, 1, 1, 1, 1,
	4, 3, 2, 3, 0, 3, 3, 2, 2, 1,
	0, 2, 2, 3, 2, 1, 1, 3, 5, 1,
	2, 4, 2, 0, 1, 0, 1, 1, 3, 5,
	2, 2, 1, 2, 1, 0, 1, 1, 1, 3,
	3, 1, 3, 3, 2, 1, 1, 1, 3, 1,
	3, 1, 3, 1, 2, 3, 1, 2, 2, 1,
	1, 3, 3, 0, 1, 2, 1, 1, 1, 1,
	6, 2, 3, 5, 1, 1, 1, 1, 2, 2,
	1, 1, 1, 1, 0, 3, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -9, -10, -11, -13,
	-14, -17, -18, -20, -19, -21, -22, -23, -16, -24,
	-25, 19, -6, -7, -8, -212, 84, 91, 106, 193,
	200, -26, -28, 208, 209, 29, 217, 53, 87, 195,
	190, 237, 59, -211, -29, -27, 283, 258, 264, 203,
	-30, 224, 251, 286, 224, 71, 117, 79, 121, 245,
	244, 71, 117, 224, -12, 283, -19, -14, -25, -9,
	-11, -230, 18, -231, -232, 59, 84, 106, 203, 121,
	79, 244, -230, -45, 200, -41, 4, -190, -192, 16,
	17, 19, 28, 29, 34, 38, 41, 52, 53, 54,
	56, 58, 61, 62, 69, 70, 71, 72, 74, 79,
	83, 84, 86, 91, 96, 97, 100, 102, 107, 112,
	113, 118, 121, 129, 131, 132, 137, 140, 143, 145,
	146, 147, 148, 149, 151, 152, 154, 156, 153, 159,
	161, 162, 168, 171, 174, 175, 178, 181, 182, 183,
	185, 186, 190, 188, 189, 191, 193, 195, 196, 198,
	201, 202, 205, 206, 208, 209, 211, 214, 216, 217,
	220, 218, 223, 225, 226, 233, 237, 238, 239, 240,
	243, 244, 245, 248, 249, 250, 254, 259, 260, 261,
	262, 30, 31, 32, 33, 35, 36, 39, 40, 44,
	45, 46, 48, 73, 75, 76, 90, 92, 98, 108,
	110, 114, 115, 122, 123, 124, 126, 135, 158, 160,
	169, 173, 177, 179, 184, 197, 204, 212, 213, 219,
	221, 228, 229, 230, 234, 235, 251, 252, -111, 140,
	206, 233, -112, -110, -183, 228, 149, -73, -41, 200,
	4, 71, 52, 72, 107, 117, 118, 132, 225, 228,
	233, 18, 59, -235, 233, 233, -235, -235, -44, 233,
	231, -45, -234, 224, 224, -100, 71, 242, -27, -29,
	-28, -61, -62, 241, 125, 89, 167, -26, -28, -211,
	-213, 185, -210, -41, -213, -58, -59, 18, 81, 287,
	-153, -48, 165, -41, -83, 283, -3, -153, 114, -41,
	-51, 114, -48, 104, 127, 127, -154, -153, -41, 114,
	-52, 114, -51, -74, 114, -73, -159, -158, -186, 4,
	-190, -192, -191, 251, 50, 60, 105, 120, 128, 130,
	136, 138, 150, 170, 172, 194, 210, 164, 287, 164,
	-41, -111, 46, -111, -113, -39, -40, 129, 181, 231,
	268, 104, 262, -55, 5, 77, -76, 285, 104, -227,
	164, 104, 104, 104, -182, 104, 262, 129, 181, 224,
	-114, -39, -40, -114, 231, -45, -86, -153, -73, 114,
	117, -41, 114, -61, -62, -85, -103, -104, 139, 163,
	-88, 18, 81, -88, -88, 38, 284, 284, 287, -213,
	-67, 283, -77, -155, -125, 276, -127, 274, 275, 280,
	155, 263, -136, -48, -128, 9, 283, -139, -208, -28,
	90, 24, -137, -138, 197, -41, 7, 8, 5, 6,
	-46, -162, -171, 236, 93, 157, 42, -206, -207, 4,
	-190, -185, -163, -173, -167, -170, 126, 50, 64, 67,
	65, 68, 207, 246, 43, 92, 173, 177, 221, 234,
	235, 114, 158, 115, 48, 108, 135, 83, 31, 33,
	35, 36, 44, 45, 73, 75, 76, 98, 122, 123,
	124, 160, 184, 212, 219, 229, 230, 252, -191, -174,
	-175, -168, -169, -176, -77, -83, 276, -48, 283, -81,
	-121, -120, -119, 281, 285, -82, -144, -125, 77, -35,
	188, -34, 17, 19, 84, 249, 90, 188, 188, 90,
	288, -154, -50, -48, -50, 208, -41, 25, 90, -37,
	287, 41, 191, 90, -37, 287, 90, 284, 287, -226,
	-72, 224, 71, -49, -41, 276, -232, -226, 25, 287,
	287, 137, -54, 143, 154, 112, -181, 77, -188, -180,
	-145, 9, 236, 93, 164, -187, 8, 275, -179, -186,
	5, 7, 274, -181, 77, 62, -189, 5, 4, -171,
	-145, 77, 140, 126, 285, -184, 4, -190, -192, -191,
	-193, 18, 20, 21, 22, 23, 24, 25, 26, 27,
	37, 42, 43, 47, 49, 51, 57, 59, 63, 64,
	65, 66, 67, 68, 77, 78, 80, 81, 82, 85,
	87, 89, 93, 94, 95, 101, 103, 104, 106, 109,
	111, 116, 117, 119, 125, 127, 133, 134, 139, 141,
	142, 155, 157, 163, 164, 165, 166, 167, 176, 180,
	187, 192, 203, 207, 215, 222, 224, 227, 231, 232,
	236, 241, 242, 246, 247, 253, 255, 256, 257, 258,
	-183, -229, 101, -226, -183, -183, -183, -183, 137, -183,
	287, 287, -45, -37, 287, 283, 155, -42, 114, -41,
	-38, 86, 155, -85, -104, -103, -105, -125, 18, -125,
	-127, -27, -27, -27, -63, -148, -125, -210, 25, -66,
	-41, -69, 287, 104, 10, 49, 28, 274, 275, 276,
	277, 99, 278, 271, 272, 273, 270, 266, 267, 268,
	55, 144, 199, 12, 13, 14, 22, 166, 138, 263,
	210, 128, 30, 116, 25, 4, -125, -125, -125, -125,
	-125, 172, -28, -125, -75, -81, -28, -133, 281, 283,
	-81, 283, 5, 5, 283, -140, -125, -214, 259, 101,
	283, 283, 283, 283, 283, 283, 283, 283, 283, 283,
	283, 283, 283, 283, 283, 179, -178, 254, -178, -178,
	-164, 283, -164, -165, 283, -164, 260, 264, 283, -69,
	-48, -121, -125, -184, 276, 287, 284, 287, 231, -101,
	57, 51, -116, 114, 51, -194, -41, 57, -195, 47,
	242, 180, 103, -101, 57, -101, 57, 57, -153, 231,
	231, -51, -41, -118, 256, -107, -19, 283, 77, 25,
	-107, -78, -79, -156, -80, -48, 283, -41, -41, -51,
	-52, -73, -74, -12, -158, 231, 287, -72, -66, -120,
	-119, 104, 233, -40, -39, -53, 183, 214, 189, 205,
	287, 8, 7, 7, 5, -184, -228, -41, -40, -39,
	-153, -56, -57, -117, -116, -196, -197, -194, 117, 242,
	94, 90, 164, 155, 268, 90, -106, 197, 198, 287,
	-33, 26, 80, 283, 287, 284, -118, -155, -70, -151,
	-153, -28, -152, 283, -160, -161, -163, -172, -166, -170,
	-171, 34, 40, 39, 226, 204, 213, 32, 122, 123,
	124, 212, 31, 184, 98, 83, 76, 75, 160, 36,
	35, -174, -175, -168, -169, 73, 229, 230, 33, 45,
	44, 252, 219, -73, 228, -125, -125, -125, -125, -125,
	-125, -125, -125, -125, -125, -125, -125, -125, -125, -125,
	-125, -125, -125, -125, -125, -125, -125, 138, 210, 30,
	116, 231, 157, 155, 236, 93, 243, 81, 161, -236,
	222, 27, -131, -28, 283, -184, -136, 197, 283, 284,
	287, -75, -135, 282, -125, -133, -75, 284, 284, -75,
	253, 18, 81, 276, -97, 261, 147, 74, 113, 146,
	-98, 202, 7, -143, -142, 255, -215, 96, 109, 283,
	284, 284, -125, -92, -177, 4, 261, 147, 74, 113,
	146, 202, -93, -125, -94, -126, -127, 274, 275, 280,
	283, 197, -95, -125, -75, -125, 37, 134, 232, -96,
	-125, 104, -75, -125, -125, -125, -75, -75, -75, 283,
	7, 7, 228, 228, 7, -118, 284, 282, 291, -144,
	-34, -48, -41, -41, 155, -116, 114, -160, -41, 283,
	283, 131, 131, -41, -41, 114, -41, 114, -41, -41,
	-35, 188, -41, -41, 188, -87, 192, -125, -87, -109,
	164, -71, -48, 251, -41, 192, -69, 287, 268, -71,
	-37, -37, -228, -49, -228, -39, 240, 54, 183, -188,
	-97, 287, 284, 287, -42, 117, -42, -73, -48, 90,
	5, -41, -148, -15, -19, -14, -25, -9, -41, -84,
	109, 287, 60, -91, 130, 150, 105, 136, 194, 120,
	-122, 288, -147, -146, 25, -41, -28, -152, -151, -68,
	24, -97, 283, 262, -125, 231, -236, 222, -131, -125,
	157, 236, 93, 243, 81, 161, 104, 283, -126, -126,
	-75, 283, -75, -125, 287, 282, 282, 287, 284, -62,
	287, -61, -125, -75, -75, 284, 231, 231, 231, 231,
	283, 284, -141, -142, 85, -125, -220, 171, 283, 283,
	-125, 25, 284, 104, 284, -99, 176, 284, 10, 274,
	275, 276, 277, 99, 278, 271, 272, 273, 270, 266,
	267, 268, 55, 144, 199, 12, 13, 14, 128, 116,
	-126, -126, -126, -75, 283, 284, -129, -130, 104, 101,
	25, -96, -96, -96, 284, 104, -75, 287, 287, 287,
	284, 284, 284, 7, 284, 287, 284, 262, 262, 284,
	-84, -125, 231, 231, 90, 155, -198, -195, -125, -66,
	283, 283, -32, 84, 208, -102, 90, -37, 90, -37,
	231, -101, 57, 231, -77, 192, 56, 284, 287, -77,
	-118, -79, -144, 284, -41, -117, 283, -42, 283, 283,
	283, -41, -38, 284, -132, 111, 38, -151, 130, 130,
	-151, -91, 130, -89, 170, -89, -89, -147, -184, 289,
	-41, 283, 284, 281, 281, 7, -125, -125, -126, -126,
	104, 283, -125, -134, -160, 22, 22, 284, -75, 284,
	287, 284, -125, -133, 284, 253, -62, -62, -62, 147,
	113, 146, -98, 146, -98, -98, 7, 5, 87, -125,
	227, -221, -41, 283, 256, -61, 284, -160, -125, -129,
	-125, -160, -126, -126, -126, -126, -126, -126, -126, -126,
	-126, -126, -126, -126, -126, -126, -126, -126, -126, -126,
	-126, 81, 155, 161, -126, 287, -75, 284, -130, -129,
	-125, -125, -160, 284, 284, 284, -75, -125, -125, -125,
	284, 7, -132, 282, -41, -41, -116, 90, -199, 57,
	-200, 49, 155, 157, 242, 180, 47, 77, 187, 284,
	284, -66, -66, 155, 77, 155, 77, 70, 238, -41,
	-41, -48, -41, -41, -41, -77, -108, 283, 164, -19,
	-48, -87, 268, -64, -149, -41, -209, 283, -206, -207,
	-46, 283, -65, -150, -41, -56, -64, 164, -216, 257,
	-125, -75, -151, -151, -90, 247, 164, 130, -151, -157,
	265, -124, -123, 102, 153, 283, -66, -146, 282, 7,
	7, 284, 22, 22, -125, -134, 284, 287, -125, -125,
	284, -125, 5, -125, 284, 284, 284, 284, -125, -225,
	-41, -125, 284, 284, -130, 104, 81, 161, 283, -125,
	284, 284, 287, 284, 284, 284, -216, -116, -41, -73,
	157, 131, 283, -126, -48, -115, -233, 58, 220, 284,
	284, 157, 157, -125, -160, -37, -37, 231, 231, 82,
	-66, 57, -83, -28, 283, 284, 287, -47, -81, 49,
	-47, -125, 283, -64, 284, 287, 284, 284, -48, -217,
	-219, -41, -90, 283, -125, -151, 161, 287, 290, 268,
	-66, 284, 282, 282, -125, -125, 284, -160, 284, -62,
	-218, 175, 284, -126, 104, 283, -134, 284, -125, -200,
	-125, -43, 283, 283, 187, -36, 49, -41, -41, 244,
	156, 284, -41, -115, -149, -33, -73, -33, 284, -75,
	284, -150, -115, 283, 287, 25, -66, 223, -123, -184,
	284, 284, -62, 38, -126, -134, 284, 284, 284, -203,
	145, -41, -66, -48, -31, 247, -73, 208, -118, -47,
	-62, -115, -64, -219, -221, 284, 228, -222, 182, 198,
	-75, 284, -201, -204, -202, 164, 105, 174, 211, 284,
	284, -60, 283, -125, -78, -33, 284, 284, 5, 284,
	-223, -224, 30, 239, 62, -125, -223, -202, 164, -204,
	164, 244, 79, -203, -66, -118, -115, -224, 178, 100,
	197, 178, 100, -205, 152, 191, 41, 208, -205, -201,
	284, 22, 16, 157, 77, -224,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 0, 50, 51, 52, 0, 0, 330, 0, 0,
	0, 300, -2, 0, 0, 258, 0, 258, 258, 262,
	0, 332, 223, 329, -2, 340, 0, 0, 0, 338,
	314, 0, 0, -2, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 66, 0, 68, 69, 70, 71,
	72, 0, 81, 82, 83, 85, 86, 87, 88, 89,
	90, 91, 0, 251, 840, 264, 750, 751, 752, 769,
	770, 771, 772, 773, 774, 775, 776, 777, 778, 779,
	780, 781, 782, 783, 784, 785, 786, 787, 788, 789,
	790, 791, 792, 793, 794, 795, 796, 797, 798, 799,
	800, 801, 802, 803, 804, 805, 806, 807, 808, 809,
	810, 811, 812, 813, 814, 815, 816, 817, 818, 819,
	820, 821, 822, 823, 824, 825, 826, 827, 828, 829,
	830, 831, 832, 833, 834, 835, 836, 837, 838, 839,
	841, 842, 843, 844, 845, 846, 847, 848, 849, 850,
	851, 852, 853, 854, 855, 856, 857, 858, 859, 860,
	861, 862, 863, 864, 865, 866, 867, 868, 869, 870,
	871, 872, 873, 874, 875, 876, 877, 878, 879, 880,
	881, 882, 883, 884, 885, 886, 887, 888, 889, 890,
	891, 892, 893, 894, 895, 896, 897, 898, 899, 900,
	901, 902, 903, 904, 905, 906, 907, 908, 909, 910,
	911, 912, 913, 914, 915, 916, 917, 918, 94, 807,
	844, 856, 99, 109, 0, 912, -2, 113, 62, 840,
	142, 143, 0, 145, 159, 0, 0, 0, 157, 0,
	0, 154, 0, 269, 257, 269, 254, 255, 256, 259,
	0, 250, 0, 331, 0, 0, 0, 222, -2, 310,
	311, -2, 0, 335, 335, 335, 0, 0, 311, 0,
	319, 830, 322, 733, 320, 0, 0, 337, 336, 0,
	315, 399, 0, 723, 360, 0, 2, 0, 892, 0,
	0, 892, 0, 0, 0, 0, 0, 405, 54, 892,
	45, 892, 719, 45, 892, 60, 0, 73, 75, 760,
	761, 762, 763, 917, 919, 920, 921, 922, 923, 924,
	925, 926, 927, 928, 929, 930, 931, 0, 0, 0,
	263, 95, 882, 97, 98, 100, 101, 0, 0, 0,
	0, 0, 0, 112, 137, 138, 63, 0, 0, 161,
	0, 0, 0, 0, 150, 0, 151, 0, 153, 0,
	252, 265, 266, 253, 0, 261, 45, 403, 0, 892,
	754, 274, 892, -2, 0, 306, 347, 348, 0, 0,
	0, 333, 334, 0, 0, 0, 302, 303, 0, 321,
	0, 0, 363, 711, 715, 716, 491, 0, 0, 0,
	0, 0, 0, 572, 573, 574, 0, 576, 577, 578,
	887, 0, 582, 583, 906, 723, 736, 737, 738, 739,
	0, 0, 0, 744, 745, 746, 695, 621, 592, -2,
	-2, 734, 429, 430, 431, 432, -2, 919, 596, 598,
	600, 601, 602, 603, 0, 888, 902, 903, 911, 915,
	916, 892, 899, 893, 883, 890, 898, 790, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, 759, 453,
	454, 459, 460, 462, 363, 361, 400, 401, 0, 724,
	702, 696, 697, 0, 0, 0, 708, 706, 707, 22,
	247, 24, 0, 247, 247, 0, 0, 0, 0, 0,
	0, 409, 0, 280, 0, 0, 406, 0, 0, 56,
	0, 43, 44, 0, 58, 0, 0, 330, 0, 0,
	78, 0, 786, 721, 726, 729, 84, 0, 0, 0,
	0, 0, 104, 124, 125, 126, 105, 107, 114, 116,
	117, 118, 127, 128, 129, 130, 216, 0, 218, 140,
	141, 747, 0, 106, 108, 110, 111, 131, 132, 0,
	134, 135, 136, 474, 0, 64, 764, 765, 766, 767,
	768, 932, 933, 934, 935, 936, 937, 938, 939, 940,
	941, 942, 943, 944, 945, 946, 947, 948, 949, 950,
	951, 952, 953, 954, 955, 956, 957, 958, 959, 960,
	961, 962, 963, 964, 965, 966, 967, 968, 969, 970,
	971, 972, 973, 974, 975, 976, 977, 978, 979, 980,
	981, 982, 983, 984, 985, 986, 987, 988, 989, 990,
	991, 992, 993, 994, 995, 996, 997, 998, 999, 1000,
	1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010,
	144, 146, 0, 158, 147, 148, 149, 156, 152, 155,
	0, 0, 260, 219, 0, 165, 0, 0, 892, 753,
	271, 0, 0, 309, 345, 346, 349, 352, 353, 350,
	491, 316, 317, 318, 341, 342, 236, 323, 0, 0,
	730, 409, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 705, 0, 0, 714, 495, 496, 497, 519,
	520, 0, -2, 653, 0, 579, 580, 581, 0, 0,
	-2, 0, 741, 488, 0, 0, 694, 623, 0, 0,
	0, 0, 0, 0, 0, 674, 680, 0, 0, 0,
	0, 0, 0, 0, 0, 443, 456, 467, 464, 463,
	445, 0, 444, 442, 0, 446, 0, 0, 0, 409,
	0, 703, 0, 700, 701, 0, 710, 0, 0, 0,
	0, 246, 26, 892, 0, 36, 0, 0, 189, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 725, 291, 0, 291, 282, 0, 0, 0,
	278, 363, 293, 295, 296, 0, 0, 407, 55, 720,
	45, 61, 45, 67, 74, 0, 0, 79, 80, 727,
	728, 0, 0, 102, 103, 270, 0, 121, 0, 123,
	0, 217, 749, 748, 488, 65, 160, 92, 267, 268,
	404, 0, 164, 166, 168, 169, 170, 171, 754, 0,
	754, 0, 0, 0, 0, 0, 351, 354, 355, 0,
	344, 234, 235, 330, 0, 732, 357, 712, 362, 364,
	372, 388, 375, 0, 492, 415, 416, 417, 418, 419,
	488, 422, 423, 424, 425, 426, 427, 428, 436, 437,
	438, 439, 440, 441, 450, 0, 435, 435, 435, 447,
	448, 451, 452, 457, 458, 469, 470, 472, 468, 468,
	468, 465, 466, 493, 0, 498, 499, 500, 501, 502,
	503, 504, 505, 506, 507, -2, -2, -2, 511, 512,
	513, -2, -2, -2, 517, 518, -2, 0, 0, 705,
	0, 0, 525, 0, 528, 530, 532, 0, 0, 0,
	0, 704, 542, 686, 0, 713, 527, 0, 0, 575,
	0, 0, 0, 659, 653, 660, 0, -2, 584, 340,
	0, 0, 0, 0, 742, 475, 476, 477, 478, 479,
	480, 489, 0, 693, 689, 0, 631, 0, 0, 0,
	597, 599, 0, 0, 0, 663, 664, 665, 666, 667,
	668, 669, 0, 0, 0, 0, 544, 0, 0, 0,
	0, 906, 0, 653, 679, 0, 0, 0, 0, 0,
	653, 0, 685, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 357, 402, 698, 0, 709,
	25, 238, 0, 0, 0, 28, 892, 174, 0, 0,
	0, 0, 0, 249, 37, 892, 45, 892, 45, 38,
	23, 247, 237, 240, 0, 53, 0, 408, 275, 276,
	0, 0, 717, 284, 281, 0, 409, 0, 0, 0,
	57, 59, 76, 722, 77, 96, 119, 120, 122, 115,
	133, 0, 162, 0, 0, 754, 0, 0, 0, 0,
	273, 274, 343, 0, 325, 326, 327, 328, 731, 359,
	0, 0, 0, 0, 0, 0, 396, 396, 396, 394,
	388, 0, 374, 387, 0, 386, -2, 375, 0, 410,
	412, 420, 0, 0, -2, 0, 0, 0, 543, -2,
	526, 529, 531, 533, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 654, 0, 657, 658, 0, -2, 0,
	0, 339, 340, 340, 340, 590, 0, 0, 0, 0,
	0, 0, 0, 690, 0, 0, 591, 0, 0, 0,
	0, 0, 605, 0, 606, 0, 0, 607, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	546, 547, 548, 0, 0, 608, 677, 678, 0, 0,
	0, 0, 0, 0, 613, 0, 684, 0, 0, 0,
	617, 618, 619, 0, 433, 0, 449, 471, 473, 461,
	359, 0, 0, 0, 0, 0, 172, 188, 0, 0,
	0, 0, 30, 0, 0, 0, 0, 34, 0, 40,
	0, 0, 0, 0, 290, 0, 289, 0, 0, 279,
	291, 294, 297, 0, 93, 167, 0, 0, 0, 165,
	0, 0, 272, 324, 625, 0, 0, 365, 0, 0,
	0, 0, 0, 391, 395, 392, 393, 390, 370, 0,
	384, 0, 377, 0, 0, 0, 494, -2, 0, 0,
	0, 0, -2, 0, 655, 0, 0, 687, 0, 648,
	0, -2, 654, 661, 585, 0, 0, 0, 0, 481,
	482, 483, 484, 485, 486, 487, 0, 743, 688, 692,
	0, 629, 630, 634, 0, 0, 595, 0, 662, 671,
	672, 545, 549, 550, 551, 552, 553, 554, 555, 556,
	557, 558, -2, -2, -2, 562, 563, 564, -2, -2,
	-2, 0, 0, 0, 673, 0, 0, 651, 675, 676,
	681, 682, 0, 610, 611, 612, 683, 0, 0, 0,
	455, 0, 625, 699, 242, 244, 27, 0, 173, 0,
	176, 0, 0, 179, 180, 0, 0, 0, 0, 190,
	197, 0, 0, 0, 42, 0, 0, 248, 0, 45,
	45, 239, 0, 0, 241, 277, 0, 0, 0, 283,
	718, 292, 0, 0, 224, 233, 233, 0, 593, 594,
	0, 0, 0, 229, 231, 0, 0, 0, 312, 0,
	358, 356, 378, 0, 380, 0, 0, 0, 382, 373,
	0, 0, 368, 0, 367, 0, 0, 376, 413, 0,
	0, 421, 0, 0, -2, 0, 536, 0, -2, -2,
	647, 654, 740, 340, 586, 588, 589, 490, 691, 636,
	633, 0, 620, 604, 670, 0, 0, 0, 0, 654,
	650, 609, 0, 615, 616, 434, 313, 29, 0, 177,
	178, 181, 0, 183, 756, 191, 0, 194, 195, 192,
	0, 31, 32, 41, 47, 33, 39, 0, 0, 0,
	0, 0, 298, 299, 0, 197, 0, 236, 735, 0,
	236, 0, 0, 0, 187, 0, 163, 197, 0, 624,
	626, 0, 379, 0, 398, 381, 0, 0, 371, 0,
	0, 385, 414, 411, -2, -2, 537, 656, 649, 0,
	340, 0, 622, -2, 0, 0, 0, 652, 0, 175,
	0, 203, 0, 0, 0, 49, 0, 243, 245, 0,
	286, 409, 288, 185, 225, 226, 232, 227, 233, 340,
	197, 230, 220, 0, 0, 0, 0, 0, 369, 366,
	383, 587, 639, 0, -2, 0, 570, 614, 182, 208,
	0, 0, 0, 199, 35, 0, 46, 0, 287, 236,
	0, 186, 0, 627, 628, 397, 0, 0, 0, 0,
	635, 571, 184, 204, 205, 0, 200, 201, 202, 755,
	196, 203, 0, 48, 409, 228, 585, 197, 389, 632,
	637, 640, -2, 859, 783, 0, 638, 206, 0, 207,
	0, 0, 0, 208, 0, 285, 221, 0, 642, 643,
	644, 645, 646, 209, 0, 212, 213, 0, 210, 193,
	198, 0, 211, 214, 215, 641,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 272, 3, 278, 273, 3,
	283, 284, 276, 274, 287, 275, 285, 277, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 291, 286,
	266, 268, 267, 3, 288, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 281, 3, 282, 271, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 289, 270, 290, 280,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 269, 57609, 279,
	0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:686
		{
			sqllex.(*scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:692
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:698
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 14:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:718
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 21:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:728
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 22:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:734
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.qname(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 23:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:738
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.qname(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 24:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:744
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 25:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:748
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:755
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 27:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:760
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 28:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:765
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 29:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:770
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 30:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:775
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: sqlDollar[3].str, Default: sqlDollar[4].union.expr()}
		}
	case 31:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:780
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: sqlDollar[3].str}
		}
	case 32:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:784
		{
			unimplemented()
		}
	case 33:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:787
		{
			sqlVAL.union.val = &AlterTableDropColumn{columnKeyword: sqlDollar[2].union.bool(), IfExists: true, Column: sqlDollar[5].str}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:792
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        sqlDollar[3].str,
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:802
		{
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:805
		{
			sqlVAL.union.val = &AlterTableAddConstraint{ConstraintDef: sqlDollar[2].union.constraintDef()}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:809
		{
			unimplemented()
		}
	case 38:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:811
		{
			unimplemented()
		}
	case 39:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:814
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   sqlDollar[5].str,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:823
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   sqlDollar[3].str,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 41:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:833
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:837
		{
			sqlVAL.union.val = nil
		}
	case 43:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:843
		{
			sqlVAL.union.val = DropCascade
		}
	case 44:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:847
		{
			sqlVAL.union.val = DropRestrict
		}
	case 45:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:851
		{
			sqlVAL.union.val = DropDefault
		}
	case 46:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:856
		{
			unimplementedWithIssue(2473)
		}
	case 47:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:857
		{
		}
	case 48:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:860
		{
			unimplemented()
		}
	case 49:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:861
		{
		}
	case 53:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:872
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retExprs()}
		}
	case 54:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:879
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 55:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:883
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 56:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:887
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 57:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:895
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 58:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:903
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.qnames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:907
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.qnames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:913
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:917
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 62:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:923
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:927
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:933
		{
			sqlVAL.union.val = Indirection{NameIndirection(sqlDollar[2].str)}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:937
		{
			sqlVAL.union.val = append(sqlDollar[1].union.indirect(), NameIndirection(sqlDollar[3].str))
		}
	case 66:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:944
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:948
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:954
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 72:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:960
		{ /* SKIP DOC */
		}
	case 73:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:964
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 74:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:968
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 76:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:978
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: NameList(sqlDollar[6].union.strs()), Targets: sqlDollar[4].union.targetList()}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:985
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: NameList(sqlDollar[6].union.strs()), Targets: sqlDollar[4].union.targetList()}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:992
		{
			sqlVAL.union.val = TargetList{Tables: QualifiedNames(sqlDollar[1].union.qnames())}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:996
		{
			sqlVAL.union.val = TargetList{Tables: QualifiedNames(sqlDollar[2].union.qnames())}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1000
		{
			sqlVAL.union.val = TargetList{Databases: NameList(sqlDollar[2].union.strs())}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1007
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1010
		{
		}
	case 83:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1014
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1018
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 85:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1025
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 86:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1029
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 87:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1033
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 88:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1037
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 89:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1041
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 90:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1045
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 91:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1049
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 92:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1057
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1061
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 94:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1069
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 95:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1073
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 96:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1077
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1081
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 98:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1087
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 100:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1094
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1098
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1102
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1106
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1113
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1119
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname(), Values: sqlDollar[3].union.exprs()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1123
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname(), Values: sqlDollar[3].union.exprs()}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1127
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname()}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1131
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1138
		{
			unimplemented()
		}
	case 111:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1141
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1144
		{
			unimplemented()
		}
	case 114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1151
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1155
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1163
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1169
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1173
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1177
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 122:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1181
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1185
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1191
		{
			sqlVAL.union.val = Low
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1195
		{
			sqlVAL.union.val = Normal
		}
	case 126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1199
		{
			sqlVAL.union.val = High
		}
	case 127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1205
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1209
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 129:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1213
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1228
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1232
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1236
		{
			d, err := ParseDInterval(sqlDollar[2].str)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1246
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1250
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1255
		{
			unimplemented()
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1256
		{
			unimplemented()
		}
	case 139:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1257
		{
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1261
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1265
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1271
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1275
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1279
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.qname()}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1283
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1287
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.strs()}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1291
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1295
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1299
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1303
		{
			sqlVAL.union.val = &ShowTables{Name: sqlDollar[3].union.qname()}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1307
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1311
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1315
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1319
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 155:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1323
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.qname()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1329
		{
			sqlVAL.union.val = sqlDollar[2].union.qname()
		}
	case 157:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1333
		{
			sqlVAL.union.val = (*QualifiedName)(nil)
		}
	case 158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1339
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 159:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1344
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1350
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 161:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1354
		{
			sqlVAL.union.val = []string(nil)
		}
	case 162:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1361
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.qname(), IfNotExists: false, Defs: sqlDollar[5].union.tblDefs()}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1365
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.qname(), IfNotExists: true, Defs: sqlDollar[8].union.tblDefs()}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1372
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1378
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1382
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1388
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1392
		{ /* unimplemented */
		}
	case 171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1394
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1400
		{
			sqlVAL.union.val = newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1406
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 174:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1410
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1416
		{
			sqlVAL.union.val = NamedColumnQualification{Name: sqlDollar[2].str, Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1420
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1423
		{
			unimplemented()
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1439
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1443
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1447
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1451
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1455
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1459
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1463
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.qname(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1472
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.idxElems(),
				Storing: sqlDollar[6].union.strs(),
			}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1480
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:    Name(sqlDollar[3].str),
					Columns: sqlDollar[5].union.idxElems(),
					Storing: sqlDollar[7].union.strs(),
				},
			}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1492
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.famElems(),
			}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1504
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1509
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 190:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1515
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1521
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[3].union.strs()),
					Storing: sqlDollar[5].union.strs(),
				},
			}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1530
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[4].union.strs()),
				},
				PrimaryKey: true,
			}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1539
		{
			unimplemented()
		}
	case 196:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1556
		{
			sqlVAL.union.val = sqlDollar[3].union.strs()
		}
	case 197:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1560
		{
			sqlVAL.union.val = []string(nil)
		}
	case 198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1566
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 199:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1570
		{
			sqlVAL.union.val = []string(nil)
		}
	case 200:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1575
		{
			unimplemented()
		}
	case 201:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1576
		{
			unimplemented()
		}
	case 202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1577
		{
			unimplemented()
		}
	case 203:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1578
		{
		}
	case 204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1585
		{
			unimplemented()
		}
	case 205:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1586
		{
			unimplemented()
		}
	case 206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1587
		{
			unimplemented()
		}
	case 207:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1588
		{
			unimplemented()
		}
	case 208:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1589
		{
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1592
		{
			unimplemented()
		}
	case 210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1595
		{
			unimplemented()
		}
	case 211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1598
		{
			unimplemented()
		}
	case 212:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1599
		{
			unimplemented()
		}
	case 213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1600
		{
			unimplemented()
		}
	case 214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1601
		{
			unimplemented()
		}
	case 215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1602
		{
			unimplemented()
		}
	case 216:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1606
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1610
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1614
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 219:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1621
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.qnames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1628
		{
			sqlVAL.union.val = &CreateIndex{
				Name:    Name(sqlDollar[4].str),
				Table:   sqlDollar[6].union.qname(),
				Unique:  sqlDollar[2].union.bool(),
				Columns: sqlDollar[8].union.idxElems(),
				Storing: sqlDollar[10].union.strs(),
			}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql.y:1638
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.qname(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.strs(),
			}
		}
	case 222:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1651
		{
			sqlVAL.union.val = true
		}
	case 223:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1655
		{
			sqlVAL.union.val = false
		}
	case 224:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1661
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1665
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1674
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1677
		{
			unimplemented()
		}
	case 228:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1678
		{
			unimplemented()
		}
	case 229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1682
		{
			sqlVAL.union.val = FamilyElemList{sqlDollar[1].union.famElem()}
		}
	case 230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1686
		{
			sqlVAL.union.val = append(sqlDollar[1].union.famElems(), sqlDollar[3].union.famElem())
		}
	case 231:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1692
		{
			sqlVAL.union.val = FamilyElem{Column: Name(sqlDollar[1].str)}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1697
		{
			unimplemented()
		}
	case 233:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1698
		{
		}
	case 234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1702
		{
			sqlVAL.union.val = Ascending
		}
	case 235:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1706
		{
			sqlVAL.union.val = Descending
		}
	case 236:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1710
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 237:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1717
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1721
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.qname(), NewName: sqlDollar[6].union.qname(), IfExists: false}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1725
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.qname(), NewName: sqlDollar[8].union.qname(), IfExists: true}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1729
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 241:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1733
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 242:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1737
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.qname(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1741
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.qname(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 244:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1745
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 245:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1749
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 246:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1755
		{
			sqlVAL.union.val = true
		}
	case 247:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1759
		{
			sqlVAL.union.val = false
		}
	case 248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1764
		{
		}
	case 249:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1765
		{
		}
	case 250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1769
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1775
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1782
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1786
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1790
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1794
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1798
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1807
		{
		}
	case 258:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1808
		{
		}
	case 259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1812
		{
			sqlVAL.str = ""
		}
	case 260:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1816
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1820
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 262:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1824
		{
			sqlVAL.str = ""
		}
	case 263:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1830
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 264:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1834
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 265:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1840
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1844
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1848
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1852
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1856
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1862
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 271:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1868
		{
			sqlVAL.union.val = &CreateDatabase{Name: Name(sqlDollar[3].str), Encoding: sqlDollar[4].union.strVal()}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1872
		{
			sqlVAL.union.val = &CreateDatabase{IfNotExists: true, Name: Name(sqlDollar[6].str), Encoding: sqlDollar[7].union.strVal()}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1878
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1881
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 275:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1891
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retExprs()
		}
	case 276:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1897
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
		}
	case 277:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1902
		{
			unimplementedWithIssue(6637)
		}
	case 278:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1904
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1909
		{
			unimplementedWithIssue(6637)
		}
	case 280:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1917
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname()}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1921
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1927
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1931
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.qnames(), Rows: sqlDollar[4].union.slct()}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1935
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1941
		{
			sqlVAL.union.val = &OnConflict{Columns: NameList(sqlDollar[3].union.strs()), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1945
		{
			sqlVAL.union.val = &OnConflict{Columns: NameList(sqlDollar[3].union.strs()), DoNothing: true}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1951
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 288:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1955
		{
			unimplemented()
		}
	case 289:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1957
		{
			sqlVAL.union.val = []string(nil)
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1963
		{
			sqlVAL.union.val = sqlDollar[2].union.selExprs()
		}
	case 291:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1967
		{
			sqlVAL.union.val = SelectExprs(nil)
		}
	case 292:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1974
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retExprs()}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1980
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1984
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1994
		{
			sqlVAL.union.val = &UpdateExpr{Names: QualifiedNames{sqlDollar[1].union.qname()}, Expr: sqlDollar[3].union.expr()}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2006
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.qnames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2010
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.qnames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2054
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2060
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2064
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2079
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2083
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2087
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2091
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2095
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2099
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2133
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.tblExprs(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2145
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.tblExprs(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2157
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        TableExprs{&AliasedTableExpr{Expr: sqlDollar[2].union.qname()}},
				tableSelect: true,
			}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2165
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2174
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2183
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2201
		{
			unimplemented()
		}
	case 320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2202
		{
			unimplemented()
		}
	case 321:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2203
		{
			unimplemented()
		}
	case 322:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2206
		{
			unimplemented()
		}
	case 323:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2207
		{
			unimplemented()
		}
	case 324:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2210
		{
			unimplemented()
		}
	case 325:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2214
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 329:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2222
		{
			unimplemented()
		}
	case 330:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2223
		{
		}
	case 331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2226
		{
		}
	case 332:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2227
		{
		}
	case 333:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2231
		{
			sqlVAL.union.val = true
		}
	case 334:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2235
		{
			sqlVAL.union.val = false
		}
	case 335:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2239
		{
			sqlVAL.union.val = false
		}
	case 336:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2245
		{
			sqlVAL.union.val = true
		}
	case 337:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2250
		{
		}
	case 338:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2251
		{
		}
	case 339:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2255
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 340:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2259
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 341:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2265
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 342:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2271
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2275
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 344:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2281
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2289
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2298
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2309
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2322
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2329
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2336
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 354:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2350
		{
		}
	case 355:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2351
		{
		}
	case 356:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2377
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 357:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2381
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2387
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 359:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2391
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 360:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2397
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 361:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2401
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2413
		{
			sqlVAL.union.val = sqlDollar[2].union.tblExprs()
		}
	case 363:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2417
		{
			sqlVAL.union.val = TableExprs(nil)
		}
	case 364:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2423
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2427
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 366:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2433
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 367:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2438
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2444
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2449
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			index := a.Index
			if index == "" {
				index = b.Index
			} else if b.Index != "" {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			noIndexJoin := a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = &IndexHints{Index: index, NoIndexJoin: noIndexJoin}
		}
	case 370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2469
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2473
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 372:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2477
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 373:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2484
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), Hints: sqlDollar[2].union.indexHints(), As: sqlDollar[3].union.aliasClause(), AsOf: sqlDollar[4].union.asOfClause()}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2488
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, As: sqlDollar[2].union.aliasClause()}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2491
		{ /* SKIP DOC */
		}
	case 376:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2492
		{
			unimplemented()
		}
	case 377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2510
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 378:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2514
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2518
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2522
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2526
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astNaturalJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr()}
		}
	case 382:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2530
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astNaturalJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2536
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: NameList(sqlDollar[4].union.strs())}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2540
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2544
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: NameList(sqlDollar[3].union.strs())}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2548
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2555
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2561
		{
			sqlVAL.union.val = AsOfClause{Expr: &StrVal{s: sqlDollar[5].str}}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2565
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2571
		{
			sqlVAL.str = astFullJoin
		}
	case 392:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2575
		{
			sqlVAL.str = astLeftJoin
		}
	case 393:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2579
		{
			sqlVAL.str = astRightJoin
		}
	case 394:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2583
		{
			sqlVAL.str = astInnerJoin
		}
	case 395:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2589
		{
		}
	case 396:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2590
		{
		}
	case 397:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2601
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: NameList(sqlDollar[3].union.strs())}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2605
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2611
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 400:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2615
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 401:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2619
		{
			sqlVAL.union.val = sqlDollar[2].union.qname()
		}
	case 402:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2623
		{
			sqlVAL.union.val = sqlDollar[3].union.qname()
		}
	case 403:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2629
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2633
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 405:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2646
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname()}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2650
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2654
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2660
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 409:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2664
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 410:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2676
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 411:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2680
		{
			unimplementedWithIssue(2115)
		}
	case 412:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2681
		{
			unimplementedWithIssue(2115)
		}
	case 413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2684
		{
			unimplementedWithIssue(2115)
		}
	case 414:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2685
		{
			unimplementedWithIssue(2115)
		}
	case 415:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2686
		{
		}
	case 421:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2694
		{
			unimplemented()
		}
	case 422:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2696
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 423:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2700
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2704
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 425:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2708
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2712
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 427:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2716
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 428:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2720
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 433:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2741
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2750
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2764
		{
			sqlVAL.union.val = nil
		}
	case 436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2771
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2775
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2779
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 439:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2783
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 440:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2787
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 441:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2791
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 442:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2795
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newFloatColType(int(prec))
		}
	case 443:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2804
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 444:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2808
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2817
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2826
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2835
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 448:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2839
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 449:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2845
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 450:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2849
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2867
		{
			n, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newIntBitType(int(n))
		}
	case 456:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2878
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 461:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2894
		{
			n, err := sqlDollar[3].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2910
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 463:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2916
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 464:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2920
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 465:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2924
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 466:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2928
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 467:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2933
		{
		}
	case 468:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2934
		{
		}
	case 469:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2939
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2943
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 471:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2947
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 472:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2951
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 473:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2955
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2960
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 475:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2965
		{
			unimplemented()
		}
	case 476:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2966
		{
			unimplemented()
		}
	case 477:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2967
		{
			unimplemented()
		}
	case 478:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2968
		{
			unimplemented()
		}
	case 479:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2969
		{
			unimplemented()
		}
	case 480:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2970
		{
			unimplemented()
		}
	case 481:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2971
		{
			unimplemented()
		}
	case 482:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2972
		{
			unimplemented()
		}
	case 483:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2973
		{
			unimplemented()
		}
	case 484:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2974
		{
			unimplemented()
		}
	case 485:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2975
		{
			unimplemented()
		}
	case 486:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2976
		{
			unimplemented()
		}
	case 487:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2977
		{
			unimplemented()
		}
	case 488:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2978
		{
		}
	case 489:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2981
		{
			unimplemented()
		}
	case 490:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2982
		{
			unimplemented()
		}
	case 492:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3006
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3009
		{
			unimplemented()
		}
	case 494:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3010
		{
			unimplemented()
		}
	case 495:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3019
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3023
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3027
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3031
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3035
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3039
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3043
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3047
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3051
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3055
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3059
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3063
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3067
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3071
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3075
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3079
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3083
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3087
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3091
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3095
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3099
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3103
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3107
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3111
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3115
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3119
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3123
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3127
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3131
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3135
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3139
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3143
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3146
		{
			unimplemented()
		}
	case 528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3148
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3152
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3156
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3160
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3164
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3168
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3172
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3176
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3180
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3184
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3188
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3192
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3196
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3200
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3204
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3208
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3225
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3229
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3233
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3237
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3241
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3245
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3249
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3253
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3257
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3261
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3265
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3269
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3273
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3277
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3281
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3285
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3289
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3293
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3297
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3301
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3305
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3309
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3313
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3317
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3321
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3325
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3329
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3341
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 574:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3346
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3350
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3356
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3360
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3364
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3370
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 582:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3374
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 583:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3378
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3386
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname()}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3390
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3393
		{
			unimplemented()
		}
	case 587:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3394
		{
			unimplemented()
		}
	case 588:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3396
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Type: All, Exprs: sqlDollar[4].union.exprs()}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3400
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Type: Distinct, Exprs: sqlDollar[4].union.exprs()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3404
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Exprs: Exprs{StarExpr()}}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3417
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 592:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3421
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 593:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3430
		{
			unimplemented()
		}
	case 594:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3431
		{
			unimplemented()
		}
	case 595:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3435
		{
			unimplemented()
		}
	case 596:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3437
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3441
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3445
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3449
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3452
		{
			unimplemented()
		}
	case 601:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3453
		{
			unimplemented()
		}
	case 602:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3454
		{
			unimplemented()
		}
	case 603:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3455
		{
			unimplemented()
		}
	case 604:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3457
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3461
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3465
		{
			sqlVAL.union.val = &OverlayExpr{FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3469
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "STRPOS"}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3473
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3476
		{
			unimplemented()
		}
	case 610:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3478
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3482
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "LTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3486
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "RTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3490
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3494
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3498
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3502
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3506
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3510
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3514
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3520
		{
			unimplemented()
		}
	case 621:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3521
		{
		}
	case 622:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3524
		{
			unimplemented()
		}
	case 623:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3525
		{
		}
	case 624:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3529
		{
			unimplemented()
		}
	case 625:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3530
		{
		}
	case 626:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3533
		{
			unimplemented()
		}
	case 627:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3534
		{
			unimplemented()
		}
	case 628:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3537
		{
			unimplemented()
		}
	case 629:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3540
		{
			unimplemented()
		}
	case 630:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3541
		{
			unimplemented()
		}
	case 631:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3542
		{
		}
	case 632:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3546
		{
			unimplemented()
		}
	case 633:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3557
		{
			unimplemented()
		}
	case 634:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3558
		{
		}
	case 635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3561
		{
			unimplemented()
		}
	case 636:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3562
		{
		}
	case 637:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3570
		{
			unimplemented()
		}
	case 638:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3571
		{
			unimplemented()
		}
	case 639:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3572
		{
		}
	case 640:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3575
		{
			unimplemented()
		}
	case 641:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3576
		{
			unimplemented()
		}
	case 642:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3582
		{
			unimplemented()
		}
	case 643:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3583
		{
			unimplemented()
		}
	case 644:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3584
		{
			unimplemented()
		}
	case 645:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3585
		{
			unimplemented()
		}
	case 646:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3586
		{
			unimplemented()
		}
	case 647:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3597
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3601
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3605
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3611
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3615
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3621
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3662
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3666
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 655:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3672
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3676
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 657:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3682
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3686
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3690
		{
			sqlVAL.union.val = &Array{nil}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3696
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3700
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 662:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3706
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3728
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3732
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3738
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 673:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3745
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3749
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 675:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3766
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3770
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3774
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3778
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3782
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 680:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3786
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 681:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3792
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 682:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3798
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 683:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3804
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 684:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3808
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 685:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3812
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 686:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3818
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3822
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3833
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3840
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3844
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 691:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3850
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3856
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 693:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3860
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 695:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3867
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 696:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3873
		{
			sqlVAL.union.val = sqlDollar[1].union.indirectElem()
		}
	case 697:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3877
		{
			sqlVAL.union.val = sqlDollar[1].union.indirectElem()
		}
	case 698:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3881
		{
			sqlVAL.union.val = &ArrayIndirection{Begin: sqlDollar[2].union.expr()}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3885
		{
			sqlVAL.union.val = &ArrayIndirection{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr()}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3891
		{
			sqlVAL.union.val = NameIndirection(sqlDollar[2].str)
		}
	case 701:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3897
		{
			sqlVAL.union.val = qualifiedStar
		}
	case 702:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3903
		{
			sqlVAL.union.val = Indirection{sqlDollar[1].union.indirectElem()}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3907
		{
			sqlVAL.union.val = append(sqlDollar[1].union.indirect(), sqlDollar[2].union.indirectElem())
		}
	case 704:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3912
		{
		}
	case 705:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3913
		{
		}
	case 707:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3922
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3928
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3932
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 710:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3941
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 711:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3947
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3951
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 713:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3957
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3966
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3970
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3974
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 717:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3982
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3986
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 719:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3992
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3996
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 721:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4002
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4006
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 723:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4017
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4021
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4027
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.qname(), Index: Name(sqlDollar[3].str)}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4038
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4042
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: Indirection{sqlDollar[2].union.indirectElem()}}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4046
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: Indirection{sqlDollar[2].union.indirectElem()}}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4050
		{
			sqlVAL.union.val = &QualifiedName{Indirect: Indirection{unqualifiedStar}}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4056
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4060
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 732:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4066
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 733:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4069
		{
		}
	case 734:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4079
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4083
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4090
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 737:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4094
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 738:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4098
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4102
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4105
		{
			unimplemented()
		}
	case 741:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4107
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4111
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4115
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[5].str}, Type: sqlDollar[1].union.colType()}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4119
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 745:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4123
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 746:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4127
		{
			sqlVAL.union.val = DNull
		}
	case 748:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4134
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 749:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4138
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4160
		{
			sqlVAL.str = ""
		}
	case 755:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4166
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 756:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4170
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
