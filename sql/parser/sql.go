// Code generated by go yacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"go/constant"
	"go/token"

	"github.com/pkg/errors"

	"github.com/cockroachdb/cockroach/sql/privilege"
	"github.com/cockroachdb/cockroach/util"
)

var errUnimplemented = errors.New("unimplemented")

func unimplemented() {
	panic(errUnimplemented)
}

func unimplementedWithIssue(issue int) {
	panic(util.UnimplementedWithIssueErrorf(issue, ""))
}

//line sql.y:44

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new sytax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in two forms, depending on the
// type of the value being accessed. Values and pointers are directly
// type asserted from the empty interface, meaning that they will panic
// if the type assertion is incorrect. Interfaces are handled differently
// because a nil instance of an interface inserted into the empty interface
// becomes a nil instance of the empty interface and therefore will fail a
// direct type assertion. Instead, a guarded type assertion must be used,
// which returns nil if the type assertion fails.
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	return u.val.(*StrVal)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) qname() *QualifiedName {
	return u.val.(*QualifiedName)
}
func (u *sqlSymUnion) qnames() QualifiedNames {
	return u.val.(QualifiedNames)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) indirectElem() IndirectionElem {
	if indirectElem, ok := u.val.(IndirectionElem); ok {
		return indirectElem
	}
	return nil
}
func (u *sqlSymUnion) indirect() Indirection {
	return u.val.(Indirection)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	if selectStmt, ok := u.val.(*Select); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	if selectStmt, ok := u.val.(SelectStatement); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	if constraintDef, ok := u.val.(ConstraintTableDef); ok {
		return constraintDef
	}
	return nil
}
func (u *sqlSymUnion) tblDef() TableDef {
	if tblDef, ok := u.val.(TableDef); ok {
		return tblDef
	}
	return nil
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	if colQual, ok := u.val.(NamedColumnQualification); ok {
		return colQual
	}
	return NamedColumnQualification{}
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	if colQual, ok := u.val.(ColumnQualification); ok {
		return colQual
	}
	return nil
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retExprs() ReturningExprs {
	return ReturningExprs(u.val.(SelectExprs))
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	if tblExpr, ok := u.val.(TableExpr); ok {
		return tblExpr
	}
	return nil
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	if joinCond, ok := u.val.(JoinCond); ok {
		return joinCond
	}
	return nil
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	if alterTableCmd, ok := u.val.(AlterTableCmd); ok {
		return alterTableCmd
	}
	return nil
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) famElem() FamilyElem {
	return u.val.(FamilyElem)
}
func (u *sqlSymUnion) famElems() FamilyElemList {
	return u.val.(FamilyElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}

//line sql.y:291
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const DOT_DOT = 57353
const LESS_EQUALS = 57354
const GREATER_EQUALS = 57355
const NOT_EQUALS = 57356
const ERROR = 57357
const ACTION = 57358
const ADD = 57359
const ALL = 57360
const ALTER = 57361
const ANALYSE = 57362
const ANALYZE = 57363
const AND = 57364
const ANY = 57365
const ANNOTATE_TYPE = 57366
const ARRAY = 57367
const AS = 57368
const ASC = 57369
const ASYMMETRIC = 57370
const AT = 57371
const BEGIN = 57372
const BETWEEN = 57373
const BIGINT = 57374
const BIGSERIAL = 57375
const BIT = 57376
const BLOB = 57377
const BOOL = 57378
const BOOLEAN = 57379
const BOTH = 57380
const BY = 57381
const BYTEA = 57382
const BYTES = 57383
const CASCADE = 57384
const CASE = 57385
const CAST = 57386
const CHAR = 57387
const CHARACTER = 57388
const CHARACTERISTICS = 57389
const CHECK = 57390
const COALESCE = 57391
const COLLATE = 57392
const COLLATION = 57393
const COLUMN = 57394
const COLUMNS = 57395
const COMMIT = 57396
const COMMITTED = 57397
const CONCAT = 57398
const CONFLICT = 57399
const CONSTRAINT = 57400
const CONSTRAINTS = 57401
const COVERING = 57402
const CREATE = 57403
const CROSS = 57404
const CUBE = 57405
const CURRENT = 57406
const CURRENT_CATALOG = 57407
const CURRENT_DATE = 57408
const CURRENT_ROLE = 57409
const CURRENT_TIME = 57410
const CURRENT_TIMESTAMP = 57411
const CURRENT_USER = 57412
const CYCLE = 57413
const DATA = 57414
const DATABASE = 57415
const DATABASES = 57416
const DATE = 57417
const DAY = 57418
const DEC = 57419
const DECIMAL = 57420
const DEFAULT = 57421
const DEALLOCATE = 57422
const DEFERRABLE = 57423
const DELETE = 57424
const DESC = 57425
const DISTINCT = 57426
const DO = 57427
const DOUBLE = 57428
const DROP = 57429
const ELSE = 57430
const ENCODING = 57431
const END = 57432
const ESCAPE = 57433
const EXCEPT = 57434
const EXISTS = 57435
const EXECUTE = 57436
const EXPLAIN = 57437
const EXTRACT = 57438
const FALSE = 57439
const FAMILY = 57440
const FETCH = 57441
const FILTER = 57442
const FIRST = 57443
const FLOAT = 57444
const FLOORDIV = 57445
const FOLLOWING = 57446
const FOR = 57447
const FORCE_INDEX = 57448
const FOREIGN = 57449
const FROM = 57450
const FULL = 57451
const GRANT = 57452
const GRANTS = 57453
const GREATEST = 57454
const GROUP = 57455
const GROUPING = 57456
const HAVING = 57457
const HIGH = 57458
const HOUR = 57459
const IF = 57460
const IFNULL = 57461
const IN = 57462
const ILIKE = 57463
const INDEX = 57464
const INDEXES = 57465
const INITIALLY = 57466
const INNER = 57467
const INSERT = 57468
const INT = 57469
const INT64 = 57470
const INTEGER = 57471
const INTERSECT = 57472
const INTERVAL = 57473
const INTO = 57474
const IS = 57475
const ISOLATION = 57476
const JOIN = 57477
const KEY = 57478
const KEYS = 57479
const LATERAL = 57480
const LEADING = 57481
const LEAST = 57482
const LEFT = 57483
const LEVEL = 57484
const LIKE = 57485
const LIMIT = 57486
const LOCAL = 57487
const LOCALTIME = 57488
const LOCALTIMESTAMP = 57489
const LOW = 57490
const LSHIFT = 57491
const MATCH = 57492
const MINUTE = 57493
const MONTH = 57494
const NAME = 57495
const NAMES = 57496
const NATURAL = 57497
const NEXT = 57498
const NO = 57499
const NO_INDEX_JOIN = 57500
const NORMAL = 57501
const NOT = 57502
const NOTHING = 57503
const NULL = 57504
const NULLIF = 57505
const NULLS = 57506
const NUMERIC = 57507
const OF = 57508
const OFF = 57509
const OFFSET = 57510
const ON = 57511
const ONLY = 57512
const OR = 57513
const ORDER = 57514
const ORDINALITY = 57515
const OUT = 57516
const OUTER = 57517
const OVER = 57518
const OVERLAPS = 57519
const OVERLAY = 57520
const PARTIAL = 57521
const PARTITION = 57522
const PLACING = 57523
const POSITION = 57524
const PRECEDING = 57525
const PRECISION = 57526
const PREPARE = 57527
const PRIMARY = 57528
const PRIORITY = 57529
const RANGE = 57530
const READ = 57531
const REAL = 57532
const RECURSIVE = 57533
const REF = 57534
const REFERENCES = 57535
const RENAME = 57536
const REPEATABLE = 57537
const RELEASE = 57538
const RESTRICT = 57539
const RETURNING = 57540
const REVOKE = 57541
const RIGHT = 57542
const ROLLBACK = 57543
const ROLLUP = 57544
const ROW = 57545
const ROWS = 57546
const RSHIFT = 57547
const SAVEPOINT = 57548
const SEARCH = 57549
const SECOND = 57550
const SELECT = 57551
const SERIAL = 57552
const SERIALIZABLE = 57553
const SESSION = 57554
const SESSION_USER = 57555
const SET = 57556
const SHOW = 57557
const SIMILAR = 57558
const SIMPLE = 57559
const SMALLINT = 57560
const SMALLSERIAL = 57561
const SNAPSHOT = 57562
const SOME = 57563
const SQL = 57564
const START = 57565
const STRICT = 57566
const STRING = 57567
const STORING = 57568
const SUBSTRING = 57569
const SYMMETRIC = 57570
const SYSTEM = 57571
const TABLE = 57572
const TABLES = 57573
const TEXT = 57574
const THEN = 57575
const TIME = 57576
const TIMESTAMP = 57577
const TIMESTAMPTZ = 57578
const TO = 57579
const TRAILING = 57580
const TRANSACTION = 57581
const TREAT = 57582
const TRIM = 57583
const TRUE = 57584
const TRUNCATE = 57585
const TYPE = 57586
const UNBOUNDED = 57587
const UNCOMMITTED = 57588
const UNION = 57589
const UNIQUE = 57590
const UNKNOWN = 57591
const UPDATE = 57592
const UPSERT = 57593
const USER = 57594
const USING = 57595
const VALID = 57596
const VALIDATE = 57597
const VALUE = 57598
const VALUES = 57599
const VARCHAR = 57600
const VARIADIC = 57601
const VARYING = 57602
const WHEN = 57603
const WHERE = 57604
const WINDOW = 57605
const WITH = 57606
const WITHIN = 57607
const WITHOUT = 57608
const YEAR = 57609
const ZONE = 57610
const NOT_LA = 57611
const WITH_LA = 57612
const AS_LA = 57613
const POSTFIXOP = 57614
const UMINUS = 57615

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPLAIN",
	"EXTRACT",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HOUR",
	"IF",
	"IFNULL",
	"IN",
	"ILIKE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARTIAL",
	"PARTITION",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SQL",
	"START",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:4620

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 24,
	292, 24,
	-2, 352,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 38,
	1, 327,
	169, 327,
	198, 327,
	290, 327,
	292, 327,
	-2, 337,
	-1, 51,
	1, 330,
	169, 330,
	198, 330,
	290, 330,
	292, 330,
	-2, 336,
	-1, 60,
	1, 24,
	292, 24,
	-2, 352,
	-1, 269,
	1, 161,
	292, 161,
	-2, 841,
	-1, 302,
	144, 362,
	168, 362,
	-2, 333,
	-1, 305,
	144, 361,
	168, 361,
	-2, 331,
	-1, 428,
	144, 361,
	168, 361,
	-2, 334,
	-1, 484,
	289, 782,
	-2, 775,
	-1, 485,
	289, 783,
	-2, 776,
	-1, 491,
	5, 496,
	289, 496,
	-2, 927,
	-1, 514,
	5, 462,
	-2, 903,
	-1, 515,
	5, 490,
	289, 490,
	-2, 905,
	-1, 516,
	5, 470,
	-2, 906,
	-1, 517,
	5, 469,
	-2, 907,
	-1, 518,
	5, 490,
	289, 490,
	-2, 910,
	-1, 519,
	5, 490,
	289, 490,
	-2, 911,
	-1, 520,
	5, 491,
	-2, 914,
	-1, 521,
	5, 457,
	-2, 915,
	-1, 522,
	5, 457,
	-2, 916,
	-1, 523,
	5, 472,
	-2, 919,
	-1, 524,
	5, 458,
	-2, 924,
	-1, 525,
	5, 459,
	-2, 925,
	-1, 526,
	5, 460,
	-2, 926,
	-1, 527,
	5, 457,
	-2, 930,
	-1, 528,
	5, 463,
	-2, 935,
	-1, 529,
	5, 461,
	-2, 938,
	-1, 530,
	5, 488,
	289, 488,
	-2, 940,
	-1, 531,
	5, 492,
	-2, 943,
	-1, 532,
	5, 494,
	-2, 944,
	-1, 533,
	5, 487,
	289, 487,
	-2, 948,
	-1, 847,
	92, 337,
	130, 337,
	144, 337,
	168, 337,
	172, 337,
	247, 337,
	-2, 602,
	-1, 855,
	289, 760,
	-2, 749,
	-1, 1045,
	12, 0,
	13, 0,
	14, 0,
	272, 0,
	273, 0,
	274, 0,
	-2, 530,
	-1, 1046,
	12, 0,
	13, 0,
	14, 0,
	272, 0,
	273, 0,
	274, 0,
	-2, 531,
	-1, 1047,
	12, 0,
	13, 0,
	14, 0,
	272, 0,
	273, 0,
	274, 0,
	-2, 532,
	-1, 1051,
	12, 0,
	13, 0,
	14, 0,
	272, 0,
	273, 0,
	274, 0,
	-2, 536,
	-1, 1052,
	12, 0,
	13, 0,
	14, 0,
	272, 0,
	273, 0,
	274, 0,
	-2, 537,
	-1, 1053,
	12, 0,
	13, 0,
	14, 0,
	272, 0,
	273, 0,
	274, 0,
	-2, 538,
	-1, 1056,
	31, 0,
	120, 0,
	121, 0,
	143, 0,
	216, 0,
	269, 0,
	-2, 543,
	-1, 1062,
	31, 0,
	120, 0,
	121, 0,
	143, 0,
	216, 0,
	269, 0,
	-2, 545,
	-1, 1088,
	177, 673,
	-2, 676,
	-1, 1248,
	92, 337,
	130, 337,
	144, 337,
	168, 337,
	172, 337,
	247, 337,
	-2, 410,
	-1, 1252,
	31, 0,
	120, 0,
	121, 0,
	143, 0,
	216, 0,
	269, 0,
	-2, 544,
	-1, 1253,
	31, 0,
	120, 0,
	121, 0,
	143, 0,
	216, 0,
	269, 0,
	-2, 546,
	-1, 1258,
	31, 0,
	120, 0,
	121, 0,
	143, 0,
	216, 0,
	269, 0,
	-2, 547,
	-1, 1276,
	177, 672,
	-2, 675,
	-1, 1430,
	31, 0,
	120, 0,
	121, 0,
	143, 0,
	216, 0,
	269, 0,
	-2, 548,
	-1, 1435,
	133, 0,
	-2, 558,
	-1, 1443,
	177, 674,
	-2, 677,
	-1, 1476,
	12, 0,
	13, 0,
	14, 0,
	272, 0,
	273, 0,
	274, 0,
	-2, 583,
	-1, 1477,
	12, 0,
	13, 0,
	14, 0,
	272, 0,
	273, 0,
	274, 0,
	-2, 584,
	-1, 1478,
	12, 0,
	13, 0,
	14, 0,
	272, 0,
	273, 0,
	274, 0,
	-2, 585,
	-1, 1482,
	12, 0,
	13, 0,
	14, 0,
	272, 0,
	273, 0,
	274, 0,
	-2, 589,
	-1, 1483,
	12, 0,
	13, 0,
	14, 0,
	272, 0,
	273, 0,
	274, 0,
	-2, 590,
	-1, 1484,
	12, 0,
	13, 0,
	14, 0,
	272, 0,
	273, 0,
	274, 0,
	-2, 591,
	-1, 1588,
	133, 0,
	-2, 559,
	-1, 1591,
	31, 0,
	120, 0,
	121, 0,
	143, 0,
	216, 0,
	269, 0,
	-2, 562,
	-1, 1592,
	31, 0,
	120, 0,
	121, 0,
	143, 0,
	216, 0,
	269, 0,
	-2, 564,
	-1, 1677,
	31, 0,
	120, 0,
	121, 0,
	143, 0,
	216, 0,
	269, 0,
	-2, 563,
	-1, 1678,
	31, 0,
	120, 0,
	121, 0,
	143, 0,
	216, 0,
	269, 0,
	-2, 565,
	-1, 1685,
	133, 0,
	-2, 592,
	-1, 1726,
	133, 0,
	-2, 593,
	-1, 1774,
	31, 0,
	121, 0,
	143, 0,
	216, 0,
	269, 0,
	-2, 902,
}

const sqlNprod = 1042
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 22451

var sqlAct = [...]int{

	485, 1773, 1754, 1630, 1795, 929, 1731, 1756, 1772, 1755,
	937, 1018, 1137, 1454, 803, 1665, 1652, 1514, 850, 483,
	588, 306, 1552, 1551, 458, 677, 270, 1002, 482, 1580,
	85, 1561, 84, 84, 84, 1410, 1572, 84, 1566, 575,
	84, 475, 1245, 328, 534, 999, 1279, 1244, 84, 784,
	1330, 37, 1001, 546, 1331, 84, 84, 1235, 852, 84,
	1419, 1180, 84, 84, 84, 555, 552, 781, 84, 84,
	84, 84, 914, 354, 447, 968, 905, 938, 1231, 1074,
	1098, 1071, 1134, 325, 651, 952, 325, 1027, 336, 1030,
	799, 961, 325, 994, 336, 416, 635, 349, 23, 305,
	1186, 805, 557, 355, 417, 311, 457, 313, 50, 17,
	13, 448, 547, 548, 632, 6, 662, 356, 886, 882,
	351, 347, 8, 346, 311, 7, 5, 4, 71, 78,
	432, 1005, 431, 344, 316, 257, 631, 931, 50, 653,
	73, 77, 477, 430, 568, 649, 79, 314, 248, 340,
	435, 1672, 1028, 80, 1673, 310, 75, 74, 76, 577,
	1802, 930, 577, 1022, 965, 577, 51, 1769, 50, 1762,
	1651, 52, 1022, 1753, 1747, 1728, 958, 1022, 958, 1722,
	934, 310, 1022, 295, 1302, 1712, 589, 334, 1651, 352,
	1703, 1679, 1192, 1022, 958, 1676, 1662, 1659, 1022, 1651,
	1660, 1650, 1243, 318, 1651, 966, 1635, 1634, 566, 1022,
	1022, 324, 971, 1613, 331, 267, 971, 303, 1593, 1716,
	341, 971, 302, 1590, 81, 1525, 958, 56, 1022, 1439,
	464, 38, 971, 808, 807, 827, 828, 829, 1387, 967,
	964, 1382, 807, 1381, 84, 830, 1382, 1348, 58, 806,
	1349, 1489, 810, 1346, 837, 1345, 971, 1344, 971, 84,
	971, 38, 84, 84, 1276, 1274, 49, 971, 1023, 1273,
	1275, 1022, 1442, 809, 971, 59, 1278, 1307, 1217, 824,
	980, 304, 54, 971, 312, 1654, 970, 957, 55, 971,
	958, 38, 29, 903, 1233, 84, 969, 84, 1219, 84,
	30, 84, 971, 312, 1022, 902, 583, 53, 901, 584,
	56, 1771, 973, 1082, 578, 549, 84, 578, 442, 550,
	578, 325, 1017, 1317, 429, 423, 815, 84, 988, 443,
	775, 58, 774, 643, 642, 380, 323, 549, 84, 84,
	84, 550, 84, 838, 834, 60, 545, 550, 676, 428,
	400, 543, 1768, 1761, 1723, 963, 836, 1661, 59, 1618,
	388, 1614, 325, 569, 569, 54, 832, 541, 1606, 389,
	1605, 55, 825, 84, 1604, 1599, 1598, 962, 858, 1318,
	84, 1597, 84, 536, 1550, 1504, 1499, 580, 1543, 629,
	933, 1221, 1498, 354, 354, 540, 1497, 325, 1445, 641,
	1428, 679, 84, 1409, 84, 84, 84, 84, 84, 84,
	581, 84, 1391, 576, 56, 84, 778, 1353, 1350, 1192,
	84, 1338, 1329, 355, 355, 1301, 84, 806, 826, 1298,
	420, 680, 1296, 1284, 1283, 58, 1218, 356, 356, 835,
	1151, 1105, 1104, 442, 84, 681, 1079, 84, 441, 422,
	1312, 1309, 1310, 1311, 1303, 1304, 1305, 1306, 1308, 438,
	439, 777, 59, 444, 1302, 1764, 415, 56, 1456, 54,
	1715, 1695, 1694, 1687, 849, 55, 1668, 1657, 1649, 1627,
	303, 1611, 1583, 1559, 570, 302, 1434, 567, 58, 855,
	341, 1427, 833, 1406, 53, 821, 822, 823, 1302, 820,
	817, 818, 819, 811, 812, 813, 814, 816, 1542, 1405,
	1404, 1402, 1549, 311, 1389, 59, 1365, 595, 639, 1302,
	1364, 1328, 549, 1292, 1548, 585, 550, 1291, 535, 638,
	1270, 1266, 1080, 1076, 1120, 673, 1206, 1165, 672, 666,
	765, 1164, 1144, 1103, 304, 84, 1021, 53, 887, 890,
	894, 679, 808, 880, 879, 776, 878, 1307, 1165, 84,
	877, 876, 788, 84, 875, 789, 84, 84, 874, 896,
	873, 810, 84, 787, 84, 84, 899, 84, 801, 808,
	84, 680, 84, 84, 872, 354, 908, 325, 871, 870,
	336, 1307, 809, 869, 868, 681, 941, 867, 810, 897,
	866, 336, 303, 1317, 336, 303, 303, 795, 947, 349,
	796, 797, 1307, 865, 856, 355, 854, 762, 451, 809,
	766, 767, 768, 769, 770, 824, 771, 53, 779, 356,
	773, 329, 446, 386, 84, 84, 919, 921, 884, 885,
	376, 888, 895, 374, 853, 815, 891, 1200, 1199, 975,
	542, 1674, 1547, 394, 1193, 1012, 1578, 892, 1317, 1318,
	1352, 893, 859, 1351, 1251, 411, 304, 1302, 395, 304,
	304, 863, 815, 1567, 930, 1457, 1099, 679, 932, 883,
	932, 1188, 78, 1287, 1737, 1783, 955, 1784, 1702, 927,
	911, 50, 847, 73, 77, 50, 851, 953, 954, 79,
	945, 352, 993, 956, 948, 950, 80, 680, 936, 75,
	74, 76, 949, 946, 1318, 924, 1533, 1213, 825, 260,
	300, 681, 965, 294, 979, 293, 558, 1748, 559, 288,
	888, 289, 891, 1311, 1303, 1304, 1305, 1306, 1308, 982,
	1643, 1642, 558, 1377, 559, 885, 884, 981, 974, 976,
	977, 1357, 490, 1356, 1254, 538, 418, 1205, 617, 1204,
	1307, 1203, 1202, 966, 537, 84, 1063, 24, 1303, 1304,
	1305, 1306, 1308, 972, 826, 808, 926, 1701, 42, 84,
	84, 925, 392, 419, 1148, 1147, 1309, 1310, 1311, 1303,
	1304, 1305, 1306, 1308, 810, 1388, 560, 967, 964, 38,
	1034, 38, 44, 325, 414, 372, 297, 1302, 84, 49,
	84, 1024, 560, 68, 38, 809, 1719, 1632, 38, 393,
	1073, 487, 811, 812, 813, 814, 816, 558, 33, 559,
	1739, 64, 325, 1367, 571, 29, 1033, 969, 45, 1393,
	679, 1073, 32, 30, 1750, 820, 817, 818, 819, 811,
	812, 813, 814, 816, 969, 1783, 1099, 1792, 34, 1396,
	1751, 577, 69, 1521, 1181, 1077, 1083, 1087, 815, 1090,
	680, 997, 907, 1394, 1379, 65, 1190, 298, 1376, 996,
	1015, 1016, 907, 1179, 681, 1129, 671, 670, 906, 664,
	659, 1141, 1142, 1143, 1522, 301, 915, 560, 564, 1185,
	1307, 1150, 1214, 616, 897, 84, 84, 84, 1212, 897,
	563, 84, 1086, 963, 84, 391, 969, 1696, 1025, 1176,
	84, 84, 84, 84, 84, 881, 84, 84, 1181, 1156,
	969, 998, 1683, 31, 84, 62, 84, 846, 1160, 1305,
	1306, 1308, 1290, 84, 47, 390, 1317, 35, 1420, 46,
	1095, 595, 84, 1078, 36, 918, 1758, 56, 1187, 310,
	1368, 674, 39, 41, 561, 1791, 434, 1187, 1154, 1757,
	70, 43, 412, 84, 84, 1517, 325, 1518, 58, 84,
	561, 383, 385, 1633, 63, 311, 1195, 1110, 1196, 354,
	1175, 48, 1782, 1183, 1780, 1032, 249, 1565, 391, 67,
	66, 1520, 1318, 1010, 556, 59, 1155, 84, 1523, 84,
	84, 84, 54, 623, 84, 403, 578, 254, 55, 355,
	1256, 381, 250, 84, 379, 413, 1759, 675, 1798, 1609,
	84, 1671, 84, 356, 917, 1224, 1223, 53, 1029, 1191,
	984, 1072, 1637, 1194, 1790, 251, 986, 813, 814, 816,
	1806, 1636, 1625, 794, 470, 595, 325, 1374, 433, 1113,
	1359, 253, 987, 1519, 1760, 561, 1208, 904, 1159, 1075,
	1209, 985, 1210, 1215, 1220, 1211, 1222, 1303, 1304, 1305,
	1306, 1308, 434, 311, 1216, 1485, 82, 241, 242, 1269,
	1263, 259, 61, 1271, 271, 1529, 916, 1060, 1011, 1162,
	1114, 595, 259, 1261, 1197, 1281, 1282, 1229, 1228, 317,
	317, 1610, 1277, 327, 786, 246, 327, 333, 327, 1250,
	955, 1249, 327, 342, 327, 271, 1234, 594, 311, 50,
	619, 953, 954, 1805, 1115, 1112, 780, 956, 1327, 618,
	1532, 1257, 1255, 1796, 252, 1198, 1581, 1531, 1392, 1340,
	309, 433, 1732, 772, 644, 1626, 1167, 1069, 249, 1166,
	1575, 1486, 665, 660, 312, 1415, 84, 1487, 1259, 648,
	1067, 1414, 1264, 1238, 339, 390, 1528, 311, 1286, 254,
	1363, 338, 308, 1797, 250, 255, 1061, 1058, 308, 1241,
	1411, 1116, 617, 84, 425, 1232, 591, 1384, 1582, 1236,
	1799, 646, 1102, 1686, 1608, 1239, 1332, 251, 1433, 1057,
	1297, 1371, 647, 1373, 1335, 1336, 1337, 941, 84, 1237,
	84, 1265, 84, 253, 978, 410, 84, 408, 1530, 1354,
	310, 407, 406, 1065, 84, 1064, 1361, 84, 405, 1070,
	1333, 1238, 404, 84, 679, 401, 337, 84, 1260, 84,
	1111, 864, 38, 1375, 764, 1262, 1378, 1241, 325, 1101,
	1386, 325, 1248, 1175, 1240, 1383, 1511, 1418, 1372, 1424,
	1385, 1370, 1401, 1239, 680, 1358, 1225, 1408, 1013, 1395,
	1397, 1398, 1059, 1440, 1009, 951, 582, 1436, 681, 1403,
	1423, 84, 1075, 81, 579, 1417, 617, 574, 377, 565,
	1421, 1422, 1447, 1448, 1449, 307, 252, 847, 562, 1451,
	785, 1644, 1019, 382, 1784, 1066, 271, 271, 436, 668,
	1646, 1413, 1068, 321, 1416, 907, 397, 3, 923, 1380,
	907, 922, 1240, 1654, 1444, 49, 920, 616, 1698, 1458,
	1725, 1490, 617, 1412, 1717, 440, 935, 255, 802, 259,
	1463, 327, 1500, 271, 640, 426, 847, 84, 84, 84,
	587, 29, 808, 960, 1803, 84, 84, 245, 1020, 30,
	317, 84, 808, 84, 1804, 84, 84, 84, 84, 1526,
	1527, 327, 1493, 84, 437, 1492, 1510, 287, 330, 322,
	1506, 810, 327, 327, 327, 1770, 572, 1302, 808, 1536,
	398, 1505, 809, 256, 1399, 84, 84, 1545, 1390, 595,
	990, 989, 809, 1347, 1201, 84, 84, 1149, 1146, 84,
	1145, 1096, 1557, 991, 1595, 1569, 1557, 327, 84, 84,
	1564, 1556, 290, 291, 636, 1556, 636, 595, 595, 325,
	325, 616, 1584, 325, 1558, 595, 1546, 1234, 1558, 1450,
	1226, 1563, 992, 857, 1540, 1589, 271, 84, 636, 271,
	271, 271, 271, 271, 1029, 271, 296, 1029, 1631, 271,
	247, 1585, 763, 402, 259, 1601, 1749, 595, 1289, 1682,
	783, 1460, 1461, 56, 1664, 1100, 862, 616, 28, 1465,
	1121, 1544, 1554, 463, 1238, 1512, 1360, 1004, 317, 1003,
	682, 804, 1570, 1571, 58, 669, 1576, 658, 486, 409,
	1241, 652, 84, 661, 84, 1109, 84, 84, 1607, 539,
	1236, 1496, 488, 592, 84, 489, 1239, 593, 889, 476,
	590, 59, 350, 1577, 939, 1097, 1285, 860, 54, 1620,
	1237, 462, 1622, 84, 55, 1619, 468, 467, 1629, 1084,
	373, 459, 1579, 1242, 1574, 40, 387, 1645, 265, 266,
	1184, 594, 1541, 72, 619, 1014, 84, 790, 84, 1369,
	299, 1655, 1653, 618, 1640, 1641, 84, 595, 1299, 1557,
	375, 1127, 1119, 1658, 84, 1240, 1117, 1108, 1556, 421,
	1663, 1647, 551, 940, 399, 1026, 959, 445, 1675, 327,
	325, 1558, 1560, 798, 1763, 320, 1267, 1268, 1667, 319,
	1000, 396, 38, 912, 645, 983, 292, 327, 1681, 1693,
	327, 928, 808, 1697, 1366, 1736, 327, 57, 943, 944,
	591, 327, 1688, 22, 327, 20, 271, 271, 1573, 1691,
	19, 810, 18, 84, 84, 1029, 1029, 84, 16, 1029,
	617, 15, 14, 21, 1705, 84, 12, 1324, 1325, 1326,
	11, 84, 809, 1670, 1707, 594, 1714, 1709, 619, 84,
	1711, 1557, 630, 10, 1706, 679, 595, 618, 617, 617,
	1556, 1708, 9, 1718, 27, 26, 617, 25, 636, 804,
	1121, 1121, 1713, 1558, 2, 84, 84, 84, 1, 84,
	1721, 311, 1720, 0, 1724, 680, 0, 897, 1727, 1740,
	1734, 594, 0, 0, 619, 815, 1743, 84, 617, 681,
	1639, 1735, 0, 618, 0, 1738, 0, 1741, 0, 0,
	0, 1746, 1745, 1742, 591, 1557, 0, 0, 1752, 1744,
	84, 1121, 1121, 1121, 1556, 0, 0, 0, 0, 0,
	1766, 0, 0, 1767, 595, 0, 0, 1558, 0, 0,
	1778, 825, 0, 1779, 941, 84, 1781, 0, 0, 0,
	1785, 0, 1787, 1788, 0, 0, 1789, 0, 1648, 1786,
	591, 0, 0, 0, 0, 0, 0, 0, 1801, 1800,
	1431, 1432, 0, 0, 0, 616, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1807, 1029, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 826, 617, 995,
	0, 0, 0, 616, 616, 0, 0, 0, 0, 0,
	595, 616, 0, 327, 912, 0, 0, 0, 1466, 1467,
	1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475, 1476, 1477,
	1478, 1479, 1480, 1481, 1482, 1483, 1484, 0, 1488, 0,
	0, 0, 327, 616, 271, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1121, 1121, 0, 0, 808, 0,
	847, 0, 0, 0, 0, 0, 0, 0, 820, 817,
	818, 819, 811, 812, 813, 814, 816, 810, 0, 0,
	0, 0, 0, 1302, 0, 1319, 1320, 1321, 0, 0,
	0, 0, 0, 0, 0, 1587, 0, 617, 809, 0,
	0, 0, 1121, 1121, 1121, 1121, 1121, 1121, 1121, 1121,
	1121, 1121, 1121, 1121, 1121, 1121, 1121, 1121, 1121, 1121,
	1121, 0, 1121, 0, 0, 0, 0, 0, 0, 1316,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 327,
	1157, 1158, 0, 616, 0, 912, 0, 0, 1163, 0,
	0, 815, 0, 0, 1168, 1169, 1171, 1173, 1174, 0,
	1177, 1178, 0, 0, 0, 0, 0, 0, 327, 0,
	1189, 0, 449, 449, 0, 617, 1307, 327, 0, 0,
	0, 0, 553, 0, 0, 0, 327, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 825, 0, 594,
	0, 0, 619, 0, 0, 0, 1322, 995, 636, 0,
	0, 618, 0, 995, 0, 0, 0, 0, 0, 0,
	0, 0, 1317, 0, 0, 0, 0, 594, 594, 1302,
	619, 619, 0, 0, 0, 594, 0, 1628, 619, 618,
	618, 783, 616, 783, 271, 327, 0, 618, 1227, 0,
	808, 617, 0, 826, 0, 0, 0, 1230, 0, 0,
	0, 1521, 0, 1515, 1247, 0, 327, 594, 591, 810,
	619, 1513, 0, 0, 0, 1316, 0, 0, 1318, 618,
	0, 0, 0, 0, 0, 0, 791, 793, 0, 0,
	809, 0, 1522, 800, 0, 0, 591, 591, 808, 0,
	827, 828, 829, 0, 591, 841, 842, 843, 844, 845,
	830, 1516, 0, 0, 848, 0, 0, 810, 0, 837,
	616, 1121, 1307, 1685, 0, 817, 818, 819, 811, 812,
	813, 814, 816, 0, 861, 0, 591, 0, 809, 0,
	0, 0, 0, 815, 824, 1313, 1314, 1315, 0, 1312,
	1309, 1310, 1311, 1303, 1304, 1305, 1306, 1308, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 594, 1317, 0,
	619, 0, 0, 1517, 0, 1518, 0, 0, 0, 618,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 825,
	0, 815, 0, 0, 0, 0, 616, 0, 0, 1520,
	804, 1726, 898, 0, 0, 0, 1523, 1121, 838, 834,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 836, 0, 0, 1318, 0, 0, 327, 0, 0,
	0, 832, 0, 0, 0, 0, 591, 825, 0, 808,
	0, 0, 0, 0, 0, 826, 0, 0, 0, 0,
	0, 0, 1400, 0, 912, 0, 783, 0, 810, 831,
	1407, 1519, 0, 0, 0, 0, 594, 0, 327, 619,
	0, 327, 0, 0, 0, 0, 0, 1247, 618, 809,
	0, 1426, 0, 1247, 0, 1121, 0, 0, 0, 0,
	0, 0, 0, 826, 0, 1312, 1309, 1310, 1311, 1303,
	1304, 1305, 1306, 1308, 835, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 819,
	811, 812, 813, 814, 816, 1455, 0, 0, 0, 0,
	0, 0, 815, 0, 0, 591, 0, 0, 0, 0,
	0, 0, 0, 0, 594, 0, 0, 619, 0, 0,
	0, 0, 0, 0, 0, 0, 618, 833, 0, 0,
	821, 822, 823, 0, 820, 817, 818, 819, 811, 812,
	813, 814, 816, 0, 0, 0, 1152, 0, 825, 0,
	0, 0, 0, 0, 0, 1153, 0, 0, 0, 0,
	0, 1508, 1509, 912, 0, 0, 0, 0, 0, 804,
	804, 0, 0, 0, 0, 1534, 0, 1535, 0, 327,
	1537, 1538, 1539, 591, 0, 0, 0, 327, 0, 0,
	594, 0, 0, 619, 0, 0, 0, 0, 0, 0,
	0, 0, 618, 0, 826, 0, 0, 1553, 0, 1562,
	912, 1553, 0, 0, 0, 0, 0, 0, 0, 327,
	327, 0, 0, 327, 0, 0, 0, 0, 0, 449,
	0, 0, 804, 1247, 1035, 1036, 1037, 1038, 1039, 1040,
	1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050,
	1051, 1052, 1053, 1054, 1055, 1056, 0, 1062, 0, 591,
	0, 1602, 0, 0, 0, 0, 808, 0, 827, 828,
	829, 0, 0, 0, 0, 0, 0, 0, 830, 811,
	812, 813, 814, 816, 0, 810, 0, 837, 272, 0,
	1106, 1107, 808, 1118, 0, 1128, 1130, 1135, 1138, 1139,
	1140, 0, 285, 0, 0, 0, 809, 0, 0, 0,
	0, 810, 824, 837, 0, 0, 912, 0, 1621, 0,
	271, 1623, 0, 0, 553, 0, 0, 0, 327, 0,
	0, 0, 809, 0, 0, 0, 0, 274, 824, 0,
	0, 0, 279, 280, 0, 286, 0, 804, 0, 0,
	0, 0, 0, 1182, 0, 0, 0, 273, 275, 815,
	0, 0, 0, 0, 1553, 0, 0, 0, 0, 0,
	327, 0, 1666, 0, 0, 0, 838, 834, 0, 0,
	327, 0, 0, 0, 0, 815, 0, 0, 804, 836,
	0, 0, 0, 0, 1207, 276, 0, 0, 0, 832,
	0, 0, 838, 834, 0, 825, 277, 278, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 281, 0, 0, 0, 832, 0, 831, 0, 0,
	0, 825, 0, 0, 0, 0, 0, 0, 0, 0,
	800, 0, 0, 0, 0, 0, 0, 1699, 1700, 0,
	0, 1704, 0, 0, 0, 0, 1553, 0, 0, 271,
	0, 826, 0, 0, 0, 1562, 0, 0, 0, 0,
	0, 0, 835, 804, 0, 0, 0, 0, 0, 0,
	1252, 1253, 0, 0, 0, 0, 1258, 826, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 835, 1733,
	804, 327, 0, 271, 0, 1272, 0, 0, 0, 0,
	0, 0, 0, 0, 1280, 282, 0, 0, 283, 0,
	1553, 1666, 1288, 284, 0, 833, 1293, 0, 821, 822,
	823, 0, 820, 817, 818, 819, 811, 812, 813, 814,
	816, 0, 0, 0, 327, 0, 0, 0, 848, 1615,
	0, 833, 0, 0, 1135, 1135, 1135, 0, 820, 817,
	818, 819, 811, 812, 813, 814, 816, 0, 0, 804,
	0, 0, 0, 0, 0, 0, 1355, 0, 0, 808,
	0, 827, 828, 829, 0, 0, 0, 1362, 0, 0,
	0, 830, 0, 0, 0, 0, 0, 0, 810, 0,
	837, 0, 0, 0, 449, 0, 0, 0, 0, 0,
	0, 0, 0, 449, 0, 0, 553, 0, 0, 809,
	808, 0, 827, 828, 829, 824, 0, 0, 0, 0,
	0, 0, 830, 0, 0, 0, 0, 0, 0, 810,
	0, 837, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	809, 0, 0, 0, 0, 0, 824, 0, 0, 0,
	0, 0, 815, 0, 1429, 0, 0, 1430, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1435, 838,
	834, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1207, 836, 0, 0, 0, 0, 0, 0, 0,
	1452, 0, 832, 815, 0, 0, 0, 0, 825, 0,
	1462, 0, 0, 1464, 0, 0, 0, 0, 0, 0,
	838, 834, 1302, 0, 1319, 1320, 1321, 0, 0, 0,
	831, 0, 0, 836, 1586, 0, 0, 0, 0, 0,
	0, 0, 0, 832, 0, 1494, 1495, 0, 0, 825,
	0, 0, 0, 0, 1501, 1502, 1503, 0, 0, 0,
	0, 0, 0, 0, 826, 0, 0, 0, 1316, 0,
	0, 831, 0, 0, 0, 835, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 449, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 826, 0, 0, 808, 0,
	827, 828, 829, 0, 0, 1307, 835, 0, 0, 0,
	830, 0, 0, 0, 1568, 0, 0, 810, 833, 837,
	0, 821, 822, 823, 0, 820, 817, 818, 819, 811,
	812, 813, 814, 816, 0, 1322, 1588, 0, 809, 0,
	1591, 1592, 1343, 0, 824, 1594, 0, 0, 0, 1596,
	0, 1317, 0, 0, 0, 0, 1600, 0, 0, 833,
	1603, 0, 821, 822, 823, 0, 820, 817, 818, 819,
	811, 812, 813, 814, 816, 0, 0, 0, 0, 0,
	0, 0, 0, 1342, 0, 0, 0, 0, 0, 0,
	0, 815, 1612, 0, 0, 0, 0, 0, 808, 0,
	827, 828, 829, 0, 0, 0, 0, 1318, 838, 834,
	830, 0, 0, 0, 0, 0, 0, 810, 0, 837,
	0, 836, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 832, 0, 0, 1638, 0, 0, 825, 809, 0,
	0, 0, 0, 0, 824, 0, 0, 0, 0, 0,
	0, 0, 607, 602, 624, 596, 615, 614, 1656, 831,
	598, 597, 0, 0, 0, 626, 625, 0, 0, 0,
	0, 0, 0, 0, 1313, 1314, 1315, 1669, 1312, 1309,
	1310, 1311, 1303, 1304, 1305, 1306, 1308, 0, 0, 1677,
	1678, 815, 0, 826, 0, 620, 0, 612, 611, 0,
	0, 0, 0, 0, 835, 0, 610, 0, 838, 834,
	0, 0, 0, 0, 0, 0, 0, 0, 1690, 0,
	0, 836, 609, 0, 0, 0, 0, 0, 0, 0,
	1692, 832, 0, 0, 0, 0, 0, 825, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 603, 604, 605,
	0, 623, 553, 0, 0, 0, 0, 833, 0, 831,
	821, 822, 823, 0, 820, 817, 818, 819, 811, 812,
	813, 814, 816, 0, 0, 0, 0, 0, 0, 0,
	0, 1341, 0, 0, 0, 613, 0, 0, 0, 0,
	0, 0, 0, 826, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 835, 0, 0, 0, 0, 0,
	608, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	600, 0, 0, 0, 0, 0, 0, 0, 606, 601,
	1765, 0, 0, 0, 0, 628, 0, 0, 0, 0,
	0, 0, 599, 1777, 1777, 621, 622, 833, 0, 0,
	821, 822, 823, 0, 820, 817, 818, 819, 811, 812,
	813, 814, 816, 0, 0, 0, 0, 1777, 627, 0,
	0, 1295, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 678, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1777, 86, 87, 683,
	88, 684, 685, 686, 687, 193, 688, 689, 690, 691,
	89, 90, 194, 195, 196, 197, 91, 198, 199, 692,
	92, 200, 201, 93, 693, 694, 202, 203, 204, 695,
	205, 696, 358, 697, 94, 95, 96, 0, 97, 698,
	98, 99, 699, 359, 100, 101, 700, 701, 702, 703,
	704, 705, 102, 103, 104, 105, 206, 106, 207, 208,
	706, 107, 707, 108, 708, 709, 710, 109, 110, 711,
	111, 712, 0, 713, 209, 112, 113, 210, 714, 715,
	716, 114, 115, 211, 0, 116, 717, 117, 718, 719,
	360, 720, 118, 212, 721, 213, 722, 119, 120, 214,
	215, 723, 362, 724, 121, 725, 361, 122, 216, 217,
	218, 726, 219, 727, 363, 123, 364, 124, 125, 728,
	729, 220, 365, 126, 366, 730, 127, 731, 732, 128,
	0, 129, 130, 131, 132, 133, 367, 134, 135, 138,
	136, 733, 137, 734, 221, 139, 222, 140, 141, 735,
	736, 737, 738, 739, 142, 223, 368, 143, 369, 224,
	144, 145, 740, 225, 146, 226, 147, 741, 148, 149,
	150, 227, 151, 152, 742, 154, 155, 153, 156, 743,
	157, 370, 158, 159, 228, 160, 0, 161, 162, 163,
	744, 229, 164, 165, 745, 166, 167, 371, 168, 230,
	231, 169, 746, 170, 171, 173, 232, 172, 233, 747,
	174, 748, 175, 176, 749, 234, 235, 236, 750, 751,
	177, 237, 238, 752, 178, 179, 180, 181, 753, 754,
	182, 183, 184, 755, 756, 185, 186, 187, 239, 240,
	757, 188, 758, 759, 760, 761, 189, 190, 191, 192,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 678, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1425, 86, 87, 683,
	88, 684, 685, 686, 687, 193, 688, 689, 690, 691,
	89, 90, 194, 195, 196, 197, 91, 198, 199, 692,
	92, 200, 201, 93, 693, 694, 202, 203, 204, 695,
	205, 696, 358, 697, 94, 95, 96, 0, 97, 698,
	98, 99, 699, 359, 100, 101, 700, 701, 702, 703,
	704, 705, 102, 103, 104, 105, 206, 106, 207, 208,
	706, 107, 707, 108, 708, 709, 710, 109, 110, 711,
	111, 712, 0, 713, 209, 112, 113, 210, 714, 715,
	716, 114, 115, 211, 0, 116, 717, 117, 718, 719,
	360, 720, 118, 212, 721, 213, 722, 119, 120, 214,
	215, 723, 362, 724, 121, 725, 361, 122, 216, 217,
	218, 726, 219, 727, 363, 123, 364, 124, 125, 728,
	729, 220, 365, 126, 366, 730, 127, 731, 732, 128,
	0, 129, 130, 131, 132, 133, 367, 134, 135, 138,
	136, 733, 137, 734, 221, 139, 222, 140, 141, 735,
	736, 737, 738, 739, 142, 223, 368, 143, 369, 224,
	144, 145, 740, 225, 146, 226, 147, 741, 148, 149,
	150, 227, 151, 152, 742, 154, 155, 153, 156, 743,
	157, 370, 158, 159, 228, 160, 0, 161, 162, 163,
	744, 229, 164, 165, 745, 166, 167, 371, 168, 230,
	231, 169, 746, 170, 171, 173, 232, 172, 233, 747,
	174, 748, 175, 176, 749, 234, 235, 236, 750, 751,
	177, 237, 238, 752, 178, 179, 180, 181, 753, 754,
	182, 183, 184, 755, 756, 185, 186, 187, 239, 240,
	757, 188, 758, 759, 760, 761, 189, 190, 191, 192,
	0, 0, 678, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 900, 86, 87, 683, 88, 684, 685,
	686, 687, 193, 688, 689, 690, 691, 89, 90, 194,
	195, 196, 197, 91, 198, 199, 692, 92, 200, 201,
	93, 693, 694, 202, 203, 204, 695, 205, 696, 358,
	697, 94, 95, 96, 0, 97, 698, 98, 99, 699,
	359, 100, 101, 700, 701, 702, 703, 704, 705, 102,
	103, 104, 105, 206, 106, 207, 208, 706, 107, 707,
	108, 708, 709, 710, 109, 110, 711, 111, 712, 0,
	713, 209, 112, 113, 210, 714, 715, 716, 114, 115,
	211, 0, 116, 717, 117, 718, 719, 360, 720, 118,
	212, 721, 213, 722, 119, 120, 214, 215, 723, 362,
	724, 121, 725, 361, 122, 216, 217, 218, 726, 219,
	727, 363, 123, 364, 124, 125, 728, 729, 220, 365,
	126, 366, 730, 127, 731, 732, 128, 0, 129, 130,
	131, 132, 133, 367, 134, 135, 138, 136, 733, 137,
	734, 221, 139, 222, 140, 141, 735, 736, 737, 738,
	739, 142, 223, 368, 143, 369, 224, 144, 145, 740,
	225, 146, 226, 147, 741, 148, 149, 150, 227, 151,
	152, 742, 154, 155, 153, 156, 743, 157, 370, 158,
	159, 228, 160, 0, 161, 162, 163, 744, 229, 164,
	165, 745, 166, 167, 371, 168, 230, 231, 169, 746,
	170, 171, 173, 232, 172, 233, 747, 174, 748, 175,
	176, 749, 234, 235, 236, 750, 751, 177, 237, 238,
	752, 178, 179, 180, 181, 753, 754, 182, 183, 184,
	755, 756, 185, 186, 187, 239, 240, 757, 188, 758,
	759, 760, 761, 189, 190, 191, 192, 484, 473, 474,
	471, 472, 460, 0, 0, 0, 0, 0, 0, 86,
	87, 1092, 88, 0, 0, 0, 0, 500, 466, 0,
	0, 0, 89, 90, 194, 514, 196, 515, 91, 516,
	517, 0, 92, 200, 201, 93, 481, 499, 518, 519,
	204, 0, 510, 0, 492, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 359, 100, 101, 0, 493,
	495, 0, 494, 496, 102, 103, 104, 105, 520, 106,
	521, 522, 0, 107, 0, 108, 0, 1093, 0, 513,
	110, 0, 111, 0, 0, 0, 465, 112, 113, 501,
	479, 0, 0, 114, 115, 523, 0, 116, 0, 117,
	0, 0, 360, 0, 118, 511, 0, 213, 0, 119,
	120, 507, 509, 0, 362, 0, 121, 0, 361, 122,
	524, 525, 526, 0, 491, 0, 363, 123, 364, 124,
	125, 0, 0, 512, 365, 126, 366, 0, 127, 0,
	0, 128, 0, 129, 130, 131, 132, 133, 367, 134,
	135, 138, 136, 455, 137, 480, 508, 139, 527, 140,
	141, 0, 0, 0, 0, 0, 142, 223, 368, 143,
	369, 502, 144, 145, 0, 503, 146, 226, 147, 0,
	148, 149, 150, 528, 151, 152, 0, 154, 155, 153,
	156, 0, 157, 370, 158, 159, 469, 160, 0, 161,
	162, 163, 0, 229, 164, 165, 497, 166, 167, 371,
	168, 529, 231, 169, 0, 170, 171, 173, 530, 172,
	504, 0, 174, 0, 175, 176, 0, 234, 531, 532,
	0, 0, 177, 505, 506, 478, 178, 179, 180, 181,
	0, 0, 182, 183, 184, 498, 0, 185, 186, 187,
	239, 533, 1091, 188, 0, 0, 0, 0, 189, 190,
	191, 192, 456, 0, 0, 484, 473, 474, 471, 472,
	460, 0, 0, 452, 453, 1094, 0, 86, 87, 454,
	88, 0, 461, 1089, 0, 500, 466, 0, 0, 0,
	89, 90, 194, 514, 196, 515, 91, 516, 517, 0,
	92, 200, 201, 93, 481, 499, 518, 519, 204, 0,
	510, 0, 492, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 359, 100, 101, 0, 493, 495, 0,
	494, 496, 102, 103, 104, 105, 520, 106, 521, 522,
	554, 107, 0, 108, 0, 0, 0, 513, 110, 0,
	111, 0, 0, 0, 465, 112, 113, 501, 479, 0,
	0, 114, 115, 523, 0, 116, 0, 117, 0, 0,
	360, 0, 118, 511, 0, 213, 0, 119, 120, 507,
	509, 0, 362, 0, 121, 0, 361, 122, 524, 525,
	526, 0, 491, 0, 363, 123, 364, 124, 125, 0,
	0, 512, 365, 126, 366, 0, 127, 0, 0, 128,
	0, 129, 130, 131, 132, 133, 367, 134, 135, 138,
	136, 455, 137, 480, 508, 139, 527, 140, 141, 0,
	0, 0, 0, 0, 142, 223, 368, 143, 369, 502,
	144, 145, 0, 503, 146, 226, 147, 0, 148, 149,
	150, 528, 151, 152, 0, 154, 155, 153, 156, 0,
	157, 370, 158, 159, 469, 160, 0, 161, 162, 163,
	56, 229, 164, 165, 497, 166, 167, 371, 168, 529,
	231, 169, 0, 170, 171, 173, 530, 172, 504, 0,
	174, 58, 175, 176, 0, 234, 531, 532, 0, 0,
	177, 505, 506, 478, 178, 179, 180, 181, 0, 0,
	182, 183, 184, 498, 0, 185, 186, 187, 357, 533,
	0, 188, 0, 0, 0, 54, 189, 190, 191, 192,
	456, 55, 0, 484, 473, 474, 471, 472, 460, 0,
	0, 452, 453, 0, 0, 86, 87, 454, 88, 0,
	461, 0, 0, 500, 466, 0, 0, 0, 89, 90,
	194, 514, 196, 515, 91, 516, 517, 0, 92, 200,
	201, 93, 481, 499, 518, 519, 204, 0, 510, 0,
	492, 0, 94, 95, 96, 0, 97, 0, 98, 99,
	0, 359, 100, 101, 0, 493, 495, 0, 494, 496,
	102, 103, 104, 105, 520, 106, 521, 522, 0, 107,
	0, 108, 0, 0, 0, 513, 110, 0, 111, 0,
	0, 0, 465, 112, 113, 501, 479, 0, 0, 114,
	115, 523, 0, 116, 0, 117, 0, 0, 360, 0,
	118, 511, 0, 213, 0, 119, 120, 507, 509, 0,
	362, 0, 121, 0, 361, 122, 524, 525, 526, 0,
	491, 0, 363, 123, 364, 124, 125, 0, 0, 512,
	365, 126, 366, 0, 127, 0, 0, 128, 0, 129,
	130, 131, 132, 133, 367, 134, 135, 138, 136, 455,
	137, 480, 508, 139, 527, 140, 141, 0, 0, 0,
	0, 0, 142, 223, 368, 143, 369, 502, 144, 145,
	0, 503, 146, 226, 147, 0, 148, 149, 150, 528,
	151, 152, 0, 154, 155, 153, 156, 0, 157, 370,
	158, 159, 469, 160, 0, 161, 162, 163, 56, 229,
	164, 165, 497, 166, 167, 371, 168, 529, 231, 169,
	0, 170, 171, 173, 530, 172, 504, 0, 174, 58,
	175, 176, 0, 234, 531, 532, 0, 0, 177, 505,
	506, 478, 178, 179, 180, 181, 0, 0, 182, 183,
	184, 498, 0, 185, 186, 187, 357, 533, 0, 188,
	0, 0, 0, 54, 189, 190, 191, 192, 456, 55,
	0, 484, 473, 474, 471, 472, 460, 0, 0, 452,
	453, 0, 0, 86, 87, 454, 88, 0, 461, 0,
	0, 500, 466, 0, 0, 0, 89, 90, 194, 514,
	196, 515, 91, 516, 517, 1131, 92, 200, 201, 93,
	481, 499, 518, 519, 204, 0, 510, 0, 492, 0,
	94, 95, 96, 0, 97, 0, 98, 99, 0, 359,
	100, 101, 0, 493, 495, 0, 494, 496, 102, 103,
	104, 105, 520, 106, 521, 522, 0, 107, 0, 108,
	0, 0, 0, 513, 110, 0, 111, 0, 0, 0,
	465, 112, 113, 501, 479, 0, 0, 114, 115, 523,
	0, 116, 0, 117, 0, 1136, 360, 0, 118, 511,
	0, 213, 0, 119, 120, 507, 509, 0, 362, 0,
	121, 0, 361, 122, 524, 525, 526, 0, 491, 0,
	363, 123, 364, 124, 125, 0, 1132, 512, 365, 126,
	366, 0, 127, 0, 0, 128, 0, 129, 130, 131,
	132, 133, 367, 134, 135, 138, 136, 455, 137, 480,
	508, 139, 527, 140, 141, 0, 0, 0, 0, 0,
	142, 223, 368, 143, 369, 502, 144, 145, 0, 503,
	146, 226, 147, 0, 148, 149, 150, 528, 151, 152,
	0, 154, 155, 153, 156, 0, 157, 370, 158, 159,
	469, 160, 0, 161, 162, 163, 0, 229, 164, 165,
	497, 166, 167, 371, 168, 529, 231, 169, 0, 170,
	171, 173, 530, 172, 504, 0, 174, 0, 175, 176,
	0, 234, 531, 532, 0, 1133, 177, 505, 506, 478,
	178, 179, 180, 181, 0, 0, 182, 183, 184, 498,
	0, 185, 186, 187, 239, 533, 0, 188, 0, 0,
	0, 0, 189, 190, 191, 192, 456, 484, 473, 474,
	471, 472, 460, 0, 0, 0, 0, 452, 453, 86,
	87, 0, 88, 454, 0, 0, 461, 500, 466, 0,
	0, 0, 89, 90, 194, 514, 196, 515, 91, 516,
	517, 0, 92, 200, 201, 93, 481, 499, 518, 519,
	204, 0, 510, 0, 492, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 359, 100, 101, 0, 493,
	495, 0, 494, 496, 102, 103, 104, 105, 520, 106,
	521, 522, 0, 107, 0, 108, 0, 0, 0, 513,
	110, 0, 111, 0, 0, 0, 465, 112, 113, 501,
	479, 0, 0, 114, 115, 523, 0, 116, 0, 117,
	0, 0, 360, 0, 118, 511, 0, 213, 0, 119,
	120, 507, 509, 0, 362, 0, 121, 0, 361, 122,
	524, 525, 526, 0, 491, 0, 363, 123, 364, 124,
	125, 0, 0, 512, 365, 126, 366, 0, 127, 0,
	0, 128, 0, 129, 130, 131, 132, 133, 367, 134,
	135, 138, 136, 455, 137, 480, 508, 139, 527, 140,
	141, 0, 0, 0, 0, 0, 142, 223, 368, 143,
	369, 502, 144, 145, 0, 503, 146, 226, 147, 0,
	148, 149, 150, 528, 151, 152, 0, 154, 155, 153,
	156, 0, 157, 370, 158, 159, 469, 160, 0, 161,
	162, 163, 0, 229, 164, 165, 497, 166, 167, 371,
	168, 529, 231, 169, 0, 170, 171, 173, 530, 172,
	504, 0, 174, 0, 175, 176, 0, 234, 531, 532,
	0, 0, 177, 505, 506, 478, 178, 179, 180, 181,
	0, 0, 182, 183, 184, 498, 0, 185, 186, 187,
	239, 533, 0, 188, 0, 0, 0, 0, 189, 190,
	191, 192, 456, 0, 0, 484, 473, 474, 471, 472,
	460, 0, 0, 452, 453, 0, 0, 86, 87, 454,
	88, 0, 461, 1491, 0, 500, 466, 0, 0, 0,
	89, 90, 194, 514, 196, 515, 91, 516, 517, 0,
	92, 200, 201, 93, 481, 499, 518, 519, 204, 0,
	510, 0, 492, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 359, 100, 101, 0, 493, 495, 0,
	494, 496, 102, 103, 104, 105, 520, 106, 521, 522,
	0, 107, 0, 108, 0, 0, 0, 513, 110, 0,
	111, 0, 0, 0, 465, 112, 113, 501, 479, 0,
	0, 114, 115, 523, 0, 116, 0, 117, 0, 0,
	360, 0, 118, 511, 0, 213, 0, 119, 120, 507,
	509, 0, 362, 0, 121, 0, 361, 122, 524, 525,
	526, 0, 491, 0, 363, 123, 364, 124, 125, 0,
	0, 512, 365, 126, 366, 0, 127, 0, 0, 128,
	0, 129, 130, 131, 132, 133, 367, 134, 135, 138,
	136, 455, 137, 480, 508, 139, 527, 140, 141, 0,
	0, 0, 0, 0, 142, 223, 368, 143, 369, 502,
	144, 145, 0, 503, 146, 226, 147, 0, 148, 149,
	150, 528, 151, 152, 0, 154, 155, 153, 156, 0,
	157, 370, 158, 159, 469, 160, 0, 161, 162, 163,
	0, 229, 164, 165, 497, 166, 167, 371, 168, 529,
	231, 169, 0, 170, 171, 173, 530, 172, 504, 0,
	174, 0, 175, 176, 0, 234, 531, 532, 0, 0,
	177, 505, 506, 478, 178, 179, 180, 181, 0, 0,
	182, 183, 184, 498, 0, 185, 186, 187, 239, 533,
	0, 188, 0, 0, 0, 0, 189, 190, 191, 192,
	456, 0, 0, 484, 473, 474, 471, 472, 460, 0,
	0, 452, 453, 0, 0, 86, 87, 454, 88, 0,
	461, 1441, 0, 500, 466, 0, 0, 0, 89, 90,
	194, 514, 196, 515, 91, 516, 517, 0, 92, 200,
	201, 93, 481, 499, 518, 519, 204, 0, 510, 0,
	492, 0, 94, 95, 96, 0, 97, 0, 98, 99,
	0, 359, 100, 101, 0, 493, 495, 0, 494, 496,
	102, 103, 104, 105, 520, 106, 521, 522, 0, 107,
	0, 108, 0, 0, 0, 513, 110, 0, 111, 0,
	0, 0, 465, 112, 113, 501, 479, 0, 0, 114,
	115, 523, 0, 116, 0, 117, 0, 0, 360, 0,
	118, 511, 0, 213, 0, 119, 120, 507, 509, 0,
	362, 0, 121, 0, 361, 122, 524, 525, 526, 0,
	491, 0, 363, 123, 364, 124, 125, 0, 0, 512,
	365, 126, 366, 0, 127, 0, 0, 128, 0, 129,
	130, 131, 132, 133, 367, 134, 135, 138, 136, 455,
	137, 480, 508, 139, 527, 140, 141, 0, 0, 0,
	0, 0, 142, 223, 368, 143, 369, 502, 144, 145,
	0, 503, 146, 226, 147, 0, 148, 149, 150, 528,
	151, 152, 0, 154, 155, 153, 156, 0, 157, 370,
	158, 159, 469, 160, 0, 161, 162, 163, 0, 229,
	164, 165, 497, 166, 167, 371, 168, 529, 231, 169,
	0, 170, 171, 173, 530, 172, 504, 0, 174, 0,
	175, 176, 0, 234, 531, 532, 0, 0, 177, 505,
	506, 478, 178, 179, 180, 181, 0, 0, 182, 183,
	184, 498, 0, 185, 186, 187, 239, 533, 0, 188,
	0, 0, 0, 0, 189, 190, 191, 192, 456, 0,
	0, 484, 473, 474, 471, 472, 460, 0, 0, 452,
	453, 0, 0, 86, 87, 454, 88, 0, 461, 1088,
	0, 500, 466, 0, 0, 0, 89, 90, 194, 514,
	196, 515, 91, 516, 517, 0, 92, 200, 201, 93,
	481, 499, 518, 519, 204, 0, 510, 0, 492, 0,
	94, 95, 96, 0, 97, 0, 98, 99, 0, 359,
	100, 101, 0, 493, 495, 0, 494, 496, 102, 103,
	104, 105, 520, 106, 521, 522, 0, 107, 0, 108,
	0, 0, 0, 513, 110, 0, 111, 0, 0, 0,
	465, 112, 113, 501, 479, 0, 0, 114, 115, 523,
	0, 116, 0, 117, 0, 0, 360, 0, 118, 511,
	0, 213, 0, 119, 120, 507, 509, 0, 362, 0,
	121, 0, 361, 122, 524, 525, 526, 0, 491, 0,
	363, 123, 364, 124, 125, 0, 0, 512, 365, 126,
	366, 0, 127, 0, 0, 128, 0, 129, 130, 131,
	132, 133, 367, 134, 135, 138, 136, 455, 137, 480,
	508, 139, 527, 140, 141, 0, 0, 0, 0, 0,
	142, 223, 368, 143, 369, 502, 144, 145, 0, 503,
	146, 226, 147, 0, 148, 149, 150, 528, 151, 152,
	0, 154, 155, 153, 156, 0, 157, 370, 158, 159,
	469, 160, 0, 161, 162, 163, 0, 229, 164, 165,
	497, 166, 167, 371, 168, 529, 231, 169, 0, 170,
	171, 173, 530, 172, 504, 0, 174, 0, 175, 176,
	0, 234, 531, 532, 0, 0, 177, 505, 506, 478,
	178, 179, 180, 181, 0, 0, 182, 183, 184, 498,
	0, 185, 186, 187, 239, 533, 0, 188, 0, 0,
	0, 0, 189, 190, 191, 192, 456, 484, 473, 474,
	471, 472, 460, 0, 0, 0, 0, 452, 453, 86,
	87, 0, 88, 454, 853, 1085, 461, 500, 466, 0,
	0, 0, 89, 90, 194, 514, 196, 515, 91, 516,
	517, 0, 92, 200, 201, 93, 481, 499, 518, 519,
	204, 0, 510, 0, 492, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 359, 100, 101, 0, 493,
	495, 0, 494, 496, 102, 103, 104, 105, 520, 106,
	521, 522, 0, 107, 0, 108, 0, 0, 0, 513,
	110, 0, 111, 0, 0, 0, 465, 112, 113, 501,
	479, 0, 0, 114, 115, 523, 0, 116, 0, 117,
	0, 0, 360, 0, 118, 511, 0, 213, 0, 119,
	120, 507, 509, 0, 362, 0, 121, 0, 361, 122,
	524, 525, 526, 0, 491, 0, 363, 123, 364, 124,
	125, 0, 0, 512, 365, 126, 366, 0, 127, 0,
	0, 128, 0, 129, 130, 131, 132, 133, 367, 134,
	135, 138, 136, 455, 137, 480, 508, 139, 527, 140,
	141, 0, 0, 0, 0, 0, 142, 223, 368, 143,
	369, 502, 144, 145, 0, 503, 146, 226, 147, 0,
	148, 149, 150, 528, 151, 152, 0, 154, 155, 153,
	156, 0, 157, 370, 158, 159, 469, 160, 0, 161,
	162, 163, 0, 229, 164, 165, 497, 166, 167, 371,
	168, 529, 231, 169, 0, 170, 171, 173, 530, 172,
	504, 0, 174, 0, 175, 176, 0, 234, 531, 532,
	0, 0, 177, 505, 506, 478, 178, 179, 180, 181,
	0, 0, 182, 183, 184, 498, 0, 185, 186, 187,
	239, 533, 0, 188, 0, 0, 0, 0, 189, 190,
	191, 192, 456, 0, 0, 484, 473, 474, 471, 472,
	460, 0, 0, 452, 453, 450, 0, 86, 87, 454,
	88, 0, 461, 0, 0, 500, 466, 0, 0, 0,
	89, 90, 194, 514, 196, 515, 91, 516, 517, 0,
	92, 200, 201, 93, 481, 499, 518, 519, 204, 0,
	510, 0, 492, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 359, 100, 101, 0, 493, 495, 0,
	494, 496, 102, 103, 104, 105, 520, 106, 521, 522,
	0, 107, 0, 108, 0, 0, 0, 513, 110, 0,
	111, 0, 0, 0, 465, 112, 113, 501, 479, 0,
	0, 114, 115, 523, 0, 116, 0, 117, 0, 0,
	360, 0, 118, 511, 0, 213, 0, 119, 120, 507,
	509, 0, 362, 0, 121, 0, 361, 122, 524, 525,
	526, 0, 491, 0, 363, 123, 364, 124, 125, 0,
	0, 512, 365, 126, 366, 0, 127, 0, 0, 128,
	0, 129, 130, 131, 132, 133, 367, 134, 135, 138,
	136, 455, 137, 480, 508, 139, 527, 140, 141, 0,
	0, 0, 0, 0, 142, 223, 368, 143, 369, 502,
	144, 145, 0, 503, 146, 226, 147, 0, 148, 149,
	150, 528, 151, 152, 0, 154, 155, 153, 156, 0,
	157, 370, 158, 159, 469, 160, 0, 161, 162, 163,
	0, 229, 164, 165, 497, 166, 167, 371, 168, 529,
	231, 169, 0, 170, 171, 173, 530, 172, 504, 0,
	174, 0, 175, 176, 0, 234, 531, 532, 0, 0,
	177, 505, 506, 478, 178, 179, 180, 181, 0, 0,
	182, 183, 184, 498, 0, 185, 186, 187, 239, 533,
	1446, 188, 0, 0, 0, 0, 189, 190, 191, 192,
	456, 484, 473, 474, 471, 472, 460, 0, 0, 0,
	0, 452, 453, 86, 87, 0, 88, 454, 0, 0,
	461, 500, 466, 0, 0, 0, 89, 90, 194, 514,
	196, 515, 91, 516, 517, 0, 92, 200, 201, 93,
	481, 499, 518, 519, 204, 0, 510, 0, 492, 0,
	94, 95, 96, 0, 97, 0, 98, 99, 0, 359,
	100, 101, 0, 493, 495, 0, 494, 496, 102, 103,
	104, 105, 520, 106, 521, 522, 554, 107, 0, 108,
	0, 0, 0, 513, 110, 0, 111, 0, 0, 0,
	465, 112, 113, 501, 479, 0, 0, 114, 115, 523,
	0, 116, 0, 117, 0, 0, 360, 0, 118, 511,
	0, 213, 0, 119, 120, 507, 509, 0, 362, 0,
	121, 0, 361, 122, 524, 525, 526, 0, 491, 0,
	363, 123, 364, 124, 125, 0, 0, 512, 365, 126,
	366, 0, 127, 0, 0, 128, 0, 129, 130, 131,
	132, 133, 367, 134, 135, 138, 136, 455, 137, 480,
	508, 139, 527, 140, 141, 0, 0, 0, 0, 0,
	142, 223, 368, 143, 369, 502, 144, 145, 0, 503,
	146, 226, 147, 0, 148, 149, 150, 528, 151, 152,
	0, 154, 155, 153, 156, 0, 157, 370, 158, 159,
	469, 160, 0, 161, 162, 163, 0, 229, 164, 165,
	497, 166, 167, 371, 168, 529, 231, 169, 0, 170,
	171, 173, 530, 172, 504, 0, 174, 0, 175, 176,
	0, 234, 531, 532, 0, 0, 177, 505, 506, 478,
	178, 179, 180, 181, 0, 0, 182, 183, 184, 498,
	0, 185, 186, 187, 239, 533, 0, 188, 0, 0,
	0, 0, 189, 190, 191, 192, 456, 484, 473, 474,
	471, 472, 460, 0, 0, 0, 0, 452, 453, 86,
	87, 0, 88, 454, 0, 0, 461, 500, 466, 0,
	0, 0, 89, 90, 194, 514, 196, 515, 91, 516,
	517, 0, 92, 200, 201, 93, 481, 499, 518, 519,
	204, 0, 510, 0, 492, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 359, 100, 101, 0, 493,
	495, 0, 494, 496, 102, 103, 104, 105, 520, 106,
	521, 522, 0, 107, 0, 108, 0, 0, 0, 513,
	110, 0, 111, 0, 0, 0, 465, 112, 113, 501,
	479, 0, 0, 114, 115, 523, 0, 116, 0, 117,
	0, 1136, 360, 0, 118, 511, 0, 213, 0, 119,
	120, 507, 509, 0, 362, 0, 121, 0, 361, 122,
	524, 525, 526, 0, 491, 0, 363, 123, 364, 124,
	125, 0, 0, 512, 365, 126, 366, 0, 127, 0,
	0, 128, 0, 129, 130, 131, 132, 133, 367, 134,
	135, 138, 136, 455, 137, 480, 508, 139, 527, 140,
	141, 0, 0, 0, 0, 0, 142, 223, 368, 143,
	369, 502, 144, 145, 0, 503, 146, 226, 147, 0,
	148, 149, 150, 528, 151, 152, 0, 154, 155, 153,
	156, 0, 157, 370, 158, 159, 469, 160, 0, 161,
	162, 163, 0, 229, 164, 165, 497, 166, 167, 371,
	168, 529, 231, 169, 0, 170, 171, 173, 530, 172,
	504, 0, 174, 0, 175, 176, 0, 234, 531, 532,
	0, 0, 177, 505, 506, 478, 178, 179, 180, 181,
	0, 0, 182, 183, 184, 498, 0, 185, 186, 187,
	239, 533, 0, 188, 0, 0, 0, 0, 189, 190,
	191, 192, 456, 484, 473, 474, 471, 472, 460, 0,
	0, 0, 0, 452, 453, 86, 87, 792, 88, 454,
	0, 0, 461, 500, 466, 0, 0, 0, 89, 90,
	194, 514, 196, 515, 91, 516, 517, 0, 92, 200,
	201, 93, 481, 499, 518, 519, 204, 0, 510, 0,
	492, 0, 94, 95, 96, 0, 97, 0, 98, 99,
	0, 359, 100, 101, 0, 493, 495, 0, 494, 496,
	102, 103, 104, 105, 520, 106, 521, 522, 0, 107,
	0, 108, 0, 0, 0, 513, 110, 0, 111, 0,
	0, 0, 465, 112, 113, 501, 479, 0, 0, 114,
	115, 523, 0, 116, 0, 117, 0, 0, 360, 0,
	118, 511, 0, 213, 0, 119, 120, 507, 509, 0,
	362, 0, 121, 0, 361, 122, 524, 525, 526, 0,
	491, 0, 363, 123, 364, 124, 125, 0, 0, 512,
	365, 126, 366, 0, 127, 0, 0, 128, 0, 129,
	130, 131, 132, 133, 367, 134, 135, 138, 136, 455,
	137, 480, 508, 139, 527, 140, 141, 0, 0, 0,
	0, 0, 142, 223, 368, 143, 369, 502, 144, 145,
	0, 503, 146, 226, 147, 0, 148, 149, 150, 528,
	151, 152, 0, 154, 155, 153, 156, 0, 157, 370,
	158, 159, 469, 160, 0, 161, 162, 163, 0, 229,
	164, 165, 497, 166, 167, 371, 168, 529, 231, 169,
	0, 170, 171, 173, 530, 172, 504, 0, 174, 0,
	175, 176, 0, 234, 531, 532, 0, 0, 177, 505,
	506, 478, 178, 179, 180, 181, 0, 0, 182, 183,
	184, 498, 0, 185, 186, 187, 239, 533, 0, 188,
	0, 0, 0, 0, 189, 190, 191, 192, 456, 484,
	473, 474, 471, 472, 460, 0, 0, 0, 0, 452,
	453, 86, 87, 0, 88, 454, 0, 0, 461, 500,
	466, 0, 0, 0, 89, 90, 194, 514, 196, 515,
	91, 516, 517, 0, 92, 200, 201, 93, 481, 499,
	518, 519, 204, 0, 510, 0, 492, 0, 94, 95,
	96, 0, 97, 0, 98, 99, 0, 359, 100, 1776,
	0, 493, 495, 0, 494, 496, 102, 103, 104, 105,
	520, 106, 521, 522, 0, 107, 0, 108, 0, 0,
	0, 513, 110, 0, 111, 0, 0, 0, 465, 112,
	113, 501, 479, 0, 0, 114, 115, 523, 0, 116,
	0, 117, 0, 0, 360, 0, 118, 511, 0, 213,
	0, 119, 120, 507, 509, 0, 362, 0, 121, 0,
	361, 122, 524, 525, 526, 0, 491, 0, 363, 123,
	364, 124, 125, 0, 0, 512, 365, 126, 366, 0,
	127, 0, 0, 128, 0, 129, 130, 131, 132, 133,
	367, 134, 135, 138, 136, 455, 137, 480, 508, 139,
	527, 140, 141, 0, 0, 0, 0, 0, 142, 223,
	368, 143, 369, 502, 144, 145, 0, 503, 146, 226,
	147, 0, 148, 149, 150, 528, 151, 152, 0, 154,
	155, 153, 156, 0, 157, 370, 158, 159, 469, 160,
	0, 161, 162, 163, 0, 229, 164, 165, 497, 166,
	167, 371, 168, 529, 231, 169, 0, 170, 171, 173,
	530, 172, 504, 0, 174, 0, 175, 176, 0, 234,
	531, 532, 0, 0, 177, 505, 506, 478, 178, 179,
	1775, 181, 0, 0, 182, 183, 184, 498, 0, 185,
	186, 187, 239, 533, 0, 188, 0, 0, 0, 0,
	189, 190, 191, 192, 456, 484, 473, 474, 471, 472,
	460, 0, 0, 0, 0, 452, 453, 86, 87, 0,
	88, 454, 0, 0, 461, 500, 466, 0, 0, 0,
	89, 90, 1774, 514, 196, 515, 91, 516, 517, 0,
	92, 200, 201, 93, 481, 499, 518, 519, 204, 0,
	510, 0, 492, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 359, 100, 1776, 0, 493, 495, 0,
	494, 496, 102, 103, 104, 105, 520, 106, 521, 522,
	0, 107, 0, 108, 0, 0, 0, 513, 110, 0,
	111, 0, 0, 0, 465, 112, 113, 501, 479, 0,
	0, 114, 115, 523, 0, 116, 0, 117, 0, 0,
	360, 0, 118, 511, 0, 213, 0, 119, 120, 507,
	509, 0, 362, 0, 121, 0, 361, 122, 524, 525,
	526, 0, 491, 0, 363, 123, 364, 124, 125, 0,
	0, 512, 365, 126, 366, 0, 127, 0, 0, 128,
	0, 129, 130, 131, 132, 133, 367, 134, 135, 138,
	136, 455, 137, 480, 508, 139, 527, 140, 141, 0,
	0, 0, 0, 0, 142, 223, 368, 143, 369, 502,
	144, 145, 0, 503, 146, 226, 147, 0, 148, 149,
	150, 528, 151, 152, 0, 154, 155, 153, 156, 0,
	157, 370, 158, 159, 469, 160, 0, 161, 162, 163,
	0, 229, 164, 165, 497, 166, 167, 371, 168, 529,
	231, 169, 0, 170, 171, 173, 530, 172, 504, 0,
	174, 0, 175, 176, 0, 234, 531, 532, 0, 0,
	177, 505, 506, 478, 178, 179, 1775, 181, 0, 0,
	182, 183, 184, 498, 0, 185, 186, 187, 239, 533,
	0, 188, 0, 0, 0, 0, 189, 190, 191, 192,
	456, 484, 473, 474, 471, 472, 460, 0, 0, 0,
	0, 452, 453, 86, 87, 0, 88, 454, 0, 0,
	461, 500, 466, 0, 0, 0, 89, 90, 194, 514,
	196, 515, 91, 516, 517, 0, 92, 200, 201, 93,
	481, 499, 518, 519, 204, 0, 510, 0, 492, 0,
	94, 95, 96, 0, 97, 0, 98, 99, 0, 359,
	100, 101, 0, 493, 495, 0, 494, 496, 102, 103,
	104, 105, 520, 106, 521, 522, 0, 107, 0, 108,
	0, 0, 0, 513, 110, 0, 111, 0, 0, 0,
	465, 112, 113, 501, 479, 0, 0, 114, 115, 523,
	0, 116, 0, 117, 0, 0, 360, 0, 118, 511,
	0, 213, 0, 119, 120, 507, 509, 0, 362, 0,
	121, 0, 361, 122, 524, 525, 526, 0, 491, 0,
	363, 123, 364, 124, 125, 0, 0, 512, 365, 126,
	366, 0, 127, 0, 0, 128, 0, 129, 130, 131,
	132, 133, 367, 134, 135, 138, 136, 455, 137, 480,
	508, 139, 527, 140, 141, 0, 0, 0, 0, 0,
	142, 223, 368, 143, 369, 502, 144, 145, 0, 503,
	146, 226, 147, 0, 148, 149, 150, 528, 151, 152,
	0, 154, 155, 153, 156, 0, 157, 370, 158, 159,
	469, 160, 0, 161, 162, 163, 0, 229, 164, 165,
	497, 166, 167, 371, 168, 529, 231, 169, 0, 170,
	171, 173, 530, 172, 504, 0, 174, 0, 175, 176,
	0, 234, 531, 532, 0, 0, 177, 505, 506, 478,
	178, 179, 180, 181, 0, 0, 182, 183, 184, 498,
	0, 185, 186, 187, 239, 533, 0, 188, 0, 0,
	0, 0, 189, 190, 191, 192, 456, 484, 473, 474,
	471, 472, 460, 0, 0, 0, 0, 452, 453, 86,
	87, 0, 88, 454, 0, 0, 461, 500, 466, 0,
	0, 0, 89, 90, 194, 514, 196, 515, 91, 516,
	517, 0, 92, 200, 201, 93, 481, 499, 518, 519,
	204, 0, 510, 0, 492, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 359, 100, 101, 0, 493,
	495, 0, 494, 496, 102, 103, 104, 105, 520, 106,
	521, 522, 0, 107, 0, 108, 0, 0, 0, 513,
	110, 0, 111, 0, 0, 0, 465, 112, 113, 501,
	479, 0, 0, 114, 115, 523, 0, 116, 0, 117,
	0, 0, 360, 0, 118, 511, 0, 213, 0, 119,
	120, 507, 509, 0, 362, 0, 121, 0, 361, 122,
	524, 525, 526, 0, 491, 0, 363, 123, 364, 124,
	125, 0, 0, 512, 365, 126, 366, 0, 127, 0,
	0, 128, 0, 129, 130, 131, 132, 133, 367, 134,
	135, 138, 136, 0, 137, 480, 508, 139, 527, 140,
	141, 0, 0, 0, 0, 0, 142, 223, 368, 143,
	369, 502, 144, 145, 0, 503, 146, 226, 147, 0,
	148, 149, 150, 528, 151, 152, 0, 154, 155, 153,
	156, 0, 157, 370, 158, 159, 1126, 160, 0, 161,
	162, 163, 0, 229, 164, 165, 497, 166, 167, 371,
	168, 529, 231, 169, 0, 170, 171, 173, 530, 172,
	504, 0, 174, 0, 175, 176, 0, 234, 531, 532,
	0, 0, 177, 505, 506, 478, 178, 179, 180, 181,
	0, 0, 182, 183, 184, 498, 0, 185, 186, 187,
	239, 533, 0, 188, 0, 0, 0, 0, 189, 190,
	191, 192, 0, 484, 473, 474, 471, 472, 460, 0,
	0, 0, 0, 1122, 1123, 86, 87, 0, 88, 1124,
	0, 0, 1125, 500, 466, 0, 0, 0, 89, 90,
	0, 514, 196, 515, 91, 516, 517, 0, 92, 200,
	201, 93, 481, 499, 518, 519, 204, 0, 510, 0,
	492, 0, 94, 95, 96, 0, 97, 0, 98, 99,
	0, 359, 100, 1776, 0, 493, 495, 0, 494, 496,
	102, 103, 104, 105, 520, 106, 521, 522, 0, 107,
	0, 108, 0, 0, 0, 513, 110, 0, 111, 0,
	0, 0, 465, 112, 113, 501, 479, 0, 0, 114,
	115, 523, 0, 116, 0, 117, 0, 0, 360, 0,
	118, 511, 0, 213, 0, 119, 120, 507, 509, 0,
	0, 0, 121, 0, 361, 122, 524, 525, 526, 0,
	491, 0, 0, 123, 364, 124, 125, 0, 0, 512,
	365, 126, 0, 0, 127, 0, 0, 128, 0, 129,
	130, 131, 132, 133, 367, 134, 135, 138, 136, 455,
	137, 480, 508, 139, 527, 140, 141, 0, 0, 0,
	0, 0, 142, 223, 368, 143, 369, 502, 144, 145,
	0, 503, 146, 226, 147, 0, 148, 149, 150, 528,
	151, 152, 0, 154, 155, 153, 156, 0, 157, 370,
	158, 159, 469, 160, 0, 161, 162, 163, 0, 229,
	164, 165, 497, 166, 167, 0, 168, 529, 231, 169,
	0, 170, 171, 173, 530, 172, 504, 0, 174, 0,
	175, 176, 0, 234, 531, 532, 0, 0, 177, 505,
	506, 478, 178, 179, 1775, 181, 0, 0, 182, 183,
	184, 498, 0, 185, 186, 187, 239, 533, 0, 188,
	0, 0, 0, 0, 189, 190, 191, 192, 0, 484,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 452,
	453, 86, 87, 0, 88, 454, 0, 0, 461, 500,
	0, 0, 0, 0, 89, 90, 194, 195, 196, 197,
	91, 198, 199, 0, 92, 200, 201, 93, 0, 499,
	202, 203, 204, 0, 510, 0, 492, 0, 94, 95,
	96, 0, 97, 0, 98, 99, 0, 359, 100, 101,
	0, 493, 495, 0, 494, 496, 102, 103, 104, 105,
	206, 106, 207, 208, 0, 107, 0, 108, 0, 0,
	0, 109, 110, 0, 111, 0, 0, 0, 209, 112,
	113, 501, 0, 0, 0, 114, 115, 211, 0, 116,
	0, 117, 0, 0, 360, 0, 118, 511, 0, 213,
	0, 119, 120, 507, 509, 0, 362, 0, 121, 0,
	361, 122, 216, 217, 218, 0, 219, 0, 363, 123,
	364, 124, 125, 0, 0, 512, 365, 126, 366, 0,
	127, 0, 0, 128, 0, 129, 130, 131, 132, 133,
	367, 134, 135, 138, 136, 0, 137, 0, 508, 139,
	222, 140, 141, 0, 0, 0, 0, 0, 142, 223,
	368, 143, 369, 502, 144, 145, 0, 503, 146, 226,
	147, 0, 148, 149, 150, 227, 151, 152, 0, 154,
	155, 153, 156, 0, 157, 370, 158, 159, 228, 160,
	0, 161, 162, 163, 0, 229, 164, 165, 497, 166,
	167, 371, 168, 230, 231, 169, 0, 170, 171, 173,
	232, 172, 504, 0, 174, 0, 175, 176, 0, 234,
	235, 236, 0, 0, 177, 505, 506, 0, 178, 179,
	180, 181, 0, 0, 182, 183, 184, 498, 0, 185,
	186, 187, 239, 240, 0, 188, 0, 0, 0, 0,
	189, 190, 191, 192, 0, 353, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 87, 0,
	88, 0, 0, 0, 1555, 193, 0, 0, 0, 0,
	89, 90, 194, 195, 196, 197, 91, 198, 199, 0,
	92, 200, 201, 93, 0, 0, 202, 203, 204, 0,
	205, 0, 358, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 359, 100, 101, 0, 0, 0, 0,
	0, 0, 102, 103, 104, 105, 206, 106, 207, 208,
	0, 107, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 209, 112, 113, 210, 0, 0,
	0, 114, 115, 211, 0, 116, 0, 117, 0, 0,
	360, 0, 118, 212, 0, 213, 0, 119, 120, 214,
	215, 0, 362, 0, 121, 0, 361, 122, 216, 217,
	218, 0, 219, 0, 363, 123, 364, 124, 125, 0,
	0, 220, 365, 126, 366, 0, 127, 0, 0, 128,
	0, 129, 130, 131, 132, 133, 367, 134, 135, 138,
	136, 0, 137, 0, 221, 139, 222, 140, 141, 0,
	0, 0, 0, 0, 142, 223, 368, 143, 369, 224,
	144, 145, 0, 225, 146, 226, 147, 0, 148, 149,
	150, 227, 151, 152, 0, 154, 155, 153, 156, 0,
	157, 370, 158, 159, 228, 160, 0, 161, 162, 163,
	56, 229, 164, 165, 0, 166, 167, 371, 168, 230,
	231, 169, 0, 170, 171, 173, 232, 172, 233, 0,
	174, 58, 175, 176, 0, 234, 235, 236, 0, 0,
	177, 237, 238, 0, 178, 179, 180, 181, 0, 0,
	182, 183, 184, 0, 0, 185, 186, 187, 357, 240,
	0, 188, 0, 0, 0, 54, 189, 190, 191, 192,
	0, 55, 353, 663, 0, 664, 659, 654, 0, 0,
	0, 0, 0, 0, 86, 87, 0, 88, 0, 0,
	53, 0, 193, 0, 0, 0, 0, 89, 90, 194,
	195, 196, 197, 91, 198, 199, 0, 92, 200, 201,
	93, 0, 0, 202, 203, 204, 0, 205, 0, 358,
	0, 94, 95, 96, 0, 97, 0, 98, 99, 0,
	359, 100, 101, 0, 0, 0, 0, 0, 0, 102,
	103, 104, 105, 206, 106, 207, 208, 667, 107, 0,
	108, 0, 0, 0, 109, 110, 0, 111, 0, 0,
	0, 209, 112, 113, 210, 656, 0, 0, 114, 115,
	211, 0, 116, 0, 117, 0, 0, 360, 0, 118,
	212, 0, 213, 0, 119, 120, 214, 215, 0, 362,
	0, 121, 0, 361, 122, 216, 217, 218, 0, 219,
	0, 363, 123, 364, 124, 125, 0, 0, 220, 365,
	126, 366, 0, 127, 0, 0, 128, 0, 129, 130,
	131, 132, 133, 367, 134, 135, 138, 136, 0, 137,
	0, 221, 139, 222, 140, 141, 0, 657, 0, 0,
	0, 142, 223, 368, 143, 369, 224, 144, 145, 0,
	225, 146, 226, 147, 0, 148, 149, 150, 227, 151,
	152, 0, 154, 155, 153, 156, 0, 157, 370, 158,
	159, 228, 160, 0, 161, 162, 163, 0, 229, 164,
	165, 0, 166, 167, 371, 168, 230, 231, 169, 0,
	170, 171, 173, 232, 172, 233, 0, 174, 0, 175,
	176, 0, 234, 235, 236, 0, 0, 177, 237, 238,
	655, 178, 179, 180, 181, 0, 0, 182, 183, 184,
	0, 0, 185, 186, 187, 239, 240, 0, 188, 0,
	0, 0, 0, 189, 190, 191, 192, 0, 353, 663,
	0, 664, 659, 654, 0, 0, 0, 0, 665, 660,
	86, 87, 0, 88, 0, 0, 0, 0, 193, 0,
	0, 0, 0, 89, 90, 194, 195, 196, 197, 91,
	198, 199, 0, 92, 200, 201, 93, 0, 0, 202,
	203, 204, 0, 205, 0, 358, 0, 94, 95, 96,
	0, 97, 0, 98, 99, 0, 359, 100, 101, 0,
	0, 0, 0, 0, 0, 102, 103, 104, 105, 206,
	106, 207, 208, 650, 107, 0, 108, 0, 0, 0,
	109, 110, 0, 111, 0, 0, 0, 209, 112, 113,
	210, 656, 0, 0, 114, 115, 211, 0, 116, 0,
	117, 0, 0, 360, 0, 118, 212, 0, 213, 0,
	119, 120, 214, 215, 0, 362, 0, 121, 0, 361,
	122, 216, 217, 218, 0, 219, 0, 363, 123, 364,
	124, 125, 0, 0, 220, 365, 126, 366, 0, 127,
	0, 0, 128, 0, 129, 130, 131, 132, 133, 367,
	134, 135, 138, 136, 0, 137, 0, 221, 139, 222,
	140, 141, 0, 657, 0, 0, 0, 142, 223, 368,
	143, 369, 224, 144, 145, 0, 225, 146, 226, 147,
	0, 148, 149, 150, 227, 151, 152, 0, 154, 155,
	153, 156, 0, 157, 370, 158, 159, 228, 160, 0,
	161, 162, 163, 0, 229, 164, 165, 0, 166, 167,
	371, 168, 230, 231, 169, 0, 170, 171, 173, 232,
	172, 233, 0, 174, 0, 175, 176, 0, 234, 235,
	236, 0, 0, 177, 237, 238, 655, 178, 179, 180,
	181, 0, 0, 182, 183, 184, 0, 0, 185, 186,
	187, 239, 240, 0, 188, 0, 0, 0, 0, 189,
	190, 191, 192, 0, 353, 663, 0, 664, 659, 654,
	0, 0, 0, 0, 665, 660, 86, 87, 0, 88,
	0, 0, 0, 0, 193, 0, 0, 0, 0, 89,
	90, 194, 195, 196, 197, 91, 198, 199, 0, 92,
	200, 201, 93, 0, 0, 202, 203, 204, 0, 205,
	0, 358, 0, 94, 95, 96, 0, 97, 0, 98,
	99, 0, 359, 100, 101, 0, 0, 0, 0, 0,
	0, 102, 103, 104, 105, 206, 106, 207, 208, 0,
	107, 0, 108, 0, 0, 0, 109, 110, 0, 111,
	0, 0, 0, 209, 112, 113, 210, 656, 0, 0,
	114, 115, 211, 0, 116, 0, 117, 0, 0, 360,
	0, 118, 212, 0, 213, 0, 119, 120, 214, 215,
	0, 362, 0, 121, 0, 361, 122, 216, 217, 218,
	0, 219, 0, 363, 123, 364, 124, 125, 0, 0,
	220, 365, 126, 366, 0, 127, 0, 0, 128, 0,
	129, 130, 131, 132, 133, 367, 134, 135, 138, 136,
	0, 137, 0, 221, 139, 222, 140, 141, 0, 657,
	0, 0, 0, 142, 223, 368, 143, 369, 224, 144,
	145, 0, 225, 146, 226, 147, 0, 148, 149, 150,
	227, 151, 152, 0, 154, 155, 153, 156, 0, 157,
	370, 158, 159, 228, 160, 0, 161, 162, 163, 0,
	229, 164, 165, 0, 166, 167, 371, 168, 230, 231,
	169, 0, 170, 171, 173, 232, 172, 233, 0, 174,
	0, 175, 176, 0, 234, 235, 236, 0, 0, 177,
	237, 238, 655, 178, 179, 180, 181, 0, 0, 182,
	183, 184, 0, 0, 185, 186, 187, 239, 240, 83,
	188, 0, 0, 0, 0, 189, 190, 191, 192, 0,
	0, 86, 87, 0, 88, 0, 0, 0, 0, 193,
	665, 660, 0, 0, 89, 90, 194, 195, 196, 197,
	91, 198, 199, 0, 92, 200, 201, 93, 0, 0,
	202, 203, 204, 0, 205, 0, 0, 0, 94, 95,
	96, 0, 97, 0, 98, 99, 0, 0, 100, 101,
	0, 0, 0, 0, 0, 0, 102, 103, 104, 105,
	206, 106, 207, 208, 0, 107, 0, 108, 0, 0,
	0, 109, 110, 0, 111, 0, 0, 0, 209, 112,
	113, 210, 0, 0, 0, 114, 115, 211, 0, 116,
	0, 117, 0, 0, 0, 0, 118, 212, 0, 213,
	0, 119, 120, 214, 215, 0, 0, 0, 121, 0,
	0, 122, 216, 217, 218, 0, 219, 0, 0, 123,
	0, 124, 125, 0, 0, 220, 0, 126, 0, 0,
	127, 0, 0, 128, 0, 129, 130, 131, 132, 133,
	0, 134, 135, 138, 136, 0, 137, 0, 221, 139,
	222, 140, 141, 0, 0, 326, 0, 0, 142, 223,
	0, 143, 0, 224, 144, 145, 0, 225, 146, 226,
	147, 0, 148, 149, 150, 227, 151, 152, 0, 154,
	155, 153, 156, 0, 157, 0, 158, 159, 228, 160,
	0, 161, 162, 163, 56, 229, 164, 165, 0, 166,
	167, 0, 168, 230, 231, 169, 0, 170, 171, 173,
	232, 172, 233, 0, 174, 58, 175, 176, 0, 234,
	235, 236, 0, 0, 177, 237, 238, 0, 178, 179,
	180, 181, 0, 0, 182, 183, 184, 0, 0, 185,
	186, 187, 357, 240, 0, 188, 0, 0, 0, 54,
	189, 190, 191, 192, 0, 55, 83, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 87,
	0, 88, 0, 0, 1031, 0, 193, 0, 0, 0,
	0, 89, 90, 194, 195, 196, 197, 91, 198, 199,
	0, 92, 200, 201, 93, 0, 0, 202, 203, 204,
	0, 205, 0, 0, 0, 94, 95, 96, 0, 97,
	0, 98, 99, 0, 0, 100, 101, 0, 0, 0,
	0, 0, 0, 102, 103, 104, 105, 206, 106, 207,
	208, 0, 107, 0, 108, 0, 0, 0, 109, 110,
	0, 111, 0, 0, 0, 209, 112, 113, 210, 0,
	0, 0, 114, 115, 211, 0, 116, 0, 117, 0,
	0, 0, 0, 118, 212, 0, 213, 0, 119, 120,
	214, 215, 0, 0, 0, 121, 0, 0, 122, 216,
	217, 218, 0, 219, 0, 0, 123, 0, 124, 125,
	0, 0, 220, 0, 126, 0, 0, 127, 0, 0,
	128, 0, 129, 130, 131, 132, 133, 0, 134, 135,
	138, 136, 0, 137, 0, 221, 139, 222, 140, 141,
	0, 0, 0, 0, 0, 142, 223, 0, 143, 0,
	224, 144, 145, 0, 225, 146, 226, 147, 0, 148,
	149, 150, 227, 151, 152, 0, 154, 155, 153, 156,
	0, 157, 0, 158, 159, 228, 160, 0, 161, 162,
	163, 56, 229, 164, 165, 0, 166, 167, 0, 168,
	230, 231, 169, 0, 170, 171, 173, 232, 172, 233,
	0, 174, 58, 175, 176, 0, 234, 235, 236, 0,
	0, 177, 237, 238, 0, 178, 179, 180, 181, 0,
	0, 182, 183, 184, 0, 0, 185, 186, 187, 357,
	240, 0, 188, 0, 0, 0, 54, 189, 190, 191,
	192, 0, 55, 83, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 87, 0, 88, 0,
	0, 53, 0, 193, 0, 1246, 0, 0, 89, 90,
	194, 195, 196, 197, 91, 198, 199, 0, 92, 200,
	201, 93, 0, 0, 202, 203, 204, 0, 205, 0,
	0, 0, 94, 95, 96, 0, 97, 0, 98, 99,
	0, 0, 100, 101, 0, 0, 0, 0, 0, 0,
	102, 103, 104, 105, 206, 106, 207, 208, 0, 107,
	0, 108, 0, 0, 0, 109, 110, 0, 111, 0,
	0, 0, 209, 112, 113, 210, 0, 0, 0, 114,
	115, 211, 0, 116, 0, 117, 0, 0, 0, 0,
	118, 212, 0, 213, 0, 119, 120, 214, 215, 0,
	0, 0, 121, 0, 0, 122, 216, 217, 218, 0,
	219, 0, 0, 123, 0, 124, 125, 0, 0, 220,
	0, 126, 0, 0, 127, 0, 0, 128, 0, 129,
	130, 131, 132, 133, 0, 134, 135, 138, 136, 0,
	137, 0, 221, 139, 222, 140, 141, 0, 0, 0,
	0, 0, 142, 223, 0, 143, 0, 224, 144, 145,
	0, 225, 146, 226, 147, 0, 148, 149, 150, 227,
	151, 152, 0, 154, 155, 153, 156, 0, 157, 0,
	158, 159, 228, 160, 0, 161, 162, 163, 0, 229,
	164, 165, 0, 166, 167, 0, 168, 230, 231, 169,
	0, 170, 171, 173, 232, 172, 233, 0, 174, 0,
	175, 176, 0, 234, 235, 236, 0, 0, 177, 237,
	238, 0, 178, 179, 180, 181, 0, 0, 182, 183,
	184, 0, 0, 185, 186, 187, 239, 240, 0, 188,
	0, 0, 0, 0, 189, 190, 191, 192, 83, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 87, 0, 88, 0, 0, 0, 0, 193, 442,
	0, 0, 0, 89, 90, 194, 195, 196, 197, 91,
	198, 199, 0, 92, 200, 201, 93, 0, 0, 202,
	203, 204, 0, 205, 0, 0, 0, 94, 95, 96,
	0, 97, 0, 98, 99, 0, 0, 100, 101, 0,
	0, 0, 0, 0, 0, 102, 103, 104, 105, 206,
	106, 207, 208, 0, 107, 0, 108, 0, 0, 0,
	109, 110, 0, 111, 0, 0, 0, 209, 112, 113,
	210, 0, 0, 0, 114, 115, 211, 0, 116, 0,
	117, 0, 0, 0, 0, 118, 212, 0, 213, 0,
	119, 120, 214, 215, 0, 0, 0, 121, 0, 0,
	122, 216, 217, 218, 0, 219, 0, 0, 123, 0,
	124, 125, 0, 0, 220, 0, 126, 0, 0, 127,
	0, 0, 128, 0, 129, 130, 131, 132, 133, 0,
	134, 135, 138, 136, 0, 137, 0, 221, 139, 222,
	140, 141, 0, 0, 326, 0, 0, 142, 223, 0,
	143, 0, 224, 144, 145, 0, 225, 146, 226, 147,
	0, 148, 149, 150, 227, 151, 152, 0, 154, 155,
	153, 156, 0, 157, 0, 158, 159, 228, 160, 0,
	161, 162, 163, 0, 229, 164, 165, 0, 166, 167,
	0, 168, 230, 231, 169, 0, 170, 171, 173, 232,
	172, 233, 0, 174, 0, 175, 176, 0, 234, 235,
	236, 0, 0, 177, 237, 238, 0, 178, 179, 180,
	181, 0, 0, 182, 183, 184, 0, 0, 185, 186,
	187, 239, 240, 0, 188, 0, 0, 0, 0, 189,
	190, 191, 192, 0, 83, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 87, 0, 88,
	0, 0, 0, 1031, 193, 0, 0, 0, 0, 89,
	90, 194, 195, 196, 197, 91, 198, 199, 0, 92,
	200, 201, 93, 0, 0, 202, 203, 204, 0, 205,
	0, 0, 0, 94, 95, 96, 0, 97, 0, 98,
	99, 0, 0, 100, 101, 0, 0, 0, 0, 0,
	0, 102, 103, 104, 105, 206, 106, 207, 208, 0,
	107, 0, 108, 0, 0, 0, 109, 110, 0, 111,
	0, 0, 0, 209, 112, 113, 210, 0, 0, 0,
	114, 115, 211, 0, 116, 0, 117, 0, 0, 0,
	0, 118, 212, 0, 213, 0, 119, 120, 214, 215,
	0, 0, 0, 121, 0, 0, 122, 216, 217, 218,
	0, 219, 0, 0, 123, 0, 124, 125, 0, 0,
	220, 0, 126, 0, 0, 127, 0, 0, 128, 0,
	129, 130, 131, 132, 133, 0, 134, 135, 138, 136,
	0, 137, 0, 221, 139, 222, 140, 141, 0, 0,
	0, 0, 0, 142, 223, 0, 143, 0, 224, 144,
	145, 0, 225, 146, 226, 147, 0, 148, 149, 150,
	227, 151, 152, 0, 154, 155, 153, 156, 0, 157,
	0, 158, 159, 228, 160, 0, 161, 162, 163, 0,
	229, 164, 165, 0, 166, 167, 0, 168, 230, 231,
	169, 0, 170, 171, 173, 232, 172, 233, 0, 174,
	0, 175, 176, 0, 234, 235, 236, 0, 0, 177,
	237, 238, 0, 178, 179, 180, 181, 0, 0, 182,
	183, 184, 0, 0, 185, 186, 187, 239, 240, 0,
	188, 0, 0, 0, 0, 189, 190, 191, 192, 0,
	83, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 87, 0, 88, 0, 0, 0, 942,
	193, 0, 0, 0, 0, 89, 90, 194, 195, 196,
	197, 91, 198, 199, 0, 92, 200, 201, 93, 0,
	0, 202, 203, 204, 0, 205, 0, 0, 0, 94,
	95, 96, 0, 97, 0, 98, 99, 0, 0, 100,
	101, 0, 0, 0, 0, 0, 0, 102, 103, 104,
	105, 206, 106, 207, 208, 0, 107, 0, 108, 0,
	0, 0, 109, 110, 0, 111, 0, 0, 0, 209,
	112, 113, 210, 0, 0, 0, 114, 115, 211, 0,
	116, 0, 117, 0, 0, 0, 0, 118, 212, 0,
	213, 0, 119, 120, 214, 215, 0, 0, 0, 121,
	0, 0, 122, 216, 217, 218, 0, 219, 0, 0,
	123, 0, 124, 125, 0, 0, 220, 0, 126, 0,
	0, 127, 0, 0, 128, 0, 129, 130, 131, 132,
	133, 0, 134, 135, 138, 136, 0, 137, 0, 221,
	139, 222, 140, 141, 0, 0, 0, 0, 0, 142,
	223, 0, 143, 0, 224, 144, 145, 0, 225, 146,
	226, 147, 0, 148, 149, 150, 227, 151, 152, 0,
	154, 155, 153, 156, 0, 157, 0, 158, 159, 228,
	160, 0, 161, 162, 163, 0, 229, 164, 165, 0,
	166, 167, 0, 168, 230, 231, 169, 0, 170, 171,
	173, 232, 172, 233, 0, 174, 0, 175, 176, 0,
	234, 235, 236, 0, 0, 177, 237, 238, 0, 178,
	179, 180, 181, 0, 0, 182, 183, 184, 0, 0,
	185, 186, 187, 239, 240, 0, 188, 0, 0, 0,
	0, 189, 190, 191, 192, 0, 83, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 87,
	0, 88, 0, 0, 0, 1456, 193, 0, 0, 0,
	0, 89, 90, 194, 195, 196, 197, 91, 198, 199,
	0, 92, 200, 201, 93, 0, 0, 202, 203, 204,
	0, 205, 0, 0, 0, 94, 95, 96, 0, 97,
	0, 98, 99, 0, 0, 100, 101, 0, 0, 0,
	0, 0, 0, 102, 103, 104, 105, 206, 106, 207,
	208, 0, 107, 0, 108, 0, 0, 0, 109, 110,
	0, 111, 0, 0, 0, 209, 112, 113, 210, 0,
	0, 0, 114, 115, 211, 0, 116, 0, 117, 0,
	0, 0, 0, 118, 212, 0, 213, 0, 119, 120,
	214, 215, 0, 0, 0, 121, 0, 0, 122, 216,
	217, 218, 0, 219, 0, 0, 123, 0, 124, 125,
	0, 0, 220, 0, 126, 0, 0, 127, 0, 0,
	128, 0, 129, 130, 131, 132, 133, 0, 134, 135,
	138, 136, 0, 137, 0, 221, 139, 222, 140, 141,
	0, 0, 0, 0, 0, 142, 223, 0, 143, 0,
	224, 144, 145, 0, 225, 146, 226, 147, 0, 148,
	149, 150, 227, 151, 152, 0, 154, 155, 153, 156,
	0, 157, 0, 158, 159, 228, 160, 0, 161, 162,
	163, 0, 229, 164, 165, 0, 166, 167, 0, 168,
	230, 231, 169, 0, 170, 171, 173, 232, 172, 233,
	0, 174, 0, 175, 176, 0, 234, 235, 236, 0,
	0, 177, 237, 238, 0, 178, 179, 180, 181, 0,
	0, 182, 183, 184, 0, 0, 185, 186, 187, 239,
	240, 0, 188, 0, 0, 0, 0, 189, 190, 191,
	192, 0, 83, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 87, 0, 88, 0, 0,
	0, 544, 193, 0, 0, 0, 0, 89, 90, 194,
	195, 196, 197, 91, 198, 199, 0, 92, 200, 201,
	93, 0, 0, 202, 203, 204, 0, 205, 0, 0,
	0, 94, 95, 96, 0, 97, 0, 98, 99, 0,
	0, 100, 101, 0, 0, 0, 0, 0, 0, 102,
	103, 634, 105, 206, 106, 207, 208, 0, 107, 0,
	108, 0, 0, 0, 109, 110, 0, 111, 0, 0,
	0, 209, 112, 113, 210, 0, 0, 0, 114, 115,
	211, 0, 116, 0, 117, 0, 0, 0, 0, 118,
	212, 0, 213, 0, 119, 120, 214, 215, 0, 0,
	0, 121, 0, 0, 122, 216, 217, 218, 0, 219,
	0, 0, 123, 0, 124, 125, 0, 0, 220, 0,
	126, 0, 0, 127, 0, 0, 128, 0, 129, 130,
	131, 132, 133, 0, 134, 135, 138, 136, 0, 137,
	0, 221, 139, 222, 140, 141, 0, 0, 0, 0,
	0, 142, 223, 0, 143, 0, 224, 144, 145, 0,
	225, 146, 226, 147, 0, 148, 149, 150, 227, 151,
	152, 0, 154, 155, 153, 156, 0, 157, 0, 158,
	159, 228, 160, 0, 161, 162, 163, 0, 229, 164,
	165, 0, 166, 167, 0, 168, 230, 231, 169, 0,
	170, 171, 173, 232, 172, 233, 0, 174, 633, 175,
	176, 0, 234, 235, 236, 0, 0, 177, 237, 238,
	0, 178, 179, 180, 181, 0, 0, 182, 183, 184,
	0, 0, 185, 186, 187, 239, 240, 83, 188, 0,
	0, 0, 0, 189, 190, 191, 192, 0, 0, 86,
	87, 0, 88, 0, 0, 0, 0, 193, 0, 0,
	637, 0, 89, 90, 194, 195, 196, 197, 91, 198,
	199, 0, 92, 200, 201, 93, 0, 0, 202, 203,
	204, 0, 205, 0, 0, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 206, 106,
	207, 208, 0, 107, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 209, 112, 113, 210,
	0, 0, 0, 114, 115, 211, 0, 116, 0, 117,
	0, 0, 0, 0, 118, 212, 0, 213, 0, 119,
	120, 214, 215, 0, 0, 0, 121, 0, 0, 122,
	216, 217, 218, 0, 219, 0, 0, 123, 0, 124,
	125, 0, 0, 220, 0, 126, 0, 0, 127, 0,
	0, 128, 0, 129, 130, 131, 132, 133, 0, 134,
	135, 138, 136, 0, 137, 0, 221, 139, 222, 140,
	141, 0, 0, 0, 0, 0, 142, 223, 0, 143,
	0, 224, 144, 145, 0, 225, 146, 226, 147, 0,
	148, 149, 150, 227, 151, 152, 0, 154, 155, 153,
	156, 0, 157, 0, 158, 159, 228, 160, 0, 161,
	162, 163, 0, 229, 164, 165, 0, 166, 167, 0,
	168, 230, 231, 169, 0, 170, 171, 173, 232, 172,
	233, 0, 174, 0, 175, 176, 0, 234, 235, 236,
	0, 0, 177, 237, 238, 0, 178, 179, 180, 181,
	0, 0, 182, 183, 184, 0, 0, 185, 186, 187,
	239, 240, 353, 188, 0, 0, 0, 0, 189, 190,
	191, 192, 0, 0, 86, 87, 0, 88, 0, 0,
	0, 0, 193, 0, 0, 637, 0, 89, 90, 194,
	195, 196, 197, 91, 198, 199, 0, 92, 200, 201,
	93, 0, 0, 202, 203, 204, 0, 205, 0, 358,
	0, 94, 95, 96, 0, 97, 0, 98, 99, 0,
	359, 100, 101, 0, 0, 0, 0, 0, 0, 102,
	103, 104, 105, 206, 106, 207, 208, 0, 107, 0,
	108, 0, 0, 0, 109, 110, 0, 111, 0, 0,
	0, 209, 112, 113, 210, 0, 0, 0, 114, 115,
	211, 0, 116, 0, 117, 0, 0, 360, 0, 118,
	212, 0, 213, 0, 119, 120, 214, 215, 0, 362,
	0, 121, 0, 361, 122, 216, 217, 218, 0, 219,
	0, 363, 123, 364, 124, 125, 0, 0, 220, 365,
	126, 366, 0, 127, 0, 0, 128, 0, 129, 130,
	131, 132, 133, 367, 134, 135, 138, 136, 0, 137,
	0, 221, 139, 222, 140, 141, 0, 0, 0, 0,
	0, 142, 223, 368, 143, 369, 224, 144, 145, 0,
	225, 146, 226, 147, 0, 148, 149, 150, 227, 151,
	152, 0, 154, 155, 153, 156, 0, 157, 370, 158,
	159, 228, 160, 0, 161, 162, 163, 0, 229, 164,
	165, 0, 166, 167, 371, 168, 230, 231, 169, 0,
	170, 171, 173, 232, 172, 233, 0, 174, 0, 175,
	176, 0, 234, 235, 236, 0, 0, 177, 237, 238,
	0, 178, 179, 180, 181, 0, 0, 182, 183, 184,
	0, 0, 185, 186, 187, 239, 240, 83, 188, 0,
	0, 0, 0, 189, 190, 191, 192, 0, 0, 86,
	87, 0, 88, 0, 0, 0, 0, 193, 0, 0,
	0, 0, 89, 90, 194, 195, 196, 197, 91, 198,
	199, 0, 92, 200, 201, 93, 0, 0, 202, 203,
	204, 915, 205, 0, 0, 0, 94, 95, 96, 0,
	97, 913, 98, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 206, 106,
	207, 208, 0, 107, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 209, 112, 113, 210,
	0, 1008, 0, 114, 115, 211, 0, 116, 0, 117,
	918, 0, 0, 0, 118, 212, 0, 213, 0, 119,
	120, 214, 215, 0, 0, 1006, 121, 0, 0, 122,
	216, 217, 218, 0, 219, 0, 0, 123, 0, 124,
	125, 0, 0, 220, 0, 126, 0, 0, 127, 0,
	0, 128, 0, 129, 130, 131, 132, 133, 0, 134,
	135, 138, 136, 0, 137, 0, 221, 139, 222, 140,
	141, 0, 0, 0, 0, 0, 142, 223, 0, 143,
	0, 224, 144, 145, 0, 225, 146, 226, 147, 917,
	148, 149, 150, 227, 151, 152, 0, 154, 155, 153,
	156, 0, 157, 0, 158, 159, 228, 160, 0, 161,
	162, 163, 0, 229, 164, 165, 0, 166, 167, 0,
	168, 230, 231, 169, 0, 170, 171, 173, 232, 172,
	233, 0, 174, 0, 175, 176, 0, 234, 235, 236,
	0, 0, 177, 237, 238, 0, 178, 179, 180, 181,
	0, 1007, 182, 183, 184, 0, 0, 185, 186, 187,
	239, 240, 83, 188, 0, 0, 0, 0, 189, 190,
	191, 192, 0, 0, 86, 87, 0, 88, 0, 0,
	0, 0, 193, 0, 0, 0, 0, 89, 90, 194,
	195, 196, 197, 91, 198, 199, 0, 92, 200, 201,
	93, 0, 0, 202, 203, 204, 915, 205, 0, 0,
	910, 94, 95, 96, 0, 97, 913, 98, 99, 0,
	0, 100, 101, 0, 0, 0, 0, 0, 0, 102,
	103, 104, 105, 206, 106, 207, 208, 0, 107, 0,
	108, 0, 0, 0, 109, 110, 0, 111, 0, 0,
	0, 209, 112, 113, 210, 0, 0, 0, 114, 115,
	211, 0, 116, 0, 117, 918, 0, 0, 0, 118,
	212, 0, 213, 0, 119, 120, 909, 215, 0, 0,
	0, 121, 0, 0, 122, 216, 217, 218, 0, 219,
	0, 0, 123, 0, 124, 125, 0, 0, 220, 0,
	126, 0, 0, 127, 0, 0, 128, 0, 129, 130,
	131, 132, 133, 0, 134, 135, 138, 136, 0, 137,
	0, 221, 139, 222, 140, 141, 0, 0, 0, 0,
	0, 142, 223, 0, 143, 0, 224, 144, 145, 0,
	225, 146, 226, 147, 917, 148, 149, 150, 227, 151,
	152, 0, 154, 155, 153, 156, 0, 157, 0, 158,
	159, 228, 160, 0, 161, 162, 163, 0, 229, 164,
	165, 0, 166, 167, 0, 168, 230, 231, 169, 0,
	170, 171, 173, 232, 172, 233, 0, 174, 0, 175,
	176, 0, 234, 235, 236, 0, 0, 177, 237, 238,
	0, 178, 179, 180, 181, 0, 916, 182, 183, 184,
	0, 0, 185, 186, 187, 239, 240, 83, 188, 0,
	0, 0, 0, 189, 190, 191, 192, 0, 0, 86,
	87, 0, 88, 0, 0, 0, 0, 193, 0, 0,
	0, 0, 89, 90, 194, 195, 196, 197, 91, 198,
	199, 0, 92, 200, 201, 93, 0, 0, 202, 203,
	204, 0, 205, 0, 0, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 1624, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 206, 106,
	207, 208, 0, 107, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 209, 112, 113, 210,
	0, 0, 0, 114, 115, 211, 0, 116, 0, 117,
	0, 0, 0, 0, 118, 212, 0, 213, 0, 119,
	120, 214, 215, 0, 0, 0, 121, 0, 0, 122,
	216, 217, 218, 0, 219, 0, 0, 123, 0, 124,
	125, 0, 0, 220, 0, 126, 0, 0, 127, 0,
	0, 128, 0, 129, 130, 131, 132, 133, 0, 134,
	135, 138, 136, 0, 137, 0, 221, 139, 222, 140,
	141, 0, 0, 0, 0, 0, 142, 223, 0, 143,
	0, 224, 144, 145, 0, 225, 146, 226, 147, 0,
	148, 149, 150, 227, 151, 152, 0, 154, 155, 153,
	156, 0, 157, 0, 158, 159, 228, 160, 0, 161,
	162, 163, 0, 229, 164, 165, 0, 166, 167, 0,
	168, 230, 231, 169, 0, 170, 171, 173, 232, 172,
	233, 0, 174, 0, 175, 176, 0, 234, 235, 236,
	0, 0, 177, 237, 238, 0, 178, 179, 180, 181,
	0, 0, 182, 183, 184, 0, 0, 185, 186, 187,
	239, 240, 83, 188, 0, 0, 0, 0, 189, 190,
	191, 192, 0, 0, 86, 87, 0, 88, 0, 0,
	0, 0, 193, 0, 1246, 0, 0, 89, 90, 194,
	195, 196, 197, 91, 198, 199, 0, 92, 200, 201,
	93, 0, 0, 202, 203, 204, 0, 205, 0, 0,
	0, 94, 95, 96, 0, 97, 0, 98, 99, 0,
	0, 100, 101, 0, 0, 0, 0, 0, 0, 102,
	103, 104, 105, 206, 106, 207, 208, 0, 107, 0,
	108, 0, 0, 0, 109, 110, 0, 111, 0, 0,
	0, 209, 112, 113, 210, 0, 0, 0, 114, 115,
	211, 0, 116, 0, 117, 0, 0, 0, 0, 118,
	212, 0, 213, 0, 119, 120, 214, 215, 0, 0,
	0, 121, 0, 0, 122, 216, 217, 218, 0, 219,
	0, 0, 123, 0, 124, 125, 0, 0, 220, 0,
	126, 0, 0, 127, 0, 0, 128, 0, 129, 130,
	131, 132, 133, 0, 134, 135, 138, 136, 0, 137,
	0, 221, 139, 222, 140, 141, 0, 0, 0, 0,
	0, 142, 223, 0, 143, 0, 224, 144, 145, 0,
	225, 146, 226, 147, 0, 148, 149, 150, 227, 151,
	152, 0, 154, 155, 153, 156, 0, 157, 0, 158,
	159, 228, 160, 0, 161, 162, 163, 0, 229, 164,
	165, 0, 166, 167, 0, 168, 230, 231, 169, 0,
	170, 171, 173, 232, 172, 233, 0, 174, 0, 175,
	176, 0, 234, 235, 236, 0, 0, 177, 237, 238,
	0, 178, 179, 180, 181, 0, 0, 182, 183, 184,
	0, 0, 185, 186, 187, 239, 240, 83, 188, 0,
	0, 0, 0, 189, 190, 191, 192, 0, 0, 86,
	87, 0, 88, 0, 0, 0, 0, 193, 0, 0,
	0, 0, 89, 90, 194, 195, 196, 197, 91, 198,
	199, 0, 92, 200, 201, 93, 0, 0, 202, 203,
	204, 0, 205, 0, 0, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 206, 106,
	207, 208, 0, 107, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 209, 112, 113, 210,
	0, 0, 0, 114, 115, 211, 0, 116, 0, 117,
	0, 0, 0, 0, 118, 212, 0, 213, 0, 119,
	120, 214, 215, 0, 0, 0, 121, 0, 0, 122,
	216, 217, 218, 0, 219, 0, 0, 123, 0, 124,
	125, 0, 0, 220, 0, 126, 0, 0, 127, 0,
	0, 128, 0, 129, 130, 131, 132, 133, 0, 134,
	135, 138, 136, 0, 137, 0, 221, 139, 222, 140,
	141, 0, 0, 326, 0, 0, 142, 223, 0, 143,
	0, 224, 144, 145, 0, 225, 146, 226, 147, 0,
	148, 149, 150, 227, 151, 152, 0, 154, 155, 153,
	156, 0, 157, 0, 158, 159, 228, 160, 0, 161,
	162, 163, 0, 229, 164, 165, 0, 166, 167, 0,
	168, 230, 231, 169, 0, 170, 171, 173, 232, 172,
	233, 0, 174, 0, 175, 176, 0, 234, 235, 236,
	0, 0, 177, 237, 238, 0, 178, 179, 180, 181,
	0, 0, 182, 183, 184, 0, 0, 185, 186, 187,
	239, 240, 83, 188, 0, 0, 0, 0, 189, 190,
	191, 192, 0, 0, 86, 87, 0, 88, 0, 0,
	0, 0, 193, 0, 0, 0, 0, 89, 90, 194,
	195, 196, 197, 91, 198, 199, 0, 92, 200, 201,
	93, 0, 0, 202, 203, 204, 0, 205, 0, 0,
	0, 94, 95, 96, 0, 97, 0, 98, 99, 0,
	0, 100, 101, 0, 0, 0, 0, 0, 0, 102,
	103, 104, 105, 206, 106, 207, 208, 0, 107, 0,
	108, 0, 0, 0, 109, 110, 0, 111, 0, 0,
	0, 209, 112, 113, 210, 0, 0, 0, 114, 115,
	211, 0, 116, 0, 117, 0, 0, 0, 0, 118,
	212, 0, 213, 0, 119, 120, 586, 215, 0, 0,
	0, 121, 0, 0, 122, 216, 217, 218, 0, 219,
	0, 0, 123, 0, 124, 125, 0, 0, 220, 0,
	126, 0, 0, 127, 0, 0, 128, 0, 129, 130,
	131, 132, 133, 0, 134, 135, 138, 136, 0, 137,
	0, 221, 139, 222, 140, 141, 0, 0, 326, 0,
	0, 142, 223, 0, 143, 0, 224, 144, 145, 0,
	225, 146, 226, 147, 0, 148, 149, 150, 227, 151,
	152, 0, 154, 155, 153, 156, 0, 157, 0, 158,
	159, 228, 160, 0, 161, 162, 163, 0, 229, 164,
	165, 0, 166, 167, 0, 168, 230, 231, 169, 0,
	170, 171, 173, 232, 172, 233, 0, 174, 0, 175,
	176, 0, 234, 235, 236, 0, 0, 177, 237, 238,
	0, 178, 179, 180, 181, 0, 0, 182, 183, 184,
	0, 0, 185, 186, 187, 239, 240, 83, 188, 0,
	0, 0, 0, 189, 190, 191, 192, 0, 0, 86,
	87, 378, 88, 0, 0, 0, 0, 193, 0, 0,
	0, 0, 89, 90, 194, 195, 196, 197, 91, 198,
	199, 0, 92, 200, 201, 93, 0, 0, 202, 203,
	204, 0, 205, 0, 0, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 206, 106,
	207, 208, 0, 107, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 209, 112, 113, 210,
	0, 0, 0, 114, 115, 211, 0, 116, 0, 117,
	0, 0, 0, 0, 118, 212, 0, 213, 0, 119,
	120, 214, 215, 0, 0, 0, 121, 0, 0, 122,
	216, 217, 218, 0, 219, 0, 0, 123, 0, 124,
	125, 0, 0, 220, 0, 126, 0, 0, 127, 0,
	0, 128, 0, 129, 130, 131, 132, 133, 0, 134,
	135, 138, 136, 0, 137, 0, 221, 139, 222, 140,
	141, 0, 0, 0, 0, 0, 142, 223, 0, 143,
	0, 224, 144, 145, 0, 225, 146, 226, 147, 0,
	148, 149, 150, 227, 151, 152, 0, 154, 155, 153,
	156, 0, 157, 0, 158, 159, 228, 160, 0, 161,
	162, 163, 0, 229, 164, 165, 0, 166, 167, 0,
	168, 230, 231, 169, 0, 170, 171, 173, 232, 172,
	233, 0, 174, 0, 175, 176, 0, 234, 235, 236,
	0, 0, 177, 237, 238, 0, 178, 179, 180, 181,
	0, 0, 182, 183, 184, 0, 0, 185, 186, 187,
	239, 240, 83, 188, 0, 0, 0, 0, 189, 190,
	191, 192, 0, 0, 86, 87, 0, 88, 0, 0,
	0, 0, 193, 0, 0, 0, 0, 89, 90, 194,
	195, 196, 197, 91, 198, 199, 0, 92, 200, 201,
	93, 0, 0, 202, 203, 204, 0, 205, 0, 0,
	0, 94, 95, 96, 0, 97, 0, 98, 99, 0,
	0, 100, 101, 0, 0, 0, 0, 0, 0, 102,
	103, 104, 105, 206, 106, 207, 208, 0, 107, 0,
	108, 0, 0, 0, 109, 110, 0, 111, 0, 0,
	0, 209, 112, 113, 210, 0, 0, 0, 114, 115,
	211, 0, 116, 0, 117, 0, 0, 0, 0, 118,
	212, 0, 213, 0, 119, 120, 332, 215, 0, 0,
	0, 121, 0, 0, 122, 216, 217, 218, 0, 219,
	0, 0, 123, 0, 124, 125, 0, 0, 220, 0,
	126, 0, 0, 127, 0, 0, 128, 0, 129, 130,
	131, 132, 133, 0, 134, 135, 138, 136, 0, 137,
	0, 221, 139, 222, 140, 141, 0, 0, 326, 0,
	0, 142, 223, 0, 143, 0, 224, 144, 145, 0,
	225, 146, 226, 147, 0, 148, 149, 150, 227, 151,
	152, 0, 154, 155, 153, 156, 0, 157, 0, 158,
	159, 228, 160, 0, 161, 162, 163, 0, 229, 164,
	165, 0, 166, 167, 0, 168, 230, 231, 169, 0,
	170, 171, 173, 232, 172, 233, 0, 174, 0, 175,
	176, 0, 234, 235, 236, 0, 0, 177, 237, 238,
	0, 178, 179, 180, 181, 0, 0, 182, 183, 184,
	0, 0, 185, 186, 187, 239, 240, 83, 188, 0,
	0, 0, 0, 189, 190, 191, 192, 0, 0, 86,
	87, 244, 88, 0, 0, 0, 0, 193, 0, 0,
	0, 0, 89, 90, 194, 195, 196, 197, 91, 198,
	199, 0, 92, 200, 201, 93, 0, 0, 202, 203,
	204, 0, 205, 0, 0, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 206, 106,
	207, 208, 0, 107, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 209, 112, 113, 210,
	0, 0, 0, 114, 115, 211, 0, 116, 0, 117,
	0, 0, 0, 0, 118, 212, 0, 213, 0, 119,
	120, 214, 215, 0, 0, 0, 121, 0, 0, 122,
	216, 217, 218, 0, 219, 0, 0, 123, 0, 124,
	125, 0, 0, 220, 0, 126, 0, 0, 127, 0,
	0, 128, 0, 129, 130, 131, 132, 133, 0, 134,
	135, 138, 136, 0, 137, 0, 221, 139, 222, 140,
	141, 0, 0, 0, 0, 0, 142, 223, 0, 143,
	0, 224, 144, 145, 0, 225, 146, 226, 243, 0,
	148, 149, 150, 227, 151, 152, 0, 154, 155, 153,
	156, 0, 157, 0, 158, 159, 228, 160, 0, 161,
	162, 163, 0, 229, 164, 165, 0, 166, 167, 0,
	168, 230, 231, 169, 0, 170, 171, 173, 232, 172,
	233, 0, 174, 0, 175, 176, 0, 234, 235, 236,
	0, 0, 177, 237, 238, 0, 178, 179, 180, 181,
	0, 0, 182, 183, 184, 0, 0, 185, 186, 187,
	239, 240, 83, 188, 0, 0, 0, 0, 189, 190,
	191, 192, 0, 0, 86, 87, 0, 88, 0, 0,
	0, 0, 193, 0, 0, 0, 0, 89, 90, 194,
	195, 196, 197, 91, 198, 199, 0, 92, 200, 201,
	93, 0, 0, 202, 203, 204, 0, 205, 0, 0,
	0, 94, 95, 96, 0, 97, 0, 98, 99, 0,
	0, 100, 101, 0, 0, 0, 0, 0, 0, 102,
	103, 104, 105, 206, 106, 207, 208, 0, 107, 0,
	108, 0, 0, 0, 109, 110, 0, 111, 0, 0,
	0, 209, 112, 113, 210, 0, 0, 0, 114, 115,
	211, 0, 116, 0, 117, 0, 0, 0, 0, 118,
	212, 0, 213, 0, 119, 120, 214, 215, 0, 0,
	0, 121, 0, 0, 122, 216, 217, 218, 0, 219,
	0, 0, 123, 0, 124, 125, 0, 0, 220, 0,
	126, 0, 0, 127, 0, 0, 128, 0, 129, 130,
	131, 132, 133, 0, 134, 135, 138, 136, 0, 137,
	0, 221, 139, 222, 140, 141, 0, 0, 0, 0,
	0, 142, 223, 0, 143, 0, 224, 144, 145, 0,
	225, 146, 226, 147, 0, 148, 149, 150, 227, 151,
	152, 0, 154, 155, 153, 156, 0, 157, 0, 158,
	159, 228, 160, 0, 161, 162, 163, 0, 229, 164,
	165, 0, 166, 167, 0, 168, 230, 231, 169, 0,
	170, 171, 173, 232, 172, 233, 0, 174, 0, 175,
	176, 0, 234, 235, 236, 0, 0, 177, 237, 238,
	0, 178, 179, 180, 181, 0, 0, 182, 183, 184,
	0, 0, 185, 186, 187, 239, 240, 83, 188, 0,
	0, 0, 0, 189, 190, 191, 192, 0, 0, 86,
	87, 0, 88, 0, 0, 0, 0, 193, 0, 0,
	0, 0, 89, 90, 194, 195, 196, 197, 91, 198,
	199, 0, 92, 200, 201, 93, 0, 0, 202, 203,
	204, 0, 205, 0, 0, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 206, 106,
	207, 208, 0, 107, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 209, 112, 113, 210,
	0, 0, 0, 114, 115, 211, 0, 116, 0, 117,
	0, 0, 0, 0, 118, 212, 0, 213, 0, 119,
	120, 1172, 215, 0, 0, 0, 121, 0, 0, 122,
	216, 217, 218, 0, 219, 0, 0, 123, 0, 124,
	125, 0, 0, 220, 0, 126, 0, 0, 127, 0,
	0, 128, 0, 129, 130, 131, 132, 133, 0, 134,
	135, 138, 136, 0, 137, 0, 221, 139, 222, 140,
	141, 0, 0, 0, 0, 0, 142, 223, 0, 143,
	0, 224, 144, 145, 0, 225, 146, 226, 147, 0,
	148, 149, 150, 227, 151, 152, 0, 154, 155, 153,
	156, 0, 157, 0, 158, 159, 228, 160, 0, 161,
	162, 163, 0, 229, 164, 165, 0, 166, 167, 0,
	168, 230, 231, 169, 0, 170, 171, 173, 232, 172,
	233, 0, 174, 0, 175, 176, 0, 234, 235, 236,
	0, 0, 177, 237, 238, 0, 178, 179, 180, 181,
	0, 0, 182, 183, 184, 0, 0, 185, 186, 187,
	239, 240, 83, 188, 0, 0, 0, 0, 189, 190,
	191, 192, 0, 0, 86, 87, 0, 88, 0, 0,
	0, 0, 193, 0, 0, 0, 0, 89, 90, 194,
	195, 196, 197, 91, 198, 199, 0, 92, 200, 201,
	93, 0, 0, 202, 203, 204, 0, 205, 0, 0,
	0, 94, 95, 96, 0, 97, 0, 98, 99, 0,
	0, 100, 101, 0, 0, 0, 0, 0, 0, 102,
	103, 104, 105, 206, 106, 207, 208, 0, 107, 0,
	108, 0, 0, 0, 109, 110, 0, 111, 0, 0,
	0, 209, 112, 113, 210, 0, 0, 0, 114, 115,
	211, 0, 116, 0, 117, 0, 0, 0, 0, 118,
	212, 0, 213, 0, 119, 120, 1170, 215, 0, 0,
	0, 121, 0, 0, 122, 216, 217, 218, 0, 219,
	0, 0, 123, 0, 124, 125, 0, 0, 220, 0,
	126, 0, 0, 127, 0, 0, 128, 0, 129, 130,
	131, 132, 133, 0, 134, 135, 138, 136, 0, 137,
	0, 221, 139, 222, 140, 141, 0, 0, 0, 0,
	0, 142, 223, 0, 143, 0, 224, 144, 145, 0,
	225, 146, 226, 147, 0, 148, 149, 150, 227, 151,
	152, 0, 154, 155, 153, 156, 0, 157, 0, 158,
	159, 228, 160, 0, 161, 162, 163, 0, 229, 164,
	165, 0, 166, 167, 0, 168, 230, 231, 169, 0,
	170, 171, 173, 232, 172, 233, 0, 174, 0, 175,
	176, 0, 234, 235, 236, 0, 0, 177, 237, 238,
	0, 178, 179, 180, 181, 0, 0, 182, 183, 184,
	0, 0, 185, 186, 187, 239, 240, 83, 188, 0,
	0, 0, 0, 189, 190, 191, 192, 0, 0, 86,
	87, 0, 88, 0, 0, 0, 0, 193, 0, 0,
	0, 0, 89, 90, 194, 195, 196, 197, 91, 198,
	199, 0, 92, 200, 201, 93, 0, 0, 202, 203,
	204, 0, 205, 0, 0, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 206, 106,
	207, 208, 0, 107, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 209, 112, 113, 210,
	0, 0, 0, 114, 115, 211, 0, 116, 0, 117,
	0, 0, 0, 0, 118, 212, 0, 213, 0, 119,
	120, 1161, 215, 0, 0, 0, 121, 0, 0, 122,
	216, 217, 218, 0, 219, 0, 0, 123, 0, 124,
	125, 0, 0, 220, 0, 126, 0, 0, 127, 0,
	0, 128, 0, 129, 130, 131, 132, 133, 0, 134,
	135, 138, 136, 0, 137, 0, 221, 139, 222, 140,
	141, 0, 0, 0, 0, 0, 142, 223, 0, 143,
	0, 224, 144, 145, 0, 225, 146, 226, 147, 0,
	148, 149, 150, 227, 151, 152, 0, 154, 155, 153,
	156, 0, 157, 0, 158, 159, 228, 160, 0, 161,
	162, 163, 0, 229, 164, 165, 0, 166, 167, 0,
	168, 230, 231, 169, 0, 170, 171, 173, 232, 172,
	233, 0, 174, 0, 175, 176, 0, 234, 235, 236,
	0, 0, 177, 237, 238, 0, 178, 179, 180, 181,
	0, 0, 182, 183, 184, 0, 0, 185, 186, 187,
	239, 240, 83, 188, 0, 0, 0, 0, 189, 190,
	191, 192, 0, 0, 86, 87, 0, 88, 0, 0,
	0, 0, 193, 0, 0, 0, 0, 89, 90, 194,
	195, 196, 197, 91, 198, 199, 0, 92, 200, 201,
	93, 0, 0, 202, 203, 204, 0, 205, 0, 0,
	0, 94, 95, 96, 0, 97, 0, 98, 99, 0,
	0, 100, 101, 0, 0, 0, 0, 0, 0, 102,
	103, 104, 105, 206, 106, 207, 208, 0, 107, 0,
	108, 0, 0, 0, 109, 110, 0, 111, 0, 0,
	0, 209, 112, 113, 210, 0, 0, 0, 114, 115,
	211, 0, 116, 0, 117, 0, 0, 0, 0, 118,
	212, 0, 213, 0, 119, 120, 782, 215, 0, 0,
	0, 121, 0, 0, 122, 216, 217, 218, 0, 219,
	0, 0, 123, 0, 124, 125, 0, 0, 220, 0,
	126, 0, 0, 127, 0, 0, 128, 0, 129, 130,
	131, 132, 133, 0, 134, 135, 138, 136, 0, 137,
	0, 221, 139, 222, 140, 141, 0, 0, 0, 0,
	0, 142, 223, 0, 143, 0, 224, 144, 145, 0,
	225, 146, 226, 147, 0, 148, 149, 150, 227, 151,
	152, 0, 154, 155, 153, 156, 0, 157, 0, 158,
	159, 228, 160, 0, 161, 162, 163, 0, 229, 164,
	165, 0, 166, 167, 0, 168, 230, 231, 169, 0,
	170, 171, 173, 232, 172, 233, 0, 174, 0, 175,
	176, 0, 234, 235, 236, 0, 0, 177, 237, 238,
	0, 178, 179, 180, 181, 0, 0, 182, 183, 184,
	0, 0, 185, 186, 187, 239, 240, 83, 188, 0,
	0, 0, 0, 189, 190, 191, 192, 0, 0, 86,
	87, 0, 88, 0, 0, 0, 0, 193, 0, 0,
	0, 0, 89, 90, 194, 195, 196, 197, 91, 198,
	199, 0, 92, 200, 201, 93, 0, 0, 202, 203,
	204, 0, 205, 0, 0, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 206, 106,
	207, 208, 0, 107, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 209, 112, 113, 210,
	0, 0, 0, 114, 115, 211, 0, 116, 0, 117,
	0, 0, 0, 0, 118, 212, 0, 213, 0, 119,
	120, 214, 215, 0, 0, 0, 121, 0, 0, 122,
	216, 217, 218, 0, 219, 0, 0, 123, 0, 124,
	125, 0, 0, 220, 0, 126, 0, 0, 127, 0,
	0, 128, 0, 129, 130, 131, 132, 133, 0, 134,
	135, 138, 136, 0, 137, 0, 221, 139, 222, 140,
	141, 0, 0, 0, 0, 0, 142, 223, 0, 143,
	0, 224, 144, 145, 0, 225, 146, 226, 147, 0,
	148, 149, 150, 227, 151, 152, 0, 154, 155, 153,
	156, 0, 157, 0, 158, 159, 228, 160, 0, 258,
	162, 163, 0, 229, 164, 165, 0, 166, 167, 0,
	168, 230, 231, 169, 0, 170, 171, 173, 232, 172,
	233, 0, 174, 0, 175, 176, 0, 234, 235, 236,
	0, 0, 177, 237, 238, 0, 178, 179, 180, 181,
	0, 0, 182, 183, 184, 0, 0, 185, 186, 187,
	239, 240, 83, 188, 0, 0, 0, 0, 189, 190,
	191, 192, 0, 0, 86, 87, 0, 88, 0, 0,
	0, 0, 193, 0, 573, 0, 0, 89, 90, 194,
	195, 196, 197, 91, 198, 199, 0, 92, 200, 201,
	93, 0, 0, 202, 203, 204, 0, 205, 0, 0,
	0, 94, 95, 96, 0, 97, 0, 98, 99, 0,
	0, 100, 101, 0, 0, 0, 0, 0, 0, 102,
	103, 104, 105, 206, 106, 207, 208, 0, 107, 0,
	108, 0, 0, 0, 109, 110, 0, 111, 0, 0,
	0, 209, 112, 113, 210, 0, 0, 0, 114, 115,
	211, 0, 116, 0, 117, 0, 0, 0, 0, 118,
	212, 0, 213, 0, 119, 120, 214, 215, 0, 0,
	0, 121, 0, 0, 122, 216, 217, 218, 0, 219,
	0, 0, 123, 0, 124, 125, 0, 0, 220, 0,
	126, 0, 0, 127, 0, 0, 128, 0, 129, 130,
	131, 132, 133, 0, 134, 135, 138, 136, 0, 137,
	0, 221, 139, 222, 140, 141, 0, 0, 0, 0,
	0, 142, 223, 0, 143, 0, 224, 144, 145, 0,
	225, 146, 226, 147, 0, 148, 149, 150, 227, 151,
	152, 0, 154, 155, 153, 156, 0, 157, 0, 158,
	159, 228, 160, 0, 161, 162, 163, 0, 229, 164,
	165, 0, 0, 167, 0, 168, 230, 231, 169, 0,
	170, 171, 173, 232, 172, 233, 0, 174, 0, 175,
	176, 0, 234, 235, 236, 0, 0, 177, 237, 238,
	0, 178, 179, 180, 181, 0, 0, 182, 183, 184,
	0, 0, 185, 186, 187, 239, 240, 83, 188, 0,
	0, 0, 0, 189, 190, 191, 192, 0, 0, 86,
	87, 0, 88, 0, 0, 0, 0, 193, 0, 0,
	0, 0, 89, 90, 194, 195, 196, 197, 91, 198,
	199, 0, 92, 200, 201, 93, 0, 0, 202, 203,
	204, 0, 205, 0, 0, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 206, 106,
	207, 208, 0, 107, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 209, 112, 113, 210,
	0, 0, 0, 114, 115, 211, 0, 116, 0, 117,
	0, 0, 0, 0, 118, 212, 0, 213, 0, 119,
	120, 427, 215, 0, 0, 0, 121, 0, 0, 122,
	216, 217, 218, 0, 219, 0, 0, 123, 0, 124,
	125, 0, 0, 220, 0, 126, 0, 0, 127, 0,
	0, 128, 0, 129, 130, 131, 132, 133, 0, 134,
	135, 138, 136, 0, 137, 0, 221, 139, 222, 140,
	141, 0, 0, 0, 0, 0, 142, 223, 0, 143,
	0, 224, 144, 145, 0, 225, 146, 226, 147, 0,
	148, 149, 150, 227, 151, 152, 0, 154, 155, 153,
	156, 0, 157, 0, 158, 159, 228, 160, 0, 161,
	162, 163, 0, 229, 164, 165, 0, 166, 167, 0,
	168, 230, 231, 169, 0, 170, 171, 173, 232, 172,
	233, 0, 174, 0, 175, 176, 0, 234, 235, 236,
	0, 0, 177, 237, 238, 0, 178, 179, 180, 181,
	0, 0, 182, 183, 184, 0, 0, 185, 186, 187,
	239, 240, 83, 188, 0, 0, 0, 0, 189, 190,
	191, 192, 0, 0, 86, 87, 0, 88, 0, 0,
	0, 0, 193, 0, 0, 0, 0, 89, 90, 194,
	195, 196, 197, 91, 198, 199, 0, 92, 200, 201,
	93, 0, 0, 202, 203, 204, 0, 205, 0, 0,
	0, 94, 95, 96, 0, 97, 0, 98, 99, 0,
	0, 100, 101, 0, 0, 0, 0, 0, 0, 102,
	103, 104, 105, 206, 106, 207, 208, 0, 107, 0,
	108, 0, 0, 0, 109, 110, 0, 111, 0, 0,
	0, 209, 112, 113, 210, 0, 0, 0, 114, 115,
	211, 0, 116, 0, 117, 0, 0, 0, 0, 118,
	212, 0, 213, 0, 119, 120, 424, 215, 0, 0,
	0, 121, 0, 0, 122, 216, 217, 218, 0, 219,
	0, 0, 123, 0, 124, 125, 0, 0, 220, 0,
	126, 0, 0, 127, 0, 0, 128, 0, 129, 130,
	131, 132, 133, 0, 134, 135, 138, 136, 0, 137,
	0, 221, 139, 222, 140, 141, 0, 0, 0, 0,
	0, 142, 223, 0, 143, 0, 224, 144, 145, 0,
	225, 146, 226, 147, 0, 148, 149, 150, 227, 151,
	152, 0, 154, 155, 153, 156, 0, 157, 0, 158,
	159, 228, 160, 0, 161, 162, 163, 0, 229, 164,
	165, 0, 166, 167, 0, 168, 230, 231, 169, 0,
	170, 171, 173, 232, 172, 233, 0, 174, 0, 175,
	176, 0, 234, 235, 236, 0, 0, 177, 237, 238,
	0, 178, 179, 180, 181, 0, 0, 182, 183, 184,
	0, 0, 185, 186, 187, 239, 240, 83, 188, 0,
	0, 0, 0, 189, 190, 191, 192, 0, 0, 86,
	87, 0, 88, 0, 0, 0, 0, 193, 0, 0,
	0, 0, 89, 90, 194, 195, 196, 197, 91, 198,
	199, 0, 92, 200, 201, 93, 0, 0, 202, 203,
	384, 0, 205, 0, 0, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 206, 106,
	207, 208, 0, 107, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 209, 112, 113, 210,
	0, 0, 0, 114, 115, 211, 0, 116, 0, 117,
	0, 0, 0, 0, 118, 212, 0, 213, 0, 119,
	120, 214, 215, 0, 0, 0, 121, 0, 0, 122,
	216, 217, 218, 0, 219, 0, 0, 123, 0, 124,
	125, 0, 0, 220, 0, 126, 0, 0, 127, 0,
	0, 128, 0, 129, 130, 131, 132, 269, 0, 134,
	135, 138, 136, 0, 137, 0, 221, 139, 222, 140,
	141, 0, 0, 0, 0, 0, 142, 223, 0, 143,
	0, 224, 144, 145, 0, 225, 146, 226, 147, 0,
	148, 149, 150, 227, 151, 152, 0, 154, 155, 153,
	156, 0, 157, 0, 158, 159, 228, 160, 0, 161,
	162, 163, 0, 229, 164, 165, 0, 166, 167, 0,
	168, 230, 231, 169, 0, 170, 171, 173, 232, 172,
	233, 0, 174, 0, 175, 176, 0, 268, 235, 236,
	0, 0, 264, 237, 238, 0, 178, 179, 180, 181,
	0, 0, 182, 183, 184, 0, 0, 185, 186, 187,
	239, 240, 83, 188, 0, 0, 0, 0, 189, 190,
	191, 192, 0, 0, 86, 87, 0, 88, 0, 0,
	0, 0, 193, 0, 0, 0, 0, 89, 90, 194,
	195, 196, 197, 91, 198, 199, 0, 92, 200, 201,
	93, 0, 0, 202, 203, 204, 0, 205, 0, 0,
	0, 94, 95, 96, 0, 97, 0, 98, 99, 0,
	0, 100, 101, 0, 0, 0, 0, 0, 0, 102,
	103, 104, 105, 206, 106, 207, 208, 0, 107, 0,
	108, 0, 0, 0, 109, 110, 0, 111, 0, 0,
	0, 209, 112, 113, 210, 0, 0, 0, 114, 115,
	211, 0, 116, 0, 117, 0, 0, 0, 0, 118,
	212, 0, 213, 0, 119, 120, 214, 215, 0, 0,
	0, 121, 0, 0, 122, 216, 217, 218, 0, 219,
	0, 0, 123, 0, 124, 125, 0, 0, 220, 0,
	126, 0, 0, 127, 0, 0, 128, 0, 129, 130,
	131, 132, 269, 0, 134, 135, 138, 136, 0, 137,
	0, 221, 139, 222, 140, 141, 0, 0, 0, 0,
	0, 142, 223, 0, 143, 0, 224, 144, 145, 0,
	225, 146, 226, 147, 0, 148, 149, 150, 227, 151,
	152, 0, 154, 155, 153, 156, 0, 157, 0, 158,
	159, 228, 160, 0, 161, 162, 163, 0, 229, 164,
	165, 0, 166, 167, 0, 168, 230, 231, 169, 0,
	170, 171, 173, 232, 172, 233, 0, 174, 0, 175,
	176, 0, 268, 235, 236, 0, 0, 264, 237, 238,
	0, 178, 179, 180, 181, 0, 0, 182, 183, 184,
	0, 0, 185, 186, 187, 239, 240, 83, 188, 0,
	0, 0, 0, 189, 190, 191, 192, 0, 0, 86,
	87, 0, 88, 0, 0, 0, 0, 193, 0, 0,
	0, 0, 89, 90, 194, 195, 196, 197, 91, 198,
	199, 0, 92, 200, 201, 93, 0, 0, 202, 203,
	204, 0, 205, 0, 0, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 206, 106,
	207, 208, 0, 107, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 209, 112, 113, 210,
	0, 0, 0, 114, 115, 211, 0, 116, 0, 117,
	0, 0, 0, 0, 118, 212, 0, 213, 0, 119,
	120, 348, 215, 0, 0, 0, 121, 0, 0, 122,
	216, 217, 218, 0, 219, 0, 0, 123, 0, 124,
	125, 0, 0, 220, 0, 126, 0, 0, 127, 0,
	0, 128, 0, 129, 130, 131, 132, 133, 0, 134,
	135, 138, 136, 0, 137, 0, 221, 139, 222, 140,
	141, 0, 0, 0, 0, 0, 142, 223, 0, 143,
	0, 224, 144, 145, 0, 225, 146, 226, 147, 0,
	148, 149, 150, 227, 151, 152, 0, 154, 155, 153,
	156, 0, 157, 0, 158, 159, 228, 160, 0, 161,
	162, 163, 0, 229, 164, 165, 0, 166, 167, 0,
	168, 230, 231, 169, 0, 170, 171, 173, 232, 172,
	233, 0, 174, 0, 175, 176, 0, 234, 235, 236,
	0, 0, 177, 237, 238, 0, 178, 179, 180, 181,
	0, 0, 182, 183, 184, 0, 0, 185, 186, 187,
	239, 240, 83, 188, 0, 0, 0, 0, 189, 190,
	191, 192, 0, 0, 86, 87, 0, 88, 0, 0,
	0, 0, 193, 0, 0, 0, 0, 89, 90, 194,
	195, 196, 197, 91, 198, 199, 0, 92, 200, 201,
	93, 0, 0, 202, 203, 204, 0, 205, 0, 0,
	0, 94, 95, 96, 0, 97, 0, 98, 99, 0,
	0, 100, 101, 0, 0, 0, 0, 0, 0, 102,
	103, 104, 105, 206, 106, 207, 208, 0, 107, 0,
	108, 0, 0, 0, 109, 110, 0, 111, 0, 0,
	0, 209, 112, 113, 210, 0, 0, 0, 114, 115,
	211, 0, 116, 0, 117, 0, 0, 0, 0, 118,
	212, 0, 213, 0, 119, 120, 345, 215, 0, 0,
	0, 121, 0, 0, 122, 216, 217, 218, 0, 219,
	0, 0, 123, 0, 124, 125, 0, 0, 220, 0,
	126, 0, 0, 127, 0, 0, 128, 0, 129, 130,
	131, 132, 133, 0, 134, 135, 138, 136, 0, 137,
	0, 221, 139, 222, 140, 141, 0, 0, 0, 0,
	0, 142, 223, 0, 143, 0, 224, 144, 145, 0,
	225, 146, 226, 147, 0, 148, 149, 150, 227, 151,
	152, 0, 154, 155, 153, 156, 0, 157, 0, 158,
	159, 228, 160, 0, 161, 162, 163, 0, 229, 164,
	165, 0, 166, 167, 0, 168, 230, 231, 169, 0,
	170, 171, 173, 232, 172, 233, 0, 174, 0, 175,
	176, 0, 234, 235, 236, 0, 0, 177, 237, 238,
	0, 178, 179, 180, 181, 0, 0, 182, 183, 184,
	0, 0, 185, 186, 187, 239, 240, 83, 188, 0,
	0, 0, 0, 189, 190, 191, 192, 0, 0, 86,
	87, 0, 88, 0, 0, 0, 0, 193, 0, 0,
	0, 0, 89, 90, 194, 195, 196, 197, 91, 198,
	199, 0, 92, 200, 201, 93, 0, 0, 202, 203,
	204, 0, 205, 0, 0, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 206, 106,
	207, 208, 0, 107, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 209, 112, 113, 210,
	0, 0, 0, 114, 115, 211, 0, 116, 0, 117,
	0, 0, 0, 0, 118, 212, 0, 213, 0, 119,
	120, 343, 215, 0, 0, 0, 121, 0, 0, 122,
	216, 217, 218, 0, 219, 0, 0, 123, 0, 124,
	125, 0, 0, 220, 0, 126, 0, 0, 127, 0,
	0, 128, 0, 129, 130, 131, 132, 133, 0, 134,
	135, 138, 136, 0, 137, 0, 221, 139, 222, 140,
	141, 0, 0, 0, 0, 0, 142, 223, 0, 143,
	0, 224, 144, 145, 0, 225, 146, 226, 147, 0,
	148, 149, 150, 227, 151, 152, 0, 154, 155, 153,
	156, 0, 157, 0, 158, 159, 228, 160, 0, 161,
	162, 163, 0, 229, 164, 165, 0, 166, 167, 0,
	168, 230, 231, 169, 0, 170, 171, 173, 232, 172,
	233, 0, 174, 0, 175, 176, 0, 234, 235, 236,
	0, 0, 177, 237, 238, 0, 178, 179, 180, 181,
	0, 0, 182, 183, 184, 0, 0, 185, 186, 187,
	239, 240, 83, 188, 0, 0, 0, 0, 189, 190,
	191, 192, 0, 0, 86, 87, 0, 88, 0, 0,
	0, 0, 193, 0, 0, 0, 0, 89, 90, 194,
	195, 196, 197, 91, 198, 199, 0, 92, 200, 201,
	93, 0, 0, 202, 203, 204, 0, 205, 0, 0,
	0, 94, 95, 96, 0, 97, 0, 98, 99, 0,
	0, 100, 101, 0, 0, 0, 0, 0, 0, 102,
	103, 104, 105, 206, 106, 207, 208, 0, 107, 0,
	108, 0, 0, 0, 109, 110, 0, 111, 0, 0,
	0, 209, 112, 113, 210, 0, 0, 0, 114, 115,
	211, 0, 116, 0, 117, 0, 0, 0, 0, 118,
	212, 0, 213, 0, 119, 120, 335, 215, 0, 0,
	0, 121, 0, 0, 122, 216, 217, 218, 0, 219,
	0, 0, 123, 0, 124, 125, 0, 0, 220, 0,
	126, 0, 0, 127, 0, 0, 128, 0, 129, 130,
	131, 132, 133, 0, 134, 135, 138, 136, 0, 137,
	0, 221, 139, 222, 140, 141, 0, 0, 0, 0,
	0, 142, 223, 0, 143, 0, 224, 144, 145, 0,
	225, 146, 226, 147, 0, 148, 149, 150, 227, 151,
	152, 0, 154, 155, 153, 156, 0, 157, 0, 158,
	159, 228, 160, 0, 161, 162, 163, 0, 229, 164,
	165, 0, 166, 167, 0, 168, 230, 231, 169, 0,
	170, 171, 173, 232, 172, 233, 0, 174, 0, 175,
	176, 0, 234, 235, 236, 0, 0, 177, 237, 238,
	0, 178, 179, 180, 181, 0, 0, 182, 183, 184,
	0, 0, 185, 186, 187, 239, 240, 83, 188, 0,
	0, 0, 0, 189, 190, 191, 192, 0, 0, 86,
	87, 0, 88, 0, 0, 0, 0, 193, 0, 0,
	0, 0, 89, 90, 194, 195, 196, 197, 91, 198,
	199, 0, 92, 200, 201, 93, 0, 0, 202, 203,
	204, 0, 205, 0, 0, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 206, 106,
	207, 208, 0, 107, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 209, 112, 113, 210,
	0, 0, 0, 114, 115, 211, 0, 116, 0, 117,
	0, 0, 0, 0, 118, 212, 0, 213, 0, 119,
	120, 214, 215, 0, 0, 0, 121, 0, 0, 122,
	216, 217, 218, 0, 219, 0, 0, 123, 0, 124,
	125, 0, 0, 220, 0, 126, 0, 0, 127, 0,
	0, 128, 0, 129, 130, 131, 132, 133, 0, 134,
	135, 138, 136, 0, 137, 0, 221, 139, 222, 140,
	141, 0, 0, 0, 0, 0, 142, 223, 0, 143,
	0, 224, 144, 145, 0, 225, 146, 226, 147, 0,
	148, 149, 150, 227, 315, 152, 0, 154, 155, 153,
	156, 0, 157, 0, 158, 159, 228, 160, 0, 161,
	162, 163, 0, 229, 164, 165, 0, 166, 167, 0,
	168, 230, 231, 169, 0, 170, 171, 173, 232, 172,
	233, 0, 174, 0, 175, 176, 0, 234, 235, 236,
	0, 0, 177, 237, 238, 0, 178, 179, 180, 181,
	0, 0, 182, 183, 184, 0, 0, 185, 186, 187,
	239, 240, 83, 188, 0, 0, 0, 0, 189, 190,
	191, 192, 0, 0, 86, 87, 0, 88, 0, 0,
	0, 0, 193, 0, 0, 0, 0, 89, 90, 194,
	195, 196, 197, 91, 198, 199, 0, 92, 200, 201,
	93, 0, 0, 202, 203, 204, 0, 205, 0, 0,
	0, 94, 95, 96, 0, 97, 0, 98, 99, 0,
	0, 100, 101, 0, 0, 0, 0, 0, 0, 102,
	103, 104, 105, 206, 106, 207, 208, 0, 107, 0,
	108, 0, 0, 0, 109, 110, 0, 111, 0, 0,
	0, 209, 112, 113, 210, 0, 0, 0, 114, 115,
	211, 0, 116, 0, 117, 0, 0, 0, 0, 118,
	212, 0, 213, 0, 119, 120, 214, 215, 0, 0,
	0, 121, 0, 0, 122, 216, 217, 218, 0, 219,
	0, 0, 123, 0, 124, 125, 0, 0, 220, 0,
	126, 0, 0, 261, 0, 0, 128, 0, 129, 130,
	131, 132, 269, 0, 134, 135, 138, 136, 0, 137,
	0, 221, 139, 222, 140, 141, 0, 0, 0, 0,
	0, 142, 223, 0, 143, 0, 224, 144, 145, 0,
	225, 146, 226, 147, 0, 148, 149, 150, 227, 151,
	152, 0, 154, 155, 153, 156, 0, 157, 0, 158,
	159, 263, 160, 0, 161, 162, 163, 0, 229, 164,
	262, 0, 166, 167, 0, 168, 230, 231, 169, 0,
	170, 171, 173, 232, 172, 233, 0, 174, 0, 175,
	176, 0, 268, 235, 236, 0, 0, 264, 237, 238,
	0, 178, 179, 180, 181, 0, 0, 182, 183, 184,
	0, 0, 185, 186, 187, 239, 240, 83, 188, 0,
	0, 0, 0, 189, 190, 191, 192, 0, 0, 86,
	87, 0, 88, 0, 0, 0, 0, 193, 0, 0,
	0, 0, 89, 90, 194, 195, 196, 197, 91, 198,
	199, 0, 92, 200, 201, 93, 0, 0, 202, 203,
	204, 0, 205, 0, 0, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 206, 106,
	207, 208, 0, 107, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 209, 112, 113, 210,
	0, 0, 0, 114, 115, 211, 0, 116, 0, 117,
	0, 0, 0, 0, 118, 212, 0, 213, 0, 119,
	120, 214, 215, 0, 0, 0, 121, 0, 0, 122,
	216, 217, 218, 0, 219, 0, 0, 123, 0, 124,
	125, 0, 0, 220, 0, 126, 0, 0, 127, 0,
	0, 128, 0, 129, 130, 131, 132, 133, 0, 134,
	135, 138, 136, 0, 137, 0, 221, 139, 222, 140,
	141, 0, 0, 0, 0, 0, 142, 223, 0, 143,
	0, 224, 144, 0, 0, 225, 146, 226, 147, 0,
	148, 0, 150, 227, 151, 152, 0, 154, 155, 153,
	156, 0, 157, 0, 158, 159, 228, 0, 0, 161,
	162, 163, 0, 229, 164, 165, 0, 166, 167, 0,
	168, 230, 231, 169, 0, 170, 171, 173, 232, 172,
	233, 0, 174, 0, 175, 176, 0, 234, 235, 236,
	0, 0, 177, 237, 238, 0, 178, 179, 180, 181,
	0, 0, 182, 183, 184, 0, 0, 185, 186, 187,
	239, 240, 808, 188, 827, 828, 829, 0, 189, 190,
	191, 192, 0, 0, 830, 0, 0, 0, 0, 0,
	0, 810, 808, 837, 827, 828, 829, 0, 0, 0,
	0, 0, 0, 0, 830, 0, 0, 0, 0, 0,
	0, 810, 809, 837, 0, 0, 0, 0, 824, 0,
	0, 0, 0, 0, 808, 0, 827, 828, 829, 0,
	0, 0, 809, 0, 0, 0, 830, 0, 824, 0,
	0, 0, 0, 810, 0, 837, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 809, 815, 0, 0, 0, 0,
	824, 0, 808, 0, 827, 828, 829, 0, 0, 0,
	0, 0, 838, 834, 830, 815, 0, 0, 0, 0,
	0, 810, 0, 837, 0, 836, 0, 0, 0, 0,
	0, 0, 838, 834, 0, 832, 0, 0, 0, 0,
	0, 825, 809, 0, 0, 836, 0, 815, 824, 0,
	0, 0, 0, 0, 0, 832, 0, 0, 0, 0,
	0, 825, 0, 831, 838, 834, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 836, 0, 0,
	0, 0, 0, 831, 0, 0, 0, 832, 0, 0,
	0, 0, 0, 825, 0, 815, 0, 826, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 835, 0,
	0, 0, 838, 834, 0, 831, 0, 826, 0, 0,
	0, 0, 0, 0, 0, 836, 0, 0, 835, 0,
	0, 0, 0, 0, 0, 832, 0, 0, 0, 0,
	0, 825, 0, 0, 0, 0, 0, 0, 0, 826,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	835, 833, 0, 831, 821, 822, 823, 0, 820, 817,
	818, 819, 811, 812, 813, 814, 816, 0, 0, 0,
	0, 833, 1730, 0, 821, 822, 823, 0, 820, 817,
	818, 819, 811, 812, 813, 814, 816, 826, 0, 0,
	0, 0, 1729, 0, 0, 0, 0, 0, 835, 0,
	0, 0, 0, 833, 0, 0, 821, 822, 823, 0,
	820, 817, 818, 819, 811, 812, 813, 814, 816, 0,
	0, 0, 0, 0, 1710, 0, 0, 808, 0, 827,
	828, 829, 0, 0, 0, 0, 0, 0, 0, 830,
	0, 0, 0, 0, 0, 0, 810, 0, 837, 0,
	0, 833, 0, 0, 821, 822, 823, 0, 820, 817,
	818, 819, 811, 812, 813, 814, 816, 809, 0, 0,
	0, 0, 1689, 824, 0, 808, 0, 827, 828, 829,
	0, 0, 0, 0, 0, 0, 0, 830, 0, 0,
	0, 0, 0, 0, 810, 0, 837, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 808, 0, 827,
	828, 829, 0, 0, 0, 809, 0, 0, 0, 830,
	815, 824, 0, 0, 0, 0, 810, 808, 837, 827,
	828, 829, 0, 0, 0, 0, 0, 838, 834, 830,
	0, 0, 0, 0, 0, 0, 810, 809, 837, 0,
	836, 0, 0, 824, 0, 0, 0, 0, 0, 0,
	832, 0, 0, 0, 0, 0, 825, 809, 815, 0,
	0, 0, 0, 824, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 838, 834, 0, 831, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 836, 0,
	815, 0, 0, 0, 0, 0, 0, 0, 832, 0,
	0, 0, 0, 0, 825, 0, 0, 838, 834, 0,
	815, 0, 826, 0, 0, 0, 0, 0, 0, 0,
	836, 0, 0, 835, 0, 0, 831, 838, 834, 0,
	832, 0, 0, 0, 0, 0, 825, 0, 0, 0,
	836, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	832, 0, 0, 0, 0, 0, 825, 0, 831, 0,
	826, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 835, 0, 0, 0, 0, 833, 0, 831, 821,
	822, 823, 0, 820, 817, 818, 819, 811, 812, 813,
	814, 816, 826, 0, 0, 0, 0, 1684, 0, 0,
	0, 0, 0, 835, 0, 0, 0, 0, 0, 0,
	0, 0, 826, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 835, 833, 0, 0, 821, 822, 823,
	0, 820, 817, 818, 819, 811, 812, 813, 814, 816,
	0, 0, 0, 0, 0, 1680, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 833, 0, 0, 821,
	822, 823, 0, 820, 817, 818, 819, 811, 812, 813,
	814, 816, 0, 0, 0, 0, 833, 1617, 0, 821,
	822, 823, 0, 820, 817, 818, 819, 811, 812, 813,
	814, 816, 808, 0, 827, 828, 829, 1616, 0, 0,
	0, 0, 0, 0, 830, 0, 0, 0, 0, 0,
	0, 810, 808, 837, 827, 828, 829, 0, 0, 0,
	0, 0, 0, 0, 830, 0, 0, 0, 0, 0,
	0, 810, 809, 837, 0, 0, 0, 0, 824, 0,
	0, 0, 0, 0, 808, 0, 827, 828, 829, 0,
	0, 0, 809, 0, 0, 0, 830, 0, 824, 0,
	0, 0, 0, 810, 0, 837, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 809, 815, 0, 0, 0, 0,
	824, 0, 808, 0, 827, 828, 829, 0, 0, 0,
	0, 0, 838, 834, 830, 815, 0, 0, 0, 0,
	0, 810, 0, 837, 0, 836, 0, 0, 0, 0,
	0, 0, 838, 834, 0, 832, 0, 0, 0, 0,
	0, 825, 809, 0, 0, 836, 0, 815, 824, 0,
	0, 0, 0, 0, 0, 832, 0, 0, 0, 0,
	0, 825, 0, 831, 838, 834, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 836, 0, 0,
	0, 0, 0, 831, 0, 0, 0, 832, 0, 0,
	0, 0, 0, 825, 0, 815, 0, 826, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 835, 0,
	0, 0, 838, 834, 0, 831, 0, 826, 0, 0,
	0, 0, 0, 0, 0, 836, 0, 0, 835, 0,
	0, 0, 0, 0, 0, 832, 0, 0, 0, 0,
	0, 825, 0, 0, 0, 0, 0, 0, 0, 826,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	835, 833, 0, 831, 821, 822, 823, 0, 820, 817,
	818, 819, 811, 812, 813, 814, 816, 0, 0, 0,
	0, 833, 1524, 0, 821, 822, 823, 0, 820, 817,
	818, 819, 811, 812, 813, 814, 816, 826, 0, 0,
	0, 0, 1459, 0, 0, 0, 0, 0, 835, 0,
	0, 0, 0, 833, 0, 0, 821, 822, 823, 0,
	820, 817, 818, 819, 811, 812, 813, 814, 816, 0,
	0, 0, 0, 0, 1443, 0, 0, 808, 0, 827,
	828, 829, 0, 0, 0, 0, 0, 0, 0, 830,
	0, 0, 0, 0, 0, 0, 810, 0, 837, 0,
	0, 833, 0, 0, 821, 822, 823, 0, 820, 817,
	818, 819, 811, 812, 813, 814, 816, 809, 0, 0,
	0, 0, 1081, 824, 0, 808, 0, 827, 828, 829,
	0, 0, 0, 0, 0, 0, 0, 830, 0, 0,
	0, 0, 0, 0, 810, 0, 837, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 808, 0, 827,
	828, 829, 0, 0, 0, 809, 0, 0, 0, 830,
	815, 824, 0, 0, 0, 0, 810, 0, 837, 0,
	0, 0, 0, 0, 0, 0, 0, 838, 834, 0,
	0, 0, 0, 0, 0, 0, 0, 809, 0, 0,
	836, 0, 0, 824, 0, 0, 0, 0, 0, 0,
	832, 0, 0, 0, 0, 0, 825, 0, 815, 1794,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 838, 834, 0, 831, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 836, 0,
	815, 0, 1333, 0, 0, 1332, 0, 0, 832, 0,
	0, 0, 0, 0, 825, 0, 0, 838, 834, 0,
	0, 0, 826, 0, 0, 0, 0, 0, 0, 0,
	836, 0, 0, 835, 0, 0, 831, 0, 0, 0,
	832, 0, 0, 0, 0, 0, 825, 0, 1793, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 831, 0,
	826, 0, 0, 0, 0, 1302, 0, 1319, 1320, 1321,
	0, 835, 0, 0, 0, 0, 833, 1438, 0, 821,
	822, 823, 0, 820, 817, 818, 819, 811, 812, 813,
	814, 816, 826, 0, 0, 1507, 0, 0, 0, 0,
	0, 0, 808, 835, 827, 828, 829, 0, 0, 0,
	0, 1316, 0, 0, 830, 0, 0, 0, 0, 1019,
	0, 810, 0, 837, 833, 0, 0, 821, 822, 823,
	0, 820, 817, 818, 819, 811, 812, 813, 814, 816,
	0, 0, 809, 0, 0, 0, 0, 0, 824, 0,
	0, 1302, 0, 1319, 1320, 1321, 833, 0, 1307, 821,
	822, 823, 0, 820, 817, 818, 819, 811, 812, 813,
	814, 816, 0, 0, 0, 1020, 840, 0, 0, 0,
	0, 0, 808, 0, 827, 828, 829, 0, 1322, 0,
	0, 0, 0, 0, 830, 815, 0, 1316, 839, 0,
	0, 810, 0, 837, 1317, 0, 0, 0, 0, 0,
	0, 0, 838, 834, 0, 0, 0, 0, 0, 0,
	0, 0, 809, 0, 0, 836, 0, 0, 824, 0,
	0, 0, 0, 0, 0, 832, 0, 0, 0, 0,
	0, 825, 0, 0, 1307, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1318, 0, 0, 831, 0, 0, 0, 0, 0, 0,
	808, 0, 827, 828, 829, 815, 0, 0, 0, 0,
	0, 0, 830, 0, 0, 0, 0, 0, 0, 810,
	1317, 837, 838, 834, 0, 0, 0, 826, 0, 0,
	0, 0, 0, 0, 0, 836, 0, 0, 835, 0,
	809, 0, 0, 0, 0, 832, 824, 0, 0, 0,
	0, 825, 0, 0, 0, 0, 0, 1313, 1314, 1315,
	0, 1312, 1309, 1310, 1311, 1303, 1304, 1305, 1306, 1308,
	0, 0, 0, 831, 0, 0, 1318, 0, 0, 0,
	1302, 0, 1319, 1320, 1321, 0, 0, 0, 0, 0,
	0, 833, 1437, 815, 821, 822, 823, 0, 820, 817,
	818, 819, 811, 812, 813, 814, 816, 826, 0, 0,
	838, 834, 0, 0, 0, 0, 0, 808, 835, 827,
	828, 829, 0, 836, 0, 0, 1316, 0, 0, 830,
	0, 0, 0, 832, 0, 0, 810, 0, 837, 825,
	0, 0, 0, 1313, 1314, 1315, 0, 1312, 1309, 1310,
	1311, 1303, 1304, 1305, 1306, 1308, 0, 809, 0, 0,
	0, 831, 310, 824, 0, 0, 0, 0, 0, 0,
	0, 833, 0, 1307, 821, 822, 823, 0, 820, 817,
	818, 819, 811, 812, 813, 814, 816, 0, 0, 0,
	0, 0, 0, 0, 0, 826, 0, 808, 0, 827,
	828, 829, 0, 1322, 0, 0, 835, 0, 0, 830,
	815, 0, 0, 0, 0, 0, 810, 0, 837, 1317,
	0, 0, 0, 0, 0, 0, 0, 838, 834, 0,
	0, 0, 0, 0, 0, 0, 0, 809, 0, 0,
	836, 0, 0, 824, 0, 0, 0, 0, 0, 0,
	832, 0, 0, 0, 0, 0, 825, 0, 0, 833,
	0, 0, 821, 822, 823, 0, 820, 817, 818, 819,
	811, 812, 813, 814, 816, 1318, 0, 0, 831, 0,
	0, 0, 0, 0, 0, 808, 0, 827, 828, 829,
	815, 0, 0, 0, 0, 1339, 0, 830, 0, 0,
	0, 1334, 0, 0, 810, 0, 837, 838, 834, 0,
	0, 0, 826, 0, 1302, 0, 1319, 1320, 1321, 0,
	836, 0, 0, 835, 0, 809, 0, 0, 0, 0,
	832, 824, 0, 0, 0, 0, 825, 0, 0, 0,
	1453, 0, 1313, 1314, 1315, 0, 1312, 1309, 1310, 1311,
	1303, 1304, 1305, 1306, 1308, 0, 0, 0, 831, 0,
	1316, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 833, 0, 815, 821,
	822, 823, 0, 820, 817, 818, 819, 811, 812, 813,
	814, 816, 826, 0, 0, 838, 834, 0, 0, 0,
	0, 0, 808, 835, 827, 828, 829, 1307, 836, 0,
	0, 0, 0, 0, 830, 0, 0, 0, 832, 0,
	0, 810, 0, 837, 825, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1322, 0, 0,
	0, 0, 809, 0, 0, 0, 831, 0, 824, 0,
	0, 0, 0, 1317, 0, 0, 833, 0, 0, 821,
	822, 823, 0, 820, 817, 818, 819, 811, 812, 813,
	814, 816, 0, 0, 0, 0, 0, 0, 0, 0,
	826, 0, 808, 0, 827, 828, 829, 0, 0, 0,
	0, 835, 0, 0, 830, 815, 0, 0, 1294, 0,
	0, 810, 0, 837, 0, 0, 0, 0, 0, 1318,
	0, 0, 838, 834, 0, 0, 0, 0, 0, 0,
	0, 0, 809, 0, 0, 836, 0, 0, 824, 0,
	0, 0, 0, 0, 0, 832, 0, 0, 0, 0,
	0, 825, 0, 0, 833, 0, 0, 821, 822, 823,
	0, 820, 817, 818, 819, 811, 812, 813, 814, 816,
	0, 0, 0, 831, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1300, 0, 815, 1313, 1314, 1315, 0,
	1312, 1309, 1310, 1311, 1303, 1304, 1305, 1306, 1308, 0,
	0, 0, 838, 834, 0, 0, 0, 826, 808, 0,
	827, 828, 829, 0, 0, 836, 0, 0, 835, 0,
	830, 0, 0, 0, 0, 832, 0, 810, 0, 837,
	0, 825, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 809, 0,
	0, 0, 0, 831, 824, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 833, 0, 0, 821, 822, 823, 0, 820, 817,
	818, 819, 811, 812, 813, 814, 816, 826, 808, 0,
	827, 828, 829, 0, 0, 0, 0, 0, 835, 0,
	0, 815, 0, 0, 0, 0, 0, 810, 0, 837,
	0, 0, 0, 0, 0, 0, 0, 0, 838, 834,
	0, 0, 1302, 0, 1319, 1320, 1321, 0, 809, 0,
	0, 836, 0, 0, 824, 0, 0, 0, 0, 0,
	0, 832, 0, 0, 0, 0, 0, 825, 0, 0,
	0, 833, 0, 0, 821, 822, 823, 0, 820, 817,
	818, 819, 811, 812, 813, 814, 816, 0, 1316, 831,
	0, 0, 0, 0, 0, 0, 808, 0, 827, 828,
	829, 815, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 810, 0, 837, 838, 834,
	0, 0, 0, 826, 0, 0, 0, 0, 0, 0,
	0, 836, 0, 0, 835, 1307, 809, 0, 0, 0,
	0, 832, 824, 0, 0, 0, 0, 825, 0, 0,
	0, 0, 1323, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1322, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1317, 0, 0, 0, 0, 0, 833, 0, 815,
	821, 822, 823, 0, 820, 817, 818, 819, 811, 812,
	813, 814, 816, 826, 0, 0, 838, 834, 0, 0,
	0, 0, 0, 0, 835, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 832,
	0, 0, 0, 0, 0, 825, 0, 1318, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 833, 0, 0,
	821, 822, 823, 0, 820, 817, 818, 819, 811, 812,
	813, 814, 816, 0, 0, 0, 0, 0, 0, 0,
	0, 826, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 835, 0, 1313, 1314, 1315, 0, 1312, 1309,
	1310, 1311, 1303, 1304, 1305, 1306, 1308, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 833, 0, 0, 821, 822,
	823, 0, 820, 817, 818, 819, 811, 812, 813, 814,
	816,
}
var sqlPact = [...]int{

	748, -1000, 53, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 862, -1000, -1000, -1000, 749, 740,
	1274, 15318, 15318, 15063, 1097, 1097, 16593, -1000, -1000, 19398,
	-1000, 2534, 490, 492, 490, 490, 486, 16593, 576, 647,
	258, -1000, 1058, 18, 19143, 15318, 1305, 43, 14043, 342,
	748, 14808, 15318, 18888, 1138, 1049, 1042, 14043, 18633, 18378,
	18123, -1000, 9341, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 575, 354, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 351, -1000, 14553, -1000, 855, -1000, 42, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 852, -1000, 15318, -1000,
	-1000, 17868, 17613, 344, 811, -1000, -1000, 545, 400, 1321,
	-1000, 59, -1000, -1000, 1137, -1000, 846, 1134, 1130, 1124,
	1123, 1119, 1117, 397, 838, -1000, 574, 811, -1000, 811,
	-1000, -1000, -1000, 546, 16593, -1000, 14043, -1000, 17358, 1072,
	17103, -1000, 1058, -1000, -1000, -1000, 914, 1300, 1300, 1300,
	1306, 158, 153, 258, 36, 15318, -1000, 343, 36, 6413,
	6413, -1000, -1000, 342, -1000, 368, 11992, 50, -1000, 6947,
	-1000, 810, 1215, 716, 704, 1206, -86, 14043, 15318, 15318,
	620, 16848, -1000, 1204, 120, 1201, -1000, 117, 1193, -1000,
	16, -1000, -1000, -1000, -1000, -1000, -1000, 342, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 14298, 1334, 3190, -1000, 8277, -1000, -1000, 12258,
	935, 12258, -1000, -1000, 1328, -1000, 8277, -1000, 41, 40,
	1012, 1053, 9874, 9608, 1255, 882, -1000, -1000, -1000, 57,
	4008, 15318, 1149, 12258, 15318, 15318, 15318, 15318, 15318, -1000,
	15318, -1000, 1011, -1000, 15318, -1000, 39, 37, -1000, 16593,
	-1000, 123, -1000, 339, 976, 16338, 1221, 954, -1000, 914,
	-1000, 798, 1007, 7479, 8277, 258, -1000, -1000, 258, 258,
	8277, -1000, -1000, 15318, 36, 1322, 15318, 134, -1000, 21312,
	-1000, -1000, 8277, 8277, 8277, 8277, 8277, 760, -1000, -1000,
	-1000, 4809, -1000, -1000, 50, 338, 357, -1000, -1000, 327,
	50, -1000, -1000, -1000, -1000, 325, 1448, 373, -1000, -1000,
	-1000, 8277, 406, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1146, 324, 311, -1000, -1000, -1000, -1000, 308,
	305, 304, 300, 299, 295, 281, 279, 275, 272, 271,
	267, 265, 264, 741, -1000, 419, -1000, -1000, 419, 419,
	-1000, 259, 259, 260, -1000, -1000, -1000, 259, -1000, -1000,
	-1000, 391, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 261,
	134, -1000, -1000, -1000, 15318, 50, -1000, -1000, -1000, 8277,
	3741, 15, -1000, 21998, -1000, 0, 830, -1000, 13278, 1278,
	1273, 1270, 14043, 544, 539, 15318, 15318, 412, 101, 1320,
	101, 11460, -1000, 15318, 15318, -1000, 15318, -1000, -1000, 15318,
	-1000, 15318, 15318, 205, 12768, 709, 1192, 18, -3, -1000,
	1338, -1000, -1000, -1000, -1000, 88, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 260,
	741, 259, 259, 259, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 391, -1000, -1000, 419, 419, 419, -1000, -1000, -4,
	21998, 536, 19, 12513, 15318, -1000, 56, -1000, -1000, 1116,
	485, -10, 728, 1041, 851, -1000, -1000, -1000, -1000, 35,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1403, -1000, -1000, -1000, -1000, 1416, 35, -1000, -1000, -1000,
	-1000, -1000, 1447, -1000, -1000, -1000, 4008, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 15318, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 728, 1041, -1000, -1000, 14043, 13023,
	1191, 834, 938, -1000, -1000, 381, 1185, -1000, -1000, -1000,
	-1000, 21998, -1000, 21998, 677, 1052, -1000, 1052, 29, -1000,
	21232, -1000, 257, -22, -1000, 412, 6413, 11194, 3190, 15318,
	566, 8277, 8277, 8277, 8277, 8277, 8277, 8277, 8277, 8277,
	8277, 8277, 8277, 8277, 8277, 8277, 8277, 8277, 8277, 8277,
	8277, 8277, 8277, 1066, 8277, 529, 1073, 813, 244, 4008,
	-1000, 1388, 1388, 1388, 22078, 22078, 243, 28, 20712, 20,
	50, -1000, -1000, 6147, 5879, 50, 4273, -1000, 646, 1414,
	415, 21998, 1159, 1089, 254, 152, 151, 8277, 8277, 983,
	8277, 8543, 8277, 8277, 5077, 8277, 8277, 8277, 8277, 8277,
	8277, -1000, 253, -1000, -1000, -1000, -1000, 1413, -1000, -1000,
	1411, -1000, 551, 550, 1410, 412, 150, -1000, 2108, -1000,
	-1000, 6947, -1000, 709, 15318, 15318, 15318, -1000, -1000, 908,
	16083, -1000, 3190, 15318, -1000, 252, 248, 1023, 1020, 15318,
	15318, 15828, 15573, 15318, 725, 15318, 15318, 689, -1000, 666,
	8277, 730, -1000, 10662, 424, 15318, 678, 126, -1000, -1000,
	-1000, 380, 15318, -1000, -1000, -1000, 120, -1000, 117, -1000,
	-1000, 14043, -1000, -1000, -1000, -1000, -1000, -1000, 3190, 361,
	360, -1000, 1407, 525, -1000, 524, 522, 520, -1000, 247,
	-1000, 8277, 15318, 12513, 19, 11, -1000, -1000, 15318, 1041,
	-1000, -1000, -1000, -1000, 662, -1000, 713, -1000, 10140, -1000,
	-1000, -1000, 646, -1000, -15, -1000, -1000, -1000, -1000, 146,
	5, -1000, -1000, -1000, -1000, -1000, 15318, 269, 15318, 15318,
	15318, 1183, 1445, 15318, -1000, -1000, -1000, 8277, -1000, -1000,
	-1000, 18, 15318, -1000, 1082, -1000, 1, 1064, -92, 13788,
	-1000, 10395, -1000, -1000, 396, 765, 765, 1362, 1362, 1362,
	1362, 2060, 2060, 2249, 1868, 2532, 2532, 2532, 1612, 542,
	542, 2532, 2532, 2532, 22078, 223, 569, 8277, 8277, 517,
	792, 244, 569, 8277, -1000, 1006, -1000, -1000, -1000, 1113,
	242, 8543, 8543, -1000, -1000, -1000, 4809, -1000, -1000, 241,
	8277, -1000, 8277, -19, -23, -1000, -1000, -26, -1000, -1000,
	-17, 8277, 8277, 8277, 144, -1000, 143, 595, -1000, 8277,
	766, 238, 234, 8277, -1000, -1000, 21882, 3158, 142, 1102,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 139, 21802, 135,
	22112, -1000, 8543, 8543, 8543, 4809, 232, 132, 21027, -81,
	21685, 7213, 7213, 7213, 131, 21597, 8277, -81, 3058, 2860,
	2819, -33, -35, -37, 1406, -43, 128, 395, 392, 127,
	1082, -1000, -1000, 8277, -1000, -1000, -1000, 516, 514, 1182,
	-1000, 900, -1000, 848, 8277, 15318, 231, 227, 746, -1000,
	1178, 819, 1175, 819, -1000, 0, 820, -1000, -1000, 506,
	-1000, 6413, 21998, -1000, 676, 1272, -47, -1000, -1000, -1000,
	6413, 412, 11460, 6947, -52, -1000, -1000, 709, -1000, 507,
	1401, 122, 996, 722, 708, 629, 1397, 21998, -15, -1000,
	-15, -1000, -1000, -1000, -1000, -1000, -1000, 15318, -1000, 13023,
	222, 15318, 221, 220, 204, 15318, -1000, 1221, -1000, 113,
	-1000, 1075, 1304, 11194, 1036, 1030, 11194, 1132, 773, 773,
	773, -1000, 13788, 3461, -1000, -1000, 15318, 202, 10929, 110,
	1064, 8277, 569, 569, 8277, 8543, 8543, -1000, 569, -1000,
	-1000, -1000, -1000, 1100, 197, 8277, 3190, 21480, 21195, -61,
	5611, -21, 20664, -1000, -1000, 357, -1000, 108, 6681, -1000,
	21400, 9, 9, -1000, 1444, 1219, -1000, 8277, 21517, -1000,
	11726, 413, 787, 20632, 3190, 3190, -1000, 8277, -1000, 1098,
	8277, -1000, 3190, 8543, 8543, 8543, 8543, 8543, 8543, 8543,
	8543, 8543, 8543, 8543, 8543, 8543, 8543, 8543, 8543, 8543,
	8543, 8543, 1001, 8543, 1387, 1387, 1387, -42, 5343, -1000,
	1135, 1098, 8277, 8277, 3190, 106, 102, 96, -1000, 8277,
	-81, 8277, 8277, 8277, -1000, -1000, -1000, 95, -1000, 1394,
	-1000, -1000, -1000, -1000, 1075, 20947, 15318, 15318, 15318, 1173,
	2033, -1000, 20612, -65, 15318, 15318, -1000, 1016, 1068, 472,
	15318, -1000, 15318, -1000, 15318, 15318, 15318, 15318, -44, 6413,
	219, 18, 15318, -44, 666, -1000, -1000, 378, -1000, 236,
	224, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 94,
	-1000, -1000, 9075, 194, 15318, 13023, 9075, 828, -1000, -1000,
	410, 8277, 8277, 1064, 11194, 11194, 1385, 1025, 11194, -1000,
	-1000, -1000, -1000, 385, -1000, 1040, 193, 15318, 13788, 1352,
	569, 2972, 1893, 8277, 3190, 22166, -67, 8277, 8277, -1000,
	-72, -1000, 8277, -1000, -1000, 1419, 8277, 91, 86, 85,
	-1000, -1000, 21998, 8277, -1000, -1000, 19653, 8277, 84, -1000,
	80, 78, 21998, 1135, 21998, -1000, 657, 657, 1387, 1387,
	1387, 1387, 454, 454, 797, 509, 2039, 2039, 2039, 174,
	488, 488, 2039, 2039, 2039, 1096, 945, 192, 21714, 8277,
	-77, -1000, -1000, -1000, 21998, 21998, 71, -1000, -1000, -1000,
	-81, 2506, 20337, 20317, -1000, 69, 410, -1000, -1000, -1000,
	-1000, 15318, -1000, 15318, -1000, 15318, 13533, 890, -1000, -1000,
	1019, 190, 8543, 15318, -1000, 757, -83, -84, 889, -1000,
	880, 8277, -1000, 3190, 819, 819, -1000, 504, 503, -1000,
	-44, 1226, 15318, 1262, -1000, -1000, -1000, 189, -1000, -1000,
	-1000, -89, -1000, 235, 1283, 8277, -1000, -1000, 188, 9075,
	-93, -1000, -1000, 67, -94, 15318, -1000, 15318, 21998, -81,
	-1000, 1385, -1000, 187, 8277, 11194, -1000, -1000, 865, -142,
	-1000, 377, -1000, 15318, -95, -1000, 8277, 8277, 22166, -99,
	-1000, 569, 569, -1000, 20285, -1000, 21400, -1000, -1000, -1000,
	21998, 752, -1000, 20237, -1000, -1000, -1000, -1000, 8543, 1095,
	184, 3190, 20002, -1000, -1000, 8277, -1000, -1000, -1000, -1000,
	-1000, 815, -1000, -1000, -1000, -1000, -1000, 8277, 21714, 183,
	-1000, 182, -1000, -1000, -1000, 724, -1000, -1000, 21998, 1288,
	-1000, -1000, 15318, 15318, 527, -100, 15318, -1000, -1000, 4541,
	757, 9075, 1285, 50, 15318, 1285, 19954, 4273, -105, -1000,
	15318, -1000, 757, 181, -74, -1000, 1318, -1000, 15318, 21998,
	-1000, 587, 1040, -1000, 4008, -111, -1000, 569, 569, -1000,
	-1000, 64, 787, 1301, -1000, 21281, 8543, 3190, -115, -1000,
	19922, -1000, 19902, 1002, 15318, 15318, 15318, 431, 15318, -1000,
	-1000, 616, -1000, 412, -1000, -1000, -1000, -1000, -1000, -1000,
	1283, -17, 757, -1000, -1000, 9075, 15318, 179, -116, 493,
	-1000, -1000, -1000, -1000, 656, 8277, 21281, -117, -1000, -1000,
	-1000, 800, 847, 63, -121, 176, -1000, 8277, -1000, 11460,
	-1000, 1285, 62, -1000, -123, -1000, -1000, -1000, 1390, 21,
	8011, 8011, -81, -1000, -1000, 825, 823, 605, -1000, -1000,
	-1000, -1000, -1000, 1002, 15318, 21998, -101, -1000, -1000, 757,
	-1000, -1000, -1000, -1000, 8809, 861, 654, 20995, -1000, -1000,
	1232, -1000, 435, 986, 986, 800, -130, -1000, -1000, 1342,
	-1000, -1000, -1000, -1000, -1000, -1000, 1358, -1000, -1000, 971,
	-1000, -1000, -1000, 7745, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1698, 1694, 1327, 127, 126, 1687, 1685, 1684, 115,
	125, 122, 128, 1682, 85, 1673, 1660, 1656, 110, 1653,
	1652, 1651, 109, 1648, 1642, 1640, 1635, 1633, 98, 51,
	171, 230, 166, 1627, 1625, 1624, 11, 102, 65, 1623,
	39, 49, 95, 104, 1054, 67, 1619, 1616, 135, 41,
	16, 24, 96, 144, 123, 133, 1615, 1614, 1611, 45,
	1610, 1609, 1605, 1604, 46, 21, 1603, 23, 1602, 14,
	1597, 1596, 101, 1595, 100, 114, 26, 121, 12, 1594,
	74, 10, 77, 1593, 18, 1592, 43, 78, 143, 1589,
	61, 150, 60, 36, 57, 1587, 1586, 1582, 1581, 82,
	1580, 91, 75, 1578, 1570, 76, 1569, 132, 130, 1567,
	1565, 137, 1562, 1560, 1559, 719, 1558, 1556, 466, 1555,
	3, 27, 52, 5, 113, 112, 53, 1553, 29, 1552,
	1672, 534, 618, 1551, 50, 54, 79, 35, 58, 20,
	1550, 1549, 106, 1547, 1546, 1541, 1537, 1536, 80, 1535,
	66, 139, 42, 47, 90, 22, 31, 87, 89, 152,
	149, 111, 1534, 1533, 120, 1532, 186, 1530, 1529, 821,
	118, 1528, 1527, 1525, 764, 755, 752, 142, 1523, 1522,
	528, 383, 1519, 1515, 119, 1513, 1511, 145, 1509, 215,
	25, 1508, 116, 1507, 84, 1505, 0, 44, 30, 1500,
	131, 72, 1499, 1497, 1496, 1495, 17, 2, 7, 6,
	9, 4, 28, 19, 1493, 1492, 134, 107, 1488, 147,
	1486, 1485, 38, 1484, 1479, 15, 1478, 13, 1476, 8,
	1, 1475, 136, 1473, 93, 1472, 1367, 1470, 148, 1468,
	1466, 1387, 81,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 4, 4, 38, 38, 37,
	37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
	37, 37, 37, 37, 35, 35, 40, 40, 40, 39,
	39, 34, 34, 5, 5, 5, 9, 10, 10, 10,
	10, 10, 10, 77, 77, 76, 76, 79, 79, 11,
	11, 12, 12, 12, 12, 12, 12, 12, 12, 165,
	165, 164, 13, 140, 140, 14, 14, 14, 14, 15,
	100, 100, 16, 16, 16, 16, 17, 21, 232, 232,
	232, 236, 236, 237, 237, 238, 238, 238, 238, 238,
	238, 238, 234, 234, 24, 24, 24, 24, 24, 119,
	115, 115, 117, 117, 117, 117, 43, 114, 114, 114,
	114, 116, 116, 116, 116, 189, 187, 187, 194, 194,
	194, 56, 56, 56, 56, 56, 57, 57, 57, 186,
	186, 186, 186, 195, 195, 195, 195, 195, 195, 58,
	58, 58, 193, 193, 25, 25, 25, 25, 25, 25,
	25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
	188, 188, 233, 233, 235, 235, 8, 8, 59, 59,
	60, 60, 122, 122, 122, 122, 121, 204, 204, 205,
	205, 205, 205, 205, 206, 206, 206, 206, 206, 206,
	206, 202, 202, 203, 200, 200, 201, 201, 201, 201,
	239, 239, 120, 120, 63, 63, 209, 209, 209, 209,
	207, 207, 207, 207, 207, 210, 208, 211, 211, 211,
	211, 211, 151, 151, 151, 27, 7, 7, 104, 104,
	67, 67, 155, 155, 155, 68, 68, 156, 50, 50,
	36, 36, 36, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 105, 105, 106, 106, 19, 23, 26, 26,
	26, 26, 26, 241, 241, 47, 47, 47, 47, 48,
	48, 118, 118, 118, 118, 118, 42, 6, 6, 41,
	41, 18, 18, 18, 18, 18, 53, 53, 111, 111,
	111, 113, 113, 112, 112, 112, 90, 90, 28, 81,
	81, 82, 82, 162, 83, 83, 22, 22, 31, 31,
	29, 29, 29, 29, 29, 29, 30, 30, 32, 32,
	32, 32, 32, 32, 32, 217, 217, 217, 219, 219,
	216, 218, 218, 240, 240, 91, 91, 91, 62, 61,
	61, 65, 65, 64, 66, 66, 154, 88, 88, 88,
	88, 107, 108, 108, 109, 109, 110, 110, 87, 87,
	137, 137, 33, 33, 72, 72, 73, 73, 128, 128,
	129, 129, 127, 127, 127, 157, 157, 157, 157, 158,
	158, 158, 158, 158, 158, 152, 152, 152, 152, 153,
	153, 163, 163, 94, 94, 94, 94, 92, 92, 93,
	93, 159, 159, 159, 159, 89, 89, 160, 160, 160,
	123, 123, 166, 166, 166, 71, 71, 71, 167, 167,
	167, 167, 167, 167, 167, 167, 167, 167, 167, 167,
	167, 168, 168, 168, 168, 170, 170, 170, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 171, 171, 178, 178, 179, 179, 180, 181, 172,
	172, 173, 173, 174, 175, 182, 182, 182, 182, 184,
	184, 176, 176, 176, 176, 176, 177, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 102, 102, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 212, 212,
	212, 212, 212, 212, 212, 214, 214, 215, 215, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 220, 220, 221, 221, 222,
	222, 223, 223, 225, 226, 226, 226, 227, 231, 231,
	224, 224, 228, 228, 228, 229, 229, 230, 230, 230,
	230, 230, 142, 142, 142, 143, 143, 144, 78, 78,
	139, 139, 138, 138, 138, 141, 141, 95, 183, 183,
	183, 183, 183, 183, 183, 96, 96, 103, 97, 97,
	98, 98, 98, 98, 98, 98, 134, 135, 99, 99,
	99, 136, 136, 145, 149, 149, 148, 147, 147, 146,
	146, 126, 126, 126, 126, 125, 124, 84, 84, 242,
	242, 150, 150, 85, 85, 86, 80, 80, 161, 161,
	161, 161, 74, 74, 55, 55, 75, 75, 51, 51,
	54, 52, 52, 52, 52, 69, 69, 70, 70, 49,
	49, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 185, 185, 185, 44, 44, 44, 45, 45,
	46, 46, 191, 191, 191, 192, 192, 192, 192, 190,
	190, 190, 190, 190, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 4, 6, 1, 3, 2,
	5, 3, 6, 4, 6, 6, 6, 4, 8, 2,
	3, 3, 6, 4, 3, 2, 1, 1, 0, 2,
	0, 2, 0, 1, 1, 1, 6, 3, 5, 4,
	6, 4, 6, 1, 3, 1, 2, 2, 3, 2,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 1, 5, 3, 0, 1, 1, 1, 1, 3,
	3, 0, 2, 3, 2, 3, 6, 6, 1, 2,
	2, 1, 1, 1, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 2, 3, 6, 3, 1, 5,
	2, 1, 1, 1, 3, 3, 2, 3, 3, 3,
	3, 1, 3, 3, 2, 1, 1, 3, 1, 1,
	1, 2, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 1, 1, 1, 1,
	1, 0, 1, 1, 2, 2, 4, 2, 4, 4,
	4, 4, 4, 4, 3, 3, 4, 3, 2, 4,
	2, 0, 2, 0, 2, 0, 6, 9, 1, 0,
	1, 3, 1, 1, 1, 1, 3, 2, 0, 3,
	1, 2, 2, 2, 2, 1, 1, 2, 4, 2,
	5, 6, 7, 5, 3, 1, 4, 5, 5, 10,
	1, 1, 4, 0, 3, 0, 2, 2, 2, 0,
	1, 1, 2, 2, 0, 3, 3, 2, 1, 1,
	2, 2, 1, 2, 1, 4, 10, 13, 1, 0,
	1, 3, 3, 3, 5, 1, 3, 1, 2, 0,
	1, 1, 0, 6, 6, 8, 6, 8, 8, 10,
	8, 10, 1, 0, 2, 0, 2, 2, 3, 3,
	2, 2, 2, 1, 0, 1, 3, 2, 0, 2,
	1, 1, 1, 3, 3, 0, 3, 4, 7, 3,
	0, 6, 6, 8, 5, 7, 1, 3, 1, 4,
	2, 8, 5, 4, 3, 0, 2, 0, 8, 1,
	3, 1, 1, 3, 5, 5, 1, 1, 3, 3,
	1, 2, 3, 2, 3, 4, 1, 1, 8, 8,
	1, 2, 4, 4, 4, 2, 2, 3, 1, 3,
	6, 1, 0, 1, 0, 1, 1, 0, 1, 1,
	0, 1, 0, 3, 1, 3, 2, 2, 2, 1,
	1, 2, 2, 3, 1, 1, 1, 1, 3, 0,
	2, 0, 2, 3, 2, 0, 1, 3, 3, 1,
	1, 3, 2, 4, 0, 4, 2, 1, 4, 3,
	4, 5, 4, 5, 4, 5, 2, 4, 1, 1,
	0, 5, 0, 2, 2, 2, 1, 1, 0, 4,
	2, 1, 2, 2, 4, 1, 3, 1, 2, 3,
	2, 0, 2, 5, 2, 3, 4, 0, 1, 1,
	1, 1, 2, 4, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 5, 0, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 2, 2, 1,
	1, 3, 0, 1, 1, 1, 1, 5, 2, 1,
	1, 1, 1, 4, 1, 2, 2, 1, 1, 1,
	0, 1, 1, 4, 1, 4, 1, 1, 1, 1,
	1, 1, 1, 3, 3, 3, 3, 3, 3, 3,
	0, 1, 4, 1, 3, 3, 5, 2, 2, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 2, 2, 3, 4, 3, 4, 4, 5, 3,
	4, 3, 3, 4, 3, 4, 3, 4, 5, 6,
	6, 7, 6, 7, 6, 7, 3, 4, 1, 3,
	2, 2, 2, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 5, 6, 6, 7, 1, 1, 1, 3,
	1, 1, 1, 2, 2, 2, 1, 1, 3, 5,
	6, 8, 6, 6, 4, 4, 1, 1, 1, 5,
	1, 3, 1, 3, 1, 1, 1, 1, 6, 6,
	4, 4, 4, 4, 6, 5, 5, 5, 4, 8,
	6, 6, 4, 4, 4, 5, 0, 5, 0, 2,
	0, 1, 3, 3, 2, 2, 0, 6, 1, 0,
	3, 0, 2, 2, 0, 1, 4, 2, 2, 2,
	2, 2, 4, 3, 5, 4, 3, 5, 1, 3,
	1, 3, 3, 3, 2, 1, 3, 3, 1, 1,
	1, 1, 1, 1, 1, 4, 3, 2, 3, 0,
	3, 3, 2, 2, 1, 0, 2, 2, 3, 2,
	1, 1, 3, 5, 1, 2, 4, 2, 0, 1,
	0, 1, 1, 3, 5, 2, 2, 1, 2, 1,
	0, 1, 1, 1, 3, 3, 1, 3, 3, 2,
	1, 1, 1, 3, 1, 3, 1, 3, 1, 2,
	3, 1, 2, 2, 1, 1, 3, 3, 0, 1,
	2, 1, 1, 1, 1, 6, 2, 3, 5, 1,
	1, 1, 1, 2, 2, 1, 1, 1, 1, 0,
	3, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -9, -10, -11, -13,
	-15, -16, -17, -18, -20, -21, -23, -22, -24, -25,
	-26, -19, -27, -28, 19, -6, -7, -8, -218, 87,
	95, 185, 94, 80, 110, 199, 206, -29, -31, 214,
	-119, 215, 30, 223, 54, 90, 201, 196, 243, 61,
	-217, -32, -30, 289, 264, 270, 209, -33, 230, 257,
	292, 230, 73, 122, 82, 126, 251, 250, 73, 122,
	230, -12, 289, -22, -5, -10, -4, -18, -28, -9,
	-11, 19, -44, 4, -196, -198, 16, 17, 19, 29,
	30, 35, 39, 42, 53, 54, 55, 57, 59, 60,
	63, 64, 71, 72, 73, 74, 76, 80, 82, 86,
	87, 89, 94, 95, 100, 101, 104, 106, 111, 116,
	117, 123, 126, 134, 136, 137, 142, 145, 148, 150,
	151, 152, 153, 154, 156, 157, 159, 161, 158, 164,
	166, 167, 173, 176, 179, 180, 183, 185, 187, 188,
	189, 191, 192, 196, 194, 195, 197, 199, 201, 202,
	204, 206, 207, 208, 211, 212, 214, 215, 217, 220,
	222, 223, 226, 224, 229, 231, 232, 239, 243, 244,
	245, 246, 249, 250, 251, 254, 255, 256, 260, 265,
	266, 267, 268, 24, 31, 32, 33, 34, 36, 37,
	40, 41, 45, 46, 47, 49, 75, 77, 78, 93,
	96, 102, 112, 114, 118, 119, 127, 128, 129, 131,
	140, 163, 165, 174, 178, 182, 184, 190, 203, 210,
	218, 219, 225, 227, 234, 235, 236, 240, 241, 257,
	258, -44, -44, 185, 18, -236, 18, -237, -238, 61,
	87, 110, 209, 126, 82, 250, -236, -48, 206, -44,
	-115, 145, 212, 203, 239, -116, -114, -189, 234, 154,
	-76, -44, 4, 73, 53, 74, 111, 122, 123, 58,
	59, 137, 231, 234, 239, 18, 61, -241, 239, 239,
	-241, -241, -47, 239, 237, -48, -240, 230, 230, -104,
	73, 248, -30, -32, -31, -64, -65, 247, 130, 92,
	172, -29, -31, -217, -219, 191, -216, -44, -219, -61,
	-62, 18, 84, 293, -159, -51, 170, -44, -86, 289,
	-3, -159, 118, -44, -54, 118, -51, 108, 132, 132,
	-160, -159, -44, 118, -55, 118, -54, -77, 118, -76,
	-165, -164, -192, 4, -196, -198, -197, 257, 51, 62,
	109, 125, 121, 133, 135, 141, 143, 155, 175, 177,
	200, 216, 230, -140, 289, -100, 289, -44, 18, 169,
	293, 169, -44, -115, 47, -115, 289, -117, -42, -43,
	134, 187, 237, 274, 108, 268, -58, 5, 79, -79,
	291, 108, -233, 169, 108, 108, 108, 108, 108, -188,
	108, 268, 134, 187, 230, -118, -42, -43, -118, 237,
	-48, -89, -159, -76, 118, 122, -44, 118, -64, -65,
	-88, -107, -108, 144, 168, -91, 18, 84, -91, -91,
	39, 290, 290, 293, -219, -70, 289, -80, -161, -130,
	282, -132, 280, 281, 286, 160, 269, -142, -51, -133,
	9, 289, -145, -214, -31, 93, 25, -143, -144, 203,
	-44, 7, 8, 5, 6, -49, -168, -177, 242, 97,
	162, 43, -212, -213, 4, -196, -191, -169, -179, -173,
	-176, 131, 51, 66, 69, 67, 70, 213, 252, 44,
	24, 96, 178, 182, 227, 240, 241, 118, 163, 119,
	49, 112, 140, 86, 32, 34, 36, 37, 45, 46,
	75, 77, 78, 102, 127, 128, 129, 165, 190, 218,
	225, 235, 236, 258, -197, -180, -181, -174, -175, -182,
	-80, -86, 282, -51, 289, -84, -126, -125, -124, 287,
	291, -85, -150, -130, 79, -38, 194, -37, 17, 19,
	87, 255, 93, 194, 194, 93, 294, -160, -53, -51,
	-53, 214, -44, 26, 93, -40, 293, 42, 197, 93,
	-40, 293, 93, 290, 293, -159, 118, 26, -139, -166,
	-167, -169, -178, -172, -176, -177, 35, 41, 40, 232,
	210, 219, 33, 127, 128, 129, 218, 32, 190, 102,
	86, 78, 77, 165, 37, 36, -180, -181, -174, -175,
	75, 235, 236, 131, 34, 46, 45, 258, 225, -78,
	-130, -232, -75, 230, 73, -52, -44, 282, -238, -232,
	26, -78, 293, 293, 142, -57, 148, 159, 116, -187,
	79, -194, -186, -151, 9, 242, 97, 169, -193, 8,
	281, -185, -192, 5, 7, 280, -187, 79, 64, -195,
	5, 4, -177, -151, 79, 145, 291, -190, 4, -196,
	-198, -197, -199, 18, 20, 21, 22, 23, 25, 26,
	27, 28, 38, 43, 44, 48, 50, 52, 58, 61,
	65, 66, 67, 68, 69, 70, 79, 81, 83, 84,
	85, 88, 90, 92, 97, 98, 99, 105, 107, 108,
	110, 113, 115, 120, 122, 124, 130, 132, 138, 139,
	144, 146, 147, 160, 162, 168, 169, 170, 171, 172,
	181, 186, 193, 198, 209, 213, 221, 228, 230, 233,
	237, 238, 242, 247, 248, 252, 253, 259, 261, 262,
	263, 264, -189, -235, 105, -232, -189, -189, -189, -189,
	-189, -189, 142, -189, 293, 293, -48, -40, 293, 289,
	160, -45, 118, -44, -41, 89, 160, -88, -108, -107,
	-109, -130, 18, -130, -132, -30, -30, -30, -66, -154,
	-130, -216, 26, -69, -44, -72, 293, 108, 10, 50,
	29, 280, 281, 282, 283, 103, 284, 277, 278, 279,
	276, 272, 273, 274, 56, 149, 205, 12, 13, 14,
	22, 171, 143, 269, 121, 216, 133, 31, 120, 26,
	4, -130, -130, -130, -130, -130, 177, -31, -130, -78,
	-84, -31, -138, 287, 289, -84, 289, 5, 5, 289,
	-146, -130, -220, 265, 105, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 184, -184, 260, -184, -184, -170, 289, -170, -171,
	289, -170, 266, 270, 289, -72, -51, -126, -130, -190,
	282, 293, 290, 293, 237, -105, 58, 52, -121, 118,
	52, -200, -44, 58, -201, 48, 248, 186, 107, -105,
	58, -105, 58, 58, -159, 237, 237, -54, -44, -123,
	262, -111, -22, 289, 79, 26, -111, -81, -82, -162,
	-83, -51, 289, -44, -44, -54, -55, -76, -77, -12,
	-164, 93, -14, -22, -18, -28, -9, 290, 293, -71,
	25, -101, 289, 267, 152, 76, 117, 151, -102, 208,
	290, 293, 237, 293, -75, -69, -125, -124, 108, 239,
	290, -43, -42, -56, 189, 220, 195, 211, 293, 8,
	7, 7, 5, -190, -234, -44, -43, -42, -159, -59,
	-60, -122, -121, -202, -203, -200, 122, 248, 98, 93,
	169, 160, 274, 93, -110, 203, 204, 293, -36, 27,
	83, 289, 293, 290, -123, -161, -73, -157, -159, -31,
	-158, 289, -166, -76, 234, -130, -130, -130, -130, -130,
	-130, -130, -130, -130, -130, -130, -130, -130, -130, -130,
	-130, -130, -130, -130, -130, -130, -130, 143, 121, 216,
	31, 120, -130, 237, 162, 160, 242, 97, 249, 84,
	166, -242, 228, 28, -136, -31, 289, -190, -142, 203,
	289, 290, 293, -78, -141, 288, -138, -78, 290, 290,
	-78, 259, 18, 84, 282, -101, 7, -149, -148, 261,
	-221, 100, 113, 289, 290, 290, -130, -130, -95, -183,
	4, 267, 152, 76, 117, 151, 208, -96, -130, -97,
	-131, -132, 280, 281, 286, 289, 203, -98, -130, -78,
	-130, 38, 139, 238, -99, -130, 108, -78, -130, -130,
	-130, -78, -78, -78, 289, 7, 7, 234, 234, 7,
	-123, 290, 288, 297, -150, -37, -51, -44, -44, 160,
	-121, 118, -166, -44, 289, 289, 136, 136, -44, -44,
	118, -44, 118, -44, -44, -38, 194, -44, -44, 194,
	-90, 198, -130, -90, -113, 169, -74, -51, 257, -44,
	198, -72, 293, 274, -74, -40, -40, -159, -166, 287,
	287, 7, 237, 237, 237, 237, 289, -130, -234, -52,
	-234, -42, 246, 55, 189, -194, -101, 293, 290, 293,
	-45, 122, -45, -76, -51, 93, 5, -44, -154, -14,
	-44, -87, 113, 293, 62, -94, 135, 155, 109, 141,
	200, 125, -127, 294, -153, -152, 26, -44, -31, -158,
	-157, 268, -130, -130, 237, -242, 228, -136, -130, 162,
	242, 97, 249, 84, 166, 108, 289, -131, -131, -78,
	289, -78, -130, 288, 288, 293, 290, -65, 293, -64,
	-130, -78, -78, 290, 290, -147, -148, 88, -130, -226,
	176, 289, 289, -130, 26, 293, 290, 108, 290, -103,
	181, 290, 10, 280, 281, 282, 283, 103, 284, 277,
	278, 279, 276, 272, 273, 274, 56, 149, 205, 12,
	13, 14, 133, 120, -131, -131, -131, -78, 289, 290,
	-134, -135, 108, 105, 26, -99, -99, -99, 290, 108,
	-78, 293, 293, 293, 290, 290, 290, 7, 290, 293,
	290, 268, 268, 290, -87, -130, 237, 237, 93, 160,
	-204, -201, -130, -69, 289, 289, -35, 87, 214, -106,
	93, -40, 93, -40, 237, -105, 58, 237, -80, 198,
	57, 290, 293, -80, -123, -82, -150, 290, 288, 7,
	7, 290, 152, 117, 151, -102, 151, -102, -102, 7,
	-44, -122, 289, -45, 289, 289, 289, -44, -41, 290,
	-137, 115, 39, -157, 135, 135, -157, -94, 135, -92,
	175, -92, -92, -153, -190, 295, -44, 289, 290, -130,
	-130, -131, -131, 108, 289, -130, -139, 22, 22, 290,
	-78, 290, 293, 290, -138, 290, 259, -65, -65, -65,
	5, 90, -130, 233, -227, -44, 289, 262, -64, 290,
	-166, -166, -130, -134, -130, -166, -131, -131, -131, -131,
	-131, -131, -131, -131, -131, -131, -131, -131, -131, -131,
	-131, -131, -131, -131, -131, 84, 160, 166, -131, 293,
	-78, 290, -135, -134, -130, -130, -166, 290, 290, 290,
	-78, -130, -130, -130, 290, 7, -137, 288, -44, -44,
	-121, 93, -205, 58, -206, 50, 98, 160, 162, 248,
	186, 48, 79, 193, 290, 290, -69, -69, 160, 79,
	160, 79, 72, 244, -44, -44, -51, -44, -44, -44,
	-80, -112, 289, 169, -22, -51, -90, 274, 288, 288,
	290, -67, -155, -44, -215, 289, -212, -213, -49, 289,
	-68, -156, -44, -59, -67, 169, -222, 263, -130, -78,
	-157, -157, -93, 253, 169, 135, -157, -163, 271, -129,
	-128, 106, 158, 289, -69, -152, 22, 22, -130, -139,
	290, -130, -130, 290, -130, 5, -130, 290, 290, 290,
	-130, -231, -44, -130, 290, 290, 290, -135, 108, 84,
	166, 289, -130, 290, 290, 293, 290, 290, 290, -222,
	-121, -44, -76, -44, 61, 162, 136, 289, -131, -51,
	-120, -239, 60, 226, 290, 290, 162, 162, -130, -166,
	-40, -40, 237, 237, 85, -69, 58, -86, -31, 289,
	290, 293, -50, -84, 50, -50, -130, 289, -67, 290,
	293, 290, 290, -51, -223, -225, -44, -93, 289, -130,
	-157, 166, 293, 296, 274, -69, 290, -130, -130, 290,
	290, -65, -224, 180, 290, -131, 108, 289, -139, 290,
	-130, -206, -130, -46, 289, 289, 193, -39, 50, -44,
	-44, 250, 161, 290, -44, -120, -155, -36, -76, -36,
	290, -78, 290, -156, -120, 289, 293, 26, -69, 229,
	-128, -190, 290, 290, -65, 39, -131, -139, 290, 290,
	290, -209, 150, -44, -69, -51, -34, 253, -76, 214,
	-123, -50, -65, -120, -67, -225, -227, 290, 234, -228,
	188, 204, -78, 290, -207, -210, -208, 169, 109, 179,
	217, 290, 290, -63, 289, -130, -81, -36, 290, 290,
	5, 290, -229, -230, 31, 245, 64, -130, -229, -208,
	169, -210, 169, 250, 82, -209, -69, -123, -120, -230,
	183, 104, 203, 183, 104, -211, 157, 197, 42, 214,
	-211, -207, 290, 22, 16, 162, 79, -230,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 0, 53, 54, 55, 0, 0,
	352, 0, 0, 0, 0, 0, 0, 326, -2, 0,
	118, 0, 284, 0, 284, 284, 288, 0, 354, 249,
	351, -2, 362, 0, 0, 0, 360, 340, 0, 0,
	-2, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 69, 0, 71, 72, 73, 74, 75, 76, 77,
	78, 0, 84, 775, 776, 777, 794, 795, 796, 797,
	798, 799, 800, 801, 802, 803, 804, 805, 806, 807,
	808, 809, 810, 811, 812, 813, 814, 815, 816, 817,
	818, 819, 820, 821, 822, 823, 824, 825, 826, 827,
	828, 829, 830, 831, 832, 833, 834, 835, 836, 837,
	838, 839, 840, 841, 842, 843, 844, 845, 846, 847,
	848, 849, 850, 851, 852, 853, 854, 855, 856, 857,
	858, 859, 860, 861, 862, 863, 864, 865, 866, 867,
	868, 869, 870, 871, 872, 873, 874, 875, 876, 877,
	878, 879, 880, 881, 882, 883, 884, 885, 886, 887,
	888, 889, 890, 891, 892, 893, 894, 895, 896, 897,
	898, 899, 900, 901, 902, 903, 904, 905, 906, 907,
	908, 909, 910, 911, 912, 913, 914, 915, 916, 917,
	918, 919, 920, 921, 922, 923, 924, 925, 926, 927,
	928, 929, 930, 931, 932, 933, 934, 935, 936, 937,
	938, 939, 940, 941, 942, 943, 944, 945, 946, 947,
	948, 91, 92, 855, 94, 0, 101, 102, 103, 105,
	106, 107, 108, 109, 110, 111, 0, 277, 869, 290,
	114, 835, 873, 936, 885, 121, 131, 0, 942, -2,
	135, 65, 164, 165, 0, 167, 183, 0, 0, 0,
	0, 0, 181, 0, 0, 178, 0, 295, 283, 295,
	280, 281, 282, 285, 0, 276, 0, 353, 0, 0,
	0, 248, -2, 336, 337, -2, 0, 357, 357, 357,
	0, 0, 337, 0, 345, 859, 348, 758, 346, 0,
	0, 359, 358, 0, 341, 421, 0, 748, 382, 0,
	2, 0, 922, 0, 0, 922, 0, 0, 0, 0,
	0, 427, 57, 922, 48, 922, 744, 48, 922, 63,
	0, 79, 81, 785, 786, 787, 788, 947, 949, 950,
	951, 952, 953, 954, 955, 956, 957, 958, 959, 960,
	961, 962, 0, 0, 0, 89, 0, 93, 95, 0,
	0, 0, 289, 115, 912, 117, 0, 120, 122, 123,
	0, 0, 0, 0, 0, 0, 134, 159, 160, 66,
	0, 0, 185, 0, 0, 0, 0, 0, 0, 174,
	0, 175, 0, 177, 0, 278, 291, 292, 279, 0,
	287, 48, 425, 0, 922, 779, 300, 922, -2, 0,
	332, 369, 370, 0, 0, 0, 355, 356, 0, 0,
	0, 328, 329, 0, 347, 0, 0, 385, 736, 740,
	741, 513, 0, 0, 0, 0, 0, 0, 596, 597,
	598, 0, 600, 601, 602, 917, 0, 606, 607, 936,
	748, 761, 762, 763, 764, 0, 0, 0, 769, 770,
	771, 720, 646, 616, -2, -2, 759, 451, 452, 453,
	454, -2, 949, 620, 622, 624, 625, 626, 627, 0,
	901, 918, 932, 933, 941, 945, 946, 922, 929, 923,
	913, 920, 928, 817, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, 784, 475, 476, 481, 482, 484,
	385, 383, 422, 423, 0, 749, 727, 721, 722, 0,
	0, 0, 733, 731, 732, 25, 273, 27, 0, 273,
	273, 0, 0, 0, 0, 0, 0, 431, 0, 306,
	0, 0, 428, 0, 0, 59, 0, 46, 47, 0,
	61, 0, 0, 352, 0, 0, 922, 352, 0, 680,
	437, 438, 439, 440, 441, 510, 444, 445, 446, 447,
	448, 449, 450, 458, 459, 460, 461, 462, 463, 472,
	0, 457, 457, 457, 469, 470, 473, 474, 479, 480,
	491, 492, 494, 496, 490, 490, 490, 487, 488, 0,
	678, 0, 98, 0, 812, 746, 751, 754, 104, 0,
	0, 0, 0, 0, 0, 126, 146, 147, 148, 127,
	129, 136, 138, 139, 140, 149, 150, 151, 152, 242,
	0, 244, 162, 163, 772, 0, 128, 130, 132, 133,
	153, 154, 0, 156, 157, 158, 0, 67, 789, 790,
	791, 792, 793, 963, 964, 965, 966, 967, 968, 969,
	970, 971, 972, 973, 974, 975, 976, 977, 978, 979,
	980, 981, 982, 983, 984, 985, 986, 987, 988, 989,
	990, 991, 992, 993, 994, 995, 996, 997, 998, 999,
	1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009,
	1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019,
	1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029,
	1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039,
	1040, 1041, 166, 168, 0, 182, 169, 170, 171, 172,
	173, 180, 176, 179, 0, 0, 286, 245, 0, 189,
	0, 0, 922, 778, 297, 0, 0, 335, 367, 368,
	371, 374, 375, 372, 513, 342, 343, 344, 363, 364,
	262, 349, 0, 0, 755, 431, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 730, 0, 0,
	739, 517, 518, 519, 541, 542, 0, -2, 678, 0,
	603, 604, 605, 0, 0, -2, 0, 766, 510, 0,
	0, 719, 648, 0, 0, 0, 0, 0, 0, 0,
	0, 699, 705, 0, 0, 0, 0, 0, 0, 0,
	0, 465, 478, 489, 486, 485, 467, 0, 466, 464,
	0, 468, 0, 0, 0, 431, 0, 728, 0, 725,
	726, 0, 735, 0, 0, 0, 0, 272, 29, 922,
	0, 39, 0, 0, 215, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 750, 317,
	0, 317, 308, 0, 0, 0, 304, 385, 319, 321,
	322, 0, 0, 429, 58, 745, 48, 64, 48, 70,
	80, 0, 82, 85, 86, 87, 88, 83, 0, 432,
	434, 442, 0, 497, 498, 499, 500, 501, 502, 511,
	90, 0, 0, 0, 99, 100, 752, 753, 0, 0,
	119, 124, 125, 296, 0, 143, 0, 145, 0, 243,
	774, 773, 510, 68, 184, 112, 293, 294, 426, 0,
	188, 190, 192, 193, 194, 195, 779, 0, 779, 0,
	0, 0, 0, 0, 373, 376, 377, 0, 366, 260,
	261, 352, 0, 757, 379, 737, 384, 386, 394, 410,
	397, 0, 514, 515, 0, 520, 521, 522, 523, 524,
	525, 526, 527, 528, 529, -2, -2, -2, 533, 534,
	535, -2, -2, -2, 539, 540, -2, 0, 0, 0,
	730, 0, -2, 0, 549, 0, 552, 554, 556, 0,
	0, 0, 0, 729, 566, 711, 0, 738, 551, 0,
	0, 599, 0, 0, 0, 684, 685, 0, -2, 608,
	362, 0, 0, 0, 0, 767, 0, 718, 714, 0,
	656, 0, 0, 0, 621, 623, 0, 0, 0, 0,
	688, 689, 690, 691, 692, 693, 694, 0, 0, 0,
	0, 568, 0, 0, 0, 0, 936, 0, 678, 704,
	0, 0, 0, 0, 0, 678, 0, 710, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	379, 424, 723, 0, 734, 28, 264, 0, 0, 0,
	31, 922, 198, 0, 0, 0, 0, 0, 275, 40,
	922, 48, 922, 48, 41, 26, 273, 263, 266, 0,
	56, 0, 430, 301, 302, 0, 0, 742, 310, 307,
	0, 431, 0, 0, 0, 60, 62, 0, 681, 0,
	0, 0, 0, 0, 0, 0, 0, 679, 96, 747,
	97, 116, 141, 142, 144, 137, 155, 0, 186, 0,
	0, 779, 0, 0, 0, 0, 299, 300, 365, 0,
	756, 381, 0, 0, 0, 0, 0, 0, 418, 418,
	418, 416, 410, 0, 396, 409, 0, 408, -2, 397,
	0, 0, -2, -2, 0, 0, 0, 567, -2, 550,
	553, 555, 557, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 679, 682, 683, 0, -2, 0, 0, 361,
	362, 362, 362, 614, 0, 0, 715, 0, 0, 615,
	0, 0, 0, 0, 0, 0, 630, 0, 631, 0,
	0, 632, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 570, 571, 572, 0, 0, 633,
	702, 703, 0, 0, 0, 0, 0, 0, 638, 0,
	709, 0, 0, 0, 642, 643, 644, 0, 455, 0,
	471, 493, 495, 483, 381, 0, 0, 0, 0, 0,
	196, 214, 0, 0, 0, 0, 33, 0, 0, 0,
	0, 37, 0, 43, 0, 0, 0, 0, 316, 0,
	315, 0, 0, 305, 317, 320, 323, 0, 435, 0,
	0, 443, 503, 504, 505, 506, 507, 508, 509, 0,
	113, 191, 0, 0, 0, 189, 0, 0, 298, 350,
	650, 0, 0, 387, 0, 0, 0, 0, 0, 413,
	417, 414, 415, 412, 392, 0, 406, 0, 399, 516,
	-2, 0, 0, 0, 0, -2, 0, 0, 0, 712,
	0, 673, 0, -2, 686, 609, 0, 0, 0, 0,
	768, 713, 717, 0, 654, 655, 659, 0, 0, 619,
	0, 0, 687, 696, 697, 569, 573, 574, 575, 576,
	577, 578, 579, 580, 581, 582, -2, -2, -2, 586,
	587, 588, -2, -2, -2, 0, 0, 0, 698, 0,
	0, 676, 700, 701, 706, 707, 0, 635, 636, 637,
	708, 0, 0, 0, 477, 0, 650, 724, 268, 270,
	30, 0, 197, 0, 200, 0, 0, 0, 205, 206,
	0, 0, 0, 0, 216, 223, 0, 0, 0, 45,
	0, 0, 274, 0, 48, 48, 265, 0, 0, 267,
	303, 0, 0, 0, 309, 743, 318, 0, 436, 433,
	512, 0, 250, 259, 259, 0, 617, 618, 0, 0,
	0, 255, 257, 0, 0, 0, 338, 0, 380, 378,
	400, 0, 402, 0, 0, 0, 404, 395, 0, 0,
	390, 0, 389, 0, 0, 398, 0, 0, -2, 0,
	560, -2, -2, 672, 679, 765, 362, 610, 612, 613,
	716, 661, 658, 0, 645, 628, 629, 695, 0, 0,
	0, 0, 679, 675, 634, 0, 640, 641, 456, 339,
	32, 0, 201, 202, 203, 204, 207, 0, 209, 781,
	217, 0, 220, 221, 218, 0, 34, 35, 44, 50,
	36, 42, 0, 0, 0, 0, 0, 324, 325, 0,
	223, 0, 262, 760, 0, 262, 0, 0, 0, 213,
	0, 187, 223, 0, 649, 651, 0, 401, 0, 420,
	403, 0, 0, 393, 0, 0, 407, -2, -2, 561,
	674, 0, 362, 0, 647, -2, 0, 0, 0, 677,
	0, 199, 0, 229, 0, 0, 0, 52, 0, 269,
	271, 0, 312, 431, 314, 211, 251, 252, 258, 253,
	259, 362, 223, 256, 246, 0, 0, 0, 0, 0,
	391, 388, 405, 611, 664, 0, -2, 0, 594, 639,
	208, 234, 0, 0, 0, 225, 38, 0, 49, 0,
	313, 262, 0, 212, 0, 652, 653, 419, 0, 0,
	0, 0, 660, 595, 210, 230, 231, 0, 226, 227,
	228, 780, 222, 229, 0, 51, 431, 254, 609, 223,
	411, 657, 662, 665, -2, 888, 809, 0, 663, 232,
	0, 233, 0, 0, 0, 234, 0, 311, 247, 0,
	667, 668, 669, 670, 671, 235, 0, 238, 239, 0,
	236, 219, 224, 0, 237, 240, 241, 666,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 278, 3, 284, 279, 3,
	289, 290, 282, 280, 293, 281, 291, 283, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 297, 292,
	272, 274, 273, 3, 294, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 287, 3, 288, 277, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 295, 276, 296, 286,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 275,
	57615, 285, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:693
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:699
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:705
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 17:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:728
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 24:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:738
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 25:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:744
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.qname(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 26:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:748
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.qname(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 27:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:754
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 28:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:758
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 29:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:765
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 30:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:770
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 31:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:775
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 32:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:780
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 33:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:785
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: sqlDollar[3].str, Default: sqlDollar[4].union.expr()}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:790
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: sqlDollar[3].str}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:794
		{
			unimplemented()
		}
	case 36:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:797
		{
			sqlVAL.union.val = &AlterTableDropColumn{columnKeyword: sqlDollar[2].union.bool(), IfExists: true, Column: sqlDollar[5].str}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:802
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        sqlDollar[3].str,
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:812
		{
		}
	case 39:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:815
		{
			sqlVAL.union.val = &AlterTableAddConstraint{ConstraintDef: sqlDollar[2].union.constraintDef()}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:819
		{
			unimplemented()
		}
	case 41:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:821
		{
			unimplemented()
		}
	case 42:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:824
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   sqlDollar[5].str,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 43:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:833
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   sqlDollar[3].str,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 44:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:843
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 45:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:847
		{
			sqlVAL.union.val = nil
		}
	case 46:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:853
		{
			sqlVAL.union.val = DropCascade
		}
	case 47:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:857
		{
			sqlVAL.union.val = DropRestrict
		}
	case 48:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:861
		{
			sqlVAL.union.val = DropDefault
		}
	case 49:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:866
		{
			unimplementedWithIssue(2473)
		}
	case 50:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:867
		{
		}
	case 51:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:870
		{
			unimplemented()
		}
	case 52:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:871
		{
		}
	case 56:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:882
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retExprs()}
		}
	case 57:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:889
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 58:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:893
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:897
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:905
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:913
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.qnames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:917
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.qnames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:923
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:927
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 65:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:933
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 66:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:937
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:943
		{
			sqlVAL.union.val = Indirection{NameIndirection(sqlDollar[2].str)}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:947
		{
			sqlVAL.union.val = append(sqlDollar[1].union.indirect(), NameIndirection(sqlDollar[3].str))
		}
	case 69:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:954
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 70:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:958
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 71:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:964
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 78:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:973
		{ /* SKIP DOC */
		}
	case 79:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:977
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:981
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 82:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:991
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1001
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 84:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1005
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 85:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1011
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 89:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1021
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1032
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 91:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1036
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 92:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1043
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1049
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1055
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1059
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1066
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: NameList(sqlDollar[6].union.strs()), Targets: sqlDollar[4].union.targetList()}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1073
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: NameList(sqlDollar[6].union.strs()), Targets: sqlDollar[4].union.targetList()}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1080
		{
			sqlVAL.union.val = TargetList{Tables: QualifiedNames(sqlDollar[1].union.qnames())}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1084
		{
			sqlVAL.union.val = TargetList{Tables: QualifiedNames(sqlDollar[2].union.qnames())}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1088
		{
			sqlVAL.union.val = TargetList{Databases: NameList(sqlDollar[2].union.strs())}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1095
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1098
		{
		}
	case 103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1102
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1106
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 105:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1113
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 106:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1117
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1121
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1125
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1129
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 110:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1133
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 111:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1137
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 112:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1145
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1149
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1157
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1161
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 116:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1165
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1169
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1172
		{ /* SKIP DOC */
		}
	case 119:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1178
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1184
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1191
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1195
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1199
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1203
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1210
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1216
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname(), Values: sqlDollar[3].union.exprs()}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1220
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname(), Values: sqlDollar[3].union.exprs()}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1224
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname()}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1228
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname()}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1235
		{
			unimplemented()
		}
	case 133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1238
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1241
		{
			unimplemented()
		}
	case 136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1248
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1252
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1260
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1266
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1270
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1274
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1278
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1282
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1288
		{
			sqlVAL.union.val = Low
		}
	case 147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1292
		{
			sqlVAL.union.val = Normal
		}
	case 148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1296
		{
			sqlVAL.union.val = High
		}
	case 149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1302
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1306
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1310
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1325
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1329
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1333
		{
			d, err := ParseDInterval(sqlDollar[2].str)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1343
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1347
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1352
		{
			unimplemented()
		}
	case 160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1353
		{
			unimplemented()
		}
	case 161:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1354
		{
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1358
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1362
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1368
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1372
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1376
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.qname()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1380
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1384
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.strs()}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1388
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1392
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1396
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.qname()}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1400
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.qname()}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1404
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1408
		{
			sqlVAL.union.val = &ShowTables{Name: sqlDollar[3].union.qname()}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1412
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1416
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1420
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1424
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 179:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1428
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.qname()}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1434
		{
			sqlVAL.union.val = sqlDollar[2].union.qname()
		}
	case 181:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1438
		{
			sqlVAL.union.val = (*QualifiedName)(nil)
		}
	case 182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1444
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 183:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1449
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1455
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 185:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1459
		{
			sqlVAL.union.val = []string(nil)
		}
	case 186:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1466
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.qname(), IfNotExists: false, Defs: sqlDollar[5].union.tblDefs()}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1470
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.qname(), IfNotExists: true, Defs: sqlDollar[8].union.tblDefs()}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1477
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 190:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1483
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1487
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 192:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1493
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1499
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1505
		{
			sqlVAL.union.val = newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
		}
	case 197:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1511
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 198:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1515
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1521
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1525
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1528
		{
			unimplemented()
		}
	case 202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1530
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1534
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Create: true}}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1552
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1556
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1560
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1564
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1568
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1572
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1576
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.qname(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1585
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.idxElems(),
				Storing: sqlDollar[6].union.strs(),
			}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1593
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:    Name(sqlDollar[3].str),
					Columns: sqlDollar[5].union.idxElems(),
					Storing: sqlDollar[7].union.strs(),
				},
			}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1605
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.famElems(),
			}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1617
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 215:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1622
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 216:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1628
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1634
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[3].union.strs()),
					Storing: sqlDollar[5].union.strs(),
				},
			}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1643
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[4].union.strs()),
				},
				PrimaryKey: true,
			}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1652
		{
			unimplemented()
		}
	case 222:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1669
		{
			sqlVAL.union.val = sqlDollar[3].union.strs()
		}
	case 223:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1673
		{
			sqlVAL.union.val = []string(nil)
		}
	case 224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1679
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 225:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1683
		{
			sqlVAL.union.val = []string(nil)
		}
	case 226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1688
		{
			unimplemented()
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1689
		{
			unimplemented()
		}
	case 228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1690
		{
			unimplemented()
		}
	case 229:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1691
		{
		}
	case 230:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1698
		{
			unimplemented()
		}
	case 231:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1699
		{
			unimplemented()
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1700
		{
			unimplemented()
		}
	case 233:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1701
		{
			unimplemented()
		}
	case 234:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1702
		{
		}
	case 235:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1705
		{
			unimplemented()
		}
	case 236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1708
		{
			unimplemented()
		}
	case 237:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1711
		{
			unimplemented()
		}
	case 238:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1712
		{
			unimplemented()
		}
	case 239:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1713
		{
			unimplemented()
		}
	case 240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1714
		{
			unimplemented()
		}
	case 241:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1715
		{
			unimplemented()
		}
	case 242:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1719
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1723
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 244:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1727
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 245:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1734
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.qnames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1741
		{
			sqlVAL.union.val = &CreateIndex{
				Name:    Name(sqlDollar[4].str),
				Table:   sqlDollar[6].union.qname(),
				Unique:  sqlDollar[2].union.bool(),
				Columns: sqlDollar[8].union.idxElems(),
				Storing: sqlDollar[10].union.strs(),
			}
		}
	case 247:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql.y:1751
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.qname(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.strs(),
			}
		}
	case 248:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1764
		{
			sqlVAL.union.val = true
		}
	case 249:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1768
		{
			sqlVAL.union.val = false
		}
	case 250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1774
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1778
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1787
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1790
		{
			unimplemented()
		}
	case 254:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1791
		{
			unimplemented()
		}
	case 255:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1795
		{
			sqlVAL.union.val = FamilyElemList{sqlDollar[1].union.famElem()}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1799
		{
			sqlVAL.union.val = append(sqlDollar[1].union.famElems(), sqlDollar[3].union.famElem())
		}
	case 257:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1805
		{
			sqlVAL.union.val = FamilyElem{Column: Name(sqlDollar[1].str)}
		}
	case 258:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1810
		{
			unimplemented()
		}
	case 259:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1811
		{
		}
	case 260:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1815
		{
			sqlVAL.union.val = Ascending
		}
	case 261:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1819
		{
			sqlVAL.union.val = Descending
		}
	case 262:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1823
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 263:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1830
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1834
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.qname(), NewName: sqlDollar[6].union.qname(), IfExists: false}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1838
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.qname(), NewName: sqlDollar[8].union.qname(), IfExists: true}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1842
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1846
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1850
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.qname(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1854
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.qname(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1858
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 271:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1862
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 272:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1868
		{
			sqlVAL.union.val = true
		}
	case 273:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1872
		{
			sqlVAL.union.val = false
		}
	case 274:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1877
		{
		}
	case 275:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1878
		{
		}
	case 276:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1882
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1888
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1895
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 279:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1899
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1903
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1907
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1911
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1920
		{
		}
	case 284:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1921
		{
		}
	case 285:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1925
		{
			sqlVAL.str = ""
		}
	case 286:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1929
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1933
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 288:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1937
		{
			sqlVAL.str = ""
		}
	case 289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1943
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 290:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1947
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 291:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1953
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1957
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1961
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1965
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1969
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1975
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 297:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1981
		{
			sqlVAL.union.val = &CreateDatabase{Name: Name(sqlDollar[3].str), Encoding: sqlDollar[4].union.strVal()}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1985
		{
			sqlVAL.union.val = &CreateDatabase{IfNotExists: true, Name: Name(sqlDollar[6].str), Encoding: sqlDollar[7].union.strVal()}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1991
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1994
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 301:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2004
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retExprs()
		}
	case 302:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2010
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
		}
	case 303:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2015
		{
			unimplementedWithIssue(6637)
		}
	case 304:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2017
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2022
		{
			unimplementedWithIssue(6637)
		}
	case 306:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2030
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname()}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2034
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2040
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2044
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.qnames(), Rows: sqlDollar[4].union.slct()}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2048
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2054
		{
			sqlVAL.union.val = &OnConflict{Columns: NameList(sqlDollar[3].union.strs()), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2058
		{
			sqlVAL.union.val = &OnConflict{Columns: NameList(sqlDollar[3].union.strs()), DoNothing: true}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2064
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 314:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2068
		{
			unimplemented()
		}
	case 315:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2070
		{
			sqlVAL.union.val = []string(nil)
		}
	case 316:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2076
		{
			sqlVAL.union.val = sqlDollar[2].union.selExprs()
		}
	case 317:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2080
		{
			sqlVAL.union.val = SelectExprs(nil)
		}
	case 318:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2087
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retExprs()}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2093
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2097
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 323:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2107
		{
			sqlVAL.union.val = &UpdateExpr{Names: QualifiedNames{sqlDollar[1].union.qname()}, Expr: sqlDollar[3].union.expr()}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2119
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.qnames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2123
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.qnames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2167
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2173
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2177
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2192
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2196
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2200
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2204
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2208
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2212
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2246
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.tblExprs(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2258
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.tblExprs(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2270
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        TableExprs{&AliasedTableExpr{Expr: sqlDollar[2].union.qname()}},
				tableSelect: true,
			}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2278
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2287
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2296
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2314
		{
			unimplemented()
		}
	case 346:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2315
		{
			unimplemented()
		}
	case 347:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2316
		{
			unimplemented()
		}
	case 348:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2319
		{
			unimplemented()
		}
	case 349:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2320
		{
			unimplemented()
		}
	case 350:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2323
		{
			unimplemented()
		}
	case 351:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2326
		{
			unimplemented()
		}
	case 352:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2327
		{
		}
	case 353:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2330
		{
		}
	case 354:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2331
		{
		}
	case 355:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2335
		{
			sqlVAL.union.val = true
		}
	case 356:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2339
		{
			sqlVAL.union.val = false
		}
	case 357:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2343
		{
			sqlVAL.union.val = false
		}
	case 358:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2349
		{
			sqlVAL.union.val = true
		}
	case 359:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2354
		{
		}
	case 360:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2355
		{
		}
	case 361:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2359
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 362:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2363
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 363:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2369
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 364:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2375
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2379
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 366:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2385
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 367:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2393
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2402
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2413
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2426
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2433
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2440
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 376:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2454
		{
		}
	case 377:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2455
		{
		}
	case 378:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2481
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 379:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2485
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 380:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2491
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 381:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2495
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 382:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2501
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2505
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2517
		{
			sqlVAL.union.val = sqlDollar[2].union.tblExprs()
		}
	case 385:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2521
		{
			sqlVAL.union.val = TableExprs(nil)
		}
	case 386:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2527
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2531
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2537
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2542
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2548
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2553
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			index := a.Index
			if index == "" {
				index = b.Index
			} else if b.Index != "" {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			noIndexJoin := a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = &IndexHints{Index: index, NoIndexJoin: noIndexJoin}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2573
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2577
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 394:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2581
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 395:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2588
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), Hints: sqlDollar[2].union.indexHints(), As: sqlDollar[3].union.aliasClause(), AsOf: sqlDollar[4].union.asOfClause()}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2592
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, As: sqlDollar[2].union.aliasClause()}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2596
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 398:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2600
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[2].union.tblExpr(), As: sqlDollar[4].union.aliasClause()}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2620
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2624
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2628
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2632
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2636
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2640
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2646
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: NameList(sqlDollar[4].union.strs())}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2650
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2654
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: NameList(sqlDollar[3].union.strs())}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2658
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2665
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2671
		{
			sqlVAL.union.val = AsOfClause{Expr: &StrVal{s: sqlDollar[5].str}}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2675
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2681
		{
			sqlVAL.str = astFullJoin
		}
	case 414:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2685
		{
			sqlVAL.str = astLeftJoin
		}
	case 415:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2689
		{
			sqlVAL.str = astRightJoin
		}
	case 416:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2693
		{
			sqlVAL.str = astInnerJoin
		}
	case 417:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2699
		{
		}
	case 418:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2700
		{
		}
	case 419:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2711
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: NameList(sqlDollar[3].union.strs())}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2715
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2721
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 422:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2725
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 423:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2729
		{
			sqlVAL.union.val = sqlDollar[2].union.qname()
		}
	case 424:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2733
		{
			sqlVAL.union.val = sqlDollar[3].union.qname()
		}
	case 425:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2739
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2743
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 427:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2756
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname()}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2760
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2764
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2770
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 431:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2774
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 432:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2786
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 433:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2790
		{
			unimplementedWithIssue(2115)
		}
	case 434:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2791
		{
			unimplementedWithIssue(2115)
		}
	case 435:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2794
		{
			unimplementedWithIssue(2115)
		}
	case 436:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2795
		{
			unimplementedWithIssue(2115)
		}
	case 437:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2796
		{
		}
	case 443:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2804
		{
			unimplemented()
		}
	case 444:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2806
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 445:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2810
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 446:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2814
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 447:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2818
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 448:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2822
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 449:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2826
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 450:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2830
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 455:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2851
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2860
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2874
		{
			sqlVAL.union.val = nil
		}
	case 458:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2881
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 459:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2885
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2889
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2893
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 462:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2897
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 463:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2901
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 464:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2905
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newFloatColType(int(prec))
		}
	case 465:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2914
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 466:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2918
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2927
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2936
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2945
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2949
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 471:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2955
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 472:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2959
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2977
		{
			n, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newIntBitType(int(n))
		}
	case 478:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2988
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 483:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3004
		{
			n, err := sqlDollar[3].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3020
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 485:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3026
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 486:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3030
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 487:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3034
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 488:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3038
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 489:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3043
		{
		}
	case 490:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3044
		{
		}
	case 491:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3049
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 492:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3053
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 493:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3057
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 494:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3061
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 495:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3065
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 496:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3070
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 497:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3075
		{
			unimplemented()
		}
	case 498:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3076
		{
			unimplemented()
		}
	case 499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3077
		{
			unimplemented()
		}
	case 500:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3078
		{
			unimplemented()
		}
	case 501:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3079
		{
			unimplemented()
		}
	case 502:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3080
		{
			unimplemented()
		}
	case 503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3081
		{
			unimplemented()
		}
	case 504:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3082
		{
			unimplemented()
		}
	case 505:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3083
		{
			unimplemented()
		}
	case 506:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3084
		{
			unimplemented()
		}
	case 507:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3085
		{
			unimplemented()
		}
	case 508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3086
		{
			unimplemented()
		}
	case 509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3087
		{
			unimplemented()
		}
	case 510:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3088
		{
		}
	case 511:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3091
		{
			unimplemented()
		}
	case 512:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3092
		{
			unimplemented()
		}
	case 514:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3116
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3124
		{
			unimplemented()
		}
	case 516:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3125
		{
			unimplemented()
		}
	case 517:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3134
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3138
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3142
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3146
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3150
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3154
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3158
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3162
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3166
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3170
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3174
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3178
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3182
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3186
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3190
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3194
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3198
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3202
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3206
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3210
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3214
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3218
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3222
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3226
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3230
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3234
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3238
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3242
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3246
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3250
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3254
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3258
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3262
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3266
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3269
		{
			unimplemented()
		}
	case 552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3271
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3275
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3279
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3283
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3287
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3291
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3295
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3299
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3303
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3307
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3311
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3315
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3319
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3323
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3327
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3331
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3348
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3357
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3361
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3365
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3369
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3373
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3377
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3381
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3385
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3389
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3393
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3397
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3401
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3405
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3409
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3413
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3417
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3421
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3425
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3429
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3433
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3437
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3441
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3445
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3449
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3453
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3457
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3469
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 598:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3474
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3478
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3484
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3488
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3492
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3498
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 606:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3502
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 607:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3506
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 608:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3514
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname()}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3518
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3521
		{
			unimplemented()
		}
	case 611:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3522
		{
			unimplemented()
		}
	case 612:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3524
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Type: All, Exprs: sqlDollar[4].union.exprs()}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3528
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Type: Distinct, Exprs: sqlDollar[4].union.exprs()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3532
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Exprs: Exprs{StarExpr()}}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3545
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 616:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3549
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 617:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3558
		{
			unimplemented()
		}
	case 618:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3559
		{
			unimplemented()
		}
	case 619:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3563
		{
			unimplemented()
		}
	case 620:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3565
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3569
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3573
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3577
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3580
		{
			unimplemented()
		}
	case 625:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3581
		{
			unimplemented()
		}
	case 626:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3582
		{
			unimplemented()
		}
	case 627:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3583
		{
			unimplemented()
		}
	case 628:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3585
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3589
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3593
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3597
		{
			sqlVAL.union.val = &OverlayExpr{FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3601
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "STRPOS"}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3605
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3608
		{
			unimplemented()
		}
	case 635:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3610
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3614
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "LTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3618
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "RTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3622
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3626
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3630
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3634
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3638
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3642
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3646
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3652
		{
			unimplemented()
		}
	case 646:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3653
		{
		}
	case 647:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3656
		{
			unimplemented()
		}
	case 648:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3657
		{
		}
	case 649:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3661
		{
			unimplemented()
		}
	case 650:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3662
		{
		}
	case 651:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3665
		{
			unimplemented()
		}
	case 652:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3666
		{
			unimplemented()
		}
	case 653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3669
		{
			unimplemented()
		}
	case 654:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3672
		{
			unimplemented()
		}
	case 655:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3673
		{
			unimplemented()
		}
	case 656:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3674
		{
		}
	case 657:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3678
		{
			unimplemented()
		}
	case 658:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3689
		{
			unimplemented()
		}
	case 659:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3690
		{
		}
	case 660:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3693
		{
			unimplemented()
		}
	case 661:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3694
		{
		}
	case 662:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3702
		{
			unimplemented()
		}
	case 663:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3703
		{
			unimplemented()
		}
	case 664:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3704
		{
		}
	case 665:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3707
		{
			unimplemented()
		}
	case 666:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3708
		{
			unimplemented()
		}
	case 667:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3714
		{
			unimplemented()
		}
	case 668:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3715
		{
			unimplemented()
		}
	case 669:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3716
		{
			unimplemented()
		}
	case 670:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3717
		{
			unimplemented()
		}
	case 671:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3718
		{
			unimplemented()
		}
	case 672:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3729
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3733
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3737
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3743
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3747
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3753
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3796
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3800
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 680:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3806
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3810
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3816
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3820
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3824
		{
			sqlVAL.union.val = &Array{nil}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3830
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3834
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 687:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3840
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3862
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3866
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3872
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 698:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3879
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3883
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 700:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3900
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3904
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3908
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3912
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3916
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 705:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3920
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 706:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3926
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 707:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3932
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 708:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3938
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 709:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3942
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 710:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3946
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 711:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3952
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3956
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3967
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3974
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3978
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 716:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3984
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3990
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 718:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3994
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 720:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4001
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 721:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4007
		{
			sqlVAL.union.val = sqlDollar[1].union.indirectElem()
		}
	case 722:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4011
		{
			sqlVAL.union.val = sqlDollar[1].union.indirectElem()
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4015
		{
			sqlVAL.union.val = &ArrayIndirection{Begin: sqlDollar[2].union.expr()}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4019
		{
			sqlVAL.union.val = &ArrayIndirection{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr()}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4025
		{
			sqlVAL.union.val = NameIndirection(sqlDollar[2].str)
		}
	case 726:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4031
		{
			sqlVAL.union.val = qualifiedStar
		}
	case 727:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4037
		{
			sqlVAL.union.val = Indirection{sqlDollar[1].union.indirectElem()}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4041
		{
			sqlVAL.union.val = append(sqlDollar[1].union.indirect(), sqlDollar[2].union.indirectElem())
		}
	case 729:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4046
		{
		}
	case 730:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4047
		{
		}
	case 732:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4056
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4062
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4066
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 735:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4075
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 736:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4081
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4085
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 738:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4091
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4100
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4104
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4108
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 742:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4116
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4120
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 744:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4126
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4130
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 746:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4136
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4140
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 748:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4151
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4155
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4161
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.qname(), Index: Name(sqlDollar[3].str)}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4172
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4176
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: Indirection{sqlDollar[2].union.indirectElem()}}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4180
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: Indirection{sqlDollar[2].union.indirectElem()}}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4184
		{
			sqlVAL.union.val = &QualifiedName{Indirect: Indirection{unqualifiedStar}}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4190
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4194
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 757:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4200
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 758:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4203
		{
		}
	case 759:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4213
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4217
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4224
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 762:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4228
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 763:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4232
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4236
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4239
		{
			unimplemented()
		}
	case 766:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4241
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4245
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4249
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[5].str}, Type: sqlDollar[1].union.colType()}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4253
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 770:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4257
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 771:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4261
		{
			sqlVAL.union.val = DNull
		}
	case 773:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4268
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 774:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4272
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4294
		{
			sqlVAL.str = ""
		}
	case 780:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4300
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 781:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4304
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
