// Code generated by go yacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"errors"
	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/sql/privilege"
	"github.com/cockroachdb/cockroach/util"
)

var errUnimplemented = errors.New("unimplemented")

func unimplemented() {
	panic(errUnimplemented)
}

func unimplementedWithIssue(issue int) {
	panic(util.UnimplementedWithIssueErrorf(issue, ""))
}

//line sql.y:43

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new sytax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in two forms, depending on the
// type of the value being accessed. Values and pointers are directly
// type asserted from the empty interface, meaning that they will panic
// if the type assertion is incorrect. Interfaces are handled differently
// because a nil instance of an interface inserted into the empty interface
// becomes a nil instance of the empty interface and therefore will fail a
// direct type assertion. Instead, a guarded type assertion must be used,
// which returns nil if the type assertion fails.
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	return u.val.(*StrVal)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) qname() *QualifiedName {
	return u.val.(*QualifiedName)
}
func (u *sqlSymUnion) qnames() QualifiedNames {
	return u.val.(QualifiedNames)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) indirectElem() IndirectionElem {
	if indirectElem, ok := u.val.(IndirectionElem); ok {
		return indirectElem
	}
	return nil
}
func (u *sqlSymUnion) indirect() Indirection {
	return u.val.(Indirection)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	if selectStmt, ok := u.val.(*Select); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	if selectStmt, ok := u.val.(SelectStatement); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	if constraintDef, ok := u.val.(ConstraintTableDef); ok {
		return constraintDef
	}
	return nil
}
func (u *sqlSymUnion) tblDef() TableDef {
	if tblDef, ok := u.val.(TableDef); ok {
		return tblDef
	}
	return nil
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() ColumnQualification {
	if colQual, ok := u.val.(ColumnQualification); ok {
		return colQual
	}
	return nil
}
func (u *sqlSymUnion) colQuals() []ColumnQualification {
	return u.val.([]ColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retExprs() ReturningExprs {
	return ReturningExprs(u.val.(SelectExprs))
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	if tblExpr, ok := u.val.(TableExpr); ok {
		return tblExpr
	}
	return nil
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	if joinCond, ok := u.val.(JoinCond); ok {
		return joinCond
	}
	return nil
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	if alterTableCmd, ok := u.val.(AlterTableCmd); ok {
		return alterTableCmd
	}
	return nil
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) famElem() FamilyElem {
	return u.val.(FamilyElem)
}
func (u *sqlSymUnion) famElems() FamilyElemList {
	return u.val.(FamilyElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}

//line sql.y:284
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const DOT_DOT = 57353
const LESS_EQUALS = 57354
const GREATER_EQUALS = 57355
const NOT_EQUALS = 57356
const ERROR = 57357
const ACTION = 57358
const ADD = 57359
const ALL = 57360
const ALTER = 57361
const ANALYSE = 57362
const ANALYZE = 57363
const AND = 57364
const ANY = 57365
const ARRAY = 57366
const AS = 57367
const ASC = 57368
const ASYMMETRIC = 57369
const AT = 57370
const BEGIN = 57371
const BETWEEN = 57372
const BIGINT = 57373
const BIT = 57374
const BLOB = 57375
const BOOL = 57376
const BOOLEAN = 57377
const BOTH = 57378
const BY = 57379
const BYTEA = 57380
const BYTES = 57381
const CASCADE = 57382
const CASE = 57383
const CAST = 57384
const CHAR = 57385
const CHARACTER = 57386
const CHARACTERISTICS = 57387
const CHECK = 57388
const COALESCE = 57389
const COLLATE = 57390
const COLLATION = 57391
const COLUMN = 57392
const COLUMNS = 57393
const COMMIT = 57394
const COMMITTED = 57395
const CONCAT = 57396
const CONFLICT = 57397
const CONSTRAINT = 57398
const COVERING = 57399
const CREATE = 57400
const CROSS = 57401
const CUBE = 57402
const CURRENT = 57403
const CURRENT_CATALOG = 57404
const CURRENT_DATE = 57405
const CURRENT_ROLE = 57406
const CURRENT_TIME = 57407
const CURRENT_TIMESTAMP = 57408
const CURRENT_USER = 57409
const CYCLE = 57410
const DATA = 57411
const DATABASE = 57412
const DATABASES = 57413
const DATE = 57414
const DAY = 57415
const DEC = 57416
const DECIMAL = 57417
const DEFAULT = 57418
const DEFERRABLE = 57419
const DELETE = 57420
const DESC = 57421
const DISTINCT = 57422
const DO = 57423
const DOUBLE = 57424
const DROP = 57425
const ELSE = 57426
const ENCODING = 57427
const END = 57428
const ESCAPE = 57429
const EXCEPT = 57430
const EXISTS = 57431
const EXPLAIN = 57432
const EXTRACT = 57433
const FALSE = 57434
const FAMILY = 57435
const FETCH = 57436
const FILTER = 57437
const FIRST = 57438
const FLOAT = 57439
const FLOORDIV = 57440
const FOLLOWING = 57441
const FOR = 57442
const FORCE_INDEX = 57443
const FOREIGN = 57444
const FROM = 57445
const FULL = 57446
const GRANT = 57447
const GRANTS = 57448
const GREATEST = 57449
const GROUP = 57450
const GROUPING = 57451
const HAVING = 57452
const HIGH = 57453
const HOUR = 57454
const IF = 57455
const IFNULL = 57456
const IN = 57457
const INDEX = 57458
const INDEXES = 57459
const INITIALLY = 57460
const INNER = 57461
const INSERT = 57462
const INT = 57463
const INT64 = 57464
const INTEGER = 57465
const INTERSECT = 57466
const INTERVAL = 57467
const INTO = 57468
const IS = 57469
const ISOLATION = 57470
const JOIN = 57471
const KEY = 57472
const KEYS = 57473
const LATERAL = 57474
const LEADING = 57475
const LEAST = 57476
const LEFT = 57477
const LEVEL = 57478
const LIKE = 57479
const LIMIT = 57480
const LOCAL = 57481
const LOCALTIME = 57482
const LOCALTIMESTAMP = 57483
const LOW = 57484
const LSHIFT = 57485
const MATCH = 57486
const MINUTE = 57487
const MONTH = 57488
const NAME = 57489
const NAMES = 57490
const NATURAL = 57491
const NEXT = 57492
const NO = 57493
const NO_INDEX_JOIN = 57494
const NORMAL = 57495
const NOT = 57496
const NOTHING = 57497
const NULL = 57498
const NULLIF = 57499
const NULLS = 57500
const NUMERIC = 57501
const OF = 57502
const OFF = 57503
const OFFSET = 57504
const ON = 57505
const ONLY = 57506
const OR = 57507
const ORDER = 57508
const ORDINALITY = 57509
const OUT = 57510
const OUTER = 57511
const OVER = 57512
const OVERLAPS = 57513
const OVERLAY = 57514
const PARTIAL = 57515
const PARTITION = 57516
const PLACING = 57517
const POSITION = 57518
const PRECEDING = 57519
const PRECISION = 57520
const PRIMARY = 57521
const PRIORITY = 57522
const RANGE = 57523
const READ = 57524
const REAL = 57525
const RECURSIVE = 57526
const REF = 57527
const REFERENCES = 57528
const RENAME = 57529
const REPEATABLE = 57530
const RELEASE = 57531
const RESTRICT = 57532
const RETURNING = 57533
const REVOKE = 57534
const RIGHT = 57535
const ROLLBACK = 57536
const ROLLUP = 57537
const ROW = 57538
const ROWS = 57539
const RSHIFT = 57540
const SAVEPOINT = 57541
const SEARCH = 57542
const SECOND = 57543
const SELECT = 57544
const SERIAL = 57545
const SERIALIZABLE = 57546
const SESSION = 57547
const SESSION_USER = 57548
const SET = 57549
const SHOW = 57550
const SIMILAR = 57551
const SIMPLE = 57552
const SMALLINT = 57553
const SNAPSHOT = 57554
const SOME = 57555
const SQL = 57556
const START = 57557
const STRICT = 57558
const STRING = 57559
const STORING = 57560
const SUBSTRING = 57561
const SYMMETRIC = 57562
const SYSTEM = 57563
const TABLE = 57564
const TABLES = 57565
const TEXT = 57566
const THEN = 57567
const TIME = 57568
const TIMESTAMP = 57569
const TIMESTAMPTZ = 57570
const TO = 57571
const TRAILING = 57572
const TRANSACTION = 57573
const TREAT = 57574
const TRIM = 57575
const TRUE = 57576
const TRUNCATE = 57577
const TYPE = 57578
const UNBOUNDED = 57579
const UNCOMMITTED = 57580
const UNION = 57581
const UNIQUE = 57582
const UNKNOWN = 57583
const UPDATE = 57584
const UPSERT = 57585
const USER = 57586
const USING = 57587
const VALID = 57588
const VALIDATE = 57589
const VALUE = 57590
const VALUES = 57591
const VARCHAR = 57592
const VARIADIC = 57593
const VARYING = 57594
const WHEN = 57595
const WHERE = 57596
const WINDOW = 57597
const WITH = 57598
const WITHIN = 57599
const WITHOUT = 57600
const YEAR = 57601
const ZONE = 57602
const NOT_LA = 57603
const WITH_LA = 57604
const AS_LA = 57605
const POSTFIXOP = 57606
const UMINUS = 57607

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXPLAIN",
	"EXTRACT",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HOUR",
	"IF",
	"IFNULL",
	"IN",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARTIAL",
	"PARTITION",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SNAPSHOT",
	"SOME",
	"SQL",
	"START",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:4460

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 21,
	284, 21,
	-2, 330,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 32,
	1, 301,
	163, 301,
	191, 301,
	282, 301,
	284, 301,
	-2, 311,
	-1, 44,
	1, 304,
	163, 304,
	191, 304,
	282, 304,
	284, 304,
	-2, 310,
	-1, 53,
	1, 21,
	284, 21,
	-2, 330,
	-1, 244,
	1, 139,
	284, 139,
	-2, 811,
	-1, 276,
	138, 340,
	162, 340,
	-2, 307,
	-1, 279,
	138, 339,
	162, 339,
	-2, 305,
	-1, 391,
	138, 339,
	162, 339,
	-2, 308,
	-1, 447,
	281, 755,
	-2, 748,
	-1, 448,
	281, 756,
	-2, 749,
	-1, 454,
	5, 472,
	281, 472,
	-2, 894,
	-1, 476,
	5, 438,
	-2, 871,
	-1, 477,
	5, 466,
	281, 466,
	-2, 872,
	-1, 478,
	5, 446,
	-2, 873,
	-1, 479,
	5, 445,
	-2, 874,
	-1, 480,
	5, 466,
	281, 466,
	-2, 877,
	-1, 481,
	5, 466,
	281, 466,
	-2, 878,
	-1, 482,
	5, 467,
	-2, 881,
	-1, 483,
	5, 433,
	-2, 882,
	-1, 484,
	5, 433,
	-2, 883,
	-1, 485,
	5, 448,
	-2, 886,
	-1, 486,
	5, 434,
	-2, 891,
	-1, 487,
	5, 435,
	-2, 892,
	-1, 488,
	5, 436,
	-2, 893,
	-1, 489,
	5, 433,
	-2, 897,
	-1, 490,
	5, 439,
	-2, 902,
	-1, 491,
	5, 437,
	-2, 905,
	-1, 492,
	5, 464,
	281, 464,
	-2, 906,
	-1, 493,
	5, 468,
	-2, 909,
	-1, 494,
	5, 470,
	-2, 910,
	-1, 495,
	5, 463,
	281, 463,
	-2, 914,
	-1, 760,
	88, 311,
	124, 311,
	138, 311,
	162, 311,
	166, 311,
	239, 311,
	-2, 576,
	-1, 768,
	281, 733,
	-2, 722,
	-1, 971,
	12, 0,
	13, 0,
	14, 0,
	264, 0,
	265, 0,
	266, 0,
	-2, 506,
	-1, 972,
	12, 0,
	13, 0,
	14, 0,
	264, 0,
	265, 0,
	266, 0,
	-2, 507,
	-1, 973,
	12, 0,
	13, 0,
	14, 0,
	264, 0,
	265, 0,
	266, 0,
	-2, 508,
	-1, 977,
	12, 0,
	13, 0,
	14, 0,
	264, 0,
	265, 0,
	266, 0,
	-2, 512,
	-1, 978,
	12, 0,
	13, 0,
	14, 0,
	264, 0,
	265, 0,
	266, 0,
	-2, 513,
	-1, 979,
	12, 0,
	13, 0,
	14, 0,
	264, 0,
	265, 0,
	266, 0,
	-2, 514,
	-1, 982,
	30, 0,
	115, 0,
	137, 0,
	209, 0,
	261, 0,
	-2, 519,
	-1, 1013,
	171, 646,
	-2, 649,
	-1, 1172,
	88, 311,
	124, 311,
	138, 311,
	162, 311,
	166, 311,
	239, 311,
	-2, 388,
	-1, 1180,
	30, 0,
	115, 0,
	137, 0,
	209, 0,
	261, 0,
	-2, 520,
	-1, 1185,
	30, 0,
	115, 0,
	137, 0,
	209, 0,
	261, 0,
	-2, 521,
	-1, 1204,
	171, 645,
	-2, 648,
	-1, 1353,
	30, 0,
	115, 0,
	137, 0,
	209, 0,
	261, 0,
	-2, 522,
	-1, 1358,
	127, 0,
	-2, 532,
	-1, 1367,
	171, 647,
	-2, 650,
	-1, 1408,
	12, 0,
	13, 0,
	14, 0,
	264, 0,
	265, 0,
	266, 0,
	-2, 557,
	-1, 1409,
	12, 0,
	13, 0,
	14, 0,
	264, 0,
	265, 0,
	266, 0,
	-2, 558,
	-1, 1410,
	12, 0,
	13, 0,
	14, 0,
	264, 0,
	265, 0,
	266, 0,
	-2, 559,
	-1, 1414,
	12, 0,
	13, 0,
	14, 0,
	264, 0,
	265, 0,
	266, 0,
	-2, 563,
	-1, 1415,
	12, 0,
	13, 0,
	14, 0,
	264, 0,
	265, 0,
	266, 0,
	-2, 564,
	-1, 1416,
	12, 0,
	13, 0,
	14, 0,
	264, 0,
	265, 0,
	266, 0,
	-2, 565,
	-1, 1520,
	127, 0,
	-2, 533,
	-1, 1524,
	30, 0,
	115, 0,
	137, 0,
	209, 0,
	261, 0,
	-2, 536,
	-1, 1525,
	30, 0,
	115, 0,
	137, 0,
	209, 0,
	261, 0,
	-2, 538,
	-1, 1610,
	30, 0,
	115, 0,
	137, 0,
	209, 0,
	261, 0,
	-2, 537,
	-1, 1611,
	30, 0,
	115, 0,
	137, 0,
	209, 0,
	261, 0,
	-2, 539,
	-1, 1619,
	127, 0,
	-2, 566,
	-1, 1660,
	127, 0,
	-2, 567,
	-1, 1708,
	30, 0,
	137, 0,
	209, 0,
	261, 0,
	-2, 870,
}

const sqlNprod = 1007
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 20706

var sqlAct = [...]int{

	448, 1707, 1688, 841, 1729, 1561, 1689, 1665, 1690, 1706,
	849, 908, 1387, 1479, 1596, 1583, 1508, 1446, 446, 1489,
	445, 1359, 508, 245, 917, 1480, 1500, 763, 593, 1494,
	438, 87, 302, 1169, 87, 889, 1263, 892, 1111, 88,
	1262, 87, 1330, 31, 1168, 1207, 1159, 1026, 87, 87,
	698, 14, 87, 717, 1339, 87, 87, 87, 695, 891,
	496, 87, 87, 87, 87, 410, 328, 514, 817, 537,
	765, 850, 280, 1155, 826, 1030, 995, 998, 794, 66,
	798, 1020, 287, 43, 920, 87, 884, 323, 1065, 20,
	285, 279, 713, 566, 551, 10, 6, 1117, 379, 440,
	519, 517, 498, 420, 918, 329, 411, 380, 719, 285,
	43, 509, 548, 510, 577, 321, 325, 68, 843, 895,
	320, 8, 64, 67, 69, 290, 330, 318, 394, 393,
	242, 395, 83, 568, 547, 530, 43, 564, 74, 314,
	1603, 539, 1023, 1604, 1068, 539, 288, 539, 842, 70,
	1736, 27, 1703, 912, 721, 1582, 298, 1360, 1696, 305,
	27, 912, 284, 1687, 1681, 315, 1523, 912, 1662, 722,
	284, 1523, 1200, 269, 1167, 44, 528, 308, 1202, 1123,
	326, 1024, 1656, 1203, 497, 912, 45, 724, 1646, 1637,
	1612, 1582, 912, 1523, 1607, 292, 1593, 912, 1590, 1582,
	1581, 1591, 1566, 1582, 1650, 912, 1565, 723, 1546, 912,
	720, 1200, 721, 738, 1025, 1022, 1421, 1526, 1522, 277,
	1200, 1523, 1456, 1366, 1363, 912, 453, 1200, 1319, 1313,
	276, 1314, 1314, 1280, 1278, 1585, 1281, 1200, 87, 87,
	1277, 1276, 1204, 1200, 1200, 1200, 49, 1201, 913, 1137,
	814, 912, 1200, 813, 815, 545, 1157, 729, 546, 1139,
	912, 864, 1006, 49, 511, 907, 51, 405, 512, 87,
	1027, 87, 49, 87, 878, 87, 406, 689, 688, 558,
	557, 1206, 421, 51, 346, 297, 53, 1705, 398, 1200,
	87, 540, 51, 52, 511, 540, 386, 540, 512, 512,
	47, 87, 739, 592, 365, 1702, 48, 1695, 1657, 500,
	52, 1592, 87, 87, 87, 1551, 87, 47, 1547, 52,
	1539, 49, 391, 48, 1538, 46, 47, 1533, 1021, 507,
	503, 1532, 48, 1141, 299, 1531, 1123, 299, 353, 310,
	1530, 51, 46, 299, 1517, 310, 87, 354, 87, 392,
	1178, 65, 1234, 1474, 1436, 1431, 1430, 740, 328, 328,
	502, 1429, 1370, 1348, 1329, 1285, 595, 87, 52, 87,
	87, 87, 87, 1282, 87, 385, 1270, 1261, 87, 1233,
	1230, 1228, 1217, 87, 1211, 1138, 543, 1003, 1082, 87,
	538, 542, 692, 1037, 720, 1036, 771, 329, 329, 405,
	46, 383, 404, 1698, 1389, 596, 1649, 87, 1629, 1628,
	87, 1621, 1599, 1588, 1580, 1558, 315, 1544, 330, 330,
	1511, 1487, 1515, 1357, 722, 1347, 597, 734, 731, 732,
	733, 725, 726, 727, 728, 730, 407, 1326, 1325, 1324,
	1239, 1322, 724, 1234, 1297, 1251, 1252, 1253, 1296, 532,
	1260, 529, 1225, 1224, 691, 722, 1216, 1197, 1193, 1000,
	587, 768, 723, 277, 799, 802, 511, 1234, 285, 1096,
	512, 1473, 1004, 724, 276, 1095, 1075, 1035, 911, 806,
	792, 791, 555, 790, 789, 554, 788, 1248, 787, 786,
	785, 784, 499, 723, 588, 783, 581, 678, 1096, 782,
	682, 683, 684, 681, 685, 781, 780, 87, 687, 779,
	778, 1248, 729, 595, 769, 690, 767, 46, 693, 303,
	409, 87, 701, 1609, 703, 87, 702, 1608, 87, 87,
	809, 1239, 715, 766, 87, 1350, 87, 87, 1349, 87,
	504, 811, 87, 729, 87, 87, 1605, 328, 1478, 359,
	87, 87, 596, 299, 1124, 1239, 902, 739, 820, 796,
	797, 1506, 804, 1284, 1234, 800, 805, 859, 323, 762,
	803, 401, 402, 597, 277, 1283, 1249, 277, 277, 450,
	1179, 378, 844, 505, 844, 709, 329, 374, 710, 711,
	831, 833, 360, 595, 299, 531, 531, 66, 776, 1495,
	1249, 842, 1390, 1031, 866, 1220, 795, 330, 722, 1119,
	1671, 807, 740, 1636, 1235, 1236, 1237, 1238, 1240, 1718,
	1717, 883, 1464, 236, 1133, 268, 724, 267, 43, 836,
	870, 1250, 596, 819, 57, 68, 262, 263, 1574, 1308,
	823, 67, 69, 1682, 377, 1573, 723, 1309, 839, 1289,
	274, 848, 1239, 597, 1288, 1250, 1215, 872, 414, 857,
	860, 326, 865, 862, 867, 871, 868, 70, 861, 858,
	1214, 819, 772, 1213, 1079, 357, 58, 818, 520, 1212,
	521, 87, 734, 731, 732, 733, 725, 726, 727, 728,
	730, 1181, 987, 87, 87, 1514, 729, 1245, 1246, 1247,
	1635, 1244, 1241, 1242, 1243, 1235, 1236, 1237, 1238, 1240,
	863, 838, 358, 837, 520, 433, 521, 725, 726, 727,
	728, 730, 87, 914, 87, 1244, 1241, 1242, 1243, 1235,
	1236, 1237, 1238, 1240, 1041, 382, 1078, 960, 1051, 61,
	520, 271, 521, 1653, 522, 1563, 85, 959, 1379, 246,
	1673, 533, 997, 595, 1027, 722, 85, 1726, 997, 1299,
	874, 1112, 1692, 291, 291, 1311, 876, 301, 905, 906,
	301, 307, 301, 724, 1031, 539, 301, 316, 301, 246,
	522, 1001, 877, 1717, 827, 62, 809, 1121, 887, 808,
	875, 809, 596, 723, 1110, 526, 886, 888, 60, 59,
	348, 525, 272, 1044, 1027, 1023, 522, 299, 1234, 1132,
	310, 1081, 1306, 597, 1234, 283, 853, 87, 87, 87,
	275, 310, 928, 87, 310, 948, 87, 915, 1237, 1238,
	1240, 1693, 87, 87, 87, 87, 87, 1011, 87, 87,
	830, 55, 1045, 729, 1024, 381, 87, 1134, 87, 1630,
	816, 282, 356, 846, 1234, 87, 1251, 1252, 1253, 1376,
	1091, 349, 351, 1002, 87, 87, 1519, 1116, 1694, 355,
	87, 793, 727, 728, 730, 1046, 1043, 1025, 1022, 328,
	922, 1085, 1114, 1300, 1107, 1617, 1732, 56, 739, 285,
	1725, 63, 1377, 284, 1223, 1112, 1239, 87, 1248, 87,
	87, 87, 1239, 1684, 87, 759, 1564, 947, 523, 375,
	518, 1007, 1012, 87, 1015, 1340, 1086, 829, 329, 1685,
	87, 356, 87, 1143, 928, 540, 284, 948, 1126, 1060,
	1127, 1047, 1691, 1027, 397, 1072, 1073, 1074, 1106, 330,
	1602, 1249, 1239, 740, 523, 1183, 1174, 1249, 1027, 927,
	1128, 996, 1125, 246, 246, 1140, 1130, 1142, 1122, 1129,
	1716, 376, 1714, 1150, 1136, 285, 281, 1375, 1724, 1131,
	523, 1254, 1135, 1493, 900, 299, 368, 347, 828, 49,
	345, 1568, 1093, 1567, 85, 1417, 301, 1249, 246, 1042,
	389, 1021, 1556, 54, 43, 1291, 1250, 1730, 396, 51,
	1148, 1152, 1250, 1090, 299, 291, 1173, 1151, 1153, 947,
	1177, 901, 1542, 700, 1234, 1740, 301, 725, 726, 727,
	728, 730, 397, 800, 694, 803, 52, 301, 301, 301,
	1666, 534, 950, 47, 797, 796, 1731, 396, 1463, 48,
	686, 1557, 1250, 1460, 285, 1462, 559, 985, 1098, 1097,
	1509, 927, 1503, 1733, 1335, 1334, 708, 355, 845, 1418,
	313, 552, 1182, 552, 1184, 1419, 1244, 1241, 1242, 1243,
	1235, 1236, 1237, 1238, 1240, 1243, 1235, 1236, 1237, 1238,
	1240, 1452, 246, 1447, 552, 246, 246, 246, 1205, 246,
	312, 1445, 1543, 246, 282, 1739, 388, 87, 85, 1087,
	285, 1510, 1239, 1331, 697, 1219, 1156, 1034, 1245, 1246,
	1247, 1453, 1244, 1241, 1242, 1243, 1235, 1236, 1237, 1238,
	1240, 1459, 291, 1461, 87, 718, 1316, 1620, 1118, 1541,
	1264, 1356, 986, 563, 950, 1229, 1192, 1118, 87, 869,
	87, 373, 87, 371, 370, 1196, 87, 1249, 369, 1198,
	1295, 1267, 1268, 1269, 983, 1286, 366, 311, 87, 1265,
	777, 87, 1209, 1210, 561, 680, 1033, 87, 595, 1293,
	1443, 87, 1303, 87, 1305, 562, 1307, 1304, 1310, 1302,
	1290, 1145, 1333, 1144, 903, 1336, 899, 1315, 544, 1448,
	541, 1449, 1318, 536, 527, 1317, 1344, 524, 1328, 1321,
	1323, 1259, 1250, 1384, 299, 699, 1575, 596, 1337, 1718,
	583, 1343, 1272, 362, 1451, 949, 909, 1162, 1341, 1342,
	1577, 1454, 301, 1234, 87, 399, 984, 819, 597, 819,
	295, 835, 1165, 834, 3, 832, 824, 1312, 1659, 1585,
	301, 1632, 1338, 301, 840, 1651, 1332, 722, 1163, 301,
	847, 855, 856, 403, 301, 716, 71, 301, 556, 246,
	246, 1378, 1380, 1381, 1176, 552, 718, 1737, 1738, 910,
	1234, 1391, 1395, 722, 1369, 1450, 1235, 1236, 1237, 1238,
	1240, 1372, 1373, 1374, 363, 723, 82, 400, 304, 87,
	87, 87, 296, 928, 722, 1516, 948, 87, 87, 1424,
	880, 879, 924, 87, 1425, 87, 1164, 87, 87, 87,
	87, 1239, 724, 1158, 1437, 87, 1382, 949, 1351, 993,
	1279, 1080, 1077, 1076, 1028, 87, 87, 928, 1442, 1438,
	948, 991, 723, 261, 928, 87, 87, 948, 881, 87,
	1492, 1485, 1364, 1484, 1010, 1485, 1704, 1484, 87, 87,
	1457, 1458, 1528, 1486, 1383, 1477, 1249, 1486, 1162, 1498,
	1499, 1491, 1146, 1504, 882, 1475, 928, 770, 270, 948,
	1562, 264, 265, 1165, 73, 679, 367, 1471, 947, 1521,
	1535, 1683, 1513, 1160, 1222, 1393, 1616, 1595, 1032, 1163,
	87, 775, 1397, 989, 25, 988, 885, 1482, 426, 994,
	1444, 1512, 1292, 1161, 924, 1422, 853, 894, 301, 824,
	893, 1250, 947, 598, 584, 573, 1432, 1502, 449, 947,
	927, 372, 567, 576, 1428, 586, 585, 1040, 579, 574,
	501, 451, 1540, 925, 452, 926, 801, 301, 439, 246,
	299, 923, 1052, 299, 87, 324, 87, 1164, 87, 1505,
	851, 947, 1029, 1218, 927, 87, 773, 928, 425, 431,
	948, 927, 430, 1008, 422, 1507, 1166, 352, 1552, 240,
	241, 1555, 1115, 990, 87, 1472, 904, 1497, 704, 1301,
	992, 1553, 1241, 1242, 1243, 1235, 1236, 1237, 1238, 1240,
	273, 1231, 1058, 927, 87, 1050, 87, 589, 1586, 1501,
	1048, 1589, 1039, 950, 87, 384, 1485, 513, 1484, 1584,
	852, 1578, 87, 364, 916, 1175, 408, 1488, 1486, 712,
	1697, 294, 293, 890, 361, 560, 1598, 1576, 1601, 873,
	266, 1627, 301, 1088, 1089, 1571, 1572, 950, 824, 1631,
	1298, 1094, 947, 1670, 950, 50, 591, 1099, 1100, 1102,
	1104, 1105, 19, 1108, 1109, 17, 16, 15, 13, 12,
	590, 301, 11, 1120, 928, 1606, 1622, 948, 18, 1149,
	301, 9, 1625, 7, 87, 87, 950, 24, 87, 885,
	552, 23, 22, 5, 927, 885, 87, 1639, 4, 1467,
	2, 1, 87, 1190, 0, 1641, 0, 1476, 1643, 1648,
	87, 1485, 1615, 1484, 0, 1188, 595, 809, 1640, 1642,
	0, 1647, 697, 1486, 697, 246, 301, 299, 299, 1147,
	1654, 299, 1570, 928, 285, 0, 948, 0, 1154, 87,
	87, 87, 0, 87, 1655, 1171, 0, 301, 412, 412,
	0, 1674, 0, 1661, 928, 596, 0, 948, 515, 947,
	0, 87, 1677, 1652, 1052, 1052, 1672, 0, 1452, 0,
	1675, 0, 0, 1678, 1680, 1679, 597, 950, 1485, 1186,
	1484, 0, 0, 1191, 87, 0, 0, 0, 0, 0,
	1486, 1613, 0, 1668, 1700, 0, 949, 1701, 1453, 1658,
	0, 927, 0, 580, 575, 1712, 0, 1715, 1713, 87,
	0, 0, 0, 0, 1721, 1719, 0, 0, 947, 1722,
	1723, 248, 1052, 1052, 1052, 0, 0, 0, 1676, 0,
	949, 928, 1735, 1734, 948, 259, 0, 949, 0, 947,
	0, 0, 0, 1645, 1194, 1195, 0, 1560, 0, 1741,
	0, 705, 707, 72, 0, 0, 0, 1187, 714, 0,
	927, 0, 1720, 0, 1189, 0, 0, 0, 250, 949,
	754, 755, 756, 757, 758, 260, 1448, 0, 1449, 761,
	0, 927, 0, 924, 950, 75, 1594, 249, 251, 0,
	0, 427, 32, 75, 0, 0, 299, 0, 0, 774,
	0, 1451, 1256, 1257, 1258, 80, 0, 0, 1454, 0,
	76, 0, 0, 80, 1686, 0, 947, 924, 76, 32,
	0, 0, 718, 252, 924, 0, 0, 0, 0, 0,
	0, 0, 77, 253, 254, 278, 0, 0, 286, 0,
	77, 0, 0, 950, 0, 32, 0, 79, 255, 301,
	0, 1052, 1052, 0, 0, 79, 924, 286, 927, 0,
	949, 0, 1450, 1320, 950, 824, 810, 697, 0, 0,
	0, 1327, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 301, 0, 1158, 301, 0, 0, 0,
	0, 0, 1171, 0, 0, 0, 1346, 0, 1171, 0,
	0, 0, 0, 0, 1052, 1052, 1052, 1052, 1052, 1052,
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052,
	1052, 1052, 1052, 1669, 1052, 0, 0, 0, 0, 78,
	1162, 1354, 1355, 0, 0, 0, 0, 78, 0, 0,
	256, 950, 0, 257, 0, 1165, 0, 924, 258, 1388,
	0, 0, 0, 0, 0, 1160, 0, 0, 0, 0,
	0, 1163, 0, 0, 0, 0, 853, 949, 0, 81,
	0, 0, 0, 0, 0, 1161, 0, 81, 0, 0,
	0, 0, 0, 0, 1398, 1399, 1400, 1401, 1402, 1403,
	1404, 1405, 1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413,
	1414, 1415, 1416, 0, 1420, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1440, 1441, 824, 0, 722, 1164,
	0, 0, 718, 718, 0, 0, 949, 0, 1465, 0,
	1466, 0, 301, 1468, 1469, 1470, 724, 0, 750, 0,
	301, 0, 0, 0, 0, 0, 0, 949, 1481, 0,
	1490, 824, 1481, 0, 924, 0, 723, 0, 0, 0,
	301, 301, 738, 0, 301, 0, 0, 0, 0, 0,
	0, 0, 0, 718, 1171, 412, 0, 0, 0, 278,
	961, 962, 963, 964, 965, 966, 967, 968, 969, 970,
	971, 972, 973, 974, 975, 976, 977, 978, 979, 980,
	981, 982, 0, 0, 0, 0, 729, 0, 0, 0,
	0, 0, 0, 924, 0, 1536, 0, 0, 0, 0,
	0, 0, 1052, 751, 949, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 924, 1038, 0, 1049, 0, 1059,
	1061, 1066, 1069, 1070, 1071, 746, 0, 0, 0, 0,
	0, 739, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 722, 0, 0, 515, 824,
	0, 1554, 0, 246, 0, 0, 0, 0, 0, 0,
	301, 0, 0, 724, 0, 0, 0, 0, 0, 0,
	278, 0, 0, 278, 278, 0, 0, 1113, 0, 718,
	0, 0, 1559, 723, 0, 0, 740, 0, 0, 0,
	1052, 924, 0, 1481, 0, 0, 760, 748, 0, 301,
	764, 1597, 0, 0, 0, 0, 0, 722, 0, 301,
	0, 0, 0, 0, 0, 0, 0, 718, 0, 0,
	0, 0, 0, 0, 0, 724, 0, 0, 0, 0,
	0, 0, 0, 729, 0, 0, 0, 0, 0, 0,
	0, 0, 714, 0, 0, 723, 0, 0, 0, 747,
	0, 0, 0, 0, 0, 0, 734, 731, 732, 733,
	725, 726, 727, 728, 730, 0, 0, 0, 0, 1052,
	1619, 0, 0, 0, 0, 0, 0, 0, 739, 1633,
	1634, 0, 0, 1638, 0, 0, 0, 0, 1481, 0,
	0, 246, 0, 0, 0, 729, 0, 1490, 0, 0,
	0, 0, 32, 0, 32, 718, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 32, 1180, 0,
	0, 0, 1185, 0, 0, 0, 0, 722, 0, 741,
	742, 743, 0, 740, 1667, 718, 301, 0, 246, 744,
	739, 1199, 0, 0, 0, 724, 0, 750, 0, 1660,
	0, 1208, 0, 0, 0, 1481, 1597, 0, 0, 0,
	0, 0, 0, 0, 0, 723, 1221, 0, 0, 0,
	1226, 738, 0, 0, 722, 0, 741, 742, 743, 301,
	0, 0, 0, 0, 0, 0, 744, 0, 0, 0,
	0, 761, 724, 0, 750, 740, 0, 1066, 1066, 1066,
	0, 0, 0, 0, 718, 0, 733, 725, 726, 727,
	728, 730, 723, 0, 0, 729, 0, 0, 738, 1287,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1294, 0, 751, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 749, 0, 0, 412, 0, 0,
	0, 0, 0, 0, 746, 0, 412, 0, 0, 515,
	739, 0, 729, 0, 0, 0, 731, 732, 733, 725,
	726, 727, 728, 730, 0, 0, 0, 0, 0, 751,
	0, 0, 745, 0, 0, 0, 0, 0, 0, 21,
	0, 749, 0, 919, 0, 0, 0, 0, 0, 35,
	0, 746, 0, 0, 0, 0, 0, 739, 0, 0,
	0, 0, 0, 0, 1352, 740, 1353, 0, 0, 0,
	0, 0, 37, 999, 0, 0, 748, 1358, 42, 745,
	0, 0, 0, 0, 0, 1368, 0, 0, 0, 0,
	0, 1368, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 26, 0, 1385, 38, 0, 0, 0,
	27, 0, 740, 0, 1394, 0, 0, 1396, 0, 0,
	0, 0, 0, 748, 0, 28, 0, 0, 747, 0,
	0, 735, 736, 737, 0, 734, 731, 732, 733, 725,
	726, 727, 728, 730, 0, 0, 0, 1083, 0, 1426,
	1427, 0, 0, 0, 0, 0, 1084, 0, 1433, 1434,
	1435, 0, 0, 0, 0, 0, 0, 286, 0, 0,
	0, 0, 0, 0, 0, 747, 0, 0, 735, 736,
	737, 0, 734, 731, 732, 733, 725, 726, 727, 728,
	730, 0, 0, 0, 0, 0, 412, 0, 0, 1548,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 40,
	0, 0, 29, 0, 39, 0, 1496, 0, 0, 30,
	0, 0, 49, 0, 0, 0, 0, 33, 34, 0,
	0, 0, 0, 32, 0, 36, 0, 0, 0, 0,
	0, 1520, 51, 1172, 0, 0, 1524, 1525, 0, 0,
	722, 1527, 741, 742, 743, 41, 1529, 0, 0, 0,
	0, 0, 744, 0, 0, 0, 0, 0, 724, 52,
	750, 1534, 0, 0, 0, 1537, 47, 0, 0, 0,
	0, 0, 48, 0, 0, 0, 0, 0, 723, 0,
	0, 0, 0, 0, 738, 0, 0, 0, 0, 0,
	0, 46, 0, 0, 0, 0, 1545, 0, 999, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 760, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 729, 0,
	0, 722, 0, 741, 742, 743, 0, 1569, 0, 0,
	0, 0, 0, 744, 0, 751, 0, 0, 0, 724,
	0, 750, 0, 0, 0, 0, 0, 749, 1587, 0,
	0, 0, 0, 0, 0, 0, 0, 746, 760, 723,
	0, 0, 0, 739, 0, 738, 0, 1600, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1610, 1611, 745, 0, 0, 0, 0,
	1234, 0, 1251, 1252, 1253, 0, 0, 0, 0, 0,
	0, 0, 1518, 0, 0, 0, 0, 0, 0, 729,
	0, 0, 722, 1624, 741, 742, 743, 0, 740, 0,
	0, 0, 0, 1626, 744, 0, 751, 0, 0, 748,
	724, 0, 750, 0, 1248, 0, 0, 0, 749, 0,
	0, 0, 0, 0, 0, 515, 0, 0, 746, 0,
	723, 0, 0, 0, 739, 0, 738, 0, 0, 919,
	0, 0, 919, 0, 0, 0, 0, 0, 0, 0,
	0, 1234, 0, 1251, 1252, 1253, 745, 0, 1239, 0,
	0, 747, 0, 1362, 735, 736, 737, 0, 734, 731,
	732, 733, 725, 726, 727, 728, 730, 0, 0, 0,
	729, 0, 0, 0, 0, 1275, 0, 1254, 0, 740,
	1234, 0, 1251, 1252, 1253, 1248, 0, 751, 0, 0,
	748, 0, 1361, 1249, 0, 0, 0, 0, 0, 749,
	0, 0, 0, 0, 0, 0, 1699, 0, 0, 746,
	0, 0, 0, 0, 0, 739, 0, 0, 0, 1711,
	1711, 0, 0, 0, 1248, 0, 0, 0, 0, 1239,
	0, 0, 0, 0, 0, 0, 0, 745, 0, 0,
	0, 0, 747, 1711, 0, 735, 736, 737, 1250, 734,
	731, 732, 733, 725, 726, 727, 728, 730, 1254, 0,
	0, 0, 0, 0, 0, 0, 1274, 0, 1239, 0,
	740, 0, 1711, 0, 1249, 0, 0, 0, 0, 0,
	0, 748, 0, 0, 0, 32, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1254, 0, 0,
	0, 0, 0, 0, 0, 0, 919, 919, 0, 0,
	919, 0, 0, 1249, 1245, 1246, 1247, 0, 1244, 1241,
	1242, 1243, 1235, 1236, 1237, 1238, 1240, 0, 0, 1250,
	0, 0, 0, 747, 0, 0, 735, 736, 737, 0,
	734, 731, 732, 733, 725, 726, 727, 728, 730, 0,
	0, 0, 0, 0, 0, 0, 0, 1273, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1250, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1245, 1246, 1247, 0, 1244,
	1241, 1242, 1243, 1235, 1236, 1237, 1238, 1240, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1245, 1246, 1247, 0, 1244, 1241,
	1242, 1243, 1235, 1236, 1237, 1238, 1240, 0, 0, 0,
	1579, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 594,
	0, 0, 0, 0, 0, 919, 0, 0, 0, 0,
	0, 89, 90, 599, 91, 600, 601, 602, 603, 604,
	605, 606, 607, 92, 93, 191, 192, 193, 94, 194,
	195, 608, 95, 196, 197, 96, 609, 610, 198, 199,
	200, 611, 201, 612, 332, 613, 97, 98, 99, 0,
	100, 614, 101, 615, 333, 102, 103, 616, 617, 618,
	619, 620, 621, 104, 105, 106, 107, 202, 108, 203,
	204, 622, 623, 109, 624, 625, 626, 110, 111, 627,
	112, 628, 760, 629, 205, 113, 206, 630, 631, 632,
	114, 115, 207, 0, 116, 633, 117, 634, 635, 334,
	636, 118, 208, 637, 209, 638, 119, 120, 210, 211,
	639, 640, 121, 641, 335, 122, 212, 213, 214, 642,
	215, 643, 336, 123, 337, 124, 125, 644, 645, 216,
	338, 126, 339, 646, 127, 647, 648, 128, 0, 129,
	130, 131, 132, 133, 340, 134, 135, 138, 136, 649,
	137, 650, 217, 139, 218, 140, 141, 651, 652, 653,
	654, 655, 142, 219, 341, 143, 342, 220, 144, 145,
	656, 221, 146, 222, 657, 147, 148, 149, 223, 150,
	151, 658, 153, 154, 152, 155, 659, 156, 343, 157,
	158, 224, 159, 0, 247, 160, 161, 660, 225, 162,
	163, 661, 164, 165, 344, 166, 226, 167, 662, 168,
	169, 171, 227, 170, 228, 663, 172, 664, 173, 174,
	665, 229, 230, 231, 666, 667, 175, 232, 233, 668,
	176, 177, 178, 179, 669, 670, 180, 181, 182, 671,
	672, 183, 184, 185, 234, 235, 673, 186, 674, 675,
	676, 677, 187, 188, 189, 190, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 594, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1345, 89, 90, 599, 91, 600, 601, 602,
	603, 604, 605, 606, 607, 92, 93, 191, 192, 193,
	94, 194, 195, 608, 95, 196, 197, 96, 609, 610,
	198, 199, 200, 611, 201, 612, 332, 613, 97, 98,
	99, 0, 100, 614, 101, 615, 333, 102, 103, 616,
	617, 618, 619, 620, 621, 104, 105, 106, 107, 202,
	108, 203, 204, 622, 623, 109, 624, 625, 626, 110,
	111, 627, 112, 628, 0, 629, 205, 113, 206, 630,
	631, 632, 114, 115, 207, 0, 116, 633, 117, 634,
	635, 334, 636, 118, 208, 637, 209, 638, 119, 120,
	210, 211, 639, 640, 121, 641, 335, 122, 212, 213,
	214, 642, 215, 643, 336, 123, 337, 124, 125, 644,
	645, 216, 338, 126, 339, 646, 127, 647, 648, 128,
	0, 129, 130, 131, 132, 133, 340, 134, 135, 138,
	136, 649, 137, 650, 217, 139, 218, 140, 141, 651,
	652, 653, 654, 655, 142, 219, 341, 143, 342, 220,
	144, 145, 656, 221, 146, 222, 657, 147, 148, 149,
	223, 150, 151, 658, 153, 154, 152, 155, 659, 156,
	343, 157, 158, 224, 159, 0, 247, 160, 161, 660,
	225, 162, 163, 661, 164, 165, 344, 166, 226, 167,
	662, 168, 169, 171, 227, 170, 228, 663, 172, 664,
	173, 174, 665, 229, 230, 231, 666, 667, 175, 232,
	233, 668, 176, 177, 178, 179, 669, 670, 180, 181,
	182, 671, 672, 183, 184, 185, 234, 235, 673, 186,
	674, 675, 676, 677, 187, 188, 189, 190, 0, 0,
	594, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 812, 89, 90, 599, 91, 600, 601, 602, 603,
	604, 605, 606, 607, 92, 93, 191, 192, 193, 94,
	194, 195, 608, 95, 196, 197, 96, 609, 610, 198,
	199, 200, 611, 201, 612, 332, 613, 97, 98, 99,
	0, 100, 614, 101, 615, 333, 102, 103, 616, 617,
	618, 619, 620, 621, 104, 105, 106, 107, 202, 108,
	203, 204, 622, 623, 109, 624, 625, 626, 110, 111,
	627, 112, 628, 0, 629, 205, 113, 206, 630, 631,
	632, 114, 115, 207, 0, 116, 633, 117, 634, 635,
	334, 636, 118, 208, 637, 209, 638, 119, 120, 210,
	211, 639, 640, 121, 641, 335, 122, 212, 213, 214,
	642, 215, 643, 336, 123, 337, 124, 125, 644, 645,
	216, 338, 126, 339, 646, 127, 647, 648, 128, 0,
	129, 130, 131, 132, 133, 340, 134, 135, 138, 136,
	649, 137, 650, 217, 139, 218, 140, 141, 651, 652,
	653, 654, 655, 142, 219, 341, 143, 342, 220, 144,
	145, 656, 221, 146, 222, 657, 147, 148, 149, 223,
	150, 151, 658, 153, 154, 152, 155, 659, 156, 343,
	157, 158, 224, 159, 0, 247, 160, 161, 660, 225,
	162, 163, 661, 164, 165, 344, 166, 226, 167, 662,
	168, 169, 171, 227, 170, 228, 663, 172, 664, 173,
	174, 665, 229, 230, 231, 666, 667, 175, 232, 233,
	668, 176, 177, 178, 179, 669, 670, 180, 181, 182,
	671, 672, 183, 184, 185, 234, 235, 673, 186, 674,
	675, 676, 677, 187, 188, 189, 190, 447, 436, 437,
	434, 435, 423, 0, 0, 0, 0, 0, 0, 89,
	90, 1017, 91, 0, 0, 0, 0, 429, 0, 0,
	0, 92, 93, 191, 476, 477, 94, 478, 479, 0,
	95, 196, 197, 96, 444, 462, 480, 481, 200, 0,
	472, 0, 455, 0, 97, 98, 99, 0, 100, 0,
	101, 0, 333, 102, 103, 0, 456, 458, 0, 457,
	459, 104, 105, 106, 107, 482, 108, 483, 484, 0,
	0, 109, 0, 1018, 0, 475, 111, 0, 112, 0,
	0, 0, 428, 113, 463, 442, 0, 0, 114, 115,
	485, 0, 116, 0, 117, 0, 0, 334, 0, 118,
	473, 0, 209, 0, 119, 120, 469, 471, 0, 0,
	121, 0, 335, 122, 486, 487, 488, 0, 454, 0,
	336, 123, 337, 124, 125, 0, 0, 474, 338, 126,
	339, 0, 127, 0, 0, 128, 0, 129, 130, 131,
	132, 133, 340, 134, 135, 138, 136, 418, 137, 443,
	470, 139, 489, 140, 141, 0, 0, 0, 0, 0,
	142, 219, 341, 143, 342, 464, 144, 145, 0, 465,
	146, 222, 0, 147, 148, 149, 490, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 343, 157, 158, 432,
	159, 0, 247, 160, 161, 0, 225, 162, 163, 460,
	164, 165, 344, 166, 491, 167, 0, 168, 169, 171,
	492, 170, 466, 0, 172, 0, 173, 174, 0, 229,
	493, 494, 0, 0, 175, 467, 468, 441, 176, 177,
	178, 179, 0, 0, 180, 181, 182, 461, 0, 183,
	184, 185, 234, 495, 1016, 186, 0, 0, 0, 0,
	187, 188, 189, 190, 419, 0, 0, 447, 436, 437,
	434, 435, 423, 0, 0, 415, 416, 1019, 0, 89,
	90, 417, 91, 0, 424, 1014, 0, 429, 0, 0,
	0, 92, 93, 191, 476, 477, 94, 478, 479, 0,
	95, 196, 197, 96, 444, 462, 480, 481, 200, 0,
	472, 0, 455, 0, 97, 98, 99, 0, 100, 0,
	101, 0, 333, 102, 103, 0, 456, 458, 0, 457,
	459, 104, 105, 106, 107, 482, 108, 483, 484, 516,
	0, 109, 0, 0, 0, 475, 111, 0, 112, 0,
	0, 0, 428, 113, 463, 442, 0, 0, 114, 115,
	485, 0, 116, 0, 117, 0, 0, 334, 0, 118,
	473, 0, 209, 0, 119, 120, 469, 471, 0, 0,
	121, 0, 335, 122, 486, 487, 488, 0, 454, 0,
	336, 123, 337, 124, 125, 0, 0, 474, 338, 126,
	339, 0, 127, 0, 0, 128, 0, 129, 130, 131,
	132, 133, 340, 134, 135, 138, 136, 418, 137, 443,
	470, 139, 489, 140, 141, 0, 0, 0, 0, 0,
	142, 219, 341, 143, 342, 464, 144, 145, 0, 465,
	146, 222, 0, 147, 148, 149, 490, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 343, 157, 158, 432,
	159, 0, 247, 160, 161, 49, 225, 162, 163, 460,
	164, 165, 344, 166, 491, 167, 0, 168, 169, 171,
	492, 170, 466, 0, 172, 51, 173, 174, 0, 229,
	493, 494, 0, 0, 175, 467, 468, 441, 176, 177,
	178, 179, 0, 0, 180, 181, 182, 461, 0, 183,
	184, 185, 331, 495, 0, 186, 0, 0, 0, 47,
	187, 188, 189, 190, 419, 48, 0, 447, 436, 437,
	434, 435, 423, 0, 0, 415, 416, 0, 0, 89,
	90, 417, 91, 0, 424, 0, 0, 429, 0, 0,
	0, 92, 93, 191, 476, 477, 94, 478, 479, 0,
	95, 196, 197, 96, 444, 462, 480, 481, 200, 0,
	472, 0, 455, 0, 97, 98, 99, 0, 100, 0,
	101, 0, 333, 102, 103, 0, 456, 458, 0, 457,
	459, 104, 105, 106, 107, 482, 108, 483, 484, 0,
	0, 109, 0, 0, 0, 475, 111, 0, 112, 0,
	0, 0, 428, 113, 463, 442, 0, 0, 114, 115,
	485, 0, 116, 0, 117, 0, 0, 334, 0, 118,
	473, 0, 209, 0, 119, 120, 469, 471, 0, 0,
	121, 0, 335, 122, 486, 487, 488, 0, 454, 0,
	336, 123, 337, 124, 125, 0, 0, 474, 338, 126,
	339, 0, 127, 0, 0, 128, 0, 129, 130, 131,
	132, 133, 340, 134, 135, 138, 136, 418, 137, 443,
	470, 139, 489, 140, 141, 0, 0, 0, 0, 0,
	142, 219, 341, 143, 342, 464, 144, 145, 0, 465,
	146, 222, 0, 147, 148, 149, 490, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 343, 157, 158, 432,
	159, 0, 247, 160, 161, 49, 225, 162, 163, 460,
	164, 165, 344, 166, 491, 167, 0, 168, 169, 171,
	492, 170, 466, 0, 172, 51, 173, 174, 0, 229,
	493, 494, 0, 0, 175, 467, 468, 441, 176, 177,
	178, 179, 0, 0, 180, 181, 182, 461, 0, 183,
	184, 185, 331, 495, 0, 186, 0, 0, 0, 47,
	187, 188, 189, 190, 419, 48, 0, 447, 436, 437,
	434, 435, 423, 0, 0, 415, 416, 0, 0, 89,
	90, 417, 91, 0, 424, 0, 0, 429, 0, 0,
	0, 92, 93, 191, 476, 477, 94, 478, 479, 1062,
	95, 196, 197, 96, 444, 462, 480, 481, 200, 0,
	472, 0, 455, 0, 97, 98, 99, 0, 100, 0,
	101, 0, 333, 102, 103, 0, 456, 458, 0, 457,
	459, 104, 105, 106, 107, 482, 108, 483, 484, 0,
	0, 109, 0, 0, 0, 475, 111, 0, 112, 0,
	0, 0, 428, 113, 463, 442, 0, 0, 114, 115,
	485, 0, 116, 0, 117, 0, 1067, 334, 0, 118,
	473, 0, 209, 0, 119, 120, 469, 471, 0, 0,
	121, 0, 335, 122, 486, 487, 488, 0, 454, 0,
	336, 123, 337, 124, 125, 0, 1063, 474, 338, 126,
	339, 0, 127, 0, 0, 128, 0, 129, 130, 131,
	132, 133, 340, 134, 135, 138, 136, 418, 137, 443,
	470, 139, 489, 140, 141, 0, 0, 0, 0, 0,
	142, 219, 341, 143, 342, 464, 144, 145, 0, 465,
	146, 222, 0, 147, 148, 149, 490, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 343, 157, 158, 432,
	159, 0, 247, 160, 161, 0, 225, 162, 163, 460,
	164, 165, 344, 166, 491, 167, 0, 168, 169, 171,
	492, 170, 466, 0, 172, 0, 173, 174, 0, 229,
	493, 494, 0, 1064, 175, 467, 468, 441, 176, 177,
	178, 179, 0, 0, 180, 181, 182, 461, 0, 183,
	184, 185, 234, 495, 0, 186, 0, 0, 0, 0,
	187, 188, 189, 190, 419, 447, 436, 437, 434, 435,
	423, 0, 0, 0, 0, 415, 416, 89, 90, 0,
	91, 417, 0, 0, 424, 429, 0, 0, 0, 92,
	93, 191, 476, 477, 94, 478, 479, 0, 95, 196,
	197, 96, 444, 462, 480, 481, 200, 0, 472, 0,
	455, 0, 97, 98, 99, 0, 100, 0, 101, 0,
	333, 102, 103, 0, 456, 458, 0, 457, 459, 104,
	105, 106, 107, 482, 108, 483, 484, 0, 0, 109,
	0, 0, 0, 475, 111, 0, 112, 0, 0, 0,
	428, 113, 463, 442, 0, 0, 114, 115, 485, 0,
	116, 0, 117, 0, 0, 334, 0, 118, 473, 0,
	209, 0, 119, 120, 469, 471, 0, 0, 121, 0,
	335, 122, 486, 487, 488, 0, 454, 0, 336, 123,
	337, 124, 125, 0, 0, 474, 338, 126, 339, 0,
	127, 0, 0, 128, 0, 129, 130, 131, 132, 133,
	340, 134, 135, 138, 136, 418, 137, 443, 470, 139,
	489, 140, 141, 0, 0, 0, 0, 0, 142, 219,
	341, 143, 342, 464, 144, 145, 0, 465, 146, 222,
	0, 147, 148, 149, 490, 150, 151, 0, 153, 154,
	152, 155, 0, 156, 343, 157, 158, 432, 159, 0,
	247, 160, 161, 0, 225, 162, 163, 460, 164, 165,
	344, 166, 491, 167, 0, 168, 169, 171, 492, 170,
	466, 0, 172, 0, 173, 174, 0, 229, 493, 494,
	0, 0, 175, 467, 468, 441, 176, 177, 178, 179,
	0, 0, 180, 181, 182, 461, 0, 183, 184, 185,
	234, 495, 0, 186, 0, 0, 0, 0, 187, 188,
	189, 190, 419, 0, 0, 447, 436, 437, 434, 435,
	423, 0, 0, 415, 416, 0, 0, 89, 90, 417,
	91, 0, 424, 1423, 0, 429, 0, 0, 0, 92,
	93, 191, 476, 477, 94, 478, 479, 0, 95, 196,
	197, 96, 444, 462, 480, 481, 200, 0, 472, 0,
	455, 0, 97, 98, 99, 0, 100, 0, 101, 0,
	333, 102, 103, 0, 456, 458, 0, 457, 459, 104,
	105, 106, 107, 482, 108, 483, 484, 0, 0, 109,
	0, 0, 0, 475, 111, 0, 112, 0, 0, 0,
	428, 113, 463, 442, 0, 0, 114, 115, 485, 0,
	116, 0, 117, 0, 0, 334, 0, 118, 473, 0,
	209, 0, 119, 120, 469, 471, 0, 0, 121, 0,
	335, 122, 486, 487, 488, 0, 454, 0, 336, 123,
	337, 124, 125, 0, 0, 474, 338, 126, 339, 0,
	127, 0, 0, 128, 0, 129, 130, 131, 132, 133,
	340, 134, 135, 138, 136, 418, 137, 443, 470, 139,
	489, 140, 141, 0, 0, 0, 0, 0, 142, 219,
	341, 143, 342, 464, 144, 145, 0, 465, 146, 222,
	0, 147, 148, 149, 490, 150, 151, 0, 153, 154,
	152, 155, 0, 156, 343, 157, 158, 432, 159, 0,
	247, 160, 161, 0, 225, 162, 163, 460, 164, 165,
	344, 166, 491, 167, 0, 168, 169, 171, 492, 170,
	466, 0, 172, 0, 173, 174, 0, 229, 493, 494,
	0, 0, 175, 467, 468, 441, 176, 177, 178, 179,
	0, 0, 180, 181, 182, 461, 0, 183, 184, 185,
	234, 495, 0, 186, 0, 0, 0, 0, 187, 188,
	189, 190, 419, 0, 0, 447, 436, 437, 434, 435,
	423, 0, 0, 415, 416, 0, 0, 89, 90, 417,
	91, 0, 424, 1365, 0, 429, 0, 0, 0, 92,
	93, 191, 476, 477, 94, 478, 479, 0, 95, 196,
	197, 96, 444, 462, 480, 481, 200, 0, 472, 0,
	455, 0, 97, 98, 99, 0, 100, 0, 101, 0,
	333, 102, 103, 0, 456, 458, 0, 457, 459, 104,
	105, 106, 107, 482, 108, 483, 484, 0, 0, 109,
	0, 0, 0, 475, 111, 0, 112, 0, 0, 0,
	428, 113, 463, 442, 0, 0, 114, 115, 485, 0,
	116, 0, 117, 0, 0, 334, 0, 118, 473, 0,
	209, 0, 119, 120, 469, 471, 0, 0, 121, 0,
	335, 122, 486, 487, 488, 0, 454, 0, 336, 123,
	337, 124, 125, 0, 0, 474, 338, 126, 339, 0,
	127, 0, 0, 128, 0, 129, 130, 131, 132, 133,
	340, 134, 135, 138, 136, 418, 137, 443, 470, 139,
	489, 140, 141, 0, 0, 0, 0, 0, 142, 219,
	341, 143, 342, 464, 144, 145, 0, 465, 146, 222,
	0, 147, 148, 149, 490, 150, 151, 0, 153, 154,
	152, 155, 0, 156, 343, 157, 158, 432, 159, 0,
	247, 160, 161, 0, 225, 162, 163, 460, 164, 165,
	344, 166, 491, 167, 0, 168, 169, 171, 492, 170,
	466, 0, 172, 0, 173, 174, 0, 229, 493, 494,
	0, 0, 175, 467, 468, 441, 176, 177, 178, 179,
	0, 0, 180, 181, 182, 461, 0, 183, 184, 185,
	234, 495, 0, 186, 0, 0, 0, 0, 187, 188,
	189, 190, 419, 0, 0, 447, 436, 437, 434, 435,
	423, 0, 0, 415, 416, 0, 0, 89, 90, 417,
	91, 0, 424, 1013, 0, 429, 0, 0, 0, 92,
	93, 191, 476, 477, 94, 478, 479, 0, 95, 196,
	197, 96, 444, 462, 480, 481, 200, 0, 472, 0,
	455, 0, 97, 98, 99, 0, 100, 0, 101, 0,
	333, 102, 103, 0, 456, 458, 0, 457, 459, 104,
	105, 106, 107, 482, 108, 483, 484, 0, 0, 109,
	0, 0, 0, 475, 111, 0, 112, 0, 0, 0,
	428, 113, 463, 442, 0, 0, 114, 115, 485, 0,
	116, 0, 117, 0, 0, 334, 0, 118, 473, 0,
	209, 0, 119, 120, 469, 471, 0, 0, 121, 0,
	335, 122, 486, 487, 488, 0, 454, 0, 336, 123,
	337, 124, 125, 0, 0, 474, 338, 126, 339, 0,
	127, 0, 0, 128, 0, 129, 130, 131, 132, 133,
	340, 134, 135, 138, 136, 418, 137, 443, 470, 139,
	489, 140, 141, 0, 0, 0, 0, 0, 142, 219,
	341, 143, 342, 464, 144, 145, 0, 465, 146, 222,
	0, 147, 148, 149, 490, 150, 151, 0, 153, 154,
	152, 155, 0, 156, 343, 157, 158, 432, 159, 0,
	247, 160, 161, 0, 225, 162, 163, 460, 164, 165,
	344, 166, 491, 167, 0, 168, 169, 171, 492, 170,
	466, 0, 172, 0, 173, 174, 0, 229, 493, 494,
	0, 0, 175, 467, 468, 441, 176, 177, 178, 179,
	0, 0, 180, 181, 182, 461, 0, 183, 184, 185,
	234, 495, 0, 186, 0, 0, 0, 0, 187, 188,
	189, 190, 419, 447, 436, 437, 434, 435, 423, 0,
	0, 0, 0, 415, 416, 89, 90, 0, 91, 417,
	766, 1009, 424, 429, 0, 0, 0, 92, 93, 191,
	476, 477, 94, 478, 479, 0, 95, 196, 197, 96,
	444, 462, 480, 481, 200, 0, 472, 0, 455, 0,
	97, 98, 99, 0, 100, 0, 101, 0, 333, 102,
	103, 0, 456, 458, 0, 457, 459, 104, 105, 106,
	107, 482, 108, 483, 484, 0, 0, 109, 0, 0,
	0, 475, 111, 0, 112, 0, 0, 0, 428, 113,
	463, 442, 0, 0, 114, 115, 485, 0, 116, 0,
	117, 0, 0, 334, 0, 118, 473, 0, 209, 0,
	119, 120, 469, 471, 0, 0, 121, 0, 335, 122,
	486, 487, 488, 0, 454, 0, 336, 123, 337, 124,
	125, 0, 0, 474, 338, 126, 339, 0, 127, 0,
	0, 128, 0, 129, 130, 131, 132, 133, 340, 134,
	135, 138, 136, 418, 137, 443, 470, 139, 489, 140,
	141, 0, 0, 0, 0, 0, 142, 219, 341, 143,
	342, 464, 144, 145, 0, 465, 146, 222, 0, 147,
	148, 149, 490, 150, 151, 0, 153, 154, 152, 155,
	0, 156, 343, 157, 158, 432, 159, 0, 247, 160,
	161, 0, 225, 162, 163, 460, 164, 165, 344, 166,
	491, 167, 0, 168, 169, 171, 492, 170, 466, 0,
	172, 0, 173, 174, 0, 229, 493, 494, 0, 0,
	175, 467, 468, 441, 176, 177, 178, 179, 0, 0,
	180, 181, 182, 461, 0, 183, 184, 185, 234, 495,
	0, 186, 0, 0, 0, 0, 187, 188, 189, 190,
	419, 0, 0, 447, 436, 437, 434, 435, 423, 0,
	0, 415, 416, 413, 0, 89, 90, 417, 91, 0,
	424, 0, 0, 429, 0, 0, 0, 92, 93, 191,
	476, 477, 94, 478, 479, 0, 95, 196, 197, 96,
	444, 462, 480, 481, 200, 0, 472, 0, 455, 0,
	97, 98, 99, 0, 100, 0, 101, 0, 333, 102,
	103, 0, 456, 458, 0, 457, 459, 104, 105, 106,
	107, 482, 108, 483, 484, 0, 0, 109, 0, 0,
	0, 475, 111, 0, 112, 0, 0, 0, 428, 113,
	463, 442, 0, 0, 114, 115, 485, 0, 116, 0,
	117, 0, 0, 334, 0, 118, 473, 0, 209, 0,
	119, 120, 469, 471, 0, 0, 121, 0, 335, 122,
	486, 487, 488, 0, 454, 0, 336, 123, 337, 124,
	125, 0, 0, 474, 338, 126, 339, 0, 127, 0,
	0, 128, 0, 129, 130, 131, 132, 133, 340, 134,
	135, 138, 136, 418, 137, 443, 470, 139, 489, 140,
	141, 0, 0, 0, 0, 0, 142, 219, 341, 143,
	342, 464, 144, 145, 0, 465, 146, 222, 0, 147,
	148, 149, 490, 150, 151, 0, 153, 154, 152, 155,
	0, 156, 343, 157, 158, 432, 159, 0, 247, 160,
	161, 0, 225, 162, 163, 460, 164, 165, 344, 166,
	491, 167, 0, 168, 169, 171, 492, 170, 466, 0,
	172, 0, 173, 174, 0, 229, 493, 494, 0, 0,
	175, 467, 468, 441, 176, 177, 178, 179, 0, 0,
	180, 181, 182, 461, 0, 183, 184, 185, 234, 495,
	1371, 186, 0, 0, 0, 0, 187, 188, 189, 190,
	419, 447, 436, 437, 434, 435, 423, 0, 0, 0,
	0, 415, 416, 89, 90, 0, 91, 417, 0, 0,
	424, 429, 0, 0, 0, 92, 93, 191, 476, 477,
	94, 478, 479, 0, 95, 196, 197, 96, 444, 462,
	480, 481, 200, 0, 472, 0, 455, 0, 97, 98,
	99, 0, 100, 0, 101, 0, 333, 102, 103, 0,
	456, 458, 0, 457, 459, 104, 105, 106, 107, 482,
	108, 483, 484, 516, 0, 109, 0, 0, 0, 475,
	111, 0, 112, 0, 0, 0, 428, 113, 463, 442,
	0, 0, 114, 115, 485, 0, 116, 0, 117, 0,
	0, 334, 0, 118, 473, 0, 209, 0, 119, 120,
	469, 471, 0, 0, 121, 0, 335, 122, 486, 487,
	488, 0, 454, 0, 336, 123, 337, 124, 125, 0,
	0, 474, 338, 126, 339, 0, 127, 0, 0, 128,
	0, 129, 130, 131, 132, 133, 340, 134, 135, 138,
	136, 418, 137, 443, 470, 139, 489, 140, 141, 0,
	0, 0, 0, 0, 142, 219, 341, 143, 342, 464,
	144, 145, 0, 465, 146, 222, 0, 147, 148, 149,
	490, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	343, 157, 158, 432, 159, 0, 247, 160, 161, 0,
	225, 162, 163, 460, 164, 165, 344, 166, 491, 167,
	0, 168, 169, 171, 492, 170, 466, 0, 172, 0,
	173, 174, 0, 229, 493, 494, 0, 0, 175, 467,
	468, 441, 176, 177, 178, 179, 0, 0, 180, 181,
	182, 461, 0, 183, 184, 185, 234, 495, 0, 186,
	0, 0, 0, 0, 187, 188, 189, 190, 419, 447,
	436, 437, 434, 435, 423, 0, 0, 0, 0, 415,
	416, 89, 90, 0, 91, 417, 0, 0, 424, 429,
	0, 0, 0, 92, 93, 191, 476, 477, 94, 478,
	479, 0, 95, 196, 197, 96, 444, 462, 480, 481,
	200, 0, 472, 0, 455, 0, 97, 98, 99, 0,
	100, 0, 101, 0, 333, 102, 103, 0, 456, 458,
	0, 457, 459, 104, 105, 106, 107, 482, 108, 483,
	484, 0, 0, 109, 0, 0, 0, 475, 111, 0,
	112, 0, 0, 0, 428, 113, 463, 442, 0, 0,
	114, 115, 485, 0, 116, 0, 117, 0, 1067, 334,
	0, 118, 473, 0, 209, 0, 119, 120, 469, 471,
	0, 0, 121, 0, 335, 122, 486, 487, 488, 0,
	454, 0, 336, 123, 337, 124, 125, 0, 0, 474,
	338, 126, 339, 0, 127, 0, 0, 128, 0, 129,
	130, 131, 132, 133, 340, 134, 135, 138, 136, 418,
	137, 443, 470, 139, 489, 140, 141, 0, 0, 0,
	0, 0, 142, 219, 341, 143, 342, 464, 144, 145,
	0, 465, 146, 222, 0, 147, 148, 149, 490, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 343, 157,
	158, 432, 159, 0, 247, 160, 161, 0, 225, 162,
	163, 460, 164, 165, 344, 166, 491, 167, 0, 168,
	169, 171, 492, 170, 466, 0, 172, 0, 173, 174,
	0, 229, 493, 494, 0, 0, 175, 467, 468, 441,
	176, 177, 178, 179, 0, 0, 180, 181, 182, 461,
	0, 183, 184, 185, 234, 495, 0, 186, 0, 0,
	0, 0, 187, 188, 189, 190, 419, 447, 436, 437,
	434, 435, 423, 0, 0, 0, 0, 415, 416, 89,
	90, 706, 91, 417, 0, 0, 424, 429, 0, 0,
	0, 92, 93, 191, 476, 477, 94, 478, 479, 0,
	95, 196, 197, 96, 444, 462, 480, 481, 200, 0,
	472, 0, 455, 0, 97, 98, 99, 0, 100, 0,
	101, 0, 333, 102, 103, 0, 456, 458, 0, 457,
	459, 104, 105, 106, 107, 482, 108, 483, 484, 0,
	0, 109, 0, 0, 0, 475, 111, 0, 112, 0,
	0, 0, 428, 113, 463, 442, 0, 0, 114, 115,
	485, 0, 116, 0, 117, 0, 0, 334, 0, 118,
	473, 0, 209, 0, 119, 120, 469, 471, 0, 0,
	121, 0, 335, 122, 486, 487, 488, 0, 454, 0,
	336, 123, 337, 124, 125, 0, 0, 474, 338, 126,
	339, 0, 127, 0, 0, 128, 0, 129, 130, 131,
	132, 133, 340, 134, 135, 138, 136, 418, 137, 443,
	470, 139, 489, 140, 141, 0, 0, 0, 0, 0,
	142, 219, 341, 143, 342, 464, 144, 145, 0, 465,
	146, 222, 0, 147, 148, 149, 490, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 343, 157, 158, 432,
	159, 0, 247, 160, 161, 0, 225, 162, 163, 460,
	164, 165, 344, 166, 491, 167, 0, 168, 169, 171,
	492, 170, 466, 0, 172, 0, 173, 174, 0, 229,
	493, 494, 0, 0, 175, 467, 468, 441, 176, 177,
	178, 179, 0, 0, 180, 181, 182, 461, 0, 183,
	184, 185, 234, 495, 0, 186, 0, 0, 0, 0,
	187, 188, 189, 190, 419, 447, 436, 437, 434, 435,
	423, 0, 0, 0, 0, 415, 416, 89, 90, 0,
	91, 417, 0, 0, 424, 429, 0, 0, 0, 92,
	93, 191, 476, 477, 94, 478, 479, 0, 95, 196,
	197, 96, 444, 462, 480, 481, 200, 0, 472, 0,
	455, 0, 97, 98, 99, 0, 100, 0, 101, 0,
	333, 102, 1710, 0, 456, 458, 0, 457, 459, 104,
	105, 106, 107, 482, 108, 483, 484, 0, 0, 109,
	0, 0, 0, 475, 111, 0, 112, 0, 0, 0,
	428, 113, 463, 442, 0, 0, 114, 115, 485, 0,
	116, 0, 117, 0, 0, 334, 0, 118, 473, 0,
	209, 0, 119, 120, 469, 471, 0, 0, 121, 0,
	335, 122, 486, 487, 488, 0, 454, 0, 336, 123,
	337, 124, 125, 0, 0, 474, 338, 126, 339, 0,
	127, 0, 0, 128, 0, 129, 130, 131, 132, 133,
	340, 134, 135, 138, 136, 418, 137, 443, 470, 139,
	489, 140, 141, 0, 0, 0, 0, 0, 142, 219,
	341, 143, 342, 464, 144, 145, 0, 465, 146, 222,
	0, 147, 148, 149, 490, 150, 151, 0, 153, 154,
	152, 155, 0, 156, 343, 157, 158, 432, 159, 0,
	247, 160, 161, 0, 225, 162, 163, 460, 164, 165,
	344, 166, 491, 167, 0, 168, 169, 171, 492, 170,
	466, 0, 172, 0, 173, 174, 0, 229, 493, 494,
	0, 0, 175, 467, 468, 441, 176, 177, 1709, 179,
	0, 0, 180, 181, 182, 461, 0, 183, 184, 185,
	234, 495, 0, 186, 0, 0, 0, 0, 187, 188,
	189, 190, 419, 447, 436, 437, 434, 435, 423, 0,
	0, 0, 0, 415, 416, 89, 90, 0, 91, 417,
	0, 0, 424, 429, 0, 0, 0, 92, 93, 1708,
	476, 477, 94, 478, 479, 0, 95, 196, 197, 96,
	444, 462, 480, 481, 200, 0, 472, 0, 455, 0,
	97, 98, 99, 0, 100, 0, 101, 0, 333, 102,
	1710, 0, 456, 458, 0, 457, 459, 104, 105, 106,
	107, 482, 108, 483, 484, 0, 0, 109, 0, 0,
	0, 475, 111, 0, 112, 0, 0, 0, 428, 113,
	463, 442, 0, 0, 114, 115, 485, 0, 116, 0,
	117, 0, 0, 334, 0, 118, 473, 0, 209, 0,
	119, 120, 469, 471, 0, 0, 121, 0, 335, 122,
	486, 487, 488, 0, 454, 0, 336, 123, 337, 124,
	125, 0, 0, 474, 338, 126, 339, 0, 127, 0,
	0, 128, 0, 129, 130, 131, 132, 133, 340, 134,
	135, 138, 136, 418, 137, 443, 470, 139, 489, 140,
	141, 0, 0, 0, 0, 0, 142, 219, 341, 143,
	342, 464, 144, 145, 0, 465, 146, 222, 0, 147,
	148, 149, 490, 150, 151, 0, 153, 154, 152, 155,
	0, 156, 343, 157, 158, 432, 159, 0, 247, 160,
	161, 0, 225, 162, 163, 460, 164, 165, 344, 166,
	491, 167, 0, 168, 169, 171, 492, 170, 466, 0,
	172, 0, 173, 174, 0, 229, 493, 494, 0, 0,
	175, 467, 468, 441, 176, 177, 1709, 179, 0, 0,
	180, 181, 182, 461, 0, 183, 184, 185, 234, 495,
	0, 186, 0, 0, 0, 0, 187, 188, 189, 190,
	419, 447, 436, 437, 434, 435, 423, 0, 0, 0,
	0, 415, 416, 89, 90, 0, 91, 417, 0, 0,
	424, 429, 0, 0, 0, 92, 93, 191, 476, 477,
	94, 478, 479, 0, 95, 196, 197, 96, 444, 462,
	480, 481, 200, 0, 472, 0, 455, 0, 97, 98,
	99, 0, 100, 0, 101, 0, 333, 102, 103, 0,
	456, 458, 0, 457, 459, 104, 105, 106, 107, 482,
	108, 483, 484, 0, 0, 109, 0, 0, 0, 475,
	111, 0, 112, 0, 0, 0, 428, 113, 463, 442,
	0, 0, 114, 115, 485, 0, 116, 0, 117, 0,
	0, 334, 0, 118, 473, 0, 209, 0, 119, 120,
	469, 471, 0, 0, 121, 0, 335, 122, 486, 487,
	488, 0, 454, 0, 336, 123, 337, 124, 125, 0,
	0, 474, 338, 126, 339, 0, 127, 0, 0, 128,
	0, 129, 130, 131, 132, 133, 340, 134, 135, 138,
	136, 418, 137, 443, 470, 139, 489, 140, 141, 0,
	0, 0, 0, 0, 142, 219, 341, 143, 342, 464,
	144, 145, 0, 465, 146, 222, 0, 147, 148, 149,
	490, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	343, 157, 158, 432, 159, 0, 247, 160, 161, 0,
	225, 162, 163, 460, 164, 165, 344, 166, 491, 167,
	0, 168, 169, 171, 492, 170, 466, 0, 172, 0,
	173, 174, 0, 229, 493, 494, 0, 0, 175, 467,
	468, 441, 176, 177, 178, 179, 0, 0, 180, 181,
	182, 461, 0, 183, 184, 185, 234, 495, 0, 186,
	0, 0, 0, 0, 187, 188, 189, 190, 419, 447,
	436, 437, 434, 435, 423, 0, 0, 0, 0, 415,
	416, 89, 90, 0, 91, 417, 0, 0, 424, 429,
	0, 0, 0, 92, 93, 191, 476, 477, 94, 478,
	479, 0, 95, 196, 197, 96, 444, 462, 480, 481,
	200, 0, 472, 0, 455, 0, 97, 98, 99, 0,
	100, 0, 101, 0, 333, 102, 103, 0, 456, 458,
	0, 457, 459, 104, 105, 106, 107, 482, 108, 483,
	484, 0, 0, 109, 0, 0, 0, 475, 111, 0,
	112, 0, 0, 0, 428, 113, 463, 442, 0, 0,
	114, 115, 485, 0, 116, 0, 117, 0, 0, 334,
	0, 118, 473, 0, 209, 0, 119, 120, 469, 471,
	0, 0, 121, 0, 335, 122, 486, 487, 488, 0,
	454, 0, 336, 123, 337, 124, 125, 0, 0, 474,
	338, 126, 339, 0, 127, 0, 0, 128, 0, 129,
	130, 131, 132, 133, 340, 134, 135, 138, 136, 0,
	137, 443, 470, 139, 489, 140, 141, 0, 0, 0,
	0, 0, 142, 219, 341, 143, 342, 464, 144, 145,
	0, 465, 146, 222, 0, 147, 148, 149, 490, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 343, 157,
	158, 1057, 159, 0, 247, 160, 161, 0, 225, 162,
	163, 460, 164, 165, 344, 166, 491, 167, 0, 168,
	169, 171, 492, 170, 466, 0, 172, 0, 173, 174,
	0, 229, 493, 494, 0, 0, 175, 467, 468, 441,
	176, 177, 178, 179, 0, 0, 180, 181, 182, 461,
	0, 183, 184, 185, 234, 495, 0, 186, 0, 0,
	0, 0, 187, 188, 189, 190, 0, 447, 436, 437,
	434, 435, 423, 0, 0, 0, 0, 1053, 1054, 89,
	90, 0, 91, 1055, 0, 0, 1056, 429, 0, 0,
	0, 92, 93, 0, 476, 477, 94, 478, 479, 0,
	95, 196, 197, 96, 444, 462, 480, 481, 200, 0,
	472, 0, 455, 0, 97, 98, 99, 0, 100, 0,
	101, 0, 333, 102, 1710, 0, 456, 458, 0, 457,
	459, 104, 105, 106, 107, 482, 108, 483, 484, 0,
	0, 109, 0, 0, 0, 475, 111, 0, 112, 0,
	0, 0, 428, 113, 463, 442, 0, 0, 114, 115,
	485, 0, 116, 0, 117, 0, 0, 334, 0, 118,
	473, 0, 209, 0, 119, 120, 469, 471, 0, 0,
	121, 0, 335, 122, 486, 487, 488, 0, 454, 0,
	0, 123, 337, 124, 125, 0, 0, 474, 338, 126,
	0, 0, 127, 0, 0, 128, 0, 129, 130, 131,
	132, 133, 340, 134, 135, 138, 136, 418, 137, 443,
	470, 139, 489, 140, 141, 0, 0, 0, 0, 0,
	142, 219, 341, 143, 342, 464, 144, 145, 0, 465,
	146, 222, 0, 147, 148, 149, 490, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 343, 157, 158, 432,
	159, 0, 247, 160, 161, 0, 225, 162, 163, 460,
	164, 165, 0, 166, 491, 167, 0, 168, 169, 171,
	492, 170, 466, 0, 172, 0, 173, 174, 0, 229,
	493, 494, 0, 0, 175, 467, 468, 441, 176, 177,
	1709, 179, 0, 0, 180, 181, 182, 461, 0, 183,
	184, 185, 234, 495, 0, 186, 0, 0, 0, 0,
	187, 188, 189, 190, 0, 447, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 415, 416, 89, 90, 0,
	91, 417, 0, 0, 424, 0, 0, 0, 0, 92,
	93, 191, 192, 193, 94, 194, 195, 0, 95, 196,
	197, 96, 0, 462, 198, 199, 200, 0, 472, 0,
	455, 0, 97, 98, 99, 0, 100, 0, 101, 0,
	333, 102, 103, 0, 456, 458, 0, 457, 459, 104,
	105, 106, 107, 202, 108, 203, 204, 0, 0, 109,
	0, 0, 0, 110, 111, 0, 112, 0, 0, 0,
	205, 113, 463, 0, 0, 0, 114, 115, 207, 0,
	116, 0, 117, 0, 0, 334, 0, 118, 473, 0,
	209, 0, 119, 120, 469, 471, 0, 0, 121, 0,
	335, 122, 212, 213, 214, 0, 215, 0, 336, 123,
	337, 124, 125, 0, 0, 474, 338, 126, 339, 0,
	127, 0, 0, 128, 0, 129, 130, 131, 132, 133,
	340, 134, 135, 138, 136, 0, 137, 0, 470, 139,
	218, 140, 141, 0, 0, 0, 0, 0, 142, 219,
	341, 143, 342, 464, 144, 145, 0, 465, 146, 222,
	0, 147, 148, 149, 223, 150, 151, 0, 153, 154,
	152, 155, 0, 156, 343, 157, 158, 224, 159, 0,
	247, 160, 161, 0, 225, 162, 163, 460, 164, 165,
	344, 166, 226, 167, 0, 168, 169, 171, 227, 170,
	466, 0, 172, 0, 173, 174, 0, 229, 230, 231,
	0, 0, 175, 467, 468, 0, 176, 177, 178, 179,
	0, 0, 180, 181, 182, 461, 0, 183, 184, 185,
	234, 235, 0, 186, 0, 0, 0, 0, 187, 188,
	189, 190, 327, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 89, 90, 0, 91, 0, 0,
	0, 0, 1483, 0, 0, 0, 92, 93, 191, 192,
	193, 94, 194, 195, 0, 95, 196, 197, 96, 0,
	0, 198, 199, 200, 0, 201, 0, 332, 0, 97,
	98, 99, 0, 100, 0, 101, 0, 333, 102, 103,
	0, 0, 0, 0, 0, 0, 104, 105, 106, 107,
	202, 108, 203, 204, 0, 0, 109, 0, 0, 0,
	110, 111, 0, 112, 0, 0, 0, 205, 113, 206,
	0, 0, 0, 114, 115, 207, 0, 116, 0, 117,
	0, 0, 334, 0, 118, 208, 0, 209, 0, 119,
	120, 210, 211, 0, 0, 121, 0, 335, 122, 212,
	213, 214, 0, 215, 0, 336, 123, 337, 124, 125,
	0, 0, 216, 338, 126, 339, 0, 127, 0, 0,
	128, 0, 129, 130, 131, 132, 133, 340, 134, 135,
	138, 136, 0, 137, 0, 217, 139, 218, 140, 141,
	0, 0, 0, 0, 0, 142, 219, 341, 143, 342,
	220, 144, 145, 0, 221, 146, 222, 0, 147, 148,
	149, 223, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 343, 157, 158, 224, 159, 0, 247, 160, 161,
	49, 225, 162, 163, 0, 164, 165, 344, 166, 226,
	167, 0, 168, 169, 171, 227, 170, 228, 0, 172,
	51, 173, 174, 0, 229, 230, 231, 0, 0, 175,
	232, 233, 0, 176, 177, 178, 179, 0, 0, 180,
	181, 182, 0, 0, 183, 184, 185, 331, 235, 0,
	186, 0, 0, 0, 47, 187, 188, 189, 190, 0,
	48, 327, 578, 0, 579, 574, 569, 0, 0, 0,
	0, 0, 0, 89, 90, 0, 91, 0, 0, 46,
	0, 0, 0, 0, 0, 92, 93, 191, 192, 193,
	94, 194, 195, 0, 95, 196, 197, 96, 0, 0,
	198, 199, 200, 0, 201, 0, 332, 0, 97, 98,
	99, 0, 100, 0, 101, 0, 333, 102, 103, 0,
	0, 0, 0, 0, 0, 104, 105, 106, 107, 202,
	108, 203, 204, 582, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 205, 113, 206, 571,
	0, 0, 114, 115, 207, 0, 116, 0, 117, 0,
	0, 334, 0, 118, 208, 0, 209, 0, 119, 120,
	210, 211, 0, 0, 121, 0, 335, 122, 212, 213,
	214, 0, 215, 0, 336, 123, 337, 124, 125, 0,
	0, 216, 338, 126, 339, 0, 127, 0, 0, 128,
	0, 129, 130, 131, 132, 133, 340, 134, 135, 138,
	136, 0, 137, 0, 217, 139, 218, 140, 141, 0,
	572, 0, 0, 0, 142, 219, 341, 143, 342, 220,
	144, 145, 0, 221, 146, 222, 0, 147, 148, 149,
	223, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	343, 157, 158, 224, 159, 0, 247, 160, 161, 0,
	225, 162, 163, 0, 164, 165, 344, 166, 226, 167,
	0, 168, 169, 171, 227, 170, 228, 0, 172, 0,
	173, 174, 0, 229, 230, 231, 0, 0, 175, 232,
	233, 570, 176, 177, 178, 179, 0, 0, 180, 181,
	182, 0, 0, 183, 184, 185, 234, 235, 0, 186,
	0, 0, 0, 0, 187, 188, 189, 190, 0, 327,
	578, 0, 579, 574, 569, 0, 0, 0, 0, 580,
	575, 89, 90, 0, 91, 0, 0, 0, 0, 0,
	0, 0, 0, 92, 93, 191, 192, 193, 94, 194,
	195, 0, 95, 196, 197, 96, 0, 0, 198, 199,
	200, 0, 201, 0, 332, 0, 97, 98, 99, 0,
	100, 0, 101, 0, 333, 102, 103, 0, 0, 0,
	0, 0, 0, 104, 105, 106, 107, 202, 108, 203,
	204, 565, 0, 109, 0, 0, 0, 110, 111, 0,
	112, 0, 0, 0, 205, 113, 206, 571, 0, 0,
	114, 115, 207, 0, 116, 0, 117, 0, 0, 334,
	0, 118, 208, 0, 209, 0, 119, 120, 210, 211,
	0, 0, 121, 0, 335, 122, 212, 213, 214, 0,
	215, 0, 336, 123, 337, 124, 125, 0, 0, 216,
	338, 126, 339, 0, 127, 0, 0, 128, 0, 129,
	130, 131, 132, 133, 340, 134, 135, 138, 136, 0,
	137, 0, 217, 139, 218, 140, 141, 0, 572, 0,
	0, 0, 142, 219, 341, 143, 342, 220, 144, 145,
	0, 221, 146, 222, 0, 147, 148, 149, 223, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 343, 157,
	158, 224, 159, 0, 247, 160, 161, 0, 225, 162,
	163, 0, 164, 165, 344, 166, 226, 167, 0, 168,
	169, 171, 227, 170, 228, 0, 172, 0, 173, 174,
	0, 229, 230, 231, 0, 0, 175, 232, 233, 570,
	176, 177, 178, 179, 0, 0, 180, 181, 182, 0,
	0, 183, 184, 185, 234, 235, 0, 186, 0, 0,
	0, 0, 187, 188, 189, 190, 0, 327, 578, 0,
	579, 574, 569, 0, 0, 0, 0, 580, 575, 89,
	90, 0, 91, 0, 0, 0, 0, 0, 0, 0,
	0, 92, 93, 191, 192, 193, 94, 194, 195, 0,
	95, 196, 197, 96, 0, 0, 198, 199, 200, 0,
	201, 0, 332, 0, 97, 98, 99, 0, 100, 0,
	101, 0, 333, 102, 103, 0, 0, 0, 0, 0,
	0, 104, 105, 106, 107, 202, 108, 203, 204, 0,
	0, 109, 0, 0, 0, 110, 111, 0, 112, 0,
	0, 0, 205, 113, 206, 571, 0, 0, 114, 115,
	207, 0, 116, 0, 117, 0, 0, 334, 0, 118,
	208, 0, 209, 0, 119, 120, 210, 211, 0, 0,
	121, 0, 335, 122, 212, 213, 214, 0, 215, 0,
	336, 123, 337, 124, 125, 0, 0, 216, 338, 126,
	339, 0, 127, 0, 0, 128, 0, 129, 130, 131,
	132, 133, 340, 134, 135, 138, 136, 0, 137, 0,
	217, 139, 218, 140, 141, 0, 572, 0, 0, 0,
	142, 219, 341, 143, 342, 220, 144, 145, 0, 221,
	146, 222, 0, 147, 148, 149, 223, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 343, 157, 158, 224,
	159, 0, 247, 160, 161, 0, 225, 162, 163, 0,
	164, 165, 344, 166, 226, 167, 0, 168, 169, 171,
	227, 170, 228, 0, 172, 0, 173, 174, 0, 229,
	230, 231, 0, 0, 175, 232, 233, 570, 176, 177,
	178, 179, 0, 0, 180, 181, 182, 0, 0, 183,
	184, 185, 234, 235, 86, 186, 0, 0, 0, 0,
	187, 188, 189, 190, 0, 0, 89, 90, 0, 91,
	0, 0, 0, 0, 0, 580, 575, 0, 92, 93,
	191, 192, 193, 94, 194, 195, 0, 95, 196, 197,
	96, 0, 0, 198, 199, 200, 0, 201, 0, 0,
	0, 97, 98, 99, 0, 100, 0, 101, 0, 0,
	102, 103, 0, 0, 0, 0, 0, 0, 104, 105,
	106, 107, 202, 108, 203, 204, 0, 0, 109, 0,
	0, 0, 110, 111, 0, 112, 0, 0, 0, 205,
	113, 206, 0, 0, 0, 114, 115, 207, 0, 116,
	0, 117, 0, 0, 0, 0, 118, 208, 0, 209,
	0, 119, 120, 210, 211, 0, 0, 121, 0, 0,
	122, 212, 213, 214, 0, 215, 0, 0, 123, 0,
	124, 125, 0, 0, 216, 0, 126, 0, 0, 127,
	0, 0, 128, 0, 129, 130, 131, 132, 133, 0,
	134, 135, 138, 136, 0, 137, 0, 217, 139, 218,
	140, 141, 0, 0, 300, 0, 0, 142, 219, 0,
	143, 0, 220, 144, 145, 0, 221, 146, 222, 0,
	147, 148, 149, 223, 150, 151, 0, 153, 154, 152,
	155, 0, 156, 0, 157, 158, 224, 159, 0, 247,
	160, 161, 49, 225, 162, 163, 0, 164, 165, 0,
	166, 226, 167, 0, 168, 169, 171, 227, 170, 228,
	0, 172, 51, 173, 174, 0, 229, 230, 231, 0,
	0, 175, 232, 233, 0, 176, 177, 178, 179, 0,
	0, 180, 181, 182, 0, 0, 183, 184, 185, 331,
	235, 0, 186, 0, 0, 0, 47, 187, 188, 189,
	190, 86, 48, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 89, 90, 0, 91, 0, 0, 0,
	0, 921, 0, 0, 0, 92, 93, 191, 192, 193,
	94, 194, 195, 0, 95, 196, 197, 96, 0, 0,
	198, 199, 200, 0, 201, 0, 0, 0, 97, 98,
	99, 0, 100, 0, 101, 0, 0, 102, 103, 0,
	0, 0, 0, 0, 0, 104, 105, 106, 107, 202,
	108, 203, 204, 0, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 205, 113, 206, 0,
	0, 0, 114, 115, 207, 0, 116, 0, 117, 0,
	0, 0, 0, 118, 208, 0, 209, 0, 119, 120,
	210, 211, 0, 0, 121, 0, 0, 122, 212, 213,
	214, 0, 215, 0, 0, 123, 0, 124, 125, 0,
	0, 216, 0, 126, 0, 0, 127, 0, 0, 128,
	0, 129, 130, 131, 132, 133, 0, 134, 135, 138,
	136, 0, 137, 0, 217, 139, 218, 140, 141, 0,
	0, 0, 0, 0, 142, 219, 0, 143, 0, 220,
	144, 145, 0, 221, 146, 222, 0, 147, 148, 149,
	223, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	0, 157, 158, 224, 159, 0, 247, 160, 161, 49,
	225, 162, 163, 0, 164, 165, 0, 166, 226, 167,
	0, 168, 169, 171, 227, 170, 228, 0, 172, 51,
	173, 174, 0, 229, 230, 231, 0, 0, 175, 232,
	233, 0, 176, 177, 178, 179, 0, 0, 180, 181,
	182, 0, 0, 183, 184, 185, 331, 235, 0, 186,
	0, 0, 0, 47, 187, 188, 189, 190, 86, 48,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	89, 90, 0, 91, 0, 0, 0, 0, 46, 1170,
	0, 0, 92, 93, 191, 192, 193, 94, 194, 195,
	0, 95, 196, 197, 96, 0, 0, 198, 199, 200,
	0, 201, 0, 0, 0, 97, 98, 99, 0, 100,
	0, 101, 0, 0, 102, 103, 0, 0, 0, 0,
	0, 0, 104, 105, 106, 107, 202, 108, 203, 204,
	0, 0, 109, 0, 0, 0, 110, 111, 0, 112,
	0, 0, 0, 205, 113, 206, 0, 0, 0, 114,
	115, 207, 0, 116, 0, 117, 0, 0, 0, 0,
	118, 208, 0, 209, 0, 119, 120, 210, 211, 0,
	0, 121, 0, 0, 122, 212, 213, 214, 0, 215,
	0, 0, 123, 0, 124, 125, 0, 0, 216, 0,
	126, 0, 0, 127, 0, 0, 128, 0, 129, 130,
	131, 132, 133, 0, 134, 135, 138, 136, 0, 137,
	0, 217, 139, 218, 140, 141, 0, 0, 0, 0,
	0, 142, 219, 0, 143, 0, 220, 144, 145, 0,
	221, 146, 222, 0, 147, 148, 149, 223, 150, 151,
	0, 153, 154, 152, 155, 0, 156, 0, 157, 158,
	224, 159, 0, 247, 160, 161, 0, 225, 162, 163,
	0, 164, 165, 0, 166, 226, 167, 0, 168, 169,
	171, 227, 170, 228, 0, 172, 0, 173, 174, 0,
	229, 230, 231, 0, 0, 175, 232, 233, 0, 176,
	177, 178, 179, 0, 0, 180, 181, 182, 0, 0,
	183, 184, 185, 234, 235, 0, 186, 0, 0, 0,
	0, 187, 188, 189, 190, 86, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 89, 90, 0,
	91, 0, 0, 0, 0, 0, 405, 0, 0, 92,
	93, 191, 192, 193, 94, 194, 195, 0, 95, 196,
	197, 96, 0, 0, 198, 199, 200, 0, 201, 0,
	0, 0, 97, 98, 99, 0, 100, 0, 101, 0,
	0, 102, 103, 0, 0, 0, 0, 0, 0, 104,
	105, 106, 107, 202, 108, 203, 204, 0, 0, 109,
	0, 0, 0, 110, 111, 0, 112, 0, 0, 0,
	205, 113, 206, 0, 0, 0, 114, 115, 207, 0,
	116, 0, 117, 0, 0, 0, 0, 118, 208, 0,
	209, 0, 119, 120, 210, 211, 0, 0, 121, 0,
	0, 122, 212, 213, 214, 0, 215, 0, 0, 123,
	0, 124, 125, 0, 0, 216, 0, 126, 0, 0,
	127, 0, 0, 128, 0, 129, 130, 131, 132, 133,
	0, 134, 135, 138, 136, 0, 137, 0, 217, 139,
	218, 140, 141, 0, 0, 300, 0, 0, 142, 219,
	0, 143, 0, 220, 144, 145, 0, 221, 146, 222,
	0, 147, 148, 149, 223, 150, 151, 0, 153, 154,
	152, 155, 0, 156, 0, 157, 158, 224, 159, 0,
	247, 160, 161, 0, 225, 162, 163, 0, 164, 165,
	0, 166, 226, 167, 0, 168, 169, 171, 227, 170,
	228, 0, 172, 0, 173, 174, 0, 229, 230, 231,
	0, 0, 175, 232, 233, 0, 176, 177, 178, 179,
	0, 0, 180, 181, 182, 0, 0, 183, 184, 185,
	234, 235, 0, 186, 0, 0, 0, 0, 187, 188,
	189, 190, 86, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 89, 90, 0, 91, 0, 0,
	0, 0, 921, 0, 0, 0, 92, 93, 191, 192,
	193, 94, 194, 195, 0, 95, 196, 197, 96, 0,
	0, 198, 199, 200, 0, 201, 0, 0, 0, 97,
	98, 99, 0, 100, 0, 101, 0, 0, 102, 103,
	0, 0, 0, 0, 0, 0, 104, 105, 106, 107,
	202, 108, 203, 204, 0, 0, 109, 0, 0, 0,
	110, 111, 0, 112, 0, 0, 0, 205, 113, 206,
	0, 0, 0, 114, 115, 207, 0, 116, 0, 117,
	0, 0, 0, 0, 118, 208, 0, 209, 0, 119,
	120, 210, 211, 0, 0, 121, 0, 0, 122, 212,
	213, 214, 0, 215, 0, 0, 123, 0, 124, 125,
	0, 0, 216, 0, 126, 0, 0, 127, 0, 0,
	128, 0, 129, 130, 131, 132, 133, 0, 134, 135,
	138, 136, 0, 137, 0, 217, 139, 218, 140, 141,
	0, 0, 0, 0, 0, 142, 219, 0, 143, 0,
	220, 144, 145, 0, 221, 146, 222, 0, 147, 148,
	149, 223, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 0, 157, 158, 224, 159, 0, 247, 160, 161,
	0, 225, 162, 163, 0, 164, 165, 0, 166, 226,
	167, 0, 168, 169, 171, 227, 170, 228, 0, 172,
	0, 173, 174, 0, 229, 230, 231, 0, 0, 175,
	232, 233, 0, 176, 177, 178, 179, 0, 0, 180,
	181, 182, 0, 0, 183, 184, 185, 234, 235, 0,
	186, 0, 0, 0, 0, 187, 188, 189, 190, 86,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 89, 90, 0, 91, 0, 0, 0, 0, 854,
	0, 0, 0, 92, 93, 191, 192, 193, 94, 194,
	195, 0, 95, 196, 197, 96, 0, 0, 198, 199,
	200, 0, 201, 0, 0, 0, 97, 98, 99, 0,
	100, 0, 101, 0, 0, 102, 103, 0, 0, 0,
	0, 0, 0, 104, 105, 106, 107, 202, 108, 203,
	204, 0, 0, 109, 0, 0, 0, 110, 111, 0,
	112, 0, 0, 0, 205, 113, 206, 0, 0, 0,
	114, 115, 207, 0, 116, 0, 117, 0, 0, 0,
	0, 118, 208, 0, 209, 0, 119, 120, 210, 211,
	0, 0, 121, 0, 0, 122, 212, 213, 214, 0,
	215, 0, 0, 123, 0, 124, 125, 0, 0, 216,
	0, 126, 0, 0, 127, 0, 0, 128, 0, 129,
	130, 131, 132, 133, 0, 134, 135, 138, 136, 0,
	137, 0, 217, 139, 218, 140, 141, 0, 0, 0,
	0, 0, 142, 219, 0, 143, 0, 220, 144, 145,
	0, 221, 146, 222, 0, 147, 148, 149, 223, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 0, 157,
	158, 224, 159, 0, 247, 160, 161, 0, 225, 162,
	163, 0, 164, 165, 0, 166, 226, 167, 0, 168,
	169, 171, 227, 170, 228, 0, 172, 0, 173, 174,
	0, 229, 230, 231, 0, 0, 175, 232, 233, 0,
	176, 177, 178, 179, 0, 0, 180, 181, 182, 0,
	0, 183, 184, 185, 234, 235, 0, 186, 0, 0,
	0, 0, 187, 188, 189, 190, 86, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 89, 90,
	0, 91, 0, 0, 0, 0, 1389, 0, 0, 0,
	92, 93, 191, 192, 193, 94, 194, 195, 0, 95,
	196, 197, 96, 0, 0, 198, 199, 200, 0, 201,
	0, 0, 0, 97, 98, 99, 0, 100, 0, 101,
	0, 0, 102, 103, 0, 0, 0, 0, 0, 0,
	104, 105, 106, 107, 202, 108, 203, 204, 0, 0,
	109, 0, 0, 0, 110, 111, 0, 112, 0, 0,
	0, 205, 113, 206, 0, 0, 0, 114, 115, 207,
	0, 116, 0, 117, 0, 0, 0, 0, 118, 208,
	0, 209, 0, 119, 120, 210, 211, 0, 0, 121,
	0, 0, 122, 212, 213, 214, 0, 215, 0, 0,
	123, 0, 124, 125, 0, 0, 216, 0, 126, 0,
	0, 127, 0, 0, 128, 0, 129, 130, 131, 132,
	133, 0, 134, 135, 138, 136, 0, 137, 0, 217,
	139, 218, 140, 141, 0, 0, 0, 0, 0, 142,
	219, 0, 143, 0, 220, 144, 145, 0, 221, 146,
	222, 0, 147, 148, 149, 223, 150, 151, 0, 153,
	154, 152, 155, 0, 156, 0, 157, 158, 224, 159,
	0, 247, 160, 161, 0, 225, 162, 163, 0, 164,
	165, 0, 166, 226, 167, 0, 168, 169, 171, 227,
	170, 228, 0, 172, 0, 173, 174, 0, 229, 230,
	231, 0, 0, 175, 232, 233, 0, 176, 177, 178,
	179, 0, 0, 180, 181, 182, 0, 0, 183, 184,
	185, 234, 235, 0, 186, 0, 0, 0, 0, 187,
	188, 189, 190, 86, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 89, 90, 0, 91, 0,
	0, 0, 0, 506, 0, 0, 0, 92, 93, 191,
	192, 193, 94, 194, 195, 0, 95, 196, 197, 96,
	0, 0, 198, 199, 200, 0, 201, 0, 0, 0,
	97, 98, 99, 0, 100, 0, 101, 0, 0, 102,
	103, 0, 0, 0, 0, 0, 0, 104, 105, 550,
	107, 202, 108, 203, 204, 0, 0, 109, 0, 0,
	0, 110, 111, 0, 112, 0, 0, 0, 205, 113,
	206, 0, 0, 0, 114, 115, 207, 0, 116, 0,
	117, 0, 0, 0, 0, 118, 208, 0, 209, 0,
	119, 120, 210, 211, 0, 0, 121, 0, 0, 122,
	212, 213, 214, 0, 215, 0, 0, 123, 0, 124,
	125, 0, 0, 216, 0, 126, 0, 0, 127, 0,
	0, 128, 0, 129, 130, 131, 132, 133, 0, 134,
	135, 138, 136, 0, 137, 0, 217, 139, 218, 140,
	141, 0, 0, 0, 0, 0, 142, 219, 0, 143,
	0, 220, 144, 145, 0, 221, 146, 222, 0, 147,
	148, 149, 223, 150, 151, 0, 153, 154, 152, 155,
	0, 156, 0, 157, 158, 224, 159, 0, 247, 160,
	161, 0, 225, 162, 163, 0, 164, 165, 0, 166,
	226, 167, 0, 168, 169, 171, 227, 170, 228, 0,
	172, 549, 173, 174, 0, 229, 230, 231, 0, 0,
	175, 232, 233, 0, 176, 177, 178, 179, 0, 0,
	180, 181, 182, 0, 0, 183, 184, 185, 234, 235,
	86, 186, 0, 0, 0, 0, 187, 188, 189, 190,
	0, 0, 89, 90, 0, 91, 0, 0, 0, 0,
	0, 0, 0, 553, 92, 93, 191, 192, 193, 94,
	194, 195, 0, 95, 196, 197, 96, 0, 0, 198,
	199, 200, 0, 201, 0, 0, 0, 97, 98, 99,
	0, 100, 0, 101, 0, 0, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 106, 107, 202, 108,
	203, 204, 0, 0, 109, 0, 0, 0, 110, 111,
	0, 112, 0, 0, 0, 205, 113, 206, 0, 0,
	0, 114, 115, 207, 0, 116, 0, 117, 0, 0,
	0, 0, 118, 208, 0, 209, 0, 119, 120, 210,
	211, 0, 0, 121, 0, 0, 122, 212, 213, 214,
	0, 215, 0, 0, 123, 0, 124, 125, 0, 0,
	216, 0, 126, 0, 0, 127, 0, 0, 128, 0,
	129, 130, 131, 132, 133, 0, 134, 135, 138, 136,
	0, 137, 0, 217, 139, 218, 140, 141, 0, 0,
	0, 0, 0, 142, 219, 0, 143, 0, 220, 144,
	145, 0, 221, 146, 222, 0, 147, 148, 149, 223,
	150, 151, 0, 153, 154, 152, 155, 0, 156, 0,
	157, 158, 224, 159, 0, 247, 160, 161, 0, 225,
	162, 163, 0, 164, 165, 0, 166, 226, 167, 0,
	168, 169, 171, 227, 170, 228, 0, 172, 0, 173,
	174, 0, 229, 230, 231, 0, 0, 175, 232, 233,
	0, 176, 177, 178, 179, 0, 0, 180, 181, 182,
	0, 0, 183, 184, 185, 234, 235, 327, 186, 0,
	0, 0, 0, 187, 188, 189, 190, 0, 0, 89,
	90, 0, 91, 0, 0, 0, 0, 0, 0, 0,
	553, 92, 93, 191, 192, 193, 94, 194, 195, 0,
	95, 196, 197, 96, 0, 0, 198, 199, 200, 0,
	201, 0, 332, 0, 97, 98, 99, 0, 100, 0,
	101, 0, 333, 102, 103, 0, 0, 0, 0, 0,
	0, 104, 105, 106, 107, 202, 108, 203, 204, 0,
	0, 109, 0, 0, 0, 110, 111, 0, 112, 0,
	0, 0, 205, 113, 206, 0, 0, 0, 114, 115,
	207, 0, 116, 0, 117, 0, 0, 334, 0, 118,
	208, 0, 209, 0, 119, 120, 210, 211, 0, 0,
	121, 0, 335, 122, 212, 213, 214, 0, 215, 0,
	336, 123, 337, 124, 125, 0, 0, 216, 338, 126,
	339, 0, 127, 0, 0, 128, 0, 129, 130, 131,
	132, 133, 340, 134, 135, 138, 136, 0, 137, 0,
	217, 139, 218, 140, 141, 0, 0, 0, 0, 0,
	142, 219, 341, 143, 342, 220, 144, 145, 0, 221,
	146, 222, 0, 147, 148, 149, 223, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 343, 157, 158, 224,
	159, 0, 247, 160, 161, 0, 225, 162, 163, 0,
	164, 165, 344, 166, 226, 167, 0, 168, 169, 171,
	227, 170, 228, 0, 172, 0, 173, 174, 0, 229,
	230, 231, 0, 0, 175, 232, 233, 0, 176, 177,
	178, 179, 0, 0, 180, 181, 182, 0, 0, 183,
	184, 185, 234, 235, 86, 186, 0, 0, 0, 0,
	187, 188, 189, 190, 0, 0, 89, 90, 0, 91,
	0, 0, 0, 0, 0, 0, 0, 0, 92, 93,
	191, 192, 193, 94, 194, 195, 0, 95, 196, 197,
	96, 0, 0, 198, 199, 200, 827, 201, 0, 0,
	0, 97, 98, 99, 0, 100, 825, 101, 0, 0,
	102, 103, 0, 0, 0, 0, 0, 0, 104, 105,
	106, 107, 202, 108, 203, 204, 0, 0, 109, 0,
	0, 0, 110, 111, 0, 112, 0, 0, 0, 205,
	113, 206, 0, 898, 0, 114, 115, 207, 0, 116,
	0, 117, 830, 0, 0, 0, 118, 208, 0, 209,
	0, 119, 120, 210, 211, 0, 896, 121, 0, 0,
	122, 212, 213, 214, 0, 215, 0, 0, 123, 0,
	124, 125, 0, 0, 216, 0, 126, 0, 0, 127,
	0, 0, 128, 0, 129, 130, 131, 132, 133, 0,
	134, 135, 138, 136, 0, 137, 0, 217, 139, 218,
	140, 141, 0, 0, 0, 0, 0, 142, 219, 0,
	143, 0, 220, 144, 145, 0, 221, 146, 222, 829,
	147, 148, 149, 223, 150, 151, 0, 153, 154, 152,
	155, 0, 156, 0, 157, 158, 224, 159, 0, 247,
	160, 161, 0, 225, 162, 163, 0, 164, 165, 0,
	166, 226, 167, 0, 168, 169, 171, 227, 170, 228,
	0, 172, 0, 173, 174, 0, 229, 230, 231, 0,
	0, 175, 232, 233, 0, 176, 177, 178, 179, 0,
	897, 180, 181, 182, 0, 0, 183, 184, 185, 234,
	235, 86, 186, 0, 0, 0, 0, 187, 188, 189,
	190, 0, 0, 89, 90, 0, 91, 0, 0, 0,
	0, 0, 0, 0, 0, 92, 93, 191, 192, 193,
	94, 194, 195, 0, 95, 196, 197, 96, 0, 0,
	198, 199, 200, 827, 201, 0, 0, 822, 97, 98,
	99, 0, 100, 825, 101, 0, 0, 102, 103, 0,
	0, 0, 0, 0, 0, 104, 105, 106, 107, 202,
	108, 203, 204, 0, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 205, 113, 206, 0,
	0, 0, 114, 115, 207, 0, 116, 0, 117, 830,
	0, 0, 0, 118, 208, 0, 209, 0, 119, 120,
	821, 211, 0, 0, 121, 0, 0, 122, 212, 213,
	214, 0, 215, 0, 0, 123, 0, 124, 125, 0,
	0, 216, 0, 126, 0, 0, 127, 0, 0, 128,
	0, 129, 130, 131, 132, 133, 0, 134, 135, 138,
	136, 0, 137, 0, 217, 139, 218, 140, 141, 0,
	0, 0, 0, 0, 142, 219, 0, 143, 0, 220,
	144, 145, 0, 221, 146, 222, 829, 147, 148, 149,
	223, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	0, 157, 158, 224, 159, 0, 247, 160, 161, 0,
	225, 162, 163, 0, 164, 165, 0, 166, 226, 167,
	0, 168, 169, 171, 227, 170, 228, 0, 172, 0,
	173, 174, 0, 229, 230, 231, 0, 0, 175, 232,
	233, 0, 176, 177, 178, 179, 0, 828, 180, 181,
	182, 0, 0, 183, 184, 185, 234, 235, 86, 186,
	0, 0, 0, 0, 187, 188, 189, 190, 0, 0,
	89, 90, 0, 91, 0, 0, 0, 0, 0, 1170,
	0, 0, 92, 93, 191, 192, 193, 94, 194, 195,
	0, 95, 196, 197, 96, 0, 0, 198, 199, 200,
	0, 201, 0, 0, 0, 97, 98, 99, 0, 100,
	0, 101, 0, 0, 102, 103, 0, 0, 0, 0,
	0, 0, 104, 105, 106, 107, 202, 108, 203, 204,
	0, 0, 109, 0, 0, 0, 110, 111, 0, 112,
	0, 0, 0, 205, 113, 206, 0, 0, 0, 114,
	115, 207, 0, 116, 0, 117, 0, 0, 0, 0,
	118, 208, 0, 209, 0, 119, 120, 210, 211, 0,
	0, 121, 0, 0, 122, 212, 213, 214, 0, 215,
	0, 0, 123, 0, 124, 125, 0, 0, 216, 0,
	126, 0, 0, 127, 0, 0, 128, 0, 129, 130,
	131, 132, 133, 0, 134, 135, 138, 136, 0, 137,
	0, 217, 139, 218, 140, 141, 0, 0, 0, 0,
	0, 142, 219, 0, 143, 0, 220, 144, 145, 0,
	221, 146, 222, 0, 147, 148, 149, 223, 150, 151,
	0, 153, 154, 152, 155, 0, 156, 0, 157, 158,
	224, 159, 0, 247, 160, 161, 0, 225, 162, 163,
	0, 164, 165, 0, 166, 226, 167, 0, 168, 169,
	171, 227, 170, 228, 0, 172, 0, 173, 174, 0,
	229, 230, 231, 0, 0, 175, 232, 233, 0, 176,
	177, 178, 179, 0, 0, 180, 181, 182, 0, 0,
	183, 184, 185, 234, 235, 86, 186, 0, 0, 0,
	0, 187, 188, 189, 190, 0, 0, 89, 90, 0,
	91, 0, 0, 0, 0, 0, 0, 0, 0, 92,
	93, 191, 192, 193, 94, 194, 195, 0, 95, 196,
	197, 96, 0, 0, 198, 199, 200, 0, 201, 0,
	0, 0, 97, 98, 99, 0, 100, 0, 101, 0,
	0, 102, 103, 0, 0, 0, 0, 0, 0, 104,
	105, 106, 107, 202, 108, 203, 204, 0, 0, 109,
	0, 0, 0, 110, 111, 0, 112, 0, 0, 0,
	205, 113, 206, 0, 0, 0, 114, 115, 207, 0,
	116, 0, 117, 0, 0, 0, 0, 118, 208, 0,
	209, 0, 119, 120, 210, 211, 0, 0, 121, 0,
	0, 122, 212, 213, 214, 0, 215, 0, 0, 123,
	0, 124, 125, 0, 0, 216, 0, 126, 0, 0,
	127, 0, 0, 128, 0, 129, 130, 131, 132, 133,
	0, 134, 135, 138, 136, 0, 137, 0, 217, 139,
	218, 140, 141, 0, 0, 300, 0, 0, 142, 219,
	0, 143, 0, 220, 144, 145, 0, 221, 146, 222,
	0, 147, 148, 149, 223, 150, 151, 0, 153, 154,
	152, 155, 0, 156, 0, 157, 158, 224, 159, 0,
	247, 160, 161, 0, 225, 162, 163, 0, 164, 165,
	0, 166, 226, 167, 0, 168, 169, 171, 227, 170,
	228, 0, 172, 0, 173, 174, 0, 229, 230, 231,
	0, 0, 175, 232, 233, 0, 176, 177, 178, 179,
	0, 0, 180, 181, 182, 0, 0, 183, 184, 185,
	234, 235, 86, 186, 0, 0, 0, 0, 187, 188,
	189, 190, 0, 0, 89, 90, 0, 91, 0, 0,
	0, 0, 0, 0, 0, 0, 92, 93, 191, 192,
	193, 94, 194, 195, 0, 95, 196, 197, 96, 0,
	0, 198, 199, 200, 0, 201, 0, 0, 0, 97,
	98, 99, 0, 100, 0, 101, 0, 0, 102, 103,
	0, 0, 0, 0, 0, 0, 104, 105, 106, 107,
	202, 108, 203, 204, 0, 0, 109, 0, 0, 0,
	110, 111, 0, 112, 0, 0, 0, 205, 113, 206,
	0, 0, 0, 114, 115, 207, 0, 116, 0, 117,
	0, 0, 0, 0, 118, 208, 0, 209, 0, 119,
	120, 306, 211, 0, 0, 121, 0, 0, 122, 212,
	213, 214, 0, 215, 0, 0, 123, 0, 124, 125,
	0, 0, 216, 0, 126, 0, 0, 127, 0, 0,
	128, 0, 129, 130, 131, 132, 133, 0, 134, 135,
	138, 136, 0, 137, 0, 217, 139, 218, 140, 141,
	0, 0, 300, 0, 0, 142, 219, 0, 143, 0,
	220, 144, 145, 0, 221, 146, 222, 0, 147, 148,
	149, 223, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 0, 157, 158, 224, 159, 0, 247, 160, 161,
	0, 225, 162, 163, 0, 164, 165, 0, 166, 226,
	167, 0, 168, 169, 171, 227, 170, 228, 0, 172,
	0, 173, 174, 0, 229, 230, 231, 0, 0, 175,
	232, 233, 0, 176, 177, 178, 179, 0, 0, 180,
	181, 182, 0, 0, 183, 184, 185, 234, 235, 86,
	186, 0, 0, 0, 0, 187, 188, 189, 190, 0,
	0, 89, 90, 0, 91, 0, 0, 0, 0, 0,
	0, 0, 0, 92, 93, 191, 192, 193, 94, 194,
	195, 0, 95, 196, 197, 96, 0, 0, 198, 199,
	200, 0, 201, 0, 0, 0, 97, 98, 99, 0,
	100, 0, 101, 0, 0, 102, 103, 0, 0, 0,
	0, 0, 0, 104, 105, 106, 107, 202, 108, 203,
	204, 0, 0, 109, 0, 0, 0, 110, 111, 0,
	112, 0, 0, 0, 205, 113, 206, 0, 0, 0,
	114, 115, 207, 0, 116, 0, 117, 0, 0, 0,
	0, 118, 208, 0, 209, 0, 119, 120, 210, 211,
	0, 0, 121, 0, 0, 122, 212, 213, 214, 0,
	215, 0, 0, 123, 0, 124, 125, 0, 0, 216,
	0, 126, 0, 0, 127, 0, 0, 128, 0, 129,
	130, 131, 132, 133, 0, 134, 135, 138, 136, 0,
	137, 0, 217, 139, 218, 140, 141, 0, 0, 0,
	0, 0, 142, 219, 0, 143, 0, 220, 144, 145,
	0, 221, 146, 222, 0, 147, 148, 149, 223, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 0, 157,
	158, 224, 159, 0, 247, 160, 161, 0, 225, 162,
	163, 0, 164, 165, 0, 166, 226, 167, 0, 168,
	169, 171, 227, 170, 228, 0, 172, 0, 173, 174,
	0, 229, 230, 231, 0, 0, 175, 232, 233, 0,
	176, 177, 178, 179, 0, 0, 180, 181, 182, 0,
	0, 183, 184, 185, 234, 235, 86, 186, 0, 0,
	0, 0, 187, 188, 189, 190, 0, 0, 89, 90,
	0, 91, 0, 0, 0, 0, 0, 0, 0, 0,
	92, 93, 191, 192, 193, 94, 194, 195, 0, 95,
	196, 197, 96, 0, 0, 198, 199, 200, 0, 201,
	0, 0, 0, 97, 98, 99, 0, 100, 0, 101,
	0, 0, 102, 103, 0, 0, 0, 0, 0, 0,
	104, 105, 106, 107, 202, 108, 203, 204, 0, 0,
	109, 0, 0, 0, 110, 111, 0, 112, 0, 0,
	0, 205, 113, 206, 0, 0, 0, 114, 115, 207,
	0, 116, 0, 117, 0, 0, 0, 0, 118, 208,
	0, 209, 0, 119, 120, 1103, 211, 0, 0, 121,
	0, 0, 122, 212, 213, 214, 0, 215, 0, 0,
	123, 0, 124, 125, 0, 0, 216, 0, 126, 0,
	0, 127, 0, 0, 128, 0, 129, 130, 131, 132,
	133, 0, 134, 135, 138, 136, 0, 137, 0, 217,
	139, 218, 140, 141, 0, 0, 0, 0, 0, 142,
	219, 0, 143, 0, 220, 144, 145, 0, 221, 146,
	222, 0, 147, 148, 149, 223, 150, 151, 0, 153,
	154, 152, 155, 0, 156, 0, 157, 158, 224, 159,
	0, 247, 160, 161, 0, 225, 162, 163, 0, 164,
	165, 0, 166, 226, 167, 0, 168, 169, 171, 227,
	170, 228, 0, 172, 0, 173, 174, 0, 229, 230,
	231, 0, 0, 175, 232, 233, 0, 176, 177, 178,
	179, 0, 0, 180, 181, 182, 0, 0, 183, 184,
	185, 234, 235, 86, 186, 0, 0, 0, 0, 187,
	188, 189, 190, 0, 0, 89, 90, 0, 91, 0,
	0, 0, 0, 0, 0, 0, 0, 92, 93, 191,
	192, 193, 94, 194, 195, 0, 95, 196, 197, 96,
	0, 0, 198, 199, 200, 0, 201, 0, 0, 0,
	97, 98, 99, 0, 100, 0, 101, 0, 0, 102,
	103, 0, 0, 0, 0, 0, 0, 104, 105, 106,
	107, 202, 108, 203, 204, 0, 0, 109, 0, 0,
	0, 110, 111, 0, 112, 0, 0, 0, 205, 113,
	206, 0, 0, 0, 114, 115, 207, 0, 116, 0,
	117, 0, 0, 0, 0, 118, 208, 0, 209, 0,
	119, 120, 1101, 211, 0, 0, 121, 0, 0, 122,
	212, 213, 214, 0, 215, 0, 0, 123, 0, 124,
	125, 0, 0, 216, 0, 126, 0, 0, 127, 0,
	0, 128, 0, 129, 130, 131, 132, 133, 0, 134,
	135, 138, 136, 0, 137, 0, 217, 139, 218, 140,
	141, 0, 0, 0, 0, 0, 142, 219, 0, 143,
	0, 220, 144, 145, 0, 221, 146, 222, 0, 147,
	148, 149, 223, 150, 151, 0, 153, 154, 152, 155,
	0, 156, 0, 157, 158, 224, 159, 0, 247, 160,
	161, 0, 225, 162, 163, 0, 164, 165, 0, 166,
	226, 167, 0, 168, 169, 171, 227, 170, 228, 0,
	172, 0, 173, 174, 0, 229, 230, 231, 0, 0,
	175, 232, 233, 0, 176, 177, 178, 179, 0, 0,
	180, 181, 182, 0, 0, 183, 184, 185, 234, 235,
	86, 186, 0, 0, 0, 0, 187, 188, 189, 190,
	0, 0, 89, 90, 0, 91, 0, 0, 0, 0,
	0, 0, 0, 0, 92, 93, 191, 192, 193, 94,
	194, 195, 0, 95, 196, 197, 96, 0, 0, 198,
	199, 200, 0, 201, 0, 0, 0, 97, 98, 99,
	0, 100, 0, 101, 0, 0, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 106, 107, 202, 108,
	203, 204, 0, 0, 109, 0, 0, 0, 110, 111,
	0, 112, 0, 0, 0, 205, 113, 206, 0, 0,
	0, 114, 115, 207, 0, 116, 0, 117, 0, 0,
	0, 0, 118, 208, 0, 209, 0, 119, 120, 1092,
	211, 0, 0, 121, 0, 0, 122, 212, 213, 214,
	0, 215, 0, 0, 123, 0, 124, 125, 0, 0,
	216, 0, 126, 0, 0, 127, 0, 0, 128, 0,
	129, 130, 131, 132, 133, 0, 134, 135, 138, 136,
	0, 137, 0, 217, 139, 218, 140, 141, 0, 0,
	0, 0, 0, 142, 219, 0, 143, 0, 220, 144,
	145, 0, 221, 146, 222, 0, 147, 148, 149, 223,
	150, 151, 0, 153, 154, 152, 155, 0, 156, 0,
	157, 158, 224, 159, 0, 247, 160, 161, 0, 225,
	162, 163, 0, 164, 165, 0, 166, 226, 167, 0,
	168, 169, 171, 227, 170, 228, 0, 172, 0, 173,
	174, 0, 229, 230, 231, 0, 0, 175, 232, 233,
	0, 176, 177, 178, 179, 0, 0, 180, 181, 182,
	0, 0, 183, 184, 185, 234, 235, 86, 186, 0,
	0, 0, 0, 187, 188, 189, 190, 0, 0, 89,
	90, 0, 91, 0, 0, 0, 0, 0, 0, 0,
	0, 92, 93, 191, 192, 193, 94, 194, 195, 0,
	95, 196, 197, 96, 0, 0, 198, 199, 200, 0,
	201, 0, 0, 0, 97, 98, 99, 0, 100, 0,
	101, 0, 0, 102, 103, 0, 0, 0, 0, 0,
	0, 104, 105, 106, 107, 202, 108, 203, 204, 0,
	0, 109, 0, 0, 0, 110, 111, 0, 112, 0,
	0, 0, 205, 113, 206, 0, 0, 0, 114, 115,
	207, 0, 116, 0, 117, 0, 0, 0, 0, 118,
	208, 0, 209, 0, 119, 120, 696, 211, 0, 0,
	121, 0, 0, 122, 212, 213, 214, 0, 215, 0,
	0, 123, 0, 124, 125, 0, 0, 216, 0, 126,
	0, 0, 127, 0, 0, 128, 0, 129, 130, 131,
	132, 133, 0, 134, 135, 138, 136, 0, 137, 0,
	217, 139, 218, 140, 141, 0, 0, 0, 0, 0,
	142, 219, 0, 143, 0, 220, 144, 145, 0, 221,
	146, 222, 0, 147, 148, 149, 223, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 0, 157, 158, 224,
	159, 0, 247, 160, 161, 0, 225, 162, 163, 0,
	164, 165, 0, 166, 226, 167, 0, 168, 169, 171,
	227, 170, 228, 0, 172, 0, 173, 174, 0, 229,
	230, 231, 0, 0, 175, 232, 233, 0, 176, 177,
	178, 179, 0, 0, 180, 181, 182, 0, 0, 183,
	184, 185, 234, 235, 86, 186, 0, 0, 0, 0,
	187, 188, 189, 190, 0, 0, 89, 90, 0, 91,
	0, 0, 0, 0, 0, 0, 0, 0, 92, 93,
	191, 192, 193, 94, 194, 195, 0, 95, 196, 197,
	96, 0, 0, 198, 199, 200, 0, 201, 0, 0,
	0, 97, 98, 99, 0, 100, 0, 101, 0, 0,
	102, 103, 0, 0, 0, 0, 0, 0, 104, 105,
	106, 107, 202, 108, 203, 204, 0, 0, 109, 0,
	0, 0, 110, 111, 0, 112, 0, 0, 0, 205,
	113, 206, 0, 0, 0, 114, 115, 207, 0, 116,
	0, 117, 0, 0, 0, 0, 118, 208, 0, 209,
	0, 119, 120, 210, 211, 0, 0, 121, 0, 0,
	122, 212, 213, 214, 0, 215, 0, 0, 123, 0,
	124, 125, 0, 0, 216, 0, 126, 0, 0, 127,
	0, 0, 128, 0, 129, 130, 131, 132, 133, 0,
	134, 135, 138, 136, 0, 137, 0, 217, 139, 218,
	140, 141, 0, 0, 0, 0, 0, 142, 219, 0,
	143, 0, 220, 144, 145, 0, 221, 146, 222, 0,
	147, 148, 149, 223, 150, 151, 0, 153, 154, 152,
	155, 0, 156, 0, 157, 158, 224, 159, 0, 84,
	160, 161, 0, 225, 162, 163, 0, 164, 165, 0,
	166, 226, 167, 0, 168, 169, 171, 227, 170, 228,
	0, 172, 0, 173, 174, 0, 229, 230, 231, 0,
	0, 175, 232, 233, 0, 176, 177, 178, 179, 0,
	0, 180, 181, 182, 0, 0, 183, 184, 185, 234,
	235, 86, 186, 0, 0, 0, 0, 187, 188, 189,
	190, 0, 0, 89, 90, 0, 91, 0, 0, 0,
	0, 0, 535, 0, 0, 92, 93, 191, 192, 193,
	94, 194, 195, 0, 95, 196, 197, 96, 0, 0,
	198, 199, 200, 0, 201, 0, 0, 0, 97, 98,
	99, 0, 100, 0, 101, 0, 0, 102, 103, 0,
	0, 0, 0, 0, 0, 104, 105, 106, 107, 202,
	108, 203, 204, 0, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 205, 113, 206, 0,
	0, 0, 114, 115, 207, 0, 116, 0, 117, 0,
	0, 0, 0, 118, 208, 0, 209, 0, 119, 120,
	210, 211, 0, 0, 121, 0, 0, 122, 212, 213,
	214, 0, 215, 0, 0, 123, 0, 124, 125, 0,
	0, 216, 0, 126, 0, 0, 127, 0, 0, 128,
	0, 129, 130, 131, 132, 133, 0, 134, 135, 138,
	136, 0, 137, 0, 217, 139, 218, 140, 141, 0,
	0, 0, 0, 0, 142, 219, 0, 143, 0, 220,
	144, 145, 0, 221, 146, 222, 0, 147, 148, 149,
	223, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	0, 157, 158, 224, 159, 0, 247, 160, 161, 0,
	225, 162, 163, 0, 0, 165, 0, 166, 226, 167,
	0, 168, 169, 171, 227, 170, 228, 0, 172, 0,
	173, 174, 0, 229, 230, 231, 0, 0, 175, 232,
	233, 0, 176, 177, 178, 179, 0, 0, 180, 181,
	182, 0, 0, 183, 184, 185, 234, 235, 86, 186,
	0, 0, 0, 0, 187, 188, 189, 190, 0, 0,
	89, 90, 0, 91, 0, 0, 0, 0, 0, 0,
	0, 0, 92, 93, 191, 192, 193, 94, 194, 195,
	0, 95, 196, 197, 96, 0, 0, 198, 199, 200,
	0, 201, 0, 0, 0, 97, 98, 99, 0, 100,
	0, 101, 0, 0, 102, 103, 0, 0, 0, 0,
	0, 0, 104, 105, 106, 107, 202, 108, 203, 204,
	0, 0, 109, 0, 0, 0, 110, 111, 0, 112,
	0, 0, 0, 205, 113, 206, 0, 0, 0, 114,
	115, 207, 0, 116, 0, 117, 0, 0, 0, 0,
	118, 208, 0, 209, 0, 119, 120, 390, 211, 0,
	0, 121, 0, 0, 122, 212, 213, 214, 0, 215,
	0, 0, 123, 0, 124, 125, 0, 0, 216, 0,
	126, 0, 0, 127, 0, 0, 128, 0, 129, 130,
	131, 132, 133, 0, 134, 135, 138, 136, 0, 137,
	0, 217, 139, 218, 140, 141, 0, 0, 0, 0,
	0, 142, 219, 0, 143, 0, 220, 144, 145, 0,
	221, 146, 222, 0, 147, 148, 149, 223, 150, 151,
	0, 153, 154, 152, 155, 0, 156, 0, 157, 158,
	224, 159, 0, 247, 160, 161, 0, 225, 162, 163,
	0, 164, 165, 0, 166, 226, 167, 0, 168, 169,
	171, 227, 170, 228, 0, 172, 0, 173, 174, 0,
	229, 230, 231, 0, 0, 175, 232, 233, 0, 176,
	177, 178, 179, 0, 0, 180, 181, 182, 0, 0,
	183, 184, 185, 234, 235, 86, 186, 0, 0, 0,
	0, 187, 188, 189, 190, 0, 0, 89, 90, 0,
	91, 0, 0, 0, 0, 0, 0, 0, 0, 92,
	93, 191, 192, 193, 94, 194, 195, 0, 95, 196,
	197, 96, 0, 0, 198, 199, 200, 0, 201, 0,
	0, 0, 97, 98, 99, 0, 100, 0, 101, 0,
	0, 102, 103, 0, 0, 0, 0, 0, 0, 104,
	105, 106, 107, 202, 108, 203, 204, 0, 0, 109,
	0, 0, 0, 110, 111, 0, 112, 0, 0, 0,
	205, 113, 206, 0, 0, 0, 114, 115, 207, 0,
	116, 0, 117, 0, 0, 0, 0, 118, 208, 0,
	209, 0, 119, 120, 387, 211, 0, 0, 121, 0,
	0, 122, 212, 213, 214, 0, 215, 0, 0, 123,
	0, 124, 125, 0, 0, 216, 0, 126, 0, 0,
	127, 0, 0, 128, 0, 129, 130, 131, 132, 133,
	0, 134, 135, 138, 136, 0, 137, 0, 217, 139,
	218, 140, 141, 0, 0, 0, 0, 0, 142, 219,
	0, 143, 0, 220, 144, 145, 0, 221, 146, 222,
	0, 147, 148, 149, 223, 150, 151, 0, 153, 154,
	152, 155, 0, 156, 0, 157, 158, 224, 159, 0,
	247, 160, 161, 0, 225, 162, 163, 0, 164, 165,
	0, 166, 226, 167, 0, 168, 169, 171, 227, 170,
	228, 0, 172, 0, 173, 174, 0, 229, 230, 231,
	0, 0, 175, 232, 233, 0, 176, 177, 178, 179,
	0, 0, 180, 181, 182, 0, 0, 183, 184, 185,
	234, 235, 86, 186, 0, 0, 0, 0, 187, 188,
	189, 190, 0, 0, 89, 90, 0, 91, 0, 0,
	0, 0, 0, 0, 0, 0, 92, 93, 191, 192,
	193, 94, 194, 195, 0, 95, 196, 197, 96, 0,
	0, 198, 199, 350, 0, 201, 0, 0, 0, 97,
	98, 99, 0, 100, 0, 101, 0, 0, 102, 103,
	0, 0, 0, 0, 0, 0, 104, 105, 106, 107,
	202, 108, 203, 204, 0, 0, 109, 0, 0, 0,
	110, 111, 0, 112, 0, 0, 0, 205, 113, 206,
	0, 0, 0, 114, 115, 207, 0, 116, 0, 117,
	0, 0, 0, 0, 118, 208, 0, 209, 0, 119,
	120, 210, 211, 0, 0, 121, 0, 0, 122, 212,
	213, 214, 0, 215, 0, 0, 123, 0, 124, 125,
	0, 0, 216, 0, 126, 0, 0, 127, 0, 0,
	128, 0, 129, 130, 131, 132, 244, 0, 134, 135,
	138, 136, 0, 137, 0, 217, 139, 218, 140, 141,
	0, 0, 0, 0, 0, 142, 219, 0, 143, 0,
	220, 144, 145, 0, 221, 146, 222, 0, 147, 148,
	149, 223, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 0, 157, 158, 224, 159, 0, 247, 160, 161,
	0, 225, 162, 163, 0, 164, 165, 0, 166, 226,
	167, 0, 168, 169, 171, 227, 170, 228, 0, 172,
	0, 173, 174, 0, 243, 230, 231, 0, 0, 239,
	232, 233, 0, 176, 177, 178, 179, 0, 0, 180,
	181, 182, 0, 0, 183, 184, 185, 234, 235, 86,
	186, 0, 0, 0, 0, 187, 188, 189, 190, 0,
	0, 89, 90, 0, 91, 0, 0, 0, 0, 0,
	0, 0, 0, 92, 93, 191, 192, 193, 94, 194,
	195, 0, 95, 196, 197, 96, 0, 0, 198, 199,
	200, 0, 201, 0, 0, 0, 97, 98, 99, 0,
	100, 0, 101, 0, 0, 102, 103, 0, 0, 0,
	0, 0, 0, 104, 105, 106, 107, 202, 108, 203,
	204, 0, 0, 109, 0, 0, 0, 110, 111, 0,
	112, 0, 0, 0, 205, 113, 206, 0, 0, 0,
	114, 115, 207, 0, 116, 0, 117, 0, 0, 0,
	0, 118, 208, 0, 209, 0, 119, 120, 210, 211,
	0, 0, 121, 0, 0, 122, 212, 213, 214, 0,
	215, 0, 0, 123, 0, 124, 125, 0, 0, 216,
	0, 126, 0, 0, 127, 0, 0, 128, 0, 129,
	130, 131, 132, 244, 0, 134, 135, 138, 136, 0,
	137, 0, 217, 139, 218, 140, 141, 0, 0, 0,
	0, 0, 142, 219, 0, 143, 0, 220, 144, 145,
	0, 221, 146, 222, 0, 147, 148, 149, 223, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 0, 157,
	158, 224, 159, 0, 247, 160, 161, 0, 225, 162,
	163, 0, 164, 165, 0, 166, 226, 167, 0, 168,
	169, 171, 227, 170, 228, 0, 172, 0, 173, 174,
	0, 243, 230, 231, 0, 0, 239, 232, 233, 0,
	176, 177, 178, 179, 0, 0, 180, 181, 182, 0,
	0, 183, 184, 185, 234, 235, 86, 186, 0, 0,
	0, 0, 187, 188, 189, 190, 0, 0, 89, 90,
	0, 91, 0, 0, 0, 0, 0, 0, 0, 0,
	92, 93, 191, 192, 193, 94, 194, 195, 0, 95,
	196, 197, 96, 0, 0, 198, 199, 200, 0, 201,
	0, 0, 0, 97, 98, 99, 0, 100, 0, 101,
	0, 0, 102, 103, 0, 0, 0, 0, 0, 0,
	104, 105, 106, 107, 202, 108, 203, 204, 0, 0,
	109, 0, 0, 0, 110, 111, 0, 112, 0, 0,
	0, 205, 113, 206, 0, 0, 0, 114, 115, 207,
	0, 116, 0, 117, 0, 0, 0, 0, 118, 208,
	0, 209, 0, 119, 120, 322, 211, 0, 0, 121,
	0, 0, 122, 212, 213, 214, 0, 215, 0, 0,
	123, 0, 124, 125, 0, 0, 216, 0, 126, 0,
	0, 127, 0, 0, 128, 0, 129, 130, 131, 132,
	133, 0, 134, 135, 138, 136, 0, 137, 0, 217,
	139, 218, 140, 141, 0, 0, 0, 0, 0, 142,
	219, 0, 143, 0, 220, 144, 145, 0, 221, 146,
	222, 0, 147, 148, 149, 223, 150, 151, 0, 153,
	154, 152, 155, 0, 156, 0, 157, 158, 224, 159,
	0, 247, 160, 161, 0, 225, 162, 163, 0, 164,
	165, 0, 166, 226, 167, 0, 168, 169, 171, 227,
	170, 228, 0, 172, 0, 173, 174, 0, 229, 230,
	231, 0, 0, 175, 232, 233, 0, 176, 177, 178,
	179, 0, 0, 180, 181, 182, 0, 0, 183, 184,
	185, 234, 235, 86, 186, 0, 0, 0, 0, 187,
	188, 189, 190, 0, 0, 89, 90, 0, 91, 0,
	0, 0, 0, 0, 0, 0, 0, 92, 93, 191,
	192, 193, 94, 194, 195, 0, 95, 196, 197, 96,
	0, 0, 198, 199, 200, 0, 201, 0, 0, 0,
	97, 98, 99, 0, 100, 0, 101, 0, 0, 102,
	103, 0, 0, 0, 0, 0, 0, 104, 105, 106,
	107, 202, 108, 203, 204, 0, 0, 109, 0, 0,
	0, 110, 111, 0, 112, 0, 0, 0, 205, 113,
	206, 0, 0, 0, 114, 115, 207, 0, 116, 0,
	117, 0, 0, 0, 0, 118, 208, 0, 209, 0,
	119, 120, 319, 211, 0, 0, 121, 0, 0, 122,
	212, 213, 214, 0, 215, 0, 0, 123, 0, 124,
	125, 0, 0, 216, 0, 126, 0, 0, 127, 0,
	0, 128, 0, 129, 130, 131, 132, 133, 0, 134,
	135, 138, 136, 0, 137, 0, 217, 139, 218, 140,
	141, 0, 0, 0, 0, 0, 142, 219, 0, 143,
	0, 220, 144, 145, 0, 221, 146, 222, 0, 147,
	148, 149, 223, 150, 151, 0, 153, 154, 152, 155,
	0, 156, 0, 157, 158, 224, 159, 0, 247, 160,
	161, 0, 225, 162, 163, 0, 164, 165, 0, 166,
	226, 167, 0, 168, 169, 171, 227, 170, 228, 0,
	172, 0, 173, 174, 0, 229, 230, 231, 0, 0,
	175, 232, 233, 0, 176, 177, 178, 179, 0, 0,
	180, 181, 182, 0, 0, 183, 184, 185, 234, 235,
	86, 186, 0, 0, 0, 0, 187, 188, 189, 190,
	0, 0, 89, 90, 0, 91, 0, 0, 0, 0,
	0, 0, 0, 0, 92, 93, 191, 192, 193, 94,
	194, 195, 0, 95, 196, 197, 96, 0, 0, 198,
	199, 200, 0, 201, 0, 0, 0, 97, 98, 99,
	0, 100, 0, 101, 0, 0, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 106, 107, 202, 108,
	203, 204, 0, 0, 109, 0, 0, 0, 110, 111,
	0, 112, 0, 0, 0, 205, 113, 206, 0, 0,
	0, 114, 115, 207, 0, 116, 0, 117, 0, 0,
	0, 0, 118, 208, 0, 209, 0, 119, 120, 317,
	211, 0, 0, 121, 0, 0, 122, 212, 213, 214,
	0, 215, 0, 0, 123, 0, 124, 125, 0, 0,
	216, 0, 126, 0, 0, 127, 0, 0, 128, 0,
	129, 130, 131, 132, 133, 0, 134, 135, 138, 136,
	0, 137, 0, 217, 139, 218, 140, 141, 0, 0,
	0, 0, 0, 142, 219, 0, 143, 0, 220, 144,
	145, 0, 221, 146, 222, 0, 147, 148, 149, 223,
	150, 151, 0, 153, 154, 152, 155, 0, 156, 0,
	157, 158, 224, 159, 0, 247, 160, 161, 0, 225,
	162, 163, 0, 164, 165, 0, 166, 226, 167, 0,
	168, 169, 171, 227, 170, 228, 0, 172, 0, 173,
	174, 0, 229, 230, 231, 0, 0, 175, 232, 233,
	0, 176, 177, 178, 179, 0, 0, 180, 181, 182,
	0, 0, 183, 184, 185, 234, 235, 86, 186, 0,
	0, 0, 0, 187, 188, 189, 190, 0, 0, 89,
	90, 0, 91, 0, 0, 0, 0, 0, 0, 0,
	0, 92, 93, 191, 192, 193, 94, 194, 195, 0,
	95, 196, 197, 96, 0, 0, 198, 199, 200, 0,
	201, 0, 0, 0, 97, 98, 99, 0, 100, 0,
	101, 0, 0, 102, 103, 0, 0, 0, 0, 0,
	0, 104, 105, 106, 107, 202, 108, 203, 204, 0,
	0, 109, 0, 0, 0, 110, 111, 0, 112, 0,
	0, 0, 205, 113, 206, 0, 0, 0, 114, 115,
	207, 0, 116, 0, 117, 0, 0, 0, 0, 118,
	208, 0, 209, 0, 119, 120, 309, 211, 0, 0,
	121, 0, 0, 122, 212, 213, 214, 0, 215, 0,
	0, 123, 0, 124, 125, 0, 0, 216, 0, 126,
	0, 0, 127, 0, 0, 128, 0, 129, 130, 131,
	132, 133, 0, 134, 135, 138, 136, 0, 137, 0,
	217, 139, 218, 140, 141, 0, 0, 0, 0, 0,
	142, 219, 0, 143, 0, 220, 144, 145, 0, 221,
	146, 222, 0, 147, 148, 149, 223, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 0, 157, 158, 224,
	159, 0, 247, 160, 161, 0, 225, 162, 163, 0,
	164, 165, 0, 166, 226, 167, 0, 168, 169, 171,
	227, 170, 228, 0, 172, 0, 173, 174, 0, 229,
	230, 231, 0, 0, 175, 232, 233, 0, 176, 177,
	178, 179, 0, 0, 180, 181, 182, 0, 0, 183,
	184, 185, 234, 235, 86, 186, 0, 0, 0, 0,
	187, 188, 189, 190, 0, 0, 89, 90, 0, 91,
	0, 0, 0, 0, 0, 0, 0, 0, 92, 93,
	191, 192, 193, 94, 194, 195, 0, 95, 196, 197,
	96, 0, 0, 198, 199, 200, 0, 201, 0, 0,
	0, 97, 98, 99, 0, 100, 0, 101, 0, 0,
	102, 103, 0, 0, 0, 0, 0, 0, 104, 105,
	106, 107, 202, 108, 203, 204, 0, 0, 109, 0,
	0, 0, 110, 111, 0, 112, 0, 0, 0, 205,
	113, 206, 0, 0, 0, 114, 115, 207, 0, 116,
	0, 117, 0, 0, 0, 0, 118, 208, 0, 209,
	0, 119, 120, 210, 211, 0, 0, 121, 0, 0,
	122, 212, 213, 214, 0, 215, 0, 0, 123, 0,
	124, 125, 0, 0, 216, 0, 126, 0, 0, 127,
	0, 0, 128, 0, 129, 130, 131, 132, 133, 0,
	134, 135, 138, 136, 0, 137, 0, 217, 139, 218,
	140, 141, 0, 0, 0, 0, 0, 142, 219, 0,
	143, 0, 220, 144, 145, 0, 221, 146, 222, 0,
	147, 148, 149, 223, 289, 151, 0, 153, 154, 152,
	155, 0, 156, 0, 157, 158, 224, 159, 0, 247,
	160, 161, 0, 225, 162, 163, 0, 164, 165, 0,
	166, 226, 167, 0, 168, 169, 171, 227, 170, 228,
	0, 172, 0, 173, 174, 0, 229, 230, 231, 0,
	0, 175, 232, 233, 0, 176, 177, 178, 179, 0,
	0, 180, 181, 182, 0, 0, 183, 184, 185, 234,
	235, 86, 186, 0, 0, 0, 0, 187, 188, 189,
	190, 0, 0, 89, 90, 0, 91, 0, 0, 0,
	0, 0, 0, 0, 0, 92, 93, 191, 192, 193,
	94, 194, 195, 0, 95, 196, 197, 96, 0, 0,
	198, 199, 200, 0, 201, 0, 0, 0, 97, 98,
	99, 0, 100, 0, 101, 0, 0, 102, 103, 0,
	0, 0, 0, 0, 0, 104, 105, 106, 107, 202,
	108, 203, 204, 0, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 205, 113, 206, 0,
	0, 0, 114, 115, 207, 0, 116, 0, 117, 0,
	0, 0, 0, 118, 208, 0, 209, 0, 119, 120,
	210, 211, 0, 0, 121, 0, 0, 122, 212, 213,
	214, 0, 215, 0, 0, 123, 0, 124, 125, 0,
	0, 216, 0, 126, 0, 0, 237, 0, 0, 128,
	0, 129, 130, 131, 132, 244, 0, 134, 135, 138,
	136, 0, 137, 0, 217, 139, 218, 140, 141, 0,
	0, 0, 0, 0, 142, 219, 0, 143, 0, 220,
	144, 145, 0, 221, 146, 222, 0, 147, 148, 149,
	223, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	0, 157, 158, 224, 159, 0, 247, 160, 161, 0,
	225, 162, 238, 0, 164, 165, 0, 166, 226, 167,
	0, 168, 169, 171, 227, 170, 228, 0, 172, 0,
	173, 174, 0, 243, 230, 231, 0, 0, 239, 232,
	233, 0, 176, 177, 178, 179, 0, 0, 180, 181,
	182, 0, 0, 183, 184, 185, 234, 235, 86, 186,
	0, 0, 0, 0, 187, 188, 189, 190, 0, 0,
	89, 90, 0, 91, 0, 0, 0, 0, 0, 0,
	0, 0, 92, 93, 191, 192, 193, 94, 194, 195,
	0, 95, 196, 197, 96, 0, 0, 198, 199, 200,
	0, 201, 0, 0, 0, 97, 98, 99, 0, 100,
	0, 101, 0, 0, 102, 103, 0, 0, 0, 0,
	0, 0, 104, 105, 106, 107, 202, 108, 203, 204,
	0, 0, 109, 0, 0, 0, 110, 111, 0, 112,
	0, 0, 0, 205, 113, 206, 0, 0, 0, 114,
	115, 207, 0, 116, 0, 117, 0, 0, 0, 0,
	118, 208, 0, 209, 0, 119, 120, 210, 211, 0,
	0, 121, 0, 0, 122, 212, 213, 214, 0, 215,
	0, 0, 123, 0, 124, 125, 0, 0, 216, 0,
	126, 0, 0, 127, 0, 0, 128, 0, 129, 130,
	131, 132, 133, 0, 134, 135, 138, 136, 0, 137,
	0, 217, 139, 218, 140, 141, 0, 0, 0, 0,
	0, 142, 219, 0, 143, 0, 220, 144, 0, 0,
	221, 146, 222, 0, 147, 0, 149, 223, 150, 151,
	0, 153, 154, 152, 155, 0, 156, 0, 157, 158,
	224, 0, 0, 247, 160, 161, 0, 225, 162, 163,
	0, 164, 165, 0, 166, 226, 167, 0, 168, 169,
	171, 227, 170, 228, 0, 172, 0, 173, 174, 0,
	229, 230, 231, 0, 0, 175, 232, 233, 0, 176,
	177, 178, 179, 0, 0, 180, 181, 182, 0, 0,
	183, 184, 185, 234, 235, 722, 186, 741, 742, 743,
	0, 187, 188, 189, 190, 0, 0, 744, 0, 0,
	0, 0, 0, 724, 722, 750, 741, 742, 743, 0,
	0, 0, 0, 0, 0, 0, 744, 0, 0, 0,
	0, 0, 724, 723, 750, 0, 0, 0, 0, 738,
	0, 722, 0, 741, 742, 743, 0, 0, 0, 0,
	0, 0, 723, 744, 0, 0, 0, 0, 738, 724,
	0, 750, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 723,
	0, 0, 0, 729, 0, 738, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	751, 0, 729, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 749, 0, 0, 0, 0, 0, 0, 751,
	0, 0, 746, 0, 0, 0, 0, 0, 739, 729,
	0, 749, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 746, 0, 0, 0, 0, 751, 739, 0, 0,
	745, 0, 0, 0, 0, 0, 0, 0, 749, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 746, 745,
	0, 0, 0, 0, 739, 0, 0, 0, 0, 0,
	0, 0, 0, 740, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 748, 0, 745, 0, 0, 0,
	0, 0, 740, 722, 0, 741, 742, 743, 0, 0,
	0, 0, 0, 748, 0, 744, 0, 0, 0, 0,
	0, 724, 0, 750, 0, 0, 0, 0, 0, 740,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	748, 723, 0, 0, 0, 0, 747, 738, 0, 735,
	736, 737, 0, 734, 731, 732, 733, 725, 726, 727,
	728, 730, 0, 0, 0, 747, 0, 1664, 735, 736,
	737, 0, 734, 731, 732, 733, 725, 726, 727, 728,
	730, 0, 0, 0, 0, 0, 1663, 0, 0, 0,
	0, 729, 747, 0, 0, 735, 736, 737, 0, 734,
	731, 732, 733, 725, 726, 727, 728, 730, 751, 0,
	0, 0, 0, 1644, 0, 722, 0, 741, 742, 743,
	749, 0, 0, 0, 0, 0, 0, 744, 0, 0,
	746, 0, 0, 724, 0, 750, 739, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 723, 0, 0, 0, 0, 745, 738,
	0, 0, 0, 0, 0, 0, 0, 0, 722, 0,
	741, 742, 743, 0, 0, 0, 0, 0, 0, 0,
	744, 0, 0, 0, 0, 0, 724, 0, 750, 0,
	0, 740, 0, 0, 0, 722, 0, 741, 742, 743,
	0, 0, 748, 729, 0, 0, 723, 744, 0, 0,
	0, 0, 738, 724, 0, 750, 0, 0, 0, 0,
	751, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 749, 723, 0, 0, 0, 0, 0, 738,
	0, 0, 746, 0, 0, 0, 0, 0, 739, 0,
	0, 0, 0, 0, 747, 0, 729, 735, 736, 737,
	0, 734, 731, 732, 733, 725, 726, 727, 728, 730,
	745, 0, 0, 751, 0, 1623, 0, 0, 0, 0,
	0, 0, 0, 729, 0, 749, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 746, 0, 0, 0, 0,
	751, 739, 0, 740, 0, 0, 0, 0, 0, 0,
	0, 0, 749, 0, 748, 0, 0, 0, 0, 0,
	0, 0, 746, 745, 0, 0, 0, 0, 739, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	745, 0, 0, 0, 0, 0, 740, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 747, 748, 0, 735,
	736, 737, 0, 734, 731, 732, 733, 725, 726, 727,
	728, 730, 0, 740, 0, 0, 0, 1618, 0, 0,
	0, 0, 0, 0, 748, 0, 0, 722, 0, 741,
	742, 743, 0, 0, 0, 0, 0, 0, 0, 744,
	0, 0, 0, 0, 0, 724, 0, 750, 0, 747,
	0, 0, 735, 736, 737, 0, 734, 731, 732, 733,
	725, 726, 727, 728, 730, 723, 0, 0, 0, 0,
	1614, 738, 0, 0, 0, 0, 747, 0, 0, 735,
	736, 737, 0, 734, 731, 732, 733, 725, 726, 727,
	728, 730, 0, 0, 0, 0, 722, 1550, 741, 742,
	743, 0, 0, 0, 0, 0, 0, 0, 744, 0,
	0, 0, 0, 0, 724, 729, 750, 0, 0, 722,
	0, 741, 742, 743, 0, 0, 0, 0, 0, 0,
	0, 744, 751, 0, 723, 0, 0, 724, 0, 750,
	738, 0, 0, 0, 749, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 746, 0, 0, 723, 0, 0,
	739, 0, 0, 738, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 745, 0, 729, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 751, 0, 0, 0, 0, 0, 729, 0, 0,
	0, 0, 0, 749, 0, 740, 0, 0, 0, 0,
	0, 0, 0, 746, 751, 0, 748, 0, 0, 739,
	0, 0, 0, 0, 0, 0, 749, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 746, 0, 0, 0,
	0, 745, 739, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 745, 0, 0, 0, 747, 0,
	0, 735, 736, 737, 740, 734, 731, 732, 733, 725,
	726, 727, 728, 730, 0, 748, 0, 0, 0, 1549,
	0, 722, 0, 741, 742, 743, 0, 740, 0, 0,
	0, 0, 0, 744, 0, 0, 0, 0, 748, 724,
	0, 750, 0, 0, 0, 0, 0, 0, 722, 0,
	741, 742, 743, 0, 0, 0, 0, 0, 0, 723,
	744, 0, 0, 0, 0, 738, 724, 747, 750, 0,
	735, 736, 737, 0, 734, 731, 732, 733, 725, 726,
	727, 728, 730, 0, 0, 0, 723, 0, 1455, 0,
	747, 0, 738, 735, 736, 737, 0, 734, 731, 732,
	733, 725, 726, 727, 728, 730, 0, 0, 0, 729,
	0, 1392, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 751, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 729, 0, 749, 0,
	722, 0, 741, 742, 743, 0, 0, 0, 746, 0,
	0, 0, 744, 751, 739, 0, 0, 0, 724, 0,
	750, 0, 0, 0, 0, 749, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 746, 745, 0, 723, 0,
	0, 739, 0, 0, 738, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 745, 0, 0, 0, 0, 0, 740,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	748, 0, 0, 0, 0, 0, 0, 0, 729, 0,
	722, 0, 741, 742, 743, 0, 740, 0, 0, 0,
	0, 0, 744, 0, 0, 751, 0, 748, 724, 0,
	750, 0, 0, 0, 0, 0, 0, 749, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 746, 723, 0,
	0, 0, 747, 739, 738, 735, 736, 737, 0, 734,
	731, 732, 733, 725, 726, 727, 728, 730, 0, 0,
	0, 0, 0, 1367, 0, 745, 0, 0, 0, 747,
	0, 0, 735, 736, 737, 0, 734, 731, 732, 733,
	725, 726, 727, 728, 730, 0, 0, 0, 729, 1728,
	1005, 0, 0, 0, 0, 0, 0, 0, 740, 0,
	0, 0, 0, 0, 0, 751, 0, 0, 0, 748,
	0, 0, 722, 0, 741, 742, 743, 749, 0, 0,
	0, 0, 0, 0, 744, 0, 0, 746, 0, 0,
	724, 0, 750, 739, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	723, 0, 0, 0, 0, 745, 738, 0, 0, 0,
	0, 747, 0, 0, 735, 736, 737, 1727, 734, 731,
	732, 733, 725, 726, 727, 728, 730, 0, 0, 0,
	1439, 0, 0, 0, 0, 0, 0, 0, 740, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 748,
	729, 0, 1265, 0, 722, 1264, 741, 742, 743, 0,
	0, 0, 0, 0, 0, 0, 744, 751, 0, 0,
	909, 0, 724, 0, 750, 0, 0, 0, 0, 749,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 746,
	0, 0, 723, 0, 0, 739, 0, 0, 738, 0,
	0, 747, 0, 0, 735, 736, 737, 0, 734, 731,
	732, 733, 725, 726, 727, 728, 730, 745, 0, 0,
	0, 0, 0, 910, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 753,
	0, 0, 729, 0, 0, 722, 0, 741, 742, 743,
	740, 0, 0, 0, 0, 0, 0, 744, 0, 751,
	752, 748, 0, 724, 0, 750, 722, 0, 741, 742,
	743, 749, 0, 0, 0, 0, 0, 0, 744, 0,
	0, 746, 0, 723, 724, 0, 750, 739, 0, 738,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 723, 0, 0, 0, 0, 745,
	738, 0, 0, 747, 0, 0, 735, 736, 737, 0,
	734, 731, 732, 733, 725, 726, 727, 728, 730, 0,
	0, 0, 0, 729, 0, 0, 0, 0, 0, 0,
	0, 0, 740, 0, 0, 0, 0, 0, 0, 0,
	751, 0, 0, 748, 729, 0, 0, 722, 0, 741,
	742, 743, 749, 0, 0, 0, 0, 0, 0, 744,
	0, 751, 746, 0, 0, 724, 0, 750, 739, 0,
	0, 0, 0, 749, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 746, 0, 723, 0, 0, 0, 739,
	745, 738, 0, 0, 0, 747, 0, 0, 735, 736,
	737, 0, 734, 731, 732, 733, 725, 726, 727, 728,
	730, 745, 284, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 740, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 748, 729, 0, 0, 722, 0,
	741, 742, 743, 0, 740, 0, 0, 0, 0, 0,
	744, 0, 751, 0, 0, 748, 724, 0, 750, 0,
	0, 0, 0, 0, 749, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 746, 0, 723, 0, 0, 0,
	739, 0, 738, 0, 0, 0, 747, 0, 0, 735,
	736, 737, 0, 734, 731, 732, 733, 725, 726, 727,
	728, 730, 745, 0, 0, 0, 0, 747, 0, 0,
	735, 736, 737, 0, 734, 731, 732, 733, 725, 726,
	727, 728, 730, 0, 0, 0, 729, 0, 0, 0,
	722, 1271, 741, 742, 743, 740, 0, 0, 0, 0,
	0, 0, 744, 751, 0, 1266, 748, 0, 724, 0,
	750, 0, 0, 0, 0, 749, 0, 0, 0, 0,
	0, 0, 1386, 0, 0, 746, 0, 0, 723, 0,
	0, 739, 0, 0, 738, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 745, 0, 0, 0, 0, 747, 0,
	0, 735, 736, 737, 0, 734, 731, 732, 733, 725,
	726, 727, 728, 730, 0, 0, 0, 0, 729, 0,
	0, 722, 0, 741, 742, 743, 740, 0, 0, 0,
	0, 0, 0, 744, 0, 751, 1227, 748, 0, 724,
	0, 750, 722, 0, 741, 742, 743, 749, 0, 0,
	0, 0, 0, 0, 744, 0, 0, 746, 0, 723,
	724, 0, 750, 739, 0, 738, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	723, 0, 0, 0, 0, 745, 738, 0, 0, 747,
	0, 0, 735, 736, 737, 0, 734, 731, 732, 733,
	725, 726, 727, 728, 730, 0, 0, 0, 0, 729,
	0, 0, 0, 0, 0, 0, 0, 0, 740, 0,
	0, 0, 0, 0, 0, 0, 751, 0, 0, 748,
	729, 0, 0, 722, 0, 741, 742, 743, 749, 0,
	0, 0, 0, 0, 0, 744, 0, 751, 746, 0,
	0, 724, 0, 750, 739, 0, 0, 0, 0, 749,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 746,
	0, 723, 0, 0, 0, 739, 745, 738, 0, 0,
	0, 747, 0, 0, 735, 736, 737, 0, 734, 731,
	732, 733, 725, 726, 727, 728, 730, 745, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1232, 0, 740,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	748, 729, 0, 0, 722, 0, 741, 742, 743, 0,
	740, 0, 0, 0, 0, 0, 744, 0, 751, 0,
	0, 748, 724, 0, 750, 0, 0, 0, 0, 0,
	749, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	746, 0, 723, 0, 0, 0, 739, 0, 738, 0,
	0, 0, 747, 0, 0, 735, 736, 737, 0, 734,
	731, 732, 733, 725, 726, 727, 728, 730, 745, 0,
	0, 0, 0, 747, 0, 0, 735, 736, 737, 0,
	734, 731, 732, 733, 725, 726, 727, 728, 730, 0,
	0, 0, 729, 0, 0, 722, 0, 741, 742, 743,
	0, 740, 0, 0, 0, 0, 0, 0, 0, 751,
	0, 0, 748, 724, 722, 750, 741, 742, 743, 0,
	0, 749, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 746, 724, 723, 750, 0, 0, 739, 0, 738,
	0, 0, 0, 0, 1234, 0, 1251, 1252, 1253, 0,
	0, 0, 723, 0, 0, 0, 0, 1234, 738, 1251,
	1252, 1253, 0, 0, 747, 0, 0, 735, 736, 737,
	0, 734, 731, 732, 733, 725, 726, 727, 728, 730,
	0, 0, 0, 729, 0, 0, 0, 0, 1248, 0,
	0, 0, 740, 0, 0, 0, 0, 0, 0, 0,
	751, 1248, 729, 748, 0, 0, 0, 0, 0, 0,
	0, 0, 749, 0, 0, 0, 0, 0, 0, 751,
	0, 0, 746, 0, 0, 0, 0, 0, 739, 0,
	0, 0, 1239, 0, 0, 0, 0, 0, 0, 0,
	0, 746, 0, 0, 0, 1239, 0, 739, 0, 1255,
	0, 0, 0, 0, 0, 747, 0, 0, 735, 736,
	737, 1254, 734, 731, 732, 733, 725, 726, 727, 728,
	730, 0, 0, 0, 1254, 0, 0, 1249, 0, 0,
	0, 0, 0, 740, 0, 0, 0, 0, 0, 0,
	1249, 0, 0, 0, 748, 0, 938, 954, 929, 946,
	945, 0, 740, 931, 930, 0, 0, 0, 956, 955,
	0, 0, 0, 748, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1250, 0, 0, 0, 0, 951, 0, 943,
	942, 0, 0, 0, 0, 1250, 747, 941, 0, 735,
	736, 737, 0, 734, 731, 732, 733, 725, 726, 727,
	728, 730, 940, 0, 0, 747, 0, 0, 735, 736,
	737, 0, 734, 731, 732, 733, 725, 726, 727, 728,
	730, 0, 0, 0, 0, 0, 934, 935, 936, 0,
	591, 0, 0, 0, 0, 0, 0, 0, 1245, 1246,
	1247, 0, 1244, 1241, 1242, 1243, 1235, 1236, 1237, 1238,
	1240, 1245, 1246, 1247, 0, 1244, 1241, 1242, 1243, 1235,
	1236, 1237, 1238, 1240, 944, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 939, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 933, 0,
	0, 0, 0, 0, 0, 0, 937, 0, 0, 0,
	0, 0, 958, 0, 0, 0, 0, 0, 0, 932,
	0, 0, 952, 953, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 957,
}
var sqlPact = [...]int{

	2480, -1000, 2, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 771, -1000, -1000, -1000, 556, 669, 70, 1725, 1725,
	15010, -1000, -1000, 17727, 1707, 405, 406, 405, 405, 396,
	15010, 519, 580, 119, -1000, 727, 44, 17480, 13775, 1212,
	0, 13281, 238, 2480, 13528, 13775, 17233, 1054, 964, 934,
	13281, 16986, 16739, 16492, -1000, 8978, -1000, -1000, -1000, -1000,
	-1000, 817, -1000, -1, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 814, -1000, 13775, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 16245, 15998, 741,
	-1000, -1000, 446, 332, 1208, -1000, 21, -1000, -1000, -1000,
	1053, -1000, 813, 1045, 1041, 1040, 1038, 327, 781, -1000,
	422, 741, -1000, 741, -1000, -1000, -1000, 506, 15010, -1000,
	13281, -1000, 15751, 980, 15504, -1000, 727, -1000, -1000, -1000,
	860, 1207, 1207, 1207, 1216, 120, 117, 119, -9, 13775,
	-1000, 239, -9, 6139, 6139, -1000, -1000, 238, -1000, 266,
	11542, 15, -1000, 6657, -1000, 723, 1108, 614, 608, 1105,
	-110, 13281, 13775, 13775, 544, 15257, -1000, 1104, 105, 1101,
	-1000, 101, 1099, -1000, -27, -1000, -1000, -1000, -1000, -1000,
	-1000, 238, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 11799, 1717, 11799, -1000, -1000,
	1233, -1000, -1000, -5, -6, 910, 1022, 9495, 9237, 1149,
	1421, -1000, -1000, -1000, 20, 3806, 13775, 1065, 11799, 13775,
	13775, 13775, -1000, 13775, -1000, 904, -1000, 13775, -1000, -7,
	-8, -1000, 15010, -1000, 107, -1000, 237, 870, 14763, 1120,
	859, -1000, 860, -1000, 772, 899, 7173, 7947, 119, -1000,
	-1000, 119, 119, 7947, -1000, -1000, 13775, -9, 1230, 13775,
	109, -1000, 19595, -1000, -1000, 7947, 7947, 7947, 7947, 7947,
	734, -1000, -1000, -1000, 4583, -1000, -1000, 15, 236, 254,
	-1000, -1000, 235, 15, -1000, -1000, -1000, -1000, 233, 1362,
	391, -1000, -1000, -1000, 7947, 341, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1060, 229, 228, -1000, -1000,
	-1000, -1000, 225, 224, 218, 214, 210, 209, 208, 207,
	205, 203, 202, 200, 199, 693, -1000, 354, -1000, -1000,
	354, 354, -1000, 183, 183, 184, -1000, -1000, -1000, 183,
	-1000, -1000, -1000, 304, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 198, 109, -1000, -1000, -1000, 13775, 15, -1000, -1000,
	-1000, 7947, 3547, -32, -1000, 20093, -1000, -31, 621, -1000,
	12787, 1179, 1177, 1175, 13281, 484, 482, 13775, 13775, 347,
	777, 1225, 777, 11028, -1000, 13775, 13775, -1000, 13775, -1000,
	-1000, 13775, -1000, 13775, 13775, 61, 12293, 481, -24, 12046,
	13775, -1000, 16, -1000, -1000, 1036, 399, 672, 929, 578,
	-1000, -1000, -1000, -1000, -11, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1293, -1000, -1000, -1000, -1000,
	1331, -11, -1000, -1000, -1000, -1000, -1000, 1359, -1000, -1000,
	-1000, -1000, 3806, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	13775, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 672, 929,
	-1000, -1000, 13281, 12540, 1097, 811, 857, -1000, -1000, 290,
	1095, -1000, -1000, -1000, -1000, 20093, -1000, 20093, 572, 970,
	-1000, 970, -20, -1000, 19504, -1000, 197, -34, -1000, 347,
	6139, 10771, 20455, 13775, 511, 7947, 7947, 7947, 7947, 7947,
	7947, 7947, 7947, 7947, 7947, 7947, 7947, 7947, 7947, 7947,
	7947, 7947, 7947, 7947, 7947, 7947, 7947, 1017, 463, 1239,
	731, 178, 3806, -1000, 1263, 1263, 1263, 20275, 20275, 191,
	-15, 19118, -23, 15, -1000, -1000, 5881, 5621, 15, 4063,
	-1000, 732, 1317, 350, 20093, 1071, 999, 196, 113, 111,
	7947, 730, 7947, 8205, 7947, 7947, 4843, 7947, 7947, 7947,
	7947, 7947, 7947, -1000, 195, -1000, -1000, -1000, -1000, 1316,
	-1000, -1000, 1315, -1000, 510, 448, 1314, 347, 106, -1000,
	2327, -1000, -1000, 6657, -1000, 661, 13775, 13775, 13775, -1000,
	-1000, 849, 14516, -1000, 20455, 13775, -1000, 194, 188, 919,
	918, 13775, 13775, 14269, 14022, 13775, 697, 13775, 13775, 607,
	-1000, 570, 7947, 704, -1000, 10257, 360, 13775, 596, 51,
	-1000, -1000, -1000, 288, 13775, -1000, -1000, -1000, 105, -1000,
	101, -1000, -1000, 13775, 12046, -24, -25, -1000, -1000, 13775,
	929, -1000, -1000, -1000, 571, -1000, 665, -1000, 9753, -1000,
	-1000, -1000, 732, -1000, -36, -1000, -1000, -1000, -1000, 103,
	-26, -1000, -1000, -1000, -1000, -1000, 13775, 217, 13775, 13775,
	13775, 1092, 1357, 13775, -1000, -1000, -1000, 7947, -1000, -1000,
	-1000, 44, 13775, -1000, 998, -1000, -29, 1816, -112, 13034,
	-1000, 10000, -1000, 1240, -1000, -1000, -1000, -1000, 69, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	184, 693, 183, 183, 183, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 304, -1000, 354, 354, 354, -1000, -1000, -1000,
	320, 598, 598, 1284, 1284, 1284, 1284, 2145, 2145, 745,
	2207, 1998, 1998, 1998, 414, 445, 445, 1998, 1998, 1998,
	20275, 20184, 159, 7947, 462, 725, 178, 7947, -1000, 1513,
	-1000, -1000, -1000, 1033, 177, 8205, 8205, -1000, -1000, -1000,
	4583, -1000, -1000, 176, 7947, -1000, 7947, -33, -102, -1000,
	20093, -1000, -40, -1000, -1000, -4, 7947, 7947, 7947, 102,
	-1000, 450, -1000, 444, 441, 427, -1000, 175, 100, 521,
	-1000, 7947, 724, 172, 171, 7947, -1000, -1000, 19981, 99,
	1032, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 98, 20002,
	97, 20324, -1000, 8205, 8205, 8205, 4583, 169, 95, 19412,
	-113, 19890, 6915, 6915, 6915, 94, 19798, 7947, -113, 2882,
	2791, 2700, -41, -42, -48, 1313, -49, 91, 315, 303,
	83, 998, -1000, -1000, 7947, -1000, -1000, -1000, 425, 420,
	1091, -1000, 841, -1000, 738, 7947, 13775, 167, 163, 676,
	-1000, 1090, 735, 1088, 735, -1000, -31, 583, -1000, -1000,
	418, -1000, 6139, 20093, -1000, 574, 1182, -53, -1000, -1000,
	-1000, 6139, 347, 11028, 6657, -54, -1000, -1000, -36, -1000,
	-36, -1000, -1000, -1000, -1000, -1000, -1000, 13775, -1000, 12540,
	160, 13775, 158, 157, 156, 13775, -1000, 1120, -1000, 82,
	-1000, -1000, -1000, -1000, -1000, 993, 1209, 10771, 926, 925,
	10771, 1113, 746, 746, 746, -1000, 13034, 3275, -1000, -1000,
	13775, 144, 10514, 81, 1816, 259, 256, -1000, 1311, 7947,
	159, 7947, 8205, 8205, -1000, 159, -1000, -1000, -1000, -1000,
	1028, 142, 7947, 20455, 2980, 2941, -58, 5361, -62, 19091,
	7947, -1000, -1000, 254, -1000, 80, 6399, -1000, 19616, 4,
	4, -1000, 821, 747, 603, 553, 1309, 1349, 1117, -1000,
	7947, 19707, -1000, 11285, 348, 760, 18909, 20455, -1000, 7947,
	-1000, 1027, 7947, -1000, 20455, 8205, 8205, 8205, 8205, 8205,
	8205, 8205, 8205, 8205, 8205, 8205, 8205, 8205, 8205, 8205,
	8205, 8205, 8205, 8205, 905, 8205, 1260, 1260, 1260, -69,
	5101, -1000, 1059, 1027, 7947, 7947, 20455, 79, 74, 73,
	-1000, 7947, -113, 7947, 7947, 7947, -1000, -1000, -1000, 72,
	-1000, 1307, -1000, -1000, -1000, -1000, 993, 19210, 13775, 13775,
	13775, 1081, 1035, -1000, 18886, -60, 13775, 13775, -1000, 967,
	969, 386, 13775, -1000, 13775, -1000, 13775, 13775, 13775, 13775,
	-75, 6139, 190, 44, 13775, -75, 570, -1000, -1000, 282,
	-1000, -1000, 8721, 140, 13775, 12540, 8721, 810, -1000, -1000,
	344, 7947, 7947, 1816, 10771, 10771, 1254, 923, 10771, -1000,
	-1000, -1000, -1000, 298, -1000, 949, 139, 13775, 13034, 415,
	1288, 62, 1237, 159, 2860, 844, 7947, 20455, 20294, -64,
	-1000, 7947, 7947, -1000, -65, -1000, 7947, -1000, 20093, -1000,
	1347, 7947, 58, 53, 49, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 45, -1000, -1000, 20093, 7947, -1000, -1000, 17974,
	7947, 42, -1000, 38, 20093, 1059, 20093, -1000, 554, 554,
	1260, 1260, 1260, 1260, 804, 804, 1004, 1213, 457, 457,
	457, 798, 342, 342, 457, 457, 457, 1026, 932, 136,
	20337, 7947, -74, -1000, -1000, -1000, 20093, 20093, 36, -1000,
	-1000, -1000, -113, 2374, 18817, 18615, -1000, 33, 344, -1000,
	-1000, -1000, -1000, 13775, -1000, 13775, -1000, 13775, 836, -1000,
	-1000, 911, 134, 8205, 13775, -1000, 688, -76, -80, 827,
	-1000, 825, 7947, -1000, 20455, 735, 735, -1000, 416, 409,
	-1000, -75, 1125, 13775, 1164, -1000, -1000, -1000, 133, -82,
	-1000, 187, 1191, 7947, -1000, -1000, 132, 8721, -84, -1000,
	-1000, 29, -86, 13775, -1000, 13775, 20093, -113, -1000, 1254,
	-1000, 131, 7947, 10771, -1000, -1000, 780, -145, -1000, 280,
	-1000, 13775, -88, -1000, -1000, 247, 243, -1000, 7947, 7947,
	20294, -92, -1000, 20455, 159, 159, -1000, 18588, -1000, 19616,
	-1000, -1000, -1000, -1000, 20093, 711, -1000, 18535, -1000, -1000,
	-1000, 8205, 1024, 130, 20455, 18423, -1000, -1000, 7947, -1000,
	-1000, -1000, -1000, -1000, 1612, -1000, -1000, -1000, 7947, 20337,
	128, -1000, 127, -1000, -1000, -1000, 663, -1000, -1000, 20093,
	1193, -1000, -1000, 13775, 13775, 458, -93, 13775, -1000, -1000,
	4323, 688, 8721, 1190, 15, 13775, 1190, 18261, 4063, -94,
	-1000, 13775, -1000, 688, 125, -81, -1000, 1220, -1000, 13775,
	20093, -1000, 522, 949, -1000, 3806, -100, -1000, -1000, -1000,
	159, 159, -1000, -1000, -1000, 26, 760, 1201, -1000, 433,
	8205, 20455, -114, -1000, 18234, -1000, 18215, 886, 13775, 13775,
	13775, 365, 13775, -1000, -1000, 543, -1000, 347, -1000, -1000,
	-1000, -1000, -1000, -1000, 1191, -4, 688, -1000, -1000, 8721,
	13775, 123, -118, 417, -1000, -1000, -1000, -1000, 722, 7947,
	433, -119, -1000, -1000, -1000, 769, 658, 25, -124, 122,
	-1000, 7947, -1000, 11028, -1000, 1190, 23, -1000, -130, -1000,
	-1000, -1000, 1341, 5, 7689, 7689, -113, -1000, -1000, 799,
	797, 541, -1000, -1000, -1000, -1000, -1000, 886, 13775, 20093,
	-106, -1000, -1000, 688, -1000, -1000, -1000, -1000, 8463, 791,
	561, 19300, -1000, -1000, 1131, -1000, 378, 846, 846, 769,
	-132, -1000, -1000, 1245, -1000, -1000, -1000, -1000, -1000, -1000,
	1252, -1000, -1000, 939, -1000, -1000, -1000, 7431, -1000, -1000,
	-1000, -1000,
}
var sqlPgo = [...]int{

	0, 1591, 1590, 1234, 1588, 1583, 1582, 1581, 1577, 96,
	1573, 121, 122, 1571, 95, 1569, 1568, 1562, 1559, 51,
	1558, 1557, 1556, 1555, 1552, 89, 43, 186, 1781, 175,
	1545, 1543, 1540, 11, 100, 101, 1539, 69, 50, 98,
	107, 715, 58, 1531, 1530, 132, 30, 15, 282, 94,
	135, 120, 127, 1529, 1525, 1524, 35, 1523, 1522, 1521,
	1520, 45, 72, 1519, 13, 1517, 53, 1516, 1515, 108,
	1514, 97, 112, 23, 115, 144, 1513, 65, 10, 71,
	1510, 27, 1507, 32, 73, 129, 1505, 38, 288, 54,
	26, 46, 1502, 1500, 1495, 1492, 88, 81, 47, 1491,
	1490, 68, 1479, 128, 131, 1478, 1476, 118, 1475, 1472,
	1470, 623, 1469, 1467, 581, 5, 37, 59, 3, 113,
	111, 22, 1466, 16, 1465, 1344, 738, 658, 1464, 40,
	36, 77, 42, 70, 21, 1463, 103, 1462, 1459, 1458,
	1456, 1453, 75, 1452, 67, 133, 33, 44, 92, 25,
	19, 24, 84, 104, 139, 106, 1450, 1449, 116, 1445,
	157, 1441, 1438, 579, 80, 1436, 1435, 1434, 492, 309,
	226, 99, 1433, 1431, 184, 102, 1430, 1427, 78, 1423,
	1422, 137, 1421, 130, 28, 1418, 114, 1415, 93, 1414,
	0, 60, 39, 1413, 119, 74, 1410, 1407, 1402, 1400,
	17, 2, 8, 7, 6, 4, 20, 18, 1398, 1397,
	125, 82, 1394, 146, 1391, 1388, 29, 1387, 1386, 14,
	1384, 12, 1381, 9, 1, 1380, 134, 1376, 86, 1375,
	1256, 1374, 138, 1370, 1368, 1333, 76,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 4, 4, 35, 35, 34, 34, 34, 34,
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
	34, 32, 32, 37, 37, 37, 36, 36, 31, 31,
	5, 5, 5, 9, 10, 10, 10, 10, 10, 10,
	74, 74, 73, 73, 76, 76, 11, 11, 12, 12,
	12, 12, 12, 159, 159, 158, 13, 18, 226, 226,
	226, 230, 230, 231, 231, 232, 232, 232, 232, 232,
	232, 232, 228, 228, 21, 21, 21, 21, 111, 111,
	113, 113, 113, 113, 40, 110, 110, 110, 110, 112,
	112, 112, 112, 183, 181, 181, 188, 188, 188, 53,
	53, 53, 53, 53, 54, 54, 54, 180, 180, 180,
	180, 189, 189, 189, 189, 189, 189, 55, 55, 55,
	187, 187, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 182, 182, 227, 227,
	229, 229, 8, 8, 56, 56, 57, 57, 117, 117,
	117, 117, 116, 198, 198, 199, 199, 199, 200, 200,
	200, 200, 200, 200, 200, 196, 196, 197, 194, 194,
	195, 195, 195, 195, 233, 233, 115, 115, 60, 60,
	203, 203, 203, 203, 201, 201, 201, 201, 201, 204,
	202, 205, 205, 205, 205, 205, 145, 145, 145, 24,
	7, 7, 100, 100, 64, 64, 149, 149, 149, 65,
	65, 150, 47, 47, 33, 33, 33, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 101, 101, 102, 102,
	16, 20, 23, 23, 23, 23, 23, 235, 235, 44,
	44, 44, 44, 45, 45, 114, 114, 114, 114, 114,
	39, 6, 6, 38, 38, 14, 14, 14, 14, 14,
	50, 50, 107, 107, 107, 109, 109, 108, 108, 108,
	87, 87, 25, 78, 78, 79, 79, 156, 80, 80,
	19, 19, 28, 28, 26, 26, 26, 26, 26, 26,
	27, 27, 29, 29, 29, 29, 29, 29, 29, 211,
	211, 211, 213, 213, 210, 15, 15, 15, 15, 212,
	212, 234, 234, 88, 88, 88, 59, 58, 58, 62,
	62, 61, 63, 63, 148, 85, 85, 85, 85, 103,
	104, 104, 105, 105, 106, 106, 84, 84, 132, 132,
	30, 30, 69, 69, 70, 70, 123, 123, 124, 124,
	122, 122, 122, 151, 151, 151, 151, 152, 152, 152,
	152, 152, 152, 146, 146, 146, 146, 147, 147, 157,
	157, 91, 91, 91, 91, 89, 89, 90, 90, 153,
	153, 153, 153, 86, 86, 154, 154, 154, 118, 118,
	160, 160, 160, 68, 68, 68, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 162, 162, 162,
	162, 164, 164, 164, 163, 163, 163, 163, 163, 163,
	163, 163, 163, 163, 163, 163, 163, 165, 165, 172,
	172, 173, 173, 174, 175, 166, 166, 167, 167, 168,
	169, 176, 176, 176, 176, 178, 178, 170, 170, 170,
	170, 170, 171, 97, 97, 97, 97, 97, 97, 97,
	97, 97, 97, 97, 97, 97, 97, 98, 98, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 126, 126, 126, 126, 126, 126, 126, 126,
	126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
	126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 206, 206, 206, 206, 206, 206, 206, 208,
	208, 209, 209, 207, 207, 207, 207, 207, 207, 207,
	207, 207, 207, 207, 207, 207, 207, 207, 207, 207,
	207, 207, 207, 207, 207, 207, 207, 207, 214, 214,
	215, 215, 216, 216, 217, 217, 219, 220, 220, 220,
	221, 225, 225, 218, 218, 222, 222, 222, 223, 223,
	224, 224, 224, 224, 224, 136, 136, 136, 137, 137,
	138, 75, 75, 134, 134, 133, 133, 133, 135, 135,
	92, 177, 177, 177, 177, 177, 177, 177, 93, 93,
	99, 94, 94, 95, 95, 95, 95, 95, 95, 129,
	130, 96, 96, 96, 131, 131, 139, 143, 143, 142,
	141, 141, 140, 140, 121, 121, 121, 121, 120, 119,
	81, 81, 236, 236, 144, 144, 82, 82, 83, 77,
	77, 155, 155, 155, 155, 71, 71, 52, 52, 72,
	72, 48, 48, 51, 49, 49, 49, 49, 66, 66,
	67, 67, 46, 46, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 179, 179, 179, 41, 41,
	41, 42, 42, 43, 43, 185, 185, 185, 186, 186,
	186, 186, 184, 184, 184, 184, 184, 190, 190, 190,
	190, 190, 190, 190, 190, 190, 190, 190, 190, 190,
	190, 190, 190, 190, 190, 190, 190, 190, 190, 190,
	190, 190, 190, 190, 190, 190, 190, 190, 190, 190,
	190, 190, 190, 190, 190, 190, 190, 190, 190, 190,
	190, 190, 190, 190, 190, 190, 190, 190, 190, 190,
	190, 190, 190, 190, 190, 190, 190, 190, 190, 190,
	190, 190, 190, 190, 190, 190, 190, 190, 190, 190,
	190, 190, 190, 190, 190, 190, 190, 190, 190, 190,
	190, 190, 190, 190, 190, 190, 190, 190, 190, 190,
	190, 190, 190, 190, 190, 190, 190, 190, 190, 190,
	192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
	192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
	192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
	192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
	192, 192, 192, 192, 192, 191, 191, 191, 191, 191,
	191, 191, 191, 191, 191, 191, 191, 191, 193, 193,
	193, 193, 193, 193, 193, 193, 193, 193, 193, 193,
	193, 193, 193, 193, 193, 193, 193, 193, 193, 193,
	193, 193, 193, 193, 193, 193, 193, 193, 193, 193,
	193, 193, 193, 193, 193, 193, 193, 193, 193, 193,
	193, 193, 193, 193, 193, 193, 193, 193, 193, 193,
	193, 193, 193, 193, 193, 193, 193, 193, 193, 193,
	193, 193, 193, 193, 193, 193, 193, 193, 193, 193,
	193, 193, 193, 193, 193, 193, 193,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 4, 6, 1, 3, 2, 5, 3, 6,
	4, 6, 6, 6, 4, 8, 2, 3, 3, 6,
	4, 3, 2, 1, 1, 0, 2, 0, 2, 0,
	1, 1, 1, 6, 3, 5, 4, 6, 4, 6,
	1, 3, 1, 2, 2, 3, 2, 5, 1, 1,
	1, 1, 1, 1, 3, 1, 6, 6, 1, 2,
	2, 1, 1, 1, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 2, 3, 6, 3, 2, 1,
	1, 1, 3, 3, 2, 3, 3, 3, 3, 1,
	3, 3, 2, 1, 1, 3, 1, 1, 1, 2,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 1, 1, 1, 1, 1, 0,
	1, 1, 2, 2, 4, 2, 4, 4, 4, 4,
	3, 3, 4, 3, 2, 4, 2, 0, 2, 0,
	2, 0, 6, 9, 1, 0, 1, 3, 1, 1,
	1, 1, 3, 2, 0, 3, 1, 2, 2, 1,
	1, 2, 4, 2, 5, 6, 7, 5, 3, 1,
	4, 5, 5, 10, 1, 1, 4, 0, 3, 0,
	2, 2, 2, 0, 1, 1, 2, 2, 0, 3,
	3, 2, 1, 1, 2, 2, 1, 2, 1, 4,
	10, 13, 1, 0, 1, 3, 3, 3, 5, 1,
	3, 1, 2, 0, 1, 1, 0, 6, 6, 8,
	6, 8, 8, 10, 8, 10, 1, 0, 2, 0,
	2, 2, 3, 3, 2, 2, 2, 1, 0, 1,
	3, 2, 0, 2, 1, 1, 1, 3, 3, 0,
	3, 4, 7, 3, 0, 6, 6, 8, 5, 7,
	1, 3, 1, 4, 2, 8, 5, 4, 3, 0,
	2, 0, 8, 1, 3, 1, 1, 3, 5, 5,
	1, 1, 3, 3, 1, 2, 3, 2, 3, 4,
	1, 1, 8, 8, 1, 2, 4, 4, 4, 2,
	2, 3, 1, 3, 6, 1, 1, 1, 1, 1,
	0, 1, 0, 1, 1, 0, 1, 1, 0, 1,
	0, 3, 1, 3, 2, 2, 2, 1, 1, 2,
	2, 3, 1, 1, 1, 1, 3, 0, 2, 0,
	2, 3, 2, 0, 1, 3, 3, 1, 1, 3,
	2, 4, 0, 4, 2, 1, 4, 3, 4, 5,
	4, 5, 4, 5, 2, 4, 1, 1, 0, 5,
	0, 2, 2, 2, 1, 1, 0, 4, 2, 1,
	2, 2, 4, 1, 3, 1, 2, 3, 2, 0,
	2, 5, 2, 3, 4, 0, 1, 1, 1, 1,
	2, 4, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 5, 0, 1, 1, 1, 1, 1, 1,
	2, 2, 2, 2, 2, 1, 1, 3, 0, 1,
	1, 1, 1, 5, 2, 1, 1, 1, 1, 4,
	1, 2, 2, 1, 1, 1, 0, 1, 1, 4,
	1, 4, 1, 1, 1, 1, 1, 1, 1, 3,
	3, 3, 3, 3, 3, 3, 0, 1, 4, 1,
	3, 3, 5, 2, 2, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 2, 2, 3,
	4, 4, 5, 3, 4, 3, 3, 4, 3, 4,
	3, 4, 5, 6, 6, 7, 6, 7, 6, 7,
	3, 4, 1, 3, 2, 2, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 5, 6, 6, 7,
	1, 1, 1, 3, 1, 1, 1, 2, 2, 2,
	1, 1, 3, 5, 6, 8, 6, 6, 4, 4,
	1, 1, 1, 5, 1, 3, 1, 3, 1, 1,
	1, 1, 6, 4, 4, 4, 4, 6, 5, 5,
	5, 4, 8, 6, 6, 4, 4, 4, 5, 0,
	5, 0, 2, 0, 1, 3, 3, 2, 2, 0,
	6, 1, 0, 3, 0, 2, 2, 0, 1, 4,
	2, 2, 2, 2, 2, 4, 3, 5, 4, 3,
	5, 1, 3, 1, 3, 3, 3, 2, 1, 3,
	3, 1, 1, 1, 1, 1, 1, 1, 4, 3,
	2, 3, 0, 3, 3, 2, 2, 1, 0, 2,
	2, 3, 2, 1, 1, 3, 5, 1, 2, 4,
	2, 0, 1, 0, 1, 1, 3, 5, 2, 2,
	1, 2, 1, 0, 1, 1, 1, 3, 3, 1,
	3, 3, 2, 1, 1, 1, 3, 1, 3, 1,
	3, 1, 2, 3, 1, 2, 2, 1, 1, 3,
	3, 0, 1, 2, 1, 1, 1, 1, 6, 2,
	3, 5, 1, 1, 1, 1, 2, 2, 1, 1,
	1, 1, 0, 3, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -9, -10, -11, -13,
	-14, -17, -18, -20, -19, -21, -22, -23, -16, -24,
	-25, 19, -6, -7, -8, -212, 83, 90, 105, 192,
	199, -26, -28, 207, 208, 29, 215, 52, 86, 194,
	189, 235, 58, -211, -29, -27, 281, 256, 262, 202,
	-30, 222, 249, 284, 222, 70, 116, 78, 120, 243,
	242, 70, 116, 222, -12, 281, -19, -14, -25, -9,
	-11, -230, 18, -231, -232, 58, 83, 105, 202, 120,
	78, 242, -230, -45, 199, -41, 4, -190, -192, 16,
	17, 19, 28, 29, 33, 37, 40, 51, 52, 53,
	55, 57, 60, 61, 68, 69, 70, 71, 73, 78,
	82, 83, 85, 90, 95, 96, 99, 101, 106, 111,
	112, 117, 120, 128, 130, 131, 136, 139, 142, 144,
	145, 146, 147, 148, 150, 151, 153, 155, 152, 158,
	160, 161, 167, 170, 173, 174, 177, 180, 181, 182,
	184, 185, 189, 187, 188, 190, 192, 194, 195, 197,
	200, 201, 204, 205, 207, 208, 210, 212, 214, 215,
	218, 216, 221, 223, 224, 231, 235, 236, 237, 238,
	241, 242, 243, 246, 247, 248, 252, 257, 258, 259,
	260, 30, 31, 32, 34, 35, 38, 39, 43, 44,
	45, 47, 72, 74, 75, 89, 91, 97, 107, 109,
	113, 114, 121, 122, 123, 125, 134, 157, 159, 168,
	172, 176, 178, 183, 196, 203, 211, 217, 219, 226,
	227, 228, 232, 233, 249, 250, -111, 139, 205, 231,
	-112, -110, -183, 226, 148, -73, -41, 199, 4, 70,
	51, 71, 106, 116, 117, 131, 223, 226, 231, 18,
	58, -235, 231, 231, -235, -235, -44, 231, 229, -45,
	-234, 222, 222, -100, 70, 240, -27, -29, -28, -61,
	-62, 239, 124, 88, 166, -26, -28, -211, -213, 184,
	-210, -41, -213, -58, -59, 18, 80, 285, -153, -48,
	164, -41, -83, 281, -3, -153, 113, -41, -51, 113,
	-48, 103, 126, 126, -154, -153, -41, 113, -52, 113,
	-51, -74, 113, -73, -159, -158, -186, 4, -190, -192,
	-191, 249, 49, 59, 104, 119, 127, 129, 135, 137,
	149, 169, 171, 193, 209, 163, 285, 163, -41, -111,
	45, -111, -113, -39, -40, 128, 180, 229, 266, 103,
	260, -55, 5, 76, -76, 283, 103, -227, 163, 103,
	103, 103, -182, 103, 260, 128, 180, 222, -114, -39,
	-40, -114, 229, -45, -86, -153, -73, 113, 116, -41,
	113, -61, -62, -85, -103, -104, 138, 162, -88, 18,
	80, -88, -88, 37, 282, 282, 285, -213, -67, 281,
	-77, -155, -125, 274, -127, 272, 273, 278, 154, 261,
	-136, -48, -128, 9, 281, -139, -208, -28, 89, 24,
	-137, -138, 196, -41, 7, 8, 5, 6, -46, -162,
	-171, 234, 92, 156, 41, -206, -207, 4, -190, -185,
	-163, -173, -167, -170, 125, 49, 63, 66, 64, 67,
	206, 244, 42, 91, 172, 176, 219, 232, 233, 113,
	157, 114, 47, 107, 134, 82, 31, 32, 34, 35,
	43, 44, 72, 74, 75, 97, 121, 122, 123, 159,
	183, 211, 217, 227, 228, 250, -191, -174, -175, -168,
	-169, -176, -77, -83, 274, -48, 281, -81, -121, -120,
	-119, 279, 283, -82, -144, -125, 76, -35, 187, -34,
	17, 19, 83, 247, 89, 187, 187, 89, 286, -154,
	-50, -48, -50, 207, -41, 25, 89, -37, 285, 40,
	190, 89, -37, 285, 89, 282, 285, -226, -72, 222,
	70, -49, -41, 274, -232, -226, 25, 285, 285, 136,
	-54, 142, 153, 111, -181, 76, -188, -180, -145, 9,
	234, 92, 163, -187, 8, 273, -179, -186, 5, 7,
	272, -181, 76, 61, -189, 5, 4, -171, -145, 76,
	139, 125, 283, -184, 4, -190, -192, -191, -193, 18,
	20, 21, 22, 23, 24, 25, 26, 27, 36, 41,
	42, 46, 48, 50, 56, 58, 62, 63, 64, 65,
	66, 67, 76, 77, 79, 80, 81, 84, 86, 88,
	92, 93, 94, 100, 102, 103, 105, 108, 110, 115,
	116, 118, 124, 126, 132, 133, 138, 140, 141, 154,
	156, 162, 163, 164, 165, 166, 175, 179, 186, 191,
	202, 206, 213, 220, 222, 225, 229, 230, 234, 239,
	240, 244, 245, 251, 253, 254, 255, 256, -183, -229,
	100, -226, -183, -183, -183, -183, 136, -183, 285, 285,
	-45, -37, 285, 281, 154, -42, 113, -41, -38, 85,
	154, -85, -104, -103, -105, -125, 18, -125, -127, -27,
	-27, -27, -63, -148, -125, -210, 25, -66, -41, -69,
	285, 103, 10, 48, 28, 272, 273, 274, 275, 98,
	276, 269, 270, 271, 268, 264, 265, 266, 54, 143,
	198, 12, 13, 14, 22, 165, 137, 261, 209, 127,
	30, 115, 25, 4, -125, -125, -125, -125, -125, 171,
	-28, -125, -75, -81, -28, -133, 279, 281, -81, 281,
	5, 5, 281, -140, -125, -214, 257, 100, 281, 281,
	281, 281, 281, 281, 281, 281, 281, 281, 281, 281,
	281, 281, 281, 178, -178, 252, -178, -178, -164, 281,
	-164, -165, 281, -164, 258, 262, 281, -69, -48, -121,
	-125, -184, 274, 285, 282, 285, 229, -101, 56, 50,
	-116, 113, 50, -194, -41, 56, -195, 46, 240, 179,
	102, -101, 56, -101, 56, 56, -153, 229, 229, -51,
	-41, -118, 254, -107, -19, 281, 76, 25, -107, -78,
	-79, -156, -80, -48, 281, -41, -41, -51, -52, -73,
	-74, -12, -158, 229, 285, -72, -66, -120, -119, 103,
	231, -40, -39, -53, 182, 212, 188, 204, 285, 8,
	7, 7, 5, -184, -228, -41, -40, -39, -153, -56,
	-57, -117, -116, -196, -197, -194, 116, 240, 93, 89,
	163, 154, 266, 89, -106, 196, 197, 285, -33, 26,
	79, 281, 285, 282, -118, -155, -70, -151, -153, -28,
	-152, 281, -160, -161, -163, -172, -166, -170, -171, 33,
	39, 38, 224, 203, 121, 122, 123, 211, 31, 183,
	97, 82, 75, 74, 159, 35, 34, -174, -175, -168,
	-169, 72, 227, 228, 32, 44, 43, 250, 217, -73,
	226, -125, -125, -125, -125, -125, -125, -125, -125, -125,
	-125, -125, -125, -125, -125, -125, -125, -125, -125, -125,
	-125, -125, -125, 137, 209, 30, 115, 229, 156, 154,
	234, 92, 241, 80, 160, -236, 220, 27, -131, -28,
	281, -184, -136, 196, 281, 282, 285, -75, -135, 280,
	-125, -133, -75, 282, 282, -75, 251, 18, 80, 274,
	-97, 259, 146, 73, 112, 145, -98, 201, 7, -143,
	-142, 253, -215, 95, 108, 281, 282, 282, -125, -92,
	-177, 4, 259, 146, 73, 112, 145, 201, -93, -125,
	-94, -126, -127, 272, 273, 278, 281, 196, -95, -125,
	-75, -125, 36, 133, 230, -96, -125, 103, -75, -125,
	-125, -125, -75, -75, -75, 281, 7, 7, 226, 226,
	7, -118, 282, 280, 289, -144, -34, -48, -41, -41,
	154, -116, 113, -160, -41, 281, 281, 130, 130, -41,
	-41, 113, -41, 113, -41, -41, -35, 187, -41, -41,
	187, -87, 191, -125, -87, -109, 163, -71, -48, 249,
	-41, 191, -69, 285, 266, -71, -37, -37, -228, -49,
	-228, -39, 238, 53, 182, -188, -97, 285, 282, 285,
	-42, 116, -42, -73, -48, 89, 5, -41, -148, -15,
	-19, -14, -25, -9, -41, -84, 108, 285, 59, -91,
	129, 149, 104, 135, 193, 119, -122, 286, -147, -146,
	25, -41, -28, -152, -151, -68, 24, -97, 281, 260,
	-125, 229, -236, 220, -131, -125, 156, 234, 92, 241,
	80, 160, 103, 281, -126, -126, -75, 281, -75, -125,
	285, 280, 280, 285, 282, -62, 285, -61, -125, -75,
	-75, 282, 229, 229, 229, 229, 281, 282, -141, -142,
	84, -125, -220, 170, 281, 281, -125, 25, 282, 103,
	282, -99, 175, 282, 10, 272, 273, 274, 275, 98,
	276, 269, 270, 271, 268, 264, 265, 266, 54, 143,
	198, 12, 13, 14, 127, 115, -126, -126, -126, -75,
	281, 282, -129, -130, 103, 100, 25, -96, -96, -96,
	282, 103, -75, 285, 285, 285, 282, 282, 282, 7,
	282, 285, 282, 260, 260, 282, -84, -125, 229, 229,
	89, 154, -198, -195, -125, -66, 281, 281, -32, 83,
	207, -102, 89, -37, 89, -37, 229, -101, 56, 229,
	-77, 191, 55, 282, 285, -77, -118, -79, -144, 282,
	-41, -117, 281, -42, 281, 281, 281, -41, -38, 282,
	-132, 110, 37, -151, 129, 129, -151, -91, 129, -89,
	169, -89, -89, -147, -184, 287, -41, 281, 282, 279,
	279, 7, -125, -125, -126, -126, 103, 281, -125, -134,
	-160, 22, 22, 282, -75, 282, 285, 282, -125, -133,
	282, 251, -62, -62, -62, 146, 112, 145, -98, 145,
	-98, -98, 7, 5, 86, -125, 225, -221, -41, 281,
	254, -61, 282, -160, -125, -129, -125, -160, -126, -126,
	-126, -126, -126, -126, -126, -126, -126, -126, -126, -126,
	-126, -126, -126, -126, -126, -126, -126, 80, 154, 160,
	-126, 285, -75, 282, -130, -129, -125, -125, -160, 282,
	282, 282, -75, -125, -125, -125, 282, 7, -132, 280,
	-41, -41, -116, 89, -199, 56, -200, 48, 154, 156,
	240, 179, 46, 76, 186, 282, 282, -66, -66, 154,
	76, 154, 76, 69, 236, -41, -41, -48, -41, -41,
	-41, -77, -108, 281, 163, -19, -48, -87, 266, -64,
	-149, -41, -209, 281, -206, -207, -46, 281, -65, -150,
	-41, -56, -64, 163, -216, 255, -125, -75, -151, -151,
	-90, 245, 163, 129, -151, -157, 263, -124, -123, 101,
	152, 281, -66, -146, 280, 7, 7, 282, 22, 22,
	-125, -134, 282, 285, -125, -125, 282, -125, 5, -125,
	282, 282, 282, 282, -125, -225, -41, -125, 282, 282,
	-130, 103, 80, 160, 281, -125, 282, 282, 285, 282,
	282, 282, -216, -116, -41, -73, 156, 130, 281, -126,
	-48, -115, -233, 57, 218, 282, 282, 156, 156, -125,
	-160, -37, -37, 229, 229, 81, -66, 56, -83, -28,
	281, 282, 285, -47, -81, 48, -47, -125, 281, -64,
	282, 285, 282, 282, -48, -217, -219, -41, -90, 281,
	-125, -151, 160, 285, 288, 266, -66, 282, 280, 280,
	-125, -125, 282, -160, 282, -62, -218, 174, 282, -126,
	103, 281, -134, 282, -125, -200, -125, -43, 281, 281,
	186, -36, 48, -41, -41, 242, 155, 282, -41, -115,
	-149, -33, -73, -33, 282, -75, 282, -150, -115, 281,
	285, 25, -66, 221, -123, -184, 282, 282, -62, 37,
	-126, -134, 282, 282, 282, -203, 144, -41, -66, -48,
	-31, 245, -73, 207, -118, -47, -62, -115, -64, -219,
	-221, 282, 226, -222, 181, 197, -75, 282, -201, -204,
	-202, 163, 104, 173, 210, 282, 282, -60, 281, -125,
	-78, -33, 282, 282, 5, 282, -223, -224, 30, 237,
	61, -125, -223, -202, 163, -204, 163, 242, 78, -203,
	-66, -118, -115, -224, 177, 99, 196, 177, 99, -205,
	151, 190, 40, 207, -205, -201, 282, 22, 16, 156,
	76, -224,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 0, 50, 51, 52, 0, 0, 330, 0, 0,
	0, 300, -2, 0, 0, 258, 0, 258, 258, 262,
	0, 332, 223, 329, -2, 340, 0, 0, 0, 338,
	314, 0, 0, -2, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 66, 0, 68, 69, 70, 71,
	72, 0, 81, 82, 83, 85, 86, 87, 88, 89,
	90, 91, 0, 251, 838, 264, 748, 749, 750, 767,
	768, 769, 770, 771, 772, 773, 774, 775, 776, 777,
	778, 779, 780, 781, 782, 783, 784, 785, 786, 787,
	788, 789, 790, 791, 792, 793, 794, 795, 796, 797,
	798, 799, 800, 801, 802, 803, 804, 805, 806, 807,
	808, 809, 810, 811, 812, 813, 814, 815, 816, 817,
	818, 819, 820, 821, 822, 823, 824, 825, 826, 827,
	828, 829, 830, 831, 832, 833, 834, 835, 836, 837,
	839, 840, 841, 842, 843, 844, 845, 846, 847, 848,
	849, 850, 851, 852, 853, 854, 855, 856, 857, 858,
	859, 860, 861, 862, 863, 864, 865, 866, 867, 868,
	869, 870, 871, 872, 873, 874, 875, 876, 877, 878,
	879, 880, 881, 882, 883, 884, 885, 886, 887, 888,
	889, 890, 891, 892, 893, 894, 895, 896, 897, 898,
	899, 900, 901, 902, 903, 904, 905, 906, 907, 908,
	909, 910, 911, 912, 913, 914, 94, 805, 842, 854,
	99, 109, 0, 908, -2, 113, 62, 838, 142, 143,
	0, 145, 159, 0, 0, 0, 157, 0, 0, 154,
	0, 269, 257, 269, 254, 255, 256, 259, 0, 250,
	0, 331, 0, 0, 0, 222, -2, 310, 311, -2,
	0, 335, 335, 335, 0, 0, 311, 0, 319, 828,
	322, 731, 320, 0, 0, 337, 336, 0, 315, 399,
	0, 721, 360, 0, 2, 0, 889, 0, 0, 889,
	0, 0, 0, 0, 0, 405, 54, 889, 45, 889,
	717, 45, 889, 60, 0, 73, 75, 758, 759, 760,
	761, 913, 915, 916, 917, 918, 919, 920, 921, 922,
	923, 924, 925, 926, 927, 0, 0, 0, 263, 95,
	879, 97, 98, 100, 101, 0, 0, 0, 0, 0,
	0, 112, 137, 138, 63, 0, 0, 161, 0, 0,
	0, 0, 150, 0, 151, 0, 153, 0, 252, 265,
	266, 253, 0, 261, 45, 403, 0, 889, 752, 274,
	889, -2, 0, 306, 347, 348, 0, 0, 0, 333,
	334, 0, 0, 0, 302, 303, 0, 321, 0, 0,
	363, 709, 713, 714, 489, 0, 0, 0, 0, 0,
	0, 570, 571, 572, 0, 574, 575, 576, 884, 0,
	580, 581, 903, 721, 734, 735, 736, 737, 0, 0,
	0, 742, 743, 744, 693, 619, 590, -2, -2, 732,
	427, 428, 429, 430, -2, 915, 594, 596, 598, 599,
	600, 601, 0, 885, 899, 900, 907, 911, 912, 889,
	896, 890, 880, 887, 895, 788, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, 757, 451, 452, 457,
	458, 460, 363, 361, 400, 401, 0, 722, 700, 694,
	695, 0, 0, 0, 706, 704, 705, 22, 247, 24,
	0, 247, 247, 0, 0, 0, 0, 0, 0, 409,
	0, 280, 0, 0, 406, 0, 0, 56, 0, 43,
	44, 0, 58, 0, 0, 330, 0, 0, 78, 0,
	784, 719, 724, 727, 84, 0, 0, 0, 0, 0,
	104, 124, 125, 126, 105, 107, 114, 116, 117, 118,
	127, 128, 129, 130, 216, 0, 218, 140, 141, 745,
	0, 106, 108, 110, 111, 131, 132, 0, 134, 135,
	136, 472, 0, 64, 762, 763, 764, 765, 766, 928,
	929, 930, 931, 932, 933, 934, 935, 936, 937, 938,
	939, 940, 941, 942, 943, 944, 945, 946, 947, 948,
	949, 950, 951, 952, 953, 954, 955, 956, 957, 958,
	959, 960, 961, 962, 963, 964, 965, 966, 967, 968,
	969, 970, 971, 972, 973, 974, 975, 976, 977, 978,
	979, 980, 981, 982, 983, 984, 985, 986, 987, 988,
	989, 990, 991, 992, 993, 994, 995, 996, 997, 998,
	999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 144, 146,
	0, 158, 147, 148, 149, 156, 152, 155, 0, 0,
	260, 219, 0, 165, 0, 0, 889, 751, 271, 0,
	0, 309, 345, 346, 349, 352, 353, 350, 489, 316,
	317, 318, 341, 342, 236, 323, 0, 0, 728, 409,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	703, 0, 0, 712, 493, 494, 495, 517, 518, 0,
	-2, 651, 0, 577, 578, 579, 0, 0, -2, 0,
	739, 486, 0, 0, 692, 621, 0, 0, 0, 0,
	0, 0, 0, 672, 678, 0, 0, 0, 0, 0,
	0, 0, 0, 441, 454, 465, 462, 461, 443, 0,
	442, 440, 0, 444, 0, 0, 0, 409, 0, 701,
	0, 698, 699, 0, 708, 0, 0, 0, 0, 246,
	26, 889, 0, 36, 0, 0, 189, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	723, 291, 0, 291, 282, 0, 0, 0, 278, 363,
	293, 295, 296, 0, 0, 407, 55, 718, 45, 61,
	45, 67, 74, 0, 0, 79, 80, 725, 726, 0,
	0, 102, 103, 270, 0, 121, 0, 123, 0, 217,
	747, 746, 486, 65, 160, 92, 267, 268, 404, 0,
	164, 166, 168, 169, 170, 171, 752, 0, 752, 0,
	0, 0, 0, 0, 351, 354, 355, 0, 344, 234,
	235, 330, 0, 730, 357, 710, 362, 364, 372, 388,
	375, 0, 490, 415, 416, 417, 418, 419, 486, 422,
	423, 424, 425, 426, 434, 435, 436, 437, 438, 439,
	448, 0, 433, 433, 433, 445, 446, 449, 450, 455,
	456, 467, 468, 470, 466, 466, 466, 463, 464, 491,
	0, 496, 497, 498, 499, 500, 501, 502, 503, 504,
	505, -2, -2, -2, 509, 510, 511, -2, -2, -2,
	515, 516, -2, 0, 0, 703, 0, 0, 523, 0,
	526, 528, 530, 0, 0, 0, 0, 702, 540, 684,
	0, 711, 525, 0, 0, 573, 0, 0, 0, 657,
	651, 658, 0, -2, 582, 340, 0, 0, 0, 0,
	740, 473, 474, 475, 476, 477, 478, 487, 0, 691,
	687, 0, 629, 0, 0, 0, 595, 597, 0, 0,
	0, 661, 662, 663, 664, 665, 666, 667, 0, 0,
	0, 0, 542, 0, 0, 0, 0, 903, 0, 651,
	677, 0, 0, 0, 0, 0, 651, 0, 683, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 357, 402, 696, 0, 707, 25, 238, 0, 0,
	0, 28, 889, 174, 0, 0, 0, 0, 0, 249,
	37, 889, 45, 889, 45, 38, 23, 247, 237, 240,
	0, 53, 0, 408, 275, 276, 0, 0, 715, 284,
	281, 0, 409, 0, 0, 0, 57, 59, 76, 720,
	77, 96, 119, 120, 122, 115, 133, 0, 162, 0,
	0, 752, 0, 0, 0, 0, 273, 274, 343, 0,
	325, 326, 327, 328, 729, 359, 0, 0, 0, 0,
	0, 0, 396, 396, 396, 394, 388, 0, 374, 387,
	0, 386, -2, 375, 0, 410, 412, 420, 0, 0,
	-2, 0, 0, 0, 541, -2, 524, 527, 529, 531,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 652,
	0, 655, 656, 0, -2, 0, 0, 339, 340, 340,
	340, 588, 0, 0, 0, 0, 0, 0, 0, 688,
	0, 0, 589, 0, 0, 0, 0, 0, 603, 0,
	604, 0, 0, 605, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 544, 545, 546, 0,
	0, 606, 675, 676, 0, 0, 0, 0, 0, 0,
	611, 0, 682, 0, 0, 0, 615, 616, 617, 0,
	431, 0, 447, 469, 471, 459, 359, 0, 0, 0,
	0, 0, 172, 188, 0, 0, 0, 0, 30, 0,
	0, 0, 0, 34, 0, 40, 0, 0, 0, 0,
	290, 0, 289, 0, 0, 279, 291, 294, 297, 0,
	93, 167, 0, 0, 0, 165, 0, 0, 272, 324,
	623, 0, 0, 365, 0, 0, 0, 0, 0, 391,
	395, 392, 393, 390, 370, 0, 384, 0, 377, 0,
	0, 0, 492, -2, 0, 0, 0, 0, -2, 0,
	653, 0, 0, 685, 0, 646, 0, -2, 652, 659,
	583, 0, 0, 0, 0, 479, 480, 481, 482, 483,
	484, 485, 0, 741, 686, 690, 0, 627, 628, 632,
	0, 0, 593, 0, 660, 669, 670, 543, 547, 548,
	549, 550, 551, 552, 553, 554, 555, 556, -2, -2,
	-2, 560, 561, 562, -2, -2, -2, 0, 0, 0,
	671, 0, 0, 649, 673, 674, 679, 680, 0, 608,
	609, 610, 681, 0, 0, 0, 453, 0, 623, 697,
	242, 244, 27, 0, 173, 0, 176, 0, 0, 179,
	180, 0, 0, 0, 0, 190, 197, 0, 0, 0,
	42, 0, 0, 248, 0, 45, 45, 239, 0, 0,
	241, 277, 0, 0, 0, 283, 716, 292, 0, 0,
	224, 233, 233, 0, 591, 592, 0, 0, 0, 229,
	231, 0, 0, 0, 312, 0, 358, 356, 378, 0,
	380, 0, 0, 0, 382, 373, 0, 0, 368, 0,
	367, 0, 0, 376, 413, 0, 0, 421, 0, 0,
	-2, 0, 534, 0, -2, -2, 645, 652, 738, 340,
	584, 586, 587, 488, 689, 634, 631, 0, 618, 602,
	668, 0, 0, 0, 0, 652, 648, 607, 0, 613,
	614, 432, 313, 29, 0, 177, 178, 181, 0, 183,
	754, 191, 0, 194, 195, 192, 0, 31, 32, 41,
	47, 33, 39, 0, 0, 0, 0, 0, 298, 299,
	0, 197, 0, 236, 733, 0, 236, 0, 0, 0,
	187, 0, 163, 197, 0, 622, 624, 0, 379, 0,
	398, 381, 0, 0, 371, 0, 0, 385, 414, 411,
	-2, -2, 535, 654, 647, 0, 340, 0, 620, -2,
	0, 0, 0, 650, 0, 175, 0, 203, 0, 0,
	0, 49, 0, 243, 245, 0, 286, 409, 288, 185,
	225, 226, 232, 227, 233, 340, 197, 230, 220, 0,
	0, 0, 0, 0, 369, 366, 383, 585, 637, 0,
	-2, 0, 568, 612, 182, 208, 0, 0, 0, 199,
	35, 0, 46, 0, 287, 236, 0, 186, 0, 625,
	626, 397, 0, 0, 0, 0, 633, 569, 184, 204,
	205, 0, 200, 201, 202, 753, 196, 203, 0, 48,
	409, 228, 583, 197, 389, 630, 635, 638, -2, 857,
	781, 0, 636, 206, 0, 207, 0, 0, 0, 208,
	0, 285, 221, 0, 640, 641, 642, 643, 644, 209,
	0, 212, 213, 0, 210, 193, 198, 0, 211, 214,
	215, 639,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 270, 3, 276, 271, 3,
	281, 282, 274, 272, 285, 273, 283, 275, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 289, 284,
	264, 266, 265, 3, 286, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 279, 3, 280, 269, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 287, 268, 288, 278,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 267, 57607, 277, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:679
		{
			sqllex.(*scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:685
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:691
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 14:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:711
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 21:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:721
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 22:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:727
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.qname(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 23:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:731
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.qname(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 24:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:737
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 25:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:741
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:748
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 27:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:753
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 28:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:758
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 29:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:763
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 30:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:768
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: sqlDollar[3].str, Default: sqlDollar[4].union.expr()}
		}
	case 31:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:773
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: sqlDollar[3].str}
		}
	case 32:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:777
		{
			unimplemented()
		}
	case 33:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:780
		{
			sqlVAL.union.val = &AlterTableDropColumn{columnKeyword: sqlDollar[2].union.bool(), IfExists: true, Column: sqlDollar[5].str}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:785
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        sqlDollar[3].str,
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:795
		{
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:798
		{
			sqlVAL.union.val = &AlterTableAddConstraint{ConstraintDef: sqlDollar[2].union.constraintDef()}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:802
		{
			unimplemented()
		}
	case 38:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:804
		{
			unimplemented()
		}
	case 39:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:807
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   sqlDollar[5].str,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:816
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   sqlDollar[3].str,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 41:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:826
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:830
		{
			sqlVAL.union.val = nil
		}
	case 43:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:836
		{
			sqlVAL.union.val = DropCascade
		}
	case 44:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:840
		{
			sqlVAL.union.val = DropRestrict
		}
	case 45:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:844
		{
			sqlVAL.union.val = DropDefault
		}
	case 46:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:849
		{
			unimplementedWithIssue(2473)
		}
	case 47:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:850
		{
		}
	case 48:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:853
		{
			unimplemented()
		}
	case 49:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:854
		{
		}
	case 53:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:865
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retExprs()}
		}
	case 54:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:872
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 55:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:876
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 56:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:880
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 57:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:888
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 58:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:896
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.qnames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:900
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.qnames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:906
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:910
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 62:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:916
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:920
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:926
		{
			sqlVAL.union.val = Indirection{NameIndirection(sqlDollar[2].str)}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:930
		{
			sqlVAL.union.val = append(sqlDollar[1].union.indirect(), NameIndirection(sqlDollar[3].str))
		}
	case 66:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:937
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:941
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:947
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 73:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:957
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 74:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:961
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 76:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:971
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: NameList(sqlDollar[6].union.strs()), Targets: sqlDollar[4].union.targetList()}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:978
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: NameList(sqlDollar[6].union.strs()), Targets: sqlDollar[4].union.targetList()}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:985
		{
			sqlVAL.union.val = TargetList{Tables: QualifiedNames(sqlDollar[1].union.qnames())}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:989
		{
			sqlVAL.union.val = TargetList{Tables: QualifiedNames(sqlDollar[2].union.qnames())}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:993
		{
			sqlVAL.union.val = TargetList{Databases: NameList(sqlDollar[2].union.strs())}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1000
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1003
		{
		}
	case 83:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1007
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1011
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 85:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1018
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 86:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1022
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 87:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1026
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 88:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1030
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 89:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1034
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 90:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1038
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 91:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1042
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 92:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1050
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1054
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 94:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1062
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 95:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1066
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 96:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1070
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1074
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 98:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1080
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 100:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1087
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1091
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1095
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1099
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1106
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1112
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname(), Values: sqlDollar[3].union.exprs()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1116
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname(), Values: sqlDollar[3].union.exprs()}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1120
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname()}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1124
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1131
		{
			unimplemented()
		}
	case 111:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1134
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1137
		{
			unimplemented()
		}
	case 114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1144
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1148
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1156
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1162
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1166
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1170
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 122:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1174
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1178
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1184
		{
			sqlVAL.union.val = Low
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1188
		{
			sqlVAL.union.val = Normal
		}
	case 126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1192
		{
			sqlVAL.union.val = High
		}
	case 127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1198
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1202
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 129:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1206
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1221
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1225
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1229
		{
			d, err := ParseDInterval(sqlDollar[2].str)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1239
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1243
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1248
		{
			unimplemented()
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1249
		{
			unimplemented()
		}
	case 139:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1250
		{
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1254
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1258
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1264
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1268
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1272
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.qname()}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1276
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1280
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.strs()}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1284
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1288
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1292
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1296
		{
			sqlVAL.union.val = &ShowTables{Name: sqlDollar[3].union.qname()}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1300
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1304
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1308
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1312
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 155:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1316
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.qname()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1322
		{
			sqlVAL.union.val = sqlDollar[2].union.qname()
		}
	case 157:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1326
		{
			sqlVAL.union.val = (*QualifiedName)(nil)
		}
	case 158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1332
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 159:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1337
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1343
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 161:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1347
		{
			sqlVAL.union.val = []string(nil)
		}
	case 162:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1354
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.qname(), IfNotExists: false, Defs: sqlDollar[5].union.tblDefs()}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1358
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.qname(), IfNotExists: true, Defs: sqlDollar[8].union.tblDefs()}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1365
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1371
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1375
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1381
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1385
		{ /* unimplemented */
		}
	case 171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1387
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1393
		{
			sqlVAL.union.val = newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1399
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 174:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1403
		{
			sqlVAL.union.val = []ColumnQualification(nil)
		}
	case 175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1409
		{
			sqlVAL.union.val = sqlDollar[3].union.colQual()
		}
	case 177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1413
		{
			unimplemented()
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1429
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1433
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1437
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1441
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1445
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1449
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1453
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.qname(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1462
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.idxElems(),
				Storing: sqlDollar[6].union.strs(),
			}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1470
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:    Name(sqlDollar[3].str),
					Columns: sqlDollar[5].union.idxElems(),
					Storing: sqlDollar[7].union.strs(),
				},
			}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1482
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.famElems(),
			}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1494
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1499
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 190:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1505
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1511
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[3].union.strs()),
					Storing: sqlDollar[5].union.strs(),
				},
			}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1520
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[4].union.strs()),
				},
				PrimaryKey: true,
			}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1529
		{
			unimplemented()
		}
	case 196:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1546
		{
			sqlVAL.union.val = sqlDollar[3].union.strs()
		}
	case 197:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1550
		{
			sqlVAL.union.val = []string(nil)
		}
	case 198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1556
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 199:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1560
		{
			sqlVAL.union.val = []string(nil)
		}
	case 200:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1565
		{
			unimplemented()
		}
	case 201:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1566
		{
			unimplemented()
		}
	case 202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1567
		{
			unimplemented()
		}
	case 203:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1568
		{
		}
	case 204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1575
		{
			unimplemented()
		}
	case 205:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1576
		{
			unimplemented()
		}
	case 206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1577
		{
			unimplemented()
		}
	case 207:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1578
		{
			unimplemented()
		}
	case 208:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1579
		{
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1582
		{
			unimplemented()
		}
	case 210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1585
		{
			unimplemented()
		}
	case 211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1588
		{
			unimplemented()
		}
	case 212:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1589
		{
			unimplemented()
		}
	case 213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1590
		{
			unimplemented()
		}
	case 214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1591
		{
			unimplemented()
		}
	case 215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1592
		{
			unimplemented()
		}
	case 216:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1596
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1600
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1604
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 219:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1611
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.qnames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1618
		{
			sqlVAL.union.val = &CreateIndex{
				Name:    Name(sqlDollar[4].str),
				Table:   sqlDollar[6].union.qname(),
				Unique:  sqlDollar[2].union.bool(),
				Columns: sqlDollar[8].union.idxElems(),
				Storing: sqlDollar[10].union.strs(),
			}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql.y:1628
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.qname(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.strs(),
			}
		}
	case 222:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1641
		{
			sqlVAL.union.val = true
		}
	case 223:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1645
		{
			sqlVAL.union.val = false
		}
	case 224:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1651
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1655
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1664
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1667
		{
			unimplemented()
		}
	case 228:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1668
		{
			unimplemented()
		}
	case 229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1672
		{
			sqlVAL.union.val = FamilyElemList{sqlDollar[1].union.famElem()}
		}
	case 230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1676
		{
			sqlVAL.union.val = append(sqlDollar[1].union.famElems(), sqlDollar[3].union.famElem())
		}
	case 231:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1682
		{
			sqlVAL.union.val = FamilyElem{Column: Name(sqlDollar[1].str)}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1687
		{
			unimplemented()
		}
	case 233:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1688
		{
		}
	case 234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1692
		{
			sqlVAL.union.val = Ascending
		}
	case 235:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1696
		{
			sqlVAL.union.val = Descending
		}
	case 236:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1700
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 237:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1707
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1711
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.qname(), NewName: sqlDollar[6].union.qname(), IfExists: false}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1715
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.qname(), NewName: sqlDollar[8].union.qname(), IfExists: true}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1719
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 241:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1723
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 242:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1727
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.qname(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1731
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.qname(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 244:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1735
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 245:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1739
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 246:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1745
		{
			sqlVAL.union.val = true
		}
	case 247:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1749
		{
			sqlVAL.union.val = false
		}
	case 248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1754
		{
		}
	case 249:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1755
		{
		}
	case 250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1759
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1765
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1772
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1776
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1780
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1784
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1788
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1797
		{
		}
	case 258:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1798
		{
		}
	case 259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1802
		{
			sqlVAL.str = ""
		}
	case 260:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1806
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1810
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 262:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1814
		{
			sqlVAL.str = ""
		}
	case 263:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1820
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 264:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1824
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 265:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1830
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1834
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1838
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1842
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1846
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1852
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 271:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1858
		{
			sqlVAL.union.val = &CreateDatabase{Name: Name(sqlDollar[3].str), Encoding: sqlDollar[4].union.strVal()}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1862
		{
			sqlVAL.union.val = &CreateDatabase{IfNotExists: true, Name: Name(sqlDollar[6].str), Encoding: sqlDollar[7].union.strVal()}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1868
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1871
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 275:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1881
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retExprs()
		}
	case 276:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1887
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
		}
	case 277:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1892
		{
			unimplementedWithIssue(6637)
		}
	case 278:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1894
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1899
		{
			unimplementedWithIssue(6637)
		}
	case 280:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1907
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname()}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1911
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1917
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1921
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.qnames(), Rows: sqlDollar[4].union.slct()}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1925
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1931
		{
			sqlVAL.union.val = &OnConflict{Columns: NameList(sqlDollar[3].union.strs()), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1935
		{
			sqlVAL.union.val = &OnConflict{Columns: NameList(sqlDollar[3].union.strs()), DoNothing: true}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1941
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 288:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1945
		{
			unimplemented()
		}
	case 289:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1947
		{
			sqlVAL.union.val = []string(nil)
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1953
		{
			sqlVAL.union.val = sqlDollar[2].union.selExprs()
		}
	case 291:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1957
		{
			sqlVAL.union.val = SelectExprs(nil)
		}
	case 292:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1964
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retExprs()}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1970
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1974
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1984
		{
			sqlVAL.union.val = &UpdateExpr{Names: QualifiedNames{sqlDollar[1].union.qname()}, Expr: sqlDollar[3].union.expr()}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1996
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.qnames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2000
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.qnames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2044
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2050
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2054
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2069
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2073
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2077
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2081
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2085
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2089
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2123
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.tblExprs(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2135
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.tblExprs(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2147
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        TableExprs{&AliasedTableExpr{Expr: sqlDollar[2].union.qname()}},
				tableSelect: true,
			}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2155
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2164
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2173
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2191
		{
			unimplemented()
		}
	case 320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2192
		{
			unimplemented()
		}
	case 321:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2193
		{
			unimplemented()
		}
	case 322:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2196
		{
			unimplemented()
		}
	case 323:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2197
		{
			unimplemented()
		}
	case 324:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2200
		{
			unimplemented()
		}
	case 325:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2204
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 329:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2212
		{
			unimplemented()
		}
	case 330:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2213
		{
		}
	case 331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2216
		{
		}
	case 332:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2217
		{
		}
	case 333:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2221
		{
			sqlVAL.union.val = true
		}
	case 334:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2225
		{
			sqlVAL.union.val = false
		}
	case 335:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2229
		{
			sqlVAL.union.val = false
		}
	case 336:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2235
		{
			sqlVAL.union.val = true
		}
	case 337:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2240
		{
		}
	case 338:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2241
		{
		}
	case 339:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2245
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 340:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2249
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 341:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2255
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 342:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2261
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2265
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 344:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2271
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2279
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2288
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2299
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2312
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2319
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2326
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 354:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2340
		{
		}
	case 355:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2341
		{
		}
	case 356:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2367
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 357:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2371
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2377
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 359:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2381
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 360:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2387
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 361:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2391
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2403
		{
			sqlVAL.union.val = sqlDollar[2].union.tblExprs()
		}
	case 363:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2407
		{
			sqlVAL.union.val = TableExprs(nil)
		}
	case 364:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2413
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2417
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 366:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2423
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 367:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2428
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2434
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2439
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			index := a.Index
			if index == "" {
				index = b.Index
			} else if b.Index != "" {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			noIndexJoin := a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = &IndexHints{Index: index, NoIndexJoin: noIndexJoin}
		}
	case 370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2459
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2463
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 372:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2467
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 373:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2474
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), Hints: sqlDollar[2].union.indexHints(), As: sqlDollar[3].union.aliasClause(), AsOf: sqlDollar[4].union.asOfClause()}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2478
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, As: sqlDollar[2].union.aliasClause()}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2482
		{
			unimplemented()
		}
	case 377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2500
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 378:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2504
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2508
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2512
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2516
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astNaturalJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr()}
		}
	case 382:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2520
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astNaturalJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2526
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: NameList(sqlDollar[4].union.strs())}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2530
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2534
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: NameList(sqlDollar[3].union.strs())}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2538
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2545
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2551
		{
			sqlVAL.union.val = AsOfClause{Expr: &StrVal{s: sqlDollar[5].str}}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2555
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2561
		{
			sqlVAL.str = astFullJoin
		}
	case 392:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2565
		{
			sqlVAL.str = astLeftJoin
		}
	case 393:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2569
		{
			sqlVAL.str = astRightJoin
		}
	case 394:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2573
		{
			sqlVAL.str = astInnerJoin
		}
	case 395:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2579
		{
		}
	case 396:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2580
		{
		}
	case 397:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2591
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: NameList(sqlDollar[3].union.strs())}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2595
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2601
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 400:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2605
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 401:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2609
		{
			sqlVAL.union.val = sqlDollar[2].union.qname()
		}
	case 402:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2613
		{
			sqlVAL.union.val = sqlDollar[3].union.qname()
		}
	case 403:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2619
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2623
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 405:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2636
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname()}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2640
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2644
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2650
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 409:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2654
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 410:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2666
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 411:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2670
		{
			unimplementedWithIssue(2115)
		}
	case 412:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2671
		{
			unimplementedWithIssue(2115)
		}
	case 413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2674
		{
			unimplementedWithIssue(2115)
		}
	case 414:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2675
		{
			unimplementedWithIssue(2115)
		}
	case 415:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2676
		{
		}
	case 421:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2684
		{
			unimplemented()
		}
	case 422:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2686
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 423:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2690
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2694
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 425:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2698
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2702
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 431:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2723
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2732
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2746
		{
			sqlVAL.union.val = nil
		}
	case 434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2753
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2757
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2761
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2765
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2769
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 439:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2773
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 440:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2777
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newFloatColType(int(prec))
		}
	case 441:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2786
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 442:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2790
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2799
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 444:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2808
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2817
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 446:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2821
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2827
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 448:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2831
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2849
		{
			n, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newIntBitType(int(n))
		}
	case 454:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2860
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 459:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2876
		{
			n, err := sqlDollar[3].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2892
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 461:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2898
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 462:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2902
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 463:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2906
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 464:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2910
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 465:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2915
		{
		}
	case 466:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2916
		{
		}
	case 467:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2921
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 468:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2925
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 469:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2929
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2933
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 471:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2937
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 472:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2942
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 473:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2947
		{
			unimplemented()
		}
	case 474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2948
		{
			unimplemented()
		}
	case 475:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2949
		{
			unimplemented()
		}
	case 476:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2950
		{
			unimplemented()
		}
	case 477:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2951
		{
			unimplemented()
		}
	case 478:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2952
		{
			unimplemented()
		}
	case 479:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2953
		{
			unimplemented()
		}
	case 480:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2954
		{
			unimplemented()
		}
	case 481:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2955
		{
			unimplemented()
		}
	case 482:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2956
		{
			unimplemented()
		}
	case 483:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2957
		{
			unimplemented()
		}
	case 484:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2958
		{
			unimplemented()
		}
	case 485:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2959
		{
			unimplemented()
		}
	case 486:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2960
		{
		}
	case 487:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2963
		{
			unimplemented()
		}
	case 488:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2964
		{
			unimplemented()
		}
	case 490:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2988
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2991
		{
			unimplemented()
		}
	case 492:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2992
		{
			unimplemented()
		}
	case 493:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3001
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3005
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3009
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3013
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3017
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3021
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3025
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3029
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3033
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3037
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3041
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3045
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3049
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3053
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3057
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3061
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3065
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3069
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3073
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3077
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3081
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3085
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3089
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3093
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3097
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3101
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3105
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3109
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3113
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3117
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3121
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3125
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3128
		{
			unimplemented()
		}
	case 526:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3130
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3134
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3138
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3142
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3146
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3150
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3154
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3158
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3162
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3166
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3170
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3174
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3178
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3182
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3186
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3190
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3207
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3211
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3215
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3219
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3223
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3227
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3231
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3235
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3239
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3243
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3247
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3251
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3255
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3259
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3263
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3267
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3271
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3275
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3279
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3283
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3287
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3291
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3295
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3299
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3303
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3307
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3311
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3323
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 572:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3328
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3332
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3338
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3342
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3346
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3352
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 580:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3356
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 581:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3360
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 582:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3368
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname()}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3372
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3375
		{
			unimplemented()
		}
	case 585:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3376
		{
			unimplemented()
		}
	case 586:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3378
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Type: All, Exprs: sqlDollar[4].union.exprs()}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3382
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Type: Distinct, Exprs: sqlDollar[4].union.exprs()}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3386
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Exprs: Exprs{StarExpr()}}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3399
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 590:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3403
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 591:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3412
		{
			unimplemented()
		}
	case 592:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3413
		{
			unimplemented()
		}
	case 593:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3417
		{
			unimplemented()
		}
	case 594:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3419
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3423
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3427
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3431
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3434
		{
			unimplemented()
		}
	case 599:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3435
		{
			unimplemented()
		}
	case 600:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3436
		{
			unimplemented()
		}
	case 601:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3437
		{
			unimplemented()
		}
	case 602:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3439
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3443
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3447
		{
			sqlVAL.union.val = &OverlayExpr{FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3451
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "STRPOS"}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3455
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3458
		{
			unimplemented()
		}
	case 608:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3460
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3464
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "LTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3468
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "RTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3472
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3476
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3480
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3484
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3488
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3492
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3496
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3502
		{
			unimplemented()
		}
	case 619:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3503
		{
		}
	case 620:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3506
		{
			unimplemented()
		}
	case 621:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3507
		{
		}
	case 622:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3511
		{
			unimplemented()
		}
	case 623:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3512
		{
		}
	case 624:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3515
		{
			unimplemented()
		}
	case 625:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3516
		{
			unimplemented()
		}
	case 626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3519
		{
			unimplemented()
		}
	case 627:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3522
		{
			unimplemented()
		}
	case 628:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3523
		{
			unimplemented()
		}
	case 629:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3524
		{
		}
	case 630:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3528
		{
			unimplemented()
		}
	case 631:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3539
		{
			unimplemented()
		}
	case 632:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3540
		{
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3543
		{
			unimplemented()
		}
	case 634:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3544
		{
		}
	case 635:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3552
		{
			unimplemented()
		}
	case 636:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3553
		{
			unimplemented()
		}
	case 637:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3554
		{
		}
	case 638:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3557
		{
			unimplemented()
		}
	case 639:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3558
		{
			unimplemented()
		}
	case 640:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3564
		{
			unimplemented()
		}
	case 641:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3565
		{
			unimplemented()
		}
	case 642:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3566
		{
			unimplemented()
		}
	case 643:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3567
		{
			unimplemented()
		}
	case 644:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3568
		{
			unimplemented()
		}
	case 645:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3579
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3583
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3587
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3593
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3597
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3603
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3644
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3648
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 653:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3654
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3658
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 655:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3664
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3668
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3672
		{
			sqlVAL.union.val = &Array{nil}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3678
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3682
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 660:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3688
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3710
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3714
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3720
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 671:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3727
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3731
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 673:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3748
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3752
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3756
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3760
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3764
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 678:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3768
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 679:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3774
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 680:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3780
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 681:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3786
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 682:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3790
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 683:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3794
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 684:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3800
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3804
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3815
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3822
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3826
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 689:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3832
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3838
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 691:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3842
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 693:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3849
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 694:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3855
		{
			sqlVAL.union.val = sqlDollar[1].union.indirectElem()
		}
	case 695:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3859
		{
			sqlVAL.union.val = sqlDollar[1].union.indirectElem()
		}
	case 696:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3863
		{
			sqlVAL.union.val = &ArrayIndirection{Begin: sqlDollar[2].union.expr()}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3867
		{
			sqlVAL.union.val = &ArrayIndirection{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3873
		{
			sqlVAL.union.val = NameIndirection(sqlDollar[2].str)
		}
	case 699:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3879
		{
			sqlVAL.union.val = qualifiedStar
		}
	case 700:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3885
		{
			sqlVAL.union.val = Indirection{sqlDollar[1].union.indirectElem()}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3889
		{
			sqlVAL.union.val = append(sqlDollar[1].union.indirect(), sqlDollar[2].union.indirectElem())
		}
	case 702:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3894
		{
		}
	case 703:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3895
		{
		}
	case 705:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3904
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3910
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3914
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 708:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3923
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 709:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3929
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3933
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 711:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3939
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3948
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3952
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3956
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 715:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3964
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3968
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 717:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3974
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3978
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 719:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3984
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3988
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 721:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3999
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4003
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4009
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.qname(), Index: Name(sqlDollar[3].str)}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4020
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4024
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: Indirection{sqlDollar[2].union.indirectElem()}}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4028
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: Indirection{sqlDollar[2].union.indirectElem()}}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4032
		{
			sqlVAL.union.val = &QualifiedName{Indirect: Indirection{unqualifiedStar}}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4038
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4042
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 730:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4048
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 731:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4051
		{
		}
	case 732:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4061
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4065
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4072
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 735:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4076
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 736:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4080
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4084
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4087
		{
			unimplemented()
		}
	case 739:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4089
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4093
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4097
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[5].str}, Type: sqlDollar[1].union.colType()}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4101
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 743:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4105
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 744:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4109
		{
			sqlVAL.union.val = DNull
		}
	case 746:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4116
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 747:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4120
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4142
		{
			sqlVAL.str = ""
		}
	case 753:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4148
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 754:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4152
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
