// Code generated by go yacc.
//line sql.y:21
package parser

import __yyfmt__ "fmt"

//line sql.y:21
import "github.com/cockroachdb/cockroach/sql/privilege"

func unimplemented() {
	panic("TODO(pmattis): unimplemented")
}

//line sql.y:29
type sqlSymType struct {
	yys            int
	id             int
	pos            int
	empty          struct{}
	ival           IntVal
	boolVal        bool
	str            string
	strs           []string
	qname          *QualifiedName
	qnames         QualifiedNames
	indirectElem   IndirectionElem
	indirect       Indirection
	stmt           Statement
	stmts          []Statement
	selectStmt     SelectStatement
	colDef         *ColumnTableDef
	constraintDef  ConstraintTableDef
	tblDef         TableDef
	tblDefs        []TableDef
	colQual        ColumnQualification
	colQuals       []ColumnQualification
	colType        ColumnType
	colTypes       []ColumnType
	expr           Expr
	exprs          Exprs
	selExpr        SelectExpr
	selExprs       SelectExprs
	aliasClause    AliasClause
	tblExpr        TableExpr
	tblExprs       TableExprs
	joinCond       JoinCond
	when           *When
	whens          []*When
	updateExpr     *UpdateExpr
	updateExprs    []*UpdateExpr
	limit          *Limit
	targetList     TargetList
	targetListPtr  *TargetList
	privilegeType  privilege.Kind
	privilegeList  privilege.List
	orderBy        OrderBy
	orders         []*Order
	order          *Order
	groupBy        GroupBy
	dir            Direction
	alterTableCmd  AlterTableCmd
	alterTableCmds AlterTableCmds
	isoLevel       IsolationLevel
	userPriority   UserPriority
	idxElem        IndexElem
	idxElems       IndexElemList
}

const IDENT = 57346
const FCONST = 57347
const SCONST = 57348
const BCONST = 57349
const ICONST = 57350
const PARAM = 57351
const TYPECAST = 57352
const DOT_DOT = 57353
const LESS_EQUALS = 57354
const GREATER_EQUALS = 57355
const NOT_EQUALS = 57356
const ERROR = 57357
const ACTION = 57358
const ADD = 57359
const ALL = 57360
const ALTER = 57361
const ANALYSE = 57362
const ANALYZE = 57363
const AND = 57364
const ANY = 57365
const ARRAY = 57366
const AS = 57367
const ASC = 57368
const ASYMMETRIC = 57369
const AT = 57370
const BEGIN = 57371
const BETWEEN = 57372
const BIGINT = 57373
const BIT = 57374
const BLOB = 57375
const BOOL = 57376
const BOOLEAN = 57377
const BOTH = 57378
const BY = 57379
const BYTES = 57380
const CASCADE = 57381
const CASE = 57382
const CAST = 57383
const CHAR = 57384
const CHARACTER = 57385
const CHECK = 57386
const COALESCE = 57387
const COLLATE = 57388
const COLLATION = 57389
const COLUMN = 57390
const COLUMNS = 57391
const COMMIT = 57392
const COMMITTED = 57393
const CONCAT = 57394
const CONFLICT = 57395
const CONSTRAINT = 57396
const COVERING = 57397
const CREATE = 57398
const CROSS = 57399
const CUBE = 57400
const CURRENT = 57401
const CURRENT_CATALOG = 57402
const CURRENT_DATE = 57403
const CURRENT_ROLE = 57404
const CURRENT_TIME = 57405
const CURRENT_TIMESTAMP = 57406
const CURRENT_USER = 57407
const CYCLE = 57408
const DATA = 57409
const DATABASE = 57410
const DATABASES = 57411
const DATE = 57412
const DAY = 57413
const DEC = 57414
const DECIMAL = 57415
const DEFAULT = 57416
const DEFERRABLE = 57417
const DELETE = 57418
const DESC = 57419
const DISTINCT = 57420
const DO = 57421
const DOUBLE = 57422
const DROP = 57423
const ELSE = 57424
const END = 57425
const ESCAPE = 57426
const EXCEPT = 57427
const EXISTS = 57428
const EXPLAIN = 57429
const EXTRACT = 57430
const FALSE = 57431
const FETCH = 57432
const FILTER = 57433
const FIRST = 57434
const FLOAT = 57435
const FOLLOWING = 57436
const FOR = 57437
const FOREIGN = 57438
const FROM = 57439
const FULL = 57440
const GRANT = 57441
const GRANTS = 57442
const GREATEST = 57443
const GROUP = 57444
const GROUPING = 57445
const HAVING = 57446
const HIGH = 57447
const HOUR = 57448
const IF = 57449
const IFNULL = 57450
const IN = 57451
const INDEX = 57452
const INITIALLY = 57453
const INNER = 57454
const INSERT = 57455
const INT = 57456
const INT64 = 57457
const INTEGER = 57458
const INTERSECT = 57459
const INTERVAL = 57460
const INTO = 57461
const IS = 57462
const ISOLATION = 57463
const JOIN = 57464
const KEY = 57465
const LATERAL = 57466
const LEADING = 57467
const LEAST = 57468
const LEFT = 57469
const LEVEL = 57470
const LIKE = 57471
const LIMIT = 57472
const LOCAL = 57473
const LOCALTIME = 57474
const LOCALTIMESTAMP = 57475
const LOW = 57476
const LSHIFT = 57477
const MATCH = 57478
const MINUTE = 57479
const MONTH = 57480
const NAME = 57481
const NAMES = 57482
const NATURAL = 57483
const NEXT = 57484
const NO = 57485
const NORMAL = 57486
const NOT = 57487
const NOTHING = 57488
const NULL = 57489
const NULLIF = 57490
const NULLS = 57491
const NUMERIC = 57492
const OF = 57493
const OFF = 57494
const OFFSET = 57495
const ON = 57496
const ONLY = 57497
const OR = 57498
const ORDER = 57499
const ORDINALITY = 57500
const OUT = 57501
const OUTER = 57502
const OVER = 57503
const OVERLAPS = 57504
const OVERLAY = 57505
const PARTIAL = 57506
const PARTITION = 57507
const PLACING = 57508
const POSITION = 57509
const PRECEDING = 57510
const PRECISION = 57511
const PRIMARY = 57512
const PRIORITY = 57513
const RANGE = 57514
const READ = 57515
const REAL = 57516
const RECURSIVE = 57517
const REF = 57518
const REFERENCES = 57519
const RENAME = 57520
const REPEATABLE = 57521
const RESTRICT = 57522
const RETURNING = 57523
const REVOKE = 57524
const RIGHT = 57525
const ROLLBACK = 57526
const ROLLUP = 57527
const ROW = 57528
const ROWS = 57529
const RSHIFT = 57530
const SEARCH = 57531
const SECOND = 57532
const SELECT = 57533
const SERIALIZABLE = 57534
const SESSION = 57535
const SESSION_USER = 57536
const SET = 57537
const SHOW = 57538
const SIMILAR = 57539
const SIMPLE = 57540
const SMALLINT = 57541
const SNAPSHOT = 57542
const SOME = 57543
const SQL = 57544
const START = 57545
const STRICT = 57546
const STRING = 57547
const STORING = 57548
const SUBSTRING = 57549
const SYMMETRIC = 57550
const TABLE = 57551
const TABLES = 57552
const TEXT = 57553
const THEN = 57554
const TIME = 57555
const TIMESTAMP = 57556
const TO = 57557
const TRAILING = 57558
const TRANSACTION = 57559
const TREAT = 57560
const TRIM = 57561
const TRUE = 57562
const TRUNCATE = 57563
const TYPE = 57564
const UNBOUNDED = 57565
const UNCOMMITTED = 57566
const UNION = 57567
const UNIQUE = 57568
const UNKNOWN = 57569
const UPDATE = 57570
const USER = 57571
const USING = 57572
const VALID = 57573
const VALIDATE = 57574
const VALUE = 57575
const VALUES = 57576
const VARCHAR = 57577
const VARIADIC = 57578
const VARYING = 57579
const WHEN = 57580
const WHERE = 57581
const WINDOW = 57582
const WITH = 57583
const WITHIN = 57584
const WITHOUT = 57585
const YEAR = 57586
const ZONE = 57587
const NOT_LA = 57588
const WITH_LA = 57589
const POSTFIXOP = 57590
const UMINUS = 57591

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"FCONST",
	"SCONST",
	"BCONST",
	"ICONST",
	"PARAM",
	"TYPECAST",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXPLAIN",
	"EXTRACT",
	"FALSE",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FOLLOWING",
	"FOR",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HOUR",
	"IF",
	"IFNULL",
	"IN",
	"INDEX",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"LATERAL",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARTIAL",
	"PARTITION",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"RENAME",
	"REPEATABLE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SNAPSHOT",
	"SOME",
	"SQL",
	"START",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"TABLE",
	"TABLES",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"USER",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:3909

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 19,
	268, 19,
	-2, 303,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 29,
	1, 274,
	154, 274,
	266, 274,
	268, 274,
	-2, 284,
	-1, 40,
	1, 277,
	154, 277,
	266, 277,
	268, 277,
	-2, 283,
	-1, 49,
	1, 19,
	268, 19,
	-2, 303,
	-1, 85,
	1, 135,
	268, 135,
	-2, 762,
	-1, 243,
	130, 313,
	153, 313,
	-2, 280,
	-1, 246,
	130, 312,
	153, 312,
	-2, 278,
	-1, 354,
	130, 312,
	153, 312,
	-2, 281,
	-1, 411,
	265, 710,
	-2, 705,
	-1, 412,
	265, 711,
	-2, 706,
	-1, 418,
	6, 431,
	265, 431,
	-2, 838,
	-1, 440,
	6, 401,
	-2, 817,
	-1, 441,
	6, 428,
	265, 428,
	-2, 818,
	-1, 442,
	6, 409,
	-2, 819,
	-1, 443,
	6, 408,
	-2, 820,
	-1, 444,
	6, 428,
	265, 428,
	-2, 822,
	-1, 445,
	6, 428,
	265, 428,
	-2, 823,
	-1, 446,
	6, 429,
	-2, 825,
	-1, 447,
	6, 396,
	-2, 826,
	-1, 448,
	6, 396,
	-2, 827,
	-1, 449,
	6, 411,
	-2, 830,
	-1, 450,
	6, 397,
	-2, 835,
	-1, 451,
	6, 398,
	-2, 836,
	-1, 452,
	6, 399,
	-2, 837,
	-1, 453,
	6, 396,
	-2, 841,
	-1, 454,
	6, 402,
	-2, 846,
	-1, 455,
	6, 400,
	-2, 848,
	-1, 456,
	6, 430,
	-2, 852,
	-1, 457,
	6, 426,
	265, 426,
	-2, 856,
	-1, 711,
	85, 284,
	117, 284,
	130, 284,
	153, 284,
	157, 284,
	225, 284,
	-2, 533,
	-1, 719,
	265, 690,
	-2, 680,
	-1, 911,
	12, 0,
	13, 0,
	14, 0,
	248, 0,
	249, 0,
	250, 0,
	-2, 464,
	-1, 912,
	12, 0,
	13, 0,
	14, 0,
	248, 0,
	249, 0,
	250, 0,
	-2, 465,
	-1, 913,
	12, 0,
	13, 0,
	14, 0,
	248, 0,
	249, 0,
	250, 0,
	-2, 466,
	-1, 917,
	12, 0,
	13, 0,
	14, 0,
	248, 0,
	249, 0,
	250, 0,
	-2, 470,
	-1, 918,
	12, 0,
	13, 0,
	14, 0,
	248, 0,
	249, 0,
	250, 0,
	-2, 471,
	-1, 919,
	12, 0,
	13, 0,
	14, 0,
	248, 0,
	249, 0,
	250, 0,
	-2, 472,
	-1, 922,
	30, 0,
	109, 0,
	129, 0,
	197, 0,
	246, 0,
	-2, 477,
	-1, 953,
	162, 603,
	-2, 606,
	-1, 1100,
	85, 284,
	117, 284,
	130, 284,
	153, 284,
	157, 284,
	225, 284,
	-2, 354,
	-1, 1108,
	30, 0,
	109, 0,
	129, 0,
	197, 0,
	246, 0,
	-2, 478,
	-1, 1113,
	30, 0,
	109, 0,
	129, 0,
	197, 0,
	246, 0,
	-2, 479,
	-1, 1132,
	162, 602,
	-2, 605,
	-1, 1269,
	30, 0,
	109, 0,
	129, 0,
	197, 0,
	246, 0,
	-2, 480,
	-1, 1274,
	120, 0,
	-2, 490,
	-1, 1283,
	162, 604,
	-2, 607,
	-1, 1323,
	12, 0,
	13, 0,
	14, 0,
	248, 0,
	249, 0,
	250, 0,
	-2, 514,
	-1, 1324,
	12, 0,
	13, 0,
	14, 0,
	248, 0,
	249, 0,
	250, 0,
	-2, 515,
	-1, 1325,
	12, 0,
	13, 0,
	14, 0,
	248, 0,
	249, 0,
	250, 0,
	-2, 516,
	-1, 1329,
	12, 0,
	13, 0,
	14, 0,
	248, 0,
	249, 0,
	250, 0,
	-2, 520,
	-1, 1330,
	12, 0,
	13, 0,
	14, 0,
	248, 0,
	249, 0,
	250, 0,
	-2, 521,
	-1, 1331,
	12, 0,
	13, 0,
	14, 0,
	248, 0,
	249, 0,
	250, 0,
	-2, 522,
	-1, 1423,
	120, 0,
	-2, 491,
	-1, 1427,
	30, 0,
	109, 0,
	129, 0,
	197, 0,
	246, 0,
	-2, 494,
	-1, 1428,
	30, 0,
	109, 0,
	129, 0,
	197, 0,
	246, 0,
	-2, 496,
	-1, 1507,
	30, 0,
	109, 0,
	129, 0,
	197, 0,
	246, 0,
	-2, 495,
	-1, 1508,
	30, 0,
	109, 0,
	129, 0,
	197, 0,
	246, 0,
	-2, 497,
	-1, 1516,
	120, 0,
	-2, 523,
	-1, 1553,
	120, 0,
	-2, 524,
	-1, 1598,
	30, 0,
	129, 0,
	197, 0,
	246, 0,
	-2, 816,
}

const sqlNprod = 948
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 18606

var sqlAct = [...]int{

	950, 1597, 1580, 1464, 1618, 1558, 1581, 797, 1582, 1596,
	852, 1497, 1524, 410, 247, 470, 1391, 1275, 409, 1303,
	402, 1361, 1392, 1409, 274, 714, 1486, 1403, 790, 1096,
	86, 1190, 839, 13, 1276, 836, 1189, 252, 28, 966,
	1249, 1135, 716, 1088, 498, 1258, 838, 649, 477, 1084,
	798, 970, 938, 776, 935, 767, 960, 863, 749, 61,
	745, 1099, 665, 28, 254, 39, 525, 1005, 511, 385,
	831, 288, 671, 480, 18, 10, 6, 90, 482, 345,
	384, 1008, 375, 246, 344, 471, 472, 28, 59, 293,
	39, 508, 552, 295, 841, 257, 536, 357, 356, 291,
	63, 62, 64, 861, 358, 527, 83, 68, 523, 474,
	507, 458, 284, 475, 39, 40, 473, 271, 963, 791,
	271, 41, 280, 251, 251, 271, 1488, 290, 672, 860,
	474, 669, 500, 368, 475, 1128, 672, 473, 299, 500,
	1594, 1588, 795, 1485, 856, 1587, 1546, 1579, 856, 1056,
	1426, 270, 1336, 964, 277, 244, 1282, 296, 1068, 285,
	322, 243, 765, 1574, 1555, 321, 856, 1426, 45, 1086,
	1549, 674, 300, 856, 1543, 1534, 1509, 1485, 1485, 1426,
	1504, 1070, 856, 856, 965, 962, 47, 1494, 1484, 676,
	1485, 1485, 1469, 1468, 1449, 856, 856, 1128, 1429, 1425,
	1371, 1128, 1426, 856, 812, 1279, 1240, 675, 1128, 499,
	503, 48, 1236, 689, 1207, 499, 404, 1208, 43, 1205,
	1204, 946, 1128, 1128, 44, 1203, 1132, 1130, 1128, 1128,
	851, 857, 1131, 1129, 856, 1134, 1128, 967, 1128, 825,
	764, 505, 42, 763, 506, 673, 45, 369, 644, 643,
	517, 516, 316, 1162, 269, 1178, 1179, 1180, 355, 45,
	49, 475, 551, 333, 47, 1422, 376, 376, 1595, 1593,
	349, 1550, 1493, 501, 1454, 374, 478, 47, 1450, 412,
	501, 1442, 1441, 1436, 1435, 354, 1434, 1433, 1420, 48,
	1388, 961, 1351, 1346, 465, 1175, 690, 1072, 1345, 469,
	1056, 45, 48, 1344, 1286, 1418, 1264, 271, 673, 43,
	89, 1248, 1106, 1506, 1210, 44, 1209, 1197, 1188, 47,
	42, 943, 1161, 89, 89, 1158, 1156, 89, 1145, 1139,
	89, 89, 89, 794, 722, 89, 89, 89, 89, 1069,
	298, 348, 467, 474, 48, 1020, 1525, 475, 977, 691,
	473, 43, 271, 493, 976, 368, 367, 44, 89, 89,
	657, 659, 499, 1181, 1305, 717, 1545, 666, 1526, 646,
	244, 1518, 1500, 1491, 1483, 60, 243, 1461, 1176, 1447,
	705, 706, 707, 708, 709, 1414, 285, 1399, 1273, 712,
	674, 1263, 645, 1246, 1245, 491, 1243, 1222, 1221, 1187,
	944, 1387, 1153, 299, 299, 1152, 1144, 1125, 676, 725,
	1121, 555, 940, 685, 682, 683, 684, 677, 678, 679,
	680, 681, 1162, 719, 514, 750, 675, 753, 515, 1034,
	1033, 1177, 1015, 975, 547, 540, 855, 300, 300, 755,
	743, 636, 742, 741, 640, 556, 641, 639, 740, 739,
	738, 737, 1034, 674, 653, 736, 655, 735, 734, 733,
	732, 731, 654, 730, 729, 667, 720, 718, 42, 647,
	713, 676, 460, 275, 372, 760, 1505, 244, 1162, 1266,
	244, 244, 1265, 661, 466, 758, 662, 663, 255, 675,
	327, 1172, 1173, 1174, 1390, 1171, 1168, 1169, 1170, 1163,
	1164, 1165, 1166, 1167, 1057, 747, 748, 751, 1107, 340,
	328, 727, 754, 1404, 791, 361, 770, 89, 1306, 89,
	1148, 89, 971, 746, 1053, 1367, 793, 1533, 1564, 1607,
	28, 1379, 232, 264, 807, 293, 89, 756, 757, 61,
	781, 783, 464, 28, 991, 546, 343, 483, 233, 484,
	1477, 555, 89, 555, 1476, 1368, 483, 271, 484, 1608,
	789, 1417, 89, 89, 801, 89, 759, 1234, 761, 805,
	39, 1214, 290, 53, 806, 1213, 1064, 1143, 773, 1142,
	63, 62, 64, 1141, 299, 556, 483, 556, 484, 1140,
	1109, 786, 927, 723, 809, 89, 818, 89, 815, 816,
	810, 813, 819, 296, 808, 298, 298, 459, 325, 1532,
	54, 485, 811, 554, 89, 788, 89, 89, 300, 89,
	485, 787, 901, 937, 238, 937, 1363, 1466, 1364, 555,
	1566, 89, 494, 1576, 967, 1615, 677, 678, 679, 680,
	681, 1048, 814, 326, 830, 489, 933, 777, 1577, 89,
	485, 1366, 89, 488, 769, 417, 1527, 931, 1369, 462,
	1233, 1295, 1162, 556, 1065, 461, 324, 414, 1163, 1164,
	1165, 1166, 1167, 500, 376, 744, 971, 1614, 902, 903,
	904, 905, 906, 907, 908, 909, 910, 911, 912, 913,
	914, 915, 916, 917, 918, 919, 920, 921, 922, 780,
	858, 679, 680, 681, 1175, 1224, 900, 1365, 981, 866,
	1514, 1607, 710, 929, 967, 928, 271, 1045, 1162, 934,
	849, 850, 250, 833, 1151, 55, 1165, 1166, 1167, 834,
	758, 1259, 978, 251, 989, 758, 999, 1001, 1006, 1009,
	1010, 1011, 271, 323, 241, 370, 769, 481, 89, 1063,
	835, 1613, 768, 554, 249, 554, 865, 545, 533, 544,
	951, 538, 486, 89, 478, 364, 365, 89, 925, 1584,
	89, 486, 1292, 779, 89, 984, 89, 89, 1467, 89,
	346, 555, 89, 89, 89, 1019, 298, 1176, 930, 89,
	89, 942, 1049, 324, 251, 932, 941, 19, 341, 947,
	952, 486, 955, 1293, 1111, 1029, 936, 32, 1583, 1031,
	985, 1606, 1023, 56, 501, 556, 1367, 1000, 1362, 1225,
	360, 1231, 1604, 1012, 1013, 1014, 1360, 548, 34, 778,
	359, 554, 1402, 1051, 38, 1585, 1025, 51, 845, 336,
	1177, 986, 983, 1176, 1024, 317, 1368, 926, 342, 378,
	315, 1059, 666, 360, 1091, 57, 967, 1471, 1470, 24,
	1044, 35, 248, 1445, 290, 25, 1052, 923, 1094, 1586,
	1055, 550, 290, 1621, 1058, 1073, 1459, 26, 1257, 52,
	1628, 1061, 1060, 1092, 549, 239, 1067, 1216, 1062, 1079,
	1071, 872, 1066, 28, 987, 1028, 1177, 846, 1291, 652,
	1375, 1559, 242, 299, 1171, 1168, 1169, 1170, 1163, 1164,
	1165, 1166, 1167, 766, 1077, 1074, 648, 1363, 89, 1364,
	39, 359, 1101, 1095, 1108, 642, 89, 89, 1113, 1105,
	1081, 1080, 1082, 518, 271, 924, 1446, 300, 1378, 1093,
	963, 1460, 1366, 1036, 751, 1377, 754, 1127, 982, 1369,
	66, 1332, 89, 1627, 58, 89, 522, 1136, 748, 747,
	27, 1412, 36, 1170, 1163, 1164, 1165, 1166, 1167, 45,
	1133, 1374, 1149, 30, 31, 964, 1154, 1619, 50, 1112,
	1110, 33, 1035, 554, 1254, 520, 1253, 47, 69, 323,
	1162, 872, 249, 283, 1102, 521, 351, 712, 1365, 37,
	1250, 1085, 974, 1006, 1006, 1006, 965, 962, 74, 539,
	534, 821, 48, 70, 1620, 1517, 1376, 823, 1333, 43,
	1444, 1147, 1124, 1212, 1334, 44, 1126, 1191, 1272, 1622,
	824, 71, 1157, 1120, 1219, 817, 672, 339, 822, 1137,
	1138, 337, 334, 42, 282, 73, 89, 89, 89, 1192,
	728, 638, 89, 973, 1358, 89, 1229, 1227, 478, 967,
	1215, 89, 89, 89, 89, 89, 1300, 89, 89, 1211,
	1194, 1195, 1196, 69, 89, 1075, 89, 847, 1186, 844,
	504, 502, 89, 497, 1237, 1228, 1218, 1230, 490, 1199,
	487, 89, 89, 74, 1478, 362, 1608, 89, 70, 542,
	1118, 1232, 267, 1480, 785, 298, 1239, 1238, 1268, 77,
	1269, 1116, 330, 961, 853, 1176, 71, 1242, 1235, 397,
	1244, 1274, 89, 72, 89, 89, 801, 89, 1488, 1284,
	73, 769, 1529, 1552, 1256, 1284, 89, 784, 1260, 1261,
	769, 89, 89, 674, 89, 1251, 782, 891, 366, 1301,
	87, 1288, 1289, 1290, 3, 363, 271, 65, 1310, 271,
	75, 1312, 268, 258, 258, 854, 1220, 273, 1177, 1114,
	273, 279, 273, 1119, 1285, 273, 286, 273, 87, 675,
	331, 1294, 1296, 1297, 1547, 76, 796, 674, 318, 319,
	1309, 668, 1341, 1342, 231, 1307, 1311, 1313, 87, 87,
	1104, 1348, 1349, 1350, 276, 676, 1625, 1280, 72, 1626,
	660, 1162, 674, 1419, 826, 1352, 1252, 827, 1431, 1255,
	1162, 1339, 1298, 675, 1267, 1206, 1018, 1340, 1343, 234,
	235, 236, 1171, 1168, 1169, 1170, 1163, 1164, 1165, 1166,
	1167, 1017, 1115, 1016, 968, 75, 828, 891, 1357, 1117,
	1299, 1405, 1353, 829, 721, 237, 1465, 1397, 67, 637,
	1397, 335, 1396, 1401, 1398, 1396, 1438, 1398, 1575, 1337,
	1389, 1150, 1513, 1423, 28, 1496, 972, 726, 1427, 1428,
	1347, 1400, 890, 1430, 23, 1394, 390, 1359, 1432, 1217,
	840, 1424, 557, 543, 1416, 532, 413, 338, 526, 535,
	980, 1382, 463, 1437, 415, 869, 416, 1440, 870, 752,
	403, 867, 294, 799, 89, 969, 1146, 724, 389, 395,
	394, 948, 386, 271, 271, 320, 81, 271, 82, 1050,
	871, 1386, 792, 1406, 893, 848, 89, 1448, 872, 656,
	892, 1226, 868, 1443, 240, 1176, 1159, 998, 89, 990,
	89, 988, 89, 1372, 1373, 89, 979, 273, 347, 87,
	476, 352, 800, 373, 332, 859, 89, 1103, 371, 89,
	664, 266, 872, 265, 837, 329, 258, 89, 1472, 872,
	89, 1455, 890, 1407, 1408, 519, 820, 1413, 492, 1528,
	1563, 1456, 273, 1458, 1223, 1415, 1490, 46, 1177, 17,
	16, 1397, 273, 273, 1479, 495, 1396, 15, 1398, 14,
	872, 12, 1501, 1397, 1473, 1481, 1492, 11, 1396, 1487,
	1398, 1489, 1507, 1508, 1078, 1474, 1475, 674, 9, 8,
	871, 89, 1499, 7, 893, 512, 22, 512, 21, 1463,
	892, 20, 868, 5, 4, 676, 2, 1512, 1, 0,
	0, 0, 1521, 0, 87, 674, 512, 87, 0, 87,
	0, 1510, 1523, 675, 0, 1519, 1163, 1164, 1165, 1166,
	1167, 651, 1495, 676, 0, 0, 0, 0, 0, 1522,
	1122, 1123, 271, 0, 478, 0, 0, 0, 1536, 258,
	872, 675, 670, 89, 89, 89, 0, 1538, 1544, 1397,
	1540, 89, 89, 758, 1396, 0, 1398, 89, 1537, 89,
	0, 89, 89, 89, 89, 0, 0, 0, 0, 1539,
	0, 0, 0, 0, 0, 89, 0, 0, 1551, 0,
	0, 0, 0, 89, 89, 0, 1554, 89, 1183, 1184,
	1185, 0, 1502, 89, 89, 0, 1503, 1570, 0, 0,
	0, 0, 690, 0, 0, 0, 0, 1569, 1572, 1397,
	1565, 0, 1571, 1567, 1396, 1590, 1398, 1573, 1568, 0,
	0, 0, 0, 1542, 1591, 1589, 0, 1601, 1601, 1592,
	690, 0, 0, 0, 992, 89, 0, 1602, 273, 1605,
	1603, 0, 0, 0, 891, 1609, 872, 1562, 1611, 1601,
	1612, 0, 0, 774, 0, 691, 0, 273, 0, 0,
	273, 0, 1624, 1623, 273, 0, 803, 804, 0, 273,
	1610, 0, 273, 87, 87, 0, 1601, 1629, 891, 512,
	670, 0, 1548, 691, 1578, 891, 801, 0, 89, 0,
	89, 0, 89, 872, 0, 0, 0, 0, 0, 89,
	0, 0, 0, 0, 0, 1270, 1271, 1560, 1561, 0,
	0, 0, 0, 0, 872, 0, 891, 0, 0, 685,
	682, 683, 684, 677, 678, 679, 680, 681, 0, 0,
	0, 0, 89, 0, 89, 0, 0, 0, 0, 0,
	0, 0, 89, 0, 89, 0, 0, 0, 682, 683,
	684, 677, 678, 679, 680, 681, 1162, 0, 1314, 1315,
	1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325,
	1326, 1327, 1328, 1329, 1330, 1331, 0, 1335, 1087, 890,
	0, 0, 0, 0, 0, 872, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 891, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 89, 89, 832, 0,
	89, 0, 0, 890, 0, 0, 273, 774, 89, 1091,
	890, 0, 1087, 0, 0, 0, 0, 871, 0, 0,
	89, 893, 0, 1094, 0, 992, 992, 892, 0, 868,
	0, 0, 273, 1089, 0, 87, 0, 0, 1092, 0,
	0, 890, 0, 0, 0, 89, 89, 89, 0, 89,
	0, 871, 1090, 1091, 0, 893, 0, 0, 871, 0,
	0, 892, 893, 868, 0, 0, 89, 1094, 892, 0,
	868, 1176, 391, 29, 0, 0, 0, 1089, 0, 0,
	0, 0, 1092, 992, 992, 992, 89, 0, 0, 871,
	0, 0, 891, 893, 1093, 0, 1090, 0, 29, 892,
	0, 868, 0, 0, 0, 0, 0, 0, 0, 1411,
	0, 0, 245, 0, 0, 253, 0, 0, 0, 0,
	0, 890, 29, 0, 1177, 0, 273, 1026, 1027, 0,
	0, 0, 774, 253, 0, 1032, 0, 0, 1093, 891,
	0, 1037, 1038, 1040, 1042, 1043, 0, 1046, 1047, 0,
	0, 0, 0, 1462, 273, 0, 1054, 0, 0, 0,
	891, 0, 273, 0, 0, 0, 0, 0, 0, 871,
	0, 832, 512, 893, 0, 0, 0, 832, 0, 892,
	0, 868, 0, 0, 0, 1410, 0, 0, 0, 1168,
	1169, 1170, 1163, 1164, 1165, 1166, 1167, 0, 0, 0,
	992, 992, 651, 0, 87, 273, 0, 1076, 0, 0,
	0, 0, 0, 0, 0, 0, 1083, 0, 0, 0,
	0, 1098, 1098, 0, 273, 0, 0, 890, 0, 1516,
	0, 891, 0, 0, 1162, 0, 1178, 1179, 1180, 0,
	0, 0, 0, 0, 0, 0, 1421, 0, 0, 0,
	0, 0, 0, 992, 992, 992, 992, 992, 992, 992,
	992, 992, 992, 992, 992, 992, 992, 992, 992, 992,
	992, 0, 992, 0, 890, 871, 1175, 0, 1162, 893,
	1178, 1179, 1180, 0, 221, 892, 0, 868, 0, 0,
	1278, 0, 0, 0, 0, 890, 0, 0, 230, 0,
	0, 0, 1553, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1175, 0, 871, 0, 0, 0, 893, 245, 0, 223,
	0, 0, 892, 0, 868, 0, 0, 0, 0, 0,
	0, 0, 0, 871, 1181, 0, 0, 893, 222, 224,
	0, 0, 0, 892, 0, 868, 0, 0, 0, 1176,
	0, 0, 0, 0, 0, 0, 890, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	225, 0, 0, 0, 0, 0, 0, 0, 1181, 674,
	226, 692, 693, 694, 670, 0, 0, 0, 0, 0,
	0, 695, 0, 1176, 0, 0, 0, 676, 0, 701,
	0, 0, 1177, 0, 871, 0, 273, 0, 893, 0,
	0, 0, 0, 0, 892, 675, 868, 0, 1241, 0,
	774, 689, 651, 674, 245, 1247, 0, 245, 245, 0,
	0, 0, 0, 0, 0, 0, 273, 0, 0, 273,
	0, 676, 0, 701, 0, 0, 1177, 1262, 992, 0,
	1098, 711, 0, 0, 0, 715, 0, 0, 0, 675,
	0, 0, 1172, 1173, 1174, 689, 1171, 1168, 1169, 1170,
	1163, 1164, 1165, 1166, 1167, 0, 0, 0, 702, 0,
	227, 0, 0, 228, 0, 0, 0, 229, 0, 700,
	0, 0, 0, 0, 0, 0, 0, 0, 697, 0,
	0, 1304, 0, 0, 690, 0, 1172, 1173, 1174, 0,
	1171, 1168, 1169, 1170, 1163, 1164, 1165, 1166, 1167, 0,
	0, 0, 702, 0, 992, 696, 0, 0, 0, 0,
	0, 674, 0, 692, 693, 694, 0, 0, 0, 0,
	0, 0, 697, 695, 0, 0, 0, 0, 690, 676,
	0, 701, 0, 0, 0, 29, 0, 691, 0, 0,
	0, 0, 0, 1355, 1356, 774, 699, 675, 29, 674,
	0, 670, 670, 689, 0, 0, 0, 1380, 0, 1381,
	0, 273, 1383, 1384, 1385, 0, 0, 676, 0, 0,
	0, 0, 0, 1393, 0, 774, 1393, 992, 0, 0,
	0, 691, 0, 273, 273, 675, 0, 273, 0, 0,
	699, 0, 0, 670, 1098, 698, 0, 686, 687, 688,
	0, 685, 682, 683, 684, 677, 678, 679, 680, 681,
	702, 0, 0, 1021, 0, 0, 0, 0, 0, 0,
	1022, 700, 0, 1162, 0, 1178, 1179, 1180, 0, 0,
	697, 0, 0, 0, 0, 1439, 690, 0, 0, 698,
	0, 0, 0, 674, 0, 685, 682, 683, 684, 677,
	678, 679, 680, 681, 0, 0, 0, 696, 0, 0,
	0, 676, 0, 0, 0, 1175, 674, 0, 692, 693,
	694, 0, 0, 0, 690, 0, 0, 0, 695, 675,
	0, 0, 0, 0, 676, 0, 701, 0, 774, 691,
	1457, 0, 87, 0, 0, 0, 0, 0, 699, 273,
	0, 674, 675, 692, 693, 694, 0, 0, 689, 0,
	0, 0, 0, 695, 0, 862, 0, 1393, 0, 676,
	0, 701, 1182, 0, 0, 0, 0, 691, 0, 1393,
	0, 0, 273, 1181, 1498, 0, 0, 675, 0, 0,
	0, 0, 273, 689, 670, 939, 0, 698, 1176, 686,
	687, 688, 0, 685, 682, 683, 684, 677, 678, 679,
	680, 681, 0, 0, 0, 702, 0, 0, 690, 0,
	1451, 0, 0, 0, 0, 0, 700, 0, 0, 0,
	0, 0, 0, 0, 0, 697, 0, 0, 0, 0,
	0, 690, 0, 0, 684, 677, 678, 679, 680, 681,
	702, 1177, 0, 0, 0, 0, 1530, 1531, 0, 0,
	1535, 700, 696, 0, 0, 1393, 0, 0, 87, 0,
	697, 691, 0, 0, 0, 0, 690, 0, 0, 0,
	670, 0, 0, 0, 0, 0, 0, 253, 0, 0,
	0, 0, 0, 0, 691, 0, 0, 696, 0, 0,
	0, 0, 0, 699, 0, 670, 670, 273, 0, 87,
	0, 1172, 1173, 1174, 0, 1171, 1168, 1169, 1170, 1163,
	1164, 1165, 1166, 1167, 0, 1393, 1498, 0, 0, 691,
	0, 0, 0, 0, 0, 0, 0, 0, 699, 677,
	678, 679, 680, 681, 0, 0, 273, 0, 29, 0,
	0, 0, 698, 0, 686, 687, 688, 1100, 685, 682,
	683, 684, 677, 678, 679, 680, 681, 0, 0, 0,
	0, 0, 0, 0, 0, 1202, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 698, 0, 686,
	687, 688, 0, 685, 682, 683, 684, 677, 678, 679,
	680, 681, 0, 0, 0, 0, 0, 0, 0, 0,
	1201, 0, 0, 0, 0, 0, 0, 0, 0, 939,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 711, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 411, 399, 400, 401,
	398, 387, 0, 0, 0, 0, 0, 0, 91, 92,
	0, 93, 0, 0, 0, 0, 393, 0, 0, 711,
	94, 95, 0, 440, 441, 96, 442, 443, 0, 97,
	186, 98, 408, 426, 444, 445, 0, 436, 0, 419,
	0, 99, 100, 101, 0, 102, 0, 103, 0, 303,
	104, 1600, 0, 420, 422, 0, 421, 423, 106, 107,
	108, 109, 446, 110, 447, 448, 0, 0, 111, 0,
	0, 0, 439, 113, 0, 0, 0, 0, 392, 114,
	427, 406, 0, 115, 116, 449, 117, 0, 0, 0,
	304, 0, 118, 437, 0, 197, 0, 119, 120, 433,
	435, 0, 0, 0, 305, 121, 450, 451, 452, 862,
	418, 0, 862, 122, 307, 123, 0, 0, 438, 308,
	124, 0, 0, 259, 0, 0, 125, 0, 126, 127,
	128, 129, 260, 310, 130, 131, 132, 382, 133, 407,
	434, 134, 453, 135, 136, 0, 0, 0, 0, 0,
	137, 207, 311, 138, 312, 428, 139, 140, 0, 429,
	141, 210, 0, 142, 143, 144, 454, 145, 146, 0,
	147, 148, 149, 0, 150, 313, 151, 152, 396, 153,
	0, 154, 155, 0, 156, 261, 424, 157, 158, 0,
	159, 455, 160, 0, 161, 162, 164, 214, 163, 430,
	0, 0, 165, 166, 0, 263, 456, 0, 0, 262,
	431, 432, 405, 167, 168, 1599, 170, 0, 0, 171,
	172, 425, 0, 173, 174, 175, 219, 457, 0, 176,
	0, 0, 0, 0, 177, 178, 179, 180, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 379, 380,
	0, 0, 0, 0, 381, 0, 0, 388, 0, 29,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 862, 862, 0, 0,
	862, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1482, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 553, 0, 0, 0,
	0, 0, 0, 0, 0, 862, 0, 0, 91, 92,
	558, 93, 559, 560, 561, 562, 563, 564, 565, 566,
	94, 95, 181, 182, 183, 96, 184, 185, 567, 97,
	186, 98, 568, 569, 187, 188, 570, 189, 571, 302,
	572, 99, 100, 101, 0, 102, 573, 103, 574, 303,
	104, 105, 575, 576, 577, 578, 579, 580, 106, 107,
	108, 109, 190, 110, 191, 192, 581, 582, 111, 583,
	584, 585, 112, 113, 586, 587, 711, 588, 193, 114,
	194, 589, 590, 115, 116, 195, 117, 591, 592, 593,
	304, 594, 118, 196, 595, 197, 596, 119, 120, 198,
	199, 597, 598, 599, 305, 121, 200, 201, 202, 600,
	203, 601, 306, 122, 307, 123, 602, 603, 204, 308,
	124, 309, 604, 259, 605, 606, 125, 0, 126, 127,
	128, 129, 260, 310, 130, 131, 132, 607, 133, 608,
	205, 134, 206, 135, 136, 609, 610, 611, 612, 613,
	137, 207, 311, 138, 312, 208, 139, 140, 614, 209,
	141, 210, 615, 142, 143, 144, 211, 145, 146, 616,
	147, 148, 149, 617, 150, 313, 151, 152, 212, 153,
	0, 154, 155, 618, 156, 261, 619, 157, 158, 314,
	159, 213, 160, 620, 161, 162, 164, 214, 163, 215,
	621, 622, 165, 166, 623, 263, 216, 624, 625, 262,
	217, 218, 626, 167, 168, 169, 170, 627, 628, 171,
	172, 629, 630, 173, 174, 175, 219, 220, 631, 176,
	632, 633, 634, 635, 177, 178, 179, 180, 0, 553,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	762, 91, 92, 558, 93, 559, 560, 561, 562, 563,
	564, 565, 566, 94, 95, 181, 182, 183, 96, 184,
	185, 567, 97, 186, 98, 568, 569, 187, 188, 570,
	189, 571, 302, 572, 99, 100, 101, 0, 102, 573,
	103, 574, 303, 104, 105, 575, 576, 577, 578, 579,
	580, 106, 107, 108, 109, 190, 110, 191, 192, 581,
	582, 111, 583, 584, 585, 112, 113, 586, 587, 0,
	588, 193, 114, 194, 589, 590, 115, 116, 195, 117,
	591, 592, 593, 304, 594, 118, 196, 595, 197, 596,
	119, 120, 198, 199, 597, 598, 599, 305, 121, 200,
	201, 202, 600, 203, 601, 306, 122, 307, 123, 602,
	603, 204, 308, 124, 309, 604, 259, 605, 606, 125,
	0, 126, 127, 128, 129, 260, 310, 130, 131, 132,
	607, 133, 608, 205, 134, 206, 135, 136, 609, 610,
	611, 612, 613, 137, 207, 311, 138, 312, 208, 139,
	140, 614, 209, 141, 210, 615, 142, 143, 144, 211,
	145, 146, 616, 147, 148, 149, 617, 150, 313, 151,
	152, 212, 153, 0, 154, 155, 618, 156, 261, 619,
	157, 158, 314, 159, 213, 160, 620, 161, 162, 164,
	214, 163, 215, 621, 622, 165, 166, 623, 263, 216,
	624, 625, 262, 217, 218, 626, 167, 168, 169, 170,
	627, 628, 171, 172, 629, 630, 173, 174, 175, 219,
	220, 631, 176, 632, 633, 634, 635, 177, 178, 179,
	180, 411, 399, 400, 401, 398, 387, 0, 0, 0,
	0, 0, 0, 91, 92, 957, 93, 0, 0, 0,
	0, 393, 0, 0, 0, 94, 95, 181, 440, 441,
	96, 442, 443, 0, 97, 186, 98, 408, 426, 444,
	445, 0, 436, 0, 419, 0, 99, 100, 101, 0,
	102, 0, 103, 0, 303, 104, 105, 0, 420, 422,
	0, 421, 423, 106, 107, 108, 109, 446, 110, 447,
	448, 0, 0, 111, 0, 958, 0, 439, 113, 0,
	0, 0, 0, 392, 114, 427, 406, 0, 115, 116,
	449, 117, 0, 0, 0, 304, 0, 118, 437, 0,
	197, 0, 119, 120, 433, 435, 0, 0, 0, 305,
	121, 450, 451, 452, 0, 418, 0, 306, 122, 307,
	123, 0, 0, 438, 308, 124, 309, 0, 259, 0,
	0, 125, 0, 126, 127, 128, 129, 260, 310, 130,
	131, 132, 382, 133, 407, 434, 134, 453, 135, 136,
	0, 0, 0, 0, 0, 137, 207, 311, 138, 312,
	428, 139, 140, 0, 429, 141, 210, 0, 142, 143,
	144, 454, 145, 146, 0, 147, 148, 149, 0, 150,
	313, 151, 152, 396, 153, 0, 154, 155, 0, 156,
	261, 424, 157, 158, 314, 159, 455, 160, 0, 161,
	162, 164, 214, 163, 430, 0, 0, 165, 166, 0,
	263, 456, 0, 0, 262, 431, 432, 405, 167, 168,
	169, 170, 0, 0, 171, 172, 425, 0, 173, 174,
	175, 219, 457, 956, 176, 0, 0, 0, 0, 177,
	178, 179, 180, 383, 0, 411, 399, 400, 401, 398,
	387, 0, 0, 379, 380, 959, 0, 91, 92, 381,
	93, 0, 388, 954, 0, 393, 0, 0, 0, 94,
	95, 181, 440, 441, 96, 442, 443, 0, 97, 186,
	98, 408, 426, 444, 445, 0, 436, 0, 419, 0,
	99, 100, 101, 0, 102, 0, 103, 0, 303, 104,
	105, 0, 420, 422, 0, 421, 423, 106, 107, 108,
	109, 446, 110, 447, 448, 479, 0, 111, 0, 0,
	0, 439, 113, 0, 0, 0, 0, 392, 114, 427,
	406, 0, 115, 116, 449, 117, 0, 0, 0, 304,
	0, 118, 437, 0, 197, 0, 119, 120, 433, 435,
	0, 0, 0, 305, 121, 450, 451, 452, 0, 418,
	0, 306, 122, 307, 123, 0, 0, 438, 308, 124,
	309, 0, 259, 0, 0, 125, 0, 126, 127, 128,
	129, 260, 310, 130, 131, 132, 382, 133, 407, 434,
	134, 453, 135, 136, 0, 0, 0, 0, 0, 137,
	207, 311, 138, 312, 428, 139, 140, 0, 429, 141,
	210, 0, 142, 143, 144, 454, 145, 146, 0, 147,
	148, 149, 0, 150, 313, 151, 152, 396, 153, 0,
	154, 155, 45, 156, 261, 424, 157, 158, 314, 159,
	455, 160, 0, 161, 162, 164, 214, 163, 430, 0,
	47, 165, 166, 0, 263, 456, 0, 0, 262, 431,
	432, 405, 167, 168, 169, 170, 0, 0, 171, 172,
	425, 0, 173, 174, 175, 301, 457, 0, 176, 0,
	0, 0, 43, 177, 178, 179, 180, 383, 44, 411,
	399, 400, 401, 398, 387, 0, 0, 379, 380, 0,
	0, 91, 92, 381, 93, 0, 388, 0, 0, 393,
	0, 0, 0, 94, 95, 181, 440, 441, 96, 442,
	443, 0, 97, 186, 98, 408, 426, 444, 445, 0,
	436, 0, 419, 0, 99, 100, 101, 0, 102, 0,
	103, 0, 303, 104, 105, 0, 420, 422, 0, 421,
	423, 106, 107, 108, 109, 446, 110, 447, 448, 0,
	0, 111, 0, 0, 0, 439, 113, 0, 0, 0,
	0, 392, 114, 427, 406, 0, 115, 116, 449, 117,
	0, 0, 0, 304, 0, 118, 437, 0, 197, 0,
	119, 120, 433, 435, 0, 0, 0, 305, 121, 450,
	451, 452, 0, 418, 0, 306, 122, 307, 123, 0,
	0, 438, 308, 124, 309, 0, 259, 0, 0, 125,
	0, 126, 127, 128, 129, 260, 310, 130, 131, 132,
	382, 133, 407, 434, 134, 453, 135, 136, 0, 0,
	0, 0, 0, 137, 207, 311, 138, 312, 428, 139,
	140, 0, 429, 141, 210, 0, 142, 143, 144, 454,
	145, 146, 0, 147, 148, 149, 0, 150, 313, 151,
	152, 396, 153, 0, 154, 155, 45, 156, 261, 424,
	157, 158, 314, 159, 455, 160, 0, 161, 162, 164,
	214, 163, 430, 0, 47, 165, 166, 0, 263, 456,
	0, 0, 262, 431, 432, 405, 167, 168, 169, 170,
	0, 0, 171, 172, 425, 0, 173, 174, 175, 301,
	457, 0, 176, 0, 0, 0, 43, 177, 178, 179,
	180, 383, 44, 411, 399, 400, 401, 398, 387, 0,
	0, 379, 380, 0, 0, 91, 92, 381, 93, 0,
	388, 0, 0, 393, 0, 0, 0, 94, 95, 181,
	440, 441, 96, 442, 443, 1002, 97, 186, 98, 408,
	426, 444, 445, 0, 436, 0, 419, 0, 99, 100,
	101, 0, 102, 0, 103, 0, 303, 104, 105, 0,
	420, 422, 0, 421, 423, 106, 107, 108, 109, 446,
	110, 447, 448, 0, 0, 111, 0, 0, 0, 439,
	113, 0, 0, 0, 0, 392, 114, 427, 406, 0,
	115, 116, 449, 117, 0, 0, 1007, 304, 0, 118,
	437, 0, 197, 0, 119, 120, 433, 435, 0, 0,
	0, 305, 121, 450, 451, 452, 0, 418, 0, 306,
	122, 307, 123, 0, 1003, 438, 308, 124, 309, 0,
	259, 0, 0, 125, 0, 126, 127, 128, 129, 260,
	310, 130, 131, 132, 382, 133, 407, 434, 134, 453,
	135, 136, 0, 0, 0, 0, 0, 137, 207, 311,
	138, 312, 428, 139, 140, 0, 429, 141, 210, 0,
	142, 143, 144, 454, 145, 146, 0, 147, 148, 149,
	0, 150, 313, 151, 152, 396, 153, 0, 154, 155,
	0, 156, 261, 424, 157, 158, 314, 159, 455, 160,
	0, 161, 162, 164, 214, 163, 430, 0, 0, 165,
	166, 0, 263, 456, 0, 1004, 262, 431, 432, 405,
	167, 168, 169, 170, 0, 0, 171, 172, 425, 0,
	173, 174, 175, 219, 457, 0, 176, 0, 0, 0,
	0, 177, 178, 179, 180, 383, 0, 411, 399, 400,
	401, 398, 387, 0, 0, 379, 380, 0, 0, 91,
	92, 381, 93, 0, 388, 0, 0, 393, 0, 0,
	0, 94, 95, 181, 440, 441, 96, 442, 443, 0,
	97, 186, 98, 408, 426, 444, 445, 0, 436, 0,
	419, 0, 99, 100, 101, 0, 102, 0, 103, 0,
	303, 104, 105, 0, 420, 422, 0, 421, 423, 106,
	107, 108, 109, 446, 110, 447, 448, 0, 0, 111,
	0, 0, 0, 439, 113, 0, 0, 0, 0, 392,
	114, 427, 406, 0, 115, 116, 449, 117, 0, 0,
	0, 304, 0, 118, 437, 0, 197, 0, 119, 120,
	433, 435, 0, 0, 0, 305, 121, 450, 451, 452,
	0, 418, 0, 306, 122, 307, 123, 0, 0, 438,
	308, 124, 309, 0, 259, 0, 0, 125, 0, 126,
	127, 128, 129, 260, 310, 130, 131, 132, 382, 133,
	407, 434, 134, 453, 135, 136, 0, 0, 0, 0,
	0, 137, 207, 311, 138, 312, 428, 139, 140, 0,
	429, 141, 210, 0, 142, 143, 144, 454, 145, 146,
	0, 147, 148, 149, 0, 150, 313, 151, 152, 396,
	153, 0, 154, 155, 0, 156, 261, 424, 157, 158,
	314, 159, 455, 160, 0, 161, 162, 164, 214, 163,
	430, 0, 0, 165, 166, 0, 263, 456, 0, 0,
	262, 431, 432, 405, 167, 168, 169, 170, 0, 0,
	171, 172, 425, 0, 173, 174, 175, 219, 457, 0,
	176, 0, 0, 0, 0, 177, 178, 179, 180, 383,
	0, 411, 399, 400, 401, 398, 387, 0, 0, 379,
	380, 0, 0, 91, 92, 381, 93, 0, 388, 1338,
	0, 393, 0, 0, 0, 94, 95, 181, 440, 441,
	96, 442, 443, 0, 97, 186, 98, 408, 426, 444,
	445, 0, 436, 0, 419, 0, 99, 100, 101, 0,
	102, 0, 103, 0, 303, 104, 105, 0, 420, 422,
	0, 421, 423, 106, 107, 108, 109, 446, 110, 447,
	448, 0, 0, 111, 0, 0, 0, 439, 113, 0,
	0, 0, 0, 392, 114, 427, 406, 0, 115, 116,
	449, 117, 0, 0, 0, 304, 0, 118, 437, 0,
	197, 0, 119, 120, 433, 435, 0, 0, 0, 305,
	121, 450, 451, 452, 0, 418, 0, 306, 122, 307,
	123, 0, 0, 438, 308, 124, 309, 0, 259, 0,
	0, 125, 0, 126, 127, 128, 129, 260, 310, 130,
	131, 132, 382, 133, 407, 434, 134, 453, 135, 136,
	0, 0, 0, 0, 0, 137, 207, 311, 138, 312,
	428, 139, 140, 0, 429, 141, 210, 0, 142, 143,
	144, 454, 145, 146, 0, 147, 148, 149, 0, 150,
	313, 151, 152, 396, 153, 0, 154, 155, 0, 156,
	261, 424, 157, 158, 314, 159, 455, 160, 0, 161,
	162, 164, 214, 163, 430, 0, 0, 165, 166, 0,
	263, 456, 0, 0, 262, 431, 432, 405, 167, 168,
	169, 170, 0, 0, 171, 172, 425, 0, 173, 174,
	175, 219, 457, 0, 176, 0, 0, 0, 0, 177,
	178, 179, 180, 383, 0, 411, 399, 400, 401, 398,
	387, 0, 0, 379, 380, 0, 0, 91, 92, 381,
	93, 0, 388, 1281, 0, 393, 0, 0, 0, 94,
	95, 181, 440, 441, 96, 442, 443, 0, 97, 186,
	98, 408, 426, 444, 445, 0, 436, 0, 419, 0,
	99, 100, 101, 0, 102, 0, 103, 0, 303, 104,
	105, 0, 420, 422, 0, 421, 423, 106, 107, 108,
	109, 446, 110, 447, 448, 0, 0, 111, 0, 0,
	0, 439, 113, 0, 0, 0, 0, 392, 114, 427,
	406, 0, 115, 116, 449, 117, 0, 0, 0, 304,
	0, 118, 437, 0, 197, 0, 119, 120, 433, 435,
	0, 0, 0, 305, 121, 450, 451, 452, 0, 418,
	0, 306, 122, 307, 123, 0, 0, 438, 308, 124,
	309, 0, 259, 0, 0, 125, 0, 126, 127, 128,
	129, 260, 310, 130, 131, 132, 382, 133, 407, 434,
	134, 453, 135, 136, 0, 0, 0, 0, 0, 137,
	207, 311, 138, 312, 428, 139, 140, 0, 429, 141,
	210, 0, 142, 143, 144, 454, 145, 146, 0, 147,
	148, 149, 0, 150, 313, 151, 152, 396, 153, 0,
	154, 155, 0, 156, 261, 424, 157, 158, 314, 159,
	455, 160, 0, 161, 162, 164, 214, 163, 430, 0,
	0, 165, 166, 0, 263, 456, 0, 0, 262, 431,
	432, 405, 167, 168, 169, 170, 0, 0, 171, 172,
	425, 0, 173, 174, 175, 219, 457, 0, 176, 0,
	0, 0, 0, 177, 178, 179, 180, 383, 0, 411,
	399, 400, 401, 398, 387, 0, 0, 379, 380, 0,
	0, 91, 92, 381, 93, 0, 388, 953, 0, 393,
	0, 0, 0, 94, 95, 181, 440, 441, 96, 442,
	443, 0, 97, 186, 98, 408, 426, 444, 445, 0,
	436, 0, 419, 0, 99, 100, 101, 0, 102, 0,
	103, 0, 303, 104, 105, 0, 420, 422, 0, 421,
	423, 106, 107, 108, 109, 446, 110, 447, 448, 0,
	0, 111, 0, 0, 0, 439, 113, 0, 0, 0,
	0, 392, 114, 427, 406, 0, 115, 116, 449, 117,
	0, 0, 0, 304, 0, 118, 437, 0, 197, 0,
	119, 120, 433, 435, 0, 0, 0, 305, 121, 450,
	451, 452, 0, 418, 0, 306, 122, 307, 123, 0,
	0, 438, 308, 124, 309, 0, 259, 0, 0, 125,
	0, 126, 127, 128, 129, 260, 310, 130, 131, 132,
	382, 133, 407, 434, 134, 453, 135, 136, 0, 0,
	0, 0, 0, 137, 207, 311, 138, 312, 428, 139,
	140, 0, 429, 141, 210, 0, 142, 143, 144, 454,
	145, 146, 0, 147, 148, 149, 0, 150, 313, 151,
	152, 396, 153, 0, 154, 155, 0, 156, 261, 424,
	157, 158, 314, 159, 455, 160, 0, 161, 162, 164,
	214, 163, 430, 0, 0, 165, 166, 0, 263, 456,
	0, 0, 262, 431, 432, 405, 167, 168, 169, 170,
	0, 0, 171, 172, 425, 0, 173, 174, 175, 219,
	457, 0, 176, 0, 0, 0, 0, 177, 178, 179,
	180, 383, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 379, 380, 0, 0, 0, 0, 381, 717, 949,
	388, 411, 399, 400, 401, 398, 387, 0, 0, 0,
	0, 0, 0, 91, 92, 0, 93, 0, 0, 0,
	0, 393, 0, 0, 0, 94, 95, 181, 440, 441,
	96, 442, 443, 0, 97, 186, 98, 408, 426, 444,
	445, 0, 436, 0, 419, 0, 99, 100, 101, 0,
	102, 0, 103, 0, 303, 104, 105, 0, 420, 422,
	0, 421, 423, 106, 107, 108, 109, 446, 110, 447,
	448, 0, 0, 111, 0, 0, 0, 439, 113, 0,
	0, 0, 0, 392, 114, 427, 406, 0, 115, 116,
	449, 117, 0, 0, 0, 304, 0, 118, 437, 0,
	197, 0, 119, 120, 433, 435, 0, 0, 0, 305,
	121, 450, 451, 452, 0, 418, 0, 306, 122, 307,
	123, 0, 0, 438, 308, 124, 309, 0, 259, 0,
	0, 125, 0, 126, 127, 128, 129, 260, 310, 130,
	131, 132, 382, 133, 407, 434, 134, 453, 135, 136,
	0, 0, 0, 0, 0, 137, 207, 311, 138, 312,
	428, 139, 140, 0, 429, 141, 210, 0, 142, 143,
	144, 454, 145, 146, 0, 147, 148, 149, 0, 150,
	313, 151, 152, 396, 153, 0, 154, 155, 0, 156,
	261, 424, 157, 158, 314, 159, 455, 160, 0, 161,
	162, 164, 214, 163, 430, 0, 0, 165, 166, 0,
	263, 456, 0, 0, 262, 431, 432, 405, 167, 168,
	169, 170, 0, 0, 171, 172, 425, 0, 173, 174,
	175, 219, 457, 1287, 176, 0, 0, 0, 0, 177,
	178, 179, 180, 383, 0, 411, 399, 400, 401, 398,
	387, 0, 0, 379, 380, 0, 0, 91, 92, 381,
	93, 0, 388, 0, 0, 393, 0, 0, 0, 94,
	95, 181, 440, 441, 96, 442, 443, 0, 97, 186,
	98, 408, 426, 444, 445, 0, 436, 0, 419, 0,
	99, 100, 101, 0, 102, 0, 103, 0, 303, 104,
	105, 0, 420, 422, 0, 421, 423, 106, 107, 108,
	109, 446, 110, 447, 448, 479, 0, 111, 0, 0,
	0, 439, 113, 0, 0, 0, 0, 392, 114, 427,
	406, 0, 115, 116, 449, 117, 0, 0, 0, 304,
	0, 118, 437, 0, 197, 0, 119, 120, 433, 435,
	0, 0, 0, 305, 121, 450, 451, 452, 0, 418,
	0, 306, 122, 307, 123, 0, 0, 438, 308, 124,
	309, 0, 259, 0, 0, 125, 0, 126, 127, 128,
	129, 260, 310, 130, 131, 132, 382, 133, 407, 434,
	134, 453, 135, 136, 0, 0, 0, 0, 0, 137,
	207, 311, 138, 312, 428, 139, 140, 0, 429, 141,
	210, 0, 142, 143, 144, 454, 145, 146, 0, 147,
	148, 149, 0, 150, 313, 151, 152, 396, 153, 0,
	154, 155, 0, 156, 261, 424, 157, 158, 314, 159,
	455, 160, 0, 161, 162, 164, 214, 163, 430, 0,
	0, 165, 166, 0, 263, 456, 0, 0, 262, 431,
	432, 405, 167, 168, 169, 170, 0, 0, 171, 172,
	425, 0, 173, 174, 175, 219, 457, 0, 176, 0,
	0, 0, 0, 177, 178, 179, 180, 383, 0, 411,
	399, 400, 401, 398, 387, 0, 0, 379, 380, 0,
	0, 91, 92, 381, 93, 0, 388, 0, 0, 393,
	0, 0, 0, 94, 95, 181, 440, 441, 96, 442,
	443, 0, 97, 186, 98, 408, 426, 444, 445, 0,
	436, 0, 419, 0, 99, 100, 101, 0, 102, 0,
	103, 0, 303, 104, 105, 0, 420, 422, 0, 421,
	423, 106, 107, 108, 109, 446, 110, 447, 448, 0,
	0, 111, 0, 0, 0, 439, 113, 0, 0, 0,
	0, 392, 114, 427, 406, 0, 115, 116, 449, 117,
	0, 0, 1007, 304, 0, 118, 437, 0, 197, 0,
	119, 120, 433, 435, 0, 0, 0, 305, 121, 450,
	451, 452, 0, 418, 0, 306, 122, 307, 123, 0,
	0, 438, 308, 124, 309, 0, 259, 0, 0, 125,
	0, 126, 127, 128, 129, 260, 310, 130, 131, 132,
	382, 133, 407, 434, 134, 453, 135, 136, 0, 0,
	0, 0, 0, 137, 207, 311, 138, 312, 428, 139,
	140, 0, 429, 141, 210, 0, 142, 143, 144, 454,
	145, 146, 0, 147, 148, 149, 0, 150, 313, 151,
	152, 396, 153, 0, 154, 155, 0, 156, 261, 424,
	157, 158, 314, 159, 455, 160, 0, 161, 162, 164,
	214, 163, 430, 0, 0, 165, 166, 0, 263, 456,
	0, 0, 262, 431, 432, 405, 167, 168, 169, 170,
	0, 0, 171, 172, 425, 0, 173, 174, 175, 219,
	457, 0, 176, 0, 0, 0, 0, 177, 178, 179,
	180, 383, 0, 411, 399, 400, 401, 398, 387, 0,
	0, 379, 380, 0, 0, 91, 92, 381, 93, 0,
	388, 0, 0, 393, 0, 0, 0, 94, 95, 181,
	440, 441, 96, 442, 443, 0, 97, 186, 98, 408,
	426, 444, 445, 0, 436, 0, 419, 0, 99, 100,
	101, 0, 102, 0, 103, 0, 303, 104, 105, 0,
	420, 422, 0, 421, 423, 106, 107, 108, 109, 446,
	110, 447, 448, 0, 0, 111, 0, 0, 0, 439,
	113, 0, 0, 0, 0, 392, 114, 427, 406, 0,
	115, 116, 449, 117, 0, 0, 0, 304, 0, 118,
	437, 0, 197, 0, 119, 120, 433, 435, 0, 0,
	0, 305, 121, 450, 451, 452, 0, 418, 0, 306,
	122, 307, 123, 0, 0, 438, 308, 124, 309, 0,
	259, 0, 0, 125, 0, 126, 127, 128, 129, 260,
	310, 130, 131, 132, 382, 133, 407, 434, 134, 453,
	135, 136, 0, 0, 0, 0, 0, 137, 207, 311,
	138, 312, 428, 139, 140, 0, 429, 141, 210, 0,
	142, 143, 144, 454, 145, 146, 0, 147, 148, 149,
	0, 150, 313, 151, 152, 396, 153, 0, 154, 155,
	0, 156, 261, 424, 157, 158, 314, 159, 455, 160,
	0, 161, 162, 164, 214, 163, 430, 0, 0, 165,
	166, 0, 263, 456, 0, 0, 262, 431, 432, 405,
	167, 168, 169, 170, 0, 0, 171, 172, 425, 0,
	173, 174, 175, 219, 457, 0, 176, 0, 0, 0,
	0, 177, 178, 179, 180, 383, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 379, 380, 377, 0, 0,
	0, 381, 0, 0, 388, 411, 399, 400, 401, 398,
	387, 0, 0, 0, 0, 0, 0, 91, 92, 658,
	93, 0, 0, 0, 0, 393, 0, 0, 0, 94,
	95, 181, 440, 441, 96, 442, 443, 0, 97, 186,
	98, 408, 426, 444, 445, 0, 436, 0, 419, 0,
	99, 100, 101, 0, 102, 0, 103, 0, 303, 104,
	105, 0, 420, 422, 0, 421, 423, 106, 107, 108,
	109, 446, 110, 447, 448, 0, 0, 111, 0, 0,
	0, 439, 113, 0, 0, 0, 0, 392, 114, 427,
	406, 0, 115, 116, 449, 117, 0, 0, 0, 304,
	0, 118, 437, 0, 197, 0, 119, 120, 433, 435,
	0, 0, 0, 305, 121, 450, 451, 452, 0, 418,
	0, 306, 122, 307, 123, 0, 0, 438, 308, 124,
	309, 0, 259, 0, 0, 125, 0, 126, 127, 128,
	129, 260, 310, 130, 131, 132, 382, 133, 407, 434,
	134, 453, 135, 136, 0, 0, 0, 0, 0, 137,
	207, 311, 138, 312, 428, 139, 140, 0, 429, 141,
	210, 0, 142, 143, 144, 454, 145, 146, 0, 147,
	148, 149, 0, 150, 313, 151, 152, 396, 153, 0,
	154, 155, 0, 156, 261, 424, 157, 158, 314, 159,
	455, 160, 0, 161, 162, 164, 214, 163, 430, 0,
	0, 165, 166, 0, 263, 456, 0, 0, 262, 431,
	432, 405, 167, 168, 169, 170, 0, 0, 171, 172,
	425, 0, 173, 174, 175, 219, 457, 0, 176, 0,
	0, 0, 0, 177, 178, 179, 180, 383, 0, 411,
	399, 400, 401, 398, 387, 0, 0, 379, 380, 0,
	0, 91, 92, 381, 93, 0, 388, 0, 0, 393,
	0, 0, 0, 94, 95, 181, 440, 441, 96, 442,
	443, 0, 97, 186, 98, 408, 426, 444, 445, 0,
	436, 0, 419, 0, 99, 100, 101, 0, 102, 0,
	103, 0, 303, 104, 1600, 0, 420, 422, 0, 421,
	423, 106, 107, 108, 109, 446, 110, 447, 448, 0,
	0, 111, 0, 0, 0, 439, 113, 0, 0, 0,
	0, 392, 114, 427, 406, 0, 115, 116, 449, 117,
	0, 0, 0, 304, 0, 118, 437, 0, 197, 0,
	119, 120, 433, 435, 0, 0, 0, 305, 121, 450,
	451, 452, 0, 418, 0, 306, 122, 307, 123, 0,
	0, 438, 308, 124, 309, 0, 259, 0, 0, 125,
	0, 126, 127, 128, 129, 260, 310, 130, 131, 132,
	382, 133, 407, 434, 134, 453, 135, 136, 0, 0,
	0, 0, 0, 137, 207, 311, 138, 312, 428, 139,
	140, 0, 429, 141, 210, 0, 142, 143, 144, 454,
	145, 146, 0, 147, 148, 149, 0, 150, 313, 151,
	152, 396, 153, 0, 154, 155, 0, 156, 261, 424,
	157, 158, 314, 159, 455, 160, 0, 161, 162, 164,
	214, 163, 430, 0, 0, 165, 166, 0, 263, 456,
	0, 0, 262, 431, 432, 405, 167, 168, 1599, 170,
	0, 0, 171, 172, 425, 0, 173, 174, 175, 219,
	457, 0, 176, 0, 0, 0, 0, 177, 178, 179,
	180, 383, 0, 411, 399, 400, 401, 398, 387, 0,
	0, 379, 380, 0, 0, 91, 92, 381, 93, 0,
	388, 0, 0, 393, 0, 0, 0, 94, 95, 1598,
	440, 441, 96, 442, 443, 0, 97, 186, 98, 408,
	426, 444, 445, 0, 436, 0, 419, 0, 99, 100,
	101, 0, 102, 0, 103, 0, 303, 104, 1600, 0,
	420, 422, 0, 421, 423, 106, 107, 108, 109, 446,
	110, 447, 448, 0, 0, 111, 0, 0, 0, 439,
	113, 0, 0, 0, 0, 392, 114, 427, 406, 0,
	115, 116, 449, 117, 0, 0, 0, 304, 0, 118,
	437, 0, 197, 0, 119, 120, 433, 435, 0, 0,
	0, 305, 121, 450, 451, 452, 0, 418, 0, 306,
	122, 307, 123, 0, 0, 438, 308, 124, 309, 0,
	259, 0, 0, 125, 0, 126, 127, 128, 129, 260,
	310, 130, 131, 132, 382, 133, 407, 434, 134, 453,
	135, 136, 0, 0, 0, 0, 0, 137, 207, 311,
	138, 312, 428, 139, 140, 0, 429, 141, 210, 0,
	142, 143, 144, 454, 145, 146, 0, 147, 148, 149,
	0, 150, 313, 151, 152, 396, 153, 0, 154, 155,
	0, 156, 261, 424, 157, 158, 314, 159, 455, 160,
	0, 161, 162, 164, 214, 163, 430, 0, 0, 165,
	166, 0, 263, 456, 0, 0, 262, 431, 432, 405,
	167, 168, 1599, 170, 0, 0, 171, 172, 425, 0,
	173, 174, 175, 219, 457, 0, 176, 0, 0, 0,
	0, 177, 178, 179, 180, 383, 0, 411, 399, 400,
	401, 398, 387, 0, 0, 379, 380, 0, 0, 91,
	92, 381, 93, 0, 388, 0, 0, 393, 0, 0,
	0, 94, 95, 181, 440, 441, 96, 442, 443, 0,
	97, 186, 98, 408, 426, 444, 445, 0, 436, 0,
	419, 0, 99, 100, 101, 0, 102, 0, 103, 0,
	303, 104, 105, 0, 420, 422, 0, 421, 423, 106,
	107, 108, 109, 446, 110, 447, 448, 0, 0, 111,
	0, 0, 0, 439, 113, 0, 0, 0, 0, 392,
	114, 427, 406, 0, 115, 116, 449, 117, 0, 0,
	0, 304, 0, 118, 437, 0, 197, 0, 119, 120,
	433, 435, 0, 0, 0, 305, 121, 450, 451, 452,
	0, 418, 0, 306, 122, 307, 123, 0, 0, 438,
	308, 124, 309, 0, 259, 0, 0, 125, 0, 126,
	127, 128, 129, 260, 310, 130, 131, 132, 382, 133,
	407, 434, 134, 453, 135, 136, 0, 0, 0, 0,
	0, 137, 207, 311, 138, 312, 428, 139, 140, 0,
	429, 141, 210, 0, 142, 143, 144, 454, 145, 146,
	0, 147, 148, 149, 0, 150, 313, 151, 152, 396,
	153, 0, 154, 155, 0, 156, 261, 424, 157, 158,
	314, 159, 455, 160, 0, 161, 162, 164, 214, 163,
	430, 0, 0, 165, 166, 0, 263, 456, 0, 0,
	262, 431, 432, 405, 167, 168, 169, 170, 0, 0,
	171, 172, 425, 0, 173, 174, 175, 219, 457, 0,
	176, 0, 0, 0, 0, 177, 178, 179, 180, 383,
	0, 411, 399, 400, 401, 398, 387, 0, 0, 379,
	380, 0, 0, 91, 92, 381, 93, 0, 388, 0,
	0, 393, 0, 0, 0, 94, 95, 181, 440, 441,
	96, 442, 443, 0, 97, 186, 98, 408, 426, 444,
	445, 0, 436, 0, 419, 0, 99, 100, 101, 0,
	102, 0, 103, 0, 303, 104, 105, 0, 420, 422,
	0, 421, 423, 106, 107, 108, 109, 446, 110, 447,
	448, 0, 0, 111, 0, 0, 0, 439, 113, 0,
	0, 0, 0, 392, 114, 427, 406, 0, 115, 116,
	449, 117, 0, 0, 0, 304, 0, 118, 437, 0,
	197, 0, 119, 120, 433, 435, 0, 0, 0, 305,
	121, 450, 451, 452, 0, 418, 0, 306, 122, 307,
	123, 0, 0, 438, 308, 124, 309, 0, 259, 0,
	0, 125, 0, 126, 127, 128, 129, 260, 310, 130,
	131, 132, 0, 133, 407, 434, 134, 453, 135, 136,
	0, 0, 0, 0, 0, 137, 207, 311, 138, 312,
	428, 139, 140, 0, 429, 141, 210, 0, 142, 143,
	144, 454, 145, 146, 0, 147, 148, 149, 0, 150,
	313, 151, 152, 997, 153, 0, 154, 155, 0, 156,
	261, 424, 157, 158, 314, 159, 455, 160, 0, 161,
	162, 164, 214, 163, 430, 0, 0, 165, 166, 0,
	263, 456, 0, 0, 262, 431, 432, 405, 167, 168,
	169, 170, 0, 0, 171, 172, 425, 0, 173, 174,
	175, 219, 457, 0, 176, 0, 0, 0, 0, 177,
	178, 179, 180, 411, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 993, 994, 91, 92, 0, 93, 995,
	0, 0, 996, 0, 0, 0, 0, 94, 95, 181,
	182, 183, 96, 184, 185, 0, 97, 186, 98, 0,
	426, 187, 188, 0, 436, 0, 419, 0, 99, 100,
	101, 0, 102, 0, 103, 0, 303, 104, 105, 0,
	420, 422, 0, 421, 423, 106, 107, 108, 109, 190,
	110, 191, 192, 0, 0, 111, 0, 0, 0, 112,
	113, 0, 0, 0, 0, 193, 114, 427, 0, 0,
	115, 116, 195, 117, 0, 0, 0, 304, 0, 118,
	437, 0, 197, 0, 119, 120, 433, 435, 0, 0,
	0, 305, 121, 200, 201, 202, 0, 203, 0, 306,
	122, 307, 123, 0, 0, 438, 308, 124, 309, 0,
	259, 0, 0, 125, 0, 126, 127, 128, 129, 260,
	310, 130, 131, 132, 0, 133, 0, 434, 134, 206,
	135, 136, 0, 0, 0, 0, 0, 137, 207, 311,
	138, 312, 428, 139, 140, 0, 429, 141, 210, 0,
	142, 143, 144, 211, 145, 146, 0, 147, 148, 149,
	0, 150, 313, 151, 152, 212, 153, 0, 154, 155,
	0, 156, 261, 424, 157, 158, 314, 159, 213, 160,
	0, 161, 162, 164, 214, 163, 430, 0, 0, 165,
	166, 0, 263, 216, 0, 0, 262, 431, 432, 0,
	167, 168, 169, 170, 0, 0, 171, 172, 425, 0,
	173, 174, 175, 219, 220, 0, 176, 0, 0, 0,
	0, 177, 178, 179, 180, 297, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 91, 92, 0,
	93, 0, 0, 0, 1395, 0, 0, 0, 0, 94,
	95, 181, 182, 183, 96, 184, 185, 0, 97, 186,
	98, 0, 0, 187, 188, 0, 189, 0, 302, 0,
	99, 100, 101, 0, 102, 0, 103, 0, 303, 104,
	105, 0, 0, 0, 0, 0, 0, 106, 107, 108,
	109, 190, 110, 191, 192, 0, 0, 111, 0, 0,
	0, 112, 113, 0, 0, 0, 0, 193, 114, 194,
	0, 0, 115, 116, 195, 117, 0, 0, 0, 304,
	0, 118, 196, 0, 197, 0, 119, 120, 198, 199,
	0, 0, 0, 305, 121, 200, 201, 202, 0, 203,
	0, 306, 122, 307, 123, 0, 0, 204, 308, 124,
	309, 0, 259, 0, 0, 125, 0, 126, 127, 128,
	129, 260, 310, 130, 131, 132, 0, 133, 0, 205,
	134, 206, 135, 136, 0, 0, 0, 0, 0, 137,
	207, 311, 138, 312, 208, 139, 140, 0, 209, 141,
	210, 0, 142, 143, 144, 211, 145, 146, 0, 147,
	148, 149, 0, 150, 313, 151, 152, 212, 153, 0,
	154, 155, 45, 156, 261, 0, 157, 158, 314, 159,
	213, 160, 0, 161, 162, 164, 214, 163, 215, 0,
	47, 165, 166, 0, 263, 216, 0, 0, 262, 217,
	218, 0, 167, 168, 169, 170, 0, 0, 171, 172,
	0, 0, 173, 174, 175, 301, 220, 0, 176, 0,
	0, 0, 43, 177, 178, 179, 180, 0, 44, 297,
	533, 537, 0, 538, 528, 0, 0, 0, 0, 0,
	0, 91, 92, 0, 93, 0, 42, 0, 0, 0,
	0, 0, 0, 94, 95, 181, 182, 183, 96, 184,
	185, 0, 97, 186, 98, 0, 0, 187, 188, 0,
	189, 0, 302, 0, 99, 100, 101, 0, 102, 0,
	103, 0, 303, 104, 105, 0, 0, 0, 0, 0,
	0, 106, 107, 108, 109, 190, 110, 191, 192, 541,
	0, 111, 0, 0, 0, 112, 113, 0, 0, 0,
	0, 193, 114, 194, 530, 0, 115, 116, 195, 117,
	0, 0, 0, 304, 0, 118, 196, 0, 197, 0,
	119, 120, 198, 199, 0, 0, 0, 305, 121, 200,
	201, 202, 0, 203, 0, 306, 122, 307, 123, 0,
	0, 204, 308, 124, 309, 0, 259, 0, 0, 125,
	0, 126, 127, 128, 129, 260, 310, 130, 131, 132,
	0, 133, 0, 205, 134, 206, 135, 136, 0, 531,
	0, 0, 0, 137, 207, 311, 138, 312, 208, 139,
	140, 0, 209, 141, 210, 0, 142, 143, 144, 211,
	145, 146, 0, 147, 148, 149, 0, 150, 313, 151,
	152, 212, 153, 0, 154, 155, 0, 156, 261, 0,
	157, 158, 314, 159, 213, 160, 0, 161, 162, 164,
	214, 163, 215, 0, 0, 165, 166, 0, 263, 216,
	0, 0, 262, 217, 218, 529, 167, 168, 169, 170,
	0, 0, 171, 172, 0, 0, 173, 174, 175, 219,
	220, 0, 176, 0, 0, 0, 0, 177, 178, 179,
	180, 297, 533, 537, 0, 538, 528, 0, 0, 0,
	0, 539, 534, 91, 92, 0, 93, 0, 0, 0,
	0, 0, 0, 0, 0, 94, 95, 181, 182, 183,
	96, 184, 185, 0, 97, 186, 98, 0, 0, 187,
	188, 0, 189, 0, 302, 0, 99, 100, 101, 0,
	102, 0, 103, 0, 303, 104, 105, 0, 0, 0,
	0, 0, 0, 106, 107, 108, 109, 190, 110, 191,
	192, 524, 0, 111, 0, 0, 0, 112, 113, 0,
	0, 0, 0, 193, 114, 194, 530, 0, 115, 116,
	195, 117, 0, 0, 0, 304, 0, 118, 196, 0,
	197, 0, 119, 120, 198, 199, 0, 0, 0, 305,
	121, 200, 201, 202, 0, 203, 0, 306, 122, 307,
	123, 0, 0, 204, 308, 124, 309, 0, 259, 0,
	0, 125, 0, 126, 127, 128, 129, 260, 310, 130,
	131, 132, 0, 133, 0, 205, 134, 206, 135, 136,
	0, 531, 0, 0, 0, 137, 207, 311, 138, 312,
	208, 139, 140, 0, 209, 141, 210, 0, 142, 143,
	144, 211, 145, 146, 0, 147, 148, 149, 0, 150,
	313, 151, 152, 212, 153, 0, 154, 155, 0, 156,
	261, 0, 157, 158, 314, 159, 213, 160, 0, 161,
	162, 164, 214, 163, 215, 0, 0, 165, 166, 0,
	263, 216, 0, 0, 262, 217, 218, 529, 167, 168,
	169, 170, 0, 0, 171, 172, 0, 0, 173, 174,
	175, 219, 220, 0, 176, 0, 0, 0, 0, 177,
	178, 179, 180, 297, 533, 537, 0, 538, 528, 0,
	0, 0, 0, 539, 534, 91, 92, 0, 93, 0,
	0, 0, 0, 0, 0, 0, 0, 94, 95, 181,
	182, 183, 96, 184, 185, 0, 97, 186, 98, 0,
	0, 187, 188, 0, 189, 0, 302, 0, 99, 100,
	101, 0, 102, 0, 103, 0, 303, 104, 105, 0,
	0, 0, 0, 0, 0, 106, 107, 108, 109, 190,
	110, 191, 192, 0, 0, 111, 0, 0, 0, 112,
	113, 0, 0, 0, 0, 193, 114, 194, 530, 0,
	115, 116, 195, 117, 0, 0, 0, 304, 0, 118,
	196, 0, 197, 0, 119, 120, 198, 199, 0, 0,
	0, 305, 121, 200, 201, 202, 0, 203, 0, 306,
	122, 307, 123, 0, 0, 204, 308, 124, 309, 0,
	259, 0, 0, 125, 0, 126, 127, 128, 129, 260,
	310, 130, 131, 132, 0, 133, 0, 205, 134, 206,
	135, 136, 0, 531, 0, 0, 0, 137, 207, 311,
	138, 312, 208, 139, 140, 0, 209, 141, 210, 0,
	142, 143, 144, 211, 145, 146, 0, 147, 148, 149,
	0, 150, 313, 151, 152, 212, 153, 0, 154, 155,
	0, 156, 261, 0, 157, 158, 314, 159, 213, 160,
	0, 161, 162, 164, 214, 163, 215, 0, 0, 165,
	166, 0, 263, 216, 0, 0, 262, 217, 218, 529,
	167, 168, 169, 170, 0, 0, 171, 172, 0, 0,
	173, 174, 175, 219, 220, 88, 176, 0, 0, 0,
	0, 177, 178, 179, 180, 0, 0, 91, 92, 0,
	93, 0, 0, 0, 0, 539, 534, 0, 0, 94,
	95, 181, 182, 183, 96, 184, 185, 0, 97, 186,
	98, 0, 0, 187, 188, 0, 189, 0, 0, 0,
	99, 100, 101, 0, 102, 0, 103, 0, 0, 104,
	105, 0, 0, 0, 0, 0, 0, 106, 107, 108,
	109, 190, 110, 191, 192, 0, 0, 111, 0, 0,
	0, 112, 113, 0, 0, 0, 0, 193, 114, 194,
	0, 0, 115, 116, 195, 117, 0, 0, 0, 0,
	0, 118, 196, 0, 197, 0, 119, 120, 198, 199,
	0, 0, 0, 0, 121, 200, 201, 202, 0, 203,
	0, 0, 122, 0, 123, 0, 0, 204, 0, 124,
	0, 0, 259, 0, 0, 125, 0, 126, 127, 128,
	129, 260, 0, 130, 131, 132, 0, 133, 0, 205,
	134, 206, 135, 136, 0, 0, 272, 0, 0, 137,
	207, 0, 138, 0, 208, 139, 140, 0, 209, 141,
	210, 0, 142, 143, 144, 211, 145, 146, 0, 147,
	148, 149, 0, 150, 0, 151, 152, 212, 153, 0,
	154, 155, 45, 156, 261, 0, 157, 158, 0, 159,
	213, 160, 0, 161, 162, 164, 214, 163, 215, 0,
	47, 165, 166, 0, 263, 216, 0, 0, 262, 217,
	218, 0, 167, 168, 169, 170, 0, 0, 171, 172,
	0, 0, 173, 174, 175, 301, 220, 0, 176, 0,
	0, 0, 43, 177, 178, 179, 180, 88, 44, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 91,
	92, 0, 93, 0, 0, 0, 864, 0, 0, 0,
	0, 94, 95, 181, 182, 183, 96, 184, 185, 0,
	97, 186, 98, 0, 0, 187, 188, 0, 189, 0,
	0, 0, 99, 100, 101, 0, 102, 0, 103, 0,
	0, 104, 105, 0, 0, 0, 0, 0, 0, 106,
	107, 108, 109, 190, 110, 191, 192, 0, 0, 111,
	0, 0, 0, 112, 113, 0, 0, 0, 0, 193,
	114, 194, 0, 0, 115, 116, 195, 117, 0, 0,
	0, 0, 0, 118, 196, 0, 197, 0, 119, 120,
	198, 199, 0, 0, 0, 0, 121, 200, 201, 202,
	0, 203, 0, 0, 122, 0, 123, 0, 0, 204,
	0, 124, 0, 0, 259, 0, 0, 125, 0, 126,
	127, 128, 129, 260, 0, 130, 131, 132, 0, 133,
	0, 205, 134, 206, 135, 136, 0, 0, 0, 0,
	0, 137, 207, 0, 138, 0, 208, 139, 140, 0,
	209, 141, 210, 0, 142, 143, 144, 211, 145, 146,
	0, 147, 148, 149, 0, 150, 0, 151, 152, 212,
	153, 0, 154, 155, 45, 156, 261, 0, 157, 158,
	0, 159, 213, 160, 0, 161, 162, 164, 214, 163,
	215, 0, 47, 165, 166, 0, 263, 216, 0, 0,
	262, 217, 218, 0, 167, 168, 169, 170, 0, 0,
	171, 172, 0, 0, 173, 174, 175, 301, 220, 0,
	176, 0, 0, 0, 43, 177, 178, 179, 180, 88,
	44, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 91, 92, 0, 93, 0, 0, 0, 42, 0,
	1097, 0, 0, 94, 95, 181, 182, 183, 96, 184,
	185, 0, 97, 186, 98, 0, 0, 187, 188, 0,
	189, 0, 0, 0, 99, 100, 101, 0, 102, 0,
	103, 0, 0, 104, 105, 0, 0, 0, 0, 0,
	0, 106, 107, 108, 109, 190, 110, 191, 192, 0,
	0, 111, 0, 0, 0, 112, 113, 0, 0, 0,
	0, 193, 114, 194, 0, 0, 115, 116, 195, 117,
	0, 0, 0, 0, 0, 118, 196, 0, 197, 0,
	119, 120, 198, 199, 0, 0, 0, 0, 121, 200,
	201, 202, 0, 203, 0, 0, 122, 0, 123, 0,
	0, 204, 0, 124, 0, 0, 259, 0, 0, 125,
	0, 126, 127, 128, 129, 260, 0, 130, 131, 132,
	0, 133, 0, 205, 134, 206, 135, 136, 0, 0,
	0, 0, 0, 137, 207, 0, 138, 0, 208, 139,
	140, 0, 209, 141, 210, 0, 142, 143, 144, 211,
	145, 146, 0, 147, 148, 149, 0, 150, 0, 151,
	152, 212, 153, 0, 154, 155, 0, 156, 261, 0,
	157, 158, 0, 159, 213, 160, 0, 161, 162, 164,
	214, 163, 215, 0, 0, 165, 166, 0, 263, 216,
	0, 0, 262, 217, 218, 0, 167, 168, 169, 170,
	0, 88, 171, 172, 0, 0, 173, 174, 175, 219,
	220, 0, 176, 91, 92, 0, 93, 177, 178, 179,
	180, 0, 0, 0, 0, 94, 95, 181, 182, 183,
	96, 184, 185, 0, 97, 186, 98, 0, 0, 187,
	188, 368, 189, 0, 0, 0, 99, 100, 101, 0,
	102, 0, 103, 0, 0, 104, 105, 0, 0, 0,
	0, 0, 0, 106, 107, 108, 109, 190, 110, 191,
	192, 0, 0, 111, 0, 0, 0, 112, 113, 0,
	0, 0, 0, 193, 114, 194, 0, 0, 115, 116,
	195, 117, 0, 0, 0, 0, 0, 118, 196, 0,
	197, 0, 119, 120, 198, 199, 0, 0, 0, 0,
	121, 200, 201, 202, 0, 203, 0, 0, 122, 0,
	123, 0, 0, 204, 0, 124, 0, 0, 259, 0,
	0, 125, 0, 126, 127, 128, 129, 260, 0, 130,
	131, 132, 0, 133, 0, 205, 134, 206, 135, 136,
	0, 0, 272, 0, 0, 137, 207, 0, 138, 0,
	208, 139, 140, 0, 209, 141, 210, 0, 142, 143,
	144, 211, 145, 146, 0, 147, 148, 149, 0, 150,
	0, 151, 152, 212, 153, 0, 154, 155, 0, 156,
	261, 0, 157, 158, 0, 159, 213, 160, 0, 161,
	162, 164, 214, 163, 215, 0, 0, 165, 166, 0,
	263, 216, 0, 0, 262, 217, 218, 0, 167, 168,
	169, 170, 0, 0, 171, 172, 0, 0, 173, 174,
	175, 219, 220, 0, 176, 0, 0, 0, 0, 177,
	178, 179, 180, 88, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 91, 92, 0, 93, 0,
	0, 0, 864, 0, 0, 0, 0, 94, 95, 181,
	182, 183, 96, 184, 185, 0, 97, 186, 98, 0,
	0, 187, 188, 0, 189, 0, 0, 0, 99, 100,
	101, 0, 102, 0, 103, 0, 0, 104, 105, 0,
	0, 0, 0, 0, 0, 106, 107, 108, 109, 190,
	110, 191, 192, 0, 0, 111, 0, 0, 0, 112,
	113, 0, 0, 0, 0, 193, 114, 194, 0, 0,
	115, 116, 195, 117, 0, 0, 0, 0, 0, 118,
	196, 0, 197, 0, 119, 120, 198, 199, 0, 0,
	0, 0, 121, 200, 201, 202, 0, 203, 0, 0,
	122, 0, 123, 0, 0, 204, 0, 124, 0, 0,
	259, 0, 0, 125, 0, 126, 127, 128, 129, 260,
	0, 130, 131, 132, 0, 133, 0, 205, 134, 206,
	135, 136, 0, 0, 0, 0, 0, 137, 207, 0,
	138, 0, 208, 139, 140, 0, 209, 141, 210, 0,
	142, 143, 144, 211, 145, 146, 0, 147, 148, 149,
	0, 150, 0, 151, 152, 212, 153, 0, 154, 155,
	0, 156, 261, 0, 157, 158, 0, 159, 213, 160,
	0, 161, 162, 164, 214, 163, 215, 0, 0, 165,
	166, 0, 263, 216, 0, 0, 262, 217, 218, 0,
	167, 168, 169, 170, 0, 0, 171, 172, 0, 0,
	173, 174, 175, 219, 220, 0, 176, 0, 0, 0,
	0, 177, 178, 179, 180, 88, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 91, 92, 0,
	93, 0, 0, 0, 802, 0, 0, 0, 0, 94,
	95, 181, 182, 183, 96, 184, 185, 0, 97, 186,
	98, 0, 0, 187, 188, 0, 189, 0, 0, 0,
	99, 100, 101, 0, 102, 0, 103, 0, 0, 104,
	105, 0, 0, 0, 0, 0, 0, 106, 107, 108,
	109, 190, 110, 191, 192, 0, 0, 111, 0, 0,
	0, 112, 113, 0, 0, 0, 0, 193, 114, 194,
	0, 0, 115, 116, 195, 117, 0, 0, 0, 0,
	0, 118, 196, 0, 197, 0, 119, 120, 198, 199,
	0, 0, 0, 0, 121, 200, 201, 202, 0, 203,
	0, 0, 122, 0, 123, 0, 0, 204, 0, 124,
	0, 0, 259, 0, 0, 125, 0, 126, 127, 128,
	129, 260, 0, 130, 131, 132, 0, 133, 0, 205,
	134, 206, 135, 136, 0, 0, 0, 0, 0, 137,
	207, 0, 138, 0, 208, 139, 140, 0, 209, 141,
	210, 0, 142, 143, 144, 211, 145, 146, 0, 147,
	148, 149, 0, 150, 0, 151, 152, 212, 153, 0,
	154, 155, 0, 156, 261, 0, 157, 158, 0, 159,
	213, 160, 0, 161, 162, 164, 214, 163, 215, 0,
	0, 165, 166, 0, 263, 216, 0, 0, 262, 217,
	218, 0, 167, 168, 169, 170, 0, 0, 171, 172,
	0, 0, 173, 174, 175, 219, 220, 0, 176, 0,
	0, 0, 0, 177, 178, 179, 180, 88, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 91,
	92, 0, 93, 0, 0, 0, 1305, 0, 0, 0,
	0, 94, 95, 181, 182, 183, 96, 184, 185, 0,
	97, 186, 98, 0, 0, 187, 188, 0, 189, 0,
	0, 0, 99, 100, 101, 0, 102, 0, 103, 0,
	0, 104, 105, 0, 0, 0, 0, 0, 0, 106,
	107, 108, 109, 190, 110, 191, 192, 0, 0, 111,
	0, 0, 0, 112, 113, 0, 0, 0, 0, 193,
	114, 194, 0, 0, 115, 116, 195, 117, 0, 0,
	0, 0, 0, 118, 196, 0, 197, 0, 119, 120,
	198, 199, 0, 0, 0, 0, 121, 200, 201, 202,
	0, 203, 0, 0, 122, 0, 123, 0, 0, 204,
	0, 124, 0, 0, 259, 0, 0, 125, 0, 126,
	127, 128, 129, 260, 0, 130, 131, 132, 0, 133,
	0, 205, 134, 206, 135, 136, 0, 0, 0, 0,
	0, 137, 207, 0, 138, 0, 208, 139, 140, 0,
	209, 141, 210, 0, 142, 143, 144, 211, 145, 146,
	0, 147, 148, 149, 0, 150, 0, 151, 152, 212,
	153, 0, 154, 155, 0, 156, 261, 0, 157, 158,
	0, 159, 213, 160, 0, 161, 162, 164, 214, 163,
	215, 0, 0, 165, 166, 0, 263, 216, 0, 0,
	262, 217, 218, 0, 167, 168, 169, 170, 0, 0,
	171, 172, 0, 0, 173, 174, 175, 219, 220, 0,
	176, 0, 0, 0, 0, 177, 178, 179, 180, 88,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 91, 92, 0, 93, 0, 0, 0, 468, 0,
	0, 0, 0, 94, 95, 181, 182, 183, 96, 184,
	185, 0, 97, 186, 98, 0, 0, 187, 188, 0,
	189, 0, 0, 0, 99, 100, 101, 0, 102, 0,
	103, 0, 0, 104, 105, 0, 0, 0, 0, 0,
	0, 106, 107, 510, 109, 190, 110, 191, 192, 0,
	0, 111, 0, 0, 0, 112, 113, 0, 0, 0,
	0, 193, 114, 194, 0, 0, 115, 116, 195, 117,
	0, 0, 0, 0, 0, 118, 196, 0, 197, 0,
	119, 120, 198, 199, 0, 0, 0, 0, 121, 200,
	201, 202, 0, 203, 0, 0, 122, 0, 123, 0,
	0, 204, 0, 124, 0, 0, 259, 0, 0, 125,
	0, 126, 127, 128, 129, 260, 0, 130, 131, 132,
	0, 133, 0, 205, 134, 206, 135, 136, 0, 0,
	0, 0, 0, 137, 207, 0, 138, 0, 208, 139,
	140, 0, 209, 141, 210, 0, 142, 143, 144, 211,
	145, 146, 0, 147, 148, 149, 0, 150, 0, 151,
	152, 212, 153, 0, 154, 155, 0, 156, 261, 0,
	157, 158, 0, 159, 213, 160, 0, 161, 162, 164,
	214, 163, 215, 0, 509, 165, 166, 0, 263, 216,
	0, 0, 262, 217, 218, 0, 167, 168, 169, 170,
	0, 88, 171, 172, 0, 0, 173, 174, 175, 219,
	220, 0, 176, 91, 92, 0, 93, 177, 178, 179,
	180, 0, 0, 0, 0, 94, 95, 181, 182, 183,
	96, 184, 185, 513, 97, 186, 98, 0, 0, 187,
	188, 0, 189, 0, 0, 0, 99, 100, 101, 0,
	102, 0, 103, 0, 0, 104, 105, 0, 0, 0,
	0, 0, 0, 106, 107, 108, 109, 190, 110, 191,
	192, 0, 0, 111, 0, 0, 0, 112, 113, 0,
	0, 0, 0, 193, 114, 194, 0, 0, 115, 116,
	195, 117, 0, 0, 0, 0, 0, 118, 196, 0,
	197, 0, 119, 120, 198, 199, 0, 0, 0, 0,
	121, 200, 201, 202, 0, 203, 0, 0, 122, 0,
	123, 0, 0, 204, 0, 124, 0, 0, 259, 0,
	0, 125, 0, 126, 127, 128, 129, 260, 0, 130,
	131, 132, 0, 133, 0, 205, 134, 206, 135, 136,
	0, 0, 0, 0, 0, 137, 207, 0, 138, 0,
	208, 139, 140, 0, 209, 141, 210, 0, 142, 143,
	144, 211, 145, 146, 0, 147, 148, 149, 0, 150,
	0, 151, 152, 212, 153, 0, 154, 155, 0, 156,
	261, 0, 157, 158, 0, 159, 213, 160, 0, 161,
	162, 164, 214, 163, 215, 0, 0, 165, 166, 0,
	263, 216, 0, 0, 262, 217, 218, 0, 167, 168,
	169, 170, 0, 297, 171, 172, 0, 0, 173, 174,
	175, 219, 220, 0, 176, 91, 92, 0, 93, 177,
	178, 179, 180, 0, 0, 0, 0, 94, 95, 181,
	182, 183, 96, 184, 185, 513, 97, 186, 98, 0,
	0, 187, 188, 0, 189, 0, 302, 0, 99, 100,
	101, 0, 102, 0, 103, 0, 303, 104, 105, 0,
	0, 0, 0, 0, 0, 106, 107, 108, 109, 190,
	110, 191, 192, 0, 0, 111, 0, 0, 0, 112,
	113, 0, 0, 0, 0, 193, 114, 194, 0, 0,
	115, 116, 195, 117, 0, 0, 0, 304, 0, 118,
	196, 0, 197, 0, 119, 120, 198, 199, 0, 0,
	0, 305, 121, 200, 201, 202, 0, 203, 0, 306,
	122, 307, 123, 0, 0, 204, 308, 124, 309, 0,
	259, 0, 0, 125, 0, 126, 127, 128, 129, 260,
	310, 130, 131, 132, 0, 133, 0, 205, 134, 206,
	135, 136, 0, 0, 0, 0, 0, 137, 207, 311,
	138, 312, 208, 139, 140, 0, 209, 141, 210, 0,
	142, 143, 144, 211, 145, 146, 0, 147, 148, 149,
	0, 150, 313, 151, 152, 212, 153, 0, 154, 155,
	0, 156, 261, 0, 157, 158, 314, 159, 213, 160,
	0, 161, 162, 164, 214, 163, 215, 0, 0, 165,
	166, 0, 263, 216, 0, 0, 262, 217, 218, 0,
	167, 168, 169, 170, 0, 88, 171, 172, 0, 0,
	173, 174, 175, 219, 220, 0, 176, 91, 92, 0,
	93, 177, 178, 179, 180, 0, 0, 0, 0, 94,
	95, 181, 182, 183, 96, 184, 185, 0, 97, 186,
	98, 0, 0, 187, 188, 777, 189, 0, 0, 0,
	99, 100, 101, 0, 102, 775, 103, 0, 0, 104,
	105, 0, 0, 0, 0, 0, 0, 106, 107, 108,
	109, 190, 110, 191, 192, 0, 0, 111, 0, 0,
	0, 112, 113, 0, 0, 0, 0, 193, 114, 194,
	0, 0, 115, 116, 195, 117, 0, 780, 0, 0,
	0, 118, 196, 0, 197, 0, 119, 120, 198, 199,
	0, 842, 0, 0, 121, 200, 201, 202, 0, 203,
	0, 0, 122, 0, 123, 0, 0, 204, 0, 124,
	0, 0, 259, 0, 0, 125, 0, 126, 127, 128,
	129, 260, 0, 130, 131, 132, 0, 133, 0, 205,
	134, 206, 135, 136, 0, 0, 0, 0, 0, 137,
	207, 0, 138, 0, 208, 139, 140, 0, 209, 141,
	210, 779, 142, 143, 144, 211, 145, 146, 0, 147,
	148, 149, 0, 150, 0, 151, 152, 212, 153, 0,
	154, 155, 0, 156, 261, 0, 157, 158, 0, 159,
	213, 160, 0, 161, 162, 164, 214, 163, 215, 0,
	0, 165, 166, 0, 263, 216, 0, 0, 262, 217,
	218, 0, 167, 168, 169, 170, 0, 843, 171, 172,
	0, 0, 173, 174, 175, 219, 220, 88, 176, 0,
	0, 0, 0, 177, 178, 179, 180, 0, 0, 91,
	92, 0, 93, 0, 0, 0, 0, 0, 0, 0,
	0, 94, 95, 181, 182, 183, 96, 184, 185, 0,
	97, 186, 98, 0, 0, 187, 188, 777, 189, 0,
	0, 772, 99, 100, 101, 0, 102, 775, 103, 0,
	0, 104, 105, 0, 0, 0, 0, 0, 0, 106,
	107, 108, 109, 190, 110, 191, 192, 0, 0, 111,
	0, 0, 0, 112, 113, 0, 0, 0, 0, 193,
	114, 194, 0, 0, 115, 116, 195, 117, 0, 780,
	0, 0, 0, 118, 196, 0, 197, 0, 119, 120,
	771, 199, 0, 0, 0, 0, 121, 200, 201, 202,
	0, 203, 0, 0, 122, 0, 123, 0, 0, 204,
	0, 124, 0, 0, 259, 0, 0, 125, 0, 126,
	127, 128, 129, 260, 0, 130, 131, 132, 0, 133,
	0, 205, 134, 206, 135, 136, 0, 0, 0, 0,
	0, 137, 207, 0, 138, 0, 208, 139, 140, 0,
	209, 141, 210, 779, 142, 143, 144, 211, 145, 146,
	0, 147, 148, 149, 0, 150, 0, 151, 152, 212,
	153, 0, 154, 155, 0, 156, 261, 0, 157, 158,
	0, 159, 213, 160, 0, 161, 162, 164, 214, 163,
	215, 0, 0, 165, 166, 0, 263, 216, 0, 0,
	262, 217, 218, 0, 167, 168, 169, 170, 0, 778,
	171, 172, 0, 0, 173, 174, 175, 219, 220, 88,
	176, 0, 0, 0, 0, 177, 178, 179, 180, 0,
	0, 91, 92, 0, 93, 0, 0, 0, 0, 0,
	1097, 0, 0, 94, 95, 181, 182, 183, 96, 184,
	185, 0, 97, 186, 98, 0, 0, 187, 188, 0,
	189, 0, 0, 0, 99, 100, 101, 0, 102, 0,
	103, 0, 0, 104, 105, 0, 0, 0, 0, 0,
	0, 106, 107, 108, 109, 190, 110, 191, 192, 0,
	0, 111, 0, 0, 0, 112, 113, 0, 0, 0,
	0, 193, 114, 194, 0, 0, 115, 116, 195, 117,
	0, 0, 0, 0, 0, 118, 196, 0, 197, 0,
	119, 120, 198, 199, 0, 0, 0, 0, 121, 200,
	201, 202, 0, 203, 0, 0, 122, 0, 123, 0,
	0, 204, 0, 124, 0, 0, 259, 0, 0, 125,
	0, 126, 127, 128, 129, 260, 0, 130, 131, 132,
	0, 133, 0, 205, 134, 206, 135, 136, 0, 0,
	0, 0, 0, 137, 207, 0, 138, 0, 208, 139,
	140, 0, 209, 141, 210, 0, 142, 143, 144, 211,
	145, 146, 0, 147, 148, 149, 0, 150, 0, 151,
	152, 212, 153, 0, 154, 155, 0, 156, 261, 0,
	157, 158, 0, 159, 213, 160, 0, 161, 162, 164,
	214, 163, 215, 0, 0, 165, 166, 0, 263, 216,
	0, 0, 262, 217, 218, 0, 167, 168, 169, 170,
	0, 88, 171, 172, 0, 0, 173, 174, 175, 219,
	220, 0, 176, 91, 92, 0, 93, 177, 178, 179,
	180, 0, 0, 0, 0, 94, 95, 181, 182, 183,
	96, 184, 185, 0, 97, 186, 98, 0, 0, 187,
	188, 0, 189, 0, 0, 0, 99, 100, 101, 0,
	102, 0, 103, 0, 0, 104, 105, 0, 0, 0,
	0, 0, 0, 106, 107, 108, 109, 190, 110, 191,
	192, 0, 0, 111, 0, 0, 0, 112, 113, 0,
	0, 0, 0, 193, 114, 194, 0, 0, 115, 116,
	195, 117, 0, 0, 0, 0, 0, 118, 196, 0,
	197, 0, 119, 120, 198, 199, 0, 0, 0, 0,
	121, 200, 201, 202, 0, 203, 0, 0, 122, 0,
	123, 0, 0, 204, 0, 124, 0, 0, 259, 0,
	0, 125, 0, 126, 127, 128, 129, 260, 0, 130,
	131, 132, 0, 133, 0, 205, 134, 206, 135, 136,
	0, 0, 272, 0, 0, 137, 207, 0, 138, 0,
	208, 139, 140, 0, 209, 141, 210, 0, 142, 143,
	144, 211, 145, 146, 0, 147, 148, 149, 0, 150,
	0, 151, 152, 212, 153, 0, 154, 155, 0, 156,
	261, 0, 157, 158, 0, 159, 213, 160, 0, 161,
	162, 164, 214, 163, 215, 0, 0, 165, 166, 0,
	263, 216, 0, 0, 262, 217, 218, 0, 167, 168,
	169, 170, 0, 88, 171, 172, 0, 0, 173, 174,
	175, 219, 220, 0, 176, 91, 92, 0, 93, 177,
	178, 179, 180, 0, 0, 0, 0, 94, 95, 181,
	182, 183, 96, 184, 185, 0, 97, 186, 98, 0,
	0, 187, 188, 0, 189, 0, 0, 0, 99, 100,
	101, 0, 102, 0, 103, 0, 0, 104, 105, 0,
	0, 0, 0, 0, 0, 106, 107, 108, 109, 190,
	110, 191, 192, 0, 0, 111, 0, 0, 0, 112,
	113, 0, 0, 0, 0, 193, 114, 194, 0, 0,
	115, 116, 195, 117, 0, 0, 0, 0, 0, 118,
	196, 0, 197, 0, 119, 120, 278, 199, 0, 0,
	0, 0, 121, 200, 201, 202, 0, 203, 0, 0,
	122, 0, 123, 0, 0, 204, 0, 124, 0, 0,
	259, 0, 0, 125, 0, 126, 127, 128, 129, 260,
	0, 130, 131, 132, 0, 133, 0, 205, 134, 206,
	135, 136, 0, 0, 272, 0, 0, 137, 207, 0,
	138, 0, 208, 139, 140, 0, 209, 141, 210, 0,
	142, 143, 144, 211, 145, 146, 0, 147, 148, 149,
	0, 150, 0, 151, 152, 212, 153, 0, 154, 155,
	0, 156, 261, 0, 157, 158, 0, 159, 213, 160,
	0, 161, 162, 164, 214, 163, 215, 0, 0, 165,
	166, 0, 263, 216, 0, 0, 262, 217, 218, 0,
	167, 168, 169, 170, 0, 88, 171, 172, 0, 0,
	173, 174, 175, 219, 220, 0, 176, 91, 92, 0,
	93, 177, 178, 179, 180, 0, 0, 0, 0, 94,
	95, 181, 182, 183, 96, 184, 185, 0, 97, 186,
	98, 0, 0, 187, 188, 0, 189, 0, 0, 0,
	99, 100, 101, 0, 102, 0, 103, 0, 0, 104,
	105, 0, 0, 0, 0, 0, 0, 106, 107, 108,
	109, 190, 110, 191, 192, 0, 0, 111, 0, 0,
	0, 112, 113, 0, 0, 0, 0, 193, 114, 194,
	0, 0, 115, 116, 195, 117, 0, 0, 0, 0,
	0, 118, 196, 0, 197, 0, 119, 120, 198, 199,
	0, 0, 0, 0, 121, 200, 201, 202, 0, 203,
	0, 0, 122, 0, 123, 0, 0, 204, 0, 124,
	0, 0, 259, 0, 0, 125, 0, 126, 127, 128,
	129, 260, 0, 130, 131, 132, 0, 133, 0, 205,
	134, 206, 135, 136, 0, 0, 0, 0, 0, 137,
	207, 0, 138, 0, 208, 139, 140, 0, 209, 141,
	210, 0, 142, 143, 144, 211, 145, 146, 0, 147,
	148, 149, 0, 150, 0, 151, 152, 212, 153, 0,
	154, 155, 0, 156, 261, 0, 157, 158, 0, 159,
	213, 160, 0, 161, 162, 164, 214, 163, 215, 0,
	0, 165, 166, 0, 263, 216, 0, 0, 262, 217,
	218, 0, 167, 168, 169, 170, 0, 88, 171, 172,
	0, 0, 173, 174, 175, 219, 220, 0, 176, 91,
	92, 0, 93, 177, 178, 179, 180, 0, 0, 0,
	0, 94, 95, 181, 182, 183, 96, 184, 185, 0,
	97, 186, 98, 0, 0, 187, 188, 0, 189, 0,
	0, 0, 99, 100, 101, 0, 102, 0, 103, 0,
	0, 104, 105, 0, 0, 0, 0, 0, 0, 106,
	107, 108, 109, 190, 110, 191, 192, 0, 0, 111,
	0, 0, 0, 112, 113, 0, 0, 0, 0, 193,
	114, 194, 0, 0, 115, 116, 195, 117, 0, 0,
	0, 0, 0, 118, 196, 0, 197, 0, 119, 120,
	1041, 199, 0, 0, 0, 0, 121, 200, 201, 202,
	0, 203, 0, 0, 122, 0, 123, 0, 0, 204,
	0, 124, 0, 0, 259, 0, 0, 125, 0, 126,
	127, 128, 129, 260, 0, 130, 131, 132, 0, 133,
	0, 205, 134, 206, 135, 136, 0, 0, 0, 0,
	0, 137, 207, 0, 138, 0, 208, 139, 140, 0,
	209, 141, 210, 0, 142, 143, 144, 211, 145, 146,
	0, 147, 148, 149, 0, 150, 0, 151, 152, 212,
	153, 0, 154, 155, 0, 156, 261, 0, 157, 158,
	0, 159, 213, 160, 0, 161, 162, 164, 214, 163,
	215, 0, 0, 165, 166, 0, 263, 216, 0, 0,
	262, 217, 218, 0, 167, 168, 169, 170, 0, 88,
	171, 172, 0, 0, 173, 174, 175, 219, 220, 0,
	176, 91, 92, 0, 93, 177, 178, 179, 180, 0,
	0, 0, 0, 94, 95, 181, 182, 183, 96, 184,
	185, 0, 97, 186, 98, 0, 0, 187, 188, 0,
	189, 0, 0, 0, 99, 100, 101, 0, 102, 0,
	103, 0, 0, 104, 105, 0, 0, 0, 0, 0,
	0, 106, 107, 108, 109, 190, 110, 191, 192, 0,
	0, 111, 0, 0, 0, 112, 113, 0, 0, 0,
	0, 193, 114, 194, 0, 0, 115, 116, 195, 117,
	0, 0, 0, 0, 0, 118, 196, 0, 197, 0,
	119, 120, 1039, 199, 0, 0, 0, 0, 121, 200,
	201, 202, 0, 203, 0, 0, 122, 0, 123, 0,
	0, 204, 0, 124, 0, 0, 259, 0, 0, 125,
	0, 126, 127, 128, 129, 260, 0, 130, 131, 132,
	0, 133, 0, 205, 134, 206, 135, 136, 0, 0,
	0, 0, 0, 137, 207, 0, 138, 0, 208, 139,
	140, 0, 209, 141, 210, 0, 142, 143, 144, 211,
	145, 146, 0, 147, 148, 149, 0, 150, 0, 151,
	152, 212, 153, 0, 154, 155, 0, 156, 261, 0,
	157, 158, 0, 159, 213, 160, 0, 161, 162, 164,
	214, 163, 215, 0, 0, 165, 166, 0, 263, 216,
	0, 0, 262, 217, 218, 0, 167, 168, 169, 170,
	0, 88, 171, 172, 0, 0, 173, 174, 175, 219,
	220, 0, 176, 91, 92, 0, 93, 177, 178, 179,
	180, 0, 0, 0, 0, 94, 95, 181, 182, 183,
	96, 184, 185, 0, 97, 186, 98, 0, 0, 187,
	188, 0, 189, 0, 0, 0, 99, 100, 101, 0,
	102, 0, 103, 0, 0, 104, 105, 0, 0, 0,
	0, 0, 0, 106, 107, 108, 109, 190, 110, 191,
	192, 0, 0, 111, 0, 0, 0, 112, 113, 0,
	0, 0, 0, 193, 114, 194, 0, 0, 115, 116,
	195, 117, 0, 0, 0, 0, 0, 118, 196, 0,
	197, 0, 119, 120, 1030, 199, 0, 0, 0, 0,
	121, 200, 201, 202, 0, 203, 0, 0, 122, 0,
	123, 0, 0, 204, 0, 124, 0, 0, 259, 0,
	0, 125, 0, 126, 127, 128, 129, 260, 0, 130,
	131, 132, 0, 133, 0, 205, 134, 206, 135, 136,
	0, 0, 0, 0, 0, 137, 207, 0, 138, 0,
	208, 139, 140, 0, 209, 141, 210, 0, 142, 143,
	144, 211, 145, 146, 0, 147, 148, 149, 0, 150,
	0, 151, 152, 212, 153, 0, 154, 155, 0, 156,
	261, 0, 157, 158, 0, 159, 213, 160, 0, 161,
	162, 164, 214, 163, 215, 0, 0, 165, 166, 0,
	263, 216, 0, 0, 262, 217, 218, 0, 167, 168,
	169, 170, 0, 88, 171, 172, 0, 0, 173, 174,
	175, 219, 220, 0, 176, 91, 92, 0, 93, 177,
	178, 179, 180, 0, 0, 0, 0, 94, 95, 181,
	182, 183, 96, 184, 185, 0, 97, 186, 98, 0,
	0, 187, 188, 0, 189, 0, 0, 0, 99, 100,
	101, 0, 102, 0, 103, 0, 0, 104, 105, 0,
	0, 0, 0, 0, 0, 106, 107, 108, 109, 190,
	110, 191, 192, 0, 0, 111, 0, 0, 0, 112,
	113, 0, 0, 0, 0, 193, 114, 194, 0, 0,
	115, 116, 195, 117, 0, 0, 0, 0, 0, 118,
	196, 0, 197, 0, 119, 120, 650, 199, 0, 0,
	0, 0, 121, 200, 201, 202, 0, 203, 0, 0,
	122, 0, 123, 0, 0, 204, 0, 124, 0, 0,
	259, 0, 0, 125, 0, 126, 127, 128, 129, 260,
	0, 130, 131, 132, 0, 133, 0, 205, 134, 206,
	135, 136, 0, 0, 0, 0, 0, 137, 207, 0,
	138, 0, 208, 139, 140, 0, 209, 141, 210, 0,
	142, 143, 144, 211, 145, 146, 0, 147, 148, 149,
	0, 150, 0, 151, 152, 212, 153, 0, 154, 155,
	0, 156, 261, 0, 157, 158, 0, 159, 213, 160,
	0, 161, 162, 164, 214, 163, 215, 0, 0, 165,
	166, 0, 263, 216, 0, 0, 262, 217, 218, 0,
	167, 168, 169, 170, 0, 88, 171, 172, 0, 0,
	173, 174, 175, 219, 220, 0, 176, 91, 92, 0,
	93, 177, 178, 179, 180, 0, 496, 0, 0, 94,
	95, 181, 182, 183, 96, 184, 185, 0, 97, 186,
	98, 0, 0, 187, 188, 0, 189, 0, 0, 0,
	99, 100, 101, 0, 102, 0, 103, 0, 0, 104,
	105, 0, 0, 0, 0, 0, 0, 106, 107, 108,
	109, 190, 110, 191, 192, 0, 0, 111, 0, 0,
	0, 112, 113, 0, 0, 0, 0, 193, 114, 194,
	0, 0, 115, 116, 195, 117, 0, 0, 0, 0,
	0, 118, 196, 0, 197, 0, 119, 120, 198, 199,
	0, 0, 0, 0, 121, 200, 201, 202, 0, 203,
	0, 0, 122, 0, 123, 0, 0, 204, 0, 124,
	0, 0, 259, 0, 0, 125, 0, 126, 127, 128,
	129, 260, 0, 130, 131, 132, 0, 133, 0, 205,
	134, 206, 135, 136, 0, 0, 0, 0, 0, 137,
	207, 0, 138, 0, 208, 139, 140, 0, 209, 141,
	210, 0, 142, 143, 144, 211, 145, 146, 0, 147,
	148, 149, 0, 150, 0, 151, 152, 212, 153, 0,
	154, 155, 0, 156, 261, 0, 0, 158, 0, 159,
	213, 160, 0, 161, 162, 164, 214, 163, 215, 0,
	0, 165, 166, 0, 263, 216, 0, 0, 262, 217,
	218, 0, 167, 168, 169, 170, 0, 88, 171, 172,
	0, 0, 173, 174, 175, 219, 220, 0, 176, 91,
	92, 0, 93, 177, 178, 179, 180, 0, 0, 0,
	0, 94, 95, 181, 182, 183, 96, 184, 185, 0,
	97, 186, 98, 0, 0, 187, 188, 0, 189, 0,
	0, 0, 99, 100, 101, 0, 102, 0, 103, 0,
	0, 104, 105, 0, 0, 0, 0, 0, 0, 106,
	107, 108, 109, 190, 110, 191, 192, 0, 0, 111,
	0, 0, 0, 112, 113, 0, 0, 0, 0, 193,
	114, 194, 0, 0, 115, 116, 195, 117, 0, 0,
	0, 0, 0, 118, 196, 0, 197, 0, 119, 120,
	353, 199, 0, 0, 0, 0, 121, 200, 201, 202,
	0, 203, 0, 0, 122, 0, 123, 0, 0, 204,
	0, 124, 0, 0, 259, 0, 0, 125, 0, 126,
	127, 128, 129, 260, 0, 130, 131, 132, 0, 133,
	0, 205, 134, 206, 135, 136, 0, 0, 0, 0,
	0, 137, 207, 0, 138, 0, 208, 139, 140, 0,
	209, 141, 210, 0, 142, 143, 144, 211, 145, 146,
	0, 147, 148, 149, 0, 150, 0, 151, 152, 212,
	153, 0, 154, 155, 0, 156, 261, 0, 157, 158,
	0, 159, 213, 160, 0, 161, 162, 164, 214, 163,
	215, 0, 0, 165, 166, 0, 263, 216, 0, 0,
	262, 217, 218, 0, 167, 168, 169, 170, 0, 88,
	171, 172, 0, 0, 173, 174, 175, 219, 220, 0,
	176, 91, 92, 0, 93, 177, 178, 179, 180, 0,
	0, 0, 0, 94, 95, 181, 182, 183, 96, 184,
	185, 0, 97, 186, 98, 0, 0, 187, 188, 0,
	189, 0, 0, 0, 99, 100, 101, 0, 102, 0,
	103, 0, 0, 104, 105, 0, 0, 0, 0, 0,
	0, 106, 107, 108, 109, 190, 110, 191, 192, 0,
	0, 111, 0, 0, 0, 112, 113, 0, 0, 0,
	0, 193, 114, 194, 0, 0, 115, 116, 195, 117,
	0, 0, 0, 0, 0, 118, 196, 0, 197, 0,
	119, 120, 350, 199, 0, 0, 0, 0, 121, 200,
	201, 202, 0, 203, 0, 0, 122, 0, 123, 0,
	0, 204, 0, 124, 0, 0, 259, 0, 0, 125,
	0, 126, 127, 128, 129, 260, 0, 130, 131, 132,
	0, 133, 0, 205, 134, 206, 135, 136, 0, 0,
	0, 0, 0, 137, 207, 0, 138, 0, 208, 139,
	140, 0, 209, 141, 210, 0, 142, 143, 144, 211,
	145, 146, 0, 147, 148, 149, 0, 150, 0, 151,
	152, 212, 153, 0, 154, 155, 0, 156, 261, 0,
	157, 158, 0, 159, 213, 160, 0, 161, 162, 164,
	214, 163, 215, 0, 0, 165, 166, 0, 263, 216,
	0, 0, 262, 217, 218, 0, 167, 168, 169, 170,
	0, 88, 171, 172, 0, 0, 173, 174, 175, 219,
	220, 0, 176, 91, 92, 0, 93, 177, 178, 179,
	180, 0, 0, 0, 0, 94, 95, 181, 182, 183,
	96, 184, 185, 0, 97, 186, 98, 0, 0, 187,
	188, 0, 189, 0, 0, 0, 99, 100, 101, 0,
	102, 0, 103, 0, 0, 104, 105, 0, 0, 0,
	0, 0, 0, 106, 107, 108, 109, 190, 110, 191,
	192, 0, 0, 111, 0, 0, 0, 112, 113, 0,
	0, 0, 0, 193, 114, 194, 0, 0, 115, 116,
	195, 117, 0, 0, 0, 0, 0, 118, 196, 0,
	197, 0, 119, 120, 198, 199, 0, 0, 0, 0,
	121, 200, 201, 202, 0, 203, 0, 0, 122, 0,
	123, 0, 0, 204, 0, 124, 0, 0, 259, 0,
	0, 125, 0, 126, 127, 128, 129, 85, 0, 130,
	131, 132, 0, 133, 0, 205, 134, 206, 135, 136,
	0, 0, 0, 0, 0, 137, 207, 0, 138, 0,
	208, 139, 140, 0, 209, 141, 210, 0, 142, 143,
	144, 211, 145, 146, 0, 147, 148, 149, 0, 150,
	0, 151, 152, 212, 153, 0, 154, 155, 0, 156,
	261, 0, 157, 158, 0, 159, 213, 160, 0, 161,
	162, 164, 214, 163, 215, 0, 0, 165, 166, 0,
	84, 216, 0, 0, 80, 217, 218, 0, 167, 168,
	169, 170, 0, 88, 171, 172, 0, 0, 173, 174,
	175, 219, 220, 0, 176, 91, 92, 0, 93, 177,
	178, 179, 180, 0, 0, 0, 0, 94, 95, 181,
	182, 183, 96, 184, 185, 0, 97, 186, 98, 0,
	0, 187, 188, 0, 189, 0, 0, 0, 99, 100,
	101, 0, 102, 0, 103, 0, 0, 104, 105, 0,
	0, 0, 0, 0, 0, 106, 107, 108, 109, 190,
	110, 191, 192, 0, 0, 111, 0, 0, 0, 112,
	113, 0, 0, 0, 0, 193, 114, 194, 0, 0,
	115, 116, 195, 117, 0, 0, 0, 0, 0, 118,
	196, 0, 197, 0, 119, 120, 292, 199, 0, 0,
	0, 0, 121, 200, 201, 202, 0, 203, 0, 0,
	122, 0, 123, 0, 0, 204, 0, 124, 0, 0,
	259, 0, 0, 125, 0, 126, 127, 128, 129, 260,
	0, 130, 131, 132, 0, 133, 0, 205, 134, 206,
	135, 136, 0, 0, 0, 0, 0, 137, 207, 0,
	138, 0, 208, 139, 140, 0, 209, 141, 210, 0,
	142, 143, 144, 211, 145, 146, 0, 147, 148, 149,
	0, 150, 0, 151, 152, 212, 153, 0, 154, 155,
	0, 156, 261, 0, 157, 158, 0, 159, 213, 160,
	0, 161, 162, 164, 214, 163, 215, 0, 0, 165,
	166, 0, 263, 216, 0, 0, 262, 217, 218, 0,
	167, 168, 169, 170, 0, 88, 171, 172, 0, 0,
	173, 174, 175, 219, 220, 0, 176, 91, 92, 0,
	93, 177, 178, 179, 180, 0, 0, 0, 0, 94,
	95, 181, 182, 183, 96, 184, 185, 0, 97, 186,
	98, 0, 0, 187, 188, 0, 189, 0, 0, 0,
	99, 100, 101, 0, 102, 0, 103, 0, 0, 104,
	105, 0, 0, 0, 0, 0, 0, 106, 107, 108,
	109, 190, 110, 191, 192, 0, 0, 111, 0, 0,
	0, 112, 113, 0, 0, 0, 0, 193, 114, 194,
	0, 0, 115, 116, 195, 117, 0, 0, 0, 0,
	0, 118, 196, 0, 197, 0, 119, 120, 289, 199,
	0, 0, 0, 0, 121, 200, 201, 202, 0, 203,
	0, 0, 122, 0, 123, 0, 0, 204, 0, 124,
	0, 0, 259, 0, 0, 125, 0, 126, 127, 128,
	129, 260, 0, 130, 131, 132, 0, 133, 0, 205,
	134, 206, 135, 136, 0, 0, 0, 0, 0, 137,
	207, 0, 138, 0, 208, 139, 140, 0, 209, 141,
	210, 0, 142, 143, 144, 211, 145, 146, 0, 147,
	148, 149, 0, 150, 0, 151, 152, 212, 153, 0,
	154, 155, 0, 156, 261, 0, 157, 158, 0, 159,
	213, 160, 0, 161, 162, 164, 214, 163, 215, 0,
	0, 165, 166, 0, 263, 216, 0, 0, 262, 217,
	218, 0, 167, 168, 169, 170, 0, 88, 171, 172,
	0, 0, 173, 174, 175, 219, 220, 0, 176, 91,
	92, 0, 93, 177, 178, 179, 180, 0, 0, 0,
	0, 94, 95, 181, 182, 183, 96, 184, 185, 0,
	97, 186, 98, 0, 0, 187, 188, 0, 189, 0,
	0, 0, 99, 100, 101, 0, 102, 0, 103, 0,
	0, 104, 105, 0, 0, 0, 0, 0, 0, 106,
	107, 108, 109, 190, 110, 191, 192, 0, 0, 111,
	0, 0, 0, 112, 113, 0, 0, 0, 0, 193,
	114, 194, 0, 0, 115, 116, 195, 117, 0, 0,
	0, 0, 0, 118, 196, 0, 197, 0, 119, 120,
	287, 199, 0, 0, 0, 0, 121, 200, 201, 202,
	0, 203, 0, 0, 122, 0, 123, 0, 0, 204,
	0, 124, 0, 0, 259, 0, 0, 125, 0, 126,
	127, 128, 129, 260, 0, 130, 131, 132, 0, 133,
	0, 205, 134, 206, 135, 136, 0, 0, 0, 0,
	0, 137, 207, 0, 138, 0, 208, 139, 140, 0,
	209, 141, 210, 0, 142, 143, 144, 211, 145, 146,
	0, 147, 148, 149, 0, 150, 0, 151, 152, 212,
	153, 0, 154, 155, 0, 156, 261, 0, 157, 158,
	0, 159, 213, 160, 0, 161, 162, 164, 214, 163,
	215, 0, 0, 165, 166, 0, 263, 216, 0, 0,
	262, 217, 218, 0, 167, 168, 169, 170, 0, 88,
	171, 172, 0, 0, 173, 174, 175, 219, 220, 0,
	176, 91, 92, 0, 93, 177, 178, 179, 180, 0,
	0, 0, 0, 94, 95, 181, 182, 183, 96, 184,
	185, 0, 97, 186, 98, 0, 0, 187, 188, 0,
	189, 0, 0, 0, 99, 100, 101, 0, 102, 0,
	103, 0, 0, 104, 105, 0, 0, 0, 0, 0,
	0, 106, 107, 108, 109, 190, 110, 191, 192, 0,
	0, 111, 0, 0, 0, 112, 113, 0, 0, 0,
	0, 193, 114, 194, 0, 0, 115, 116, 195, 117,
	0, 0, 0, 0, 0, 118, 196, 0, 197, 0,
	119, 120, 281, 199, 0, 0, 0, 0, 121, 200,
	201, 202, 0, 203, 0, 0, 122, 0, 123, 0,
	0, 204, 0, 124, 0, 0, 259, 0, 0, 125,
	0, 126, 127, 128, 129, 260, 0, 130, 131, 132,
	0, 133, 0, 205, 134, 206, 135, 136, 0, 0,
	0, 0, 0, 137, 207, 0, 138, 0, 208, 139,
	140, 0, 209, 141, 210, 0, 142, 143, 144, 211,
	145, 146, 0, 147, 148, 149, 0, 150, 0, 151,
	152, 212, 153, 0, 154, 155, 0, 156, 261, 0,
	157, 158, 0, 159, 213, 160, 0, 161, 162, 164,
	214, 163, 215, 0, 0, 165, 166, 0, 263, 216,
	0, 0, 262, 217, 218, 0, 167, 168, 169, 170,
	0, 88, 171, 172, 0, 0, 173, 174, 175, 219,
	220, 0, 176, 91, 92, 0, 93, 177, 178, 179,
	180, 0, 0, 0, 0, 94, 95, 181, 182, 183,
	96, 184, 185, 0, 97, 186, 98, 0, 0, 187,
	188, 0, 189, 0, 0, 0, 99, 100, 101, 0,
	102, 0, 103, 0, 0, 104, 105, 0, 0, 0,
	0, 0, 0, 106, 107, 108, 109, 190, 110, 191,
	192, 0, 0, 111, 0, 0, 0, 112, 113, 0,
	0, 0, 0, 193, 114, 194, 0, 0, 115, 116,
	195, 117, 0, 0, 0, 0, 0, 118, 196, 0,
	197, 0, 119, 120, 198, 199, 0, 0, 0, 0,
	121, 200, 201, 202, 0, 203, 0, 0, 122, 0,
	123, 0, 0, 204, 0, 124, 0, 0, 259, 0,
	0, 125, 0, 126, 127, 128, 129, 260, 0, 130,
	131, 132, 0, 133, 0, 205, 134, 206, 135, 136,
	0, 0, 0, 0, 0, 137, 207, 0, 138, 0,
	208, 139, 140, 0, 209, 141, 210, 0, 142, 143,
	144, 211, 256, 146, 0, 147, 148, 149, 0, 150,
	0, 151, 152, 212, 153, 0, 154, 155, 0, 156,
	261, 0, 157, 158, 0, 159, 213, 160, 0, 161,
	162, 164, 214, 163, 215, 0, 0, 165, 166, 0,
	263, 216, 0, 0, 262, 217, 218, 0, 167, 168,
	169, 170, 0, 88, 171, 172, 0, 0, 173, 174,
	175, 219, 220, 0, 176, 91, 92, 0, 93, 177,
	178, 179, 180, 0, 0, 0, 0, 94, 95, 181,
	182, 183, 96, 184, 185, 0, 97, 186, 98, 0,
	0, 187, 188, 0, 189, 0, 0, 0, 99, 100,
	101, 0, 102, 0, 103, 0, 0, 104, 105, 0,
	0, 0, 0, 0, 0, 106, 107, 108, 109, 190,
	110, 191, 192, 0, 0, 111, 0, 0, 0, 112,
	113, 0, 0, 0, 0, 193, 114, 194, 0, 0,
	115, 116, 195, 117, 0, 0, 0, 0, 0, 118,
	196, 0, 197, 0, 119, 120, 198, 199, 0, 0,
	0, 0, 121, 200, 201, 202, 0, 203, 0, 0,
	122, 0, 123, 0, 0, 204, 0, 124, 0, 0,
	78, 0, 0, 125, 0, 126, 127, 128, 129, 85,
	0, 130, 131, 132, 0, 133, 0, 205, 134, 206,
	135, 136, 0, 0, 0, 0, 0, 137, 207, 0,
	138, 0, 208, 139, 140, 0, 209, 141, 210, 0,
	142, 143, 144, 211, 145, 146, 0, 147, 148, 149,
	0, 150, 0, 151, 152, 212, 153, 0, 154, 155,
	0, 156, 79, 0, 157, 158, 0, 159, 213, 160,
	0, 161, 162, 164, 214, 163, 215, 0, 0, 165,
	166, 0, 84, 216, 0, 0, 80, 217, 218, 0,
	167, 168, 169, 170, 0, 88, 171, 172, 0, 0,
	173, 174, 175, 219, 220, 0, 176, 91, 92, 0,
	93, 177, 178, 179, 180, 0, 0, 0, 0, 94,
	95, 181, 182, 183, 96, 184, 185, 0, 97, 186,
	98, 0, 0, 187, 188, 0, 189, 0, 0, 0,
	99, 100, 101, 0, 102, 0, 103, 0, 0, 104,
	105, 0, 0, 0, 0, 0, 0, 106, 107, 108,
	109, 190, 110, 191, 192, 0, 0, 111, 0, 0,
	0, 112, 113, 0, 0, 0, 0, 193, 114, 194,
	0, 0, 115, 116, 195, 117, 0, 0, 0, 0,
	0, 118, 196, 0, 197, 0, 119, 120, 198, 199,
	0, 0, 0, 0, 121, 200, 201, 202, 0, 203,
	0, 0, 122, 0, 123, 0, 0, 204, 0, 124,
	0, 0, 259, 0, 0, 125, 0, 126, 127, 128,
	129, 260, 0, 130, 131, 132, 0, 133, 0, 205,
	134, 206, 135, 136, 0, 0, 0, 0, 0, 137,
	207, 0, 138, 0, 208, 139, 0, 0, 209, 141,
	210, 0, 142, 0, 144, 211, 145, 146, 0, 147,
	148, 149, 0, 150, 0, 151, 152, 212, 0, 0,
	154, 155, 0, 156, 261, 0, 157, 158, 0, 159,
	213, 160, 0, 161, 162, 164, 214, 163, 215, 0,
	0, 165, 166, 0, 263, 216, 0, 0, 262, 217,
	218, 0, 167, 168, 169, 170, 0, 0, 171, 172,
	0, 0, 173, 174, 175, 219, 220, 674, 176, 692,
	693, 694, 0, 177, 178, 179, 180, 0, 0, 695,
	0, 0, 0, 0, 0, 676, 0, 701, 0, 0,
	0, 0, 674, 0, 692, 693, 694, 0, 0, 0,
	0, 0, 0, 675, 695, 0, 0, 0, 0, 689,
	676, 674, 701, 692, 693, 694, 0, 0, 0, 0,
	0, 0, 0, 695, 0, 0, 0, 0, 675, 676,
	0, 701, 0, 0, 689, 0, 0, 0, 0, 0,
	674, 0, 692, 693, 694, 0, 0, 675, 0, 0,
	0, 0, 695, 689, 0, 0, 0, 0, 676, 0,
	701, 0, 0, 0, 0, 0, 702, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 675, 700, 0, 0,
	0, 0, 689, 0, 0, 0, 697, 0, 0, 0,
	0, 702, 690, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 700, 0, 0, 0, 0, 0, 0, 0,
	702, 697, 0, 696, 0, 0, 0, 690, 0, 0,
	0, 700, 0, 0, 0, 0, 0, 0, 0, 0,
	697, 0, 0, 0, 0, 0, 690, 0, 696, 702,
	0, 0, 0, 0, 0, 691, 0, 0, 0, 0,
	700, 0, 0, 0, 699, 0, 0, 696, 0, 697,
	0, 0, 0, 0, 0, 690, 0, 0, 0, 0,
	691, 0, 0, 0, 0, 0, 0, 0, 0, 699,
	0, 0, 0, 0, 0, 0, 696, 0, 0, 691,
	0, 0, 0, 0, 0, 0, 0, 0, 699, 0,
	0, 0, 0, 698, 0, 686, 687, 688, 0, 685,
	682, 683, 684, 677, 678, 679, 680, 681, 691, 0,
	0, 0, 0, 0, 0, 0, 1200, 699, 698, 0,
	686, 687, 688, 0, 685, 682, 683, 684, 677, 678,
	679, 680, 681, 0, 0, 0, 0, 698, 1557, 686,
	687, 688, 0, 685, 682, 683, 684, 677, 678, 679,
	680, 681, 0, 0, 0, 0, 0, 1556, 0, 0,
	0, 0, 0, 0, 0, 0, 698, 0, 686, 687,
	688, 0, 685, 682, 683, 684, 677, 678, 679, 680,
	681, 674, 0, 692, 693, 694, 1541, 0, 0, 0,
	0, 0, 0, 695, 0, 0, 0, 0, 0, 676,
	674, 701, 692, 693, 694, 0, 0, 0, 0, 0,
	0, 0, 695, 0, 0, 0, 0, 675, 676, 0,
	701, 0, 0, 689, 0, 674, 0, 692, 693, 694,
	0, 0, 0, 0, 0, 0, 675, 695, 0, 0,
	0, 0, 689, 676, 0, 701, 0, 0, 0, 0,
	0, 0, 0, 0, 674, 0, 692, 693, 694, 0,
	0, 675, 0, 0, 0, 0, 695, 689, 0, 0,
	0, 0, 676, 0, 701, 0, 0, 0, 0, 0,
	702, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	675, 700, 0, 0, 0, 0, 689, 0, 0, 702,
	697, 0, 0, 0, 0, 0, 690, 0, 0, 0,
	700, 0, 0, 0, 0, 0, 0, 0, 0, 697,
	0, 0, 0, 0, 702, 690, 0, 696, 0, 0,
	0, 0, 0, 0, 0, 700, 0, 0, 0, 0,
	0, 0, 0, 0, 697, 0, 696, 0, 0, 0,
	690, 0, 0, 702, 0, 0, 0, 0, 0, 691,
	0, 0, 0, 0, 700, 0, 0, 0, 699, 0,
	0, 696, 0, 697, 0, 0, 0, 0, 691, 690,
	0, 0, 0, 0, 0, 0, 0, 699, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	696, 0, 0, 691, 0, 0, 0, 0, 0, 0,
	0, 0, 699, 0, 0, 0, 0, 698, 0, 686,
	687, 688, 0, 685, 682, 683, 684, 677, 678, 679,
	680, 681, 691, 0, 0, 0, 698, 1520, 686, 687,
	688, 699, 685, 682, 683, 684, 677, 678, 679, 680,
	681, 0, 0, 0, 0, 0, 1515, 0, 0, 0,
	0, 698, 0, 686, 687, 688, 0, 685, 682, 683,
	684, 677, 678, 679, 680, 681, 0, 0, 0, 0,
	0, 1511, 0, 0, 0, 0, 0, 0, 0, 0,
	698, 0, 686, 687, 688, 0, 685, 682, 683, 684,
	677, 678, 679, 680, 681, 674, 0, 692, 693, 694,
	1453, 0, 0, 0, 0, 0, 0, 695, 0, 0,
	0, 0, 0, 676, 674, 701, 692, 693, 694, 0,
	0, 0, 0, 0, 0, 0, 695, 0, 0, 0,
	0, 675, 676, 0, 701, 0, 0, 689, 0, 674,
	0, 692, 693, 694, 0, 0, 0, 0, 0, 0,
	675, 695, 0, 0, 0, 0, 689, 676, 0, 701,
	0, 0, 0, 0, 0, 0, 0, 0, 674, 0,
	692, 693, 694, 0, 0, 675, 0, 0, 0, 0,
	695, 689, 0, 0, 0, 0, 676, 0, 701, 0,
	0, 0, 0, 0, 702, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 675, 700, 0, 0, 0, 0,
	689, 0, 0, 702, 697, 0, 0, 0, 0, 0,
	690, 0, 0, 0, 700, 0, 0, 0, 0, 0,
	0, 0, 0, 697, 0, 0, 0, 0, 702, 690,
	0, 696, 0, 0, 0, 0, 0, 0, 0, 700,
	0, 0, 0, 0, 0, 0, 0, 0, 697, 0,
	696, 0, 0, 0, 690, 0, 0, 702, 0, 0,
	0, 0, 0, 691, 0, 0, 0, 0, 700, 0,
	0, 0, 699, 0, 0, 696, 0, 697, 0, 0,
	0, 0, 691, 690, 0, 0, 0, 0, 0, 0,
	0, 699, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 696, 0, 0, 691, 0, 0,
	0, 0, 0, 0, 0, 0, 699, 0, 0, 0,
	0, 698, 0, 686, 687, 688, 0, 685, 682, 683,
	684, 677, 678, 679, 680, 681, 691, 0, 0, 0,
	698, 1452, 686, 687, 688, 699, 685, 682, 683, 684,
	677, 678, 679, 680, 681, 0, 0, 0, 0, 0,
	1370, 0, 0, 0, 0, 698, 0, 686, 687, 688,
	0, 685, 682, 683, 684, 677, 678, 679, 680, 681,
	0, 0, 0, 0, 0, 1308, 0, 0, 0, 0,
	0, 0, 0, 0, 698, 0, 686, 687, 688, 0,
	685, 682, 683, 684, 677, 678, 679, 680, 681, 674,
	0, 692, 693, 694, 1283, 0, 0, 0, 0, 0,
	0, 695, 0, 0, 0, 0, 0, 676, 674, 701,
	692, 693, 694, 0, 0, 0, 0, 0, 0, 0,
	695, 0, 0, 0, 0, 675, 676, 0, 701, 0,
	0, 689, 0, 674, 0, 692, 693, 694, 0, 0,
	0, 0, 0, 0, 675, 695, 0, 0, 0, 0,
	689, 676, 0, 701, 0, 0, 0, 0, 0, 0,
	0, 0, 674, 0, 692, 693, 694, 0, 0, 675,
	0, 0, 0, 0, 695, 689, 0, 0, 0, 0,
	676, 0, 701, 0, 0, 0, 0, 0, 702, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 675, 700,
	0, 0, 0, 0, 689, 0, 0, 702, 697, 0,
	0, 0, 0, 0, 690, 0, 0, 1617, 700, 0,
	0, 0, 0, 0, 0, 0, 0, 697, 0, 0,
	0, 0, 702, 690, 0, 696, 0, 0, 0, 0,
	0, 0, 0, 700, 0, 0, 0, 1192, 0, 1191,
	0, 0, 697, 0, 696, 0, 0, 0, 690, 0,
	0, 702, 0, 0, 0, 0, 0, 691, 0, 0,
	0, 0, 700, 0, 0, 0, 699, 0, 0, 696,
	0, 697, 0, 0, 0, 0, 691, 690, 0, 0,
	0, 1616, 0, 0, 0, 699, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 696, 0,
	0, 691, 0, 0, 0, 0, 0, 0, 0, 0,
	699, 0, 0, 0, 0, 698, 0, 686, 687, 688,
	0, 685, 682, 683, 684, 677, 678, 679, 680, 681,
	691, 0, 0, 0, 698, 945, 686, 687, 688, 699,
	685, 682, 683, 684, 677, 678, 679, 680, 681, 0,
	0, 0, 1354, 0, 0, 0, 0, 0, 0, 698,
	0, 686, 687, 688, 0, 685, 682, 683, 684, 677,
	678, 679, 680, 681, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 698, 0,
	686, 687, 688, 0, 685, 682, 683, 684, 677, 678,
	679, 680, 681, 674, 0, 692, 693, 694, 0, 0,
	0, 0, 0, 0, 0, 695, 704, 0, 0, 853,
	0, 676, 674, 701, 692, 693, 694, 0, 0, 0,
	0, 0, 0, 0, 695, 0, 0, 703, 0, 675,
	676, 0, 701, 0, 0, 689, 0, 674, 0, 692,
	693, 694, 0, 0, 0, 0, 0, 0, 675, 695,
	0, 0, 0, 0, 689, 676, 0, 701, 0, 0,
	854, 0, 0, 0, 0, 0, 674, 0, 692, 693,
	694, 0, 0, 675, 0, 0, 0, 0, 695, 689,
	0, 0, 0, 0, 676, 0, 701, 0, 0, 0,
	0, 0, 702, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 675, 700, 0, 0, 0, 0, 689, 0,
	0, 702, 697, 0, 0, 0, 0, 0, 690, 0,
	0, 0, 700, 0, 0, 0, 0, 0, 0, 0,
	0, 697, 0, 0, 0, 0, 702, 690, 0, 696,
	0, 0, 0, 0, 0, 0, 0, 700, 0, 0,
	0, 0, 0, 0, 0, 0, 697, 0, 696, 0,
	0, 0, 690, 0, 0, 702, 0, 0, 0, 0,
	0, 691, 0, 0, 0, 0, 700, 0, 0, 0,
	699, 0, 0, 696, 251, 697, 0, 0, 0, 0,
	691, 690, 0, 0, 0, 0, 0, 0, 0, 699,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 696, 0, 0, 691, 0, 0, 0, 0,
	0, 0, 0, 0, 699, 0, 0, 0, 0, 698,
	0, 686, 687, 688, 0, 685, 682, 683, 684, 677,
	678, 679, 680, 681, 691, 0, 0, 0, 698, 0,
	686, 687, 688, 699, 685, 682, 683, 684, 677, 678,
	679, 680, 681, 0, 0, 0, 0, 0, 1302, 0,
	0, 0, 0, 698, 0, 686, 687, 688, 0, 685,
	682, 683, 684, 677, 678, 679, 680, 681, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 698, 0, 686, 687, 688, 0, 685, 682,
	683, 684, 677, 678, 679, 680, 681, 674, 0, 692,
	693, 694, 0, 0, 0, 0, 0, 0, 0, 695,
	0, 0, 0, 0, 0, 676, 674, 701, 692, 693,
	694, 0, 0, 0, 0, 0, 0, 0, 695, 0,
	0, 1193, 0, 675, 676, 0, 701, 0, 0, 689,
	0, 674, 0, 692, 693, 694, 0, 0, 0, 0,
	0, 0, 675, 695, 0, 0, 0, 0, 689, 676,
	0, 701, 0, 0, 0, 0, 0, 0, 0, 0,
	674, 0, 692, 693, 694, 0, 0, 675, 0, 0,
	0, 0, 695, 689, 1198, 1155, 0, 0, 676, 0,
	701, 0, 0, 0, 0, 0, 702, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 675, 700, 0, 0,
	0, 0, 689, 0, 0, 702, 697, 0, 0, 0,
	0, 0, 690, 0, 0, 0, 700, 0, 0, 0,
	0, 0, 0, 0, 0, 697, 0, 0, 0, 0,
	702, 690, 0, 696, 0, 0, 0, 0, 0, 0,
	674, 700, 692, 693, 694, 0, 0, 0, 0, 0,
	697, 0, 696, 0, 0, 0, 690, 0, 676, 702,
	701, 0, 0, 0, 0, 691, 0, 0, 0, 0,
	700, 0, 0, 0, 699, 0, 675, 696, 0, 697,
	0, 0, 689, 0, 691, 690, 0, 1160, 0, 0,
	0, 0, 0, 699, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 696, 0, 0, 691,
	0, 0, 0, 0, 0, 0, 0, 0, 699, 0,
	0, 0, 0, 698, 0, 686, 687, 688, 0, 685,
	682, 683, 684, 677, 678, 679, 680, 681, 691, 702,
	0, 0, 698, 0, 686, 687, 688, 699, 685, 682,
	683, 684, 677, 678, 679, 680, 681, 0, 0, 697,
	0, 0, 0, 0, 0, 690, 0, 698, 0, 686,
	687, 688, 0, 685, 682, 683, 684, 677, 678, 679,
	680, 681, 1162, 0, 1178, 1179, 1180, 0, 0, 0,
	0, 0, 0, 0, 1277, 0, 698, 0, 686, 687,
	688, 0, 685, 682, 683, 684, 677, 678, 679, 680,
	681, 674, 0, 692, 693, 694, 0, 0, 691, 0,
	0, 0, 0, 695, 1175, 0, 0, 699, 0, 676,
	674, 701, 692, 693, 694, 0, 0, 0, 0, 0,
	0, 0, 695, 0, 0, 0, 0, 675, 676, 0,
	701, 0, 0, 689, 0, 674, 0, 692, 693, 694,
	0, 0, 0, 0, 0, 0, 675, 0, 0, 0,
	0, 0, 689, 676, 0, 701, 698, 0, 686, 687,
	688, 0, 685, 682, 683, 684, 677, 678, 679, 680,
	681, 675, 1181, 0, 0, 0, 0, 689, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1176, 0, 1162,
	702, 1178, 1179, 1180, 0, 0, 0, 0, 0, 0,
	0, 700, 0, 0, 0, 0, 0, 0, 0, 702,
	697, 0, 0, 0, 0, 0, 690, 0, 0, 1162,
	700, 1178, 1179, 1180, 0, 0, 0, 0, 0, 697,
	0, 1175, 0, 0, 702, 690, 0, 696, 0, 0,
	1177, 0, 0, 0, 0, 700, 0, 0, 0, 0,
	0, 0, 0, 0, 697, 0, 0, 0, 0, 0,
	690, 1175, 0, 0, 0, 0, 0, 0, 0, 691,
	0, 0, 0, 0, 0, 0, 0, 0, 699, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 691, 0,
	0, 0, 0, 0, 0, 0, 0, 699, 0, 1181,
	1172, 1173, 1174, 0, 1171, 1168, 1169, 1170, 1163, 1164,
	1165, 1166, 1167, 691, 1176, 0, 0, 0, 0, 0,
	0, 0, 699, 0, 0, 0, 0, 698, 0, 686,
	687, 688, 0, 685, 682, 683, 684, 677, 678, 679,
	680, 681, 0, 0, 1176, 0, 698, 0, 686, 687,
	688, 0, 685, 682, 683, 684, 677, 678, 679, 680,
	681, 0, 0, 0, 0, 0, 0, 1177, 0, 0,
	0, 698, 0, 686, 687, 688, 0, 685, 682, 683,
	684, 677, 678, 679, 680, 681, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1177, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 881, 896, 873, 889, 888, 0, 0, 874, 0,
	0, 0, 898, 897, 0, 0, 0, 1172, 1173, 1174,
	0, 1171, 1168, 1169, 1170, 1163, 1164, 1165, 1166, 1167,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	894, 0, 886, 885, 0, 0, 0, 1172, 1173, 1174,
	884, 1171, 1168, 1169, 1170, 1163, 1164, 1165, 1166, 1167,
	0, 0, 0, 883, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 877, 878, 879, 0, 550, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	887, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 882, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 880,
	0, 0, 0, 0, 0, 876, 0, 0, 0, 0,
	0, 875, 0, 0, 895, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 899,
}
var sqlPact = [...]int{

	778, -1000, -8, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 769,
	-1000, -1000, -1000, 497, 745, 110, 932, 932, -1000, -1000,
	15679, 2040, 315, 331, 315, 315, 315, 415, 676, 55,
	-1000, 637, -23, 15457, 12571, 1084, -15, 12127, 208, 778,
	12349, 12571, 15235, 947, 874, 12127, 15013, 14791, 14569, -1000,
	8141, -1000, -1000, -1000, -1000, 696, -1000, -17, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 691, -1000, 14347, 14347,
	622, -1000, -1000, 393, 265, 1106, -1000, -4, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 945, -1000, 685, 944, 940, 264, 677,
	-1000, 622, -1000, 622, -1000, -1000, -1000, 12127, -1000, 14125,
	886, 13903, -1000, 637, -1000, -1000, -1000, 700, 1077, 1077,
	1077, 1111, 90, 89, 55, -22, 12571, -1000, 209, -1000,
	-1000, -1000, -1000, -1000, -22, 6419, 6419, -1000, -1000, 208,
	-1000, 226, 10533, -154, -1000, 5931, -1000, 569, 1004, 475,
	467, 1002, 12127, 12571, 437, 13681, -1000, 997, 93, 995,
	-1000, -59, 994, -1000, -25, -1000, -1000, -1000, -1000, -1000,
	-1000, 208, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 10775, 1017, 10775, -1000, -1000,
	-1000, -18, -19, 805, 851, 8627, 8385, 1040, 753, -1000,
	-1000, -1000, -5, 3475, 12571, 956, 10775, 12571, -1000, 12571,
	-1000, 797, -1000, -1000, -20, -21, -1000, 100, -1000, 204,
	771, 13459, -1000, 754, -1000, 700, -1000, 667, 791, 6681,
	7413, 55, -1000, -1000, 55, 55, 7413, -1000, -1000, 12571,
	-22, 1166, 12571, 939, -24, -1000, 17442, -1000, -1000, 7413,
	7413, 7413, 7413, 7413, 550, -1000, -1000, -1000, 4205, -1000,
	-1000, -154, 203, 102, -1000, -1000, 202, -154, -1000, -1000,
	-1000, -1000, 201, 1248, 328, -1000, -1000, -1000, 7413, 269,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 955,
	199, 198, -1000, -1000, -1000, -1000, 196, 195, 194, 193,
	192, 190, 186, 185, 184, 183, 178, 177, 175, 506,
	-1000, 286, -1000, -1000, 286, 286, -1000, 160, 160, 162,
	-1000, -1000, -1000, 160, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 174, 39, -1000, -1000, -1000, 12571, -154,
	-1000, -1000, -1000, 3475, 7413, 3232, -26, -1000, 18071, -1000,
	-107, 698, -1000, 11673, 1092, 1083, 1050, 12127, 406, 400,
	12571, 275, 68, 1161, 10049, -1000, 12571, 12571, -1000, 12571,
	-1000, -1000, 12571, 12571, 12571, -23, 11219, 397, -65, 10997,
	12571, -1000, -6, -1000, -1000, 938, 495, 868, 838, -1000,
	-1000, -1000, -1000, -30, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1209, -1000, -1000, -1000, -1000, 1238,
	-30, -1000, -1000, -1000, -1000, -1000, 1247, -1000, -1000, -1000,
	-1000, 3475, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 12571, -1000,
	-1000, -1000, -1000, 495, 868, -1000, 12127, 11441, 993, 684,
	752, -1000, 991, -1000, -1000, -1000, -1000, 18071, -1000, 18071,
	534, 875, -1000, 875, -39, -1000, 17423, -1000, 171, -35,
	-1000, 275, 9807, 6419, 18370, 12571, 409, 7413, 7413, 7413,
	7413, 7413, 7413, 7413, 7413, 7413, 7413, 7413, 7413, 7413,
	7413, 7413, 7413, 7413, 7413, 7413, 7413, 7413, 738, 377,
	568, 598, 147, 3475, -1000, 1202, 1202, 1202, 18115, 18115,
	135, -133, 17099, -48, -154, -1000, -1000, 5425, 5181, -154,
	3717, -1000, 869, 1236, 284, 18071, 962, 900, 168, 88,
	82, 7413, 704, 7413, 7657, 7413, 7413, 4449, 7413, 7413,
	7413, 7413, 7413, 7413, -1000, 167, -1000, -1000, -1000, -1000,
	1235, -1000, -1000, 1233, -1000, 1218, 275, 79, -1000, -1000,
	2139, -1000, -1000, 5931, -1000, 530, 12571, 12571, 12571, -1000,
	-1000, 750, 13237, -1000, 18370, 12571, -1000, 165, 164, 859,
	820, 12571, 12571, 13015, 12793, 12571, 539, 12571, 12571, 463,
	-1000, 7413, 679, -1000, 9343, 290, 12571, 31, -1000, -1000,
	-1000, 254, 12571, -1000, -1000, -1000, 93, -1000, -59, -1000,
	-1000, 12571, 10997, -65, -87, -1000, -1000, 12571, -1000, -1000,
	-1000, 525, -1000, 491, -1000, 8869, -1000, -1000, -1000, 869,
	-1000, -111, -1000, -1000, -1000, -1000, 73, -88, -1000, -1000,
	-1000, -1000, 12571, 187, 12571, 12571, 989, 12571, -1000, -1000,
	-1000, 7413, -1000, -1000, -1000, -23, 12571, -1000, 899, -100,
	1671, 11905, 11905, -1000, 9101, -1000, -1000, 1176, -1000, -1000,
	-1000, -1000, 47, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 162, 506, 160, 160, 160, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 286, 286, 286, -1000,
	-1000, 263, 443, 443, 1177, 1177, 1177, 2329, 2329, 2423,
	1445, 2183, 2183, 2183, 1417, 380, 380, 2183, 2183, 2183,
	18115, 18090, 161, 7413, 375, 596, 147, 7413, -1000, 1022,
	-1000, -1000, -1000, 936, 145, 7657, 7657, -1000, -1000, -1000,
	4205, -1000, -1000, 142, 7413, -1000, 7413, -31, -37, -1000,
	18071, -1000, -40, -1000, -1000, -34, 7413, 7413, 7413, 63,
	-1000, 374, -1000, 368, 364, 362, -1000, 141, 62, 438,
	-1000, 7413, 563, 140, 137, 7413, -1000, -1000, 17820, 60,
	935, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 59, 17791,
	56, 2403, -1000, 7657, 7657, 7657, 4205, 134, 52, 17172,
	-134, 17766, 6175, 6175, 6175, 51, 17747, 7413, -134, 16127,
	2481, 2446, -41, -46, -47, 1217, -52, 50, 48, 899,
	-1000, -1000, 7413, -1000, -1000, -1000, 360, 356, 974, -1000,
	742, -1000, 603, 7413, 12571, 133, 132, 624, -1000, 971,
	634, 970, 634, -1000, -107, 606, -1000, -1000, 352, 18071,
	-1000, 1065, -54, -1000, -1000, 275, 10049, 5931, -60, -1000,
	-111, -1000, -111, -1000, -1000, -1000, -1000, -1000, 12571, -1000,
	11441, 131, 12571, 129, 128, 12571, -1000, -1000, 45, -1000,
	-1000, -1000, -1000, -1000, 896, 1108, 9807, 864, 862, 9807,
	756, 571, 571, 571, -1000, -1000, -1000, 12571, 126, -1000,
	9585, 40, 1671, 219, 216, -1000, 1216, 7413, 161, 7413,
	7657, 7657, -1000, 161, -1000, -1000, -1000, -1000, 931, 123,
	7413, 18370, 18042, 2028, -61, 4937, -113, 16848, 7413, -1000,
	-1000, 102, -1000, 38, 5687, -1000, 17467, -33, -33, -1000,
	760, 666, 524, 444, 1214, 1244, 983, -1000, 7413, 17496,
	-1000, 10291, 279, 576, 16819, 18370, -1000, 7413, -1000, 930,
	7413, -1000, 18370, 7657, 7657, 7657, 7657, 7657, 7657, 7657,
	7657, 7657, 7657, 7657, 7657, 7657, 7657, 7657, 7657, 7657,
	7657, 873, 7657, 1201, 1201, 1201, -117, 4693, -1000, 954,
	930, 7413, 7413, 18370, 37, 32, 27, -1000, 7413, -134,
	7413, 7413, 7413, -1000, -1000, -1000, 26, -1000, 1207, -1000,
	-1000, 896, 17118, 12571, 12571, 12571, 968, 772, -1000, 16794,
	-66, 12571, 12571, -1000, 826, 871, 309, 12571, -1000, 12571,
	-1000, 12571, 12571, 12571, 12571, 136, -23, -1000, -1000, -1000,
	244, -1000, -1000, 7899, 122, 11441, 7899, 678, -1000, 273,
	7413, 7413, 1671, 9807, 9807, 1715, 839, 9807, -1000, -1000,
	-1000, -1000, 120, 12571, 11905, 297, 1205, 22, 1133, 161,
	1984, 243, 7413, 18370, 17900, -67, -1000, 7413, 7413, -1000,
	-68, -1000, 7413, -1000, 18071, -1000, 1212, 7413, 21, 20,
	18, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 17, -1000,
	-1000, 18071, 7413, -1000, -1000, 15901, 7413, 16, -1000, 15,
	18071, 954, 18071, -1000, 468, 468, 1201, 1201, 1201, 708,
	708, 1210, 1696, 652, 652, 652, 980, 412, 412, 652,
	652, 652, 923, 785, 114, 18169, 7413, -72, -1000, -1000,
	-1000, 18071, 18071, 12, -1000, -1000, -1000, -134, 2291, 16775,
	16524, -1000, 8, 273, -1000, -1000, -1000, -1000, 12571, -1000,
	12571, -1000, 12571, 729, -1000, -1000, 818, 112, 7657, 12571,
	-1000, 572, -73, -74, 711, -1000, 710, 7413, -1000, 18370,
	634, 634, -1000, 339, 335, -1000, 1015, 7899, 1049, -1000,
	109, -78, -1000, 80, 1082, 7413, -1000, -1000, 108, 7899,
	6, -79, 12571, -1000, 12571, 18071, -134, -1000, 1715, -1000,
	107, 7413, 9807, -1000, 12571, -86, -1000, -1000, 212, 49,
	-1000, 7413, 7413, 17900, -90, -1000, 18370, 161, 161, -1000,
	16495, -1000, 17467, -1000, -1000, -1000, -1000, 18071, 545, -1000,
	16470, -1000, -1000, -1000, 7657, 918, 106, 18370, 16451, -1000,
	-1000, 7413, -1000, -1000, -1000, -1000, -1000, 481, -1000, -1000,
	-1000, 7413, 18169, 81, -1000, 103, -1000, -1000, -1000, 479,
	-1000, -1000, 18071, 1086, -1000, -1000, 12571, 12571, 381, -91,
	12571, -1000, -1000, 3961, 572, 7899, 1088, -154, 12571, 1088,
	16200, 3717, -92, -1000, 572, 101, -123, -1000, 1159, -1000,
	12571, 18071, -1000, -96, -1000, -1000, -1000, 161, 161, -1000,
	-1000, -1000, 5, 576, 1096, -1000, 18199, 7657, 18370, -102,
	-1000, 16171, -1000, 16152, 765, 12571, 12571, 12571, 298, 12571,
	-1000, -1000, 435, -1000, 275, -1000, -1000, -1000, -1000, -1000,
	-1000, 1082, -34, 572, -1000, 7899, 12571, 99, -103, -1000,
	-1000, 461, 7413, 18199, -119, -1000, -1000, -1000, 654, 671,
	-121, -125, 81, -1000, 7413, -1000, 10049, -1000, 1088, 3,
	-1000, -126, -1000, -1000, -1000, 2, 7169, 7169, -134, -1000,
	-1000, 668, 657, 483, -1000, -1000, -1000, -1000, -1000, 765,
	18071, -120, -1000, -1000, 572, -1000, -1000, -1000, 2802, 583,
	449, 17143, -1000, -1000, 1020, -1000, 301, 834, 834, 654,
	-1000, -1000, 1184, -1000, -1000, -1000, -1000, -1000, -1000, 1193,
	-1000, -1000, 806, -1000, -1000, 6925, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1448, 1446, 1154, 1444, 1443, 1441, 1438, 1436, 76,
	1433, 1429, 88, 1428, 75, 1424, 1417, 1411, 33, 1409,
	1407, 1400, 1399, 74, 37, 1832, 121, 115, 1397, 1394,
	1390, 10, 78, 73, 1389, 44, 84, 79, 1119, 47,
	20, 26, 69, 68, 1388, 1386, 1385, 1375, 35, 1374,
	1373, 1371, 12, 41, 14, 1370, 16, 131, 1368, 1367,
	72, 1365, 71, 91, 30, 99, 81, 1364, 275, 1363,
	7, 50, 1362, 25, 1360, 24, 49, 98, 1358, 515,
	45, 23, 43, 1356, 1351, 1349, 1347, 67, 56, 39,
	1346, 1344, 55, 1341, 97, 104, 1339, 1335, 1332, 1331,
	1329, 1328, 1109, 1326, 1325, 546, 3, 32, 46, 28,
	86, 85, 15, 0, 544, 849, 1322, 36, 31, 52,
	40, 42, 17, 1321, 80, 1320, 1319, 1318, 1317, 1316,
	51, 1315, 48, 105, 29, 61, 62, 22, 129, 57,
	103, 112, 82, 1313, 93, 1312, 34, 1311, 1310, 667,
	58, 1309, 1308, 1306, 665, 659, 655, 216, 1305, 1304,
	607, 472, 1302, 1300, 60, 1299, 1298, 108, 1297, 106,
	92, 1296, 96, 1295, 66, 1293, 279, 111, 77, 1292,
	94, 53, 1290, 1289, 1287, 21, 2, 8, 5, 6,
	4, 18, 13, 1286, 1285, 95, 64, 1284, 488, 1277,
	1276, 27, 1275, 1272, 11, 1271, 19, 1268, 9, 1,
	1266, 110, 1261, 70, 1259, 1157, 1258, 107, 1256, 1255,
	1194, 54,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	4, 4, 33, 33, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 29,
	29, 35, 35, 35, 34, 34, 30, 30, 5, 5,
	5, 9, 10, 10, 10, 10, 10, 10, 65, 65,
	64, 64, 67, 67, 11, 11, 12, 12, 12, 12,
	145, 145, 144, 13, 17, 211, 211, 211, 215, 215,
	216, 216, 217, 217, 217, 217, 217, 217, 217, 213,
	213, 19, 19, 19, 102, 102, 104, 104, 104, 104,
	37, 101, 101, 101, 101, 103, 103, 103, 103, 169,
	167, 167, 174, 174, 174, 45, 45, 45, 45, 45,
	46, 46, 46, 166, 166, 166, 166, 175, 175, 175,
	175, 175, 175, 47, 47, 47, 173, 173, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 168,
	168, 212, 212, 214, 214, 8, 8, 48, 48, 49,
	49, 108, 108, 108, 107, 183, 183, 184, 184, 184,
	185, 185, 185, 185, 185, 185, 185, 182, 182, 180,
	180, 181, 181, 181, 181, 218, 218, 106, 106, 52,
	52, 188, 188, 188, 188, 186, 186, 186, 186, 186,
	189, 187, 190, 190, 190, 190, 190, 133, 133, 133,
	22, 7, 7, 91, 91, 56, 56, 137, 137, 137,
	41, 41, 31, 31, 31, 16, 16, 16, 16, 16,
	16, 16, 16, 16, 92, 92, 93, 93, 21, 21,
	21, 21, 21, 220, 220, 105, 105, 105, 105, 105,
	36, 6, 6, 14, 44, 44, 98, 98, 98, 100,
	100, 100, 99, 99, 99, 23, 70, 70, 71, 71,
	143, 72, 72, 18, 18, 25, 25, 24, 24, 24,
	24, 24, 24, 26, 26, 27, 27, 27, 27, 27,
	27, 27, 196, 196, 196, 198, 198, 195, 15, 15,
	15, 15, 197, 197, 219, 219, 79, 79, 79, 51,
	50, 50, 54, 54, 53, 55, 55, 136, 77, 77,
	77, 77, 94, 95, 95, 96, 96, 97, 97, 76,
	76, 120, 120, 28, 28, 60, 60, 61, 61, 138,
	138, 138, 138, 139, 139, 139, 139, 139, 139, 134,
	134, 134, 134, 135, 135, 82, 82, 82, 82, 80,
	80, 81, 81, 140, 140, 140, 140, 78, 78, 141,
	141, 141, 109, 109, 146, 146, 146, 59, 59, 59,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	148, 148, 148, 148, 150, 150, 150, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	151, 151, 158, 158, 159, 159, 160, 161, 152, 152,
	153, 153, 154, 155, 162, 162, 162, 164, 164, 156,
	156, 157, 88, 88, 88, 88, 88, 88, 88, 88,
	88, 88, 88, 88, 88, 88, 89, 89, 113, 113,
	113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 191,
	191, 191, 191, 191, 191, 191, 193, 193, 194, 194,
	192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
	192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
	192, 192, 192, 192, 192, 199, 199, 200, 200, 201,
	201, 202, 202, 204, 205, 205, 205, 206, 210, 210,
	203, 203, 207, 207, 207, 208, 208, 209, 209, 209,
	209, 209, 124, 124, 124, 125, 125, 126, 66, 66,
	122, 122, 121, 121, 121, 123, 123, 83, 163, 163,
	163, 163, 163, 163, 163, 84, 84, 90, 85, 85,
	86, 86, 86, 86, 86, 86, 117, 118, 87, 87,
	87, 119, 119, 127, 131, 131, 130, 129, 129, 128,
	128, 112, 112, 112, 112, 112, 111, 110, 73, 73,
	221, 221, 132, 132, 74, 74, 75, 69, 69, 68,
	68, 142, 142, 142, 142, 62, 62, 63, 63, 42,
	42, 43, 43, 43, 43, 57, 57, 58, 58, 40,
	40, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 165, 165, 165, 38, 38, 38, 39, 39,
	171, 171, 171, 172, 172, 172, 172, 170, 170, 170,
	170, 170, 176, 176, 176, 176, 176, 176, 176, 176,
	176, 176, 176, 176, 176, 176, 176, 176, 176, 176,
	176, 176, 176, 176, 176, 176, 176, 176, 176, 176,
	176, 176, 176, 176, 176, 176, 176, 176, 176, 176,
	176, 176, 176, 176, 176, 176, 176, 176, 176, 176,
	176, 176, 176, 176, 176, 176, 176, 176, 176, 176,
	176, 176, 176, 176, 176, 176, 176, 176, 176, 176,
	176, 176, 176, 176, 176, 176, 176, 176, 176, 176,
	176, 176, 176, 176, 176, 176, 176, 176, 176, 176,
	176, 176, 176, 176, 176, 176, 178, 178, 178, 178,
	178, 178, 178, 178, 178, 178, 178, 178, 178, 178,
	178, 178, 178, 178, 178, 178, 178, 178, 178, 178,
	178, 178, 178, 178, 178, 178, 178, 178, 178, 178,
	178, 178, 178, 178, 178, 178, 178, 177, 177, 177,
	177, 177, 177, 177, 177, 177, 177, 177, 177, 177,
	179, 179, 179, 179, 179, 179, 179, 179, 179, 179,
	179, 179, 179, 179, 179, 179, 179, 179, 179, 179,
	179, 179, 179, 179, 179, 179, 179, 179, 179, 179,
	179, 179, 179, 179, 179, 179, 179, 179, 179, 179,
	179, 179, 179, 179, 179, 179, 179, 179, 179, 179,
	179, 179, 179, 179, 179, 179, 179, 179, 179, 179,
	179, 179, 179, 179, 179, 179, 179, 179, 179, 179,
	179, 179, 179, 179, 179, 179, 179, 179,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	4, 6, 1, 3, 2, 5, 3, 6, 4, 6,
	6, 6, 4, 8, 2, 3, 3, 6, 4, 3,
	2, 1, 1, 0, 2, 0, 2, 0, 1, 1,
	1, 5, 3, 5, 4, 6, 3, 5, 1, 3,
	1, 2, 2, 3, 2, 5, 1, 1, 1, 1,
	1, 3, 1, 6, 6, 1, 2, 2, 1, 1,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 2, 3, 3, 2, 1, 1, 1, 3, 3,
	2, 3, 3, 3, 3, 1, 3, 3, 2, 1,
	1, 3, 1, 1, 1, 2, 2, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	1, 1, 1, 1, 1, 0, 1, 1, 2, 2,
	4, 2, 4, 4, 3, 3, 4, 3, 2, 2,
	0, 2, 0, 2, 0, 6, 9, 1, 0, 1,
	3, 1, 1, 1, 3, 2, 0, 3, 1, 2,
	2, 1, 1, 2, 4, 2, 5, 6, 7, 3,
	1, 4, 5, 5, 10, 1, 1, 4, 0, 3,
	0, 2, 2, 2, 0, 1, 1, 2, 2, 0,
	3, 3, 2, 1, 1, 2, 2, 1, 2, 1,
	4, 10, 13, 1, 0, 1, 3, 3, 3, 5,
	2, 0, 1, 1, 0, 6, 6, 8, 6, 8,
	8, 10, 8, 10, 1, 0, 2, 0, 3, 3,
	2, 2, 2, 1, 0, 1, 1, 3, 3, 0,
	3, 3, 6, 6, 1, 3, 1, 4, 2, 8,
	5, 0, 4, 3, 0, 7, 1, 3, 1, 1,
	3, 5, 5, 1, 1, 3, 3, 1, 2, 3,
	2, 3, 4, 1, 1, 8, 8, 1, 2, 4,
	4, 4, 2, 2, 3, 1, 3, 6, 1, 1,
	1, 1, 1, 0, 1, 0, 1, 1, 0, 1,
	1, 0, 1, 0, 3, 1, 3, 2, 2, 2,
	1, 1, 2, 2, 3, 1, 1, 1, 1, 3,
	0, 2, 0, 2, 3, 2, 0, 1, 3, 2,
	2, 1, 4, 3, 4, 5, 4, 5, 4, 5,
	2, 4, 1, 1, 0, 2, 2, 2, 1, 1,
	0, 4, 2, 1, 2, 2, 4, 1, 3, 1,
	2, 3, 2, 0, 2, 5, 2, 3, 4, 0,
	1, 1, 1, 1, 2, 4, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 5, 0, 1, 1, 1,
	1, 1, 1, 2, 2, 2, 2, 2, 1, 1,
	3, 0, 1, 1, 1, 1, 5, 2, 1, 1,
	1, 1, 4, 1, 2, 2, 1, 1, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 3,
	3, 3, 3, 3, 3, 0, 1, 4, 1, 3,
	3, 5, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 2, 3, 4, 4,
	5, 3, 4, 3, 3, 4, 3, 4, 3, 4,
	5, 6, 6, 7, 6, 7, 6, 7, 3, 4,
	1, 3, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 5, 6, 6, 7, 1, 1, 1,
	3, 1, 1, 1, 2, 2, 2, 1, 1, 3,
	5, 6, 8, 6, 6, 4, 4, 1, 1, 1,
	5, 1, 3, 1, 3, 1, 1, 1, 1, 6,
	4, 4, 4, 4, 6, 5, 5, 5, 4, 8,
	6, 6, 4, 4, 4, 5, 0, 5, 0, 2,
	0, 1, 3, 3, 2, 2, 0, 6, 1, 0,
	3, 0, 2, 2, 0, 1, 4, 2, 2, 2,
	2, 2, 4, 3, 5, 4, 3, 5, 1, 3,
	1, 3, 3, 3, 2, 1, 3, 3, 1, 1,
	1, 1, 1, 1, 1, 4, 3, 2, 3, 0,
	3, 3, 2, 2, 1, 0, 2, 2, 3, 2,
	1, 1, 3, 5, 1, 2, 4, 2, 0, 1,
	0, 1, 1, 2, 3, 5, 2, 2, 1, 2,
	1, 0, 1, 1, 1, 3, 3, 1, 0, 1,
	3, 3, 2, 1, 1, 1, 3, 1, 3, 1,
	2, 1, 2, 2, 1, 1, 3, 3, 0, 1,
	2, 1, 1, 1, 1, 6, 2, 3, 5, 1,
	1, 1, 1, 2, 2, 1, 1, 1, 1, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -9, -10, -11, -13,
	-14, -16, -17, -18, -19, -20, -21, -22, -23, 19,
	-6, -7, -8, -197, 81, 87, 99, 182, -24, -25,
	195, 196, 29, 203, 50, 83, 184, 221, 56, -196,
	-27, -26, 265, 241, 247, 191, -28, 209, 234, 268,
	209, 68, 110, 76, 113, 228, 68, 110, 209, -12,
	265, -18, -14, -23, -9, -215, 18, -216, -217, 56,
	81, 99, 191, 113, 76, 228, -215, -102, 131, 193,
	217, -103, -101, -169, 213, 140, -64, -38, 4, -176,
	-178, 16, 17, 19, 28, 29, 33, 37, 39, 49,
	50, 51, 53, 55, 58, 59, 66, 67, 68, 69,
	71, 76, 80, 81, 87, 91, 92, 94, 100, 105,
	106, 113, 121, 123, 128, 134, 136, 137, 138, 139,
	142, 143, 144, 146, 149, 151, 152, 158, 161, 164,
	165, 168, 171, 172, 173, 175, 176, 178, 179, 180,
	182, 184, 185, 187, 189, 190, 192, 195, 196, 198,
	200, 202, 203, 206, 204, 210, 211, 221, 222, 223,
	224, 227, 228, 231, 232, 233, 237, 242, 243, 244,
	245, 30, 31, 32, 34, 35, 38, 42, 43, 45,
	70, 72, 73, 86, 88, 93, 101, 103, 107, 108,
	114, 115, 116, 118, 126, 148, 150, 159, 163, 167,
	169, 174, 186, 199, 205, 207, 214, 218, 219, 234,
	235, 4, 68, 49, 69, 100, 110, 210, 213, 217,
	18, -220, 217, 217, -220, -220, -220, -219, 209, 209,
	-91, 68, 226, -26, -27, -25, -53, -54, 225, 117,
	85, 157, -24, -25, -196, -198, 175, -195, -38, 131,
	140, 193, 217, 213, -198, -50, -51, 18, 78, 269,
	-140, -42, 155, -38, -75, 265, -3, -140, 107, -38,
	-42, 107, 97, 119, -141, -140, -38, 107, -62, 107,
	-42, -65, 107, -64, -145, -144, -172, 4, -176, -178,
	-177, 234, 47, 57, 98, 112, 120, 122, 127, 129,
	141, 160, 162, 183, 197, 154, 269, 154, -102, -102,
	-104, -36, -37, 121, 171, 215, 250, 97, 245, -47,
	6, 74, -67, 267, 97, -212, 154, 97, -168, 97,
	245, 121, 171, -105, -36, -37, -105, -78, -140, -64,
	107, 110, -38, 107, -53, -54, -77, -94, -95, 130,
	153, -79, 18, 78, -79, -79, 37, 266, 266, 269,
	-198, -58, 265, -69, -68, -142, -113, 258, -115, 256,
	257, 262, 145, 246, -124, -42, -116, 9, 265, -127,
	-193, -25, 86, 24, -125, -126, 186, -38, 8, 5,
	6, 7, -40, -148, -157, 220, 89, 147, 40, -191,
	-192, 4, -176, -171, -149, -159, -153, -156, 118, 47,
	61, 64, 62, 65, 194, 229, 41, 88, 163, 167,
	207, 218, 219, 107, 148, 108, 45, 101, 126, 80,
	31, 32, 34, 35, 42, 43, 70, 72, 73, 93,
	114, 115, 116, 150, 174, 199, 214, 235, -177, -160,
	-161, -154, -155, -162, -68, -75, 258, -42, 265, -73,
	-112, -111, -110, 270, 263, 267, -74, -132, -113, 74,
	-33, 178, -32, 17, 19, 81, 232, 86, 178, 178,
	86, -141, -44, -42, 195, -38, 25, 86, -35, 269,
	39, 180, 86, 269, 86, 266, 269, -211, -63, 209,
	68, -43, -38, 258, -217, -211, 269, 269, 128, -46,
	134, 144, 105, -167, 74, -174, -166, -133, 9, 220,
	89, 154, -173, 5, 257, -165, -172, 6, 8, 256,
	-167, 74, 59, -175, 6, 4, -157, -133, 74, 131,
	118, 267, -170, 4, -176, -178, -177, -179, 18, 20,
	21, 22, 23, 24, 25, 26, 27, 36, 40, 41,
	44, 46, 48, 54, 56, 60, 61, 62, 63, 64,
	65, 74, 75, 77, 78, 79, 82, 83, 85, 89,
	90, 95, 96, 97, 99, 102, 104, 109, 110, 111,
	117, 119, 124, 125, 130, 132, 133, 145, 147, 153,
	154, 155, 156, 157, 166, 170, 177, 181, 191, 194,
	201, 208, 209, 212, 215, 216, 220, 225, 226, 229,
	230, 236, 238, 239, 240, 241, -169, -214, 95, -211,
	-169, -169, 128, 269, 269, -35, 269, 265, 145, -39,
	107, -38, 145, -77, -95, -94, -96, -113, 18, -113,
	-115, -26, -26, -26, -55, -136, -113, -195, 25, -57,
	-38, -60, 97, 269, 10, 46, 28, 256, 257, 258,
	259, 260, 253, 254, 255, 252, 248, 249, 250, 52,
	135, 188, 12, 13, 14, 22, 156, 129, 246, 197,
	120, 30, 109, 25, 4, -113, -113, -113, -113, -113,
	162, -25, -113, -66, -73, -25, -121, 263, 265, -73,
	265, 6, 6, 265, -128, -113, -199, 242, 95, 265,
	265, 265, 265, 265, 265, 265, 265, 265, 265, 265,
	265, 265, 265, 265, 169, -164, 237, -164, -164, -150,
	265, -150, -151, 265, -150, 265, -60, -42, -112, -170,
	-113, -170, 258, 269, 266, 269, 215, -92, 54, 48,
	-107, 107, 48, -180, -38, 54, -181, 44, 226, 170,
	96, -92, 54, -92, 54, 54, -140, 215, 215, -42,
	-109, 239, -98, -18, 265, 74, 25, -70, -71, -143,
	-72, -42, 265, -38, -38, -42, -62, -64, -65, -12,
	-144, 215, 269, -63, -57, -111, -110, 97, -37, -36,
	-45, 173, 200, 179, 192, 269, 5, 8, 8, 6,
	-170, -213, -38, -37, -36, -140, -48, -49, -108, -107,
	-182, -180, 110, 226, 86, 154, 145, 86, -97, 186,
	187, 269, -31, 26, 77, 265, 269, 266, -109, -61,
	-138, -140, -25, -139, 265, -142, -146, -147, -149, -158,
	-152, -156, -157, 33, 38, 211, 205, 114, 115, 116,
	199, 31, 174, 93, 80, 73, 72, 150, 35, 34,
	-160, -161, -154, -155, 70, 214, 32, 43, 42, 235,
	-64, 213, -113, -113, -113, -113, -113, -113, -113, -113,
	-113, -113, -113, -113, -113, -113, -113, -113, -113, -113,
	-113, -113, -113, 129, 197, 30, 109, 215, 147, 145,
	220, 89, 227, 78, 151, -221, 208, 27, -119, -25,
	265, -170, -124, 186, 265, 266, 269, -66, -123, 264,
	-113, -121, -66, 266, 266, -66, 236, 18, 78, 258,
	-88, 244, 138, 71, 106, 137, -89, 190, 8, -131,
	-130, 238, -200, 91, 102, 265, 266, 266, -113, -83,
	-163, 4, 244, 138, 71, 106, 137, 190, -84, -113,
	-85, -114, -115, 256, 257, 262, 265, 186, -86, -113,
	-66, -113, 36, 125, 216, -87, -113, 97, -66, -113,
	-113, -113, -66, -66, -66, 265, 8, 8, 8, -109,
	266, 264, 271, -132, -32, -42, -38, -38, 145, -107,
	107, -146, -38, 265, 265, 123, 123, -38, -38, 107,
	-38, 107, -38, -38, -33, 178, -38, -38, 178, -113,
	-100, 154, -62, 234, -38, -60, 269, 250, -62, -35,
	-213, -43, -213, 224, 51, 173, -174, -88, 269, 266,
	269, -39, 110, -64, -42, 86, -38, -136, -15, -18,
	-14, -23, -9, -38, -76, 102, 269, 57, -82, 122,
	141, 98, 127, 183, 112, -135, -134, 25, -38, -135,
	-25, -139, -138, -59, 24, -88, 265, 245, -113, 215,
	-221, 208, -119, -113, 147, 220, 89, 227, 78, 151,
	97, 265, -114, -114, -66, 265, -66, -113, 269, 264,
	264, 269, 266, -54, 269, -53, -113, -66, -66, 266,
	215, 215, 215, 215, 265, 266, -129, -130, 82, -113,
	-205, 161, 265, 265, -113, 25, 266, 97, 266, -90,
	166, 266, 10, 256, 257, 258, 259, 260, 253, 254,
	255, 252, 248, 249, 250, 52, 135, 188, 12, 13,
	14, 120, 109, -114, -114, -114, -66, 265, 266, -117,
	-118, 97, 95, 25, -87, -87, -87, 266, 97, -66,
	269, 269, 269, 266, 266, 266, 8, 266, 269, 266,
	266, -76, -113, 215, 215, 86, 145, -183, -181, -113,
	-57, 265, 265, -29, 81, 195, -93, 86, -35, 86,
	-35, 215, -92, 54, 215, 53, 266, -109, -71, -132,
	266, -38, -108, 265, -39, 265, 265, -38, 266, -120,
	104, 37, -138, 122, 122, -138, -82, 122, -80, 160,
	-80, -80, -38, 265, 266, 263, 263, 8, -113, -113,
	-114, -114, 97, 265, -113, -122, -146, 22, 22, 266,
	-66, 266, 269, 266, -113, -121, 266, 236, -54, -54,
	-54, 138, 106, 137, -89, 137, -89, -89, 8, 6,
	83, -113, 212, -206, -38, 265, 239, -53, 266, -146,
	-113, -117, -113, -146, -114, -114, -114, -114, -114, -114,
	-114, -114, -114, -114, -114, -114, -114, -114, -114, -114,
	-114, -114, 78, 145, 151, -114, 269, -66, 266, -118,
	-117, -113, -113, -146, 266, 266, 266, -66, -113, -113,
	-113, 266, 8, -120, 264, -38, -38, -107, 86, -184,
	54, -185, 46, 145, 147, 226, 170, 44, 74, 177,
	266, 266, -57, -57, 145, 74, 145, 74, 67, 222,
	-38, -38, -42, -38, -38, -38, -99, 265, 154, -18,
	250, -56, -137, -38, -194, 265, -191, -192, -40, 265,
	-48, -56, 154, -201, 240, -113, -66, -138, -138, -81,
	230, 154, 122, -138, 265, -57, -134, 264, 8, 8,
	266, 22, 22, -113, -122, 266, 269, -113, -113, 266,
	-113, 6, -113, 266, 266, 266, 266, -113, -210, -38,
	-113, 266, 266, -118, 97, 78, 151, 265, -113, 266,
	266, 269, 266, 266, 266, -201, -107, -38, -64, 147,
	123, 265, -114, -42, -106, -218, 55, 206, 266, 266,
	147, 147, -113, -146, -35, -35, 215, 215, 79, -56,
	54, -75, -25, 265, 266, 269, -41, -73, 46, -41,
	-113, 265, -56, 266, 266, -42, -202, -204, -38, -81,
	265, -113, -138, -57, 266, 264, 264, -113, -113, 266,
	-146, 266, -54, -203, 165, 266, -114, 97, 265, -122,
	266, -113, -185, -113, -52, 265, 265, 177, -34, 46,
	-38, -38, 228, 146, 266, -38, -106, -137, -31, -64,
	-31, 266, -66, 266, -106, 265, 269, 25, -57, 266,
	266, -54, 37, -114, -122, 266, 266, 266, -188, 136,
	-57, -57, -42, -30, 230, -64, 195, -109, -41, -54,
	-106, -56, -204, -206, 266, -207, 172, 187, -66, 266,
	-186, -189, -187, 154, 98, 164, 198, 266, 266, -52,
	-113, -70, -31, 266, 266, 266, -208, -209, 30, 223,
	59, -113, -208, -187, 154, -189, 154, 228, 76, -188,
	-109, -106, -209, 168, 94, 186, 168, 94, -190, 143,
	180, 39, 195, -190, -186, 22, 16, 147, 74, -209,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 0,
	48, 49, 50, 0, 0, 303, 0, 0, 273, -2,
	0, 0, 244, 0, 244, 244, 244, 305, 214, 302,
	-2, 313, 0, 0, 0, 311, 287, 0, 0, -2,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 64,
	0, 66, 67, 68, 69, 0, 78, 79, 80, 82,
	83, 84, 85, 86, 87, 88, 0, 91, 756, 790,
	801, 95, 105, 0, 851, -2, 109, 60, 705, 706,
	707, 722, 723, 724, 725, 726, 727, 728, 729, 730,
	731, 732, 733, 734, 735, 736, 737, 738, 739, 740,
	741, 742, 743, 744, 745, 746, 747, 748, 749, 750,
	751, 752, 753, 754, 755, 757, 758, 759, 760, 761,
	763, 764, 765, 766, 767, 768, 769, 770, 771, 772,
	773, 774, 775, 776, 777, 778, 779, 780, 781, 782,
	783, 784, 785, 786, 787, 788, 789, 791, 792, 793,
	794, 795, 796, 797, 798, 799, 800, 802, 803, 804,
	805, 806, 807, 808, 809, 810, 811, 812, 813, 814,
	815, 816, 817, 818, 819, 820, 821, 822, 823, 824,
	825, 826, 827, 828, 829, 830, 831, 832, 833, 834,
	835, 836, 837, 838, 839, 840, 841, 842, 843, 844,
	845, 846, 847, 848, 849, 850, 852, 853, 854, 855,
	856, 138, 139, 0, 141, 152, 0, 150, 0, 0,
	148, 249, 243, 249, 240, 241, 242, 0, 304, 0,
	0, 0, 213, -2, 283, 284, -2, 0, 308, 308,
	308, 0, 0, 284, 0, 292, 778, 295, 688, 756,
	762, 790, 801, 851, 293, 668, 0, 310, 309, 0,
	288, 363, 0, 679, 333, 0, 2, 0, 833, 0,
	0, 833, 0, 0, 0, 369, 52, 833, 43, 833,
	675, 56, 833, 58, 0, 70, 72, 713, 714, 715,
	716, 855, 857, 858, 859, 860, 861, 862, 863, 864,
	865, 866, 867, 868, 869, 0, 0, 0, 92, 93,
	94, 96, 97, 0, 0, 0, 0, 0, 0, 108,
	133, 134, 61, 0, 0, 154, 0, 0, 144, 0,
	145, 0, 147, 238, 245, 246, 239, 43, 367, 0,
	833, 709, 251, 833, -2, 0, 279, 320, 321, 0,
	0, 0, 306, 307, 0, 0, 0, 275, 276, 0,
	294, 0, 0, 336, 667, 669, 673, 674, 448, 0,
	0, 0, 0, 0, 0, 527, 528, 529, 0, 531,
	532, 533, 828, 0, 537, 538, 847, 679, 691, 692,
	693, 694, 0, 0, 0, 699, 700, 701, 650, 576,
	547, -2, -2, 689, 390, 391, 392, 393, -2, 857,
	551, 553, 555, 556, 557, 558, 0, 829, 843, 844,
	850, 853, 854, 833, 840, 834, 824, 831, 839, 743,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, 712, 414,
	415, 420, 421, 423, 336, 334, 364, 365, 0, 680,
	658, 651, 652, 0, 0, 0, 0, 664, 662, 663,
	20, 235, 22, 0, 235, 235, 0, 0, 0, 0,
	0, 373, 0, 254, 0, 370, 0, 0, 54, 0,
	41, 42, 0, 0, 0, 303, 0, 0, 75, 0,
	739, 677, 681, 684, 81, 0, 0, 0, 0, 100,
	120, 121, 122, 101, 103, 110, 112, 113, 114, 123,
	124, 125, 126, 207, 0, 209, 136, 137, 702, 0,
	102, 104, 106, 107, 127, 128, 0, 130, 131, 132,
	431, 0, 62, 717, 718, 719, 720, 721, 870, 871,
	872, 873, 874, 875, 876, 877, 878, 879, 880, 881,
	882, 883, 884, 885, 886, 887, 888, 889, 890, 891,
	892, 893, 894, 895, 896, 897, 898, 899, 900, 901,
	902, 903, 904, 905, 906, 907, 908, 909, 910, 911,
	912, 913, 914, 915, 916, 917, 918, 919, 920, 921,
	922, 923, 924, 925, 926, 927, 928, 929, 930, 931,
	932, 933, 934, 935, 936, 937, 938, 939, 940, 941,
	942, 943, 944, 945, 946, 947, 140, 142, 0, 151,
	143, 149, 146, 0, 0, 210, 0, 158, 0, 0,
	833, 708, 0, 282, 318, 319, 322, 325, 326, 323,
	448, 289, 290, 291, 314, 315, 224, 296, 0, 0,
	685, 373, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 661, 0, 0, 672, 452, 453, 454, 475, 476,
	0, -2, 608, 0, 534, 535, 536, 0, 0, -2,
	0, 696, 445, 0, 0, 649, 578, 0, 0, 0,
	0, 0, 0, 0, 629, 635, 0, 0, 0, 0,
	0, 0, 0, 0, 404, 417, 427, 425, 424, 406,
	0, 405, 403, 0, 407, 0, 373, 0, 659, 653,
	0, 656, 657, 0, 666, 0, 0, 0, 0, 234,
	24, 833, 0, 34, 0, 0, 180, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	51, 0, 261, 256, 0, 0, 0, 336, 266, 268,
	269, 0, 0, 371, 53, 676, 43, 59, 57, 65,
	71, 0, 0, 76, 77, 682, 683, 0, 98, 99,
	250, 0, 117, 0, 119, 0, 208, 704, 703, 445,
	63, 153, 89, 247, 248, 368, 0, 157, 159, 161,
	162, 163, 709, 0, 0, 0, 0, 0, 324, 327,
	328, 0, 317, 222, 223, 303, 0, 687, 330, 335,
	337, 354, 354, 341, 0, 670, 449, 379, 380, 381,
	382, 383, 445, 386, 387, 388, 389, 397, 398, 399,
	400, 401, 402, 411, 0, 396, 396, 396, 408, 409,
	412, 413, 418, 419, 429, 430, 428, 428, 428, 426,
	450, 0, 455, 456, 457, 458, 459, 460, 461, 462,
	463, -2, -2, -2, 467, 468, 469, -2, -2, -2,
	473, 474, -2, 0, 0, 661, 0, 0, 481, 0,
	484, 486, 488, 0, 0, 0, 0, 660, 498, 641,
	0, 671, 483, 0, 0, 530, 0, 0, 0, 614,
	608, 615, 0, -2, 539, 313, 0, 0, 0, 0,
	697, 432, 433, 434, 435, 436, 437, 446, 0, 648,
	644, 0, 586, 0, 0, 0, 552, 554, 0, 0,
	0, 618, 619, 620, 621, 622, 623, 624, 0, 0,
	0, 0, 500, 0, 0, 0, 0, 847, 0, 608,
	634, 0, 0, 0, 0, 0, 608, 0, 640, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 330,
	366, 654, 0, 665, 23, 226, 0, 0, 0, 26,
	833, 166, 0, 0, 0, 0, 0, 237, 35, 833,
	43, 833, 43, 36, 21, 235, 225, 228, 0, 372,
	253, 0, 0, 258, 255, 373, 0, 0, 0, 55,
	73, 678, 74, 115, 116, 118, 111, 129, 0, 155,
	0, 0, 709, 0, 0, 0, 252, 316, 0, 298,
	299, 300, 301, 686, 332, 0, 0, 0, 0, 0,
	0, 360, 360, 360, 358, 339, 353, 0, 352, 340,
	-2, 341, 0, 374, 376, 384, 0, 0, -2, 0,
	0, 0, 499, -2, 482, 485, 487, 489, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 609, 0, 612,
	613, 0, -2, 0, 0, 312, 313, 313, 313, 545,
	0, 0, 0, 0, 0, 0, 0, 645, 0, 0,
	546, 0, 0, 0, 0, 0, 560, 0, 561, 0,
	0, 562, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 502, 503, 504, 0, 0, 563, 632,
	633, 0, 0, 0, 0, 0, 0, 568, 0, 639,
	0, 0, 0, 572, 573, 574, 0, 394, 0, 410,
	422, 332, 0, 0, 0, 0, 0, 164, 179, 0,
	0, 0, 0, 28, 0, 0, 0, 0, 32, 0,
	38, 0, 0, 0, 0, 264, 0, 265, 267, 270,
	0, 90, 160, 0, 0, 158, 0, 0, 297, 580,
	0, 0, 338, 0, 0, 0, 0, 0, 355, 359,
	356, 357, 350, 0, 343, 0, 0, 0, 451, -2,
	0, 0, 0, 0, -2, 0, 610, 0, 0, 642,
	0, 603, 0, -2, 609, 616, 540, 0, 0, 0,
	0, 438, 439, 440, 441, 442, 443, 444, 0, 698,
	643, 647, 0, 584, 585, 589, 0, 0, 550, 0,
	617, 626, 627, 501, 505, 506, 507, 508, 509, 510,
	511, 512, 513, -2, -2, -2, 517, 518, 519, -2,
	-2, -2, 0, 0, 0, 628, 0, 0, 606, 630,
	631, 636, 637, 0, 565, 566, 567, 638, 0, 0,
	0, 416, 0, 580, 655, 230, 232, 25, 0, 165,
	0, 168, 0, 0, 171, 172, 0, 0, 0, 0,
	181, 188, 0, 0, 0, 40, 0, 0, 236, 0,
	43, 43, 227, 0, 0, 229, 0, 0, 0, 257,
	0, 0, 215, 221, 221, 0, 548, 549, 0, 0,
	0, 0, 0, 285, 0, 331, 329, 344, 0, 346,
	0, 0, 0, 348, 0, 0, 342, 377, 0, 0,
	385, 0, 0, -2, 0, 492, 0, -2, -2, 602,
	609, 695, 313, 541, 543, 544, 447, 646, 591, 588,
	0, 575, 559, 625, 0, 0, 0, 0, 609, 605,
	564, 0, 570, 571, 395, 286, 27, 0, 169, 170,
	173, 0, 175, 190, 182, 0, 185, 186, 183, 0,
	29, 30, 39, 45, 31, 37, 0, 0, 0, 0,
	0, 271, 272, 0, 188, 0, 224, 690, 0, 224,
	0, 0, 0, 156, 188, 0, 579, 581, 0, 345,
	0, 362, 347, 0, 351, 378, 375, -2, -2, 493,
	611, 604, 0, 313, 0, 577, -2, 0, 0, 0,
	607, 0, 167, 0, 194, 0, 0, 0, 47, 0,
	231, 233, 0, 260, 373, 263, 177, 216, 217, 220,
	218, 221, 313, 188, 211, 0, 0, 0, 0, 349,
	542, 594, 0, -2, 0, 525, 569, 174, 199, 0,
	0, 0, 190, 33, 0, 44, 0, 262, 224, 0,
	178, 0, 582, 583, 361, 0, 0, 0, 590, 526,
	176, 195, 196, 0, 191, 192, 193, 189, 187, 194,
	46, 373, 219, 540, 188, 587, 592, 595, -2, 804,
	736, 0, 593, 197, 0, 198, 0, 0, 0, 199,
	259, 212, 0, 597, 598, 599, 600, 601, 200, 0,
	203, 204, 0, 201, 184, 0, 202, 205, 206, 596,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 254, 3, 260, 255, 3,
	265, 266, 258, 256, 269, 257, 267, 259, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 271, 268,
	248, 250, 249, 3, 270, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 263, 3, 264, 253, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 252, 3, 262,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 251, 261,
}
var sqlTok3 = [...]int{
	0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:452
		{
			sqllex.(*scanner).stmts = sqlDollar[1].stmts
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:458
		{
			if sqlDollar[3].stmt != nil {
				sqlVAL.stmts = append(sqlDollar[1].stmts, sqlDollar[3].stmt)
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:464
		{
			if sqlDollar[1].stmt != nil {
				sqlVAL.stmts = []Statement{sqlDollar[1].stmt}
			} else {
				sqlVAL.stmts = nil
			}
		}
	case 13:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:483
		{
			sqlVAL.stmt = sqlDollar[1].selectStmt
		}
	case 19:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:492
		{
			sqlVAL.stmt = nil
		}
	case 20:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:498
		{
			sqlVAL.stmt = &AlterTable{Table: sqlDollar[3].qname, IfExists: false, Cmds: sqlDollar[4].alterTableCmds}
		}
	case 21:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:502
		{
			sqlVAL.stmt = &AlterTable{Table: sqlDollar[5].qname, IfExists: true, Cmds: sqlDollar[6].alterTableCmds}
		}
	case 22:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:508
		{
			sqlVAL.alterTableCmds = AlterTableCmds{sqlDollar[1].alterTableCmd}
		}
	case 23:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:512
		{
			sqlVAL.alterTableCmds = append(sqlDollar[1].alterTableCmds, sqlDollar[3].alterTableCmd)
		}
	case 24:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:519
		{
			sqlVAL.alterTableCmd = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].colDef}
		}
	case 25:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:524
		{
			sqlVAL.alterTableCmd = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].colDef}
		}
	case 26:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:529
		{
			sqlVAL.alterTableCmd = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].colDef}
		}
	case 27:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:534
		{
			sqlVAL.alterTableCmd = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].colDef}
		}
	case 28:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:538
		{
			unimplemented()
		}
	case 29:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:540
		{
			unimplemented()
		}
	case 30:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:542
		{
			unimplemented()
		}
	case 31:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:545
		{
			sqlVAL.alterTableCmd = &AlterTableDropColumn{columnKeyword: sqlDollar[2].boolVal, IfExists: true, Column: sqlDollar[5].str}
		}
	case 32:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:550
		{
			sqlVAL.alterTableCmd = &AlterTableDropColumn{columnKeyword: sqlDollar[2].boolVal, IfExists: false, Column: sqlDollar[3].str}
		}
	case 33:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:555
		{
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:558
		{
			sqlVAL.alterTableCmd = &AlterTableAddConstraint{ConstraintDef: sqlDollar[2].constraintDef}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:562
		{
			unimplemented()
		}
	case 36:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:564
		{
			unimplemented()
		}
	case 37:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:567
		{
			sqlVAL.alterTableCmd = &AlterTableDropConstraint{IfExists: true, Constraint: sqlDollar[5].str}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:572
		{
			sqlVAL.alterTableCmd = &AlterTableDropConstraint{IfExists: false, Constraint: sqlDollar[3].str}
		}
	case 39:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:577
		{
			unimplemented()
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:578
		{
			unimplemented()
		}
	case 41:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:581
		{
			unimplemented()
		}
	case 42:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:582
		{
			unimplemented()
		}
	case 43:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:583
		{
		}
	case 44:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:586
		{
			unimplemented()
		}
	case 45:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:587
		{
		}
	case 46:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:590
		{
			unimplemented()
		}
	case 47:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:591
		{
		}
	case 51:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:602
		{
			sqlVAL.stmt = &Delete{Table: sqlDollar[4].tblExpr, Where: newWhere(astWhere, sqlDollar[5].expr)}
		}
	case 52:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:609
		{
			sqlVAL.stmt = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 53:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:613
		{
			sqlVAL.stmt = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 54:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:617
		{
			sqlVAL.stmt = &DropIndex{Names: sqlDollar[3].qnames, IfExists: false}
		}
	case 55:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:621
		{
			sqlVAL.stmt = &DropIndex{Names: sqlDollar[5].qnames, IfExists: true}
		}
	case 56:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:625
		{
			sqlVAL.stmt = &DropTable{Names: sqlDollar[3].qnames, IfExists: false}
		}
	case 57:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:629
		{
			sqlVAL.stmt = &DropTable{Names: sqlDollar[5].qnames, IfExists: true}
		}
	case 58:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:635
		{
			sqlVAL.qnames = QualifiedNames{sqlDollar[1].qname}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:639
		{
			sqlVAL.qnames = append(sqlDollar[1].qnames, sqlDollar[3].qname)
		}
	case 60:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:645
		{
			sqlVAL.qname = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:649
		{
			sqlVAL.qname = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].indirect}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:655
		{
			sqlVAL.indirect = Indirection{NameIndirection(sqlDollar[2].str)}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:659
		{
			sqlVAL.indirect = append(sqlDollar[1].indirect, NameIndirection(sqlDollar[3].str))
		}
	case 64:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:666
		{
			sqlVAL.stmt = &Explain{Statement: sqlDollar[2].stmt}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:670
		{
			sqlVAL.stmt = &Explain{Options: sqlDollar[3].strs, Statement: sqlDollar[5].stmt}
		}
	case 66:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:676
		{
			sqlVAL.stmt = sqlDollar[1].selectStmt
		}
	case 70:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:685
		{
			sqlVAL.strs = []string{sqlDollar[1].str}
		}
	case 71:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:689
		{
			sqlVAL.strs = append(sqlDollar[1].strs, sqlDollar[3].str)
		}
	case 73:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:699
		{
			sqlVAL.stmt = &Grant{Privileges: sqlDollar[2].privilegeList, Grantees: NameList(sqlDollar[6].strs), Targets: sqlDollar[4].targetList}
		}
	case 74:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:706
		{
			sqlVAL.stmt = &Revoke{Privileges: sqlDollar[2].privilegeList, Grantees: NameList(sqlDollar[6].strs), Targets: sqlDollar[4].targetList}
		}
	case 75:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:713
		{
			// Unless "DATABASE" is specified, "TABLE" is the default.
			sqlVAL.targetList = TargetList{Tables: QualifiedNames(sqlDollar[1].qnames)}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:718
		{
			sqlVAL.targetList = TargetList{Tables: QualifiedNames(sqlDollar[2].qnames)}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:722
		{
			sqlVAL.targetList = TargetList{Databases: NameList(sqlDollar[2].strs)}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:729
		{
			sqlVAL.privilegeList = privilege.List{privilege.ALL}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:732
		{
		}
	case 80:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:736
		{
			sqlVAL.privilegeList = privilege.List{sqlDollar[1].privilegeType}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:740
		{
			sqlVAL.privilegeList = append(sqlDollar[1].privilegeList, sqlDollar[3].privilegeType)
		}
	case 82:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:747
		{
			sqlVAL.privilegeType = privilege.CREATE
		}
	case 83:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:751
		{
			sqlVAL.privilegeType = privilege.DROP
		}
	case 84:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:755
		{
			sqlVAL.privilegeType = privilege.GRANT
		}
	case 85:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:759
		{
			sqlVAL.privilegeType = privilege.SELECT
		}
	case 86:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:763
		{
			sqlVAL.privilegeType = privilege.INSERT
		}
	case 87:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:767
		{
			sqlVAL.privilegeType = privilege.DELETE
		}
	case 88:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:771
		{
			sqlVAL.privilegeType = privilege.UPDATE
		}
	case 89:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:779
		{
			sqlVAL.strs = []string{sqlDollar[1].str}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:783
		{
			sqlVAL.strs = append(sqlDollar[1].strs, sqlDollar[3].str)
		}
	case 91:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:791
		{
			sqlVAL.stmt = sqlDollar[2].stmt
		}
	case 92:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:795
		{
			sqlVAL.stmt = sqlDollar[3].stmt
		}
	case 93:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:799
		{
			sqlVAL.stmt = sqlDollar[3].stmt
		}
	case 94:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:805
		{
			sqlVAL.stmt = sqlDollar[2].stmt
		}
	case 96:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:812
		{
			sqlVAL.stmt = &SetTransaction{Isolation: sqlDollar[1].isoLevel, UserPriority: UnspecifiedUserPriority}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:816
		{
			sqlVAL.stmt = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].userPriority}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:820
		{
			sqlVAL.stmt = &SetTransaction{Isolation: sqlDollar[1].isoLevel, UserPriority: sqlDollar[3].userPriority}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:824
		{
			sqlVAL.stmt = &SetTransaction{Isolation: sqlDollar[3].isoLevel, UserPriority: sqlDollar[1].userPriority}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:831
		{
			sqlVAL.userPriority = sqlDollar[2].userPriority
		}
	case 101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:837
		{
			sqlVAL.stmt = &Set{Name: sqlDollar[1].qname, Values: sqlDollar[3].exprs}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:841
		{
			sqlVAL.stmt = &Set{Name: sqlDollar[1].qname, Values: sqlDollar[3].exprs}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:845
		{
			sqlVAL.stmt = &Set{Name: sqlDollar[1].qname}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:849
		{
			sqlVAL.stmt = &Set{Name: sqlDollar[1].qname}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:856
		{
			unimplemented()
		}
	case 107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:859
		{
			sqlVAL.stmt = &SetTimeZone{Value: sqlDollar[3].expr}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:862
		{
			unimplemented()
		}
	case 110:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:869
		{
			sqlVAL.exprs = []Expr{sqlDollar[1].expr}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:873
		{
			sqlVAL.exprs = append(sqlDollar[1].exprs, sqlDollar[3].expr)
		}
	case 114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:881
		{
			sqlVAL.expr = ValArg{name: sqlDollar[1].str}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:887
		{
			// Mapped to the closest supported isolation level.
			sqlVAL.isoLevel = SnapshotIsolation
		}
	case 116:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:892
		{
			// Mapped to the closest supported isolation level.
			sqlVAL.isoLevel = SnapshotIsolation
		}
	case 117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:897
		{
			sqlVAL.isoLevel = SnapshotIsolation
		}
	case 118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:901
		{
			// Mapped to the closest supported isolation level.
			sqlVAL.isoLevel = SerializableIsolation
		}
	case 119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:906
		{
			sqlVAL.isoLevel = SerializableIsolation
		}
	case 120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:912
		{
			sqlVAL.userPriority = Low
		}
	case 121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:916
		{
			sqlVAL.userPriority = Normal
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:920
		{
			sqlVAL.userPriority = High
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:926
		{
			sqlVAL.expr = DBool(true)
		}
	case 124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:930
		{
			sqlVAL.expr = DBool(false)
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:934
		{
			sqlVAL.expr = DString(sqlDollar[1].str)
		}
	case 127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:949
		{
			sqlVAL.expr = DString(sqlDollar[1].str)
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:953
		{
			sqlVAL.expr = DString(sqlDollar[1].str)
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:957
		{
			// TODO(pmattis): support opt_interval?
			expr := &CastExpr{Expr: DString(sqlDollar[2].str), Type: sqlDollar[1].colType}
			// Use an empty EvalContext.
			var ctx EvalContext
			d, err := expr.Eval(ctx)
			if err != nil {
				sqllex.Error("cannot evaluate to an interval type")
				return 1
			}
			if _, ok := d.(DInterval); !ok {
				panic("not an interval type")
			}
			sqlVAL.expr = d
		}
	case 131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:974
		{
			sqlVAL.expr = DString(sqlDollar[1].str)
		}
	case 132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:978
		{
			sqlVAL.expr = DString(sqlDollar[1].str)
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:983
		{
			unimplemented()
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:984
		{
			unimplemented()
		}
	case 135:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:985
		{
		}
	case 136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:989
		{
			sqlVAL.expr = DString(sqlDollar[1].str)
		}
	case 137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:993
		{
			sqlVAL.expr = DString(sqlDollar[1].str)
		}
	case 138:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:999
		{
			sqlVAL.stmt = &Show{Name: sqlDollar[2].str}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1003
		{
			sqlVAL.stmt = &Show{Name: sqlDollar[2].str}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1007
		{
			sqlVAL.stmt = &ShowColumns{Table: sqlDollar[4].qname}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1011
		{
			sqlVAL.stmt = &ShowDatabases{}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1015
		{
			sqlVAL.stmt = &ShowGrants{Targets: sqlDollar[3].targetListPtr, Grantees: sqlDollar[4].strs}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1019
		{
			sqlVAL.stmt = &ShowIndex{Table: sqlDollar[4].qname}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1023
		{
			sqlVAL.stmt = &ShowTables{Name: sqlDollar[3].qname}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1027
		{
			sqlVAL.stmt = &Show{Name: "TIME ZONE"}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1031
		{
			sqlVAL.stmt = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1035
		{
			sqlVAL.stmt = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1039
		{
			sqlVAL.stmt = nil
		}
	case 149:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1045
		{
			sqlVAL.qname = sqlDollar[2].qname
		}
	case 150:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1049
		{
			sqlVAL.qname = nil
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1055
		{
			tmp := sqlDollar[2].targetList
			sqlVAL.targetListPtr = &tmp
		}
	case 152:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1060
		{
			sqlVAL.targetListPtr = nil
		}
	case 153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1066
		{
			sqlVAL.strs = sqlDollar[2].strs
		}
	case 154:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1070
		{
			sqlVAL.strs = nil
		}
	case 155:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1077
		{
			sqlVAL.stmt = &CreateTable{Table: sqlDollar[3].qname, IfNotExists: false, Defs: sqlDollar[5].tblDefs}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1081
		{
			sqlVAL.stmt = &CreateTable{Table: sqlDollar[6].qname, IfNotExists: true, Defs: sqlDollar[8].tblDefs}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1088
		{
			sqlVAL.tblDefs = nil
		}
	case 159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1094
		{
			sqlVAL.tblDefs = TableDefs{sqlDollar[1].tblDef}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1098
		{
			sqlVAL.tblDefs = append(sqlDollar[1].tblDefs, sqlDollar[3].tblDef)
		}
	case 161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1104
		{
			sqlVAL.tblDef = sqlDollar[1].colDef
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1109
		{
			sqlVAL.tblDef = sqlDollar[1].constraintDef
		}
	case 164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1115
		{
			sqlVAL.colDef = newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].colType, sqlDollar[3].colQuals)
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1121
		{
			sqlVAL.colQuals = append(sqlDollar[1].colQuals, sqlDollar[2].colQual)
		}
	case 166:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1125
		{
			sqlVAL.colQuals = nil
		}
	case 167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1131
		{
			// TODO(pmattis): Handle constraint name.
			sqlVAL.colQual = sqlDollar[3].colQual
		}
	case 169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1136
		{
			unimplemented()
		}
	case 170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1152
		{
			sqlVAL.colQual = NotNullConstraint{}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1156
		{
			sqlVAL.colQual = NullConstraint{}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1160
		{
			sqlVAL.colQual = UniqueConstraint{}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1164
		{
			sqlVAL.colQual = PrimaryKeyConstraint{}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1167
		{
			unimplemented()
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1169
		{
			if ContainsVars(sqlDollar[2].expr) {
				sqllex.Error("default expression contains a variable")
				return 1
			}
			if containsSubquery(sqlDollar[2].expr) {
				sqllex.Error("default expression contains a subquery")
				return 1
			}
			sqlVAL.colQual = &ColumnDefault{Expr: sqlDollar[2].expr}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1180
		{
			unimplemented()
		}
	case 177:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1184
		{
			sqlVAL.tblDef = &IndexTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].idxElems,
				Storing: sqlDollar[6].strs,
			}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1192
		{
			sqlVAL.tblDef = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:    Name(sqlDollar[3].str),
					Columns: sqlDollar[5].idxElems,
					Storing: sqlDollar[7].strs,
				},
			}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1207
		{
			sqlVAL.constraintDef = sqlDollar[3].constraintDef
			sqlVAL.constraintDef.setName(Name(sqlDollar[2].str))
		}
	case 180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1212
		{
			sqlVAL.constraintDef = sqlDollar[1].constraintDef
		}
	case 181:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1217
		{
			unimplemented()
		}
	case 182:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1219
		{
			sqlVAL.constraintDef = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[3].strs),
					Storing: sqlDollar[5].strs,
				},
			}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1228
		{
			sqlVAL.constraintDef = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[4].strs),
				},
				PrimaryKey: true,
			}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1237
		{
			unimplemented()
		}
	case 187:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1254
		{
			sqlVAL.strs = sqlDollar[3].strs
		}
	case 188:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1258
		{
			sqlVAL.strs = nil
		}
	case 189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1264
		{
			sqlVAL.strs = sqlDollar[2].strs
		}
	case 190:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1268
		{
			sqlVAL.strs = nil
		}
	case 191:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1273
		{
			unimplemented()
		}
	case 192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1274
		{
			unimplemented()
		}
	case 193:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1275
		{
			unimplemented()
		}
	case 194:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1276
		{
		}
	case 195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1283
		{
			unimplemented()
		}
	case 196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1284
		{
			unimplemented()
		}
	case 197:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1285
		{
			unimplemented()
		}
	case 198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1286
		{
			unimplemented()
		}
	case 199:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1287
		{
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1290
		{
			unimplemented()
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1293
		{
			unimplemented()
		}
	case 202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1296
		{
			unimplemented()
		}
	case 203:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1297
		{
			unimplemented()
		}
	case 204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1298
		{
			unimplemented()
		}
	case 205:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1299
		{
			unimplemented()
		}
	case 206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1300
		{
			unimplemented()
		}
	case 207:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1304
		{
			sqlVAL.expr = NumVal(sqlDollar[1].str)
		}
	case 208:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1308
		{
			sqlVAL.expr = NumVal("-" + sqlDollar[2].str)
		}
	case 209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1312
		{
			sqlVAL.expr = DInt(sqlDollar[1].ival.Val)
		}
	case 210:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1319
		{
			sqlVAL.stmt = &Truncate{Tables: sqlDollar[3].qnames}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1326
		{
			sqlVAL.stmt = &CreateIndex{
				Name:    Name(sqlDollar[4].str),
				Table:   sqlDollar[6].qname,
				Unique:  sqlDollar[2].boolVal,
				Columns: sqlDollar[8].idxElems,
				Storing: sqlDollar[10].strs,
			}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql.y:1336
		{
			sqlVAL.stmt = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].qname,
				Unique:      sqlDollar[2].boolVal,
				IfNotExists: true,
				Columns:     sqlDollar[11].idxElems,
				Storing:     sqlDollar[13].strs,
			}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1349
		{
			sqlVAL.boolVal = true
		}
	case 214:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1353
		{
			sqlVAL.boolVal = false
		}
	case 215:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1359
		{
			sqlVAL.idxElems = IndexElemList{sqlDollar[1].idxElem}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1363
		{
			sqlVAL.idxElems = append(sqlDollar[1].idxElems, sqlDollar[3].idxElem)
		}
	case 217:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1372
		{
			sqlVAL.idxElem = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].dir}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1375
		{
			unimplemented()
		}
	case 219:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1376
		{
			unimplemented()
		}
	case 220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1379
		{
			unimplemented()
		}
	case 221:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1380
		{
		}
	case 222:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1384
		{
			sqlVAL.dir = Ascending
		}
	case 223:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1388
		{
			sqlVAL.dir = Descending
		}
	case 224:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1392
		{
			sqlVAL.dir = DefaultDirection
		}
	case 225:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1399
		{
			sqlVAL.stmt = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 226:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1403
		{
			sqlVAL.stmt = &RenameTable{Name: sqlDollar[3].qname, NewName: sqlDollar[6].qname, IfExists: false}
		}
	case 227:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1407
		{
			sqlVAL.stmt = &RenameTable{Name: sqlDollar[5].qname, NewName: sqlDollar[8].qname, IfExists: true}
		}
	case 228:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1411
		{
			sqlVAL.stmt = &RenameIndex{Name: sqlDollar[3].qname, NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 229:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1415
		{
			sqlVAL.stmt = &RenameIndex{Name: sqlDollar[5].qname, NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 230:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1419
		{
			sqlVAL.stmt = &RenameColumn{Table: sqlDollar[3].qname, Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 231:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1423
		{
			sqlVAL.stmt = &RenameColumn{Table: sqlDollar[5].qname, Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1427
		{
			sqlVAL.stmt = nil
		}
	case 233:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1431
		{
			sqlVAL.stmt = nil
		}
	case 234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1437
		{
			sqlVAL.boolVal = true
		}
	case 235:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1441
		{
			sqlVAL.boolVal = false
		}
	case 236:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1446
		{
		}
	case 237:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1447
		{
		}
	case 238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1452
		{
			sqlVAL.stmt = sqlDollar[3].stmt
		}
	case 239:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1456
		{
			sqlVAL.stmt = sqlDollar[3].stmt
		}
	case 240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1460
		{
			sqlVAL.stmt = &CommitTransaction{}
		}
	case 241:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1464
		{
			sqlVAL.stmt = &CommitTransaction{}
		}
	case 242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1468
		{
			sqlVAL.stmt = &RollbackTransaction{}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1473
		{
		}
	case 244:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1474
		{
		}
	case 245:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1478
		{
			sqlVAL.stmt = &BeginTransaction{Isolation: sqlDollar[1].isoLevel, UserPriority: UnspecifiedUserPriority}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1482
		{
			sqlVAL.stmt = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].userPriority}
		}
	case 247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1486
		{
			sqlVAL.stmt = &BeginTransaction{Isolation: sqlDollar[1].isoLevel, UserPriority: sqlDollar[3].userPriority}
		}
	case 248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1490
		{
			sqlVAL.stmt = &BeginTransaction{Isolation: sqlDollar[3].isoLevel, UserPriority: sqlDollar[1].userPriority}
		}
	case 249:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1494
		{
			sqlVAL.stmt = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1500
		{
			sqlVAL.isoLevel = sqlDollar[3].isoLevel
		}
	case 251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1506
		{
			sqlVAL.stmt = &CreateDatabase{Name: Name(sqlDollar[3].str)}
		}
	case 252:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1510
		{
			sqlVAL.stmt = &CreateDatabase{IfNotExists: true, Name: Name(sqlDollar[6].str)}
		}
	case 253:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1516
		{
			sqlVAL.stmt = sqlDollar[5].stmt
			sqlVAL.stmt.(*Insert).Table = sqlDollar[4].qname
		}
	case 256:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1532
		{
			sqlVAL.stmt = &Insert{Rows: sqlDollar[1].selectStmt}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1536
		{
			sqlVAL.stmt = &Insert{Columns: sqlDollar[2].qnames, Rows: sqlDollar[4].selectStmt}
		}
	case 258:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1540
		{
			sqlVAL.stmt = &Insert{}
		}
	case 259:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1547
		{
			unimplemented()
		}
	case 260:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1548
		{
			unimplemented()
		}
	case 261:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1549
		{
		}
	case 262:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1552
		{
			unimplemented()
		}
	case 263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1553
		{
			unimplemented()
		}
	case 264:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1554
		{
		}
	case 265:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1559
		{
			sqlVAL.stmt = &Update{Table: sqlDollar[3].tblExpr, Exprs: sqlDollar[5].updateExprs, Where: newWhere(astWhere, sqlDollar[7].expr)}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1565
		{
			sqlVAL.updateExprs = UpdateExprs{sqlDollar[1].updateExpr}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1569
		{
			sqlVAL.updateExprs = append(sqlDollar[1].updateExprs, sqlDollar[3].updateExpr)
		}
	case 270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1579
		{
			sqlVAL.updateExpr = &UpdateExpr{Names: QualifiedNames{sqlDollar[1].qname}, Expr: sqlDollar[3].expr}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1591
		{
			sqlVAL.updateExpr = &UpdateExpr{Tuple: true, Names: sqlDollar[2].qnames, Expr: Tuple(sqlDollar[5].exprs)}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1595
		{
			sqlVAL.updateExpr = &UpdateExpr{Tuple: true, Names: sqlDollar[2].qnames, Expr: &Subquery{Select: sqlDollar[5].selectStmt}}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1642
		{
			sqlVAL.selectStmt = &ParenSelect{Select: sqlDollar[2].selectStmt}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1646
		{
			sqlVAL.selectStmt = &ParenSelect{Select: sqlDollar[2].selectStmt}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1662
		{
			sqlVAL.selectStmt = sqlDollar[1].selectStmt
			if s, ok := sqlVAL.selectStmt.(*Select); ok {
				s.OrderBy = sqlDollar[2].orderBy
			}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1669
		{
			sqlVAL.selectStmt = sqlDollar[1].selectStmt
			if s, ok := sqlVAL.selectStmt.(*Select); ok {
				s.OrderBy = sqlDollar[2].orderBy
				s.Limit = sqlDollar[3].limit
			}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1677
		{
			sqlVAL.selectStmt = sqlDollar[2].selectStmt
		}
	case 281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1681
		{
			sqlVAL.selectStmt = sqlDollar[2].selectStmt
			if s, ok := sqlVAL.selectStmt.(*Select); ok {
				s.OrderBy = sqlDollar[3].orderBy
			}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1688
		{
			sqlVAL.selectStmt = sqlDollar[2].selectStmt
			if s, ok := sqlVAL.selectStmt.(*Select); ok {
				s.OrderBy = sqlDollar[3].orderBy
				s.Limit = sqlDollar[4].limit
			}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1726
		{
			sqlVAL.selectStmt = &Select{
				Exprs:   sqlDollar[3].selExprs,
				From:    sqlDollar[4].tblExprs,
				Where:   newWhere(astWhere, sqlDollar[5].expr),
				GroupBy: sqlDollar[6].groupBy,
				Having:  newWhere(astHaving, sqlDollar[7].expr),
			}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1738
		{
			sqlVAL.selectStmt = &Select{
				Distinct: sqlDollar[2].boolVal,
				Exprs:    sqlDollar[3].selExprs,
				From:     sqlDollar[4].tblExprs,
				Where:    newWhere(astWhere, sqlDollar[5].expr),
				GroupBy:  sqlDollar[6].groupBy,
				Having:   newWhere(astHaving, sqlDollar[7].expr),
			}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1750
		{
			sqlVAL.selectStmt = &Select{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        TableExprs{&AliasedTableExpr{Expr: sqlDollar[2].qname}},
				tableSelect: true,
			}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1758
		{
			sqlVAL.selectStmt = &Union{
				Type:  astUnion,
				Left:  sqlDollar[1].selectStmt,
				Right: sqlDollar[4].selectStmt,
				All:   sqlDollar[3].boolVal,
			}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1767
		{
			sqlVAL.selectStmt = &Union{
				Type:  astIntersect,
				Left:  sqlDollar[1].selectStmt,
				Right: sqlDollar[4].selectStmt,
				All:   sqlDollar[3].boolVal,
			}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1776
		{
			sqlVAL.selectStmt = &Union{
				Type:  astExcept,
				Left:  sqlDollar[1].selectStmt,
				Right: sqlDollar[4].selectStmt,
				All:   sqlDollar[3].boolVal,
			}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1794
		{
			unimplemented()
		}
	case 293:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1795
		{
			unimplemented()
		}
	case 294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1796
		{
			unimplemented()
		}
	case 295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1799
		{
			unimplemented()
		}
	case 296:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1800
		{
			unimplemented()
		}
	case 297:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1803
		{
			unimplemented()
		}
	case 298:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1807
		{
			sqlVAL.stmt = sqlDollar[1].selectStmt
		}
	case 302:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1815
		{
			unimplemented()
		}
	case 303:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1816
		{
		}
	case 304:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1819
		{
		}
	case 305:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1820
		{
		}
	case 306:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1824
		{
			sqlVAL.boolVal = true
		}
	case 307:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1828
		{
			sqlVAL.boolVal = false
		}
	case 308:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1832
		{
			sqlVAL.boolVal = false
		}
	case 309:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1838
		{
			sqlVAL.boolVal = true
		}
	case 310:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1843
		{
		}
	case 311:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1844
		{
		}
	case 312:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1848
		{
			sqlVAL.orderBy = sqlDollar[1].orderBy
		}
	case 313:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1852
		{
			sqlVAL.orderBy = nil
		}
	case 314:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1858
		{
			sqlVAL.orderBy = OrderBy(sqlDollar[3].orders)
		}
	case 315:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1864
		{
			sqlVAL.orders = []*Order{sqlDollar[1].order}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1868
		{
			sqlVAL.orders = append(sqlDollar[1].orders, sqlDollar[3].order)
		}
	case 317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1874
		{
			sqlVAL.order = &Order{Expr: sqlDollar[1].expr, Direction: sqlDollar[2].dir}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1882
		{
			if sqlDollar[1].limit == nil {
				sqlVAL.limit = sqlDollar[2].limit
			} else {
				sqlVAL.limit = sqlDollar[1].limit
				sqlVAL.limit.Offset = sqlDollar[2].limit.Offset
			}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1891
		{
			sqlVAL.limit = sqlDollar[1].limit
			if sqlDollar[2].limit != nil {
				sqlVAL.limit.Count = sqlDollar[2].limit.Count
			}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1902
		{
			if sqlDollar[2].expr == nil {
				sqlVAL.limit = nil
			} else {
				sqlVAL.limit = &Limit{Count: sqlDollar[2].expr}
			}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1915
		{
			sqlVAL.limit = &Limit{Offset: sqlDollar[2].expr}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1922
		{
			sqlVAL.limit = &Limit{Offset: sqlDollar[2].expr}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1929
		{
			sqlVAL.expr = nil
		}
	case 327:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1943
		{
		}
	case 328:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1944
		{
		}
	case 329:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1970
		{
			sqlVAL.groupBy = GroupBy(sqlDollar[3].exprs)
		}
	case 330:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1974
		{
			sqlVAL.groupBy = nil
		}
	case 331:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1980
		{
			sqlVAL.expr = sqlDollar[2].expr
		}
	case 332:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1984
		{
			sqlVAL.expr = nil
		}
	case 333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1990
		{
			sqlVAL.selectStmt = Values{Tuple(sqlDollar[2].exprs)}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1994
		{
			sqlVAL.selectStmt = append(sqlDollar[1].selectStmt.(Values), Tuple(sqlDollar[3].exprs))
		}
	case 335:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2004
		{
			sqlVAL.tblExprs = sqlDollar[2].tblExprs
		}
	case 336:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2008
		{
			sqlVAL.tblExprs = nil
		}
	case 337:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2014
		{
			sqlVAL.tblExprs = TableExprs{sqlDollar[1].tblExpr}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2018
		{
			sqlVAL.tblExprs = append(sqlDollar[1].tblExprs, sqlDollar[3].tblExpr)
		}
	case 339:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2025
		{
			sqlVAL.tblExpr = &AliasedTableExpr{Expr: sqlDollar[1].qname, As: sqlDollar[2].aliasClause}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2029
		{
			sqlVAL.tblExpr = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].selectStmt}, As: sqlDollar[2].aliasClause}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2033
		{
			unimplemented()
		}
	case 343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2051
		{
			sqlVAL.tblExpr = &ParenTableExpr{Expr: sqlDollar[2].tblExpr}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2055
		{
			sqlVAL.tblExpr = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].tblExpr, Right: sqlDollar[4].tblExpr}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2059
		{
			sqlVAL.tblExpr = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].tblExpr, Right: sqlDollar[4].tblExpr, Cond: sqlDollar[5].joinCond}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2063
		{
			sqlVAL.tblExpr = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].tblExpr, Right: sqlDollar[3].tblExpr, Cond: sqlDollar[4].joinCond}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2067
		{
			sqlVAL.tblExpr = &JoinTableExpr{Join: astNaturalJoin, Left: sqlDollar[1].tblExpr, Right: sqlDollar[5].tblExpr}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2071
		{
			sqlVAL.tblExpr = &JoinTableExpr{Join: astNaturalJoin, Left: sqlDollar[1].tblExpr, Right: sqlDollar[4].tblExpr}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2077
		{
			sqlVAL.aliasClause = AliasClause{Alias: Name(sqlDollar[2].str), Cols: NameList(sqlDollar[4].strs)}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2081
		{
			sqlVAL.aliasClause = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2085
		{
			sqlVAL.aliasClause = AliasClause{Alias: Name(sqlDollar[1].str), Cols: NameList(sqlDollar[3].strs)}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2089
		{
			sqlVAL.aliasClause = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2096
		{
			sqlVAL.aliasClause = AliasClause{}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2102
		{
			sqlVAL.str = astFullJoin
		}
	case 356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2106
		{
			sqlVAL.str = astLeftJoin
		}
	case 357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2110
		{
			sqlVAL.str = astRightJoin
		}
	case 358:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2114
		{
			sqlVAL.str = astInnerJoin
		}
	case 359:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2120
		{
		}
	case 360:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2121
		{
		}
	case 361:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2132
		{
			sqlVAL.joinCond = &UsingJoinCond{Cols: NameList(sqlDollar[3].strs)}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2136
		{
			sqlVAL.joinCond = &OnJoinCond{Expr: sqlDollar[2].expr}
		}
	case 363:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2142
		{
			sqlVAL.qname = sqlDollar[1].qname
		}
	case 364:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2146
		{
			// TODO(pmattis): Handle the "*".
			sqlVAL.qname = sqlDollar[1].qname
		}
	case 365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2151
		{
			// TODO(pmattis): Support ONLY.
			sqlVAL.qname = sqlDollar[2].qname
		}
	case 366:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2156
		{
			// TODO(pmattis): Support ONLY.
			sqlVAL.qname = sqlDollar[3].qname
		}
	case 367:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2163
		{
			sqlVAL.qnames = QualifiedNames{sqlDollar[1].qname}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2167
		{
			sqlVAL.qnames = append(sqlDollar[1].qnames, sqlDollar[3].qname)
		}
	case 369:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2180
		{
			sqlVAL.tblExpr = &AliasedTableExpr{Expr: sqlDollar[1].qname}
		}
	case 370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2184
		{
			sqlVAL.tblExpr = &AliasedTableExpr{Expr: sqlDollar[1].qname, As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2188
		{
			sqlVAL.tblExpr = &AliasedTableExpr{Expr: sqlDollar[1].qname, As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2194
		{
			sqlVAL.expr = sqlDollar[2].expr
		}
	case 373:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2198
		{
			sqlVAL.expr = nil
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2210
		{
			sqlVAL.colType = sqlDollar[1].colType
		}
	case 375:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2214
		{
			unimplemented()
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2215
		{
			unimplemented()
		}
	case 377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2218
		{
			unimplemented()
		}
	case 378:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2219
		{
			unimplemented()
		}
	case 379:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2220
		{
		}
	case 385:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2228
		{
			unimplemented()
		}
	case 386:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2230
		{
			sqlVAL.colType = &BytesType{Name: "BLOB"}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2234
		{
			sqlVAL.colType = &BytesType{Name: "BYTES"}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2238
		{
			sqlVAL.colType = &StringType{Name: "TEXT"}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2242
		{
			sqlVAL.colType = &StringType{Name: "STRING"}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2263
		{
			sqlVAL.colType = &DecimalType{Prec: int(sqlDollar[2].ival.Val)}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2267
		{
			sqlVAL.colType = &DecimalType{Prec: int(sqlDollar[2].ival.Val), Scale: int(sqlDollar[4].ival.Val)}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2271
		{
			sqlVAL.colType = &DecimalType{}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2278
		{
			sqlVAL.colType = &IntType{Name: "INT"}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2282
		{
			sqlVAL.colType = &IntType{Name: "INT64"}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2286
		{
			sqlVAL.colType = &IntType{Name: "INTEGER"}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2290
		{
			sqlVAL.colType = &IntType{Name: "SMALLINT"}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2294
		{
			sqlVAL.colType = &IntType{Name: "BIGINT"}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2298
		{
			sqlVAL.colType = &FloatType{Name: "REAL"}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2302
		{
			sqlVAL.colType = &FloatType{Name: "FLOAT", Prec: int(sqlDollar[2].ival.Val)}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2306
		{
			sqlVAL.colType = &FloatType{Name: "DOUBLE PRECISION"}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2310
		{
			sqlVAL.colType = sqlDollar[2].colType
			sqlVAL.colType.(*DecimalType).Name = "DECIMAL"
		}
	case 406:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2315
		{
			sqlVAL.colType = sqlDollar[2].colType
			sqlVAL.colType.(*DecimalType).Name = "DEC"
		}
	case 407:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2320
		{
			sqlVAL.colType = sqlDollar[2].colType
			sqlVAL.colType.(*DecimalType).Name = "NUMERIC"
		}
	case 408:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2325
		{
			sqlVAL.colType = &BoolType{Name: "BOOLEAN"}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2329
		{
			sqlVAL.colType = &BoolType{Name: "BOOL"}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2335
		{
			sqlVAL.ival = sqlDollar[2].ival
		}
	case 411:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2339
		{
			sqlVAL.ival = IntVal{}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2357
		{
			sqlVAL.colType = &IntType{Name: "BIT", N: int(sqlDollar[4].ival.Val)}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2363
		{
			sqlVAL.colType = &IntType{Name: "BIT"}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2379
		{
			sqlVAL.colType = sqlDollar[1].colType
			sqlVAL.colType.(*StringType).N = int(sqlDollar[3].ival.Val)
		}
	case 423:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2386
		{
			sqlVAL.colType = sqlDollar[1].colType
		}
	case 424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2392
		{
			sqlVAL.colType = &StringType{Name: "CHAR"}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2396
		{
			sqlVAL.colType = &StringType{Name: "CHAR"}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2400
		{
			sqlVAL.colType = &StringType{Name: "VARCHAR"}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2405
		{
		}
	case 428:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2406
		{
		}
	case 429:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2411
		{
			sqlVAL.colType = &DateType{}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2415
		{
			sqlVAL.colType = &TimestampType{}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2420
		{
			sqlVAL.colType = &IntervalType{}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2425
		{
			unimplemented()
		}
	case 433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2426
		{
			unimplemented()
		}
	case 434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2427
		{
			unimplemented()
		}
	case 435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2428
		{
			unimplemented()
		}
	case 436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2429
		{
			unimplemented()
		}
	case 437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2430
		{
			unimplemented()
		}
	case 438:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2431
		{
			unimplemented()
		}
	case 439:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2432
		{
			unimplemented()
		}
	case 440:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2433
		{
			unimplemented()
		}
	case 441:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2434
		{
			unimplemented()
		}
	case 442:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2435
		{
			unimplemented()
		}
	case 443:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2436
		{
			unimplemented()
		}
	case 444:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2437
		{
			unimplemented()
		}
	case 445:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2438
		{
		}
	case 446:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2441
		{
			unimplemented()
		}
	case 447:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2442
		{
			unimplemented()
		}
	case 449:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2466
		{
			sqlVAL.expr = &CastExpr{Expr: sqlDollar[1].expr, Type: sqlDollar[3].colType}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2469
		{
			unimplemented()
		}
	case 451:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2470
		{
			unimplemented()
		}
	case 452:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2479
		{
			sqlVAL.expr = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].expr}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2483
		{
			sqlVAL.expr = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].expr}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2487
		{
			sqlVAL.expr = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].expr}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2491
		{
			sqlVAL.expr = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2495
		{
			sqlVAL.expr = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2499
		{
			sqlVAL.expr = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2503
		{
			sqlVAL.expr = &BinaryExpr{Operator: Div, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2507
		{
			sqlVAL.expr = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2511
		{
			sqlVAL.expr = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2515
		{
			sqlVAL.expr = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2519
		{
			sqlVAL.expr = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2523
		{
			sqlVAL.expr = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2527
		{
			sqlVAL.expr = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2531
		{
			sqlVAL.expr = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2535
		{
			sqlVAL.expr = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2539
		{
			sqlVAL.expr = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2543
		{
			sqlVAL.expr = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2547
		{
			sqlVAL.expr = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2551
		{
			sqlVAL.expr = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2555
		{
			sqlVAL.expr = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2559
		{
			sqlVAL.expr = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2563
		{
			sqlVAL.expr = &AndExpr{Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2567
		{
			sqlVAL.expr = &OrExpr{Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2571
		{
			sqlVAL.expr = &NotExpr{Expr: sqlDollar[2].expr}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2575
		{
			sqlVAL.expr = &NotExpr{Expr: sqlDollar[2].expr}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2579
		{
			sqlVAL.expr = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2583
		{
			sqlVAL.expr = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].expr, Right: sqlDollar[4].expr}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2587
		{
			sqlVAL.expr = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].expr, Right: sqlDollar[4].expr}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2591
		{
			sqlVAL.expr = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].expr, Right: sqlDollar[5].expr}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2595
		{
			sqlVAL.expr = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].expr, Right: DNull}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2599
		{
			sqlVAL.expr = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].expr, Right: DNull}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2602
		{
			unimplemented()
		}
	case 484:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2604
		{
			sqlVAL.expr = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].expr, Right: DBool(true)}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2608
		{
			sqlVAL.expr = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].expr, Right: DBool(true)}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2612
		{
			sqlVAL.expr = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].expr, Right: DBool(false)}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2616
		{
			sqlVAL.expr = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].expr, Right: DBool(false)}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2620
		{
			sqlVAL.expr = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].expr, Right: DNull}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2624
		{
			sqlVAL.expr = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].expr, Right: DNull}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2628
		{
			sqlVAL.expr = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].expr, Right: sqlDollar[5].expr}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2632
		{
			sqlVAL.expr = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].expr, Right: sqlDollar[6].expr}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2636
		{
			sqlVAL.expr = &IsOfTypeExpr{Expr: sqlDollar[1].expr, Types: sqlDollar[5].colTypes}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2640
		{
			sqlVAL.expr = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].expr, Types: sqlDollar[6].colTypes}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2644
		{
			sqlVAL.expr = &RangeCond{Left: sqlDollar[1].expr, From: sqlDollar[4].expr, To: sqlDollar[6].expr}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2648
		{
			sqlVAL.expr = &RangeCond{Not: true, Left: sqlDollar[1].expr, From: sqlDollar[5].expr, To: sqlDollar[7].expr}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2652
		{
			sqlVAL.expr = &RangeCond{Left: sqlDollar[1].expr, From: sqlDollar[4].expr, To: sqlDollar[6].expr}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2656
		{
			sqlVAL.expr = &RangeCond{Not: true, Left: sqlDollar[1].expr, From: sqlDollar[5].expr, To: sqlDollar[7].expr}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2660
		{
			sqlVAL.expr = &ComparisonExpr{Operator: In, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2664
		{
			sqlVAL.expr = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].expr, Right: sqlDollar[4].expr}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2681
		{
			sqlVAL.expr = &CastExpr{Expr: sqlDollar[1].expr, Type: sqlDollar[3].colType}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2685
		{
			sqlVAL.expr = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].expr}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2689
		{
			sqlVAL.expr = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].expr}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2693
		{
			sqlVAL.expr = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].expr}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2697
		{
			sqlVAL.expr = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2701
		{
			sqlVAL.expr = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2705
		{
			sqlVAL.expr = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2709
		{
			sqlVAL.expr = &BinaryExpr{Operator: Div, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2713
		{
			sqlVAL.expr = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2717
		{
			sqlVAL.expr = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2721
		{
			sqlVAL.expr = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2725
		{
			sqlVAL.expr = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2729
		{
			sqlVAL.expr = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2733
		{
			sqlVAL.expr = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2737
		{
			sqlVAL.expr = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2741
		{
			sqlVAL.expr = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2745
		{
			sqlVAL.expr = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2749
		{
			sqlVAL.expr = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2753
		{
			sqlVAL.expr = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2757
		{
			sqlVAL.expr = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2761
		{
			sqlVAL.expr = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2765
		{
			sqlVAL.expr = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2769
		{
			sqlVAL.expr = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].expr, Right: sqlDollar[5].expr}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2773
		{
			sqlVAL.expr = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].expr, Right: sqlDollar[6].expr}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2777
		{
			sqlVAL.expr = &IsOfTypeExpr{Expr: sqlDollar[1].expr, Types: sqlDollar[5].colTypes}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2781
		{
			sqlVAL.expr = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].expr, Types: sqlDollar[6].colTypes}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2793
		{
			sqlVAL.expr = sqlDollar[1].qname
		}
	case 529:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2798
		{
			sqlVAL.expr = ValArg{name: sqlDollar[1].str}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2802
		{
			sqlVAL.expr = &ParenExpr{Expr: sqlDollar[2].expr}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2808
		{
			sqlVAL.expr = &Subquery{Select: sqlDollar[1].selectStmt}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2812
		{
			sqlVAL.expr = &Subquery{Select: sqlDollar[1].selectStmt}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2816
		{
			sqlVAL.expr = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].selectStmt}}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2822
		{
			sqlVAL.expr = sqlDollar[2].expr
		}
	case 537:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2826
		{
			sqlVAL.expr = sqlDollar[1].expr
		}
	case 538:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2830
		{
			sqlVAL.expr = sqlDollar[1].expr
		}
	case 539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2838
		{
			sqlVAL.expr = &FuncExpr{Name: sqlDollar[1].qname}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2842
		{
			// TODO(pmattis): Support opt_sort_clause or remove it?
			sqlVAL.expr = &FuncExpr{Name: sqlDollar[1].qname, Exprs: sqlDollar[3].exprs}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2846
		{
			unimplemented()
		}
	case 542:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2847
		{
			unimplemented()
		}
	case 543:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2849
		{
			// TODO(pmattis): Support opt_sort_clause or remove it?
			sqlVAL.expr = &FuncExpr{Name: sqlDollar[1].qname, Type: All, Exprs: sqlDollar[4].exprs}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2854
		{
			// TODO(pmattis): Support opt_sort_clause or remove it?
			sqlVAL.expr = &FuncExpr{Name: sqlDollar[1].qname, Type: Distinct, Exprs: sqlDollar[4].exprs}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2859
		{
			sqlVAL.expr = &FuncExpr{Name: sqlDollar[1].qname, Exprs: Exprs{StarExpr()}}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2872
		{
			// TODO(pmattis): Support within_group_clause, filter_clause and
			// over_clause?
			sqlVAL.expr = sqlDollar[1].expr
		}
	case 547:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2878
		{
			sqlVAL.expr = sqlDollar[1].expr
		}
	case 548:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2887
		{
			unimplemented()
		}
	case 549:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2888
		{
			unimplemented()
		}
	case 550:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2892
		{
			unimplemented()
		}
	case 551:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2894
		{
			sqlVAL.expr = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2898
		{
			sqlVAL.expr = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2902
		{
			sqlVAL.expr = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2906
		{
			sqlVAL.expr = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2909
		{
			unimplemented()
		}
	case 556:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2910
		{
			unimplemented()
		}
	case 557:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2911
		{
			unimplemented()
		}
	case 558:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2912
		{
			unimplemented()
		}
	case 559:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2914
		{
			sqlVAL.expr = &CastExpr{Expr: sqlDollar[3].expr, Type: sqlDollar[5].colType}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2918
		{
			sqlVAL.expr = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].exprs}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2922
		{
			sqlVAL.expr = &OverlayExpr{FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].exprs}}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2926
		{
			sqlVAL.expr = &FuncExpr{Name: &QualifiedName{Base: "STRPOS"}, Exprs: sqlDollar[3].exprs}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2930
		{
			sqlVAL.expr = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].exprs}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2933
		{
			unimplemented()
		}
	case 565:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2935
		{
			sqlVAL.expr = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[4].exprs}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2939
		{
			sqlVAL.expr = &FuncExpr{Name: &QualifiedName{Base: "LTRIM"}, Exprs: sqlDollar[4].exprs}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2943
		{
			sqlVAL.expr = &FuncExpr{Name: &QualifiedName{Base: "RTRIM"}, Exprs: sqlDollar[4].exprs}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2947
		{
			sqlVAL.expr = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[3].exprs}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2951
		{
			sqlVAL.expr = &IfExpr{Cond: sqlDollar[3].expr, True: sqlDollar[5].expr, Else: sqlDollar[7].expr}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2955
		{
			sqlVAL.expr = &NullIfExpr{Expr1: sqlDollar[3].expr, Expr2: sqlDollar[5].expr}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2959
		{
			sqlVAL.expr = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].expr, sqlDollar[5].expr}}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2963
		{
			sqlVAL.expr = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].exprs}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2967
		{
			sqlVAL.expr = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].exprs}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2971
		{
			sqlVAL.expr = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].exprs}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2977
		{
			unimplemented()
		}
	case 576:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2978
		{
		}
	case 577:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2981
		{
			unimplemented()
		}
	case 578:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2982
		{
		}
	case 579:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2986
		{
			unimplemented()
		}
	case 580:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2987
		{
		}
	case 581:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2990
		{
			unimplemented()
		}
	case 582:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2991
		{
			unimplemented()
		}
	case 583:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2994
		{
			unimplemented()
		}
	case 584:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2997
		{
			unimplemented()
		}
	case 585:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2998
		{
			unimplemented()
		}
	case 586:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2999
		{
		}
	case 587:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3003
		{
			unimplemented()
		}
	case 588:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3014
		{
			unimplemented()
		}
	case 589:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3015
		{
		}
	case 590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3018
		{
			unimplemented()
		}
	case 591:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3019
		{
		}
	case 592:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3027
		{
			unimplemented()
		}
	case 593:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3028
		{
			unimplemented()
		}
	case 594:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3029
		{
		}
	case 595:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3032
		{
			unimplemented()
		}
	case 596:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3033
		{
			unimplemented()
		}
	case 597:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3039
		{
			unimplemented()
		}
	case 598:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3040
		{
			unimplemented()
		}
	case 599:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3041
		{
			unimplemented()
		}
	case 600:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3042
		{
			unimplemented()
		}
	case 601:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3043
		{
			unimplemented()
		}
	case 602:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3054
		{
			sqlVAL.expr = Row(sqlDollar[3].exprs)
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3058
		{
			sqlVAL.expr = Row(nil)
		}
	case 604:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3062
		{
			sqlVAL.expr = Tuple(append(sqlDollar[2].exprs, sqlDollar[4].expr))
		}
	case 605:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3068
		{
			sqlVAL.expr = Row(sqlDollar[3].exprs)
		}
	case 606:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3072
		{
			sqlVAL.expr = Row(nil)
		}
	case 607:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3078
		{
			sqlVAL.expr = Tuple(append(sqlDollar[2].exprs, sqlDollar[4].expr))
		}
	case 608:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3119
		{
			sqlVAL.exprs = Exprs{sqlDollar[1].expr}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3123
		{
			sqlVAL.exprs = append(sqlDollar[1].exprs, sqlDollar[3].expr)
		}
	case 610:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3129
		{
			sqlVAL.colTypes = []ColumnType{sqlDollar[1].colType}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3133
		{
			sqlVAL.colTypes = append(sqlDollar[1].colTypes, sqlDollar[3].colType)
		}
	case 612:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3139
		{
			sqlVAL.expr = Array(sqlDollar[2].exprs)
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3143
		{
			sqlVAL.expr = Array(sqlDollar[2].exprs)
		}
	case 614:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3147
		{
			sqlVAL.expr = Array(nil)
		}
	case 615:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3153
		{
			sqlVAL.exprs = Exprs{sqlDollar[1].expr}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3157
		{
			sqlVAL.exprs = append(sqlDollar[1].exprs, sqlDollar[3].expr)
		}
	case 617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3163
		{
			sqlVAL.exprs = Exprs{DString(sqlDollar[1].str), sqlDollar[3].expr}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3185
		{
			sqlVAL.exprs = Exprs{sqlDollar[1].expr, sqlDollar[2].expr, sqlDollar[3].expr, sqlDollar[4].expr}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3189
		{
			sqlVAL.exprs = Exprs{sqlDollar[1].expr, sqlDollar[2].expr, sqlDollar[3].expr}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3195
		{
			sqlVAL.expr = sqlDollar[2].expr
		}
	case 628:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3202
		{
			sqlVAL.exprs = Exprs{sqlDollar[3].expr, sqlDollar[1].expr}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3206
		{
			sqlVAL.exprs = nil
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3223
		{
			sqlVAL.exprs = Exprs{sqlDollar[1].expr, sqlDollar[2].expr, sqlDollar[3].expr}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3227
		{
			sqlVAL.exprs = Exprs{sqlDollar[1].expr, sqlDollar[3].expr, sqlDollar[2].expr}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3231
		{
			sqlVAL.exprs = Exprs{sqlDollar[1].expr, sqlDollar[2].expr}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3235
		{
			sqlVAL.exprs = Exprs{sqlDollar[1].expr, DInt(1), sqlDollar[2].expr}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3239
		{
			sqlVAL.exprs = sqlDollar[1].exprs
		}
	case 635:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3243
		{
			sqlVAL.exprs = nil
		}
	case 636:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3249
		{
			sqlVAL.expr = sqlDollar[2].expr
		}
	case 637:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3255
		{
			sqlVAL.expr = sqlDollar[2].expr
		}
	case 638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3261
		{
			sqlVAL.exprs = append(sqlDollar[3].exprs, sqlDollar[1].expr)
		}
	case 639:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3265
		{
			sqlVAL.exprs = sqlDollar[2].exprs
		}
	case 640:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3269
		{
			sqlVAL.exprs = sqlDollar[1].exprs
		}
	case 641:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3275
		{
			sqlVAL.expr = &Subquery{Select: sqlDollar[1].selectStmt}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3279
		{
			sqlVAL.expr = Tuple(sqlDollar[2].exprs)
		}
	case 643:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3290
		{
			sqlVAL.expr = &CaseExpr{Expr: sqlDollar[2].expr, Whens: sqlDollar[3].whens, Else: sqlDollar[4].expr}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3297
		{
			sqlVAL.whens = []*When{sqlDollar[1].when}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3301
		{
			sqlVAL.whens = append(sqlDollar[1].whens, sqlDollar[2].when)
		}
	case 646:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3307
		{
			sqlVAL.when = &When{Cond: sqlDollar[2].expr, Val: sqlDollar[4].expr}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3313
		{
			sqlVAL.expr = sqlDollar[2].expr
		}
	case 648:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3317
		{
			sqlVAL.expr = nil
		}
	case 650:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3324
		{
			sqlVAL.expr = nil
		}
	case 651:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3330
		{
			sqlVAL.indirectElem = sqlDollar[1].indirectElem
		}
	case 652:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3334
		{
			sqlVAL.indirectElem = sqlDollar[1].indirectElem
		}
	case 653:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3338
		{
			sqlVAL.indirectElem = IndexIndirection(sqlDollar[2].str)
		}
	case 654:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3342
		{
			sqlVAL.indirectElem = &ArrayIndirection{Begin: sqlDollar[2].expr}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3346
		{
			sqlVAL.indirectElem = &ArrayIndirection{Begin: sqlDollar[2].expr, End: sqlDollar[4].expr}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3352
		{
			sqlVAL.indirectElem = NameIndirection(sqlDollar[2].str)
		}
	case 657:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3358
		{
			sqlVAL.indirectElem = qualifiedStar
		}
	case 658:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3364
		{
			sqlVAL.indirect = Indirection{sqlDollar[1].indirectElem}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3368
		{
			sqlVAL.indirect = append(sqlDollar[1].indirect, sqlDollar[2].indirectElem)
		}
	case 660:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3373
		{
		}
	case 661:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3374
		{
		}
	case 663:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3383
		{
			sqlVAL.expr = DefaultVal{}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3389
		{
			sqlVAL.exprs = []Expr{sqlDollar[1].expr}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3393
		{
			sqlVAL.exprs = append(sqlDollar[1].exprs, sqlDollar[3].expr)
		}
	case 666:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3402
		{
			sqlVAL.exprs = sqlDollar[2].exprs
		}
	case 668:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3410
		{
			sqlVAL.selExprs = nil
		}
	case 669:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3416
		{
			sqlVAL.selExprs = SelectExprs{sqlDollar[1].selExpr}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3420
		{
			sqlVAL.selExprs = append(sqlDollar[1].selExprs, sqlDollar[3].selExpr)
		}
	case 671:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3426
		{
			sqlVAL.selExpr = SelectExpr{Expr: sqlDollar[1].expr, As: Name(sqlDollar[3].str)}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3435
		{
			sqlVAL.selExpr = SelectExpr{Expr: sqlDollar[1].expr, As: Name(sqlDollar[2].str)}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3439
		{
			sqlVAL.selExpr = SelectExpr{Expr: sqlDollar[1].expr}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3443
		{
			sqlVAL.selExpr = starSelectExpr()
		}
	case 675:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3451
		{
			sqlVAL.qnames = QualifiedNames{sqlDollar[1].qname}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3455
		{
			sqlVAL.qnames = append(sqlDollar[1].qnames, sqlDollar[3].qname)
		}
	case 677:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3461
		{
			sqlVAL.qnames = QualifiedNames{sqlDollar[1].qname}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3465
		{
			sqlVAL.qnames = append(sqlDollar[1].qnames, sqlDollar[3].qname)
		}
	case 679:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3476
		{
			sqlVAL.qname = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3480
		{
			sqlVAL.qname = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].indirect}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3491
		{
			sqlVAL.qname = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3495
		{
			sqlVAL.qname = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: Indirection{sqlDollar[2].indirectElem}}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3499
		{
			sqlVAL.qname = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: Indirection{sqlDollar[2].indirectElem}}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3503
		{
			sqlVAL.qname = &QualifiedName{Indirect: Indirection{unqualifiedStar}}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3509
		{
			sqlVAL.strs = []string{sqlDollar[1].str}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3513
		{
			sqlVAL.strs = append(sqlDollar[1].strs, sqlDollar[3].str)
		}
	case 687:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3519
		{
			sqlVAL.strs = sqlDollar[2].strs
		}
	case 688:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3522
		{
		}
	case 689:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3532
		{
			sqlVAL.qname = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3536
		{
			sqlVAL.qname = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].indirect}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3543
		{
			sqlVAL.expr = &IntVal{Val: sqlDollar[1].ival.Val, Str: sqlDollar[1].ival.Str}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3547
		{
			sqlVAL.expr = NumVal(sqlDollar[1].str)
		}
	case 693:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3551
		{
			sqlVAL.expr = DString(sqlDollar[1].str)
		}
	case 694:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3555
		{
			sqlVAL.expr = DBytes(sqlDollar[1].str)
		}
	case 695:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3558
		{
			unimplemented()
		}
	case 696:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3560
		{
			sqlVAL.expr = &CastExpr{Expr: DString(sqlDollar[2].str), Type: sqlDollar[1].colType}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3564
		{
			// TODO(pmattis): support opt_interval?
			sqlVAL.expr = &CastExpr{Expr: DString(sqlDollar[2].str), Type: sqlDollar[1].colType}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3569
		{
			// TODO(pmattis): Support the precision specification?
			sqlVAL.expr = &CastExpr{Expr: DString(sqlDollar[5].str), Type: sqlDollar[1].colType}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3574
		{
			sqlVAL.expr = DBool(true)
		}
	case 700:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3578
		{
			sqlVAL.expr = DBool(false)
		}
	case 701:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3582
		{
			sqlVAL.expr = DNull
		}
	case 703:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3589
		{
			sqlVAL.ival = sqlDollar[2].ival
		}
	case 704:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3593
		{
			sqlVAL.ival = IntVal{Val: -sqlDollar[2].ival.Val, Str: "-" + sqlDollar[2].ival.Str}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3615
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
