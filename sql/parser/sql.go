// Code generated by go yacc.
//line sql.y:21
package parser

import __yyfmt__ "fmt"

//line sql.y:21
import "github.com/cockroachdb/cockroach/sql/privilege"

func unimplemented() {
	panic("TODO(pmattis): unimplemented")
}

//line sql.y:30

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new sytax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in two forms, depending on the
// type of the value being accessed. Values and pointers are directly
// type asserted from the empty interface, meaning that they will panic
// if the type assertion is incorrect. Interfaces are handled differently
// because a nil instance of an interface inserted into the empty interface
// becomes a nil instance of the empty interface and therefore will fail a
// direct type assertion. Instead, a guarded type assertion must be used,
// which returns nil if the type assertion fails.
func (u *sqlSymUnion) ival() IntVal {
	return u.val.(IntVal)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) qname() *QualifiedName {
	return u.val.(*QualifiedName)
}
func (u *sqlSymUnion) qnames() QualifiedNames {
	return u.val.(QualifiedNames)
}
func (u *sqlSymUnion) indirectElem() IndirectionElem {
	if indirectElem, ok := u.val.(IndirectionElem); ok {
		return indirectElem
	}
	return nil
}
func (u *sqlSymUnion) indirect() Indirection {
	return u.val.(Indirection)
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	if selectStmt, ok := u.val.(SelectStatement); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	if constraintDef, ok := u.val.(ConstraintTableDef); ok {
		return constraintDef
	}
	return nil
}
func (u *sqlSymUnion) tblDef() TableDef {
	if tblDef, ok := u.val.(TableDef); ok {
		return tblDef
	}
	return nil
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() ColumnQualification {
	if colQual, ok := u.val.(ColumnQualification); ok {
		return colQual
	}
	return nil
}
func (u *sqlSymUnion) colQuals() []ColumnQualification {
	return u.val.([]ColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	if tblExpr, ok := u.val.(TableExpr); ok {
		return tblExpr
	}
	return nil
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	if joinCond, ok := u.val.(JoinCond); ok {
		return joinCond
	}
	return nil
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	if alterTableCmd, ok := u.val.(AlterTableCmd); ok {
		return alterTableCmd
	}
	return nil
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}

//line sql.y:234
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const FCONST = 57347
const SCONST = 57348
const BCONST = 57349
const ICONST = 57350
const PARAM = 57351
const TYPECAST = 57352
const DOT_DOT = 57353
const LESS_EQUALS = 57354
const GREATER_EQUALS = 57355
const NOT_EQUALS = 57356
const ERROR = 57357
const ACTION = 57358
const ADD = 57359
const ALL = 57360
const ALTER = 57361
const ANALYSE = 57362
const ANALYZE = 57363
const AND = 57364
const ANY = 57365
const ARRAY = 57366
const AS = 57367
const ASC = 57368
const ASYMMETRIC = 57369
const AT = 57370
const BEGIN = 57371
const BETWEEN = 57372
const BIGINT = 57373
const BIT = 57374
const BLOB = 57375
const BOOL = 57376
const BOOLEAN = 57377
const BOTH = 57378
const BY = 57379
const BYTEA = 57380
const BYTES = 57381
const CASCADE = 57382
const CASE = 57383
const CAST = 57384
const CHAR = 57385
const CHARACTER = 57386
const CHECK = 57387
const COALESCE = 57388
const COLLATE = 57389
const COLLATION = 57390
const COLUMN = 57391
const COLUMNS = 57392
const COMMIT = 57393
const COMMITTED = 57394
const CONCAT = 57395
const CONFLICT = 57396
const CONSTRAINT = 57397
const COVERING = 57398
const CREATE = 57399
const CROSS = 57400
const CUBE = 57401
const CURRENT = 57402
const CURRENT_CATALOG = 57403
const CURRENT_DATE = 57404
const CURRENT_ROLE = 57405
const CURRENT_TIME = 57406
const CURRENT_TIMESTAMP = 57407
const CURRENT_USER = 57408
const CYCLE = 57409
const DATA = 57410
const DATABASE = 57411
const DATABASES = 57412
const DATE = 57413
const DAY = 57414
const DEC = 57415
const DECIMAL = 57416
const DEFAULT = 57417
const DEFERRABLE = 57418
const DELETE = 57419
const DESC = 57420
const DISTINCT = 57421
const DO = 57422
const DOUBLE = 57423
const DROP = 57424
const ELSE = 57425
const END = 57426
const ESCAPE = 57427
const EXCEPT = 57428
const EXISTS = 57429
const EXPLAIN = 57430
const EXTRACT = 57431
const FALSE = 57432
const FETCH = 57433
const FILTER = 57434
const FIRST = 57435
const FLOAT = 57436
const FOLLOWING = 57437
const FOR = 57438
const FOREIGN = 57439
const FROM = 57440
const FULL = 57441
const GRANT = 57442
const GRANTS = 57443
const GREATEST = 57444
const GROUP = 57445
const GROUPING = 57446
const HAVING = 57447
const HIGH = 57448
const HOUR = 57449
const IF = 57450
const IFNULL = 57451
const IN = 57452
const INDEX = 57453
const INITIALLY = 57454
const INNER = 57455
const INSERT = 57456
const INT = 57457
const INT64 = 57458
const INTEGER = 57459
const INTERSECT = 57460
const INTERVAL = 57461
const INTO = 57462
const IS = 57463
const ISOLATION = 57464
const JOIN = 57465
const KEY = 57466
const LATERAL = 57467
const LEADING = 57468
const LEAST = 57469
const LEFT = 57470
const LEVEL = 57471
const LIKE = 57472
const LIMIT = 57473
const LOCAL = 57474
const LOCALTIME = 57475
const LOCALTIMESTAMP = 57476
const LOW = 57477
const LSHIFT = 57478
const MATCH = 57479
const MINUTE = 57480
const MONTH = 57481
const NAME = 57482
const NAMES = 57483
const NATURAL = 57484
const NEXT = 57485
const NO = 57486
const NORMAL = 57487
const NOT = 57488
const NOTHING = 57489
const NULL = 57490
const NULLIF = 57491
const NULLS = 57492
const NUMERIC = 57493
const OF = 57494
const OFF = 57495
const OFFSET = 57496
const ON = 57497
const ONLY = 57498
const OR = 57499
const ORDER = 57500
const ORDINALITY = 57501
const OUT = 57502
const OUTER = 57503
const OVER = 57504
const OVERLAPS = 57505
const OVERLAY = 57506
const PARTIAL = 57507
const PARTITION = 57508
const PLACING = 57509
const POSITION = 57510
const PRECEDING = 57511
const PRECISION = 57512
const PRIMARY = 57513
const PRIORITY = 57514
const RANGE = 57515
const READ = 57516
const REAL = 57517
const RECURSIVE = 57518
const REF = 57519
const REFERENCES = 57520
const RENAME = 57521
const REPEATABLE = 57522
const RESTRICT = 57523
const RETURNING = 57524
const REVOKE = 57525
const RIGHT = 57526
const ROLLBACK = 57527
const ROLLUP = 57528
const ROW = 57529
const ROWS = 57530
const RSHIFT = 57531
const SEARCH = 57532
const SECOND = 57533
const SELECT = 57534
const SERIALIZABLE = 57535
const SESSION = 57536
const SESSION_USER = 57537
const SET = 57538
const SHOW = 57539
const SIMILAR = 57540
const SIMPLE = 57541
const SMALLINT = 57542
const SNAPSHOT = 57543
const SOME = 57544
const SQL = 57545
const START = 57546
const STRICT = 57547
const STRING = 57548
const STORING = 57549
const SUBSTRING = 57550
const SYMMETRIC = 57551
const TABLE = 57552
const TABLES = 57553
const TEXT = 57554
const THEN = 57555
const TIME = 57556
const TIMESTAMP = 57557
const TO = 57558
const TRAILING = 57559
const TRANSACTION = 57560
const TREAT = 57561
const TRIM = 57562
const TRUE = 57563
const TRUNCATE = 57564
const TYPE = 57565
const UNBOUNDED = 57566
const UNCOMMITTED = 57567
const UNION = 57568
const UNIQUE = 57569
const UNKNOWN = 57570
const UPDATE = 57571
const USER = 57572
const USING = 57573
const VALID = 57574
const VALIDATE = 57575
const VALUE = 57576
const VALUES = 57577
const VARCHAR = 57578
const VARIADIC = 57579
const VARYING = 57580
const WHEN = 57581
const WHERE = 57582
const WINDOW = 57583
const WITH = 57584
const WITHIN = 57585
const WITHOUT = 57586
const YEAR = 57587
const ZONE = 57588
const NOT_LA = 57589
const WITH_LA = 57590
const POSTFIXOP = 57591
const UMINUS = 57592

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"FCONST",
	"SCONST",
	"BCONST",
	"ICONST",
	"PARAM",
	"TYPECAST",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXPLAIN",
	"EXTRACT",
	"FALSE",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FOLLOWING",
	"FOR",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HOUR",
	"IF",
	"IFNULL",
	"IN",
	"INDEX",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"LATERAL",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARTIAL",
	"PARTITION",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"RENAME",
	"REPEATABLE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SNAPSHOT",
	"SOME",
	"SQL",
	"START",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"TABLE",
	"TABLES",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"USER",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:4069

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 19,
	269, 19,
	-2, 305,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 29,
	1, 276,
	155, 276,
	182, 276,
	267, 276,
	269, 276,
	-2, 286,
	-1, 40,
	1, 279,
	155, 279,
	182, 279,
	267, 279,
	269, 279,
	-2, 285,
	-1, 49,
	1, 19,
	269, 19,
	-2, 305,
	-1, 85,
	1, 135,
	269, 135,
	-2, 765,
	-1, 244,
	131, 315,
	154, 315,
	-2, 282,
	-1, 247,
	131, 314,
	154, 314,
	-2, 280,
	-1, 355,
	131, 314,
	154, 314,
	-2, 283,
	-1, 412,
	266, 713,
	-2, 708,
	-1, 413,
	266, 714,
	-2, 709,
	-1, 419,
	6, 434,
	266, 434,
	-2, 842,
	-1, 441,
	6, 404,
	-2, 820,
	-1, 442,
	6, 431,
	266, 431,
	-2, 821,
	-1, 443,
	6, 412,
	-2, 822,
	-1, 444,
	6, 411,
	-2, 823,
	-1, 445,
	6, 431,
	266, 431,
	-2, 826,
	-1, 446,
	6, 431,
	266, 431,
	-2, 827,
	-1, 447,
	6, 432,
	-2, 829,
	-1, 448,
	6, 399,
	-2, 830,
	-1, 449,
	6, 399,
	-2, 831,
	-1, 450,
	6, 414,
	-2, 834,
	-1, 451,
	6, 400,
	-2, 839,
	-1, 452,
	6, 401,
	-2, 840,
	-1, 453,
	6, 402,
	-2, 841,
	-1, 454,
	6, 399,
	-2, 845,
	-1, 455,
	6, 405,
	-2, 850,
	-1, 456,
	6, 403,
	-2, 852,
	-1, 457,
	6, 433,
	-2, 856,
	-1, 458,
	6, 429,
	266, 429,
	-2, 860,
	-1, 712,
	86, 286,
	118, 286,
	131, 286,
	154, 286,
	158, 286,
	226, 286,
	-2, 536,
	-1, 720,
	266, 693,
	-2, 683,
	-1, 913,
	12, 0,
	13, 0,
	14, 0,
	249, 0,
	250, 0,
	251, 0,
	-2, 467,
	-1, 914,
	12, 0,
	13, 0,
	14, 0,
	249, 0,
	250, 0,
	251, 0,
	-2, 468,
	-1, 915,
	12, 0,
	13, 0,
	14, 0,
	249, 0,
	250, 0,
	251, 0,
	-2, 469,
	-1, 919,
	12, 0,
	13, 0,
	14, 0,
	249, 0,
	250, 0,
	251, 0,
	-2, 473,
	-1, 920,
	12, 0,
	13, 0,
	14, 0,
	249, 0,
	250, 0,
	251, 0,
	-2, 474,
	-1, 921,
	12, 0,
	13, 0,
	14, 0,
	249, 0,
	250, 0,
	251, 0,
	-2, 475,
	-1, 924,
	30, 0,
	110, 0,
	130, 0,
	198, 0,
	247, 0,
	-2, 480,
	-1, 955,
	163, 606,
	-2, 609,
	-1, 1102,
	86, 286,
	118, 286,
	131, 286,
	154, 286,
	158, 286,
	226, 286,
	-2, 356,
	-1, 1110,
	30, 0,
	110, 0,
	130, 0,
	198, 0,
	247, 0,
	-2, 481,
	-1, 1115,
	30, 0,
	110, 0,
	130, 0,
	198, 0,
	247, 0,
	-2, 482,
	-1, 1134,
	163, 605,
	-2, 608,
	-1, 1273,
	30, 0,
	110, 0,
	130, 0,
	198, 0,
	247, 0,
	-2, 483,
	-1, 1278,
	121, 0,
	-2, 493,
	-1, 1287,
	163, 607,
	-2, 610,
	-1, 1327,
	12, 0,
	13, 0,
	14, 0,
	249, 0,
	250, 0,
	251, 0,
	-2, 517,
	-1, 1328,
	12, 0,
	13, 0,
	14, 0,
	249, 0,
	250, 0,
	251, 0,
	-2, 518,
	-1, 1329,
	12, 0,
	13, 0,
	14, 0,
	249, 0,
	250, 0,
	251, 0,
	-2, 519,
	-1, 1333,
	12, 0,
	13, 0,
	14, 0,
	249, 0,
	250, 0,
	251, 0,
	-2, 523,
	-1, 1334,
	12, 0,
	13, 0,
	14, 0,
	249, 0,
	250, 0,
	251, 0,
	-2, 524,
	-1, 1335,
	12, 0,
	13, 0,
	14, 0,
	249, 0,
	250, 0,
	251, 0,
	-2, 525,
	-1, 1428,
	121, 0,
	-2, 494,
	-1, 1432,
	30, 0,
	110, 0,
	130, 0,
	198, 0,
	247, 0,
	-2, 497,
	-1, 1433,
	30, 0,
	110, 0,
	130, 0,
	198, 0,
	247, 0,
	-2, 499,
	-1, 1512,
	30, 0,
	110, 0,
	130, 0,
	198, 0,
	247, 0,
	-2, 498,
	-1, 1513,
	30, 0,
	110, 0,
	130, 0,
	198, 0,
	247, 0,
	-2, 500,
	-1, 1521,
	121, 0,
	-2, 526,
	-1, 1558,
	121, 0,
	-2, 527,
	-1, 1603,
	30, 0,
	130, 0,
	198, 0,
	247, 0,
	-2, 819,
}

const sqlNprod = 952
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 18765

var sqlAct = [...]int{

	952, 1602, 1585, 791, 1563, 1623, 1586, 1601, 1469, 1587,
	853, 1529, 1307, 798, 1491, 411, 1502, 1279, 1397, 1365,
	1414, 1098, 861, 275, 840, 410, 715, 1408, 86, 1010,
	1192, 471, 375, 253, 28, 1191, 837, 1253, 968, 1262,
	403, 650, 1396, 1137, 839, 1090, 478, 777, 1086, 799,
	768, 717, 1007, 1280, 972, 13, 940, 1101, 937, 28,
	962, 864, 18, 750, 499, 746, 526, 832, 10, 386,
	512, 483, 6, 90, 289, 481, 248, 672, 385, 255,
	39, 61, 553, 28, 376, 247, 345, 294, 63, 666,
	472, 346, 473, 296, 62, 537, 862, 509, 64, 842,
	59, 258, 40, 358, 292, 39, 528, 359, 68, 83,
	357, 41, 524, 508, 285, 1493, 501, 272, 796, 459,
	272, 501, 281, 965, 475, 272, 252, 291, 476, 39,
	792, 474, 670, 475, 300, 1599, 369, 476, 1490, 252,
	474, 1130, 245, 1593, 271, 1592, 857, 278, 857, 1551,
	1584, 244, 286, 1431, 413, 673, 297, 673, 966, 1579,
	1058, 1560, 857, 1554, 1431, 1548, 857, 322, 1490, 674,
	1539, 1514, 323, 1490, 1431, 1509, 1499, 1132, 857, 1490,
	301, 1489, 1133, 1474, 1490, 89, 857, 1340, 1473, 967,
	964, 857, 1454, 1434, 1430, 1130, 1130, 1431, 89, 89,
	45, 1375, 89, 1131, 857, 89, 89, 89, 1130, 1286,
	89, 89, 89, 89, 1283, 299, 1244, 1130, 47, 500,
	1240, 1209, 1207, 500, 1210, 1130, 1206, 1205, 1134, 1130,
	1130, 1130, 1070, 89, 89, 45, 858, 765, 1136, 857,
	764, 506, 969, 48, 507, 766, 1088, 1072, 857, 813,
	43, 1130, 504, 47, 45, 948, 44, 502, 852, 826,
	370, 645, 502, 644, 518, 517, 317, 377, 377, 350,
	270, 45, 47, 1164, 42, 49, 1600, 479, 48, 476,
	552, 334, 1598, 1555, 1498, 43, 1459, 1455, 355, 47,
	1447, 44, 1446, 1441, 466, 1440, 963, 48, 1439, 1438,
	465, 470, 1425, 1393, 43, 1355, 1350, 1349, 272, 795,
	44, 1348, 1290, 1268, 48, 1252, 1212, 1108, 718, 1211,
	1199, 356, 1190, 1163, 1074, 1160, 945, 1058, 60, 674,
	1158, 1147, 475, 1141, 1071, 349, 476, 1022, 979, 474,
	978, 369, 723, 468, 368, 42, 500, 467, 1530, 1309,
	1550, 647, 1531, 272, 494, 1523, 1505, 1496, 245, 1488,
	1466, 658, 660, 1452, 1419, 1164, 1404, 244, 667, 1277,
	675, 405, 1267, 1423, 1250, 1249, 1247, 1224, 1223, 461,
	286, 706, 707, 708, 709, 710, 1189, 1155, 677, 1154,
	713, 1146, 1127, 89, 1123, 89, 942, 89, 492, 1178,
	300, 300, 751, 754, 1036, 946, 1035, 676, 556, 1017,
	726, 977, 89, 646, 1392, 856, 756, 744, 743, 714,
	742, 741, 740, 739, 738, 720, 515, 737, 89, 736,
	735, 734, 516, 733, 732, 731, 548, 730, 89, 89,
	541, 89, 721, 719, 42, 637, 301, 301, 641, 648,
	642, 640, 1179, 276, 557, 373, 1511, 1510, 1270, 1269,
	256, 1395, 675, 656, 362, 245, 655, 654, 245, 245,
	1164, 89, 668, 89, 662, 1164, 761, 663, 664, 1036,
	677, 299, 299, 1059, 1109, 341, 329, 728, 1409, 555,
	89, 1178, 89, 89, 792, 89, 1310, 973, 1150, 676,
	747, 1055, 759, 1569, 53, 265, 1612, 89, 1538, 771,
	328, 748, 749, 752, 1383, 484, 1613, 485, 755, 1172,
	1165, 1166, 1167, 1168, 1169, 89, 233, 28, 89, 344,
	484, 1066, 485, 808, 294, 675, 782, 784, 460, 758,
	28, 54, 379, 757, 1179, 234, 1482, 1481, 556, 794,
	556, 1236, 239, 677, 1216, 1215, 675, 760, 272, 762,
	251, 790, 61, 1145, 1144, 802, 1143, 1142, 1111, 63,
	806, 903, 676, 291, 677, 62, 1571, 418, 807, 64,
	486, 300, 929, 463, 774, 787, 39, 242, 691, 812,
	1537, 770, 250, 676, 557, 486, 557, 1235, 789, 788,
	495, 811, 724, 297, 816, 820, 817, 810, 814, 819,
	809, 1471, 1165, 1166, 1167, 1168, 1169, 678, 679, 680,
	681, 682, 462, 415, 89, 969, 556, 301, 326, 555,
	1422, 555, 252, 939, 939, 831, 1226, 1620, 484, 89,
	485, 692, 770, 89, 815, 1238, 89, 1050, 769, 1299,
	89, 501, 89, 89, 973, 89, 55, 490, 89, 89,
	89, 691, 299, 327, 489, 89, 89, 1626, 1612, 850,
	851, 993, 557, 1532, 1067, 377, 859, 1047, 778, 904,
	905, 906, 907, 908, 909, 910, 911, 912, 913, 914,
	915, 916, 917, 918, 919, 920, 921, 922, 923, 924,
	249, 547, 969, 486, 1065, 902, 324, 555, 685, 678,
	679, 680, 681, 682, 692, 365, 366, 272, 371, 1167,
	1168, 1169, 1165, 1166, 1167, 1168, 1169, 56, 240, 867,
	781, 487, 835, 980, 51, 991, 834, 1001, 1003, 1008,
	1011, 1012, 1013, 272, 836, 243, 487, 759, 949, 954,
	1227, 957, 759, 1581, 325, 1589, 325, 1296, 1233, 866,
	965, 1021, 1472, 342, 347, 479, 1002, 745, 1582, 57,
	953, 1624, 1014, 1015, 1016, 1619, 52, 927, 556, 683,
	684, 685, 678, 679, 680, 681, 682, 943, 1297, 1519,
	944, 822, 502, 1051, 89, 966, 1153, 824, 1031, 711,
	482, 1263, 89, 89, 780, 680, 681, 682, 1625, 767,
	825, 1025, 252, 343, 1588, 1113, 938, 1611, 823, 1609,
	360, 1590, 1407, 1627, 557, 1053, 967, 964, 89, 1033,
	1164, 89, 846, 337, 318, 1336, 316, 1027, 1026, 361,
	1476, 969, 1450, 361, 1164, 983, 1180, 1181, 1182, 1618,
	1475, 1464, 1218, 667, 487, 1591, 1427, 928, 1030, 555,
	779, 1379, 847, 1046, 653, 291, 523, 649, 58, 1295,
	1054, 1564, 1061, 291, 1075, 50, 1057, 925, 1060, 969,
	1062, 1633, 1382, 360, 1063, 1073, 1064, 1177, 1104, 1381,
	28, 1069, 1465, 1068, 643, 521, 519, 1038, 1037, 1417,
	300, 1258, 1337, 1257, 661, 522, 324, 284, 1338, 250,
	352, 1087, 1081, 986, 1254, 1451, 1076, 1522, 976, 1083,
	1097, 1449, 89, 89, 89, 1082, 1110, 1103, 89, 1084,
	1115, 89, 1378, 963, 1107, 272, 39, 89, 89, 89,
	89, 89, 1079, 89, 89, 926, 301, 1193, 987, 1129,
	89, 752, 89, 755, 1632, 1183, 1178, 1276, 89, 1138,
	1380, 1159, 1122, 818, 673, 749, 748, 89, 89, 340,
	1178, 338, 1126, 89, 1151, 335, 1128, 935, 1156, 988,
	985, 299, 283, 1120, 1194, 1114, 1112, 729, 933, 1139,
	1140, 639, 975, 1362, 1118, 1231, 1229, 1217, 89, 713,
	89, 89, 1077, 89, 848, 1008, 1008, 1008, 845, 1179,
	505, 503, 89, 498, 491, 488, 1304, 89, 89, 1483,
	89, 77, 1613, 1179, 543, 1214, 1149, 770, 1188, 1485,
	331, 770, 989, 785, 1135, 363, 1221, 783, 1371, 1201,
	1366, 268, 786, 1239, 931, 854, 930, 873, 1364, 1493,
	936, 1534, 1116, 3, 1552, 893, 1121, 1196, 1197, 1198,
	479, 1241, 546, 534, 545, 1557, 539, 675, 1372, 1255,
	1213, 367, 797, 1173, 1170, 1171, 1172, 1165, 1166, 1167,
	1168, 1169, 1220, 1174, 1175, 1176, 984, 1173, 1170, 1171,
	1172, 1165, 1166, 1167, 1168, 1169, 364, 855, 1234, 332,
	319, 320, 269, 277, 676, 669, 1243, 1230, 1242, 1232,
	1272, 1256, 1273, 1106, 1259, 65, 1248, 1246, 1630, 932,
	1631, 1164, 398, 1278, 675, 1117, 934, 1424, 802, 69,
	1436, 1288, 1119, 549, 1264, 1265, 1356, 1288, 1260, 1367,
	1302, 1368, 827, 76, 1271, 828, 1208, 873, 1020, 74,
	1019, 1305, 1018, 87, 70, 893, 970, 1284, 272, 829,
	1314, 272, 1303, 1316, 1370, 830, 259, 259, 1089, 1222,
	274, 1373, 71, 274, 280, 274, 722, 551, 274, 287,
	274, 87, 1298, 1300, 1301, 1289, 73, 238, 1470, 675,
	550, 89, 67, 638, 1345, 1346, 336, 1315, 1443, 1311,
	1580, 87, 87, 1352, 1353, 1354, 1152, 677, 1518, 1093,
	1501, 1313, 974, 89, 892, 1292, 1293, 1294, 1317, 1341,
	1369, 1093, 1343, 1096, 727, 89, 676, 89, 1344, 89,
	1351, 23, 89, 1091, 1399, 1096, 391, 1363, 1094, 377,
	1219, 841, 1361, 89, 558, 1261, 89, 544, 533, 1347,
	1094, 1357, 1092, 872, 89, 1410, 414, 89, 66, 895,
	339, 527, 536, 1402, 72, 982, 1402, 464, 416, 870,
	417, 1390, 871, 1401, 28, 753, 1401, 1428, 994, 404,
	1412, 1413, 1432, 1433, 1418, 1411, 1405, 1435, 1403, 232,
	1421, 1403, 1437, 1406, 1095, 1429, 1394, 69, 894, 869,
	675, 75, 868, 1386, 295, 800, 1095, 1442, 89, 971,
	1148, 1445, 725, 390, 892, 540, 535, 74, 677, 396,
	395, 950, 70, 387, 235, 236, 237, 272, 272, 321,
	81, 272, 82, 1052, 1391, 793, 849, 676, 657, 1228,
	71, 1453, 241, 1161, 1000, 1371, 1448, 992, 990, 981,
	1237, 348, 477, 872, 73, 801, 1376, 1377, 374, 895,
	333, 274, 860, 87, 1105, 353, 372, 665, 267, 266,
	89, 89, 89, 838, 330, 1372, 520, 821, 89, 89,
	259, 493, 1477, 1533, 89, 1460, 89, 1461, 89, 89,
	89, 89, 1568, 1225, 46, 1463, 274, 17, 894, 869,
	1420, 1495, 16, 15, 89, 14, 274, 274, 1402, 496,
	12, 11, 89, 89, 1494, 1080, 89, 1506, 1401, 1486,
	1402, 9, 89, 89, 8, 1492, 691, 1512, 1513, 7,
	1401, 22, 72, 1403, 1504, 1484, 21, 1478, 20, 513,
	1507, 513, 5, 1468, 4, 1403, 1367, 1497, 1368, 1479,
	1480, 2, 1, 0, 0, 0, 0, 1526, 87, 0,
	513, 87, 0, 87, 89, 0, 0, 1528, 0, 75,
	1524, 1370, 0, 0, 0, 652, 0, 1500, 1373, 692,
	994, 994, 1527, 0, 0, 1515, 0, 272, 0, 479,
	0, 0, 0, 259, 0, 873, 671, 0, 1541, 0,
	0, 0, 1543, 893, 0, 1545, 1402, 0, 1549, 1542,
	0, 0, 0, 0, 1517, 0, 1401, 89, 0, 89,
	0, 89, 1544, 0, 759, 0, 1547, 1369, 89, 873,
	0, 1403, 0, 0, 0, 0, 873, 893, 994, 994,
	994, 1559, 0, 1572, 893, 0, 0, 678, 679, 680,
	681, 682, 1508, 0, 0, 0, 0, 1575, 0, 0,
	0, 1573, 89, 1570, 89, 1578, 1402, 873, 1577, 0,
	1595, 0, 89, 0, 89, 893, 1401, 0, 0, 1594,
	0, 0, 1606, 1606, 1597, 1596, 0, 1583, 0, 0,
	1607, 1403, 274, 1576, 1610, 1556, 1608, 0, 0, 1614,
	1615, 0, 1567, 0, 1606, 1617, 0, 775, 1616, 1124,
	1125, 274, 0, 0, 274, 0, 0, 1629, 274, 1628,
	804, 805, 0, 274, 1574, 0, 274, 87, 87, 0,
	0, 1606, 1634, 513, 671, 675, 89, 89, 1553, 0,
	89, 802, 0, 0, 0, 0, 0, 0, 89, 873,
	0, 0, 0, 677, 0, 994, 994, 893, 0, 0,
	89, 0, 892, 1565, 1566, 0, 0, 1185, 1186, 1187,
	0, 0, 676, 0, 0, 0, 0, 0, 690, 0,
	0, 0, 0, 1164, 0, 89, 89, 89, 0, 89,
	0, 0, 0, 0, 0, 0, 892, 0, 0, 0,
	0, 872, 0, 892, 0, 0, 89, 895, 994, 994,
	994, 994, 994, 994, 994, 994, 994, 994, 994, 994,
	994, 994, 994, 994, 994, 994, 89, 994, 0, 0,
	0, 0, 0, 0, 892, 872, 0, 1089, 0, 0,
	0, 895, 872, 392, 29, 0, 894, 869, 895, 0,
	0, 0, 0, 0, 0, 873, 0, 0, 0, 0,
	0, 691, 833, 893, 0, 0, 0, 0, 0, 29,
	274, 775, 0, 872, 0, 0, 0, 0, 1093, 895,
	894, 869, 0, 246, 1274, 1275, 254, 894, 869, 0,
	0, 0, 1096, 29, 0, 0, 274, 0, 0, 87,
	0, 0, 1091, 873, 254, 0, 0, 1094, 0, 1178,
	0, 893, 0, 0, 692, 0, 892, 0, 894, 869,
	0, 1092, 0, 0, 873, 0, 0, 0, 0, 0,
	0, 0, 893, 0, 1416, 0, 0, 1318, 1319, 1320,
	1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330,
	1331, 1332, 1333, 1334, 1335, 872, 1339, 0, 0, 0,
	0, 895, 1179, 1095, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 686, 683,
	684, 685, 678, 679, 680, 681, 682, 0, 0, 0,
	274, 1028, 1029, 0, 0, 873, 775, 0, 0, 1034,
	894, 869, 0, 893, 0, 1039, 1040, 1042, 1044, 1045,
	1415, 1048, 1049, 19, 0, 994, 0, 0, 274, 0,
	1056, 0, 892, 32, 0, 0, 274, 1170, 1171, 1172,
	1165, 1166, 1167, 1168, 1169, 833, 513, 0, 0, 0,
	0, 833, 0, 0, 0, 34, 0, 0, 0, 0,
	0, 38, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 872, 0, 0, 0, 0, 652, 895, 87, 274,
	892, 1078, 0, 0, 0, 0, 24, 0, 35, 0,
	1085, 0, 25, 0, 0, 1100, 1100, 0, 274, 0,
	0, 892, 994, 0, 26, 0, 0, 0, 0, 246,
	0, 0, 0, 0, 0, 0, 894, 869, 675, 872,
	693, 694, 695, 0, 0, 895, 0, 222, 0, 0,
	696, 0, 0, 0, 0, 0, 677, 0, 702, 0,
	872, 231, 0, 0, 0, 0, 895, 0, 0, 0,
	0, 0, 0, 0, 1467, 676, 0, 0, 0, 0,
	0, 690, 0, 0, 894, 869, 0, 1164, 0, 1180,
	1181, 1182, 892, 224, 0, 994, 0, 0, 0, 1426,
	0, 0, 0, 0, 0, 894, 869, 27, 0, 36,
	0, 0, 223, 225, 0, 0, 45, 0, 0, 0,
	30, 31, 0, 0, 0, 0, 0, 0, 33, 0,
	1177, 872, 0, 0, 47, 0, 246, 895, 703, 246,
	246, 0, 0, 0, 226, 0, 37, 0, 0, 701,
	0, 1521, 0, 0, 227, 0, 0, 0, 698, 48,
	0, 0, 0, 712, 691, 0, 43, 716, 0, 0,
	0, 0, 44, 0, 0, 0, 894, 869, 0, 0,
	0, 0, 0, 0, 0, 697, 0, 0, 0, 671,
	42, 0, 675, 0, 693, 694, 695, 0, 1183, 0,
	0, 0, 0, 0, 696, 0, 0, 0, 0, 0,
	677, 274, 702, 1178, 0, 0, 0, 692, 0, 0,
	0, 0, 0, 1245, 1558, 775, 700, 652, 0, 676,
	1251, 0, 0, 0, 0, 690, 0, 0, 0, 0,
	0, 274, 0, 0, 274, 0, 0, 0, 0, 0,
	0, 0, 1266, 0, 228, 1100, 0, 229, 0, 0,
	0, 230, 0, 0, 0, 0, 1179, 29, 0, 0,
	0, 0, 0, 0, 0, 699, 0, 687, 688, 689,
	29, 686, 683, 684, 685, 678, 679, 680, 681, 682,
	0, 0, 703, 1023, 0, 0, 0, 0, 0, 0,
	1024, 0, 0, 701, 0, 0, 1308, 0, 0, 0,
	0, 0, 698, 0, 0, 0, 0, 0, 691, 0,
	0, 0, 0, 0, 0, 0, 1174, 1175, 1176, 0,
	1173, 1170, 1171, 1172, 1165, 1166, 1167, 1168, 1169, 697,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 675, 0, 693, 694, 695, 0,
	0, 0, 0, 0, 0, 0, 696, 0, 1359, 1360,
	775, 692, 677, 0, 702, 0, 671, 671, 0, 0,
	700, 0, 1384, 0, 1385, 0, 274, 1387, 1388, 1389,
	0, 676, 0, 0, 0, 0, 0, 690, 0, 0,
	1398, 0, 775, 1398, 0, 1164, 0, 0, 0, 0,
	274, 274, 0, 0, 274, 0, 0, 0, 0, 0,
	671, 1100, 0, 0, 0, 0, 0, 0, 0, 699,
	0, 687, 688, 689, 0, 686, 683, 684, 685, 678,
	679, 680, 681, 682, 0, 0, 0, 863, 1177, 0,
	0, 0, 1456, 0, 703, 0, 0, 0, 0, 0,
	0, 0, 1444, 675, 0, 701, 0, 0, 0, 0,
	0, 0, 0, 0, 698, 0, 0, 941, 0, 0,
	691, 677, 0, 0, 0, 0, 675, 0, 693, 694,
	695, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	676, 697, 0, 0, 677, 0, 702, 675, 0, 693,
	694, 695, 0, 0, 0, 775, 0, 1462, 0, 87,
	0, 0, 0, 676, 0, 677, 274, 702, 0, 690,
	0, 1178, 0, 692, 0, 0, 0, 0, 0, 0,
	0, 0, 700, 0, 676, 1398, 0, 0, 0, 0,
	690, 0, 0, 0, 0, 0, 0, 1398, 0, 0,
	274, 0, 1503, 0, 0, 0, 0, 0, 0, 254,
	274, 0, 671, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1179, 0, 703, 0, 0, 691,
	0, 699, 0, 687, 688, 689, 0, 686, 683, 684,
	685, 678, 679, 680, 681, 682, 698, 703, 0, 0,
	0, 0, 691, 0, 1204, 0, 0, 0, 701, 0,
	0, 0, 0, 0, 0, 0, 0, 698, 0, 0,
	29, 0, 0, 691, 1535, 1536, 0, 0, 1540, 1102,
	0, 0, 692, 1398, 0, 0, 87, 0, 1173, 1170,
	1171, 1172, 1165, 1166, 1167, 1168, 1169, 0, 671, 0,
	0, 0, 0, 0, 0, 692, 0, 0, 0, 0,
	0, 0, 0, 0, 700, 0, 0, 0, 0, 0,
	0, 0, 0, 671, 671, 274, 692, 87, 0, 0,
	0, 0, 0, 0, 0, 700, 0, 0, 0, 0,
	0, 0, 941, 1398, 1503, 0, 686, 683, 684, 685,
	678, 679, 680, 681, 682, 0, 712, 0, 0, 0,
	0, 0, 0, 699, 274, 687, 688, 689, 0, 686,
	683, 684, 685, 678, 679, 680, 681, 682, 0, 0,
	0, 0, 0, 0, 699, 0, 687, 688, 689, 0,
	686, 683, 684, 685, 678, 679, 680, 681, 682, 0,
	0, 0, 0, 0, 0, 0, 412, 400, 401, 402,
	399, 388, 712, 0, 0, 0, 0, 0, 91, 92,
	959, 93, 0, 0, 0, 0, 394, 0, 0, 0,
	94, 95, 181, 441, 442, 96, 443, 444, 0, 97,
	186, 187, 98, 409, 427, 445, 446, 0, 437, 0,
	420, 0, 99, 100, 101, 0, 102, 0, 103, 0,
	304, 104, 105, 0, 421, 423, 0, 422, 424, 106,
	107, 108, 109, 447, 110, 448, 449, 0, 0, 111,
	0, 960, 0, 440, 113, 0, 0, 0, 0, 393,
	114, 428, 407, 0, 115, 116, 450, 117, 0, 0,
	0, 305, 863, 118, 438, 863, 198, 0, 119, 120,
	434, 436, 0, 0, 0, 306, 121, 451, 452, 453,
	0, 419, 0, 307, 122, 308, 123, 0, 0, 439,
	309, 124, 310, 0, 260, 0, 0, 125, 0, 126,
	127, 128, 129, 261, 311, 130, 131, 132, 383, 133,
	408, 435, 134, 454, 135, 136, 0, 0, 0, 0,
	0, 137, 208, 312, 138, 313, 429, 139, 140, 0,
	430, 141, 211, 0, 142, 143, 144, 455, 145, 146,
	0, 147, 148, 149, 0, 150, 314, 151, 152, 397,
	153, 0, 154, 155, 0, 156, 262, 425, 157, 158,
	315, 159, 456, 160, 0, 161, 162, 164, 215, 163,
	431, 0, 0, 165, 166, 0, 264, 457, 0, 0,
	263, 432, 433, 406, 167, 168, 169, 170, 0, 0,
	171, 172, 426, 0, 173, 174, 175, 220, 458, 958,
	176, 0, 0, 0, 0, 177, 178, 179, 180, 384,
	0, 0, 0, 0, 29, 0, 0, 0, 0, 380,
	381, 961, 0, 0, 0, 382, 0, 0, 389, 956,
	0, 863, 863, 0, 0, 863, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1487,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 554, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 863, 0, 91, 92, 559, 93, 560, 561, 562,
	563, 564, 565, 566, 567, 94, 95, 181, 182, 183,
	96, 184, 185, 568, 97, 186, 187, 98, 569, 570,
	188, 189, 571, 190, 572, 303, 573, 99, 100, 101,
	0, 102, 574, 103, 575, 304, 104, 105, 576, 577,
	578, 579, 580, 581, 106, 107, 108, 109, 191, 110,
	192, 193, 582, 583, 111, 584, 585, 586, 112, 113,
	587, 588, 712, 589, 194, 114, 195, 590, 591, 115,
	116, 196, 117, 592, 593, 594, 305, 595, 118, 197,
	596, 198, 597, 119, 120, 199, 200, 598, 599, 600,
	306, 121, 201, 202, 203, 601, 204, 602, 307, 122,
	308, 123, 603, 604, 205, 309, 124, 310, 605, 260,
	606, 607, 125, 0, 126, 127, 128, 129, 261, 311,
	130, 131, 132, 608, 133, 609, 206, 134, 207, 135,
	136, 610, 611, 612, 613, 614, 137, 208, 312, 138,
	313, 209, 139, 140, 615, 210, 141, 211, 616, 142,
	143, 144, 212, 145, 146, 617, 147, 148, 149, 618,
	150, 314, 151, 152, 213, 153, 0, 154, 155, 619,
	156, 262, 620, 157, 158, 315, 159, 214, 160, 621,
	161, 162, 164, 215, 163, 216, 622, 623, 165, 166,
	624, 264, 217, 625, 626, 263, 218, 219, 627, 167,
	168, 169, 170, 628, 629, 171, 172, 630, 631, 173,
	174, 175, 220, 221, 632, 176, 633, 634, 635, 636,
	177, 178, 179, 180, 0, 554, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 763, 91, 92, 559,
	93, 560, 561, 562, 563, 564, 565, 566, 567, 94,
	95, 181, 182, 183, 96, 184, 185, 568, 97, 186,
	187, 98, 569, 570, 188, 189, 571, 190, 572, 303,
	573, 99, 100, 101, 0, 102, 574, 103, 575, 304,
	104, 105, 576, 577, 578, 579, 580, 581, 106, 107,
	108, 109, 191, 110, 192, 193, 582, 583, 111, 584,
	585, 586, 112, 113, 587, 588, 0, 589, 194, 114,
	195, 590, 591, 115, 116, 196, 117, 592, 593, 594,
	305, 595, 118, 197, 596, 198, 597, 119, 120, 199,
	200, 598, 599, 600, 306, 121, 201, 202, 203, 601,
	204, 602, 307, 122, 308, 123, 603, 604, 205, 309,
	124, 310, 605, 260, 606, 607, 125, 0, 126, 127,
	128, 129, 261, 311, 130, 131, 132, 608, 133, 609,
	206, 134, 207, 135, 136, 610, 611, 612, 613, 614,
	137, 208, 312, 138, 313, 209, 139, 140, 615, 210,
	141, 211, 616, 142, 143, 144, 212, 145, 146, 617,
	147, 148, 149, 618, 150, 314, 151, 152, 213, 153,
	0, 154, 155, 619, 156, 262, 620, 157, 158, 315,
	159, 214, 160, 621, 161, 162, 164, 215, 163, 216,
	622, 623, 165, 166, 624, 264, 217, 625, 626, 263,
	218, 219, 627, 167, 168, 169, 170, 628, 629, 171,
	172, 630, 631, 173, 174, 175, 220, 221, 632, 176,
	633, 634, 635, 636, 177, 178, 179, 180, 412, 400,
	401, 402, 399, 388, 0, 0, 0, 0, 0, 0,
	91, 92, 0, 93, 0, 0, 0, 0, 394, 0,
	0, 0, 94, 95, 181, 441, 442, 96, 443, 444,
	0, 97, 186, 187, 98, 409, 427, 445, 446, 0,
	437, 0, 420, 0, 99, 100, 101, 0, 102, 0,
	103, 0, 304, 104, 105, 0, 421, 423, 0, 422,
	424, 106, 107, 108, 109, 447, 110, 448, 449, 480,
	0, 111, 0, 0, 0, 440, 113, 0, 0, 0,
	0, 393, 114, 428, 407, 0, 115, 116, 450, 117,
	0, 0, 0, 305, 0, 118, 438, 0, 198, 0,
	119, 120, 434, 436, 0, 0, 0, 306, 121, 451,
	452, 453, 0, 419, 0, 307, 122, 308, 123, 0,
	0, 439, 309, 124, 310, 0, 260, 0, 0, 125,
	0, 126, 127, 128, 129, 261, 311, 130, 131, 132,
	383, 133, 408, 435, 134, 454, 135, 136, 0, 0,
	0, 0, 0, 137, 208, 312, 138, 313, 429, 139,
	140, 0, 430, 141, 211, 0, 142, 143, 144, 455,
	145, 146, 0, 147, 148, 149, 0, 150, 314, 151,
	152, 397, 153, 0, 154, 155, 45, 156, 262, 425,
	157, 158, 315, 159, 456, 160, 0, 161, 162, 164,
	215, 163, 431, 0, 47, 165, 166, 0, 264, 457,
	0, 0, 263, 432, 433, 406, 167, 168, 169, 170,
	0, 0, 171, 172, 426, 0, 173, 174, 175, 302,
	458, 0, 176, 0, 0, 0, 43, 177, 178, 179,
	180, 384, 44, 412, 400, 401, 402, 399, 388, 0,
	0, 380, 381, 0, 0, 91, 92, 382, 93, 0,
	389, 0, 0, 394, 0, 0, 0, 94, 95, 181,
	441, 442, 96, 443, 444, 0, 97, 186, 187, 98,
	409, 427, 445, 446, 0, 437, 0, 420, 0, 99,
	100, 101, 0, 102, 0, 103, 0, 304, 104, 105,
	0, 421, 423, 0, 422, 424, 106, 107, 108, 109,
	447, 110, 448, 449, 0, 0, 111, 0, 0, 0,
	440, 113, 0, 0, 0, 0, 393, 114, 428, 407,
	0, 115, 116, 450, 117, 0, 0, 0, 305, 0,
	118, 438, 0, 198, 0, 119, 120, 434, 436, 0,
	0, 0, 306, 121, 451, 452, 453, 0, 419, 0,
	307, 122, 308, 123, 0, 0, 439, 309, 124, 310,
	0, 260, 0, 0, 125, 0, 126, 127, 128, 129,
	261, 311, 130, 131, 132, 383, 133, 408, 435, 134,
	454, 135, 136, 0, 0, 0, 0, 0, 137, 208,
	312, 138, 313, 429, 139, 140, 0, 430, 141, 211,
	0, 142, 143, 144, 455, 145, 146, 0, 147, 148,
	149, 0, 150, 314, 151, 152, 397, 153, 0, 154,
	155, 45, 156, 262, 425, 157, 158, 315, 159, 456,
	160, 0, 161, 162, 164, 215, 163, 431, 0, 47,
	165, 166, 0, 264, 457, 0, 0, 263, 432, 433,
	406, 167, 168, 169, 170, 0, 0, 171, 172, 426,
	0, 173, 174, 175, 302, 458, 0, 176, 0, 0,
	0, 43, 177, 178, 179, 180, 384, 44, 412, 400,
	401, 402, 399, 388, 0, 0, 380, 381, 0, 0,
	91, 92, 382, 93, 0, 389, 0, 0, 394, 0,
	0, 0, 94, 95, 181, 441, 442, 96, 443, 444,
	1004, 97, 186, 187, 98, 409, 427, 445, 446, 0,
	437, 0, 420, 0, 99, 100, 101, 0, 102, 0,
	103, 0, 304, 104, 105, 0, 421, 423, 0, 422,
	424, 106, 107, 108, 109, 447, 110, 448, 449, 0,
	0, 111, 0, 0, 0, 440, 113, 0, 0, 0,
	0, 393, 114, 428, 407, 0, 115, 116, 450, 117,
	0, 0, 1009, 305, 0, 118, 438, 0, 198, 0,
	119, 120, 434, 436, 0, 0, 0, 306, 121, 451,
	452, 453, 0, 419, 0, 307, 122, 308, 123, 0,
	1005, 439, 309, 124, 310, 0, 260, 0, 0, 125,
	0, 126, 127, 128, 129, 261, 311, 130, 131, 132,
	383, 133, 408, 435, 134, 454, 135, 136, 0, 0,
	0, 0, 0, 137, 208, 312, 138, 313, 429, 139,
	140, 0, 430, 141, 211, 0, 142, 143, 144, 455,
	145, 146, 0, 147, 148, 149, 0, 150, 314, 151,
	152, 397, 153, 0, 154, 155, 0, 156, 262, 425,
	157, 158, 315, 159, 456, 160, 0, 161, 162, 164,
	215, 163, 431, 0, 0, 165, 166, 0, 264, 457,
	0, 1006, 263, 432, 433, 406, 167, 168, 169, 170,
	0, 0, 171, 172, 426, 0, 173, 174, 175, 220,
	458, 0, 176, 0, 0, 0, 0, 177, 178, 179,
	180, 384, 0, 412, 400, 401, 402, 399, 388, 0,
	0, 380, 381, 0, 0, 91, 92, 382, 93, 0,
	389, 0, 0, 394, 0, 0, 0, 94, 95, 181,
	441, 442, 96, 443, 444, 0, 97, 186, 187, 98,
	409, 427, 445, 446, 0, 437, 0, 420, 0, 99,
	100, 101, 0, 102, 0, 103, 0, 304, 104, 105,
	0, 421, 423, 0, 422, 424, 106, 107, 108, 109,
	447, 110, 448, 449, 0, 0, 111, 0, 0, 0,
	440, 113, 0, 0, 0, 0, 393, 114, 428, 407,
	0, 115, 116, 450, 117, 0, 0, 0, 305, 0,
	118, 438, 0, 198, 0, 119, 120, 434, 436, 0,
	0, 0, 306, 121, 451, 452, 453, 0, 419, 0,
	307, 122, 308, 123, 0, 0, 439, 309, 124, 310,
	0, 260, 0, 0, 125, 0, 126, 127, 128, 129,
	261, 311, 130, 131, 132, 383, 133, 408, 435, 134,
	454, 135, 136, 0, 0, 0, 0, 0, 137, 208,
	312, 138, 313, 429, 139, 140, 0, 430, 141, 211,
	0, 142, 143, 144, 455, 145, 146, 0, 147, 148,
	149, 0, 150, 314, 151, 152, 397, 153, 0, 154,
	155, 0, 156, 262, 425, 157, 158, 315, 159, 456,
	160, 0, 161, 162, 164, 215, 163, 431, 0, 0,
	165, 166, 0, 264, 457, 0, 0, 263, 432, 433,
	406, 167, 168, 169, 170, 0, 0, 171, 172, 426,
	0, 173, 174, 175, 220, 458, 0, 176, 0, 0,
	0, 0, 177, 178, 179, 180, 384, 0, 412, 400,
	401, 402, 399, 388, 0, 0, 380, 381, 0, 0,
	91, 92, 382, 93, 0, 389, 1342, 0, 394, 0,
	0, 0, 94, 95, 181, 441, 442, 96, 443, 444,
	0, 97, 186, 187, 98, 409, 427, 445, 446, 0,
	437, 0, 420, 0, 99, 100, 101, 0, 102, 0,
	103, 0, 304, 104, 105, 0, 421, 423, 0, 422,
	424, 106, 107, 108, 109, 447, 110, 448, 449, 0,
	0, 111, 0, 0, 0, 440, 113, 0, 0, 0,
	0, 393, 114, 428, 407, 0, 115, 116, 450, 117,
	0, 0, 0, 305, 0, 118, 438, 0, 198, 0,
	119, 120, 434, 436, 0, 0, 0, 306, 121, 451,
	452, 453, 0, 419, 0, 307, 122, 308, 123, 0,
	0, 439, 309, 124, 310, 0, 260, 0, 0, 125,
	0, 126, 127, 128, 129, 261, 311, 130, 131, 132,
	383, 133, 408, 435, 134, 454, 135, 136, 0, 0,
	0, 0, 0, 137, 208, 312, 138, 313, 429, 139,
	140, 0, 430, 141, 211, 0, 142, 143, 144, 455,
	145, 146, 0, 147, 148, 149, 0, 150, 314, 151,
	152, 397, 153, 0, 154, 155, 0, 156, 262, 425,
	157, 158, 315, 159, 456, 160, 0, 161, 162, 164,
	215, 163, 431, 0, 0, 165, 166, 0, 264, 457,
	0, 0, 263, 432, 433, 406, 167, 168, 169, 170,
	0, 0, 171, 172, 426, 0, 173, 174, 175, 220,
	458, 0, 176, 0, 0, 0, 0, 177, 178, 179,
	180, 384, 0, 412, 400, 401, 402, 399, 388, 0,
	0, 380, 381, 0, 0, 91, 92, 382, 93, 0,
	389, 1285, 0, 394, 0, 0, 0, 94, 95, 181,
	441, 442, 96, 443, 444, 0, 97, 186, 187, 98,
	409, 427, 445, 446, 0, 437, 0, 420, 0, 99,
	100, 101, 0, 102, 0, 103, 0, 304, 104, 105,
	0, 421, 423, 0, 422, 424, 106, 107, 108, 109,
	447, 110, 448, 449, 0, 0, 111, 0, 0, 0,
	440, 113, 0, 0, 0, 0, 393, 114, 428, 407,
	0, 115, 116, 450, 117, 0, 0, 0, 305, 0,
	118, 438, 0, 198, 0, 119, 120, 434, 436, 0,
	0, 0, 306, 121, 451, 452, 453, 0, 419, 0,
	307, 122, 308, 123, 0, 0, 439, 309, 124, 310,
	0, 260, 0, 0, 125, 0, 126, 127, 128, 129,
	261, 311, 130, 131, 132, 383, 133, 408, 435, 134,
	454, 135, 136, 0, 0, 0, 0, 0, 137, 208,
	312, 138, 313, 429, 139, 140, 0, 430, 141, 211,
	0, 142, 143, 144, 455, 145, 146, 0, 147, 148,
	149, 0, 150, 314, 151, 152, 397, 153, 0, 154,
	155, 0, 156, 262, 425, 157, 158, 315, 159, 456,
	160, 0, 161, 162, 164, 215, 163, 431, 0, 0,
	165, 166, 0, 264, 457, 0, 0, 263, 432, 433,
	406, 167, 168, 169, 170, 0, 0, 171, 172, 426,
	0, 173, 174, 175, 220, 458, 0, 176, 0, 0,
	0, 0, 177, 178, 179, 180, 384, 0, 412, 400,
	401, 402, 399, 388, 0, 0, 380, 381, 0, 0,
	91, 92, 382, 93, 0, 389, 955, 0, 394, 0,
	0, 0, 94, 95, 181, 441, 442, 96, 443, 444,
	0, 97, 186, 187, 98, 409, 427, 445, 446, 0,
	437, 0, 420, 0, 99, 100, 101, 0, 102, 0,
	103, 0, 304, 104, 105, 0, 421, 423, 0, 422,
	424, 106, 107, 108, 109, 447, 110, 448, 449, 0,
	0, 111, 0, 0, 0, 440, 113, 0, 0, 0,
	0, 393, 114, 428, 407, 0, 115, 116, 450, 117,
	0, 0, 0, 305, 0, 118, 438, 0, 198, 0,
	119, 120, 434, 436, 0, 0, 0, 306, 121, 451,
	452, 453, 0, 419, 0, 307, 122, 308, 123, 0,
	0, 439, 309, 124, 310, 0, 260, 0, 0, 125,
	0, 126, 127, 128, 129, 261, 311, 130, 131, 132,
	383, 133, 408, 435, 134, 454, 135, 136, 0, 0,
	0, 0, 0, 137, 208, 312, 138, 313, 429, 139,
	140, 0, 430, 141, 211, 0, 142, 143, 144, 455,
	145, 146, 0, 147, 148, 149, 0, 150, 314, 151,
	152, 397, 153, 0, 154, 155, 0, 156, 262, 425,
	157, 158, 315, 159, 456, 160, 0, 161, 162, 164,
	215, 163, 431, 0, 0, 165, 166, 0, 264, 457,
	0, 0, 263, 432, 433, 406, 167, 168, 169, 170,
	0, 0, 171, 172, 426, 0, 173, 174, 175, 220,
	458, 0, 176, 0, 0, 0, 0, 177, 178, 179,
	180, 384, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 380, 381, 0, 0, 0, 0, 382, 718, 951,
	389, 412, 400, 401, 402, 399, 388, 0, 0, 0,
	0, 0, 0, 91, 92, 0, 93, 0, 0, 0,
	0, 394, 0, 0, 0, 94, 95, 181, 441, 442,
	96, 443, 444, 0, 97, 186, 187, 98, 409, 427,
	445, 446, 0, 437, 0, 420, 0, 99, 100, 101,
	0, 102, 0, 103, 0, 304, 104, 105, 0, 421,
	423, 0, 422, 424, 106, 107, 108, 109, 447, 110,
	448, 449, 0, 0, 111, 0, 0, 0, 440, 113,
	0, 0, 0, 0, 393, 114, 428, 407, 0, 115,
	116, 450, 117, 0, 0, 0, 305, 0, 118, 438,
	0, 198, 0, 119, 120, 434, 436, 0, 0, 0,
	306, 121, 451, 452, 453, 0, 419, 0, 307, 122,
	308, 123, 0, 0, 439, 309, 124, 310, 0, 260,
	0, 0, 125, 0, 126, 127, 128, 129, 261, 311,
	130, 131, 132, 383, 133, 408, 435, 134, 454, 135,
	136, 0, 0, 0, 0, 0, 137, 208, 312, 138,
	313, 429, 139, 140, 0, 430, 141, 211, 0, 142,
	143, 144, 455, 145, 146, 0, 147, 148, 149, 0,
	150, 314, 151, 152, 397, 153, 0, 154, 155, 0,
	156, 262, 425, 157, 158, 315, 159, 456, 160, 0,
	161, 162, 164, 215, 163, 431, 0, 0, 165, 166,
	0, 264, 457, 0, 0, 263, 432, 433, 406, 167,
	168, 169, 170, 0, 0, 171, 172, 426, 0, 173,
	174, 175, 220, 458, 0, 176, 0, 0, 0, 0,
	177, 178, 179, 180, 384, 0, 412, 400, 401, 402,
	399, 388, 0, 0, 380, 381, 378, 0, 91, 92,
	382, 93, 0, 389, 0, 0, 394, 0, 0, 0,
	94, 95, 181, 441, 442, 96, 443, 444, 0, 97,
	186, 187, 98, 409, 427, 445, 446, 0, 437, 0,
	420, 0, 99, 100, 101, 0, 102, 0, 103, 0,
	304, 104, 105, 0, 421, 423, 0, 422, 424, 106,
	107, 108, 109, 447, 110, 448, 449, 0, 0, 111,
	0, 0, 0, 440, 113, 0, 0, 0, 0, 393,
	114, 428, 407, 0, 115, 116, 450, 117, 0, 0,
	0, 305, 0, 118, 438, 0, 198, 0, 119, 120,
	434, 436, 0, 0, 0, 306, 121, 451, 452, 453,
	0, 419, 0, 307, 122, 308, 123, 0, 0, 439,
	309, 124, 310, 0, 260, 0, 0, 125, 0, 126,
	127, 128, 129, 261, 311, 130, 131, 132, 383, 133,
	408, 435, 134, 454, 135, 136, 0, 0, 0, 0,
	0, 137, 208, 312, 138, 313, 429, 139, 140, 0,
	430, 141, 211, 0, 142, 143, 144, 455, 145, 146,
	0, 147, 148, 149, 0, 150, 314, 151, 152, 397,
	153, 0, 154, 155, 0, 156, 262, 425, 157, 158,
	315, 159, 456, 160, 0, 161, 162, 164, 215, 163,
	431, 0, 0, 165, 166, 0, 264, 457, 0, 0,
	263, 432, 433, 406, 167, 168, 169, 170, 0, 0,
	171, 172, 426, 0, 173, 174, 175, 220, 458, 1291,
	176, 0, 0, 0, 0, 177, 178, 179, 180, 384,
	0, 412, 400, 401, 402, 399, 388, 0, 0, 380,
	381, 0, 0, 91, 92, 382, 93, 0, 389, 0,
	0, 394, 0, 0, 0, 94, 95, 181, 441, 442,
	96, 443, 444, 0, 97, 186, 187, 98, 409, 427,
	445, 446, 0, 437, 0, 420, 0, 99, 100, 101,
	0, 102, 0, 103, 0, 304, 104, 105, 0, 421,
	423, 0, 422, 424, 106, 107, 108, 109, 447, 110,
	448, 449, 480, 0, 111, 0, 0, 0, 440, 113,
	0, 0, 0, 0, 393, 114, 428, 407, 0, 115,
	116, 450, 117, 0, 0, 0, 305, 0, 118, 438,
	0, 198, 0, 119, 120, 434, 436, 0, 0, 0,
	306, 121, 451, 452, 453, 0, 419, 0, 307, 122,
	308, 123, 0, 0, 439, 309, 124, 310, 0, 260,
	0, 0, 125, 0, 126, 127, 128, 129, 261, 311,
	130, 131, 132, 383, 133, 408, 435, 134, 454, 135,
	136, 0, 0, 0, 0, 0, 137, 208, 312, 138,
	313, 429, 139, 140, 0, 430, 141, 211, 0, 142,
	143, 144, 455, 145, 146, 0, 147, 148, 149, 0,
	150, 314, 151, 152, 397, 153, 0, 154, 155, 0,
	156, 262, 425, 157, 158, 315, 159, 456, 160, 0,
	161, 162, 164, 215, 163, 431, 0, 0, 165, 166,
	0, 264, 457, 0, 0, 263, 432, 433, 406, 167,
	168, 169, 170, 0, 0, 171, 172, 426, 0, 173,
	174, 175, 220, 458, 0, 176, 0, 0, 0, 0,
	177, 178, 179, 180, 384, 0, 412, 400, 401, 402,
	399, 388, 0, 0, 380, 381, 0, 0, 91, 92,
	382, 93, 0, 389, 0, 0, 394, 0, 0, 0,
	94, 95, 181, 441, 442, 96, 443, 444, 0, 97,
	186, 187, 98, 409, 427, 445, 446, 0, 437, 0,
	420, 0, 99, 100, 101, 0, 102, 0, 103, 0,
	304, 104, 105, 0, 421, 423, 0, 422, 424, 106,
	107, 108, 109, 447, 110, 448, 449, 0, 0, 111,
	0, 0, 0, 440, 113, 0, 0, 0, 0, 393,
	114, 428, 407, 0, 115, 116, 450, 117, 0, 0,
	1009, 305, 0, 118, 438, 0, 198, 0, 119, 120,
	434, 436, 0, 0, 0, 306, 121, 451, 452, 453,
	0, 419, 0, 307, 122, 308, 123, 0, 0, 439,
	309, 124, 310, 0, 260, 0, 0, 125, 0, 126,
	127, 128, 129, 261, 311, 130, 131, 132, 383, 133,
	408, 435, 134, 454, 135, 136, 0, 0, 0, 0,
	0, 137, 208, 312, 138, 313, 429, 139, 140, 0,
	430, 141, 211, 0, 142, 143, 144, 455, 145, 146,
	0, 147, 148, 149, 0, 150, 314, 151, 152, 397,
	153, 0, 154, 155, 0, 156, 262, 425, 157, 158,
	315, 159, 456, 160, 0, 161, 162, 164, 215, 163,
	431, 0, 0, 165, 166, 0, 264, 457, 0, 0,
	263, 432, 433, 406, 167, 168, 169, 170, 0, 0,
	171, 172, 426, 0, 173, 174, 175, 220, 458, 0,
	176, 0, 0, 0, 0, 177, 178, 179, 180, 384,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 380,
	381, 0, 0, 0, 0, 382, 0, 0, 389, 412,
	400, 401, 402, 399, 388, 0, 0, 0, 0, 0,
	0, 91, 92, 659, 93, 0, 0, 0, 0, 394,
	0, 0, 0, 94, 95, 181, 441, 442, 96, 443,
	444, 0, 97, 186, 187, 98, 409, 427, 445, 446,
	0, 437, 0, 420, 0, 99, 100, 101, 0, 102,
	0, 103, 0, 304, 104, 105, 0, 421, 423, 0,
	422, 424, 106, 107, 108, 109, 447, 110, 448, 449,
	0, 0, 111, 0, 0, 0, 440, 113, 0, 0,
	0, 0, 393, 114, 428, 407, 0, 115, 116, 450,
	117, 0, 0, 0, 305, 0, 118, 438, 0, 198,
	0, 119, 120, 434, 436, 0, 0, 0, 306, 121,
	451, 452, 453, 0, 419, 0, 307, 122, 308, 123,
	0, 0, 439, 309, 124, 310, 0, 260, 0, 0,
	125, 0, 126, 127, 128, 129, 261, 311, 130, 131,
	132, 383, 133, 408, 435, 134, 454, 135, 136, 0,
	0, 0, 0, 0, 137, 208, 312, 138, 313, 429,
	139, 140, 0, 430, 141, 211, 0, 142, 143, 144,
	455, 145, 146, 0, 147, 148, 149, 0, 150, 314,
	151, 152, 397, 153, 0, 154, 155, 0, 156, 262,
	425, 157, 158, 315, 159, 456, 160, 0, 161, 162,
	164, 215, 163, 431, 0, 0, 165, 166, 0, 264,
	457, 0, 0, 263, 432, 433, 406, 167, 168, 169,
	170, 0, 0, 171, 172, 426, 0, 173, 174, 175,
	220, 458, 0, 176, 0, 0, 0, 0, 177, 178,
	179, 180, 384, 0, 412, 400, 401, 402, 399, 388,
	0, 0, 380, 381, 0, 0, 91, 92, 382, 93,
	0, 389, 0, 0, 394, 0, 0, 0, 94, 95,
	181, 441, 442, 96, 443, 444, 0, 97, 186, 187,
	98, 409, 427, 445, 446, 0, 437, 0, 420, 0,
	99, 100, 101, 0, 102, 0, 103, 0, 304, 104,
	1605, 0, 421, 423, 0, 422, 424, 106, 107, 108,
	109, 447, 110, 448, 449, 0, 0, 111, 0, 0,
	0, 440, 113, 0, 0, 0, 0, 393, 114, 428,
	407, 0, 115, 116, 450, 117, 0, 0, 0, 305,
	0, 118, 438, 0, 198, 0, 119, 120, 434, 436,
	0, 0, 0, 306, 121, 451, 452, 453, 0, 419,
	0, 307, 122, 308, 123, 0, 0, 439, 309, 124,
	310, 0, 260, 0, 0, 125, 0, 126, 127, 128,
	129, 261, 311, 130, 131, 132, 383, 133, 408, 435,
	134, 454, 135, 136, 0, 0, 0, 0, 0, 137,
	208, 312, 138, 313, 429, 139, 140, 0, 430, 141,
	211, 0, 142, 143, 144, 455, 145, 146, 0, 147,
	148, 149, 0, 150, 314, 151, 152, 397, 153, 0,
	154, 155, 0, 156, 262, 425, 157, 158, 315, 159,
	456, 160, 0, 161, 162, 164, 215, 163, 431, 0,
	0, 165, 166, 0, 264, 457, 0, 0, 263, 432,
	433, 406, 167, 168, 1604, 170, 0, 0, 171, 172,
	426, 0, 173, 174, 175, 220, 458, 0, 176, 0,
	0, 0, 0, 177, 178, 179, 180, 384, 0, 412,
	400, 401, 402, 399, 388, 0, 0, 380, 381, 0,
	0, 91, 92, 382, 93, 0, 389, 0, 0, 394,
	0, 0, 0, 94, 95, 1603, 441, 442, 96, 443,
	444, 0, 97, 186, 187, 98, 409, 427, 445, 446,
	0, 437, 0, 420, 0, 99, 100, 101, 0, 102,
	0, 103, 0, 304, 104, 1605, 0, 421, 423, 0,
	422, 424, 106, 107, 108, 109, 447, 110, 448, 449,
	0, 0, 111, 0, 0, 0, 440, 113, 0, 0,
	0, 0, 393, 114, 428, 407, 0, 115, 116, 450,
	117, 0, 0, 0, 305, 0, 118, 438, 0, 198,
	0, 119, 120, 434, 436, 0, 0, 0, 306, 121,
	451, 452, 453, 0, 419, 0, 307, 122, 308, 123,
	0, 0, 439, 309, 124, 310, 0, 260, 0, 0,
	125, 0, 126, 127, 128, 129, 261, 311, 130, 131,
	132, 383, 133, 408, 435, 134, 454, 135, 136, 0,
	0, 0, 0, 0, 137, 208, 312, 138, 313, 429,
	139, 140, 0, 430, 141, 211, 0, 142, 143, 144,
	455, 145, 146, 0, 147, 148, 149, 0, 150, 314,
	151, 152, 397, 153, 0, 154, 155, 0, 156, 262,
	425, 157, 158, 315, 159, 456, 160, 0, 161, 162,
	164, 215, 163, 431, 0, 0, 165, 166, 0, 264,
	457, 0, 0, 263, 432, 433, 406, 167, 168, 1604,
	170, 0, 0, 171, 172, 426, 0, 173, 174, 175,
	220, 458, 0, 176, 0, 0, 0, 0, 177, 178,
	179, 180, 384, 0, 412, 400, 401, 402, 399, 388,
	0, 0, 380, 381, 0, 0, 91, 92, 382, 93,
	0, 389, 0, 0, 394, 0, 0, 0, 94, 95,
	181, 441, 442, 96, 443, 444, 0, 97, 186, 187,
	98, 409, 427, 445, 446, 0, 437, 0, 420, 0,
	99, 100, 101, 0, 102, 0, 103, 0, 304, 104,
	105, 0, 421, 423, 0, 422, 424, 106, 107, 108,
	109, 447, 110, 448, 449, 0, 0, 111, 0, 0,
	0, 440, 113, 0, 0, 0, 0, 393, 114, 428,
	407, 0, 115, 116, 450, 117, 0, 0, 0, 305,
	0, 118, 438, 0, 198, 0, 119, 120, 434, 436,
	0, 0, 0, 306, 121, 451, 452, 453, 0, 419,
	0, 307, 122, 308, 123, 0, 0, 439, 309, 124,
	310, 0, 260, 0, 0, 125, 0, 126, 127, 128,
	129, 261, 311, 130, 131, 132, 383, 133, 408, 435,
	134, 454, 135, 136, 0, 0, 0, 0, 0, 137,
	208, 312, 138, 313, 429, 139, 140, 0, 430, 141,
	211, 0, 142, 143, 144, 455, 145, 146, 0, 147,
	148, 149, 0, 150, 314, 151, 152, 397, 153, 0,
	154, 155, 0, 156, 262, 425, 157, 158, 315, 159,
	456, 160, 0, 161, 162, 164, 215, 163, 431, 0,
	0, 165, 166, 0, 264, 457, 0, 0, 263, 432,
	433, 406, 167, 168, 169, 170, 0, 0, 171, 172,
	426, 0, 173, 174, 175, 220, 458, 0, 176, 0,
	0, 0, 0, 177, 178, 179, 180, 384, 0, 412,
	400, 401, 402, 399, 388, 0, 0, 380, 381, 0,
	0, 91, 92, 382, 93, 0, 389, 0, 0, 394,
	0, 0, 0, 94, 95, 181, 441, 442, 96, 443,
	444, 0, 97, 186, 187, 98, 409, 427, 445, 446,
	0, 437, 0, 420, 0, 99, 100, 101, 0, 102,
	0, 103, 0, 304, 104, 105, 0, 421, 423, 0,
	422, 424, 106, 107, 108, 109, 447, 110, 448, 449,
	0, 0, 111, 0, 0, 0, 440, 113, 0, 0,
	0, 0, 393, 114, 428, 407, 0, 115, 116, 450,
	117, 0, 0, 0, 305, 0, 118, 438, 0, 198,
	0, 119, 120, 434, 436, 0, 0, 0, 306, 121,
	451, 452, 453, 0, 419, 0, 307, 122, 308, 123,
	0, 0, 439, 309, 124, 310, 0, 260, 0, 0,
	125, 0, 126, 127, 128, 129, 261, 311, 130, 131,
	132, 0, 133, 408, 435, 134, 454, 135, 136, 0,
	0, 0, 0, 0, 137, 208, 312, 138, 313, 429,
	139, 140, 0, 430, 141, 211, 0, 142, 143, 144,
	455, 145, 146, 0, 147, 148, 149, 0, 150, 314,
	151, 152, 999, 153, 0, 154, 155, 0, 156, 262,
	425, 157, 158, 315, 159, 456, 160, 0, 161, 162,
	164, 215, 163, 431, 0, 0, 165, 166, 0, 264,
	457, 0, 0, 263, 432, 433, 406, 167, 168, 169,
	170, 0, 0, 171, 172, 426, 0, 173, 174, 175,
	220, 458, 0, 176, 0, 0, 0, 0, 177, 178,
	179, 180, 412, 400, 401, 402, 399, 388, 0, 0,
	0, 0, 995, 996, 91, 92, 0, 93, 997, 0,
	0, 998, 394, 0, 0, 0, 94, 95, 0, 441,
	442, 96, 443, 444, 0, 97, 186, 187, 98, 409,
	427, 445, 446, 0, 437, 0, 420, 0, 99, 100,
	101, 0, 102, 0, 103, 0, 304, 104, 1605, 0,
	421, 423, 0, 422, 424, 106, 107, 108, 109, 447,
	110, 448, 449, 0, 0, 111, 0, 0, 0, 440,
	113, 0, 0, 0, 0, 393, 114, 428, 407, 0,
	115, 116, 450, 117, 0, 0, 0, 305, 0, 118,
	438, 0, 198, 0, 119, 120, 434, 436, 0, 0,
	0, 306, 121, 451, 452, 453, 0, 419, 0, 0,
	122, 308, 123, 0, 0, 439, 309, 124, 0, 0,
	260, 0, 0, 125, 0, 126, 127, 128, 129, 261,
	311, 130, 131, 132, 383, 133, 408, 435, 134, 454,
	135, 136, 0, 0, 0, 0, 0, 137, 208, 312,
	138, 313, 429, 139, 140, 0, 430, 141, 211, 0,
	142, 143, 144, 455, 145, 146, 0, 147, 148, 149,
	0, 150, 314, 151, 152, 397, 153, 0, 154, 155,
	0, 156, 262, 425, 157, 158, 0, 159, 456, 160,
	0, 161, 162, 164, 215, 163, 431, 0, 0, 165,
	166, 0, 264, 457, 0, 0, 263, 432, 433, 406,
	167, 168, 1604, 170, 0, 0, 171, 172, 426, 0,
	173, 174, 175, 220, 458, 0, 176, 0, 0, 0,
	0, 177, 178, 179, 180, 412, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 380, 381, 91, 92, 0,
	93, 382, 0, 0, 389, 0, 0, 0, 0, 94,
	95, 181, 182, 183, 96, 184, 185, 0, 97, 186,
	187, 98, 0, 427, 188, 189, 0, 437, 0, 420,
	0, 99, 100, 101, 0, 102, 0, 103, 0, 304,
	104, 105, 0, 421, 423, 0, 422, 424, 106, 107,
	108, 109, 191, 110, 192, 193, 0, 0, 111, 0,
	0, 0, 112, 113, 0, 0, 0, 0, 194, 114,
	428, 0, 0, 115, 116, 196, 117, 0, 0, 0,
	305, 0, 118, 438, 0, 198, 0, 119, 120, 434,
	436, 0, 0, 0, 306, 121, 201, 202, 203, 0,
	204, 0, 307, 122, 308, 123, 0, 0, 439, 309,
	124, 310, 0, 260, 0, 0, 125, 0, 126, 127,
	128, 129, 261, 311, 130, 131, 132, 0, 133, 0,
	435, 134, 207, 135, 136, 0, 0, 0, 0, 0,
	137, 208, 312, 138, 313, 429, 139, 140, 0, 430,
	141, 211, 0, 142, 143, 144, 212, 145, 146, 0,
	147, 148, 149, 0, 150, 314, 151, 152, 213, 153,
	0, 154, 155, 0, 156, 262, 425, 157, 158, 315,
	159, 214, 160, 0, 161, 162, 164, 215, 163, 431,
	0, 0, 165, 166, 0, 264, 217, 0, 0, 263,
	432, 433, 0, 167, 168, 169, 170, 0, 0, 171,
	172, 426, 0, 173, 174, 175, 220, 221, 0, 176,
	0, 0, 0, 0, 177, 178, 179, 180, 298, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	91, 92, 0, 93, 0, 0, 0, 1400, 0, 0,
	0, 0, 94, 95, 181, 182, 183, 96, 184, 185,
	0, 97, 186, 187, 98, 0, 0, 188, 189, 0,
	190, 0, 303, 0, 99, 100, 101, 0, 102, 0,
	103, 0, 304, 104, 105, 0, 0, 0, 0, 0,
	0, 106, 107, 108, 109, 191, 110, 192, 193, 0,
	0, 111, 0, 0, 0, 112, 113, 0, 0, 0,
	0, 194, 114, 195, 0, 0, 115, 116, 196, 117,
	0, 0, 0, 305, 0, 118, 197, 0, 198, 0,
	119, 120, 199, 200, 0, 0, 0, 306, 121, 201,
	202, 203, 0, 204, 0, 307, 122, 308, 123, 0,
	0, 205, 309, 124, 310, 0, 260, 0, 0, 125,
	0, 126, 127, 128, 129, 261, 311, 130, 131, 132,
	0, 133, 0, 206, 134, 207, 135, 136, 0, 0,
	0, 0, 0, 137, 208, 312, 138, 313, 209, 139,
	140, 0, 210, 141, 211, 0, 142, 143, 144, 212,
	145, 146, 0, 147, 148, 149, 0, 150, 314, 151,
	152, 213, 153, 0, 154, 155, 45, 156, 262, 0,
	157, 158, 315, 159, 214, 160, 0, 161, 162, 164,
	215, 163, 216, 0, 47, 165, 166, 0, 264, 217,
	0, 0, 263, 218, 219, 0, 167, 168, 169, 170,
	0, 0, 171, 172, 0, 0, 173, 174, 175, 302,
	221, 0, 176, 0, 0, 0, 43, 177, 178, 179,
	180, 0, 44, 298, 534, 538, 0, 539, 529, 0,
	0, 0, 0, 0, 0, 91, 92, 0, 93, 0,
	42, 0, 0, 0, 0, 0, 0, 94, 95, 181,
	182, 183, 96, 184, 185, 0, 97, 186, 187, 98,
	0, 0, 188, 189, 0, 190, 0, 303, 0, 99,
	100, 101, 0, 102, 0, 103, 0, 304, 104, 105,
	0, 0, 0, 0, 0, 0, 106, 107, 108, 109,
	191, 110, 192, 193, 542, 0, 111, 0, 0, 0,
	112, 113, 0, 0, 0, 0, 194, 114, 195, 531,
	0, 115, 116, 196, 117, 0, 0, 0, 305, 0,
	118, 197, 0, 198, 0, 119, 120, 199, 200, 0,
	0, 0, 306, 121, 201, 202, 203, 0, 204, 0,
	307, 122, 308, 123, 0, 0, 205, 309, 124, 310,
	0, 260, 0, 0, 125, 0, 126, 127, 128, 129,
	261, 311, 130, 131, 132, 0, 133, 0, 206, 134,
	207, 135, 136, 0, 532, 0, 0, 0, 137, 208,
	312, 138, 313, 209, 139, 140, 0, 210, 141, 211,
	0, 142, 143, 144, 212, 145, 146, 0, 147, 148,
	149, 0, 150, 314, 151, 152, 213, 153, 0, 154,
	155, 0, 156, 262, 0, 157, 158, 315, 159, 214,
	160, 0, 161, 162, 164, 215, 163, 216, 0, 0,
	165, 166, 0, 264, 217, 0, 0, 263, 218, 219,
	530, 167, 168, 169, 170, 0, 0, 171, 172, 0,
	0, 173, 174, 175, 220, 221, 0, 176, 0, 0,
	0, 0, 177, 178, 179, 180, 298, 534, 538, 0,
	539, 529, 0, 0, 0, 0, 540, 535, 91, 92,
	0, 93, 0, 0, 0, 0, 0, 0, 0, 0,
	94, 95, 181, 182, 183, 96, 184, 185, 0, 97,
	186, 187, 98, 0, 0, 188, 189, 0, 190, 0,
	303, 0, 99, 100, 101, 0, 102, 0, 103, 0,
	304, 104, 105, 0, 0, 0, 0, 0, 0, 106,
	107, 108, 109, 191, 110, 192, 193, 525, 0, 111,
	0, 0, 0, 112, 113, 0, 0, 0, 0, 194,
	114, 195, 531, 0, 115, 116, 196, 117, 0, 0,
	0, 305, 0, 118, 197, 0, 198, 0, 119, 120,
	199, 200, 0, 0, 0, 306, 121, 201, 202, 203,
	0, 204, 0, 307, 122, 308, 123, 0, 0, 205,
	309, 124, 310, 0, 260, 0, 0, 125, 0, 126,
	127, 128, 129, 261, 311, 130, 131, 132, 0, 133,
	0, 206, 134, 207, 135, 136, 0, 532, 0, 0,
	0, 137, 208, 312, 138, 313, 209, 139, 140, 0,
	210, 141, 211, 0, 142, 143, 144, 212, 145, 146,
	0, 147, 148, 149, 0, 150, 314, 151, 152, 213,
	153, 0, 154, 155, 0, 156, 262, 0, 157, 158,
	315, 159, 214, 160, 0, 161, 162, 164, 215, 163,
	216, 0, 0, 165, 166, 0, 264, 217, 0, 0,
	263, 218, 219, 530, 167, 168, 169, 170, 0, 0,
	171, 172, 0, 0, 173, 174, 175, 220, 221, 0,
	176, 0, 0, 0, 0, 177, 178, 179, 180, 298,
	534, 538, 0, 539, 529, 0, 0, 0, 0, 540,
	535, 91, 92, 0, 93, 0, 0, 0, 0, 0,
	0, 0, 0, 94, 95, 181, 182, 183, 96, 184,
	185, 0, 97, 186, 187, 98, 0, 0, 188, 189,
	0, 190, 0, 303, 0, 99, 100, 101, 0, 102,
	0, 103, 0, 304, 104, 105, 0, 0, 0, 0,
	0, 0, 106, 107, 108, 109, 191, 110, 192, 193,
	0, 0, 111, 0, 0, 0, 112, 113, 0, 0,
	0, 0, 194, 114, 195, 531, 0, 115, 116, 196,
	117, 0, 0, 0, 305, 0, 118, 197, 0, 198,
	0, 119, 120, 199, 200, 0, 0, 0, 306, 121,
	201, 202, 203, 0, 204, 0, 307, 122, 308, 123,
	0, 0, 205, 309, 124, 310, 0, 260, 0, 0,
	125, 0, 126, 127, 128, 129, 261, 311, 130, 131,
	132, 0, 133, 0, 206, 134, 207, 135, 136, 0,
	532, 0, 0, 0, 137, 208, 312, 138, 313, 209,
	139, 140, 0, 210, 141, 211, 0, 142, 143, 144,
	212, 145, 146, 0, 147, 148, 149, 0, 150, 314,
	151, 152, 213, 153, 0, 154, 155, 0, 156, 262,
	0, 157, 158, 315, 159, 214, 160, 0, 161, 162,
	164, 215, 163, 216, 0, 0, 165, 166, 0, 264,
	217, 0, 0, 263, 218, 219, 530, 167, 168, 169,
	170, 0, 0, 171, 172, 0, 0, 173, 174, 175,
	220, 221, 88, 176, 0, 0, 0, 0, 177, 178,
	179, 180, 0, 0, 91, 92, 0, 93, 0, 0,
	0, 0, 540, 535, 0, 0, 94, 95, 181, 182,
	183, 96, 184, 185, 0, 97, 186, 187, 98, 0,
	0, 188, 189, 0, 190, 0, 0, 0, 99, 100,
	101, 0, 102, 0, 103, 0, 0, 104, 105, 0,
	0, 0, 0, 0, 0, 106, 107, 108, 109, 191,
	110, 192, 193, 0, 0, 111, 0, 0, 0, 112,
	113, 0, 0, 0, 0, 194, 114, 195, 0, 0,
	115, 116, 196, 117, 0, 0, 0, 0, 0, 118,
	197, 0, 198, 0, 119, 120, 199, 200, 0, 0,
	0, 0, 121, 201, 202, 203, 0, 204, 0, 0,
	122, 0, 123, 0, 0, 205, 0, 124, 0, 0,
	260, 0, 0, 125, 0, 126, 127, 128, 129, 261,
	0, 130, 131, 132, 0, 133, 0, 206, 134, 207,
	135, 136, 0, 0, 273, 0, 0, 137, 208, 0,
	138, 0, 209, 139, 140, 0, 210, 141, 211, 0,
	142, 143, 144, 212, 145, 146, 0, 147, 148, 149,
	0, 150, 0, 151, 152, 213, 153, 0, 154, 155,
	45, 156, 262, 0, 157, 158, 0, 159, 214, 160,
	0, 161, 162, 164, 215, 163, 216, 0, 47, 165,
	166, 0, 264, 217, 0, 0, 263, 218, 219, 0,
	167, 168, 169, 170, 0, 0, 171, 172, 0, 0,
	173, 174, 175, 302, 221, 0, 176, 0, 0, 0,
	43, 177, 178, 179, 180, 88, 44, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 91, 92, 0,
	93, 0, 0, 0, 865, 0, 0, 0, 0, 94,
	95, 181, 182, 183, 96, 184, 185, 0, 97, 186,
	187, 98, 0, 0, 188, 189, 0, 190, 0, 0,
	0, 99, 100, 101, 0, 102, 0, 103, 0, 0,
	104, 105, 0, 0, 0, 0, 0, 0, 106, 107,
	108, 109, 191, 110, 192, 193, 0, 0, 111, 0,
	0, 0, 112, 113, 0, 0, 0, 0, 194, 114,
	195, 0, 0, 115, 116, 196, 117, 0, 0, 0,
	0, 0, 118, 197, 0, 198, 0, 119, 120, 199,
	200, 0, 0, 0, 0, 121, 201, 202, 203, 0,
	204, 0, 0, 122, 0, 123, 0, 0, 205, 0,
	124, 0, 0, 260, 0, 0, 125, 0, 126, 127,
	128, 129, 261, 0, 130, 131, 132, 0, 133, 0,
	206, 134, 207, 135, 136, 0, 0, 0, 0, 0,
	137, 208, 0, 138, 0, 209, 139, 140, 0, 210,
	141, 211, 0, 142, 143, 144, 212, 145, 146, 0,
	147, 148, 149, 0, 150, 0, 151, 152, 213, 153,
	0, 154, 155, 45, 156, 262, 0, 157, 158, 0,
	159, 214, 160, 0, 161, 162, 164, 215, 163, 216,
	0, 47, 165, 166, 0, 264, 217, 0, 0, 263,
	218, 219, 0, 167, 168, 169, 170, 0, 0, 171,
	172, 0, 0, 173, 174, 175, 302, 221, 0, 176,
	0, 0, 0, 43, 177, 178, 179, 180, 88, 44,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	91, 92, 0, 93, 0, 0, 0, 42, 0, 1099,
	0, 0, 94, 95, 181, 182, 183, 96, 184, 185,
	0, 97, 186, 187, 98, 0, 0, 188, 189, 0,
	190, 0, 0, 0, 99, 100, 101, 0, 102, 0,
	103, 0, 0, 104, 105, 0, 0, 0, 0, 0,
	0, 106, 107, 108, 109, 191, 110, 192, 193, 0,
	0, 111, 0, 0, 0, 112, 113, 0, 0, 0,
	0, 194, 114, 195, 0, 0, 115, 116, 196, 117,
	0, 0, 0, 0, 0, 118, 197, 0, 198, 0,
	119, 120, 199, 200, 0, 0, 0, 0, 121, 201,
	202, 203, 0, 204, 0, 0, 122, 0, 123, 0,
	0, 205, 0, 124, 0, 0, 260, 0, 0, 125,
	0, 126, 127, 128, 129, 261, 0, 130, 131, 132,
	0, 133, 0, 206, 134, 207, 135, 136, 0, 0,
	0, 0, 0, 137, 208, 0, 138, 0, 209, 139,
	140, 0, 210, 141, 211, 0, 142, 143, 144, 212,
	145, 146, 0, 147, 148, 149, 0, 150, 0, 151,
	152, 213, 153, 0, 154, 155, 0, 156, 262, 0,
	157, 158, 0, 159, 214, 160, 0, 161, 162, 164,
	215, 163, 216, 0, 0, 165, 166, 0, 264, 217,
	0, 0, 263, 218, 219, 0, 167, 168, 169, 170,
	0, 0, 171, 172, 0, 0, 173, 174, 175, 220,
	221, 0, 176, 0, 0, 0, 0, 177, 178, 179,
	180, 88, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 91, 92, 0, 93, 0, 0, 0,
	0, 369, 0, 0, 0, 94, 95, 181, 182, 183,
	96, 184, 185, 0, 97, 186, 187, 98, 0, 0,
	188, 189, 0, 190, 0, 0, 0, 99, 100, 101,
	0, 102, 0, 103, 0, 0, 104, 105, 0, 0,
	0, 0, 0, 0, 106, 107, 108, 109, 191, 110,
	192, 193, 0, 0, 111, 0, 0, 0, 112, 113,
	0, 0, 0, 0, 194, 114, 195, 0, 0, 115,
	116, 196, 117, 0, 0, 0, 0, 0, 118, 197,
	0, 198, 0, 119, 120, 199, 200, 0, 0, 0,
	0, 121, 201, 202, 203, 0, 204, 0, 0, 122,
	0, 123, 0, 0, 205, 0, 124, 0, 0, 260,
	0, 0, 125, 0, 126, 127, 128, 129, 261, 0,
	130, 131, 132, 0, 133, 0, 206, 134, 207, 135,
	136, 0, 0, 273, 0, 0, 137, 208, 0, 138,
	0, 209, 139, 140, 0, 210, 141, 211, 0, 142,
	143, 144, 212, 145, 146, 0, 147, 148, 149, 0,
	150, 0, 151, 152, 213, 153, 0, 154, 155, 0,
	156, 262, 0, 157, 158, 0, 159, 214, 160, 0,
	161, 162, 164, 215, 163, 216, 0, 0, 165, 166,
	0, 264, 217, 0, 0, 263, 218, 219, 0, 167,
	168, 169, 170, 0, 0, 171, 172, 0, 0, 173,
	174, 175, 220, 221, 0, 176, 0, 0, 0, 0,
	177, 178, 179, 180, 88, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 91, 92, 0, 93,
	0, 0, 0, 865, 0, 0, 0, 0, 94, 95,
	181, 182, 183, 96, 184, 185, 0, 97, 186, 187,
	98, 0, 0, 188, 189, 0, 190, 0, 0, 0,
	99, 100, 101, 0, 102, 0, 103, 0, 0, 104,
	105, 0, 0, 0, 0, 0, 0, 106, 107, 108,
	109, 191, 110, 192, 193, 0, 0, 111, 0, 0,
	0, 112, 113, 0, 0, 0, 0, 194, 114, 195,
	0, 0, 115, 116, 196, 117, 0, 0, 0, 0,
	0, 118, 197, 0, 198, 0, 119, 120, 199, 200,
	0, 0, 0, 0, 121, 201, 202, 203, 0, 204,
	0, 0, 122, 0, 123, 0, 0, 205, 0, 124,
	0, 0, 260, 0, 0, 125, 0, 126, 127, 128,
	129, 261, 0, 130, 131, 132, 0, 133, 0, 206,
	134, 207, 135, 136, 0, 0, 0, 0, 0, 137,
	208, 0, 138, 0, 209, 139, 140, 0, 210, 141,
	211, 0, 142, 143, 144, 212, 145, 146, 0, 147,
	148, 149, 0, 150, 0, 151, 152, 213, 153, 0,
	154, 155, 0, 156, 262, 0, 157, 158, 0, 159,
	214, 160, 0, 161, 162, 164, 215, 163, 216, 0,
	0, 165, 166, 0, 264, 217, 0, 0, 263, 218,
	219, 0, 167, 168, 169, 170, 0, 0, 171, 172,
	0, 0, 173, 174, 175, 220, 221, 0, 176, 0,
	0, 0, 0, 177, 178, 179, 180, 88, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 91,
	92, 0, 93, 0, 0, 0, 803, 0, 0, 0,
	0, 94, 95, 181, 182, 183, 96, 184, 185, 0,
	97, 186, 187, 98, 0, 0, 188, 189, 0, 190,
	0, 0, 0, 99, 100, 101, 0, 102, 0, 103,
	0, 0, 104, 105, 0, 0, 0, 0, 0, 0,
	106, 107, 108, 109, 191, 110, 192, 193, 0, 0,
	111, 0, 0, 0, 112, 113, 0, 0, 0, 0,
	194, 114, 195, 0, 0, 115, 116, 196, 117, 0,
	0, 0, 0, 0, 118, 197, 0, 198, 0, 119,
	120, 199, 200, 0, 0, 0, 0, 121, 201, 202,
	203, 0, 204, 0, 0, 122, 0, 123, 0, 0,
	205, 0, 124, 0, 0, 260, 0, 0, 125, 0,
	126, 127, 128, 129, 261, 0, 130, 131, 132, 0,
	133, 0, 206, 134, 207, 135, 136, 0, 0, 0,
	0, 0, 137, 208, 0, 138, 0, 209, 139, 140,
	0, 210, 141, 211, 0, 142, 143, 144, 212, 145,
	146, 0, 147, 148, 149, 0, 150, 0, 151, 152,
	213, 153, 0, 154, 155, 0, 156, 262, 0, 157,
	158, 0, 159, 214, 160, 0, 161, 162, 164, 215,
	163, 216, 0, 0, 165, 166, 0, 264, 217, 0,
	0, 263, 218, 219, 0, 167, 168, 169, 170, 0,
	0, 171, 172, 0, 0, 173, 174, 175, 220, 221,
	0, 176, 0, 0, 0, 0, 177, 178, 179, 180,
	88, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 91, 92, 0, 93, 0, 0, 0, 1309,
	0, 0, 0, 0, 94, 95, 181, 182, 183, 96,
	184, 185, 0, 97, 186, 187, 98, 0, 0, 188,
	189, 0, 190, 0, 0, 0, 99, 100, 101, 0,
	102, 0, 103, 0, 0, 104, 105, 0, 0, 0,
	0, 0, 0, 106, 107, 108, 109, 191, 110, 192,
	193, 0, 0, 111, 0, 0, 0, 112, 113, 0,
	0, 0, 0, 194, 114, 195, 0, 0, 115, 116,
	196, 117, 0, 0, 0, 0, 0, 118, 197, 0,
	198, 0, 119, 120, 199, 200, 0, 0, 0, 0,
	121, 201, 202, 203, 0, 204, 0, 0, 122, 0,
	123, 0, 0, 205, 0, 124, 0, 0, 260, 0,
	0, 125, 0, 126, 127, 128, 129, 261, 0, 130,
	131, 132, 0, 133, 0, 206, 134, 207, 135, 136,
	0, 0, 0, 0, 0, 137, 208, 0, 138, 0,
	209, 139, 140, 0, 210, 141, 211, 0, 142, 143,
	144, 212, 145, 146, 0, 147, 148, 149, 0, 150,
	0, 151, 152, 213, 153, 0, 154, 155, 0, 156,
	262, 0, 157, 158, 0, 159, 214, 160, 0, 161,
	162, 164, 215, 163, 216, 0, 0, 165, 166, 0,
	264, 217, 0, 0, 263, 218, 219, 0, 167, 168,
	169, 170, 0, 0, 171, 172, 0, 0, 173, 174,
	175, 220, 221, 0, 176, 0, 0, 0, 0, 177,
	178, 179, 180, 88, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 91, 92, 0, 93, 0,
	0, 0, 469, 0, 0, 0, 0, 94, 95, 181,
	182, 183, 96, 184, 185, 0, 97, 186, 187, 98,
	0, 0, 188, 189, 0, 190, 0, 0, 0, 99,
	100, 101, 0, 102, 0, 103, 0, 0, 104, 105,
	0, 0, 0, 0, 0, 0, 106, 107, 511, 109,
	191, 110, 192, 193, 0, 0, 111, 0, 0, 0,
	112, 113, 0, 0, 0, 0, 194, 114, 195, 0,
	0, 115, 116, 196, 117, 0, 0, 0, 0, 0,
	118, 197, 0, 198, 0, 119, 120, 199, 200, 0,
	0, 0, 0, 121, 201, 202, 203, 0, 204, 0,
	0, 122, 0, 123, 0, 0, 205, 0, 124, 0,
	0, 260, 0, 0, 125, 0, 126, 127, 128, 129,
	261, 0, 130, 131, 132, 0, 133, 0, 206, 134,
	207, 135, 136, 0, 0, 0, 0, 0, 137, 208,
	0, 138, 0, 209, 139, 140, 0, 210, 141, 211,
	0, 142, 143, 144, 212, 145, 146, 0, 147, 148,
	149, 0, 150, 0, 151, 152, 213, 153, 0, 154,
	155, 0, 156, 262, 0, 157, 158, 0, 159, 214,
	160, 0, 161, 162, 164, 215, 163, 216, 0, 510,
	165, 166, 0, 264, 217, 0, 0, 263, 218, 219,
	0, 167, 168, 169, 170, 0, 88, 171, 172, 0,
	0, 173, 174, 175, 220, 221, 0, 176, 91, 92,
	0, 93, 177, 178, 179, 180, 0, 0, 0, 0,
	94, 95, 181, 182, 183, 96, 184, 185, 514, 97,
	186, 187, 98, 0, 0, 188, 189, 0, 190, 0,
	0, 0, 99, 100, 101, 0, 102, 0, 103, 0,
	0, 104, 105, 0, 0, 0, 0, 0, 0, 106,
	107, 108, 109, 191, 110, 192, 193, 0, 0, 111,
	0, 0, 0, 112, 113, 0, 0, 0, 0, 194,
	114, 195, 0, 0, 115, 116, 196, 117, 0, 0,
	0, 0, 0, 118, 197, 0, 198, 0, 119, 120,
	199, 200, 0, 0, 0, 0, 121, 201, 202, 203,
	0, 204, 0, 0, 122, 0, 123, 0, 0, 205,
	0, 124, 0, 0, 260, 0, 0, 125, 0, 126,
	127, 128, 129, 261, 0, 130, 131, 132, 0, 133,
	0, 206, 134, 207, 135, 136, 0, 0, 0, 0,
	0, 137, 208, 0, 138, 0, 209, 139, 140, 0,
	210, 141, 211, 0, 142, 143, 144, 212, 145, 146,
	0, 147, 148, 149, 0, 150, 0, 151, 152, 213,
	153, 0, 154, 155, 0, 156, 262, 0, 157, 158,
	0, 159, 214, 160, 0, 161, 162, 164, 215, 163,
	216, 0, 0, 165, 166, 0, 264, 217, 0, 0,
	263, 218, 219, 0, 167, 168, 169, 170, 0, 298,
	171, 172, 0, 0, 173, 174, 175, 220, 221, 0,
	176, 91, 92, 0, 93, 177, 178, 179, 180, 0,
	0, 0, 0, 94, 95, 181, 182, 183, 96, 184,
	185, 514, 97, 186, 187, 98, 0, 0, 188, 189,
	0, 190, 0, 303, 0, 99, 100, 101, 0, 102,
	0, 103, 0, 304, 104, 105, 0, 0, 0, 0,
	0, 0, 106, 107, 108, 109, 191, 110, 192, 193,
	0, 0, 111, 0, 0, 0, 112, 113, 0, 0,
	0, 0, 194, 114, 195, 0, 0, 115, 116, 196,
	117, 0, 0, 0, 305, 0, 118, 197, 0, 198,
	0, 119, 120, 199, 200, 0, 0, 0, 306, 121,
	201, 202, 203, 0, 204, 0, 307, 122, 308, 123,
	0, 0, 205, 309, 124, 310, 0, 260, 0, 0,
	125, 0, 126, 127, 128, 129, 261, 311, 130, 131,
	132, 0, 133, 0, 206, 134, 207, 135, 136, 0,
	0, 0, 0, 0, 137, 208, 312, 138, 313, 209,
	139, 140, 0, 210, 141, 211, 0, 142, 143, 144,
	212, 145, 146, 0, 147, 148, 149, 0, 150, 314,
	151, 152, 213, 153, 0, 154, 155, 0, 156, 262,
	0, 157, 158, 315, 159, 214, 160, 0, 161, 162,
	164, 215, 163, 216, 0, 0, 165, 166, 0, 264,
	217, 0, 0, 263, 218, 219, 0, 167, 168, 169,
	170, 0, 88, 171, 172, 0, 0, 173, 174, 175,
	220, 221, 0, 176, 91, 92, 0, 93, 177, 178,
	179, 180, 0, 0, 0, 0, 94, 95, 181, 182,
	183, 96, 184, 185, 0, 97, 186, 187, 98, 0,
	0, 188, 189, 778, 190, 0, 0, 0, 99, 100,
	101, 0, 102, 776, 103, 0, 0, 104, 105, 0,
	0, 0, 0, 0, 0, 106, 107, 108, 109, 191,
	110, 192, 193, 0, 0, 111, 0, 0, 0, 112,
	113, 0, 0, 0, 0, 194, 114, 195, 0, 0,
	115, 116, 196, 117, 0, 781, 0, 0, 0, 118,
	197, 0, 198, 0, 119, 120, 199, 200, 0, 843,
	0, 0, 121, 201, 202, 203, 0, 204, 0, 0,
	122, 0, 123, 0, 0, 205, 0, 124, 0, 0,
	260, 0, 0, 125, 0, 126, 127, 128, 129, 261,
	0, 130, 131, 132, 0, 133, 0, 206, 134, 207,
	135, 136, 0, 0, 0, 0, 0, 137, 208, 0,
	138, 0, 209, 139, 140, 0, 210, 141, 211, 780,
	142, 143, 144, 212, 145, 146, 0, 147, 148, 149,
	0, 150, 0, 151, 152, 213, 153, 0, 154, 155,
	0, 156, 262, 0, 157, 158, 0, 159, 214, 160,
	0, 161, 162, 164, 215, 163, 216, 0, 0, 165,
	166, 0, 264, 217, 0, 0, 263, 218, 219, 0,
	167, 168, 169, 170, 0, 844, 171, 172, 0, 0,
	173, 174, 175, 220, 221, 88, 176, 0, 0, 0,
	0, 177, 178, 179, 180, 0, 0, 91, 92, 0,
	93, 0, 0, 0, 0, 0, 0, 0, 0, 94,
	95, 181, 182, 183, 96, 184, 185, 0, 97, 186,
	187, 98, 0, 0, 188, 189, 778, 190, 0, 0,
	773, 99, 100, 101, 0, 102, 776, 103, 0, 0,
	104, 105, 0, 0, 0, 0, 0, 0, 106, 107,
	108, 109, 191, 110, 192, 193, 0, 0, 111, 0,
	0, 0, 112, 113, 0, 0, 0, 0, 194, 114,
	195, 0, 0, 115, 116, 196, 117, 0, 781, 0,
	0, 0, 118, 197, 0, 198, 0, 119, 120, 772,
	200, 0, 0, 0, 0, 121, 201, 202, 203, 0,
	204, 0, 0, 122, 0, 123, 0, 0, 205, 0,
	124, 0, 0, 260, 0, 0, 125, 0, 126, 127,
	128, 129, 261, 0, 130, 131, 132, 0, 133, 0,
	206, 134, 207, 135, 136, 0, 0, 0, 0, 0,
	137, 208, 0, 138, 0, 209, 139, 140, 0, 210,
	141, 211, 780, 142, 143, 144, 212, 145, 146, 0,
	147, 148, 149, 0, 150, 0, 151, 152, 213, 153,
	0, 154, 155, 0, 156, 262, 0, 157, 158, 0,
	159, 214, 160, 0, 161, 162, 164, 215, 163, 216,
	0, 0, 165, 166, 0, 264, 217, 0, 0, 263,
	218, 219, 0, 167, 168, 169, 170, 0, 779, 171,
	172, 0, 0, 173, 174, 175, 220, 221, 88, 176,
	0, 0, 0, 0, 177, 178, 179, 180, 0, 0,
	91, 92, 0, 93, 0, 0, 0, 0, 0, 1099,
	0, 0, 94, 95, 181, 182, 183, 96, 184, 185,
	0, 97, 186, 187, 98, 0, 0, 188, 189, 0,
	190, 0, 0, 0, 99, 100, 101, 0, 102, 0,
	103, 0, 0, 104, 105, 0, 0, 0, 0, 0,
	0, 106, 107, 108, 109, 191, 110, 192, 193, 0,
	0, 111, 0, 0, 0, 112, 113, 0, 0, 0,
	0, 194, 114, 195, 0, 0, 115, 116, 196, 117,
	0, 0, 0, 0, 0, 118, 197, 0, 198, 0,
	119, 120, 199, 200, 0, 0, 0, 0, 121, 201,
	202, 203, 0, 204, 0, 0, 122, 0, 123, 0,
	0, 205, 0, 124, 0, 0, 260, 0, 0, 125,
	0, 126, 127, 128, 129, 261, 0, 130, 131, 132,
	0, 133, 0, 206, 134, 207, 135, 136, 0, 0,
	0, 0, 0, 137, 208, 0, 138, 0, 209, 139,
	140, 0, 210, 141, 211, 0, 142, 143, 144, 212,
	145, 146, 0, 147, 148, 149, 0, 150, 0, 151,
	152, 213, 153, 0, 154, 155, 0, 156, 262, 0,
	157, 158, 0, 159, 214, 160, 0, 161, 162, 164,
	215, 163, 216, 0, 0, 165, 166, 0, 264, 217,
	0, 0, 263, 218, 219, 0, 167, 168, 169, 170,
	0, 88, 171, 172, 0, 0, 173, 174, 175, 220,
	221, 0, 176, 91, 92, 0, 93, 177, 178, 179,
	180, 0, 0, 0, 0, 94, 95, 181, 182, 183,
	96, 184, 185, 0, 97, 186, 187, 98, 0, 0,
	188, 189, 0, 190, 0, 0, 0, 99, 100, 101,
	0, 102, 0, 103, 0, 0, 104, 105, 0, 0,
	0, 0, 0, 0, 106, 107, 108, 109, 191, 110,
	192, 193, 0, 0, 111, 0, 0, 0, 112, 113,
	0, 0, 0, 0, 194, 114, 195, 0, 0, 115,
	116, 196, 117, 0, 0, 0, 0, 0, 118, 197,
	0, 198, 0, 119, 120, 199, 200, 0, 0, 0,
	0, 121, 201, 202, 203, 0, 204, 0, 0, 122,
	0, 123, 0, 0, 205, 0, 124, 0, 0, 260,
	0, 0, 125, 0, 126, 127, 128, 129, 261, 0,
	130, 131, 132, 0, 133, 0, 206, 134, 207, 135,
	136, 0, 0, 273, 0, 0, 137, 208, 0, 138,
	0, 209, 139, 140, 0, 210, 141, 211, 0, 142,
	143, 144, 212, 145, 146, 0, 147, 148, 149, 0,
	150, 0, 151, 152, 213, 153, 0, 154, 155, 0,
	156, 262, 0, 157, 158, 0, 159, 214, 160, 0,
	161, 162, 164, 215, 163, 216, 0, 0, 165, 166,
	0, 264, 217, 0, 0, 263, 218, 219, 0, 167,
	168, 169, 170, 0, 88, 171, 172, 0, 0, 173,
	174, 175, 220, 221, 0, 176, 91, 92, 0, 93,
	177, 178, 179, 180, 0, 0, 0, 0, 94, 95,
	181, 182, 183, 96, 184, 185, 0, 97, 186, 187,
	98, 0, 0, 188, 189, 0, 190, 0, 0, 0,
	99, 100, 101, 0, 102, 0, 103, 0, 0, 104,
	105, 0, 0, 0, 0, 0, 0, 106, 107, 108,
	109, 191, 110, 192, 193, 0, 0, 111, 0, 0,
	0, 112, 113, 0, 0, 0, 0, 194, 114, 195,
	0, 0, 115, 116, 196, 117, 0, 0, 0, 0,
	0, 118, 197, 0, 198, 0, 119, 120, 279, 200,
	0, 0, 0, 0, 121, 201, 202, 203, 0, 204,
	0, 0, 122, 0, 123, 0, 0, 205, 0, 124,
	0, 0, 260, 0, 0, 125, 0, 126, 127, 128,
	129, 261, 0, 130, 131, 132, 0, 133, 0, 206,
	134, 207, 135, 136, 0, 0, 273, 0, 0, 137,
	208, 0, 138, 0, 209, 139, 140, 0, 210, 141,
	211, 0, 142, 143, 144, 212, 145, 146, 0, 147,
	148, 149, 0, 150, 0, 151, 152, 213, 153, 0,
	154, 155, 0, 156, 262, 0, 157, 158, 0, 159,
	214, 160, 0, 161, 162, 164, 215, 163, 216, 0,
	0, 165, 166, 0, 264, 217, 0, 0, 263, 218,
	219, 0, 167, 168, 169, 170, 0, 88, 171, 172,
	0, 0, 173, 174, 175, 220, 221, 0, 176, 91,
	92, 0, 93, 177, 178, 179, 180, 0, 0, 0,
	0, 94, 95, 181, 182, 183, 96, 184, 185, 0,
	97, 186, 187, 98, 0, 0, 188, 189, 0, 190,
	0, 0, 0, 99, 100, 101, 0, 102, 0, 103,
	0, 0, 104, 105, 0, 0, 0, 0, 0, 0,
	106, 107, 108, 109, 191, 110, 192, 193, 0, 0,
	111, 0, 0, 0, 112, 113, 0, 0, 0, 0,
	194, 114, 195, 0, 0, 115, 116, 196, 117, 0,
	0, 0, 0, 0, 118, 197, 0, 198, 0, 119,
	120, 199, 200, 0, 0, 0, 0, 121, 201, 202,
	203, 0, 204, 0, 0, 122, 0, 123, 0, 0,
	205, 0, 124, 0, 0, 260, 0, 0, 125, 0,
	126, 127, 128, 129, 261, 0, 130, 131, 132, 0,
	133, 0, 206, 134, 207, 135, 136, 0, 0, 0,
	0, 0, 137, 208, 0, 138, 0, 209, 139, 140,
	0, 210, 141, 211, 0, 142, 143, 144, 212, 145,
	146, 0, 147, 148, 149, 0, 150, 0, 151, 152,
	213, 153, 0, 154, 155, 0, 156, 262, 0, 157,
	158, 0, 159, 214, 160, 0, 161, 162, 164, 215,
	163, 216, 0, 0, 165, 166, 0, 264, 217, 0,
	0, 263, 218, 219, 0, 167, 168, 169, 170, 0,
	88, 171, 172, 0, 0, 173, 174, 175, 220, 221,
	0, 176, 91, 92, 0, 93, 177, 178, 179, 180,
	0, 0, 0, 0, 94, 95, 181, 182, 183, 96,
	184, 185, 0, 97, 186, 187, 98, 0, 0, 188,
	189, 0, 190, 0, 0, 0, 99, 100, 101, 0,
	102, 0, 103, 0, 0, 104, 105, 0, 0, 0,
	0, 0, 0, 106, 107, 108, 109, 191, 110, 192,
	193, 0, 0, 111, 0, 0, 0, 112, 113, 0,
	0, 0, 0, 194, 114, 195, 0, 0, 115, 116,
	196, 117, 0, 0, 0, 0, 0, 118, 197, 0,
	198, 0, 119, 120, 1043, 200, 0, 0, 0, 0,
	121, 201, 202, 203, 0, 204, 0, 0, 122, 0,
	123, 0, 0, 205, 0, 124, 0, 0, 260, 0,
	0, 125, 0, 126, 127, 128, 129, 261, 0, 130,
	131, 132, 0, 133, 0, 206, 134, 207, 135, 136,
	0, 0, 0, 0, 0, 137, 208, 0, 138, 0,
	209, 139, 140, 0, 210, 141, 211, 0, 142, 143,
	144, 212, 145, 146, 0, 147, 148, 149, 0, 150,
	0, 151, 152, 213, 153, 0, 154, 155, 0, 156,
	262, 0, 157, 158, 0, 159, 214, 160, 0, 161,
	162, 164, 215, 163, 216, 0, 0, 165, 166, 0,
	264, 217, 0, 0, 263, 218, 219, 0, 167, 168,
	169, 170, 0, 88, 171, 172, 0, 0, 173, 174,
	175, 220, 221, 0, 176, 91, 92, 0, 93, 177,
	178, 179, 180, 0, 0, 0, 0, 94, 95, 181,
	182, 183, 96, 184, 185, 0, 97, 186, 187, 98,
	0, 0, 188, 189, 0, 190, 0, 0, 0, 99,
	100, 101, 0, 102, 0, 103, 0, 0, 104, 105,
	0, 0, 0, 0, 0, 0, 106, 107, 108, 109,
	191, 110, 192, 193, 0, 0, 111, 0, 0, 0,
	112, 113, 0, 0, 0, 0, 194, 114, 195, 0,
	0, 115, 116, 196, 117, 0, 0, 0, 0, 0,
	118, 197, 0, 198, 0, 119, 120, 1041, 200, 0,
	0, 0, 0, 121, 201, 202, 203, 0, 204, 0,
	0, 122, 0, 123, 0, 0, 205, 0, 124, 0,
	0, 260, 0, 0, 125, 0, 126, 127, 128, 129,
	261, 0, 130, 131, 132, 0, 133, 0, 206, 134,
	207, 135, 136, 0, 0, 0, 0, 0, 137, 208,
	0, 138, 0, 209, 139, 140, 0, 210, 141, 211,
	0, 142, 143, 144, 212, 145, 146, 0, 147, 148,
	149, 0, 150, 0, 151, 152, 213, 153, 0, 154,
	155, 0, 156, 262, 0, 157, 158, 0, 159, 214,
	160, 0, 161, 162, 164, 215, 163, 216, 0, 0,
	165, 166, 0, 264, 217, 0, 0, 263, 218, 219,
	0, 167, 168, 169, 170, 0, 88, 171, 172, 0,
	0, 173, 174, 175, 220, 221, 0, 176, 91, 92,
	0, 93, 177, 178, 179, 180, 0, 0, 0, 0,
	94, 95, 181, 182, 183, 96, 184, 185, 0, 97,
	186, 187, 98, 0, 0, 188, 189, 0, 190, 0,
	0, 0, 99, 100, 101, 0, 102, 0, 103, 0,
	0, 104, 105, 0, 0, 0, 0, 0, 0, 106,
	107, 108, 109, 191, 110, 192, 193, 0, 0, 111,
	0, 0, 0, 112, 113, 0, 0, 0, 0, 194,
	114, 195, 0, 0, 115, 116, 196, 117, 0, 0,
	0, 0, 0, 118, 197, 0, 198, 0, 119, 120,
	1032, 200, 0, 0, 0, 0, 121, 201, 202, 203,
	0, 204, 0, 0, 122, 0, 123, 0, 0, 205,
	0, 124, 0, 0, 260, 0, 0, 125, 0, 126,
	127, 128, 129, 261, 0, 130, 131, 132, 0, 133,
	0, 206, 134, 207, 135, 136, 0, 0, 0, 0,
	0, 137, 208, 0, 138, 0, 209, 139, 140, 0,
	210, 141, 211, 0, 142, 143, 144, 212, 145, 146,
	0, 147, 148, 149, 0, 150, 0, 151, 152, 213,
	153, 0, 154, 155, 0, 156, 262, 0, 157, 158,
	0, 159, 214, 160, 0, 161, 162, 164, 215, 163,
	216, 0, 0, 165, 166, 0, 264, 217, 0, 0,
	263, 218, 219, 0, 167, 168, 169, 170, 0, 88,
	171, 172, 0, 0, 173, 174, 175, 220, 221, 0,
	176, 91, 92, 0, 93, 177, 178, 179, 180, 0,
	0, 0, 0, 94, 95, 181, 182, 183, 96, 184,
	185, 0, 97, 186, 187, 98, 0, 0, 188, 189,
	0, 190, 0, 0, 0, 99, 100, 101, 0, 102,
	0, 103, 0, 0, 104, 105, 0, 0, 0, 0,
	0, 0, 106, 107, 108, 109, 191, 110, 192, 193,
	0, 0, 111, 0, 0, 0, 112, 113, 0, 0,
	0, 0, 194, 114, 195, 0, 0, 115, 116, 196,
	117, 0, 0, 0, 0, 0, 118, 197, 0, 198,
	0, 119, 120, 651, 200, 0, 0, 0, 0, 121,
	201, 202, 203, 0, 204, 0, 0, 122, 0, 123,
	0, 0, 205, 0, 124, 0, 0, 260, 0, 0,
	125, 0, 126, 127, 128, 129, 261, 0, 130, 131,
	132, 0, 133, 0, 206, 134, 207, 135, 136, 0,
	0, 0, 0, 0, 137, 208, 0, 138, 0, 209,
	139, 140, 0, 210, 141, 211, 0, 142, 143, 144,
	212, 145, 146, 0, 147, 148, 149, 0, 150, 0,
	151, 152, 213, 153, 0, 154, 155, 0, 156, 262,
	0, 157, 158, 0, 159, 214, 160, 0, 161, 162,
	164, 215, 163, 216, 0, 0, 165, 166, 0, 264,
	217, 0, 0, 263, 218, 219, 0, 167, 168, 169,
	170, 0, 88, 171, 172, 0, 0, 173, 174, 175,
	220, 221, 0, 176, 91, 92, 0, 93, 177, 178,
	179, 180, 0, 497, 0, 0, 94, 95, 181, 182,
	183, 96, 184, 185, 0, 97, 186, 187, 98, 0,
	0, 188, 189, 0, 190, 0, 0, 0, 99, 100,
	101, 0, 102, 0, 103, 0, 0, 104, 105, 0,
	0, 0, 0, 0, 0, 106, 107, 108, 109, 191,
	110, 192, 193, 0, 0, 111, 0, 0, 0, 112,
	113, 0, 0, 0, 0, 194, 114, 195, 0, 0,
	115, 116, 196, 117, 0, 0, 0, 0, 0, 118,
	197, 0, 198, 0, 119, 120, 199, 200, 0, 0,
	0, 0, 121, 201, 202, 203, 0, 204, 0, 0,
	122, 0, 123, 0, 0, 205, 0, 124, 0, 0,
	260, 0, 0, 125, 0, 126, 127, 128, 129, 261,
	0, 130, 131, 132, 0, 133, 0, 206, 134, 207,
	135, 136, 0, 0, 0, 0, 0, 137, 208, 0,
	138, 0, 209, 139, 140, 0, 210, 141, 211, 0,
	142, 143, 144, 212, 145, 146, 0, 147, 148, 149,
	0, 150, 0, 151, 152, 213, 153, 0, 154, 155,
	0, 156, 262, 0, 0, 158, 0, 159, 214, 160,
	0, 161, 162, 164, 215, 163, 216, 0, 0, 165,
	166, 0, 264, 217, 0, 0, 263, 218, 219, 0,
	167, 168, 169, 170, 0, 88, 171, 172, 0, 0,
	173, 174, 175, 220, 221, 0, 176, 91, 92, 0,
	93, 177, 178, 179, 180, 0, 0, 0, 0, 94,
	95, 181, 182, 183, 96, 184, 185, 0, 97, 186,
	187, 98, 0, 0, 188, 189, 0, 190, 0, 0,
	0, 99, 100, 101, 0, 102, 0, 103, 0, 0,
	104, 105, 0, 0, 0, 0, 0, 0, 106, 107,
	108, 109, 191, 110, 192, 193, 0, 0, 111, 0,
	0, 0, 112, 113, 0, 0, 0, 0, 194, 114,
	195, 0, 0, 115, 116, 196, 117, 0, 0, 0,
	0, 0, 118, 197, 0, 198, 0, 119, 120, 354,
	200, 0, 0, 0, 0, 121, 201, 202, 203, 0,
	204, 0, 0, 122, 0, 123, 0, 0, 205, 0,
	124, 0, 0, 260, 0, 0, 125, 0, 126, 127,
	128, 129, 261, 0, 130, 131, 132, 0, 133, 0,
	206, 134, 207, 135, 136, 0, 0, 0, 0, 0,
	137, 208, 0, 138, 0, 209, 139, 140, 0, 210,
	141, 211, 0, 142, 143, 144, 212, 145, 146, 0,
	147, 148, 149, 0, 150, 0, 151, 152, 213, 153,
	0, 154, 155, 0, 156, 262, 0, 157, 158, 0,
	159, 214, 160, 0, 161, 162, 164, 215, 163, 216,
	0, 0, 165, 166, 0, 264, 217, 0, 0, 263,
	218, 219, 0, 167, 168, 169, 170, 0, 88, 171,
	172, 0, 0, 173, 174, 175, 220, 221, 0, 176,
	91, 92, 0, 93, 177, 178, 179, 180, 0, 0,
	0, 0, 94, 95, 181, 182, 183, 96, 184, 185,
	0, 97, 186, 187, 98, 0, 0, 188, 189, 0,
	190, 0, 0, 0, 99, 100, 101, 0, 102, 0,
	103, 0, 0, 104, 105, 0, 0, 0, 0, 0,
	0, 106, 107, 108, 109, 191, 110, 192, 193, 0,
	0, 111, 0, 0, 0, 112, 113, 0, 0, 0,
	0, 194, 114, 195, 0, 0, 115, 116, 196, 117,
	0, 0, 0, 0, 0, 118, 197, 0, 198, 0,
	119, 120, 351, 200, 0, 0, 0, 0, 121, 201,
	202, 203, 0, 204, 0, 0, 122, 0, 123, 0,
	0, 205, 0, 124, 0, 0, 260, 0, 0, 125,
	0, 126, 127, 128, 129, 261, 0, 130, 131, 132,
	0, 133, 0, 206, 134, 207, 135, 136, 0, 0,
	0, 0, 0, 137, 208, 0, 138, 0, 209, 139,
	140, 0, 210, 141, 211, 0, 142, 143, 144, 212,
	145, 146, 0, 147, 148, 149, 0, 150, 0, 151,
	152, 213, 153, 0, 154, 155, 0, 156, 262, 0,
	157, 158, 0, 159, 214, 160, 0, 161, 162, 164,
	215, 163, 216, 0, 0, 165, 166, 0, 264, 217,
	0, 0, 263, 218, 219, 0, 167, 168, 169, 170,
	0, 88, 171, 172, 0, 0, 173, 174, 175, 220,
	221, 0, 176, 91, 92, 0, 93, 177, 178, 179,
	180, 0, 0, 0, 0, 94, 95, 181, 182, 183,
	96, 184, 185, 0, 97, 186, 187, 98, 0, 0,
	188, 189, 0, 190, 0, 0, 0, 99, 100, 101,
	0, 102, 0, 103, 0, 0, 104, 105, 0, 0,
	0, 0, 0, 0, 106, 107, 108, 109, 191, 110,
	192, 193, 0, 0, 111, 0, 0, 0, 112, 113,
	0, 0, 0, 0, 194, 114, 195, 0, 0, 115,
	116, 196, 117, 0, 0, 0, 0, 0, 118, 197,
	0, 198, 0, 119, 120, 199, 200, 0, 0, 0,
	0, 121, 201, 202, 203, 0, 204, 0, 0, 122,
	0, 123, 0, 0, 205, 0, 124, 0, 0, 260,
	0, 0, 125, 0, 126, 127, 128, 129, 85, 0,
	130, 131, 132, 0, 133, 0, 206, 134, 207, 135,
	136, 0, 0, 0, 0, 0, 137, 208, 0, 138,
	0, 209, 139, 140, 0, 210, 141, 211, 0, 142,
	143, 144, 212, 145, 146, 0, 147, 148, 149, 0,
	150, 0, 151, 152, 213, 153, 0, 154, 155, 0,
	156, 262, 0, 157, 158, 0, 159, 214, 160, 0,
	161, 162, 164, 215, 163, 216, 0, 0, 165, 166,
	0, 84, 217, 0, 0, 80, 218, 219, 0, 167,
	168, 169, 170, 0, 88, 171, 172, 0, 0, 173,
	174, 175, 220, 221, 0, 176, 91, 92, 0, 93,
	177, 178, 179, 180, 0, 0, 0, 0, 94, 95,
	181, 182, 183, 96, 184, 185, 0, 97, 186, 187,
	98, 0, 0, 188, 189, 0, 190, 0, 0, 0,
	99, 100, 101, 0, 102, 0, 103, 0, 0, 104,
	105, 0, 0, 0, 0, 0, 0, 106, 107, 108,
	109, 191, 110, 192, 193, 0, 0, 111, 0, 0,
	0, 112, 113, 0, 0, 0, 0, 194, 114, 195,
	0, 0, 115, 116, 196, 117, 0, 0, 0, 0,
	0, 118, 197, 0, 198, 0, 119, 120, 293, 200,
	0, 0, 0, 0, 121, 201, 202, 203, 0, 204,
	0, 0, 122, 0, 123, 0, 0, 205, 0, 124,
	0, 0, 260, 0, 0, 125, 0, 126, 127, 128,
	129, 261, 0, 130, 131, 132, 0, 133, 0, 206,
	134, 207, 135, 136, 0, 0, 0, 0, 0, 137,
	208, 0, 138, 0, 209, 139, 140, 0, 210, 141,
	211, 0, 142, 143, 144, 212, 145, 146, 0, 147,
	148, 149, 0, 150, 0, 151, 152, 213, 153, 0,
	154, 155, 0, 156, 262, 0, 157, 158, 0, 159,
	214, 160, 0, 161, 162, 164, 215, 163, 216, 0,
	0, 165, 166, 0, 264, 217, 0, 0, 263, 218,
	219, 0, 167, 168, 169, 170, 0, 88, 171, 172,
	0, 0, 173, 174, 175, 220, 221, 0, 176, 91,
	92, 0, 93, 177, 178, 179, 180, 0, 0, 0,
	0, 94, 95, 181, 182, 183, 96, 184, 185, 0,
	97, 186, 187, 98, 0, 0, 188, 189, 0, 190,
	0, 0, 0, 99, 100, 101, 0, 102, 0, 103,
	0, 0, 104, 105, 0, 0, 0, 0, 0, 0,
	106, 107, 108, 109, 191, 110, 192, 193, 0, 0,
	111, 0, 0, 0, 112, 113, 0, 0, 0, 0,
	194, 114, 195, 0, 0, 115, 116, 196, 117, 0,
	0, 0, 0, 0, 118, 197, 0, 198, 0, 119,
	120, 290, 200, 0, 0, 0, 0, 121, 201, 202,
	203, 0, 204, 0, 0, 122, 0, 123, 0, 0,
	205, 0, 124, 0, 0, 260, 0, 0, 125, 0,
	126, 127, 128, 129, 261, 0, 130, 131, 132, 0,
	133, 0, 206, 134, 207, 135, 136, 0, 0, 0,
	0, 0, 137, 208, 0, 138, 0, 209, 139, 140,
	0, 210, 141, 211, 0, 142, 143, 144, 212, 145,
	146, 0, 147, 148, 149, 0, 150, 0, 151, 152,
	213, 153, 0, 154, 155, 0, 156, 262, 0, 157,
	158, 0, 159, 214, 160, 0, 161, 162, 164, 215,
	163, 216, 0, 0, 165, 166, 0, 264, 217, 0,
	0, 263, 218, 219, 0, 167, 168, 169, 170, 0,
	88, 171, 172, 0, 0, 173, 174, 175, 220, 221,
	0, 176, 91, 92, 0, 93, 177, 178, 179, 180,
	0, 0, 0, 0, 94, 95, 181, 182, 183, 96,
	184, 185, 0, 97, 186, 187, 98, 0, 0, 188,
	189, 0, 190, 0, 0, 0, 99, 100, 101, 0,
	102, 0, 103, 0, 0, 104, 105, 0, 0, 0,
	0, 0, 0, 106, 107, 108, 109, 191, 110, 192,
	193, 0, 0, 111, 0, 0, 0, 112, 113, 0,
	0, 0, 0, 194, 114, 195, 0, 0, 115, 116,
	196, 117, 0, 0, 0, 0, 0, 118, 197, 0,
	198, 0, 119, 120, 288, 200, 0, 0, 0, 0,
	121, 201, 202, 203, 0, 204, 0, 0, 122, 0,
	123, 0, 0, 205, 0, 124, 0, 0, 260, 0,
	0, 125, 0, 126, 127, 128, 129, 261, 0, 130,
	131, 132, 0, 133, 0, 206, 134, 207, 135, 136,
	0, 0, 0, 0, 0, 137, 208, 0, 138, 0,
	209, 139, 140, 0, 210, 141, 211, 0, 142, 143,
	144, 212, 145, 146, 0, 147, 148, 149, 0, 150,
	0, 151, 152, 213, 153, 0, 154, 155, 0, 156,
	262, 0, 157, 158, 0, 159, 214, 160, 0, 161,
	162, 164, 215, 163, 216, 0, 0, 165, 166, 0,
	264, 217, 0, 0, 263, 218, 219, 0, 167, 168,
	169, 170, 0, 88, 171, 172, 0, 0, 173, 174,
	175, 220, 221, 0, 176, 91, 92, 0, 93, 177,
	178, 179, 180, 0, 0, 0, 0, 94, 95, 181,
	182, 183, 96, 184, 185, 0, 97, 186, 187, 98,
	0, 0, 188, 189, 0, 190, 0, 0, 0, 99,
	100, 101, 0, 102, 0, 103, 0, 0, 104, 105,
	0, 0, 0, 0, 0, 0, 106, 107, 108, 109,
	191, 110, 192, 193, 0, 0, 111, 0, 0, 0,
	112, 113, 0, 0, 0, 0, 194, 114, 195, 0,
	0, 115, 116, 196, 117, 0, 0, 0, 0, 0,
	118, 197, 0, 198, 0, 119, 120, 282, 200, 0,
	0, 0, 0, 121, 201, 202, 203, 0, 204, 0,
	0, 122, 0, 123, 0, 0, 205, 0, 124, 0,
	0, 260, 0, 0, 125, 0, 126, 127, 128, 129,
	261, 0, 130, 131, 132, 0, 133, 0, 206, 134,
	207, 135, 136, 0, 0, 0, 0, 0, 137, 208,
	0, 138, 0, 209, 139, 140, 0, 210, 141, 211,
	0, 142, 143, 144, 212, 145, 146, 0, 147, 148,
	149, 0, 150, 0, 151, 152, 213, 153, 0, 154,
	155, 0, 156, 262, 0, 157, 158, 0, 159, 214,
	160, 0, 161, 162, 164, 215, 163, 216, 0, 0,
	165, 166, 0, 264, 217, 0, 0, 263, 218, 219,
	0, 167, 168, 169, 170, 0, 88, 171, 172, 0,
	0, 173, 174, 175, 220, 221, 0, 176, 91, 92,
	0, 93, 177, 178, 179, 180, 0, 0, 0, 0,
	94, 95, 181, 182, 183, 96, 184, 185, 0, 97,
	186, 187, 98, 0, 0, 188, 189, 0, 190, 0,
	0, 0, 99, 100, 101, 0, 102, 0, 103, 0,
	0, 104, 105, 0, 0, 0, 0, 0, 0, 106,
	107, 108, 109, 191, 110, 192, 193, 0, 0, 111,
	0, 0, 0, 112, 113, 0, 0, 0, 0, 194,
	114, 195, 0, 0, 115, 116, 196, 117, 0, 0,
	0, 0, 0, 118, 197, 0, 198, 0, 119, 120,
	199, 200, 0, 0, 0, 0, 121, 201, 202, 203,
	0, 204, 0, 0, 122, 0, 123, 0, 0, 205,
	0, 124, 0, 0, 260, 0, 0, 125, 0, 126,
	127, 128, 129, 261, 0, 130, 131, 132, 0, 133,
	0, 206, 134, 207, 135, 136, 0, 0, 0, 0,
	0, 137, 208, 0, 138, 0, 209, 139, 140, 0,
	210, 141, 211, 0, 142, 143, 144, 212, 257, 146,
	0, 147, 148, 149, 0, 150, 0, 151, 152, 213,
	153, 0, 154, 155, 0, 156, 262, 0, 157, 158,
	0, 159, 214, 160, 0, 161, 162, 164, 215, 163,
	216, 0, 0, 165, 166, 0, 264, 217, 0, 0,
	263, 218, 219, 0, 167, 168, 169, 170, 0, 88,
	171, 172, 0, 0, 173, 174, 175, 220, 221, 0,
	176, 91, 92, 0, 93, 177, 178, 179, 180, 0,
	0, 0, 0, 94, 95, 181, 182, 183, 96, 184,
	185, 0, 97, 186, 187, 98, 0, 0, 188, 189,
	0, 190, 0, 0, 0, 99, 100, 101, 0, 102,
	0, 103, 0, 0, 104, 105, 0, 0, 0, 0,
	0, 0, 106, 107, 108, 109, 191, 110, 192, 193,
	0, 0, 111, 0, 0, 0, 112, 113, 0, 0,
	0, 0, 194, 114, 195, 0, 0, 115, 116, 196,
	117, 0, 0, 0, 0, 0, 118, 197, 0, 198,
	0, 119, 120, 199, 200, 0, 0, 0, 0, 121,
	201, 202, 203, 0, 204, 0, 0, 122, 0, 123,
	0, 0, 205, 0, 124, 0, 0, 78, 0, 0,
	125, 0, 126, 127, 128, 129, 85, 0, 130, 131,
	132, 0, 133, 0, 206, 134, 207, 135, 136, 0,
	0, 0, 0, 0, 137, 208, 0, 138, 0, 209,
	139, 140, 0, 210, 141, 211, 0, 142, 143, 144,
	212, 145, 146, 0, 147, 148, 149, 0, 150, 0,
	151, 152, 213, 153, 0, 154, 155, 0, 156, 79,
	0, 157, 158, 0, 159, 214, 160, 0, 161, 162,
	164, 215, 163, 216, 0, 0, 165, 166, 0, 84,
	217, 0, 0, 80, 218, 219, 0, 167, 168, 169,
	170, 0, 88, 171, 172, 0, 0, 173, 174, 175,
	220, 221, 0, 176, 91, 92, 0, 93, 177, 178,
	179, 180, 0, 0, 0, 0, 94, 95, 181, 182,
	183, 96, 184, 185, 0, 97, 186, 187, 98, 0,
	0, 188, 189, 0, 190, 0, 0, 0, 99, 100,
	101, 0, 102, 0, 103, 0, 0, 104, 105, 0,
	0, 0, 0, 0, 0, 106, 107, 108, 109, 191,
	110, 192, 193, 0, 0, 111, 0, 0, 0, 112,
	113, 0, 0, 0, 0, 194, 114, 195, 0, 0,
	115, 116, 196, 117, 0, 0, 0, 0, 0, 118,
	197, 0, 198, 0, 119, 120, 199, 200, 0, 0,
	0, 0, 121, 201, 202, 203, 0, 204, 0, 0,
	122, 0, 123, 0, 0, 205, 0, 124, 0, 0,
	260, 0, 0, 125, 0, 126, 127, 128, 129, 261,
	0, 130, 131, 132, 0, 133, 0, 206, 134, 207,
	135, 136, 0, 0, 0, 0, 0, 137, 208, 0,
	138, 0, 209, 139, 0, 0, 210, 141, 211, 0,
	142, 0, 144, 212, 145, 146, 0, 147, 148, 149,
	0, 150, 0, 151, 152, 213, 0, 0, 154, 155,
	0, 156, 262, 0, 157, 158, 0, 159, 214, 160,
	0, 161, 162, 164, 215, 163, 216, 0, 0, 165,
	166, 0, 264, 217, 0, 0, 263, 218, 219, 0,
	167, 168, 169, 170, 0, 0, 171, 172, 0, 0,
	173, 174, 175, 220, 221, 675, 176, 693, 694, 695,
	0, 177, 178, 179, 180, 0, 0, 696, 0, 0,
	0, 0, 0, 677, 0, 702, 0, 675, 0, 693,
	694, 695, 0, 0, 0, 0, 0, 0, 0, 696,
	0, 0, 676, 0, 0, 677, 0, 702, 690, 675,
	0, 693, 694, 695, 0, 0, 0, 0, 0, 0,
	0, 696, 0, 0, 676, 0, 0, 677, 0, 702,
	690, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 676, 0, 0, 0,
	0, 0, 690, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 703, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 701, 0, 0, 0,
	0, 0, 0, 0, 0, 698, 0, 703, 0, 0,
	0, 691, 0, 1164, 0, 1180, 1181, 1182, 701, 0,
	0, 0, 0, 0, 0, 0, 0, 698, 0, 703,
	0, 0, 697, 691, 0, 0, 0, 0, 0, 0,
	701, 0, 0, 0, 0, 0, 0, 0, 0, 698,
	0, 0, 0, 0, 697, 691, 1177, 0, 0, 0,
	0, 0, 0, 0, 692, 0, 0, 0, 0, 0,
	0, 0, 0, 700, 0, 0, 697, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 692, 0, 0, 0,
	0, 0, 0, 0, 0, 700, 0, 0, 0, 0,
	675, 0, 693, 694, 695, 0, 0, 0, 692, 0,
	0, 0, 696, 0, 0, 0, 0, 700, 677, 0,
	702, 0, 699, 0, 687, 688, 689, 0, 686, 683,
	684, 685, 678, 679, 680, 681, 682, 676, 0, 1178,
	0, 0, 0, 690, 699, 1203, 687, 688, 689, 0,
	686, 683, 684, 685, 678, 679, 680, 681, 682, 0,
	0, 0, 0, 0, 0, 0, 699, 1202, 687, 688,
	689, 0, 686, 683, 684, 685, 678, 679, 680, 681,
	682, 675, 0, 693, 694, 695, 1562, 0, 0, 0,
	0, 0, 1179, 696, 0, 0, 0, 0, 0, 677,
	703, 702, 0, 0, 0, 675, 0, 693, 694, 695,
	0, 701, 0, 0, 0, 0, 0, 696, 676, 0,
	698, 0, 0, 677, 690, 702, 691, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 676, 0, 0, 0, 0, 697, 690, 0,
	0, 0, 1174, 1175, 1176, 0, 1173, 1170, 1171, 1172,
	1165, 1166, 1167, 1168, 1169, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 692,
	0, 703, 0, 0, 0, 0, 0, 0, 700, 0,
	0, 0, 701, 0, 0, 0, 0, 0, 0, 0,
	0, 698, 0, 0, 0, 703, 0, 691, 0, 0,
	0, 0, 0, 0, 0, 0, 701, 0, 0, 0,
	0, 0, 0, 0, 0, 698, 0, 0, 697, 0,
	0, 691, 0, 0, 0, 0, 0, 699, 0, 687,
	688, 689, 0, 686, 683, 684, 685, 678, 679, 680,
	681, 682, 697, 0, 0, 0, 0, 1561, 0, 675,
	692, 693, 694, 695, 0, 0, 0, 0, 0, 700,
	0, 696, 0, 0, 0, 0, 0, 677, 0, 702,
	0, 0, 0, 0, 692, 0, 0, 0, 0, 0,
	0, 0, 0, 700, 0, 0, 676, 675, 0, 693,
	694, 695, 690, 0, 0, 0, 0, 0, 0, 696,
	0, 0, 0, 0, 0, 677, 0, 702, 699, 0,
	687, 688, 689, 0, 686, 683, 684, 685, 678, 679,
	680, 681, 682, 0, 676, 0, 0, 0, 1546, 0,
	690, 0, 699, 0, 687, 688, 689, 0, 686, 683,
	684, 685, 678, 679, 680, 681, 682, 0, 0, 703,
	0, 0, 1525, 0, 0, 0, 0, 0, 0, 0,
	701, 0, 0, 0, 0, 0, 0, 0, 0, 698,
	0, 0, 0, 0, 0, 691, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 703, 0, 0,
	0, 0, 0, 0, 0, 0, 697, 0, 701, 0,
	0, 0, 0, 0, 0, 0, 0, 698, 0, 0,
	0, 0, 0, 691, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 692, 0,
	0, 0, 0, 0, 697, 0, 0, 700, 0, 675,
	0, 693, 694, 695, 0, 0, 0, 0, 0, 0,
	0, 696, 0, 0, 0, 0, 0, 677, 0, 702,
	0, 0, 0, 0, 0, 0, 692, 675, 0, 693,
	694, 695, 0, 0, 0, 700, 676, 0, 0, 696,
	0, 0, 690, 0, 0, 677, 699, 702, 687, 688,
	689, 0, 686, 683, 684, 685, 678, 679, 680, 681,
	682, 0, 0, 0, 676, 0, 1520, 0, 0, 0,
	690, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 699, 0, 687, 688, 689, 0,
	686, 683, 684, 685, 678, 679, 680, 681, 682, 703,
	0, 0, 0, 0, 1516, 0, 0, 0, 0, 0,
	701, 675, 0, 693, 694, 695, 0, 0, 0, 698,
	0, 0, 0, 696, 0, 691, 0, 703, 0, 677,
	0, 702, 0, 0, 0, 0, 0, 0, 701, 0,
	0, 0, 0, 0, 0, 0, 697, 698, 676, 0,
	0, 0, 0, 691, 690, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 697, 0, 0, 0, 692, 0,
	0, 0, 0, 0, 0, 0, 0, 700, 0, 0,
	0, 0, 675, 0, 693, 694, 695, 0, 0, 0,
	0, 0, 0, 0, 696, 0, 692, 0, 0, 0,
	677, 703, 702, 0, 0, 700, 0, 0, 0, 0,
	0, 0, 701, 0, 0, 0, 0, 0, 0, 676,
	0, 698, 0, 0, 0, 690, 699, 691, 687, 688,
	689, 0, 686, 683, 684, 685, 678, 679, 680, 681,
	682, 0, 0, 0, 0, 0, 1458, 0, 697, 0,
	0, 0, 0, 0, 699, 0, 687, 688, 689, 0,
	686, 683, 684, 685, 678, 679, 680, 681, 682, 0,
	0, 0, 0, 0, 1457, 0, 0, 0, 0, 0,
	692, 0, 703, 0, 0, 0, 0, 0, 0, 700,
	0, 0, 0, 701, 675, 0, 693, 694, 695, 0,
	0, 0, 698, 0, 0, 0, 696, 0, 691, 0,
	0, 0, 677, 0, 702, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 697,
	0, 676, 0, 0, 0, 0, 0, 690, 699, 0,
	687, 688, 689, 0, 686, 683, 684, 685, 678, 679,
	680, 681, 682, 0, 0, 0, 0, 0, 1374, 0,
	0, 692, 0, 0, 0, 0, 0, 0, 0, 675,
	700, 693, 694, 695, 0, 0, 0, 0, 0, 0,
	0, 696, 0, 0, 0, 0, 0, 677, 0, 702,
	0, 0, 0, 0, 703, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 701, 676, 0, 0, 0,
	0, 0, 690, 0, 698, 0, 0, 0, 0, 699,
	691, 687, 688, 689, 0, 686, 683, 684, 685, 678,
	679, 680, 681, 682, 0, 0, 0, 0, 0, 1312,
	0, 697, 0, 0, 0, 0, 0, 0, 0, 0,
	675, 0, 693, 694, 695, 0, 0, 0, 0, 0,
	0, 0, 696, 0, 0, 0, 0, 0, 677, 703,
	702, 0, 0, 692, 675, 0, 693, 694, 695, 0,
	701, 0, 700, 0, 0, 0, 696, 676, 0, 698,
	0, 0, 677, 690, 702, 691, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 676, 0, 0, 0, 0, 697, 690, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 699, 0, 687, 688, 689, 0, 686, 683, 684,
	685, 678, 679, 680, 681, 682, 0, 0, 692, 0,
	703, 1287, 0, 0, 0, 0, 0, 700, 0, 1622,
	0, 701, 0, 0, 0, 0, 0, 0, 0, 0,
	698, 0, 0, 0, 703, 0, 691, 0, 0, 0,
	0, 0, 0, 0, 0, 701, 0, 0, 0, 0,
	0, 0, 0, 0, 698, 0, 0, 697, 0, 0,
	691, 0, 0, 0, 0, 0, 699, 0, 687, 688,
	689, 0, 686, 683, 684, 685, 678, 679, 680, 681,
	682, 697, 0, 0, 0, 0, 947, 0, 0, 692,
	0, 0, 0, 1621, 0, 0, 0, 0, 700, 0,
	675, 0, 693, 694, 695, 0, 0, 0, 0, 0,
	0, 0, 696, 692, 0, 0, 0, 0, 677, 0,
	702, 0, 700, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 676, 0, 0,
	0, 0, 0, 690, 0, 0, 0, 699, 0, 687,
	688, 689, 0, 686, 683, 684, 685, 678, 679, 680,
	681, 682, 0, 0, 0, 1358, 0, 0, 0, 0,
	0, 699, 0, 687, 688, 689, 0, 686, 683, 684,
	685, 678, 679, 680, 681, 682, 1194, 675, 1193, 693,
	694, 695, 0, 0, 0, 0, 0, 0, 0, 696,
	703, 0, 0, 854, 0, 677, 0, 702, 0, 0,
	0, 701, 0, 0, 0, 0, 0, 0, 0, 0,
	698, 0, 0, 0, 676, 0, 691, 0, 0, 0,
	690, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 697, 0, 0,
	0, 0, 0, 0, 705, 855, 0, 0, 0, 0,
	675, 0, 693, 694, 695, 0, 0, 0, 0, 0,
	0, 0, 696, 0, 0, 704, 0, 0, 677, 692,
	702, 0, 0, 0, 0, 0, 0, 703, 700, 0,
	0, 0, 0, 0, 0, 0, 0, 676, 701, 0,
	0, 0, 0, 690, 0, 0, 0, 698, 0, 0,
	0, 0, 0, 691, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 697, 0, 0, 699, 0, 687,
	688, 689, 0, 686, 683, 684, 685, 678, 679, 680,
	681, 682, 0, 0, 0, 0, 0, 0, 0, 0,
	703, 0, 0, 0, 0, 675, 692, 693, 694, 695,
	0, 701, 0, 0, 0, 700, 0, 696, 0, 0,
	698, 0, 0, 677, 0, 702, 691, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 676, 0, 0, 0, 0, 697, 690, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 699, 0, 687, 688, 689, 0,
	686, 683, 684, 685, 678, 679, 680, 681, 682, 692,
	675, 0, 693, 694, 695, 0, 0, 0, 700, 0,
	0, 0, 696, 0, 0, 0, 0, 0, 677, 0,
	702, 0, 0, 0, 0, 703, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 701, 676, 0, 0,
	0, 0, 0, 690, 0, 698, 0, 0, 0, 0,
	0, 691, 0, 0, 0, 0, 0, 699, 0, 687,
	688, 689, 0, 686, 683, 684, 685, 678, 679, 680,
	681, 682, 697, 252, 0, 0, 0, 0, 0, 0,
	0, 675, 0, 693, 694, 695, 0, 0, 0, 0,
	0, 0, 0, 696, 0, 0, 1195, 0, 0, 677,
	703, 702, 0, 0, 692, 675, 0, 693, 694, 695,
	0, 701, 0, 700, 0, 0, 0, 696, 676, 0,
	698, 0, 0, 677, 690, 702, 691, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 676, 0, 0, 0, 0, 697, 690, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 699, 0, 687, 688, 689, 0, 686, 683,
	684, 685, 678, 679, 680, 681, 682, 0, 0, 692,
	0, 703, 0, 0, 0, 0, 0, 0, 700, 0,
	0, 0, 701, 1200, 0, 0, 0, 0, 0, 0,
	0, 698, 0, 1306, 0, 703, 0, 691, 0, 0,
	0, 0, 0, 0, 0, 0, 701, 0, 0, 0,
	0, 0, 0, 0, 0, 698, 0, 0, 697, 0,
	0, 691, 0, 0, 0, 0, 0, 699, 0, 687,
	688, 689, 0, 686, 683, 684, 685, 678, 679, 680,
	681, 682, 697, 0, 0, 0, 0, 0, 0, 675,
	692, 693, 694, 695, 0, 0, 0, 0, 0, 700,
	0, 696, 0, 0, 0, 0, 0, 677, 0, 702,
	0, 0, 0, 0, 692, 0, 0, 0, 0, 0,
	0, 0, 0, 700, 0, 0, 676, 675, 0, 693,
	694, 695, 690, 0, 0, 0, 0, 0, 0, 696,
	0, 0, 1157, 0, 0, 677, 0, 702, 699, 0,
	687, 688, 689, 0, 686, 683, 684, 685, 678, 679,
	680, 681, 682, 0, 676, 0, 0, 0, 0, 0,
	690, 0, 699, 0, 687, 688, 689, 0, 686, 683,
	684, 685, 678, 679, 680, 681, 682, 0, 0, 703,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	701, 0, 0, 0, 0, 0, 0, 0, 0, 698,
	0, 0, 0, 0, 0, 691, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 703, 0, 0,
	1164, 0, 1180, 1181, 1182, 0, 697, 0, 701, 0,
	0, 0, 1282, 0, 0, 0, 1162, 698, 0, 0,
	0, 0, 0, 691, 0, 0, 0, 0, 1164, 0,
	1180, 1181, 1182, 0, 0, 0, 0, 0, 692, 0,
	1281, 0, 0, 1177, 697, 0, 0, 700, 0, 675,
	0, 693, 694, 695, 0, 0, 0, 0, 0, 0,
	0, 696, 0, 0, 0, 0, 0, 677, 0, 702,
	0, 1177, 0, 0, 0, 0, 692, 675, 0, 693,
	694, 695, 0, 0, 0, 700, 676, 0, 0, 696,
	0, 0, 690, 0, 0, 677, 699, 702, 687, 688,
	689, 0, 686, 683, 684, 685, 678, 679, 680, 681,
	682, 1183, 0, 0, 676, 0, 0, 0, 0, 0,
	690, 0, 0, 0, 0, 0, 1178, 1164, 0, 1180,
	1181, 1182, 0, 0, 699, 0, 687, 688, 689, 1183,
	686, 683, 684, 685, 678, 679, 680, 681, 682, 703,
	0, 0, 0, 0, 1178, 1164, 0, 1180, 1181, 1182,
	701, 0, 0, 0, 0, 0, 0, 0, 0, 698,
	1177, 0, 0, 0, 0, 691, 0, 703, 0, 1179,
	0, 0, 0, 0, 0, 0, 0, 0, 701, 0,
	0, 0, 0, 0, 0, 0, 697, 698, 1177, 0,
	0, 0, 0, 691, 0, 0, 0, 1179, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1184, 692, 0,
	0, 0, 0, 0, 0, 0, 0, 700, 1183, 1174,
	1175, 1176, 0, 1173, 1170, 1171, 1172, 1165, 1166, 1167,
	1168, 1169, 0, 1178, 0, 0, 692, 0, 0, 0,
	0, 0, 0, 0, 675, 700, 1183, 1174, 1175, 1176,
	0, 1173, 1170, 1171, 1172, 1165, 1166, 1167, 1168, 1169,
	0, 1178, 677, 0, 702, 0, 699, 0, 687, 688,
	689, 0, 686, 683, 684, 685, 678, 679, 680, 681,
	682, 676, 0, 0, 0, 0, 1179, 690, 0, 0,
	0, 0, 0, 0, 699, 0, 687, 688, 689, 0,
	686, 683, 684, 685, 678, 679, 680, 681, 682, 0,
	0, 0, 0, 0, 1179, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 703, 0, 1174, 1175, 1176, 0,
	1173, 1170, 1171, 1172, 1165, 1166, 1167, 1168, 1169, 883,
	898, 874, 891, 890, 698, 0, 876, 875, 0, 0,
	691, 900, 899, 0, 1174, 1175, 1176, 0, 1173, 1170,
	1171, 1172, 1165, 1166, 1167, 1168, 1169, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 896,
	0, 888, 887, 0, 0, 0, 0, 0, 0, 886,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 885, 692, 0, 0, 0, 0, 0, 0,
	0, 0, 700, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 879, 880, 881, 0, 551, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 889,
	0, 699, 0, 0, 0, 0, 0, 686, 683, 684,
	685, 678, 679, 680, 681, 682, 0, 0, 0, 0,
	0, 0, 0, 884, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 882, 0,
	0, 0, 0, 0, 878, 0, 0, 0, 0, 0,
	877, 0, 0, 897, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 901,
}
var sqlPact = [...]int{

	1894, -1000, 6, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 665,
	-1000, -1000, -1000, 427, 658, 62, 1240, 1240, -1000, -1000,
	15665, 2013, 308, 327, 308, 308, 308, 342, 518, 79,
	-1000, 474, 8, 15442, 12543, 1023, 0, 12097, 187, 1894,
	12320, 12543, 15219, 884, 787, 12097, 14996, 14773, 14550, -1000,
	8074, -1000, -1000, -1000, -1000, 681, -1000, -4, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 679, -1000, 14327, 14327,
	584, -1000, -1000, 412, 240, 1024, -1000, 13, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 877, -1000, 678, 873, 871, 239,
	641, -1000, 584, -1000, 584, -1000, -1000, -1000, 12097, -1000,
	14104, 799, 13881, -1000, 474, -1000, -1000, -1000, 689, 1017,
	1017, 1017, 1034, 77, 74, 79, -10, 12543, -1000, 189,
	-1000, -1000, -1000, -1000, -1000, -10, 5367, 5367, -1000, -1000,
	187, -1000, 88, 10496, -140, -1000, 5857, -1000, 621, 928,
	485, 478, 927, 12097, 12543, 404, 13658, -1000, 926, 76,
	924, -1000, -18, 923, -1000, -26, -1000, -1000, -1000, -1000,
	-1000, -1000, 187, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 10739, 1072, 10739, -1000,
	-1000, -1000, -5, -6, 767, 760, 8562, 8319, 964, 1058,
	-1000, -1000, -1000, 12, 3391, 12543, 895, 10739, 12543, -1000,
	12543, -1000, 765, -1000, -1000, -7, -9, -1000, 81, -1000,
	183, 721, 13435, -1000, 718, -1000, 689, -1000, 685, 752,
	6365, 7100, 79, -1000, -1000, 79, 79, 7100, -1000, -1000,
	12543, -10, 1080, 12543, 866, -101, -1000, 17590, -1000, -1000,
	7100, 7100, 7100, 7100, 7100, 636, -1000, -1000, -1000, 3879,
	-1000, -1000, -140, 178, 54, -1000, -1000, 177, -140, -1000,
	-1000, -1000, -1000, 176, 1170, 336, -1000, -1000, -1000, 7100,
	244, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	891, 171, 169, -1000, -1000, -1000, -1000, 168, 167, 165,
	164, 163, 161, 158, 157, 156, 155, 154, 152, 151,
	597, -1000, 262, -1000, -1000, 262, 262, -1000, 136, 136,
	137, -1000, -1000, -1000, 136, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 150, 59, -1000, -1000, -1000, 12543,
	-140, -1000, -1000, -1000, 3391, 7100, 3147, -30, -1000, 18219,
	-1000, -25, 593, -1000, 11641, 982, 978, 987, 12097, 383,
	382, 12543, 254, 43, 1047, 10010, -1000, 12543, 12543, -1000,
	12543, -1000, -1000, 12543, 12543, 12543, 8, 11185, 373, -21,
	10962, 12543, -1000, 11, -1000, -1000, 865, 582, 784, 617,
	-1000, -1000, -1000, -1000, -11, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1137, -1000, -1000, -1000, -1000,
	1151, -11, -1000, -1000, -1000, -1000, -1000, 1159, -1000, -1000,
	-1000, -1000, 3391, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 12543,
	-1000, -1000, -1000, -1000, 582, 784, -1000, 12097, 11408, 921,
	677, 716, -1000, 917, -1000, -1000, -1000, -1000, 18219, -1000,
	18219, 482, 791, -1000, 791, -12, -1000, 17517, -1000, 149,
	-31, -1000, 254, 9767, 5367, 18528, 12543, 357, 7100, 7100,
	7100, 7100, 7100, 7100, 7100, 7100, 7100, 7100, 7100, 7100,
	7100, 7100, 7100, 7100, 7100, 7100, 7100, 7100, 7100, 747,
	366, 898, 607, 130, 3391, -1000, 1114, 1114, 1114, 2467,
	2467, 139, -131, 17159, -15, -140, -1000, -1000, 5104, 4859,
	-140, 2732, -1000, 688, 1148, 258, 18219, 900, 815, 145,
	73, 71, 7100, 841, 7100, 7345, 7100, 7100, 4124, 7100,
	7100, 7100, 7100, 7100, 7100, -1000, 143, -1000, -1000, -1000,
	-1000, 1144, -1000, -1000, 1142, -1000, 1140, 254, 70, -1000,
	-1000, 1998, -1000, -1000, 5857, -1000, 513, 12543, 12543, 12543,
	-1000, -1000, 712, 13212, -1000, 18528, 12543, -1000, 140, 138,
	774, 773, 12543, 12543, 12989, 12766, 12543, 498, 12543, 12543,
	468, -1000, 7100, 670, -1000, 9281, 266, 12543, 57, -1000,
	-1000, -1000, 232, 12543, -1000, -1000, -1000, 76, -1000, -18,
	-1000, -1000, 12543, 10962, -21, -22, -1000, -1000, 12543, -1000,
	-1000, -1000, 479, -1000, 500, -1000, 8805, -1000, -1000, -1000,
	688, -1000, -38, -1000, -1000, -1000, -1000, 67, -23, -1000,
	-1000, -1000, -1000, 12543, 213, 12543, 12543, 915, 12543, -1000,
	-1000, -1000, 7100, -1000, -1000, -1000, 8, 12543, -1000, 808,
	-24, 1110, 11874, 11874, -1000, 9038, -1000, -1000, 1089, -1000,
	-1000, -1000, -1000, 51, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 137, 597, 136, 136, 136,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 262, 262,
	262, -1000, -1000, 238, 546, 546, 1179, 1179, 1179, 452,
	452, 1290, 525, 18434, 18434, 18434, 2423, 360, 360, 18434,
	18434, 18434, 2467, 18247, 1625, 7100, 352, 606, 130, 7100,
	-1000, 904, -1000, -1000, -1000, 864, 128, 7345, 7345, -1000,
	-1000, -1000, 3879, -1000, -1000, 126, 7100, -1000, 7100, -62,
	-88, -1000, 18219, -1000, -39, -1000, -1000, -32, 7100, 7100,
	7100, 66, -1000, 351, -1000, 350, 348, 347, -1000, 125,
	64, 415, -1000, 7100, 634, 123, 121, 7100, -1000, -1000,
	18067, 63, 863, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	58, 18029, 56, 18297, -1000, 7345, 7345, 7345, 3879, 120,
	55, 17430, -129, 17851, 6102, 6102, 6102, 53, 17875, 7100,
	-129, 16137, 16115, 2314, -40, -41, -45, 1138, -46, 52,
	49, 808, -1000, -1000, 7100, -1000, -1000, -1000, 339, 338,
	910, -1000, 706, -1000, 633, 7100, 12543, 112, 111, 554,
	-1000, 909, 611, 908, 611, -1000, -25, 542, -1000, -1000,
	335, 18219, 463, 989, -47, -1000, -1000, 254, 10010, 5857,
	-51, -1000, -38, -1000, -38, -1000, -1000, -1000, -1000, -1000,
	12543, -1000, 11408, 110, 12543, 109, 108, 12543, -1000, -1000,
	48, -1000, -1000, -1000, -1000, -1000, 809, 1032, 9767, 780,
	778, 9767, 1122, 640, 640, 640, -1000, -1000, -1000, 12543,
	106, -1000, 9524, 46, 1110, 195, 194, -1000, 1136, 7100,
	1625, 7100, 7345, 7345, -1000, 1625, -1000, -1000, -1000, -1000,
	859, 103, 7100, 18528, 18198, 18170, -53, 4614, -61, 17084,
	7100, -1000, -1000, 54, -1000, 45, 5612, -1000, 17695, -19,
	-19, -1000, 730, 650, 511, 434, 1132, 1156, 932, -1000,
	7100, 17770, -1000, 10253, 256, 654, 16972, 18528, -1000, 7100,
	-1000, 849, 7100, -1000, 18528, 7345, 7345, 7345, 7345, 7345,
	7345, 7345, 7345, 7345, 7345, 7345, 7345, 7345, 7345, 7345,
	7345, 7345, 7345, 756, 7345, 1111, 1111, 1111, -83, 4369,
	-1000, 888, 849, 7100, 7100, 18528, 44, 40, 39, -1000,
	7100, -129, 7100, 7100, 7100, -1000, -1000, -1000, 38, -1000,
	1128, -1000, -1000, 809, 17240, 12543, 12543, 12543, 906, 993,
	-1000, 16891, -66, 12543, 12543, -1000, 786, 814, 291, 12543,
	-1000, 12543, -1000, 12543, 12543, 12543, 12543, -1000, 5367, 148,
	8, -1000, -1000, -1000, 210, -1000, -1000, 7831, 100, 11408,
	7831, 667, -1000, 247, 7100, 7100, 1110, 9767, 9767, 1679,
	776, 9767, -1000, -1000, -1000, -1000, 98, 12543, 11874, 365,
	1119, 35, 1057, 1625, 2047, 834, 7100, 18528, 2446, -73,
	-1000, 7100, 7100, -1000, -74, -1000, 7100, -1000, 18219, -1000,
	1124, 7100, 32, 31, 28, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 26, -1000, -1000, 18219, 7100, -1000, -1000, 15888,
	7100, 25, -1000, 23, 18219, 888, 18219, -1000, 460, 460,
	1111, 1111, 1111, 263, 263, 355, 1673, 2365, 2365, 2365,
	820, 465, 465, 2365, 2365, 2365, 823, 763, 97, 18325,
	7100, -75, -1000, -1000, -1000, 18219, 18219, 20, -1000, -1000,
	-1000, -129, 2152, 16807, 16779, -1000, 19, 247, -1000, -1000,
	-1000, -1000, 12543, -1000, 12543, -1000, 12543, 703, -1000, -1000,
	768, 94, 7345, 12543, -1000, 555, -79, -84, 702, -1000,
	692, 7100, -1000, 18528, 611, 611, -1000, 331, 330, -1000,
	-101, 939, 7831, 974, -1000, 93, -86, -1000, 68, 1002,
	7100, -1000, -1000, 91, 7831, 17, -91, 12543, -1000, 12543,
	18219, -129, -1000, 1679, -1000, 90, 7100, 9767, -1000, 12543,
	-92, -1000, -1000, 192, 191, -1000, 7100, 7100, 2446, -96,
	-1000, 18528, 1625, 1625, -1000, 16627, -1000, 17695, -1000, -1000,
	-1000, -1000, 18219, 623, -1000, 16589, -1000, -1000, -1000, 7345,
	819, 89, 18528, 16435, -1000, -1000, 7100, -1000, -1000, -1000,
	-1000, -1000, 1300, -1000, -1000, -1000, 7100, 18325, 82, -1000,
	86, -1000, -1000, -1000, 495, -1000, -1000, 18219, 1004, -1000,
	-1000, 12543, 12543, 361, -97, 12543, -1000, -1000, 3634, 555,
	7831, 1019, -140, 12543, 1019, 16411, 2732, -102, -1000, 555,
	84, -121, -1000, 1029, -1000, 12543, 18219, -1000, -104, -1000,
	-1000, -1000, 1625, 1625, -1000, -1000, -1000, 16, 654, 1028,
	-1000, 16243, 7345, 18528, -106, -1000, 16330, -1000, 16159, 734,
	12543, 12543, 12543, 272, 12543, -1000, -1000, 380, -1000, 254,
	-1000, -1000, -1000, -1000, -1000, -1000, 1002, -32, 555, -1000,
	7831, 12543, 83, -108, -1000, -1000, 580, 7100, 16243, -117,
	-1000, -1000, -1000, 659, 656, -122, -124, 82, -1000, 7100,
	-1000, 10010, -1000, 1019, 15, -1000, -132, -1000, -1000, -1000,
	9, 6855, 6855, -129, -1000, -1000, 664, 662, 439, -1000,
	-1000, -1000, -1000, -1000, 734, 18219, -110, -1000, -1000, 555,
	-1000, -1000, -1000, 7588, 680, 450, 17264, -1000, -1000, 945,
	-1000, 277, 627, 627, 659, -1000, -1000, 1096, -1000, -1000,
	-1000, -1000, -1000, -1000, 1104, -1000, -1000, 806, -1000, -1000,
	6610, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1452, 1451, 1053, 1444, 1442, 1438, 1436, 1431, 72,
	1429, 1424, 100, 1421, 68, 1415, 1411, 1410, 55, 1405,
	1403, 1402, 1397, 62, 33, 1743, 111, 102, 1394, 1393,
	1392, 10, 71, 75, 1383, 64, 86, 91, 1122, 41,
	40, 14, 69, 70, 1381, 1377, 1376, 1374, 36, 1373,
	1369, 1368, 11, 43, 76, 1367, 42, 132, 1366, 1364,
	77, 1362, 74, 97, 28, 104, 29, 1360, 32, 1358,
	13, 49, 1355, 26, 1352, 23, 48, 110, 1351, 1350,
	464, 39, 20, 45, 1349, 1348, 1347, 1344, 52, 60,
	38, 1343, 1342, 50, 1339, 103, 107, 1338, 1336, 1335,
	1334, 1333, 1332, 1021, 1330, 1329, 529, 8, 24, 44,
	3, 92, 90, 31, 0, 671, 542, 1323, 35, 30,
	56, 37, 51, 17, 1321, 78, 1320, 1319, 1313, 1312,
	1310, 54, 1309, 46, 106, 21, 57, 89, 18, 22,
	61, 96, 114, 84, 1305, 93, 1304, 53, 1302, 1279,
	623, 63, 1275, 1272, 1270, 622, 583, 577, 371, 1269,
	1268, 538, 379, 1267, 1265, 65, 1262, 1261, 112, 1260,
	109, 82, 1256, 95, 1248, 66, 1247, 154, 119, 73,
	1244, 99, 47, 1241, 1240, 1237, 19, 2, 9, 4,
	6, 5, 25, 15, 1236, 1234, 101, 79, 1231, 460,
	1224, 1212, 27, 1210, 1208, 16, 1206, 12, 1200, 7,
	1, 1198, 113, 1196, 67, 1193, 1115, 1192, 108, 1188,
	1187, 1289, 58,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	4, 4, 33, 33, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 29,
	29, 35, 35, 35, 34, 34, 30, 30, 5, 5,
	5, 9, 10, 10, 10, 10, 10, 10, 65, 65,
	64, 64, 67, 67, 11, 11, 12, 12, 12, 12,
	146, 146, 145, 13, 17, 212, 212, 212, 216, 216,
	217, 217, 218, 218, 218, 218, 218, 218, 218, 214,
	214, 19, 19, 19, 103, 103, 105, 105, 105, 105,
	37, 102, 102, 102, 102, 104, 104, 104, 104, 170,
	168, 168, 175, 175, 175, 45, 45, 45, 45, 45,
	46, 46, 46, 167, 167, 167, 167, 176, 176, 176,
	176, 176, 176, 47, 47, 47, 174, 174, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 169,
	169, 213, 213, 215, 215, 8, 8, 48, 48, 49,
	49, 109, 109, 109, 108, 184, 184, 185, 185, 185,
	186, 186, 186, 186, 186, 186, 186, 183, 183, 181,
	181, 182, 182, 182, 182, 219, 219, 107, 107, 52,
	52, 189, 189, 189, 189, 187, 187, 187, 187, 187,
	190, 188, 191, 191, 191, 191, 191, 134, 134, 134,
	22, 7, 7, 92, 92, 56, 56, 138, 138, 138,
	41, 41, 31, 31, 31, 16, 16, 16, 16, 16,
	16, 16, 16, 16, 93, 93, 94, 94, 21, 21,
	21, 21, 21, 221, 221, 106, 106, 106, 106, 106,
	36, 6, 6, 14, 44, 44, 99, 99, 99, 101,
	101, 101, 100, 100, 100, 79, 79, 23, 70, 70,
	71, 71, 144, 72, 72, 18, 18, 25, 25, 24,
	24, 24, 24, 24, 24, 26, 26, 27, 27, 27,
	27, 27, 27, 27, 197, 197, 197, 199, 199, 196,
	15, 15, 15, 15, 198, 198, 220, 220, 80, 80,
	80, 51, 50, 50, 54, 54, 53, 55, 55, 137,
	77, 77, 77, 77, 95, 96, 96, 97, 97, 98,
	98, 76, 76, 121, 121, 28, 28, 60, 60, 61,
	61, 139, 139, 139, 139, 140, 140, 140, 140, 140,
	140, 135, 135, 135, 135, 136, 136, 83, 83, 83,
	83, 81, 81, 82, 82, 141, 141, 141, 141, 78,
	78, 142, 142, 142, 110, 110, 147, 147, 147, 59,
	59, 59, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 149, 149, 149, 149, 151, 151, 151,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 152, 152, 159, 159, 160, 160, 161,
	162, 153, 153, 154, 154, 155, 156, 163, 163, 163,
	165, 165, 157, 157, 158, 89, 89, 89, 89, 89,
	89, 89, 89, 89, 89, 89, 89, 89, 89, 90,
	90, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 192, 192, 192, 192, 192, 192, 192, 194,
	194, 195, 195, 193, 193, 193, 193, 193, 193, 193,
	193, 193, 193, 193, 193, 193, 193, 193, 193, 193,
	193, 193, 193, 193, 193, 193, 193, 193, 200, 200,
	201, 201, 202, 202, 203, 203, 205, 206, 206, 206,
	207, 211, 211, 204, 204, 208, 208, 208, 209, 209,
	210, 210, 210, 210, 210, 125, 125, 125, 126, 126,
	127, 66, 66, 123, 123, 122, 122, 122, 124, 124,
	84, 164, 164, 164, 164, 164, 164, 164, 85, 85,
	91, 86, 86, 87, 87, 87, 87, 87, 87, 118,
	119, 88, 88, 88, 120, 120, 128, 132, 132, 131,
	130, 130, 129, 129, 113, 113, 113, 113, 113, 112,
	111, 73, 73, 222, 222, 133, 133, 74, 74, 75,
	69, 69, 68, 68, 143, 143, 143, 143, 62, 62,
	63, 63, 42, 42, 43, 43, 43, 43, 57, 57,
	58, 58, 40, 40, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 166, 166, 166, 38, 38,
	38, 39, 39, 172, 172, 172, 173, 173, 173, 173,
	171, 171, 171, 171, 171, 177, 177, 177, 177, 177,
	177, 177, 177, 177, 177, 177, 177, 177, 177, 177,
	177, 177, 177, 177, 177, 177, 177, 177, 177, 177,
	177, 177, 177, 177, 177, 177, 177, 177, 177, 177,
	177, 177, 177, 177, 177, 177, 177, 177, 177, 177,
	177, 177, 177, 177, 177, 177, 177, 177, 177, 177,
	177, 177, 177, 177, 177, 177, 177, 177, 177, 177,
	177, 177, 177, 177, 177, 177, 177, 177, 177, 177,
	177, 177, 177, 177, 177, 177, 177, 177, 177, 177,
	177, 177, 177, 177, 177, 177, 177, 177, 177, 179,
	179, 179, 179, 179, 179, 179, 179, 179, 179, 179,
	179, 179, 179, 179, 179, 179, 179, 179, 179, 179,
	179, 179, 179, 179, 179, 179, 179, 179, 179, 179,
	179, 179, 179, 179, 179, 179, 179, 179, 179, 179,
	179, 178, 178, 178, 178, 178, 178, 178, 178, 178,
	178, 178, 178, 178, 180, 180, 180, 180, 180, 180,
	180, 180, 180, 180, 180, 180, 180, 180, 180, 180,
	180, 180, 180, 180, 180, 180, 180, 180, 180, 180,
	180, 180, 180, 180, 180, 180, 180, 180, 180, 180,
	180, 180, 180, 180, 180, 180, 180, 180, 180, 180,
	180, 180, 180, 180, 180, 180, 180, 180, 180, 180,
	180, 180, 180, 180, 180, 180, 180, 180, 180, 180,
	180, 180, 180, 180, 180, 180, 180, 180, 180, 180,
	180, 180,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	4, 6, 1, 3, 2, 5, 3, 6, 4, 6,
	6, 6, 4, 8, 2, 3, 3, 6, 4, 3,
	2, 1, 1, 0, 2, 0, 2, 0, 1, 1,
	1, 5, 3, 5, 4, 6, 3, 5, 1, 3,
	1, 2, 2, 3, 2, 5, 1, 1, 1, 1,
	1, 3, 1, 6, 6, 1, 2, 2, 1, 1,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 2, 3, 3, 2, 1, 1, 1, 3, 3,
	2, 3, 3, 3, 3, 1, 3, 3, 2, 1,
	1, 3, 1, 1, 1, 2, 2, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	1, 1, 1, 1, 1, 0, 1, 1, 2, 2,
	4, 2, 4, 4, 3, 3, 4, 3, 2, 2,
	0, 2, 0, 2, 0, 6, 9, 1, 0, 1,
	3, 1, 1, 1, 3, 2, 0, 3, 1, 2,
	2, 1, 1, 2, 4, 2, 5, 6, 7, 3,
	1, 4, 5, 5, 10, 1, 1, 4, 0, 3,
	0, 2, 2, 2, 0, 1, 1, 2, 2, 0,
	3, 3, 2, 1, 1, 2, 2, 1, 2, 1,
	4, 10, 13, 1, 0, 1, 3, 3, 3, 5,
	2, 0, 1, 1, 0, 6, 6, 8, 6, 8,
	8, 10, 8, 10, 1, 0, 2, 0, 3, 3,
	2, 2, 2, 1, 0, 1, 1, 3, 3, 0,
	3, 3, 6, 7, 1, 3, 1, 4, 2, 8,
	5, 0, 4, 3, 0, 2, 0, 7, 1, 3,
	1, 1, 3, 5, 5, 1, 1, 3, 3, 1,
	2, 3, 2, 3, 4, 1, 1, 8, 8, 1,
	2, 4, 4, 4, 2, 2, 3, 1, 3, 6,
	1, 1, 1, 1, 1, 0, 1, 0, 1, 1,
	0, 1, 1, 0, 1, 0, 3, 1, 3, 2,
	2, 2, 1, 1, 2, 2, 3, 1, 1, 1,
	1, 3, 0, 2, 0, 2, 3, 2, 0, 1,
	3, 2, 2, 1, 4, 3, 4, 5, 4, 5,
	4, 5, 2, 4, 1, 1, 0, 2, 2, 2,
	1, 1, 0, 4, 2, 1, 2, 2, 4, 1,
	3, 1, 2, 3, 2, 0, 2, 5, 2, 3,
	4, 0, 1, 1, 1, 1, 2, 4, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 5, 0,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 2,
	2, 1, 1, 3, 0, 1, 1, 1, 1, 5,
	2, 1, 1, 1, 1, 4, 1, 2, 2, 1,
	1, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 3, 3, 3, 3, 3, 3, 0, 1,
	4, 1, 3, 3, 5, 2, 2, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 2, 2,
	3, 4, 4, 5, 3, 4, 3, 3, 4, 3,
	4, 3, 4, 5, 6, 6, 7, 6, 7, 6,
	7, 3, 4, 1, 3, 2, 2, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 5, 6, 6, 7,
	1, 1, 1, 3, 1, 1, 1, 2, 2, 2,
	1, 1, 3, 5, 6, 8, 6, 6, 4, 4,
	1, 1, 1, 5, 1, 3, 1, 3, 1, 1,
	1, 1, 6, 4, 4, 4, 4, 6, 5, 5,
	5, 4, 8, 6, 6, 4, 4, 4, 5, 0,
	5, 0, 2, 0, 1, 3, 3, 2, 2, 0,
	6, 1, 0, 3, 0, 2, 2, 0, 1, 4,
	2, 2, 2, 2, 2, 4, 3, 5, 4, 3,
	5, 1, 3, 1, 3, 3, 3, 2, 1, 3,
	3, 1, 1, 1, 1, 1, 1, 1, 4, 3,
	2, 3, 0, 3, 3, 2, 2, 1, 0, 2,
	2, 3, 2, 1, 1, 3, 5, 1, 2, 4,
	2, 0, 1, 0, 1, 1, 2, 3, 5, 2,
	2, 1, 2, 1, 0, 1, 1, 1, 3, 3,
	1, 0, 1, 3, 3, 2, 1, 1, 1, 3,
	1, 3, 1, 2, 1, 2, 2, 1, 1, 3,
	3, 0, 1, 2, 1, 1, 1, 1, 6, 2,
	3, 5, 1, 1, 1, 1, 2, 2, 1, 1,
	1, 1, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -9, -10, -11, -13,
	-14, -16, -17, -18, -19, -20, -21, -22, -23, 19,
	-6, -7, -8, -198, 82, 88, 100, 183, -24, -25,
	196, 197, 29, 204, 51, 84, 185, 222, 57, -197,
	-27, -26, 266, 242, 248, 192, -28, 210, 235, 269,
	210, 69, 111, 77, 114, 229, 69, 111, 210, -12,
	266, -18, -14, -23, -9, -216, 18, -217, -218, 57,
	82, 100, 192, 114, 77, 229, -216, -103, 132, 194,
	218, -104, -102, -170, 214, 141, -64, -38, 4, -177,
	-179, 16, 17, 19, 28, 29, 33, 37, 40, 50,
	51, 52, 54, 56, 59, 60, 67, 68, 69, 70,
	72, 77, 81, 82, 88, 92, 93, 95, 101, 106,
	107, 114, 122, 124, 129, 135, 137, 138, 139, 140,
	143, 144, 145, 147, 150, 152, 153, 159, 162, 165,
	166, 169, 172, 173, 174, 176, 177, 179, 180, 181,
	183, 185, 186, 188, 190, 191, 193, 196, 197, 199,
	201, 203, 204, 207, 205, 211, 212, 222, 223, 224,
	225, 228, 229, 232, 233, 234, 238, 243, 244, 245,
	246, 30, 31, 32, 34, 35, 38, 39, 43, 44,
	46, 71, 73, 74, 87, 89, 94, 102, 104, 108,
	109, 115, 116, 117, 119, 127, 149, 151, 160, 164,
	168, 170, 175, 187, 200, 206, 208, 215, 219, 220,
	235, 236, 4, 69, 50, 70, 101, 111, 211, 214,
	218, 18, -221, 218, 218, -221, -221, -221, -220, 210,
	210, -92, 69, 227, -26, -27, -25, -53, -54, 226,
	118, 86, 158, -24, -25, -197, -199, 176, -196, -38,
	132, 141, 194, 218, 214, -199, -50, -51, 18, 79,
	270, -141, -42, 156, -38, -75, 266, -3, -141, 108,
	-38, -42, 108, 98, 120, -142, -141, -38, 108, -62,
	108, -42, -65, 108, -64, -146, -145, -173, 4, -177,
	-179, -178, 235, 48, 58, 99, 113, 121, 123, 128,
	130, 142, 161, 163, 184, 198, 155, 270, 155, -103,
	-103, -105, -36, -37, 122, 172, 216, 251, 98, 246,
	-47, 6, 75, -67, 268, 98, -213, 155, 98, -169,
	98, 246, 122, 172, -106, -36, -37, -106, -78, -141,
	-64, 108, 111, -38, 108, -53, -54, -77, -95, -96,
	131, 154, -80, 18, 79, -80, -80, 37, 267, 267,
	270, -199, -58, 266, -69, -68, -143, -114, 259, -116,
	257, 258, 263, 146, 247, -125, -42, -117, 9, 266,
	-128, -194, -25, 87, 24, -126, -127, 187, -38, 8,
	5, 6, 7, -40, -149, -158, 221, 90, 148, 41,
	-192, -193, 4, -177, -172, -150, -160, -154, -157, 119,
	48, 62, 65, 63, 66, 195, 230, 42, 89, 164,
	168, 208, 219, 220, 108, 149, 109, 46, 102, 127,
	81, 31, 32, 34, 35, 43, 44, 71, 73, 74,
	94, 115, 116, 117, 151, 175, 200, 215, 236, -178,
	-161, -162, -155, -156, -163, -68, -75, 259, -42, 266,
	-73, -113, -112, -111, 271, 264, 268, -74, -133, -114,
	75, -33, 179, -32, 17, 19, 82, 233, 87, 179,
	179, 87, -142, -44, -42, 196, -38, 25, 87, -35,
	270, 40, 181, 87, 270, 87, 267, 270, -212, -63,
	210, 69, -43, -38, 259, -218, -212, 270, 270, 129,
	-46, 135, 145, 106, -168, 75, -175, -167, -134, 9,
	221, 90, 155, -174, 5, 258, -166, -173, 6, 8,
	257, -168, 75, 60, -176, 6, 4, -158, -134, 75,
	132, 119, 268, -171, 4, -177, -179, -178, -180, 18,
	20, 21, 22, 23, 24, 25, 26, 27, 36, 41,
	42, 45, 47, 49, 55, 57, 61, 62, 63, 64,
	65, 66, 75, 76, 78, 79, 80, 83, 84, 86,
	90, 91, 96, 97, 98, 100, 103, 105, 110, 111,
	112, 118, 120, 125, 126, 131, 133, 134, 146, 148,
	154, 155, 156, 157, 158, 167, 171, 178, 182, 192,
	195, 202, 209, 210, 213, 216, 217, 221, 226, 227,
	230, 231, 237, 239, 240, 241, 242, -170, -215, 96,
	-212, -170, -170, 129, 270, 270, -35, 270, 266, 146,
	-39, 108, -38, 146, -77, -96, -95, -97, -114, 18,
	-114, -116, -26, -26, -26, -55, -137, -114, -196, 25,
	-57, -38, -60, 98, 270, 10, 47, 28, 257, 258,
	259, 260, 261, 254, 255, 256, 253, 249, 250, 251,
	53, 136, 189, 12, 13, 14, 22, 157, 130, 247,
	198, 121, 30, 110, 25, 4, -114, -114, -114, -114,
	-114, 163, -25, -114, -66, -73, -25, -122, 264, 266,
	-73, 266, 6, 6, 266, -129, -114, -200, 243, 96,
	266, 266, 266, 266, 266, 266, 266, 266, 266, 266,
	266, 266, 266, 266, 266, 170, -165, 238, -165, -165,
	-151, 266, -151, -152, 266, -151, 266, -60, -42, -113,
	-171, -114, -171, 259, 270, 267, 270, 216, -93, 55,
	49, -108, 108, 49, -181, -38, 55, -182, 45, 227,
	171, 97, -93, 55, -93, 55, 55, -141, 216, 216,
	-42, -110, 240, -99, -18, 266, 75, 25, -70, -71,
	-144, -72, -42, 266, -38, -38, -42, -62, -64, -65,
	-12, -145, 216, 270, -63, -57, -112, -111, 98, -37,
	-36, -45, 174, 201, 180, 193, 270, 5, 8, 8,
	6, -171, -214, -38, -37, -36, -141, -48, -49, -109,
	-108, -183, -181, 111, 227, 87, 155, 146, 87, -98,
	187, 188, 270, -31, 26, 78, 266, 270, 267, -110,
	-61, -139, -141, -25, -140, 266, -143, -147, -148, -150,
	-159, -153, -157, -158, 33, 39, 38, 212, 206, 115,
	116, 117, 200, 31, 175, 94, 81, 74, 73, 151,
	35, 34, -161, -162, -155, -156, 71, 215, 32, 44,
	43, 236, -64, 214, -114, -114, -114, -114, -114, -114,
	-114, -114, -114, -114, -114, -114, -114, -114, -114, -114,
	-114, -114, -114, -114, -114, 130, 198, 30, 110, 216,
	148, 146, 221, 90, 228, 79, 152, -222, 209, 27,
	-120, -25, 266, -171, -125, 187, 266, 267, 270, -66,
	-124, 265, -114, -122, -66, 267, 267, -66, 237, 18,
	79, 259, -89, 245, 139, 72, 107, 138, -90, 191,
	8, -132, -131, 239, -201, 92, 103, 266, 267, 267,
	-114, -84, -164, 4, 245, 139, 72, 107, 138, 191,
	-85, -114, -86, -115, -116, 257, 258, 263, 266, 187,
	-87, -114, -66, -114, 36, 126, 217, -88, -114, 98,
	-66, -114, -114, -114, -66, -66, -66, 266, 8, 8,
	8, -110, 267, 265, 272, -133, -32, -42, -38, -38,
	146, -108, 108, -147, -38, 266, 266, 124, 124, -38,
	-38, 108, -38, 108, -38, -38, -33, 179, -38, -38,
	179, -114, -101, 155, -62, 235, -38, -60, 270, 251,
	-62, -35, -214, -43, -214, 225, 52, 174, -175, -89,
	270, 267, 270, -39, 111, -64, -42, 87, -38, -137,
	-15, -18, -14, -23, -9, -38, -76, 103, 270, 58,
	-83, 123, 142, 99, 128, 184, 113, -136, -135, 25,
	-38, -136, -25, -140, -139, -59, 24, -89, 266, 246,
	-114, 216, -222, 209, -120, -114, 148, 221, 90, 228,
	79, 152, 98, 266, -115, -115, -66, 266, -66, -114,
	270, 265, 265, 270, 267, -54, 270, -53, -114, -66,
	-66, 267, 216, 216, 216, 216, 266, 267, -130, -131,
	83, -114, -206, 162, 266, 266, -114, 25, 267, 98,
	267, -91, 167, 267, 10, 257, 258, 259, 260, 261,
	254, 255, 256, 253, 249, 250, 251, 53, 136, 189,
	12, 13, 14, 121, 110, -115, -115, -115, -66, 266,
	267, -118, -119, 98, 96, 25, -88, -88, -88, 267,
	98, -66, 270, 270, 270, 267, 267, 267, 8, 267,
	270, 267, 267, -76, -114, 216, 216, 87, 146, -184,
	-182, -114, -57, 266, 266, -29, 82, 196, -94, 87,
	-35, 87, -35, 216, -93, 55, 216, -79, 182, 54,
	267, -110, -71, -133, 267, -38, -109, 266, -39, 266,
	266, -38, 267, -121, 105, 37, -139, 123, 123, -139,
	-83, 123, -81, 161, -81, -81, -38, 266, 267, 264,
	264, 8, -114, -114, -115, -115, 98, 266, -114, -123,
	-147, 22, 22, 267, -66, 267, 270, 267, -114, -122,
	267, 237, -54, -54, -54, 139, 107, 138, -90, 138,
	-90, -90, 8, 6, 84, -114, 213, -207, -38, 266,
	240, -53, 267, -147, -114, -118, -114, -147, -115, -115,
	-115, -115, -115, -115, -115, -115, -115, -115, -115, -115,
	-115, -115, -115, -115, -115, -115, 79, 146, 152, -115,
	270, -66, 267, -119, -118, -114, -114, -147, 267, 267,
	267, -66, -114, -114, -114, 267, 8, -121, 265, -38,
	-38, -108, 87, -185, 55, -186, 47, 146, 148, 227,
	171, 45, 75, 178, 267, 267, -57, -57, 146, 75,
	146, 75, 68, 223, -38, -38, -42, -38, -38, -38,
	-68, -100, 266, 155, -18, 251, -56, -138, -38, -195,
	266, -192, -193, -40, 266, -48, -56, 155, -202, 241,
	-114, -66, -139, -139, -82, 231, 155, 123, -139, 266,
	-57, -135, 265, 8, 8, 267, 22, 22, -114, -123,
	267, 270, -114, -114, 267, -114, 6, -114, 267, 267,
	267, 267, -114, -211, -38, -114, 267, 267, -119, 98,
	79, 152, 266, -114, 267, 267, 270, 267, 267, 267,
	-202, -108, -38, -64, 148, 124, 266, -115, -42, -107,
	-219, 56, 207, 267, 267, 148, 148, -114, -147, -35,
	-35, 216, 216, 80, -56, 55, -75, -25, 266, 267,
	270, -41, -73, 47, -41, -114, 266, -56, 267, 267,
	-42, -203, -205, -38, -82, 266, -114, -139, -57, 267,
	265, 265, -114, -114, 267, -147, 267, -54, -204, 166,
	267, -115, 98, 266, -123, 267, -114, -186, -114, -52,
	266, 266, 178, -34, 47, -38, -38, 229, 147, 267,
	-38, -107, -138, -31, -64, -31, 267, -66, 267, -107,
	266, 270, 25, -57, 267, 267, -54, 37, -115, -123,
	267, 267, 267, -189, 137, -57, -57, -42, -30, 231,
	-64, 196, -110, -41, -54, -107, -56, -205, -207, 267,
	-208, 173, 188, -66, 267, -187, -190, -188, 155, 99,
	165, 199, 267, 267, -52, -114, -70, -31, 267, 267,
	267, -209, -210, 30, 224, 60, -114, -209, -188, 155,
	-190, 155, 229, 77, -189, -110, -107, -210, 169, 95,
	187, 169, 95, -191, 144, 181, 40, 196, -191, -187,
	22, 16, 148, 75, -210,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 0,
	48, 49, 50, 0, 0, 305, 0, 0, 275, -2,
	0, 0, 244, 0, 244, 244, 244, 307, 214, 304,
	-2, 315, 0, 0, 0, 313, 289, 0, 0, -2,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 64,
	0, 66, 67, 68, 69, 0, 78, 79, 80, 82,
	83, 84, 85, 86, 87, 88, 0, 91, 759, 793,
	804, 95, 105, 0, 855, -2, 109, 60, 708, 709,
	710, 725, 726, 727, 728, 729, 730, 731, 732, 733,
	734, 735, 736, 737, 738, 739, 740, 741, 742, 743,
	744, 745, 746, 747, 748, 749, 750, 751, 752, 753,
	754, 755, 756, 757, 758, 760, 761, 762, 763, 764,
	766, 767, 768, 769, 770, 771, 772, 773, 774, 775,
	776, 777, 778, 779, 780, 781, 782, 783, 784, 785,
	786, 787, 788, 789, 790, 791, 792, 794, 795, 796,
	797, 798, 799, 800, 801, 802, 803, 805, 806, 807,
	808, 809, 810, 811, 812, 813, 814, 815, 816, 817,
	818, 819, 820, 821, 822, 823, 824, 825, 826, 827,
	828, 829, 830, 831, 832, 833, 834, 835, 836, 837,
	838, 839, 840, 841, 842, 843, 844, 845, 846, 847,
	848, 849, 850, 851, 852, 853, 854, 856, 857, 858,
	859, 860, 138, 139, 0, 141, 152, 0, 150, 0,
	0, 148, 249, 243, 249, 240, 241, 242, 0, 306,
	0, 0, 0, 213, -2, 285, 286, -2, 0, 310,
	310, 310, 0, 0, 286, 0, 294, 781, 297, 691,
	759, 765, 793, 804, 855, 295, 671, 0, 312, 311,
	0, 290, 365, 0, 682, 335, 0, 2, 0, 837,
	0, 0, 837, 0, 0, 0, 371, 52, 837, 43,
	837, 678, 56, 837, 58, 0, 70, 72, 716, 717,
	718, 719, 859, 861, 862, 863, 864, 865, 866, 867,
	868, 869, 870, 871, 872, 873, 0, 0, 0, 92,
	93, 94, 96, 97, 0, 0, 0, 0, 0, 0,
	108, 133, 134, 61, 0, 0, 154, 0, 0, 144,
	0, 145, 0, 147, 238, 245, 246, 239, 43, 369,
	0, 837, 712, 251, 837, -2, 0, 281, 322, 323,
	0, 0, 0, 308, 309, 0, 0, 0, 277, 278,
	0, 296, 0, 0, 338, 670, 672, 676, 677, 451,
	0, 0, 0, 0, 0, 0, 530, 531, 532, 0,
	534, 535, 536, 832, 0, 540, 541, 851, 682, 694,
	695, 696, 697, 0, 0, 0, 702, 703, 704, 653,
	579, 550, -2, -2, 692, 393, 394, 395, 396, -2,
	861, 554, 556, 558, 559, 560, 561, 0, 833, 847,
	848, 854, 857, 858, 837, 844, 838, 828, 835, 843,
	746, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, 715,
	417, 418, 423, 424, 426, 338, 336, 366, 367, 0,
	683, 661, 654, 655, 0, 0, 0, 0, 667, 665,
	666, 20, 235, 22, 0, 235, 235, 0, 0, 0,
	0, 0, 375, 0, 254, 0, 372, 0, 0, 54,
	0, 41, 42, 0, 0, 0, 305, 0, 0, 75,
	0, 742, 680, 684, 687, 81, 0, 0, 0, 0,
	100, 120, 121, 122, 101, 103, 110, 112, 113, 114,
	123, 124, 125, 126, 207, 0, 209, 136, 137, 705,
	0, 102, 104, 106, 107, 127, 128, 0, 130, 131,
	132, 434, 0, 62, 720, 721, 722, 723, 724, 874,
	875, 876, 877, 878, 879, 880, 881, 882, 883, 884,
	885, 886, 887, 888, 889, 890, 891, 892, 893, 894,
	895, 896, 897, 898, 899, 900, 901, 902, 903, 904,
	905, 906, 907, 908, 909, 910, 911, 912, 913, 914,
	915, 916, 917, 918, 919, 920, 921, 922, 923, 924,
	925, 926, 927, 928, 929, 930, 931, 932, 933, 934,
	935, 936, 937, 938, 939, 940, 941, 942, 943, 944,
	945, 946, 947, 948, 949, 950, 951, 140, 142, 0,
	151, 143, 149, 146, 0, 0, 210, 0, 158, 0,
	0, 837, 711, 0, 284, 320, 321, 324, 327, 328,
	325, 451, 291, 292, 293, 316, 317, 224, 298, 0,
	0, 688, 375, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 664, 0, 0, 675, 455, 456, 457, 478,
	479, 0, -2, 611, 0, 537, 538, 539, 0, 0,
	-2, 0, 699, 448, 0, 0, 652, 581, 0, 0,
	0, 0, 0, 0, 0, 632, 638, 0, 0, 0,
	0, 0, 0, 0, 0, 407, 420, 430, 428, 427,
	409, 0, 408, 406, 0, 410, 0, 375, 0, 662,
	656, 0, 659, 660, 0, 669, 0, 0, 0, 0,
	234, 24, 837, 0, 34, 0, 0, 180, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 51, 0, 261, 256, 0, 0, 0, 338, 268,
	270, 271, 0, 0, 373, 53, 679, 43, 59, 57,
	65, 71, 0, 0, 76, 77, 685, 686, 0, 98,
	99, 250, 0, 117, 0, 119, 0, 208, 707, 706,
	448, 63, 153, 89, 247, 248, 370, 0, 157, 159,
	161, 162, 163, 712, 0, 0, 0, 0, 0, 326,
	329, 330, 0, 319, 222, 223, 305, 0, 690, 332,
	337, 339, 356, 356, 343, 0, 673, 452, 381, 382,
	383, 384, 385, 448, 388, 389, 390, 391, 392, 400,
	401, 402, 403, 404, 405, 414, 0, 399, 399, 399,
	411, 412, 415, 416, 421, 422, 432, 433, 431, 431,
	431, 429, 453, 0, 458, 459, 460, 461, 462, 463,
	464, 465, 466, -2, -2, -2, 470, 471, 472, -2,
	-2, -2, 476, 477, -2, 0, 0, 664, 0, 0,
	484, 0, 487, 489, 491, 0, 0, 0, 0, 663,
	501, 644, 0, 674, 486, 0, 0, 533, 0, 0,
	0, 617, 611, 618, 0, -2, 542, 315, 0, 0,
	0, 0, 700, 435, 436, 437, 438, 439, 440, 449,
	0, 651, 647, 0, 589, 0, 0, 0, 555, 557,
	0, 0, 0, 621, 622, 623, 624, 625, 626, 627,
	0, 0, 0, 0, 503, 0, 0, 0, 0, 851,
	0, 611, 637, 0, 0, 0, 0, 0, 611, 0,
	643, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 332, 368, 657, 0, 668, 23, 226, 0, 0,
	0, 26, 837, 166, 0, 0, 0, 0, 0, 237,
	35, 837, 43, 837, 43, 36, 21, 235, 225, 228,
	0, 374, 266, 0, 0, 258, 255, 375, 0, 0,
	0, 55, 73, 681, 74, 115, 116, 118, 111, 129,
	0, 155, 0, 0, 712, 0, 0, 0, 252, 318,
	0, 300, 301, 302, 303, 689, 334, 0, 0, 0,
	0, 0, 0, 362, 362, 362, 360, 341, 355, 0,
	354, 342, -2, 343, 0, 376, 378, 386, 0, 0,
	-2, 0, 0, 0, 502, -2, 485, 488, 490, 492,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 612,
	0, 615, 616, 0, -2, 0, 0, 314, 315, 315,
	315, 548, 0, 0, 0, 0, 0, 0, 0, 648,
	0, 0, 549, 0, 0, 0, 0, 0, 563, 0,
	564, 0, 0, 565, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 505, 506, 507, 0, 0,
	566, 635, 636, 0, 0, 0, 0, 0, 0, 571,
	0, 642, 0, 0, 0, 575, 576, 577, 0, 397,
	0, 413, 425, 334, 0, 0, 0, 0, 0, 164,
	179, 0, 0, 0, 0, 28, 0, 0, 0, 0,
	32, 0, 38, 0, 0, 0, 0, 253, 0, 264,
	0, 267, 269, 272, 0, 90, 160, 0, 0, 158,
	0, 0, 299, 583, 0, 0, 340, 0, 0, 0,
	0, 0, 357, 361, 358, 359, 352, 0, 345, 0,
	0, 0, 454, -2, 0, 0, 0, 0, -2, 0,
	613, 0, 0, 645, 0, 606, 0, -2, 612, 619,
	543, 0, 0, 0, 0, 441, 442, 443, 444, 445,
	446, 447, 0, 701, 646, 650, 0, 587, 588, 592,
	0, 0, 553, 0, 620, 629, 630, 504, 508, 509,
	510, 511, 512, 513, 514, 515, 516, -2, -2, -2,
	520, 521, 522, -2, -2, -2, 0, 0, 0, 631,
	0, 0, 609, 633, 634, 639, 640, 0, 568, 569,
	570, 641, 0, 0, 0, 419, 0, 583, 658, 230,
	232, 25, 0, 165, 0, 168, 0, 0, 171, 172,
	0, 0, 0, 0, 181, 188, 0, 0, 0, 40,
	0, 0, 236, 0, 43, 43, 227, 0, 0, 229,
	265, 0, 0, 0, 257, 0, 0, 215, 221, 221,
	0, 551, 552, 0, 0, 0, 0, 0, 287, 0,
	333, 331, 346, 0, 348, 0, 0, 0, 350, 0,
	0, 344, 379, 0, 0, 387, 0, 0, -2, 0,
	495, 0, -2, -2, 605, 612, 698, 315, 544, 546,
	547, 450, 649, 594, 591, 0, 578, 562, 628, 0,
	0, 0, 0, 612, 608, 567, 0, 573, 574, 398,
	288, 27, 0, 169, 170, 173, 0, 175, 190, 182,
	0, 185, 186, 183, 0, 29, 30, 39, 45, 31,
	37, 0, 0, 0, 0, 0, 273, 274, 0, 188,
	0, 224, 693, 0, 224, 0, 0, 0, 156, 188,
	0, 582, 584, 0, 347, 0, 364, 349, 0, 353,
	380, 377, -2, -2, 496, 614, 607, 0, 315, 0,
	580, -2, 0, 0, 0, 610, 0, 167, 0, 194,
	0, 0, 0, 47, 0, 231, 233, 0, 260, 375,
	263, 177, 216, 217, 220, 218, 221, 315, 188, 211,
	0, 0, 0, 0, 351, 545, 597, 0, -2, 0,
	528, 572, 174, 199, 0, 0, 0, 190, 33, 0,
	44, 0, 262, 224, 0, 178, 0, 585, 586, 363,
	0, 0, 0, 593, 529, 176, 195, 196, 0, 191,
	192, 193, 189, 187, 194, 46, 375, 219, 543, 188,
	590, 595, 598, -2, 807, 739, 0, 596, 197, 0,
	198, 0, 0, 0, 199, 259, 212, 0, 600, 601,
	602, 603, 604, 200, 0, 203, 204, 0, 201, 184,
	0, 202, 205, 206, 599,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 255, 3, 261, 256, 3,
	266, 267, 259, 257, 270, 258, 268, 260, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 272, 269,
	249, 251, 250, 3, 271, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 264, 3, 265, 254, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 253, 3, 263,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 252, 262,
}
var sqlTok3 = [...]int{
	0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:613
		{
			sqllex.(*scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:619
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:625
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 13:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:644
		{
			sqlVAL.union.val = sqlDollar[1].union.selectStmt()
		}
	case 19:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:653
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 20:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:659
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.qname(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 21:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:663
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.qname(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 22:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:669
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 23:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:673
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 24:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:680
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 25:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:685
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 26:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:690
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 27:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:695
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 28:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:699
		{
			unimplemented()
		}
	case 29:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:701
		{
			unimplemented()
		}
	case 30:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:703
		{
			unimplemented()
		}
	case 31:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:706
		{
			sqlVAL.union.val = &AlterTableDropColumn{columnKeyword: sqlDollar[2].union.bool(), IfExists: true, Column: sqlDollar[5].str}
		}
	case 32:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:711
		{
			sqlVAL.union.val = &AlterTableDropColumn{columnKeyword: sqlDollar[2].union.bool(), IfExists: false, Column: sqlDollar[3].str}
		}
	case 33:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:716
		{
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:719
		{
			sqlVAL.union.val = &AlterTableAddConstraint{ConstraintDef: sqlDollar[2].union.constraintDef()}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:723
		{
			unimplemented()
		}
	case 36:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:725
		{
			unimplemented()
		}
	case 37:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:728
		{
			sqlVAL.union.val = &AlterTableDropConstraint{IfExists: true, Constraint: sqlDollar[5].str}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:733
		{
			sqlVAL.union.val = &AlterTableDropConstraint{IfExists: false, Constraint: sqlDollar[3].str}
		}
	case 39:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:738
		{
			unimplemented()
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:739
		{
			unimplemented()
		}
	case 41:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:742
		{
			unimplemented()
		}
	case 42:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:743
		{
			unimplemented()
		}
	case 43:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:744
		{
		}
	case 44:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:747
		{
			unimplemented()
		}
	case 45:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:748
		{
		}
	case 46:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:751
		{
			unimplemented()
		}
	case 47:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:752
		{
		}
	case 51:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:763
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr())}
		}
	case 52:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:770
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 53:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:774
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 54:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:778
		{
			sqlVAL.union.val = &DropIndex{Names: sqlDollar[3].union.qnames(), IfExists: false}
		}
	case 55:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:782
		{
			sqlVAL.union.val = &DropIndex{Names: sqlDollar[5].union.qnames(), IfExists: true}
		}
	case 56:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:786
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.qnames(), IfExists: false}
		}
	case 57:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:790
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.qnames(), IfExists: true}
		}
	case 58:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:796
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:800
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 60:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:806
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:810
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:816
		{
			sqlVAL.union.val = Indirection{NameIndirection(sqlDollar[2].str)}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:820
		{
			sqlVAL.union.val = append(sqlDollar[1].union.indirect(), NameIndirection(sqlDollar[3].str))
		}
	case 64:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:827
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:831
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 66:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:837
		{
			sqlVAL.union.val = sqlDollar[1].union.selectStmt()
		}
	case 70:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:846
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 71:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:850
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 73:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:860
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: NameList(sqlDollar[6].union.strs()), Targets: sqlDollar[4].union.targetList()}
		}
	case 74:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:867
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: NameList(sqlDollar[6].union.strs()), Targets: sqlDollar[4].union.targetList()}
		}
	case 75:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:874
		{
			sqlVAL.union.val = TargetList{Tables: QualifiedNames(sqlDollar[1].union.qnames())}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:878
		{
			sqlVAL.union.val = TargetList{Tables: QualifiedNames(sqlDollar[2].union.qnames())}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:882
		{
			sqlVAL.union.val = TargetList{Databases: NameList(sqlDollar[2].union.strs())}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:889
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:892
		{
		}
	case 80:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:896
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:900
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 82:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:907
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 83:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:911
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 84:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:915
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 85:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:919
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 86:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:923
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 87:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:927
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 88:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:931
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 89:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:939
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:943
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 91:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:951
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 92:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:955
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 93:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:959
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 94:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:965
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 96:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:972
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:976
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:980
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:984
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:991
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:997
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname(), Values: sqlDollar[3].union.exprs()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1001
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname(), Values: sqlDollar[3].union.exprs()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1005
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1009
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1016
		{
			unimplemented()
		}
	case 107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1019
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1022
		{
			unimplemented()
		}
	case 110:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1029
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1033
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1041
		{
			sqlVAL.union.val = ValArg{name: sqlDollar[1].str}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1047
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 116:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1051
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1055
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1059
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1063
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1069
		{
			sqlVAL.union.val = Low
		}
	case 121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1073
		{
			sqlVAL.union.val = Normal
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1077
		{
			sqlVAL.union.val = High
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1083
		{
			sqlVAL.union.val = DBool(true)
		}
	case 124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1087
		{
			sqlVAL.union.val = DBool(false)
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1091
		{
			sqlVAL.union.val = DString(sqlDollar[1].str)
		}
	case 127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1106
		{
			sqlVAL.union.val = DString(sqlDollar[1].str)
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1110
		{
			sqlVAL.union.val = DString(sqlDollar[1].str)
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1114
		{
			expr := &CastExpr{Expr: DString(sqlDollar[2].str), Type: sqlDollar[1].union.colType()}
			var ctx EvalContext
			d, err := expr.Eval(ctx)
			if err != nil {
				sqllex.Error("cannot evaluate to an interval type")
				return 1
			}
			if _, ok := d.(DInterval); !ok {
				panic("not an interval type")
			}
			sqlVAL.union.val = d
		}
	case 131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1129
		{
			sqlVAL.union.val = DString(sqlDollar[1].str)
		}
	case 132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1133
		{
			sqlVAL.union.val = DString(sqlDollar[1].str)
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1138
		{
			unimplemented()
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1139
		{
			unimplemented()
		}
	case 135:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1140
		{
		}
	case 136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1144
		{
			sqlVAL.union.val = DString(sqlDollar[1].str)
		}
	case 137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1148
		{
			sqlVAL.union.val = DString(sqlDollar[1].str)
		}
	case 138:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1154
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1158
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1162
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.qname()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1166
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1170
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.strs()}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1174
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1178
		{
			sqlVAL.union.val = &ShowTables{Name: sqlDollar[3].union.qname()}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1182
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1186
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1190
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1194
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 149:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1200
		{
			sqlVAL.union.val = sqlDollar[2].union.qname()
		}
	case 150:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1204
		{
			sqlVAL.union.val = (*QualifiedName)(nil)
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1210
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 152:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1215
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1221
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 154:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1225
		{
			sqlVAL.union.val = []string(nil)
		}
	case 155:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1232
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.qname(), IfNotExists: false, Defs: sqlDollar[5].union.tblDefs()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1236
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.qname(), IfNotExists: true, Defs: sqlDollar[8].union.tblDefs()}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1243
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1249
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1253
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1259
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1264
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1270
		{
			sqlVAL.union.val = newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1276
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 166:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1280
		{
			sqlVAL.union.val = []ColumnQualification(nil)
		}
	case 167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1286
		{
			sqlVAL.union.val = sqlDollar[3].union.colQual()
		}
	case 169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1290
		{
			unimplemented()
		}
	case 170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1306
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1310
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1314
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1318
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1321
		{
			unimplemented()
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1323
		{
			if ContainsVars(sqlDollar[2].union.expr()) {
				sqllex.Error("default expression contains a variable")
				return 1
			}
			if containsSubquery(sqlDollar[2].union.expr()) {
				sqllex.Error("default expression contains a subquery")
				return 1
			}
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1334
		{
			unimplemented()
		}
	case 177:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1338
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.idxElems(),
				Storing: sqlDollar[6].union.strs(),
			}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1346
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:    Name(sqlDollar[3].str),
					Columns: sqlDollar[5].union.idxElems(),
					Storing: sqlDollar[7].union.strs(),
				},
			}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1361
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1366
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 181:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1371
		{
			unimplemented()
		}
	case 182:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1373
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[3].union.strs()),
					Storing: sqlDollar[5].union.strs(),
				},
			}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1382
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[4].union.strs()),
				},
				PrimaryKey: true,
			}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1391
		{
			unimplemented()
		}
	case 187:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1408
		{
			sqlVAL.union.val = sqlDollar[3].union.strs()
		}
	case 188:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1412
		{
			sqlVAL.union.val = []string(nil)
		}
	case 189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1418
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 190:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1422
		{
			sqlVAL.union.val = []string(nil)
		}
	case 191:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1427
		{
			unimplemented()
		}
	case 192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1428
		{
			unimplemented()
		}
	case 193:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1429
		{
			unimplemented()
		}
	case 194:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1430
		{
		}
	case 195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1437
		{
			unimplemented()
		}
	case 196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1438
		{
			unimplemented()
		}
	case 197:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1439
		{
			unimplemented()
		}
	case 198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1440
		{
			unimplemented()
		}
	case 199:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1441
		{
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1444
		{
			unimplemented()
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1447
		{
			unimplemented()
		}
	case 202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1450
		{
			unimplemented()
		}
	case 203:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1451
		{
			unimplemented()
		}
	case 204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1452
		{
			unimplemented()
		}
	case 205:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1453
		{
			unimplemented()
		}
	case 206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1454
		{
			unimplemented()
		}
	case 207:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1458
		{
			sqlVAL.union.val = NumVal(sqlDollar[1].str)
		}
	case 208:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1462
		{
			sqlVAL.union.val = NumVal("-" + sqlDollar[2].str)
		}
	case 209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1466
		{
			sqlVAL.union.val = DInt(sqlDollar[1].union.ival().Val)
		}
	case 210:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1473
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.qnames()}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1480
		{
			sqlVAL.union.val = &CreateIndex{
				Name:    Name(sqlDollar[4].str),
				Table:   sqlDollar[6].union.qname(),
				Unique:  sqlDollar[2].union.bool(),
				Columns: sqlDollar[8].union.idxElems(),
				Storing: sqlDollar[10].union.strs(),
			}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql.y:1490
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.qname(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.strs(),
			}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1503
		{
			sqlVAL.union.val = true
		}
	case 214:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1507
		{
			sqlVAL.union.val = false
		}
	case 215:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1513
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1517
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 217:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1526
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1529
		{
			unimplemented()
		}
	case 219:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1530
		{
			unimplemented()
		}
	case 220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1533
		{
			unimplemented()
		}
	case 221:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1534
		{
		}
	case 222:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1538
		{
			sqlVAL.union.val = Ascending
		}
	case 223:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1542
		{
			sqlVAL.union.val = Descending
		}
	case 224:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1546
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 225:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1553
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 226:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1557
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.qname(), NewName: sqlDollar[6].union.qname(), IfExists: false}
		}
	case 227:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1561
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.qname(), NewName: sqlDollar[8].union.qname(), IfExists: true}
		}
	case 228:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1565
		{
			sqlVAL.union.val = &RenameIndex{Name: sqlDollar[3].union.qname(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 229:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1569
		{
			sqlVAL.union.val = &RenameIndex{Name: sqlDollar[5].union.qname(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 230:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1573
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.qname(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 231:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1577
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.qname(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1581
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 233:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1585
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1591
		{
			sqlVAL.union.val = true
		}
	case 235:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1595
		{
			sqlVAL.union.val = false
		}
	case 236:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1600
		{
		}
	case 237:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1601
		{
		}
	case 238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1606
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 239:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1610
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1614
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 241:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1618
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1622
		{
			sqlVAL.union.val = &RollbackTransaction{}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1627
		{
		}
	case 244:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1628
		{
		}
	case 245:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1632
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1636
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1640
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1644
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 249:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1648
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1654
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1660
		{
			sqlVAL.union.val = &CreateDatabase{Name: Name(sqlDollar[3].str)}
		}
	case 252:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1664
		{
			sqlVAL.union.val = &CreateDatabase{IfNotExists: true, Name: Name(sqlDollar[6].str)}
		}
	case 253:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1670
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.qname()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.selExprs()
		}
	case 256:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1687
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.selectStmt()}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1691
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.qnames(), Rows: sqlDollar[4].union.selectStmt()}
		}
	case 258:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1695
		{
			sqlVAL.union.val = &Insert{}
		}
	case 259:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1702
		{
			unimplemented()
		}
	case 260:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1703
		{
			unimplemented()
		}
	case 261:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1704
		{
		}
	case 262:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1707
		{
			unimplemented()
		}
	case 263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1708
		{
			unimplemented()
		}
	case 264:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1709
		{
		}
	case 265:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1713
		{
			sqlVAL.union.val = sqlDollar[2].union.selExprs()
		}
	case 266:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1717
		{
			sqlVAL.union.val = SelectExprs(nil)
		}
	case 267:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1724
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr())}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1730
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1734
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1744
		{
			sqlVAL.union.val = &UpdateExpr{Names: QualifiedNames{sqlDollar[1].union.qname()}, Expr: sqlDollar[3].union.expr()}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1756
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.qnames(), Expr: Tuple(sqlDollar[5].union.exprs())}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1760
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.qnames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1807
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.selectStmt()}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1811
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.selectStmt()}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1827
		{
			sqlVAL.union.val = sqlDollar[1].union.selectStmt()
			if s, ok := sqlVAL.union.val.(*Select); ok {
				s.OrderBy = sqlDollar[2].union.orderBy()
			}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1834
		{
			sqlVAL.union.val = sqlDollar[1].union.selectStmt()
			if s, ok := sqlVAL.union.val.(*Select); ok {
				s.OrderBy = sqlDollar[2].union.orderBy()
				s.Limit = sqlDollar[3].union.limit()
			}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1842
		{
			sqlVAL.union.val = sqlDollar[2].union.selectStmt()
		}
	case 283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1846
		{
			sqlVAL.union.val = sqlDollar[2].union.selectStmt()
			if s, ok := sqlVAL.union.val.(*Select); ok {
				s.OrderBy = sqlDollar[3].union.orderBy()
			}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1853
		{
			sqlVAL.union.val = sqlDollar[2].union.selectStmt()
			if s, ok := sqlVAL.union.val.(*Select); ok {
				s.OrderBy = sqlDollar[3].union.orderBy()
				s.Limit = sqlDollar[4].union.limit()
			}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1891
		{
			sqlVAL.union.val = &Select{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.tblExprs(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1903
		{
			sqlVAL.union.val = &Select{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.tblExprs(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1915
		{
			sqlVAL.union.val = &Select{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        TableExprs{&AliasedTableExpr{Expr: sqlDollar[2].union.qname()}},
				tableSelect: true,
			}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1923
		{
			sqlVAL.union.val = &Union{
				Type:  astUnion,
				Left:  sqlDollar[1].union.selectStmt(),
				Right: sqlDollar[4].union.selectStmt(),
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1932
		{
			sqlVAL.union.val = &Union{
				Type:  astIntersect,
				Left:  sqlDollar[1].union.selectStmt(),
				Right: sqlDollar[4].union.selectStmt(),
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1941
		{
			sqlVAL.union.val = &Union{
				Type:  astExcept,
				Left:  sqlDollar[1].union.selectStmt(),
				Right: sqlDollar[4].union.selectStmt(),
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1959
		{
			unimplemented()
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1960
		{
			unimplemented()
		}
	case 296:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1961
		{
			unimplemented()
		}
	case 297:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1964
		{
			unimplemented()
		}
	case 298:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1965
		{
			unimplemented()
		}
	case 299:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1968
		{
			unimplemented()
		}
	case 300:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1972
		{
			sqlVAL.union.val = sqlDollar[1].union.selectStmt()
		}
	case 304:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1980
		{
			unimplemented()
		}
	case 305:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1981
		{
		}
	case 306:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1984
		{
		}
	case 307:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1985
		{
		}
	case 308:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1989
		{
			sqlVAL.union.val = true
		}
	case 309:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1993
		{
			sqlVAL.union.val = false
		}
	case 310:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1997
		{
			sqlVAL.union.val = false
		}
	case 311:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2003
		{
			sqlVAL.union.val = true
		}
	case 312:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2008
		{
		}
	case 313:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2009
		{
		}
	case 314:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2013
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 315:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2017
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2023
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 317:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2029
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2033
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2039
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2047
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2056
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2067
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2080
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2087
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2094
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 329:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2108
		{
		}
	case 330:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2109
		{
		}
	case 331:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2135
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 332:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2139
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2145
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 334:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2149
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 335:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2155
		{
			sqlVAL.union.val = Values{Tuple(sqlDollar[2].union.exprs())}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2159
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selectStmt().(Values), Tuple(sqlDollar[3].union.exprs()))
		}
	case 337:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2169
		{
			sqlVAL.union.val = sqlDollar[2].union.tblExprs()
		}
	case 338:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2173
		{
			sqlVAL.union.val = TableExprs(nil)
		}
	case 339:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2179
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2183
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 341:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2190
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: sqlDollar[2].union.aliasClause()}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2194
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, As: sqlDollar[2].union.aliasClause()}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2198
		{
			unimplemented()
		}
	case 345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2216
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2220
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2224
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2228
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2232
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astNaturalJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr()}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2236
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astNaturalJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2242
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: NameList(sqlDollar[4].union.strs())}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2246
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2250
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: NameList(sqlDollar[3].union.strs())}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2254
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2261
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2267
		{
			sqlVAL.str = astFullJoin
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2271
		{
			sqlVAL.str = astLeftJoin
		}
	case 359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2275
		{
			sqlVAL.str = astRightJoin
		}
	case 360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2279
		{
			sqlVAL.str = astInnerJoin
		}
	case 361:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2285
		{
		}
	case 362:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2286
		{
		}
	case 363:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2297
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: NameList(sqlDollar[3].union.strs())}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2301
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 365:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2307
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 366:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2311
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 367:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2315
		{
			sqlVAL.union.val = sqlDollar[2].union.qname()
		}
	case 368:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2319
		{
			sqlVAL.union.val = sqlDollar[3].union.qname()
		}
	case 369:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2325
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2329
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 371:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2342
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname()}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2346
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2350
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2356
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 375:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2360
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2372
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 377:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2376
		{
			unimplemented()
		}
	case 378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2377
		{
			unimplemented()
		}
	case 379:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2380
		{
			unimplemented()
		}
	case 380:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2381
		{
			unimplemented()
		}
	case 381:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2382
		{
		}
	case 387:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2390
		{
			unimplemented()
		}
	case 388:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2392
		{
			sqlVAL.union.val = &BytesType{Name: "BLOB"}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2396
		{
			sqlVAL.union.val = &BytesType{Name: "BYTES"}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2400
		{
			sqlVAL.union.val = &BytesType{Name: "BYTEA"}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2404
		{
			sqlVAL.union.val = &StringType{Name: "TEXT"}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2408
		{
			sqlVAL.union.val = &StringType{Name: "STRING"}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2429
		{
			sqlVAL.union.val = &DecimalType{Prec: int(sqlDollar[2].union.ival().Val)}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2433
		{
			sqlVAL.union.val = &DecimalType{Prec: int(sqlDollar[2].union.ival().Val), Scale: int(sqlDollar[4].union.ival().Val)}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2437
		{
			sqlVAL.union.val = &DecimalType{}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2444
		{
			sqlVAL.union.val = &IntType{Name: "INT"}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2448
		{
			sqlVAL.union.val = &IntType{Name: "INT64"}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2452
		{
			sqlVAL.union.val = &IntType{Name: "INTEGER"}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2456
		{
			sqlVAL.union.val = &IntType{Name: "SMALLINT"}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2460
		{
			sqlVAL.union.val = &IntType{Name: "BIGINT"}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2464
		{
			sqlVAL.union.val = &FloatType{Name: "REAL"}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2468
		{
			sqlVAL.union.val = &FloatType{Name: "FLOAT", Prec: int(sqlDollar[2].union.ival().Val)}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2472
		{
			sqlVAL.union.val = &FloatType{Name: "DOUBLE PRECISION"}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2476
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			sqlVAL.union.val.(*DecimalType).Name = "DECIMAL"
		}
	case 409:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2481
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			sqlVAL.union.val.(*DecimalType).Name = "DEC"
		}
	case 410:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2486
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			sqlVAL.union.val.(*DecimalType).Name = "NUMERIC"
		}
	case 411:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2491
		{
			sqlVAL.union.val = &BoolType{Name: "BOOLEAN"}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2495
		{
			sqlVAL.union.val = &BoolType{Name: "BOOL"}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2501
		{
			sqlVAL.union.val = sqlDollar[2].union.ival()
		}
	case 414:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2505
		{
			sqlVAL.union.val = IntVal{}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2523
		{
			sqlVAL.union.val = &IntType{Name: "BIT", N: int(sqlDollar[4].union.ival().Val)}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2529
		{
			sqlVAL.union.val = &IntType{Name: "BIT"}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2545
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
			sqlVAL.union.val.(*StringType).N = int(sqlDollar[3].union.ival().Val)
		}
	case 426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2552
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 427:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2558
		{
			sqlVAL.union.val = &StringType{Name: "CHAR"}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2562
		{
			sqlVAL.union.val = &StringType{Name: "CHAR"}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2566
		{
			sqlVAL.union.val = &StringType{Name: "VARCHAR"}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2571
		{
		}
	case 431:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2572
		{
		}
	case 432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2577
		{
			sqlVAL.union.val = &DateType{}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2581
		{
			sqlVAL.union.val = &TimestampType{}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2586
		{
			sqlVAL.union.val = &IntervalType{}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2591
		{
			unimplemented()
		}
	case 436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2592
		{
			unimplemented()
		}
	case 437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2593
		{
			unimplemented()
		}
	case 438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2594
		{
			unimplemented()
		}
	case 439:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2595
		{
			unimplemented()
		}
	case 440:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2596
		{
			unimplemented()
		}
	case 441:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2597
		{
			unimplemented()
		}
	case 442:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2598
		{
			unimplemented()
		}
	case 443:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2599
		{
			unimplemented()
		}
	case 444:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2600
		{
			unimplemented()
		}
	case 445:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2601
		{
			unimplemented()
		}
	case 446:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2602
		{
			unimplemented()
		}
	case 447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2603
		{
			unimplemented()
		}
	case 448:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2604
		{
		}
	case 449:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2607
		{
			unimplemented()
		}
	case 450:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2608
		{
			unimplemented()
		}
	case 452:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2632
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2635
		{
			unimplemented()
		}
	case 454:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2636
		{
			unimplemented()
		}
	case 455:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2645
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2649
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2653
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2657
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2661
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2665
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2669
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2673
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2677
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2681
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2685
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2689
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2693
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2697
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2701
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2705
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2709
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2713
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2717
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2721
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2725
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2729
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2733
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2737
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2741
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2745
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2749
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2753
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2757
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2761
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2765
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2768
		{
			unimplemented()
		}
	case 487:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2770
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DBool(true)}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2774
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DBool(true)}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2778
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DBool(false)}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2782
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DBool(false)}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2786
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2790
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2794
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2798
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2802
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2806
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2810
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2814
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2818
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2822
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2826
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2830
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2847
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2851
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2855
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2859
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2863
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2867
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2871
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2875
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2879
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2883
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2887
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2891
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2895
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2899
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2903
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2907
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2911
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2915
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2919
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2923
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2927
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2931
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2935
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2939
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2943
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2947
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2959
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 532:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2964
		{
			sqlVAL.union.val = ValArg{name: sqlDollar[1].str}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2968
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2974
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2978
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2982
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2988
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 540:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2992
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 541:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2996
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3004
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname()}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3008
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3011
		{
			unimplemented()
		}
	case 545:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3012
		{
			unimplemented()
		}
	case 546:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3014
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Type: All, Exprs: sqlDollar[4].union.exprs()}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3018
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Type: Distinct, Exprs: sqlDollar[4].union.exprs()}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3022
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Exprs: Exprs{StarExpr()}}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3035
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 550:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3039
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 551:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3048
		{
			unimplemented()
		}
	case 552:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3049
		{
			unimplemented()
		}
	case 553:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3053
		{
			unimplemented()
		}
	case 554:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3055
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3059
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3063
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3067
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3070
		{
			unimplemented()
		}
	case 559:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3071
		{
			unimplemented()
		}
	case 560:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3072
		{
			unimplemented()
		}
	case 561:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3073
		{
			unimplemented()
		}
	case 562:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3075
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3079
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3083
		{
			sqlVAL.union.val = &OverlayExpr{FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3087
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "STRPOS"}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3091
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3094
		{
			unimplemented()
		}
	case 568:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3096
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3100
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "LTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3104
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "RTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3108
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3112
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3116
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3120
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3124
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3128
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3132
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3138
		{
			unimplemented()
		}
	case 579:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3139
		{
		}
	case 580:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3142
		{
			unimplemented()
		}
	case 581:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3143
		{
		}
	case 582:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3147
		{
			unimplemented()
		}
	case 583:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3148
		{
		}
	case 584:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3151
		{
			unimplemented()
		}
	case 585:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3152
		{
			unimplemented()
		}
	case 586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3155
		{
			unimplemented()
		}
	case 587:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3158
		{
			unimplemented()
		}
	case 588:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3159
		{
			unimplemented()
		}
	case 589:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3160
		{
		}
	case 590:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3164
		{
			unimplemented()
		}
	case 591:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3175
		{
			unimplemented()
		}
	case 592:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3176
		{
		}
	case 593:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3179
		{
			unimplemented()
		}
	case 594:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3180
		{
		}
	case 595:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3188
		{
			unimplemented()
		}
	case 596:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3189
		{
			unimplemented()
		}
	case 597:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3190
		{
		}
	case 598:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3193
		{
			unimplemented()
		}
	case 599:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3194
		{
			unimplemented()
		}
	case 600:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3200
		{
			unimplemented()
		}
	case 601:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3201
		{
			unimplemented()
		}
	case 602:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3202
		{
			unimplemented()
		}
	case 603:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3203
		{
			unimplemented()
		}
	case 604:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3204
		{
			unimplemented()
		}
	case 605:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3215
		{
			sqlVAL.union.val = Row(sqlDollar[3].union.exprs())
		}
	case 606:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3219
		{
			sqlVAL.union.val = Row(nil)
		}
	case 607:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3223
		{
			sqlVAL.union.val = Tuple(append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr()))
		}
	case 608:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3229
		{
			sqlVAL.union.val = Row(sqlDollar[3].union.exprs())
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3233
		{
			sqlVAL.union.val = Row(nil)
		}
	case 610:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3239
		{
			sqlVAL.union.val = Tuple(append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr()))
		}
	case 611:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3280
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3284
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 613:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3290
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3294
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3300
		{
			sqlVAL.union.val = Array(sqlDollar[2].union.exprs())
		}
	case 616:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3304
		{
			sqlVAL.union.val = Array(sqlDollar[2].union.exprs())
		}
	case 617:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3308
		{
			sqlVAL.union.val = Array(nil)
		}
	case 618:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3314
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3318
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3324
		{
			sqlVAL.union.val = Exprs{DString(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3346
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3350
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3356
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 631:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3363
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3367
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3384
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3388
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3392
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3396
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), DInt(1), sqlDollar[2].union.expr()}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3400
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 638:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3404
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 639:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3410
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 640:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3416
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3422
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 642:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3426
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 643:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3430
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 644:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3436
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3440
		{
			sqlVAL.union.val = Tuple(sqlDollar[2].union.exprs())
		}
	case 646:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3451
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3458
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3462
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 649:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3468
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3474
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 651:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3478
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 653:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3485
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 654:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3491
		{
			sqlVAL.union.val = sqlDollar[1].union.indirectElem()
		}
	case 655:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3495
		{
			sqlVAL.union.val = sqlDollar[1].union.indirectElem()
		}
	case 656:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3499
		{
			sqlVAL.union.val = IndexIndirection(sqlDollar[2].str)
		}
	case 657:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3503
		{
			sqlVAL.union.val = &ArrayIndirection{Begin: sqlDollar[2].union.expr()}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3507
		{
			sqlVAL.union.val = &ArrayIndirection{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3513
		{
			sqlVAL.union.val = NameIndirection(sqlDollar[2].str)
		}
	case 660:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3519
		{
			sqlVAL.union.val = qualifiedStar
		}
	case 661:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3525
		{
			sqlVAL.union.val = Indirection{sqlDollar[1].union.indirectElem()}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3529
		{
			sqlVAL.union.val = append(sqlDollar[1].union.indirect(), sqlDollar[2].union.indirectElem())
		}
	case 663:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3534
		{
		}
	case 664:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3535
		{
		}
	case 666:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3544
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3550
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3554
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 669:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3563
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 671:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3571
		{
			sqlVAL.union.val = SelectExprs(nil)
		}
	case 672:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3577
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3581
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3587
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3596
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3600
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3604
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 678:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3612
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3616
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 680:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3622
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3626
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 682:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3637
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3641
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3652
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3656
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: Indirection{sqlDollar[2].union.indirectElem()}}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3660
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: Indirection{sqlDollar[2].union.indirectElem()}}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3664
		{
			sqlVAL.union.val = &QualifiedName{Indirect: Indirection{unqualifiedStar}}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3670
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3674
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 690:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3680
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 691:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3683
		{
		}
	case 692:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3693
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3697
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3704
		{
			sqlVAL.union.val = &IntVal{Val: sqlDollar[1].union.ival().Val, Str: sqlDollar[1].union.ival().Str}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3708
		{
			sqlVAL.union.val = NumVal(sqlDollar[1].str)
		}
	case 696:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3712
		{
			sqlVAL.union.val = DString(sqlDollar[1].str)
		}
	case 697:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3716
		{
			sqlVAL.union.val = DBytes(sqlDollar[1].str)
		}
	case 698:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3719
		{
			unimplemented()
		}
	case 699:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3721
		{
			sqlVAL.union.val = &CastExpr{Expr: DString(sqlDollar[2].str), Type: sqlDollar[1].union.colType()}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3725
		{
			sqlVAL.union.val = &CastExpr{Expr: DString(sqlDollar[2].str), Type: sqlDollar[1].union.colType()}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3729
		{
			sqlVAL.union.val = &CastExpr{Expr: DString(sqlDollar[5].str), Type: sqlDollar[1].union.colType()}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3733
		{
			sqlVAL.union.val = DBool(true)
		}
	case 703:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3737
		{
			sqlVAL.union.val = DBool(false)
		}
	case 704:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3741
		{
			sqlVAL.union.val = DNull
		}
	case 706:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3748
		{
			sqlVAL.union.val = sqlDollar[2].union.ival()
		}
	case 707:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3752
		{
			sqlVAL.union.val = IntVal{Val: -sqlDollar[2].union.ival().Val, Str: "-" + sqlDollar[2].union.ival().Str}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3774
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
