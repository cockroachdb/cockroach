// Code generated by go yacc.
//line sql.y:21
package parser

import __yyfmt__ "fmt"

//line sql.y:21
import (
	"errors"

	"github.com/cockroachdb/cockroach/sql/privilege"
)

var errUnimplemented = errors.New("unimplemented")

func unimplemented() {
	panic(errUnimplemented)
}

//line sql.y:37

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new sytax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in two forms, depending on the
// type of the value being accessed. Values and pointers are directly
// type asserted from the empty interface, meaning that they will panic
// if the type assertion is incorrect. Interfaces are handled differently
// because a nil instance of an interface inserted into the empty interface
// becomes a nil instance of the empty interface and therefore will fail a
// direct type assertion. Instead, a guarded type assertion must be used,
// which returns nil if the type assertion fails.
func (u *sqlSymUnion) ival() IntVal {
	return u.val.(IntVal)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) qname() *QualifiedName {
	return u.val.(*QualifiedName)
}
func (u *sqlSymUnion) qnames() QualifiedNames {
	return u.val.(QualifiedNames)
}
func (u *sqlSymUnion) indirectElem() IndirectionElem {
	if indirectElem, ok := u.val.(IndirectionElem); ok {
		return indirectElem
	}
	return nil
}
func (u *sqlSymUnion) indirect() Indirection {
	return u.val.(Indirection)
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	if selectStmt, ok := u.val.(*Select); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	if selectStmt, ok := u.val.(SelectStatement); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	if constraintDef, ok := u.val.(ConstraintTableDef); ok {
		return constraintDef
	}
	return nil
}
func (u *sqlSymUnion) tblDef() TableDef {
	if tblDef, ok := u.val.(TableDef); ok {
		return tblDef
	}
	return nil
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() ColumnQualification {
	if colQual, ok := u.val.(ColumnQualification); ok {
		return colQual
	}
	return nil
}
func (u *sqlSymUnion) colQuals() []ColumnQualification {
	return u.val.([]ColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retExprs() ReturningExprs {
	return ReturningExprs(u.val.(SelectExprs))
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	if tblExpr, ok := u.val.(TableExpr); ok {
		return tblExpr
	}
	return nil
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	if joinCond, ok := u.val.(JoinCond); ok {
		return joinCond
	}
	return nil
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	if alterTableCmd, ok := u.val.(AlterTableCmd); ok {
		return alterTableCmd
	}
	return nil
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}

//line sql.y:250
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const FCONST = 57347
const SCONST = 57348
const BCONST = 57349
const ICONST = 57350
const PARAM = 57351
const TYPECAST = 57352
const DOT_DOT = 57353
const LESS_EQUALS = 57354
const GREATER_EQUALS = 57355
const NOT_EQUALS = 57356
const ERROR = 57357
const ACTION = 57358
const ADD = 57359
const ALL = 57360
const ALTER = 57361
const ANALYSE = 57362
const ANALYZE = 57363
const AND = 57364
const ANY = 57365
const ARRAY = 57366
const AS = 57367
const ASC = 57368
const ASYMMETRIC = 57369
const AT = 57370
const BEGIN = 57371
const BETWEEN = 57372
const BIGINT = 57373
const BIT = 57374
const BLOB = 57375
const BOOL = 57376
const BOOLEAN = 57377
const BOTH = 57378
const BY = 57379
const BYTEA = 57380
const BYTES = 57381
const CASCADE = 57382
const CASE = 57383
const CAST = 57384
const CHAR = 57385
const CHARACTER = 57386
const CHARACTERISTICS = 57387
const CHECK = 57388
const COALESCE = 57389
const COLLATE = 57390
const COLLATION = 57391
const COLUMN = 57392
const COLUMNS = 57393
const COMMIT = 57394
const COMMITTED = 57395
const CONCAT = 57396
const CONFLICT = 57397
const CONSTRAINT = 57398
const COVERING = 57399
const CREATE = 57400
const CROSS = 57401
const CUBE = 57402
const CURRENT = 57403
const CURRENT_CATALOG = 57404
const CURRENT_DATE = 57405
const CURRENT_ROLE = 57406
const CURRENT_TIME = 57407
const CURRENT_TIMESTAMP = 57408
const CURRENT_USER = 57409
const CYCLE = 57410
const DATA = 57411
const DATABASE = 57412
const DATABASES = 57413
const DATE = 57414
const DAY = 57415
const DEC = 57416
const DECIMAL = 57417
const DEFAULT = 57418
const DEFERRABLE = 57419
const DELETE = 57420
const DESC = 57421
const DISTINCT = 57422
const DO = 57423
const DOUBLE = 57424
const DROP = 57425
const ELSE = 57426
const END = 57427
const ESCAPE = 57428
const EXCEPT = 57429
const EXISTS = 57430
const EXPLAIN = 57431
const EXTRACT = 57432
const FALSE = 57433
const FETCH = 57434
const FILTER = 57435
const FIRST = 57436
const FLOAT = 57437
const FOLLOWING = 57438
const FOR = 57439
const FOREIGN = 57440
const FROM = 57441
const FULL = 57442
const GRANT = 57443
const GRANTS = 57444
const GREATEST = 57445
const GROUP = 57446
const GROUPING = 57447
const HAVING = 57448
const HIGH = 57449
const HOUR = 57450
const IF = 57451
const IFNULL = 57452
const IN = 57453
const INDEX = 57454
const INDEXES = 57455
const INITIALLY = 57456
const INNER = 57457
const INSERT = 57458
const INT = 57459
const INT64 = 57460
const INTEGER = 57461
const INTERSECT = 57462
const INTERVAL = 57463
const INTO = 57464
const IS = 57465
const ISOLATION = 57466
const JOIN = 57467
const KEY = 57468
const KEYS = 57469
const LATERAL = 57470
const LEADING = 57471
const LEAST = 57472
const LEFT = 57473
const LEVEL = 57474
const LIKE = 57475
const LIMIT = 57476
const LOCAL = 57477
const LOCALTIME = 57478
const LOCALTIMESTAMP = 57479
const LOW = 57480
const LSHIFT = 57481
const MATCH = 57482
const MINUTE = 57483
const MONTH = 57484
const NAME = 57485
const NAMES = 57486
const NATURAL = 57487
const NEXT = 57488
const NO = 57489
const NORMAL = 57490
const NOT = 57491
const NOTHING = 57492
const NULL = 57493
const NULLIF = 57494
const NULLS = 57495
const NUMERIC = 57496
const OF = 57497
const OFF = 57498
const OFFSET = 57499
const ON = 57500
const ONLY = 57501
const OR = 57502
const ORDER = 57503
const ORDINALITY = 57504
const OUT = 57505
const OUTER = 57506
const OVER = 57507
const OVERLAPS = 57508
const OVERLAY = 57509
const PARTIAL = 57510
const PARTITION = 57511
const PLACING = 57512
const POSITION = 57513
const PRECEDING = 57514
const PRECISION = 57515
const PRIMARY = 57516
const PRIORITY = 57517
const RANGE = 57518
const READ = 57519
const REAL = 57520
const RECURSIVE = 57521
const REF = 57522
const REFERENCES = 57523
const RENAME = 57524
const REPEATABLE = 57525
const RESTRICT = 57526
const RETURNING = 57527
const REVOKE = 57528
const RIGHT = 57529
const ROLLBACK = 57530
const ROLLUP = 57531
const ROW = 57532
const ROWS = 57533
const RSHIFT = 57534
const SEARCH = 57535
const SECOND = 57536
const SELECT = 57537
const SERIALIZABLE = 57538
const SESSION = 57539
const SESSION_USER = 57540
const SET = 57541
const SHOW = 57542
const SIMILAR = 57543
const SIMPLE = 57544
const SMALLINT = 57545
const SNAPSHOT = 57546
const SOME = 57547
const SQL = 57548
const START = 57549
const STRICT = 57550
const STRING = 57551
const STORING = 57552
const SUBSTRING = 57553
const SYMMETRIC = 57554
const TABLE = 57555
const TABLES = 57556
const TEXT = 57557
const THEN = 57558
const TIME = 57559
const TIMESTAMP = 57560
const TO = 57561
const TRAILING = 57562
const TRANSACTION = 57563
const TREAT = 57564
const TRIM = 57565
const TRUE = 57566
const TRUNCATE = 57567
const TYPE = 57568
const UNBOUNDED = 57569
const UNCOMMITTED = 57570
const UNION = 57571
const UNIQUE = 57572
const UNKNOWN = 57573
const UPDATE = 57574
const USER = 57575
const USING = 57576
const VALID = 57577
const VALIDATE = 57578
const VALUE = 57579
const VALUES = 57580
const VARCHAR = 57581
const VARIADIC = 57582
const VARYING = 57583
const WHEN = 57584
const WHERE = 57585
const WINDOW = 57586
const WITH = 57587
const WITHIN = 57588
const WITHOUT = 57589
const YEAR = 57590
const ZONE = 57591
const NOT_LA = 57592
const WITH_LA = 57593
const POSTFIXOP = 57594
const UMINUS = 57595

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"FCONST",
	"SCONST",
	"BCONST",
	"ICONST",
	"PARAM",
	"TYPECAST",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXPLAIN",
	"EXTRACT",
	"FALSE",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FOLLOWING",
	"FOR",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HOUR",
	"IF",
	"IFNULL",
	"IN",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARTIAL",
	"PARTITION",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"RENAME",
	"REPEATABLE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SNAPSHOT",
	"SOME",
	"SQL",
	"START",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"TABLE",
	"TABLES",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"USER",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:4094

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 19,
	272, 19,
	-2, 308,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 29,
	1, 279,
	158, 279,
	185, 279,
	270, 279,
	272, 279,
	-2, 289,
	-1, 40,
	1, 282,
	158, 282,
	185, 282,
	270, 282,
	272, 282,
	-2, 288,
	-1, 49,
	1, 19,
	272, 19,
	-2, 308,
	-1, 85,
	1, 136,
	272, 136,
	-2, 770,
	-1, 249,
	134, 318,
	157, 318,
	-2, 285,
	-1, 252,
	134, 317,
	157, 317,
	-2, 283,
	-1, 363,
	134, 317,
	157, 317,
	-2, 286,
	-1, 420,
	269, 716,
	-2, 711,
	-1, 421,
	269, 717,
	-2, 712,
	-1, 427,
	6, 437,
	269, 437,
	-2, 848,
	-1, 449,
	6, 407,
	-2, 825,
	-1, 450,
	6, 434,
	269, 434,
	-2, 826,
	-1, 451,
	6, 415,
	-2, 827,
	-1, 452,
	6, 414,
	-2, 828,
	-1, 453,
	6, 434,
	269, 434,
	-2, 831,
	-1, 454,
	6, 434,
	269, 434,
	-2, 832,
	-1, 455,
	6, 435,
	-2, 835,
	-1, 456,
	6, 402,
	-2, 836,
	-1, 457,
	6, 402,
	-2, 837,
	-1, 458,
	6, 417,
	-2, 840,
	-1, 459,
	6, 403,
	-2, 845,
	-1, 460,
	6, 404,
	-2, 846,
	-1, 461,
	6, 405,
	-2, 847,
	-1, 462,
	6, 402,
	-2, 851,
	-1, 463,
	6, 408,
	-2, 856,
	-1, 464,
	6, 406,
	-2, 858,
	-1, 465,
	6, 436,
	-2, 862,
	-1, 466,
	6, 432,
	269, 432,
	-2, 866,
	-1, 723,
	87, 289,
	120, 289,
	134, 289,
	157, 289,
	161, 289,
	229, 289,
	-2, 539,
	-1, 731,
	269, 696,
	-2, 686,
	-1, 925,
	12, 0,
	13, 0,
	14, 0,
	252, 0,
	253, 0,
	254, 0,
	-2, 470,
	-1, 926,
	12, 0,
	13, 0,
	14, 0,
	252, 0,
	253, 0,
	254, 0,
	-2, 471,
	-1, 927,
	12, 0,
	13, 0,
	14, 0,
	252, 0,
	253, 0,
	254, 0,
	-2, 472,
	-1, 931,
	12, 0,
	13, 0,
	14, 0,
	252, 0,
	253, 0,
	254, 0,
	-2, 476,
	-1, 932,
	12, 0,
	13, 0,
	14, 0,
	252, 0,
	253, 0,
	254, 0,
	-2, 477,
	-1, 933,
	12, 0,
	13, 0,
	14, 0,
	252, 0,
	253, 0,
	254, 0,
	-2, 478,
	-1, 936,
	30, 0,
	111, 0,
	133, 0,
	201, 0,
	250, 0,
	-2, 483,
	-1, 967,
	166, 609,
	-2, 612,
	-1, 1117,
	87, 289,
	120, 289,
	134, 289,
	157, 289,
	161, 289,
	229, 289,
	-2, 359,
	-1, 1125,
	30, 0,
	111, 0,
	133, 0,
	201, 0,
	250, 0,
	-2, 484,
	-1, 1130,
	30, 0,
	111, 0,
	133, 0,
	201, 0,
	250, 0,
	-2, 485,
	-1, 1149,
	166, 608,
	-2, 611,
	-1, 1288,
	30, 0,
	111, 0,
	133, 0,
	201, 0,
	250, 0,
	-2, 486,
	-1, 1293,
	123, 0,
	-2, 496,
	-1, 1302,
	166, 610,
	-2, 613,
	-1, 1342,
	12, 0,
	13, 0,
	14, 0,
	252, 0,
	253, 0,
	254, 0,
	-2, 520,
	-1, 1343,
	12, 0,
	13, 0,
	14, 0,
	252, 0,
	253, 0,
	254, 0,
	-2, 521,
	-1, 1344,
	12, 0,
	13, 0,
	14, 0,
	252, 0,
	253, 0,
	254, 0,
	-2, 522,
	-1, 1348,
	12, 0,
	13, 0,
	14, 0,
	252, 0,
	253, 0,
	254, 0,
	-2, 526,
	-1, 1349,
	12, 0,
	13, 0,
	14, 0,
	252, 0,
	253, 0,
	254, 0,
	-2, 527,
	-1, 1350,
	12, 0,
	13, 0,
	14, 0,
	252, 0,
	253, 0,
	254, 0,
	-2, 528,
	-1, 1443,
	123, 0,
	-2, 497,
	-1, 1447,
	30, 0,
	111, 0,
	133, 0,
	201, 0,
	250, 0,
	-2, 500,
	-1, 1448,
	30, 0,
	111, 0,
	133, 0,
	201, 0,
	250, 0,
	-2, 502,
	-1, 1527,
	30, 0,
	111, 0,
	133, 0,
	201, 0,
	250, 0,
	-2, 501,
	-1, 1528,
	30, 0,
	111, 0,
	133, 0,
	201, 0,
	250, 0,
	-2, 503,
	-1, 1536,
	123, 0,
	-2, 529,
	-1, 1573,
	123, 0,
	-2, 530,
	-1, 1618,
	30, 0,
	133, 0,
	201, 0,
	250, 0,
	-2, 824,
}

const sqlNprod = 958
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 19277

var sqlAct = [...]int{

	964, 1617, 1600, 1484, 1638, 1578, 1601, 1616, 1602, 809,
	1544, 419, 865, 253, 1322, 1380, 1423, 418, 1294, 1412,
	1411, 1517, 852, 1429, 726, 849, 394, 1207, 86, 802,
	479, 1113, 1506, 280, 1206, 1268, 1063, 980, 411, 728,
	873, 1152, 413, 1277, 661, 810, 788, 1105, 851, 486,
	258, 28, 1295, 779, 1019, 1101, 984, 383, 952, 974,
	13, 949, 757, 18, 1116, 876, 260, 39, 469, 677,
	681, 535, 520, 90, 277, 844, 28, 277, 10, 286,
	1022, 6, 277, 252, 296, 353, 61, 299, 489, 63,
	491, 761, 39, 393, 384, 480, 294, 874, 683, 562,
	28, 517, 354, 546, 62, 301, 507, 64, 854, 481,
	297, 263, 40, 366, 41, 367, 39, 59, 533, 83,
	537, 467, 68, 516, 290, 1508, 365, 803, 483, 483,
	19, 377, 484, 484, 305, 482, 482, 257, 807, 977,
	32, 509, 257, 684, 1614, 276, 509, 1505, 283, 684,
	1145, 1566, 250, 291, 249, 1608, 1607, 1072, 869, 869,
	685, 1355, 1599, 34, 302, 1446, 328, 1594, 1575, 38,
	869, 1446, 1301, 1179, 978, 1195, 1196, 1197, 1569, 45,
	1085, 869, 306, 329, 1563, 1442, 1554, 1505, 1529, 1505,
	468, 1446, 1524, 777, 24, 869, 35, 47, 1514, 1504,
	25, 1505, 1505, 1489, 1147, 1103, 869, 979, 976, 1148,
	1488, 1469, 26, 869, 1145, 1449, 1445, 1192, 1145, 1446,
	1087, 1390, 48, 686, 869, 1298, 869, 1259, 1145, 43,
	508, 1255, 824, 1224, 508, 44, 1225, 1222, 512, 1221,
	1145, 688, 1145, 1220, 1149, 1146, 1145, 1145, 1179, 1151,
	1145, 960, 870, 42, 1145, 869, 776, 45, 864, 775,
	981, 687, 514, 364, 838, 515, 378, 701, 656, 655,
	277, 527, 385, 385, 358, 47, 526, 322, 275, 49,
	426, 421, 487, 484, 561, 510, 1198, 340, 1615, 1613,
	510, 363, 1192, 1570, 1513, 1474, 1470, 27, 1462, 36,
	48, 1461, 1193, 1456, 478, 476, 45, 43, 1455, 474,
	30, 31, 89, 44, 975, 277, 502, 1072, 33, 1454,
	957, 1453, 1440, 685, 47, 89, 89, 1407, 45, 89,
	473, 806, 89, 89, 89, 1123, 37, 89, 89, 89,
	89, 357, 304, 1370, 483, 1365, 47, 734, 484, 48,
	1364, 482, 702, 1363, 45, 1194, 43, 1305, 1283, 1267,
	89, 89, 44, 1227, 1226, 1214, 1205, 1178, 1175, 669,
	671, 48, 47, 250, 508, 249, 678, 1193, 556, 658,
	42, 475, 1173, 1162, 1156, 1086, 291, 1034, 1089, 717,
	718, 719, 720, 721, 686, 991, 990, 48, 724, 958,
	1526, 377, 42, 1179, 43, 703, 305, 305, 376, 1545,
	44, 1324, 688, 500, 565, 1189, 1190, 1191, 737, 1188,
	1185, 1186, 1187, 1180, 1181, 1182, 1183, 1184, 60, 1565,
	1194, 731, 687, 1546, 1538, 1520, 1511, 1503, 1406, 1481,
	1467, 1434, 1419, 1292, 1282, 523, 1265, 524, 1264, 1262,
	1239, 1238, 550, 1204, 306, 306, 557, 1438, 1170, 1169,
	1161, 646, 566, 657, 650, 651, 652, 649, 653, 697,
	694, 695, 696, 689, 690, 691, 692, 693, 725, 1142,
	1179, 667, 666, 250, 772, 673, 250, 250, 674, 675,
	679, 665, 1138, 954, 1188, 1185, 1186, 1187, 1180, 1181,
	1182, 1183, 1184, 762, 769, 765, 1048, 729, 1047, 770,
	1029, 989, 868, 767, 755, 782, 759, 760, 754, 753,
	752, 751, 750, 277, 749, 89, 801, 89, 748, 89,
	813, 747, 1193, 746, 745, 817, 744, 743, 296, 742,
	741, 819, 299, 732, 89, 1048, 730, 793, 795, 763,
	42, 659, 28, 281, 766, 381, 565, 1525, 565, 1285,
	89, 1284, 805, 471, 334, 28, 1179, 261, 1410, 1073,
	89, 89, 768, 89, 1124, 61, 349, 335, 63, 739,
	1424, 39, 771, 803, 773, 1194, 1325, 985, 758, 305,
	826, 352, 1069, 62, 798, 470, 64, 1179, 1584, 1627,
	423, 785, 1165, 89, 566, 89, 566, 1628, 818, 1179,
	735, 1398, 270, 832, 304, 304, 370, 827, 830, 302,
	825, 822, 564, 89, 820, 89, 89, 89, 89, 831,
	89, 828, 821, 1553, 238, 565, 239, 306, 1497, 1081,
	256, 686, 89, 1496, 689, 690, 691, 692, 693, 1188,
	1185, 1186, 1187, 1180, 1181, 1182, 1183, 1184, 1251, 688,
	89, 843, 492, 89, 493, 1231, 247, 1230, 915, 1160,
	1179, 781, 1159, 255, 1158, 1157, 1126, 1250, 941, 687,
	823, 800, 799, 566, 332, 277, 385, 244, 1586, 951,
	916, 917, 918, 919, 920, 921, 922, 923, 924, 925,
	926, 927, 928, 929, 930, 931, 932, 933, 934, 935,
	936, 277, 503, 871, 257, 1552, 914, 1437, 492, 333,
	493, 981, 387, 1486, 951, 53, 1193, 686, 494, 885,
	1180, 1181, 1182, 1183, 1184, 1311, 1635, 1241, 1193, 879,
	1604, 1062, 847, 1005, 992, 688, 1003, 1064, 1013, 1015,
	1020, 1023, 1024, 1025, 686, 905, 848, 770, 846, 89,
	985, 1627, 770, 54, 564, 687, 564, 498, 1312, 965,
	702, 1314, 688, 509, 89, 497, 487, 781, 89, 1194,
	878, 89, 254, 780, 494, 89, 789, 89, 89, 565,
	89, 1194, 687, 89, 89, 89, 1547, 304, 1033, 1193,
	89, 89, 1596, 331, 1065, 1039, 1082, 1043, 1605, 245,
	961, 966, 756, 969, 1080, 955, 956, 1597, 1182, 1183,
	1184, 981, 1634, 703, 981, 1037, 248, 1059, 1014, 885,
	379, 355, 1534, 296, 1026, 1027, 1028, 566, 792, 1045,
	1248, 296, 1606, 564, 1185, 1186, 1187, 1180, 1181, 1182,
	1183, 1184, 1194, 1242, 1386, 905, 1381, 722, 1187, 1180,
	1181, 1182, 1183, 1184, 1379, 678, 1278, 492, 1038, 493,
	939, 1168, 373, 374, 1128, 257, 1487, 904, 1603, 55,
	330, 495, 1626, 702, 1387, 1091, 1090, 1058, 694, 695,
	696, 689, 690, 691, 692, 693, 1624, 1077, 1633, 1076,
	1088, 350, 1084, 1068, 277, 1078, 56, 51, 1071, 950,
	1083, 1074, 305, 1422, 791, 1067, 1079, 510, 1119, 28,
	1180, 1181, 1182, 1183, 1184, 1075, 995, 862, 863, 1096,
	89, 331, 1098, 494, 1094, 39, 703, 495, 1125, 1112,
	89, 89, 1130, 1118, 858, 1122, 778, 1097, 57, 52,
	1099, 940, 351, 1135, 343, 368, 323, 1382, 321, 1383,
	306, 1144, 369, 1491, 1133, 1490, 89, 884, 1465, 89,
	790, 1153, 1233, 937, 760, 759, 1351, 904, 369, 691,
	692, 693, 1385, 1150, 1648, 1479, 1166, 977, 1042, 1388,
	1171, 763, 859, 766, 664, 998, 834, 564, 660, 1129,
	1310, 1127, 836, 696, 689, 690, 691, 692, 693, 1579,
	1394, 724, 555, 543, 554, 837, 548, 1020, 1020, 1020,
	1397, 1641, 978, 835, 1131, 368, 654, 1396, 1136, 528,
	999, 1480, 490, 1050, 1432, 1141, 1049, 1229, 1384, 1143,
	1164, 938, 1273, 1466, 1272, 1352, 289, 330, 1236, 58,
	50, 1353, 1154, 1155, 532, 979, 976, 255, 360, 1647,
	89, 89, 89, 1000, 997, 385, 89, 884, 1269, 89,
	1102, 1211, 1212, 1213, 487, 89, 89, 89, 89, 89,
	988, 89, 89, 1393, 558, 530, 495, 1537, 89, 1228,
	89, 1203, 672, 1235, 1464, 531, 89, 1132, 1208, 813,
	1395, 1256, 1216, 1253, 1134, 89, 89, 987, 981, 1291,
	1174, 89, 1137, 1249, 829, 684, 1001, 348, 1257, 1237,
	304, 346, 1252, 1258, 345, 1287, 344, 1288, 1639, 560,
	277, 341, 288, 277, 1263, 1209, 1261, 89, 1293, 89,
	89, 740, 89, 559, 1271, 648, 1303, 1274, 1377, 1246,
	1244, 89, 1303, 1279, 1280, 1275, 89, 89, 1232, 89,
	1092, 1245, 975, 1247, 860, 1640, 1320, 1307, 1308, 1309,
	996, 857, 513, 511, 1108, 1329, 947, 506, 1331, 499,
	1642, 885, 496, 1319, 1498, 866, 77, 945, 1304, 1111,
	1104, 1628, 371, 552, 781, 273, 1313, 1315, 1316, 1276,
	796, 69, 337, 1500, 797, 1109, 1254, 905, 781, 1360,
	1361, 1330, 1326, 1508, 794, 885, 1549, 3, 1367, 1368,
	1369, 74, 885, 1299, 1572, 1328, 70, 1270, 375, 1567,
	65, 1108, 1332, 686, 1358, 808, 680, 525, 867, 1121,
	1645, 905, 1359, 1646, 71, 943, 1111, 942, 905, 1179,
	907, 948, 686, 885, 372, 1376, 1106, 274, 76, 73,
	1439, 1110, 1109, 1362, 1372, 324, 326, 282, 549, 544,
	1425, 687, 338, 1371, 1417, 1401, 1107, 1417, 1386, 905,
	1416, 839, 906, 1416, 840, 1356, 1421, 881, 237, 1431,
	1420, 1317, 1443, 1409, 686, 1286, 1366, 1447, 1448, 277,
	277, 1418, 1450, 277, 1418, 1223, 28, 1452, 1387, 1391,
	1392, 1444, 688, 1427, 1428, 1436, 1408, 1433, 1110, 1032,
	944, 1031, 1457, 240, 241, 242, 1460, 946, 1030, 904,
	89, 982, 687, 841, 1451, 885, 1318, 1104, 72, 842,
	733, 243, 1485, 67, 647, 342, 1458, 1595, 1167, 1533,
	907, 1426, 1516, 1435, 89, 986, 1468, 738, 1463, 23,
	1414, 905, 399, 904, 1378, 1430, 1234, 89, 853, 89,
	904, 89, 567, 553, 89, 75, 542, 406, 1108, 422,
	347, 1382, 906, 1383, 536, 89, 545, 881, 89, 1475,
	994, 472, 424, 1111, 882, 425, 89, 1492, 883, 89,
	1476, 904, 764, 1106, 412, 880, 1385, 300, 87, 1109,
	1478, 811, 983, 1388, 1163, 1483, 1510, 736, 1417, 884,
	398, 264, 264, 1107, 1416, 279, 404, 1499, 279, 285,
	279, 1417, 1521, 279, 292, 279, 87, 1416, 1507, 403,
	1512, 885, 1527, 1528, 1501, 1418, 962, 1509, 395, 1515,
	89, 1493, 1519, 884, 327, 81, 87, 87, 1418, 277,
	884, 82, 1384, 1066, 1405, 1110, 1532, 905, 804, 1006,
	861, 668, 1541, 1522, 1243, 246, 1176, 1012, 1004, 1002,
	993, 356, 1543, 904, 485, 812, 1539, 382, 339, 885,
	872, 884, 1120, 1542, 380, 676, 272, 271, 850, 1530,
	336, 529, 833, 501, 487, 1523, 1494, 1495, 1556, 1548,
	885, 1583, 89, 89, 89, 905, 1240, 1417, 1564, 1558,
	89, 89, 1560, 1416, 46, 1557, 89, 17, 89, 16,
	89, 89, 89, 89, 15, 14, 905, 1559, 770, 12,
	11, 1095, 9, 8, 1418, 7, 89, 1571, 22, 21,
	20, 5, 4, 2, 89, 89, 1, 1574, 89, 0,
	0, 0, 686, 0, 89, 89, 0, 1590, 0, 0,
	0, 0, 0, 884, 1582, 0, 1589, 1417, 1585, 0,
	688, 885, 1593, 1416, 1587, 1610, 1591, 0, 1592, 904,
	0, 1568, 1562, 1609, 1588, 0, 1611, 1621, 1621, 0,
	687, 1612, 0, 0, 1418, 1622, 89, 905, 0, 1625,
	1623, 686, 0, 813, 0, 1629, 1580, 1581, 1631, 1621,
	1632, 279, 0, 87, 0, 361, 0, 0, 0, 688,
	0, 0, 1644, 1643, 0, 0, 0, 904, 0, 0,
	264, 1630, 0, 0, 0, 0, 1621, 1649, 0, 687,
	0, 0, 0, 1598, 0, 0, 279, 0, 904, 89,
	0, 89, 0, 89, 0, 0, 279, 279, 0, 504,
	89, 0, 1006, 1006, 0, 0, 0, 0, 0, 884,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 702, 0, 1139, 1140, 0, 0, 0, 0, 521,
	0, 521, 907, 0, 89, 1179, 89, 1195, 1196, 1197,
	0, 0, 0, 0, 89, 0, 89, 1441, 0, 87,
	0, 521, 87, 87, 87, 0, 87, 884, 0, 904,
	1006, 1006, 1006, 0, 906, 0, 907, 0, 663, 881,
	702, 0, 0, 907, 703, 0, 0, 0, 884, 1192,
	0, 1200, 1201, 1202, 0, 0, 264, 0, 0, 682,
	0, 0, 0, 0, 0, 0, 0, 0, 906, 0,
	0, 0, 0, 881, 907, 906, 0, 0, 89, 89,
	881, 0, 89, 0, 66, 0, 0, 0, 0, 0,
	89, 0, 0, 703, 0, 0, 0, 0, 0, 0,
	0, 0, 89, 0, 0, 0, 906, 0, 0, 0,
	0, 881, 689, 690, 691, 692, 693, 0, 1198, 884,
	0, 0, 0, 0, 69, 0, 0, 89, 89, 89,
	0, 89, 0, 0, 1193, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 74, 0, 0, 0, 89, 70,
	1006, 1006, 0, 0, 0, 279, 907, 697, 694, 695,
	696, 689, 690, 691, 692, 693, 0, 71, 89, 0,
	786, 1289, 1290, 0, 279, 0, 0, 279, 0, 0,
	0, 279, 73, 815, 816, 0, 279, 1194, 906, 279,
	87, 87, 0, 881, 0, 0, 521, 682, 1179, 0,
	1195, 1196, 1197, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
	1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
	1006, 0, 1006, 0, 1333, 1334, 1335, 1336, 1337, 1338,
	1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348,
	1349, 1350, 1192, 1354, 0, 0, 0, 1189, 1190, 1191,
	0, 1188, 1185, 1186, 1187, 1180, 1181, 1182, 1183, 1184,
	0, 72, 907, 0, 400, 29, 225, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	236, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	29, 0, 0, 0, 906, 0, 0, 0, 75, 881,
	0, 0, 0, 0, 251, 0, 0, 259, 0, 0,
	907, 1198, 0, 227, 29, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 259, 845, 1193, 0, 0,
	0, 907, 226, 228, 0, 0, 279, 786, 0, 0,
	0, 0, 906, 0, 0, 0, 0, 881, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 279, 906, 229, 87, 0, 686, 881, 704,
	705, 706, 0, 0, 230, 231, 0, 0, 0, 707,
	1194, 0, 0, 0, 0, 688, 0, 713, 0, 232,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 907, 0, 0, 687, 0, 0, 0, 0,
	1006, 701, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1482, 0, 0, 906, 0, 0, 0, 0, 881,
	1189, 1190, 1191, 0, 1188, 1185, 1186, 1187, 1180, 1181,
	1182, 1183, 1184, 0, 0, 0, 279, 1040, 1041, 0,
	0, 0, 786, 0, 0, 1046, 0, 0, 714, 0,
	0, 1051, 1052, 1054, 1056, 1057, 233, 1060, 1061, 234,
	712, 0, 0, 235, 279, 0, 1070, 1006, 0, 0,
	709, 0, 279, 0, 0, 0, 702, 0, 0, 0,
	0, 845, 521, 0, 0, 0, 0, 845, 1536, 0,
	0, 0, 0, 0, 0, 0, 0, 708, 0, 0,
	0, 0, 0, 0, 0, 251, 0, 0, 0, 0,
	0, 0, 0, 663, 0, 87, 279, 0, 1093, 0,
	0, 0, 0, 0, 0, 0, 0, 1100, 0, 703,
	0, 0, 1115, 1115, 0, 279, 0, 0, 711, 0,
	1006, 0, 686, 0, 704, 705, 706, 0, 0, 0,
	0, 0, 0, 0, 707, 0, 0, 0, 0, 0,
	688, 1573, 713, 0, 0, 0, 1179, 0, 1195, 1196,
	1197, 0, 0, 0, 0, 0, 0, 0, 1297, 0,
	687, 1179, 0, 1195, 1196, 1197, 701, 710, 0, 698,
	699, 700, 0, 697, 694, 695, 696, 689, 690, 691,
	692, 693, 0, 0, 0, 1035, 0, 0, 0, 0,
	1192, 0, 1036, 0, 0, 251, 0, 0, 251, 251,
	0, 0, 0, 0, 0, 1192, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 723, 714, 0, 0, 727, 0, 0, 0,
	0, 0, 0, 0, 0, 712, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 709, 0, 0, 0, 0,
	0, 702, 0, 0, 0, 0, 0, 0, 0, 1198,
	0, 0, 1199, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 708, 0, 1198, 1193, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 682, 0, 0, 0,
	1193, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 703, 0, 0, 0, 0, 0,
	279, 0, 0, 711, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1260, 0, 786, 29, 663, 1194, 0,
	1266, 0, 0, 0, 0, 0, 0, 0, 0, 29,
	0, 279, 0, 1194, 279, 0, 0, 0, 0, 0,
	0, 0, 1281, 0, 0, 1115, 0, 0, 0, 0,
	0, 0, 710, 0, 698, 699, 700, 0, 697, 694,
	695, 696, 689, 690, 691, 692, 693, 0, 0, 0,
	0, 0, 0, 0, 0, 1471, 0, 0, 1189, 1190,
	1191, 0, 1188, 1185, 1186, 1187, 1180, 1181, 1182, 1183,
	1184, 0, 0, 1189, 1190, 1191, 1323, 1188, 1185, 1186,
	1187, 1180, 1181, 1182, 1183, 1184, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 686, 0, 704, 705, 706, 0,
	0, 0, 0, 0, 0, 0, 707, 0, 0, 0,
	0, 0, 688, 0, 713, 0, 0, 0, 0, 0,
	0, 0, 0, 686, 0, 704, 705, 706, 1374, 1375,
	786, 0, 687, 0, 0, 707, 682, 682, 701, 0,
	0, 688, 1399, 713, 1400, 0, 279, 1402, 1403, 1404,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1413, 687, 786, 1413, 0, 0, 0, 701, 0, 875,
	279, 279, 0, 0, 279, 0, 0, 0, 0, 0,
	682, 1115, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 714, 0, 0, 0, 953,
	0, 0, 0, 0, 0, 0, 1179, 712, 1195, 1196,
	1197, 0, 0, 0, 0, 0, 0, 709, 1296, 0,
	0, 0, 1459, 702, 714, 1179, 0, 1195, 1196, 1197,
	0, 0, 0, 0, 0, 0, 712, 0, 0, 0,
	0, 0, 0, 0, 708, 0, 709, 0, 0, 0,
	1192, 0, 702, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1192,
	0, 0, 0, 708, 0, 786, 703, 1477, 0, 87,
	0, 0, 0, 0, 0, 711, 279, 0, 0, 0,
	0, 259, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1413, 703, 0, 0, 0, 0,
	0, 0, 0, 0, 711, 0, 0, 1413, 0, 1198,
	279, 0, 1518, 0, 0, 0, 0, 0, 0, 0,
	279, 0, 682, 0, 710, 1193, 698, 699, 700, 0,
	697, 694, 695, 696, 689, 690, 691, 692, 693, 0,
	0, 0, 0, 29, 1193, 0, 0, 1219, 0, 0,
	0, 0, 1117, 710, 0, 698, 699, 700, 0, 697,
	694, 695, 696, 689, 690, 691, 692, 693, 0, 0,
	0, 0, 0, 0, 0, 0, 1218, 0, 1194, 0,
	0, 0, 0, 0, 1550, 1551, 0, 0, 1555, 0,
	0, 0, 0, 1413, 0, 0, 87, 1194, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 682, 0,
	0, 0, 0, 0, 0, 953, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 723,
	0, 0, 0, 682, 682, 279, 0, 87, 1189, 1190,
	1191, 0, 1188, 1185, 1186, 1187, 1180, 1181, 1182, 1183,
	1184, 0, 0, 1413, 1518, 0, 0, 1189, 1190, 1191,
	0, 1188, 1185, 1186, 1187, 1180, 1181, 1182, 1183, 1184,
	0, 420, 0, 0, 279, 0, 0, 0, 0, 0,
	0, 0, 0, 91, 92, 723, 93, 0, 0, 0,
	0, 0, 0, 0, 0, 94, 95, 183, 184, 185,
	96, 186, 187, 0, 97, 188, 189, 98, 0, 435,
	190, 191, 192, 0, 445, 0, 428, 0, 99, 100,
	101, 0, 102, 0, 103, 0, 309, 104, 105, 0,
	429, 431, 0, 430, 432, 106, 107, 108, 109, 194,
	110, 195, 196, 0, 0, 111, 0, 0, 0, 112,
	113, 0, 0, 0, 0, 197, 114, 436, 0, 0,
	115, 116, 199, 117, 0, 0, 0, 310, 0, 118,
	446, 0, 201, 0, 119, 120, 442, 444, 875, 0,
	121, 875, 311, 122, 204, 205, 206, 0, 207, 0,
	312, 123, 313, 124, 125, 0, 0, 447, 314, 126,
	315, 0, 265, 0, 0, 127, 0, 128, 129, 130,
	131, 266, 316, 132, 133, 134, 0, 135, 0, 443,
	136, 210, 137, 138, 0, 0, 0, 0, 0, 139,
	211, 317, 140, 318, 437, 141, 142, 0, 438, 143,
	214, 0, 144, 145, 146, 215, 147, 148, 0, 149,
	150, 151, 0, 152, 319, 153, 154, 216, 155, 0,
	156, 157, 0, 158, 267, 433, 159, 160, 320, 161,
	217, 162, 0, 163, 164, 166, 218, 165, 439, 0,
	0, 167, 168, 0, 269, 220, 0, 0, 268, 440,
	441, 0, 169, 170, 171, 172, 0, 0, 173, 174,
	434, 0, 175, 176, 177, 223, 224, 0, 178, 0,
	0, 0, 0, 179, 180, 181, 182, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	29, 0, 0, 0, 0, 0, 1415, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 875, 875, 0,
	0, 875, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1502, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 563, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 875, 91, 92,
	568, 93, 569, 570, 571, 572, 573, 574, 575, 576,
	94, 95, 183, 184, 185, 96, 186, 187, 577, 97,
	188, 189, 98, 578, 579, 190, 191, 192, 580, 193,
	581, 308, 582, 99, 100, 101, 0, 102, 583, 103,
	584, 309, 104, 105, 585, 586, 587, 588, 589, 590,
	106, 107, 108, 109, 194, 110, 195, 196, 591, 592,
	111, 593, 594, 595, 112, 113, 596, 597, 723, 598,
	197, 114, 198, 599, 600, 115, 116, 199, 117, 601,
	602, 603, 310, 604, 118, 200, 605, 201, 606, 119,
	120, 202, 203, 607, 608, 121, 609, 311, 122, 204,
	205, 206, 610, 207, 611, 312, 123, 313, 124, 125,
	612, 613, 208, 314, 126, 315, 614, 265, 615, 616,
	127, 0, 128, 129, 130, 131, 266, 316, 132, 133,
	134, 617, 135, 618, 209, 136, 210, 137, 138, 619,
	620, 621, 622, 623, 139, 211, 317, 140, 318, 212,
	141, 142, 624, 213, 143, 214, 625, 144, 145, 146,
	215, 147, 148, 626, 149, 150, 151, 627, 152, 319,
	153, 154, 216, 155, 0, 156, 157, 628, 158, 267,
	629, 159, 160, 320, 161, 217, 162, 630, 163, 164,
	166, 218, 165, 219, 631, 632, 167, 168, 633, 269,
	220, 634, 635, 268, 221, 222, 636, 169, 170, 171,
	172, 637, 638, 173, 174, 639, 640, 175, 176, 177,
	223, 224, 641, 178, 642, 643, 644, 645, 179, 180,
	181, 182, 0, 563, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 774, 91, 92, 568, 93, 569,
	570, 571, 572, 573, 574, 575, 576, 94, 95, 183,
	184, 185, 96, 186, 187, 577, 97, 188, 189, 98,
	578, 579, 190, 191, 192, 580, 193, 581, 308, 582,
	99, 100, 101, 0, 102, 583, 103, 584, 309, 104,
	105, 585, 586, 587, 588, 589, 590, 106, 107, 108,
	109, 194, 110, 195, 196, 591, 592, 111, 593, 594,
	595, 112, 113, 596, 597, 0, 598, 197, 114, 198,
	599, 600, 115, 116, 199, 117, 601, 602, 603, 310,
	604, 118, 200, 605, 201, 606, 119, 120, 202, 203,
	607, 608, 121, 609, 311, 122, 204, 205, 206, 610,
	207, 611, 312, 123, 313, 124, 125, 612, 613, 208,
	314, 126, 315, 614, 265, 615, 616, 127, 0, 128,
	129, 130, 131, 266, 316, 132, 133, 134, 617, 135,
	618, 209, 136, 210, 137, 138, 619, 620, 621, 622,
	623, 139, 211, 317, 140, 318, 212, 141, 142, 624,
	213, 143, 214, 625, 144, 145, 146, 215, 147, 148,
	626, 149, 150, 151, 627, 152, 319, 153, 154, 216,
	155, 0, 156, 157, 628, 158, 267, 629, 159, 160,
	320, 161, 217, 162, 630, 163, 164, 166, 218, 165,
	219, 631, 632, 167, 168, 633, 269, 220, 634, 635,
	268, 221, 222, 636, 169, 170, 171, 172, 637, 638,
	173, 174, 639, 640, 175, 176, 177, 223, 224, 641,
	178, 642, 643, 644, 645, 179, 180, 181, 182, 420,
	408, 409, 410, 407, 396, 0, 0, 0, 0, 0,
	0, 91, 92, 971, 93, 0, 0, 0, 0, 402,
	0, 0, 0, 94, 95, 183, 449, 450, 96, 451,
	452, 0, 97, 188, 189, 98, 417, 435, 453, 454,
	192, 0, 445, 0, 428, 0, 99, 100, 101, 0,
	102, 0, 103, 0, 309, 104, 105, 0, 429, 431,
	0, 430, 432, 106, 107, 108, 109, 455, 110, 456,
	457, 0, 0, 111, 0, 972, 0, 448, 113, 0,
	0, 0, 0, 401, 114, 436, 415, 0, 115, 116,
	458, 117, 0, 0, 0, 310, 0, 118, 446, 0,
	201, 0, 119, 120, 442, 444, 0, 0, 121, 0,
	311, 122, 459, 460, 461, 0, 427, 0, 312, 123,
	313, 124, 125, 0, 0, 447, 314, 126, 315, 0,
	265, 0, 0, 127, 0, 128, 129, 130, 131, 266,
	316, 132, 133, 134, 391, 135, 416, 443, 136, 462,
	137, 138, 0, 0, 0, 0, 0, 139, 211, 317,
	140, 318, 437, 141, 142, 0, 438, 143, 214, 0,
	144, 145, 146, 463, 147, 148, 0, 149, 150, 151,
	0, 152, 319, 153, 154, 405, 155, 0, 156, 157,
	0, 158, 267, 433, 159, 160, 320, 161, 464, 162,
	0, 163, 164, 166, 218, 165, 439, 0, 0, 167,
	168, 0, 269, 465, 0, 0, 268, 440, 441, 414,
	169, 170, 171, 172, 0, 0, 173, 174, 434, 0,
	175, 176, 177, 223, 466, 970, 178, 0, 0, 0,
	0, 179, 180, 181, 182, 392, 0, 420, 408, 409,
	410, 407, 396, 0, 0, 388, 389, 973, 0, 91,
	92, 390, 93, 0, 397, 968, 0, 402, 0, 0,
	0, 94, 95, 183, 449, 450, 96, 451, 452, 0,
	97, 188, 189, 98, 417, 435, 453, 454, 192, 0,
	445, 0, 428, 0, 99, 100, 101, 0, 102, 0,
	103, 0, 309, 104, 105, 0, 429, 431, 0, 430,
	432, 106, 107, 108, 109, 455, 110, 456, 457, 488,
	0, 111, 0, 0, 0, 448, 113, 0, 0, 0,
	0, 401, 114, 436, 415, 0, 115, 116, 458, 117,
	0, 0, 0, 310, 0, 118, 446, 0, 201, 0,
	119, 120, 442, 444, 0, 0, 121, 0, 311, 122,
	459, 460, 461, 0, 427, 0, 312, 123, 313, 124,
	125, 0, 0, 447, 314, 126, 315, 0, 265, 0,
	0, 127, 0, 128, 129, 130, 131, 266, 316, 132,
	133, 134, 391, 135, 416, 443, 136, 462, 137, 138,
	0, 0, 0, 0, 0, 139, 211, 317, 140, 318,
	437, 141, 142, 0, 438, 143, 214, 0, 144, 145,
	146, 463, 147, 148, 0, 149, 150, 151, 0, 152,
	319, 153, 154, 405, 155, 0, 156, 157, 45, 158,
	267, 433, 159, 160, 320, 161, 464, 162, 0, 163,
	164, 166, 218, 165, 439, 0, 47, 167, 168, 0,
	269, 465, 0, 0, 268, 440, 441, 414, 169, 170,
	171, 172, 0, 0, 173, 174, 434, 0, 175, 176,
	177, 307, 466, 0, 178, 0, 0, 0, 43, 179,
	180, 181, 182, 392, 44, 420, 408, 409, 410, 407,
	396, 0, 0, 388, 389, 0, 0, 91, 92, 390,
	93, 0, 397, 0, 0, 402, 0, 0, 0, 94,
	95, 183, 449, 450, 96, 451, 452, 0, 97, 188,
	189, 98, 417, 435, 453, 454, 192, 0, 445, 0,
	428, 0, 99, 100, 101, 0, 102, 0, 103, 0,
	309, 104, 105, 0, 429, 431, 0, 430, 432, 106,
	107, 108, 109, 455, 110, 456, 457, 0, 0, 111,
	0, 0, 0, 448, 113, 0, 0, 0, 0, 401,
	114, 436, 415, 0, 115, 116, 458, 117, 0, 0,
	0, 310, 0, 118, 446, 0, 201, 0, 119, 120,
	442, 444, 0, 0, 121, 0, 311, 122, 459, 460,
	461, 0, 427, 0, 312, 123, 313, 124, 125, 0,
	0, 447, 314, 126, 315, 0, 265, 0, 0, 127,
	0, 128, 129, 130, 131, 266, 316, 132, 133, 134,
	391, 135, 416, 443, 136, 462, 137, 138, 0, 0,
	0, 0, 0, 139, 211, 317, 140, 318, 437, 141,
	142, 0, 438, 143, 214, 0, 144, 145, 146, 463,
	147, 148, 0, 149, 150, 151, 0, 152, 319, 153,
	154, 405, 155, 0, 156, 157, 45, 158, 267, 433,
	159, 160, 320, 161, 464, 162, 0, 163, 164, 166,
	218, 165, 439, 0, 47, 167, 168, 0, 269, 465,
	0, 0, 268, 440, 441, 414, 169, 170, 171, 172,
	0, 0, 173, 174, 434, 0, 175, 176, 177, 307,
	466, 0, 178, 0, 0, 0, 43, 179, 180, 181,
	182, 392, 44, 420, 408, 409, 410, 407, 396, 0,
	0, 388, 389, 0, 0, 91, 92, 390, 93, 0,
	397, 0, 0, 402, 0, 0, 0, 94, 95, 183,
	449, 450, 96, 451, 452, 1016, 97, 188, 189, 98,
	417, 435, 453, 454, 192, 0, 445, 0, 428, 0,
	99, 100, 101, 0, 102, 0, 103, 0, 309, 104,
	105, 0, 429, 431, 0, 430, 432, 106, 107, 108,
	109, 455, 110, 456, 457, 0, 0, 111, 0, 0,
	0, 448, 113, 0, 0, 0, 0, 401, 114, 436,
	415, 0, 115, 116, 458, 117, 0, 0, 1021, 310,
	0, 118, 446, 0, 201, 0, 119, 120, 442, 444,
	0, 0, 121, 0, 311, 122, 459, 460, 461, 0,
	427, 0, 312, 123, 313, 124, 125, 0, 1017, 447,
	314, 126, 315, 0, 265, 0, 0, 127, 0, 128,
	129, 130, 131, 266, 316, 132, 133, 134, 391, 135,
	416, 443, 136, 462, 137, 138, 0, 0, 0, 0,
	0, 139, 211, 317, 140, 318, 437, 141, 142, 0,
	438, 143, 214, 0, 144, 145, 146, 463, 147, 148,
	0, 149, 150, 151, 0, 152, 319, 153, 154, 405,
	155, 0, 156, 157, 0, 158, 267, 433, 159, 160,
	320, 161, 464, 162, 0, 163, 164, 166, 218, 165,
	439, 0, 0, 167, 168, 0, 269, 465, 0, 1018,
	268, 440, 441, 414, 169, 170, 171, 172, 0, 0,
	173, 174, 434, 0, 175, 176, 177, 223, 466, 0,
	178, 0, 0, 0, 0, 179, 180, 181, 182, 392,
	0, 420, 408, 409, 410, 407, 396, 0, 0, 388,
	389, 0, 0, 91, 92, 390, 93, 0, 397, 0,
	0, 402, 0, 0, 0, 94, 95, 183, 449, 450,
	96, 451, 452, 0, 97, 188, 189, 98, 417, 435,
	453, 454, 192, 0, 445, 0, 428, 0, 99, 100,
	101, 0, 102, 0, 103, 0, 309, 104, 105, 0,
	429, 431, 0, 430, 432, 106, 107, 108, 109, 455,
	110, 456, 457, 0, 0, 111, 0, 0, 0, 448,
	113, 0, 0, 0, 0, 401, 114, 436, 415, 0,
	115, 116, 458, 117, 0, 0, 0, 310, 0, 118,
	446, 0, 201, 0, 119, 120, 442, 444, 0, 0,
	121, 0, 311, 122, 459, 460, 461, 0, 427, 0,
	312, 123, 313, 124, 125, 0, 0, 447, 314, 126,
	315, 0, 265, 0, 0, 127, 0, 128, 129, 130,
	131, 266, 316, 132, 133, 134, 391, 135, 416, 443,
	136, 462, 137, 138, 0, 0, 0, 0, 0, 139,
	211, 317, 140, 318, 437, 141, 142, 0, 438, 143,
	214, 0, 144, 145, 146, 463, 147, 148, 0, 149,
	150, 151, 0, 152, 319, 153, 154, 405, 155, 0,
	156, 157, 0, 158, 267, 433, 159, 160, 320, 161,
	464, 162, 0, 163, 164, 166, 218, 165, 439, 0,
	0, 167, 168, 0, 269, 465, 0, 0, 268, 440,
	441, 414, 169, 170, 171, 172, 0, 0, 173, 174,
	434, 0, 175, 176, 177, 223, 466, 0, 178, 0,
	0, 0, 0, 179, 180, 181, 182, 392, 0, 420,
	408, 409, 410, 407, 396, 0, 0, 388, 389, 0,
	0, 91, 92, 390, 93, 0, 397, 1357, 0, 402,
	0, 0, 0, 94, 95, 183, 449, 450, 96, 451,
	452, 0, 97, 188, 189, 98, 417, 435, 453, 454,
	192, 0, 445, 0, 428, 0, 99, 100, 101, 0,
	102, 0, 103, 0, 309, 104, 105, 0, 429, 431,
	0, 430, 432, 106, 107, 108, 109, 455, 110, 456,
	457, 0, 0, 111, 0, 0, 0, 448, 113, 0,
	0, 0, 0, 401, 114, 436, 415, 0, 115, 116,
	458, 117, 0, 0, 0, 310, 0, 118, 446, 0,
	201, 0, 119, 120, 442, 444, 0, 0, 121, 0,
	311, 122, 459, 460, 461, 0, 427, 0, 312, 123,
	313, 124, 125, 0, 0, 447, 314, 126, 315, 0,
	265, 0, 0, 127, 0, 128, 129, 130, 131, 266,
	316, 132, 133, 134, 391, 135, 416, 443, 136, 462,
	137, 138, 0, 0, 0, 0, 0, 139, 211, 317,
	140, 318, 437, 141, 142, 0, 438, 143, 214, 0,
	144, 145, 146, 463, 147, 148, 0, 149, 150, 151,
	0, 152, 319, 153, 154, 405, 155, 0, 156, 157,
	0, 158, 267, 433, 159, 160, 320, 161, 464, 162,
	0, 163, 164, 166, 218, 165, 439, 0, 0, 167,
	168, 0, 269, 465, 0, 0, 268, 440, 441, 414,
	169, 170, 171, 172, 0, 0, 173, 174, 434, 0,
	175, 176, 177, 223, 466, 0, 178, 0, 0, 0,
	0, 179, 180, 181, 182, 392, 0, 420, 408, 409,
	410, 407, 396, 0, 0, 388, 389, 0, 0, 91,
	92, 390, 93, 0, 397, 1300, 0, 402, 0, 0,
	0, 94, 95, 183, 449, 450, 96, 451, 452, 0,
	97, 188, 189, 98, 417, 435, 453, 454, 192, 0,
	445, 0, 428, 0, 99, 100, 101, 0, 102, 0,
	103, 0, 309, 104, 105, 0, 429, 431, 0, 430,
	432, 106, 107, 108, 109, 455, 110, 456, 457, 0,
	0, 111, 0, 0, 0, 448, 113, 0, 0, 0,
	0, 401, 114, 436, 415, 0, 115, 116, 458, 117,
	0, 0, 0, 310, 0, 118, 446, 0, 201, 0,
	119, 120, 442, 444, 0, 0, 121, 0, 311, 122,
	459, 460, 461, 0, 427, 0, 312, 123, 313, 124,
	125, 0, 0, 447, 314, 126, 315, 0, 265, 0,
	0, 127, 0, 128, 129, 130, 131, 266, 316, 132,
	133, 134, 391, 135, 416, 443, 136, 462, 137, 138,
	0, 0, 0, 0, 0, 139, 211, 317, 140, 318,
	437, 141, 142, 0, 438, 143, 214, 0, 144, 145,
	146, 463, 147, 148, 0, 149, 150, 151, 0, 152,
	319, 153, 154, 405, 155, 0, 156, 157, 0, 158,
	267, 433, 159, 160, 320, 161, 464, 162, 0, 163,
	164, 166, 218, 165, 439, 0, 0, 167, 168, 0,
	269, 465, 0, 0, 268, 440, 441, 414, 169, 170,
	171, 172, 0, 0, 173, 174, 434, 0, 175, 176,
	177, 223, 466, 0, 178, 0, 0, 0, 0, 179,
	180, 181, 182, 392, 0, 420, 408, 409, 410, 407,
	396, 0, 0, 388, 389, 0, 0, 91, 92, 390,
	93, 0, 397, 967, 0, 402, 0, 0, 0, 94,
	95, 183, 449, 450, 96, 451, 452, 0, 97, 188,
	189, 98, 417, 435, 453, 454, 192, 0, 445, 0,
	428, 0, 99, 100, 101, 0, 102, 0, 103, 0,
	309, 104, 105, 0, 429, 431, 0, 430, 432, 106,
	107, 108, 109, 455, 110, 456, 457, 0, 0, 111,
	0, 0, 0, 448, 113, 0, 0, 0, 0, 401,
	114, 436, 415, 0, 115, 116, 458, 117, 0, 0,
	0, 310, 0, 118, 446, 0, 201, 0, 119, 120,
	442, 444, 0, 0, 121, 0, 311, 122, 459, 460,
	461, 0, 427, 0, 312, 123, 313, 124, 125, 0,
	0, 447, 314, 126, 315, 0, 265, 0, 0, 127,
	0, 128, 129, 130, 131, 266, 316, 132, 133, 134,
	391, 135, 416, 443, 136, 462, 137, 138, 0, 0,
	0, 0, 0, 139, 211, 317, 140, 318, 437, 141,
	142, 0, 438, 143, 214, 0, 144, 145, 146, 463,
	147, 148, 0, 149, 150, 151, 0, 152, 319, 153,
	154, 405, 155, 0, 156, 157, 0, 158, 267, 433,
	159, 160, 320, 161, 464, 162, 0, 163, 164, 166,
	218, 165, 439, 0, 0, 167, 168, 0, 269, 465,
	0, 0, 268, 440, 441, 414, 169, 170, 171, 172,
	0, 0, 173, 174, 434, 0, 175, 176, 177, 223,
	466, 0, 178, 0, 0, 0, 0, 179, 180, 181,
	182, 392, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 388, 389, 0, 0, 0, 0, 390, 729, 963,
	397, 420, 408, 409, 410, 407, 396, 0, 0, 0,
	0, 0, 0, 91, 92, 0, 93, 0, 0, 0,
	0, 402, 0, 0, 0, 94, 95, 183, 449, 450,
	96, 451, 452, 0, 97, 188, 189, 98, 417, 435,
	453, 454, 192, 0, 445, 0, 428, 0, 99, 100,
	101, 0, 102, 0, 103, 0, 309, 104, 105, 0,
	429, 431, 0, 430, 432, 106, 107, 108, 109, 455,
	110, 456, 457, 0, 0, 111, 0, 0, 0, 448,
	113, 0, 0, 0, 0, 401, 114, 436, 415, 0,
	115, 116, 458, 117, 0, 0, 0, 310, 0, 118,
	446, 0, 201, 0, 119, 120, 442, 444, 0, 0,
	121, 0, 311, 122, 459, 460, 461, 0, 427, 0,
	312, 123, 313, 124, 125, 0, 0, 447, 314, 126,
	315, 0, 265, 0, 0, 127, 0, 128, 129, 130,
	131, 266, 316, 132, 133, 134, 391, 135, 416, 443,
	136, 462, 137, 138, 0, 0, 0, 0, 0, 139,
	211, 317, 140, 318, 437, 141, 142, 0, 438, 143,
	214, 0, 144, 145, 146, 463, 147, 148, 0, 149,
	150, 151, 0, 152, 319, 153, 154, 405, 155, 0,
	156, 157, 0, 158, 267, 433, 159, 160, 320, 161,
	464, 162, 0, 163, 164, 166, 218, 165, 439, 0,
	0, 167, 168, 0, 269, 465, 0, 0, 268, 440,
	441, 414, 169, 170, 171, 172, 0, 0, 173, 174,
	434, 0, 175, 176, 177, 223, 466, 1306, 178, 0,
	0, 0, 0, 179, 180, 181, 182, 392, 0, 420,
	408, 409, 410, 407, 396, 0, 0, 388, 389, 0,
	0, 91, 92, 390, 93, 0, 397, 0, 0, 402,
	0, 0, 0, 94, 95, 183, 449, 450, 96, 451,
	452, 0, 97, 188, 189, 98, 417, 435, 453, 454,
	192, 0, 445, 0, 428, 0, 99, 100, 101, 0,
	102, 0, 103, 0, 309, 104, 105, 0, 429, 431,
	0, 430, 432, 106, 107, 108, 109, 455, 110, 456,
	457, 488, 0, 111, 0, 0, 0, 448, 113, 0,
	0, 0, 0, 401, 114, 436, 415, 0, 115, 116,
	458, 117, 0, 0, 0, 310, 0, 118, 446, 0,
	201, 0, 119, 120, 442, 444, 0, 0, 121, 0,
	311, 122, 459, 460, 461, 0, 427, 0, 312, 123,
	313, 124, 125, 0, 0, 447, 314, 126, 315, 0,
	265, 0, 0, 127, 0, 128, 129, 130, 131, 266,
	316, 132, 133, 134, 391, 135, 416, 443, 136, 462,
	137, 138, 0, 0, 0, 0, 0, 139, 211, 317,
	140, 318, 437, 141, 142, 0, 438, 143, 214, 0,
	144, 145, 146, 463, 147, 148, 0, 149, 150, 151,
	0, 152, 319, 153, 154, 405, 155, 0, 156, 157,
	0, 158, 267, 433, 159, 160, 320, 161, 464, 162,
	0, 163, 164, 166, 218, 165, 439, 0, 0, 167,
	168, 0, 269, 465, 0, 0, 268, 440, 441, 414,
	169, 170, 171, 172, 0, 0, 173, 174, 434, 0,
	175, 176, 177, 223, 466, 0, 178, 0, 0, 0,
	0, 179, 180, 181, 182, 392, 0, 420, 408, 409,
	410, 407, 396, 0, 0, 388, 389, 0, 0, 91,
	92, 390, 93, 0, 397, 0, 0, 402, 0, 0,
	0, 94, 95, 183, 449, 450, 96, 451, 452, 0,
	97, 188, 189, 98, 417, 435, 453, 454, 192, 0,
	445, 0, 428, 0, 99, 100, 101, 0, 102, 0,
	103, 0, 309, 104, 105, 0, 429, 431, 0, 430,
	432, 106, 107, 108, 109, 455, 110, 456, 457, 0,
	0, 111, 0, 0, 0, 448, 113, 0, 0, 0,
	0, 401, 114, 436, 415, 0, 115, 116, 458, 117,
	0, 0, 0, 310, 0, 118, 446, 0, 201, 0,
	119, 120, 442, 444, 0, 0, 121, 0, 311, 122,
	459, 460, 461, 0, 427, 0, 312, 123, 313, 124,
	125, 0, 0, 447, 314, 126, 315, 0, 265, 0,
	0, 127, 0, 128, 129, 130, 131, 266, 316, 132,
	133, 134, 391, 135, 416, 443, 136, 462, 137, 138,
	0, 0, 0, 0, 0, 139, 211, 317, 140, 318,
	437, 141, 142, 0, 438, 143, 214, 0, 144, 145,
	146, 463, 147, 148, 0, 149, 150, 151, 0, 152,
	319, 153, 154, 405, 155, 0, 156, 157, 0, 158,
	267, 433, 159, 160, 320, 161, 464, 162, 0, 163,
	164, 166, 218, 165, 439, 0, 0, 167, 168, 0,
	269, 465, 0, 0, 268, 440, 441, 414, 169, 170,
	171, 172, 0, 0, 173, 174, 434, 0, 175, 176,
	177, 223, 466, 0, 178, 0, 0, 0, 0, 179,
	180, 181, 182, 392, 0, 420, 408, 409, 410, 407,
	396, 0, 0, 388, 389, 386, 0, 91, 92, 390,
	93, 0, 397, 0, 0, 402, 0, 0, 0, 94,
	95, 183, 449, 450, 96, 451, 452, 0, 97, 188,
	189, 98, 417, 435, 453, 454, 192, 0, 445, 0,
	428, 0, 99, 100, 101, 0, 102, 0, 103, 0,
	309, 104, 105, 0, 429, 431, 0, 430, 432, 106,
	107, 108, 109, 455, 110, 456, 457, 0, 0, 111,
	0, 0, 0, 448, 113, 0, 0, 0, 0, 401,
	114, 436, 415, 0, 115, 116, 458, 117, 0, 0,
	1021, 310, 0, 118, 446, 0, 201, 0, 119, 120,
	442, 444, 0, 0, 121, 0, 311, 122, 459, 460,
	461, 0, 427, 0, 312, 123, 313, 124, 125, 0,
	0, 447, 314, 126, 315, 0, 265, 0, 0, 127,
	0, 128, 129, 130, 131, 266, 316, 132, 133, 134,
	391, 135, 416, 443, 136, 462, 137, 138, 0, 0,
	0, 0, 0, 139, 211, 317, 140, 318, 437, 141,
	142, 0, 438, 143, 214, 0, 144, 145, 146, 463,
	147, 148, 0, 149, 150, 151, 0, 152, 319, 153,
	154, 405, 155, 0, 156, 157, 0, 158, 267, 433,
	159, 160, 320, 161, 464, 162, 0, 163, 164, 166,
	218, 165, 439, 0, 0, 167, 168, 0, 269, 465,
	0, 0, 268, 440, 441, 414, 169, 170, 171, 172,
	0, 0, 173, 174, 434, 0, 175, 176, 177, 223,
	466, 0, 178, 0, 0, 0, 0, 179, 180, 181,
	182, 392, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 388, 389, 0, 0, 0, 0, 390, 0, 0,
	397, 420, 408, 409, 410, 407, 396, 0, 0, 0,
	0, 0, 0, 91, 92, 670, 93, 0, 0, 0,
	0, 402, 0, 0, 0, 94, 95, 183, 449, 450,
	96, 451, 452, 0, 97, 188, 189, 98, 417, 435,
	453, 454, 192, 0, 445, 0, 428, 0, 99, 100,
	101, 0, 102, 0, 103, 0, 309, 104, 105, 0,
	429, 431, 0, 430, 432, 106, 107, 108, 109, 455,
	110, 456, 457, 0, 0, 111, 0, 0, 0, 448,
	113, 0, 0, 0, 0, 401, 114, 436, 415, 0,
	115, 116, 458, 117, 0, 0, 0, 310, 0, 118,
	446, 0, 201, 0, 119, 120, 442, 444, 0, 0,
	121, 0, 311, 122, 459, 460, 461, 0, 427, 0,
	312, 123, 313, 124, 125, 0, 0, 447, 314, 126,
	315, 0, 265, 0, 0, 127, 0, 128, 129, 130,
	131, 266, 316, 132, 133, 134, 391, 135, 416, 443,
	136, 462, 137, 138, 0, 0, 0, 0, 0, 139,
	211, 317, 140, 318, 437, 141, 142, 0, 438, 143,
	214, 0, 144, 145, 146, 463, 147, 148, 0, 149,
	150, 151, 0, 152, 319, 153, 154, 405, 155, 0,
	156, 157, 0, 158, 267, 433, 159, 160, 320, 161,
	464, 162, 0, 163, 164, 166, 218, 165, 439, 0,
	0, 167, 168, 0, 269, 465, 0, 0, 268, 440,
	441, 414, 169, 170, 171, 172, 0, 0, 173, 174,
	434, 0, 175, 176, 177, 223, 466, 0, 178, 0,
	0, 0, 0, 179, 180, 181, 182, 392, 0, 420,
	408, 409, 410, 407, 396, 0, 0, 388, 389, 0,
	0, 91, 92, 390, 93, 0, 397, 0, 0, 402,
	0, 0, 0, 94, 95, 183, 449, 450, 96, 451,
	452, 0, 97, 188, 189, 98, 417, 435, 453, 454,
	192, 0, 445, 0, 428, 0, 99, 100, 101, 0,
	102, 0, 103, 0, 309, 104, 1620, 0, 429, 431,
	0, 430, 432, 106, 107, 108, 109, 455, 110, 456,
	457, 0, 0, 111, 0, 0, 0, 448, 113, 0,
	0, 0, 0, 401, 114, 436, 415, 0, 115, 116,
	458, 117, 0, 0, 0, 310, 0, 118, 446, 0,
	201, 0, 119, 120, 442, 444, 0, 0, 121, 0,
	311, 122, 459, 460, 461, 0, 427, 0, 312, 123,
	313, 124, 125, 0, 0, 447, 314, 126, 315, 0,
	265, 0, 0, 127, 0, 128, 129, 130, 131, 266,
	316, 132, 133, 134, 391, 135, 416, 443, 136, 462,
	137, 138, 0, 0, 0, 0, 0, 139, 211, 317,
	140, 318, 437, 141, 142, 0, 438, 143, 214, 0,
	144, 145, 146, 463, 147, 148, 0, 149, 150, 151,
	0, 152, 319, 153, 154, 405, 155, 0, 156, 157,
	0, 158, 267, 433, 159, 160, 320, 161, 464, 162,
	0, 163, 164, 166, 218, 165, 439, 0, 0, 167,
	168, 0, 269, 465, 0, 0, 268, 440, 441, 414,
	169, 170, 1619, 172, 0, 0, 173, 174, 434, 0,
	175, 176, 177, 223, 466, 0, 178, 0, 0, 0,
	0, 179, 180, 181, 182, 392, 0, 420, 408, 409,
	410, 407, 396, 0, 0, 388, 389, 0, 0, 91,
	92, 390, 93, 0, 397, 0, 0, 402, 0, 0,
	0, 94, 95, 1618, 449, 450, 96, 451, 452, 0,
	97, 188, 189, 98, 417, 435, 453, 454, 192, 0,
	445, 0, 428, 0, 99, 100, 101, 0, 102, 0,
	103, 0, 309, 104, 1620, 0, 429, 431, 0, 430,
	432, 106, 107, 108, 109, 455, 110, 456, 457, 0,
	0, 111, 0, 0, 0, 448, 113, 0, 0, 0,
	0, 401, 114, 436, 415, 0, 115, 116, 458, 117,
	0, 0, 0, 310, 0, 118, 446, 0, 201, 0,
	119, 120, 442, 444, 0, 0, 121, 0, 311, 122,
	459, 460, 461, 0, 427, 0, 312, 123, 313, 124,
	125, 0, 0, 447, 314, 126, 315, 0, 265, 0,
	0, 127, 0, 128, 129, 130, 131, 266, 316, 132,
	133, 134, 391, 135, 416, 443, 136, 462, 137, 138,
	0, 0, 0, 0, 0, 139, 211, 317, 140, 318,
	437, 141, 142, 0, 438, 143, 214, 0, 144, 145,
	146, 463, 147, 148, 0, 149, 150, 151, 0, 152,
	319, 153, 154, 405, 155, 0, 156, 157, 0, 158,
	267, 433, 159, 160, 320, 161, 464, 162, 0, 163,
	164, 166, 218, 165, 439, 0, 0, 167, 168, 0,
	269, 465, 0, 0, 268, 440, 441, 414, 169, 170,
	1619, 172, 0, 0, 173, 174, 434, 0, 175, 176,
	177, 223, 466, 0, 178, 0, 0, 0, 0, 179,
	180, 181, 182, 392, 0, 420, 408, 409, 410, 407,
	396, 0, 0, 388, 389, 0, 0, 91, 92, 390,
	93, 0, 397, 0, 0, 402, 0, 0, 0, 94,
	95, 183, 449, 450, 96, 451, 452, 0, 97, 188,
	189, 98, 417, 435, 453, 454, 192, 0, 445, 0,
	428, 0, 99, 100, 101, 0, 102, 0, 103, 0,
	309, 104, 105, 0, 429, 431, 0, 430, 432, 106,
	107, 108, 109, 455, 110, 456, 457, 0, 0, 111,
	0, 0, 0, 448, 113, 0, 0, 0, 0, 401,
	114, 436, 415, 0, 115, 116, 458, 117, 0, 0,
	0, 310, 0, 118, 446, 0, 201, 0, 119, 120,
	442, 444, 0, 0, 121, 0, 311, 122, 459, 460,
	461, 0, 427, 0, 312, 123, 313, 124, 125, 0,
	0, 447, 314, 126, 315, 0, 265, 0, 0, 127,
	0, 128, 129, 130, 131, 266, 316, 132, 133, 134,
	391, 135, 416, 443, 136, 462, 137, 138, 0, 0,
	0, 0, 0, 139, 211, 317, 140, 318, 437, 141,
	142, 0, 438, 143, 214, 0, 144, 145, 146, 463,
	147, 148, 0, 149, 150, 151, 0, 152, 319, 153,
	154, 405, 155, 0, 156, 157, 0, 158, 267, 433,
	159, 160, 320, 161, 464, 162, 0, 163, 164, 166,
	218, 165, 439, 0, 0, 167, 168, 0, 269, 465,
	0, 0, 268, 440, 441, 414, 169, 170, 171, 172,
	0, 0, 173, 174, 434, 0, 175, 176, 177, 223,
	466, 0, 178, 0, 0, 0, 0, 179, 180, 181,
	182, 392, 0, 420, 408, 409, 410, 407, 396, 0,
	0, 388, 389, 0, 0, 91, 92, 390, 93, 0,
	397, 0, 0, 402, 0, 0, 0, 94, 95, 183,
	449, 450, 96, 451, 452, 0, 97, 188, 189, 98,
	417, 435, 453, 454, 192, 0, 445, 0, 428, 0,
	99, 100, 101, 0, 102, 0, 103, 0, 309, 104,
	105, 0, 429, 431, 0, 430, 432, 106, 107, 108,
	109, 455, 110, 456, 457, 0, 0, 111, 0, 0,
	0, 448, 113, 0, 0, 0, 0, 401, 114, 436,
	415, 0, 115, 116, 458, 117, 0, 0, 0, 310,
	0, 118, 446, 0, 201, 0, 119, 120, 442, 444,
	0, 0, 121, 0, 311, 122, 459, 460, 461, 0,
	427, 0, 312, 123, 313, 124, 125, 0, 0, 447,
	314, 126, 315, 0, 265, 0, 0, 127, 0, 128,
	129, 130, 131, 266, 316, 132, 133, 134, 0, 135,
	416, 443, 136, 462, 137, 138, 0, 0, 0, 0,
	0, 139, 211, 317, 140, 318, 437, 141, 142, 0,
	438, 143, 214, 0, 144, 145, 146, 463, 147, 148,
	0, 149, 150, 151, 0, 152, 319, 153, 154, 1011,
	155, 0, 156, 157, 0, 158, 267, 433, 159, 160,
	320, 161, 464, 162, 0, 163, 164, 166, 218, 165,
	439, 0, 0, 167, 168, 0, 269, 465, 0, 0,
	268, 440, 441, 414, 169, 170, 171, 172, 0, 0,
	173, 174, 434, 0, 175, 176, 177, 223, 466, 0,
	178, 0, 0, 0, 0, 179, 180, 181, 182, 420,
	408, 409, 410, 407, 396, 0, 0, 0, 0, 1007,
	1008, 91, 92, 0, 93, 1009, 0, 0, 1010, 402,
	0, 0, 0, 94, 95, 0, 449, 450, 96, 451,
	452, 0, 97, 188, 189, 98, 417, 435, 453, 454,
	192, 0, 445, 0, 428, 0, 99, 100, 101, 0,
	102, 0, 103, 0, 309, 104, 1620, 0, 429, 431,
	0, 430, 432, 106, 107, 108, 109, 455, 110, 456,
	457, 0, 0, 111, 0, 0, 0, 448, 113, 0,
	0, 0, 0, 401, 114, 436, 415, 0, 115, 116,
	458, 117, 0, 0, 0, 310, 0, 118, 446, 0,
	201, 0, 119, 120, 442, 444, 0, 0, 121, 0,
	311, 122, 459, 460, 461, 0, 427, 0, 0, 123,
	313, 124, 125, 0, 0, 447, 314, 126, 0, 0,
	265, 0, 0, 127, 0, 128, 129, 130, 131, 266,
	316, 132, 133, 134, 391, 135, 416, 443, 136, 462,
	137, 138, 0, 0, 0, 0, 0, 139, 211, 317,
	140, 318, 437, 141, 142, 0, 438, 143, 214, 0,
	144, 145, 146, 463, 147, 148, 0, 149, 150, 151,
	0, 152, 319, 153, 154, 405, 155, 0, 156, 157,
	0, 158, 267, 433, 159, 160, 0, 161, 464, 162,
	0, 163, 164, 166, 218, 165, 439, 0, 0, 167,
	168, 0, 269, 465, 0, 0, 268, 440, 441, 414,
	169, 170, 1619, 172, 0, 0, 173, 174, 434, 0,
	175, 176, 177, 223, 466, 0, 178, 0, 0, 0,
	0, 179, 180, 181, 182, 303, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 388, 389, 91, 92, 0,
	93, 390, 0, 0, 397, 0, 0, 0, 0, 94,
	95, 183, 184, 185, 96, 186, 187, 0, 97, 188,
	189, 98, 0, 0, 190, 191, 192, 0, 193, 0,
	308, 0, 99, 100, 101, 0, 102, 0, 103, 0,
	309, 104, 105, 0, 0, 0, 0, 0, 0, 106,
	107, 108, 109, 194, 110, 195, 196, 0, 0, 111,
	0, 0, 0, 112, 113, 0, 0, 0, 0, 197,
	114, 198, 0, 0, 115, 116, 199, 117, 0, 0,
	0, 310, 0, 118, 200, 0, 201, 0, 119, 120,
	202, 203, 0, 0, 121, 0, 311, 122, 204, 205,
	206, 0, 207, 0, 312, 123, 313, 124, 125, 0,
	0, 208, 314, 126, 315, 0, 265, 0, 0, 127,
	0, 128, 129, 130, 131, 266, 316, 132, 133, 134,
	0, 135, 0, 209, 136, 210, 137, 138, 0, 0,
	0, 0, 0, 139, 211, 317, 140, 318, 212, 141,
	142, 0, 213, 143, 214, 0, 144, 145, 146, 215,
	147, 148, 0, 149, 150, 151, 0, 152, 319, 153,
	154, 216, 155, 0, 156, 157, 45, 158, 267, 0,
	159, 160, 320, 161, 217, 162, 0, 163, 164, 166,
	218, 165, 219, 0, 47, 167, 168, 0, 269, 220,
	0, 0, 268, 221, 222, 0, 169, 170, 171, 172,
	0, 0, 173, 174, 0, 0, 175, 176, 177, 307,
	224, 0, 178, 0, 0, 0, 43, 179, 180, 181,
	182, 0, 44, 303, 543, 547, 0, 548, 538, 0,
	0, 0, 0, 0, 0, 91, 92, 0, 93, 0,
	42, 0, 0, 0, 0, 0, 0, 94, 95, 183,
	184, 185, 96, 186, 187, 0, 97, 188, 189, 98,
	0, 0, 190, 191, 192, 0, 193, 0, 308, 0,
	99, 100, 101, 0, 102, 0, 103, 0, 309, 104,
	105, 0, 0, 0, 0, 0, 0, 106, 107, 108,
	109, 194, 110, 195, 196, 551, 0, 111, 0, 0,
	0, 112, 113, 0, 0, 0, 0, 197, 114, 198,
	540, 0, 115, 116, 199, 117, 0, 0, 0, 310,
	0, 118, 200, 0, 201, 0, 119, 120, 202, 203,
	0, 0, 121, 0, 311, 122, 204, 205, 206, 0,
	207, 0, 312, 123, 313, 124, 125, 0, 0, 208,
	314, 126, 315, 0, 265, 0, 0, 127, 0, 128,
	129, 130, 131, 266, 316, 132, 133, 134, 0, 135,
	0, 209, 136, 210, 137, 138, 0, 541, 0, 0,
	0, 139, 211, 317, 140, 318, 212, 141, 142, 0,
	213, 143, 214, 0, 144, 145, 146, 215, 147, 148,
	0, 149, 150, 151, 0, 152, 319, 153, 154, 216,
	155, 0, 156, 157, 0, 158, 267, 0, 159, 160,
	320, 161, 217, 162, 0, 163, 164, 166, 218, 165,
	219, 0, 0, 167, 168, 0, 269, 220, 0, 0,
	268, 221, 222, 539, 169, 170, 171, 172, 0, 0,
	173, 174, 0, 0, 175, 176, 177, 223, 224, 0,
	178, 0, 0, 0, 0, 179, 180, 181, 182, 303,
	543, 547, 0, 548, 538, 0, 0, 0, 0, 549,
	544, 91, 92, 0, 93, 0, 0, 0, 0, 0,
	0, 0, 0, 94, 95, 183, 184, 185, 96, 186,
	187, 0, 97, 188, 189, 98, 0, 0, 190, 191,
	192, 0, 193, 0, 308, 0, 99, 100, 101, 0,
	102, 0, 103, 0, 309, 104, 105, 0, 0, 0,
	0, 0, 0, 106, 107, 108, 109, 194, 110, 195,
	196, 534, 0, 111, 0, 0, 0, 112, 113, 0,
	0, 0, 0, 197, 114, 198, 540, 0, 115, 116,
	199, 117, 0, 0, 0, 310, 0, 118, 200, 0,
	201, 0, 119, 120, 202, 203, 0, 0, 121, 0,
	311, 122, 204, 205, 206, 0, 207, 0, 312, 123,
	313, 124, 125, 0, 0, 208, 314, 126, 315, 0,
	265, 0, 0, 127, 0, 128, 129, 130, 131, 266,
	316, 132, 133, 134, 0, 135, 0, 209, 136, 210,
	137, 138, 0, 541, 0, 0, 0, 139, 211, 317,
	140, 318, 212, 141, 142, 0, 213, 143, 214, 0,
	144, 145, 146, 215, 147, 148, 0, 149, 150, 151,
	0, 152, 319, 153, 154, 216, 155, 0, 156, 157,
	0, 158, 267, 0, 159, 160, 320, 161, 217, 162,
	0, 163, 164, 166, 218, 165, 219, 0, 0, 167,
	168, 0, 269, 220, 0, 0, 268, 221, 222, 539,
	169, 170, 171, 172, 0, 0, 173, 174, 0, 0,
	175, 176, 177, 223, 224, 0, 178, 0, 0, 0,
	0, 179, 180, 181, 182, 303, 543, 547, 0, 548,
	538, 0, 0, 0, 0, 549, 544, 91, 92, 0,
	93, 0, 0, 0, 0, 0, 0, 0, 0, 94,
	95, 183, 184, 185, 96, 186, 187, 0, 97, 188,
	189, 98, 0, 0, 190, 191, 192, 0, 193, 0,
	308, 0, 99, 100, 101, 0, 102, 0, 103, 0,
	309, 104, 105, 0, 0, 0, 0, 0, 0, 106,
	107, 108, 109, 194, 110, 195, 196, 0, 0, 111,
	0, 0, 0, 112, 113, 0, 0, 0, 0, 197,
	114, 198, 540, 0, 115, 116, 199, 117, 0, 0,
	0, 310, 0, 118, 200, 0, 201, 0, 119, 120,
	202, 203, 0, 0, 121, 0, 311, 122, 204, 205,
	206, 0, 207, 0, 312, 123, 313, 124, 125, 0,
	0, 208, 314, 126, 315, 0, 265, 0, 0, 127,
	0, 128, 129, 130, 131, 266, 316, 132, 133, 134,
	0, 135, 0, 209, 136, 210, 137, 138, 0, 541,
	0, 0, 0, 139, 211, 317, 140, 318, 212, 141,
	142, 0, 213, 143, 214, 0, 144, 145, 146, 215,
	147, 148, 0, 149, 150, 151, 0, 152, 319, 153,
	154, 216, 155, 0, 156, 157, 0, 158, 267, 0,
	159, 160, 320, 161, 217, 162, 0, 163, 164, 166,
	218, 165, 219, 0, 0, 167, 168, 0, 269, 220,
	0, 0, 268, 221, 222, 539, 169, 170, 171, 172,
	0, 0, 173, 174, 0, 0, 175, 176, 177, 223,
	224, 88, 178, 0, 0, 0, 0, 179, 180, 181,
	182, 0, 0, 91, 92, 0, 93, 0, 0, 0,
	0, 549, 544, 0, 0, 94, 95, 183, 184, 185,
	96, 186, 187, 0, 97, 188, 189, 98, 0, 0,
	190, 191, 192, 0, 193, 0, 0, 0, 99, 100,
	101, 0, 102, 0, 103, 0, 0, 104, 105, 0,
	0, 0, 0, 0, 0, 106, 107, 108, 109, 194,
	110, 195, 196, 0, 0, 111, 0, 0, 0, 112,
	113, 0, 0, 0, 0, 197, 114, 198, 0, 0,
	115, 116, 199, 117, 0, 0, 0, 0, 0, 118,
	200, 0, 201, 0, 119, 120, 202, 203, 0, 0,
	121, 0, 0, 122, 204, 205, 206, 0, 207, 0,
	0, 123, 0, 124, 125, 0, 0, 208, 0, 126,
	0, 0, 265, 0, 0, 127, 0, 128, 129, 130,
	131, 266, 0, 132, 133, 134, 0, 135, 0, 209,
	136, 210, 137, 138, 0, 0, 278, 0, 0, 139,
	211, 0, 140, 0, 212, 141, 142, 0, 213, 143,
	214, 0, 144, 145, 146, 215, 147, 148, 0, 149,
	150, 151, 0, 152, 0, 153, 154, 216, 155, 0,
	156, 157, 45, 158, 267, 0, 159, 160, 0, 161,
	217, 162, 0, 163, 164, 166, 218, 165, 219, 0,
	47, 167, 168, 0, 269, 220, 0, 0, 268, 221,
	222, 0, 169, 170, 171, 172, 0, 0, 173, 174,
	0, 0, 175, 176, 177, 307, 224, 0, 178, 0,
	0, 0, 43, 179, 180, 181, 182, 88, 44, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 91,
	92, 0, 93, 0, 0, 0, 877, 0, 0, 0,
	0, 94, 95, 183, 184, 185, 96, 186, 187, 0,
	97, 188, 189, 98, 0, 0, 190, 191, 192, 0,
	193, 0, 0, 0, 99, 100, 101, 0, 102, 0,
	103, 0, 0, 104, 105, 0, 0, 0, 0, 0,
	0, 106, 107, 108, 109, 194, 110, 195, 196, 0,
	0, 111, 0, 0, 0, 112, 113, 0, 0, 0,
	0, 197, 114, 198, 0, 0, 115, 116, 199, 117,
	0, 0, 0, 0, 0, 118, 200, 0, 201, 0,
	119, 120, 202, 203, 0, 0, 121, 0, 0, 122,
	204, 205, 206, 0, 207, 0, 0, 123, 0, 124,
	125, 0, 0, 208, 0, 126, 0, 0, 265, 0,
	0, 127, 0, 128, 129, 130, 131, 266, 0, 132,
	133, 134, 0, 135, 0, 209, 136, 210, 137, 138,
	0, 0, 0, 0, 0, 139, 211, 0, 140, 0,
	212, 141, 142, 0, 213, 143, 214, 0, 144, 145,
	146, 215, 147, 148, 0, 149, 150, 151, 0, 152,
	0, 153, 154, 216, 155, 0, 156, 157, 45, 158,
	267, 0, 159, 160, 0, 161, 217, 162, 0, 163,
	164, 166, 218, 165, 219, 0, 47, 167, 168, 0,
	269, 220, 0, 0, 268, 221, 222, 0, 169, 170,
	171, 172, 0, 0, 173, 174, 0, 0, 175, 176,
	177, 307, 224, 0, 178, 0, 0, 0, 43, 179,
	180, 181, 182, 88, 44, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 91, 92, 0, 93, 0,
	0, 0, 42, 0, 1114, 0, 0, 94, 95, 183,
	184, 185, 96, 186, 187, 0, 97, 188, 189, 98,
	0, 0, 190, 191, 192, 0, 193, 0, 0, 0,
	99, 100, 101, 0, 102, 0, 103, 0, 0, 104,
	105, 0, 0, 0, 0, 0, 0, 106, 107, 108,
	109, 194, 110, 195, 196, 0, 0, 111, 0, 0,
	0, 112, 113, 0, 0, 0, 0, 197, 114, 198,
	0, 0, 115, 116, 199, 117, 0, 0, 0, 0,
	0, 118, 200, 0, 201, 0, 119, 120, 202, 203,
	0, 0, 121, 0, 0, 122, 204, 205, 206, 0,
	207, 0, 0, 123, 0, 124, 125, 0, 0, 208,
	0, 126, 0, 0, 265, 0, 0, 127, 0, 128,
	129, 130, 131, 266, 0, 132, 133, 134, 0, 135,
	0, 209, 136, 210, 137, 138, 0, 0, 0, 0,
	0, 139, 211, 0, 140, 0, 212, 141, 142, 0,
	213, 143, 214, 0, 144, 145, 146, 215, 147, 148,
	0, 149, 150, 151, 0, 152, 0, 153, 154, 216,
	155, 0, 156, 157, 0, 158, 267, 0, 159, 160,
	0, 161, 217, 162, 0, 163, 164, 166, 218, 165,
	219, 0, 0, 167, 168, 0, 269, 220, 0, 0,
	268, 221, 222, 0, 169, 170, 171, 172, 0, 0,
	173, 174, 0, 0, 175, 176, 177, 223, 224, 0,
	178, 0, 0, 0, 0, 179, 180, 181, 182, 88,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 91, 92, 0, 93, 0, 0, 0, 0, 377,
	0, 0, 0, 94, 95, 183, 184, 185, 96, 186,
	187, 0, 97, 188, 189, 98, 0, 0, 190, 191,
	192, 0, 193, 0, 0, 0, 99, 100, 101, 0,
	102, 0, 103, 0, 0, 104, 105, 0, 0, 0,
	0, 0, 0, 106, 107, 108, 109, 194, 110, 195,
	196, 0, 0, 111, 0, 0, 0, 112, 113, 0,
	0, 0, 0, 197, 114, 198, 0, 0, 115, 116,
	199, 117, 0, 0, 0, 0, 0, 118, 200, 0,
	201, 0, 119, 120, 202, 203, 0, 0, 121, 0,
	0, 122, 204, 205, 206, 0, 207, 0, 0, 123,
	0, 124, 125, 0, 0, 208, 0, 126, 0, 0,
	265, 0, 0, 127, 0, 128, 129, 130, 131, 266,
	0, 132, 133, 134, 0, 135, 0, 209, 136, 210,
	137, 138, 0, 0, 278, 0, 0, 139, 211, 0,
	140, 0, 212, 141, 142, 0, 213, 143, 214, 0,
	144, 145, 146, 215, 147, 148, 0, 149, 150, 151,
	0, 152, 0, 153, 154, 216, 155, 0, 156, 157,
	0, 158, 267, 0, 159, 160, 0, 161, 217, 162,
	0, 163, 164, 166, 218, 165, 219, 0, 0, 167,
	168, 0, 269, 220, 0, 0, 268, 221, 222, 0,
	169, 170, 171, 172, 0, 0, 173, 174, 0, 0,
	175, 176, 177, 223, 224, 0, 178, 0, 0, 0,
	0, 179, 180, 181, 182, 88, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 91, 92, 0,
	93, 0, 0, 0, 877, 0, 0, 0, 0, 94,
	95, 183, 184, 185, 96, 186, 187, 0, 97, 188,
	189, 98, 0, 0, 190, 191, 192, 0, 193, 0,
	0, 0, 99, 100, 101, 0, 102, 0, 103, 0,
	0, 104, 105, 0, 0, 0, 0, 0, 0, 106,
	107, 108, 109, 194, 110, 195, 196, 0, 0, 111,
	0, 0, 0, 112, 113, 0, 0, 0, 0, 197,
	114, 198, 0, 0, 115, 116, 199, 117, 0, 0,
	0, 0, 0, 118, 200, 0, 201, 0, 119, 120,
	202, 203, 0, 0, 121, 0, 0, 122, 204, 205,
	206, 0, 207, 0, 0, 123, 0, 124, 125, 0,
	0, 208, 0, 126, 0, 0, 265, 0, 0, 127,
	0, 128, 129, 130, 131, 266, 0, 132, 133, 134,
	0, 135, 0, 209, 136, 210, 137, 138, 0, 0,
	0, 0, 0, 139, 211, 0, 140, 0, 212, 141,
	142, 0, 213, 143, 214, 0, 144, 145, 146, 215,
	147, 148, 0, 149, 150, 151, 0, 152, 0, 153,
	154, 216, 155, 0, 156, 157, 0, 158, 267, 0,
	159, 160, 0, 161, 217, 162, 0, 163, 164, 166,
	218, 165, 219, 0, 0, 167, 168, 0, 269, 220,
	0, 0, 268, 221, 222, 0, 169, 170, 171, 172,
	0, 0, 173, 174, 0, 0, 175, 176, 177, 223,
	224, 0, 178, 0, 0, 0, 0, 179, 180, 181,
	182, 88, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 91, 92, 0, 93, 0, 0, 0,
	814, 0, 0, 0, 0, 94, 95, 183, 184, 185,
	96, 186, 187, 0, 97, 188, 189, 98, 0, 0,
	190, 191, 192, 0, 193, 0, 0, 0, 99, 100,
	101, 0, 102, 0, 103, 0, 0, 104, 105, 0,
	0, 0, 0, 0, 0, 106, 107, 108, 109, 194,
	110, 195, 196, 0, 0, 111, 0, 0, 0, 112,
	113, 0, 0, 0, 0, 197, 114, 198, 0, 0,
	115, 116, 199, 117, 0, 0, 0, 0, 0, 118,
	200, 0, 201, 0, 119, 120, 202, 203, 0, 0,
	121, 0, 0, 122, 204, 205, 206, 0, 207, 0,
	0, 123, 0, 124, 125, 0, 0, 208, 0, 126,
	0, 0, 265, 0, 0, 127, 0, 128, 129, 130,
	131, 266, 0, 132, 133, 134, 0, 135, 0, 209,
	136, 210, 137, 138, 0, 0, 0, 0, 0, 139,
	211, 0, 140, 0, 212, 141, 142, 0, 213, 143,
	214, 0, 144, 145, 146, 215, 147, 148, 0, 149,
	150, 151, 0, 152, 0, 153, 154, 216, 155, 0,
	156, 157, 0, 158, 267, 0, 159, 160, 0, 161,
	217, 162, 0, 163, 164, 166, 218, 165, 219, 0,
	0, 167, 168, 0, 269, 220, 0, 0, 268, 221,
	222, 0, 169, 170, 171, 172, 0, 0, 173, 174,
	0, 0, 175, 176, 177, 223, 224, 0, 178, 0,
	0, 0, 0, 179, 180, 181, 182, 88, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 91,
	92, 0, 93, 0, 0, 0, 1324, 0, 0, 0,
	0, 94, 95, 183, 184, 185, 96, 186, 187, 0,
	97, 188, 189, 98, 0, 0, 190, 191, 192, 0,
	193, 0, 0, 0, 99, 100, 101, 0, 102, 0,
	103, 0, 0, 104, 105, 0, 0, 0, 0, 0,
	0, 106, 107, 108, 109, 194, 110, 195, 196, 0,
	0, 111, 0, 0, 0, 112, 113, 0, 0, 0,
	0, 197, 114, 198, 0, 0, 115, 116, 199, 117,
	0, 0, 0, 0, 0, 118, 200, 0, 201, 0,
	119, 120, 202, 203, 0, 0, 121, 0, 0, 122,
	204, 205, 206, 0, 207, 0, 0, 123, 0, 124,
	125, 0, 0, 208, 0, 126, 0, 0, 265, 0,
	0, 127, 0, 128, 129, 130, 131, 266, 0, 132,
	133, 134, 0, 135, 0, 209, 136, 210, 137, 138,
	0, 0, 0, 0, 0, 139, 211, 0, 140, 0,
	212, 141, 142, 0, 213, 143, 214, 0, 144, 145,
	146, 215, 147, 148, 0, 149, 150, 151, 0, 152,
	0, 153, 154, 216, 155, 0, 156, 157, 0, 158,
	267, 0, 159, 160, 0, 161, 217, 162, 0, 163,
	164, 166, 218, 165, 219, 0, 0, 167, 168, 0,
	269, 220, 0, 0, 268, 221, 222, 0, 169, 170,
	171, 172, 0, 0, 173, 174, 0, 0, 175, 176,
	177, 223, 224, 0, 178, 0, 0, 0, 0, 179,
	180, 181, 182, 88, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 91, 92, 0, 93, 0,
	0, 0, 477, 0, 0, 0, 0, 94, 95, 183,
	184, 185, 96, 186, 187, 0, 97, 188, 189, 98,
	0, 0, 190, 191, 192, 0, 193, 0, 0, 0,
	99, 100, 101, 0, 102, 0, 103, 0, 0, 104,
	105, 0, 0, 0, 0, 0, 0, 106, 107, 519,
	109, 194, 110, 195, 196, 0, 0, 111, 0, 0,
	0, 112, 113, 0, 0, 0, 0, 197, 114, 198,
	0, 0, 115, 116, 199, 117, 0, 0, 0, 0,
	0, 118, 200, 0, 201, 0, 119, 120, 202, 203,
	0, 0, 121, 0, 0, 122, 204, 205, 206, 0,
	207, 0, 0, 123, 0, 124, 125, 0, 0, 208,
	0, 126, 0, 0, 265, 0, 0, 127, 0, 128,
	129, 130, 131, 266, 0, 132, 133, 134, 0, 135,
	0, 209, 136, 210, 137, 138, 0, 0, 0, 0,
	0, 139, 211, 0, 140, 0, 212, 141, 142, 0,
	213, 143, 214, 0, 144, 145, 146, 215, 147, 148,
	0, 149, 150, 151, 0, 152, 0, 153, 154, 216,
	155, 0, 156, 157, 0, 158, 267, 0, 159, 160,
	0, 161, 217, 162, 0, 163, 164, 166, 218, 165,
	219, 0, 518, 167, 168, 0, 269, 220, 0, 0,
	268, 221, 222, 0, 169, 170, 171, 172, 0, 88,
	173, 174, 0, 0, 175, 176, 177, 223, 224, 0,
	178, 91, 92, 0, 93, 179, 180, 181, 182, 0,
	0, 0, 0, 94, 95, 183, 184, 185, 96, 186,
	187, 522, 97, 188, 189, 98, 0, 0, 190, 191,
	192, 0, 193, 0, 0, 0, 99, 100, 101, 0,
	102, 0, 103, 0, 0, 104, 105, 0, 0, 0,
	0, 0, 0, 106, 107, 108, 109, 194, 110, 195,
	196, 0, 0, 111, 0, 0, 0, 112, 113, 0,
	0, 0, 0, 197, 114, 198, 0, 0, 115, 116,
	199, 117, 0, 0, 0, 0, 0, 118, 200, 0,
	201, 0, 119, 120, 202, 203, 0, 0, 121, 0,
	0, 122, 204, 205, 206, 0, 207, 0, 0, 123,
	0, 124, 125, 0, 0, 208, 0, 126, 0, 0,
	265, 0, 0, 127, 0, 128, 129, 130, 131, 266,
	0, 132, 133, 134, 0, 135, 0, 209, 136, 210,
	137, 138, 0, 0, 0, 0, 0, 139, 211, 0,
	140, 0, 212, 141, 142, 0, 213, 143, 214, 0,
	144, 145, 146, 215, 147, 148, 0, 149, 150, 151,
	0, 152, 0, 153, 154, 216, 155, 0, 156, 157,
	0, 158, 267, 0, 159, 160, 0, 161, 217, 162,
	0, 163, 164, 166, 218, 165, 219, 0, 0, 167,
	168, 0, 269, 220, 0, 0, 268, 221, 222, 0,
	169, 170, 171, 172, 0, 303, 173, 174, 0, 0,
	175, 176, 177, 223, 224, 0, 178, 91, 92, 0,
	93, 179, 180, 181, 182, 0, 0, 0, 0, 94,
	95, 183, 184, 185, 96, 186, 187, 522, 97, 188,
	189, 98, 0, 0, 190, 191, 192, 0, 193, 0,
	308, 0, 99, 100, 101, 0, 102, 0, 103, 0,
	309, 104, 105, 0, 0, 0, 0, 0, 0, 106,
	107, 108, 109, 194, 110, 195, 196, 0, 0, 111,
	0, 0, 0, 112, 113, 0, 0, 0, 0, 197,
	114, 198, 0, 0, 115, 116, 199, 117, 0, 0,
	0, 310, 0, 118, 200, 0, 201, 0, 119, 120,
	202, 203, 0, 0, 121, 0, 311, 122, 204, 205,
	206, 0, 207, 0, 312, 123, 313, 124, 125, 0,
	0, 208, 314, 126, 315, 0, 265, 0, 0, 127,
	0, 128, 129, 130, 131, 266, 316, 132, 133, 134,
	0, 135, 0, 209, 136, 210, 137, 138, 0, 0,
	0, 0, 0, 139, 211, 317, 140, 318, 212, 141,
	142, 0, 213, 143, 214, 0, 144, 145, 146, 215,
	147, 148, 0, 149, 150, 151, 0, 152, 319, 153,
	154, 216, 155, 0, 156, 157, 0, 158, 267, 0,
	159, 160, 320, 161, 217, 162, 0, 163, 164, 166,
	218, 165, 219, 0, 0, 167, 168, 0, 269, 220,
	0, 0, 268, 221, 222, 0, 169, 170, 171, 172,
	0, 88, 173, 174, 0, 0, 175, 176, 177, 223,
	224, 0, 178, 91, 92, 0, 93, 179, 180, 181,
	182, 0, 0, 0, 0, 94, 95, 183, 184, 185,
	96, 186, 187, 0, 97, 188, 189, 98, 0, 0,
	190, 191, 192, 789, 193, 0, 0, 0, 99, 100,
	101, 0, 102, 787, 103, 0, 0, 104, 105, 0,
	0, 0, 0, 0, 0, 106, 107, 108, 109, 194,
	110, 195, 196, 0, 0, 111, 0, 0, 0, 112,
	113, 0, 0, 0, 0, 197, 114, 198, 0, 0,
	115, 116, 199, 117, 0, 792, 0, 0, 0, 118,
	200, 0, 201, 0, 119, 120, 202, 203, 0, 855,
	121, 0, 0, 122, 204, 205, 206, 0, 207, 0,
	0, 123, 0, 124, 125, 0, 0, 208, 0, 126,
	0, 0, 265, 0, 0, 127, 0, 128, 129, 130,
	131, 266, 0, 132, 133, 134, 0, 135, 0, 209,
	136, 210, 137, 138, 0, 0, 0, 0, 0, 139,
	211, 0, 140, 0, 212, 141, 142, 0, 213, 143,
	214, 791, 144, 145, 146, 215, 147, 148, 0, 149,
	150, 151, 0, 152, 0, 153, 154, 216, 155, 0,
	156, 157, 0, 158, 267, 0, 159, 160, 0, 161,
	217, 162, 0, 163, 164, 166, 218, 165, 219, 0,
	0, 167, 168, 0, 269, 220, 0, 0, 268, 221,
	222, 0, 169, 170, 171, 172, 0, 856, 173, 174,
	0, 0, 175, 176, 177, 223, 224, 88, 178, 0,
	0, 0, 0, 179, 180, 181, 182, 0, 0, 91,
	92, 0, 93, 0, 0, 0, 0, 0, 0, 0,
	0, 94, 95, 183, 184, 185, 96, 186, 187, 0,
	97, 188, 189, 98, 0, 0, 190, 191, 192, 789,
	193, 0, 0, 784, 99, 100, 101, 0, 102, 787,
	103, 0, 0, 104, 105, 0, 0, 0, 0, 0,
	0, 106, 107, 108, 109, 194, 110, 195, 196, 0,
	0, 111, 0, 0, 0, 112, 113, 0, 0, 0,
	0, 197, 114, 198, 0, 0, 115, 116, 199, 117,
	0, 792, 0, 0, 0, 118, 200, 0, 201, 0,
	119, 120, 783, 203, 0, 0, 121, 0, 0, 122,
	204, 205, 206, 0, 207, 0, 0, 123, 0, 124,
	125, 0, 0, 208, 0, 126, 0, 0, 265, 0,
	0, 127, 0, 128, 129, 130, 131, 266, 0, 132,
	133, 134, 0, 135, 0, 209, 136, 210, 137, 138,
	0, 0, 0, 0, 0, 139, 211, 0, 140, 0,
	212, 141, 142, 0, 213, 143, 214, 791, 144, 145,
	146, 215, 147, 148, 0, 149, 150, 151, 0, 152,
	0, 153, 154, 216, 155, 0, 156, 157, 0, 158,
	267, 0, 159, 160, 0, 161, 217, 162, 0, 163,
	164, 166, 218, 165, 219, 0, 0, 167, 168, 0,
	269, 220, 0, 0, 268, 221, 222, 0, 169, 170,
	171, 172, 0, 790, 173, 174, 0, 0, 175, 176,
	177, 223, 224, 88, 178, 0, 0, 0, 0, 179,
	180, 181, 182, 0, 0, 91, 92, 0, 93, 0,
	0, 0, 0, 0, 1114, 0, 0, 94, 95, 183,
	184, 185, 96, 186, 187, 0, 97, 188, 189, 98,
	0, 0, 190, 191, 192, 0, 193, 0, 0, 0,
	99, 100, 101, 0, 102, 0, 103, 0, 0, 104,
	105, 0, 0, 0, 0, 0, 0, 106, 107, 108,
	109, 194, 110, 195, 196, 0, 0, 111, 0, 0,
	0, 112, 113, 0, 0, 0, 0, 197, 114, 198,
	0, 0, 115, 116, 199, 117, 0, 0, 0, 0,
	0, 118, 200, 0, 201, 0, 119, 120, 202, 203,
	0, 0, 121, 0, 0, 122, 204, 205, 206, 0,
	207, 0, 0, 123, 0, 124, 125, 0, 0, 208,
	0, 126, 0, 0, 265, 0, 0, 127, 0, 128,
	129, 130, 131, 266, 0, 132, 133, 134, 0, 135,
	0, 209, 136, 210, 137, 138, 0, 0, 0, 0,
	0, 139, 211, 0, 140, 0, 212, 141, 142, 0,
	213, 143, 214, 0, 144, 145, 146, 215, 147, 148,
	0, 149, 150, 151, 0, 152, 0, 153, 154, 216,
	155, 0, 156, 157, 0, 158, 267, 0, 159, 160,
	0, 161, 217, 162, 0, 163, 164, 166, 218, 165,
	219, 0, 0, 167, 168, 0, 269, 220, 0, 0,
	268, 221, 222, 0, 169, 170, 171, 172, 0, 88,
	173, 174, 0, 0, 175, 176, 177, 223, 224, 0,
	178, 91, 92, 0, 93, 179, 180, 181, 182, 0,
	0, 0, 0, 94, 95, 183, 184, 185, 96, 186,
	187, 0, 97, 188, 189, 98, 0, 0, 190, 191,
	192, 0, 193, 0, 0, 0, 99, 100, 101, 0,
	102, 0, 103, 0, 0, 104, 105, 0, 0, 0,
	0, 0, 0, 106, 107, 108, 109, 194, 110, 195,
	196, 0, 0, 111, 0, 0, 0, 112, 113, 0,
	0, 0, 0, 197, 114, 198, 0, 0, 115, 116,
	199, 117, 0, 0, 0, 0, 0, 118, 200, 0,
	201, 0, 119, 120, 202, 203, 0, 0, 121, 0,
	0, 122, 204, 205, 206, 0, 207, 0, 0, 123,
	0, 124, 125, 0, 0, 208, 0, 126, 0, 0,
	265, 0, 0, 127, 0, 128, 129, 130, 131, 266,
	0, 132, 133, 134, 0, 135, 0, 209, 136, 210,
	137, 138, 0, 0, 278, 0, 0, 139, 211, 0,
	140, 0, 212, 141, 142, 0, 213, 143, 214, 0,
	144, 145, 146, 215, 147, 148, 0, 149, 150, 151,
	0, 152, 0, 153, 154, 216, 155, 0, 156, 157,
	0, 158, 267, 0, 159, 160, 0, 161, 217, 162,
	0, 163, 164, 166, 218, 165, 219, 0, 0, 167,
	168, 0, 269, 220, 0, 0, 268, 221, 222, 0,
	169, 170, 171, 172, 0, 88, 173, 174, 0, 0,
	175, 176, 177, 223, 224, 0, 178, 91, 92, 0,
	93, 179, 180, 181, 182, 0, 0, 0, 0, 94,
	95, 183, 184, 185, 96, 186, 187, 0, 97, 188,
	189, 98, 0, 0, 190, 191, 192, 0, 193, 0,
	0, 0, 99, 100, 101, 0, 102, 0, 103, 0,
	0, 104, 105, 0, 0, 0, 0, 0, 0, 106,
	107, 108, 109, 194, 110, 195, 196, 0, 0, 111,
	0, 0, 0, 112, 113, 0, 0, 0, 0, 197,
	114, 198, 0, 0, 115, 116, 199, 117, 0, 0,
	0, 0, 0, 118, 200, 0, 201, 0, 119, 120,
	284, 203, 0, 0, 121, 0, 0, 122, 204, 205,
	206, 0, 207, 0, 0, 123, 0, 124, 125, 0,
	0, 208, 0, 126, 0, 0, 265, 0, 0, 127,
	0, 128, 129, 130, 131, 266, 0, 132, 133, 134,
	0, 135, 0, 209, 136, 210, 137, 138, 0, 0,
	278, 0, 0, 139, 211, 0, 140, 0, 212, 141,
	142, 0, 213, 143, 214, 0, 144, 145, 146, 215,
	147, 148, 0, 149, 150, 151, 0, 152, 0, 153,
	154, 216, 155, 0, 156, 157, 0, 158, 267, 0,
	159, 160, 0, 161, 217, 162, 0, 163, 164, 166,
	218, 165, 219, 0, 0, 167, 168, 0, 269, 220,
	0, 0, 268, 221, 222, 0, 169, 170, 171, 172,
	0, 88, 173, 174, 0, 0, 175, 176, 177, 223,
	224, 0, 178, 91, 92, 0, 93, 179, 180, 181,
	182, 0, 0, 0, 0, 94, 95, 183, 184, 185,
	96, 186, 187, 0, 97, 188, 189, 98, 0, 0,
	190, 191, 192, 0, 193, 0, 0, 0, 99, 100,
	101, 0, 102, 0, 103, 0, 0, 104, 105, 0,
	0, 0, 0, 0, 0, 106, 107, 108, 109, 194,
	110, 195, 196, 0, 0, 111, 0, 0, 0, 112,
	113, 0, 0, 0, 0, 197, 114, 198, 0, 0,
	115, 116, 199, 117, 0, 0, 0, 0, 0, 118,
	200, 0, 201, 0, 119, 120, 202, 203, 0, 0,
	121, 0, 0, 122, 204, 205, 206, 0, 207, 0,
	0, 123, 0, 124, 125, 0, 0, 208, 0, 126,
	0, 0, 265, 0, 0, 127, 0, 128, 129, 130,
	131, 266, 0, 132, 133, 134, 0, 135, 0, 209,
	136, 210, 137, 138, 0, 0, 0, 0, 0, 139,
	211, 0, 140, 0, 212, 141, 142, 0, 213, 143,
	214, 0, 144, 145, 146, 215, 147, 148, 0, 149,
	150, 151, 0, 152, 0, 153, 154, 216, 155, 0,
	156, 157, 0, 158, 267, 0, 159, 160, 0, 161,
	217, 162, 0, 163, 164, 166, 218, 165, 219, 0,
	0, 167, 168, 0, 269, 220, 0, 0, 268, 221,
	222, 0, 169, 170, 171, 172, 0, 88, 173, 174,
	0, 0, 175, 176, 177, 223, 224, 0, 178, 91,
	92, 0, 93, 179, 180, 181, 182, 0, 0, 0,
	0, 94, 95, 183, 184, 185, 96, 186, 187, 0,
	97, 188, 189, 98, 0, 0, 190, 191, 192, 0,
	193, 0, 0, 0, 99, 100, 101, 0, 102, 0,
	103, 0, 0, 104, 105, 0, 0, 0, 0, 0,
	0, 106, 107, 108, 109, 194, 110, 195, 196, 0,
	0, 111, 0, 0, 0, 112, 113, 0, 0, 0,
	0, 197, 114, 198, 0, 0, 115, 116, 199, 117,
	0, 0, 0, 0, 0, 118, 200, 0, 201, 0,
	119, 120, 1055, 203, 0, 0, 121, 0, 0, 122,
	204, 205, 206, 0, 207, 0, 0, 123, 0, 124,
	125, 0, 0, 208, 0, 126, 0, 0, 265, 0,
	0, 127, 0, 128, 129, 130, 131, 266, 0, 132,
	133, 134, 0, 135, 0, 209, 136, 210, 137, 138,
	0, 0, 0, 0, 0, 139, 211, 0, 140, 0,
	212, 141, 142, 0, 213, 143, 214, 0, 144, 145,
	146, 215, 147, 148, 0, 149, 150, 151, 0, 152,
	0, 153, 154, 216, 155, 0, 156, 157, 0, 158,
	267, 0, 159, 160, 0, 161, 217, 162, 0, 163,
	164, 166, 218, 165, 219, 0, 0, 167, 168, 0,
	269, 220, 0, 0, 268, 221, 222, 0, 169, 170,
	171, 172, 0, 88, 173, 174, 0, 0, 175, 176,
	177, 223, 224, 0, 178, 91, 92, 0, 93, 179,
	180, 181, 182, 0, 0, 0, 0, 94, 95, 183,
	184, 185, 96, 186, 187, 0, 97, 188, 189, 98,
	0, 0, 190, 191, 192, 0, 193, 0, 0, 0,
	99, 100, 101, 0, 102, 0, 103, 0, 0, 104,
	105, 0, 0, 0, 0, 0, 0, 106, 107, 108,
	109, 194, 110, 195, 196, 0, 0, 111, 0, 0,
	0, 112, 113, 0, 0, 0, 0, 197, 114, 198,
	0, 0, 115, 116, 199, 117, 0, 0, 0, 0,
	0, 118, 200, 0, 201, 0, 119, 120, 1053, 203,
	0, 0, 121, 0, 0, 122, 204, 205, 206, 0,
	207, 0, 0, 123, 0, 124, 125, 0, 0, 208,
	0, 126, 0, 0, 265, 0, 0, 127, 0, 128,
	129, 130, 131, 266, 0, 132, 133, 134, 0, 135,
	0, 209, 136, 210, 137, 138, 0, 0, 0, 0,
	0, 139, 211, 0, 140, 0, 212, 141, 142, 0,
	213, 143, 214, 0, 144, 145, 146, 215, 147, 148,
	0, 149, 150, 151, 0, 152, 0, 153, 154, 216,
	155, 0, 156, 157, 0, 158, 267, 0, 159, 160,
	0, 161, 217, 162, 0, 163, 164, 166, 218, 165,
	219, 0, 0, 167, 168, 0, 269, 220, 0, 0,
	268, 221, 222, 0, 169, 170, 171, 172, 0, 88,
	173, 174, 0, 0, 175, 176, 177, 223, 224, 0,
	178, 91, 92, 0, 93, 179, 180, 181, 182, 0,
	0, 0, 0, 94, 95, 183, 184, 185, 96, 186,
	187, 0, 97, 188, 189, 98, 0, 0, 190, 191,
	192, 0, 193, 0, 0, 0, 99, 100, 101, 0,
	102, 0, 103, 0, 0, 104, 105, 0, 0, 0,
	0, 0, 0, 106, 107, 108, 109, 194, 110, 195,
	196, 0, 0, 111, 0, 0, 0, 112, 113, 0,
	0, 0, 0, 197, 114, 198, 0, 0, 115, 116,
	199, 117, 0, 0, 0, 0, 0, 118, 200, 0,
	201, 0, 119, 120, 1044, 203, 0, 0, 121, 0,
	0, 122, 204, 205, 206, 0, 207, 0, 0, 123,
	0, 124, 125, 0, 0, 208, 0, 126, 0, 0,
	265, 0, 0, 127, 0, 128, 129, 130, 131, 266,
	0, 132, 133, 134, 0, 135, 0, 209, 136, 210,
	137, 138, 0, 0, 0, 0, 0, 139, 211, 0,
	140, 0, 212, 141, 142, 0, 213, 143, 214, 0,
	144, 145, 146, 215, 147, 148, 0, 149, 150, 151,
	0, 152, 0, 153, 154, 216, 155, 0, 156, 157,
	0, 158, 267, 0, 159, 160, 0, 161, 217, 162,
	0, 163, 164, 166, 218, 165, 219, 0, 0, 167,
	168, 0, 269, 220, 0, 0, 268, 221, 222, 0,
	169, 170, 171, 172, 0, 88, 173, 174, 0, 0,
	175, 176, 177, 223, 224, 0, 178, 91, 92, 0,
	93, 179, 180, 181, 182, 0, 0, 0, 0, 94,
	95, 183, 184, 185, 96, 186, 187, 0, 97, 188,
	189, 98, 0, 0, 190, 191, 192, 0, 193, 0,
	0, 0, 99, 100, 101, 0, 102, 0, 103, 0,
	0, 104, 105, 0, 0, 0, 0, 0, 0, 106,
	107, 108, 109, 194, 110, 195, 196, 0, 0, 111,
	0, 0, 0, 112, 113, 0, 0, 0, 0, 197,
	114, 198, 0, 0, 115, 116, 199, 117, 0, 0,
	0, 0, 0, 118, 200, 0, 201, 0, 119, 120,
	662, 203, 0, 0, 121, 0, 0, 122, 204, 205,
	206, 0, 207, 0, 0, 123, 0, 124, 125, 0,
	0, 208, 0, 126, 0, 0, 265, 0, 0, 127,
	0, 128, 129, 130, 131, 266, 0, 132, 133, 134,
	0, 135, 0, 209, 136, 210, 137, 138, 0, 0,
	0, 0, 0, 139, 211, 0, 140, 0, 212, 141,
	142, 0, 213, 143, 214, 0, 144, 145, 146, 215,
	147, 148, 0, 149, 150, 151, 0, 152, 0, 153,
	154, 216, 155, 0, 156, 157, 0, 158, 267, 0,
	159, 160, 0, 161, 217, 162, 0, 163, 164, 166,
	218, 165, 219, 0, 0, 167, 168, 0, 269, 220,
	0, 0, 268, 221, 222, 0, 169, 170, 171, 172,
	0, 88, 173, 174, 0, 0, 175, 176, 177, 223,
	224, 0, 178, 91, 92, 0, 93, 179, 180, 181,
	182, 0, 505, 0, 0, 94, 95, 183, 184, 185,
	96, 186, 187, 0, 97, 188, 189, 98, 0, 0,
	190, 191, 192, 0, 193, 0, 0, 0, 99, 100,
	101, 0, 102, 0, 103, 0, 0, 104, 105, 0,
	0, 0, 0, 0, 0, 106, 107, 108, 109, 194,
	110, 195, 196, 0, 0, 111, 0, 0, 0, 112,
	113, 0, 0, 0, 0, 197, 114, 198, 0, 0,
	115, 116, 199, 117, 0, 0, 0, 0, 0, 118,
	200, 0, 201, 0, 119, 120, 202, 203, 0, 0,
	121, 0, 0, 122, 204, 205, 206, 0, 207, 0,
	0, 123, 0, 124, 125, 0, 0, 208, 0, 126,
	0, 0, 265, 0, 0, 127, 0, 128, 129, 130,
	131, 266, 0, 132, 133, 134, 0, 135, 0, 209,
	136, 210, 137, 138, 0, 0, 0, 0, 0, 139,
	211, 0, 140, 0, 212, 141, 142, 0, 213, 143,
	214, 0, 144, 145, 146, 215, 147, 148, 0, 149,
	150, 151, 0, 152, 0, 153, 154, 216, 155, 0,
	156, 157, 0, 158, 267, 0, 0, 160, 0, 161,
	217, 162, 0, 163, 164, 166, 218, 165, 219, 0,
	0, 167, 168, 0, 269, 220, 0, 0, 268, 221,
	222, 0, 169, 170, 171, 172, 0, 88, 173, 174,
	0, 0, 175, 176, 177, 223, 224, 0, 178, 91,
	92, 0, 93, 179, 180, 181, 182, 0, 0, 0,
	0, 94, 95, 183, 184, 185, 96, 186, 187, 0,
	97, 188, 189, 98, 0, 0, 190, 191, 192, 0,
	193, 0, 0, 0, 99, 100, 101, 0, 102, 0,
	103, 0, 0, 104, 105, 0, 0, 0, 0, 0,
	0, 106, 107, 108, 109, 194, 110, 195, 196, 0,
	0, 111, 0, 0, 0, 112, 113, 0, 0, 0,
	0, 197, 114, 198, 0, 0, 115, 116, 199, 117,
	0, 0, 0, 0, 0, 118, 200, 0, 201, 0,
	119, 120, 362, 203, 0, 0, 121, 0, 0, 122,
	204, 205, 206, 0, 207, 0, 0, 123, 0, 124,
	125, 0, 0, 208, 0, 126, 0, 0, 265, 0,
	0, 127, 0, 128, 129, 130, 131, 266, 0, 132,
	133, 134, 0, 135, 0, 209, 136, 210, 137, 138,
	0, 0, 0, 0, 0, 139, 211, 0, 140, 0,
	212, 141, 142, 0, 213, 143, 214, 0, 144, 145,
	146, 215, 147, 148, 0, 149, 150, 151, 0, 152,
	0, 153, 154, 216, 155, 0, 156, 157, 0, 158,
	267, 0, 159, 160, 0, 161, 217, 162, 0, 163,
	164, 166, 218, 165, 219, 0, 0, 167, 168, 0,
	269, 220, 0, 0, 268, 221, 222, 0, 169, 170,
	171, 172, 0, 88, 173, 174, 0, 0, 175, 176,
	177, 223, 224, 0, 178, 91, 92, 0, 93, 179,
	180, 181, 182, 0, 0, 0, 0, 94, 95, 183,
	184, 185, 96, 186, 187, 0, 97, 188, 189, 98,
	0, 0, 190, 191, 192, 0, 193, 0, 0, 0,
	99, 100, 101, 0, 102, 0, 103, 0, 0, 104,
	105, 0, 0, 0, 0, 0, 0, 106, 107, 108,
	109, 194, 110, 195, 196, 0, 0, 111, 0, 0,
	0, 112, 113, 0, 0, 0, 0, 197, 114, 198,
	0, 0, 115, 116, 199, 117, 0, 0, 0, 0,
	0, 118, 200, 0, 201, 0, 119, 120, 359, 203,
	0, 0, 121, 0, 0, 122, 204, 205, 206, 0,
	207, 0, 0, 123, 0, 124, 125, 0, 0, 208,
	0, 126, 0, 0, 265, 0, 0, 127, 0, 128,
	129, 130, 131, 266, 0, 132, 133, 134, 0, 135,
	0, 209, 136, 210, 137, 138, 0, 0, 0, 0,
	0, 139, 211, 0, 140, 0, 212, 141, 142, 0,
	213, 143, 214, 0, 144, 145, 146, 215, 147, 148,
	0, 149, 150, 151, 0, 152, 0, 153, 154, 216,
	155, 0, 156, 157, 0, 158, 267, 0, 159, 160,
	0, 161, 217, 162, 0, 163, 164, 166, 218, 165,
	219, 0, 0, 167, 168, 0, 269, 220, 0, 0,
	268, 221, 222, 0, 169, 170, 171, 172, 0, 88,
	173, 174, 0, 0, 175, 176, 177, 223, 224, 0,
	178, 91, 92, 0, 93, 179, 180, 181, 182, 0,
	0, 0, 0, 94, 95, 183, 184, 185, 96, 186,
	187, 0, 97, 188, 189, 98, 0, 0, 190, 191,
	325, 0, 193, 0, 0, 0, 99, 100, 101, 0,
	102, 0, 103, 0, 0, 104, 105, 0, 0, 0,
	0, 0, 0, 106, 107, 108, 109, 194, 110, 195,
	196, 0, 0, 111, 0, 0, 0, 112, 113, 0,
	0, 0, 0, 197, 114, 198, 0, 0, 115, 116,
	199, 117, 0, 0, 0, 0, 0, 118, 200, 0,
	201, 0, 119, 120, 202, 203, 0, 0, 121, 0,
	0, 122, 204, 205, 206, 0, 207, 0, 0, 123,
	0, 124, 125, 0, 0, 208, 0, 126, 0, 0,
	265, 0, 0, 127, 0, 128, 129, 130, 131, 85,
	0, 132, 133, 134, 0, 135, 0, 209, 136, 210,
	137, 138, 0, 0, 0, 0, 0, 139, 211, 0,
	140, 0, 212, 141, 142, 0, 213, 143, 214, 0,
	144, 145, 146, 215, 147, 148, 0, 149, 150, 151,
	0, 152, 0, 153, 154, 216, 155, 0, 156, 157,
	0, 158, 267, 0, 159, 160, 0, 161, 217, 162,
	0, 163, 164, 166, 218, 165, 219, 0, 0, 167,
	168, 0, 84, 220, 0, 0, 80, 221, 222, 0,
	169, 170, 171, 172, 0, 88, 173, 174, 0, 0,
	175, 176, 177, 223, 224, 0, 178, 91, 92, 0,
	93, 179, 180, 181, 182, 0, 0, 0, 0, 94,
	95, 183, 184, 185, 96, 186, 187, 0, 97, 188,
	189, 98, 0, 0, 190, 191, 192, 0, 193, 0,
	0, 0, 99, 100, 101, 0, 102, 0, 103, 0,
	0, 104, 105, 0, 0, 0, 0, 0, 0, 106,
	107, 108, 109, 194, 110, 195, 196, 0, 0, 111,
	0, 0, 0, 112, 113, 0, 0, 0, 0, 197,
	114, 198, 0, 0, 115, 116, 199, 117, 0, 0,
	0, 0, 0, 118, 200, 0, 201, 0, 119, 120,
	202, 203, 0, 0, 121, 0, 0, 122, 204, 205,
	206, 0, 207, 0, 0, 123, 0, 124, 125, 0,
	0, 208, 0, 126, 0, 0, 265, 0, 0, 127,
	0, 128, 129, 130, 131, 85, 0, 132, 133, 134,
	0, 135, 0, 209, 136, 210, 137, 138, 0, 0,
	0, 0, 0, 139, 211, 0, 140, 0, 212, 141,
	142, 0, 213, 143, 214, 0, 144, 145, 146, 215,
	147, 148, 0, 149, 150, 151, 0, 152, 0, 153,
	154, 216, 155, 0, 156, 157, 0, 158, 267, 0,
	159, 160, 0, 161, 217, 162, 0, 163, 164, 166,
	218, 165, 219, 0, 0, 167, 168, 0, 84, 220,
	0, 0, 80, 221, 222, 0, 169, 170, 171, 172,
	0, 88, 173, 174, 0, 0, 175, 176, 177, 223,
	224, 0, 178, 91, 92, 0, 93, 179, 180, 181,
	182, 0, 0, 0, 0, 94, 95, 183, 184, 185,
	96, 186, 187, 0, 97, 188, 189, 98, 0, 0,
	190, 191, 192, 0, 193, 0, 0, 0, 99, 100,
	101, 0, 102, 0, 103, 0, 0, 104, 105, 0,
	0, 0, 0, 0, 0, 106, 107, 108, 109, 194,
	110, 195, 196, 0, 0, 111, 0, 0, 0, 112,
	113, 0, 0, 0, 0, 197, 114, 198, 0, 0,
	115, 116, 199, 117, 0, 0, 0, 0, 0, 118,
	200, 0, 201, 0, 119, 120, 298, 203, 0, 0,
	121, 0, 0, 122, 204, 205, 206, 0, 207, 0,
	0, 123, 0, 124, 125, 0, 0, 208, 0, 126,
	0, 0, 265, 0, 0, 127, 0, 128, 129, 130,
	131, 266, 0, 132, 133, 134, 0, 135, 0, 209,
	136, 210, 137, 138, 0, 0, 0, 0, 0, 139,
	211, 0, 140, 0, 212, 141, 142, 0, 213, 143,
	214, 0, 144, 145, 146, 215, 147, 148, 0, 149,
	150, 151, 0, 152, 0, 153, 154, 216, 155, 0,
	156, 157, 0, 158, 267, 0, 159, 160, 0, 161,
	217, 162, 0, 163, 164, 166, 218, 165, 219, 0,
	0, 167, 168, 0, 269, 220, 0, 0, 268, 221,
	222, 0, 169, 170, 171, 172, 0, 88, 173, 174,
	0, 0, 175, 176, 177, 223, 224, 0, 178, 91,
	92, 0, 93, 179, 180, 181, 182, 0, 0, 0,
	0, 94, 95, 183, 184, 185, 96, 186, 187, 0,
	97, 188, 189, 98, 0, 0, 190, 191, 192, 0,
	193, 0, 0, 0, 99, 100, 101, 0, 102, 0,
	103, 0, 0, 104, 105, 0, 0, 0, 0, 0,
	0, 106, 107, 108, 109, 194, 110, 195, 196, 0,
	0, 111, 0, 0, 0, 112, 113, 0, 0, 0,
	0, 197, 114, 198, 0, 0, 115, 116, 199, 117,
	0, 0, 0, 0, 0, 118, 200, 0, 201, 0,
	119, 120, 295, 203, 0, 0, 121, 0, 0, 122,
	204, 205, 206, 0, 207, 0, 0, 123, 0, 124,
	125, 0, 0, 208, 0, 126, 0, 0, 265, 0,
	0, 127, 0, 128, 129, 130, 131, 266, 0, 132,
	133, 134, 0, 135, 0, 209, 136, 210, 137, 138,
	0, 0, 0, 0, 0, 139, 211, 0, 140, 0,
	212, 141, 142, 0, 213, 143, 214, 0, 144, 145,
	146, 215, 147, 148, 0, 149, 150, 151, 0, 152,
	0, 153, 154, 216, 155, 0, 156, 157, 0, 158,
	267, 0, 159, 160, 0, 161, 217, 162, 0, 163,
	164, 166, 218, 165, 219, 0, 0, 167, 168, 0,
	269, 220, 0, 0, 268, 221, 222, 0, 169, 170,
	171, 172, 0, 88, 173, 174, 0, 0, 175, 176,
	177, 223, 224, 0, 178, 91, 92, 0, 93, 179,
	180, 181, 182, 0, 0, 0, 0, 94, 95, 183,
	184, 185, 96, 186, 187, 0, 97, 188, 189, 98,
	0, 0, 190, 191, 192, 0, 193, 0, 0, 0,
	99, 100, 101, 0, 102, 0, 103, 0, 0, 104,
	105, 0, 0, 0, 0, 0, 0, 106, 107, 108,
	109, 194, 110, 195, 196, 0, 0, 111, 0, 0,
	0, 112, 113, 0, 0, 0, 0, 197, 114, 198,
	0, 0, 115, 116, 199, 117, 0, 0, 0, 0,
	0, 118, 200, 0, 201, 0, 119, 120, 293, 203,
	0, 0, 121, 0, 0, 122, 204, 205, 206, 0,
	207, 0, 0, 123, 0, 124, 125, 0, 0, 208,
	0, 126, 0, 0, 265, 0, 0, 127, 0, 128,
	129, 130, 131, 266, 0, 132, 133, 134, 0, 135,
	0, 209, 136, 210, 137, 138, 0, 0, 0, 0,
	0, 139, 211, 0, 140, 0, 212, 141, 142, 0,
	213, 143, 214, 0, 144, 145, 146, 215, 147, 148,
	0, 149, 150, 151, 0, 152, 0, 153, 154, 216,
	155, 0, 156, 157, 0, 158, 267, 0, 159, 160,
	0, 161, 217, 162, 0, 163, 164, 166, 218, 165,
	219, 0, 0, 167, 168, 0, 269, 220, 0, 0,
	268, 221, 222, 0, 169, 170, 171, 172, 0, 88,
	173, 174, 0, 0, 175, 176, 177, 223, 224, 0,
	178, 91, 92, 0, 93, 179, 180, 181, 182, 0,
	0, 0, 0, 94, 95, 183, 184, 185, 96, 186,
	187, 0, 97, 188, 189, 98, 0, 0, 190, 191,
	192, 0, 193, 0, 0, 0, 99, 100, 101, 0,
	102, 0, 103, 0, 0, 104, 105, 0, 0, 0,
	0, 0, 0, 106, 107, 108, 109, 194, 110, 195,
	196, 0, 0, 111, 0, 0, 0, 112, 113, 0,
	0, 0, 0, 197, 114, 198, 0, 0, 115, 116,
	199, 117, 0, 0, 0, 0, 0, 118, 200, 0,
	201, 0, 119, 120, 287, 203, 0, 0, 121, 0,
	0, 122, 204, 205, 206, 0, 207, 0, 0, 123,
	0, 124, 125, 0, 0, 208, 0, 126, 0, 0,
	265, 0, 0, 127, 0, 128, 129, 130, 131, 266,
	0, 132, 133, 134, 0, 135, 0, 209, 136, 210,
	137, 138, 0, 0, 0, 0, 0, 139, 211, 0,
	140, 0, 212, 141, 142, 0, 213, 143, 214, 0,
	144, 145, 146, 215, 147, 148, 0, 149, 150, 151,
	0, 152, 0, 153, 154, 216, 155, 0, 156, 157,
	0, 158, 267, 0, 159, 160, 0, 161, 217, 162,
	0, 163, 164, 166, 218, 165, 219, 0, 0, 167,
	168, 0, 269, 220, 0, 0, 268, 221, 222, 0,
	169, 170, 171, 172, 0, 88, 173, 174, 0, 0,
	175, 176, 177, 223, 224, 0, 178, 91, 92, 0,
	93, 179, 180, 181, 182, 0, 0, 0, 0, 94,
	95, 183, 184, 185, 96, 186, 187, 0, 97, 188,
	189, 98, 0, 0, 190, 191, 192, 0, 193, 0,
	0, 0, 99, 100, 101, 0, 102, 0, 103, 0,
	0, 104, 105, 0, 0, 0, 0, 0, 0, 106,
	107, 108, 109, 194, 110, 195, 196, 0, 0, 111,
	0, 0, 0, 112, 113, 0, 0, 0, 0, 197,
	114, 198, 0, 0, 115, 116, 199, 117, 0, 0,
	0, 0, 0, 118, 200, 0, 201, 0, 119, 120,
	202, 203, 0, 0, 121, 0, 0, 122, 204, 205,
	206, 0, 207, 0, 0, 123, 0, 124, 125, 0,
	0, 208, 0, 126, 0, 0, 265, 0, 0, 127,
	0, 128, 129, 130, 131, 266, 0, 132, 133, 134,
	0, 135, 0, 209, 136, 210, 137, 138, 0, 0,
	0, 0, 0, 139, 211, 0, 140, 0, 212, 141,
	142, 0, 213, 143, 214, 0, 144, 145, 146, 215,
	262, 148, 0, 149, 150, 151, 0, 152, 0, 153,
	154, 216, 155, 0, 156, 157, 0, 158, 267, 0,
	159, 160, 0, 161, 217, 162, 0, 163, 164, 166,
	218, 165, 219, 0, 0, 167, 168, 0, 269, 220,
	0, 0, 268, 221, 222, 0, 169, 170, 171, 172,
	0, 88, 173, 174, 0, 0, 175, 176, 177, 223,
	224, 0, 178, 91, 92, 0, 93, 179, 180, 181,
	182, 0, 0, 0, 0, 94, 95, 183, 184, 185,
	96, 186, 187, 0, 97, 188, 189, 98, 0, 0,
	190, 191, 192, 0, 193, 0, 0, 0, 99, 100,
	101, 0, 102, 0, 103, 0, 0, 104, 105, 0,
	0, 0, 0, 0, 0, 106, 107, 108, 109, 194,
	110, 195, 196, 0, 0, 111, 0, 0, 0, 112,
	113, 0, 0, 0, 0, 197, 114, 198, 0, 0,
	115, 116, 199, 117, 0, 0, 0, 0, 0, 118,
	200, 0, 201, 0, 119, 120, 202, 203, 0, 0,
	121, 0, 0, 122, 204, 205, 206, 0, 207, 0,
	0, 123, 0, 124, 125, 0, 0, 208, 0, 126,
	0, 0, 78, 0, 0, 127, 0, 128, 129, 130,
	131, 85, 0, 132, 133, 134, 0, 135, 0, 209,
	136, 210, 137, 138, 0, 0, 0, 0, 0, 139,
	211, 0, 140, 0, 212, 141, 142, 0, 213, 143,
	214, 0, 144, 145, 146, 215, 147, 148, 0, 149,
	150, 151, 0, 152, 0, 153, 154, 216, 155, 0,
	156, 157, 0, 158, 79, 0, 159, 160, 0, 161,
	217, 162, 0, 163, 164, 166, 218, 165, 219, 0,
	0, 167, 168, 0, 84, 220, 0, 0, 80, 221,
	222, 0, 169, 170, 171, 172, 0, 88, 173, 174,
	0, 0, 175, 176, 177, 223, 224, 0, 178, 91,
	92, 0, 93, 179, 180, 181, 182, 0, 0, 0,
	0, 94, 95, 183, 184, 185, 96, 186, 187, 0,
	97, 188, 189, 98, 0, 0, 190, 191, 192, 0,
	193, 0, 0, 0, 99, 100, 101, 0, 102, 0,
	103, 0, 0, 104, 105, 0, 0, 0, 0, 0,
	0, 106, 107, 108, 109, 194, 110, 195, 196, 0,
	0, 111, 0, 0, 0, 112, 113, 0, 0, 0,
	0, 197, 114, 198, 0, 0, 115, 116, 199, 117,
	0, 0, 0, 0, 0, 118, 200, 0, 201, 0,
	119, 120, 202, 203, 0, 0, 121, 0, 0, 122,
	204, 205, 206, 0, 207, 0, 0, 123, 0, 124,
	125, 0, 0, 208, 0, 126, 0, 0, 265, 0,
	0, 127, 0, 128, 129, 130, 131, 266, 0, 132,
	133, 134, 0, 135, 0, 209, 136, 210, 137, 138,
	0, 0, 0, 0, 0, 139, 211, 0, 140, 0,
	212, 141, 0, 0, 213, 143, 214, 0, 144, 0,
	146, 215, 147, 148, 0, 149, 150, 151, 0, 152,
	0, 153, 154, 216, 0, 0, 156, 157, 0, 158,
	267, 0, 159, 160, 0, 161, 217, 162, 0, 163,
	164, 166, 218, 165, 219, 0, 0, 167, 168, 0,
	269, 220, 0, 0, 268, 221, 222, 0, 169, 170,
	171, 172, 0, 0, 173, 174, 0, 0, 175, 176,
	177, 223, 224, 686, 178, 704, 705, 706, 0, 179,
	180, 181, 182, 0, 0, 707, 0, 0, 0, 0,
	0, 688, 0, 713, 0, 0, 0, 0, 686, 0,
	704, 705, 706, 0, 0, 0, 0, 0, 0, 0,
	707, 687, 0, 0, 0, 0, 688, 701, 713, 0,
	0, 686, 0, 704, 705, 706, 0, 0, 0, 0,
	0, 0, 0, 707, 0, 0, 687, 0, 0, 688,
	0, 713, 701, 0, 0, 0, 686, 0, 704, 705,
	706, 0, 0, 0, 0, 0, 0, 0, 707, 687,
	0, 0, 0, 0, 688, 701, 713, 0, 0, 0,
	0, 0, 0, 0, 714, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 687, 0, 712, 0, 0, 0,
	701, 0, 0, 0, 0, 0, 709, 0, 0, 714,
	0, 0, 702, 0, 0, 0, 0, 0, 0, 0,
	0, 712, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 709, 714, 708, 0, 0, 0, 702, 0, 0,
	0, 0, 0, 0, 712, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 709, 0, 0, 714, 708, 0,
	702, 0, 0, 0, 0, 703, 0, 0, 0, 712,
	0, 0, 0, 0, 711, 0, 0, 0, 0, 709,
	0, 708, 0, 0, 0, 702, 0, 0, 0, 0,
	703, 0, 0, 0, 0, 0, 0, 0, 0, 711,
	0, 0, 0, 0, 0, 0, 708, 0, 0, 0,
	0, 0, 0, 703, 0, 0, 0, 0, 0, 0,
	0, 0, 711, 710, 0, 698, 699, 700, 0, 697,
	694, 695, 696, 689, 690, 691, 692, 693, 703, 0,
	0, 0, 0, 0, 0, 0, 1217, 711, 710, 0,
	698, 699, 700, 0, 697, 694, 695, 696, 689, 690,
	691, 692, 693, 0, 0, 0, 0, 0, 1577, 0,
	0, 710, 0, 698, 699, 700, 0, 697, 694, 695,
	696, 689, 690, 691, 692, 693, 0, 0, 0, 0,
	0, 1576, 0, 0, 0, 0, 710, 0, 698, 699,
	700, 0, 697, 694, 695, 696, 689, 690, 691, 692,
	693, 686, 0, 704, 705, 706, 1561, 0, 0, 0,
	0, 0, 0, 707, 0, 0, 0, 0, 0, 688,
	686, 713, 704, 705, 706, 0, 0, 0, 0, 0,
	0, 0, 707, 0, 0, 0, 0, 0, 688, 687,
	713, 0, 0, 0, 0, 701, 0, 0, 0, 686,
	0, 704, 705, 706, 0, 0, 0, 0, 687, 0,
	0, 707, 0, 0, 701, 0, 0, 688, 0, 713,
	0, 0, 0, 0, 686, 0, 704, 705, 706, 0,
	0, 0, 0, 0, 0, 0, 707, 687, 0, 0,
	0, 0, 688, 701, 713, 0, 0, 0, 0, 0,
	0, 0, 714, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 687, 0, 712, 0, 0, 0, 701, 0,
	0, 714, 0, 0, 709, 0, 0, 0, 0, 0,
	702, 0, 0, 712, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 709, 0, 0, 0, 0, 0, 702,
	714, 708, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 712, 0, 0, 0, 0, 0, 0, 0,
	708, 0, 709, 0, 0, 714, 0, 0, 702, 0,
	0, 0, 0, 703, 0, 0, 0, 712, 0, 0,
	0, 0, 711, 0, 0, 0, 0, 709, 0, 708,
	0, 0, 703, 702, 0, 0, 0, 0, 0, 0,
	0, 711, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 708, 0, 0, 0, 0, 0,
	0, 703, 0, 0, 0, 0, 0, 0, 0, 0,
	711, 710, 0, 698, 699, 700, 0, 697, 694, 695,
	696, 689, 690, 691, 692, 693, 703, 0, 0, 0,
	710, 1540, 698, 699, 700, 711, 697, 694, 695, 696,
	689, 690, 691, 692, 693, 0, 0, 0, 0, 0,
	1535, 0, 0, 0, 0, 0, 0, 0, 0, 710,
	0, 698, 699, 700, 0, 697, 694, 695, 696, 689,
	690, 691, 692, 693, 0, 0, 0, 0, 0, 1531,
	0, 0, 0, 0, 710, 0, 698, 699, 700, 0,
	697, 694, 695, 696, 689, 690, 691, 692, 693, 686,
	0, 704, 705, 706, 1473, 0, 0, 0, 0, 0,
	0, 707, 0, 0, 0, 0, 0, 688, 686, 713,
	704, 705, 706, 0, 0, 0, 0, 0, 0, 0,
	707, 0, 0, 0, 0, 0, 688, 687, 713, 0,
	0, 0, 0, 701, 0, 0, 0, 686, 0, 704,
	705, 706, 0, 0, 0, 0, 687, 0, 0, 707,
	0, 0, 701, 0, 0, 688, 0, 713, 0, 0,
	0, 0, 686, 0, 704, 705, 706, 0, 0, 0,
	0, 0, 0, 0, 707, 687, 0, 0, 0, 0,
	688, 701, 713, 0, 0, 0, 0, 0, 0, 0,
	714, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	687, 0, 712, 0, 0, 0, 701, 0, 0, 714,
	0, 0, 709, 0, 0, 0, 0, 0, 702, 0,
	0, 712, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 709, 0, 0, 0, 0, 0, 702, 714, 708,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	712, 0, 0, 0, 0, 0, 0, 0, 708, 0,
	709, 0, 0, 714, 0, 0, 702, 0, 0, 0,
	0, 703, 0, 0, 0, 712, 0, 0, 0, 0,
	711, 0, 0, 0, 0, 709, 0, 708, 0, 0,
	703, 702, 0, 0, 0, 0, 0, 0, 0, 711,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 708, 0, 0, 0, 0, 0, 0, 703,
	0, 0, 0, 0, 0, 0, 0, 0, 711, 710,
	0, 698, 699, 700, 0, 697, 694, 695, 696, 689,
	690, 691, 692, 693, 703, 0, 0, 0, 710, 1472,
	698, 699, 700, 711, 697, 694, 695, 696, 689, 690,
	691, 692, 693, 0, 0, 0, 0, 0, 1389, 0,
	0, 0, 0, 0, 0, 0, 0, 710, 0, 698,
	699, 700, 0, 697, 694, 695, 696, 689, 690, 691,
	692, 693, 0, 0, 0, 0, 0, 1327, 0, 0,
	0, 0, 710, 0, 698, 699, 700, 0, 697, 694,
	695, 696, 689, 690, 691, 692, 693, 686, 0, 704,
	705, 706, 1302, 0, 0, 0, 0, 0, 0, 707,
	0, 0, 0, 0, 0, 688, 686, 713, 704, 705,
	706, 0, 0, 0, 0, 0, 0, 0, 707, 0,
	0, 0, 0, 0, 688, 687, 713, 0, 0, 0,
	0, 701, 0, 0, 0, 0, 0, 686, 0, 704,
	705, 706, 0, 0, 687, 0, 0, 0, 0, 707,
	701, 0, 0, 0, 0, 688, 0, 713, 0, 0,
	686, 0, 704, 705, 706, 0, 0, 0, 0, 0,
	0, 0, 707, 0, 0, 687, 0, 0, 688, 0,
	713, 701, 0, 0, 0, 0, 0, 0, 714, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 687, 0,
	712, 0, 0, 0, 701, 0, 0, 714, 0, 0,
	709, 0, 0, 0, 0, 0, 702, 0, 0, 712,
	0, 0, 0, 1637, 0, 0, 0, 0, 0, 709,
	0, 0, 0, 0, 0, 702, 0, 708, 714, 0,
	0, 0, 0, 0, 0, 0, 0, 1209, 0, 1208,
	712, 0, 0, 0, 0, 0, 708, 0, 0, 0,
	709, 714, 0, 0, 0, 0, 702, 0, 0, 703,
	0, 0, 0, 712, 0, 0, 0, 0, 711, 0,
	0, 0, 0, 709, 0, 0, 0, 708, 703, 702,
	0, 0, 0, 0, 0, 0, 0, 711, 0, 1636,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	708, 0, 0, 0, 0, 0, 0, 0, 0, 703,
	0, 0, 0, 0, 0, 0, 0, 710, 711, 698,
	699, 700, 0, 697, 694, 695, 696, 689, 690, 691,
	692, 693, 703, 0, 0, 0, 710, 959, 698, 699,
	700, 711, 697, 694, 695, 696, 689, 690, 691, 692,
	693, 0, 0, 0, 1373, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 710, 0, 698,
	699, 700, 0, 697, 694, 695, 696, 689, 690, 691,
	692, 693, 0, 0, 0, 0, 0, 0, 0, 0,
	710, 0, 698, 699, 700, 0, 697, 694, 695, 696,
	689, 690, 691, 692, 693, 686, 0, 704, 705, 706,
	0, 0, 0, 0, 0, 0, 0, 707, 716, 0,
	0, 866, 0, 688, 686, 713, 704, 705, 706, 0,
	0, 0, 0, 0, 0, 0, 707, 0, 0, 715,
	0, 0, 688, 687, 713, 0, 0, 0, 0, 701,
	0, 0, 0, 686, 0, 704, 705, 706, 0, 0,
	0, 0, 687, 0, 0, 707, 0, 0, 701, 0,
	0, 688, 0, 713, 867, 0, 0, 0, 686, 0,
	704, 705, 706, 0, 0, 0, 0, 0, 0, 0,
	707, 687, 0, 0, 0, 0, 688, 701, 713, 0,
	0, 0, 0, 0, 0, 0, 714, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 687, 0, 712, 0,
	0, 0, 701, 0, 0, 714, 0, 0, 709, 0,
	0, 0, 0, 0, 702, 0, 0, 712, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 709, 0, 0,
	0, 0, 0, 702, 714, 708, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 712, 0, 0, 0,
	0, 0, 0, 0, 708, 0, 709, 0, 0, 714,
	0, 0, 702, 0, 0, 0, 0, 703, 0, 0,
	0, 712, 0, 0, 0, 0, 711, 0, 0, 0,
	0, 709, 0, 708, 257, 0, 703, 702, 0, 0,
	0, 0, 0, 0, 0, 711, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 708, 0,
	0, 0, 0, 0, 0, 703, 0, 0, 0, 0,
	0, 0, 0, 0, 711, 710, 0, 698, 699, 700,
	0, 697, 694, 695, 696, 689, 690, 691, 692, 693,
	703, 0, 0, 0, 710, 0, 698, 699, 700, 711,
	697, 694, 695, 696, 689, 690, 691, 692, 693, 0,
	0, 0, 0, 0, 1321, 0, 0, 0, 0, 0,
	0, 0, 0, 710, 0, 698, 699, 700, 0, 697,
	694, 695, 696, 689, 690, 691, 692, 693, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 710, 0,
	698, 699, 700, 0, 697, 694, 695, 696, 689, 690,
	691, 692, 693, 686, 0, 704, 705, 706, 0, 0,
	0, 0, 0, 0, 0, 707, 0, 0, 0, 0,
	0, 688, 686, 713, 704, 705, 706, 0, 0, 0,
	0, 0, 0, 0, 707, 0, 0, 1210, 0, 0,
	688, 687, 713, 0, 0, 0, 0, 701, 0, 0,
	0, 686, 0, 704, 705, 706, 0, 0, 0, 0,
	687, 0, 0, 707, 0, 0, 701, 0, 0, 688,
	0, 713, 0, 0, 0, 0, 686, 0, 704, 705,
	706, 0, 0, 0, 0, 0, 0, 0, 707, 687,
	0, 1172, 1215, 0, 688, 701, 713, 0, 0, 0,
	0, 0, 0, 0, 714, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 687, 0, 712, 0, 0, 0,
	701, 0, 0, 714, 0, 0, 709, 0, 0, 0,
	0, 0, 702, 0, 0, 712, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 709, 0, 0, 0, 0,
	0, 702, 714, 708, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 712, 0, 0, 0, 0, 0,
	0, 0, 708, 0, 709, 0, 0, 714, 0, 0,
	702, 0, 0, 0, 0, 703, 0, 0, 0, 712,
	0, 0, 0, 0, 711, 0, 0, 0, 0, 709,
	0, 708, 0, 0, 703, 702, 0, 0, 0, 0,
	0, 1177, 0, 711, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 708, 0, 0, 0,
	0, 0, 0, 703, 0, 0, 0, 0, 0, 0,
	0, 0, 711, 710, 0, 698, 699, 700, 0, 697,
	694, 695, 696, 689, 690, 691, 692, 693, 703, 0,
	0, 0, 710, 0, 698, 699, 700, 711, 697, 694,
	695, 696, 689, 690, 691, 692, 693, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 710, 0, 698, 699, 700, 0, 697, 694, 695,
	696, 689, 690, 691, 692, 693, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 710, 0, 698, 699,
	700, 0, 697, 694, 695, 696, 689, 690, 691, 692,
	693, 686, 0, 704, 705, 706, 0, 0, 0, 0,
	0, 0, 0, 707, 0, 0, 0, 0, 0, 688,
	686, 713, 704, 705, 706, 0, 0, 0, 0, 0,
	0, 0, 707, 0, 0, 0, 0, 0, 688, 687,
	713, 0, 0, 0, 0, 701, 0, 686, 0, 704,
	705, 706, 0, 0, 0, 0, 0, 0, 687, 0,
	0, 0, 0, 0, 701, 688, 0, 713, 0, 0,
	0, 0, 0, 0, 686, 0, 704, 705, 706, 0,
	0, 0, 0, 0, 0, 687, 0, 0, 0, 0,
	0, 701, 688, 686, 713, 0, 0, 0, 0, 0,
	0, 0, 714, 0, 0, 0, 0, 0, 0, 0,
	0, 688, 687, 713, 712, 0, 0, 0, 701, 0,
	0, 714, 0, 0, 709, 0, 0, 0, 0, 0,
	702, 687, 0, 712, 0, 0, 0, 701, 0, 0,
	0, 0, 0, 709, 0, 0, 0, 0, 714, 702,
	0, 708, 0, 0, 0, 0, 0, 0, 0, 0,
	712, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	709, 0, 0, 0, 0, 714, 702, 0, 0, 0,
	0, 0, 0, 703, 0, 0, 0, 0, 0, 0,
	0, 0, 711, 0, 714, 0, 0, 709, 0, 0,
	0, 0, 703, 702, 0, 0, 0, 0, 0, 0,
	0, 711, 0, 0, 0, 0, 709, 0, 0, 0,
	0, 0, 702, 0, 0, 0, 0, 0, 0, 703,
	0, 0, 0, 0, 0, 0, 0, 0, 711, 0,
	0, 710, 0, 698, 699, 700, 0, 697, 694, 695,
	696, 689, 690, 691, 692, 693, 703, 0, 0, 0,
	710, 0, 698, 699, 700, 711, 697, 694, 695, 696,
	689, 690, 691, 692, 693, 703, 0, 0, 0, 0,
	0, 0, 0, 0, 711, 0, 0, 710, 0, 698,
	699, 700, 0, 697, 694, 695, 696, 689, 690, 691,
	692, 693, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 710, 0, 698, 699, 700, 0,
	697, 694, 695, 696, 689, 690, 691, 692, 693, 0,
	0, 0, 0, 710, 0, 0, 0, 0, 0, 697,
	694, 695, 696, 689, 690, 691, 692, 693, 895, 910,
	886, 903, 902, 0, 0, 888, 887, 0, 0, 0,
	912, 911, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 908,
	0, 900, 899, 0, 0, 0, 0, 0, 0, 898,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 897, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 891, 892, 893, 0, 560, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 901, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 896, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	894, 0, 0, 0, 0, 0, 890, 0, 0, 0,
	0, 0, 889, 0, 0, 909, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 913,
}
var sqlPact = [...]int{

	111, -1000, 7, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 837,
	-1000, -1000, -1000, 647, 836, 159, 1766, 1766, -1000, -1000,
	16287, 1962, 413, 415, 413, 413, 413, 474, 596, 133,
	-1000, 553, -16, 16061, 12897, 1177, 5, 12445, 284, 111,
	12671, 12897, 15835, 1033, 924, 12445, 15609, 15383, 15157, -1000,
	8371, -1000, -1000, -1000, -1000, 800, -1000, 4, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 798, -1000, 14931, 14705,
	756, -1000, -1000, 465, 328, 1196, -1000, 16, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1032, -1000, 796,
	1027, 1025, 1022, 1018, 327, 777, -1000, 756, -1000, 756,
	-1000, -1000, -1000, 12445, -1000, 14479, 946, 14253, -1000, 553,
	-1000, -1000, -1000, 821, 1174, 1174, 1174, 1191, 138, 131,
	133, -7, 12897, -1000, 286, -1000, -1000, -1000, -1000, -1000,
	-7, 6373, 6373, -1000, -1000, 284, -1000, 119, 10823, -138,
	-1000, 6125, -1000, 850, 1094, 593, 585, 1091, 12445, 12897,
	513, 14027, -1000, 1089, 101, 1085, -1000, -35, 1084, -1000,
	-8, -1000, -1000, -1000, -1000, -1000, -1000, 284, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 11069, 1143, 11069, -1000, 1212, -1000, -1000, 3, -2,
	897, 947, 8865, 8619, 1132, 1008, -1000, -1000, -1000, 13,
	3629, 12897, 1048, 11069, 12897, 12897, 12897, -1000, 12897, -1000,
	894, -1000, -1000, -4, -5, -1000, 106, -1000, 282, 849,
	13801, -1000, 845, -1000, 821, -1000, 805, 891, 6887, 7631,
	133, -1000, -1000, 133, 133, 7631, -1000, -1000, 12897, -7,
	1211, 12897, 1016, -113, -1000, 18074, -1000, -1000, 7631, 7631,
	7631, 7631, 7631, 691, -1000, -1000, -1000, 4371, -1000, -1000,
	-138, 281, 240, -1000, -1000, 277, -138, -1000, -1000, -1000,
	-1000, 274, 1334, 341, -1000, -1000, -1000, 7631, 333, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1044, 271,
	270, -1000, -1000, -1000, -1000, 268, 267, 265, 264, 262,
	259, 255, 253, 252, 251, 250, 249, 245, 639, -1000,
	347, -1000, -1000, 347, 347, -1000, 234, 234, 236, -1000,
	-1000, -1000, 234, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 244, 50, -1000, -1000, -1000, 12897, -138, -1000,
	-1000, -1000, 3629, 7631, 3382, -14, -1000, 18711, -1000, -80,
	727, -1000, 11983, 1158, 1144, 1148, 12445, 463, 462, 12897,
	340, 62, 1210, 10331, -1000, 12897, 12897, -1000, 12897, -1000,
	-1000, 12897, 12897, 12897, -16, 11521, 461, -41, 11295, 12897,
	-1000, 12, -1000, -1000, 1015, 397, 628, 923, 819, -1000,
	-1000, -1000, -1000, -9, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1276, -1000, -1000, -1000, -1000, 1325,
	-9, -1000, -1000, -1000, -1000, -1000, 1333, -1000, -1000, -1000,
	-1000, 3629, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 12897, -1000,
	-1000, -1000, -1000, -1000, -1000, 628, 923, -1000, 12445, 11747,
	1083, 786, 843, -1000, 1076, -1000, -1000, -1000, -1000, 18711,
	-1000, 18711, 737, 937, -1000, 937, -15, -1000, 18055, -1000,
	243, -18, -1000, 340, 10085, 6373, 19037, 12897, 451, 7631,
	7631, 7631, 7631, 7631, 7631, 7631, 7631, 7631, 7631, 7631,
	7631, 7631, 7631, 7631, 7631, 7631, 7631, 7631, 7631, 7631,
	840, 459, 1096, 697, 224, 3629, -1000, 1242, 1242, 1242,
	18757, 18757, 130, -139, 17727, -22, -138, -1000, -1000, 5611,
	5363, -138, 3875, -1000, 914, 1323, 345, 18711, 1014, 976,
	242, 126, 125, 7631, 922, 7631, 7879, 7631, 7631, 4619,
	7631, 7631, 7631, 7631, 7631, 7631, -1000, 241, -1000, -1000,
	-1000, -1000, 1320, -1000, -1000, 1313, -1000, 1311, 340, 117,
	-1000, -1000, 2057, -1000, -1000, 6125, -1000, 701, 12897, 12897,
	12897, -1000, -1000, 839, 13575, -1000, 19037, 12897, -1000, 239,
	237, 910, 907, 12897, 12897, 13349, 13123, 12897, 645, 12897,
	12897, 559, 562, 7631, 757, -1000, 9593, 354, 12897, 44,
	-1000, -1000, -1000, 315, 12897, -1000, -1000, -1000, 101, -1000,
	-35, -1000, -1000, 12897, 11295, -41, -47, -1000, -1000, 12897,
	923, -1000, -1000, -1000, 586, -1000, 629, -1000, 9111, -1000,
	-1000, -1000, 914, -1000, -93, -1000, -1000, -1000, -1000, 115,
	-53, -1000, -1000, -1000, -1000, 12897, 276, 12897, 12897, 1072,
	12897, -1000, -1000, -1000, 7631, -1000, -1000, -1000, -16, 12897,
	-1000, 966, -68, 1278, 12219, 12219, -1000, 9347, -1000, -1000,
	1215, -1000, -1000, -1000, -1000, 66, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 236, 639, 234,
	234, 234, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	347, 347, 347, -1000, -1000, 325, 717, 717, 1284, 1284,
	1284, 744, 744, 1552, 631, 18803, 18803, 18803, 1601, 384,
	384, 18803, 18803, 18803, 18757, 18730, 213, 7631, 457, 662,
	224, 7631, -1000, 873, -1000, -1000, -1000, 1013, 223, 7879,
	7879, -1000, -1000, -1000, 4371, -1000, -1000, 210, 7631, -1000,
	7631, -23, -64, -1000, 18711, -1000, -26, -1000, -1000, -24,
	7631, 7631, 7631, 114, -1000, 456, -1000, 455, 453, 450,
	-1000, 191, 113, 518, -1000, 7631, 706, 190, 189, 7631,
	-1000, -1000, 18456, 112, 1011, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 98, 18431, 97, 2291, -1000, 7879, 7879, 7879,
	4371, 184, 96, 17800, -123, 18402, 6621, 6621, 6621, 95,
	18383, 7631, -123, 16743, 2593, 2564, -27, -31, -33, 1297,
	-37, 94, 93, 966, -1000, -1000, 7631, -1000, -1000, -1000,
	448, 446, 1070, -1000, 823, -1000, 740, 7631, 12897, 182,
	181, 654, -1000, 1062, 733, 1061, 733, -1000, -80, 621,
	-1000, -1000, 439, -1000, 6373, 18711, 562, 1151, -39, -1000,
	-1000, 340, 10331, 6125, -43, -1000, -93, -1000, -93, -1000,
	-1000, -1000, -1000, -1000, -1000, 12897, -1000, 11747, 180, 12897,
	179, 177, 12897, -1000, -1000, 89, -1000, -1000, -1000, -1000,
	-1000, 962, 1190, 10085, 919, 917, 10085, 1074, 702, 702,
	702, -1000, -1000, -1000, 12897, 175, -1000, 9839, 88, 1278,
	294, 292, -1000, 1287, 7631, 213, 7631, 7879, 7879, -1000,
	213, -1000, -1000, -1000, -1000, 1010, 174, 7631, 19037, 2676,
	2276, -45, 5115, -101, 17472, 7631, -1000, -1000, 240, -1000,
	87, 5877, -1000, 18103, -19, -19, -1000, 858, 627, 630,
	527, 1283, 1330, 1098, -1000, 7631, 18128, -1000, 10577, 343,
	714, 17447, 19037, -1000, 7631, -1000, 999, 7631, -1000, 19037,
	7879, 7879, 7879, 7879, 7879, 7879, 7879, 7879, 7879, 7879,
	7879, 7879, 7879, 7879, 7879, 7879, 7879, 7879, 896, 7879,
	1239, 1239, 1239, -112, 4867, -1000, 1038, 999, 7631, 7631,
	19037, 83, 80, 75, -1000, 7631, -123, 7631, 7631, 7631,
	-1000, -1000, -1000, 73, -1000, 1265, -1000, -1000, 962, 17746,
	12897, 12897, 12897, 1060, 808, -1000, 17418, -49, 12897, 12897,
	-1000, 934, 951, 385, 12897, -1000, 12897, -1000, 12897, 12897,
	12897, 12897, -113, -1000, 169, -16, 562, -1000, -1000, 314,
	-1000, -1000, 2957, 173, 11747, 2957, 755, -1000, 336, 7631,
	7631, 1278, 10085, 10085, 1131, 909, 10085, -1000, -1000, -1000,
	-1000, 172, 12897, 12219, 449, 1252, 52, 1223, 213, 1695,
	163, 7631, 19037, 18784, -54, -1000, 7631, 7631, -1000, -55,
	-1000, 7631, -1000, 18711, -1000, 1328, 7631, 51, 49, 38,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 33, -1000, -1000,
	18711, 7631, -1000, -1000, 16513, 7631, 31, -1000, 28, 18711,
	1038, 18711, -1000, 556, 556, 1239, 1239, 1239, 599, 599,
	660, 587, 238, 238, 238, 393, 470, 470, 238, 238,
	238, 995, 888, 171, 1888, 7631, -59, -1000, -1000, -1000,
	18711, 18711, 26, -1000, -1000, -1000, -123, 2252, 17399, 17144,
	-1000, 25, 336, -1000, -1000, -1000, -1000, 12897, -1000, 12897,
	-1000, 12897, 834, -1000, -1000, 905, 170, 7879, 12897, -1000,
	666, -60, -67, 814, -1000, 812, 7631, -1000, 19037, 733,
	733, -1000, 424, 419, -1000, 1103, 2957, 1147, -1000, -1000,
	168, -71, -1000, 77, 1165, 7631, -1000, -1000, 167, 2957,
	24, -72, 12897, -1000, 12897, 18711, -123, -1000, 1131, -1000,
	166, 7631, 10085, -1000, 12897, -78, -1000, -1000, 289, 132,
	-1000, 7631, 7631, 18784, -82, -1000, 19037, 213, 213, -1000,
	17119, -1000, 18103, -1000, -1000, -1000, -1000, 18711, 663, -1000,
	17090, -1000, -1000, -1000, 7879, 988, 165, 19037, 17071, -1000,
	-1000, 7631, -1000, -1000, -1000, -1000, -1000, 1232, -1000, -1000,
	-1000, 7631, 1888, 140, -1000, 164, -1000, -1000, -1000, 615,
	-1000, -1000, 18711, 1168, -1000, -1000, 12897, 12897, 483, -84,
	12897, -1000, -1000, 4123, 666, 2957, 1159, -138, 12897, 1159,
	16816, 3875, -86, -1000, 666, 160, -122, -1000, 1204, -1000,
	12897, 18711, -1000, -92, -1000, -1000, -1000, 213, 213, -1000,
	-1000, -1000, 23, 714, 1187, -1000, 2695, 7879, 19037, -102,
	-1000, 16791, -1000, 16768, 869, 12897, 12897, 12897, 364, 12897,
	-1000, -1000, 489, -1000, 340, -1000, -1000, -1000, -1000, -1000,
	-1000, 1165, -24, 666, -1000, 2957, 12897, 142, -103, -1000,
	-1000, 626, 7631, 2695, -108, -1000, -1000, -1000, 720, 640,
	-114, -115, 140, -1000, 7631, -1000, 10331, -1000, 1159, 19,
	-1000, -126, -1000, -1000, -1000, 18, 7383, 7383, -123, -1000,
	-1000, 738, 724, 529, -1000, -1000, -1000, -1000, -1000, 869,
	18711, -116, -1000, -1000, 666, -1000, -1000, -1000, 8125, 726,
	546, 17777, -1000, -1000, 1113, -1000, 367, 981, 981, 720,
	-1000, -1000, 1218, -1000, -1000, -1000, -1000, -1000, -1000, 1227,
	-1000, -1000, 908, -1000, -1000, 7135, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1556, 1553, 1217, 1552, 1551, 1550, 1549, 1548, 81,
	1545, 1543, 117, 1542, 78, 1541, 1540, 1539, 60, 1535,
	1534, 1529, 1527, 63, 50, 114, 1964, 112, 1524, 1516,
	1511, 12, 90, 88, 1509, 106, 85, 102, 1377, 44,
	38, 32, 26, 72, 1503, 1502, 1501, 1500, 25, 1498,
	1497, 1496, 10, 41, 13, 1495, 20, 70, 1494, 1492,
	98, 1490, 96, 101, 28, 110, 80, 1488, 57, 1487,
	9, 45, 1485, 24, 1484, 33, 55, 126, 1481, 36,
	616, 43, 23, 47, 1480, 1479, 1478, 1477, 54, 59,
	37, 1476, 1475, 53, 1474, 113, 115, 1471, 1470, 1468,
	1464, 1463, 1461, 1186, 1455, 1454, 591, 3, 22, 48,
	29, 109, 95, 30, 0, 743, 722, 1448, 34, 27,
	58, 35, 39, 18, 1446, 93, 1439, 1426, 1420, 1417,
	1414, 56, 1412, 49, 120, 31, 64, 69, 19, 40,
	65, 97, 124, 94, 1411, 105, 1407, 52, 1405, 1404,
	600, 91, 1402, 1398, 1395, 595, 563, 280, 42, 1394,
	1392, 190, 68, 1391, 1390, 62, 1386, 1384, 118, 1380,
	119, 99, 1379, 103, 1376, 71, 1373, 281, 121, 73,
	1372, 108, 46, 1368, 1366, 1364, 15, 2, 8, 5,
	6, 4, 17, 11, 1362, 1360, 111, 66, 1359, 567,
	1357, 1355, 16, 1352, 1349, 21, 1348, 14, 1347, 7,
	1, 1346, 123, 1345, 75, 1344, 1230, 1343, 122, 1342,
	1341, 1288, 61,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	4, 4, 33, 33, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 29,
	29, 35, 35, 35, 34, 34, 30, 30, 5, 5,
	5, 9, 10, 10, 10, 10, 10, 10, 65, 65,
	64, 64, 67, 67, 11, 11, 12, 12, 12, 12,
	146, 146, 145, 13, 17, 212, 212, 212, 216, 216,
	217, 217, 218, 218, 218, 218, 218, 218, 218, 214,
	214, 19, 19, 19, 19, 103, 103, 105, 105, 105,
	105, 37, 102, 102, 102, 102, 104, 104, 104, 104,
	170, 168, 168, 175, 175, 175, 45, 45, 45, 45,
	45, 46, 46, 46, 167, 167, 167, 167, 176, 176,
	176, 176, 176, 176, 47, 47, 47, 174, 174, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 169, 169, 213, 213, 215, 215, 8, 8,
	48, 48, 49, 49, 109, 109, 109, 108, 184, 184,
	185, 185, 185, 186, 186, 186, 186, 186, 186, 186,
	183, 183, 181, 181, 182, 182, 182, 182, 219, 219,
	107, 107, 52, 52, 189, 189, 189, 189, 187, 187,
	187, 187, 187, 190, 188, 191, 191, 191, 191, 191,
	134, 134, 134, 22, 7, 7, 92, 92, 56, 56,
	138, 138, 138, 41, 41, 31, 31, 31, 16, 16,
	16, 16, 16, 16, 16, 16, 16, 93, 93, 94,
	94, 21, 21, 21, 21, 21, 221, 221, 106, 106,
	106, 106, 106, 36, 6, 6, 14, 44, 44, 99,
	99, 99, 101, 101, 101, 100, 100, 100, 79, 79,
	23, 70, 70, 71, 71, 144, 72, 72, 18, 18,
	26, 26, 24, 24, 24, 24, 24, 24, 25, 25,
	27, 27, 27, 27, 27, 27, 27, 197, 197, 197,
	199, 199, 196, 15, 15, 15, 15, 198, 198, 220,
	220, 80, 80, 80, 51, 50, 50, 54, 54, 53,
	55, 55, 137, 77, 77, 77, 77, 95, 96, 96,
	97, 97, 98, 98, 76, 76, 121, 121, 28, 28,
	60, 60, 61, 61, 139, 139, 139, 139, 140, 140,
	140, 140, 140, 140, 135, 135, 135, 135, 136, 136,
	83, 83, 83, 83, 81, 81, 82, 82, 141, 141,
	141, 141, 78, 78, 142, 142, 142, 110, 110, 147,
	147, 147, 59, 59, 59, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 149, 149, 149, 149,
	151, 151, 151, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 152, 152, 159, 159,
	160, 160, 161, 162, 153, 153, 154, 154, 155, 156,
	163, 163, 163, 165, 165, 157, 157, 158, 89, 89,
	89, 89, 89, 89, 89, 89, 89, 89, 89, 89,
	89, 89, 90, 90, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 192, 192, 192, 192, 192,
	192, 192, 194, 194, 195, 195, 193, 193, 193, 193,
	193, 193, 193, 193, 193, 193, 193, 193, 193, 193,
	193, 193, 193, 193, 193, 193, 193, 193, 193, 193,
	193, 200, 200, 201, 201, 202, 202, 203, 203, 205,
	206, 206, 206, 207, 211, 211, 204, 204, 208, 208,
	208, 209, 209, 210, 210, 210, 210, 210, 125, 125,
	125, 126, 126, 127, 66, 66, 123, 123, 122, 122,
	122, 124, 124, 84, 164, 164, 164, 164, 164, 164,
	164, 85, 85, 91, 86, 86, 87, 87, 87, 87,
	87, 87, 118, 119, 88, 88, 88, 120, 120, 128,
	132, 132, 131, 130, 130, 129, 129, 113, 113, 113,
	113, 113, 112, 111, 73, 73, 222, 222, 133, 133,
	74, 74, 75, 69, 69, 68, 68, 143, 143, 143,
	143, 62, 62, 63, 63, 42, 42, 43, 43, 43,
	43, 57, 57, 58, 58, 40, 40, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 166, 166,
	166, 38, 38, 38, 39, 39, 172, 172, 172, 173,
	173, 173, 173, 171, 171, 171, 171, 171, 177, 177,
	177, 177, 177, 177, 177, 177, 177, 177, 177, 177,
	177, 177, 177, 177, 177, 177, 177, 177, 177, 177,
	177, 177, 177, 177, 177, 177, 177, 177, 177, 177,
	177, 177, 177, 177, 177, 177, 177, 177, 177, 177,
	177, 177, 177, 177, 177, 177, 177, 177, 177, 177,
	177, 177, 177, 177, 177, 177, 177, 177, 177, 177,
	177, 177, 177, 177, 177, 177, 177, 177, 177, 177,
	177, 177, 177, 177, 177, 177, 177, 177, 177, 177,
	177, 177, 177, 177, 177, 177, 177, 177, 177, 177,
	177, 177, 177, 177, 179, 179, 179, 179, 179, 179,
	179, 179, 179, 179, 179, 179, 179, 179, 179, 179,
	179, 179, 179, 179, 179, 179, 179, 179, 179, 179,
	179, 179, 179, 179, 179, 179, 179, 179, 179, 179,
	179, 179, 179, 179, 179, 179, 179, 178, 178, 178,
	178, 178, 178, 178, 178, 178, 178, 178, 178, 178,
	180, 180, 180, 180, 180, 180, 180, 180, 180, 180,
	180, 180, 180, 180, 180, 180, 180, 180, 180, 180,
	180, 180, 180, 180, 180, 180, 180, 180, 180, 180,
	180, 180, 180, 180, 180, 180, 180, 180, 180, 180,
	180, 180, 180, 180, 180, 180, 180, 180, 180, 180,
	180, 180, 180, 180, 180, 180, 180, 180, 180, 180,
	180, 180, 180, 180, 180, 180, 180, 180, 180, 180,
	180, 180, 180, 180, 180, 180, 180, 180,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	4, 6, 1, 3, 2, 5, 3, 6, 4, 6,
	6, 6, 4, 8, 2, 3, 3, 6, 4, 3,
	2, 1, 1, 0, 2, 0, 2, 0, 1, 1,
	1, 6, 3, 5, 4, 6, 3, 5, 1, 3,
	1, 2, 2, 3, 2, 5, 1, 1, 1, 1,
	1, 3, 1, 6, 6, 1, 2, 2, 1, 1,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 2, 3, 6, 3, 2, 1, 1, 1, 3,
	3, 2, 3, 3, 3, 3, 1, 3, 3, 2,
	1, 1, 3, 1, 1, 1, 2, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 1, 1, 1, 1, 1, 0, 1, 1, 2,
	2, 4, 2, 4, 4, 4, 4, 3, 3, 4,
	3, 2, 2, 0, 2, 0, 2, 0, 6, 9,
	1, 0, 1, 3, 1, 1, 1, 3, 2, 0,
	3, 1, 2, 2, 1, 1, 2, 4, 2, 5,
	6, 7, 3, 1, 4, 5, 5, 10, 1, 1,
	4, 0, 3, 0, 2, 2, 2, 0, 1, 1,
	2, 2, 0, 3, 3, 2, 1, 1, 2, 2,
	1, 2, 1, 4, 10, 13, 1, 0, 1, 3,
	3, 3, 5, 2, 0, 1, 1, 0, 6, 6,
	8, 6, 8, 8, 10, 8, 10, 1, 0, 2,
	0, 3, 3, 2, 2, 2, 1, 0, 1, 1,
	3, 3, 0, 3, 3, 6, 7, 1, 3, 1,
	4, 2, 8, 5, 0, 4, 3, 0, 2, 0,
	8, 1, 3, 1, 1, 3, 5, 5, 1, 1,
	3, 3, 1, 2, 3, 2, 3, 4, 1, 1,
	8, 8, 1, 2, 4, 4, 4, 2, 2, 3,
	1, 3, 6, 1, 1, 1, 1, 1, 0, 1,
	0, 1, 1, 0, 1, 1, 0, 1, 0, 3,
	1, 3, 2, 2, 2, 1, 1, 2, 2, 3,
	1, 1, 1, 1, 3, 0, 2, 0, 2, 3,
	2, 0, 1, 3, 2, 2, 1, 4, 3, 4,
	5, 4, 5, 4, 5, 2, 4, 1, 1, 0,
	2, 2, 2, 1, 1, 0, 4, 2, 1, 2,
	2, 4, 1, 3, 1, 2, 3, 2, 0, 2,
	5, 2, 3, 4, 0, 1, 1, 1, 1, 2,
	4, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 5, 0, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 2, 1, 1, 3, 0, 1, 1,
	1, 1, 5, 2, 1, 1, 1, 1, 4, 1,
	2, 2, 1, 1, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 0, 1, 4, 1, 3, 3, 5, 2, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 2, 2, 3, 4, 4, 5, 3, 4, 3,
	3, 4, 3, 4, 3, 4, 5, 6, 6, 7,
	6, 7, 6, 7, 3, 4, 1, 3, 2, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 5,
	6, 6, 7, 1, 1, 1, 3, 1, 1, 1,
	2, 2, 2, 1, 1, 3, 5, 6, 8, 6,
	6, 4, 4, 1, 1, 1, 5, 1, 3, 1,
	3, 1, 1, 1, 1, 6, 4, 4, 4, 4,
	6, 5, 5, 5, 4, 8, 6, 6, 4, 4,
	4, 5, 0, 5, 0, 2, 0, 1, 3, 3,
	2, 2, 0, 6, 1, 0, 3, 0, 2, 2,
	0, 1, 4, 2, 2, 2, 2, 2, 4, 3,
	5, 4, 3, 5, 1, 3, 1, 3, 3, 3,
	2, 1, 3, 3, 1, 1, 1, 1, 1, 1,
	1, 4, 3, 2, 3, 0, 3, 3, 2, 2,
	1, 0, 2, 2, 3, 2, 1, 1, 3, 5,
	1, 2, 4, 2, 0, 1, 0, 1, 1, 2,
	3, 5, 2, 2, 1, 2, 1, 0, 1, 1,
	1, 3, 3, 1, 0, 1, 3, 3, 2, 1,
	1, 1, 3, 1, 3, 1, 2, 1, 2, 2,
	1, 1, 3, 3, 0, 1, 2, 1, 1, 1,
	1, 6, 2, 3, 5, 1, 1, 1, 1, 2,
	2, 1, 1, 1, 1, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -9, -10, -11, -13,
	-14, -16, -17, -18, -19, -20, -21, -22, -23, 19,
	-6, -7, -8, -198, 83, 89, 101, 186, -24, -26,
	199, 200, 29, 207, 52, 85, 188, 225, 58, -197,
	-27, -25, 269, 245, 251, 195, -28, 213, 238, 272,
	213, 70, 112, 78, 116, 232, 70, 112, 213, -12,
	269, -18, -14, -23, -9, -216, 18, -217, -218, 58,
	83, 101, 195, 116, 78, 232, -216, -103, 135, 197,
	221, -104, -102, -170, 217, 144, -64, -38, 4, -177,
	-179, 16, 17, 19, 28, 29, 33, 37, 40, 51,
	52, 53, 55, 57, 60, 61, 68, 69, 70, 71,
	73, 78, 82, 83, 89, 93, 94, 96, 102, 107,
	108, 113, 116, 124, 126, 127, 132, 138, 140, 141,
	142, 143, 146, 147, 148, 150, 153, 155, 156, 162,
	165, 168, 169, 172, 175, 176, 177, 179, 180, 182,
	183, 184, 186, 188, 189, 191, 193, 194, 196, 199,
	200, 202, 204, 206, 207, 210, 208, 214, 215, 225,
	226, 227, 228, 231, 232, 235, 236, 237, 241, 246,
	247, 248, 249, 30, 31, 32, 34, 35, 38, 39,
	43, 44, 45, 47, 72, 74, 75, 88, 90, 95,
	103, 105, 109, 110, 117, 118, 119, 121, 130, 152,
	154, 163, 167, 171, 173, 178, 190, 203, 209, 211,
	218, 222, 223, 238, 239, 4, 70, 51, 71, 102,
	112, 113, 127, 214, 217, 221, 18, -221, 221, 221,
	-221, -221, -221, -220, 213, 213, -92, 70, 230, -25,
	-27, -26, -53, -54, 229, 120, 87, 161, -24, -26,
	-197, -199, 179, -196, -38, 135, 144, 197, 221, 217,
	-199, -50, -51, 18, 80, 273, -141, -42, 159, -38,
	-75, 269, -3, -141, 109, -38, -42, 109, 99, 122,
	-142, -141, -38, 109, -62, 109, -42, -65, 109, -64,
	-146, -145, -173, 4, -177, -179, -178, 238, 49, 59,
	100, 115, 123, 125, 131, 133, 145, 164, 166, 187,
	201, 158, 273, 158, -103, 45, -103, -105, -36, -37,
	124, 175, 219, 254, 99, 249, -47, 6, 76, -67,
	271, 99, -213, 158, 99, 99, 99, -169, 99, 249,
	124, 175, -106, -36, -37, -106, -78, -141, -64, 109,
	112, -38, 109, -53, -54, -77, -95, -96, 134, 157,
	-80, 18, 80, -80, -80, 37, 270, 270, 273, -199,
	-58, 269, -69, -68, -143, -114, 262, -116, 260, 261,
	266, 149, 250, -125, -42, -117, 9, 269, -128, -194,
	-26, 88, 24, -126, -127, 190, -38, 8, 5, 6,
	7, -40, -149, -158, 224, 91, 151, 41, -192, -193,
	4, -177, -172, -150, -160, -154, -157, 121, 49, 63,
	66, 64, 67, 198, 233, 42, 90, 167, 171, 211,
	222, 223, 109, 152, 110, 47, 103, 130, 82, 31,
	32, 34, 35, 43, 44, 72, 74, 75, 95, 117,
	118, 119, 154, 178, 203, 218, 239, -178, -161, -162,
	-155, -156, -163, -68, -75, 262, -42, 269, -73, -113,
	-112, -111, 274, 267, 271, -74, -133, -114, 76, -33,
	182, -32, 17, 19, 83, 236, 88, 182, 182, 88,
	-142, -44, -42, 199, -38, 25, 88, -35, 273, 40,
	184, 88, 273, 88, 270, 273, -212, -63, 213, 70,
	-43, -38, 262, -218, -212, 25, 273, 273, 132, -46,
	138, 148, 107, -168, 76, -175, -167, -134, 9, 224,
	91, 158, -174, 5, 261, -166, -173, 6, 8, 260,
	-168, 76, 61, -176, 6, 4, -158, -134, 76, 135,
	121, 271, -171, 4, -177, -179, -178, -180, 18, 20,
	21, 22, 23, 24, 25, 26, 27, 36, 41, 42,
	46, 48, 50, 56, 58, 62, 63, 64, 65, 66,
	67, 76, 77, 79, 80, 81, 84, 85, 87, 91,
	92, 97, 98, 99, 101, 104, 106, 111, 112, 114,
	120, 122, 128, 129, 134, 136, 137, 149, 151, 157,
	158, 159, 160, 161, 170, 174, 181, 185, 195, 198,
	205, 212, 213, 216, 219, 220, 224, 229, 230, 233,
	234, 240, 242, 243, 244, 245, -170, -215, 97, -212,
	-170, -170, -170, -170, 132, 273, 273, -35, 273, 269,
	149, -39, 109, -38, 149, -77, -96, -95, -97, -114,
	18, -114, -116, -25, -25, -25, -55, -137, -114, -196,
	25, -57, -38, -60, 99, 273, 10, 48, 28, 260,
	261, 262, 263, 264, 257, 258, 259, 256, 252, 253,
	254, 54, 139, 192, 12, 13, 14, 22, 160, 133,
	250, 201, 123, 30, 111, 25, 4, -114, -114, -114,
	-114, -114, 166, -26, -114, -66, -73, -26, -122, 267,
	269, -73, 269, 6, 6, 269, -129, -114, -200, 246,
	97, 269, 269, 269, 269, 269, 269, 269, 269, 269,
	269, 269, 269, 269, 269, 269, 173, -165, 241, -165,
	-165, -151, 269, -151, -152, 269, -151, 269, -60, -42,
	-113, -171, -114, -171, 262, 273, 270, 273, 219, -93,
	56, 50, -108, 109, 50, -181, -38, 56, -182, 46,
	230, 174, 98, -93, 56, -93, 56, 56, -141, 219,
	219, -42, -110, 243, -99, -18, 269, 76, 25, -70,
	-71, -144, -72, -42, 269, -38, -38, -42, -62, -64,
	-65, -12, -145, 219, 273, -63, -57, -112, -111, 99,
	221, -37, -36, -45, 177, 204, 183, 196, 273, 5,
	8, 8, 6, -171, -214, -38, -37, -36, -141, -48,
	-49, -109, -108, -183, -181, 112, 230, 88, 158, 149,
	88, -98, 190, 191, 273, -31, 26, 79, 269, 273,
	270, -110, -61, -139, -141, -26, -140, 269, -143, -147,
	-148, -150, -159, -153, -157, -158, 33, 39, 38, 215,
	209, 117, 118, 119, 203, 31, 178, 95, 82, 75,
	74, 154, 35, 34, -161, -162, -155, -156, 72, 218,
	32, 44, 43, 239, -64, 217, -114, -114, -114, -114,
	-114, -114, -114, -114, -114, -114, -114, -114, -114, -114,
	-114, -114, -114, -114, -114, -114, -114, 133, 201, 30,
	111, 219, 151, 149, 224, 91, 231, 80, 155, -222,
	212, 27, -120, -26, 269, -171, -125, 190, 269, 270,
	273, -66, -124, 268, -114, -122, -66, 270, 270, -66,
	240, 18, 80, 262, -89, 248, 142, 73, 108, 141,
	-90, 194, 8, -132, -131, 242, -201, 93, 104, 269,
	270, 270, -114, -84, -164, 4, 248, 142, 73, 108,
	141, 194, -85, -114, -86, -115, -116, 260, 261, 266,
	269, 190, -87, -114, -66, -114, 36, 129, 220, -88,
	-114, 99, -66, -114, -114, -114, -66, -66, -66, 269,
	8, 8, 8, -110, 270, 268, 275, -133, -32, -42,
	-38, -38, 149, -108, 109, -147, -38, 269, 269, 126,
	126, -38, -38, 109, -38, 109, -38, -38, -33, 182,
	-38, -38, 182, -79, 185, -114, -101, 158, -62, 238,
	-38, -60, 273, 254, -62, -35, -214, -43, -214, -36,
	228, 53, 177, -175, -89, 273, 270, 273, -39, 112,
	-64, -42, 88, -38, -137, -15, -18, -14, -23, -9,
	-38, -76, 104, 273, 59, -83, 125, 145, 100, 131,
	187, 115, -136, -135, 25, -38, -136, -26, -140, -139,
	-59, 24, -89, 269, 249, -114, 219, -222, 212, -120,
	-114, 151, 224, 91, 231, 80, 155, 99, 269, -115,
	-115, -66, 269, -66, -114, 273, 268, 268, 273, 270,
	-54, 273, -53, -114, -66, -66, 270, 219, 219, 219,
	219, 269, 270, -130, -131, 84, -114, -206, 165, 269,
	269, -114, 25, 270, 99, 270, -91, 170, 270, 10,
	260, 261, 262, 263, 264, 257, 258, 259, 256, 252,
	253, 254, 54, 139, 192, 12, 13, 14, 123, 111,
	-115, -115, -115, -66, 269, 270, -118, -119, 99, 97,
	25, -88, -88, -88, 270, 99, -66, 273, 273, 273,
	270, 270, 270, 8, 270, 273, 270, 270, -76, -114,
	219, 219, 88, 149, -184, -182, -114, -57, 269, 269,
	-29, 83, 199, -94, 88, -35, 88, -35, 219, -93,
	56, 219, -68, -79, 55, 270, -110, -71, -133, 270,
	-38, -109, 269, -39, 269, 269, -38, 270, -121, 106,
	37, -139, 125, 125, -139, -83, 125, -81, 164, -81,
	-81, -38, 269, 270, 267, 267, 8, -114, -114, -115,
	-115, 99, 269, -114, -123, -147, 22, 22, 270, -66,
	270, 273, 270, -114, -122, 270, 240, -54, -54, -54,
	142, 108, 141, -90, 141, -90, -90, 8, 6, 85,
	-114, 216, -207, -38, 269, 243, -53, 270, -147, -114,
	-118, -114, -147, -115, -115, -115, -115, -115, -115, -115,
	-115, -115, -115, -115, -115, -115, -115, -115, -115, -115,
	-115, 80, 149, 155, -115, 273, -66, 270, -119, -118,
	-114, -114, -147, 270, 270, 270, -66, -114, -114, -114,
	270, 8, -121, 268, -38, -38, -108, 88, -185, 56,
	-186, 48, 149, 151, 230, 174, 46, 76, 181, 270,
	270, -57, -57, 149, 76, 149, 76, 69, 226, -38,
	-38, -42, -38, -38, -38, -100, 269, 158, -18, -79,
	254, -56, -138, -38, -195, 269, -192, -193, -40, 269,
	-48, -56, 158, -202, 244, -114, -66, -139, -139, -82,
	234, 158, 125, -139, 269, -57, -135, 268, 8, 8,
	270, 22, 22, -114, -123, 270, 273, -114, -114, 270,
	-114, 6, -114, 270, 270, 270, 270, -114, -211, -38,
	-114, 270, 270, -119, 99, 80, 155, 269, -114, 270,
	270, 273, 270, 270, 270, -202, -108, -38, -64, 151,
	126, 269, -115, -42, -107, -219, 57, 210, 270, 270,
	151, 151, -114, -147, -35, -35, 219, 219, 81, -56,
	56, -75, -26, 269, 270, 273, -41, -73, 48, -41,
	-114, 269, -56, 270, 270, -42, -203, -205, -38, -82,
	269, -114, -139, -57, 270, 268, 268, -114, -114, 270,
	-147, 270, -54, -204, 169, 270, -115, 99, 269, -123,
	270, -114, -186, -114, -52, 269, 269, 181, -34, 48,
	-38, -38, 232, 150, 270, -38, -107, -138, -31, -64,
	-31, 270, -66, 270, -107, 269, 273, 25, -57, 270,
	270, -54, 37, -115, -123, 270, 270, 270, -189, 140,
	-57, -57, -42, -30, 234, -64, 199, -110, -41, -54,
	-107, -56, -205, -207, 270, -208, 176, 191, -66, 270,
	-187, -190, -188, 158, 100, 168, 202, 270, 270, -52,
	-114, -70, -31, 270, 270, 270, -209, -210, 30, 227,
	61, -114, -209, -188, 158, -190, 158, 232, 78, -189,
	-110, -107, -210, 172, 96, 190, 172, 96, -191, 147,
	184, 40, 199, -191, -187, 22, 16, 151, 76, -210,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 0,
	48, 49, 50, 0, 0, 308, 0, 0, 278, -2,
	0, 0, 247, 0, 247, 247, 247, 310, 217, 307,
	-2, 318, 0, 0, 0, 316, 292, 0, 0, -2,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 64,
	0, 66, 67, 68, 69, 0, 78, 79, 80, 82,
	83, 84, 85, 86, 87, 88, 0, 91, 764, 798,
	809, 96, 106, 0, 861, -2, 110, 60, 711, 712,
	713, 728, 729, 730, 731, 732, 733, 734, 735, 736,
	737, 738, 739, 740, 741, 742, 743, 744, 745, 746,
	747, 748, 749, 750, 751, 752, 753, 754, 755, 756,
	757, 758, 759, 760, 761, 762, 763, 765, 766, 767,
	768, 769, 771, 772, 773, 774, 775, 776, 777, 778,
	779, 780, 781, 782, 783, 784, 785, 786, 787, 788,
	789, 790, 791, 792, 793, 794, 795, 796, 797, 799,
	800, 801, 802, 803, 804, 805, 806, 807, 808, 810,
	811, 812, 813, 814, 815, 816, 817, 818, 819, 820,
	821, 822, 823, 824, 825, 826, 827, 828, 829, 830,
	831, 832, 833, 834, 835, 836, 837, 838, 839, 840,
	841, 842, 843, 844, 845, 846, 847, 848, 849, 850,
	851, 852, 853, 854, 855, 856, 857, 858, 859, 860,
	862, 863, 864, 865, 866, 139, 140, 0, 142, 155,
	0, 0, 0, 153, 0, 0, 151, 252, 246, 252,
	243, 244, 245, 0, 309, 0, 0, 0, 216, -2,
	288, 289, -2, 0, 313, 313, 313, 0, 0, 289,
	0, 297, 786, 300, 694, 764, 770, 798, 809, 861,
	298, 674, 0, 315, 314, 0, 293, 368, 0, 685,
	338, 0, 2, 0, 843, 0, 0, 843, 0, 0,
	0, 374, 52, 843, 43, 843, 681, 56, 843, 58,
	0, 70, 72, 719, 720, 721, 722, 865, 867, 868,
	869, 870, 871, 872, 873, 874, 875, 876, 877, 878,
	879, 0, 0, 0, 92, 833, 94, 95, 97, 98,
	0, 0, 0, 0, 0, 0, 109, 134, 135, 61,
	0, 0, 157, 0, 0, 0, 0, 147, 0, 148,
	0, 150, 241, 248, 249, 242, 43, 372, 0, 843,
	715, 254, 843, -2, 0, 284, 325, 326, 0, 0,
	0, 311, 312, 0, 0, 0, 280, 281, 0, 299,
	0, 0, 341, 673, 675, 679, 680, 454, 0, 0,
	0, 0, 0, 0, 533, 534, 535, 0, 537, 538,
	539, 838, 0, 543, 544, 857, 685, 697, 698, 699,
	700, 0, 0, 0, 705, 706, 707, 656, 582, 553,
	-2, -2, 695, 396, 397, 398, 399, -2, 867, 557,
	559, 561, 562, 563, 564, 0, 839, 853, 854, 860,
	863, 864, 843, 850, 844, 834, 841, 849, 749, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, 718, 420, 421,
	426, 427, 429, 341, 339, 369, 370, 0, 686, 664,
	657, 658, 0, 0, 0, 0, 670, 668, 669, 20,
	238, 22, 0, 238, 238, 0, 0, 0, 0, 0,
	378, 0, 257, 0, 375, 0, 0, 54, 0, 41,
	42, 0, 0, 0, 308, 0, 0, 75, 0, 745,
	683, 687, 690, 81, 0, 0, 0, 0, 0, 101,
	121, 122, 123, 102, 104, 111, 113, 114, 115, 124,
	125, 126, 127, 210, 0, 212, 137, 138, 708, 0,
	103, 105, 107, 108, 128, 129, 0, 131, 132, 133,
	437, 0, 62, 723, 724, 725, 726, 727, 880, 881,
	882, 883, 884, 885, 886, 887, 888, 889, 890, 891,
	892, 893, 894, 895, 896, 897, 898, 899, 900, 901,
	902, 903, 904, 905, 906, 907, 908, 909, 910, 911,
	912, 913, 914, 915, 916, 917, 918, 919, 920, 921,
	922, 923, 924, 925, 926, 927, 928, 929, 930, 931,
	932, 933, 934, 935, 936, 937, 938, 939, 940, 941,
	942, 943, 944, 945, 946, 947, 948, 949, 950, 951,
	952, 953, 954, 955, 956, 957, 141, 143, 0, 154,
	144, 145, 146, 152, 149, 0, 0, 213, 0, 161,
	0, 0, 843, 714, 0, 287, 323, 324, 327, 330,
	331, 328, 454, 294, 295, 296, 319, 320, 227, 301,
	0, 0, 691, 378, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 667, 0, 0, 678, 458, 459, 460,
	481, 482, 0, -2, 614, 0, 540, 541, 542, 0,
	0, -2, 0, 702, 451, 0, 0, 655, 584, 0,
	0, 0, 0, 0, 0, 0, 635, 641, 0, 0,
	0, 0, 0, 0, 0, 0, 410, 423, 433, 431,
	430, 412, 0, 411, 409, 0, 413, 0, 378, 0,
	665, 659, 0, 662, 663, 0, 672, 0, 0, 0,
	0, 237, 24, 843, 0, 34, 0, 0, 183, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 269, 0, 264, 259, 0, 0, 0, 341,
	271, 273, 274, 0, 0, 376, 53, 682, 43, 59,
	57, 65, 71, 0, 0, 76, 77, 688, 689, 0,
	0, 99, 100, 253, 0, 118, 0, 120, 0, 211,
	710, 709, 451, 63, 156, 89, 250, 251, 373, 0,
	160, 162, 164, 165, 166, 715, 0, 0, 0, 0,
	0, 329, 332, 333, 0, 322, 225, 226, 308, 0,
	693, 335, 340, 342, 359, 359, 346, 0, 676, 455,
	384, 385, 386, 387, 388, 451, 391, 392, 393, 394,
	395, 403, 404, 405, 406, 407, 408, 417, 0, 402,
	402, 402, 414, 415, 418, 419, 424, 425, 435, 436,
	434, 434, 434, 432, 456, 0, 461, 462, 463, 464,
	465, 466, 467, 468, 469, -2, -2, -2, 473, 474,
	475, -2, -2, -2, 479, 480, -2, 0, 0, 667,
	0, 0, 487, 0, 490, 492, 494, 0, 0, 0,
	0, 666, 504, 647, 0, 677, 489, 0, 0, 536,
	0, 0, 0, 620, 614, 621, 0, -2, 545, 318,
	0, 0, 0, 0, 703, 438, 439, 440, 441, 442,
	443, 452, 0, 654, 650, 0, 592, 0, 0, 0,
	558, 560, 0, 0, 0, 624, 625, 626, 627, 628,
	629, 630, 0, 0, 0, 0, 506, 0, 0, 0,
	0, 857, 0, 614, 640, 0, 0, 0, 0, 0,
	614, 0, 646, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 335, 371, 660, 0, 671, 23, 229,
	0, 0, 0, 26, 843, 169, 0, 0, 0, 0,
	0, 240, 35, 843, 43, 843, 43, 36, 21, 238,
	228, 231, 0, 51, 0, 377, 269, 0, 0, 261,
	258, 378, 0, 0, 0, 55, 73, 684, 74, 93,
	116, 117, 119, 112, 130, 0, 158, 0, 0, 715,
	0, 0, 0, 255, 321, 0, 303, 304, 305, 306,
	692, 337, 0, 0, 0, 0, 0, 0, 365, 365,
	365, 363, 344, 358, 0, 357, 345, -2, 346, 0,
	379, 381, 389, 0, 0, -2, 0, 0, 0, 505,
	-2, 488, 491, 493, 495, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 615, 0, 618, 619, 0, -2,
	0, 0, 317, 318, 318, 318, 551, 0, 0, 0,
	0, 0, 0, 0, 651, 0, 0, 552, 0, 0,
	0, 0, 0, 566, 0, 567, 0, 0, 568, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	508, 509, 510, 0, 0, 569, 638, 639, 0, 0,
	0, 0, 0, 0, 574, 0, 645, 0, 0, 0,
	578, 579, 580, 0, 400, 0, 416, 428, 337, 0,
	0, 0, 0, 0, 167, 182, 0, 0, 0, 0,
	28, 0, 0, 0, 0, 32, 0, 38, 0, 0,
	0, 0, 268, 256, 267, 0, 269, 272, 275, 0,
	90, 163, 0, 0, 161, 0, 0, 302, 586, 0,
	0, 343, 0, 0, 0, 0, 0, 360, 364, 361,
	362, 355, 0, 348, 0, 0, 0, 457, -2, 0,
	0, 0, 0, -2, 0, 616, 0, 0, 648, 0,
	609, 0, -2, 615, 622, 546, 0, 0, 0, 0,
	444, 445, 446, 447, 448, 449, 450, 0, 704, 649,
	653, 0, 590, 591, 595, 0, 0, 556, 0, 623,
	632, 633, 507, 511, 512, 513, 514, 515, 516, 517,
	518, 519, -2, -2, -2, 523, 524, 525, -2, -2,
	-2, 0, 0, 0, 634, 0, 0, 612, 636, 637,
	642, 643, 0, 571, 572, 573, 644, 0, 0, 0,
	422, 0, 586, 661, 233, 235, 25, 0, 168, 0,
	171, 0, 0, 174, 175, 0, 0, 0, 0, 184,
	191, 0, 0, 0, 40, 0, 0, 239, 0, 43,
	43, 230, 0, 0, 232, 0, 0, 0, 260, 270,
	0, 0, 218, 224, 224, 0, 554, 555, 0, 0,
	0, 0, 0, 290, 0, 336, 334, 349, 0, 351,
	0, 0, 0, 353, 0, 0, 347, 382, 0, 0,
	390, 0, 0, -2, 0, 498, 0, -2, -2, 608,
	615, 701, 318, 547, 549, 550, 453, 652, 597, 594,
	0, 581, 565, 631, 0, 0, 0, 0, 615, 611,
	570, 0, 576, 577, 401, 291, 27, 0, 172, 173,
	176, 0, 178, 193, 185, 0, 188, 189, 186, 0,
	29, 30, 39, 45, 31, 37, 0, 0, 0, 0,
	0, 276, 277, 0, 191, 0, 227, 696, 0, 227,
	0, 0, 0, 159, 191, 0, 585, 587, 0, 350,
	0, 367, 352, 0, 356, 383, 380, -2, -2, 499,
	617, 610, 0, 318, 0, 583, -2, 0, 0, 0,
	613, 0, 170, 0, 197, 0, 0, 0, 47, 0,
	234, 236, 0, 263, 378, 266, 180, 219, 220, 223,
	221, 224, 318, 191, 214, 0, 0, 0, 0, 354,
	548, 600, 0, -2, 0, 531, 575, 177, 202, 0,
	0, 0, 193, 33, 0, 44, 0, 265, 227, 0,
	181, 0, 588, 589, 366, 0, 0, 0, 596, 532,
	179, 198, 199, 0, 194, 195, 196, 192, 190, 197,
	46, 378, 222, 546, 191, 593, 598, 601, -2, 812,
	742, 0, 599, 200, 0, 201, 0, 0, 0, 202,
	262, 215, 0, 603, 604, 605, 606, 607, 203, 0,
	206, 207, 0, 204, 187, 0, 205, 208, 209, 602,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 258, 3, 264, 259, 3,
	269, 270, 262, 260, 273, 261, 271, 263, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 275, 272,
	252, 254, 253, 3, 274, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 267, 3, 268, 257, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 256, 3, 266,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	255, 265,
}
var sqlTok3 = [...]int{
	0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:629
		{
			sqllex.(*scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:635
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:641
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 13:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:660
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 19:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:669
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 20:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:675
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.qname(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 21:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:679
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.qname(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 22:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:685
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 23:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:689
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 24:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:696
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 25:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:701
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 26:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:706
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 27:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:711
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 28:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:715
		{
			unimplemented()
		}
	case 29:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:717
		{
			unimplemented()
		}
	case 30:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:719
		{
			unimplemented()
		}
	case 31:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:722
		{
			sqlVAL.union.val = &AlterTableDropColumn{columnKeyword: sqlDollar[2].union.bool(), IfExists: true, Column: sqlDollar[5].str}
		}
	case 32:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:727
		{
			sqlVAL.union.val = &AlterTableDropColumn{columnKeyword: sqlDollar[2].union.bool(), IfExists: false, Column: sqlDollar[3].str}
		}
	case 33:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:732
		{
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:735
		{
			sqlVAL.union.val = &AlterTableAddConstraint{ConstraintDef: sqlDollar[2].union.constraintDef()}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:739
		{
			unimplemented()
		}
	case 36:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:741
		{
			unimplemented()
		}
	case 37:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:744
		{
			sqlVAL.union.val = &AlterTableDropConstraint{IfExists: true, Constraint: sqlDollar[5].str}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:749
		{
			sqlVAL.union.val = &AlterTableDropConstraint{IfExists: false, Constraint: sqlDollar[3].str}
		}
	case 39:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:754
		{
			unimplemented()
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:755
		{
			unimplemented()
		}
	case 41:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:758
		{
			unimplemented()
		}
	case 42:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:759
		{
			unimplemented()
		}
	case 43:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:760
		{
		}
	case 44:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:763
		{
			unimplemented()
		}
	case 45:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:764
		{
		}
	case 46:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:767
		{
			unimplemented()
		}
	case 47:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:768
		{
		}
	case 51:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:779
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retExprs()}
		}
	case 52:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:786
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 53:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:790
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 54:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:794
		{
			sqlVAL.union.val = &DropIndex{Names: sqlDollar[3].union.qnames(), IfExists: false}
		}
	case 55:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:798
		{
			sqlVAL.union.val = &DropIndex{Names: sqlDollar[5].union.qnames(), IfExists: true}
		}
	case 56:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:802
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.qnames(), IfExists: false}
		}
	case 57:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:806
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.qnames(), IfExists: true}
		}
	case 58:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:812
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:816
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 60:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:822
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:826
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:832
		{
			sqlVAL.union.val = Indirection{NameIndirection(sqlDollar[2].str)}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:836
		{
			sqlVAL.union.val = append(sqlDollar[1].union.indirect(), NameIndirection(sqlDollar[3].str))
		}
	case 64:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:843
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:847
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 66:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:853
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 70:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:862
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 71:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:866
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 73:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:876
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: NameList(sqlDollar[6].union.strs()), Targets: sqlDollar[4].union.targetList()}
		}
	case 74:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:883
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: NameList(sqlDollar[6].union.strs()), Targets: sqlDollar[4].union.targetList()}
		}
	case 75:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:890
		{
			sqlVAL.union.val = TargetList{Tables: QualifiedNames(sqlDollar[1].union.qnames())}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:894
		{
			sqlVAL.union.val = TargetList{Tables: QualifiedNames(sqlDollar[2].union.qnames())}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:898
		{
			sqlVAL.union.val = TargetList{Databases: NameList(sqlDollar[2].union.strs())}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:905
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:908
		{
		}
	case 80:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:912
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:916
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 82:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:923
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 83:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:927
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 84:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:931
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 85:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:935
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 86:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:939
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 87:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:943
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 88:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:947
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 89:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:955
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:959
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 91:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:967
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 92:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:971
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 93:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:975
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:979
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 95:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:985
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 97:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:992
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:996
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1000
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1004
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1011
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1017
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname(), Values: sqlDollar[3].union.exprs()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1021
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname(), Values: sqlDollar[3].union.exprs()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1025
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname()}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1029
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname()}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1036
		{
			unimplemented()
		}
	case 108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1039
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1042
		{
			unimplemented()
		}
	case 111:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1049
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1053
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1061
		{
			sqlVAL.union.val = ValArg{name: sqlDollar[1].str}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1067
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 117:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1071
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1075
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1079
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1083
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1089
		{
			sqlVAL.union.val = Low
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1093
		{
			sqlVAL.union.val = Normal
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1097
		{
			sqlVAL.union.val = High
		}
	case 124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1103
		{
			sqlVAL.union.val = DBool(true)
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1107
		{
			sqlVAL.union.val = DBool(false)
		}
	case 126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1111
		{
			sqlVAL.union.val = DString(sqlDollar[1].str)
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1126
		{
			sqlVAL.union.val = DString(sqlDollar[1].str)
		}
	case 129:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1130
		{
			sqlVAL.union.val = DString(sqlDollar[1].str)
		}
	case 130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1134
		{
			expr := &CastExpr{Expr: DString(sqlDollar[2].str), Type: sqlDollar[1].union.colType()}
			var ctx EvalContext
			d, err := expr.Eval(ctx)
			if err != nil {
				sqllex.Error("cannot evaluate to an interval type")
				return 1
			}
			if _, ok := d.(DInterval); !ok {
				panic("not an interval type")
			}
			sqlVAL.union.val = d
		}
	case 132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1149
		{
			sqlVAL.union.val = DString(sqlDollar[1].str)
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1153
		{
			sqlVAL.union.val = DString(sqlDollar[1].str)
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1158
		{
			unimplemented()
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1159
		{
			unimplemented()
		}
	case 136:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1160
		{
		}
	case 137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1164
		{
			sqlVAL.union.val = DString(sqlDollar[1].str)
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1168
		{
			sqlVAL.union.val = DString(sqlDollar[1].str)
		}
	case 139:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1174
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1178
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1182
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.qname()}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1186
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1190
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.strs()}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1194
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1198
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1202
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1206
		{
			sqlVAL.union.val = &ShowTables{Name: sqlDollar[3].union.qname()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1210
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1214
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1218
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1222
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1228
		{
			sqlVAL.union.val = sqlDollar[2].union.qname()
		}
	case 153:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1232
		{
			sqlVAL.union.val = (*QualifiedName)(nil)
		}
	case 154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1238
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 155:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1243
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1249
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 157:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1253
		{
			sqlVAL.union.val = []string(nil)
		}
	case 158:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1260
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.qname(), IfNotExists: false, Defs: sqlDollar[5].union.tblDefs()}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1264
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.qname(), IfNotExists: true, Defs: sqlDollar[8].union.tblDefs()}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1271
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1277
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1281
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1287
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1292
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1298
		{
			sqlVAL.union.val = newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
		}
	case 168:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1304
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 169:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1308
		{
			sqlVAL.union.val = []ColumnQualification(nil)
		}
	case 170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1314
		{
			sqlVAL.union.val = sqlDollar[3].union.colQual()
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1318
		{
			unimplemented()
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1334
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1338
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1342
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1346
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1349
		{
			unimplemented()
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1351
		{
			if ContainsVars(sqlDollar[2].union.expr()) {
				sqllex.Error("default expression contains a variable")
				return 1
			}
			if containsSubquery(sqlDollar[2].union.expr()) {
				sqllex.Error("default expression contains a subquery")
				return 1
			}
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1362
		{
			unimplemented()
		}
	case 180:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1366
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.idxElems(),
				Storing: sqlDollar[6].union.strs(),
			}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1374
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:    Name(sqlDollar[3].str),
					Columns: sqlDollar[5].union.idxElems(),
					Storing: sqlDollar[7].union.strs(),
				},
			}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1389
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1394
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 184:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1399
		{
			unimplemented()
		}
	case 185:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1401
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[3].union.strs()),
					Storing: sqlDollar[5].union.strs(),
				},
			}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1410
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[4].union.strs()),
				},
				PrimaryKey: true,
			}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1419
		{
			unimplemented()
		}
	case 190:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1436
		{
			sqlVAL.union.val = sqlDollar[3].union.strs()
		}
	case 191:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1440
		{
			sqlVAL.union.val = []string(nil)
		}
	case 192:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1446
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 193:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1450
		{
			sqlVAL.union.val = []string(nil)
		}
	case 194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1455
		{
			unimplemented()
		}
	case 195:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1456
		{
			unimplemented()
		}
	case 196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1457
		{
			unimplemented()
		}
	case 197:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1458
		{
		}
	case 198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1465
		{
			unimplemented()
		}
	case 199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1466
		{
			unimplemented()
		}
	case 200:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1467
		{
			unimplemented()
		}
	case 201:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1468
		{
			unimplemented()
		}
	case 202:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1469
		{
		}
	case 203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1472
		{
			unimplemented()
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1475
		{
			unimplemented()
		}
	case 205:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1478
		{
			unimplemented()
		}
	case 206:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1479
		{
			unimplemented()
		}
	case 207:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1480
		{
			unimplemented()
		}
	case 208:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1481
		{
			unimplemented()
		}
	case 209:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1482
		{
			unimplemented()
		}
	case 210:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1486
		{
			sqlVAL.union.val = NumVal(sqlDollar[1].str)
		}
	case 211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1490
		{
			sqlVAL.union.val = NumVal("-" + sqlDollar[2].str)
		}
	case 212:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1494
		{
			sqlVAL.union.val = DInt(sqlDollar[1].union.ival().Val)
		}
	case 213:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1501
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.qnames()}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1508
		{
			sqlVAL.union.val = &CreateIndex{
				Name:    Name(sqlDollar[4].str),
				Table:   sqlDollar[6].union.qname(),
				Unique:  sqlDollar[2].union.bool(),
				Columns: sqlDollar[8].union.idxElems(),
				Storing: sqlDollar[10].union.strs(),
			}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql.y:1518
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.qname(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.strs(),
			}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1531
		{
			sqlVAL.union.val = true
		}
	case 217:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1535
		{
			sqlVAL.union.val = false
		}
	case 218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1541
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1545
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 220:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1554
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1557
		{
			unimplemented()
		}
	case 222:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1558
		{
			unimplemented()
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1561
		{
			unimplemented()
		}
	case 224:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1562
		{
		}
	case 225:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1566
		{
			sqlVAL.union.val = Ascending
		}
	case 226:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1570
		{
			sqlVAL.union.val = Descending
		}
	case 227:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1574
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 228:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1581
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 229:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1585
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.qname(), NewName: sqlDollar[6].union.qname(), IfExists: false}
		}
	case 230:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1589
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.qname(), NewName: sqlDollar[8].union.qname(), IfExists: true}
		}
	case 231:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1593
		{
			sqlVAL.union.val = &RenameIndex{Name: sqlDollar[3].union.qname(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1597
		{
			sqlVAL.union.val = &RenameIndex{Name: sqlDollar[5].union.qname(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1601
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.qname(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1605
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.qname(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1609
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 236:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1613
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 237:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1619
		{
			sqlVAL.union.val = true
		}
	case 238:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1623
		{
			sqlVAL.union.val = false
		}
	case 239:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1628
		{
		}
	case 240:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1629
		{
		}
	case 241:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1634
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1638
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1642
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 244:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1646
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1650
		{
			sqlVAL.union.val = &RollbackTransaction{}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1655
		{
		}
	case 247:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1656
		{
		}
	case 248:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1660
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1664
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1668
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1672
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 252:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1676
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1682
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1688
		{
			sqlVAL.union.val = &CreateDatabase{Name: Name(sqlDollar[3].str)}
		}
	case 255:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1692
		{
			sqlVAL.union.val = &CreateDatabase{IfNotExists: true, Name: Name(sqlDollar[6].str)}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1698
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.qname()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retExprs()
		}
	case 259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1715
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 260:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1719
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.qnames(), Rows: sqlDollar[4].union.slct()}
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1723
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1730
		{
			unimplemented()
		}
	case 263:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1731
		{
			unimplemented()
		}
	case 264:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1732
		{
		}
	case 265:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1735
		{
			unimplemented()
		}
	case 266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1736
		{
			unimplemented()
		}
	case 267:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1737
		{
		}
	case 268:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1741
		{
			sqlVAL.union.val = sqlDollar[2].union.selExprs()
		}
	case 269:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1745
		{
			sqlVAL.union.val = SelectExprs(nil)
		}
	case 270:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1752
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retExprs()}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1758
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1762
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 275:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1772
		{
			sqlVAL.union.val = &UpdateExpr{Names: QualifiedNames{sqlDollar[1].union.qname()}, Expr: sqlDollar[3].union.expr()}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1784
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.qnames(), Expr: &Tuple{sqlDollar[5].union.exprs()}}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1788
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.qnames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1832
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1838
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1842
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1857
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1861
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1865
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1869
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1873
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1877
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1911
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.tblExprs(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1923
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.tblExprs(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1935
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        TableExprs{&AliasedTableExpr{Expr: sqlDollar[2].union.qname()}},
				tableSelect: true,
			}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1943
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1952
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1961
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1979
		{
			unimplemented()
		}
	case 298:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1980
		{
			unimplemented()
		}
	case 299:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1981
		{
			unimplemented()
		}
	case 300:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1984
		{
			unimplemented()
		}
	case 301:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1985
		{
			unimplemented()
		}
	case 302:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1988
		{
			unimplemented()
		}
	case 303:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1992
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 307:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2000
		{
			unimplemented()
		}
	case 308:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2001
		{
		}
	case 309:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2004
		{
		}
	case 310:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2005
		{
		}
	case 311:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2009
		{
			sqlVAL.union.val = true
		}
	case 312:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2013
		{
			sqlVAL.union.val = false
		}
	case 313:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2017
		{
			sqlVAL.union.val = false
		}
	case 314:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2023
		{
			sqlVAL.union.val = true
		}
	case 315:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2028
		{
		}
	case 316:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2029
		{
		}
	case 317:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2033
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 318:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2037
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 319:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2043
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 320:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2049
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2053
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 322:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2059
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2067
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2076
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2087
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2100
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2107
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2114
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 332:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2128
		{
		}
	case 333:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2129
		{
		}
	case 334:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2155
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 335:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2159
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 336:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2165
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 337:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2169
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 338:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2175
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{sqlDollar[2].union.exprs()}}}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2179
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 340:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2191
		{
			sqlVAL.union.val = sqlDollar[2].union.tblExprs()
		}
	case 341:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2195
		{
			sqlVAL.union.val = TableExprs(nil)
		}
	case 342:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2201
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2205
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 344:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2212
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: sqlDollar[2].union.aliasClause()}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2216
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, As: sqlDollar[2].union.aliasClause()}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2220
		{
			unimplemented()
		}
	case 348:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2238
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2242
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2246
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2250
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2254
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astNaturalJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr()}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2258
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astNaturalJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2264
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: NameList(sqlDollar[4].union.strs())}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2268
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2272
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: NameList(sqlDollar[3].union.strs())}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2276
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 359:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2283
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 360:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2289
		{
			sqlVAL.str = astFullJoin
		}
	case 361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2293
		{
			sqlVAL.str = astLeftJoin
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2297
		{
			sqlVAL.str = astRightJoin
		}
	case 363:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2301
		{
			sqlVAL.str = astInnerJoin
		}
	case 364:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2307
		{
		}
	case 365:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2308
		{
		}
	case 366:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2319
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: NameList(sqlDollar[3].union.strs())}
		}
	case 367:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2323
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2329
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2333
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2337
		{
			sqlVAL.union.val = sqlDollar[2].union.qname()
		}
	case 371:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2341
		{
			sqlVAL.union.val = sqlDollar[3].union.qname()
		}
	case 372:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2347
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2351
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 374:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2364
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname()}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2368
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2372
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2378
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 378:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2382
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2394
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 380:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2398
		{
			unimplemented()
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2399
		{
			unimplemented()
		}
	case 382:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2402
		{
			unimplemented()
		}
	case 383:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2403
		{
			unimplemented()
		}
	case 384:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2404
		{
		}
	case 390:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2412
		{
			unimplemented()
		}
	case 391:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2414
		{
			sqlVAL.union.val = &BytesType{Name: "BLOB"}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2418
		{
			sqlVAL.union.val = &BytesType{Name: "BYTES"}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2422
		{
			sqlVAL.union.val = &BytesType{Name: "BYTEA"}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2426
		{
			sqlVAL.union.val = &StringType{Name: "TEXT"}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2430
		{
			sqlVAL.union.val = &StringType{Name: "STRING"}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2451
		{
			sqlVAL.union.val = &DecimalType{Prec: int(sqlDollar[2].union.ival().Val)}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2455
		{
			sqlVAL.union.val = &DecimalType{Prec: int(sqlDollar[2].union.ival().Val), Scale: int(sqlDollar[4].union.ival().Val)}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2459
		{
			sqlVAL.union.val = &DecimalType{}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2466
		{
			sqlVAL.union.val = &IntType{Name: "INT"}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2470
		{
			sqlVAL.union.val = &IntType{Name: "INT64"}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2474
		{
			sqlVAL.union.val = &IntType{Name: "INTEGER"}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2478
		{
			sqlVAL.union.val = &IntType{Name: "SMALLINT"}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2482
		{
			sqlVAL.union.val = &IntType{Name: "BIGINT"}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2486
		{
			sqlVAL.union.val = &FloatType{Name: "REAL"}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2490
		{
			sqlVAL.union.val = &FloatType{Name: "FLOAT", Prec: int(sqlDollar[2].union.ival().Val)}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2494
		{
			sqlVAL.union.val = &FloatType{Name: "DOUBLE PRECISION"}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2498
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			sqlVAL.union.val.(*DecimalType).Name = "DECIMAL"
		}
	case 412:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2503
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			sqlVAL.union.val.(*DecimalType).Name = "DEC"
		}
	case 413:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2508
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			sqlVAL.union.val.(*DecimalType).Name = "NUMERIC"
		}
	case 414:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2513
		{
			sqlVAL.union.val = &BoolType{Name: "BOOLEAN"}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2517
		{
			sqlVAL.union.val = &BoolType{Name: "BOOL"}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2523
		{
			sqlVAL.union.val = sqlDollar[2].union.ival()
		}
	case 417:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2527
		{
			sqlVAL.union.val = IntVal{}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2545
		{
			sqlVAL.union.val = &IntType{Name: "BIT", N: int(sqlDollar[4].union.ival().Val)}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2551
		{
			sqlVAL.union.val = &IntType{Name: "BIT"}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2567
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
			sqlVAL.union.val.(*StringType).N = int(sqlDollar[3].union.ival().Val)
		}
	case 429:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2574
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 430:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2580
		{
			sqlVAL.union.val = &StringType{Name: "CHAR"}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2584
		{
			sqlVAL.union.val = &StringType{Name: "CHAR"}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2588
		{
			sqlVAL.union.val = &StringType{Name: "VARCHAR"}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2593
		{
		}
	case 434:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2594
		{
		}
	case 435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2599
		{
			sqlVAL.union.val = &DateType{}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2603
		{
			sqlVAL.union.val = &TimestampType{}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2608
		{
			sqlVAL.union.val = &IntervalType{}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2613
		{
			unimplemented()
		}
	case 439:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2614
		{
			unimplemented()
		}
	case 440:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2615
		{
			unimplemented()
		}
	case 441:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2616
		{
			unimplemented()
		}
	case 442:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2617
		{
			unimplemented()
		}
	case 443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2618
		{
			unimplemented()
		}
	case 444:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2619
		{
			unimplemented()
		}
	case 445:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2620
		{
			unimplemented()
		}
	case 446:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2621
		{
			unimplemented()
		}
	case 447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2622
		{
			unimplemented()
		}
	case 448:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2623
		{
			unimplemented()
		}
	case 449:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2624
		{
			unimplemented()
		}
	case 450:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2625
		{
			unimplemented()
		}
	case 451:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2626
		{
		}
	case 452:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2629
		{
			unimplemented()
		}
	case 453:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2630
		{
			unimplemented()
		}
	case 455:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2654
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2657
		{
			unimplemented()
		}
	case 457:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2658
		{
			unimplemented()
		}
	case 458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2667
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2671
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2675
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2679
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2683
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2687
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2691
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2695
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2699
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2703
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2707
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2711
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2715
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2719
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2723
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2727
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2731
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2735
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2739
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2743
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2747
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2751
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2755
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2759
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2763
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2767
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2771
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2775
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2779
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2783
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2787
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2790
		{
			unimplemented()
		}
	case 490:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2792
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DBool(true)}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2796
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DBool(true)}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2800
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DBool(false)}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2804
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DBool(false)}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2808
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2812
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2816
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2820
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2824
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2828
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2832
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2836
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2840
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2844
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2848
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2852
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2869
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2873
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2877
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2881
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2885
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2889
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2893
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2897
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2901
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2905
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2909
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2913
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2917
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2921
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2925
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2929
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2933
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2937
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2941
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2945
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2949
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2953
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2957
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2961
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2965
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2969
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2981
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 535:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2986
		{
			sqlVAL.union.val = ValArg{name: sqlDollar[1].str}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2990
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2996
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3000
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3004
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3010
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 543:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3014
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 544:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3018
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 545:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3026
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname()}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3030
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3033
		{
			unimplemented()
		}
	case 548:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3034
		{
			unimplemented()
		}
	case 549:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3036
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Type: All, Exprs: sqlDollar[4].union.exprs()}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3040
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Type: Distinct, Exprs: sqlDollar[4].union.exprs()}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3044
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Exprs: Exprs{StarExpr()}}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3057
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 553:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3061
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 554:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3070
		{
			unimplemented()
		}
	case 555:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3071
		{
			unimplemented()
		}
	case 556:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3075
		{
			unimplemented()
		}
	case 557:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3077
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3081
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3085
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3089
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3092
		{
			unimplemented()
		}
	case 562:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3093
		{
			unimplemented()
		}
	case 563:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3094
		{
			unimplemented()
		}
	case 564:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3095
		{
			unimplemented()
		}
	case 565:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3097
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3101
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3105
		{
			sqlVAL.union.val = &OverlayExpr{FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3109
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "STRPOS"}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3113
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3116
		{
			unimplemented()
		}
	case 571:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3118
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3122
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "LTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3126
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "RTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3130
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3134
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3138
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3142
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3146
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3150
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3154
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3160
		{
			unimplemented()
		}
	case 582:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3161
		{
		}
	case 583:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3164
		{
			unimplemented()
		}
	case 584:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3165
		{
		}
	case 585:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3169
		{
			unimplemented()
		}
	case 586:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3170
		{
		}
	case 587:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3173
		{
			unimplemented()
		}
	case 588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3174
		{
			unimplemented()
		}
	case 589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3177
		{
			unimplemented()
		}
	case 590:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3180
		{
			unimplemented()
		}
	case 591:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3181
		{
			unimplemented()
		}
	case 592:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3182
		{
		}
	case 593:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3186
		{
			unimplemented()
		}
	case 594:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3197
		{
			unimplemented()
		}
	case 595:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3198
		{
		}
	case 596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3201
		{
			unimplemented()
		}
	case 597:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3202
		{
		}
	case 598:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3210
		{
			unimplemented()
		}
	case 599:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3211
		{
			unimplemented()
		}
	case 600:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3212
		{
		}
	case 601:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3215
		{
			unimplemented()
		}
	case 602:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3216
		{
			unimplemented()
		}
	case 603:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3222
		{
			unimplemented()
		}
	case 604:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3223
		{
			unimplemented()
		}
	case 605:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3224
		{
			unimplemented()
		}
	case 606:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3225
		{
			unimplemented()
		}
	case 607:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3226
		{
			unimplemented()
		}
	case 608:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3237
		{
			sqlVAL.union.val = &Row{sqlDollar[3].union.exprs()}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3241
		{
			sqlVAL.union.val = &Row{nil}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3245
		{
			sqlVAL.union.val = &Tuple{append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3251
		{
			sqlVAL.union.val = &Row{sqlDollar[3].union.exprs()}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3255
		{
			sqlVAL.union.val = &Row{nil}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3261
		{
			sqlVAL.union.val = &Tuple{append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3302
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3306
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 616:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3312
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3316
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 618:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3322
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3326
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3330
		{
			sqlVAL.union.val = &Array{nil}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3336
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3340
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 623:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3346
		{
			sqlVAL.union.val = Exprs{DString(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3368
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3372
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3378
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3385
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3389
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3406
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3410
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3414
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3418
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), DInt(1), sqlDollar[2].union.expr()}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3422
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 641:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3426
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 642:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3432
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 643:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3438
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3444
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 645:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3448
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 646:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3452
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 647:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3458
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3462
		{
			sqlVAL.union.val = &Tuple{sqlDollar[2].union.exprs()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3473
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3480
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3484
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 652:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3490
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3496
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 654:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3500
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 656:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3507
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 657:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3513
		{
			sqlVAL.union.val = sqlDollar[1].union.indirectElem()
		}
	case 658:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3517
		{
			sqlVAL.union.val = sqlDollar[1].union.indirectElem()
		}
	case 659:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3521
		{
			sqlVAL.union.val = IndexIndirection(sqlDollar[2].str)
		}
	case 660:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3525
		{
			sqlVAL.union.val = &ArrayIndirection{Begin: sqlDollar[2].union.expr()}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3529
		{
			sqlVAL.union.val = &ArrayIndirection{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr()}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3535
		{
			sqlVAL.union.val = NameIndirection(sqlDollar[2].str)
		}
	case 663:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3541
		{
			sqlVAL.union.val = qualifiedStar
		}
	case 664:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3547
		{
			sqlVAL.union.val = Indirection{sqlDollar[1].union.indirectElem()}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3551
		{
			sqlVAL.union.val = append(sqlDollar[1].union.indirect(), sqlDollar[2].union.indirectElem())
		}
	case 666:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3556
		{
		}
	case 667:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3557
		{
		}
	case 669:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3566
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3572
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3576
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 672:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3585
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 674:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3593
		{
			sqlVAL.union.val = SelectExprs(nil)
		}
	case 675:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3599
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3603
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 677:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3609
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3618
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3622
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3626
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 681:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3634
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3638
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 683:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3644
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3648
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 685:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3659
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3663
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3674
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3678
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: Indirection{sqlDollar[2].union.indirectElem()}}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3682
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: Indirection{sqlDollar[2].union.indirectElem()}}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3686
		{
			sqlVAL.union.val = &QualifiedName{Indirect: Indirection{unqualifiedStar}}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3692
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3696
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 693:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3702
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 694:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3705
		{
		}
	case 695:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3715
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3719
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3726
		{
			sqlVAL.union.val = &IntVal{Val: sqlDollar[1].union.ival().Val, Str: sqlDollar[1].union.ival().Str}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3730
		{
			sqlVAL.union.val = NumVal(sqlDollar[1].str)
		}
	case 699:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3734
		{
			sqlVAL.union.val = DString(sqlDollar[1].str)
		}
	case 700:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3738
		{
			sqlVAL.union.val = DBytes(sqlDollar[1].str)
		}
	case 701:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3741
		{
			unimplemented()
		}
	case 702:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3743
		{
			sqlVAL.union.val = &CastExpr{Expr: DString(sqlDollar[2].str), Type: sqlDollar[1].union.colType()}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3747
		{
			sqlVAL.union.val = &CastExpr{Expr: DString(sqlDollar[2].str), Type: sqlDollar[1].union.colType()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3751
		{
			sqlVAL.union.val = &CastExpr{Expr: DString(sqlDollar[5].str), Type: sqlDollar[1].union.colType()}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3755
		{
			sqlVAL.union.val = DBool(true)
		}
	case 706:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3759
		{
			sqlVAL.union.val = DBool(false)
		}
	case 707:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3763
		{
			sqlVAL.union.val = DNull
		}
	case 709:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3770
		{
			sqlVAL.union.val = sqlDollar[2].union.ival()
		}
	case 710:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3774
		{
			sqlVAL.union.val = IntVal{Val: -sqlDollar[2].union.ival().Val, Str: "-" + sqlDollar[2].union.ival().Str}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3796
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
