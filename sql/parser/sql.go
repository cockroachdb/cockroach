// Code generated by go yacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"go/constant"
	"go/token"

	"github.com/pkg/errors"

	"github.com/cockroachdb/cockroach/sql/privilege"
	"github.com/cockroachdb/cockroach/util"
)

var errUnimplemented = errors.New("unimplemented")

func unimplemented() {
	panic(errUnimplemented)
}

func unimplementedWithIssue(issue int) {
	panic(util.UnimplementedWithIssueErrorf(issue, ""))
}

//line sql.y:44

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new sytax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in two forms, depending on the
// type of the value being accessed. Values and pointers are directly
// type asserted from the empty interface, meaning that they will panic
// if the type assertion is incorrect. Interfaces are handled differently
// because a nil instance of an interface inserted into the empty interface
// becomes a nil instance of the empty interface and therefore will fail a
// direct type assertion. Instead, a guarded type assertion must be used,
// which returns nil if the type assertion fails.
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	return u.val.(*StrVal)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	if namePart, ok := u.val.(NamePart); ok {
		return namePart
	}
	return nil
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionName() FunctionName {
	return u.val.(FunctionName)
}
func (u *sqlSymUnion) normalizableFunctionName() NormalizableFunctionName {
	return NormalizableFunctionName{u.val.(FunctionName)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	if selectStmt, ok := u.val.(*Select); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	if selectStmt, ok := u.val.(SelectStatement); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	if constraintDef, ok := u.val.(ConstraintTableDef); ok {
		return constraintDef
	}
	return nil
}
func (u *sqlSymUnion) tblDef() TableDef {
	if tblDef, ok := u.val.(TableDef); ok {
		return tblDef
	}
	return nil
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	if colQual, ok := u.val.(NamedColumnQualification); ok {
		return colQual
	}
	return NamedColumnQualification{}
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	if colQual, ok := u.val.(ColumnQualification); ok {
		return colQual
	}
	return nil
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retExprs() ReturningExprs {
	return ReturningExprs(u.val.(SelectExprs))
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	if tblExpr, ok := u.val.(TableExpr); ok {
		return tblExpr
	}
	return nil
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	if joinCond, ok := u.val.(JoinCond); ok {
		return joinCond
	}
	return nil
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	if alterTableCmd, ok := u.val.(AlterTableCmd); ok {
		return alterTableCmd
	}
	return nil
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}

//line sql.y:309
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const DOT_DOT = 57353
const LESS_EQUALS = 57354
const GREATER_EQUALS = 57355
const NOT_EQUALS = 57356
const NOT_REGMATCH = 57357
const REGIMATCH = 57358
const NOT_REGIMATCH = 57359
const ERROR = 57360
const ACTION = 57361
const ADD = 57362
const ALL = 57363
const ALTER = 57364
const ANALYSE = 57365
const ANALYZE = 57366
const AND = 57367
const ANY = 57368
const ANNOTATE_TYPE = 57369
const ARRAY = 57370
const AS = 57371
const ASC = 57372
const ASYMMETRIC = 57373
const AT = 57374
const BEGIN = 57375
const BETWEEN = 57376
const BIGINT = 57377
const BIGSERIAL = 57378
const BIT = 57379
const BLOB = 57380
const BOOL = 57381
const BOOLEAN = 57382
const BOTH = 57383
const BY = 57384
const BYTEA = 57385
const BYTES = 57386
const CASCADE = 57387
const CASE = 57388
const CAST = 57389
const CHAR = 57390
const CHARACTER = 57391
const CHARACTERISTICS = 57392
const CHECK = 57393
const COALESCE = 57394
const COLLATE = 57395
const COLLATION = 57396
const COLUMN = 57397
const COLUMNS = 57398
const COMMIT = 57399
const COMMITTED = 57400
const CONCAT = 57401
const CONFLICT = 57402
const CONSTRAINT = 57403
const CONSTRAINTS = 57404
const COVERING = 57405
const CREATE = 57406
const CROSS = 57407
const CUBE = 57408
const CURRENT = 57409
const CURRENT_CATALOG = 57410
const CURRENT_DATE = 57411
const CURRENT_ROLE = 57412
const CURRENT_TIME = 57413
const CURRENT_TIMESTAMP = 57414
const CURRENT_USER = 57415
const CYCLE = 57416
const DATA = 57417
const DATABASE = 57418
const DATABASES = 57419
const DATE = 57420
const DAY = 57421
const DEC = 57422
const DECIMAL = 57423
const DEFAULT = 57424
const DEALLOCATE = 57425
const DEFERRABLE = 57426
const DELETE = 57427
const DESC = 57428
const DISTINCT = 57429
const DO = 57430
const DOUBLE = 57431
const DROP = 57432
const ELSE = 57433
const ENCODING = 57434
const END = 57435
const ESCAPE = 57436
const EXCEPT = 57437
const EXISTS = 57438
const EXECUTE = 57439
const EXPLAIN = 57440
const EXTRACT = 57441
const FALSE = 57442
const FAMILY = 57443
const FETCH = 57444
const FILTER = 57445
const FIRST = 57446
const FLOAT = 57447
const FLOORDIV = 57448
const FOLLOWING = 57449
const FOR = 57450
const FORCE_INDEX = 57451
const FOREIGN = 57452
const FROM = 57453
const FULL = 57454
const GRANT = 57455
const GRANTS = 57456
const GREATEST = 57457
const GROUP = 57458
const GROUPING = 57459
const HAVING = 57460
const HIGH = 57461
const HOUR = 57462
const IF = 57463
const IFNULL = 57464
const ILIKE = 57465
const IN = 57466
const INTERLEAVE = 57467
const INDEX = 57468
const INDEXES = 57469
const INITIALLY = 57470
const INNER = 57471
const INSERT = 57472
const INT = 57473
const INT8 = 57474
const INT64 = 57475
const INTEGER = 57476
const INTERSECT = 57477
const INTERVAL = 57478
const INTO = 57479
const IS = 57480
const ISOLATION = 57481
const JOIN = 57482
const KEY = 57483
const KEYS = 57484
const LATERAL = 57485
const LEADING = 57486
const LEAST = 57487
const LEFT = 57488
const LEVEL = 57489
const LIKE = 57490
const LIMIT = 57491
const LOCAL = 57492
const LOCALTIME = 57493
const LOCALTIMESTAMP = 57494
const LOW = 57495
const LSHIFT = 57496
const MATCH = 57497
const MINUTE = 57498
const MONTH = 57499
const NAME = 57500
const NAMES = 57501
const NATURAL = 57502
const NEXT = 57503
const NO = 57504
const NO_INDEX_JOIN = 57505
const NORMAL = 57506
const NOT = 57507
const NOTHING = 57508
const NULL = 57509
const NULLIF = 57510
const NULLS = 57511
const NUMERIC = 57512
const OF = 57513
const OFF = 57514
const OFFSET = 57515
const ON = 57516
const ONLY = 57517
const OR = 57518
const ORDER = 57519
const ORDINALITY = 57520
const OUT = 57521
const OUTER = 57522
const OVER = 57523
const OVERLAPS = 57524
const OVERLAY = 57525
const PARENT = 57526
const PARTIAL = 57527
const PARTITION = 57528
const PLACING = 57529
const POSITION = 57530
const PRECEDING = 57531
const PRECISION = 57532
const PREPARE = 57533
const PRIMARY = 57534
const PRIORITY = 57535
const RANGE = 57536
const READ = 57537
const REAL = 57538
const RECURSIVE = 57539
const REF = 57540
const REFERENCES = 57541
const RENAME = 57542
const REPEATABLE = 57543
const RELEASE = 57544
const RESTRICT = 57545
const RETURNING = 57546
const REVOKE = 57547
const RIGHT = 57548
const ROLLBACK = 57549
const ROLLUP = 57550
const ROW = 57551
const ROWS = 57552
const RSHIFT = 57553
const SAVEPOINT = 57554
const SEARCH = 57555
const SECOND = 57556
const SELECT = 57557
const SERIAL = 57558
const SERIALIZABLE = 57559
const SESSION = 57560
const SESSION_USER = 57561
const SET = 57562
const SHOW = 57563
const SIMILAR = 57564
const SIMPLE = 57565
const SMALLINT = 57566
const SMALLSERIAL = 57567
const SNAPSHOT = 57568
const SOME = 57569
const SPLIT = 57570
const SQL = 57571
const START = 57572
const STRICT = 57573
const STRING = 57574
const STORING = 57575
const SUBSTRING = 57576
const SYMMETRIC = 57577
const SYSTEM = 57578
const TABLE = 57579
const TABLES = 57580
const TEXT = 57581
const THEN = 57582
const TIME = 57583
const TIMESTAMP = 57584
const TIMESTAMPTZ = 57585
const TO = 57586
const TRAILING = 57587
const TRANSACTION = 57588
const TREAT = 57589
const TRIM = 57590
const TRUE = 57591
const TRUNCATE = 57592
const TYPE = 57593
const UNBOUNDED = 57594
const UNCOMMITTED = 57595
const UNION = 57596
const UNIQUE = 57597
const UNKNOWN = 57598
const UPDATE = 57599
const UPSERT = 57600
const USER = 57601
const USING = 57602
const VALID = 57603
const VALIDATE = 57604
const VALUE = 57605
const VALUES = 57606
const VARCHAR = 57607
const VARIADIC = 57608
const VARYING = 57609
const WHEN = 57610
const WHERE = 57611
const WINDOW = 57612
const WITH = 57613
const WITHIN = 57614
const WITHOUT = 57615
const YEAR = 57616
const ZONE = 57617
const NOT_LA = 57618
const WITH_LA = 57619
const AS_LA = 57620
const POSTFIXOP = 57621
const UMINUS = 57622

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPLAIN",
	"EXTRACT",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HOUR",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:4705

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 25,
	299, 25,
	-2, 359,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 40,
	1, 334,
	174, 334,
	204, 334,
	297, 334,
	299, 334,
	-2, 344,
	-1, 53,
	1, 337,
	174, 337,
	204, 337,
	297, 337,
	299, 337,
	-2, 343,
	-1, 62,
	1, 25,
	299, 25,
	-2, 359,
	-1, 275,
	1, 163,
	299, 163,
	-2, 854,
	-1, 308,
	149, 369,
	173, 369,
	-2, 340,
	-1, 311,
	149, 368,
	173, 368,
	-2, 338,
	-1, 434,
	149, 368,
	173, 368,
	-2, 341,
	-1, 490,
	296, 794,
	-2, 787,
	-1, 491,
	296, 795,
	-2, 788,
	-1, 497,
	5, 504,
	296, 504,
	-2, 943,
	-1, 520,
	5, 470,
	-2, 918,
	-1, 521,
	5, 498,
	296, 498,
	-2, 920,
	-1, 522,
	5, 478,
	-2, 921,
	-1, 523,
	5, 477,
	-2, 922,
	-1, 524,
	5, 498,
	296, 498,
	-2, 925,
	-1, 525,
	5, 498,
	296, 498,
	-2, 926,
	-1, 526,
	5, 499,
	-2, 929,
	-1, 527,
	5, 464,
	-2, 930,
	-1, 528,
	5, 464,
	-2, 931,
	-1, 529,
	5, 480,
	-2, 934,
	-1, 530,
	5, 465,
	-2, 939,
	-1, 531,
	5, 466,
	-2, 940,
	-1, 532,
	5, 467,
	-2, 941,
	-1, 533,
	5, 468,
	-2, 942,
	-1, 534,
	5, 464,
	-2, 946,
	-1, 535,
	5, 471,
	-2, 951,
	-1, 536,
	5, 469,
	-2, 954,
	-1, 537,
	5, 496,
	296, 496,
	-2, 956,
	-1, 538,
	5, 500,
	-2, 959,
	-1, 539,
	5, 502,
	-2, 960,
	-1, 540,
	5, 495,
	296, 495,
	-2, 964,
	-1, 862,
	95, 344,
	135, 344,
	149, 344,
	173, 344,
	177, 344,
	254, 344,
	-2, 614,
	-1, 870,
	296, 772,
	-2, 761,
	-1, 1063,
	12, 0,
	13, 0,
	14, 0,
	279, 0,
	280, 0,
	281, 0,
	-2, 538,
	-1, 1064,
	12, 0,
	13, 0,
	14, 0,
	279, 0,
	280, 0,
	281, 0,
	-2, 539,
	-1, 1065,
	12, 0,
	13, 0,
	14, 0,
	279, 0,
	280, 0,
	281, 0,
	-2, 540,
	-1, 1069,
	12, 0,
	13, 0,
	14, 0,
	279, 0,
	280, 0,
	281, 0,
	-2, 544,
	-1, 1070,
	12, 0,
	13, 0,
	14, 0,
	279, 0,
	280, 0,
	281, 0,
	-2, 545,
	-1, 1071,
	12, 0,
	13, 0,
	14, 0,
	279, 0,
	280, 0,
	281, 0,
	-2, 546,
	-1, 1074,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	148, 0,
	222, 0,
	276, 0,
	-2, 551,
	-1, 1080,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	148, 0,
	222, 0,
	276, 0,
	-2, 553,
	-1, 1083,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	148, 0,
	222, 0,
	276, 0,
	-2, 558,
	-1, 1084,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	148, 0,
	222, 0,
	276, 0,
	-2, 559,
	-1, 1085,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	148, 0,
	222, 0,
	276, 0,
	-2, 560,
	-1, 1110,
	182, 685,
	-2, 688,
	-1, 1275,
	95, 344,
	135, 344,
	149, 344,
	173, 344,
	177, 344,
	254, 344,
	-2, 417,
	-1, 1279,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	148, 0,
	222, 0,
	276, 0,
	-2, 552,
	-1, 1280,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	148, 0,
	222, 0,
	276, 0,
	-2, 554,
	-1, 1285,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	148, 0,
	222, 0,
	276, 0,
	-2, 555,
	-1, 1303,
	182, 684,
	-2, 687,
	-1, 1464,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	148, 0,
	222, 0,
	276, 0,
	-2, 556,
	-1, 1469,
	138, 0,
	-2, 570,
	-1, 1477,
	182, 686,
	-2, 689,
	-1, 1510,
	12, 0,
	13, 0,
	14, 0,
	279, 0,
	280, 0,
	281, 0,
	-2, 595,
	-1, 1511,
	12, 0,
	13, 0,
	14, 0,
	279, 0,
	280, 0,
	281, 0,
	-2, 596,
	-1, 1512,
	12, 0,
	13, 0,
	14, 0,
	279, 0,
	280, 0,
	281, 0,
	-2, 597,
	-1, 1516,
	12, 0,
	13, 0,
	14, 0,
	279, 0,
	280, 0,
	281, 0,
	-2, 601,
	-1, 1517,
	12, 0,
	13, 0,
	14, 0,
	279, 0,
	280, 0,
	281, 0,
	-2, 602,
	-1, 1518,
	12, 0,
	13, 0,
	14, 0,
	279, 0,
	280, 0,
	281, 0,
	-2, 603,
	-1, 1624,
	138, 0,
	-2, 571,
	-1, 1627,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	148, 0,
	222, 0,
	276, 0,
	-2, 574,
	-1, 1628,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	148, 0,
	222, 0,
	276, 0,
	-2, 576,
	-1, 1714,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	148, 0,
	222, 0,
	276, 0,
	-2, 575,
	-1, 1715,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	148, 0,
	222, 0,
	276, 0,
	-2, 577,
	-1, 1722,
	138, 0,
	-2, 604,
	-1, 1767,
	138, 0,
	-2, 605,
	-1, 1820,
	34, 0,
	123, 0,
	148, 0,
	222, 0,
	276, 0,
	-2, 917,
}

const sqlNprod = 1058
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 23839

var sqlAct = [...]int{

	491, 1819, 1799, 946, 1843, 1773, 1800, 584, 1818, 954,
	1801, 1589, 1610, 1488, 1431, 1690, 1702, 1667, 687, 87,
	489, 488, 1616, 312, 865, 792, 597, 1036, 39, 1548,
	541, 1016, 481, 1590, 86, 86, 86, 814, 334, 86,
	1603, 1019, 86, 1358, 1204, 1306, 1443, 276, 867, 1357,
	86, 1271, 1262, 553, 17, 795, 985, 86, 86, 598,
	1018, 86, 1044, 559, 86, 86, 86, 1272, 1453, 453,
	86, 86, 86, 86, 920, 361, 955, 562, 1156, 929,
	1256, 1093, 1120, 1096, 317, 1048, 969, 75, 319, 52,
	661, 24, 978, 13, 362, 645, 810, 1011, 6, 1210,
	311, 422, 1046, 317, 564, 363, 463, 454, 423, 554,
	555, 1045, 354, 672, 642, 358, 948, 901, 73, 8,
	356, 52, 7, 897, 80, 5, 79, 4, 353, 816,
	351, 81, 1022, 437, 273, 322, 263, 436, 663, 659,
	438, 254, 641, 577, 347, 320, 1709, 1850, 586, 1710,
	1040, 52, 82, 53, 441, 77, 316, 316, 76, 54,
	78, 951, 1270, 330, 947, 819, 337, 586, 586, 574,
	1835, 1217, 348, 1040, 982, 1816, 1807, 1797, 1689, 1040,
	975, 1792, 1260, 988, 1040, 819, 301, 821, 359, 818,
	848, 849, 850, 340, 1769, 1216, 1159, 975, 1763, 1753,
	1301, 1040, 1689, 324, 1259, 1302, 309, 821, 820, 852,
	1743, 1716, 308, 1040, 975, 983, 1713, 1699, 1697, 1040,
	1689, 1040, 1688, 1672, 1671, 1689, 1040, 1040, 820, 1649,
	1629, 1757, 988, 988, 835, 1692, 1626, 817, 1329, 975,
	1346, 1347, 1348, 1575, 1574, 1560, 988, 988, 1040, 1259,
	86, 984, 981, 1623, 1473, 58, 1417, 988, 1523, 1411,
	1410, 826, 1476, 1411, 1375, 86, 1242, 1376, 86, 86,
	1373, 1372, 1371, 988, 988, 988, 918, 60, 1300, 1305,
	988, 826, 1303, 988, 1244, 988, 1041, 1343, 997, 1040,
	987, 988, 974, 988, 58, 975, 1040, 917, 845, 853,
	916, 86, 990, 86, 61, 86, 587, 86, 1104, 986,
	592, 56, 1035, 593, 1005, 556, 60, 57, 448, 557,
	449, 483, 86, 843, 785, 587, 587, 784, 653, 836,
	652, 387, 435, 86, 1334, 329, 55, 556, 62, 557,
	686, 557, 407, 61, 1817, 86, 86, 86, 1814, 86,
	56, 1806, 429, 1764, 434, 58, 57, 1246, 552, 1698,
	1216, 1654, 589, 1650, 1642, 1641, 1349, 1640, 548, 980,
	1635, 1634, 395, 1633, 1587, 950, 1329, 60, 817, 396,
	86, 1580, 1344, 1538, 1533, 1532, 837, 86, 1531, 86,
	1479, 979, 1438, 1462, 1442, 1421, 547, 846, 1380, 1377,
	361, 361, 1365, 590, 61, 428, 1356, 1328, 689, 86,
	1325, 86, 86, 86, 86, 86, 86, 86, 1323, 362,
	362, 86, 585, 788, 1311, 1310, 86, 690, 1243, 1173,
	363, 363, 86, 1127, 543, 787, 55, 426, 691, 1345,
	1126, 1101, 822, 823, 824, 825, 827, 348, 847, 819,
	86, 844, 873, 86, 448, 447, 1809, 1490, 831, 828,
	829, 830, 822, 823, 824, 825, 827, 450, 847, 444,
	445, 821, 1334, 309, 1783, 790, 556, 1756, 1419, 308,
	557, 1735, 594, 1733, 1724, 1706, 1695, 1686, 1664, 576,
	579, 1647, 820, 1619, 1597, 1468, 317, 1461, 1439, 1436,
	1434, 870, 1392, 1579, 1391, 1355, 1319, 1340, 1341, 1342,
	1318, 1339, 1336, 1337, 1338, 1330, 1331, 1332, 1333, 1335,
	1297, 1293, 1329, 1098, 1346, 1347, 1348, 1187, 1102, 648,
	1231, 649, 1200, 1199, 1329, 1187, 1186, 1622, 1166, 819,
	676, 683, 1125, 772, 1039, 826, 776, 777, 778, 779,
	780, 902, 86, 775, 905, 783, 909, 895, 689, 894,
	893, 821, 786, 892, 891, 890, 86, 889, 888, 887,
	86, 1343, 800, 798, 86, 86, 914, 690, 799, 886,
	639, 86, 820, 86, 86, 812, 86, 885, 691, 86,
	651, 86, 86, 83, 361, 309, 884, 883, 309, 309,
	882, 806, 881, 880, 807, 808, 912, 923, 871, 869,
	55, 335, 542, 362, 452, 393, 383, 381, 1334, 421,
	1586, 1585, 868, 1225, 363, 1329, 1224, 1346, 1347, 1348,
	1334, 1329, 949, 819, 949, 51, 570, 549, 964, 356,
	1472, 934, 936, 1711, 86, 86, 903, 75, 899, 900,
	1349, 970, 906, 1330, 1331, 1332, 1333, 1335, 819, 1437,
	1584, 31, 1218, 1030, 864, 1379, 1344, 1378, 1278, 32,
	417, 401, 939, 402, 1343, 907, 820, 910, 1344, 908,
	1604, 52, 992, 640, 80, 52, 79, 689, 972, 878,
	971, 81, 947, 982, 266, 973, 953, 549, 926, 1491,
	1314, 1121, 943, 604, 965, 1010, 690, 359, 898, 967,
	1779, 966, 82, 1212, 962, 77, 1742, 691, 76, 963,
	78, 1334, 819, 1345, 682, 1831, 1830, 1334, 824, 825,
	827, 1568, 847, 1238, 983, 1345, 300, 996, 299, 903,
	294, 906, 789, 874, 821, 922, 295, 565, 315, 566,
	1680, 1403, 1679, 1349, 1406, 999, 993, 994, 991, 900,
	899, 998, 565, 1384, 566, 820, 1418, 1383, 1704, 1344,
	984, 981, 930, 1170, 565, 86, 566, 1281, 1230, 306,
	1229, 922, 66, 1228, 1227, 1081, 58, 921, 314, 86,
	86, 1340, 1341, 1342, 1169, 1339, 1336, 1337, 1338, 1330,
	1331, 1332, 1333, 1335, 399, 989, 945, 1741, 60, 942,
	1338, 1330, 1331, 1332, 1333, 1335, 627, 567, 826, 86,
	1042, 86, 847, 425, 1052, 420, 1345, 67, 986, 379,
	316, 933, 567, 1132, 70, 61, 303, 819, 1607, 1781,
	1095, 400, 56, 1095, 567, 1026, 580, 572, 57, 986,
	1840, 1426, 1209, 1394, 1794, 689, 1423, 1669, 1078, 821,
	1033, 1034, 1205, 1408, 1202, 1214, 836, 55, 1051, 575,
	1795, 1803, 1736, 1099, 690, 571, 1239, 1121, 1329, 1050,
	820, 65, 1205, 1839, 71, 691, 835, 1014, 980, 398,
	896, 1015, 1424, 1013, 1340, 1341, 1342, 1830, 1339, 1336,
	1337, 1338, 1330, 1331, 1332, 1333, 1335, 313, 1135, 986,
	1332, 1333, 1335, 932, 1172, 424, 847, 1108, 1329, 912,
	86, 86, 86, 837, 912, 1043, 86, 1198, 1237, 86,
	586, 64, 1720, 826, 1401, 86, 86, 86, 86, 86,
	304, 847, 563, 86, 1804, 1687, 86, 1076, 1079, 1136,
	986, 86, 861, 86, 69, 68, 1317, 397, 307, 418,
	86, 1454, 390, 392, 316, 1838, 1117, 1182, 1100, 86,
	919, 1220, 1075, 1221, 1334, 1802, 931, 1829, 1329, 317,
	1176, 836, 1805, 1395, 1827, 1137, 1134, 1184, 252, 568,
	86, 86, 1846, 1207, 626, 72, 86, 1602, 830, 822,
	823, 824, 825, 827, 568, 847, 361, 1028, 410, 455,
	455, 398, 388, 419, 1334, 439, 568, 1197, 386, 560,
	1142, 1091, 1344, 1177, 86, 362, 86, 1670, 86, 86,
	440, 255, 86, 1556, 1089, 1223, 363, 1674, 837, 440,
	1447, 86, 63, 1138, 1283, 1290, 1077, 1094, 86, 1245,
	86, 1247, 260, 496, 1856, 255, 1519, 256, 1288, 1219,
	1673, 1662, 1344, 1730, 1557, 1105, 1109, 1386, 1112, 1181,
	1029, 1222, 797, 1422, 1334, 1248, 260, 791, 317, 1345,
	257, 256, 1645, 1617, 1151, 1564, 1234, 1233, 587, 782,
	1163, 1164, 1165, 1235, 970, 1774, 1240, 259, 1236, 1087,
	545, 1086, 1241, 1133, 257, 1092, 439, 654, 457, 1844,
	831, 828, 829, 830, 822, 823, 824, 825, 827, 1345,
	847, 259, 1344, 802, 804, 1286, 1254, 317, 52, 1291,
	811, 972, 1253, 971, 1520, 1276, 1304, 1618, 973, 1855,
	1521, 604, 856, 857, 858, 859, 860, 1552, 1663, 1553,
	1845, 863, 1336, 1337, 1338, 1330, 1331, 1332, 1333, 1335,
	1282, 1277, 1567, 1284, 1189, 819, 1646, 1847, 1563, 1566,
	658, 876, 1188, 1613, 1555, 1449, 317, 1448, 1001, 1345,
	397, 1558, 258, 1088, 1003, 346, 345, 821, 86, 314,
	1090, 1339, 1336, 1337, 1338, 1330, 1331, 1332, 1333, 1335,
	1004, 1398, 1313, 1400, 656, 431, 258, 1287, 820, 1002,
	1265, 1432, 1588, 1444, 1289, 657, 1660, 86, 86, 1413,
	1257, 1124, 1723, 1644, 261, 1390, 1123, 1268, 1359, 1467,
	1324, 1292, 1362, 1363, 1364, 995, 1661, 1554, 1452, 416,
	913, 415, 414, 86, 1266, 86, 413, 86, 261, 604,
	412, 86, 1565, 1381, 627, 1330, 1331, 1332, 1333, 1335,
	86, 826, 411, 408, 86, 1388, 544, 344, 1360, 879,
	86, 689, 1435, 1402, 86, 1407, 86, 774, 1798, 1771,
	1415, 1545, 1416, 1399, 1412, 1425, 1427, 1428, 476, 1458,
	690, 493, 1261, 1414, 1397, 1296, 1385, 604, 1250, 1298,
	1197, 691, 1031, 1027, 1267, 1433, 968, 591, 1441, 836,
	588, 1308, 1309, 583, 573, 569, 1485, 1451, 86, 1681,
	1470, 1457, 84, 247, 248, 796, 1831, 265, 442, 327,
	277, 1481, 1482, 1483, 1037, 1455, 1456, 404, 265, 1265,
	678, 922, 3, 1683, 1354, 323, 323, 937, 938, 333,
	1409, 1478, 333, 333, 343, 1367, 1268, 922, 333, 349,
	333, 277, 627, 935, 1692, 1492, 837, 1263, 1738, 293,
	1766, 1446, 1445, 1266, 941, 1450, 1497, 446, 940, 1758,
	251, 1494, 1495, 952, 86, 86, 86, 1264, 813, 1499,
	1038, 650, 86, 86, 443, 328, 1404, 1405, 86, 596,
	86, 1526, 86, 86, 86, 336, 977, 86, 1527, 1853,
	627, 1854, 86, 1329, 405, 819, 296, 297, 262, 1007,
	1006, 1530, 1539, 1429, 1420, 1374, 1226, 1544, 1540, 1561,
	1562, 1171, 626, 1267, 1168, 603, 1167, 86, 86, 828,
	829, 830, 822, 823, 824, 825, 827, 1118, 847, 86,
	86, 1601, 1008, 86, 1759, 1595, 1594, 1631, 1583, 1484,
	1595, 1594, 86, 86, 1251, 1581, 1009, 1596, 872, 1599,
	302, 1668, 1596, 253, 1598, 773, 409, 1637, 1577, 1793,
	1316, 1719, 629, 1701, 1122, 877, 30, 1592, 469, 1546,
	1387, 86, 1021, 1600, 1474, 1625, 1020, 692, 679, 1620,
	668, 455, 492, 662, 671, 1131, 1053, 1054, 1055, 1056,
	1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066,
	1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 546, 1080,
	1621, 1082, 1083, 1084, 1085, 494, 601, 495, 384, 602,
	626, 1643, 904, 482, 599, 357, 86, 1258, 86, 805,
	86, 86, 1524, 389, 956, 1119, 277, 277, 1312, 86,
	1608, 1609, 875, 1534, 1614, 468, 1128, 1129, 474, 1140,
	83, 1150, 1152, 1157, 1160, 1161, 1162, 1677, 1678, 473,
	86, 1655, 1106, 380, 465, 1615, 1269, 1656, 626, 265,
	42, 333, 394, 277, 271, 432, 272, 1658, 1208, 1578,
	560, 1032, 801, 86, 1396, 86, 464, 305, 1693, 1696,
	323, 1326, 51, 382, 86, 604, 1691, 1682, 1595, 1594,
	86, 333, 1705, 1684, 1149, 1141, 1139, 1130, 1676, 427,
	1596, 1206, 558, 333, 333, 333, 957, 581, 31, 406,
	1215, 976, 1606, 604, 604, 451, 32, 809, 628, 1808,
	326, 604, 325, 1017, 403, 655, 1718, 1712, 1000, 298,
	1732, 86, 1737, 1393, 1778, 59, 23, 331, 333, 21,
	339, 342, 1232, 600, 1725, 646, 331, 646, 342, 20,
	86, 86, 1734, 604, 86, 19, 1729, 1728, 86, 18,
	16, 15, 14, 86, 22, 12, 11, 277, 10, 646,
	277, 277, 277, 277, 277, 781, 1746, 86, 9, 277,
	1595, 1594, 689, 1754, 265, 317, 29, 1755, 1748, 811,
	794, 1750, 1596, 1747, 28, 1708, 27, 26, 627, 2,
	1762, 690, 1761, 1, 86, 0, 86, 86, 323, 86,
	1749, 815, 691, 1765, 1760, 912, 0, 1782, 0, 681,
	680, 1768, 674, 669, 0, 0, 627, 627, 86, 1279,
	1280, 1784, 0, 58, 627, 1285, 0, 1785, 1789, 0,
	1788, 1787, 1791, 1776, 1790, 0, 1786, 1595, 1594, 0,
	0, 0, 86, 0, 86, 60, 1780, 0, 1299, 1596,
	604, 1811, 0, 0, 0, 0, 627, 1307, 0, 86,
	0, 0, 1815, 0, 1824, 1315, 0, 0, 1828, 1320,
	86, 1826, 61, 1813, 1832, 1834, 0, 0, 0, 56,
	0, 1812, 1837, 0, 0, 57, 0, 684, 0, 0,
	0, 863, 0, 0, 1836, 1849, 1848, 1157, 1157, 1157,
	333, 0, 0, 1851, 74, 0, 0, 1833, 0, 0,
	1261, 1852, 0, 0, 927, 1857, 0, 0, 333, 1382,
	0, 819, 333, 944, 0, 0, 0, 0, 0, 333,
	1389, 960, 961, 603, 333, 0, 0, 333, 0, 277,
	277, 633, 0, 821, 0, 0, 1556, 0, 1549, 455,
	604, 0, 1752, 0, 0, 685, 1547, 1265, 455, 1551,
	0, 0, 560, 627, 820, 819, 626, 0, 0, 331,
	0, 0, 0, 0, 1268, 0, 0, 1557, 0, 0,
	629, 0, 0, 0, 0, 1263, 0, 821, 0, 0,
	0, 1266, 646, 815, 626, 626, 1550, 0, 0, 550,
	0, 0, 626, 0, 0, 1264, 0, 0, 820, 0,
	0, 331, 578, 578, 0, 0, 0, 826, 0, 1612,
	0, 0, 1463, 1796, 0, 1464, 0, 0, 0, 604,
	0, 0, 0, 0, 626, 0, 1469, 0, 0, 0,
	0, 603, 0, 0, 0, 0, 331, 0, 0, 1232,
	0, 1267, 0, 0, 0, 1143, 0, 0, 1486, 0,
	1552, 826, 1553, 627, 0, 836, 0, 0, 1496, 0,
	0, 1498, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1555, 629, 603,
	0, 0, 675, 670, 1558, 0, 0, 0, 0, 0,
	0, 0, 0, 1528, 1529, 1611, 604, 0, 0, 836,
	0, 0, 1535, 1536, 1537, 0, 0, 0, 0, 0,
	0, 0, 837, 1012, 0, 0, 0, 0, 0, 0,
	470, 40, 0, 0, 0, 0, 629, 333, 927, 0,
	0, 626, 627, 0, 0, 0, 628, 0, 0, 0,
	1554, 0, 455, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 40, 0, 0, 837, 333, 0, 277,
	0, 600, 0, 0, 1294, 1295, 0, 0, 0, 0,
	0, 0, 0, 310, 1329, 0, 318, 0, 1605, 0,
	0, 0, 0, 40, 831, 828, 829, 830, 822, 823,
	824, 825, 827, 0, 847, 318, 0, 0, 0, 0,
	0, 1624, 0, 0, 0, 1627, 1628, 0, 911, 627,
	1630, 0, 0, 0, 1632, 1351, 1352, 1353, 0, 0,
	0, 1636, 0, 1343, 0, 1639, 331, 0, 0, 0,
	342, 626, 822, 823, 824, 825, 827, 958, 847, 0,
	0, 0, 342, 0, 628, 342, 0, 0, 0, 0,
	0, 0, 1143, 1143, 0, 0, 0, 1648, 333, 1179,
	1180, 0, 0, 0, 927, 0, 0, 1185, 0, 600,
	1334, 0, 0, 1190, 1191, 1193, 1195, 1196, 0, 0,
	0, 1201, 0, 0, 1203, 0, 0, 0, 0, 333,
	0, 1213, 628, 0, 0, 0, 0, 0, 333, 0,
	1675, 0, 0, 1143, 1143, 1143, 0, 333, 0, 0,
	626, 0, 0, 0, 0, 0, 0, 600, 1344, 0,
	0, 0, 0, 0, 0, 0, 0, 1694, 1012, 646,
	0, 0, 0, 0, 1012, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1707, 0, 0, 0,
	0, 0, 0, 1465, 1466, 0, 1714, 1715, 0, 0,
	0, 0, 794, 0, 794, 0, 277, 333, 0, 0,
	1252, 0, 0, 0, 1329, 1345, 1346, 1347, 1348, 1255,
	0, 0, 0, 0, 0, 1727, 1274, 626, 333, 0,
	0, 0, 0, 0, 0, 0, 0, 603, 1731, 0,
	0, 1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507, 1508,
	1509, 1510, 1511, 1512, 1513, 1514, 1515, 1516, 1517, 1518,
	560, 1522, 0, 1343, 0, 603, 603, 0, 0, 0,
	0, 0, 0, 603, 0, 0, 0, 0, 0, 0,
	310, 1143, 1143, 0, 629, 331, 0, 1339, 1336, 1337,
	1338, 1330, 1331, 1332, 1333, 1335, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 603, 0, 0, 0, 0,
	1334, 0, 629, 629, 0, 331, 0, 0, 0, 0,
	629, 0, 0, 1329, 0, 1346, 1347, 1348, 0, 1143,
	1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143,
	1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 0, 1143,
	0, 0, 629, 1810, 0, 0, 0, 0, 1344, 0,
	0, 0, 0, 0, 0, 0, 815, 0, 1823, 1823,
	0, 0, 1343, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1329, 0, 1346, 1347, 1348,
	0, 0, 0, 0, 1823, 333, 333, 0, 0, 0,
	1471, 0, 310, 0, 0, 310, 310, 0, 0, 0,
	0, 0, 603, 0, 0, 1345, 1178, 0, 0, 1334,
	0, 1430, 0, 927, 0, 794, 0, 1823, 862, 1440,
	0, 0, 866, 0, 1343, 0, 0, 1350, 333, 0,
	0, 0, 333, 0, 0, 0, 0, 1211, 1274, 0,
	628, 1349, 1460, 0, 1274, 0, 1211, 0, 0, 629,
	0, 0, 0, 0, 0, 331, 0, 1344, 1665, 0,
	0, 0, 0, 0, 0, 600, 0, 0, 628, 628,
	0, 1334, 0, 1340, 1341, 1342, 628, 1339, 1336, 1337,
	1338, 1330, 1331, 1332, 1333, 1335, 1489, 0, 0, 0,
	0, 0, 0, 600, 600, 0, 0, 0, 0, 0,
	0, 600, 603, 1349, 0, 0, 0, 0, 628, 0,
	0, 0, 0, 0, 1345, 1249, 0, 0, 0, 1344,
	0, 0, 0, 0, 0, 0, 0, 0, 40, 0,
	40, 0, 0, 600, 0, 0, 331, 0, 0, 0,
	0, 0, 0, 40, 0, 1722, 1143, 40, 0, 629,
	0, 0, 1542, 1543, 927, 0, 0, 0, 0, 0,
	815, 815, 0, 0, 0, 0, 1569, 0, 1570, 0,
	333, 1572, 1573, 0, 0, 1576, 1345, 0, 0, 0,
	333, 603, 1340, 1341, 1342, 0, 1339, 1336, 1337, 1338,
	1330, 1331, 1332, 1333, 1335, 0, 0, 0, 0, 0,
	0, 0, 0, 1591, 0, 815, 927, 0, 1591, 0,
	0, 0, 0, 0, 0, 628, 0, 333, 333, 0,
	278, 333, 0, 0, 1767, 0, 0, 0, 629, 0,
	815, 1274, 0, 1143, 0, 0, 0, 291, 0, 0,
	600, 0, 0, 0, 1340, 1341, 1342, 0, 1339, 1336,
	1337, 1338, 1330, 1331, 1332, 1333, 1335, 0, 603, 1638,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 285, 286, 0,
	292, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 279, 281, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 958, 331, 629, 0, 0, 0, 0,
	0, 0, 1143, 0, 927, 628, 1657, 0, 277, 1659,
	0, 0, 0, 0, 0, 0, 0, 333, 0, 0,
	282, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	600, 40, 283, 284, 0, 0, 331, 0, 815, 0,
	331, 0, 0, 0, 0, 0, 0, 0, 287, 0,
	0, 0, 0, 0, 0, 0, 1591, 0, 0, 1047,
	0, 333, 0, 1703, 0, 0, 0, 0, 0, 0,
	0, 0, 333, 0, 0, 0, 0, 0, 815, 0,
	0, 0, 0, 0, 628, 0, 819, 0, 838, 839,
	840, 848, 849, 850, 1097, 0, 0, 0, 0, 0,
	0, 841, 0, 0, 0, 0, 0, 0, 821, 600,
	852, 0, 0, 0, 0, 0, 0, 0, 0, 794,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 820,
	0, 0, 0, 0, 0, 835, 0, 0, 1739, 1740,
	0, 0, 1744, 0, 288, 0, 1745, 289, 1591, 0,
	0, 277, 290, 0, 0, 0, 0, 0, 0, 0,
	0, 628, 0, 0, 0, 815, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1571, 0,
	0, 0, 826, 0, 0, 0, 600, 0, 1582, 0,
	0, 318, 1775, 0, 815, 333, 0, 277, 0, 845,
	853, 25, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 44, 0, 851, 1591, 1703, 0, 0, 0,
	0, 0, 0, 0, 843, 331, 331, 0, 0, 331,
	836, 0, 0, 0, 0, 0, 46, 0, 0, 0,
	333, 0, 815, 51, 0, 1329, 0, 1346, 1347, 1348,
	0, 0, 842, 0, 0, 0, 0, 1825, 0, 0,
	0, 0, 35, 0, 0, 0, 0, 0, 815, 31,
	0, 0, 47, 0, 0, 0, 34, 32, 0, 0,
	40, 0, 0, 0, 0, 0, 0, 837, 0, 0,
	1275, 0, 36, 0, 1343, 0, 0, 0, 846, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1097, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1666, 0, 0, 0, 862,
	0, 1334, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 844, 0, 0, 832, 833, 834, 0, 831,
	828, 829, 830, 822, 823, 824, 825, 827, 0, 847,
	33, 1174, 0, 1349, 0, 0, 0, 0, 0, 1700,
	1175, 49, 0, 0, 37, 0, 48, 0, 862, 1344,
	331, 38, 0, 0, 58, 0, 0, 0, 0, 41,
	43, 0, 0, 0, 0, 0, 0, 0, 0, 45,
	0, 0, 0, 0, 0, 0, 60, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 61, 0, 0, 1345, 0, 0, 0,
	56, 0, 0, 0, 0, 0, 57, 0, 1047, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 55, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1047, 0, 0, 0, 1047, 0, 0, 0, 0, 0,
	0, 0, 0, 1777, 1340, 1341, 1342, 0, 1339, 1336,
	1337, 1338, 1330, 1331, 1332, 1333, 1335, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 490, 479, 480, 477, 478,
	466, 0, 0, 0, 0, 0, 0, 0, 958, 0,
	88, 89, 0, 90, 0, 0, 0, 0, 506, 472,
	0, 0, 0, 91, 92, 0, 520, 201, 521, 93,
	522, 523, 0, 94, 205, 206, 95, 487, 505, 524,
	525, 209, 0, 516, 0, 498, 0, 96, 97, 98,
	0, 99, 0, 100, 101, 0, 366, 102, 1822, 0,
	499, 501, 0, 500, 502, 104, 105, 106, 107, 526,
	108, 527, 528, 0, 109, 0, 110, 0, 0, 0,
	519, 112, 0, 113, 0, 0, 0, 471, 114, 115,
	507, 485, 0, 0, 116, 117, 529, 0, 118, 0,
	119, 40, 0, 367, 0, 120, 517, 0, 218, 0,
	121, 122, 513, 515, 0, 0, 125, 0, 123, 0,
	368, 124, 530, 531, 532, 533, 0, 497, 0, 40,
	126, 371, 127, 128, 0, 0, 518, 372, 129, 1047,
	1047, 130, 0, 1047, 131, 0, 132, 133, 134, 135,
	136, 374, 137, 138, 141, 139, 461, 140, 486, 514,
	142, 534, 143, 144, 0, 0, 0, 0, 0, 145,
	229, 375, 146, 376, 508, 147, 148, 149, 0, 509,
	150, 232, 151, 0, 152, 153, 154, 535, 155, 156,
	0, 158, 159, 157, 160, 0, 161, 377, 162, 163,
	475, 164, 0, 165, 166, 167, 0, 235, 168, 169,
	503, 170, 171, 0, 172, 536, 237, 173, 0, 178,
	174, 175, 177, 537, 176, 510, 0, 179, 0, 180,
	181, 0, 240, 538, 539, 0, 0, 182, 511, 512,
	484, 183, 184, 1821, 186, 0, 0, 187, 188, 189,
	504, 0, 190, 191, 192, 245, 540, 0, 193, 0,
	0, 0, 0, 194, 195, 196, 197, 0, 0, 0,
	0, 0, 0, 0, 0, 1685, 0, 0, 458, 459,
	0, 0, 0, 0, 460, 0, 0, 467, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1047, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 688, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 88, 89, 693,
	90, 694, 695, 696, 697, 198, 698, 699, 700, 701,
	91, 92, 199, 200, 201, 202, 93, 203, 204, 702,
	94, 205, 206, 95, 703, 704, 207, 208, 209, 705,
	210, 706, 365, 707, 96, 97, 98, 862, 99, 708,
	100, 101, 709, 366, 102, 103, 710, 711, 712, 713,
	714, 715, 104, 105, 106, 107, 211, 108, 212, 213,
	716, 109, 717, 110, 718, 719, 720, 111, 112, 721,
	113, 722, 0, 723, 214, 114, 115, 215, 724, 725,
	726, 116, 117, 216, 0, 118, 727, 119, 728, 729,
	367, 730, 120, 217, 731, 218, 732, 121, 122, 219,
	220, 369, 733, 125, 734, 123, 735, 368, 124, 221,
	222, 223, 224, 736, 225, 737, 370, 126, 371, 127,
	128, 738, 739, 226, 372, 129, 373, 740, 130, 741,
	742, 131, 0, 132, 133, 134, 135, 136, 374, 137,
	138, 141, 139, 743, 140, 744, 227, 142, 228, 143,
	144, 745, 746, 747, 748, 749, 145, 229, 375, 146,
	376, 230, 147, 148, 149, 750, 231, 150, 232, 151,
	751, 152, 153, 154, 233, 155, 156, 752, 158, 159,
	157, 160, 753, 161, 377, 162, 163, 234, 164, 0,
	165, 166, 167, 754, 235, 168, 169, 755, 170, 171,
	378, 172, 236, 237, 173, 756, 178, 174, 175, 177,
	238, 176, 239, 757, 179, 758, 180, 181, 759, 240,
	241, 242, 760, 761, 182, 243, 244, 762, 183, 184,
	185, 186, 763, 764, 187, 188, 189, 765, 766, 190,
	191, 192, 245, 246, 767, 193, 768, 769, 770, 771,
	194, 195, 196, 197, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 688, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1459, 88, 89, 693, 90, 694, 695, 696, 697, 198,
	698, 699, 700, 701, 91, 92, 199, 200, 201, 202,
	93, 203, 204, 702, 94, 205, 206, 95, 703, 704,
	207, 208, 209, 705, 210, 706, 365, 707, 96, 97,
	98, 0, 99, 708, 100, 101, 709, 366, 102, 103,
	710, 711, 712, 713, 714, 715, 104, 105, 106, 107,
	211, 108, 212, 213, 716, 109, 717, 110, 718, 719,
	720, 111, 112, 721, 113, 722, 0, 723, 214, 114,
	115, 215, 724, 725, 726, 116, 117, 216, 0, 118,
	727, 119, 728, 729, 367, 730, 120, 217, 731, 218,
	732, 121, 122, 219, 220, 369, 733, 125, 734, 123,
	735, 368, 124, 221, 222, 223, 224, 736, 225, 737,
	370, 126, 371, 127, 128, 738, 739, 226, 372, 129,
	373, 740, 130, 741, 742, 131, 0, 132, 133, 134,
	135, 136, 374, 137, 138, 141, 139, 743, 140, 744,
	227, 142, 228, 143, 144, 745, 746, 747, 748, 749,
	145, 229, 375, 146, 376, 230, 147, 148, 149, 750,
	231, 150, 232, 151, 751, 152, 153, 154, 233, 155,
	156, 752, 158, 159, 157, 160, 753, 161, 377, 162,
	163, 234, 164, 0, 165, 166, 167, 754, 235, 168,
	169, 755, 170, 171, 378, 172, 236, 237, 173, 756,
	178, 174, 175, 177, 238, 176, 239, 757, 179, 758,
	180, 181, 759, 240, 241, 242, 760, 761, 182, 243,
	244, 762, 183, 184, 185, 186, 763, 764, 187, 188,
	189, 765, 766, 190, 191, 192, 245, 246, 767, 193,
	768, 769, 770, 771, 194, 195, 196, 197, 688, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 915, 0, 88, 89, 693, 90, 694, 695, 696,
	697, 198, 698, 699, 700, 701, 91, 92, 199, 200,
	201, 202, 93, 203, 204, 702, 94, 205, 206, 95,
	703, 704, 207, 208, 209, 705, 210, 706, 365, 707,
	96, 97, 98, 0, 99, 708, 100, 101, 709, 366,
	102, 103, 710, 711, 712, 713, 714, 715, 104, 105,
	106, 107, 211, 108, 212, 213, 716, 109, 717, 110,
	718, 719, 720, 111, 112, 721, 113, 722, 0, 723,
	214, 114, 115, 215, 724, 725, 726, 116, 117, 216,
	0, 118, 727, 119, 728, 729, 367, 730, 120, 217,
	731, 218, 732, 121, 122, 219, 220, 369, 733, 125,
	734, 123, 735, 368, 124, 221, 222, 223, 224, 736,
	225, 737, 370, 126, 371, 127, 128, 738, 739, 226,
	372, 129, 373, 740, 130, 741, 742, 131, 0, 132,
	133, 134, 135, 136, 374, 137, 138, 141, 139, 743,
	140, 744, 227, 142, 228, 143, 144, 745, 746, 747,
	748, 749, 145, 229, 375, 146, 376, 230, 147, 148,
	149, 750, 231, 150, 232, 151, 751, 152, 153, 154,
	233, 155, 156, 752, 158, 159, 157, 160, 753, 161,
	377, 162, 163, 234, 164, 0, 165, 166, 167, 754,
	235, 168, 169, 755, 170, 171, 378, 172, 236, 237,
	173, 756, 178, 174, 175, 177, 238, 176, 239, 757,
	179, 758, 180, 181, 759, 240, 241, 242, 760, 761,
	182, 243, 244, 762, 183, 184, 185, 186, 763, 764,
	187, 188, 189, 765, 766, 190, 191, 192, 245, 246,
	767, 193, 768, 769, 770, 771, 194, 195, 196, 197,
	490, 479, 480, 477, 478, 466, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 88, 89, 1114, 90, 0,
	0, 0, 0, 506, 472, 0, 0, 0, 91, 92,
	199, 520, 201, 521, 93, 522, 523, 0, 94, 205,
	206, 95, 487, 505, 524, 525, 209, 0, 516, 0,
	498, 0, 96, 97, 98, 0, 99, 0, 100, 101,
	0, 366, 102, 103, 0, 499, 501, 0, 500, 502,
	104, 105, 106, 107, 526, 108, 527, 528, 0, 109,
	0, 110, 0, 1115, 0, 519, 112, 0, 113, 0,
	0, 0, 471, 114, 115, 507, 485, 0, 0, 116,
	117, 529, 0, 118, 0, 119, 0, 0, 367, 0,
	120, 517, 0, 218, 0, 121, 122, 513, 515, 369,
	0, 125, 0, 123, 0, 368, 124, 530, 531, 532,
	533, 0, 497, 0, 370, 126, 371, 127, 128, 0,
	0, 518, 372, 129, 373, 0, 130, 0, 0, 131,
	0, 132, 133, 134, 135, 136, 374, 137, 138, 141,
	139, 461, 140, 486, 514, 142, 534, 143, 144, 0,
	0, 0, 0, 0, 145, 229, 375, 146, 376, 508,
	147, 148, 149, 0, 509, 150, 232, 151, 0, 152,
	153, 154, 535, 155, 156, 0, 158, 159, 157, 160,
	0, 161, 377, 162, 163, 475, 164, 0, 165, 166,
	167, 0, 235, 168, 169, 503, 170, 171, 378, 172,
	536, 237, 173, 0, 178, 174, 175, 177, 537, 176,
	510, 0, 179, 0, 180, 181, 0, 240, 538, 539,
	0, 0, 182, 511, 512, 484, 183, 184, 185, 186,
	0, 0, 187, 188, 189, 504, 0, 190, 191, 192,
	245, 540, 1113, 193, 0, 0, 0, 0, 194, 195,
	196, 197, 462, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 458, 459, 1116, 0, 0, 0, 460,
	0, 0, 467, 1111, 490, 479, 480, 477, 478, 466,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 88,
	89, 0, 90, 0, 0, 0, 0, 506, 472, 0,
	0, 0, 91, 92, 199, 520, 201, 521, 93, 522,
	523, 0, 94, 205, 206, 95, 487, 505, 524, 525,
	209, 0, 516, 0, 498, 0, 96, 97, 98, 0,
	99, 0, 100, 101, 0, 366, 102, 103, 0, 499,
	501, 0, 500, 502, 104, 105, 106, 107, 526, 108,
	527, 528, 561, 109, 0, 110, 0, 0, 0, 519,
	112, 0, 113, 0, 0, 0, 471, 114, 115, 507,
	485, 0, 0, 116, 117, 529, 0, 118, 0, 119,
	0, 0, 367, 0, 120, 517, 0, 218, 0, 121,
	122, 513, 515, 369, 0, 125, 0, 123, 0, 368,
	124, 530, 531, 532, 533, 0, 497, 0, 370, 126,
	371, 127, 128, 0, 0, 518, 372, 129, 373, 0,
	130, 0, 0, 131, 0, 132, 133, 134, 135, 136,
	374, 137, 138, 141, 139, 461, 140, 486, 514, 142,
	534, 143, 144, 0, 0, 0, 0, 0, 145, 229,
	375, 146, 376, 508, 147, 148, 149, 0, 509, 150,
	232, 151, 0, 152, 153, 154, 535, 155, 156, 0,
	158, 159, 157, 160, 0, 161, 377, 162, 163, 475,
	164, 0, 165, 166, 167, 58, 235, 168, 169, 503,
	170, 171, 378, 172, 536, 237, 173, 0, 178, 174,
	175, 177, 537, 176, 510, 0, 179, 60, 180, 181,
	0, 240, 538, 539, 0, 0, 182, 511, 512, 484,
	183, 184, 185, 186, 0, 0, 187, 188, 189, 504,
	0, 190, 191, 192, 364, 540, 0, 193, 0, 0,
	0, 56, 194, 195, 196, 197, 462, 57, 0, 490,
	479, 480, 477, 478, 466, 0, 0, 458, 459, 0,
	0, 0, 0, 460, 88, 89, 467, 90, 0, 0,
	0, 0, 506, 472, 0, 0, 0, 91, 92, 199,
	520, 201, 521, 93, 522, 523, 0, 94, 205, 206,
	95, 487, 505, 524, 525, 209, 0, 516, 0, 498,
	0, 96, 97, 98, 0, 99, 0, 100, 101, 0,
	366, 102, 103, 0, 499, 501, 0, 500, 502, 104,
	105, 106, 107, 526, 108, 527, 528, 0, 109, 0,
	110, 0, 0, 0, 519, 112, 0, 113, 0, 0,
	0, 471, 114, 115, 507, 485, 0, 0, 116, 117,
	529, 0, 118, 0, 119, 0, 0, 367, 0, 120,
	517, 0, 218, 0, 121, 122, 513, 515, 369, 0,
	125, 0, 123, 0, 368, 124, 530, 531, 532, 533,
	0, 497, 0, 370, 126, 371, 127, 128, 0, 0,
	518, 372, 129, 373, 0, 130, 0, 0, 131, 0,
	132, 133, 134, 135, 136, 374, 137, 138, 141, 139,
	461, 140, 486, 514, 142, 534, 143, 144, 0, 0,
	0, 0, 0, 145, 229, 375, 146, 376, 508, 147,
	148, 149, 0, 509, 150, 232, 151, 0, 152, 153,
	154, 535, 155, 156, 0, 158, 159, 157, 160, 0,
	161, 377, 162, 163, 475, 164, 0, 165, 166, 167,
	58, 235, 168, 169, 503, 170, 171, 378, 172, 536,
	237, 173, 0, 178, 174, 175, 177, 537, 176, 510,
	0, 179, 60, 180, 181, 0, 240, 538, 539, 0,
	0, 182, 511, 512, 484, 183, 184, 185, 186, 0,
	0, 187, 188, 189, 504, 0, 190, 191, 192, 364,
	540, 0, 193, 0, 0, 0, 56, 194, 195, 196,
	197, 462, 57, 0, 490, 479, 480, 477, 478, 466,
	0, 0, 458, 459, 0, 0, 0, 0, 460, 88,
	89, 467, 90, 0, 0, 0, 0, 506, 472, 0,
	0, 0, 91, 92, 199, 520, 201, 521, 93, 522,
	523, 1153, 94, 205, 206, 95, 487, 505, 524, 525,
	209, 0, 516, 0, 498, 0, 96, 97, 98, 0,
	99, 0, 100, 101, 0, 366, 102, 103, 0, 499,
	501, 0, 500, 502, 104, 105, 106, 107, 526, 108,
	527, 528, 0, 109, 0, 110, 0, 0, 0, 519,
	112, 0, 113, 0, 0, 0, 471, 114, 115, 507,
	485, 0, 0, 116, 117, 529, 0, 118, 0, 119,
	0, 1158, 367, 0, 120, 517, 0, 218, 0, 121,
	122, 513, 515, 369, 0, 125, 0, 123, 0, 368,
	124, 530, 531, 532, 533, 0, 497, 0, 370, 126,
	371, 127, 128, 0, 1154, 518, 372, 129, 373, 0,
	130, 0, 0, 131, 0, 132, 133, 134, 135, 136,
	374, 137, 138, 141, 139, 461, 140, 486, 514, 142,
	534, 143, 144, 0, 0, 0, 0, 0, 145, 229,
	375, 146, 376, 508, 147, 148, 149, 0, 509, 150,
	232, 151, 0, 152, 153, 154, 535, 155, 156, 0,
	158, 159, 157, 160, 0, 161, 377, 162, 163, 475,
	164, 0, 165, 166, 167, 0, 235, 168, 169, 503,
	170, 171, 378, 172, 536, 237, 173, 0, 178, 174,
	175, 177, 537, 176, 510, 0, 179, 0, 180, 181,
	0, 240, 538, 539, 0, 1155, 182, 511, 512, 484,
	183, 184, 185, 186, 0, 0, 187, 188, 189, 504,
	0, 190, 191, 192, 245, 540, 0, 193, 0, 0,
	0, 0, 194, 195, 196, 197, 462, 0, 0, 490,
	479, 480, 477, 478, 466, 0, 0, 458, 459, 0,
	0, 0, 0, 460, 88, 89, 467, 90, 0, 0,
	0, 0, 506, 472, 0, 0, 0, 91, 92, 199,
	520, 201, 521, 93, 522, 523, 0, 94, 205, 206,
	95, 487, 505, 524, 525, 209, 0, 516, 0, 498,
	0, 96, 97, 98, 0, 99, 0, 100, 101, 0,
	366, 102, 103, 0, 499, 501, 0, 500, 502, 104,
	105, 106, 107, 526, 108, 527, 528, 0, 109, 0,
	110, 0, 0, 0, 519, 112, 0, 113, 0, 0,
	0, 471, 114, 115, 507, 485, 0, 0, 116, 117,
	529, 0, 118, 0, 119, 0, 0, 367, 0, 120,
	517, 0, 218, 0, 121, 122, 513, 515, 369, 0,
	125, 0, 123, 0, 368, 124, 530, 531, 532, 533,
	0, 497, 0, 370, 126, 371, 127, 128, 0, 0,
	518, 372, 129, 373, 0, 130, 0, 0, 131, 0,
	132, 133, 134, 135, 136, 374, 137, 138, 141, 139,
	461, 140, 486, 514, 142, 534, 143, 144, 0, 0,
	0, 0, 0, 145, 229, 375, 146, 376, 508, 147,
	148, 149, 0, 509, 150, 232, 151, 0, 152, 153,
	154, 535, 155, 156, 0, 158, 159, 157, 160, 0,
	161, 377, 162, 163, 475, 164, 0, 165, 166, 167,
	0, 235, 168, 169, 503, 170, 171, 378, 172, 536,
	237, 173, 0, 178, 174, 175, 177, 537, 176, 510,
	0, 179, 0, 180, 181, 0, 240, 538, 539, 0,
	0, 182, 511, 512, 484, 183, 184, 185, 186, 0,
	0, 187, 188, 189, 504, 0, 190, 191, 192, 245,
	540, 0, 193, 0, 0, 0, 0, 194, 195, 196,
	197, 462, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 458, 459, 0, 0, 0, 0, 460, 0,
	0, 467, 1525, 490, 479, 480, 477, 478, 466, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 88, 89,
	0, 90, 0, 0, 0, 0, 506, 472, 0, 0,
	0, 91, 92, 199, 520, 201, 521, 93, 522, 523,
	0, 94, 205, 206, 95, 487, 505, 524, 525, 209,
	0, 516, 0, 498, 0, 96, 97, 98, 0, 99,
	0, 100, 101, 0, 366, 102, 103, 0, 499, 501,
	0, 500, 502, 104, 105, 106, 107, 526, 108, 527,
	528, 0, 109, 0, 110, 0, 0, 0, 519, 112,
	0, 113, 0, 0, 0, 471, 114, 115, 507, 485,
	0, 0, 116, 117, 529, 0, 118, 0, 119, 0,
	0, 367, 0, 120, 517, 0, 218, 0, 121, 122,
	513, 515, 369, 0, 125, 0, 123, 0, 368, 124,
	530, 531, 532, 533, 0, 497, 0, 370, 126, 371,
	127, 128, 0, 0, 518, 372, 129, 373, 0, 130,
	0, 0, 131, 0, 132, 133, 134, 135, 136, 374,
	137, 138, 141, 139, 461, 140, 486, 514, 142, 534,
	143, 144, 0, 0, 0, 0, 0, 145, 229, 375,
	146, 376, 508, 147, 148, 149, 0, 509, 150, 232,
	151, 0, 152, 153, 154, 535, 155, 156, 0, 158,
	159, 157, 160, 0, 161, 377, 162, 163, 475, 164,
	0, 165, 166, 167, 0, 235, 168, 169, 503, 170,
	171, 378, 172, 536, 237, 173, 0, 178, 174, 175,
	177, 537, 176, 510, 0, 179, 0, 180, 181, 0,
	240, 538, 539, 0, 0, 182, 511, 512, 484, 183,
	184, 185, 186, 0, 0, 187, 188, 189, 504, 0,
	190, 191, 192, 245, 540, 0, 193, 0, 0, 0,
	0, 194, 195, 196, 197, 462, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 458, 459, 0, 0,
	0, 0, 460, 0, 0, 467, 1475, 490, 479, 480,
	477, 478, 466, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 88, 89, 0, 90, 0, 0, 0, 0,
	506, 472, 0, 0, 0, 91, 92, 199, 520, 201,
	521, 93, 522, 523, 0, 94, 205, 206, 95, 487,
	505, 524, 525, 209, 0, 516, 0, 498, 0, 96,
	97, 98, 0, 99, 0, 100, 101, 0, 366, 102,
	103, 0, 499, 501, 0, 500, 502, 104, 105, 106,
	107, 526, 108, 527, 528, 0, 109, 0, 110, 0,
	0, 0, 519, 112, 0, 113, 0, 0, 0, 471,
	114, 115, 507, 485, 0, 0, 116, 117, 529, 0,
	118, 0, 119, 0, 0, 367, 0, 120, 517, 0,
	218, 0, 121, 122, 513, 515, 369, 0, 125, 0,
	123, 0, 368, 124, 530, 531, 532, 533, 0, 497,
	0, 370, 126, 371, 127, 128, 0, 0, 518, 372,
	129, 373, 0, 130, 0, 0, 131, 0, 132, 133,
	134, 135, 136, 374, 137, 138, 141, 139, 461, 140,
	486, 514, 142, 534, 143, 144, 0, 0, 0, 0,
	0, 145, 229, 375, 146, 376, 508, 147, 148, 149,
	0, 509, 150, 232, 151, 0, 152, 153, 154, 535,
	155, 156, 0, 158, 159, 157, 160, 0, 161, 377,
	162, 163, 475, 164, 0, 165, 166, 167, 0, 235,
	168, 169, 503, 170, 171, 378, 172, 536, 237, 173,
	0, 178, 174, 175, 177, 537, 176, 510, 0, 179,
	0, 180, 181, 0, 240, 538, 539, 0, 0, 182,
	511, 512, 484, 183, 184, 185, 186, 0, 0, 187,
	188, 189, 504, 0, 190, 191, 192, 245, 540, 0,
	193, 0, 0, 0, 0, 194, 195, 196, 197, 462,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	458, 459, 0, 0, 0, 0, 460, 0, 0, 467,
	1110, 490, 479, 480, 477, 478, 466, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 88, 89, 0, 90,
	0, 0, 0, 0, 506, 472, 0, 0, 0, 91,
	92, 199, 520, 201, 521, 93, 522, 523, 0, 94,
	205, 206, 95, 487, 505, 524, 525, 209, 0, 516,
	0, 498, 0, 96, 97, 98, 0, 99, 0, 100,
	101, 0, 366, 102, 103, 0, 499, 501, 0, 500,
	502, 104, 105, 106, 107, 526, 108, 527, 528, 0,
	109, 0, 110, 0, 0, 0, 519, 112, 0, 113,
	0, 0, 0, 471, 114, 115, 507, 485, 0, 0,
	116, 117, 529, 0, 118, 0, 119, 0, 0, 367,
	0, 120, 517, 0, 218, 0, 121, 122, 513, 515,
	369, 0, 125, 0, 123, 0, 368, 124, 530, 531,
	532, 533, 0, 497, 0, 370, 126, 371, 127, 128,
	0, 0, 518, 372, 129, 373, 0, 130, 0, 0,
	131, 0, 132, 133, 134, 135, 136, 374, 137, 138,
	141, 139, 461, 140, 486, 514, 142, 534, 143, 144,
	0, 0, 0, 0, 0, 145, 229, 375, 146, 376,
	508, 147, 148, 149, 0, 509, 150, 232, 151, 0,
	152, 153, 154, 535, 155, 156, 0, 158, 159, 157,
	160, 0, 161, 377, 162, 163, 475, 164, 0, 165,
	166, 167, 0, 235, 168, 169, 503, 170, 171, 378,
	172, 536, 237, 173, 0, 178, 174, 175, 177, 537,
	176, 510, 0, 179, 0, 180, 181, 0, 240, 538,
	539, 0, 0, 182, 511, 512, 484, 183, 184, 185,
	186, 0, 0, 187, 188, 189, 504, 0, 190, 191,
	192, 245, 540, 0, 193, 0, 0, 0, 0, 194,
	195, 196, 197, 462, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 458, 459, 0, 0, 0, 0,
	460, 868, 1107, 467, 490, 479, 480, 477, 478, 466,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 88,
	89, 0, 90, 0, 0, 0, 0, 506, 472, 0,
	0, 0, 91, 92, 199, 520, 201, 521, 93, 522,
	523, 0, 94, 205, 206, 95, 487, 505, 524, 525,
	209, 0, 516, 0, 498, 0, 96, 97, 98, 0,
	99, 0, 100, 101, 0, 366, 102, 103, 0, 499,
	501, 0, 500, 502, 104, 105, 106, 107, 526, 108,
	527, 528, 0, 109, 0, 110, 0, 0, 0, 519,
	112, 0, 113, 0, 0, 0, 471, 114, 115, 507,
	485, 0, 0, 116, 117, 529, 0, 118, 0, 119,
	0, 0, 367, 0, 120, 517, 0, 218, 0, 121,
	122, 513, 515, 369, 0, 125, 0, 123, 0, 368,
	124, 530, 531, 532, 533, 0, 497, 0, 370, 126,
	371, 127, 128, 0, 0, 518, 372, 129, 373, 0,
	130, 0, 0, 131, 0, 132, 133, 134, 135, 136,
	374, 137, 138, 141, 139, 461, 140, 486, 514, 142,
	534, 143, 144, 0, 0, 0, 0, 0, 145, 229,
	375, 146, 376, 508, 147, 148, 149, 0, 509, 150,
	232, 151, 0, 152, 153, 154, 535, 155, 156, 0,
	158, 159, 157, 160, 0, 161, 377, 162, 163, 475,
	164, 0, 165, 166, 167, 0, 235, 168, 169, 503,
	170, 171, 378, 172, 536, 237, 173, 0, 178, 174,
	175, 177, 537, 176, 510, 0, 179, 0, 180, 181,
	0, 240, 538, 539, 0, 0, 182, 511, 512, 484,
	183, 184, 185, 186, 0, 0, 187, 188, 189, 504,
	0, 190, 191, 192, 245, 540, 0, 193, 0, 0,
	0, 0, 194, 195, 196, 197, 462, 0, 0, 490,
	479, 480, 477, 478, 466, 0, 0, 458, 459, 456,
	0, 0, 0, 460, 88, 89, 467, 90, 0, 0,
	0, 0, 506, 472, 0, 0, 0, 91, 92, 199,
	520, 201, 521, 93, 522, 523, 0, 94, 205, 206,
	95, 487, 505, 524, 525, 209, 0, 516, 0, 498,
	0, 96, 97, 98, 0, 99, 0, 100, 101, 0,
	366, 102, 103, 0, 499, 501, 0, 500, 502, 104,
	105, 106, 107, 526, 108, 527, 528, 0, 109, 0,
	110, 0, 0, 0, 519, 112, 0, 113, 0, 0,
	0, 471, 114, 115, 507, 485, 0, 0, 116, 117,
	529, 0, 118, 0, 119, 0, 0, 367, 0, 120,
	517, 0, 218, 0, 121, 122, 513, 515, 369, 0,
	125, 0, 123, 0, 368, 124, 530, 531, 532, 533,
	0, 497, 0, 370, 126, 371, 127, 128, 0, 0,
	518, 372, 129, 373, 0, 130, 0, 0, 131, 0,
	132, 133, 134, 135, 136, 374, 137, 138, 141, 139,
	461, 140, 486, 514, 142, 534, 143, 144, 0, 0,
	0, 0, 0, 145, 229, 375, 146, 376, 508, 147,
	148, 149, 0, 509, 150, 232, 151, 0, 152, 153,
	154, 535, 155, 156, 0, 158, 159, 157, 160, 0,
	161, 377, 162, 163, 475, 164, 0, 165, 166, 167,
	0, 235, 168, 169, 503, 170, 171, 378, 172, 536,
	237, 173, 0, 178, 174, 175, 177, 537, 176, 510,
	0, 179, 0, 180, 181, 0, 240, 538, 539, 0,
	0, 182, 511, 512, 484, 183, 184, 185, 186, 0,
	0, 187, 188, 189, 504, 0, 190, 191, 192, 245,
	540, 1480, 193, 0, 0, 0, 0, 194, 195, 196,
	197, 462, 0, 0, 490, 479, 480, 477, 478, 466,
	0, 0, 458, 459, 0, 0, 0, 0, 460, 88,
	89, 467, 90, 0, 0, 0, 0, 506, 472, 0,
	0, 0, 91, 92, 199, 520, 201, 521, 93, 522,
	523, 0, 94, 205, 206, 95, 487, 505, 524, 525,
	209, 0, 516, 0, 498, 0, 96, 97, 98, 0,
	99, 0, 100, 101, 0, 366, 102, 103, 0, 499,
	501, 0, 500, 502, 104, 105, 106, 107, 526, 108,
	527, 528, 561, 109, 0, 110, 0, 0, 0, 519,
	112, 0, 113, 0, 0, 0, 471, 114, 115, 507,
	485, 0, 0, 116, 117, 529, 0, 118, 0, 119,
	0, 0, 367, 0, 120, 517, 0, 218, 0, 121,
	122, 513, 515, 369, 0, 125, 0, 123, 0, 368,
	124, 530, 531, 532, 533, 0, 497, 0, 370, 126,
	371, 127, 128, 0, 0, 518, 372, 129, 373, 0,
	130, 0, 0, 131, 0, 132, 133, 134, 135, 136,
	374, 137, 138, 141, 139, 461, 140, 486, 514, 142,
	534, 143, 144, 0, 0, 0, 0, 0, 145, 229,
	375, 146, 376, 508, 147, 148, 149, 0, 509, 150,
	232, 151, 0, 152, 153, 154, 535, 155, 156, 0,
	158, 159, 157, 160, 0, 161, 377, 162, 163, 475,
	164, 0, 165, 166, 167, 0, 235, 168, 169, 503,
	170, 171, 378, 172, 536, 237, 173, 0, 178, 174,
	175, 177, 537, 176, 510, 0, 179, 0, 180, 181,
	0, 240, 538, 539, 0, 0, 182, 511, 512, 484,
	183, 184, 185, 186, 0, 0, 187, 188, 189, 504,
	0, 190, 191, 192, 245, 540, 0, 193, 0, 0,
	0, 0, 194, 195, 196, 197, 462, 0, 0, 490,
	479, 480, 477, 478, 466, 0, 0, 458, 459, 0,
	0, 0, 0, 460, 88, 89, 467, 90, 0, 0,
	0, 0, 506, 472, 0, 0, 0, 91, 92, 199,
	520, 201, 521, 93, 522, 523, 0, 94, 205, 206,
	95, 487, 505, 524, 525, 209, 0, 516, 0, 498,
	0, 96, 97, 98, 0, 99, 0, 100, 101, 0,
	366, 102, 103, 0, 499, 501, 0, 500, 502, 104,
	105, 106, 107, 526, 108, 527, 528, 0, 109, 0,
	110, 0, 0, 0, 519, 112, 0, 113, 0, 0,
	0, 471, 114, 115, 507, 485, 0, 0, 116, 117,
	529, 0, 118, 0, 119, 0, 1158, 367, 0, 120,
	517, 0, 218, 0, 121, 122, 513, 515, 369, 0,
	125, 0, 123, 0, 368, 124, 530, 531, 532, 533,
	0, 497, 0, 370, 126, 371, 127, 128, 0, 0,
	518, 372, 129, 373, 0, 130, 0, 0, 131, 0,
	132, 133, 134, 135, 136, 374, 137, 138, 141, 139,
	461, 140, 486, 514, 142, 534, 143, 144, 0, 0,
	0, 0, 0, 145, 229, 375, 146, 376, 508, 147,
	148, 149, 0, 509, 150, 232, 151, 0, 152, 153,
	154, 535, 155, 156, 0, 158, 159, 157, 160, 0,
	161, 377, 162, 163, 475, 164, 0, 165, 166, 167,
	0, 235, 168, 169, 503, 170, 171, 378, 172, 536,
	237, 173, 0, 178, 174, 175, 177, 537, 176, 510,
	0, 179, 0, 180, 181, 0, 240, 538, 539, 0,
	0, 182, 511, 512, 484, 183, 184, 185, 186, 0,
	0, 187, 188, 189, 504, 0, 190, 191, 192, 245,
	540, 0, 193, 0, 0, 0, 0, 194, 195, 196,
	197, 462, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 458, 459, 0, 0, 0, 0, 460, 0,
	0, 467, 490, 479, 480, 477, 478, 466, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 88, 89, 803,
	90, 0, 0, 0, 0, 506, 472, 0, 0, 0,
	91, 92, 199, 520, 201, 521, 93, 522, 523, 0,
	94, 205, 206, 95, 487, 505, 524, 525, 209, 0,
	516, 0, 498, 0, 96, 97, 98, 0, 99, 0,
	100, 101, 0, 366, 102, 103, 0, 499, 501, 0,
	500, 502, 104, 105, 106, 107, 526, 108, 527, 528,
	0, 109, 0, 110, 0, 0, 0, 519, 112, 0,
	113, 0, 0, 0, 471, 114, 115, 507, 485, 0,
	0, 116, 117, 529, 0, 118, 0, 119, 0, 0,
	367, 0, 120, 517, 0, 218, 0, 121, 122, 513,
	515, 369, 0, 125, 0, 123, 0, 368, 124, 530,
	531, 532, 533, 0, 497, 0, 370, 126, 371, 127,
	128, 0, 0, 518, 372, 129, 373, 0, 130, 0,
	0, 131, 0, 132, 133, 134, 135, 136, 374, 137,
	138, 141, 139, 461, 140, 486, 514, 142, 534, 143,
	144, 0, 0, 0, 0, 0, 145, 229, 375, 146,
	376, 508, 147, 148, 149, 0, 509, 150, 232, 151,
	0, 152, 153, 154, 535, 155, 156, 0, 158, 159,
	157, 160, 0, 161, 377, 162, 163, 475, 164, 0,
	165, 166, 167, 0, 235, 168, 169, 503, 170, 171,
	378, 172, 536, 237, 173, 0, 178, 174, 175, 177,
	537, 176, 510, 0, 179, 0, 180, 181, 0, 240,
	538, 539, 0, 0, 182, 511, 512, 484, 183, 184,
	185, 186, 0, 0, 187, 188, 189, 504, 0, 190,
	191, 192, 245, 540, 0, 193, 0, 0, 0, 0,
	194, 195, 196, 197, 462, 0, 0, 490, 479, 480,
	477, 478, 466, 0, 0, 458, 459, 0, 0, 0,
	0, 460, 88, 89, 467, 90, 0, 0, 0, 0,
	506, 472, 0, 0, 0, 91, 92, 199, 520, 201,
	521, 93, 522, 523, 0, 94, 205, 206, 95, 487,
	505, 524, 525, 209, 0, 516, 0, 498, 0, 96,
	97, 98, 0, 99, 0, 100, 101, 0, 366, 102,
	1822, 0, 499, 501, 0, 500, 502, 104, 105, 106,
	107, 526, 108, 527, 528, 0, 109, 0, 110, 0,
	0, 0, 519, 112, 0, 113, 0, 0, 0, 471,
	114, 115, 507, 485, 0, 0, 116, 117, 529, 0,
	118, 0, 119, 0, 0, 367, 0, 120, 517, 0,
	218, 0, 121, 122, 513, 515, 369, 0, 125, 0,
	123, 0, 368, 124, 530, 531, 532, 533, 0, 497,
	0, 370, 126, 371, 127, 128, 0, 0, 518, 372,
	129, 373, 0, 130, 0, 0, 131, 0, 132, 133,
	134, 135, 136, 374, 137, 138, 141, 139, 461, 140,
	486, 514, 142, 534, 143, 144, 0, 0, 0, 0,
	0, 145, 229, 375, 146, 376, 508, 147, 148, 149,
	0, 509, 150, 232, 151, 0, 152, 153, 154, 535,
	155, 156, 0, 158, 159, 157, 160, 0, 161, 377,
	162, 163, 475, 164, 0, 165, 166, 167, 0, 235,
	168, 169, 503, 170, 171, 378, 172, 536, 237, 173,
	0, 178, 174, 175, 177, 537, 176, 510, 0, 179,
	0, 180, 181, 0, 240, 538, 539, 0, 0, 182,
	511, 512, 484, 183, 184, 1821, 186, 0, 0, 187,
	188, 189, 504, 0, 190, 191, 192, 245, 540, 0,
	193, 0, 0, 0, 0, 194, 195, 196, 197, 462,
	0, 0, 490, 479, 480, 477, 478, 466, 0, 0,
	458, 459, 0, 0, 0, 0, 460, 88, 89, 467,
	90, 0, 0, 0, 0, 506, 472, 0, 0, 0,
	91, 92, 1820, 520, 201, 521, 93, 522, 523, 0,
	94, 205, 206, 95, 487, 505, 524, 525, 209, 0,
	516, 0, 498, 0, 96, 97, 98, 0, 99, 0,
	100, 101, 0, 366, 102, 1822, 0, 499, 501, 0,
	500, 502, 104, 105, 106, 107, 526, 108, 527, 528,
	0, 109, 0, 110, 0, 0, 0, 519, 112, 0,
	113, 0, 0, 0, 471, 114, 115, 507, 485, 0,
	0, 116, 117, 529, 0, 118, 0, 119, 0, 0,
	367, 0, 120, 517, 0, 218, 0, 121, 122, 513,
	515, 369, 0, 125, 0, 123, 0, 368, 124, 530,
	531, 532, 533, 0, 497, 0, 370, 126, 371, 127,
	128, 0, 0, 518, 372, 129, 373, 0, 130, 0,
	0, 131, 0, 132, 133, 134, 135, 136, 374, 137,
	138, 141, 139, 461, 140, 486, 514, 142, 534, 143,
	144, 0, 0, 0, 0, 0, 145, 229, 375, 146,
	376, 508, 147, 148, 149, 0, 509, 150, 232, 151,
	0, 152, 153, 154, 535, 155, 156, 0, 158, 159,
	157, 160, 0, 161, 377, 162, 163, 475, 164, 0,
	165, 166, 167, 0, 235, 168, 169, 503, 170, 171,
	378, 172, 536, 237, 173, 0, 178, 174, 175, 177,
	537, 176, 510, 0, 179, 0, 180, 181, 0, 240,
	538, 539, 0, 0, 182, 511, 512, 484, 183, 184,
	1821, 186, 0, 0, 187, 188, 189, 504, 0, 190,
	191, 192, 245, 540, 0, 193, 0, 0, 0, 0,
	194, 195, 196, 197, 462, 0, 0, 490, 479, 480,
	477, 478, 466, 0, 0, 458, 459, 0, 0, 0,
	0, 460, 88, 89, 467, 90, 0, 0, 0, 0,
	506, 472, 0, 0, 0, 91, 92, 199, 520, 201,
	521, 93, 522, 523, 0, 94, 205, 206, 95, 487,
	505, 524, 525, 209, 0, 516, 0, 498, 0, 96,
	97, 98, 0, 99, 0, 100, 101, 0, 366, 102,
	103, 0, 499, 501, 0, 500, 502, 104, 105, 106,
	107, 526, 108, 527, 528, 0, 109, 0, 110, 0,
	0, 0, 519, 112, 0, 113, 0, 0, 0, 471,
	114, 115, 507, 485, 0, 0, 116, 117, 529, 0,
	118, 0, 119, 0, 0, 367, 0, 120, 517, 0,
	218, 0, 121, 122, 513, 515, 369, 0, 125, 0,
	123, 0, 368, 124, 530, 531, 532, 533, 0, 497,
	0, 370, 126, 371, 127, 128, 0, 0, 518, 372,
	129, 373, 0, 130, 0, 0, 131, 0, 132, 133,
	134, 135, 136, 374, 137, 138, 141, 139, 461, 140,
	486, 514, 142, 534, 143, 144, 0, 0, 0, 0,
	0, 145, 229, 375, 146, 376, 508, 147, 148, 149,
	0, 509, 150, 232, 151, 0, 152, 153, 154, 535,
	155, 156, 0, 158, 159, 157, 160, 0, 161, 377,
	162, 163, 475, 164, 0, 165, 166, 167, 0, 235,
	168, 169, 503, 170, 171, 378, 172, 536, 237, 173,
	0, 178, 174, 175, 177, 537, 176, 510, 0, 179,
	0, 180, 181, 0, 240, 538, 539, 0, 0, 182,
	511, 512, 484, 183, 184, 185, 186, 0, 0, 187,
	188, 189, 504, 0, 190, 191, 192, 245, 540, 0,
	193, 0, 0, 0, 0, 194, 195, 196, 197, 462,
	0, 0, 490, 479, 480, 477, 478, 466, 0, 0,
	458, 459, 0, 0, 0, 0, 460, 88, 89, 467,
	90, 0, 0, 0, 0, 506, 472, 0, 0, 0,
	91, 92, 199, 520, 201, 521, 93, 522, 523, 0,
	94, 205, 206, 95, 487, 505, 524, 525, 209, 0,
	516, 0, 498, 0, 96, 97, 98, 0, 99, 0,
	100, 101, 0, 366, 102, 103, 0, 499, 501, 0,
	500, 502, 104, 105, 106, 107, 526, 108, 527, 528,
	0, 109, 0, 110, 0, 0, 0, 519, 112, 0,
	113, 0, 0, 0, 471, 114, 115, 507, 485, 0,
	0, 116, 117, 529, 0, 118, 0, 119, 0, 0,
	367, 0, 120, 517, 0, 218, 0, 121, 122, 513,
	515, 369, 0, 125, 0, 123, 0, 368, 124, 530,
	531, 532, 533, 0, 497, 0, 370, 126, 371, 127,
	128, 0, 0, 518, 372, 129, 373, 0, 130, 0,
	0, 131, 0, 132, 133, 134, 135, 136, 374, 137,
	138, 141, 139, 0, 140, 486, 514, 142, 534, 143,
	144, 0, 0, 0, 0, 0, 145, 229, 375, 146,
	376, 508, 147, 148, 149, 0, 509, 150, 232, 151,
	0, 152, 153, 154, 535, 155, 156, 0, 158, 159,
	157, 160, 0, 161, 377, 162, 163, 1148, 164, 0,
	165, 166, 167, 0, 235, 168, 169, 503, 170, 171,
	378, 172, 536, 237, 173, 0, 178, 174, 175, 177,
	537, 176, 510, 0, 179, 0, 180, 181, 0, 240,
	538, 539, 0, 0, 182, 511, 512, 484, 183, 184,
	185, 186, 0, 0, 187, 188, 189, 504, 0, 190,
	191, 192, 245, 540, 0, 193, 0, 0, 0, 0,
	194, 195, 196, 197, 490, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1144, 1145, 0, 0, 88,
	89, 1146, 90, 0, 1147, 0, 0, 506, 0, 0,
	0, 0, 91, 92, 199, 200, 201, 202, 93, 203,
	204, 0, 94, 205, 206, 95, 0, 505, 207, 208,
	209, 0, 516, 0, 498, 0, 96, 97, 98, 0,
	99, 0, 100, 101, 0, 366, 102, 103, 0, 499,
	501, 0, 500, 502, 104, 105, 106, 107, 211, 108,
	212, 213, 0, 109, 0, 110, 0, 0, 0, 111,
	112, 0, 113, 0, 0, 0, 214, 114, 115, 507,
	0, 0, 0, 116, 117, 216, 0, 118, 0, 119,
	0, 0, 367, 0, 120, 517, 0, 218, 0, 121,
	122, 513, 515, 369, 0, 125, 0, 123, 0, 368,
	124, 221, 222, 223, 224, 0, 225, 0, 370, 126,
	371, 127, 128, 0, 0, 518, 372, 129, 373, 0,
	130, 0, 0, 131, 0, 132, 133, 134, 135, 136,
	374, 137, 138, 141, 139, 0, 140, 0, 514, 142,
	228, 143, 144, 0, 0, 0, 0, 0, 145, 229,
	375, 146, 376, 508, 147, 148, 149, 0, 509, 150,
	232, 151, 0, 152, 153, 154, 233, 155, 156, 0,
	158, 159, 157, 160, 0, 161, 377, 162, 163, 234,
	164, 0, 165, 166, 167, 0, 235, 168, 169, 503,
	170, 171, 378, 172, 236, 237, 173, 0, 178, 174,
	175, 177, 238, 176, 510, 0, 179, 0, 180, 181,
	0, 240, 241, 242, 0, 0, 182, 511, 512, 0,
	183, 184, 185, 186, 0, 0, 187, 188, 189, 504,
	0, 190, 191, 192, 245, 246, 0, 193, 0, 360,
	0, 0, 194, 195, 196, 197, 0, 0, 0, 0,
	0, 0, 0, 0, 88, 89, 0, 90, 0, 0,
	0, 0, 198, 0, 0, 0, 1593, 91, 92, 199,
	200, 201, 202, 93, 203, 204, 0, 94, 205, 206,
	95, 0, 0, 207, 208, 209, 0, 210, 0, 365,
	0, 96, 97, 98, 0, 99, 0, 100, 101, 0,
	366, 102, 103, 0, 0, 0, 0, 0, 0, 104,
	105, 106, 107, 211, 108, 212, 213, 0, 109, 0,
	110, 0, 0, 0, 111, 112, 0, 113, 0, 0,
	0, 214, 114, 115, 215, 0, 0, 0, 116, 117,
	216, 0, 118, 0, 119, 0, 0, 367, 0, 120,
	217, 0, 218, 0, 121, 122, 219, 220, 369, 0,
	125, 0, 123, 0, 368, 124, 221, 222, 223, 224,
	0, 225, 0, 370, 126, 371, 127, 128, 0, 0,
	226, 372, 129, 373, 0, 130, 0, 0, 131, 0,
	132, 133, 134, 135, 136, 374, 137, 138, 141, 139,
	0, 140, 0, 227, 142, 228, 143, 144, 0, 0,
	0, 0, 0, 145, 229, 375, 146, 376, 230, 147,
	148, 149, 0, 231, 150, 232, 151, 0, 152, 153,
	154, 233, 155, 156, 0, 158, 159, 157, 160, 0,
	161, 377, 162, 163, 234, 164, 0, 165, 166, 167,
	58, 235, 168, 169, 0, 170, 171, 378, 172, 236,
	237, 173, 0, 178, 174, 175, 177, 238, 176, 239,
	0, 179, 60, 180, 181, 0, 240, 241, 242, 0,
	0, 182, 243, 244, 0, 183, 184, 185, 186, 0,
	0, 187, 188, 189, 0, 0, 190, 191, 192, 364,
	246, 0, 193, 0, 0, 0, 56, 194, 195, 196,
	197, 0, 57, 0, 360, 673, 0, 674, 669, 664,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 88,
	89, 55, 90, 0, 0, 0, 0, 198, 0, 0,
	0, 0, 91, 92, 199, 200, 201, 202, 93, 203,
	204, 0, 94, 205, 206, 95, 0, 0, 207, 208,
	209, 0, 210, 0, 365, 0, 96, 97, 98, 0,
	99, 0, 100, 101, 0, 366, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 106, 107, 211, 108,
	212, 213, 677, 109, 0, 110, 0, 0, 0, 111,
	112, 0, 113, 0, 0, 0, 214, 114, 115, 215,
	666, 0, 0, 116, 117, 216, 0, 118, 0, 119,
	0, 0, 367, 0, 120, 217, 0, 218, 0, 121,
	122, 219, 220, 369, 0, 125, 0, 123, 0, 368,
	124, 221, 222, 223, 224, 0, 225, 0, 370, 126,
	371, 127, 128, 0, 0, 226, 372, 129, 373, 0,
	130, 0, 0, 131, 0, 132, 133, 134, 135, 136,
	374, 137, 138, 141, 139, 0, 140, 0, 227, 142,
	228, 143, 144, 0, 667, 0, 0, 0, 145, 229,
	375, 146, 376, 230, 147, 148, 149, 0, 231, 150,
	232, 151, 0, 152, 153, 154, 233, 155, 156, 0,
	158, 159, 157, 160, 0, 161, 377, 162, 163, 234,
	164, 0, 165, 166, 167, 0, 235, 168, 169, 0,
	170, 171, 378, 172, 236, 237, 173, 0, 178, 174,
	175, 177, 238, 176, 239, 0, 179, 0, 180, 181,
	0, 240, 241, 242, 0, 0, 182, 243, 244, 665,
	183, 184, 185, 186, 0, 0, 187, 188, 189, 0,
	0, 190, 191, 192, 245, 246, 0, 193, 0, 0,
	0, 0, 194, 195, 196, 197, 360, 673, 0, 674,
	669, 664, 0, 0, 0, 0, 0, 675, 670, 0,
	0, 88, 89, 0, 90, 0, 0, 0, 0, 198,
	0, 0, 0, 0, 91, 92, 199, 200, 201, 202,
	93, 203, 204, 0, 94, 205, 206, 95, 0, 0,
	207, 208, 209, 0, 210, 0, 365, 0, 96, 97,
	98, 0, 99, 0, 100, 101, 0, 366, 102, 103,
	0, 0, 0, 0, 0, 0, 104, 105, 106, 107,
	211, 108, 212, 213, 660, 109, 0, 110, 0, 0,
	0, 111, 112, 0, 113, 0, 0, 0, 214, 114,
	115, 215, 666, 0, 0, 116, 117, 216, 0, 118,
	0, 119, 0, 0, 367, 0, 120, 217, 0, 218,
	0, 121, 122, 219, 220, 369, 0, 125, 0, 123,
	0, 368, 124, 221, 222, 223, 224, 0, 225, 0,
	370, 126, 371, 127, 128, 0, 0, 226, 372, 129,
	373, 0, 130, 0, 0, 131, 0, 132, 133, 134,
	135, 136, 374, 137, 138, 141, 139, 0, 140, 0,
	227, 142, 228, 143, 144, 0, 667, 0, 0, 0,
	145, 229, 375, 146, 376, 230, 147, 148, 149, 0,
	231, 150, 232, 151, 0, 152, 153, 154, 233, 155,
	156, 0, 158, 159, 157, 160, 0, 161, 377, 162,
	163, 234, 164, 0, 165, 166, 167, 0, 235, 168,
	169, 0, 170, 171, 378, 172, 236, 237, 173, 0,
	178, 174, 175, 177, 238, 176, 239, 0, 179, 0,
	180, 181, 0, 240, 241, 242, 0, 0, 182, 243,
	244, 665, 183, 184, 185, 186, 0, 0, 187, 188,
	189, 0, 0, 190, 191, 192, 245, 246, 0, 193,
	0, 0, 0, 0, 194, 195, 196, 197, 360, 673,
	0, 674, 669, 664, 0, 0, 0, 0, 0, 675,
	670, 0, 0, 88, 89, 0, 90, 0, 0, 0,
	0, 198, 0, 0, 0, 0, 91, 92, 199, 200,
	201, 202, 93, 203, 204, 0, 94, 205, 206, 95,
	0, 0, 207, 208, 209, 0, 210, 0, 365, 0,
	96, 97, 98, 0, 99, 0, 100, 101, 0, 366,
	102, 103, 0, 0, 0, 0, 0, 0, 104, 105,
	106, 107, 211, 108, 212, 213, 0, 109, 0, 110,
	0, 0, 0, 111, 112, 0, 113, 0, 0, 0,
	214, 114, 115, 215, 666, 0, 0, 116, 117, 216,
	0, 118, 0, 119, 0, 0, 367, 0, 120, 217,
	0, 218, 0, 121, 122, 219, 220, 369, 0, 125,
	0, 123, 0, 368, 124, 221, 222, 223, 224, 0,
	225, 0, 370, 126, 371, 127, 128, 0, 0, 226,
	372, 129, 373, 0, 130, 0, 0, 131, 0, 132,
	133, 134, 135, 136, 374, 137, 138, 141, 139, 0,
	140, 0, 227, 142, 228, 143, 144, 0, 667, 0,
	0, 0, 145, 229, 375, 146, 376, 230, 147, 148,
	149, 0, 231, 150, 232, 151, 0, 152, 153, 154,
	233, 155, 156, 0, 158, 159, 157, 160, 0, 161,
	377, 162, 163, 234, 164, 0, 165, 166, 167, 0,
	235, 168, 169, 0, 170, 171, 378, 172, 236, 237,
	173, 0, 178, 174, 175, 177, 238, 176, 239, 0,
	179, 0, 180, 181, 0, 240, 241, 242, 0, 0,
	182, 243, 244, 665, 183, 184, 185, 186, 0, 0,
	187, 188, 189, 0, 0, 190, 191, 192, 245, 246,
	85, 193, 0, 0, 0, 0, 194, 195, 196, 197,
	0, 0, 0, 0, 0, 88, 89, 0, 90, 0,
	0, 675, 670, 198, 0, 0, 0, 0, 91, 92,
	199, 200, 201, 202, 93, 203, 204, 0, 94, 205,
	206, 95, 0, 0, 207, 208, 209, 0, 210, 0,
	0, 0, 96, 97, 98, 0, 99, 0, 100, 101,
	0, 0, 102, 103, 0, 0, 0, 0, 0, 0,
	104, 105, 106, 107, 211, 108, 212, 213, 0, 109,
	0, 110, 0, 0, 0, 111, 112, 0, 113, 0,
	0, 0, 214, 114, 115, 215, 0, 0, 0, 116,
	117, 216, 0, 118, 0, 119, 0, 0, 0, 0,
	120, 217, 0, 218, 0, 121, 122, 219, 220, 0,
	0, 125, 0, 123, 0, 0, 124, 221, 222, 223,
	224, 0, 225, 0, 0, 126, 0, 127, 128, 0,
	0, 226, 0, 129, 0, 0, 130, 0, 0, 131,
	0, 132, 133, 134, 135, 136, 0, 137, 138, 141,
	139, 0, 140, 0, 227, 142, 228, 143, 144, 0,
	0, 332, 0, 0, 145, 229, 0, 146, 0, 230,
	147, 148, 149, 0, 231, 150, 232, 151, 0, 152,
	153, 154, 233, 155, 156, 0, 158, 159, 157, 160,
	0, 161, 0, 162, 163, 234, 164, 0, 165, 166,
	167, 58, 235, 168, 169, 0, 170, 171, 0, 172,
	236, 237, 173, 0, 178, 174, 175, 177, 238, 176,
	239, 0, 179, 60, 180, 181, 0, 240, 241, 242,
	0, 0, 182, 243, 244, 0, 183, 184, 185, 186,
	0, 0, 187, 188, 189, 0, 0, 190, 191, 192,
	364, 246, 0, 193, 0, 85, 0, 56, 194, 195,
	196, 197, 0, 57, 0, 0, 0, 0, 0, 0,
	88, 89, 0, 90, 0, 0, 0, 0, 198, 0,
	0, 0, 1049, 91, 92, 199, 200, 201, 202, 93,
	203, 204, 0, 94, 205, 206, 95, 0, 0, 207,
	208, 209, 0, 210, 0, 0, 0, 96, 97, 98,
	0, 99, 0, 100, 101, 0, 0, 102, 103, 0,
	0, 0, 0, 0, 0, 104, 105, 106, 107, 211,
	108, 212, 213, 0, 109, 0, 110, 0, 0, 0,
	111, 112, 0, 113, 0, 0, 0, 214, 114, 115,
	215, 0, 0, 0, 116, 117, 216, 0, 118, 0,
	119, 0, 0, 0, 0, 120, 217, 0, 218, 0,
	121, 122, 219, 220, 0, 0, 125, 0, 123, 0,
	0, 124, 221, 222, 223, 224, 0, 225, 0, 0,
	126, 0, 127, 128, 0, 0, 226, 0, 129, 0,
	0, 130, 0, 0, 131, 0, 132, 133, 134, 135,
	136, 0, 137, 138, 141, 139, 0, 140, 0, 227,
	142, 228, 143, 144, 0, 0, 0, 0, 0, 145,
	229, 0, 146, 0, 230, 147, 148, 149, 0, 231,
	150, 232, 151, 0, 152, 153, 154, 233, 155, 156,
	0, 158, 159, 157, 160, 0, 161, 0, 162, 163,
	234, 164, 0, 165, 166, 167, 58, 235, 168, 169,
	0, 170, 171, 0, 172, 236, 237, 173, 0, 178,
	174, 175, 177, 238, 176, 239, 0, 179, 60, 180,
	181, 0, 240, 241, 242, 0, 0, 182, 243, 244,
	0, 183, 184, 185, 186, 0, 0, 187, 188, 189,
	0, 0, 190, 191, 192, 364, 246, 0, 193, 0,
	85, 0, 56, 194, 195, 196, 197, 0, 57, 0,
	0, 0, 0, 0, 0, 88, 89, 0, 90, 0,
	0, 0, 0, 198, 0, 1273, 0, 55, 91, 92,
	199, 200, 201, 202, 93, 203, 204, 0, 94, 205,
	206, 95, 0, 0, 207, 208, 209, 0, 210, 0,
	0, 0, 96, 97, 98, 0, 99, 0, 100, 101,
	0, 0, 102, 103, 0, 0, 0, 0, 0, 0,
	104, 105, 106, 107, 211, 108, 212, 213, 0, 109,
	0, 110, 0, 0, 0, 111, 112, 0, 113, 0,
	0, 0, 214, 114, 115, 215, 0, 0, 0, 116,
	117, 216, 0, 118, 0, 119, 0, 0, 0, 0,
	120, 217, 0, 218, 0, 121, 122, 219, 220, 0,
	0, 125, 0, 123, 0, 0, 124, 221, 222, 223,
	224, 0, 225, 0, 0, 126, 0, 127, 128, 0,
	0, 226, 0, 129, 0, 0, 130, 0, 0, 131,
	0, 132, 133, 134, 135, 136, 0, 137, 138, 141,
	139, 0, 140, 0, 227, 142, 228, 143, 144, 0,
	0, 0, 0, 0, 145, 229, 0, 146, 0, 230,
	147, 148, 149, 0, 231, 150, 232, 151, 0, 152,
	153, 154, 233, 155, 156, 0, 158, 159, 157, 160,
	0, 161, 0, 162, 163, 234, 164, 0, 165, 166,
	167, 0, 235, 168, 169, 0, 170, 171, 0, 172,
	236, 237, 173, 0, 178, 174, 175, 177, 238, 176,
	239, 0, 179, 0, 180, 181, 0, 240, 241, 242,
	0, 0, 182, 243, 244, 0, 183, 184, 185, 186,
	0, 0, 187, 188, 189, 0, 0, 190, 191, 192,
	245, 246, 0, 193, 0, 0, 85, 0, 194, 195,
	196, 197, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 88, 89, 0, 90, 0, 0, 0, 0, 198,
	0, 0, 0, 448, 91, 92, 199, 200, 201, 202,
	93, 203, 204, 0, 94, 205, 206, 95, 0, 0,
	207, 208, 209, 0, 210, 0, 0, 0, 96, 97,
	98, 0, 99, 0, 100, 101, 0, 0, 102, 103,
	0, 0, 0, 0, 0, 0, 104, 105, 106, 107,
	211, 108, 212, 213, 0, 109, 0, 110, 0, 0,
	0, 111, 112, 0, 113, 0, 0, 0, 214, 114,
	115, 215, 0, 0, 0, 116, 117, 216, 0, 118,
	0, 119, 0, 0, 0, 0, 120, 217, 0, 218,
	0, 121, 122, 219, 220, 0, 0, 125, 0, 123,
	0, 0, 124, 221, 222, 223, 224, 0, 225, 0,
	0, 126, 0, 127, 128, 0, 0, 226, 0, 129,
	0, 0, 130, 0, 0, 131, 0, 132, 133, 134,
	135, 136, 0, 137, 138, 141, 139, 0, 140, 0,
	227, 142, 228, 143, 144, 0, 0, 332, 0, 0,
	145, 229, 0, 146, 0, 230, 147, 148, 149, 0,
	231, 150, 232, 151, 0, 152, 153, 154, 233, 155,
	156, 0, 158, 159, 157, 160, 0, 161, 0, 162,
	163, 234, 164, 0, 165, 166, 167, 0, 235, 168,
	169, 0, 170, 171, 0, 172, 236, 237, 173, 0,
	178, 174, 175, 177, 238, 176, 239, 0, 179, 0,
	180, 181, 0, 240, 241, 242, 0, 0, 182, 243,
	244, 0, 183, 184, 185, 186, 0, 0, 187, 188,
	189, 0, 0, 190, 191, 192, 245, 246, 0, 193,
	0, 85, 0, 0, 194, 195, 196, 197, 0, 0,
	0, 0, 0, 0, 0, 0, 88, 89, 0, 90,
	0, 0, 0, 0, 198, 0, 0, 0, 1049, 91,
	92, 199, 200, 201, 202, 93, 203, 204, 0, 94,
	205, 206, 95, 0, 0, 207, 208, 209, 0, 210,
	0, 0, 0, 96, 97, 98, 0, 99, 0, 100,
	101, 0, 0, 102, 103, 0, 0, 0, 0, 0,
	0, 104, 105, 106, 107, 211, 108, 212, 213, 0,
	109, 0, 110, 0, 0, 0, 111, 112, 0, 113,
	0, 0, 0, 214, 114, 115, 215, 0, 0, 0,
	116, 117, 216, 0, 118, 0, 119, 0, 0, 0,
	0, 120, 217, 0, 218, 0, 121, 122, 219, 220,
	0, 0, 125, 0, 123, 0, 0, 124, 221, 222,
	223, 224, 0, 225, 0, 0, 126, 0, 127, 128,
	0, 0, 226, 0, 129, 0, 0, 130, 0, 0,
	131, 0, 132, 133, 134, 135, 136, 0, 137, 138,
	141, 139, 0, 140, 0, 227, 142, 228, 143, 144,
	0, 0, 0, 0, 0, 145, 229, 0, 146, 0,
	230, 147, 148, 149, 0, 231, 150, 232, 151, 0,
	152, 153, 154, 233, 155, 156, 0, 158, 159, 157,
	160, 0, 161, 0, 162, 163, 234, 164, 0, 165,
	166, 167, 0, 235, 168, 169, 0, 170, 171, 0,
	172, 236, 237, 173, 0, 178, 174, 175, 177, 238,
	176, 239, 0, 179, 0, 180, 181, 0, 240, 241,
	242, 0, 0, 182, 243, 244, 0, 183, 184, 185,
	186, 0, 0, 187, 188, 189, 0, 0, 190, 191,
	192, 245, 246, 0, 193, 0, 85, 0, 0, 194,
	195, 196, 197, 0, 0, 0, 0, 0, 0, 0,
	0, 88, 89, 0, 90, 0, 0, 0, 0, 198,
	0, 0, 0, 959, 91, 92, 199, 200, 201, 202,
	93, 203, 204, 0, 94, 205, 206, 95, 0, 0,
	207, 208, 209, 0, 210, 0, 0, 0, 96, 97,
	98, 0, 99, 0, 100, 101, 0, 0, 102, 103,
	0, 0, 0, 0, 0, 0, 104, 105, 106, 107,
	211, 108, 212, 213, 0, 109, 0, 110, 0, 0,
	0, 111, 112, 0, 113, 0, 0, 0, 214, 114,
	115, 215, 0, 0, 0, 116, 117, 216, 0, 118,
	0, 119, 0, 0, 0, 0, 120, 217, 0, 218,
	0, 121, 122, 219, 220, 0, 0, 125, 0, 123,
	0, 0, 124, 221, 222, 223, 224, 0, 225, 0,
	0, 126, 0, 127, 128, 0, 0, 226, 0, 129,
	0, 0, 130, 0, 0, 131, 0, 132, 133, 134,
	135, 136, 0, 137, 138, 141, 139, 0, 140, 0,
	227, 142, 228, 143, 144, 0, 0, 0, 0, 0,
	145, 229, 0, 146, 0, 230, 147, 148, 149, 0,
	231, 150, 232, 151, 0, 152, 153, 154, 233, 155,
	156, 0, 158, 159, 157, 160, 0, 161, 0, 162,
	163, 234, 164, 0, 165, 166, 167, 0, 235, 168,
	169, 0, 170, 171, 0, 172, 236, 237, 173, 0,
	178, 174, 175, 177, 238, 176, 239, 0, 179, 0,
	180, 181, 0, 240, 241, 242, 0, 0, 182, 243,
	244, 0, 183, 184, 185, 186, 0, 0, 187, 188,
	189, 0, 0, 190, 191, 192, 245, 246, 0, 193,
	0, 85, 0, 0, 194, 195, 196, 197, 0, 0,
	0, 0, 0, 0, 0, 0, 88, 89, 0, 90,
	0, 0, 0, 0, 198, 0, 0, 0, 1490, 91,
	92, 199, 200, 201, 202, 93, 203, 204, 0, 94,
	205, 206, 95, 0, 0, 207, 208, 209, 0, 210,
	0, 0, 0, 96, 97, 98, 0, 99, 0, 100,
	101, 0, 0, 102, 103, 0, 0, 0, 0, 0,
	0, 104, 105, 106, 107, 211, 108, 212, 213, 0,
	109, 0, 110, 0, 0, 0, 111, 112, 0, 113,
	0, 0, 0, 214, 114, 115, 215, 0, 0, 0,
	116, 117, 216, 0, 118, 0, 119, 0, 0, 0,
	0, 120, 217, 0, 218, 0, 121, 122, 219, 220,
	0, 0, 125, 0, 123, 0, 0, 124, 221, 222,
	223, 224, 0, 225, 0, 0, 126, 0, 127, 128,
	0, 0, 226, 0, 129, 0, 0, 130, 0, 0,
	131, 0, 132, 133, 134, 135, 136, 0, 137, 138,
	141, 139, 0, 140, 0, 227, 142, 228, 143, 144,
	0, 0, 0, 0, 0, 145, 229, 0, 146, 0,
	230, 147, 148, 149, 0, 231, 150, 232, 151, 0,
	152, 153, 154, 233, 155, 156, 0, 158, 159, 157,
	160, 0, 161, 0, 162, 163, 234, 164, 0, 165,
	166, 167, 0, 235, 168, 169, 0, 170, 171, 0,
	172, 236, 237, 173, 0, 178, 174, 175, 177, 238,
	176, 239, 0, 179, 0, 180, 181, 0, 240, 241,
	242, 0, 0, 182, 243, 244, 0, 183, 184, 185,
	186, 0, 0, 187, 188, 189, 0, 0, 190, 191,
	192, 245, 246, 0, 193, 0, 85, 0, 0, 194,
	195, 196, 197, 0, 0, 0, 0, 0, 0, 0,
	0, 88, 89, 0, 90, 0, 0, 0, 0, 198,
	0, 0, 0, 551, 91, 92, 199, 200, 201, 202,
	93, 203, 204, 0, 94, 205, 206, 95, 0, 0,
	207, 208, 209, 0, 210, 0, 0, 0, 96, 97,
	98, 0, 99, 0, 100, 101, 0, 0, 102, 103,
	0, 0, 0, 0, 0, 0, 104, 105, 644, 107,
	211, 108, 212, 213, 0, 109, 0, 110, 0, 0,
	0, 111, 112, 0, 113, 0, 0, 0, 214, 114,
	115, 215, 0, 0, 0, 116, 117, 216, 0, 118,
	0, 119, 0, 0, 0, 0, 120, 217, 0, 218,
	0, 121, 122, 219, 220, 0, 0, 125, 0, 123,
	0, 0, 124, 221, 222, 223, 224, 0, 225, 0,
	0, 126, 0, 127, 128, 0, 0, 226, 0, 129,
	0, 0, 130, 0, 0, 131, 0, 132, 133, 134,
	135, 136, 0, 137, 138, 141, 139, 0, 140, 0,
	227, 142, 228, 143, 144, 0, 0, 0, 0, 0,
	145, 229, 0, 146, 0, 230, 147, 148, 149, 0,
	231, 150, 232, 151, 0, 152, 153, 154, 233, 155,
	156, 0, 158, 159, 157, 160, 0, 161, 0, 162,
	163, 234, 164, 0, 165, 166, 167, 0, 235, 168,
	169, 0, 170, 171, 0, 172, 236, 237, 173, 0,
	178, 174, 175, 177, 238, 176, 239, 0, 179, 643,
	180, 181, 0, 240, 241, 242, 0, 0, 182, 243,
	244, 0, 183, 184, 185, 186, 0, 0, 187, 188,
	189, 0, 0, 190, 191, 192, 245, 246, 0, 193,
	85, 0, 0, 0, 194, 195, 196, 197, 0, 0,
	0, 0, 0, 0, 0, 88, 89, 0, 90, 0,
	0, 647, 0, 198, 0, 0, 0, 0, 91, 92,
	199, 200, 201, 202, 93, 203, 204, 0, 94, 205,
	206, 95, 0, 0, 207, 208, 209, 0, 210, 0,
	0, 0, 96, 97, 98, 0, 99, 0, 100, 101,
	0, 0, 102, 103, 0, 0, 0, 0, 0, 0,
	104, 105, 106, 107, 211, 108, 212, 213, 0, 109,
	0, 110, 0, 0, 0, 111, 112, 0, 113, 0,
	0, 0, 214, 114, 115, 215, 0, 0, 0, 116,
	117, 216, 0, 118, 0, 119, 0, 0, 0, 0,
	120, 217, 0, 218, 0, 121, 122, 219, 220, 0,
	0, 125, 0, 123, 0, 0, 124, 221, 222, 223,
	224, 0, 225, 0, 0, 126, 0, 127, 128, 0,
	0, 226, 0, 129, 0, 0, 130, 0, 0, 131,
	0, 132, 133, 134, 135, 136, 0, 137, 138, 141,
	139, 0, 140, 0, 227, 142, 228, 143, 144, 0,
	0, 0, 0, 0, 145, 229, 0, 146, 0, 230,
	147, 148, 149, 0, 231, 150, 232, 151, 0, 152,
	153, 154, 233, 155, 156, 0, 158, 159, 157, 160,
	0, 161, 0, 162, 163, 234, 164, 0, 165, 166,
	167, 0, 235, 168, 169, 0, 170, 171, 0, 172,
	236, 237, 173, 0, 178, 174, 175, 177, 238, 176,
	239, 0, 179, 0, 180, 181, 0, 240, 241, 242,
	0, 0, 182, 243, 244, 0, 183, 184, 185, 186,
	0, 0, 187, 188, 189, 0, 0, 190, 191, 192,
	245, 246, 0, 193, 360, 0, 0, 0, 194, 195,
	196, 197, 0, 0, 0, 0, 0, 0, 0, 88,
	89, 0, 90, 0, 0, 647, 0, 198, 0, 0,
	0, 0, 91, 92, 199, 200, 201, 202, 93, 203,
	204, 0, 94, 205, 206, 95, 0, 0, 207, 208,
	209, 0, 210, 0, 365, 0, 96, 97, 98, 0,
	99, 0, 100, 101, 0, 366, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 106, 107, 211, 108,
	212, 213, 0, 109, 0, 110, 0, 0, 0, 111,
	112, 0, 113, 0, 0, 0, 214, 114, 115, 215,
	0, 0, 0, 116, 117, 216, 0, 118, 0, 119,
	0, 0, 367, 0, 120, 217, 0, 218, 0, 121,
	122, 219, 220, 369, 0, 125, 0, 123, 0, 368,
	124, 221, 222, 223, 224, 0, 225, 0, 370, 126,
	371, 127, 128, 0, 0, 226, 372, 129, 373, 0,
	130, 0, 0, 131, 0, 132, 133, 134, 135, 136,
	374, 137, 138, 141, 139, 0, 140, 0, 227, 142,
	228, 143, 144, 0, 0, 0, 0, 0, 145, 229,
	375, 146, 376, 230, 147, 148, 149, 0, 231, 150,
	232, 151, 0, 152, 153, 154, 233, 155, 156, 0,
	158, 159, 157, 160, 0, 161, 377, 162, 163, 234,
	164, 0, 165, 166, 167, 0, 235, 168, 169, 0,
	170, 171, 378, 172, 236, 237, 173, 0, 178, 174,
	175, 177, 238, 176, 239, 0, 179, 0, 180, 181,
	0, 240, 241, 242, 0, 0, 182, 243, 244, 0,
	183, 184, 185, 186, 0, 0, 187, 188, 189, 0,
	0, 190, 191, 192, 245, 246, 85, 193, 0, 0,
	0, 0, 194, 195, 196, 197, 0, 0, 0, 0,
	0, 88, 89, 0, 90, 0, 0, 0, 0, 198,
	0, 0, 0, 0, 91, 92, 199, 200, 201, 202,
	93, 203, 204, 0, 94, 205, 206, 95, 0, 0,
	207, 208, 209, 930, 210, 0, 0, 0, 96, 97,
	98, 0, 99, 928, 100, 101, 0, 0, 102, 103,
	0, 0, 0, 0, 0, 0, 104, 105, 106, 107,
	211, 108, 212, 213, 0, 109, 0, 110, 0, 0,
	0, 111, 112, 0, 113, 0, 0, 0, 214, 114,
	115, 215, 0, 1025, 0, 116, 117, 216, 0, 118,
	0, 119, 933, 0, 0, 0, 120, 217, 0, 218,
	0, 121, 122, 219, 220, 0, 0, 125, 1023, 123,
	0, 0, 124, 221, 222, 223, 224, 0, 225, 0,
	0, 126, 0, 127, 128, 0, 0, 226, 0, 129,
	0, 0, 130, 0, 0, 131, 0, 132, 133, 134,
	135, 136, 0, 137, 138, 141, 139, 0, 140, 0,
	227, 142, 228, 143, 144, 0, 0, 0, 0, 0,
	145, 229, 0, 146, 0, 230, 147, 148, 149, 0,
	231, 150, 232, 151, 932, 152, 153, 154, 233, 155,
	156, 0, 158, 159, 157, 160, 0, 161, 0, 162,
	163, 234, 164, 0, 165, 166, 167, 0, 235, 168,
	169, 0, 170, 171, 0, 172, 236, 237, 173, 0,
	178, 174, 175, 177, 238, 176, 239, 0, 179, 0,
	180, 181, 0, 240, 241, 242, 0, 0, 182, 243,
	244, 0, 183, 184, 185, 186, 0, 1024, 187, 188,
	189, 0, 0, 190, 191, 192, 245, 246, 85, 193,
	0, 0, 0, 0, 194, 195, 196, 197, 0, 0,
	0, 0, 0, 88, 89, 0, 90, 0, 0, 0,
	0, 198, 0, 0, 0, 0, 91, 92, 199, 200,
	201, 202, 93, 203, 204, 0, 94, 205, 206, 95,
	0, 0, 207, 208, 209, 930, 210, 0, 0, 925,
	96, 97, 98, 0, 99, 928, 100, 101, 0, 0,
	102, 103, 0, 0, 0, 0, 0, 0, 104, 105,
	106, 107, 211, 108, 212, 213, 0, 109, 0, 110,
	0, 0, 0, 111, 112, 0, 113, 0, 0, 0,
	214, 114, 115, 215, 0, 0, 0, 116, 117, 216,
	0, 118, 0, 119, 933, 0, 0, 0, 120, 217,
	0, 218, 0, 121, 122, 924, 220, 0, 0, 125,
	0, 123, 0, 0, 124, 221, 222, 223, 224, 0,
	225, 0, 0, 126, 0, 127, 128, 0, 0, 226,
	0, 129, 0, 0, 130, 0, 0, 131, 0, 132,
	133, 134, 135, 136, 0, 137, 138, 141, 139, 0,
	140, 0, 227, 142, 228, 143, 144, 0, 0, 0,
	0, 0, 145, 229, 0, 146, 0, 230, 147, 148,
	149, 0, 231, 150, 232, 151, 932, 152, 153, 154,
	233, 155, 156, 0, 158, 159, 157, 160, 0, 161,
	0, 162, 163, 234, 164, 0, 165, 166, 167, 0,
	235, 168, 169, 0, 170, 171, 0, 172, 236, 237,
	173, 0, 178, 174, 175, 177, 238, 176, 239, 0,
	179, 0, 180, 181, 0, 240, 241, 242, 0, 0,
	182, 243, 244, 0, 183, 184, 185, 186, 0, 931,
	187, 188, 189, 0, 0, 190, 191, 192, 245, 246,
	85, 193, 0, 0, 0, 0, 194, 195, 196, 197,
	0, 0, 0, 0, 0, 88, 89, 0, 90, 0,
	0, 0, 0, 198, 0, 1273, 0, 0, 91, 92,
	199, 200, 201, 202, 93, 203, 204, 0, 94, 205,
	206, 95, 0, 0, 207, 208, 209, 0, 210, 0,
	0, 0, 96, 97, 98, 0, 99, 0, 100, 101,
	0, 0, 102, 103, 0, 0, 0, 0, 0, 0,
	104, 105, 106, 107, 211, 108, 212, 213, 0, 109,
	0, 110, 0, 0, 0, 111, 112, 0, 113, 0,
	0, 0, 214, 114, 115, 215, 0, 0, 0, 116,
	117, 216, 0, 118, 0, 119, 0, 0, 0, 0,
	120, 217, 0, 218, 0, 121, 122, 219, 220, 0,
	0, 125, 0, 123, 0, 0, 124, 221, 222, 223,
	224, 0, 225, 0, 0, 126, 0, 127, 128, 0,
	0, 226, 0, 129, 0, 0, 130, 0, 0, 131,
	0, 132, 133, 134, 135, 136, 0, 137, 138, 141,
	139, 0, 140, 0, 227, 142, 228, 143, 144, 0,
	0, 0, 0, 0, 145, 229, 0, 146, 0, 230,
	147, 148, 149, 0, 231, 150, 232, 151, 0, 152,
	153, 154, 233, 155, 156, 0, 158, 159, 157, 160,
	0, 161, 0, 162, 163, 234, 164, 0, 165, 166,
	167, 0, 235, 168, 169, 0, 170, 171, 0, 172,
	236, 237, 173, 0, 178, 174, 175, 177, 238, 176,
	239, 0, 179, 0, 180, 181, 0, 240, 241, 242,
	0, 0, 182, 243, 244, 0, 183, 184, 185, 186,
	0, 0, 187, 188, 189, 0, 0, 190, 191, 192,
	245, 246, 85, 193, 0, 0, 0, 0, 194, 195,
	196, 197, 0, 0, 0, 0, 0, 88, 89, 0,
	90, 0, 0, 0, 0, 198, 0, 0, 0, 0,
	91, 92, 199, 200, 201, 202, 93, 203, 204, 0,
	94, 205, 206, 95, 0, 0, 207, 208, 209, 0,
	210, 0, 0, 0, 96, 97, 98, 0, 99, 0,
	100, 101, 0, 0, 102, 103, 0, 0, 0, 0,
	0, 0, 104, 105, 106, 107, 211, 108, 212, 213,
	0, 109, 0, 110, 0, 0, 0, 111, 112, 0,
	113, 0, 0, 0, 214, 114, 115, 215, 0, 0,
	0, 116, 117, 216, 0, 118, 0, 119, 0, 0,
	0, 0, 120, 217, 0, 218, 0, 121, 122, 219,
	220, 0, 0, 125, 0, 123, 0, 0, 124, 221,
	222, 223, 224, 0, 225, 0, 0, 126, 0, 127,
	128, 0, 0, 226, 0, 129, 0, 0, 130, 0,
	0, 131, 0, 132, 133, 134, 135, 136, 0, 137,
	138, 141, 139, 0, 140, 0, 227, 142, 228, 143,
	144, 0, 0, 332, 0, 0, 145, 229, 0, 146,
	0, 230, 147, 148, 149, 0, 231, 150, 232, 151,
	0, 152, 153, 154, 233, 155, 156, 0, 158, 159,
	157, 160, 0, 161, 0, 162, 163, 234, 164, 0,
	165, 166, 167, 0, 235, 168, 169, 0, 170, 171,
	0, 172, 236, 237, 173, 0, 178, 174, 175, 177,
	238, 176, 239, 0, 179, 0, 180, 181, 0, 240,
	241, 242, 0, 0, 182, 243, 244, 0, 183, 184,
	185, 186, 0, 0, 187, 188, 189, 0, 0, 190,
	191, 192, 245, 246, 85, 193, 0, 0, 0, 0,
	194, 195, 196, 197, 0, 0, 0, 0, 0, 88,
	89, 0, 90, 0, 0, 0, 0, 198, 0, 0,
	0, 0, 91, 92, 199, 200, 201, 202, 93, 203,
	204, 0, 94, 205, 206, 95, 0, 0, 207, 208,
	209, 0, 210, 0, 0, 0, 96, 97, 98, 0,
	99, 0, 100, 101, 0, 0, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 106, 107, 211, 108,
	212, 213, 0, 109, 0, 110, 0, 0, 0, 111,
	112, 0, 113, 0, 0, 0, 214, 114, 115, 215,
	0, 0, 0, 116, 117, 216, 0, 118, 0, 119,
	0, 0, 0, 0, 120, 217, 0, 218, 0, 121,
	122, 595, 220, 0, 0, 125, 0, 123, 0, 0,
	124, 221, 222, 223, 224, 0, 225, 0, 0, 126,
	0, 127, 128, 0, 0, 226, 0, 129, 0, 0,
	130, 0, 0, 131, 0, 132, 133, 134, 135, 136,
	0, 137, 138, 141, 139, 0, 140, 0, 227, 142,
	228, 143, 144, 0, 0, 332, 0, 0, 145, 229,
	0, 146, 0, 230, 147, 148, 149, 0, 231, 150,
	232, 151, 0, 152, 153, 154, 233, 155, 156, 0,
	158, 159, 157, 160, 0, 161, 0, 162, 163, 234,
	164, 0, 165, 166, 167, 0, 235, 168, 169, 0,
	170, 171, 0, 172, 236, 237, 173, 0, 178, 174,
	175, 177, 238, 176, 239, 0, 179, 0, 180, 181,
	0, 240, 241, 242, 0, 0, 182, 243, 244, 0,
	183, 184, 185, 186, 0, 0, 187, 188, 189, 0,
	0, 190, 191, 192, 245, 246, 85, 193, 0, 0,
	0, 0, 194, 195, 196, 197, 0, 0, 0, 0,
	0, 88, 89, 385, 90, 0, 0, 0, 0, 198,
	0, 0, 0, 0, 91, 92, 199, 200, 201, 202,
	93, 203, 204, 0, 94, 205, 206, 95, 0, 0,
	207, 208, 209, 0, 210, 0, 0, 0, 96, 97,
	98, 0, 99, 0, 100, 101, 0, 0, 102, 103,
	0, 0, 0, 0, 0, 0, 104, 105, 106, 107,
	211, 108, 212, 213, 0, 109, 0, 110, 0, 0,
	0, 111, 112, 0, 113, 0, 0, 0, 214, 114,
	115, 215, 0, 0, 0, 116, 117, 216, 0, 118,
	0, 119, 0, 0, 0, 0, 120, 217, 0, 218,
	0, 121, 122, 219, 220, 0, 0, 125, 0, 123,
	0, 0, 124, 221, 222, 223, 224, 0, 225, 0,
	0, 126, 0, 127, 128, 0, 0, 226, 0, 129,
	0, 0, 130, 0, 0, 131, 0, 132, 133, 134,
	135, 136, 0, 137, 138, 141, 139, 0, 140, 0,
	227, 142, 228, 143, 144, 0, 0, 0, 0, 0,
	145, 229, 0, 146, 0, 230, 147, 148, 149, 0,
	231, 150, 232, 151, 0, 152, 153, 154, 233, 155,
	156, 0, 158, 159, 157, 160, 0, 161, 0, 162,
	163, 234, 164, 0, 165, 166, 167, 0, 235, 168,
	169, 0, 170, 171, 0, 172, 236, 237, 173, 0,
	178, 174, 175, 177, 238, 176, 239, 0, 179, 0,
	180, 181, 0, 240, 241, 242, 0, 0, 182, 243,
	244, 0, 183, 184, 185, 186, 0, 0, 187, 188,
	189, 0, 0, 190, 191, 192, 245, 246, 85, 193,
	0, 0, 0, 0, 194, 195, 196, 197, 0, 0,
	0, 0, 0, 88, 89, 0, 90, 0, 0, 0,
	0, 198, 0, 0, 0, 0, 91, 92, 199, 200,
	201, 202, 93, 203, 204, 0, 94, 205, 206, 95,
	0, 0, 207, 208, 209, 0, 210, 0, 0, 0,
	96, 97, 98, 0, 99, 0, 100, 101, 0, 0,
	102, 103, 0, 0, 0, 0, 0, 0, 104, 105,
	106, 107, 211, 108, 212, 213, 0, 109, 0, 110,
	0, 0, 0, 111, 112, 0, 113, 0, 0, 0,
	214, 114, 115, 215, 0, 0, 0, 116, 117, 216,
	0, 118, 0, 119, 0, 0, 0, 0, 120, 217,
	0, 218, 0, 121, 122, 338, 220, 0, 0, 125,
	0, 123, 0, 0, 124, 221, 222, 223, 224, 0,
	225, 0, 0, 126, 0, 127, 128, 0, 0, 226,
	0, 129, 0, 0, 130, 0, 0, 131, 0, 132,
	133, 134, 135, 136, 0, 137, 138, 141, 139, 0,
	140, 0, 227, 142, 228, 143, 144, 0, 0, 332,
	0, 0, 145, 229, 0, 146, 0, 230, 147, 148,
	149, 0, 231, 150, 232, 151, 0, 152, 153, 154,
	233, 155, 156, 0, 158, 159, 157, 160, 0, 161,
	0, 162, 163, 234, 164, 0, 165, 166, 167, 0,
	235, 168, 169, 0, 170, 171, 0, 172, 236, 237,
	173, 0, 178, 174, 175, 177, 238, 176, 239, 0,
	179, 0, 180, 181, 0, 240, 241, 242, 0, 0,
	182, 243, 244, 0, 183, 184, 185, 186, 0, 0,
	187, 188, 189, 0, 0, 190, 191, 192, 245, 246,
	85, 193, 0, 0, 0, 0, 194, 195, 196, 197,
	0, 0, 0, 0, 0, 88, 89, 250, 90, 0,
	0, 0, 0, 198, 0, 0, 0, 0, 91, 92,
	199, 200, 201, 202, 93, 203, 204, 0, 94, 205,
	206, 95, 0, 0, 207, 208, 209, 0, 210, 0,
	0, 0, 96, 97, 98, 0, 99, 0, 100, 101,
	0, 0, 102, 103, 0, 0, 0, 0, 0, 0,
	104, 105, 106, 107, 211, 108, 212, 213, 0, 109,
	0, 110, 0, 0, 0, 111, 112, 0, 113, 0,
	0, 0, 214, 114, 115, 215, 0, 0, 0, 116,
	117, 216, 0, 118, 0, 119, 0, 0, 0, 0,
	120, 217, 0, 218, 0, 121, 122, 219, 220, 0,
	0, 125, 0, 123, 0, 0, 124, 221, 222, 223,
	224, 0, 225, 0, 0, 126, 0, 127, 128, 0,
	0, 226, 0, 129, 0, 0, 130, 0, 0, 131,
	0, 132, 133, 134, 135, 136, 0, 137, 138, 141,
	139, 0, 140, 0, 227, 142, 228, 143, 144, 0,
	0, 0, 0, 0, 145, 229, 0, 146, 0, 230,
	147, 148, 149, 0, 231, 150, 232, 249, 0, 152,
	153, 154, 233, 155, 156, 0, 158, 159, 157, 160,
	0, 161, 0, 162, 163, 234, 164, 0, 165, 166,
	167, 0, 235, 168, 169, 0, 170, 171, 0, 172,
	236, 237, 173, 0, 178, 174, 175, 177, 238, 176,
	239, 0, 179, 0, 180, 181, 0, 240, 241, 242,
	0, 0, 182, 243, 244, 0, 183, 184, 185, 186,
	0, 0, 187, 188, 189, 0, 0, 190, 191, 192,
	245, 246, 85, 193, 0, 0, 0, 0, 194, 195,
	196, 197, 0, 0, 0, 0, 0, 88, 89, 0,
	90, 0, 0, 0, 0, 198, 0, 0, 0, 0,
	91, 92, 199, 200, 201, 202, 93, 203, 204, 0,
	94, 205, 206, 95, 0, 0, 207, 208, 209, 0,
	210, 0, 0, 0, 96, 97, 98, 0, 99, 0,
	100, 101, 0, 0, 102, 103, 0, 0, 0, 0,
	0, 0, 104, 105, 106, 107, 211, 108, 212, 213,
	0, 109, 0, 110, 0, 0, 0, 111, 112, 0,
	113, 0, 0, 0, 214, 114, 115, 215, 0, 0,
	0, 116, 117, 216, 0, 118, 0, 119, 0, 0,
	0, 0, 120, 217, 0, 218, 0, 121, 122, 219,
	220, 0, 0, 125, 0, 123, 0, 0, 124, 221,
	222, 223, 224, 0, 225, 0, 0, 126, 0, 127,
	128, 0, 0, 226, 0, 129, 0, 0, 130, 0,
	0, 131, 0, 132, 133, 134, 135, 136, 0, 137,
	138, 141, 139, 0, 140, 0, 227, 142, 228, 143,
	144, 0, 0, 0, 0, 0, 145, 229, 0, 146,
	0, 230, 147, 148, 149, 0, 231, 150, 232, 151,
	0, 152, 153, 154, 233, 155, 156, 0, 158, 159,
	157, 160, 0, 161, 0, 162, 163, 234, 164, 0,
	165, 166, 167, 0, 235, 168, 169, 0, 170, 171,
	0, 172, 236, 237, 173, 0, 178, 174, 175, 177,
	238, 176, 239, 0, 179, 0, 180, 181, 0, 240,
	241, 242, 0, 0, 182, 243, 244, 0, 183, 184,
	185, 186, 0, 0, 187, 188, 189, 0, 0, 190,
	191, 192, 245, 246, 85, 193, 0, 0, 0, 0,
	194, 195, 196, 197, 0, 0, 0, 0, 0, 88,
	89, 0, 90, 0, 0, 0, 0, 198, 0, 0,
	0, 0, 91, 92, 199, 200, 201, 202, 93, 203,
	204, 0, 94, 205, 206, 95, 0, 0, 207, 208,
	209, 0, 210, 0, 0, 0, 96, 97, 98, 0,
	99, 0, 100, 101, 0, 0, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 106, 107, 211, 108,
	212, 213, 0, 109, 0, 110, 0, 0, 0, 111,
	112, 0, 113, 0, 0, 0, 214, 114, 115, 215,
	0, 0, 0, 116, 117, 216, 0, 118, 0, 119,
	0, 0, 0, 0, 120, 217, 0, 218, 0, 121,
	122, 1194, 220, 0, 0, 125, 0, 123, 0, 0,
	124, 221, 222, 223, 224, 0, 225, 0, 0, 126,
	0, 127, 128, 0, 0, 226, 0, 129, 0, 0,
	130, 0, 0, 131, 0, 132, 133, 134, 135, 136,
	0, 137, 138, 141, 139, 0, 140, 0, 227, 142,
	228, 143, 144, 0, 0, 0, 0, 0, 145, 229,
	0, 146, 0, 230, 147, 148, 149, 0, 231, 150,
	232, 151, 0, 152, 153, 154, 233, 155, 156, 0,
	158, 159, 157, 160, 0, 161, 0, 162, 163, 234,
	164, 0, 165, 166, 167, 0, 235, 168, 169, 0,
	170, 171, 0, 172, 236, 237, 173, 0, 178, 174,
	175, 177, 238, 176, 239, 0, 179, 0, 180, 181,
	0, 240, 241, 242, 0, 0, 182, 243, 244, 0,
	183, 184, 185, 186, 0, 0, 187, 188, 189, 0,
	0, 190, 191, 192, 245, 246, 85, 193, 0, 0,
	0, 0, 194, 195, 196, 197, 0, 0, 0, 0,
	0, 88, 89, 0, 90, 0, 0, 0, 0, 198,
	0, 0, 0, 0, 91, 92, 199, 200, 201, 202,
	93, 203, 204, 0, 94, 205, 206, 95, 0, 0,
	207, 208, 209, 0, 210, 0, 0, 0, 96, 97,
	98, 0, 99, 0, 100, 101, 0, 0, 102, 103,
	0, 0, 0, 0, 0, 0, 104, 105, 106, 107,
	211, 108, 212, 213, 0, 109, 0, 110, 0, 0,
	0, 111, 112, 0, 113, 0, 0, 0, 214, 114,
	115, 215, 0, 0, 0, 116, 117, 216, 0, 118,
	0, 119, 0, 0, 0, 0, 120, 217, 0, 218,
	0, 121, 122, 1192, 220, 0, 0, 125, 0, 123,
	0, 0, 124, 221, 222, 223, 224, 0, 225, 0,
	0, 126, 0, 127, 128, 0, 0, 226, 0, 129,
	0, 0, 130, 0, 0, 131, 0, 132, 133, 134,
	135, 136, 0, 137, 138, 141, 139, 0, 140, 0,
	227, 142, 228, 143, 144, 0, 0, 0, 0, 0,
	145, 229, 0, 146, 0, 230, 147, 148, 149, 0,
	231, 150, 232, 151, 0, 152, 153, 154, 233, 155,
	156, 0, 158, 159, 157, 160, 0, 161, 0, 162,
	163, 234, 164, 0, 165, 166, 167, 0, 235, 168,
	169, 0, 170, 171, 0, 172, 236, 237, 173, 0,
	178, 174, 175, 177, 238, 176, 239, 0, 179, 0,
	180, 181, 0, 240, 241, 242, 0, 0, 182, 243,
	244, 0, 183, 184, 185, 186, 0, 0, 187, 188,
	189, 0, 0, 190, 191, 192, 245, 246, 85, 193,
	0, 0, 0, 0, 194, 195, 196, 197, 0, 0,
	0, 0, 0, 88, 89, 0, 90, 0, 0, 0,
	0, 198, 0, 0, 0, 0, 91, 92, 199, 200,
	201, 202, 93, 203, 204, 0, 94, 205, 206, 95,
	0, 0, 207, 208, 209, 0, 210, 0, 0, 0,
	96, 97, 98, 0, 99, 0, 100, 101, 0, 0,
	102, 103, 0, 0, 0, 0, 0, 0, 104, 105,
	106, 107, 211, 108, 212, 213, 0, 109, 0, 110,
	0, 0, 0, 111, 112, 0, 113, 0, 0, 0,
	214, 114, 115, 215, 0, 0, 0, 116, 117, 216,
	0, 118, 0, 119, 0, 0, 0, 0, 120, 217,
	0, 218, 0, 121, 122, 1183, 220, 0, 0, 125,
	0, 123, 0, 0, 124, 221, 222, 223, 224, 0,
	225, 0, 0, 126, 0, 127, 128, 0, 0, 226,
	0, 129, 0, 0, 130, 0, 0, 131, 0, 132,
	133, 134, 135, 136, 0, 137, 138, 141, 139, 0,
	140, 0, 227, 142, 228, 143, 144, 0, 0, 0,
	0, 0, 145, 229, 0, 146, 0, 230, 147, 148,
	149, 0, 231, 150, 232, 151, 0, 152, 153, 154,
	233, 155, 156, 0, 158, 159, 157, 160, 0, 161,
	0, 162, 163, 234, 164, 0, 165, 166, 167, 0,
	235, 168, 169, 0, 170, 171, 0, 172, 236, 237,
	173, 0, 178, 174, 175, 177, 238, 176, 239, 0,
	179, 0, 180, 181, 0, 240, 241, 242, 0, 0,
	182, 243, 244, 0, 183, 184, 185, 186, 0, 0,
	187, 188, 189, 0, 0, 190, 191, 192, 245, 246,
	85, 193, 0, 0, 0, 0, 194, 195, 196, 197,
	0, 0, 0, 0, 0, 88, 89, 0, 90, 0,
	0, 0, 0, 198, 0, 0, 0, 0, 91, 92,
	199, 200, 201, 202, 93, 203, 204, 0, 94, 205,
	206, 95, 0, 0, 207, 208, 209, 0, 210, 0,
	0, 0, 96, 97, 98, 0, 99, 0, 100, 101,
	0, 0, 102, 103, 0, 0, 0, 0, 0, 0,
	104, 105, 106, 107, 211, 108, 212, 213, 0, 109,
	0, 110, 0, 0, 0, 111, 112, 0, 113, 0,
	0, 0, 214, 114, 115, 215, 0, 0, 0, 116,
	117, 216, 0, 118, 0, 119, 0, 0, 0, 0,
	120, 217, 0, 218, 0, 121, 122, 793, 220, 0,
	0, 125, 0, 123, 0, 0, 124, 221, 222, 223,
	224, 0, 225, 0, 0, 126, 0, 127, 128, 0,
	0, 226, 0, 129, 0, 0, 130, 0, 0, 131,
	0, 132, 133, 134, 135, 136, 0, 137, 138, 141,
	139, 0, 140, 0, 227, 142, 228, 143, 144, 0,
	0, 0, 0, 0, 145, 229, 0, 146, 0, 230,
	147, 148, 149, 0, 231, 150, 232, 151, 0, 152,
	153, 154, 233, 155, 156, 0, 158, 159, 157, 160,
	0, 161, 0, 162, 163, 234, 164, 0, 165, 166,
	167, 0, 235, 168, 169, 0, 170, 171, 0, 172,
	236, 237, 173, 0, 178, 174, 175, 177, 238, 176,
	239, 0, 179, 0, 180, 181, 0, 240, 241, 242,
	0, 0, 182, 243, 244, 0, 183, 184, 185, 186,
	0, 0, 187, 188, 189, 0, 0, 190, 191, 192,
	245, 246, 85, 193, 0, 0, 0, 0, 194, 195,
	196, 197, 0, 0, 0, 0, 0, 88, 89, 0,
	90, 0, 0, 0, 0, 198, 0, 0, 0, 0,
	91, 92, 199, 200, 201, 202, 93, 203, 204, 0,
	94, 205, 206, 95, 0, 0, 207, 208, 209, 0,
	210, 0, 0, 0, 96, 97, 98, 0, 99, 0,
	100, 101, 0, 0, 102, 103, 0, 0, 0, 0,
	0, 0, 104, 105, 106, 107, 211, 108, 212, 213,
	0, 109, 0, 110, 0, 0, 0, 111, 112, 0,
	113, 0, 0, 0, 214, 114, 115, 215, 0, 0,
	0, 116, 117, 216, 0, 118, 0, 119, 0, 0,
	0, 0, 120, 217, 0, 218, 0, 121, 122, 219,
	220, 0, 0, 125, 0, 123, 0, 0, 124, 221,
	222, 223, 224, 0, 225, 0, 0, 126, 0, 127,
	128, 0, 0, 226, 0, 129, 0, 0, 130, 0,
	0, 131, 0, 132, 133, 134, 135, 136, 0, 137,
	138, 141, 139, 0, 140, 0, 227, 142, 228, 143,
	144, 0, 0, 0, 0, 0, 145, 229, 0, 146,
	0, 230, 147, 148, 149, 0, 231, 150, 232, 151,
	0, 152, 153, 154, 233, 155, 156, 0, 158, 159,
	157, 160, 0, 161, 0, 162, 163, 234, 164, 0,
	264, 166, 167, 0, 235, 168, 169, 0, 170, 171,
	0, 172, 236, 237, 173, 0, 178, 174, 175, 177,
	238, 176, 239, 0, 179, 0, 180, 181, 0, 240,
	241, 242, 0, 0, 182, 243, 244, 0, 183, 184,
	185, 186, 0, 0, 187, 188, 189, 0, 0, 190,
	191, 192, 245, 246, 85, 193, 0, 0, 0, 0,
	194, 195, 196, 197, 0, 0, 0, 0, 0, 88,
	89, 0, 90, 0, 0, 0, 0, 198, 0, 582,
	0, 0, 91, 92, 199, 200, 201, 202, 93, 203,
	204, 0, 94, 205, 206, 95, 0, 0, 207, 208,
	209, 0, 210, 0, 0, 0, 96, 97, 98, 0,
	99, 0, 100, 101, 0, 0, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 106, 107, 211, 108,
	212, 213, 0, 109, 0, 110, 0, 0, 0, 111,
	112, 0, 113, 0, 0, 0, 214, 114, 115, 215,
	0, 0, 0, 116, 117, 216, 0, 118, 0, 119,
	0, 0, 0, 0, 120, 217, 0, 218, 0, 121,
	122, 219, 220, 0, 0, 125, 0, 123, 0, 0,
	124, 221, 222, 223, 224, 0, 225, 0, 0, 126,
	0, 127, 128, 0, 0, 226, 0, 129, 0, 0,
	130, 0, 0, 131, 0, 132, 133, 134, 135, 136,
	0, 137, 138, 141, 139, 0, 140, 0, 227, 142,
	228, 143, 144, 0, 0, 0, 0, 0, 145, 229,
	0, 146, 0, 230, 147, 148, 149, 0, 231, 150,
	232, 151, 0, 152, 153, 154, 233, 155, 156, 0,
	158, 159, 157, 160, 0, 161, 0, 162, 163, 234,
	164, 0, 165, 166, 167, 0, 235, 168, 169, 0,
	0, 171, 0, 172, 236, 237, 173, 0, 178, 174,
	175, 177, 238, 176, 239, 0, 179, 0, 180, 181,
	0, 240, 241, 242, 0, 0, 182, 243, 244, 0,
	183, 184, 185, 186, 0, 0, 187, 188, 189, 0,
	0, 190, 191, 192, 245, 246, 85, 193, 0, 0,
	0, 0, 194, 195, 196, 197, 0, 0, 0, 0,
	0, 88, 89, 0, 90, 0, 0, 0, 0, 198,
	0, 0, 0, 0, 91, 92, 199, 200, 201, 202,
	93, 203, 204, 0, 94, 205, 206, 95, 0, 0,
	207, 208, 209, 0, 210, 0, 0, 0, 96, 97,
	98, 0, 99, 0, 100, 101, 0, 0, 102, 103,
	0, 0, 0, 0, 0, 0, 104, 105, 106, 107,
	211, 108, 212, 213, 0, 109, 0, 110, 0, 0,
	0, 111, 112, 0, 113, 0, 0, 0, 214, 114,
	115, 215, 0, 0, 0, 116, 117, 216, 0, 118,
	0, 119, 0, 0, 0, 0, 120, 217, 0, 218,
	0, 121, 122, 433, 220, 0, 0, 125, 0, 123,
	0, 0, 124, 221, 222, 223, 224, 0, 225, 0,
	0, 126, 0, 127, 128, 0, 0, 226, 0, 129,
	0, 0, 130, 0, 0, 131, 0, 132, 133, 134,
	135, 136, 0, 137, 138, 141, 139, 0, 140, 0,
	227, 142, 228, 143, 144, 0, 0, 0, 0, 0,
	145, 229, 0, 146, 0, 230, 147, 148, 149, 0,
	231, 150, 232, 151, 0, 152, 153, 154, 233, 155,
	156, 0, 158, 159, 157, 160, 0, 161, 0, 162,
	163, 234, 164, 0, 165, 166, 167, 0, 235, 168,
	169, 0, 170, 171, 0, 172, 236, 237, 173, 0,
	178, 174, 175, 177, 238, 176, 239, 0, 179, 0,
	180, 181, 0, 240, 241, 242, 0, 0, 182, 243,
	244, 0, 183, 184, 185, 186, 0, 0, 187, 188,
	189, 0, 0, 190, 191, 192, 245, 246, 85, 193,
	0, 0, 0, 0, 194, 195, 196, 197, 0, 0,
	0, 0, 0, 88, 89, 0, 90, 0, 0, 0,
	0, 198, 0, 0, 0, 0, 91, 92, 199, 200,
	201, 202, 93, 203, 204, 0, 94, 205, 206, 95,
	0, 0, 207, 208, 209, 0, 210, 0, 0, 0,
	96, 97, 98, 0, 99, 0, 100, 101, 0, 0,
	102, 103, 0, 0, 0, 0, 0, 0, 104, 105,
	106, 107, 211, 108, 212, 213, 0, 109, 0, 110,
	0, 0, 0, 111, 112, 0, 113, 0, 0, 0,
	214, 114, 115, 215, 0, 0, 0, 116, 117, 216,
	0, 118, 0, 119, 0, 0, 0, 0, 120, 217,
	0, 218, 0, 121, 122, 430, 220, 0, 0, 125,
	0, 123, 0, 0, 124, 221, 222, 223, 224, 0,
	225, 0, 0, 126, 0, 127, 128, 0, 0, 226,
	0, 129, 0, 0, 130, 0, 0, 131, 0, 132,
	133, 134, 135, 136, 0, 137, 138, 141, 139, 0,
	140, 0, 227, 142, 228, 143, 144, 0, 0, 0,
	0, 0, 145, 229, 0, 146, 0, 230, 147, 148,
	149, 0, 231, 150, 232, 151, 0, 152, 153, 154,
	233, 155, 156, 0, 158, 159, 157, 160, 0, 161,
	0, 162, 163, 234, 164, 0, 165, 166, 167, 0,
	235, 168, 169, 0, 170, 171, 0, 172, 236, 237,
	173, 0, 178, 174, 175, 177, 238, 176, 239, 0,
	179, 0, 180, 181, 0, 240, 241, 242, 0, 0,
	182, 243, 244, 0, 183, 184, 185, 186, 0, 0,
	187, 188, 189, 0, 0, 190, 191, 192, 245, 246,
	85, 193, 0, 0, 0, 0, 194, 195, 196, 197,
	0, 0, 0, 0, 0, 88, 89, 0, 90, 0,
	0, 0, 0, 198, 0, 0, 0, 0, 91, 92,
	199, 200, 201, 202, 93, 203, 204, 0, 94, 205,
	206, 95, 0, 0, 207, 208, 391, 0, 210, 0,
	0, 0, 96, 97, 98, 0, 99, 0, 100, 101,
	0, 0, 102, 103, 0, 0, 0, 0, 0, 0,
	104, 105, 106, 107, 211, 108, 212, 213, 0, 109,
	0, 110, 0, 0, 0, 111, 112, 0, 113, 0,
	0, 0, 214, 114, 115, 215, 0, 0, 0, 116,
	117, 216, 0, 118, 0, 119, 0, 0, 0, 0,
	120, 217, 0, 218, 0, 121, 122, 219, 220, 0,
	0, 125, 0, 123, 0, 0, 124, 221, 222, 223,
	224, 0, 225, 0, 0, 126, 0, 127, 128, 0,
	0, 226, 0, 129, 0, 0, 130, 0, 0, 131,
	0, 132, 133, 134, 135, 275, 0, 137, 138, 141,
	139, 0, 140, 0, 227, 142, 228, 143, 144, 0,
	0, 0, 0, 0, 145, 229, 0, 146, 0, 230,
	147, 148, 149, 0, 231, 150, 232, 151, 0, 152,
	153, 154, 233, 155, 156, 0, 158, 159, 157, 160,
	0, 161, 0, 162, 163, 234, 164, 0, 165, 166,
	167, 0, 235, 168, 169, 0, 170, 171, 0, 172,
	236, 237, 173, 0, 178, 174, 175, 177, 238, 176,
	239, 0, 179, 0, 180, 181, 0, 274, 241, 242,
	0, 0, 270, 243, 244, 0, 183, 184, 185, 186,
	0, 0, 187, 188, 189, 0, 0, 190, 191, 192,
	245, 246, 85, 193, 0, 0, 0, 0, 194, 195,
	196, 197, 0, 0, 0, 0, 0, 88, 89, 0,
	90, 0, 0, 0, 0, 198, 0, 0, 0, 0,
	91, 92, 199, 200, 201, 202, 93, 203, 204, 0,
	94, 205, 206, 95, 0, 0, 207, 208, 209, 0,
	210, 0, 0, 0, 96, 97, 98, 0, 99, 0,
	100, 101, 0, 0, 102, 103, 0, 0, 0, 0,
	0, 0, 104, 105, 106, 107, 211, 108, 212, 213,
	0, 109, 0, 110, 0, 0, 0, 111, 112, 0,
	113, 0, 0, 0, 214, 114, 115, 215, 0, 0,
	0, 116, 117, 216, 0, 118, 0, 119, 0, 0,
	0, 0, 120, 217, 0, 218, 0, 121, 122, 219,
	220, 0, 0, 125, 0, 123, 0, 0, 124, 221,
	222, 223, 224, 0, 225, 0, 0, 126, 0, 127,
	128, 0, 0, 226, 0, 129, 0, 0, 130, 0,
	0, 131, 0, 132, 133, 134, 135, 275, 0, 137,
	138, 141, 139, 0, 140, 0, 227, 142, 228, 143,
	144, 0, 0, 0, 0, 0, 145, 229, 0, 146,
	0, 230, 147, 148, 149, 0, 231, 150, 232, 151,
	0, 152, 153, 154, 233, 155, 156, 0, 158, 159,
	157, 160, 0, 161, 0, 162, 163, 234, 164, 0,
	165, 166, 167, 0, 235, 168, 169, 0, 170, 171,
	0, 172, 236, 237, 173, 0, 178, 174, 175, 177,
	238, 176, 239, 0, 179, 0, 180, 181, 0, 274,
	241, 242, 0, 0, 270, 243, 244, 0, 183, 184,
	185, 186, 0, 0, 187, 188, 189, 0, 0, 190,
	191, 192, 245, 246, 85, 193, 0, 0, 0, 0,
	194, 195, 196, 197, 0, 0, 0, 0, 0, 88,
	89, 0, 90, 0, 0, 0, 0, 198, 0, 0,
	0, 0, 91, 92, 199, 200, 201, 202, 93, 203,
	204, 0, 94, 205, 206, 95, 0, 0, 207, 208,
	209, 0, 210, 0, 0, 0, 96, 97, 98, 0,
	99, 0, 100, 101, 0, 0, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 106, 107, 211, 108,
	212, 213, 0, 109, 0, 110, 0, 0, 0, 111,
	112, 0, 113, 0, 0, 0, 214, 114, 115, 215,
	0, 0, 0, 116, 117, 216, 0, 118, 0, 119,
	0, 0, 0, 0, 120, 217, 0, 218, 0, 121,
	122, 355, 220, 0, 0, 125, 0, 123, 0, 0,
	124, 221, 222, 223, 224, 0, 225, 0, 0, 126,
	0, 127, 128, 0, 0, 226, 0, 129, 0, 0,
	130, 0, 0, 131, 0, 132, 133, 134, 135, 136,
	0, 137, 138, 141, 139, 0, 140, 0, 227, 142,
	228, 143, 144, 0, 0, 0, 0, 0, 145, 229,
	0, 146, 0, 230, 147, 148, 149, 0, 231, 150,
	232, 151, 0, 152, 153, 154, 233, 155, 156, 0,
	158, 159, 157, 160, 0, 161, 0, 162, 163, 234,
	164, 0, 165, 166, 167, 0, 235, 168, 169, 0,
	170, 171, 0, 172, 236, 237, 173, 0, 178, 174,
	175, 177, 238, 176, 239, 0, 179, 0, 180, 181,
	0, 240, 241, 242, 0, 0, 182, 243, 244, 0,
	183, 184, 185, 186, 0, 0, 187, 188, 189, 0,
	0, 190, 191, 192, 245, 246, 85, 193, 0, 0,
	0, 0, 194, 195, 196, 197, 0, 0, 0, 0,
	0, 88, 89, 0, 90, 0, 0, 0, 0, 198,
	0, 0, 0, 0, 91, 92, 199, 200, 201, 202,
	93, 203, 204, 0, 94, 205, 206, 95, 0, 0,
	207, 208, 209, 0, 210, 0, 0, 0, 96, 97,
	98, 0, 99, 0, 100, 101, 0, 0, 102, 103,
	0, 0, 0, 0, 0, 0, 104, 105, 106, 107,
	211, 108, 212, 213, 0, 109, 0, 110, 0, 0,
	0, 111, 112, 0, 113, 0, 0, 0, 214, 114,
	115, 215, 0, 0, 0, 116, 117, 216, 0, 118,
	0, 119, 0, 0, 0, 0, 120, 217, 0, 218,
	0, 121, 122, 352, 220, 0, 0, 125, 0, 123,
	0, 0, 124, 221, 222, 223, 224, 0, 225, 0,
	0, 126, 0, 127, 128, 0, 0, 226, 0, 129,
	0, 0, 130, 0, 0, 131, 0, 132, 133, 134,
	135, 136, 0, 137, 138, 141, 139, 0, 140, 0,
	227, 142, 228, 143, 144, 0, 0, 0, 0, 0,
	145, 229, 0, 146, 0, 230, 147, 148, 149, 0,
	231, 150, 232, 151, 0, 152, 153, 154, 233, 155,
	156, 0, 158, 159, 157, 160, 0, 161, 0, 162,
	163, 234, 164, 0, 165, 166, 167, 0, 235, 168,
	169, 0, 170, 171, 0, 172, 236, 237, 173, 0,
	178, 174, 175, 177, 238, 176, 239, 0, 179, 0,
	180, 181, 0, 240, 241, 242, 0, 0, 182, 243,
	244, 0, 183, 184, 185, 186, 0, 0, 187, 188,
	189, 0, 0, 190, 191, 192, 245, 246, 85, 193,
	0, 0, 0, 0, 194, 195, 196, 197, 0, 0,
	0, 0, 0, 88, 89, 0, 90, 0, 0, 0,
	0, 198, 0, 0, 0, 0, 91, 92, 199, 200,
	201, 202, 93, 203, 204, 0, 94, 205, 206, 95,
	0, 0, 207, 208, 209, 0, 210, 0, 0, 0,
	96, 97, 98, 0, 99, 0, 100, 101, 0, 0,
	102, 103, 0, 0, 0, 0, 0, 0, 104, 105,
	106, 107, 211, 108, 212, 213, 0, 109, 0, 110,
	0, 0, 0, 111, 112, 0, 113, 0, 0, 0,
	214, 114, 115, 215, 0, 0, 0, 116, 117, 216,
	0, 118, 0, 119, 0, 0, 0, 0, 120, 217,
	0, 218, 0, 121, 122, 350, 220, 0, 0, 125,
	0, 123, 0, 0, 124, 221, 222, 223, 224, 0,
	225, 0, 0, 126, 0, 127, 128, 0, 0, 226,
	0, 129, 0, 0, 130, 0, 0, 131, 0, 132,
	133, 134, 135, 136, 0, 137, 138, 141, 139, 0,
	140, 0, 227, 142, 228, 143, 144, 0, 0, 0,
	0, 0, 145, 229, 0, 146, 0, 230, 147, 148,
	149, 0, 231, 150, 232, 151, 0, 152, 153, 154,
	233, 155, 156, 0, 158, 159, 157, 160, 0, 161,
	0, 162, 163, 234, 164, 0, 165, 166, 167, 0,
	235, 168, 169, 0, 170, 171, 0, 172, 236, 237,
	173, 0, 178, 174, 175, 177, 238, 176, 239, 0,
	179, 0, 180, 181, 0, 240, 241, 242, 0, 0,
	182, 243, 244, 0, 183, 184, 185, 186, 0, 0,
	187, 188, 189, 0, 0, 190, 191, 192, 245, 246,
	85, 193, 0, 0, 0, 0, 194, 195, 196, 197,
	0, 0, 0, 0, 0, 88, 89, 0, 90, 0,
	0, 0, 0, 198, 0, 0, 0, 0, 91, 92,
	199, 200, 201, 202, 93, 203, 204, 0, 94, 205,
	206, 95, 0, 0, 207, 208, 209, 0, 210, 0,
	0, 0, 96, 97, 98, 0, 99, 0, 100, 101,
	0, 0, 102, 103, 0, 0, 0, 0, 0, 0,
	104, 105, 106, 107, 211, 108, 212, 213, 0, 109,
	0, 110, 0, 0, 0, 111, 112, 0, 113, 0,
	0, 0, 214, 114, 115, 215, 0, 0, 0, 116,
	117, 216, 0, 118, 0, 119, 0, 0, 0, 0,
	120, 217, 0, 218, 0, 121, 122, 341, 220, 0,
	0, 125, 0, 123, 0, 0, 124, 221, 222, 223,
	224, 0, 225, 0, 0, 126, 0, 127, 128, 0,
	0, 226, 0, 129, 0, 0, 130, 0, 0, 131,
	0, 132, 133, 134, 135, 136, 0, 137, 138, 141,
	139, 0, 140, 0, 227, 142, 228, 143, 144, 0,
	0, 0, 0, 0, 145, 229, 0, 146, 0, 230,
	147, 148, 149, 0, 231, 150, 232, 151, 0, 152,
	153, 154, 233, 155, 156, 0, 158, 159, 157, 160,
	0, 161, 0, 162, 163, 234, 164, 0, 165, 166,
	167, 0, 235, 168, 169, 0, 170, 171, 0, 172,
	236, 237, 173, 0, 178, 174, 175, 177, 238, 176,
	239, 0, 179, 0, 180, 181, 0, 240, 241, 242,
	0, 0, 182, 243, 244, 0, 183, 184, 185, 186,
	0, 0, 187, 188, 189, 0, 0, 190, 191, 192,
	245, 246, 85, 193, 0, 0, 0, 0, 194, 195,
	196, 197, 0, 0, 0, 0, 0, 88, 89, 0,
	90, 0, 0, 0, 0, 198, 0, 0, 0, 0,
	91, 92, 199, 200, 201, 202, 93, 203, 204, 0,
	94, 205, 206, 95, 0, 0, 207, 208, 209, 0,
	210, 0, 0, 0, 96, 97, 98, 0, 99, 0,
	100, 101, 0, 0, 102, 103, 0, 0, 0, 0,
	0, 0, 104, 105, 106, 107, 211, 108, 212, 213,
	0, 109, 0, 110, 0, 0, 0, 111, 112, 0,
	113, 0, 0, 0, 214, 114, 115, 215, 0, 0,
	0, 116, 117, 216, 0, 118, 0, 119, 0, 0,
	0, 0, 120, 217, 0, 218, 0, 121, 122, 219,
	220, 0, 0, 125, 0, 123, 0, 0, 124, 221,
	222, 223, 224, 0, 225, 0, 0, 126, 0, 127,
	128, 0, 0, 226, 0, 129, 0, 0, 130, 0,
	0, 131, 0, 132, 133, 134, 135, 136, 0, 137,
	138, 141, 139, 0, 140, 0, 227, 142, 228, 143,
	144, 0, 0, 0, 0, 0, 145, 229, 0, 146,
	0, 230, 147, 148, 149, 0, 231, 150, 232, 151,
	0, 152, 153, 154, 233, 321, 156, 0, 158, 159,
	157, 160, 0, 161, 0, 162, 163, 234, 164, 0,
	165, 166, 167, 0, 235, 168, 169, 0, 170, 171,
	0, 172, 236, 237, 173, 0, 178, 174, 175, 177,
	238, 176, 239, 0, 179, 0, 180, 181, 0, 240,
	241, 242, 0, 0, 182, 243, 244, 0, 183, 184,
	185, 186, 0, 0, 187, 188, 189, 0, 0, 190,
	191, 192, 245, 246, 85, 193, 0, 0, 0, 0,
	194, 195, 196, 197, 0, 0, 0, 0, 0, 88,
	89, 0, 90, 0, 0, 0, 0, 198, 0, 0,
	0, 0, 91, 92, 199, 200, 201, 202, 93, 203,
	204, 0, 94, 205, 206, 95, 0, 0, 207, 208,
	209, 0, 210, 0, 0, 0, 96, 97, 98, 0,
	99, 0, 100, 101, 0, 0, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 106, 107, 211, 108,
	212, 213, 0, 109, 0, 110, 0, 0, 0, 111,
	112, 0, 113, 0, 0, 0, 214, 114, 115, 215,
	0, 0, 0, 116, 117, 216, 0, 118, 0, 119,
	0, 0, 0, 0, 120, 217, 0, 218, 0, 121,
	122, 219, 220, 0, 0, 125, 0, 123, 0, 0,
	124, 221, 222, 223, 224, 0, 225, 0, 0, 126,
	0, 127, 128, 0, 0, 226, 0, 129, 0, 0,
	267, 0, 0, 131, 0, 132, 133, 134, 135, 275,
	0, 137, 138, 141, 139, 0, 140, 0, 227, 142,
	228, 143, 144, 0, 0, 0, 0, 0, 145, 229,
	0, 146, 0, 230, 147, 148, 149, 0, 231, 150,
	232, 151, 0, 152, 153, 154, 233, 155, 156, 0,
	158, 159, 157, 160, 0, 161, 0, 162, 163, 269,
	164, 0, 165, 166, 167, 0, 235, 168, 268, 0,
	170, 171, 0, 172, 236, 237, 173, 0, 178, 174,
	175, 177, 238, 176, 239, 0, 179, 0, 180, 181,
	0, 274, 241, 242, 0, 0, 270, 243, 244, 0,
	183, 184, 185, 186, 0, 0, 187, 188, 189, 0,
	0, 190, 191, 192, 245, 246, 85, 193, 0, 0,
	0, 0, 194, 195, 196, 197, 0, 0, 0, 0,
	0, 88, 89, 0, 90, 0, 0, 0, 0, 198,
	0, 0, 0, 0, 91, 92, 199, 200, 201, 202,
	93, 203, 204, 0, 94, 205, 206, 95, 0, 0,
	207, 208, 209, 0, 210, 0, 0, 0, 96, 97,
	98, 0, 99, 0, 100, 101, 0, 0, 102, 103,
	0, 0, 0, 0, 0, 0, 104, 105, 106, 107,
	211, 108, 212, 213, 0, 109, 0, 110, 0, 0,
	0, 111, 112, 0, 113, 0, 0, 0, 214, 114,
	115, 215, 0, 0, 0, 116, 117, 216, 0, 118,
	0, 119, 0, 0, 0, 0, 120, 217, 0, 218,
	0, 121, 122, 219, 220, 0, 0, 125, 0, 123,
	0, 0, 124, 221, 222, 223, 224, 0, 225, 0,
	0, 126, 0, 127, 128, 0, 0, 226, 0, 129,
	0, 0, 130, 0, 0, 131, 0, 132, 133, 134,
	135, 136, 0, 137, 138, 141, 139, 0, 140, 0,
	227, 142, 228, 143, 144, 0, 0, 0, 0, 0,
	145, 229, 0, 146, 0, 230, 147, 148, 0, 0,
	231, 150, 232, 151, 0, 152, 0, 154, 233, 155,
	156, 0, 158, 159, 157, 160, 0, 161, 0, 162,
	163, 234, 0, 0, 165, 166, 167, 0, 235, 168,
	169, 0, 170, 171, 0, 172, 236, 237, 173, 0,
	178, 174, 175, 177, 238, 176, 239, 0, 179, 0,
	180, 181, 0, 240, 241, 242, 0, 0, 182, 243,
	244, 0, 183, 184, 185, 186, 0, 0, 187, 188,
	189, 0, 0, 190, 191, 192, 245, 246, 0, 193,
	0, 0, 0, 0, 194, 195, 196, 197, 819, 0,
	838, 839, 840, 848, 849, 850, 0, 0, 0, 0,
	0, 0, 0, 841, 0, 0, 0, 0, 0, 0,
	821, 819, 852, 838, 839, 840, 848, 849, 850, 0,
	0, 0, 0, 0, 0, 0, 841, 0, 0, 0,
	0, 820, 0, 821, 0, 852, 0, 835, 0, 0,
	0, 0, 0, 0, 819, 0, 838, 839, 840, 848,
	849, 850, 0, 0, 820, 0, 0, 0, 0, 841,
	835, 0, 0, 0, 0, 0, 821, 0, 852, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 826, 0, 0, 820, 0, 0,
	0, 0, 0, 835, 0, 0, 0, 0, 0, 0,
	0, 845, 853, 0, 0, 0, 0, 826, 0, 0,
	0, 0, 0, 0, 0, 0, 851, 0, 0, 0,
	0, 0, 0, 0, 845, 853, 843, 0, 0, 0,
	0, 0, 836, 0, 0, 0, 0, 0, 0, 851,
	826, 0, 0, 0, 0, 0, 0, 0, 0, 843,
	0, 0, 0, 0, 842, 836, 0, 845, 853, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 851, 0, 0, 0, 0, 842, 0, 0,
	0, 0, 843, 0, 0, 0, 0, 0, 836, 837,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	846, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	842, 0, 837, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 846, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 837, 0, 0, 0, 0,
	0, 0, 0, 0, 844, 0, 846, 832, 833, 834,
	0, 831, 828, 829, 830, 822, 823, 824, 825, 827,
	0, 847, 0, 0, 0, 0, 0, 844, 1651, 0,
	832, 833, 834, 0, 831, 828, 829, 830, 822, 823,
	824, 825, 827, 0, 847, 0, 0, 0, 0, 0,
	0, 1370, 0, 0, 0, 0, 0, 0, 0, 0,
	844, 0, 0, 832, 833, 834, 0, 831, 828, 829,
	830, 822, 823, 824, 825, 827, 819, 847, 838, 839,
	840, 848, 849, 850, 1369, 0, 0, 0, 0, 0,
	0, 841, 0, 0, 0, 0, 0, 0, 821, 819,
	852, 838, 839, 840, 848, 849, 850, 0, 0, 0,
	0, 0, 0, 0, 841, 0, 0, 0, 0, 820,
	0, 821, 0, 852, 0, 835, 0, 0, 0, 0,
	0, 0, 819, 0, 838, 839, 840, 848, 849, 850,
	0, 0, 820, 0, 0, 0, 0, 841, 835, 0,
	0, 0, 0, 0, 821, 0, 852, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 826, 0, 0, 820, 0, 0, 0, 0,
	0, 835, 0, 0, 0, 0, 0, 0, 0, 845,
	853, 0, 0, 0, 0, 826, 0, 0, 0, 0,
	0, 0, 0, 0, 851, 0, 0, 0, 0, 0,
	0, 0, 845, 853, 843, 0, 0, 0, 0, 0,
	836, 0, 0, 0, 0, 0, 0, 851, 826, 0,
	0, 0, 0, 0, 0, 0, 0, 843, 0, 0,
	0, 0, 842, 836, 0, 845, 853, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	851, 0, 0, 0, 0, 842, 0, 0, 0, 0,
	843, 0, 0, 0, 0, 0, 836, 837, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 846, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 842, 0,
	837, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 846, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 837, 0, 0, 0, 0, 0, 0,
	0, 0, 844, 0, 846, 832, 833, 834, 0, 831,
	828, 829, 830, 822, 823, 824, 825, 827, 0, 847,
	0, 0, 0, 0, 0, 844, 1368, 0, 832, 833,
	834, 0, 831, 828, 829, 830, 822, 823, 824, 825,
	827, 0, 847, 0, 0, 0, 0, 0, 0, 1322,
	0, 0, 0, 0, 0, 0, 0, 0, 844, 0,
	0, 832, 833, 834, 0, 831, 828, 829, 830, 822,
	823, 824, 825, 827, 0, 847, 0, 0, 819, 1772,
	838, 839, 840, 848, 849, 850, 0, 0, 0, 0,
	0, 0, 0, 841, 0, 0, 0, 0, 0, 0,
	821, 819, 852, 838, 839, 840, 848, 849, 850, 0,
	0, 0, 0, 0, 0, 0, 841, 0, 0, 0,
	0, 820, 0, 821, 0, 852, 0, 835, 0, 0,
	0, 0, 0, 0, 819, 0, 838, 839, 840, 848,
	849, 850, 0, 0, 820, 0, 0, 0, 0, 841,
	835, 0, 0, 0, 0, 0, 821, 0, 852, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 826, 0, 0, 820, 0, 0,
	0, 0, 0, 835, 0, 0, 0, 0, 0, 0,
	0, 845, 853, 0, 0, 0, 0, 826, 0, 0,
	0, 0, 0, 0, 0, 0, 851, 0, 0, 0,
	0, 0, 0, 0, 845, 853, 843, 0, 0, 0,
	0, 0, 836, 0, 0, 0, 0, 0, 0, 851,
	826, 0, 0, 0, 0, 0, 0, 0, 0, 843,
	0, 0, 0, 0, 842, 836, 0, 845, 853, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 851, 0, 0, 0, 0, 842, 0, 0,
	0, 0, 843, 0, 0, 0, 0, 0, 836, 837,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	846, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	842, 0, 837, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 846, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 837, 0, 0, 0, 0,
	0, 0, 0, 0, 844, 0, 846, 832, 833, 834,
	0, 831, 828, 829, 830, 822, 823, 824, 825, 827,
	0, 847, 0, 0, 0, 1770, 0, 844, 0, 0,
	832, 833, 834, 0, 831, 828, 829, 830, 822, 823,
	824, 825, 827, 0, 847, 0, 0, 0, 1751, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	844, 0, 0, 832, 833, 834, 0, 831, 828, 829,
	830, 822, 823, 824, 825, 827, 0, 847, 0, 0,
	819, 1726, 838, 839, 840, 848, 849, 850, 0, 0,
	0, 0, 0, 0, 0, 841, 0, 0, 0, 0,
	0, 0, 821, 819, 852, 838, 839, 840, 848, 849,
	850, 0, 0, 0, 0, 0, 0, 0, 841, 0,
	0, 0, 0, 820, 0, 821, 0, 852, 0, 835,
	0, 0, 0, 0, 0, 0, 819, 0, 838, 839,
	840, 848, 849, 850, 0, 0, 820, 0, 0, 0,
	0, 841, 835, 0, 0, 0, 0, 0, 821, 0,
	852, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 826, 0, 0, 820,
	0, 0, 0, 0, 0, 835, 0, 0, 0, 0,
	0, 0, 0, 845, 853, 0, 0, 0, 0, 826,
	0, 0, 0, 0, 0, 0, 0, 0, 851, 0,
	0, 0, 0, 0, 0, 0, 845, 853, 843, 0,
	0, 0, 0, 0, 836, 0, 0, 0, 0, 0,
	0, 851, 826, 0, 0, 0, 0, 0, 0, 0,
	0, 843, 0, 0, 0, 0, 842, 836, 0, 845,
	853, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 851, 0, 0, 0, 0, 842,
	0, 0, 0, 0, 843, 0, 0, 0, 0, 0,
	836, 837, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 846, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 842, 0, 837, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 846, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 837, 0, 0,
	0, 0, 0, 0, 0, 0, 844, 0, 846, 832,
	833, 834, 0, 831, 828, 829, 830, 822, 823, 824,
	825, 827, 0, 847, 0, 0, 0, 1721, 0, 844,
	0, 0, 832, 833, 834, 0, 831, 828, 829, 830,
	822, 823, 824, 825, 827, 0, 847, 0, 0, 0,
	1717, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 844, 0, 0, 832, 833, 834, 0, 831,
	828, 829, 830, 822, 823, 824, 825, 827, 0, 847,
	0, 0, 819, 1653, 838, 839, 840, 848, 849, 850,
	0, 0, 0, 0, 0, 0, 0, 841, 0, 0,
	0, 0, 0, 0, 821, 819, 852, 838, 839, 840,
	848, 849, 850, 0, 0, 0, 0, 0, 0, 0,
	841, 0, 0, 0, 0, 820, 0, 821, 0, 852,
	0, 835, 0, 0, 0, 0, 0, 0, 819, 0,
	838, 839, 840, 848, 849, 850, 0, 0, 820, 0,
	0, 0, 0, 841, 835, 0, 0, 0, 0, 0,
	821, 0, 852, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 826, 0,
	0, 820, 0, 0, 0, 0, 0, 835, 0, 0,
	0, 0, 0, 0, 0, 845, 853, 0, 0, 0,
	0, 826, 0, 0, 0, 0, 0, 0, 0, 0,
	851, 0, 0, 0, 0, 0, 0, 0, 845, 853,
	843, 0, 0, 0, 0, 0, 836, 0, 0, 0,
	0, 0, 0, 851, 826, 0, 0, 0, 0, 0,
	0, 0, 0, 843, 0, 0, 0, 0, 842, 836,
	0, 845, 853, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 851, 0, 0, 0,
	0, 842, 0, 0, 0, 0, 843, 0, 0, 0,
	0, 0, 836, 837, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 846, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 842, 0, 837, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 846, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 837,
	0, 0, 0, 0, 0, 0, 0, 0, 844, 0,
	846, 832, 833, 834, 0, 831, 828, 829, 830, 822,
	823, 824, 825, 827, 0, 847, 0, 0, 0, 1652,
	0, 844, 0, 0, 832, 833, 834, 0, 831, 828,
	829, 830, 822, 823, 824, 825, 827, 0, 847, 0,
	0, 0, 1559, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 844, 0, 0, 832, 833, 834,
	0, 831, 828, 829, 830, 822, 823, 824, 825, 827,
	0, 847, 0, 0, 819, 1493, 838, 839, 840, 848,
	849, 850, 0, 0, 0, 0, 0, 0, 0, 841,
	0, 0, 0, 0, 0, 0, 821, 819, 852, 838,
	839, 840, 848, 849, 850, 0, 0, 0, 0, 0,
	0, 0, 841, 0, 0, 0, 0, 820, 0, 821,
	0, 852, 0, 835, 0, 0, 0, 0, 0, 0,
	819, 0, 838, 839, 840, 848, 849, 850, 0, 0,
	820, 0, 0, 0, 0, 841, 835, 0, 0, 0,
	0, 0, 821, 0, 852, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	826, 0, 0, 820, 0, 0, 0, 0, 0, 835,
	0, 0, 0, 0, 0, 0, 0, 845, 853, 0,
	0, 0, 0, 826, 0, 0, 0, 0, 0, 0,
	0, 0, 851, 0, 0, 0, 0, 0, 0, 0,
	845, 853, 843, 0, 0, 0, 0, 0, 836, 0,
	0, 0, 0, 0, 0, 851, 826, 0, 0, 0,
	0, 0, 0, 0, 0, 843, 0, 0, 0, 0,
	842, 836, 0, 845, 853, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 851, 0,
	0, 0, 0, 842, 0, 0, 0, 0, 843, 0,
	0, 0, 0, 0, 836, 837, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 846, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 842, 0, 837, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 846,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 837, 0, 0, 0, 0, 0, 0, 0, 0,
	844, 0, 846, 832, 833, 834, 0, 831, 828, 829,
	830, 822, 823, 824, 825, 827, 0, 847, 0, 0,
	0, 1477, 0, 844, 0, 0, 832, 833, 834, 0,
	831, 828, 829, 830, 822, 823, 824, 825, 827, 0,
	847, 0, 0, 0, 1103, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 844, 0, 0, 832,
	833, 834, 0, 831, 828, 829, 830, 822, 823, 824,
	825, 827, 0, 847, 819, 1541, 838, 839, 840, 848,
	849, 850, 0, 0, 0, 0, 0, 0, 0, 841,
	0, 0, 0, 0, 0, 0, 821, 819, 852, 838,
	839, 840, 848, 849, 850, 0, 0, 0, 0, 0,
	0, 0, 841, 0, 0, 0, 0, 820, 0, 821,
	0, 852, 0, 835, 0, 0, 0, 0, 0, 0,
	819, 0, 838, 839, 840, 848, 849, 850, 0, 0,
	820, 0, 0, 0, 0, 841, 835, 0, 0, 0,
	1037, 0, 821, 0, 852, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	826, 1842, 0, 820, 0, 0, 0, 0, 0, 835,
	0, 0, 0, 0, 0, 0, 0, 845, 853, 0,
	0, 0, 0, 826, 0, 1360, 0, 0, 1359, 0,
	0, 0, 851, 0, 0, 0, 1038, 0, 0, 0,
	845, 853, 843, 0, 0, 0, 0, 0, 836, 0,
	0, 0, 0, 0, 0, 851, 826, 0, 0, 0,
	0, 0, 0, 0, 0, 843, 0, 0, 0, 0,
	842, 836, 0, 845, 853, 0, 0, 0, 0, 0,
	0, 0, 0, 1841, 0, 0, 0, 0, 851, 0,
	0, 0, 0, 842, 0, 0, 0, 0, 843, 0,
	0, 0, 0, 0, 836, 837, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 846, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 842, 0, 837, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 846,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 837, 0, 0, 0, 0, 0, 0, 0, 0,
	844, 0, 846, 832, 833, 834, 0, 831, 828, 829,
	830, 822, 823, 824, 825, 827, 0, 847, 0, 0,
	0, 0, 0, 844, 0, 0, 832, 833, 834, 0,
	831, 828, 829, 830, 822, 823, 824, 825, 827, 0,
	847, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 844, 0, 0, 832,
	833, 834, 0, 831, 828, 829, 830, 822, 823, 824,
	825, 827, 855, 847, 0, 0, 0, 0, 819, 0,
	838, 839, 840, 848, 849, 850, 0, 0, 0, 0,
	0, 0, 0, 841, 0, 0, 0, 854, 0, 0,
	821, 819, 852, 838, 839, 840, 848, 849, 850, 0,
	0, 0, 0, 0, 0, 0, 841, 0, 0, 0,
	0, 820, 0, 821, 0, 852, 0, 835, 0, 0,
	0, 0, 0, 0, 819, 0, 838, 839, 840, 848,
	849, 850, 0, 0, 820, 0, 0, 0, 0, 841,
	835, 0, 0, 0, 0, 0, 821, 0, 852, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 826, 0, 0, 820, 0, 0,
	0, 0, 0, 835, 0, 0, 0, 0, 0, 0,
	0, 845, 853, 0, 0, 0, 0, 826, 0, 0,
	0, 0, 0, 0, 0, 0, 851, 0, 0, 0,
	0, 0, 0, 0, 845, 853, 843, 0, 0, 0,
	0, 0, 836, 0, 0, 0, 0, 0, 0, 851,
	826, 0, 0, 0, 0, 0, 0, 0, 0, 843,
	0, 0, 0, 0, 842, 836, 0, 845, 853, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 851, 0, 0, 0, 0, 842, 316, 0,
	0, 0, 843, 0, 0, 0, 0, 0, 836, 837,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	846, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	842, 0, 837, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 846, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 837, 0, 0, 0, 0,
	0, 0, 0, 0, 844, 0, 846, 832, 833, 834,
	0, 831, 828, 829, 830, 822, 823, 824, 825, 827,
	0, 847, 0, 0, 1487, 0, 0, 844, 0, 0,
	832, 833, 834, 0, 831, 828, 829, 830, 822, 823,
	824, 825, 827, 0, 847, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	844, 0, 0, 832, 833, 834, 0, 831, 828, 829,
	830, 822, 823, 824, 825, 827, 819, 847, 838, 839,
	840, 848, 849, 850, 0, 0, 0, 0, 0, 0,
	0, 841, 0, 0, 0, 0, 0, 0, 821, 819,
	852, 838, 839, 840, 848, 849, 850, 0, 0, 0,
	0, 0, 0, 0, 841, 0, 0, 0, 1361, 820,
	0, 821, 0, 852, 0, 835, 0, 0, 0, 0,
	0, 0, 819, 0, 838, 839, 840, 848, 849, 850,
	0, 0, 820, 0, 0, 0, 0, 841, 835, 0,
	0, 0, 0, 0, 821, 0, 852, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 826, 0, 0, 820, 0, 1366, 0, 0,
	0, 835, 0, 0, 0, 0, 0, 0, 0, 845,
	853, 0, 0, 0, 0, 826, 0, 0, 0, 0,
	0, 0, 0, 0, 851, 0, 0, 0, 0, 0,
	0, 0, 845, 853, 843, 0, 0, 0, 0, 0,
	836, 0, 0, 0, 0, 0, 0, 851, 826, 0,
	0, 0, 0, 0, 0, 0, 0, 843, 0, 0,
	0, 0, 842, 836, 0, 845, 853, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	851, 0, 0, 0, 0, 842, 0, 0, 0, 0,
	843, 0, 0, 0, 0, 0, 836, 837, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 846, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 842, 0,
	837, 0, 0, 0, 0, 0, 0, 0, 0, 1327,
	0, 846, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 837, 0, 0, 0, 0, 0, 0,
	0, 0, 844, 0, 846, 832, 833, 834, 0, 831,
	828, 829, 830, 822, 823, 824, 825, 827, 0, 847,
	0, 0, 0, 0, 0, 844, 0, 0, 832, 833,
	834, 0, 831, 828, 829, 830, 822, 823, 824, 825,
	827, 0, 847, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 844, 0,
	0, 832, 833, 834, 0, 831, 828, 829, 830, 822,
	823, 824, 825, 827, 819, 847, 838, 839, 840, 848,
	849, 850, 0, 0, 0, 0, 0, 0, 0, 841,
	0, 0, 0, 1321, 0, 0, 821, 819, 852, 838,
	839, 840, 848, 849, 850, 0, 0, 0, 0, 0,
	0, 0, 841, 0, 0, 0, 0, 820, 0, 821,
	0, 852, 0, 835, 0, 0, 0, 0, 0, 0,
	819, 0, 838, 839, 840, 848, 849, 850, 0, 0,
	820, 0, 0, 0, 0, 841, 835, 0, 0, 0,
	0, 0, 821, 0, 852, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	826, 0, 0, 820, 0, 0, 0, 0, 0, 835,
	0, 0, 0, 0, 0, 0, 0, 845, 853, 0,
	0, 0, 0, 826, 0, 0, 0, 0, 0, 0,
	0, 0, 851, 0, 0, 0, 0, 0, 0, 0,
	845, 853, 843, 0, 0, 0, 0, 0, 836, 0,
	0, 0, 0, 0, 0, 851, 826, 0, 0, 0,
	0, 0, 0, 0, 0, 843, 0, 0, 0, 0,
	842, 836, 0, 845, 853, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 851, 0,
	0, 0, 0, 842, 0, 0, 0, 0, 843, 0,
	0, 0, 0, 0, 836, 837, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 846, 0, 0, 0,
	0, 0, 617, 611, 634, 605, 625, 624, 837, 0,
	607, 606, 0, 0, 0, 636, 635, 0, 0, 846,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 837, 0, 0, 0, 630, 0, 622, 621, 0,
	844, 0, 846, 832, 833, 834, 620, 831, 828, 829,
	830, 822, 823, 824, 825, 827, 0, 847, 0, 0,
	0, 0, 619, 844, 0, 0, 832, 833, 834, 0,
	831, 828, 829, 830, 822, 823, 824, 825, 827, 0,
	847, 0, 0, 0, 0, 0, 0, 0, 612, 613,
	614, 615, 0, 633, 0, 0, 844, 0, 0, 832,
	833, 834, 0, 831, 828, 829, 830, 822, 823, 824,
	825, 827, 819, 847, 838, 839, 840, 848, 849, 850,
	0, 0, 0, 0, 0, 0, 0, 623, 0, 0,
	0, 0, 0, 0, 821, 819, 852, 838, 839, 840,
	848, 849, 850, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 618, 0, 820, 0, 821, 0, 852,
	0, 835, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 609, 0, 0, 0, 0, 820, 0,
	0, 616, 610, 0, 835, 0, 0, 0, 0, 638,
	0, 0, 0, 0, 0, 0, 608, 0, 0, 631,
	632, 0, 0, 0, 0, 0, 0, 0, 826, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 637, 0, 0, 845, 853, 0, 0, 0,
	0, 826, 0, 0, 0, 0, 0, 0, 0, 0,
	851, 0, 0, 0, 0, 0, 0, 0, 845, 853,
	843, 0, 0, 0, 0, 0, 836, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 843, 0, 0, 0, 0, 0, 836,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 837, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 846, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 837, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 846, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 844, 0,
	0, 832, 833, 834, 0, 831, 828, 829, 830, 822,
	823, 824, 825, 827, 0, 847, 0, 0, 0, 0,
	0, 844, 0, 0, 832, 833, 834, 0, 831, 828,
	829, 830, 822, 823, 824, 825, 827, 0, 847,
}
var sqlPact = [...]int{

	3009, -1000, 39, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 805, -1000, -1000, -1000, -1000,
	697, 758, 1548, 15398, 15398, 15136, 967, 967, 16708, -1000,
	-1000, 19590, -1000, 2736, 494, 500, 494, 494, 492, 16708,
	599, 703, 140, -1000, 653, 40, 19328, 15398, 1308, 35,
	14088, 315, 3009, 14874, 19066, 15398, 1156, 1049, 1048, 14088,
	18804, 18542, 18280, -1000, 9575, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 592, 321, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 320, -1000, 14612,
	-1000, 844, -1000, 31, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 838, -1000, 15398, -1000, -1000, 18018, 17756, 319,
	818, -1000, -1000, 560, 398, 1332, -1000, 44, -1000, -1000,
	1152, -1000, 834, 1151, 1139, 1135, 1131, 1130, 1128, 395,
	820, -1000, 588, 818, -1000, 818, -1000, -1000, -1000, 579,
	16708, -1000, 14088, -1000, 17494, 1079, 17232, -1000, 653, -1000,
	-1000, -1000, 866, 1307, 1307, 1307, 1335, 158, 157, 140,
	20, 15398, -1000, 318, 20, 6820, 6820, -1000, -1000, 315,
	-1000, 348, 12247, 43, -1000, 7370, -1000, 742, 1219, 408,
	647, 1218, -132, 669, 14088, 15398, 15398, 626, 16970, -1000,
	1217, 122, 1214, -1000, 103, 1211, -1000, 13, -1000, -1000,
	-1000, -1000, -1000, -1000, 315, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 14350,
	1370, 23377, -1000, 8763, -1000, -1000, 12512, 991, 12512, -1000,
	-1000, 1362, -1000, 8763, -1000, 30, 28, 960, 1051, 10122,
	9850, 1273, 1745, -1000, -1000, -1000, 42, 4254, 15398, 1169,
	12512, 15398, 15398, 15398, 15398, 15398, 15398, -1000, 942, -1000,
	15398, -1000, 27, 24, -1000, 16708, -1000, 123, -1000, 446,
	912, 16446, 1233, 907, -1000, 866, -1000, 857, 957, 7938,
	8763, 140, -1000, -1000, 140, 140, 8763, -1000, -1000, 15398,
	20, 1359, 15398, 78, -1000, 22508, -1000, -1000, 8763, 8763,
	8763, 8763, 8763, 770, -1000, -1000, -1000, 5095, -1000, -1000,
	43, 314, 328, -1000, -1000, 313, 43, -1000, -1000, -1000,
	-1000, 312, 1463, 447, -1000, -1000, -1000, 8763, 417, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1161, 307,
	306, -1000, -1000, -1000, -1000, 304, 301, 300, 291, 283,
	273, 272, 271, 269, 268, 267, 264, 263, 261, 700,
	-1000, 441, -1000, -1000, 441, 441, -1000, 255, 255, 258,
	-1000, -1000, -1000, -1000, 255, -1000, -1000, -1000, 402, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 260, 78, -1000, -1000,
	-1000, 15398, 43, -1000, -1000, -1000, 8763, 3982, 0, -1000,
	23207, -1000, -24, 726, -1000, 13564, 1302, 1286, 1287, 14088,
	1346, 1342, 565, 15398, 15398, 562, 423, 79, 1354, 79,
	11717, -1000, 15398, 15398, -1000, 15398, -1000, -1000, 15398, -1000,
	15398, 15398, 571, 13040, 754, 1210, 40, -5, -1000, 1378,
	-1000, -1000, -1000, -1000, 95, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 258,
	700, 255, 255, 255, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 402, -1000, -1000, 441, 441, 441, -1000, -1000, -7,
	23207, 561, 2, 12776, 15398, -1000, 41, -1000, -1000, 1124,
	491, -9, 696, 1041, 983, -1000, -1000, -1000, -1000, 14,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1412, -1000, -1000, -1000, -1000, 1445, 14, -1000, -1000, -1000,
	-1000, -1000, 1461, -1000, -1000, -1000, 4254, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 15398, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 696, 1041, -1000, -1000, 14088, 13302,
	40, 1207, 833, 905, -1000, -1000, 382, 1206, -1000, -1000,
	-1000, -1000, 23207, -1000, 23207, 651, 1054, -1000, 1054, 12,
	-1000, 22220, -1000, 248, -11, -1000, 423, 6820, 11452, 23377,
	15398, 583, 8763, 8763, 8763, 8763, 8763, 8763, 8763, 8763,
	8763, 8763, 8763, 8763, 8763, 8763, 8763, 8763, 8763, 8763,
	8763, 8763, 8763, 8763, 824, 8763, 541, 8763, 8763, 8763,
	8763, 934, 812, 227, 4254, -1000, 648, 648, 648, 23522,
	23522, 232, 21, 21847, 8, 43, -1000, -1000, 6527, 6233,
	43, 4526, -1000, 614, 1440, 433, 23207, 1123, 1105, 246,
	143, 136, 8763, 8763, 829, 8763, 9038, 8763, 8763, 5370,
	8763, 8763, 8763, 8763, 8763, 8763, -1000, 242, -1000, -1000,
	-1000, -1000, 1429, -1000, -1000, 1427, -1000, 553, 532, 1424,
	423, 132, -1000, 2906, -1000, -1000, 7370, -1000, 754, 15398,
	15398, 15398, -1000, -1000, 904, 16184, -1000, 23377, 15398, -1000,
	240, 239, 1031, 1023, 15398, 15398, 15922, 15660, 15398, 727,
	237, 236, 15398, 664, -1000, 15398, 658, 8763, 678, -1000,
	10921, 449, 15398, 661, 60, -1000, -1000, -1000, 381, 15398,
	-1000, -1000, -1000, 122, -1000, 103, -1000, -1000, 14088, -1000,
	-1000, -1000, -1000, -1000, -1000, 23377, 332, 329, -1000, 1419,
	540, -1000, 539, 536, 534, -1000, 234, -1000, 8763, 15398,
	12776, 2, -4, -1000, -1000, 15398, 1041, -1000, -1000, -1000,
	-1000, 675, -1000, 681, -1000, 10394, -1000, -1000, -1000, 614,
	-1000, -34, -1000, -1000, -1000, -1000, 131, -16, -1000, -1000,
	-1000, -1000, -1000, 15398, 231, 15398, -1000, 15398, 15398, 1202,
	1459, 15398, -1000, -1000, -1000, 8763, -1000, -1000, -1000, 40,
	15398, -1000, 1104, -1000, -96, 1227, -139, 13826, -1000, 10656,
	-1000, -1000, 393, 439, 439, 529, 529, 529, 529, 712,
	712, 1895, 1155, 175, 175, 175, 1851, 155, 155, 175,
	175, 175, 23522, 23240, 827, 8763, 8763, 533, 809, 227,
	827, 8763, 1405, 827, 827, 827, -1000, 958, -1000, -1000,
	-1000, 1120, 225, 9038, 9038, -1000, -1000, -1000, 5095, -1000,
	-1000, 224, 8763, -1000, 8763, -17, -95, -1000, -1000, -15,
	-1000, -1000, -21, 8763, 8763, 8763, 128, -1000, 127, 609,
	-1000, 8763, 775, 214, 210, 8763, -1000, -1000, 23184, 20479,
	121, 1119, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 113,
	22902, 110, 2423, -1000, 9038, 9038, 9038, 5095, 209, 109,
	22187, -117, 22869, 7645, 7645, 7645, 105, 22846, 8763, -117,
	20456, 20174, 20141, -25, -26, -27, 1418, -33, 102, 392,
	390, 101, 1104, -1000, -1000, 8763, -1000, -1000, -1000, 523,
	519, 1200, -1000, 902, -1000, 721, 8763, 15398, 208, 206,
	763, -1000, 1198, 885, 1187, 885, -1000, -24, 690, 8763,
	8763, -1000, 510, -1000, -1000, 6820, 23207, -1000, 659, 1290,
	-37, -1000, -1000, -1000, 6820, 423, 11717, 11452, 7370, -41,
	-1000, -1000, 754, -1000, 471, 1417, 98, 916, 736, 695,
	635, 1416, 23207, -34, -1000, -34, -1000, -1000, -1000, -1000,
	-1000, -1000, 15398, 1086, 13302, 204, 15398, 203, 363, 202,
	15398, -1000, 1233, -1000, 97, -1000, 1095, 1330, -1000, 11452,
	869, 1037, 1035, 11452, 1098, 781, 781, 781, -1000, 13826,
	3698, -1000, -1000, 15398, 201, 11186, 96, 1227, 8763, 827,
	827, 8763, 9038, 9038, -1000, 827, -1000, -1000, -1000, -1000,
	1118, 199, 8763, 23377, 2485, 615, -43, 5939, -38, 21824,
	-1000, -1000, 328, -1000, 93, 7095, -1000, 22531, -20, -20,
	-1000, 1454, 1223, -1000, 8763, 22564, -1000, 11982, 430, 787,
	21538, 23377, 23377, -1000, 8763, -1000, 1117, 8763, -1000, 23377,
	9038, 9038, 9038, 9038, 9038, 9038, 9038, 9038, 9038, 9038,
	9038, 9038, 9038, 9038, 9038, 9038, 9038, 9038, 9038, 969,
	9038, 1403, 1403, 1403, -42, 5645, -1000, 1160, 1117, 8763,
	8763, 23377, 91, 88, 87, -1000, 8763, -117, 8763, 8763,
	8763, -1000, -1000, -1000, 86, -1000, 1415, -1000, -1000, -1000,
	-1000, 1095, 21880, 15398, 15398, 15398, 1185, 1835, -1000, 21505,
	-52, 15398, 15398, -1000, 1003, 1087, 480, 15398, -1000, 15398,
	-1000, 15398, 15398, 15398, -53, -54, 15398, -63, 6820, 207,
	40, 15398, -63, 658, -1000, -51, -1000, 379, -1000, 326,
	325, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 77,
	-1000, -1000, 1088, -1000, 9310, 198, 15398, 13302, 40, 9310,
	823, -1000, -1000, 410, 8763, 8763, 1227, 602, 11452, 11452,
	1785, 1033, 11452, -1000, -1000, -1000, -1000, -1000, -1000, 974,
	197, 15398, 13826, 623, 827, 512, 228, 8763, 23377, 23545,
	-61, 8763, 8763, -1000, -67, -1000, 8763, -1000, -1000, 1452,
	8763, 76, 74, 73, -1000, -1000, 23207, 8763, -1000, -1000,
	19852, 8763, 70, -1000, 68, 67, 23207, 1160, 23207, -1000,
	621, 621, 1403, 1403, 1403, 1403, 524, 524, 968, 868,
	2114, 2114, 2114, 908, 366, 366, 2114, 2114, 2114, 1112,
	995, 195, 3065, 8763, -68, -1000, -1000, -1000, 23207, 23207,
	66, -1000, -1000, -1000, -117, 20118, 21482, 21196, -1000, 64,
	410, -1000, -1000, -1000, -1000, 15398, -1000, 15398, -1000, 15398,
	15398, 1115, 894, -1000, -1000, 1007, 192, 9038, 15398, -1000,
	794, -73, -74, 893, -1000, 870, 8763, -1000, 23377, 885,
	885, -1000, 508, 506, -1000, -1000, -1000, -63, 1231, 15398,
	1282, -1000, -1000, -1000, 191, -1000, -1000, -1000, 761, -75,
	-1000, 182, 1311, 8763, -1000, -1000, 190, 9310, -79, 62,
	-1000, -80, 15398, -1000, 15398, 23207, -117, 527, -1000, 1785,
	-1000, 189, 8763, 11452, -1000, -154, -1000, 362, -1000, 15398,
	-81, -1000, 8763, 8763, 23545, -86, -1000, 827, 827, -1000,
	21163, -1000, 22531, -1000, -1000, -1000, 23207, 746, -1000, 21140,
	-1000, -1000, -1000, -1000, 9038, 1111, 188, 23377, 20854, -1000,
	-1000, 8763, -1000, -1000, -1000, -1000, -1000, 982, -1000, -1000,
	15398, 898, -1000, -1000, 8763, 3065, 187, 1086, 185, -1000,
	-1000, -1000, 673, -1000, -1000, 23207, 1315, -1000, -1000, 15398,
	15398, 550, -87, 15398, -1000, -1000, 4820, 15398, 794, 9310,
	1304, 43, 15398, 1304, 20821, 4526, -98, -1000, 1086, 794,
	181, -69, -1000, 1350, 1449, -1000, 15398, 23207, -1000, 974,
	-1000, 4254, -99, -1000, 827, 827, -1000, -1000, 56, 787,
	1328, -1000, 2314, 9038, 23377, -103, -1000, 20798, -1000, -1000,
	1183, 20512, 940, 15398, -1000, 15398, 15398, 450, 15398, -1000,
	-1000, 619, -1000, 423, -1000, 178, 1086, -1000, -1000, -1000,
	-1000, 1311, -21, 794, -1000, 1086, 9310, 15398, 161, -1000,
	-116, -1000, -1000, -1000, -1000, 660, 8763, 2314, -120, -1000,
	-1000, 1177, -1000, 801, 759, 54, -121, 160, -1000, 8763,
	-1000, 11717, -1000, 15398, -1000, 1304, 51, 1086, -1000, -122,
	-1000, -1000, -1000, 47, 8488, 8488, -117, -1000, 15398, -1000,
	810, 803, 640, -1000, -1000, -1000, -1000, -1000, 940, 15398,
	23207, -105, -127, -1000, -1000, -1000, 794, -1000, -1000, -1000,
	3371, 776, 641, 22164, -1000, -1000, -1000, 1241, -1000, 469,
	947, 947, 801, -150, -1000, 885, 1086, 1384, -1000, -1000,
	-1000, -1000, -1000, -1000, 1392, -1000, -1000, 972, -1000, -1000,
	-1000, -1000, -1000, 8213, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1733, 1729, 1342, 127, 125, 1727, 1726, 1724, 1716,
	98, 122, 119, 118, 1708, 86, 1698, 1696, 1695, 93,
	1694, 1692, 1691, 54, 1690, 1689, 1685, 1679, 1669, 1666,
	91, 28, 159, 2070, 153, 1665, 1664, 1663, 27, 104,
	77, 1662, 7, 55, 101, 108, 1288, 25, 1660, 1659,
	136, 32, 15, 1606, 95, 143, 128, 130, 1658, 1655,
	1654, 31, 1653, 14, 1652, 1650, 1649, 45, 23, 1647,
	11, 37, 1645, 1641, 129, 1640, 62, 99, 114, 47,
	112, 196, 1639, 69, 9, 76, 1636, 24, 1632, 38,
	80, 137, 1629, 44, 154, 68, 12, 52, 1627, 1626,
	1625, 1624, 78, 1613, 92, 56, 1611, 1607, 74, 1604,
	133, 140, 1602, 1601, 116, 1599, 1598, 1596, 694, 1594,
	1592, 619, 1590, 17, 41, 60, 3, 110, 109, 53,
	1586, 22, 1585, 683, 1020, 1108, 1584, 49, 43, 83,
	46, 48, 26, 1583, 1582, 106, 1579, 1568, 1565, 1562,
	1558, 82, 1555, 63, 138, 67, 51, 96, 33, 111,
	85, 102, 144, 107, 1554, 1547, 115, 1545, 59, 1544,
	1543, 1291, 117, 1542, 1539, 1537, 1266, 1100, 1053, 321,
	1536, 1535, 612, 434, 1528, 1505, 123, 1504, 1503, 139,
	134, 18, 1502, 113, 1500, 90, 1498, 0, 30, 19,
	1497, 132, 79, 1496, 1492, 1490, 1489, 29, 2, 10,
	5, 6, 4, 21, 20, 1488, 1487, 135, 88, 1486,
	145, 1485, 1484, 40, 1483, 1481, 16, 1480, 13, 1479,
	8, 1, 1477, 142, 1476, 97, 1475, 1380, 1473, 141,
	1471, 1470, 1369, 81,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 4, 4, 40, 40,
	39, 39, 39, 39, 39, 39, 39, 39, 39, 39,
	39, 39, 39, 39, 39, 37, 37, 42, 42, 42,
	41, 41, 36, 36, 5, 5, 5, 5, 10, 11,
	11, 11, 11, 11, 11, 80, 80, 79, 79, 82,
	82, 12, 12, 13, 13, 13, 13, 13, 13, 13,
	13, 167, 167, 166, 14, 143, 143, 15, 15, 15,
	15, 16, 103, 103, 17, 17, 17, 17, 18, 22,
	233, 233, 233, 237, 237, 238, 238, 239, 239, 239,
	239, 239, 239, 239, 235, 235, 25, 25, 25, 25,
	25, 122, 118, 118, 120, 120, 120, 120, 45, 117,
	117, 117, 117, 119, 119, 119, 119, 190, 189, 189,
	195, 195, 195, 58, 58, 58, 58, 58, 59, 59,
	59, 188, 188, 188, 188, 196, 196, 196, 196, 196,
	196, 60, 60, 60, 194, 194, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 234, 234, 236, 236, 27, 27, 8,
	8, 9, 9, 61, 61, 62, 62, 125, 125, 125,
	125, 63, 63, 124, 205, 205, 206, 206, 206, 206,
	206, 206, 207, 207, 207, 207, 207, 207, 207, 203,
	203, 204, 201, 201, 202, 202, 202, 202, 240, 240,
	123, 123, 66, 66, 210, 210, 210, 210, 208, 208,
	208, 208, 208, 211, 209, 212, 212, 212, 212, 212,
	154, 154, 154, 29, 7, 7, 107, 107, 70, 70,
	158, 158, 158, 52, 52, 38, 38, 38, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 108, 108, 109,
	109, 20, 24, 28, 28, 28, 28, 28, 242, 242,
	49, 49, 49, 49, 50, 50, 121, 121, 121, 121,
	121, 44, 6, 6, 43, 43, 19, 19, 19, 19,
	19, 55, 55, 114, 114, 114, 116, 116, 115, 115,
	115, 93, 93, 30, 75, 75, 84, 84, 85, 85,
	164, 86, 86, 23, 23, 33, 33, 31, 31, 31,
	31, 31, 31, 32, 32, 34, 34, 34, 34, 34,
	34, 34, 218, 218, 218, 220, 220, 217, 219, 219,
	241, 241, 94, 94, 94, 65, 64, 64, 68, 68,
	67, 69, 69, 157, 91, 91, 91, 91, 110, 111,
	111, 112, 112, 113, 113, 90, 90, 140, 140, 35,
	35, 74, 74, 76, 76, 131, 131, 132, 132, 130,
	130, 130, 159, 159, 159, 159, 160, 160, 160, 160,
	160, 160, 155, 155, 155, 155, 156, 156, 165, 165,
	97, 97, 97, 97, 95, 95, 96, 96, 161, 161,
	161, 161, 92, 92, 162, 162, 162, 126, 126, 168,
	168, 168, 73, 73, 73, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 170, 170,
	170, 170, 172, 172, 172, 171, 171, 171, 171, 171,
	171, 171, 171, 171, 171, 171, 171, 171, 171, 173,
	173, 180, 180, 181, 181, 182, 183, 174, 174, 175,
	175, 176, 177, 184, 184, 184, 184, 186, 186, 178,
	178, 178, 178, 178, 179, 104, 104, 104, 104, 104,
	104, 104, 104, 104, 104, 104, 104, 104, 104, 105,
	105, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	213, 213, 213, 213, 213, 213, 213, 215, 215, 216,
	216, 214, 214, 214, 214, 214, 214, 214, 214, 214,
	214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
	214, 214, 214, 214, 214, 214, 214, 221, 221, 222,
	222, 223, 223, 224, 224, 226, 227, 227, 227, 228,
	232, 232, 225, 225, 229, 229, 229, 230, 230, 231,
	231, 231, 231, 231, 145, 145, 145, 146, 146, 147,
	81, 81, 142, 142, 141, 141, 141, 144, 144, 98,
	185, 185, 185, 185, 185, 185, 185, 99, 99, 106,
	100, 100, 101, 101, 101, 101, 101, 101, 137, 138,
	102, 102, 102, 139, 139, 148, 152, 152, 151, 150,
	150, 149, 149, 129, 129, 129, 129, 128, 127, 87,
	87, 243, 243, 153, 153, 88, 88, 89, 83, 83,
	163, 163, 163, 163, 77, 77, 57, 57, 78, 78,
	53, 53, 56, 54, 54, 54, 54, 71, 71, 72,
	72, 51, 51, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 187, 187, 187, 46, 46, 46,
	47, 47, 48, 48, 192, 192, 192, 193, 193, 193,
	193, 191, 191, 191, 191, 191, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 4, 6, 1, 3,
	2, 5, 3, 6, 4, 6, 6, 6, 4, 8,
	2, 3, 3, 6, 4, 3, 2, 1, 1, 0,
	2, 0, 2, 0, 1, 1, 1, 1, 6, 3,
	5, 4, 6, 4, 6, 1, 3, 1, 2, 2,
	3, 2, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 5, 3, 0, 1, 1, 1,
	1, 3, 3, 0, 2, 3, 2, 3, 6, 6,
	1, 2, 2, 1, 1, 1, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 2, 3, 6, 3,
	1, 5, 2, 1, 1, 1, 3, 3, 2, 3,
	3, 3, 3, 1, 3, 3, 2, 1, 1, 3,
	1, 1, 1, 2, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 1,
	1, 1, 1, 0, 1, 1, 2, 2, 4, 2,
	4, 4, 4, 4, 4, 4, 4, 2, 3, 4,
	3, 2, 4, 2, 0, 2, 0, 8, 8, 7,
	10, 5, 8, 1, 0, 1, 3, 1, 1, 1,
	1, 8, 0, 3, 2, 0, 3, 1, 2, 2,
	3, 6, 2, 1, 1, 2, 4, 2, 5, 7,
	8, 5, 3, 1, 4, 6, 5, 10, 1, 1,
	4, 0, 3, 0, 2, 2, 2, 0, 1, 1,
	2, 2, 0, 3, 3, 2, 1, 1, 2, 2,
	1, 2, 1, 4, 11, 14, 1, 0, 1, 3,
	3, 3, 5, 2, 0, 1, 1, 0, 6, 6,
	8, 6, 8, 8, 10, 8, 10, 1, 0, 2,
	0, 2, 2, 3, 3, 2, 2, 2, 1, 0,
	1, 3, 2, 0, 2, 1, 1, 1, 3, 3,
	0, 3, 4, 7, 3, 0, 6, 6, 8, 5,
	7, 1, 3, 1, 4, 2, 8, 5, 4, 3,
	0, 2, 0, 8, 2, 0, 1, 3, 1, 1,
	3, 5, 5, 1, 1, 3, 3, 1, 2, 3,
	2, 3, 4, 1, 1, 8, 8, 1, 2, 4,
	4, 4, 2, 2, 3, 1, 3, 6, 1, 0,
	1, 0, 1, 1, 0, 1, 1, 0, 1, 0,
	3, 1, 3, 2, 2, 2, 1, 1, 2, 2,
	3, 1, 1, 1, 1, 3, 0, 2, 0, 2,
	3, 3, 0, 1, 3, 3, 1, 1, 3, 2,
	4, 0, 3, 2, 1, 4, 3, 4, 5, 4,
	5, 4, 5, 2, 4, 1, 1, 0, 5, 0,
	2, 2, 2, 1, 1, 0, 4, 2, 1, 2,
	2, 4, 1, 3, 1, 2, 3, 2, 0, 2,
	5, 2, 3, 4, 0, 1, 1, 1, 1, 2,
	4, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 5, 0, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 2, 2, 1, 1, 3,
	0, 1, 1, 1, 1, 5, 2, 1, 1, 1,
	1, 4, 1, 2, 2, 1, 1, 1, 0, 1,
	1, 4, 1, 4, 1, 1, 1, 1, 1, 1,
	1, 3, 3, 3, 3, 3, 3, 3, 0, 1,
	4, 1, 3, 3, 5, 2, 2, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	2, 3, 4, 3, 4, 4, 5, 3, 3, 3,
	3, 3, 4, 3, 3, 4, 3, 4, 3, 4,
	5, 6, 6, 7, 6, 7, 6, 7, 3, 4,
	1, 3, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 5, 6, 6, 7, 1, 1,
	1, 3, 1, 1, 1, 2, 2, 2, 1, 1,
	3, 5, 6, 8, 6, 6, 4, 4, 1, 1,
	1, 5, 1, 3, 1, 3, 1, 1, 1, 1,
	6, 6, 4, 4, 4, 4, 6, 5, 5, 5,
	4, 8, 6, 6, 4, 4, 4, 5, 0, 5,
	0, 2, 0, 1, 3, 3, 2, 2, 0, 6,
	1, 0, 3, 0, 2, 2, 0, 1, 4, 2,
	2, 2, 2, 2, 4, 3, 5, 4, 3, 5,
	1, 3, 1, 3, 3, 3, 2, 1, 3, 3,
	1, 1, 1, 1, 1, 1, 1, 4, 3, 2,
	3, 0, 3, 3, 2, 2, 1, 0, 2, 2,
	3, 2, 1, 1, 3, 5, 1, 2, 4, 2,
	0, 1, 0, 1, 1, 3, 5, 2, 2, 1,
	2, 1, 0, 1, 1, 1, 3, 3, 1, 3,
	3, 2, 1, 1, 1, 3, 1, 3, 1, 3,
	1, 2, 3, 1, 1, 2, 2, 1, 3, 3,
	0, 1, 2, 1, 1, 1, 1, 6, 2, 3,
	5, 1, 1, 1, 1, 2, 2, 1, 1, 1,
	1, 0, 3, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -10, -11, -12, -14,
	-16, -17, -18, -19, -21, -22, -24, -23, -25, -26,
	-27, -28, -20, -29, -30, 22, -6, -7, -8, -9,
	-219, 90, 98, 191, 97, 83, 113, 205, 212, -31,
	-33, 220, -122, 221, 33, 230, 57, 93, 207, 202,
	250, 64, -218, -34, -32, 296, 271, 277, 215, -35,
	237, 264, 299, 237, 126, 76, 85, 130, 258, 257,
	76, 126, 237, -13, 296, -23, -5, -11, -4, -19,
	-30, -10, -12, 22, -46, 4, -197, -199, 19, 20,
	22, 32, 33, 38, 42, 45, 56, 57, 58, 60,
	62, 63, 66, 67, 74, 75, 76, 77, 79, 83,
	85, 89, 90, 92, 97, 98, 103, 104, 107, 109,
	114, 119, 120, 127, 130, 125, 139, 141, 142, 147,
	150, 153, 155, 156, 157, 158, 159, 161, 162, 164,
	166, 163, 169, 171, 172, 178, 181, 184, 185, 186,
	189, 191, 193, 194, 195, 197, 198, 202, 200, 201,
	203, 205, 207, 208, 210, 212, 213, 214, 217, 218,
	220, 221, 223, 226, 229, 230, 233, 231, 228, 236,
	238, 239, 246, 250, 251, 252, 253, 256, 257, 258,
	261, 262, 263, 267, 272, 273, 274, 275, 27, 34,
	35, 36, 37, 39, 40, 43, 44, 48, 49, 50,
	52, 78, 80, 81, 96, 99, 105, 115, 117, 121,
	122, 131, 132, 133, 134, 136, 145, 168, 170, 179,
	183, 188, 190, 196, 209, 216, 224, 225, 232, 234,
	241, 242, 243, 247, 248, 264, 265, -46, -46, 191,
	21, -237, 21, -238, -239, 64, 90, 113, 215, 130,
	85, 257, -237, -50, 212, -46, -118, 150, 218, 209,
	246, -119, -117, -190, 241, 159, -79, -46, 4, 76,
	56, 77, 114, 126, 127, 61, 62, 142, 238, 241,
	246, 21, 64, -242, 246, 246, -242, -242, -49, 246,
	244, -50, -241, 237, 237, -107, 76, 255, -32, -34,
	-33, -67, -68, 254, 135, 95, 177, -31, -33, -218,
	-220, 197, -217, -46, -220, -64, -65, 21, 87, 300,
	-161, -53, 175, -46, -89, 296, -3, -161, 121, -53,
	-56, 121, -53, -46, 111, 137, 137, -162, -161, -46,
	121, -57, 121, -56, -80, 121, -79, -167, -166, -193,
	4, -197, -199, -198, 264, 54, 65, 112, 129, 123,
	138, 140, 146, 148, 160, 180, 182, 206, 222, 237,
	-143, 296, -103, 296, -46, 21, 174, 300, 174, -46,
	-118, 50, -118, 296, -120, -44, -45, 139, 193, 244,
	281, 111, 275, -60, 5, 82, -82, 298, 111, -234,
	174, 111, 111, 111, 111, 111, 111, 275, 139, 193,
	237, -121, -44, -45, -121, 244, -50, -92, -161, -79,
	121, 126, -46, 121, -67, -68, -91, -110, -111, 149,
	173, -94, 21, 87, -94, -94, 42, 297, 297, 300,
	-220, -72, 296, -83, -163, -133, 289, -135, 287, 288,
	293, 165, 276, -145, -53, -136, 9, 296, -148, -215,
	-33, 96, 28, -146, -147, 209, -46, 7, 8, 5,
	6, -51, -170, -179, 249, 100, 167, 46, -213, -214,
	4, -197, -192, -171, -181, -175, -178, 136, 54, 69,
	72, 70, 73, 219, 259, 47, 27, 99, 183, 188,
	234, 247, 248, 121, 168, 122, 52, 115, 145, 89,
	35, 37, 39, 40, 48, 49, 78, 80, 81, 105,
	131, 132, 133, 134, 170, 196, 224, 232, 242, 243,
	265, -198, -182, -183, -176, -177, -184, -83, -89, 289,
	-53, 296, -87, -129, -128, -127, 294, 298, -88, -153,
	-133, 82, -40, 200, -39, 20, 22, 90, 262, 96,
	228, 228, 200, 96, 301, 200, -162, -55, -53, -55,
	220, -46, 29, 96, -42, 300, 45, 203, 96, -42,
	300, 96, 297, 300, -161, 121, 29, -142, -168, -169,
	-171, -180, -174, -178, -179, 38, 44, 43, 239, 216,
	225, 36, 131, 132, 133, 134, 224, 35, 196, 105,
	89, 81, 80, 170, 40, 39, -182, -183, -176, -177,
	78, 242, 243, 136, 37, 49, 48, 265, 232, -81,
	-133, -233, -78, 237, 76, -54, -46, 289, -239, -233,
	29, -81, 300, 300, 147, -59, 153, 164, 119, -189,
	82, -195, -188, -154, 9, 249, 100, 174, -194, 8,
	288, -187, -193, 5, 7, 287, -189, 82, 67, -196,
	5, 4, -179, -154, 82, 150, 298, -191, 4, -197,
	-199, -198, -200, 21, 23, 24, 25, 26, 28, 29,
	30, 31, 41, 46, 47, 51, 53, 55, 61, 64,
	68, 69, 70, 71, 72, 73, 82, 84, 86, 87,
	88, 91, 93, 95, 100, 101, 102, 108, 110, 111,
	113, 116, 118, 124, 126, 128, 135, 137, 143, 144,
	149, 151, 152, 165, 167, 173, 174, 175, 176, 177,
	187, 192, 199, 204, 215, 219, 227, 235, 237, 240,
	244, 245, 249, 254, 255, 259, 260, 266, 268, 269,
	270, 271, -190, -236, 108, -233, -190, -190, -190, -190,
	-190, -46, 147, -190, 300, 300, -50, -42, 300, 296,
	29, 165, -47, 121, -46, -43, 92, 165, -91, -111,
	-110, -112, -133, 21, -133, -135, -32, -32, -32, -69,
	-157, -133, -217, 29, -71, -46, -74, 300, 111, 10,
	53, 32, 287, 288, 289, 290, 106, 291, 284, 285,
	286, 283, 279, 280, 281, 59, 154, 211, 12, 13,
	14, 25, 176, 148, 276, 123, 222, 293, 15, 16,
	17, 138, 34, 124, 29, 4, -133, -133, -133, -133,
	-133, 182, -33, -133, -81, -87, -33, -141, 294, 296,
	-87, 296, 5, 5, 296, -149, -133, -221, 272, 108,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 296, 190, -186, 267, -186,
	-186, -172, 296, -172, -173, 296, -172, 273, 277, 296,
	-74, -53, -129, -133, -191, 289, 300, 297, 300, 244,
	-108, 61, 55, -124, 121, 55, -201, -46, 61, -202,
	51, 255, 192, 110, -108, 61, -108, 61, 61, -161,
	32, 32, 244, -56, -46, 244, -126, 269, -114, -23,
	296, 82, 29, -114, -84, -85, -164, -86, -53, 296,
	-46, -46, -56, -57, -79, -80, -13, -166, 96, -15,
	-23, -19, -30, -10, 297, 300, -73, 28, -104, 296,
	274, 157, 79, 120, 156, -105, 214, 297, 300, 244,
	300, -78, -71, -128, -127, 111, 246, 297, -45, -44,
	-58, 195, 226, 201, 217, 300, 8, 7, 7, 5,
	-191, -235, -46, -45, -44, -161, -61, -62, -125, -124,
	-203, -204, -201, 126, 255, 101, -23, 96, 174, 165,
	281, 96, -113, 209, 210, 300, -38, 30, 86, 296,
	300, 297, -126, -163, -76, -159, -161, -33, -160, 296,
	-168, -79, 241, -133, -133, -133, -133, -133, -133, -133,
	-133, -133, -133, -133, -133, -133, -133, -133, -133, -133,
	-133, -133, -133, -133, -133, 148, 123, 222, 34, 124,
	-133, 244, -133, -133, -133, -133, 167, 165, 249, 100,
	256, 87, 171, -243, 235, 31, -139, -33, 296, -191,
	-145, 209, 296, 297, 300, -81, -144, 295, -141, -81,
	297, 297, -81, 266, 21, 87, 289, -104, 7, -152,
	-151, 268, -222, 103, 116, 296, 297, 297, -133, -133,
	-98, -185, 4, 274, 157, 79, 120, 156, 214, -99,
	-133, -100, -134, -135, 287, 288, 293, 296, 209, -101,
	-133, -81, -133, 41, 144, 245, -102, -133, 111, -81,
	-133, -133, -133, -81, -81, -81, 296, 7, 7, 241,
	241, 7, -126, 297, 295, 304, -153, -39, -53, -46,
	-46, 165, -124, 121, -168, -46, 296, 296, 141, 141,
	-46, -46, 121, -46, 121, -46, -46, -40, 200, 296,
	296, -46, 200, -46, -93, 204, -133, -93, -116, 174,
	-77, -53, 264, -46, 204, -75, 300, 111, 281, -77,
	-42, -42, -161, -168, 294, 294, 7, 244, 244, 244,
	244, 296, -133, -235, -54, -235, -44, 253, 58, 195,
	-195, -104, 300, 297, 300, -47, 126, -47, -79, -53,
	96, 5, -46, -157, -15, -46, -90, 116, -165, 300,
	278, 65, -97, 140, 160, 112, 146, 206, 129, -130,
	301, -156, -155, 29, -46, -33, -160, -159, 275, -133,
	-133, 244, -243, 235, -139, -133, 167, 249, 100, 256,
	87, 171, 111, 296, -134, -134, -81, 296, -81, -133,
	295, 295, 300, 297, -68, 300, -67, -133, -81, -81,
	297, 297, -150, -151, 91, -133, -227, 181, 296, 296,
	-133, 29, 300, 297, 111, 297, -106, 187, 297, 10,
	287, 288, 289, 290, 106, 291, 284, 285, 286, 283,
	279, 280, 281, 59, 154, 211, 12, 13, 14, 138,
	124, -134, -134, -134, -81, 296, 297, -137, -138, 111,
	108, 29, -102, -102, -102, 297, 111, -81, 300, 300,
	300, 297, 297, 297, 7, 297, 300, 297, 275, 275,
	297, -90, -133, 244, 244, 96, 165, -205, -202, -133,
	-71, 296, 296, -37, 90, 220, -109, 96, -42, 96,
	-42, 244, -108, 61, -81, -81, 244, -83, 204, 60,
	297, 300, -83, -126, -85, -76, -153, 297, 295, 7,
	7, 297, 157, 120, 156, -105, 156, -105, -105, 7,
	-46, -63, 125, -125, 296, -47, 296, 296, 29, 296,
	-46, -43, 297, -140, 118, 42, -159, 171, 140, 140,
	-159, -97, 140, -95, 180, -95, -95, -156, -191, 302,
	-46, 296, 297, -133, -133, -134, -134, 111, 296, -133,
	-142, 25, 25, 297, -81, 297, 300, 297, -141, 297,
	266, -68, -68, -68, 5, 93, -133, 240, -228, -46,
	296, 269, -67, 297, -168, -168, -133, -137, -133, -168,
	-134, -134, -134, -134, -134, -134, -134, -134, -134, -134,
	-134, -134, -134, -134, -134, -134, -134, -134, -134, 87,
	165, 171, -134, 300, -81, 297, -138, -137, -133, -133,
	-168, 297, 297, 297, -81, -133, -133, -133, 297, 7,
	-140, 295, -46, -46, -124, 96, -206, 61, -207, 53,
	101, 64, 165, 167, 255, 192, 51, 82, 199, 297,
	297, -71, -71, 165, 82, 165, 82, 75, 251, -46,
	-46, -53, -46, -46, 297, 297, -46, -83, -115, 296,
	174, -23, -53, -93, 281, 295, 295, 297, 124, -70,
	-158, -46, -216, 296, -213, -214, -51, 296, -71, -61,
	-23, -70, 174, -223, 270, -133, -81, 236, -159, -159,
	-96, 260, 174, 140, -159, -132, -131, 109, 163, 296,
	-71, -155, 25, 25, -133, -142, 297, -133, -133, 297,
	-133, 5, -133, 297, 297, 297, -133, -232, -46, -133,
	297, 297, 297, -138, 111, 87, 171, 296, -133, 297,
	297, 300, 297, 297, 297, -223, -124, -46, -79, -46,
	101, 121, 167, 141, 296, -134, -53, -123, -240, 63,
	233, 297, 297, 167, 167, -133, -168, -42, -42, 244,
	244, 88, -71, 61, -89, -33, 296, 184, 297, 300,
	-52, -87, 53, -52, -133, 296, -70, 297, 297, 297,
	-53, -224, -226, -46, 241, -96, 296, -133, -159, 300,
	303, 281, -71, 297, -133, -133, 297, 297, -68, -225,
	186, 297, -134, 111, 296, -142, 297, -133, -207, -47,
	165, -133, -48, 296, -63, 296, 199, -41, 53, -46,
	-46, 257, 166, 297, -46, -46, -123, -158, -38, -79,
	-38, 297, -81, 297, -63, -123, 296, 300, 29, 5,
	-71, -131, -191, 297, 297, -68, 42, -134, -142, 297,
	297, 96, 297, -210, 155, -46, -71, -53, -36, 260,
	-79, 220, -126, 296, -63, -52, -68, -123, -63, -70,
	-226, -228, 297, -229, 194, 210, -81, 297, 101, -208,
	-211, -209, 174, 112, 185, 223, 297, 297, -66, 296,
	-133, -84, -71, -38, 297, -63, 297, 297, -230, -231,
	34, 252, 67, -133, -230, -46, -209, 174, -211, 174,
	257, 85, -210, -71, -126, 297, -123, -231, 189, 107,
	209, 189, 107, -212, 162, 203, 45, 220, -212, -208,
	297, -42, -63, 25, 19, 167, 82, -231,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 0, 54, 55, 56, 57,
	0, 0, 359, 0, 0, 0, 0, 0, 0, 333,
	-2, 0, 120, 0, 289, 0, 289, 289, 293, 0,
	361, 257, 358, -2, 369, 0, 0, 0, 367, 347,
	0, 0, -2, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 71, 0, 73, 74, 75, 76, 77,
	78, 79, 80, 0, 86, 787, 788, 789, 806, 807,
	808, 809, 810, 811, 812, 813, 814, 815, 816, 817,
	818, 819, 820, 821, 822, 823, 824, 825, 826, 827,
	828, 829, 830, 831, 832, 833, 834, 835, 836, 837,
	838, 839, 840, 841, 842, 843, 844, 845, 846, 847,
	848, 849, 850, 851, 852, 853, 854, 855, 856, 857,
	858, 859, 860, 861, 862, 863, 864, 865, 866, 867,
	868, 869, 870, 871, 872, 873, 874, 875, 876, 877,
	878, 879, 880, 881, 882, 883, 884, 885, 886, 887,
	888, 889, 890, 891, 892, 893, 894, 895, 896, 897,
	898, 899, 900, 901, 902, 903, 904, 905, 906, 907,
	908, 909, 910, 911, 912, 913, 914, 915, 916, 917,
	918, 919, 920, 921, 922, 923, 924, 925, 926, 927,
	928, 929, 930, 931, 932, 933, 934, 935, 936, 937,
	938, 939, 940, 941, 942, 943, 944, 945, 946, 947,
	948, 949, 950, 951, 952, 953, 954, 955, 956, 957,
	958, 959, 960, 961, 962, 963, 964, 93, 94, 869,
	96, 0, 103, 104, 105, 107, 108, 109, 110, 111,
	112, 113, 0, 282, 883, 295, 116, 848, 887, 952,
	900, 123, 133, 0, 958, -2, 137, 67, 166, 167,
	0, 169, 184, 0, 0, 0, 0, 0, 177, 0,
	0, 181, 0, 300, 288, 300, 285, 286, 287, 290,
	0, 281, 0, 360, 0, 0, 0, 256, -2, 343,
	344, -2, 0, 364, 364, 364, 0, 0, 344, 0,
	352, 873, 355, 770, 353, 0, 0, 366, 365, 0,
	348, 428, 0, 760, 389, 0, 2, 0, 937, 428,
	0, 937, 0, 0, 0, 0, 0, 0, 434, 59,
	937, 49, 937, 756, 49, 937, 65, 0, 81, 83,
	797, 798, 799, 800, 963, 965, 966, 967, 968, 969,
	970, 971, 972, 973, 974, 975, 976, 977, 978, 0,
	0, 0, 91, 0, 95, 97, 0, 0, 0, 294,
	117, 927, 119, 0, 122, 124, 125, 0, 0, 0,
	0, 0, 0, 136, 161, 162, 68, 0, 0, 186,
	0, 0, 0, 0, 0, 0, 0, 178, 0, 180,
	0, 283, 296, 297, 284, 0, 292, 49, 432, 0,
	937, 791, 305, 937, -2, 0, 339, 376, 377, 0,
	0, 0, 362, 363, 0, 0, 0, 335, 336, 0,
	354, 0, 0, 392, 748, 752, 753, 521, 0, 0,
	0, 0, 0, 0, 608, 609, 610, 0, 612, 613,
	614, 932, 0, 618, 619, 952, 760, 773, 774, 775,
	776, 0, 0, 0, 781, 782, 783, 732, 658, 628,
	-2, -2, 771, 458, 459, 460, 461, -2, 965, 632,
	634, 636, 637, 638, 639, 0, 916, 933, 948, 949,
	957, 961, 962, 937, 945, 938, 928, 935, 944, 829,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, 796, 483, 484, 489, 490, 492, 392, 390, 429,
	430, 0, 761, 739, 733, 734, 0, 0, 0, 745,
	743, 744, 26, 278, 28, 0, 278, 278, 0, 0,
	0, 0, 0, 0, 0, 0, 438, 0, 311, 0,
	0, 435, 0, 0, 61, 0, 47, 48, 0, 63,
	0, 0, 359, 0, 0, 937, 359, 0, 692, 444,
	445, 446, 447, 448, 518, 451, 452, 453, 454, 455,
	456, 457, 465, 466, 467, 468, 469, 470, 471, 480,
	0, 464, 464, 464, 477, 478, 481, 482, 487, 488,
	499, 500, 502, 504, 498, 498, 498, 495, 496, 0,
	690, 0, 100, 0, 824, 758, 763, 764, 106, 0,
	0, 0, 0, 0, 0, 128, 148, 149, 150, 129,
	131, 138, 140, 141, 142, 151, 152, 153, 154, 250,
	0, 252, 164, 165, 784, 0, 130, 132, 134, 135,
	155, 156, 0, 158, 159, 160, 0, 69, 801, 802,
	803, 804, 805, 979, 980, 981, 982, 983, 984, 985,
	986, 987, 988, 989, 990, 991, 992, 993, 994, 995,
	996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005,
	1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015,
	1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025,
	1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035,
	1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045,
	1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055,
	1056, 1057, 168, 170, 0, 183, 171, 172, 173, 174,
	175, 176, 179, 182, 0, 0, 291, 253, 0, 194,
	0, 0, 0, 937, 790, 302, 0, 0, 342, 374,
	375, 378, 381, 382, 379, 521, 349, 350, 351, 370,
	371, 267, 356, 0, 0, 767, 438, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 742, 0, 0, 751, 525, 526, 527, 549,
	550, 0, -2, 690, 0, 615, 616, 617, 0, 0,
	-2, 0, 778, 518, 0, 0, 731, 660, 0, 0,
	0, 0, 0, 0, 0, 0, 711, 717, 0, 0,
	0, 0, 0, 0, 0, 0, 473, 486, 497, 494,
	493, 475, 0, 474, 472, 0, 476, 0, 0, 0,
	438, 0, 740, 0, 737, 738, 0, 747, 0, 0,
	0, 0, 277, 30, 937, 0, 40, 0, 0, 223,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 762, 0, 322, 0, 322, 313,
	0, 0, 0, 309, 325, 326, 328, 329, 0, 0,
	436, 60, 757, 49, 66, 49, 72, 82, 0, 84,
	87, 88, 89, 90, 85, 0, 439, 441, 449, 0,
	505, 506, 507, 508, 509, 510, 519, 92, 0, 0,
	0, 101, 102, 765, 766, 0, 0, 121, 126, 127,
	301, 0, 145, 0, 147, 0, 251, 786, 785, 518,
	70, 185, 114, 298, 299, 433, 0, 193, 195, 197,
	198, 199, 200, 791, 0, 791, 191, 0, 0, 0,
	0, 0, 380, 383, 384, 0, 373, 265, 266, 359,
	0, 769, 386, 749, 419, 393, 401, 417, 404, 0,
	522, 523, 0, 528, 529, 530, 531, 532, 533, 534,
	535, 536, 537, -2, -2, -2, 541, 542, 543, -2,
	-2, -2, 547, 548, -2, 0, 0, 0, 742, 0,
	-2, 0, 557, -2, -2, -2, 561, 0, 564, 566,
	568, 0, 0, 0, 0, 741, 578, 723, 0, 750,
	563, 0, 0, 611, 0, 0, 0, 696, 697, 0,
	-2, 620, 369, 0, 0, 0, 0, 779, 0, 730,
	726, 0, 668, 0, 0, 0, 633, 635, 0, 0,
	0, 0, 700, 701, 702, 703, 704, 705, 706, 0,
	0, 0, 0, 580, 0, 0, 0, 0, 952, 0,
	690, 716, 0, 0, 0, 0, 0, 690, 0, 722,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 386, 431, 735, 0, 746, 29, 269, 0,
	0, 0, 32, 937, 205, 0, 0, 0, 0, 0,
	280, 41, 937, 49, 937, 49, 42, 27, 278, 0,
	0, 271, 0, 268, 58, 0, 437, 306, 307, 0,
	0, 754, 315, 312, 0, 438, 0, 0, 0, 0,
	62, 64, 0, 693, 0, 0, 0, 0, 0, 0,
	0, 0, 691, 98, 759, 99, 118, 143, 144, 146,
	139, 157, 0, 202, 0, 0, 791, 0, 0, 0,
	0, 304, 305, 372, 0, 768, 388, 0, 391, 0,
	0, 0, 0, 0, 0, 425, 425, 425, 423, 417,
	0, 403, 416, 0, 415, -2, 404, 0, 0, -2,
	-2, 0, 0, 0, 579, -2, 562, 565, 567, 569,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 691,
	694, 695, 0, -2, 0, 0, 368, 369, 369, 369,
	626, 0, 0, 727, 0, 0, 627, 0, 0, 0,
	0, 0, 0, 642, 0, 643, 0, 0, 644, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 582, 583, 584, 0, 0, 645, 714, 715, 0,
	0, 0, 0, 0, 0, 650, 0, 721, 0, 0,
	0, 654, 655, 656, 0, 462, 0, 479, 501, 503,
	491, 388, 0, 0, 0, 0, 0, 203, 222, 0,
	0, 0, 0, 34, 0, 0, 0, 0, 38, 0,
	44, 0, 0, 0, 0, 0, 0, 321, 0, 320,
	0, 0, 310, 322, 327, 324, 330, 0, 442, 0,
	0, 450, 511, 512, 513, 514, 515, 516, 517, 0,
	115, 189, 0, 196, 0, 0, 0, 194, 0, 0,
	0, 303, 357, 662, 0, 0, 394, 0, 0, 0,
	0, 0, 0, 420, 424, 421, 422, 402, 399, 0,
	413, 0, 406, 524, -2, 0, 0, 0, 0, -2,
	0, 0, 0, 724, 0, 685, 0, -2, 698, 621,
	0, 0, 0, 0, 780, 725, 729, 0, 666, 667,
	671, 0, 0, 631, 0, 0, 699, 708, 709, 581,
	585, 586, 587, 588, 589, 590, 591, 592, 593, 594,
	-2, -2, -2, 598, 599, 600, -2, -2, -2, 0,
	0, 0, 710, 0, 0, 688, 712, 713, 718, 719,
	0, 647, 648, 649, 720, 0, 0, 0, 485, 0,
	662, 736, 273, 275, 31, 0, 204, 0, 207, 0,
	0, 0, 0, 213, 214, 0, 0, 0, 0, 224,
	231, 0, 0, 0, 46, 0, 0, 279, 0, 49,
	49, 270, 0, 0, 187, 188, 272, 308, 0, 0,
	0, 314, 755, 323, 0, 443, 440, 520, 0, 0,
	258, 264, 264, 0, 629, 630, 0, 0, 0, 0,
	192, 0, 0, 345, 0, 387, 385, 0, 407, 0,
	409, 0, 0, 0, 411, 0, 397, 0, 396, 0,
	0, 405, 0, 0, -2, 0, 572, -2, -2, 684,
	691, 777, 369, 622, 624, 625, 728, 673, 670, 0,
	657, 640, 641, 707, 0, 0, 0, 0, 691, 687,
	646, 0, 652, 653, 463, 346, 33, 0, 208, 209,
	791, 0, 212, 215, 0, 217, 793, 202, 0, 228,
	229, 226, 0, 35, 36, 45, 51, 37, 43, 0,
	0, 0, 0, 0, 331, 332, 0, 0, 231, 0,
	267, 772, 0, 267, 0, 0, 0, 221, 202, 231,
	0, 661, 663, 0, 0, 408, 0, 427, 410, 0,
	400, 0, 0, 414, -2, -2, 573, 686, 0, 369,
	0, 659, -2, 0, 0, 0, 689, 0, 206, 210,
	0, 0, 237, 0, 225, 0, 0, 53, 0, 274,
	276, 0, 317, 438, 319, 0, 202, 259, 260, 263,
	261, 264, 369, 231, 190, 202, 0, 0, 0, 418,
	0, 398, 395, 412, 623, 676, 0, -2, 0, 606,
	651, 0, 216, 242, 0, 0, 0, 233, 39, 0,
	50, 0, 318, 0, 219, 267, 0, 202, 254, 0,
	664, 665, 426, 0, 0, 0, 672, 607, 0, 218,
	238, 239, 0, 234, 235, 236, 792, 230, 237, 0,
	52, 438, 0, 262, 621, 220, 231, 669, 674, 677,
	-2, 903, 821, 0, 675, 211, 240, 0, 241, 0,
	0, 0, 242, 0, 316, 49, 202, 0, 679, 680,
	681, 682, 683, 243, 0, 246, 247, 0, 244, 227,
	232, 201, 255, 0, 245, 248, 249, 678,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 285, 3, 291, 286, 3,
	296, 297, 289, 287, 300, 288, 298, 290, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 304, 299,
	279, 281, 280, 3, 301, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 294, 3, 295, 284, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 302, 283, 303, 293,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 282, 57622, 292, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:714
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:720
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:726
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 17:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:749
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 25:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:760
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 26:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:766
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 27:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:770
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 28:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:776
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 29:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:780
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:787
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 31:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:792
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 32:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:797
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 33:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:802
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:807
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:812
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 36:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:816
		{
			unimplemented()
		}
	case 37:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:819
		{
			sqlVAL.union.val = &AlterTableDropColumn{columnKeyword: sqlDollar[2].union.bool(), IfExists: true, Column: Name(sqlDollar[5].str)}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:824
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 39:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:834
		{
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:837
		{
			sqlVAL.union.val = &AlterTableAddConstraint{ConstraintDef: sqlDollar[2].union.constraintDef()}
		}
	case 41:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:841
		{
			unimplemented()
		}
	case 42:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:843
		{
			unimplemented()
		}
	case 43:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:846
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 44:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:855
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 45:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:865
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 46:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:869
		{
			sqlVAL.union.val = nil
		}
	case 47:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:875
		{
			sqlVAL.union.val = DropCascade
		}
	case 48:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:879
		{
			sqlVAL.union.val = DropRestrict
		}
	case 49:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:883
		{
			sqlVAL.union.val = DropDefault
		}
	case 50:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:888
		{
			unimplementedWithIssue(2473)
		}
	case 51:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:889
		{
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:892
		{
			unimplemented()
		}
	case 53:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:893
		{
		}
	case 58:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:905
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retExprs()}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:912
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:916
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:920
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:928
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:936
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:940
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:946
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 66:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:950
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 67:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:956
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:960
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 69:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:966
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 70:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:970
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 71:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:977
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 72:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:981
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 73:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:987
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 80:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:996
		{ /* SKIP DOC */
		}
	case 81:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1000
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1004
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 84:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1014
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1024
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 86:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1028
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 87:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1034
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 91:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1044
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1055
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 93:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1059
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 94:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1066
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1072
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1078
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1082
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1089
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1096
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1103
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1107
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1111
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1118
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1121
		{
		}
	case 105:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1125
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1129
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1136
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1140
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1144
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 110:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1148
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 111:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1152
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 112:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1156
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 113:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1160
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1168
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1172
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 116:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1180
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1184
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 118:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1188
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1192
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1195
		{ /* SKIP DOC */
		}
	case 121:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1201
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1207
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1214
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1218
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1222
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1226
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1233
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1239
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1243
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1247
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1251
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1258
		{
			unimplemented()
		}
	case 135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1261
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1264
		{
			unimplemented()
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1271
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1275
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1283
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1289
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1293
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1297
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1301
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1305
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1311
		{
			sqlVAL.union.val = Low
		}
	case 149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1315
		{
			sqlVAL.union.val = Normal
		}
	case 150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1319
		{
			sqlVAL.union.val = High
		}
	case 151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1325
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1329
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1333
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1348
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1352
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1356
		{
			d, err := ParseDInterval(sqlDollar[2].str)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1366
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1370
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1375
		{
			unimplemented()
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1376
		{
			unimplemented()
		}
	case 163:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1377
		{
		}
	case 164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1381
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1385
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1391
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1395
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1399
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1403
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1407
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1411
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1415
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1419
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1423
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1427
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1431
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1435
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1439
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1443
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1447
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1451
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 182:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1455
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1461
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 184:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1466
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1472
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 186:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1476
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 187:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1482
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.normalizableTableName(), Exprs: sqlDollar[7].union.exprs()}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1486
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Exprs: sqlDollar[7].union.exprs()}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1493
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1497
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1503
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[5].union.slct()}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1507
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[8].union.slct()}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1514
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1520
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1524
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 197:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1530
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1536
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 201:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1542
		{
			/* SKIP DOC */
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1550
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1556
		{
			sqlVAL.union.val = newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
		}
	case 204:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1562
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 205:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1566
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1572
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1576
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1579
		{
			unimplemented()
		}
	case 209:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1581
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1585
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1589
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1607
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1611
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1615
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1619
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1623
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1627
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1631
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1640
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1649
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1662
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1674
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 223:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1679
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 224:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1685
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 225:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1691
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    NameListToIndexElems(sqlDollar[3].union.nameList()),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 226:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1701
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[4].union.nameList()),
				},
				PrimaryKey: true,
			}
		}
	case 227:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1711
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 230:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1734
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 231:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1738
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 232:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1744
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 233:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1748
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 234:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1753
		{
			unimplemented()
		}
	case 235:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1754
		{
			unimplemented()
		}
	case 236:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1755
		{
			unimplemented()
		}
	case 237:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1756
		{
		}
	case 238:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1763
		{
			unimplemented()
		}
	case 239:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1764
		{
			unimplemented()
		}
	case 240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1765
		{
			unimplemented()
		}
	case 241:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1766
		{
			unimplemented()
		}
	case 242:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1767
		{
		}
	case 243:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1770
		{
			unimplemented()
		}
	case 244:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1773
		{
			unimplemented()
		}
	case 245:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1776
		{
			unimplemented()
		}
	case 246:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1777
		{
			unimplemented()
		}
	case 247:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1778
		{
			unimplemented()
		}
	case 248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1779
		{
			unimplemented()
		}
	case 249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1780
		{
			unimplemented()
		}
	case 250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1784
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 251:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1788
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1792
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 253:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1799
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:1806
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 255:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:1817
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1831
		{
			sqlVAL.union.val = true
		}
	case 257:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1835
		{
			sqlVAL.union.val = false
		}
	case 258:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1841
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1845
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 260:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1854
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 261:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1857
		{
			unimplemented()
		}
	case 262:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1858
		{
			unimplemented()
		}
	case 263:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1861
		{
			unimplemented()
		}
	case 264:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1862
		{
		}
	case 265:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1866
		{
			sqlVAL.union.val = Ascending
		}
	case 266:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1870
		{
			sqlVAL.union.val = Descending
		}
	case 267:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1874
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 268:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1881
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1885
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1889
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1893
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1897
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1901
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1905
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1909
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 276:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1913
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 277:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1919
		{
			sqlVAL.union.val = true
		}
	case 278:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1923
		{
			sqlVAL.union.val = false
		}
	case 279:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1928
		{
		}
	case 280:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1929
		{
		}
	case 281:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1933
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1939
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1946
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 284:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1950
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 285:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1954
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1958
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1962
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1971
		{
		}
	case 289:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1972
		{
		}
	case 290:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1976
		{
			sqlVAL.str = ""
		}
	case 291:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1980
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1984
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 293:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1988
		{
			sqlVAL.str = ""
		}
	case 294:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1994
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1998
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2004
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2008
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2012
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2016
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2020
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2026
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 302:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2032
		{
			sqlVAL.union.val = &CreateDatabase{Name: Name(sqlDollar[3].str), Encoding: sqlDollar[4].union.strVal()}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2036
		{
			sqlVAL.union.val = &CreateDatabase{IfNotExists: true, Name: Name(sqlDollar[6].str), Encoding: sqlDollar[7].union.strVal()}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2042
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2045
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 306:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2055
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retExprs()
		}
	case 307:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2061
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
		}
	case 308:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2066
		{
			unimplementedWithIssue(6637)
		}
	case 309:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2068
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2073
		{
			unimplementedWithIssue(6637)
		}
	case 311:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2081
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 312:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2085
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2091
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2095
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2099
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2105
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2109
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2115
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 319:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2119
		{
			unimplemented()
		}
	case 320:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2121
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 321:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2127
		{
			sqlVAL.union.val = sqlDollar[2].union.selExprs()
		}
	case 322:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2131
		{
			sqlVAL.union.val = SelectExprs(nil)
		}
	case 323:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2138
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retExprs()}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2144
		{
			unimplementedWithIssue(7841)
		}
	case 325:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2145
		{
		}
	case 326:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2149
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2153
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 330:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2163
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2175
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2179
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2223
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2229
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2233
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2248
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2252
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2256
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2260
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2264
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2268
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2302
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2314
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2326
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2334
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2343
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2352
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2370
		{
			unimplemented()
		}
	case 353:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2371
		{
			unimplemented()
		}
	case 354:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2372
		{
			unimplemented()
		}
	case 355:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2375
		{
			unimplemented()
		}
	case 356:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2376
		{
			unimplemented()
		}
	case 357:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2379
		{
			unimplemented()
		}
	case 358:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2382
		{
			unimplemented()
		}
	case 359:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2383
		{
		}
	case 360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2386
		{
		}
	case 361:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2387
		{
		}
	case 362:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2391
		{
			sqlVAL.union.val = true
		}
	case 363:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2395
		{
			sqlVAL.union.val = false
		}
	case 364:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2399
		{
			sqlVAL.union.val = false
		}
	case 365:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2405
		{
			sqlVAL.union.val = true
		}
	case 366:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2410
		{
		}
	case 367:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2411
		{
		}
	case 368:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2415
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 369:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2419
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2425
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 371:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2431
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2435
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2441
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2449
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2458
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2469
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2482
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2489
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 382:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2496
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 383:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2510
		{
		}
	case 384:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2511
		{
		}
	case 385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2537
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 386:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2541
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 387:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2547
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 388:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2551
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 389:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2557
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2561
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2573
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2577
		{
			sqlVAL.union.val = &From{}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2583
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2587
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 395:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2593
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2598
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2604
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 398:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2609
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			index := a.Index
			if index == "" {
				index = b.Index
			} else if b.Index != "" {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			noIndexJoin := a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = &IndexHints{Index: index, NoIndexJoin: noIndexJoin}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2629
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2633
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 401:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2637
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 402:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2644
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), As: sqlDollar[3].union.aliasClause()}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2648
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, As: sqlDollar[2].union.aliasClause()}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2652
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 405:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2656
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[2].union.tblExpr(), As: sqlDollar[4].union.aliasClause()}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2676
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2680
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2684
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2688
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2692
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2696
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2702
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2706
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2710
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2714
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2721
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2727
		{
			sqlVAL.union.val = AsOfClause{Expr: &StrVal{s: sqlDollar[5].str}}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2731
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2737
		{
			sqlVAL.str = astFullJoin
		}
	case 421:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2741
		{
			sqlVAL.str = astLeftJoin
		}
	case 422:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2745
		{
			sqlVAL.str = astRightJoin
		}
	case 423:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2749
		{
			sqlVAL.str = astInnerJoin
		}
	case 424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2755
		{
		}
	case 425:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2756
		{
		}
	case 426:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2767
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2771
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2777
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2781
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 430:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2785
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 431:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2789
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2795
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2799
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2812
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 435:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2816
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2820
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2826
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 438:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2830
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 439:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2842
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 440:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2846
		{
			unimplementedWithIssue(2115)
		}
	case 441:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2847
		{
			unimplementedWithIssue(2115)
		}
	case 442:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2850
		{
			unimplementedWithIssue(2115)
		}
	case 443:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2851
		{
			unimplementedWithIssue(2115)
		}
	case 444:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2852
		{
		}
	case 450:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2860
		{
			unimplemented()
		}
	case 451:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2862
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 452:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2866
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 453:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2870
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 454:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2874
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 455:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2878
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 456:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2882
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 457:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2886
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 462:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2907
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2916
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2930
		{
			sqlVAL.union.val = nil
		}
	case 465:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2937
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 466:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2941
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 467:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2945
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 468:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2949
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 469:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2953
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2957
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 471:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2961
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 472:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2965
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newFloatColType(int(prec))
		}
	case 473:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2974
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 474:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2978
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2987
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2996
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3005
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 478:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3009
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 479:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3015
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 480:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3019
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3037
		{
			n, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 486:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3053
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 491:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3069
		{
			n, err := sqlDollar[3].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3085
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 493:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3091
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 494:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3095
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 495:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3099
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 496:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3103
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 497:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3108
		{
		}
	case 498:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3109
		{
		}
	case 499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3114
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 500:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3118
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 501:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3122
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 502:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3126
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 503:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3130
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 504:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3135
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 505:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3140
		{
			unimplemented()
		}
	case 506:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3141
		{
			unimplemented()
		}
	case 507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3142
		{
			unimplemented()
		}
	case 508:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3143
		{
			unimplemented()
		}
	case 509:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3144
		{
			unimplemented()
		}
	case 510:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3145
		{
			unimplemented()
		}
	case 511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3146
		{
			unimplemented()
		}
	case 512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3147
		{
			unimplemented()
		}
	case 513:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3148
		{
			unimplemented()
		}
	case 514:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3149
		{
			unimplemented()
		}
	case 515:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3150
		{
			unimplemented()
		}
	case 516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3151
		{
			unimplemented()
		}
	case 517:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3152
		{
			unimplemented()
		}
	case 518:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3153
		{
		}
	case 519:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3156
		{
			unimplemented()
		}
	case 520:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3157
		{
			unimplemented()
		}
	case 522:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3181
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3189
		{
			unimplemented()
		}
	case 524:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3190
		{
			unimplemented()
		}
	case 525:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3199
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3203
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3207
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3211
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3215
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3219
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3223
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3227
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3231
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3235
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3239
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3243
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3247
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3251
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3255
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3259
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3263
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3267
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3271
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3275
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3279
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3283
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3287
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3291
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3295
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3299
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3303
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3307
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3311
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3315
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3319
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3323
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3327
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3331
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3335
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3339
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3343
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3347
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3350
		{
			unimplemented()
		}
	case 564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3352
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3356
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3360
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3364
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3368
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3372
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3376
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3380
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3384
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3388
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3392
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3396
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3400
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3404
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3408
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3412
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3429
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3438
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3442
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3446
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3450
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3454
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3458
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3462
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3466
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3470
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3474
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3478
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3482
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3486
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3490
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3494
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3498
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3502
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3506
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3510
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3514
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3518
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3522
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3526
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3530
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3534
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3538
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3550
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 610:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3555
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3559
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3565
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3569
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3573
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3579
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 618:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3583
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 619:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3587
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3595
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName()}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3599
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3602
		{
			unimplemented()
		}
	case 623:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3603
		{
			unimplemented()
		}
	case 624:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3605
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Type: All, Exprs: sqlDollar[4].union.exprs()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3609
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Type: Distinct, Exprs: sqlDollar[4].union.exprs()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3613
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Exprs: Exprs{StarExpr()}}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3626
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 628:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3630
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 629:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3639
		{
			unimplemented()
		}
	case 630:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3640
		{
			unimplemented()
		}
	case 631:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3644
		{
			unimplemented()
		}
	case 632:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3646
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3650
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3654
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3658
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3661
		{
			unimplemented()
		}
	case 637:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3662
		{
			unimplemented()
		}
	case 638:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3663
		{
			unimplemented()
		}
	case 639:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3664
		{
			unimplemented()
		}
	case 640:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3666
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3670
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3674
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3678
		{
			sqlVAL.union.val = &OverlayExpr{FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3682
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3686
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3689
		{
			unimplemented()
		}
	case 647:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3691
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3695
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3699
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3703
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3707
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3711
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3715
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3719
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3723
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3727
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3733
		{
			unimplemented()
		}
	case 658:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3734
		{
		}
	case 659:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3737
		{
			unimplemented()
		}
	case 660:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3738
		{
		}
	case 661:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3742
		{
			unimplemented()
		}
	case 662:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3743
		{
		}
	case 663:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3746
		{
			unimplemented()
		}
	case 664:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3747
		{
			unimplemented()
		}
	case 665:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3750
		{
			unimplemented()
		}
	case 666:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3753
		{
			unimplemented()
		}
	case 667:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3754
		{
			unimplemented()
		}
	case 668:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3755
		{
		}
	case 669:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3759
		{
			unimplemented()
		}
	case 670:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3770
		{
			unimplemented()
		}
	case 671:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3771
		{
		}
	case 672:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3774
		{
			unimplemented()
		}
	case 673:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3775
		{
		}
	case 674:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3783
		{
			unimplemented()
		}
	case 675:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3784
		{
			unimplemented()
		}
	case 676:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3785
		{
		}
	case 677:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3788
		{
			unimplemented()
		}
	case 678:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3789
		{
			unimplemented()
		}
	case 679:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3795
		{
			unimplemented()
		}
	case 680:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3796
		{
			unimplemented()
		}
	case 681:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3797
		{
			unimplemented()
		}
	case 682:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3798
		{
			unimplemented()
		}
	case 683:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3799
		{
			unimplemented()
		}
	case 684:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3810
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3814
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3818
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3824
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3828
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3834
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3877
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3881
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 692:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3887
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3891
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 694:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3897
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3901
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3905
		{
			sqlVAL.union.val = &Array{nil}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3911
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3915
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 699:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3921
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3943
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3947
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3953
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 710:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3960
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3964
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 712:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3981
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3985
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3989
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3993
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3997
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 717:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4001
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 718:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4007
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 719:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4013
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4019
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 721:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4023
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 722:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4027
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 723:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4033
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4037
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4048
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4055
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4059
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 728:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4065
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4071
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 730:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4075
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 732:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4082
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 733:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4088
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 734:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4092
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 735:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4096
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4100
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr()}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4106
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 738:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4112
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4118
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4122
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 741:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4127
		{
		}
	case 742:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4128
		{
		}
	case 744:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4137
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4143
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4147
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 747:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4156
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 748:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4162
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4166
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 750:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4172
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4181
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4185
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4189
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 754:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4197
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4201
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 756:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4207
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4211
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 758:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4217
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4221
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 760:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4232
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4236
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 762:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4242
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4253
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4257
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4261
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4265
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4271
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4275
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 769:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4281
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 770:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4284
		{
		}
	case 771:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4294
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4298
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 773:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4305
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 774:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4309
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 775:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4313
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4317
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4320
		{
			unimplemented()
		}
	case 778:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4322
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4326
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4330
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[5].str}, Type: sqlDollar[1].union.colType()}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4334
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 782:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4338
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 783:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4342
		{
			sqlVAL.union.val = DNull
		}
	case 785:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4349
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 786:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4353
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4375
		{
			sqlVAL.str = ""
		}
	case 792:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4381
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 793:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4385
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
