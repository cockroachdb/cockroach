// Code generated by go yacc.
//line sql.y:21
package parser

import __yyfmt__ "fmt"

//line sql.y:21
import "github.com/cockroachdb/cockroach/sql/privilege"

func unimplemented() {
	panic("TODO(pmattis): unimplemented")
}

//line sql.y:29
type sqlSymType struct {
	yys            int
	id             int
	pos            int
	empty          struct{}
	ival           IntVal
	boolVal        bool
	str            string
	strs           []string
	qname          *QualifiedName
	qnames         QualifiedNames
	indirectElem   IndirectionElem
	indirect       Indirection
	stmt           Statement
	stmts          []Statement
	selectStmt     SelectStatement
	colDef         *ColumnTableDef
	constraintDef  ConstraintTableDef
	tblDef         TableDef
	tblDefs        []TableDef
	colQual        ColumnQualification
	colQuals       []ColumnQualification
	colType        ColumnType
	colTypes       []ColumnType
	expr           Expr
	exprs          Exprs
	selExpr        SelectExpr
	selExprs       SelectExprs
	aliasClause    AliasClause
	tblExpr        TableExpr
	tblExprs       TableExprs
	joinCond       JoinCond
	when           *When
	whens          []*When
	updateExpr     *UpdateExpr
	updateExprs    []*UpdateExpr
	limit          *Limit
	targetList     TargetList
	targetListPtr  *TargetList
	privilegeType  privilege.Kind
	privilegeList  privilege.List
	orderBy        OrderBy
	orders         []*Order
	order          *Order
	groupBy        GroupBy
	dir            Direction
	alterTableCmd  AlterTableCmd
	alterTableCmds AlterTableCmds
	isoLevel       IsolationLevel
	userPriority   UserPriority
	idxElem        IndexElem
	idxElems       IndexElemList
}

const IDENT = 57346
const FCONST = 57347
const SCONST = 57348
const BCONST = 57349
const ICONST = 57350
const PARAM = 57351
const TYPECAST = 57352
const DOT_DOT = 57353
const LESS_EQUALS = 57354
const GREATER_EQUALS = 57355
const NOT_EQUALS = 57356
const ERROR = 57357
const ACTION = 57358
const ADD = 57359
const ALL = 57360
const ALTER = 57361
const ANALYSE = 57362
const ANALYZE = 57363
const AND = 57364
const ANY = 57365
const ARRAY = 57366
const AS = 57367
const ASC = 57368
const ASYMMETRIC = 57369
const AT = 57370
const BEGIN = 57371
const BETWEEN = 57372
const BIGINT = 57373
const BIT = 57374
const BLOB = 57375
const BOOL = 57376
const BOOLEAN = 57377
const BOTH = 57378
const BY = 57379
const BYTES = 57380
const CASCADE = 57381
const CASE = 57382
const CAST = 57383
const CHAR = 57384
const CHARACTER = 57385
const CHECK = 57386
const COALESCE = 57387
const COLLATE = 57388
const COLLATION = 57389
const COLUMN = 57390
const COLUMNS = 57391
const COMMIT = 57392
const COMMITTED = 57393
const CONCAT = 57394
const CONFLICT = 57395
const CONSTRAINT = 57396
const COVERING = 57397
const CREATE = 57398
const CROSS = 57399
const CUBE = 57400
const CURRENT = 57401
const CURRENT_CATALOG = 57402
const CURRENT_DATE = 57403
const CURRENT_ROLE = 57404
const CURRENT_TIME = 57405
const CURRENT_TIMESTAMP = 57406
const CURRENT_USER = 57407
const CYCLE = 57408
const DATA = 57409
const DATABASE = 57410
const DATABASES = 57411
const DATE = 57412
const DAY = 57413
const DEC = 57414
const DECIMAL = 57415
const DEFAULT = 57416
const DEFERRABLE = 57417
const DELETE = 57418
const DESC = 57419
const DISTINCT = 57420
const DO = 57421
const DOUBLE = 57422
const DROP = 57423
const ELSE = 57424
const END = 57425
const ESCAPE = 57426
const EXCEPT = 57427
const EXISTS = 57428
const EXPLAIN = 57429
const EXTRACT = 57430
const FALSE = 57431
const FETCH = 57432
const FILTER = 57433
const FIRST = 57434
const FLOAT = 57435
const FOLLOWING = 57436
const FOR = 57437
const FOREIGN = 57438
const FROM = 57439
const FULL = 57440
const GRANT = 57441
const GRANTS = 57442
const GREATEST = 57443
const GROUP = 57444
const GROUPING = 57445
const HAVING = 57446
const HIGH = 57447
const HOUR = 57448
const IF = 57449
const IFNULL = 57450
const IN = 57451
const INDEX = 57452
const INITIALLY = 57453
const INNER = 57454
const INSERT = 57455
const INT = 57456
const INT64 = 57457
const INTEGER = 57458
const INTERSECT = 57459
const INTERVAL = 57460
const INTO = 57461
const IS = 57462
const ISOLATION = 57463
const JOIN = 57464
const KEY = 57465
const LATERAL = 57466
const LEADING = 57467
const LEAST = 57468
const LEFT = 57469
const LEVEL = 57470
const LIKE = 57471
const LIMIT = 57472
const LOCAL = 57473
const LOCALTIME = 57474
const LOCALTIMESTAMP = 57475
const LOW = 57476
const LSHIFT = 57477
const MATCH = 57478
const MINUTE = 57479
const MONTH = 57480
const NAME = 57481
const NAMES = 57482
const NATURAL = 57483
const NEXT = 57484
const NO = 57485
const NORMAL = 57486
const NOT = 57487
const NOTHING = 57488
const NULL = 57489
const NULLIF = 57490
const NULLS = 57491
const NUMERIC = 57492
const OF = 57493
const OFF = 57494
const OFFSET = 57495
const ON = 57496
const ONLY = 57497
const OR = 57498
const ORDER = 57499
const ORDINALITY = 57500
const OUT = 57501
const OUTER = 57502
const OVER = 57503
const OVERLAPS = 57504
const OVERLAY = 57505
const PARTIAL = 57506
const PARTITION = 57507
const PLACING = 57508
const POSITION = 57509
const PRECEDING = 57510
const PRECISION = 57511
const PRIMARY = 57512
const PRIORITY = 57513
const RANGE = 57514
const READ = 57515
const REAL = 57516
const RECURSIVE = 57517
const REF = 57518
const REFERENCES = 57519
const RENAME = 57520
const REPEATABLE = 57521
const RESTRICT = 57522
const RETURNING = 57523
const REVOKE = 57524
const RIGHT = 57525
const ROLLBACK = 57526
const ROLLUP = 57527
const ROW = 57528
const ROWS = 57529
const RSHIFT = 57530
const SEARCH = 57531
const SECOND = 57532
const SELECT = 57533
const SERIALIZABLE = 57534
const SESSION = 57535
const SESSION_USER = 57536
const SET = 57537
const SHOW = 57538
const SIMILAR = 57539
const SIMPLE = 57540
const SMALLINT = 57541
const SNAPSHOT = 57542
const SOME = 57543
const SQL = 57544
const START = 57545
const STRICT = 57546
const STRING = 57547
const STORING = 57548
const SUBSTRING = 57549
const SYMMETRIC = 57550
const TABLE = 57551
const TABLES = 57552
const TEXT = 57553
const THEN = 57554
const TIME = 57555
const TIMESTAMP = 57556
const TO = 57557
const TRAILING = 57558
const TRANSACTION = 57559
const TREAT = 57560
const TRIM = 57561
const TRUE = 57562
const TRUNCATE = 57563
const TYPE = 57564
const UNBOUNDED = 57565
const UNCOMMITTED = 57566
const UNION = 57567
const UNIQUE = 57568
const UNKNOWN = 57569
const UPDATE = 57570
const USER = 57571
const USING = 57572
const VALID = 57573
const VALIDATE = 57574
const VALUE = 57575
const VALUES = 57576
const VARCHAR = 57577
const VARIADIC = 57578
const VARYING = 57579
const WHEN = 57580
const WHERE = 57581
const WINDOW = 57582
const WITH = 57583
const WITHIN = 57584
const WITHOUT = 57585
const YEAR = 57586
const ZONE = 57587
const NOT_LA = 57588
const WITH_LA = 57589
const POSTFIXOP = 57590
const UMINUS = 57591

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"FCONST",
	"SCONST",
	"BCONST",
	"ICONST",
	"PARAM",
	"TYPECAST",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXPLAIN",
	"EXTRACT",
	"FALSE",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FOLLOWING",
	"FOR",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HOUR",
	"IF",
	"IFNULL",
	"IN",
	"INDEX",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"LATERAL",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARTIAL",
	"PARTITION",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"RENAME",
	"REPEATABLE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SNAPSHOT",
	"SOME",
	"SQL",
	"START",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"TABLE",
	"TABLES",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"USER",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:3861

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 19,
	268, 19,
	-2, 303,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 29,
	1, 274,
	154, 274,
	266, 274,
	268, 274,
	-2, 284,
	-1, 40,
	1, 277,
	154, 277,
	266, 277,
	268, 277,
	-2, 283,
	-1, 49,
	1, 19,
	268, 19,
	-2, 303,
	-1, 85,
	1, 135,
	268, 135,
	-2, 754,
	-1, 243,
	130, 313,
	153, 313,
	-2, 280,
	-1, 246,
	130, 312,
	153, 312,
	-2, 278,
	-1, 354,
	130, 312,
	153, 312,
	-2, 281,
	-1, 411,
	265, 702,
	-2, 697,
	-1, 412,
	265, 703,
	-2, 698,
	-1, 418,
	6, 431,
	265, 431,
	-2, 830,
	-1, 440,
	6, 401,
	-2, 809,
	-1, 441,
	6, 428,
	265, 428,
	-2, 810,
	-1, 442,
	6, 409,
	-2, 811,
	-1, 443,
	6, 408,
	-2, 812,
	-1, 444,
	6, 428,
	265, 428,
	-2, 814,
	-1, 445,
	6, 428,
	265, 428,
	-2, 815,
	-1, 446,
	6, 429,
	-2, 817,
	-1, 447,
	6, 396,
	-2, 818,
	-1, 448,
	6, 396,
	-2, 819,
	-1, 449,
	6, 411,
	-2, 822,
	-1, 450,
	6, 397,
	-2, 827,
	-1, 451,
	6, 398,
	-2, 828,
	-1, 452,
	6, 399,
	-2, 829,
	-1, 453,
	6, 396,
	-2, 833,
	-1, 454,
	6, 402,
	-2, 838,
	-1, 455,
	6, 400,
	-2, 840,
	-1, 456,
	6, 430,
	-2, 844,
	-1, 457,
	6, 426,
	265, 426,
	-2, 848,
	-1, 706,
	85, 284,
	117, 284,
	130, 284,
	153, 284,
	157, 284,
	225, 284,
	-2, 533,
	-1, 714,
	265, 682,
	-2, 676,
	-1, 903,
	12, 0,
	13, 0,
	14, 0,
	248, 0,
	249, 0,
	250, 0,
	-2, 464,
	-1, 904,
	12, 0,
	13, 0,
	14, 0,
	248, 0,
	249, 0,
	250, 0,
	-2, 465,
	-1, 905,
	12, 0,
	13, 0,
	14, 0,
	248, 0,
	249, 0,
	250, 0,
	-2, 466,
	-1, 909,
	12, 0,
	13, 0,
	14, 0,
	248, 0,
	249, 0,
	250, 0,
	-2, 470,
	-1, 910,
	12, 0,
	13, 0,
	14, 0,
	248, 0,
	249, 0,
	250, 0,
	-2, 471,
	-1, 911,
	12, 0,
	13, 0,
	14, 0,
	248, 0,
	249, 0,
	250, 0,
	-2, 472,
	-1, 914,
	30, 0,
	109, 0,
	129, 0,
	197, 0,
	246, 0,
	-2, 477,
	-1, 945,
	162, 603,
	-2, 606,
	-1, 1091,
	85, 284,
	117, 284,
	130, 284,
	153, 284,
	157, 284,
	225, 284,
	-2, 354,
	-1, 1099,
	30, 0,
	109, 0,
	129, 0,
	197, 0,
	246, 0,
	-2, 478,
	-1, 1104,
	30, 0,
	109, 0,
	129, 0,
	197, 0,
	246, 0,
	-2, 479,
	-1, 1123,
	162, 602,
	-2, 605,
	-1, 1260,
	30, 0,
	109, 0,
	129, 0,
	197, 0,
	246, 0,
	-2, 480,
	-1, 1265,
	120, 0,
	-2, 490,
	-1, 1274,
	162, 604,
	-2, 607,
	-1, 1314,
	12, 0,
	13, 0,
	14, 0,
	248, 0,
	249, 0,
	250, 0,
	-2, 514,
	-1, 1315,
	12, 0,
	13, 0,
	14, 0,
	248, 0,
	249, 0,
	250, 0,
	-2, 515,
	-1, 1316,
	12, 0,
	13, 0,
	14, 0,
	248, 0,
	249, 0,
	250, 0,
	-2, 516,
	-1, 1320,
	12, 0,
	13, 0,
	14, 0,
	248, 0,
	249, 0,
	250, 0,
	-2, 520,
	-1, 1321,
	12, 0,
	13, 0,
	14, 0,
	248, 0,
	249, 0,
	250, 0,
	-2, 521,
	-1, 1322,
	12, 0,
	13, 0,
	14, 0,
	248, 0,
	249, 0,
	250, 0,
	-2, 522,
	-1, 1414,
	120, 0,
	-2, 491,
	-1, 1418,
	30, 0,
	109, 0,
	129, 0,
	197, 0,
	246, 0,
	-2, 494,
	-1, 1419,
	30, 0,
	109, 0,
	129, 0,
	197, 0,
	246, 0,
	-2, 496,
	-1, 1498,
	30, 0,
	109, 0,
	129, 0,
	197, 0,
	246, 0,
	-2, 495,
	-1, 1499,
	30, 0,
	109, 0,
	129, 0,
	197, 0,
	246, 0,
	-2, 497,
	-1, 1507,
	120, 0,
	-2, 523,
	-1, 1544,
	120, 0,
	-2, 524,
	-1, 1589,
	30, 0,
	129, 0,
	197, 0,
	246, 0,
	-2, 808,
}

const sqlNprod = 940
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 18350

var sqlAct = [...]int{

	942, 1588, 1571, 785, 1609, 1572, 1549, 1455, 1573, 1587,
	844, 1515, 1294, 792, 247, 1488, 1352, 1266, 410, 1383,
	409, 1382, 852, 1400, 86, 1394, 828, 1087, 1240, 1477,
	470, 1126, 831, 709, 1181, 1180, 711, 1249, 402, 958,
	644, 1079, 475, 830, 962, 274, 762, 793, 771, 1267,
	252, 28, 1075, 930, 1000, 927, 740, 855, 744, 952,
	496, 13, 997, 1090, 520, 254, 39, 660, 480, 506,
	385, 666, 478, 246, 384, 18, 28, 10, 6, 823,
	344, 375, 345, 293, 531, 90, 853, 61, 59, 257,
	295, 39, 833, 291, 357, 40, 358, 83, 522, 356,
	28, 63, 518, 62, 64, 505, 1479, 664, 68, 955,
	41, 786, 458, 473, 547, 39, 368, 471, 271, 251,
	472, 271, 284, 280, 251, 1121, 271, 288, 290, 19,
	1122, 1119, 667, 498, 270, 244, 473, 277, 667, 32,
	471, 1048, 285, 472, 956, 296, 299, 498, 1585, 1579,
	243, 1476, 848, 1537, 669, 1327, 687, 688, 689, 1578,
	34, 321, 848, 322, 1570, 1565, 38, 1417, 848, 1273,
	45, 1059, 671, 300, 696, 957, 954, 1546, 1540, 790,
	1417, 848, 1534, 1525, 1500, 1476, 1476, 1417, 47, 1495,
	670, 24, 848, 35, 760, 1485, 684, 25, 1476, 1475,
	1460, 1459, 1476, 848, 848, 1440, 1077, 1420, 1119, 26,
	1119, 1416, 1362, 48, 1417, 848, 1270, 1061, 1231, 1119,
	43, 497, 1227, 848, 1198, 497, 44, 1199, 959, 1196,
	1195, 1125, 1119, 1119, 1194, 1123, 1119, 1119, 1119, 1153,
	1120, 1169, 1170, 1171, 42, 1119, 849, 759, 1153, 848,
	758, 1413, 503, 697, 497, 504, 501, 938, 355, 843,
	817, 668, 369, 639, 349, 638, 376, 376, 512, 511,
	316, 269, 49, 692, 499, 354, 476, 546, 333, 685,
	1586, 1166, 953, 374, 1584, 1153, 1541, 1484, 499, 1445,
	1166, 1441, 27, 1433, 36, 1432, 45, 1427, 669, 1426,
	1425, 45, 45, 1097, 1048, 30, 31, 469, 271, 1424,
	668, 1411, 1342, 33, 47, 465, 671, 1379, 1337, 47,
	47, 1336, 1335, 473, 348, 1277, 1516, 471, 1255, 1239,
	472, 37, 686, 1201, 670, 1200, 1188, 1179, 1152, 48,
	1149, 694, 1147, 467, 48, 48, 43, 1136, 1130, 1172,
	244, 43, 44, 271, 491, 1063, 1060, 44, 1012, 969,
	652, 654, 968, 497, 1167, 243, 935, 661, 717, 285,
	789, 1497, 368, 1167, 1296, 42, 42, 641, 367, 1536,
	700, 701, 702, 703, 704, 1517, 290, 1509, 290, 707,
	693, 1491, 681, 682, 683, 1482, 680, 677, 678, 679,
	672, 673, 674, 675, 676, 489, 45, 290, 640, 720,
	1167, 299, 299, 1474, 1452, 1438, 1153, 1168, 1405, 550,
	1390, 1264, 1254, 510, 47, 509, 1168, 542, 1378, 535,
	1237, 714, 631, 1236, 1234, 635, 1213, 636, 300, 300,
	1409, 1212, 634, 708, 1178, 936, 551, 1144, 1143, 48,
	1135, 1116, 1112, 650, 649, 648, 43, 244, 1153, 662,
	244, 244, 44, 1168, 932, 745, 748, 1026, 1025, 1007,
	967, 847, 656, 750, 757, 657, 658, 1163, 1164, 1165,
	60, 1162, 1159, 1160, 1161, 1154, 1155, 1156, 1157, 1158,
	1162, 1159, 1160, 1161, 1154, 1155, 1156, 1157, 1158, 738,
	753, 742, 743, 722, 737, 736, 735, 746, 734, 733,
	1026, 732, 749, 731, 765, 730, 1153, 729, 728, 727,
	404, 726, 725, 724, 715, 713, 802, 293, 42, 776,
	778, 1154, 1155, 1156, 1157, 1158, 751, 642, 460, 752,
	1496, 28, 275, 372, 672, 673, 674, 675, 676, 712,
	464, 466, 788, 1257, 28, 1256, 271, 550, 550, 784,
	1381, 255, 459, 796, 361, 61, 1049, 412, 800, 39,
	801, 290, 781, 669, 768, 1098, 340, 807, 290, 63,
	328, 62, 64, 1167, 551, 551, 754, 756, 1153, 296,
	299, 671, 804, 811, 810, 805, 803, 378, 89, 327,
	1395, 1139, 786, 1297, 963, 741, 264, 1045, 343, 670,
	1555, 89, 89, 1598, 1370, 89, 808, 300, 89, 89,
	89, 53, 1055, 89, 89, 89, 89, 718, 298, 232,
	1599, 1524, 550, 481, 233, 482, 1168, 1468, 241, 764,
	1467, 1167, 1225, 1205, 1204, 1224, 89, 89, 1134, 1133,
	481, 1132, 482, 1131, 1100, 919, 806, 772, 54, 551,
	783, 822, 1154, 1155, 1156, 1157, 1158, 782, 893, 376,
	850, 929, 238, 894, 895, 896, 897, 898, 899, 900,
	901, 902, 903, 904, 905, 906, 907, 908, 909, 910,
	911, 912, 913, 914, 1168, 892, 1408, 483, 1215, 929,
	1162, 1159, 1160, 1161, 1154, 1155, 1156, 1157, 1158, 775,
	1557, 417, 271, 1523, 483, 983, 56, 325, 1457, 858,
	826, 825, 492, 959, 764, 841, 842, 970, 827, 981,
	763, 991, 993, 998, 1001, 1002, 1003, 955, 271, 1567,
	753, 1606, 1040, 973, 487, 753, 498, 486, 1056, 943,
	857, 1518, 326, 669, 1568, 1011, 250, 963, 57, 476,
	324, 1161, 1154, 1155, 1156, 1157, 1158, 939, 944, 739,
	947, 671, 956, 55, 1153, 323, 1169, 1170, 1171, 239,
	934, 669, 1598, 774, 550, 992, 1412, 1041, 249, 670,
	1286, 1004, 1005, 1006, 1037, 1054, 242, 1575, 705, 671,
	1021, 1015, 1505, 957, 954, 89, 1222, 89, 341, 89,
	976, 551, 1216, 933, 364, 365, 1166, 670, 370, 1023,
	1142, 674, 675, 676, 89, 324, 1605, 1250, 251, 1016,
	51, 481, 1017, 482, 251, 1574, 1156, 1157, 1158, 773,
	89, 360, 346, 959, 661, 977, 1597, 1595, 484, 541,
	89, 89, 1102, 89, 1036, 1393, 959, 58, 342, 1044,
	290, 1064, 1051, 1576, 1047, 484, 462, 1050, 290, 1458,
	1043, 917, 52, 837, 336, 1062, 978, 975, 685, 1093,
	928, 1058, 1057, 89, 1172, 89, 1052, 499, 317, 1053,
	315, 761, 1619, 298, 298, 483, 248, 1577, 28, 1167,
	1604, 549, 89, 299, 89, 89, 685, 89, 1065, 1070,
	953, 1068, 359, 39, 1092, 813, 1099, 1086, 1207, 89,
	1104, 815, 1462, 1072, 1096, 1071, 1073, 271, 1461, 979,
	300, 686, 1450, 1612, 816, 360, 746, 89, 749, 1118,
	89, 1020, 814, 838, 647, 461, 743, 742, 1283, 1127,
	918, 643, 1168, 1282, 1366, 1550, 359, 637, 655, 686,
	414, 1436, 1124, 513, 1140, 1618, 1451, 1028, 1145, 1027,
	915, 50, 1103, 1101, 1323, 925, 1403, 1369, 1245, 1284,
	1358, 1244, 1353, 974, 1368, 323, 923, 1115, 283, 707,
	1351, 1117, 479, 249, 351, 998, 998, 998, 679, 672,
	673, 674, 675, 676, 1128, 1129, 1138, 1241, 1076, 966,
	1359, 1508, 1163, 1164, 1165, 1203, 1162, 1159, 1160, 1161,
	1154, 1155, 1156, 1157, 1158, 1365, 1210, 672, 673, 674,
	675, 676, 959, 965, 1437, 1435, 89, 1610, 916, 549,
	549, 1324, 921, 1177, 920, 1182, 484, 1325, 926, 89,
	476, 1228, 1263, 89, 1190, 1367, 89, 1185, 1186, 1187,
	89, 1148, 89, 89, 1202, 89, 1111, 809, 89, 89,
	89, 667, 298, 1209, 1611, 89, 89, 339, 1358, 337,
	334, 1354, 282, 1355, 1223, 1183, 517, 1109, 723, 1613,
	633, 1349, 1230, 1219, 1220, 1221, 1229, 1218, 1107, 1259,
	1243, 1260, 1206, 1246, 1235, 1233, 1357, 66, 1359, 1066,
	839, 836, 1265, 1360, 549, 515, 502, 922, 500, 796,
	1275, 1251, 1252, 1247, 924, 516, 1275, 540, 528, 539,
	495, 533, 488, 485, 1211, 1291, 1469, 1599, 362, 330,
	1292, 537, 1279, 1280, 1281, 69, 267, 764, 271, 1301,
	1471, 271, 1303, 779, 780, 764, 1105, 1226, 1479, 1276,
	1110, 777, 1356, 845, 669, 74, 77, 1520, 397, 669,
	70, 1271, 1285, 1287, 1288, 1543, 1298, 1242, 3, 1354,
	366, 1355, 671, 1332, 1333, 1538, 1302, 791, 71, 663,
	864, 1095, 1339, 1340, 1341, 65, 1300, 543, 363, 87,
	670, 89, 73, 1304, 1357, 670, 268, 331, 883, 89,
	89, 1360, 258, 258, 846, 1330, 273, 1331, 1616, 273,
	279, 273, 1617, 76, 273, 286, 273, 87, 276, 1106,
	1153, 1344, 882, 1328, 1334, 89, 1108, 669, 89, 1348,
	1078, 545, 1396, 1410, 1338, 318, 319, 87, 87, 231,
	1343, 1289, 1258, 1388, 544, 1387, 1388, 1197, 1387, 1392,
	1356, 1010, 818, 1391, 1414, 819, 549, 1398, 1399, 1418,
	1419, 1404, 1009, 1389, 1421, 1008, 1389, 960, 28, 1423,
	72, 1082, 1415, 1407, 234, 235, 236, 820, 1422, 1380,
	864, 1290, 821, 1373, 1428, 1085, 716, 1397, 1431, 237,
	1456, 67, 632, 335, 1429, 1080, 1566, 1141, 883, 1504,
	1083, 1487, 964, 721, 23, 271, 271, 75, 1385, 271,
	1363, 1364, 390, 1350, 1081, 1208, 832, 984, 1439, 89,
	89, 89, 882, 552, 538, 89, 527, 1434, 89, 413,
	338, 521, 530, 972, 89, 89, 89, 89, 89, 463,
	89, 89, 415, 861, 416, 862, 747, 89, 403, 89,
	859, 294, 1406, 794, 961, 89, 1084, 1137, 719, 1463,
	1446, 389, 1082, 395, 89, 394, 940, 89, 1449, 534,
	529, 863, 1447, 386, 320, 298, 1085, 1481, 81, 82,
	1042, 1377, 787, 840, 651, 1217, 1248, 1388, 240, 1387,
	1470, 1083, 89, 1492, 89, 89, 273, 89, 87, 1388,
	352, 1387, 1483, 1498, 1499, 1480, 89, 1389, 1478, 1150,
	1464, 89, 89, 1490, 89, 258, 1493, 1472, 990, 1389,
	982, 1454, 1465, 1466, 980, 971, 347, 1078, 1503, 474,
	795, 273, 373, 1512, 332, 851, 1094, 371, 659, 266,
	265, 273, 273, 1514, 493, 829, 1510, 1084, 329, 514,
	812, 490, 1519, 1554, 1486, 1513, 1214, 1501, 46, 17,
	16, 15, 14, 12, 271, 476, 11, 1069, 1082, 9,
	8, 863, 7, 1527, 273, 22, 273, 21, 1529, 20,
	5, 1531, 1085, 1535, 4, 1388, 1528, 1387, 2, 1,
	0, 0, 1080, 87, 1530, 273, 87, 1083, 87, 753,
	0, 0, 0, 1494, 0, 1389, 0, 0, 0, 1542,
	646, 1081, 0, 0, 0, 984, 984, 1545, 0, 1558,
	0, 0, 0, 0, 1402, 0, 885, 1533, 258, 0,
	0, 665, 1561, 0, 0, 1556, 0, 0, 1560, 0,
	0, 1564, 69, 1563, 0, 1388, 1581, 1387, 1562, 0,
	0, 0, 1559, 1084, 0, 1580, 0, 0, 1592, 1592,
	1583, 1582, 74, 0, 0, 1389, 0, 70, 1593, 1596,
	0, 1594, 0, 984, 984, 984, 1601, 1600, 0, 1553,
	1592, 1603, 0, 1602, 89, 71, 0, 1153, 1569, 1539,
	0, 0, 0, 1615, 1614, 0, 0, 0, 0, 73,
	1401, 0, 0, 0, 0, 884, 89, 1592, 1620, 0,
	0, 0, 0, 0, 1551, 1552, 0, 89, 796, 89,
	860, 89, 0, 864, 89, 0, 885, 273, 0, 0,
	0, 0, 0, 1113, 1114, 89, 0, 0, 89, 0,
	769, 883, 0, 0, 273, 0, 89, 273, 0, 89,
	0, 273, 0, 798, 799, 0, 273, 864, 0, 273,
	87, 87, 0, 0, 864, 882, 273, 665, 0, 0,
	0, 0, 0, 0, 0, 883, 0, 72, 391, 29,
	0, 0, 883, 0, 0, 0, 0, 0, 0, 984,
	984, 1174, 1175, 1176, 0, 864, 0, 0, 0, 882,
	89, 0, 0, 0, 29, 884, 882, 0, 0, 0,
	0, 0, 1167, 883, 75, 0, 0, 0, 245, 0,
	860, 253, 0, 0, 0, 0, 0, 0, 29, 0,
	0, 0, 0, 0, 0, 0, 0, 882, 0, 253,
	0, 0, 984, 984, 984, 984, 984, 984, 984, 984,
	984, 984, 984, 984, 984, 984, 984, 984, 984, 984,
	0, 984, 89, 89, 89, 1168, 0, 0, 0, 0,
	89, 89, 0, 0, 0, 864, 89, 0, 89, 0,
	89, 89, 89, 89, 0, 0, 0, 0, 0, 0,
	0, 0, 824, 883, 89, 0, 0, 0, 0, 0,
	273, 769, 89, 89, 0, 0, 89, 1261, 1262, 669,
	0, 0, 89, 89, 863, 0, 0, 882, 0, 0,
	0, 0, 0, 0, 0, 0, 273, 671, 0, 87,
	1159, 1160, 1161, 1154, 1155, 1156, 1157, 1158, 0, 0,
	0, 0, 0, 0, 0, 670, 0, 0, 863, 0,
	0, 684, 0, 0, 89, 863, 0, 0, 0, 0,
	1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314,
	1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 0, 1326,
	0, 864, 0, 0, 0, 0, 863, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 883,
	0, 0, 0, 0, 0, 0, 0, 89, 0, 89,
	0, 89, 0, 0, 0, 0, 0, 0, 89, 0,
	273, 1018, 1019, 882, 0, 0, 769, 0, 864, 1024,
	0, 0, 0, 245, 685, 1029, 1030, 1032, 1034, 1035,
	221, 1038, 1039, 0, 669, 0, 883, 984, 273, 864,
	1046, 89, 0, 89, 230, 0, 273, 0, 0, 0,
	0, 89, 671, 89, 0, 824, 863, 883, 824, 885,
	882, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	670, 0, 0, 0, 0, 223, 0, 686, 0, 0,
	0, 882, 0, 646, 0, 87, 273, 0, 1067, 0,
	0, 0, 0, 885, 222, 224, 0, 1074, 0, 0,
	885, 0, 1089, 1089, 0, 273, 0, 0, 0, 0,
	864, 0, 0, 984, 0, 89, 89, 0, 0, 89,
	0, 0, 0, 0, 0, 0, 225, 89, 883, 0,
	245, 885, 0, 245, 245, 0, 226, 0, 884, 89,
	0, 680, 677, 678, 679, 672, 673, 674, 675, 676,
	0, 0, 882, 860, 0, 1453, 0, 706, 0, 685,
	0, 710, 863, 0, 89, 89, 89, 0, 89, 0,
	0, 0, 884, 0, 0, 0, 0, 0, 1153, 884,
	1169, 1170, 1171, 0, 0, 89, 984, 860, 0, 0,
	1269, 0, 0, 0, 860, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 89, 0, 0, 0, 863,
	884, 885, 686, 0, 0, 0, 0, 0, 0, 0,
	1166, 0, 0, 0, 0, 860, 0, 0, 0, 0,
	863, 1507, 0, 0, 0, 0, 227, 0, 0, 228,
	0, 0, 0, 229, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 29,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 29, 0, 0, 665, 680, 677, 678, 679,
	672, 673, 674, 675, 676, 0, 0, 0, 1172, 0,
	884, 0, 0, 0, 0, 0, 0, 273, 0, 0,
	0, 863, 0, 1167, 1544, 860, 0, 0, 1232, 0,
	769, 0, 646, 0, 0, 1238, 0, 885, 0, 0,
	0, 0, 0, 0, 0, 0, 273, 0, 0, 273,
	0, 0, 669, 0, 687, 688, 689, 1253, 0, 0,
	1089, 0, 0, 0, 690, 0, 0, 0, 0, 0,
	671, 0, 696, 0, 0, 0, 1168, 0, 0, 0,
	0, 0, 0, 0, 885, 0, 0, 0, 670, 0,
	0, 0, 0, 0, 684, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 885, 0, 0, 0, 0,
	0, 1295, 0, 0, 0, 0, 884, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 860, 0, 0, 0, 0, 1163, 1164, 1165, 0,
	1162, 1159, 1160, 1161, 1154, 1155, 1156, 1157, 1158, 0,
	0, 697, 669, 0, 0, 0, 854, 0, 0, 0,
	0, 0, 695, 884, 0, 0, 0, 0, 0, 0,
	671, 692, 0, 1346, 1347, 769, 885, 685, 860, 0,
	0, 665, 665, 0, 884, 0, 931, 1371, 670, 1372,
	0, 273, 1374, 1375, 1376, 0, 0, 0, 691, 860,
	0, 0, 0, 1384, 0, 769, 1384, 0, 0, 0,
	0, 0, 0, 273, 273, 0, 0, 273, 0, 0,
	0, 0, 0, 665, 1089, 669, 0, 687, 688, 689,
	686, 0, 0, 0, 0, 0, 0, 690, 0, 694,
	0, 0, 0, 671, 0, 696, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 884, 0, 0, 0, 0,
	0, 670, 0, 0, 0, 1430, 0, 684, 0, 1153,
	860, 1169, 1170, 1171, 0, 0, 0, 685, 253, 0,
	0, 1268, 0, 0, 0, 0, 0, 0, 693, 0,
	681, 682, 683, 0, 680, 677, 678, 679, 672, 673,
	674, 675, 676, 0, 0, 0, 1013, 0, 0, 0,
	0, 1166, 0, 1014, 0, 0, 0, 0, 769, 0,
	1448, 0, 87, 0, 697, 0, 0, 0, 0, 273,
	686, 0, 0, 0, 0, 695, 29, 0, 0, 0,
	0, 0, 0, 0, 692, 1091, 0, 1384, 0, 0,
	685, 0, 0, 0, 0, 0, 0, 0, 0, 1384,
	0, 0, 273, 0, 1489, 0, 0, 0, 0, 0,
	0, 691, 273, 0, 665, 0, 0, 0, 0, 1172,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1167, 677, 678, 679, 672, 673,
	674, 675, 676, 686, 0, 0, 0, 931, 0, 0,
	0, 0, 694, 0, 0, 0, 0, 0, 0, 0,
	0, 706, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1521, 1522, 0, 0,
	1526, 0, 0, 0, 0, 1384, 0, 1168, 87, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	665, 693, 0, 681, 682, 683, 0, 680, 677, 678,
	679, 672, 673, 674, 675, 676, 0, 706, 0, 0,
	0, 0, 0, 0, 1442, 665, 665, 273, 0, 87,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1384, 1489, 1163, 1164, 1165,
	0, 1162, 1159, 1160, 1161, 1154, 1155, 1156, 1157, 1158,
	0, 0, 0, 0, 0, 0, 273, 0, 0, 297,
	528, 532, 0, 533, 523, 0, 0, 0, 0, 0,
	0, 91, 92, 0, 93, 0, 0, 0, 0, 0,
	0, 0, 0, 94, 95, 181, 182, 183, 96, 184,
	185, 0, 97, 186, 98, 0, 854, 187, 188, 854,
	189, 0, 302, 0, 99, 100, 101, 0, 102, 0,
	103, 0, 303, 104, 105, 0, 0, 0, 0, 0,
	0, 106, 107, 108, 109, 190, 110, 191, 192, 536,
	0, 111, 0, 0, 0, 112, 113, 0, 0, 0,
	0, 193, 114, 194, 525, 0, 115, 116, 195, 117,
	0, 0, 0, 304, 0, 118, 196, 0, 197, 0,
	119, 120, 198, 199, 0, 0, 0, 305, 121, 200,
	201, 202, 0, 203, 0, 306, 122, 307, 123, 0,
	0, 204, 308, 124, 309, 0, 259, 0, 0, 125,
	0, 126, 127, 128, 129, 260, 310, 130, 131, 132,
	0, 133, 0, 205, 134, 206, 135, 136, 0, 526,
	0, 0, 0, 137, 207, 311, 138, 312, 208, 139,
	140, 0, 209, 141, 210, 0, 142, 143, 144, 211,
	145, 146, 0, 147, 148, 149, 0, 150, 313, 151,
	152, 212, 153, 0, 154, 155, 29, 156, 261, 0,
	157, 158, 314, 159, 213, 160, 0, 161, 162, 164,
	214, 163, 215, 854, 854, 165, 166, 854, 263, 216,
	0, 0, 262, 217, 218, 524, 167, 168, 169, 170,
	0, 0, 171, 172, 0, 0, 173, 174, 175, 219,
	220, 0, 176, 0, 0, 0, 0, 177, 178, 179,
	180, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 534, 529, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1473, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 548, 0, 0, 0, 0, 0, 0,
	0, 0, 854, 0, 0, 91, 92, 553, 93, 554,
	555, 556, 557, 558, 559, 560, 561, 94, 95, 181,
	182, 183, 96, 184, 185, 562, 97, 186, 98, 563,
	564, 187, 188, 565, 189, 566, 302, 567, 99, 100,
	101, 0, 102, 568, 103, 569, 303, 104, 105, 570,
	571, 572, 573, 574, 575, 106, 107, 108, 109, 190,
	110, 191, 192, 576, 577, 111, 578, 579, 580, 112,
	113, 581, 582, 706, 583, 193, 114, 194, 584, 585,
	115, 116, 195, 117, 586, 587, 588, 304, 589, 118,
	196, 590, 197, 591, 119, 120, 198, 199, 592, 593,
	594, 305, 121, 200, 201, 202, 595, 203, 596, 306,
	122, 307, 123, 597, 598, 204, 308, 124, 309, 599,
	259, 600, 601, 125, 0, 126, 127, 128, 129, 260,
	310, 130, 131, 132, 602, 133, 603, 205, 134, 206,
	135, 136, 604, 605, 606, 607, 608, 137, 207, 311,
	138, 312, 208, 139, 140, 609, 209, 141, 210, 610,
	142, 143, 144, 211, 145, 146, 611, 147, 148, 149,
	612, 150, 313, 151, 152, 212, 153, 0, 154, 155,
	613, 156, 261, 614, 157, 158, 314, 159, 213, 160,
	615, 161, 162, 164, 214, 163, 215, 616, 617, 165,
	166, 618, 263, 216, 619, 620, 262, 217, 218, 621,
	167, 168, 169, 170, 622, 623, 171, 172, 624, 625,
	173, 174, 175, 219, 220, 626, 176, 627, 628, 629,
	630, 177, 178, 179, 180, 0, 548, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 755, 91, 92,
	553, 93, 554, 555, 556, 557, 558, 559, 560, 561,
	94, 95, 181, 182, 183, 96, 184, 185, 562, 97,
	186, 98, 563, 564, 187, 188, 565, 189, 566, 302,
	567, 99, 100, 101, 0, 102, 568, 103, 569, 303,
	104, 105, 570, 571, 572, 573, 574, 575, 106, 107,
	108, 109, 190, 110, 191, 192, 576, 577, 111, 578,
	579, 580, 112, 113, 581, 582, 0, 583, 193, 114,
	194, 584, 585, 115, 116, 195, 117, 586, 587, 588,
	304, 589, 118, 196, 590, 197, 591, 119, 120, 198,
	199, 592, 593, 594, 305, 121, 200, 201, 202, 595,
	203, 596, 306, 122, 307, 123, 597, 598, 204, 308,
	124, 309, 599, 259, 600, 601, 125, 0, 126, 127,
	128, 129, 260, 310, 130, 131, 132, 602, 133, 603,
	205, 134, 206, 135, 136, 604, 605, 606, 607, 608,
	137, 207, 311, 138, 312, 208, 139, 140, 609, 209,
	141, 210, 610, 142, 143, 144, 211, 145, 146, 611,
	147, 148, 149, 612, 150, 313, 151, 152, 212, 153,
	0, 154, 155, 613, 156, 261, 614, 157, 158, 314,
	159, 213, 160, 615, 161, 162, 164, 214, 163, 215,
	616, 617, 165, 166, 618, 263, 216, 619, 620, 262,
	217, 218, 621, 167, 168, 169, 170, 622, 623, 171,
	172, 624, 625, 173, 174, 175, 219, 220, 626, 176,
	627, 628, 629, 630, 177, 178, 179, 180, 411, 399,
	400, 401, 398, 387, 0, 0, 0, 0, 0, 0,
	91, 92, 949, 93, 0, 0, 0, 0, 393, 0,
	0, 0, 94, 95, 181, 440, 441, 96, 442, 443,
	0, 97, 186, 98, 408, 426, 444, 445, 0, 436,
	0, 419, 0, 99, 100, 101, 0, 102, 0, 103,
	0, 303, 104, 105, 0, 420, 422, 0, 421, 423,
	106, 107, 108, 109, 446, 110, 447, 448, 0, 0,
	111, 0, 950, 0, 439, 113, 0, 0, 0, 0,
	392, 114, 427, 406, 0, 115, 116, 449, 117, 0,
	0, 0, 304, 0, 118, 437, 0, 197, 0, 119,
	120, 433, 435, 0, 0, 0, 305, 121, 450, 451,
	452, 0, 418, 0, 306, 122, 307, 123, 0, 0,
	438, 308, 124, 309, 0, 259, 0, 0, 125, 0,
	126, 127, 128, 129, 260, 310, 130, 131, 132, 382,
	133, 407, 434, 134, 453, 135, 136, 0, 0, 0,
	0, 0, 137, 207, 311, 138, 312, 428, 139, 140,
	0, 429, 141, 210, 0, 142, 143, 144, 454, 145,
	146, 0, 147, 148, 149, 0, 150, 313, 151, 152,
	396, 153, 0, 154, 155, 0, 156, 261, 424, 157,
	158, 314, 159, 455, 160, 0, 161, 162, 164, 214,
	163, 430, 0, 0, 165, 166, 0, 263, 456, 0,
	0, 262, 431, 432, 405, 167, 168, 169, 170, 0,
	0, 171, 172, 425, 0, 173, 174, 175, 219, 457,
	948, 176, 0, 0, 0, 0, 177, 178, 179, 180,
	383, 0, 411, 399, 400, 401, 398, 387, 0, 0,
	379, 380, 951, 0, 91, 92, 381, 93, 0, 388,
	946, 0, 393, 0, 0, 0, 94, 95, 181, 440,
	441, 96, 442, 443, 0, 97, 186, 98, 408, 426,
	444, 445, 0, 436, 0, 419, 0, 99, 100, 101,
	0, 102, 0, 103, 0, 303, 104, 105, 0, 420,
	422, 0, 421, 423, 106, 107, 108, 109, 446, 110,
	447, 448, 477, 0, 111, 0, 0, 0, 439, 113,
	0, 0, 0, 0, 392, 114, 427, 406, 0, 115,
	116, 449, 117, 0, 0, 0, 304, 0, 118, 437,
	0, 197, 0, 119, 120, 433, 435, 0, 0, 0,
	305, 121, 450, 451, 452, 0, 418, 0, 306, 122,
	307, 123, 0, 0, 438, 308, 124, 309, 0, 259,
	0, 0, 125, 0, 126, 127, 128, 129, 260, 310,
	130, 131, 132, 382, 133, 407, 434, 134, 453, 135,
	136, 0, 0, 0, 0, 0, 137, 207, 311, 138,
	312, 428, 139, 140, 0, 429, 141, 210, 0, 142,
	143, 144, 454, 145, 146, 0, 147, 148, 149, 0,
	150, 313, 151, 152, 396, 153, 0, 154, 155, 45,
	156, 261, 424, 157, 158, 314, 159, 455, 160, 0,
	161, 162, 164, 214, 163, 430, 0, 47, 165, 166,
	0, 263, 456, 0, 0, 262, 431, 432, 405, 167,
	168, 169, 170, 0, 0, 171, 172, 425, 0, 173,
	174, 175, 301, 457, 0, 176, 0, 0, 0, 43,
	177, 178, 179, 180, 383, 44, 411, 399, 400, 401,
	398, 387, 0, 0, 379, 380, 0, 0, 91, 92,
	381, 93, 0, 388, 0, 0, 393, 0, 0, 0,
	94, 95, 181, 440, 441, 96, 442, 443, 0, 97,
	186, 98, 408, 426, 444, 445, 0, 436, 0, 419,
	0, 99, 100, 101, 0, 102, 0, 103, 0, 303,
	104, 105, 0, 420, 422, 0, 421, 423, 106, 107,
	108, 109, 446, 110, 447, 448, 0, 0, 111, 0,
	0, 0, 439, 113, 0, 0, 0, 0, 392, 114,
	427, 406, 0, 115, 116, 449, 117, 0, 0, 0,
	304, 0, 118, 437, 0, 197, 0, 119, 120, 433,
	435, 0, 0, 0, 305, 121, 450, 451, 452, 0,
	418, 0, 306, 122, 307, 123, 0, 0, 438, 308,
	124, 309, 0, 259, 0, 0, 125, 0, 126, 127,
	128, 129, 260, 310, 130, 131, 132, 382, 133, 407,
	434, 134, 453, 135, 136, 0, 0, 0, 0, 0,
	137, 207, 311, 138, 312, 428, 139, 140, 0, 429,
	141, 210, 0, 142, 143, 144, 454, 145, 146, 0,
	147, 148, 149, 0, 150, 313, 151, 152, 396, 153,
	0, 154, 155, 45, 156, 261, 424, 157, 158, 314,
	159, 455, 160, 0, 161, 162, 164, 214, 163, 430,
	0, 47, 165, 166, 0, 263, 456, 0, 0, 262,
	431, 432, 405, 167, 168, 169, 170, 0, 0, 171,
	172, 425, 0, 173, 174, 175, 301, 457, 0, 176,
	0, 0, 0, 43, 177, 178, 179, 180, 383, 44,
	411, 399, 400, 401, 398, 387, 0, 0, 379, 380,
	0, 0, 91, 92, 381, 93, 0, 388, 0, 0,
	393, 0, 0, 0, 94, 95, 181, 440, 441, 96,
	442, 443, 994, 97, 186, 98, 408, 426, 444, 445,
	0, 436, 0, 419, 0, 99, 100, 101, 0, 102,
	0, 103, 0, 303, 104, 105, 0, 420, 422, 0,
	421, 423, 106, 107, 108, 109, 446, 110, 447, 448,
	0, 0, 111, 0, 0, 0, 439, 113, 0, 0,
	0, 0, 392, 114, 427, 406, 0, 115, 116, 449,
	117, 0, 0, 999, 304, 0, 118, 437, 0, 197,
	0, 119, 120, 433, 435, 0, 0, 0, 305, 121,
	450, 451, 452, 0, 418, 0, 306, 122, 307, 123,
	0, 995, 438, 308, 124, 309, 0, 259, 0, 0,
	125, 0, 126, 127, 128, 129, 260, 310, 130, 131,
	132, 382, 133, 407, 434, 134, 453, 135, 136, 0,
	0, 0, 0, 0, 137, 207, 311, 138, 312, 428,
	139, 140, 0, 429, 141, 210, 0, 142, 143, 144,
	454, 145, 146, 0, 147, 148, 149, 0, 150, 313,
	151, 152, 396, 153, 0, 154, 155, 0, 156, 261,
	424, 157, 158, 314, 159, 455, 160, 0, 161, 162,
	164, 214, 163, 430, 0, 0, 165, 166, 0, 263,
	456, 0, 996, 262, 431, 432, 405, 167, 168, 169,
	170, 0, 0, 171, 172, 425, 0, 173, 174, 175,
	219, 457, 0, 176, 0, 0, 0, 0, 177, 178,
	179, 180, 383, 0, 411, 399, 400, 401, 398, 387,
	0, 0, 379, 380, 0, 0, 91, 92, 381, 93,
	0, 388, 0, 0, 393, 0, 0, 0, 94, 95,
	181, 440, 441, 96, 442, 443, 0, 97, 186, 98,
	408, 426, 444, 445, 0, 436, 0, 419, 0, 99,
	100, 101, 0, 102, 0, 103, 0, 303, 104, 105,
	0, 420, 422, 0, 421, 423, 106, 107, 108, 109,
	446, 110, 447, 448, 0, 0, 111, 0, 0, 0,
	439, 113, 0, 0, 0, 0, 392, 114, 427, 406,
	0, 115, 116, 449, 117, 0, 0, 0, 304, 0,
	118, 437, 0, 197, 0, 119, 120, 433, 435, 0,
	0, 0, 305, 121, 450, 451, 452, 0, 418, 0,
	306, 122, 307, 123, 0, 0, 438, 308, 124, 309,
	0, 259, 0, 0, 125, 0, 126, 127, 128, 129,
	260, 310, 130, 131, 132, 382, 133, 407, 434, 134,
	453, 135, 136, 0, 0, 0, 0, 0, 137, 207,
	311, 138, 312, 428, 139, 140, 0, 429, 141, 210,
	0, 142, 143, 144, 454, 145, 146, 0, 147, 148,
	149, 0, 150, 313, 151, 152, 396, 153, 0, 154,
	155, 0, 156, 261, 424, 157, 158, 314, 159, 455,
	160, 0, 161, 162, 164, 214, 163, 430, 0, 0,
	165, 166, 0, 263, 456, 0, 0, 262, 431, 432,
	405, 167, 168, 169, 170, 0, 0, 171, 172, 425,
	0, 173, 174, 175, 219, 457, 0, 176, 0, 0,
	0, 0, 177, 178, 179, 180, 383, 0, 411, 399,
	400, 401, 398, 387, 0, 0, 379, 380, 0, 0,
	91, 92, 381, 93, 0, 388, 1329, 0, 393, 0,
	0, 0, 94, 95, 181, 440, 441, 96, 442, 443,
	0, 97, 186, 98, 408, 426, 444, 445, 0, 436,
	0, 419, 0, 99, 100, 101, 0, 102, 0, 103,
	0, 303, 104, 105, 0, 420, 422, 0, 421, 423,
	106, 107, 108, 109, 446, 110, 447, 448, 0, 0,
	111, 0, 0, 0, 439, 113, 0, 0, 0, 0,
	392, 114, 427, 406, 0, 115, 116, 449, 117, 0,
	0, 0, 304, 0, 118, 437, 0, 197, 0, 119,
	120, 433, 435, 0, 0, 0, 305, 121, 450, 451,
	452, 0, 418, 0, 306, 122, 307, 123, 0, 0,
	438, 308, 124, 309, 0, 259, 0, 0, 125, 0,
	126, 127, 128, 129, 260, 310, 130, 131, 132, 382,
	133, 407, 434, 134, 453, 135, 136, 0, 0, 0,
	0, 0, 137, 207, 311, 138, 312, 428, 139, 140,
	0, 429, 141, 210, 0, 142, 143, 144, 454, 145,
	146, 0, 147, 148, 149, 0, 150, 313, 151, 152,
	396, 153, 0, 154, 155, 0, 156, 261, 424, 157,
	158, 314, 159, 455, 160, 0, 161, 162, 164, 214,
	163, 430, 0, 0, 165, 166, 0, 263, 456, 0,
	0, 262, 431, 432, 405, 167, 168, 169, 170, 0,
	0, 171, 172, 425, 0, 173, 174, 175, 219, 457,
	0, 176, 0, 0, 0, 0, 177, 178, 179, 180,
	383, 0, 411, 399, 400, 401, 398, 387, 0, 0,
	379, 380, 0, 0, 91, 92, 381, 93, 0, 388,
	1272, 0, 393, 0, 0, 0, 94, 95, 181, 440,
	441, 96, 442, 443, 0, 97, 186, 98, 408, 426,
	444, 445, 0, 436, 0, 419, 0, 99, 100, 101,
	0, 102, 0, 103, 0, 303, 104, 105, 0, 420,
	422, 0, 421, 423, 106, 107, 108, 109, 446, 110,
	447, 448, 0, 0, 111, 0, 0, 0, 439, 113,
	0, 0, 0, 0, 392, 114, 427, 406, 0, 115,
	116, 449, 117, 0, 0, 0, 304, 0, 118, 437,
	0, 197, 0, 119, 120, 433, 435, 0, 0, 0,
	305, 121, 450, 451, 452, 0, 418, 0, 306, 122,
	307, 123, 0, 0, 438, 308, 124, 309, 0, 259,
	0, 0, 125, 0, 126, 127, 128, 129, 260, 310,
	130, 131, 132, 382, 133, 407, 434, 134, 453, 135,
	136, 0, 0, 0, 0, 0, 137, 207, 311, 138,
	312, 428, 139, 140, 0, 429, 141, 210, 0, 142,
	143, 144, 454, 145, 146, 0, 147, 148, 149, 0,
	150, 313, 151, 152, 396, 153, 0, 154, 155, 0,
	156, 261, 424, 157, 158, 314, 159, 455, 160, 0,
	161, 162, 164, 214, 163, 430, 0, 0, 165, 166,
	0, 263, 456, 0, 0, 262, 431, 432, 405, 167,
	168, 169, 170, 0, 0, 171, 172, 425, 0, 173,
	174, 175, 219, 457, 0, 176, 0, 0, 0, 0,
	177, 178, 179, 180, 383, 0, 411, 399, 400, 401,
	398, 387, 0, 0, 379, 380, 0, 0, 91, 92,
	381, 93, 0, 388, 945, 0, 393, 0, 0, 0,
	94, 95, 181, 440, 441, 96, 442, 443, 0, 97,
	186, 98, 408, 426, 444, 445, 0, 436, 0, 419,
	0, 99, 100, 101, 0, 102, 0, 103, 0, 303,
	104, 105, 0, 420, 422, 0, 421, 423, 106, 107,
	108, 109, 446, 110, 447, 448, 0, 0, 111, 0,
	0, 0, 439, 113, 0, 0, 0, 0, 392, 114,
	427, 406, 0, 115, 116, 449, 117, 0, 0, 0,
	304, 0, 118, 437, 0, 197, 0, 119, 120, 433,
	435, 0, 0, 0, 305, 121, 450, 451, 452, 0,
	418, 0, 306, 122, 307, 123, 0, 0, 438, 308,
	124, 309, 0, 259, 0, 0, 125, 0, 126, 127,
	128, 129, 260, 310, 130, 131, 132, 382, 133, 407,
	434, 134, 453, 135, 136, 0, 0, 0, 0, 0,
	137, 207, 311, 138, 312, 428, 139, 140, 0, 429,
	141, 210, 0, 142, 143, 144, 454, 145, 146, 0,
	147, 148, 149, 0, 150, 313, 151, 152, 396, 153,
	0, 154, 155, 0, 156, 261, 424, 157, 158, 314,
	159, 455, 160, 0, 161, 162, 164, 214, 163, 430,
	0, 0, 165, 166, 0, 263, 456, 0, 0, 262,
	431, 432, 405, 167, 168, 169, 170, 0, 0, 171,
	172, 425, 0, 173, 174, 175, 219, 457, 0, 176,
	0, 0, 0, 0, 177, 178, 179, 180, 383, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 379, 380,
	0, 0, 0, 0, 381, 712, 941, 388, 411, 399,
	400, 401, 398, 387, 0, 0, 0, 0, 0, 0,
	91, 92, 0, 93, 0, 0, 0, 0, 393, 0,
	0, 0, 94, 95, 181, 440, 441, 96, 442, 443,
	0, 97, 186, 98, 408, 426, 444, 445, 0, 436,
	0, 419, 0, 99, 100, 101, 0, 102, 0, 103,
	0, 303, 104, 105, 0, 420, 422, 0, 421, 423,
	106, 107, 108, 109, 446, 110, 447, 448, 0, 0,
	111, 0, 0, 0, 439, 113, 0, 0, 0, 0,
	392, 114, 427, 406, 0, 115, 116, 449, 117, 0,
	0, 0, 304, 0, 118, 437, 0, 197, 0, 119,
	120, 433, 435, 0, 0, 0, 305, 121, 450, 451,
	452, 0, 418, 0, 306, 122, 307, 123, 0, 0,
	438, 308, 124, 309, 0, 259, 0, 0, 125, 0,
	126, 127, 128, 129, 260, 310, 130, 131, 132, 382,
	133, 407, 434, 134, 453, 135, 136, 0, 0, 0,
	0, 0, 137, 207, 311, 138, 312, 428, 139, 140,
	0, 429, 141, 210, 0, 142, 143, 144, 454, 145,
	146, 0, 147, 148, 149, 0, 150, 313, 151, 152,
	396, 153, 0, 154, 155, 0, 156, 261, 424, 157,
	158, 314, 159, 455, 160, 0, 161, 162, 164, 214,
	163, 430, 0, 0, 165, 166, 0, 263, 456, 0,
	0, 262, 431, 432, 405, 167, 168, 169, 170, 0,
	0, 171, 172, 425, 0, 173, 174, 175, 219, 457,
	1278, 176, 0, 0, 0, 0, 177, 178, 179, 180,
	383, 0, 411, 399, 400, 401, 398, 387, 0, 0,
	379, 380, 0, 0, 91, 92, 381, 93, 0, 388,
	0, 0, 393, 0, 0, 0, 94, 95, 181, 440,
	441, 96, 442, 443, 0, 97, 186, 98, 408, 426,
	444, 445, 0, 436, 0, 419, 0, 99, 100, 101,
	0, 102, 0, 103, 0, 303, 104, 105, 0, 420,
	422, 0, 421, 423, 106, 107, 108, 109, 446, 110,
	447, 448, 477, 0, 111, 0, 0, 0, 439, 113,
	0, 0, 0, 0, 392, 114, 427, 406, 0, 115,
	116, 449, 117, 0, 0, 0, 304, 0, 118, 437,
	0, 197, 0, 119, 120, 433, 435, 0, 0, 0,
	305, 121, 450, 451, 452, 0, 418, 0, 306, 122,
	307, 123, 0, 0, 438, 308, 124, 309, 0, 259,
	0, 0, 125, 0, 126, 127, 128, 129, 260, 310,
	130, 131, 132, 382, 133, 407, 434, 134, 453, 135,
	136, 0, 0, 0, 0, 0, 137, 207, 311, 138,
	312, 428, 139, 140, 0, 429, 141, 210, 0, 142,
	143, 144, 454, 145, 146, 0, 147, 148, 149, 0,
	150, 313, 151, 152, 396, 153, 0, 154, 155, 0,
	156, 261, 424, 157, 158, 314, 159, 455, 160, 0,
	161, 162, 164, 214, 163, 430, 0, 0, 165, 166,
	0, 263, 456, 0, 0, 262, 431, 432, 405, 167,
	168, 169, 170, 0, 0, 171, 172, 425, 0, 173,
	174, 175, 219, 457, 0, 176, 0, 0, 0, 0,
	177, 178, 179, 180, 383, 0, 411, 399, 400, 401,
	398, 387, 0, 0, 379, 380, 0, 0, 91, 92,
	381, 93, 0, 388, 0, 0, 393, 0, 0, 0,
	94, 95, 181, 440, 441, 96, 442, 443, 0, 97,
	186, 98, 408, 426, 444, 445, 0, 436, 0, 419,
	0, 99, 100, 101, 0, 102, 0, 103, 0, 303,
	104, 105, 0, 420, 422, 0, 421, 423, 106, 107,
	108, 109, 446, 110, 447, 448, 0, 0, 111, 0,
	0, 0, 439, 113, 0, 0, 0, 0, 392, 114,
	427, 406, 0, 115, 116, 449, 117, 0, 0, 999,
	304, 0, 118, 437, 0, 197, 0, 119, 120, 433,
	435, 0, 0, 0, 305, 121, 450, 451, 452, 0,
	418, 0, 306, 122, 307, 123, 0, 0, 438, 308,
	124, 309, 0, 259, 0, 0, 125, 0, 126, 127,
	128, 129, 260, 310, 130, 131, 132, 382, 133, 407,
	434, 134, 453, 135, 136, 0, 0, 0, 0, 0,
	137, 207, 311, 138, 312, 428, 139, 140, 0, 429,
	141, 210, 0, 142, 143, 144, 454, 145, 146, 0,
	147, 148, 149, 0, 150, 313, 151, 152, 396, 153,
	0, 154, 155, 0, 156, 261, 424, 157, 158, 314,
	159, 455, 160, 0, 161, 162, 164, 214, 163, 430,
	0, 0, 165, 166, 0, 263, 456, 0, 0, 262,
	431, 432, 405, 167, 168, 169, 170, 0, 0, 171,
	172, 425, 0, 173, 174, 175, 219, 457, 0, 176,
	0, 0, 0, 0, 177, 178, 179, 180, 383, 0,
	411, 399, 400, 401, 398, 387, 0, 0, 379, 380,
	0, 0, 91, 92, 381, 93, 0, 388, 0, 0,
	393, 0, 0, 0, 94, 95, 181, 440, 441, 96,
	442, 443, 0, 97, 186, 98, 408, 426, 444, 445,
	0, 436, 0, 419, 0, 99, 100, 101, 0, 102,
	0, 103, 0, 303, 104, 105, 0, 420, 422, 0,
	421, 423, 106, 107, 108, 109, 446, 110, 447, 448,
	0, 0, 111, 0, 0, 0, 439, 113, 0, 0,
	0, 0, 392, 114, 427, 406, 0, 115, 116, 449,
	117, 0, 0, 0, 304, 0, 118, 437, 0, 197,
	0, 119, 120, 433, 435, 0, 0, 0, 305, 121,
	450, 451, 452, 0, 418, 0, 306, 122, 307, 123,
	0, 0, 438, 308, 124, 309, 0, 259, 0, 0,
	125, 0, 126, 127, 128, 129, 260, 310, 130, 131,
	132, 382, 133, 407, 434, 134, 453, 135, 136, 0,
	0, 0, 0, 0, 137, 207, 311, 138, 312, 428,
	139, 140, 0, 429, 141, 210, 0, 142, 143, 144,
	454, 145, 146, 0, 147, 148, 149, 0, 150, 313,
	151, 152, 396, 153, 0, 154, 155, 0, 156, 261,
	424, 157, 158, 314, 159, 455, 160, 0, 161, 162,
	164, 214, 163, 430, 0, 0, 165, 166, 0, 263,
	456, 0, 0, 262, 431, 432, 405, 167, 168, 169,
	170, 0, 0, 171, 172, 425, 0, 173, 174, 175,
	219, 457, 0, 176, 0, 0, 0, 0, 177, 178,
	179, 180, 383, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 379, 380, 377, 0, 0, 0, 381, 0,
	0, 388, 411, 399, 400, 401, 398, 387, 0, 0,
	0, 0, 0, 0, 91, 92, 653, 93, 0, 0,
	0, 0, 393, 0, 0, 0, 94, 95, 181, 440,
	441, 96, 442, 443, 0, 97, 186, 98, 408, 426,
	444, 445, 0, 436, 0, 419, 0, 99, 100, 101,
	0, 102, 0, 103, 0, 303, 104, 105, 0, 420,
	422, 0, 421, 423, 106, 107, 108, 109, 446, 110,
	447, 448, 0, 0, 111, 0, 0, 0, 439, 113,
	0, 0, 0, 0, 392, 114, 427, 406, 0, 115,
	116, 449, 117, 0, 0, 0, 304, 0, 118, 437,
	0, 197, 0, 119, 120, 433, 435, 0, 0, 0,
	305, 121, 450, 451, 452, 0, 418, 0, 306, 122,
	307, 123, 0, 0, 438, 308, 124, 309, 0, 259,
	0, 0, 125, 0, 126, 127, 128, 129, 260, 310,
	130, 131, 132, 382, 133, 407, 434, 134, 453, 135,
	136, 0, 0, 0, 0, 0, 137, 207, 311, 138,
	312, 428, 139, 140, 0, 429, 141, 210, 0, 142,
	143, 144, 454, 145, 146, 0, 147, 148, 149, 0,
	150, 313, 151, 152, 396, 153, 0, 154, 155, 0,
	156, 261, 424, 157, 158, 314, 159, 455, 160, 0,
	161, 162, 164, 214, 163, 430, 0, 0, 165, 166,
	0, 263, 456, 0, 0, 262, 431, 432, 405, 167,
	168, 169, 170, 0, 0, 171, 172, 425, 0, 173,
	174, 175, 219, 457, 0, 176, 0, 0, 0, 0,
	177, 178, 179, 180, 383, 0, 411, 399, 400, 401,
	398, 387, 0, 0, 379, 380, 0, 0, 91, 92,
	381, 93, 0, 388, 0, 0, 393, 0, 0, 0,
	94, 95, 181, 440, 441, 96, 442, 443, 0, 97,
	186, 98, 408, 426, 444, 445, 0, 436, 0, 419,
	0, 99, 100, 101, 0, 102, 0, 103, 0, 303,
	104, 1591, 0, 420, 422, 0, 421, 423, 106, 107,
	108, 109, 446, 110, 447, 448, 0, 0, 111, 0,
	0, 0, 439, 113, 0, 0, 0, 0, 392, 114,
	427, 406, 0, 115, 116, 449, 117, 0, 0, 0,
	304, 0, 118, 437, 0, 197, 0, 119, 120, 433,
	435, 0, 0, 0, 305, 121, 450, 451, 452, 0,
	418, 0, 306, 122, 307, 123, 0, 0, 438, 308,
	124, 309, 0, 259, 0, 0, 125, 0, 126, 127,
	128, 129, 260, 310, 130, 131, 132, 382, 133, 407,
	434, 134, 453, 135, 136, 0, 0, 0, 0, 0,
	137, 207, 311, 138, 312, 428, 139, 140, 0, 429,
	141, 210, 0, 142, 143, 144, 454, 145, 146, 0,
	147, 148, 149, 0, 150, 313, 151, 152, 396, 153,
	0, 154, 155, 0, 156, 261, 424, 157, 158, 314,
	159, 455, 160, 0, 161, 162, 164, 214, 163, 430,
	0, 0, 165, 166, 0, 263, 456, 0, 0, 262,
	431, 432, 405, 167, 168, 1590, 170, 0, 0, 171,
	172, 425, 0, 173, 174, 175, 219, 457, 0, 176,
	0, 0, 0, 0, 177, 178, 179, 180, 383, 0,
	411, 399, 400, 401, 398, 387, 0, 0, 379, 380,
	0, 0, 91, 92, 381, 93, 0, 388, 0, 0,
	393, 0, 0, 0, 94, 95, 1589, 440, 441, 96,
	442, 443, 0, 97, 186, 98, 408, 426, 444, 445,
	0, 436, 0, 419, 0, 99, 100, 101, 0, 102,
	0, 103, 0, 303, 104, 1591, 0, 420, 422, 0,
	421, 423, 106, 107, 108, 109, 446, 110, 447, 448,
	0, 0, 111, 0, 0, 0, 439, 113, 0, 0,
	0, 0, 392, 114, 427, 406, 0, 115, 116, 449,
	117, 0, 0, 0, 304, 0, 118, 437, 0, 197,
	0, 119, 120, 433, 435, 0, 0, 0, 305, 121,
	450, 451, 452, 0, 418, 0, 306, 122, 307, 123,
	0, 0, 438, 308, 124, 309, 0, 259, 0, 0,
	125, 0, 126, 127, 128, 129, 260, 310, 130, 131,
	132, 382, 133, 407, 434, 134, 453, 135, 136, 0,
	0, 0, 0, 0, 137, 207, 311, 138, 312, 428,
	139, 140, 0, 429, 141, 210, 0, 142, 143, 144,
	454, 145, 146, 0, 147, 148, 149, 0, 150, 313,
	151, 152, 396, 153, 0, 154, 155, 0, 156, 261,
	424, 157, 158, 314, 159, 455, 160, 0, 161, 162,
	164, 214, 163, 430, 0, 0, 165, 166, 0, 263,
	456, 0, 0, 262, 431, 432, 405, 167, 168, 1590,
	170, 0, 0, 171, 172, 425, 0, 173, 174, 175,
	219, 457, 0, 176, 0, 0, 0, 0, 177, 178,
	179, 180, 383, 0, 411, 399, 400, 401, 398, 387,
	0, 0, 379, 380, 0, 0, 91, 92, 381, 93,
	0, 388, 0, 0, 393, 0, 0, 0, 94, 95,
	181, 440, 441, 96, 442, 443, 0, 97, 186, 98,
	408, 426, 444, 445, 0, 436, 0, 419, 0, 99,
	100, 101, 0, 102, 0, 103, 0, 303, 104, 105,
	0, 420, 422, 0, 421, 423, 106, 107, 108, 109,
	446, 110, 447, 448, 0, 0, 111, 0, 0, 0,
	439, 113, 0, 0, 0, 0, 392, 114, 427, 406,
	0, 115, 116, 449, 117, 0, 0, 0, 304, 0,
	118, 437, 0, 197, 0, 119, 120, 433, 435, 0,
	0, 0, 305, 121, 450, 451, 452, 0, 418, 0,
	306, 122, 307, 123, 0, 0, 438, 308, 124, 309,
	0, 259, 0, 0, 125, 0, 126, 127, 128, 129,
	260, 310, 130, 131, 132, 382, 133, 407, 434, 134,
	453, 135, 136, 0, 0, 0, 0, 0, 137, 207,
	311, 138, 312, 428, 139, 140, 0, 429, 141, 210,
	0, 142, 143, 144, 454, 145, 146, 0, 147, 148,
	149, 0, 150, 313, 151, 152, 396, 153, 0, 154,
	155, 0, 156, 261, 424, 157, 158, 314, 159, 455,
	160, 0, 161, 162, 164, 214, 163, 430, 0, 0,
	165, 166, 0, 263, 456, 0, 0, 262, 431, 432,
	405, 167, 168, 169, 170, 0, 0, 171, 172, 425,
	0, 173, 174, 175, 219, 457, 0, 176, 0, 0,
	0, 0, 177, 178, 179, 180, 383, 0, 411, 399,
	400, 401, 398, 387, 0, 0, 379, 380, 0, 0,
	91, 92, 381, 93, 0, 388, 0, 0, 393, 0,
	0, 0, 94, 95, 181, 440, 441, 96, 442, 443,
	0, 97, 186, 98, 408, 426, 444, 445, 0, 436,
	0, 419, 0, 99, 100, 101, 0, 102, 0, 103,
	0, 303, 104, 105, 0, 420, 422, 0, 421, 423,
	106, 107, 108, 109, 446, 110, 447, 448, 0, 0,
	111, 0, 0, 0, 439, 113, 0, 0, 0, 0,
	392, 114, 427, 406, 0, 115, 116, 449, 117, 0,
	0, 0, 304, 0, 118, 437, 0, 197, 0, 119,
	120, 433, 435, 0, 0, 0, 305, 121, 450, 451,
	452, 0, 418, 0, 306, 122, 307, 123, 0, 0,
	438, 308, 124, 309, 0, 259, 0, 0, 125, 0,
	126, 127, 128, 129, 260, 310, 130, 131, 132, 0,
	133, 407, 434, 134, 453, 135, 136, 0, 0, 0,
	0, 0, 137, 207, 311, 138, 312, 428, 139, 140,
	0, 429, 141, 210, 0, 142, 143, 144, 454, 145,
	146, 0, 147, 148, 149, 0, 150, 313, 151, 152,
	989, 153, 0, 154, 155, 0, 156, 261, 424, 157,
	158, 314, 159, 455, 160, 0, 161, 162, 164, 214,
	163, 430, 0, 0, 165, 166, 0, 263, 456, 0,
	0, 262, 431, 432, 405, 167, 168, 169, 170, 0,
	0, 171, 172, 425, 0, 173, 174, 175, 219, 457,
	0, 176, 0, 0, 0, 0, 177, 178, 179, 180,
	411, 399, 400, 401, 398, 387, 0, 0, 0, 0,
	985, 986, 91, 92, 0, 93, 987, 0, 0, 988,
	393, 0, 0, 0, 94, 95, 0, 440, 441, 96,
	442, 443, 0, 97, 186, 98, 408, 426, 444, 445,
	0, 436, 0, 419, 0, 99, 100, 101, 0, 102,
	0, 103, 0, 303, 104, 1591, 0, 420, 422, 0,
	421, 423, 106, 107, 108, 109, 446, 110, 447, 448,
	0, 0, 111, 0, 0, 0, 439, 113, 0, 0,
	0, 0, 392, 114, 427, 406, 0, 115, 116, 449,
	117, 0, 0, 0, 304, 0, 118, 437, 0, 197,
	0, 119, 120, 433, 435, 0, 0, 0, 305, 121,
	450, 451, 452, 0, 418, 0, 0, 122, 307, 123,
	0, 0, 438, 308, 124, 0, 0, 259, 0, 0,
	125, 0, 126, 127, 128, 129, 260, 310, 130, 131,
	132, 382, 133, 407, 434, 134, 453, 135, 136, 0,
	0, 0, 0, 0, 137, 207, 311, 138, 312, 428,
	139, 140, 0, 429, 141, 210, 0, 142, 143, 144,
	454, 145, 146, 0, 147, 148, 149, 0, 150, 313,
	151, 152, 396, 153, 0, 154, 155, 0, 156, 261,
	424, 157, 158, 0, 159, 455, 160, 0, 161, 162,
	164, 214, 163, 430, 0, 0, 165, 166, 0, 263,
	456, 0, 0, 262, 431, 432, 405, 167, 168, 1590,
	170, 0, 0, 171, 172, 425, 0, 173, 174, 175,
	219, 457, 0, 176, 0, 0, 0, 0, 177, 178,
	179, 180, 411, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 379, 380, 91, 92, 0, 93, 381, 0,
	0, 388, 0, 0, 0, 0, 94, 95, 181, 182,
	183, 96, 184, 185, 0, 97, 186, 98, 0, 426,
	187, 188, 0, 436, 0, 419, 0, 99, 100, 101,
	0, 102, 0, 103, 0, 303, 104, 105, 0, 420,
	422, 0, 421, 423, 106, 107, 108, 109, 190, 110,
	191, 192, 0, 0, 111, 0, 0, 0, 112, 113,
	0, 0, 0, 0, 193, 114, 427, 0, 0, 115,
	116, 195, 117, 0, 0, 0, 304, 0, 118, 437,
	0, 197, 0, 119, 120, 433, 435, 0, 0, 0,
	305, 121, 200, 201, 202, 0, 203, 0, 306, 122,
	307, 123, 0, 0, 438, 308, 124, 309, 0, 259,
	0, 0, 125, 0, 126, 127, 128, 129, 260, 310,
	130, 131, 132, 0, 133, 0, 434, 134, 206, 135,
	136, 0, 0, 0, 0, 0, 137, 207, 311, 138,
	312, 428, 139, 140, 0, 429, 141, 210, 0, 142,
	143, 144, 211, 145, 146, 0, 147, 148, 149, 0,
	150, 313, 151, 152, 212, 153, 0, 154, 155, 0,
	156, 261, 424, 157, 158, 314, 159, 213, 160, 0,
	161, 162, 164, 214, 163, 430, 0, 0, 165, 166,
	0, 263, 216, 0, 0, 262, 431, 432, 0, 167,
	168, 169, 170, 0, 0, 171, 172, 425, 0, 173,
	174, 175, 219, 220, 0, 176, 0, 0, 0, 0,
	177, 178, 179, 180, 297, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 91, 92, 0, 93,
	0, 0, 0, 1386, 0, 0, 0, 0, 94, 95,
	181, 182, 183, 96, 184, 185, 0, 97, 186, 98,
	0, 0, 187, 188, 0, 189, 0, 302, 0, 99,
	100, 101, 0, 102, 0, 103, 0, 303, 104, 105,
	0, 0, 0, 0, 0, 0, 106, 107, 108, 109,
	190, 110, 191, 192, 0, 0, 111, 0, 0, 0,
	112, 113, 0, 0, 0, 0, 193, 114, 194, 0,
	0, 115, 116, 195, 117, 0, 0, 0, 304, 0,
	118, 196, 0, 197, 0, 119, 120, 198, 199, 0,
	0, 0, 305, 121, 200, 201, 202, 0, 203, 0,
	306, 122, 307, 123, 0, 0, 204, 308, 124, 309,
	0, 259, 0, 0, 125, 0, 126, 127, 128, 129,
	260, 310, 130, 131, 132, 0, 133, 0, 205, 134,
	206, 135, 136, 0, 0, 0, 0, 0, 137, 207,
	311, 138, 312, 208, 139, 140, 0, 209, 141, 210,
	0, 142, 143, 144, 211, 145, 146, 0, 147, 148,
	149, 0, 150, 313, 151, 152, 212, 153, 0, 154,
	155, 45, 156, 261, 0, 157, 158, 314, 159, 213,
	160, 0, 161, 162, 164, 214, 163, 215, 0, 47,
	165, 166, 0, 263, 216, 0, 0, 262, 217, 218,
	0, 167, 168, 169, 170, 0, 0, 171, 172, 0,
	0, 173, 174, 175, 301, 220, 0, 176, 0, 0,
	0, 43, 177, 178, 179, 180, 0, 44, 297, 528,
	532, 0, 533, 523, 0, 0, 0, 0, 0, 0,
	91, 92, 0, 93, 0, 42, 0, 0, 0, 0,
	0, 0, 94, 95, 181, 182, 183, 96, 184, 185,
	0, 97, 186, 98, 0, 0, 187, 188, 0, 189,
	0, 302, 0, 99, 100, 101, 0, 102, 0, 103,
	0, 303, 104, 105, 0, 0, 0, 0, 0, 0,
	106, 107, 108, 109, 190, 110, 191, 192, 519, 0,
	111, 0, 0, 0, 112, 113, 0, 0, 0, 0,
	193, 114, 194, 525, 0, 115, 116, 195, 117, 0,
	0, 0, 304, 0, 118, 196, 0, 197, 0, 119,
	120, 198, 199, 0, 0, 0, 305, 121, 200, 201,
	202, 0, 203, 0, 306, 122, 307, 123, 0, 0,
	204, 308, 124, 309, 0, 259, 0, 0, 125, 0,
	126, 127, 128, 129, 260, 310, 130, 131, 132, 0,
	133, 0, 205, 134, 206, 135, 136, 0, 526, 0,
	0, 0, 137, 207, 311, 138, 312, 208, 139, 140,
	0, 209, 141, 210, 0, 142, 143, 144, 211, 145,
	146, 0, 147, 148, 149, 0, 150, 313, 151, 152,
	212, 153, 0, 154, 155, 0, 156, 261, 0, 157,
	158, 314, 159, 213, 160, 0, 161, 162, 164, 214,
	163, 215, 0, 0, 165, 166, 0, 263, 216, 0,
	0, 262, 217, 218, 524, 167, 168, 169, 170, 0,
	0, 171, 172, 0, 0, 173, 174, 175, 219, 220,
	0, 176, 0, 0, 0, 0, 177, 178, 179, 180,
	297, 528, 532, 0, 533, 523, 0, 0, 0, 0,
	534, 529, 91, 92, 0, 93, 0, 0, 0, 0,
	0, 0, 0, 0, 94, 95, 181, 182, 183, 96,
	184, 185, 0, 97, 186, 98, 0, 0, 187, 188,
	0, 189, 0, 302, 0, 99, 100, 101, 0, 102,
	0, 103, 0, 303, 104, 105, 0, 0, 0, 0,
	0, 0, 106, 107, 108, 109, 190, 110, 191, 192,
	0, 0, 111, 0, 0, 0, 112, 113, 0, 0,
	0, 0, 193, 114, 194, 525, 0, 115, 116, 195,
	117, 0, 0, 0, 304, 0, 118, 196, 0, 197,
	0, 119, 120, 198, 199, 0, 0, 0, 305, 121,
	200, 201, 202, 0, 203, 0, 306, 122, 307, 123,
	0, 0, 204, 308, 124, 309, 0, 259, 0, 0,
	125, 0, 126, 127, 128, 129, 260, 310, 130, 131,
	132, 0, 133, 0, 205, 134, 206, 135, 136, 0,
	526, 0, 0, 0, 137, 207, 311, 138, 312, 208,
	139, 140, 0, 209, 141, 210, 0, 142, 143, 144,
	211, 145, 146, 0, 147, 148, 149, 0, 150, 313,
	151, 152, 212, 153, 0, 154, 155, 0, 156, 261,
	0, 157, 158, 314, 159, 213, 160, 0, 161, 162,
	164, 214, 163, 215, 0, 0, 165, 166, 0, 263,
	216, 0, 0, 262, 217, 218, 524, 167, 168, 169,
	170, 0, 0, 171, 172, 0, 0, 173, 174, 175,
	219, 220, 88, 176, 0, 0, 0, 0, 177, 178,
	179, 180, 0, 0, 91, 92, 0, 93, 0, 0,
	0, 0, 534, 529, 0, 0, 94, 95, 181, 182,
	183, 96, 184, 185, 0, 97, 186, 98, 0, 0,
	187, 188, 0, 189, 0, 0, 0, 99, 100, 101,
	0, 102, 0, 103, 0, 0, 104, 105, 0, 0,
	0, 0, 0, 0, 106, 107, 108, 109, 190, 110,
	191, 192, 0, 0, 111, 0, 0, 0, 112, 113,
	0, 0, 0, 0, 193, 114, 194, 0, 0, 115,
	116, 195, 117, 0, 0, 0, 0, 0, 118, 196,
	0, 197, 0, 119, 120, 198, 199, 0, 0, 0,
	0, 121, 200, 201, 202, 0, 203, 0, 0, 122,
	0, 123, 0, 0, 204, 0, 124, 0, 0, 259,
	0, 0, 125, 0, 126, 127, 128, 129, 260, 0,
	130, 131, 132, 0, 133, 0, 205, 134, 206, 135,
	136, 0, 0, 272, 0, 0, 137, 207, 0, 138,
	0, 208, 139, 140, 0, 209, 141, 210, 0, 142,
	143, 144, 211, 145, 146, 0, 147, 148, 149, 0,
	150, 0, 151, 152, 212, 153, 0, 154, 155, 45,
	156, 261, 0, 157, 158, 0, 159, 213, 160, 0,
	161, 162, 164, 214, 163, 215, 0, 47, 165, 166,
	0, 263, 216, 0, 0, 262, 217, 218, 0, 167,
	168, 169, 170, 0, 0, 171, 172, 0, 0, 173,
	174, 175, 301, 220, 0, 176, 0, 0, 0, 43,
	177, 178, 179, 180, 88, 44, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 91, 92, 0, 93,
	0, 0, 0, 856, 0, 0, 0, 0, 94, 95,
	181, 182, 183, 96, 184, 185, 0, 97, 186, 98,
	0, 0, 187, 188, 0, 189, 0, 0, 0, 99,
	100, 101, 0, 102, 0, 103, 0, 0, 104, 105,
	0, 0, 0, 0, 0, 0, 106, 107, 108, 109,
	190, 110, 191, 192, 0, 0, 111, 0, 0, 0,
	112, 113, 0, 0, 0, 0, 193, 114, 194, 0,
	0, 115, 116, 195, 117, 0, 0, 0, 0, 0,
	118, 196, 0, 197, 0, 119, 120, 198, 199, 0,
	0, 0, 0, 121, 200, 201, 202, 0, 203, 0,
	0, 122, 0, 123, 0, 0, 204, 0, 124, 0,
	0, 259, 0, 0, 125, 0, 126, 127, 128, 129,
	260, 0, 130, 131, 132, 0, 133, 0, 205, 134,
	206, 135, 136, 0, 0, 0, 0, 0, 137, 207,
	0, 138, 0, 208, 139, 140, 0, 209, 141, 210,
	0, 142, 143, 144, 211, 145, 146, 0, 147, 148,
	149, 0, 150, 0, 151, 152, 212, 153, 0, 154,
	155, 45, 156, 261, 0, 157, 158, 0, 159, 213,
	160, 0, 161, 162, 164, 214, 163, 215, 0, 47,
	165, 166, 0, 263, 216, 0, 0, 262, 217, 218,
	0, 167, 168, 169, 170, 0, 0, 171, 172, 0,
	0, 173, 174, 175, 301, 220, 0, 176, 0, 0,
	0, 43, 177, 178, 179, 180, 88, 44, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 91, 92,
	0, 93, 0, 0, 0, 42, 0, 1088, 0, 0,
	94, 95, 181, 182, 183, 96, 184, 185, 0, 97,
	186, 98, 0, 0, 187, 188, 0, 189, 0, 0,
	0, 99, 100, 101, 0, 102, 0, 103, 0, 0,
	104, 105, 0, 0, 0, 0, 0, 0, 106, 107,
	108, 109, 190, 110, 191, 192, 0, 0, 111, 0,
	0, 0, 112, 113, 0, 0, 0, 0, 193, 114,
	194, 0, 0, 115, 116, 195, 117, 0, 0, 0,
	0, 0, 118, 196, 0, 197, 0, 119, 120, 198,
	199, 0, 0, 0, 0, 121, 200, 201, 202, 0,
	203, 0, 0, 122, 0, 123, 0, 0, 204, 0,
	124, 0, 0, 259, 0, 0, 125, 0, 126, 127,
	128, 129, 260, 0, 130, 131, 132, 0, 133, 0,
	205, 134, 206, 135, 136, 0, 0, 0, 0, 0,
	137, 207, 0, 138, 0, 208, 139, 140, 0, 209,
	141, 210, 0, 142, 143, 144, 211, 145, 146, 0,
	147, 148, 149, 0, 150, 0, 151, 152, 212, 153,
	0, 154, 155, 0, 156, 261, 0, 157, 158, 0,
	159, 213, 160, 0, 161, 162, 164, 214, 163, 215,
	0, 0, 165, 166, 0, 263, 216, 0, 0, 262,
	217, 218, 0, 167, 168, 169, 170, 0, 88, 171,
	172, 0, 0, 173, 174, 175, 219, 220, 0, 176,
	91, 92, 0, 93, 177, 178, 179, 180, 0, 0,
	0, 0, 94, 95, 181, 182, 183, 96, 184, 185,
	0, 97, 186, 98, 0, 0, 187, 188, 368, 189,
	0, 0, 0, 99, 100, 101, 0, 102, 0, 103,
	0, 0, 104, 105, 0, 0, 0, 0, 0, 0,
	106, 107, 108, 109, 190, 110, 191, 192, 0, 0,
	111, 0, 0, 0, 112, 113, 0, 0, 0, 0,
	193, 114, 194, 0, 0, 115, 116, 195, 117, 0,
	0, 0, 0, 0, 118, 196, 0, 197, 0, 119,
	120, 198, 199, 0, 0, 0, 0, 121, 200, 201,
	202, 0, 203, 0, 0, 122, 0, 123, 0, 0,
	204, 0, 124, 0, 0, 259, 0, 0, 125, 0,
	126, 127, 128, 129, 260, 0, 130, 131, 132, 0,
	133, 0, 205, 134, 206, 135, 136, 0, 0, 272,
	0, 0, 137, 207, 0, 138, 0, 208, 139, 140,
	0, 209, 141, 210, 0, 142, 143, 144, 211, 145,
	146, 0, 147, 148, 149, 0, 150, 0, 151, 152,
	212, 153, 0, 154, 155, 0, 156, 261, 0, 157,
	158, 0, 159, 213, 160, 0, 161, 162, 164, 214,
	163, 215, 0, 0, 165, 166, 0, 263, 216, 0,
	0, 262, 217, 218, 0, 167, 168, 169, 170, 0,
	0, 171, 172, 0, 0, 173, 174, 175, 219, 220,
	0, 176, 0, 0, 0, 0, 177, 178, 179, 180,
	88, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 91, 92, 0, 93, 0, 0, 0, 856,
	0, 0, 0, 0, 94, 95, 181, 182, 183, 96,
	184, 185, 0, 97, 186, 98, 0, 0, 187, 188,
	0, 189, 0, 0, 0, 99, 100, 101, 0, 102,
	0, 103, 0, 0, 104, 105, 0, 0, 0, 0,
	0, 0, 106, 107, 108, 109, 190, 110, 191, 192,
	0, 0, 111, 0, 0, 0, 112, 113, 0, 0,
	0, 0, 193, 114, 194, 0, 0, 115, 116, 195,
	117, 0, 0, 0, 0, 0, 118, 196, 0, 197,
	0, 119, 120, 198, 199, 0, 0, 0, 0, 121,
	200, 201, 202, 0, 203, 0, 0, 122, 0, 123,
	0, 0, 204, 0, 124, 0, 0, 259, 0, 0,
	125, 0, 126, 127, 128, 129, 260, 0, 130, 131,
	132, 0, 133, 0, 205, 134, 206, 135, 136, 0,
	0, 0, 0, 0, 137, 207, 0, 138, 0, 208,
	139, 140, 0, 209, 141, 210, 0, 142, 143, 144,
	211, 145, 146, 0, 147, 148, 149, 0, 150, 0,
	151, 152, 212, 153, 0, 154, 155, 0, 156, 261,
	0, 157, 158, 0, 159, 213, 160, 0, 161, 162,
	164, 214, 163, 215, 0, 0, 165, 166, 0, 263,
	216, 0, 0, 262, 217, 218, 0, 167, 168, 169,
	170, 0, 0, 171, 172, 0, 0, 173, 174, 175,
	219, 220, 0, 176, 0, 0, 0, 0, 177, 178,
	179, 180, 88, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 91, 92, 0, 93, 0, 0,
	0, 797, 0, 0, 0, 0, 94, 95, 181, 182,
	183, 96, 184, 185, 0, 97, 186, 98, 0, 0,
	187, 188, 0, 189, 0, 0, 0, 99, 100, 101,
	0, 102, 0, 103, 0, 0, 104, 105, 0, 0,
	0, 0, 0, 0, 106, 107, 108, 109, 190, 110,
	191, 192, 0, 0, 111, 0, 0, 0, 112, 113,
	0, 0, 0, 0, 193, 114, 194, 0, 0, 115,
	116, 195, 117, 0, 0, 0, 0, 0, 118, 196,
	0, 197, 0, 119, 120, 198, 199, 0, 0, 0,
	0, 121, 200, 201, 202, 0, 203, 0, 0, 122,
	0, 123, 0, 0, 204, 0, 124, 0, 0, 259,
	0, 0, 125, 0, 126, 127, 128, 129, 260, 0,
	130, 131, 132, 0, 133, 0, 205, 134, 206, 135,
	136, 0, 0, 0, 0, 0, 137, 207, 0, 138,
	0, 208, 139, 140, 0, 209, 141, 210, 0, 142,
	143, 144, 211, 145, 146, 0, 147, 148, 149, 0,
	150, 0, 151, 152, 212, 153, 0, 154, 155, 0,
	156, 261, 0, 157, 158, 0, 159, 213, 160, 0,
	161, 162, 164, 214, 163, 215, 0, 0, 165, 166,
	0, 263, 216, 0, 0, 262, 217, 218, 0, 167,
	168, 169, 170, 0, 0, 171, 172, 0, 0, 173,
	174, 175, 219, 220, 0, 176, 0, 0, 0, 0,
	177, 178, 179, 180, 88, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 91, 92, 0, 93,
	0, 0, 0, 1296, 0, 0, 0, 0, 94, 95,
	181, 182, 183, 96, 184, 185, 0, 97, 186, 98,
	0, 0, 187, 188, 0, 189, 0, 0, 0, 99,
	100, 101, 0, 102, 0, 103, 0, 0, 104, 105,
	0, 0, 0, 0, 0, 0, 106, 107, 108, 109,
	190, 110, 191, 192, 0, 0, 111, 0, 0, 0,
	112, 113, 0, 0, 0, 0, 193, 114, 194, 0,
	0, 115, 116, 195, 117, 0, 0, 0, 0, 0,
	118, 196, 0, 197, 0, 119, 120, 198, 199, 0,
	0, 0, 0, 121, 200, 201, 202, 0, 203, 0,
	0, 122, 0, 123, 0, 0, 204, 0, 124, 0,
	0, 259, 0, 0, 125, 0, 126, 127, 128, 129,
	260, 0, 130, 131, 132, 0, 133, 0, 205, 134,
	206, 135, 136, 0, 0, 0, 0, 0, 137, 207,
	0, 138, 0, 208, 139, 140, 0, 209, 141, 210,
	0, 142, 143, 144, 211, 145, 146, 0, 147, 148,
	149, 0, 150, 0, 151, 152, 212, 153, 0, 154,
	155, 0, 156, 261, 0, 157, 158, 0, 159, 213,
	160, 0, 161, 162, 164, 214, 163, 215, 0, 0,
	165, 166, 0, 263, 216, 0, 0, 262, 217, 218,
	0, 167, 168, 169, 170, 0, 0, 171, 172, 0,
	0, 173, 174, 175, 219, 220, 0, 176, 0, 0,
	0, 0, 177, 178, 179, 180, 297, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 91, 92,
	0, 93, 0, 0, 0, 468, 0, 0, 0, 0,
	94, 95, 181, 182, 183, 96, 184, 185, 0, 97,
	186, 98, 0, 0, 187, 188, 0, 189, 0, 302,
	0, 99, 100, 101, 0, 102, 0, 103, 0, 303,
	104, 105, 0, 0, 0, 0, 0, 0, 106, 107,
	108, 109, 190, 110, 191, 192, 0, 0, 111, 0,
	0, 0, 112, 113, 0, 0, 0, 0, 193, 114,
	194, 0, 0, 115, 116, 195, 117, 0, 0, 0,
	304, 0, 118, 196, 0, 197, 0, 119, 120, 198,
	199, 0, 0, 0, 305, 121, 200, 201, 202, 0,
	203, 0, 306, 122, 307, 123, 0, 0, 204, 308,
	124, 309, 0, 259, 0, 0, 125, 0, 126, 127,
	128, 129, 260, 310, 130, 131, 132, 0, 133, 0,
	205, 134, 206, 135, 136, 0, 0, 0, 0, 0,
	137, 207, 311, 138, 312, 208, 139, 140, 0, 209,
	141, 210, 0, 142, 143, 144, 211, 145, 146, 0,
	147, 148, 149, 0, 150, 313, 151, 152, 212, 153,
	0, 154, 155, 0, 156, 261, 0, 157, 158, 314,
	159, 213, 160, 0, 161, 162, 164, 214, 163, 215,
	0, 0, 165, 166, 0, 263, 216, 0, 0, 262,
	217, 218, 0, 167, 168, 169, 170, 0, 88, 171,
	172, 0, 0, 173, 174, 175, 219, 220, 0, 176,
	91, 92, 0, 93, 177, 178, 179, 180, 0, 0,
	0, 0, 94, 95, 181, 182, 183, 96, 184, 185,
	0, 97, 186, 98, 0, 0, 187, 188, 772, 189,
	0, 0, 0, 99, 100, 101, 0, 102, 770, 103,
	0, 0, 104, 105, 0, 0, 0, 0, 0, 0,
	106, 107, 108, 109, 190, 110, 191, 192, 0, 0,
	111, 0, 0, 0, 112, 113, 0, 0, 0, 0,
	193, 114, 194, 0, 0, 115, 116, 195, 117, 0,
	775, 0, 0, 0, 118, 196, 0, 197, 0, 119,
	120, 198, 199, 0, 834, 0, 0, 121, 200, 201,
	202, 0, 203, 0, 0, 122, 0, 123, 0, 0,
	204, 0, 124, 0, 0, 259, 0, 0, 125, 0,
	126, 127, 128, 129, 260, 0, 130, 131, 132, 0,
	133, 0, 205, 134, 206, 135, 136, 0, 0, 0,
	0, 0, 137, 207, 0, 138, 0, 208, 139, 140,
	0, 209, 141, 210, 774, 142, 143, 144, 211, 145,
	146, 0, 147, 148, 149, 0, 150, 0, 151, 152,
	212, 153, 0, 154, 155, 0, 156, 261, 0, 157,
	158, 0, 159, 213, 160, 0, 161, 162, 164, 214,
	163, 215, 0, 0, 165, 166, 0, 263, 216, 0,
	0, 262, 217, 218, 0, 167, 168, 169, 170, 0,
	835, 171, 172, 0, 0, 173, 174, 175, 219, 220,
	88, 176, 0, 0, 0, 0, 177, 178, 179, 180,
	0, 0, 91, 92, 0, 93, 0, 0, 0, 0,
	0, 0, 0, 0, 94, 95, 181, 182, 183, 96,
	184, 185, 0, 97, 186, 98, 0, 0, 187, 188,
	772, 189, 0, 0, 767, 99, 100, 101, 0, 102,
	770, 103, 0, 0, 104, 105, 0, 0, 0, 0,
	0, 0, 106, 107, 108, 109, 190, 110, 191, 192,
	0, 0, 111, 0, 0, 0, 112, 113, 0, 0,
	0, 0, 193, 114, 194, 0, 0, 115, 116, 195,
	117, 0, 775, 0, 0, 0, 118, 196, 0, 197,
	0, 119, 120, 766, 199, 0, 0, 0, 0, 121,
	200, 201, 202, 0, 203, 0, 0, 122, 0, 123,
	0, 0, 204, 0, 124, 0, 0, 259, 0, 0,
	125, 0, 126, 127, 128, 129, 260, 0, 130, 131,
	132, 0, 133, 0, 205, 134, 206, 135, 136, 0,
	0, 0, 0, 0, 137, 207, 0, 138, 0, 208,
	139, 140, 0, 209, 141, 210, 774, 142, 143, 144,
	211, 145, 146, 0, 147, 148, 149, 0, 150, 0,
	151, 152, 212, 153, 0, 154, 155, 0, 156, 261,
	0, 157, 158, 0, 159, 213, 160, 0, 161, 162,
	164, 214, 163, 215, 0, 0, 165, 166, 0, 263,
	216, 0, 0, 262, 217, 218, 0, 167, 168, 169,
	170, 0, 773, 171, 172, 0, 0, 173, 174, 175,
	219, 220, 88, 176, 0, 0, 0, 0, 177, 178,
	179, 180, 0, 0, 91, 92, 0, 93, 0, 0,
	0, 0, 0, 1088, 0, 0, 94, 95, 181, 182,
	183, 96, 184, 185, 0, 97, 186, 98, 0, 0,
	187, 188, 0, 189, 0, 0, 0, 99, 100, 101,
	0, 102, 0, 103, 0, 0, 104, 105, 0, 0,
	0, 0, 0, 0, 106, 107, 108, 109, 190, 110,
	191, 192, 0, 0, 111, 0, 0, 0, 112, 113,
	0, 0, 0, 0, 193, 114, 194, 0, 0, 115,
	116, 195, 117, 0, 0, 0, 0, 0, 118, 196,
	0, 197, 0, 119, 120, 198, 199, 0, 0, 0,
	0, 121, 200, 201, 202, 0, 203, 0, 0, 122,
	0, 123, 0, 0, 204, 0, 124, 0, 0, 259,
	0, 0, 125, 0, 126, 127, 128, 129, 260, 0,
	130, 131, 132, 0, 133, 0, 205, 134, 206, 135,
	136, 0, 0, 0, 0, 0, 137, 207, 0, 138,
	0, 208, 139, 140, 0, 209, 141, 210, 0, 142,
	143, 144, 211, 145, 146, 0, 147, 148, 149, 0,
	150, 0, 151, 152, 212, 153, 0, 154, 155, 0,
	156, 261, 0, 157, 158, 0, 159, 213, 160, 0,
	161, 162, 164, 214, 163, 215, 0, 0, 165, 166,
	0, 263, 216, 0, 0, 262, 217, 218, 0, 167,
	168, 169, 170, 0, 88, 171, 172, 0, 0, 173,
	174, 175, 219, 220, 0, 176, 91, 92, 0, 93,
	177, 178, 179, 180, 0, 0, 0, 0, 94, 95,
	181, 182, 183, 96, 184, 185, 0, 97, 186, 98,
	0, 0, 187, 188, 0, 189, 0, 0, 0, 99,
	100, 101, 0, 102, 0, 103, 0, 0, 104, 105,
	0, 0, 0, 0, 0, 0, 106, 107, 108, 109,
	190, 110, 191, 192, 0, 0, 111, 0, 0, 0,
	112, 113, 0, 0, 0, 0, 193, 114, 194, 0,
	0, 115, 116, 195, 117, 0, 0, 0, 0, 0,
	118, 196, 0, 197, 0, 119, 120, 198, 199, 0,
	0, 0, 0, 121, 200, 201, 202, 0, 203, 0,
	0, 122, 0, 123, 0, 0, 204, 0, 124, 0,
	0, 259, 0, 0, 125, 0, 126, 127, 128, 129,
	260, 0, 130, 131, 132, 0, 133, 0, 205, 134,
	206, 135, 136, 0, 0, 272, 0, 0, 137, 207,
	0, 138, 0, 208, 139, 140, 0, 209, 141, 210,
	0, 142, 143, 144, 211, 145, 146, 0, 147, 148,
	149, 0, 150, 0, 151, 152, 212, 153, 0, 154,
	155, 0, 156, 261, 0, 157, 158, 0, 159, 213,
	160, 0, 161, 162, 164, 214, 163, 215, 0, 0,
	165, 166, 0, 263, 216, 0, 0, 262, 217, 218,
	0, 167, 168, 169, 170, 0, 88, 171, 172, 0,
	0, 173, 174, 175, 219, 220, 0, 176, 91, 92,
	0, 93, 177, 178, 179, 180, 0, 0, 0, 0,
	94, 95, 181, 182, 183, 96, 184, 185, 0, 97,
	186, 98, 0, 0, 187, 188, 0, 189, 0, 0,
	0, 99, 100, 101, 0, 102, 0, 103, 0, 0,
	104, 105, 0, 0, 0, 0, 0, 0, 106, 107,
	508, 109, 190, 110, 191, 192, 0, 0, 111, 0,
	0, 0, 112, 113, 0, 0, 0, 0, 193, 114,
	194, 0, 0, 115, 116, 195, 117, 0, 0, 0,
	0, 0, 118, 196, 0, 197, 0, 119, 120, 198,
	199, 0, 0, 0, 0, 121, 200, 201, 202, 0,
	203, 0, 0, 122, 0, 123, 0, 0, 204, 0,
	124, 0, 0, 259, 0, 0, 125, 0, 126, 127,
	128, 129, 260, 0, 130, 131, 132, 0, 133, 0,
	205, 134, 206, 135, 136, 0, 0, 0, 0, 0,
	137, 207, 0, 138, 0, 208, 139, 140, 0, 209,
	141, 210, 0, 142, 143, 144, 211, 145, 146, 0,
	147, 148, 149, 0, 150, 0, 151, 152, 212, 153,
	0, 154, 155, 0, 156, 261, 0, 157, 158, 0,
	159, 213, 160, 0, 161, 162, 164, 214, 163, 215,
	0, 507, 165, 166, 0, 263, 216, 0, 0, 262,
	217, 218, 0, 167, 168, 169, 170, 0, 88, 171,
	172, 0, 0, 173, 174, 175, 219, 220, 0, 176,
	91, 92, 0, 93, 177, 178, 179, 180, 0, 0,
	0, 0, 94, 95, 181, 182, 183, 96, 184, 185,
	0, 97, 186, 98, 0, 0, 187, 188, 0, 189,
	0, 0, 0, 99, 100, 101, 0, 102, 0, 103,
	0, 0, 104, 105, 0, 0, 0, 0, 0, 0,
	106, 107, 108, 109, 190, 110, 191, 192, 0, 0,
	111, 0, 0, 0, 112, 113, 0, 0, 0, 0,
	193, 114, 194, 0, 0, 115, 116, 195, 117, 0,
	0, 0, 0, 0, 118, 196, 0, 197, 0, 119,
	120, 278, 199, 0, 0, 0, 0, 121, 200, 201,
	202, 0, 203, 0, 0, 122, 0, 123, 0, 0,
	204, 0, 124, 0, 0, 259, 0, 0, 125, 0,
	126, 127, 128, 129, 260, 0, 130, 131, 132, 0,
	133, 0, 205, 134, 206, 135, 136, 0, 0, 272,
	0, 0, 137, 207, 0, 138, 0, 208, 139, 140,
	0, 209, 141, 210, 0, 142, 143, 144, 211, 145,
	146, 0, 147, 148, 149, 0, 150, 0, 151, 152,
	212, 153, 0, 154, 155, 0, 156, 261, 0, 157,
	158, 0, 159, 213, 160, 0, 161, 162, 164, 214,
	163, 215, 0, 0, 165, 166, 0, 263, 216, 0,
	0, 262, 217, 218, 0, 167, 168, 169, 170, 0,
	88, 171, 172, 0, 0, 173, 174, 175, 219, 220,
	0, 176, 91, 92, 0, 93, 177, 178, 179, 180,
	0, 0, 0, 0, 94, 95, 181, 182, 183, 96,
	184, 185, 0, 97, 186, 98, 0, 0, 187, 188,
	0, 189, 0, 0, 0, 99, 100, 101, 0, 102,
	0, 103, 0, 0, 104, 105, 0, 0, 0, 0,
	0, 0, 106, 107, 108, 109, 190, 110, 191, 192,
	0, 0, 111, 0, 0, 0, 112, 113, 0, 0,
	0, 0, 193, 114, 194, 0, 0, 115, 116, 195,
	117, 0, 0, 0, 0, 0, 118, 196, 0, 197,
	0, 119, 120, 198, 199, 0, 0, 0, 0, 121,
	200, 201, 202, 0, 203, 0, 0, 122, 0, 123,
	0, 0, 204, 0, 124, 0, 0, 259, 0, 0,
	125, 0, 126, 127, 128, 129, 260, 0, 130, 131,
	132, 0, 133, 0, 205, 134, 206, 135, 136, 0,
	0, 0, 0, 0, 137, 207, 0, 138, 0, 208,
	139, 140, 0, 209, 141, 210, 0, 142, 143, 144,
	211, 145, 146, 0, 147, 148, 149, 0, 150, 0,
	151, 152, 212, 153, 0, 154, 155, 0, 156, 261,
	0, 157, 158, 0, 159, 213, 160, 0, 161, 162,
	164, 214, 163, 215, 0, 0, 165, 166, 0, 263,
	216, 0, 0, 262, 217, 218, 0, 167, 168, 169,
	170, 0, 88, 171, 172, 0, 0, 173, 174, 175,
	219, 220, 0, 176, 91, 92, 0, 93, 177, 178,
	179, 180, 0, 0, 0, 0, 94, 95, 181, 182,
	183, 96, 184, 185, 0, 97, 186, 98, 0, 0,
	187, 188, 0, 189, 0, 0, 0, 99, 100, 101,
	0, 102, 0, 103, 0, 0, 104, 105, 0, 0,
	0, 0, 0, 0, 106, 107, 108, 109, 190, 110,
	191, 192, 0, 0, 111, 0, 0, 0, 112, 113,
	0, 0, 0, 0, 193, 114, 194, 0, 0, 115,
	116, 195, 117, 0, 0, 0, 0, 0, 118, 196,
	0, 197, 0, 119, 120, 1033, 199, 0, 0, 0,
	0, 121, 200, 201, 202, 0, 203, 0, 0, 122,
	0, 123, 0, 0, 204, 0, 124, 0, 0, 259,
	0, 0, 125, 0, 126, 127, 128, 129, 260, 0,
	130, 131, 132, 0, 133, 0, 205, 134, 206, 135,
	136, 0, 0, 0, 0, 0, 137, 207, 0, 138,
	0, 208, 139, 140, 0, 209, 141, 210, 0, 142,
	143, 144, 211, 145, 146, 0, 147, 148, 149, 0,
	150, 0, 151, 152, 212, 153, 0, 154, 155, 0,
	156, 261, 0, 157, 158, 0, 159, 213, 160, 0,
	161, 162, 164, 214, 163, 215, 0, 0, 165, 166,
	0, 263, 216, 0, 0, 262, 217, 218, 0, 167,
	168, 169, 170, 0, 88, 171, 172, 0, 0, 173,
	174, 175, 219, 220, 0, 176, 91, 92, 0, 93,
	177, 178, 179, 180, 0, 0, 0, 0, 94, 95,
	181, 182, 183, 96, 184, 185, 0, 97, 186, 98,
	0, 0, 187, 188, 0, 189, 0, 0, 0, 99,
	100, 101, 0, 102, 0, 103, 0, 0, 104, 105,
	0, 0, 0, 0, 0, 0, 106, 107, 108, 109,
	190, 110, 191, 192, 0, 0, 111, 0, 0, 0,
	112, 113, 0, 0, 0, 0, 193, 114, 194, 0,
	0, 115, 116, 195, 117, 0, 0, 0, 0, 0,
	118, 196, 0, 197, 0, 119, 120, 1031, 199, 0,
	0, 0, 0, 121, 200, 201, 202, 0, 203, 0,
	0, 122, 0, 123, 0, 0, 204, 0, 124, 0,
	0, 259, 0, 0, 125, 0, 126, 127, 128, 129,
	260, 0, 130, 131, 132, 0, 133, 0, 205, 134,
	206, 135, 136, 0, 0, 0, 0, 0, 137, 207,
	0, 138, 0, 208, 139, 140, 0, 209, 141, 210,
	0, 142, 143, 144, 211, 145, 146, 0, 147, 148,
	149, 0, 150, 0, 151, 152, 212, 153, 0, 154,
	155, 0, 156, 261, 0, 157, 158, 0, 159, 213,
	160, 0, 161, 162, 164, 214, 163, 215, 0, 0,
	165, 166, 0, 263, 216, 0, 0, 262, 217, 218,
	0, 167, 168, 169, 170, 0, 88, 171, 172, 0,
	0, 173, 174, 175, 219, 220, 0, 176, 91, 92,
	0, 93, 177, 178, 179, 180, 0, 0, 0, 0,
	94, 95, 181, 182, 183, 96, 184, 185, 0, 97,
	186, 98, 0, 0, 187, 188, 0, 189, 0, 0,
	0, 99, 100, 101, 0, 102, 0, 103, 0, 0,
	104, 105, 0, 0, 0, 0, 0, 0, 106, 107,
	108, 109, 190, 110, 191, 192, 0, 0, 111, 0,
	0, 0, 112, 113, 0, 0, 0, 0, 193, 114,
	194, 0, 0, 115, 116, 195, 117, 0, 0, 0,
	0, 0, 118, 196, 0, 197, 0, 119, 120, 1022,
	199, 0, 0, 0, 0, 121, 200, 201, 202, 0,
	203, 0, 0, 122, 0, 123, 0, 0, 204, 0,
	124, 0, 0, 259, 0, 0, 125, 0, 126, 127,
	128, 129, 260, 0, 130, 131, 132, 0, 133, 0,
	205, 134, 206, 135, 136, 0, 0, 0, 0, 0,
	137, 207, 0, 138, 0, 208, 139, 140, 0, 209,
	141, 210, 0, 142, 143, 144, 211, 145, 146, 0,
	147, 148, 149, 0, 150, 0, 151, 152, 212, 153,
	0, 154, 155, 0, 156, 261, 0, 157, 158, 0,
	159, 213, 160, 0, 161, 162, 164, 214, 163, 215,
	0, 0, 165, 166, 0, 263, 216, 0, 0, 262,
	217, 218, 0, 167, 168, 169, 170, 0, 88, 171,
	172, 0, 0, 173, 174, 175, 219, 220, 0, 176,
	91, 92, 0, 93, 177, 178, 179, 180, 0, 0,
	0, 0, 94, 95, 181, 182, 183, 96, 184, 185,
	0, 97, 186, 98, 0, 0, 187, 188, 0, 189,
	0, 0, 0, 99, 100, 101, 0, 102, 0, 103,
	0, 0, 104, 105, 0, 0, 0, 0, 0, 0,
	106, 107, 108, 109, 190, 110, 191, 192, 0, 0,
	111, 0, 0, 0, 112, 113, 0, 0, 0, 0,
	193, 114, 194, 0, 0, 115, 116, 195, 117, 0,
	0, 0, 0, 0, 118, 196, 0, 197, 0, 119,
	120, 645, 199, 0, 0, 0, 0, 121, 200, 201,
	202, 0, 203, 0, 0, 122, 0, 123, 0, 0,
	204, 0, 124, 0, 0, 259, 0, 0, 125, 0,
	126, 127, 128, 129, 260, 0, 130, 131, 132, 0,
	133, 0, 205, 134, 206, 135, 136, 0, 0, 0,
	0, 0, 137, 207, 0, 138, 0, 208, 139, 140,
	0, 209, 141, 210, 0, 142, 143, 144, 211, 145,
	146, 0, 147, 148, 149, 0, 150, 0, 151, 152,
	212, 153, 0, 154, 155, 0, 156, 261, 0, 157,
	158, 0, 159, 213, 160, 0, 161, 162, 164, 214,
	163, 215, 0, 0, 165, 166, 0, 263, 216, 0,
	0, 262, 217, 218, 0, 167, 168, 169, 170, 0,
	88, 171, 172, 0, 0, 173, 174, 175, 219, 220,
	0, 176, 91, 92, 0, 93, 177, 178, 179, 180,
	0, 494, 0, 0, 94, 95, 181, 182, 183, 96,
	184, 185, 0, 97, 186, 98, 0, 0, 187, 188,
	0, 189, 0, 0, 0, 99, 100, 101, 0, 102,
	0, 103, 0, 0, 104, 105, 0, 0, 0, 0,
	0, 0, 106, 107, 108, 109, 190, 110, 191, 192,
	0, 0, 111, 0, 0, 0, 112, 113, 0, 0,
	0, 0, 193, 114, 194, 0, 0, 115, 116, 195,
	117, 0, 0, 0, 0, 0, 118, 196, 0, 197,
	0, 119, 120, 198, 199, 0, 0, 0, 0, 121,
	200, 201, 202, 0, 203, 0, 0, 122, 0, 123,
	0, 0, 204, 0, 124, 0, 0, 259, 0, 0,
	125, 0, 126, 127, 128, 129, 260, 0, 130, 131,
	132, 0, 133, 0, 205, 134, 206, 135, 136, 0,
	0, 0, 0, 0, 137, 207, 0, 138, 0, 208,
	139, 140, 0, 209, 141, 210, 0, 142, 143, 144,
	211, 145, 146, 0, 147, 148, 149, 0, 150, 0,
	151, 152, 212, 153, 0, 154, 155, 0, 156, 261,
	0, 0, 158, 0, 159, 213, 160, 0, 161, 162,
	164, 214, 163, 215, 0, 0, 165, 166, 0, 263,
	216, 0, 0, 262, 217, 218, 0, 167, 168, 169,
	170, 0, 88, 171, 172, 0, 0, 173, 174, 175,
	219, 220, 0, 176, 91, 92, 0, 93, 177, 178,
	179, 180, 0, 0, 0, 0, 94, 95, 181, 182,
	183, 96, 184, 185, 0, 97, 186, 98, 0, 0,
	187, 188, 0, 189, 0, 0, 0, 99, 100, 101,
	0, 102, 0, 103, 0, 0, 104, 105, 0, 0,
	0, 0, 0, 0, 106, 107, 108, 109, 190, 110,
	191, 192, 0, 0, 111, 0, 0, 0, 112, 113,
	0, 0, 0, 0, 193, 114, 194, 0, 0, 115,
	116, 195, 117, 0, 0, 0, 0, 0, 118, 196,
	0, 197, 0, 119, 120, 353, 199, 0, 0, 0,
	0, 121, 200, 201, 202, 0, 203, 0, 0, 122,
	0, 123, 0, 0, 204, 0, 124, 0, 0, 259,
	0, 0, 125, 0, 126, 127, 128, 129, 260, 0,
	130, 131, 132, 0, 133, 0, 205, 134, 206, 135,
	136, 0, 0, 0, 0, 0, 137, 207, 0, 138,
	0, 208, 139, 140, 0, 209, 141, 210, 0, 142,
	143, 144, 211, 145, 146, 0, 147, 148, 149, 0,
	150, 0, 151, 152, 212, 153, 0, 154, 155, 0,
	156, 261, 0, 157, 158, 0, 159, 213, 160, 0,
	161, 162, 164, 214, 163, 215, 0, 0, 165, 166,
	0, 263, 216, 0, 0, 262, 217, 218, 0, 167,
	168, 169, 170, 0, 88, 171, 172, 0, 0, 173,
	174, 175, 219, 220, 0, 176, 91, 92, 0, 93,
	177, 178, 179, 180, 0, 0, 0, 0, 94, 95,
	181, 182, 183, 96, 184, 185, 0, 97, 186, 98,
	0, 0, 187, 188, 0, 189, 0, 0, 0, 99,
	100, 101, 0, 102, 0, 103, 0, 0, 104, 105,
	0, 0, 0, 0, 0, 0, 106, 107, 108, 109,
	190, 110, 191, 192, 0, 0, 111, 0, 0, 0,
	112, 113, 0, 0, 0, 0, 193, 114, 194, 0,
	0, 115, 116, 195, 117, 0, 0, 0, 0, 0,
	118, 196, 0, 197, 0, 119, 120, 350, 199, 0,
	0, 0, 0, 121, 200, 201, 202, 0, 203, 0,
	0, 122, 0, 123, 0, 0, 204, 0, 124, 0,
	0, 259, 0, 0, 125, 0, 126, 127, 128, 129,
	260, 0, 130, 131, 132, 0, 133, 0, 205, 134,
	206, 135, 136, 0, 0, 0, 0, 0, 137, 207,
	0, 138, 0, 208, 139, 140, 0, 209, 141, 210,
	0, 142, 143, 144, 211, 145, 146, 0, 147, 148,
	149, 0, 150, 0, 151, 152, 212, 153, 0, 154,
	155, 0, 156, 261, 0, 157, 158, 0, 159, 213,
	160, 0, 161, 162, 164, 214, 163, 215, 0, 0,
	165, 166, 0, 263, 216, 0, 0, 262, 217, 218,
	0, 167, 168, 169, 170, 0, 88, 171, 172, 0,
	0, 173, 174, 175, 219, 220, 0, 176, 91, 92,
	0, 93, 177, 178, 179, 180, 0, 0, 0, 0,
	94, 95, 181, 182, 183, 96, 184, 185, 0, 97,
	186, 98, 0, 0, 187, 188, 0, 189, 0, 0,
	0, 99, 100, 101, 0, 102, 0, 103, 0, 0,
	104, 105, 0, 0, 0, 0, 0, 0, 106, 107,
	108, 109, 190, 110, 191, 192, 0, 0, 111, 0,
	0, 0, 112, 113, 0, 0, 0, 0, 193, 114,
	194, 0, 0, 115, 116, 195, 117, 0, 0, 0,
	0, 0, 118, 196, 0, 197, 0, 119, 120, 198,
	199, 0, 0, 0, 0, 121, 200, 201, 202, 0,
	203, 0, 0, 122, 0, 123, 0, 0, 204, 0,
	124, 0, 0, 259, 0, 0, 125, 0, 126, 127,
	128, 129, 85, 0, 130, 131, 132, 0, 133, 0,
	205, 134, 206, 135, 136, 0, 0, 0, 0, 0,
	137, 207, 0, 138, 0, 208, 139, 140, 0, 209,
	141, 210, 0, 142, 143, 144, 211, 145, 146, 0,
	147, 148, 149, 0, 150, 0, 151, 152, 212, 153,
	0, 154, 155, 0, 156, 261, 0, 157, 158, 0,
	159, 213, 160, 0, 161, 162, 164, 214, 163, 215,
	0, 0, 165, 166, 0, 84, 216, 0, 0, 80,
	217, 218, 0, 167, 168, 169, 170, 0, 88, 171,
	172, 0, 0, 173, 174, 175, 219, 220, 0, 176,
	91, 92, 0, 93, 177, 178, 179, 180, 0, 0,
	0, 0, 94, 95, 181, 182, 183, 96, 184, 185,
	0, 97, 186, 98, 0, 0, 187, 188, 0, 189,
	0, 0, 0, 99, 100, 101, 0, 102, 0, 103,
	0, 0, 104, 105, 0, 0, 0, 0, 0, 0,
	106, 107, 108, 109, 190, 110, 191, 192, 0, 0,
	111, 0, 0, 0, 112, 113, 0, 0, 0, 0,
	193, 114, 194, 0, 0, 115, 116, 195, 117, 0,
	0, 0, 0, 0, 118, 196, 0, 197, 0, 119,
	120, 292, 199, 0, 0, 0, 0, 121, 200, 201,
	202, 0, 203, 0, 0, 122, 0, 123, 0, 0,
	204, 0, 124, 0, 0, 259, 0, 0, 125, 0,
	126, 127, 128, 129, 260, 0, 130, 131, 132, 0,
	133, 0, 205, 134, 206, 135, 136, 0, 0, 0,
	0, 0, 137, 207, 0, 138, 0, 208, 139, 140,
	0, 209, 141, 210, 0, 142, 143, 144, 211, 145,
	146, 0, 147, 148, 149, 0, 150, 0, 151, 152,
	212, 153, 0, 154, 155, 0, 156, 261, 0, 157,
	158, 0, 159, 213, 160, 0, 161, 162, 164, 214,
	163, 215, 0, 0, 165, 166, 0, 263, 216, 0,
	0, 262, 217, 218, 0, 167, 168, 169, 170, 0,
	88, 171, 172, 0, 0, 173, 174, 175, 219, 220,
	0, 176, 91, 92, 0, 93, 177, 178, 179, 180,
	0, 0, 0, 0, 94, 95, 181, 182, 183, 96,
	184, 185, 0, 97, 186, 98, 0, 0, 187, 188,
	0, 189, 0, 0, 0, 99, 100, 101, 0, 102,
	0, 103, 0, 0, 104, 105, 0, 0, 0, 0,
	0, 0, 106, 107, 108, 109, 190, 110, 191, 192,
	0, 0, 111, 0, 0, 0, 112, 113, 0, 0,
	0, 0, 193, 114, 194, 0, 0, 115, 116, 195,
	117, 0, 0, 0, 0, 0, 118, 196, 0, 197,
	0, 119, 120, 289, 199, 0, 0, 0, 0, 121,
	200, 201, 202, 0, 203, 0, 0, 122, 0, 123,
	0, 0, 204, 0, 124, 0, 0, 259, 0, 0,
	125, 0, 126, 127, 128, 129, 260, 0, 130, 131,
	132, 0, 133, 0, 205, 134, 206, 135, 136, 0,
	0, 0, 0, 0, 137, 207, 0, 138, 0, 208,
	139, 140, 0, 209, 141, 210, 0, 142, 143, 144,
	211, 145, 146, 0, 147, 148, 149, 0, 150, 0,
	151, 152, 212, 153, 0, 154, 155, 0, 156, 261,
	0, 157, 158, 0, 159, 213, 160, 0, 161, 162,
	164, 214, 163, 215, 0, 0, 165, 166, 0, 263,
	216, 0, 0, 262, 217, 218, 0, 167, 168, 169,
	170, 0, 88, 171, 172, 0, 0, 173, 174, 175,
	219, 220, 0, 176, 91, 92, 0, 93, 177, 178,
	179, 180, 0, 0, 0, 0, 94, 95, 181, 182,
	183, 96, 184, 185, 0, 97, 186, 98, 0, 0,
	187, 188, 0, 189, 0, 0, 0, 99, 100, 101,
	0, 102, 0, 103, 0, 0, 104, 105, 0, 0,
	0, 0, 0, 0, 106, 107, 108, 109, 190, 110,
	191, 192, 0, 0, 111, 0, 0, 0, 112, 113,
	0, 0, 0, 0, 193, 114, 194, 0, 0, 115,
	116, 195, 117, 0, 0, 0, 0, 0, 118, 196,
	0, 197, 0, 119, 120, 287, 199, 0, 0, 0,
	0, 121, 200, 201, 202, 0, 203, 0, 0, 122,
	0, 123, 0, 0, 204, 0, 124, 0, 0, 259,
	0, 0, 125, 0, 126, 127, 128, 129, 260, 0,
	130, 131, 132, 0, 133, 0, 205, 134, 206, 135,
	136, 0, 0, 0, 0, 0, 137, 207, 0, 138,
	0, 208, 139, 140, 0, 209, 141, 210, 0, 142,
	143, 144, 211, 145, 146, 0, 147, 148, 149, 0,
	150, 0, 151, 152, 212, 153, 0, 154, 155, 0,
	156, 261, 0, 157, 158, 0, 159, 213, 160, 0,
	161, 162, 164, 214, 163, 215, 0, 0, 165, 166,
	0, 263, 216, 0, 0, 262, 217, 218, 0, 167,
	168, 169, 170, 0, 88, 171, 172, 0, 0, 173,
	174, 175, 219, 220, 0, 176, 91, 92, 0, 93,
	177, 178, 179, 180, 0, 0, 0, 0, 94, 95,
	181, 182, 183, 96, 184, 185, 0, 97, 186, 98,
	0, 0, 187, 188, 0, 189, 0, 0, 0, 99,
	100, 101, 0, 102, 0, 103, 0, 0, 104, 105,
	0, 0, 0, 0, 0, 0, 106, 107, 108, 109,
	190, 110, 191, 192, 0, 0, 111, 0, 0, 0,
	112, 113, 0, 0, 0, 0, 193, 114, 194, 0,
	0, 115, 116, 195, 117, 0, 0, 0, 0, 0,
	118, 196, 0, 197, 0, 119, 120, 281, 199, 0,
	0, 0, 0, 121, 200, 201, 202, 0, 203, 0,
	0, 122, 0, 123, 0, 0, 204, 0, 124, 0,
	0, 259, 0, 0, 125, 0, 126, 127, 128, 129,
	260, 0, 130, 131, 132, 0, 133, 0, 205, 134,
	206, 135, 136, 0, 0, 0, 0, 0, 137, 207,
	0, 138, 0, 208, 139, 140, 0, 209, 141, 210,
	0, 142, 143, 144, 211, 145, 146, 0, 147, 148,
	149, 0, 150, 0, 151, 152, 212, 153, 0, 154,
	155, 0, 156, 261, 0, 157, 158, 0, 159, 213,
	160, 0, 161, 162, 164, 214, 163, 215, 0, 0,
	165, 166, 0, 263, 216, 0, 0, 262, 217, 218,
	0, 167, 168, 169, 170, 0, 88, 171, 172, 0,
	0, 173, 174, 175, 219, 220, 0, 176, 91, 92,
	0, 93, 177, 178, 179, 180, 0, 0, 0, 0,
	94, 95, 181, 182, 183, 96, 184, 185, 0, 97,
	186, 98, 0, 0, 187, 188, 0, 189, 0, 0,
	0, 99, 100, 101, 0, 102, 0, 103, 0, 0,
	104, 105, 0, 0, 0, 0, 0, 0, 106, 107,
	108, 109, 190, 110, 191, 192, 0, 0, 111, 0,
	0, 0, 112, 113, 0, 0, 0, 0, 193, 114,
	194, 0, 0, 115, 116, 195, 117, 0, 0, 0,
	0, 0, 118, 196, 0, 197, 0, 119, 120, 198,
	199, 0, 0, 0, 0, 121, 200, 201, 202, 0,
	203, 0, 0, 122, 0, 123, 0, 0, 204, 0,
	124, 0, 0, 259, 0, 0, 125, 0, 126, 127,
	128, 129, 260, 0, 130, 131, 132, 0, 133, 0,
	205, 134, 206, 135, 136, 0, 0, 0, 0, 0,
	137, 207, 0, 138, 0, 208, 139, 140, 0, 209,
	141, 210, 0, 142, 143, 144, 211, 256, 146, 0,
	147, 148, 149, 0, 150, 0, 151, 152, 212, 153,
	0, 154, 155, 0, 156, 261, 0, 157, 158, 0,
	159, 213, 160, 0, 161, 162, 164, 214, 163, 215,
	0, 0, 165, 166, 0, 263, 216, 0, 0, 262,
	217, 218, 0, 167, 168, 169, 170, 0, 88, 171,
	172, 0, 0, 173, 174, 175, 219, 220, 0, 176,
	91, 92, 0, 93, 177, 178, 179, 180, 0, 0,
	0, 0, 94, 95, 181, 182, 183, 96, 184, 185,
	0, 97, 186, 98, 0, 0, 187, 188, 0, 189,
	0, 0, 0, 99, 100, 101, 0, 102, 0, 103,
	0, 0, 104, 105, 0, 0, 0, 0, 0, 0,
	106, 107, 108, 109, 190, 110, 191, 192, 0, 0,
	111, 0, 0, 0, 112, 113, 0, 0, 0, 0,
	193, 114, 194, 0, 0, 115, 116, 195, 117, 0,
	0, 0, 0, 0, 118, 196, 0, 197, 0, 119,
	120, 198, 199, 0, 0, 0, 0, 121, 200, 201,
	202, 0, 203, 0, 0, 122, 0, 123, 0, 0,
	204, 0, 124, 0, 0, 78, 0, 0, 125, 0,
	126, 127, 128, 129, 85, 0, 130, 131, 132, 0,
	133, 0, 205, 134, 206, 135, 136, 0, 0, 0,
	0, 0, 137, 207, 0, 138, 0, 208, 139, 140,
	0, 209, 141, 210, 0, 142, 143, 144, 211, 145,
	146, 0, 147, 148, 149, 0, 150, 0, 151, 152,
	212, 153, 0, 154, 155, 0, 156, 79, 0, 157,
	158, 0, 159, 213, 160, 0, 161, 162, 164, 214,
	163, 215, 0, 0, 165, 166, 0, 84, 216, 0,
	0, 80, 217, 218, 0, 167, 168, 169, 170, 0,
	88, 171, 172, 0, 0, 173, 174, 175, 219, 220,
	0, 176, 91, 92, 0, 93, 177, 178, 179, 180,
	0, 0, 0, 0, 94, 95, 181, 182, 183, 96,
	184, 185, 0, 97, 186, 98, 0, 0, 187, 188,
	0, 189, 0, 0, 0, 99, 100, 101, 0, 102,
	0, 103, 0, 0, 104, 105, 0, 0, 0, 0,
	0, 0, 106, 107, 108, 109, 190, 110, 191, 192,
	0, 0, 111, 0, 0, 0, 112, 113, 0, 0,
	0, 0, 193, 114, 194, 0, 0, 115, 116, 195,
	117, 0, 0, 0, 0, 0, 118, 196, 0, 197,
	0, 119, 120, 198, 199, 0, 0, 0, 0, 121,
	200, 201, 202, 0, 203, 0, 0, 122, 0, 123,
	0, 0, 204, 0, 124, 0, 0, 259, 0, 0,
	125, 0, 126, 127, 128, 129, 260, 0, 130, 131,
	132, 0, 133, 0, 205, 134, 206, 135, 136, 0,
	0, 0, 0, 0, 137, 207, 0, 138, 0, 208,
	139, 0, 0, 209, 141, 210, 0, 142, 0, 144,
	211, 145, 146, 0, 147, 148, 149, 0, 150, 0,
	151, 152, 212, 0, 0, 154, 155, 0, 156, 261,
	0, 157, 158, 0, 159, 213, 160, 0, 161, 162,
	164, 214, 163, 215, 0, 0, 165, 166, 0, 263,
	216, 0, 0, 262, 217, 218, 0, 167, 168, 169,
	170, 0, 0, 171, 172, 0, 0, 173, 174, 175,
	219, 220, 669, 176, 687, 688, 689, 0, 177, 178,
	179, 180, 0, 0, 690, 0, 0, 0, 0, 0,
	671, 0, 696, 0, 0, 0, 0, 669, 0, 687,
	688, 689, 0, 0, 0, 0, 0, 0, 670, 690,
	0, 0, 0, 0, 684, 671, 0, 696, 0, 0,
	0, 0, 669, 0, 687, 688, 689, 0, 0, 0,
	0, 0, 0, 670, 690, 0, 0, 0, 0, 684,
	671, 0, 696, 0, 0, 0, 0, 669, 0, 687,
	688, 689, 0, 0, 0, 0, 0, 0, 670, 690,
	0, 0, 0, 0, 684, 671, 0, 696, 0, 0,
	0, 697, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 695, 670, 0, 0, 0, 0, 0, 684,
	0, 692, 0, 0, 0, 0, 697, 685, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 695, 0, 0,
	0, 0, 0, 0, 0, 0, 692, 0, 691, 0,
	0, 697, 685, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 695, 0, 0, 0, 0, 0, 0, 0,
	0, 692, 0, 691, 0, 0, 697, 685, 0, 0,
	686, 0, 0, 0, 0, 0, 0, 695, 0, 694,
	0, 0, 0, 0, 0, 0, 692, 0, 691, 0,
	0, 0, 685, 0, 0, 686, 0, 0, 0, 0,
	0, 0, 0, 0, 694, 0, 0, 0, 0, 0,
	0, 0, 0, 691, 0, 0, 0, 0, 0, 0,
	686, 0, 0, 0, 0, 0, 0, 0, 693, 694,
	681, 682, 683, 0, 680, 677, 678, 679, 672, 673,
	674, 675, 676, 0, 0, 686, 0, 0, 0, 0,
	0, 1193, 0, 693, 694, 681, 682, 683, 0, 680,
	677, 678, 679, 672, 673, 674, 675, 676, 0, 0,
	0, 0, 0, 0, 0, 0, 1192, 0, 693, 0,
	681, 682, 683, 0, 680, 677, 678, 679, 672, 673,
	674, 675, 676, 0, 0, 0, 0, 0, 0, 0,
	0, 1191, 0, 693, 0, 681, 682, 683, 0, 680,
	677, 678, 679, 672, 673, 674, 675, 676, 669, 0,
	687, 688, 689, 1548, 0, 0, 0, 0, 0, 0,
	690, 0, 0, 0, 0, 0, 671, 669, 696, 687,
	688, 689, 0, 0, 0, 0, 0, 0, 0, 690,
	0, 0, 0, 0, 670, 671, 0, 696, 0, 0,
	684, 0, 669, 0, 687, 688, 689, 0, 0, 0,
	0, 0, 0, 670, 690, 0, 0, 0, 0, 684,
	671, 0, 696, 0, 0, 0, 0, 0, 0, 0,
	0, 669, 0, 687, 688, 689, 0, 0, 670, 0,
	0, 0, 0, 690, 684, 0, 0, 0, 0, 671,
	0, 696, 0, 0, 0, 0, 0, 697, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 670, 695, 0,
	0, 0, 0, 684, 0, 0, 697, 692, 0, 0,
	0, 0, 0, 685, 0, 0, 0, 695, 0, 0,
	0, 0, 0, 0, 0, 0, 692, 0, 0, 0,
	0, 697, 685, 0, 691, 0, 0, 0, 0, 0,
	0, 0, 695, 0, 0, 0, 0, 0, 0, 0,
	0, 692, 0, 691, 0, 0, 0, 685, 0, 0,
	697, 0, 0, 0, 0, 0, 686, 0, 0, 0,
	0, 695, 0, 0, 0, 694, 0, 0, 691, 0,
	692, 0, 0, 0, 0, 686, 685, 0, 0, 0,
	0, 0, 0, 0, 694, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 691, 0, 0,
	686, 0, 0, 0, 0, 0, 0, 0, 0, 694,
	0, 0, 0, 0, 693, 0, 681, 682, 683, 0,
	680, 677, 678, 679, 672, 673, 674, 675, 676, 686,
	0, 0, 0, 693, 1547, 681, 682, 683, 694, 680,
	677, 678, 679, 672, 673, 674, 675, 676, 0, 0,
	0, 0, 0, 1532, 0, 0, 0, 0, 693, 0,
	681, 682, 683, 0, 680, 677, 678, 679, 672, 673,
	674, 675, 676, 0, 0, 0, 0, 0, 1511, 0,
	0, 0, 0, 0, 0, 0, 0, 693, 0, 681,
	682, 683, 0, 680, 677, 678, 679, 672, 673, 674,
	675, 676, 669, 0, 687, 688, 689, 1506, 0, 0,
	0, 0, 0, 0, 690, 0, 0, 0, 0, 0,
	671, 669, 696, 687, 688, 689, 0, 0, 0, 0,
	0, 0, 0, 690, 0, 0, 0, 0, 670, 671,
	0, 696, 0, 0, 684, 0, 669, 0, 687, 688,
	689, 0, 0, 0, 0, 0, 0, 670, 690, 0,
	0, 0, 0, 684, 671, 0, 696, 0, 0, 0,
	0, 0, 0, 0, 0, 669, 0, 687, 688, 689,
	0, 0, 670, 0, 0, 0, 0, 690, 684, 0,
	0, 0, 0, 671, 0, 696, 0, 0, 0, 0,
	0, 697, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 670, 695, 0, 0, 0, 0, 684, 0, 0,
	697, 692, 0, 0, 0, 0, 0, 685, 0, 0,
	0, 695, 0, 0, 0, 0, 0, 0, 0, 0,
	692, 0, 0, 0, 0, 697, 685, 0, 691, 0,
	0, 0, 0, 0, 0, 0, 695, 0, 0, 0,
	0, 0, 0, 0, 0, 692, 0, 691, 0, 0,
	0, 685, 0, 0, 697, 0, 0, 0, 0, 0,
	686, 0, 0, 0, 0, 695, 0, 0, 0, 694,
	0, 0, 691, 0, 692, 0, 0, 0, 0, 686,
	685, 0, 0, 0, 0, 0, 0, 0, 694, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 691, 0, 0, 686, 0, 0, 0, 0, 0,
	0, 0, 0, 694, 0, 0, 0, 0, 693, 0,
	681, 682, 683, 0, 680, 677, 678, 679, 672, 673,
	674, 675, 676, 686, 0, 0, 0, 693, 1502, 681,
	682, 683, 694, 680, 677, 678, 679, 672, 673, 674,
	675, 676, 0, 0, 0, 0, 0, 1444, 0, 0,
	0, 0, 693, 0, 681, 682, 683, 0, 680, 677,
	678, 679, 672, 673, 674, 675, 676, 0, 0, 0,
	0, 0, 1443, 0, 0, 0, 0, 0, 0, 0,
	0, 693, 0, 681, 682, 683, 0, 680, 677, 678,
	679, 672, 673, 674, 675, 676, 669, 0, 687, 688,
	689, 1361, 0, 0, 0, 0, 0, 0, 690, 0,
	0, 0, 0, 0, 671, 669, 696, 687, 688, 689,
	0, 0, 0, 0, 0, 0, 0, 690, 0, 0,
	0, 0, 670, 671, 0, 696, 0, 0, 684, 0,
	669, 0, 687, 688, 689, 0, 0, 0, 0, 0,
	0, 670, 690, 0, 0, 0, 0, 684, 671, 0,
	696, 0, 0, 0, 0, 0, 0, 0, 0, 669,
	0, 687, 688, 689, 0, 0, 670, 0, 0, 0,
	0, 690, 684, 0, 0, 0, 0, 671, 0, 696,
	0, 0, 0, 0, 0, 697, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 670, 695, 0, 0, 0,
	0, 684, 0, 0, 697, 692, 0, 0, 0, 0,
	0, 685, 0, 0, 0, 695, 0, 0, 0, 0,
	0, 0, 0, 0, 692, 0, 0, 0, 0, 697,
	685, 0, 691, 0, 0, 0, 0, 0, 0, 0,
	695, 0, 0, 0, 0, 0, 0, 0, 0, 692,
	0, 691, 0, 0, 0, 685, 0, 0, 697, 0,
	0, 0, 0, 0, 686, 0, 0, 0, 0, 695,
	0, 0, 0, 694, 0, 0, 691, 0, 692, 0,
	0, 0, 0, 686, 685, 0, 0, 0, 0, 0,
	0, 0, 694, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 691, 0, 0, 686, 0,
	0, 0, 0, 0, 0, 0, 0, 694, 0, 0,
	0, 0, 693, 0, 681, 682, 683, 0, 680, 677,
	678, 679, 672, 673, 674, 675, 676, 686, 0, 0,
	0, 693, 1299, 681, 682, 683, 694, 680, 677, 678,
	679, 672, 673, 674, 675, 676, 0, 0, 0, 0,
	0, 1274, 0, 0, 0, 0, 693, 0, 681, 682,
	683, 0, 680, 677, 678, 679, 672, 673, 674, 675,
	676, 0, 0, 0, 0, 0, 937, 0, 0, 0,
	0, 0, 0, 0, 0, 693, 0, 681, 682, 683,
	0, 680, 677, 678, 679, 672, 673, 674, 675, 676,
	0, 0, 669, 1345, 687, 688, 689, 0, 0, 0,
	0, 0, 0, 0, 690, 0, 0, 0, 0, 0,
	671, 669, 696, 687, 688, 689, 0, 0, 0, 0,
	0, 0, 0, 690, 0, 0, 0, 0, 670, 671,
	0, 696, 0, 0, 684, 0, 669, 0, 687, 688,
	689, 0, 0, 0, 0, 0, 0, 670, 690, 0,
	0, 0, 845, 684, 671, 0, 696, 0, 0, 699,
	0, 0, 0, 0, 0, 669, 0, 687, 688, 689,
	0, 0, 670, 0, 0, 0, 1608, 690, 684, 0,
	698, 0, 0, 671, 0, 696, 0, 0, 0, 0,
	0, 697, 0, 0, 0, 0, 1183, 0, 1182, 0,
	0, 670, 695, 846, 0, 0, 0, 684, 0, 0,
	697, 692, 0, 0, 0, 0, 0, 685, 0, 0,
	0, 695, 0, 0, 0, 0, 0, 0, 0, 0,
	692, 0, 0, 0, 0, 697, 685, 0, 691, 0,
	0, 0, 0, 0, 0, 0, 695, 0, 0, 0,
	1607, 0, 0, 0, 0, 692, 0, 691, 0, 0,
	0, 685, 0, 0, 697, 0, 0, 0, 0, 0,
	686, 0, 0, 0, 0, 695, 0, 0, 0, 694,
	0, 0, 691, 0, 692, 0, 0, 0, 0, 686,
	685, 0, 0, 0, 0, 0, 0, 0, 694, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 691, 0, 0, 686, 0, 0, 0, 0, 0,
	0, 0, 0, 694, 0, 0, 0, 0, 693, 0,
	681, 682, 683, 0, 680, 677, 678, 679, 672, 673,
	674, 675, 676, 686, 0, 0, 0, 693, 0, 681,
	682, 683, 694, 680, 677, 678, 679, 672, 673, 674,
	675, 676, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 693, 0, 681, 682, 683, 0, 680, 677,
	678, 679, 672, 673, 674, 675, 676, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 693, 0, 681, 682, 683, 0, 680, 677, 678,
	679, 672, 673, 674, 675, 676, 669, 0, 687, 688,
	689, 0, 0, 0, 0, 0, 0, 0, 690, 0,
	0, 0, 0, 0, 671, 669, 696, 687, 688, 689,
	0, 0, 0, 0, 0, 0, 0, 690, 0, 0,
	0, 0, 670, 671, 0, 696, 0, 0, 684, 0,
	669, 0, 687, 688, 689, 0, 0, 0, 0, 0,
	0, 670, 690, 0, 0, 0, 0, 684, 671, 0,
	696, 0, 0, 0, 0, 0, 0, 0, 0, 669,
	0, 687, 688, 689, 0, 0, 670, 0, 0, 0,
	0, 690, 684, 0, 1184, 0, 0, 671, 0, 696,
	0, 0, 0, 0, 0, 697, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 670, 695, 0, 0, 0,
	0, 684, 0, 0, 697, 692, 0, 0, 0, 0,
	0, 685, 0, 0, 0, 695, 0, 1189, 0, 0,
	0, 0, 0, 0, 692, 0, 0, 0, 0, 697,
	685, 0, 691, 251, 0, 0, 0, 0, 0, 0,
	695, 0, 0, 0, 0, 0, 0, 0, 0, 692,
	0, 691, 0, 0, 0, 685, 0, 0, 697, 0,
	0, 0, 0, 0, 686, 0, 0, 0, 0, 695,
	0, 0, 0, 694, 0, 0, 691, 0, 692, 0,
	0, 0, 0, 686, 685, 0, 0, 0, 0, 0,
	0, 0, 694, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 691, 0, 1293, 686, 0,
	0, 0, 0, 0, 0, 0, 0, 694, 0, 0,
	0, 0, 693, 0, 681, 682, 683, 0, 680, 677,
	678, 679, 672, 673, 674, 675, 676, 686, 0, 0,
	0, 693, 0, 681, 682, 683, 694, 680, 677, 678,
	679, 672, 673, 674, 675, 676, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 693, 0, 681, 682,
	683, 0, 680, 677, 678, 679, 672, 673, 674, 675,
	676, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 693, 0, 681, 682, 683,
	0, 680, 677, 678, 679, 672, 673, 674, 675, 676,
	669, 0, 687, 688, 689, 0, 0, 0, 0, 0,
	0, 0, 690, 0, 0, 0, 0, 0, 671, 669,
	696, 687, 688, 689, 0, 0, 0, 0, 0, 0,
	0, 690, 0, 0, 1146, 0, 670, 671, 0, 696,
	0, 0, 684, 0, 669, 0, 687, 688, 689, 0,
	0, 0, 0, 0, 0, 670, 690, 0, 0, 0,
	0, 684, 671, 0, 696, 0, 0, 0, 0, 0,
	0, 0, 0, 669, 0, 687, 688, 689, 0, 0,
	670, 0, 0, 0, 0, 690, 684, 0, 0, 0,
	0, 671, 0, 696, 669, 0, 687, 688, 689, 697,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 670,
	695, 0, 671, 0, 696, 684, 0, 0, 697, 692,
	0, 0, 0, 0, 0, 685, 0, 0, 0, 695,
	670, 0, 0, 0, 0, 0, 684, 0, 692, 0,
	0, 0, 0, 697, 685, 0, 691, 0, 0, 0,
	0, 0, 0, 0, 695, 0, 1151, 0, 0, 0,
	0, 0, 0, 692, 0, 691, 0, 0, 0, 685,
	0, 0, 697, 0, 0, 0, 669, 0, 686, 0,
	0, 0, 0, 695, 0, 0, 0, 694, 0, 0,
	691, 0, 692, 697, 671, 0, 696, 686, 685, 0,
	0, 0, 0, 0, 695, 0, 694, 0, 0, 0,
	0, 0, 670, 692, 0, 0, 0, 0, 684, 685,
	0, 0, 686, 0, 0, 0, 0, 0, 0, 0,
	0, 694, 0, 0, 0, 0, 693, 0, 681, 682,
	683, 0, 680, 677, 678, 679, 672, 673, 674, 675,
	676, 686, 0, 0, 0, 693, 0, 681, 682, 683,
	694, 680, 677, 678, 679, 672, 673, 674, 675, 676,
	0, 0, 686, 0, 0, 697, 0, 0, 0, 0,
	693, 694, 681, 682, 683, 0, 680, 677, 678, 679,
	672, 673, 674, 675, 676, 692, 0, 0, 0, 0,
	0, 685, 0, 1153, 0, 1169, 1170, 1171, 0, 693,
	0, 681, 682, 683, 0, 680, 677, 678, 679, 672,
	673, 674, 675, 676, 1153, 0, 1169, 1170, 1171, 0,
	693, 0, 681, 682, 683, 0, 680, 677, 678, 679,
	672, 673, 674, 675, 676, 1166, 1153, 0, 1169, 1170,
	1171, 0, 0, 0, 686, 0, 0, 0, 0, 0,
	0, 0, 0, 694, 0, 0, 1166, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1166, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1173, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 693, 1172, 0, 0, 0, 0, 680, 677,
	678, 679, 672, 673, 674, 675, 676, 0, 1167, 0,
	0, 0, 0, 0, 1172, 873, 888, 865, 881, 880,
	0, 0, 866, 0, 0, 0, 890, 889, 0, 1167,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1167, 0, 0, 886, 0, 878, 877, 0, 0,
	0, 1168, 0, 0, 876, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 875, 0, 0,
	0, 0, 1168, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 869, 870,
	871, 0, 545, 0, 1168, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1163, 1164, 1165, 0, 1162, 1159, 1160, 1161, 1154,
	1155, 1156, 1157, 1158, 879, 0, 0, 0, 0, 0,
	0, 0, 1163, 1164, 1165, 0, 1162, 1159, 1160, 1161,
	1154, 1155, 1156, 1157, 1158, 0, 0, 0, 874, 0,
	0, 0, 0, 0, 1163, 1164, 1165, 0, 1162, 1159,
	1160, 1161, 1154, 1155, 1156, 1157, 1158, 0, 0, 0,
	0, 0, 0, 872, 0, 0, 0, 0, 0, 868,
	0, 0, 0, 0, 0, 867, 0, 0, 887, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 891,
}
var sqlPact = [...]int{

	110, -1000, 4, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 762,
	-1000, -1000, -1000, 545, 648, 215, 1089, 1089, -1000, -1000,
	15304, 1946, 412, 417, 412, 412, 412, 463, 570, 111,
	-1000, 671, -21, 15082, 12196, 1128, 2, 11530, 277, 110,
	11974, 12196, 14860, 985, 869, 11530, 14638, 14416, 14194, -1000,
	8230, -1000, -1000, -1000, -1000, 736, -1000, 1, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 734, -1000, 13972, 13972,
	654, -1000, -1000, 502, 335, 1133, -1000, 11, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 983, -1000, 720, 982, 980, 331, 687,
	-1000, 654, -1000, 654, -1000, -1000, -1000, 11530, -1000, 13750,
	884, 13528, -1000, 671, -1000, -1000, -1000, 782, 1120, 1120,
	1120, 1143, 112, 106, 111, -7, 12196, -1000, 278, -1000,
	-1000, -1000, -1000, -1000, -7, 6266, 6266, -1000, -1000, 277,
	-1000, 293, 10380, -127, -1000, 5778, -1000, 814, 1047, 569,
	566, 1046, 11530, 12196, 527, 13306, -1000, 1044, 94, 1032,
	-1000, -13, 1030, -1000, -14, -1000, -1000, -1000, -1000, -1000,
	-1000, 277, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 11752, 1496, 11752, -1000, -1000,
	-1000, 0, -1, 835, 981, 8474, 2725, 1082, 1123, -1000,
	-1000, -1000, 10, 3322, 12196, 995, 11752, 12196, -1000, 12196,
	-1000, 829, -1000, -1000, -4, -6, -1000, 108, -1000, 272,
	806, 13084, -1000, 799, -1000, 782, -1000, 688, 826, 6528,
	7260, 111, -1000, -1000, 111, 111, 7260, -1000, -1000, 12196,
	-7, 1164, 12196, 974, -8, -1000, 17125, -1000, -1000, 7260,
	7260, 7260, 7260, 7260, 636, -1000, -1000, -1000, 4052, -1000,
	-1000, -127, 263, 286, -1000, -1000, 260, -127, -1000, -1000,
	-1000, -1000, 259, 1290, 362, -1000, -1000, -1000, 7260, 261,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 993,
	258, 257, -1000, -1000, -1000, -1000, 256, 254, 253, 252,
	250, 248, 246, 244, 243, 241, 240, 239, 234, 600,
	-1000, 368, -1000, -1000, 368, 368, -1000, 200, 200, 201,
	-1000, -1000, -1000, 200, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 208, 41, -1000, -1000, -1000, 12196, -127,
	-1000, 3079, 3322, 7260, -19, -1000, 17744, -1000, -75, 676,
	-1000, 11076, 1107, 1099, 1100, 11530, 452, 445, 12196, 363,
	105, 1162, 9896, -1000, 12196, 12196, -1000, 12196, -1000, -1000,
	12196, 12196, 12196, -21, 10622, 441, -15, 12196, 12196, -1000,
	970, 589, 864, 742, -1000, -1000, -1000, -1000, -9, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1257,
	-1000, -1000, -1000, -1000, 1279, -9, -1000, -1000, -1000, -1000,
	-1000, 1286, -1000, -1000, -1000, -1000, 3322, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 12196, -1000, -1000, -1000, -1000, 589, 864,
	-1000, 11530, 10844, 1025, 719, 798, -1000, 1024, -1000, -1000,
	-1000, -1000, 17744, -1000, 17744, 539, 876, -1000, 876, -10,
	-1000, 17096, -1000, 206, -20, -1000, 363, 9654, 6266, 18114,
	12196, 455, 7260, 7260, 7260, 7260, 7260, 7260, 7260, 7260,
	7260, 7260, 7260, 7260, 7260, 7260, 7260, 7260, 7260, 7260,
	7260, 7260, 7260, 841, 440, 897, 672, 199, 3322, -1000,
	1227, 1227, 1227, 17794, 17794, 180, -150, 16770, -12, -127,
	-1000, -1000, 5272, 5028, -127, 3564, -1000, 666, 1269, 366,
	17744, 942, 907, 205, 96, 93, 7260, 739, 7260, 7504,
	7260, 7260, 4296, 7260, 7260, 7260, 7260, 7260, 7260, -1000,
	204, -1000, -1000, -1000, -1000, 1267, -1000, -1000, 1264, -1000,
	1253, 363, 92, -1000, -1000, -1000, -1000, 2242, 5778, -1000,
	633, 12196, 12196, 12196, -1000, -1000, 796, 12862, -1000, 18114,
	12196, -1000, 203, 202, 846, 844, 12196, 12196, 12640, 12418,
	12196, 616, 12196, 12196, 564, -1000, 7260, 716, -1000, 9190,
	373, 12196, 35, -1000, -1000, -1000, 316, 12196, -1000, -1000,
	-1000, 94, -1000, -13, -1000, -1000, 12196, -15, -46, 12196,
	-1000, -1000, -1000, 571, -1000, 575, -1000, 8716, -1000, -1000,
	-1000, 666, -1000, -98, -1000, -1000, -1000, -1000, 90, -52,
	-1000, -1000, -1000, -1000, 12196, 245, 12196, 12196, 1023, 12196,
	-1000, -1000, -1000, 7260, -1000, -1000, -1000, -21, 12196, -1000,
	906, -63, 1183, 11308, 11308, -1000, 8948, -1000, -1000, 1167,
	-1000, -1000, -1000, -1000, 38, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 201, 600, 200, 200, 200,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 368, 368,
	368, -1000, -1000, 330, 563, 563, 1154, 1154, 1154, 743,
	743, 771, 2342, 17876, 17876, 17876, 1944, 288, 288, 17876,
	17876, 17876, 17794, 17773, 1809, 7260, 439, 644, 199, 7260,
	-1000, 1009, -1000, -1000, -1000, 969, 187, 7504, 7504, -1000,
	-1000, -1000, 4052, -1000, -1000, 186, 7260, -1000, 7260, -24,
	-139, -1000, 17744, -1000, -31, -1000, -1000, -38, 7260, 7260,
	7260, 82, -1000, 438, -1000, 436, 434, 433, -1000, 185,
	81, 519, -1000, 7260, 659, 183, 182, 7260, -1000, -1000,
	17719, 76, 964, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	74, 17700, 72, 18003, -1000, 7504, 7504, 7504, 4052, 179,
	71, 17071, -138, 17449, 6022, 6022, 6022, 70, 17420, 7260,
	-138, 15802, 15777, 15752, -32, -36, -37, 1249, -42, 69,
	67, 906, -1000, -1000, 7260, -1000, -1000, -1000, 429, 428,
	1016, -1000, 773, -1000, 613, 7260, 12196, 176, 171, 617,
	-1000, 1011, 707, 1008, 707, -1000, -75, 591, -1000, -1000,
	427, 17744, -1000, 1104, -44, -1000, -1000, 363, 9896, 5778,
	-48, -1000, -98, -98, -1000, -1000, -1000, -1000, -1000, 12196,
	-1000, 10844, 169, 12196, 168, 165, 12196, -1000, -1000, 63,
	-1000, -1000, -1000, -1000, -1000, 903, 1140, 9654, 859, 856,
	9654, 1274, 667, 667, 667, -1000, -1000, -1000, 12196, 157,
	-1000, 9432, 62, 1183, 292, 290, -1000, 1244, 7260, 1809,
	7260, 7504, 7504, -1000, 1809, -1000, -1000, -1000, -1000, 955,
	156, 7260, 18114, 2459, 2088, -50, 4784, -100, 16745, 7260,
	-1000, -1000, 286, -1000, 59, 5534, -1000, 17376, -33, -33,
	-1000, 815, 842, 653, 533, 1243, 1285, 1052, -1000, 7260,
	17395, -1000, 10138, 364, 677, 16726, 18114, -1000, 7260, -1000,
	948, 7260, -1000, 18114, 7504, 7504, 7504, 7504, 7504, 7504,
	7504, 7504, 7504, 7504, 7504, 7504, 7504, 7504, 7504, 7504,
	7504, 7504, 896, 7504, 1220, 1220, 1220, -114, 4540, -1000,
	990, 948, 7260, 7260, 18114, 56, 55, 52, -1000, 7260,
	-138, 7260, 7260, 7260, -1000, -1000, -1000, 46, -1000, 1242,
	-1000, -1000, 903, 16799, 12196, 12196, 12196, 1005, 936, -1000,
	16475, -54, 12196, 12196, -1000, 880, 910, 392, 12196, -1000,
	12196, -1000, 12196, 12196, 12196, 12196, 163, -21, -1000, -1000,
	-1000, 310, -1000, -1000, 7988, 155, 10844, 7988, 701, -1000,
	360, 7260, 7260, 1183, 9654, 9654, 1380, 854, 9654, -1000,
	-1000, -1000, -1000, 153, 12196, 11308, 432, 1235, 45, 1159,
	1809, 764, 229, 7260, 18114, 144, -55, -1000, 7260, 7260,
	-1000, -59, -1000, 7260, -1000, 17744, -1000, 1282, 7260, 43,
	34, 33, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 31,
	-1000, -1000, 17744, 7260, -1000, -1000, 15526, 7260, 29, -1000,
	27, 17744, 990, 17744, -1000, 578, 578, 1220, 1220, 1220,
	506, 506, 275, 1587, 238, 238, 238, 448, 406, 406,
	238, 238, 238, 938, 883, 150, 18024, 7260, -61, -1000,
	-1000, -1000, 17744, 17744, 25, -1000, -1000, -1000, -138, 2415,
	16446, 16421, -1000, 23, 360, -1000, -1000, -1000, -1000, 12196,
	-1000, 12196, -1000, 12196, 785, -1000, -1000, 843, 149, 7504,
	12196, -1000, 663, -65, -66, 781, -1000, 775, 7260, -1000,
	18114, 707, 707, -1000, 425, 422, -1000, 1057, 7988, 1096,
	-1000, 148, -67, -1000, 60, 1112, 7260, -1000, -1000, 130,
	7988, 21, -71, 12196, -1000, 12196, 17744, -138, -1000, 1380,
	-1000, 126, 7260, 9654, -1000, 12196, -77, -1000, -1000, 276,
	107, -1000, 7260, 7260, 144, -82, -1000, 18114, 1809, 1809,
	-1000, 16402, -1000, 17376, -1000, -1000, -1000, -1000, 17744, 637,
	-1000, 16151, -1000, -1000, -1000, 7504, 914, 122, 18114, 16122,
	-1000, -1000, 7260, -1000, -1000, -1000, -1000, -1000, 1034, -1000,
	-1000, -1000, 7260, 18024, 61, -1000, 120, -1000, -1000, -1000,
	574, -1000, -1000, 17744, 1121, -1000, -1000, 12196, 12196, 485,
	-83, 12196, -1000, -1000, 3808, 663, 7988, 1137, -127, 12196,
	1137, 16097, 3564, -84, -1000, 663, 114, -116, -1000, 1160,
	-1000, 12196, 17744, -1000, -88, -1000, -1000, -1000, 1809, 1809,
	-1000, -1000, -1000, 20, 677, 1138, -1000, 18046, 7504, 18114,
	-89, -1000, 16078, -1000, 15827, 819, 12196, 12196, 12196, 380,
	12196, -1000, -1000, 515, -1000, 363, -1000, -1000, -1000, -1000,
	-1000, -1000, 1112, -38, 663, -1000, 7988, 12196, 109, -101,
	-1000, -1000, 567, 7260, 18046, -102, -1000, -1000, -1000, 681,
	699, -107, -117, 61, -1000, 7260, -1000, 9896, -1000, 1137,
	18, -1000, -118, -1000, -1000, -1000, 14, 7016, 7016, -138,
	-1000, -1000, 693, 692, 554, -1000, -1000, -1000, -1000, -1000,
	819, 17744, -128, -1000, -1000, 663, -1000, -1000, -1000, 7746,
	732, 555, 17052, -1000, -1000, 1061, -1000, 385, 894, 894,
	681, -1000, -1000, 1196, -1000, -1000, -1000, -1000, -1000, -1000,
	1206, -1000, -1000, 818, -1000, -1000, 6772, -1000, -1000, -1000,
	-1000,
}
var sqlPgo = [...]int{

	0, 1499, 1498, 1178, 1494, 1490, 1489, 1487, 1485, 78,
	1482, 1480, 88, 1479, 77, 1477, 1476, 1473, 61, 1472,
	1471, 1470, 1469, 75, 50, 1688, 110, 95, 1468, 1466,
	1463, 10, 68, 72, 1462, 60, 80, 82, 1168, 40,
	38, 29, 70, 1461, 1460, 1459, 1458, 26, 1455, 1450,
	1449, 11, 31, 14, 1448, 21, 107, 1447, 1446, 71,
	1445, 69, 24, 93, 54, 1444, 283, 1442, 13, 47,
	1440, 33, 1439, 45, 52, 99, 1436, 564, 37, 23,
	41, 1435, 1434, 1430, 1428, 62, 59, 39, 1419, 1398,
	46, 1395, 94, 96, 1394, 1393, 1392, 1391, 1390, 1389,
	1166, 1388, 1384, 608, 7, 32, 43, 3, 30, 0,
	715, 597, 1383, 35, 34, 53, 28, 36, 17, 1376,
	74, 1375, 1373, 1371, 1368, 1367, 44, 1364, 42, 98,
	27, 63, 67, 19, 22, 57, 86, 122, 81, 1363,
	90, 1361, 49, 1360, 1358, 960, 58, 1356, 1355, 1354,
	945, 866, 711, 520, 1353, 1352, 562, 538, 1349, 1343,
	56, 1342, 1341, 102, 1340, 97, 114, 1339, 84, 1336,
	64, 1334, 567, 112, 85, 1333, 92, 48, 1326, 1325,
	1323, 16, 2, 8, 6, 5, 4, 20, 18, 1322,
	1318, 89, 65, 1314, 561, 1313, 1312, 25, 1311, 1309,
	15, 1307, 12, 1306, 9, 1, 1304, 105, 1303, 79,
	1302, 1195, 1301, 108, 1300, 1299, 1249, 55,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	4, 4, 33, 33, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 29,
	29, 35, 35, 35, 34, 34, 30, 30, 5, 5,
	5, 9, 10, 10, 10, 10, 10, 10, 63, 63,
	62, 62, 65, 65, 11, 11, 12, 12, 12, 12,
	141, 141, 140, 13, 17, 207, 207, 207, 211, 211,
	212, 212, 213, 213, 213, 213, 213, 213, 213, 209,
	209, 19, 19, 19, 100, 100, 102, 102, 102, 102,
	37, 99, 99, 99, 99, 101, 101, 101, 101, 165,
	163, 163, 170, 170, 170, 44, 44, 44, 44, 44,
	45, 45, 45, 162, 162, 162, 162, 171, 171, 171,
	171, 171, 171, 46, 46, 46, 169, 169, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 164,
	164, 208, 208, 210, 210, 8, 8, 47, 47, 48,
	48, 106, 106, 106, 105, 179, 179, 180, 180, 180,
	181, 181, 181, 181, 181, 181, 181, 178, 178, 176,
	176, 177, 177, 177, 177, 214, 214, 104, 104, 51,
	51, 184, 184, 184, 184, 182, 182, 182, 182, 182,
	185, 183, 186, 186, 186, 186, 186, 129, 129, 129,
	22, 7, 7, 89, 89, 55, 55, 133, 133, 133,
	41, 41, 31, 31, 31, 16, 16, 16, 16, 16,
	16, 16, 16, 16, 90, 90, 91, 91, 21, 21,
	21, 21, 21, 216, 216, 103, 103, 103, 103, 103,
	36, 6, 6, 14, 43, 43, 96, 96, 96, 98,
	98, 98, 97, 97, 97, 23, 68, 68, 69, 69,
	139, 70, 70, 18, 18, 25, 25, 24, 24, 24,
	24, 24, 24, 26, 26, 27, 27, 27, 27, 27,
	27, 27, 192, 192, 192, 194, 194, 191, 15, 15,
	15, 15, 193, 193, 215, 215, 77, 77, 77, 50,
	49, 49, 53, 53, 52, 54, 54, 132, 75, 75,
	75, 75, 92, 93, 93, 94, 94, 95, 95, 74,
	74, 116, 116, 28, 28, 59, 59, 60, 60, 134,
	134, 134, 134, 135, 135, 135, 135, 135, 135, 130,
	130, 130, 130, 131, 131, 80, 80, 80, 80, 78,
	78, 79, 79, 136, 136, 136, 136, 76, 76, 137,
	137, 137, 107, 107, 142, 142, 142, 58, 58, 58,
	143, 143, 143, 143, 143, 143, 143, 143, 143, 143,
	144, 144, 144, 144, 146, 146, 146, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	147, 147, 154, 154, 155, 155, 156, 157, 148, 148,
	149, 149, 150, 151, 158, 158, 158, 160, 160, 152,
	152, 153, 86, 86, 86, 86, 86, 86, 86, 86,
	86, 86, 86, 86, 86, 86, 87, 87, 109, 109,
	109, 109, 109, 109, 109, 109, 109, 109, 109, 109,
	109, 109, 109, 109, 109, 109, 109, 109, 109, 109,
	109, 109, 109, 109, 109, 109, 109, 109, 109, 109,
	109, 109, 109, 109, 109, 109, 109, 109, 109, 109,
	109, 109, 109, 109, 109, 109, 109, 109, 109, 109,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 187,
	187, 187, 187, 187, 187, 187, 189, 189, 190, 190,
	188, 188, 188, 188, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 188, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 188, 188, 195, 195, 196, 196, 197,
	197, 198, 198, 200, 201, 201, 201, 202, 206, 206,
	199, 199, 203, 203, 203, 204, 204, 205, 205, 205,
	205, 205, 120, 120, 120, 121, 121, 122, 64, 64,
	118, 118, 117, 117, 117, 119, 119, 81, 159, 159,
	159, 159, 159, 159, 159, 82, 82, 88, 83, 83,
	84, 84, 84, 84, 84, 84, 113, 114, 85, 85,
	85, 115, 115, 123, 127, 127, 126, 125, 125, 124,
	124, 108, 108, 108, 108, 108, 71, 71, 217, 217,
	128, 128, 72, 72, 73, 67, 67, 66, 66, 138,
	138, 138, 138, 61, 61, 42, 42, 56, 56, 57,
	57, 40, 40, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 161, 161, 161, 38, 38, 38,
	39, 39, 167, 167, 167, 168, 168, 168, 168, 166,
	166, 166, 166, 166, 172, 172, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 172, 174, 174,
	174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
	174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
	174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
	174, 174, 174, 174, 174, 174, 174, 174, 174, 173,
	173, 173, 173, 173, 173, 173, 173, 173, 173, 173,
	173, 173, 175, 175, 175, 175, 175, 175, 175, 175,
	175, 175, 175, 175, 175, 175, 175, 175, 175, 175,
	175, 175, 175, 175, 175, 175, 175, 175, 175, 175,
	175, 175, 175, 175, 175, 175, 175, 175, 175, 175,
	175, 175, 175, 175, 175, 175, 175, 175, 175, 175,
	175, 175, 175, 175, 175, 175, 175, 175, 175, 175,
	175, 175, 175, 175, 175, 175, 175, 175, 175, 175,
	175, 175, 175, 175, 175, 175, 175, 175, 175, 175,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	4, 6, 1, 3, 2, 5, 3, 6, 4, 6,
	6, 6, 4, 8, 2, 3, 3, 6, 4, 3,
	2, 1, 1, 0, 2, 0, 2, 0, 1, 1,
	1, 5, 3, 5, 4, 6, 3, 5, 1, 3,
	1, 2, 2, 3, 2, 5, 1, 1, 1, 1,
	1, 3, 1, 6, 6, 1, 2, 2, 1, 1,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 2, 3, 3, 2, 1, 1, 1, 3, 3,
	2, 3, 3, 3, 3, 1, 3, 3, 2, 1,
	1, 3, 1, 1, 1, 2, 2, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	1, 1, 1, 1, 1, 0, 1, 1, 2, 2,
	4, 2, 4, 4, 3, 3, 4, 3, 2, 2,
	0, 2, 0, 2, 0, 6, 9, 1, 0, 1,
	3, 1, 1, 1, 3, 2, 0, 3, 1, 2,
	2, 1, 1, 2, 4, 2, 5, 6, 7, 3,
	1, 4, 5, 5, 10, 1, 1, 4, 0, 3,
	0, 2, 2, 2, 0, 1, 1, 2, 2, 0,
	3, 3, 2, 1, 1, 2, 2, 1, 2, 1,
	4, 10, 13, 1, 0, 1, 3, 3, 3, 5,
	2, 0, 1, 1, 0, 6, 6, 8, 6, 8,
	8, 10, 8, 10, 1, 0, 2, 0, 3, 3,
	2, 2, 2, 1, 0, 1, 1, 3, 3, 0,
	3, 3, 6, 6, 1, 3, 1, 4, 2, 8,
	5, 0, 4, 3, 0, 7, 1, 3, 1, 1,
	3, 5, 5, 1, 1, 3, 3, 1, 2, 3,
	2, 3, 4, 1, 1, 8, 8, 1, 2, 4,
	4, 4, 2, 2, 3, 1, 3, 6, 1, 1,
	1, 1, 1, 0, 1, 0, 1, 1, 0, 1,
	1, 0, 1, 0, 3, 1, 3, 2, 2, 2,
	1, 1, 2, 2, 3, 1, 1, 1, 1, 3,
	0, 2, 0, 2, 3, 2, 0, 1, 3, 2,
	2, 1, 4, 3, 4, 5, 4, 5, 4, 5,
	2, 4, 1, 1, 0, 2, 2, 2, 1, 1,
	0, 4, 2, 1, 2, 2, 4, 1, 3, 1,
	2, 3, 2, 0, 2, 5, 2, 3, 4, 0,
	1, 1, 1, 1, 2, 4, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 5, 0, 1, 1, 1,
	1, 1, 1, 2, 2, 2, 2, 2, 1, 1,
	3, 0, 1, 1, 1, 1, 5, 2, 1, 1,
	1, 1, 4, 1, 2, 2, 1, 1, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 3,
	3, 3, 3, 3, 3, 0, 1, 4, 1, 3,
	3, 5, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 2, 3, 4, 4,
	5, 3, 4, 3, 3, 4, 3, 4, 3, 4,
	5, 6, 6, 7, 6, 7, 6, 7, 3, 4,
	1, 3, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 5, 6, 6, 7, 1, 1, 1,
	3, 1, 1, 1, 2, 2, 2, 1, 1, 3,
	5, 6, 8, 6, 6, 4, 4, 1, 1, 1,
	5, 1, 3, 1, 3, 1, 1, 1, 1, 6,
	4, 4, 4, 4, 6, 5, 5, 5, 4, 8,
	6, 6, 4, 4, 4, 5, 0, 5, 0, 2,
	0, 1, 3, 3, 2, 2, 0, 6, 1, 0,
	3, 0, 2, 2, 0, 1, 4, 2, 2, 2,
	2, 2, 4, 3, 5, 4, 3, 5, 1, 3,
	1, 3, 3, 3, 2, 1, 3, 3, 1, 1,
	1, 1, 1, 1, 1, 4, 3, 2, 3, 0,
	3, 3, 2, 2, 1, 0, 2, 2, 3, 2,
	1, 1, 3, 5, 1, 2, 4, 2, 0, 1,
	0, 2, 2, 2, 3, 5, 1, 2, 1, 0,
	1, 1, 1, 3, 3, 1, 0, 1, 3, 3,
	2, 1, 1, 1, 3, 1, 2, 1, 3, 3,
	0, 1, 2, 1, 1, 1, 1, 6, 2, 3,
	5, 1, 1, 1, 1, 2, 2, 1, 1, 1,
	1, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -9, -10, -11, -13,
	-14, -16, -17, -18, -19, -20, -21, -22, -23, 19,
	-6, -7, -8, -193, 81, 87, 99, 182, -24, -25,
	195, 196, 29, 203, 50, 83, 184, 221, 56, -192,
	-27, -26, 265, 241, 247, 191, -28, 209, 234, 268,
	209, 68, 110, 76, 113, 228, 68, 110, 209, -12,
	265, -18, -14, -23, -9, -211, 18, -212, -213, 56,
	81, 99, 191, 113, 76, 228, -211, -100, 131, 193,
	217, -101, -99, -165, 213, 140, -62, -38, 4, -172,
	-174, 16, 17, 19, 28, 29, 33, 37, 39, 49,
	50, 51, 53, 55, 58, 59, 66, 67, 68, 69,
	71, 76, 80, 81, 87, 91, 92, 94, 100, 105,
	106, 113, 121, 123, 128, 134, 136, 137, 138, 139,
	142, 143, 144, 146, 149, 151, 152, 158, 161, 164,
	165, 168, 171, 172, 173, 175, 176, 178, 179, 180,
	182, 184, 185, 187, 189, 190, 192, 195, 196, 198,
	200, 202, 203, 206, 204, 210, 211, 221, 222, 223,
	224, 227, 228, 231, 232, 233, 237, 242, 243, 244,
	245, 30, 31, 32, 34, 35, 38, 42, 43, 45,
	70, 72, 73, 86, 88, 93, 101, 103, 107, 108,
	114, 115, 116, 118, 126, 148, 150, 159, 163, 167,
	169, 174, 186, 199, 205, 207, 214, 218, 219, 234,
	235, 4, 68, 49, 69, 100, 110, 210, 213, 217,
	18, -216, 217, 217, -216, -216, -216, -215, 209, 209,
	-89, 68, 226, -26, -27, -25, -52, -53, 225, 117,
	85, 157, -24, -25, -192, -194, 175, -191, -38, 131,
	140, 193, 217, 213, -194, -49, -50, 18, 78, 269,
	-136, -42, 155, -38, -73, 265, -3, -136, 107, -38,
	-42, 107, 97, 119, -137, -136, -38, 107, -61, 107,
	-42, -63, 107, -62, -141, -140, -168, 4, -172, -174,
	-173, 234, 47, 57, 98, 112, 120, 122, 127, 129,
	141, 160, 162, 183, 197, 154, 269, 154, -100, -100,
	-102, -36, -37, 121, 171, 215, 250, 97, 245, -46,
	6, 74, -65, 267, 97, -208, 154, 97, -164, 97,
	245, 121, 171, -103, -36, -37, -103, -76, -136, -62,
	107, 110, -38, 107, -52, -53, -75, -92, -93, 130,
	153, -77, 18, 78, -77, -77, 37, 266, 266, 269,
	-194, -57, 265, -67, -66, -138, -109, 258, -111, 256,
	257, 262, 145, 246, -120, -42, -112, 9, 265, -123,
	-189, -25, 86, 24, -121, -122, 186, -38, 8, 5,
	6, 7, -40, -144, -153, 220, 89, 147, 40, -187,
	-188, 4, -172, -167, -145, -155, -149, -152, 118, 47,
	61, 64, 62, 65, 194, 229, 41, 88, 163, 167,
	207, 218, 219, 107, 148, 108, 45, 101, 126, 80,
	31, 32, 34, 35, 42, 43, 70, 72, 73, 93,
	114, 115, 116, 150, 174, 199, 214, 235, -173, -156,
	-157, -150, -151, -158, -66, -73, 258, -42, 265, -71,
	-108, 267, 270, 263, -72, -128, -109, 74, -33, 178,
	-32, 17, 19, 81, 232, 86, 178, 178, 86, -137,
	-43, -42, 195, -38, 25, 86, -35, 269, 39, 180,
	86, 269, 86, 266, 269, -207, -61, 209, 68, -213,
	-207, 269, 269, 128, -45, 134, 144, 105, -163, 74,
	-170, -162, -129, 9, 220, 89, 154, -169, 5, 257,
	-161, -168, 6, 8, 256, -163, 74, 59, -171, 6,
	4, -153, -129, 74, 131, 118, 267, -166, 4, -172,
	-174, -173, -175, 18, 20, 21, 22, 23, 24, 25,
	26, 27, 36, 40, 41, 44, 46, 48, 54, 56,
	60, 61, 62, 63, 64, 65, 74, 75, 77, 78,
	79, 82, 83, 85, 89, 90, 95, 96, 97, 99,
	102, 104, 109, 110, 111, 117, 119, 124, 125, 130,
	132, 133, 145, 147, 153, 154, 155, 156, 157, 166,
	170, 177, 181, 191, 194, 201, 208, 209, 212, 215,
	216, 220, 225, 226, 229, 230, 236, 238, 239, 240,
	241, -165, -210, 95, -207, -165, -165, 128, 269, 269,
	-35, 269, 265, 145, -39, 107, -38, 145, -75, -93,
	-92, -94, -109, 18, -109, -111, -26, -26, -26, -54,
	-132, -109, -191, 25, -56, -38, -59, 97, 269, 10,
	46, 28, 256, 257, 258, 259, 260, 253, 254, 255,
	252, 248, 249, 250, 52, 135, 188, 12, 13, 14,
	22, 156, 129, 246, 197, 120, 30, 109, 25, 4,
	-109, -109, -109, -109, -109, 162, -25, -109, -64, -71,
	-25, -117, 263, 265, -71, 265, 6, 6, 265, -124,
	-109, -195, 242, 95, 265, 265, 265, 265, 265, 265,
	265, 265, 265, 265, 265, 265, 265, 265, 265, 169,
	-160, 237, -160, -160, -146, 265, -146, -147, 265, -146,
	265, -59, -42, -108, -166, 258, -166, -109, 269, 266,
	269, 215, -90, 54, 48, -105, 107, 48, -176, -38,
	54, -177, 44, 226, 170, 96, -90, 54, -90, 54,
	54, -136, 215, 215, -42, -107, 239, -96, -18, 265,
	74, 25, -68, -69, -139, -70, -42, 265, -38, -38,
	-42, -61, -62, -63, -12, -140, 215, -61, -56, 97,
	-37, -36, -44, 173, 200, 179, 192, 269, 5, 8,
	8, 6, -166, -209, -38, -37, -36, -136, -47, -48,
	-106, -105, -178, -176, 110, 226, 86, 154, 145, 86,
	-95, 186, 187, 269, -31, 26, 77, 265, 269, 266,
	-107, -60, -134, -136, -25, -135, 265, -138, -142, -143,
	-145, -154, -148, -152, -153, 33, 38, 211, 205, 114,
	115, 116, 199, 31, 174, 93, 80, 73, 72, 150,
	35, 34, -156, -157, -150, -151, 70, 214, 32, 43,
	42, 235, -62, 213, -109, -109, -109, -109, -109, -109,
	-109, -109, -109, -109, -109, -109, -109, -109, -109, -109,
	-109, -109, -109, -109, -109, 129, 197, 30, 109, 215,
	147, 145, 220, 89, 227, 78, 151, -217, 208, 27,
	-115, -25, 265, -166, -120, 186, 265, 266, 269, -64,
	-119, 264, -109, -117, -64, 266, 266, -64, 236, 18,
	78, 258, -86, 244, 138, 71, 106, 137, -87, 190,
	8, -127, -126, 238, -196, 91, 102, 265, 266, 266,
	-109, -81, -159, 4, 244, 138, 71, 106, 137, 190,
	-82, -109, -83, -110, -111, 256, 257, 262, 265, 186,
	-84, -109, -64, -109, 36, 125, 216, -85, -109, 97,
	-64, -109, -109, -109, -64, -64, -64, 265, 8, 8,
	8, -107, 266, 264, 271, -128, -32, -42, -38, -38,
	145, -105, 107, -142, -38, 265, 265, 123, 123, -38,
	-38, 107, -38, 107, -38, -38, -33, 178, -38, -38,
	178, -109, -98, 154, -61, 234, -38, -59, 269, 250,
	-61, -35, -209, -209, 224, 51, 173, -170, -86, 269,
	266, 269, -39, 110, -62, -42, 86, -38, -132, -15,
	-18, -14, -23, -9, -38, -74, 102, 269, 57, -80,
	122, 141, 98, 127, 183, 112, -131, -130, 25, -38,
	-131, -25, -135, -134, -58, 24, -86, 265, 245, -109,
	215, -217, 208, -115, -109, 147, 220, 89, 227, 78,
	151, 97, 265, -110, -110, -64, 265, -64, -109, 269,
	264, 264, 269, 266, -53, 269, -52, -109, -64, -64,
	266, 215, 215, 215, 215, 265, 266, -125, -126, 82,
	-109, -201, 161, 265, 265, -109, 25, 266, 97, 266,
	-88, 166, 266, 10, 256, 257, 258, 259, 260, 253,
	254, 255, 252, 248, 249, 250, 52, 135, 188, 12,
	13, 14, 120, 109, -110, -110, -110, -64, 265, 266,
	-113, -114, 97, 95, 25, -85, -85, -85, 266, 97,
	-64, 269, 269, 269, 266, 266, 266, 8, 266, 269,
	266, 266, -74, -109, 215, 215, 86, 145, -179, -177,
	-109, -56, 265, 265, -29, 81, 195, -91, 86, -35,
	86, -35, 215, -90, 54, 215, 53, 266, -107, -69,
	-128, 266, -38, -106, 265, -39, 265, 265, -38, 266,
	-116, 104, 37, -134, 122, 122, -134, -80, 122, -78,
	160, -78, -78, -38, 265, 266, 263, 263, 8, -109,
	-109, -110, -110, 97, 265, -109, -118, -142, 22, 22,
	266, -64, 266, 269, 266, -109, -117, 266, 236, -53,
	-53, -53, 138, 106, 137, -87, 137, -87, -87, 8,
	6, 83, -109, 212, -202, -38, 265, 239, -52, 266,
	-142, -109, -113, -109, -142, -110, -110, -110, -110, -110,
	-110, -110, -110, -110, -110, -110, -110, -110, -110, -110,
	-110, -110, -110, 78, 145, 151, -110, 269, -64, 266,
	-114, -113, -109, -109, -142, 266, 266, 266, -64, -109,
	-109, -109, 266, 8, -116, 264, -38, -38, -105, 86,
	-180, 54, -181, 46, 145, 147, 226, 170, 44, 74,
	177, 266, 266, -56, -56, 145, 74, 145, 74, 67,
	222, -38, -38, -42, -38, -38, -38, -97, 265, 154,
	-18, 250, -55, -133, -38, -190, 265, -187, -188, -40,
	265, -47, -55, 154, -197, 240, -109, -64, -134, -134,
	-79, 230, 154, 122, -134, 265, -56, -130, 264, 8,
	8, 266, 22, 22, -109, -118, 266, 269, -109, -109,
	266, -109, 6, -109, 266, 266, 266, 266, -109, -206,
	-38, -109, 266, 266, -114, 97, 78, 151, 265, -109,
	266, 266, 269, 266, 266, 266, -197, -105, -38, -62,
	147, 123, 265, -110, -42, -104, -214, 55, 206, 266,
	266, 147, 147, -109, -142, -35, -35, 215, 215, 79,
	-55, 54, -73, -25, 265, 266, 269, -41, -71, 46,
	-41, -109, 265, -55, 266, 266, -42, -198, -200, -38,
	-79, 265, -109, -134, -56, 266, 264, 264, -109, -109,
	266, -142, 266, -53, -199, 165, 266, -110, 97, 265,
	-118, 266, -109, -181, -109, -51, 265, 265, 177, -34,
	46, -38, -38, 228, 146, 266, -38, -104, -133, -31,
	-62, -31, 266, -64, 266, -104, 265, 269, 25, -56,
	266, 266, -53, 37, -110, -118, 266, 266, 266, -184,
	136, -56, -56, -42, -30, 230, -62, 195, -107, -41,
	-53, -104, -55, -200, -202, 266, -203, 172, 187, -64,
	266, -182, -185, -183, 154, 98, 164, 198, 266, 266,
	-51, -109, -68, -31, 266, 266, 266, -204, -205, 30,
	223, 59, -109, -204, -183, 154, -185, 154, 228, 76,
	-184, -107, -104, -205, 168, 94, 186, 168, 94, -186,
	143, 180, 39, 195, -186, -182, 22, 16, 147, 74,
	-205,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 0,
	48, 49, 50, 0, 0, 303, 0, 0, 273, -2,
	0, 0, 244, 0, 244, 244, 244, 305, 214, 302,
	-2, 313, 0, 0, 0, 311, 287, 0, 0, -2,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 64,
	0, 66, 67, 68, 69, 0, 78, 79, 80, 82,
	83, 84, 85, 86, 87, 88, 0, 91, 748, 782,
	793, 95, 105, 0, 843, -2, 109, 60, 697, 698,
	699, 714, 715, 716, 717, 718, 719, 720, 721, 722,
	723, 724, 725, 726, 727, 728, 729, 730, 731, 732,
	733, 734, 735, 736, 737, 738, 739, 740, 741, 742,
	743, 744, 745, 746, 747, 749, 750, 751, 752, 753,
	755, 756, 757, 758, 759, 760, 761, 762, 763, 764,
	765, 766, 767, 768, 769, 770, 771, 772, 773, 774,
	775, 776, 777, 778, 779, 780, 781, 783, 784, 785,
	786, 787, 788, 789, 790, 791, 792, 794, 795, 796,
	797, 798, 799, 800, 801, 802, 803, 804, 805, 806,
	807, 808, 809, 810, 811, 812, 813, 814, 815, 816,
	817, 818, 819, 820, 821, 822, 823, 824, 825, 826,
	827, 828, 829, 830, 831, 832, 833, 834, 835, 836,
	837, 838, 839, 840, 841, 842, 844, 845, 846, 847,
	848, 138, 139, 0, 141, 152, 0, 150, 0, 0,
	148, 249, 243, 249, 240, 241, 242, 0, 304, 0,
	0, 0, 213, -2, 283, 284, -2, 0, 308, 308,
	308, 0, 0, 284, 0, 292, 770, 295, 680, 748,
	754, 782, 793, 843, 293, 666, 0, 310, 309, 0,
	288, 363, 0, 675, 333, 0, 2, 0, 825, 0,
	0, 825, 0, 0, 0, 369, 52, 825, 43, 825,
	673, 56, 825, 58, 0, 70, 72, 705, 706, 707,
	708, 847, 849, 850, 851, 852, 853, 854, 855, 856,
	857, 858, 859, 860, 861, 0, 0, 0, 92, 93,
	94, 96, 97, 0, 0, 0, 0, 0, 0, 108,
	133, 134, 61, 0, 0, 154, 0, 0, 144, 0,
	145, 0, 147, 238, 245, 246, 239, 43, 367, 0,
	825, 701, 251, 825, -2, 0, 279, 320, 321, 0,
	0, 0, 306, 307, 0, 0, 0, 275, 276, 0,
	294, 0, 0, 336, 665, 667, 671, 672, 448, 0,
	0, 0, 0, 0, 0, 527, 528, 529, 0, 531,
	532, 533, 820, 0, 537, 538, 839, 675, 683, 684,
	685, 686, 0, 0, 0, 691, 692, 693, 650, 576,
	547, -2, -2, 681, 390, 391, 392, 393, -2, 849,
	551, 553, 555, 556, 557, 558, 0, 821, 835, 836,
	842, 845, 846, 825, 832, 826, 816, 823, 831, 735,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, 704, 414,
	415, 420, 421, 423, 336, 334, 364, 365, 0, 676,
	656, 0, 0, 0, 0, 662, 660, 661, 20, 235,
	22, 0, 235, 235, 0, 0, 0, 0, 0, 373,
	0, 254, 0, 370, 0, 0, 54, 0, 41, 42,
	0, 0, 0, 303, 0, 0, 75, 0, 731, 81,
	0, 0, 0, 0, 100, 120, 121, 122, 101, 103,
	110, 112, 113, 114, 123, 124, 125, 126, 207, 0,
	209, 136, 137, 694, 0, 102, 104, 106, 107, 127,
	128, 0, 130, 131, 132, 431, 0, 62, 709, 710,
	711, 712, 713, 862, 863, 864, 865, 866, 867, 868,
	869, 870, 871, 872, 873, 874, 875, 876, 877, 878,
	879, 880, 881, 882, 883, 884, 885, 886, 887, 888,
	889, 890, 891, 892, 893, 894, 895, 896, 897, 898,
	899, 900, 901, 902, 903, 904, 905, 906, 907, 908,
	909, 910, 911, 912, 913, 914, 915, 916, 917, 918,
	919, 920, 921, 922, 923, 924, 925, 926, 927, 928,
	929, 930, 931, 932, 933, 934, 935, 936, 937, 938,
	939, 140, 142, 0, 151, 143, 149, 146, 0, 0,
	210, 0, 158, 0, 0, 825, 700, 0, 282, 318,
	319, 322, 325, 326, 323, 448, 289, 290, 291, 314,
	315, 224, 296, 0, 0, 677, 373, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 659, 0, 0, 670,
	452, 453, 454, 475, 476, 0, -2, 608, 0, 534,
	535, 536, 0, 0, -2, 0, 688, 445, 0, 0,
	649, 578, 0, 0, 0, 0, 0, 0, 0, 629,
	635, 0, 0, 0, 0, 0, 0, 0, 0, 404,
	417, 427, 425, 424, 406, 0, 405, 403, 0, 407,
	0, 373, 0, 657, 651, 652, 653, 0, 0, 664,
	0, 0, 0, 0, 234, 24, 825, 0, 34, 0,
	0, 180, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 51, 0, 261, 256, 0,
	0, 0, 336, 266, 268, 269, 0, 0, 371, 53,
	674, 43, 59, 57, 65, 71, 0, 76, 77, 0,
	98, 99, 250, 0, 117, 0, 119, 0, 208, 696,
	695, 445, 63, 153, 89, 247, 248, 368, 0, 157,
	159, 161, 162, 163, 701, 0, 0, 0, 0, 0,
	324, 327, 328, 0, 317, 222, 223, 303, 0, 679,
	330, 335, 337, 354, 354, 341, 0, 668, 449, 379,
	380, 381, 382, 383, 445, 386, 387, 388, 389, 397,
	398, 399, 400, 401, 402, 411, 0, 396, 396, 396,
	408, 409, 412, 413, 418, 419, 429, 430, 428, 428,
	428, 426, 450, 0, 455, 456, 457, 458, 459, 460,
	461, 462, 463, -2, -2, -2, 467, 468, 469, -2,
	-2, -2, 473, 474, -2, 0, 0, 659, 0, 0,
	481, 0, 484, 486, 488, 0, 0, 0, 0, 658,
	498, 641, 0, 669, 483, 0, 0, 530, 0, 0,
	0, 614, 608, 615, 0, -2, 539, 313, 0, 0,
	0, 0, 689, 432, 433, 434, 435, 436, 437, 446,
	0, 648, 644, 0, 586, 0, 0, 0, 552, 554,
	0, 0, 0, 618, 619, 620, 621, 622, 623, 624,
	0, 0, 0, 0, 500, 0, 0, 0, 0, 839,
	0, 608, 634, 0, 0, 0, 0, 0, 608, 0,
	640, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 330, 366, 654, 0, 663, 23, 226, 0, 0,
	0, 26, 825, 166, 0, 0, 0, 0, 0, 237,
	35, 825, 43, 825, 43, 36, 21, 235, 225, 228,
	0, 372, 253, 0, 0, 258, 255, 373, 0, 0,
	0, 55, 73, 74, 115, 116, 118, 111, 129, 0,
	155, 0, 0, 701, 0, 0, 0, 252, 316, 0,
	298, 299, 300, 301, 678, 332, 0, 0, 0, 0,
	0, 0, 360, 360, 360, 358, 339, 353, 0, 352,
	340, -2, 341, 0, 374, 376, 384, 0, 0, -2,
	0, 0, 0, 499, -2, 482, 485, 487, 489, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 609, 0,
	612, 613, 0, -2, 0, 0, 312, 313, 313, 313,
	545, 0, 0, 0, 0, 0, 0, 0, 645, 0,
	0, 546, 0, 0, 0, 0, 0, 560, 0, 561,
	0, 0, 562, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 502, 503, 504, 0, 0, 563,
	632, 633, 0, 0, 0, 0, 0, 0, 568, 0,
	639, 0, 0, 0, 572, 573, 574, 0, 394, 0,
	410, 422, 332, 0, 0, 0, 0, 0, 164, 179,
	0, 0, 0, 0, 28, 0, 0, 0, 0, 32,
	0, 38, 0, 0, 0, 0, 264, 0, 265, 267,
	270, 0, 90, 160, 0, 0, 158, 0, 0, 297,
	580, 0, 0, 338, 0, 0, 0, 0, 0, 355,
	359, 356, 357, 350, 0, 343, 0, 0, 0, 451,
	-2, 0, 0, 0, 0, -2, 0, 610, 0, 0,
	642, 0, 603, 0, -2, 609, 616, 540, 0, 0,
	0, 0, 438, 439, 440, 441, 442, 443, 444, 0,
	690, 643, 647, 0, 584, 585, 589, 0, 0, 550,
	0, 617, 626, 627, 501, 505, 506, 507, 508, 509,
	510, 511, 512, 513, -2, -2, -2, 517, 518, 519,
	-2, -2, -2, 0, 0, 0, 628, 0, 0, 606,
	630, 631, 636, 637, 0, 565, 566, 567, 638, 0,
	0, 0, 416, 0, 580, 655, 230, 232, 25, 0,
	165, 0, 168, 0, 0, 171, 172, 0, 0, 0,
	0, 181, 188, 0, 0, 0, 40, 0, 0, 236,
	0, 43, 43, 227, 0, 0, 229, 0, 0, 0,
	257, 0, 0, 215, 221, 221, 0, 548, 549, 0,
	0, 0, 0, 0, 285, 0, 331, 329, 344, 0,
	346, 0, 0, 0, 348, 0, 0, 342, 377, 0,
	0, 385, 0, 0, -2, 0, 492, 0, -2, -2,
	602, 609, 687, 313, 541, 543, 544, 447, 646, 591,
	588, 0, 575, 559, 625, 0, 0, 0, 0, 609,
	605, 564, 0, 570, 571, 395, 286, 27, 0, 169,
	170, 173, 0, 175, 190, 182, 0, 185, 186, 183,
	0, 29, 30, 39, 45, 31, 37, 0, 0, 0,
	0, 0, 271, 272, 0, 188, 0, 224, 682, 0,
	224, 0, 0, 0, 156, 188, 0, 579, 581, 0,
	345, 0, 362, 347, 0, 351, 378, 375, -2, -2,
	493, 611, 604, 0, 313, 0, 577, -2, 0, 0,
	0, 607, 0, 167, 0, 194, 0, 0, 0, 47,
	0, 231, 233, 0, 260, 373, 263, 177, 216, 217,
	220, 218, 221, 313, 188, 211, 0, 0, 0, 0,
	349, 542, 594, 0, -2, 0, 525, 569, 174, 199,
	0, 0, 0, 190, 33, 0, 44, 0, 262, 224,
	0, 178, 0, 582, 583, 361, 0, 0, 0, 590,
	526, 176, 195, 196, 0, 191, 192, 193, 189, 187,
	194, 46, 373, 219, 540, 188, 587, 592, 595, -2,
	796, 728, 0, 593, 197, 0, 198, 0, 0, 0,
	199, 259, 212, 0, 597, 598, 599, 600, 601, 200,
	0, 203, 204, 0, 201, 184, 0, 202, 205, 206,
	596,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 254, 3, 260, 255, 3,
	265, 266, 258, 256, 269, 257, 267, 259, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 271, 268,
	248, 250, 249, 3, 270, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 263, 3, 264, 253, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 252, 3, 262,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 251, 261,
}
var sqlTok3 = [...]int{
	0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:448
		{
			sqllex.(*scanner).stmts = sqlDollar[1].stmts
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:454
		{
			if sqlDollar[3].stmt != nil {
				sqlVAL.stmts = append(sqlDollar[1].stmts, sqlDollar[3].stmt)
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:460
		{
			if sqlDollar[1].stmt != nil {
				sqlVAL.stmts = []Statement{sqlDollar[1].stmt}
			} else {
				sqlVAL.stmts = nil
			}
		}
	case 13:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:479
		{
			sqlVAL.stmt = sqlDollar[1].selectStmt
		}
	case 19:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:488
		{
			sqlVAL.stmt = nil
		}
	case 20:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:494
		{
			sqlVAL.stmt = &AlterTable{Table: sqlDollar[3].qname, IfExists: false, Cmds: sqlDollar[4].alterTableCmds}
		}
	case 21:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:498
		{
			sqlVAL.stmt = &AlterTable{Table: sqlDollar[5].qname, IfExists: true, Cmds: sqlDollar[6].alterTableCmds}
		}
	case 22:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:504
		{
			sqlVAL.alterTableCmds = AlterTableCmds{sqlDollar[1].alterTableCmd}
		}
	case 23:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:508
		{
			sqlVAL.alterTableCmds = append(sqlDollar[1].alterTableCmds, sqlDollar[3].alterTableCmd)
		}
	case 24:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:515
		{
			sqlVAL.alterTableCmd = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].colDef}
		}
	case 25:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:520
		{
			sqlVAL.alterTableCmd = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].colDef}
		}
	case 26:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:525
		{
			sqlVAL.alterTableCmd = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].colDef}
		}
	case 27:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:530
		{
			sqlVAL.alterTableCmd = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].colDef}
		}
	case 28:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:534
		{
			unimplemented()
		}
	case 29:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:536
		{
			unimplemented()
		}
	case 30:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:538
		{
			unimplemented()
		}
	case 31:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:541
		{
			sqlVAL.alterTableCmd = &AlterTableDropColumn{columnKeyword: sqlDollar[2].boolVal, IfExists: true, Column: sqlDollar[5].str}
		}
	case 32:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:546
		{
			sqlVAL.alterTableCmd = &AlterTableDropColumn{columnKeyword: sqlDollar[2].boolVal, IfExists: false, Column: sqlDollar[3].str}
		}
	case 33:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:551
		{
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:554
		{
			sqlVAL.alterTableCmd = &AlterTableAddConstraint{ConstraintDef: sqlDollar[2].constraintDef}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:558
		{
			unimplemented()
		}
	case 36:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:560
		{
			unimplemented()
		}
	case 37:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:563
		{
			sqlVAL.alterTableCmd = &AlterTableDropConstraint{IfExists: true, Constraint: sqlDollar[5].str}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:568
		{
			sqlVAL.alterTableCmd = &AlterTableDropConstraint{IfExists: false, Constraint: sqlDollar[3].str}
		}
	case 39:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:573
		{
			unimplemented()
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:574
		{
			unimplemented()
		}
	case 41:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:577
		{
			unimplemented()
		}
	case 42:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:578
		{
			unimplemented()
		}
	case 43:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:579
		{
		}
	case 44:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:582
		{
			unimplemented()
		}
	case 45:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:583
		{
		}
	case 46:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:586
		{
			unimplemented()
		}
	case 47:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:587
		{
		}
	case 51:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:598
		{
			sqlVAL.stmt = &Delete{Table: sqlDollar[4].tblExpr, Where: newWhere(astWhere, sqlDollar[5].expr)}
		}
	case 52:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:605
		{
			sqlVAL.stmt = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 53:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:609
		{
			sqlVAL.stmt = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 54:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:613
		{
			sqlVAL.stmt = &DropIndex{Names: sqlDollar[3].qnames, IfExists: false}
		}
	case 55:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:617
		{
			sqlVAL.stmt = &DropIndex{Names: sqlDollar[5].qnames, IfExists: true}
		}
	case 56:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:621
		{
			sqlVAL.stmt = &DropTable{Names: sqlDollar[3].qnames, IfExists: false}
		}
	case 57:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:625
		{
			sqlVAL.stmt = &DropTable{Names: sqlDollar[5].qnames, IfExists: true}
		}
	case 58:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:631
		{
			sqlVAL.qnames = QualifiedNames{sqlDollar[1].qname}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:635
		{
			sqlVAL.qnames = append(sqlDollar[1].qnames, sqlDollar[3].qname)
		}
	case 60:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:641
		{
			sqlVAL.qname = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:645
		{
			sqlVAL.qname = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].indirect}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:651
		{
			sqlVAL.indirect = Indirection{NameIndirection(sqlDollar[2].str)}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:655
		{
			sqlVAL.indirect = append(sqlDollar[1].indirect, NameIndirection(sqlDollar[3].str))
		}
	case 64:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:662
		{
			sqlVAL.stmt = &Explain{Statement: sqlDollar[2].stmt}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:666
		{
			sqlVAL.stmt = &Explain{Options: sqlDollar[3].strs, Statement: sqlDollar[5].stmt}
		}
	case 66:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:672
		{
			sqlVAL.stmt = sqlDollar[1].selectStmt
		}
	case 70:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:681
		{
			sqlVAL.strs = []string{sqlDollar[1].str}
		}
	case 71:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:685
		{
			sqlVAL.strs = append(sqlDollar[1].strs, sqlDollar[3].str)
		}
	case 73:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:695
		{
			sqlVAL.stmt = &Grant{Privileges: sqlDollar[2].privilegeList, Grantees: NameList(sqlDollar[6].strs), Targets: sqlDollar[4].targetList}
		}
	case 74:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:702
		{
			sqlVAL.stmt = &Revoke{Privileges: sqlDollar[2].privilegeList, Grantees: NameList(sqlDollar[6].strs), Targets: sqlDollar[4].targetList}
		}
	case 75:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:709
		{
			sqlVAL.targetList = TargetList{Tables: QualifiedNames(sqlDollar[1].qnames)}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:713
		{
			// TODO(marc): this is postgres' grammar, but do we really need
			// both "x" and "TABLE X"?
			sqlVAL.targetList = TargetList{Tables: QualifiedNames(sqlDollar[2].qnames)}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:719
		{
			sqlVAL.targetList = TargetList{Databases: NameList(sqlDollar[2].strs)}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:726
		{
			sqlVAL.privilegeList = privilege.List{privilege.ALL}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:729
		{
		}
	case 80:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:733
		{
			sqlVAL.privilegeList = privilege.List{sqlDollar[1].privilegeType}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:737
		{
			sqlVAL.privilegeList = append(sqlDollar[1].privilegeList, sqlDollar[3].privilegeType)
		}
	case 82:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:744
		{
			sqlVAL.privilegeType = privilege.CREATE
		}
	case 83:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:748
		{
			sqlVAL.privilegeType = privilege.DROP
		}
	case 84:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:752
		{
			sqlVAL.privilegeType = privilege.GRANT
		}
	case 85:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:756
		{
			sqlVAL.privilegeType = privilege.SELECT
		}
	case 86:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:760
		{
			sqlVAL.privilegeType = privilege.INSERT
		}
	case 87:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:764
		{
			sqlVAL.privilegeType = privilege.DELETE
		}
	case 88:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:768
		{
			sqlVAL.privilegeType = privilege.UPDATE
		}
	case 89:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:776
		{
			sqlVAL.strs = []string{sqlDollar[1].str}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:780
		{
			sqlVAL.strs = append(sqlDollar[1].strs, sqlDollar[3].str)
		}
	case 91:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:788
		{
			sqlVAL.stmt = sqlDollar[2].stmt
		}
	case 92:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:792
		{
			sqlVAL.stmt = sqlDollar[3].stmt
		}
	case 93:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:796
		{
			sqlVAL.stmt = sqlDollar[3].stmt
		}
	case 94:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:802
		{
			sqlVAL.stmt = sqlDollar[2].stmt
		}
	case 96:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:809
		{
			sqlVAL.stmt = &SetTransaction{Isolation: sqlDollar[1].isoLevel, UserPriority: UnspecifiedUserPriority}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:813
		{
			sqlVAL.stmt = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].userPriority}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:817
		{
			sqlVAL.stmt = &SetTransaction{Isolation: sqlDollar[1].isoLevel, UserPriority: sqlDollar[3].userPriority}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:821
		{
			sqlVAL.stmt = &SetTransaction{Isolation: sqlDollar[3].isoLevel, UserPriority: sqlDollar[1].userPriority}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:828
		{
			sqlVAL.userPriority = sqlDollar[2].userPriority
		}
	case 101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:834
		{
			sqlVAL.stmt = &Set{Name: sqlDollar[1].qname, Values: sqlDollar[3].exprs}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:838
		{
			sqlVAL.stmt = &Set{Name: sqlDollar[1].qname, Values: sqlDollar[3].exprs}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:842
		{
			sqlVAL.stmt = &Set{Name: sqlDollar[1].qname}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:846
		{
			sqlVAL.stmt = &Set{Name: sqlDollar[1].qname}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:853
		{
			unimplemented()
		}
	case 107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:856
		{
			sqlVAL.stmt = &SetTimeZone{Value: sqlDollar[3].expr}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:859
		{
			unimplemented()
		}
	case 110:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:866
		{
			sqlVAL.exprs = []Expr{sqlDollar[1].expr}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:870
		{
			sqlVAL.exprs = append(sqlDollar[1].exprs, sqlDollar[3].expr)
		}
	case 114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:878
		{
			sqlVAL.expr = ValArg{name: sqlDollar[1].str}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:884
		{
			// Mapped to the closest supported isolation level.
			sqlVAL.isoLevel = SnapshotIsolation
		}
	case 116:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:889
		{
			// Mapped to the closest supported isolation level.
			sqlVAL.isoLevel = SnapshotIsolation
		}
	case 117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:894
		{
			sqlVAL.isoLevel = SnapshotIsolation
		}
	case 118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:898
		{
			// Mapped to the closest supported isolation level.
			sqlVAL.isoLevel = SerializableIsolation
		}
	case 119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:903
		{
			sqlVAL.isoLevel = SerializableIsolation
		}
	case 120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:909
		{
			sqlVAL.userPriority = Low
		}
	case 121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:913
		{
			sqlVAL.userPriority = Normal
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:917
		{
			sqlVAL.userPriority = High
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:923
		{
			sqlVAL.expr = DBool(true)
		}
	case 124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:927
		{
			sqlVAL.expr = DBool(false)
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:931
		{
			sqlVAL.expr = DString(sqlDollar[1].str)
		}
	case 127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:946
		{
			sqlVAL.expr = DString(sqlDollar[1].str)
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:950
		{
			sqlVAL.expr = DString(sqlDollar[1].str)
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:954
		{
			// TODO(pmattis): support opt_interval?
			expr := &CastExpr{Expr: DString(sqlDollar[2].str), Type: sqlDollar[1].colType}
			// Use an empty EvalContext.
			var ctx EvalContext
			d, err := expr.Eval(ctx)
			if err != nil {
				sqllex.Error("cannot evaluate to an interval type")
				return 1
			}
			if _, ok := d.(DInterval); !ok {
				panic("not an interval type")
			}
			sqlVAL.expr = d
		}
	case 131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:971
		{
			sqlVAL.expr = DString(sqlDollar[1].str)
		}
	case 132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:975
		{
			sqlVAL.expr = DString(sqlDollar[1].str)
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:980
		{
			unimplemented()
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:981
		{
			unimplemented()
		}
	case 135:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:982
		{
		}
	case 136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:986
		{
			sqlVAL.expr = DString(sqlDollar[1].str)
		}
	case 137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:990
		{
			sqlVAL.expr = DString(sqlDollar[1].str)
		}
	case 138:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:996
		{
			sqlVAL.stmt = &Show{Name: sqlDollar[2].str}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1000
		{
			sqlVAL.stmt = &Show{Name: sqlDollar[2].str}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1004
		{
			sqlVAL.stmt = &ShowColumns{Table: sqlDollar[4].qname}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1008
		{
			sqlVAL.stmt = &ShowDatabases{}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1012
		{
			sqlVAL.stmt = &ShowGrants{Targets: sqlDollar[3].targetListPtr, Grantees: sqlDollar[4].strs}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1016
		{
			sqlVAL.stmt = &ShowIndex{Table: sqlDollar[4].qname}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1020
		{
			sqlVAL.stmt = &ShowTables{Name: sqlDollar[3].qname}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1024
		{
			sqlVAL.stmt = &Show{Name: "TIME ZONE"}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1028
		{
			sqlVAL.stmt = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1032
		{
			sqlVAL.stmt = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1036
		{
			sqlVAL.stmt = nil
		}
	case 149:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1042
		{
			sqlVAL.qname = sqlDollar[2].qname
		}
	case 150:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1046
		{
			sqlVAL.qname = nil
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1052
		{
			tmp := sqlDollar[2].targetList
			sqlVAL.targetListPtr = &tmp
		}
	case 152:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1057
		{
			sqlVAL.targetListPtr = nil
		}
	case 153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1063
		{
			sqlVAL.strs = sqlDollar[2].strs
		}
	case 154:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1067
		{
			sqlVAL.strs = nil
		}
	case 155:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1074
		{
			sqlVAL.stmt = &CreateTable{Table: sqlDollar[3].qname, IfNotExists: false, Defs: sqlDollar[5].tblDefs}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1078
		{
			sqlVAL.stmt = &CreateTable{Table: sqlDollar[6].qname, IfNotExists: true, Defs: sqlDollar[8].tblDefs}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1085
		{
			sqlVAL.tblDefs = nil
		}
	case 159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1091
		{
			sqlVAL.tblDefs = TableDefs{sqlDollar[1].tblDef}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1095
		{
			sqlVAL.tblDefs = append(sqlDollar[1].tblDefs, sqlDollar[3].tblDef)
		}
	case 161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1101
		{
			sqlVAL.tblDef = sqlDollar[1].colDef
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1106
		{
			sqlVAL.tblDef = sqlDollar[1].constraintDef
		}
	case 164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1112
		{
			sqlVAL.colDef = newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].colType, sqlDollar[3].colQuals)
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1118
		{
			sqlVAL.colQuals = append(sqlDollar[1].colQuals, sqlDollar[2].colQual)
		}
	case 166:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1122
		{
			sqlVAL.colQuals = nil
		}
	case 167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1128
		{
			// TODO(pmattis): Handle constraint name.
			sqlVAL.colQual = sqlDollar[3].colQual
		}
	case 169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1133
		{
			unimplemented()
		}
	case 170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1149
		{
			sqlVAL.colQual = NotNullConstraint{}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1153
		{
			sqlVAL.colQual = NullConstraint{}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1157
		{
			sqlVAL.colQual = UniqueConstraint{}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1161
		{
			sqlVAL.colQual = PrimaryKeyConstraint{}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1164
		{
			unimplemented()
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1166
		{
			if ContainsVars(sqlDollar[2].expr) {
				sqllex.Error("default expression contains a variable")
				return 1
			}
			if containsSubquery(sqlDollar[2].expr) {
				sqllex.Error("default expression contains a subquery")
				return 1
			}
			sqlVAL.colQual = &ColumnDefault{Expr: sqlDollar[2].expr}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1177
		{
			unimplemented()
		}
	case 177:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1181
		{
			sqlVAL.tblDef = &IndexTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].idxElems,
				Storing: sqlDollar[6].strs,
			}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1189
		{
			sqlVAL.tblDef = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:    Name(sqlDollar[3].str),
					Columns: sqlDollar[5].idxElems,
					Storing: sqlDollar[7].strs,
				},
			}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1204
		{
			sqlVAL.constraintDef = sqlDollar[3].constraintDef
			sqlVAL.constraintDef.setName(Name(sqlDollar[2].str))
		}
	case 180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1209
		{
			sqlVAL.constraintDef = sqlDollar[1].constraintDef
		}
	case 181:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1214
		{
			unimplemented()
		}
	case 182:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1216
		{
			sqlVAL.constraintDef = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[3].strs),
					Storing: sqlDollar[5].strs,
				},
			}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1225
		{
			sqlVAL.constraintDef = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[4].strs),
				},
				PrimaryKey: true,
			}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1234
		{
			unimplemented()
		}
	case 187:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1251
		{
			sqlVAL.strs = sqlDollar[3].strs
		}
	case 188:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1255
		{
			sqlVAL.strs = nil
		}
	case 189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1261
		{
			sqlVAL.strs = sqlDollar[2].strs
		}
	case 190:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1265
		{
			sqlVAL.strs = nil
		}
	case 191:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1270
		{
			unimplemented()
		}
	case 192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1271
		{
			unimplemented()
		}
	case 193:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1272
		{
			unimplemented()
		}
	case 194:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1273
		{
		}
	case 195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1280
		{
			unimplemented()
		}
	case 196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1281
		{
			unimplemented()
		}
	case 197:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1282
		{
			unimplemented()
		}
	case 198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1283
		{
			unimplemented()
		}
	case 199:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1284
		{
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1287
		{
			unimplemented()
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1290
		{
			unimplemented()
		}
	case 202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1293
		{
			unimplemented()
		}
	case 203:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1294
		{
			unimplemented()
		}
	case 204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1295
		{
			unimplemented()
		}
	case 205:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1296
		{
			unimplemented()
		}
	case 206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1297
		{
			unimplemented()
		}
	case 207:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1301
		{
			sqlVAL.expr = NumVal(sqlDollar[1].str)
		}
	case 208:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1305
		{
			sqlVAL.expr = NumVal("-" + sqlDollar[2].str)
		}
	case 209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1309
		{
			sqlVAL.expr = DInt(sqlDollar[1].ival.Val)
		}
	case 210:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1316
		{
			sqlVAL.stmt = &Truncate{Tables: sqlDollar[3].qnames}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1323
		{
			sqlVAL.stmt = &CreateIndex{
				Name:    Name(sqlDollar[4].str),
				Table:   sqlDollar[6].qname,
				Unique:  sqlDollar[2].boolVal,
				Columns: sqlDollar[8].idxElems,
				Storing: sqlDollar[10].strs,
			}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql.y:1333
		{
			sqlVAL.stmt = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].qname,
				Unique:      sqlDollar[2].boolVal,
				IfNotExists: true,
				Columns:     sqlDollar[11].idxElems,
				Storing:     sqlDollar[13].strs,
			}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1346
		{
			sqlVAL.boolVal = true
		}
	case 214:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1350
		{
			sqlVAL.boolVal = false
		}
	case 215:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1356
		{
			sqlVAL.idxElems = IndexElemList{sqlDollar[1].idxElem}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1360
		{
			sqlVAL.idxElems = append(sqlDollar[1].idxElems, sqlDollar[3].idxElem)
		}
	case 217:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1369
		{
			sqlVAL.idxElem = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].dir}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1372
		{
			unimplemented()
		}
	case 219:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1373
		{
			unimplemented()
		}
	case 220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1376
		{
			unimplemented()
		}
	case 221:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1377
		{
		}
	case 222:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1381
		{
			sqlVAL.dir = Ascending
		}
	case 223:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1385
		{
			sqlVAL.dir = Descending
		}
	case 224:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1389
		{
			sqlVAL.dir = DefaultDirection
		}
	case 225:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1396
		{
			sqlVAL.stmt = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 226:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1400
		{
			sqlVAL.stmt = &RenameTable{Name: sqlDollar[3].qname, NewName: sqlDollar[6].qname, IfExists: false}
		}
	case 227:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1404
		{
			sqlVAL.stmt = &RenameTable{Name: sqlDollar[5].qname, NewName: sqlDollar[8].qname, IfExists: true}
		}
	case 228:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1408
		{
			sqlVAL.stmt = &RenameIndex{Name: sqlDollar[3].qname, NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 229:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1412
		{
			sqlVAL.stmt = &RenameIndex{Name: sqlDollar[5].qname, NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 230:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1416
		{
			sqlVAL.stmt = &RenameColumn{Table: sqlDollar[3].qname, Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 231:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1420
		{
			sqlVAL.stmt = &RenameColumn{Table: sqlDollar[5].qname, Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1424
		{
			sqlVAL.stmt = nil
		}
	case 233:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1428
		{
			sqlVAL.stmt = nil
		}
	case 234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1434
		{
			sqlVAL.boolVal = true
		}
	case 235:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1438
		{
			sqlVAL.boolVal = false
		}
	case 236:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1443
		{
		}
	case 237:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1444
		{
		}
	case 238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1449
		{
			sqlVAL.stmt = sqlDollar[3].stmt
		}
	case 239:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1453
		{
			sqlVAL.stmt = sqlDollar[3].stmt
		}
	case 240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1457
		{
			sqlVAL.stmt = &CommitTransaction{}
		}
	case 241:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1461
		{
			sqlVAL.stmt = &CommitTransaction{}
		}
	case 242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1465
		{
			sqlVAL.stmt = &RollbackTransaction{}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1470
		{
		}
	case 244:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1471
		{
		}
	case 245:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1475
		{
			sqlVAL.stmt = &BeginTransaction{Isolation: sqlDollar[1].isoLevel, UserPriority: UnspecifiedUserPriority}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1479
		{
			sqlVAL.stmt = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].userPriority}
		}
	case 247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1483
		{
			sqlVAL.stmt = &BeginTransaction{Isolation: sqlDollar[1].isoLevel, UserPriority: sqlDollar[3].userPriority}
		}
	case 248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1487
		{
			sqlVAL.stmt = &BeginTransaction{Isolation: sqlDollar[3].isoLevel, UserPriority: sqlDollar[1].userPriority}
		}
	case 249:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1491
		{
			sqlVAL.stmt = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1497
		{
			sqlVAL.isoLevel = sqlDollar[3].isoLevel
		}
	case 251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1503
		{
			sqlVAL.stmt = &CreateDatabase{Name: Name(sqlDollar[3].str)}
		}
	case 252:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1507
		{
			sqlVAL.stmt = &CreateDatabase{IfNotExists: true, Name: Name(sqlDollar[6].str)}
		}
	case 253:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1513
		{
			sqlVAL.stmt = sqlDollar[5].stmt
			sqlVAL.stmt.(*Insert).Table = sqlDollar[4].qname
		}
	case 256:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1529
		{
			sqlVAL.stmt = &Insert{Rows: sqlDollar[1].selectStmt}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1533
		{
			sqlVAL.stmt = &Insert{Columns: sqlDollar[2].qnames, Rows: sqlDollar[4].selectStmt}
		}
	case 258:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1537
		{
			sqlVAL.stmt = &Insert{}
		}
	case 259:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1544
		{
			unimplemented()
		}
	case 260:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1545
		{
			unimplemented()
		}
	case 261:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1546
		{
		}
	case 262:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1549
		{
			unimplemented()
		}
	case 263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1550
		{
			unimplemented()
		}
	case 264:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1551
		{
		}
	case 265:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1556
		{
			sqlVAL.stmt = &Update{Table: sqlDollar[3].tblExpr, Exprs: sqlDollar[5].updateExprs, Where: newWhere(astWhere, sqlDollar[7].expr)}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1562
		{
			sqlVAL.updateExprs = UpdateExprs{sqlDollar[1].updateExpr}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1566
		{
			sqlVAL.updateExprs = append(sqlDollar[1].updateExprs, sqlDollar[3].updateExpr)
		}
	case 270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1576
		{
			sqlVAL.updateExpr = &UpdateExpr{Names: QualifiedNames{sqlDollar[1].qname}, Expr: sqlDollar[3].expr}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1588
		{
			sqlVAL.updateExpr = &UpdateExpr{Tuple: true, Names: sqlDollar[2].qnames, Expr: Tuple(sqlDollar[5].exprs)}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1592
		{
			sqlVAL.updateExpr = &UpdateExpr{Tuple: true, Names: sqlDollar[2].qnames, Expr: &Subquery{Select: sqlDollar[5].selectStmt}}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1639
		{
			sqlVAL.selectStmt = &ParenSelect{Select: sqlDollar[2].selectStmt}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1643
		{
			sqlVAL.selectStmt = &ParenSelect{Select: sqlDollar[2].selectStmt}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1659
		{
			sqlVAL.selectStmt = sqlDollar[1].selectStmt
			if s, ok := sqlVAL.selectStmt.(*Select); ok {
				s.OrderBy = sqlDollar[2].orderBy
			}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1666
		{
			sqlVAL.selectStmt = sqlDollar[1].selectStmt
			if s, ok := sqlVAL.selectStmt.(*Select); ok {
				s.OrderBy = sqlDollar[2].orderBy
				s.Limit = sqlDollar[3].limit
			}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1674
		{
			sqlVAL.selectStmt = sqlDollar[2].selectStmt
		}
	case 281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1678
		{
			sqlVAL.selectStmt = sqlDollar[2].selectStmt
			if s, ok := sqlVAL.selectStmt.(*Select); ok {
				s.OrderBy = sqlDollar[3].orderBy
			}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1685
		{
			sqlVAL.selectStmt = sqlDollar[2].selectStmt
			if s, ok := sqlVAL.selectStmt.(*Select); ok {
				s.OrderBy = sqlDollar[3].orderBy
				s.Limit = sqlDollar[4].limit
			}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1723
		{
			sqlVAL.selectStmt = &Select{
				Exprs:   sqlDollar[3].selExprs,
				From:    sqlDollar[4].tblExprs,
				Where:   newWhere(astWhere, sqlDollar[5].expr),
				GroupBy: sqlDollar[6].groupBy,
				Having:  newWhere(astHaving, sqlDollar[7].expr),
			}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1735
		{
			sqlVAL.selectStmt = &Select{
				Distinct: sqlDollar[2].boolVal,
				Exprs:    sqlDollar[3].selExprs,
				From:     sqlDollar[4].tblExprs,
				Where:    newWhere(astWhere, sqlDollar[5].expr),
				GroupBy:  sqlDollar[6].groupBy,
				Having:   newWhere(astHaving, sqlDollar[7].expr),
			}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1747
		{
			sqlVAL.selectStmt = &Select{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        TableExprs{&AliasedTableExpr{Expr: sqlDollar[2].qname}},
				tableSelect: true,
			}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1755
		{
			sqlVAL.selectStmt = &Union{
				Type:  astUnion,
				Left:  sqlDollar[1].selectStmt,
				Right: sqlDollar[4].selectStmt,
				All:   sqlDollar[3].boolVal,
			}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1764
		{
			sqlVAL.selectStmt = &Union{
				Type:  astIntersect,
				Left:  sqlDollar[1].selectStmt,
				Right: sqlDollar[4].selectStmt,
				All:   sqlDollar[3].boolVal,
			}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1773
		{
			sqlVAL.selectStmt = &Union{
				Type:  astExcept,
				Left:  sqlDollar[1].selectStmt,
				Right: sqlDollar[4].selectStmt,
				All:   sqlDollar[3].boolVal,
			}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1791
		{
			unimplemented()
		}
	case 293:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1792
		{
			unimplemented()
		}
	case 294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1793
		{
			unimplemented()
		}
	case 295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1796
		{
			unimplemented()
		}
	case 296:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1797
		{
			unimplemented()
		}
	case 297:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1800
		{
			unimplemented()
		}
	case 298:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1804
		{
			sqlVAL.stmt = sqlDollar[1].selectStmt
		}
	case 302:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1812
		{
			unimplemented()
		}
	case 303:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1813
		{
		}
	case 304:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1816
		{
		}
	case 305:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1817
		{
		}
	case 306:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1821
		{
			sqlVAL.boolVal = true
		}
	case 307:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1825
		{
			sqlVAL.boolVal = false
		}
	case 308:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1829
		{
			sqlVAL.boolVal = false
		}
	case 309:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1835
		{
			sqlVAL.boolVal = true
		}
	case 310:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1840
		{
		}
	case 311:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1841
		{
		}
	case 312:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1845
		{
			sqlVAL.orderBy = sqlDollar[1].orderBy
		}
	case 313:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1849
		{
			sqlVAL.orderBy = nil
		}
	case 314:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1855
		{
			sqlVAL.orderBy = OrderBy(sqlDollar[3].orders)
		}
	case 315:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1861
		{
			sqlVAL.orders = []*Order{sqlDollar[1].order}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1865
		{
			sqlVAL.orders = append(sqlDollar[1].orders, sqlDollar[3].order)
		}
	case 317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1871
		{
			sqlVAL.order = &Order{Expr: sqlDollar[1].expr, Direction: sqlDollar[2].dir}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1879
		{
			if sqlDollar[1].limit == nil {
				sqlVAL.limit = sqlDollar[2].limit
			} else {
				sqlVAL.limit = sqlDollar[1].limit
				sqlVAL.limit.Offset = sqlDollar[2].limit.Offset
			}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1888
		{
			sqlVAL.limit = sqlDollar[1].limit
			if sqlDollar[2].limit != nil {
				sqlVAL.limit.Count = sqlDollar[2].limit.Count
			}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1899
		{
			if sqlDollar[2].expr == nil {
				sqlVAL.limit = nil
			} else {
				sqlVAL.limit = &Limit{Count: sqlDollar[2].expr}
			}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1912
		{
			sqlVAL.limit = &Limit{Offset: sqlDollar[2].expr}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1919
		{
			sqlVAL.limit = &Limit{Offset: sqlDollar[2].expr}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1926
		{
			sqlVAL.expr = nil
		}
	case 327:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1940
		{
		}
	case 328:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1941
		{
		}
	case 329:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1967
		{
			sqlVAL.groupBy = GroupBy(sqlDollar[3].exprs)
		}
	case 330:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1971
		{
			sqlVAL.groupBy = nil
		}
	case 331:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1977
		{
			sqlVAL.expr = sqlDollar[2].expr
		}
	case 332:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1981
		{
			sqlVAL.expr = nil
		}
	case 333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1987
		{
			sqlVAL.selectStmt = Values{Tuple(sqlDollar[2].exprs)}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1991
		{
			sqlVAL.selectStmt = append(sqlDollar[1].selectStmt.(Values), Tuple(sqlDollar[3].exprs))
		}
	case 335:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2001
		{
			sqlVAL.tblExprs = sqlDollar[2].tblExprs
		}
	case 336:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2005
		{
			sqlVAL.tblExprs = nil
		}
	case 337:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2011
		{
			sqlVAL.tblExprs = TableExprs{sqlDollar[1].tblExpr}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2015
		{
			sqlVAL.tblExprs = append(sqlDollar[1].tblExprs, sqlDollar[3].tblExpr)
		}
	case 339:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2022
		{
			sqlVAL.tblExpr = &AliasedTableExpr{Expr: sqlDollar[1].qname, As: sqlDollar[2].aliasClause}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2026
		{
			sqlVAL.tblExpr = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].selectStmt}, As: sqlDollar[2].aliasClause}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2030
		{
			unimplemented()
		}
	case 343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2048
		{
			sqlVAL.tblExpr = &ParenTableExpr{Expr: sqlDollar[2].tblExpr}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2052
		{
			sqlVAL.tblExpr = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].tblExpr, Right: sqlDollar[4].tblExpr}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2056
		{
			sqlVAL.tblExpr = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].tblExpr, Right: sqlDollar[4].tblExpr, Cond: sqlDollar[5].joinCond}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2060
		{
			sqlVAL.tblExpr = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].tblExpr, Right: sqlDollar[3].tblExpr, Cond: sqlDollar[4].joinCond}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2064
		{
			sqlVAL.tblExpr = &JoinTableExpr{Join: astNaturalJoin, Left: sqlDollar[1].tblExpr, Right: sqlDollar[5].tblExpr}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2068
		{
			sqlVAL.tblExpr = &JoinTableExpr{Join: astNaturalJoin, Left: sqlDollar[1].tblExpr, Right: sqlDollar[4].tblExpr}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2074
		{
			sqlVAL.aliasClause = AliasClause{Alias: Name(sqlDollar[2].str), Cols: NameList(sqlDollar[4].strs)}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2078
		{
			sqlVAL.aliasClause = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2082
		{
			sqlVAL.aliasClause = AliasClause{Alias: Name(sqlDollar[1].str), Cols: NameList(sqlDollar[3].strs)}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2086
		{
			sqlVAL.aliasClause = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2093
		{
			sqlVAL.aliasClause = AliasClause{}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2099
		{
			sqlVAL.str = astFullJoin
		}
	case 356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2103
		{
			sqlVAL.str = astLeftJoin
		}
	case 357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2107
		{
			sqlVAL.str = astRightJoin
		}
	case 358:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2111
		{
			sqlVAL.str = astInnerJoin
		}
	case 359:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2117
		{
		}
	case 360:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2118
		{
		}
	case 361:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2129
		{
			sqlVAL.joinCond = &UsingJoinCond{Cols: NameList(sqlDollar[3].strs)}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2133
		{
			sqlVAL.joinCond = &OnJoinCond{Expr: sqlDollar[2].expr}
		}
	case 363:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2139
		{
			sqlVAL.qname = sqlDollar[1].qname
		}
	case 364:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2143
		{
			// TODO(pmattis): Handle the "*".
			sqlVAL.qname = sqlDollar[1].qname
		}
	case 365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2148
		{
			// TODO(pmattis): Support ONLY.
			sqlVAL.qname = sqlDollar[2].qname
		}
	case 366:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2153
		{
			// TODO(pmattis): Support ONLY.
			sqlVAL.qname = sqlDollar[3].qname
		}
	case 367:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2160
		{
			sqlVAL.qnames = QualifiedNames{sqlDollar[1].qname}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2164
		{
			sqlVAL.qnames = append(sqlDollar[1].qnames, sqlDollar[3].qname)
		}
	case 369:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2177
		{
			sqlVAL.tblExpr = &AliasedTableExpr{Expr: sqlDollar[1].qname}
		}
	case 370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2181
		{
			sqlVAL.tblExpr = &AliasedTableExpr{Expr: sqlDollar[1].qname, As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2185
		{
			sqlVAL.tblExpr = &AliasedTableExpr{Expr: sqlDollar[1].qname, As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2191
		{
			sqlVAL.expr = sqlDollar[2].expr
		}
	case 373:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2195
		{
			sqlVAL.expr = nil
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2207
		{
			sqlVAL.colType = sqlDollar[1].colType
		}
	case 375:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2211
		{
			unimplemented()
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2212
		{
			unimplemented()
		}
	case 377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2215
		{
			unimplemented()
		}
	case 378:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2216
		{
			unimplemented()
		}
	case 379:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2217
		{
		}
	case 385:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2225
		{
			unimplemented()
		}
	case 386:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2227
		{
			sqlVAL.colType = &BytesType{Name: "BLOB"}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2231
		{
			sqlVAL.colType = &BytesType{Name: "BYTES"}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2235
		{
			sqlVAL.colType = &StringType{Name: "TEXT"}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2239
		{
			sqlVAL.colType = &StringType{Name: "STRING"}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2260
		{
			sqlVAL.colType = &DecimalType{Prec: int(sqlDollar[2].ival.Val)}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2264
		{
			sqlVAL.colType = &DecimalType{Prec: int(sqlDollar[2].ival.Val), Scale: int(sqlDollar[4].ival.Val)}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2268
		{
			sqlVAL.colType = &DecimalType{}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2275
		{
			sqlVAL.colType = &IntType{Name: "INT"}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2279
		{
			sqlVAL.colType = &IntType{Name: "INT64"}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2283
		{
			sqlVAL.colType = &IntType{Name: "INTEGER"}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2287
		{
			sqlVAL.colType = &IntType{Name: "SMALLINT"}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2291
		{
			sqlVAL.colType = &IntType{Name: "BIGINT"}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2295
		{
			sqlVAL.colType = &FloatType{Name: "REAL"}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2299
		{
			sqlVAL.colType = &FloatType{Name: "FLOAT", Prec: int(sqlDollar[2].ival.Val)}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2303
		{
			sqlVAL.colType = &FloatType{Name: "DOUBLE PRECISION"}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2307
		{
			sqlVAL.colType = sqlDollar[2].colType
			sqlVAL.colType.(*DecimalType).Name = "DECIMAL"
		}
	case 406:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2312
		{
			sqlVAL.colType = sqlDollar[2].colType
			sqlVAL.colType.(*DecimalType).Name = "DEC"
		}
	case 407:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2317
		{
			sqlVAL.colType = sqlDollar[2].colType
			sqlVAL.colType.(*DecimalType).Name = "NUMERIC"
		}
	case 408:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2322
		{
			sqlVAL.colType = &BoolType{Name: "BOOLEAN"}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2326
		{
			sqlVAL.colType = &BoolType{Name: "BOOL"}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2332
		{
			sqlVAL.ival = sqlDollar[2].ival
		}
	case 411:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2336
		{
			sqlVAL.ival = IntVal{}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2354
		{
			sqlVAL.colType = &IntType{Name: "BIT", N: int(sqlDollar[4].ival.Val)}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2360
		{
			sqlVAL.colType = &IntType{Name: "BIT"}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2376
		{
			sqlVAL.colType = sqlDollar[1].colType
			sqlVAL.colType.(*StringType).N = int(sqlDollar[3].ival.Val)
		}
	case 423:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2383
		{
			sqlVAL.colType = sqlDollar[1].colType
		}
	case 424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2389
		{
			sqlVAL.colType = &StringType{Name: "CHAR"}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2393
		{
			sqlVAL.colType = &StringType{Name: "CHAR"}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2397
		{
			sqlVAL.colType = &StringType{Name: "VARCHAR"}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2402
		{
		}
	case 428:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2403
		{
		}
	case 429:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2408
		{
			sqlVAL.colType = &DateType{}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2412
		{
			sqlVAL.colType = &TimestampType{}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2417
		{
			sqlVAL.colType = &IntervalType{}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2422
		{
			unimplemented()
		}
	case 433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2423
		{
			unimplemented()
		}
	case 434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2424
		{
			unimplemented()
		}
	case 435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2425
		{
			unimplemented()
		}
	case 436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2426
		{
			unimplemented()
		}
	case 437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2427
		{
			unimplemented()
		}
	case 438:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2428
		{
			unimplemented()
		}
	case 439:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2429
		{
			unimplemented()
		}
	case 440:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2430
		{
			unimplemented()
		}
	case 441:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2431
		{
			unimplemented()
		}
	case 442:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2432
		{
			unimplemented()
		}
	case 443:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2433
		{
			unimplemented()
		}
	case 444:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2434
		{
			unimplemented()
		}
	case 445:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2435
		{
		}
	case 446:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2438
		{
			unimplemented()
		}
	case 447:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2439
		{
			unimplemented()
		}
	case 449:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2463
		{
			sqlVAL.expr = &CastExpr{Expr: sqlDollar[1].expr, Type: sqlDollar[3].colType}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2466
		{
			unimplemented()
		}
	case 451:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2467
		{
			unimplemented()
		}
	case 452:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2476
		{
			sqlVAL.expr = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].expr}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2480
		{
			sqlVAL.expr = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].expr}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2484
		{
			sqlVAL.expr = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].expr}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2488
		{
			sqlVAL.expr = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2492
		{
			sqlVAL.expr = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2496
		{
			sqlVAL.expr = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2500
		{
			sqlVAL.expr = &BinaryExpr{Operator: Div, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2504
		{
			sqlVAL.expr = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2508
		{
			sqlVAL.expr = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2512
		{
			sqlVAL.expr = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2516
		{
			sqlVAL.expr = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2520
		{
			sqlVAL.expr = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2524
		{
			sqlVAL.expr = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2528
		{
			sqlVAL.expr = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2532
		{
			sqlVAL.expr = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2536
		{
			sqlVAL.expr = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2540
		{
			sqlVAL.expr = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2544
		{
			sqlVAL.expr = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2548
		{
			sqlVAL.expr = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2552
		{
			sqlVAL.expr = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2556
		{
			sqlVAL.expr = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2560
		{
			sqlVAL.expr = &AndExpr{Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2564
		{
			sqlVAL.expr = &OrExpr{Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2568
		{
			sqlVAL.expr = &NotExpr{Expr: sqlDollar[2].expr}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2572
		{
			sqlVAL.expr = &NotExpr{Expr: sqlDollar[2].expr}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2576
		{
			sqlVAL.expr = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2580
		{
			sqlVAL.expr = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].expr, Right: sqlDollar[4].expr}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2584
		{
			sqlVAL.expr = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].expr, Right: sqlDollar[4].expr}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2588
		{
			sqlVAL.expr = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].expr, Right: sqlDollar[5].expr}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2592
		{
			sqlVAL.expr = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].expr, Right: DNull}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2596
		{
			sqlVAL.expr = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].expr, Right: DNull}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2599
		{
			unimplemented()
		}
	case 484:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2601
		{
			sqlVAL.expr = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].expr, Right: DBool(true)}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2605
		{
			sqlVAL.expr = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].expr, Right: DBool(true)}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2609
		{
			sqlVAL.expr = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].expr, Right: DBool(false)}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2613
		{
			sqlVAL.expr = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].expr, Right: DBool(false)}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2617
		{
			sqlVAL.expr = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].expr, Right: DNull}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2621
		{
			sqlVAL.expr = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].expr, Right: DNull}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2625
		{
			sqlVAL.expr = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].expr, Right: sqlDollar[5].expr}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2629
		{
			sqlVAL.expr = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].expr, Right: sqlDollar[6].expr}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2633
		{
			sqlVAL.expr = &IsOfTypeExpr{Expr: sqlDollar[1].expr, Types: sqlDollar[5].colTypes}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2637
		{
			sqlVAL.expr = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].expr, Types: sqlDollar[6].colTypes}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2641
		{
			sqlVAL.expr = &RangeCond{Left: sqlDollar[1].expr, From: sqlDollar[4].expr, To: sqlDollar[6].expr}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2645
		{
			sqlVAL.expr = &RangeCond{Not: true, Left: sqlDollar[1].expr, From: sqlDollar[5].expr, To: sqlDollar[7].expr}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2649
		{
			sqlVAL.expr = &RangeCond{Left: sqlDollar[1].expr, From: sqlDollar[4].expr, To: sqlDollar[6].expr}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2653
		{
			sqlVAL.expr = &RangeCond{Not: true, Left: sqlDollar[1].expr, From: sqlDollar[5].expr, To: sqlDollar[7].expr}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2657
		{
			sqlVAL.expr = &ComparisonExpr{Operator: In, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2661
		{
			sqlVAL.expr = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].expr, Right: sqlDollar[4].expr}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2678
		{
			sqlVAL.expr = &CastExpr{Expr: sqlDollar[1].expr, Type: sqlDollar[3].colType}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2682
		{
			sqlVAL.expr = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].expr}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2686
		{
			sqlVAL.expr = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].expr}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2690
		{
			sqlVAL.expr = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].expr}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2694
		{
			sqlVAL.expr = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2698
		{
			sqlVAL.expr = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2702
		{
			sqlVAL.expr = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2706
		{
			sqlVAL.expr = &BinaryExpr{Operator: Div, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2710
		{
			sqlVAL.expr = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2714
		{
			sqlVAL.expr = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2718
		{
			sqlVAL.expr = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2722
		{
			sqlVAL.expr = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2726
		{
			sqlVAL.expr = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2730
		{
			sqlVAL.expr = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2734
		{
			sqlVAL.expr = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2738
		{
			sqlVAL.expr = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2742
		{
			sqlVAL.expr = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2746
		{
			sqlVAL.expr = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2750
		{
			sqlVAL.expr = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2754
		{
			sqlVAL.expr = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2758
		{
			sqlVAL.expr = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2762
		{
			sqlVAL.expr = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2766
		{
			sqlVAL.expr = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].expr, Right: sqlDollar[5].expr}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2770
		{
			sqlVAL.expr = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].expr, Right: sqlDollar[6].expr}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2774
		{
			sqlVAL.expr = &IsOfTypeExpr{Expr: sqlDollar[1].expr, Types: sqlDollar[5].colTypes}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2778
		{
			sqlVAL.expr = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].expr, Types: sqlDollar[6].colTypes}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2790
		{
			sqlVAL.expr = sqlDollar[1].qname
		}
	case 529:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2795
		{
			sqlVAL.expr = ValArg{name: sqlDollar[1].str}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2799
		{
			sqlVAL.expr = &ParenExpr{Expr: sqlDollar[2].expr}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2805
		{
			sqlVAL.expr = &Subquery{Select: sqlDollar[1].selectStmt}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2809
		{
			sqlVAL.expr = &Subquery{Select: sqlDollar[1].selectStmt}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2813
		{
			sqlVAL.expr = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].selectStmt}}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2819
		{
			sqlVAL.expr = sqlDollar[2].expr
		}
	case 537:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2823
		{
			sqlVAL.expr = sqlDollar[1].expr
		}
	case 538:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2827
		{
			sqlVAL.expr = sqlDollar[1].expr
		}
	case 539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2835
		{
			sqlVAL.expr = &FuncExpr{Name: sqlDollar[1].qname}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2839
		{
			// TODO(pmattis): Support opt_sort_clause or remove it?
			sqlVAL.expr = &FuncExpr{Name: sqlDollar[1].qname, Exprs: sqlDollar[3].exprs}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2843
		{
			unimplemented()
		}
	case 542:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2844
		{
			unimplemented()
		}
	case 543:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2846
		{
			// TODO(pmattis): Support opt_sort_clause or remove it?
			sqlVAL.expr = &FuncExpr{Name: sqlDollar[1].qname, Type: All, Exprs: sqlDollar[4].exprs}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2851
		{
			// TODO(pmattis): Support opt_sort_clause or remove it?
			sqlVAL.expr = &FuncExpr{Name: sqlDollar[1].qname, Type: Distinct, Exprs: sqlDollar[4].exprs}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2856
		{
			sqlVAL.expr = &FuncExpr{Name: sqlDollar[1].qname, Exprs: Exprs{StarExpr()}}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2869
		{
			// TODO(pmattis): Support within_group_clause, filter_clause and
			// over_clause?
			sqlVAL.expr = sqlDollar[1].expr
		}
	case 547:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2875
		{
			sqlVAL.expr = sqlDollar[1].expr
		}
	case 548:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2884
		{
			unimplemented()
		}
	case 549:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2885
		{
			unimplemented()
		}
	case 550:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2889
		{
			unimplemented()
		}
	case 551:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2891
		{
			sqlVAL.expr = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2895
		{
			sqlVAL.expr = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2899
		{
			sqlVAL.expr = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2903
		{
			sqlVAL.expr = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2906
		{
			unimplemented()
		}
	case 556:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2907
		{
			unimplemented()
		}
	case 557:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2908
		{
			unimplemented()
		}
	case 558:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2909
		{
			unimplemented()
		}
	case 559:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2911
		{
			sqlVAL.expr = &CastExpr{Expr: sqlDollar[3].expr, Type: sqlDollar[5].colType}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2915
		{
			sqlVAL.expr = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].exprs}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2919
		{
			sqlVAL.expr = &OverlayExpr{FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].exprs}}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2923
		{
			sqlVAL.expr = &FuncExpr{Name: &QualifiedName{Base: "STRPOS"}, Exprs: sqlDollar[3].exprs}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2927
		{
			sqlVAL.expr = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].exprs}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2930
		{
			unimplemented()
		}
	case 565:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2932
		{
			sqlVAL.expr = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[4].exprs}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2936
		{
			sqlVAL.expr = &FuncExpr{Name: &QualifiedName{Base: "LTRIM"}, Exprs: sqlDollar[4].exprs}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2940
		{
			sqlVAL.expr = &FuncExpr{Name: &QualifiedName{Base: "RTRIM"}, Exprs: sqlDollar[4].exprs}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2944
		{
			sqlVAL.expr = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[3].exprs}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2948
		{
			sqlVAL.expr = &IfExpr{Cond: sqlDollar[3].expr, True: sqlDollar[5].expr, Else: sqlDollar[7].expr}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2952
		{
			sqlVAL.expr = &NullIfExpr{Expr1: sqlDollar[3].expr, Expr2: sqlDollar[5].expr}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2956
		{
			sqlVAL.expr = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].expr, sqlDollar[5].expr}}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2960
		{
			sqlVAL.expr = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].exprs}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2964
		{
			sqlVAL.expr = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].exprs}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2968
		{
			sqlVAL.expr = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].exprs}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2974
		{
			unimplemented()
		}
	case 576:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2975
		{
		}
	case 577:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2978
		{
			unimplemented()
		}
	case 578:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2979
		{
		}
	case 579:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2983
		{
			unimplemented()
		}
	case 580:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2984
		{
		}
	case 581:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2987
		{
			unimplemented()
		}
	case 582:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2988
		{
			unimplemented()
		}
	case 583:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2991
		{
			unimplemented()
		}
	case 584:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2994
		{
			unimplemented()
		}
	case 585:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2995
		{
			unimplemented()
		}
	case 586:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2996
		{
		}
	case 587:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3000
		{
			unimplemented()
		}
	case 588:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3011
		{
			unimplemented()
		}
	case 589:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3012
		{
		}
	case 590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3015
		{
			unimplemented()
		}
	case 591:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3016
		{
		}
	case 592:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3024
		{
			unimplemented()
		}
	case 593:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3025
		{
			unimplemented()
		}
	case 594:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3026
		{
		}
	case 595:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3029
		{
			unimplemented()
		}
	case 596:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3030
		{
			unimplemented()
		}
	case 597:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3036
		{
			unimplemented()
		}
	case 598:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3037
		{
			unimplemented()
		}
	case 599:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3038
		{
			unimplemented()
		}
	case 600:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3039
		{
			unimplemented()
		}
	case 601:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3040
		{
			unimplemented()
		}
	case 602:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3051
		{
			sqlVAL.expr = Row(sqlDollar[3].exprs)
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3055
		{
			sqlVAL.expr = Row(nil)
		}
	case 604:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3059
		{
			sqlVAL.expr = Tuple(append(sqlDollar[2].exprs, sqlDollar[4].expr))
		}
	case 605:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3065
		{
			sqlVAL.expr = Row(sqlDollar[3].exprs)
		}
	case 606:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3069
		{
			sqlVAL.expr = Row(nil)
		}
	case 607:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3075
		{
			sqlVAL.expr = Tuple(append(sqlDollar[2].exprs, sqlDollar[4].expr))
		}
	case 608:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3116
		{
			sqlVAL.exprs = Exprs{sqlDollar[1].expr}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3120
		{
			sqlVAL.exprs = append(sqlDollar[1].exprs, sqlDollar[3].expr)
		}
	case 610:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3126
		{
			sqlVAL.colTypes = []ColumnType{sqlDollar[1].colType}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3130
		{
			sqlVAL.colTypes = append(sqlDollar[1].colTypes, sqlDollar[3].colType)
		}
	case 612:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3136
		{
			sqlVAL.expr = Array(sqlDollar[2].exprs)
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3140
		{
			sqlVAL.expr = Array(sqlDollar[2].exprs)
		}
	case 614:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3144
		{
			sqlVAL.expr = Array(nil)
		}
	case 615:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3150
		{
			sqlVAL.exprs = Exprs{sqlDollar[1].expr}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3154
		{
			sqlVAL.exprs = append(sqlDollar[1].exprs, sqlDollar[3].expr)
		}
	case 617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3160
		{
			sqlVAL.exprs = Exprs{DString(sqlDollar[1].str), sqlDollar[3].expr}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3182
		{
			sqlVAL.exprs = Exprs{sqlDollar[1].expr, sqlDollar[2].expr, sqlDollar[3].expr, sqlDollar[4].expr}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3186
		{
			sqlVAL.exprs = Exprs{sqlDollar[1].expr, sqlDollar[2].expr, sqlDollar[3].expr}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3192
		{
			sqlVAL.expr = sqlDollar[2].expr
		}
	case 628:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3199
		{
			sqlVAL.exprs = Exprs{sqlDollar[3].expr, sqlDollar[1].expr}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3203
		{
			sqlVAL.exprs = nil
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3220
		{
			sqlVAL.exprs = Exprs{sqlDollar[1].expr, sqlDollar[2].expr, sqlDollar[3].expr}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3224
		{
			sqlVAL.exprs = Exprs{sqlDollar[1].expr, sqlDollar[3].expr, sqlDollar[2].expr}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3228
		{
			sqlVAL.exprs = Exprs{sqlDollar[1].expr, sqlDollar[2].expr}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3232
		{
			sqlVAL.exprs = Exprs{sqlDollar[1].expr, DInt(1), sqlDollar[2].expr}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3236
		{
			sqlVAL.exprs = sqlDollar[1].exprs
		}
	case 635:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3240
		{
			sqlVAL.exprs = nil
		}
	case 636:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3246
		{
			sqlVAL.expr = sqlDollar[2].expr
		}
	case 637:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3252
		{
			sqlVAL.expr = sqlDollar[2].expr
		}
	case 638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3258
		{
			sqlVAL.exprs = append(sqlDollar[3].exprs, sqlDollar[1].expr)
		}
	case 639:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3262
		{
			sqlVAL.exprs = sqlDollar[2].exprs
		}
	case 640:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3266
		{
			sqlVAL.exprs = sqlDollar[1].exprs
		}
	case 641:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3272
		{
			sqlVAL.expr = &Subquery{Select: sqlDollar[1].selectStmt}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3276
		{
			sqlVAL.expr = Tuple(sqlDollar[2].exprs)
		}
	case 643:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3287
		{
			sqlVAL.expr = &CaseExpr{Expr: sqlDollar[2].expr, Whens: sqlDollar[3].whens, Else: sqlDollar[4].expr}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3294
		{
			sqlVAL.whens = []*When{sqlDollar[1].when}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3298
		{
			sqlVAL.whens = append(sqlDollar[1].whens, sqlDollar[2].when)
		}
	case 646:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3304
		{
			sqlVAL.when = &When{Cond: sqlDollar[2].expr, Val: sqlDollar[4].expr}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3310
		{
			sqlVAL.expr = sqlDollar[2].expr
		}
	case 648:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3314
		{
			sqlVAL.expr = nil
		}
	case 650:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3321
		{
			sqlVAL.expr = nil
		}
	case 651:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3327
		{
			sqlVAL.indirectElem = NameIndirection(sqlDollar[2].str)
		}
	case 652:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3331
		{
			sqlVAL.indirectElem = qualifiedStar
		}
	case 653:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3335
		{
			sqlVAL.indirectElem = IndexIndirection(sqlDollar[2].str)
		}
	case 654:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3339
		{
			sqlVAL.indirectElem = &ArrayIndirection{Begin: sqlDollar[2].expr}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3343
		{
			sqlVAL.indirectElem = &ArrayIndirection{Begin: sqlDollar[2].expr, End: sqlDollar[4].expr}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3349
		{
			sqlVAL.indirect = Indirection{sqlDollar[1].indirectElem}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3353
		{
			sqlVAL.indirect = append(sqlDollar[1].indirect, sqlDollar[2].indirectElem)
		}
	case 658:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3358
		{
		}
	case 659:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3359
		{
		}
	case 661:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3368
		{
			sqlVAL.expr = DefaultVal{}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3374
		{
			sqlVAL.exprs = []Expr{sqlDollar[1].expr}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3378
		{
			sqlVAL.exprs = append(sqlDollar[1].exprs, sqlDollar[3].expr)
		}
	case 664:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3387
		{
			sqlVAL.exprs = sqlDollar[2].exprs
		}
	case 666:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3395
		{
			sqlVAL.selExprs = nil
		}
	case 667:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3401
		{
			sqlVAL.selExprs = SelectExprs{sqlDollar[1].selExpr}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3405
		{
			sqlVAL.selExprs = append(sqlDollar[1].selExprs, sqlDollar[3].selExpr)
		}
	case 669:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3411
		{
			sqlVAL.selExpr = SelectExpr{Expr: sqlDollar[1].expr, As: Name(sqlDollar[3].str)}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3420
		{
			sqlVAL.selExpr = SelectExpr{Expr: sqlDollar[1].expr, As: Name(sqlDollar[2].str)}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3424
		{
			sqlVAL.selExpr = SelectExpr{Expr: sqlDollar[1].expr}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3428
		{
			sqlVAL.selExpr = starSelectExpr()
		}
	case 673:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3436
		{
			sqlVAL.qnames = QualifiedNames{sqlDollar[1].qname}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3440
		{
			sqlVAL.qnames = append(sqlDollar[1].qnames, sqlDollar[3].qname)
		}
	case 675:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3451
		{
			sqlVAL.qname = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3455
		{
			sqlVAL.qname = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].indirect}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3461
		{
			sqlVAL.strs = []string{sqlDollar[1].str}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3465
		{
			sqlVAL.strs = append(sqlDollar[1].strs, sqlDollar[3].str)
		}
	case 679:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3471
		{
			sqlVAL.strs = sqlDollar[2].strs
		}
	case 680:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3474
		{
		}
	case 681:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3484
		{
			sqlVAL.qname = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3488
		{
			sqlVAL.qname = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].indirect}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3495
		{
			sqlVAL.expr = &IntVal{Val: sqlDollar[1].ival.Val, Str: sqlDollar[1].ival.Str}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3499
		{
			sqlVAL.expr = NumVal(sqlDollar[1].str)
		}
	case 685:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3503
		{
			sqlVAL.expr = DString(sqlDollar[1].str)
		}
	case 686:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3507
		{
			sqlVAL.expr = DBytes(sqlDollar[1].str)
		}
	case 687:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3510
		{
			unimplemented()
		}
	case 688:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3512
		{
			sqlVAL.expr = &CastExpr{Expr: DString(sqlDollar[2].str), Type: sqlDollar[1].colType}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3516
		{
			// TODO(pmattis): support opt_interval?
			sqlVAL.expr = &CastExpr{Expr: DString(sqlDollar[2].str), Type: sqlDollar[1].colType}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3521
		{
			// TODO(pmattis): Support the precision specification?
			sqlVAL.expr = &CastExpr{Expr: DString(sqlDollar[5].str), Type: sqlDollar[1].colType}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3526
		{
			sqlVAL.expr = DBool(true)
		}
	case 692:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3530
		{
			sqlVAL.expr = DBool(false)
		}
	case 693:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3534
		{
			sqlVAL.expr = DNull
		}
	case 695:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3541
		{
			sqlVAL.ival = sqlDollar[2].ival
		}
	case 696:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3545
		{
			sqlVAL.ival = IntVal{Val: -sqlDollar[2].ival.Val, Str: "-" + sqlDollar[2].ival.Str}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3567
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
