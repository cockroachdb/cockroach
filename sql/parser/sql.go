// Code generated by go yacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"go/constant"
	"go/token"

	"github.com/pkg/errors"

	"github.com/cockroachdb/cockroach/sql/privilege"
	"github.com/cockroachdb/cockroach/util"
)

var errUnimplemented = errors.New("unimplemented")

func unimplemented() {
	panic(errUnimplemented)
}

func unimplementedWithIssue(issue int) {
	panic(util.UnimplementedWithIssueErrorf(issue, ""))
}

//line sql.y:44

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in two forms, depending on the
// type of the value being accessed. Values and pointers are directly
// type asserted from the empty interface, meaning that they will panic
// if the type assertion is incorrect. Interfaces are handled differently
// because a nil instance of an interface inserted into the empty interface
// becomes a nil instance of the empty interface and therefore will fail a
// direct type assertion. Instead, a guarded type assertion must be used,
// which returns nil if the type assertion fails.
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	return u.val.(*StrVal)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	if namePart, ok := u.val.(NamePart); ok {
		return namePart
	}
	return nil
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionName() FunctionName {
	return u.val.(FunctionName)
}
func (u *sqlSymUnion) normalizableFunctionName() NormalizableFunctionName {
	return NormalizableFunctionName{u.val.(FunctionName)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	if selectStmt, ok := u.val.(*Select); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	if selectStmt, ok := u.val.(SelectStatement); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	if constraintDef, ok := u.val.(ConstraintTableDef); ok {
		return constraintDef
	}
	return nil
}
func (u *sqlSymUnion) tblDef() TableDef {
	if tblDef, ok := u.val.(TableDef); ok {
		return tblDef
	}
	return nil
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	if colQual, ok := u.val.(NamedColumnQualification); ok {
		return colQual
	}
	return NamedColumnQualification{}
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	if colQual, ok := u.val.(ColumnQualification); ok {
		return colQual
	}
	return nil
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retExprs() ReturningExprs {
	return ReturningExprs(u.val.(SelectExprs))
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	if tblExpr, ok := u.val.(TableExpr); ok {
		return tblExpr
	}
	return nil
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	if joinCond, ok := u.val.(JoinCond); ok {
		return joinCond
	}
	return nil
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	if alterTableCmd, ok := u.val.(AlterTableCmd); ok {
		return alterTableCmd
	}
	return nil
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}

//line sql.y:318
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BEGIN = 57376
const BETWEEN = 57377
const BIGINT = 57378
const BIGSERIAL = 57379
const BIT = 57380
const BLOB = 57381
const BOOL = 57382
const BOOLEAN = 57383
const BOTH = 57384
const BY = 57385
const BYTEA = 57386
const BYTES = 57387
const CASCADE = 57388
const CASE = 57389
const CAST = 57390
const CHAR = 57391
const CHARACTER = 57392
const CHARACTERISTICS = 57393
const CHECK = 57394
const COALESCE = 57395
const COLLATE = 57396
const COLLATION = 57397
const COLUMN = 57398
const COLUMNS = 57399
const COMMIT = 57400
const COMMITTED = 57401
const CONCAT = 57402
const CONFLICT = 57403
const CONSTRAINT = 57404
const CONSTRAINTS = 57405
const COPY = 57406
const COVERING = 57407
const CREATE = 57408
const CROSS = 57409
const CUBE = 57410
const CURRENT = 57411
const CURRENT_CATALOG = 57412
const CURRENT_DATE = 57413
const CURRENT_ROLE = 57414
const CURRENT_TIME = 57415
const CURRENT_TIMESTAMP = 57416
const CURRENT_USER = 57417
const CYCLE = 57418
const DATA = 57419
const DATABASE = 57420
const DATABASES = 57421
const DATE = 57422
const DAY = 57423
const DEC = 57424
const DECIMAL = 57425
const DEFAULT = 57426
const DEALLOCATE = 57427
const DEFERRABLE = 57428
const DELETE = 57429
const DESC = 57430
const DISTINCT = 57431
const DO = 57432
const DOUBLE = 57433
const DROP = 57434
const ELSE = 57435
const ENCODING = 57436
const END = 57437
const ESCAPE = 57438
const EXCEPT = 57439
const EXISTS = 57440
const EXECUTE = 57441
const EXPLAIN = 57442
const EXTRACT = 57443
const EXTRACT_DURATION = 57444
const FALSE = 57445
const FAMILY = 57446
const FETCH = 57447
const FILTER = 57448
const FIRST = 57449
const FLOAT = 57450
const FLOORDIV = 57451
const FOLLOWING = 57452
const FOR = 57453
const FORCE_INDEX = 57454
const FOREIGN = 57455
const FROM = 57456
const FULL = 57457
const GRANT = 57458
const GRANTS = 57459
const GREATEST = 57460
const GROUP = 57461
const GROUPING = 57462
const HAVING = 57463
const HELP = 57464
const HIGH = 57465
const HOUR = 57466
const IF = 57467
const IFNULL = 57468
const ILIKE = 57469
const IN = 57470
const INTERLEAVE = 57471
const INDEX = 57472
const INDEXES = 57473
const INITIALLY = 57474
const INNER = 57475
const INSERT = 57476
const INT = 57477
const INT8 = 57478
const INT64 = 57479
const INTEGER = 57480
const INTERSECT = 57481
const INTERVAL = 57482
const INTO = 57483
const IS = 57484
const ISOLATION = 57485
const JOIN = 57486
const KEY = 57487
const KEYS = 57488
const LATERAL = 57489
const LEADING = 57490
const LEAST = 57491
const LEFT = 57492
const LEVEL = 57493
const LIKE = 57494
const LIMIT = 57495
const LOCAL = 57496
const LOCALTIME = 57497
const LOCALTIMESTAMP = 57498
const LOW = 57499
const LSHIFT = 57500
const MATCH = 57501
const MINUTE = 57502
const MONTH = 57503
const NAME = 57504
const NAMES = 57505
const NATURAL = 57506
const NEXT = 57507
const NO = 57508
const NO_INDEX_JOIN = 57509
const NORMAL = 57510
const NOT = 57511
const NOTHING = 57512
const NULL = 57513
const NULLIF = 57514
const NULLS = 57515
const NUMERIC = 57516
const OF = 57517
const OFF = 57518
const OFFSET = 57519
const ON = 57520
const ONLY = 57521
const OR = 57522
const ORDER = 57523
const ORDINALITY = 57524
const OUT = 57525
const OUTER = 57526
const OVER = 57527
const OVERLAPS = 57528
const OVERLAY = 57529
const PARENT = 57530
const PARTIAL = 57531
const PARTITION = 57532
const PLACING = 57533
const POSITION = 57534
const PRECEDING = 57535
const PRECISION = 57536
const PREPARE = 57537
const PRIMARY = 57538
const PRIORITY = 57539
const RANGE = 57540
const READ = 57541
const REAL = 57542
const RECURSIVE = 57543
const REF = 57544
const REFERENCES = 57545
const RENAME = 57546
const REPEATABLE = 57547
const RELEASE = 57548
const RESTRICT = 57549
const RETURNING = 57550
const REVOKE = 57551
const RIGHT = 57552
const ROLLBACK = 57553
const ROLLUP = 57554
const ROW = 57555
const ROWS = 57556
const RSHIFT = 57557
const SAVEPOINT = 57558
const SEARCH = 57559
const SECOND = 57560
const SELECT = 57561
const SERIAL = 57562
const SERIALIZABLE = 57563
const SESSION = 57564
const SESSION_USER = 57565
const SET = 57566
const SHOW = 57567
const SIMILAR = 57568
const SIMPLE = 57569
const SMALLINT = 57570
const SMALLSERIAL = 57571
const SNAPSHOT = 57572
const SOME = 57573
const SPLIT = 57574
const SQL = 57575
const START = 57576
const STDIN = 57577
const STRICT = 57578
const STRING = 57579
const STORING = 57580
const SUBSTRING = 57581
const SYMMETRIC = 57582
const SYSTEM = 57583
const TABLE = 57584
const TABLES = 57585
const TEXT = 57586
const THEN = 57587
const TIME = 57588
const TIMESTAMP = 57589
const TIMESTAMPTZ = 57590
const TO = 57591
const TRAILING = 57592
const TRANSACTION = 57593
const TREAT = 57594
const TRIM = 57595
const TRUE = 57596
const TRUNCATE = 57597
const TYPE = 57598
const UNBOUNDED = 57599
const UNCOMMITTED = 57600
const UNION = 57601
const UNIQUE = 57602
const UNKNOWN = 57603
const UPDATE = 57604
const UPSERT = 57605
const USER = 57606
const USING = 57607
const VALID = 57608
const VALIDATE = 57609
const VALUE = 57610
const VALUES = 57611
const VARCHAR = 57612
const VARIADIC = 57613
const VIEW = 57614
const VARYING = 57615
const WHEN = 57616
const WHERE = 57617
const WINDOW = 57618
const WITH = 57619
const WITHIN = 57620
const WITHOUT = 57621
const YEAR = 57622
const ZONE = 57623
const NOT_LA = 57624
const WITH_LA = 57625
const AS_LA = 57626
const POSTFIXOP = 57627
const UMINUS = 57628

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:4862

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 27,
	305, 27,
	-2, 375,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 45,
	1, 350,
	178, 350,
	208, 350,
	303, 350,
	305, 350,
	-2, 360,
	-1, 58,
	1, 353,
	178, 353,
	208, 353,
	303, 353,
	305, 353,
	-2, 359,
	-1, 67,
	1, 27,
	305, 27,
	-2, 375,
	-1, 387,
	1, 173,
	305, 173,
	-2, 877,
	-1, 421,
	153, 385,
	177, 385,
	-2, 356,
	-1, 424,
	153, 384,
	177, 384,
	-2, 354,
	-1, 544,
	153, 384,
	177, 384,
	-2, 357,
	-1, 600,
	302, 815,
	-2, 808,
	-1, 601,
	302, 816,
	-2, 809,
	-1, 607,
	5, 520,
	302, 520,
	-2, 968,
	-1, 631,
	5, 486,
	-2, 942,
	-1, 632,
	5, 514,
	302, 514,
	-2, 944,
	-1, 633,
	5, 494,
	-2, 945,
	-1, 634,
	5, 493,
	-2, 946,
	-1, 635,
	5, 514,
	302, 514,
	-2, 949,
	-1, 636,
	5, 514,
	302, 514,
	-2, 950,
	-1, 637,
	5, 515,
	-2, 953,
	-1, 638,
	5, 480,
	-2, 954,
	-1, 639,
	5, 480,
	-2, 955,
	-1, 640,
	5, 496,
	-2, 959,
	-1, 641,
	5, 481,
	-2, 964,
	-1, 642,
	5, 482,
	-2, 965,
	-1, 643,
	5, 483,
	-2, 966,
	-1, 644,
	5, 484,
	-2, 967,
	-1, 645,
	5, 480,
	-2, 971,
	-1, 646,
	5, 487,
	-2, 976,
	-1, 647,
	5, 485,
	-2, 979,
	-1, 648,
	5, 512,
	302, 512,
	-2, 981,
	-1, 649,
	5, 516,
	-2, 984,
	-1, 650,
	5, 518,
	-2, 985,
	-1, 651,
	5, 511,
	302, 511,
	-2, 989,
	-1, 897,
	97, 360,
	139, 360,
	153, 360,
	177, 360,
	181, 360,
	259, 360,
	-2, 632,
	-1, 905,
	302, 793,
	-2, 782,
	-1, 1105,
	13, 0,
	14, 0,
	15, 0,
	285, 0,
	286, 0,
	287, 0,
	-2, 555,
	-1, 1106,
	13, 0,
	14, 0,
	15, 0,
	285, 0,
	286, 0,
	287, 0,
	-2, 556,
	-1, 1107,
	13, 0,
	14, 0,
	15, 0,
	285, 0,
	286, 0,
	287, 0,
	-2, 557,
	-1, 1111,
	13, 0,
	14, 0,
	15, 0,
	285, 0,
	286, 0,
	287, 0,
	-2, 561,
	-1, 1112,
	13, 0,
	14, 0,
	15, 0,
	285, 0,
	286, 0,
	287, 0,
	-2, 562,
	-1, 1113,
	13, 0,
	14, 0,
	15, 0,
	285, 0,
	286, 0,
	287, 0,
	-2, 563,
	-1, 1116,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	226, 0,
	282, 0,
	-2, 568,
	-1, 1122,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	226, 0,
	282, 0,
	-2, 570,
	-1, 1125,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	226, 0,
	282, 0,
	-2, 575,
	-1, 1126,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	226, 0,
	282, 0,
	-2, 576,
	-1, 1127,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	226, 0,
	282, 0,
	-2, 577,
	-1, 1152,
	186, 704,
	-2, 707,
	-1, 1175,
	114, 720,
	302, 815,
	-2, 808,
	-1, 1176,
	114, 721,
	-2, 938,
	-1, 1177,
	114, 722,
	-2, 875,
	-1, 1178,
	114, 723,
	-2, 848,
	-1, 1179,
	114, 724,
	-2, 863,
	-1, 1180,
	114, 725,
	-2, 874,
	-1, 1181,
	114, 726,
	-2, 908,
	-1, 1327,
	97, 360,
	139, 360,
	153, 360,
	177, 360,
	181, 360,
	259, 360,
	-2, 433,
	-1, 1331,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	226, 0,
	282, 0,
	-2, 569,
	-1, 1332,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	226, 0,
	282, 0,
	-2, 571,
	-1, 1337,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	226, 0,
	282, 0,
	-2, 572,
	-1, 1355,
	186, 703,
	-2, 706,
	-1, 1519,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	226, 0,
	282, 0,
	-2, 573,
	-1, 1524,
	142, 0,
	-2, 587,
	-1, 1532,
	186, 705,
	-2, 708,
	-1, 1566,
	13, 0,
	14, 0,
	15, 0,
	285, 0,
	286, 0,
	287, 0,
	-2, 613,
	-1, 1567,
	13, 0,
	14, 0,
	15, 0,
	285, 0,
	286, 0,
	287, 0,
	-2, 614,
	-1, 1568,
	13, 0,
	14, 0,
	15, 0,
	285, 0,
	286, 0,
	287, 0,
	-2, 615,
	-1, 1572,
	13, 0,
	14, 0,
	15, 0,
	285, 0,
	286, 0,
	287, 0,
	-2, 619,
	-1, 1573,
	13, 0,
	14, 0,
	15, 0,
	285, 0,
	286, 0,
	287, 0,
	-2, 620,
	-1, 1574,
	13, 0,
	14, 0,
	15, 0,
	285, 0,
	286, 0,
	287, 0,
	-2, 621,
	-1, 1678,
	142, 0,
	-2, 588,
	-1, 1681,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	226, 0,
	282, 0,
	-2, 591,
	-1, 1682,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	226, 0,
	282, 0,
	-2, 593,
	-1, 1769,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	226, 0,
	282, 0,
	-2, 592,
	-1, 1770,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	226, 0,
	282, 0,
	-2, 594,
	-1, 1777,
	142, 0,
	-2, 622,
	-1, 1822,
	142, 0,
	-2, 623,
	-1, 1874,
	35, 0,
	127, 0,
	152, 0,
	226, 0,
	282, 0,
	-2, 941,
}

const sqlNprod = 1084
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 25159

var sqlAct = [...]int{

	601, 1873, 1854, 1486, 1896, 1828, 1721, 1855, 983, 1856,
	1872, 991, 1077, 1543, 822, 1757, 1744, 1670, 425, 1644,
	900, 258, 459, 567, 388, 1603, 599, 1664, 44, 74,
	75, 1643, 598, 446, 1657, 1324, 826, 1059, 260, 74,
	74, 74, 712, 19, 74, 902, 1498, 74, 1054, 652,
	1253, 1412, 1323, 1411, 1058, 74, 1314, 829, 1358, 1085,
	591, 1308, 74, 74, 563, 1508, 74, 1055, 261, 74,
	74, 74, 1023, 664, 667, 961, 992, 1086, 1162, 1138,
	249, 1201, 26, 1089, 1135, 432, 57, 262, 844, 430,
	1007, 15, 952, 458, 1016, 776, 7, 1049, 760, 531,
	683, 669, 1172, 573, 697, 564, 757, 532, 460, 461,
	933, 787, 474, 1087, 471, 1062, 480, 850, 424, 254,
	9, 8, 57, 6, 435, 4, 247, 937, 253, 547,
	546, 473, 385, 255, 58, 548, 778, 774, 375, 756,
	467, 366, 985, 690, 551, 433, 530, 1764, 699, 699,
	1765, 378, 699, 57, 984, 1020, 429, 256, 251, 59,
	250, 1888, 252, 1870, 1081, 429, 1743, 1862, 1382, 1383,
	1081, 1400, 1401, 1402, 1322, 1852, 988, 593, 1013, 443,
	1847, 679, 449, 1081, 1677, 1264, 1824, 1818, 1808, 1013,
	1081, 1743, 422, 413, 1798, 713, 1771, 1081, 1021, 1013,
	1768, 452, 1754, 1081, 63, 1743, 1751, 1742, 437, 1081,
	1743, 1026, 1726, 1725, 257, 1081, 1081, 421, 1397, 1703,
	1683, 1680, 1026, 1026, 1013, 1630, 1629, 65, 1026, 1026,
	1615, 1265, 852, 1081, 1022, 1019, 1528, 1472, 1466, 1026,
	980, 980, 1812, 74, 74, 74, 74, 74, 1429, 483,
	1427, 1430, 1426, 1026, 66, 1026, 1425, 56, 1355, 1026,
	1353, 1026, 61, 1312, 1352, 1354, 851, 1388, 62, 1026,
	476, 476, 1293, 1082, 1311, 1081, 1081, 430, 1579, 484,
	1531, 1357, 1291, 35, 950, 1311, 1035, 60, 1294, 1026,
	1026, 36, 1024, 1025, 1012, 1746, 1026, 1013, 485, 979,
	1403, 1081, 980, 949, 853, 854, 948, 1028, 1146, 700,
	700, 63, 1076, 700, 707, 257, 1398, 708, 462, 1043,
	559, 558, 463, 817, 63, 816, 768, 856, 767, 495,
	442, 462, 67, 463, 65, 463, 801, 515, 1871, 1382,
	1383, 1868, 1400, 1401, 1402, 1861, 1819, 65, 855, 654,
	1752, 1708, 1704, 1696, 1018, 1676, 468, 1695, 56, 477,
	481, 66, 74, 1694, 1689, 1688, 1687, 1641, 1635, 61,
	1594, 1589, 1588, 1399, 66, 62, 1017, 74, 1587, 1534,
	74, 74, 1517, 1497, 35, 1476, 1434, 1431, 1419, 1397,
	1410, 1381, 36, 1378, 987, 1143, 1377, 1375, 1363, 1362,
	1292, 1218, 1169, 861, 1296, 1640, 908, 60, 703, 698,
	63, 1168, 820, 74, 558, 74, 557, 74, 74, 1474,
	74, 456, 825, 1264, 851, 1545, 1838, 1811, 1790, 1788,
	1779, 1761, 1749, 65, 1740, 74, 1718, 1701, 1388, 1673,
	545, 538, 540, 1394, 1395, 1396, 74, 1393, 1390, 1391,
	1392, 1384, 1385, 1386, 1387, 1389, 853, 854, 74, 1651,
	66, 1523, 1516, 1494, 260, 74, 74, 74, 61, 74,
	1492, 1403, 1491, 1489, 62, 1446, 659, 1445, 1409, 856,
	544, 685, 503, 1371, 1144, 687, 1370, 1398, 74, 1349,
	504, 1345, 1634, 60, 261, 74, 1140, 74, 1382, 1383,
	855, 1280, 1245, 1244, 658, 1232, 853, 854, 483, 483,
	1231, 63, 1211, 262, 1167, 1080, 260, 74, 574, 74,
	74, 74, 74, 74, 74, 74, 938, 941, 537, 74,
	74, 498, 500, 945, 65, 74, 931, 802, 484, 484,
	930, 462, 74, 1639, 1399, 463, 261, 71, 929, 928,
	855, 535, 927, 926, 533, 824, 925, 485, 485, 924,
	74, 66, 923, 74, 922, 262, 921, 422, 920, 61,
	919, 918, 554, 555, 839, 62, 1232, 917, 468, 702,
	560, 916, 705, 915, 444, 906, 904, 451, 454, 859,
	860, 862, 421, 882, 248, 60, 675, 1388, 821, 447,
	562, 709, 1382, 1383, 501, 689, 430, 905, 491, 457,
	692, 1382, 1383, 653, 1394, 1395, 1396, 489, 1393, 1390,
	1391, 1392, 1384, 1385, 1386, 1387, 1389, 853, 854, 660,
	848, 903, 1274, 1273, 1766, 1638, 764, 763, 1266, 509,
	1071, 819, 1020, 1433, 943, 913, 791, 798, 944, 803,
	1432, 1330, 807, 808, 809, 810, 811, 525, 806, 660,
	510, 814, 815, 74, 1658, 984, 1546, 719, 1366, 1163,
	934, 74, 670, 818, 671, 74, 832, 1260, 834, 74,
	74, 1440, 1834, 833, 846, 1021, 422, 528, 797, 422,
	422, 670, 1611, 671, 74, 1884, 74, 74, 670, 74,
	671, 1388, 74, 909, 74, 74, 1287, 74, 955, 483,
	1388, 840, 419, 1473, 841, 842, 1885, 529, 1623, 962,
	1034, 1022, 1019, 1797, 1612, 412, 406, 411, 1001, 476,
	428, 476, 954, 407, 986, 243, 986, 1137, 1457, 484,
	1734, 1733, 954, 672, 1460, 882, 935, 936, 953, 1437,
	1398, 249, 1436, 1333, 1279, 1008, 1278, 1277, 485, 74,
	74, 444, 672, 454, 966, 968, 1276, 939, 1123, 672,
	1027, 977, 427, 942, 507, 974, 946, 534, 1759, 1024,
	965, 1384, 1385, 1386, 1387, 1389, 958, 244, 971, 1215,
	254, 1342, 1214, 57, 1010, 882, 1094, 57, 239, 253,
	487, 415, 260, 1009, 255, 1340, 74, 1399, 1011, 1607,
	975, 1608, 508, 1661, 429, 1796, 1000, 1002, 1137, 1003,
	481, 74, 74, 1048, 1187, 1005, 74, 1030, 256, 251,
	999, 250, 261, 252, 1004, 990, 1610, 1723, 1461, 742,
	1249, 1018, 681, 1613, 1836, 240, 693, 1904, 1448, 1163,
	677, 262, 1899, 74, 1024, 1243, 74, 1478, 1893, 1083,
	699, 936, 935, 964, 939, 1029, 942, 1254, 1037, 70,
	1031, 1032, 1464, 1338, 668, 1036, 416, 1343, 676, 1849,
	1093, 1393, 1390, 1391, 1392, 1384, 1385, 1386, 1387, 1389,
	260, 1884, 426, 1479, 420, 1850, 1386, 1387, 1389, 245,
	1609, 1481, 1258, 853, 854, 1286, 417, 1074, 1075, 796,
	795, 1141, 789, 784, 1262, 1791, 882, 1052, 673, 1247,
	261, 69, 680, 685, 1051, 1455, 856, 963, 685, 246,
	1858, 1288, 1254, 444, 1053, 951, 506, 673, 505, 262,
	932, 1892, 853, 854, 673, 1335, 1188, 855, 1775, 1150,
	1741, 1024, 74, 74, 74, 1217, 1339, 1084, 74, 1024,
	1039, 74, 896, 1341, 661, 856, 1041, 74, 74, 74,
	74, 74, 1897, 242, 241, 74, 684, 1369, 74, 1120,
	1449, 74, 1042, 444, 691, 691, 855, 606, 74, 799,
	74, 1040, 506, 526, 1204, 1225, 1509, 74, 429, 1857,
	1142, 1883, 861, 1159, 1859, 656, 444, 74, 1905, 550,
	1724, 1881, 1656, 1898, 586, 1069, 430, 518, 496, 494,
	1699, 700, 1219, 1182, 1891, 1728, 1136, 549, 74, 74,
	1900, 719, 719, 68, 74, 1502, 1256, 1575, 1727, 1716,
	1785, 861, 1860, 72, 483, 748, 1242, 527, 1910, 1091,
	1092, 550, 1220, 358, 359, 360, 1622, 1439, 377, 800,
	1619, 389, 1477, 1621, 74, 1228, 74, 1313, 74, 377,
	74, 1118, 1121, 74, 484, 1224, 436, 436, 1070, 831,
	72, 823, 74, 72, 72, 455, 1671, 1829, 1259, 74,
	871, 74, 1299, 485, 549, 1667, 1117, 1267, 773, 655,
	1295, 813, 1297, 741, 769, 1268, 1700, 1269, 1270, 1504,
	1298, 1717, 1300, 1234, 1233, 1317, 1503, 1576, 466, 430,
	1271, 505, 465, 1577, 1008, 1282, 1611, 1283, 1604, 427,
	1487, 1284, 771, 1320, 1285, 1909, 1602, 719, 541, 1289,
	1606, 1672, 1290, 772, 1315, 1618, 1642, 872, 1620, 1499,
	1318, 1309, 1166, 1778, 1714, 1229, 1698, 1413, 1612, 1188,
	1188, 1522, 1376, 1010, 1316, 1305, 57, 1344, 1329, 430,
	1119, 1306, 1009, 1356, 1328, 1715, 1250, 1011, 1605, 1033,
	978, 947, 1133, 524, 523, 522, 857, 858, 859, 860,
	862, 719, 882, 444, 521, 520, 1131, 454, 790, 785,
	519, 1336, 516, 742, 742, 1334, 464, 1414, 364, 1272,
	1319, 914, 995, 1188, 1188, 1188, 805, 454, 1165, 1853,
	454, 430, 863, 864, 865, 857, 858, 859, 860, 862,
	1826, 882, 1600, 74, 1453, 719, 1451, 1438, 1302, 1072,
	1365, 1067, 1006, 1607, 706, 1608, 704, 701, 696, 678,
	674, 1540, 367, 1229, 830, 1735, 1078, 72, 469, 72,
	389, 389, 1129, 552, 1128, 74, 74, 1885, 1134, 1317,
	1610, 793, 1468, 372, 1737, 440, 603, 1613, 368, 1435,
	1416, 1417, 1418, 954, 954, 970, 512, 1320, 3, 969,
	967, 1465, 74, 1746, 1793, 74, 973, 74, 1507, 1821,
	1444, 1500, 369, 74, 1318, 556, 1442, 972, 1813, 742,
	1654, 1015, 74, 1079, 1493, 405, 74, 1068, 363, 1463,
	371, 1066, 74, 260, 989, 1470, 74, 1467, 74, 847,
	553, 765, 711, 1490, 1609, 1907, 1456, 853, 854, 444,
	1471, 1469, 441, 1452, 1513, 1454, 1242, 1130, 1908, 1488,
	1480, 1482, 1483, 261, 1132, 1595, 448, 1484, 1188, 1188,
	856, 374, 1496, 742, 1319, 513, 1475, 408, 409, 1428,
	74, 444, 262, 1506, 1512, 1275, 492, 1216, 1536, 1537,
	1538, 855, 1382, 1383, 1510, 1511, 1213, 870, 1525, 1501,
	1212, 497, 1160, 1505, 389, 389, 853, 854, 1045, 1044,
	1533, 1046, 1814, 1685, 1539, 370, 1303, 742, 1188, 1188,
	1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
	1188, 1188, 1188, 1188, 1188, 1188, 1188, 377, 1188, 72,
	1547, 389, 389, 1552, 542, 1047, 861, 74, 74, 74,
	907, 414, 1722, 365, 804, 517, 74, 74, 373, 436,
	1848, 1691, 74, 1368, 74, 1756, 74, 74, 74, 1774,
	72, 74, 1164, 1582, 912, 34, 1583, 741, 741, 1646,
	1221, 579, 72, 1601, 1441, 1061, 1599, 718, 1060, 72,
	72, 72, 1596, 694, 263, 871, 754, 794, 783, 602,
	777, 786, 74, 74, 1173, 744, 766, 657, 604, 1251,
	716, 605, 72, 717, 74, 74, 684, 940, 74, 761,
	1636, 761, 592, 1616, 1617, 684, 1649, 74, 74, 1637,
	714, 1649, 1648, 719, 479, 444, 1655, 1648, 1310, 1632,
	993, 389, 1161, 761, 389, 389, 389, 389, 389, 812,
	1364, 1653, 872, 389, 389, 910, 74, 578, 584, 377,
	1650, 719, 719, 1675, 583, 1650, 828, 1148, 488, 1652,
	719, 719, 575, 1669, 1321, 47, 1679, 502, 383, 1549,
	1550, 384, 899, 741, 436, 1257, 1633, 849, 1554, 1555,
	1073, 1662, 1663, 835, 1674, 1668, 1450, 418, 1301, 743,
	1379, 490, 1194, 719, 1186, 1183, 536, 663, 1382, 1383,
	994, 74, 514, 74, 1697, 74, 74, 1263, 1014, 444,
	561, 1586, 843, 439, 74, 438, 866, 863, 864, 865,
	857, 858, 859, 860, 862, 1056, 882, 741, 511, 1712,
	770, 1709, 1038, 410, 1787, 74, 1188, 1227, 1710, 1903,
	1792, 1447, 1833, 64, 25, 23, 22, 21, 20, 18,
	17, 1382, 1383, 16, 24, 14, 13, 74, 12, 74,
	11, 10, 33, 1747, 32, 31, 1745, 30, 74, 29,
	5, 741, 1738, 2, 74, 1, 0, 72, 1649, 0,
	0, 0, 0, 1750, 1648, 959, 0, 0, 0, 72,
	0, 1760, 0, 72, 976, 742, 0, 1388, 1753, 0,
	0, 719, 1736, 0, 0, 1773, 0, 0, 72, 0,
	997, 998, 1650, 72, 755, 74, 72, 0, 389, 389,
	0, 389, 1188, 742, 742, 1789, 0, 0, 0, 1731,
	1732, 0, 742, 742, 74, 74, 0, 1783, 74, 0,
	0, 1767, 74, 0, 1780, 1763, 1398, 74, 0, 1801,
	1388, 1784, 0, 0, 0, 0, 1809, 1803, 0, 0,
	1805, 1810, 74, 1802, 0, 742, 715, 260, 685, 430,
	1649, 1804, 0, 761, 849, 0, 1648, 0, 0, 0,
	0, 0, 1816, 995, 444, 0, 0, 0, 1817, 74,
	0, 74, 74, 1820, 74, 0, 0, 261, 0, 1398,
	0, 719, 1188, 1399, 1650, 1839, 0, 1837, 0, 0,
	0, 0, 0, 74, 1843, 1842, 262, 0, 1835, 1730,
	1050, 0, 1823, 1840, 0, 0, 1841, 1846, 1845, 1815,
	444, 0, 0, 0, 444, 72, 1057, 74, 1649, 74,
	849, 718, 718, 1844, 1648, 367, 1869, 1863, 1865, 0,
	0, 0, 0, 1867, 74, 0, 1399, 0, 1831, 744,
	744, 1878, 0, 0, 1882, 1880, 372, 72, 0, 1886,
	389, 368, 1650, 742, 1887, 0, 1890, 1889, 0, 719,
	1392, 1384, 1385, 1386, 1387, 1389, 0, 853, 854, 1902,
	1901, 0, 0, 1906, 0, 369, 0, 0, 1147, 1151,
	0, 1154, 0, 0, 0, 0, 1866, 853, 854, 1911,
	856, 0, 0, 371, 1174, 1174, 1185, 0, 1196, 0,
	0, 1382, 1383, 0, 1208, 1209, 1210, 0, 0, 0,
	856, 855, 0, 0, 1384, 1385, 1386, 1387, 1389, 0,
	0, 0, 0, 0, 0, 0, 0, 718, 0, 0,
	0, 855, 0, 743, 743, 0, 0, 719, 0, 741,
	1346, 1347, 0, 0, 0, 744, 72, 1222, 1223, 0,
	0, 1397, 959, 742, 1626, 1230, 0, 0, 0, 0,
	0, 1235, 1236, 1238, 1240, 1241, 861, 741, 741, 1246,
	0, 390, 1248, 0, 0, 72, 741, 741, 370, 0,
	0, 718, 72, 0, 1261, 0, 861, 0, 0, 403,
	0, 72, 0, 0, 1405, 1406, 1407, 0, 0, 744,
	1388, 72, 444, 444, 0, 0, 444, 0, 0, 741,
	0, 0, 0, 0, 0, 871, 0, 0, 0, 0,
	0, 373, 1050, 761, 392, 718, 0, 0, 1050, 397,
	398, 742, 0, 404, 0, 871, 0, 0, 0, 743,
	0, 0, 0, 744, 0, 391, 393, 0, 0, 1398,
	0, 0, 0, 0, 0, 0, 0, 0, 828, 0,
	828, 0, 389, 0, 72, 0, 0, 1304, 0, 0,
	0, 0, 872, 0, 0, 0, 1307, 0, 0, 0,
	0, 0, 0, 1326, 394, 72, 0, 0, 0, 0,
	0, 0, 872, 743, 0, 0, 0, 395, 396, 0,
	0, 0, 0, 0, 0, 0, 1399, 0, 0, 742,
	715, 715, 1720, 399, 0, 1348, 0, 741, 0, 1350,
	0, 0, 0, 1382, 1383, 0, 0, 0, 0, 0,
	0, 1360, 1361, 565, 565, 0, 0, 743, 0, 1520,
	1521, 0, 665, 0, 0, 0, 866, 863, 864, 865,
	857, 858, 859, 860, 862, 1755, 882, 686, 0, 0,
	0, 0, 0, 0, 0, 0, 444, 1408, 0, 865,
	857, 858, 859, 860, 862, 0, 882, 0, 1421, 0,
	1393, 1390, 1391, 1392, 1384, 1385, 1386, 1387, 1389, 1556,
	1557, 1558, 1559, 1560, 1561, 1562, 1563, 1564, 1565, 1566,
	1567, 1568, 1569, 1570, 1571, 1572, 1573, 1574, 0, 1578,
	400, 0, 0, 401, 0, 0, 715, 741, 402, 1458,
	1459, 0, 1388, 0, 0, 0, 0, 849, 1313, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1382, 1383,
	0, 1400, 1401, 1402, 836, 838, 0, 0, 0, 0,
	0, 845, 0, 0, 1527, 0, 0, 0, 0, 72,
	72, 0, 0, 891, 892, 893, 894, 895, 0, 0,
	715, 1398, 898, 0, 0, 0, 1317, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1485, 0, 1397, 959,
	1832, 828, 911, 0, 1320, 741, 0, 1495, 0, 0,
	0, 0, 0, 0, 0, 1315, 72, 0, 0, 0,
	72, 1318, 0, 718, 715, 0, 1326, 0, 0, 0,
	1515, 0, 1326, 0, 1529, 1316, 0, 0, 1399, 0,
	0, 744, 0, 0, 0, 995, 0, 1388, 0, 1666,
	0, 718, 718, 0, 0, 0, 0, 0, 0, 0,
	718, 718, 0, 0, 0, 0, 0, 0, 0, 744,
	744, 0, 580, 45, 1544, 0, 0, 0, 744, 744,
	1403, 1319, 0, 741, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 718, 1580, 0, 1398, 0, 0, 0,
	0, 0, 0, 0, 0, 1590, 0, 0, 0, 45,
	0, 744, 0, 1390, 1391, 1392, 1384, 1385, 1386, 1387,
	1389, 0, 0, 0, 0, 0, 0, 1719, 0, 0,
	423, 0, 0, 431, 0, 743, 1665, 0, 0, 0,
	45, 1597, 1598, 959, 0, 0, 0, 0, 0, 0,
	849, 849, 0, 1399, 0, 0, 1624, 0, 1625, 0,
	72, 1627, 1628, 743, 743, 1631, 0, 0, 0, 0,
	0, 0, 743, 743, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1660, 0, 0, 0, 0,
	0, 0, 0, 0, 1645, 0, 849, 1057, 0, 1645,
	0, 718, 0, 0, 0, 743, 0, 0, 72, 72,
	0, 0, 72, 1777, 0, 0, 0, 0, 0, 744,
	0, 849, 1326, 1394, 1395, 1396, 0, 1393, 1390, 1391,
	1392, 1384, 1385, 1386, 1387, 1389, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1692, 0, 0, 0, 0, 0, 565, 0, 0, 0,
	0, 0, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102,
	1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112,
	1113, 1114, 1115, 1116, 0, 1122, 0, 1124, 1125, 1126,
	1127, 0, 0, 1822, 0, 0, 0, 0, 0, 0,
	0, 718, 0, 0, 0, 959, 0, 1711, 0, 389,
	1713, 0, 715, 743, 0, 0, 0, 0, 72, 744,
	0, 431, 1170, 1171, 853, 854, 1184, 0, 1195, 1197,
	1202, 1205, 1206, 1207, 0, 0, 0, 0, 0, 849,
	715, 715, 0, 0, 0, 0, 0, 856, 0, 715,
	715, 0, 0, 665, 0, 0, 1645, 0, 0, 0,
	0, 72, 0, 1758, 0, 0, 0, 0, 855, 0,
	0, 0, 72, 0, 0, 0, 0, 0, 849, 718,
	0, 0, 715, 0, 0, 0, 0, 1252, 0, 1255,
	0, 0, 0, 0, 0, 0, 0, 744, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 743, 0, 0, 0, 0, 0, 828,
	0, 0, 0, 861, 0, 0, 0, 0, 0, 0,
	0, 1281, 0, 0, 1807, 0, 0, 0, 1794, 1795,
	0, 0, 1799, 0, 0, 0, 1800, 0, 1645, 0,
	0, 389, 0, 0, 0, 0, 0, 718, 0, 0,
	0, 0, 0, 0, 0, 0, 849, 0, 0, 0,
	0, 0, 871, 0, 0, 744, 0, 0, 0, 0,
	0, 845, 0, 0, 0, 0, 0, 0, 0, 0,
	715, 743, 0, 1830, 0, 849, 72, 0, 389, 0,
	0, 0, 0, 0, 0, 423, 1851, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1645, 1758, 0, 0,
	0, 0, 1331, 1332, 0, 0, 0, 0, 1337, 872,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 72, 0, 849, 0, 0, 0, 0, 0, 0,
	0, 1351, 0, 0, 0, 0, 0, 0, 1879, 0,
	1359, 0, 0, 0, 0, 0, 0, 0, 1367, 743,
	853, 854, 1372, 873, 874, 875, 883, 884, 885, 0,
	0, 0, 0, 0, 0, 0, 876, 0, 0, 0,
	715, 0, 0, 856, 0, 887, 0, 898, 0, 0,
	0, 0, 0, 1202, 1202, 1202, 0, 857, 858, 859,
	860, 862, 0, 882, 855, 0, 0, 0, 0, 0,
	870, 0, 0, 0, 423, 0, 0, 423, 423, 0,
	0, 0, 0, 0, 0, 0, 1443, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	897, 0, 0, 0, 901, 0, 0, 0, 0, 565,
	0, 0, 0, 0, 0, 0, 0, 565, 715, 861,
	0, 665, 0, 853, 854, 0, 873, 874, 875, 883,
	884, 885, 0, 0, 0, 0, 0, 880, 888, 876,
	0, 0, 0, 0, 0, 0, 856, 0, 887, 0,
	0, 0, 886, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 878, 0, 0, 0, 0, 855, 871, 0,
	0, 0, 0, 870, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1518, 0, 0, 1519, 0,
	877, 0, 0, 0, 0, 0, 715, 0, 0, 1524,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1281, 45, 0, 45, 0, 0, 0, 0,
	0, 1541, 861, 0, 0, 872, 0, 0, 0, 0,
	45, 1551, 0, 0, 45, 1553, 881, 0, 0, 0,
	880, 888, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 886, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 878, 0, 0, 1584, 1585,
	0, 871, 0, 0, 0, 0, 0, 1591, 1592, 1593,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 879, 877, 0, 867, 868, 869, 0, 866,
	863, 864, 865, 857, 858, 859, 860, 862, 0, 882,
	0, 981, 0, 0, 0, 0, 0, 0, 0, 565,
	982, 0, 0, 0, 0, 0, 0, 0, 872, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 881,
	0, 0, 0, 853, 854, 0, 873, 874, 875, 883,
	884, 885, 0, 0, 1659, 0, 0, 0, 0, 876,
	0, 0, 0, 0, 0, 0, 856, 0, 887, 0,
	0, 0, 0, 0, 0, 1088, 0, 1678, 0, 0,
	0, 1681, 1682, 0, 0, 0, 1684, 855, 0, 0,
	1686, 0, 0, 870, 0, 879, 0, 1690, 867, 868,
	869, 1693, 866, 863, 864, 865, 857, 858, 859, 860,
	862, 1139, 882, 0, 0, 0, 0, 0, 0, 1705,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1702, 0, 0, 0, 0, 0,
	0, 0, 861, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	880, 888, 0, 0, 853, 854, 0, 873, 874, 875,
	883, 884, 885, 0, 0, 886, 1729, 0, 0, 0,
	876, 0, 0, 0, 0, 878, 0, 856, 0, 887,
	0, 871, 0, 853, 854, 0, 873, 874, 875, 883,
	884, 885, 1748, 0, 0, 0, 0, 0, 855, 0,
	431, 0, 0, 877, 870, 0, 856, 0, 887, 0,
	0, 1762, 1382, 1383, 0, 1400, 1401, 1402, 0, 0,
	0, 1769, 1770, 0, 0, 0, 0, 855, 1526, 0,
	0, 0, 0, 870, 0, 0, 0, 0, 872, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 881,
	1782, 0, 0, 861, 0, 0, 1382, 1383, 0, 1400,
	1401, 1402, 1397, 1786, 0, 0, 0, 0, 0, 0,
	0, 880, 888, 0, 0, 0, 0, 0, 0, 45,
	0, 45, 861, 0, 0, 665, 886, 0, 0, 0,
	0, 0, 0, 45, 0, 0, 878, 0, 0, 0,
	880, 888, 871, 1327, 0, 879, 1397, 0, 867, 868,
	869, 1388, 866, 863, 864, 865, 857, 858, 859, 860,
	862, 0, 882, 0, 877, 878, 0, 0, 0, 1424,
	0, 871, 0, 0, 1139, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1403, 0, 0, 0, 0, 0,
	0, 0, 0, 897, 0, 1388, 0, 0, 0, 872,
	1398, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	881, 0, 0, 0, 0, 0, 0, 0, 0, 1864,
	0, 0, 0, 0, 0, 0, 0, 0, 872, 0,
	0, 0, 0, 0, 1877, 1877, 0, 0, 0, 881,
	0, 0, 0, 0, 1398, 897, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1399, 0, 1877,
	0, 0, 0, 0, 0, 0, 879, 0, 0, 867,
	868, 869, 0, 866, 863, 864, 865, 857, 858, 859,
	860, 862, 0, 882, 0, 0, 0, 0, 0, 0,
	1423, 0, 1877, 0, 0, 879, 0, 0, 867, 868,
	869, 1399, 866, 863, 864, 865, 857, 858, 859, 860,
	862, 0, 882, 0, 0, 0, 0, 0, 1088, 0,
	0, 0, 0, 0, 0, 0, 0, 1394, 1395, 1396,
	0, 1393, 1390, 1391, 1392, 1384, 1385, 1386, 1387, 1389,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1088, 0, 0, 0, 1088, 0,
	0, 1394, 1395, 1396, 0, 1393, 1390, 1391, 1392, 1384,
	1385, 1386, 1387, 1389, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 73, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 76, 77, 0, 78, 0, 0,
	0, 0, 189, 0, 0, 0, 0, 79, 80, 190,
	191, 192, 193, 81, 194, 195, 0, 82, 196, 197,
	83, 0, 0, 198, 199, 200, 0, 201, 0, 0,
	0, 84, 85, 86, 0, 87, 0, 88, 89, 90,
	0, 0, 91, 92, 0, 0, 0, 0, 0, 0,
	93, 94, 95, 96, 202, 97, 203, 204, 0, 98,
	0, 99, 0, 0, 0, 100, 101, 0, 102, 0,
	0, 0, 205, 103, 104, 206, 207, 0, 0, 0,
	105, 106, 208, 0, 107, 0, 108, 0, 0, 45,
	0, 109, 209, 0, 210, 0, 110, 111, 112, 211,
	212, 0, 0, 115, 0, 113, 0, 0, 114, 213,
	214, 215, 216, 0, 217, 0, 0, 116, 0, 117,
	118, 0, 0, 218, 0, 119, 1088, 1088, 120, 0,
	1088, 121, 0, 122, 123, 124, 125, 126, 0, 127,
	128, 131, 129, 0, 130, 0, 219, 132, 220, 133,
	134, 0, 0, 445, 0, 0, 135, 221, 0, 136,
	0, 222, 137, 138, 139, 0, 223, 140, 224, 141,
	0, 142, 143, 144, 225, 145, 146, 0, 148, 149,
	147, 150, 0, 151, 0, 152, 153, 226, 154, 0,
	155, 156, 157, 63, 227, 158, 159, 0, 160, 161,
	0, 162, 228, 229, 163, 0, 169, 164, 165, 166,
	168, 230, 167, 231, 0, 170, 65, 171, 172, 0,
	232, 233, 234, 0, 0, 173, 235, 236, 0, 174,
	175, 176, 177, 0, 0, 178, 179, 180, 0, 0,
	181, 182, 183, 486, 238, 0, 0, 184, 0, 0,
	0, 61, 185, 186, 187, 188, 0, 62, 0, 0,
	0, 1739, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1090, 45, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1088, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 259, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 76, 77, 278, 78, 279, 280, 281,
	282, 189, 283, 284, 285, 286, 79, 80, 190, 191,
	192, 193, 81, 194, 195, 287, 82, 196, 197, 83,
	288, 289, 198, 199, 200, 290, 201, 291, 264, 292,
	84, 85, 86, 897, 87, 293, 88, 89, 90, 294,
	265, 91, 92, 295, 296, 297, 298, 299, 300, 93,
	94, 95, 96, 202, 97, 203, 204, 301, 98, 302,
	99, 303, 304, 305, 100, 101, 306, 102, 307, 0,
	308, 205, 103, 104, 206, 207, 309, 310, 311, 105,
	106, 208, 0, 107, 312, 108, 313, 314, 266, 315,
	109, 209, 316, 210, 317, 110, 111, 112, 211, 212,
	268, 318, 115, 319, 113, 320, 267, 114, 213, 214,
	215, 216, 321, 217, 322, 269, 116, 270, 117, 118,
	323, 324, 218, 271, 119, 272, 325, 120, 326, 327,
	121, 0, 122, 123, 124, 125, 126, 273, 127, 128,
	131, 129, 328, 130, 329, 219, 132, 220, 133, 134,
	330, 331, 332, 333, 334, 135, 221, 274, 136, 275,
	222, 137, 138, 139, 335, 223, 140, 224, 141, 336,
	142, 143, 144, 225, 145, 146, 337, 148, 149, 147,
	150, 338, 151, 276, 152, 153, 226, 154, 0, 155,
	156, 157, 339, 227, 158, 159, 340, 160, 161, 277,
	162, 228, 229, 163, 341, 169, 164, 165, 166, 168,
	230, 167, 231, 342, 170, 343, 171, 172, 344, 232,
	233, 234, 345, 346, 173, 235, 236, 347, 174, 175,
	176, 177, 348, 349, 178, 179, 180, 350, 351, 181,
	182, 183, 237, 238, 352, 353, 184, 354, 355, 356,
	357, 185, 186, 187, 188, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 259, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1514, 76, 77, 278, 78, 279, 280, 281, 282,
	189, 283, 284, 285, 286, 79, 80, 190, 191, 192,
	193, 81, 194, 195, 287, 82, 196, 197, 83, 288,
	289, 198, 199, 200, 290, 201, 291, 264, 292, 84,
	85, 86, 0, 87, 293, 88, 89, 90, 294, 265,
	91, 92, 295, 296, 297, 298, 299, 300, 93, 94,
	95, 96, 202, 97, 203, 204, 301, 98, 302, 99,
	303, 304, 305, 100, 101, 306, 102, 307, 0, 308,
	205, 103, 104, 206, 207, 309, 310, 311, 105, 106,
	208, 0, 107, 312, 108, 313, 314, 266, 315, 109,
	209, 316, 210, 317, 110, 111, 112, 211, 212, 268,
	318, 115, 319, 113, 320, 267, 114, 213, 214, 215,
	216, 321, 217, 322, 269, 116, 270, 117, 118, 323,
	324, 218, 271, 119, 272, 325, 120, 326, 327, 121,
	0, 122, 123, 124, 125, 126, 273, 127, 128, 131,
	129, 328, 130, 329, 219, 132, 220, 133, 134, 330,
	331, 332, 333, 334, 135, 221, 274, 136, 275, 222,
	137, 138, 139, 335, 223, 140, 224, 141, 336, 142,
	143, 144, 225, 145, 146, 337, 148, 149, 147, 150,
	338, 151, 276, 152, 153, 226, 154, 0, 155, 156,
	157, 339, 227, 158, 159, 340, 160, 161, 277, 162,
	228, 229, 163, 341, 169, 164, 165, 166, 168, 230,
	167, 231, 342, 170, 343, 171, 172, 344, 232, 233,
	234, 345, 346, 173, 235, 236, 347, 174, 175, 176,
	177, 348, 349, 178, 179, 180, 350, 351, 181, 182,
	183, 237, 238, 352, 353, 184, 354, 355, 356, 357,
	185, 186, 187, 188, 259, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 688, 0, 0,
	76, 77, 278, 78, 279, 280, 281, 282, 189, 283,
	284, 285, 286, 79, 80, 190, 191, 192, 193, 81,
	194, 195, 287, 82, 196, 197, 83, 288, 289, 198,
	199, 200, 290, 201, 291, 264, 292, 84, 85, 86,
	0, 87, 293, 88, 89, 90, 294, 265, 91, 92,
	295, 296, 297, 298, 299, 300, 93, 94, 95, 96,
	202, 97, 203, 204, 301, 98, 302, 99, 303, 304,
	305, 100, 101, 306, 102, 307, 0, 308, 205, 103,
	104, 206, 207, 309, 310, 311, 105, 106, 208, 0,
	107, 312, 108, 313, 314, 266, 315, 109, 209, 316,
	210, 317, 110, 111, 112, 211, 212, 268, 318, 115,
	319, 113, 320, 267, 114, 213, 214, 215, 216, 321,
	217, 322, 269, 116, 270, 117, 118, 323, 324, 218,
	271, 119, 272, 325, 120, 326, 327, 121, 0, 122,
	123, 124, 125, 126, 273, 127, 128, 131, 129, 328,
	130, 329, 219, 132, 220, 133, 134, 330, 331, 332,
	333, 334, 135, 221, 274, 136, 275, 222, 137, 138,
	139, 335, 223, 140, 224, 141, 336, 142, 143, 144,
	225, 145, 146, 337, 148, 149, 147, 150, 338, 151,
	276, 152, 153, 226, 154, 0, 155, 156, 157, 339,
	227, 158, 159, 340, 160, 161, 277, 162, 228, 229,
	163, 341, 169, 164, 165, 166, 168, 230, 167, 231,
	342, 170, 343, 171, 172, 344, 232, 233, 234, 345,
	346, 173, 235, 236, 347, 174, 175, 176, 177, 348,
	349, 178, 179, 180, 350, 351, 181, 182, 183, 237,
	238, 352, 353, 184, 354, 355, 356, 357, 185, 186,
	187, 188, 600, 589, 590, 587, 588, 576, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 76, 77,
	1156, 78, 0, 0, 0, 0, 616, 582, 0, 0,
	0, 79, 80, 190, 631, 192, 632, 81, 633, 634,
	0, 82, 196, 197, 83, 597, 615, 635, 636, 200,
	0, 627, 0, 608, 0, 84, 85, 86, 0, 87,
	0, 88, 89, 90, 0, 265, 91, 92, 0, 609,
	611, 0, 610, 612, 93, 94, 95, 96, 637, 97,
	638, 639, 0, 98, 0, 99, 0, 1157, 0, 630,
	101, 0, 102, 0, 0, 0, 581, 103, 104, 617,
	618, 595, 0, 0, 105, 106, 640, 0, 107, 0,
	108, 0, 0, 266, 0, 109, 628, 0, 210, 0,
	110, 111, 112, 624, 626, 268, 0, 115, 0, 113,
	0, 267, 114, 641, 642, 643, 644, 0, 607, 0,
	269, 116, 270, 117, 118, 0, 0, 629, 271, 119,
	272, 0, 120, 0, 0, 121, 0, 122, 123, 124,
	125, 126, 273, 127, 128, 131, 129, 571, 130, 596,
	625, 132, 645, 133, 134, 0, 0, 0, 0, 0,
	135, 221, 274, 136, 275, 619, 137, 138, 139, 0,
	620, 140, 224, 141, 0, 142, 143, 144, 646, 145,
	146, 0, 148, 149, 147, 150, 0, 151, 276, 152,
	153, 585, 154, 0, 155, 156, 157, 0, 227, 158,
	159, 613, 160, 161, 277, 162, 647, 229, 163, 0,
	169, 164, 165, 166, 168, 648, 167, 621, 0, 170,
	0, 171, 172, 0, 232, 649, 650, 0, 0, 173,
	622, 623, 594, 174, 175, 176, 177, 0, 0, 178,
	179, 180, 614, 0, 181, 182, 183, 237, 651, 1155,
	0, 184, 0, 0, 0, 0, 185, 186, 187, 188,
	572, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 568, 569, 1158, 0, 0, 0, 570, 0, 0,
	577, 1153, 600, 589, 590, 587, 588, 576, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 76, 77,
	0, 78, 0, 0, 0, 0, 616, 582, 0, 0,
	0, 79, 80, 190, 631, 192, 632, 81, 633, 634,
	0, 82, 196, 197, 83, 597, 615, 635, 636, 200,
	0, 627, 0, 608, 0, 84, 85, 86, 0, 87,
	0, 88, 89, 90, 0, 265, 91, 92, 0, 609,
	611, 0, 610, 612, 93, 94, 95, 96, 637, 97,
	638, 639, 666, 98, 0, 99, 0, 0, 0, 630,
	101, 0, 102, 0, 0, 0, 581, 103, 104, 617,
	618, 595, 0, 0, 105, 106, 640, 0, 107, 0,
	108, 0, 0, 266, 0, 109, 628, 0, 210, 0,
	110, 111, 112, 624, 626, 268, 0, 115, 0, 113,
	0, 267, 114, 641, 642, 643, 644, 0, 607, 0,
	269, 116, 270, 117, 118, 0, 0, 629, 271, 119,
	272, 0, 120, 0, 0, 121, 0, 122, 123, 124,
	125, 126, 273, 127, 128, 131, 129, 571, 130, 596,
	625, 132, 645, 133, 134, 0, 0, 0, 0, 0,
	135, 221, 274, 136, 275, 619, 137, 138, 139, 0,
	620, 140, 224, 141, 0, 142, 143, 144, 646, 145,
	146, 0, 148, 149, 147, 150, 0, 151, 276, 152,
	153, 585, 154, 0, 155, 156, 157, 63, 227, 158,
	159, 613, 160, 161, 277, 162, 647, 229, 163, 0,
	169, 164, 165, 166, 168, 648, 167, 621, 0, 170,
	65, 171, 172, 0, 232, 649, 650, 0, 0, 173,
	622, 623, 594, 174, 175, 176, 177, 0, 0, 178,
	179, 180, 614, 0, 181, 182, 183, 486, 651, 0,
	0, 184, 0, 0, 0, 61, 185, 186, 187, 188,
	572, 62, 600, 589, 590, 587, 588, 576, 0, 0,
	0, 568, 569, 0, 0, 0, 0, 570, 76, 77,
	577, 78, 0, 0, 0, 0, 616, 582, 0, 0,
	0, 79, 80, 190, 631, 192, 632, 81, 633, 634,
	0, 82, 196, 197, 83, 597, 615, 635, 636, 200,
	0, 627, 0, 608, 0, 84, 85, 86, 0, 87,
	0, 88, 89, 90, 0, 265, 91, 92, 0, 609,
	611, 0, 610, 612, 93, 94, 95, 96, 637, 97,
	638, 639, 0, 98, 0, 99, 0, 0, 0, 630,
	101, 0, 102, 0, 0, 0, 581, 103, 104, 617,
	618, 595, 0, 0, 105, 106, 640, 0, 107, 0,
	108, 0, 0, 266, 0, 109, 628, 0, 210, 0,
	110, 111, 112, 624, 626, 268, 0, 115, 0, 113,
	0, 267, 114, 641, 642, 643, 644, 0, 607, 0,
	269, 116, 270, 117, 118, 0, 0, 629, 271, 119,
	272, 0, 120, 0, 0, 121, 0, 122, 123, 124,
	125, 126, 273, 127, 128, 131, 129, 571, 130, 596,
	625, 132, 645, 133, 134, 0, 0, 0, 0, 0,
	135, 221, 274, 136, 275, 619, 137, 138, 139, 0,
	620, 140, 224, 141, 0, 142, 143, 144, 646, 145,
	146, 0, 148, 149, 147, 150, 0, 151, 276, 152,
	153, 585, 154, 0, 155, 156, 157, 63, 227, 158,
	159, 613, 160, 161, 277, 162, 647, 229, 163, 0,
	169, 164, 165, 166, 168, 648, 167, 621, 0, 170,
	65, 171, 172, 0, 232, 649, 650, 0, 0, 173,
	622, 623, 594, 174, 175, 176, 177, 0, 0, 178,
	179, 180, 614, 0, 181, 182, 183, 486, 651, 0,
	0, 184, 0, 0, 0, 61, 185, 186, 187, 188,
	572, 62, 600, 589, 590, 587, 588, 576, 0, 0,
	0, 568, 569, 0, 0, 0, 0, 570, 76, 77,
	577, 78, 0, 0, 0, 0, 616, 582, 0, 0,
	0, 79, 80, 190, 631, 192, 632, 81, 633, 634,
	1198, 82, 196, 197, 83, 597, 615, 635, 636, 200,
	0, 627, 0, 608, 0, 84, 85, 86, 0, 87,
	0, 88, 89, 90, 0, 265, 91, 92, 0, 609,
	611, 0, 610, 612, 93, 94, 95, 96, 637, 97,
	638, 639, 0, 98, 0, 99, 0, 0, 0, 630,
	101, 0, 102, 0, 0, 0, 581, 103, 104, 617,
	618, 595, 0, 0, 105, 106, 640, 0, 107, 0,
	108, 0, 1203, 266, 0, 109, 628, 0, 210, 0,
	110, 111, 112, 624, 626, 268, 0, 115, 0, 113,
	0, 267, 114, 641, 642, 643, 644, 0, 607, 0,
	269, 116, 270, 117, 118, 0, 1199, 629, 271, 119,
	272, 0, 120, 0, 0, 121, 0, 122, 123, 124,
	125, 126, 273, 127, 128, 131, 129, 571, 130, 596,
	625, 132, 645, 133, 134, 0, 0, 0, 0, 0,
	135, 221, 274, 136, 275, 619, 137, 138, 139, 0,
	620, 140, 224, 141, 0, 142, 143, 144, 646, 145,
	146, 0, 148, 149, 147, 150, 0, 151, 276, 152,
	153, 585, 154, 0, 155, 156, 157, 0, 227, 158,
	159, 613, 160, 161, 277, 162, 647, 229, 163, 0,
	169, 164, 165, 166, 168, 648, 167, 621, 0, 170,
	0, 171, 172, 0, 232, 649, 650, 0, 1200, 173,
	622, 623, 594, 174, 175, 176, 177, 0, 0, 178,
	179, 180, 614, 0, 181, 182, 183, 237, 651, 0,
	0, 184, 0, 0, 0, 0, 185, 186, 187, 188,
	572, 0, 600, 589, 590, 587, 588, 576, 0, 0,
	0, 568, 569, 0, 0, 0, 0, 570, 76, 77,
	577, 78, 0, 0, 0, 0, 616, 582, 0, 0,
	0, 79, 80, 190, 631, 192, 632, 81, 633, 634,
	0, 82, 196, 197, 83, 597, 615, 635, 636, 200,
	0, 627, 0, 608, 0, 84, 85, 86, 0, 87,
	0, 88, 89, 90, 0, 265, 91, 92, 0, 609,
	611, 0, 610, 612, 93, 94, 95, 96, 637, 97,
	638, 639, 0, 98, 0, 99, 0, 0, 0, 630,
	101, 0, 102, 0, 0, 0, 581, 103, 104, 617,
	618, 595, 0, 0, 105, 106, 640, 0, 107, 0,
	108, 0, 0, 266, 0, 109, 628, 0, 210, 0,
	110, 111, 112, 624, 626, 268, 0, 115, 0, 113,
	0, 267, 114, 641, 642, 643, 644, 0, 607, 0,
	269, 116, 270, 117, 118, 0, 0, 629, 271, 119,
	272, 0, 120, 0, 0, 121, 0, 122, 123, 124,
	125, 126, 273, 127, 128, 131, 129, 571, 130, 596,
	625, 132, 645, 133, 134, 0, 0, 0, 0, 0,
	135, 221, 274, 136, 275, 619, 137, 138, 139, 0,
	620, 140, 224, 141, 0, 142, 143, 144, 646, 145,
	146, 0, 148, 149, 147, 150, 0, 151, 276, 152,
	153, 585, 154, 0, 155, 156, 157, 0, 227, 158,
	159, 613, 160, 161, 277, 162, 647, 229, 163, 0,
	169, 164, 165, 166, 168, 648, 167, 621, 0, 170,
	0, 171, 172, 0, 232, 649, 650, 0, 0, 173,
	622, 623, 594, 174, 175, 176, 177, 0, 0, 178,
	179, 180, 614, 0, 181, 182, 183, 237, 651, 0,
	0, 184, 0, 0, 0, 0, 185, 186, 187, 188,
	572, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 568, 569, 0, 0, 0, 0, 570, 0, 0,
	577, 1581, 600, 589, 590, 587, 588, 576, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 76, 77,
	0, 78, 0, 0, 0, 0, 616, 582, 0, 0,
	0, 79, 80, 190, 631, 192, 632, 81, 633, 634,
	0, 82, 196, 197, 83, 597, 615, 635, 636, 200,
	0, 627, 0, 608, 0, 84, 85, 86, 0, 87,
	0, 88, 89, 90, 0, 265, 91, 92, 0, 609,
	611, 0, 610, 612, 93, 94, 95, 96, 637, 97,
	638, 639, 0, 98, 0, 99, 0, 0, 0, 630,
	101, 0, 102, 0, 0, 0, 581, 103, 104, 617,
	618, 595, 0, 0, 105, 106, 640, 0, 107, 0,
	108, 0, 0, 266, 0, 109, 628, 0, 210, 0,
	110, 111, 112, 624, 626, 268, 0, 115, 0, 113,
	0, 267, 114, 641, 642, 643, 644, 0, 607, 0,
	269, 116, 270, 117, 118, 0, 0, 629, 271, 119,
	272, 0, 120, 0, 0, 121, 0, 122, 123, 124,
	125, 126, 273, 127, 128, 131, 129, 571, 130, 596,
	625, 132, 645, 133, 134, 0, 0, 0, 0, 0,
	135, 221, 274, 136, 275, 619, 137, 138, 139, 0,
	620, 140, 224, 141, 0, 142, 143, 144, 646, 145,
	146, 0, 148, 149, 147, 150, 0, 151, 276, 152,
	153, 585, 154, 0, 155, 156, 157, 0, 227, 158,
	159, 613, 160, 161, 277, 162, 647, 229, 163, 0,
	169, 164, 165, 166, 168, 648, 167, 621, 0, 170,
	0, 171, 172, 0, 232, 649, 650, 0, 0, 173,
	622, 623, 594, 174, 175, 176, 177, 0, 0, 178,
	179, 180, 614, 0, 181, 182, 183, 237, 651, 0,
	0, 184, 0, 0, 0, 0, 185, 186, 187, 188,
	572, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 568, 569, 0, 0, 0, 0, 570, 0, 0,
	577, 1530, 600, 589, 590, 587, 588, 576, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 76, 77,
	0, 78, 0, 0, 0, 0, 616, 582, 0, 0,
	0, 79, 80, 190, 631, 192, 632, 81, 633, 634,
	0, 82, 196, 197, 83, 597, 615, 635, 636, 200,
	0, 627, 0, 608, 0, 84, 85, 86, 0, 87,
	0, 88, 89, 90, 0, 265, 91, 92, 0, 609,
	611, 0, 610, 612, 93, 94, 95, 96, 637, 97,
	638, 639, 0, 98, 0, 99, 0, 0, 0, 630,
	101, 0, 102, 0, 0, 0, 581, 103, 104, 617,
	618, 595, 0, 0, 105, 106, 640, 0, 107, 0,
	108, 0, 0, 266, 0, 109, 628, 0, 210, 0,
	110, 111, 112, 624, 626, 268, 0, 115, 0, 113,
	0, 267, 114, 641, 642, 643, 644, 0, 607, 0,
	269, 116, 270, 117, 118, 0, 0, 629, 271, 119,
	272, 0, 120, 0, 0, 121, 0, 122, 123, 124,
	125, 126, 273, 127, 128, 131, 129, 571, 130, 596,
	625, 132, 645, 133, 134, 0, 0, 0, 0, 0,
	135, 221, 274, 136, 275, 619, 137, 138, 139, 0,
	620, 140, 224, 141, 0, 142, 143, 144, 646, 145,
	146, 0, 148, 149, 147, 150, 0, 151, 276, 152,
	153, 585, 154, 0, 155, 156, 157, 0, 227, 158,
	159, 613, 160, 161, 277, 162, 647, 229, 163, 0,
	169, 164, 165, 166, 168, 648, 167, 621, 0, 170,
	0, 171, 172, 0, 232, 649, 650, 0, 0, 173,
	622, 623, 594, 174, 175, 176, 177, 0, 0, 178,
	179, 180, 614, 0, 181, 182, 183, 237, 651, 0,
	0, 184, 0, 0, 0, 0, 185, 186, 187, 188,
	572, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 568, 569, 0, 0, 0, 0, 570, 0, 0,
	577, 1152, 600, 589, 590, 587, 588, 576, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 76, 77,
	0, 78, 0, 0, 0, 0, 616, 582, 0, 0,
	0, 79, 80, 190, 631, 192, 632, 81, 633, 634,
	0, 82, 196, 197, 83, 597, 615, 635, 636, 200,
	0, 627, 0, 608, 0, 84, 85, 86, 0, 87,
	0, 88, 89, 90, 0, 265, 91, 92, 0, 609,
	611, 0, 610, 612, 93, 94, 95, 96, 637, 97,
	638, 639, 0, 98, 0, 99, 0, 0, 0, 630,
	101, 0, 102, 0, 0, 0, 581, 103, 104, 617,
	618, 595, 0, 0, 105, 106, 640, 0, 107, 0,
	108, 0, 0, 266, 0, 109, 628, 0, 210, 0,
	110, 111, 112, 624, 626, 268, 0, 115, 0, 113,
	0, 267, 114, 641, 642, 643, 644, 0, 607, 0,
	269, 116, 270, 117, 118, 0, 0, 629, 271, 119,
	272, 0, 120, 0, 0, 121, 0, 122, 123, 124,
	125, 126, 273, 127, 128, 131, 129, 571, 130, 596,
	625, 132, 645, 133, 134, 0, 0, 0, 0, 0,
	135, 221, 274, 136, 275, 619, 137, 138, 139, 0,
	620, 140, 224, 141, 0, 142, 143, 144, 646, 145,
	146, 0, 148, 149, 147, 150, 0, 151, 276, 152,
	153, 585, 154, 0, 155, 156, 157, 0, 227, 158,
	159, 613, 160, 161, 277, 162, 647, 229, 163, 0,
	169, 164, 165, 166, 168, 648, 167, 621, 0, 170,
	0, 171, 172, 0, 232, 649, 650, 0, 0, 173,
	622, 623, 594, 174, 175, 176, 177, 0, 0, 178,
	179, 180, 614, 0, 181, 182, 183, 237, 651, 0,
	0, 184, 0, 0, 0, 0, 185, 186, 187, 188,
	572, 0, 0, 0, 0, 600, 589, 590, 587, 588,
	576, 568, 569, 0, 0, 0, 0, 570, 903, 1149,
	577, 76, 77, 0, 78, 0, 0, 0, 0, 616,
	582, 0, 0, 0, 79, 80, 190, 631, 192, 632,
	81, 633, 634, 0, 82, 196, 197, 83, 597, 615,
	635, 636, 200, 0, 627, 0, 608, 0, 84, 85,
	86, 0, 87, 0, 88, 89, 90, 0, 265, 91,
	92, 0, 609, 611, 0, 610, 612, 93, 94, 95,
	96, 637, 97, 638, 639, 0, 98, 0, 99, 0,
	0, 0, 630, 101, 0, 102, 0, 0, 0, 581,
	103, 104, 617, 618, 595, 0, 0, 105, 106, 640,
	0, 107, 0, 108, 0, 0, 266, 0, 109, 628,
	0, 210, 0, 110, 111, 112, 624, 626, 268, 0,
	115, 0, 113, 0, 267, 114, 641, 642, 643, 644,
	0, 607, 0, 269, 116, 270, 117, 118, 0, 0,
	629, 271, 119, 272, 0, 120, 0, 0, 121, 0,
	122, 123, 124, 125, 126, 273, 127, 128, 131, 129,
	571, 130, 596, 625, 132, 645, 133, 134, 0, 0,
	0, 0, 0, 135, 221, 274, 136, 275, 619, 137,
	138, 139, 0, 620, 140, 224, 141, 0, 142, 143,
	144, 646, 145, 146, 0, 148, 149, 147, 150, 0,
	151, 276, 152, 153, 585, 154, 0, 155, 156, 157,
	0, 227, 158, 159, 613, 160, 161, 277, 162, 647,
	229, 163, 0, 169, 164, 165, 166, 168, 648, 167,
	621, 0, 170, 0, 171, 172, 0, 232, 649, 650,
	0, 0, 173, 622, 623, 594, 174, 175, 176, 177,
	0, 0, 178, 179, 180, 614, 0, 181, 182, 183,
	237, 651, 0, 0, 184, 0, 0, 0, 0, 185,
	186, 187, 188, 572, 0, 600, 589, 590, 587, 588,
	576, 0, 0, 0, 568, 569, 566, 0, 0, 0,
	570, 76, 77, 577, 78, 0, 0, 0, 0, 616,
	582, 0, 0, 0, 79, 80, 190, 631, 192, 632,
	81, 633, 634, 0, 82, 196, 197, 83, 597, 615,
	635, 636, 200, 0, 627, 0, 608, 0, 84, 85,
	86, 0, 87, 0, 88, 89, 90, 0, 265, 91,
	92, 0, 609, 611, 0, 610, 612, 93, 94, 95,
	96, 637, 97, 638, 639, 0, 98, 0, 99, 0,
	0, 0, 630, 101, 0, 102, 0, 0, 0, 581,
	103, 104, 617, 618, 595, 0, 0, 105, 106, 640,
	0, 107, 0, 108, 0, 0, 266, 0, 109, 628,
	0, 210, 0, 110, 111, 112, 624, 626, 268, 0,
	115, 0, 113, 0, 267, 114, 641, 642, 643, 644,
	0, 607, 0, 269, 116, 270, 117, 118, 0, 0,
	629, 271, 119, 272, 0, 120, 0, 0, 121, 0,
	122, 123, 124, 125, 126, 273, 127, 128, 131, 129,
	571, 130, 596, 625, 132, 645, 133, 134, 0, 0,
	0, 0, 0, 135, 221, 274, 136, 275, 619, 137,
	138, 139, 0, 620, 140, 224, 141, 0, 142, 143,
	144, 646, 145, 146, 0, 148, 149, 147, 150, 0,
	151, 276, 152, 153, 585, 154, 0, 155, 156, 157,
	0, 227, 158, 159, 613, 160, 161, 277, 162, 647,
	229, 163, 0, 169, 164, 165, 166, 168, 648, 167,
	621, 0, 170, 0, 171, 172, 0, 232, 649, 650,
	0, 0, 173, 622, 623, 594, 174, 175, 176, 177,
	0, 0, 178, 179, 180, 614, 0, 181, 182, 183,
	237, 651, 1535, 0, 184, 0, 0, 0, 0, 185,
	186, 187, 188, 572, 0, 600, 589, 590, 587, 588,
	576, 0, 0, 0, 568, 569, 0, 0, 0, 0,
	570, 76, 77, 577, 78, 0, 0, 0, 0, 616,
	582, 0, 0, 0, 79, 80, 190, 631, 192, 632,
	81, 633, 634, 0, 82, 196, 197, 83, 597, 615,
	635, 636, 200, 0, 627, 0, 608, 0, 84, 85,
	86, 0, 87, 0, 88, 89, 90, 0, 265, 91,
	92, 0, 609, 611, 0, 610, 612, 93, 94, 95,
	96, 637, 97, 638, 639, 666, 98, 0, 99, 0,
	0, 0, 630, 101, 0, 102, 0, 0, 0, 581,
	103, 104, 617, 618, 595, 0, 0, 105, 106, 640,
	0, 107, 0, 108, 0, 0, 266, 0, 109, 628,
	0, 210, 0, 110, 111, 112, 624, 626, 268, 0,
	115, 0, 113, 0, 267, 114, 641, 642, 643, 644,
	0, 607, 0, 269, 116, 270, 117, 118, 0, 0,
	629, 271, 119, 272, 0, 120, 0, 0, 121, 0,
	122, 123, 124, 125, 126, 273, 127, 128, 131, 129,
	571, 130, 596, 625, 132, 645, 133, 134, 0, 0,
	0, 0, 0, 135, 221, 274, 136, 275, 619, 137,
	138, 139, 0, 620, 140, 224, 141, 0, 142, 143,
	144, 646, 145, 146, 0, 148, 149, 147, 150, 0,
	151, 276, 152, 153, 585, 154, 0, 155, 156, 157,
	0, 227, 158, 159, 613, 160, 161, 277, 162, 647,
	229, 163, 0, 169, 164, 165, 166, 168, 648, 167,
	621, 0, 170, 0, 171, 172, 0, 232, 649, 650,
	0, 0, 173, 622, 623, 594, 174, 175, 176, 177,
	0, 0, 178, 179, 180, 614, 0, 181, 182, 183,
	237, 651, 0, 0, 184, 0, 0, 0, 0, 185,
	186, 187, 188, 572, 0, 600, 589, 590, 587, 588,
	576, 0, 0, 0, 568, 569, 0, 0, 0, 0,
	570, 76, 77, 577, 78, 0, 0, 0, 0, 616,
	582, 0, 0, 0, 79, 80, 190, 631, 192, 632,
	81, 633, 634, 0, 82, 196, 197, 83, 597, 615,
	635, 636, 200, 0, 627, 0, 608, 0, 84, 85,
	86, 0, 87, 0, 88, 89, 90, 0, 265, 91,
	92, 0, 609, 611, 0, 610, 612, 93, 94, 95,
	96, 637, 97, 638, 639, 0, 98, 0, 99, 0,
	0, 0, 630, 101, 0, 102, 0, 0, 0, 581,
	103, 104, 617, 618, 595, 0, 0, 105, 106, 640,
	0, 107, 0, 108, 0, 1203, 266, 0, 109, 628,
	0, 210, 0, 110, 111, 112, 624, 626, 268, 0,
	115, 0, 113, 0, 267, 114, 641, 642, 643, 644,
	0, 607, 0, 269, 116, 270, 117, 118, 0, 0,
	629, 271, 119, 272, 0, 120, 0, 0, 121, 0,
	122, 123, 124, 125, 126, 273, 127, 128, 131, 129,
	571, 130, 596, 625, 132, 645, 133, 134, 0, 0,
	0, 0, 0, 135, 221, 274, 136, 275, 619, 137,
	138, 139, 0, 620, 140, 224, 141, 0, 142, 143,
	144, 646, 145, 146, 0, 148, 149, 147, 150, 0,
	151, 276, 152, 153, 585, 154, 0, 155, 156, 157,
	0, 227, 158, 159, 613, 160, 161, 277, 162, 647,
	229, 163, 0, 169, 164, 165, 166, 168, 648, 167,
	621, 0, 170, 0, 171, 172, 0, 232, 649, 650,
	0, 0, 173, 622, 623, 594, 174, 175, 176, 177,
	0, 0, 178, 179, 180, 614, 0, 181, 182, 183,
	237, 651, 0, 0, 184, 0, 0, 0, 0, 185,
	186, 187, 188, 572, 0, 0, 0, 0, 600, 589,
	590, 587, 588, 576, 568, 569, 0, 0, 0, 0,
	570, 0, 0, 577, 76, 77, 837, 78, 0, 0,
	0, 0, 616, 582, 0, 0, 0, 79, 80, 190,
	631, 192, 632, 81, 633, 634, 0, 82, 196, 197,
	83, 597, 615, 635, 636, 200, 0, 627, 0, 608,
	0, 84, 85, 86, 0, 87, 0, 88, 89, 90,
	0, 265, 91, 92, 0, 609, 611, 0, 610, 612,
	93, 94, 95, 96, 637, 97, 638, 639, 0, 98,
	0, 99, 0, 0, 0, 630, 101, 0, 102, 0,
	0, 0, 581, 103, 104, 617, 618, 595, 0, 0,
	105, 106, 640, 0, 107, 0, 108, 0, 0, 266,
	0, 109, 628, 0, 210, 0, 110, 111, 112, 624,
	626, 268, 0, 115, 0, 113, 0, 267, 114, 641,
	642, 643, 644, 0, 607, 0, 269, 116, 270, 117,
	118, 0, 0, 629, 271, 119, 272, 0, 120, 0,
	0, 121, 0, 122, 123, 124, 125, 126, 273, 127,
	128, 131, 129, 571, 130, 596, 625, 132, 645, 133,
	134, 0, 0, 0, 0, 0, 135, 221, 274, 136,
	275, 619, 137, 138, 139, 0, 620, 140, 224, 141,
	0, 142, 143, 144, 646, 145, 146, 0, 148, 149,
	147, 150, 0, 151, 276, 152, 153, 585, 154, 0,
	155, 156, 157, 0, 227, 158, 159, 613, 160, 161,
	277, 162, 647, 229, 163, 0, 169, 164, 165, 166,
	168, 648, 167, 621, 0, 170, 0, 171, 172, 0,
	232, 649, 650, 0, 0, 173, 622, 623, 594, 174,
	175, 176, 177, 0, 0, 178, 179, 180, 614, 0,
	181, 182, 183, 237, 651, 0, 0, 184, 0, 0,
	0, 0, 185, 186, 187, 188, 572, 0, 600, 589,
	590, 587, 588, 576, 0, 0, 0, 568, 569, 0,
	0, 0, 0, 570, 76, 77, 577, 78, 0, 0,
	0, 0, 616, 582, 0, 0, 0, 79, 80, 190,
	631, 192, 632, 81, 633, 634, 0, 82, 196, 197,
	83, 597, 615, 635, 636, 200, 0, 627, 0, 608,
	0, 84, 85, 86, 0, 87, 0, 88, 89, 90,
	0, 265, 91, 1876, 0, 609, 611, 0, 610, 612,
	93, 94, 95, 96, 637, 97, 638, 639, 0, 98,
	0, 99, 0, 0, 0, 630, 101, 0, 102, 0,
	0, 0, 581, 103, 104, 617, 618, 595, 0, 0,
	105, 106, 640, 0, 107, 0, 108, 0, 0, 266,
	0, 109, 628, 0, 210, 0, 110, 111, 112, 624,
	626, 268, 0, 115, 0, 113, 0, 267, 114, 641,
	642, 643, 644, 0, 607, 0, 269, 116, 270, 117,
	118, 0, 0, 629, 271, 119, 272, 0, 120, 0,
	0, 121, 0, 122, 123, 124, 125, 126, 273, 127,
	128, 131, 129, 571, 130, 596, 625, 132, 645, 133,
	134, 0, 0, 0, 0, 0, 135, 221, 274, 136,
	275, 619, 137, 138, 139, 0, 620, 140, 224, 141,
	0, 142, 143, 144, 646, 145, 146, 0, 148, 149,
	147, 150, 0, 151, 276, 152, 153, 585, 154, 0,
	155, 156, 157, 0, 227, 158, 159, 613, 160, 161,
	277, 162, 647, 229, 163, 0, 169, 164, 165, 166,
	168, 648, 167, 621, 0, 170, 0, 171, 172, 0,
	232, 649, 650, 0, 0, 173, 622, 623, 594, 174,
	175, 1875, 177, 0, 0, 178, 179, 180, 614, 0,
	181, 182, 183, 237, 651, 0, 0, 184, 0, 0,
	0, 0, 185, 186, 187, 188, 572, 0, 600, 589,
	590, 587, 588, 576, 0, 0, 0, 568, 569, 0,
	0, 0, 0, 570, 76, 77, 577, 78, 0, 0,
	0, 0, 616, 582, 0, 0, 0, 79, 80, 1874,
	631, 192, 632, 81, 633, 634, 0, 82, 196, 197,
	83, 597, 615, 635, 636, 200, 0, 627, 0, 608,
	0, 84, 85, 86, 0, 87, 0, 88, 89, 90,
	0, 265, 91, 1876, 0, 609, 611, 0, 610, 612,
	93, 94, 95, 96, 637, 97, 638, 639, 0, 98,
	0, 99, 0, 0, 0, 630, 101, 0, 102, 0,
	0, 0, 581, 103, 104, 617, 618, 595, 0, 0,
	105, 106, 640, 0, 107, 0, 108, 0, 0, 266,
	0, 109, 628, 0, 210, 0, 110, 111, 112, 624,
	626, 268, 0, 115, 0, 113, 0, 267, 114, 641,
	642, 643, 644, 0, 607, 0, 269, 116, 270, 117,
	118, 0, 0, 629, 271, 119, 272, 0, 120, 0,
	0, 121, 0, 122, 123, 124, 125, 126, 273, 127,
	128, 131, 129, 571, 130, 596, 625, 132, 645, 133,
	134, 0, 0, 0, 0, 0, 135, 221, 274, 136,
	275, 619, 137, 138, 139, 0, 620, 140, 224, 141,
	0, 142, 143, 144, 646, 145, 146, 0, 148, 149,
	147, 150, 0, 151, 276, 152, 153, 585, 154, 0,
	155, 156, 157, 0, 227, 158, 159, 613, 160, 161,
	277, 162, 647, 229, 163, 0, 169, 164, 165, 166,
	168, 648, 167, 621, 0, 170, 0, 171, 172, 0,
	232, 649, 650, 0, 0, 173, 622, 623, 594, 174,
	175, 1875, 177, 0, 0, 178, 179, 180, 614, 0,
	181, 182, 183, 237, 651, 0, 0, 184, 0, 0,
	0, 0, 185, 186, 187, 188, 572, 0, 600, 589,
	590, 587, 588, 576, 0, 0, 0, 568, 569, 0,
	0, 0, 0, 570, 76, 77, 577, 78, 0, 0,
	0, 0, 616, 582, 0, 0, 0, 79, 80, 190,
	631, 192, 632, 81, 633, 634, 0, 82, 196, 197,
	83, 597, 615, 635, 636, 200, 0, 627, 0, 608,
	0, 84, 85, 86, 0, 87, 0, 88, 89, 90,
	0, 265, 91, 92, 0, 609, 611, 0, 610, 612,
	93, 94, 95, 96, 637, 97, 638, 639, 0, 98,
	0, 99, 0, 0, 0, 630, 101, 0, 102, 0,
	0, 0, 581, 103, 104, 617, 618, 595, 0, 0,
	105, 106, 640, 0, 107, 0, 108, 0, 0, 266,
	0, 109, 628, 0, 210, 0, 110, 111, 112, 624,
	626, 268, 0, 115, 0, 113, 0, 267, 114, 641,
	642, 643, 644, 0, 607, 0, 269, 116, 270, 117,
	118, 0, 0, 629, 271, 119, 272, 0, 120, 0,
	0, 121, 0, 122, 123, 124, 125, 126, 273, 127,
	128, 131, 129, 571, 130, 596, 625, 132, 645, 133,
	134, 0, 0, 0, 0, 0, 135, 221, 274, 136,
	275, 619, 137, 138, 139, 0, 620, 140, 224, 141,
	0, 142, 143, 144, 646, 145, 146, 0, 148, 149,
	147, 150, 0, 151, 276, 152, 153, 585, 154, 0,
	155, 156, 157, 0, 227, 158, 159, 613, 160, 161,
	277, 162, 647, 229, 163, 0, 169, 164, 165, 166,
	168, 648, 167, 621, 0, 170, 0, 171, 172, 0,
	232, 649, 650, 0, 0, 173, 622, 623, 594, 174,
	175, 176, 177, 0, 0, 178, 179, 180, 614, 0,
	181, 182, 183, 237, 651, 0, 0, 184, 0, 0,
	0, 0, 185, 186, 187, 188, 572, 0, 1175, 589,
	590, 587, 588, 576, 0, 0, 0, 568, 569, 0,
	0, 0, 0, 570, 76, 77, 577, 78, 0, 0,
	0, 0, 616, 582, 0, 0, 0, 79, 80, 190,
	631, 192, 632, 81, 633, 634, 0, 82, 196, 197,
	83, 597, 615, 635, 636, 200, 0, 627, 0, 608,
	0, 84, 85, 86, 0, 87, 0, 88, 89, 90,
	0, 265, 91, 92, 0, 609, 611, 0, 610, 612,
	93, 94, 95, 96, 637, 1178, 638, 639, 0, 98,
	0, 99, 0, 0, 0, 630, 101, 0, 102, 0,
	0, 0, 581, 103, 104, 617, 618, 595, 0, 0,
	105, 106, 640, 0, 107, 0, 108, 0, 0, 266,
	0, 109, 628, 0, 210, 0, 110, 111, 1179, 624,
	626, 268, 0, 115, 0, 113, 0, 267, 114, 641,
	642, 643, 644, 0, 607, 0, 269, 116, 270, 117,
	118, 0, 0, 629, 271, 119, 272, 0, 120, 0,
	0, 121, 0, 122, 1180, 1177, 125, 126, 273, 127,
	128, 131, 129, 571, 130, 596, 625, 132, 645, 133,
	134, 0, 0, 0, 0, 0, 135, 221, 274, 136,
	275, 619, 137, 138, 139, 0, 620, 140, 224, 141,
	0, 142, 143, 144, 646, 145, 146, 0, 148, 149,
	147, 150, 0, 151, 276, 152, 153, 585, 154, 0,
	155, 156, 1181, 0, 227, 158, 159, 613, 160, 161,
	277, 162, 647, 229, 163, 0, 169, 164, 165, 166,
	168, 648, 167, 621, 0, 170, 0, 171, 172, 0,
	232, 649, 650, 0, 0, 173, 622, 623, 594, 174,
	175, 176, 177, 0, 0, 178, 179, 180, 614, 0,
	181, 182, 183, 237, 651, 0, 0, 184, 0, 0,
	0, 0, 185, 186, 1176, 188, 572, 0, 600, 589,
	590, 587, 588, 576, 0, 0, 0, 568, 569, 0,
	0, 0, 0, 570, 76, 77, 577, 78, 0, 0,
	0, 0, 616, 582, 0, 0, 0, 79, 80, 190,
	631, 192, 632, 81, 633, 634, 0, 82, 196, 197,
	83, 597, 615, 635, 636, 200, 0, 627, 0, 608,
	0, 84, 85, 86, 0, 87, 0, 88, 89, 90,
	0, 265, 91, 92, 0, 609, 611, 0, 610, 612,
	93, 94, 95, 96, 637, 97, 638, 639, 0, 98,
	0, 99, 0, 0, 0, 630, 101, 0, 102, 0,
	0, 0, 581, 103, 104, 617, 618, 595, 0, 0,
	105, 106, 640, 0, 107, 0, 108, 0, 0, 266,
	0, 109, 628, 0, 210, 0, 110, 111, 112, 624,
	626, 268, 0, 115, 0, 113, 0, 267, 114, 641,
	642, 643, 644, 0, 607, 0, 269, 116, 270, 117,
	118, 0, 0, 629, 271, 119, 272, 0, 120, 0,
	0, 121, 0, 122, 123, 124, 125, 126, 273, 127,
	128, 131, 129, 0, 130, 596, 625, 132, 645, 133,
	134, 0, 0, 0, 0, 0, 135, 221, 274, 136,
	275, 619, 137, 138, 139, 0, 620, 140, 224, 141,
	0, 142, 143, 144, 646, 145, 146, 0, 148, 149,
	147, 150, 0, 151, 276, 152, 153, 1193, 154, 0,
	155, 156, 157, 0, 227, 158, 159, 613, 160, 161,
	277, 162, 647, 229, 163, 0, 169, 164, 165, 166,
	168, 648, 167, 621, 0, 170, 0, 171, 172, 0,
	232, 649, 650, 0, 0, 173, 622, 623, 594, 174,
	175, 176, 177, 0, 0, 178, 179, 180, 614, 0,
	181, 182, 183, 237, 651, 0, 0, 184, 0, 0,
	0, 0, 185, 186, 187, 188, 0, 0, 600, 589,
	590, 587, 588, 576, 0, 0, 0, 1189, 1190, 0,
	0, 0, 0, 1191, 76, 77, 1192, 78, 0, 0,
	0, 0, 616, 582, 0, 0, 0, 79, 80, 0,
	631, 192, 632, 81, 633, 634, 0, 82, 196, 197,
	83, 597, 615, 635, 636, 200, 0, 627, 0, 608,
	0, 84, 85, 86, 0, 87, 0, 88, 89, 90,
	0, 265, 91, 1876, 0, 609, 611, 0, 610, 612,
	93, 94, 95, 96, 637, 97, 638, 639, 0, 98,
	0, 99, 0, 0, 0, 630, 101, 0, 102, 0,
	0, 0, 581, 103, 104, 617, 618, 595, 0, 0,
	105, 106, 640, 0, 107, 0, 108, 0, 0, 266,
	0, 109, 628, 0, 210, 0, 110, 111, 112, 624,
	626, 0, 0, 115, 0, 113, 0, 267, 114, 641,
	642, 643, 644, 0, 607, 0, 0, 116, 270, 117,
	118, 0, 0, 629, 271, 119, 0, 0, 120, 0,
	0, 121, 0, 122, 123, 124, 125, 126, 273, 127,
	128, 131, 129, 571, 130, 596, 625, 132, 645, 133,
	134, 0, 0, 0, 0, 0, 135, 221, 274, 136,
	275, 619, 137, 138, 139, 0, 620, 140, 224, 141,
	0, 142, 143, 144, 646, 145, 146, 0, 148, 149,
	147, 150, 0, 151, 276, 152, 153, 585, 154, 0,
	155, 156, 157, 0, 227, 158, 159, 613, 160, 161,
	0, 162, 647, 229, 163, 0, 169, 164, 165, 166,
	168, 648, 167, 621, 0, 170, 0, 171, 172, 0,
	232, 649, 650, 0, 0, 173, 622, 623, 594, 174,
	175, 1875, 177, 0, 0, 178, 179, 180, 614, 0,
	181, 182, 183, 237, 651, 0, 0, 184, 0, 0,
	0, 0, 185, 186, 187, 188, 0, 0, 600, 0,
	0, 0, 0, 0, 0, 0, 0, 568, 569, 0,
	0, 0, 0, 570, 76, 77, 577, 78, 0, 0,
	0, 0, 616, 0, 0, 0, 0, 79, 80, 190,
	191, 192, 193, 81, 194, 195, 0, 82, 196, 197,
	83, 0, 615, 198, 199, 200, 0, 627, 0, 608,
	0, 84, 85, 86, 0, 87, 0, 88, 89, 90,
	0, 265, 91, 92, 0, 609, 611, 0, 610, 612,
	93, 94, 95, 96, 202, 97, 203, 204, 0, 98,
	0, 99, 0, 0, 0, 100, 101, 0, 102, 0,
	0, 0, 205, 103, 104, 617, 618, 0, 0, 0,
	105, 106, 208, 0, 107, 0, 108, 0, 0, 266,
	0, 109, 628, 0, 210, 0, 110, 111, 112, 624,
	626, 268, 0, 115, 0, 113, 0, 267, 114, 213,
	214, 215, 216, 0, 217, 0, 269, 116, 270, 117,
	118, 0, 0, 629, 271, 119, 272, 0, 120, 0,
	0, 121, 0, 122, 123, 124, 125, 126, 273, 127,
	128, 131, 129, 0, 130, 0, 625, 132, 220, 133,
	134, 0, 0, 0, 0, 0, 135, 221, 274, 136,
	275, 619, 137, 138, 139, 0, 620, 140, 224, 141,
	0, 142, 143, 144, 225, 145, 146, 0, 148, 149,
	147, 150, 0, 151, 276, 152, 153, 226, 154, 0,
	155, 156, 157, 0, 227, 158, 159, 613, 160, 161,
	277, 162, 228, 229, 163, 0, 169, 164, 165, 166,
	168, 230, 167, 621, 0, 170, 0, 171, 172, 0,
	232, 233, 234, 0, 0, 173, 622, 623, 0, 174,
	175, 176, 177, 0, 0, 178, 179, 180, 614, 0,
	181, 182, 183, 237, 238, 0, 0, 184, 482, 0,
	0, 0, 185, 186, 187, 188, 0, 0, 0, 0,
	0, 0, 0, 0, 76, 77, 0, 78, 0, 0,
	0, 0, 189, 0, 0, 0, 1647, 79, 80, 190,
	191, 192, 193, 81, 194, 195, 0, 82, 196, 197,
	83, 0, 0, 198, 199, 200, 0, 201, 0, 264,
	0, 84, 85, 86, 0, 87, 0, 88, 89, 90,
	0, 265, 91, 92, 0, 0, 0, 0, 0, 0,
	93, 94, 95, 96, 202, 97, 203, 204, 0, 98,
	0, 99, 0, 0, 0, 100, 101, 0, 102, 0,
	0, 0, 205, 103, 104, 206, 207, 0, 0, 0,
	105, 106, 208, 0, 107, 0, 108, 0, 0, 266,
	0, 109, 209, 0, 210, 0, 110, 111, 112, 211,
	212, 268, 0, 115, 0, 113, 0, 267, 114, 213,
	214, 215, 216, 0, 217, 0, 269, 116, 270, 117,
	118, 0, 0, 218, 271, 119, 272, 0, 120, 0,
	0, 121, 0, 122, 123, 124, 125, 126, 273, 127,
	128, 131, 129, 0, 130, 0, 219, 132, 220, 133,
	134, 0, 0, 0, 0, 0, 135, 221, 274, 136,
	275, 222, 137, 138, 139, 0, 223, 140, 224, 141,
	0, 142, 143, 144, 225, 145, 146, 0, 148, 149,
	147, 150, 0, 151, 276, 152, 153, 226, 154, 0,
	155, 156, 157, 63, 227, 158, 159, 0, 160, 161,
	277, 162, 228, 229, 163, 0, 169, 164, 165, 166,
	168, 230, 167, 231, 0, 170, 65, 171, 172, 0,
	232, 233, 234, 0, 0, 173, 235, 236, 0, 174,
	175, 176, 177, 0, 0, 178, 179, 180, 0, 0,
	181, 182, 183, 486, 238, 0, 0, 184, 0, 0,
	0, 61, 185, 186, 187, 188, 0, 62, 482, 788,
	0, 789, 784, 779, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 76, 77, 60, 78, 0, 0,
	0, 0, 189, 0, 0, 0, 0, 79, 80, 190,
	191, 192, 193, 81, 194, 195, 0, 82, 196, 197,
	83, 0, 0, 198, 199, 200, 0, 201, 0, 264,
	0, 84, 85, 86, 0, 87, 0, 88, 89, 90,
	0, 265, 91, 92, 0, 0, 0, 0, 0, 0,
	93, 94, 95, 96, 202, 97, 203, 204, 792, 98,
	0, 99, 0, 0, 0, 100, 101, 0, 102, 0,
	0, 0, 205, 103, 104, 206, 207, 781, 0, 0,
	105, 106, 208, 0, 107, 0, 108, 0, 0, 266,
	0, 109, 209, 0, 210, 0, 110, 111, 112, 211,
	212, 268, 0, 115, 0, 113, 0, 267, 114, 213,
	214, 215, 216, 0, 217, 0, 269, 116, 270, 117,
	118, 0, 0, 218, 271, 119, 272, 0, 120, 0,
	0, 121, 0, 122, 123, 124, 125, 126, 273, 127,
	128, 131, 129, 0, 130, 0, 219, 132, 220, 133,
	134, 0, 782, 0, 0, 0, 135, 221, 274, 136,
	275, 222, 137, 138, 139, 0, 223, 140, 224, 141,
	0, 142, 143, 144, 225, 145, 146, 0, 148, 149,
	147, 150, 0, 151, 276, 152, 153, 226, 154, 0,
	155, 156, 157, 0, 227, 158, 159, 0, 160, 161,
	277, 162, 228, 229, 163, 0, 169, 164, 165, 166,
	168, 230, 167, 231, 0, 170, 0, 171, 172, 0,
	232, 233, 234, 0, 0, 173, 235, 236, 780, 174,
	175, 176, 177, 0, 0, 178, 179, 180, 0, 0,
	181, 182, 183, 237, 238, 482, 788, 184, 789, 784,
	779, 0, 185, 186, 187, 188, 0, 0, 0, 0,
	0, 76, 77, 0, 78, 0, 0, 790, 785, 189,
	0, 0, 0, 0, 79, 80, 190, 191, 192, 193,
	81, 194, 195, 0, 82, 196, 197, 83, 0, 0,
	198, 199, 200, 0, 201, 0, 264, 0, 84, 85,
	86, 0, 87, 0, 88, 89, 90, 0, 265, 91,
	92, 0, 0, 0, 0, 0, 0, 93, 94, 95,
	96, 202, 97, 203, 204, 775, 98, 0, 99, 0,
	0, 0, 100, 101, 0, 102, 0, 0, 0, 205,
	103, 104, 206, 207, 781, 0, 0, 105, 106, 208,
	0, 107, 0, 108, 0, 0, 266, 0, 109, 209,
	0, 210, 0, 110, 111, 112, 211, 212, 268, 0,
	115, 0, 113, 0, 267, 114, 213, 214, 215, 216,
	0, 217, 0, 269, 116, 270, 117, 118, 0, 0,
	218, 271, 119, 272, 0, 120, 0, 0, 121, 0,
	122, 123, 124, 125, 126, 273, 127, 128, 131, 129,
	0, 130, 0, 219, 132, 220, 133, 134, 0, 782,
	0, 0, 0, 135, 221, 274, 136, 275, 222, 137,
	138, 139, 0, 223, 140, 224, 141, 0, 142, 143,
	144, 225, 145, 146, 0, 148, 149, 147, 150, 0,
	151, 276, 152, 153, 226, 154, 0, 155, 156, 157,
	0, 227, 158, 159, 0, 160, 161, 277, 162, 228,
	229, 163, 0, 169, 164, 165, 166, 168, 230, 167,
	231, 0, 170, 0, 171, 172, 0, 232, 233, 234,
	0, 0, 173, 235, 236, 780, 174, 175, 176, 177,
	0, 0, 178, 179, 180, 0, 0, 181, 182, 183,
	237, 238, 482, 788, 184, 789, 784, 779, 0, 185,
	186, 187, 188, 0, 0, 0, 0, 0, 76, 77,
	0, 78, 0, 0, 790, 785, 189, 0, 0, 0,
	0, 79, 80, 190, 191, 192, 193, 81, 194, 195,
	0, 82, 196, 197, 83, 0, 0, 198, 199, 200,
	0, 201, 0, 264, 0, 84, 85, 86, 0, 87,
	0, 88, 89, 90, 0, 265, 91, 92, 0, 0,
	0, 0, 0, 0, 93, 94, 95, 96, 202, 97,
	203, 204, 0, 98, 0, 99, 0, 0, 0, 100,
	101, 0, 102, 0, 0, 0, 205, 103, 104, 206,
	207, 781, 0, 0, 105, 106, 208, 0, 107, 0,
	108, 0, 0, 266, 0, 109, 209, 0, 210, 0,
	110, 111, 112, 211, 212, 268, 0, 115, 0, 113,
	0, 267, 114, 213, 214, 215, 216, 0, 217, 0,
	269, 116, 270, 117, 118, 0, 0, 218, 271, 119,
	272, 0, 120, 0, 0, 121, 0, 122, 123, 124,
	125, 126, 273, 127, 128, 131, 129, 0, 130, 0,
	219, 132, 220, 133, 134, 0, 782, 0, 0, 0,
	135, 221, 274, 136, 275, 222, 137, 138, 139, 0,
	223, 140, 224, 141, 0, 142, 143, 144, 225, 145,
	146, 0, 148, 149, 147, 150, 0, 151, 276, 152,
	153, 226, 154, 0, 155, 156, 157, 0, 227, 158,
	159, 0, 160, 161, 277, 162, 228, 229, 163, 0,
	169, 164, 165, 166, 168, 230, 167, 231, 0, 170,
	0, 171, 172, 0, 232, 233, 234, 0, 0, 173,
	235, 236, 780, 174, 175, 176, 177, 0, 0, 178,
	179, 180, 0, 0, 181, 182, 183, 237, 238, 73,
	0, 184, 0, 0, 0, 0, 185, 186, 187, 188,
	0, 0, 0, 0, 0, 76, 77, 0, 78, 0,
	0, 790, 785, 189, 0, 0, 0, 0, 79, 80,
	190, 191, 192, 193, 81, 194, 195, 0, 82, 196,
	197, 83, 0, 0, 198, 199, 200, 0, 201, 0,
	0, 0, 84, 85, 86, 0, 87, 0, 88, 89,
	90, 0, 0, 91, 92, 0, 0, 0, 0, 0,
	0, 93, 94, 95, 96, 202, 97, 203, 204, 0,
	98, 0, 99, 0, 0, 0, 100, 101, 0, 102,
	0, 0, 0, 205, 103, 104, 206, 207, 0, 0,
	0, 105, 106, 208, 0, 107, 0, 108, 0, 0,
	0, 0, 109, 209, 0, 210, 0, 110, 111, 112,
	211, 212, 0, 0, 115, 0, 113, 0, 0, 114,
	213, 214, 215, 216, 0, 217, 0, 0, 116, 0,
	117, 118, 0, 0, 218, 0, 119, 0, 0, 120,
	0, 0, 121, 0, 122, 123, 124, 125, 126, 0,
	127, 128, 131, 129, 0, 130, 0, 219, 132, 220,
	133, 134, 0, 0, 0, 0, 0, 135, 221, 0,
	136, 0, 222, 137, 138, 139, 0, 223, 140, 224,
	141, 0, 142, 143, 144, 225, 145, 146, 0, 148,
	149, 147, 150, 0, 151, 0, 152, 153, 226, 154,
	0, 155, 156, 157, 63, 227, 158, 159, 0, 160,
	161, 0, 162, 228, 229, 163, 0, 169, 164, 165,
	166, 168, 230, 167, 231, 0, 170, 65, 171, 172,
	0, 232, 233, 234, 0, 0, 173, 235, 236, 0,
	174, 175, 176, 177, 0, 0, 178, 179, 180, 0,
	0, 181, 182, 183, 486, 238, 0, 0, 184, 73,
	0, 0, 61, 185, 186, 187, 188, 0, 62, 0,
	0, 0, 0, 0, 0, 76, 77, 0, 78, 0,
	0, 0, 0, 189, 0, 1325, 0, 60, 79, 80,
	190, 191, 192, 193, 81, 194, 195, 0, 82, 196,
	197, 83, 0, 0, 198, 199, 200, 0, 201, 0,
	0, 0, 84, 85, 86, 0, 87, 0, 88, 89,
	90, 0, 0, 91, 92, 0, 0, 0, 0, 0,
	0, 93, 94, 95, 96, 202, 97, 203, 204, 0,
	98, 0, 99, 0, 0, 0, 100, 101, 0, 102,
	0, 0, 0, 205, 103, 104, 206, 207, 0, 0,
	0, 105, 106, 208, 0, 107, 0, 108, 0, 0,
	0, 0, 109, 209, 0, 210, 0, 110, 111, 112,
	211, 212, 0, 0, 115, 0, 113, 0, 0, 114,
	213, 214, 215, 216, 0, 217, 0, 0, 116, 0,
	117, 118, 0, 0, 218, 0, 119, 0, 0, 120,
	0, 0, 121, 0, 122, 123, 124, 125, 126, 0,
	127, 128, 131, 129, 0, 130, 0, 219, 132, 220,
	133, 134, 0, 0, 0, 0, 0, 135, 221, 0,
	136, 0, 222, 137, 138, 139, 0, 223, 140, 224,
	141, 0, 142, 143, 144, 225, 145, 146, 0, 148,
	149, 147, 150, 0, 151, 0, 152, 153, 226, 154,
	0, 155, 156, 157, 0, 227, 158, 159, 0, 160,
	161, 0, 162, 228, 229, 163, 0, 169, 164, 165,
	166, 168, 230, 167, 231, 0, 170, 0, 171, 172,
	0, 232, 233, 234, 0, 0, 173, 235, 236, 0,
	174, 175, 176, 177, 0, 0, 178, 179, 180, 0,
	0, 181, 182, 183, 237, 238, 0, 0, 184, 0,
	73, 0, 0, 185, 186, 187, 188, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 76, 77, 0, 78,
	0, 0, 0, 0, 189, 0, 0, 0, 558, 79,
	80, 190, 191, 192, 193, 81, 194, 195, 0, 82,
	196, 197, 83, 0, 0, 198, 199, 200, 0, 201,
	0, 0, 0, 84, 85, 86, 0, 87, 0, 88,
	89, 90, 0, 0, 91, 92, 0, 0, 0, 0,
	0, 0, 93, 94, 95, 96, 202, 97, 203, 204,
	0, 98, 0, 99, 0, 0, 0, 100, 101, 0,
	102, 0, 0, 0, 205, 103, 104, 206, 207, 0,
	0, 0, 105, 106, 208, 0, 107, 0, 108, 0,
	0, 0, 0, 109, 209, 0, 210, 0, 110, 111,
	112, 211, 212, 0, 0, 115, 0, 113, 0, 0,
	114, 213, 214, 215, 216, 0, 217, 0, 0, 116,
	0, 117, 118, 0, 0, 218, 0, 119, 0, 0,
	120, 0, 0, 121, 0, 122, 123, 124, 125, 126,
	0, 127, 128, 131, 129, 0, 130, 0, 219, 132,
	220, 133, 134, 0, 0, 445, 0, 0, 135, 221,
	0, 136, 0, 222, 137, 138, 139, 0, 223, 140,
	224, 141, 0, 142, 143, 144, 225, 145, 146, 0,
	148, 149, 147, 150, 0, 151, 0, 152, 153, 226,
	154, 0, 155, 156, 157, 0, 227, 158, 159, 0,
	160, 161, 0, 162, 228, 229, 163, 0, 169, 164,
	165, 166, 168, 230, 167, 231, 0, 170, 0, 171,
	172, 0, 232, 233, 234, 0, 0, 173, 235, 236,
	0, 174, 175, 176, 177, 0, 0, 178, 179, 180,
	0, 0, 181, 182, 183, 237, 238, 0, 0, 184,
	73, 0, 0, 0, 185, 186, 187, 188, 0, 0,
	0, 0, 0, 0, 0, 0, 76, 77, 0, 78,
	0, 0, 0, 0, 189, 0, 0, 0, 1090, 79,
	80, 190, 191, 192, 193, 81, 194, 195, 0, 82,
	196, 197, 83, 0, 0, 198, 199, 200, 0, 201,
	0, 0, 0, 84, 85, 86, 0, 87, 0, 88,
	89, 90, 0, 0, 91, 92, 0, 0, 0, 0,
	0, 0, 93, 94, 95, 96, 202, 97, 203, 204,
	0, 98, 0, 99, 0, 0, 0, 100, 101, 0,
	102, 0, 0, 0, 205, 103, 104, 206, 207, 0,
	0, 0, 105, 106, 208, 0, 107, 0, 108, 0,
	0, 0, 0, 109, 209, 0, 210, 0, 110, 111,
	112, 211, 212, 0, 0, 115, 0, 113, 0, 0,
	114, 213, 214, 215, 216, 0, 217, 0, 0, 116,
	0, 117, 118, 0, 0, 218, 0, 119, 0, 0,
	120, 0, 0, 121, 0, 122, 123, 124, 125, 126,
	0, 127, 128, 131, 129, 0, 130, 0, 219, 132,
	220, 133, 134, 0, 0, 0, 0, 0, 135, 221,
	0, 136, 0, 222, 137, 138, 139, 0, 223, 140,
	224, 141, 0, 142, 143, 144, 225, 145, 146, 0,
	148, 149, 147, 150, 0, 151, 0, 152, 153, 226,
	154, 0, 155, 156, 157, 0, 227, 158, 159, 0,
	160, 161, 0, 162, 228, 229, 163, 0, 169, 164,
	165, 166, 168, 230, 167, 231, 0, 170, 0, 171,
	172, 0, 232, 233, 234, 0, 0, 173, 235, 236,
	0, 174, 175, 176, 177, 0, 0, 178, 179, 180,
	0, 0, 181, 182, 183, 237, 238, 0, 0, 184,
	0, 73, 0, 0, 185, 186, 187, 188, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 76, 77, 0,
	78, 0, 0, 0, 0, 189, 0, 0, 0, 682,
	79, 80, 190, 191, 192, 193, 81, 194, 195, 0,
	82, 196, 197, 83, 0, 0, 198, 199, 200, 0,
	201, 0, 0, 0, 84, 85, 86, 0, 87, 0,
	88, 89, 90, 0, 0, 91, 92, 0, 0, 0,
	0, 0, 0, 93, 94, 95, 96, 202, 97, 203,
	204, 0, 98, 0, 99, 0, 0, 0, 100, 101,
	0, 102, 0, 0, 0, 205, 103, 104, 206, 207,
	0, 0, 0, 105, 106, 208, 0, 107, 0, 108,
	0, 0, 0, 0, 109, 209, 0, 210, 0, 110,
	111, 112, 211, 212, 0, 0, 115, 0, 113, 0,
	0, 114, 213, 214, 215, 216, 0, 217, 0, 0,
	116, 0, 117, 118, 0, 0, 218, 0, 119, 0,
	0, 120, 0, 0, 121, 0, 122, 123, 124, 125,
	126, 0, 127, 128, 131, 129, 0, 130, 0, 219,
	132, 220, 133, 134, 0, 0, 0, 0, 0, 135,
	221, 0, 136, 0, 222, 137, 138, 139, 0, 223,
	140, 224, 141, 0, 142, 143, 144, 225, 145, 146,
	0, 148, 149, 147, 150, 0, 151, 0, 152, 153,
	226, 154, 0, 155, 156, 157, 0, 227, 158, 159,
	0, 160, 161, 0, 162, 228, 229, 163, 0, 169,
	164, 165, 166, 168, 230, 167, 231, 0, 170, 0,
	171, 172, 0, 232, 233, 234, 0, 0, 173, 235,
	236, 0, 174, 175, 176, 177, 0, 0, 178, 179,
	180, 0, 0, 181, 182, 183, 237, 238, 0, 0,
	184, 73, 0, 0, 0, 185, 186, 187, 188, 0,
	0, 0, 0, 0, 0, 0, 0, 76, 77, 0,
	78, 0, 0, 0, 0, 189, 0, 0, 0, 996,
	79, 80, 190, 191, 192, 193, 81, 194, 195, 0,
	82, 196, 197, 83, 0, 0, 198, 199, 200, 0,
	201, 0, 0, 0, 84, 85, 86, 0, 87, 0,
	88, 89, 90, 0, 0, 91, 92, 0, 0, 0,
	0, 0, 0, 93, 94, 95, 96, 202, 97, 203,
	204, 0, 98, 0, 99, 0, 0, 0, 100, 101,
	0, 102, 0, 0, 0, 205, 103, 104, 206, 207,
	0, 0, 0, 105, 106, 208, 0, 107, 0, 108,
	0, 0, 0, 0, 109, 209, 0, 210, 0, 110,
	111, 112, 211, 212, 0, 0, 115, 0, 113, 0,
	0, 114, 213, 214, 215, 216, 0, 217, 0, 0,
	116, 0, 117, 118, 0, 0, 218, 0, 119, 0,
	0, 120, 0, 0, 121, 0, 122, 123, 124, 125,
	126, 0, 127, 128, 131, 129, 0, 130, 0, 219,
	132, 220, 133, 134, 0, 0, 0, 0, 0, 135,
	221, 0, 136, 0, 222, 137, 138, 139, 0, 223,
	140, 224, 141, 0, 142, 143, 144, 225, 145, 146,
	0, 148, 149, 147, 150, 0, 151, 0, 152, 153,
	226, 154, 0, 155, 156, 157, 0, 227, 158, 159,
	0, 160, 161, 0, 162, 228, 229, 163, 0, 169,
	164, 165, 166, 168, 230, 167, 231, 0, 170, 0,
	171, 172, 0, 232, 233, 234, 0, 0, 173, 235,
	236, 0, 174, 175, 176, 177, 0, 0, 178, 179,
	180, 0, 0, 181, 182, 183, 237, 238, 0, 0,
	184, 73, 0, 0, 0, 185, 186, 187, 188, 0,
	0, 0, 0, 0, 0, 0, 0, 76, 77, 0,
	78, 0, 0, 0, 0, 189, 0, 0, 0, 1545,
	79, 80, 190, 191, 192, 193, 81, 194, 195, 0,
	82, 196, 197, 83, 0, 0, 198, 199, 200, 0,
	201, 0, 0, 0, 84, 85, 86, 0, 87, 0,
	88, 89, 90, 0, 0, 91, 92, 0, 0, 0,
	0, 0, 0, 93, 94, 95, 96, 202, 97, 203,
	204, 0, 98, 0, 99, 0, 0, 0, 100, 101,
	0, 102, 0, 0, 0, 205, 103, 104, 206, 207,
	0, 0, 0, 105, 106, 208, 0, 107, 0, 108,
	0, 0, 0, 0, 109, 209, 0, 210, 0, 110,
	111, 112, 211, 212, 0, 0, 115, 0, 113, 0,
	0, 114, 213, 214, 215, 216, 0, 217, 0, 0,
	116, 0, 117, 118, 0, 0, 218, 0, 119, 0,
	0, 120, 0, 0, 121, 0, 122, 123, 124, 125,
	126, 0, 127, 128, 131, 129, 0, 130, 0, 219,
	132, 220, 133, 134, 0, 0, 0, 0, 0, 135,
	221, 0, 136, 0, 222, 137, 138, 139, 0, 223,
	140, 224, 141, 0, 142, 143, 144, 225, 145, 146,
	0, 148, 149, 147, 150, 0, 151, 0, 152, 153,
	226, 154, 0, 155, 156, 157, 0, 227, 158, 159,
	0, 160, 161, 0, 162, 228, 229, 163, 0, 169,
	164, 165, 166, 168, 230, 167, 231, 0, 170, 0,
	171, 172, 0, 232, 233, 234, 0, 0, 173, 235,
	236, 0, 174, 175, 176, 177, 0, 0, 178, 179,
	180, 0, 0, 181, 182, 183, 237, 238, 0, 0,
	184, 73, 0, 0, 0, 185, 186, 187, 188, 0,
	0, 0, 0, 0, 0, 0, 0, 76, 77, 0,
	78, 0, 0, 0, 0, 189, 0, 0, 0, 662,
	79, 80, 190, 191, 192, 193, 81, 194, 195, 0,
	82, 196, 197, 83, 0, 0, 198, 199, 200, 0,
	201, 0, 0, 0, 84, 85, 86, 0, 87, 0,
	88, 89, 90, 0, 0, 91, 92, 0, 0, 0,
	0, 0, 0, 93, 94, 759, 96, 202, 97, 203,
	204, 0, 98, 0, 99, 0, 0, 0, 100, 101,
	0, 102, 0, 0, 0, 205, 103, 104, 206, 207,
	0, 0, 0, 105, 106, 208, 0, 107, 0, 108,
	0, 0, 0, 0, 109, 209, 0, 210, 0, 110,
	111, 112, 211, 212, 0, 0, 115, 0, 113, 0,
	0, 114, 213, 214, 215, 216, 0, 217, 0, 0,
	116, 0, 117, 118, 0, 0, 218, 0, 119, 0,
	0, 120, 0, 0, 121, 0, 122, 123, 124, 125,
	126, 0, 127, 128, 131, 129, 0, 130, 0, 219,
	132, 220, 133, 134, 0, 0, 0, 0, 0, 135,
	221, 0, 136, 0, 222, 137, 138, 139, 0, 223,
	140, 224, 141, 0, 142, 143, 144, 225, 145, 146,
	0, 148, 149, 147, 150, 0, 151, 0, 152, 153,
	226, 154, 0, 155, 156, 157, 0, 227, 158, 159,
	0, 160, 161, 0, 162, 228, 229, 163, 0, 169,
	164, 165, 166, 168, 230, 167, 231, 0, 170, 758,
	171, 172, 0, 232, 233, 234, 0, 0, 173, 235,
	236, 0, 174, 175, 176, 177, 0, 0, 178, 179,
	180, 0, 0, 181, 182, 183, 237, 238, 0, 73,
	184, 0, 0, 0, 0, 185, 186, 187, 188, 0,
	0, 0, 0, 0, 0, 76, 77, 0, 78, 0,
	0, 0, 762, 189, 0, 0, 0, 0, 79, 80,
	190, 191, 192, 193, 81, 194, 195, 0, 82, 196,
	197, 83, 0, 0, 198, 199, 200, 0, 201, 0,
	0, 0, 84, 85, 86, 0, 87, 0, 88, 89,
	90, 0, 0, 91, 92, 0, 0, 0, 0, 0,
	0, 93, 94, 95, 96, 202, 97, 203, 204, 0,
	98, 0, 99, 0, 0, 0, 100, 101, 0, 102,
	0, 0, 0, 205, 103, 104, 206, 207, 0, 0,
	0, 105, 106, 208, 0, 107, 0, 108, 0, 0,
	0, 0, 109, 209, 0, 210, 0, 110, 111, 112,
	211, 212, 0, 0, 115, 0, 113, 0, 0, 114,
	213, 214, 215, 216, 0, 217, 0, 0, 116, 0,
	117, 118, 0, 0, 218, 0, 119, 0, 0, 120,
	0, 0, 121, 0, 122, 123, 124, 125, 126, 0,
	127, 128, 131, 129, 0, 130, 0, 219, 132, 220,
	133, 134, 0, 0, 0, 0, 0, 135, 221, 0,
	136, 0, 222, 137, 138, 139, 0, 223, 140, 224,
	141, 0, 142, 143, 144, 225, 145, 146, 0, 148,
	149, 147, 150, 0, 151, 0, 152, 153, 226, 154,
	0, 155, 156, 157, 0, 227, 158, 159, 0, 160,
	161, 0, 162, 228, 229, 163, 0, 169, 164, 165,
	166, 168, 230, 167, 231, 0, 170, 0, 171, 172,
	0, 232, 233, 234, 0, 0, 173, 235, 236, 0,
	174, 175, 176, 177, 0, 0, 178, 179, 180, 0,
	0, 181, 182, 183, 237, 238, 0, 482, 184, 0,
	0, 0, 0, 185, 186, 187, 188, 0, 0, 0,
	0, 0, 0, 76, 77, 0, 78, 0, 0, 0,
	762, 189, 0, 0, 0, 0, 79, 80, 190, 191,
	192, 193, 81, 194, 195, 0, 82, 196, 197, 83,
	0, 0, 198, 199, 200, 0, 201, 0, 264, 0,
	84, 85, 86, 0, 87, 0, 88, 89, 90, 0,
	265, 91, 92, 0, 0, 0, 0, 0, 0, 93,
	94, 95, 96, 202, 97, 203, 204, 0, 98, 0,
	99, 0, 0, 0, 100, 101, 0, 102, 0, 0,
	0, 205, 103, 104, 206, 207, 0, 0, 0, 105,
	106, 208, 0, 107, 0, 108, 0, 0, 266, 0,
	109, 209, 0, 210, 0, 110, 111, 112, 211, 212,
	268, 0, 115, 0, 113, 0, 267, 114, 213, 214,
	215, 216, 0, 217, 0, 269, 116, 270, 117, 118,
	0, 0, 218, 271, 119, 272, 0, 120, 0, 0,
	121, 0, 122, 123, 124, 125, 126, 273, 127, 128,
	131, 129, 0, 130, 0, 219, 132, 220, 133, 134,
	0, 0, 0, 0, 0, 135, 221, 274, 136, 275,
	222, 137, 138, 139, 0, 223, 140, 224, 141, 0,
	142, 143, 144, 225, 145, 146, 0, 148, 149, 147,
	150, 0, 151, 276, 152, 153, 226, 154, 0, 155,
	156, 157, 0, 227, 158, 159, 0, 160, 161, 277,
	162, 228, 229, 163, 0, 169, 164, 165, 166, 168,
	230, 167, 231, 0, 170, 0, 171, 172, 0, 232,
	233, 234, 0, 0, 173, 235, 236, 0, 174, 175,
	176, 177, 0, 0, 178, 179, 180, 0, 0, 181,
	182, 183, 237, 238, 73, 0, 184, 0, 0, 0,
	0, 185, 186, 187, 188, 0, 0, 0, 0, 0,
	76, 77, 0, 78, 0, 0, 0, 0, 189, 0,
	0, 0, 0, 79, 80, 190, 191, 192, 193, 81,
	194, 195, 0, 82, 196, 197, 83, 0, 0, 198,
	199, 200, 962, 201, 0, 0, 0, 84, 85, 86,
	0, 87, 960, 88, 89, 90, 0, 0, 91, 92,
	0, 0, 0, 0, 0, 0, 93, 94, 95, 96,
	202, 97, 203, 204, 0, 98, 0, 99, 0, 0,
	0, 100, 101, 0, 102, 0, 0, 0, 205, 103,
	104, 206, 207, 0, 1065, 0, 105, 106, 208, 0,
	107, 0, 108, 965, 0, 0, 0, 109, 209, 0,
	210, 0, 110, 111, 112, 211, 212, 0, 0, 115,
	1063, 113, 0, 0, 114, 213, 214, 215, 216, 0,
	217, 0, 0, 116, 0, 117, 118, 0, 0, 218,
	0, 119, 0, 0, 120, 0, 0, 121, 0, 122,
	123, 124, 125, 126, 0, 127, 128, 131, 129, 0,
	130, 0, 219, 132, 220, 133, 134, 0, 0, 0,
	0, 0, 135, 221, 0, 136, 0, 222, 137, 138,
	139, 0, 223, 140, 224, 141, 964, 142, 143, 144,
	225, 145, 146, 0, 148, 149, 147, 150, 0, 151,
	0, 152, 153, 226, 154, 0, 155, 156, 157, 0,
	227, 158, 159, 0, 160, 161, 0, 162, 228, 229,
	163, 0, 169, 164, 165, 166, 168, 230, 167, 231,
	0, 170, 0, 171, 172, 0, 232, 233, 234, 0,
	0, 173, 235, 236, 0, 174, 175, 176, 177, 0,
	1064, 178, 179, 180, 0, 0, 181, 182, 183, 237,
	238, 73, 0, 184, 0, 0, 0, 0, 185, 186,
	187, 188, 0, 0, 0, 0, 0, 76, 77, 0,
	78, 0, 0, 0, 0, 189, 0, 0, 0, 0,
	79, 80, 190, 191, 192, 193, 81, 194, 195, 0,
	82, 196, 197, 83, 0, 0, 198, 199, 200, 962,
	201, 0, 0, 957, 84, 85, 86, 0, 87, 960,
	88, 89, 90, 0, 0, 91, 92, 0, 0, 0,
	0, 0, 0, 93, 94, 95, 96, 202, 97, 203,
	204, 0, 98, 0, 99, 0, 0, 0, 100, 101,
	0, 102, 0, 0, 0, 205, 103, 104, 206, 207,
	0, 0, 0, 105, 106, 208, 0, 107, 0, 108,
	965, 0, 0, 0, 109, 209, 0, 210, 0, 110,
	111, 112, 956, 212, 0, 0, 115, 0, 113, 0,
	0, 114, 213, 214, 215, 216, 0, 217, 0, 0,
	116, 0, 117, 118, 0, 0, 218, 0, 119, 0,
	0, 120, 0, 0, 121, 0, 122, 123, 124, 125,
	126, 0, 127, 128, 131, 129, 0, 130, 0, 219,
	132, 220, 133, 134, 0, 0, 0, 0, 0, 135,
	221, 0, 136, 0, 222, 137, 138, 139, 0, 223,
	140, 224, 141, 964, 142, 143, 144, 225, 145, 146,
	0, 148, 149, 147, 150, 0, 151, 0, 152, 153,
	226, 154, 0, 155, 156, 157, 0, 227, 158, 159,
	0, 160, 161, 0, 162, 228, 229, 163, 0, 169,
	164, 165, 166, 168, 230, 167, 231, 0, 170, 0,
	171, 172, 0, 232, 233, 234, 0, 0, 173, 235,
	236, 0, 174, 175, 176, 177, 0, 963, 178, 179,
	180, 0, 0, 181, 182, 183, 237, 238, 73, 0,
	184, 0, 0, 0, 0, 185, 186, 187, 188, 0,
	0, 0, 0, 0, 76, 77, 0, 78, 0, 0,
	0, 0, 189, 0, 1325, 0, 0, 79, 80, 190,
	191, 192, 193, 81, 194, 195, 0, 82, 196, 197,
	83, 0, 0, 198, 199, 200, 0, 201, 0, 0,
	0, 84, 85, 86, 0, 87, 0, 88, 89, 90,
	0, 0, 91, 92, 0, 0, 0, 0, 0, 0,
	93, 94, 95, 96, 202, 97, 203, 204, 0, 98,
	0, 99, 0, 0, 0, 100, 101, 0, 102, 0,
	0, 0, 205, 103, 104, 206, 207, 0, 0, 0,
	105, 106, 208, 0, 107, 0, 108, 0, 0, 0,
	0, 109, 209, 0, 210, 0, 110, 111, 112, 211,
	212, 0, 0, 115, 0, 113, 0, 0, 114, 213,
	214, 215, 216, 0, 217, 0, 0, 116, 0, 117,
	118, 0, 0, 218, 0, 119, 0, 0, 120, 0,
	0, 121, 0, 122, 123, 124, 125, 126, 0, 127,
	128, 131, 129, 0, 130, 0, 219, 132, 220, 133,
	134, 0, 0, 0, 0, 0, 135, 221, 0, 136,
	0, 222, 137, 138, 139, 0, 223, 140, 224, 141,
	0, 142, 143, 144, 225, 145, 146, 0, 148, 149,
	147, 150, 0, 151, 0, 152, 153, 226, 154, 0,
	155, 156, 157, 0, 227, 158, 159, 0, 160, 161,
	0, 162, 228, 229, 163, 0, 169, 164, 165, 166,
	168, 230, 167, 231, 0, 170, 0, 171, 172, 0,
	232, 233, 234, 0, 0, 173, 235, 236, 0, 174,
	175, 176, 177, 0, 0, 178, 179, 180, 0, 0,
	181, 182, 183, 237, 238, 73, 0, 184, 0, 0,
	0, 0, 185, 186, 187, 188, 0, 0, 0, 0,
	0, 76, 77, 0, 78, 0, 0, 0, 0, 189,
	0, 0, 0, 0, 79, 80, 190, 191, 192, 193,
	81, 194, 195, 0, 82, 196, 197, 83, 0, 0,
	198, 199, 200, 0, 201, 0, 0, 0, 84, 85,
	86, 0, 87, 0, 88, 89, 90, 0, 0, 91,
	92, 0, 0, 0, 0, 0, 0, 93, 94, 95,
	96, 202, 97, 203, 204, 0, 98, 0, 99, 0,
	0, 0, 100, 101, 0, 102, 0, 0, 0, 205,
	103, 104, 206, 207, 0, 0, 0, 105, 106, 208,
	0, 107, 0, 108, 0, 0, 0, 0, 109, 209,
	0, 210, 0, 110, 111, 112, 211, 212, 0, 0,
	115, 0, 113, 0, 0, 114, 213, 214, 215, 216,
	0, 217, 0, 0, 116, 0, 117, 118, 0, 0,
	218, 0, 119, 0, 0, 120, 0, 0, 121, 0,
	122, 123, 124, 125, 126, 0, 127, 128, 131, 129,
	0, 130, 0, 219, 132, 220, 133, 134, 0, 0,
	445, 0, 0, 135, 221, 0, 136, 0, 222, 137,
	138, 139, 0, 223, 140, 224, 141, 0, 142, 143,
	144, 225, 145, 146, 0, 148, 149, 147, 150, 0,
	151, 0, 152, 153, 226, 154, 0, 155, 156, 157,
	0, 227, 158, 159, 0, 160, 161, 0, 162, 228,
	229, 163, 0, 169, 164, 165, 166, 168, 230, 167,
	231, 0, 170, 0, 171, 172, 0, 232, 233, 234,
	0, 0, 173, 235, 236, 0, 174, 175, 176, 177,
	0, 0, 178, 179, 180, 0, 0, 181, 182, 183,
	237, 238, 73, 0, 184, 0, 0, 0, 0, 185,
	186, 187, 188, 0, 0, 0, 0, 0, 76, 77,
	0, 78, 0, 0, 0, 0, 189, 0, 0, 0,
	0, 79, 80, 190, 191, 192, 193, 81, 194, 195,
	0, 82, 196, 197, 83, 0, 0, 198, 199, 200,
	0, 201, 0, 0, 0, 84, 85, 86, 0, 87,
	0, 88, 89, 90, 0, 0, 91, 92, 0, 0,
	0, 0, 0, 0, 93, 94, 95, 96, 202, 97,
	203, 204, 0, 98, 0, 99, 0, 0, 0, 100,
	101, 0, 102, 0, 0, 0, 205, 103, 104, 206,
	207, 0, 0, 0, 105, 106, 208, 0, 107, 0,
	108, 0, 0, 0, 0, 109, 209, 0, 210, 0,
	110, 111, 112, 710, 212, 0, 0, 115, 0, 113,
	0, 0, 114, 213, 214, 215, 216, 0, 217, 0,
	0, 116, 0, 117, 118, 0, 0, 218, 0, 119,
	0, 0, 120, 0, 0, 121, 0, 122, 123, 124,
	125, 126, 0, 127, 128, 131, 129, 0, 130, 0,
	219, 132, 220, 133, 134, 0, 0, 445, 0, 0,
	135, 221, 0, 136, 0, 222, 137, 138, 139, 0,
	223, 140, 224, 141, 0, 142, 143, 144, 225, 145,
	146, 0, 148, 149, 147, 150, 0, 151, 0, 152,
	153, 226, 154, 0, 155, 156, 157, 0, 227, 158,
	159, 0, 160, 161, 0, 162, 228, 229, 163, 0,
	169, 164, 165, 166, 168, 230, 167, 231, 0, 170,
	0, 171, 172, 0, 232, 233, 234, 0, 0, 173,
	235, 236, 0, 174, 175, 176, 177, 0, 0, 178,
	179, 180, 0, 0, 181, 182, 183, 237, 238, 73,
	0, 184, 0, 0, 0, 0, 185, 186, 187, 188,
	0, 0, 0, 0, 0, 76, 77, 493, 78, 0,
	0, 0, 0, 189, 0, 0, 0, 0, 79, 80,
	190, 191, 192, 193, 81, 194, 195, 0, 82, 196,
	197, 83, 0, 0, 198, 199, 200, 0, 201, 0,
	0, 0, 84, 85, 86, 0, 87, 0, 88, 89,
	90, 0, 0, 91, 92, 0, 0, 0, 0, 0,
	0, 93, 94, 95, 96, 202, 97, 203, 204, 0,
	98, 0, 99, 0, 0, 0, 100, 101, 0, 102,
	0, 0, 0, 205, 103, 104, 206, 207, 0, 0,
	0, 105, 106, 208, 0, 107, 0, 108, 0, 0,
	0, 0, 109, 209, 0, 210, 0, 110, 111, 112,
	211, 212, 0, 0, 115, 0, 113, 0, 0, 114,
	213, 214, 215, 216, 0, 217, 0, 0, 116, 0,
	117, 118, 0, 0, 218, 0, 119, 0, 0, 120,
	0, 0, 121, 0, 122, 123, 124, 125, 126, 0,
	127, 128, 131, 129, 0, 130, 0, 219, 132, 220,
	133, 134, 0, 0, 0, 0, 0, 135, 221, 0,
	136, 0, 222, 137, 138, 139, 0, 223, 140, 224,
	141, 0, 142, 143, 144, 225, 145, 146, 0, 148,
	149, 147, 150, 0, 151, 0, 152, 153, 226, 154,
	0, 155, 156, 157, 0, 227, 158, 159, 0, 160,
	161, 0, 162, 228, 229, 163, 0, 169, 164, 165,
	166, 168, 230, 167, 231, 0, 170, 0, 171, 172,
	0, 232, 233, 234, 0, 0, 173, 235, 236, 0,
	174, 175, 176, 177, 0, 0, 178, 179, 180, 0,
	0, 181, 182, 183, 237, 238, 73, 0, 184, 0,
	0, 0, 0, 185, 186, 187, 188, 0, 0, 0,
	0, 0, 76, 77, 0, 78, 0, 0, 0, 0,
	189, 0, 0, 0, 0, 79, 80, 190, 191, 192,
	193, 81, 194, 195, 0, 82, 196, 197, 83, 0,
	0, 198, 199, 200, 0, 201, 0, 0, 0, 84,
	85, 86, 0, 87, 0, 88, 89, 90, 0, 0,
	91, 92, 0, 0, 0, 0, 0, 0, 93, 94,
	95, 96, 202, 97, 203, 204, 0, 98, 0, 99,
	0, 0, 0, 100, 101, 0, 102, 0, 0, 0,
	205, 103, 104, 206, 207, 0, 0, 0, 105, 106,
	208, 0, 107, 0, 108, 0, 0, 0, 0, 109,
	209, 0, 210, 0, 110, 111, 112, 450, 212, 0,
	0, 115, 0, 113, 0, 0, 114, 213, 214, 215,
	216, 0, 217, 0, 0, 116, 0, 117, 118, 0,
	0, 218, 0, 119, 0, 0, 120, 0, 0, 121,
	0, 122, 123, 124, 125, 126, 0, 127, 128, 131,
	129, 0, 130, 0, 219, 132, 220, 133, 134, 0,
	0, 445, 0, 0, 135, 221, 0, 136, 0, 222,
	137, 138, 139, 0, 223, 140, 224, 141, 0, 142,
	143, 144, 225, 145, 146, 0, 148, 149, 147, 150,
	0, 151, 0, 152, 153, 226, 154, 0, 155, 156,
	157, 0, 227, 158, 159, 0, 160, 161, 0, 162,
	228, 229, 163, 0, 169, 164, 165, 166, 168, 230,
	167, 231, 0, 170, 0, 171, 172, 0, 232, 233,
	234, 0, 0, 173, 235, 236, 0, 174, 175, 176,
	177, 0, 0, 178, 179, 180, 0, 0, 181, 182,
	183, 237, 238, 73, 0, 184, 0, 0, 0, 0,
	185, 186, 187, 188, 0, 0, 0, 0, 0, 76,
	77, 362, 78, 0, 0, 0, 0, 189, 0, 0,
	0, 0, 79, 80, 190, 191, 192, 193, 81, 194,
	195, 0, 82, 196, 197, 83, 0, 0, 198, 199,
	200, 0, 201, 0, 0, 0, 84, 85, 86, 0,
	87, 0, 88, 89, 90, 0, 0, 91, 92, 0,
	0, 0, 0, 0, 0, 93, 94, 95, 96, 202,
	97, 203, 204, 0, 98, 0, 99, 0, 0, 0,
	100, 101, 0, 102, 0, 0, 0, 205, 103, 104,
	206, 207, 0, 0, 0, 105, 106, 208, 0, 107,
	0, 108, 0, 0, 0, 0, 109, 209, 0, 210,
	0, 110, 111, 112, 211, 212, 0, 0, 115, 0,
	113, 0, 0, 114, 213, 214, 215, 216, 0, 217,
	0, 0, 116, 0, 117, 118, 0, 0, 218, 0,
	119, 0, 0, 120, 0, 0, 121, 0, 122, 123,
	124, 125, 126, 0, 127, 128, 131, 129, 0, 130,
	0, 219, 132, 220, 133, 134, 0, 0, 0, 0,
	0, 135, 221, 0, 136, 0, 222, 137, 138, 139,
	0, 223, 140, 224, 361, 0, 142, 143, 144, 225,
	145, 146, 0, 148, 149, 147, 150, 0, 151, 0,
	152, 153, 226, 154, 0, 155, 156, 157, 0, 227,
	158, 159, 0, 160, 161, 0, 162, 228, 229, 163,
	0, 169, 164, 165, 166, 168, 230, 167, 231, 0,
	170, 0, 171, 172, 0, 232, 233, 234, 0, 0,
	173, 235, 236, 0, 174, 175, 176, 177, 0, 0,
	178, 179, 180, 0, 0, 181, 182, 183, 237, 238,
	73, 0, 184, 0, 0, 0, 0, 185, 186, 187,
	188, 0, 0, 0, 0, 0, 76, 77, 0, 78,
	0, 0, 0, 0, 189, 0, 0, 0, 0, 79,
	80, 190, 191, 192, 193, 81, 194, 195, 0, 82,
	196, 197, 83, 0, 0, 198, 199, 200, 0, 201,
	0, 0, 0, 84, 85, 86, 0, 87, 0, 88,
	89, 90, 0, 0, 91, 92, 0, 0, 0, 0,
	0, 0, 93, 94, 95, 96, 202, 97, 203, 204,
	0, 98, 0, 99, 0, 0, 0, 100, 101, 0,
	102, 0, 0, 0, 205, 103, 104, 206, 207, 0,
	0, 0, 105, 106, 208, 0, 107, 0, 108, 0,
	0, 0, 0, 109, 209, 0, 210, 0, 110, 111,
	112, 211, 212, 0, 0, 115, 0, 113, 0, 0,
	114, 213, 214, 215, 216, 0, 217, 0, 0, 116,
	0, 117, 118, 0, 0, 218, 0, 119, 0, 0,
	120, 0, 0, 121, 0, 122, 123, 124, 125, 126,
	0, 127, 128, 131, 129, 0, 130, 0, 219, 132,
	220, 133, 134, 0, 0, 0, 0, 0, 135, 221,
	0, 136, 0, 222, 137, 138, 139, 0, 223, 140,
	224, 141, 0, 142, 143, 144, 225, 145, 146, 0,
	148, 149, 147, 150, 0, 151, 0, 152, 153, 226,
	154, 0, 155, 156, 157, 0, 227, 158, 159, 0,
	160, 161, 0, 162, 228, 229, 163, 0, 169, 164,
	165, 166, 168, 230, 167, 231, 0, 170, 0, 171,
	172, 0, 232, 233, 234, 0, 0, 173, 235, 236,
	0, 174, 175, 176, 177, 0, 0, 178, 179, 180,
	0, 0, 181, 182, 183, 237, 238, 73, 0, 184,
	0, 0, 0, 0, 185, 186, 187, 188, 0, 0,
	0, 0, 0, 76, 77, 0, 78, 0, 0, 0,
	0, 189, 0, 0, 0, 0, 79, 80, 190, 191,
	192, 193, 81, 194, 195, 0, 82, 196, 197, 83,
	0, 0, 198, 199, 200, 0, 201, 0, 0, 0,
	84, 85, 86, 0, 87, 0, 88, 89, 90, 0,
	0, 91, 92, 0, 0, 0, 0, 0, 0, 93,
	94, 95, 96, 202, 97, 203, 204, 0, 98, 0,
	99, 0, 0, 0, 100, 101, 0, 102, 0, 0,
	0, 205, 103, 104, 206, 207, 0, 0, 0, 105,
	106, 208, 0, 107, 0, 108, 0, 0, 0, 0,
	109, 209, 0, 210, 0, 110, 111, 112, 1239, 212,
	0, 0, 115, 0, 113, 0, 0, 114, 213, 214,
	215, 216, 0, 217, 0, 0, 116, 0, 117, 118,
	0, 0, 218, 0, 119, 0, 0, 120, 0, 0,
	121, 0, 122, 123, 124, 125, 126, 0, 127, 128,
	131, 129, 0, 130, 0, 219, 132, 220, 133, 134,
	0, 0, 0, 0, 0, 135, 221, 0, 136, 0,
	222, 137, 138, 139, 0, 223, 140, 224, 141, 0,
	142, 143, 144, 225, 145, 146, 0, 148, 149, 147,
	150, 0, 151, 0, 152, 153, 226, 154, 0, 155,
	156, 157, 0, 227, 158, 159, 0, 160, 161, 0,
	162, 228, 229, 163, 0, 169, 164, 165, 166, 168,
	230, 167, 231, 0, 170, 0, 171, 172, 0, 232,
	233, 234, 0, 0, 173, 235, 236, 0, 174, 175,
	176, 177, 0, 0, 178, 179, 180, 0, 0, 181,
	182, 183, 237, 238, 73, 0, 184, 0, 0, 0,
	0, 185, 186, 187, 188, 0, 0, 0, 0, 0,
	76, 77, 0, 78, 0, 0, 0, 0, 189, 0,
	0, 0, 0, 79, 80, 190, 191, 192, 193, 81,
	194, 195, 0, 82, 196, 197, 83, 0, 0, 198,
	199, 200, 0, 201, 0, 0, 0, 84, 85, 86,
	0, 87, 0, 88, 89, 90, 0, 0, 91, 92,
	0, 0, 0, 0, 0, 0, 93, 94, 95, 96,
	202, 97, 203, 204, 0, 98, 0, 99, 0, 0,
	0, 100, 101, 0, 102, 0, 0, 0, 205, 103,
	104, 206, 207, 0, 0, 0, 105, 106, 208, 0,
	107, 0, 108, 0, 0, 0, 0, 109, 209, 0,
	210, 0, 110, 111, 112, 1237, 212, 0, 0, 115,
	0, 113, 0, 0, 114, 213, 214, 215, 216, 0,
	217, 0, 0, 116, 0, 117, 118, 0, 0, 218,
	0, 119, 0, 0, 120, 0, 0, 121, 0, 122,
	123, 124, 125, 126, 0, 127, 128, 131, 129, 0,
	130, 0, 219, 132, 220, 133, 134, 0, 0, 0,
	0, 0, 135, 221, 0, 136, 0, 222, 137, 138,
	139, 0, 223, 140, 224, 141, 0, 142, 143, 144,
	225, 145, 146, 0, 148, 149, 147, 150, 0, 151,
	0, 152, 153, 226, 154, 0, 155, 156, 157, 0,
	227, 158, 159, 0, 160, 161, 0, 162, 228, 229,
	163, 0, 169, 164, 165, 166, 168, 230, 167, 231,
	0, 170, 0, 171, 172, 0, 232, 233, 234, 0,
	0, 173, 235, 236, 0, 174, 175, 176, 177, 0,
	0, 178, 179, 180, 0, 0, 181, 182, 183, 237,
	238, 73, 0, 184, 0, 0, 0, 0, 185, 186,
	187, 188, 0, 0, 0, 0, 0, 76, 77, 0,
	78, 0, 0, 0, 0, 189, 0, 0, 0, 0,
	79, 80, 190, 191, 192, 193, 81, 194, 195, 0,
	82, 196, 197, 83, 0, 0, 198, 199, 200, 0,
	201, 0, 0, 0, 84, 85, 86, 0, 87, 0,
	88, 89, 90, 0, 0, 91, 92, 0, 0, 0,
	0, 0, 0, 93, 94, 95, 96, 202, 97, 203,
	204, 0, 98, 0, 99, 0, 0, 0, 100, 101,
	0, 102, 0, 0, 0, 205, 103, 104, 206, 207,
	0, 0, 0, 105, 106, 208, 0, 107, 0, 108,
	0, 0, 0, 0, 109, 209, 0, 210, 0, 110,
	111, 112, 1226, 212, 0, 0, 115, 0, 113, 0,
	0, 114, 213, 214, 215, 216, 0, 217, 0, 0,
	116, 0, 117, 118, 0, 0, 218, 0, 119, 0,
	0, 120, 0, 0, 121, 0, 122, 123, 124, 125,
	126, 0, 127, 128, 131, 129, 0, 130, 0, 219,
	132, 220, 133, 134, 0, 0, 0, 0, 0, 135,
	221, 0, 136, 0, 222, 137, 138, 139, 0, 223,
	140, 224, 141, 0, 142, 143, 144, 225, 145, 146,
	0, 148, 149, 147, 150, 0, 151, 0, 152, 153,
	226, 154, 0, 155, 156, 157, 0, 227, 158, 159,
	0, 160, 161, 0, 162, 228, 229, 163, 0, 169,
	164, 165, 166, 168, 230, 167, 231, 0, 170, 0,
	171, 172, 0, 232, 233, 234, 0, 0, 173, 235,
	236, 0, 174, 175, 176, 177, 0, 0, 178, 179,
	180, 0, 0, 181, 182, 183, 237, 238, 73, 0,
	184, 0, 0, 0, 0, 185, 186, 187, 188, 0,
	0, 0, 0, 0, 76, 77, 0, 78, 0, 0,
	0, 0, 189, 0, 0, 0, 0, 79, 80, 190,
	191, 192, 193, 81, 194, 195, 0, 82, 196, 197,
	83, 0, 0, 198, 199, 200, 0, 201, 0, 0,
	0, 84, 85, 86, 0, 87, 0, 88, 89, 90,
	0, 0, 91, 92, 0, 0, 0, 0, 0, 0,
	93, 94, 95, 96, 202, 97, 203, 204, 0, 98,
	0, 99, 0, 0, 0, 100, 101, 0, 102, 0,
	0, 0, 205, 103, 104, 206, 207, 0, 0, 0,
	105, 106, 208, 0, 107, 0, 108, 0, 0, 0,
	0, 109, 209, 0, 210, 0, 110, 111, 112, 827,
	212, 0, 0, 115, 0, 113, 0, 0, 114, 213,
	214, 215, 216, 0, 217, 0, 0, 116, 0, 117,
	118, 0, 0, 218, 0, 119, 0, 0, 120, 0,
	0, 121, 0, 122, 123, 124, 125, 126, 0, 127,
	128, 131, 129, 0, 130, 0, 219, 132, 220, 133,
	134, 0, 0, 0, 0, 0, 135, 221, 0, 136,
	0, 222, 137, 138, 139, 0, 223, 140, 224, 141,
	0, 142, 143, 144, 225, 145, 146, 0, 148, 149,
	147, 150, 0, 151, 0, 152, 153, 226, 154, 0,
	155, 156, 157, 0, 227, 158, 159, 0, 160, 161,
	0, 162, 228, 229, 163, 0, 169, 164, 165, 166,
	168, 230, 167, 231, 0, 170, 0, 171, 172, 0,
	232, 233, 234, 0, 0, 173, 235, 236, 0, 174,
	175, 176, 177, 0, 0, 178, 179, 180, 0, 0,
	181, 182, 183, 237, 238, 73, 0, 184, 0, 0,
	0, 0, 185, 186, 187, 188, 0, 0, 0, 0,
	0, 76, 77, 0, 78, 0, 0, 0, 0, 189,
	0, 0, 0, 0, 79, 80, 190, 191, 192, 193,
	81, 194, 195, 0, 82, 196, 197, 83, 0, 0,
	198, 199, 200, 0, 201, 0, 0, 0, 84, 85,
	86, 0, 87, 0, 88, 89, 90, 0, 0, 91,
	92, 0, 0, 0, 0, 0, 0, 93, 94, 95,
	96, 202, 97, 203, 204, 0, 98, 0, 99, 0,
	0, 0, 100, 101, 0, 102, 0, 0, 0, 205,
	103, 104, 206, 207, 0, 0, 0, 105, 106, 208,
	0, 107, 0, 108, 0, 0, 0, 0, 109, 209,
	0, 210, 0, 110, 111, 112, 211, 212, 0, 0,
	115, 0, 113, 0, 0, 114, 213, 214, 215, 216,
	0, 217, 0, 0, 116, 0, 117, 118, 0, 0,
	218, 0, 119, 0, 0, 120, 0, 0, 121, 0,
	122, 123, 124, 125, 126, 0, 127, 128, 131, 129,
	0, 130, 0, 219, 132, 220, 133, 134, 0, 0,
	0, 0, 0, 135, 221, 0, 136, 0, 222, 137,
	138, 139, 0, 223, 140, 224, 141, 0, 142, 143,
	144, 225, 145, 146, 0, 148, 149, 147, 150, 0,
	151, 0, 152, 153, 226, 154, 0, 376, 156, 157,
	0, 227, 158, 159, 0, 160, 161, 0, 162, 228,
	229, 163, 0, 169, 164, 165, 166, 168, 230, 167,
	231, 0, 170, 0, 171, 172, 0, 232, 233, 234,
	0, 0, 173, 235, 236, 0, 174, 175, 176, 177,
	0, 0, 178, 179, 180, 0, 0, 181, 182, 183,
	237, 238, 73, 0, 184, 0, 0, 0, 0, 185,
	186, 187, 188, 0, 0, 0, 0, 0, 76, 77,
	0, 78, 0, 0, 0, 0, 189, 0, 695, 0,
	0, 79, 80, 190, 191, 192, 193, 81, 194, 195,
	0, 82, 196, 197, 83, 0, 0, 198, 199, 200,
	0, 201, 0, 0, 0, 84, 85, 86, 0, 87,
	0, 88, 89, 90, 0, 0, 91, 92, 0, 0,
	0, 0, 0, 0, 93, 94, 95, 96, 202, 97,
	203, 204, 0, 98, 0, 99, 0, 0, 0, 100,
	101, 0, 102, 0, 0, 0, 205, 103, 104, 206,
	207, 0, 0, 0, 105, 106, 208, 0, 107, 0,
	108, 0, 0, 0, 0, 109, 209, 0, 210, 0,
	110, 111, 112, 211, 212, 0, 0, 115, 0, 113,
	0, 0, 114, 213, 214, 215, 216, 0, 217, 0,
	0, 116, 0, 117, 118, 0, 0, 218, 0, 119,
	0, 0, 120, 0, 0, 121, 0, 122, 123, 124,
	125, 126, 0, 127, 128, 131, 129, 0, 130, 0,
	219, 132, 220, 133, 134, 0, 0, 0, 0, 0,
	135, 221, 0, 136, 0, 222, 137, 138, 139, 0,
	223, 140, 224, 141, 0, 142, 143, 144, 225, 145,
	146, 0, 148, 149, 147, 150, 0, 151, 0, 152,
	153, 226, 154, 0, 155, 156, 157, 0, 227, 158,
	159, 0, 0, 161, 0, 162, 228, 229, 163, 0,
	169, 164, 165, 166, 168, 230, 167, 231, 0, 170,
	0, 171, 172, 0, 232, 233, 234, 0, 0, 173,
	235, 236, 0, 174, 175, 176, 177, 0, 0, 178,
	179, 180, 0, 0, 181, 182, 183, 237, 238, 73,
	0, 184, 0, 0, 0, 0, 185, 186, 187, 188,
	0, 0, 0, 0, 0, 76, 77, 0, 78, 0,
	0, 0, 0, 189, 0, 0, 0, 0, 79, 80,
	190, 191, 192, 193, 81, 194, 195, 0, 82, 196,
	197, 83, 0, 0, 198, 199, 200, 0, 201, 0,
	0, 0, 84, 85, 86, 0, 87, 0, 88, 89,
	90, 0, 0, 91, 92, 0, 0, 0, 0, 0,
	0, 93, 94, 95, 96, 202, 97, 203, 204, 0,
	98, 0, 99, 0, 0, 0, 100, 101, 0, 102,
	0, 0, 0, 205, 103, 104, 206, 207, 0, 0,
	0, 105, 106, 208, 0, 107, 0, 108, 0, 0,
	0, 0, 109, 209, 0, 210, 0, 110, 111, 112,
	543, 212, 0, 0, 115, 0, 113, 0, 0, 114,
	213, 214, 215, 216, 0, 217, 0, 0, 116, 0,
	117, 118, 0, 0, 218, 0, 119, 0, 0, 120,
	0, 0, 121, 0, 122, 123, 124, 125, 126, 0,
	127, 128, 131, 129, 0, 130, 0, 219, 132, 220,
	133, 134, 0, 0, 0, 0, 0, 135, 221, 0,
	136, 0, 222, 137, 138, 139, 0, 223, 140, 224,
	141, 0, 142, 143, 144, 225, 145, 146, 0, 148,
	149, 147, 150, 0, 151, 0, 152, 153, 226, 154,
	0, 155, 156, 157, 0, 227, 158, 159, 0, 160,
	161, 0, 162, 228, 229, 163, 0, 169, 164, 165,
	166, 168, 230, 167, 231, 0, 170, 0, 171, 172,
	0, 232, 233, 234, 0, 0, 173, 235, 236, 0,
	174, 175, 176, 177, 0, 0, 178, 179, 180, 0,
	0, 181, 182, 183, 237, 238, 73, 0, 184, 0,
	0, 0, 0, 185, 186, 187, 188, 0, 0, 0,
	0, 0, 76, 77, 0, 78, 0, 0, 0, 0,
	189, 0, 0, 0, 0, 79, 80, 190, 191, 192,
	193, 81, 194, 195, 0, 82, 196, 197, 83, 0,
	0, 198, 199, 200, 0, 201, 0, 0, 0, 84,
	85, 86, 0, 87, 0, 88, 89, 90, 0, 0,
	91, 92, 0, 0, 0, 0, 0, 0, 93, 94,
	95, 96, 202, 97, 203, 204, 0, 98, 0, 99,
	0, 0, 0, 100, 101, 0, 102, 0, 0, 0,
	205, 103, 104, 206, 207, 0, 0, 0, 105, 106,
	208, 0, 107, 0, 108, 0, 0, 0, 0, 109,
	209, 0, 210, 0, 110, 111, 112, 539, 212, 0,
	0, 115, 0, 113, 0, 0, 114, 213, 214, 215,
	216, 0, 217, 0, 0, 116, 0, 117, 118, 0,
	0, 218, 0, 119, 0, 0, 120, 0, 0, 121,
	0, 122, 123, 124, 125, 126, 0, 127, 128, 131,
	129, 0, 130, 0, 219, 132, 220, 133, 134, 0,
	0, 0, 0, 0, 135, 221, 0, 136, 0, 222,
	137, 138, 139, 0, 223, 140, 224, 141, 0, 142,
	143, 144, 225, 145, 146, 0, 148, 149, 147, 150,
	0, 151, 0, 152, 153, 226, 154, 0, 155, 156,
	157, 0, 227, 158, 159, 0, 160, 161, 0, 162,
	228, 229, 163, 0, 169, 164, 165, 166, 168, 230,
	167, 231, 0, 170, 0, 171, 172, 0, 232, 233,
	234, 0, 0, 173, 235, 236, 0, 174, 175, 176,
	177, 0, 0, 178, 179, 180, 0, 0, 181, 182,
	183, 237, 238, 73, 0, 184, 0, 0, 0, 0,
	185, 186, 187, 188, 0, 0, 0, 0, 0, 76,
	77, 0, 78, 0, 0, 0, 0, 189, 0, 0,
	0, 0, 79, 80, 190, 191, 192, 193, 81, 194,
	195, 0, 82, 196, 197, 83, 0, 0, 198, 199,
	499, 0, 201, 0, 0, 0, 84, 85, 86, 0,
	87, 0, 88, 89, 90, 0, 0, 91, 92, 0,
	0, 0, 0, 0, 0, 93, 94, 95, 96, 202,
	97, 203, 204, 0, 98, 0, 99, 0, 0, 0,
	100, 101, 0, 102, 0, 0, 0, 205, 103, 104,
	206, 207, 0, 0, 0, 105, 106, 208, 0, 107,
	0, 108, 0, 0, 0, 0, 109, 209, 0, 210,
	0, 110, 111, 112, 211, 212, 0, 0, 115, 0,
	113, 0, 0, 114, 213, 214, 215, 216, 0, 217,
	0, 0, 116, 0, 117, 118, 0, 0, 218, 0,
	119, 0, 0, 120, 0, 0, 121, 0, 122, 123,
	124, 125, 387, 0, 127, 128, 131, 129, 0, 130,
	0, 219, 132, 220, 133, 134, 0, 0, 0, 0,
	0, 135, 221, 0, 136, 0, 222, 137, 138, 139,
	0, 223, 140, 224, 141, 0, 142, 143, 144, 225,
	145, 146, 0, 148, 149, 147, 150, 0, 151, 0,
	152, 153, 226, 154, 0, 155, 156, 157, 0, 227,
	158, 159, 0, 160, 161, 0, 162, 228, 229, 163,
	0, 169, 164, 165, 166, 168, 230, 167, 231, 0,
	170, 0, 171, 172, 0, 386, 233, 234, 0, 0,
	382, 235, 236, 0, 174, 175, 176, 177, 0, 0,
	178, 179, 180, 0, 0, 181, 182, 183, 237, 238,
	73, 0, 184, 0, 0, 0, 0, 185, 186, 187,
	188, 0, 0, 0, 0, 0, 76, 77, 0, 78,
	0, 0, 0, 0, 189, 0, 0, 0, 0, 79,
	80, 190, 191, 192, 193, 81, 194, 195, 0, 82,
	196, 197, 83, 0, 0, 198, 199, 200, 0, 201,
	0, 0, 0, 84, 85, 86, 0, 87, 0, 88,
	89, 90, 0, 0, 91, 92, 0, 0, 0, 0,
	0, 0, 93, 94, 95, 96, 202, 97, 203, 204,
	0, 98, 0, 99, 0, 0, 0, 100, 101, 0,
	102, 0, 0, 0, 205, 103, 104, 206, 207, 0,
	0, 0, 105, 106, 208, 0, 107, 0, 108, 0,
	0, 0, 0, 109, 209, 0, 210, 0, 110, 111,
	112, 211, 212, 0, 0, 115, 0, 113, 0, 0,
	114, 213, 214, 215, 216, 0, 217, 0, 0, 116,
	0, 117, 118, 0, 0, 218, 0, 119, 0, 0,
	120, 0, 0, 121, 0, 122, 123, 124, 125, 387,
	0, 127, 128, 131, 129, 0, 130, 0, 219, 132,
	220, 133, 134, 0, 0, 0, 0, 0, 135, 221,
	0, 136, 0, 222, 137, 138, 139, 0, 223, 140,
	224, 141, 0, 142, 143, 144, 225, 145, 146, 0,
	148, 149, 147, 150, 0, 151, 0, 152, 153, 226,
	154, 0, 155, 156, 157, 0, 227, 158, 159, 0,
	160, 161, 0, 162, 228, 229, 163, 0, 169, 164,
	165, 166, 168, 230, 167, 231, 0, 170, 0, 171,
	172, 0, 386, 233, 234, 0, 0, 382, 235, 236,
	0, 174, 175, 176, 177, 0, 0, 178, 179, 180,
	0, 0, 181, 182, 183, 237, 238, 73, 0, 184,
	0, 0, 0, 0, 185, 186, 187, 188, 0, 0,
	0, 0, 0, 76, 77, 0, 78, 0, 0, 0,
	0, 189, 0, 0, 0, 0, 79, 80, 190, 191,
	192, 193, 81, 194, 195, 0, 82, 196, 197, 83,
	0, 0, 198, 199, 200, 0, 201, 0, 0, 0,
	84, 85, 86, 0, 87, 0, 88, 89, 90, 0,
	0, 91, 92, 0, 0, 0, 0, 0, 0, 93,
	94, 95, 96, 202, 97, 203, 204, 0, 98, 0,
	99, 0, 0, 0, 100, 101, 0, 102, 0, 0,
	0, 205, 103, 104, 206, 207, 0, 0, 0, 105,
	106, 208, 0, 107, 0, 108, 0, 0, 0, 0,
	109, 209, 0, 210, 0, 110, 111, 112, 478, 212,
	0, 0, 115, 0, 113, 0, 0, 114, 213, 214,
	215, 216, 0, 217, 0, 0, 116, 0, 117, 118,
	0, 0, 218, 0, 119, 0, 0, 120, 0, 0,
	121, 0, 122, 123, 124, 125, 126, 0, 127, 128,
	131, 129, 0, 130, 0, 219, 132, 220, 133, 134,
	0, 0, 0, 0, 0, 135, 221, 0, 136, 0,
	222, 137, 138, 139, 0, 223, 140, 224, 141, 0,
	142, 143, 144, 225, 145, 146, 0, 148, 149, 147,
	150, 0, 151, 0, 152, 153, 226, 154, 0, 155,
	156, 157, 0, 227, 158, 159, 0, 160, 161, 0,
	162, 228, 229, 163, 0, 169, 164, 165, 166, 168,
	230, 167, 231, 0, 170, 0, 171, 172, 0, 232,
	233, 234, 0, 0, 173, 235, 236, 0, 174, 175,
	176, 177, 0, 0, 178, 179, 180, 0, 0, 181,
	182, 183, 237, 238, 73, 0, 184, 0, 0, 0,
	0, 185, 186, 187, 188, 0, 0, 0, 0, 0,
	76, 77, 0, 78, 0, 0, 0, 0, 189, 0,
	0, 0, 0, 79, 80, 190, 191, 192, 193, 81,
	194, 195, 0, 82, 196, 197, 83, 0, 0, 198,
	199, 200, 0, 201, 0, 0, 0, 84, 85, 86,
	0, 87, 0, 88, 89, 90, 0, 0, 91, 92,
	0, 0, 0, 0, 0, 0, 93, 94, 95, 96,
	202, 97, 203, 204, 0, 98, 0, 99, 0, 0,
	0, 100, 101, 0, 102, 0, 0, 0, 205, 103,
	104, 206, 207, 0, 0, 0, 105, 106, 208, 0,
	107, 0, 108, 0, 0, 0, 0, 109, 209, 0,
	210, 0, 110, 111, 112, 475, 212, 0, 0, 115,
	0, 113, 0, 0, 114, 213, 214, 215, 216, 0,
	217, 0, 0, 116, 0, 117, 118, 0, 0, 218,
	0, 119, 0, 0, 120, 0, 0, 121, 0, 122,
	123, 124, 125, 126, 0, 127, 128, 131, 129, 0,
	130, 0, 219, 132, 220, 133, 134, 0, 0, 0,
	0, 0, 135, 221, 0, 136, 0, 222, 137, 138,
	139, 0, 223, 140, 224, 141, 0, 142, 143, 144,
	225, 145, 146, 0, 148, 149, 147, 150, 0, 151,
	0, 152, 153, 226, 154, 0, 155, 156, 157, 0,
	227, 158, 159, 0, 160, 161, 0, 162, 228, 229,
	163, 0, 169, 164, 165, 166, 168, 230, 167, 231,
	0, 170, 0, 171, 172, 0, 232, 233, 234, 0,
	0, 173, 235, 236, 0, 174, 175, 176, 177, 0,
	0, 178, 179, 180, 0, 0, 181, 182, 183, 237,
	238, 73, 0, 184, 0, 0, 0, 0, 185, 186,
	187, 188, 0, 0, 0, 0, 0, 76, 77, 0,
	78, 0, 0, 0, 0, 189, 0, 0, 0, 0,
	79, 80, 190, 191, 192, 193, 81, 194, 195, 0,
	82, 196, 197, 83, 0, 0, 198, 199, 200, 0,
	201, 0, 0, 0, 84, 85, 86, 0, 87, 0,
	88, 89, 90, 0, 0, 91, 92, 0, 0, 0,
	0, 0, 0, 93, 94, 95, 96, 202, 97, 203,
	204, 0, 98, 0, 99, 0, 0, 0, 100, 101,
	0, 102, 0, 0, 0, 205, 103, 104, 206, 207,
	0, 0, 0, 105, 106, 208, 0, 107, 0, 108,
	0, 0, 0, 0, 109, 209, 0, 210, 0, 110,
	111, 112, 472, 212, 0, 0, 115, 0, 113, 0,
	0, 114, 213, 214, 215, 216, 0, 217, 0, 0,
	116, 0, 117, 118, 0, 0, 218, 0, 119, 0,
	0, 120, 0, 0, 121, 0, 122, 123, 124, 125,
	126, 0, 127, 128, 131, 129, 0, 130, 0, 219,
	132, 220, 133, 134, 0, 0, 0, 0, 0, 135,
	221, 0, 136, 0, 222, 137, 138, 139, 0, 223,
	140, 224, 141, 0, 142, 143, 144, 225, 145, 146,
	0, 148, 149, 147, 150, 0, 151, 0, 152, 153,
	226, 154, 0, 155, 156, 157, 0, 227, 158, 159,
	0, 160, 161, 0, 162, 228, 229, 163, 0, 169,
	164, 165, 166, 168, 230, 167, 231, 0, 170, 0,
	171, 172, 0, 232, 233, 234, 0, 0, 173, 235,
	236, 0, 174, 175, 176, 177, 0, 0, 178, 179,
	180, 0, 0, 181, 182, 183, 237, 238, 73, 0,
	184, 0, 0, 0, 0, 185, 186, 187, 188, 0,
	0, 0, 0, 0, 76, 77, 0, 78, 0, 0,
	0, 0, 189, 0, 0, 0, 0, 79, 80, 190,
	191, 192, 193, 81, 194, 195, 0, 82, 196, 197,
	83, 0, 0, 198, 199, 200, 0, 201, 0, 0,
	0, 84, 85, 86, 0, 87, 0, 88, 89, 90,
	0, 0, 91, 92, 0, 0, 0, 0, 0, 0,
	93, 94, 95, 96, 202, 97, 203, 204, 0, 98,
	0, 99, 0, 0, 0, 100, 101, 0, 102, 0,
	0, 0, 205, 103, 104, 206, 207, 0, 0, 0,
	105, 106, 208, 0, 107, 0, 108, 0, 0, 0,
	0, 109, 209, 0, 210, 0, 110, 111, 112, 470,
	212, 0, 0, 115, 0, 113, 0, 0, 114, 213,
	214, 215, 216, 0, 217, 0, 0, 116, 0, 117,
	118, 0, 0, 218, 0, 119, 0, 0, 120, 0,
	0, 121, 0, 122, 123, 124, 125, 126, 0, 127,
	128, 131, 129, 0, 130, 0, 219, 132, 220, 133,
	134, 0, 0, 0, 0, 0, 135, 221, 0, 136,
	0, 222, 137, 138, 139, 0, 223, 140, 224, 141,
	0, 142, 143, 144, 225, 145, 146, 0, 148, 149,
	147, 150, 0, 151, 0, 152, 153, 226, 154, 0,
	155, 156, 157, 0, 227, 158, 159, 0, 160, 161,
	0, 162, 228, 229, 163, 0, 169, 164, 165, 166,
	168, 230, 167, 231, 0, 170, 0, 171, 172, 0,
	232, 233, 234, 0, 0, 173, 235, 236, 0, 174,
	175, 176, 177, 0, 0, 178, 179, 180, 0, 0,
	181, 182, 183, 237, 238, 73, 0, 184, 0, 0,
	0, 0, 185, 186, 187, 188, 0, 0, 0, 0,
	0, 76, 77, 0, 78, 0, 0, 0, 0, 189,
	0, 0, 0, 0, 79, 80, 190, 191, 192, 193,
	81, 194, 195, 0, 82, 196, 197, 83, 0, 0,
	198, 199, 200, 0, 201, 0, 0, 0, 84, 85,
	86, 0, 87, 0, 88, 89, 90, 0, 0, 91,
	92, 0, 0, 0, 0, 0, 0, 93, 94, 95,
	96, 202, 97, 203, 204, 0, 98, 0, 99, 0,
	0, 0, 100, 101, 0, 102, 0, 0, 0, 205,
	103, 104, 206, 207, 0, 0, 0, 105, 106, 208,
	0, 107, 0, 108, 0, 0, 0, 0, 109, 209,
	0, 210, 0, 110, 111, 112, 453, 212, 0, 0,
	115, 0, 113, 0, 0, 114, 213, 214, 215, 216,
	0, 217, 0, 0, 116, 0, 117, 118, 0, 0,
	218, 0, 119, 0, 0, 120, 0, 0, 121, 0,
	122, 123, 124, 125, 126, 0, 127, 128, 131, 129,
	0, 130, 0, 219, 132, 220, 133, 134, 0, 0,
	0, 0, 0, 135, 221, 0, 136, 0, 222, 137,
	138, 139, 0, 223, 140, 224, 141, 0, 142, 143,
	144, 225, 145, 146, 0, 148, 149, 147, 150, 0,
	151, 0, 152, 153, 226, 154, 0, 155, 156, 157,
	0, 227, 158, 159, 0, 160, 161, 0, 162, 228,
	229, 163, 0, 169, 164, 165, 166, 168, 230, 167,
	231, 0, 170, 0, 171, 172, 0, 232, 233, 234,
	0, 0, 173, 235, 236, 0, 174, 175, 176, 177,
	0, 0, 178, 179, 180, 0, 0, 181, 182, 183,
	237, 238, 73, 0, 184, 0, 0, 0, 0, 185,
	186, 187, 188, 0, 0, 0, 0, 0, 76, 77,
	0, 78, 0, 0, 0, 0, 189, 0, 0, 0,
	0, 79, 80, 190, 191, 192, 193, 81, 194, 195,
	0, 82, 196, 197, 83, 0, 0, 198, 199, 200,
	0, 201, 0, 0, 0, 84, 85, 86, 0, 87,
	0, 88, 89, 90, 0, 0, 91, 92, 0, 0,
	0, 0, 0, 0, 93, 94, 95, 96, 202, 97,
	203, 204, 0, 98, 0, 99, 0, 0, 0, 100,
	101, 0, 102, 0, 0, 0, 205, 103, 104, 206,
	207, 0, 0, 0, 105, 106, 208, 0, 107, 0,
	108, 0, 0, 0, 0, 109, 209, 0, 210, 0,
	110, 111, 112, 211, 212, 0, 0, 115, 0, 113,
	0, 0, 114, 213, 214, 215, 216, 0, 217, 0,
	0, 116, 0, 117, 118, 0, 0, 218, 0, 119,
	0, 0, 120, 0, 0, 121, 0, 122, 123, 124,
	125, 126, 0, 127, 128, 131, 129, 0, 130, 0,
	219, 132, 220, 133, 134, 0, 0, 0, 0, 0,
	135, 221, 0, 136, 0, 222, 137, 138, 139, 0,
	223, 140, 224, 141, 0, 142, 143, 144, 225, 434,
	146, 0, 148, 149, 147, 150, 0, 151, 0, 152,
	153, 226, 154, 0, 155, 156, 157, 0, 227, 158,
	159, 0, 160, 161, 0, 162, 228, 229, 163, 0,
	169, 164, 165, 166, 168, 230, 167, 231, 0, 170,
	0, 171, 172, 0, 232, 233, 234, 0, 0, 173,
	235, 236, 0, 174, 175, 176, 177, 0, 0, 178,
	179, 180, 0, 0, 181, 182, 183, 237, 238, 73,
	0, 184, 0, 0, 0, 0, 185, 186, 187, 188,
	0, 0, 0, 0, 0, 76, 77, 0, 78, 0,
	0, 0, 0, 189, 0, 0, 0, 0, 79, 80,
	190, 191, 192, 193, 81, 194, 195, 0, 82, 196,
	197, 83, 0, 0, 198, 199, 200, 0, 201, 0,
	0, 0, 84, 85, 86, 0, 87, 0, 88, 89,
	90, 0, 0, 91, 92, 0, 0, 0, 0, 0,
	0, 93, 94, 95, 96, 202, 97, 203, 204, 0,
	98, 0, 99, 0, 0, 0, 100, 101, 0, 102,
	0, 0, 0, 205, 103, 104, 206, 207, 0, 0,
	0, 105, 106, 208, 0, 107, 0, 108, 0, 0,
	0, 0, 109, 209, 0, 210, 0, 110, 111, 112,
	211, 212, 0, 0, 115, 0, 113, 0, 0, 114,
	213, 214, 215, 216, 0, 217, 0, 0, 116, 0,
	117, 118, 0, 0, 218, 0, 119, 0, 0, 379,
	0, 0, 121, 0, 122, 123, 124, 125, 387, 0,
	127, 128, 131, 129, 0, 130, 0, 219, 132, 220,
	133, 134, 0, 0, 0, 0, 0, 135, 221, 0,
	136, 0, 222, 137, 138, 139, 0, 223, 140, 224,
	141, 0, 142, 143, 144, 225, 145, 146, 0, 148,
	149, 147, 150, 0, 151, 0, 152, 153, 381, 154,
	0, 155, 156, 157, 0, 227, 158, 380, 0, 160,
	161, 0, 162, 228, 229, 163, 0, 169, 164, 165,
	166, 168, 230, 167, 231, 0, 170, 0, 171, 172,
	0, 386, 233, 234, 0, 0, 382, 235, 236, 0,
	174, 175, 176, 177, 0, 0, 178, 179, 180, 0,
	0, 181, 182, 183, 237, 238, 73, 0, 184, 0,
	0, 0, 0, 185, 186, 187, 188, 0, 0, 0,
	0, 0, 76, 77, 0, 78, 0, 0, 0, 0,
	189, 0, 0, 0, 0, 79, 80, 190, 191, 192,
	193, 81, 194, 195, 0, 82, 196, 197, 83, 0,
	0, 198, 199, 200, 0, 201, 0, 0, 0, 84,
	85, 86, 0, 87, 0, 88, 89, 90, 0, 0,
	91, 92, 0, 0, 0, 0, 0, 0, 93, 94,
	95, 96, 202, 97, 203, 204, 0, 98, 0, 99,
	0, 0, 0, 100, 101, 0, 102, 0, 0, 0,
	205, 103, 104, 206, 207, 0, 0, 0, 105, 106,
	208, 0, 107, 0, 108, 0, 0, 0, 0, 109,
	209, 0, 210, 0, 110, 111, 112, 211, 212, 0,
	0, 115, 0, 113, 0, 0, 114, 213, 214, 215,
	216, 0, 217, 0, 0, 116, 0, 117, 118, 0,
	0, 218, 0, 119, 0, 0, 120, 0, 0, 121,
	0, 122, 123, 124, 125, 126, 0, 127, 128, 131,
	129, 0, 130, 0, 219, 132, 220, 133, 134, 0,
	0, 0, 0, 0, 135, 221, 0, 136, 0, 222,
	137, 138, 0, 0, 223, 140, 224, 141, 0, 142,
	0, 144, 225, 145, 146, 0, 148, 149, 147, 150,
	0, 151, 0, 152, 153, 226, 0, 0, 155, 156,
	157, 0, 227, 158, 159, 0, 160, 161, 0, 162,
	228, 229, 163, 0, 169, 164, 165, 166, 168, 230,
	167, 231, 0, 170, 0, 171, 172, 0, 232, 233,
	234, 0, 0, 173, 235, 236, 0, 174, 175, 176,
	177, 0, 0, 178, 179, 180, 0, 0, 181, 182,
	183, 237, 238, 0, 0, 184, 0, 0, 0, 0,
	185, 186, 187, 188, 853, 854, 0, 873, 874, 875,
	883, 884, 885, 0, 0, 0, 0, 0, 0, 0,
	876, 0, 0, 0, 0, 0, 0, 856, 0, 887,
	853, 854, 0, 873, 874, 875, 883, 884, 885, 0,
	0, 0, 0, 0, 0, 0, 876, 0, 855, 0,
	0, 0, 0, 856, 870, 887, 0, 0, 0, 0,
	0, 0, 853, 854, 0, 873, 874, 875, 883, 884,
	885, 0, 0, 0, 855, 0, 0, 0, 876, 0,
	870, 0, 0, 0, 0, 856, 0, 887, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 861, 0, 0, 855, 0, 0, 0,
	0, 0, 870, 0, 0, 0, 0, 0, 0, 0,
	0, 880, 888, 0, 0, 0, 0, 0, 0, 861,
	0, 0, 0, 0, 0, 0, 886, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 878, 880, 888, 0,
	0, 0, 871, 0, 0, 0, 0, 0, 0, 0,
	0, 861, 886, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 878, 0, 877, 0, 0, 0, 871, 880,
	888, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 886, 0, 0, 0, 0, 0,
	877, 0, 0, 0, 878, 0, 0, 0, 0, 872,
	871, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	881, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 877, 0, 0, 872, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 881, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 872, 0, 0,
	0, 0, 0, 0, 0, 0, 879, 0, 881, 867,
	868, 869, 0, 866, 863, 864, 865, 857, 858, 859,
	860, 862, 0, 882, 0, 0, 0, 0, 0, 0,
	1422, 0, 879, 0, 0, 867, 868, 869, 0, 866,
	863, 864, 865, 857, 858, 859, 860, 862, 0, 882,
	0, 0, 0, 0, 0, 0, 1374, 1382, 1383, 0,
	1400, 1401, 1402, 0, 879, 0, 0, 867, 868, 869,
	0, 866, 863, 864, 865, 857, 858, 859, 860, 862,
	0, 882, 0, 853, 854, 1827, 873, 874, 875, 883,
	884, 885, 0, 0, 0, 0, 0, 0, 0, 876,
	0, 0, 0, 0, 0, 0, 856, 1397, 887, 853,
	854, 0, 873, 874, 875, 883, 884, 885, 0, 0,
	0, 0, 0, 0, 0, 876, 0, 855, 0, 0,
	0, 0, 856, 870, 887, 0, 0, 0, 0, 0,
	0, 853, 854, 0, 873, 874, 875, 883, 884, 885,
	0, 0, 0, 855, 0, 0, 1388, 876, 0, 870,
	0, 0, 0, 0, 856, 0, 887, 0, 0, 0,
	0, 0, 0, 0, 0, 1404, 0, 0, 0, 0,
	0, 0, 861, 0, 0, 855, 0, 0, 0, 1403,
	0, 870, 0, 0, 0, 0, 0, 0, 0, 0,
	880, 888, 0, 0, 0, 1398, 0, 0, 861, 0,
	0, 0, 0, 0, 0, 886, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 878, 880, 888, 0, 0,
	0, 871, 0, 0, 0, 0, 0, 0, 0, 0,
	861, 886, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 878, 0, 877, 0, 0, 0, 871, 880, 888,
	0, 0, 1399, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 886, 0, 0, 0, 0, 0, 877,
	0, 0, 0, 878, 0, 0, 0, 0, 872, 871,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 881,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 877, 0, 0, 872, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 881, 0, 0, 0, 0,
	0, 0, 1394, 1395, 1396, 0, 1393, 1390, 1391, 1392,
	1384, 1385, 1386, 1387, 1389, 0, 872, 0, 0, 0,
	0, 0, 0, 0, 0, 879, 0, 881, 867, 868,
	869, 0, 866, 863, 864, 865, 857, 858, 859, 860,
	862, 0, 882, 0, 0, 0, 1825, 0, 0, 0,
	0, 879, 0, 0, 867, 868, 869, 0, 866, 863,
	864, 865, 857, 858, 859, 860, 862, 0, 882, 0,
	1382, 1383, 1806, 1400, 1401, 1402, 0, 0, 0, 0,
	0, 0, 0, 879, 0, 0, 867, 868, 869, 0,
	866, 863, 864, 865, 857, 858, 859, 860, 862, 0,
	882, 0, 853, 854, 1781, 873, 874, 875, 883, 884,
	885, 0, 0, 0, 0, 0, 0, 0, 876, 0,
	1397, 0, 0, 0, 0, 856, 0, 887, 853, 854,
	0, 873, 874, 875, 883, 884, 885, 0, 0, 0,
	0, 0, 0, 0, 876, 0, 855, 0, 0, 0,
	0, 856, 870, 887, 0, 0, 0, 0, 0, 0,
	853, 854, 0, 873, 874, 875, 883, 884, 885, 1388,
	0, 0, 855, 0, 0, 0, 876, 0, 870, 0,
	0, 0, 0, 856, 0, 887, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 861, 1403, 0, 855, 0, 0, 0, 0, 0,
	870, 0, 0, 0, 0, 0, 0, 0, 1398, 880,
	888, 0, 0, 0, 0, 0, 0, 861, 0, 0,
	0, 0, 0, 0, 886, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 878, 880, 888, 0, 0, 0,
	871, 0, 0, 0, 0, 0, 0, 0, 0, 861,
	886, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	878, 0, 877, 0, 0, 1399, 871, 880, 888, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 886, 0, 0, 0, 0, 0, 877, 0,
	0, 0, 878, 0, 0, 0, 0, 872, 871, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 881, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	877, 0, 0, 872, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 881, 1394, 1395, 1396, 0, 1393,
	1390, 1391, 1392, 1384, 1385, 1386, 1387, 1389, 0, 0,
	0, 0, 0, 0, 0, 872, 0, 0, 0, 0,
	0, 0, 0, 0, 879, 0, 881, 867, 868, 869,
	0, 866, 863, 864, 865, 857, 858, 859, 860, 862,
	0, 882, 0, 0, 0, 1776, 0, 0, 0, 0,
	879, 0, 0, 867, 868, 869, 0, 866, 863, 864,
	865, 857, 858, 859, 860, 862, 0, 882, 0, 0,
	0, 1772, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 879, 0, 0, 867, 868, 869, 0, 866,
	863, 864, 865, 857, 858, 859, 860, 862, 0, 882,
	0, 853, 854, 1707, 873, 874, 875, 883, 884, 885,
	0, 0, 0, 0, 0, 0, 0, 876, 0, 0,
	0, 0, 0, 0, 856, 0, 887, 853, 854, 0,
	873, 874, 875, 883, 884, 885, 0, 0, 0, 0,
	0, 0, 0, 876, 0, 855, 0, 0, 0, 0,
	856, 870, 887, 0, 0, 0, 0, 0, 0, 853,
	854, 0, 873, 874, 875, 883, 884, 885, 0, 0,
	0, 855, 0, 0, 0, 876, 0, 870, 0, 0,
	0, 0, 856, 0, 887, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	861, 0, 0, 855, 0, 0, 0, 0, 0, 870,
	0, 0, 0, 0, 0, 0, 0, 0, 880, 888,
	0, 0, 0, 0, 0, 0, 861, 0, 0, 0,
	0, 0, 0, 886, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 878, 880, 888, 0, 0, 0, 871,
	0, 0, 0, 0, 0, 0, 0, 0, 861, 886,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 878,
	0, 877, 0, 0, 0, 871, 880, 888, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 886, 0, 0, 0, 0, 0, 877, 0, 0,
	0, 878, 0, 0, 0, 0, 872, 871, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 881, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 877,
	0, 0, 872, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 881, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 872, 0, 0, 0, 0, 0,
	0, 0, 0, 879, 0, 881, 867, 868, 869, 0,
	866, 863, 864, 865, 857, 858, 859, 860, 862, 0,
	882, 0, 0, 0, 1706, 0, 0, 0, 0, 879,
	0, 0, 867, 868, 869, 0, 866, 863, 864, 865,
	857, 858, 859, 860, 862, 0, 882, 0, 0, 0,
	1614, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 879, 0, 0, 867, 868, 869, 0, 866, 863,
	864, 865, 857, 858, 859, 860, 862, 0, 882, 0,
	853, 854, 1548, 873, 874, 875, 883, 884, 885, 0,
	0, 0, 0, 0, 0, 0, 876, 0, 0, 0,
	0, 0, 0, 856, 0, 887, 853, 854, 0, 873,
	874, 875, 883, 884, 885, 0, 0, 0, 0, 0,
	0, 0, 876, 0, 855, 0, 0, 0, 0, 856,
	870, 887, 0, 0, 0, 0, 0, 0, 853, 854,
	0, 873, 874, 875, 883, 884, 885, 0, 0, 0,
	855, 0, 0, 0, 876, 0, 870, 0, 0, 0,
	0, 856, 0, 887, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 861,
	0, 0, 855, 0, 0, 0, 0, 0, 870, 0,
	0, 0, 0, 0, 0, 0, 0, 880, 888, 0,
	0, 0, 0, 0, 0, 861, 0, 0, 0, 0,
	0, 0, 886, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 878, 880, 888, 0, 0, 0, 871, 0,
	0, 0, 0, 0, 0, 0, 0, 861, 886, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 878, 0,
	877, 0, 0, 0, 871, 880, 888, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	886, 0, 0, 0, 0, 0, 877, 0, 0, 0,
	878, 0, 0, 0, 0, 872, 871, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 881, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 877, 0,
	0, 872, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 881, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 872, 0, 0, 0, 0, 0, 0,
	0, 0, 879, 0, 881, 867, 868, 869, 0, 866,
	863, 864, 865, 857, 858, 859, 860, 862, 0, 882,
	0, 0, 0, 1532, 0, 0, 0, 0, 879, 0,
	0, 867, 868, 869, 0, 866, 863, 864, 865, 857,
	858, 859, 860, 862, 0, 882, 0, 0, 0, 1145,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	879, 0, 0, 867, 868, 869, 0, 866, 863, 864,
	865, 857, 858, 859, 860, 862, 0, 882, 0, 1462,
	853, 854, 0, 873, 874, 875, 883, 884, 885, 0,
	0, 0, 0, 0, 0, 0, 876, 0, 0, 0,
	0, 0, 0, 856, 0, 887, 853, 854, 0, 873,
	874, 875, 883, 884, 885, 0, 0, 0, 0, 0,
	0, 0, 876, 0, 855, 0, 0, 0, 0, 856,
	870, 887, 0, 0, 0, 0, 0, 0, 853, 854,
	0, 873, 874, 875, 883, 884, 885, 0, 0, 0,
	855, 0, 0, 0, 876, 0, 870, 0, 0, 1078,
	0, 856, 0, 887, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 861,
	1895, 0, 855, 0, 0, 0, 0, 0, 870, 0,
	0, 0, 0, 0, 0, 0, 0, 880, 888, 0,
	0, 0, 0, 0, 0, 861, 0, 1414, 0, 0,
	1413, 0, 886, 0, 0, 0, 1079, 0, 0, 0,
	0, 0, 878, 880, 888, 0, 0, 0, 871, 0,
	0, 0, 0, 0, 0, 0, 0, 861, 886, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 878, 0,
	877, 0, 0, 0, 871, 880, 888, 0, 0, 0,
	0, 0, 0, 1894, 0, 0, 0, 0, 0, 0,
	886, 0, 0, 0, 0, 0, 877, 0, 0, 0,
	878, 0, 0, 0, 0, 872, 871, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 881, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 877, 0,
	0, 872, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 881, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 872, 0, 0, 0, 0, 0, 0,
	0, 0, 879, 0, 881, 867, 868, 869, 0, 866,
	863, 864, 865, 857, 858, 859, 860, 862, 0, 882,
	0, 0, 0, 0, 0, 0, 0, 0, 879, 0,
	0, 867, 868, 869, 0, 866, 863, 864, 865, 857,
	858, 859, 860, 862, 0, 882, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	879, 0, 0, 867, 868, 869, 0, 866, 863, 864,
	865, 857, 858, 859, 860, 862, 890, 882, 0, 0,
	0, 0, 853, 854, 0, 873, 874, 875, 883, 884,
	885, 0, 0, 0, 0, 0, 0, 0, 876, 0,
	0, 0, 889, 0, 0, 856, 0, 887, 853, 854,
	0, 873, 874, 875, 883, 884, 885, 0, 0, 0,
	0, 0, 0, 0, 876, 0, 855, 0, 0, 0,
	0, 856, 870, 887, 0, 0, 0, 0, 0, 0,
	853, 854, 0, 873, 874, 875, 883, 884, 885, 0,
	0, 0, 855, 0, 0, 0, 876, 0, 870, 0,
	0, 0, 0, 856, 0, 887, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 861, 0, 0, 855, 0, 0, 0, 0, 0,
	870, 0, 0, 0, 0, 0, 0, 0, 0, 880,
	888, 0, 0, 0, 0, 0, 0, 861, 0, 0,
	0, 0, 0, 0, 886, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 878, 880, 888, 0, 0, 0,
	871, 0, 0, 0, 0, 0, 0, 0, 0, 861,
	886, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	878, 0, 877, 0, 0, 0, 871, 880, 888, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 886, 0, 0, 0, 0, 0, 877, 429,
	0, 0, 878, 0, 0, 0, 0, 872, 871, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 881, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	877, 0, 0, 872, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 881, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 872, 0, 0, 0, 0,
	0, 0, 0, 0, 879, 0, 881, 867, 868, 869,
	0, 866, 863, 864, 865, 857, 858, 859, 860, 862,
	0, 882, 0, 0, 0, 1542, 0, 0, 0, 0,
	879, 0, 0, 867, 868, 869, 0, 866, 863, 864,
	865, 857, 858, 859, 860, 862, 0, 882, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 879, 0, 0, 867, 868, 869, 0, 866,
	863, 864, 865, 857, 858, 859, 860, 862, 0, 882,
	853, 854, 0, 873, 874, 875, 883, 884, 885, 0,
	0, 0, 0, 0, 0, 0, 876, 0, 0, 0,
	0, 0, 0, 856, 0, 887, 853, 854, 0, 873,
	874, 875, 883, 884, 885, 0, 0, 0, 0, 0,
	0, 0, 876, 0, 855, 0, 1415, 0, 0, 856,
	870, 887, 0, 0, 0, 0, 0, 0, 853, 854,
	0, 873, 874, 875, 883, 884, 885, 0, 0, 0,
	855, 0, 0, 0, 876, 0, 870, 0, 0, 0,
	0, 856, 0, 887, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 861,
	0, 0, 855, 0, 1420, 0, 0, 0, 870, 0,
	0, 0, 0, 0, 0, 0, 0, 880, 888, 0,
	0, 0, 0, 0, 0, 861, 0, 0, 0, 0,
	0, 0, 886, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 878, 880, 888, 0, 0, 0, 871, 0,
	0, 0, 0, 0, 0, 0, 0, 861, 886, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 878, 0,
	877, 0, 0, 0, 871, 880, 888, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	886, 0, 0, 0, 0, 0, 877, 0, 0, 0,
	878, 0, 0, 0, 0, 872, 871, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 881, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 877, 0,
	0, 872, 0, 0, 0, 0, 0, 0, 0, 1380,
	0, 0, 881, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 872, 0, 0, 0, 0, 0, 0,
	0, 0, 879, 0, 881, 867, 868, 869, 0, 866,
	863, 864, 865, 857, 858, 859, 860, 862, 0, 882,
	0, 0, 0, 0, 0, 0, 0, 0, 879, 0,
	0, 867, 868, 869, 0, 866, 863, 864, 865, 857,
	858, 859, 860, 862, 0, 882, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	879, 0, 0, 867, 868, 869, 0, 866, 863, 864,
	865, 857, 858, 859, 860, 862, 0, 882, 853, 854,
	0, 873, 874, 875, 883, 884, 885, 0, 0, 0,
	0, 0, 0, 0, 876, 0, 0, 0, 1373, 0,
	0, 856, 0, 887, 853, 854, 0, 873, 874, 875,
	883, 884, 885, 0, 0, 0, 0, 0, 0, 0,
	876, 0, 855, 0, 0, 0, 0, 856, 870, 887,
	0, 0, 0, 0, 0, 0, 853, 854, 0, 873,
	874, 875, 883, 884, 885, 0, 0, 0, 855, 0,
	0, 0, 876, 0, 870, 0, 0, 0, 0, 856,
	0, 887, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 861, 0, 0,
	855, 0, 0, 0, 0, 0, 870, 0, 0, 0,
	0, 0, 0, 0, 0, 880, 888, 0, 0, 0,
	0, 0, 0, 861, 0, 0, 0, 0, 0, 0,
	886, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	878, 880, 888, 0, 0, 0, 871, 0, 0, 0,
	0, 0, 0, 0, 0, 861, 886, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 878, 0, 877, 0,
	0, 0, 871, 880, 888, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 886, 0,
	0, 0, 0, 0, 877, 0, 0, 0, 878, 0,
	0, 0, 0, 872, 871, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 881, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 872,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	881, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 872, 0, 0, 0, 0, 0, 0, 0, 0,
	879, 0, 881, 867, 868, 869, 0, 866, 863, 864,
	865, 857, 858, 859, 860, 862, 0, 882, 0, 0,
	0, 0, 0, 0, 0, 0, 879, 0, 0, 867,
	868, 869, 0, 866, 863, 864, 865, 857, 858, 859,
	860, 862, 0, 882, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 27, 0, 0, 0, 0, 879, 0,
	0, 867, 868, 869, 49, 866, 863, 864, 865, 857,
	858, 859, 860, 862, 0, 882, 853, 854, 0, 873,
	874, 875, 883, 884, 885, 0, 0, 0, 51, 0,
	0, 0, 0, 0, 28, 0, 56, 0, 0, 856,
	0, 887, 0, 0, 0, 0, 0, 0, 0, 0,
	853, 854, 0, 0, 0, 40, 883, 884, 885, 0,
	855, 0, 35, 0, 0, 52, 870, 0, 0, 39,
	36, 0, 0, 856, 0, 887, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 41, 0, 0, 0,
	0, 0, 37, 0, 855, 0, 0, 0, 0, 0,
	870, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 861, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 880, 888, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 886, 861,
	0, 0, 0, 0, 0, 0, 0, 0, 878, 0,
	0, 0, 0, 0, 871, 38, 0, 880, 888, 0,
	0, 0, 0, 0, 0, 0, 54, 0, 0, 42,
	0, 53, 0, 0, 0, 0, 43, 0, 0, 63,
	0, 0, 878, 0, 46, 48, 0, 0, 871, 0,
	0, 0, 0, 0, 50, 0, 0, 0, 0, 0,
	0, 0, 65, 0, 732, 726, 749, 720, 740, 739,
	0, 872, 722, 721, 0, 55, 0, 751, 750, 0,
	0, 0, 881, 0, 0, 0, 0, 0, 0, 66,
	0, 0, 0, 0, 0, 0, 0, 61, 0, 0,
	0, 0, 0, 62, 0, 872, 0, 0, 745, 0,
	737, 736, 0, 0, 0, 0, 881, 0, 0, 735,
	0, 0, 60, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 734, 0, 879, 0,
	0, 867, 868, 869, 0, 866, 863, 864, 865, 857,
	858, 859, 860, 862, 0, 882, 0, 0, 0, 0,
	0, 0, 0, 727, 728, 729, 730, 0, 748, 0,
	0, 0, 879, 0, 0, 0, 0, 0, 0, 866,
	863, 864, 865, 857, 858, 859, 860, 862, 0, 882,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 738, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 733, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 724, 0,
	0, 0, 0, 0, 0, 0, 731, 725, 0, 0,
	0, 0, 0, 0, 0, 753, 0, 0, 0, 0,
	0, 0, 723, 0, 0, 746, 747, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 752,
}
var sqlPact = [...]int{

	24680, -1000, 27, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 791, 16496, -1000,
	-1000, -1000, -1000, -1000, 711, 657, 292, 4630, 16496, 16496,
	16229, 1186, 1186, 17831, -1000, -1000, 21035, -1000, 1987, 475,
	482, 475, 475, 476, 17831, 559, 634, 105, -1000, 633,
	-15, 20768, 16496, 1253, 24, 15161, 297, 24680, 15962, 20501,
	16496, 307, 31, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1092,
	981, 977, 15161, 20234, 19967, 19700, 19433, -1000, 10584, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 558, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 315, 306,
	-1000, 15695, -1000, 841, -1000, 23, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 840, -1000, 16496, -1000, -1000, 19166,
	18899, 302, 795, -1000, -1000, 525, 379, 1281, -1000, 33,
	-1000, -1000, 1088, -1000, 839, 1086, 1081, 1080, 1071, 1070,
	1069, 376, 850, -1000, 445, 795, -1000, 795, -1000, -1000,
	-1000, 528, 17831, -1000, 15161, -1000, 18632, 16496, 1008, 18365,
	-1000, 633, -1000, -1000, -1000, 874, 1241, 1241, 1241, 1262,
	113, 111, 105, 14, 16496, -1000, 298, 14, 7231, 7231,
	-1000, -1000, 297, -1000, 334, 13287, -1000, 7791, -1000, 670,
	1152, 364, 646, 1151, -126, 718, 607, 12476, 31, -1000,
	-1000, -1000, 9194, 4352, 15161, 16496, 16496, 622, 18098, -1000,
	1150, 103, 1149, -1000, 102, 1148, -1000, 102, 1146, 11,
	-1000, -1000, -1000, -1000, -1000, -1000, 297, 15428, 1302, 24888,
	-1000, 9194, -1000, -1000, 13557, 1779, 13557, -1000, -1000, 1301,
	-1000, 9194, -1000, 22, 20, 953, 975, 11131, 10864, 1202,
	905, -1000, -1000, -1000, 32, 4630, 16496, 1105, 13557, 16496,
	16496, 16496, 16496, 16496, 16496, -1000, 950, -1000, 16496, 16496,
	-1000, 19, 17, -1000, 17831, -1000, 106, -1000, 296, 912,
	120, 17564, 1160, 910, -1000, 874, -1000, 832, 941, 8354,
	9194, 105, -1000, -1000, 105, 105, 9194, -1000, -1000, 16496,
	14, 1299, 16496, 118, -1000, 23672, -1000, -1000, 9194, 9194,
	9194, 9194, 9194, 776, -1000, -1000, -1000, 5488, -1000, -1000,
	31, 293, 331, -1000, -1000, 284, 31, -1000, -1000, -1000,
	-1000, 283, 1435, 401, -1000, -1000, -1000, 9194, 367, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1100, 281,
	279, -1000, -1000, -1000, -1000, 275, 269, 268, 266, 264,
	262, 260, 257, 254, 251, 250, 247, 246, 238, 234,
	746, -1000, 397, -1000, -1000, 397, 397, -1000, 224, 224,
	225, -1000, -1000, -1000, -1000, 224, -1000, -1000, -1000, 365,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 231, 118, -1000,
	-1000, -1000, 16496, 0, -1000, 24394, -1000, -22, 686, -1000,
	14627, 1228, 1227, 1223, 15161, 1274, 1263, 526, 16496, 16496,
	522, -1000, 1066, -4, -1000, -1000, 2870, -1000, -1000, 390,
	92, 1294, 92, 12747, -1000, 16496, 16496, -1000, 16496, -1000,
	-1000, 16496, -1000, 16496, 16496, -1000, 16496, 191, 14093, 677,
	1144, -15, -9, -1000, 1282, -1000, -1000, -1000, -1000, 74,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 225, 746, 224, 224, 224, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 365, -1000, -1000, 397,
	397, 397, -1000, -1000, -10, 24394, 521, 1, 13825, 16496,
	-1000, 29, -1000, -1000, 1065, 469, -17, 739, 978, 761,
	-1000, -1000, -1000, -1000, 13, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1391, -1000, -1000, -1000, -1000,
	1394, 13, -1000, -1000, -1000, -1000, -1000, 1430, -1000, -1000,
	-1000, 4630, -1000, -1000, -1000, 16496, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 739, 978, -1000, -1000,
	15161, 14360, 1291, 1143, 1287, 16496, 837, 909, -1000, -1000,
	353, 1141, -1000, -1000, -1000, -1000, 24394, -1000, 24394, 694,
	990, -1000, 990, 6, -1000, 23378, -1000, 213, -30, -1000,
	390, 7231, 12206, 24888, 24888, 16496, 550, 9194, 9194, 9194,
	9194, 9194, 9194, 9194, 9194, 9194, 9194, 9194, 9194, 9194,
	9194, 9194, 9194, 9194, 9194, 9194, 9194, 9194, 9194, 944,
	9194, 519, 9194, 9194, 9194, 9194, 1093, 786, 194, 4630,
	-1000, 617, 617, 617, 24716, 24716, 182, 18, 22996, 2,
	31, -1000, -1000, 6948, 6648, 31, 4908, -1000, 561, 1385,
	395, 24394, 1112, 1033, 212, 108, 99, 9194, 9194, 9474,
	9474, 9194, 9754, 9194, 9194, 5768, 9194, 9194, 9194, 9194,
	9194, 9194, -1000, 210, -1000, -1000, -1000, -1000, 1383, -1000,
	-1000, 1379, -1000, 546, 543, 1370, 390, 98, 7791, -1000,
	677, 16496, 16496, 16496, -1000, -1000, 906, 17297, 896, 24888,
	16496, -1000, 208, 203, 969, 968, 16496, 16496, 17030, 16763,
	16496, 651, 201, 200, 16496, 715, -1000, 16496, 605, 1062,
	16496, -1000, 9194, 659, 9194, 724, -1000, 11665, 408, 16496,
	706, 117, -1000, -1000, -1000, 351, 16496, -1000, -1000, -1000,
	103, -1000, 102, 102, -1000, -1000, 15161, -1000, -1000, -1000,
	-1000, -1000, -1000, 24888, 333, 332, -1000, 1368, 517, -1000,
	508, 507, 505, -1000, 199, -1000, 9194, 16496, 13825, 1,
	-5, -1000, -1000, 16496, 978, -1000, -1000, -1000, -1000, 647,
	-1000, 732, -1000, 11398, -1000, -1000, -1000, 561, -1000, -24,
	-1000, -1000, -1000, -1000, 97, -31, -18, 24888, -1000, -1000,
	-1000, -1000, -1000, 16496, 274, 16496, -15, 16496, -15, 16496,
	1140, 1401, 16496, -1000, -1000, -1000, 9194, -1000, -1000, -1000,
	-15, 16496, -1000, 1032, -1000, -21, 1000, -133, 14894, -1000,
	3734, -1000, -1000, -1000, 370, 294, 294, 446, 446, 446,
	446, 1897, 1897, 2624, 932, 24750, 24750, 24750, 1877, 893,
	893, 24750, 24750, 24750, 24716, 24426, 1327, 9194, 9194, 504,
	705, 194, 1327, 9194, 1386, 1327, 1327, 1327, -1000, 702,
	-1000, -1000, -1000, 1053, 189, 9754, 9754, -1000, -1000, -1000,
	5488, -1000, -1000, 187, 9194, -1000, 9194, -37, -41, -1000,
	-1000, -45, -1000, -1000, -25, 9194, 9194, 9194, 96, -1000,
	95, 575, -1000, 9194, 792, 184, 181, 9194, -1000, -1000,
	24368, 21600, 94, 1048, -95, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 93, 90, 24078, -95, 88, 21897, -1000, 9754,
	9754, 9754, 5488, 176, 87, 23346, -95, 24046, 8071, 8071,
	8071, 85, 24020, 9194, -95, 21574, 3314, 3193, -47, -51,
	-53, 1362, -55, 84, 369, 362, 83, 1032, -1000, -1000,
	-1000, -1000, 503, 500, 1139, -1000, 888, -1000, 415, -1000,
	667, 9194, 16496, 175, 173, 756, -1000, 1138, 814, 1136,
	814, -1000, -22, 676, 9194, 9194, -1000, 495, -1000, -1000,
	603, -1000, 23028, -1000, 7231, 24394, -1000, 664, 1230, -65,
	-1000, -1000, 7231, 390, 12747, 12206, 7791, -66, -1000, -1000,
	-1000, 677, -1000, 412, 1359, 82, 901, 733, 741, 636,
	1350, 24394, -24, -1000, -24, -1000, -1000, -1000, -1000, -1000,
	-1000, 16496, 1001, -1000, 14360, 171, 16496, 170, -1000, 168,
	-1000, 161, 16496, -1000, 1160, -1000, 80, -1000, 1028, 1258,
	-1000, 12206, 860, 972, 965, 12206, 1154, 812, 812, 812,
	-1000, 14894, 4063, -1000, -1000, 16496, 160, 11935, 79, 1000,
	9194, 1327, 1327, 9194, 9754, 9754, -1000, 1327, -1000, -1000,
	-1000, -1000, 1047, 159, 9194, 24888, 3372, 2248, -67, 6348,
	-26, 22970, -1000, -1000, 331, -1000, 76, 7511, -1000, 23698,
	-16, -16, -1000, 1399, 1156, -1000, 9194, 23730, -1000, 13017,
	391, 817, 22679, 24888, 24888, -1000, 9194, -1000, -1000, 1043,
	9194, -1000, 24888, 24888, 9754, 9754, 9754, 9754, 9754, 9754,
	9754, 9754, 9754, 9754, 9754, 9754, 9754, 9754, 9754, 9754,
	9754, 9754, 9754, 948, 9754, 1372, 1372, 1372, -28, 6048,
	-1000, 1096, 1043, 9194, 9194, 24888, 75, 69, 68, -1000,
	9194, -95, 9194, 9194, 9194, -1000, -1000, -1000, 67, -1000,
	1348, -1000, -1000, -1000, -1000, 1028, 16496, 16496, 16496, 1134,
	-1000, 1074, -1000, 22647, -73, 16496, 16496, -1000, 976, 979,
	462, 16496, -1000, 16496, -1000, 16496, 16496, 16496, -77, -78,
	16496, -1000, -1000, -40, 7231, 190, -15, -40, 659, -1000,
	-32, -1000, 348, -1000, 242, 104, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 64, -1000, -1000, 1018, -1000, 10314,
	157, 16496, 14360, 1280, 10314, 834, -1000, -1000, 388, 9194,
	9194, 1000, 572, 12206, 12206, 2181, 951, 12206, -1000, -1000,
	-1000, -1000, -1000, -1000, 974, 137, 16496, 14894, 496, 1327,
	329, 158, 9194, 24888, 3343, -82, 9194, 9194, -1000, -83,
	-1000, 9194, -1000, -1000, 1398, 9194, 63, 62, 61, -1000,
	-1000, 24394, 9194, -1000, -1000, 21302, 9194, 60, -1000, 54,
	50, 24394, 1096, 24394, -1000, -1000, 601, 601, 1372, 1372,
	1372, 1372, 1588, 1588, 1641, 2133, 1911, 1911, 1911, 592,
	488, 488, 1911, 1911, 1911, 1042, 931, 135, 22240, 9194,
	-84, -1000, -1000, -1000, 24394, 24394, 49, -1000, -1000, -1000,
	-95, 2973, 22621, 22330, -1000, 48, 388, -1000, -1000, -1000,
	16496, -1000, 16496, -1000, 16496, 16496, 1050, 868, -1000, -1000,
	966, 134, 9754, 16496, -1000, 772, -90, -91, 867, -1000,
	854, 9194, -1000, 24888, 814, 814, -1000, 492, 491, -1000,
	-1000, -1000, -40, 1165, 16496, 1212, -1000, -1000, 132, -1000,
	-1000, -1000, 762, -96, -1000, 241, 1239, 9194, -1000, -1000,
	130, 10314, -97, 47, -15, -101, 16496, -1000, 16496, 24394,
	-95, 532, -1000, 2181, -1000, 129, 9194, 12206, -1000, -159,
	-1000, 347, -1000, 16496, -103, -1000, 9194, 9194, 3343, -107,
	-1000, 1327, 1327, -1000, 22298, -1000, 23698, -1000, -1000, -1000,
	24394, 758, -1000, 22272, -1000, -1000, -1000, -1000, 9754, 1039,
	128, 24888, 21981, -1000, -1000, 9194, -1000, -1000, -1000, -1000,
	-1000, 640, -1000, -1000, 16496, 871, -1000, -1000, 9194, 22240,
	127, 1001, 126, -1000, -1000, -1000, 712, -1000, -1000, 24394,
	1240, -1000, -1000, 16496, 16496, 553, -109, 16496, -1000, -1000,
	5208, 16496, 772, 10314, 1225, 31, 16496, 1225, 21949, 4908,
	-115, -1000, 1001, -1000, 772, 125, -64, -1000, 1278, 1397,
	-1000, 16496, 24394, -1000, 974, -1000, 4630, -116, -1000, 1327,
	1327, -1000, -1000, 43, 817, 1256, -1000, 3416, 9754, 24888,
	-117, -1000, 21923, -1000, -1000, 1132, 21632, 928, 16496, -1000,
	16496, 16496, 417, 16496, -1000, -1000, 620, -1000, 390, -1000,
	124, 1001, -1000, -1000, -1000, -1000, 1239, -25, 772, -1000,
	1001, 10314, 16496, 123, -1000, -123, -1000, -1000, -1000, -1000,
	681, 9194, 3416, -128, -1000, -1000, 1115, -1000, 821, 815,
	42, -136, 120, -1000, 9194, -1000, 12747, -1000, 16496, -1000,
	1225, 38, 1001, -1000, -140, -1000, -1000, -1000, 35, 8914,
	8914, -95, -1000, 16496, -1000, 833, 823, 629, -1000, -1000,
	-1000, -1000, -1000, 928, 24394, -121, -142, -1000, -1000, -1000,
	772, -1000, -1000, -1000, 10034, 831, 645, 23320, -1000, -1000,
	-1000, 1180, -1000, 433, 806, 806, 821, -1000, 801, 1001,
	1309, -1000, -1000, -1000, -1000, -1000, -1000, 1328, -1000, -1000,
	964, -1000, -1000, -1000, -1000, -1000, -1000, 8634, -1000, -1000,
	-1000, -1000,
}
var sqlPgo = [...]int{

	0, 1675, 1673, 1288, 125, 1670, 123, 1669, 1667, 1665,
	1664, 1662, 96, 121, 120, 126, 1661, 1660, 90, 1658,
	1656, 1655, 91, 1654, 1653, 1650, 43, 1649, 1648, 1647,
	1646, 1645, 1644, 82, 28, 159, 2382, 134, 1643, 1642,
	1641, 12, 101, 74, 1640, 104, 1639, 1637, 57, 99,
	107, 1014, 36, 1634, 1633, 138, 60, 16, 518, 98,
	143, 131, 114, 1632, 1630, 1628, 48, 1625, 3, 1615,
	1613, 14, 58, 18, 1612, 31, 67, 1610, 1608, 117,
	1607, 59, 100, 106, 24, 112, 994, 1602, 64, 11,
	76, 1600, 20, 1597, 33, 61, 130, 1596, 50, 144,
	65, 27, 56, 102, 1595, 1594, 1592, 81, 1591, 94,
	72, 1590, 1587, 92, 1586, 129, 135, 1583, 1580, 142,
	1576, 1575, 1571, 151, 1568, 1567, 146, 1565, 6, 37,
	54, 8, 109, 108, 22, 1564, 17, 1563, 1714, 824,
	23, 1562, 53, 51, 79, 46, 45, 42, 1558, 1557,
	103, 1554, 1548, 1547, 1545, 1540, 78, 1532, 73, 136,
	35, 52, 88, 19, 77, 83, 113, 140, 105, 1530,
	1528, 116, 1524, 195, 1520, 1512, 1276, 127, 1507, 1503,
	1501, 1099, 1005, 987, 177, 1500, 1498, 613, 349, 1497,
	1494, 110, 1491, 1490, 137, 132, 21, 1489, 111, 1488,
	95, 1487, 0, 49, 30, 1484, 115, 75, 1478, 1475,
	1474, 1473, 25, 2, 9, 5, 7, 4, 32, 26,
	1471, 1469, 124, 85, 1465, 145, 1464, 1462, 1459, 34,
	1455, 15, 1453, 13, 1451, 1450, 10, 1, 139, 1445,
	97, 1444, 1318, 1443, 141, 1442, 1441, 1315, 84,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 4, 4,
	43, 43, 42, 42, 42, 42, 42, 42, 42, 42,
	42, 42, 42, 42, 42, 42, 42, 40, 40, 45,
	45, 45, 47, 47, 44, 44, 39, 39, 5, 5,
	5, 6, 6, 6, 6, 6, 12, 13, 13, 13,
	13, 13, 13, 13, 13, 85, 85, 84, 84, 87,
	87, 14, 14, 15, 15, 15, 15, 15, 15, 15,
	15, 172, 172, 171, 17, 148, 148, 18, 18, 18,
	18, 19, 108, 108, 20, 20, 20, 20, 21, 25,
	238, 238, 238, 242, 242, 243, 243, 244, 244, 244,
	244, 244, 244, 244, 240, 240, 28, 28, 28, 28,
	28, 127, 123, 123, 125, 125, 125, 125, 50, 122,
	122, 122, 122, 124, 124, 124, 124, 195, 194, 194,
	200, 200, 200, 63, 63, 63, 63, 63, 64, 64,
	64, 193, 193, 193, 193, 201, 201, 201, 201, 201,
	201, 65, 65, 65, 199, 199, 29, 29, 29, 29,
	29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
	29, 29, 29, 29, 16, 239, 239, 241, 241, 30,
	30, 9, 9, 10, 10, 66, 66, 67, 67, 130,
	130, 130, 130, 68, 68, 46, 46, 46, 129, 210,
	210, 211, 211, 211, 211, 211, 211, 212, 212, 212,
	212, 212, 212, 212, 208, 208, 209, 206, 206, 207,
	207, 207, 207, 245, 245, 128, 128, 71, 71, 215,
	215, 215, 215, 213, 213, 213, 213, 213, 216, 214,
	217, 217, 217, 217, 217, 159, 159, 159, 32, 11,
	8, 8, 112, 112, 75, 75, 163, 163, 163, 57,
	57, 41, 41, 41, 24, 24, 24, 24, 24, 24,
	24, 24, 24, 113, 113, 114, 114, 23, 27, 31,
	31, 31, 31, 31, 247, 247, 54, 54, 54, 54,
	55, 55, 126, 126, 126, 126, 126, 49, 7, 7,
	48, 48, 22, 22, 22, 22, 22, 60, 60, 119,
	119, 119, 121, 121, 120, 120, 120, 98, 98, 33,
	80, 80, 89, 89, 90, 90, 169, 91, 91, 26,
	26, 36, 36, 34, 34, 34, 34, 34, 34, 35,
	35, 37, 37, 37, 37, 37, 37, 37, 223, 223,
	223, 225, 225, 222, 224, 224, 246, 246, 99, 99,
	99, 70, 69, 69, 73, 73, 72, 74, 74, 162,
	96, 96, 96, 96, 115, 116, 116, 117, 117, 118,
	118, 95, 95, 145, 145, 38, 38, 79, 79, 81,
	81, 136, 136, 137, 137, 135, 135, 135, 164, 164,
	164, 164, 165, 165, 165, 165, 165, 165, 160, 160,
	160, 160, 161, 161, 170, 170, 102, 102, 102, 102,
	100, 100, 101, 101, 166, 166, 166, 166, 97, 97,
	167, 167, 167, 131, 131, 173, 173, 173, 78, 78,
	78, 174, 174, 174, 174, 174, 174, 174, 174, 174,
	174, 174, 174, 174, 175, 175, 175, 175, 177, 177,
	177, 176, 176, 176, 176, 176, 176, 176, 176, 176,
	176, 176, 176, 176, 176, 178, 178, 185, 185, 186,
	186, 187, 188, 179, 179, 180, 180, 181, 182, 189,
	189, 189, 189, 191, 191, 183, 183, 183, 183, 183,
	184, 109, 109, 109, 109, 109, 109, 109, 109, 109,
	109, 109, 109, 109, 109, 110, 110, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 218, 218,
	218, 218, 218, 218, 218, 220, 220, 221, 221, 219,
	219, 219, 219, 219, 219, 219, 219, 219, 219, 219,
	219, 219, 219, 219, 219, 219, 219, 219, 219, 219,
	219, 219, 219, 219, 219, 219, 226, 226, 227, 227,
	229, 229, 230, 230, 231, 232, 232, 232, 233, 234,
	234, 228, 228, 235, 235, 235, 236, 236, 237, 237,
	237, 237, 237, 150, 150, 150, 151, 151, 152, 86,
	86, 147, 147, 146, 146, 146, 149, 149, 103, 103,
	190, 190, 190, 190, 190, 190, 190, 104, 104, 104,
	111, 105, 105, 106, 106, 106, 106, 106, 106, 142,
	143, 107, 107, 107, 144, 144, 153, 157, 157, 156,
	155, 155, 154, 154, 134, 134, 134, 134, 133, 132,
	92, 92, 248, 248, 158, 158, 93, 93, 94, 88,
	88, 168, 168, 168, 168, 82, 82, 62, 62, 83,
	83, 58, 58, 61, 59, 59, 59, 59, 76, 76,
	77, 77, 56, 56, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 192, 192, 192, 51, 51,
	51, 52, 52, 53, 53, 197, 197, 197, 198, 198,
	198, 198, 196, 196, 196, 196, 196, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
	203, 203, 203, 203, 205, 205, 205, 205, 205, 205,
	205, 205, 205, 205, 205, 205, 205, 205, 205, 205,
	205, 205, 205, 205, 205, 205, 205, 205, 205, 205,
	205, 205, 205, 205, 205, 205, 205, 205, 205, 205,
	205, 205, 205, 205, 205, 205, 205, 205, 205, 205,
	205, 205, 205, 205, 205, 205, 205, 205, 205, 205,
	205, 205, 205, 205, 205, 205, 205, 205, 205, 205,
	205, 205, 205, 205, 205, 205, 205, 205, 205, 205,
	205, 205, 205, 205,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 4, 6,
	1, 3, 2, 5, 3, 6, 4, 6, 6, 6,
	4, 8, 3, 3, 3, 6, 4, 3, 2, 1,
	1, 0, 2, 0, 2, 0, 2, 0, 4, 6,
	7, 1, 1, 1, 1, 1, 6, 3, 5, 4,
	6, 4, 6, 4, 6, 1, 3, 1, 2, 2,
	3, 2, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 5, 3, 0, 1, 1, 1,
	1, 3, 3, 0, 2, 3, 2, 3, 6, 6,
	1, 2, 2, 1, 1, 1, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 2, 3, 6, 3,
	1, 5, 2, 1, 1, 1, 3, 3, 2, 3,
	3, 3, 3, 1, 3, 3, 2, 1, 1, 3,
	1, 1, 1, 2, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 1,
	1, 1, 1, 0, 1, 1, 2, 2, 4, 2,
	4, 4, 4, 4, 4, 4, 4, 2, 3, 4,
	3, 2, 4, 4, 2, 2, 0, 2, 0, 8,
	8, 7, 10, 6, 9, 1, 0, 1, 3, 1,
	1, 1, 1, 8, 0, 1, 1, 0, 3, 2,
	0, 3, 1, 2, 2, 3, 6, 2, 1, 1,
	2, 4, 2, 5, 7, 8, 5, 3, 1, 4,
	6, 5, 10, 1, 1, 4, 0, 3, 0, 2,
	2, 2, 0, 1, 1, 2, 2, 0, 3, 3,
	2, 1, 1, 2, 2, 1, 2, 1, 4, 6,
	11, 14, 1, 0, 1, 3, 3, 3, 5, 2,
	0, 1, 1, 0, 6, 6, 8, 6, 8, 8,
	10, 8, 10, 1, 0, 2, 0, 2, 2, 3,
	3, 2, 2, 2, 1, 0, 1, 3, 2, 0,
	2, 1, 1, 1, 3, 3, 0, 3, 4, 7,
	3, 0, 6, 6, 8, 5, 7, 1, 3, 1,
	4, 2, 8, 5, 4, 3, 0, 2, 0, 8,
	2, 0, 1, 3, 1, 1, 3, 5, 5, 1,
	1, 3, 3, 1, 2, 3, 2, 3, 4, 1,
	1, 8, 8, 1, 2, 4, 4, 4, 2, 2,
	3, 1, 3, 6, 1, 0, 1, 0, 1, 1,
	0, 1, 1, 0, 1, 0, 3, 1, 3, 2,
	2, 2, 1, 1, 2, 2, 3, 1, 1, 1,
	1, 3, 0, 2, 0, 2, 3, 3, 0, 1,
	3, 3, 1, 1, 3, 2, 4, 0, 3, 2,
	1, 4, 3, 4, 5, 4, 5, 4, 5, 2,
	4, 1, 1, 0, 5, 0, 2, 2, 2, 1,
	1, 0, 4, 2, 1, 2, 2, 4, 1, 3,
	1, 2, 3, 2, 0, 2, 5, 2, 3, 4,
	0, 1, 1, 1, 1, 2, 4, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 5,
	0, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	2, 2, 2, 1, 1, 3, 0, 1, 1, 1,
	1, 5, 2, 1, 1, 1, 1, 4, 1, 2,
	2, 1, 1, 1, 0, 1, 1, 4, 1, 4,
	1, 1, 1, 1, 1, 1, 1, 3, 3, 3,
	3, 3, 3, 3, 0, 1, 4, 1, 3, 3,
	3, 5, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 2, 2, 3, 4,
	3, 4, 4, 5, 3, 3, 3, 3, 3, 4,
	3, 3, 4, 3, 4, 3, 4, 5, 6, 6,
	7, 6, 7, 6, 7, 3, 4, 1, 3, 3,
	2, 2, 2, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 5, 6, 6, 7, 1, 1, 1, 3,
	1, 1, 1, 2, 2, 2, 1, 1, 3, 5,
	6, 8, 6, 6, 4, 4, 1, 1, 1, 5,
	1, 3, 1, 3, 1, 1, 1, 1, 6, 6,
	4, 4, 4, 4, 4, 6, 5, 5, 5, 4,
	8, 6, 6, 4, 4, 4, 5, 0, 5, 0,
	2, 0, 1, 3, 3, 2, 2, 0, 6, 1,
	0, 3, 0, 2, 2, 0, 1, 4, 2, 2,
	2, 2, 2, 4, 3, 5, 4, 3, 5, 1,
	3, 1, 3, 3, 3, 2, 1, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 4, 3, 1,
	2, 3, 0, 3, 3, 2, 2, 1, 0, 2,
	2, 3, 2, 1, 1, 3, 5, 1, 2, 4,
	2, 0, 1, 0, 1, 1, 3, 5, 2, 2,
	1, 2, 1, 0, 1, 1, 1, 3, 3, 1,
	3, 3, 2, 1, 1, 1, 3, 1, 3, 1,
	3, 1, 2, 3, 1, 1, 2, 2, 1, 3,
	3, 0, 1, 2, 1, 1, 1, 1, 6, 2,
	3, 5, 1, 1, 1, 1, 2, 2, 1, 1,
	1, 1, 0, 3, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -6, -12, -13, -14,
	-16, -17, -19, -20, -21, -22, -24, -25, -27, -26,
	-28, -29, -30, -31, -23, -32, -33, 23, 64, -7,
	-8, -9, -10, -11, -224, 92, 100, 122, 195, 99,
	85, 116, 209, 216, -34, -36, 224, -127, 225, 34,
	234, 58, 95, 211, 206, 255, 66, -223, -37, -35,
	302, 277, 283, 219, -38, 242, 269, 305, 242, 130,
	78, -58, -51, 4, -202, -204, 20, 21, 23, 33,
	34, 39, 43, 46, 57, 58, 59, 61, 63, 64,
	65, 68, 69, 76, 77, 78, 79, 81, 85, 87,
	91, 92, 94, 99, 100, 106, 107, 110, 112, 117,
	122, 123, 124, 131, 134, 129, 143, 145, 146, 151,
	154, 157, 159, 160, 161, 162, 163, 165, 166, 168,
	170, 167, 173, 175, 176, 182, 185, 188, 189, 190,
	193, 195, 197, 198, 199, 201, 202, 206, 204, 205,
	207, 209, 211, 212, 214, 216, 217, 218, 221, 222,
	224, 225, 227, 230, 233, 234, 235, 238, 236, 232,
	241, 243, 244, 251, 255, 256, 257, 258, 261, 262,
	263, 266, 267, 268, 273, 278, 279, 280, 281, 28,
	35, 36, 37, 38, 40, 41, 44, 45, 49, 50,
	51, 53, 80, 82, 83, 98, 101, 102, 108, 118,
	120, 125, 126, 135, 136, 137, 138, 140, 149, 172,
	174, 183, 187, 192, 194, 200, 213, 220, 228, 229,
	237, 239, 246, 247, 248, 252, 253, 269, 270, 87,
	134, 263, 262, 78, 130, 242, 272, -15, 302, -26,
	-6, -13, -4, -22, -33, -12, -14, 23, -196, 4,
	-202, -204, -203, -205, 55, 67, 115, 133, 127, 142,
	144, 150, 152, 164, 184, 186, 210, 226, 22, 24,
	25, 26, 27, 29, 30, 31, 32, 42, 47, 48,
	52, 54, 56, 62, 66, 70, 71, 72, 73, 74,
	75, 84, 86, 88, 89, 90, 93, 95, 97, 103,
	104, 105, 111, 113, 114, 116, 119, 121, 128, 130,
	132, 139, 141, 147, 148, 153, 155, 156, 169, 171,
	177, 178, 179, 180, 181, 191, 196, 203, 208, 219,
	223, 231, 240, 242, 245, 249, 250, 254, 259, 260,
	264, 265, 271, 272, 274, 275, 276, 277, -51, -51,
	-51, 195, 22, -242, 22, -243, -244, 66, 92, 116,
	219, 134, 87, 262, -242, -55, 216, -51, -123, 154,
	222, 213, 251, -124, -122, -195, 246, 163, -84, -51,
	4, 78, 57, 79, 117, 130, 131, 62, 63, 146,
	243, 246, 251, 22, 66, -247, 251, 251, -247, -247,
	-54, 251, 249, -55, -246, 242, 242, 272, -112, 78,
	260, -35, -37, -36, -72, -73, 259, 139, 97, 181,
	-34, -36, -223, -225, 201, -222, -51, -225, -69, -70,
	22, 89, 306, -166, -58, 179, -94, 302, -3, -166,
	125, -58, -61, 125, -58, -51, 114, 302, -92, -134,
	-133, -132, 300, 304, 114, 141, 141, -167, -166, -51,
	125, -62, 125, -61, -85, 125, -84, -85, 125, -172,
	-171, -198, 4, -202, -204, -203, 269, 242, -148, 302,
	-108, 302, -51, 22, 178, 306, 178, -51, -123, 51,
	-123, 302, -125, -49, -50, 143, 197, 249, 287, 114,
	281, -65, 5, 84, -87, 304, 114, -239, 178, 114,
	114, 114, 114, 114, 114, 281, 143, 197, 242, 272,
	-126, -49, -50, -126, 249, -55, -97, -166, -84, 125,
	-84, 130, -51, 125, -72, -73, -96, -115, -116, 153,
	177, -99, 22, 89, -99, -99, 43, 303, 303, 306,
	-225, -77, 302, -88, -168, -138, 295, -140, 293, 294,
	299, 169, 282, -150, -58, -141, 9, 302, -153, -220,
	-36, 98, 29, -151, -152, 213, -51, 7, 8, 5,
	6, -56, -175, -184, 254, 103, 171, 47, -218, -219,
	4, -202, -197, -176, -186, -180, -183, 140, 55, 71,
	74, 72, 75, 223, 264, 48, 28, 101, 102, 187,
	192, 239, 252, 253, 125, 172, 126, 53, 118, 149,
	91, 36, 38, 40, 41, 49, 50, 80, 82, 83,
	108, 135, 136, 137, 138, 174, 200, 228, 237, 247,
	248, 270, -203, -187, -188, -181, -182, -189, -88, -94,
	295, -58, 302, -93, -158, -138, 84, -43, 204, -42,
	21, 23, 92, 267, 98, 232, 232, 204, 98, 307,
	204, 235, 303, -82, -58, -134, -138, -196, 295, -167,
	-60, -58, -60, 224, -51, 30, 98, -45, 306, 46,
	207, 98, -45, 306, 98, -45, 98, 303, 306, -166,
	125, 30, -147, -173, -174, -176, -185, -179, -183, -184,
	39, 45, 44, 244, 220, 229, 37, 135, 136, 137,
	138, 228, 36, 200, 108, 91, 83, 82, 174, 41,
	40, -187, -188, -181, -182, 80, 247, 248, 140, 38,
	50, 49, 270, 237, -86, -138, -238, -83, 242, 78,
	-59, -51, 295, -244, -238, 30, -86, 306, 306, 151,
	-64, 157, 168, 123, -194, 84, -200, -193, -159, 9,
	254, 103, 178, -199, 8, 294, -192, -198, 5, 7,
	293, -194, 84, 69, -201, 5, 4, -184, -159, 84,
	154, 304, -196, -195, -241, 111, -238, -195, -195, -195,
	-195, -195, -51, 151, -195, -195, 306, 306, -55, -45,
	306, 302, -71, 169, -71, 302, -52, 125, -51, -48,
	94, 169, -96, -116, -115, -117, -138, 22, -138, -140,
	-35, -35, -35, -74, -162, -138, -222, 30, -76, -51,
	-79, 306, 114, 10, 11, 54, 33, 293, 294, 295,
	296, 109, 297, 290, 291, 292, 289, 285, 286, 287,
	60, 158, 215, 13, 14, 15, 26, 180, 152, 282,
	127, 226, 299, 16, 17, 18, 142, 35, 128, 30,
	4, -138, -138, -138, -138, -138, 186, -36, -138, -86,
	-92, -36, -146, 300, 302, -92, 302, 5, 5, 302,
	-154, -138, -226, 278, 111, 302, 302, 302, 302, 302,
	302, 302, 302, 302, 302, 302, 302, 302, 302, 302,
	302, 302, 194, -191, 273, -191, -191, -177, 302, -177,
	-178, 302, -177, 279, 283, 302, -79, -58, 306, 303,
	306, 249, -113, 62, 56, -129, 125, 56, -206, -51,
	62, -207, 52, 260, 196, 113, -113, 62, -113, 62,
	62, -166, 33, 33, 249, -61, -51, 249, 114, 303,
	306, 301, 310, -131, 275, -119, -26, 302, 84, 30,
	-119, -89, -90, -169, -91, -58, 302, -51, -51, -61,
	-62, -84, -85, -85, -15, -171, 98, -18, -26, -22,
	-33, -12, 303, 306, -78, 29, -109, 302, 280, 161,
	81, 124, 160, -110, 218, 303, 306, 249, 306, -83,
	-76, -133, -132, 114, 251, 303, -50, -49, -63, 199,
	230, 205, 221, 306, 8, 7, 7, 5, -196, -240,
	-51, -50, -49, -166, -66, -76, -67, -51, -130, -129,
	-208, -209, -206, 130, 260, 104, 30, 98, 30, 178,
	169, 287, 98, -118, 213, 214, 306, -41, 31, 88,
	302, 306, 303, -131, -168, -81, -164, -166, -36, -165,
	302, -173, -173, -84, 246, -138, -138, -138, -138, -138,
	-138, -138, -138, -138, -138, -138, -138, -138, -138, -138,
	-138, -138, -138, -138, -138, -138, -138, 152, 127, 226,
	35, 128, -138, 249, -138, -138, -138, -138, 171, 169,
	254, 103, 261, 89, 175, -248, 240, 32, -144, -36,
	302, -196, -150, 213, 302, 303, 306, -86, -149, 301,
	-146, -86, 303, 303, -86, 271, 22, 89, 295, -109,
	7, -157, -156, 274, -227, 106, 119, 302, 303, 303,
	-138, -138, -103, -190, -86, 4, 280, 161, 81, 124,
	160, 218, -103, -104, -138, -86, -105, -139, -140, 293,
	294, 299, 302, 213, -106, -138, -86, -138, 42, 148,
	250, -107, -138, 114, -86, -138, -138, -138, -86, -86,
	-86, 302, 7, 7, 246, 246, 7, -131, 303, -158,
	-42, -58, -51, -51, 169, -129, 125, -47, 169, -173,
	-51, 302, 302, 145, 145, -51, -51, 125, -51, 125,
	-51, -51, -43, 204, 302, 302, -51, 204, -51, 235,
	114, -58, -138, -98, 208, -138, -98, -121, 178, -82,
	269, -51, 208, -80, 306, 114, 287, -82, -45, -45,
	-45, -166, -173, 300, 300, 7, 249, 249, 249, 249,
	302, -138, -240, -59, -240, -49, 258, 59, 199, -200,
	-109, 306, 303, 303, 306, -52, 130, -52, -26, -84,
	-26, -58, 98, 5, -51, -162, -18, -51, -95, 119,
	-170, 306, 284, 67, -102, 144, 164, 115, 150, 210,
	133, -135, 307, -161, -160, 30, -51, -36, -165, -164,
	281, -138, -138, 249, -248, 240, -144, -138, 171, 254,
	103, 261, 89, 175, 114, 302, -139, -139, -86, 302,
	-86, -138, 301, 301, 306, 303, -73, 306, -72, -138,
	-86, -86, 303, 303, -155, -156, 93, -138, -232, 185,
	302, 302, -138, 30, 306, 303, 114, 303, 303, -111,
	191, 303, 10, 11, 293, 294, 295, 296, 109, 297,
	290, 291, 292, 289, 285, 286, 287, 60, 158, 215,
	13, 14, 15, 142, 128, -139, -139, -139, -86, 302,
	303, -142, -143, 114, 111, 30, -107, -107, -107, 303,
	114, -86, 306, 306, 306, 303, 303, 303, 7, 303,
	306, 303, 281, 281, 303, -95, 249, 249, 98, 169,
	266, -210, -207, -138, -76, 302, 302, -40, 92, 224,
	-114, 98, -45, 98, -45, 249, -113, 62, -86, -86,
	249, 235, 301, -88, 208, 61, 303, -88, -131, -90,
	-81, -158, 303, 301, 7, 7, 303, 161, 124, 160,
	-110, 160, -110, -110, 7, -51, -68, 129, -130, 302,
	-52, 302, 302, -71, 302, -51, -48, 303, -145, 121,
	43, -164, 175, 144, 144, -164, -102, 144, -100, 184,
	-100, -100, -161, -196, 308, -51, 302, 303, -138, -138,
	-139, -139, 114, 302, -138, -147, 26, 26, 303, -86,
	303, 306, 303, -146, 303, 271, -73, -73, -73, 5,
	95, -138, 245, -233, -51, 302, 275, -72, 303, -173,
	-173, -138, -142, -138, -173, -173, -139, -139, -139, -139,
	-139, -139, -139, -139, -139, -139, -139, -139, -139, -139,
	-139, -139, -139, -139, -139, 89, 169, 175, -139, 306,
	-86, 303, -143, -142, -138, -138, -173, 303, 303, 303,
	-86, -138, -138, -138, 303, 7, -145, -51, -51, -129,
	98, -211, 62, -212, 54, 104, 66, 169, 171, 260,
	196, 52, 84, 203, 303, 303, -76, -76, 169, 84,
	169, 84, 77, 256, -51, -51, -58, -51, -51, 303,
	303, -51, -88, -120, 302, 178, -26, -98, 287, 301,
	301, 303, 128, -75, -163, -51, -221, 302, -218, -219,
	-56, 302, -76, -66, 30, -75, 178, -229, 276, -138,
	-86, 241, -164, -164, -101, 265, 178, 144, -164, -137,
	-136, 112, 167, 302, -76, -160, 26, 26, -138, -147,
	303, -138, -138, 303, -138, 5, -138, 303, 303, 303,
	-138, -234, -51, -138, 303, 303, 303, -143, 114, 89,
	175, 302, -138, 303, 303, 306, 303, 303, 303, -229,
	-129, -51, -84, -51, 104, 125, 171, 145, 302, -139,
	-58, -128, -245, 65, 238, 303, 303, 171, 171, -138,
	-173, -45, -45, 249, 249, 90, -76, 62, -94, -36,
	302, 188, 303, 306, -57, -92, 54, -57, -138, 302,
	-75, 303, 303, -26, 303, -58, -230, -231, -51, 246,
	-101, 302, -138, -164, 306, 309, 287, -76, 303, -138,
	-138, 303, 303, -73, -228, 190, 303, -139, 114, 302,
	-147, 303, -138, -212, -52, 169, -138, -53, 302, -68,
	302, 203, -44, 54, -51, -51, 262, 170, 303, -51,
	-51, -128, -163, -41, -84, -41, 303, -86, 303, -68,
	-128, 302, 306, 30, 5, -76, -136, -196, 303, 303,
	-73, 43, -139, -147, 303, 303, 98, 303, -215, 159,
	-51, -76, -58, -39, 265, -84, 224, -131, 302, -68,
	-57, -73, -128, -68, -75, -231, -233, 303, -235, 198,
	214, -86, 303, 104, -213, -216, -214, 178, 115, 189,
	227, 303, 303, -71, -138, -89, -76, -41, 303, -68,
	303, 303, -236, -237, 35, 257, 69, -138, -236, -51,
	-214, 178, -216, 178, 262, 87, -215, -131, 303, -128,
	-237, 193, 110, 213, 193, 110, -217, 166, 207, 46,
	224, -217, -213, -46, 46, 207, -68, 26, 20, 171,
	84, -237,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 0, 0, 61,
	62, 63, 64, 65, 0, 0, 375, 0, 0, 0,
	0, 0, 0, 0, 349, -2, 0, 130, 0, 305,
	0, 305, 305, 309, 0, 377, 273, 374, -2, 385,
	0, 0, 0, 383, 363, 0, 0, -2, 0, 0,
	0, 0, 781, 808, 809, 810, 827, 828, 829, 830,
	831, 832, 833, 834, 835, 836, 837, 838, 839, 840,
	841, 842, 843, 844, 845, 846, 847, 848, 849, 850,
	851, 852, 853, 854, 855, 856, 857, 858, 859, 860,
	861, 862, 863, 864, 865, 866, 867, 868, 869, 870,
	871, 872, 873, 874, 875, 876, 877, 878, 879, 880,
	881, 882, 883, 884, 885, 886, 887, 888, 889, 890,
	891, 892, 893, 894, 895, 896, 897, 898, 899, 900,
	901, 902, 903, 904, 905, 906, 907, 908, 909, 910,
	911, 912, 913, 914, 915, 916, 917, 918, 919, 920,
	921, 922, 923, 924, 925, 926, 927, 928, 929, 930,
	931, 932, 933, 934, 935, 936, 937, 938, 939, 940,
	941, 942, 943, 944, 945, 946, 947, 948, 949, 950,
	951, 952, 953, 954, 955, 956, 957, 958, 959, 960,
	961, 962, 963, 964, 965, 966, 967, 968, 969, 970,
	971, 972, 973, 974, 975, 976, 977, 978, 979, 980,
	981, 982, 983, 984, 985, 986, 987, 988, 989, 0,
	0, 0, 0, 0, 0, 0, 0, 81, 0, 83,
	84, 85, 86, 87, 88, 89, 90, 0, 194, 822,
	823, 824, 825, 826, 990, 991, 992, 993, 994, 995,
	996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005,
	1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015,
	1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025,
	1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035,
	1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045,
	1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055,
	1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065,
	1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075,
	1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 96, 103,
	104, 892, 106, 0, 113, 114, 115, 117, 118, 119,
	120, 121, 122, 123, 0, 298, 906, 311, 126, 871,
	910, 977, 924, 133, 143, 0, 983, -2, 147, 77,
	176, 177, 0, 179, 196, 0, 0, 0, 0, 0,
	187, 0, 0, 191, 0, 316, 304, 316, 301, 302,
	303, 306, 0, 297, 0, 376, 0, 0, 0, 0,
	272, -2, 359, 360, -2, 0, 380, 380, 380, 0,
	0, 360, 0, 368, 896, 371, 791, 369, 0, 0,
	382, 381, 0, 364, 444, 0, 405, 0, 2, 0,
	962, 444, 0, 962, 0, 0, 0, 0, 782, 760,
	754, 755, 0, 0, 0, 0, 0, 0, 450, 67,
	962, 51, 962, 777, 51, 962, 75, 51, 962, 0,
	91, 93, 818, 819, 820, 821, 988, 0, 0, 0,
	101, 0, 105, 107, 0, 0, 0, 310, 127, 951,
	129, 0, 132, 134, 135, 0, 0, 0, 0, 0,
	0, 146, 171, 172, 78, 0, 0, 198, 0, 0,
	0, 0, 0, 0, 0, 188, 0, 190, 0, 0,
	299, 312, 313, 300, 0, 308, 51, 448, 248, 962,
	248, 812, 321, 962, -2, 0, 355, 392, 393, 0,
	0, 0, 378, 379, 0, 0, 0, 351, 352, 0,
	370, 0, 0, 408, 769, 773, 774, 537, 0, 0,
	0, 0, 0, 0, 626, 627, 628, 0, 630, 631,
	632, 956, 0, 636, 637, 977, 781, 794, 795, 796,
	797, 0, 0, 0, 802, 803, 804, 753, 677, 646,
	-2, -2, 792, 474, 475, 476, 477, -2, 990, 650,
	652, 654, 655, 656, 657, 0, 940, 957, 958, 973,
	974, 982, 986, 987, 962, 970, 963, 952, 960, 969,
	851, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, 817, 499, 500, 505, 506, 508, 408, 406,
	445, 446, 0, 0, 766, 764, 765, 28, 294, 30,
	0, 294, 294, 0, 0, 0, 0, 0, 0, 0,
	0, 58, 0, 0, 775, 761, 0, 758, 759, 454,
	0, 327, 0, 0, 451, 0, 0, 69, 0, 49,
	50, 0, 71, 0, 0, 73, 0, 375, 0, 0,
	962, 375, 0, 711, 460, 461, 462, 463, 464, 534,
	467, 468, 469, 470, 471, 472, 473, 481, 482, 483,
	484, 485, 486, 487, 496, 0, 480, 480, 480, 493,
	494, 497, 498, 503, 504, 515, 516, 518, 520, 514,
	514, 514, 511, 512, 0, 709, 0, 110, 0, 846,
	779, 784, 785, 116, 0, 0, 0, 0, 0, 0,
	138, 158, 159, 160, 139, 141, 148, 150, 151, 152,
	161, 162, 163, 164, 265, 0, 267, 174, 175, 805,
	0, 140, 142, 144, 145, 165, 166, 0, 168, 169,
	170, 0, 79, 178, 180, 0, 195, 181, 182, 183,
	184, 185, 186, 189, 192, 193, 0, 0, 307, 268,
	0, 206, 0, 0, 0, 0, 0, 962, 811, 318,
	0, 0, 358, 390, 391, 394, 397, 398, 395, 537,
	365, 366, 367, 386, 387, 283, 372, 0, 0, 788,
	454, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 763, 0, 0,
	772, 542, 543, 544, 566, 567, 0, -2, 709, 0,
	633, 634, 635, 0, 0, -2, 0, 799, 534, 0,
	0, 752, 679, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 732, 738, 0, 0, 0, 0, 0, 0,
	0, 0, 489, 502, 513, 510, 509, 491, 0, 490,
	488, 0, 492, 0, 0, 0, 454, 0, 0, 768,
	0, 0, 0, 0, 293, 32, 962, 0, 53, 0,
	0, 238, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 783, 0, 0, 0,
	0, 756, 0, 338, 0, 338, 329, 0, 0, 0,
	325, 341, 342, 344, 345, 0, 0, 452, 68, 778,
	51, 76, 51, 51, 82, 92, 0, 94, 97, 98,
	99, 100, 95, 0, 455, 457, 465, 0, 521, 522,
	523, 524, 525, 526, 535, 102, 0, 0, 0, 111,
	112, 786, 787, 0, 0, 131, 136, 137, 317, 0,
	155, 0, 157, 0, 266, 807, 806, 534, 80, 197,
	124, 314, 315, 449, 0, 0, 205, 788, 207, 209,
	210, 211, 212, 812, 0, 812, 0, 0, 0, 0,
	0, 0, 0, 396, 399, 400, 0, 389, 281, 282,
	375, 0, 790, 402, 770, 435, 409, 417, 433, 420,
	0, 538, 539, 540, 0, 545, 546, 547, 548, 549,
	550, 551, 552, 553, 554, -2, -2, -2, 558, 559,
	560, -2, -2, -2, 564, 565, -2, 0, 0, 0,
	763, 0, -2, 0, 574, -2, -2, -2, 578, 0,
	581, 583, 585, 0, 0, 0, 0, 762, 595, 744,
	0, 771, 580, 0, 0, 629, 0, 0, 0, 715,
	716, 0, -2, 638, 385, 0, 0, 0, 0, 800,
	0, 751, 747, 0, 687, 0, 0, 0, 651, 653,
	0, 0, 0, 0, 719, -2, -2, -2, -2, -2,
	-2, -2, 0, 0, 709, 729, 0, 0, 597, 0,
	0, 0, 0, 977, 0, 709, 737, 0, 0, 0,
	0, 0, 709, 0, 743, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 402, 447, 767,
	31, 285, 0, 0, 0, 34, 962, 42, 0, 220,
	0, 0, 0, 0, 0, 296, 43, 962, 51, 962,
	51, 44, 29, 294, 0, 0, 287, 0, 284, 59,
	0, 776, 0, 66, 0, 453, 322, 323, 0, 0,
	331, 328, 0, 454, 0, 0, 0, 0, 70, 72,
	74, 0, 712, 0, 0, 0, 0, 0, 0, 0,
	0, 710, 108, 780, 109, 128, 153, 154, 156, 149,
	167, 0, 214, 247, 0, 0, 812, 0, 203, 248,
	269, 0, 0, 320, 321, 388, 0, 789, 404, 0,
	407, 0, 0, 0, 0, 0, 0, 441, 441, 441,
	439, 433, 0, 419, 432, 0, 431, -2, 420, 0,
	0, -2, -2, 0, 0, 0, 596, -2, 579, 582,
	584, 586, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 710, 713, 714, 0, -2, 0, 0, 384, 385,
	385, 385, 644, 0, 0, 748, 0, 0, 645, 0,
	0, 0, 0, 0, 0, 660, 0, 661, 662, 0,
	0, 663, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 600, 601, 602, 0, 0,
	664, 735, 736, 0, 0, 0, 0, 0, 0, 669,
	0, 742, 0, 0, 0, 673, 674, 675, 0, 478,
	0, 495, 517, 519, 507, 404, 0, 0, 0, 0,
	52, 218, 237, 0, 0, 0, 0, 36, 0, 0,
	0, 0, 40, 0, 46, 0, 0, 0, 0, 0,
	0, 60, 757, 337, 0, 336, 0, 326, 338, 343,
	340, 346, 0, 458, 0, 0, 466, 527, 528, 529,
	530, 531, 532, 533, 0, 125, 201, 0, 208, 0,
	0, 0, 206, 0, 0, 0, 319, 373, 681, 0,
	0, 410, 0, 0, 0, 0, 0, 0, 436, 440,
	437, 438, 418, 415, 0, 429, 0, 422, 541, -2,
	0, 0, 0, 0, -2, 0, 0, 0, 745, 0,
	704, 0, -2, 717, 639, 0, 0, 0, 0, 801,
	746, 750, 0, 685, 686, 690, 0, 0, 649, 0,
	0, 718, 728, 730, 598, 599, 603, 604, 605, 606,
	607, 608, 609, 610, 611, 612, -2, -2, -2, 616,
	617, 618, -2, -2, -2, 0, 0, 0, 731, 0,
	0, 707, 733, 734, 739, 740, 0, 666, 667, 668,
	741, 0, 0, 0, 501, 0, 681, 289, 291, 33,
	0, 219, 0, 222, 0, 0, 0, 0, 228, 229,
	0, 0, 0, 0, 239, 246, 0, 0, 0, 48,
	0, 0, 295, 0, 51, 51, 286, 0, 0, 199,
	200, 288, 324, 0, 0, 0, 330, 339, 0, 459,
	456, 536, 0, 0, 274, 280, 280, 0, 647, 648,
	0, 0, 0, 0, 0, 0, 0, 361, 0, 403,
	401, 0, 423, 0, 425, 0, 0, 0, 427, 0,
	413, 0, 412, 0, 0, 421, 0, 0, -2, 0,
	589, -2, -2, 703, 710, 798, 385, 640, 642, 643,
	749, 692, 689, 0, 676, 658, 659, 727, 0, 0,
	0, 0, 710, 706, 665, 0, 671, 672, 479, 362,
	35, 0, 223, 224, 812, 0, 227, 230, 0, 232,
	814, 214, 0, 243, 244, 241, 0, 37, 38, 47,
	55, 39, 45, 0, 0, 0, 0, 0, 347, 348,
	0, 0, 246, 0, 283, 793, 0, 283, 0, 0,
	0, 236, 214, 204, 246, 0, 680, 682, 0, 0,
	424, 0, 443, 426, 0, 416, 0, 0, 430, -2,
	-2, 590, 705, 0, 385, 0, 678, -2, 0, 0,
	0, 708, 0, 221, 225, 0, 0, 252, 0, 240,
	0, 0, 57, 0, 290, 292, 0, 333, 454, 335,
	0, 214, 275, 276, 279, 277, 280, 385, 246, 202,
	214, 0, 0, 0, 434, 0, 414, 411, 428, 641,
	695, 0, -2, 0, 624, 670, 0, 231, 257, 0,
	0, 0, 248, 41, 0, 54, 0, 334, 0, 234,
	283, 0, 214, 270, 0, 683, 684, 442, 0, 0,
	0, 691, 625, 0, 233, 253, 254, 0, 249, 250,
	251, 813, 245, 252, 56, 454, 0, 278, 639, 235,
	246, 688, 693, 696, -2, 927, 843, 0, 694, 226,
	255, 0, 256, 0, 0, 0, 257, 332, 217, 214,
	0, 698, 699, 700, 701, 702, 258, 0, 261, 262,
	0, 259, 242, 213, 215, 216, 271, 0, 260, 263,
	264, 697,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 291, 3, 297, 292, 3,
	302, 303, 295, 293, 306, 294, 304, 296, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 310, 305,
	285, 287, 286, 3, 307, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 300, 3, 301, 290, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 308, 289, 309, 299,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 288, 57628, 298, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:729
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:735
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:741
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 19:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:766
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 27:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:777
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 28:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:783
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 29:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:787
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 30:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:793
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 31:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:797
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:804
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 33:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:809
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:814
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:819
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 36:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:824
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:829
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:833
		{
			unimplemented()
		}
	case 39:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:836
		{
			sqlVAL.union.val = &AlterTableDropColumn{columnKeyword: sqlDollar[2].union.bool(), IfExists: true, Column: Name(sqlDollar[5].str)}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:841
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 41:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:851
		{
			unimplemented()
		}
	case 42:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:854
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 43:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:861
		{
			unimplemented()
		}
	case 44:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:864
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 45:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:871
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 46:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:880
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 47:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:890
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 48:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:894
		{
			sqlVAL.union.val = nil
		}
	case 49:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:900
		{
			sqlVAL.union.val = DropCascade
		}
	case 50:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:904
		{
			sqlVAL.union.val = DropRestrict
		}
	case 51:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:908
		{
			sqlVAL.union.val = DropDefault
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:914
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 53:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:918
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 54:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:923
		{
			unimplementedWithIssue(2473)
		}
	case 55:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:924
		{
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:927
		{
			unimplemented()
		}
	case 57:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:928
		{
		}
	case 58:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:932
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:936
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:940
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 66:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:955
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retExprs()}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:962
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:966
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 69:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:970
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 70:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:978
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 71:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:986
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 72:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:990
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 73:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:994
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 74:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:998
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 75:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1004
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1008
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 77:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1014
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1018
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 79:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1024
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1028
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 81:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1035
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1039
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1045
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 90:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1054
		{ /* SKIP DOC */
		}
	case 91:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1058
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1062
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 94:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1072
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1082
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 96:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1086
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 97:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1092
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1102
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1113
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 103:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1117
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 104:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1124
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1130
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1136
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1140
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1147
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1154
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1161
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1165
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1169
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1176
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1179
		{
		}
	case 115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1183
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1187
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1194
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1198
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1202
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1206
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1210
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1214
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1218
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1226
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1230
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 126:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1238
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1242
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 128:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1246
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1250
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1253
		{ /* SKIP DOC */
		}
	case 131:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1259
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1265
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1272
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1276
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1280
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1284
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1291
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1297
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1301
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1305
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1309
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1316
		{
			unimplemented()
		}
	case 145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1319
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1322
		{
			unimplemented()
		}
	case 148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1329
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1333
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1341
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1347
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1351
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1355
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1359
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1363
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1369
		{
			sqlVAL.union.val = Low
		}
	case 159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1373
		{
			sqlVAL.union.val = Normal
		}
	case 160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1377
		{
			sqlVAL.union.val = High
		}
	case 161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1383
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1387
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1391
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1406
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1410
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1414
		{
			d, err := ParseDInterval(sqlDollar[2].str)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1424
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1428
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1433
		{
			unimplemented()
		}
	case 172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1434
		{
			unimplemented()
		}
	case 173:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1435
		{
		}
	case 174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1439
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1443
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1449
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1453
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1457
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1461
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1465
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1469
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1473
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1477
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1481
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1485
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1489
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1493
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1497
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1501
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1505
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1509
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 192:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1513
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1517
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1523
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1529
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 196:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1534
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 197:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1540
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 198:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1544
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 199:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1550
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.normalizableTableName(), Exprs: sqlDollar[7].union.exprs()}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1554
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Exprs: sqlDollar[7].union.exprs()}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1561
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1565
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1571
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1575
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1582
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 207:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1588
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1592
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1598
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 212:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1604
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 213:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1610
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1618
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 215:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1625
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 216:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1629
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 217:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1633
		{
			sqlVAL.union.val = DropDefault
		}
	case 218:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1639
		{
			sqlVAL.union.val = newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
		}
	case 219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1645
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 220:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1649
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 221:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1655
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 222:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1659
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1662
		{
			unimplemented()
		}
	case 224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1664
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1668
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 226:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1672
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1690
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1694
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1698
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1702
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 231:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1706
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1710
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1714
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1723
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1732
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1745
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1757
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 238:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1762
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 239:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1768
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1774
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    NameListToIndexElems(sqlDollar[3].union.nameList()),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 241:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1784
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[4].union.nameList()),
				},
				PrimaryKey: true,
			}
		}
	case 242:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1794
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1817
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 246:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1821
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1827
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 248:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1831
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1836
		{
			unimplemented()
		}
	case 250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1837
		{
			unimplemented()
		}
	case 251:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1838
		{
			unimplemented()
		}
	case 252:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1839
		{
		}
	case 253:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1846
		{
			unimplemented()
		}
	case 254:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1847
		{
			unimplemented()
		}
	case 255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1848
		{
			unimplemented()
		}
	case 256:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1849
		{
			unimplemented()
		}
	case 257:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1850
		{
		}
	case 258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1853
		{
			unimplemented()
		}
	case 259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1856
		{
			unimplemented()
		}
	case 260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1859
		{
			unimplemented()
		}
	case 261:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1860
		{
			unimplemented()
		}
	case 262:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1861
		{
			unimplemented()
		}
	case 263:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1862
		{
			unimplemented()
		}
	case 264:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1863
		{
			unimplemented()
		}
	case 265:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1867
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 266:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1871
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1875
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 268:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1882
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1889
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:1902
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:1913
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1927
		{
			sqlVAL.union.val = true
		}
	case 273:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1931
		{
			sqlVAL.union.val = false
		}
	case 274:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1937
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1941
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 276:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1950
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1953
		{
			unimplemented()
		}
	case 278:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1954
		{
			unimplemented()
		}
	case 279:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1957
		{
			unimplemented()
		}
	case 280:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1958
		{
		}
	case 281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1962
		{
			sqlVAL.union.val = Ascending
		}
	case 282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1966
		{
			sqlVAL.union.val = Descending
		}
	case 283:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1970
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 284:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1977
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1981
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1985
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1989
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1993
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1997
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2001
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2005
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 292:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2009
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 293:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2015
		{
			sqlVAL.union.val = true
		}
	case 294:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2019
		{
			sqlVAL.union.val = false
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2024
		{
		}
	case 296:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2025
		{
		}
	case 297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2029
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2035
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2042
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2046
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2050
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2054
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2058
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2067
		{
		}
	case 305:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2068
		{
		}
	case 306:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2072
		{
			sqlVAL.str = ""
		}
	case 307:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2076
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2080
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 309:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2084
		{
			sqlVAL.str = ""
		}
	case 310:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2090
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 311:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2094
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 312:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2100
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2104
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2108
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2112
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2116
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2122
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 318:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2128
		{
			sqlVAL.union.val = &CreateDatabase{Name: Name(sqlDollar[3].str), Encoding: sqlDollar[4].union.strVal()}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2132
		{
			sqlVAL.union.val = &CreateDatabase{IfNotExists: true, Name: Name(sqlDollar[6].str), Encoding: sqlDollar[7].union.strVal()}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2138
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2141
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 322:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2151
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retExprs()
		}
	case 323:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2157
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
		}
	case 324:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2162
		{
			unimplementedWithIssue(6637)
		}
	case 325:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2164
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2169
		{
			unimplementedWithIssue(6637)
		}
	case 327:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2177
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2181
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2187
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2191
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2195
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2201
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2205
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2211
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 335:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2215
		{
			unimplemented()
		}
	case 336:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2217
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 337:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2223
		{
			sqlVAL.union.val = sqlDollar[2].union.selExprs()
		}
	case 338:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2227
		{
			sqlVAL.union.val = SelectExprs(nil)
		}
	case 339:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2234
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retExprs()}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2240
		{
			unimplementedWithIssue(7841)
		}
	case 341:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2241
		{
		}
	case 342:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2245
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2249
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 346:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2259
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2271
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2275
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2319
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2325
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2329
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2344
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2348
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2352
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2356
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2360
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2364
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 361:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2398
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2411
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2424
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 365:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2432
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2441
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 367:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2450
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2468
		{
			unimplemented()
		}
	case 369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2469
		{
			unimplemented()
		}
	case 370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2470
		{
			unimplemented()
		}
	case 371:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2473
		{
			unimplemented()
		}
	case 372:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2474
		{
			unimplemented()
		}
	case 373:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2477
		{
			unimplemented()
		}
	case 374:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2480
		{
			unimplemented()
		}
	case 375:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2481
		{
		}
	case 376:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2484
		{
		}
	case 377:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2485
		{
		}
	case 378:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2489
		{
			sqlVAL.union.val = true
		}
	case 379:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2493
		{
			sqlVAL.union.val = false
		}
	case 380:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2497
		{
			sqlVAL.union.val = false
		}
	case 381:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2503
		{
			sqlVAL.union.val = true
		}
	case 382:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2508
		{
		}
	case 383:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2509
		{
		}
	case 384:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2513
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 385:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2517
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 386:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2523
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 387:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2529
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2533
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 389:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2539
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2547
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2556
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2567
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2580
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2587
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2594
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 399:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2608
		{
		}
	case 400:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2609
		{
		}
	case 401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2635
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 402:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2639
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 403:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2645
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 404:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2649
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 405:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2655
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2659
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2671
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2675
		{
			sqlVAL.union.val = &From{}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2681
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2685
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2691
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2696
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2702
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2707
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			index := a.Index
			if index == "" {
				index = b.Index
			} else if b.Index != "" {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			noIndexJoin := a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = &IndexHints{Index: index, NoIndexJoin: noIndexJoin}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2727
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2731
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 417:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2735
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2742
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), As: sqlDollar[3].union.aliasClause()}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2746
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, As: sqlDollar[2].union.aliasClause()}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2750
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 421:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2754
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[2].union.tblExpr(), As: sqlDollar[4].union.aliasClause()}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2774
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2778
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2782
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2786
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2790
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2794
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2800
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2804
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2808
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2812
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2819
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2825
		{
			sqlVAL.union.val = AsOfClause{Expr: &StrVal{s: sqlDollar[5].str}}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2829
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2835
		{
			sqlVAL.str = astFullJoin
		}
	case 437:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2839
		{
			sqlVAL.str = astLeftJoin
		}
	case 438:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2843
		{
			sqlVAL.str = astRightJoin
		}
	case 439:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2847
		{
			sqlVAL.str = astInnerJoin
		}
	case 440:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2853
		{
		}
	case 441:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2854
		{
		}
	case 442:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2865
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2869
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 444:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2875
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 445:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2879
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 446:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2883
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 447:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2887
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 448:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2893
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2897
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 450:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2910
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 451:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2914
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2918
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2924
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 454:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2928
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 455:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2940
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 456:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2944
		{
			unimplementedWithIssue(2115)
		}
	case 457:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2945
		{
			unimplementedWithIssue(2115)
		}
	case 458:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2948
		{
			unimplementedWithIssue(2115)
		}
	case 459:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2949
		{
			unimplementedWithIssue(2115)
		}
	case 460:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2950
		{
		}
	case 466:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2958
		{
			unimplemented()
		}
	case 467:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2960
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 468:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2964
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 469:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2968
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2972
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 471:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2976
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 472:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2980
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 473:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2984
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 478:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3005
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3014
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3028
		{
			sqlVAL.union.val = nil
		}
	case 481:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3035
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 482:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3039
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 483:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3043
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 484:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3047
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 485:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3051
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 486:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3055
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 487:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3059
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 488:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3063
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newFloatColType(int(prec))
		}
	case 489:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3072
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 490:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3076
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3085
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3094
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3103
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 494:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3107
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 495:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3113
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 496:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3117
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3135
		{
			n, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 502:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3151
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 507:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3167
		{
			n, err := sqlDollar[3].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3183
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 509:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3189
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 510:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3193
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 511:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3197
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 512:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3201
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 513:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3206
		{
		}
	case 514:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3207
		{
		}
	case 515:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3212
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 516:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3216
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 517:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3220
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 518:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3224
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 519:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3228
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 520:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3233
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 521:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3238
		{
			unimplemented()
		}
	case 522:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3239
		{
			unimplemented()
		}
	case 523:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3240
		{
			unimplemented()
		}
	case 524:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3241
		{
			unimplemented()
		}
	case 525:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3242
		{
			unimplemented()
		}
	case 526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3243
		{
			unimplemented()
		}
	case 527:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3244
		{
			unimplemented()
		}
	case 528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3245
		{
			unimplemented()
		}
	case 529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3246
		{
			unimplemented()
		}
	case 530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3247
		{
			unimplemented()
		}
	case 531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3248
		{
			unimplemented()
		}
	case 532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3249
		{
			unimplemented()
		}
	case 533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3250
		{
			unimplemented()
		}
	case 534:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3251
		{
		}
	case 535:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3254
		{
			unimplemented()
		}
	case 536:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3255
		{
			unimplemented()
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3279
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: castShort}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3283
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3286
		{
			unimplemented()
		}
	case 541:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3287
		{
			unimplemented()
		}
	case 542:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3296
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3300
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3304
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3308
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3312
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3316
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3320
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3324
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3328
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3332
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3336
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3340
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3344
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3348
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3352
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3356
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3360
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3364
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3368
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3372
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3376
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3380
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3384
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3388
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3392
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3396
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3400
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3404
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3408
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3412
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3416
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3420
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3424
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3428
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3432
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3436
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3440
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3444
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3447
		{
			unimplemented()
		}
	case 581:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3449
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3453
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3457
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3461
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3465
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3469
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3473
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3477
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3481
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3485
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3489
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3493
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3497
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3501
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3505
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3509
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3526
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: castShort}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3530
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3534
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3538
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3542
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3546
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3550
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3554
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3558
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3562
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3566
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3570
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3574
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3578
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3582
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3586
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3590
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3594
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3598
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3602
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3606
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3610
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3614
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3618
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3622
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3626
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3630
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3634
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3646
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 628:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3651
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3655
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3661
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3665
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3669
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3675
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 636:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3679
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 637:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3683
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3691
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3695
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3698
		{
			unimplemented()
		}
	case 641:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3699
		{
			unimplemented()
		}
	case 642:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3701
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Type: All, Exprs: sqlDollar[4].union.exprs()}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3705
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Type: Distinct, Exprs: sqlDollar[4].union.exprs()}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3709
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Exprs: Exprs{StarExpr()}}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3722
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 646:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3728
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 647:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3737
		{
			unimplemented()
		}
	case 648:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3738
		{
			unimplemented()
		}
	case 649:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3742
		{
			unimplemented()
		}
	case 650:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3744
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3748
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3752
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3756
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3759
		{
			unimplemented()
		}
	case 655:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3760
		{
			unimplemented()
		}
	case 656:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3761
		{
			unimplemented()
		}
	case 657:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3762
		{
			unimplemented()
		}
	case 658:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3764
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: castExplicit}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3768
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3772
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3776
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3780
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3784
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3788
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3791
		{
			unimplemented()
		}
	case 666:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3793
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3797
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3801
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3805
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3809
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3813
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3817
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3821
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3825
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3829
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3835
		{
			unimplemented()
		}
	case 677:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3836
		{
		}
	case 678:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3839
		{
			unimplemented()
		}
	case 679:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3840
		{
		}
	case 680:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3845
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 681:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3849
		{
			sqlVAL.union.val = Window(nil)
		}
	case 682:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3855
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3859
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 684:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3865
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 685:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3873
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 686:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3877
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3881
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 688:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3888
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3907
		{
			sqlVAL.str = ""
		}
	case 691:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3913
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 692:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3917
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 693:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3927
		{
			unimplemented()
		}
	case 694:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3928
		{
			unimplemented()
		}
	case 695:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3929
		{
		}
	case 696:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3932
		{
			unimplemented()
		}
	case 697:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3933
		{
			unimplemented()
		}
	case 698:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3939
		{
			unimplemented()
		}
	case 699:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3940
		{
			unimplemented()
		}
	case 700:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3941
		{
			unimplemented()
		}
	case 701:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3942
		{
			unimplemented()
		}
	case 702:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3943
		{
			unimplemented()
		}
	case 703:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3954
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3958
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3962
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3968
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3972
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3978
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4021
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4025
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 711:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4031
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4035
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 713:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4041
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4045
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4049
		{
			sqlVAL.union.val = &Array{nil}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4055
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4059
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 718:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4065
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4069
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 727:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4091
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4095
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4099
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 730:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4105
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 731:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4112
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4116
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 733:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4133
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4137
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4141
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4145
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4149
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 738:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4153
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 739:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4159
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 740:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4165
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 741:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4171
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 742:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4175
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 743:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4179
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 744:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4185
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4189
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4200
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4207
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4211
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 749:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4217
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4223
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 751:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4227
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 753:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4234
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 754:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4240
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 755:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4244
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 756:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4248
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4252
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr()}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4258
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 759:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4264
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4270
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4274
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 762:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4279
		{
		}
	case 763:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4280
		{
		}
	case 765:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4289
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4295
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4299
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 768:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4308
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 769:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4314
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4318
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 771:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4324
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4333
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4337
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4341
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 775:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4349
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4353
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 777:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4359
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4363
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 779:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4369
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4373
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 781:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4384
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4388
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 783:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4394
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4405
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4409
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4413
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4417
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4423
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4427
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 790:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4433
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 791:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4436
		{
		}
	case 792:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4446
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4450
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 794:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4457
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 795:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4461
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 796:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4465
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4469
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4472
		{
			unimplemented()
		}
	case 799:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4474
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrefix}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4478
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrefix}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4482
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[5].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrefixParens}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4486
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 803:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4490
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 804:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4494
		{
			sqlVAL.union.val = DNull
		}
	case 806:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4501
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 807:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4505
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4527
		{
			sqlVAL.str = ""
		}
	case 813:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4533
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 814:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4537
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
