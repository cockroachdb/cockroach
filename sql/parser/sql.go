// Code generated by go yacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"go/constant"
	"go/token"

	"github.com/pkg/errors"

	"github.com/cockroachdb/cockroach/sql/privilege"
	"github.com/cockroachdb/cockroach/util"
)

var errUnimplemented = errors.New("unimplemented")

func unimplemented() {
	panic(errUnimplemented)
}

func unimplementedWithIssue(issue int) {
	panic(util.UnimplementedWithIssueErrorf(issue, ""))
}

//line sql.y:44

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new sytax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in two forms, depending on the
// type of the value being accessed. Values and pointers are directly
// type asserted from the empty interface, meaning that they will panic
// if the type assertion is incorrect. Interfaces are handled differently
// because a nil instance of an interface inserted into the empty interface
// becomes a nil instance of the empty interface and therefore will fail a
// direct type assertion. Instead, a guarded type assertion must be used,
// which returns nil if the type assertion fails.
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	return u.val.(*StrVal)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) qname() *QualifiedName {
	return u.val.(*QualifiedName)
}
func (u *sqlSymUnion) qnames() QualifiedNames {
	return u.val.(QualifiedNames)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) indirectElem() IndirectionElem {
	if indirectElem, ok := u.val.(IndirectionElem); ok {
		return indirectElem
	}
	return nil
}
func (u *sqlSymUnion) indirect() Indirection {
	return u.val.(Indirection)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	if selectStmt, ok := u.val.(*Select); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	if selectStmt, ok := u.val.(SelectStatement); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	if constraintDef, ok := u.val.(ConstraintTableDef); ok {
		return constraintDef
	}
	return nil
}
func (u *sqlSymUnion) tblDef() TableDef {
	if tblDef, ok := u.val.(TableDef); ok {
		return tblDef
	}
	return nil
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	if colQual, ok := u.val.(NamedColumnQualification); ok {
		return colQual
	}
	return NamedColumnQualification{}
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	if colQual, ok := u.val.(ColumnQualification); ok {
		return colQual
	}
	return nil
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retExprs() ReturningExprs {
	return ReturningExprs(u.val.(SelectExprs))
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	if tblExpr, ok := u.val.(TableExpr); ok {
		return tblExpr
	}
	return nil
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	if joinCond, ok := u.val.(JoinCond); ok {
		return joinCond
	}
	return nil
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	if alterTableCmd, ok := u.val.(AlterTableCmd); ok {
		return alterTableCmd
	}
	return nil
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) famElem() FamilyElem {
	return u.val.(FamilyElem)
}
func (u *sqlSymUnion) famElems() FamilyElemList {
	return u.val.(FamilyElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}

//line sql.y:294
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const DOT_DOT = 57353
const LESS_EQUALS = 57354
const GREATER_EQUALS = 57355
const NOT_EQUALS = 57356
const NOT_REGMATCH = 57357
const REGIMATCH = 57358
const NOT_REGIMATCH = 57359
const ERROR = 57360
const ACTION = 57361
const ADD = 57362
const ALL = 57363
const ALTER = 57364
const ANALYSE = 57365
const ANALYZE = 57366
const AND = 57367
const ANY = 57368
const ANNOTATE_TYPE = 57369
const ARRAY = 57370
const AS = 57371
const ASC = 57372
const ASYMMETRIC = 57373
const AT = 57374
const BEGIN = 57375
const BETWEEN = 57376
const BIGINT = 57377
const BIGSERIAL = 57378
const BIT = 57379
const BLOB = 57380
const BOOL = 57381
const BOOLEAN = 57382
const BOTH = 57383
const BY = 57384
const BYTEA = 57385
const BYTES = 57386
const CASCADE = 57387
const CASE = 57388
const CAST = 57389
const CHAR = 57390
const CHARACTER = 57391
const CHARACTERISTICS = 57392
const CHECK = 57393
const COALESCE = 57394
const COLLATE = 57395
const COLLATION = 57396
const COLUMN = 57397
const COLUMNS = 57398
const COMMIT = 57399
const COMMITTED = 57400
const CONCAT = 57401
const CONFLICT = 57402
const CONSTRAINT = 57403
const CONSTRAINTS = 57404
const COVERING = 57405
const CREATE = 57406
const CROSS = 57407
const CUBE = 57408
const CURRENT = 57409
const CURRENT_CATALOG = 57410
const CURRENT_DATE = 57411
const CURRENT_ROLE = 57412
const CURRENT_TIME = 57413
const CURRENT_TIMESTAMP = 57414
const CURRENT_USER = 57415
const CYCLE = 57416
const DATA = 57417
const DATABASE = 57418
const DATABASES = 57419
const DATE = 57420
const DAY = 57421
const DEC = 57422
const DECIMAL = 57423
const DEFAULT = 57424
const DEALLOCATE = 57425
const DEFERRABLE = 57426
const DELETE = 57427
const DESC = 57428
const DISTINCT = 57429
const DO = 57430
const DOUBLE = 57431
const DROP = 57432
const ELSE = 57433
const ENCODING = 57434
const END = 57435
const ESCAPE = 57436
const EXCEPT = 57437
const EXISTS = 57438
const EXECUTE = 57439
const EXPLAIN = 57440
const EXTRACT = 57441
const FALSE = 57442
const FAMILY = 57443
const FETCH = 57444
const FILTER = 57445
const FIRST = 57446
const FLOAT = 57447
const FLOORDIV = 57448
const FOLLOWING = 57449
const FOR = 57450
const FORCE_INDEX = 57451
const FOREIGN = 57452
const FROM = 57453
const FULL = 57454
const GRANT = 57455
const GRANTS = 57456
const GREATEST = 57457
const GROUP = 57458
const GROUPING = 57459
const HAVING = 57460
const HIGH = 57461
const HOUR = 57462
const IF = 57463
const IFNULL = 57464
const ILIKE = 57465
const IN = 57466
const INTERLEAVE = 57467
const INDEX = 57468
const INDEXES = 57469
const INITIALLY = 57470
const INNER = 57471
const INSERT = 57472
const INT = 57473
const INT64 = 57474
const INTEGER = 57475
const INTERSECT = 57476
const INTERVAL = 57477
const INTO = 57478
const IS = 57479
const ISOLATION = 57480
const JOIN = 57481
const KEY = 57482
const KEYS = 57483
const LATERAL = 57484
const LEADING = 57485
const LEAST = 57486
const LEFT = 57487
const LEVEL = 57488
const LIKE = 57489
const LIMIT = 57490
const LOCAL = 57491
const LOCALTIME = 57492
const LOCALTIMESTAMP = 57493
const LOW = 57494
const LSHIFT = 57495
const MATCH = 57496
const MINUTE = 57497
const MONTH = 57498
const NAME = 57499
const NAMES = 57500
const NATURAL = 57501
const NEXT = 57502
const NO = 57503
const NO_INDEX_JOIN = 57504
const NORMAL = 57505
const NOT = 57506
const NOTHING = 57507
const NULL = 57508
const NULLIF = 57509
const NULLS = 57510
const NUMERIC = 57511
const OF = 57512
const OFF = 57513
const OFFSET = 57514
const ON = 57515
const ONLY = 57516
const OR = 57517
const ORDER = 57518
const ORDINALITY = 57519
const OUT = 57520
const OUTER = 57521
const OVER = 57522
const OVERLAPS = 57523
const OVERLAY = 57524
const PARENT = 57525
const PARTIAL = 57526
const PARTITION = 57527
const PLACING = 57528
const POSITION = 57529
const PRECEDING = 57530
const PRECISION = 57531
const PREPARE = 57532
const PRIMARY = 57533
const PRIORITY = 57534
const RANGE = 57535
const READ = 57536
const REAL = 57537
const RECURSIVE = 57538
const REF = 57539
const REFERENCES = 57540
const RENAME = 57541
const REPEATABLE = 57542
const RELEASE = 57543
const RESTRICT = 57544
const RETURNING = 57545
const REVOKE = 57546
const RIGHT = 57547
const ROLLBACK = 57548
const ROLLUP = 57549
const ROW = 57550
const ROWS = 57551
const RSHIFT = 57552
const SAVEPOINT = 57553
const SEARCH = 57554
const SECOND = 57555
const SELECT = 57556
const SERIAL = 57557
const SERIALIZABLE = 57558
const SESSION = 57559
const SESSION_USER = 57560
const SET = 57561
const SHOW = 57562
const SIMILAR = 57563
const SIMPLE = 57564
const SMALLINT = 57565
const SMALLSERIAL = 57566
const SNAPSHOT = 57567
const SOME = 57568
const SQL = 57569
const START = 57570
const STRICT = 57571
const STRING = 57572
const STORING = 57573
const SUBSTRING = 57574
const SYMMETRIC = 57575
const SYSTEM = 57576
const TABLE = 57577
const TABLES = 57578
const TEXT = 57579
const THEN = 57580
const TIME = 57581
const TIMESTAMP = 57582
const TIMESTAMPTZ = 57583
const TO = 57584
const TRAILING = 57585
const TRANSACTION = 57586
const TREAT = 57587
const TRIM = 57588
const TRUE = 57589
const TRUNCATE = 57590
const TYPE = 57591
const UNBOUNDED = 57592
const UNCOMMITTED = 57593
const UNION = 57594
const UNIQUE = 57595
const UNKNOWN = 57596
const UPDATE = 57597
const UPSERT = 57598
const USER = 57599
const USING = 57600
const VALID = 57601
const VALIDATE = 57602
const VALUE = 57603
const VALUES = 57604
const VARCHAR = 57605
const VARIADIC = 57606
const VARYING = 57607
const WHEN = 57608
const WHERE = 57609
const WINDOW = 57610
const WITH = 57611
const WITHIN = 57612
const WITHOUT = 57613
const YEAR = 57614
const ZONE = 57615
const NOT_LA = 57616
const WITH_LA = 57617
const AS_LA = 57618
const POSTFIXOP = 57619
const UMINUS = 57620

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPLAIN",
	"EXTRACT",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HOUR",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SQL",
	"START",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:4687

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 24,
	297, 24,
	-2, 360,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 38,
	1, 335,
	173, 335,
	203, 335,
	295, 335,
	297, 335,
	-2, 345,
	-1, 51,
	1, 338,
	173, 338,
	203, 338,
	295, 338,
	297, 338,
	-2, 344,
	-1, 60,
	1, 24,
	297, 24,
	-2, 360,
	-1, 271,
	1, 161,
	297, 161,
	-2, 854,
	-1, 304,
	148, 370,
	172, 370,
	-2, 341,
	-1, 307,
	148, 369,
	172, 369,
	-2, 339,
	-1, 430,
	148, 369,
	172, 369,
	-2, 342,
	-1, 486,
	294, 794,
	-2, 787,
	-1, 487,
	294, 795,
	-2, 788,
	-1, 493,
	5, 504,
	294, 504,
	-2, 941,
	-1, 516,
	5, 470,
	-2, 917,
	-1, 517,
	5, 498,
	294, 498,
	-2, 919,
	-1, 518,
	5, 478,
	-2, 920,
	-1, 519,
	5, 477,
	-2, 921,
	-1, 520,
	5, 498,
	294, 498,
	-2, 924,
	-1, 521,
	5, 498,
	294, 498,
	-2, 925,
	-1, 522,
	5, 499,
	-2, 928,
	-1, 523,
	5, 465,
	-2, 929,
	-1, 524,
	5, 465,
	-2, 930,
	-1, 525,
	5, 480,
	-2, 933,
	-1, 526,
	5, 466,
	-2, 938,
	-1, 527,
	5, 467,
	-2, 939,
	-1, 528,
	5, 468,
	-2, 940,
	-1, 529,
	5, 465,
	-2, 944,
	-1, 530,
	5, 471,
	-2, 949,
	-1, 531,
	5, 469,
	-2, 952,
	-1, 532,
	5, 496,
	294, 496,
	-2, 954,
	-1, 533,
	5, 500,
	-2, 957,
	-1, 534,
	5, 502,
	-2, 958,
	-1, 535,
	5, 495,
	294, 495,
	-2, 962,
	-1, 853,
	95, 345,
	134, 345,
	148, 345,
	172, 345,
	176, 345,
	252, 345,
	-2, 614,
	-1, 861,
	294, 772,
	-2, 761,
	-1, 1051,
	12, 0,
	13, 0,
	14, 0,
	277, 0,
	278, 0,
	279, 0,
	-2, 538,
	-1, 1052,
	12, 0,
	13, 0,
	14, 0,
	277, 0,
	278, 0,
	279, 0,
	-2, 539,
	-1, 1053,
	12, 0,
	13, 0,
	14, 0,
	277, 0,
	278, 0,
	279, 0,
	-2, 540,
	-1, 1057,
	12, 0,
	13, 0,
	14, 0,
	277, 0,
	278, 0,
	279, 0,
	-2, 544,
	-1, 1058,
	12, 0,
	13, 0,
	14, 0,
	277, 0,
	278, 0,
	279, 0,
	-2, 545,
	-1, 1059,
	12, 0,
	13, 0,
	14, 0,
	277, 0,
	278, 0,
	279, 0,
	-2, 546,
	-1, 1062,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 551,
	-1, 1068,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 553,
	-1, 1071,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 558,
	-1, 1072,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 559,
	-1, 1073,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 560,
	-1, 1098,
	181, 685,
	-2, 688,
	-1, 1259,
	95, 345,
	134, 345,
	148, 345,
	172, 345,
	176, 345,
	252, 345,
	-2, 418,
	-1, 1263,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 552,
	-1, 1264,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 554,
	-1, 1269,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 555,
	-1, 1287,
	181, 684,
	-2, 687,
	-1, 1444,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 556,
	-1, 1449,
	137, 0,
	-2, 570,
	-1, 1457,
	181, 686,
	-2, 689,
	-1, 1490,
	12, 0,
	13, 0,
	14, 0,
	277, 0,
	278, 0,
	279, 0,
	-2, 595,
	-1, 1491,
	12, 0,
	13, 0,
	14, 0,
	277, 0,
	278, 0,
	279, 0,
	-2, 596,
	-1, 1492,
	12, 0,
	13, 0,
	14, 0,
	277, 0,
	278, 0,
	279, 0,
	-2, 597,
	-1, 1496,
	12, 0,
	13, 0,
	14, 0,
	277, 0,
	278, 0,
	279, 0,
	-2, 601,
	-1, 1497,
	12, 0,
	13, 0,
	14, 0,
	277, 0,
	278, 0,
	279, 0,
	-2, 602,
	-1, 1498,
	12, 0,
	13, 0,
	14, 0,
	277, 0,
	278, 0,
	279, 0,
	-2, 603,
	-1, 1604,
	137, 0,
	-2, 571,
	-1, 1607,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 574,
	-1, 1608,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 576,
	-1, 1695,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 575,
	-1, 1696,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 577,
	-1, 1703,
	137, 0,
	-2, 604,
	-1, 1749,
	137, 0,
	-2, 605,
	-1, 1804,
	34, 0,
	123, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 916,
}

const sqlNprod = 1056
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 23409

var sqlAct = [...]int{

	487, 1803, 1782, 1755, 1827, 1413, 1783, 1647, 1784, 1802,
	1147, 485, 943, 935, 1567, 1468, 1596, 1683, 1024, 1528,
	590, 1588, 1577, 460, 1568, 330, 308, 856, 1670, 783,
	484, 272, 84, 84, 84, 1582, 85, 84, 805, 1342,
	84, 679, 477, 37, 1256, 1005, 479, 1424, 84, 591,
	1190, 1255, 548, 1008, 1341, 84, 84, 1433, 1246, 84,
	786, 858, 84, 84, 84, 974, 1007, 17, 84, 84,
	84, 84, 536, 356, 1290, 577, 557, 1033, 554, 911,
	1242, 1144, 327, 1032, 1084, 327, 944, 338, 1081, 920,
	1108, 327, 449, 338, 1036, 315, 50, 313, 73, 967,
	23, 13, 351, 958, 653, 1000, 6, 418, 637, 357,
	1196, 801, 559, 1034, 459, 450, 313, 549, 550, 634,
	892, 419, 664, 353, 346, 71, 50, 307, 8, 348,
	888, 78, 77, 7, 937, 5, 433, 79, 4, 1011,
	349, 807, 633, 432, 318, 358, 434, 655, 651, 250,
	259, 570, 342, 316, 51, 1690, 50, 1834, 1691, 80,
	1028, 437, 312, 936, 75, 52, 74, 579, 1819, 76,
	1799, 1028, 326, 1669, 1790, 333, 971, 1028, 977, 1780,
	810, 343, 964, 538, 1774, 1751, 537, 1028, 964, 579,
	1254, 1203, 579, 336, 1202, 354, 1745, 1734, 297, 1028,
	1669, 1724, 812, 1697, 1028, 305, 964, 1694, 1680, 320,
	1028, 1669, 1677, 312, 1285, 1678, 304, 972, 1668, 1286,
	1739, 1669, 269, 811, 1652, 1651, 1629, 1028, 1028, 977,
	1609, 1606, 1540, 977, 964, 1028, 808, 24, 81, 56,
	810, 1453, 1399, 568, 977, 1393, 84, 1392, 42, 809,
	1393, 1359, 973, 970, 1360, 1357, 1244, 1503, 977, 810,
	58, 84, 812, 1356, 84, 84, 977, 1355, 1287, 1284,
	977, 977, 44, 1456, 977, 1029, 817, 1228, 1028, 49,
	49, 812, 986, 811, 1289, 977, 909, 59, 976, 826,
	963, 977, 908, 964, 54, 907, 1230, 84, 33, 84,
	55, 84, 811, 84, 585, 29, 29, 586, 45, 1028,
	975, 1672, 32, 30, 30, 979, 1092, 1023, 84, 53,
	994, 445, 327, 827, 580, 777, 776, 645, 34, 84,
	551, 431, 425, 444, 552, 977, 817, 644, 382, 325,
	84, 84, 84, 551, 84, 492, 580, 552, 552, 580,
	60, 543, 545, 678, 402, 817, 1801, 547, 1797, 1789,
	1746, 1679, 1634, 327, 571, 571, 1630, 1622, 1621, 969,
	1620, 940, 1615, 1614, 390, 84, 1613, 1565, 1202, 430,
	828, 1558, 84, 827, 84, 1518, 1313, 1513, 391, 631,
	1512, 968, 1792, 1313, 1511, 356, 356, 1459, 327, 643,
	1442, 1423, 1403, 681, 84, 31, 84, 84, 84, 84,
	84, 84, 424, 84, 1364, 542, 47, 84, 1361, 35,
	583, 46, 84, 597, 1349, 582, 36, 1340, 84, 56,
	56, 357, 357, 1470, 39, 41, 808, 1312, 1309, 682,
	828, 1307, 578, 43, 674, 780, 84, 422, 56, 84,
	58, 58, 1295, 343, 821, 813, 814, 815, 816, 818,
	1294, 838, 1229, 48, 1161, 1765, 1313, 358, 358, 58,
	305, 446, 440, 441, 855, 683, 1232, 59, 59, 1115,
	1114, 304, 1318, 444, 54, 54, 864, 1089, 587, 1318,
	55, 55, 569, 572, 443, 1738, 59, 1716, 1714, 779,
	861, 1705, 1557, 56, 1686, 1675, 1666, 313, 1644, 53,
	53, 822, 819, 820, 821, 813, 814, 815, 816, 818,
	1627, 838, 1599, 1575, 58, 81, 641, 1448, 53, 1328,
	1441, 540, 640, 1420, 813, 814, 815, 816, 818, 1419,
	838, 1418, 1416, 1564, 668, 675, 1401, 84, 767, 1376,
	551, 59, 1313, 681, 552, 1375, 1339, 1303, 54, 1302,
	619, 84, 1318, 618, 55, 84, 1281, 49, 84, 84,
	902, 791, 778, 1090, 84, 789, 84, 84, 1277, 84,
	790, 1086, 84, 939, 84, 84, 1329, 356, 327, 682,
	803, 338, 305, 29, 905, 305, 305, 947, 1217, 1175,
	903, 30, 338, 797, 1174, 338, 798, 799, 1154, 1328,
	1113, 1027, 810, 453, 914, 953, 351, 893, 896, 900,
	886, 885, 884, 357, 883, 683, 764, 882, 881, 768,
	769, 770, 771, 772, 812, 773, 84, 84, 938, 775,
	938, 925, 927, 880, 1175, 894, 879, 539, 1318, 878,
	897, 890, 891, 73, 877, 811, 876, 959, 810, 358,
	1322, 1314, 1315, 1316, 1317, 1319, 1329, 875, 1314, 1315,
	1316, 1317, 1319, 874, 873, 981, 872, 1313, 930, 681,
	812, 50, 871, 862, 901, 50, 78, 77, 860, 1130,
	961, 960, 79, 53, 781, 1328, 962, 933, 331, 448,
	917, 811, 388, 378, 376, 1563, 952, 942, 951, 354,
	956, 955, 859, 1211, 80, 682, 1210, 56, 810, 75,
	999, 74, 596, 810, 76, 954, 417, 544, 1692, 1562,
	1204, 396, 1018, 1594, 894, 898, 897, 1583, 58, 899,
	1363, 1314, 1315, 1316, 1317, 1319, 1362, 1262, 413, 397,
	869, 683, 1329, 988, 817, 980, 982, 983, 891, 890,
	936, 811, 1471, 1298, 1109, 59, 987, 84, 560, 889,
	561, 1198, 54, 1318, 1761, 865, 810, 1723, 55, 1814,
	1815, 84, 84, 560, 262, 561, 1548, 296, 985, 295,
	913, 290, 302, 291, 1120, 311, 1387, 72, 812, 1224,
	913, 1660, 1659, 1388, 327, 560, 912, 561, 1368, 1367,
	84, 1265, 84, 1216, 1215, 1214, 1213, 1069, 978, 811,
	932, 1030, 931, 1323, 1320, 1321, 1322, 1314, 1315, 1316,
	1317, 1319, 1400, 327, 310, 489, 421, 1775, 562, 1158,
	1157, 68, 1040, 1039, 673, 672, 681, 666, 661, 416,
	374, 299, 1742, 562, 1083, 990, 64, 597, 1083, 1763,
	1038, 992, 394, 573, 975, 1274, 1313, 1722, 1777, 1123,
	1093, 1097, 817, 1100, 1824, 562, 312, 993, 1272, 1021,
	1022, 1378, 682, 1408, 1778, 1003, 991, 1087, 1191, 1139,
	1390, 69, 1200, 838, 1004, 1151, 1152, 1153, 1002, 395,
	1649, 65, 1189, 566, 565, 1717, 1225, 1836, 621, 903,
	1124, 84, 84, 84, 903, 1160, 393, 84, 683, 827,
	84, 1096, 676, 62, 1031, 887, 84, 84, 84, 84,
	84, 1195, 84, 84, 1166, 815, 816, 818, 1109, 838,
	84, 975, 84, 1667, 1270, 1125, 1122, 1186, 1275, 84,
	1814, 300, 309, 579, 1316, 1317, 1319, 971, 84, 1701,
	1536, 1191, 1318, 1197, 1105, 597, 1301, 1088, 1172, 303,
	1170, 1434, 1197, 63, 852, 625, 828, 1385, 312, 84,
	84, 327, 921, 313, 558, 84, 1164, 910, 1193, 677,
	1830, 1537, 1223, 1079, 619, 356, 1823, 618, 972, 838,
	70, 1785, 1786, 1126, 838, 1813, 1077, 1185, 563, 1328,
	1379, 597, 1811, 84, 1209, 84, 84, 84, 420, 1581,
	84, 1016, 1165, 563, 620, 1271, 67, 66, 1206, 84,
	1207, 357, 1273, 973, 970, 392, 84, 251, 84, 405,
	1235, 924, 1231, 1405, 1233, 563, 383, 1234, 385, 387,
	796, 813, 814, 815, 816, 818, 1267, 838, 256, 1205,
	1082, 327, 1121, 252, 1837, 414, 1329, 358, 1650, 1066,
	1075, 1208, 1074, 1532, 1787, 1533, 1080, 1822, 1406, 436,
	435, 313, 61, 381, 1219, 1625, 253, 1689, 1220, 393,
	1221, 975, 1654, 1222, 1842, 959, 1653, 1280, 1227, 1226,
	1535, 1282, 619, 255, 436, 618, 1828, 1538, 1642, 1544,
	580, 1499, 1788, 1292, 1293, 1261, 1711, 1370, 1169, 415,
	1017, 788, 923, 50, 782, 667, 662, 1288, 961, 960,
	313, 1240, 1260, 1404, 962, 1239, 975, 472, 1320, 1321,
	1322, 1314, 1315, 1316, 1317, 1319, 1338, 1829, 619, 1597,
	969, 618, 1268, 1076, 1547, 1266, 596, 1351, 1064, 1067,
	1078, 1546, 1534, 1756, 1831, 435, 774, 646, 1626, 82,
	243, 244, 1643, 1177, 261, 1591, 84, 273, 1841, 313,
	392, 1176, 1063, 1429, 922, 261, 1428, 254, 1500, 341,
	340, 1543, 319, 319, 1501, 310, 329, 427, 1297, 329,
	335, 329, 1598, 84, 84, 329, 344, 329, 273, 650,
	1414, 1566, 593, 1249, 1374, 1395, 1640, 1425, 1243, 1112,
	1704, 1624, 1343, 1346, 1347, 1348, 947, 327, 257, 84,
	1252, 84, 1447, 84, 1308, 1276, 1641, 84, 984, 412,
	1432, 1365, 648, 1545, 410, 84, 1250, 409, 84, 408,
	407, 406, 403, 649, 84, 681, 1065, 1382, 84, 1384,
	84, 339, 1417, 1372, 596, 1245, 1386, 1344, 327, 870,
	766, 327, 1111, 1781, 1753, 1525, 1383, 1381, 1369, 1236,
	1407, 1409, 1410, 1398, 1389, 1185, 1019, 1397, 1015, 1396,
	957, 682, 1454, 1394, 584, 581, 1438, 1415, 1450, 1422,
	576, 567, 84, 564, 1465, 1437, 1251, 1431, 1435, 1436,
	596, 787, 1249, 1661, 438, 1025, 1815, 670, 1461, 1462,
	1463, 1663, 1427, 399, 597, 1430, 913, 683, 913, 1252,
	323, 929, 928, 1672, 926, 1391, 1719, 1748, 3, 1247,
	1426, 442, 621, 247, 1740, 1250, 941, 966, 1458, 804,
	1504, 642, 597, 597, 589, 1474, 1475, 1839, 289, 1248,
	597, 1514, 1840, 1479, 1313, 1477, 810, 1519, 84, 84,
	84, 1026, 996, 995, 1411, 1402, 84, 84, 1472, 258,
	439, 1506, 84, 379, 84, 1358, 84, 84, 84, 84,
	1212, 1159, 597, 1156, 84, 1510, 324, 1507, 384, 332,
	400, 273, 273, 292, 293, 1251, 1155, 1106, 997, 1551,
	1800, 1611, 1464, 1520, 1541, 1542, 1237, 1560, 998, 84,
	84, 863, 298, 1524, 1648, 249, 765, 404, 1573, 84,
	84, 1617, 1573, 84, 261, 1580, 329, 1585, 273, 1776,
	428, 1300, 84, 84, 1700, 1682, 1561, 1572, 1110, 868,
	621, 1572, 327, 327, 28, 319, 327, 1570, 620, 1574,
	1559, 619, 465, 1574, 618, 1579, 329, 1526, 1371, 1605,
	1010, 84, 1009, 684, 671, 660, 488, 329, 329, 329,
	1600, 574, 411, 1555, 654, 663, 1119, 1601, 541, 619,
	619, 1131, 618, 618, 490, 597, 621, 619, 594, 491,
	618, 595, 895, 478, 592, 352, 1586, 1587, 1593, 945,
	1592, 1107, 329, 1296, 866, 464, 470, 1623, 469, 638,
	1094, 638, 375, 461, 1595, 1253, 84, 40, 84, 619,
	84, 84, 618, 389, 267, 268, 1194, 1556, 1020, 84,
	792, 273, 1380, 638, 273, 273, 273, 273, 273, 301,
	273, 1310, 377, 1137, 273, 1129, 1635, 1127, 84, 261,
	1118, 1638, 1646, 423, 553, 785, 620, 946, 401, 1201,
	965, 447, 1576, 800, 1791, 322, 321, 1006, 398, 1636,
	647, 989, 84, 319, 84, 294, 806, 1573, 1664, 1713,
	1676, 1835, 84, 1718, 1377, 597, 1662, 1671, 1656, 1673,
	84, 1760, 57, 22, 20, 1681, 1572, 19, 18, 1685,
	16, 15, 620, 14, 21, 327, 12, 11, 1574, 10,
	9, 27, 26, 596, 25, 1657, 1658, 2, 1, 0,
	0, 0, 619, 0, 810, 618, 0, 0, 1693, 1699,
	0, 84, 0, 0, 0, 0, 593, 0, 1706, 0,
	0, 596, 596, 1715, 0, 0, 812, 1709, 0, 596,
	84, 84, 0, 0, 84, 0, 0, 0, 84, 1688,
	1710, 0, 0, 84, 597, 0, 1727, 811, 0, 84,
	0, 1573, 0, 0, 329, 1736, 1733, 84, 1737, 1729,
	0, 596, 1731, 681, 1728, 1131, 1131, 0, 918, 0,
	1572, 1735, 329, 0, 1730, 329, 934, 1743, 0, 0,
	313, 329, 1574, 949, 950, 84, 329, 84, 84, 329,
	84, 273, 273, 0, 903, 1741, 1750, 1747, 0, 682,
	817, 0, 619, 1766, 1744, 618, 0, 0, 1764, 0,
	84, 1759, 1769, 1770, 0, 0, 1131, 1131, 1131, 0,
	1573, 1762, 597, 1771, 593, 1758, 1773, 1772, 810, 1779,
	1768, 1767, 0, 0, 84, 683, 84, 0, 0, 1572,
	0, 1278, 1279, 638, 806, 1798, 1794, 827, 0, 0,
	812, 1574, 84, 0, 0, 0, 1796, 947, 1808, 0,
	0, 1812, 1810, 84, 596, 1816, 0, 0, 632, 0,
	593, 811, 0, 0, 1795, 0, 1821, 1820, 1818, 621,
	0, 619, 0, 0, 618, 0, 0, 0, 0, 1833,
	1832, 0, 1335, 1336, 1337, 0, 1838, 1313, 0, 0,
	0, 1817, 0, 0, 828, 0, 0, 621, 621, 0,
	0, 1843, 0, 0, 0, 621, 0, 0, 0, 0,
	0, 0, 0, 0, 817, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1327, 621, 0, 0,
	1131, 1131, 0, 0, 0, 0, 0, 0, 0, 619,
	0, 0, 618, 0, 596, 0, 0, 0, 0, 0,
	0, 827, 0, 0, 1001, 822, 819, 820, 821, 813,
	814, 815, 816, 818, 0, 838, 0, 0, 329, 918,
	0, 0, 0, 1318, 0, 620, 0, 0, 1131, 1131,
	1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131,
	1131, 1131, 1131, 1131, 1131, 1131, 1131, 329, 1131, 273,
	0, 0, 0, 620, 620, 0, 1445, 1446, 828, 0,
	0, 620, 0, 0, 0, 0, 0, 0, 0, 0,
	1328, 0, 0, 596, 0, 0, 0, 0, 0, 1245,
	621, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 620, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1480, 1481, 1482, 1483, 1484, 1485,
	1486, 1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495,
	1496, 1497, 1498, 0, 1502, 0, 1249, 1329, 0, 0,
	819, 820, 821, 813, 814, 815, 816, 818, 0, 838,
	0, 0, 0, 1252, 0, 0, 0, 0, 329, 1167,
	1168, 596, 0, 1247, 918, 0, 0, 1173, 0, 1250,
	0, 0, 0, 1178, 1179, 1181, 1183, 1184, 0, 1187,
	1188, 0, 0, 1248, 0, 0, 0, 329, 0, 1199,
	621, 0, 0, 0, 0, 0, 329, 1590, 0, 0,
	0, 0, 0, 0, 0, 329, 620, 0, 1323, 1320,
	1321, 1322, 1314, 1315, 1316, 1317, 1319, 0, 0, 0,
	0, 0, 0, 593, 0, 248, 1001, 638, 0, 1251,
	451, 451, 1001, 0, 0, 0, 0, 0, 0, 0,
	555, 0, 0, 1536, 0, 1529, 466, 38, 0, 0,
	0, 593, 593, 1527, 0, 0, 1531, 0, 0, 593,
	785, 1131, 785, 273, 329, 0, 810, 1238, 251, 621,
	0, 839, 840, 841, 1537, 0, 1241, 38, 0, 0,
	0, 0, 1589, 1258, 0, 329, 0, 0, 812, 256,
	843, 593, 0, 1530, 252, 0, 0, 306, 0, 0,
	314, 0, 0, 0, 0, 0, 620, 38, 0, 811,
	1313, 0, 1330, 1331, 1332, 826, 0, 253, 0, 314,
	0, 0, 0, 0, 274, 1603, 0, 0, 0, 1313,
	0, 1330, 1331, 1332, 255, 0, 0, 1645, 0, 0,
	0, 287, 0, 0, 793, 795, 0, 621, 1131, 0,
	0, 802, 0, 0, 0, 0, 1532, 0, 1533, 1327,
	0, 0, 817, 847, 848, 849, 850, 851, 0, 0,
	0, 1313, 854, 1330, 1331, 1332, 276, 0, 1327, 836,
	844, 281, 282, 1535, 288, 620, 1602, 0, 0, 0,
	1538, 0, 867, 0, 593, 0, 275, 277, 0, 0,
	0, 0, 0, 834, 0, 0, 1318, 0, 0, 827,
	0, 0, 0, 0, 0, 0, 0, 0, 254, 0,
	1327, 0, 0, 806, 1703, 1318, 0, 0, 1131, 0,
	0, 0, 0, 0, 278, 0, 0, 1333, 0, 0,
	0, 0, 0, 1334, 0, 1534, 279, 280, 0, 0,
	329, 329, 0, 1328, 0, 0, 1333, 0, 0, 257,
	904, 283, 0, 620, 0, 0, 828, 1318, 0, 0,
	0, 0, 1328, 0, 0, 0, 1412, 837, 918, 0,
	785, 0, 0, 0, 1421, 0, 0, 0, 0, 0,
	0, 0, 329, 0, 593, 329, 0, 0, 1333, 0,
	0, 1258, 0, 0, 1749, 1440, 0, 1258, 0, 0,
	1329, 0, 0, 0, 1328, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1329,
	835, 0, 0, 0, 0, 0, 0, 822, 819, 820,
	821, 813, 814, 815, 816, 818, 0, 838, 0, 1469,
	0, 0, 0, 0, 0, 0, 284, 0, 0, 285,
	0, 0, 306, 0, 286, 0, 0, 0, 0, 0,
	0, 1329, 0, 593, 0, 0, 0, 1324, 1325, 1326,
	0, 1323, 1320, 1321, 1322, 1314, 1315, 1316, 1317, 1319,
	0, 0, 0, 0, 0, 0, 1324, 1325, 1326, 0,
	1323, 1320, 1321, 1322, 1314, 1315, 1316, 1317, 1319, 0,
	0, 0, 0, 0, 0, 1522, 1523, 918, 0, 0,
	0, 0, 0, 806, 806, 0, 0, 0, 0, 1549,
	0, 1550, 0, 329, 1552, 1553, 1554, 0, 1324, 1325,
	1326, 329, 1323, 1320, 1321, 1322, 1314, 1315, 1316, 1317,
	1319, 593, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1569, 0, 1578, 918, 1569, 0,
	0, 1313, 0, 1330, 1331, 1332, 329, 329, 0, 0,
	329, 0, 0, 0, 306, 0, 1452, 306, 306, 806,
	1258, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	853, 0, 0, 0, 857, 0, 0, 451, 1618, 0,
	1327, 0, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048,
	1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058,
	1059, 1060, 1061, 1062, 0, 1068, 0, 1070, 1071, 1072,
	1073, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1318, 0, 0,
	0, 0, 0, 918, 0, 1637, 0, 273, 1639, 0,
	0, 0, 1116, 1117, 0, 1128, 329, 1138, 1140, 1145,
	1148, 1149, 1150, 0, 0, 0, 0, 0, 1333, 0,
	0, 0, 0, 0, 0, 806, 0, 0, 0, 0,
	0, 0, 0, 0, 1328, 0, 555, 38, 0, 38,
	0, 0, 0, 1569, 0, 0, 0, 0, 0, 329,
	0, 1684, 38, 0, 0, 0, 38, 0, 0, 329,
	0, 0, 0, 0, 0, 1192, 0, 806, 0, 0,
	0, 0, 0, 0, 0, 810, 0, 829, 830, 831,
	839, 840, 841, 0, 0, 0, 0, 0, 0, 0,
	832, 1329, 0, 0, 0, 0, 0, 812, 0, 843,
	0, 0, 0, 0, 0, 0, 1218, 0, 785, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 811, 0,
	0, 0, 0, 0, 826, 0, 0, 1720, 1721, 0,
	0, 1725, 0, 0, 0, 1726, 0, 1569, 0, 0,
	273, 0, 0, 0, 0, 0, 1578, 0, 0, 0,
	0, 0, 802, 0, 806, 0, 0, 0, 1324, 1325,
	1326, 0, 1323, 1320, 1321, 1322, 1314, 1315, 1316, 1317,
	1319, 817, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1757, 0, 806, 329, 0, 273, 836, 844,
	0, 0, 1263, 1264, 0, 0, 0, 0, 1269, 0,
	0, 0, 842, 0, 0, 0, 1569, 1684, 0, 0,
	0, 0, 834, 0, 0, 0, 0, 0, 827, 0,
	0, 1283, 0, 0, 0, 0, 0, 0, 0, 0,
	1291, 329, 0, 806, 0, 0, 0, 0, 1299, 0,
	833, 0, 1304, 0, 0, 0, 0, 0, 0, 1809,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	806, 0, 0, 0, 854, 0, 0, 0, 0, 0,
	1145, 1145, 1145, 0, 0, 828, 1035, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 837, 0, 0, 0,
	0, 0, 1366, 0, 0, 0, 1313, 0, 1330, 1331,
	1332, 0, 0, 1373, 0, 0, 0, 0, 0, 0,
	0, 1085, 0, 0, 0, 0, 0, 0, 0, 0,
	451, 0, 0, 0, 0, 0, 0, 0, 0, 451,
	0, 0, 0, 555, 0, 0, 0, 0, 0, 835,
	0, 0, 823, 824, 825, 1327, 822, 819, 820, 821,
	813, 814, 815, 816, 818, 0, 838, 0, 1162, 0,
	0, 0, 0, 0, 0, 0, 810, 1163, 829, 830,
	831, 839, 840, 841, 0, 0, 0, 0, 0, 0,
	0, 832, 0, 0, 0, 0, 0, 0, 812, 0,
	843, 1443, 1318, 0, 1444, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1449, 314, 0, 0, 811,
	0, 0, 0, 0, 0, 826, 0, 0, 1218, 0,
	0, 0, 0, 1333, 0, 0, 0, 1466, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1476, 0, 1328,
	1478, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 817, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1508, 1509, 0, 0, 0, 0, 0, 836,
	844, 1515, 1516, 1517, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 842, 38, 0, 1329, 0, 0, 0,
	0, 0, 0, 834, 1259, 0, 0, 0, 0, 827,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 451,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 833, 0, 0, 1085, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 853, 1584, 0, 0, 0, 0, 0,
	0, 0, 0, 1324, 1325, 1326, 828, 1323, 1320, 1321,
	1322, 1314, 1315, 1316, 1317, 1319, 1604, 837, 0, 0,
	1607, 1608, 0, 0, 0, 1610, 0, 0, 0, 1612,
	0, 0, 0, 0, 0, 0, 1616, 0, 0, 0,
	1619, 0, 853, 810, 0, 829, 830, 831, 839, 840,
	841, 0, 0, 0, 0, 0, 0, 0, 832, 0,
	0, 0, 0, 0, 0, 812, 0, 843, 0, 0,
	835, 0, 1628, 823, 824, 825, 0, 822, 819, 820,
	821, 813, 814, 815, 816, 818, 811, 838, 0, 0,
	0, 0, 826, 0, 1631, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1313,
	1035, 1330, 1331, 1332, 0, 1655, 0, 0, 0, 0,
	0, 0, 0, 0, 1451, 0, 810, 0, 829, 830,
	831, 839, 840, 841, 0, 0, 0, 0, 0, 817,
	1674, 832, 0, 0, 0, 0, 0, 0, 812, 0,
	843, 1035, 0, 0, 1035, 0, 836, 844, 1327, 1687,
	0, 810, 0, 829, 830, 831, 839, 840, 841, 811,
	842, 1695, 1696, 0, 0, 826, 832, 0, 0, 0,
	834, 0, 0, 812, 0, 843, 827, 0, 0, 1313,
	0, 1330, 1331, 1332, 0, 0, 0, 0, 0, 0,
	1708, 0, 0, 0, 811, 1318, 0, 0, 833, 0,
	826, 0, 0, 1712, 0, 0, 0, 0, 0, 0,
	0, 0, 817, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 555, 1333, 0, 1327, 836,
	844, 0, 0, 828, 0, 0, 0, 0, 0, 0,
	0, 0, 1328, 842, 837, 0, 0, 817, 0, 0,
	0, 0, 0, 834, 0, 0, 0, 0, 0, 827,
	0, 0, 0, 0, 836, 844, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1318, 0, 0, 842, 0,
	0, 833, 0, 0, 0, 0, 0, 0, 834, 38,
	0, 0, 0, 0, 827, 0, 0, 835, 0, 1329,
	823, 824, 825, 0, 822, 819, 820, 821, 813, 814,
	815, 816, 818, 0, 838, 0, 828, 0, 0, 0,
	1793, 1354, 1328, 0, 0, 1035, 1035, 837, 0, 1035,
	0, 0, 0, 0, 0, 0, 1807, 1807, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 828, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 837, 1807, 0, 0, 1324, 1325, 1326, 0,
	1323, 1320, 1321, 1322, 1314, 1315, 1316, 1317, 1319, 1329,
	835, 0, 0, 823, 824, 825, 0, 822, 819, 820,
	821, 813, 814, 815, 816, 818, 0, 838, 1807, 0,
	0, 0, 0, 0, 1353, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 835, 0, 0, 823, 824,
	825, 0, 822, 819, 820, 821, 813, 814, 815, 816,
	818, 0, 838, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1324, 1325, 1326, 0,
	1323, 1320, 1321, 1322, 1314, 1315, 1316, 1317, 1319, 1665,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1035, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 680, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 86, 87, 685, 88, 686, 687, 688,
	689, 195, 690, 691, 692, 693, 89, 90, 196, 197,
	198, 199, 91, 200, 201, 694, 92, 202, 203, 93,
	695, 696, 204, 205, 206, 697, 207, 698, 360, 699,
	94, 95, 96, 853, 97, 700, 98, 99, 701, 361,
	100, 101, 702, 703, 704, 705, 706, 707, 102, 103,
	104, 105, 208, 106, 209, 210, 708, 107, 709, 108,
	710, 711, 712, 109, 110, 713, 111, 714, 0, 715,
	211, 112, 113, 212, 716, 717, 718, 114, 115, 213,
	0, 116, 719, 117, 720, 721, 362, 722, 118, 214,
	723, 215, 724, 119, 120, 216, 217, 364, 725, 123,
	726, 121, 727, 363, 122, 218, 219, 220, 728, 221,
	729, 365, 124, 366, 125, 126, 730, 731, 222, 367,
	127, 368, 732, 128, 733, 734, 129, 0, 130, 131,
	132, 133, 134, 369, 135, 136, 139, 137, 735, 138,
	736, 223, 140, 224, 141, 142, 737, 738, 739, 740,
	741, 143, 225, 370, 144, 371, 226, 145, 146, 147,
	742, 227, 148, 228, 149, 743, 150, 151, 152, 229,
	153, 154, 744, 156, 157, 155, 158, 745, 159, 372,
	160, 161, 230, 162, 0, 163, 164, 165, 746, 231,
	166, 167, 747, 168, 169, 373, 170, 232, 233, 171,
	748, 172, 173, 175, 234, 174, 235, 749, 176, 750,
	177, 178, 751, 236, 237, 238, 752, 753, 179, 239,
	240, 754, 180, 181, 182, 183, 755, 756, 184, 185,
	186, 757, 758, 187, 188, 189, 241, 242, 759, 190,
	760, 761, 762, 763, 191, 192, 193, 194, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	680, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1439, 86, 87, 685, 88, 686,
	687, 688, 689, 195, 690, 691, 692, 693, 89, 90,
	196, 197, 198, 199, 91, 200, 201, 694, 92, 202,
	203, 93, 695, 696, 204, 205, 206, 697, 207, 698,
	360, 699, 94, 95, 96, 0, 97, 700, 98, 99,
	701, 361, 100, 101, 702, 703, 704, 705, 706, 707,
	102, 103, 104, 105, 208, 106, 209, 210, 708, 107,
	709, 108, 710, 711, 712, 109, 110, 713, 111, 714,
	0, 715, 211, 112, 113, 212, 716, 717, 718, 114,
	115, 213, 0, 116, 719, 117, 720, 721, 362, 722,
	118, 214, 723, 215, 724, 119, 120, 216, 217, 364,
	725, 123, 726, 121, 727, 363, 122, 218, 219, 220,
	728, 221, 729, 365, 124, 366, 125, 126, 730, 731,
	222, 367, 127, 368, 732, 128, 733, 734, 129, 0,
	130, 131, 132, 133, 134, 369, 135, 136, 139, 137,
	735, 138, 736, 223, 140, 224, 141, 142, 737, 738,
	739, 740, 741, 143, 225, 370, 144, 371, 226, 145,
	146, 147, 742, 227, 148, 228, 149, 743, 150, 151,
	152, 229, 153, 154, 744, 156, 157, 155, 158, 745,
	159, 372, 160, 161, 230, 162, 0, 163, 164, 165,
	746, 231, 166, 167, 747, 168, 169, 373, 170, 232,
	233, 171, 748, 172, 173, 175, 234, 174, 235, 749,
	176, 750, 177, 178, 751, 236, 237, 238, 752, 753,
	179, 239, 240, 754, 180, 181, 182, 183, 755, 756,
	184, 185, 186, 757, 758, 187, 188, 189, 241, 242,
	759, 190, 760, 761, 762, 763, 191, 192, 193, 194,
	680, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 906, 0, 86, 87, 685, 88, 686,
	687, 688, 689, 195, 690, 691, 692, 693, 89, 90,
	196, 197, 198, 199, 91, 200, 201, 694, 92, 202,
	203, 93, 695, 696, 204, 205, 206, 697, 207, 698,
	360, 699, 94, 95, 96, 0, 97, 700, 98, 99,
	701, 361, 100, 101, 702, 703, 704, 705, 706, 707,
	102, 103, 104, 105, 208, 106, 209, 210, 708, 107,
	709, 108, 710, 711, 712, 109, 110, 713, 111, 714,
	0, 715, 211, 112, 113, 212, 716, 717, 718, 114,
	115, 213, 0, 116, 719, 117, 720, 721, 362, 722,
	118, 214, 723, 215, 724, 119, 120, 216, 217, 364,
	725, 123, 726, 121, 727, 363, 122, 218, 219, 220,
	728, 221, 729, 365, 124, 366, 125, 126, 730, 731,
	222, 367, 127, 368, 732, 128, 733, 734, 129, 0,
	130, 131, 132, 133, 134, 369, 135, 136, 139, 137,
	735, 138, 736, 223, 140, 224, 141, 142, 737, 738,
	739, 740, 741, 143, 225, 370, 144, 371, 226, 145,
	146, 147, 742, 227, 148, 228, 149, 743, 150, 151,
	152, 229, 153, 154, 744, 156, 157, 155, 158, 745,
	159, 372, 160, 161, 230, 162, 0, 163, 164, 165,
	746, 231, 166, 167, 747, 168, 169, 373, 170, 232,
	233, 171, 748, 172, 173, 175, 234, 174, 235, 749,
	176, 750, 177, 178, 751, 236, 237, 238, 752, 753,
	179, 239, 240, 754, 180, 181, 182, 183, 755, 756,
	184, 185, 186, 757, 758, 187, 188, 189, 241, 242,
	759, 190, 760, 761, 762, 763, 191, 192, 193, 194,
	486, 475, 476, 473, 474, 462, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 87, 1102, 88, 0,
	0, 0, 0, 502, 468, 0, 0, 0, 89, 90,
	196, 516, 198, 517, 91, 518, 519, 0, 92, 202,
	203, 93, 483, 501, 520, 521, 206, 0, 512, 0,
	494, 0, 94, 95, 96, 0, 97, 0, 98, 99,
	0, 361, 100, 101, 0, 495, 497, 0, 496, 498,
	102, 103, 104, 105, 522, 106, 523, 524, 0, 107,
	0, 108, 0, 1103, 0, 515, 110, 0, 111, 0,
	0, 0, 467, 112, 113, 503, 481, 0, 0, 114,
	115, 525, 0, 116, 0, 117, 0, 0, 362, 0,
	118, 513, 0, 215, 0, 119, 120, 509, 511, 364,
	0, 123, 0, 121, 0, 363, 122, 526, 527, 528,
	0, 493, 0, 365, 124, 366, 125, 126, 0, 0,
	514, 367, 127, 368, 0, 128, 0, 0, 129, 0,
	130, 131, 132, 133, 134, 369, 135, 136, 139, 137,
	457, 138, 482, 510, 140, 529, 141, 142, 0, 0,
	0, 0, 0, 143, 225, 370, 144, 371, 504, 145,
	146, 147, 0, 505, 148, 228, 149, 0, 150, 151,
	152, 530, 153, 154, 0, 156, 157, 155, 158, 0,
	159, 372, 160, 161, 471, 162, 0, 163, 164, 165,
	0, 231, 166, 167, 499, 168, 169, 373, 170, 531,
	233, 171, 0, 172, 173, 175, 532, 174, 506, 0,
	176, 0, 177, 178, 0, 236, 533, 534, 0, 0,
	179, 507, 508, 480, 180, 181, 182, 183, 0, 0,
	184, 185, 186, 500, 0, 187, 188, 189, 241, 535,
	1101, 190, 0, 0, 0, 0, 191, 192, 193, 194,
	458, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 454, 455, 1104, 0, 0, 0, 456, 0, 0,
	463, 1099, 486, 475, 476, 473, 474, 462, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 87, 0,
	88, 0, 0, 0, 0, 502, 468, 0, 0, 0,
	89, 90, 196, 516, 198, 517, 91, 518, 519, 0,
	92, 202, 203, 93, 483, 501, 520, 521, 206, 0,
	512, 0, 494, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 361, 100, 101, 0, 495, 497, 0,
	496, 498, 102, 103, 104, 105, 522, 106, 523, 524,
	556, 107, 0, 108, 0, 0, 0, 515, 110, 0,
	111, 0, 0, 0, 467, 112, 113, 503, 481, 0,
	0, 114, 115, 525, 0, 116, 0, 117, 0, 0,
	362, 0, 118, 513, 0, 215, 0, 119, 120, 509,
	511, 364, 0, 123, 0, 121, 0, 363, 122, 526,
	527, 528, 0, 493, 0, 365, 124, 366, 125, 126,
	0, 0, 514, 367, 127, 368, 0, 128, 0, 0,
	129, 0, 130, 131, 132, 133, 134, 369, 135, 136,
	139, 137, 457, 138, 482, 510, 140, 529, 141, 142,
	0, 0, 0, 0, 0, 143, 225, 370, 144, 371,
	504, 145, 146, 147, 0, 505, 148, 228, 149, 0,
	150, 151, 152, 530, 153, 154, 0, 156, 157, 155,
	158, 0, 159, 372, 160, 161, 471, 162, 0, 163,
	164, 165, 56, 231, 166, 167, 499, 168, 169, 373,
	170, 531, 233, 171, 0, 172, 173, 175, 532, 174,
	506, 0, 176, 58, 177, 178, 0, 236, 533, 534,
	0, 0, 179, 507, 508, 480, 180, 181, 182, 183,
	0, 0, 184, 185, 186, 500, 0, 187, 188, 189,
	359, 535, 0, 190, 0, 0, 0, 54, 191, 192,
	193, 194, 458, 55, 0, 486, 475, 476, 473, 474,
	462, 0, 0, 454, 455, 0, 0, 0, 0, 456,
	86, 87, 463, 88, 0, 0, 0, 0, 502, 468,
	0, 0, 0, 89, 90, 196, 516, 198, 517, 91,
	518, 519, 0, 92, 202, 203, 93, 483, 501, 520,
	521, 206, 0, 512, 0, 494, 0, 94, 95, 96,
	0, 97, 0, 98, 99, 0, 361, 100, 101, 0,
	495, 497, 0, 496, 498, 102, 103, 104, 105, 522,
	106, 523, 524, 0, 107, 0, 108, 0, 0, 0,
	515, 110, 0, 111, 0, 0, 0, 467, 112, 113,
	503, 481, 0, 0, 114, 115, 525, 0, 116, 0,
	117, 0, 0, 362, 0, 118, 513, 0, 215, 0,
	119, 120, 509, 511, 364, 0, 123, 0, 121, 0,
	363, 122, 526, 527, 528, 0, 493, 0, 365, 124,
	366, 125, 126, 0, 0, 514, 367, 127, 368, 0,
	128, 0, 0, 129, 0, 130, 131, 132, 133, 134,
	369, 135, 136, 139, 137, 457, 138, 482, 510, 140,
	529, 141, 142, 0, 0, 0, 0, 0, 143, 225,
	370, 144, 371, 504, 145, 146, 147, 0, 505, 148,
	228, 149, 0, 150, 151, 152, 530, 153, 154, 0,
	156, 157, 155, 158, 0, 159, 372, 160, 161, 471,
	162, 0, 163, 164, 165, 56, 231, 166, 167, 499,
	168, 169, 373, 170, 531, 233, 171, 0, 172, 173,
	175, 532, 174, 506, 0, 176, 58, 177, 178, 0,
	236, 533, 534, 0, 0, 179, 507, 508, 480, 180,
	181, 182, 183, 0, 0, 184, 185, 186, 500, 0,
	187, 188, 189, 359, 535, 0, 190, 0, 0, 0,
	54, 191, 192, 193, 194, 458, 55, 0, 486, 475,
	476, 473, 474, 462, 0, 0, 454, 455, 0, 0,
	0, 0, 456, 86, 87, 463, 88, 0, 0, 0,
	0, 502, 468, 0, 0, 0, 89, 90, 196, 516,
	198, 517, 91, 518, 519, 1141, 92, 202, 203, 93,
	483, 501, 520, 521, 206, 0, 512, 0, 494, 0,
	94, 95, 96, 0, 97, 0, 98, 99, 0, 361,
	100, 101, 0, 495, 497, 0, 496, 498, 102, 103,
	104, 105, 522, 106, 523, 524, 0, 107, 0, 108,
	0, 0, 0, 515, 110, 0, 111, 0, 0, 0,
	467, 112, 113, 503, 481, 0, 0, 114, 115, 525,
	0, 116, 0, 117, 0, 1146, 362, 0, 118, 513,
	0, 215, 0, 119, 120, 509, 511, 364, 0, 123,
	0, 121, 0, 363, 122, 526, 527, 528, 0, 493,
	0, 365, 124, 366, 125, 126, 0, 1142, 514, 367,
	127, 368, 0, 128, 0, 0, 129, 0, 130, 131,
	132, 133, 134, 369, 135, 136, 139, 137, 457, 138,
	482, 510, 140, 529, 141, 142, 0, 0, 0, 0,
	0, 143, 225, 370, 144, 371, 504, 145, 146, 147,
	0, 505, 148, 228, 149, 0, 150, 151, 152, 530,
	153, 154, 0, 156, 157, 155, 158, 0, 159, 372,
	160, 161, 471, 162, 0, 163, 164, 165, 0, 231,
	166, 167, 499, 168, 169, 373, 170, 531, 233, 171,
	0, 172, 173, 175, 532, 174, 506, 0, 176, 0,
	177, 178, 0, 236, 533, 534, 0, 1143, 179, 507,
	508, 480, 180, 181, 182, 183, 0, 0, 184, 185,
	186, 500, 0, 187, 188, 189, 241, 535, 0, 190,
	0, 0, 0, 0, 191, 192, 193, 194, 458, 0,
	0, 486, 475, 476, 473, 474, 462, 0, 0, 454,
	455, 0, 0, 0, 0, 456, 86, 87, 463, 88,
	0, 0, 0, 0, 502, 468, 0, 0, 0, 89,
	90, 196, 516, 198, 517, 91, 518, 519, 0, 92,
	202, 203, 93, 483, 501, 520, 521, 206, 0, 512,
	0, 494, 0, 94, 95, 96, 0, 97, 0, 98,
	99, 0, 361, 100, 101, 0, 495, 497, 0, 496,
	498, 102, 103, 104, 105, 522, 106, 523, 524, 0,
	107, 0, 108, 0, 0, 0, 515, 110, 0, 111,
	0, 0, 0, 467, 112, 113, 503, 481, 0, 0,
	114, 115, 525, 0, 116, 0, 117, 0, 0, 362,
	0, 118, 513, 0, 215, 0, 119, 120, 509, 511,
	364, 0, 123, 0, 121, 0, 363, 122, 526, 527,
	528, 0, 493, 0, 365, 124, 366, 125, 126, 0,
	0, 514, 367, 127, 368, 0, 128, 0, 0, 129,
	0, 130, 131, 132, 133, 134, 369, 135, 136, 139,
	137, 457, 138, 482, 510, 140, 529, 141, 142, 0,
	0, 0, 0, 0, 143, 225, 370, 144, 371, 504,
	145, 146, 147, 0, 505, 148, 228, 149, 0, 150,
	151, 152, 530, 153, 154, 0, 156, 157, 155, 158,
	0, 159, 372, 160, 161, 471, 162, 0, 163, 164,
	165, 0, 231, 166, 167, 499, 168, 169, 373, 170,
	531, 233, 171, 0, 172, 173, 175, 532, 174, 506,
	0, 176, 0, 177, 178, 0, 236, 533, 534, 0,
	0, 179, 507, 508, 480, 180, 181, 182, 183, 0,
	0, 184, 185, 186, 500, 0, 187, 188, 189, 241,
	535, 0, 190, 0, 0, 0, 0, 191, 192, 193,
	194, 458, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 454, 455, 0, 0, 0, 0, 456, 0,
	0, 463, 1505, 486, 475, 476, 473, 474, 462, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 87,
	0, 88, 0, 0, 0, 0, 502, 468, 0, 0,
	0, 89, 90, 196, 516, 198, 517, 91, 518, 519,
	0, 92, 202, 203, 93, 483, 501, 520, 521, 206,
	0, 512, 0, 494, 0, 94, 95, 96, 0, 97,
	0, 98, 99, 0, 361, 100, 101, 0, 495, 497,
	0, 496, 498, 102, 103, 104, 105, 522, 106, 523,
	524, 0, 107, 0, 108, 0, 0, 0, 515, 110,
	0, 111, 0, 0, 0, 467, 112, 113, 503, 481,
	0, 0, 114, 115, 525, 0, 116, 0, 117, 0,
	0, 362, 0, 118, 513, 0, 215, 0, 119, 120,
	509, 511, 364, 0, 123, 0, 121, 0, 363, 122,
	526, 527, 528, 0, 493, 0, 365, 124, 366, 125,
	126, 0, 0, 514, 367, 127, 368, 0, 128, 0,
	0, 129, 0, 130, 131, 132, 133, 134, 369, 135,
	136, 139, 137, 457, 138, 482, 510, 140, 529, 141,
	142, 0, 0, 0, 0, 0, 143, 225, 370, 144,
	371, 504, 145, 146, 147, 0, 505, 148, 228, 149,
	0, 150, 151, 152, 530, 153, 154, 0, 156, 157,
	155, 158, 0, 159, 372, 160, 161, 471, 162, 0,
	163, 164, 165, 0, 231, 166, 167, 499, 168, 169,
	373, 170, 531, 233, 171, 0, 172, 173, 175, 532,
	174, 506, 0, 176, 0, 177, 178, 0, 236, 533,
	534, 0, 0, 179, 507, 508, 480, 180, 181, 182,
	183, 0, 0, 184, 185, 186, 500, 0, 187, 188,
	189, 241, 535, 0, 190, 0, 0, 0, 0, 191,
	192, 193, 194, 458, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 454, 455, 0, 0, 0, 0,
	456, 0, 0, 463, 1455, 486, 475, 476, 473, 474,
	462, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 87, 0, 88, 0, 0, 0, 0, 502, 468,
	0, 0, 0, 89, 90, 196, 516, 198, 517, 91,
	518, 519, 0, 92, 202, 203, 93, 483, 501, 520,
	521, 206, 0, 512, 0, 494, 0, 94, 95, 96,
	0, 97, 0, 98, 99, 0, 361, 100, 101, 0,
	495, 497, 0, 496, 498, 102, 103, 104, 105, 522,
	106, 523, 524, 0, 107, 0, 108, 0, 0, 0,
	515, 110, 0, 111, 0, 0, 0, 467, 112, 113,
	503, 481, 0, 0, 114, 115, 525, 0, 116, 0,
	117, 0, 0, 362, 0, 118, 513, 0, 215, 0,
	119, 120, 509, 511, 364, 0, 123, 0, 121, 0,
	363, 122, 526, 527, 528, 0, 493, 0, 365, 124,
	366, 125, 126, 0, 0, 514, 367, 127, 368, 0,
	128, 0, 0, 129, 0, 130, 131, 132, 133, 134,
	369, 135, 136, 139, 137, 457, 138, 482, 510, 140,
	529, 141, 142, 0, 0, 0, 0, 0, 143, 225,
	370, 144, 371, 504, 145, 146, 147, 0, 505, 148,
	228, 149, 0, 150, 151, 152, 530, 153, 154, 0,
	156, 157, 155, 158, 0, 159, 372, 160, 161, 471,
	162, 0, 163, 164, 165, 0, 231, 166, 167, 499,
	168, 169, 373, 170, 531, 233, 171, 0, 172, 173,
	175, 532, 174, 506, 0, 176, 0, 177, 178, 0,
	236, 533, 534, 0, 0, 179, 507, 508, 480, 180,
	181, 182, 183, 0, 0, 184, 185, 186, 500, 0,
	187, 188, 189, 241, 535, 0, 190, 0, 0, 0,
	0, 191, 192, 193, 194, 458, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 454, 455, 0, 0,
	0, 0, 456, 0, 0, 463, 1098, 486, 475, 476,
	473, 474, 462, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 87, 0, 88, 0, 0, 0, 0,
	502, 468, 0, 0, 0, 89, 90, 196, 516, 198,
	517, 91, 518, 519, 0, 92, 202, 203, 93, 483,
	501, 520, 521, 206, 0, 512, 0, 494, 0, 94,
	95, 96, 0, 97, 0, 98, 99, 0, 361, 100,
	101, 0, 495, 497, 0, 496, 498, 102, 103, 104,
	105, 522, 106, 523, 524, 0, 107, 0, 108, 0,
	0, 0, 515, 110, 0, 111, 0, 0, 0, 467,
	112, 113, 503, 481, 0, 0, 114, 115, 525, 0,
	116, 0, 117, 0, 0, 362, 0, 118, 513, 0,
	215, 0, 119, 120, 509, 511, 364, 0, 123, 0,
	121, 0, 363, 122, 526, 527, 528, 0, 493, 0,
	365, 124, 366, 125, 126, 0, 0, 514, 367, 127,
	368, 0, 128, 0, 0, 129, 0, 130, 131, 132,
	133, 134, 369, 135, 136, 139, 137, 457, 138, 482,
	510, 140, 529, 141, 142, 0, 0, 0, 0, 0,
	143, 225, 370, 144, 371, 504, 145, 146, 147, 0,
	505, 148, 228, 149, 0, 150, 151, 152, 530, 153,
	154, 0, 156, 157, 155, 158, 0, 159, 372, 160,
	161, 471, 162, 0, 163, 164, 165, 0, 231, 166,
	167, 499, 168, 169, 373, 170, 531, 233, 171, 0,
	172, 173, 175, 532, 174, 506, 0, 176, 0, 177,
	178, 0, 236, 533, 534, 0, 0, 179, 507, 508,
	480, 180, 181, 182, 183, 0, 0, 184, 185, 186,
	500, 0, 187, 188, 189, 241, 535, 0, 190, 0,
	0, 0, 0, 191, 192, 193, 194, 458, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 454, 455,
	0, 0, 0, 0, 456, 859, 1095, 463, 486, 475,
	476, 473, 474, 462, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 86, 87, 0, 88, 0, 0, 0,
	0, 502, 468, 0, 0, 0, 89, 90, 196, 516,
	198, 517, 91, 518, 519, 0, 92, 202, 203, 93,
	483, 501, 520, 521, 206, 0, 512, 0, 494, 0,
	94, 95, 96, 0, 97, 0, 98, 99, 0, 361,
	100, 101, 0, 495, 497, 0, 496, 498, 102, 103,
	104, 105, 522, 106, 523, 524, 0, 107, 0, 108,
	0, 0, 0, 515, 110, 0, 111, 0, 0, 0,
	467, 112, 113, 503, 481, 0, 0, 114, 115, 525,
	0, 116, 0, 117, 0, 0, 362, 0, 118, 513,
	0, 215, 0, 119, 120, 509, 511, 364, 0, 123,
	0, 121, 0, 363, 122, 526, 527, 528, 0, 493,
	0, 365, 124, 366, 125, 126, 0, 0, 514, 367,
	127, 368, 0, 128, 0, 0, 129, 0, 130, 131,
	132, 133, 134, 369, 135, 136, 139, 137, 457, 138,
	482, 510, 140, 529, 141, 142, 0, 0, 0, 0,
	0, 143, 225, 370, 144, 371, 504, 145, 146, 147,
	0, 505, 148, 228, 149, 0, 150, 151, 152, 530,
	153, 154, 0, 156, 157, 155, 158, 0, 159, 372,
	160, 161, 471, 162, 0, 163, 164, 165, 0, 231,
	166, 167, 499, 168, 169, 373, 170, 531, 233, 171,
	0, 172, 173, 175, 532, 174, 506, 0, 176, 0,
	177, 178, 0, 236, 533, 534, 0, 0, 179, 507,
	508, 480, 180, 181, 182, 183, 0, 0, 184, 185,
	186, 500, 0, 187, 188, 189, 241, 535, 0, 190,
	0, 0, 0, 0, 191, 192, 193, 194, 458, 0,
	0, 486, 475, 476, 473, 474, 462, 0, 0, 454,
	455, 452, 0, 0, 0, 456, 86, 87, 463, 88,
	0, 0, 0, 0, 502, 468, 0, 0, 0, 89,
	90, 196, 516, 198, 517, 91, 518, 519, 0, 92,
	202, 203, 93, 483, 501, 520, 521, 206, 0, 512,
	0, 494, 0, 94, 95, 96, 0, 97, 0, 98,
	99, 0, 361, 100, 101, 0, 495, 497, 0, 496,
	498, 102, 103, 104, 105, 522, 106, 523, 524, 0,
	107, 0, 108, 0, 0, 0, 515, 110, 0, 111,
	0, 0, 0, 467, 112, 113, 503, 481, 0, 0,
	114, 115, 525, 0, 116, 0, 117, 0, 0, 362,
	0, 118, 513, 0, 215, 0, 119, 120, 509, 511,
	364, 0, 123, 0, 121, 0, 363, 122, 526, 527,
	528, 0, 493, 0, 365, 124, 366, 125, 126, 0,
	0, 514, 367, 127, 368, 0, 128, 0, 0, 129,
	0, 130, 131, 132, 133, 134, 369, 135, 136, 139,
	137, 457, 138, 482, 510, 140, 529, 141, 142, 0,
	0, 0, 0, 0, 143, 225, 370, 144, 371, 504,
	145, 146, 147, 0, 505, 148, 228, 149, 0, 150,
	151, 152, 530, 153, 154, 0, 156, 157, 155, 158,
	0, 159, 372, 160, 161, 471, 162, 0, 163, 164,
	165, 0, 231, 166, 167, 499, 168, 169, 373, 170,
	531, 233, 171, 0, 172, 173, 175, 532, 174, 506,
	0, 176, 0, 177, 178, 0, 236, 533, 534, 0,
	0, 179, 507, 508, 480, 180, 181, 182, 183, 0,
	0, 184, 185, 186, 500, 0, 187, 188, 189, 241,
	535, 1460, 190, 0, 0, 0, 0, 191, 192, 193,
	194, 458, 0, 0, 486, 475, 476, 473, 474, 462,
	0, 0, 454, 455, 0, 0, 0, 0, 456, 86,
	87, 463, 88, 0, 0, 0, 0, 502, 468, 0,
	0, 0, 89, 90, 196, 516, 198, 517, 91, 518,
	519, 0, 92, 202, 203, 93, 483, 501, 520, 521,
	206, 0, 512, 0, 494, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 361, 100, 101, 0, 495,
	497, 0, 496, 498, 102, 103, 104, 105, 522, 106,
	523, 524, 556, 107, 0, 108, 0, 0, 0, 515,
	110, 0, 111, 0, 0, 0, 467, 112, 113, 503,
	481, 0, 0, 114, 115, 525, 0, 116, 0, 117,
	0, 0, 362, 0, 118, 513, 0, 215, 0, 119,
	120, 509, 511, 364, 0, 123, 0, 121, 0, 363,
	122, 526, 527, 528, 0, 493, 0, 365, 124, 366,
	125, 126, 0, 0, 514, 367, 127, 368, 0, 128,
	0, 0, 129, 0, 130, 131, 132, 133, 134, 369,
	135, 136, 139, 137, 457, 138, 482, 510, 140, 529,
	141, 142, 0, 0, 0, 0, 0, 143, 225, 370,
	144, 371, 504, 145, 146, 147, 0, 505, 148, 228,
	149, 0, 150, 151, 152, 530, 153, 154, 0, 156,
	157, 155, 158, 0, 159, 372, 160, 161, 471, 162,
	0, 163, 164, 165, 0, 231, 166, 167, 499, 168,
	169, 373, 170, 531, 233, 171, 0, 172, 173, 175,
	532, 174, 506, 0, 176, 0, 177, 178, 0, 236,
	533, 534, 0, 0, 179, 507, 508, 480, 180, 181,
	182, 183, 0, 0, 184, 185, 186, 500, 0, 187,
	188, 189, 241, 535, 0, 190, 0, 0, 0, 0,
	191, 192, 193, 194, 458, 0, 0, 486, 475, 476,
	473, 474, 462, 0, 0, 454, 455, 0, 0, 0,
	0, 456, 86, 87, 463, 88, 0, 0, 0, 0,
	502, 468, 0, 0, 0, 89, 90, 196, 516, 198,
	517, 91, 518, 519, 0, 92, 202, 203, 93, 483,
	501, 520, 521, 206, 0, 512, 0, 494, 0, 94,
	95, 96, 0, 97, 0, 98, 99, 0, 361, 100,
	101, 0, 495, 497, 0, 496, 498, 102, 103, 104,
	105, 522, 106, 523, 524, 0, 107, 0, 108, 0,
	0, 0, 515, 110, 0, 111, 0, 0, 0, 467,
	112, 113, 503, 481, 0, 0, 114, 115, 525, 0,
	116, 0, 117, 0, 1146, 362, 0, 118, 513, 0,
	215, 0, 119, 120, 509, 511, 364, 0, 123, 0,
	121, 0, 363, 122, 526, 527, 528, 0, 493, 0,
	365, 124, 366, 125, 126, 0, 0, 514, 367, 127,
	368, 0, 128, 0, 0, 129, 0, 130, 131, 132,
	133, 134, 369, 135, 136, 139, 137, 457, 138, 482,
	510, 140, 529, 141, 142, 0, 0, 0, 0, 0,
	143, 225, 370, 144, 371, 504, 145, 146, 147, 0,
	505, 148, 228, 149, 0, 150, 151, 152, 530, 153,
	154, 0, 156, 157, 155, 158, 0, 159, 372, 160,
	161, 471, 162, 0, 163, 164, 165, 0, 231, 166,
	167, 499, 168, 169, 373, 170, 531, 233, 171, 0,
	172, 173, 175, 532, 174, 506, 0, 176, 0, 177,
	178, 0, 236, 533, 534, 0, 0, 179, 507, 508,
	480, 180, 181, 182, 183, 0, 0, 184, 185, 186,
	500, 0, 187, 188, 189, 241, 535, 0, 190, 0,
	0, 0, 0, 191, 192, 193, 194, 458, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 454, 455,
	0, 0, 0, 0, 456, 0, 0, 463, 486, 475,
	476, 473, 474, 462, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 86, 87, 794, 88, 0, 0, 0,
	0, 502, 468, 0, 0, 0, 89, 90, 196, 516,
	198, 517, 91, 518, 519, 0, 92, 202, 203, 93,
	483, 501, 520, 521, 206, 0, 512, 0, 494, 0,
	94, 95, 96, 0, 97, 0, 98, 99, 0, 361,
	100, 101, 0, 495, 497, 0, 496, 498, 102, 103,
	104, 105, 522, 106, 523, 524, 0, 107, 0, 108,
	0, 0, 0, 515, 110, 0, 111, 0, 0, 0,
	467, 112, 113, 503, 481, 0, 0, 114, 115, 525,
	0, 116, 0, 117, 0, 0, 362, 0, 118, 513,
	0, 215, 0, 119, 120, 509, 511, 364, 0, 123,
	0, 121, 0, 363, 122, 526, 527, 528, 0, 493,
	0, 365, 124, 366, 125, 126, 0, 0, 514, 367,
	127, 368, 0, 128, 0, 0, 129, 0, 130, 131,
	132, 133, 134, 369, 135, 136, 139, 137, 457, 138,
	482, 510, 140, 529, 141, 142, 0, 0, 0, 0,
	0, 143, 225, 370, 144, 371, 504, 145, 146, 147,
	0, 505, 148, 228, 149, 0, 150, 151, 152, 530,
	153, 154, 0, 156, 157, 155, 158, 0, 159, 372,
	160, 161, 471, 162, 0, 163, 164, 165, 0, 231,
	166, 167, 499, 168, 169, 373, 170, 531, 233, 171,
	0, 172, 173, 175, 532, 174, 506, 0, 176, 0,
	177, 178, 0, 236, 533, 534, 0, 0, 179, 507,
	508, 480, 180, 181, 182, 183, 0, 0, 184, 185,
	186, 500, 0, 187, 188, 189, 241, 535, 0, 190,
	0, 0, 0, 0, 191, 192, 193, 194, 458, 0,
	0, 486, 475, 476, 473, 474, 462, 0, 0, 454,
	455, 0, 0, 0, 0, 456, 86, 87, 463, 88,
	0, 0, 0, 0, 502, 468, 0, 0, 0, 89,
	90, 196, 516, 198, 517, 91, 518, 519, 0, 92,
	202, 203, 93, 483, 501, 520, 521, 206, 0, 512,
	0, 494, 0, 94, 95, 96, 0, 97, 0, 98,
	99, 0, 361, 100, 1806, 0, 495, 497, 0, 496,
	498, 102, 103, 104, 105, 522, 106, 523, 524, 0,
	107, 0, 108, 0, 0, 0, 515, 110, 0, 111,
	0, 0, 0, 467, 112, 113, 503, 481, 0, 0,
	114, 115, 525, 0, 116, 0, 117, 0, 0, 362,
	0, 118, 513, 0, 215, 0, 119, 120, 509, 511,
	364, 0, 123, 0, 121, 0, 363, 122, 526, 527,
	528, 0, 493, 0, 365, 124, 366, 125, 126, 0,
	0, 514, 367, 127, 368, 0, 128, 0, 0, 129,
	0, 130, 131, 132, 133, 134, 369, 135, 136, 139,
	137, 457, 138, 482, 510, 140, 529, 141, 142, 0,
	0, 0, 0, 0, 143, 225, 370, 144, 371, 504,
	145, 146, 147, 0, 505, 148, 228, 149, 0, 150,
	151, 152, 530, 153, 154, 0, 156, 157, 155, 158,
	0, 159, 372, 160, 161, 471, 162, 0, 163, 164,
	165, 0, 231, 166, 167, 499, 168, 169, 373, 170,
	531, 233, 171, 0, 172, 173, 175, 532, 174, 506,
	0, 176, 0, 177, 178, 0, 236, 533, 534, 0,
	0, 179, 507, 508, 480, 180, 181, 1805, 183, 0,
	0, 184, 185, 186, 500, 0, 187, 188, 189, 241,
	535, 0, 190, 0, 0, 0, 0, 191, 192, 193,
	194, 458, 0, 0, 486, 475, 476, 473, 474, 462,
	0, 0, 454, 455, 0, 0, 0, 0, 456, 86,
	87, 463, 88, 0, 0, 0, 0, 502, 468, 0,
	0, 0, 89, 90, 1804, 516, 198, 517, 91, 518,
	519, 0, 92, 202, 203, 93, 483, 501, 520, 521,
	206, 0, 512, 0, 494, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 361, 100, 1806, 0, 495,
	497, 0, 496, 498, 102, 103, 104, 105, 522, 106,
	523, 524, 0, 107, 0, 108, 0, 0, 0, 515,
	110, 0, 111, 0, 0, 0, 467, 112, 113, 503,
	481, 0, 0, 114, 115, 525, 0, 116, 0, 117,
	0, 0, 362, 0, 118, 513, 0, 215, 0, 119,
	120, 509, 511, 364, 0, 123, 0, 121, 0, 363,
	122, 526, 527, 528, 0, 493, 0, 365, 124, 366,
	125, 126, 0, 0, 514, 367, 127, 368, 0, 128,
	0, 0, 129, 0, 130, 131, 132, 133, 134, 369,
	135, 136, 139, 137, 457, 138, 482, 510, 140, 529,
	141, 142, 0, 0, 0, 0, 0, 143, 225, 370,
	144, 371, 504, 145, 146, 147, 0, 505, 148, 228,
	149, 0, 150, 151, 152, 530, 153, 154, 0, 156,
	157, 155, 158, 0, 159, 372, 160, 161, 471, 162,
	0, 163, 164, 165, 0, 231, 166, 167, 499, 168,
	169, 373, 170, 531, 233, 171, 0, 172, 173, 175,
	532, 174, 506, 0, 176, 0, 177, 178, 0, 236,
	533, 534, 0, 0, 179, 507, 508, 480, 180, 181,
	1805, 183, 0, 0, 184, 185, 186, 500, 0, 187,
	188, 189, 241, 535, 0, 190, 0, 0, 0, 0,
	191, 192, 193, 194, 458, 0, 0, 486, 475, 476,
	473, 474, 462, 0, 0, 454, 455, 0, 0, 0,
	0, 456, 86, 87, 463, 88, 0, 0, 0, 0,
	502, 468, 0, 0, 0, 89, 90, 196, 516, 198,
	517, 91, 518, 519, 0, 92, 202, 203, 93, 483,
	501, 520, 521, 206, 0, 512, 0, 494, 0, 94,
	95, 96, 0, 97, 0, 98, 99, 0, 361, 100,
	101, 0, 495, 497, 0, 496, 498, 102, 103, 104,
	105, 522, 106, 523, 524, 0, 107, 0, 108, 0,
	0, 0, 515, 110, 0, 111, 0, 0, 0, 467,
	112, 113, 503, 481, 0, 0, 114, 115, 525, 0,
	116, 0, 117, 0, 0, 362, 0, 118, 513, 0,
	215, 0, 119, 120, 509, 511, 364, 0, 123, 0,
	121, 0, 363, 122, 526, 527, 528, 0, 493, 0,
	365, 124, 366, 125, 126, 0, 0, 514, 367, 127,
	368, 0, 128, 0, 0, 129, 0, 130, 131, 132,
	133, 134, 369, 135, 136, 139, 137, 457, 138, 482,
	510, 140, 529, 141, 142, 0, 0, 0, 0, 0,
	143, 225, 370, 144, 371, 504, 145, 146, 147, 0,
	505, 148, 228, 149, 0, 150, 151, 152, 530, 153,
	154, 0, 156, 157, 155, 158, 0, 159, 372, 160,
	161, 471, 162, 0, 163, 164, 165, 0, 231, 166,
	167, 499, 168, 169, 373, 170, 531, 233, 171, 0,
	172, 173, 175, 532, 174, 506, 0, 176, 0, 177,
	178, 0, 236, 533, 534, 0, 0, 179, 507, 508,
	480, 180, 181, 182, 183, 0, 0, 184, 185, 186,
	500, 0, 187, 188, 189, 241, 535, 0, 190, 0,
	0, 0, 0, 191, 192, 193, 194, 458, 0, 0,
	486, 475, 476, 473, 474, 462, 0, 0, 454, 455,
	0, 0, 0, 0, 456, 86, 87, 463, 88, 0,
	0, 0, 0, 502, 468, 0, 0, 0, 89, 90,
	196, 516, 198, 517, 91, 518, 519, 0, 92, 202,
	203, 93, 483, 501, 520, 521, 206, 0, 512, 0,
	494, 0, 94, 95, 96, 0, 97, 0, 98, 99,
	0, 361, 100, 101, 0, 495, 497, 0, 496, 498,
	102, 103, 104, 105, 522, 106, 523, 524, 0, 107,
	0, 108, 0, 0, 0, 515, 110, 0, 111, 0,
	0, 0, 467, 112, 113, 503, 481, 0, 0, 114,
	115, 525, 0, 116, 0, 117, 0, 0, 362, 0,
	118, 513, 0, 215, 0, 119, 120, 509, 511, 364,
	0, 123, 0, 121, 0, 363, 122, 526, 527, 528,
	0, 493, 0, 365, 124, 366, 125, 126, 0, 0,
	514, 367, 127, 368, 0, 128, 0, 0, 129, 0,
	130, 131, 132, 133, 134, 369, 135, 136, 139, 137,
	0, 138, 482, 510, 140, 529, 141, 142, 0, 0,
	0, 0, 0, 143, 225, 370, 144, 371, 504, 145,
	146, 147, 0, 505, 148, 228, 149, 0, 150, 151,
	152, 530, 153, 154, 0, 156, 157, 155, 158, 0,
	159, 372, 160, 161, 1136, 162, 0, 163, 164, 165,
	0, 231, 166, 167, 499, 168, 169, 373, 170, 531,
	233, 171, 0, 172, 173, 175, 532, 174, 506, 0,
	176, 0, 177, 178, 0, 236, 533, 534, 0, 0,
	179, 507, 508, 480, 180, 181, 182, 183, 0, 0,
	184, 185, 186, 500, 0, 187, 188, 189, 241, 535,
	0, 190, 0, 0, 0, 0, 191, 192, 193, 194,
	486, 475, 476, 473, 474, 462, 0, 0, 0, 0,
	0, 1132, 1133, 0, 0, 86, 87, 1134, 88, 0,
	1135, 0, 0, 502, 468, 0, 0, 0, 89, 90,
	0, 516, 198, 517, 91, 518, 519, 0, 92, 202,
	203, 93, 483, 501, 520, 521, 206, 0, 512, 0,
	494, 0, 94, 95, 96, 0, 97, 0, 98, 99,
	0, 361, 100, 1806, 0, 495, 497, 0, 496, 498,
	102, 103, 104, 105, 522, 106, 523, 524, 0, 107,
	0, 108, 0, 0, 0, 515, 110, 0, 111, 0,
	0, 0, 467, 112, 113, 503, 481, 0, 0, 114,
	115, 525, 0, 116, 0, 117, 0, 0, 362, 0,
	118, 513, 0, 215, 0, 119, 120, 509, 511, 0,
	0, 123, 0, 121, 0, 363, 122, 526, 527, 528,
	0, 493, 0, 0, 124, 366, 125, 126, 0, 0,
	514, 367, 127, 0, 0, 128, 0, 0, 129, 0,
	130, 131, 132, 133, 134, 369, 135, 136, 139, 137,
	457, 138, 482, 510, 140, 529, 141, 142, 0, 0,
	0, 0, 0, 143, 225, 370, 144, 371, 504, 145,
	146, 147, 0, 505, 148, 228, 149, 0, 150, 151,
	152, 530, 153, 154, 0, 156, 157, 155, 158, 0,
	159, 372, 160, 161, 471, 162, 0, 163, 164, 165,
	0, 231, 166, 167, 499, 168, 169, 0, 170, 531,
	233, 171, 0, 172, 173, 175, 532, 174, 506, 0,
	176, 0, 177, 178, 0, 236, 533, 534, 0, 0,
	179, 507, 508, 480, 180, 181, 1805, 183, 0, 0,
	184, 185, 186, 500, 0, 187, 188, 189, 241, 535,
	0, 190, 0, 0, 0, 0, 191, 192, 193, 194,
	486, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 454, 455, 0, 0, 86, 87, 456, 88, 0,
	463, 0, 0, 502, 0, 0, 0, 0, 89, 90,
	196, 197, 198, 199, 91, 200, 201, 0, 92, 202,
	203, 93, 0, 501, 204, 205, 206, 0, 512, 0,
	494, 0, 94, 95, 96, 0, 97, 0, 98, 99,
	0, 361, 100, 101, 0, 495, 497, 0, 496, 498,
	102, 103, 104, 105, 208, 106, 209, 210, 0, 107,
	0, 108, 0, 0, 0, 109, 110, 0, 111, 0,
	0, 0, 211, 112, 113, 503, 0, 0, 0, 114,
	115, 213, 0, 116, 0, 117, 0, 0, 362, 0,
	118, 513, 0, 215, 0, 119, 120, 509, 511, 364,
	0, 123, 0, 121, 0, 363, 122, 218, 219, 220,
	0, 221, 0, 365, 124, 366, 125, 126, 0, 0,
	514, 367, 127, 368, 0, 128, 0, 0, 129, 0,
	130, 131, 132, 133, 134, 369, 135, 136, 139, 137,
	0, 138, 0, 510, 140, 224, 141, 142, 0, 0,
	0, 0, 0, 143, 225, 370, 144, 371, 504, 145,
	146, 147, 0, 505, 148, 228, 149, 0, 150, 151,
	152, 229, 153, 154, 0, 156, 157, 155, 158, 0,
	159, 372, 160, 161, 230, 162, 0, 163, 164, 165,
	0, 231, 166, 167, 499, 168, 169, 373, 170, 232,
	233, 171, 0, 172, 173, 175, 234, 174, 506, 0,
	176, 0, 177, 178, 0, 236, 237, 238, 0, 0,
	179, 507, 508, 0, 180, 181, 182, 183, 0, 0,
	184, 185, 186, 500, 0, 187, 188, 189, 241, 242,
	0, 190, 0, 355, 0, 0, 191, 192, 193, 194,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 87,
	0, 88, 0, 0, 0, 0, 195, 0, 0, 0,
	1571, 89, 90, 196, 197, 198, 199, 91, 200, 201,
	0, 92, 202, 203, 93, 0, 0, 204, 205, 206,
	0, 207, 0, 360, 0, 94, 95, 96, 0, 97,
	0, 98, 99, 0, 361, 100, 101, 0, 0, 0,
	0, 0, 0, 102, 103, 104, 105, 208, 106, 209,
	210, 0, 107, 0, 108, 0, 0, 0, 109, 110,
	0, 111, 0, 0, 0, 211, 112, 113, 212, 0,
	0, 0, 114, 115, 213, 0, 116, 0, 117, 0,
	0, 362, 0, 118, 214, 0, 215, 0, 119, 120,
	216, 217, 364, 0, 123, 0, 121, 0, 363, 122,
	218, 219, 220, 0, 221, 0, 365, 124, 366, 125,
	126, 0, 0, 222, 367, 127, 368, 0, 128, 0,
	0, 129, 0, 130, 131, 132, 133, 134, 369, 135,
	136, 139, 137, 0, 138, 0, 223, 140, 224, 141,
	142, 0, 0, 0, 0, 0, 143, 225, 370, 144,
	371, 226, 145, 146, 147, 0, 227, 148, 228, 149,
	0, 150, 151, 152, 229, 153, 154, 0, 156, 157,
	155, 158, 0, 159, 372, 160, 161, 230, 162, 0,
	163, 164, 165, 56, 231, 166, 167, 0, 168, 169,
	373, 170, 232, 233, 171, 0, 172, 173, 175, 234,
	174, 235, 0, 176, 58, 177, 178, 0, 236, 237,
	238, 0, 0, 179, 239, 240, 0, 180, 181, 182,
	183, 0, 0, 184, 185, 186, 0, 0, 187, 188,
	189, 359, 242, 0, 190, 0, 0, 0, 54, 191,
	192, 193, 194, 0, 55, 0, 355, 665, 0, 666,
	661, 656, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 86, 87, 53, 88, 0, 0, 0, 0, 195,
	0, 0, 0, 0, 89, 90, 196, 197, 198, 199,
	91, 200, 201, 0, 92, 202, 203, 93, 0, 0,
	204, 205, 206, 0, 207, 0, 360, 0, 94, 95,
	96, 0, 97, 0, 98, 99, 0, 361, 100, 101,
	0, 0, 0, 0, 0, 0, 102, 103, 104, 105,
	208, 106, 209, 210, 669, 107, 0, 108, 0, 0,
	0, 109, 110, 0, 111, 0, 0, 0, 211, 112,
	113, 212, 658, 0, 0, 114, 115, 213, 0, 116,
	0, 117, 0, 0, 362, 0, 118, 214, 0, 215,
	0, 119, 120, 216, 217, 364, 0, 123, 0, 121,
	0, 363, 122, 218, 219, 220, 0, 221, 0, 365,
	124, 366, 125, 126, 0, 0, 222, 367, 127, 368,
	0, 128, 0, 0, 129, 0, 130, 131, 132, 133,
	134, 369, 135, 136, 139, 137, 0, 138, 0, 223,
	140, 224, 141, 142, 0, 659, 0, 0, 0, 143,
	225, 370, 144, 371, 226, 145, 146, 147, 0, 227,
	148, 228, 149, 0, 150, 151, 152, 229, 153, 154,
	0, 156, 157, 155, 158, 0, 159, 372, 160, 161,
	230, 162, 0, 163, 164, 165, 0, 231, 166, 167,
	0, 168, 169, 373, 170, 232, 233, 171, 0, 172,
	173, 175, 234, 174, 235, 0, 176, 0, 177, 178,
	0, 236, 237, 238, 0, 0, 179, 239, 240, 657,
	180, 181, 182, 183, 0, 0, 184, 185, 186, 0,
	0, 187, 188, 189, 241, 242, 0, 190, 0, 0,
	0, 0, 191, 192, 193, 194, 355, 665, 0, 666,
	661, 656, 0, 0, 0, 0, 0, 667, 662, 0,
	0, 86, 87, 0, 88, 0, 0, 0, 0, 195,
	0, 0, 0, 0, 89, 90, 196, 197, 198, 199,
	91, 200, 201, 0, 92, 202, 203, 93, 0, 0,
	204, 205, 206, 0, 207, 0, 360, 0, 94, 95,
	96, 0, 97, 0, 98, 99, 0, 361, 100, 101,
	0, 0, 0, 0, 0, 0, 102, 103, 104, 105,
	208, 106, 209, 210, 652, 107, 0, 108, 0, 0,
	0, 109, 110, 0, 111, 0, 0, 0, 211, 112,
	113, 212, 658, 0, 0, 114, 115, 213, 0, 116,
	0, 117, 0, 0, 362, 0, 118, 214, 0, 215,
	0, 119, 120, 216, 217, 364, 0, 123, 0, 121,
	0, 363, 122, 218, 219, 220, 0, 221, 0, 365,
	124, 366, 125, 126, 0, 0, 222, 367, 127, 368,
	0, 128, 0, 0, 129, 0, 130, 131, 132, 133,
	134, 369, 135, 136, 139, 137, 0, 138, 0, 223,
	140, 224, 141, 142, 0, 659, 0, 0, 0, 143,
	225, 370, 144, 371, 226, 145, 146, 147, 0, 227,
	148, 228, 149, 0, 150, 151, 152, 229, 153, 154,
	0, 156, 157, 155, 158, 0, 159, 372, 160, 161,
	230, 162, 0, 163, 164, 165, 0, 231, 166, 167,
	0, 168, 169, 373, 170, 232, 233, 171, 0, 172,
	173, 175, 234, 174, 235, 0, 176, 0, 177, 178,
	0, 236, 237, 238, 0, 0, 179, 239, 240, 657,
	180, 181, 182, 183, 0, 0, 184, 185, 186, 0,
	0, 187, 188, 189, 241, 242, 0, 190, 0, 0,
	0, 0, 191, 192, 193, 194, 355, 665, 0, 666,
	661, 656, 0, 0, 0, 0, 0, 667, 662, 0,
	0, 86, 87, 0, 88, 0, 0, 0, 0, 195,
	0, 0, 0, 0, 89, 90, 196, 197, 198, 199,
	91, 200, 201, 0, 92, 202, 203, 93, 0, 0,
	204, 205, 206, 0, 207, 0, 360, 0, 94, 95,
	96, 0, 97, 0, 98, 99, 0, 361, 100, 101,
	0, 0, 0, 0, 0, 0, 102, 103, 104, 105,
	208, 106, 209, 210, 0, 107, 0, 108, 0, 0,
	0, 109, 110, 0, 111, 0, 0, 0, 211, 112,
	113, 212, 658, 0, 0, 114, 115, 213, 0, 116,
	0, 117, 0, 0, 362, 0, 118, 214, 0, 215,
	0, 119, 120, 216, 217, 364, 0, 123, 0, 121,
	0, 363, 122, 218, 219, 220, 0, 221, 0, 365,
	124, 366, 125, 126, 0, 0, 222, 367, 127, 368,
	0, 128, 0, 0, 129, 0, 130, 131, 132, 133,
	134, 369, 135, 136, 139, 137, 0, 138, 0, 223,
	140, 224, 141, 142, 0, 659, 0, 0, 0, 143,
	225, 370, 144, 371, 226, 145, 146, 147, 0, 227,
	148, 228, 149, 0, 150, 151, 152, 229, 153, 154,
	0, 156, 157, 155, 158, 0, 159, 372, 160, 161,
	230, 162, 0, 163, 164, 165, 0, 231, 166, 167,
	0, 168, 169, 373, 170, 232, 233, 171, 0, 172,
	173, 175, 234, 174, 235, 0, 176, 0, 177, 178,
	0, 236, 237, 238, 0, 0, 179, 239, 240, 657,
	180, 181, 182, 183, 0, 0, 184, 185, 186, 0,
	0, 187, 188, 189, 241, 242, 83, 190, 0, 0,
	0, 0, 191, 192, 193, 194, 0, 0, 0, 0,
	0, 86, 87, 0, 88, 0, 0, 667, 662, 195,
	0, 0, 0, 0, 89, 90, 196, 197, 198, 199,
	91, 200, 201, 0, 92, 202, 203, 93, 0, 0,
	204, 205, 206, 0, 207, 0, 0, 0, 94, 95,
	96, 0, 97, 0, 98, 99, 0, 0, 100, 101,
	0, 0, 0, 0, 0, 0, 102, 103, 104, 105,
	208, 106, 209, 210, 0, 107, 0, 108, 0, 0,
	0, 109, 110, 0, 111, 0, 0, 0, 211, 112,
	113, 212, 0, 0, 0, 114, 115, 213, 0, 116,
	0, 117, 0, 0, 0, 0, 118, 214, 0, 215,
	0, 119, 120, 216, 217, 0, 0, 123, 0, 121,
	0, 0, 122, 218, 219, 220, 0, 221, 0, 0,
	124, 0, 125, 126, 0, 0, 222, 0, 127, 0,
	0, 128, 0, 0, 129, 0, 130, 131, 132, 133,
	134, 0, 135, 136, 139, 137, 0, 138, 0, 223,
	140, 224, 141, 142, 0, 0, 328, 0, 0, 143,
	225, 0, 144, 0, 226, 145, 146, 147, 0, 227,
	148, 228, 149, 0, 150, 151, 152, 229, 153, 154,
	0, 156, 157, 155, 158, 0, 159, 0, 160, 161,
	230, 162, 0, 163, 164, 165, 56, 231, 166, 167,
	0, 168, 169, 0, 170, 232, 233, 171, 0, 172,
	173, 175, 234, 174, 235, 0, 176, 58, 177, 178,
	0, 236, 237, 238, 0, 0, 179, 239, 240, 0,
	180, 181, 182, 183, 0, 0, 184, 185, 186, 0,
	0, 187, 188, 189, 359, 242, 0, 190, 0, 83,
	0, 54, 191, 192, 193, 194, 0, 55, 0, 0,
	0, 0, 0, 0, 86, 87, 0, 88, 0, 0,
	0, 0, 195, 0, 0, 0, 1037, 89, 90, 196,
	197, 198, 199, 91, 200, 201, 0, 92, 202, 203,
	93, 0, 0, 204, 205, 206, 0, 207, 0, 0,
	0, 94, 95, 96, 0, 97, 0, 98, 99, 0,
	0, 100, 101, 0, 0, 0, 0, 0, 0, 102,
	103, 104, 105, 208, 106, 209, 210, 0, 107, 0,
	108, 0, 0, 0, 109, 110, 0, 111, 0, 0,
	0, 211, 112, 113, 212, 0, 0, 0, 114, 115,
	213, 0, 116, 0, 117, 0, 0, 0, 0, 118,
	214, 0, 215, 0, 119, 120, 216, 217, 0, 0,
	123, 0, 121, 0, 0, 122, 218, 219, 220, 0,
	221, 0, 0, 124, 0, 125, 126, 0, 0, 222,
	0, 127, 0, 0, 128, 0, 0, 129, 0, 130,
	131, 132, 133, 134, 0, 135, 136, 139, 137, 0,
	138, 0, 223, 140, 224, 141, 142, 0, 0, 0,
	0, 0, 143, 225, 0, 144, 0, 226, 145, 146,
	147, 0, 227, 148, 228, 149, 0, 150, 151, 152,
	229, 153, 154, 0, 156, 157, 155, 158, 0, 159,
	0, 160, 161, 230, 162, 0, 163, 164, 165, 56,
	231, 166, 167, 0, 168, 169, 0, 170, 232, 233,
	171, 0, 172, 173, 175, 234, 174, 235, 0, 176,
	58, 177, 178, 0, 236, 237, 238, 0, 0, 179,
	239, 240, 0, 180, 181, 182, 183, 0, 0, 184,
	185, 186, 0, 0, 187, 188, 189, 359, 242, 0,
	190, 0, 83, 0, 54, 191, 192, 193, 194, 0,
	55, 0, 0, 0, 0, 0, 0, 86, 87, 0,
	88, 0, 0, 0, 0, 195, 0, 1257, 0, 53,
	89, 90, 196, 197, 198, 199, 91, 200, 201, 0,
	92, 202, 203, 93, 0, 0, 204, 205, 206, 0,
	207, 0, 0, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 0, 100, 101, 0, 0, 0, 0,
	0, 0, 102, 103, 104, 105, 208, 106, 209, 210,
	0, 107, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 211, 112, 113, 212, 0, 0,
	0, 114, 115, 213, 0, 116, 0, 117, 0, 0,
	0, 0, 118, 214, 0, 215, 0, 119, 120, 216,
	217, 0, 0, 123, 0, 121, 0, 0, 122, 218,
	219, 220, 0, 221, 0, 0, 124, 0, 125, 126,
	0, 0, 222, 0, 127, 0, 0, 128, 0, 0,
	129, 0, 130, 131, 132, 133, 134, 0, 135, 136,
	139, 137, 0, 138, 0, 223, 140, 224, 141, 142,
	0, 0, 0, 0, 0, 143, 225, 0, 144, 0,
	226, 145, 146, 147, 0, 227, 148, 228, 149, 0,
	150, 151, 152, 229, 153, 154, 0, 156, 157, 155,
	158, 0, 159, 0, 160, 161, 230, 162, 0, 163,
	164, 165, 0, 231, 166, 167, 0, 168, 169, 0,
	170, 232, 233, 171, 0, 172, 173, 175, 234, 174,
	235, 0, 176, 0, 177, 178, 0, 236, 237, 238,
	0, 0, 179, 239, 240, 0, 180, 181, 182, 183,
	0, 0, 184, 185, 186, 0, 0, 187, 188, 189,
	241, 242, 0, 190, 0, 0, 83, 0, 191, 192,
	193, 194, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 86, 87, 0, 88, 0, 0, 0, 0, 195,
	0, 0, 0, 444, 89, 90, 196, 197, 198, 199,
	91, 200, 201, 0, 92, 202, 203, 93, 0, 0,
	204, 205, 206, 0, 207, 0, 0, 0, 94, 95,
	96, 0, 97, 0, 98, 99, 0, 0, 100, 101,
	0, 0, 0, 0, 0, 0, 102, 103, 104, 105,
	208, 106, 209, 210, 0, 107, 0, 108, 0, 0,
	0, 109, 110, 0, 111, 0, 0, 0, 211, 112,
	113, 212, 0, 0, 0, 114, 115, 213, 0, 116,
	0, 117, 0, 0, 0, 0, 118, 214, 0, 215,
	0, 119, 120, 216, 217, 0, 0, 123, 0, 121,
	0, 0, 122, 218, 219, 220, 0, 221, 0, 0,
	124, 0, 125, 126, 0, 0, 222, 0, 127, 0,
	0, 128, 0, 0, 129, 0, 130, 131, 132, 133,
	134, 0, 135, 136, 139, 137, 0, 138, 0, 223,
	140, 224, 141, 142, 0, 0, 328, 0, 0, 143,
	225, 0, 144, 0, 226, 145, 146, 147, 0, 227,
	148, 228, 149, 0, 150, 151, 152, 229, 153, 154,
	0, 156, 157, 155, 158, 0, 159, 0, 160, 161,
	230, 162, 0, 163, 164, 165, 0, 231, 166, 167,
	0, 168, 169, 0, 170, 232, 233, 171, 0, 172,
	173, 175, 234, 174, 235, 0, 176, 0, 177, 178,
	0, 236, 237, 238, 0, 0, 179, 239, 240, 0,
	180, 181, 182, 183, 0, 0, 184, 185, 186, 0,
	0, 187, 188, 189, 241, 242, 0, 190, 0, 83,
	0, 0, 191, 192, 193, 194, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 87, 0, 88, 0, 0,
	0, 0, 195, 0, 0, 0, 1037, 89, 90, 196,
	197, 198, 199, 91, 200, 201, 0, 92, 202, 203,
	93, 0, 0, 204, 205, 206, 0, 207, 0, 0,
	0, 94, 95, 96, 0, 97, 0, 98, 99, 0,
	0, 100, 101, 0, 0, 0, 0, 0, 0, 102,
	103, 104, 105, 208, 106, 209, 210, 0, 107, 0,
	108, 0, 0, 0, 109, 110, 0, 111, 0, 0,
	0, 211, 112, 113, 212, 0, 0, 0, 114, 115,
	213, 0, 116, 0, 117, 0, 0, 0, 0, 118,
	214, 0, 215, 0, 119, 120, 216, 217, 0, 0,
	123, 0, 121, 0, 0, 122, 218, 219, 220, 0,
	221, 0, 0, 124, 0, 125, 126, 0, 0, 222,
	0, 127, 0, 0, 128, 0, 0, 129, 0, 130,
	131, 132, 133, 134, 0, 135, 136, 139, 137, 0,
	138, 0, 223, 140, 224, 141, 142, 0, 0, 0,
	0, 0, 143, 225, 0, 144, 0, 226, 145, 146,
	147, 0, 227, 148, 228, 149, 0, 150, 151, 152,
	229, 153, 154, 0, 156, 157, 155, 158, 0, 159,
	0, 160, 161, 230, 162, 0, 163, 164, 165, 0,
	231, 166, 167, 0, 168, 169, 0, 170, 232, 233,
	171, 0, 172, 173, 175, 234, 174, 235, 0, 176,
	0, 177, 178, 0, 236, 237, 238, 0, 0, 179,
	239, 240, 0, 180, 181, 182, 183, 0, 0, 184,
	185, 186, 0, 0, 187, 188, 189, 241, 242, 0,
	190, 0, 83, 0, 0, 191, 192, 193, 194, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 87, 0,
	88, 0, 0, 0, 0, 195, 0, 0, 0, 948,
	89, 90, 196, 197, 198, 199, 91, 200, 201, 0,
	92, 202, 203, 93, 0, 0, 204, 205, 206, 0,
	207, 0, 0, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 0, 100, 101, 0, 0, 0, 0,
	0, 0, 102, 103, 104, 105, 208, 106, 209, 210,
	0, 107, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 211, 112, 113, 212, 0, 0,
	0, 114, 115, 213, 0, 116, 0, 117, 0, 0,
	0, 0, 118, 214, 0, 215, 0, 119, 120, 216,
	217, 0, 0, 123, 0, 121, 0, 0, 122, 218,
	219, 220, 0, 221, 0, 0, 124, 0, 125, 126,
	0, 0, 222, 0, 127, 0, 0, 128, 0, 0,
	129, 0, 130, 131, 132, 133, 134, 0, 135, 136,
	139, 137, 0, 138, 0, 223, 140, 224, 141, 142,
	0, 0, 0, 0, 0, 143, 225, 0, 144, 0,
	226, 145, 146, 147, 0, 227, 148, 228, 149, 0,
	150, 151, 152, 229, 153, 154, 0, 156, 157, 155,
	158, 0, 159, 0, 160, 161, 230, 162, 0, 163,
	164, 165, 0, 231, 166, 167, 0, 168, 169, 0,
	170, 232, 233, 171, 0, 172, 173, 175, 234, 174,
	235, 0, 176, 0, 177, 178, 0, 236, 237, 238,
	0, 0, 179, 239, 240, 0, 180, 181, 182, 183,
	0, 0, 184, 185, 186, 0, 0, 187, 188, 189,
	241, 242, 0, 190, 0, 83, 0, 0, 191, 192,
	193, 194, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 87, 0, 88, 0, 0, 0, 0, 195, 0,
	0, 0, 1470, 89, 90, 196, 197, 198, 199, 91,
	200, 201, 0, 92, 202, 203, 93, 0, 0, 204,
	205, 206, 0, 207, 0, 0, 0, 94, 95, 96,
	0, 97, 0, 98, 99, 0, 0, 100, 101, 0,
	0, 0, 0, 0, 0, 102, 103, 104, 105, 208,
	106, 209, 210, 0, 107, 0, 108, 0, 0, 0,
	109, 110, 0, 111, 0, 0, 0, 211, 112, 113,
	212, 0, 0, 0, 114, 115, 213, 0, 116, 0,
	117, 0, 0, 0, 0, 118, 214, 0, 215, 0,
	119, 120, 216, 217, 0, 0, 123, 0, 121, 0,
	0, 122, 218, 219, 220, 0, 221, 0, 0, 124,
	0, 125, 126, 0, 0, 222, 0, 127, 0, 0,
	128, 0, 0, 129, 0, 130, 131, 132, 133, 134,
	0, 135, 136, 139, 137, 0, 138, 0, 223, 140,
	224, 141, 142, 0, 0, 0, 0, 0, 143, 225,
	0, 144, 0, 226, 145, 146, 147, 0, 227, 148,
	228, 149, 0, 150, 151, 152, 229, 153, 154, 0,
	156, 157, 155, 158, 0, 159, 0, 160, 161, 230,
	162, 0, 163, 164, 165, 0, 231, 166, 167, 0,
	168, 169, 0, 170, 232, 233, 171, 0, 172, 173,
	175, 234, 174, 235, 0, 176, 0, 177, 178, 0,
	236, 237, 238, 0, 0, 179, 239, 240, 0, 180,
	181, 182, 183, 0, 0, 184, 185, 186, 0, 0,
	187, 188, 189, 241, 242, 0, 190, 0, 83, 0,
	0, 191, 192, 193, 194, 0, 0, 0, 0, 0,
	0, 0, 0, 86, 87, 0, 88, 0, 0, 0,
	0, 195, 0, 0, 0, 546, 89, 90, 196, 197,
	198, 199, 91, 200, 201, 0, 92, 202, 203, 93,
	0, 0, 204, 205, 206, 0, 207, 0, 0, 0,
	94, 95, 96, 0, 97, 0, 98, 99, 0, 0,
	100, 101, 0, 0, 0, 0, 0, 0, 102, 103,
	636, 105, 208, 106, 209, 210, 0, 107, 0, 108,
	0, 0, 0, 109, 110, 0, 111, 0, 0, 0,
	211, 112, 113, 212, 0, 0, 0, 114, 115, 213,
	0, 116, 0, 117, 0, 0, 0, 0, 118, 214,
	0, 215, 0, 119, 120, 216, 217, 0, 0, 123,
	0, 121, 0, 0, 122, 218, 219, 220, 0, 221,
	0, 0, 124, 0, 125, 126, 0, 0, 222, 0,
	127, 0, 0, 128, 0, 0, 129, 0, 130, 131,
	132, 133, 134, 0, 135, 136, 139, 137, 0, 138,
	0, 223, 140, 224, 141, 142, 0, 0, 0, 0,
	0, 143, 225, 0, 144, 0, 226, 145, 146, 147,
	0, 227, 148, 228, 149, 0, 150, 151, 152, 229,
	153, 154, 0, 156, 157, 155, 158, 0, 159, 0,
	160, 161, 230, 162, 0, 163, 164, 165, 0, 231,
	166, 167, 0, 168, 169, 0, 170, 232, 233, 171,
	0, 172, 173, 175, 234, 174, 235, 0, 176, 635,
	177, 178, 0, 236, 237, 238, 0, 0, 179, 239,
	240, 0, 180, 181, 182, 183, 0, 0, 184, 185,
	186, 0, 0, 187, 188, 189, 241, 242, 0, 190,
	83, 0, 0, 0, 191, 192, 193, 194, 0, 0,
	0, 0, 0, 0, 0, 86, 87, 0, 88, 0,
	0, 639, 0, 195, 0, 0, 0, 0, 89, 90,
	196, 197, 198, 199, 91, 200, 201, 0, 92, 202,
	203, 93, 0, 0, 204, 205, 206, 0, 207, 0,
	0, 0, 94, 95, 96, 0, 97, 0, 98, 99,
	0, 0, 100, 101, 0, 0, 0, 0, 0, 0,
	102, 103, 104, 105, 208, 106, 209, 210, 0, 107,
	0, 108, 0, 0, 0, 109, 110, 0, 111, 0,
	0, 0, 211, 112, 113, 212, 0, 0, 0, 114,
	115, 213, 0, 116, 0, 117, 0, 0, 0, 0,
	118, 214, 0, 215, 0, 119, 120, 216, 217, 0,
	0, 123, 0, 121, 0, 0, 122, 218, 219, 220,
	0, 221, 0, 0, 124, 0, 125, 126, 0, 0,
	222, 0, 127, 0, 0, 128, 0, 0, 129, 0,
	130, 131, 132, 133, 134, 0, 135, 136, 139, 137,
	0, 138, 0, 223, 140, 224, 141, 142, 0, 0,
	0, 0, 0, 143, 225, 0, 144, 0, 226, 145,
	146, 147, 0, 227, 148, 228, 149, 0, 150, 151,
	152, 229, 153, 154, 0, 156, 157, 155, 158, 0,
	159, 0, 160, 161, 230, 162, 0, 163, 164, 165,
	0, 231, 166, 167, 0, 168, 169, 0, 170, 232,
	233, 171, 0, 172, 173, 175, 234, 174, 235, 0,
	176, 0, 177, 178, 0, 236, 237, 238, 0, 0,
	179, 239, 240, 0, 180, 181, 182, 183, 0, 0,
	184, 185, 186, 0, 0, 187, 188, 189, 241, 242,
	0, 190, 355, 0, 0, 0, 191, 192, 193, 194,
	0, 0, 0, 0, 0, 0, 0, 86, 87, 0,
	88, 0, 0, 639, 0, 195, 0, 0, 0, 0,
	89, 90, 196, 197, 198, 199, 91, 200, 201, 0,
	92, 202, 203, 93, 0, 0, 204, 205, 206, 0,
	207, 0, 360, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 361, 100, 101, 0, 0, 0, 0,
	0, 0, 102, 103, 104, 105, 208, 106, 209, 210,
	0, 107, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 211, 112, 113, 212, 0, 0,
	0, 114, 115, 213, 0, 116, 0, 117, 0, 0,
	362, 0, 118, 214, 0, 215, 0, 119, 120, 216,
	217, 364, 0, 123, 0, 121, 0, 363, 122, 218,
	219, 220, 0, 221, 0, 365, 124, 366, 125, 126,
	0, 0, 222, 367, 127, 368, 0, 128, 0, 0,
	129, 0, 130, 131, 132, 133, 134, 369, 135, 136,
	139, 137, 0, 138, 0, 223, 140, 224, 141, 142,
	0, 0, 0, 0, 0, 143, 225, 370, 144, 371,
	226, 145, 146, 147, 0, 227, 148, 228, 149, 0,
	150, 151, 152, 229, 153, 154, 0, 156, 157, 155,
	158, 0, 159, 372, 160, 161, 230, 162, 0, 163,
	164, 165, 0, 231, 166, 167, 0, 168, 169, 373,
	170, 232, 233, 171, 0, 172, 173, 175, 234, 174,
	235, 0, 176, 0, 177, 178, 0, 236, 237, 238,
	0, 0, 179, 239, 240, 0, 180, 181, 182, 183,
	0, 0, 184, 185, 186, 0, 0, 187, 188, 189,
	241, 242, 83, 190, 0, 0, 0, 0, 191, 192,
	193, 194, 0, 0, 0, 0, 0, 86, 87, 0,
	88, 0, 0, 0, 0, 195, 0, 0, 0, 0,
	89, 90, 196, 197, 198, 199, 91, 200, 201, 0,
	92, 202, 203, 93, 0, 0, 204, 205, 206, 921,
	207, 0, 0, 0, 94, 95, 96, 0, 97, 919,
	98, 99, 0, 0, 100, 101, 0, 0, 0, 0,
	0, 0, 102, 103, 104, 105, 208, 106, 209, 210,
	0, 107, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 211, 112, 113, 212, 0, 1014,
	0, 114, 115, 213, 0, 116, 0, 117, 924, 0,
	0, 0, 118, 214, 0, 215, 0, 119, 120, 216,
	217, 0, 0, 123, 1012, 121, 0, 0, 122, 218,
	219, 220, 0, 221, 0, 0, 124, 0, 125, 126,
	0, 0, 222, 0, 127, 0, 0, 128, 0, 0,
	129, 0, 130, 131, 132, 133, 134, 0, 135, 136,
	139, 137, 0, 138, 0, 223, 140, 224, 141, 142,
	0, 0, 0, 0, 0, 143, 225, 0, 144, 0,
	226, 145, 146, 147, 0, 227, 148, 228, 149, 923,
	150, 151, 152, 229, 153, 154, 0, 156, 157, 155,
	158, 0, 159, 0, 160, 161, 230, 162, 0, 163,
	164, 165, 0, 231, 166, 167, 0, 168, 169, 0,
	170, 232, 233, 171, 0, 172, 173, 175, 234, 174,
	235, 0, 176, 0, 177, 178, 0, 236, 237, 238,
	0, 0, 179, 239, 240, 0, 180, 181, 182, 183,
	0, 1013, 184, 185, 186, 0, 0, 187, 188, 189,
	241, 242, 83, 190, 0, 0, 0, 0, 191, 192,
	193, 194, 0, 0, 0, 0, 0, 86, 87, 0,
	88, 0, 0, 0, 0, 195, 0, 0, 0, 0,
	89, 90, 196, 197, 198, 199, 91, 200, 201, 0,
	92, 202, 203, 93, 0, 0, 204, 205, 206, 921,
	207, 0, 0, 916, 94, 95, 96, 0, 97, 919,
	98, 99, 0, 0, 100, 101, 0, 0, 0, 0,
	0, 0, 102, 103, 104, 105, 208, 106, 209, 210,
	0, 107, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 211, 112, 113, 212, 0, 0,
	0, 114, 115, 213, 0, 116, 0, 117, 924, 0,
	0, 0, 118, 214, 0, 215, 0, 119, 120, 915,
	217, 0, 0, 123, 0, 121, 0, 0, 122, 218,
	219, 220, 0, 221, 0, 0, 124, 0, 125, 126,
	0, 0, 222, 0, 127, 0, 0, 128, 0, 0,
	129, 0, 130, 131, 132, 133, 134, 0, 135, 136,
	139, 137, 0, 138, 0, 223, 140, 224, 141, 142,
	0, 0, 0, 0, 0, 143, 225, 0, 144, 0,
	226, 145, 146, 147, 0, 227, 148, 228, 149, 923,
	150, 151, 152, 229, 153, 154, 0, 156, 157, 155,
	158, 0, 159, 0, 160, 161, 230, 162, 0, 163,
	164, 165, 0, 231, 166, 167, 0, 168, 169, 0,
	170, 232, 233, 171, 0, 172, 173, 175, 234, 174,
	235, 0, 176, 0, 177, 178, 0, 236, 237, 238,
	0, 0, 179, 239, 240, 0, 180, 181, 182, 183,
	0, 922, 184, 185, 186, 0, 0, 187, 188, 189,
	241, 242, 83, 190, 0, 0, 0, 0, 191, 192,
	193, 194, 0, 0, 0, 0, 0, 86, 87, 0,
	88, 0, 0, 0, 0, 195, 0, 1257, 0, 0,
	89, 90, 196, 197, 198, 199, 91, 200, 201, 0,
	92, 202, 203, 93, 0, 0, 204, 205, 206, 0,
	207, 0, 0, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 0, 100, 101, 0, 0, 0, 0,
	0, 0, 102, 103, 104, 105, 208, 106, 209, 210,
	0, 107, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 211, 112, 113, 212, 0, 0,
	0, 114, 115, 213, 0, 116, 0, 117, 0, 0,
	0, 0, 118, 214, 0, 215, 0, 119, 120, 216,
	217, 0, 0, 123, 0, 121, 0, 0, 122, 218,
	219, 220, 0, 221, 0, 0, 124, 0, 125, 126,
	0, 0, 222, 0, 127, 0, 0, 128, 0, 0,
	129, 0, 130, 131, 132, 133, 134, 0, 135, 136,
	139, 137, 0, 138, 0, 223, 140, 224, 141, 142,
	0, 0, 0, 0, 0, 143, 225, 0, 144, 0,
	226, 145, 146, 147, 0, 227, 148, 228, 149, 0,
	150, 151, 152, 229, 153, 154, 0, 156, 157, 155,
	158, 0, 159, 0, 160, 161, 230, 162, 0, 163,
	164, 165, 0, 231, 166, 167, 0, 168, 169, 0,
	170, 232, 233, 171, 0, 172, 173, 175, 234, 174,
	235, 0, 176, 0, 177, 178, 0, 236, 237, 238,
	0, 0, 179, 239, 240, 0, 180, 181, 182, 183,
	0, 0, 184, 185, 186, 0, 0, 187, 188, 189,
	241, 242, 83, 190, 0, 0, 0, 0, 191, 192,
	193, 194, 0, 0, 0, 0, 0, 86, 87, 0,
	88, 0, 0, 0, 0, 195, 0, 0, 0, 0,
	89, 90, 196, 197, 198, 199, 91, 200, 201, 0,
	92, 202, 203, 93, 0, 0, 204, 205, 206, 0,
	207, 0, 0, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 0, 100, 101, 0, 0, 0, 0,
	0, 0, 102, 103, 104, 105, 208, 106, 209, 210,
	0, 107, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 211, 112, 113, 212, 0, 0,
	0, 114, 115, 213, 0, 116, 0, 117, 0, 0,
	0, 0, 118, 214, 0, 215, 0, 119, 120, 216,
	217, 0, 0, 123, 0, 121, 0, 0, 122, 218,
	219, 220, 0, 221, 0, 0, 124, 0, 125, 126,
	0, 0, 222, 0, 127, 0, 0, 128, 0, 0,
	129, 0, 130, 131, 132, 133, 134, 0, 135, 136,
	139, 137, 0, 138, 0, 223, 140, 224, 141, 142,
	0, 0, 328, 0, 0, 143, 225, 0, 144, 0,
	226, 145, 146, 147, 0, 227, 148, 228, 149, 0,
	150, 151, 152, 229, 153, 154, 0, 156, 157, 155,
	158, 0, 159, 0, 160, 161, 230, 162, 0, 163,
	164, 165, 0, 231, 166, 167, 0, 168, 169, 0,
	170, 232, 233, 171, 0, 172, 173, 175, 234, 174,
	235, 0, 176, 0, 177, 178, 0, 236, 237, 238,
	0, 0, 179, 239, 240, 0, 180, 181, 182, 183,
	0, 0, 184, 185, 186, 0, 0, 187, 188, 189,
	241, 242, 83, 190, 0, 0, 0, 0, 191, 192,
	193, 194, 0, 0, 0, 0, 0, 86, 87, 0,
	88, 0, 0, 0, 0, 195, 0, 0, 0, 0,
	89, 90, 196, 197, 198, 199, 91, 200, 201, 0,
	92, 202, 203, 93, 0, 0, 204, 205, 206, 0,
	207, 0, 0, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 0, 100, 101, 0, 0, 0, 0,
	0, 0, 102, 103, 104, 105, 208, 106, 209, 210,
	0, 107, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 211, 112, 113, 212, 0, 0,
	0, 114, 115, 213, 0, 116, 0, 117, 0, 0,
	0, 0, 118, 214, 0, 215, 0, 119, 120, 588,
	217, 0, 0, 123, 0, 121, 0, 0, 122, 218,
	219, 220, 0, 221, 0, 0, 124, 0, 125, 126,
	0, 0, 222, 0, 127, 0, 0, 128, 0, 0,
	129, 0, 130, 131, 132, 133, 134, 0, 135, 136,
	139, 137, 0, 138, 0, 223, 140, 224, 141, 142,
	0, 0, 328, 0, 0, 143, 225, 0, 144, 0,
	226, 145, 146, 147, 0, 227, 148, 228, 149, 0,
	150, 151, 152, 229, 153, 154, 0, 156, 157, 155,
	158, 0, 159, 0, 160, 161, 230, 162, 0, 163,
	164, 165, 0, 231, 166, 167, 0, 168, 169, 0,
	170, 232, 233, 171, 0, 172, 173, 175, 234, 174,
	235, 0, 176, 0, 177, 178, 0, 236, 237, 238,
	0, 0, 179, 239, 240, 0, 180, 181, 182, 183,
	0, 0, 184, 185, 186, 0, 0, 187, 188, 189,
	241, 242, 83, 190, 0, 0, 0, 0, 191, 192,
	193, 194, 0, 0, 0, 0, 0, 86, 87, 380,
	88, 0, 0, 0, 0, 195, 0, 0, 0, 0,
	89, 90, 196, 197, 198, 199, 91, 200, 201, 0,
	92, 202, 203, 93, 0, 0, 204, 205, 206, 0,
	207, 0, 0, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 0, 100, 101, 0, 0, 0, 0,
	0, 0, 102, 103, 104, 105, 208, 106, 209, 210,
	0, 107, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 211, 112, 113, 212, 0, 0,
	0, 114, 115, 213, 0, 116, 0, 117, 0, 0,
	0, 0, 118, 214, 0, 215, 0, 119, 120, 216,
	217, 0, 0, 123, 0, 121, 0, 0, 122, 218,
	219, 220, 0, 221, 0, 0, 124, 0, 125, 126,
	0, 0, 222, 0, 127, 0, 0, 128, 0, 0,
	129, 0, 130, 131, 132, 133, 134, 0, 135, 136,
	139, 137, 0, 138, 0, 223, 140, 224, 141, 142,
	0, 0, 0, 0, 0, 143, 225, 0, 144, 0,
	226, 145, 146, 147, 0, 227, 148, 228, 149, 0,
	150, 151, 152, 229, 153, 154, 0, 156, 157, 155,
	158, 0, 159, 0, 160, 161, 230, 162, 0, 163,
	164, 165, 0, 231, 166, 167, 0, 168, 169, 0,
	170, 232, 233, 171, 0, 172, 173, 175, 234, 174,
	235, 0, 176, 0, 177, 178, 0, 236, 237, 238,
	0, 0, 179, 239, 240, 0, 180, 181, 182, 183,
	0, 0, 184, 185, 186, 0, 0, 187, 188, 189,
	241, 242, 83, 190, 0, 0, 0, 0, 191, 192,
	193, 194, 0, 0, 0, 0, 0, 86, 87, 0,
	88, 0, 0, 0, 0, 195, 0, 0, 0, 0,
	89, 90, 196, 197, 198, 199, 91, 200, 201, 0,
	92, 202, 203, 93, 0, 0, 204, 205, 206, 0,
	207, 0, 0, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 0, 100, 101, 0, 0, 0, 0,
	0, 0, 102, 103, 104, 105, 208, 106, 209, 210,
	0, 107, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 211, 112, 113, 212, 0, 0,
	0, 114, 115, 213, 0, 116, 0, 117, 0, 0,
	0, 0, 118, 214, 0, 215, 0, 119, 120, 334,
	217, 0, 0, 123, 0, 121, 0, 0, 122, 218,
	219, 220, 0, 221, 0, 0, 124, 0, 125, 126,
	0, 0, 222, 0, 127, 0, 0, 128, 0, 0,
	129, 0, 130, 131, 132, 133, 134, 0, 135, 136,
	139, 137, 0, 138, 0, 223, 140, 224, 141, 142,
	0, 0, 328, 0, 0, 143, 225, 0, 144, 0,
	226, 145, 146, 147, 0, 227, 148, 228, 149, 0,
	150, 151, 152, 229, 153, 154, 0, 156, 157, 155,
	158, 0, 159, 0, 160, 161, 230, 162, 0, 163,
	164, 165, 0, 231, 166, 167, 0, 168, 169, 0,
	170, 232, 233, 171, 0, 172, 173, 175, 234, 174,
	235, 0, 176, 0, 177, 178, 0, 236, 237, 238,
	0, 0, 179, 239, 240, 0, 180, 181, 182, 183,
	0, 0, 184, 185, 186, 0, 0, 187, 188, 189,
	241, 242, 83, 190, 0, 0, 0, 0, 191, 192,
	193, 194, 0, 0, 0, 0, 0, 86, 87, 246,
	88, 0, 0, 0, 0, 195, 0, 0, 0, 0,
	89, 90, 196, 197, 198, 199, 91, 200, 201, 0,
	92, 202, 203, 93, 0, 0, 204, 205, 206, 0,
	207, 0, 0, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 0, 100, 101, 0, 0, 0, 0,
	0, 0, 102, 103, 104, 105, 208, 106, 209, 210,
	0, 107, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 211, 112, 113, 212, 0, 0,
	0, 114, 115, 213, 0, 116, 0, 117, 0, 0,
	0, 0, 118, 214, 0, 215, 0, 119, 120, 216,
	217, 0, 0, 123, 0, 121, 0, 0, 122, 218,
	219, 220, 0, 221, 0, 0, 124, 0, 125, 126,
	0, 0, 222, 0, 127, 0, 0, 128, 0, 0,
	129, 0, 130, 131, 132, 133, 134, 0, 135, 136,
	139, 137, 0, 138, 0, 223, 140, 224, 141, 142,
	0, 0, 0, 0, 0, 143, 225, 0, 144, 0,
	226, 145, 146, 147, 0, 227, 148, 228, 245, 0,
	150, 151, 152, 229, 153, 154, 0, 156, 157, 155,
	158, 0, 159, 0, 160, 161, 230, 162, 0, 163,
	164, 165, 0, 231, 166, 167, 0, 168, 169, 0,
	170, 232, 233, 171, 0, 172, 173, 175, 234, 174,
	235, 0, 176, 0, 177, 178, 0, 236, 237, 238,
	0, 0, 179, 239, 240, 0, 180, 181, 182, 183,
	0, 0, 184, 185, 186, 0, 0, 187, 188, 189,
	241, 242, 83, 190, 0, 0, 0, 0, 191, 192,
	193, 194, 0, 0, 0, 0, 0, 86, 87, 0,
	88, 0, 0, 0, 0, 195, 0, 0, 0, 0,
	89, 90, 196, 197, 198, 199, 91, 200, 201, 0,
	92, 202, 203, 93, 0, 0, 204, 205, 206, 0,
	207, 0, 0, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 0, 100, 101, 0, 0, 0, 0,
	0, 0, 102, 103, 104, 105, 208, 106, 209, 210,
	0, 107, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 211, 112, 113, 212, 0, 0,
	0, 114, 115, 213, 0, 116, 0, 117, 0, 0,
	0, 0, 118, 214, 0, 215, 0, 119, 120, 216,
	217, 0, 0, 123, 0, 121, 0, 0, 122, 218,
	219, 220, 0, 221, 0, 0, 124, 0, 125, 126,
	0, 0, 222, 0, 127, 0, 0, 128, 0, 0,
	129, 0, 130, 131, 132, 133, 134, 0, 135, 136,
	139, 137, 0, 138, 0, 223, 140, 224, 141, 142,
	0, 0, 0, 0, 0, 143, 225, 0, 144, 0,
	226, 145, 146, 147, 0, 227, 148, 228, 149, 0,
	150, 151, 152, 229, 153, 154, 0, 156, 157, 155,
	158, 0, 159, 0, 160, 161, 230, 162, 0, 163,
	164, 165, 0, 231, 166, 167, 0, 168, 169, 0,
	170, 232, 233, 171, 0, 172, 173, 175, 234, 174,
	235, 0, 176, 0, 177, 178, 0, 236, 237, 238,
	0, 0, 179, 239, 240, 0, 180, 181, 182, 183,
	0, 0, 184, 185, 186, 0, 0, 187, 188, 189,
	241, 242, 83, 190, 0, 0, 0, 0, 191, 192,
	193, 194, 0, 0, 0, 0, 0, 86, 87, 0,
	88, 0, 0, 0, 0, 195, 0, 0, 0, 0,
	89, 90, 196, 197, 198, 199, 91, 200, 201, 0,
	92, 202, 203, 93, 0, 0, 204, 205, 206, 0,
	207, 0, 0, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 0, 100, 101, 0, 0, 0, 0,
	0, 0, 102, 103, 104, 105, 208, 106, 209, 210,
	0, 107, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 211, 112, 113, 212, 0, 0,
	0, 114, 115, 213, 0, 116, 0, 117, 0, 0,
	0, 0, 118, 214, 0, 215, 0, 119, 120, 1182,
	217, 0, 0, 123, 0, 121, 0, 0, 122, 218,
	219, 220, 0, 221, 0, 0, 124, 0, 125, 126,
	0, 0, 222, 0, 127, 0, 0, 128, 0, 0,
	129, 0, 130, 131, 132, 133, 134, 0, 135, 136,
	139, 137, 0, 138, 0, 223, 140, 224, 141, 142,
	0, 0, 0, 0, 0, 143, 225, 0, 144, 0,
	226, 145, 146, 147, 0, 227, 148, 228, 149, 0,
	150, 151, 152, 229, 153, 154, 0, 156, 157, 155,
	158, 0, 159, 0, 160, 161, 230, 162, 0, 163,
	164, 165, 0, 231, 166, 167, 0, 168, 169, 0,
	170, 232, 233, 171, 0, 172, 173, 175, 234, 174,
	235, 0, 176, 0, 177, 178, 0, 236, 237, 238,
	0, 0, 179, 239, 240, 0, 180, 181, 182, 183,
	0, 0, 184, 185, 186, 0, 0, 187, 188, 189,
	241, 242, 83, 190, 0, 0, 0, 0, 191, 192,
	193, 194, 0, 0, 0, 0, 0, 86, 87, 0,
	88, 0, 0, 0, 0, 195, 0, 0, 0, 0,
	89, 90, 196, 197, 198, 199, 91, 200, 201, 0,
	92, 202, 203, 93, 0, 0, 204, 205, 206, 0,
	207, 0, 0, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 0, 100, 101, 0, 0, 0, 0,
	0, 0, 102, 103, 104, 105, 208, 106, 209, 210,
	0, 107, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 211, 112, 113, 212, 0, 0,
	0, 114, 115, 213, 0, 116, 0, 117, 0, 0,
	0, 0, 118, 214, 0, 215, 0, 119, 120, 1180,
	217, 0, 0, 123, 0, 121, 0, 0, 122, 218,
	219, 220, 0, 221, 0, 0, 124, 0, 125, 126,
	0, 0, 222, 0, 127, 0, 0, 128, 0, 0,
	129, 0, 130, 131, 132, 133, 134, 0, 135, 136,
	139, 137, 0, 138, 0, 223, 140, 224, 141, 142,
	0, 0, 0, 0, 0, 143, 225, 0, 144, 0,
	226, 145, 146, 147, 0, 227, 148, 228, 149, 0,
	150, 151, 152, 229, 153, 154, 0, 156, 157, 155,
	158, 0, 159, 0, 160, 161, 230, 162, 0, 163,
	164, 165, 0, 231, 166, 167, 0, 168, 169, 0,
	170, 232, 233, 171, 0, 172, 173, 175, 234, 174,
	235, 0, 176, 0, 177, 178, 0, 236, 237, 238,
	0, 0, 179, 239, 240, 0, 180, 181, 182, 183,
	0, 0, 184, 185, 186, 0, 0, 187, 188, 189,
	241, 242, 83, 190, 0, 0, 0, 0, 191, 192,
	193, 194, 0, 0, 0, 0, 0, 86, 87, 0,
	88, 0, 0, 0, 0, 195, 0, 0, 0, 0,
	89, 90, 196, 197, 198, 199, 91, 200, 201, 0,
	92, 202, 203, 93, 0, 0, 204, 205, 206, 0,
	207, 0, 0, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 0, 100, 101, 0, 0, 0, 0,
	0, 0, 102, 103, 104, 105, 208, 106, 209, 210,
	0, 107, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 211, 112, 113, 212, 0, 0,
	0, 114, 115, 213, 0, 116, 0, 117, 0, 0,
	0, 0, 118, 214, 0, 215, 0, 119, 120, 1171,
	217, 0, 0, 123, 0, 121, 0, 0, 122, 218,
	219, 220, 0, 221, 0, 0, 124, 0, 125, 126,
	0, 0, 222, 0, 127, 0, 0, 128, 0, 0,
	129, 0, 130, 131, 132, 133, 134, 0, 135, 136,
	139, 137, 0, 138, 0, 223, 140, 224, 141, 142,
	0, 0, 0, 0, 0, 143, 225, 0, 144, 0,
	226, 145, 146, 147, 0, 227, 148, 228, 149, 0,
	150, 151, 152, 229, 153, 154, 0, 156, 157, 155,
	158, 0, 159, 0, 160, 161, 230, 162, 0, 163,
	164, 165, 0, 231, 166, 167, 0, 168, 169, 0,
	170, 232, 233, 171, 0, 172, 173, 175, 234, 174,
	235, 0, 176, 0, 177, 178, 0, 236, 237, 238,
	0, 0, 179, 239, 240, 0, 180, 181, 182, 183,
	0, 0, 184, 185, 186, 0, 0, 187, 188, 189,
	241, 242, 83, 190, 0, 0, 0, 0, 191, 192,
	193, 194, 0, 0, 0, 0, 0, 86, 87, 0,
	88, 0, 0, 0, 0, 195, 0, 0, 0, 0,
	89, 90, 196, 197, 198, 199, 91, 200, 201, 0,
	92, 202, 203, 93, 0, 0, 204, 205, 206, 0,
	207, 0, 0, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 0, 100, 101, 0, 0, 0, 0,
	0, 0, 102, 103, 104, 105, 208, 106, 209, 210,
	0, 107, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 211, 112, 113, 212, 0, 0,
	0, 114, 115, 213, 0, 116, 0, 117, 0, 0,
	0, 0, 118, 214, 0, 215, 0, 119, 120, 784,
	217, 0, 0, 123, 0, 121, 0, 0, 122, 218,
	219, 220, 0, 221, 0, 0, 124, 0, 125, 126,
	0, 0, 222, 0, 127, 0, 0, 128, 0, 0,
	129, 0, 130, 131, 132, 133, 134, 0, 135, 136,
	139, 137, 0, 138, 0, 223, 140, 224, 141, 142,
	0, 0, 0, 0, 0, 143, 225, 0, 144, 0,
	226, 145, 146, 147, 0, 227, 148, 228, 149, 0,
	150, 151, 152, 229, 153, 154, 0, 156, 157, 155,
	158, 0, 159, 0, 160, 161, 230, 162, 0, 163,
	164, 165, 0, 231, 166, 167, 0, 168, 169, 0,
	170, 232, 233, 171, 0, 172, 173, 175, 234, 174,
	235, 0, 176, 0, 177, 178, 0, 236, 237, 238,
	0, 0, 179, 239, 240, 0, 180, 181, 182, 183,
	0, 0, 184, 185, 186, 0, 0, 187, 188, 189,
	241, 242, 83, 190, 0, 0, 0, 0, 191, 192,
	193, 194, 0, 0, 0, 0, 0, 86, 87, 0,
	88, 0, 0, 0, 0, 195, 0, 0, 0, 0,
	89, 90, 196, 197, 198, 199, 91, 200, 201, 0,
	92, 202, 203, 93, 0, 0, 204, 205, 206, 0,
	207, 0, 0, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 0, 100, 101, 0, 0, 0, 0,
	0, 0, 102, 103, 104, 105, 208, 106, 209, 210,
	0, 107, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 211, 112, 113, 212, 0, 0,
	0, 114, 115, 213, 0, 116, 0, 117, 0, 0,
	0, 0, 118, 214, 0, 215, 0, 119, 120, 216,
	217, 0, 0, 123, 0, 121, 0, 0, 122, 218,
	219, 220, 0, 221, 0, 0, 124, 0, 125, 126,
	0, 0, 222, 0, 127, 0, 0, 128, 0, 0,
	129, 0, 130, 131, 132, 133, 134, 0, 135, 136,
	139, 137, 0, 138, 0, 223, 140, 224, 141, 142,
	0, 0, 0, 0, 0, 143, 225, 0, 144, 0,
	226, 145, 146, 147, 0, 227, 148, 228, 149, 0,
	150, 151, 152, 229, 153, 154, 0, 156, 157, 155,
	158, 0, 159, 0, 160, 161, 230, 162, 0, 260,
	164, 165, 0, 231, 166, 167, 0, 168, 169, 0,
	170, 232, 233, 171, 0, 172, 173, 175, 234, 174,
	235, 0, 176, 0, 177, 178, 0, 236, 237, 238,
	0, 0, 179, 239, 240, 0, 180, 181, 182, 183,
	0, 0, 184, 185, 186, 0, 0, 187, 188, 189,
	241, 242, 83, 190, 0, 0, 0, 0, 191, 192,
	193, 194, 0, 0, 0, 0, 0, 86, 87, 0,
	88, 0, 0, 0, 0, 195, 0, 575, 0, 0,
	89, 90, 196, 197, 198, 199, 91, 200, 201, 0,
	92, 202, 203, 93, 0, 0, 204, 205, 206, 0,
	207, 0, 0, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 0, 100, 101, 0, 0, 0, 0,
	0, 0, 102, 103, 104, 105, 208, 106, 209, 210,
	0, 107, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 211, 112, 113, 212, 0, 0,
	0, 114, 115, 213, 0, 116, 0, 117, 0, 0,
	0, 0, 118, 214, 0, 215, 0, 119, 120, 216,
	217, 0, 0, 123, 0, 121, 0, 0, 122, 218,
	219, 220, 0, 221, 0, 0, 124, 0, 125, 126,
	0, 0, 222, 0, 127, 0, 0, 128, 0, 0,
	129, 0, 130, 131, 132, 133, 134, 0, 135, 136,
	139, 137, 0, 138, 0, 223, 140, 224, 141, 142,
	0, 0, 0, 0, 0, 143, 225, 0, 144, 0,
	226, 145, 146, 147, 0, 227, 148, 228, 149, 0,
	150, 151, 152, 229, 153, 154, 0, 156, 157, 155,
	158, 0, 159, 0, 160, 161, 230, 162, 0, 163,
	164, 165, 0, 231, 166, 167, 0, 0, 169, 0,
	170, 232, 233, 171, 0, 172, 173, 175, 234, 174,
	235, 0, 176, 0, 177, 178, 0, 236, 237, 238,
	0, 0, 179, 239, 240, 0, 180, 181, 182, 183,
	0, 0, 184, 185, 186, 0, 0, 187, 188, 189,
	241, 242, 83, 190, 0, 0, 0, 0, 191, 192,
	193, 194, 0, 0, 0, 0, 0, 86, 87, 0,
	88, 0, 0, 0, 0, 195, 0, 0, 0, 0,
	89, 90, 196, 197, 198, 199, 91, 200, 201, 0,
	92, 202, 203, 93, 0, 0, 204, 205, 206, 0,
	207, 0, 0, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 0, 100, 101, 0, 0, 0, 0,
	0, 0, 102, 103, 104, 105, 208, 106, 209, 210,
	0, 107, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 211, 112, 113, 212, 0, 0,
	0, 114, 115, 213, 0, 116, 0, 117, 0, 0,
	0, 0, 118, 214, 0, 215, 0, 119, 120, 429,
	217, 0, 0, 123, 0, 121, 0, 0, 122, 218,
	219, 220, 0, 221, 0, 0, 124, 0, 125, 126,
	0, 0, 222, 0, 127, 0, 0, 128, 0, 0,
	129, 0, 130, 131, 132, 133, 134, 0, 135, 136,
	139, 137, 0, 138, 0, 223, 140, 224, 141, 142,
	0, 0, 0, 0, 0, 143, 225, 0, 144, 0,
	226, 145, 146, 147, 0, 227, 148, 228, 149, 0,
	150, 151, 152, 229, 153, 154, 0, 156, 157, 155,
	158, 0, 159, 0, 160, 161, 230, 162, 0, 163,
	164, 165, 0, 231, 166, 167, 0, 168, 169, 0,
	170, 232, 233, 171, 0, 172, 173, 175, 234, 174,
	235, 0, 176, 0, 177, 178, 0, 236, 237, 238,
	0, 0, 179, 239, 240, 0, 180, 181, 182, 183,
	0, 0, 184, 185, 186, 0, 0, 187, 188, 189,
	241, 242, 83, 190, 0, 0, 0, 0, 191, 192,
	193, 194, 0, 0, 0, 0, 0, 86, 87, 0,
	88, 0, 0, 0, 0, 195, 0, 0, 0, 0,
	89, 90, 196, 197, 198, 199, 91, 200, 201, 0,
	92, 202, 203, 93, 0, 0, 204, 205, 206, 0,
	207, 0, 0, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 0, 100, 101, 0, 0, 0, 0,
	0, 0, 102, 103, 104, 105, 208, 106, 209, 210,
	0, 107, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 211, 112, 113, 212, 0, 0,
	0, 114, 115, 213, 0, 116, 0, 117, 0, 0,
	0, 0, 118, 214, 0, 215, 0, 119, 120, 426,
	217, 0, 0, 123, 0, 121, 0, 0, 122, 218,
	219, 220, 0, 221, 0, 0, 124, 0, 125, 126,
	0, 0, 222, 0, 127, 0, 0, 128, 0, 0,
	129, 0, 130, 131, 132, 133, 134, 0, 135, 136,
	139, 137, 0, 138, 0, 223, 140, 224, 141, 142,
	0, 0, 0, 0, 0, 143, 225, 0, 144, 0,
	226, 145, 146, 147, 0, 227, 148, 228, 149, 0,
	150, 151, 152, 229, 153, 154, 0, 156, 157, 155,
	158, 0, 159, 0, 160, 161, 230, 162, 0, 163,
	164, 165, 0, 231, 166, 167, 0, 168, 169, 0,
	170, 232, 233, 171, 0, 172, 173, 175, 234, 174,
	235, 0, 176, 0, 177, 178, 0, 236, 237, 238,
	0, 0, 179, 239, 240, 0, 180, 181, 182, 183,
	0, 0, 184, 185, 186, 0, 0, 187, 188, 189,
	241, 242, 83, 190, 0, 0, 0, 0, 191, 192,
	193, 194, 0, 0, 0, 0, 0, 86, 87, 0,
	88, 0, 0, 0, 0, 195, 0, 0, 0, 0,
	89, 90, 196, 197, 198, 199, 91, 200, 201, 0,
	92, 202, 203, 93, 0, 0, 204, 205, 386, 0,
	207, 0, 0, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 0, 100, 101, 0, 0, 0, 0,
	0, 0, 102, 103, 104, 105, 208, 106, 209, 210,
	0, 107, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 211, 112, 113, 212, 0, 0,
	0, 114, 115, 213, 0, 116, 0, 117, 0, 0,
	0, 0, 118, 214, 0, 215, 0, 119, 120, 216,
	217, 0, 0, 123, 0, 121, 0, 0, 122, 218,
	219, 220, 0, 221, 0, 0, 124, 0, 125, 126,
	0, 0, 222, 0, 127, 0, 0, 128, 0, 0,
	129, 0, 130, 131, 132, 133, 271, 0, 135, 136,
	139, 137, 0, 138, 0, 223, 140, 224, 141, 142,
	0, 0, 0, 0, 0, 143, 225, 0, 144, 0,
	226, 145, 146, 147, 0, 227, 148, 228, 149, 0,
	150, 151, 152, 229, 153, 154, 0, 156, 157, 155,
	158, 0, 159, 0, 160, 161, 230, 162, 0, 163,
	164, 165, 0, 231, 166, 167, 0, 168, 169, 0,
	170, 232, 233, 171, 0, 172, 173, 175, 234, 174,
	235, 0, 176, 0, 177, 178, 0, 270, 237, 238,
	0, 0, 266, 239, 240, 0, 180, 181, 182, 183,
	0, 0, 184, 185, 186, 0, 0, 187, 188, 189,
	241, 242, 83, 190, 0, 0, 0, 0, 191, 192,
	193, 194, 0, 0, 0, 0, 0, 86, 87, 0,
	88, 0, 0, 0, 0, 195, 0, 0, 0, 0,
	89, 90, 196, 197, 198, 199, 91, 200, 201, 0,
	92, 202, 203, 93, 0, 0, 204, 205, 206, 0,
	207, 0, 0, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 0, 100, 101, 0, 0, 0, 0,
	0, 0, 102, 103, 104, 105, 208, 106, 209, 210,
	0, 107, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 211, 112, 113, 212, 0, 0,
	0, 114, 115, 213, 0, 116, 0, 117, 0, 0,
	0, 0, 118, 214, 0, 215, 0, 119, 120, 216,
	217, 0, 0, 123, 0, 121, 0, 0, 122, 218,
	219, 220, 0, 221, 0, 0, 124, 0, 125, 126,
	0, 0, 222, 0, 127, 0, 0, 128, 0, 0,
	129, 0, 130, 131, 132, 133, 271, 0, 135, 136,
	139, 137, 0, 138, 0, 223, 140, 224, 141, 142,
	0, 0, 0, 0, 0, 143, 225, 0, 144, 0,
	226, 145, 146, 147, 0, 227, 148, 228, 149, 0,
	150, 151, 152, 229, 153, 154, 0, 156, 157, 155,
	158, 0, 159, 0, 160, 161, 230, 162, 0, 163,
	164, 165, 0, 231, 166, 167, 0, 168, 169, 0,
	170, 232, 233, 171, 0, 172, 173, 175, 234, 174,
	235, 0, 176, 0, 177, 178, 0, 270, 237, 238,
	0, 0, 266, 239, 240, 0, 180, 181, 182, 183,
	0, 0, 184, 185, 186, 0, 0, 187, 188, 189,
	241, 242, 83, 190, 0, 0, 0, 0, 191, 192,
	193, 194, 0, 0, 0, 0, 0, 86, 87, 0,
	88, 0, 0, 0, 0, 195, 0, 0, 0, 0,
	89, 90, 196, 197, 198, 199, 91, 200, 201, 0,
	92, 202, 203, 93, 0, 0, 204, 205, 206, 0,
	207, 0, 0, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 0, 100, 101, 0, 0, 0, 0,
	0, 0, 102, 103, 104, 105, 208, 106, 209, 210,
	0, 107, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 211, 112, 113, 212, 0, 0,
	0, 114, 115, 213, 0, 116, 0, 117, 0, 0,
	0, 0, 118, 214, 0, 215, 0, 119, 120, 350,
	217, 0, 0, 123, 0, 121, 0, 0, 122, 218,
	219, 220, 0, 221, 0, 0, 124, 0, 125, 126,
	0, 0, 222, 0, 127, 0, 0, 128, 0, 0,
	129, 0, 130, 131, 132, 133, 134, 0, 135, 136,
	139, 137, 0, 138, 0, 223, 140, 224, 141, 142,
	0, 0, 0, 0, 0, 143, 225, 0, 144, 0,
	226, 145, 146, 147, 0, 227, 148, 228, 149, 0,
	150, 151, 152, 229, 153, 154, 0, 156, 157, 155,
	158, 0, 159, 0, 160, 161, 230, 162, 0, 163,
	164, 165, 0, 231, 166, 167, 0, 168, 169, 0,
	170, 232, 233, 171, 0, 172, 173, 175, 234, 174,
	235, 0, 176, 0, 177, 178, 0, 236, 237, 238,
	0, 0, 179, 239, 240, 0, 180, 181, 182, 183,
	0, 0, 184, 185, 186, 0, 0, 187, 188, 189,
	241, 242, 83, 190, 0, 0, 0, 0, 191, 192,
	193, 194, 0, 0, 0, 0, 0, 86, 87, 0,
	88, 0, 0, 0, 0, 195, 0, 0, 0, 0,
	89, 90, 196, 197, 198, 199, 91, 200, 201, 0,
	92, 202, 203, 93, 0, 0, 204, 205, 206, 0,
	207, 0, 0, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 0, 100, 101, 0, 0, 0, 0,
	0, 0, 102, 103, 104, 105, 208, 106, 209, 210,
	0, 107, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 211, 112, 113, 212, 0, 0,
	0, 114, 115, 213, 0, 116, 0, 117, 0, 0,
	0, 0, 118, 214, 0, 215, 0, 119, 120, 347,
	217, 0, 0, 123, 0, 121, 0, 0, 122, 218,
	219, 220, 0, 221, 0, 0, 124, 0, 125, 126,
	0, 0, 222, 0, 127, 0, 0, 128, 0, 0,
	129, 0, 130, 131, 132, 133, 134, 0, 135, 136,
	139, 137, 0, 138, 0, 223, 140, 224, 141, 142,
	0, 0, 0, 0, 0, 143, 225, 0, 144, 0,
	226, 145, 146, 147, 0, 227, 148, 228, 149, 0,
	150, 151, 152, 229, 153, 154, 0, 156, 157, 155,
	158, 0, 159, 0, 160, 161, 230, 162, 0, 163,
	164, 165, 0, 231, 166, 167, 0, 168, 169, 0,
	170, 232, 233, 171, 0, 172, 173, 175, 234, 174,
	235, 0, 176, 0, 177, 178, 0, 236, 237, 238,
	0, 0, 179, 239, 240, 0, 180, 181, 182, 183,
	0, 0, 184, 185, 186, 0, 0, 187, 188, 189,
	241, 242, 83, 190, 0, 0, 0, 0, 191, 192,
	193, 194, 0, 0, 0, 0, 0, 86, 87, 0,
	88, 0, 0, 0, 0, 195, 0, 0, 0, 0,
	89, 90, 196, 197, 198, 199, 91, 200, 201, 0,
	92, 202, 203, 93, 0, 0, 204, 205, 206, 0,
	207, 0, 0, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 0, 100, 101, 0, 0, 0, 0,
	0, 0, 102, 103, 104, 105, 208, 106, 209, 210,
	0, 107, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 211, 112, 113, 212, 0, 0,
	0, 114, 115, 213, 0, 116, 0, 117, 0, 0,
	0, 0, 118, 214, 0, 215, 0, 119, 120, 345,
	217, 0, 0, 123, 0, 121, 0, 0, 122, 218,
	219, 220, 0, 221, 0, 0, 124, 0, 125, 126,
	0, 0, 222, 0, 127, 0, 0, 128, 0, 0,
	129, 0, 130, 131, 132, 133, 134, 0, 135, 136,
	139, 137, 0, 138, 0, 223, 140, 224, 141, 142,
	0, 0, 0, 0, 0, 143, 225, 0, 144, 0,
	226, 145, 146, 147, 0, 227, 148, 228, 149, 0,
	150, 151, 152, 229, 153, 154, 0, 156, 157, 155,
	158, 0, 159, 0, 160, 161, 230, 162, 0, 163,
	164, 165, 0, 231, 166, 167, 0, 168, 169, 0,
	170, 232, 233, 171, 0, 172, 173, 175, 234, 174,
	235, 0, 176, 0, 177, 178, 0, 236, 237, 238,
	0, 0, 179, 239, 240, 0, 180, 181, 182, 183,
	0, 0, 184, 185, 186, 0, 0, 187, 188, 189,
	241, 242, 83, 190, 0, 0, 0, 0, 191, 192,
	193, 194, 0, 0, 0, 0, 0, 86, 87, 0,
	88, 0, 0, 0, 0, 195, 0, 0, 0, 0,
	89, 90, 196, 197, 198, 199, 91, 200, 201, 0,
	92, 202, 203, 93, 0, 0, 204, 205, 206, 0,
	207, 0, 0, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 0, 100, 101, 0, 0, 0, 0,
	0, 0, 102, 103, 104, 105, 208, 106, 209, 210,
	0, 107, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 211, 112, 113, 212, 0, 0,
	0, 114, 115, 213, 0, 116, 0, 117, 0, 0,
	0, 0, 118, 214, 0, 215, 0, 119, 120, 337,
	217, 0, 0, 123, 0, 121, 0, 0, 122, 218,
	219, 220, 0, 221, 0, 0, 124, 0, 125, 126,
	0, 0, 222, 0, 127, 0, 0, 128, 0, 0,
	129, 0, 130, 131, 132, 133, 134, 0, 135, 136,
	139, 137, 0, 138, 0, 223, 140, 224, 141, 142,
	0, 0, 0, 0, 0, 143, 225, 0, 144, 0,
	226, 145, 146, 147, 0, 227, 148, 228, 149, 0,
	150, 151, 152, 229, 153, 154, 0, 156, 157, 155,
	158, 0, 159, 0, 160, 161, 230, 162, 0, 163,
	164, 165, 0, 231, 166, 167, 0, 168, 169, 0,
	170, 232, 233, 171, 0, 172, 173, 175, 234, 174,
	235, 0, 176, 0, 177, 178, 0, 236, 237, 238,
	0, 0, 179, 239, 240, 0, 180, 181, 182, 183,
	0, 0, 184, 185, 186, 0, 0, 187, 188, 189,
	241, 242, 83, 190, 0, 0, 0, 0, 191, 192,
	193, 194, 0, 0, 0, 0, 0, 86, 87, 0,
	88, 0, 0, 0, 0, 195, 0, 0, 0, 0,
	89, 90, 196, 197, 198, 199, 91, 200, 201, 0,
	92, 202, 203, 93, 0, 0, 204, 205, 206, 0,
	207, 0, 0, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 0, 100, 101, 0, 0, 0, 0,
	0, 0, 102, 103, 104, 105, 208, 106, 209, 210,
	0, 107, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 211, 112, 113, 212, 0, 0,
	0, 114, 115, 213, 0, 116, 0, 117, 0, 0,
	0, 0, 118, 214, 0, 215, 0, 119, 120, 216,
	217, 0, 0, 123, 0, 121, 0, 0, 122, 218,
	219, 220, 0, 221, 0, 0, 124, 0, 125, 126,
	0, 0, 222, 0, 127, 0, 0, 128, 0, 0,
	129, 0, 130, 131, 132, 133, 134, 0, 135, 136,
	139, 137, 0, 138, 0, 223, 140, 224, 141, 142,
	0, 0, 0, 0, 0, 143, 225, 0, 144, 0,
	226, 145, 146, 147, 0, 227, 148, 228, 149, 0,
	150, 151, 152, 229, 317, 154, 0, 156, 157, 155,
	158, 0, 159, 0, 160, 161, 230, 162, 0, 163,
	164, 165, 0, 231, 166, 167, 0, 168, 169, 0,
	170, 232, 233, 171, 0, 172, 173, 175, 234, 174,
	235, 0, 176, 0, 177, 178, 0, 236, 237, 238,
	0, 0, 179, 239, 240, 0, 180, 181, 182, 183,
	0, 0, 184, 185, 186, 0, 0, 187, 188, 189,
	241, 242, 83, 190, 0, 0, 0, 0, 191, 192,
	193, 194, 0, 0, 0, 0, 0, 86, 87, 0,
	88, 0, 0, 0, 0, 195, 0, 0, 0, 0,
	89, 90, 196, 197, 198, 199, 91, 200, 201, 0,
	92, 202, 203, 93, 0, 0, 204, 205, 206, 0,
	207, 0, 0, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 0, 100, 101, 0, 0, 0, 0,
	0, 0, 102, 103, 104, 105, 208, 106, 209, 210,
	0, 107, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 211, 112, 113, 212, 0, 0,
	0, 114, 115, 213, 0, 116, 0, 117, 0, 0,
	0, 0, 118, 214, 0, 215, 0, 119, 120, 216,
	217, 0, 0, 123, 0, 121, 0, 0, 122, 218,
	219, 220, 0, 221, 0, 0, 124, 0, 125, 126,
	0, 0, 222, 0, 127, 0, 0, 263, 0, 0,
	129, 0, 130, 131, 132, 133, 271, 0, 135, 136,
	139, 137, 0, 138, 0, 223, 140, 224, 141, 142,
	0, 0, 0, 0, 0, 143, 225, 0, 144, 0,
	226, 145, 146, 147, 0, 227, 148, 228, 149, 0,
	150, 151, 152, 229, 153, 154, 0, 156, 157, 155,
	158, 0, 159, 0, 160, 161, 265, 162, 0, 163,
	164, 165, 0, 231, 166, 264, 0, 168, 169, 0,
	170, 232, 233, 171, 0, 172, 173, 175, 234, 174,
	235, 0, 176, 0, 177, 178, 0, 270, 237, 238,
	0, 0, 266, 239, 240, 0, 180, 181, 182, 183,
	0, 0, 184, 185, 186, 0, 0, 187, 188, 189,
	241, 242, 83, 190, 0, 0, 0, 0, 191, 192,
	193, 194, 0, 0, 0, 0, 0, 86, 87, 0,
	88, 0, 0, 0, 0, 195, 0, 0, 0, 0,
	89, 90, 196, 197, 198, 199, 91, 200, 201, 0,
	92, 202, 203, 93, 0, 0, 204, 205, 206, 0,
	207, 0, 0, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 0, 100, 101, 0, 0, 0, 0,
	0, 0, 102, 103, 104, 105, 208, 106, 209, 210,
	0, 107, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 211, 112, 113, 212, 0, 0,
	0, 114, 115, 213, 0, 116, 0, 117, 0, 0,
	0, 0, 118, 214, 0, 215, 0, 119, 120, 216,
	217, 0, 0, 123, 0, 121, 0, 0, 122, 218,
	219, 220, 0, 221, 0, 0, 124, 0, 125, 126,
	0, 0, 222, 0, 127, 0, 0, 128, 0, 0,
	129, 0, 130, 131, 132, 133, 134, 0, 135, 136,
	139, 137, 0, 138, 0, 223, 140, 224, 141, 142,
	0, 0, 0, 0, 0, 143, 225, 0, 144, 0,
	226, 145, 146, 0, 0, 227, 148, 228, 149, 0,
	150, 0, 152, 229, 153, 154, 0, 156, 157, 155,
	158, 0, 159, 0, 160, 161, 230, 0, 0, 163,
	164, 165, 0, 231, 166, 167, 0, 168, 169, 0,
	170, 232, 233, 171, 0, 172, 173, 175, 234, 174,
	235, 0, 176, 0, 177, 178, 0, 236, 237, 238,
	0, 0, 179, 239, 240, 0, 180, 181, 182, 183,
	0, 0, 184, 185, 186, 0, 0, 187, 188, 189,
	241, 242, 0, 190, 0, 0, 0, 0, 191, 192,
	193, 194, 810, 0, 829, 830, 831, 839, 840, 841,
	0, 0, 0, 0, 0, 0, 0, 832, 0, 0,
	0, 0, 0, 0, 812, 0, 843, 0, 810, 0,
	829, 830, 831, 839, 840, 841, 0, 0, 0, 0,
	0, 0, 0, 832, 0, 811, 0, 0, 0, 0,
	812, 826, 843, 0, 0, 0, 0, 0, 0, 0,
	0, 810, 0, 829, 830, 831, 839, 840, 841, 0,
	0, 811, 0, 0, 0, 0, 832, 826, 0, 0,
	0, 0, 0, 812, 0, 843, 0, 810, 0, 829,
	830, 831, 839, 840, 841, 0, 0, 0, 817, 0,
	0, 0, 832, 0, 811, 0, 0, 0, 0, 812,
	826, 843, 0, 0, 0, 836, 844, 0, 0, 0,
	0, 0, 0, 0, 817, 0, 0, 0, 0, 842,
	811, 0, 0, 0, 0, 0, 826, 0, 0, 834,
	0, 836, 844, 0, 0, 827, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 842, 0, 817, 0, 0,
	0, 0, 0, 0, 0, 834, 0, 833, 0, 0,
	0, 827, 0, 0, 836, 844, 0, 0, 0, 0,
	0, 0, 0, 817, 0, 0, 0, 0, 842, 0,
	0, 0, 0, 833, 0, 0, 0, 0, 834, 0,
	836, 844, 828, 0, 827, 0, 0, 0, 0, 0,
	0, 0, 0, 837, 842, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 834, 0, 833, 0, 828, 0,
	827, 0, 0, 0, 0, 0, 0, 0, 0, 837,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 833, 0, 0, 0, 0, 0, 0, 0,
	0, 828, 0, 0, 0, 0, 835, 0, 0, 823,
	824, 825, 837, 822, 819, 820, 821, 813, 814, 815,
	816, 818, 0, 838, 0, 0, 0, 828, 0, 0,
	1352, 0, 835, 0, 0, 823, 824, 825, 837, 822,
	819, 820, 821, 813, 814, 815, 816, 818, 0, 838,
	0, 0, 0, 0, 0, 0, 1306, 0, 0, 0,
	0, 0, 0, 0, 0, 835, 0, 0, 823, 824,
	825, 0, 822, 819, 820, 821, 813, 814, 815, 816,
	818, 0, 838, 0, 0, 0, 1754, 0, 0, 0,
	0, 835, 0, 0, 823, 824, 825, 0, 822, 819,
	820, 821, 813, 814, 815, 816, 818, 0, 838, 0,
	0, 810, 1752, 829, 830, 831, 839, 840, 841, 0,
	0, 0, 0, 0, 0, 0, 832, 0, 0, 0,
	0, 0, 0, 812, 0, 843, 0, 810, 0, 829,
	830, 831, 839, 840, 841, 0, 0, 0, 0, 0,
	0, 0, 832, 0, 811, 0, 0, 0, 0, 812,
	826, 843, 0, 0, 0, 0, 0, 0, 0, 0,
	810, 0, 829, 830, 831, 839, 840, 841, 0, 0,
	811, 0, 0, 0, 0, 832, 826, 0, 0, 0,
	0, 0, 812, 0, 843, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 817, 0, 0,
	0, 0, 0, 811, 0, 0, 0, 0, 0, 826,
	0, 0, 0, 0, 836, 844, 0, 0, 0, 0,
	0, 0, 0, 817, 0, 0, 0, 0, 842, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 834, 0,
	836, 844, 0, 0, 827, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 842, 0, 817, 0, 0, 0,
	0, 0, 0, 0, 834, 0, 833, 0, 0, 0,
	827, 0, 0, 836, 844, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 842, 0, 0,
	0, 0, 833, 0, 0, 0, 0, 834, 0, 0,
	0, 828, 0, 827, 0, 0, 0, 0, 0, 0,
	0, 0, 837, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 833, 0, 828, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 837, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	828, 0, 0, 0, 0, 835, 0, 0, 823, 824,
	825, 837, 822, 819, 820, 821, 813, 814, 815, 816,
	818, 0, 838, 0, 0, 0, 1732, 0, 0, 0,
	0, 835, 0, 0, 823, 824, 825, 0, 822, 819,
	820, 821, 813, 814, 815, 816, 818, 0, 838, 0,
	0, 0, 1707, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 835, 0, 0, 823, 824, 825,
	0, 822, 819, 820, 821, 813, 814, 815, 816, 818,
	0, 838, 0, 0, 810, 1702, 829, 830, 831, 839,
	840, 841, 0, 0, 0, 0, 0, 0, 0, 832,
	0, 0, 0, 0, 0, 0, 812, 0, 843, 0,
	810, 0, 829, 830, 831, 839, 840, 841, 0, 0,
	0, 0, 0, 0, 0, 832, 0, 811, 0, 0,
	0, 0, 812, 826, 843, 0, 0, 0, 0, 0,
	0, 0, 0, 810, 0, 829, 830, 831, 839, 840,
	841, 0, 0, 811, 0, 0, 0, 0, 832, 826,
	0, 0, 0, 0, 0, 812, 0, 843, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	817, 0, 0, 0, 0, 0, 811, 0, 0, 0,
	0, 0, 826, 0, 0, 0, 0, 836, 844, 0,
	0, 0, 0, 0, 0, 0, 817, 0, 0, 0,
	0, 842, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 834, 0, 836, 844, 0, 0, 827, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 842, 0, 817,
	0, 0, 0, 0, 0, 0, 0, 834, 0, 833,
	0, 0, 0, 827, 0, 0, 836, 844, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	842, 0, 0, 0, 0, 833, 0, 0, 0, 0,
	834, 0, 0, 0, 828, 0, 827, 0, 0, 0,
	0, 0, 0, 0, 0, 837, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 833, 0,
	828, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 837, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 828, 0, 0, 0, 0, 835, 0,
	0, 823, 824, 825, 837, 822, 819, 820, 821, 813,
	814, 815, 816, 818, 0, 838, 0, 0, 0, 1698,
	0, 0, 0, 0, 835, 0, 0, 823, 824, 825,
	0, 822, 819, 820, 821, 813, 814, 815, 816, 818,
	0, 838, 0, 0, 0, 1633, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 835, 0, 0,
	823, 824, 825, 0, 822, 819, 820, 821, 813, 814,
	815, 816, 818, 0, 838, 0, 0, 810, 1632, 829,
	830, 831, 839, 840, 841, 0, 0, 0, 0, 0,
	0, 0, 832, 0, 0, 0, 0, 0, 0, 812,
	0, 843, 0, 810, 0, 829, 830, 831, 839, 840,
	841, 0, 0, 0, 0, 0, 0, 0, 832, 0,
	811, 0, 0, 0, 0, 812, 826, 843, 0, 0,
	0, 0, 0, 0, 0, 0, 810, 0, 829, 830,
	831, 839, 840, 841, 0, 0, 811, 0, 0, 0,
	0, 832, 826, 0, 0, 0, 0, 0, 812, 0,
	843, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 817, 0, 0, 0, 0, 0, 811,
	0, 0, 0, 0, 0, 826, 0, 0, 0, 0,
	836, 844, 0, 0, 0, 0, 0, 0, 0, 817,
	0, 0, 0, 0, 842, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 834, 0, 836, 844, 0, 0,
	827, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	842, 0, 817, 0, 0, 0, 0, 0, 0, 0,
	834, 0, 833, 0, 0, 0, 827, 0, 0, 836,
	844, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 842, 0, 0, 0, 0, 833, 0,
	0, 0, 0, 834, 0, 0, 0, 828, 0, 827,
	0, 0, 0, 0, 0, 0, 0, 0, 837, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 833, 0, 828, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 837, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 828, 0, 0, 0,
	0, 835, 0, 0, 823, 824, 825, 837, 822, 819,
	820, 821, 813, 814, 815, 816, 818, 0, 838, 0,
	0, 0, 1539, 0, 0, 0, 0, 835, 0, 0,
	823, 824, 825, 0, 822, 819, 820, 821, 813, 814,
	815, 816, 818, 0, 838, 0, 0, 0, 1473, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	835, 0, 0, 823, 824, 825, 0, 822, 819, 820,
	821, 813, 814, 815, 816, 818, 0, 838, 0, 0,
	810, 1457, 829, 830, 831, 839, 840, 841, 0, 0,
	0, 0, 0, 0, 0, 832, 0, 0, 0, 0,
	0, 0, 812, 0, 843, 0, 810, 0, 829, 830,
	831, 839, 840, 841, 0, 0, 0, 0, 0, 0,
	0, 832, 0, 811, 0, 0, 0, 0, 812, 826,
	843, 0, 0, 0, 609, 604, 626, 598, 617, 616,
	0, 0, 600, 599, 0, 0, 0, 628, 627, 811,
	0, 0, 0, 0, 0, 826, 0, 0, 0, 0,
	810, 0, 829, 830, 831, 839, 840, 841, 0, 0,
	0, 0, 0, 0, 0, 832, 817, 622, 0, 614,
	613, 0, 812, 0, 843, 0, 0, 0, 612, 0,
	0, 0, 0, 836, 844, 0, 0, 0, 0, 0,
	0, 0, 817, 811, 611, 0, 0, 842, 0, 826,
	0, 0, 0, 0, 0, 0, 0, 834, 0, 836,
	844, 0, 0, 827, 0, 0, 0, 0, 0, 0,
	605, 606, 607, 842, 625, 0, 0, 0, 0, 0,
	0, 0, 0, 834, 0, 833, 0, 0, 0, 827,
	0, 0, 0, 0, 0, 0, 817, 1826, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 615, 0,
	0, 833, 0, 836, 844, 0, 0, 0, 0, 0,
	828, 0, 0, 0, 0, 0, 0, 842, 0, 0,
	0, 837, 0, 0, 610, 0, 0, 834, 0, 0,
	0, 0, 0, 827, 0, 0, 828, 0, 0, 0,
	0, 0, 0, 0, 602, 0, 0, 837, 0, 0,
	0, 0, 608, 603, 0, 833, 0, 0, 0, 630,
	0, 0, 0, 0, 0, 0, 601, 0, 1825, 623,
	624, 0, 0, 0, 835, 0, 0, 823, 824, 825,
	0, 822, 819, 820, 821, 813, 814, 815, 816, 818,
	828, 838, 629, 0, 0, 1091, 0, 0, 0, 0,
	835, 837, 0, 823, 824, 825, 0, 822, 819, 820,
	821, 813, 814, 815, 816, 818, 0, 838, 0, 1521,
	0, 0, 0, 0, 0, 0, 0, 810, 0, 829,
	830, 831, 839, 840, 841, 0, 0, 0, 0, 0,
	0, 0, 832, 0, 0, 0, 0, 0, 0, 812,
	0, 843, 0, 0, 835, 0, 0, 823, 824, 825,
	0, 822, 819, 820, 821, 813, 814, 815, 816, 818,
	811, 838, 0, 0, 0, 810, 826, 829, 830, 831,
	839, 840, 841, 0, 0, 0, 0, 0, 0, 0,
	832, 0, 0, 0, 0, 1025, 0, 812, 0, 843,
	0, 846, 0, 0, 0, 0, 0, 810, 0, 829,
	830, 831, 839, 840, 841, 0, 0, 0, 811, 0,
	0, 0, 832, 817, 826, 1344, 845, 0, 1343, 812,
	0, 843, 0, 0, 0, 0, 0, 0, 0, 0,
	836, 844, 0, 0, 0, 0, 0, 0, 0, 0,
	811, 1026, 0, 0, 842, 0, 826, 0, 0, 0,
	0, 0, 0, 0, 834, 0, 0, 0, 0, 0,
	827, 817, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 836, 844,
	0, 0, 833, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 842, 817, 0, 0, 0, 0, 0, 0,
	0, 0, 834, 0, 0, 0, 0, 0, 827, 0,
	836, 844, 0, 0, 0, 0, 0, 828, 0, 0,
	0, 0, 0, 0, 842, 0, 0, 0, 837, 0,
	833, 0, 0, 0, 834, 0, 0, 0, 0, 0,
	827, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 833, 0, 0, 828, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 837, 0, 0, 0,
	0, 835, 0, 0, 823, 824, 825, 0, 822, 819,
	820, 821, 813, 814, 815, 816, 818, 828, 838, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 837, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 835,
	0, 0, 823, 824, 825, 0, 822, 819, 820, 821,
	813, 814, 815, 816, 818, 0, 838, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 835, 0, 0, 823, 824, 825, 0, 822, 819,
	820, 821, 813, 814, 815, 816, 818, 810, 838, 829,
	830, 831, 839, 840, 841, 0, 0, 0, 0, 0,
	0, 0, 832, 0, 0, 0, 0, 0, 0, 812,
	0, 843, 0, 810, 0, 829, 830, 831, 839, 840,
	841, 0, 0, 0, 0, 0, 0, 0, 832, 0,
	811, 0, 0, 0, 0, 812, 826, 843, 0, 0,
	0, 0, 0, 0, 0, 0, 810, 0, 829, 830,
	831, 839, 840, 841, 0, 0, 811, 0, 0, 0,
	0, 832, 826, 0, 0, 0, 0, 0, 812, 0,
	843, 0, 810, 0, 829, 830, 831, 839, 840, 841,
	0, 0, 0, 817, 0, 0, 0, 832, 0, 811,
	0, 1345, 0, 0, 812, 826, 843, 0, 0, 0,
	836, 844, 0, 0, 0, 0, 0, 0, 0, 817,
	0, 0, 0, 0, 842, 811, 0, 0, 0, 0,
	0, 826, 0, 0, 834, 0, 836, 844, 0, 0,
	827, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	842, 0, 817, 0, 0, 0, 0, 1350, 0, 0,
	834, 0, 833, 312, 0, 0, 827, 0, 0, 836,
	844, 0, 0, 0, 0, 0, 0, 0, 817, 0,
	0, 0, 0, 842, 0, 0, 0, 0, 833, 0,
	0, 0, 0, 834, 0, 836, 844, 828, 0, 827,
	0, 0, 0, 0, 0, 0, 0, 0, 837, 842,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 834,
	0, 833, 0, 828, 0, 827, 0, 0, 0, 0,
	0, 0, 0, 0, 837, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 833, 0, 0,
	0, 1467, 0, 0, 0, 0, 828, 0, 0, 0,
	0, 835, 0, 0, 823, 824, 825, 837, 822, 819,
	820, 821, 813, 814, 815, 816, 818, 0, 838, 0,
	0, 0, 828, 0, 0, 0, 0, 835, 0, 0,
	823, 824, 825, 837, 822, 819, 820, 821, 813, 814,
	815, 816, 818, 0, 838, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	835, 0, 0, 823, 824, 825, 0, 822, 819, 820,
	821, 813, 814, 815, 816, 818, 0, 838, 0, 0,
	0, 0, 0, 0, 0, 0, 835, 0, 0, 823,
	824, 825, 0, 822, 819, 820, 821, 813, 814, 815,
	816, 818, 810, 838, 829, 830, 831, 839, 840, 841,
	0, 0, 0, 0, 0, 0, 0, 832, 0, 0,
	0, 0, 0, 0, 812, 0, 843, 0, 810, 0,
	829, 830, 831, 839, 840, 841, 0, 0, 0, 0,
	0, 0, 0, 832, 0, 811, 0, 1305, 0, 0,
	812, 826, 843, 0, 0, 0, 0, 0, 0, 0,
	0, 810, 0, 829, 830, 831, 839, 840, 841, 0,
	0, 811, 0, 0, 0, 0, 832, 826, 0, 0,
	0, 0, 0, 812, 0, 843, 0, 810, 0, 829,
	830, 831, 839, 840, 841, 0, 0, 0, 817, 0,
	0, 0, 0, 0, 811, 0, 0, 0, 0, 812,
	826, 843, 0, 0, 0, 836, 844, 0, 0, 0,
	0, 0, 0, 0, 817, 0, 0, 0, 0, 842,
	811, 0, 0, 0, 0, 0, 826, 0, 0, 834,
	0, 836, 844, 0, 0, 827, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 842, 0, 817, 0, 0,
	0, 0, 0, 0, 0, 834, 0, 833, 0, 0,
	0, 827, 0, 0, 836, 844, 0, 0, 1311, 0,
	0, 0, 0, 817, 0, 0, 0, 0, 842, 0,
	0, 0, 0, 833, 0, 0, 0, 0, 834, 0,
	836, 844, 828, 0, 827, 0, 0, 0, 0, 0,
	0, 0, 0, 837, 842, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 834, 0, 833, 0, 828, 0,
	827, 0, 0, 0, 0, 0, 0, 0, 0, 837,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 828, 0, 0, 0, 0, 835, 0, 0, 823,
	824, 825, 837, 822, 819, 820, 821, 813, 814, 815,
	816, 818, 0, 838, 0, 0, 0, 828, 0, 0,
	0, 0, 835, 0, 0, 823, 824, 825, 837, 822,
	819, 820, 821, 813, 814, 815, 816, 818, 0, 838,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 835, 0, 0, 823, 824,
	825, 0, 822, 819, 820, 821, 813, 814, 815, 816,
	818, 0, 838, 0, 0, 0, 0, 0, 0, 0,
	0, 835, 0, 0, 823, 824, 825, 0, 822, 819,
	820, 821, 813, 814, 815, 816, 818, 810, 838, 829,
	830, 831, 839, 840, 841, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 812,
	0, 843, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	811, 0, 0, 0, 0, 0, 826, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 817, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	836, 844, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 834, 0, 0, 0, 0, 0,
	827, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 828, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 837, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 835, 0, 0, 823, 824, 825, 0, 822, 819,
	820, 821, 813, 814, 815, 816, 818, 0, 838,
}
var sqlPact = [...]int{

	215, -1000, 53, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 847, -1000, -1000, -1000, 771, 765,
	503, 15628, 15628, 15368, 2094, 2094, 16928, -1000, -1000, 19788,
	-1000, 2210, 547, 549, 547, 547, 545, 16928, 616, 716,
	234, -1000, 700, 25, 19528, 15628, 1309, 41, 14328, 404,
	215, 15108, 15628, 19268, 1150, 1054, 1053, 14328, 19008, 18748,
	18488, -1000, 9849, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 615, 410, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 409, -1000, 14848, -1000, 910, -1000, 40,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 873, -1000,
	15628, -1000, -1000, 18228, 17968, 408, 897, -1000, -1000, 620,
	476, 1318, -1000, 58, -1000, -1000, 1141, -1000, 866, 1140,
	1139, 1138, 1136, 1133, 1128, 475, 927, -1000, 614, 897,
	-1000, 897, -1000, -1000, -1000, 594, 16928, -1000, 14328, -1000,
	17708, 1071, 17448, -1000, 700, -1000, -1000, -1000, 932, 1293,
	1293, 1293, 1299, 199, 188, 234, 23, 15628, -1000, 405,
	23, 6844, 6844, -1000, -1000, 404, -1000, 440, 12501, 51,
	-1000, 7390, -1000, 785, 1207, 705, 704, 1205, -56, 14328,
	15628, 15628, 644, 17188, -1000, 1204, 144, 1199, -1000, 122,
	1198, -1000, 9, -1000, -1000, -1000, -1000, -1000, -1000, 404,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 14588, 1325, 21739, -1000, 8773, -1000,
	-1000, 12764, 973, 12764, -1000, -1000, 1322, -1000, 8773, -1000,
	39, 29, 1021, 1090, 10392, 10122, 1250, 840, -1000, -1000,
	-1000, 57, 4296, 15628, 1162, 12764, 15628, 15628, 15628, 15628,
	15628, -1000, 15628, -1000, 1020, -1000, 15628, -1000, 28, 27,
	-1000, 16928, -1000, 147, -1000, 400, 960, 16668, 1219, 957,
	-1000, 932, -1000, 907, 1017, 7954, 8773, 234, -1000, -1000,
	234, 234, 8773, -1000, -1000, 15628, 23, 1320, 15628, 138,
	-1000, 22107, -1000, -1000, 8773, 8773, 8773, 8773, 8773, 793,
	-1000, -1000, -1000, 5131, -1000, -1000, 51, 399, 420, -1000,
	-1000, 394, 51, -1000, -1000, -1000, -1000, 389, 1416, 481,
	-1000, -1000, -1000, 8773, 480, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1161, 388, 382, -1000, -1000, -1000,
	-1000, 380, 379, 373, 362, 360, 355, 352, 349, 334,
	333, 330, 328, 327, 326, 736, -1000, 504, -1000, -1000,
	504, 504, -1000, 323, 323, 324, -1000, -1000, -1000, 323,
	-1000, -1000, -1000, 464, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 325, 138, -1000, -1000, -1000, 15628, 51, -1000, -1000,
	-1000, 8773, 4026, -3, -1000, 22811, -1000, -12, 745, -1000,
	13808, 1273, 1271, 1270, 14328, 580, 578, 15628, 15628, 493,
	289, 1317, 289, 11975, -1000, 15628, 15628, -1000, 15628, -1000,
	-1000, 15628, -1000, 15628, 15628, 216, 13288, 763, 1194, 25,
	-5, -1000, 1319, -1000, -1000, -1000, -1000, 97, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 324, 736, 323, 323, 323, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 464, -1000, -1000, 504, 504, 504, -1000,
	-1000, -7, 22811, 576, 17, 13026, 15628, -1000, 52, -1000,
	-1000, 1127, 544, -13, 724, 1042, 661, -1000, -1000, -1000,
	-1000, 22, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1365, -1000, -1000, -1000, -1000, 1401, 22, -1000,
	-1000, -1000, -1000, -1000, 1413, -1000, -1000, -1000, 4296, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 15628, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 724, 1042, -1000, -1000,
	14328, 13548, 1192, 848, 956, -1000, -1000, 453, 1190, -1000,
	-1000, -1000, -1000, 22811, -1000, 22811, 671, 1061, -1000, 1061,
	19, -1000, 22075, -1000, 317, -20, -1000, 493, 6844, 11712,
	21739, 15628, 603, 8773, 8773, 8773, 8773, 8773, 8773, 8773,
	8773, 8773, 8773, 8773, 8773, 8773, 8773, 8773, 8773, 8773,
	8773, 8773, 8773, 8773, 8773, 1035, 8773, 575, 8773, 8773,
	8773, 8773, 906, 827, 287, 4296, -1000, 713, 713, 713,
	22837, 22837, 279, 38, 21710, 18, 51, -1000, -1000, 6553,
	6261, 51, 4566, -1000, 878, 1400, 498, 22811, 1169, 1103,
	316, 185, 184, 8773, 8773, 790, 8773, 9046, 8773, 8773,
	5404, 8773, 8773, 8773, 8773, 8773, 8773, -1000, 314, -1000,
	-1000, -1000, -1000, 1399, -1000, -1000, 1386, -1000, 601, 600,
	1384, 493, 169, -1000, 2735, -1000, -1000, 7390, -1000, 763,
	15628, 15628, 15628, -1000, -1000, 954, 16408, -1000, 21739, 15628,
	-1000, 310, 305, 1041, 1033, 15628, 15628, 16148, 15888, 15628,
	748, 15628, 15628, 703, -1000, 685, 8773, 758, -1000, 11185,
	509, 15628, 689, 80, -1000, -1000, -1000, 451, 15628, -1000,
	-1000, -1000, 144, -1000, 122, -1000, -1000, 14328, -1000, -1000,
	-1000, -1000, -1000, -1000, 21739, 424, 421, -1000, 1383, 574,
	-1000, 573, 572, 571, -1000, 304, -1000, 8773, 15628, 13026,
	17, 11, -1000, -1000, 15628, 1042, -1000, -1000, -1000, -1000,
	741, -1000, 712, -1000, 10662, -1000, -1000, -1000, 878, -1000,
	-21, -1000, -1000, -1000, -1000, 167, -2, -1000, -1000, -1000,
	-1000, -1000, 15628, 350, 15628, 15628, 15628, 1183, 1411, 15628,
	-1000, -1000, -1000, 8773, -1000, -1000, -1000, 25, 15628, -1000,
	1102, -1000, -42, 1200, -109, 14068, -1000, 10922, -1000, -1000,
	474, 648, 648, 602, 602, 602, 602, 170, 170, 766,
	1748, 2146, 2146, 2146, 1624, 249, 249, 2146, 2146, 2146,
	22837, 3381, 230, 8773, 8773, 569, 823, 287, 230, 8773,
	1356, 230, 230, 230, -1000, 778, -1000, -1000, -1000, 1124,
	284, 9046, 9046, -1000, -1000, -1000, 5131, -1000, -1000, 272,
	8773, -1000, 8773, -24, -79, -1000, -1000, -27, -1000, -1000,
	-14, 8773, 8773, 8773, 165, -1000, 157, 672, -1000, 8773,
	786, 265, 263, 8773, -1000, -1000, 22778, 20338, 146, 1123,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 143, 22752, 142,
	2209, -1000, 9046, 9046, 9046, 5131, 262, 132, 22027, -120,
	22472, 7663, 7663, 7663, 129, 22446, 8773, -120, 20312, 3346,
	3263, -28, -32, -40, 1378, -44, 123, 473, 467, 119,
	1102, -1000, -1000, 8773, -1000, -1000, -1000, 567, 566, 1182,
	-1000, 953, -1000, 931, 8773, 15628, 261, 255, 791, -1000,
	1181, 908, 1180, 908, -1000, -12, 735, -1000, -1000, 561,
	-1000, 6844, 22811, -1000, 687, 1275, -48, -1000, -1000, -1000,
	6844, 493, 11975, 11712, 7390, -53, -1000, -1000, 763, -1000,
	539, 1368, 107, 977, 923, 728, 651, 1367, 22811, -21,
	-1000, -21, -1000, -1000, -1000, -1000, -1000, -1000, 15628, 1085,
	13548, 248, 15628, 247, 245, 239, 15628, -1000, 1219, -1000,
	106, -1000, 1099, 1298, 11712, 1047, 1044, 11712, 1101, 792,
	792, 792, -1000, 14068, 3744, -1000, -1000, 15628, 236, 11448,
	105, 1200, 8773, 230, 230, 8773, 9046, 9046, -1000, 230,
	-1000, -1000, -1000, -1000, 1121, 233, 8773, 21739, 3329, 2551,
	-54, 5969, -25, 21426, -1000, -1000, 420, -1000, 102, 7117,
	-1000, 22387, 37, 37, -1000, 1407, 1211, -1000, 8773, 22413,
	-1000, 12238, 495, 802, 21393, 21739, 21739, -1000, 8773, -1000,
	1111, 8773, -1000, 21739, 9046, 9046, 9046, 9046, 9046, 9046,
	9046, 9046, 9046, 9046, 9046, 9046, 9046, 9046, 9046, 9046,
	9046, 9046, 9046, 1024, 9046, 1354, 1354, 1354, -41, 5677,
	-1000, 1159, 1111, 8773, 8773, 21739, 99, 95, 92, -1000,
	8773, -120, 8773, 8773, 8773, -1000, -1000, -1000, 90, -1000,
	1360, -1000, -1000, -1000, -1000, 1099, 21736, 15628, 15628, 15628,
	1179, 2082, -1000, 21367, -63, 15628, 15628, -1000, 1027, 1079,
	537, 15628, -1000, 15628, -1000, 15628, 15628, 15628, 15628, -62,
	6844, 208, 25, 15628, -62, 685, -1000, -42, -1000, 450,
	-1000, 412, 250, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 82, -1000, -1000, 1087, -1000, 9586, 229, 15628, 13548,
	9586, 846, -1000, -1000, 469, 8773, 8773, 1200, 11712, 11712,
	1914, 1036, 11712, -1000, -1000, -1000, -1000, 457, -1000, 1040,
	228, 15628, 14068, 708, 230, 2251, 2190, 8773, 21739, 23117,
	-64, 8773, 8773, -1000, -65, -1000, 8773, -1000, -1000, 1406,
	8773, 81, 78, 77, -1000, -1000, 22811, 8773, -1000, -1000,
	20048, 8773, 75, -1000, 73, 72, 22811, 1159, 22811, -1000,
	667, 667, 1354, 1354, 1354, 1354, 376, 376, 456, 856,
	1817, 1817, 1817, 542, 383, 383, 1817, 1817, 1817, 1110,
	998, 226, 2956, 8773, -69, -1000, -1000, -1000, 22811, 22811,
	71, -1000, -1000, -1000, -120, 3026, 21083, 21050, -1000, 67,
	469, -1000, -1000, -1000, -1000, 15628, -1000, 15628, -1000, 15628,
	15628, 1115, 942, -1000, -1000, 1032, 214, 9046, 15628, -1000,
	837, -70, -71, 930, -1000, 926, 8773, -1000, 21739, 908,
	908, -1000, 560, 559, -1000, -62, 1225, 15628, 1260, -1000,
	-1000, -1000, 212, -1000, -1000, -1000, 760, -77, -1000, 258,
	1280, 8773, -1000, -1000, 211, 9586, -83, -1000, -1000, 66,
	-87, 15628, -1000, 15628, 22811, -120, -1000, 1914, -1000, 210,
	8773, 11712, -1000, -1000, 917, -143, -1000, 449, -1000, 15628,
	-88, -1000, 8773, 8773, 23117, -92, -1000, 230, 230, -1000,
	21024, -1000, 22387, -1000, -1000, -1000, 22811, 774, -1000, 20740,
	-1000, -1000, -1000, -1000, 9046, 1109, 207, 21739, 20707, -1000,
	-1000, 8773, -1000, -1000, -1000, -1000, -1000, 909, -1000, -1000,
	15628, 952, -1000, -1000, 8773, 2956, 204, 1085, 203, -1000,
	-1000, -1000, 707, -1000, -1000, 22811, 1283, -1000, -1000, 15628,
	15628, 612, -94, 15628, -1000, -1000, 4858, 15628, 837, 9586,
	1285, 51, 15628, 1285, 20681, 4566, -98, -1000, 15628, 1085,
	837, 201, -78, -1000, 1315, -1000, 15628, 22811, -1000, 618,
	1040, -1000, 4296, -99, -1000, 230, 230, -1000, -1000, 65,
	802, 1295, -1000, 3409, 9046, 21739, -110, -1000, 20397, -1000,
	-1000, 1178, 20371, 1009, 15628, -1000, 15628, 15628, 516, 15628,
	-1000, -1000, 640, -1000, 493, -1000, 171, 1085, -1000, -1000,
	-1000, -1000, 1280, -14, 837, -1000, -1000, 1085, 9586, 15628,
	139, -111, 598, -1000, -1000, -1000, -1000, 675, 8773, 3409,
	-116, -1000, -1000, 1172, -1000, 828, 890, 64, -121, 98,
	-1000, 8773, -1000, 11975, -1000, 15628, -1000, 1285, 63, 1085,
	-1000, -125, -1000, -1000, -1000, 1405, 61, 8500, 8500, -120,
	-1000, 15628, -1000, 839, 832, 695, -1000, -1000, -1000, -1000,
	-1000, 1009, 15628, 22811, -104, -127, -1000, -1000, -1000, 837,
	-1000, -1000, -1000, -1000, 9316, 889, 666, 21790, -1000, -1000,
	-1000, 1231, -1000, 524, 945, 945, 828, -138, -1000, 862,
	1085, 1332, -1000, -1000, -1000, -1000, -1000, -1000, 1343, -1000,
	-1000, 1012, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 8227,
	-1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1628, 1627, 1338, 138, 135, 1624, 1622, 1621, 106,
	133, 128, 125, 1620, 103, 1619, 1617, 1616, 101, 1614,
	1613, 1611, 67, 1610, 1608, 1607, 1604, 1603, 100, 43,
	165, 2136, 154, 1602, 1601, 1594, 18, 112, 76, 1593,
	75, 1591, 60, 107, 121, 1137, 29, 1589, 1585, 150,
	42, 28, 23, 108, 151, 129, 124, 1581, 1580, 1578,
	45, 1577, 5, 1576, 1575, 1574, 74, 26, 1573, 14,
	1572, 38, 1571, 1570, 141, 83, 1569, 110, 119, 31,
	140, 10, 1568, 92, 12, 86, 1567, 27, 1564, 25,
	80, 143, 1563, 50, 161, 57, 21, 58, 1560, 1557,
	1555, 1553, 81, 1552, 99, 65, 1551, 1549, 79, 1542,
	136, 146, 1540, 1538, 134, 1537, 1536, 1535, 784, 1534,
	1533, 726, 1527, 7, 53, 66, 13, 118, 117, 52,
	1525, 16, 1524, 1798, 689, 613, 1523, 54, 39, 84,
	47, 61, 20, 1522, 1520, 114, 1518, 1516, 1515, 1514,
	1513, 90, 1511, 78, 147, 44, 51, 111, 24, 22,
	77, 94, 113, 152, 115, 1509, 1508, 123, 1505, 49,
	1504, 1503, 835, 120, 1502, 1501, 1499, 647, 531, 345,
	46, 1498, 1494, 186, 183, 1488, 1486, 130, 1485, 1484,
	148, 1482, 222, 41, 1476, 122, 1475, 104, 1474, 0,
	72, 36, 1473, 139, 89, 1472, 1470, 1468, 1467, 19,
	2, 8, 3, 6, 4, 30, 11, 1462, 1457, 144,
	95, 1454, 153, 1449, 1448, 35, 1445, 1444, 17, 1441,
	15, 1439, 9, 1, 1431, 142, 1427, 105, 1426, 1343,
	1425, 149, 1424, 1422, 1358, 88,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 4, 4, 38, 38, 37,
	37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
	37, 37, 37, 37, 35, 35, 40, 40, 40, 39,
	39, 34, 34, 5, 5, 5, 9, 10, 10, 10,
	10, 10, 10, 80, 80, 79, 79, 82, 82, 11,
	11, 12, 12, 12, 12, 12, 12, 12, 12, 168,
	168, 167, 13, 143, 143, 14, 14, 14, 14, 15,
	103, 103, 16, 16, 16, 16, 17, 21, 235, 235,
	235, 239, 239, 240, 240, 241, 241, 241, 241, 241,
	241, 241, 237, 237, 24, 24, 24, 24, 24, 122,
	118, 118, 120, 120, 120, 120, 44, 117, 117, 117,
	117, 119, 119, 119, 119, 192, 190, 190, 197, 197,
	197, 57, 57, 57, 57, 57, 58, 58, 58, 189,
	189, 189, 189, 198, 198, 198, 198, 198, 198, 59,
	59, 59, 196, 196, 25, 25, 25, 25, 25, 25,
	25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
	191, 191, 236, 236, 238, 238, 8, 8, 60, 60,
	61, 61, 125, 125, 125, 125, 62, 62, 41, 41,
	41, 124, 207, 207, 208, 208, 208, 208, 208, 208,
	209, 209, 209, 209, 209, 209, 209, 205, 205, 206,
	203, 203, 204, 204, 204, 204, 242, 242, 123, 123,
	65, 65, 212, 212, 212, 212, 210, 210, 210, 210,
	210, 213, 211, 214, 214, 214, 214, 214, 154, 154,
	154, 27, 7, 7, 107, 107, 69, 69, 158, 158,
	158, 70, 70, 159, 51, 51, 36, 36, 36, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 108, 108,
	109, 109, 19, 23, 26, 26, 26, 26, 26, 244,
	244, 48, 48, 48, 48, 49, 49, 121, 121, 121,
	121, 121, 43, 6, 6, 42, 42, 18, 18, 18,
	18, 18, 54, 54, 114, 114, 114, 116, 116, 115,
	115, 115, 93, 93, 28, 76, 76, 84, 84, 85,
	85, 165, 86, 86, 22, 22, 31, 31, 29, 29,
	29, 29, 29, 29, 30, 30, 32, 32, 32, 32,
	32, 32, 32, 220, 220, 220, 222, 222, 219, 221,
	221, 243, 243, 94, 94, 94, 64, 63, 63, 67,
	67, 66, 68, 68, 157, 91, 91, 91, 91, 110,
	111, 111, 112, 112, 113, 113, 90, 90, 140, 140,
	33, 33, 74, 74, 75, 75, 131, 131, 132, 132,
	130, 130, 130, 160, 160, 160, 160, 161, 161, 161,
	161, 161, 161, 155, 155, 155, 155, 156, 156, 166,
	166, 97, 97, 97, 97, 95, 95, 96, 96, 162,
	162, 162, 162, 92, 92, 163, 163, 163, 126, 126,
	169, 169, 169, 73, 73, 73, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 171,
	171, 171, 171, 173, 173, 173, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 172, 172, 174,
	174, 181, 181, 182, 182, 183, 184, 175, 175, 176,
	176, 177, 178, 185, 185, 185, 185, 187, 187, 179,
	179, 179, 179, 179, 180, 104, 104, 104, 104, 104,
	104, 104, 104, 104, 104, 104, 104, 104, 104, 105,
	105, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	215, 215, 215, 215, 215, 215, 215, 217, 217, 218,
	218, 216, 216, 216, 216, 216, 216, 216, 216, 216,
	216, 216, 216, 216, 216, 216, 216, 216, 216, 216,
	216, 216, 216, 216, 216, 216, 216, 223, 223, 224,
	224, 225, 225, 226, 226, 228, 229, 229, 229, 230,
	234, 234, 227, 227, 231, 231, 231, 232, 232, 233,
	233, 233, 233, 233, 145, 145, 145, 146, 146, 147,
	81, 81, 142, 142, 141, 141, 141, 144, 144, 98,
	186, 186, 186, 186, 186, 186, 186, 99, 99, 106,
	100, 100, 101, 101, 101, 101, 101, 101, 137, 138,
	102, 102, 102, 139, 139, 148, 152, 152, 151, 150,
	150, 149, 149, 129, 129, 129, 129, 128, 127, 87,
	87, 245, 245, 153, 153, 88, 88, 89, 83, 83,
	164, 164, 164, 164, 77, 77, 56, 56, 78, 78,
	52, 52, 55, 53, 53, 53, 53, 71, 71, 72,
	72, 50, 50, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 188, 188, 188, 45, 45, 45,
	46, 46, 47, 47, 194, 194, 194, 195, 195, 195,
	195, 193, 193, 193, 193, 193, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 201, 201, 201, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	201, 201, 201, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 4, 6, 1, 3, 2,
	5, 3, 6, 4, 6, 6, 6, 4, 8, 2,
	3, 3, 6, 4, 3, 2, 1, 1, 0, 2,
	0, 2, 0, 1, 1, 1, 6, 3, 5, 4,
	6, 4, 6, 1, 3, 1, 2, 2, 3, 2,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 1, 5, 3, 0, 1, 1, 1, 1, 3,
	3, 0, 2, 3, 2, 3, 6, 6, 1, 2,
	2, 1, 1, 1, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 2, 3, 6, 3, 1, 5,
	2, 1, 1, 1, 3, 3, 2, 3, 3, 3,
	3, 1, 3, 3, 2, 1, 1, 3, 1, 1,
	1, 2, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 1, 1, 1, 1,
	1, 0, 1, 1, 2, 2, 4, 2, 4, 4,
	4, 4, 4, 4, 3, 3, 4, 3, 2, 4,
	2, 0, 2, 0, 2, 0, 7, 10, 1, 0,
	1, 3, 1, 1, 1, 1, 8, 0, 1, 1,
	0, 3, 2, 0, 3, 1, 2, 2, 3, 6,
	2, 1, 1, 2, 4, 2, 5, 7, 8, 5,
	3, 1, 4, 6, 5, 10, 1, 1, 4, 0,
	3, 0, 2, 2, 2, 0, 1, 1, 2, 2,
	0, 3, 3, 2, 1, 1, 2, 2, 1, 2,
	1, 4, 11, 14, 1, 0, 1, 3, 3, 3,
	5, 1, 3, 1, 2, 0, 1, 1, 0, 6,
	6, 8, 6, 8, 8, 10, 8, 10, 1, 0,
	2, 0, 2, 2, 3, 3, 2, 2, 2, 1,
	0, 1, 3, 2, 0, 2, 1, 1, 1, 3,
	3, 0, 3, 4, 7, 3, 0, 6, 6, 8,
	5, 7, 1, 3, 1, 4, 2, 8, 5, 4,
	3, 0, 2, 0, 8, 2, 0, 1, 3, 1,
	1, 3, 5, 5, 1, 1, 3, 3, 1, 2,
	3, 2, 3, 4, 1, 1, 8, 8, 1, 2,
	4, 4, 4, 2, 2, 3, 1, 3, 6, 1,
	0, 1, 0, 1, 1, 0, 1, 1, 0, 1,
	0, 3, 1, 3, 2, 2, 2, 1, 1, 2,
	2, 3, 1, 1, 1, 1, 3, 0, 2, 0,
	2, 3, 2, 0, 1, 3, 3, 1, 1, 3,
	2, 4, 0, 4, 2, 1, 4, 3, 4, 5,
	4, 5, 4, 5, 2, 4, 1, 1, 0, 5,
	0, 2, 2, 2, 1, 1, 0, 4, 2, 1,
	2, 2, 4, 1, 3, 1, 2, 3, 2, 0,
	2, 5, 2, 3, 4, 0, 1, 1, 1, 1,
	2, 4, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 5, 0, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 2, 2, 1, 1, 3,
	0, 1, 1, 1, 1, 5, 2, 1, 1, 1,
	1, 4, 1, 2, 2, 1, 1, 1, 0, 1,
	1, 4, 1, 4, 1, 1, 1, 1, 1, 1,
	1, 3, 3, 3, 3, 3, 3, 3, 0, 1,
	4, 1, 3, 3, 5, 2, 2, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	2, 3, 4, 3, 4, 4, 5, 3, 3, 3,
	3, 3, 4, 3, 3, 4, 3, 4, 3, 4,
	5, 6, 6, 7, 6, 7, 6, 7, 3, 4,
	1, 3, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 5, 6, 6, 7, 1, 1,
	1, 3, 1, 1, 1, 2, 2, 2, 1, 1,
	3, 5, 6, 8, 6, 6, 4, 4, 1, 1,
	1, 5, 1, 3, 1, 3, 1, 1, 1, 1,
	6, 6, 4, 4, 4, 4, 6, 5, 5, 5,
	4, 8, 6, 6, 4, 4, 4, 5, 0, 5,
	0, 2, 0, 1, 3, 3, 2, 2, 0, 6,
	1, 0, 3, 0, 2, 2, 0, 1, 4, 2,
	2, 2, 2, 2, 4, 3, 5, 4, 3, 5,
	1, 3, 1, 3, 3, 3, 2, 1, 3, 3,
	1, 1, 1, 1, 1, 1, 1, 4, 3, 2,
	3, 0, 3, 3, 2, 2, 1, 0, 2, 2,
	3, 2, 1, 1, 3, 5, 1, 2, 4, 2,
	0, 1, 0, 1, 1, 3, 5, 2, 2, 1,
	2, 1, 0, 1, 1, 1, 3, 3, 1, 3,
	3, 2, 1, 1, 1, 3, 1, 3, 1, 3,
	1, 2, 3, 1, 2, 2, 1, 1, 3, 3,
	0, 1, 2, 1, 1, 1, 1, 6, 2, 3,
	5, 1, 1, 1, 1, 2, 2, 1, 1, 1,
	1, 0, 3, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -9, -10, -11, -13,
	-15, -16, -17, -18, -20, -21, -23, -22, -24, -25,
	-26, -19, -27, -28, 22, -6, -7, -8, -221, 90,
	98, 190, 97, 83, 113, 204, 211, -29, -31, 219,
	-122, 220, 33, 228, 57, 93, 206, 201, 248, 64,
	-220, -32, -30, 294, 269, 275, 214, -33, 235, 262,
	297, 235, 76, 126, 85, 130, 256, 255, 76, 126,
	235, -12, 294, -22, -5, -10, -4, -18, -28, -9,
	-11, 22, -45, 4, -199, -201, 19, 20, 22, 32,
	33, 38, 42, 45, 56, 57, 58, 60, 62, 63,
	66, 67, 74, 75, 76, 77, 79, 83, 85, 89,
	90, 92, 97, 98, 103, 104, 107, 109, 114, 119,
	120, 127, 130, 125, 138, 140, 141, 146, 149, 152,
	154, 155, 156, 157, 158, 160, 161, 163, 165, 162,
	168, 170, 171, 177, 180, 183, 184, 185, 188, 190,
	192, 193, 194, 196, 197, 201, 199, 200, 202, 204,
	206, 207, 209, 211, 212, 213, 216, 217, 219, 220,
	222, 225, 227, 228, 231, 229, 234, 236, 237, 244,
	248, 249, 250, 251, 254, 255, 256, 259, 260, 261,
	265, 270, 271, 272, 273, 27, 34, 35, 36, 37,
	39, 40, 43, 44, 48, 49, 50, 52, 78, 80,
	81, 96, 99, 105, 115, 117, 121, 122, 131, 132,
	133, 135, 144, 167, 169, 178, 182, 187, 189, 195,
	208, 215, 223, 224, 230, 232, 239, 240, 241, 245,
	246, 262, 263, -45, -45, 190, 21, -239, 21, -240,
	-241, 64, 90, 113, 214, 130, 85, 255, -239, -49,
	211, -45, -118, 149, 217, 208, 244, -119, -117, -192,
	239, 158, -79, -45, 4, 76, 56, 77, 114, 126,
	127, 61, 62, 141, 236, 239, 244, 21, 64, -244,
	244, 244, -244, -244, -48, 244, 242, -49, -243, 235,
	235, -107, 76, 253, -30, -32, -31, -66, -67, 252,
	134, 95, 176, -29, -31, -220, -222, 196, -219, -45,
	-222, -63, -64, 21, 87, 298, -162, -52, 174, -45,
	-89, 294, -3, -162, 121, -45, -55, 121, -52, 111,
	136, 136, -163, -162, -45, 121, -56, 121, -55, -80,
	121, -79, -168, -167, -195, 4, -199, -201, -200, 262,
	54, 65, 112, 129, 123, 137, 139, 145, 147, 159,
	179, 181, 205, 221, 235, -143, 294, -103, 294, -45,
	21, 173, 298, 173, -45, -118, 50, -118, 294, -120,
	-43, -44, 138, 192, 242, 279, 111, 273, -59, 5,
	82, -82, 296, 111, -236, 173, 111, 111, 111, 111,
	111, -191, 111, 273, 138, 192, 235, -121, -43, -44,
	-121, 242, -49, -92, -162, -79, 121, 126, -45, 121,
	-66, -67, -91, -110, -111, 148, 172, -94, 21, 87,
	-94, -94, 42, 295, 295, 298, -222, -72, 294, -83,
	-164, -133, 287, -135, 285, 286, 291, 164, 274, -145,
	-52, -136, 9, 294, -148, -217, -31, 96, 28, -146,
	-147, 208, -45, 7, 8, 5, 6, -50, -171, -180,
	247, 100, 166, 46, -215, -216, 4, -199, -194, -172,
	-182, -176, -179, 135, 54, 69, 72, 70, 73, 218,
	257, 47, 27, 99, 182, 187, 232, 245, 246, 121,
	167, 122, 52, 115, 144, 89, 35, 37, 39, 40,
	48, 49, 78, 80, 81, 105, 131, 132, 133, 169,
	195, 223, 230, 240, 241, 263, -200, -183, -184, -177,
	-178, -185, -83, -89, 287, -52, 294, -87, -129, -128,
	-127, 292, 296, -88, -153, -133, 82, -38, 199, -37,
	20, 22, 90, 260, 96, 199, 199, 96, 299, -163,
	-54, -52, -54, 219, -45, 29, 96, -40, 298, 45,
	202, 96, -40, 298, 96, 295, 298, -162, 121, 29,
	-142, -169, -170, -172, -181, -175, -179, -180, 38, 44,
	43, 237, 215, 224, 36, 131, 132, 133, 223, 35,
	195, 105, 89, 81, 80, 169, 40, 39, -183, -184,
	-177, -178, 78, 240, 241, 135, 37, 49, 48, 263,
	230, -81, -133, -235, -78, 235, 76, -53, -45, 287,
	-241, -235, 29, -81, 298, 298, 146, -58, 152, 163,
	119, -190, 82, -197, -189, -154, 9, 247, 100, 173,
	-196, 8, 286, -188, -195, 5, 7, 285, -190, 82,
	67, -198, 5, 4, -180, -154, 82, 149, 296, -193,
	4, -199, -201, -200, -202, 21, 23, 24, 25, 26,
	28, 29, 30, 31, 41, 46, 47, 51, 53, 55,
	61, 64, 68, 69, 70, 71, 72, 73, 82, 84,
	86, 87, 88, 91, 93, 95, 100, 101, 102, 108,
	110, 111, 113, 116, 118, 124, 126, 128, 134, 136,
	142, 143, 148, 150, 151, 164, 166, 172, 173, 174,
	175, 176, 186, 191, 198, 203, 214, 218, 226, 233,
	235, 238, 242, 243, 247, 252, 253, 257, 258, 264,
	266, 267, 268, 269, -192, -238, 108, -235, -192, -192,
	-192, -192, -192, -192, 146, -192, 298, 298, -49, -40,
	298, 294, 164, -46, 121, -45, -42, 92, 164, -91,
	-111, -110, -112, -133, 21, -133, -135, -30, -30, -30,
	-68, -157, -133, -219, 29, -71, -45, -74, 298, 111,
	10, 53, 32, 285, 286, 287, 288, 106, 289, 282,
	283, 284, 281, 277, 278, 279, 59, 153, 210, 12,
	13, 14, 25, 175, 147, 274, 123, 221, 291, 15,
	16, 17, 137, 34, 124, 29, 4, -133, -133, -133,
	-133, -133, 181, -31, -133, -81, -87, -31, -141, 292,
	294, -87, 294, 5, 5, 294, -149, -133, -223, 270,
	108, 294, 294, 294, 294, 294, 294, 294, 294, 294,
	294, 294, 294, 294, 294, 294, 294, 189, -187, 265,
	-187, -187, -173, 294, -173, -174, 294, -173, 271, 275,
	294, -74, -52, -129, -133, -193, 287, 298, 295, 298,
	242, -108, 61, 55, -124, 121, 55, -203, -45, 61,
	-204, 51, 253, 191, 110, -108, 61, -108, 61, 61,
	-162, 242, 242, -55, -45, -126, 267, -114, -22, 294,
	82, 29, -114, -84, -85, -165, -86, -52, 294, -45,
	-45, -55, -56, -79, -80, -12, -167, 96, -14, -22,
	-18, -28, -9, 295, 298, -73, 28, -104, 294, 272,
	156, 79, 120, 155, -105, 213, 295, 298, 242, 298,
	-78, -71, -128, -127, 111, 244, 295, -44, -43, -57,
	194, 225, 200, 216, 298, 8, 7, 7, 5, -193,
	-237, -45, -44, -43, -162, -60, -61, -125, -124, -205,
	-206, -203, 126, 253, 101, 96, 173, 164, 279, 96,
	-113, 208, 209, 298, -36, 30, 86, 294, 298, 295,
	-126, -164, -75, -160, -162, -31, -161, 294, -169, -79,
	239, -133, -133, -133, -133, -133, -133, -133, -133, -133,
	-133, -133, -133, -133, -133, -133, -133, -133, -133, -133,
	-133, -133, -133, 147, 123, 221, 34, 124, -133, 242,
	-133, -133, -133, -133, 166, 164, 247, 100, 254, 87,
	170, -245, 233, 31, -139, -31, 294, -193, -145, 208,
	294, 295, 298, -81, -144, 293, -141, -81, 295, 295,
	-81, 264, 21, 87, 287, -104, 7, -152, -151, 266,
	-224, 103, 116, 294, 295, 295, -133, -133, -98, -186,
	4, 272, 156, 79, 120, 155, 213, -99, -133, -100,
	-134, -135, 285, 286, 291, 294, 208, -101, -133, -81,
	-133, 41, 143, 243, -102, -133, 111, -81, -133, -133,
	-133, -81, -81, -81, 294, 7, 7, 239, 239, 7,
	-126, 295, 293, 302, -153, -37, -52, -45, -45, 164,
	-124, 121, -169, -45, 294, 294, 140, 140, -45, -45,
	121, -45, 121, -45, -45, -38, 199, -45, -45, 199,
	-93, 203, -133, -93, -116, 173, -77, -52, 262, -45,
	203, -76, 298, 111, 279, -77, -40, -40, -162, -169,
	292, 292, 7, 242, 242, 242, 242, 294, -133, -237,
	-53, -237, -43, 251, 58, 194, -197, -104, 298, 295,
	298, -46, 126, -46, -79, -52, 96, 5, -45, -157,
	-14, -45, -90, 116, 298, 65, -97, 139, 159, 112,
	145, 205, 129, -130, 299, -156, -155, 29, -45, -31,
	-161, -160, 273, -133, -133, 242, -245, 233, -139, -133,
	166, 247, 100, 254, 87, 170, 111, 294, -134, -134,
	-81, 294, -81, -133, 293, 293, 298, 295, -67, 298,
	-66, -133, -81, -81, 295, 295, -150, -151, 91, -133,
	-229, 180, 294, 294, -133, 29, 298, 295, 111, 295,
	-106, 186, 295, 10, 285, 286, 287, 288, 106, 289,
	282, 283, 284, 281, 277, 278, 279, 59, 153, 210,
	12, 13, 14, 137, 124, -134, -134, -134, -81, 294,
	295, -137, -138, 111, 108, 29, -102, -102, -102, 295,
	111, -81, 298, 298, 298, 295, 295, 295, 7, 295,
	298, 295, 273, 273, 295, -90, -133, 242, 242, 96,
	164, -207, -204, -133, -71, 294, 294, -35, 90, 219,
	-109, 96, -40, 96, -40, 242, -108, 61, 242, -83,
	203, 60, 295, 298, -83, -126, -85, -75, -153, 295,
	293, 7, 7, 295, 156, 120, 155, -105, 155, -105,
	-105, 7, -45, -62, 125, -125, 294, -46, 294, 294,
	294, -45, -42, 295, -140, 118, 42, -160, 139, 139,
	-160, -97, 139, -95, 179, -95, -95, -156, -193, 300,
	-45, 294, 295, -133, -133, -134, -134, 111, 294, -133,
	-142, 25, 25, 295, -81, 295, 298, 295, -141, 295,
	264, -67, -67, -67, 5, 93, -133, 238, -230, -45,
	294, 267, -66, 295, -169, -169, -133, -137, -133, -169,
	-134, -134, -134, -134, -134, -134, -134, -134, -134, -134,
	-134, -134, -134, -134, -134, -134, -134, -134, -134, 87,
	164, 170, -134, 298, -81, 295, -138, -137, -133, -133,
	-169, 295, 295, 295, -81, -133, -133, -133, 295, 7,
	-140, 293, -45, -45, -124, 96, -208, 61, -209, 53,
	101, 64, 164, 166, 253, 191, 51, 82, 198, 295,
	295, -71, -71, 164, 82, 164, 82, 75, 249, -45,
	-45, -52, -45, -45, -45, -83, -115, 294, 173, -22,
	-52, -93, 279, 293, 293, 295, 124, -69, -158, -45,
	-218, 294, -215, -216, -50, 294, -70, -159, -45, -60,
	-69, 173, -225, 268, -133, -81, -160, -160, -96, 258,
	173, 139, -160, -166, 276, -132, -131, 109, 162, 294,
	-71, -155, 25, 25, -133, -142, 295, -133, -133, 295,
	-133, 5, -133, 295, 295, 295, -133, -234, -45, -133,
	295, 295, 295, -138, 111, 87, 170, 294, -133, 295,
	295, 298, 295, 295, 295, -225, -124, -45, -79, -45,
	101, 121, 166, 140, 294, -134, -52, -123, -242, 63,
	231, 295, 295, 166, 166, -133, -169, -40, -40, 242,
	242, 88, -71, 61, -89, -31, 294, 183, 295, 298,
	-51, -87, 53, -51, -133, 294, -69, 295, 298, 295,
	295, -52, -226, -228, -45, -96, 294, -133, -160, 170,
	298, 301, 279, -71, 295, -133, -133, 295, 295, -67,
	-227, 185, 295, -134, 111, 294, -142, 295, -133, -209,
	-46, 164, -133, -47, 294, -62, 294, 198, -39, 53,
	-45, -45, 255, 165, 295, -45, -45, -123, -158, -36,
	-79, -36, 295, -81, 295, -159, -62, -123, 294, 298,
	29, -71, 234, -131, -193, 295, 295, -67, 42, -134,
	-142, 295, 295, 96, 295, -212, 154, -45, -71, -52,
	-34, 258, -79, 219, -126, 294, -62, -51, -67, -123,
	-62, -69, -228, -230, 295, 239, -231, 193, 209, -81,
	295, 101, -210, -213, -211, 173, 112, 184, 222, 295,
	295, -65, 294, -133, -84, -71, -36, 295, -62, 295,
	5, 295, -232, -233, 34, 250, 67, -133, -232, -45,
	-211, 173, -213, 173, 255, 85, -212, -71, -126, 295,
	-123, -233, 188, 107, 208, 188, 107, -214, 161, 202,
	45, 219, -214, -210, 295, -41, 45, 202, -62, 25,
	19, 166, 82, -233,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 0, 53, 54, 55, 0, 0,
	360, 0, 0, 0, 0, 0, 0, 334, -2, 0,
	118, 0, 290, 0, 290, 290, 294, 0, 362, 255,
	359, -2, 370, 0, 0, 0, 368, 348, 0, 0,
	-2, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 69, 0, 71, 72, 73, 74, 75, 76, 77,
	78, 0, 84, 787, 788, 789, 806, 807, 808, 809,
	810, 811, 812, 813, 814, 815, 816, 817, 818, 819,
	820, 821, 822, 823, 824, 825, 826, 827, 828, 829,
	830, 831, 832, 833, 834, 835, 836, 837, 838, 839,
	840, 841, 842, 843, 844, 845, 846, 847, 848, 849,
	850, 851, 852, 853, 854, 855, 856, 857, 858, 859,
	860, 861, 862, 863, 864, 865, 866, 867, 868, 869,
	870, 871, 872, 873, 874, 875, 876, 877, 878, 879,
	880, 881, 882, 883, 884, 885, 886, 887, 888, 889,
	890, 891, 892, 893, 894, 895, 896, 897, 898, 899,
	900, 901, 902, 903, 904, 905, 906, 907, 908, 909,
	910, 911, 912, 913, 914, 915, 916, 917, 918, 919,
	920, 921, 922, 923, 924, 925, 926, 927, 928, 929,
	930, 931, 932, 933, 934, 935, 936, 937, 938, 939,
	940, 941, 942, 943, 944, 945, 946, 947, 948, 949,
	950, 951, 952, 953, 954, 955, 956, 957, 958, 959,
	960, 961, 962, 91, 92, 869, 94, 0, 101, 102,
	103, 105, 106, 107, 108, 109, 110, 111, 0, 283,
	883, 296, 114, 848, 887, 950, 899, 121, 131, 0,
	956, -2, 135, 65, 164, 165, 0, 167, 183, 0,
	0, 0, 0, 0, 181, 0, 0, 178, 0, 301,
	289, 301, 286, 287, 288, 291, 0, 282, 0, 361,
	0, 0, 0, 254, -2, 344, 345, -2, 0, 365,
	365, 365, 0, 0, 345, 0, 353, 873, 356, 770,
	354, 0, 0, 367, 366, 0, 349, 429, 0, 760,
	390, 0, 2, 0, 936, 0, 0, 936, 0, 0,
	0, 0, 0, 435, 57, 936, 48, 936, 756, 48,
	936, 63, 0, 79, 81, 797, 798, 799, 800, 961,
	963, 964, 965, 966, 967, 968, 969, 970, 971, 972,
	973, 974, 975, 976, 0, 0, 0, 89, 0, 93,
	95, 0, 0, 0, 295, 115, 926, 117, 0, 120,
	122, 123, 0, 0, 0, 0, 0, 0, 134, 159,
	160, 66, 0, 0, 185, 0, 0, 0, 0, 0,
	0, 174, 0, 175, 0, 177, 0, 284, 297, 298,
	285, 0, 293, 48, 433, 0, 936, 791, 306, 936,
	-2, 0, 340, 377, 378, 0, 0, 0, 363, 364,
	0, 0, 0, 336, 337, 0, 355, 0, 0, 393,
	748, 752, 753, 521, 0, 0, 0, 0, 0, 0,
	608, 609, 610, 0, 612, 613, 614, 931, 0, 618,
	619, 950, 760, 773, 774, 775, 776, 0, 0, 0,
	781, 782, 783, 732, 658, 628, -2, -2, 771, 459,
	460, 461, 462, -2, 963, 632, 634, 636, 637, 638,
	639, 0, 915, 932, 946, 947, 955, 959, 960, 936,
	943, 937, 927, 934, 942, 829, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, 796, 483, 484, 489,
	490, 492, 393, 391, 430, 431, 0, 761, 739, 733,
	734, 0, 0, 0, 745, 743, 744, 25, 279, 27,
	0, 279, 279, 0, 0, 0, 0, 0, 0, 439,
	0, 312, 0, 0, 436, 0, 0, 59, 0, 46,
	47, 0, 61, 0, 0, 360, 0, 0, 936, 360,
	0, 692, 445, 446, 447, 448, 449, 518, 452, 453,
	454, 455, 456, 457, 458, 466, 467, 468, 469, 470,
	471, 480, 0, 465, 465, 465, 477, 478, 481, 482,
	487, 488, 499, 500, 502, 504, 498, 498, 498, 495,
	496, 0, 690, 0, 98, 0, 824, 758, 763, 766,
	104, 0, 0, 0, 0, 0, 0, 126, 146, 147,
	148, 127, 129, 136, 138, 139, 140, 149, 150, 151,
	152, 248, 0, 250, 162, 163, 784, 0, 128, 130,
	132, 133, 153, 154, 0, 156, 157, 158, 0, 67,
	801, 802, 803, 804, 805, 977, 978, 979, 980, 981,
	982, 983, 984, 985, 986, 987, 988, 989, 990, 991,
	992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001,
	1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011,
	1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021,
	1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031,
	1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041,
	1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051,
	1052, 1053, 1054, 1055, 166, 168, 0, 182, 169, 170,
	171, 172, 173, 180, 176, 179, 0, 0, 292, 251,
	0, 189, 0, 0, 936, 790, 303, 0, 0, 343,
	375, 376, 379, 382, 383, 380, 521, 350, 351, 352,
	371, 372, 268, 357, 0, 0, 767, 439, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 742, 0, 0, 751, 525, 526, 527,
	549, 550, 0, -2, 690, 0, 615, 616, 617, 0,
	0, -2, 0, 778, 518, 0, 0, 731, 660, 0,
	0, 0, 0, 0, 0, 0, 0, 711, 717, 0,
	0, 0, 0, 0, 0, 0, 0, 473, 486, 497,
	494, 493, 475, 0, 474, 472, 0, 476, 0, 0,
	0, 439, 0, 740, 0, 737, 738, 0, 747, 0,
	0, 0, 0, 278, 29, 936, 0, 39, 0, 0,
	221, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 762, 323, 0, 323, 314, 0,
	0, 0, 310, 326, 327, 329, 330, 0, 0, 437,
	58, 757, 48, 64, 48, 70, 80, 0, 82, 85,
	86, 87, 88, 83, 0, 440, 442, 450, 0, 505,
	506, 507, 508, 509, 510, 519, 90, 0, 0, 0,
	99, 100, 764, 765, 0, 0, 119, 124, 125, 302,
	0, 143, 0, 145, 0, 249, 786, 785, 518, 68,
	184, 112, 299, 300, 434, 0, 188, 190, 192, 193,
	194, 195, 791, 0, 791, 0, 0, 0, 0, 0,
	381, 384, 385, 0, 374, 266, 267, 360, 0, 769,
	387, 749, 392, 394, 402, 418, 405, 0, 522, 523,
	0, 528, 529, 530, 531, 532, 533, 534, 535, 536,
	537, -2, -2, -2, 541, 542, 543, -2, -2, -2,
	547, 548, -2, 0, 0, 0, 742, 0, -2, 0,
	557, -2, -2, -2, 561, 0, 564, 566, 568, 0,
	0, 0, 0, 741, 578, 723, 0, 750, 563, 0,
	0, 611, 0, 0, 0, 696, 697, 0, -2, 620,
	370, 0, 0, 0, 0, 779, 0, 730, 726, 0,
	668, 0, 0, 0, 633, 635, 0, 0, 0, 0,
	700, 701, 702, 703, 704, 705, 706, 0, 0, 0,
	0, 580, 0, 0, 0, 0, 950, 0, 690, 716,
	0, 0, 0, 0, 0, 690, 0, 722, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	387, 432, 735, 0, 746, 28, 270, 0, 0, 0,
	31, 936, 203, 0, 0, 0, 0, 0, 281, 40,
	936, 48, 936, 48, 41, 26, 279, 269, 272, 0,
	56, 0, 438, 307, 308, 0, 0, 754, 316, 313,
	0, 439, 0, 0, 0, 0, 60, 62, 0, 693,
	0, 0, 0, 0, 0, 0, 0, 0, 691, 96,
	759, 97, 116, 141, 142, 144, 137, 155, 0, 197,
	0, 0, 791, 0, 0, 0, 0, 305, 306, 373,
	0, 768, 389, 0, 0, 0, 0, 0, 0, 426,
	426, 426, 424, 418, 0, 404, 417, 0, 416, -2,
	405, 0, 0, -2, -2, 0, 0, 0, 579, -2,
	562, 565, 567, 569, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 691, 694, 695, 0, -2, 0, 0,
	369, 370, 370, 370, 626, 0, 0, 727, 0, 0,
	627, 0, 0, 0, 0, 0, 0, 642, 0, 643,
	0, 0, 644, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 582, 583, 584, 0, 0,
	645, 714, 715, 0, 0, 0, 0, 0, 0, 650,
	0, 721, 0, 0, 0, 654, 655, 656, 0, 463,
	0, 479, 501, 503, 491, 389, 0, 0, 0, 0,
	0, 201, 220, 0, 0, 0, 0, 33, 0, 0,
	0, 0, 37, 0, 43, 0, 0, 0, 0, 322,
	0, 321, 0, 0, 311, 323, 328, 325, 331, 0,
	443, 0, 0, 451, 511, 512, 513, 514, 515, 516,
	517, 0, 113, 186, 0, 191, 0, 0, 0, 189,
	0, 0, 304, 358, 662, 0, 0, 395, 0, 0,
	0, 0, 0, 421, 425, 422, 423, 420, 400, 0,
	414, 0, 407, 524, -2, 0, 0, 0, 0, -2,
	0, 0, 0, 724, 0, 685, 0, -2, 698, 621,
	0, 0, 0, 0, 780, 725, 729, 0, 666, 667,
	671, 0, 0, 631, 0, 0, 699, 708, 709, 581,
	585, 586, 587, 588, 589, 590, 591, 592, 593, 594,
	-2, -2, -2, 598, 599, 600, -2, -2, -2, 0,
	0, 0, 710, 0, 0, 688, 712, 713, 718, 719,
	0, 647, 648, 649, 720, 0, 0, 0, 485, 0,
	662, 736, 274, 276, 30, 0, 202, 0, 205, 0,
	0, 0, 0, 211, 212, 0, 0, 0, 0, 222,
	229, 0, 0, 0, 45, 0, 0, 280, 0, 48,
	48, 271, 0, 0, 273, 309, 0, 0, 0, 315,
	755, 324, 0, 444, 441, 520, 0, 0, 256, 265,
	265, 0, 629, 630, 0, 0, 0, 261, 263, 0,
	0, 0, 346, 0, 388, 386, 408, 0, 410, 0,
	0, 0, 412, 403, 0, 0, 398, 0, 397, 0,
	0, 406, 0, 0, -2, 0, 572, -2, -2, 684,
	691, 777, 370, 622, 624, 625, 728, 673, 670, 0,
	657, 640, 641, 707, 0, 0, 0, 0, 691, 687,
	646, 0, 652, 653, 464, 347, 32, 0, 206, 207,
	791, 0, 210, 213, 0, 215, 793, 197, 0, 226,
	227, 224, 0, 34, 35, 44, 50, 36, 42, 0,
	0, 0, 0, 0, 332, 333, 0, 0, 229, 0,
	268, 772, 0, 268, 0, 0, 0, 219, 0, 197,
	229, 0, 661, 663, 0, 409, 0, 428, 411, 0,
	0, 401, 0, 0, 415, -2, -2, 573, 686, 0,
	370, 0, 659, -2, 0, 0, 0, 689, 0, 204,
	208, 0, 0, 235, 0, 223, 0, 0, 52, 0,
	275, 277, 0, 318, 439, 320, 0, 197, 257, 258,
	264, 259, 265, 370, 229, 262, 187, 197, 0, 0,
	0, 0, 0, 399, 396, 413, 623, 676, 0, -2,
	0, 606, 651, 0, 214, 240, 0, 0, 0, 231,
	38, 0, 49, 0, 319, 0, 217, 268, 0, 197,
	252, 0, 664, 665, 427, 0, 0, 0, 0, 672,
	607, 0, 216, 236, 237, 0, 232, 233, 234, 792,
	228, 235, 0, 51, 439, 0, 260, 621, 218, 229,
	419, 669, 674, 677, -2, 902, 821, 0, 675, 209,
	238, 0, 239, 0, 0, 0, 240, 0, 317, 200,
	197, 0, 679, 680, 681, 682, 683, 241, 0, 244,
	245, 0, 242, 225, 230, 196, 198, 199, 253, 0,
	243, 246, 247, 678,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 283, 3, 289, 284, 3,
	294, 295, 287, 285, 298, 286, 296, 288, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 302, 297,
	277, 279, 278, 3, 299, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 292, 3, 293, 282, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 300, 281, 301, 291,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 280,
	57620, 290, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:699
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:705
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:711
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 17:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:734
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 24:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:744
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 25:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:750
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.qname(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 26:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:754
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.qname(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 27:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:760
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 28:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:764
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 29:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:771
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 30:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:776
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 31:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:781
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 32:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:786
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 33:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:791
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: sqlDollar[3].str, Default: sqlDollar[4].union.expr()}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:796
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: sqlDollar[3].str}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:800
		{
			unimplemented()
		}
	case 36:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:803
		{
			sqlVAL.union.val = &AlterTableDropColumn{columnKeyword: sqlDollar[2].union.bool(), IfExists: true, Column: sqlDollar[5].str}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:808
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        sqlDollar[3].str,
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:818
		{
		}
	case 39:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:821
		{
			sqlVAL.union.val = &AlterTableAddConstraint{ConstraintDef: sqlDollar[2].union.constraintDef()}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:825
		{
			unimplemented()
		}
	case 41:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:827
		{
			unimplemented()
		}
	case 42:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:830
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   sqlDollar[5].str,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 43:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:839
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   sqlDollar[3].str,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 44:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:849
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 45:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:853
		{
			sqlVAL.union.val = nil
		}
	case 46:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:859
		{
			sqlVAL.union.val = DropCascade
		}
	case 47:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:863
		{
			sqlVAL.union.val = DropRestrict
		}
	case 48:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:867
		{
			sqlVAL.union.val = DropDefault
		}
	case 49:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:872
		{
			unimplementedWithIssue(2473)
		}
	case 50:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:873
		{
		}
	case 51:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:876
		{
			unimplemented()
		}
	case 52:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:877
		{
		}
	case 56:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:888
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retExprs()}
		}
	case 57:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:895
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 58:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:899
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:903
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:911
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:919
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.qnames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:923
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.qnames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:929
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:933
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 65:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:939
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 66:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:943
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:949
		{
			sqlVAL.union.val = Indirection{NameIndirection(sqlDollar[2].str)}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:953
		{
			sqlVAL.union.val = append(sqlDollar[1].union.indirect(), NameIndirection(sqlDollar[3].str))
		}
	case 69:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:960
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 70:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:964
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 71:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:970
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 78:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:979
		{ /* SKIP DOC */
		}
	case 79:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:983
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:987
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 82:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:997
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1007
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 84:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1011
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 85:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1017
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 89:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1027
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1038
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 91:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1042
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 92:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1049
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1055
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1061
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1065
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1072
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: NameList(sqlDollar[6].union.strs()), Targets: sqlDollar[4].union.targetList()}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1079
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: NameList(sqlDollar[6].union.strs()), Targets: sqlDollar[4].union.targetList()}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1086
		{
			sqlVAL.union.val = TargetList{Tables: QualifiedNames(sqlDollar[1].union.qnames())}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1090
		{
			sqlVAL.union.val = TargetList{Tables: QualifiedNames(sqlDollar[2].union.qnames())}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1094
		{
			sqlVAL.union.val = TargetList{Databases: NameList(sqlDollar[2].union.strs())}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1101
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1104
		{
		}
	case 103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1108
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1112
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 105:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1119
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 106:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1123
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1127
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1131
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1135
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 110:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1139
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 111:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1143
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 112:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1151
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1155
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1163
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1167
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 116:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1171
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1175
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1178
		{ /* SKIP DOC */
		}
	case 119:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1184
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1190
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1197
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1201
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1205
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1209
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1216
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1222
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname(), Values: sqlDollar[3].union.exprs()}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1226
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname(), Values: sqlDollar[3].union.exprs()}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1230
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname()}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1234
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname()}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1241
		{
			unimplemented()
		}
	case 133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1244
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1247
		{
			unimplemented()
		}
	case 136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1254
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1258
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1266
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1272
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1276
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1280
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1284
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1288
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1294
		{
			sqlVAL.union.val = Low
		}
	case 147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1298
		{
			sqlVAL.union.val = Normal
		}
	case 148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1302
		{
			sqlVAL.union.val = High
		}
	case 149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1308
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1312
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1316
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1331
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1335
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1339
		{
			d, err := ParseDInterval(sqlDollar[2].str)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1349
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1353
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1358
		{
			unimplemented()
		}
	case 160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1359
		{
			unimplemented()
		}
	case 161:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1360
		{
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1364
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1368
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1374
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1378
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1382
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.qname()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1386
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1390
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.strs()}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1394
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1398
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1402
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.qname()}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1406
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.qname()}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1410
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1414
		{
			sqlVAL.union.val = &ShowTables{Name: sqlDollar[3].union.qname()}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1418
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1422
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1426
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1430
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 179:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1434
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.qname()}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1440
		{
			sqlVAL.union.val = sqlDollar[2].union.qname()
		}
	case 181:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1444
		{
			sqlVAL.union.val = (*QualifiedName)(nil)
		}
	case 182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1450
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 183:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1455
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1461
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 185:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1465
		{
			sqlVAL.union.val = []string(nil)
		}
	case 186:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1472
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.qname(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs()}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1476
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.qname(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs()}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1483
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 190:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1489
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1493
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 192:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1499
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1505
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 196:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1511
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       &QualifiedName{Base: Name(sqlDollar[4].str)},
				Fields:       sqlDollar[6].union.strs(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1519
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1526
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1530
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 200:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1534
		{
			sqlVAL.union.val = DropDefault
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1540
		{
			sqlVAL.union.val = newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
		}
	case 202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1546
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 203:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1550
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1556
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1560
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1563
		{
			unimplemented()
		}
	case 207:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1565
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1569
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1573
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1591
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1595
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1599
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1603
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1607
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1611
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1615
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.qname(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1624
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.strs(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1633
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.strs(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1646
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.famElems(),
			}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1658
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 221:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1663
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 222:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1669
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1675
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    NameListToIndexElems(sqlDollar[3].union.strs()),
					Storing:    sqlDollar[5].union.strs(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 224:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1685
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[4].union.strs()),
				},
				PrimaryKey: true,
			}
		}
	case 225:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1694
		{
			unimplemented()
		}
	case 228:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1711
		{
			sqlVAL.union.val = sqlDollar[3].union.strs()
		}
	case 229:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1715
		{
			sqlVAL.union.val = []string(nil)
		}
	case 230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1721
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 231:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1725
		{
			sqlVAL.union.val = []string(nil)
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1730
		{
			unimplemented()
		}
	case 233:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1731
		{
			unimplemented()
		}
	case 234:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1732
		{
			unimplemented()
		}
	case 235:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1733
		{
		}
	case 236:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1740
		{
			unimplemented()
		}
	case 237:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1741
		{
			unimplemented()
		}
	case 238:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1742
		{
			unimplemented()
		}
	case 239:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1743
		{
			unimplemented()
		}
	case 240:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1744
		{
		}
	case 241:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1747
		{
			unimplemented()
		}
	case 242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1750
		{
			unimplemented()
		}
	case 243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1753
		{
			unimplemented()
		}
	case 244:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1754
		{
			unimplemented()
		}
	case 245:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1755
		{
			unimplemented()
		}
	case 246:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1756
		{
			unimplemented()
		}
	case 247:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1757
		{
			unimplemented()
		}
	case 248:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1761
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1765
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1769
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 251:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1776
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.qnames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 252:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:1783
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.qname(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.strs(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 253:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:1794
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.qname(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.strs(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1808
		{
			sqlVAL.union.val = true
		}
	case 255:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1812
		{
			sqlVAL.union.val = false
		}
	case 256:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1818
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1822
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1831
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1834
		{
			unimplemented()
		}
	case 260:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1835
		{
			unimplemented()
		}
	case 261:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1839
		{
			sqlVAL.union.val = FamilyElemList{sqlDollar[1].union.famElem()}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1843
		{
			sqlVAL.union.val = append(sqlDollar[1].union.famElems(), sqlDollar[3].union.famElem())
		}
	case 263:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1849
		{
			sqlVAL.union.val = FamilyElem{Column: Name(sqlDollar[1].str)}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1854
		{
			unimplemented()
		}
	case 265:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1855
		{
		}
	case 266:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1859
		{
			sqlVAL.union.val = Ascending
		}
	case 267:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1863
		{
			sqlVAL.union.val = Descending
		}
	case 268:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1867
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 269:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1874
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1878
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.qname(), NewName: sqlDollar[6].union.qname(), IfExists: false}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1882
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.qname(), NewName: sqlDollar[8].union.qname(), IfExists: true}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1886
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1890
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1894
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.qname(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1898
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.qname(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1902
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 277:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1906
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 278:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1912
		{
			sqlVAL.union.val = true
		}
	case 279:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1916
		{
			sqlVAL.union.val = false
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1921
		{
		}
	case 281:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1922
		{
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1926
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1932
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1939
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1943
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 286:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1947
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1951
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1955
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1964
		{
		}
	case 290:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1965
		{
		}
	case 291:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1969
		{
			sqlVAL.str = ""
		}
	case 292:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1973
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 293:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1977
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 294:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1981
		{
			sqlVAL.str = ""
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1987
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1991
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 297:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1997
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2001
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2005
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2009
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2013
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2019
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 303:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2025
		{
			sqlVAL.union.val = &CreateDatabase{Name: Name(sqlDollar[3].str), Encoding: sqlDollar[4].union.strVal()}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2029
		{
			sqlVAL.union.val = &CreateDatabase{IfNotExists: true, Name: Name(sqlDollar[6].str), Encoding: sqlDollar[7].union.strVal()}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2035
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2038
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 307:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2048
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retExprs()
		}
	case 308:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2054
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
		}
	case 309:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2059
		{
			unimplementedWithIssue(6637)
		}
	case 310:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2061
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2066
		{
			unimplementedWithIssue(6637)
		}
	case 312:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2074
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname()}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2078
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2084
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2088
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.qnames(), Rows: sqlDollar[4].union.slct()}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2092
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2098
		{
			sqlVAL.union.val = &OnConflict{Columns: NameList(sqlDollar[3].union.strs()), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2102
		{
			sqlVAL.union.val = &OnConflict{Columns: NameList(sqlDollar[3].union.strs()), DoNothing: true}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2108
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 320:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2112
		{
			unimplemented()
		}
	case 321:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2114
		{
			sqlVAL.union.val = []string(nil)
		}
	case 322:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2120
		{
			sqlVAL.union.val = sqlDollar[2].union.selExprs()
		}
	case 323:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2124
		{
			sqlVAL.union.val = SelectExprs(nil)
		}
	case 324:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2131
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retExprs()}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2137
		{
			unimplementedWithIssue(7841)
		}
	case 326:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2138
		{
		}
	case 327:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2142
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2146
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 331:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2156
		{
			sqlVAL.union.val = &UpdateExpr{Names: QualifiedNames{sqlDollar[1].union.qname()}, Expr: sqlDollar[3].union.expr()}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2168
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.qnames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2172
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.qnames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2216
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2222
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2226
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2241
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2245
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2249
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2253
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2257
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2261
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2295
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.tblExprs(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2307
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.tblExprs(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2319
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        TableExprs{&AliasedTableExpr{Expr: sqlDollar[2].union.qname()}},
				tableSelect: true,
			}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2327
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2336
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2345
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2363
		{
			unimplemented()
		}
	case 354:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2364
		{
			unimplemented()
		}
	case 355:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2365
		{
			unimplemented()
		}
	case 356:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2368
		{
			unimplemented()
		}
	case 357:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2369
		{
			unimplemented()
		}
	case 358:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2372
		{
			unimplemented()
		}
	case 359:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2375
		{
			unimplemented()
		}
	case 360:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2376
		{
		}
	case 361:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2379
		{
		}
	case 362:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2380
		{
		}
	case 363:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2384
		{
			sqlVAL.union.val = true
		}
	case 364:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2388
		{
			sqlVAL.union.val = false
		}
	case 365:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2392
		{
			sqlVAL.union.val = false
		}
	case 366:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2398
		{
			sqlVAL.union.val = true
		}
	case 367:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2403
		{
		}
	case 368:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2404
		{
		}
	case 369:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2408
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 370:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2412
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 371:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2418
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 372:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2424
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2428
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2434
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2442
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2451
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2462
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2475
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2482
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2489
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 384:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2503
		{
		}
	case 385:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2504
		{
		}
	case 386:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2530
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 387:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2534
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2540
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 389:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2544
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 390:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2550
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2554
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 392:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2566
		{
			sqlVAL.union.val = sqlDollar[2].union.tblExprs()
		}
	case 393:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2570
		{
			sqlVAL.union.val = TableExprs(nil)
		}
	case 394:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2576
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2580
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 396:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2586
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2591
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2597
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 399:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2602
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			index := a.Index
			if index == "" {
				index = b.Index
			} else if b.Index != "" {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			noIndexJoin := a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = &IndexHints{Index: index, NoIndexJoin: noIndexJoin}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2622
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2626
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 402:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2630
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 403:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2637
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), Hints: sqlDollar[2].union.indexHints(), As: sqlDollar[3].union.aliasClause(), AsOf: sqlDollar[4].union.asOfClause()}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2641
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, As: sqlDollar[2].union.aliasClause()}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2645
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 406:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2649
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[2].union.tblExpr(), As: sqlDollar[4].union.aliasClause()}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2669
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2673
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2677
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2681
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2685
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2689
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2695
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: NameList(sqlDollar[4].union.strs())}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2699
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2703
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: NameList(sqlDollar[3].union.strs())}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2707
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2714
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2720
		{
			sqlVAL.union.val = AsOfClause{Expr: &StrVal{s: sqlDollar[5].str}}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2724
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2730
		{
			sqlVAL.str = astFullJoin
		}
	case 422:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2734
		{
			sqlVAL.str = astLeftJoin
		}
	case 423:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2738
		{
			sqlVAL.str = astRightJoin
		}
	case 424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2742
		{
			sqlVAL.str = astInnerJoin
		}
	case 425:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2748
		{
		}
	case 426:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2749
		{
		}
	case 427:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2760
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: NameList(sqlDollar[3].union.strs())}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2764
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2770
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 430:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2774
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2778
		{
			sqlVAL.union.val = sqlDollar[2].union.qname()
		}
	case 432:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2782
		{
			sqlVAL.union.val = sqlDollar[3].union.qname()
		}
	case 433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2788
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2792
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2805
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname()}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2809
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2813
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2819
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 439:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2823
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 440:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2835
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 441:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2839
		{
			unimplementedWithIssue(2115)
		}
	case 442:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2840
		{
			unimplementedWithIssue(2115)
		}
	case 443:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2843
		{
			unimplementedWithIssue(2115)
		}
	case 444:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2844
		{
			unimplementedWithIssue(2115)
		}
	case 445:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2845
		{
		}
	case 451:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2853
		{
			unimplemented()
		}
	case 452:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2855
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 453:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2859
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 454:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2863
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 455:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2867
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 456:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2871
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 457:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2875
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 458:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2879
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 463:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2900
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2909
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2923
		{
			sqlVAL.union.val = nil
		}
	case 466:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2930
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 467:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2934
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 468:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2938
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 469:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2942
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2946
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 471:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2950
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 472:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2954
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newFloatColType(int(prec))
		}
	case 473:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2963
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 474:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2967
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2976
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2985
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2994
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 478:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2998
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 479:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3004
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 480:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3008
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3026
		{
			n, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newIntBitType(int(n))
		}
	case 486:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3037
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 491:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3053
		{
			n, err := sqlDollar[3].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3069
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 493:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3075
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 494:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3079
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 495:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3083
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 496:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3087
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 497:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3092
		{
		}
	case 498:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3093
		{
		}
	case 499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3098
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 500:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3102
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 501:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3106
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 502:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3110
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 503:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3114
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 504:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3119
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 505:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3124
		{
			unimplemented()
		}
	case 506:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3125
		{
			unimplemented()
		}
	case 507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3126
		{
			unimplemented()
		}
	case 508:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3127
		{
			unimplemented()
		}
	case 509:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3128
		{
			unimplemented()
		}
	case 510:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3129
		{
			unimplemented()
		}
	case 511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3130
		{
			unimplemented()
		}
	case 512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3131
		{
			unimplemented()
		}
	case 513:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3132
		{
			unimplemented()
		}
	case 514:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3133
		{
			unimplemented()
		}
	case 515:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3134
		{
			unimplemented()
		}
	case 516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3135
		{
			unimplemented()
		}
	case 517:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3136
		{
			unimplemented()
		}
	case 518:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3137
		{
		}
	case 519:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3140
		{
			unimplemented()
		}
	case 520:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3141
		{
			unimplemented()
		}
	case 522:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3165
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3173
		{
			unimplemented()
		}
	case 524:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3174
		{
			unimplemented()
		}
	case 525:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3183
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3187
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3191
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3195
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3199
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3203
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3207
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3211
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3215
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3219
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3223
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3227
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3231
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3235
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3239
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3243
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3247
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3251
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3255
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3259
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3263
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3267
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3271
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3275
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3279
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3283
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3287
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3291
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3295
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3299
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3303
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3307
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3311
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3315
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3319
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3323
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3327
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3331
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3334
		{
			unimplemented()
		}
	case 564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3336
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3340
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3344
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3348
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3352
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3356
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3360
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3364
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3368
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3372
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3376
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3380
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3384
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3388
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3392
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3396
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3413
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3422
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3426
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3430
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3434
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3438
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3442
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3446
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3450
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3454
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3458
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3462
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3466
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3470
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3474
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3478
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3482
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3486
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3490
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3494
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3498
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3502
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3506
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3510
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3514
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3518
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3522
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3534
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 610:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3539
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3543
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3549
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3553
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3557
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3563
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 618:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3567
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 619:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3571
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3579
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname()}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3583
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3586
		{
			unimplemented()
		}
	case 623:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3587
		{
			unimplemented()
		}
	case 624:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3589
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Type: All, Exprs: sqlDollar[4].union.exprs()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3593
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Type: Distinct, Exprs: sqlDollar[4].union.exprs()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3597
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Exprs: Exprs{StarExpr()}}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3610
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 628:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3614
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 629:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3623
		{
			unimplemented()
		}
	case 630:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3624
		{
			unimplemented()
		}
	case 631:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3628
		{
			unimplemented()
		}
	case 632:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3630
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3634
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3638
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3642
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3645
		{
			unimplemented()
		}
	case 637:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3646
		{
			unimplemented()
		}
	case 638:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3647
		{
			unimplemented()
		}
	case 639:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3648
		{
			unimplemented()
		}
	case 640:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3650
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3654
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3658
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3662
		{
			sqlVAL.union.val = &OverlayExpr{FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3666
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "STRPOS"}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3670
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3673
		{
			unimplemented()
		}
	case 647:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3675
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3679
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "LTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3683
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "RTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3687
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3691
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3695
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3699
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3703
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3707
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3711
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3717
		{
			unimplemented()
		}
	case 658:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3718
		{
		}
	case 659:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3721
		{
			unimplemented()
		}
	case 660:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3722
		{
		}
	case 661:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3726
		{
			unimplemented()
		}
	case 662:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3727
		{
		}
	case 663:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3730
		{
			unimplemented()
		}
	case 664:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3731
		{
			unimplemented()
		}
	case 665:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3734
		{
			unimplemented()
		}
	case 666:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3737
		{
			unimplemented()
		}
	case 667:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3738
		{
			unimplemented()
		}
	case 668:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3739
		{
		}
	case 669:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3743
		{
			unimplemented()
		}
	case 670:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3754
		{
			unimplemented()
		}
	case 671:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3755
		{
		}
	case 672:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3758
		{
			unimplemented()
		}
	case 673:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3759
		{
		}
	case 674:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3767
		{
			unimplemented()
		}
	case 675:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3768
		{
			unimplemented()
		}
	case 676:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3769
		{
		}
	case 677:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3772
		{
			unimplemented()
		}
	case 678:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3773
		{
			unimplemented()
		}
	case 679:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3779
		{
			unimplemented()
		}
	case 680:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3780
		{
			unimplemented()
		}
	case 681:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3781
		{
			unimplemented()
		}
	case 682:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3782
		{
			unimplemented()
		}
	case 683:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3783
		{
			unimplemented()
		}
	case 684:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3794
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3798
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3802
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3808
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3812
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3818
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3861
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3865
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 692:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3871
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3875
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 694:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3881
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3885
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3889
		{
			sqlVAL.union.val = &Array{nil}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3895
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3899
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 699:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3905
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3927
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3931
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3937
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 710:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3944
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3948
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 712:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3965
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3969
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3973
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3977
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3981
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 717:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3985
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 718:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3991
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 719:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3997
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4003
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 721:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4007
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 722:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4011
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 723:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4017
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4021
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4032
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4039
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4043
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 728:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4049
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4055
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 730:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4059
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 732:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4066
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 733:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4072
		{
			sqlVAL.union.val = sqlDollar[1].union.indirectElem()
		}
	case 734:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4076
		{
			sqlVAL.union.val = sqlDollar[1].union.indirectElem()
		}
	case 735:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4080
		{
			sqlVAL.union.val = &ArrayIndirection{Begin: sqlDollar[2].union.expr()}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4084
		{
			sqlVAL.union.val = &ArrayIndirection{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr()}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4090
		{
			sqlVAL.union.val = NameIndirection(sqlDollar[2].str)
		}
	case 738:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4096
		{
			sqlVAL.union.val = qualifiedStar
		}
	case 739:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4102
		{
			sqlVAL.union.val = Indirection{sqlDollar[1].union.indirectElem()}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4106
		{
			sqlVAL.union.val = append(sqlDollar[1].union.indirect(), sqlDollar[2].union.indirectElem())
		}
	case 741:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4111
		{
		}
	case 742:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4112
		{
		}
	case 744:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4121
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4127
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4131
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 747:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4140
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 748:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4146
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4150
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 750:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4156
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4165
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4169
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4173
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 754:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4181
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4185
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 756:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4191
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4195
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 758:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4201
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4205
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 760:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4216
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4220
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4226
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.qname(), Index: Name(sqlDollar[3].str)}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4237
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4241
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: Indirection{sqlDollar[2].union.indirectElem()}}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4245
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: Indirection{sqlDollar[2].union.indirectElem()}}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4249
		{
			sqlVAL.union.val = &QualifiedName{Indirect: Indirection{unqualifiedStar}}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4255
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4259
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 769:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4265
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 770:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4268
		{
		}
	case 771:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4278
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4282
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4289
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 774:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4293
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 775:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4297
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4301
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4304
		{
			unimplemented()
		}
	case 778:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4306
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4310
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4314
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[5].str}, Type: sqlDollar[1].union.colType()}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4318
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 782:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4322
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 783:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4326
		{
			sqlVAL.union.val = DNull
		}
	case 785:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4333
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 786:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4337
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4359
		{
			sqlVAL.str = ""
		}
	case 792:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4365
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 793:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4369
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
