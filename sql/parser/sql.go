// Code generated by go yacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"go/constant"
	"go/token"

	"github.com/pkg/errors"

	"github.com/cockroachdb/cockroach/sql/privilege"
	"github.com/cockroachdb/cockroach/util"
)

var errUnimplemented = errors.New("unimplemented")

func unimplemented() {
	panic(errUnimplemented)
}

func unimplementedWithIssue(issue int) {
	panic(util.UnimplementedWithIssueErrorf(issue, ""))
}

//line sql.y:44

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new sytax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in two forms, depending on the
// type of the value being accessed. Values and pointers are directly
// type asserted from the empty interface, meaning that they will panic
// if the type assertion is incorrect. Interfaces are handled differently
// because a nil instance of an interface inserted into the empty interface
// becomes a nil instance of the empty interface and therefore will fail a
// direct type assertion. Instead, a guarded type assertion must be used,
// which returns nil if the type assertion fails.
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	return u.val.(*StrVal)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) qname() *QualifiedName {
	return u.val.(*QualifiedName)
}
func (u *sqlSymUnion) qnames() QualifiedNames {
	return u.val.(QualifiedNames)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) indirectElem() IndirectionElem {
	if indirectElem, ok := u.val.(IndirectionElem); ok {
		return indirectElem
	}
	return nil
}
func (u *sqlSymUnion) indirect() Indirection {
	return u.val.(Indirection)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	if selectStmt, ok := u.val.(*Select); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	if selectStmt, ok := u.val.(SelectStatement); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	if constraintDef, ok := u.val.(ConstraintTableDef); ok {
		return constraintDef
	}
	return nil
}
func (u *sqlSymUnion) tblDef() TableDef {
	if tblDef, ok := u.val.(TableDef); ok {
		return tblDef
	}
	return nil
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	if colQual, ok := u.val.(NamedColumnQualification); ok {
		return colQual
	}
	return NamedColumnQualification{}
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	if colQual, ok := u.val.(ColumnQualification); ok {
		return colQual
	}
	return nil
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retExprs() ReturningExprs {
	return ReturningExprs(u.val.(SelectExprs))
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	if tblExpr, ok := u.val.(TableExpr); ok {
		return tblExpr
	}
	return nil
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	if joinCond, ok := u.val.(JoinCond); ok {
		return joinCond
	}
	return nil
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	if alterTableCmd, ok := u.val.(AlterTableCmd); ok {
		return alterTableCmd
	}
	return nil
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) famElem() FamilyElem {
	return u.val.(FamilyElem)
}
func (u *sqlSymUnion) famElems() FamilyElemList {
	return u.val.(FamilyElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}

//line sql.y:291
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const DOT_DOT = 57353
const LESS_EQUALS = 57354
const GREATER_EQUALS = 57355
const NOT_EQUALS = 57356
const ERROR = 57357
const ACTION = 57358
const ADD = 57359
const ALL = 57360
const ALTER = 57361
const ANALYSE = 57362
const ANALYZE = 57363
const AND = 57364
const ANY = 57365
const ARRAY = 57366
const AS = 57367
const ASC = 57368
const ASYMMETRIC = 57369
const AT = 57370
const BEGIN = 57371
const BETWEEN = 57372
const BIGINT = 57373
const BIGSERIAL = 57374
const BIT = 57375
const BLOB = 57376
const BOOL = 57377
const BOOLEAN = 57378
const BOTH = 57379
const BY = 57380
const BYTEA = 57381
const BYTES = 57382
const CASCADE = 57383
const CASE = 57384
const CAST = 57385
const CHAR = 57386
const CHARACTER = 57387
const CHARACTERISTICS = 57388
const CHECK = 57389
const COALESCE = 57390
const COLLATE = 57391
const COLLATION = 57392
const COLUMN = 57393
const COLUMNS = 57394
const COMMIT = 57395
const COMMITTED = 57396
const CONCAT = 57397
const CONFLICT = 57398
const CONSTRAINT = 57399
const COVERING = 57400
const CREATE = 57401
const CROSS = 57402
const CUBE = 57403
const CURRENT = 57404
const CURRENT_CATALOG = 57405
const CURRENT_DATE = 57406
const CURRENT_ROLE = 57407
const CURRENT_TIME = 57408
const CURRENT_TIMESTAMP = 57409
const CURRENT_USER = 57410
const CYCLE = 57411
const DATA = 57412
const DATABASE = 57413
const DATABASES = 57414
const DATE = 57415
const DAY = 57416
const DEC = 57417
const DECIMAL = 57418
const DEFAULT = 57419
const DEALLOCATE = 57420
const DEFERRABLE = 57421
const DELETE = 57422
const DESC = 57423
const DISTINCT = 57424
const DO = 57425
const DOUBLE = 57426
const DROP = 57427
const ELSE = 57428
const ENCODING = 57429
const END = 57430
const ESCAPE = 57431
const EXCEPT = 57432
const EXISTS = 57433
const EXECUTE = 57434
const EXPLAIN = 57435
const EXTRACT = 57436
const FALSE = 57437
const FAMILY = 57438
const FETCH = 57439
const FILTER = 57440
const FIRST = 57441
const FLOAT = 57442
const FLOORDIV = 57443
const FOLLOWING = 57444
const FOR = 57445
const FORCE_INDEX = 57446
const FOREIGN = 57447
const FROM = 57448
const FULL = 57449
const GRANT = 57450
const GRANTS = 57451
const GREATEST = 57452
const GROUP = 57453
const GROUPING = 57454
const HAVING = 57455
const HIGH = 57456
const HOUR = 57457
const IF = 57458
const IFNULL = 57459
const IN = 57460
const INDEX = 57461
const INDEXES = 57462
const INITIALLY = 57463
const INNER = 57464
const INSERT = 57465
const INT = 57466
const INT64 = 57467
const INTEGER = 57468
const INTERSECT = 57469
const INTERVAL = 57470
const INTO = 57471
const IS = 57472
const ISOLATION = 57473
const JOIN = 57474
const KEY = 57475
const KEYS = 57476
const LATERAL = 57477
const LEADING = 57478
const LEAST = 57479
const LEFT = 57480
const LEVEL = 57481
const LIKE = 57482
const LIMIT = 57483
const LOCAL = 57484
const LOCALTIME = 57485
const LOCALTIMESTAMP = 57486
const LOW = 57487
const LSHIFT = 57488
const MATCH = 57489
const MINUTE = 57490
const MONTH = 57491
const NAME = 57492
const NAMES = 57493
const NATURAL = 57494
const NEXT = 57495
const NO = 57496
const NO_INDEX_JOIN = 57497
const NORMAL = 57498
const NOT = 57499
const NOTHING = 57500
const NULL = 57501
const NULLIF = 57502
const NULLS = 57503
const NUMERIC = 57504
const OF = 57505
const OFF = 57506
const OFFSET = 57507
const ON = 57508
const ONLY = 57509
const OR = 57510
const ORDER = 57511
const ORDINALITY = 57512
const OUT = 57513
const OUTER = 57514
const OVER = 57515
const OVERLAPS = 57516
const OVERLAY = 57517
const PARTIAL = 57518
const PARTITION = 57519
const PLACING = 57520
const POSITION = 57521
const PRECEDING = 57522
const PRECISION = 57523
const PREPARE = 57524
const PRIMARY = 57525
const PRIORITY = 57526
const RANGE = 57527
const READ = 57528
const REAL = 57529
const RECURSIVE = 57530
const REF = 57531
const REFERENCES = 57532
const RENAME = 57533
const REPEATABLE = 57534
const RELEASE = 57535
const RESTRICT = 57536
const RETURNING = 57537
const REVOKE = 57538
const RIGHT = 57539
const ROLLBACK = 57540
const ROLLUP = 57541
const ROW = 57542
const ROWS = 57543
const RSHIFT = 57544
const SAVEPOINT = 57545
const SEARCH = 57546
const SECOND = 57547
const SELECT = 57548
const SERIAL = 57549
const SERIALIZABLE = 57550
const SESSION = 57551
const SESSION_USER = 57552
const SET = 57553
const SHOW = 57554
const SIMILAR = 57555
const SIMPLE = 57556
const SMALLINT = 57557
const SMALLSERIAL = 57558
const SNAPSHOT = 57559
const SOME = 57560
const SQL = 57561
const START = 57562
const STRICT = 57563
const STRING = 57564
const STORING = 57565
const SUBSTRING = 57566
const SYMMETRIC = 57567
const SYSTEM = 57568
const TABLE = 57569
const TABLES = 57570
const TEXT = 57571
const THEN = 57572
const TIME = 57573
const TIMESTAMP = 57574
const TIMESTAMPTZ = 57575
const TO = 57576
const TRAILING = 57577
const TRANSACTION = 57578
const TREAT = 57579
const TRIM = 57580
const TRUE = 57581
const TRUNCATE = 57582
const TYPE = 57583
const UNBOUNDED = 57584
const UNCOMMITTED = 57585
const UNION = 57586
const UNIQUE = 57587
const UNKNOWN = 57588
const UPDATE = 57589
const UPSERT = 57590
const USER = 57591
const USING = 57592
const VALID = 57593
const VALIDATE = 57594
const VALUE = 57595
const VALUES = 57596
const VARCHAR = 57597
const VARIADIC = 57598
const VARYING = 57599
const WHEN = 57600
const WHERE = 57601
const WINDOW = 57602
const WITH = 57603
const WITHIN = 57604
const WITHOUT = 57605
const YEAR = 57606
const ZONE = 57607
const NOT_LA = 57608
const WITH_LA = 57609
const AS_LA = 57610
const POSTFIXOP = 57611
const UMINUS = 57612

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPLAIN",
	"EXTRACT",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HOUR",
	"IF",
	"IFNULL",
	"IN",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARTIAL",
	"PARTITION",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SQL",
	"START",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:4579

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 24,
	289, 24,
	-2, 349,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 38,
	1, 324,
	166, 324,
	195, 324,
	287, 324,
	289, 324,
	-2, 334,
	-1, 51,
	1, 327,
	166, 327,
	195, 327,
	287, 327,
	289, 327,
	-2, 333,
	-1, 60,
	1, 24,
	289, 24,
	-2, 349,
	-1, 267,
	1, 161,
	289, 161,
	-2, 834,
	-1, 298,
	141, 359,
	165, 359,
	-2, 330,
	-1, 301,
	141, 358,
	165, 358,
	-2, 328,
	-1, 421,
	141, 358,
	165, 358,
	-2, 331,
	-1, 477,
	286, 776,
	-2, 769,
	-1, 478,
	286, 777,
	-2, 770,
	-1, 484,
	5, 493,
	286, 493,
	-2, 919,
	-1, 506,
	5, 459,
	-2, 895,
	-1, 507,
	5, 487,
	286, 487,
	-2, 897,
	-1, 508,
	5, 467,
	-2, 898,
	-1, 509,
	5, 466,
	-2, 899,
	-1, 510,
	5, 487,
	286, 487,
	-2, 902,
	-1, 511,
	5, 487,
	286, 487,
	-2, 903,
	-1, 512,
	5, 488,
	-2, 906,
	-1, 513,
	5, 454,
	-2, 907,
	-1, 514,
	5, 454,
	-2, 908,
	-1, 515,
	5, 469,
	-2, 911,
	-1, 516,
	5, 455,
	-2, 916,
	-1, 517,
	5, 456,
	-2, 917,
	-1, 518,
	5, 457,
	-2, 918,
	-1, 519,
	5, 454,
	-2, 922,
	-1, 520,
	5, 460,
	-2, 927,
	-1, 521,
	5, 458,
	-2, 930,
	-1, 522,
	5, 485,
	286, 485,
	-2, 932,
	-1, 523,
	5, 489,
	-2, 935,
	-1, 524,
	5, 491,
	-2, 936,
	-1, 525,
	5, 484,
	286, 484,
	-2, 940,
	-1, 836,
	90, 334,
	127, 334,
	141, 334,
	165, 334,
	169, 334,
	244, 334,
	-2, 597,
	-1, 844,
	286, 754,
	-2, 743,
	-1, 1033,
	12, 0,
	13, 0,
	14, 0,
	269, 0,
	270, 0,
	271, 0,
	-2, 527,
	-1, 1034,
	12, 0,
	13, 0,
	14, 0,
	269, 0,
	270, 0,
	271, 0,
	-2, 528,
	-1, 1035,
	12, 0,
	13, 0,
	14, 0,
	269, 0,
	270, 0,
	271, 0,
	-2, 529,
	-1, 1039,
	12, 0,
	13, 0,
	14, 0,
	269, 0,
	270, 0,
	271, 0,
	-2, 533,
	-1, 1040,
	12, 0,
	13, 0,
	14, 0,
	269, 0,
	270, 0,
	271, 0,
	-2, 534,
	-1, 1041,
	12, 0,
	13, 0,
	14, 0,
	269, 0,
	270, 0,
	271, 0,
	-2, 535,
	-1, 1044,
	30, 0,
	118, 0,
	140, 0,
	213, 0,
	266, 0,
	-2, 540,
	-1, 1074,
	174, 667,
	-2, 670,
	-1, 1233,
	90, 334,
	127, 334,
	141, 334,
	165, 334,
	169, 334,
	244, 334,
	-2, 407,
	-1, 1237,
	30, 0,
	118, 0,
	140, 0,
	213, 0,
	266, 0,
	-2, 541,
	-1, 1242,
	30, 0,
	118, 0,
	140, 0,
	213, 0,
	266, 0,
	-2, 542,
	-1, 1260,
	174, 666,
	-2, 669,
	-1, 1413,
	30, 0,
	118, 0,
	140, 0,
	213, 0,
	266, 0,
	-2, 543,
	-1, 1418,
	130, 0,
	-2, 553,
	-1, 1426,
	174, 668,
	-2, 671,
	-1, 1458,
	12, 0,
	13, 0,
	14, 0,
	269, 0,
	270, 0,
	271, 0,
	-2, 578,
	-1, 1459,
	12, 0,
	13, 0,
	14, 0,
	269, 0,
	270, 0,
	271, 0,
	-2, 579,
	-1, 1460,
	12, 0,
	13, 0,
	14, 0,
	269, 0,
	270, 0,
	271, 0,
	-2, 580,
	-1, 1464,
	12, 0,
	13, 0,
	14, 0,
	269, 0,
	270, 0,
	271, 0,
	-2, 584,
	-1, 1465,
	12, 0,
	13, 0,
	14, 0,
	269, 0,
	270, 0,
	271, 0,
	-2, 585,
	-1, 1466,
	12, 0,
	13, 0,
	14, 0,
	269, 0,
	270, 0,
	271, 0,
	-2, 586,
	-1, 1570,
	130, 0,
	-2, 554,
	-1, 1573,
	30, 0,
	118, 0,
	140, 0,
	213, 0,
	266, 0,
	-2, 557,
	-1, 1574,
	30, 0,
	118, 0,
	140, 0,
	213, 0,
	266, 0,
	-2, 559,
	-1, 1657,
	30, 0,
	118, 0,
	140, 0,
	213, 0,
	266, 0,
	-2, 558,
	-1, 1658,
	30, 0,
	118, 0,
	140, 0,
	213, 0,
	266, 0,
	-2, 560,
	-1, 1665,
	130, 0,
	-2, 587,
	-1, 1706,
	130, 0,
	-2, 588,
	-1, 1754,
	30, 0,
	140, 0,
	213, 0,
	266, 0,
	-2, 894,
}

const sqlNprod = 1033
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 21976

var sqlAct = [...]int{

	478, 1734, 1753, 1775, 1711, 1610, 1752, 917, 1122, 925,
	1735, 1006, 1437, 580, 793, 1736, 1632, 528, 1645, 669,
	476, 302, 1534, 1533, 268, 1562, 1543, 1496, 1554, 324,
	475, 37, 84, 84, 84, 839, 1230, 84, 85, 1015,
	84, 1548, 841, 1314, 1263, 987, 1165, 581, 84, 1393,
	1220, 567, 538, 17, 440, 84, 84, 774, 1402, 84,
	1313, 1229, 84, 84, 84, 771, 990, 547, 84, 84,
	84, 84, 1119, 350, 468, 989, 926, 902, 544, 893,
	1216, 1057, 1084, 1060, 73, 307, 1018, 309, 50, 940,
	23, 949, 13, 643, 982, 345, 627, 301, 789, 6,
	409, 1016, 1171, 795, 307, 539, 441, 526, 549, 450,
	956, 351, 540, 410, 624, 654, 347, 340, 50, 343,
	8, 78, 7, 77, 5, 4, 870, 874, 71, 425,
	79, 993, 265, 342, 919, 424, 312, 423, 641, 255,
	623, 560, 246, 310, 645, 336, 1652, 51, 50, 1653,
	918, 80, 953, 75, 52, 74, 76, 569, 569, 306,
	320, 569, 428, 327, 1782, 1749, 306, 1010, 1631, 337,
	1742, 1733, 1727, 1010, 946, 1010, 922, 1228, 797, 1708,
	352, 1177, 946, 1702, 558, 1258, 1010, 291, 348, 1692,
	1259, 1683, 1631, 954, 1010, 797, 959, 330, 299, 314,
	1659, 1656, 1696, 946, 1010, 298, 1642, 1639, 1630, 1631,
	1640, 1631, 1615, 1614, 1594, 1010, 1010, 959, 1575, 1572,
	1507, 959, 946, 1010, 56, 1422, 955, 952, 959, 1370,
	1364, 1331, 1365, 1365, 1332, 1329, 1328, 1327, 959, 959,
	959, 81, 84, 1260, 1257, 58, 959, 1011, 968, 959,
	1010, 959, 958, 945, 796, 959, 946, 84, 1634, 890,
	84, 84, 889, 81, 575, 1471, 1425, 576, 1202, 891,
	1218, 1204, 59, 1010, 961, 1068, 1005, 976, 798, 54,
	1262, 49, 436, 957, 765, 55, 541, 959, 764, 435,
	542, 84, 60, 84, 635, 84, 800, 84, 634, 375,
	319, 542, 668, 49, 53, 56, 56, 29, 395, 541,
	570, 570, 84, 542, 570, 30, 1751, 799, 1748, 416,
	422, 1741, 1703, 84, 1641, 1599, 58, 58, 1595, 29,
	1587, 1586, 1581, 798, 84, 84, 84, 30, 84, 1580,
	1579, 1285, 951, 421, 1532, 1525, 1486, 1481, 1480, 533,
	1479, 800, 1428, 59, 59, 1411, 1392, 1374, 1336, 537,
	54, 1333, 1177, 383, 950, 847, 55, 1321, 84, 805,
	1312, 532, 799, 1284, 1281, 84, 384, 84, 1279, 796,
	621, 1268, 1267, 463, 1203, 921, 53, 609, 350, 350,
	633, 1136, 1091, 1090, 415, 572, 671, 84, 1206, 84,
	84, 84, 84, 1372, 84, 1065, 573, 568, 84, 435,
	768, 434, 1744, 84, 815, 82, 239, 240, 1439, 84,
	257, 1695, 1675, 269, 805, 1674, 351, 351, 56, 1667,
	413, 257, 1290, 1648, 672, 337, 1637, 84, 313, 313,
	84, 1629, 323, 1606, 1592, 323, 329, 323, 1565, 58,
	56, 323, 338, 323, 269, 437, 1541, 299, 1417, 1410,
	1389, 1388, 1387, 838, 298, 1524, 767, 431, 432, 577,
	816, 58, 1385, 1348, 1347, 1311, 59, 562, 1276, 559,
	1275, 1254, 1250, 54, 1062, 1191, 307, 1150, 1149, 55,
	1129, 1066, 1089, 541, 1285, 352, 352, 542, 59, 844,
	1009, 875, 798, 673, 878, 54, 882, 868, 53, 867,
	866, 55, 865, 864, 863, 862, 861, 631, 630, 860,
	800, 859, 858, 857, 856, 855, 854, 658, 845, 754,
	72, 843, 758, 759, 760, 665, 761, 84, 53, 757,
	763, 799, 769, 671, 809, 801, 802, 803, 804, 806,
	325, 84, 766, 439, 778, 84, 381, 371, 84, 84,
	777, 779, 887, 369, 84, 1150, 84, 84, 1285, 84,
	408, 1531, 84, 791, 84, 84, 299, 350, 1530, 299,
	299, 672, 842, 785, 1185, 1290, 786, 787, 1184, 534,
	885, 1654, 1529, 805, 1285, 1178, 1000, 1560, 935, 345,
	801, 802, 803, 804, 806, 1335, 1334, 1236, 1286, 1287,
	1288, 1289, 1291, 404, 920, 351, 920, 896, 880, 390,
	852, 1549, 881, 918, 389, 372, 84, 84, 258, 73,
	1300, 907, 909, 941, 470, 1440, 883, 872, 873, 1299,
	377, 963, 876, 269, 269, 1271, 848, 879, 1085, 871,
	673, 527, 1173, 1717, 1763, 550, 912, 551, 1764, 1290,
	1682, 1198, 296, 50, 1515, 967, 78, 50, 77, 671,
	943, 550, 942, 551, 257, 79, 323, 305, 269, 944,
	419, 1371, 899, 1095, 352, 1290, 1301, 284, 981, 934,
	285, 915, 348, 938, 936, 313, 80, 924, 75, 895,
	74, 76, 933, 483, 937, 1359, 323, 672, 290, 1623,
	289, 1622, 1360, 1340, 304, 1339, 1238, 323, 323, 323,
	1190, 564, 1189, 552, 550, 1188, 551, 1187, 1049, 960,
	1300, 876, 914, 879, 964, 913, 970, 412, 1728, 552,
	962, 965, 1133, 1219, 873, 872, 1132, 1022, 969, 1681,
	407, 323, 387, 1098, 367, 293, 306, 84, 628, 1699,
	628, 1286, 1287, 1288, 1289, 1291, 1719, 563, 895, 84,
	84, 803, 804, 806, 894, 1059, 673, 1285, 957, 1612,
	269, 1059, 628, 269, 269, 269, 1301, 269, 1772, 388,
	1223, 269, 552, 1376, 1099, 1166, 257, 1350, 84, 953,
	84, 1170, 773, 1012, 64, 1226, 1730, 68, 663, 662,
	1738, 656, 651, 1003, 1004, 1221, 609, 1085, 294, 1247,
	313, 1224, 1731, 794, 1021, 1763, 1377, 1100, 1097, 671,
	1166, 303, 1245, 1164, 569, 1222, 297, 1288, 1289, 1291,
	954, 1362, 1175, 556, 1379, 1161, 1020, 65, 1063, 1556,
	1197, 1069, 1073, 555, 1076, 69, 411, 1295, 1292, 1293,
	1294, 1286, 1287, 1288, 1289, 1291, 985, 672, 1290, 1114,
	986, 62, 1676, 955, 952, 1126, 1127, 1128, 984, 1739,
	1225, 666, 1357, 957, 1101, 1072, 1199, 798, 378, 380,
	553, 1135, 885, 84, 84, 84, 1243, 885, 548, 84,
	1248, 957, 84, 1013, 444, 800, 553, 385, 84, 84,
	84, 84, 84, 1300, 84, 84, 386, 1740, 609, 63,
	323, 1778, 84, 1351, 84, 1047, 799, 1771, 1285, 405,
	957, 84, 615, 1555, 900, 1663, 673, 869, 323, 1081,
	84, 323, 916, 1096, 1613, 1064, 667, 323, 1147, 931,
	932, 892, 323, 307, 835, 323, 1274, 269, 269, 553,
	386, 84, 84, 70, 609, 1145, 1168, 84, 1139, 1301,
	306, 67, 66, 1240, 903, 244, 1244, 350, 805, 1058,
	1160, 530, 406, 1246, 1403, 1737, 1180, 570, 1181, 951,
	1762, 1651, 1760, 1547, 1183, 84, 622, 84, 84, 84,
	1140, 998, 84, 398, 587, 1770, 426, 376, 374, 628,
	794, 84, 427, 1048, 1590, 351, 247, 1617, 84, 1290,
	84, 608, 1208, 815, 1375, 664, 1616, 61, 1604, 1176,
	427, 1786, 906, 1179, 1776, 1045, 1511, 252, 1342, 529,
	1144, 1182, 248, 1294, 1286, 1287, 1288, 1289, 1291, 1219,
	999, 307, 480, 1467, 1712, 1193, 1055, 776, 1194, 1235,
	1205, 1195, 1207, 941, 1300, 249, 770, 1563, 1196, 1053,
	1200, 1253, 1201, 586, 1777, 1255, 426, 762, 636, 816,
	251, 657, 652, 972, 352, 1605, 247, 1265, 1266, 974,
	1557, 1779, 385, 1152, 307, 1591, 1223, 50, 1261, 1214,
	943, 1151, 942, 304, 1213, 975, 1234, 252, 1046, 944,
	905, 1226, 248, 1785, 973, 1514, 1510, 640, 1564, 1310,
	1301, 1221, 1513, 1398, 1397, 335, 334, 1224, 1468, 1239,
	1323, 1051, 1241, 1050, 1469, 249, 418, 1056, 1394, 1217,
	983, 1222, 307, 1088, 1087, 1223, 1666, 1589, 638, 1315,
	251, 84, 323, 900, 801, 802, 803, 804, 806, 639,
	1226, 1416, 1280, 250, 1249, 1346, 1270, 966, 403, 401,
	1401, 400, 904, 399, 396, 333, 1224, 1316, 84, 853,
	756, 323, 1493, 269, 1367, 1355, 1225, 1353, 1341, 1318,
	1319, 1320, 1292, 1293, 1294, 1286, 1287, 1288, 1289, 1291,
	1210, 1001, 1512, 84, 253, 84, 997, 84, 1354, 939,
	1356, 84, 574, 1052, 571, 566, 1337, 557, 554, 84,
	1054, 1361, 84, 1434, 775, 1105, 1344, 1624, 84, 671,
	1366, 1764, 84, 250, 84, 1225, 660, 392, 895, 895,
	429, 1358, 317, 1626, 910, 908, 911, 1363, 1407, 3,
	1160, 798, 1634, 1007, 1368, 1678, 1705, 1369, 1396, 1395,
	1697, 1399, 923, 1423, 1419, 792, 433, 672, 609, 800,
	1391, 283, 1386, 1400, 253, 84, 323, 1142, 1143, 798,
	1384, 632, 900, 1404, 1405, 1148, 1430, 1431, 1432, 1406,
	799, 1153, 1154, 1156, 1158, 1159, 609, 1162, 1163, 1378,
	1380, 1381, 1427, 609, 430, 323, 318, 1174, 1008, 393,
	326, 579, 442, 442, 323, 948, 286, 287, 799, 243,
	1472, 1441, 545, 323, 1783, 1784, 1443, 1285, 798, 978,
	977, 1482, 784, 1447, 1487, 609, 673, 1382, 1373, 1330,
	84, 84, 84, 1445, 983, 628, 1186, 1502, 84, 84,
	983, 611, 1134, 1131, 84, 254, 84, 1474, 84, 84,
	84, 84, 1508, 1509, 1130, 1478, 84, 1082, 979, 1750,
	1577, 1433, 1211, 980, 846, 1475, 292, 1503, 773, 1611,
	773, 269, 323, 245, 755, 1212, 397, 1488, 84, 84,
	1583, 1729, 1273, 1662, 1215, 1644, 1505, 1086, 84, 84,
	851, 1232, 84, 323, 1551, 28, 1539, 1536, 1492, 610,
	1539, 84, 84, 1546, 1528, 456, 1538, 1522, 1526, 1494,
	1538, 1343, 583, 781, 783, 1566, 992, 991, 674, 661,
	790, 1571, 650, 587, 1545, 609, 479, 1552, 1553, 402,
	84, 1558, 830, 831, 832, 833, 834, 644, 1567, 653,
	608, 837, 1094, 451, 531, 481, 584, 1498, 482, 1499,
	1540, 585, 877, 469, 1540, 582, 346, 1559, 927, 1083,
	1269, 850, 849, 455, 461, 460, 1070, 368, 452, 1561,
	1227, 40, 382, 1501, 263, 264, 1169, 1523, 1002, 1588,
	1504, 780, 1352, 295, 84, 1282, 84, 1502, 84, 1497,
	370, 1112, 586, 1104, 1102, 84, 84, 1495, 1093, 414,
	543, 928, 321, 394, 1014, 321, 947, 332, 438, 1542,
	788, 321, 1603, 332, 1743, 84, 316, 1503, 315, 988,
	1600, 391, 637, 609, 794, 587, 971, 288, 886, 1625,
	1673, 1677, 1349, 1716, 57, 1500, 1505, 22, 84, 20,
	84, 19, 608, 1635, 18, 16, 15, 14, 84, 1627,
	1601, 323, 1539, 1619, 21, 1638, 84, 12, 1620, 1621,
	11, 1633, 1538, 10, 9, 27, 26, 25, 2, 1,
	1655, 587, 1647, 0, 0, 0, 1383, 0, 900, 0,
	773, 0, 0, 0, 1390, 0, 0, 1650, 608, 0,
	1661, 0, 323, 0, 586, 323, 1668, 1498, 0, 1499,
	609, 1232, 0, 0, 0, 1409, 1540, 1232, 0, 0,
	0, 0, 0, 84, 84, 0, 0, 84, 0, 0,
	1671, 0, 0, 1501, 0, 84, 1685, 0, 0, 0,
	1504, 84, 0, 0, 1687, 0, 1691, 1689, 1694, 84,
	586, 0, 1539, 0, 1686, 671, 0, 0, 1438, 1688,
	0, 307, 1538, 1698, 0, 0, 0, 1693, 0, 0,
	0, 0, 0, 0, 1701, 84, 84, 84, 1700, 84,
	0, 1707, 0, 0, 1704, 609, 885, 0, 0, 0,
	1714, 1720, 0, 672, 0, 1500, 0, 84, 1723, 0,
	0, 0, 0, 1718, 0, 0, 1540, 1721, 0, 0,
	1726, 0, 0, 1722, 1732, 1725, 1539, 0, 0, 1724,
	84, 0, 0, 1490, 1491, 900, 1538, 0, 0, 1746,
	0, 794, 794, 1747, 0, 0, 0, 1516, 1758, 1517,
	0, 323, 1519, 1520, 1521, 84, 321, 1761, 1765, 323,
	0, 1759, 0, 0, 1767, 1768, 0, 1769, 0, 1766,
	0, 0, 673, 0, 1106, 0, 0, 1781, 1780, 1535,
	1540, 1544, 900, 1535, 0, 0, 535, 0, 0, 0,
	611, 323, 323, 0, 0, 323, 1787, 321, 561, 561,
	0, 0, 0, 442, 794, 1232, 0, 0, 1023, 1024,
	1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034,
	1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044,
	0, 321, 0, 1584, 0, 0, 0, 0, 798, 0,
	817, 818, 819, 0, 0, 0, 0, 0, 610, 0,
	820, 0, 0, 0, 0, 0, 800, 0, 826, 457,
	38, 583, 0, 1092, 0, 1103, 0, 1113, 1115, 1120,
	1123, 1124, 1125, 0, 0, 0, 0, 799, 0, 0,
	0, 0, 0, 814, 0, 0, 0, 900, 0, 1602,
	38, 269, 611, 0, 0, 587, 545, 0, 323, 1609,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	300, 0, 608, 308, 0, 0, 0, 0, 794, 0,
	38, 0, 0, 587, 0, 1167, 0, 0, 0, 805,
	587, 0, 308, 0, 270, 1535, 0, 0, 611, 0,
	608, 323, 0, 1646, 0, 0, 827, 608, 281, 0,
	610, 323, 0, 0, 0, 0, 0, 0, 825, 794,
	0, 0, 587, 583, 586, 0, 1192, 0, 822, 0,
	0, 0, 1106, 1106, 815, 0, 0, 0, 0, 608,
	0, 0, 272, 0, 0, 0, 0, 0, 0, 282,
	0, 0, 586, 0, 0, 0, 610, 0, 0, 586,
	884, 271, 273, 0, 0, 0, 0, 0, 0, 583,
	0, 0, 790, 0, 0, 0, 1679, 1680, 321, 0,
	1684, 332, 1106, 1106, 1106, 1535, 0, 929, 269, 0,
	816, 586, 332, 0, 1544, 332, 0, 0, 0, 274,
	0, 824, 794, 0, 0, 0, 0, 0, 0, 275,
	276, 0, 1237, 0, 0, 0, 1242, 0, 0, 0,
	0, 0, 587, 0, 277, 0, 0, 0, 1713, 794,
	323, 0, 269, 0, 0, 1256, 0, 0, 0, 608,
	0, 0, 0, 0, 1264, 0, 0, 0, 0, 1535,
	1646, 0, 1272, 0, 823, 0, 1277, 811, 812, 813,
	0, 810, 807, 808, 809, 801, 802, 803, 804, 806,
	0, 0, 0, 323, 0, 0, 0, 837, 0, 0,
	0, 0, 0, 1120, 1120, 1120, 0, 0, 0, 0,
	0, 586, 0, 0, 0, 0, 0, 0, 794, 0,
	0, 0, 0, 0, 0, 1338, 0, 0, 0, 0,
	0, 0, 0, 0, 1106, 1106, 1345, 0, 278, 0,
	587, 279, 0, 0, 0, 0, 280, 0, 0, 300,
	0, 0, 0, 442, 0, 0, 0, 608, 0, 0,
	0, 0, 442, 0, 0, 545, 0, 0, 0, 0,
	1285, 0, 1302, 1303, 1304, 0, 0, 0, 0, 0,
	0, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106,
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106,
	0, 1106, 0, 0, 0, 1285, 0, 0, 0, 586,
	0, 0, 321, 0, 0, 1299, 0, 587, 0, 0,
	0, 0, 611, 1412, 0, 1413, 0, 0, 0, 0,
	0, 0, 0, 0, 608, 0, 1418, 0, 0, 0,
	0, 321, 0, 0, 0, 0, 0, 0, 0, 1192,
	611, 0, 0, 0, 0, 0, 0, 611, 1435, 0,
	0, 1290, 0, 0, 0, 0, 0, 1444, 300, 0,
	1446, 300, 300, 1251, 1252, 0, 0, 0, 1306, 0,
	610, 0, 0, 0, 0, 0, 586, 0, 0, 611,
	1305, 0, 587, 583, 836, 0, 1290, 0, 840, 0,
	0, 0, 1476, 1477, 0, 0, 1300, 0, 610, 608,
	0, 1483, 1484, 1485, 0, 610, 0, 0, 0, 0,
	0, 583, 0, 1307, 1308, 1309, 0, 0, 583, 0,
	0, 1285, 0, 1302, 1303, 1304, 1141, 0, 0, 0,
	0, 1300, 0, 1569, 0, 0, 0, 610, 0, 442,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	583, 586, 1301, 0, 0, 1172, 0, 0, 0, 0,
	0, 0, 0, 0, 1172, 0, 1299, 0, 0, 0,
	0, 1550, 0, 321, 0, 0, 0, 0, 0, 611,
	0, 0, 0, 0, 0, 0, 0, 1301, 1106, 0,
	38, 0, 38, 1570, 0, 0, 0, 1573, 1574, 0,
	0, 0, 1576, 0, 0, 38, 1578, 0, 0, 38,
	0, 0, 1290, 1582, 0, 0, 0, 1585, 0, 1296,
	1297, 1298, 0, 1295, 1292, 1293, 1294, 1286, 1287, 1288,
	1289, 1291, 1209, 0, 0, 0, 0, 610, 0, 0,
	0, 1305, 0, 0, 0, 1414, 1415, 0, 1593, 0,
	583, 0, 0, 321, 0, 0, 0, 1300, 1295, 1292,
	1293, 1294, 1286, 1287, 1288, 1289, 1291, 0, 0, 0,
	0, 0, 0, 0, 1106, 0, 0, 611, 0, 1285,
	0, 1302, 1303, 1304, 0, 0, 0, 0, 0, 0,
	1618, 1568, 1448, 1449, 1450, 1451, 1452, 1453, 1454, 1455,
	1456, 1457, 1458, 1459, 1460, 1461, 1462, 1463, 1464, 1465,
	1466, 0, 1470, 1301, 1636, 0, 0, 0, 798, 0,
	817, 818, 819, 0, 1299, 0, 0, 0, 0, 0,
	820, 0, 0, 1649, 0, 610, 800, 0, 826, 0,
	0, 0, 0, 0, 0, 1657, 1658, 0, 583, 0,
	0, 1106, 0, 0, 611, 0, 0, 799, 0, 0,
	0, 0, 0, 814, 0, 0, 0, 0, 0, 0,
	1290, 0, 0, 1670, 0, 0, 0, 0, 0, 0,
	1296, 1297, 1298, 1672, 1295, 1292, 1293, 1294, 1286, 1287,
	1288, 1289, 1291, 0, 0, 0, 0, 0, 0, 1305,
	0, 0, 0, 0, 0, 0, 545, 0, 0, 805,
	0, 929, 610, 0, 0, 1300, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 583, 827, 1017, 0, 611,
	0, 0, 0, 0, 0, 0, 0, 0, 825, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 822, 0,
	0, 0, 321, 0, 815, 321, 0, 1061, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1301, 0, 0, 0, 0, 821, 0, 0, 0,
	0, 0, 0, 0, 798, 0, 0, 610, 0, 0,
	0, 0, 0, 0, 1745, 0, 0, 0, 0, 0,
	583, 0, 800, 0, 0, 0, 0, 1757, 1757, 1607,
	816, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 824, 0, 799, 0, 0, 0, 0, 0, 814,
	0, 1757, 0, 0, 0, 0, 0, 0, 1296, 1297,
	1298, 0, 1295, 1292, 1293, 1294, 1286, 1287, 1288, 1289,
	1291, 308, 0, 798, 0, 817, 818, 819, 0, 0,
	1757, 0, 0, 0, 0, 820, 0, 0, 0, 0,
	0, 800, 0, 826, 823, 805, 798, 811, 812, 813,
	0, 810, 807, 808, 809, 801, 802, 803, 804, 806,
	798, 1518, 799, 1137, 800, 1665, 826, 0, 814, 1527,
	0, 0, 1138, 0, 0, 0, 0, 798, 800, 817,
	818, 819, 0, 0, 0, 799, 0, 0, 0, 820,
	815, 814, 0, 0, 0, 800, 0, 826, 0, 799,
	0, 321, 321, 0, 0, 321, 0, 0, 0, 38,
	0, 0, 0, 0, 805, 0, 799, 0, 0, 1233,
	0, 0, 814, 0, 0, 0, 0, 0, 0, 0,
	0, 827, 0, 0, 0, 0, 0, 805, 0, 0,
	0, 0, 1706, 825, 0, 0, 816, 0, 1061, 0,
	0, 805, 0, 822, 827, 0, 0, 0, 0, 815,
	0, 0, 836, 0, 0, 0, 0, 0, 805, 0,
	0, 0, 0, 0, 0, 0, 822, 0, 0, 0,
	0, 821, 815, 0, 0, 827, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 815, 825, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 822, 1608, 0,
	836, 0, 0, 815, 0, 816, 0, 810, 807, 808,
	809, 801, 802, 803, 804, 806, 824, 0, 0, 0,
	0, 0, 0, 0, 0, 821, 0, 0, 816, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 824,
	0, 1643, 816, 0, 0, 0, 0, 0, 0, 0,
	0, 321, 0, 0, 0, 0, 0, 0, 0, 816,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 823,
	824, 0, 811, 812, 813, 0, 810, 807, 808, 809,
	801, 802, 803, 804, 806, 0, 0, 0, 0, 0,
	0, 0, 823, 1596, 0, 0, 0, 0, 0, 810,
	807, 808, 809, 801, 802, 803, 804, 806, 1017, 0,
	0, 1017, 0, 810, 807, 808, 809, 801, 802, 803,
	804, 806, 0, 823, 0, 0, 811, 812, 813, 0,
	810, 807, 808, 809, 801, 802, 803, 804, 806, 0,
	0, 0, 0, 0, 0, 0, 0, 1326, 0, 0,
	0, 83, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 86, 87, 0, 88, 0, 0, 0,
	1715, 0, 0, 0, 0, 89, 90, 192, 193, 194,
	195, 91, 196, 197, 0, 92, 198, 199, 93, 0,
	0, 200, 201, 202, 798, 203, 0, 0, 0, 94,
	95, 96, 0, 97, 0, 98, 0, 0, 99, 100,
	0, 0, 800, 929, 0, 0, 101, 102, 103, 104,
	204, 105, 205, 206, 0, 106, 0, 107, 0, 0,
	0, 108, 109, 799, 110, 0, 0, 0, 207, 111,
	112, 208, 0, 0, 0, 113, 114, 209, 0, 115,
	0, 116, 0, 0, 38, 0, 117, 210, 0, 211,
	0, 118, 119, 212, 213, 0, 0, 120, 0, 0,
	121, 214, 215, 216, 0, 217, 0, 0, 122, 0,
	123, 124, 0, 0, 218, 805, 125, 1017, 1017, 126,
	0, 1017, 127, 0, 128, 129, 130, 131, 132, 0,
	133, 134, 137, 135, 0, 136, 0, 219, 138, 220,
	139, 140, 0, 0, 322, 0, 0, 141, 221, 0,
	142, 0, 222, 143, 144, 0, 223, 145, 224, 146,
	815, 147, 148, 149, 225, 150, 151, 0, 153, 154,
	152, 155, 0, 156, 0, 157, 158, 226, 159, 0,
	160, 161, 162, 56, 227, 163, 164, 0, 165, 166,
	0, 167, 228, 229, 168, 0, 169, 170, 172, 230,
	171, 231, 0, 173, 58, 174, 175, 0, 232, 233,
	234, 0, 0, 176, 235, 236, 816, 177, 178, 179,
	180, 0, 0, 181, 182, 183, 0, 0, 184, 185,
	186, 353, 238, 0, 187, 0, 0, 0, 54, 188,
	189, 190, 191, 0, 55, 0, 0, 0, 0, 1628,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1019, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1017, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 807, 808,
	809, 801, 802, 803, 804, 806, 0, 0, 670, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 87, 675, 88, 676, 677, 678, 679, 680, 681,
	682, 683, 89, 90, 192, 193, 194, 195, 91, 196,
	197, 684, 92, 198, 199, 93, 685, 686, 200, 201,
	202, 687, 203, 688, 354, 689, 94, 95, 96, 836,
	97, 690, 98, 691, 355, 99, 100, 692, 693, 694,
	695, 696, 697, 101, 102, 103, 104, 204, 105, 205,
	206, 698, 106, 699, 107, 700, 701, 702, 108, 109,
	703, 110, 704, 0, 705, 207, 111, 112, 208, 706,
	707, 708, 113, 114, 209, 0, 115, 709, 116, 710,
	711, 356, 712, 117, 210, 713, 211, 714, 118, 119,
	212, 213, 715, 716, 120, 717, 357, 121, 214, 215,
	216, 718, 217, 719, 358, 122, 359, 123, 124, 720,
	721, 218, 360, 125, 361, 722, 126, 723, 724, 127,
	0, 128, 129, 130, 131, 132, 362, 133, 134, 137,
	135, 725, 136, 726, 219, 138, 220, 139, 140, 727,
	728, 729, 730, 731, 141, 221, 363, 142, 364, 222,
	143, 144, 732, 223, 145, 224, 146, 733, 147, 148,
	149, 225, 150, 151, 734, 153, 154, 152, 155, 735,
	156, 365, 157, 158, 226, 159, 0, 160, 161, 162,
	736, 227, 163, 164, 737, 165, 166, 366, 167, 228,
	229, 168, 738, 169, 170, 172, 230, 171, 231, 739,
	173, 740, 174, 175, 741, 232, 233, 234, 742, 743,
	176, 235, 236, 744, 177, 178, 179, 180, 745, 746,
	181, 182, 183, 747, 748, 184, 185, 186, 237, 238,
	749, 187, 750, 751, 752, 753, 188, 189, 190, 191,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 670, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1408, 86, 87, 675,
	88, 676, 677, 678, 679, 680, 681, 682, 683, 89,
	90, 192, 193, 194, 195, 91, 196, 197, 684, 92,
	198, 199, 93, 685, 686, 200, 201, 202, 687, 203,
	688, 354, 689, 94, 95, 96, 0, 97, 690, 98,
	691, 355, 99, 100, 692, 693, 694, 695, 696, 697,
	101, 102, 103, 104, 204, 105, 205, 206, 698, 106,
	699, 107, 700, 701, 702, 108, 109, 703, 110, 704,
	0, 705, 207, 111, 112, 208, 706, 707, 708, 113,
	114, 209, 0, 115, 709, 116, 710, 711, 356, 712,
	117, 210, 713, 211, 714, 118, 119, 212, 213, 715,
	716, 120, 717, 357, 121, 214, 215, 216, 718, 217,
	719, 358, 122, 359, 123, 124, 720, 721, 218, 360,
	125, 361, 722, 126, 723, 724, 127, 0, 128, 129,
	130, 131, 132, 362, 133, 134, 137, 135, 725, 136,
	726, 219, 138, 220, 139, 140, 727, 728, 729, 730,
	731, 141, 221, 363, 142, 364, 222, 143, 144, 732,
	223, 145, 224, 146, 733, 147, 148, 149, 225, 150,
	151, 734, 153, 154, 152, 155, 735, 156, 365, 157,
	158, 226, 159, 0, 160, 161, 162, 736, 227, 163,
	164, 737, 165, 166, 366, 167, 228, 229, 168, 738,
	169, 170, 172, 230, 171, 231, 739, 173, 740, 174,
	175, 741, 232, 233, 234, 742, 743, 176, 235, 236,
	744, 177, 178, 179, 180, 745, 746, 181, 182, 183,
	747, 748, 184, 185, 186, 237, 238, 749, 187, 750,
	751, 752, 753, 188, 189, 190, 191, 0, 0, 670,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	888, 86, 87, 675, 88, 676, 677, 678, 679, 680,
	681, 682, 683, 89, 90, 192, 193, 194, 195, 91,
	196, 197, 684, 92, 198, 199, 93, 685, 686, 200,
	201, 202, 687, 203, 688, 354, 689, 94, 95, 96,
	0, 97, 690, 98, 691, 355, 99, 100, 692, 693,
	694, 695, 696, 697, 101, 102, 103, 104, 204, 105,
	205, 206, 698, 106, 699, 107, 700, 701, 702, 108,
	109, 703, 110, 704, 0, 705, 207, 111, 112, 208,
	706, 707, 708, 113, 114, 209, 0, 115, 709, 116,
	710, 711, 356, 712, 117, 210, 713, 211, 714, 118,
	119, 212, 213, 715, 716, 120, 717, 357, 121, 214,
	215, 216, 718, 217, 719, 358, 122, 359, 123, 124,
	720, 721, 218, 360, 125, 361, 722, 126, 723, 724,
	127, 0, 128, 129, 130, 131, 132, 362, 133, 134,
	137, 135, 725, 136, 726, 219, 138, 220, 139, 140,
	727, 728, 729, 730, 731, 141, 221, 363, 142, 364,
	222, 143, 144, 732, 223, 145, 224, 146, 733, 147,
	148, 149, 225, 150, 151, 734, 153, 154, 152, 155,
	735, 156, 365, 157, 158, 226, 159, 0, 160, 161,
	162, 736, 227, 163, 164, 737, 165, 166, 366, 167,
	228, 229, 168, 738, 169, 170, 172, 230, 171, 231,
	739, 173, 740, 174, 175, 741, 232, 233, 234, 742,
	743, 176, 235, 236, 744, 177, 178, 179, 180, 745,
	746, 181, 182, 183, 747, 748, 184, 185, 186, 237,
	238, 749, 187, 750, 751, 752, 753, 188, 189, 190,
	191, 477, 466, 467, 464, 465, 453, 0, 0, 0,
	0, 0, 0, 86, 87, 1078, 88, 0, 0, 0,
	0, 459, 0, 0, 0, 89, 90, 192, 506, 194,
	507, 91, 508, 509, 0, 92, 198, 199, 93, 474,
	492, 510, 511, 202, 0, 502, 0, 485, 0, 94,
	95, 96, 0, 97, 0, 98, 0, 355, 99, 100,
	0, 486, 488, 0, 487, 489, 101, 102, 103, 104,
	512, 105, 513, 514, 0, 106, 0, 107, 0, 1079,
	0, 505, 109, 0, 110, 0, 0, 0, 458, 111,
	112, 493, 472, 0, 0, 113, 114, 515, 0, 115,
	0, 116, 0, 0, 356, 0, 117, 503, 0, 211,
	0, 118, 119, 499, 501, 0, 0, 120, 0, 357,
	121, 516, 517, 518, 0, 484, 0, 358, 122, 359,
	123, 124, 0, 0, 504, 360, 125, 361, 0, 126,
	0, 0, 127, 0, 128, 129, 130, 131, 132, 362,
	133, 134, 137, 135, 448, 136, 473, 500, 138, 519,
	139, 140, 0, 0, 0, 0, 0, 141, 221, 363,
	142, 364, 494, 143, 144, 0, 495, 145, 224, 146,
	0, 147, 148, 149, 520, 150, 151, 0, 153, 154,
	152, 155, 0, 156, 365, 157, 158, 462, 159, 0,
	160, 161, 162, 0, 227, 163, 164, 490, 165, 166,
	366, 167, 521, 229, 168, 0, 169, 170, 172, 522,
	171, 496, 0, 173, 0, 174, 175, 0, 232, 523,
	524, 0, 0, 176, 497, 498, 471, 177, 178, 179,
	180, 0, 0, 181, 182, 183, 491, 0, 184, 185,
	186, 237, 525, 1077, 187, 0, 0, 0, 0, 188,
	189, 190, 191, 449, 0, 0, 477, 466, 467, 464,
	465, 453, 0, 0, 445, 446, 1080, 0, 86, 87,
	447, 88, 0, 454, 1075, 0, 459, 0, 0, 0,
	89, 90, 192, 506, 194, 507, 91, 508, 509, 0,
	92, 198, 199, 93, 474, 492, 510, 511, 202, 0,
	502, 0, 485, 0, 94, 95, 96, 0, 97, 0,
	98, 0, 355, 99, 100, 0, 486, 488, 0, 487,
	489, 101, 102, 103, 104, 512, 105, 513, 514, 546,
	106, 0, 107, 0, 0, 0, 505, 109, 0, 110,
	0, 0, 0, 458, 111, 112, 493, 472, 0, 0,
	113, 114, 515, 0, 115, 0, 116, 0, 0, 356,
	0, 117, 503, 0, 211, 0, 118, 119, 499, 501,
	0, 0, 120, 0, 357, 121, 516, 517, 518, 0,
	484, 0, 358, 122, 359, 123, 124, 0, 0, 504,
	360, 125, 361, 0, 126, 0, 0, 127, 0, 128,
	129, 130, 131, 132, 362, 133, 134, 137, 135, 448,
	136, 473, 500, 138, 519, 139, 140, 0, 0, 0,
	0, 0, 141, 221, 363, 142, 364, 494, 143, 144,
	0, 495, 145, 224, 146, 0, 147, 148, 149, 520,
	150, 151, 0, 153, 154, 152, 155, 0, 156, 365,
	157, 158, 462, 159, 0, 160, 161, 162, 56, 227,
	163, 164, 490, 165, 166, 366, 167, 521, 229, 168,
	0, 169, 170, 172, 522, 171, 496, 0, 173, 58,
	174, 175, 0, 232, 523, 524, 0, 0, 176, 497,
	498, 471, 177, 178, 179, 180, 0, 0, 181, 182,
	183, 491, 0, 184, 185, 186, 353, 525, 0, 187,
	0, 0, 0, 54, 188, 189, 190, 191, 449, 55,
	0, 477, 466, 467, 464, 465, 453, 0, 0, 445,
	446, 0, 0, 86, 87, 447, 88, 0, 454, 0,
	0, 459, 0, 0, 0, 89, 90, 192, 506, 194,
	507, 91, 508, 509, 0, 92, 198, 199, 93, 474,
	492, 510, 511, 202, 0, 502, 0, 485, 0, 94,
	95, 96, 0, 97, 0, 98, 0, 355, 99, 100,
	0, 486, 488, 0, 487, 489, 101, 102, 103, 104,
	512, 105, 513, 514, 0, 106, 0, 107, 0, 0,
	0, 505, 109, 0, 110, 0, 0, 0, 458, 111,
	112, 493, 472, 0, 0, 113, 114, 515, 0, 115,
	0, 116, 0, 0, 356, 0, 117, 503, 0, 211,
	0, 118, 119, 499, 501, 0, 0, 120, 0, 357,
	121, 516, 517, 518, 0, 484, 0, 358, 122, 359,
	123, 124, 0, 0, 504, 360, 125, 361, 0, 126,
	0, 0, 127, 0, 128, 129, 130, 131, 132, 362,
	133, 134, 137, 135, 448, 136, 473, 500, 138, 519,
	139, 140, 0, 0, 0, 0, 0, 141, 221, 363,
	142, 364, 494, 143, 144, 0, 495, 145, 224, 146,
	0, 147, 148, 149, 520, 150, 151, 0, 153, 154,
	152, 155, 0, 156, 365, 157, 158, 462, 159, 0,
	160, 161, 162, 56, 227, 163, 164, 490, 165, 166,
	366, 167, 521, 229, 168, 0, 169, 170, 172, 522,
	171, 496, 0, 173, 58, 174, 175, 0, 232, 523,
	524, 0, 0, 176, 497, 498, 471, 177, 178, 179,
	180, 0, 0, 181, 182, 183, 491, 0, 184, 185,
	186, 353, 525, 0, 187, 0, 0, 0, 54, 188,
	189, 190, 191, 449, 55, 0, 477, 466, 467, 464,
	465, 453, 0, 0, 445, 446, 0, 0, 86, 87,
	447, 88, 0, 454, 0, 0, 459, 0, 0, 0,
	89, 90, 192, 506, 194, 507, 91, 508, 509, 1116,
	92, 198, 199, 93, 474, 492, 510, 511, 202, 0,
	502, 0, 485, 0, 94, 95, 96, 0, 97, 0,
	98, 0, 355, 99, 100, 0, 486, 488, 0, 487,
	489, 101, 102, 103, 104, 512, 105, 513, 514, 0,
	106, 0, 107, 0, 0, 0, 505, 109, 0, 110,
	0, 0, 0, 458, 111, 112, 493, 472, 0, 0,
	113, 114, 515, 0, 115, 0, 116, 0, 1121, 356,
	0, 117, 503, 0, 211, 0, 118, 119, 499, 501,
	0, 0, 120, 0, 357, 121, 516, 517, 518, 0,
	484, 0, 358, 122, 359, 123, 124, 0, 1117, 504,
	360, 125, 361, 0, 126, 0, 0, 127, 0, 128,
	129, 130, 131, 132, 362, 133, 134, 137, 135, 448,
	136, 473, 500, 138, 519, 139, 140, 0, 0, 0,
	0, 0, 141, 221, 363, 142, 364, 494, 143, 144,
	0, 495, 145, 224, 146, 0, 147, 148, 149, 520,
	150, 151, 0, 153, 154, 152, 155, 0, 156, 365,
	157, 158, 462, 159, 0, 160, 161, 162, 0, 227,
	163, 164, 490, 165, 166, 366, 167, 521, 229, 168,
	0, 169, 170, 172, 522, 171, 496, 0, 173, 0,
	174, 175, 0, 232, 523, 524, 0, 1118, 176, 497,
	498, 471, 177, 178, 179, 180, 0, 0, 181, 182,
	183, 491, 0, 184, 185, 186, 237, 525, 0, 187,
	0, 0, 0, 0, 188, 189, 190, 191, 449, 477,
	466, 467, 464, 465, 453, 0, 0, 0, 0, 445,
	446, 86, 87, 0, 88, 447, 0, 0, 454, 459,
	0, 0, 0, 89, 90, 192, 506, 194, 507, 91,
	508, 509, 0, 92, 198, 199, 93, 474, 492, 510,
	511, 202, 0, 502, 0, 485, 0, 94, 95, 96,
	0, 97, 0, 98, 0, 355, 99, 100, 0, 486,
	488, 0, 487, 489, 101, 102, 103, 104, 512, 105,
	513, 514, 0, 106, 0, 107, 0, 0, 0, 505,
	109, 0, 110, 0, 0, 0, 458, 111, 112, 493,
	472, 0, 0, 113, 114, 515, 0, 115, 0, 116,
	0, 0, 356, 0, 117, 503, 0, 211, 0, 118,
	119, 499, 501, 0, 0, 120, 0, 357, 121, 516,
	517, 518, 0, 484, 0, 358, 122, 359, 123, 124,
	0, 0, 504, 360, 125, 361, 0, 126, 0, 0,
	127, 0, 128, 129, 130, 131, 132, 362, 133, 134,
	137, 135, 448, 136, 473, 500, 138, 519, 139, 140,
	0, 0, 0, 0, 0, 141, 221, 363, 142, 364,
	494, 143, 144, 0, 495, 145, 224, 146, 0, 147,
	148, 149, 520, 150, 151, 0, 153, 154, 152, 155,
	0, 156, 365, 157, 158, 462, 159, 0, 160, 161,
	162, 0, 227, 163, 164, 490, 165, 166, 366, 167,
	521, 229, 168, 0, 169, 170, 172, 522, 171, 496,
	0, 173, 0, 174, 175, 0, 232, 523, 524, 0,
	0, 176, 497, 498, 471, 177, 178, 179, 180, 0,
	0, 181, 182, 183, 491, 0, 184, 185, 186, 237,
	525, 0, 187, 0, 0, 0, 0, 188, 189, 190,
	191, 449, 0, 0, 477, 466, 467, 464, 465, 453,
	0, 0, 445, 446, 0, 0, 86, 87, 447, 88,
	0, 454, 1473, 0, 459, 0, 0, 0, 89, 90,
	192, 506, 194, 507, 91, 508, 509, 0, 92, 198,
	199, 93, 474, 492, 510, 511, 202, 0, 502, 0,
	485, 0, 94, 95, 96, 0, 97, 0, 98, 0,
	355, 99, 100, 0, 486, 488, 0, 487, 489, 101,
	102, 103, 104, 512, 105, 513, 514, 0, 106, 0,
	107, 0, 0, 0, 505, 109, 0, 110, 0, 0,
	0, 458, 111, 112, 493, 472, 0, 0, 113, 114,
	515, 0, 115, 0, 116, 0, 0, 356, 0, 117,
	503, 0, 211, 0, 118, 119, 499, 501, 0, 0,
	120, 0, 357, 121, 516, 517, 518, 0, 484, 0,
	358, 122, 359, 123, 124, 0, 0, 504, 360, 125,
	361, 0, 126, 0, 0, 127, 0, 128, 129, 130,
	131, 132, 362, 133, 134, 137, 135, 448, 136, 473,
	500, 138, 519, 139, 140, 0, 0, 0, 0, 0,
	141, 221, 363, 142, 364, 494, 143, 144, 0, 495,
	145, 224, 146, 0, 147, 148, 149, 520, 150, 151,
	0, 153, 154, 152, 155, 0, 156, 365, 157, 158,
	462, 159, 0, 160, 161, 162, 0, 227, 163, 164,
	490, 165, 166, 366, 167, 521, 229, 168, 0, 169,
	170, 172, 522, 171, 496, 0, 173, 0, 174, 175,
	0, 232, 523, 524, 0, 0, 176, 497, 498, 471,
	177, 178, 179, 180, 0, 0, 181, 182, 183, 491,
	0, 184, 185, 186, 237, 525, 0, 187, 0, 0,
	0, 0, 188, 189, 190, 191, 449, 0, 0, 477,
	466, 467, 464, 465, 453, 0, 0, 445, 446, 0,
	0, 86, 87, 447, 88, 0, 454, 1424, 0, 459,
	0, 0, 0, 89, 90, 192, 506, 194, 507, 91,
	508, 509, 0, 92, 198, 199, 93, 474, 492, 510,
	511, 202, 0, 502, 0, 485, 0, 94, 95, 96,
	0, 97, 0, 98, 0, 355, 99, 100, 0, 486,
	488, 0, 487, 489, 101, 102, 103, 104, 512, 105,
	513, 514, 0, 106, 0, 107, 0, 0, 0, 505,
	109, 0, 110, 0, 0, 0, 458, 111, 112, 493,
	472, 0, 0, 113, 114, 515, 0, 115, 0, 116,
	0, 0, 356, 0, 117, 503, 0, 211, 0, 118,
	119, 499, 501, 0, 0, 120, 0, 357, 121, 516,
	517, 518, 0, 484, 0, 358, 122, 359, 123, 124,
	0, 0, 504, 360, 125, 361, 0, 126, 0, 0,
	127, 0, 128, 129, 130, 131, 132, 362, 133, 134,
	137, 135, 448, 136, 473, 500, 138, 519, 139, 140,
	0, 0, 0, 0, 0, 141, 221, 363, 142, 364,
	494, 143, 144, 0, 495, 145, 224, 146, 0, 147,
	148, 149, 520, 150, 151, 0, 153, 154, 152, 155,
	0, 156, 365, 157, 158, 462, 159, 0, 160, 161,
	162, 0, 227, 163, 164, 490, 165, 166, 366, 167,
	521, 229, 168, 0, 169, 170, 172, 522, 171, 496,
	0, 173, 0, 174, 175, 0, 232, 523, 524, 0,
	0, 176, 497, 498, 471, 177, 178, 179, 180, 0,
	0, 181, 182, 183, 491, 0, 184, 185, 186, 237,
	525, 0, 187, 0, 0, 0, 0, 188, 189, 190,
	191, 449, 0, 0, 477, 466, 467, 464, 465, 453,
	0, 0, 445, 446, 0, 0, 86, 87, 447, 88,
	0, 454, 1074, 0, 459, 0, 0, 0, 89, 90,
	192, 506, 194, 507, 91, 508, 509, 0, 92, 198,
	199, 93, 474, 492, 510, 511, 202, 0, 502, 0,
	485, 0, 94, 95, 96, 0, 97, 0, 98, 0,
	355, 99, 100, 0, 486, 488, 0, 487, 489, 101,
	102, 103, 104, 512, 105, 513, 514, 0, 106, 0,
	107, 0, 0, 0, 505, 109, 0, 110, 0, 0,
	0, 458, 111, 112, 493, 472, 0, 0, 113, 114,
	515, 0, 115, 0, 116, 0, 0, 356, 0, 117,
	503, 0, 211, 0, 118, 119, 499, 501, 0, 0,
	120, 0, 357, 121, 516, 517, 518, 0, 484, 0,
	358, 122, 359, 123, 124, 0, 0, 504, 360, 125,
	361, 0, 126, 0, 0, 127, 0, 128, 129, 130,
	131, 132, 362, 133, 134, 137, 135, 448, 136, 473,
	500, 138, 519, 139, 140, 0, 0, 0, 0, 0,
	141, 221, 363, 142, 364, 494, 143, 144, 0, 495,
	145, 224, 146, 0, 147, 148, 149, 520, 150, 151,
	0, 153, 154, 152, 155, 0, 156, 365, 157, 158,
	462, 159, 0, 160, 161, 162, 0, 227, 163, 164,
	490, 165, 166, 366, 167, 521, 229, 168, 0, 169,
	170, 172, 522, 171, 496, 0, 173, 0, 174, 175,
	0, 232, 523, 524, 0, 0, 176, 497, 498, 471,
	177, 178, 179, 180, 0, 0, 181, 182, 183, 491,
	0, 184, 185, 186, 237, 525, 0, 187, 0, 0,
	0, 0, 188, 189, 190, 191, 449, 477, 466, 467,
	464, 465, 453, 0, 0, 0, 0, 445, 446, 86,
	87, 0, 88, 447, 842, 1071, 454, 459, 0, 0,
	0, 89, 90, 192, 506, 194, 507, 91, 508, 509,
	0, 92, 198, 199, 93, 474, 492, 510, 511, 202,
	0, 502, 0, 485, 0, 94, 95, 96, 0, 97,
	0, 98, 0, 355, 99, 100, 0, 486, 488, 0,
	487, 489, 101, 102, 103, 104, 512, 105, 513, 514,
	0, 106, 0, 107, 0, 0, 0, 505, 109, 0,
	110, 0, 0, 0, 458, 111, 112, 493, 472, 0,
	0, 113, 114, 515, 0, 115, 0, 116, 0, 0,
	356, 0, 117, 503, 0, 211, 0, 118, 119, 499,
	501, 0, 0, 120, 0, 357, 121, 516, 517, 518,
	0, 484, 0, 358, 122, 359, 123, 124, 0, 0,
	504, 360, 125, 361, 0, 126, 0, 0, 127, 0,
	128, 129, 130, 131, 132, 362, 133, 134, 137, 135,
	448, 136, 473, 500, 138, 519, 139, 140, 0, 0,
	0, 0, 0, 141, 221, 363, 142, 364, 494, 143,
	144, 0, 495, 145, 224, 146, 0, 147, 148, 149,
	520, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	365, 157, 158, 462, 159, 0, 160, 161, 162, 0,
	227, 163, 164, 490, 165, 166, 366, 167, 521, 229,
	168, 0, 169, 170, 172, 522, 171, 496, 0, 173,
	0, 174, 175, 0, 232, 523, 524, 0, 0, 176,
	497, 498, 471, 177, 178, 179, 180, 0, 0, 181,
	182, 183, 491, 0, 184, 185, 186, 237, 525, 0,
	187, 0, 0, 0, 0, 188, 189, 190, 191, 449,
	0, 0, 477, 466, 467, 464, 465, 453, 0, 0,
	445, 446, 443, 0, 86, 87, 447, 88, 0, 454,
	0, 0, 459, 0, 0, 0, 89, 90, 192, 506,
	194, 507, 91, 508, 509, 0, 92, 198, 199, 93,
	474, 492, 510, 511, 202, 0, 502, 0, 485, 0,
	94, 95, 96, 0, 97, 0, 98, 0, 355, 99,
	100, 0, 486, 488, 0, 487, 489, 101, 102, 103,
	104, 512, 105, 513, 514, 0, 106, 0, 107, 0,
	0, 0, 505, 109, 0, 110, 0, 0, 0, 458,
	111, 112, 493, 472, 0, 0, 113, 114, 515, 0,
	115, 0, 116, 0, 0, 356, 0, 117, 503, 0,
	211, 0, 118, 119, 499, 501, 0, 0, 120, 0,
	357, 121, 516, 517, 518, 0, 484, 0, 358, 122,
	359, 123, 124, 0, 0, 504, 360, 125, 361, 0,
	126, 0, 0, 127, 0, 128, 129, 130, 131, 132,
	362, 133, 134, 137, 135, 448, 136, 473, 500, 138,
	519, 139, 140, 0, 0, 0, 0, 0, 141, 221,
	363, 142, 364, 494, 143, 144, 0, 495, 145, 224,
	146, 0, 147, 148, 149, 520, 150, 151, 0, 153,
	154, 152, 155, 0, 156, 365, 157, 158, 462, 159,
	0, 160, 161, 162, 0, 227, 163, 164, 490, 165,
	166, 366, 167, 521, 229, 168, 0, 169, 170, 172,
	522, 171, 496, 0, 173, 0, 174, 175, 0, 232,
	523, 524, 0, 0, 176, 497, 498, 471, 177, 178,
	179, 180, 0, 0, 181, 182, 183, 491, 0, 184,
	185, 186, 237, 525, 1429, 187, 0, 0, 0, 0,
	188, 189, 190, 191, 449, 477, 466, 467, 464, 465,
	453, 0, 0, 0, 0, 445, 446, 86, 87, 0,
	88, 447, 0, 0, 454, 459, 0, 0, 0, 89,
	90, 192, 506, 194, 507, 91, 508, 509, 0, 92,
	198, 199, 93, 474, 492, 510, 511, 202, 0, 502,
	0, 485, 0, 94, 95, 96, 0, 97, 0, 98,
	0, 355, 99, 100, 0, 486, 488, 0, 487, 489,
	101, 102, 103, 104, 512, 105, 513, 514, 546, 106,
	0, 107, 0, 0, 0, 505, 109, 0, 110, 0,
	0, 0, 458, 111, 112, 493, 472, 0, 0, 113,
	114, 515, 0, 115, 0, 116, 0, 0, 356, 0,
	117, 503, 0, 211, 0, 118, 119, 499, 501, 0,
	0, 120, 0, 357, 121, 516, 517, 518, 0, 484,
	0, 358, 122, 359, 123, 124, 0, 0, 504, 360,
	125, 361, 0, 126, 0, 0, 127, 0, 128, 129,
	130, 131, 132, 362, 133, 134, 137, 135, 448, 136,
	473, 500, 138, 519, 139, 140, 0, 0, 0, 0,
	0, 141, 221, 363, 142, 364, 494, 143, 144, 0,
	495, 145, 224, 146, 0, 147, 148, 149, 520, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 365, 157,
	158, 462, 159, 0, 160, 161, 162, 0, 227, 163,
	164, 490, 165, 166, 366, 167, 521, 229, 168, 0,
	169, 170, 172, 522, 171, 496, 0, 173, 0, 174,
	175, 0, 232, 523, 524, 0, 0, 176, 497, 498,
	471, 177, 178, 179, 180, 0, 0, 181, 182, 183,
	491, 0, 184, 185, 186, 237, 525, 0, 187, 0,
	0, 0, 0, 188, 189, 190, 191, 449, 477, 466,
	467, 464, 465, 453, 0, 0, 0, 0, 445, 446,
	86, 87, 0, 88, 447, 0, 0, 454, 459, 0,
	0, 0, 89, 90, 192, 506, 194, 507, 91, 508,
	509, 0, 92, 198, 199, 93, 474, 492, 510, 511,
	202, 0, 502, 0, 485, 0, 94, 95, 96, 0,
	97, 0, 98, 0, 355, 99, 100, 0, 486, 488,
	0, 487, 489, 101, 102, 103, 104, 512, 105, 513,
	514, 0, 106, 0, 107, 0, 0, 0, 505, 109,
	0, 110, 0, 0, 0, 458, 111, 112, 493, 472,
	0, 0, 113, 114, 515, 0, 115, 0, 116, 0,
	1121, 356, 0, 117, 503, 0, 211, 0, 118, 119,
	499, 501, 0, 0, 120, 0, 357, 121, 516, 517,
	518, 0, 484, 0, 358, 122, 359, 123, 124, 0,
	0, 504, 360, 125, 361, 0, 126, 0, 0, 127,
	0, 128, 129, 130, 131, 132, 362, 133, 134, 137,
	135, 448, 136, 473, 500, 138, 519, 139, 140, 0,
	0, 0, 0, 0, 141, 221, 363, 142, 364, 494,
	143, 144, 0, 495, 145, 224, 146, 0, 147, 148,
	149, 520, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 365, 157, 158, 462, 159, 0, 160, 161, 162,
	0, 227, 163, 164, 490, 165, 166, 366, 167, 521,
	229, 168, 0, 169, 170, 172, 522, 171, 496, 0,
	173, 0, 174, 175, 0, 232, 523, 524, 0, 0,
	176, 497, 498, 471, 177, 178, 179, 180, 0, 0,
	181, 182, 183, 491, 0, 184, 185, 186, 237, 525,
	0, 187, 0, 0, 0, 0, 188, 189, 190, 191,
	449, 477, 466, 467, 464, 465, 453, 0, 0, 0,
	0, 445, 446, 86, 87, 782, 88, 447, 0, 0,
	454, 459, 0, 0, 0, 89, 90, 192, 506, 194,
	507, 91, 508, 509, 0, 92, 198, 199, 93, 474,
	492, 510, 511, 202, 0, 502, 0, 485, 0, 94,
	95, 96, 0, 97, 0, 98, 0, 355, 99, 100,
	0, 486, 488, 0, 487, 489, 101, 102, 103, 104,
	512, 105, 513, 514, 0, 106, 0, 107, 0, 0,
	0, 505, 109, 0, 110, 0, 0, 0, 458, 111,
	112, 493, 472, 0, 0, 113, 114, 515, 0, 115,
	0, 116, 0, 0, 356, 0, 117, 503, 0, 211,
	0, 118, 119, 499, 501, 0, 0, 120, 0, 357,
	121, 516, 517, 518, 0, 484, 0, 358, 122, 359,
	123, 124, 0, 0, 504, 360, 125, 361, 0, 126,
	0, 0, 127, 0, 128, 129, 130, 131, 132, 362,
	133, 134, 137, 135, 448, 136, 473, 500, 138, 519,
	139, 140, 0, 0, 0, 0, 0, 141, 221, 363,
	142, 364, 494, 143, 144, 0, 495, 145, 224, 146,
	0, 147, 148, 149, 520, 150, 151, 0, 153, 154,
	152, 155, 0, 156, 365, 157, 158, 462, 159, 0,
	160, 161, 162, 0, 227, 163, 164, 490, 165, 166,
	366, 167, 521, 229, 168, 0, 169, 170, 172, 522,
	171, 496, 0, 173, 0, 174, 175, 0, 232, 523,
	524, 0, 0, 176, 497, 498, 471, 177, 178, 179,
	180, 0, 0, 181, 182, 183, 491, 0, 184, 185,
	186, 237, 525, 0, 187, 0, 0, 0, 0, 188,
	189, 190, 191, 449, 477, 466, 467, 464, 465, 453,
	0, 0, 0, 0, 445, 446, 86, 87, 0, 88,
	447, 0, 0, 454, 459, 0, 0, 0, 89, 90,
	192, 506, 194, 507, 91, 508, 509, 0, 92, 198,
	199, 93, 474, 492, 510, 511, 202, 0, 502, 0,
	485, 0, 94, 95, 96, 0, 97, 0, 98, 0,
	355, 99, 1756, 0, 486, 488, 0, 487, 489, 101,
	102, 103, 104, 512, 105, 513, 514, 0, 106, 0,
	107, 0, 0, 0, 505, 109, 0, 110, 0, 0,
	0, 458, 111, 112, 493, 472, 0, 0, 113, 114,
	515, 0, 115, 0, 116, 0, 0, 356, 0, 117,
	503, 0, 211, 0, 118, 119, 499, 501, 0, 0,
	120, 0, 357, 121, 516, 517, 518, 0, 484, 0,
	358, 122, 359, 123, 124, 0, 0, 504, 360, 125,
	361, 0, 126, 0, 0, 127, 0, 128, 129, 130,
	131, 132, 362, 133, 134, 137, 135, 448, 136, 473,
	500, 138, 519, 139, 140, 0, 0, 0, 0, 0,
	141, 221, 363, 142, 364, 494, 143, 144, 0, 495,
	145, 224, 146, 0, 147, 148, 149, 520, 150, 151,
	0, 153, 154, 152, 155, 0, 156, 365, 157, 158,
	462, 159, 0, 160, 161, 162, 0, 227, 163, 164,
	490, 165, 166, 366, 167, 521, 229, 168, 0, 169,
	170, 172, 522, 171, 496, 0, 173, 0, 174, 175,
	0, 232, 523, 524, 0, 0, 176, 497, 498, 471,
	177, 178, 1755, 180, 0, 0, 181, 182, 183, 491,
	0, 184, 185, 186, 237, 525, 0, 187, 0, 0,
	0, 0, 188, 189, 190, 191, 449, 477, 466, 467,
	464, 465, 453, 0, 0, 0, 0, 445, 446, 86,
	87, 0, 88, 447, 0, 0, 454, 459, 0, 0,
	0, 89, 90, 1754, 506, 194, 507, 91, 508, 509,
	0, 92, 198, 199, 93, 474, 492, 510, 511, 202,
	0, 502, 0, 485, 0, 94, 95, 96, 0, 97,
	0, 98, 0, 355, 99, 1756, 0, 486, 488, 0,
	487, 489, 101, 102, 103, 104, 512, 105, 513, 514,
	0, 106, 0, 107, 0, 0, 0, 505, 109, 0,
	110, 0, 0, 0, 458, 111, 112, 493, 472, 0,
	0, 113, 114, 515, 0, 115, 0, 116, 0, 0,
	356, 0, 117, 503, 0, 211, 0, 118, 119, 499,
	501, 0, 0, 120, 0, 357, 121, 516, 517, 518,
	0, 484, 0, 358, 122, 359, 123, 124, 0, 0,
	504, 360, 125, 361, 0, 126, 0, 0, 127, 0,
	128, 129, 130, 131, 132, 362, 133, 134, 137, 135,
	448, 136, 473, 500, 138, 519, 139, 140, 0, 0,
	0, 0, 0, 141, 221, 363, 142, 364, 494, 143,
	144, 0, 495, 145, 224, 146, 0, 147, 148, 149,
	520, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	365, 157, 158, 462, 159, 0, 160, 161, 162, 0,
	227, 163, 164, 490, 165, 166, 366, 167, 521, 229,
	168, 0, 169, 170, 172, 522, 171, 496, 0, 173,
	0, 174, 175, 0, 232, 523, 524, 0, 0, 176,
	497, 498, 471, 177, 178, 1755, 180, 0, 0, 181,
	182, 183, 491, 0, 184, 185, 186, 237, 525, 0,
	187, 0, 0, 0, 0, 188, 189, 190, 191, 449,
	477, 466, 467, 464, 465, 453, 0, 0, 0, 0,
	445, 446, 86, 87, 0, 88, 447, 0, 0, 454,
	459, 0, 0, 0, 89, 90, 192, 506, 194, 507,
	91, 508, 509, 0, 92, 198, 199, 93, 474, 492,
	510, 511, 202, 0, 502, 0, 485, 0, 94, 95,
	96, 0, 97, 0, 98, 0, 355, 99, 100, 0,
	486, 488, 0, 487, 489, 101, 102, 103, 104, 512,
	105, 513, 514, 0, 106, 0, 107, 0, 0, 0,
	505, 109, 0, 110, 0, 0, 0, 458, 111, 112,
	493, 472, 0, 0, 113, 114, 515, 0, 115, 0,
	116, 0, 0, 356, 0, 117, 503, 0, 211, 0,
	118, 119, 499, 501, 0, 0, 120, 0, 357, 121,
	516, 517, 518, 0, 484, 0, 358, 122, 359, 123,
	124, 0, 0, 504, 360, 125, 361, 0, 126, 0,
	0, 127, 0, 128, 129, 130, 131, 132, 362, 133,
	134, 137, 135, 448, 136, 473, 500, 138, 519, 139,
	140, 0, 0, 0, 0, 0, 141, 221, 363, 142,
	364, 494, 143, 144, 0, 495, 145, 224, 146, 0,
	147, 148, 149, 520, 150, 151, 0, 153, 154, 152,
	155, 0, 156, 365, 157, 158, 462, 159, 0, 160,
	161, 162, 0, 227, 163, 164, 490, 165, 166, 366,
	167, 521, 229, 168, 0, 169, 170, 172, 522, 171,
	496, 0, 173, 0, 174, 175, 0, 232, 523, 524,
	0, 0, 176, 497, 498, 471, 177, 178, 179, 180,
	0, 0, 181, 182, 183, 491, 0, 184, 185, 186,
	237, 525, 0, 187, 0, 0, 0, 0, 188, 189,
	190, 191, 449, 477, 466, 467, 464, 465, 453, 0,
	0, 0, 0, 445, 446, 86, 87, 0, 88, 447,
	0, 0, 454, 459, 0, 0, 0, 89, 90, 192,
	506, 194, 507, 91, 508, 509, 0, 92, 198, 199,
	93, 474, 492, 510, 511, 202, 0, 502, 0, 485,
	0, 94, 95, 96, 0, 97, 0, 98, 0, 355,
	99, 100, 0, 486, 488, 0, 487, 489, 101, 102,
	103, 104, 512, 105, 513, 514, 0, 106, 0, 107,
	0, 0, 0, 505, 109, 0, 110, 0, 0, 0,
	458, 111, 112, 493, 472, 0, 0, 113, 114, 515,
	0, 115, 0, 116, 0, 0, 356, 0, 117, 503,
	0, 211, 0, 118, 119, 499, 501, 0, 0, 120,
	0, 357, 121, 516, 517, 518, 0, 484, 0, 358,
	122, 359, 123, 124, 0, 0, 504, 360, 125, 361,
	0, 126, 0, 0, 127, 0, 128, 129, 130, 131,
	132, 362, 133, 134, 137, 135, 0, 136, 473, 500,
	138, 519, 139, 140, 0, 0, 0, 0, 0, 141,
	221, 363, 142, 364, 494, 143, 144, 0, 495, 145,
	224, 146, 0, 147, 148, 149, 520, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 365, 157, 158, 1111,
	159, 0, 160, 161, 162, 0, 227, 163, 164, 490,
	165, 166, 366, 167, 521, 229, 168, 0, 169, 170,
	172, 522, 171, 496, 0, 173, 0, 174, 175, 0,
	232, 523, 524, 0, 0, 176, 497, 498, 471, 177,
	178, 179, 180, 0, 0, 181, 182, 183, 491, 0,
	184, 185, 186, 237, 525, 0, 187, 0, 0, 0,
	0, 188, 189, 190, 191, 0, 477, 466, 467, 464,
	465, 453, 0, 0, 0, 0, 1107, 1108, 86, 87,
	0, 88, 1109, 0, 0, 1110, 459, 0, 0, 0,
	89, 90, 0, 506, 194, 507, 91, 508, 509, 0,
	92, 198, 199, 93, 474, 492, 510, 511, 202, 0,
	502, 0, 485, 0, 94, 95, 96, 0, 97, 0,
	98, 0, 355, 99, 1756, 0, 486, 488, 0, 487,
	489, 101, 102, 103, 104, 512, 105, 513, 514, 0,
	106, 0, 107, 0, 0, 0, 505, 109, 0, 110,
	0, 0, 0, 458, 111, 112, 493, 472, 0, 0,
	113, 114, 515, 0, 115, 0, 116, 0, 0, 356,
	0, 117, 503, 0, 211, 0, 118, 119, 499, 501,
	0, 0, 120, 0, 357, 121, 516, 517, 518, 0,
	484, 0, 0, 122, 359, 123, 124, 0, 0, 504,
	360, 125, 0, 0, 126, 0, 0, 127, 0, 128,
	129, 130, 131, 132, 362, 133, 134, 137, 135, 448,
	136, 473, 500, 138, 519, 139, 140, 0, 0, 0,
	0, 0, 141, 221, 363, 142, 364, 494, 143, 144,
	0, 495, 145, 224, 146, 0, 147, 148, 149, 520,
	150, 151, 0, 153, 154, 152, 155, 0, 156, 365,
	157, 158, 462, 159, 0, 160, 161, 162, 0, 227,
	163, 164, 490, 165, 166, 0, 167, 521, 229, 168,
	0, 169, 170, 172, 522, 171, 496, 0, 173, 0,
	174, 175, 0, 232, 523, 524, 0, 0, 176, 497,
	498, 471, 177, 178, 1755, 180, 0, 0, 181, 182,
	183, 491, 0, 184, 185, 186, 237, 525, 0, 187,
	0, 0, 0, 0, 188, 189, 190, 191, 0, 477,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 445,
	446, 86, 87, 0, 88, 447, 0, 0, 454, 0,
	0, 0, 0, 89, 90, 192, 193, 194, 195, 91,
	196, 197, 0, 92, 198, 199, 93, 0, 492, 200,
	201, 202, 0, 502, 0, 485, 0, 94, 95, 96,
	0, 97, 0, 98, 0, 355, 99, 100, 0, 486,
	488, 0, 487, 489, 101, 102, 103, 104, 204, 105,
	205, 206, 0, 106, 0, 107, 0, 0, 0, 108,
	109, 0, 110, 0, 0, 0, 207, 111, 112, 493,
	0, 0, 0, 113, 114, 209, 0, 115, 0, 116,
	0, 0, 356, 0, 117, 503, 0, 211, 0, 118,
	119, 499, 501, 0, 0, 120, 0, 357, 121, 214,
	215, 216, 0, 217, 0, 358, 122, 359, 123, 124,
	0, 0, 504, 360, 125, 361, 0, 126, 0, 0,
	127, 0, 128, 129, 130, 131, 132, 362, 133, 134,
	137, 135, 0, 136, 0, 500, 138, 220, 139, 140,
	0, 0, 0, 0, 0, 141, 221, 363, 142, 364,
	494, 143, 144, 0, 495, 145, 224, 146, 0, 147,
	148, 149, 225, 150, 151, 0, 153, 154, 152, 155,
	0, 156, 365, 157, 158, 226, 159, 0, 160, 161,
	162, 0, 227, 163, 164, 490, 165, 166, 366, 167,
	228, 229, 168, 0, 169, 170, 172, 230, 171, 496,
	0, 173, 0, 174, 175, 0, 232, 233, 234, 0,
	0, 176, 497, 498, 0, 177, 178, 179, 180, 0,
	0, 181, 182, 183, 491, 0, 184, 185, 186, 237,
	238, 0, 187, 0, 0, 0, 0, 188, 189, 190,
	191, 349, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 86, 87, 0, 88, 0, 0, 0,
	0, 1537, 0, 0, 0, 89, 90, 192, 193, 194,
	195, 91, 196, 197, 0, 92, 198, 199, 93, 0,
	0, 200, 201, 202, 0, 203, 0, 354, 0, 94,
	95, 96, 0, 97, 0, 98, 0, 355, 99, 100,
	0, 0, 0, 0, 0, 0, 101, 102, 103, 104,
	204, 105, 205, 206, 0, 106, 0, 107, 0, 0,
	0, 108, 109, 0, 110, 0, 0, 0, 207, 111,
	112, 208, 0, 0, 0, 113, 114, 209, 0, 115,
	0, 116, 0, 0, 356, 0, 117, 210, 0, 211,
	0, 118, 119, 212, 213, 0, 0, 120, 0, 357,
	121, 214, 215, 216, 0, 217, 0, 358, 122, 359,
	123, 124, 0, 0, 218, 360, 125, 361, 0, 126,
	0, 0, 127, 0, 128, 129, 130, 131, 132, 362,
	133, 134, 137, 135, 0, 136, 0, 219, 138, 220,
	139, 140, 0, 0, 0, 0, 0, 141, 221, 363,
	142, 364, 222, 143, 144, 0, 223, 145, 224, 146,
	0, 147, 148, 149, 225, 150, 151, 0, 153, 154,
	152, 155, 0, 156, 365, 157, 158, 226, 159, 0,
	160, 161, 162, 56, 227, 163, 164, 0, 165, 166,
	366, 167, 228, 229, 168, 0, 169, 170, 172, 230,
	171, 231, 0, 173, 58, 174, 175, 0, 232, 233,
	234, 0, 0, 176, 235, 236, 0, 177, 178, 179,
	180, 0, 0, 181, 182, 183, 0, 0, 184, 185,
	186, 353, 238, 0, 187, 0, 0, 0, 54, 188,
	189, 190, 191, 0, 55, 349, 655, 0, 656, 651,
	646, 0, 0, 0, 0, 0, 0, 86, 87, 0,
	88, 0, 0, 53, 0, 0, 0, 0, 0, 89,
	90, 192, 193, 194, 195, 91, 196, 197, 0, 92,
	198, 199, 93, 0, 0, 200, 201, 202, 0, 203,
	0, 354, 0, 94, 95, 96, 0, 97, 0, 98,
	0, 355, 99, 100, 0, 0, 0, 0, 0, 0,
	101, 102, 103, 104, 204, 105, 205, 206, 659, 106,
	0, 107, 0, 0, 0, 108, 109, 0, 110, 0,
	0, 0, 207, 111, 112, 208, 648, 0, 0, 113,
	114, 209, 0, 115, 0, 116, 0, 0, 356, 0,
	117, 210, 0, 211, 0, 118, 119, 212, 213, 0,
	0, 120, 0, 357, 121, 214, 215, 216, 0, 217,
	0, 358, 122, 359, 123, 124, 0, 0, 218, 360,
	125, 361, 0, 126, 0, 0, 127, 0, 128, 129,
	130, 131, 132, 362, 133, 134, 137, 135, 0, 136,
	0, 219, 138, 220, 139, 140, 0, 649, 0, 0,
	0, 141, 221, 363, 142, 364, 222, 143, 144, 0,
	223, 145, 224, 146, 0, 147, 148, 149, 225, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 365, 157,
	158, 226, 159, 0, 160, 161, 162, 0, 227, 163,
	164, 0, 165, 166, 366, 167, 228, 229, 168, 0,
	169, 170, 172, 230, 171, 231, 0, 173, 0, 174,
	175, 0, 232, 233, 234, 0, 0, 176, 235, 236,
	647, 177, 178, 179, 180, 0, 0, 181, 182, 183,
	0, 0, 184, 185, 186, 237, 238, 0, 187, 0,
	0, 0, 0, 188, 189, 190, 191, 0, 349, 655,
	0, 656, 651, 646, 0, 0, 0, 0, 657, 652,
	86, 87, 0, 88, 0, 0, 0, 0, 0, 0,
	0, 0, 89, 90, 192, 193, 194, 195, 91, 196,
	197, 0, 92, 198, 199, 93, 0, 0, 200, 201,
	202, 0, 203, 0, 354, 0, 94, 95, 96, 0,
	97, 0, 98, 0, 355, 99, 100, 0, 0, 0,
	0, 0, 0, 101, 102, 103, 104, 204, 105, 205,
	206, 642, 106, 0, 107, 0, 0, 0, 108, 109,
	0, 110, 0, 0, 0, 207, 111, 112, 208, 648,
	0, 0, 113, 114, 209, 0, 115, 0, 116, 0,
	0, 356, 0, 117, 210, 0, 211, 0, 118, 119,
	212, 213, 0, 0, 120, 0, 357, 121, 214, 215,
	216, 0, 217, 0, 358, 122, 359, 123, 124, 0,
	0, 218, 360, 125, 361, 0, 126, 0, 0, 127,
	0, 128, 129, 130, 131, 132, 362, 133, 134, 137,
	135, 0, 136, 0, 219, 138, 220, 139, 140, 0,
	649, 0, 0, 0, 141, 221, 363, 142, 364, 222,
	143, 144, 0, 223, 145, 224, 146, 0, 147, 148,
	149, 225, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 365, 157, 158, 226, 159, 0, 160, 161, 162,
	0, 227, 163, 164, 0, 165, 166, 366, 167, 228,
	229, 168, 0, 169, 170, 172, 230, 171, 231, 0,
	173, 0, 174, 175, 0, 232, 233, 234, 0, 0,
	176, 235, 236, 647, 177, 178, 179, 180, 0, 0,
	181, 182, 183, 0, 0, 184, 185, 186, 237, 238,
	0, 187, 0, 0, 0, 0, 188, 189, 190, 191,
	0, 349, 655, 0, 656, 651, 646, 0, 0, 0,
	0, 657, 652, 86, 87, 0, 88, 0, 0, 0,
	0, 0, 0, 0, 0, 89, 90, 192, 193, 194,
	195, 91, 196, 197, 0, 92, 198, 199, 93, 0,
	0, 200, 201, 202, 0, 203, 0, 354, 0, 94,
	95, 96, 0, 97, 0, 98, 0, 355, 99, 100,
	0, 0, 0, 0, 0, 0, 101, 102, 103, 104,
	204, 105, 205, 206, 0, 106, 0, 107, 0, 0,
	0, 108, 109, 0, 110, 0, 0, 0, 207, 111,
	112, 208, 648, 0, 0, 113, 114, 209, 0, 115,
	0, 116, 0, 0, 356, 0, 117, 210, 0, 211,
	0, 118, 119, 212, 213, 0, 0, 120, 0, 357,
	121, 214, 215, 216, 0, 217, 0, 358, 122, 359,
	123, 124, 0, 0, 218, 360, 125, 361, 0, 126,
	0, 0, 127, 0, 128, 129, 130, 131, 132, 362,
	133, 134, 137, 135, 0, 136, 0, 219, 138, 220,
	139, 140, 0, 649, 0, 0, 0, 141, 221, 363,
	142, 364, 222, 143, 144, 0, 223, 145, 224, 146,
	0, 147, 148, 149, 225, 150, 151, 0, 153, 154,
	152, 155, 0, 156, 365, 157, 158, 226, 159, 0,
	160, 161, 162, 0, 227, 163, 164, 0, 165, 166,
	366, 167, 228, 229, 168, 0, 169, 170, 172, 230,
	171, 231, 0, 173, 0, 174, 175, 0, 232, 233,
	234, 0, 0, 176, 235, 236, 647, 177, 178, 179,
	180, 0, 0, 181, 182, 183, 0, 0, 184, 185,
	186, 237, 238, 83, 187, 0, 0, 0, 0, 188,
	189, 190, 191, 0, 0, 86, 87, 0, 88, 0,
	0, 0, 0, 0, 657, 652, 0, 89, 90, 192,
	193, 194, 195, 91, 196, 197, 0, 92, 198, 199,
	93, 0, 0, 200, 201, 202, 0, 203, 0, 0,
	0, 94, 95, 96, 0, 97, 0, 98, 0, 0,
	99, 100, 0, 0, 0, 0, 0, 0, 101, 102,
	103, 104, 204, 105, 205, 206, 0, 106, 0, 107,
	0, 0, 0, 108, 109, 0, 110, 0, 0, 0,
	207, 111, 112, 208, 0, 0, 0, 113, 114, 209,
	0, 115, 0, 116, 0, 0, 0, 0, 117, 210,
	0, 211, 0, 118, 119, 212, 213, 0, 0, 120,
	0, 0, 121, 214, 215, 216, 0, 217, 0, 0,
	122, 0, 123, 124, 0, 0, 218, 0, 125, 0,
	0, 126, 0, 0, 127, 0, 128, 129, 130, 131,
	132, 0, 133, 134, 137, 135, 0, 136, 0, 219,
	138, 220, 139, 140, 0, 0, 0, 0, 0, 141,
	221, 0, 142, 0, 222, 143, 144, 0, 223, 145,
	224, 146, 0, 147, 148, 149, 225, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 0, 157, 158, 226,
	159, 0, 160, 161, 162, 56, 227, 163, 164, 0,
	165, 166, 0, 167, 228, 229, 168, 0, 169, 170,
	172, 230, 171, 231, 0, 173, 58, 174, 175, 0,
	232, 233, 234, 0, 0, 176, 235, 236, 0, 177,
	178, 179, 180, 0, 0, 181, 182, 183, 0, 0,
	184, 185, 186, 353, 238, 0, 187, 0, 0, 0,
	54, 188, 189, 190, 191, 83, 55, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 87, 0,
	88, 0, 0, 0, 0, 53, 1231, 0, 0, 89,
	90, 192, 193, 194, 195, 91, 196, 197, 0, 92,
	198, 199, 93, 0, 0, 200, 201, 202, 0, 203,
	0, 0, 0, 94, 95, 96, 0, 97, 0, 98,
	0, 0, 99, 100, 0, 0, 0, 0, 0, 0,
	101, 102, 103, 104, 204, 105, 205, 206, 0, 106,
	0, 107, 0, 0, 0, 108, 109, 0, 110, 0,
	0, 0, 207, 111, 112, 208, 0, 0, 0, 113,
	114, 209, 0, 115, 0, 116, 0, 0, 0, 0,
	117, 210, 0, 211, 0, 118, 119, 212, 213, 0,
	0, 120, 0, 0, 121, 214, 215, 216, 0, 217,
	0, 0, 122, 0, 123, 124, 0, 0, 218, 0,
	125, 0, 0, 126, 0, 0, 127, 0, 128, 129,
	130, 131, 132, 0, 133, 134, 137, 135, 0, 136,
	0, 219, 138, 220, 139, 140, 0, 0, 0, 0,
	0, 141, 221, 0, 142, 0, 222, 143, 144, 0,
	223, 145, 224, 146, 0, 147, 148, 149, 225, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 0, 157,
	158, 226, 159, 0, 160, 161, 162, 0, 227, 163,
	164, 0, 165, 166, 0, 167, 228, 229, 168, 0,
	169, 170, 172, 230, 171, 231, 0, 173, 0, 174,
	175, 0, 232, 233, 234, 0, 0, 176, 235, 236,
	0, 177, 178, 179, 180, 0, 0, 181, 182, 183,
	0, 0, 184, 185, 186, 237, 238, 0, 187, 0,
	0, 0, 0, 188, 189, 190, 191, 83, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	87, 0, 88, 0, 0, 0, 0, 0, 435, 0,
	0, 89, 90, 192, 193, 194, 195, 91, 196, 197,
	0, 92, 198, 199, 93, 0, 0, 200, 201, 202,
	0, 203, 0, 0, 0, 94, 95, 96, 0, 97,
	0, 98, 0, 0, 99, 100, 0, 0, 0, 0,
	0, 0, 101, 102, 103, 104, 204, 105, 205, 206,
	0, 106, 0, 107, 0, 0, 0, 108, 109, 0,
	110, 0, 0, 0, 207, 111, 112, 208, 0, 0,
	0, 113, 114, 209, 0, 115, 0, 116, 0, 0,
	0, 0, 117, 210, 0, 211, 0, 118, 119, 212,
	213, 0, 0, 120, 0, 0, 121, 214, 215, 216,
	0, 217, 0, 0, 122, 0, 123, 124, 0, 0,
	218, 0, 125, 0, 0, 126, 0, 0, 127, 0,
	128, 129, 130, 131, 132, 0, 133, 134, 137, 135,
	0, 136, 0, 219, 138, 220, 139, 140, 0, 0,
	322, 0, 0, 141, 221, 0, 142, 0, 222, 143,
	144, 0, 223, 145, 224, 146, 0, 147, 148, 149,
	225, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	0, 157, 158, 226, 159, 0, 160, 161, 162, 0,
	227, 163, 164, 0, 165, 166, 0, 167, 228, 229,
	168, 0, 169, 170, 172, 230, 171, 231, 0, 173,
	0, 174, 175, 0, 232, 233, 234, 0, 0, 176,
	235, 236, 0, 177, 178, 179, 180, 0, 0, 181,
	182, 183, 0, 0, 184, 185, 186, 237, 238, 0,
	187, 0, 0, 0, 0, 188, 189, 190, 191, 83,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 86, 87, 0, 88, 0, 0, 0, 0, 1019,
	0, 0, 0, 89, 90, 192, 193, 194, 195, 91,
	196, 197, 0, 92, 198, 199, 93, 0, 0, 200,
	201, 202, 0, 203, 0, 0, 0, 94, 95, 96,
	0, 97, 0, 98, 0, 0, 99, 100, 0, 0,
	0, 0, 0, 0, 101, 102, 103, 104, 204, 105,
	205, 206, 0, 106, 0, 107, 0, 0, 0, 108,
	109, 0, 110, 0, 0, 0, 207, 111, 112, 208,
	0, 0, 0, 113, 114, 209, 0, 115, 0, 116,
	0, 0, 0, 0, 117, 210, 0, 211, 0, 118,
	119, 212, 213, 0, 0, 120, 0, 0, 121, 214,
	215, 216, 0, 217, 0, 0, 122, 0, 123, 124,
	0, 0, 218, 0, 125, 0, 0, 126, 0, 0,
	127, 0, 128, 129, 130, 131, 132, 0, 133, 134,
	137, 135, 0, 136, 0, 219, 138, 220, 139, 140,
	0, 0, 0, 0, 0, 141, 221, 0, 142, 0,
	222, 143, 144, 0, 223, 145, 224, 146, 0, 147,
	148, 149, 225, 150, 151, 0, 153, 154, 152, 155,
	0, 156, 0, 157, 158, 226, 159, 0, 160, 161,
	162, 0, 227, 163, 164, 0, 165, 166, 0, 167,
	228, 229, 168, 0, 169, 170, 172, 230, 171, 231,
	0, 173, 0, 174, 175, 0, 232, 233, 234, 0,
	0, 176, 235, 236, 0, 177, 178, 179, 180, 0,
	0, 181, 182, 183, 0, 0, 184, 185, 186, 237,
	238, 0, 187, 0, 0, 0, 0, 188, 189, 190,
	191, 83, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 86, 87, 0, 88, 0, 0, 0,
	0, 930, 0, 0, 0, 89, 90, 192, 193, 194,
	195, 91, 196, 197, 0, 92, 198, 199, 93, 0,
	0, 200, 201, 202, 0, 203, 0, 0, 0, 94,
	95, 96, 0, 97, 0, 98, 0, 0, 99, 100,
	0, 0, 0, 0, 0, 0, 101, 102, 103, 104,
	204, 105, 205, 206, 0, 106, 0, 107, 0, 0,
	0, 108, 109, 0, 110, 0, 0, 0, 207, 111,
	112, 208, 0, 0, 0, 113, 114, 209, 0, 115,
	0, 116, 0, 0, 0, 0, 117, 210, 0, 211,
	0, 118, 119, 212, 213, 0, 0, 120, 0, 0,
	121, 214, 215, 216, 0, 217, 0, 0, 122, 0,
	123, 124, 0, 0, 218, 0, 125, 0, 0, 126,
	0, 0, 127, 0, 128, 129, 130, 131, 132, 0,
	133, 134, 137, 135, 0, 136, 0, 219, 138, 220,
	139, 140, 0, 0, 0, 0, 0, 141, 221, 0,
	142, 0, 222, 143, 144, 0, 223, 145, 224, 146,
	0, 147, 148, 149, 225, 150, 151, 0, 153, 154,
	152, 155, 0, 156, 0, 157, 158, 226, 159, 0,
	160, 161, 162, 0, 227, 163, 164, 0, 165, 166,
	0, 167, 228, 229, 168, 0, 169, 170, 172, 230,
	171, 231, 0, 173, 0, 174, 175, 0, 232, 233,
	234, 0, 0, 176, 235, 236, 0, 177, 178, 179,
	180, 0, 0, 181, 182, 183, 0, 0, 184, 185,
	186, 237, 238, 0, 187, 0, 0, 0, 0, 188,
	189, 190, 191, 83, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 87, 0, 88, 0,
	0, 0, 0, 1439, 0, 0, 0, 89, 90, 192,
	193, 194, 195, 91, 196, 197, 0, 92, 198, 199,
	93, 0, 0, 200, 201, 202, 0, 203, 0, 0,
	0, 94, 95, 96, 0, 97, 0, 98, 0, 0,
	99, 100, 0, 0, 0, 0, 0, 0, 101, 102,
	103, 104, 204, 105, 205, 206, 0, 106, 0, 107,
	0, 0, 0, 108, 109, 0, 110, 0, 0, 0,
	207, 111, 112, 208, 0, 0, 0, 113, 114, 209,
	0, 115, 0, 116, 0, 0, 0, 0, 117, 210,
	0, 211, 0, 118, 119, 212, 213, 0, 0, 120,
	0, 0, 121, 214, 215, 216, 0, 217, 0, 0,
	122, 0, 123, 124, 0, 0, 218, 0, 125, 0,
	0, 126, 0, 0, 127, 0, 128, 129, 130, 131,
	132, 0, 133, 134, 137, 135, 0, 136, 0, 219,
	138, 220, 139, 140, 0, 0, 0, 0, 0, 141,
	221, 0, 142, 0, 222, 143, 144, 0, 223, 145,
	224, 146, 0, 147, 148, 149, 225, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 0, 157, 158, 226,
	159, 0, 160, 161, 162, 0, 227, 163, 164, 0,
	165, 166, 0, 167, 228, 229, 168, 0, 169, 170,
	172, 230, 171, 231, 0, 173, 0, 174, 175, 0,
	232, 233, 234, 0, 0, 176, 235, 236, 0, 177,
	178, 179, 180, 0, 0, 181, 182, 183, 0, 0,
	184, 185, 186, 237, 238, 0, 187, 0, 0, 0,
	0, 188, 189, 190, 191, 83, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 87, 0,
	88, 0, 0, 0, 0, 536, 0, 0, 0, 89,
	90, 192, 193, 194, 195, 91, 196, 197, 0, 92,
	198, 199, 93, 0, 0, 200, 201, 202, 0, 203,
	0, 0, 0, 94, 95, 96, 0, 97, 0, 98,
	0, 0, 99, 100, 0, 0, 0, 0, 0, 0,
	101, 102, 626, 104, 204, 105, 205, 206, 0, 106,
	0, 107, 0, 0, 0, 108, 109, 0, 110, 0,
	0, 0, 207, 111, 112, 208, 0, 0, 0, 113,
	114, 209, 0, 115, 0, 116, 0, 0, 0, 0,
	117, 210, 0, 211, 0, 118, 119, 212, 213, 0,
	0, 120, 0, 0, 121, 214, 215, 216, 0, 217,
	0, 0, 122, 0, 123, 124, 0, 0, 218, 0,
	125, 0, 0, 126, 0, 0, 127, 0, 128, 129,
	130, 131, 132, 0, 133, 134, 137, 135, 0, 136,
	0, 219, 138, 220, 139, 140, 0, 0, 0, 0,
	0, 141, 221, 0, 142, 0, 222, 143, 144, 0,
	223, 145, 224, 146, 0, 147, 148, 149, 225, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 0, 157,
	158, 226, 159, 0, 160, 161, 162, 0, 227, 163,
	164, 0, 165, 166, 0, 167, 228, 229, 168, 0,
	169, 170, 172, 230, 171, 231, 0, 173, 625, 174,
	175, 0, 232, 233, 234, 0, 0, 176, 235, 236,
	0, 177, 178, 179, 180, 0, 0, 181, 182, 183,
	0, 0, 184, 185, 186, 237, 238, 83, 187, 0,
	0, 0, 0, 188, 189, 190, 191, 0, 0, 86,
	87, 0, 88, 0, 0, 0, 0, 0, 0, 0,
	629, 89, 90, 192, 193, 194, 195, 91, 196, 197,
	0, 92, 198, 199, 93, 0, 0, 200, 201, 202,
	0, 203, 0, 0, 0, 94, 95, 96, 0, 97,
	0, 98, 0, 0, 99, 100, 0, 0, 0, 0,
	0, 0, 101, 102, 103, 104, 204, 105, 205, 206,
	0, 106, 0, 107, 0, 0, 0, 108, 109, 0,
	110, 0, 0, 0, 207, 111, 112, 208, 0, 0,
	0, 113, 114, 209, 0, 115, 0, 116, 0, 0,
	0, 0, 117, 210, 0, 211, 0, 118, 119, 212,
	213, 0, 0, 120, 0, 0, 121, 214, 215, 216,
	0, 217, 0, 0, 122, 0, 123, 124, 0, 0,
	218, 0, 125, 0, 0, 126, 0, 0, 127, 0,
	128, 129, 130, 131, 132, 0, 133, 134, 137, 135,
	0, 136, 0, 219, 138, 220, 139, 140, 0, 0,
	0, 0, 0, 141, 221, 0, 142, 0, 222, 143,
	144, 0, 223, 145, 224, 146, 0, 147, 148, 149,
	225, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	0, 157, 158, 226, 159, 0, 160, 161, 162, 0,
	227, 163, 164, 0, 165, 166, 0, 167, 228, 229,
	168, 0, 169, 170, 172, 230, 171, 231, 0, 173,
	0, 174, 175, 0, 232, 233, 234, 0, 0, 176,
	235, 236, 0, 177, 178, 179, 180, 0, 0, 181,
	182, 183, 0, 0, 184, 185, 186, 237, 238, 349,
	187, 0, 0, 0, 0, 188, 189, 190, 191, 0,
	0, 86, 87, 0, 88, 0, 0, 0, 0, 0,
	0, 0, 629, 89, 90, 192, 193, 194, 195, 91,
	196, 197, 0, 92, 198, 199, 93, 0, 0, 200,
	201, 202, 0, 203, 0, 354, 0, 94, 95, 96,
	0, 97, 0, 98, 0, 355, 99, 100, 0, 0,
	0, 0, 0, 0, 101, 102, 103, 104, 204, 105,
	205, 206, 0, 106, 0, 107, 0, 0, 0, 108,
	109, 0, 110, 0, 0, 0, 207, 111, 112, 208,
	0, 0, 0, 113, 114, 209, 0, 115, 0, 116,
	0, 0, 356, 0, 117, 210, 0, 211, 0, 118,
	119, 212, 213, 0, 0, 120, 0, 357, 121, 214,
	215, 216, 0, 217, 0, 358, 122, 359, 123, 124,
	0, 0, 218, 360, 125, 361, 0, 126, 0, 0,
	127, 0, 128, 129, 130, 131, 132, 362, 133, 134,
	137, 135, 0, 136, 0, 219, 138, 220, 139, 140,
	0, 0, 0, 0, 0, 141, 221, 363, 142, 364,
	222, 143, 144, 0, 223, 145, 224, 146, 0, 147,
	148, 149, 225, 150, 151, 0, 153, 154, 152, 155,
	0, 156, 365, 157, 158, 226, 159, 0, 160, 161,
	162, 0, 227, 163, 164, 0, 165, 166, 366, 167,
	228, 229, 168, 0, 169, 170, 172, 230, 171, 231,
	0, 173, 0, 174, 175, 0, 232, 233, 234, 0,
	0, 176, 235, 236, 0, 177, 178, 179, 180, 0,
	0, 181, 182, 183, 0, 0, 184, 185, 186, 237,
	238, 83, 187, 0, 0, 0, 0, 188, 189, 190,
	191, 0, 0, 86, 87, 0, 88, 0, 0, 0,
	0, 0, 0, 0, 0, 89, 90, 192, 193, 194,
	195, 91, 196, 197, 0, 92, 198, 199, 93, 0,
	0, 200, 201, 202, 903, 203, 0, 0, 0, 94,
	95, 96, 0, 97, 901, 98, 0, 0, 99, 100,
	0, 0, 0, 0, 0, 0, 101, 102, 103, 104,
	204, 105, 205, 206, 0, 106, 0, 107, 0, 0,
	0, 108, 109, 0, 110, 0, 0, 0, 207, 111,
	112, 208, 0, 996, 0, 113, 114, 209, 0, 115,
	0, 116, 906, 0, 0, 0, 117, 210, 0, 211,
	0, 118, 119, 212, 213, 0, 994, 120, 0, 0,
	121, 214, 215, 216, 0, 217, 0, 0, 122, 0,
	123, 124, 0, 0, 218, 0, 125, 0, 0, 126,
	0, 0, 127, 0, 128, 129, 130, 131, 132, 0,
	133, 134, 137, 135, 0, 136, 0, 219, 138, 220,
	139, 140, 0, 0, 0, 0, 0, 141, 221, 0,
	142, 0, 222, 143, 144, 0, 223, 145, 224, 146,
	905, 147, 148, 149, 225, 150, 151, 0, 153, 154,
	152, 155, 0, 156, 0, 157, 158, 226, 159, 0,
	160, 161, 162, 0, 227, 163, 164, 0, 165, 166,
	0, 167, 228, 229, 168, 0, 169, 170, 172, 230,
	171, 231, 0, 173, 0, 174, 175, 0, 232, 233,
	234, 0, 0, 176, 235, 236, 0, 177, 178, 179,
	180, 0, 995, 181, 182, 183, 0, 0, 184, 185,
	186, 237, 238, 83, 187, 0, 0, 0, 0, 188,
	189, 190, 191, 0, 0, 86, 87, 0, 88, 0,
	0, 0, 0, 0, 0, 0, 0, 89, 90, 192,
	193, 194, 195, 91, 196, 197, 0, 92, 198, 199,
	93, 0, 0, 200, 201, 202, 903, 203, 0, 0,
	898, 94, 95, 96, 0, 97, 901, 98, 0, 0,
	99, 100, 0, 0, 0, 0, 0, 0, 101, 102,
	103, 104, 204, 105, 205, 206, 0, 106, 0, 107,
	0, 0, 0, 108, 109, 0, 110, 0, 0, 0,
	207, 111, 112, 208, 0, 0, 0, 113, 114, 209,
	0, 115, 0, 116, 906, 0, 0, 0, 117, 210,
	0, 211, 0, 118, 119, 897, 213, 0, 0, 120,
	0, 0, 121, 214, 215, 216, 0, 217, 0, 0,
	122, 0, 123, 124, 0, 0, 218, 0, 125, 0,
	0, 126, 0, 0, 127, 0, 128, 129, 130, 131,
	132, 0, 133, 134, 137, 135, 0, 136, 0, 219,
	138, 220, 139, 140, 0, 0, 0, 0, 0, 141,
	221, 0, 142, 0, 222, 143, 144, 0, 223, 145,
	224, 146, 905, 147, 148, 149, 225, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 0, 157, 158, 226,
	159, 0, 160, 161, 162, 0, 227, 163, 164, 0,
	165, 166, 0, 167, 228, 229, 168, 0, 169, 170,
	172, 230, 171, 231, 0, 173, 0, 174, 175, 0,
	232, 233, 234, 0, 0, 176, 235, 236, 0, 177,
	178, 179, 180, 0, 904, 181, 182, 183, 0, 0,
	184, 185, 186, 237, 238, 83, 187, 0, 0, 0,
	0, 188, 189, 190, 191, 0, 0, 86, 87, 0,
	88, 0, 0, 0, 0, 0, 1231, 0, 0, 89,
	90, 192, 193, 194, 195, 91, 196, 197, 0, 92,
	198, 199, 93, 0, 0, 200, 201, 202, 0, 203,
	0, 0, 0, 94, 95, 96, 0, 97, 0, 98,
	0, 0, 99, 100, 0, 0, 0, 0, 0, 0,
	101, 102, 103, 104, 204, 105, 205, 206, 0, 106,
	0, 107, 0, 0, 0, 108, 109, 0, 110, 0,
	0, 0, 207, 111, 112, 208, 0, 0, 0, 113,
	114, 209, 0, 115, 0, 116, 0, 0, 0, 0,
	117, 210, 0, 211, 0, 118, 119, 212, 213, 0,
	0, 120, 0, 0, 121, 214, 215, 216, 0, 217,
	0, 0, 122, 0, 123, 124, 0, 0, 218, 0,
	125, 0, 0, 126, 0, 0, 127, 0, 128, 129,
	130, 131, 132, 0, 133, 134, 137, 135, 0, 136,
	0, 219, 138, 220, 139, 140, 0, 0, 0, 0,
	0, 141, 221, 0, 142, 0, 222, 143, 144, 0,
	223, 145, 224, 146, 0, 147, 148, 149, 225, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 0, 157,
	158, 226, 159, 0, 160, 161, 162, 0, 227, 163,
	164, 0, 165, 166, 0, 167, 228, 229, 168, 0,
	169, 170, 172, 230, 171, 231, 0, 173, 0, 174,
	175, 0, 232, 233, 234, 0, 0, 176, 235, 236,
	0, 177, 178, 179, 180, 0, 0, 181, 182, 183,
	0, 0, 184, 185, 186, 237, 238, 83, 187, 0,
	0, 0, 0, 188, 189, 190, 191, 0, 0, 86,
	87, 0, 88, 0, 0, 0, 0, 0, 0, 0,
	0, 89, 90, 192, 193, 194, 195, 91, 196, 197,
	0, 92, 198, 199, 93, 0, 0, 200, 201, 202,
	0, 203, 0, 0, 0, 94, 95, 96, 0, 97,
	0, 98, 0, 0, 99, 100, 0, 0, 0, 0,
	0, 0, 101, 102, 103, 104, 204, 105, 205, 206,
	0, 106, 0, 107, 0, 0, 0, 108, 109, 0,
	110, 0, 0, 0, 207, 111, 112, 208, 0, 0,
	0, 113, 114, 209, 0, 115, 0, 116, 0, 0,
	0, 0, 117, 210, 0, 211, 0, 118, 119, 212,
	213, 0, 0, 120, 0, 0, 121, 214, 215, 216,
	0, 217, 0, 0, 122, 0, 123, 124, 0, 0,
	218, 0, 125, 0, 0, 126, 0, 0, 127, 0,
	128, 129, 130, 131, 132, 0, 133, 134, 137, 135,
	0, 136, 0, 219, 138, 220, 139, 140, 0, 0,
	322, 0, 0, 141, 221, 0, 142, 0, 222, 143,
	144, 0, 223, 145, 224, 146, 0, 147, 148, 149,
	225, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	0, 157, 158, 226, 159, 0, 160, 161, 162, 0,
	227, 163, 164, 0, 165, 166, 0, 167, 228, 229,
	168, 0, 169, 170, 172, 230, 171, 231, 0, 173,
	0, 174, 175, 0, 232, 233, 234, 0, 0, 176,
	235, 236, 0, 177, 178, 179, 180, 0, 0, 181,
	182, 183, 0, 0, 184, 185, 186, 237, 238, 83,
	187, 0, 0, 0, 0, 188, 189, 190, 191, 0,
	0, 86, 87, 0, 88, 0, 0, 0, 0, 0,
	0, 0, 0, 89, 90, 192, 193, 194, 195, 91,
	196, 197, 0, 92, 198, 199, 93, 0, 0, 200,
	201, 202, 0, 203, 0, 0, 0, 94, 95, 96,
	0, 97, 0, 98, 0, 0, 99, 100, 0, 0,
	0, 0, 0, 0, 101, 102, 103, 104, 204, 105,
	205, 206, 0, 106, 0, 107, 0, 0, 0, 108,
	109, 0, 110, 0, 0, 0, 207, 111, 112, 208,
	0, 0, 0, 113, 114, 209, 0, 115, 0, 116,
	0, 0, 0, 0, 117, 210, 0, 211, 0, 118,
	119, 578, 213, 0, 0, 120, 0, 0, 121, 214,
	215, 216, 0, 217, 0, 0, 122, 0, 123, 124,
	0, 0, 218, 0, 125, 0, 0, 126, 0, 0,
	127, 0, 128, 129, 130, 131, 132, 0, 133, 134,
	137, 135, 0, 136, 0, 219, 138, 220, 139, 140,
	0, 0, 322, 0, 0, 141, 221, 0, 142, 0,
	222, 143, 144, 0, 223, 145, 224, 146, 0, 147,
	148, 149, 225, 150, 151, 0, 153, 154, 152, 155,
	0, 156, 0, 157, 158, 226, 159, 0, 160, 161,
	162, 0, 227, 163, 164, 0, 165, 166, 0, 167,
	228, 229, 168, 0, 169, 170, 172, 230, 171, 231,
	0, 173, 0, 174, 175, 0, 232, 233, 234, 0,
	0, 176, 235, 236, 0, 177, 178, 179, 180, 0,
	0, 181, 182, 183, 0, 0, 184, 185, 186, 237,
	238, 83, 187, 0, 0, 0, 0, 188, 189, 190,
	191, 0, 0, 86, 87, 373, 88, 0, 0, 0,
	0, 0, 0, 0, 0, 89, 90, 192, 193, 194,
	195, 91, 196, 197, 0, 92, 198, 199, 93, 0,
	0, 200, 201, 202, 0, 203, 0, 0, 0, 94,
	95, 96, 0, 97, 0, 98, 0, 0, 99, 100,
	0, 0, 0, 0, 0, 0, 101, 102, 103, 104,
	204, 105, 205, 206, 0, 106, 0, 107, 0, 0,
	0, 108, 109, 0, 110, 0, 0, 0, 207, 111,
	112, 208, 0, 0, 0, 113, 114, 209, 0, 115,
	0, 116, 0, 0, 0, 0, 117, 210, 0, 211,
	0, 118, 119, 212, 213, 0, 0, 120, 0, 0,
	121, 214, 215, 216, 0, 217, 0, 0, 122, 0,
	123, 124, 0, 0, 218, 0, 125, 0, 0, 126,
	0, 0, 127, 0, 128, 129, 130, 131, 132, 0,
	133, 134, 137, 135, 0, 136, 0, 219, 138, 220,
	139, 140, 0, 0, 0, 0, 0, 141, 221, 0,
	142, 0, 222, 143, 144, 0, 223, 145, 224, 146,
	0, 147, 148, 149, 225, 150, 151, 0, 153, 154,
	152, 155, 0, 156, 0, 157, 158, 226, 159, 0,
	160, 161, 162, 0, 227, 163, 164, 0, 165, 166,
	0, 167, 228, 229, 168, 0, 169, 170, 172, 230,
	171, 231, 0, 173, 0, 174, 175, 0, 232, 233,
	234, 0, 0, 176, 235, 236, 0, 177, 178, 179,
	180, 0, 0, 181, 182, 183, 0, 0, 184, 185,
	186, 237, 238, 83, 187, 0, 0, 0, 0, 188,
	189, 190, 191, 0, 0, 86, 87, 0, 88, 0,
	0, 0, 0, 0, 0, 0, 0, 89, 90, 192,
	193, 194, 195, 91, 196, 197, 0, 92, 198, 199,
	93, 0, 0, 200, 201, 202, 0, 203, 0, 0,
	0, 94, 95, 96, 0, 97, 0, 98, 0, 0,
	99, 100, 0, 0, 0, 0, 0, 0, 101, 102,
	103, 104, 204, 105, 205, 206, 0, 106, 0, 107,
	0, 0, 0, 108, 109, 0, 110, 0, 0, 0,
	207, 111, 112, 208, 0, 0, 0, 113, 114, 209,
	0, 115, 0, 116, 0, 0, 0, 0, 117, 210,
	0, 211, 0, 118, 119, 328, 213, 0, 0, 120,
	0, 0, 121, 214, 215, 216, 0, 217, 0, 0,
	122, 0, 123, 124, 0, 0, 218, 0, 125, 0,
	0, 126, 0, 0, 127, 0, 128, 129, 130, 131,
	132, 0, 133, 134, 137, 135, 0, 136, 0, 219,
	138, 220, 139, 140, 0, 0, 322, 0, 0, 141,
	221, 0, 142, 0, 222, 143, 144, 0, 223, 145,
	224, 146, 0, 147, 148, 149, 225, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 0, 157, 158, 226,
	159, 0, 160, 161, 162, 0, 227, 163, 164, 0,
	165, 166, 0, 167, 228, 229, 168, 0, 169, 170,
	172, 230, 171, 231, 0, 173, 0, 174, 175, 0,
	232, 233, 234, 0, 0, 176, 235, 236, 0, 177,
	178, 179, 180, 0, 0, 181, 182, 183, 0, 0,
	184, 185, 186, 237, 238, 83, 187, 0, 0, 0,
	0, 188, 189, 190, 191, 0, 0, 86, 87, 242,
	88, 0, 0, 0, 0, 0, 0, 0, 0, 89,
	90, 192, 193, 194, 195, 91, 196, 197, 0, 92,
	198, 199, 93, 0, 0, 200, 201, 202, 0, 203,
	0, 0, 0, 94, 95, 96, 0, 97, 0, 98,
	0, 0, 99, 100, 0, 0, 0, 0, 0, 0,
	101, 102, 103, 104, 204, 105, 205, 206, 0, 106,
	0, 107, 0, 0, 0, 108, 109, 0, 110, 0,
	0, 0, 207, 111, 112, 208, 0, 0, 0, 113,
	114, 209, 0, 115, 0, 116, 0, 0, 0, 0,
	117, 210, 0, 211, 0, 118, 119, 212, 213, 0,
	0, 120, 0, 0, 121, 214, 215, 216, 0, 217,
	0, 0, 122, 0, 123, 124, 0, 0, 218, 0,
	125, 0, 0, 126, 0, 0, 127, 0, 128, 129,
	130, 131, 132, 0, 133, 134, 137, 135, 0, 136,
	0, 219, 138, 220, 139, 140, 0, 0, 0, 0,
	0, 141, 221, 0, 142, 0, 222, 143, 144, 0,
	223, 145, 224, 241, 0, 147, 148, 149, 225, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 0, 157,
	158, 226, 159, 0, 160, 161, 162, 0, 227, 163,
	164, 0, 165, 166, 0, 167, 228, 229, 168, 0,
	169, 170, 172, 230, 171, 231, 0, 173, 0, 174,
	175, 0, 232, 233, 234, 0, 0, 176, 235, 236,
	0, 177, 178, 179, 180, 0, 0, 181, 182, 183,
	0, 0, 184, 185, 186, 237, 238, 83, 187, 0,
	0, 0, 0, 188, 189, 190, 191, 0, 0, 86,
	87, 0, 88, 0, 0, 0, 0, 0, 0, 0,
	0, 89, 90, 192, 193, 194, 195, 91, 196, 197,
	0, 92, 198, 199, 93, 0, 0, 200, 201, 202,
	0, 203, 0, 0, 0, 94, 95, 96, 0, 97,
	0, 98, 0, 0, 99, 100, 0, 0, 0, 0,
	0, 0, 101, 102, 103, 104, 204, 105, 205, 206,
	0, 106, 0, 107, 0, 0, 0, 108, 109, 0,
	110, 0, 0, 0, 207, 111, 112, 208, 0, 0,
	0, 113, 114, 209, 0, 115, 0, 116, 0, 0,
	0, 0, 117, 210, 0, 211, 0, 118, 119, 212,
	213, 0, 0, 120, 0, 0, 121, 214, 215, 216,
	0, 217, 0, 0, 122, 0, 123, 124, 0, 0,
	218, 0, 125, 0, 0, 126, 0, 0, 127, 0,
	128, 129, 130, 131, 132, 0, 133, 134, 137, 135,
	0, 136, 0, 219, 138, 220, 139, 140, 0, 0,
	0, 0, 0, 141, 221, 0, 142, 0, 222, 143,
	144, 0, 223, 145, 224, 146, 0, 147, 148, 149,
	225, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	0, 157, 158, 226, 159, 0, 160, 161, 162, 0,
	227, 163, 164, 0, 165, 166, 0, 167, 228, 229,
	168, 0, 169, 170, 172, 230, 171, 231, 0, 173,
	0, 174, 175, 0, 232, 233, 234, 0, 0, 176,
	235, 236, 0, 177, 178, 179, 180, 0, 0, 181,
	182, 183, 0, 0, 184, 185, 186, 237, 238, 83,
	187, 0, 0, 0, 0, 188, 189, 190, 191, 0,
	0, 86, 87, 0, 88, 0, 0, 0, 0, 0,
	0, 0, 0, 89, 90, 192, 193, 194, 195, 91,
	196, 197, 0, 92, 198, 199, 93, 0, 0, 200,
	201, 202, 0, 203, 0, 0, 0, 94, 95, 96,
	0, 97, 0, 98, 0, 0, 99, 100, 0, 0,
	0, 0, 0, 0, 101, 102, 103, 104, 204, 105,
	205, 206, 0, 106, 0, 107, 0, 0, 0, 108,
	109, 0, 110, 0, 0, 0, 207, 111, 112, 208,
	0, 0, 0, 113, 114, 209, 0, 115, 0, 116,
	0, 0, 0, 0, 117, 210, 0, 211, 0, 118,
	119, 1157, 213, 0, 0, 120, 0, 0, 121, 214,
	215, 216, 0, 217, 0, 0, 122, 0, 123, 124,
	0, 0, 218, 0, 125, 0, 0, 126, 0, 0,
	127, 0, 128, 129, 130, 131, 132, 0, 133, 134,
	137, 135, 0, 136, 0, 219, 138, 220, 139, 140,
	0, 0, 0, 0, 0, 141, 221, 0, 142, 0,
	222, 143, 144, 0, 223, 145, 224, 146, 0, 147,
	148, 149, 225, 150, 151, 0, 153, 154, 152, 155,
	0, 156, 0, 157, 158, 226, 159, 0, 160, 161,
	162, 0, 227, 163, 164, 0, 165, 166, 0, 167,
	228, 229, 168, 0, 169, 170, 172, 230, 171, 231,
	0, 173, 0, 174, 175, 0, 232, 233, 234, 0,
	0, 176, 235, 236, 0, 177, 178, 179, 180, 0,
	0, 181, 182, 183, 0, 0, 184, 185, 186, 237,
	238, 83, 187, 0, 0, 0, 0, 188, 189, 190,
	191, 0, 0, 86, 87, 0, 88, 0, 0, 0,
	0, 0, 0, 0, 0, 89, 90, 192, 193, 194,
	195, 91, 196, 197, 0, 92, 198, 199, 93, 0,
	0, 200, 201, 202, 0, 203, 0, 0, 0, 94,
	95, 96, 0, 97, 0, 98, 0, 0, 99, 100,
	0, 0, 0, 0, 0, 0, 101, 102, 103, 104,
	204, 105, 205, 206, 0, 106, 0, 107, 0, 0,
	0, 108, 109, 0, 110, 0, 0, 0, 207, 111,
	112, 208, 0, 0, 0, 113, 114, 209, 0, 115,
	0, 116, 0, 0, 0, 0, 117, 210, 0, 211,
	0, 118, 119, 1155, 213, 0, 0, 120, 0, 0,
	121, 214, 215, 216, 0, 217, 0, 0, 122, 0,
	123, 124, 0, 0, 218, 0, 125, 0, 0, 126,
	0, 0, 127, 0, 128, 129, 130, 131, 132, 0,
	133, 134, 137, 135, 0, 136, 0, 219, 138, 220,
	139, 140, 0, 0, 0, 0, 0, 141, 221, 0,
	142, 0, 222, 143, 144, 0, 223, 145, 224, 146,
	0, 147, 148, 149, 225, 150, 151, 0, 153, 154,
	152, 155, 0, 156, 0, 157, 158, 226, 159, 0,
	160, 161, 162, 0, 227, 163, 164, 0, 165, 166,
	0, 167, 228, 229, 168, 0, 169, 170, 172, 230,
	171, 231, 0, 173, 0, 174, 175, 0, 232, 233,
	234, 0, 0, 176, 235, 236, 0, 177, 178, 179,
	180, 0, 0, 181, 182, 183, 0, 0, 184, 185,
	186, 237, 238, 83, 187, 0, 0, 0, 0, 188,
	189, 190, 191, 0, 0, 86, 87, 0, 88, 0,
	0, 0, 0, 0, 0, 0, 0, 89, 90, 192,
	193, 194, 195, 91, 196, 197, 0, 92, 198, 199,
	93, 0, 0, 200, 201, 202, 0, 203, 0, 0,
	0, 94, 95, 96, 0, 97, 0, 98, 0, 0,
	99, 100, 0, 0, 0, 0, 0, 0, 101, 102,
	103, 104, 204, 105, 205, 206, 0, 106, 0, 107,
	0, 0, 0, 108, 109, 0, 110, 0, 0, 0,
	207, 111, 112, 208, 0, 0, 0, 113, 114, 209,
	0, 115, 0, 116, 0, 0, 0, 0, 117, 210,
	0, 211, 0, 118, 119, 1146, 213, 0, 0, 120,
	0, 0, 121, 214, 215, 216, 0, 217, 0, 0,
	122, 0, 123, 124, 0, 0, 218, 0, 125, 0,
	0, 126, 0, 0, 127, 0, 128, 129, 130, 131,
	132, 0, 133, 134, 137, 135, 0, 136, 0, 219,
	138, 220, 139, 140, 0, 0, 0, 0, 0, 141,
	221, 0, 142, 0, 222, 143, 144, 0, 223, 145,
	224, 146, 0, 147, 148, 149, 225, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 0, 157, 158, 226,
	159, 0, 160, 161, 162, 0, 227, 163, 164, 0,
	165, 166, 0, 167, 228, 229, 168, 0, 169, 170,
	172, 230, 171, 231, 0, 173, 0, 174, 175, 0,
	232, 233, 234, 0, 0, 176, 235, 236, 0, 177,
	178, 179, 180, 0, 0, 181, 182, 183, 0, 0,
	184, 185, 186, 237, 238, 83, 187, 0, 0, 0,
	0, 188, 189, 190, 191, 0, 0, 86, 87, 0,
	88, 0, 0, 0, 0, 0, 0, 0, 0, 89,
	90, 192, 193, 194, 195, 91, 196, 197, 0, 92,
	198, 199, 93, 0, 0, 200, 201, 202, 0, 203,
	0, 0, 0, 94, 95, 96, 0, 97, 0, 98,
	0, 0, 99, 100, 0, 0, 0, 0, 0, 0,
	101, 102, 103, 104, 204, 105, 205, 206, 0, 106,
	0, 107, 0, 0, 0, 108, 109, 0, 110, 0,
	0, 0, 207, 111, 112, 208, 0, 0, 0, 113,
	114, 209, 0, 115, 0, 116, 0, 0, 0, 0,
	117, 210, 0, 211, 0, 118, 119, 772, 213, 0,
	0, 120, 0, 0, 121, 214, 215, 216, 0, 217,
	0, 0, 122, 0, 123, 124, 0, 0, 218, 0,
	125, 0, 0, 126, 0, 0, 127, 0, 128, 129,
	130, 131, 132, 0, 133, 134, 137, 135, 0, 136,
	0, 219, 138, 220, 139, 140, 0, 0, 0, 0,
	0, 141, 221, 0, 142, 0, 222, 143, 144, 0,
	223, 145, 224, 146, 0, 147, 148, 149, 225, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 0, 157,
	158, 226, 159, 0, 160, 161, 162, 0, 227, 163,
	164, 0, 165, 166, 0, 167, 228, 229, 168, 0,
	169, 170, 172, 230, 171, 231, 0, 173, 0, 174,
	175, 0, 232, 233, 234, 0, 0, 176, 235, 236,
	0, 177, 178, 179, 180, 0, 0, 181, 182, 183,
	0, 0, 184, 185, 186, 237, 238, 83, 187, 0,
	0, 0, 0, 188, 189, 190, 191, 0, 0, 86,
	87, 0, 88, 0, 0, 0, 0, 0, 0, 0,
	0, 89, 90, 192, 193, 194, 195, 91, 196, 197,
	0, 92, 198, 199, 93, 0, 0, 200, 201, 202,
	0, 203, 0, 0, 0, 94, 95, 96, 0, 97,
	0, 98, 0, 0, 99, 100, 0, 0, 0, 0,
	0, 0, 101, 102, 103, 104, 204, 105, 205, 206,
	0, 106, 0, 107, 0, 0, 0, 108, 109, 0,
	110, 0, 0, 0, 207, 111, 112, 208, 0, 0,
	0, 113, 114, 209, 0, 115, 0, 116, 0, 0,
	0, 0, 117, 210, 0, 211, 0, 118, 119, 212,
	213, 0, 0, 120, 0, 0, 121, 214, 215, 216,
	0, 217, 0, 0, 122, 0, 123, 124, 0, 0,
	218, 0, 125, 0, 0, 126, 0, 0, 127, 0,
	128, 129, 130, 131, 132, 0, 133, 134, 137, 135,
	0, 136, 0, 219, 138, 220, 139, 140, 0, 0,
	0, 0, 0, 141, 221, 0, 142, 0, 222, 143,
	144, 0, 223, 145, 224, 146, 0, 147, 148, 149,
	225, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	0, 157, 158, 226, 159, 0, 256, 161, 162, 0,
	227, 163, 164, 0, 165, 166, 0, 167, 228, 229,
	168, 0, 169, 170, 172, 230, 171, 231, 0, 173,
	0, 174, 175, 0, 232, 233, 234, 0, 0, 176,
	235, 236, 0, 177, 178, 179, 180, 0, 0, 181,
	182, 183, 0, 0, 184, 185, 186, 237, 238, 83,
	187, 0, 0, 0, 0, 188, 189, 190, 191, 0,
	0, 86, 87, 0, 88, 0, 0, 0, 0, 0,
	565, 0, 0, 89, 90, 192, 193, 194, 195, 91,
	196, 197, 0, 92, 198, 199, 93, 0, 0, 200,
	201, 202, 0, 203, 0, 0, 0, 94, 95, 96,
	0, 97, 0, 98, 0, 0, 99, 100, 0, 0,
	0, 0, 0, 0, 101, 102, 103, 104, 204, 105,
	205, 206, 0, 106, 0, 107, 0, 0, 0, 108,
	109, 0, 110, 0, 0, 0, 207, 111, 112, 208,
	0, 0, 0, 113, 114, 209, 0, 115, 0, 116,
	0, 0, 0, 0, 117, 210, 0, 211, 0, 118,
	119, 212, 213, 0, 0, 120, 0, 0, 121, 214,
	215, 216, 0, 217, 0, 0, 122, 0, 123, 124,
	0, 0, 218, 0, 125, 0, 0, 126, 0, 0,
	127, 0, 128, 129, 130, 131, 132, 0, 133, 134,
	137, 135, 0, 136, 0, 219, 138, 220, 139, 140,
	0, 0, 0, 0, 0, 141, 221, 0, 142, 0,
	222, 143, 144, 0, 223, 145, 224, 146, 0, 147,
	148, 149, 225, 150, 151, 0, 153, 154, 152, 155,
	0, 156, 0, 157, 158, 226, 159, 0, 160, 161,
	162, 0, 227, 163, 164, 0, 0, 166, 0, 167,
	228, 229, 168, 0, 169, 170, 172, 230, 171, 231,
	0, 173, 0, 174, 175, 0, 232, 233, 234, 0,
	0, 176, 235, 236, 0, 177, 178, 179, 180, 0,
	0, 181, 182, 183, 0, 0, 184, 185, 186, 237,
	238, 83, 187, 0, 0, 0, 0, 188, 189, 190,
	191, 0, 0, 86, 87, 0, 88, 0, 0, 0,
	0, 0, 0, 0, 0, 89, 90, 192, 193, 194,
	195, 91, 196, 197, 0, 92, 198, 199, 93, 0,
	0, 200, 201, 202, 0, 203, 0, 0, 0, 94,
	95, 96, 0, 97, 0, 98, 0, 0, 99, 100,
	0, 0, 0, 0, 0, 0, 101, 102, 103, 104,
	204, 105, 205, 206, 0, 106, 0, 107, 0, 0,
	0, 108, 109, 0, 110, 0, 0, 0, 207, 111,
	112, 208, 0, 0, 0, 113, 114, 209, 0, 115,
	0, 116, 0, 0, 0, 0, 117, 210, 0, 211,
	0, 118, 119, 420, 213, 0, 0, 120, 0, 0,
	121, 214, 215, 216, 0, 217, 0, 0, 122, 0,
	123, 124, 0, 0, 218, 0, 125, 0, 0, 126,
	0, 0, 127, 0, 128, 129, 130, 131, 132, 0,
	133, 134, 137, 135, 0, 136, 0, 219, 138, 220,
	139, 140, 0, 0, 0, 0, 0, 141, 221, 0,
	142, 0, 222, 143, 144, 0, 223, 145, 224, 146,
	0, 147, 148, 149, 225, 150, 151, 0, 153, 154,
	152, 155, 0, 156, 0, 157, 158, 226, 159, 0,
	160, 161, 162, 0, 227, 163, 164, 0, 165, 166,
	0, 167, 228, 229, 168, 0, 169, 170, 172, 230,
	171, 231, 0, 173, 0, 174, 175, 0, 232, 233,
	234, 0, 0, 176, 235, 236, 0, 177, 178, 179,
	180, 0, 0, 181, 182, 183, 0, 0, 184, 185,
	186, 237, 238, 83, 187, 0, 0, 0, 0, 188,
	189, 190, 191, 0, 0, 86, 87, 0, 88, 0,
	0, 0, 0, 0, 0, 0, 0, 89, 90, 192,
	193, 194, 195, 91, 196, 197, 0, 92, 198, 199,
	93, 0, 0, 200, 201, 202, 0, 203, 0, 0,
	0, 94, 95, 96, 0, 97, 0, 98, 0, 0,
	99, 100, 0, 0, 0, 0, 0, 0, 101, 102,
	103, 104, 204, 105, 205, 206, 0, 106, 0, 107,
	0, 0, 0, 108, 109, 0, 110, 0, 0, 0,
	207, 111, 112, 208, 0, 0, 0, 113, 114, 209,
	0, 115, 0, 116, 0, 0, 0, 0, 117, 210,
	0, 211, 0, 118, 119, 417, 213, 0, 0, 120,
	0, 0, 121, 214, 215, 216, 0, 217, 0, 0,
	122, 0, 123, 124, 0, 0, 218, 0, 125, 0,
	0, 126, 0, 0, 127, 0, 128, 129, 130, 131,
	132, 0, 133, 134, 137, 135, 0, 136, 0, 219,
	138, 220, 139, 140, 0, 0, 0, 0, 0, 141,
	221, 0, 142, 0, 222, 143, 144, 0, 223, 145,
	224, 146, 0, 147, 148, 149, 225, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 0, 157, 158, 226,
	159, 0, 160, 161, 162, 0, 227, 163, 164, 0,
	165, 166, 0, 167, 228, 229, 168, 0, 169, 170,
	172, 230, 171, 231, 0, 173, 0, 174, 175, 0,
	232, 233, 234, 0, 0, 176, 235, 236, 0, 177,
	178, 179, 180, 0, 0, 181, 182, 183, 0, 0,
	184, 185, 186, 237, 238, 83, 187, 0, 0, 0,
	0, 188, 189, 190, 191, 0, 0, 86, 87, 0,
	88, 0, 0, 0, 0, 0, 0, 0, 0, 89,
	90, 192, 193, 194, 195, 91, 196, 197, 0, 92,
	198, 199, 93, 0, 0, 200, 201, 379, 0, 203,
	0, 0, 0, 94, 95, 96, 0, 97, 0, 98,
	0, 0, 99, 100, 0, 0, 0, 0, 0, 0,
	101, 102, 103, 104, 204, 105, 205, 206, 0, 106,
	0, 107, 0, 0, 0, 108, 109, 0, 110, 0,
	0, 0, 207, 111, 112, 208, 0, 0, 0, 113,
	114, 209, 0, 115, 0, 116, 0, 0, 0, 0,
	117, 210, 0, 211, 0, 118, 119, 212, 213, 0,
	0, 120, 0, 0, 121, 214, 215, 216, 0, 217,
	0, 0, 122, 0, 123, 124, 0, 0, 218, 0,
	125, 0, 0, 126, 0, 0, 127, 0, 128, 129,
	130, 131, 267, 0, 133, 134, 137, 135, 0, 136,
	0, 219, 138, 220, 139, 140, 0, 0, 0, 0,
	0, 141, 221, 0, 142, 0, 222, 143, 144, 0,
	223, 145, 224, 146, 0, 147, 148, 149, 225, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 0, 157,
	158, 226, 159, 0, 160, 161, 162, 0, 227, 163,
	164, 0, 165, 166, 0, 167, 228, 229, 168, 0,
	169, 170, 172, 230, 171, 231, 0, 173, 0, 174,
	175, 0, 266, 233, 234, 0, 0, 262, 235, 236,
	0, 177, 178, 179, 180, 0, 0, 181, 182, 183,
	0, 0, 184, 185, 186, 237, 238, 83, 187, 0,
	0, 0, 0, 188, 189, 190, 191, 0, 0, 86,
	87, 0, 88, 0, 0, 0, 0, 0, 0, 0,
	0, 89, 90, 192, 193, 194, 195, 91, 196, 197,
	0, 92, 198, 199, 93, 0, 0, 200, 201, 202,
	0, 203, 0, 0, 0, 94, 95, 96, 0, 97,
	0, 98, 0, 0, 99, 100, 0, 0, 0, 0,
	0, 0, 101, 102, 103, 104, 204, 105, 205, 206,
	0, 106, 0, 107, 0, 0, 0, 108, 109, 0,
	110, 0, 0, 0, 207, 111, 112, 208, 0, 0,
	0, 113, 114, 209, 0, 115, 0, 116, 0, 0,
	0, 0, 117, 210, 0, 211, 0, 118, 119, 212,
	213, 0, 0, 120, 0, 0, 121, 214, 215, 216,
	0, 217, 0, 0, 122, 0, 123, 124, 0, 0,
	218, 0, 125, 0, 0, 126, 0, 0, 127, 0,
	128, 129, 130, 131, 267, 0, 133, 134, 137, 135,
	0, 136, 0, 219, 138, 220, 139, 140, 0, 0,
	0, 0, 0, 141, 221, 0, 142, 0, 222, 143,
	144, 0, 223, 145, 224, 146, 0, 147, 148, 149,
	225, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	0, 157, 158, 226, 159, 0, 160, 161, 162, 0,
	227, 163, 164, 0, 165, 166, 0, 167, 228, 229,
	168, 0, 169, 170, 172, 230, 171, 231, 0, 173,
	0, 174, 175, 0, 266, 233, 234, 0, 0, 262,
	235, 236, 0, 177, 178, 179, 180, 0, 0, 181,
	182, 183, 0, 0, 184, 185, 186, 237, 238, 83,
	187, 0, 0, 0, 0, 188, 189, 190, 191, 0,
	0, 86, 87, 0, 88, 0, 0, 0, 0, 0,
	0, 0, 0, 89, 90, 192, 193, 194, 195, 91,
	196, 197, 0, 92, 198, 199, 93, 0, 0, 200,
	201, 202, 0, 203, 0, 0, 0, 94, 95, 96,
	0, 97, 0, 98, 0, 0, 99, 100, 0, 0,
	0, 0, 0, 0, 101, 102, 103, 104, 204, 105,
	205, 206, 0, 106, 0, 107, 0, 0, 0, 108,
	109, 0, 110, 0, 0, 0, 207, 111, 112, 208,
	0, 0, 0, 113, 114, 209, 0, 115, 0, 116,
	0, 0, 0, 0, 117, 210, 0, 211, 0, 118,
	119, 344, 213, 0, 0, 120, 0, 0, 121, 214,
	215, 216, 0, 217, 0, 0, 122, 0, 123, 124,
	0, 0, 218, 0, 125, 0, 0, 126, 0, 0,
	127, 0, 128, 129, 130, 131, 132, 0, 133, 134,
	137, 135, 0, 136, 0, 219, 138, 220, 139, 140,
	0, 0, 0, 0, 0, 141, 221, 0, 142, 0,
	222, 143, 144, 0, 223, 145, 224, 146, 0, 147,
	148, 149, 225, 150, 151, 0, 153, 154, 152, 155,
	0, 156, 0, 157, 158, 226, 159, 0, 160, 161,
	162, 0, 227, 163, 164, 0, 165, 166, 0, 167,
	228, 229, 168, 0, 169, 170, 172, 230, 171, 231,
	0, 173, 0, 174, 175, 0, 232, 233, 234, 0,
	0, 176, 235, 236, 0, 177, 178, 179, 180, 0,
	0, 181, 182, 183, 0, 0, 184, 185, 186, 237,
	238, 83, 187, 0, 0, 0, 0, 188, 189, 190,
	191, 0, 0, 86, 87, 0, 88, 0, 0, 0,
	0, 0, 0, 0, 0, 89, 90, 192, 193, 194,
	195, 91, 196, 197, 0, 92, 198, 199, 93, 0,
	0, 200, 201, 202, 0, 203, 0, 0, 0, 94,
	95, 96, 0, 97, 0, 98, 0, 0, 99, 100,
	0, 0, 0, 0, 0, 0, 101, 102, 103, 104,
	204, 105, 205, 206, 0, 106, 0, 107, 0, 0,
	0, 108, 109, 0, 110, 0, 0, 0, 207, 111,
	112, 208, 0, 0, 0, 113, 114, 209, 0, 115,
	0, 116, 0, 0, 0, 0, 117, 210, 0, 211,
	0, 118, 119, 341, 213, 0, 0, 120, 0, 0,
	121, 214, 215, 216, 0, 217, 0, 0, 122, 0,
	123, 124, 0, 0, 218, 0, 125, 0, 0, 126,
	0, 0, 127, 0, 128, 129, 130, 131, 132, 0,
	133, 134, 137, 135, 0, 136, 0, 219, 138, 220,
	139, 140, 0, 0, 0, 0, 0, 141, 221, 0,
	142, 0, 222, 143, 144, 0, 223, 145, 224, 146,
	0, 147, 148, 149, 225, 150, 151, 0, 153, 154,
	152, 155, 0, 156, 0, 157, 158, 226, 159, 0,
	160, 161, 162, 0, 227, 163, 164, 0, 165, 166,
	0, 167, 228, 229, 168, 0, 169, 170, 172, 230,
	171, 231, 0, 173, 0, 174, 175, 0, 232, 233,
	234, 0, 0, 176, 235, 236, 0, 177, 178, 179,
	180, 0, 0, 181, 182, 183, 0, 0, 184, 185,
	186, 237, 238, 83, 187, 0, 0, 0, 0, 188,
	189, 190, 191, 0, 0, 86, 87, 0, 88, 0,
	0, 0, 0, 0, 0, 0, 0, 89, 90, 192,
	193, 194, 195, 91, 196, 197, 0, 92, 198, 199,
	93, 0, 0, 200, 201, 202, 0, 203, 0, 0,
	0, 94, 95, 96, 0, 97, 0, 98, 0, 0,
	99, 100, 0, 0, 0, 0, 0, 0, 101, 102,
	103, 104, 204, 105, 205, 206, 0, 106, 0, 107,
	0, 0, 0, 108, 109, 0, 110, 0, 0, 0,
	207, 111, 112, 208, 0, 0, 0, 113, 114, 209,
	0, 115, 0, 116, 0, 0, 0, 0, 117, 210,
	0, 211, 0, 118, 119, 339, 213, 0, 0, 120,
	0, 0, 121, 214, 215, 216, 0, 217, 0, 0,
	122, 0, 123, 124, 0, 0, 218, 0, 125, 0,
	0, 126, 0, 0, 127, 0, 128, 129, 130, 131,
	132, 0, 133, 134, 137, 135, 0, 136, 0, 219,
	138, 220, 139, 140, 0, 0, 0, 0, 0, 141,
	221, 0, 142, 0, 222, 143, 144, 0, 223, 145,
	224, 146, 0, 147, 148, 149, 225, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 0, 157, 158, 226,
	159, 0, 160, 161, 162, 0, 227, 163, 164, 0,
	165, 166, 0, 167, 228, 229, 168, 0, 169, 170,
	172, 230, 171, 231, 0, 173, 0, 174, 175, 0,
	232, 233, 234, 0, 0, 176, 235, 236, 0, 177,
	178, 179, 180, 0, 0, 181, 182, 183, 0, 0,
	184, 185, 186, 237, 238, 83, 187, 0, 0, 0,
	0, 188, 189, 190, 191, 0, 0, 86, 87, 0,
	88, 0, 0, 0, 0, 0, 0, 0, 0, 89,
	90, 192, 193, 194, 195, 91, 196, 197, 0, 92,
	198, 199, 93, 0, 0, 200, 201, 202, 0, 203,
	0, 0, 0, 94, 95, 96, 0, 97, 0, 98,
	0, 0, 99, 100, 0, 0, 0, 0, 0, 0,
	101, 102, 103, 104, 204, 105, 205, 206, 0, 106,
	0, 107, 0, 0, 0, 108, 109, 0, 110, 0,
	0, 0, 207, 111, 112, 208, 0, 0, 0, 113,
	114, 209, 0, 115, 0, 116, 0, 0, 0, 0,
	117, 210, 0, 211, 0, 118, 119, 331, 213, 0,
	0, 120, 0, 0, 121, 214, 215, 216, 0, 217,
	0, 0, 122, 0, 123, 124, 0, 0, 218, 0,
	125, 0, 0, 126, 0, 0, 127, 0, 128, 129,
	130, 131, 132, 0, 133, 134, 137, 135, 0, 136,
	0, 219, 138, 220, 139, 140, 0, 0, 0, 0,
	0, 141, 221, 0, 142, 0, 222, 143, 144, 0,
	223, 145, 224, 146, 0, 147, 148, 149, 225, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 0, 157,
	158, 226, 159, 0, 160, 161, 162, 0, 227, 163,
	164, 0, 165, 166, 0, 167, 228, 229, 168, 0,
	169, 170, 172, 230, 171, 231, 0, 173, 0, 174,
	175, 0, 232, 233, 234, 0, 0, 176, 235, 236,
	0, 177, 178, 179, 180, 0, 0, 181, 182, 183,
	0, 0, 184, 185, 186, 237, 238, 83, 187, 0,
	0, 0, 0, 188, 189, 190, 191, 0, 0, 86,
	87, 0, 88, 0, 0, 0, 0, 0, 0, 0,
	0, 89, 90, 192, 193, 194, 195, 91, 196, 197,
	0, 92, 198, 199, 93, 0, 0, 200, 201, 202,
	0, 203, 0, 0, 0, 94, 95, 96, 0, 97,
	0, 98, 0, 0, 99, 100, 0, 0, 0, 0,
	0, 0, 101, 102, 103, 104, 204, 105, 205, 206,
	0, 106, 0, 107, 0, 0, 0, 108, 109, 0,
	110, 0, 0, 0, 207, 111, 112, 208, 0, 0,
	0, 113, 114, 209, 0, 115, 0, 116, 0, 0,
	0, 0, 117, 210, 0, 211, 0, 118, 119, 212,
	213, 0, 0, 120, 0, 0, 121, 214, 215, 216,
	0, 217, 0, 0, 122, 0, 123, 124, 0, 0,
	218, 0, 125, 0, 0, 126, 0, 0, 127, 0,
	128, 129, 130, 131, 132, 0, 133, 134, 137, 135,
	0, 136, 0, 219, 138, 220, 139, 140, 0, 0,
	0, 0, 0, 141, 221, 0, 142, 0, 222, 143,
	144, 0, 223, 145, 224, 146, 0, 147, 148, 149,
	225, 311, 151, 0, 153, 154, 152, 155, 0, 156,
	0, 157, 158, 226, 159, 0, 160, 161, 162, 0,
	227, 163, 164, 0, 165, 166, 0, 167, 228, 229,
	168, 0, 169, 170, 172, 230, 171, 231, 0, 173,
	0, 174, 175, 0, 232, 233, 234, 0, 0, 176,
	235, 236, 0, 177, 178, 179, 180, 0, 0, 181,
	182, 183, 0, 0, 184, 185, 186, 237, 238, 83,
	187, 0, 0, 0, 0, 188, 189, 190, 191, 0,
	0, 86, 87, 0, 88, 0, 0, 0, 0, 0,
	0, 0, 0, 89, 90, 192, 193, 194, 195, 91,
	196, 197, 0, 92, 198, 199, 93, 0, 0, 200,
	201, 202, 0, 203, 0, 0, 0, 94, 95, 96,
	0, 97, 0, 98, 0, 0, 99, 100, 0, 0,
	0, 0, 0, 0, 101, 102, 103, 104, 204, 105,
	205, 206, 0, 106, 0, 107, 0, 0, 0, 108,
	109, 0, 110, 0, 0, 0, 207, 111, 112, 208,
	0, 0, 0, 113, 114, 209, 0, 115, 0, 116,
	0, 0, 0, 0, 117, 210, 0, 211, 0, 118,
	119, 212, 213, 0, 0, 120, 0, 0, 121, 214,
	215, 216, 0, 217, 0, 0, 122, 0, 123, 124,
	0, 0, 218, 0, 125, 0, 0, 259, 0, 0,
	127, 0, 128, 129, 130, 131, 267, 0, 133, 134,
	137, 135, 0, 136, 0, 219, 138, 220, 139, 140,
	0, 0, 0, 0, 0, 141, 221, 0, 142, 0,
	222, 143, 144, 0, 223, 145, 224, 146, 0, 147,
	148, 149, 225, 150, 151, 0, 153, 154, 152, 155,
	0, 156, 0, 157, 158, 261, 159, 0, 160, 161,
	162, 0, 227, 163, 260, 0, 165, 166, 0, 167,
	228, 229, 168, 0, 169, 170, 172, 230, 171, 231,
	0, 173, 0, 174, 175, 0, 266, 233, 234, 0,
	0, 262, 235, 236, 0, 177, 178, 179, 180, 0,
	0, 181, 182, 183, 0, 0, 184, 185, 186, 237,
	238, 83, 187, 0, 0, 0, 0, 188, 189, 190,
	191, 0, 0, 86, 87, 0, 88, 0, 0, 0,
	0, 0, 0, 0, 0, 89, 90, 192, 193, 194,
	195, 91, 196, 197, 0, 92, 198, 199, 93, 0,
	0, 200, 201, 202, 0, 203, 0, 0, 0, 94,
	95, 96, 0, 97, 0, 98, 0, 0, 99, 100,
	0, 0, 0, 0, 0, 0, 101, 102, 103, 104,
	204, 105, 205, 206, 0, 106, 0, 107, 0, 0,
	0, 108, 109, 0, 110, 0, 0, 0, 207, 111,
	112, 208, 0, 0, 0, 113, 114, 209, 0, 115,
	0, 116, 0, 0, 0, 0, 117, 210, 0, 211,
	0, 118, 119, 212, 213, 0, 0, 120, 0, 0,
	121, 214, 215, 216, 0, 217, 0, 0, 122, 0,
	123, 124, 0, 0, 218, 0, 125, 0, 0, 126,
	0, 0, 127, 0, 128, 129, 130, 131, 132, 0,
	133, 134, 137, 135, 0, 136, 0, 219, 138, 220,
	139, 140, 0, 0, 0, 0, 0, 141, 221, 0,
	142, 0, 222, 143, 0, 0, 223, 145, 224, 146,
	0, 147, 0, 149, 225, 150, 151, 0, 153, 154,
	152, 155, 0, 156, 0, 157, 158, 226, 0, 0,
	160, 161, 162, 0, 227, 163, 164, 0, 165, 166,
	0, 167, 228, 229, 168, 0, 169, 170, 172, 230,
	171, 231, 0, 173, 0, 174, 175, 0, 232, 233,
	234, 0, 0, 176, 235, 236, 0, 177, 178, 179,
	180, 0, 0, 181, 182, 183, 0, 0, 184, 185,
	186, 237, 238, 798, 187, 817, 818, 819, 0, 188,
	189, 190, 191, 0, 0, 820, 0, 0, 0, 0,
	0, 800, 0, 826, 0, 0, 798, 0, 817, 818,
	819, 0, 0, 0, 0, 0, 0, 0, 820, 0,
	0, 0, 799, 0, 800, 0, 826, 0, 814, 0,
	0, 0, 798, 0, 817, 818, 819, 0, 0, 0,
	0, 0, 0, 0, 820, 799, 0, 0, 0, 0,
	800, 814, 826, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 799, 0, 0, 805, 0, 798, 814, 817, 818,
	819, 0, 0, 0, 0, 0, 0, 0, 820, 0,
	0, 827, 0, 0, 800, 0, 826, 805, 0, 0,
	0, 0, 0, 825, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 822, 827, 799, 0, 0, 0, 815,
	0, 814, 0, 805, 0, 0, 825, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 822, 0, 0, 0,
	827, 821, 815, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 825, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 822, 0, 821, 0, 0, 805, 815, 0,
	0, 0, 0, 0, 0, 816, 0, 0, 0, 0,
	0, 0, 0, 0, 827, 0, 824, 0, 0, 0,
	821, 0, 0, 0, 0, 0, 825, 0, 816, 0,
	0, 0, 0, 0, 0, 0, 822, 0, 0, 824,
	0, 0, 815, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 816, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 821, 824, 0, 0, 0, 823,
	0, 0, 811, 812, 813, 0, 810, 807, 808, 809,
	801, 802, 803, 804, 806, 0, 0, 0, 0, 0,
	0, 0, 823, 1325, 0, 811, 812, 813, 816, 810,
	807, 808, 809, 801, 802, 803, 804, 806, 0, 824,
	0, 0, 0, 0, 0, 0, 1324, 0, 823, 0,
	0, 811, 812, 813, 0, 810, 807, 808, 809, 801,
	802, 803, 804, 806, 0, 0, 0, 0, 0, 1710,
	798, 0, 817, 818, 819, 0, 0, 0, 0, 0,
	0, 0, 820, 0, 0, 0, 0, 0, 800, 0,
	826, 0, 823, 0, 0, 811, 812, 813, 0, 810,
	807, 808, 809, 801, 802, 803, 804, 806, 0, 799,
	0, 0, 0, 1709, 798, 814, 817, 818, 819, 0,
	0, 0, 0, 0, 0, 0, 820, 0, 0, 0,
	0, 0, 800, 0, 826, 0, 0, 0, 0, 0,
	798, 0, 817, 818, 819, 0, 0, 0, 0, 0,
	0, 0, 820, 799, 0, 0, 0, 0, 800, 814,
	826, 805, 0, 798, 0, 817, 818, 819, 0, 0,
	0, 0, 0, 0, 0, 820, 0, 0, 827, 799,
	0, 800, 0, 826, 0, 814, 0, 0, 0, 0,
	825, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	822, 0, 799, 0, 0, 805, 815, 0, 814, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 827, 0, 0, 0, 0, 0, 821, 0,
	0, 805, 0, 0, 825, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 822, 0, 0, 0, 827, 0,
	815, 0, 0, 0, 805, 0, 0, 0, 0, 0,
	825, 0, 816, 0, 0, 0, 0, 0, 0, 0,
	822, 827, 821, 824, 0, 0, 815, 0, 0, 0,
	0, 0, 0, 825, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 822, 0, 0, 0, 0, 821, 815,
	0, 0, 0, 0, 0, 0, 816, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 824, 0, 0,
	0, 821, 0, 0, 0, 0, 823, 0, 0, 811,
	812, 813, 816, 810, 807, 808, 809, 801, 802, 803,
	804, 806, 0, 824, 0, 0, 0, 1690, 0, 0,
	0, 0, 0, 0, 0, 816, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 824, 0, 0, 0,
	823, 0, 0, 811, 812, 813, 0, 810, 807, 808,
	809, 801, 802, 803, 804, 806, 0, 0, 0, 0,
	0, 1669, 0, 0, 0, 0, 823, 0, 0, 811,
	812, 813, 0, 810, 807, 808, 809, 801, 802, 803,
	804, 806, 0, 0, 0, 0, 0, 1664, 0, 823,
	0, 0, 811, 812, 813, 0, 810, 807, 808, 809,
	801, 802, 803, 804, 806, 798, 0, 817, 818, 819,
	1660, 0, 0, 0, 0, 0, 0, 820, 0, 0,
	0, 0, 0, 800, 0, 826, 0, 0, 798, 0,
	817, 818, 819, 0, 0, 0, 0, 0, 0, 0,
	820, 0, 0, 0, 799, 0, 800, 0, 826, 0,
	814, 0, 798, 0, 817, 818, 819, 0, 0, 0,
	0, 0, 0, 0, 820, 0, 0, 799, 0, 0,
	800, 0, 826, 814, 0, 798, 0, 817, 818, 819,
	0, 0, 0, 0, 0, 0, 0, 820, 0, 0,
	0, 799, 0, 800, 0, 826, 805, 814, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 827, 799, 0, 0, 0, 0, 805,
	814, 0, 0, 0, 0, 825, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 822, 827, 0, 0, 0,
	0, 815, 0, 805, 0, 0, 0, 0, 825, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 822, 0,
	827, 0, 0, 821, 815, 0, 805, 0, 0, 0,
	0, 0, 825, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 822, 827, 0, 0, 821, 0, 815, 0,
	0, 0, 0, 0, 0, 825, 0, 816, 0, 0,
	0, 0, 0, 0, 0, 822, 0, 0, 824, 0,
	821, 815, 0, 0, 0, 0, 0, 0, 0, 0,
	816, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 824, 0, 821, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 816, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 824, 0, 0, 0, 0,
	0, 823, 0, 0, 811, 812, 813, 816, 810, 807,
	808, 809, 801, 802, 803, 804, 806, 0, 824, 0,
	0, 0, 1598, 0, 823, 0, 0, 811, 812, 813,
	0, 810, 807, 808, 809, 801, 802, 803, 804, 806,
	0, 0, 0, 0, 0, 1597, 0, 0, 823, 0,
	0, 811, 812, 813, 0, 810, 807, 808, 809, 801,
	802, 803, 804, 806, 0, 0, 0, 0, 0, 1506,
	0, 823, 0, 0, 811, 812, 813, 0, 810, 807,
	808, 809, 801, 802, 803, 804, 806, 798, 0, 817,
	818, 819, 1442, 0, 0, 0, 0, 0, 0, 820,
	0, 0, 0, 0, 0, 800, 0, 826, 0, 0,
	798, 0, 817, 818, 819, 0, 0, 0, 0, 0,
	0, 0, 820, 0, 0, 0, 799, 0, 800, 0,
	826, 0, 814, 0, 798, 0, 817, 818, 819, 0,
	0, 0, 0, 0, 0, 0, 820, 0, 0, 799,
	0, 0, 800, 0, 826, 814, 0, 798, 0, 817,
	818, 819, 0, 0, 0, 0, 0, 0, 0, 820,
	0, 0, 0, 799, 0, 800, 0, 826, 805, 814,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 827, 799, 0, 0, 0,
	0, 805, 814, 0, 0, 0, 0, 825, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 822, 827, 0,
	0, 0, 0, 815, 0, 805, 0, 0, 0, 0,
	825, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	822, 0, 827, 0, 0, 821, 815, 0, 805, 1774,
	0, 0, 0, 0, 825, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 822, 827, 0, 0, 821, 0,
	815, 0, 0, 0, 0, 0, 0, 825, 0, 816,
	0, 0, 0, 0, 0, 0, 0, 822, 0, 0,
	824, 0, 821, 815, 0, 0, 0, 0, 0, 0,
	0, 0, 816, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 824, 0, 821, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 816, 1773, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 824, 0, 0,
	0, 0, 0, 823, 0, 0, 811, 812, 813, 816,
	810, 807, 808, 809, 801, 802, 803, 804, 806, 0,
	824, 0, 0, 0, 1426, 0, 823, 0, 0, 811,
	812, 813, 0, 810, 807, 808, 809, 801, 802, 803,
	804, 806, 0, 0, 0, 0, 0, 1067, 0, 0,
	823, 0, 0, 811, 812, 813, 0, 810, 807, 808,
	809, 801, 802, 803, 804, 806, 0, 0, 0, 1489,
	0, 0, 0, 823, 0, 0, 811, 812, 813, 0,
	810, 807, 808, 809, 801, 802, 803, 804, 806, 798,
	0, 817, 818, 819, 0, 0, 0, 0, 0, 0,
	0, 820, 0, 0, 0, 0, 0, 800, 0, 826,
	0, 0, 0, 798, 0, 817, 818, 819, 0, 0,
	0, 0, 0, 0, 0, 820, 0, 0, 799, 1007,
	829, 800, 0, 826, 814, 0, 798, 0, 817, 818,
	819, 0, 0, 0, 0, 0, 0, 0, 820, 0,
	0, 828, 799, 0, 800, 0, 826, 0, 814, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 799, 0, 0, 0, 0,
	805, 814, 1316, 0, 1008, 1315, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1285, 827, 1302, 1303,
	1304, 0, 0, 0, 805, 0, 0, 0, 0, 825,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 822,
	0, 827, 0, 0, 0, 815, 0, 805, 0, 0,
	0, 0, 0, 825, 0, 0, 0, 0, 0, 0,
	0, 1299, 0, 822, 827, 0, 0, 821, 0, 815,
	0, 0, 0, 0, 0, 0, 825, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 822, 0, 0, 0,
	0, 821, 815, 0, 0, 0, 0, 0, 0, 0,
	0, 816, 0, 0, 0, 0, 0, 1290, 0, 0,
	0, 0, 824, 0, 821, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 816, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 824, 0, 0, 0,
	0, 0, 798, 0, 817, 818, 819, 0, 816, 0,
	0, 0, 1300, 0, 820, 0, 0, 0, 0, 824,
	800, 0, 826, 0, 0, 823, 0, 0, 811, 812,
	813, 0, 810, 807, 808, 809, 801, 802, 803, 804,
	806, 799, 0, 0, 0, 0, 0, 814, 0, 823,
	0, 0, 811, 812, 813, 0, 810, 807, 808, 809,
	801, 802, 803, 804, 806, 0, 0, 0, 1301, 0,
	0, 0, 823, 0, 0, 811, 812, 813, 0, 810,
	807, 808, 809, 801, 802, 803, 804, 806, 798, 0,
	817, 818, 819, 805, 0, 0, 0, 0, 0, 0,
	820, 0, 0, 0, 0, 0, 800, 0, 826, 0,
	827, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 825, 0, 0, 0, 0, 799, 0, 0,
	0, 0, 822, 814, 0, 1296, 1297, 1298, 815, 1295,
	1292, 1293, 1294, 1286, 1287, 1288, 1289, 1291, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	821, 306, 0, 0, 0, 0, 0, 0, 798, 0,
	817, 818, 819, 0, 0, 0, 0, 0, 0, 805,
	820, 0, 0, 0, 0, 0, 800, 0, 826, 0,
	0, 0, 0, 0, 816, 0, 827, 0, 0, 0,
	0, 0, 0, 0, 0, 824, 0, 799, 825, 0,
	0, 0, 0, 814, 0, 0, 0, 0, 822, 0,
	0, 0, 0, 0, 815, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 821, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 823, 805,
	0, 811, 812, 813, 1322, 810, 807, 808, 809, 801,
	802, 803, 804, 806, 0, 0, 827, 0, 0, 0,
	816, 0, 798, 0, 817, 818, 819, 0, 825, 0,
	0, 824, 0, 0, 820, 0, 0, 1317, 822, 0,
	800, 0, 826, 0, 815, 0, 0, 0, 1436, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 799, 0, 0, 0, 0, 821, 814, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 823, 0, 0, 811, 812, 813,
	0, 810, 807, 808, 809, 801, 802, 803, 804, 806,
	816, 0, 798, 0, 817, 818, 819, 0, 0, 0,
	0, 824, 0, 805, 820, 0, 0, 0, 0, 0,
	800, 0, 826, 0, 0, 0, 0, 0, 0, 0,
	827, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 799, 825, 0, 0, 0, 0, 814, 0, 0,
	0, 0, 822, 0, 0, 0, 0, 0, 815, 0,
	0, 0, 0, 0, 823, 0, 0, 811, 812, 813,
	0, 810, 807, 808, 809, 801, 802, 803, 804, 806,
	821, 0, 0, 0, 0, 0, 0, 0, 798, 0,
	817, 818, 819, 805, 0, 0, 0, 0, 0, 0,
	820, 0, 0, 1278, 0, 0, 800, 0, 826, 0,
	827, 0, 0, 0, 816, 0, 0, 0, 0, 0,
	0, 0, 825, 0, 0, 824, 0, 799, 0, 0,
	0, 0, 822, 814, 0, 0, 0, 0, 815, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	821, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1283, 0, 0, 0, 0, 0, 0, 0, 823, 805,
	0, 811, 812, 813, 0, 810, 807, 808, 809, 801,
	802, 803, 804, 806, 816, 0, 827, 0, 0, 0,
	0, 0, 0, 0, 0, 824, 0, 0, 825, 798,
	0, 817, 818, 819, 0, 24, 0, 0, 822, 0,
	0, 820, 0, 0, 815, 42, 0, 800, 0, 826,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 821, 0, 799, 44,
	0, 0, 0, 0, 814, 49, 0, 0, 823, 0,
	0, 811, 812, 813, 0, 810, 807, 808, 809, 801,
	802, 803, 804, 806, 33, 0, 0, 0, 0, 0,
	816, 29, 0, 0, 45, 0, 0, 0, 32, 30,
	0, 824, 0, 0, 0, 798, 0, 817, 818, 819,
	805, 0, 0, 0, 34, 0, 0, 0, 0, 0,
	0, 0, 0, 800, 0, 826, 0, 827, 0, 0,
	0, 0, 0, 1285, 0, 1302, 1303, 1304, 0, 825,
	0, 0, 0, 0, 799, 1421, 0, 0, 0, 822,
	814, 0, 0, 0, 823, 815, 0, 811, 812, 813,
	0, 810, 807, 808, 809, 801, 802, 803, 804, 806,
	0, 1285, 0, 1302, 1303, 1304, 0, 821, 1299, 0,
	0, 0, 0, 1420, 0, 0, 0, 0, 31, 0,
	0, 0, 0, 0, 0, 0, 805, 0, 0, 47,
	0, 0, 35, 798, 46, 817, 818, 819, 0, 36,
	0, 816, 56, 827, 0, 0, 1299, 39, 41, 0,
	0, 800, 824, 826, 1290, 825, 43, 0, 0, 0,
	0, 0, 0, 58, 0, 822, 0, 0, 0, 0,
	0, 815, 799, 0, 0, 0, 48, 0, 814, 0,
	0, 0, 0, 1305, 0, 0, 0, 0, 0, 0,
	59, 0, 1290, 0, 0, 0, 0, 54, 0, 1300,
	0, 0, 0, 55, 0, 823, 0, 0, 811, 812,
	813, 0, 810, 807, 808, 809, 801, 802, 803, 804,
	806, 1305, 53, 0, 805, 0, 0, 816, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1300, 824, 0,
	0, 827, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1301, 0, 0, 0, 0,
	0, 0, 0, 822, 0, 0, 0, 0, 0, 815,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 823, 0, 1301, 811, 812, 813, 0, 810, 807,
	808, 809, 801, 802, 803, 804, 806, 0, 0, 0,
	0, 0, 0, 0, 1285, 0, 1302, 1303, 1304, 0,
	0, 0, 1296, 1297, 1298, 816, 1295, 1292, 1293, 1294,
	1286, 1287, 1288, 1289, 1291, 0, 824, 0, 599, 594,
	616, 588, 607, 606, 0, 0, 590, 589, 0, 0,
	0, 618, 617, 0, 0, 0, 0, 0, 0, 1299,
	1296, 1297, 1298, 0, 1295, 1292, 1293, 1294, 1286, 1287,
	1288, 1289, 1291, 0, 0, 0, 0, 0, 0, 0,
	612, 0, 604, 603, 0, 0, 0, 0, 0, 823,
	0, 602, 811, 812, 813, 0, 810, 807, 808, 809,
	801, 802, 803, 804, 806, 1290, 0, 601, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 595, 596, 597, 1305, 615, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1300, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 605,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 600, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1301, 0, 0, 0,
	0, 0, 0, 0, 592, 0, 0, 0, 0, 0,
	0, 0, 598, 593, 0, 0, 0, 0, 0, 620,
	0, 0, 0, 0, 0, 0, 591, 0, 0, 613,
	614, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 619, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1296, 1297, 1298, 0, 1295, 1292, 1293,
	1294, 1286, 1287, 1288, 1289, 1291,
}
var sqlPact = [...]int{

	21326, -1000, 3, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 800, -1000, -1000, -1000, 724, 736,
	244, 14623, 14623, 14371, 957, 957, 15883, -1000, -1000, 18655,
	-1000, 1920, 451, 454, 451, 451, 474, 15883, 528, 591,
	100, -1000, 587, 18, 18403, 14623, 1224, 10, 13363, 264,
	21326, 14119, 14623, 18151, 1069, 997, 996, 13363, 17899, 17647,
	17395, -1000, 9237, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 527, 277, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 271,
	-1000, 13867, -1000, 842, -1000, 9, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 841, -1000, 14623, -1000, -1000, 17143,
	16891, 270, 776, -1000, -1000, 518, 354, 1232, -1000, 20,
	-1000, -1000, 1068, -1000, 837, 1067, 1065, 1063, 1062, 348,
	798, -1000, 523, 776, -1000, 776, -1000, -1000, -1000, 503,
	15883, -1000, 13363, -1000, 16639, 1017, 16387, -1000, 587, -1000,
	-1000, -1000, 865, 1222, 1222, 1222, 1228, 124, 122, 100,
	-8, 14623, -1000, 267, -8, 6343, 6343, -1000, -1000, 264,
	-1000, 310, 11589, 25, -1000, 6871, -1000, 707, 1127, 662,
	652, 1126, -107, 13363, 14623, 14623, 556, 16135, -1000, 1124,
	117, 1123, -1000, 116, 1121, -1000, -23, -1000, -1000, -1000,
	-1000, -1000, -1000, 264, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 13615, 1286, 21697,
	-1000, 8186, -1000, -1000, 11851, 1027, 11851, -1000, -1000, 1256,
	-1000, 8186, -1000, 8, 4, 939, 1003, 9764, 9501, 1174,
	804, -1000, -1000, -1000, 14, 3965, 14623, 1077, 11851, 14623,
	14623, 14623, -1000, 14623, -1000, 938, -1000, 14623, -1000, -2,
	-6, -1000, 15883, -1000, 120, -1000, 256, 909, 15631, 1137,
	900, -1000, 865, -1000, 847, 935, 7397, 8186, 100, -1000,
	-1000, 100, 100, 8186, -1000, -1000, 14623, -8, 1240, 14623,
	89, -1000, 20576, -1000, -1000, 8186, 8186, 8186, 8186, 8186,
	780, -1000, -1000, -1000, 4757, -1000, -1000, 25, 252, 298,
	-1000, -1000, 245, 25, -1000, -1000, -1000, -1000, 242, 1369,
	360, -1000, -1000, -1000, 8186, 358, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1076, 240, 239, -1000, -1000,
	-1000, -1000, 238, 237, 236, 235, 233, 230, 229, 228,
	227, 226, 224, 223, 221, 756, -1000, 392, -1000, -1000,
	392, 392, -1000, 215, 215, 218, -1000, -1000, -1000, 215,
	-1000, -1000, -1000, 355, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 220, 89, -1000, -1000, -1000, 14623, 25, -1000, -1000,
	-1000, 8186, 3701, -28, -1000, 21329, -1000, -21, 717, -1000,
	12859, 1188, 1187, 1189, 13363, 501, 498, 14623, 14623, 364,
	99, 1237, 99, 11065, -1000, 14623, 14623, -1000, 14623, -1000,
	-1000, 14623, -1000, 14623, 14623, 222, 12355, 638, 1118, 18,
	-34, -1000, 1291, -1000, -1000, -1000, -1000, 78, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 218, 756, 215, 215, 215, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 355, -1000, -1000, 392, 392, 392, -1000,
	-1000, -35, 21329, 495, -16, 12103, 14623, -1000, 13, -1000,
	-1000, 1061, 429, -39, 732, 961, 897, -1000, -1000, -1000,
	-1000, -13, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1322, -1000, -1000, -1000, -1000, 1361, -13, -1000,
	-1000, -1000, -1000, -1000, 1368, -1000, -1000, -1000, 3965, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 14623, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 732, 961, -1000, -1000, 13363, 12607,
	1115, 835, 893, -1000, -1000, 325, 1110, -1000, -1000, -1000,
	-1000, 21329, -1000, 21329, 613, 976, -1000, 976, -14, -1000,
	20553, -1000, 214, -40, -1000, 364, 6343, 10803, 21697, 14623,
	516, 8186, 8186, 8186, 8186, 8186, 8186, 8186, 8186, 8186,
	8186, 8186, 8186, 8186, 8186, 8186, 8186, 8186, 8186, 8186,
	8186, 8186, 8186, 895, 494, 974, 754, 198, 3965, -1000,
	1318, 1318, 1318, 21415, 21415, 205, 2, 20210, -15, 25,
	-1000, -1000, 6080, 5815, 25, 4227, -1000, 725, 1360, 390,
	21329, 1046, 1032, 206, 106, 105, 8186, 679, 8186, 8449,
	8186, 8186, 5022, 8186, 8186, 8186, 8186, 8186, 8186, -1000,
	204, -1000, -1000, -1000, -1000, 1357, -1000, -1000, 1346, -1000,
	515, 511, 1345, 364, 104, -1000, 2528, -1000, -1000, 6871,
	-1000, 638, 14623, 14623, 14623, -1000, -1000, 883, 15379, -1000,
	21697, 14623, -1000, 202, 201, 968, 960, 14623, 14623, 15127,
	14875, 14623, 654, 14623, 14623, 642, -1000, 600, 8186, 635,
	-1000, 10279, 398, 14623, 647, 72, -1000, -1000, -1000, 324,
	14623, -1000, -1000, -1000, 117, -1000, 116, -1000, -1000, 13363,
	-1000, -1000, -1000, -1000, -1000, -1000, 21697, 304, 300, -1000,
	1339, 493, -1000, 491, 488, 486, -1000, 199, -1000, 8186,
	14623, 12103, -16, -17, -1000, -1000, 14623, 961, -1000, -1000,
	-1000, -1000, 607, -1000, 700, -1000, 10027, -1000, -1000, -1000,
	725, -1000, -22, -1000, -1000, -1000, -1000, 97, -19, -1000,
	-1000, -1000, -1000, -1000, 14623, 279, 14623, 14623, 14623, 1109,
	1367, 14623, -1000, -1000, -1000, 8186, -1000, -1000, -1000, 18,
	14623, -1000, 1028, -1000, -20, 989, -114, 13111, -1000, 3107,
	-1000, -1000, 342, 492, 492, 1241, 1241, 1241, 1241, 268,
	268, 877, 3144, 2786, 2786, 2786, 2800, 323, 323, 2786,
	2786, 2786, 21415, 1818, 2694, 8186, 482, 748, 198, 8186,
	-1000, 737, -1000, -1000, -1000, 1058, 196, 8449, 8449, -1000,
	-1000, -1000, 4757, -1000, -1000, 195, 8186, -1000, 8186, -41,
	-100, -1000, -1000, -44, -1000, -1000, -10, 8186, 8186, 8186,
	95, -1000, 94, 559, -1000, 8186, 783, 194, 192, 8186,
	-1000, -1000, 21208, 91, 1056, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 87, 21122, 86, 2170, -1000, 8449, 8449, 8449,
	4757, 189, 83, 20529, -94, 21042, 7134, 7134, 7134, 80,
	20928, 8186, -94, 19176, 19153, 2817, -50, -51, -52, 1332,
	-56, 74, 341, 340, 71, 1028, -1000, -1000, 8186, -1000,
	-1000, -1000, 481, 479, 1097, -1000, 881, -1000, 927, 8186,
	14623, 188, 187, 712, -1000, 1096, 793, 1094, 793, -1000,
	-21, 648, -1000, -1000, 478, -1000, 6343, 21329, -1000, 646,
	1191, -57, -1000, -1000, -1000, 6343, 364, 11065, 6871, -58,
	-1000, -1000, 638, -1000, 396, 1331, 70, 875, 678, 696,
	573, 1330, 21329, -22, -1000, -22, -1000, -1000, -1000, -1000,
	-1000, -1000, 14623, -1000, 12607, 186, 14623, 176, 175, 174,
	14623, -1000, 1137, -1000, 69, -1000, 1025, 1221, 10803, 992,
	991, 10803, 1038, 812, 812, 812, -1000, 13111, 3424, -1000,
	-1000, 14623, 173, 10541, 68, 989, 8186, 2694, 8186, 8449,
	8449, -1000, 2694, -1000, -1000, -1000, -1000, 1055, 172, 8186,
	21697, 21481, 21443, -62, 5550, -24, 20187, -1000, -1000, 298,
	-1000, 65, 6608, -1000, 20762, -3, -3, -1000, 1366, 1135,
	-1000, 8186, 20848, -1000, 11327, 376, 801, 19915, 21697, -1000,
	8186, -1000, 1043, 8186, -1000, 21697, 8449, 8449, 8449, 8449,
	8449, 8449, 8449, 8449, 8449, 8449, 8449, 8449, 8449, 8449,
	8449, 8449, 8449, 8449, 8449, 971, 8449, 1317, 1317, 1317,
	-25, 5285, -1000, 1074, 1043, 8186, 8186, 21697, 63, 61,
	60, -1000, 8186, -94, 8186, 8186, 8186, -1000, -1000, -1000,
	59, -1000, 1327, -1000, -1000, -1000, -1000, 1025, 20234, 14623,
	14623, 14623, 1091, 1450, -1000, 19892, -67, 14623, 14623, -1000,
	959, 1045, 423, 14623, -1000, 14623, -1000, 14623, 14623, 14623,
	14623, -36, 6343, 179, 18, 14623, -36, 600, -1000, -1000,
	321, -1000, 293, 286, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 57, -1000, -1000, 8975, 170, 14623, 12607, 8975,
	827, -1000, -1000, 361, 8186, 8186, 989, 10803, 10803, 683,
	958, 10803, -1000, -1000, -1000, -1000, 329, -1000, 963, 162,
	14623, 13111, 1269, 2694, 2489, 2331, 8186, 21697, 21513, -68,
	8186, 8186, -1000, -69, -1000, 8186, -1000, -1000, 1365, 8186,
	53, 52, 45, -1000, -1000, 21329, 8186, -1000, -1000, 18907,
	8186, 44, -1000, 43, 21329, 1074, 21329, -1000, 558, 558,
	1317, 1317, 1317, 1317, 767, 767, 484, 918, 584, 584,
	584, 2205, 331, 331, 584, 584, 584, 1041, 932, 158,
	21694, 8186, -73, -1000, -1000, -1000, 21329, 21329, 41, -1000,
	-1000, -1000, -94, 2763, 19868, 19845, -1000, 38, 361, -1000,
	-1000, -1000, -1000, 14623, -1000, 14623, -1000, 14623, 869, -1000,
	-1000, 952, 157, 8449, 14623, 14623, -1000, 721, -74, -75,
	867, -1000, 858, 8186, -1000, 21697, 793, 793, -1000, 477,
	475, -1000, -36, 1144, 14623, 1186, -1000, -1000, -1000, 155,
	-1000, -1000, -1000, -79, -1000, 209, 1203, 8186, -1000, -1000,
	150, 8975, -80, -1000, -1000, 37, -81, 14623, -1000, 14623,
	21329, -94, -1000, 683, -1000, 147, 8186, 10803, -1000, -1000,
	828, -144, -1000, 320, -1000, 14623, -86, -1000, 8186, 8186,
	21513, -87, -1000, 2694, 2694, -1000, 19573, -1000, 20762, -1000,
	-1000, -1000, 21329, 758, -1000, 19550, -1000, -1000, -1000, 8449,
	1040, 143, 21697, 19524, -1000, -1000, 8186, -1000, -1000, -1000,
	-1000, -1000, 1300, -1000, -1000, -1000, 8186, 21694, 139, -1000,
	-1000, 136, -1000, -1000, -1000, 682, -1000, -1000, 21329, 1206,
	-1000, -1000, 14623, 14623, 502, -96, 14623, -1000, -1000, 4492,
	721, 8975, 1227, 25, 14623, 1227, 19480, 4227, -98, -1000,
	14623, -1000, 721, 135, -88, -1000, 1235, -1000, 14623, 21329,
	-1000, 533, 963, -1000, 3965, -104, -1000, 2694, 2694, -1000,
	-1000, 35, 801, 1218, -1000, 20636, 8449, 21697, -108, -1000,
	19246, -1000, 19202, 907, 14623, 14623, 14623, 403, 14623, -1000,
	-1000, 555, -1000, 364, -1000, -1000, -1000, -1000, -1000, -1000,
	1203, -10, 721, -1000, -1000, 8975, 14623, 132, -115, 507,
	-1000, -1000, -1000, -1000, 621, 8186, 20636, -116, -1000, -1000,
	-1000, 819, 703, 34, -117, 126, -1000, 8186, -1000, 11065,
	-1000, 1227, 31, -1000, -122, -1000, -1000, -1000, 1364, 29,
	7923, 7923, -94, -1000, -1000, 826, 824, 578, -1000, -1000,
	-1000, -1000, -1000, 907, 14623, 21329, -109, -1000, -1000, 721,
	-1000, -1000, -1000, -1000, 8712, 825, 588, 20257, -1000, -1000,
	1151, -1000, 407, 880, 880, 819, -123, -1000, -1000, 1302,
	-1000, -1000, -1000, -1000, -1000, -1000, 1309, -1000, -1000, 954,
	-1000, -1000, -1000, 7660, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1579, 1578, 1249, 125, 124, 1577, 1576, 1575, 99,
	122, 120, 128, 1574, 89, 1573, 1570, 1567, 92, 1564,
	1557, 1556, 53, 1555, 1554, 1551, 1549, 1547, 90, 31,
	154, 1849, 147, 1544, 1543, 1542, 11, 108, 67, 1541,
	51, 57, 100, 113, 383, 65, 1540, 1537, 139, 74,
	16, 1453, 96, 141, 133, 117, 1536, 1532, 1531, 45,
	1529, 1528, 1526, 1524, 44, 21, 1520, 23, 1519, 14,
	1518, 1516, 103, 1514, 102, 114, 24, 119, 8, 1513,
	54, 9, 76, 1511, 35, 1510, 29, 80, 137, 1509,
	46, 162, 58, 28, 50, 1508, 1504, 1503, 1501, 72,
	1500, 91, 110, 1495, 1493, 79, 1492, 135, 129, 1491,
	1488, 134, 1487, 1486, 1485, 628, 1484, 1482, 570, 1481,
	5, 66, 75, 7, 112, 105, 52, 1480, 25, 1479,
	996, 1225, 904, 1478, 60, 43, 83, 49, 42, 13,
	1477, 1476, 109, 1475, 1474, 1473, 1472, 1470, 82, 1469,
	78, 144, 36, 61, 98, 22, 26, 39, 86, 101,
	145, 106, 1468, 1467, 116, 1466, 47, 1465, 1463, 1052,
	127, 1462, 1461, 1458, 1039, 981, 703, 634, 1456, 1455,
	651, 17, 1454, 1452, 126, 1449, 1447, 138, 1439, 132,
	19, 1436, 115, 1432, 93, 1429, 0, 107, 38, 1428,
	131, 77, 1427, 1426, 1421, 1419, 27, 1, 15, 4,
	10, 3, 30, 20, 1415, 1407, 136, 87, 1405, 143,
	1400, 1397, 41, 1395, 1393, 18, 1392, 12, 1391, 6,
	2, 1390, 140, 1386, 94, 1384, 1319, 1383, 142, 1379,
	1376, 1271, 81,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 4, 4, 38, 38, 37,
	37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
	37, 37, 37, 37, 35, 35, 40, 40, 40, 39,
	39, 34, 34, 5, 5, 5, 9, 10, 10, 10,
	10, 10, 10, 77, 77, 76, 76, 79, 79, 11,
	11, 12, 12, 12, 12, 12, 12, 12, 12, 165,
	165, 164, 13, 140, 140, 14, 14, 14, 14, 15,
	100, 100, 16, 16, 16, 16, 17, 21, 232, 232,
	232, 236, 236, 237, 237, 238, 238, 238, 238, 238,
	238, 238, 234, 234, 24, 24, 24, 24, 24, 119,
	115, 115, 117, 117, 117, 117, 43, 114, 114, 114,
	114, 116, 116, 116, 116, 189, 187, 187, 194, 194,
	194, 56, 56, 56, 56, 56, 57, 57, 57, 186,
	186, 186, 186, 195, 195, 195, 195, 195, 195, 58,
	58, 58, 193, 193, 25, 25, 25, 25, 25, 25,
	25, 25, 25, 25, 25, 25, 25, 25, 188, 188,
	233, 233, 235, 235, 8, 8, 59, 59, 60, 60,
	122, 122, 122, 122, 121, 204, 204, 205, 205, 205,
	206, 206, 206, 206, 206, 206, 206, 206, 202, 202,
	203, 200, 200, 201, 201, 201, 201, 239, 239, 120,
	120, 63, 63, 209, 209, 209, 209, 207, 207, 207,
	207, 207, 210, 208, 211, 211, 211, 211, 211, 151,
	151, 151, 27, 7, 7, 104, 104, 67, 67, 155,
	155, 155, 68, 68, 156, 50, 50, 36, 36, 36,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 105,
	105, 106, 106, 19, 23, 26, 26, 26, 26, 26,
	241, 241, 47, 47, 47, 47, 48, 48, 118, 118,
	118, 118, 118, 42, 6, 6, 41, 41, 18, 18,
	18, 18, 18, 53, 53, 111, 111, 111, 113, 113,
	112, 112, 112, 90, 90, 28, 81, 81, 82, 82,
	162, 83, 83, 22, 22, 31, 31, 29, 29, 29,
	29, 29, 29, 30, 30, 32, 32, 32, 32, 32,
	32, 32, 217, 217, 217, 219, 219, 216, 218, 218,
	240, 240, 91, 91, 91, 62, 61, 61, 65, 65,
	64, 66, 66, 154, 88, 88, 88, 88, 107, 108,
	108, 109, 109, 110, 110, 87, 87, 137, 137, 33,
	33, 72, 72, 73, 73, 128, 128, 129, 129, 127,
	127, 127, 157, 157, 157, 157, 158, 158, 158, 158,
	158, 158, 152, 152, 152, 152, 153, 153, 163, 163,
	94, 94, 94, 94, 92, 92, 93, 93, 159, 159,
	159, 159, 89, 89, 160, 160, 160, 123, 123, 166,
	166, 166, 71, 71, 71, 167, 167, 167, 167, 167,
	167, 167, 167, 167, 167, 167, 167, 167, 168, 168,
	168, 168, 170, 170, 170, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 171, 171,
	178, 178, 179, 179, 180, 181, 172, 172, 173, 173,
	174, 175, 182, 182, 182, 182, 184, 184, 176, 176,
	176, 176, 176, 177, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 102, 102,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 212, 212, 212, 212, 212, 212, 212,
	214, 214, 215, 215, 213, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 213, 220,
	220, 221, 221, 222, 222, 223, 223, 225, 226, 226,
	226, 227, 231, 231, 224, 224, 228, 228, 228, 229,
	229, 230, 230, 230, 230, 230, 142, 142, 142, 143,
	143, 144, 78, 78, 139, 139, 138, 138, 138, 141,
	141, 95, 183, 183, 183, 183, 183, 183, 183, 96,
	96, 103, 97, 97, 98, 98, 98, 98, 98, 98,
	134, 135, 99, 99, 99, 136, 136, 145, 149, 149,
	148, 147, 147, 146, 146, 126, 126, 126, 126, 125,
	124, 84, 84, 242, 242, 150, 150, 85, 85, 86,
	80, 80, 161, 161, 161, 161, 74, 74, 55, 55,
	75, 75, 51, 51, 54, 52, 52, 52, 52, 69,
	69, 70, 70, 49, 49, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 185, 185, 185, 44,
	44, 44, 45, 45, 46, 46, 191, 191, 191, 192,
	192, 192, 192, 190, 190, 190, 190, 190, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 4, 6, 1, 3, 2,
	5, 3, 6, 4, 6, 6, 6, 4, 8, 2,
	3, 3, 6, 4, 3, 2, 1, 1, 0, 2,
	0, 2, 0, 1, 1, 1, 6, 3, 5, 4,
	6, 4, 6, 1, 3, 1, 2, 2, 3, 2,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 1, 5, 3, 0, 1, 1, 1, 1, 3,
	3, 0, 2, 3, 2, 3, 6, 6, 1, 2,
	2, 1, 1, 1, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 2, 3, 6, 3, 1, 5,
	2, 1, 1, 1, 3, 3, 2, 3, 3, 3,
	3, 1, 3, 3, 2, 1, 1, 3, 1, 1,
	1, 2, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 1, 1, 1, 1,
	1, 0, 1, 1, 2, 2, 4, 2, 4, 4,
	4, 4, 3, 3, 4, 3, 2, 4, 2, 0,
	2, 0, 2, 0, 6, 9, 1, 0, 1, 3,
	1, 1, 1, 1, 3, 2, 0, 3, 1, 2,
	2, 1, 1, 2, 4, 2, 5, 2, 6, 7,
	5, 3, 1, 4, 5, 5, 10, 1, 1, 4,
	0, 3, 0, 2, 2, 2, 0, 1, 1, 2,
	2, 0, 3, 3, 2, 1, 1, 2, 2, 1,
	2, 1, 4, 10, 13, 1, 0, 1, 3, 3,
	3, 5, 1, 3, 1, 2, 0, 1, 1, 0,
	6, 6, 8, 6, 8, 8, 10, 8, 10, 1,
	0, 2, 0, 2, 2, 3, 3, 2, 2, 2,
	1, 0, 1, 3, 2, 0, 2, 1, 1, 1,
	3, 3, 0, 3, 4, 7, 3, 0, 6, 6,
	8, 5, 7, 1, 3, 1, 4, 2, 8, 5,
	4, 3, 0, 2, 0, 8, 1, 3, 1, 1,
	3, 5, 5, 1, 1, 3, 3, 1, 2, 3,
	2, 3, 4, 1, 1, 8, 8, 1, 2, 4,
	4, 4, 2, 2, 3, 1, 3, 6, 1, 0,
	1, 0, 1, 1, 0, 1, 1, 0, 1, 0,
	3, 1, 3, 2, 2, 2, 1, 1, 2, 2,
	3, 1, 1, 1, 1, 3, 0, 2, 0, 2,
	3, 2, 0, 1, 3, 3, 1, 1, 3, 2,
	4, 0, 4, 2, 1, 4, 3, 4, 5, 4,
	5, 4, 5, 2, 4, 1, 1, 0, 5, 0,
	2, 2, 2, 1, 1, 0, 4, 2, 1, 2,
	2, 4, 1, 3, 1, 2, 3, 2, 0, 2,
	5, 2, 3, 4, 0, 1, 1, 1, 1, 2,
	4, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 5, 0, 1, 1, 1, 1, 1,
	1, 2, 2, 2, 2, 2, 1, 1, 3, 0,
	1, 1, 1, 1, 5, 2, 1, 1, 1, 1,
	4, 1, 2, 2, 1, 1, 1, 0, 1, 1,
	4, 1, 4, 1, 1, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 0, 1, 4,
	1, 3, 3, 5, 2, 2, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 2, 2,
	3, 4, 4, 5, 3, 4, 3, 3, 4, 3,
	4, 3, 4, 5, 6, 6, 7, 6, 7, 6,
	7, 3, 4, 1, 3, 2, 2, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 5, 6, 6,
	7, 1, 1, 1, 3, 1, 1, 1, 2, 2,
	2, 1, 1, 3, 5, 6, 8, 6, 6, 4,
	4, 1, 1, 1, 5, 1, 3, 1, 3, 1,
	1, 1, 1, 6, 4, 4, 4, 4, 6, 5,
	5, 5, 4, 8, 6, 6, 4, 4, 4, 5,
	0, 5, 0, 2, 0, 1, 3, 3, 2, 2,
	0, 6, 1, 0, 3, 0, 2, 2, 0, 1,
	4, 2, 2, 2, 2, 2, 4, 3, 5, 4,
	3, 5, 1, 3, 1, 3, 3, 3, 2, 1,
	3, 3, 1, 1, 1, 1, 1, 1, 1, 4,
	3, 2, 3, 0, 3, 3, 2, 2, 1, 0,
	2, 2, 3, 2, 1, 1, 3, 5, 1, 2,
	4, 2, 0, 1, 0, 1, 1, 3, 5, 2,
	2, 1, 2, 1, 0, 1, 1, 1, 3, 3,
	1, 3, 3, 2, 1, 1, 1, 3, 1, 3,
	1, 3, 1, 2, 3, 1, 2, 2, 1, 1,
	3, 3, 0, 1, 2, 1, 1, 1, 1, 6,
	2, 3, 5, 1, 1, 1, 1, 2, 2, 1,
	1, 1, 1, 0, 3, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -9, -10, -11, -13,
	-15, -16, -17, -18, -20, -21, -23, -22, -24, -25,
	-26, -19, -27, -28, 19, -6, -7, -8, -218, 85,
	93, 182, 92, 78, 108, 196, 203, -29, -31, 211,
	-119, 212, 29, 220, 53, 88, 198, 193, 240, 59,
	-217, -32, -30, 286, 261, 267, 206, -33, 227, 254,
	289, 227, 71, 119, 80, 123, 248, 247, 71, 119,
	227, -12, 286, -22, -5, -10, -4, -18, -28, -9,
	-11, 19, -44, 4, -196, -198, 16, 17, 19, 28,
	29, 34, 38, 41, 52, 53, 54, 56, 58, 61,
	62, 69, 70, 71, 72, 74, 78, 80, 84, 85,
	87, 92, 93, 98, 99, 102, 104, 109, 114, 115,
	120, 123, 131, 133, 134, 139, 142, 145, 147, 148,
	149, 150, 151, 153, 154, 156, 158, 155, 161, 163,
	164, 170, 173, 176, 177, 180, 182, 184, 185, 186,
	188, 189, 193, 191, 192, 194, 196, 198, 199, 201,
	203, 204, 205, 208, 209, 211, 212, 214, 217, 219,
	220, 223, 221, 226, 228, 229, 236, 240, 241, 242,
	243, 246, 247, 248, 251, 252, 253, 257, 262, 263,
	264, 265, 30, 31, 32, 33, 35, 36, 39, 40,
	44, 45, 46, 48, 73, 75, 76, 91, 94, 100,
	110, 112, 116, 117, 124, 125, 126, 128, 137, 160,
	162, 171, 175, 179, 181, 187, 200, 207, 215, 216,
	222, 224, 231, 232, 233, 237, 238, 254, 255, -44,
	-44, 182, 18, -236, 18, -237, -238, 59, 85, 108,
	206, 123, 80, 247, -236, -48, 203, -44, -115, 142,
	209, 200, 236, -116, -114, -189, 231, 151, -76, -44,
	4, 71, 52, 72, 109, 119, 120, 134, 228, 231,
	236, 18, 59, -241, 236, 236, -241, -241, -47, 236,
	234, -48, -240, 227, 227, -104, 71, 245, -30, -32,
	-31, -64, -65, 244, 127, 90, 169, -29, -31, -217,
	-219, 188, -216, -44, -219, -61, -62, 18, 82, 290,
	-159, -51, 167, -44, -86, 286, -3, -159, 116, -44,
	-54, 116, -51, 106, 129, 129, -160, -159, -44, 116,
	-55, 116, -54, -77, 116, -76, -165, -164, -192, 4,
	-196, -198, -197, 254, 50, 60, 107, 122, 130, 132,
	138, 140, 152, 172, 174, 197, 213, 227, -140, 286,
	-100, 286, -44, 18, 166, 290, 166, -44, -115, 46,
	-115, 286, -117, -42, -43, 131, 184, 234, 271, 106,
	265, -58, 5, 77, -79, 288, 106, -233, 166, 106,
	106, 106, -188, 106, 265, 131, 184, 227, -118, -42,
	-43, -118, 234, -48, -89, -159, -76, 116, 119, -44,
	116, -64, -65, -88, -107, -108, 141, 165, -91, 18,
	82, -91, -91, 38, 287, 287, 290, -219, -70, 286,
	-80, -161, -130, 279, -132, 277, 278, 283, 157, 266,
	-142, -51, -133, 9, 286, -145, -214, -31, 91, 24,
	-143, -144, 200, -44, 7, 8, 5, 6, -49, -168,
	-177, 239, 95, 159, 42, -212, -213, 4, -196, -191,
	-169, -179, -173, -176, 128, 50, 64, 67, 65, 68,
	210, 249, 43, 94, 175, 179, 224, 237, 238, 116,
	160, 117, 48, 110, 137, 84, 31, 33, 35, 36,
	44, 45, 73, 75, 76, 100, 124, 125, 126, 162,
	187, 215, 222, 232, 233, 255, -197, -180, -181, -174,
	-175, -182, -80, -86, 279, -51, 286, -84, -126, -125,
	-124, 284, 288, -85, -150, -130, 77, -38, 191, -37,
	17, 19, 85, 252, 91, 191, 191, 91, 291, -160,
	-53, -51, -53, 211, -44, 25, 91, -40, 290, 41,
	194, 91, -40, 290, 91, 287, 290, -159, 116, 25,
	-139, -166, -167, -169, -178, -172, -176, -177, 34, 40,
	39, 229, 207, 216, 32, 124, 125, 126, 215, 31,
	187, 100, 84, 76, 75, 162, 36, 35, -180, -181,
	-174, -175, 73, 232, 233, 128, 33, 45, 44, 255,
	222, -78, -130, -232, -75, 227, 71, -52, -44, 279,
	-238, -232, 25, -78, 290, 290, 139, -57, 145, 156,
	114, -187, 77, -194, -186, -151, 9, 239, 95, 166,
	-193, 8, 278, -185, -192, 5, 7, 277, -187, 77,
	62, -195, 5, 4, -177, -151, 77, 142, 288, -190,
	4, -196, -198, -197, -199, 18, 20, 21, 22, 23,
	24, 25, 26, 27, 37, 42, 43, 47, 49, 51,
	57, 59, 63, 64, 65, 66, 67, 68, 77, 79,
	81, 82, 83, 86, 88, 90, 95, 96, 97, 103,
	105, 106, 108, 111, 113, 118, 119, 121, 127, 129,
	135, 136, 141, 143, 144, 157, 159, 165, 166, 167,
	168, 169, 178, 183, 190, 195, 206, 210, 218, 225,
	227, 230, 234, 235, 239, 244, 245, 249, 250, 256,
	258, 259, 260, 261, -189, -235, 103, -232, -189, -189,
	-189, -189, 139, -189, 290, 290, -48, -40, 290, 286,
	157, -45, 116, -44, -41, 87, 157, -88, -108, -107,
	-109, -130, 18, -130, -132, -30, -30, -30, -66, -154,
	-130, -216, 25, -69, -44, -72, 290, 106, 10, 49,
	28, 277, 278, 279, 280, 101, 281, 274, 275, 276,
	273, 269, 270, 271, 55, 146, 202, 12, 13, 14,
	22, 168, 140, 266, 213, 130, 30, 118, 25, 4,
	-130, -130, -130, -130, -130, 174, -31, -130, -78, -84,
	-31, -138, 284, 286, -84, 286, 5, 5, 286, -146,
	-130, -220, 262, 103, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 181,
	-184, 257, -184, -184, -170, 286, -170, -171, 286, -170,
	263, 267, 286, -72, -51, -126, -130, -190, 279, 290,
	287, 290, 234, -105, 57, 51, -121, 116, 51, -200,
	-44, 57, -201, 47, 245, 183, 105, -105, 57, -105,
	57, 57, -159, 234, 234, -54, -44, -123, 259, -111,
	-22, 286, 77, 25, -111, -81, -82, -162, -83, -51,
	286, -44, -44, -54, -55, -76, -77, -12, -164, 91,
	-14, -22, -18, -28, -9, 287, 290, -71, 24, -101,
	286, 264, 149, 74, 115, 148, -102, 205, 287, 290,
	234, 290, -75, -69, -125, -124, 106, 236, 287, -43,
	-42, -56, 186, 217, 192, 208, 290, 8, 7, 7,
	5, -190, -234, -44, -43, -42, -159, -59, -60, -122,
	-121, -202, -203, -200, 119, 245, 96, 91, 166, 157,
	271, 91, -110, 200, 201, 290, -36, 26, 81, 286,
	290, 287, -123, -161, -73, -157, -159, -31, -158, 286,
	-166, -76, 231, -130, -130, -130, -130, -130, -130, -130,
	-130, -130, -130, -130, -130, -130, -130, -130, -130, -130,
	-130, -130, -130, -130, -130, 140, 213, 30, 118, 234,
	159, 157, 239, 95, 246, 82, 163, -242, 225, 27,
	-136, -31, 286, -190, -142, 200, 286, 287, 290, -78,
	-141, 285, -138, -78, 287, 287, -78, 256, 18, 82,
	279, -101, 7, -149, -148, 258, -221, 98, 111, 286,
	287, 287, -130, -95, -183, 4, 264, 149, 74, 115,
	148, 205, -96, -130, -97, -131, -132, 277, 278, 283,
	286, 200, -98, -130, -78, -130, 37, 136, 235, -99,
	-130, 106, -78, -130, -130, -130, -78, -78, -78, 286,
	7, 7, 231, 231, 7, -123, 287, 285, 294, -150,
	-37, -51, -44, -44, 157, -121, 116, -166, -44, 286,
	286, 133, 133, -44, -44, 116, -44, 116, -44, -44,
	-38, 191, -44, -44, 191, -90, 195, -130, -90, -113,
	166, -74, -51, 254, -44, 195, -72, 290, 271, -74,
	-40, -40, -159, -166, 284, 284, 7, 234, 234, 234,
	234, 286, -130, -234, -52, -234, -42, 243, 54, 186,
	-194, -101, 290, 287, 290, -45, 119, -45, -76, -51,
	91, 5, -44, -154, -14, -44, -87, 111, 290, 60,
	-94, 132, 152, 107, 138, 197, 122, -127, 291, -153,
	-152, 25, -44, -31, -158, -157, 265, -130, 234, -242,
	225, -136, -130, 159, 239, 95, 246, 82, 163, 106,
	286, -131, -131, -78, 286, -78, -130, 285, 285, 290,
	287, -65, 290, -64, -130, -78, -78, 287, 287, -147,
	-148, 86, -130, -226, 173, 286, 286, -130, 25, 287,
	106, 287, -103, 178, 287, 10, 277, 278, 279, 280,
	101, 281, 274, 275, 276, 273, 269, 270, 271, 55,
	146, 202, 12, 13, 14, 130, 118, -131, -131, -131,
	-78, 286, 287, -134, -135, 106, 103, 25, -99, -99,
	-99, 287, 106, -78, 290, 290, 290, 287, 287, 287,
	7, 287, 290, 287, 265, 265, 287, -87, -130, 234,
	234, 91, 157, -204, -201, -130, -69, 286, 286, -35,
	85, 211, -106, 91, -40, 91, -40, 234, -105, 57,
	234, -80, 195, 56, 287, 290, -80, -123, -82, -150,
	287, 285, 7, 7, 287, 149, 115, 148, -102, 148,
	-102, -102, 7, -44, -122, 286, -45, 286, 286, 286,
	-44, -41, 287, -137, 113, 38, -157, 132, 132, -157,
	-94, 132, -92, 172, -92, -92, -153, -190, 292, -44,
	286, 287, -130, -130, -131, -131, 106, 286, -130, -139,
	22, 22, 287, -78, 287, 290, 287, -138, 287, 256,
	-65, -65, -65, 5, 88, -130, 230, -227, -44, 286,
	259, -64, 287, -166, -130, -134, -130, -166, -131, -131,
	-131, -131, -131, -131, -131, -131, -131, -131, -131, -131,
	-131, -131, -131, -131, -131, -131, -131, 82, 157, 163,
	-131, 290, -78, 287, -135, -134, -130, -130, -166, 287,
	287, 287, -78, -130, -130, -130, 287, 7, -137, 285,
	-44, -44, -121, 91, -205, 57, -206, 49, 157, 159,
	245, 183, 47, 77, 190, 96, 287, 287, -69, -69,
	157, 77, 157, 77, 70, 241, -44, -44, -51, -44,
	-44, -44, -80, -112, 286, 166, -22, -51, -90, 271,
	285, 285, 287, -67, -155, -44, -215, 286, -212, -213,
	-49, 286, -68, -156, -44, -59, -67, 166, -222, 260,
	-130, -78, -157, -157, -93, 250, 166, 132, -157, -163,
	268, -129, -128, 104, 155, 286, -69, -152, 22, 22,
	-130, -139, 287, -130, -130, 287, -130, 5, -130, 287,
	287, 287, -130, -231, -44, -130, 287, 287, -135, 106,
	82, 163, 286, -130, 287, 287, 290, 287, 287, 287,
	-222, -121, -44, -76, 159, 133, 286, -131, -51, -44,
	-120, -239, 58, 223, 287, 287, 159, 159, -130, -166,
	-40, -40, 234, 234, 83, -69, 57, -86, -31, 286,
	287, 290, -50, -84, 49, -50, -130, 286, -67, 287,
	290, 287, 287, -51, -223, -225, -44, -93, 286, -130,
	-157, 163, 290, 293, 271, -69, 287, -130, -130, 287,
	287, -65, -224, 177, 287, -131, 106, 286, -139, 287,
	-130, -206, -130, -46, 286, 286, 190, -39, 49, -44,
	-44, 247, 158, 287, -44, -120, -155, -36, -76, -36,
	287, -78, 287, -156, -120, 286, 290, 25, -69, 226,
	-128, -190, 287, 287, -65, 38, -131, -139, 287, 287,
	287, -209, 147, -44, -69, -51, -34, 250, -76, 211,
	-123, -50, -65, -120, -67, -225, -227, 287, 231, -228,
	185, 201, -78, 287, -207, -210, -208, 166, 107, 176,
	214, 287, 287, -63, 286, -130, -81, -36, 287, 287,
	5, 287, -229, -230, 30, 242, 62, -130, -229, -208,
	166, -210, 166, 247, 80, -209, -69, -123, -120, -230,
	180, 102, 200, 180, 102, -211, 154, 194, 41, 211,
	-211, -207, 287, 22, 16, 159, 77, -230,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 0, 53, 54, 55, 0, 0,
	349, 0, 0, 0, 0, 0, 0, 323, -2, 0,
	118, 0, 281, 0, 281, 281, 285, 0, 351, 246,
	348, -2, 359, 0, 0, 0, 357, 337, 0, 0,
	-2, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 69, 0, 71, 72, 73, 74, 75, 76, 77,
	78, 0, 84, 769, 770, 771, 788, 789, 790, 791,
	792, 793, 794, 795, 796, 797, 798, 799, 800, 801,
	802, 803, 804, 805, 806, 807, 808, 809, 810, 811,
	812, 813, 814, 815, 816, 817, 818, 819, 820, 821,
	822, 823, 824, 825, 826, 827, 828, 829, 830, 831,
	832, 833, 834, 835, 836, 837, 838, 839, 840, 841,
	842, 843, 844, 845, 846, 847, 848, 849, 850, 851,
	852, 853, 854, 855, 856, 857, 858, 859, 860, 861,
	862, 863, 864, 865, 866, 867, 868, 869, 870, 871,
	872, 873, 874, 875, 876, 877, 878, 879, 880, 881,
	882, 883, 884, 885, 886, 887, 888, 889, 890, 891,
	892, 893, 894, 895, 896, 897, 898, 899, 900, 901,
	902, 903, 904, 905, 906, 907, 908, 909, 910, 911,
	912, 913, 914, 915, 916, 917, 918, 919, 920, 921,
	922, 923, 924, 925, 926, 927, 928, 929, 930, 931,
	932, 933, 934, 935, 936, 937, 938, 939, 940, 91,
	92, 848, 94, 0, 101, 102, 103, 105, 106, 107,
	108, 109, 110, 111, 0, 274, 862, 287, 114, 828,
	866, 928, 878, 121, 131, 0, 934, -2, 135, 65,
	164, 165, 0, 167, 181, 0, 0, 0, 179, 0,
	0, 176, 0, 292, 280, 292, 277, 278, 279, 282,
	0, 273, 0, 350, 0, 0, 0, 245, -2, 333,
	334, -2, 0, 354, 354, 354, 0, 0, 334, 0,
	342, 852, 345, 752, 343, 0, 0, 356, 355, 0,
	338, 418, 0, 742, 379, 0, 2, 0, 914, 0,
	0, 914, 0, 0, 0, 0, 0, 424, 57, 914,
	48, 914, 738, 48, 914, 63, 0, 79, 81, 779,
	780, 781, 782, 939, 941, 942, 943, 944, 945, 946,
	947, 948, 949, 950, 951, 952, 953, 0, 0, 0,
	89, 0, 93, 95, 0, 0, 0, 286, 115, 904,
	117, 0, 120, 122, 123, 0, 0, 0, 0, 0,
	0, 134, 159, 160, 66, 0, 0, 183, 0, 0,
	0, 0, 172, 0, 173, 0, 175, 0, 275, 288,
	289, 276, 0, 284, 48, 422, 0, 914, 773, 297,
	914, -2, 0, 329, 366, 367, 0, 0, 0, 352,
	353, 0, 0, 0, 325, 326, 0, 344, 0, 0,
	382, 730, 734, 735, 510, 0, 0, 0, 0, 0,
	0, 591, 592, 593, 0, 595, 596, 597, 909, 0,
	601, 602, 928, 742, 755, 756, 757, 758, 0, 0,
	0, 763, 764, 765, 714, 640, 611, -2, -2, 753,
	448, 449, 450, 451, -2, 941, 615, 617, 619, 620,
	621, 622, 0, 910, 924, 925, 933, 937, 938, 914,
	921, 915, 905, 912, 920, 810, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, 778, 472, 473, 478,
	479, 481, 382, 380, 419, 420, 0, 743, 721, 715,
	716, 0, 0, 0, 727, 725, 726, 25, 270, 27,
	0, 270, 270, 0, 0, 0, 0, 0, 0, 428,
	0, 303, 0, 0, 425, 0, 0, 59, 0, 46,
	47, 0, 61, 0, 0, 349, 0, 0, 914, 349,
	0, 674, 434, 435, 436, 437, 438, 507, 441, 442,
	443, 444, 445, 446, 447, 455, 456, 457, 458, 459,
	460, 469, 0, 454, 454, 454, 466, 467, 470, 471,
	476, 477, 488, 489, 491, 493, 487, 487, 487, 484,
	485, 0, 672, 0, 98, 0, 805, 740, 745, 748,
	104, 0, 0, 0, 0, 0, 0, 126, 146, 147,
	148, 127, 129, 136, 138, 139, 140, 149, 150, 151,
	152, 239, 0, 241, 162, 163, 766, 0, 128, 130,
	132, 133, 153, 154, 0, 156, 157, 158, 0, 67,
	783, 784, 785, 786, 787, 954, 955, 956, 957, 958,
	959, 960, 961, 962, 963, 964, 965, 966, 967, 968,
	969, 970, 971, 972, 973, 974, 975, 976, 977, 978,
	979, 980, 981, 982, 983, 984, 985, 986, 987, 988,
	989, 990, 991, 992, 993, 994, 995, 996, 997, 998,
	999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008,
	1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018,
	1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028,
	1029, 1030, 1031, 1032, 166, 168, 0, 180, 169, 170,
	171, 178, 174, 177, 0, 0, 283, 242, 0, 187,
	0, 0, 914, 772, 294, 0, 0, 332, 364, 365,
	368, 371, 372, 369, 510, 339, 340, 341, 360, 361,
	259, 346, 0, 0, 749, 428, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 724, 0, 0, 733,
	514, 515, 516, 538, 539, 0, -2, 672, 0, 598,
	599, 600, 0, 0, -2, 0, 760, 507, 0, 0,
	713, 642, 0, 0, 0, 0, 0, 0, 0, 693,
	699, 0, 0, 0, 0, 0, 0, 0, 0, 462,
	475, 486, 483, 482, 464, 0, 463, 461, 0, 465,
	0, 0, 0, 428, 0, 722, 0, 719, 720, 0,
	729, 0, 0, 0, 0, 269, 29, 914, 0, 39,
	0, 0, 212, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 744, 314, 0, 314,
	305, 0, 0, 0, 301, 382, 316, 318, 319, 0,
	0, 426, 58, 739, 48, 64, 48, 70, 80, 0,
	82, 85, 86, 87, 88, 83, 0, 429, 431, 439,
	0, 494, 495, 496, 497, 498, 499, 508, 90, 0,
	0, 0, 99, 100, 746, 747, 0, 0, 119, 124,
	125, 293, 0, 143, 0, 145, 0, 240, 768, 767,
	507, 68, 182, 112, 290, 291, 423, 0, 186, 188,
	190, 191, 192, 193, 773, 0, 773, 0, 0, 0,
	0, 0, 370, 373, 374, 0, 363, 257, 258, 349,
	0, 751, 376, 731, 381, 383, 391, 407, 394, 0,
	511, 512, 0, 517, 518, 519, 520, 521, 522, 523,
	524, 525, 526, -2, -2, -2, 530, 531, 532, -2,
	-2, -2, 536, 537, -2, 0, 0, 724, 0, 0,
	544, 0, 547, 549, 551, 0, 0, 0, 0, 723,
	561, 705, 0, 732, 546, 0, 0, 594, 0, 0,
	0, 678, 679, 0, -2, 603, 359, 0, 0, 0,
	0, 761, 0, 712, 708, 0, 650, 0, 0, 0,
	616, 618, 0, 0, 0, 682, 683, 684, 685, 686,
	687, 688, 0, 0, 0, 0, 563, 0, 0, 0,
	0, 928, 0, 672, 698, 0, 0, 0, 0, 0,
	672, 0, 704, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 376, 421, 717, 0, 728,
	28, 261, 0, 0, 0, 31, 914, 196, 0, 0,
	0, 0, 0, 272, 40, 914, 48, 914, 48, 41,
	26, 270, 260, 263, 0, 56, 0, 427, 298, 299,
	0, 0, 736, 307, 304, 0, 428, 0, 0, 0,
	60, 62, 0, 675, 0, 0, 0, 0, 0, 0,
	0, 0, 673, 96, 741, 97, 116, 141, 142, 144,
	137, 155, 0, 184, 0, 0, 773, 0, 0, 0,
	0, 296, 297, 362, 0, 750, 378, 0, 0, 0,
	0, 0, 0, 415, 415, 415, 413, 407, 0, 393,
	406, 0, 405, -2, 394, 0, 0, -2, 0, 0,
	0, 562, -2, 545, 548, 550, 552, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 673, 676, 677, 0,
	-2, 0, 0, 358, 359, 359, 359, 609, 0, 0,
	709, 0, 0, 610, 0, 0, 0, 0, 0, 624,
	0, 625, 0, 0, 626, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 565, 566, 567,
	0, 0, 627, 696, 697, 0, 0, 0, 0, 0,
	0, 632, 0, 703, 0, 0, 0, 636, 637, 638,
	0, 452, 0, 468, 490, 492, 480, 378, 0, 0,
	0, 0, 0, 194, 211, 0, 0, 0, 0, 33,
	0, 0, 0, 0, 37, 0, 43, 0, 0, 0,
	0, 313, 0, 312, 0, 0, 302, 314, 317, 320,
	0, 432, 0, 0, 440, 500, 501, 502, 503, 504,
	505, 506, 0, 113, 189, 0, 0, 0, 187, 0,
	0, 295, 347, 644, 0, 0, 384, 0, 0, 0,
	0, 0, 410, 414, 411, 412, 409, 389, 0, 403,
	0, 396, 513, -2, 0, 0, 0, 0, -2, 0,
	0, 0, 706, 0, 667, 0, -2, 680, 604, 0,
	0, 0, 0, 762, 707, 711, 0, 648, 649, 653,
	0, 0, 614, 0, 681, 690, 691, 564, 568, 569,
	570, 571, 572, 573, 574, 575, 576, 577, -2, -2,
	-2, 581, 582, 583, -2, -2, -2, 0, 0, 0,
	692, 0, 0, 670, 694, 695, 700, 701, 0, 629,
	630, 631, 702, 0, 0, 0, 474, 0, 644, 718,
	265, 267, 30, 0, 195, 0, 198, 0, 0, 201,
	202, 0, 0, 0, 0, 0, 213, 220, 0, 0,
	0, 45, 0, 0, 271, 0, 48, 48, 262, 0,
	0, 264, 300, 0, 0, 0, 306, 737, 315, 0,
	433, 430, 509, 0, 247, 256, 256, 0, 612, 613,
	0, 0, 0, 252, 254, 0, 0, 0, 335, 0,
	377, 375, 397, 0, 399, 0, 0, 0, 401, 392,
	0, 0, 387, 0, 386, 0, 0, 395, 0, 0,
	-2, 0, 555, -2, -2, 666, 673, 759, 359, 605,
	607, 608, 710, 655, 652, 0, 639, 623, 689, 0,
	0, 0, 0, 673, 669, 628, 0, 634, 635, 453,
	336, 32, 0, 199, 200, 203, 0, 205, 775, 207,
	214, 0, 217, 218, 215, 0, 34, 35, 44, 50,
	36, 42, 0, 0, 0, 0, 0, 321, 322, 0,
	220, 0, 259, 754, 0, 259, 0, 0, 0, 210,
	0, 185, 220, 0, 643, 645, 0, 398, 0, 417,
	400, 0, 0, 390, 0, 0, 404, -2, -2, 556,
	668, 0, 359, 0, 641, -2, 0, 0, 0, 671,
	0, 197, 0, 226, 0, 0, 0, 52, 0, 266,
	268, 0, 309, 428, 311, 208, 248, 249, 255, 250,
	256, 359, 220, 253, 243, 0, 0, 0, 0, 0,
	388, 385, 402, 606, 658, 0, -2, 0, 589, 633,
	204, 231, 0, 0, 0, 222, 38, 0, 49, 0,
	310, 259, 0, 209, 0, 646, 647, 416, 0, 0,
	0, 0, 654, 590, 206, 227, 228, 0, 223, 224,
	225, 774, 219, 226, 0, 51, 428, 251, 604, 220,
	408, 651, 656, 659, -2, 881, 802, 0, 657, 229,
	0, 230, 0, 0, 0, 231, 0, 308, 244, 0,
	661, 662, 663, 664, 665, 232, 0, 235, 236, 0,
	233, 216, 221, 0, 234, 237, 238, 660,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 275, 3, 281, 276, 3,
	286, 287, 279, 277, 290, 278, 288, 280, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 294, 289,
	269, 271, 270, 3, 291, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 284, 3, 285, 274, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 292, 273, 293, 283,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 272, 57612, 282, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:691
		{
			sqllex.(*scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:697
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:703
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 17:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:726
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 24:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:736
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 25:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:742
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.qname(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 26:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:746
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.qname(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 27:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:752
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 28:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:756
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 29:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:763
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 30:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:768
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 31:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:773
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 32:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:778
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 33:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:783
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: sqlDollar[3].str, Default: sqlDollar[4].union.expr()}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:788
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: sqlDollar[3].str}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:792
		{
			unimplemented()
		}
	case 36:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:795
		{
			sqlVAL.union.val = &AlterTableDropColumn{columnKeyword: sqlDollar[2].union.bool(), IfExists: true, Column: sqlDollar[5].str}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:800
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        sqlDollar[3].str,
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:810
		{
		}
	case 39:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:813
		{
			sqlVAL.union.val = &AlterTableAddConstraint{ConstraintDef: sqlDollar[2].union.constraintDef()}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:817
		{
			unimplemented()
		}
	case 41:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:819
		{
			unimplemented()
		}
	case 42:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:822
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   sqlDollar[5].str,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 43:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:831
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   sqlDollar[3].str,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 44:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:841
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 45:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:845
		{
			sqlVAL.union.val = nil
		}
	case 46:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:851
		{
			sqlVAL.union.val = DropCascade
		}
	case 47:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:855
		{
			sqlVAL.union.val = DropRestrict
		}
	case 48:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:859
		{
			sqlVAL.union.val = DropDefault
		}
	case 49:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:864
		{
			unimplementedWithIssue(2473)
		}
	case 50:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:865
		{
		}
	case 51:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:868
		{
			unimplemented()
		}
	case 52:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:869
		{
		}
	case 56:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:880
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retExprs()}
		}
	case 57:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:887
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 58:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:891
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:895
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:903
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:911
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.qnames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:915
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.qnames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:921
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:925
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 65:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:931
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 66:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:935
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:941
		{
			sqlVAL.union.val = Indirection{NameIndirection(sqlDollar[2].str)}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:945
		{
			sqlVAL.union.val = append(sqlDollar[1].union.indirect(), NameIndirection(sqlDollar[3].str))
		}
	case 69:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:952
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 70:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:956
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 71:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:962
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 78:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:971
		{ /* SKIP DOC */
		}
	case 79:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:975
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:979
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 82:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:989
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:999
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 84:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1003
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 85:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1009
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 89:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1019
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1030
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 91:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1034
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 92:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1041
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1047
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1053
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1057
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1064
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: NameList(sqlDollar[6].union.strs()), Targets: sqlDollar[4].union.targetList()}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1071
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: NameList(sqlDollar[6].union.strs()), Targets: sqlDollar[4].union.targetList()}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1078
		{
			sqlVAL.union.val = TargetList{Tables: QualifiedNames(sqlDollar[1].union.qnames())}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1082
		{
			sqlVAL.union.val = TargetList{Tables: QualifiedNames(sqlDollar[2].union.qnames())}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1086
		{
			sqlVAL.union.val = TargetList{Databases: NameList(sqlDollar[2].union.strs())}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1093
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1096
		{
		}
	case 103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1100
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1104
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 105:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1111
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 106:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1115
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1119
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1123
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1127
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 110:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1131
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 111:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1135
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 112:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1143
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1147
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1155
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1159
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 116:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1163
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1167
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1170
		{ /* SKIP DOC */
		}
	case 119:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1176
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1182
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1189
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1193
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1197
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1201
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1208
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1214
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname(), Values: sqlDollar[3].union.exprs()}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1218
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname(), Values: sqlDollar[3].union.exprs()}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1222
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname()}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1226
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname()}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1233
		{
			unimplemented()
		}
	case 133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1236
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1239
		{
			unimplemented()
		}
	case 136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1246
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1250
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1258
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1264
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1268
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1272
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1276
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1280
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1286
		{
			sqlVAL.union.val = Low
		}
	case 147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1290
		{
			sqlVAL.union.val = Normal
		}
	case 148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1294
		{
			sqlVAL.union.val = High
		}
	case 149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1300
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1304
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1308
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1323
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1327
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1331
		{
			d, err := ParseDInterval(sqlDollar[2].str)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1341
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1345
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1350
		{
			unimplemented()
		}
	case 160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1351
		{
			unimplemented()
		}
	case 161:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1352
		{
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1356
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1360
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1366
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1370
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1374
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.qname()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1378
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1382
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.strs()}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1386
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1390
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1394
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1398
		{
			sqlVAL.union.val = &ShowTables{Name: sqlDollar[3].union.qname()}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1402
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1406
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1410
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1414
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 177:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1418
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.qname()}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1424
		{
			sqlVAL.union.val = sqlDollar[2].union.qname()
		}
	case 179:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1428
		{
			sqlVAL.union.val = (*QualifiedName)(nil)
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1434
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 181:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1439
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1445
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 183:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1449
		{
			sqlVAL.union.val = []string(nil)
		}
	case 184:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1456
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.qname(), IfNotExists: false, Defs: sqlDollar[5].union.tblDefs()}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1460
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.qname(), IfNotExists: true, Defs: sqlDollar[8].union.tblDefs()}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1467
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 188:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1473
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1477
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 190:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1483
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 193:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1489
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1495
		{
			sqlVAL.union.val = newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
		}
	case 195:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1501
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 196:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1505
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1511
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1515
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1518
		{
			unimplemented()
		}
	case 200:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1534
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1538
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1542
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1546
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1550
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1554
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1558
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.qname(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1565
		{
			sqlVAL.union.val = &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1571
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.idxElems(),
				Storing: sqlDollar[6].union.strs(),
			}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1579
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:    Name(sqlDollar[3].str),
					Columns: sqlDollar[5].union.idxElems(),
					Storing: sqlDollar[7].union.strs(),
				},
			}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1591
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.famElems(),
			}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1603
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 212:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1608
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 213:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1614
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1620
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[3].union.strs()),
					Storing: sqlDollar[5].union.strs(),
				},
			}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1629
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[4].union.strs()),
				},
				PrimaryKey: true,
			}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1638
		{
			unimplemented()
		}
	case 219:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1655
		{
			sqlVAL.union.val = sqlDollar[3].union.strs()
		}
	case 220:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1659
		{
			sqlVAL.union.val = []string(nil)
		}
	case 221:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1665
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 222:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1669
		{
			sqlVAL.union.val = []string(nil)
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1674
		{
			unimplemented()
		}
	case 224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1675
		{
			unimplemented()
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1676
		{
			unimplemented()
		}
	case 226:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1677
		{
		}
	case 227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1684
		{
			unimplemented()
		}
	case 228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1685
		{
			unimplemented()
		}
	case 229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1686
		{
			unimplemented()
		}
	case 230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1687
		{
			unimplemented()
		}
	case 231:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1688
		{
		}
	case 232:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1691
		{
			unimplemented()
		}
	case 233:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1694
		{
			unimplemented()
		}
	case 234:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1697
		{
			unimplemented()
		}
	case 235:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1698
		{
			unimplemented()
		}
	case 236:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1699
		{
			unimplemented()
		}
	case 237:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1700
		{
			unimplemented()
		}
	case 238:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1701
		{
			unimplemented()
		}
	case 239:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1705
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1709
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 241:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1713
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 242:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1720
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.qnames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1727
		{
			sqlVAL.union.val = &CreateIndex{
				Name:    Name(sqlDollar[4].str),
				Table:   sqlDollar[6].union.qname(),
				Unique:  sqlDollar[2].union.bool(),
				Columns: sqlDollar[8].union.idxElems(),
				Storing: sqlDollar[10].union.strs(),
			}
		}
	case 244:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql.y:1737
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.qname(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.strs(),
			}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1750
		{
			sqlVAL.union.val = true
		}
	case 246:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1754
		{
			sqlVAL.union.val = false
		}
	case 247:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1760
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1764
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1773
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1776
		{
			unimplemented()
		}
	case 251:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1777
		{
			unimplemented()
		}
	case 252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1781
		{
			sqlVAL.union.val = FamilyElemList{sqlDollar[1].union.famElem()}
		}
	case 253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1785
		{
			sqlVAL.union.val = append(sqlDollar[1].union.famElems(), sqlDollar[3].union.famElem())
		}
	case 254:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1791
		{
			sqlVAL.union.val = FamilyElem{Column: Name(sqlDollar[1].str)}
		}
	case 255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1796
		{
			unimplemented()
		}
	case 256:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1797
		{
		}
	case 257:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1801
		{
			sqlVAL.union.val = Ascending
		}
	case 258:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1805
		{
			sqlVAL.union.val = Descending
		}
	case 259:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1809
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 260:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1816
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 261:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1820
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.qname(), NewName: sqlDollar[6].union.qname(), IfExists: false}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1824
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.qname(), NewName: sqlDollar[8].union.qname(), IfExists: true}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1828
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1832
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1836
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.qname(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1840
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.qname(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1844
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 268:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1848
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 269:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1854
		{
			sqlVAL.union.val = true
		}
	case 270:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1858
		{
			sqlVAL.union.val = false
		}
	case 271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1863
		{
		}
	case 272:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1864
		{
		}
	case 273:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1868
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1874
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1881
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 276:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1885
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 277:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1889
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1893
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1897
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1906
		{
		}
	case 281:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1907
		{
		}
	case 282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1911
		{
			sqlVAL.str = ""
		}
	case 283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1915
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1919
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 285:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1923
		{
			sqlVAL.str = ""
		}
	case 286:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1929
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 287:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1933
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 288:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1939
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1943
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1947
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1951
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1955
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1961
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 294:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1967
		{
			sqlVAL.union.val = &CreateDatabase{Name: Name(sqlDollar[3].str), Encoding: sqlDollar[4].union.strVal()}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1971
		{
			sqlVAL.union.val = &CreateDatabase{IfNotExists: true, Name: Name(sqlDollar[6].str), Encoding: sqlDollar[7].union.strVal()}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1977
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1980
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 298:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1990
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retExprs()
		}
	case 299:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1996
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
		}
	case 300:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2001
		{
			unimplementedWithIssue(6637)
		}
	case 301:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2003
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2008
		{
			unimplementedWithIssue(6637)
		}
	case 303:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2016
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname()}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2020
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2026
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2030
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.qnames(), Rows: sqlDollar[4].union.slct()}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2034
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2040
		{
			sqlVAL.union.val = &OnConflict{Columns: NameList(sqlDollar[3].union.strs()), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2044
		{
			sqlVAL.union.val = &OnConflict{Columns: NameList(sqlDollar[3].union.strs()), DoNothing: true}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2050
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2054
		{
			unimplemented()
		}
	case 312:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2056
		{
			sqlVAL.union.val = []string(nil)
		}
	case 313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2062
		{
			sqlVAL.union.val = sqlDollar[2].union.selExprs()
		}
	case 314:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2066
		{
			sqlVAL.union.val = SelectExprs(nil)
		}
	case 315:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2073
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retExprs()}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2079
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2083
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 320:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2093
		{
			sqlVAL.union.val = &UpdateExpr{Names: QualifiedNames{sqlDollar[1].union.qname()}, Expr: sqlDollar[3].union.expr()}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2105
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.qnames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2109
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.qnames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2153
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2159
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2163
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2178
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2182
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2186
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2190
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2194
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2198
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2232
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.tblExprs(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2244
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.tblExprs(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2256
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        TableExprs{&AliasedTableExpr{Expr: sqlDollar[2].union.qname()}},
				tableSelect: true,
			}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2264
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2273
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2282
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2300
		{
			unimplemented()
		}
	case 343:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2301
		{
			unimplemented()
		}
	case 344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2302
		{
			unimplemented()
		}
	case 345:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2305
		{
			unimplemented()
		}
	case 346:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2306
		{
			unimplemented()
		}
	case 347:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2309
		{
			unimplemented()
		}
	case 348:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2312
		{
			unimplemented()
		}
	case 349:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2313
		{
		}
	case 350:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2316
		{
		}
	case 351:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2317
		{
		}
	case 352:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2321
		{
			sqlVAL.union.val = true
		}
	case 353:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2325
		{
			sqlVAL.union.val = false
		}
	case 354:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2329
		{
			sqlVAL.union.val = false
		}
	case 355:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2335
		{
			sqlVAL.union.val = true
		}
	case 356:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2340
		{
		}
	case 357:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2341
		{
		}
	case 358:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2345
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 359:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2349
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 360:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2355
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 361:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2361
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2365
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2371
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2379
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2388
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2399
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2412
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2419
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2426
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 373:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2440
		{
		}
	case 374:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2441
		{
		}
	case 375:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2467
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 376:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2471
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2477
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 378:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2481
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2487
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2491
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2503
		{
			sqlVAL.union.val = sqlDollar[2].union.tblExprs()
		}
	case 382:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2507
		{
			sqlVAL.union.val = TableExprs(nil)
		}
	case 383:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2513
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2517
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2523
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2528
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2534
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2539
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			index := a.Index
			if index == "" {
				index = b.Index
			} else if b.Index != "" {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			noIndexJoin := a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = &IndexHints{Index: index, NoIndexJoin: noIndexJoin}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2559
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2563
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 391:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2567
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 392:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2574
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), Hints: sqlDollar[2].union.indexHints(), As: sqlDollar[3].union.aliasClause(), AsOf: sqlDollar[4].union.asOfClause()}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2578
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, As: sqlDollar[2].union.aliasClause()}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2582
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 395:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2586
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[2].union.tblExpr(), As: sqlDollar[4].union.aliasClause()}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2606
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2610
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2614
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2618
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2622
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2626
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2632
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: NameList(sqlDollar[4].union.strs())}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2636
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2640
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: NameList(sqlDollar[3].union.strs())}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2644
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2651
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2657
		{
			sqlVAL.union.val = AsOfClause{Expr: &StrVal{s: sqlDollar[5].str}}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2661
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2667
		{
			sqlVAL.str = astFullJoin
		}
	case 411:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2671
		{
			sqlVAL.str = astLeftJoin
		}
	case 412:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2675
		{
			sqlVAL.str = astRightJoin
		}
	case 413:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2679
		{
			sqlVAL.str = astInnerJoin
		}
	case 414:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2685
		{
		}
	case 415:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2686
		{
		}
	case 416:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2697
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: NameList(sqlDollar[3].union.strs())}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2701
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2707
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 419:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2711
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 420:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2715
		{
			sqlVAL.union.val = sqlDollar[2].union.qname()
		}
	case 421:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2719
		{
			sqlVAL.union.val = sqlDollar[3].union.qname()
		}
	case 422:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2725
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2729
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2742
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname()}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2746
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2750
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2756
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 428:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2760
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2772
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 430:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2776
		{
			unimplementedWithIssue(2115)
		}
	case 431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2777
		{
			unimplementedWithIssue(2115)
		}
	case 432:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2780
		{
			unimplementedWithIssue(2115)
		}
	case 433:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2781
		{
			unimplementedWithIssue(2115)
		}
	case 434:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2782
		{
		}
	case 440:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2790
		{
			unimplemented()
		}
	case 441:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2792
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 442:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2796
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2800
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 444:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2804
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 445:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2808
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 446:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2812
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 447:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2816
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 452:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2837
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2846
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2860
		{
			sqlVAL.union.val = nil
		}
	case 455:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2867
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 456:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2871
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 457:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2875
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 458:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2879
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 459:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2883
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2887
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 461:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2891
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newFloatColType(int(prec))
		}
	case 462:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2900
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 463:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2904
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2913
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2922
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2931
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 467:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2935
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 468:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2941
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 469:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2945
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2963
		{
			n, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newIntBitType(int(n))
		}
	case 475:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2974
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 480:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2990
		{
			n, err := sqlDollar[3].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3006
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 482:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3012
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 483:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3016
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 484:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3020
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 485:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3024
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 486:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3029
		{
		}
	case 487:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3030
		{
		}
	case 488:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3035
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 489:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3039
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 490:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3043
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 491:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3047
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 492:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3051
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 493:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3056
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 494:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3061
		{
			unimplemented()
		}
	case 495:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3062
		{
			unimplemented()
		}
	case 496:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3063
		{
			unimplemented()
		}
	case 497:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3064
		{
			unimplemented()
		}
	case 498:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3065
		{
			unimplemented()
		}
	case 499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3066
		{
			unimplemented()
		}
	case 500:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3067
		{
			unimplemented()
		}
	case 501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3068
		{
			unimplemented()
		}
	case 502:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3069
		{
			unimplemented()
		}
	case 503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3070
		{
			unimplemented()
		}
	case 504:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3071
		{
			unimplemented()
		}
	case 505:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3072
		{
			unimplemented()
		}
	case 506:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3073
		{
			unimplemented()
		}
	case 507:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3074
		{
		}
	case 508:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3077
		{
			unimplemented()
		}
	case 509:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3078
		{
			unimplemented()
		}
	case 511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3102
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3105
		{
			unimplemented()
		}
	case 513:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3106
		{
			unimplemented()
		}
	case 514:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3115
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3119
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3123
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3127
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3131
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3135
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3139
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3143
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3147
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3151
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3155
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3159
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3163
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3167
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3171
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3175
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3179
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3183
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3187
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3191
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3195
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3199
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3203
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3207
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3211
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3215
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3219
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3223
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3227
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3231
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3235
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3239
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3242
		{
			unimplemented()
		}
	case 547:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3244
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3248
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3252
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3256
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3260
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3264
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3268
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3272
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3276
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3280
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3284
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3288
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3292
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3296
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3300
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3304
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3321
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3325
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3329
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3333
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3337
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3341
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3345
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3349
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3353
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3357
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3361
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3365
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3369
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3373
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3377
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3381
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3385
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3389
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3393
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3397
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3401
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3405
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3409
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3413
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3417
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3421
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3425
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3437
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 593:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3442
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3446
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3452
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3456
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3460
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3466
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 601:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3470
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 602:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3474
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3482
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname()}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3486
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3489
		{
			unimplemented()
		}
	case 606:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3490
		{
			unimplemented()
		}
	case 607:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3492
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Type: All, Exprs: sqlDollar[4].union.exprs()}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3496
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Type: Distinct, Exprs: sqlDollar[4].union.exprs()}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3500
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Exprs: Exprs{StarExpr()}}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3513
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 611:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3517
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 612:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3526
		{
			unimplemented()
		}
	case 613:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3527
		{
			unimplemented()
		}
	case 614:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3531
		{
			unimplemented()
		}
	case 615:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3533
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3537
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3541
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3545
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3548
		{
			unimplemented()
		}
	case 620:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3549
		{
			unimplemented()
		}
	case 621:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3550
		{
			unimplemented()
		}
	case 622:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3551
		{
			unimplemented()
		}
	case 623:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3553
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3557
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3561
		{
			sqlVAL.union.val = &OverlayExpr{FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3565
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "STRPOS"}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3569
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3572
		{
			unimplemented()
		}
	case 629:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3574
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3578
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "LTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3582
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "RTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3586
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3590
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3594
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3598
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3602
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3606
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3610
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3616
		{
			unimplemented()
		}
	case 640:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3617
		{
		}
	case 641:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3620
		{
			unimplemented()
		}
	case 642:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3621
		{
		}
	case 643:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3625
		{
			unimplemented()
		}
	case 644:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3626
		{
		}
	case 645:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3629
		{
			unimplemented()
		}
	case 646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3630
		{
			unimplemented()
		}
	case 647:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3633
		{
			unimplemented()
		}
	case 648:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3636
		{
			unimplemented()
		}
	case 649:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3637
		{
			unimplemented()
		}
	case 650:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3638
		{
		}
	case 651:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3642
		{
			unimplemented()
		}
	case 652:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3653
		{
			unimplemented()
		}
	case 653:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3654
		{
		}
	case 654:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3657
		{
			unimplemented()
		}
	case 655:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3658
		{
		}
	case 656:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3666
		{
			unimplemented()
		}
	case 657:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3667
		{
			unimplemented()
		}
	case 658:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3668
		{
		}
	case 659:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3671
		{
			unimplemented()
		}
	case 660:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3672
		{
			unimplemented()
		}
	case 661:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3678
		{
			unimplemented()
		}
	case 662:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3679
		{
			unimplemented()
		}
	case 663:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3680
		{
			unimplemented()
		}
	case 664:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3681
		{
			unimplemented()
		}
	case 665:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3682
		{
			unimplemented()
		}
	case 666:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3693
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3697
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3701
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3707
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3711
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3717
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3758
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3762
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 674:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3768
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3772
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 676:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3778
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3782
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3786
		{
			sqlVAL.union.val = &Array{nil}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3792
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3796
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 681:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3802
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3824
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3828
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3834
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 692:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3841
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3845
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 694:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3862
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3866
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3870
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3874
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3878
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 699:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3882
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 700:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3888
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 701:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3894
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 702:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3900
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 703:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3904
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 704:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3908
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 705:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3914
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3918
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3929
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3936
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3940
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 710:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3946
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3952
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 712:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3956
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 714:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3963
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 715:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3969
		{
			sqlVAL.union.val = sqlDollar[1].union.indirectElem()
		}
	case 716:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3973
		{
			sqlVAL.union.val = sqlDollar[1].union.indirectElem()
		}
	case 717:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3977
		{
			sqlVAL.union.val = &ArrayIndirection{Begin: sqlDollar[2].union.expr()}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3981
		{
			sqlVAL.union.val = &ArrayIndirection{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr()}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3987
		{
			sqlVAL.union.val = NameIndirection(sqlDollar[2].str)
		}
	case 720:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3993
		{
			sqlVAL.union.val = qualifiedStar
		}
	case 721:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3999
		{
			sqlVAL.union.val = Indirection{sqlDollar[1].union.indirectElem()}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4003
		{
			sqlVAL.union.val = append(sqlDollar[1].union.indirect(), sqlDollar[2].union.indirectElem())
		}
	case 723:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4008
		{
		}
	case 724:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4009
		{
		}
	case 726:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4018
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4024
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4028
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 729:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4037
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 730:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4043
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4047
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 732:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4053
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4062
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4066
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4070
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 736:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4078
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4082
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 738:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4088
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4092
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 740:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4098
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4102
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 742:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4113
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4117
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4123
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.qname(), Index: Name(sqlDollar[3].str)}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4134
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4138
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: Indirection{sqlDollar[2].union.indirectElem()}}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4142
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: Indirection{sqlDollar[2].union.indirectElem()}}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4146
		{
			sqlVAL.union.val = &QualifiedName{Indirect: Indirection{unqualifiedStar}}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4152
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4156
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 751:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4162
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 752:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4165
		{
		}
	case 753:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4175
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4179
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4186
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 756:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4190
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 757:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4194
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4198
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4201
		{
			unimplemented()
		}
	case 760:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4203
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4207
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4211
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[5].str}, Type: sqlDollar[1].union.colType()}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4215
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 764:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4219
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 765:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4223
		{
			sqlVAL.union.val = DNull
		}
	case 767:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4230
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 768:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4234
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4256
		{
			sqlVAL.str = ""
		}
	case 774:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4262
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 775:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4266
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
