// Code generated by go yacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"go/constant"
	"go/token"

	"github.com/pkg/errors"

	"github.com/cockroachdb/cockroach/sql/privilege"
	"github.com/cockroachdb/cockroach/util"
)

var errUnimplemented = errors.New("unimplemented")

func unimplemented() {
	panic(errUnimplemented)
}

func unimplementedWithIssue(issue int) {
	panic(util.UnimplementedWithIssueErrorf(issue, ""))
}

//line sql.y:44

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new sytax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in two forms, depending on the
// type of the value being accessed. Values and pointers are directly
// type asserted from the empty interface, meaning that they will panic
// if the type assertion is incorrect. Interfaces are handled differently
// because a nil instance of an interface inserted into the empty interface
// becomes a nil instance of the empty interface and therefore will fail a
// direct type assertion. Instead, a guarded type assertion must be used,
// which returns nil if the type assertion fails.
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	return u.val.(*StrVal)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	if namePart, ok := u.val.(NamePart); ok {
		return namePart
	}
	return nil
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionName() FunctionName {
	return u.val.(FunctionName)
}
func (u *sqlSymUnion) normalizableFunctionName() NormalizableFunctionName {
	return NormalizableFunctionName{u.val.(FunctionName)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	if selectStmt, ok := u.val.(*Select); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	if selectStmt, ok := u.val.(SelectStatement); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	if constraintDef, ok := u.val.(ConstraintTableDef); ok {
		return constraintDef
	}
	return nil
}
func (u *sqlSymUnion) tblDef() TableDef {
	if tblDef, ok := u.val.(TableDef); ok {
		return tblDef
	}
	return nil
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	if colQual, ok := u.val.(NamedColumnQualification); ok {
		return colQual
	}
	return NamedColumnQualification{}
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	if colQual, ok := u.val.(ColumnQualification); ok {
		return colQual
	}
	return nil
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retExprs() ReturningExprs {
	return ReturningExprs(u.val.(SelectExprs))
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	if tblExpr, ok := u.val.(TableExpr); ok {
		return tblExpr
	}
	return nil
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	if joinCond, ok := u.val.(JoinCond); ok {
		return joinCond
	}
	return nil
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	if alterTableCmd, ok := u.val.(AlterTableCmd); ok {
		return alterTableCmd
	}
	return nil
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}

//line sql.y:309
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const DOT_DOT = 57353
const LESS_EQUALS = 57354
const GREATER_EQUALS = 57355
const NOT_EQUALS = 57356
const NOT_REGMATCH = 57357
const REGIMATCH = 57358
const NOT_REGIMATCH = 57359
const ERROR = 57360
const ACTION = 57361
const ADD = 57362
const ALL = 57363
const ALTER = 57364
const ANALYSE = 57365
const ANALYZE = 57366
const AND = 57367
const ANY = 57368
const ANNOTATE_TYPE = 57369
const ARRAY = 57370
const AS = 57371
const ASC = 57372
const ASYMMETRIC = 57373
const AT = 57374
const BEGIN = 57375
const BETWEEN = 57376
const BIGINT = 57377
const BIGSERIAL = 57378
const BIT = 57379
const BLOB = 57380
const BOOL = 57381
const BOOLEAN = 57382
const BOTH = 57383
const BY = 57384
const BYTEA = 57385
const BYTES = 57386
const CASCADE = 57387
const CASE = 57388
const CAST = 57389
const CHAR = 57390
const CHARACTER = 57391
const CHARACTERISTICS = 57392
const CHECK = 57393
const COALESCE = 57394
const COLLATE = 57395
const COLLATION = 57396
const COLUMN = 57397
const COLUMNS = 57398
const COMMIT = 57399
const COMMITTED = 57400
const CONCAT = 57401
const CONFLICT = 57402
const CONSTRAINT = 57403
const CONSTRAINTS = 57404
const COVERING = 57405
const CREATE = 57406
const CROSS = 57407
const CUBE = 57408
const CURRENT = 57409
const CURRENT_CATALOG = 57410
const CURRENT_DATE = 57411
const CURRENT_ROLE = 57412
const CURRENT_TIME = 57413
const CURRENT_TIMESTAMP = 57414
const CURRENT_USER = 57415
const CYCLE = 57416
const DATA = 57417
const DATABASE = 57418
const DATABASES = 57419
const DATE = 57420
const DAY = 57421
const DEC = 57422
const DECIMAL = 57423
const DEFAULT = 57424
const DEALLOCATE = 57425
const DEFERRABLE = 57426
const DELETE = 57427
const DESC = 57428
const DISTINCT = 57429
const DO = 57430
const DOUBLE = 57431
const DROP = 57432
const ELSE = 57433
const ENCODING = 57434
const END = 57435
const ESCAPE = 57436
const EXCEPT = 57437
const EXISTS = 57438
const EXECUTE = 57439
const EXPLAIN = 57440
const EXTRACT = 57441
const FALSE = 57442
const FAMILY = 57443
const FETCH = 57444
const FILTER = 57445
const FIRST = 57446
const FLOAT = 57447
const FLOORDIV = 57448
const FOLLOWING = 57449
const FOR = 57450
const FORCE_INDEX = 57451
const FOREIGN = 57452
const FROM = 57453
const FULL = 57454
const GRANT = 57455
const GRANTS = 57456
const GREATEST = 57457
const GROUP = 57458
const GROUPING = 57459
const HAVING = 57460
const HIGH = 57461
const HOUR = 57462
const IF = 57463
const IFNULL = 57464
const ILIKE = 57465
const IN = 57466
const INTERLEAVE = 57467
const INDEX = 57468
const INDEXES = 57469
const INITIALLY = 57470
const INNER = 57471
const INSERT = 57472
const INT = 57473
const INT64 = 57474
const INTEGER = 57475
const INTERSECT = 57476
const INTERVAL = 57477
const INTO = 57478
const IS = 57479
const ISOLATION = 57480
const JOIN = 57481
const KEY = 57482
const KEYS = 57483
const LATERAL = 57484
const LEADING = 57485
const LEAST = 57486
const LEFT = 57487
const LEVEL = 57488
const LIKE = 57489
const LIMIT = 57490
const LOCAL = 57491
const LOCALTIME = 57492
const LOCALTIMESTAMP = 57493
const LOW = 57494
const LSHIFT = 57495
const MATCH = 57496
const MINUTE = 57497
const MONTH = 57498
const NAME = 57499
const NAMES = 57500
const NATURAL = 57501
const NEXT = 57502
const NO = 57503
const NO_INDEX_JOIN = 57504
const NORMAL = 57505
const NOT = 57506
const NOTHING = 57507
const NULL = 57508
const NULLIF = 57509
const NULLS = 57510
const NUMERIC = 57511
const OF = 57512
const OFF = 57513
const OFFSET = 57514
const ON = 57515
const ONLY = 57516
const OR = 57517
const ORDER = 57518
const ORDINALITY = 57519
const OUT = 57520
const OUTER = 57521
const OVER = 57522
const OVERLAPS = 57523
const OVERLAY = 57524
const PARENT = 57525
const PARTIAL = 57526
const PARTITION = 57527
const PLACING = 57528
const POSITION = 57529
const PRECEDING = 57530
const PRECISION = 57531
const PREPARE = 57532
const PRIMARY = 57533
const PRIORITY = 57534
const RANGE = 57535
const READ = 57536
const REAL = 57537
const RECURSIVE = 57538
const REF = 57539
const REFERENCES = 57540
const RENAME = 57541
const REPEATABLE = 57542
const RELEASE = 57543
const RESTRICT = 57544
const RETURNING = 57545
const REVOKE = 57546
const RIGHT = 57547
const ROLLBACK = 57548
const ROLLUP = 57549
const ROW = 57550
const ROWS = 57551
const RSHIFT = 57552
const SAVEPOINT = 57553
const SEARCH = 57554
const SECOND = 57555
const SELECT = 57556
const SERIAL = 57557
const SERIALIZABLE = 57558
const SESSION = 57559
const SESSION_USER = 57560
const SET = 57561
const SHOW = 57562
const SIMILAR = 57563
const SIMPLE = 57564
const SMALLINT = 57565
const SMALLSERIAL = 57566
const SNAPSHOT = 57567
const SOME = 57568
const SQL = 57569
const START = 57570
const STRICT = 57571
const STRING = 57572
const STORING = 57573
const SUBSTRING = 57574
const SYMMETRIC = 57575
const SYSTEM = 57576
const TABLE = 57577
const TABLES = 57578
const TEXT = 57579
const THEN = 57580
const TIME = 57581
const TIMESTAMP = 57582
const TIMESTAMPTZ = 57583
const TO = 57584
const TRAILING = 57585
const TRANSACTION = 57586
const TREAT = 57587
const TRIM = 57588
const TRUE = 57589
const TRUNCATE = 57590
const TYPE = 57591
const UNBOUNDED = 57592
const UNCOMMITTED = 57593
const UNION = 57594
const UNIQUE = 57595
const UNKNOWN = 57596
const UPDATE = 57597
const UPSERT = 57598
const USER = 57599
const USING = 57600
const VALID = 57601
const VALIDATE = 57602
const VALUE = 57603
const VALUES = 57604
const VARCHAR = 57605
const VARIADIC = 57606
const VARYING = 57607
const WHEN = 57608
const WHERE = 57609
const WINDOW = 57610
const WITH = 57611
const WITHIN = 57612
const WITHOUT = 57613
const YEAR = 57614
const ZONE = 57615
const NOT_LA = 57616
const WITH_LA = 57617
const AS_LA = 57618
const POSTFIXOP = 57619
const UMINUS = 57620

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPLAIN",
	"EXTRACT",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HOUR",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SQL",
	"START",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:4675

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 24,
	297, 24,
	-2, 353,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 38,
	1, 328,
	173, 328,
	203, 328,
	295, 328,
	297, 328,
	-2, 338,
	-1, 51,
	1, 331,
	173, 331,
	203, 331,
	295, 331,
	297, 331,
	-2, 337,
	-1, 60,
	1, 24,
	297, 24,
	-2, 353,
	-1, 271,
	1, 161,
	297, 161,
	-2, 847,
	-1, 304,
	148, 363,
	172, 363,
	-2, 334,
	-1, 307,
	148, 362,
	172, 362,
	-2, 332,
	-1, 429,
	148, 362,
	172, 362,
	-2, 335,
	-1, 485,
	294, 787,
	-2, 780,
	-1, 486,
	294, 788,
	-2, 781,
	-1, 492,
	5, 497,
	294, 497,
	-2, 934,
	-1, 515,
	5, 463,
	-2, 910,
	-1, 516,
	5, 491,
	294, 491,
	-2, 912,
	-1, 517,
	5, 471,
	-2, 913,
	-1, 518,
	5, 470,
	-2, 914,
	-1, 519,
	5, 491,
	294, 491,
	-2, 917,
	-1, 520,
	5, 491,
	294, 491,
	-2, 918,
	-1, 521,
	5, 492,
	-2, 921,
	-1, 522,
	5, 458,
	-2, 922,
	-1, 523,
	5, 458,
	-2, 923,
	-1, 524,
	5, 473,
	-2, 926,
	-1, 525,
	5, 459,
	-2, 931,
	-1, 526,
	5, 460,
	-2, 932,
	-1, 527,
	5, 461,
	-2, 933,
	-1, 528,
	5, 458,
	-2, 937,
	-1, 529,
	5, 464,
	-2, 942,
	-1, 530,
	5, 462,
	-2, 945,
	-1, 531,
	5, 489,
	294, 489,
	-2, 947,
	-1, 532,
	5, 493,
	-2, 950,
	-1, 533,
	5, 495,
	-2, 951,
	-1, 534,
	5, 488,
	294, 488,
	-2, 955,
	-1, 852,
	95, 338,
	134, 338,
	148, 338,
	172, 338,
	176, 338,
	252, 338,
	-2, 607,
	-1, 860,
	294, 765,
	-2, 754,
	-1, 1050,
	12, 0,
	13, 0,
	14, 0,
	277, 0,
	278, 0,
	279, 0,
	-2, 531,
	-1, 1051,
	12, 0,
	13, 0,
	14, 0,
	277, 0,
	278, 0,
	279, 0,
	-2, 532,
	-1, 1052,
	12, 0,
	13, 0,
	14, 0,
	277, 0,
	278, 0,
	279, 0,
	-2, 533,
	-1, 1056,
	12, 0,
	13, 0,
	14, 0,
	277, 0,
	278, 0,
	279, 0,
	-2, 537,
	-1, 1057,
	12, 0,
	13, 0,
	14, 0,
	277, 0,
	278, 0,
	279, 0,
	-2, 538,
	-1, 1058,
	12, 0,
	13, 0,
	14, 0,
	277, 0,
	278, 0,
	279, 0,
	-2, 539,
	-1, 1061,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 544,
	-1, 1067,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 546,
	-1, 1070,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 551,
	-1, 1071,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 552,
	-1, 1072,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 553,
	-1, 1097,
	181, 678,
	-2, 681,
	-1, 1260,
	95, 338,
	134, 338,
	148, 338,
	172, 338,
	176, 338,
	252, 338,
	-2, 411,
	-1, 1264,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 545,
	-1, 1265,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 547,
	-1, 1270,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 548,
	-1, 1288,
	181, 677,
	-2, 680,
	-1, 1446,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 549,
	-1, 1451,
	137, 0,
	-2, 563,
	-1, 1459,
	181, 679,
	-2, 682,
	-1, 1492,
	12, 0,
	13, 0,
	14, 0,
	277, 0,
	278, 0,
	279, 0,
	-2, 588,
	-1, 1493,
	12, 0,
	13, 0,
	14, 0,
	277, 0,
	278, 0,
	279, 0,
	-2, 589,
	-1, 1494,
	12, 0,
	13, 0,
	14, 0,
	277, 0,
	278, 0,
	279, 0,
	-2, 590,
	-1, 1498,
	12, 0,
	13, 0,
	14, 0,
	277, 0,
	278, 0,
	279, 0,
	-2, 594,
	-1, 1499,
	12, 0,
	13, 0,
	14, 0,
	277, 0,
	278, 0,
	279, 0,
	-2, 595,
	-1, 1500,
	12, 0,
	13, 0,
	14, 0,
	277, 0,
	278, 0,
	279, 0,
	-2, 596,
	-1, 1603,
	137, 0,
	-2, 564,
	-1, 1606,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 567,
	-1, 1607,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 569,
	-1, 1693,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 568,
	-1, 1694,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 570,
	-1, 1701,
	137, 0,
	-2, 597,
	-1, 1746,
	137, 0,
	-2, 598,
	-1, 1799,
	34, 0,
	123, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 909,
}

const sqlNprod = 1049
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 23384

var sqlAct = [...]int{

	486, 1798, 1778, 1414, 1822, 934, 576, 1752, 1646, 1779,
	1797, 1780, 1023, 942, 1470, 1669, 1589, 1530, 855, 804,
	1681, 589, 1595, 308, 484, 1570, 1032, 330, 1569, 272,
	483, 476, 84, 84, 84, 678, 85, 84, 547, 1007,
	84, 1004, 1582, 1343, 37, 1257, 448, 590, 84, 17,
	782, 1425, 1291, 1256, 1342, 84, 84, 535, 1189, 84,
	1247, 857, 84, 84, 84, 1006, 785, 1435, 84, 84,
	84, 84, 943, 356, 1031, 919, 1143, 556, 1146, 1241,
	73, 1107, 973, 553, 910, 1083, 966, 1035, 1080, 652,
	999, 315, 50, 957, 636, 1195, 800, 458, 313, 449,
	351, 417, 23, 418, 13, 307, 548, 6, 558, 357,
	549, 663, 353, 891, 633, 8, 7, 313, 1033, 5,
	806, 71, 50, 4, 1010, 349, 346, 318, 432, 887,
	358, 936, 348, 78, 431, 77, 433, 259, 79, 632,
	654, 650, 250, 569, 342, 316, 80, 75, 1688, 312,
	74, 1689, 50, 51, 76, 52, 970, 1829, 1814, 935,
	1027, 1027, 312, 1255, 1286, 578, 578, 578, 1795, 1287,
	1786, 1668, 478, 1027, 939, 436, 1776, 326, 1771, 963,
	333, 1027, 1285, 1245, 354, 297, 343, 976, 1748, 1742,
	1201, 963, 1027, 60, 567, 1732, 336, 971, 1668, 976,
	1722, 320, 809, 1027, 305, 1244, 304, 838, 839, 840,
	1695, 1692, 1678, 963, 1027, 1668, 269, 1676, 1667, 1651,
	1027, 1668, 1027, 1736, 811, 1671, 842, 1650, 537, 807,
	1027, 1628, 972, 969, 976, 1608, 1202, 1314, 976, 1331,
	1332, 1333, 1244, 808, 1605, 810, 84, 963, 1505, 1458,
	1542, 825, 1602, 1027, 1455, 1314, 1400, 976, 1227, 1394,
	1393, 84, 908, 1394, 84, 84, 1360, 1358, 1229, 1361,
	976, 1290, 1357, 1356, 1288, 976, 976, 976, 809, 1028,
	985, 1027, 1027, 976, 976, 975, 1328, 978, 976, 962,
	974, 907, 963, 584, 906, 1091, 585, 84, 816, 84,
	811, 84, 1022, 84, 1328, 550, 56, 993, 443, 551,
	444, 56, 776, 775, 644, 835, 843, 643, 84, 459,
	382, 810, 579, 579, 579, 325, 551, 58, 430, 84,
	424, 550, 58, 1319, 677, 551, 402, 1796, 1793, 833,
	84, 84, 84, 1785, 84, 826, 1743, 1677, 546, 968,
	1633, 1319, 1629, 542, 59, 1621, 581, 429, 1620, 59,
	1619, 54, 1614, 1613, 1334, 1612, 54, 55, 390, 541,
	391, 967, 55, 1567, 816, 84, 56, 1560, 327, 1520,
	1329, 327, 84, 338, 84, 1515, 938, 327, 1514, 338,
	1513, 53, 863, 809, 1461, 356, 356, 58, 1329, 1444,
	1424, 1404, 827, 680, 84, 1365, 84, 84, 84, 84,
	84, 84, 84, 836, 1362, 811, 84, 423, 582, 577,
	779, 84, 1350, 1201, 59, 1341, 1313, 84, 1310, 778,
	807, 357, 357, 1308, 421, 1296, 810, 1330, 1295, 681,
	1314, 1228, 1231, 1160, 1114, 84, 1113, 443, 84, 1088,
	442, 1788, 358, 358, 1472, 1330, 53, 630, 343, 1762,
	682, 1735, 1714, 445, 550, 1712, 834, 642, 551, 305,
	1703, 304, 1685, 821, 818, 819, 820, 812, 813, 814,
	815, 817, 1674, 837, 568, 571, 439, 440, 1665, 816,
	860, 1643, 1626, 586, 1598, 1577, 1450, 1443, 1559, 1421,
	1420, 1419, 1417, 1377, 1325, 1326, 1327, 313, 1324, 1321,
	1322, 1323, 1315, 1316, 1317, 1318, 1320, 1376, 1402, 1340,
	809, 858, 1304, 640, 1303, 639, 1324, 1321, 1322, 1323,
	1315, 1316, 1317, 1318, 1320, 1089, 1319, 667, 674, 809,
	1282, 854, 811, 1278, 1085, 766, 84, 1216, 1174, 596,
	1173, 1153, 680, 812, 813, 814, 815, 817, 777, 837,
	84, 811, 790, 810, 84, 788, 1112, 84, 84, 789,
	673, 1026, 802, 84, 892, 84, 84, 895, 84, 899,
	885, 84, 810, 84, 84, 902, 356, 904, 681, 884,
	305, 536, 796, 305, 305, 797, 798, 81, 883, 913,
	882, 881, 880, 879, 878, 618, 877, 876, 875, 682,
	1174, 874, 952, 351, 873, 872, 816, 871, 327, 937,
	763, 937, 357, 767, 768, 769, 770, 771, 870, 861,
	859, 53, 774, 780, 73, 84, 84, 893, 958, 49,
	331, 447, 896, 358, 388, 924, 926, 378, 544, 889,
	890, 376, 1566, 1565, 1210, 980, 1314, 1209, 543, 327,
	570, 570, 900, 826, 809, 29, 1364, 416, 1690, 1564,
	814, 815, 817, 30, 837, 396, 50, 1203, 680, 491,
	50, 864, 929, 539, 916, 1017, 809, 78, 1363, 77,
	1263, 960, 79, 959, 327, 970, 961, 354, 955, 932,
	80, 75, 412, 941, 74, 471, 954, 951, 76, 953,
	950, 397, 868, 998, 681, 1315, 1316, 1317, 1318, 1320,
	827, 1314, 1583, 897, 538, 935, 893, 898, 896, 810,
	1473, 1129, 1108, 1119, 1299, 682, 971, 82, 243, 244,
	888, 1197, 261, 1758, 981, 273, 987, 986, 982, 979,
	1809, 1721, 1319, 261, 1810, 1550, 890, 889, 984, 1223,
	319, 319, 262, 296, 329, 295, 84, 329, 335, 329,
	290, 972, 969, 329, 344, 329, 273, 291, 1659, 1658,
	84, 84, 559, 920, 560, 1389, 311, 1275, 1369, 56,
	1368, 821, 818, 819, 820, 812, 813, 814, 815, 817,
	1273, 837, 64, 1266, 1401, 1215, 394, 1214, 1122, 84,
	58, 84, 1029, 1213, 1212, 302, 1068, 1319, 1314, 977,
	837, 931, 930, 420, 1683, 310, 559, 1157, 560, 974,
	1156, 559, 1039, 560, 415, 374, 299, 59, 1586, 1760,
	1038, 1720, 923, 395, 54, 680, 1082, 65, 1082, 1123,
	55, 1379, 561, 1648, 912, 572, 1819, 1037, 672, 671,
	1388, 665, 660, 974, 1329, 901, 1271, 312, 912, 53,
	1276, 1773, 68, 1190, 911, 1020, 1021, 1391, 1002, 1001,
	1086, 681, 578, 327, 1124, 1121, 338, 1774, 968, 1199,
	1224, 1188, 946, 565, 902, 1406, 561, 338, 1003, 902,
	338, 561, 682, 1782, 1825, 564, 1159, 1030, 1715, 1108,
	84, 84, 84, 1409, 1319, 393, 84, 886, 1699, 84,
	1095, 1330, 69, 922, 1809, 84, 84, 84, 84, 84,
	1407, 84, 84, 1317, 1318, 1320, 675, 1092, 1096, 84,
	1099, 84, 1125, 309, 851, 837, 1194, 1272, 84, 1087,
	1104, 379, 1222, 1666, 1274, 1169, 1138, 84, 1205, 419,
	1206, 1329, 1150, 1151, 1152, 1171, 384, 837, 617, 273,
	273, 974, 67, 66, 300, 1783, 1190, 1818, 84, 84,
	1380, 1302, 596, 313, 84, 921, 62, 1653, 974, 624,
	1163, 81, 303, 1436, 356, 1192, 1315, 1316, 1317, 1318,
	1320, 1120, 261, 676, 329, 1185, 273, 1184, 427, 312,
	557, 1208, 84, 1784, 84, 84, 84, 1164, 1330, 84,
	1823, 1649, 562, 319, 1781, 392, 385, 387, 84, 488,
	357, 70, 435, 49, 329, 84, 63, 84, 618, 579,
	1808, 1386, 1806, 1204, 1233, 329, 329, 329, 1268, 573,
	1081, 358, 1314, 1065, 1581, 909, 595, 1015, 1817, 29,
	620, 1824, 1230, 1262, 1232, 405, 562, 30, 1218, 383,
	381, 562, 1624, 1219, 1220, 1207, 958, 1429, 1826, 393,
	329, 313, 434, 1225, 1226, 1652, 1221, 637, 1501, 637,
	596, 1641, 1323, 1315, 1316, 1317, 1318, 1320, 1835, 327,
	1709, 619, 413, 1546, 1371, 1168, 435, 1538, 1250, 273,
	1016, 637, 273, 273, 273, 273, 273, 772, 50, 1238,
	1239, 273, 787, 1289, 1261, 1253, 261, 989, 327, 960,
	313, 959, 784, 991, 961, 1434, 596, 1549, 1539, 666,
	661, 1251, 1063, 1066, 1548, 61, 618, 809, 1319, 992,
	319, 781, 1269, 805, 1267, 1625, 414, 1596, 990, 1405,
	1753, 434, 1642, 649, 1281, 1502, 1062, 1176, 1283, 811,
	773, 1503, 645, 1175, 1592, 84, 1431, 1430, 392, 313,
	1293, 1294, 1834, 56, 426, 1545, 341, 1383, 1298, 1385,
	810, 340, 618, 310, 1375, 1329, 647, 1415, 1568, 1426,
	1242, 1252, 84, 84, 58, 1639, 1396, 648, 1111, 1702,
	1597, 1623, 1344, 1339, 1449, 1345, 1309, 1347, 1348, 1349,
	1534, 1277, 1535, 983, 1352, 1640, 1547, 411, 84, 1165,
	84, 59, 84, 410, 409, 408, 84, 1390, 54, 1366,
	1064, 407, 406, 816, 55, 84, 1395, 1537, 1373, 84,
	403, 329, 1330, 339, 1540, 84, 680, 869, 1196, 84,
	765, 84, 1110, 72, 1777, 917, 1750, 1196, 452, 329,
	1387, 1428, 329, 933, 1397, 1432, 327, 1398, 329, 1527,
	948, 949, 1418, 329, 1384, 1184, 329, 1399, 273, 273,
	826, 1440, 681, 1382, 1370, 1416, 1408, 1410, 1411, 1235,
	1452, 1018, 1014, 84, 1423, 956, 583, 580, 1439, 1536,
	1433, 575, 566, 682, 563, 1467, 1463, 1464, 1465, 1437,
	1438, 786, 1660, 1324, 1321, 1322, 1323, 1315, 1316, 1317,
	1318, 1320, 1810, 437, 323, 1234, 1024, 399, 669, 912,
	637, 805, 912, 1662, 928, 927, 3, 827, 925, 1460,
	1078, 1392, 1671, 1717, 1476, 1477, 327, 1474, 289, 1745,
	1427, 1456, 1481, 1076, 441, 1737, 1479, 940, 803, 84,
	84, 84, 247, 641, 588, 631, 965, 84, 84, 1832,
	1833, 1314, 809, 84, 1521, 84, 1508, 84, 84, 84,
	84, 1412, 1025, 1403, 1512, 84, 1543, 1544, 1509, 438,
	324, 617, 1359, 292, 293, 1211, 592, 332, 258, 1158,
	1526, 995, 994, 1155, 400, 1154, 1105, 1246, 1522, 1506,
	84, 84, 812, 813, 814, 815, 817, 1074, 837, 1073,
	1516, 84, 84, 1079, 996, 84, 1738, 1610, 1557, 1578,
	1466, 1236, 1575, 1561, 84, 84, 1575, 997, 1574, 1576,
	1580, 596, 1574, 1576, 862, 1563, 298, 1587, 1588, 1647,
	249, 1593, 1579, 1599, 1250, 764, 404, 1616, 1772, 1301,
	1698, 1000, 1604, 84, 1680, 1109, 867, 28, 251, 596,
	596, 1253, 1246, 1572, 464, 329, 917, 596, 1528, 595,
	1600, 1248, 1372, 620, 1009, 1008, 683, 1251, 670, 256,
	659, 487, 248, 653, 252, 662, 1585, 618, 1118, 617,
	1075, 1249, 540, 489, 329, 593, 273, 1077, 490, 596,
	594, 946, 327, 1622, 894, 1591, 477, 253, 84, 1250,
	84, 591, 84, 84, 619, 618, 618, 352, 1243, 944,
	1106, 84, 1297, 618, 255, 251, 1253, 865, 463, 469,
	468, 1093, 375, 460, 1594, 617, 1248, 1252, 1656, 1657,
	84, 1637, 1251, 1254, 327, 1634, 256, 1635, 327, 809,
	40, 252, 389, 267, 268, 618, 1249, 1193, 1558, 1661,
	1019, 791, 84, 1381, 84, 301, 1311, 377, 1672, 1136,
	1670, 811, 1663, 84, 253, 1128, 1126, 595, 1655, 84,
	1117, 620, 1575, 422, 552, 1684, 1675, 945, 1574, 1576,
	1590, 255, 810, 401, 1200, 329, 1166, 1167, 1691, 1687,
	964, 917, 1252, 596, 1172, 446, 799, 1787, 254, 322,
	1177, 1178, 1180, 1182, 1183, 1697, 1186, 1187, 321, 1005,
	84, 398, 619, 595, 329, 646, 1198, 620, 1704, 988,
	1713, 294, 1711, 329, 1707, 1716, 1378, 1757, 57, 84,
	84, 22, 329, 84, 20, 816, 19, 84, 18, 257,
	16, 15, 84, 14, 21, 12, 1725, 11, 10, 618,
	9, 1733, 1727, 1000, 637, 1729, 84, 1734, 619, 1000,
	1708, 680, 27, 1575, 1726, 254, 26, 450, 450, 1574,
	1576, 1728, 25, 2, 795, 1739, 1553, 554, 1, 902,
	313, 1740, 826, 84, 1562, 84, 84, 784, 84, 784,
	273, 329, 1744, 596, 1237, 1747, 1741, 681, 1761, 1763,
	0, 0, 0, 1240, 1755, 0, 257, 84, 1767, 0,
	1259, 1766, 329, 0, 0, 0, 1764, 1759, 682, 0,
	327, 327, 1770, 1731, 327, 1765, 0, 1769, 0, 0,
	1575, 84, 0, 84, 1768, 0, 1574, 1576, 0, 827,
	1794, 0, 0, 0, 1790, 0, 0, 1792, 84, 618,
	0, 0, 1791, 0, 0, 1803, 0, 0, 0, 84,
	1807, 1805, 0, 0, 0, 1811, 1813, 0, 0, 596,
	0, 1816, 0, 0, 1815, 0, 0, 0, 1812, 0,
	792, 794, 1279, 1280, 1828, 1827, 0, 801, 0, 1831,
	0, 1830, 0, 0, 1775, 0, 0, 0, 0, 846,
	847, 848, 849, 850, 1836, 0, 0, 0, 853, 592,
	809, 818, 819, 820, 812, 813, 814, 815, 817, 0,
	837, 0, 0, 0, 0, 618, 0, 0, 866, 0,
	1645, 0, 811, 1336, 1337, 1338, 0, 0, 0, 0,
	617, 0, 0, 0, 0, 0, 596, 0, 0, 0,
	805, 0, 0, 810, 0, 1314, 0, 1331, 1332, 1333,
	0, 0, 0, 0, 0, 0, 0, 0, 617, 617,
	1601, 1679, 0, 0, 0, 0, 617, 329, 329, 0,
	0, 0, 327, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 903, 0, 0, 0,
	0, 0, 618, 1413, 1328, 917, 816, 784, 617, 0,
	0, 1422, 0, 0, 0, 0, 0, 592, 1314, 0,
	329, 0, 0, 0, 329, 0, 0, 0, 595, 0,
	1259, 0, 620, 0, 1442, 0, 1259, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1319, 0, 826, 0, 0, 595, 595, 0, 0,
	620, 620, 0, 592, 595, 0, 0, 0, 620, 1447,
	1448, 0, 0, 619, 0, 0, 0, 0, 1471, 0,
	0, 0, 1334, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 595, 0, 1329, 0,
	620, 619, 619, 0, 0, 1756, 0, 0, 0, 619,
	827, 0, 617, 0, 1319, 0, 0, 1482, 1483, 1484,
	1485, 1486, 1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494,
	1495, 1496, 1497, 1498, 1499, 1500, 0, 1504, 0, 0,
	0, 619, 0, 0, 1524, 1525, 917, 0, 0, 0,
	946, 0, 805, 805, 0, 1330, 0, 0, 1551, 0,
	1552, 1329, 329, 1554, 1555, 1556, 0, 0, 0, 0,
	329, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 820, 812, 813, 814, 815, 817,
	0, 837, 0, 1571, 0, 805, 917, 1571, 0, 0,
	595, 0, 0, 809, 620, 0, 329, 329, 0, 0,
	329, 0, 617, 0, 0, 1130, 0, 0, 1330, 805,
	1259, 0, 1325, 1326, 1327, 811, 1324, 1321, 1322, 1323,
	1315, 1316, 1317, 1318, 1320, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 619, 810, 0, 1617, 0,
	0, 0, 825, 450, 0, 0, 0, 0, 1040, 1041,
	1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051,
	1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061,
	0, 1067, 0, 1069, 1070, 1071, 1072, 0, 617, 0,
	1321, 1322, 1323, 1315, 1316, 1317, 1318, 1320, 0, 816,
	595, 0, 0, 917, 620, 1636, 0, 273, 1638, 465,
	38, 0, 0, 0, 0, 0, 329, 0, 1115, 1116,
	0, 1127, 0, 1137, 1139, 1144, 1147, 1148, 1149, 0,
	0, 0, 0, 0, 0, 805, 0, 0, 0, 0,
	38, 1644, 0, 0, 0, 619, 826, 0, 0, 0,
	0, 0, 554, 1571, 0, 0, 0, 329, 0, 1682,
	306, 0, 0, 314, 0, 617, 0, 0, 329, 0,
	38, 0, 0, 0, 805, 0, 595, 0, 592, 0,
	620, 1191, 314, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 827, 0, 0, 592, 592, 0, 1314,
	0, 1331, 1332, 1333, 592, 784, 0, 0, 0, 1130,
	1130, 619, 1217, 0, 0, 1701, 0, 0, 0, 0,
	0, 0, 0, 0, 1718, 1719, 0, 0, 1723, 0,
	0, 0, 1724, 0, 1571, 0, 592, 273, 0, 0,
	0, 0, 0, 595, 0, 0, 0, 620, 1328, 0,
	0, 805, 0, 0, 0, 0, 0, 0, 801, 0,
	1130, 1130, 1130, 0, 821, 818, 819, 820, 812, 813,
	814, 815, 817, 0, 837, 0, 0, 0, 1754, 0,
	805, 329, 0, 273, 0, 0, 0, 0, 619, 0,
	0, 0, 0, 0, 1746, 1319, 0, 0, 1264, 1265,
	0, 1571, 1682, 0, 1270, 0, 0, 0, 0, 0,
	0, 24, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 42, 0, 0, 0, 329, 1284, 805, 0,
	0, 0, 0, 0, 0, 0, 1292, 0, 0, 0,
	592, 0, 1329, 1804, 1300, 0, 44, 0, 1305, 0,
	0, 0, 0, 49, 805, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	853, 0, 33, 0, 0, 0, 1144, 1144, 1144, 29,
	0, 0, 45, 0, 0, 0, 32, 30, 0, 0,
	0, 0, 0, 0, 0, 0, 1130, 1130, 1367, 1330,
	0, 0, 34, 0, 0, 0, 0, 0, 0, 1374,
	0, 0, 0, 0, 0, 306, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 450, 0, 0, 0,
	0, 0, 0, 0, 0, 450, 0, 0, 0, 554,
	592, 0, 0, 0, 1130, 1130, 1130, 1130, 1130, 1130,
	1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130,
	1130, 1130, 1130, 0, 1130, 0, 1325, 1326, 1327, 0,
	1324, 1321, 1322, 1323, 1315, 1316, 1317, 1318, 1320, 31,
	0, 0, 809, 0, 828, 829, 830, 838, 839, 840,
	47, 0, 0, 35, 0, 46, 0, 831, 0, 1445,
	36, 0, 1446, 56, 811, 0, 842, 0, 39, 41,
	0, 0, 0, 1451, 0, 0, 592, 43, 0, 1538,
	0, 1531, 0, 0, 58, 810, 1217, 0, 0, 1529,
	0, 825, 1533, 0, 0, 1468, 306, 48, 0, 306,
	306, 0, 0, 0, 0, 1478, 0, 0, 1480, 0,
	1539, 59, 0, 0, 0, 0, 0, 0, 54, 0,
	0, 0, 852, 0, 55, 0, 856, 0, 0, 1532,
	0, 0, 0, 0, 0, 0, 0, 0, 816, 0,
	1510, 1511, 0, 53, 0, 274, 0, 0, 0, 1517,
	1518, 1519, 0, 592, 0, 835, 843, 0, 0, 0,
	0, 0, 287, 0, 0, 0, 0, 0, 0, 841,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 833,
	0, 0, 0, 0, 0, 826, 0, 450, 0, 0,
	0, 0, 1534, 0, 1535, 0, 0, 276, 0, 0,
	0, 0, 281, 282, 0, 288, 0, 832, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 275, 277, 1537,
	0, 0, 1584, 0, 0, 0, 1540, 0, 1130, 38,
	0, 38, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 827, 0, 38, 1603, 0, 0, 38, 1606,
	1607, 0, 0, 836, 1609, 278, 0, 0, 1611, 0,
	0, 0, 0, 0, 0, 1615, 0, 279, 280, 1618,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1536, 283, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1627, 0, 0, 0, 0, 834, 0, 0, 822,
	823, 824, 1130, 821, 818, 819, 820, 812, 813, 814,
	815, 817, 0, 837, 0, 1161, 0, 0, 0, 0,
	0, 0, 0, 809, 1162, 828, 829, 830, 838, 839,
	840, 0, 0, 0, 1654, 0, 0, 0, 831, 0,
	0, 0, 0, 0, 0, 811, 0, 842, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 809, 1673,
	828, 829, 830, 838, 839, 840, 810, 284, 0, 0,
	285, 0, 825, 831, 0, 286, 0, 1686, 0, 0,
	811, 1130, 842, 0, 0, 0, 0, 1693, 1694, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 810, 0, 0, 0, 0, 809, 825, 828, 829,
	830, 838, 839, 840, 0, 0, 1706, 0, 0, 816,
	0, 831, 0, 0, 0, 0, 0, 0, 811, 1710,
	842, 0, 0, 0, 0, 0, 835, 843, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 810,
	841, 554, 0, 0, 816, 825, 0, 0, 1034, 0,
	833, 0, 0, 0, 0, 0, 826, 0, 0, 0,
	0, 835, 843, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 841, 0, 0, 832, 0,
	0, 0, 0, 1084, 0, 833, 0, 0, 0, 0,
	0, 826, 816, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1314, 0, 1331, 1332, 1333, 835,
	843, 0, 0, 827, 0, 0, 0, 0, 1314, 1454,
	1331, 1332, 1333, 841, 836, 0, 0, 0, 0, 0,
	0, 0, 0, 833, 1789, 0, 0, 0, 0, 826,
	0, 0, 0, 0, 0, 0, 0, 0, 827, 1802,
	1802, 0, 0, 1328, 1314, 0, 1331, 1332, 1333, 836,
	0, 832, 0, 0, 0, 0, 0, 1328, 0, 1453,
	0, 0, 0, 0, 0, 1802, 0, 834, 314, 0,
	822, 823, 824, 0, 821, 818, 819, 820, 812, 813,
	814, 815, 817, 0, 837, 0, 827, 0, 0, 0,
	1319, 1630, 1314, 1328, 1331, 1332, 1333, 836, 1802, 0,
	0, 0, 834, 0, 1319, 822, 823, 824, 0, 821,
	818, 819, 820, 812, 813, 814, 815, 817, 0, 837,
	0, 1334, 1335, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1334, 0, 1329, 0, 0,
	1319, 1328, 0, 0, 0, 0, 0, 0, 0, 0,
	834, 1329, 0, 822, 823, 824, 38, 821, 818, 819,
	820, 812, 813, 814, 815, 817, 1260, 837, 0, 0,
	0, 1334, 0, 0, 1355, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1329, 1319, 0,
	0, 0, 0, 0, 1330, 0, 1084, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1330, 0,
	0, 0, 0, 0, 0, 852, 0, 0, 0, 1334,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1329, 0, 0, 0, 0,
	0, 0, 0, 0, 1330, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1325, 1326, 1327, 852, 1324, 1321, 1322, 1323, 1315,
	1316, 1317, 1318, 1320, 0, 1325, 1326, 1327, 0, 1324,
	1321, 1322, 1323, 1315, 1316, 1317, 1318, 1320, 0, 0,
	0, 0, 1330, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1325, 1326, 1327, 0, 1324, 1321, 1322, 1323, 1315,
	1316, 1317, 1318, 1320, 0, 0, 0, 0, 0, 0,
	0, 0, 1034, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1325,
	1326, 1327, 0, 1324, 1321, 1322, 1323, 1315, 1316, 1317,
	1318, 1320, 0, 0, 1034, 0, 0, 0, 1034, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 485, 474, 475,
	472, 473, 461, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 87, 0, 88, 0, 0, 0, 0,
	501, 467, 0, 0, 0, 89, 90, 0, 515, 198,
	516, 91, 517, 518, 0, 92, 202, 203, 93, 482,
	500, 519, 520, 206, 0, 511, 0, 493, 0, 94,
	95, 96, 0, 97, 0, 98, 99, 0, 361, 100,
	1801, 0, 494, 496, 0, 495, 497, 102, 103, 104,
	105, 521, 106, 522, 523, 0, 107, 0, 108, 0,
	0, 0, 514, 110, 0, 111, 0, 0, 0, 466,
	112, 113, 502, 480, 0, 0, 114, 115, 524, 0,
	116, 0, 117, 38, 0, 362, 0, 118, 512, 0,
	215, 0, 119, 120, 508, 510, 0, 0, 123, 0,
	121, 0, 363, 122, 525, 526, 527, 0, 492, 0,
	0, 124, 366, 125, 126, 0, 0, 513, 367, 127,
	1034, 1034, 128, 0, 1034, 129, 0, 130, 131, 132,
	133, 134, 369, 135, 136, 139, 137, 456, 138, 481,
	509, 140, 528, 141, 142, 0, 0, 0, 0, 0,
	143, 225, 370, 144, 371, 503, 145, 146, 147, 0,
	504, 148, 228, 149, 0, 150, 151, 152, 529, 153,
	154, 0, 156, 157, 155, 158, 0, 159, 372, 160,
	161, 470, 162, 0, 163, 164, 165, 0, 231, 166,
	167, 498, 168, 169, 0, 170, 530, 233, 171, 0,
	172, 173, 175, 531, 174, 505, 0, 176, 0, 177,
	178, 0, 236, 532, 533, 0, 0, 179, 506, 507,
	479, 180, 181, 1800, 183, 0, 0, 184, 185, 186,
	499, 0, 187, 188, 189, 241, 534, 0, 190, 0,
	0, 0, 0, 191, 192, 193, 194, 0, 0, 0,
	0, 0, 0, 0, 1664, 0, 0, 0, 453, 454,
	0, 0, 0, 0, 455, 0, 0, 462, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1034, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	679, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 87, 684, 88, 685,
	686, 687, 688, 195, 689, 690, 691, 692, 89, 90,
	196, 197, 198, 199, 91, 200, 201, 693, 92, 202,
	203, 93, 694, 695, 204, 205, 206, 696, 207, 697,
	360, 698, 94, 95, 96, 852, 97, 699, 98, 99,
	700, 361, 100, 101, 701, 702, 703, 704, 705, 706,
	102, 103, 104, 105, 208, 106, 209, 210, 707, 107,
	708, 108, 709, 710, 711, 109, 110, 712, 111, 713,
	0, 714, 211, 112, 113, 212, 715, 716, 717, 114,
	115, 213, 0, 116, 718, 117, 719, 720, 362, 721,
	118, 214, 722, 215, 723, 119, 120, 216, 217, 364,
	724, 123, 725, 121, 726, 363, 122, 218, 219, 220,
	727, 221, 728, 365, 124, 366, 125, 126, 729, 730,
	222, 367, 127, 368, 731, 128, 732, 733, 129, 0,
	130, 131, 132, 133, 134, 369, 135, 136, 139, 137,
	734, 138, 735, 223, 140, 224, 141, 142, 736, 737,
	738, 739, 740, 143, 225, 370, 144, 371, 226, 145,
	146, 147, 741, 227, 148, 228, 149, 742, 150, 151,
	152, 229, 153, 154, 743, 156, 157, 155, 158, 744,
	159, 372, 160, 161, 230, 162, 0, 163, 164, 165,
	745, 231, 166, 167, 746, 168, 169, 373, 170, 232,
	233, 171, 747, 172, 173, 175, 234, 174, 235, 748,
	176, 749, 177, 178, 750, 236, 237, 238, 751, 752,
	179, 239, 240, 753, 180, 181, 182, 183, 754, 755,
	184, 185, 186, 756, 757, 187, 188, 189, 241, 242,
	758, 190, 759, 760, 761, 762, 191, 192, 193, 194,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 679, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1441, 86, 87, 684,
	88, 685, 686, 687, 688, 195, 689, 690, 691, 692,
	89, 90, 196, 197, 198, 199, 91, 200, 201, 693,
	92, 202, 203, 93, 694, 695, 204, 205, 206, 696,
	207, 697, 360, 698, 94, 95, 96, 0, 97, 699,
	98, 99, 700, 361, 100, 101, 701, 702, 703, 704,
	705, 706, 102, 103, 104, 105, 208, 106, 209, 210,
	707, 107, 708, 108, 709, 710, 711, 109, 110, 712,
	111, 713, 0, 714, 211, 112, 113, 212, 715, 716,
	717, 114, 115, 213, 0, 116, 718, 117, 719, 720,
	362, 721, 118, 214, 722, 215, 723, 119, 120, 216,
	217, 364, 724, 123, 725, 121, 726, 363, 122, 218,
	219, 220, 727, 221, 728, 365, 124, 366, 125, 126,
	729, 730, 222, 367, 127, 368, 731, 128, 732, 733,
	129, 0, 130, 131, 132, 133, 134, 369, 135, 136,
	139, 137, 734, 138, 735, 223, 140, 224, 141, 142,
	736, 737, 738, 739, 740, 143, 225, 370, 144, 371,
	226, 145, 146, 147, 741, 227, 148, 228, 149, 742,
	150, 151, 152, 229, 153, 154, 743, 156, 157, 155,
	158, 744, 159, 372, 160, 161, 230, 162, 0, 163,
	164, 165, 745, 231, 166, 167, 746, 168, 169, 373,
	170, 232, 233, 171, 747, 172, 173, 175, 234, 174,
	235, 748, 176, 749, 177, 178, 750, 236, 237, 238,
	751, 752, 179, 239, 240, 753, 180, 181, 182, 183,
	754, 755, 184, 185, 186, 756, 757, 187, 188, 189,
	241, 242, 758, 190, 759, 760, 761, 762, 191, 192,
	193, 194, 679, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 905, 0, 86, 87, 684,
	88, 685, 686, 687, 688, 195, 689, 690, 691, 692,
	89, 90, 196, 197, 198, 199, 91, 200, 201, 693,
	92, 202, 203, 93, 694, 695, 204, 205, 206, 696,
	207, 697, 360, 698, 94, 95, 96, 0, 97, 699,
	98, 99, 700, 361, 100, 101, 701, 702, 703, 704,
	705, 706, 102, 103, 104, 105, 208, 106, 209, 210,
	707, 107, 708, 108, 709, 710, 711, 109, 110, 712,
	111, 713, 0, 714, 211, 112, 113, 212, 715, 716,
	717, 114, 115, 213, 0, 116, 718, 117, 719, 720,
	362, 721, 118, 214, 722, 215, 723, 119, 120, 216,
	217, 364, 724, 123, 725, 121, 726, 363, 122, 218,
	219, 220, 727, 221, 728, 365, 124, 366, 125, 126,
	729, 730, 222, 367, 127, 368, 731, 128, 732, 733,
	129, 0, 130, 131, 132, 133, 134, 369, 135, 136,
	139, 137, 734, 138, 735, 223, 140, 224, 141, 142,
	736, 737, 738, 739, 740, 143, 225, 370, 144, 371,
	226, 145, 146, 147, 741, 227, 148, 228, 149, 742,
	150, 151, 152, 229, 153, 154, 743, 156, 157, 155,
	158, 744, 159, 372, 160, 161, 230, 162, 0, 163,
	164, 165, 745, 231, 166, 167, 746, 168, 169, 373,
	170, 232, 233, 171, 747, 172, 173, 175, 234, 174,
	235, 748, 176, 749, 177, 178, 750, 236, 237, 238,
	751, 752, 179, 239, 240, 753, 180, 181, 182, 183,
	754, 755, 184, 185, 186, 756, 757, 187, 188, 189,
	241, 242, 758, 190, 759, 760, 761, 762, 191, 192,
	193, 194, 485, 474, 475, 472, 473, 461, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 87, 1101,
	88, 0, 0, 0, 0, 501, 467, 0, 0, 0,
	89, 90, 196, 515, 198, 516, 91, 517, 518, 0,
	92, 202, 203, 93, 482, 500, 519, 520, 206, 0,
	511, 0, 493, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 361, 100, 101, 0, 494, 496, 0,
	495, 497, 102, 103, 104, 105, 521, 106, 522, 523,
	0, 107, 0, 108, 0, 1102, 0, 514, 110, 0,
	111, 0, 0, 0, 466, 112, 113, 502, 480, 0,
	0, 114, 115, 524, 0, 116, 0, 117, 0, 0,
	362, 0, 118, 512, 0, 215, 0, 119, 120, 508,
	510, 364, 0, 123, 0, 121, 0, 363, 122, 525,
	526, 527, 0, 492, 0, 365, 124, 366, 125, 126,
	0, 0, 513, 367, 127, 368, 0, 128, 0, 0,
	129, 0, 130, 131, 132, 133, 134, 369, 135, 136,
	139, 137, 456, 138, 481, 509, 140, 528, 141, 142,
	0, 0, 0, 0, 0, 143, 225, 370, 144, 371,
	503, 145, 146, 147, 0, 504, 148, 228, 149, 0,
	150, 151, 152, 529, 153, 154, 0, 156, 157, 155,
	158, 0, 159, 372, 160, 161, 470, 162, 0, 163,
	164, 165, 0, 231, 166, 167, 498, 168, 169, 373,
	170, 530, 233, 171, 0, 172, 173, 175, 531, 174,
	505, 0, 176, 0, 177, 178, 0, 236, 532, 533,
	0, 0, 179, 506, 507, 479, 180, 181, 182, 183,
	0, 0, 184, 185, 186, 499, 0, 187, 188, 189,
	241, 534, 1100, 190, 0, 0, 0, 0, 191, 192,
	193, 194, 457, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 453, 454, 1103, 0, 0, 0, 455,
	0, 0, 462, 1098, 485, 474, 475, 472, 473, 461,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	87, 0, 88, 0, 0, 0, 0, 501, 467, 0,
	0, 0, 89, 90, 196, 515, 198, 516, 91, 517,
	518, 0, 92, 202, 203, 93, 482, 500, 519, 520,
	206, 0, 511, 0, 493, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 361, 100, 101, 0, 494,
	496, 0, 495, 497, 102, 103, 104, 105, 521, 106,
	522, 523, 555, 107, 0, 108, 0, 0, 0, 514,
	110, 0, 111, 0, 0, 0, 466, 112, 113, 502,
	480, 0, 0, 114, 115, 524, 0, 116, 0, 117,
	0, 0, 362, 0, 118, 512, 0, 215, 0, 119,
	120, 508, 510, 364, 0, 123, 0, 121, 0, 363,
	122, 525, 526, 527, 0, 492, 0, 365, 124, 366,
	125, 126, 0, 0, 513, 367, 127, 368, 0, 128,
	0, 0, 129, 0, 130, 131, 132, 133, 134, 369,
	135, 136, 139, 137, 456, 138, 481, 509, 140, 528,
	141, 142, 0, 0, 0, 0, 0, 143, 225, 370,
	144, 371, 503, 145, 146, 147, 0, 504, 148, 228,
	149, 0, 150, 151, 152, 529, 153, 154, 0, 156,
	157, 155, 158, 0, 159, 372, 160, 161, 470, 162,
	0, 163, 164, 165, 56, 231, 166, 167, 498, 168,
	169, 373, 170, 530, 233, 171, 0, 172, 173, 175,
	531, 174, 505, 0, 176, 58, 177, 178, 0, 236,
	532, 533, 0, 0, 179, 506, 507, 479, 180, 181,
	182, 183, 0, 0, 184, 185, 186, 499, 0, 187,
	188, 189, 359, 534, 0, 190, 0, 0, 0, 54,
	191, 192, 193, 194, 457, 55, 0, 485, 474, 475,
	472, 473, 461, 0, 0, 453, 454, 0, 0, 0,
	0, 455, 86, 87, 462, 88, 0, 0, 0, 0,
	501, 467, 0, 0, 0, 89, 90, 196, 515, 198,
	516, 91, 517, 518, 0, 92, 202, 203, 93, 482,
	500, 519, 520, 206, 0, 511, 0, 493, 0, 94,
	95, 96, 0, 97, 0, 98, 99, 0, 361, 100,
	101, 0, 494, 496, 0, 495, 497, 102, 103, 104,
	105, 521, 106, 522, 523, 0, 107, 0, 108, 0,
	0, 0, 514, 110, 0, 111, 0, 0, 0, 466,
	112, 113, 502, 480, 0, 0, 114, 115, 524, 0,
	116, 0, 117, 0, 0, 362, 0, 118, 512, 0,
	215, 0, 119, 120, 508, 510, 364, 0, 123, 0,
	121, 0, 363, 122, 525, 526, 527, 0, 492, 0,
	365, 124, 366, 125, 126, 0, 0, 513, 367, 127,
	368, 0, 128, 0, 0, 129, 0, 130, 131, 132,
	133, 134, 369, 135, 136, 139, 137, 456, 138, 481,
	509, 140, 528, 141, 142, 0, 0, 0, 0, 0,
	143, 225, 370, 144, 371, 503, 145, 146, 147, 0,
	504, 148, 228, 149, 0, 150, 151, 152, 529, 153,
	154, 0, 156, 157, 155, 158, 0, 159, 372, 160,
	161, 470, 162, 0, 163, 164, 165, 56, 231, 166,
	167, 498, 168, 169, 373, 170, 530, 233, 171, 0,
	172, 173, 175, 531, 174, 505, 0, 176, 58, 177,
	178, 0, 236, 532, 533, 0, 0, 179, 506, 507,
	479, 180, 181, 182, 183, 0, 0, 184, 185, 186,
	499, 0, 187, 188, 189, 359, 534, 0, 190, 0,
	0, 0, 54, 191, 192, 193, 194, 457, 55, 0,
	485, 474, 475, 472, 473, 461, 0, 0, 453, 454,
	0, 0, 0, 0, 455, 86, 87, 462, 88, 0,
	0, 0, 0, 501, 467, 0, 0, 0, 89, 90,
	196, 515, 198, 516, 91, 517, 518, 1140, 92, 202,
	203, 93, 482, 500, 519, 520, 206, 0, 511, 0,
	493, 0, 94, 95, 96, 0, 97, 0, 98, 99,
	0, 361, 100, 101, 0, 494, 496, 0, 495, 497,
	102, 103, 104, 105, 521, 106, 522, 523, 0, 107,
	0, 108, 0, 0, 0, 514, 110, 0, 111, 0,
	0, 0, 466, 112, 113, 502, 480, 0, 0, 114,
	115, 524, 0, 116, 0, 117, 0, 1145, 362, 0,
	118, 512, 0, 215, 0, 119, 120, 508, 510, 364,
	0, 123, 0, 121, 0, 363, 122, 525, 526, 527,
	0, 492, 0, 365, 124, 366, 125, 126, 0, 1141,
	513, 367, 127, 368, 0, 128, 0, 0, 129, 0,
	130, 131, 132, 133, 134, 369, 135, 136, 139, 137,
	456, 138, 481, 509, 140, 528, 141, 142, 0, 0,
	0, 0, 0, 143, 225, 370, 144, 371, 503, 145,
	146, 147, 0, 504, 148, 228, 149, 0, 150, 151,
	152, 529, 153, 154, 0, 156, 157, 155, 158, 0,
	159, 372, 160, 161, 470, 162, 0, 163, 164, 165,
	0, 231, 166, 167, 498, 168, 169, 373, 170, 530,
	233, 171, 0, 172, 173, 175, 531, 174, 505, 0,
	176, 0, 177, 178, 0, 236, 532, 533, 0, 1142,
	179, 506, 507, 479, 180, 181, 182, 183, 0, 0,
	184, 185, 186, 499, 0, 187, 188, 189, 241, 534,
	0, 190, 0, 0, 0, 0, 191, 192, 193, 194,
	457, 0, 0, 485, 474, 475, 472, 473, 461, 0,
	0, 453, 454, 0, 0, 0, 0, 455, 86, 87,
	462, 88, 0, 0, 0, 0, 501, 467, 0, 0,
	0, 89, 90, 196, 515, 198, 516, 91, 517, 518,
	0, 92, 202, 203, 93, 482, 500, 519, 520, 206,
	0, 511, 0, 493, 0, 94, 95, 96, 0, 97,
	0, 98, 99, 0, 361, 100, 101, 0, 494, 496,
	0, 495, 497, 102, 103, 104, 105, 521, 106, 522,
	523, 0, 107, 0, 108, 0, 0, 0, 514, 110,
	0, 111, 0, 0, 0, 466, 112, 113, 502, 480,
	0, 0, 114, 115, 524, 0, 116, 0, 117, 0,
	0, 362, 0, 118, 512, 0, 215, 0, 119, 120,
	508, 510, 364, 0, 123, 0, 121, 0, 363, 122,
	525, 526, 527, 0, 492, 0, 365, 124, 366, 125,
	126, 0, 0, 513, 367, 127, 368, 0, 128, 0,
	0, 129, 0, 130, 131, 132, 133, 134, 369, 135,
	136, 139, 137, 456, 138, 481, 509, 140, 528, 141,
	142, 0, 0, 0, 0, 0, 143, 225, 370, 144,
	371, 503, 145, 146, 147, 0, 504, 148, 228, 149,
	0, 150, 151, 152, 529, 153, 154, 0, 156, 157,
	155, 158, 0, 159, 372, 160, 161, 470, 162, 0,
	163, 164, 165, 0, 231, 166, 167, 498, 168, 169,
	373, 170, 530, 233, 171, 0, 172, 173, 175, 531,
	174, 505, 0, 176, 0, 177, 178, 0, 236, 532,
	533, 0, 0, 179, 506, 507, 479, 180, 181, 182,
	183, 0, 0, 184, 185, 186, 499, 0, 187, 188,
	189, 241, 534, 0, 190, 0, 0, 0, 0, 191,
	192, 193, 194, 457, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 453, 454, 0, 0, 0, 0,
	455, 0, 0, 462, 1507, 485, 474, 475, 472, 473,
	461, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 87, 0, 88, 0, 0, 0, 0, 501, 467,
	0, 0, 0, 89, 90, 196, 515, 198, 516, 91,
	517, 518, 0, 92, 202, 203, 93, 482, 500, 519,
	520, 206, 0, 511, 0, 493, 0, 94, 95, 96,
	0, 97, 0, 98, 99, 0, 361, 100, 101, 0,
	494, 496, 0, 495, 497, 102, 103, 104, 105, 521,
	106, 522, 523, 0, 107, 0, 108, 0, 0, 0,
	514, 110, 0, 111, 0, 0, 0, 466, 112, 113,
	502, 480, 0, 0, 114, 115, 524, 0, 116, 0,
	117, 0, 0, 362, 0, 118, 512, 0, 215, 0,
	119, 120, 508, 510, 364, 0, 123, 0, 121, 0,
	363, 122, 525, 526, 527, 0, 492, 0, 365, 124,
	366, 125, 126, 0, 0, 513, 367, 127, 368, 0,
	128, 0, 0, 129, 0, 130, 131, 132, 133, 134,
	369, 135, 136, 139, 137, 456, 138, 481, 509, 140,
	528, 141, 142, 0, 0, 0, 0, 0, 143, 225,
	370, 144, 371, 503, 145, 146, 147, 0, 504, 148,
	228, 149, 0, 150, 151, 152, 529, 153, 154, 0,
	156, 157, 155, 158, 0, 159, 372, 160, 161, 470,
	162, 0, 163, 164, 165, 0, 231, 166, 167, 498,
	168, 169, 373, 170, 530, 233, 171, 0, 172, 173,
	175, 531, 174, 505, 0, 176, 0, 177, 178, 0,
	236, 532, 533, 0, 0, 179, 506, 507, 479, 180,
	181, 182, 183, 0, 0, 184, 185, 186, 499, 0,
	187, 188, 189, 241, 534, 0, 190, 0, 0, 0,
	0, 191, 192, 193, 194, 457, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 453, 454, 0, 0,
	0, 0, 455, 0, 0, 462, 1457, 485, 474, 475,
	472, 473, 461, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 87, 0, 88, 0, 0, 0, 0,
	501, 467, 0, 0, 0, 89, 90, 196, 515, 198,
	516, 91, 517, 518, 0, 92, 202, 203, 93, 482,
	500, 519, 520, 206, 0, 511, 0, 493, 0, 94,
	95, 96, 0, 97, 0, 98, 99, 0, 361, 100,
	101, 0, 494, 496, 0, 495, 497, 102, 103, 104,
	105, 521, 106, 522, 523, 0, 107, 0, 108, 0,
	0, 0, 514, 110, 0, 111, 0, 0, 0, 466,
	112, 113, 502, 480, 0, 0, 114, 115, 524, 0,
	116, 0, 117, 0, 0, 362, 0, 118, 512, 0,
	215, 0, 119, 120, 508, 510, 364, 0, 123, 0,
	121, 0, 363, 122, 525, 526, 527, 0, 492, 0,
	365, 124, 366, 125, 126, 0, 0, 513, 367, 127,
	368, 0, 128, 0, 0, 129, 0, 130, 131, 132,
	133, 134, 369, 135, 136, 139, 137, 456, 138, 481,
	509, 140, 528, 141, 142, 0, 0, 0, 0, 0,
	143, 225, 370, 144, 371, 503, 145, 146, 147, 0,
	504, 148, 228, 149, 0, 150, 151, 152, 529, 153,
	154, 0, 156, 157, 155, 158, 0, 159, 372, 160,
	161, 470, 162, 0, 163, 164, 165, 0, 231, 166,
	167, 498, 168, 169, 373, 170, 530, 233, 171, 0,
	172, 173, 175, 531, 174, 505, 0, 176, 0, 177,
	178, 0, 236, 532, 533, 0, 0, 179, 506, 507,
	479, 180, 181, 182, 183, 0, 0, 184, 185, 186,
	499, 0, 187, 188, 189, 241, 534, 0, 190, 0,
	0, 0, 0, 191, 192, 193, 194, 457, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 453, 454,
	0, 0, 0, 0, 455, 0, 0, 462, 1097, 485,
	474, 475, 472, 473, 461, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 87, 0, 88, 0, 0,
	0, 0, 501, 467, 0, 0, 0, 89, 90, 196,
	515, 198, 516, 91, 517, 518, 0, 92, 202, 203,
	93, 482, 500, 519, 520, 206, 0, 511, 0, 493,
	0, 94, 95, 96, 0, 97, 0, 98, 99, 0,
	361, 100, 101, 0, 494, 496, 0, 495, 497, 102,
	103, 104, 105, 521, 106, 522, 523, 0, 107, 0,
	108, 0, 0, 0, 514, 110, 0, 111, 0, 0,
	0, 466, 112, 113, 502, 480, 0, 0, 114, 115,
	524, 0, 116, 0, 117, 0, 0, 362, 0, 118,
	512, 0, 215, 0, 119, 120, 508, 510, 364, 0,
	123, 0, 121, 0, 363, 122, 525, 526, 527, 0,
	492, 0, 365, 124, 366, 125, 126, 0, 0, 513,
	367, 127, 368, 0, 128, 0, 0, 129, 0, 130,
	131, 132, 133, 134, 369, 135, 136, 139, 137, 456,
	138, 481, 509, 140, 528, 141, 142, 0, 0, 0,
	0, 0, 143, 225, 370, 144, 371, 503, 145, 146,
	147, 0, 504, 148, 228, 149, 0, 150, 151, 152,
	529, 153, 154, 0, 156, 157, 155, 158, 0, 159,
	372, 160, 161, 470, 162, 0, 163, 164, 165, 0,
	231, 166, 167, 498, 168, 169, 373, 170, 530, 233,
	171, 0, 172, 173, 175, 531, 174, 505, 0, 176,
	0, 177, 178, 0, 236, 532, 533, 0, 0, 179,
	506, 507, 479, 180, 181, 182, 183, 0, 0, 184,
	185, 186, 499, 0, 187, 188, 189, 241, 534, 0,
	190, 0, 0, 0, 0, 191, 192, 193, 194, 457,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	453, 454, 0, 0, 0, 0, 455, 858, 1094, 462,
	485, 474, 475, 472, 473, 461, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 87, 0, 88, 0,
	0, 0, 0, 501, 467, 0, 0, 0, 89, 90,
	196, 515, 198, 516, 91, 517, 518, 0, 92, 202,
	203, 93, 482, 500, 519, 520, 206, 0, 511, 0,
	493, 0, 94, 95, 96, 0, 97, 0, 98, 99,
	0, 361, 100, 101, 0, 494, 496, 0, 495, 497,
	102, 103, 104, 105, 521, 106, 522, 523, 0, 107,
	0, 108, 0, 0, 0, 514, 110, 0, 111, 0,
	0, 0, 466, 112, 113, 502, 480, 0, 0, 114,
	115, 524, 0, 116, 0, 117, 0, 0, 362, 0,
	118, 512, 0, 215, 0, 119, 120, 508, 510, 364,
	0, 123, 0, 121, 0, 363, 122, 525, 526, 527,
	0, 492, 0, 365, 124, 366, 125, 126, 0, 0,
	513, 367, 127, 368, 0, 128, 0, 0, 129, 0,
	130, 131, 132, 133, 134, 369, 135, 136, 139, 137,
	456, 138, 481, 509, 140, 528, 141, 142, 0, 0,
	0, 0, 0, 143, 225, 370, 144, 371, 503, 145,
	146, 147, 0, 504, 148, 228, 149, 0, 150, 151,
	152, 529, 153, 154, 0, 156, 157, 155, 158, 0,
	159, 372, 160, 161, 470, 162, 0, 163, 164, 165,
	0, 231, 166, 167, 498, 168, 169, 373, 170, 530,
	233, 171, 0, 172, 173, 175, 531, 174, 505, 0,
	176, 0, 177, 178, 0, 236, 532, 533, 0, 0,
	179, 506, 507, 479, 180, 181, 182, 183, 0, 0,
	184, 185, 186, 499, 0, 187, 188, 189, 241, 534,
	0, 190, 0, 0, 0, 0, 191, 192, 193, 194,
	457, 0, 0, 485, 474, 475, 472, 473, 461, 0,
	0, 453, 454, 451, 0, 0, 0, 455, 86, 87,
	462, 88, 0, 0, 0, 0, 501, 467, 0, 0,
	0, 89, 90, 196, 515, 198, 516, 91, 517, 518,
	0, 92, 202, 203, 93, 482, 500, 519, 520, 206,
	0, 511, 0, 493, 0, 94, 95, 96, 0, 97,
	0, 98, 99, 0, 361, 100, 101, 0, 494, 496,
	0, 495, 497, 102, 103, 104, 105, 521, 106, 522,
	523, 0, 107, 0, 108, 0, 0, 0, 514, 110,
	0, 111, 0, 0, 0, 466, 112, 113, 502, 480,
	0, 0, 114, 115, 524, 0, 116, 0, 117, 0,
	0, 362, 0, 118, 512, 0, 215, 0, 119, 120,
	508, 510, 364, 0, 123, 0, 121, 0, 363, 122,
	525, 526, 527, 0, 492, 0, 365, 124, 366, 125,
	126, 0, 0, 513, 367, 127, 368, 0, 128, 0,
	0, 129, 0, 130, 131, 132, 133, 134, 369, 135,
	136, 139, 137, 456, 138, 481, 509, 140, 528, 141,
	142, 0, 0, 0, 0, 0, 143, 225, 370, 144,
	371, 503, 145, 146, 147, 0, 504, 148, 228, 149,
	0, 150, 151, 152, 529, 153, 154, 0, 156, 157,
	155, 158, 0, 159, 372, 160, 161, 470, 162, 0,
	163, 164, 165, 0, 231, 166, 167, 498, 168, 169,
	373, 170, 530, 233, 171, 0, 172, 173, 175, 531,
	174, 505, 0, 176, 0, 177, 178, 0, 236, 532,
	533, 0, 0, 179, 506, 507, 479, 180, 181, 182,
	183, 0, 0, 184, 185, 186, 499, 0, 187, 188,
	189, 241, 534, 1462, 190, 0, 0, 0, 0, 191,
	192, 193, 194, 457, 0, 0, 485, 474, 475, 472,
	473, 461, 0, 0, 453, 454, 0, 0, 0, 0,
	455, 86, 87, 462, 88, 0, 0, 0, 0, 501,
	467, 0, 0, 0, 89, 90, 196, 515, 198, 516,
	91, 517, 518, 0, 92, 202, 203, 93, 482, 500,
	519, 520, 206, 0, 511, 0, 493, 0, 94, 95,
	96, 0, 97, 0, 98, 99, 0, 361, 100, 101,
	0, 494, 496, 0, 495, 497, 102, 103, 104, 105,
	521, 106, 522, 523, 555, 107, 0, 108, 0, 0,
	0, 514, 110, 0, 111, 0, 0, 0, 466, 112,
	113, 502, 480, 0, 0, 114, 115, 524, 0, 116,
	0, 117, 0, 0, 362, 0, 118, 512, 0, 215,
	0, 119, 120, 508, 510, 364, 0, 123, 0, 121,
	0, 363, 122, 525, 526, 527, 0, 492, 0, 365,
	124, 366, 125, 126, 0, 0, 513, 367, 127, 368,
	0, 128, 0, 0, 129, 0, 130, 131, 132, 133,
	134, 369, 135, 136, 139, 137, 456, 138, 481, 509,
	140, 528, 141, 142, 0, 0, 0, 0, 0, 143,
	225, 370, 144, 371, 503, 145, 146, 147, 0, 504,
	148, 228, 149, 0, 150, 151, 152, 529, 153, 154,
	0, 156, 157, 155, 158, 0, 159, 372, 160, 161,
	470, 162, 0, 163, 164, 165, 0, 231, 166, 167,
	498, 168, 169, 373, 170, 530, 233, 171, 0, 172,
	173, 175, 531, 174, 505, 0, 176, 0, 177, 178,
	0, 236, 532, 533, 0, 0, 179, 506, 507, 479,
	180, 181, 182, 183, 0, 0, 184, 185, 186, 499,
	0, 187, 188, 189, 241, 534, 0, 190, 0, 0,
	0, 0, 191, 192, 193, 194, 457, 0, 0, 485,
	474, 475, 472, 473, 461, 0, 0, 453, 454, 0,
	0, 0, 0, 455, 86, 87, 462, 88, 0, 0,
	0, 0, 501, 467, 0, 0, 0, 89, 90, 196,
	515, 198, 516, 91, 517, 518, 0, 92, 202, 203,
	93, 482, 500, 519, 520, 206, 0, 511, 0, 493,
	0, 94, 95, 96, 0, 97, 0, 98, 99, 0,
	361, 100, 101, 0, 494, 496, 0, 495, 497, 102,
	103, 104, 105, 521, 106, 522, 523, 0, 107, 0,
	108, 0, 0, 0, 514, 110, 0, 111, 0, 0,
	0, 466, 112, 113, 502, 480, 0, 0, 114, 115,
	524, 0, 116, 0, 117, 0, 1145, 362, 0, 118,
	512, 0, 215, 0, 119, 120, 508, 510, 364, 0,
	123, 0, 121, 0, 363, 122, 525, 526, 527, 0,
	492, 0, 365, 124, 366, 125, 126, 0, 0, 513,
	367, 127, 368, 0, 128, 0, 0, 129, 0, 130,
	131, 132, 133, 134, 369, 135, 136, 139, 137, 456,
	138, 481, 509, 140, 528, 141, 142, 0, 0, 0,
	0, 0, 143, 225, 370, 144, 371, 503, 145, 146,
	147, 0, 504, 148, 228, 149, 0, 150, 151, 152,
	529, 153, 154, 0, 156, 157, 155, 158, 0, 159,
	372, 160, 161, 470, 162, 0, 163, 164, 165, 0,
	231, 166, 167, 498, 168, 169, 373, 170, 530, 233,
	171, 0, 172, 173, 175, 531, 174, 505, 0, 176,
	0, 177, 178, 0, 236, 532, 533, 0, 0, 179,
	506, 507, 479, 180, 181, 182, 183, 0, 0, 184,
	185, 186, 499, 0, 187, 188, 189, 241, 534, 0,
	190, 0, 0, 0, 0, 191, 192, 193, 194, 457,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	453, 454, 0, 0, 0, 0, 455, 0, 0, 462,
	485, 474, 475, 472, 473, 461, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 87, 793, 88, 0,
	0, 0, 0, 501, 467, 0, 0, 0, 89, 90,
	196, 515, 198, 516, 91, 517, 518, 0, 92, 202,
	203, 93, 482, 500, 519, 520, 206, 0, 511, 0,
	493, 0, 94, 95, 96, 0, 97, 0, 98, 99,
	0, 361, 100, 101, 0, 494, 496, 0, 495, 497,
	102, 103, 104, 105, 521, 106, 522, 523, 0, 107,
	0, 108, 0, 0, 0, 514, 110, 0, 111, 0,
	0, 0, 466, 112, 113, 502, 480, 0, 0, 114,
	115, 524, 0, 116, 0, 117, 0, 0, 362, 0,
	118, 512, 0, 215, 0, 119, 120, 508, 510, 364,
	0, 123, 0, 121, 0, 363, 122, 525, 526, 527,
	0, 492, 0, 365, 124, 366, 125, 126, 0, 0,
	513, 367, 127, 368, 0, 128, 0, 0, 129, 0,
	130, 131, 132, 133, 134, 369, 135, 136, 139, 137,
	456, 138, 481, 509, 140, 528, 141, 142, 0, 0,
	0, 0, 0, 143, 225, 370, 144, 371, 503, 145,
	146, 147, 0, 504, 148, 228, 149, 0, 150, 151,
	152, 529, 153, 154, 0, 156, 157, 155, 158, 0,
	159, 372, 160, 161, 470, 162, 0, 163, 164, 165,
	0, 231, 166, 167, 498, 168, 169, 373, 170, 530,
	233, 171, 0, 172, 173, 175, 531, 174, 505, 0,
	176, 0, 177, 178, 0, 236, 532, 533, 0, 0,
	179, 506, 507, 479, 180, 181, 182, 183, 0, 0,
	184, 185, 186, 499, 0, 187, 188, 189, 241, 534,
	0, 190, 0, 0, 0, 0, 191, 192, 193, 194,
	457, 0, 0, 485, 474, 475, 472, 473, 461, 0,
	0, 453, 454, 0, 0, 0, 0, 455, 86, 87,
	462, 88, 0, 0, 0, 0, 501, 467, 0, 0,
	0, 89, 90, 196, 515, 198, 516, 91, 517, 518,
	0, 92, 202, 203, 93, 482, 500, 519, 520, 206,
	0, 511, 0, 493, 0, 94, 95, 96, 0, 97,
	0, 98, 99, 0, 361, 100, 1801, 0, 494, 496,
	0, 495, 497, 102, 103, 104, 105, 521, 106, 522,
	523, 0, 107, 0, 108, 0, 0, 0, 514, 110,
	0, 111, 0, 0, 0, 466, 112, 113, 502, 480,
	0, 0, 114, 115, 524, 0, 116, 0, 117, 0,
	0, 362, 0, 118, 512, 0, 215, 0, 119, 120,
	508, 510, 364, 0, 123, 0, 121, 0, 363, 122,
	525, 526, 527, 0, 492, 0, 365, 124, 366, 125,
	126, 0, 0, 513, 367, 127, 368, 0, 128, 0,
	0, 129, 0, 130, 131, 132, 133, 134, 369, 135,
	136, 139, 137, 456, 138, 481, 509, 140, 528, 141,
	142, 0, 0, 0, 0, 0, 143, 225, 370, 144,
	371, 503, 145, 146, 147, 0, 504, 148, 228, 149,
	0, 150, 151, 152, 529, 153, 154, 0, 156, 157,
	155, 158, 0, 159, 372, 160, 161, 470, 162, 0,
	163, 164, 165, 0, 231, 166, 167, 498, 168, 169,
	373, 170, 530, 233, 171, 0, 172, 173, 175, 531,
	174, 505, 0, 176, 0, 177, 178, 0, 236, 532,
	533, 0, 0, 179, 506, 507, 479, 180, 181, 1800,
	183, 0, 0, 184, 185, 186, 499, 0, 187, 188,
	189, 241, 534, 0, 190, 0, 0, 0, 0, 191,
	192, 193, 194, 457, 0, 0, 485, 474, 475, 472,
	473, 461, 0, 0, 453, 454, 0, 0, 0, 0,
	455, 86, 87, 462, 88, 0, 0, 0, 0, 501,
	467, 0, 0, 0, 89, 90, 1799, 515, 198, 516,
	91, 517, 518, 0, 92, 202, 203, 93, 482, 500,
	519, 520, 206, 0, 511, 0, 493, 0, 94, 95,
	96, 0, 97, 0, 98, 99, 0, 361, 100, 1801,
	0, 494, 496, 0, 495, 497, 102, 103, 104, 105,
	521, 106, 522, 523, 0, 107, 0, 108, 0, 0,
	0, 514, 110, 0, 111, 0, 0, 0, 466, 112,
	113, 502, 480, 0, 0, 114, 115, 524, 0, 116,
	0, 117, 0, 0, 362, 0, 118, 512, 0, 215,
	0, 119, 120, 508, 510, 364, 0, 123, 0, 121,
	0, 363, 122, 525, 526, 527, 0, 492, 0, 365,
	124, 366, 125, 126, 0, 0, 513, 367, 127, 368,
	0, 128, 0, 0, 129, 0, 130, 131, 132, 133,
	134, 369, 135, 136, 139, 137, 456, 138, 481, 509,
	140, 528, 141, 142, 0, 0, 0, 0, 0, 143,
	225, 370, 144, 371, 503, 145, 146, 147, 0, 504,
	148, 228, 149, 0, 150, 151, 152, 529, 153, 154,
	0, 156, 157, 155, 158, 0, 159, 372, 160, 161,
	470, 162, 0, 163, 164, 165, 0, 231, 166, 167,
	498, 168, 169, 373, 170, 530, 233, 171, 0, 172,
	173, 175, 531, 174, 505, 0, 176, 0, 177, 178,
	0, 236, 532, 533, 0, 0, 179, 506, 507, 479,
	180, 181, 1800, 183, 0, 0, 184, 185, 186, 499,
	0, 187, 188, 189, 241, 534, 0, 190, 0, 0,
	0, 0, 191, 192, 193, 194, 457, 0, 0, 485,
	474, 475, 472, 473, 461, 0, 0, 453, 454, 0,
	0, 0, 0, 455, 86, 87, 462, 88, 0, 0,
	0, 0, 501, 467, 0, 0, 0, 89, 90, 196,
	515, 198, 516, 91, 517, 518, 0, 92, 202, 203,
	93, 482, 500, 519, 520, 206, 0, 511, 0, 493,
	0, 94, 95, 96, 0, 97, 0, 98, 99, 0,
	361, 100, 101, 0, 494, 496, 0, 495, 497, 102,
	103, 104, 105, 521, 106, 522, 523, 0, 107, 0,
	108, 0, 0, 0, 514, 110, 0, 111, 0, 0,
	0, 466, 112, 113, 502, 480, 0, 0, 114, 115,
	524, 0, 116, 0, 117, 0, 0, 362, 0, 118,
	512, 0, 215, 0, 119, 120, 508, 510, 364, 0,
	123, 0, 121, 0, 363, 122, 525, 526, 527, 0,
	492, 0, 365, 124, 366, 125, 126, 0, 0, 513,
	367, 127, 368, 0, 128, 0, 0, 129, 0, 130,
	131, 132, 133, 134, 369, 135, 136, 139, 137, 456,
	138, 481, 509, 140, 528, 141, 142, 0, 0, 0,
	0, 0, 143, 225, 370, 144, 371, 503, 145, 146,
	147, 0, 504, 148, 228, 149, 0, 150, 151, 152,
	529, 153, 154, 0, 156, 157, 155, 158, 0, 159,
	372, 160, 161, 470, 162, 0, 163, 164, 165, 0,
	231, 166, 167, 498, 168, 169, 373, 170, 530, 233,
	171, 0, 172, 173, 175, 531, 174, 505, 0, 176,
	0, 177, 178, 0, 236, 532, 533, 0, 0, 179,
	506, 507, 479, 180, 181, 182, 183, 0, 0, 184,
	185, 186, 499, 0, 187, 188, 189, 241, 534, 0,
	190, 0, 0, 0, 0, 191, 192, 193, 194, 457,
	0, 0, 485, 474, 475, 472, 473, 461, 0, 0,
	453, 454, 0, 0, 0, 0, 455, 86, 87, 462,
	88, 0, 0, 0, 0, 501, 467, 0, 0, 0,
	89, 90, 196, 515, 198, 516, 91, 517, 518, 0,
	92, 202, 203, 93, 482, 500, 519, 520, 206, 0,
	511, 0, 493, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 361, 100, 101, 0, 494, 496, 0,
	495, 497, 102, 103, 104, 105, 521, 106, 522, 523,
	0, 107, 0, 108, 0, 0, 0, 514, 110, 0,
	111, 0, 0, 0, 466, 112, 113, 502, 480, 0,
	0, 114, 115, 524, 0, 116, 0, 117, 0, 0,
	362, 0, 118, 512, 0, 215, 0, 119, 120, 508,
	510, 364, 0, 123, 0, 121, 0, 363, 122, 525,
	526, 527, 0, 492, 0, 365, 124, 366, 125, 126,
	0, 0, 513, 367, 127, 368, 0, 128, 0, 0,
	129, 0, 130, 131, 132, 133, 134, 369, 135, 136,
	139, 137, 0, 138, 481, 509, 140, 528, 141, 142,
	0, 0, 0, 0, 0, 143, 225, 370, 144, 371,
	503, 145, 146, 147, 0, 504, 148, 228, 149, 0,
	150, 151, 152, 529, 153, 154, 0, 156, 157, 155,
	158, 0, 159, 372, 160, 161, 1135, 162, 0, 163,
	164, 165, 0, 231, 166, 167, 498, 168, 169, 373,
	170, 530, 233, 171, 0, 172, 173, 175, 531, 174,
	505, 0, 176, 0, 177, 178, 0, 236, 532, 533,
	0, 0, 179, 506, 507, 479, 180, 181, 182, 183,
	0, 0, 184, 185, 186, 499, 0, 187, 188, 189,
	241, 534, 0, 190, 0, 0, 0, 0, 191, 192,
	193, 194, 485, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1131, 1132, 0, 0, 86, 87, 1133,
	88, 0, 1134, 0, 0, 501, 0, 0, 0, 0,
	89, 90, 196, 197, 198, 199, 91, 200, 201, 0,
	92, 202, 203, 93, 0, 500, 204, 205, 206, 0,
	511, 0, 493, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 361, 100, 101, 0, 494, 496, 0,
	495, 497, 102, 103, 104, 105, 208, 106, 209, 210,
	0, 107, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 211, 112, 113, 502, 0, 0,
	0, 114, 115, 213, 0, 116, 0, 117, 0, 0,
	362, 0, 118, 512, 0, 215, 0, 119, 120, 508,
	510, 364, 0, 123, 0, 121, 0, 363, 122, 218,
	219, 220, 0, 221, 0, 365, 124, 366, 125, 126,
	0, 0, 513, 367, 127, 368, 0, 128, 0, 0,
	129, 0, 130, 131, 132, 133, 134, 369, 135, 136,
	139, 137, 0, 138, 0, 509, 140, 224, 141, 142,
	0, 0, 0, 0, 0, 143, 225, 370, 144, 371,
	503, 145, 146, 147, 0, 504, 148, 228, 149, 0,
	150, 151, 152, 229, 153, 154, 0, 156, 157, 155,
	158, 0, 159, 372, 160, 161, 230, 162, 0, 163,
	164, 165, 0, 231, 166, 167, 498, 168, 169, 373,
	170, 232, 233, 171, 0, 172, 173, 175, 234, 174,
	505, 0, 176, 0, 177, 178, 0, 236, 237, 238,
	0, 0, 179, 506, 507, 0, 180, 181, 182, 183,
	0, 0, 184, 185, 186, 499, 0, 187, 188, 189,
	241, 242, 0, 190, 0, 355, 0, 0, 191, 192,
	193, 194, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 87, 0, 88, 0, 0, 0, 0, 195, 0,
	0, 0, 1573, 89, 90, 196, 197, 198, 199, 91,
	200, 201, 0, 92, 202, 203, 93, 0, 0, 204,
	205, 206, 0, 207, 0, 360, 0, 94, 95, 96,
	0, 97, 0, 98, 99, 0, 361, 100, 101, 0,
	0, 0, 0, 0, 0, 102, 103, 104, 105, 208,
	106, 209, 210, 0, 107, 0, 108, 0, 0, 0,
	109, 110, 0, 111, 0, 0, 0, 211, 112, 113,
	212, 0, 0, 0, 114, 115, 213, 0, 116, 0,
	117, 0, 0, 362, 0, 118, 214, 0, 215, 0,
	119, 120, 216, 217, 364, 0, 123, 0, 121, 0,
	363, 122, 218, 219, 220, 0, 221, 0, 365, 124,
	366, 125, 126, 0, 0, 222, 367, 127, 368, 0,
	128, 0, 0, 129, 0, 130, 131, 132, 133, 134,
	369, 135, 136, 139, 137, 0, 138, 0, 223, 140,
	224, 141, 142, 0, 0, 0, 0, 0, 143, 225,
	370, 144, 371, 226, 145, 146, 147, 0, 227, 148,
	228, 149, 0, 150, 151, 152, 229, 153, 154, 0,
	156, 157, 155, 158, 0, 159, 372, 160, 161, 230,
	162, 0, 163, 164, 165, 56, 231, 166, 167, 0,
	168, 169, 373, 170, 232, 233, 171, 0, 172, 173,
	175, 234, 174, 235, 0, 176, 58, 177, 178, 0,
	236, 237, 238, 0, 0, 179, 239, 240, 0, 180,
	181, 182, 183, 0, 0, 184, 185, 186, 0, 0,
	187, 188, 189, 359, 242, 0, 190, 0, 0, 0,
	54, 191, 192, 193, 194, 0, 55, 0, 355, 664,
	0, 665, 660, 655, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 86, 87, 53, 88, 0, 0, 0,
	0, 195, 0, 0, 0, 0, 89, 90, 196, 197,
	198, 199, 91, 200, 201, 0, 92, 202, 203, 93,
	0, 0, 204, 205, 206, 0, 207, 0, 360, 0,
	94, 95, 96, 0, 97, 0, 98, 99, 0, 361,
	100, 101, 0, 0, 0, 0, 0, 0, 102, 103,
	104, 105, 208, 106, 209, 210, 668, 107, 0, 108,
	0, 0, 0, 109, 110, 0, 111, 0, 0, 0,
	211, 112, 113, 212, 657, 0, 0, 114, 115, 213,
	0, 116, 0, 117, 0, 0, 362, 0, 118, 214,
	0, 215, 0, 119, 120, 216, 217, 364, 0, 123,
	0, 121, 0, 363, 122, 218, 219, 220, 0, 221,
	0, 365, 124, 366, 125, 126, 0, 0, 222, 367,
	127, 368, 0, 128, 0, 0, 129, 0, 130, 131,
	132, 133, 134, 369, 135, 136, 139, 137, 0, 138,
	0, 223, 140, 224, 141, 142, 0, 658, 0, 0,
	0, 143, 225, 370, 144, 371, 226, 145, 146, 147,
	0, 227, 148, 228, 149, 0, 150, 151, 152, 229,
	153, 154, 0, 156, 157, 155, 158, 0, 159, 372,
	160, 161, 230, 162, 0, 163, 164, 165, 0, 231,
	166, 167, 0, 168, 169, 373, 170, 232, 233, 171,
	0, 172, 173, 175, 234, 174, 235, 0, 176, 0,
	177, 178, 0, 236, 237, 238, 0, 0, 179, 239,
	240, 656, 180, 181, 182, 183, 0, 0, 184, 185,
	186, 0, 0, 187, 188, 189, 241, 242, 0, 190,
	0, 0, 0, 0, 191, 192, 193, 194, 355, 664,
	0, 665, 660, 655, 0, 0, 0, 0, 0, 666,
	661, 0, 0, 86, 87, 0, 88, 0, 0, 0,
	0, 195, 0, 0, 0, 0, 89, 90, 196, 197,
	198, 199, 91, 200, 201, 0, 92, 202, 203, 93,
	0, 0, 204, 205, 206, 0, 207, 0, 360, 0,
	94, 95, 96, 0, 97, 0, 98, 99, 0, 361,
	100, 101, 0, 0, 0, 0, 0, 0, 102, 103,
	104, 105, 208, 106, 209, 210, 651, 107, 0, 108,
	0, 0, 0, 109, 110, 0, 111, 0, 0, 0,
	211, 112, 113, 212, 657, 0, 0, 114, 115, 213,
	0, 116, 0, 117, 0, 0, 362, 0, 118, 214,
	0, 215, 0, 119, 120, 216, 217, 364, 0, 123,
	0, 121, 0, 363, 122, 218, 219, 220, 0, 221,
	0, 365, 124, 366, 125, 126, 0, 0, 222, 367,
	127, 368, 0, 128, 0, 0, 129, 0, 130, 131,
	132, 133, 134, 369, 135, 136, 139, 137, 0, 138,
	0, 223, 140, 224, 141, 142, 0, 658, 0, 0,
	0, 143, 225, 370, 144, 371, 226, 145, 146, 147,
	0, 227, 148, 228, 149, 0, 150, 151, 152, 229,
	153, 154, 0, 156, 157, 155, 158, 0, 159, 372,
	160, 161, 230, 162, 0, 163, 164, 165, 0, 231,
	166, 167, 0, 168, 169, 373, 170, 232, 233, 171,
	0, 172, 173, 175, 234, 174, 235, 0, 176, 0,
	177, 178, 0, 236, 237, 238, 0, 0, 179, 239,
	240, 656, 180, 181, 182, 183, 0, 0, 184, 185,
	186, 0, 0, 187, 188, 189, 241, 242, 0, 190,
	0, 0, 0, 0, 191, 192, 193, 194, 355, 664,
	0, 665, 660, 655, 0, 0, 0, 0, 0, 666,
	661, 0, 0, 86, 87, 0, 88, 0, 0, 0,
	0, 195, 0, 0, 0, 0, 89, 90, 196, 197,
	198, 199, 91, 200, 201, 0, 92, 202, 203, 93,
	0, 0, 204, 205, 206, 0, 207, 0, 360, 0,
	94, 95, 96, 0, 97, 0, 98, 99, 0, 361,
	100, 101, 0, 0, 0, 0, 0, 0, 102, 103,
	104, 105, 208, 106, 209, 210, 0, 107, 0, 108,
	0, 0, 0, 109, 110, 0, 111, 0, 0, 0,
	211, 112, 113, 212, 657, 0, 0, 114, 115, 213,
	0, 116, 0, 117, 0, 0, 362, 0, 118, 214,
	0, 215, 0, 119, 120, 216, 217, 364, 0, 123,
	0, 121, 0, 363, 122, 218, 219, 220, 0, 221,
	0, 365, 124, 366, 125, 126, 0, 0, 222, 367,
	127, 368, 0, 128, 0, 0, 129, 0, 130, 131,
	132, 133, 134, 369, 135, 136, 139, 137, 0, 138,
	0, 223, 140, 224, 141, 142, 0, 658, 0, 0,
	0, 143, 225, 370, 144, 371, 226, 145, 146, 147,
	0, 227, 148, 228, 149, 0, 150, 151, 152, 229,
	153, 154, 0, 156, 157, 155, 158, 0, 159, 372,
	160, 161, 230, 162, 0, 163, 164, 165, 0, 231,
	166, 167, 0, 168, 169, 373, 170, 232, 233, 171,
	0, 172, 173, 175, 234, 174, 235, 0, 176, 0,
	177, 178, 0, 236, 237, 238, 0, 0, 179, 239,
	240, 656, 180, 181, 182, 183, 0, 0, 184, 185,
	186, 0, 0, 187, 188, 189, 241, 242, 83, 190,
	0, 0, 0, 0, 191, 192, 193, 194, 0, 0,
	0, 0, 0, 86, 87, 0, 88, 0, 0, 666,
	661, 195, 0, 0, 0, 0, 89, 90, 196, 197,
	198, 199, 91, 200, 201, 0, 92, 202, 203, 93,
	0, 0, 204, 205, 206, 0, 207, 0, 0, 0,
	94, 95, 96, 0, 97, 0, 98, 99, 0, 0,
	100, 101, 0, 0, 0, 0, 0, 0, 102, 103,
	104, 105, 208, 106, 209, 210, 0, 107, 0, 108,
	0, 0, 0, 109, 110, 0, 111, 0, 0, 0,
	211, 112, 113, 212, 0, 0, 0, 114, 115, 213,
	0, 116, 0, 117, 0, 0, 0, 0, 118, 214,
	0, 215, 0, 119, 120, 216, 217, 0, 0, 123,
	0, 121, 0, 0, 122, 218, 219, 220, 0, 221,
	0, 0, 124, 0, 125, 126, 0, 0, 222, 0,
	127, 0, 0, 128, 0, 0, 129, 0, 130, 131,
	132, 133, 134, 0, 135, 136, 139, 137, 0, 138,
	0, 223, 140, 224, 141, 142, 0, 0, 328, 0,
	0, 143, 225, 0, 144, 0, 226, 145, 146, 147,
	0, 227, 148, 228, 149, 0, 150, 151, 152, 229,
	153, 154, 0, 156, 157, 155, 158, 0, 159, 0,
	160, 161, 230, 162, 0, 163, 164, 165, 56, 231,
	166, 167, 0, 168, 169, 0, 170, 232, 233, 171,
	0, 172, 173, 175, 234, 174, 235, 0, 176, 58,
	177, 178, 0, 236, 237, 238, 0, 0, 179, 239,
	240, 0, 180, 181, 182, 183, 0, 0, 184, 185,
	186, 0, 0, 187, 188, 189, 359, 242, 0, 190,
	0, 83, 0, 54, 191, 192, 193, 194, 0, 55,
	0, 0, 0, 0, 0, 0, 86, 87, 0, 88,
	0, 0, 0, 0, 195, 0, 0, 0, 1036, 89,
	90, 196, 197, 198, 199, 91, 200, 201, 0, 92,
	202, 203, 93, 0, 0, 204, 205, 206, 0, 207,
	0, 0, 0, 94, 95, 96, 0, 97, 0, 98,
	99, 0, 0, 100, 101, 0, 0, 0, 0, 0,
	0, 102, 103, 104, 105, 208, 106, 209, 210, 0,
	107, 0, 108, 0, 0, 0, 109, 110, 0, 111,
	0, 0, 0, 211, 112, 113, 212, 0, 0, 0,
	114, 115, 213, 0, 116, 0, 117, 0, 0, 0,
	0, 118, 214, 0, 215, 0, 119, 120, 216, 217,
	0, 0, 123, 0, 121, 0, 0, 122, 218, 219,
	220, 0, 221, 0, 0, 124, 0, 125, 126, 0,
	0, 222, 0, 127, 0, 0, 128, 0, 0, 129,
	0, 130, 131, 132, 133, 134, 0, 135, 136, 139,
	137, 0, 138, 0, 223, 140, 224, 141, 142, 0,
	0, 0, 0, 0, 143, 225, 0, 144, 0, 226,
	145, 146, 147, 0, 227, 148, 228, 149, 0, 150,
	151, 152, 229, 153, 154, 0, 156, 157, 155, 158,
	0, 159, 0, 160, 161, 230, 162, 0, 163, 164,
	165, 56, 231, 166, 167, 0, 168, 169, 0, 170,
	232, 233, 171, 0, 172, 173, 175, 234, 174, 235,
	0, 176, 58, 177, 178, 0, 236, 237, 238, 0,
	0, 179, 239, 240, 0, 180, 181, 182, 183, 0,
	0, 184, 185, 186, 0, 0, 187, 188, 189, 359,
	242, 0, 190, 0, 83, 0, 54, 191, 192, 193,
	194, 0, 55, 0, 0, 0, 0, 0, 0, 86,
	87, 0, 88, 0, 0, 0, 0, 195, 0, 1258,
	0, 53, 89, 90, 196, 197, 198, 199, 91, 200,
	201, 0, 92, 202, 203, 93, 0, 0, 204, 205,
	206, 0, 207, 0, 0, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 208, 106,
	209, 210, 0, 107, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 211, 112, 113, 212,
	0, 0, 0, 114, 115, 213, 0, 116, 0, 117,
	0, 0, 0, 0, 118, 214, 0, 215, 0, 119,
	120, 216, 217, 0, 0, 123, 0, 121, 0, 0,
	122, 218, 219, 220, 0, 221, 0, 0, 124, 0,
	125, 126, 0, 0, 222, 0, 127, 0, 0, 128,
	0, 0, 129, 0, 130, 131, 132, 133, 134, 0,
	135, 136, 139, 137, 0, 138, 0, 223, 140, 224,
	141, 142, 0, 0, 0, 0, 0, 143, 225, 0,
	144, 0, 226, 145, 146, 147, 0, 227, 148, 228,
	149, 0, 150, 151, 152, 229, 153, 154, 0, 156,
	157, 155, 158, 0, 159, 0, 160, 161, 230, 162,
	0, 163, 164, 165, 0, 231, 166, 167, 0, 168,
	169, 0, 170, 232, 233, 171, 0, 172, 173, 175,
	234, 174, 235, 0, 176, 0, 177, 178, 0, 236,
	237, 238, 0, 0, 179, 239, 240, 0, 180, 181,
	182, 183, 0, 0, 184, 185, 186, 0, 0, 187,
	188, 189, 241, 242, 0, 190, 0, 0, 83, 0,
	191, 192, 193, 194, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 86, 87, 0, 88, 0, 0, 0,
	0, 195, 0, 0, 0, 443, 89, 90, 196, 197,
	198, 199, 91, 200, 201, 0, 92, 202, 203, 93,
	0, 0, 204, 205, 206, 0, 207, 0, 0, 0,
	94, 95, 96, 0, 97, 0, 98, 99, 0, 0,
	100, 101, 0, 0, 0, 0, 0, 0, 102, 103,
	104, 105, 208, 106, 209, 210, 0, 107, 0, 108,
	0, 0, 0, 109, 110, 0, 111, 0, 0, 0,
	211, 112, 113, 212, 0, 0, 0, 114, 115, 213,
	0, 116, 0, 117, 0, 0, 0, 0, 118, 214,
	0, 215, 0, 119, 120, 216, 217, 0, 0, 123,
	0, 121, 0, 0, 122, 218, 219, 220, 0, 221,
	0, 0, 124, 0, 125, 126, 0, 0, 222, 0,
	127, 0, 0, 128, 0, 0, 129, 0, 130, 131,
	132, 133, 134, 0, 135, 136, 139, 137, 0, 138,
	0, 223, 140, 224, 141, 142, 0, 0, 328, 0,
	0, 143, 225, 0, 144, 0, 226, 145, 146, 147,
	0, 227, 148, 228, 149, 0, 150, 151, 152, 229,
	153, 154, 0, 156, 157, 155, 158, 0, 159, 0,
	160, 161, 230, 162, 0, 163, 164, 165, 0, 231,
	166, 167, 0, 168, 169, 0, 170, 232, 233, 171,
	0, 172, 173, 175, 234, 174, 235, 0, 176, 0,
	177, 178, 0, 236, 237, 238, 0, 0, 179, 239,
	240, 0, 180, 181, 182, 183, 0, 0, 184, 185,
	186, 0, 0, 187, 188, 189, 241, 242, 0, 190,
	0, 83, 0, 0, 191, 192, 193, 194, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 87, 0, 88,
	0, 0, 0, 0, 195, 0, 0, 0, 1036, 89,
	90, 196, 197, 198, 199, 91, 200, 201, 0, 92,
	202, 203, 93, 0, 0, 204, 205, 206, 0, 207,
	0, 0, 0, 94, 95, 96, 0, 97, 0, 98,
	99, 0, 0, 100, 101, 0, 0, 0, 0, 0,
	0, 102, 103, 104, 105, 208, 106, 209, 210, 0,
	107, 0, 108, 0, 0, 0, 109, 110, 0, 111,
	0, 0, 0, 211, 112, 113, 212, 0, 0, 0,
	114, 115, 213, 0, 116, 0, 117, 0, 0, 0,
	0, 118, 214, 0, 215, 0, 119, 120, 216, 217,
	0, 0, 123, 0, 121, 0, 0, 122, 218, 219,
	220, 0, 221, 0, 0, 124, 0, 125, 126, 0,
	0, 222, 0, 127, 0, 0, 128, 0, 0, 129,
	0, 130, 131, 132, 133, 134, 0, 135, 136, 139,
	137, 0, 138, 0, 223, 140, 224, 141, 142, 0,
	0, 0, 0, 0, 143, 225, 0, 144, 0, 226,
	145, 146, 147, 0, 227, 148, 228, 149, 0, 150,
	151, 152, 229, 153, 154, 0, 156, 157, 155, 158,
	0, 159, 0, 160, 161, 230, 162, 0, 163, 164,
	165, 0, 231, 166, 167, 0, 168, 169, 0, 170,
	232, 233, 171, 0, 172, 173, 175, 234, 174, 235,
	0, 176, 0, 177, 178, 0, 236, 237, 238, 0,
	0, 179, 239, 240, 0, 180, 181, 182, 183, 0,
	0, 184, 185, 186, 0, 0, 187, 188, 189, 241,
	242, 0, 190, 0, 83, 0, 0, 191, 192, 193,
	194, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	87, 0, 88, 0, 0, 0, 0, 195, 0, 0,
	0, 947, 89, 90, 196, 197, 198, 199, 91, 200,
	201, 0, 92, 202, 203, 93, 0, 0, 204, 205,
	206, 0, 207, 0, 0, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 208, 106,
	209, 210, 0, 107, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 211, 112, 113, 212,
	0, 0, 0, 114, 115, 213, 0, 116, 0, 117,
	0, 0, 0, 0, 118, 214, 0, 215, 0, 119,
	120, 216, 217, 0, 0, 123, 0, 121, 0, 0,
	122, 218, 219, 220, 0, 221, 0, 0, 124, 0,
	125, 126, 0, 0, 222, 0, 127, 0, 0, 128,
	0, 0, 129, 0, 130, 131, 132, 133, 134, 0,
	135, 136, 139, 137, 0, 138, 0, 223, 140, 224,
	141, 142, 0, 0, 0, 0, 0, 143, 225, 0,
	144, 0, 226, 145, 146, 147, 0, 227, 148, 228,
	149, 0, 150, 151, 152, 229, 153, 154, 0, 156,
	157, 155, 158, 0, 159, 0, 160, 161, 230, 162,
	0, 163, 164, 165, 0, 231, 166, 167, 0, 168,
	169, 0, 170, 232, 233, 171, 0, 172, 173, 175,
	234, 174, 235, 0, 176, 0, 177, 178, 0, 236,
	237, 238, 0, 0, 179, 239, 240, 0, 180, 181,
	182, 183, 0, 0, 184, 185, 186, 0, 0, 187,
	188, 189, 241, 242, 0, 190, 0, 83, 0, 0,
	191, 192, 193, 194, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 87, 0, 88, 0, 0, 0, 0,
	195, 0, 0, 0, 1472, 89, 90, 196, 197, 198,
	199, 91, 200, 201, 0, 92, 202, 203, 93, 0,
	0, 204, 205, 206, 0, 207, 0, 0, 0, 94,
	95, 96, 0, 97, 0, 98, 99, 0, 0, 100,
	101, 0, 0, 0, 0, 0, 0, 102, 103, 104,
	105, 208, 106, 209, 210, 0, 107, 0, 108, 0,
	0, 0, 109, 110, 0, 111, 0, 0, 0, 211,
	112, 113, 212, 0, 0, 0, 114, 115, 213, 0,
	116, 0, 117, 0, 0, 0, 0, 118, 214, 0,
	215, 0, 119, 120, 216, 217, 0, 0, 123, 0,
	121, 0, 0, 122, 218, 219, 220, 0, 221, 0,
	0, 124, 0, 125, 126, 0, 0, 222, 0, 127,
	0, 0, 128, 0, 0, 129, 0, 130, 131, 132,
	133, 134, 0, 135, 136, 139, 137, 0, 138, 0,
	223, 140, 224, 141, 142, 0, 0, 0, 0, 0,
	143, 225, 0, 144, 0, 226, 145, 146, 147, 0,
	227, 148, 228, 149, 0, 150, 151, 152, 229, 153,
	154, 0, 156, 157, 155, 158, 0, 159, 0, 160,
	161, 230, 162, 0, 163, 164, 165, 0, 231, 166,
	167, 0, 168, 169, 0, 170, 232, 233, 171, 0,
	172, 173, 175, 234, 174, 235, 0, 176, 0, 177,
	178, 0, 236, 237, 238, 0, 0, 179, 239, 240,
	0, 180, 181, 182, 183, 0, 0, 184, 185, 186,
	0, 0, 187, 188, 189, 241, 242, 0, 190, 0,
	83, 0, 0, 191, 192, 193, 194, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 87, 0, 88, 0,
	0, 0, 0, 195, 0, 0, 0, 545, 89, 90,
	196, 197, 198, 199, 91, 200, 201, 0, 92, 202,
	203, 93, 0, 0, 204, 205, 206, 0, 207, 0,
	0, 0, 94, 95, 96, 0, 97, 0, 98, 99,
	0, 0, 100, 101, 0, 0, 0, 0, 0, 0,
	102, 103, 635, 105, 208, 106, 209, 210, 0, 107,
	0, 108, 0, 0, 0, 109, 110, 0, 111, 0,
	0, 0, 211, 112, 113, 212, 0, 0, 0, 114,
	115, 213, 0, 116, 0, 117, 0, 0, 0, 0,
	118, 214, 0, 215, 0, 119, 120, 216, 217, 0,
	0, 123, 0, 121, 0, 0, 122, 218, 219, 220,
	0, 221, 0, 0, 124, 0, 125, 126, 0, 0,
	222, 0, 127, 0, 0, 128, 0, 0, 129, 0,
	130, 131, 132, 133, 134, 0, 135, 136, 139, 137,
	0, 138, 0, 223, 140, 224, 141, 142, 0, 0,
	0, 0, 0, 143, 225, 0, 144, 0, 226, 145,
	146, 147, 0, 227, 148, 228, 149, 0, 150, 151,
	152, 229, 153, 154, 0, 156, 157, 155, 158, 0,
	159, 0, 160, 161, 230, 162, 0, 163, 164, 165,
	0, 231, 166, 167, 0, 168, 169, 0, 170, 232,
	233, 171, 0, 172, 173, 175, 234, 174, 235, 0,
	176, 634, 177, 178, 0, 236, 237, 238, 0, 0,
	179, 239, 240, 0, 180, 181, 182, 183, 0, 0,
	184, 185, 186, 0, 0, 187, 188, 189, 241, 242,
	0, 190, 83, 0, 0, 0, 191, 192, 193, 194,
	0, 0, 0, 0, 0, 0, 0, 86, 87, 0,
	88, 0, 0, 638, 0, 195, 0, 0, 0, 0,
	89, 90, 196, 197, 198, 199, 91, 200, 201, 0,
	92, 202, 203, 93, 0, 0, 204, 205, 206, 0,
	207, 0, 0, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 0, 100, 101, 0, 0, 0, 0,
	0, 0, 102, 103, 104, 105, 208, 106, 209, 210,
	0, 107, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 211, 112, 113, 212, 0, 0,
	0, 114, 115, 213, 0, 116, 0, 117, 0, 0,
	0, 0, 118, 214, 0, 215, 0, 119, 120, 216,
	217, 0, 0, 123, 0, 121, 0, 0, 122, 218,
	219, 220, 0, 221, 0, 0, 124, 0, 125, 126,
	0, 0, 222, 0, 127, 0, 0, 128, 0, 0,
	129, 0, 130, 131, 132, 133, 134, 0, 135, 136,
	139, 137, 0, 138, 0, 223, 140, 224, 141, 142,
	0, 0, 0, 0, 0, 143, 225, 0, 144, 0,
	226, 145, 146, 147, 0, 227, 148, 228, 149, 0,
	150, 151, 152, 229, 153, 154, 0, 156, 157, 155,
	158, 0, 159, 0, 160, 161, 230, 162, 0, 163,
	164, 165, 0, 231, 166, 167, 0, 168, 169, 0,
	170, 232, 233, 171, 0, 172, 173, 175, 234, 174,
	235, 0, 176, 0, 177, 178, 0, 236, 237, 238,
	0, 0, 179, 239, 240, 0, 180, 181, 182, 183,
	0, 0, 184, 185, 186, 0, 0, 187, 188, 189,
	241, 242, 0, 190, 355, 0, 0, 0, 191, 192,
	193, 194, 0, 0, 0, 0, 0, 0, 0, 86,
	87, 0, 88, 0, 0, 638, 0, 195, 0, 0,
	0, 0, 89, 90, 196, 197, 198, 199, 91, 200,
	201, 0, 92, 202, 203, 93, 0, 0, 204, 205,
	206, 0, 207, 0, 360, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 361, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 208, 106,
	209, 210, 0, 107, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 211, 112, 113, 212,
	0, 0, 0, 114, 115, 213, 0, 116, 0, 117,
	0, 0, 362, 0, 118, 214, 0, 215, 0, 119,
	120, 216, 217, 364, 0, 123, 0, 121, 0, 363,
	122, 218, 219, 220, 0, 221, 0, 365, 124, 366,
	125, 126, 0, 0, 222, 367, 127, 368, 0, 128,
	0, 0, 129, 0, 130, 131, 132, 133, 134, 369,
	135, 136, 139, 137, 0, 138, 0, 223, 140, 224,
	141, 142, 0, 0, 0, 0, 0, 143, 225, 370,
	144, 371, 226, 145, 146, 147, 0, 227, 148, 228,
	149, 0, 150, 151, 152, 229, 153, 154, 0, 156,
	157, 155, 158, 0, 159, 372, 160, 161, 230, 162,
	0, 163, 164, 165, 0, 231, 166, 167, 0, 168,
	169, 373, 170, 232, 233, 171, 0, 172, 173, 175,
	234, 174, 235, 0, 176, 0, 177, 178, 0, 236,
	237, 238, 0, 0, 179, 239, 240, 0, 180, 181,
	182, 183, 0, 0, 184, 185, 186, 0, 0, 187,
	188, 189, 241, 242, 83, 190, 0, 0, 0, 0,
	191, 192, 193, 194, 0, 0, 0, 0, 0, 86,
	87, 0, 88, 0, 0, 0, 0, 195, 0, 0,
	0, 0, 89, 90, 196, 197, 198, 199, 91, 200,
	201, 0, 92, 202, 203, 93, 0, 0, 204, 205,
	206, 920, 207, 0, 0, 0, 94, 95, 96, 0,
	97, 918, 98, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 208, 106,
	209, 210, 0, 107, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 211, 112, 113, 212,
	0, 1013, 0, 114, 115, 213, 0, 116, 0, 117,
	923, 0, 0, 0, 118, 214, 0, 215, 0, 119,
	120, 216, 217, 0, 0, 123, 1011, 121, 0, 0,
	122, 218, 219, 220, 0, 221, 0, 0, 124, 0,
	125, 126, 0, 0, 222, 0, 127, 0, 0, 128,
	0, 0, 129, 0, 130, 131, 132, 133, 134, 0,
	135, 136, 139, 137, 0, 138, 0, 223, 140, 224,
	141, 142, 0, 0, 0, 0, 0, 143, 225, 0,
	144, 0, 226, 145, 146, 147, 0, 227, 148, 228,
	149, 922, 150, 151, 152, 229, 153, 154, 0, 156,
	157, 155, 158, 0, 159, 0, 160, 161, 230, 162,
	0, 163, 164, 165, 0, 231, 166, 167, 0, 168,
	169, 0, 170, 232, 233, 171, 0, 172, 173, 175,
	234, 174, 235, 0, 176, 0, 177, 178, 0, 236,
	237, 238, 0, 0, 179, 239, 240, 0, 180, 181,
	182, 183, 0, 1012, 184, 185, 186, 0, 0, 187,
	188, 189, 241, 242, 83, 190, 0, 0, 0, 0,
	191, 192, 193, 194, 0, 0, 0, 0, 0, 86,
	87, 0, 88, 0, 0, 0, 0, 195, 0, 0,
	0, 0, 89, 90, 196, 197, 198, 199, 91, 200,
	201, 0, 92, 202, 203, 93, 0, 0, 204, 205,
	206, 920, 207, 0, 0, 915, 94, 95, 96, 0,
	97, 918, 98, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 208, 106,
	209, 210, 0, 107, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 211, 112, 113, 212,
	0, 0, 0, 114, 115, 213, 0, 116, 0, 117,
	923, 0, 0, 0, 118, 214, 0, 215, 0, 119,
	120, 914, 217, 0, 0, 123, 0, 121, 0, 0,
	122, 218, 219, 220, 0, 221, 0, 0, 124, 0,
	125, 126, 0, 0, 222, 0, 127, 0, 0, 128,
	0, 0, 129, 0, 130, 131, 132, 133, 134, 0,
	135, 136, 139, 137, 0, 138, 0, 223, 140, 224,
	141, 142, 0, 0, 0, 0, 0, 143, 225, 0,
	144, 0, 226, 145, 146, 147, 0, 227, 148, 228,
	149, 922, 150, 151, 152, 229, 153, 154, 0, 156,
	157, 155, 158, 0, 159, 0, 160, 161, 230, 162,
	0, 163, 164, 165, 0, 231, 166, 167, 0, 168,
	169, 0, 170, 232, 233, 171, 0, 172, 173, 175,
	234, 174, 235, 0, 176, 0, 177, 178, 0, 236,
	237, 238, 0, 0, 179, 239, 240, 0, 180, 181,
	182, 183, 0, 921, 184, 185, 186, 0, 0, 187,
	188, 189, 241, 242, 83, 190, 0, 0, 0, 0,
	191, 192, 193, 194, 0, 0, 0, 0, 0, 86,
	87, 0, 88, 0, 0, 0, 0, 195, 0, 1258,
	0, 0, 89, 90, 196, 197, 198, 199, 91, 200,
	201, 0, 92, 202, 203, 93, 0, 0, 204, 205,
	206, 0, 207, 0, 0, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 208, 106,
	209, 210, 0, 107, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 211, 112, 113, 212,
	0, 0, 0, 114, 115, 213, 0, 116, 0, 117,
	0, 0, 0, 0, 118, 214, 0, 215, 0, 119,
	120, 216, 217, 0, 0, 123, 0, 121, 0, 0,
	122, 218, 219, 220, 0, 221, 0, 0, 124, 0,
	125, 126, 0, 0, 222, 0, 127, 0, 0, 128,
	0, 0, 129, 0, 130, 131, 132, 133, 134, 0,
	135, 136, 139, 137, 0, 138, 0, 223, 140, 224,
	141, 142, 0, 0, 0, 0, 0, 143, 225, 0,
	144, 0, 226, 145, 146, 147, 0, 227, 148, 228,
	149, 0, 150, 151, 152, 229, 153, 154, 0, 156,
	157, 155, 158, 0, 159, 0, 160, 161, 230, 162,
	0, 163, 164, 165, 0, 231, 166, 167, 0, 168,
	169, 0, 170, 232, 233, 171, 0, 172, 173, 175,
	234, 174, 235, 0, 176, 0, 177, 178, 0, 236,
	237, 238, 0, 0, 179, 239, 240, 0, 180, 181,
	182, 183, 0, 0, 184, 185, 186, 0, 0, 187,
	188, 189, 241, 242, 83, 190, 0, 0, 0, 0,
	191, 192, 193, 194, 0, 0, 0, 0, 0, 86,
	87, 0, 88, 0, 0, 0, 0, 195, 0, 0,
	0, 0, 89, 90, 196, 197, 198, 199, 91, 200,
	201, 0, 92, 202, 203, 93, 0, 0, 204, 205,
	206, 0, 207, 0, 0, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 208, 106,
	209, 210, 0, 107, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 211, 112, 113, 212,
	0, 0, 0, 114, 115, 213, 0, 116, 0, 117,
	0, 0, 0, 0, 118, 214, 0, 215, 0, 119,
	120, 216, 217, 0, 0, 123, 0, 121, 0, 0,
	122, 218, 219, 220, 0, 221, 0, 0, 124, 0,
	125, 126, 0, 0, 222, 0, 127, 0, 0, 128,
	0, 0, 129, 0, 130, 131, 132, 133, 134, 0,
	135, 136, 139, 137, 0, 138, 0, 223, 140, 224,
	141, 142, 0, 0, 328, 0, 0, 143, 225, 0,
	144, 0, 226, 145, 146, 147, 0, 227, 148, 228,
	149, 0, 150, 151, 152, 229, 153, 154, 0, 156,
	157, 155, 158, 0, 159, 0, 160, 161, 230, 162,
	0, 163, 164, 165, 0, 231, 166, 167, 0, 168,
	169, 0, 170, 232, 233, 171, 0, 172, 173, 175,
	234, 174, 235, 0, 176, 0, 177, 178, 0, 236,
	237, 238, 0, 0, 179, 239, 240, 0, 180, 181,
	182, 183, 0, 0, 184, 185, 186, 0, 0, 187,
	188, 189, 241, 242, 83, 190, 0, 0, 0, 0,
	191, 192, 193, 194, 0, 0, 0, 0, 0, 86,
	87, 0, 88, 0, 0, 0, 0, 195, 0, 0,
	0, 0, 89, 90, 196, 197, 198, 199, 91, 200,
	201, 0, 92, 202, 203, 93, 0, 0, 204, 205,
	206, 0, 207, 0, 0, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 208, 106,
	209, 210, 0, 107, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 211, 112, 113, 212,
	0, 0, 0, 114, 115, 213, 0, 116, 0, 117,
	0, 0, 0, 0, 118, 214, 0, 215, 0, 119,
	120, 587, 217, 0, 0, 123, 0, 121, 0, 0,
	122, 218, 219, 220, 0, 221, 0, 0, 124, 0,
	125, 126, 0, 0, 222, 0, 127, 0, 0, 128,
	0, 0, 129, 0, 130, 131, 132, 133, 134, 0,
	135, 136, 139, 137, 0, 138, 0, 223, 140, 224,
	141, 142, 0, 0, 328, 0, 0, 143, 225, 0,
	144, 0, 226, 145, 146, 147, 0, 227, 148, 228,
	149, 0, 150, 151, 152, 229, 153, 154, 0, 156,
	157, 155, 158, 0, 159, 0, 160, 161, 230, 162,
	0, 163, 164, 165, 0, 231, 166, 167, 0, 168,
	169, 0, 170, 232, 233, 171, 0, 172, 173, 175,
	234, 174, 235, 0, 176, 0, 177, 178, 0, 236,
	237, 238, 0, 0, 179, 239, 240, 0, 180, 181,
	182, 183, 0, 0, 184, 185, 186, 0, 0, 187,
	188, 189, 241, 242, 83, 190, 0, 0, 0, 0,
	191, 192, 193, 194, 0, 0, 0, 0, 0, 86,
	87, 380, 88, 0, 0, 0, 0, 195, 0, 0,
	0, 0, 89, 90, 196, 197, 198, 199, 91, 200,
	201, 0, 92, 202, 203, 93, 0, 0, 204, 205,
	206, 0, 207, 0, 0, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 208, 106,
	209, 210, 0, 107, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 211, 112, 113, 212,
	0, 0, 0, 114, 115, 213, 0, 116, 0, 117,
	0, 0, 0, 0, 118, 214, 0, 215, 0, 119,
	120, 216, 217, 0, 0, 123, 0, 121, 0, 0,
	122, 218, 219, 220, 0, 221, 0, 0, 124, 0,
	125, 126, 0, 0, 222, 0, 127, 0, 0, 128,
	0, 0, 129, 0, 130, 131, 132, 133, 134, 0,
	135, 136, 139, 137, 0, 138, 0, 223, 140, 224,
	141, 142, 0, 0, 0, 0, 0, 143, 225, 0,
	144, 0, 226, 145, 146, 147, 0, 227, 148, 228,
	149, 0, 150, 151, 152, 229, 153, 154, 0, 156,
	157, 155, 158, 0, 159, 0, 160, 161, 230, 162,
	0, 163, 164, 165, 0, 231, 166, 167, 0, 168,
	169, 0, 170, 232, 233, 171, 0, 172, 173, 175,
	234, 174, 235, 0, 176, 0, 177, 178, 0, 236,
	237, 238, 0, 0, 179, 239, 240, 0, 180, 181,
	182, 183, 0, 0, 184, 185, 186, 0, 0, 187,
	188, 189, 241, 242, 83, 190, 0, 0, 0, 0,
	191, 192, 193, 194, 0, 0, 0, 0, 0, 86,
	87, 0, 88, 0, 0, 0, 0, 195, 0, 0,
	0, 0, 89, 90, 196, 197, 198, 199, 91, 200,
	201, 0, 92, 202, 203, 93, 0, 0, 204, 205,
	206, 0, 207, 0, 0, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 208, 106,
	209, 210, 0, 107, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 211, 112, 113, 212,
	0, 0, 0, 114, 115, 213, 0, 116, 0, 117,
	0, 0, 0, 0, 118, 214, 0, 215, 0, 119,
	120, 334, 217, 0, 0, 123, 0, 121, 0, 0,
	122, 218, 219, 220, 0, 221, 0, 0, 124, 0,
	125, 126, 0, 0, 222, 0, 127, 0, 0, 128,
	0, 0, 129, 0, 130, 131, 132, 133, 134, 0,
	135, 136, 139, 137, 0, 138, 0, 223, 140, 224,
	141, 142, 0, 0, 328, 0, 0, 143, 225, 0,
	144, 0, 226, 145, 146, 147, 0, 227, 148, 228,
	149, 0, 150, 151, 152, 229, 153, 154, 0, 156,
	157, 155, 158, 0, 159, 0, 160, 161, 230, 162,
	0, 163, 164, 165, 0, 231, 166, 167, 0, 168,
	169, 0, 170, 232, 233, 171, 0, 172, 173, 175,
	234, 174, 235, 0, 176, 0, 177, 178, 0, 236,
	237, 238, 0, 0, 179, 239, 240, 0, 180, 181,
	182, 183, 0, 0, 184, 185, 186, 0, 0, 187,
	188, 189, 241, 242, 83, 190, 0, 0, 0, 0,
	191, 192, 193, 194, 0, 0, 0, 0, 0, 86,
	87, 246, 88, 0, 0, 0, 0, 195, 0, 0,
	0, 0, 89, 90, 196, 197, 198, 199, 91, 200,
	201, 0, 92, 202, 203, 93, 0, 0, 204, 205,
	206, 0, 207, 0, 0, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 208, 106,
	209, 210, 0, 107, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 211, 112, 113, 212,
	0, 0, 0, 114, 115, 213, 0, 116, 0, 117,
	0, 0, 0, 0, 118, 214, 0, 215, 0, 119,
	120, 216, 217, 0, 0, 123, 0, 121, 0, 0,
	122, 218, 219, 220, 0, 221, 0, 0, 124, 0,
	125, 126, 0, 0, 222, 0, 127, 0, 0, 128,
	0, 0, 129, 0, 130, 131, 132, 133, 134, 0,
	135, 136, 139, 137, 0, 138, 0, 223, 140, 224,
	141, 142, 0, 0, 0, 0, 0, 143, 225, 0,
	144, 0, 226, 145, 146, 147, 0, 227, 148, 228,
	245, 0, 150, 151, 152, 229, 153, 154, 0, 156,
	157, 155, 158, 0, 159, 0, 160, 161, 230, 162,
	0, 163, 164, 165, 0, 231, 166, 167, 0, 168,
	169, 0, 170, 232, 233, 171, 0, 172, 173, 175,
	234, 174, 235, 0, 176, 0, 177, 178, 0, 236,
	237, 238, 0, 0, 179, 239, 240, 0, 180, 181,
	182, 183, 0, 0, 184, 185, 186, 0, 0, 187,
	188, 189, 241, 242, 83, 190, 0, 0, 0, 0,
	191, 192, 193, 194, 0, 0, 0, 0, 0, 86,
	87, 0, 88, 0, 0, 0, 0, 195, 0, 0,
	0, 0, 89, 90, 196, 197, 198, 199, 91, 200,
	201, 0, 92, 202, 203, 93, 0, 0, 204, 205,
	206, 0, 207, 0, 0, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 208, 106,
	209, 210, 0, 107, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 211, 112, 113, 212,
	0, 0, 0, 114, 115, 213, 0, 116, 0, 117,
	0, 0, 0, 0, 118, 214, 0, 215, 0, 119,
	120, 216, 217, 0, 0, 123, 0, 121, 0, 0,
	122, 218, 219, 220, 0, 221, 0, 0, 124, 0,
	125, 126, 0, 0, 222, 0, 127, 0, 0, 128,
	0, 0, 129, 0, 130, 131, 132, 133, 134, 0,
	135, 136, 139, 137, 0, 138, 0, 223, 140, 224,
	141, 142, 0, 0, 0, 0, 0, 143, 225, 0,
	144, 0, 226, 145, 146, 147, 0, 227, 148, 228,
	149, 0, 150, 151, 152, 229, 153, 154, 0, 156,
	157, 155, 158, 0, 159, 0, 160, 161, 230, 162,
	0, 163, 164, 165, 0, 231, 166, 167, 0, 168,
	169, 0, 170, 232, 233, 171, 0, 172, 173, 175,
	234, 174, 235, 0, 176, 0, 177, 178, 0, 236,
	237, 238, 0, 0, 179, 239, 240, 0, 180, 181,
	182, 183, 0, 0, 184, 185, 186, 0, 0, 187,
	188, 189, 241, 242, 83, 190, 0, 0, 0, 0,
	191, 192, 193, 194, 0, 0, 0, 0, 0, 86,
	87, 0, 88, 0, 0, 0, 0, 195, 0, 0,
	0, 0, 89, 90, 196, 197, 198, 199, 91, 200,
	201, 0, 92, 202, 203, 93, 0, 0, 204, 205,
	206, 0, 207, 0, 0, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 208, 106,
	209, 210, 0, 107, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 211, 112, 113, 212,
	0, 0, 0, 114, 115, 213, 0, 116, 0, 117,
	0, 0, 0, 0, 118, 214, 0, 215, 0, 119,
	120, 1181, 217, 0, 0, 123, 0, 121, 0, 0,
	122, 218, 219, 220, 0, 221, 0, 0, 124, 0,
	125, 126, 0, 0, 222, 0, 127, 0, 0, 128,
	0, 0, 129, 0, 130, 131, 132, 133, 134, 0,
	135, 136, 139, 137, 0, 138, 0, 223, 140, 224,
	141, 142, 0, 0, 0, 0, 0, 143, 225, 0,
	144, 0, 226, 145, 146, 147, 0, 227, 148, 228,
	149, 0, 150, 151, 152, 229, 153, 154, 0, 156,
	157, 155, 158, 0, 159, 0, 160, 161, 230, 162,
	0, 163, 164, 165, 0, 231, 166, 167, 0, 168,
	169, 0, 170, 232, 233, 171, 0, 172, 173, 175,
	234, 174, 235, 0, 176, 0, 177, 178, 0, 236,
	237, 238, 0, 0, 179, 239, 240, 0, 180, 181,
	182, 183, 0, 0, 184, 185, 186, 0, 0, 187,
	188, 189, 241, 242, 83, 190, 0, 0, 0, 0,
	191, 192, 193, 194, 0, 0, 0, 0, 0, 86,
	87, 0, 88, 0, 0, 0, 0, 195, 0, 0,
	0, 0, 89, 90, 196, 197, 198, 199, 91, 200,
	201, 0, 92, 202, 203, 93, 0, 0, 204, 205,
	206, 0, 207, 0, 0, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 208, 106,
	209, 210, 0, 107, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 211, 112, 113, 212,
	0, 0, 0, 114, 115, 213, 0, 116, 0, 117,
	0, 0, 0, 0, 118, 214, 0, 215, 0, 119,
	120, 1179, 217, 0, 0, 123, 0, 121, 0, 0,
	122, 218, 219, 220, 0, 221, 0, 0, 124, 0,
	125, 126, 0, 0, 222, 0, 127, 0, 0, 128,
	0, 0, 129, 0, 130, 131, 132, 133, 134, 0,
	135, 136, 139, 137, 0, 138, 0, 223, 140, 224,
	141, 142, 0, 0, 0, 0, 0, 143, 225, 0,
	144, 0, 226, 145, 146, 147, 0, 227, 148, 228,
	149, 0, 150, 151, 152, 229, 153, 154, 0, 156,
	157, 155, 158, 0, 159, 0, 160, 161, 230, 162,
	0, 163, 164, 165, 0, 231, 166, 167, 0, 168,
	169, 0, 170, 232, 233, 171, 0, 172, 173, 175,
	234, 174, 235, 0, 176, 0, 177, 178, 0, 236,
	237, 238, 0, 0, 179, 239, 240, 0, 180, 181,
	182, 183, 0, 0, 184, 185, 186, 0, 0, 187,
	188, 189, 241, 242, 83, 190, 0, 0, 0, 0,
	191, 192, 193, 194, 0, 0, 0, 0, 0, 86,
	87, 0, 88, 0, 0, 0, 0, 195, 0, 0,
	0, 0, 89, 90, 196, 197, 198, 199, 91, 200,
	201, 0, 92, 202, 203, 93, 0, 0, 204, 205,
	206, 0, 207, 0, 0, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 208, 106,
	209, 210, 0, 107, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 211, 112, 113, 212,
	0, 0, 0, 114, 115, 213, 0, 116, 0, 117,
	0, 0, 0, 0, 118, 214, 0, 215, 0, 119,
	120, 1170, 217, 0, 0, 123, 0, 121, 0, 0,
	122, 218, 219, 220, 0, 221, 0, 0, 124, 0,
	125, 126, 0, 0, 222, 0, 127, 0, 0, 128,
	0, 0, 129, 0, 130, 131, 132, 133, 134, 0,
	135, 136, 139, 137, 0, 138, 0, 223, 140, 224,
	141, 142, 0, 0, 0, 0, 0, 143, 225, 0,
	144, 0, 226, 145, 146, 147, 0, 227, 148, 228,
	149, 0, 150, 151, 152, 229, 153, 154, 0, 156,
	157, 155, 158, 0, 159, 0, 160, 161, 230, 162,
	0, 163, 164, 165, 0, 231, 166, 167, 0, 168,
	169, 0, 170, 232, 233, 171, 0, 172, 173, 175,
	234, 174, 235, 0, 176, 0, 177, 178, 0, 236,
	237, 238, 0, 0, 179, 239, 240, 0, 180, 181,
	182, 183, 0, 0, 184, 185, 186, 0, 0, 187,
	188, 189, 241, 242, 83, 190, 0, 0, 0, 0,
	191, 192, 193, 194, 0, 0, 0, 0, 0, 86,
	87, 0, 88, 0, 0, 0, 0, 195, 0, 0,
	0, 0, 89, 90, 196, 197, 198, 199, 91, 200,
	201, 0, 92, 202, 203, 93, 0, 0, 204, 205,
	206, 0, 207, 0, 0, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 208, 106,
	209, 210, 0, 107, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 211, 112, 113, 212,
	0, 0, 0, 114, 115, 213, 0, 116, 0, 117,
	0, 0, 0, 0, 118, 214, 0, 215, 0, 119,
	120, 783, 217, 0, 0, 123, 0, 121, 0, 0,
	122, 218, 219, 220, 0, 221, 0, 0, 124, 0,
	125, 126, 0, 0, 222, 0, 127, 0, 0, 128,
	0, 0, 129, 0, 130, 131, 132, 133, 134, 0,
	135, 136, 139, 137, 0, 138, 0, 223, 140, 224,
	141, 142, 0, 0, 0, 0, 0, 143, 225, 0,
	144, 0, 226, 145, 146, 147, 0, 227, 148, 228,
	149, 0, 150, 151, 152, 229, 153, 154, 0, 156,
	157, 155, 158, 0, 159, 0, 160, 161, 230, 162,
	0, 163, 164, 165, 0, 231, 166, 167, 0, 168,
	169, 0, 170, 232, 233, 171, 0, 172, 173, 175,
	234, 174, 235, 0, 176, 0, 177, 178, 0, 236,
	237, 238, 0, 0, 179, 239, 240, 0, 180, 181,
	182, 183, 0, 0, 184, 185, 186, 0, 0, 187,
	188, 189, 241, 242, 83, 190, 0, 0, 0, 0,
	191, 192, 193, 194, 0, 0, 0, 0, 0, 86,
	87, 0, 88, 0, 0, 0, 0, 195, 0, 0,
	0, 0, 89, 90, 196, 197, 198, 199, 91, 200,
	201, 0, 92, 202, 203, 93, 0, 0, 204, 205,
	206, 0, 207, 0, 0, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 208, 106,
	209, 210, 0, 107, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 211, 112, 113, 212,
	0, 0, 0, 114, 115, 213, 0, 116, 0, 117,
	0, 0, 0, 0, 118, 214, 0, 215, 0, 119,
	120, 216, 217, 0, 0, 123, 0, 121, 0, 0,
	122, 218, 219, 220, 0, 221, 0, 0, 124, 0,
	125, 126, 0, 0, 222, 0, 127, 0, 0, 128,
	0, 0, 129, 0, 130, 131, 132, 133, 134, 0,
	135, 136, 139, 137, 0, 138, 0, 223, 140, 224,
	141, 142, 0, 0, 0, 0, 0, 143, 225, 0,
	144, 0, 226, 145, 146, 147, 0, 227, 148, 228,
	149, 0, 150, 151, 152, 229, 153, 154, 0, 156,
	157, 155, 158, 0, 159, 0, 160, 161, 230, 162,
	0, 260, 164, 165, 0, 231, 166, 167, 0, 168,
	169, 0, 170, 232, 233, 171, 0, 172, 173, 175,
	234, 174, 235, 0, 176, 0, 177, 178, 0, 236,
	237, 238, 0, 0, 179, 239, 240, 0, 180, 181,
	182, 183, 0, 0, 184, 185, 186, 0, 0, 187,
	188, 189, 241, 242, 83, 190, 0, 0, 0, 0,
	191, 192, 193, 194, 0, 0, 0, 0, 0, 86,
	87, 0, 88, 0, 0, 0, 0, 195, 0, 574,
	0, 0, 89, 90, 196, 197, 198, 199, 91, 200,
	201, 0, 92, 202, 203, 93, 0, 0, 204, 205,
	206, 0, 207, 0, 0, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 208, 106,
	209, 210, 0, 107, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 211, 112, 113, 212,
	0, 0, 0, 114, 115, 213, 0, 116, 0, 117,
	0, 0, 0, 0, 118, 214, 0, 215, 0, 119,
	120, 216, 217, 0, 0, 123, 0, 121, 0, 0,
	122, 218, 219, 220, 0, 221, 0, 0, 124, 0,
	125, 126, 0, 0, 222, 0, 127, 0, 0, 128,
	0, 0, 129, 0, 130, 131, 132, 133, 134, 0,
	135, 136, 139, 137, 0, 138, 0, 223, 140, 224,
	141, 142, 0, 0, 0, 0, 0, 143, 225, 0,
	144, 0, 226, 145, 146, 147, 0, 227, 148, 228,
	149, 0, 150, 151, 152, 229, 153, 154, 0, 156,
	157, 155, 158, 0, 159, 0, 160, 161, 230, 162,
	0, 163, 164, 165, 0, 231, 166, 167, 0, 0,
	169, 0, 170, 232, 233, 171, 0, 172, 173, 175,
	234, 174, 235, 0, 176, 0, 177, 178, 0, 236,
	237, 238, 0, 0, 179, 239, 240, 0, 180, 181,
	182, 183, 0, 0, 184, 185, 186, 0, 0, 187,
	188, 189, 241, 242, 83, 190, 0, 0, 0, 0,
	191, 192, 193, 194, 0, 0, 0, 0, 0, 86,
	87, 0, 88, 0, 0, 0, 0, 195, 0, 0,
	0, 0, 89, 90, 196, 197, 198, 199, 91, 200,
	201, 0, 92, 202, 203, 93, 0, 0, 204, 205,
	206, 0, 207, 0, 0, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 208, 106,
	209, 210, 0, 107, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 211, 112, 113, 212,
	0, 0, 0, 114, 115, 213, 0, 116, 0, 117,
	0, 0, 0, 0, 118, 214, 0, 215, 0, 119,
	120, 428, 217, 0, 0, 123, 0, 121, 0, 0,
	122, 218, 219, 220, 0, 221, 0, 0, 124, 0,
	125, 126, 0, 0, 222, 0, 127, 0, 0, 128,
	0, 0, 129, 0, 130, 131, 132, 133, 134, 0,
	135, 136, 139, 137, 0, 138, 0, 223, 140, 224,
	141, 142, 0, 0, 0, 0, 0, 143, 225, 0,
	144, 0, 226, 145, 146, 147, 0, 227, 148, 228,
	149, 0, 150, 151, 152, 229, 153, 154, 0, 156,
	157, 155, 158, 0, 159, 0, 160, 161, 230, 162,
	0, 163, 164, 165, 0, 231, 166, 167, 0, 168,
	169, 0, 170, 232, 233, 171, 0, 172, 173, 175,
	234, 174, 235, 0, 176, 0, 177, 178, 0, 236,
	237, 238, 0, 0, 179, 239, 240, 0, 180, 181,
	182, 183, 0, 0, 184, 185, 186, 0, 0, 187,
	188, 189, 241, 242, 83, 190, 0, 0, 0, 0,
	191, 192, 193, 194, 0, 0, 0, 0, 0, 86,
	87, 0, 88, 0, 0, 0, 0, 195, 0, 0,
	0, 0, 89, 90, 196, 197, 198, 199, 91, 200,
	201, 0, 92, 202, 203, 93, 0, 0, 204, 205,
	206, 0, 207, 0, 0, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 208, 106,
	209, 210, 0, 107, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 211, 112, 113, 212,
	0, 0, 0, 114, 115, 213, 0, 116, 0, 117,
	0, 0, 0, 0, 118, 214, 0, 215, 0, 119,
	120, 425, 217, 0, 0, 123, 0, 121, 0, 0,
	122, 218, 219, 220, 0, 221, 0, 0, 124, 0,
	125, 126, 0, 0, 222, 0, 127, 0, 0, 128,
	0, 0, 129, 0, 130, 131, 132, 133, 134, 0,
	135, 136, 139, 137, 0, 138, 0, 223, 140, 224,
	141, 142, 0, 0, 0, 0, 0, 143, 225, 0,
	144, 0, 226, 145, 146, 147, 0, 227, 148, 228,
	149, 0, 150, 151, 152, 229, 153, 154, 0, 156,
	157, 155, 158, 0, 159, 0, 160, 161, 230, 162,
	0, 163, 164, 165, 0, 231, 166, 167, 0, 168,
	169, 0, 170, 232, 233, 171, 0, 172, 173, 175,
	234, 174, 235, 0, 176, 0, 177, 178, 0, 236,
	237, 238, 0, 0, 179, 239, 240, 0, 180, 181,
	182, 183, 0, 0, 184, 185, 186, 0, 0, 187,
	188, 189, 241, 242, 83, 190, 0, 0, 0, 0,
	191, 192, 193, 194, 0, 0, 0, 0, 0, 86,
	87, 0, 88, 0, 0, 0, 0, 195, 0, 0,
	0, 0, 89, 90, 196, 197, 198, 199, 91, 200,
	201, 0, 92, 202, 203, 93, 0, 0, 204, 205,
	386, 0, 207, 0, 0, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 208, 106,
	209, 210, 0, 107, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 211, 112, 113, 212,
	0, 0, 0, 114, 115, 213, 0, 116, 0, 117,
	0, 0, 0, 0, 118, 214, 0, 215, 0, 119,
	120, 216, 217, 0, 0, 123, 0, 121, 0, 0,
	122, 218, 219, 220, 0, 221, 0, 0, 124, 0,
	125, 126, 0, 0, 222, 0, 127, 0, 0, 128,
	0, 0, 129, 0, 130, 131, 132, 133, 271, 0,
	135, 136, 139, 137, 0, 138, 0, 223, 140, 224,
	141, 142, 0, 0, 0, 0, 0, 143, 225, 0,
	144, 0, 226, 145, 146, 147, 0, 227, 148, 228,
	149, 0, 150, 151, 152, 229, 153, 154, 0, 156,
	157, 155, 158, 0, 159, 0, 160, 161, 230, 162,
	0, 163, 164, 165, 0, 231, 166, 167, 0, 168,
	169, 0, 170, 232, 233, 171, 0, 172, 173, 175,
	234, 174, 235, 0, 176, 0, 177, 178, 0, 270,
	237, 238, 0, 0, 266, 239, 240, 0, 180, 181,
	182, 183, 0, 0, 184, 185, 186, 0, 0, 187,
	188, 189, 241, 242, 83, 190, 0, 0, 0, 0,
	191, 192, 193, 194, 0, 0, 0, 0, 0, 86,
	87, 0, 88, 0, 0, 0, 0, 195, 0, 0,
	0, 0, 89, 90, 196, 197, 198, 199, 91, 200,
	201, 0, 92, 202, 203, 93, 0, 0, 204, 205,
	206, 0, 207, 0, 0, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 208, 106,
	209, 210, 0, 107, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 211, 112, 113, 212,
	0, 0, 0, 114, 115, 213, 0, 116, 0, 117,
	0, 0, 0, 0, 118, 214, 0, 215, 0, 119,
	120, 216, 217, 0, 0, 123, 0, 121, 0, 0,
	122, 218, 219, 220, 0, 221, 0, 0, 124, 0,
	125, 126, 0, 0, 222, 0, 127, 0, 0, 128,
	0, 0, 129, 0, 130, 131, 132, 133, 271, 0,
	135, 136, 139, 137, 0, 138, 0, 223, 140, 224,
	141, 142, 0, 0, 0, 0, 0, 143, 225, 0,
	144, 0, 226, 145, 146, 147, 0, 227, 148, 228,
	149, 0, 150, 151, 152, 229, 153, 154, 0, 156,
	157, 155, 158, 0, 159, 0, 160, 161, 230, 162,
	0, 163, 164, 165, 0, 231, 166, 167, 0, 168,
	169, 0, 170, 232, 233, 171, 0, 172, 173, 175,
	234, 174, 235, 0, 176, 0, 177, 178, 0, 270,
	237, 238, 0, 0, 266, 239, 240, 0, 180, 181,
	182, 183, 0, 0, 184, 185, 186, 0, 0, 187,
	188, 189, 241, 242, 83, 190, 0, 0, 0, 0,
	191, 192, 193, 194, 0, 0, 0, 0, 0, 86,
	87, 0, 88, 0, 0, 0, 0, 195, 0, 0,
	0, 0, 89, 90, 196, 197, 198, 199, 91, 200,
	201, 0, 92, 202, 203, 93, 0, 0, 204, 205,
	206, 0, 207, 0, 0, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 208, 106,
	209, 210, 0, 107, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 211, 112, 113, 212,
	0, 0, 0, 114, 115, 213, 0, 116, 0, 117,
	0, 0, 0, 0, 118, 214, 0, 215, 0, 119,
	120, 350, 217, 0, 0, 123, 0, 121, 0, 0,
	122, 218, 219, 220, 0, 221, 0, 0, 124, 0,
	125, 126, 0, 0, 222, 0, 127, 0, 0, 128,
	0, 0, 129, 0, 130, 131, 132, 133, 134, 0,
	135, 136, 139, 137, 0, 138, 0, 223, 140, 224,
	141, 142, 0, 0, 0, 0, 0, 143, 225, 0,
	144, 0, 226, 145, 146, 147, 0, 227, 148, 228,
	149, 0, 150, 151, 152, 229, 153, 154, 0, 156,
	157, 155, 158, 0, 159, 0, 160, 161, 230, 162,
	0, 163, 164, 165, 0, 231, 166, 167, 0, 168,
	169, 0, 170, 232, 233, 171, 0, 172, 173, 175,
	234, 174, 235, 0, 176, 0, 177, 178, 0, 236,
	237, 238, 0, 0, 179, 239, 240, 0, 180, 181,
	182, 183, 0, 0, 184, 185, 186, 0, 0, 187,
	188, 189, 241, 242, 83, 190, 0, 0, 0, 0,
	191, 192, 193, 194, 0, 0, 0, 0, 0, 86,
	87, 0, 88, 0, 0, 0, 0, 195, 0, 0,
	0, 0, 89, 90, 196, 197, 198, 199, 91, 200,
	201, 0, 92, 202, 203, 93, 0, 0, 204, 205,
	206, 0, 207, 0, 0, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 208, 106,
	209, 210, 0, 107, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 211, 112, 113, 212,
	0, 0, 0, 114, 115, 213, 0, 116, 0, 117,
	0, 0, 0, 0, 118, 214, 0, 215, 0, 119,
	120, 347, 217, 0, 0, 123, 0, 121, 0, 0,
	122, 218, 219, 220, 0, 221, 0, 0, 124, 0,
	125, 126, 0, 0, 222, 0, 127, 0, 0, 128,
	0, 0, 129, 0, 130, 131, 132, 133, 134, 0,
	135, 136, 139, 137, 0, 138, 0, 223, 140, 224,
	141, 142, 0, 0, 0, 0, 0, 143, 225, 0,
	144, 0, 226, 145, 146, 147, 0, 227, 148, 228,
	149, 0, 150, 151, 152, 229, 153, 154, 0, 156,
	157, 155, 158, 0, 159, 0, 160, 161, 230, 162,
	0, 163, 164, 165, 0, 231, 166, 167, 0, 168,
	169, 0, 170, 232, 233, 171, 0, 172, 173, 175,
	234, 174, 235, 0, 176, 0, 177, 178, 0, 236,
	237, 238, 0, 0, 179, 239, 240, 0, 180, 181,
	182, 183, 0, 0, 184, 185, 186, 0, 0, 187,
	188, 189, 241, 242, 83, 190, 0, 0, 0, 0,
	191, 192, 193, 194, 0, 0, 0, 0, 0, 86,
	87, 0, 88, 0, 0, 0, 0, 195, 0, 0,
	0, 0, 89, 90, 196, 197, 198, 199, 91, 200,
	201, 0, 92, 202, 203, 93, 0, 0, 204, 205,
	206, 0, 207, 0, 0, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 208, 106,
	209, 210, 0, 107, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 211, 112, 113, 212,
	0, 0, 0, 114, 115, 213, 0, 116, 0, 117,
	0, 0, 0, 0, 118, 214, 0, 215, 0, 119,
	120, 345, 217, 0, 0, 123, 0, 121, 0, 0,
	122, 218, 219, 220, 0, 221, 0, 0, 124, 0,
	125, 126, 0, 0, 222, 0, 127, 0, 0, 128,
	0, 0, 129, 0, 130, 131, 132, 133, 134, 0,
	135, 136, 139, 137, 0, 138, 0, 223, 140, 224,
	141, 142, 0, 0, 0, 0, 0, 143, 225, 0,
	144, 0, 226, 145, 146, 147, 0, 227, 148, 228,
	149, 0, 150, 151, 152, 229, 153, 154, 0, 156,
	157, 155, 158, 0, 159, 0, 160, 161, 230, 162,
	0, 163, 164, 165, 0, 231, 166, 167, 0, 168,
	169, 0, 170, 232, 233, 171, 0, 172, 173, 175,
	234, 174, 235, 0, 176, 0, 177, 178, 0, 236,
	237, 238, 0, 0, 179, 239, 240, 0, 180, 181,
	182, 183, 0, 0, 184, 185, 186, 0, 0, 187,
	188, 189, 241, 242, 83, 190, 0, 0, 0, 0,
	191, 192, 193, 194, 0, 0, 0, 0, 0, 86,
	87, 0, 88, 0, 0, 0, 0, 195, 0, 0,
	0, 0, 89, 90, 196, 197, 198, 199, 91, 200,
	201, 0, 92, 202, 203, 93, 0, 0, 204, 205,
	206, 0, 207, 0, 0, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 208, 106,
	209, 210, 0, 107, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 211, 112, 113, 212,
	0, 0, 0, 114, 115, 213, 0, 116, 0, 117,
	0, 0, 0, 0, 118, 214, 0, 215, 0, 119,
	120, 337, 217, 0, 0, 123, 0, 121, 0, 0,
	122, 218, 219, 220, 0, 221, 0, 0, 124, 0,
	125, 126, 0, 0, 222, 0, 127, 0, 0, 128,
	0, 0, 129, 0, 130, 131, 132, 133, 134, 0,
	135, 136, 139, 137, 0, 138, 0, 223, 140, 224,
	141, 142, 0, 0, 0, 0, 0, 143, 225, 0,
	144, 0, 226, 145, 146, 147, 0, 227, 148, 228,
	149, 0, 150, 151, 152, 229, 153, 154, 0, 156,
	157, 155, 158, 0, 159, 0, 160, 161, 230, 162,
	0, 163, 164, 165, 0, 231, 166, 167, 0, 168,
	169, 0, 170, 232, 233, 171, 0, 172, 173, 175,
	234, 174, 235, 0, 176, 0, 177, 178, 0, 236,
	237, 238, 0, 0, 179, 239, 240, 0, 180, 181,
	182, 183, 0, 0, 184, 185, 186, 0, 0, 187,
	188, 189, 241, 242, 83, 190, 0, 0, 0, 0,
	191, 192, 193, 194, 0, 0, 0, 0, 0, 86,
	87, 0, 88, 0, 0, 0, 0, 195, 0, 0,
	0, 0, 89, 90, 196, 197, 198, 199, 91, 200,
	201, 0, 92, 202, 203, 93, 0, 0, 204, 205,
	206, 0, 207, 0, 0, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 208, 106,
	209, 210, 0, 107, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 211, 112, 113, 212,
	0, 0, 0, 114, 115, 213, 0, 116, 0, 117,
	0, 0, 0, 0, 118, 214, 0, 215, 0, 119,
	120, 216, 217, 0, 0, 123, 0, 121, 0, 0,
	122, 218, 219, 220, 0, 221, 0, 0, 124, 0,
	125, 126, 0, 0, 222, 0, 127, 0, 0, 128,
	0, 0, 129, 0, 130, 131, 132, 133, 134, 0,
	135, 136, 139, 137, 0, 138, 0, 223, 140, 224,
	141, 142, 0, 0, 0, 0, 0, 143, 225, 0,
	144, 0, 226, 145, 146, 147, 0, 227, 148, 228,
	149, 0, 150, 151, 152, 229, 317, 154, 0, 156,
	157, 155, 158, 0, 159, 0, 160, 161, 230, 162,
	0, 163, 164, 165, 0, 231, 166, 167, 0, 168,
	169, 0, 170, 232, 233, 171, 0, 172, 173, 175,
	234, 174, 235, 0, 176, 0, 177, 178, 0, 236,
	237, 238, 0, 0, 179, 239, 240, 0, 180, 181,
	182, 183, 0, 0, 184, 185, 186, 0, 0, 187,
	188, 189, 241, 242, 83, 190, 0, 0, 0, 0,
	191, 192, 193, 194, 0, 0, 0, 0, 0, 86,
	87, 0, 88, 0, 0, 0, 0, 195, 0, 0,
	0, 0, 89, 90, 196, 197, 198, 199, 91, 200,
	201, 0, 92, 202, 203, 93, 0, 0, 204, 205,
	206, 0, 207, 0, 0, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 208, 106,
	209, 210, 0, 107, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 211, 112, 113, 212,
	0, 0, 0, 114, 115, 213, 0, 116, 0, 117,
	0, 0, 0, 0, 118, 214, 0, 215, 0, 119,
	120, 216, 217, 0, 0, 123, 0, 121, 0, 0,
	122, 218, 219, 220, 0, 221, 0, 0, 124, 0,
	125, 126, 0, 0, 222, 0, 127, 0, 0, 263,
	0, 0, 129, 0, 130, 131, 132, 133, 271, 0,
	135, 136, 139, 137, 0, 138, 0, 223, 140, 224,
	141, 142, 0, 0, 0, 0, 0, 143, 225, 0,
	144, 0, 226, 145, 146, 147, 0, 227, 148, 228,
	149, 0, 150, 151, 152, 229, 153, 154, 0, 156,
	157, 155, 158, 0, 159, 0, 160, 161, 265, 162,
	0, 163, 164, 165, 0, 231, 166, 264, 0, 168,
	169, 0, 170, 232, 233, 171, 0, 172, 173, 175,
	234, 174, 235, 0, 176, 0, 177, 178, 0, 270,
	237, 238, 0, 0, 266, 239, 240, 0, 180, 181,
	182, 183, 0, 0, 184, 185, 186, 0, 0, 187,
	188, 189, 241, 242, 83, 190, 0, 0, 0, 0,
	191, 192, 193, 194, 0, 0, 0, 0, 0, 86,
	87, 0, 88, 0, 0, 0, 0, 195, 0, 0,
	0, 0, 89, 90, 196, 197, 198, 199, 91, 200,
	201, 0, 92, 202, 203, 93, 0, 0, 204, 205,
	206, 0, 207, 0, 0, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 208, 106,
	209, 210, 0, 107, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 211, 112, 113, 212,
	0, 0, 0, 114, 115, 213, 0, 116, 0, 117,
	0, 0, 0, 0, 118, 214, 0, 215, 0, 119,
	120, 216, 217, 0, 0, 123, 0, 121, 0, 0,
	122, 218, 219, 220, 0, 221, 0, 0, 124, 0,
	125, 126, 0, 0, 222, 0, 127, 0, 0, 128,
	0, 0, 129, 0, 130, 131, 132, 133, 134, 0,
	135, 136, 139, 137, 0, 138, 0, 223, 140, 224,
	141, 142, 0, 0, 0, 0, 0, 143, 225, 0,
	144, 0, 226, 145, 146, 0, 0, 227, 148, 228,
	149, 0, 150, 0, 152, 229, 153, 154, 0, 156,
	157, 155, 158, 0, 159, 0, 160, 161, 230, 0,
	0, 163, 164, 165, 0, 231, 166, 167, 0, 168,
	169, 0, 170, 232, 233, 171, 0, 172, 173, 175,
	234, 174, 235, 0, 176, 0, 177, 178, 0, 236,
	237, 238, 0, 0, 179, 239, 240, 0, 180, 181,
	182, 183, 0, 0, 184, 185, 186, 0, 0, 187,
	188, 189, 241, 242, 0, 190, 0, 0, 0, 0,
	191, 192, 193, 194, 809, 0, 828, 829, 830, 838,
	839, 840, 0, 0, 0, 0, 0, 0, 0, 831,
	0, 0, 0, 0, 0, 0, 811, 0, 842, 0,
	809, 0, 828, 829, 830, 838, 839, 840, 0, 0,
	0, 0, 0, 0, 0, 831, 0, 810, 0, 0,
	0, 0, 811, 825, 842, 0, 0, 0, 0, 0,
	0, 0, 0, 809, 0, 828, 829, 830, 838, 839,
	840, 0, 0, 810, 0, 0, 0, 0, 831, 825,
	0, 0, 0, 0, 0, 811, 0, 842, 0, 809,
	0, 828, 829, 830, 838, 839, 840, 0, 0, 0,
	816, 0, 0, 0, 831, 0, 810, 0, 0, 0,
	0, 811, 825, 842, 0, 0, 0, 835, 843, 0,
	0, 0, 0, 0, 0, 0, 816, 0, 0, 0,
	0, 841, 810, 0, 0, 0, 0, 0, 825, 0,
	0, 833, 0, 835, 843, 0, 0, 826, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 841, 0, 816,
	0, 0, 0, 0, 0, 0, 0, 833, 0, 832,
	0, 0, 0, 826, 0, 0, 835, 843, 0, 0,
	0, 0, 0, 0, 0, 816, 0, 0, 0, 0,
	841, 0, 0, 0, 0, 832, 0, 0, 0, 0,
	833, 0, 835, 843, 827, 0, 826, 0, 0, 0,
	0, 0, 0, 0, 0, 836, 841, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 833, 0, 832, 0,
	827, 0, 826, 0, 0, 0, 0, 0, 0, 0,
	0, 836, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 832, 0, 0, 0, 0, 0,
	0, 0, 0, 827, 0, 0, 0, 0, 834, 0,
	0, 822, 823, 824, 836, 821, 818, 819, 820, 812,
	813, 814, 815, 817, 0, 837, 0, 0, 0, 827,
	0, 0, 1354, 0, 834, 0, 0, 822, 823, 824,
	836, 821, 818, 819, 820, 812, 813, 814, 815, 817,
	0, 837, 0, 0, 0, 0, 0, 0, 1353, 0,
	0, 0, 0, 0, 0, 0, 0, 834, 0, 0,
	822, 823, 824, 0, 821, 818, 819, 820, 812, 813,
	814, 815, 817, 0, 837, 0, 0, 0, 0, 0,
	0, 1307, 0, 834, 0, 0, 822, 823, 824, 0,
	821, 818, 819, 820, 812, 813, 814, 815, 817, 0,
	837, 0, 0, 809, 1751, 828, 829, 830, 838, 839,
	840, 0, 0, 0, 0, 0, 0, 0, 831, 0,
	0, 0, 0, 0, 0, 811, 0, 842, 0, 809,
	0, 828, 829, 830, 838, 839, 840, 0, 0, 0,
	0, 0, 0, 0, 831, 0, 810, 0, 0, 0,
	0, 811, 825, 842, 0, 0, 0, 0, 0, 0,
	0, 0, 809, 0, 828, 829, 830, 838, 839, 840,
	0, 0, 810, 0, 0, 0, 0, 831, 825, 0,
	0, 0, 0, 0, 811, 0, 842, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 816,
	0, 0, 0, 0, 0, 810, 0, 0, 0, 0,
	0, 825, 0, 0, 0, 0, 835, 843, 0, 0,
	0, 0, 0, 0, 0, 816, 0, 0, 0, 0,
	841, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	833, 0, 835, 843, 0, 0, 826, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 841, 0, 816, 0,
	0, 0, 0, 0, 0, 0, 833, 0, 832, 0,
	0, 0, 826, 0, 0, 835, 843, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 841,
	0, 0, 0, 0, 832, 0, 0, 0, 0, 833,
	0, 0, 0, 827, 0, 826, 0, 0, 0, 0,
	0, 0, 0, 0, 836, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 832, 0, 827,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	836, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 827, 0, 0, 0, 0, 834, 0, 0,
	822, 823, 824, 836, 821, 818, 819, 820, 812, 813,
	814, 815, 817, 0, 837, 0, 0, 0, 1749, 0,
	0, 0, 0, 834, 0, 0, 822, 823, 824, 0,
	821, 818, 819, 820, 812, 813, 814, 815, 817, 0,
	837, 0, 0, 0, 1730, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 834, 0, 0, 822,
	823, 824, 0, 821, 818, 819, 820, 812, 813, 814,
	815, 817, 0, 837, 0, 0, 809, 1705, 828, 829,
	830, 838, 839, 840, 0, 0, 0, 0, 0, 0,
	0, 831, 0, 0, 0, 0, 0, 0, 811, 0,
	842, 0, 809, 0, 828, 829, 830, 838, 839, 840,
	0, 0, 0, 0, 0, 0, 0, 831, 0, 810,
	0, 0, 0, 0, 811, 825, 842, 0, 0, 0,
	0, 0, 0, 0, 0, 809, 0, 828, 829, 830,
	838, 839, 840, 0, 0, 810, 0, 0, 0, 0,
	831, 825, 0, 0, 0, 0, 0, 811, 0, 842,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 816, 0, 0, 0, 0, 0, 810, 0,
	0, 0, 0, 0, 825, 0, 0, 0, 0, 835,
	843, 0, 0, 0, 0, 0, 0, 0, 816, 0,
	0, 0, 0, 841, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 833, 0, 835, 843, 0, 0, 826,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 841,
	0, 816, 0, 0, 0, 0, 0, 0, 0, 833,
	0, 832, 0, 0, 0, 826, 0, 0, 835, 843,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 841, 0, 0, 0, 0, 832, 0, 0,
	0, 0, 833, 0, 0, 0, 827, 0, 826, 0,
	0, 0, 0, 0, 0, 0, 0, 836, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	832, 0, 827, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 836, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 827, 0, 0, 0, 0,
	834, 0, 0, 822, 823, 824, 836, 821, 818, 819,
	820, 812, 813, 814, 815, 817, 0, 837, 0, 0,
	0, 1700, 0, 0, 0, 0, 834, 0, 0, 822,
	823, 824, 0, 821, 818, 819, 820, 812, 813, 814,
	815, 817, 0, 837, 0, 0, 0, 1696, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 834,
	0, 0, 822, 823, 824, 0, 821, 818, 819, 820,
	812, 813, 814, 815, 817, 0, 837, 0, 0, 809,
	1632, 828, 829, 830, 838, 839, 840, 0, 0, 0,
	0, 0, 0, 0, 831, 0, 0, 0, 0, 0,
	0, 811, 0, 842, 0, 809, 0, 828, 829, 830,
	838, 839, 840, 0, 0, 0, 0, 0, 0, 0,
	831, 0, 810, 0, 0, 0, 0, 811, 825, 842,
	0, 0, 0, 0, 0, 0, 0, 0, 809, 0,
	828, 829, 830, 838, 839, 840, 0, 0, 810, 0,
	0, 0, 0, 831, 825, 0, 0, 0, 0, 0,
	811, 0, 842, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 816, 0, 0, 0, 0,
	0, 810, 0, 0, 0, 0, 0, 825, 0, 0,
	0, 0, 835, 843, 0, 0, 0, 0, 0, 0,
	0, 816, 0, 0, 0, 0, 841, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 833, 0, 835, 843,
	0, 0, 826, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 841, 0, 816, 0, 0, 0, 0, 0,
	0, 0, 833, 0, 832, 0, 0, 0, 826, 0,
	0, 835, 843, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 841, 0, 0, 0, 0,
	832, 0, 0, 0, 0, 833, 0, 0, 0, 827,
	0, 826, 0, 0, 0, 0, 0, 0, 0, 0,
	836, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 832, 0, 827, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 836, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 827, 0,
	0, 0, 0, 834, 0, 0, 822, 823, 824, 836,
	821, 818, 819, 820, 812, 813, 814, 815, 817, 0,
	837, 0, 0, 0, 1631, 0, 0, 0, 0, 834,
	0, 0, 822, 823, 824, 0, 821, 818, 819, 820,
	812, 813, 814, 815, 817, 0, 837, 0, 0, 0,
	1541, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 834, 0, 0, 822, 823, 824, 0, 821,
	818, 819, 820, 812, 813, 814, 815, 817, 0, 837,
	0, 0, 809, 1475, 828, 829, 830, 838, 839, 840,
	0, 0, 0, 0, 0, 0, 0, 831, 0, 0,
	0, 0, 0, 0, 811, 0, 842, 0, 809, 0,
	828, 829, 830, 838, 839, 840, 0, 0, 0, 0,
	0, 0, 0, 831, 0, 810, 0, 0, 0, 0,
	811, 825, 842, 0, 0, 0, 0, 0, 0, 0,
	0, 809, 0, 828, 829, 830, 838, 839, 840, 0,
	0, 810, 0, 0, 0, 0, 831, 825, 0, 0,
	0, 0, 0, 811, 0, 842, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 816, 0,
	0, 0, 0, 0, 810, 0, 0, 0, 0, 0,
	825, 0, 0, 0, 0, 835, 843, 0, 0, 0,
	0, 0, 0, 0, 816, 0, 0, 0, 0, 841,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 833,
	0, 835, 843, 0, 0, 826, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 841, 0, 816, 0, 0,
	0, 0, 0, 0, 0, 833, 0, 832, 0, 0,
	0, 826, 0, 0, 835, 843, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 841, 0,
	0, 0, 0, 832, 0, 0, 0, 0, 833, 0,
	0, 0, 827, 0, 826, 0, 0, 0, 0, 0,
	0, 0, 0, 836, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 832, 0, 827, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 836,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 827, 0, 0, 0, 0, 834, 0, 0, 822,
	823, 824, 836, 821, 818, 819, 820, 812, 813, 814,
	815, 817, 0, 837, 0, 0, 0, 1459, 0, 0,
	0, 0, 834, 0, 0, 822, 823, 824, 0, 821,
	818, 819, 820, 812, 813, 814, 815, 817, 0, 837,
	0, 0, 0, 1090, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 834, 0, 0, 822, 823,
	824, 0, 821, 818, 819, 820, 812, 813, 814, 815,
	817, 0, 837, 809, 1523, 828, 829, 830, 838, 839,
	840, 0, 0, 0, 0, 0, 0, 0, 831, 0,
	0, 0, 0, 0, 0, 811, 0, 842, 0, 0,
	0, 0, 0, 0, 0, 809, 0, 828, 829, 830,
	838, 839, 840, 0, 0, 0, 810, 0, 0, 0,
	831, 0, 825, 0, 0, 0, 0, 811, 0, 842,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 810, 0,
	0, 0, 0, 809, 825, 828, 829, 830, 838, 839,
	840, 0, 0, 0, 0, 0, 0, 0, 831, 816,
	1821, 0, 0, 1024, 0, 811, 0, 842, 0, 0,
	0, 0, 0, 0, 0, 0, 835, 843, 0, 0,
	0, 0, 0, 0, 0, 0, 810, 0, 0, 0,
	841, 816, 825, 1345, 0, 0, 1344, 0, 0, 0,
	833, 0, 0, 0, 0, 0, 826, 0, 835, 843,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1025,
	0, 0, 841, 0, 0, 0, 0, 0, 832, 0,
	0, 0, 833, 0, 0, 0, 0, 0, 826, 816,
	0, 1820, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 835, 843, 0, 0,
	832, 0, 0, 827, 0, 0, 0, 0, 0, 0,
	841, 0, 0, 0, 836, 0, 0, 0, 0, 0,
	833, 0, 0, 0, 0, 0, 826, 0, 0, 0,
	0, 0, 0, 0, 0, 827, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 836, 0, 832, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 834, 0, 0,
	822, 823, 824, 0, 821, 818, 819, 820, 812, 813,
	814, 815, 817, 827, 837, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 836, 0, 0, 0, 0, 834,
	0, 0, 822, 823, 824, 0, 821, 818, 819, 820,
	812, 813, 814, 815, 817, 0, 837, 0, 845, 0,
	0, 0, 0, 0, 809, 0, 828, 829, 830, 838,
	839, 840, 0, 0, 0, 0, 0, 0, 0, 831,
	0, 0, 0, 844, 0, 0, 811, 834, 842, 0,
	822, 823, 824, 0, 821, 818, 819, 820, 812, 813,
	814, 815, 817, 0, 837, 0, 0, 810, 0, 0,
	0, 0, 809, 825, 828, 829, 830, 838, 839, 840,
	0, 0, 0, 0, 0, 0, 0, 831, 0, 0,
	0, 0, 0, 0, 811, 0, 842, 0, 0, 0,
	0, 0, 0, 0, 809, 0, 828, 829, 830, 838,
	839, 840, 0, 0, 0, 810, 0, 0, 0, 831,
	816, 825, 0, 0, 0, 0, 811, 0, 842, 0,
	0, 0, 0, 0, 0, 0, 0, 835, 843, 0,
	0, 0, 0, 0, 0, 0, 0, 810, 0, 0,
	0, 841, 0, 825, 0, 0, 0, 0, 0, 0,
	0, 833, 0, 0, 0, 0, 0, 826, 816, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 835, 843, 0, 0, 832,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 841,
	816, 0, 0, 0, 0, 0, 0, 0, 0, 833,
	0, 0, 0, 0, 0, 826, 0, 835, 843, 0,
	0, 0, 0, 0, 827, 0, 0, 0, 0, 0,
	0, 841, 0, 0, 0, 836, 0, 832, 312, 0,
	0, 833, 0, 0, 0, 0, 0, 826, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 832,
	0, 0, 827, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 836, 0, 0, 0, 0, 834, 0,
	0, 822, 823, 824, 0, 821, 818, 819, 820, 812,
	813, 814, 815, 817, 827, 837, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 836, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1469, 0, 0, 0, 834, 0, 0, 822,
	823, 824, 0, 821, 818, 819, 820, 812, 813, 814,
	815, 817, 0, 837, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 834, 0,
	0, 822, 823, 824, 0, 821, 818, 819, 820, 812,
	813, 814, 815, 817, 809, 837, 828, 829, 830, 838,
	839, 840, 0, 0, 0, 0, 0, 0, 0, 831,
	0, 0, 0, 0, 0, 0, 811, 0, 842, 0,
	809, 0, 828, 829, 830, 838, 839, 840, 0, 0,
	0, 0, 0, 0, 0, 831, 0, 810, 0, 1346,
	0, 0, 811, 825, 842, 0, 0, 0, 0, 0,
	0, 0, 0, 809, 0, 828, 829, 830, 838, 839,
	840, 0, 0, 810, 0, 0, 0, 0, 831, 825,
	0, 0, 0, 0, 0, 811, 0, 842, 0, 809,
	0, 828, 829, 830, 838, 839, 840, 0, 0, 0,
	816, 0, 0, 0, 831, 1351, 810, 0, 1306, 0,
	0, 811, 825, 842, 0, 0, 0, 835, 843, 0,
	0, 0, 0, 0, 0, 0, 816, 0, 0, 0,
	0, 841, 810, 0, 0, 0, 0, 0, 825, 0,
	0, 833, 0, 835, 843, 0, 0, 826, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 841, 0, 816,
	0, 0, 0, 0, 0, 0, 0, 833, 0, 832,
	0, 0, 0, 826, 0, 0, 835, 843, 0, 0,
	0, 0, 0, 0, 0, 816, 0, 0, 0, 0,
	841, 0, 0, 0, 0, 832, 0, 0, 0, 0,
	833, 0, 835, 843, 827, 0, 826, 0, 0, 0,
	0, 0, 0, 0, 0, 836, 841, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 833, 0, 832, 0,
	827, 0, 826, 0, 0, 0, 0, 0, 0, 1312,
	0, 836, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 832, 0, 0, 0, 0, 0,
	0, 0, 0, 827, 0, 0, 0, 0, 834, 0,
	0, 822, 823, 824, 836, 821, 818, 819, 820, 812,
	813, 814, 815, 817, 0, 837, 0, 0, 0, 827,
	0, 0, 0, 0, 834, 0, 0, 822, 823, 824,
	836, 821, 818, 819, 820, 812, 813, 814, 815, 817,
	0, 837, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 834, 0, 0,
	822, 823, 824, 0, 821, 818, 819, 820, 812, 813,
	814, 815, 817, 0, 837, 0, 0, 0, 0, 0,
	0, 0, 0, 834, 0, 0, 822, 823, 824, 0,
	821, 818, 819, 820, 812, 813, 814, 815, 817, 809,
	837, 828, 829, 830, 838, 839, 840, 0, 0, 0,
	0, 0, 0, 0, 831, 0, 0, 0, 0, 0,
	0, 811, 0, 842, 0, 809, 0, 828, 829, 830,
	838, 839, 840, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 810, 0, 0, 0, 0, 811, 825, 842,
	0, 0, 0, 809, 0, 828, 829, 830, 838, 839,
	840, 0, 0, 0, 0, 0, 0, 0, 810, 0,
	0, 0, 0, 0, 825, 811, 0, 842, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 816, 810, 0, 0, 0,
	0, 0, 825, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 835, 843, 0, 0, 0, 0, 0, 0,
	0, 816, 0, 0, 0, 0, 841, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 833, 0, 835, 843,
	0, 0, 826, 0, 0, 0, 0, 0, 0, 816,
	0, 0, 841, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 833, 0, 832, 0, 835, 843, 826, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	833, 0, 0, 0, 0, 0, 826, 0, 0, 827,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	836, 0, 0, 0, 0, 608, 603, 625, 597, 616,
	615, 0, 0, 599, 598, 827, 0, 0, 627, 626,
	0, 0, 0, 0, 0, 0, 836, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 827, 0, 0, 0, 0, 621, 0,
	613, 612, 0, 834, 836, 0, 822, 823, 824, 611,
	821, 818, 819, 820, 812, 813, 814, 815, 817, 0,
	837, 0, 0, 0, 0, 610, 0, 0, 0, 834,
	0, 0, 822, 823, 824, 0, 821, 818, 819, 820,
	812, 813, 814, 815, 817, 0, 837, 0, 0, 0,
	0, 604, 605, 606, 0, 624, 0, 834, 0, 0,
	822, 823, 824, 0, 821, 818, 819, 820, 812, 813,
	814, 815, 817, 0, 837, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 614,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 609, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 601, 0, 0, 0, 0,
	0, 0, 0, 607, 602, 0, 0, 0, 0, 0,
	629, 0, 0, 0, 0, 0, 0, 600, 0, 0,
	622, 623, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 628,
}
var sqlPact = [...]int{

	2429, -1000, -104, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 910, -1000, -1000, -1000, 717, 796,
	969, 15460, 15460, 15200, 1481, 1481, 16760, -1000, -1000, 19620,
	-1000, 2721, 526, 533, 526, 526, 521, 16760, 601, 739,
	162, -1000, 691, 97, 19360, 15460, 1313, 27, 14160, 346,
	2429, 14940, 15460, 19100, 1142, 1055, 1050, 14160, 18840, 18580,
	18320, -1000, 9681, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 600, 357, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 353, -1000, 14680, -1000, 897, -1000, 22,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 896, -1000,
	15460, -1000, -1000, 18060, 17800, 350, 887, -1000, -1000, 564,
	438, 1332, -1000, 40, -1000, -1000, 1139, -1000, 892, 1131,
	1130, 1124, 1123, 1122, 1116, 429, 964, -1000, 599, 887,
	-1000, 887, -1000, -1000, -1000, 581, 16760, -1000, 14160, -1000,
	17540, 1058, 17280, -1000, 691, -1000, -1000, -1000, 934, 1312,
	1312, 1312, 1322, 155, 152, 162, 12, 15460, -1000, 347,
	12, 6946, 6946, -1000, -1000, 346, -1000, 371, 12333, 39,
	-1000, 7492, -1000, 811, 1218, 706, 694, 1216, -105, 14160,
	15460, 15460, 636, 17020, -1000, 1215, 121, 1211, -1000, 120,
	1210, -1000, -2, -1000, -1000, -1000, -1000, -1000, -1000, 346,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 14420, 1345, 23120, -1000, 8875, -1000,
	-1000, 12596, 1414, 12596, -1000, -1000, 1344, -1000, 8875, -1000,
	19, 16, 1026, 1044, 10224, 9954, 1271, 854, -1000, -1000,
	-1000, 38, 4398, 15460, 1152, 12596, 15460, 15460, 15460, 15460,
	15460, 15460, -1000, 1024, -1000, 15460, -1000, 15, 14, -1000,
	16760, -1000, 122, -1000, 339, 987, 16500, 1229, 958, -1000,
	934, -1000, 860, 1013, 8056, 8875, 162, -1000, -1000, 162,
	162, 8875, -1000, -1000, 15460, 12, 1339, 15460, 132, -1000,
	22204, -1000, -1000, 8875, 8875, 8875, 8875, 8875, 763, -1000,
	-1000, -1000, 5233, -1000, -1000, 39, 337, 229, -1000, -1000,
	336, 39, -1000, -1000, -1000, -1000, 335, 1449, 387, -1000,
	-1000, -1000, 8875, 442, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1149, 334, 323, -1000, -1000, -1000, -1000,
	321, 320, 317, 314, 313, 312, 310, 309, 308, 307,
	306, 304, 295, 286, 728, -1000, 475, -1000, -1000, 475,
	475, -1000, 280, 280, 283, -1000, -1000, -1000, 280, -1000,
	-1000, -1000, 452, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	285, 132, -1000, -1000, -1000, 15460, 39, -1000, -1000, -1000,
	8875, 4128, -4, -1000, 22929, -1000, -36, 813, -1000, 13640,
	1287, 1284, 1283, 14160, 580, 579, 15460, 15460, 458, 92,
	1338, 92, 11807, -1000, 15460, 15460, -1000, 15460, -1000, -1000,
	15460, -1000, 15460, 15460, 575, 13120, 762, 1209, 97, -6,
	-1000, 1348, -1000, -1000, -1000, -1000, 77, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	283, 728, 280, 280, 280, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 452, -1000, -1000, 475, 475, 475, -1000, -1000,
	-10, 22929, 577, -11, 12858, 15460, -1000, 30, -1000, -1000,
	1112, 514, -15, 723, 1040, 933, -1000, -1000, -1000, -1000,
	9, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1404, -1000, -1000, -1000, -1000, 1427, 9, -1000, -1000,
	-1000, -1000, -1000, 1442, -1000, -1000, -1000, 4398, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 15460, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 723, 1040, -1000, -1000, 14160,
	13380, 1206, 884, 946, -1000, -1000, 406, 1205, -1000, -1000,
	-1000, -1000, 22929, -1000, 22929, 667, 1059, -1000, 1059, 4,
	-1000, 21963, -1000, 277, -16, -1000, 458, 6946, 11544, 23120,
	15460, 593, 8875, 8875, 8875, 8875, 8875, 8875, 8875, 8875,
	8875, 8875, 8875, 8875, 8875, 8875, 8875, 8875, 8875, 8875,
	8875, 8875, 8875, 8875, 1019, 8875, 574, 8875, 8875, 8875,
	8875, 1263, 817, 250, 4398, -1000, 654, 654, 654, 22955,
	22955, 241, 13, 21568, -3, 39, -1000, -1000, 6655, 6363,
	39, 4668, -1000, 616, 1409, 466, 22929, 1159, 1092, 272,
	151, 149, 8875, 8875, 729, 8875, 9148, 8875, 8875, 5506,
	8875, 8875, 8875, 8875, 8875, 8875, -1000, 257, -1000, -1000,
	-1000, -1000, 1408, -1000, -1000, 1406, -1000, 591, 588, 1402,
	458, 148, -1000, 2612, -1000, -1000, 7492, -1000, 762, 15460,
	15460, 15460, -1000, -1000, 941, 16240, -1000, 23120, 15460, -1000,
	256, 254, 1033, 1027, 15460, 15460, 15980, 15720, 15460, 806,
	15460, 15460, 692, -1000, 670, 8875, 773, -1000, 11017, 479,
	15460, 686, 125, -1000, -1000, -1000, 398, 15460, -1000, -1000,
	-1000, 121, -1000, 120, -1000, -1000, 14160, -1000, -1000, -1000,
	-1000, -1000, -1000, 23120, 365, 362, -1000, 1398, 572, -1000,
	571, 565, 563, -1000, 253, -1000, 8875, 15460, 12858, -11,
	-17, -1000, -1000, 15460, 1040, -1000, -1000, -1000, -1000, 701,
	-1000, 696, -1000, 10494, -1000, -1000, -1000, 616, -1000, -40,
	-1000, -1000, -1000, -1000, 146, -30, -1000, -1000, -1000, -1000,
	-1000, 15460, 316, 15460, 15460, 15460, 1203, 1436, 15460, -1000,
	-1000, -1000, 8875, -1000, -1000, -1000, 97, 15460, -1000, 1084,
	-1000, -93, 1417, -136, 13900, -1000, 10754, -1000, -1000, 417,
	383, 383, 529, 529, 529, 529, 1830, 1830, 1137, 1559,
	192, 192, 192, 510, 268, 268, 192, 192, 192, 22955,
	2938, 2123, 8875, 8875, 561, 815, 250, 2123, 8875, 1372,
	2123, 2123, 2123, -1000, 700, -1000, -1000, -1000, 1110, 249,
	9148, 9148, -1000, -1000, -1000, 5233, -1000, -1000, 246, 8875,
	-1000, 8875, -111, -129, -1000, -1000, -21, -1000, -1000, -27,
	8875, 8875, 8875, 143, -1000, 140, 643, -1000, 8875, 801,
	230, 228, 8875, -1000, -1000, 22649, 20203, 138, 1105, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 133, 22623, 131, 3108,
	-1000, 9148, 9148, 9148, 5233, 225, 130, 21915, -99, 22590,
	7765, 7765, 7765, 127, 22564, 8875, -99, 20170, 20144, 2986,
	-22, -23, -28, 1395, -29, 119, 415, 393, 110, 1084,
	-1000, -1000, 8875, -1000, -1000, -1000, 548, 546, 1198, -1000,
	940, -1000, 732, 8875, 15460, 223, 209, 761, -1000, 1197,
	837, 1188, 837, -1000, -36, 799, -1000, -1000, 543, -1000,
	6946, 22929, -1000, 674, 1291, -35, -1000, -1000, -1000, 6946,
	458, 11807, 11544, 7492, -39, -1000, -1000, 762, -1000, 511,
	1386, 106, 1003, 775, 758, 650, 1384, 22929, -40, -1000,
	-40, -1000, -1000, -1000, -1000, -1000, -1000, 15460, 1072, 13380,
	208, 15460, 207, 206, 205, 15460, -1000, 1229, -1000, 105,
	-1000, 1081, 1318, -1000, 11544, 907, 1038, 1037, 11544, 996,
	814, 814, 814, -1000, 13900, 3846, -1000, -1000, 15460, 203,
	11280, 104, 1417, 8875, 2123, 2123, 8875, 9148, 9148, -1000,
	2123, -1000, -1000, -1000, -1000, 1103, 202, 8875, 23120, 3144,
	3094, -41, 6071, -49, 21542, -1000, -1000, 229, -1000, 99,
	7219, -1000, 22252, -14, -14, -1000, 1435, 1222, -1000, 8875,
	22284, -1000, 12070, 463, 833, 21258, 23120, 23120, -1000, 8875,
	-1000, 1101, 8875, -1000, 23120, 9148, 9148, 9148, 9148, 9148,
	9148, 9148, 9148, 9148, 9148, 9148, 9148, 9148, 9148, 9148,
	9148, 9148, 9148, 9148, 1001, 9148, 1371, 1371, 1371, -50,
	5779, -1000, 1107, 1101, 8875, 8875, 23120, 95, 93, 90,
	-1000, 8875, -99, 8875, 8875, 8875, -1000, -1000, -1000, 84,
	-1000, 1377, -1000, -1000, -1000, -1000, 1081, 21601, 15460, 15460,
	15460, 1183, 2608, -1000, 21225, -45, 15460, 15460, -1000, 1021,
	1062, 506, 15460, -1000, 15460, -1000, 15460, 15460, 15460, 15460,
	-69, 6946, 204, 97, 15460, -69, 670, -1000, -56, -1000,
	390, -1000, 360, 359, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 78, -1000, -1000, 1074, -1000, 9418, 201, 15460,
	13380, 9418, 881, -1000, -1000, 454, 8875, 8875, 1417, 604,
	11544, 11544, 1352, 1035, 11544, -1000, -1000, -1000, -1000, -1000,
	-1000, 1048, 200, 15460, 13900, 676, 2123, 1875, 227, 8875,
	23120, 22983, -51, 8875, 8875, -1000, -60, -1000, 8875, -1000,
	-1000, 1432, 8875, 70, 68, 67, -1000, -1000, 22929, 8875,
	-1000, -1000, 19880, 8875, 65, -1000, 63, 60, 22929, 1107,
	22929, -1000, 646, 646, 1371, 1371, 1371, 1371, 808, 808,
	711, 1938, 245, 245, 245, 1042, 430, 430, 245, 245,
	245, 1100, 985, 198, 3192, 8875, -64, -1000, -1000, -1000,
	22929, 22929, 57, -1000, -1000, -1000, -99, 2903, 21199, 20915,
	-1000, 55, 454, -1000, -1000, -1000, -1000, 15460, -1000, 15460,
	-1000, 15460, 15460, 1104, 925, -1000, -1000, 1022, 197, 9148,
	15460, -1000, 790, -68, -76, 919, -1000, 821, 8875, -1000,
	23120, 837, 837, -1000, 537, 536, -1000, -69, 1234, 15460,
	1282, -1000, -1000, -1000, 194, -1000, -1000, -1000, 770, -77,
	-1000, 172, 1299, 8875, -1000, -1000, 188, 9418, -78, 52,
	-83, 15460, -1000, 15460, 22929, -99, 585, -1000, 1352, -1000,
	178, 8875, 11544, -1000, -150, -1000, 389, -1000, 15460, -84,
	-1000, 8875, 8875, 22983, -85, -1000, 2123, 2123, -1000, 20882,
	-1000, 22252, -1000, -1000, -1000, 22929, 733, -1000, 20856, -1000,
	-1000, -1000, -1000, 9148, 1098, 176, 23120, 20572, -1000, -1000,
	8875, -1000, -1000, -1000, -1000, -1000, 1056, -1000, -1000, 15460,
	936, -1000, -1000, 8875, 3192, 171, 1072, 168, -1000, -1000,
	-1000, 710, -1000, -1000, 22929, 1300, -1000, -1000, 15460, 15460,
	586, -95, 15460, -1000, -1000, 4960, 15460, 790, 9418, 1306,
	39, 15460, 1306, 20539, 4668, -100, -1000, 1072, 790, 167,
	-75, -1000, 1336, 1431, -1000, 15460, 22929, -1000, 1048, -1000,
	4398, -106, -1000, 2123, 2123, -1000, -1000, 51, 833, 1317,
	-1000, 2329, 9148, 23120, -107, -1000, 20513, -1000, -1000, 1170,
	20229, 1006, 15460, -1000, 15460, 15460, 485, 15460, -1000, -1000,
	620, -1000, 458, -1000, 165, 1072, -1000, -1000, -1000, -1000,
	1299, -27, 790, -1000, 1072, 9418, 15460, 160, -1000, -117,
	-1000, -1000, -1000, -1000, 678, 8875, 2329, -119, -1000, -1000,
	1163, -1000, 851, 791, 48, -125, 157, -1000, 8875, -1000,
	11807, -1000, 15460, -1000, 1306, 43, 1072, -1000, -127, -1000,
	-1000, -1000, 42, 8602, 8602, -99, -1000, 15460, -1000, 869,
	867, 669, -1000, -1000, -1000, -1000, -1000, 1006, 15460, 22929,
	-108, -137, -1000, -1000, -1000, 790, -1000, -1000, -1000, 3523,
	870, 648, 21883, -1000, -1000, -1000, 1247, -1000, 495, 859,
	859, 851, -138, -1000, 837, 1072, 1354, -1000, -1000, -1000,
	-1000, -1000, -1000, 1361, -1000, -1000, 1016, -1000, -1000, -1000,
	-1000, -1000, 8329, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1708, 1703, 1346, 123, 119, 1702, 1696, 1692, 107,
	116, 115, 121, 1680, 93, 1678, 1677, 1675, 104, 1674,
	1673, 1671, 49, 1670, 1668, 1666, 1664, 1661, 102, 44,
	155, 2239, 153, 1658, 1657, 1656, 12, 108, 77, 1655,
	6, 66, 101, 103, 705, 50, 1652, 1651, 137, 31,
	15, 319, 94, 143, 132, 126, 1649, 1645, 1641, 41,
	1639, 3, 1638, 1629, 1627, 52, 23, 1626, 28, 19,
	1625, 1620, 120, 1614, 74, 95, 114, 29, 125, 78,
	1613, 46, 13, 72, 1607, 18, 1604, 27, 79, 134,
	1603, 58, 175, 67, 16, 60, 1600, 1596, 1595, 1589,
	76, 1587, 86, 82, 1586, 1585, 84, 1583, 128, 136,
	1581, 1580, 131, 1578, 1577, 1574, 762, 1573, 1572, 667,
	1570, 8, 39, 65, 5, 110, 106, 38, 1563, 22,
	1554, 1375, 731, 1268, 1553, 54, 43, 85, 51, 61,
	21, 1552, 1551, 97, 1550, 1549, 1548, 1547, 1542, 81,
	1540, 83, 140, 45, 53, 96, 25, 26, 87, 118,
	144, 99, 1539, 1538, 112, 1537, 47, 1531, 1526, 1029,
	113, 1524, 1520, 1518, 724, 683, 679, 172, 1515, 1513,
	591, 228, 1512, 1508, 129, 1505, 1503, 141, 216, 35,
	1501, 111, 1500, 89, 1498, 0, 57, 36, 1496, 124,
	75, 1495, 1494, 1492, 1488, 17, 2, 11, 7, 9,
	4, 30, 24, 1484, 1483, 127, 91, 1477, 145, 1476,
	1475, 42, 1474, 1470, 20, 1469, 14, 1468, 10, 1,
	1467, 139, 1466, 90, 1465, 1372, 1460, 142, 1459, 1456,
	1358, 88,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 4, 4, 38, 38, 37,
	37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
	37, 37, 37, 37, 35, 35, 40, 40, 40, 39,
	39, 34, 34, 5, 5, 5, 9, 10, 10, 10,
	10, 10, 10, 78, 78, 77, 77, 80, 80, 11,
	11, 12, 12, 12, 12, 12, 12, 12, 12, 165,
	165, 164, 13, 141, 141, 14, 14, 14, 14, 15,
	101, 101, 16, 16, 16, 16, 17, 21, 231, 231,
	231, 235, 235, 236, 236, 237, 237, 237, 237, 237,
	237, 237, 233, 233, 24, 24, 24, 24, 24, 120,
	116, 116, 118, 118, 118, 118, 43, 115, 115, 115,
	115, 117, 117, 117, 117, 188, 187, 187, 193, 193,
	193, 56, 56, 56, 56, 56, 57, 57, 57, 186,
	186, 186, 186, 194, 194, 194, 194, 194, 194, 58,
	58, 58, 192, 192, 25, 25, 25, 25, 25, 25,
	25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
	25, 232, 232, 234, 234, 8, 8, 59, 59, 60,
	60, 123, 123, 123, 123, 61, 61, 122, 203, 203,
	204, 204, 204, 204, 204, 204, 205, 205, 205, 205,
	205, 205, 205, 201, 201, 202, 199, 199, 200, 200,
	200, 200, 238, 238, 121, 121, 64, 64, 208, 208,
	208, 208, 206, 206, 206, 206, 206, 209, 207, 210,
	210, 210, 210, 210, 152, 152, 152, 27, 7, 7,
	105, 105, 68, 68, 156, 156, 156, 50, 50, 36,
	36, 36, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 106, 106, 107, 107, 19, 23, 26, 26, 26,
	26, 26, 240, 240, 47, 47, 47, 47, 48, 48,
	119, 119, 119, 119, 119, 42, 6, 6, 41, 41,
	18, 18, 18, 18, 18, 53, 53, 112, 112, 112,
	114, 114, 113, 113, 113, 91, 91, 28, 73, 73,
	82, 82, 83, 83, 162, 84, 84, 22, 22, 31,
	31, 29, 29, 29, 29, 29, 29, 30, 30, 32,
	32, 32, 32, 32, 32, 32, 216, 216, 216, 218,
	218, 215, 217, 217, 239, 239, 92, 92, 92, 63,
	62, 62, 66, 66, 65, 67, 67, 155, 89, 89,
	89, 89, 108, 109, 109, 110, 110, 111, 111, 88,
	88, 138, 138, 33, 33, 72, 72, 74, 74, 129,
	129, 130, 130, 128, 128, 128, 157, 157, 157, 157,
	158, 158, 158, 158, 158, 158, 153, 153, 153, 153,
	154, 154, 163, 163, 95, 95, 95, 95, 93, 93,
	94, 94, 159, 159, 159, 159, 90, 90, 160, 160,
	160, 124, 124, 166, 166, 166, 71, 71, 71, 167,
	167, 167, 167, 167, 167, 167, 167, 167, 167, 167,
	167, 167, 168, 168, 168, 168, 170, 170, 170, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 171, 171, 178, 178, 179, 179, 180, 181,
	172, 172, 173, 173, 174, 175, 182, 182, 182, 182,
	184, 184, 176, 176, 176, 176, 176, 177, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 103, 103, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 211, 211, 211, 211, 211, 211, 211,
	213, 213, 214, 214, 212, 212, 212, 212, 212, 212,
	212, 212, 212, 212, 212, 212, 212, 212, 212, 212,
	212, 212, 212, 212, 212, 212, 212, 212, 212, 212,
	219, 219, 220, 220, 221, 221, 222, 222, 224, 225,
	225, 225, 226, 230, 230, 223, 223, 227, 227, 227,
	228, 228, 229, 229, 229, 229, 229, 143, 143, 143,
	144, 144, 145, 79, 79, 140, 140, 139, 139, 139,
	142, 142, 96, 183, 183, 183, 183, 183, 183, 183,
	97, 97, 104, 98, 98, 99, 99, 99, 99, 99,
	99, 135, 136, 100, 100, 100, 137, 137, 146, 150,
	150, 149, 148, 148, 147, 147, 127, 127, 127, 127,
	126, 125, 85, 85, 241, 241, 151, 151, 86, 86,
	87, 81, 81, 161, 161, 161, 161, 75, 75, 55,
	55, 76, 76, 51, 51, 54, 52, 52, 52, 52,
	69, 69, 70, 70, 49, 49, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 185, 185, 185,
	44, 44, 44, 45, 45, 46, 46, 190, 190, 190,
	191, 191, 191, 191, 189, 189, 189, 189, 189, 195,
	195, 195, 195, 195, 195, 195, 195, 195, 195, 195,
	195, 195, 195, 195, 195, 195, 195, 195, 195, 195,
	195, 195, 195, 195, 195, 195, 195, 195, 195, 195,
	195, 195, 195, 195, 195, 195, 195, 195, 195, 195,
	195, 195, 195, 195, 195, 195, 195, 195, 195, 195,
	195, 195, 195, 195, 195, 195, 195, 195, 195, 195,
	195, 195, 195, 195, 195, 195, 195, 195, 195, 195,
	195, 195, 195, 195, 195, 195, 195, 195, 195, 195,
	195, 195, 195, 195, 195, 195, 195, 195, 195, 195,
	195, 195, 195, 195, 195, 195, 195, 195, 195, 195,
	195, 195, 195, 195, 195, 195, 195, 195, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 4, 6, 1, 3, 2,
	5, 3, 6, 4, 6, 6, 6, 4, 8, 2,
	3, 3, 6, 4, 3, 2, 1, 1, 0, 2,
	0, 2, 0, 1, 1, 1, 6, 3, 5, 4,
	6, 4, 6, 1, 3, 1, 2, 2, 3, 2,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 1, 5, 3, 0, 1, 1, 1, 1, 3,
	3, 0, 2, 3, 2, 3, 6, 6, 1, 2,
	2, 1, 1, 1, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 2, 3, 6, 3, 1, 5,
	2, 1, 1, 1, 3, 3, 2, 3, 3, 3,
	3, 1, 3, 3, 2, 1, 1, 3, 1, 1,
	1, 2, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 1, 1, 1, 1,
	1, 0, 1, 1, 2, 2, 4, 2, 4, 4,
	4, 4, 4, 4, 4, 2, 3, 4, 3, 2,
	4, 2, 0, 2, 0, 7, 10, 1, 0, 1,
	3, 1, 1, 1, 1, 8, 0, 3, 2, 0,
	3, 1, 2, 2, 3, 6, 2, 1, 1, 2,
	4, 2, 5, 7, 8, 5, 3, 1, 4, 6,
	5, 10, 1, 1, 4, 0, 3, 0, 2, 2,
	2, 0, 1, 1, 2, 2, 0, 3, 3, 2,
	1, 1, 2, 2, 1, 2, 1, 4, 11, 14,
	1, 0, 1, 3, 3, 3, 5, 2, 0, 1,
	1, 0, 6, 6, 8, 6, 8, 8, 10, 8,
	10, 1, 0, 2, 0, 2, 2, 3, 3, 2,
	2, 2, 1, 0, 1, 3, 2, 0, 2, 1,
	1, 1, 3, 3, 0, 3, 4, 7, 3, 0,
	6, 6, 8, 5, 7, 1, 3, 1, 4, 2,
	8, 5, 4, 3, 0, 2, 0, 8, 2, 0,
	1, 3, 1, 1, 3, 5, 5, 1, 1, 3,
	3, 1, 2, 3, 2, 3, 4, 1, 1, 8,
	8, 1, 2, 4, 4, 4, 2, 2, 3, 1,
	3, 6, 1, 0, 1, 0, 1, 1, 0, 1,
	1, 0, 1, 0, 3, 1, 3, 2, 2, 2,
	1, 1, 2, 2, 3, 1, 1, 1, 1, 3,
	0, 2, 0, 2, 3, 3, 0, 1, 3, 3,
	1, 1, 3, 2, 4, 0, 3, 2, 1, 4,
	3, 4, 5, 4, 5, 4, 5, 2, 4, 1,
	1, 0, 5, 0, 2, 2, 2, 1, 1, 0,
	4, 2, 1, 2, 2, 4, 1, 3, 1, 2,
	3, 2, 0, 2, 5, 2, 3, 4, 0, 1,
	1, 1, 1, 2, 4, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 5, 0, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 2, 2,
	1, 1, 3, 0, 1, 1, 1, 1, 5, 2,
	1, 1, 1, 1, 4, 1, 2, 2, 1, 1,
	1, 0, 1, 1, 4, 1, 4, 1, 1, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 0, 1, 4, 1, 3, 3, 5, 2, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 2, 3, 4, 3, 4, 4, 5,
	3, 3, 3, 3, 3, 4, 3, 3, 4, 3,
	4, 3, 4, 5, 6, 6, 7, 6, 7, 6,
	7, 3, 4, 1, 3, 2, 2, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 5, 6, 6,
	7, 1, 1, 1, 3, 1, 1, 1, 2, 2,
	2, 1, 1, 3, 5, 6, 8, 6, 6, 4,
	4, 1, 1, 1, 5, 1, 3, 1, 3, 1,
	1, 1, 1, 6, 6, 4, 4, 4, 4, 6,
	5, 5, 5, 4, 8, 6, 6, 4, 4, 4,
	5, 0, 5, 0, 2, 0, 1, 3, 3, 2,
	2, 0, 6, 1, 0, 3, 0, 2, 2, 0,
	1, 4, 2, 2, 2, 2, 2, 4, 3, 5,
	4, 3, 5, 1, 3, 1, 3, 3, 3, 2,
	1, 3, 3, 1, 1, 1, 1, 1, 1, 1,
	4, 3, 2, 3, 0, 3, 3, 2, 2, 1,
	0, 2, 2, 3, 2, 1, 1, 3, 5, 1,
	2, 4, 2, 0, 1, 0, 1, 1, 3, 5,
	2, 2, 1, 2, 1, 0, 1, 1, 1, 3,
	3, 1, 3, 3, 2, 1, 1, 1, 3, 1,
	3, 1, 3, 1, 2, 3, 1, 1, 2, 2,
	1, 3, 3, 0, 1, 2, 1, 1, 1, 1,
	6, 2, 3, 5, 1, 1, 1, 1, 2, 2,
	1, 1, 1, 1, 0, 3, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -9, -10, -11, -13,
	-15, -16, -17, -18, -20, -21, -23, -22, -24, -25,
	-26, -19, -27, -28, 22, -6, -7, -8, -217, 90,
	98, 190, 97, 83, 113, 204, 211, -29, -31, 219,
	-120, 220, 33, 228, 57, 93, 206, 201, 248, 64,
	-216, -32, -30, 294, 269, 275, 214, -33, 235, 262,
	297, 235, 76, 126, 85, 130, 256, 255, 76, 126,
	235, -12, 294, -22, -5, -10, -4, -18, -28, -9,
	-11, 22, -44, 4, -195, -197, 19, 20, 22, 32,
	33, 38, 42, 45, 56, 57, 58, 60, 62, 63,
	66, 67, 74, 75, 76, 77, 79, 83, 85, 89,
	90, 92, 97, 98, 103, 104, 107, 109, 114, 119,
	120, 127, 130, 125, 138, 140, 141, 146, 149, 152,
	154, 155, 156, 157, 158, 160, 161, 163, 165, 162,
	168, 170, 171, 177, 180, 183, 184, 185, 188, 190,
	192, 193, 194, 196, 197, 201, 199, 200, 202, 204,
	206, 207, 209, 211, 212, 213, 216, 217, 219, 220,
	222, 225, 227, 228, 231, 229, 234, 236, 237, 244,
	248, 249, 250, 251, 254, 255, 256, 259, 260, 261,
	265, 270, 271, 272, 273, 27, 34, 35, 36, 37,
	39, 40, 43, 44, 48, 49, 50, 52, 78, 80,
	81, 96, 99, 105, 115, 117, 121, 122, 131, 132,
	133, 135, 144, 167, 169, 178, 182, 187, 189, 195,
	208, 215, 223, 224, 230, 232, 239, 240, 241, 245,
	246, 262, 263, -44, -44, 190, 21, -235, 21, -236,
	-237, 64, 90, 113, 214, 130, 85, 255, -235, -48,
	211, -44, -116, 149, 217, 208, 244, -117, -115, -188,
	239, 158, -77, -44, 4, 76, 56, 77, 114, 126,
	127, 61, 62, 141, 236, 239, 244, 21, 64, -240,
	244, 244, -240, -240, -47, 244, 242, -48, -239, 235,
	235, -105, 76, 253, -30, -32, -31, -65, -66, 252,
	134, 95, 176, -29, -31, -216, -218, 196, -215, -44,
	-218, -62, -63, 21, 87, 298, -159, -51, 174, -44,
	-87, 294, -3, -159, 121, -44, -54, 121, -51, 111,
	136, 136, -160, -159, -44, 121, -55, 121, -54, -78,
	121, -77, -165, -164, -191, 4, -195, -197, -196, 262,
	54, 65, 112, 129, 123, 137, 139, 145, 147, 159,
	179, 181, 205, 221, 235, -141, 294, -101, 294, -44,
	21, 173, 298, 173, -44, -116, 50, -116, 294, -118,
	-42, -43, 138, 192, 242, 279, 111, 273, -58, 5,
	82, -80, 296, 111, -232, 173, 111, 111, 111, 111,
	111, 111, 273, 138, 192, 235, -119, -42, -43, -119,
	242, -48, -90, -159, -77, 121, 126, -44, 121, -65,
	-66, -89, -108, -109, 148, 172, -92, 21, 87, -92,
	-92, 42, 295, 295, 298, -218, -70, 294, -81, -161,
	-131, 287, -133, 285, 286, 291, 164, 274, -143, -51,
	-134, 9, 294, -146, -213, -31, 96, 28, -144, -145,
	208, -44, 7, 8, 5, 6, -49, -168, -177, 247,
	100, 166, 46, -211, -212, 4, -195, -190, -169, -179,
	-173, -176, 135, 54, 69, 72, 70, 73, 218, 257,
	47, 27, 99, 182, 187, 232, 245, 246, 121, 167,
	122, 52, 115, 144, 89, 35, 37, 39, 40, 48,
	49, 78, 80, 81, 105, 131, 132, 133, 169, 195,
	223, 230, 240, 241, 263, -196, -180, -181, -174, -175,
	-182, -81, -87, 287, -51, 294, -85, -127, -126, -125,
	292, 296, -86, -151, -131, 82, -38, 199, -37, 20,
	22, 90, 260, 96, 199, 199, 96, 299, -160, -53,
	-51, -53, 219, -44, 29, 96, -40, 298, 45, 202,
	96, -40, 298, 96, 295, 298, -159, 121, 29, -140,
	-166, -167, -169, -178, -172, -176, -177, 38, 44, 43,
	237, 215, 224, 36, 131, 132, 133, 223, 35, 195,
	105, 89, 81, 80, 169, 40, 39, -180, -181, -174,
	-175, 78, 240, 241, 135, 37, 49, 48, 263, 230,
	-79, -131, -231, -76, 235, 76, -52, -44, 287, -237,
	-231, 29, -79, 298, 298, 146, -57, 152, 163, 119,
	-187, 82, -193, -186, -152, 9, 247, 100, 173, -192,
	8, 286, -185, -191, 5, 7, 285, -187, 82, 67,
	-194, 5, 4, -177, -152, 82, 149, 296, -189, 4,
	-195, -197, -196, -198, 21, 23, 24, 25, 26, 28,
	29, 30, 31, 41, 46, 47, 51, 53, 55, 61,
	64, 68, 69, 70, 71, 72, 73, 82, 84, 86,
	87, 88, 91, 93, 95, 100, 101, 102, 108, 110,
	111, 113, 116, 118, 124, 126, 128, 134, 136, 142,
	143, 148, 150, 151, 164, 166, 172, 173, 174, 175,
	176, 186, 191, 198, 203, 214, 218, 226, 233, 235,
	238, 242, 243, 247, 252, 253, 257, 258, 264, 266,
	267, 268, 269, -188, -234, 108, -231, -188, -188, -188,
	-188, -188, -44, 146, -188, 298, 298, -48, -40, 298,
	294, 164, -45, 121, -44, -41, 92, 164, -89, -109,
	-108, -110, -131, 21, -131, -133, -30, -30, -30, -67,
	-155, -131, -215, 29, -69, -44, -72, 298, 111, 10,
	53, 32, 285, 286, 287, 288, 106, 289, 282, 283,
	284, 281, 277, 278, 279, 59, 153, 210, 12, 13,
	14, 25, 175, 147, 274, 123, 221, 291, 15, 16,
	17, 137, 34, 124, 29, 4, -131, -131, -131, -131,
	-131, 181, -31, -131, -79, -85, -31, -139, 292, 294,
	-85, 294, 5, 5, 294, -147, -131, -219, 270, 108,
	294, 294, 294, 294, 294, 294, 294, 294, 294, 294,
	294, 294, 294, 294, 294, 294, 189, -184, 265, -184,
	-184, -170, 294, -170, -171, 294, -170, 271, 275, 294,
	-72, -51, -127, -131, -189, 287, 298, 295, 298, 242,
	-106, 61, 55, -122, 121, 55, -199, -44, 61, -200,
	51, 253, 191, 110, -106, 61, -106, 61, 61, -159,
	242, 242, -54, -44, -124, 267, -112, -22, 294, 82,
	29, -112, -82, -83, -162, -84, -51, 294, -44, -44,
	-54, -55, -77, -78, -12, -164, 96, -14, -22, -18,
	-28, -9, 295, 298, -71, 28, -102, 294, 272, 156,
	79, 120, 155, -103, 213, 295, 298, 242, 298, -76,
	-69, -126, -125, 111, 244, 295, -43, -42, -56, 194,
	225, 200, 216, 298, 8, 7, 7, 5, -189, -233,
	-44, -43, -42, -159, -59, -60, -123, -122, -201, -202,
	-199, 126, 253, 101, 96, 173, 164, 279, 96, -111,
	208, 209, 298, -36, 30, 86, 294, 298, 295, -124,
	-161, -74, -157, -159, -31, -158, 294, -166, -77, 239,
	-131, -131, -131, -131, -131, -131, -131, -131, -131, -131,
	-131, -131, -131, -131, -131, -131, -131, -131, -131, -131,
	-131, -131, 147, 123, 221, 34, 124, -131, 242, -131,
	-131, -131, -131, 166, 164, 247, 100, 254, 87, 170,
	-241, 233, 31, -137, -31, 294, -189, -143, 208, 294,
	295, 298, -79, -142, 293, -139, -79, 295, 295, -79,
	264, 21, 87, 287, -102, 7, -150, -149, 266, -220,
	103, 116, 294, 295, 295, -131, -131, -96, -183, 4,
	272, 156, 79, 120, 155, 213, -97, -131, -98, -132,
	-133, 285, 286, 291, 294, 208, -99, -131, -79, -131,
	41, 143, 243, -100, -131, 111, -79, -131, -131, -131,
	-79, -79, -79, 294, 7, 7, 239, 239, 7, -124,
	295, 293, 302, -151, -37, -51, -44, -44, 164, -122,
	121, -166, -44, 294, 294, 140, 140, -44, -44, 121,
	-44, 121, -44, -44, -38, 199, -44, -44, 199, -91,
	203, -131, -91, -114, 173, -75, -51, 262, -44, 203,
	-73, 298, 111, 279, -75, -40, -40, -159, -166, 292,
	292, 7, 242, 242, 242, 242, 294, -131, -233, -52,
	-233, -42, 251, 58, 194, -193, -102, 298, 295, 298,
	-45, 126, -45, -77, -51, 96, 5, -44, -155, -14,
	-44, -88, 116, -163, 298, 276, 65, -95, 139, 159,
	112, 145, 205, 129, -128, 299, -154, -153, 29, -44,
	-31, -158, -157, 273, -131, -131, 242, -241, 233, -137,
	-131, 166, 247, 100, 254, 87, 170, 111, 294, -132,
	-132, -79, 294, -79, -131, 293, 293, 298, 295, -66,
	298, -65, -131, -79, -79, 295, 295, -148, -149, 91,
	-131, -225, 180, 294, 294, -131, 29, 298, 295, 111,
	295, -104, 186, 295, 10, 285, 286, 287, 288, 106,
	289, 282, 283, 284, 281, 277, 278, 279, 59, 153,
	210, 12, 13, 14, 137, 124, -132, -132, -132, -79,
	294, 295, -135, -136, 111, 108, 29, -100, -100, -100,
	295, 111, -79, 298, 298, 298, 295, 295, 295, 7,
	295, 298, 295, 273, 273, 295, -88, -131, 242, 242,
	96, 164, -203, -200, -131, -69, 294, 294, -35, 90,
	219, -107, 96, -40, 96, -40, 242, -106, 61, 242,
	-81, 203, 60, 295, 298, -81, -124, -83, -74, -151,
	295, 293, 7, 7, 295, 156, 120, 155, -103, 155,
	-103, -103, 7, -44, -61, 125, -123, 294, -45, 294,
	294, 294, -44, -41, 295, -138, 118, 42, -157, 170,
	139, 139, -157, -95, 139, -93, 179, -93, -93, -154,
	-189, 300, -44, 294, 295, -131, -131, -132, -132, 111,
	294, -131, -140, 25, 25, 295, -79, 295, 298, 295,
	-139, 295, 264, -66, -66, -66, 5, 93, -131, 238,
	-226, -44, 294, 267, -65, 295, -166, -166, -131, -135,
	-131, -166, -132, -132, -132, -132, -132, -132, -132, -132,
	-132, -132, -132, -132, -132, -132, -132, -132, -132, -132,
	-132, 87, 164, 170, -132, 298, -79, 295, -136, -135,
	-131, -131, -166, 295, 295, 295, -79, -131, -131, -131,
	295, 7, -138, 293, -44, -44, -122, 96, -204, 61,
	-205, 53, 101, 64, 164, 166, 253, 191, 51, 82,
	198, 295, 295, -69, -69, 164, 82, 164, 82, 75,
	249, -44, -44, -51, -44, -44, -44, -81, -113, 294,
	173, -22, -51, -91, 279, 293, 293, 295, 124, -68,
	-156, -44, -214, 294, -211, -212, -49, 294, -69, -59,
	-68, 173, -221, 268, -131, -79, 234, -157, -157, -94,
	258, 173, 139, -157, -130, -129, 109, 162, 294, -69,
	-153, 25, 25, -131, -140, 295, -131, -131, 295, -131,
	5, -131, 295, 295, 295, -131, -230, -44, -131, 295,
	295, 295, -136, 111, 87, 170, 294, -131, 295, 295,
	298, 295, 295, 295, -221, -122, -44, -77, -44, 101,
	121, 166, 140, 294, -132, -51, -121, -238, 63, 231,
	295, 295, 166, 166, -131, -166, -40, -40, 242, 242,
	88, -69, 61, -87, -31, 294, 183, 295, 298, -50,
	-85, 53, -50, -131, 294, -68, 295, 295, 295, -51,
	-222, -224, -44, 239, -94, 294, -131, -157, 298, 301,
	279, -69, 295, -131, -131, 295, 295, -66, -223, 185,
	295, -132, 111, 294, -140, 295, -131, -205, -45, 164,
	-131, -46, 294, -61, 294, 198, -39, 53, -44, -44,
	255, 165, 295, -44, -44, -121, -156, -36, -77, -36,
	295, -79, 295, -61, -121, 294, 298, 29, 5, -69,
	-129, -189, 295, 295, -66, 42, -132, -140, 295, 295,
	96, 295, -208, 154, -44, -69, -51, -34, 258, -77,
	219, -124, 294, -61, -50, -66, -121, -61, -68, -224,
	-226, 295, -227, 193, 209, -79, 295, 101, -206, -209,
	-207, 173, 112, 184, 222, 295, 295, -64, 294, -131,
	-82, -69, -36, 295, -61, 295, 295, -228, -229, 34,
	250, 67, -131, -228, -44, -207, 173, -209, 173, 255,
	85, -208, -69, -124, 295, -121, -229, 188, 107, 208,
	188, 107, -210, 161, 202, 45, 219, -210, -206, 295,
	-40, -61, 25, 19, 166, 82, -229,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 0, 53, 54, 55, 0, 0,
	353, 0, 0, 0, 0, 0, 0, 327, -2, 0,
	118, 0, 283, 0, 283, 283, 287, 0, 355, 251,
	352, -2, 363, 0, 0, 0, 361, 341, 0, 0,
	-2, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 69, 0, 71, 72, 73, 74, 75, 76, 77,
	78, 0, 84, 780, 781, 782, 799, 800, 801, 802,
	803, 804, 805, 806, 807, 808, 809, 810, 811, 812,
	813, 814, 815, 816, 817, 818, 819, 820, 821, 822,
	823, 824, 825, 826, 827, 828, 829, 830, 831, 832,
	833, 834, 835, 836, 837, 838, 839, 840, 841, 842,
	843, 844, 845, 846, 847, 848, 849, 850, 851, 852,
	853, 854, 855, 856, 857, 858, 859, 860, 861, 862,
	863, 864, 865, 866, 867, 868, 869, 870, 871, 872,
	873, 874, 875, 876, 877, 878, 879, 880, 881, 882,
	883, 884, 885, 886, 887, 888, 889, 890, 891, 892,
	893, 894, 895, 896, 897, 898, 899, 900, 901, 902,
	903, 904, 905, 906, 907, 908, 909, 910, 911, 912,
	913, 914, 915, 916, 917, 918, 919, 920, 921, 922,
	923, 924, 925, 926, 927, 928, 929, 930, 931, 932,
	933, 934, 935, 936, 937, 938, 939, 940, 941, 942,
	943, 944, 945, 946, 947, 948, 949, 950, 951, 952,
	953, 954, 955, 91, 92, 862, 94, 0, 101, 102,
	103, 105, 106, 107, 108, 109, 110, 111, 0, 276,
	876, 289, 114, 841, 880, 943, 892, 121, 131, 0,
	949, -2, 135, 65, 164, 165, 0, 167, 182, 0,
	0, 0, 0, 0, 175, 0, 0, 179, 0, 294,
	282, 294, 279, 280, 281, 284, 0, 275, 0, 354,
	0, 0, 0, 250, -2, 337, 338, -2, 0, 358,
	358, 358, 0, 0, 338, 0, 346, 866, 349, 763,
	347, 0, 0, 360, 359, 0, 342, 422, 0, 753,
	383, 0, 2, 0, 929, 0, 0, 929, 0, 0,
	0, 0, 0, 428, 57, 929, 48, 929, 749, 48,
	929, 63, 0, 79, 81, 790, 791, 792, 793, 954,
	956, 957, 958, 959, 960, 961, 962, 963, 964, 965,
	966, 967, 968, 969, 0, 0, 0, 89, 0, 93,
	95, 0, 0, 0, 288, 115, 919, 117, 0, 120,
	122, 123, 0, 0, 0, 0, 0, 0, 134, 159,
	160, 66, 0, 0, 184, 0, 0, 0, 0, 0,
	0, 0, 176, 0, 178, 0, 277, 290, 291, 278,
	0, 286, 48, 426, 0, 929, 784, 299, 929, -2,
	0, 333, 370, 371, 0, 0, 0, 356, 357, 0,
	0, 0, 329, 330, 0, 348, 0, 0, 386, 741,
	745, 746, 514, 0, 0, 0, 0, 0, 0, 601,
	602, 603, 0, 605, 606, 607, 924, 0, 611, 612,
	943, 753, 766, 767, 768, 769, 0, 0, 0, 774,
	775, 776, 725, 651, 621, -2, -2, 764, 452, 453,
	454, 455, -2, 956, 625, 627, 629, 630, 631, 632,
	0, 908, 925, 939, 940, 948, 952, 953, 929, 936,
	930, 920, 927, 935, 822, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, 789, 476, 477, 482, 483,
	485, 386, 384, 423, 424, 0, 754, 732, 726, 727,
	0, 0, 0, 738, 736, 737, 25, 272, 27, 0,
	272, 272, 0, 0, 0, 0, 0, 0, 432, 0,
	305, 0, 0, 429, 0, 0, 59, 0, 46, 47,
	0, 61, 0, 0, 353, 0, 0, 929, 353, 0,
	685, 438, 439, 440, 441, 442, 511, 445, 446, 447,
	448, 449, 450, 451, 459, 460, 461, 462, 463, 464,
	473, 0, 458, 458, 458, 470, 471, 474, 475, 480,
	481, 492, 493, 495, 497, 491, 491, 491, 488, 489,
	0, 683, 0, 98, 0, 817, 751, 756, 757, 104,
	0, 0, 0, 0, 0, 0, 126, 146, 147, 148,
	127, 129, 136, 138, 139, 140, 149, 150, 151, 152,
	244, 0, 246, 162, 163, 777, 0, 128, 130, 132,
	133, 153, 154, 0, 156, 157, 158, 0, 67, 794,
	795, 796, 797, 798, 970, 971, 972, 973, 974, 975,
	976, 977, 978, 979, 980, 981, 982, 983, 984, 985,
	986, 987, 988, 989, 990, 991, 992, 993, 994, 995,
	996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005,
	1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015,
	1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025,
	1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035,
	1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045,
	1046, 1047, 1048, 166, 168, 0, 181, 169, 170, 171,
	172, 173, 174, 177, 180, 0, 0, 285, 247, 0,
	188, 0, 0, 929, 783, 296, 0, 0, 336, 368,
	369, 372, 375, 376, 373, 514, 343, 344, 345, 364,
	365, 261, 350, 0, 0, 760, 432, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 735, 0, 0, 744, 518, 519, 520, 542,
	543, 0, -2, 683, 0, 608, 609, 610, 0, 0,
	-2, 0, 771, 511, 0, 0, 724, 653, 0, 0,
	0, 0, 0, 0, 0, 0, 704, 710, 0, 0,
	0, 0, 0, 0, 0, 0, 466, 479, 490, 487,
	486, 468, 0, 467, 465, 0, 469, 0, 0, 0,
	432, 0, 733, 0, 730, 731, 0, 740, 0, 0,
	0, 0, 271, 29, 929, 0, 39, 0, 0, 217,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 755, 316, 0, 316, 307, 0, 0,
	0, 303, 319, 320, 322, 323, 0, 0, 430, 58,
	750, 48, 64, 48, 70, 80, 0, 82, 85, 86,
	87, 88, 83, 0, 433, 435, 443, 0, 498, 499,
	500, 501, 502, 503, 512, 90, 0, 0, 0, 99,
	100, 758, 759, 0, 0, 119, 124, 125, 295, 0,
	143, 0, 145, 0, 245, 779, 778, 511, 68, 183,
	112, 292, 293, 427, 0, 187, 189, 191, 192, 193,
	194, 784, 0, 784, 0, 0, 0, 0, 0, 374,
	377, 378, 0, 367, 259, 260, 353, 0, 762, 380,
	742, 413, 387, 395, 411, 398, 0, 515, 516, 0,
	521, 522, 523, 524, 525, 526, 527, 528, 529, 530,
	-2, -2, -2, 534, 535, 536, -2, -2, -2, 540,
	541, -2, 0, 0, 0, 735, 0, -2, 0, 550,
	-2, -2, -2, 554, 0, 557, 559, 561, 0, 0,
	0, 0, 734, 571, 716, 0, 743, 556, 0, 0,
	604, 0, 0, 0, 689, 690, 0, -2, 613, 363,
	0, 0, 0, 0, 772, 0, 723, 719, 0, 661,
	0, 0, 0, 626, 628, 0, 0, 0, 0, 693,
	694, 695, 696, 697, 698, 699, 0, 0, 0, 0,
	573, 0, 0, 0, 0, 943, 0, 683, 709, 0,
	0, 0, 0, 0, 683, 0, 715, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 380,
	425, 728, 0, 739, 28, 263, 0, 0, 0, 31,
	929, 199, 0, 0, 0, 0, 0, 274, 40, 929,
	48, 929, 48, 41, 26, 272, 262, 265, 0, 56,
	0, 431, 300, 301, 0, 0, 747, 309, 306, 0,
	432, 0, 0, 0, 0, 60, 62, 0, 686, 0,
	0, 0, 0, 0, 0, 0, 0, 684, 96, 752,
	97, 116, 141, 142, 144, 137, 155, 0, 196, 0,
	0, 784, 0, 0, 0, 0, 298, 299, 366, 0,
	761, 382, 0, 385, 0, 0, 0, 0, 0, 0,
	419, 419, 419, 417, 411, 0, 397, 410, 0, 409,
	-2, 398, 0, 0, -2, -2, 0, 0, 0, 572,
	-2, 555, 558, 560, 562, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 684, 687, 688, 0, -2, 0,
	0, 362, 363, 363, 363, 619, 0, 0, 720, 0,
	0, 620, 0, 0, 0, 0, 0, 0, 635, 0,
	636, 0, 0, 637, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 575, 576, 577, 0,
	0, 638, 707, 708, 0, 0, 0, 0, 0, 0,
	643, 0, 714, 0, 0, 0, 647, 648, 649, 0,
	456, 0, 472, 494, 496, 484, 382, 0, 0, 0,
	0, 0, 197, 216, 0, 0, 0, 0, 33, 0,
	0, 0, 0, 37, 0, 43, 0, 0, 0, 0,
	315, 0, 314, 0, 0, 304, 316, 321, 318, 324,
	0, 436, 0, 0, 444, 504, 505, 506, 507, 508,
	509, 510, 0, 113, 185, 0, 190, 0, 0, 0,
	188, 0, 0, 297, 351, 655, 0, 0, 388, 0,
	0, 0, 0, 0, 0, 414, 418, 415, 416, 396,
	393, 0, 407, 0, 400, 517, -2, 0, 0, 0,
	0, -2, 0, 0, 0, 717, 0, 678, 0, -2,
	691, 614, 0, 0, 0, 0, 773, 718, 722, 0,
	659, 660, 664, 0, 0, 624, 0, 0, 692, 701,
	702, 574, 578, 579, 580, 581, 582, 583, 584, 585,
	586, 587, -2, -2, -2, 591, 592, 593, -2, -2,
	-2, 0, 0, 0, 703, 0, 0, 681, 705, 706,
	711, 712, 0, 640, 641, 642, 713, 0, 0, 0,
	478, 0, 655, 729, 267, 269, 30, 0, 198, 0,
	201, 0, 0, 0, 0, 207, 208, 0, 0, 0,
	0, 218, 225, 0, 0, 0, 45, 0, 0, 273,
	0, 48, 48, 264, 0, 0, 266, 302, 0, 0,
	0, 308, 748, 317, 0, 437, 434, 513, 0, 0,
	252, 258, 258, 0, 622, 623, 0, 0, 0, 0,
	0, 0, 339, 0, 381, 379, 0, 401, 0, 403,
	0, 0, 0, 405, 0, 391, 0, 390, 0, 0,
	399, 0, 0, -2, 0, 565, -2, -2, 677, 684,
	770, 363, 615, 617, 618, 721, 666, 663, 0, 650,
	633, 634, 700, 0, 0, 0, 0, 684, 680, 639,
	0, 645, 646, 457, 340, 32, 0, 202, 203, 784,
	0, 206, 209, 0, 211, 786, 196, 0, 222, 223,
	220, 0, 34, 35, 44, 50, 36, 42, 0, 0,
	0, 0, 0, 325, 326, 0, 0, 225, 0, 261,
	765, 0, 261, 0, 0, 0, 215, 196, 225, 0,
	654, 656, 0, 0, 402, 0, 421, 404, 0, 394,
	0, 0, 408, -2, -2, 566, 679, 0, 363, 0,
	652, -2, 0, 0, 0, 682, 0, 200, 204, 0,
	0, 231, 0, 219, 0, 0, 52, 0, 268, 270,
	0, 311, 432, 313, 0, 196, 253, 254, 257, 255,
	258, 363, 225, 186, 196, 0, 0, 0, 412, 0,
	392, 389, 406, 616, 669, 0, -2, 0, 599, 644,
	0, 210, 236, 0, 0, 0, 227, 38, 0, 49,
	0, 312, 0, 213, 261, 0, 196, 248, 0, 657,
	658, 420, 0, 0, 0, 665, 600, 0, 212, 232,
	233, 0, 228, 229, 230, 785, 224, 231, 0, 51,
	432, 0, 256, 614, 214, 225, 662, 667, 670, -2,
	895, 814, 0, 668, 205, 234, 0, 235, 0, 0,
	0, 236, 0, 310, 48, 196, 0, 672, 673, 674,
	675, 676, 237, 0, 240, 241, 0, 238, 221, 226,
	195, 249, 0, 239, 242, 243, 671,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 283, 3, 289, 284, 3,
	294, 295, 287, 285, 298, 286, 296, 288, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 302, 297,
	277, 279, 278, 3, 299, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 292, 3, 293, 282, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 300, 281, 301, 291,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 280,
	57620, 290, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:712
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:718
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:724
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 17:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:747
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 24:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:757
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 25:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:763
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 26:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:767
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 27:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:773
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 28:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:777
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 29:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:784
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 30:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:789
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 31:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:794
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 32:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:799
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 33:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:804
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:809
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:813
		{
			unimplemented()
		}
	case 36:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:816
		{
			sqlVAL.union.val = &AlterTableDropColumn{columnKeyword: sqlDollar[2].union.bool(), IfExists: true, Column: Name(sqlDollar[5].str)}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:821
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:831
		{
		}
	case 39:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:834
		{
			sqlVAL.union.val = &AlterTableAddConstraint{ConstraintDef: sqlDollar[2].union.constraintDef()}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:838
		{
			unimplemented()
		}
	case 41:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:840
		{
			unimplemented()
		}
	case 42:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:843
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 43:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:852
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 44:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:862
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 45:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:866
		{
			sqlVAL.union.val = nil
		}
	case 46:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:872
		{
			sqlVAL.union.val = DropCascade
		}
	case 47:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:876
		{
			sqlVAL.union.val = DropRestrict
		}
	case 48:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:880
		{
			sqlVAL.union.val = DropDefault
		}
	case 49:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:885
		{
			unimplementedWithIssue(2473)
		}
	case 50:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:886
		{
		}
	case 51:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:889
		{
			unimplemented()
		}
	case 52:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:890
		{
		}
	case 56:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:901
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retExprs()}
		}
	case 57:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:908
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 58:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:912
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:916
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:924
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:932
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:936
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:942
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:946
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 65:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:952
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 66:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:956
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 67:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:962
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:966
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 69:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:973
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 70:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:977
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 71:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:983
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 78:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:992
		{ /* SKIP DOC */
		}
	case 79:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:996
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1000
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 82:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1010
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1020
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 84:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1024
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 85:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1030
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 89:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1040
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1051
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 91:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1055
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 92:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1062
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1068
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1074
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1078
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1085
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1092
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1099
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1103
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1107
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1114
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1117
		{
		}
	case 103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1121
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1125
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 105:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1132
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 106:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1136
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1140
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1144
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1148
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 110:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1152
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 111:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1156
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 112:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1164
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1168
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1176
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1180
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 116:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1184
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1188
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1191
		{ /* SKIP DOC */
		}
	case 119:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1197
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1203
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1210
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1214
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1218
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1222
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1229
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1235
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1239
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1243
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1247
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1254
		{
			unimplemented()
		}
	case 133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1257
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1260
		{
			unimplemented()
		}
	case 136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1267
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1271
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1279
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1285
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1289
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1293
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1297
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1301
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1307
		{
			sqlVAL.union.val = Low
		}
	case 147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1311
		{
			sqlVAL.union.val = Normal
		}
	case 148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1315
		{
			sqlVAL.union.val = High
		}
	case 149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1321
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1325
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1329
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1344
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1348
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1352
		{
			d, err := ParseDInterval(sqlDollar[2].str)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1362
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1366
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1371
		{
			unimplemented()
		}
	case 160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1372
		{
			unimplemented()
		}
	case 161:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1373
		{
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1377
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1381
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1387
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1391
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1395
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1399
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1403
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1407
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1411
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1415
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1419
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1423
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1427
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1431
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1435
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1439
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1443
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1447
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 180:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1451
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1457
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 182:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1462
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1468
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 184:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1472
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 185:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1479
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs()}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1483
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs()}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1490
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1496
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1500
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 191:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1506
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1512
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 195:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1518
		{
			/* SKIP DOC */
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1526
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1532
		{
			sqlVAL.union.val = newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
		}
	case 198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1538
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 199:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1542
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1548
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1552
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1555
		{
			unimplemented()
		}
	case 203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1557
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1561
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1565
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1583
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1587
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1591
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1595
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1599
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1603
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1607
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1616
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1625
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1638
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1650
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 217:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1655
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 218:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1661
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1667
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    NameListToIndexElems(sqlDollar[3].union.nameList()),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1677
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[4].union.nameList()),
				},
				PrimaryKey: true,
			}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1687
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 224:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1710
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 225:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1714
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1720
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 227:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1724
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1729
		{
			unimplemented()
		}
	case 229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1730
		{
			unimplemented()
		}
	case 230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1731
		{
			unimplemented()
		}
	case 231:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1732
		{
		}
	case 232:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1739
		{
			unimplemented()
		}
	case 233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1740
		{
			unimplemented()
		}
	case 234:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1741
		{
			unimplemented()
		}
	case 235:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1742
		{
			unimplemented()
		}
	case 236:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1743
		{
		}
	case 237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1746
		{
			unimplemented()
		}
	case 238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1749
		{
			unimplemented()
		}
	case 239:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1752
		{
			unimplemented()
		}
	case 240:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1753
		{
			unimplemented()
		}
	case 241:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1754
		{
			unimplemented()
		}
	case 242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1755
		{
			unimplemented()
		}
	case 243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1756
		{
			unimplemented()
		}
	case 244:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1760
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 245:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1764
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1768
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 247:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1775
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 248:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:1782
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 249:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:1793
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1807
		{
			sqlVAL.union.val = true
		}
	case 251:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1811
		{
			sqlVAL.union.val = false
		}
	case 252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1817
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1821
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1830
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1833
		{
			unimplemented()
		}
	case 256:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1834
		{
			unimplemented()
		}
	case 257:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1837
		{
			unimplemented()
		}
	case 258:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1838
		{
		}
	case 259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1842
		{
			sqlVAL.union.val = Ascending
		}
	case 260:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1846
		{
			sqlVAL.union.val = Descending
		}
	case 261:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1850
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 262:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1857
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1861
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1865
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1869
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1873
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1877
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1881
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1885
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 270:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1889
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 271:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1895
		{
			sqlVAL.union.val = true
		}
	case 272:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1899
		{
			sqlVAL.union.val = false
		}
	case 273:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1904
		{
		}
	case 274:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1905
		{
		}
	case 275:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1909
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1915
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1922
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1926
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 279:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1930
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1934
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1938
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1947
		{
		}
	case 283:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1948
		{
		}
	case 284:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1952
		{
			sqlVAL.str = ""
		}
	case 285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1956
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 286:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1960
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 287:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1964
		{
			sqlVAL.str = ""
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1970
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 289:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1974
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 290:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1980
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1984
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1988
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1992
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1996
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2002
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 296:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2008
		{
			sqlVAL.union.val = &CreateDatabase{Name: Name(sqlDollar[3].str), Encoding: sqlDollar[4].union.strVal()}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2012
		{
			sqlVAL.union.val = &CreateDatabase{IfNotExists: true, Name: Name(sqlDollar[6].str), Encoding: sqlDollar[7].union.strVal()}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2018
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2021
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 300:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2031
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retExprs()
		}
	case 301:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2037
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
		}
	case 302:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2042
		{
			unimplementedWithIssue(6637)
		}
	case 303:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2044
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2049
		{
			unimplementedWithIssue(6637)
		}
	case 305:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2057
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 306:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2061
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2067
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2071
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2075
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2081
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2085
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2091
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2095
		{
			unimplemented()
		}
	case 314:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2097
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 315:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2103
		{
			sqlVAL.union.val = sqlDollar[2].union.selExprs()
		}
	case 316:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2107
		{
			sqlVAL.union.val = SelectExprs(nil)
		}
	case 317:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2114
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retExprs()}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2120
		{
			unimplementedWithIssue(7841)
		}
	case 319:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2121
		{
		}
	case 320:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2125
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2129
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 324:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2139
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2151
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2155
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2199
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2205
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2209
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2224
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2228
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2232
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2236
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2240
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2244
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2278
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2290
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2302
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2310
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2319
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2328
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2346
		{
			unimplemented()
		}
	case 347:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2347
		{
			unimplemented()
		}
	case 348:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2348
		{
			unimplemented()
		}
	case 349:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2351
		{
			unimplemented()
		}
	case 350:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2352
		{
			unimplemented()
		}
	case 351:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2355
		{
			unimplemented()
		}
	case 352:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2358
		{
			unimplemented()
		}
	case 353:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2359
		{
		}
	case 354:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2362
		{
		}
	case 355:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2363
		{
		}
	case 356:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2367
		{
			sqlVAL.union.val = true
		}
	case 357:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2371
		{
			sqlVAL.union.val = false
		}
	case 358:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2375
		{
			sqlVAL.union.val = false
		}
	case 359:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2381
		{
			sqlVAL.union.val = true
		}
	case 360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2386
		{
		}
	case 361:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2387
		{
		}
	case 362:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2391
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 363:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2395
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 364:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2401
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 365:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2407
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2411
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 367:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2417
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2425
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2434
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2445
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2458
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2465
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2472
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 377:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2486
		{
		}
	case 378:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2487
		{
		}
	case 379:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2513
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 380:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2517
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2523
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 382:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2527
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2533
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2537
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2549
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2553
		{
			sqlVAL.union.val = &From{}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2559
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2563
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2569
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2574
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2580
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 392:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2585
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			index := a.Index
			if index == "" {
				index = b.Index
			} else if b.Index != "" {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			noIndexJoin := a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = &IndexHints{Index: index, NoIndexJoin: noIndexJoin}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2605
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2609
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 395:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2613
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 396:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2620
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), As: sqlDollar[3].union.aliasClause()}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2624
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, As: sqlDollar[2].union.aliasClause()}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2628
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 399:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2632
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[2].union.tblExpr(), As: sqlDollar[4].union.aliasClause()}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2652
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2656
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2660
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2664
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2668
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2672
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2678
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2682
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2686
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2690
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2697
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2703
		{
			sqlVAL.union.val = AsOfClause{Expr: &StrVal{s: sqlDollar[5].str}}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2707
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2713
		{
			sqlVAL.str = astFullJoin
		}
	case 415:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2717
		{
			sqlVAL.str = astLeftJoin
		}
	case 416:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2721
		{
			sqlVAL.str = astRightJoin
		}
	case 417:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2725
		{
			sqlVAL.str = astInnerJoin
		}
	case 418:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2731
		{
		}
	case 419:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2732
		{
		}
	case 420:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2743
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2747
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2753
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 423:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2757
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2761
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 425:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2765
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2771
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2775
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 428:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2788
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2792
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2796
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2802
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 432:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2806
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 433:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2818
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 434:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2822
		{
			unimplementedWithIssue(2115)
		}
	case 435:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2823
		{
			unimplementedWithIssue(2115)
		}
	case 436:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2826
		{
			unimplementedWithIssue(2115)
		}
	case 437:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2827
		{
			unimplementedWithIssue(2115)
		}
	case 438:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2828
		{
		}
	case 444:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2836
		{
			unimplemented()
		}
	case 445:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2838
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 446:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2842
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 447:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2846
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 448:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2850
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 449:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2854
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 450:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2858
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 451:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2862
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 456:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2883
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2892
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2906
		{
			sqlVAL.union.val = nil
		}
	case 459:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2913
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2917
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2921
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 462:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2925
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 463:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2929
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 464:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2933
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 465:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2937
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newFloatColType(int(prec))
		}
	case 466:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2946
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 467:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2950
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2959
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2968
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2977
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 471:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2981
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 472:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2987
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 473:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2991
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3009
		{
			n, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 479:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3025
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 484:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3041
		{
			n, err := sqlDollar[3].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3057
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 486:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3063
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 487:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3067
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 488:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3071
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 489:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3075
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 490:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3080
		{
		}
	case 491:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3081
		{
		}
	case 492:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3086
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 493:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3090
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 494:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3094
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 495:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3098
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 496:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3102
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 497:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3107
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 498:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3112
		{
			unimplemented()
		}
	case 499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3113
		{
			unimplemented()
		}
	case 500:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3114
		{
			unimplemented()
		}
	case 501:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3115
		{
			unimplemented()
		}
	case 502:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3116
		{
			unimplemented()
		}
	case 503:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3117
		{
			unimplemented()
		}
	case 504:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3118
		{
			unimplemented()
		}
	case 505:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3119
		{
			unimplemented()
		}
	case 506:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3120
		{
			unimplemented()
		}
	case 507:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3121
		{
			unimplemented()
		}
	case 508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3122
		{
			unimplemented()
		}
	case 509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3123
		{
			unimplemented()
		}
	case 510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3124
		{
			unimplemented()
		}
	case 511:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3125
		{
		}
	case 512:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3128
		{
			unimplemented()
		}
	case 513:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3129
		{
			unimplemented()
		}
	case 515:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3153
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3161
		{
			unimplemented()
		}
	case 517:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3162
		{
			unimplemented()
		}
	case 518:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3171
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3175
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3179
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3183
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3187
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3191
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3195
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3199
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3203
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3207
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3211
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3215
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3219
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3223
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3227
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3231
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3235
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3239
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3243
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3247
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3251
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3255
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3259
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3263
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3267
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3271
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3275
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3279
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3283
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3287
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3291
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3295
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3299
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3303
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3307
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3311
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3315
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3319
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3322
		{
			unimplemented()
		}
	case 557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3324
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3328
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3332
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3336
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3340
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3344
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3348
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3352
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3356
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3360
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3364
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3368
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3372
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3376
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3380
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3384
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3401
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3410
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3414
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3418
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3422
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3426
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3430
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3434
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3438
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3442
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3446
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3450
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3454
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3458
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3462
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3466
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3470
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3474
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3478
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3482
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3486
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3490
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3494
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3498
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3502
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3506
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3510
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3522
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 603:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3527
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3531
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3537
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3541
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3545
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3551
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 611:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3555
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 612:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3559
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3567
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3571
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3574
		{
			unimplemented()
		}
	case 616:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3575
		{
			unimplemented()
		}
	case 617:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3577
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Type: All, Exprs: sqlDollar[4].union.exprs()}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3581
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Type: Distinct, Exprs: sqlDollar[4].union.exprs()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3585
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Exprs: Exprs{StarExpr()}}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3598
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 621:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3602
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 622:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3611
		{
			unimplemented()
		}
	case 623:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3612
		{
			unimplemented()
		}
	case 624:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3616
		{
			unimplemented()
		}
	case 625:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3618
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3622
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3626
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3630
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3633
		{
			unimplemented()
		}
	case 630:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3634
		{
			unimplemented()
		}
	case 631:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3635
		{
			unimplemented()
		}
	case 632:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3636
		{
			unimplemented()
		}
	case 633:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3638
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3642
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3646
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3650
		{
			sqlVAL.union.val = &OverlayExpr{FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3654
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3658
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3661
		{
			unimplemented()
		}
	case 640:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3663
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3667
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3671
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3675
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3679
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3683
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3687
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3691
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3695
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3699
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3705
		{
			unimplemented()
		}
	case 651:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3706
		{
		}
	case 652:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3709
		{
			unimplemented()
		}
	case 653:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3710
		{
		}
	case 654:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3714
		{
			unimplemented()
		}
	case 655:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3715
		{
		}
	case 656:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3718
		{
			unimplemented()
		}
	case 657:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3719
		{
			unimplemented()
		}
	case 658:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3722
		{
			unimplemented()
		}
	case 659:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3725
		{
			unimplemented()
		}
	case 660:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3726
		{
			unimplemented()
		}
	case 661:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3727
		{
		}
	case 662:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3731
		{
			unimplemented()
		}
	case 663:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3742
		{
			unimplemented()
		}
	case 664:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3743
		{
		}
	case 665:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3746
		{
			unimplemented()
		}
	case 666:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3747
		{
		}
	case 667:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3755
		{
			unimplemented()
		}
	case 668:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3756
		{
			unimplemented()
		}
	case 669:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3757
		{
		}
	case 670:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3760
		{
			unimplemented()
		}
	case 671:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3761
		{
			unimplemented()
		}
	case 672:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3767
		{
			unimplemented()
		}
	case 673:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3768
		{
			unimplemented()
		}
	case 674:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3769
		{
			unimplemented()
		}
	case 675:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3770
		{
			unimplemented()
		}
	case 676:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3771
		{
			unimplemented()
		}
	case 677:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3782
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3786
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3790
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3796
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3800
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3806
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3849
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3853
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 685:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3859
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3863
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 687:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3869
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3873
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3877
		{
			sqlVAL.union.val = &Array{nil}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3883
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3887
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 692:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3893
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3915
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3919
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3925
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 703:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3932
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3936
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 705:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3953
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3957
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3961
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3965
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3969
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 710:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3973
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 711:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3979
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 712:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3985
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 713:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3991
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 714:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3995
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 715:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3999
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 716:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4005
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4009
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4020
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4027
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4031
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 721:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4037
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4043
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 723:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4047
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 725:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4054
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 726:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4060
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 727:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4064
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 728:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4068
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4072
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr()}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4078
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 731:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4084
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4090
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4094
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 734:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4099
		{
		}
	case 735:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4100
		{
		}
	case 737:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4109
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4115
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4119
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 740:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4128
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 741:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4134
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4138
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 743:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4144
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4153
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4157
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4161
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 747:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4169
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4173
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 749:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4179
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4183
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 751:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4189
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4193
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 753:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4204
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4208
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 755:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4214
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4225
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4229
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4233
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4237
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4243
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4247
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 762:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4253
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 763:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4256
		{
		}
	case 764:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4266
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4270
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 766:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4277
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 767:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4281
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 768:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4285
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4289
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4292
		{
			unimplemented()
		}
	case 771:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4294
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4298
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4302
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[5].str}, Type: sqlDollar[1].union.colType()}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4306
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 775:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4310
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 776:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4314
		{
			sqlVAL.union.val = DNull
		}
	case 778:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4321
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 779:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4325
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4347
		{
			sqlVAL.str = ""
		}
	case 785:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4353
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 786:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4357
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
