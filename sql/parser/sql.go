// Code generated by go yacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"go/constant"
	"go/token"

	"github.com/pkg/errors"

	"github.com/cockroachdb/cockroach/sql/privilege"
	"github.com/cockroachdb/cockroach/util"
)

var errUnimplemented = errors.New("unimplemented")

func unimplemented() {
	panic(errUnimplemented)
}

func unimplementedWithIssue(issue int) {
	panic(util.UnimplementedWithIssueErrorf(issue, ""))
}

//line sql.y:44

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in two forms, depending on the
// type of the value being accessed. Values and pointers are directly
// type asserted from the empty interface, meaning that they will panic
// if the type assertion is incorrect. Interfaces are handled differently
// because a nil instance of an interface inserted into the empty interface
// becomes a nil instance of the empty interface and therefore will fail a
// direct type assertion. Instead, a guarded type assertion must be used,
// which returns nil if the type assertion fails.
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	return u.val.(*StrVal)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	if namePart, ok := u.val.(NamePart); ok {
		return namePart
	}
	return nil
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionName() FunctionName {
	return u.val.(FunctionName)
}
func (u *sqlSymUnion) normalizableFunctionName() NormalizableFunctionName {
	return NormalizableFunctionName{u.val.(FunctionName)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	if selectStmt, ok := u.val.(*Select); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	if selectStmt, ok := u.val.(SelectStatement); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	if constraintDef, ok := u.val.(ConstraintTableDef); ok {
		return constraintDef
	}
	return nil
}
func (u *sqlSymUnion) tblDef() TableDef {
	if tblDef, ok := u.val.(TableDef); ok {
		return tblDef
	}
	return nil
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	if colQual, ok := u.val.(NamedColumnQualification); ok {
		return colQual
	}
	return NamedColumnQualification{}
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	if colQual, ok := u.val.(ColumnQualification); ok {
		return colQual
	}
	return nil
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retExprs() ReturningExprs {
	return ReturningExprs(u.val.(SelectExprs))
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	if tblExpr, ok := u.val.(TableExpr); ok {
		return tblExpr
	}
	return nil
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	if joinCond, ok := u.val.(JoinCond); ok {
		return joinCond
	}
	return nil
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	if alterTableCmd, ok := u.val.(AlterTableCmd); ok {
		return alterTableCmd
	}
	return nil
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}

//line sql.y:318
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BEGIN = 57376
const BETWEEN = 57377
const BIGINT = 57378
const BIGSERIAL = 57379
const BIT = 57380
const BLOB = 57381
const BOOL = 57382
const BOOLEAN = 57383
const BOTH = 57384
const BY = 57385
const BYTEA = 57386
const BYTES = 57387
const CASCADE = 57388
const CASE = 57389
const CAST = 57390
const CHAR = 57391
const CHARACTER = 57392
const CHARACTERISTICS = 57393
const CHECK = 57394
const COALESCE = 57395
const COLLATE = 57396
const COLLATION = 57397
const COLUMN = 57398
const COLUMNS = 57399
const COMMIT = 57400
const COMMITTED = 57401
const CONCAT = 57402
const CONFLICT = 57403
const CONSTRAINT = 57404
const CONSTRAINTS = 57405
const COPY = 57406
const COVERING = 57407
const CREATE = 57408
const CROSS = 57409
const CUBE = 57410
const CURRENT = 57411
const CURRENT_CATALOG = 57412
const CURRENT_DATE = 57413
const CURRENT_ROLE = 57414
const CURRENT_TIME = 57415
const CURRENT_TIMESTAMP = 57416
const CURRENT_USER = 57417
const CYCLE = 57418
const DATA = 57419
const DATABASE = 57420
const DATABASES = 57421
const DATE = 57422
const DAY = 57423
const DEC = 57424
const DECIMAL = 57425
const DEFAULT = 57426
const DEALLOCATE = 57427
const DEFERRABLE = 57428
const DELETE = 57429
const DESC = 57430
const DISTINCT = 57431
const DO = 57432
const DOUBLE = 57433
const DROP = 57434
const ELSE = 57435
const ENCODING = 57436
const END = 57437
const ESCAPE = 57438
const EXCEPT = 57439
const EXISTS = 57440
const EXECUTE = 57441
const EXPLAIN = 57442
const EXTRACT = 57443
const FALSE = 57444
const FAMILY = 57445
const FETCH = 57446
const FILTER = 57447
const FIRST = 57448
const FLOAT = 57449
const FLOORDIV = 57450
const FOLLOWING = 57451
const FOR = 57452
const FORCE_INDEX = 57453
const FOREIGN = 57454
const FROM = 57455
const FULL = 57456
const GRANT = 57457
const GRANTS = 57458
const GREATEST = 57459
const GROUP = 57460
const GROUPING = 57461
const HAVING = 57462
const HELP = 57463
const HIGH = 57464
const HOUR = 57465
const IF = 57466
const IFNULL = 57467
const ILIKE = 57468
const IN = 57469
const INTERLEAVE = 57470
const INDEX = 57471
const INDEXES = 57472
const INITIALLY = 57473
const INNER = 57474
const INSERT = 57475
const INT = 57476
const INT8 = 57477
const INT64 = 57478
const INTEGER = 57479
const INTERSECT = 57480
const INTERVAL = 57481
const INTO = 57482
const IS = 57483
const ISOLATION = 57484
const JOIN = 57485
const KEY = 57486
const KEYS = 57487
const LATERAL = 57488
const LEADING = 57489
const LEAST = 57490
const LEFT = 57491
const LEVEL = 57492
const LIKE = 57493
const LIMIT = 57494
const LOCAL = 57495
const LOCALTIME = 57496
const LOCALTIMESTAMP = 57497
const LOW = 57498
const LSHIFT = 57499
const MATCH = 57500
const MINUTE = 57501
const MONTH = 57502
const NAME = 57503
const NAMES = 57504
const NATURAL = 57505
const NEXT = 57506
const NO = 57507
const NO_INDEX_JOIN = 57508
const NORMAL = 57509
const NOT = 57510
const NOTHING = 57511
const NULL = 57512
const NULLIF = 57513
const NULLS = 57514
const NUMERIC = 57515
const OF = 57516
const OFF = 57517
const OFFSET = 57518
const ON = 57519
const ONLY = 57520
const OR = 57521
const ORDER = 57522
const ORDINALITY = 57523
const OUT = 57524
const OUTER = 57525
const OVER = 57526
const OVERLAPS = 57527
const OVERLAY = 57528
const PARENT = 57529
const PARTIAL = 57530
const PARTITION = 57531
const PLACING = 57532
const POSITION = 57533
const PRECEDING = 57534
const PRECISION = 57535
const PREPARE = 57536
const PRIMARY = 57537
const PRIORITY = 57538
const RANGE = 57539
const READ = 57540
const REAL = 57541
const RECURSIVE = 57542
const REF = 57543
const REFERENCES = 57544
const RENAME = 57545
const REPEATABLE = 57546
const RELEASE = 57547
const RESTRICT = 57548
const RETURNING = 57549
const REVOKE = 57550
const RIGHT = 57551
const ROLLBACK = 57552
const ROLLUP = 57553
const ROW = 57554
const ROWS = 57555
const RSHIFT = 57556
const SAVEPOINT = 57557
const SEARCH = 57558
const SECOND = 57559
const SELECT = 57560
const SERIAL = 57561
const SERIALIZABLE = 57562
const SESSION = 57563
const SESSION_USER = 57564
const SET = 57565
const SHOW = 57566
const SIMILAR = 57567
const SIMPLE = 57568
const SMALLINT = 57569
const SMALLSERIAL = 57570
const SNAPSHOT = 57571
const SOME = 57572
const SPLIT = 57573
const SQL = 57574
const START = 57575
const STDIN = 57576
const STRICT = 57577
const STRING = 57578
const STORING = 57579
const SUBSTRING = 57580
const SYMMETRIC = 57581
const SYSTEM = 57582
const TABLE = 57583
const TABLES = 57584
const TEXT = 57585
const THEN = 57586
const TIME = 57587
const TIMESTAMP = 57588
const TIMESTAMPTZ = 57589
const TO = 57590
const TRAILING = 57591
const TRANSACTION = 57592
const TREAT = 57593
const TRIM = 57594
const TRUE = 57595
const TRUNCATE = 57596
const TYPE = 57597
const UNBOUNDED = 57598
const UNCOMMITTED = 57599
const UNION = 57600
const UNIQUE = 57601
const UNKNOWN = 57602
const UPDATE = 57603
const UPSERT = 57604
const USER = 57605
const USING = 57606
const VALID = 57607
const VALIDATE = 57608
const VALUE = 57609
const VALUES = 57610
const VARCHAR = 57611
const VARIADIC = 57612
const VIEW = 57613
const VARYING = 57614
const WHEN = 57615
const WHERE = 57616
const WINDOW = 57617
const WITH = 57618
const WITHIN = 57619
const WITHOUT = 57620
const YEAR = 57621
const ZONE = 57622
const NOT_LA = 57623
const WITH_LA = 57624
const AS_LA = 57625
const POSTFIXOP = 57626
const UMINUS = 57627

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPLAIN",
	"EXTRACT",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:4841

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 26,
	304, 26,
	-2, 373,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 43,
	1, 348,
	177, 348,
	207, 348,
	302, 348,
	304, 348,
	-2, 358,
	-1, 56,
	1, 351,
	177, 351,
	207, 351,
	302, 351,
	304, 351,
	-2, 357,
	-1, 65,
	1, 26,
	304, 26,
	-2, 373,
	-1, 284,
	1, 172,
	304, 172,
	-2, 872,
	-1, 319,
	152, 383,
	176, 383,
	-2, 354,
	-1, 322,
	152, 382,
	176, 382,
	-2, 352,
	-1, 541,
	152, 382,
	176, 382,
	-2, 355,
	-1, 597,
	301, 810,
	-2, 803,
	-1, 598,
	301, 811,
	-2, 804,
	-1, 604,
	5, 518,
	301, 518,
	-2, 962,
	-1, 627,
	5, 484,
	-2, 937,
	-1, 628,
	5, 512,
	301, 512,
	-2, 939,
	-1, 629,
	5, 492,
	-2, 940,
	-1, 630,
	5, 491,
	-2, 941,
	-1, 631,
	5, 512,
	301, 512,
	-2, 944,
	-1, 632,
	5, 512,
	301, 512,
	-2, 945,
	-1, 633,
	5, 513,
	-2, 948,
	-1, 634,
	5, 478,
	-2, 949,
	-1, 635,
	5, 478,
	-2, 950,
	-1, 636,
	5, 494,
	-2, 953,
	-1, 637,
	5, 479,
	-2, 958,
	-1, 638,
	5, 480,
	-2, 959,
	-1, 639,
	5, 481,
	-2, 960,
	-1, 640,
	5, 482,
	-2, 961,
	-1, 641,
	5, 478,
	-2, 965,
	-1, 642,
	5, 485,
	-2, 970,
	-1, 643,
	5, 483,
	-2, 973,
	-1, 644,
	5, 510,
	301, 510,
	-2, 975,
	-1, 645,
	5, 514,
	-2, 978,
	-1, 646,
	5, 516,
	-2, 979,
	-1, 647,
	5, 509,
	301, 509,
	-2, 983,
	-1, 892,
	97, 358,
	138, 358,
	152, 358,
	176, 358,
	180, 358,
	258, 358,
	-2, 630,
	-1, 900,
	301, 788,
	-2, 777,
	-1, 1099,
	13, 0,
	14, 0,
	15, 0,
	284, 0,
	285, 0,
	286, 0,
	-2, 553,
	-1, 1100,
	13, 0,
	14, 0,
	15, 0,
	284, 0,
	285, 0,
	286, 0,
	-2, 554,
	-1, 1101,
	13, 0,
	14, 0,
	15, 0,
	284, 0,
	285, 0,
	286, 0,
	-2, 555,
	-1, 1105,
	13, 0,
	14, 0,
	15, 0,
	284, 0,
	285, 0,
	286, 0,
	-2, 559,
	-1, 1106,
	13, 0,
	14, 0,
	15, 0,
	284, 0,
	285, 0,
	286, 0,
	-2, 560,
	-1, 1107,
	13, 0,
	14, 0,
	15, 0,
	284, 0,
	285, 0,
	286, 0,
	-2, 561,
	-1, 1110,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	126, 0,
	127, 0,
	151, 0,
	225, 0,
	281, 0,
	-2, 566,
	-1, 1116,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	126, 0,
	127, 0,
	151, 0,
	225, 0,
	281, 0,
	-2, 568,
	-1, 1119,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	126, 0,
	127, 0,
	151, 0,
	225, 0,
	281, 0,
	-2, 573,
	-1, 1120,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	126, 0,
	127, 0,
	151, 0,
	225, 0,
	281, 0,
	-2, 574,
	-1, 1121,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	126, 0,
	127, 0,
	151, 0,
	225, 0,
	281, 0,
	-2, 575,
	-1, 1146,
	185, 701,
	-2, 704,
	-1, 1318,
	97, 358,
	138, 358,
	152, 358,
	176, 358,
	180, 358,
	258, 358,
	-2, 431,
	-1, 1322,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	126, 0,
	127, 0,
	151, 0,
	225, 0,
	281, 0,
	-2, 567,
	-1, 1323,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	126, 0,
	127, 0,
	151, 0,
	225, 0,
	281, 0,
	-2, 569,
	-1, 1328,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	126, 0,
	127, 0,
	151, 0,
	225, 0,
	281, 0,
	-2, 570,
	-1, 1346,
	185, 700,
	-2, 703,
	-1, 1509,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	126, 0,
	127, 0,
	151, 0,
	225, 0,
	281, 0,
	-2, 571,
	-1, 1514,
	141, 0,
	-2, 585,
	-1, 1522,
	185, 702,
	-2, 705,
	-1, 1556,
	13, 0,
	14, 0,
	15, 0,
	284, 0,
	285, 0,
	286, 0,
	-2, 611,
	-1, 1557,
	13, 0,
	14, 0,
	15, 0,
	284, 0,
	285, 0,
	286, 0,
	-2, 612,
	-1, 1558,
	13, 0,
	14, 0,
	15, 0,
	284, 0,
	285, 0,
	286, 0,
	-2, 613,
	-1, 1562,
	13, 0,
	14, 0,
	15, 0,
	284, 0,
	285, 0,
	286, 0,
	-2, 617,
	-1, 1563,
	13, 0,
	14, 0,
	15, 0,
	284, 0,
	285, 0,
	286, 0,
	-2, 618,
	-1, 1564,
	13, 0,
	14, 0,
	15, 0,
	284, 0,
	285, 0,
	286, 0,
	-2, 619,
	-1, 1668,
	141, 0,
	-2, 586,
	-1, 1671,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	126, 0,
	127, 0,
	151, 0,
	225, 0,
	281, 0,
	-2, 589,
	-1, 1672,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	126, 0,
	127, 0,
	151, 0,
	225, 0,
	281, 0,
	-2, 591,
	-1, 1759,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	126, 0,
	127, 0,
	151, 0,
	225, 0,
	281, 0,
	-2, 590,
	-1, 1760,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	126, 0,
	127, 0,
	151, 0,
	225, 0,
	281, 0,
	-2, 592,
	-1, 1767,
	141, 0,
	-2, 620,
	-1, 1812,
	141, 0,
	-2, 621,
	-1, 1864,
	35, 0,
	126, 0,
	151, 0,
	225, 0,
	281, 0,
	-2, 936,
}

const sqlNprod = 1078
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 24545

var sqlAct = [...]int{

	598, 1844, 1863, 1886, 1476, 1711, 1818, 1845, 1862, 1846,
	1071, 985, 977, 817, 1533, 357, 1734, 1747, 1049, 1660,
	1633, 708, 821, 1654, 42, 285, 1647, 1593, 72, 596,
	895, 595, 588, 1634, 1315, 18, 344, 72, 72, 72,
	1048, 323, 72, 1053, 560, 72, 1080, 1402, 1349, 1488,
	897, 1244, 1314, 72, 1401, 1305, 824, 1052, 663, 1498,
	72, 72, 1017, 1079, 72, 660, 986, 72, 72, 72,
	955, 246, 1299, 1156, 1192, 1132, 693, 946, 1129, 1195,
	839, 25, 1083, 328, 772, 73, 441, 14, 648, 528,
	1010, 1043, 756, 1001, 665, 330, 55, 679, 1081, 358,
	570, 356, 359, 561, 7, 529, 322, 753, 927, 783,
	378, 571, 931, 369, 9, 979, 8, 251, 6, 544,
	4, 1056, 372, 250, 244, 845, 333, 545, 56, 272,
	543, 55, 371, 57, 282, 774, 263, 686, 770, 69,
	252, 752, 548, 1754, 365, 331, 1755, 327, 1878, 695,
	253, 1075, 248, 1313, 247, 978, 249, 695, 327, 695,
	1860, 55, 341, 1733, 1852, 347, 1842, 1075, 1837, 1007,
	1814, 1075, 1020, 1007, 1808, 342, 1344, 1075, 349, 352,
	1798, 1345, 311, 1733, 320, 254, 1255, 1788, 1761, 319,
	1075, 1007, 1758, 1744, 1741, 1075, 1733, 1075, 1256, 1732,
	350, 709, 1733, 848, 849, 1716, 335, 1014, 1075, 1715,
	1693, 1673, 1075, 1020, 1020, 61, 1670, 1620, 1619, 1007,
	1020, 1020, 1605, 847, 1518, 1075, 851, 1020, 54, 1462,
	1456, 1419, 974, 974, 1420, 1303, 1417, 675, 63, 1020,
	72, 72, 72, 72, 72, 1416, 381, 850, 1020, 1015,
	1415, 1343, 1346, 1020, 34, 1020, 1020, 1302, 1284, 72,
	1076, 1075, 35, 1075, 1029, 64, 1802, 1020, 374, 374,
	328, 527, 1348, 59, 72, 1736, 846, 72, 72, 60,
	1302, 1019, 1569, 1020, 1020, 1016, 1013, 1006, 973, 943,
	1007, 974, 942, 703, 590, 1521, 704, 1282, 58, 944,
	1285, 856, 65, 443, 1075, 1022, 848, 849, 1140, 696,
	1070, 72, 1037, 72, 556, 72, 72, 696, 72, 696,
	360, 812, 811, 555, 361, 764, 1861, 763, 407, 851,
	340, 382, 360, 72, 383, 361, 361, 982, 366, 797,
	535, 537, 427, 1018, 72, 1858, 1851, 1809, 848, 849,
	850, 342, 1742, 352, 1698, 379, 72, 1694, 848, 849,
	61, 542, 443, 72, 72, 72, 375, 72, 541, 415,
	1686, 851, 681, 1685, 1684, 1679, 1678, 655, 1677, 1631,
	61, 851, 654, 63, 1584, 416, 1579, 820, 444, 1578,
	1255, 445, 850, 1625, 1577, 1524, 1507, 1487, 1466, 1424,
	72, 1421, 850, 63, 856, 1012, 1409, 72, 699, 72,
	64, 534, 1137, 354, 1400, 846, 694, 1371, 815, 1368,
	381, 381, 1366, 1354, 342, 1353, 1287, 1011, 443, 72,
	64, 72, 72, 72, 72, 72, 72, 72, 59, 1283,
	532, 72, 1209, 58, 60, 1163, 856, 444, 683, 698,
	445, 650, 701, 866, 1162, 657, 856, 555, 554, 320,
	1535, 366, 1828, 58, 319, 903, 1801, 680, 551, 552,
	1780, 61, 1778, 1769, 342, 687, 687, 1751, 557, 1739,
	1730, 1372, 1373, 750, 1708, 852, 853, 854, 855, 857,
	1691, 877, 1663, 762, 63, 866, 1641, 1513, 705, 848,
	849, 1138, 688, 1506, 1484, 382, 382, 685, 383, 383,
	867, 342, 1482, 444, 798, 1481, 445, 1624, 1479, 1436,
	360, 64, 851, 1435, 361, 1399, 1362, 1361, 1340, 59,
	1336, 1134, 72, 1464, 1271, 60, 1236, 649, 1235, 72,
	1223, 1222, 1202, 850, 759, 1161, 1074, 932, 935, 939,
	760, 819, 867, 925, 981, 1372, 1373, 72, 794, 787,
	72, 924, 923, 799, 848, 849, 803, 804, 805, 806,
	807, 922, 802, 921, 920, 810, 919, 530, 843, 1378,
	1372, 1373, 918, 917, 861, 858, 859, 860, 852, 853,
	854, 855, 857, 916, 877, 915, 914, 898, 1223, 328,
	913, 355, 912, 911, 910, 1387, 1372, 1373, 850, 901,
	814, 899, 58, 816, 900, 345, 559, 413, 403, 401,
	1630, 1629, 1265, 1264, 603, 848, 849, 656, 671, 564,
	852, 853, 854, 855, 857, 1756, 877, 1628, 1257, 1065,
	421, 937, 854, 855, 857, 938, 877, 1423, 1422, 1321,
	437, 422, 275, 1378, 894, 908, 1648, 978, 1536, 72,
	1157, 813, 1357, 928, 1251, 829, 1430, 72, 317, 1824,
	1787, 72, 828, 827, 1874, 72, 72, 320, 1378, 1278,
	320, 320, 835, 841, 1613, 836, 837, 240, 1028, 304,
	72, 656, 72, 72, 1875, 72, 715, 310, 72, 309,
	72, 72, 1388, 72, 1378, 381, 305, 948, 440, 652,
	949, 1724, 666, 1447, 667, 254, 1723, 793, 1450, 1749,
	1427, 1426, 980, 1324, 980, 995, 374, 1270, 374, 948,
	1269, 651, 1372, 1373, 1268, 947, 1267, 1206, 241, 246,
	929, 930, 1117, 1002, 1021, 960, 962, 971, 933, 399,
	236, 968, 531, 1388, 936, 72, 72, 1205, 54, 1389,
	1088, 904, 1786, 1374, 1375, 1376, 1377, 1379, 1651, 965,
	941, 313, 1451, 1713, 1024, 419, 1131, 1240, 1131, 1826,
	940, 677, 342, 668, 34, 251, 352, 877, 952, 1004,
	382, 250, 35, 383, 689, 1003, 237, 1438, 443, 55,
	1018, 989, 72, 55, 984, 1883, 352, 969, 252, 352,
	1389, 994, 1005, 420, 379, 999, 72, 72, 253, 1178,
	248, 72, 247, 996, 249, 997, 1463, 993, 998, 326,
	1378, 314, 1168, 1383, 1380, 1381, 1382, 1374, 1375, 1376,
	1377, 1379, 1157, 673, 666, 933, 667, 936, 72, 318,
	242, 72, 877, 738, 1031, 930, 929, 1025, 1077, 1894,
	1026, 315, 1023, 1014, 1376, 1377, 1379, 68, 1874, 1030,
	325, 672, 666, 1471, 667, 1033, 1087, 1277, 1245, 1388,
	243, 1035, 695, 444, 1042, 443, 445, 1382, 1374, 1375,
	1376, 1377, 1379, 1454, 1234, 1333, 1253, 1036, 956, 1445,
	848, 849, 1046, 1839, 1249, 1015, 1034, 1238, 1331, 1171,
	61, 681, 327, 877, 1047, 668, 681, 1045, 67, 1840,
	676, 945, 1848, 851, 239, 238, 600, 342, 1439, 410,
	412, 1018, 1781, 63, 1245, 1279, 1389, 1372, 1373, 737,
	926, 1016, 1013, 668, 850, 1714, 72, 72, 72, 1144,
	1078, 1172, 72, 1208, 418, 72, 1765, 669, 959, 342,
	64, 72, 72, 72, 72, 72, 1068, 1069, 59, 72,
	444, 1135, 72, 445, 60, 72, 1329, 1731, 1141, 1145,
	1334, 1148, 72, 1326, 72, 1130, 417, 1173, 1170, 1882,
	324, 72, 1136, 245, 1153, 1216, 1849, 1187, 856, 1018,
	891, 72, 1360, 1199, 1200, 1201, 328, 1468, 1210, 438,
	1383, 1380, 1381, 1382, 1374, 1375, 1376, 1377, 1379, 1895,
	1499, 327, 72, 72, 1233, 1847, 714, 1889, 72, 1873,
	66, 1247, 1871, 1646, 1850, 1378, 1063, 430, 381, 1211,
	418, 958, 696, 1469, 546, 1174, 408, 866, 406, 547,
	1085, 1086, 1689, 1492, 664, 1718, 1114, 1212, 72, 1330,
	72, 1012, 72, 439, 72, 1717, 1332, 72, 547, 1706,
	1609, 1259, 1881, 1260, 1261, 1775, 72, 1900, 1429, 1250,
	1286, 1219, 1288, 72, 1388, 72, 1242, 1290, 1258, 669,
	1215, 792, 791, 680, 785, 780, 1289, 583, 1291, 1262,
	1064, 1018, 680, 826, 867, 957, 818, 1169, 1467, 328,
	1002, 740, 342, 1273, 1661, 1274, 1819, 669, 1276, 1275,
	546, 1565, 1280, 382, 809, 70, 383, 765, 1707, 1304,
	1657, 1320, 1281, 739, 255, 256, 257, 1690, 1225, 274,
	1224, 1389, 286, 715, 715, 1612, 1887, 1112, 1115, 1494,
	274, 1296, 1611, 1493, 1608, 1220, 1004, 334, 334, 328,
	1308, 70, 1003, 1899, 70, 70, 353, 1319, 1297, 1662,
	55, 795, 1111, 417, 364, 1292, 1308, 834, 1311, 1005,
	363, 860, 852, 853, 854, 855, 857, 1888, 877, 1497,
	1347, 1327, 325, 1325, 1311, 1309, 342, 1477, 769, 538,
	1566, 1632, 1489, 1300, 1890, 1306, 1567, 1704, 328, 1263,
	1160, 1309, 264, 1768, 1339, 1688, 1403, 1404, 1341, 1374,
	1375, 1376, 1377, 1379, 72, 1307, 744, 1512, 1705, 1356,
	1351, 1352, 767, 269, 1367, 1335, 1610, 1241, 265, 1656,
	796, 1027, 1434, 768, 972, 436, 1113, 435, 715, 434,
	433, 432, 431, 1220, 428, 1310, 72, 72, 362, 909,
	801, 266, 1159, 1398, 1406, 1407, 1408, 1458, 1843, 1816,
	1590, 1310, 1443, 1441, 1411, 1428, 1293, 1066, 1061, 268,
	261, 1425, 1000, 72, 702, 700, 72, 697, 72, 692,
	1453, 674, 1432, 670, 72, 1530, 825, 1725, 1457, 549,
	738, 738, 715, 72, 1483, 338, 1442, 72, 1444, 1875,
	1480, 424, 1446, 72, 443, 1448, 1449, 72, 789, 72,
	1460, 1233, 1459, 1461, 264, 1072, 1655, 1727, 711, 3,
	948, 1470, 1472, 1473, 964, 1736, 963, 70, 367, 70,
	286, 286, 948, 1478, 1811, 269, 715, 1783, 961, 1491,
	265, 1455, 1486, 1495, 1490, 553, 404, 260, 1515, 967,
	966, 72, 1803, 1496, 267, 1502, 550, 989, 342, 1500,
	1501, 409, 339, 266, 286, 286, 1644, 1062, 1060, 786,
	781, 303, 1073, 983, 1127, 842, 737, 737, 761, 707,
	425, 268, 1526, 1527, 1528, 346, 1523, 1125, 271, 444,
	1503, 1009, 445, 1897, 1898, 738, 1585, 270, 274, 1474,
	70, 1537, 286, 286, 342, 539, 1372, 1373, 342, 1465,
	1519, 848, 849, 1418, 1542, 1039, 1038, 72, 72, 72,
	334, 306, 307, 1266, 1601, 1207, 72, 72, 1204, 1203,
	1154, 70, 72, 1040, 72, 1804, 72, 72, 72, 1572,
	1675, 72, 1529, 70, 1606, 1607, 1294, 1573, 1041, 738,
	70, 70, 70, 1123, 690, 1122, 1602, 902, 312, 1128,
	1712, 262, 1589, 714, 714, 1586, 267, 800, 429, 1570,
	1838, 1681, 72, 72, 1359, 1746, 1764, 1158, 907, 33,
	1580, 737, 1626, 1636, 72, 72, 576, 70, 72, 1622,
	1642, 1591, 1431, 738, 757, 1645, 757, 72, 72, 1639,
	1627, 1638, 1640, 1055, 1639, 1054, 1638, 1640, 446, 270,
	790, 779, 599, 1643, 773, 1664, 286, 782, 757, 286,
	286, 286, 286, 286, 808, 1669, 72, 1167, 286, 653,
	1652, 1653, 1665, 601, 1658, 737, 1179, 712, 1124, 602,
	1597, 713, 1598, 934, 589, 1126, 710, 1616, 740, 740,
	377, 1301, 987, 1155, 1355, 905, 1539, 1540, 575, 581,
	1650, 580, 1142, 400, 1544, 1545, 572, 1600, 714, 1304,
	739, 739, 1659, 1312, 1603, 45, 414, 280, 281, 737,
	1687, 72, 1248, 72, 1623, 72, 72, 1067, 830, 1440,
	316, 1369, 402, 1185, 72, 342, 342, 1576, 1177, 342,
	1175, 1166, 533, 1699, 659, 988, 426, 1254, 1008, 558,
	1702, 838, 337, 336, 1050, 72, 1308, 423, 766, 274,
	1032, 715, 714, 308, 1700, 1777, 823, 1218, 1893, 1782,
	1437, 1599, 1823, 1726, 1311, 62, 24, 72, 22, 72,
	21, 20, 19, 1737, 334, 1306, 17, 844, 72, 715,
	715, 1309, 1740, 740, 72, 1728, 1735, 715, 715, 16,
	15, 1639, 23, 1638, 1640, 1307, 714, 1750, 13, 12,
	1743, 11, 1757, 10, 32, 739, 31, 30, 1372, 1373,
	29, 1721, 1722, 28, 5, 2, 1, 0, 0, 0,
	715, 0, 0, 0, 1753, 72, 0, 0, 0, 0,
	0, 0, 0, 1770, 0, 1710, 1779, 740, 1763, 0,
	0, 1310, 0, 0, 72, 72, 0, 1774, 72, 1773,
	0, 0, 72, 0, 0, 0, 0, 72, 1791, 739,
	0, 0, 0, 0, 0, 1793, 0, 1799, 1795, 0,
	1800, 681, 72, 0, 0, 328, 70, 443, 1745, 1179,
	1179, 740, 1794, 1639, 953, 1638, 1640, 1792, 70, 342,
	1805, 0, 70, 970, 1806, 711, 711, 0, 0, 72,
	0, 72, 72, 739, 72, 0, 1378, 70, 738, 991,
	992, 1813, 70, 751, 0, 70, 1829, 286, 286, 1821,
	286, 1827, 0, 72, 1832, 1833, 1810, 0, 715, 1825,
	1179, 1179, 1179, 1830, 0, 1720, 738, 738, 1836, 1797,
	1835, 0, 1834, 0, 738, 738, 0, 72, 0, 72,
	0, 1639, 0, 1638, 1640, 1388, 1853, 1859, 1855, 1831,
	0, 1857, 444, 1807, 72, 445, 0, 1856, 0, 1868,
	0, 0, 757, 844, 1872, 1870, 0, 738, 0, 0,
	1876, 0, 0, 0, 0, 0, 1879, 1880, 1877, 0,
	0, 0, 0, 0, 737, 0, 0, 0, 1892, 1891,
	711, 0, 0, 0, 1896, 0, 0, 0, 0, 0,
	0, 1841, 1389, 1822, 0, 0, 0, 0, 0, 1044,
	1901, 0, 737, 737, 0, 0, 0, 1601, 715, 1594,
	737, 737, 0, 70, 1051, 0, 0, 1592, 844, 0,
	0, 1596, 0, 0, 0, 0, 0, 0, 577, 43,
	0, 0, 0, 0, 711, 0, 0, 0, 989, 1602,
	0, 0, 0, 737, 0, 70, 0, 0, 286, 1337,
	1338, 0, 0, 0, 0, 1179, 1179, 0, 1595, 0,
	0, 714, 0, 0, 43, 738, 0, 1380, 1381, 1382,
	1374, 1375, 1376, 1377, 1379, 0, 0, 0, 711, 0,
	0, 0, 0, 0, 321, 0, 715, 329, 0, 714,
	714, 0, 0, 0, 43, 0, 0, 714, 714, 0,
	1395, 1396, 1397, 0, 1179, 1179, 1179, 1179, 1179, 1179,
	1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179,
	1179, 1179, 1179, 1597, 1179, 1598, 0, 0, 0, 0,
	714, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 70, 1213, 1214, 740, 0, 0, 953,
	1600, 737, 1221, 0, 0, 0, 0, 1603, 1226, 1227,
	1229, 1231, 1232, 0, 715, 738, 1237, 0, 739, 1239,
	0, 0, 70, 0, 740, 740, 0, 0, 0, 70,
	0, 1252, 740, 740, 0, 0, 0, 0, 70, 0,
	0, 0, 0, 0, 0, 0, 739, 739, 70, 0,
	0, 0, 0, 0, 739, 739, 0, 0, 0, 0,
	287, 0, 0, 0, 1599, 740, 0, 0, 0, 1044,
	757, 0, 0, 0, 0, 1044, 0, 0, 300, 0,
	562, 562, 0, 0, 0, 0, 0, 739, 714, 661,
	0, 0, 0, 738, 0, 1510, 1511, 0, 0, 0,
	0, 737, 0, 0, 682, 823, 0, 823, 0, 286,
	0, 70, 0, 289, 1295, 0, 0, 0, 294, 295,
	0, 0, 301, 1298, 329, 0, 0, 0, 0, 0,
	1317, 0, 70, 0, 288, 290, 0, 0, 0, 0,
	0, 0, 0, 0, 1546, 1547, 1548, 1549, 1550, 1551,
	1552, 1553, 1554, 1555, 1556, 1557, 1558, 1559, 1560, 1561,
	1562, 1563, 1564, 0, 1568, 0, 0, 0, 0, 0,
	0, 738, 291, 740, 0, 0, 0, 302, 0, 737,
	848, 849, 1179, 0, 0, 292, 293, 0, 714, 0,
	0, 0, 0, 0, 0, 739, 0, 0, 0, 0,
	0, 296, 0, 851, 0, 0, 0, 0, 0, 321,
	0, 0, 0, 711, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 850, 0, 0, 0, 0, 0,
	848, 849, 0, 868, 869, 870, 878, 879, 880, 0,
	0, 711, 711, 0, 0, 0, 871, 0, 0, 711,
	711, 0, 0, 851, 0, 882, 0, 737, 0, 0,
	0, 0, 0, 0, 0, 0, 714, 0, 1179, 0,
	0, 844, 0, 740, 850, 0, 0, 0, 856, 0,
	865, 0, 711, 0, 0, 0, 0, 0, 0, 0,
	831, 833, 0, 848, 849, 739, 0, 840, 297, 0,
	0, 298, 0, 70, 70, 0, 299, 0, 0, 886,
	887, 888, 889, 890, 0, 0, 851, 0, 893, 0,
	0, 0, 0, 0, 0, 0, 0, 866, 856, 0,
	1475, 0, 0, 953, 0, 823, 0, 850, 906, 0,
	0, 1485, 0, 865, 714, 0, 875, 883, 1179, 0,
	70, 740, 0, 0, 70, 0, 0, 0, 0, 0,
	1317, 881, 0, 0, 1505, 0, 1317, 0, 0, 0,
	0, 873, 1709, 739, 0, 0, 0, 866, 0, 0,
	0, 0, 0, 0, 867, 0, 0, 0, 0, 0,
	711, 856, 0, 0, 0, 0, 0, 0, 0, 872,
	0, 0, 0, 0, 0, 0, 0, 0, 1534, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 321, 0, 740,
	321, 321, 0, 0, 867, 0, 0, 0, 0, 0,
	866, 0, 0, 0, 0, 876, 0, 0, 0, 0,
	0, 739, 0, 892, 0, 0, 0, 896, 1767, 858,
	859, 860, 852, 853, 854, 855, 857, 0, 877, 0,
	0, 0, 0, 0, 1587, 1588, 953, 0, 0, 0,
	0, 0, 0, 844, 844, 0, 0, 0, 0, 1614,
	711, 1615, 0, 70, 1617, 1618, 0, 867, 1621, 0,
	0, 874, 0, 0, 862, 863, 864, 0, 861, 858,
	859, 860, 852, 853, 854, 855, 857, 0, 877, 0,
	0, 0, 0, 0, 0, 1695, 0, 1635, 0, 844,
	1051, 0, 1635, 0, 0, 0, 0, 0, 1812, 0,
	0, 70, 70, 0, 0, 70, 0, 0, 0, 0,
	0, 0, 0, 0, 844, 1317, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 43, 0, 43, 711, 0,
	0, 861, 858, 859, 860, 852, 853, 854, 855, 857,
	0, 877, 43, 1682, 0, 0, 43, 0, 0, 0,
	562, 0, 0, 0, 0, 0, 1089, 1090, 1091, 1092,
	1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102,
	1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 0, 1116,
	0, 1118, 1119, 1120, 1121, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 953, 0,
	1701, 0, 286, 1703, 0, 0, 711, 0, 0, 0,
	0, 70, 0, 0, 0, 0, 1164, 1165, 0, 1176,
	0, 1186, 1188, 1193, 1196, 1197, 1198, 0, 0, 0,
	0, 0, 844, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 661, 0, 0, 1635,
	0, 0, 0, 0, 70, 0, 1748, 0, 0, 0,
	848, 849, 0, 0, 0, 70, 878, 879, 880, 0,
	0, 844, 0, 0, 0, 0, 0, 0, 0, 0,
	1243, 0, 1246, 851, 0, 882, 1082, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 850, 0, 0, 0, 0, 0,
	865, 0, 823, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1133, 0, 1272, 0, 0, 0, 0, 0,
	0, 1784, 1785, 1372, 1373, 1789, 1390, 1391, 1392, 1790,
	0, 1635, 0, 0, 286, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 856, 844,
	0, 0, 848, 849, 0, 868, 869, 870, 878, 879,
	880, 0, 0, 0, 840, 0, 875, 883, 0, 0,
	0, 0, 0, 1387, 0, 851, 1820, 882, 844, 70,
	0, 286, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 873, 0, 0, 0, 0, 850, 866, 0, 1635,
	1748, 0, 865, 0, 0, 1322, 1323, 0, 0, 0,
	329, 1328, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1378, 0, 0, 70, 0, 844, 0, 0, 0,
	0, 0, 0, 0, 1342, 0, 0, 0, 0, 0,
	0, 1869, 0, 1350, 0, 0, 0, 0, 0, 0,
	856, 1358, 0, 0, 867, 1363, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 876, 0, 0, 875, 883,
	1388, 0, 0, 0, 0, 0, 0, 893, 0, 0,
	0, 0, 0, 1193, 1193, 1193, 0, 0, 0, 43,
	0, 43, 0, 873, 0, 0, 0, 0, 0, 866,
	0, 0, 0, 43, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1318, 0, 0, 1433, 0, 0, 0,
	0, 874, 0, 0, 0, 0, 0, 1389, 861, 858,
	859, 860, 852, 853, 854, 855, 857, 0, 877, 562,
	0, 0, 0, 0, 1133, 0, 0, 562, 0, 0,
	0, 661, 0, 0, 0, 0, 867, 0, 0, 0,
	0, 0, 0, 892, 0, 0, 0, 876, 0, 0,
	848, 849, 0, 868, 869, 870, 878, 879, 880, 0,
	0, 0, 0, 0, 0, 0, 871, 0, 0, 0,
	0, 0, 0, 851, 0, 882, 0, 1384, 1385, 1386,
	0, 1383, 1380, 1381, 1382, 1374, 1375, 1376, 1377, 1379,
	0, 0, 892, 0, 850, 1508, 0, 0, 1509, 0,
	865, 0, 0, 874, 0, 0, 862, 863, 864, 1514,
	861, 858, 859, 860, 852, 853, 854, 855, 857, 0,
	877, 0, 1272, 0, 0, 0, 0, 0, 0, 0,
	0, 1531, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1541, 0, 0, 1543, 0, 0, 0, 856, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1082, 875, 883, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1574, 1575, 0,
	0, 881, 0, 0, 0, 0, 1581, 1582, 1583, 0,
	0, 873, 0, 0, 0, 0, 0, 866, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1082, 0, 0, 0, 1082, 0, 0, 0, 872,
	0, 0, 0, 0, 0, 0, 0, 0, 562, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 848,
	849, 0, 868, 869, 870, 878, 879, 880, 0, 0,
	0, 0, 0, 0, 867, 871, 0, 0, 0, 0,
	0, 0, 851, 1649, 882, 876, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 850, 0, 0, 1668, 0, 0, 865,
	1671, 1672, 0, 0, 0, 1674, 0, 848, 849, 1676,
	868, 869, 870, 878, 879, 880, 1680, 0, 0, 0,
	1683, 0, 0, 871, 0, 0, 0, 0, 0, 0,
	851, 874, 882, 0, 862, 863, 864, 0, 861, 858,
	859, 860, 852, 853, 854, 855, 857, 856, 877, 0,
	975, 850, 0, 1692, 0, 0, 0, 865, 0, 976,
	0, 0, 0, 0, 0, 875, 883, 0, 0, 0,
	0, 0, 0, 0, 0, 43, 0, 0, 0, 0,
	881, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	873, 0, 0, 0, 0, 1719, 866, 0, 0, 0,
	0, 0, 0, 0, 0, 856, 0, 0, 0, 0,
	0, 0, 1082, 1082, 0, 0, 1082, 0, 872, 0,
	0, 1738, 0, 875, 883, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 881, 0,
	1752, 0, 0, 0, 0, 0, 0, 0, 873, 0,
	1759, 1760, 0, 867, 866, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 876, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 872, 0, 0, 1772,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1776, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 867, 0, 0, 661, 0, 0, 0, 0, 0,
	874, 0, 876, 862, 863, 864, 0, 861, 858, 859,
	860, 852, 853, 854, 855, 857, 0, 877, 0, 0,
	0, 0, 0, 0, 1414, 0, 0, 1729, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 43, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1082, 0, 874, 0,
	0, 862, 863, 864, 0, 861, 858, 859, 860, 852,
	853, 854, 855, 857, 0, 877, 0, 0, 0, 0,
	0, 0, 1413, 0, 0, 0, 0, 0, 1854, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1867, 1867, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1867, 892,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 442, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1867, 74, 75, 447, 76, 448, 449, 450, 451,
	187, 452, 453, 454, 455, 77, 78, 188, 189, 190,
	191, 79, 192, 193, 456, 80, 194, 195, 81, 457,
	458, 196, 197, 198, 459, 199, 460, 385, 461, 82,
	83, 84, 0, 85, 462, 86, 87, 88, 463, 386,
	89, 90, 464, 465, 466, 467, 468, 469, 91, 92,
	93, 94, 200, 95, 201, 202, 470, 96, 471, 97,
	472, 473, 474, 98, 99, 475, 100, 476, 0, 477,
	203, 101, 102, 204, 478, 479, 480, 103, 104, 205,
	0, 105, 481, 106, 482, 483, 387, 484, 107, 206,
	485, 207, 486, 108, 109, 110, 208, 209, 389, 487,
	113, 488, 111, 489, 388, 112, 210, 211, 212, 213,
	490, 214, 491, 390, 114, 391, 115, 116, 492, 493,
	215, 392, 117, 393, 494, 118, 495, 496, 119, 0,
	120, 121, 122, 123, 124, 394, 125, 126, 129, 127,
	497, 128, 498, 216, 130, 217, 131, 132, 499, 500,
	501, 502, 503, 133, 218, 395, 134, 396, 219, 135,
	136, 137, 504, 220, 138, 221, 139, 505, 140, 141,
	142, 222, 143, 144, 506, 146, 147, 145, 148, 507,
	149, 397, 150, 151, 223, 152, 0, 153, 154, 155,
	508, 224, 156, 157, 509, 158, 159, 398, 160, 225,
	226, 161, 510, 167, 162, 163, 164, 166, 227, 165,
	228, 511, 168, 512, 169, 170, 513, 229, 230, 231,
	514, 515, 171, 232, 233, 516, 172, 173, 174, 175,
	517, 518, 176, 177, 178, 519, 520, 179, 180, 181,
	234, 235, 521, 522, 182, 523, 524, 525, 526, 183,
	184, 185, 186, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 442, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1504,
	74, 75, 447, 76, 448, 449, 450, 451, 187, 452,
	453, 454, 455, 77, 78, 188, 189, 190, 191, 79,
	192, 193, 456, 80, 194, 195, 81, 457, 458, 196,
	197, 198, 459, 199, 460, 385, 461, 82, 83, 84,
	0, 85, 462, 86, 87, 88, 463, 386, 89, 90,
	464, 465, 466, 467, 468, 469, 91, 92, 93, 94,
	200, 95, 201, 202, 470, 96, 471, 97, 472, 473,
	474, 98, 99, 475, 100, 476, 0, 477, 203, 101,
	102, 204, 478, 479, 480, 103, 104, 205, 0, 105,
	481, 106, 482, 483, 387, 484, 107, 206, 485, 207,
	486, 108, 109, 110, 208, 209, 389, 487, 113, 488,
	111, 489, 388, 112, 210, 211, 212, 213, 490, 214,
	491, 390, 114, 391, 115, 116, 492, 493, 215, 392,
	117, 393, 494, 118, 495, 496, 119, 0, 120, 121,
	122, 123, 124, 394, 125, 126, 129, 127, 497, 128,
	498, 216, 130, 217, 131, 132, 499, 500, 501, 502,
	503, 133, 218, 395, 134, 396, 219, 135, 136, 137,
	504, 220, 138, 221, 139, 505, 140, 141, 142, 222,
	143, 144, 506, 146, 147, 145, 148, 507, 149, 397,
	150, 151, 223, 152, 0, 153, 154, 155, 508, 224,
	156, 157, 509, 158, 159, 398, 160, 225, 226, 161,
	510, 167, 162, 163, 164, 166, 227, 165, 228, 511,
	168, 512, 169, 170, 513, 229, 230, 231, 514, 515,
	171, 232, 233, 516, 172, 173, 174, 175, 517, 518,
	176, 177, 178, 519, 520, 179, 180, 181, 234, 235,
	521, 522, 182, 523, 524, 525, 526, 183, 184, 185,
	186, 442, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 684, 0, 0, 74, 75, 447,
	76, 448, 449, 450, 451, 187, 452, 453, 454, 455,
	77, 78, 188, 189, 190, 191, 79, 192, 193, 456,
	80, 194, 195, 81, 457, 458, 196, 197, 198, 459,
	199, 460, 385, 461, 82, 83, 84, 0, 85, 462,
	86, 87, 88, 463, 386, 89, 90, 464, 465, 466,
	467, 468, 469, 91, 92, 93, 94, 200, 95, 201,
	202, 470, 96, 471, 97, 472, 473, 474, 98, 99,
	475, 100, 476, 0, 477, 203, 101, 102, 204, 478,
	479, 480, 103, 104, 205, 0, 105, 481, 106, 482,
	483, 387, 484, 107, 206, 485, 207, 486, 108, 109,
	110, 208, 209, 389, 487, 113, 488, 111, 489, 388,
	112, 210, 211, 212, 213, 490, 214, 491, 390, 114,
	391, 115, 116, 492, 493, 215, 392, 117, 393, 494,
	118, 495, 496, 119, 0, 120, 121, 122, 123, 124,
	394, 125, 126, 129, 127, 497, 128, 498, 216, 130,
	217, 131, 132, 499, 500, 501, 502, 503, 133, 218,
	395, 134, 396, 219, 135, 136, 137, 504, 220, 138,
	221, 139, 505, 140, 141, 142, 222, 143, 144, 506,
	146, 147, 145, 148, 507, 149, 397, 150, 151, 223,
	152, 0, 153, 154, 155, 508, 224, 156, 157, 509,
	158, 159, 398, 160, 225, 226, 161, 510, 167, 162,
	163, 164, 166, 227, 165, 228, 511, 168, 512, 169,
	170, 513, 229, 230, 231, 514, 515, 171, 232, 233,
	516, 172, 173, 174, 175, 517, 518, 176, 177, 178,
	519, 520, 179, 180, 181, 234, 235, 521, 522, 182,
	523, 524, 525, 526, 183, 184, 185, 186, 597, 586,
	587, 584, 585, 573, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 74, 75, 1150, 76, 0, 0,
	0, 0, 613, 579, 0, 0, 0, 77, 78, 188,
	627, 190, 628, 79, 629, 630, 0, 80, 194, 195,
	81, 594, 612, 631, 632, 198, 0, 623, 0, 605,
	0, 82, 83, 84, 0, 85, 0, 86, 87, 88,
	0, 386, 89, 90, 0, 606, 608, 0, 607, 609,
	91, 92, 93, 94, 633, 95, 634, 635, 0, 96,
	0, 97, 0, 1151, 0, 626, 99, 0, 100, 0,
	0, 0, 578, 101, 102, 614, 592, 0, 0, 103,
	104, 636, 0, 105, 0, 106, 0, 0, 387, 0,
	107, 624, 0, 207, 0, 108, 109, 110, 620, 622,
	389, 0, 113, 0, 111, 0, 388, 112, 637, 638,
	639, 640, 0, 604, 0, 390, 114, 391, 115, 116,
	0, 0, 625, 392, 117, 393, 0, 118, 0, 0,
	119, 0, 120, 121, 122, 123, 124, 394, 125, 126,
	129, 127, 568, 128, 593, 621, 130, 641, 131, 132,
	0, 0, 0, 0, 0, 133, 218, 395, 134, 396,
	615, 135, 136, 137, 0, 616, 138, 221, 139, 0,
	140, 141, 142, 642, 143, 144, 0, 146, 147, 145,
	148, 0, 149, 397, 150, 151, 582, 152, 0, 153,
	154, 155, 0, 224, 156, 157, 610, 158, 159, 398,
	160, 643, 226, 161, 0, 167, 162, 163, 164, 166,
	644, 165, 617, 0, 168, 0, 169, 170, 0, 229,
	645, 646, 0, 0, 171, 618, 619, 591, 172, 173,
	174, 175, 0, 0, 176, 177, 178, 611, 0, 179,
	180, 181, 234, 647, 1149, 0, 182, 0, 0, 0,
	0, 183, 184, 185, 186, 569, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 565, 566, 1152, 0,
	0, 0, 567, 0, 0, 574, 1147, 597, 586, 587,
	584, 585, 573, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 74, 75, 0, 76, 0, 0, 0,
	0, 613, 579, 0, 0, 0, 77, 78, 188, 627,
	190, 628, 79, 629, 630, 0, 80, 194, 195, 81,
	594, 612, 631, 632, 198, 0, 623, 0, 605, 0,
	82, 83, 84, 0, 85, 0, 86, 87, 88, 0,
	386, 89, 90, 0, 606, 608, 0, 607, 609, 91,
	92, 93, 94, 633, 95, 634, 635, 662, 96, 0,
	97, 0, 0, 0, 626, 99, 0, 100, 0, 0,
	0, 578, 101, 102, 614, 592, 0, 0, 103, 104,
	636, 0, 105, 0, 106, 0, 0, 387, 0, 107,
	624, 0, 207, 0, 108, 109, 110, 620, 622, 389,
	0, 113, 0, 111, 0, 388, 112, 637, 638, 639,
	640, 0, 604, 0, 390, 114, 391, 115, 116, 0,
	0, 625, 392, 117, 393, 0, 118, 0, 0, 119,
	0, 120, 121, 122, 123, 124, 394, 125, 126, 129,
	127, 568, 128, 593, 621, 130, 641, 131, 132, 0,
	0, 0, 0, 0, 133, 218, 395, 134, 396, 615,
	135, 136, 137, 0, 616, 138, 221, 139, 0, 140,
	141, 142, 642, 143, 144, 0, 146, 147, 145, 148,
	0, 149, 397, 150, 151, 582, 152, 0, 153, 154,
	155, 61, 224, 156, 157, 610, 158, 159, 398, 160,
	643, 226, 161, 0, 167, 162, 163, 164, 166, 644,
	165, 617, 0, 168, 63, 169, 170, 0, 229, 645,
	646, 0, 0, 171, 618, 619, 591, 172, 173, 174,
	175, 0, 0, 176, 177, 178, 611, 0, 179, 180,
	181, 384, 647, 0, 0, 182, 0, 0, 0, 59,
	183, 184, 185, 186, 569, 60, 597, 586, 587, 584,
	585, 573, 0, 0, 0, 565, 566, 0, 0, 0,
	0, 567, 74, 75, 574, 76, 0, 0, 0, 0,
	613, 579, 0, 0, 0, 77, 78, 188, 627, 190,
	628, 79, 629, 630, 0, 80, 194, 195, 81, 594,
	612, 631, 632, 198, 0, 623, 0, 605, 0, 82,
	83, 84, 0, 85, 0, 86, 87, 88, 0, 386,
	89, 90, 0, 606, 608, 0, 607, 609, 91, 92,
	93, 94, 633, 95, 634, 635, 0, 96, 0, 97,
	0, 0, 0, 626, 99, 0, 100, 0, 0, 0,
	578, 101, 102, 614, 592, 0, 0, 103, 104, 636,
	0, 105, 0, 106, 0, 0, 387, 0, 107, 624,
	0, 207, 0, 108, 109, 110, 620, 622, 389, 0,
	113, 0, 111, 0, 388, 112, 637, 638, 639, 640,
	0, 604, 0, 390, 114, 391, 115, 116, 0, 0,
	625, 392, 117, 393, 0, 118, 0, 0, 119, 0,
	120, 121, 122, 123, 124, 394, 125, 126, 129, 127,
	568, 128, 593, 621, 130, 641, 131, 132, 0, 0,
	0, 0, 0, 133, 218, 395, 134, 396, 615, 135,
	136, 137, 0, 616, 138, 221, 139, 0, 140, 141,
	142, 642, 143, 144, 0, 146, 147, 145, 148, 0,
	149, 397, 150, 151, 582, 152, 0, 153, 154, 155,
	61, 224, 156, 157, 610, 158, 159, 398, 160, 643,
	226, 161, 0, 167, 162, 163, 164, 166, 644, 165,
	617, 0, 168, 63, 169, 170, 0, 229, 645, 646,
	0, 0, 171, 618, 619, 591, 172, 173, 174, 175,
	0, 0, 176, 177, 178, 611, 0, 179, 180, 181,
	384, 647, 0, 0, 182, 0, 0, 0, 59, 183,
	184, 185, 186, 569, 60, 597, 586, 587, 584, 585,
	573, 0, 0, 0, 565, 566, 0, 0, 0, 0,
	567, 74, 75, 574, 76, 0, 0, 0, 0, 613,
	579, 0, 0, 0, 77, 78, 188, 627, 190, 628,
	79, 629, 630, 1189, 80, 194, 195, 81, 594, 612,
	631, 632, 198, 0, 623, 0, 605, 0, 82, 83,
	84, 0, 85, 0, 86, 87, 88, 0, 386, 89,
	90, 0, 606, 608, 0, 607, 609, 91, 92, 93,
	94, 633, 95, 634, 635, 0, 96, 0, 97, 0,
	0, 0, 626, 99, 0, 100, 0, 0, 0, 578,
	101, 102, 614, 592, 0, 0, 103, 104, 636, 0,
	105, 0, 106, 0, 1194, 387, 0, 107, 624, 0,
	207, 0, 108, 109, 110, 620, 622, 389, 0, 113,
	0, 111, 0, 388, 112, 637, 638, 639, 640, 0,
	604, 0, 390, 114, 391, 115, 116, 0, 1190, 625,
	392, 117, 393, 0, 118, 0, 0, 119, 0, 120,
	121, 122, 123, 124, 394, 125, 126, 129, 127, 568,
	128, 593, 621, 130, 641, 131, 132, 0, 0, 0,
	0, 0, 133, 218, 395, 134, 396, 615, 135, 136,
	137, 0, 616, 138, 221, 139, 0, 140, 141, 142,
	642, 143, 144, 0, 146, 147, 145, 148, 0, 149,
	397, 150, 151, 582, 152, 0, 153, 154, 155, 0,
	224, 156, 157, 610, 158, 159, 398, 160, 643, 226,
	161, 0, 167, 162, 163, 164, 166, 644, 165, 617,
	0, 168, 0, 169, 170, 0, 229, 645, 646, 0,
	1191, 171, 618, 619, 591, 172, 173, 174, 175, 0,
	0, 176, 177, 178, 611, 0, 179, 180, 181, 234,
	647, 0, 0, 182, 0, 0, 0, 0, 183, 184,
	185, 186, 569, 0, 597, 586, 587, 584, 585, 573,
	0, 0, 0, 565, 566, 0, 0, 0, 0, 567,
	74, 75, 574, 76, 0, 0, 0, 0, 613, 579,
	0, 0, 0, 77, 78, 188, 627, 190, 628, 79,
	629, 630, 0, 80, 194, 195, 81, 594, 612, 631,
	632, 198, 0, 623, 0, 605, 0, 82, 83, 84,
	0, 85, 0, 86, 87, 88, 0, 386, 89, 90,
	0, 606, 608, 0, 607, 609, 91, 92, 93, 94,
	633, 95, 634, 635, 0, 96, 0, 97, 0, 0,
	0, 626, 99, 0, 100, 0, 0, 0, 578, 101,
	102, 614, 592, 0, 0, 103, 104, 636, 0, 105,
	0, 106, 0, 0, 387, 0, 107, 624, 0, 207,
	0, 108, 109, 110, 620, 622, 389, 0, 113, 0,
	111, 0, 388, 112, 637, 638, 639, 640, 0, 604,
	0, 390, 114, 391, 115, 116, 0, 0, 625, 392,
	117, 393, 0, 118, 0, 0, 119, 0, 120, 121,
	122, 123, 124, 394, 125, 126, 129, 127, 568, 128,
	593, 621, 130, 641, 131, 132, 0, 0, 0, 0,
	0, 133, 218, 395, 134, 396, 615, 135, 136, 137,
	0, 616, 138, 221, 139, 0, 140, 141, 142, 642,
	143, 144, 0, 146, 147, 145, 148, 0, 149, 397,
	150, 151, 582, 152, 0, 153, 154, 155, 0, 224,
	156, 157, 610, 158, 159, 398, 160, 643, 226, 161,
	0, 167, 162, 163, 164, 166, 644, 165, 617, 0,
	168, 0, 169, 170, 0, 229, 645, 646, 0, 0,
	171, 618, 619, 591, 172, 173, 174, 175, 0, 0,
	176, 177, 178, 611, 0, 179, 180, 181, 234, 647,
	0, 0, 182, 0, 0, 0, 0, 183, 184, 185,
	186, 569, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 565, 566, 0, 0, 0, 0, 567, 0,
	0, 574, 1571, 597, 586, 587, 584, 585, 573, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 74,
	75, 0, 76, 0, 0, 0, 0, 613, 579, 0,
	0, 0, 77, 78, 188, 627, 190, 628, 79, 629,
	630, 0, 80, 194, 195, 81, 594, 612, 631, 632,
	198, 0, 623, 0, 605, 0, 82, 83, 84, 0,
	85, 0, 86, 87, 88, 0, 386, 89, 90, 0,
	606, 608, 0, 607, 609, 91, 92, 93, 94, 633,
	95, 634, 635, 0, 96, 0, 97, 0, 0, 0,
	626, 99, 0, 100, 0, 0, 0, 578, 101, 102,
	614, 592, 0, 0, 103, 104, 636, 0, 105, 0,
	106, 0, 0, 387, 0, 107, 624, 0, 207, 0,
	108, 109, 110, 620, 622, 389, 0, 113, 0, 111,
	0, 388, 112, 637, 638, 639, 640, 0, 604, 0,
	390, 114, 391, 115, 116, 0, 0, 625, 392, 117,
	393, 0, 118, 0, 0, 119, 0, 120, 121, 122,
	123, 124, 394, 125, 126, 129, 127, 568, 128, 593,
	621, 130, 641, 131, 132, 0, 0, 0, 0, 0,
	133, 218, 395, 134, 396, 615, 135, 136, 137, 0,
	616, 138, 221, 139, 0, 140, 141, 142, 642, 143,
	144, 0, 146, 147, 145, 148, 0, 149, 397, 150,
	151, 582, 152, 0, 153, 154, 155, 0, 224, 156,
	157, 610, 158, 159, 398, 160, 643, 226, 161, 0,
	167, 162, 163, 164, 166, 644, 165, 617, 0, 168,
	0, 169, 170, 0, 229, 645, 646, 0, 0, 171,
	618, 619, 591, 172, 173, 174, 175, 0, 0, 176,
	177, 178, 611, 0, 179, 180, 181, 234, 647, 0,
	0, 182, 0, 0, 0, 0, 183, 184, 185, 186,
	569, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 565, 566, 0, 0, 0, 0, 567, 0, 0,
	574, 1520, 597, 586, 587, 584, 585, 573, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 74, 75,
	0, 76, 0, 0, 0, 0, 613, 579, 0, 0,
	0, 77, 78, 188, 627, 190, 628, 79, 629, 630,
	0, 80, 194, 195, 81, 594, 612, 631, 632, 198,
	0, 623, 0, 605, 0, 82, 83, 84, 0, 85,
	0, 86, 87, 88, 0, 386, 89, 90, 0, 606,
	608, 0, 607, 609, 91, 92, 93, 94, 633, 95,
	634, 635, 0, 96, 0, 97, 0, 0, 0, 626,
	99, 0, 100, 0, 0, 0, 578, 101, 102, 614,
	592, 0, 0, 103, 104, 636, 0, 105, 0, 106,
	0, 0, 387, 0, 107, 624, 0, 207, 0, 108,
	109, 110, 620, 622, 389, 0, 113, 0, 111, 0,
	388, 112, 637, 638, 639, 640, 0, 604, 0, 390,
	114, 391, 115, 116, 0, 0, 625, 392, 117, 393,
	0, 118, 0, 0, 119, 0, 120, 121, 122, 123,
	124, 394, 125, 126, 129, 127, 568, 128, 593, 621,
	130, 641, 131, 132, 0, 0, 0, 0, 0, 133,
	218, 395, 134, 396, 615, 135, 136, 137, 0, 616,
	138, 221, 139, 0, 140, 141, 142, 642, 143, 144,
	0, 146, 147, 145, 148, 0, 149, 397, 150, 151,
	582, 152, 0, 153, 154, 155, 0, 224, 156, 157,
	610, 158, 159, 398, 160, 643, 226, 161, 0, 167,
	162, 163, 164, 166, 644, 165, 617, 0, 168, 0,
	169, 170, 0, 229, 645, 646, 0, 0, 171, 618,
	619, 591, 172, 173, 174, 175, 0, 0, 176, 177,
	178, 611, 0, 179, 180, 181, 234, 647, 0, 0,
	182, 0, 0, 0, 0, 183, 184, 185, 186, 569,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	565, 566, 0, 0, 0, 0, 567, 0, 0, 574,
	1146, 597, 586, 587, 584, 585, 573, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 74, 75, 0,
	76, 0, 0, 0, 0, 613, 579, 0, 0, 0,
	77, 78, 188, 627, 190, 628, 79, 629, 630, 0,
	80, 194, 195, 81, 594, 612, 631, 632, 198, 0,
	623, 0, 605, 0, 82, 83, 84, 0, 85, 0,
	86, 87, 88, 0, 386, 89, 90, 0, 606, 608,
	0, 607, 609, 91, 92, 93, 94, 633, 95, 634,
	635, 0, 96, 0, 97, 0, 0, 0, 626, 99,
	0, 100, 0, 0, 0, 578, 101, 102, 614, 592,
	0, 0, 103, 104, 636, 0, 105, 0, 106, 0,
	0, 387, 0, 107, 624, 0, 207, 0, 108, 109,
	110, 620, 622, 389, 0, 113, 0, 111, 0, 388,
	112, 637, 638, 639, 640, 0, 604, 0, 390, 114,
	391, 115, 116, 0, 0, 625, 392, 117, 393, 0,
	118, 0, 0, 119, 0, 120, 121, 122, 123, 124,
	394, 125, 126, 129, 127, 568, 128, 593, 621, 130,
	641, 131, 132, 0, 0, 0, 0, 0, 133, 218,
	395, 134, 396, 615, 135, 136, 137, 0, 616, 138,
	221, 139, 0, 140, 141, 142, 642, 143, 144, 0,
	146, 147, 145, 148, 0, 149, 397, 150, 151, 582,
	152, 0, 153, 154, 155, 0, 224, 156, 157, 610,
	158, 159, 398, 160, 643, 226, 161, 0, 167, 162,
	163, 164, 166, 644, 165, 617, 0, 168, 0, 169,
	170, 0, 229, 645, 646, 0, 0, 171, 618, 619,
	591, 172, 173, 174, 175, 0, 0, 176, 177, 178,
	611, 0, 179, 180, 181, 234, 647, 0, 0, 182,
	0, 0, 0, 0, 183, 184, 185, 186, 569, 0,
	0, 0, 0, 597, 586, 587, 584, 585, 573, 565,
	566, 0, 0, 0, 0, 567, 898, 1143, 574, 74,
	75, 0, 76, 0, 0, 0, 0, 613, 579, 0,
	0, 0, 77, 78, 188, 627, 190, 628, 79, 629,
	630, 0, 80, 194, 195, 81, 594, 612, 631, 632,
	198, 0, 623, 0, 605, 0, 82, 83, 84, 0,
	85, 0, 86, 87, 88, 0, 386, 89, 90, 0,
	606, 608, 0, 607, 609, 91, 92, 93, 94, 633,
	95, 634, 635, 0, 96, 0, 97, 0, 0, 0,
	626, 99, 0, 100, 0, 0, 0, 578, 101, 102,
	614, 592, 0, 0, 103, 104, 636, 0, 105, 0,
	106, 0, 0, 387, 0, 107, 624, 0, 207, 0,
	108, 109, 110, 620, 622, 389, 0, 113, 0, 111,
	0, 388, 112, 637, 638, 639, 640, 0, 604, 0,
	390, 114, 391, 115, 116, 0, 0, 625, 392, 117,
	393, 0, 118, 0, 0, 119, 0, 120, 121, 122,
	123, 124, 394, 125, 126, 129, 127, 568, 128, 593,
	621, 130, 641, 131, 132, 0, 0, 0, 0, 0,
	133, 218, 395, 134, 396, 615, 135, 136, 137, 0,
	616, 138, 221, 139, 0, 140, 141, 142, 642, 143,
	144, 0, 146, 147, 145, 148, 0, 149, 397, 150,
	151, 582, 152, 0, 153, 154, 155, 0, 224, 156,
	157, 610, 158, 159, 398, 160, 643, 226, 161, 0,
	167, 162, 163, 164, 166, 644, 165, 617, 0, 168,
	0, 169, 170, 0, 229, 645, 646, 0, 0, 171,
	618, 619, 591, 172, 173, 174, 175, 0, 0, 176,
	177, 178, 611, 0, 179, 180, 181, 234, 647, 0,
	0, 182, 0, 0, 0, 0, 183, 184, 185, 186,
	569, 0, 597, 586, 587, 584, 585, 573, 0, 0,
	0, 565, 566, 563, 0, 0, 0, 567, 74, 75,
	574, 76, 0, 0, 0, 0, 613, 579, 0, 0,
	0, 77, 78, 188, 627, 190, 628, 79, 629, 630,
	0, 80, 194, 195, 81, 594, 612, 631, 632, 198,
	0, 623, 0, 605, 0, 82, 83, 84, 0, 85,
	0, 86, 87, 88, 0, 386, 89, 90, 0, 606,
	608, 0, 607, 609, 91, 92, 93, 94, 633, 95,
	634, 635, 0, 96, 0, 97, 0, 0, 0, 626,
	99, 0, 100, 0, 0, 0, 578, 101, 102, 614,
	592, 0, 0, 103, 104, 636, 0, 105, 0, 106,
	0, 0, 387, 0, 107, 624, 0, 207, 0, 108,
	109, 110, 620, 622, 389, 0, 113, 0, 111, 0,
	388, 112, 637, 638, 639, 640, 0, 604, 0, 390,
	114, 391, 115, 116, 0, 0, 625, 392, 117, 393,
	0, 118, 0, 0, 119, 0, 120, 121, 122, 123,
	124, 394, 125, 126, 129, 127, 568, 128, 593, 621,
	130, 641, 131, 132, 0, 0, 0, 0, 0, 133,
	218, 395, 134, 396, 615, 135, 136, 137, 0, 616,
	138, 221, 139, 0, 140, 141, 142, 642, 143, 144,
	0, 146, 147, 145, 148, 0, 149, 397, 150, 151,
	582, 152, 0, 153, 154, 155, 0, 224, 156, 157,
	610, 158, 159, 398, 160, 643, 226, 161, 0, 167,
	162, 163, 164, 166, 644, 165, 617, 0, 168, 0,
	169, 170, 0, 229, 645, 646, 0, 0, 171, 618,
	619, 591, 172, 173, 174, 175, 0, 0, 176, 177,
	178, 611, 0, 179, 180, 181, 234, 647, 1525, 0,
	182, 0, 0, 0, 0, 183, 184, 185, 186, 569,
	0, 597, 586, 587, 584, 585, 573, 0, 0, 0,
	565, 566, 0, 0, 0, 0, 567, 74, 75, 574,
	76, 0, 0, 0, 0, 613, 579, 0, 0, 0,
	77, 78, 188, 627, 190, 628, 79, 629, 630, 0,
	80, 194, 195, 81, 594, 612, 631, 632, 198, 0,
	623, 0, 605, 0, 82, 83, 84, 0, 85, 0,
	86, 87, 88, 0, 386, 89, 90, 0, 606, 608,
	0, 607, 609, 91, 92, 93, 94, 633, 95, 634,
	635, 662, 96, 0, 97, 0, 0, 0, 626, 99,
	0, 100, 0, 0, 0, 578, 101, 102, 614, 592,
	0, 0, 103, 104, 636, 0, 105, 0, 106, 0,
	0, 387, 0, 107, 624, 0, 207, 0, 108, 109,
	110, 620, 622, 389, 0, 113, 0, 111, 0, 388,
	112, 637, 638, 639, 640, 0, 604, 0, 390, 114,
	391, 115, 116, 0, 0, 625, 392, 117, 393, 0,
	118, 0, 0, 119, 0, 120, 121, 122, 123, 124,
	394, 125, 126, 129, 127, 568, 128, 593, 621, 130,
	641, 131, 132, 0, 0, 0, 0, 0, 133, 218,
	395, 134, 396, 615, 135, 136, 137, 0, 616, 138,
	221, 139, 0, 140, 141, 142, 642, 143, 144, 0,
	146, 147, 145, 148, 0, 149, 397, 150, 151, 582,
	152, 0, 153, 154, 155, 0, 224, 156, 157, 610,
	158, 159, 398, 160, 643, 226, 161, 0, 167, 162,
	163, 164, 166, 644, 165, 617, 0, 168, 0, 169,
	170, 0, 229, 645, 646, 0, 0, 171, 618, 619,
	591, 172, 173, 174, 175, 0, 0, 176, 177, 178,
	611, 0, 179, 180, 181, 234, 647, 0, 0, 182,
	0, 0, 0, 0, 183, 184, 185, 186, 569, 0,
	597, 586, 587, 584, 585, 573, 0, 0, 0, 565,
	566, 0, 0, 0, 0, 567, 74, 75, 574, 76,
	0, 0, 0, 0, 613, 579, 0, 0, 0, 77,
	78, 188, 627, 190, 628, 79, 629, 630, 0, 80,
	194, 195, 81, 594, 612, 631, 632, 198, 0, 623,
	0, 605, 0, 82, 83, 84, 0, 85, 0, 86,
	87, 88, 0, 386, 89, 90, 0, 606, 608, 0,
	607, 609, 91, 92, 93, 94, 633, 95, 634, 635,
	0, 96, 0, 97, 0, 0, 0, 626, 99, 0,
	100, 0, 0, 0, 578, 101, 102, 614, 592, 0,
	0, 103, 104, 636, 0, 105, 0, 106, 0, 1194,
	387, 0, 107, 624, 0, 207, 0, 108, 109, 110,
	620, 622, 389, 0, 113, 0, 111, 0, 388, 112,
	637, 638, 639, 640, 0, 604, 0, 390, 114, 391,
	115, 116, 0, 0, 625, 392, 117, 393, 0, 118,
	0, 0, 119, 0, 120, 121, 122, 123, 124, 394,
	125, 126, 129, 127, 568, 128, 593, 621, 130, 641,
	131, 132, 0, 0, 0, 0, 0, 133, 218, 395,
	134, 396, 615, 135, 136, 137, 0, 616, 138, 221,
	139, 0, 140, 141, 142, 642, 143, 144, 0, 146,
	147, 145, 148, 0, 149, 397, 150, 151, 582, 152,
	0, 153, 154, 155, 0, 224, 156, 157, 610, 158,
	159, 398, 160, 643, 226, 161, 0, 167, 162, 163,
	164, 166, 644, 165, 617, 0, 168, 0, 169, 170,
	0, 229, 645, 646, 0, 0, 171, 618, 619, 591,
	172, 173, 174, 175, 0, 0, 176, 177, 178, 611,
	0, 179, 180, 181, 234, 647, 0, 0, 182, 0,
	0, 0, 0, 183, 184, 185, 186, 569, 0, 0,
	0, 0, 597, 586, 587, 584, 585, 573, 565, 566,
	0, 0, 0, 0, 567, 0, 0, 574, 74, 75,
	832, 76, 0, 0, 0, 0, 613, 579, 0, 0,
	0, 77, 78, 188, 627, 190, 628, 79, 629, 630,
	0, 80, 194, 195, 81, 594, 612, 631, 632, 198,
	0, 623, 0, 605, 0, 82, 83, 84, 0, 85,
	0, 86, 87, 88, 0, 386, 89, 90, 0, 606,
	608, 0, 607, 609, 91, 92, 93, 94, 633, 95,
	634, 635, 0, 96, 0, 97, 0, 0, 0, 626,
	99, 0, 100, 0, 0, 0, 578, 101, 102, 614,
	592, 0, 0, 103, 104, 636, 0, 105, 0, 106,
	0, 0, 387, 0, 107, 624, 0, 207, 0, 108,
	109, 110, 620, 622, 389, 0, 113, 0, 111, 0,
	388, 112, 637, 638, 639, 640, 0, 604, 0, 390,
	114, 391, 115, 116, 0, 0, 625, 392, 117, 393,
	0, 118, 0, 0, 119, 0, 120, 121, 122, 123,
	124, 394, 125, 126, 129, 127, 568, 128, 593, 621,
	130, 641, 131, 132, 0, 0, 0, 0, 0, 133,
	218, 395, 134, 396, 615, 135, 136, 137, 0, 616,
	138, 221, 139, 0, 140, 141, 142, 642, 143, 144,
	0, 146, 147, 145, 148, 0, 149, 397, 150, 151,
	582, 152, 0, 153, 154, 155, 0, 224, 156, 157,
	610, 158, 159, 398, 160, 643, 226, 161, 0, 167,
	162, 163, 164, 166, 644, 165, 617, 0, 168, 0,
	169, 170, 0, 229, 645, 646, 0, 0, 171, 618,
	619, 591, 172, 173, 174, 175, 0, 0, 176, 177,
	178, 611, 0, 179, 180, 181, 234, 647, 0, 0,
	182, 0, 0, 0, 0, 183, 184, 185, 186, 569,
	0, 597, 586, 587, 584, 585, 573, 0, 0, 0,
	565, 566, 0, 0, 0, 0, 567, 74, 75, 574,
	76, 0, 0, 0, 0, 613, 579, 0, 0, 0,
	77, 78, 188, 627, 190, 628, 79, 629, 630, 0,
	80, 194, 195, 81, 594, 612, 631, 632, 198, 0,
	623, 0, 605, 0, 82, 83, 84, 0, 85, 0,
	86, 87, 88, 0, 386, 89, 1866, 0, 606, 608,
	0, 607, 609, 91, 92, 93, 94, 633, 95, 634,
	635, 0, 96, 0, 97, 0, 0, 0, 626, 99,
	0, 100, 0, 0, 0, 578, 101, 102, 614, 592,
	0, 0, 103, 104, 636, 0, 105, 0, 106, 0,
	0, 387, 0, 107, 624, 0, 207, 0, 108, 109,
	110, 620, 622, 389, 0, 113, 0, 111, 0, 388,
	112, 637, 638, 639, 640, 0, 604, 0, 390, 114,
	391, 115, 116, 0, 0, 625, 392, 117, 393, 0,
	118, 0, 0, 119, 0, 120, 121, 122, 123, 124,
	394, 125, 126, 129, 127, 568, 128, 593, 621, 130,
	641, 131, 132, 0, 0, 0, 0, 0, 133, 218,
	395, 134, 396, 615, 135, 136, 137, 0, 616, 138,
	221, 139, 0, 140, 141, 142, 642, 143, 144, 0,
	146, 147, 145, 148, 0, 149, 397, 150, 151, 582,
	152, 0, 153, 154, 155, 0, 224, 156, 157, 610,
	158, 159, 398, 160, 643, 226, 161, 0, 167, 162,
	163, 164, 166, 644, 165, 617, 0, 168, 0, 169,
	170, 0, 229, 645, 646, 0, 0, 171, 618, 619,
	591, 172, 173, 1865, 175, 0, 0, 176, 177, 178,
	611, 0, 179, 180, 181, 234, 647, 0, 0, 182,
	0, 0, 0, 0, 183, 184, 185, 186, 569, 0,
	597, 586, 587, 584, 585, 573, 0, 0, 0, 565,
	566, 0, 0, 0, 0, 567, 74, 75, 574, 76,
	0, 0, 0, 0, 613, 579, 0, 0, 0, 77,
	78, 1864, 627, 190, 628, 79, 629, 630, 0, 80,
	194, 195, 81, 594, 612, 631, 632, 198, 0, 623,
	0, 605, 0, 82, 83, 84, 0, 85, 0, 86,
	87, 88, 0, 386, 89, 1866, 0, 606, 608, 0,
	607, 609, 91, 92, 93, 94, 633, 95, 634, 635,
	0, 96, 0, 97, 0, 0, 0, 626, 99, 0,
	100, 0, 0, 0, 578, 101, 102, 614, 592, 0,
	0, 103, 104, 636, 0, 105, 0, 106, 0, 0,
	387, 0, 107, 624, 0, 207, 0, 108, 109, 110,
	620, 622, 389, 0, 113, 0, 111, 0, 388, 112,
	637, 638, 639, 640, 0, 604, 0, 390, 114, 391,
	115, 116, 0, 0, 625, 392, 117, 393, 0, 118,
	0, 0, 119, 0, 120, 121, 122, 123, 124, 394,
	125, 126, 129, 127, 568, 128, 593, 621, 130, 641,
	131, 132, 0, 0, 0, 0, 0, 133, 218, 395,
	134, 396, 615, 135, 136, 137, 0, 616, 138, 221,
	139, 0, 140, 141, 142, 642, 143, 144, 0, 146,
	147, 145, 148, 0, 149, 397, 150, 151, 582, 152,
	0, 153, 154, 155, 0, 224, 156, 157, 610, 158,
	159, 398, 160, 643, 226, 161, 0, 167, 162, 163,
	164, 166, 644, 165, 617, 0, 168, 0, 169, 170,
	0, 229, 645, 646, 0, 0, 171, 618, 619, 591,
	172, 173, 1865, 175, 0, 0, 176, 177, 178, 611,
	0, 179, 180, 181, 234, 647, 0, 0, 182, 0,
	0, 0, 0, 183, 184, 185, 186, 569, 0, 597,
	586, 587, 584, 585, 573, 0, 0, 0, 565, 566,
	0, 0, 0, 0, 567, 74, 75, 574, 76, 0,
	0, 0, 0, 613, 579, 0, 0, 0, 77, 78,
	188, 627, 190, 628, 79, 629, 630, 0, 80, 194,
	195, 81, 594, 612, 631, 632, 198, 0, 623, 0,
	605, 0, 82, 83, 84, 0, 85, 0, 86, 87,
	88, 0, 386, 89, 90, 0, 606, 608, 0, 607,
	609, 91, 92, 93, 94, 633, 95, 634, 635, 0,
	96, 0, 97, 0, 0, 0, 626, 99, 0, 100,
	0, 0, 0, 578, 101, 102, 614, 592, 0, 0,
	103, 104, 636, 0, 105, 0, 106, 0, 0, 387,
	0, 107, 624, 0, 207, 0, 108, 109, 110, 620,
	622, 389, 0, 113, 0, 111, 0, 388, 112, 637,
	638, 639, 640, 0, 604, 0, 390, 114, 391, 115,
	116, 0, 0, 625, 392, 117, 393, 0, 118, 0,
	0, 119, 0, 120, 121, 122, 123, 124, 394, 125,
	126, 129, 127, 568, 128, 593, 621, 130, 641, 131,
	132, 0, 0, 0, 0, 0, 133, 218, 395, 134,
	396, 615, 135, 136, 137, 0, 616, 138, 221, 139,
	0, 140, 141, 142, 642, 143, 144, 0, 146, 147,
	145, 148, 0, 149, 397, 150, 151, 582, 152, 0,
	153, 154, 155, 0, 224, 156, 157, 610, 158, 159,
	398, 160, 643, 226, 161, 0, 167, 162, 163, 164,
	166, 644, 165, 617, 0, 168, 0, 169, 170, 0,
	229, 645, 646, 0, 0, 171, 618, 619, 591, 172,
	173, 174, 175, 0, 0, 176, 177, 178, 611, 0,
	179, 180, 181, 234, 647, 0, 0, 182, 0, 0,
	0, 0, 183, 184, 185, 186, 569, 0, 597, 586,
	587, 584, 585, 573, 0, 0, 0, 565, 566, 0,
	0, 0, 0, 567, 74, 75, 574, 76, 0, 0,
	0, 0, 613, 579, 0, 0, 0, 77, 78, 188,
	627, 190, 628, 79, 629, 630, 0, 80, 194, 195,
	81, 594, 612, 631, 632, 198, 0, 623, 0, 605,
	0, 82, 83, 84, 0, 85, 0, 86, 87, 88,
	0, 386, 89, 90, 0, 606, 608, 0, 607, 609,
	91, 92, 93, 94, 633, 95, 634, 635, 0, 96,
	0, 97, 0, 0, 0, 626, 99, 0, 100, 0,
	0, 0, 578, 101, 102, 614, 592, 0, 0, 103,
	104, 636, 0, 105, 0, 106, 0, 0, 387, 0,
	107, 624, 0, 207, 0, 108, 109, 110, 620, 622,
	389, 0, 113, 0, 111, 0, 388, 112, 637, 638,
	639, 640, 0, 604, 0, 390, 114, 391, 115, 116,
	0, 0, 625, 392, 117, 393, 0, 118, 0, 0,
	119, 0, 120, 121, 122, 123, 124, 394, 125, 126,
	129, 127, 0, 128, 593, 621, 130, 641, 131, 132,
	0, 0, 0, 0, 0, 133, 218, 395, 134, 396,
	615, 135, 136, 137, 0, 616, 138, 221, 139, 0,
	140, 141, 142, 642, 143, 144, 0, 146, 147, 145,
	148, 0, 149, 397, 150, 151, 1184, 152, 0, 153,
	154, 155, 0, 224, 156, 157, 610, 158, 159, 398,
	160, 643, 226, 161, 0, 167, 162, 163, 164, 166,
	644, 165, 617, 0, 168, 0, 169, 170, 0, 229,
	645, 646, 0, 0, 171, 618, 619, 591, 172, 173,
	174, 175, 0, 0, 176, 177, 178, 611, 0, 179,
	180, 181, 234, 647, 0, 0, 182, 0, 0, 0,
	0, 183, 184, 185, 186, 0, 0, 597, 586, 587,
	584, 585, 573, 0, 0, 0, 1180, 1181, 0, 0,
	0, 0, 1182, 74, 75, 1183, 76, 0, 0, 0,
	0, 613, 579, 0, 0, 0, 77, 78, 0, 627,
	190, 628, 79, 629, 630, 0, 80, 194, 195, 81,
	594, 612, 631, 632, 198, 0, 623, 0, 605, 0,
	82, 83, 84, 0, 85, 0, 86, 87, 88, 0,
	386, 89, 1866, 0, 606, 608, 0, 607, 609, 91,
	92, 93, 94, 633, 95, 634, 635, 0, 96, 0,
	97, 0, 0, 0, 626, 99, 0, 100, 0, 0,
	0, 578, 101, 102, 614, 592, 0, 0, 103, 104,
	636, 0, 105, 0, 106, 0, 0, 387, 0, 107,
	624, 0, 207, 0, 108, 109, 110, 620, 622, 0,
	0, 113, 0, 111, 0, 388, 112, 637, 638, 639,
	640, 0, 604, 0, 0, 114, 391, 115, 116, 0,
	0, 625, 392, 117, 0, 0, 118, 0, 0, 119,
	0, 120, 121, 122, 123, 124, 394, 125, 126, 129,
	127, 568, 128, 593, 621, 130, 641, 131, 132, 0,
	0, 0, 0, 0, 133, 218, 395, 134, 396, 615,
	135, 136, 137, 0, 616, 138, 221, 139, 0, 140,
	141, 142, 642, 143, 144, 0, 146, 147, 145, 148,
	0, 149, 397, 150, 151, 582, 152, 0, 153, 154,
	155, 0, 224, 156, 157, 610, 158, 159, 0, 160,
	643, 226, 161, 0, 167, 162, 163, 164, 166, 644,
	165, 617, 0, 168, 0, 169, 170, 0, 229, 645,
	646, 0, 0, 171, 618, 619, 591, 172, 173, 1865,
	175, 0, 0, 176, 177, 178, 611, 0, 179, 180,
	181, 234, 647, 0, 0, 182, 0, 0, 0, 0,
	183, 184, 185, 186, 0, 0, 597, 0, 0, 0,
	0, 0, 0, 0, 0, 565, 566, 0, 0, 0,
	0, 567, 74, 75, 574, 76, 0, 0, 0, 0,
	613, 0, 0, 0, 0, 77, 78, 188, 189, 190,
	191, 79, 192, 193, 0, 80, 194, 195, 81, 0,
	612, 196, 197, 198, 0, 623, 0, 605, 0, 82,
	83, 84, 0, 85, 0, 86, 87, 88, 0, 386,
	89, 90, 0, 606, 608, 0, 607, 609, 91, 92,
	93, 94, 200, 95, 201, 202, 0, 96, 0, 97,
	0, 0, 0, 98, 99, 0, 100, 0, 0, 0,
	203, 101, 102, 614, 0, 0, 0, 103, 104, 205,
	0, 105, 0, 106, 0, 0, 387, 0, 107, 624,
	0, 207, 0, 108, 109, 110, 620, 622, 389, 0,
	113, 0, 111, 0, 388, 112, 210, 211, 212, 213,
	0, 214, 0, 390, 114, 391, 115, 116, 0, 0,
	625, 392, 117, 393, 0, 118, 0, 0, 119, 0,
	120, 121, 122, 123, 124, 394, 125, 126, 129, 127,
	0, 128, 0, 621, 130, 217, 131, 132, 0, 0,
	0, 0, 0, 133, 218, 395, 134, 396, 615, 135,
	136, 137, 0, 616, 138, 221, 139, 0, 140, 141,
	142, 222, 143, 144, 0, 146, 147, 145, 148, 0,
	149, 397, 150, 151, 223, 152, 0, 153, 154, 155,
	0, 224, 156, 157, 610, 158, 159, 398, 160, 225,
	226, 161, 0, 167, 162, 163, 164, 166, 227, 165,
	617, 0, 168, 0, 169, 170, 0, 229, 230, 231,
	0, 0, 171, 618, 619, 0, 172, 173, 174, 175,
	0, 0, 176, 177, 178, 611, 0, 179, 180, 181,
	234, 235, 0, 0, 182, 380, 0, 0, 0, 183,
	184, 185, 186, 0, 0, 0, 0, 0, 0, 0,
	0, 74, 75, 0, 76, 0, 0, 0, 0, 187,
	0, 0, 0, 1637, 77, 78, 188, 189, 190, 191,
	79, 192, 193, 0, 80, 194, 195, 81, 0, 0,
	196, 197, 198, 0, 199, 0, 385, 0, 82, 83,
	84, 0, 85, 0, 86, 87, 88, 0, 386, 89,
	90, 0, 0, 0, 0, 0, 0, 91, 92, 93,
	94, 200, 95, 201, 202, 0, 96, 0, 97, 0,
	0, 0, 98, 99, 0, 100, 0, 0, 0, 203,
	101, 102, 204, 0, 0, 0, 103, 104, 205, 0,
	105, 0, 106, 0, 0, 387, 0, 107, 206, 0,
	207, 0, 108, 109, 110, 208, 209, 389, 0, 113,
	0, 111, 0, 388, 112, 210, 211, 212, 213, 0,
	214, 0, 390, 114, 391, 115, 116, 0, 0, 215,
	392, 117, 393, 0, 118, 0, 0, 119, 0, 120,
	121, 122, 123, 124, 394, 125, 126, 129, 127, 0,
	128, 0, 216, 130, 217, 131, 132, 0, 0, 0,
	0, 0, 133, 218, 395, 134, 396, 219, 135, 136,
	137, 0, 220, 138, 221, 139, 0, 140, 141, 142,
	222, 143, 144, 0, 146, 147, 145, 148, 0, 149,
	397, 150, 151, 223, 152, 0, 153, 154, 155, 61,
	224, 156, 157, 0, 158, 159, 398, 160, 225, 226,
	161, 0, 167, 162, 163, 164, 166, 227, 165, 228,
	0, 168, 63, 169, 170, 0, 229, 230, 231, 0,
	0, 171, 232, 233, 0, 172, 173, 174, 175, 0,
	0, 176, 177, 178, 0, 0, 179, 180, 181, 384,
	235, 0, 0, 182, 0, 0, 0, 59, 183, 184,
	185, 186, 0, 60, 380, 784, 0, 785, 780, 775,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	74, 75, 58, 76, 0, 0, 0, 0, 187, 0,
	0, 0, 0, 77, 78, 188, 189, 190, 191, 79,
	192, 193, 0, 80, 194, 195, 81, 0, 0, 196,
	197, 198, 0, 199, 0, 385, 0, 82, 83, 84,
	0, 85, 0, 86, 87, 88, 0, 386, 89, 90,
	0, 0, 0, 0, 0, 0, 91, 92, 93, 94,
	200, 95, 201, 202, 788, 96, 0, 97, 0, 0,
	0, 98, 99, 0, 100, 0, 0, 0, 203, 101,
	102, 204, 777, 0, 0, 103, 104, 205, 0, 105,
	0, 106, 0, 0, 387, 0, 107, 206, 0, 207,
	0, 108, 109, 110, 208, 209, 389, 0, 113, 0,
	111, 0, 388, 112, 210, 211, 212, 213, 0, 214,
	0, 390, 114, 391, 115, 116, 0, 0, 215, 392,
	117, 393, 0, 118, 0, 0, 119, 0, 120, 121,
	122, 123, 124, 394, 125, 126, 129, 127, 0, 128,
	0, 216, 130, 217, 131, 132, 0, 778, 0, 0,
	0, 133, 218, 395, 134, 396, 219, 135, 136, 137,
	0, 220, 138, 221, 139, 0, 140, 141, 142, 222,
	143, 144, 0, 146, 147, 145, 148, 0, 149, 397,
	150, 151, 223, 152, 0, 153, 154, 155, 0, 224,
	156, 157, 0, 158, 159, 398, 160, 225, 226, 161,
	0, 167, 162, 163, 164, 166, 227, 165, 228, 0,
	168, 0, 169, 170, 0, 229, 230, 231, 0, 0,
	171, 232, 233, 776, 172, 173, 174, 175, 0, 0,
	176, 177, 178, 0, 0, 179, 180, 181, 234, 235,
	380, 784, 182, 785, 780, 775, 0, 183, 184, 185,
	186, 0, 0, 0, 0, 0, 74, 75, 0, 76,
	0, 0, 786, 781, 187, 0, 0, 0, 0, 77,
	78, 188, 189, 190, 191, 79, 192, 193, 0, 80,
	194, 195, 81, 0, 0, 196, 197, 198, 0, 199,
	0, 385, 0, 82, 83, 84, 0, 85, 0, 86,
	87, 88, 0, 386, 89, 90, 0, 0, 0, 0,
	0, 0, 91, 92, 93, 94, 200, 95, 201, 202,
	771, 96, 0, 97, 0, 0, 0, 98, 99, 0,
	100, 0, 0, 0, 203, 101, 102, 204, 777, 0,
	0, 103, 104, 205, 0, 105, 0, 106, 0, 0,
	387, 0, 107, 206, 0, 207, 0, 108, 109, 110,
	208, 209, 389, 0, 113, 0, 111, 0, 388, 112,
	210, 211, 212, 213, 0, 214, 0, 390, 114, 391,
	115, 116, 0, 0, 215, 392, 117, 393, 0, 118,
	0, 0, 119, 0, 120, 121, 122, 123, 124, 394,
	125, 126, 129, 127, 0, 128, 0, 216, 130, 217,
	131, 132, 0, 778, 0, 0, 0, 133, 218, 395,
	134, 396, 219, 135, 136, 137, 0, 220, 138, 221,
	139, 0, 140, 141, 142, 222, 143, 144, 0, 146,
	147, 145, 148, 0, 149, 397, 150, 151, 223, 152,
	0, 153, 154, 155, 0, 224, 156, 157, 0, 158,
	159, 398, 160, 225, 226, 161, 0, 167, 162, 163,
	164, 166, 227, 165, 228, 0, 168, 0, 169, 170,
	0, 229, 230, 231, 0, 0, 171, 232, 233, 776,
	172, 173, 174, 175, 0, 0, 176, 177, 178, 0,
	0, 179, 180, 181, 234, 235, 380, 784, 182, 785,
	780, 775, 0, 183, 184, 185, 186, 0, 0, 0,
	0, 0, 74, 75, 0, 76, 0, 0, 786, 781,
	187, 0, 0, 0, 0, 77, 78, 188, 189, 190,
	191, 79, 192, 193, 0, 80, 194, 195, 81, 0,
	0, 196, 197, 198, 0, 199, 0, 385, 0, 82,
	83, 84, 0, 85, 0, 86, 87, 88, 0, 386,
	89, 90, 0, 0, 0, 0, 0, 0, 91, 92,
	93, 94, 200, 95, 201, 202, 0, 96, 0, 97,
	0, 0, 0, 98, 99, 0, 100, 0, 0, 0,
	203, 101, 102, 204, 777, 0, 0, 103, 104, 205,
	0, 105, 0, 106, 0, 0, 387, 0, 107, 206,
	0, 207, 0, 108, 109, 110, 208, 209, 389, 0,
	113, 0, 111, 0, 388, 112, 210, 211, 212, 213,
	0, 214, 0, 390, 114, 391, 115, 116, 0, 0,
	215, 392, 117, 393, 0, 118, 0, 0, 119, 0,
	120, 121, 122, 123, 124, 394, 125, 126, 129, 127,
	0, 128, 0, 216, 130, 217, 131, 132, 0, 778,
	0, 0, 0, 133, 218, 395, 134, 396, 219, 135,
	136, 137, 0, 220, 138, 221, 139, 0, 140, 141,
	142, 222, 143, 144, 0, 146, 147, 145, 148, 0,
	149, 397, 150, 151, 223, 152, 0, 153, 154, 155,
	0, 224, 156, 157, 0, 158, 159, 398, 160, 225,
	226, 161, 0, 167, 162, 163, 164, 166, 227, 165,
	228, 0, 168, 0, 169, 170, 0, 229, 230, 231,
	0, 0, 171, 232, 233, 776, 172, 173, 174, 175,
	0, 0, 176, 177, 178, 0, 0, 179, 180, 181,
	234, 235, 71, 0, 182, 0, 0, 0, 0, 183,
	184, 185, 186, 0, 0, 0, 0, 0, 74, 75,
	0, 76, 0, 0, 786, 781, 187, 0, 0, 0,
	0, 77, 78, 188, 189, 190, 191, 79, 192, 193,
	0, 80, 194, 195, 81, 0, 0, 196, 197, 198,
	0, 199, 0, 0, 0, 82, 83, 84, 0, 85,
	0, 86, 87, 88, 0, 0, 89, 90, 0, 0,
	0, 0, 0, 0, 91, 92, 93, 94, 200, 95,
	201, 202, 0, 96, 0, 97, 0, 0, 0, 98,
	99, 0, 100, 0, 0, 0, 203, 101, 102, 204,
	0, 0, 0, 103, 104, 205, 0, 105, 0, 106,
	0, 0, 0, 0, 107, 206, 0, 207, 0, 108,
	109, 110, 208, 209, 0, 0, 113, 0, 111, 0,
	0, 112, 210, 211, 212, 213, 0, 214, 0, 0,
	114, 0, 115, 116, 0, 0, 215, 0, 117, 0,
	0, 118, 0, 0, 119, 0, 120, 121, 122, 123,
	124, 0, 125, 126, 129, 127, 0, 128, 0, 216,
	130, 217, 131, 132, 0, 0, 343, 0, 0, 133,
	218, 0, 134, 0, 219, 135, 136, 137, 0, 220,
	138, 221, 139, 0, 140, 141, 142, 222, 143, 144,
	0, 146, 147, 145, 148, 0, 149, 0, 150, 151,
	223, 152, 0, 153, 154, 155, 61, 224, 156, 157,
	0, 158, 159, 0, 160, 225, 226, 161, 0, 167,
	162, 163, 164, 166, 227, 165, 228, 0, 168, 63,
	169, 170, 0, 229, 230, 231, 0, 0, 171, 232,
	233, 0, 172, 173, 174, 175, 0, 0, 176, 177,
	178, 0, 0, 179, 180, 181, 384, 235, 0, 0,
	182, 71, 0, 0, 59, 183, 184, 185, 186, 0,
	60, 0, 0, 0, 0, 0, 0, 74, 75, 0,
	76, 0, 0, 0, 0, 187, 0, 0, 0, 1084,
	77, 78, 188, 189, 190, 191, 79, 192, 193, 0,
	80, 194, 195, 81, 0, 0, 196, 197, 198, 0,
	199, 0, 0, 0, 82, 83, 84, 0, 85, 0,
	86, 87, 88, 0, 0, 89, 90, 0, 0, 0,
	0, 0, 0, 91, 92, 93, 94, 200, 95, 201,
	202, 0, 96, 0, 97, 0, 0, 0, 98, 99,
	0, 100, 0, 0, 0, 203, 101, 102, 204, 0,
	0, 0, 103, 104, 205, 0, 105, 0, 106, 0,
	0, 0, 0, 107, 206, 0, 207, 0, 108, 109,
	110, 208, 209, 0, 0, 113, 0, 111, 0, 0,
	112, 210, 211, 212, 213, 0, 214, 0, 0, 114,
	0, 115, 116, 0, 0, 215, 0, 117, 0, 0,
	118, 0, 0, 119, 0, 120, 121, 122, 123, 124,
	0, 125, 126, 129, 127, 0, 128, 0, 216, 130,
	217, 131, 132, 0, 0, 0, 0, 0, 133, 218,
	0, 134, 0, 219, 135, 136, 137, 0, 220, 138,
	221, 139, 0, 140, 141, 142, 222, 143, 144, 0,
	146, 147, 145, 148, 0, 149, 0, 150, 151, 223,
	152, 0, 153, 154, 155, 61, 224, 156, 157, 0,
	158, 159, 0, 160, 225, 226, 161, 0, 167, 162,
	163, 164, 166, 227, 165, 228, 0, 168, 63, 169,
	170, 0, 229, 230, 231, 0, 0, 171, 232, 233,
	0, 172, 173, 174, 175, 0, 0, 176, 177, 178,
	0, 0, 179, 180, 181, 384, 235, 0, 0, 182,
	71, 0, 0, 59, 183, 184, 185, 186, 0, 60,
	0, 0, 0, 0, 0, 0, 74, 75, 0, 76,
	0, 0, 0, 0, 187, 0, 1316, 0, 58, 77,
	78, 188, 189, 190, 191, 79, 192, 193, 0, 80,
	194, 195, 81, 0, 0, 196, 197, 198, 0, 199,
	0, 0, 0, 82, 83, 84, 0, 85, 0, 86,
	87, 88, 0, 0, 89, 90, 0, 0, 0, 0,
	0, 0, 91, 92, 93, 94, 200, 95, 201, 202,
	0, 96, 0, 97, 0, 0, 0, 98, 99, 0,
	100, 0, 0, 0, 203, 101, 102, 204, 0, 0,
	0, 103, 104, 205, 0, 105, 0, 106, 0, 0,
	0, 0, 107, 206, 0, 207, 0, 108, 109, 110,
	208, 209, 0, 0, 113, 0, 111, 0, 0, 112,
	210, 211, 212, 213, 0, 214, 0, 0, 114, 0,
	115, 116, 0, 0, 215, 0, 117, 0, 0, 118,
	0, 0, 119, 0, 120, 121, 122, 123, 124, 0,
	125, 126, 129, 127, 0, 128, 0, 216, 130, 217,
	131, 132, 0, 0, 0, 0, 0, 133, 218, 0,
	134, 0, 219, 135, 136, 137, 0, 220, 138, 221,
	139, 0, 140, 141, 142, 222, 143, 144, 0, 146,
	147, 145, 148, 0, 149, 0, 150, 151, 223, 152,
	0, 153, 154, 155, 0, 224, 156, 157, 0, 158,
	159, 0, 160, 225, 226, 161, 0, 167, 162, 163,
	164, 166, 227, 165, 228, 0, 168, 0, 169, 170,
	0, 229, 230, 231, 0, 0, 171, 232, 233, 0,
	172, 173, 174, 175, 0, 0, 176, 177, 178, 0,
	0, 179, 180, 181, 234, 235, 0, 0, 182, 0,
	71, 0, 0, 183, 184, 185, 186, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 74, 75, 0, 76,
	0, 0, 0, 0, 187, 0, 0, 0, 555, 77,
	78, 188, 189, 190, 191, 79, 192, 193, 0, 80,
	194, 195, 81, 0, 0, 196, 197, 198, 0, 199,
	0, 0, 0, 82, 83, 84, 0, 85, 0, 86,
	87, 88, 0, 0, 89, 90, 0, 0, 0, 0,
	0, 0, 91, 92, 93, 94, 200, 95, 201, 202,
	0, 96, 0, 97, 0, 0, 0, 98, 99, 0,
	100, 0, 0, 0, 203, 101, 102, 204, 0, 0,
	0, 103, 104, 205, 0, 105, 0, 106, 0, 0,
	0, 0, 107, 206, 0, 207, 0, 108, 109, 110,
	208, 209, 0, 0, 113, 0, 111, 0, 0, 112,
	210, 211, 212, 213, 0, 214, 0, 0, 114, 0,
	115, 116, 0, 0, 215, 0, 117, 0, 0, 118,
	0, 0, 119, 0, 120, 121, 122, 123, 124, 0,
	125, 126, 129, 127, 0, 128, 0, 216, 130, 217,
	131, 132, 0, 0, 343, 0, 0, 133, 218, 0,
	134, 0, 219, 135, 136, 137, 0, 220, 138, 221,
	139, 0, 140, 141, 142, 222, 143, 144, 0, 146,
	147, 145, 148, 0, 149, 0, 150, 151, 223, 152,
	0, 153, 154, 155, 0, 224, 156, 157, 0, 158,
	159, 0, 160, 225, 226, 161, 0, 167, 162, 163,
	164, 166, 227, 165, 228, 0, 168, 0, 169, 170,
	0, 229, 230, 231, 0, 0, 171, 232, 233, 0,
	172, 173, 174, 175, 0, 0, 176, 177, 178, 0,
	0, 179, 180, 181, 234, 235, 0, 0, 182, 71,
	0, 0, 0, 183, 184, 185, 186, 0, 0, 0,
	0, 0, 0, 0, 0, 74, 75, 0, 76, 0,
	0, 0, 0, 187, 0, 0, 0, 1084, 77, 78,
	188, 189, 190, 191, 79, 192, 193, 0, 80, 194,
	195, 81, 0, 0, 196, 197, 198, 0, 199, 0,
	0, 0, 82, 83, 84, 0, 85, 0, 86, 87,
	88, 0, 0, 89, 90, 0, 0, 0, 0, 0,
	0, 91, 92, 93, 94, 200, 95, 201, 202, 0,
	96, 0, 97, 0, 0, 0, 98, 99, 0, 100,
	0, 0, 0, 203, 101, 102, 204, 0, 0, 0,
	103, 104, 205, 0, 105, 0, 106, 0, 0, 0,
	0, 107, 206, 0, 207, 0, 108, 109, 110, 208,
	209, 0, 0, 113, 0, 111, 0, 0, 112, 210,
	211, 212, 213, 0, 214, 0, 0, 114, 0, 115,
	116, 0, 0, 215, 0, 117, 0, 0, 118, 0,
	0, 119, 0, 120, 121, 122, 123, 124, 0, 125,
	126, 129, 127, 0, 128, 0, 216, 130, 217, 131,
	132, 0, 0, 0, 0, 0, 133, 218, 0, 134,
	0, 219, 135, 136, 137, 0, 220, 138, 221, 139,
	0, 140, 141, 142, 222, 143, 144, 0, 146, 147,
	145, 148, 0, 149, 0, 150, 151, 223, 152, 0,
	153, 154, 155, 0, 224, 156, 157, 0, 158, 159,
	0, 160, 225, 226, 161, 0, 167, 162, 163, 164,
	166, 227, 165, 228, 0, 168, 0, 169, 170, 0,
	229, 230, 231, 0, 0, 171, 232, 233, 0, 172,
	173, 174, 175, 0, 0, 176, 177, 178, 0, 0,
	179, 180, 181, 234, 235, 0, 0, 182, 0, 71,
	0, 0, 183, 184, 185, 186, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 74, 75, 0, 76, 0,
	0, 0, 0, 187, 0, 0, 0, 678, 77, 78,
	188, 189, 190, 191, 79, 192, 193, 0, 80, 194,
	195, 81, 0, 0, 196, 197, 198, 0, 199, 0,
	0, 0, 82, 83, 84, 0, 85, 0, 86, 87,
	88, 0, 0, 89, 90, 0, 0, 0, 0, 0,
	0, 91, 92, 93, 94, 200, 95, 201, 202, 0,
	96, 0, 97, 0, 0, 0, 98, 99, 0, 100,
	0, 0, 0, 203, 101, 102, 204, 0, 0, 0,
	103, 104, 205, 0, 105, 0, 106, 0, 0, 0,
	0, 107, 206, 0, 207, 0, 108, 109, 110, 208,
	209, 0, 0, 113, 0, 111, 0, 0, 112, 210,
	211, 212, 213, 0, 214, 0, 0, 114, 0, 115,
	116, 0, 0, 215, 0, 117, 0, 0, 118, 0,
	0, 119, 0, 120, 121, 122, 123, 124, 0, 125,
	126, 129, 127, 0, 128, 0, 216, 130, 217, 131,
	132, 0, 0, 0, 0, 0, 133, 218, 0, 134,
	0, 219, 135, 136, 137, 0, 220, 138, 221, 139,
	0, 140, 141, 142, 222, 143, 144, 0, 146, 147,
	145, 148, 0, 149, 0, 150, 151, 223, 152, 0,
	153, 154, 155, 0, 224, 156, 157, 0, 158, 159,
	0, 160, 225, 226, 161, 0, 167, 162, 163, 164,
	166, 227, 165, 228, 0, 168, 0, 169, 170, 0,
	229, 230, 231, 0, 0, 171, 232, 233, 0, 172,
	173, 174, 175, 0, 0, 176, 177, 178, 0, 0,
	179, 180, 181, 234, 235, 0, 0, 182, 71, 0,
	0, 0, 183, 184, 185, 186, 0, 0, 0, 0,
	0, 0, 0, 0, 74, 75, 0, 76, 0, 0,
	0, 0, 187, 0, 0, 0, 990, 77, 78, 188,
	189, 190, 191, 79, 192, 193, 0, 80, 194, 195,
	81, 0, 0, 196, 197, 198, 0, 199, 0, 0,
	0, 82, 83, 84, 0, 85, 0, 86, 87, 88,
	0, 0, 89, 90, 0, 0, 0, 0, 0, 0,
	91, 92, 93, 94, 200, 95, 201, 202, 0, 96,
	0, 97, 0, 0, 0, 98, 99, 0, 100, 0,
	0, 0, 203, 101, 102, 204, 0, 0, 0, 103,
	104, 205, 0, 105, 0, 106, 0, 0, 0, 0,
	107, 206, 0, 207, 0, 108, 109, 110, 208, 209,
	0, 0, 113, 0, 111, 0, 0, 112, 210, 211,
	212, 213, 0, 214, 0, 0, 114, 0, 115, 116,
	0, 0, 215, 0, 117, 0, 0, 118, 0, 0,
	119, 0, 120, 121, 122, 123, 124, 0, 125, 126,
	129, 127, 0, 128, 0, 216, 130, 217, 131, 132,
	0, 0, 0, 0, 0, 133, 218, 0, 134, 0,
	219, 135, 136, 137, 0, 220, 138, 221, 139, 0,
	140, 141, 142, 222, 143, 144, 0, 146, 147, 145,
	148, 0, 149, 0, 150, 151, 223, 152, 0, 153,
	154, 155, 0, 224, 156, 157, 0, 158, 159, 0,
	160, 225, 226, 161, 0, 167, 162, 163, 164, 166,
	227, 165, 228, 0, 168, 0, 169, 170, 0, 229,
	230, 231, 0, 0, 171, 232, 233, 0, 172, 173,
	174, 175, 0, 0, 176, 177, 178, 0, 0, 179,
	180, 181, 234, 235, 0, 0, 182, 71, 0, 0,
	0, 183, 184, 185, 186, 0, 0, 0, 0, 0,
	0, 0, 0, 74, 75, 0, 76, 0, 0, 0,
	0, 187, 0, 0, 0, 1535, 77, 78, 188, 189,
	190, 191, 79, 192, 193, 0, 80, 194, 195, 81,
	0, 0, 196, 197, 198, 0, 199, 0, 0, 0,
	82, 83, 84, 0, 85, 0, 86, 87, 88, 0,
	0, 89, 90, 0, 0, 0, 0, 0, 0, 91,
	92, 93, 94, 200, 95, 201, 202, 0, 96, 0,
	97, 0, 0, 0, 98, 99, 0, 100, 0, 0,
	0, 203, 101, 102, 204, 0, 0, 0, 103, 104,
	205, 0, 105, 0, 106, 0, 0, 0, 0, 107,
	206, 0, 207, 0, 108, 109, 110, 208, 209, 0,
	0, 113, 0, 111, 0, 0, 112, 210, 211, 212,
	213, 0, 214, 0, 0, 114, 0, 115, 116, 0,
	0, 215, 0, 117, 0, 0, 118, 0, 0, 119,
	0, 120, 121, 122, 123, 124, 0, 125, 126, 129,
	127, 0, 128, 0, 216, 130, 217, 131, 132, 0,
	0, 0, 0, 0, 133, 218, 0, 134, 0, 219,
	135, 136, 137, 0, 220, 138, 221, 139, 0, 140,
	141, 142, 222, 143, 144, 0, 146, 147, 145, 148,
	0, 149, 0, 150, 151, 223, 152, 0, 153, 154,
	155, 0, 224, 156, 157, 0, 158, 159, 0, 160,
	225, 226, 161, 0, 167, 162, 163, 164, 166, 227,
	165, 228, 0, 168, 0, 169, 170, 0, 229, 230,
	231, 0, 0, 171, 232, 233, 0, 172, 173, 174,
	175, 0, 0, 176, 177, 178, 0, 0, 179, 180,
	181, 234, 235, 0, 0, 182, 71, 0, 0, 0,
	183, 184, 185, 186, 0, 0, 0, 0, 0, 0,
	0, 0, 74, 75, 0, 76, 0, 0, 0, 0,
	187, 0, 0, 0, 658, 77, 78, 188, 189, 190,
	191, 79, 192, 193, 0, 80, 194, 195, 81, 0,
	0, 196, 197, 198, 0, 199, 0, 0, 0, 82,
	83, 84, 0, 85, 0, 86, 87, 88, 0, 0,
	89, 90, 0, 0, 0, 0, 0, 0, 91, 92,
	755, 94, 200, 95, 201, 202, 0, 96, 0, 97,
	0, 0, 0, 98, 99, 0, 100, 0, 0, 0,
	203, 101, 102, 204, 0, 0, 0, 103, 104, 205,
	0, 105, 0, 106, 0, 0, 0, 0, 107, 206,
	0, 207, 0, 108, 109, 110, 208, 209, 0, 0,
	113, 0, 111, 0, 0, 112, 210, 211, 212, 213,
	0, 214, 0, 0, 114, 0, 115, 116, 0, 0,
	215, 0, 117, 0, 0, 118, 0, 0, 119, 0,
	120, 121, 122, 123, 124, 0, 125, 126, 129, 127,
	0, 128, 0, 216, 130, 217, 131, 132, 0, 0,
	0, 0, 0, 133, 218, 0, 134, 0, 219, 135,
	136, 137, 0, 220, 138, 221, 139, 0, 140, 141,
	142, 222, 143, 144, 0, 146, 147, 145, 148, 0,
	149, 0, 150, 151, 223, 152, 0, 153, 154, 155,
	0, 224, 156, 157, 0, 158, 159, 0, 160, 225,
	226, 161, 0, 167, 162, 163, 164, 166, 227, 165,
	228, 0, 168, 754, 169, 170, 0, 229, 230, 231,
	0, 0, 171, 232, 233, 0, 172, 173, 174, 175,
	0, 0, 176, 177, 178, 0, 0, 179, 180, 181,
	234, 235, 0, 71, 182, 0, 0, 0, 0, 183,
	184, 185, 186, 0, 0, 0, 0, 0, 0, 74,
	75, 0, 76, 0, 0, 0, 758, 187, 0, 0,
	0, 0, 77, 78, 188, 189, 190, 191, 79, 192,
	193, 0, 80, 194, 195, 81, 0, 0, 196, 197,
	198, 0, 199, 0, 0, 0, 82, 83, 84, 0,
	85, 0, 86, 87, 88, 0, 0, 89, 90, 0,
	0, 0, 0, 0, 0, 91, 92, 93, 94, 200,
	95, 201, 202, 0, 96, 0, 97, 0, 0, 0,
	98, 99, 0, 100, 0, 0, 0, 203, 101, 102,
	204, 0, 0, 0, 103, 104, 205, 0, 105, 0,
	106, 0, 0, 0, 0, 107, 206, 0, 207, 0,
	108, 109, 110, 208, 209, 0, 0, 113, 0, 111,
	0, 0, 112, 210, 211, 212, 213, 0, 214, 0,
	0, 114, 0, 115, 116, 0, 0, 215, 0, 117,
	0, 0, 118, 0, 0, 119, 0, 120, 121, 122,
	123, 124, 0, 125, 126, 129, 127, 0, 128, 0,
	216, 130, 217, 131, 132, 0, 0, 0, 0, 0,
	133, 218, 0, 134, 0, 219, 135, 136, 137, 0,
	220, 138, 221, 139, 0, 140, 141, 142, 222, 143,
	144, 0, 146, 147, 145, 148, 0, 149, 0, 150,
	151, 223, 152, 0, 153, 154, 155, 0, 224, 156,
	157, 0, 158, 159, 0, 160, 225, 226, 161, 0,
	167, 162, 163, 164, 166, 227, 165, 228, 0, 168,
	0, 169, 170, 0, 229, 230, 231, 0, 0, 171,
	232, 233, 0, 172, 173, 174, 175, 0, 0, 176,
	177, 178, 0, 0, 179, 180, 181, 234, 235, 0,
	380, 182, 0, 0, 0, 0, 183, 184, 185, 186,
	0, 0, 0, 0, 0, 0, 74, 75, 0, 76,
	0, 0, 0, 758, 187, 0, 0, 0, 0, 77,
	78, 188, 189, 190, 191, 79, 192, 193, 0, 80,
	194, 195, 81, 0, 0, 196, 197, 198, 0, 199,
	0, 385, 0, 82, 83, 84, 0, 85, 0, 86,
	87, 88, 0, 386, 89, 90, 0, 0, 0, 0,
	0, 0, 91, 92, 93, 94, 200, 95, 201, 202,
	0, 96, 0, 97, 0, 0, 0, 98, 99, 0,
	100, 0, 0, 0, 203, 101, 102, 204, 0, 0,
	0, 103, 104, 205, 0, 105, 0, 106, 0, 0,
	387, 0, 107, 206, 0, 207, 0, 108, 109, 110,
	208, 209, 389, 0, 113, 0, 111, 0, 388, 112,
	210, 211, 212, 213, 0, 214, 0, 390, 114, 391,
	115, 116, 0, 0, 215, 392, 117, 393, 0, 118,
	0, 0, 119, 0, 120, 121, 122, 123, 124, 394,
	125, 126, 129, 127, 0, 128, 0, 216, 130, 217,
	131, 132, 0, 0, 0, 0, 0, 133, 218, 395,
	134, 396, 219, 135, 136, 137, 0, 220, 138, 221,
	139, 0, 140, 141, 142, 222, 143, 144, 0, 146,
	147, 145, 148, 0, 149, 397, 150, 151, 223, 152,
	0, 153, 154, 155, 0, 224, 156, 157, 0, 158,
	159, 398, 160, 225, 226, 161, 0, 167, 162, 163,
	164, 166, 227, 165, 228, 0, 168, 0, 169, 170,
	0, 229, 230, 231, 0, 0, 171, 232, 233, 0,
	172, 173, 174, 175, 0, 0, 176, 177, 178, 0,
	0, 179, 180, 181, 234, 235, 71, 0, 182, 0,
	0, 0, 0, 183, 184, 185, 186, 0, 0, 0,
	0, 0, 74, 75, 0, 76, 0, 0, 0, 0,
	187, 0, 0, 0, 0, 77, 78, 188, 189, 190,
	191, 79, 192, 193, 0, 80, 194, 195, 81, 0,
	0, 196, 197, 198, 956, 199, 0, 0, 0, 82,
	83, 84, 0, 85, 954, 86, 87, 88, 0, 0,
	89, 90, 0, 0, 0, 0, 0, 0, 91, 92,
	93, 94, 200, 95, 201, 202, 0, 96, 0, 97,
	0, 0, 0, 98, 99, 0, 100, 0, 0, 0,
	203, 101, 102, 204, 0, 1059, 0, 103, 104, 205,
	0, 105, 0, 106, 959, 0, 0, 0, 107, 206,
	0, 207, 0, 108, 109, 110, 208, 209, 0, 0,
	113, 1057, 111, 0, 0, 112, 210, 211, 212, 213,
	0, 214, 0, 0, 114, 0, 115, 116, 0, 0,
	215, 0, 117, 0, 0, 118, 0, 0, 119, 0,
	120, 121, 122, 123, 124, 0, 125, 126, 129, 127,
	0, 128, 0, 216, 130, 217, 131, 132, 0, 0,
	0, 0, 0, 133, 218, 0, 134, 0, 219, 135,
	136, 137, 0, 220, 138, 221, 139, 958, 140, 141,
	142, 222, 143, 144, 0, 146, 147, 145, 148, 0,
	149, 0, 150, 151, 223, 152, 0, 153, 154, 155,
	0, 224, 156, 157, 0, 158, 159, 0, 160, 225,
	226, 161, 0, 167, 162, 163, 164, 166, 227, 165,
	228, 0, 168, 0, 169, 170, 0, 229, 230, 231,
	0, 0, 171, 232, 233, 0, 172, 173, 174, 175,
	0, 1058, 176, 177, 178, 0, 0, 179, 180, 181,
	234, 235, 71, 0, 182, 0, 0, 0, 0, 183,
	184, 185, 186, 0, 0, 0, 0, 0, 74, 75,
	0, 76, 0, 0, 0, 0, 187, 0, 0, 0,
	0, 77, 78, 188, 189, 190, 191, 79, 192, 193,
	0, 80, 194, 195, 81, 0, 0, 196, 197, 198,
	956, 199, 0, 0, 951, 82, 83, 84, 0, 85,
	954, 86, 87, 88, 0, 0, 89, 90, 0, 0,
	0, 0, 0, 0, 91, 92, 93, 94, 200, 95,
	201, 202, 0, 96, 0, 97, 0, 0, 0, 98,
	99, 0, 100, 0, 0, 0, 203, 101, 102, 204,
	0, 0, 0, 103, 104, 205, 0, 105, 0, 106,
	959, 0, 0, 0, 107, 206, 0, 207, 0, 108,
	109, 110, 950, 209, 0, 0, 113, 0, 111, 0,
	0, 112, 210, 211, 212, 213, 0, 214, 0, 0,
	114, 0, 115, 116, 0, 0, 215, 0, 117, 0,
	0, 118, 0, 0, 119, 0, 120, 121, 122, 123,
	124, 0, 125, 126, 129, 127, 0, 128, 0, 216,
	130, 217, 131, 132, 0, 0, 0, 0, 0, 133,
	218, 0, 134, 0, 219, 135, 136, 137, 0, 220,
	138, 221, 139, 958, 140, 141, 142, 222, 143, 144,
	0, 146, 147, 145, 148, 0, 149, 0, 150, 151,
	223, 152, 0, 153, 154, 155, 0, 224, 156, 157,
	0, 158, 159, 0, 160, 225, 226, 161, 0, 167,
	162, 163, 164, 166, 227, 165, 228, 0, 168, 0,
	169, 170, 0, 229, 230, 231, 0, 0, 171, 232,
	233, 0, 172, 173, 174, 175, 0, 957, 176, 177,
	178, 0, 0, 179, 180, 181, 234, 235, 71, 0,
	182, 0, 0, 0, 0, 183, 184, 185, 186, 0,
	0, 0, 0, 0, 74, 75, 0, 76, 0, 0,
	0, 0, 187, 0, 1316, 0, 0, 77, 78, 188,
	189, 190, 191, 79, 192, 193, 0, 80, 194, 195,
	81, 0, 0, 196, 197, 198, 0, 199, 0, 0,
	0, 82, 83, 84, 0, 85, 0, 86, 87, 88,
	0, 0, 89, 90, 0, 0, 0, 0, 0, 0,
	91, 92, 93, 94, 200, 95, 201, 202, 0, 96,
	0, 97, 0, 0, 0, 98, 99, 0, 100, 0,
	0, 0, 203, 101, 102, 204, 0, 0, 0, 103,
	104, 205, 0, 105, 0, 106, 0, 0, 0, 0,
	107, 206, 0, 207, 0, 108, 109, 110, 208, 209,
	0, 0, 113, 0, 111, 0, 0, 112, 210, 211,
	212, 213, 0, 214, 0, 0, 114, 0, 115, 116,
	0, 0, 215, 0, 117, 0, 0, 118, 0, 0,
	119, 0, 120, 121, 122, 123, 124, 0, 125, 126,
	129, 127, 0, 128, 0, 216, 130, 217, 131, 132,
	0, 0, 0, 0, 0, 133, 218, 0, 134, 0,
	219, 135, 136, 137, 0, 220, 138, 221, 139, 0,
	140, 141, 142, 222, 143, 144, 0, 146, 147, 145,
	148, 0, 149, 0, 150, 151, 223, 152, 0, 153,
	154, 155, 0, 224, 156, 157, 0, 158, 159, 0,
	160, 225, 226, 161, 0, 167, 162, 163, 164, 166,
	227, 165, 228, 0, 168, 0, 169, 170, 0, 229,
	230, 231, 0, 0, 171, 232, 233, 0, 172, 173,
	174, 175, 0, 0, 176, 177, 178, 0, 0, 179,
	180, 181, 234, 235, 71, 0, 182, 0, 0, 0,
	0, 183, 184, 185, 186, 0, 0, 0, 0, 0,
	74, 75, 0, 76, 0, 0, 0, 0, 187, 0,
	0, 0, 0, 77, 78, 188, 189, 190, 191, 79,
	192, 193, 0, 80, 194, 195, 81, 0, 0, 196,
	197, 198, 0, 199, 0, 0, 0, 82, 83, 84,
	0, 85, 0, 86, 87, 88, 0, 0, 89, 90,
	0, 0, 0, 0, 0, 0, 91, 92, 93, 94,
	200, 95, 201, 202, 0, 96, 0, 97, 0, 0,
	0, 98, 99, 0, 100, 0, 0, 0, 203, 101,
	102, 204, 0, 0, 0, 103, 104, 205, 0, 105,
	0, 106, 0, 0, 0, 0, 107, 206, 0, 207,
	0, 108, 109, 110, 208, 209, 0, 0, 113, 0,
	111, 0, 0, 112, 210, 211, 212, 213, 0, 214,
	0, 0, 114, 0, 115, 116, 0, 0, 215, 0,
	117, 0, 0, 118, 0, 0, 119, 0, 120, 121,
	122, 123, 124, 0, 125, 126, 129, 127, 0, 128,
	0, 216, 130, 217, 131, 132, 0, 0, 343, 0,
	0, 133, 218, 0, 134, 0, 219, 135, 136, 137,
	0, 220, 138, 221, 139, 0, 140, 141, 142, 222,
	143, 144, 0, 146, 147, 145, 148, 0, 149, 0,
	150, 151, 223, 152, 0, 153, 154, 155, 0, 224,
	156, 157, 0, 158, 159, 0, 160, 225, 226, 161,
	0, 167, 162, 163, 164, 166, 227, 165, 228, 0,
	168, 0, 169, 170, 0, 229, 230, 231, 0, 0,
	171, 232, 233, 0, 172, 173, 174, 175, 0, 0,
	176, 177, 178, 0, 0, 179, 180, 181, 234, 235,
	71, 0, 182, 0, 0, 0, 0, 183, 184, 185,
	186, 0, 0, 0, 0, 0, 74, 75, 0, 76,
	0, 0, 0, 0, 187, 0, 0, 0, 0, 77,
	78, 188, 189, 190, 191, 79, 192, 193, 0, 80,
	194, 195, 81, 0, 0, 196, 197, 198, 0, 199,
	0, 0, 0, 82, 83, 84, 0, 85, 0, 86,
	87, 88, 0, 0, 89, 90, 0, 0, 0, 0,
	0, 0, 91, 92, 93, 94, 200, 95, 201, 202,
	0, 96, 0, 97, 0, 0, 0, 98, 99, 0,
	100, 0, 0, 0, 203, 101, 102, 204, 0, 0,
	0, 103, 104, 205, 0, 105, 0, 106, 0, 0,
	0, 0, 107, 206, 0, 207, 0, 108, 109, 110,
	706, 209, 0, 0, 113, 0, 111, 0, 0, 112,
	210, 211, 212, 213, 0, 214, 0, 0, 114, 0,
	115, 116, 0, 0, 215, 0, 117, 0, 0, 118,
	0, 0, 119, 0, 120, 121, 122, 123, 124, 0,
	125, 126, 129, 127, 0, 128, 0, 216, 130, 217,
	131, 132, 0, 0, 343, 0, 0, 133, 218, 0,
	134, 0, 219, 135, 136, 137, 0, 220, 138, 221,
	139, 0, 140, 141, 142, 222, 143, 144, 0, 146,
	147, 145, 148, 0, 149, 0, 150, 151, 223, 152,
	0, 153, 154, 155, 0, 224, 156, 157, 0, 158,
	159, 0, 160, 225, 226, 161, 0, 167, 162, 163,
	164, 166, 227, 165, 228, 0, 168, 0, 169, 170,
	0, 229, 230, 231, 0, 0, 171, 232, 233, 0,
	172, 173, 174, 175, 0, 0, 176, 177, 178, 0,
	0, 179, 180, 181, 234, 235, 71, 0, 182, 0,
	0, 0, 0, 183, 184, 185, 186, 0, 0, 0,
	0, 0, 74, 75, 405, 76, 0, 0, 0, 0,
	187, 0, 0, 0, 0, 77, 78, 188, 189, 190,
	191, 79, 192, 193, 0, 80, 194, 195, 81, 0,
	0, 196, 197, 198, 0, 199, 0, 0, 0, 82,
	83, 84, 0, 85, 0, 86, 87, 88, 0, 0,
	89, 90, 0, 0, 0, 0, 0, 0, 91, 92,
	93, 94, 200, 95, 201, 202, 0, 96, 0, 97,
	0, 0, 0, 98, 99, 0, 100, 0, 0, 0,
	203, 101, 102, 204, 0, 0, 0, 103, 104, 205,
	0, 105, 0, 106, 0, 0, 0, 0, 107, 206,
	0, 207, 0, 108, 109, 110, 208, 209, 0, 0,
	113, 0, 111, 0, 0, 112, 210, 211, 212, 213,
	0, 214, 0, 0, 114, 0, 115, 116, 0, 0,
	215, 0, 117, 0, 0, 118, 0, 0, 119, 0,
	120, 121, 122, 123, 124, 0, 125, 126, 129, 127,
	0, 128, 0, 216, 130, 217, 131, 132, 0, 0,
	0, 0, 0, 133, 218, 0, 134, 0, 219, 135,
	136, 137, 0, 220, 138, 221, 139, 0, 140, 141,
	142, 222, 143, 144, 0, 146, 147, 145, 148, 0,
	149, 0, 150, 151, 223, 152, 0, 153, 154, 155,
	0, 224, 156, 157, 0, 158, 159, 0, 160, 225,
	226, 161, 0, 167, 162, 163, 164, 166, 227, 165,
	228, 0, 168, 0, 169, 170, 0, 229, 230, 231,
	0, 0, 171, 232, 233, 0, 172, 173, 174, 175,
	0, 0, 176, 177, 178, 0, 0, 179, 180, 181,
	234, 235, 71, 0, 182, 0, 0, 0, 0, 183,
	184, 185, 186, 0, 0, 0, 0, 0, 74, 75,
	0, 76, 0, 0, 0, 0, 187, 0, 0, 0,
	0, 77, 78, 188, 189, 190, 191, 79, 192, 193,
	0, 80, 194, 195, 81, 0, 0, 196, 197, 198,
	0, 199, 0, 0, 0, 82, 83, 84, 0, 85,
	0, 86, 87, 88, 0, 0, 89, 90, 0, 0,
	0, 0, 0, 0, 91, 92, 93, 94, 200, 95,
	201, 202, 0, 96, 0, 97, 0, 0, 0, 98,
	99, 0, 100, 0, 0, 0, 203, 101, 102, 204,
	0, 0, 0, 103, 104, 205, 0, 105, 0, 106,
	0, 0, 0, 0, 107, 206, 0, 207, 0, 108,
	109, 110, 348, 209, 0, 0, 113, 0, 111, 0,
	0, 112, 210, 211, 212, 213, 0, 214, 0, 0,
	114, 0, 115, 116, 0, 0, 215, 0, 117, 0,
	0, 118, 0, 0, 119, 0, 120, 121, 122, 123,
	124, 0, 125, 126, 129, 127, 0, 128, 0, 216,
	130, 217, 131, 132, 0, 0, 343, 0, 0, 133,
	218, 0, 134, 0, 219, 135, 136, 137, 0, 220,
	138, 221, 139, 0, 140, 141, 142, 222, 143, 144,
	0, 146, 147, 145, 148, 0, 149, 0, 150, 151,
	223, 152, 0, 153, 154, 155, 0, 224, 156, 157,
	0, 158, 159, 0, 160, 225, 226, 161, 0, 167,
	162, 163, 164, 166, 227, 165, 228, 0, 168, 0,
	169, 170, 0, 229, 230, 231, 0, 0, 171, 232,
	233, 0, 172, 173, 174, 175, 0, 0, 176, 177,
	178, 0, 0, 179, 180, 181, 234, 235, 71, 0,
	182, 0, 0, 0, 0, 183, 184, 185, 186, 0,
	0, 0, 0, 0, 74, 75, 259, 76, 0, 0,
	0, 0, 187, 0, 0, 0, 0, 77, 78, 188,
	189, 190, 191, 79, 192, 193, 0, 80, 194, 195,
	81, 0, 0, 196, 197, 198, 0, 199, 0, 0,
	0, 82, 83, 84, 0, 85, 0, 86, 87, 88,
	0, 0, 89, 90, 0, 0, 0, 0, 0, 0,
	91, 92, 93, 94, 200, 95, 201, 202, 0, 96,
	0, 97, 0, 0, 0, 98, 99, 0, 100, 0,
	0, 0, 203, 101, 102, 204, 0, 0, 0, 103,
	104, 205, 0, 105, 0, 106, 0, 0, 0, 0,
	107, 206, 0, 207, 0, 108, 109, 110, 208, 209,
	0, 0, 113, 0, 111, 0, 0, 112, 210, 211,
	212, 213, 0, 214, 0, 0, 114, 0, 115, 116,
	0, 0, 215, 0, 117, 0, 0, 118, 0, 0,
	119, 0, 120, 121, 122, 123, 124, 0, 125, 126,
	129, 127, 0, 128, 0, 216, 130, 217, 131, 132,
	0, 0, 0, 0, 0, 133, 218, 0, 134, 0,
	219, 135, 136, 137, 0, 220, 138, 221, 258, 0,
	140, 141, 142, 222, 143, 144, 0, 146, 147, 145,
	148, 0, 149, 0, 150, 151, 223, 152, 0, 153,
	154, 155, 0, 224, 156, 157, 0, 158, 159, 0,
	160, 225, 226, 161, 0, 167, 162, 163, 164, 166,
	227, 165, 228, 0, 168, 0, 169, 170, 0, 229,
	230, 231, 0, 0, 171, 232, 233, 0, 172, 173,
	174, 175, 0, 0, 176, 177, 178, 0, 0, 179,
	180, 181, 234, 235, 71, 0, 182, 0, 0, 0,
	0, 183, 184, 185, 186, 0, 0, 0, 0, 0,
	74, 75, 0, 76, 0, 0, 0, 0, 187, 0,
	0, 0, 0, 77, 78, 188, 189, 190, 191, 79,
	192, 193, 0, 80, 194, 195, 81, 0, 0, 196,
	197, 198, 0, 199, 0, 0, 0, 82, 83, 84,
	0, 85, 0, 86, 87, 88, 0, 0, 89, 90,
	0, 0, 0, 0, 0, 0, 91, 92, 93, 94,
	200, 95, 201, 202, 0, 96, 0, 97, 0, 0,
	0, 98, 99, 0, 100, 0, 0, 0, 203, 101,
	102, 204, 0, 0, 0, 103, 104, 205, 0, 105,
	0, 106, 0, 0, 0, 0, 107, 206, 0, 207,
	0, 108, 109, 110, 208, 209, 0, 0, 113, 0,
	111, 0, 0, 112, 210, 211, 212, 213, 0, 214,
	0, 0, 114, 0, 115, 116, 0, 0, 215, 0,
	117, 0, 0, 118, 0, 0, 119, 0, 120, 121,
	122, 123, 124, 0, 125, 126, 129, 127, 0, 128,
	0, 216, 130, 217, 131, 132, 0, 0, 0, 0,
	0, 133, 218, 0, 134, 0, 219, 135, 136, 137,
	0, 220, 138, 221, 139, 0, 140, 141, 142, 222,
	143, 144, 0, 146, 147, 145, 148, 0, 149, 0,
	150, 151, 223, 152, 0, 153, 154, 155, 0, 224,
	156, 157, 0, 158, 159, 0, 160, 225, 226, 161,
	0, 167, 162, 163, 164, 166, 227, 165, 228, 0,
	168, 0, 169, 170, 0, 229, 230, 231, 0, 0,
	171, 232, 233, 0, 172, 173, 174, 175, 0, 0,
	176, 177, 178, 0, 0, 179, 180, 181, 234, 235,
	71, 0, 182, 0, 0, 0, 0, 183, 184, 185,
	186, 0, 0, 0, 0, 0, 74, 75, 0, 76,
	0, 0, 0, 0, 187, 0, 0, 0, 0, 77,
	78, 188, 189, 190, 191, 79, 192, 193, 0, 80,
	194, 195, 81, 0, 0, 196, 197, 198, 0, 199,
	0, 0, 0, 82, 83, 84, 0, 85, 0, 86,
	87, 88, 0, 0, 89, 90, 0, 0, 0, 0,
	0, 0, 91, 92, 93, 94, 200, 95, 201, 202,
	0, 96, 0, 97, 0, 0, 0, 98, 99, 0,
	100, 0, 0, 0, 203, 101, 102, 204, 0, 0,
	0, 103, 104, 205, 0, 105, 0, 106, 0, 0,
	0, 0, 107, 206, 0, 207, 0, 108, 109, 110,
	1230, 209, 0, 0, 113, 0, 111, 0, 0, 112,
	210, 211, 212, 213, 0, 214, 0, 0, 114, 0,
	115, 116, 0, 0, 215, 0, 117, 0, 0, 118,
	0, 0, 119, 0, 120, 121, 122, 123, 124, 0,
	125, 126, 129, 127, 0, 128, 0, 216, 130, 217,
	131, 132, 0, 0, 0, 0, 0, 133, 218, 0,
	134, 0, 219, 135, 136, 137, 0, 220, 138, 221,
	139, 0, 140, 141, 142, 222, 143, 144, 0, 146,
	147, 145, 148, 0, 149, 0, 150, 151, 223, 152,
	0, 153, 154, 155, 0, 224, 156, 157, 0, 158,
	159, 0, 160, 225, 226, 161, 0, 167, 162, 163,
	164, 166, 227, 165, 228, 0, 168, 0, 169, 170,
	0, 229, 230, 231, 0, 0, 171, 232, 233, 0,
	172, 173, 174, 175, 0, 0, 176, 177, 178, 0,
	0, 179, 180, 181, 234, 235, 71, 0, 182, 0,
	0, 0, 0, 183, 184, 185, 186, 0, 0, 0,
	0, 0, 74, 75, 0, 76, 0, 0, 0, 0,
	187, 0, 0, 0, 0, 77, 78, 188, 189, 190,
	191, 79, 192, 193, 0, 80, 194, 195, 81, 0,
	0, 196, 197, 198, 0, 199, 0, 0, 0, 82,
	83, 84, 0, 85, 0, 86, 87, 88, 0, 0,
	89, 90, 0, 0, 0, 0, 0, 0, 91, 92,
	93, 94, 200, 95, 201, 202, 0, 96, 0, 97,
	0, 0, 0, 98, 99, 0, 100, 0, 0, 0,
	203, 101, 102, 204, 0, 0, 0, 103, 104, 205,
	0, 105, 0, 106, 0, 0, 0, 0, 107, 206,
	0, 207, 0, 108, 109, 110, 1228, 209, 0, 0,
	113, 0, 111, 0, 0, 112, 210, 211, 212, 213,
	0, 214, 0, 0, 114, 0, 115, 116, 0, 0,
	215, 0, 117, 0, 0, 118, 0, 0, 119, 0,
	120, 121, 122, 123, 124, 0, 125, 126, 129, 127,
	0, 128, 0, 216, 130, 217, 131, 132, 0, 0,
	0, 0, 0, 133, 218, 0, 134, 0, 219, 135,
	136, 137, 0, 220, 138, 221, 139, 0, 140, 141,
	142, 222, 143, 144, 0, 146, 147, 145, 148, 0,
	149, 0, 150, 151, 223, 152, 0, 153, 154, 155,
	0, 224, 156, 157, 0, 158, 159, 0, 160, 225,
	226, 161, 0, 167, 162, 163, 164, 166, 227, 165,
	228, 0, 168, 0, 169, 170, 0, 229, 230, 231,
	0, 0, 171, 232, 233, 0, 172, 173, 174, 175,
	0, 0, 176, 177, 178, 0, 0, 179, 180, 181,
	234, 235, 71, 0, 182, 0, 0, 0, 0, 183,
	184, 185, 186, 0, 0, 0, 0, 0, 74, 75,
	0, 76, 0, 0, 0, 0, 187, 0, 0, 0,
	0, 77, 78, 188, 189, 190, 191, 79, 192, 193,
	0, 80, 194, 195, 81, 0, 0, 196, 197, 198,
	0, 199, 0, 0, 0, 82, 83, 84, 0, 85,
	0, 86, 87, 88, 0, 0, 89, 90, 0, 0,
	0, 0, 0, 0, 91, 92, 93, 94, 200, 95,
	201, 202, 0, 96, 0, 97, 0, 0, 0, 98,
	99, 0, 100, 0, 0, 0, 203, 101, 102, 204,
	0, 0, 0, 103, 104, 205, 0, 105, 0, 106,
	0, 0, 0, 0, 107, 206, 0, 207, 0, 108,
	109, 110, 1217, 209, 0, 0, 113, 0, 111, 0,
	0, 112, 210, 211, 212, 213, 0, 214, 0, 0,
	114, 0, 115, 116, 0, 0, 215, 0, 117, 0,
	0, 118, 0, 0, 119, 0, 120, 121, 122, 123,
	124, 0, 125, 126, 129, 127, 0, 128, 0, 216,
	130, 217, 131, 132, 0, 0, 0, 0, 0, 133,
	218, 0, 134, 0, 219, 135, 136, 137, 0, 220,
	138, 221, 139, 0, 140, 141, 142, 222, 143, 144,
	0, 146, 147, 145, 148, 0, 149, 0, 150, 151,
	223, 152, 0, 153, 154, 155, 0, 224, 156, 157,
	0, 158, 159, 0, 160, 225, 226, 161, 0, 167,
	162, 163, 164, 166, 227, 165, 228, 0, 168, 0,
	169, 170, 0, 229, 230, 231, 0, 0, 171, 232,
	233, 0, 172, 173, 174, 175, 0, 0, 176, 177,
	178, 0, 0, 179, 180, 181, 234, 235, 71, 0,
	182, 0, 0, 0, 0, 183, 184, 185, 186, 0,
	0, 0, 0, 0, 74, 75, 0, 76, 0, 0,
	0, 0, 187, 0, 0, 0, 0, 77, 78, 188,
	189, 190, 191, 79, 192, 193, 0, 80, 194, 195,
	81, 0, 0, 196, 197, 198, 0, 199, 0, 0,
	0, 82, 83, 84, 0, 85, 0, 86, 87, 88,
	0, 0, 89, 90, 0, 0, 0, 0, 0, 0,
	91, 92, 93, 94, 200, 95, 201, 202, 0, 96,
	0, 97, 0, 0, 0, 98, 99, 0, 100, 0,
	0, 0, 203, 101, 102, 204, 0, 0, 0, 103,
	104, 205, 0, 105, 0, 106, 0, 0, 0, 0,
	107, 206, 0, 207, 0, 108, 109, 110, 822, 209,
	0, 0, 113, 0, 111, 0, 0, 112, 210, 211,
	212, 213, 0, 214, 0, 0, 114, 0, 115, 116,
	0, 0, 215, 0, 117, 0, 0, 118, 0, 0,
	119, 0, 120, 121, 122, 123, 124, 0, 125, 126,
	129, 127, 0, 128, 0, 216, 130, 217, 131, 132,
	0, 0, 0, 0, 0, 133, 218, 0, 134, 0,
	219, 135, 136, 137, 0, 220, 138, 221, 139, 0,
	140, 141, 142, 222, 143, 144, 0, 146, 147, 145,
	148, 0, 149, 0, 150, 151, 223, 152, 0, 153,
	154, 155, 0, 224, 156, 157, 0, 158, 159, 0,
	160, 225, 226, 161, 0, 167, 162, 163, 164, 166,
	227, 165, 228, 0, 168, 0, 169, 170, 0, 229,
	230, 231, 0, 0, 171, 232, 233, 0, 172, 173,
	174, 175, 0, 0, 176, 177, 178, 0, 0, 179,
	180, 181, 234, 235, 71, 0, 182, 0, 0, 0,
	0, 183, 184, 185, 186, 0, 0, 0, 0, 0,
	74, 75, 0, 76, 0, 0, 0, 0, 187, 0,
	0, 0, 0, 77, 78, 188, 189, 190, 191, 79,
	192, 193, 0, 80, 194, 195, 81, 0, 0, 196,
	197, 198, 0, 199, 0, 0, 0, 82, 83, 84,
	0, 85, 0, 86, 87, 88, 0, 0, 89, 90,
	0, 0, 0, 0, 0, 0, 91, 92, 93, 94,
	200, 95, 201, 202, 0, 96, 0, 97, 0, 0,
	0, 98, 99, 0, 100, 0, 0, 0, 203, 101,
	102, 204, 0, 0, 0, 103, 104, 205, 0, 105,
	0, 106, 0, 0, 0, 0, 107, 206, 0, 207,
	0, 108, 109, 110, 208, 209, 0, 0, 113, 0,
	111, 0, 0, 112, 210, 211, 212, 213, 0, 214,
	0, 0, 114, 0, 115, 116, 0, 0, 215, 0,
	117, 0, 0, 118, 0, 0, 119, 0, 120, 121,
	122, 123, 124, 0, 125, 126, 129, 127, 0, 128,
	0, 216, 130, 217, 131, 132, 0, 0, 0, 0,
	0, 133, 218, 0, 134, 0, 219, 135, 136, 137,
	0, 220, 138, 221, 139, 0, 140, 141, 142, 222,
	143, 144, 0, 146, 147, 145, 148, 0, 149, 0,
	150, 151, 223, 152, 0, 273, 154, 155, 0, 224,
	156, 157, 0, 158, 159, 0, 160, 225, 226, 161,
	0, 167, 162, 163, 164, 166, 227, 165, 228, 0,
	168, 0, 169, 170, 0, 229, 230, 231, 0, 0,
	171, 232, 233, 0, 172, 173, 174, 175, 0, 0,
	176, 177, 178, 0, 0, 179, 180, 181, 234, 235,
	71, 0, 182, 0, 0, 0, 0, 183, 184, 185,
	186, 0, 0, 0, 0, 0, 74, 75, 0, 76,
	0, 0, 0, 0, 187, 0, 691, 0, 0, 77,
	78, 188, 189, 190, 191, 79, 192, 193, 0, 80,
	194, 195, 81, 0, 0, 196, 197, 198, 0, 199,
	0, 0, 0, 82, 83, 84, 0, 85, 0, 86,
	87, 88, 0, 0, 89, 90, 0, 0, 0, 0,
	0, 0, 91, 92, 93, 94, 200, 95, 201, 202,
	0, 96, 0, 97, 0, 0, 0, 98, 99, 0,
	100, 0, 0, 0, 203, 101, 102, 204, 0, 0,
	0, 103, 104, 205, 0, 105, 0, 106, 0, 0,
	0, 0, 107, 206, 0, 207, 0, 108, 109, 110,
	208, 209, 0, 0, 113, 0, 111, 0, 0, 112,
	210, 211, 212, 213, 0, 214, 0, 0, 114, 0,
	115, 116, 0, 0, 215, 0, 117, 0, 0, 118,
	0, 0, 119, 0, 120, 121, 122, 123, 124, 0,
	125, 126, 129, 127, 0, 128, 0, 216, 130, 217,
	131, 132, 0, 0, 0, 0, 0, 133, 218, 0,
	134, 0, 219, 135, 136, 137, 0, 220, 138, 221,
	139, 0, 140, 141, 142, 222, 143, 144, 0, 146,
	147, 145, 148, 0, 149, 0, 150, 151, 223, 152,
	0, 153, 154, 155, 0, 224, 156, 157, 0, 0,
	159, 0, 160, 225, 226, 161, 0, 167, 162, 163,
	164, 166, 227, 165, 228, 0, 168, 0, 169, 170,
	0, 229, 230, 231, 0, 0, 171, 232, 233, 0,
	172, 173, 174, 175, 0, 0, 176, 177, 178, 0,
	0, 179, 180, 181, 234, 235, 71, 0, 182, 0,
	0, 0, 0, 183, 184, 185, 186, 0, 0, 0,
	0, 0, 74, 75, 0, 76, 0, 0, 0, 0,
	187, 0, 0, 0, 0, 77, 78, 188, 189, 190,
	191, 79, 192, 193, 0, 80, 194, 195, 81, 0,
	0, 196, 197, 198, 0, 199, 0, 0, 0, 82,
	83, 84, 0, 85, 0, 86, 87, 88, 0, 0,
	89, 90, 0, 0, 0, 0, 0, 0, 91, 92,
	93, 94, 200, 95, 201, 202, 0, 96, 0, 97,
	0, 0, 0, 98, 99, 0, 100, 0, 0, 0,
	203, 101, 102, 204, 0, 0, 0, 103, 104, 205,
	0, 105, 0, 106, 0, 0, 0, 0, 107, 206,
	0, 207, 0, 108, 109, 110, 540, 209, 0, 0,
	113, 0, 111, 0, 0, 112, 210, 211, 212, 213,
	0, 214, 0, 0, 114, 0, 115, 116, 0, 0,
	215, 0, 117, 0, 0, 118, 0, 0, 119, 0,
	120, 121, 122, 123, 124, 0, 125, 126, 129, 127,
	0, 128, 0, 216, 130, 217, 131, 132, 0, 0,
	0, 0, 0, 133, 218, 0, 134, 0, 219, 135,
	136, 137, 0, 220, 138, 221, 139, 0, 140, 141,
	142, 222, 143, 144, 0, 146, 147, 145, 148, 0,
	149, 0, 150, 151, 223, 152, 0, 153, 154, 155,
	0, 224, 156, 157, 0, 158, 159, 0, 160, 225,
	226, 161, 0, 167, 162, 163, 164, 166, 227, 165,
	228, 0, 168, 0, 169, 170, 0, 229, 230, 231,
	0, 0, 171, 232, 233, 0, 172, 173, 174, 175,
	0, 0, 176, 177, 178, 0, 0, 179, 180, 181,
	234, 235, 71, 0, 182, 0, 0, 0, 0, 183,
	184, 185, 186, 0, 0, 0, 0, 0, 74, 75,
	0, 76, 0, 0, 0, 0, 187, 0, 0, 0,
	0, 77, 78, 188, 189, 190, 191, 79, 192, 193,
	0, 80, 194, 195, 81, 0, 0, 196, 197, 198,
	0, 199, 0, 0, 0, 82, 83, 84, 0, 85,
	0, 86, 87, 88, 0, 0, 89, 90, 0, 0,
	0, 0, 0, 0, 91, 92, 93, 94, 200, 95,
	201, 202, 0, 96, 0, 97, 0, 0, 0, 98,
	99, 0, 100, 0, 0, 0, 203, 101, 102, 204,
	0, 0, 0, 103, 104, 205, 0, 105, 0, 106,
	0, 0, 0, 0, 107, 206, 0, 207, 0, 108,
	109, 110, 536, 209, 0, 0, 113, 0, 111, 0,
	0, 112, 210, 211, 212, 213, 0, 214, 0, 0,
	114, 0, 115, 116, 0, 0, 215, 0, 117, 0,
	0, 118, 0, 0, 119, 0, 120, 121, 122, 123,
	124, 0, 125, 126, 129, 127, 0, 128, 0, 216,
	130, 217, 131, 132, 0, 0, 0, 0, 0, 133,
	218, 0, 134, 0, 219, 135, 136, 137, 0, 220,
	138, 221, 139, 0, 140, 141, 142, 222, 143, 144,
	0, 146, 147, 145, 148, 0, 149, 0, 150, 151,
	223, 152, 0, 153, 154, 155, 0, 224, 156, 157,
	0, 158, 159, 0, 160, 225, 226, 161, 0, 167,
	162, 163, 164, 166, 227, 165, 228, 0, 168, 0,
	169, 170, 0, 229, 230, 231, 0, 0, 171, 232,
	233, 0, 172, 173, 174, 175, 0, 0, 176, 177,
	178, 0, 0, 179, 180, 181, 234, 235, 71, 0,
	182, 0, 0, 0, 0, 183, 184, 185, 186, 0,
	0, 0, 0, 0, 74, 75, 0, 76, 0, 0,
	0, 0, 187, 0, 0, 0, 0, 77, 78, 188,
	189, 190, 191, 79, 192, 193, 0, 80, 194, 195,
	81, 0, 0, 196, 197, 411, 0, 199, 0, 0,
	0, 82, 83, 84, 0, 85, 0, 86, 87, 88,
	0, 0, 89, 90, 0, 0, 0, 0, 0, 0,
	91, 92, 93, 94, 200, 95, 201, 202, 0, 96,
	0, 97, 0, 0, 0, 98, 99, 0, 100, 0,
	0, 0, 203, 101, 102, 204, 0, 0, 0, 103,
	104, 205, 0, 105, 0, 106, 0, 0, 0, 0,
	107, 206, 0, 207, 0, 108, 109, 110, 208, 209,
	0, 0, 113, 0, 111, 0, 0, 112, 210, 211,
	212, 213, 0, 214, 0, 0, 114, 0, 115, 116,
	0, 0, 215, 0, 117, 0, 0, 118, 0, 0,
	119, 0, 120, 121, 122, 123, 284, 0, 125, 126,
	129, 127, 0, 128, 0, 216, 130, 217, 131, 132,
	0, 0, 0, 0, 0, 133, 218, 0, 134, 0,
	219, 135, 136, 137, 0, 220, 138, 221, 139, 0,
	140, 141, 142, 222, 143, 144, 0, 146, 147, 145,
	148, 0, 149, 0, 150, 151, 223, 152, 0, 153,
	154, 155, 0, 224, 156, 157, 0, 158, 159, 0,
	160, 225, 226, 161, 0, 167, 162, 163, 164, 166,
	227, 165, 228, 0, 168, 0, 169, 170, 0, 283,
	230, 231, 0, 0, 279, 232, 233, 0, 172, 173,
	174, 175, 0, 0, 176, 177, 178, 0, 0, 179,
	180, 181, 234, 235, 71, 0, 182, 0, 0, 0,
	0, 183, 184, 185, 186, 0, 0, 0, 0, 0,
	74, 75, 0, 76, 0, 0, 0, 0, 187, 0,
	0, 0, 0, 77, 78, 188, 189, 190, 191, 79,
	192, 193, 0, 80, 194, 195, 81, 0, 0, 196,
	197, 198, 0, 199, 0, 0, 0, 82, 83, 84,
	0, 85, 0, 86, 87, 88, 0, 0, 89, 90,
	0, 0, 0, 0, 0, 0, 91, 92, 93, 94,
	200, 95, 201, 202, 0, 96, 0, 97, 0, 0,
	0, 98, 99, 0, 100, 0, 0, 0, 203, 101,
	102, 204, 0, 0, 0, 103, 104, 205, 0, 105,
	0, 106, 0, 0, 0, 0, 107, 206, 0, 207,
	0, 108, 109, 110, 208, 209, 0, 0, 113, 0,
	111, 0, 0, 112, 210, 211, 212, 213, 0, 214,
	0, 0, 114, 0, 115, 116, 0, 0, 215, 0,
	117, 0, 0, 118, 0, 0, 119, 0, 120, 121,
	122, 123, 284, 0, 125, 126, 129, 127, 0, 128,
	0, 216, 130, 217, 131, 132, 0, 0, 0, 0,
	0, 133, 218, 0, 134, 0, 219, 135, 136, 137,
	0, 220, 138, 221, 139, 0, 140, 141, 142, 222,
	143, 144, 0, 146, 147, 145, 148, 0, 149, 0,
	150, 151, 223, 152, 0, 153, 154, 155, 0, 224,
	156, 157, 0, 158, 159, 0, 160, 225, 226, 161,
	0, 167, 162, 163, 164, 166, 227, 165, 228, 0,
	168, 0, 169, 170, 0, 283, 230, 231, 0, 0,
	279, 232, 233, 0, 172, 173, 174, 175, 0, 0,
	176, 177, 178, 0, 0, 179, 180, 181, 234, 235,
	71, 0, 182, 0, 0, 0, 0, 183, 184, 185,
	186, 0, 0, 0, 0, 0, 74, 75, 0, 76,
	0, 0, 0, 0, 187, 0, 0, 0, 0, 77,
	78, 188, 189, 190, 191, 79, 192, 193, 0, 80,
	194, 195, 81, 0, 0, 196, 197, 198, 0, 199,
	0, 0, 0, 82, 83, 84, 0, 85, 0, 86,
	87, 88, 0, 0, 89, 90, 0, 0, 0, 0,
	0, 0, 91, 92, 93, 94, 200, 95, 201, 202,
	0, 96, 0, 97, 0, 0, 0, 98, 99, 0,
	100, 0, 0, 0, 203, 101, 102, 204, 0, 0,
	0, 103, 104, 205, 0, 105, 0, 106, 0, 0,
	0, 0, 107, 206, 0, 207, 0, 108, 109, 110,
	376, 209, 0, 0, 113, 0, 111, 0, 0, 112,
	210, 211, 212, 213, 0, 214, 0, 0, 114, 0,
	115, 116, 0, 0, 215, 0, 117, 0, 0, 118,
	0, 0, 119, 0, 120, 121, 122, 123, 124, 0,
	125, 126, 129, 127, 0, 128, 0, 216, 130, 217,
	131, 132, 0, 0, 0, 0, 0, 133, 218, 0,
	134, 0, 219, 135, 136, 137, 0, 220, 138, 221,
	139, 0, 140, 141, 142, 222, 143, 144, 0, 146,
	147, 145, 148, 0, 149, 0, 150, 151, 223, 152,
	0, 153, 154, 155, 0, 224, 156, 157, 0, 158,
	159, 0, 160, 225, 226, 161, 0, 167, 162, 163,
	164, 166, 227, 165, 228, 0, 168, 0, 169, 170,
	0, 229, 230, 231, 0, 0, 171, 232, 233, 0,
	172, 173, 174, 175, 0, 0, 176, 177, 178, 0,
	0, 179, 180, 181, 234, 235, 71, 0, 182, 0,
	0, 0, 0, 183, 184, 185, 186, 0, 0, 0,
	0, 0, 74, 75, 0, 76, 0, 0, 0, 0,
	187, 0, 0, 0, 0, 77, 78, 188, 189, 190,
	191, 79, 192, 193, 0, 80, 194, 195, 81, 0,
	0, 196, 197, 198, 0, 199, 0, 0, 0, 82,
	83, 84, 0, 85, 0, 86, 87, 88, 0, 0,
	89, 90, 0, 0, 0, 0, 0, 0, 91, 92,
	93, 94, 200, 95, 201, 202, 0, 96, 0, 97,
	0, 0, 0, 98, 99, 0, 100, 0, 0, 0,
	203, 101, 102, 204, 0, 0, 0, 103, 104, 205,
	0, 105, 0, 106, 0, 0, 0, 0, 107, 206,
	0, 207, 0, 108, 109, 110, 373, 209, 0, 0,
	113, 0, 111, 0, 0, 112, 210, 211, 212, 213,
	0, 214, 0, 0, 114, 0, 115, 116, 0, 0,
	215, 0, 117, 0, 0, 118, 0, 0, 119, 0,
	120, 121, 122, 123, 124, 0, 125, 126, 129, 127,
	0, 128, 0, 216, 130, 217, 131, 132, 0, 0,
	0, 0, 0, 133, 218, 0, 134, 0, 219, 135,
	136, 137, 0, 220, 138, 221, 139, 0, 140, 141,
	142, 222, 143, 144, 0, 146, 147, 145, 148, 0,
	149, 0, 150, 151, 223, 152, 0, 153, 154, 155,
	0, 224, 156, 157, 0, 158, 159, 0, 160, 225,
	226, 161, 0, 167, 162, 163, 164, 166, 227, 165,
	228, 0, 168, 0, 169, 170, 0, 229, 230, 231,
	0, 0, 171, 232, 233, 0, 172, 173, 174, 175,
	0, 0, 176, 177, 178, 0, 0, 179, 180, 181,
	234, 235, 71, 0, 182, 0, 0, 0, 0, 183,
	184, 185, 186, 0, 0, 0, 0, 0, 74, 75,
	0, 76, 0, 0, 0, 0, 187, 0, 0, 0,
	0, 77, 78, 188, 189, 190, 191, 79, 192, 193,
	0, 80, 194, 195, 81, 0, 0, 196, 197, 198,
	0, 199, 0, 0, 0, 82, 83, 84, 0, 85,
	0, 86, 87, 88, 0, 0, 89, 90, 0, 0,
	0, 0, 0, 0, 91, 92, 93, 94, 200, 95,
	201, 202, 0, 96, 0, 97, 0, 0, 0, 98,
	99, 0, 100, 0, 0, 0, 203, 101, 102, 204,
	0, 0, 0, 103, 104, 205, 0, 105, 0, 106,
	0, 0, 0, 0, 107, 206, 0, 207, 0, 108,
	109, 110, 370, 209, 0, 0, 113, 0, 111, 0,
	0, 112, 210, 211, 212, 213, 0, 214, 0, 0,
	114, 0, 115, 116, 0, 0, 215, 0, 117, 0,
	0, 118, 0, 0, 119, 0, 120, 121, 122, 123,
	124, 0, 125, 126, 129, 127, 0, 128, 0, 216,
	130, 217, 131, 132, 0, 0, 0, 0, 0, 133,
	218, 0, 134, 0, 219, 135, 136, 137, 0, 220,
	138, 221, 139, 0, 140, 141, 142, 222, 143, 144,
	0, 146, 147, 145, 148, 0, 149, 0, 150, 151,
	223, 152, 0, 153, 154, 155, 0, 224, 156, 157,
	0, 158, 159, 0, 160, 225, 226, 161, 0, 167,
	162, 163, 164, 166, 227, 165, 228, 0, 168, 0,
	169, 170, 0, 229, 230, 231, 0, 0, 171, 232,
	233, 0, 172, 173, 174, 175, 0, 0, 176, 177,
	178, 0, 0, 179, 180, 181, 234, 235, 71, 0,
	182, 0, 0, 0, 0, 183, 184, 185, 186, 0,
	0, 0, 0, 0, 74, 75, 0, 76, 0, 0,
	0, 0, 187, 0, 0, 0, 0, 77, 78, 188,
	189, 190, 191, 79, 192, 193, 0, 80, 194, 195,
	81, 0, 0, 196, 197, 198, 0, 199, 0, 0,
	0, 82, 83, 84, 0, 85, 0, 86, 87, 88,
	0, 0, 89, 90, 0, 0, 0, 0, 0, 0,
	91, 92, 93, 94, 200, 95, 201, 202, 0, 96,
	0, 97, 0, 0, 0, 98, 99, 0, 100, 0,
	0, 0, 203, 101, 102, 204, 0, 0, 0, 103,
	104, 205, 0, 105, 0, 106, 0, 0, 0, 0,
	107, 206, 0, 207, 0, 108, 109, 110, 368, 209,
	0, 0, 113, 0, 111, 0, 0, 112, 210, 211,
	212, 213, 0, 214, 0, 0, 114, 0, 115, 116,
	0, 0, 215, 0, 117, 0, 0, 118, 0, 0,
	119, 0, 120, 121, 122, 123, 124, 0, 125, 126,
	129, 127, 0, 128, 0, 216, 130, 217, 131, 132,
	0, 0, 0, 0, 0, 133, 218, 0, 134, 0,
	219, 135, 136, 137, 0, 220, 138, 221, 139, 0,
	140, 141, 142, 222, 143, 144, 0, 146, 147, 145,
	148, 0, 149, 0, 150, 151, 223, 152, 0, 153,
	154, 155, 0, 224, 156, 157, 0, 158, 159, 0,
	160, 225, 226, 161, 0, 167, 162, 163, 164, 166,
	227, 165, 228, 0, 168, 0, 169, 170, 0, 229,
	230, 231, 0, 0, 171, 232, 233, 0, 172, 173,
	174, 175, 0, 0, 176, 177, 178, 0, 0, 179,
	180, 181, 234, 235, 71, 0, 182, 0, 0, 0,
	0, 183, 184, 185, 186, 0, 0, 0, 0, 0,
	74, 75, 0, 76, 0, 0, 0, 0, 187, 0,
	0, 0, 0, 77, 78, 188, 189, 190, 191, 79,
	192, 193, 0, 80, 194, 195, 81, 0, 0, 196,
	197, 198, 0, 199, 0, 0, 0, 82, 83, 84,
	0, 85, 0, 86, 87, 88, 0, 0, 89, 90,
	0, 0, 0, 0, 0, 0, 91, 92, 93, 94,
	200, 95, 201, 202, 0, 96, 0, 97, 0, 0,
	0, 98, 99, 0, 100, 0, 0, 0, 203, 101,
	102, 204, 0, 0, 0, 103, 104, 205, 0, 105,
	0, 106, 0, 0, 0, 0, 107, 206, 0, 207,
	0, 108, 109, 110, 351, 209, 0, 0, 113, 0,
	111, 0, 0, 112, 210, 211, 212, 213, 0, 214,
	0, 0, 114, 0, 115, 116, 0, 0, 215, 0,
	117, 0, 0, 118, 0, 0, 119, 0, 120, 121,
	122, 123, 124, 0, 125, 126, 129, 127, 0, 128,
	0, 216, 130, 217, 131, 132, 0, 0, 0, 0,
	0, 133, 218, 0, 134, 0, 219, 135, 136, 137,
	0, 220, 138, 221, 139, 0, 140, 141, 142, 222,
	143, 144, 0, 146, 147, 145, 148, 0, 149, 0,
	150, 151, 223, 152, 0, 153, 154, 155, 0, 224,
	156, 157, 0, 158, 159, 0, 160, 225, 226, 161,
	0, 167, 162, 163, 164, 166, 227, 165, 228, 0,
	168, 0, 169, 170, 0, 229, 230, 231, 0, 0,
	171, 232, 233, 0, 172, 173, 174, 175, 0, 0,
	176, 177, 178, 0, 0, 179, 180, 181, 234, 235,
	71, 0, 182, 0, 0, 0, 0, 183, 184, 185,
	186, 0, 0, 0, 0, 0, 74, 75, 0, 76,
	0, 0, 0, 0, 187, 0, 0, 0, 0, 77,
	78, 188, 189, 190, 191, 79, 192, 193, 0, 80,
	194, 195, 81, 0, 0, 196, 197, 198, 0, 199,
	0, 0, 0, 82, 83, 84, 0, 85, 0, 86,
	87, 88, 0, 0, 89, 90, 0, 0, 0, 0,
	0, 0, 91, 92, 93, 94, 200, 95, 201, 202,
	0, 96, 0, 97, 0, 0, 0, 98, 99, 0,
	100, 0, 0, 0, 203, 101, 102, 204, 0, 0,
	0, 103, 104, 205, 0, 105, 0, 106, 0, 0,
	0, 0, 107, 206, 0, 207, 0, 108, 109, 110,
	208, 209, 0, 0, 113, 0, 111, 0, 0, 112,
	210, 211, 212, 213, 0, 214, 0, 0, 114, 0,
	115, 116, 0, 0, 215, 0, 117, 0, 0, 118,
	0, 0, 119, 0, 120, 121, 122, 123, 124, 0,
	125, 126, 129, 127, 0, 128, 0, 216, 130, 217,
	131, 132, 0, 0, 0, 0, 0, 133, 218, 0,
	134, 0, 219, 135, 136, 137, 0, 220, 138, 221,
	139, 0, 140, 141, 142, 222, 332, 144, 0, 146,
	147, 145, 148, 0, 149, 0, 150, 151, 223, 152,
	0, 153, 154, 155, 0, 224, 156, 157, 0, 158,
	159, 0, 160, 225, 226, 161, 0, 167, 162, 163,
	164, 166, 227, 165, 228, 0, 168, 0, 169, 170,
	0, 229, 230, 231, 0, 0, 171, 232, 233, 0,
	172, 173, 174, 175, 0, 0, 176, 177, 178, 0,
	0, 179, 180, 181, 234, 235, 71, 0, 182, 0,
	0, 0, 0, 183, 184, 185, 186, 0, 0, 0,
	0, 0, 74, 75, 0, 76, 0, 0, 0, 0,
	187, 0, 0, 0, 0, 77, 78, 188, 189, 190,
	191, 79, 192, 193, 0, 80, 194, 195, 81, 0,
	0, 196, 197, 198, 0, 199, 0, 0, 0, 82,
	83, 84, 0, 85, 0, 86, 87, 88, 0, 0,
	89, 90, 0, 0, 0, 0, 0, 0, 91, 92,
	93, 94, 200, 95, 201, 202, 0, 96, 0, 97,
	0, 0, 0, 98, 99, 0, 100, 0, 0, 0,
	203, 101, 102, 204, 0, 0, 0, 103, 104, 205,
	0, 105, 0, 106, 0, 0, 0, 0, 107, 206,
	0, 207, 0, 108, 109, 110, 208, 209, 0, 0,
	113, 0, 111, 0, 0, 112, 210, 211, 212, 213,
	0, 214, 0, 0, 114, 0, 115, 116, 0, 0,
	215, 0, 117, 0, 0, 276, 0, 0, 119, 0,
	120, 121, 122, 123, 284, 0, 125, 126, 129, 127,
	0, 128, 0, 216, 130, 217, 131, 132, 0, 0,
	0, 0, 0, 133, 218, 0, 134, 0, 219, 135,
	136, 137, 0, 220, 138, 221, 139, 0, 140, 141,
	142, 222, 143, 144, 0, 146, 147, 145, 148, 0,
	149, 0, 150, 151, 278, 152, 0, 153, 154, 155,
	0, 224, 156, 277, 0, 158, 159, 0, 160, 225,
	226, 161, 0, 167, 162, 163, 164, 166, 227, 165,
	228, 0, 168, 0, 169, 170, 0, 283, 230, 231,
	0, 0, 279, 232, 233, 0, 172, 173, 174, 175,
	0, 0, 176, 177, 178, 0, 0, 179, 180, 181,
	234, 235, 71, 0, 182, 0, 0, 0, 0, 183,
	184, 185, 186, 0, 0, 0, 0, 0, 74, 75,
	0, 76, 0, 0, 0, 0, 187, 0, 0, 0,
	0, 77, 78, 188, 189, 190, 191, 79, 192, 193,
	0, 80, 194, 195, 81, 0, 0, 196, 197, 198,
	0, 199, 0, 0, 0, 82, 83, 84, 0, 85,
	0, 86, 87, 88, 0, 0, 89, 90, 0, 0,
	0, 0, 0, 0, 91, 92, 93, 94, 200, 95,
	201, 202, 0, 96, 0, 97, 0, 0, 0, 98,
	99, 0, 100, 0, 0, 0, 203, 101, 102, 204,
	0, 0, 0, 103, 104, 205, 0, 105, 0, 106,
	0, 0, 0, 0, 107, 206, 0, 207, 0, 108,
	109, 110, 208, 209, 0, 0, 113, 0, 111, 0,
	0, 112, 210, 211, 212, 213, 0, 214, 0, 0,
	114, 0, 115, 116, 0, 0, 215, 0, 117, 0,
	0, 118, 0, 0, 119, 0, 120, 121, 122, 123,
	124, 0, 125, 126, 129, 127, 0, 128, 0, 216,
	130, 217, 131, 132, 0, 0, 0, 0, 0, 133,
	218, 0, 134, 0, 219, 135, 136, 0, 0, 220,
	138, 221, 139, 0, 140, 0, 142, 222, 143, 144,
	0, 146, 147, 145, 148, 0, 149, 0, 150, 151,
	223, 0, 0, 153, 154, 155, 0, 224, 156, 157,
	0, 158, 159, 0, 160, 225, 226, 161, 0, 167,
	162, 163, 164, 166, 227, 165, 228, 0, 168, 0,
	169, 170, 0, 229, 230, 231, 0, 0, 171, 232,
	233, 0, 172, 173, 174, 175, 0, 0, 176, 177,
	178, 0, 0, 179, 180, 181, 234, 235, 0, 0,
	182, 0, 0, 0, 0, 183, 184, 185, 186, 848,
	849, 0, 868, 869, 870, 878, 879, 880, 0, 0,
	0, 0, 0, 0, 0, 871, 0, 0, 0, 0,
	0, 0, 851, 0, 882, 848, 849, 0, 868, 869,
	870, 878, 879, 880, 0, 0, 0, 0, 0, 0,
	0, 871, 0, 850, 0, 0, 0, 0, 851, 865,
	882, 0, 0, 0, 848, 849, 0, 868, 869, 870,
	878, 879, 880, 0, 0, 0, 0, 0, 0, 850,
	871, 0, 0, 0, 0, 865, 0, 851, 0, 882,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 856, 850, 0,
	0, 0, 0, 0, 865, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 875, 883, 0, 0, 0,
	0, 0, 0, 856, 0, 0, 0, 0, 0, 0,
	881, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	873, 875, 883, 0, 0, 0, 866, 0, 0, 0,
	0, 0, 856, 0, 0, 0, 881, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 873, 0, 872, 0,
	875, 883, 866, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 881, 0, 0, 0, 0,
	0, 0, 0, 0, 872, 873, 0, 0, 0, 0,
	0, 866, 0, 867, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 876, 0, 0, 0, 0, 0,
	0, 0, 0, 872, 0, 0, 0, 0, 0, 867,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	876, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 867, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 876,
	874, 0, 0, 862, 863, 864, 0, 861, 858, 859,
	860, 852, 853, 854, 855, 857, 0, 877, 0, 0,
	0, 0, 0, 0, 1412, 0, 874, 0, 0, 862,
	863, 864, 0, 861, 858, 859, 860, 852, 853, 854,
	855, 857, 0, 877, 0, 0, 0, 0, 0, 0,
	1365, 0, 0, 0, 0, 874, 0, 0, 862, 863,
	864, 0, 861, 858, 859, 860, 852, 853, 854, 855,
	857, 0, 877, 0, 848, 849, 1817, 868, 869, 870,
	878, 879, 880, 0, 0, 0, 0, 0, 0, 0,
	871, 0, 0, 0, 0, 0, 0, 851, 0, 882,
	848, 849, 0, 868, 869, 870, 878, 879, 880, 0,
	0, 0, 0, 0, 0, 0, 871, 0, 850, 0,
	0, 0, 0, 851, 865, 882, 0, 0, 0, 848,
	849, 0, 868, 869, 870, 878, 879, 880, 0, 0,
	0, 0, 0, 0, 850, 871, 0, 0, 0, 0,
	865, 0, 851, 0, 882, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 856, 850, 0, 0, 0, 0, 0, 865,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	875, 883, 0, 0, 0, 0, 0, 0, 856, 0,
	0, 0, 0, 0, 0, 881, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 873, 875, 883, 0, 0,
	0, 866, 0, 0, 0, 0, 0, 856, 0, 0,
	0, 881, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 873, 0, 872, 0, 875, 883, 866, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	881, 0, 0, 0, 0, 0, 0, 0, 0, 872,
	873, 0, 0, 0, 0, 0, 866, 0, 867, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 876,
	0, 0, 0, 0, 0, 0, 0, 0, 872, 0,
	0, 0, 0, 0, 867, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 876, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 867, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 876, 874, 0, 0, 862, 863,
	864, 0, 861, 858, 859, 860, 852, 853, 854, 855,
	857, 0, 877, 0, 0, 0, 1815, 0, 0, 0,
	0, 874, 0, 0, 862, 863, 864, 0, 861, 858,
	859, 860, 852, 853, 854, 855, 857, 0, 877, 0,
	1372, 1373, 1796, 1390, 1391, 1392, 0, 0, 0, 0,
	874, 0, 0, 862, 863, 864, 1667, 861, 858, 859,
	860, 852, 853, 854, 855, 857, 0, 877, 0, 848,
	849, 1771, 868, 869, 870, 878, 879, 880, 0, 0,
	0, 0, 0, 0, 0, 871, 0, 0, 0, 0,
	1387, 0, 851, 0, 882, 848, 849, 0, 868, 869,
	870, 878, 879, 880, 0, 0, 0, 0, 0, 0,
	0, 871, 0, 850, 0, 0, 0, 0, 851, 865,
	882, 0, 0, 0, 848, 849, 0, 868, 869, 870,
	878, 879, 880, 0, 0, 0, 0, 0, 1378, 850,
	871, 0, 0, 0, 0, 865, 0, 851, 0, 882,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 856, 850, 0,
	0, 1393, 0, 0, 865, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 875, 883, 1388, 0, 0,
	0, 0, 0, 856, 0, 0, 0, 0, 0, 0,
	881, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	873, 875, 883, 0, 0, 0, 866, 0, 0, 0,
	0, 0, 856, 0, 0, 0, 881, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 873, 0, 872, 0,
	875, 883, 866, 0, 1389, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 881, 0, 0, 0, 0,
	0, 0, 0, 0, 872, 873, 0, 0, 0, 0,
	0, 866, 0, 867, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 876, 0, 0, 0, 0, 0,
	0, 0, 0, 872, 0, 0, 0, 0, 0, 867,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	876, 0, 0, 0, 1384, 1385, 1386, 0, 1383, 1380,
	1381, 1382, 1374, 1375, 1376, 1377, 1379, 0, 867, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 876,
	874, 0, 0, 862, 863, 864, 0, 861, 858, 859,
	860, 852, 853, 854, 855, 857, 0, 877, 0, 0,
	0, 1766, 0, 0, 0, 0, 874, 0, 0, 862,
	863, 864, 0, 861, 858, 859, 860, 852, 853, 854,
	855, 857, 0, 877, 0, 1372, 1373, 1762, 1390, 1391,
	1392, 0, 0, 0, 0, 874, 0, 0, 862, 863,
	864, 1666, 861, 858, 859, 860, 852, 853, 854, 855,
	857, 0, 877, 0, 848, 849, 1697, 868, 869, 870,
	878, 879, 880, 0, 0, 0, 0, 0, 0, 0,
	871, 0, 0, 0, 0, 1387, 0, 851, 0, 882,
	848, 849, 0, 868, 869, 870, 878, 879, 880, 0,
	0, 0, 0, 0, 0, 0, 871, 0, 850, 0,
	0, 0, 0, 851, 865, 882, 0, 0, 0, 848,
	849, 0, 868, 869, 870, 878, 879, 880, 0, 0,
	0, 0, 0, 1378, 850, 871, 0, 0, 0, 0,
	865, 0, 851, 0, 882, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 856, 850, 0, 0, 1393, 0, 0, 865,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	875, 883, 1388, 0, 0, 0, 0, 0, 856, 0,
	0, 0, 0, 0, 0, 881, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 873, 875, 883, 0, 0,
	0, 866, 0, 0, 0, 0, 0, 856, 0, 0,
	0, 881, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 873, 0, 872, 0, 875, 883, 866, 0, 1389,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	881, 0, 0, 0, 0, 0, 0, 0, 0, 872,
	873, 0, 0, 0, 0, 0, 866, 0, 867, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 876,
	0, 0, 0, 0, 0, 0, 0, 0, 872, 0,
	0, 0, 0, 0, 867, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 876, 0, 0, 0, 1384,
	1385, 1386, 0, 1383, 1380, 1381, 1382, 1374, 1375, 1376,
	1377, 1379, 0, 867, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 876, 874, 0, 0, 862, 863,
	864, 0, 861, 858, 859, 860, 852, 853, 854, 855,
	857, 0, 877, 0, 0, 0, 1696, 0, 0, 0,
	0, 874, 0, 0, 862, 863, 864, 0, 861, 858,
	859, 860, 852, 853, 854, 855, 857, 0, 877, 0,
	1372, 1373, 1604, 1390, 1391, 1392, 0, 0, 0, 0,
	874, 0, 0, 862, 863, 864, 1517, 861, 858, 859,
	860, 852, 853, 854, 855, 857, 0, 877, 0, 848,
	849, 1538, 868, 869, 870, 878, 879, 880, 0, 0,
	0, 0, 0, 0, 0, 871, 0, 0, 0, 0,
	1387, 0, 851, 0, 882, 848, 849, 0, 868, 869,
	870, 878, 879, 880, 0, 0, 0, 0, 0, 0,
	0, 871, 0, 850, 0, 0, 0, 0, 851, 865,
	882, 0, 0, 0, 848, 849, 0, 868, 869, 870,
	878, 879, 880, 0, 0, 0, 0, 0, 1378, 850,
	871, 0, 0, 0, 0, 865, 0, 851, 0, 882,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 856, 850, 0,
	0, 1393, 0, 0, 865, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 875, 883, 1388, 0, 0,
	0, 0, 0, 856, 0, 0, 0, 0, 0, 0,
	881, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	873, 875, 883, 0, 0, 0, 866, 0, 0, 0,
	0, 0, 856, 0, 0, 0, 881, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 873, 0, 872, 0,
	875, 883, 866, 0, 1389, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 881, 0, 0, 0, 0,
	0, 0, 0, 0, 872, 873, 0, 0, 0, 0,
	0, 866, 0, 867, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 876, 0, 0, 0, 0, 0,
	0, 0, 0, 872, 0, 0, 0, 0, 0, 867,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	876, 0, 0, 0, 1384, 1385, 1386, 0, 1383, 1380,
	1381, 1382, 1374, 1375, 1376, 1377, 1379, 0, 867, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 876,
	874, 0, 0, 862, 863, 864, 0, 861, 858, 859,
	860, 852, 853, 854, 855, 857, 0, 877, 0, 0,
	0, 1522, 0, 0, 0, 0, 874, 0, 0, 862,
	863, 864, 0, 861, 858, 859, 860, 852, 853, 854,
	855, 857, 0, 877, 0, 0, 0, 1139, 0, 1372,
	1373, 0, 1390, 1391, 1392, 874, 0, 0, 862, 863,
	864, 0, 861, 858, 859, 860, 852, 853, 854, 855,
	857, 0, 877, 0, 1452, 848, 849, 0, 868, 869,
	870, 878, 879, 880, 0, 0, 0, 0, 0, 0,
	0, 871, 0, 0, 0, 0, 0, 0, 851, 1387,
	882, 848, 849, 0, 868, 869, 870, 878, 879, 880,
	0, 0, 0, 0, 0, 0, 0, 871, 0, 850,
	0, 0, 0, 0, 851, 865, 882, 0, 0, 0,
	0, 0, 0, 848, 849, 0, 868, 869, 870, 878,
	879, 880, 0, 0, 0, 850, 0, 1378, 0, 871,
	0, 865, 0, 0, 1072, 0, 851, 0, 882, 0,
	0, 0, 0, 0, 0, 0, 1394, 0, 0, 0,
	0, 0, 0, 856, 1885, 0, 0, 850, 0, 0,
	1393, 0, 0, 865, 0, 0, 0, 0, 0, 0,
	0, 875, 883, 0, 0, 0, 1388, 0, 0, 856,
	0, 1404, 0, 0, 1403, 0, 881, 0, 0, 0,
	0, 1073, 0, 0, 0, 0, 873, 875, 883, 0,
	0, 0, 866, 0, 0, 0, 0, 0, 0, 0,
	0, 856, 881, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 873, 0, 872, 0, 0, 0, 866, 875,
	883, 0, 0, 1389, 0, 0, 0, 1884, 0, 0,
	0, 0, 0, 0, 881, 0, 0, 0, 0, 0,
	872, 0, 0, 0, 873, 0, 0, 0, 0, 867,
	866, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	876, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 872, 0, 0, 867, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 876, 0, 0, 0,
	0, 0, 0, 1384, 1385, 1386, 0, 1383, 1380, 1381,
	1382, 1374, 1375, 1376, 1377, 1379, 0, 867, 0, 0,
	0, 0, 0, 0, 0, 0, 874, 0, 876, 862,
	863, 864, 0, 861, 858, 859, 860, 852, 853, 854,
	855, 857, 0, 877, 0, 0, 0, 0, 0, 0,
	0, 0, 874, 0, 0, 862, 863, 864, 0, 861,
	858, 859, 860, 852, 853, 854, 855, 857, 0, 877,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 874, 0, 0, 862, 863, 864,
	0, 861, 858, 859, 860, 852, 853, 854, 855, 857,
	885, 877, 0, 0, 0, 0, 848, 849, 0, 868,
	869, 870, 878, 879, 880, 0, 0, 0, 0, 0,
	0, 0, 871, 0, 0, 0, 884, 0, 0, 851,
	0, 882, 848, 849, 0, 868, 869, 870, 878, 879,
	880, 0, 0, 0, 0, 0, 0, 0, 871, 0,
	850, 0, 0, 0, 0, 851, 865, 882, 0, 0,
	0, 0, 0, 0, 848, 849, 0, 868, 869, 870,
	878, 879, 880, 0, 0, 0, 850, 0, 0, 0,
	871, 0, 865, 0, 0, 0, 0, 851, 0, 882,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 856, 0, 0, 0, 850, 0,
	0, 0, 0, 0, 865, 0, 0, 0, 0, 0,
	0, 0, 875, 883, 0, 0, 0, 0, 0, 0,
	856, 0, 0, 0, 0, 0, 0, 881, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 873, 875, 883,
	0, 0, 0, 866, 0, 0, 0, 0, 0, 0,
	0, 0, 856, 881, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 873, 0, 872, 0, 0, 0, 866,
	875, 883, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 881, 0, 0, 0, 0,
	0, 872, 327, 0, 0, 873, 0, 0, 0, 0,
	867, 866, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 876, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 872, 0, 0, 867, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 876, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 867, 0,
	0, 0, 0, 0, 0, 0, 0, 874, 0, 876,
	862, 863, 864, 0, 861, 858, 859, 860, 852, 853,
	854, 855, 857, 0, 877, 0, 0, 0, 1532, 0,
	0, 0, 0, 874, 0, 0, 862, 863, 864, 0,
	861, 858, 859, 860, 852, 853, 854, 855, 857, 0,
	877, 0, 0, 0, 1372, 1373, 0, 1390, 1391, 1392,
	0, 0, 0, 0, 0, 874, 0, 0, 862, 863,
	864, 0, 861, 858, 859, 860, 852, 853, 854, 855,
	857, 0, 877, 848, 849, 0, 868, 869, 870, 878,
	879, 880, 0, 0, 0, 0, 0, 0, 0, 871,
	0, 0, 0, 0, 1387, 0, 851, 0, 882, 848,
	849, 0, 868, 869, 870, 878, 879, 880, 0, 0,
	0, 0, 0, 0, 0, 871, 0, 850, 0, 1405,
	0, 0, 851, 865, 882, 0, 0, 0, 848, 849,
	0, 868, 869, 870, 878, 879, 880, 0, 0, 0,
	0, 0, 1378, 850, 871, 0, 0, 0, 0, 865,
	0, 851, 0, 882, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 856, 850, 0, 0, 1393, 1410, 0, 865, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 875,
	883, 1388, 0, 0, 0, 0, 0, 856, 0, 0,
	0, 0, 0, 0, 881, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 873, 875, 883, 0, 0, 0,
	866, 0, 0, 0, 0, 0, 856, 0, 0, 0,
	881, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	873, 0, 872, 0, 875, 883, 866, 0, 1389, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 881,
	0, 0, 0, 0, 0, 0, 0, 0, 872, 873,
	0, 0, 0, 0, 0, 866, 0, 867, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 876, 0,
	0, 728, 722, 745, 716, 736, 735, 872, 0, 718,
	717, 0, 0, 867, 747, 746, 0, 0, 1370, 0,
	0, 0, 0, 0, 876, 0, 0, 0, 1384, 1385,
	1386, 0, 1383, 1380, 1381, 1382, 1374, 1375, 1376, 1377,
	1379, 0, 867, 0, 0, 741, 0, 733, 732, 0,
	0, 0, 0, 876, 874, 0, 731, 862, 863, 864,
	0, 861, 858, 859, 860, 852, 853, 854, 855, 857,
	0, 877, 730, 0, 0, 0, 0, 0, 0, 0,
	874, 0, 0, 862, 863, 864, 0, 861, 858, 859,
	860, 852, 853, 854, 855, 857, 0, 877, 0, 723,
	724, 725, 726, 0, 744, 0, 0, 0, 0, 874,
	0, 0, 862, 863, 864, 0, 861, 858, 859, 860,
	852, 853, 854, 855, 857, 0, 877, 848, 849, 0,
	868, 869, 870, 878, 879, 880, 0, 0, 734, 0,
	0, 0, 0, 871, 0, 0, 0, 1364, 0, 0,
	851, 0, 882, 848, 849, 0, 868, 869, 870, 878,
	879, 880, 0, 0, 729, 0, 0, 0, 0, 871,
	0, 850, 0, 0, 0, 0, 851, 865, 882, 0,
	0, 0, 848, 849, 720, 868, 869, 870, 878, 879,
	880, 0, 727, 721, 0, 0, 0, 850, 871, 0,
	0, 749, 0, 865, 0, 851, 0, 882, 719, 0,
	0, 742, 743, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 856, 850, 0, 0, 0,
	0, 0, 865, 0, 748, 0, 0, 0, 0, 0,
	0, 0, 0, 875, 883, 0, 0, 0, 0, 0,
	0, 856, 0, 0, 0, 0, 0, 0, 881, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 873, 875,
	883, 0, 0, 0, 866, 0, 0, 0, 0, 0,
	856, 0, 0, 0, 881, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 873, 0, 872, 0, 875, 883,
	866, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 881, 0, 0, 0, 0, 0, 0,
	0, 0, 872, 873, 0, 0, 0, 0, 0, 866,
	0, 867, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 876, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 867, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 876, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 867, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 876, 874, 0,
	0, 862, 863, 864, 0, 861, 858, 859, 860, 852,
	853, 854, 855, 857, 0, 877, 0, 0, 0, 0,
	0, 0, 0, 0, 874, 0, 0, 862, 863, 864,
	0, 861, 858, 859, 860, 852, 853, 854, 855, 857,
	0, 877, 0, 0, 0, 0, 0, 0, 26, 0,
	0, 0, 0, 874, 0, 0, 862, 863, 864, 47,
	861, 858, 859, 860, 852, 853, 854, 855, 857, 0,
	877, 848, 849, 0, 868, 869, 870, 878, 879, 880,
	0, 0, 0, 49, 0, 0, 0, 0, 0, 27,
	0, 54, 0, 0, 851, 0, 882, 0, 1372, 1373,
	0, 1390, 1391, 1392, 0, 0, 0, 0, 0, 0,
	38, 0, 0, 0, 1516, 850, 0, 34, 0, 0,
	50, 865, 0, 0, 37, 35, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	39, 0, 0, 0, 0, 0, 0, 0, 1387, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 856,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 875, 883, 0,
	0, 0, 0, 0, 0, 0, 1378, 0, 0, 0,
	0, 0, 881, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 873, 0, 0, 0, 0, 0, 866, 36,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1393,
	52, 0, 0, 40, 0, 51, 0, 0, 0, 0,
	41, 0, 0, 61, 0, 1388, 0, 0, 44, 46,
	0, 0, 0, 0, 0, 0, 0, 0, 48, 0,
	0, 0, 0, 0, 0, 0, 63, 0, 0, 0,
	0, 0, 0, 0, 0, 867, 0, 0, 0, 53,
	0, 0, 0, 0, 0, 0, 876, 0, 0, 0,
	0, 0, 0, 64, 0, 0, 0, 0, 0, 0,
	0, 59, 1389, 0, 0, 0, 0, 60, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 58, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 874, 0, 0, 862, 863, 864, 0, 861,
	858, 859, 860, 852, 853, 854, 855, 857, 0, 877,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1384, 1385, 1386, 0, 1383, 1380, 1381, 1382,
	1374, 1375, 1376, 1377, 1379,
}
var sqlPact = [...]int{

	24185, -1000, -2, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 789, 16050, -1000, -1000,
	-1000, -1000, -1000, 663, 609, 692, 16050, 16050, 15784, 1258,
	1258, 17380, -1000, -1000, 20572, -1000, 2106, 439, 456, 439,
	439, 449, 17380, 530, 590, 142, -1000, 732, -3, 20306,
	16050, 1283, 25, 14720, 314, 24185, 15518, 20040, 16050, 300,
	33, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1145, 1040, 1034, 14720,
	19774, 19508, 19242, 18976, -1000, 9891, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 508, 318, 317, -1000, 15252, -1000,
	871, -1000, 23, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 869, -1000, 16050, -1000, -1000, 18710, 18444, 316, 844,
	-1000, -1000, 527, 371, 1306, -1000, 39, -1000, -1000, 1141,
	-1000, 860, 1139, 1138, 1137, 1136, 1134, 1132, 370, 867,
	-1000, 467, 4237, 844, -1000, 844, -1000, -1000, -1000, 504,
	17380, -1000, 14720, -1000, 18178, 16050, 1070, 17912, -1000, 732,
	-1000, -1000, -1000, 892, 1277, 1277, 1277, 1312, 156, 155,
	142, 9, 16050, -1000, 315, 9, 6829, 6829, -1000, -1000,
	314, -1000, 333, 12853, -1000, 7387, -1000, 851, 1195, 397,
	640, 1193, -69, 717, 547, 12045, 33, -1000, -1000, -1000,
	8785, 3960, 14720, 16050, 16050, 571, 17646, -1000, 1191, 111,
	1189, -1000, 103, 1187, -1000, 103, 1186, -9, -1000, -1000,
	-1000, -1000, -1000, -1000, 314, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 14986,
	1359, 23725, -1000, 8785, -1000, -1000, 13122, 1146, 13122, -1000,
	-1000, 1358, -1000, 8785, -1000, 22, 20, 977, 1076, 10436,
	10170, 1249, 1087, -1000, -1000, -1000, 36, 4237, 16050, 1150,
	13122, 16050, 16050, 16050, 16050, 16050, 16050, -1000, 974, -1000,
	16050, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 17, 16,
	-1000, 17380, -1000, 113, -1000, 312, 938, 86, 17114, 1202,
	935, -1000, 892, -1000, 873, 968, 7948, 8785, 142, -1000,
	-1000, 142, 142, 8785, -1000, -1000, 16050, 9, 1355, 16050,
	110, -1000, 23186, -1000, -1000, 8785, 8785, 8785, 8785, 8785,
	815, -1000, -1000, -1000, 5092, -1000, -1000, 33, 311, 298,
	-1000, -1000, 310, 33, -1000, -1000, -1000, -1000, 308, 1462,
	460, -1000, -1000, -1000, 8785, 378, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1149, 303, 302, -1000, -1000,
	-1000, -1000, 301, 299, 295, 294, 292, 282, 281, 275,
	273, 272, 270, 261, 260, 252, 747, -1000, 391, -1000,
	-1000, 391, 391, -1000, 246, 246, 247, -1000, -1000, -1000,
	-1000, 246, -1000, -1000, -1000, 363, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 248, 110, -1000, -1000, -1000, 16050, -13,
	-1000, 23903, -1000, -6, 673, -1000, 14188, 1286, 1274, 1272,
	14720, 1327, 1326, 503, 16050, 16050, 499, -1000, 1131, -14,
	-1000, -1000, 3060, -1000, -1000, 383, 253, 1353, 253, 12315,
	-1000, 16050, 16050, -1000, 16050, -1000, -1000, 16050, -1000, 16050,
	16050, -1000, 16050, 162, 13656, 823, 1184, -3, -15, -1000,
	1372, -1000, -1000, -1000, -1000, 126, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	247, 747, 246, 246, 246, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 363, -1000, -1000, 391, 391, 391, -1000, -1000,
	-21, 23903, 496, 0, 13389, 16050, -1000, 32, -1000, -1000,
	1128, 438, -38, 758, 1031, 677, -1000, -1000, -1000, -1000,
	7, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1418, -1000, -1000, -1000, -1000, 1436, 7, -1000, -1000,
	-1000, -1000, -1000, 1453, -1000, -1000, -1000, 4237, -1000, -1000,
	-1000, 16050, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 758, 1031, -1000, -1000, 14720, 13922, 1348, 1180, 1347,
	16050, 859, 932, -1000, -1000, 353, 1179, -1000, -1000, -1000,
	-1000, 23903, -1000, 23903, 754, 1054, -1000, 1054, 5, -1000,
	22893, -1000, 245, -42, -1000, 383, 6829, 11776, 23725, 23725,
	16050, 515, 8785, 8785, 8785, 8785, 8785, 8785, 8785, 8785,
	8785, 8785, 8785, 8785, 8785, 8785, 8785, 8785, 8785, 8785,
	8785, 8785, 8785, 8785, 1021, 8785, 494, 8785, 8785, 8785,
	8785, 1295, 746, 230, 4237, -1000, 615, 615, 615, 24221,
	24221, 200, 21, 22515, 3, 33, -1000, -1000, 6547, 6248,
	33, 4514, -1000, 782, 1433, 387, 23903, 1157, 1092, 244,
	152, 143, 8785, 8785, 828, 8785, 9064, 8785, 8785, 5371,
	8785, 8785, 8785, 8785, 8785, 8785, -1000, 241, -1000, -1000,
	-1000, -1000, 1432, -1000, -1000, 1431, -1000, 512, 492, 1428,
	383, 140, 7387, -1000, 823, 16050, 16050, 16050, -1000, -1000,
	922, 16848, 913, 23725, 16050, -1000, 240, 239, 996, 994,
	16050, 16050, 16582, 16316, 16050, 691, 237, 235, 16050, 704,
	-1000, 16050, 543, 1124, 16050, -1000, 8785, 671, 8785, 727,
	-1000, 11237, 396, 16050, 689, 85, -1000, -1000, -1000, 352,
	16050, -1000, -1000, -1000, 111, -1000, 103, 103, -1000, -1000,
	14720, -1000, -1000, -1000, -1000, -1000, -1000, 23725, 324, 323,
	-1000, 1426, 488, -1000, 486, 482, 479, -1000, 233, -1000,
	8785, 16050, 13389, 0, -1, -1000, -1000, 16050, 1031, -1000,
	-1000, -1000, -1000, 620, -1000, 737, -1000, 10702, -1000, -1000,
	-1000, 782, -1000, -8, -1000, -1000, -1000, -1000, 137, -44,
	-5, 23725, -1000, -1000, -1000, -1000, -1000, 16050, 297, 16050,
	-3, 16050, -3, 16050, 1178, 1451, 16050, -1000, -1000, -1000,
	8785, -1000, -1000, -1000, -3, 16050, -1000, 1085, -1000, -48,
	1512, -153, 14454, -1000, 10968, -1000, -1000, -1000, 369, 348,
	348, 489, 489, 489, 489, 890, 890, 338, 2220, 2740,
	2740, 2740, 296, 193, 193, 2740, 2740, 2740, 24221, 23932,
	2333, 8785, 8785, 475, 744, 230, 2333, 8785, 1411, 2333,
	2333, 2333, -1000, 806, -1000, -1000, -1000, 1122, 229, 9064,
	9064, -1000, -1000, -1000, 5092, -1000, -1000, 227, 8785, -1000,
	8785, -49, -124, -1000, -1000, -50, -1000, -1000, -33, 8785,
	8785, 8785, 123, -1000, 121, 569, -1000, 8785, 818, 226,
	225, 8785, -1000, -1000, 23877, 21135, 120, 1121, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 117, 23588, 115, 22809, -1000,
	9064, 9064, 9064, 5092, 224, 112, 22861, -133, 23559, 7666,
	7666, 7666, 104, 23533, 8785, -133, 21109, 3307, 3249, -52,
	-57, -66, 1416, -71, 99, 368, 367, 97, 1085, -1000,
	-1000, -1000, -1000, 473, 472, 1177, -1000, 910, -1000, 401,
	-1000, 846, 8785, 16050, 222, 218, 705, -1000, 1175, 836,
	1174, 836, -1000, -6, 651, 8785, 8785, -1000, 470, -1000,
	-1000, 538, -1000, 22544, -1000, 6829, 23903, -1000, 686, 1290,
	-72, -1000, -1000, 6829, 383, 12315, 11776, 7387, -73, -1000,
	-1000, -1000, 823, -1000, 526, 1412, 96, 948, 884, 714,
	583, 1402, 23903, -8, -1000, -8, -1000, -1000, -1000, -1000,
	-1000, -1000, 16050, 1069, -1000, 13922, 217, 16050, 214, -1000,
	211, -1000, 203, 16050, -1000, 1202, -1000, 95, -1000, 1082,
	1311, -1000, 11776, 879, 1010, 1006, 11776, 1046, 837, 837,
	837, -1000, 14454, 3672, -1000, -1000, 16050, 202, 11506, 94,
	1512, 8785, 2333, 2333, 8785, 9064, 9064, -1000, 2333, -1000,
	-1000, -1000, -1000, 1114, 196, 8785, 23725, 24248, 22460, -78,
	5949, -10, 22489, -1000, -1000, 298, -1000, 93, 7108, -1000,
	23212, -22, -22, -1000, 1447, 1200, -1000, 8785, 23244, -1000,
	12584, 384, 841, 22199, 23725, 23725, -1000, 8785, -1000, 1103,
	8785, -1000, 23725, 23725, 9064, 9064, 9064, 9064, 9064, 9064,
	9064, 9064, 9064, 9064, 9064, 9064, 9064, 9064, 9064, 9064,
	9064, 9064, 9064, 1032, 9064, 1406, 1406, 1406, -23, 5650,
	-1000, 1107, 1103, 8785, 8785, 23725, 92, 87, 84, -1000,
	8785, -133, 8785, 8785, 8785, -1000, -1000, -1000, 82, -1000,
	1399, -1000, -1000, -1000, -1000, 1082, 16050, 16050, 16050, 1172,
	-1000, 1855, -1000, 22170, -80, 16050, 16050, -1000, 986, 1068,
	429, 16050, -1000, 16050, -1000, 16050, 16050, 16050, -84, -85,
	16050, -1000, -1000, -29, 6829, 216, -3, -29, 671, -1000,
	-25, -1000, 351, -1000, 321, 320, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 77, -1000, -1000, 1074, -1000, 9622,
	195, 16050, 13922, 1346, 9622, 856, -1000, -1000, 381, 8785,
	8785, 1512, 528, 11776, 11776, 1062, 987, 11776, -1000, -1000,
	-1000, -1000, -1000, -1000, 1003, 191, 16050, 14454, 554, 2333,
	22115, 21770, 8785, 23725, 2842, -86, 8785, 8785, -1000, -91,
	-1000, 8785, -1000, -1000, 1445, 8785, 76, 74, 73, -1000,
	-1000, 23903, 8785, -1000, -1000, 20838, 8785, 72, -1000, 71,
	68, 23903, 1107, 23903, -1000, -1000, 570, 570, 1406, 1406,
	1406, 1406, 596, 596, 927, 1678, 545, 545, 545, 722,
	471, 471, 545, 545, 545, 1102, 963, 189, 23504, 8785,
	-92, -1000, -1000, -1000, 23903, 23903, 55, -1000, -1000, -1000,
	-133, 2270, 22144, 21854, -1000, 52, 381, -1000, -1000, -1000,
	16050, -1000, 16050, -1000, 16050, 16050, 1104, 899, -1000, -1000,
	984, 183, 9064, 16050, -1000, 708, -93, -97, 895, -1000,
	885, 8785, -1000, 23725, 836, 836, -1000, 468, 463, -1000,
	-1000, -1000, -29, 1207, 16050, 1265, -1000, -1000, 179, -1000,
	-1000, -1000, 790, -103, -1000, 221, 1281, 8785, -1000, -1000,
	178, 9622, -108, 50, -3, -109, 16050, -1000, 16050, 23903,
	-133, 474, -1000, 1062, -1000, 176, 8785, 11776, -1000, -162,
	-1000, 349, -1000, 16050, -110, -1000, 8785, 8785, 2842, -114,
	-1000, 2333, 2333, -1000, 21825, -1000, 23212, -1000, -1000, -1000,
	23903, 767, -1000, 21799, -1000, -1000, -1000, -1000, 9064, 1100,
	172, 23725, 21509, -1000, -1000, 8785, -1000, -1000, -1000, -1000,
	-1000, 1382, -1000, -1000, 16050, 907, -1000, -1000, 8785, 23504,
	171, 1069, 169, -1000, -1000, -1000, 730, -1000, -1000, 23903,
	1293, -1000, -1000, 16050, 16050, 501, -115, 16050, -1000, -1000,
	4813, 16050, 708, 9622, 1294, 33, 16050, 1294, 21480, 4514,
	-122, -1000, 1069, -1000, 708, 165, -39, -1000, 1332, 1440,
	-1000, 16050, 23903, -1000, 1003, -1000, 4237, -128, -1000, 2333,
	2333, -1000, -1000, 45, 841, 1301, -1000, 2813, 9064, 23725,
	-132, -1000, 21454, -1000, -1000, 1171, 21164, 958, 16050, -1000,
	16050, 16050, 405, 16050, -1000, -1000, 556, -1000, 383, -1000,
	161, 1069, -1000, -1000, -1000, -1000, 1281, -33, 708, -1000,
	1069, 9622, 16050, 159, -1000, -134, -1000, -1000, -1000, -1000,
	706, 8785, 2813, -136, -1000, -1000, 1165, -1000, 848, 808,
	44, -138, 86, -1000, 8785, -1000, 12315, -1000, 16050, -1000,
	1294, 43, 1069, -1000, -142, -1000, -1000, -1000, 24, 8506,
	8506, -133, -1000, 16050, -1000, 855, 852, 607, -1000, -1000,
	-1000, -1000, -1000, 958, 23903, -119, -154, -1000, -1000, -1000,
	708, -1000, -1000, -1000, 9343, 880, 593, 22835, -1000, -1000,
	-1000, 1222, -1000, 413, 981, 981, 848, -1000, 813, 1069,
	1377, -1000, -1000, -1000, -1000, -1000, -1000, 1384, -1000, -1000,
	993, -1000, -1000, -1000, -1000, -1000, -1000, 8227, -1000, -1000,
	-1000, -1000,
}
var sqlPgo = [...]int{

	0, 1696, 1695, 1329, 120, 1694, 118, 1693, 1690, 1687,
	1686, 1684, 104, 116, 114, 124, 1683, 93, 1681, 1679,
	1678, 87, 1672, 1670, 1669, 35, 1656, 1652, 1651, 1650,
	1648, 1646, 81, 24, 133, 1928, 128, 1645, 1642, 1640,
	10, 94, 58, 1639, 76, 1638, 1637, 56, 89, 105,
	1097, 22, 1635, 1633, 129, 32, 16, 111, 92, 137,
	132, 113, 1630, 1628, 1627, 40, 1624, 4, 1623, 1622,
	13, 48, 41, 1621, 20, 18, 1619, 1618, 125, 1617,
	63, 97, 107, 25, 122, 79, 1616, 44, 11, 66,
	1615, 30, 1614, 36, 72, 130, 1612, 51, 142, 59,
	23, 55, 1611, 1610, 1608, 1603, 74, 1602, 90, 62,
	1601, 1600, 77, 1599, 119, 127, 1598, 1597, 115, 1594,
	1592, 1588, 652, 1587, 1586, 271, 1585, 5, 43, 57,
	12, 102, 99, 15, 1583, 19, 1582, 1793, 819, 629,
	1576, 54, 47, 75, 49, 50, 21, 1573, 1572, 100,
	1571, 1569, 1568, 1565, 1564, 73, 1563, 65, 135, 34,
	52, 80, 33, 46, 82, 98, 144, 103, 1562, 1561,
	110, 1560, 201, 1556, 1554, 926, 112, 1553, 1551, 1549,
	731, 709, 624, 294, 1547, 1543, 537, 451, 1539, 1537,
	108, 1527, 1524, 138, 134, 86, 1522, 109, 1521, 84,
	1520, 0, 88, 85, 1518, 121, 70, 1515, 1513, 1502,
	1501, 27, 1, 9, 6, 7, 3, 31, 29, 1496,
	1493, 126, 95, 1489, 145, 1488, 1487, 1486, 26, 1485,
	17, 1484, 14, 1481, 1480, 8, 2, 141, 1478, 91,
	1477, 1357, 1471, 136, 1470, 1468, 1381, 78,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 4, 4, 42,
	42, 41, 41, 41, 41, 41, 41, 41, 41, 41,
	41, 41, 41, 41, 41, 41, 39, 39, 44, 44,
	44, 46, 46, 43, 43, 38, 38, 5, 5, 5,
	6, 6, 6, 6, 6, 12, 13, 13, 13, 13,
	13, 13, 13, 13, 84, 84, 83, 83, 86, 86,
	14, 14, 15, 15, 15, 15, 15, 15, 15, 15,
	171, 171, 170, 16, 147, 147, 17, 17, 17, 17,
	18, 107, 107, 19, 19, 19, 19, 20, 24, 237,
	237, 237, 241, 241, 242, 242, 243, 243, 243, 243,
	243, 243, 243, 239, 239, 27, 27, 27, 27, 27,
	126, 122, 122, 124, 124, 124, 124, 49, 121, 121,
	121, 121, 123, 123, 123, 123, 194, 193, 193, 199,
	199, 199, 62, 62, 62, 62, 62, 63, 63, 63,
	192, 192, 192, 192, 200, 200, 200, 200, 200, 200,
	64, 64, 64, 198, 198, 28, 28, 28, 28, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
	28, 28, 28, 238, 238, 240, 240, 29, 29, 9,
	9, 10, 10, 65, 65, 66, 66, 129, 129, 129,
	129, 67, 67, 45, 45, 45, 128, 209, 209, 210,
	210, 210, 210, 210, 210, 211, 211, 211, 211, 211,
	211, 211, 207, 207, 208, 205, 205, 206, 206, 206,
	206, 244, 244, 127, 127, 70, 70, 214, 214, 214,
	214, 212, 212, 212, 212, 212, 215, 213, 216, 216,
	216, 216, 216, 158, 158, 158, 31, 11, 8, 8,
	111, 111, 74, 74, 162, 162, 162, 56, 56, 40,
	40, 40, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 112, 112, 113, 113, 22, 26, 30, 30, 30,
	30, 30, 246, 246, 53, 53, 53, 53, 54, 54,
	125, 125, 125, 125, 125, 48, 7, 7, 47, 47,
	21, 21, 21, 21, 21, 59, 59, 118, 118, 118,
	120, 120, 119, 119, 119, 97, 97, 32, 79, 79,
	88, 88, 89, 89, 168, 90, 90, 25, 25, 35,
	35, 33, 33, 33, 33, 33, 33, 34, 34, 36,
	36, 36, 36, 36, 36, 36, 222, 222, 222, 224,
	224, 221, 223, 223, 245, 245, 98, 98, 98, 69,
	68, 68, 72, 72, 71, 73, 73, 161, 95, 95,
	95, 95, 114, 115, 115, 116, 116, 117, 117, 94,
	94, 144, 144, 37, 37, 78, 78, 80, 80, 135,
	135, 136, 136, 134, 134, 134, 163, 163, 163, 163,
	164, 164, 164, 164, 164, 164, 159, 159, 159, 159,
	160, 160, 169, 169, 101, 101, 101, 101, 99, 99,
	100, 100, 165, 165, 165, 165, 96, 96, 166, 166,
	166, 130, 130, 172, 172, 172, 77, 77, 77, 173,
	173, 173, 173, 173, 173, 173, 173, 173, 173, 173,
	173, 173, 174, 174, 174, 174, 176, 176, 176, 175,
	175, 175, 175, 175, 175, 175, 175, 175, 175, 175,
	175, 175, 175, 177, 177, 184, 184, 185, 185, 186,
	187, 178, 178, 179, 179, 180, 181, 188, 188, 188,
	188, 190, 190, 182, 182, 182, 182, 182, 183, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 109, 109, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 217, 217, 217, 217,
	217, 217, 217, 219, 219, 220, 220, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 225, 225, 226, 226, 228, 228, 229,
	229, 230, 231, 231, 231, 232, 233, 233, 227, 227,
	234, 234, 234, 235, 235, 236, 236, 236, 236, 236,
	149, 149, 149, 150, 150, 151, 85, 85, 146, 146,
	145, 145, 145, 148, 148, 102, 189, 189, 189, 189,
	189, 189, 189, 103, 103, 110, 104, 104, 105, 105,
	105, 105, 105, 105, 141, 142, 106, 106, 106, 143,
	143, 152, 156, 156, 155, 154, 154, 153, 153, 133,
	133, 133, 133, 132, 131, 91, 91, 247, 247, 157,
	157, 92, 92, 93, 87, 87, 167, 167, 167, 167,
	81, 81, 61, 61, 82, 82, 57, 57, 60, 58,
	58, 58, 58, 75, 75, 76, 76, 55, 55, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	191, 191, 191, 50, 50, 50, 51, 51, 52, 52,
	196, 196, 196, 197, 197, 197, 197, 195, 195, 195,
	195, 195, 201, 201, 201, 201, 201, 201, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	201, 201, 201, 201, 201, 203, 203, 203, 203, 203,
	203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
	203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
	203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
	203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
	203, 203, 203, 203, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 4, 6, 1,
	3, 2, 5, 3, 6, 4, 6, 6, 6, 4,
	8, 3, 3, 3, 6, 4, 3, 2, 1, 1,
	0, 2, 0, 2, 0, 2, 0, 4, 6, 7,
	1, 1, 1, 1, 1, 6, 3, 5, 4, 6,
	4, 6, 4, 6, 1, 3, 1, 2, 2, 3,
	2, 5, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 1, 5, 3, 0, 1, 1, 1, 1,
	3, 3, 0, 2, 3, 2, 3, 6, 6, 1,
	2, 2, 1, 1, 1, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 2, 3, 6, 3, 1,
	5, 2, 1, 1, 1, 3, 3, 2, 3, 3,
	3, 3, 1, 3, 3, 2, 1, 1, 3, 1,
	1, 1, 2, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 1, 1, 1,
	1, 1, 0, 1, 1, 2, 2, 4, 2, 4,
	4, 4, 4, 4, 4, 4, 2, 3, 4, 3,
	2, 4, 3, 2, 0, 2, 0, 8, 8, 7,
	10, 6, 9, 1, 0, 1, 3, 1, 1, 1,
	1, 8, 0, 1, 1, 0, 3, 2, 0, 3,
	1, 2, 2, 3, 6, 2, 1, 1, 2, 4,
	2, 5, 7, 8, 5, 3, 1, 4, 6, 5,
	10, 1, 1, 4, 0, 3, 0, 2, 2, 2,
	0, 1, 1, 2, 2, 0, 3, 3, 2, 1,
	1, 2, 2, 1, 2, 1, 4, 6, 11, 14,
	1, 0, 1, 3, 3, 3, 5, 2, 0, 1,
	1, 0, 6, 6, 8, 6, 8, 8, 10, 8,
	10, 1, 0, 2, 0, 2, 2, 3, 3, 2,
	2, 2, 1, 0, 1, 3, 2, 0, 2, 1,
	1, 1, 3, 3, 0, 3, 4, 7, 3, 0,
	6, 6, 8, 5, 7, 1, 3, 1, 4, 2,
	8, 5, 4, 3, 0, 2, 0, 8, 2, 0,
	1, 3, 1, 1, 3, 5, 5, 1, 1, 3,
	3, 1, 2, 3, 2, 3, 4, 1, 1, 8,
	8, 1, 2, 4, 4, 4, 2, 2, 3, 1,
	3, 6, 1, 0, 1, 0, 1, 1, 0, 1,
	1, 0, 1, 0, 3, 1, 3, 2, 2, 2,
	1, 1, 2, 2, 3, 1, 1, 1, 1, 3,
	0, 2, 0, 2, 3, 3, 0, 1, 3, 3,
	1, 1, 3, 2, 4, 0, 3, 2, 1, 4,
	3, 4, 5, 4, 5, 4, 5, 2, 4, 1,
	1, 0, 5, 0, 2, 2, 2, 1, 1, 0,
	4, 2, 1, 2, 2, 4, 1, 3, 1, 2,
	3, 2, 0, 2, 5, 2, 3, 4, 0, 1,
	1, 1, 1, 2, 4, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 5, 0, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 2,
	2, 1, 1, 3, 0, 1, 1, 1, 1, 5,
	2, 1, 1, 1, 1, 4, 1, 2, 2, 1,
	1, 1, 0, 1, 1, 4, 1, 4, 1, 1,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 0, 1, 4, 1, 3, 3, 3, 5,
	2, 2, 2, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 2, 2, 3, 4, 3, 4,
	4, 5, 3, 3, 3, 3, 3, 4, 3, 3,
	4, 3, 4, 3, 4, 5, 6, 6, 7, 6,
	7, 6, 7, 3, 4, 1, 3, 3, 2, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	5, 6, 6, 7, 1, 1, 1, 3, 1, 1,
	1, 2, 2, 2, 1, 1, 3, 5, 6, 8,
	6, 6, 4, 4, 1, 1, 1, 5, 1, 3,
	1, 3, 1, 1, 1, 1, 6, 6, 4, 4,
	4, 4, 6, 5, 5, 5, 4, 8, 6, 6,
	4, 4, 4, 5, 0, 5, 0, 2, 0, 1,
	3, 3, 2, 2, 0, 6, 1, 0, 3, 0,
	2, 2, 0, 1, 4, 2, 2, 2, 2, 2,
	4, 3, 5, 4, 3, 5, 1, 3, 1, 3,
	3, 3, 2, 1, 3, 3, 1, 1, 1, 1,
	1, 1, 1, 4, 3, 2, 3, 0, 3, 3,
	2, 2, 1, 0, 2, 2, 3, 2, 1, 1,
	3, 5, 1, 2, 4, 2, 0, 1, 0, 1,
	1, 3, 5, 2, 2, 1, 2, 1, 0, 1,
	1, 1, 3, 3, 1, 3, 3, 2, 1, 1,
	1, 3, 1, 3, 1, 3, 1, 2, 3, 1,
	1, 2, 2, 1, 3, 3, 0, 1, 2, 1,
	1, 1, 1, 6, 2, 3, 5, 1, 1, 1,
	1, 2, 2, 1, 1, 1, 1, 0, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -6, -12, -13, -14,
	-16, -18, -19, -20, -21, -23, -24, -26, -25, -27,
	-28, -29, -30, -22, -31, -32, 23, 64, -7, -8,
	-9, -10, -11, -223, 92, 100, 194, 99, 85, 115,
	208, 215, -33, -35, 223, -126, 224, 34, 233, 58,
	95, 210, 205, 254, 66, -222, -36, -34, 301, 276,
	282, 218, -37, 241, 268, 304, 241, 129, 78, -57,
	-50, 4, -201, -203, 20, 21, 23, 33, 34, 39,
	43, 46, 57, 58, 59, 61, 63, 64, 65, 68,
	69, 76, 77, 78, 79, 81, 85, 87, 91, 92,
	94, 99, 100, 105, 106, 109, 111, 116, 121, 122,
	123, 130, 133, 128, 142, 144, 145, 150, 153, 156,
	158, 159, 160, 161, 162, 164, 165, 167, 169, 166,
	172, 174, 175, 181, 184, 187, 188, 189, 192, 194,
	196, 197, 198, 200, 201, 205, 203, 204, 206, 208,
	210, 211, 213, 215, 216, 217, 220, 221, 223, 224,
	226, 229, 232, 233, 234, 237, 235, 231, 240, 242,
	243, 250, 254, 255, 256, 257, 260, 261, 262, 265,
	266, 267, 272, 277, 278, 279, 280, 28, 35, 36,
	37, 38, 40, 41, 44, 45, 49, 50, 51, 53,
	80, 82, 83, 98, 101, 107, 117, 119, 124, 125,
	134, 135, 136, 137, 139, 148, 171, 173, 182, 186,
	191, 193, 199, 212, 219, 227, 228, 236, 238, 245,
	246, 247, 251, 252, 268, 269, 87, 133, 262, 261,
	78, 129, 241, 271, -15, 301, -25, -6, -13, -4,
	-21, -32, -12, -14, 23, -50, -50, -50, 194, 22,
	-241, 22, -242, -243, 66, 92, 115, 218, 133, 87,
	261, -241, -54, 215, -50, -122, 153, 221, 212, 250,
	-123, -121, -194, 245, 162, -83, -50, 4, 78, 57,
	79, 116, 129, 130, 62, 63, 145, 242, 245, 250,
	22, 66, 121, -246, 250, 250, -246, -246, -53, 250,
	248, -54, -245, 241, 241, 271, -111, 78, 259, -34,
	-36, -35, -71, -72, 258, 138, 97, 180, -33, -35,
	-222, -224, 200, -221, -50, -224, -68, -69, 22, 89,
	305, -165, -57, 178, -93, 301, -3, -165, 124, -57,
	-60, 124, -57, -50, 113, 301, -91, -133, -132, -131,
	299, 303, 113, 140, 140, -166, -165, -50, 124, -61,
	124, -60, -84, 124, -83, -84, 124, -171, -170, -197,
	4, -201, -203, -202, 268, 55, 67, 114, 132, 126,
	141, 143, 149, 151, 163, 183, 185, 209, 225, 241,
	-147, 301, -107, 301, -50, 22, 177, 305, 177, -50,
	-122, 51, -122, 301, -124, -48, -49, 142, 196, 248,
	286, 113, 280, -64, 5, 84, -86, 303, 113, -238,
	177, 113, 113, 113, 113, 113, 113, 280, 142, 196,
	241, -195, 4, -201, -203, -202, -204, 22, 24, 25,
	26, 27, 29, 30, 31, 32, 42, 47, 48, 52,
	54, 56, 62, 66, 70, 71, 72, 73, 74, 75,
	84, 86, 88, 89, 90, 93, 95, 97, 102, 103,
	104, 110, 112, 113, 115, 118, 120, 127, 129, 131,
	138, 140, 146, 147, 152, 154, 155, 168, 170, 176,
	177, 178, 179, 180, 190, 195, 202, 207, 218, 222,
	230, 239, 241, 244, 248, 249, 253, 258, 259, 263,
	264, 270, 271, 273, 274, 275, 276, -125, -48, -49,
	-125, 248, -54, -96, -165, -83, 124, -83, 129, -50,
	124, -71, -72, -95, -114, -115, 152, 176, -98, 22,
	89, -98, -98, 43, 302, 302, 305, -224, -76, 301,
	-87, -167, -137, 294, -139, 292, 293, 298, 168, 281,
	-149, -57, -140, 9, 301, -152, -219, -35, 98, 29,
	-150, -151, 212, -50, 7, 8, 5, 6, -55, -174,
	-183, 253, 102, 170, 47, -217, -218, 4, -201, -196,
	-175, -185, -179, -182, 139, 55, 71, 74, 72, 75,
	222, 263, 48, 28, 101, 186, 191, 238, 251, 252,
	124, 171, 125, 53, 117, 148, 91, 36, 38, 40,
	41, 49, 50, 80, 82, 83, 107, 134, 135, 136,
	137, 173, 199, 227, 236, 246, 247, 269, -202, -186,
	-187, -180, -181, -188, -87, -93, 294, -57, 301, -92,
	-157, -137, 84, -42, 203, -41, 21, 23, 92, 266,
	98, 231, 231, 203, 98, 306, 203, 234, 302, -81,
	-57, -133, -137, -195, 294, -166, -59, -57, -59, 223,
	-50, 30, 98, -44, 305, 46, 206, 98, -44, 305,
	98, -44, 98, 302, 305, -165, 124, 30, -146, -172,
	-173, -175, -184, -178, -182, -183, 39, 45, 44, 243,
	219, 228, 37, 134, 135, 136, 137, 227, 36, 199,
	107, 91, 83, 82, 173, 41, 40, -186, -187, -180,
	-181, 80, 246, 247, 139, 38, 50, 49, 269, 236,
	-85, -137, -237, -82, 241, 78, -58, -50, 294, -243,
	-237, 30, -85, 305, 305, 150, -63, 156, 167, 122,
	-193, 84, -199, -192, -158, 9, 253, 102, 177, -198,
	8, 293, -191, -197, 5, 7, 292, -193, 84, 69,
	-200, 5, 4, -183, -158, 84, 153, 303, -195, -194,
	-240, 110, -237, -194, -194, -194, -194, -194, -50, 150,
	-194, 305, 305, -54, -44, 305, 301, -70, 168, -70,
	301, -51, 124, -50, -47, 94, 168, -95, -115, -114,
	-116, -137, 22, -137, -139, -34, -34, -34, -73, -161,
	-137, -221, 30, -75, -50, -78, 305, 113, 10, 11,
	54, 33, 292, 293, 294, 295, 108, 296, 289, 290,
	291, 288, 284, 285, 286, 60, 157, 214, 13, 14,
	15, 26, 179, 151, 281, 126, 225, 298, 16, 17,
	18, 141, 35, 127, 30, 4, -137, -137, -137, -137,
	-137, 185, -35, -137, -85, -91, -35, -145, 299, 301,
	-91, 301, 5, 5, 301, -153, -137, -225, 277, 110,
	301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
	301, 301, 301, 301, 301, 301, 193, -190, 272, -190,
	-190, -176, 301, -176, -177, 301, -176, 278, 282, 301,
	-78, -57, 305, 302, 305, 248, -112, 62, 56, -128,
	124, 56, -205, -50, 62, -206, 52, 259, 195, 112,
	-112, 62, -112, 62, 62, -165, 33, 33, 248, -60,
	-50, 248, 113, 302, 305, 300, 309, -130, 274, -118,
	-25, 301, 84, 30, -118, -88, -89, -168, -90, -57,
	301, -50, -50, -60, -61, -83, -84, -84, -15, -170,
	98, -17, -25, -21, -32, -12, 302, 305, -77, 29,
	-108, 301, 279, 160, 81, 123, 159, -109, 217, 302,
	305, 248, 305, -82, -75, -132, -131, 113, 250, 302,
	-49, -48, -62, 198, 229, 204, 220, 305, 8, 7,
	7, 5, -195, -239, -50, -49, -48, -165, -65, -75,
	-66, -50, -129, -128, -207, -208, -205, 129, 259, 103,
	30, 98, 30, 177, 168, 286, 98, -117, 212, 213,
	305, -40, 31, 88, 301, 305, 302, -130, -167, -80,
	-163, -165, -35, -164, 301, -172, -172, -83, 245, -137,
	-137, -137, -137, -137, -137, -137, -137, -137, -137, -137,
	-137, -137, -137, -137, -137, -137, -137, -137, -137, -137,
	-137, 151, 126, 225, 35, 127, -137, 248, -137, -137,
	-137, -137, 170, 168, 253, 102, 260, 89, 174, -247,
	239, 32, -143, -35, 301, -195, -149, 212, 301, 302,
	305, -85, -148, 300, -145, -85, 302, 302, -85, 270,
	22, 89, 294, -108, 7, -156, -155, 273, -226, 105,
	118, 301, 302, 302, -137, -137, -102, -189, 4, 279,
	160, 81, 123, 159, 217, -103, -137, -104, -138, -139,
	292, 293, 298, 301, 212, -105, -137, -85, -137, 42,
	147, 249, -106, -137, 113, -85, -137, -137, -137, -85,
	-85, -85, 301, 7, 7, 245, 245, 7, -130, 302,
	-157, -41, -57, -50, -50, 168, -128, 124, -46, 168,
	-172, -50, 301, 301, 144, 144, -50, -50, 124, -50,
	124, -50, -50, -42, 203, 301, 301, -50, 203, -50,
	234, 113, -57, -137, -97, 207, -137, -97, -120, 177,
	-81, 268, -50, 207, -79, 305, 113, 286, -81, -44,
	-44, -44, -165, -172, 299, 299, 7, 248, 248, 248,
	248, 301, -137, -239, -58, -239, -48, 257, 59, 198,
	-199, -108, 305, 302, 302, 305, -51, 129, -51, -25,
	-83, -25, -57, 98, 5, -50, -161, -17, -50, -94,
	118, -169, 305, 283, 67, -101, 143, 163, 114, 149,
	209, 132, -134, 306, -160, -159, 30, -50, -35, -164,
	-163, 280, -137, -137, 248, -247, 239, -143, -137, 170,
	253, 102, 260, 89, 174, 113, 301, -138, -138, -85,
	301, -85, -137, 300, 300, 305, 302, -72, 305, -71,
	-137, -85, -85, 302, 302, -154, -155, 93, -137, -231,
	184, 301, 301, -137, 30, 305, 302, 113, 302, -110,
	190, 302, 10, 11, 292, 293, 294, 295, 108, 296,
	289, 290, 291, 288, 284, 285, 286, 60, 157, 214,
	13, 14, 15, 141, 127, -138, -138, -138, -85, 301,
	302, -141, -142, 113, 110, 30, -106, -106, -106, 302,
	113, -85, 305, 305, 305, 302, 302, 302, 7, 302,
	305, 302, 280, 280, 302, -94, 248, 248, 98, 168,
	265, -209, -206, -137, -75, 301, 301, -39, 92, 223,
	-113, 98, -44, 98, -44, 248, -112, 62, -85, -85,
	248, 234, 300, -87, 207, 61, 302, -87, -130, -89,
	-80, -157, 302, 300, 7, 7, 302, 160, 123, 159,
	-109, 159, -109, -109, 7, -50, -67, 128, -129, 301,
	-51, 301, 301, -70, 301, -50, -47, 302, -144, 120,
	43, -163, 174, 143, 143, -163, -101, 143, -99, 183,
	-99, -99, -160, -195, 307, -50, 301, 302, -137, -137,
	-138, -138, 113, 301, -137, -146, 26, 26, 302, -85,
	302, 305, 302, -145, 302, 270, -72, -72, -72, 5,
	95, -137, 244, -232, -50, 301, 274, -71, 302, -172,
	-172, -137, -141, -137, -172, -172, -138, -138, -138, -138,
	-138, -138, -138, -138, -138, -138, -138, -138, -138, -138,
	-138, -138, -138, -138, -138, 89, 168, 174, -138, 305,
	-85, 302, -142, -141, -137, -137, -172, 302, 302, 302,
	-85, -137, -137, -137, 302, 7, -144, -50, -50, -128,
	98, -210, 62, -211, 54, 103, 66, 168, 170, 259,
	195, 52, 84, 202, 302, 302, -75, -75, 168, 84,
	168, 84, 77, 255, -50, -50, -57, -50, -50, 302,
	302, -50, -87, -119, 301, 177, -25, -97, 286, 300,
	300, 302, 127, -74, -162, -50, -220, 301, -217, -218,
	-55, 301, -75, -65, 30, -74, 177, -228, 275, -137,
	-85, 240, -163, -163, -100, 264, 177, 143, -163, -136,
	-135, 111, 166, 301, -75, -159, 26, 26, -137, -146,
	302, -137, -137, 302, -137, 5, -137, 302, 302, 302,
	-137, -233, -50, -137, 302, 302, 302, -142, 113, 89,
	174, 301, -137, 302, 302, 305, 302, 302, 302, -228,
	-128, -50, -83, -50, 103, 124, 170, 144, 301, -138,
	-57, -127, -244, 65, 237, 302, 302, 170, 170, -137,
	-172, -44, -44, 248, 248, 90, -75, 62, -93, -35,
	301, 187, 302, 305, -56, -91, 54, -56, -137, 301,
	-74, 302, 302, -25, 302, -57, -229, -230, -50, 245,
	-100, 301, -137, -163, 305, 308, 286, -75, 302, -137,
	-137, 302, 302, -72, -227, 189, 302, -138, 113, 301,
	-146, 302, -137, -211, -51, 168, -137, -52, 301, -67,
	301, 202, -43, 54, -50, -50, 261, 169, 302, -50,
	-50, -127, -162, -40, -83, -40, 302, -85, 302, -67,
	-127, 301, 305, 30, 5, -75, -135, -195, 302, 302,
	-72, 43, -138, -146, 302, 302, 98, 302, -214, 158,
	-50, -75, -57, -38, 264, -83, 223, -130, 301, -67,
	-56, -72, -127, -67, -74, -230, -232, 302, -234, 197,
	213, -85, 302, 103, -212, -215, -213, 177, 114, 188,
	226, 302, 302, -70, -137, -88, -75, -40, 302, -67,
	302, 302, -235, -236, 35, 256, 69, -137, -235, -50,
	-213, 177, -215, 177, 261, 87, -214, -130, 302, -127,
	-236, 192, 109, 212, 192, 109, -216, 165, 206, 46,
	223, -216, -212, -45, 46, 206, -67, 26, 20, 170,
	84, -236,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 0, 0, 60, 61,
	62, 63, 64, 0, 0, 373, 0, 0, 0, 0,
	0, 0, 347, -2, 0, 129, 0, 303, 0, 303,
	303, 307, 0, 375, 271, 372, -2, 383, 0, 0,
	0, 381, 361, 0, 0, -2, 0, 0, 0, 0,
	776, 803, 804, 805, 822, 823, 824, 825, 826, 827,
	828, 829, 830, 831, 832, 833, 834, 835, 836, 837,
	838, 839, 840, 841, 842, 843, 844, 845, 846, 847,
	848, 849, 850, 851, 852, 853, 854, 855, 856, 857,
	858, 859, 860, 861, 862, 863, 864, 865, 866, 867,
	868, 869, 870, 871, 872, 873, 874, 875, 876, 877,
	878, 879, 880, 881, 882, 883, 884, 885, 886, 887,
	888, 889, 890, 891, 892, 893, 894, 895, 896, 897,
	898, 899, 900, 901, 902, 903, 904, 905, 906, 907,
	908, 909, 910, 911, 912, 913, 914, 915, 916, 917,
	918, 919, 920, 921, 922, 923, 924, 925, 926, 927,
	928, 929, 930, 931, 932, 933, 934, 935, 936, 937,
	938, 939, 940, 941, 942, 943, 944, 945, 946, 947,
	948, 949, 950, 951, 952, 953, 954, 955, 956, 957,
	958, 959, 960, 961, 962, 963, 964, 965, 966, 967,
	968, 969, 970, 971, 972, 973, 974, 975, 976, 977,
	978, 979, 980, 981, 982, 983, 0, 0, 0, 0,
	0, 0, 0, 0, 80, 0, 82, 83, 84, 85,
	86, 87, 88, 89, 0, 95, 102, 103, 887, 105,
	0, 112, 113, 114, 116, 117, 118, 119, 120, 121,
	122, 0, 296, 901, 309, 125, 866, 905, 971, 919,
	132, 142, 0, 977, -2, 146, 76, 175, 176, 0,
	178, 194, 0, 0, 0, 0, 0, 186, 0, 0,
	190, 0, 0, 314, 302, 314, 299, 300, 301, 304,
	0, 295, 0, 374, 0, 0, 0, 0, 270, -2,
	357, 358, -2, 0, 378, 378, 378, 0, 0, 358,
	0, 366, 891, 369, 786, 367, 0, 0, 380, 379,
	0, 362, 442, 0, 403, 0, 2, 0, 956, 442,
	0, 956, 0, 0, 0, 0, 777, 755, 749, 750,
	0, 0, 0, 0, 0, 0, 448, 66, 956, 50,
	956, 772, 50, 956, 74, 50, 956, 0, 90, 92,
	813, 814, 815, 816, 982, 984, 985, 986, 987, 988,
	989, 990, 991, 992, 993, 994, 995, 996, 997, 0,
	0, 0, 100, 0, 104, 106, 0, 0, 0, 308,
	126, 946, 128, 0, 131, 133, 134, 0, 0, 0,
	0, 0, 0, 145, 170, 171, 77, 0, 0, 196,
	0, 0, 0, 0, 0, 0, 0, 187, 0, 189,
	0, 192, 817, 818, 819, 820, 821, 998, 999, 1000,
	1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010,
	1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020,
	1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030,
	1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040,
	1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050,
	1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060,
	1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070,
	1071, 1072, 1073, 1074, 1075, 1076, 1077, 297, 310, 311,
	298, 0, 306, 50, 446, 246, 956, 246, 807, 319,
	956, -2, 0, 353, 390, 391, 0, 0, 0, 376,
	377, 0, 0, 0, 349, 350, 0, 368, 0, 0,
	406, 764, 768, 769, 535, 0, 0, 0, 0, 0,
	0, 624, 625, 626, 0, 628, 629, 630, 951, 0,
	634, 635, 971, 776, 789, 790, 791, 792, 0, 0,
	0, 797, 798, 799, 748, 674, 644, -2, -2, 787,
	472, 473, 474, 475, -2, 984, 648, 650, 652, 653,
	654, 655, 0, 935, 952, 967, 968, 976, 980, 981,
	956, 964, 957, 947, 954, 963, 846, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, 812, 497,
	498, 503, 504, 506, 406, 404, 443, 444, 0, 0,
	761, 759, 760, 27, 292, 29, 0, 292, 292, 0,
	0, 0, 0, 0, 0, 0, 0, 57, 0, 0,
	770, 756, 0, 753, 754, 452, 0, 325, 0, 0,
	449, 0, 0, 68, 0, 48, 49, 0, 70, 0,
	0, 72, 0, 373, 0, 0, 956, 373, 0, 708,
	458, 459, 460, 461, 462, 532, 465, 466, 467, 468,
	469, 470, 471, 479, 480, 481, 482, 483, 484, 485,
	494, 0, 478, 478, 478, 491, 492, 495, 496, 501,
	502, 513, 514, 516, 518, 512, 512, 512, 509, 510,
	0, 706, 0, 109, 0, 841, 774, 779, 780, 115,
	0, 0, 0, 0, 0, 0, 137, 157, 158, 159,
	138, 140, 147, 149, 150, 151, 160, 161, 162, 163,
	263, 0, 265, 173, 174, 800, 0, 139, 141, 143,
	144, 164, 165, 0, 167, 168, 169, 0, 78, 177,
	179, 0, 193, 180, 181, 182, 183, 184, 185, 188,
	191, 0, 0, 305, 266, 0, 204, 0, 0, 0,
	0, 0, 956, 806, 316, 0, 0, 356, 388, 389,
	392, 395, 396, 393, 535, 363, 364, 365, 384, 385,
	281, 370, 0, 0, 783, 452, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 758, 0, 0, 767, 540, 541, 542, 564,
	565, 0, -2, 706, 0, 631, 632, 633, 0, 0,
	-2, 0, 794, 532, 0, 0, 747, 676, 0, 0,
	0, 0, 0, 0, 0, 0, 727, 733, 0, 0,
	0, 0, 0, 0, 0, 0, 487, 500, 511, 508,
	507, 489, 0, 488, 486, 0, 490, 0, 0, 0,
	452, 0, 0, 763, 0, 0, 0, 0, 291, 31,
	956, 0, 52, 0, 0, 236, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	778, 0, 0, 0, 0, 751, 0, 336, 0, 336,
	327, 0, 0, 0, 323, 339, 340, 342, 343, 0,
	0, 450, 67, 773, 50, 75, 50, 50, 81, 91,
	0, 93, 96, 97, 98, 99, 94, 0, 453, 455,
	463, 0, 519, 520, 521, 522, 523, 524, 533, 101,
	0, 0, 0, 110, 111, 781, 782, 0, 0, 130,
	135, 136, 315, 0, 154, 0, 156, 0, 264, 802,
	801, 532, 79, 195, 123, 312, 313, 447, 0, 0,
	203, 783, 205, 207, 208, 209, 210, 807, 0, 807,
	0, 0, 0, 0, 0, 0, 0, 394, 397, 398,
	0, 387, 279, 280, 373, 0, 785, 400, 765, 433,
	407, 415, 431, 418, 0, 536, 537, 538, 0, 543,
	544, 545, 546, 547, 548, 549, 550, 551, 552, -2,
	-2, -2, 556, 557, 558, -2, -2, -2, 562, 563,
	-2, 0, 0, 0, 758, 0, -2, 0, 572, -2,
	-2, -2, 576, 0, 579, 581, 583, 0, 0, 0,
	0, 757, 593, 739, 0, 766, 578, 0, 0, 627,
	0, 0, 0, 712, 713, 0, -2, 636, 383, 0,
	0, 0, 0, 795, 0, 746, 742, 0, 684, 0,
	0, 0, 649, 651, 0, 0, 0, 0, 716, 717,
	718, 719, 720, 721, 722, 0, 0, 0, 0, 595,
	0, 0, 0, 0, 971, 0, 706, 732, 0, 0,
	0, 0, 0, 706, 0, 738, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 400, 445,
	762, 30, 283, 0, 0, 0, 33, 956, 41, 0,
	218, 0, 0, 0, 0, 0, 294, 42, 956, 50,
	956, 50, 43, 28, 292, 0, 0, 285, 0, 282,
	58, 0, 771, 0, 65, 0, 451, 320, 321, 0,
	0, 329, 326, 0, 452, 0, 0, 0, 0, 69,
	71, 73, 0, 709, 0, 0, 0, 0, 0, 0,
	0, 0, 707, 107, 775, 108, 127, 152, 153, 155,
	148, 166, 0, 212, 245, 0, 0, 807, 0, 201,
	246, 267, 0, 0, 318, 319, 386, 0, 784, 402,
	0, 405, 0, 0, 0, 0, 0, 0, 439, 439,
	439, 437, 431, 0, 417, 430, 0, 429, -2, 418,
	0, 0, -2, -2, 0, 0, 0, 594, -2, 577,
	580, 582, 584, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 707, 710, 711, 0, -2, 0, 0, 382,
	383, 383, 383, 642, 0, 0, 743, 0, 0, 643,
	0, 0, 0, 0, 0, 0, 658, 0, 659, 0,
	0, 660, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 598, 599, 600, 0, 0,
	661, 730, 731, 0, 0, 0, 0, 0, 0, 666,
	0, 737, 0, 0, 0, 670, 671, 672, 0, 476,
	0, 493, 515, 517, 505, 402, 0, 0, 0, 0,
	51, 216, 235, 0, 0, 0, 0, 35, 0, 0,
	0, 0, 39, 0, 45, 0, 0, 0, 0, 0,
	0, 59, 752, 335, 0, 334, 0, 324, 336, 341,
	338, 344, 0, 456, 0, 0, 464, 525, 526, 527,
	528, 529, 530, 531, 0, 124, 199, 0, 206, 0,
	0, 0, 204, 0, 0, 0, 317, 371, 678, 0,
	0, 408, 0, 0, 0, 0, 0, 0, 434, 438,
	435, 436, 416, 413, 0, 427, 0, 420, 539, -2,
	0, 0, 0, 0, -2, 0, 0, 0, 740, 0,
	701, 0, -2, 714, 637, 0, 0, 0, 0, 796,
	741, 745, 0, 682, 683, 687, 0, 0, 647, 0,
	0, 715, 724, 725, 596, 597, 601, 602, 603, 604,
	605, 606, 607, 608, 609, 610, -2, -2, -2, 614,
	615, 616, -2, -2, -2, 0, 0, 0, 726, 0,
	0, 704, 728, 729, 734, 735, 0, 663, 664, 665,
	736, 0, 0, 0, 499, 0, 678, 287, 289, 32,
	0, 217, 0, 220, 0, 0, 0, 0, 226, 227,
	0, 0, 0, 0, 237, 244, 0, 0, 0, 47,
	0, 0, 293, 0, 50, 50, 284, 0, 0, 197,
	198, 286, 322, 0, 0, 0, 328, 337, 0, 457,
	454, 534, 0, 0, 272, 278, 278, 0, 645, 646,
	0, 0, 0, 0, 0, 0, 0, 359, 0, 401,
	399, 0, 421, 0, 423, 0, 0, 0, 425, 0,
	411, 0, 410, 0, 0, 419, 0, 0, -2, 0,
	587, -2, -2, 700, 707, 793, 383, 638, 640, 641,
	744, 689, 686, 0, 673, 656, 657, 723, 0, 0,
	0, 0, 707, 703, 662, 0, 668, 669, 477, 360,
	34, 0, 221, 222, 807, 0, 225, 228, 0, 230,
	809, 212, 0, 241, 242, 239, 0, 36, 37, 46,
	54, 38, 44, 0, 0, 0, 0, 0, 345, 346,
	0, 0, 244, 0, 281, 788, 0, 281, 0, 0,
	0, 234, 212, 202, 244, 0, 677, 679, 0, 0,
	422, 0, 441, 424, 0, 414, 0, 0, 428, -2,
	-2, 588, 702, 0, 383, 0, 675, -2, 0, 0,
	0, 705, 0, 219, 223, 0, 0, 250, 0, 238,
	0, 0, 56, 0, 288, 290, 0, 331, 452, 333,
	0, 212, 273, 274, 277, 275, 278, 383, 244, 200,
	212, 0, 0, 0, 432, 0, 412, 409, 426, 639,
	692, 0, -2, 0, 622, 667, 0, 229, 255, 0,
	0, 0, 246, 40, 0, 53, 0, 332, 0, 232,
	281, 0, 212, 268, 0, 680, 681, 440, 0, 0,
	0, 688, 623, 0, 231, 251, 252, 0, 247, 248,
	249, 808, 243, 250, 55, 452, 0, 276, 637, 233,
	244, 685, 690, 693, -2, 922, 838, 0, 691, 224,
	253, 0, 254, 0, 0, 0, 255, 330, 215, 212,
	0, 695, 696, 697, 698, 699, 256, 0, 259, 260,
	0, 257, 240, 211, 213, 214, 269, 0, 258, 261,
	262, 694,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 290, 3, 296, 291, 3,
	301, 302, 294, 292, 305, 293, 303, 295, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 309, 304,
	284, 286, 285, 3, 306, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 299, 3, 300, 289, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 307, 288, 308, 298,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 287, 57627, 297, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:728
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:734
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:740
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 18:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:764
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 26:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:775
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 27:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:781
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 28:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:785
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 29:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:791
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 30:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:795
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 31:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:802
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 32:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:807
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 33:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:812
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:817
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:822
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 36:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:827
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:831
		{
			unimplemented()
		}
	case 38:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:834
		{
			sqlVAL.union.val = &AlterTableDropColumn{columnKeyword: sqlDollar[2].union.bool(), IfExists: true, Column: Name(sqlDollar[5].str)}
		}
	case 39:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:839
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:849
		{
			unimplemented()
		}
	case 41:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:852
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 42:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:859
		{
			unimplemented()
		}
	case 43:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:862
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 44:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:869
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 45:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:878
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 46:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:888
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 47:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:892
		{
			sqlVAL.union.val = nil
		}
	case 48:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:898
		{
			sqlVAL.union.val = DropCascade
		}
	case 49:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:902
		{
			sqlVAL.union.val = DropRestrict
		}
	case 50:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:906
		{
			sqlVAL.union.val = DropDefault
		}
	case 51:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:912
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 52:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:916
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 53:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:921
		{
			unimplementedWithIssue(2473)
		}
	case 54:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:922
		{
		}
	case 55:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:925
		{
			unimplemented()
		}
	case 56:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:926
		{
		}
	case 57:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:930
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 58:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:934
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:938
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:953
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retExprs()}
		}
	case 66:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:960
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:964
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:968
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 69:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:976
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 70:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:984
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 71:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:988
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 72:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:992
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 73:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:996
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 74:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1002
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 75:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1006
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 76:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1012
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1016
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 78:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1022
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1026
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 80:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1033
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1037
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1043
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 89:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1052
		{ /* SKIP DOC */
		}
	case 90:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1056
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1060
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 93:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1070
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1080
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 95:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1084
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 96:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1090
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1100
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1111
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 102:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1115
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 103:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1122
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1128
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1134
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1138
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1145
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1152
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1159
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1163
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1167
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1174
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1177
		{
		}
	case 114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1181
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1185
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1192
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1196
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1200
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1204
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1208
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1212
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1216
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1224
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1228
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 125:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1236
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 126:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1240
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 127:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1244
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1248
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 129:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1251
		{ /* SKIP DOC */
		}
	case 130:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1257
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1263
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1270
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1274
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1278
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1282
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1289
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1295
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1299
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1303
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1307
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1314
		{
			unimplemented()
		}
	case 144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1317
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1320
		{
			unimplemented()
		}
	case 147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1327
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1331
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1339
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1345
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1349
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1353
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 155:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1357
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1361
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1367
		{
			sqlVAL.union.val = Low
		}
	case 158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1371
		{
			sqlVAL.union.val = Normal
		}
	case 159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1375
		{
			sqlVAL.union.val = High
		}
	case 160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1381
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1385
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1389
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1404
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1408
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1412
		{
			d, err := ParseDInterval(sqlDollar[2].str)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1422
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1426
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1431
		{
			unimplemented()
		}
	case 171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1432
		{
			unimplemented()
		}
	case 172:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1433
		{
		}
	case 173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1437
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1441
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1447
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1451
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1455
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1459
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1463
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1467
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1471
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1475
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1479
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1483
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1487
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1491
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1495
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1499
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1503
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1507
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 191:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1511
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1515
		{
			sqlVAL.union.val = &ShowHelp{Name: Name(sqlDollar[3].str)}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1521
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 194:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1526
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 195:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1532
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 196:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1536
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 197:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1542
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.normalizableTableName(), Exprs: sqlDollar[7].union.exprs()}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1546
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Exprs: sqlDollar[7].union.exprs()}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1553
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1557
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1563
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1567
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1574
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 205:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1580
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1584
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 207:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1590
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 210:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1596
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 211:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1602
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1610
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1617
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 214:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1621
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 215:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1625
		{
			sqlVAL.union.val = DropDefault
		}
	case 216:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1631
		{
			sqlVAL.union.val = newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
		}
	case 217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1637
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 218:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1641
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 219:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1647
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1651
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1654
		{
			unimplemented()
		}
	case 222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1656
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1660
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 224:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1664
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1682
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 226:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1686
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1690
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1694
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 229:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1698
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1702
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 231:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1706
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1715
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1724
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1737
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1749
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 236:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1754
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 237:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1760
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1766
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    NameListToIndexElems(sqlDollar[3].union.nameList()),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1776
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[4].union.nameList()),
				},
				PrimaryKey: true,
			}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1786
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1809
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 244:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1813
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1819
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 246:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1823
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 247:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1828
		{
			unimplemented()
		}
	case 248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1829
		{
			unimplemented()
		}
	case 249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1830
		{
			unimplemented()
		}
	case 250:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1831
		{
		}
	case 251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1838
		{
			unimplemented()
		}
	case 252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1839
		{
			unimplemented()
		}
	case 253:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1840
		{
			unimplemented()
		}
	case 254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1841
		{
			unimplemented()
		}
	case 255:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1842
		{
		}
	case 256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1845
		{
			unimplemented()
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1848
		{
			unimplemented()
		}
	case 258:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1851
		{
			unimplemented()
		}
	case 259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1852
		{
			unimplemented()
		}
	case 260:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1853
		{
			unimplemented()
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1854
		{
			unimplemented()
		}
	case 262:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1855
		{
			unimplemented()
		}
	case 263:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1859
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 264:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1863
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1867
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 266:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1874
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1881
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:1894
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:1905
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1919
		{
			sqlVAL.union.val = true
		}
	case 271:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1923
		{
			sqlVAL.union.val = false
		}
	case 272:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1929
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1933
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1942
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1945
		{
			unimplemented()
		}
	case 276:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1946
		{
			unimplemented()
		}
	case 277:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1949
		{
			unimplemented()
		}
	case 278:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1950
		{
		}
	case 279:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1954
		{
			sqlVAL.union.val = Ascending
		}
	case 280:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1958
		{
			sqlVAL.union.val = Descending
		}
	case 281:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1962
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 282:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1969
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1973
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1977
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1981
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1985
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1989
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1993
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1997
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 290:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2001
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 291:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2007
		{
			sqlVAL.union.val = true
		}
	case 292:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2011
		{
			sqlVAL.union.val = false
		}
	case 293:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2016
		{
		}
	case 294:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2017
		{
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2021
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2027
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2034
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 298:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2038
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 299:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2042
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2046
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2050
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2059
		{
		}
	case 303:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2060
		{
		}
	case 304:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2064
		{
			sqlVAL.str = ""
		}
	case 305:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2068
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 306:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2072
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 307:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2076
		{
			sqlVAL.str = ""
		}
	case 308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2082
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 309:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2086
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 310:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2092
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2096
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2100
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2104
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2108
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2114
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 316:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2120
		{
			sqlVAL.union.val = &CreateDatabase{Name: Name(sqlDollar[3].str), Encoding: sqlDollar[4].union.strVal()}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2124
		{
			sqlVAL.union.val = &CreateDatabase{IfNotExists: true, Name: Name(sqlDollar[6].str), Encoding: sqlDollar[7].union.strVal()}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2130
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2133
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 320:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2143
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retExprs()
		}
	case 321:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2149
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
		}
	case 322:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2154
		{
			unimplementedWithIssue(6637)
		}
	case 323:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2156
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2161
		{
			unimplementedWithIssue(6637)
		}
	case 325:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2169
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 326:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2173
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2179
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2183
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2187
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2193
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2197
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2203
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 333:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2207
		{
			unimplemented()
		}
	case 334:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2209
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 335:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2215
		{
			sqlVAL.union.val = sqlDollar[2].union.selExprs()
		}
	case 336:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2219
		{
			sqlVAL.union.val = SelectExprs(nil)
		}
	case 337:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2226
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retExprs()}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2232
		{
			unimplementedWithIssue(7841)
		}
	case 339:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2233
		{
		}
	case 340:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2237
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2241
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2251
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2263
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2267
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2311
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2317
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2321
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2336
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2340
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2344
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2348
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2352
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2356
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 359:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2390
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 360:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2403
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2416
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 363:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2424
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2433
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 365:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2442
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2460
		{
			unimplemented()
		}
	case 367:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2461
		{
			unimplemented()
		}
	case 368:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2462
		{
			unimplemented()
		}
	case 369:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2465
		{
			unimplemented()
		}
	case 370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2466
		{
			unimplemented()
		}
	case 371:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2469
		{
			unimplemented()
		}
	case 372:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2472
		{
			unimplemented()
		}
	case 373:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2473
		{
		}
	case 374:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2476
		{
		}
	case 375:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2477
		{
		}
	case 376:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2481
		{
			sqlVAL.union.val = true
		}
	case 377:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2485
		{
			sqlVAL.union.val = false
		}
	case 378:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2489
		{
			sqlVAL.union.val = false
		}
	case 379:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2495
		{
			sqlVAL.union.val = true
		}
	case 380:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2500
		{
		}
	case 381:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2501
		{
		}
	case 382:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2505
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 383:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2509
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 384:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2515
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 385:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2521
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2525
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 387:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2531
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2539
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2548
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2559
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2572
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2579
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2586
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 397:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2600
		{
		}
	case 398:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2601
		{
		}
	case 399:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2627
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 400:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2631
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 401:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2637
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 402:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2641
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 403:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2647
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2651
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2663
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2667
		{
			sqlVAL.union.val = &From{}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2673
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2677
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2683
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2688
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2694
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2699
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			index := a.Index
			if index == "" {
				index = b.Index
			} else if b.Index != "" {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			noIndexJoin := a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = &IndexHints{Index: index, NoIndexJoin: noIndexJoin}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2719
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2723
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 415:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2727
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2734
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), As: sqlDollar[3].union.aliasClause()}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2738
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, As: sqlDollar[2].union.aliasClause()}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2742
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 419:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2746
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[2].union.tblExpr(), As: sqlDollar[4].union.aliasClause()}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2766
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2770
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2774
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2778
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2782
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2786
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2792
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2796
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2800
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2804
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2811
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2817
		{
			sqlVAL.union.val = AsOfClause{Expr: &StrVal{s: sqlDollar[5].str}}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2821
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2827
		{
			sqlVAL.str = astFullJoin
		}
	case 435:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2831
		{
			sqlVAL.str = astLeftJoin
		}
	case 436:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2835
		{
			sqlVAL.str = astRightJoin
		}
	case 437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2839
		{
			sqlVAL.str = astInnerJoin
		}
	case 438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2845
		{
		}
	case 439:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2846
		{
		}
	case 440:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2857
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2861
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2867
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 443:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2871
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 444:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2875
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 445:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2879
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 446:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2885
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2889
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 448:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2902
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 449:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2906
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2910
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2916
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 452:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2920
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 453:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2932
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 454:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2936
		{
			unimplementedWithIssue(2115)
		}
	case 455:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2937
		{
			unimplementedWithIssue(2115)
		}
	case 456:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2940
		{
			unimplementedWithIssue(2115)
		}
	case 457:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2941
		{
			unimplementedWithIssue(2115)
		}
	case 458:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2942
		{
		}
	case 464:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2950
		{
			unimplemented()
		}
	case 465:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2952
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 466:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2956
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 467:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2960
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 468:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2964
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 469:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2968
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2972
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 471:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2976
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 476:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2997
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3006
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3020
		{
			sqlVAL.union.val = nil
		}
	case 479:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3027
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 480:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3031
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 481:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3035
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 482:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3039
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 483:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3043
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 484:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3047
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 485:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3051
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 486:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3055
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newFloatColType(int(prec))
		}
	case 487:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3064
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 488:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3068
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3077
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3086
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3095
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 492:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3099
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 493:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3105
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 494:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3109
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3127
		{
			n, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 500:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3143
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 505:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3159
		{
			n, err := sqlDollar[3].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3175
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 507:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3181
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 508:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3185
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 509:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3189
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 510:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3193
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 511:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3198
		{
		}
	case 512:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3199
		{
		}
	case 513:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3204
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 514:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3208
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 515:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3212
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 516:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3216
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 517:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3220
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 518:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3225
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 519:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3230
		{
			unimplemented()
		}
	case 520:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3231
		{
			unimplemented()
		}
	case 521:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3232
		{
			unimplemented()
		}
	case 522:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3233
		{
			unimplemented()
		}
	case 523:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3234
		{
			unimplemented()
		}
	case 524:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3235
		{
			unimplemented()
		}
	case 525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3236
		{
			unimplemented()
		}
	case 526:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3237
		{
			unimplemented()
		}
	case 527:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3238
		{
			unimplemented()
		}
	case 528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3239
		{
			unimplemented()
		}
	case 529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3240
		{
			unimplemented()
		}
	case 530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3241
		{
			unimplemented()
		}
	case 531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3242
		{
			unimplemented()
		}
	case 532:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3243
		{
		}
	case 533:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3246
		{
			unimplemented()
		}
	case 534:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3247
		{
			unimplemented()
		}
	case 536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3271
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3275
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3278
		{
			unimplemented()
		}
	case 539:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3279
		{
			unimplemented()
		}
	case 540:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3288
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3292
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3296
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3300
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3304
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3308
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3312
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3316
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3320
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3324
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3328
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3332
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3336
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3340
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3344
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3348
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3352
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3356
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3360
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3364
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3368
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3372
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3376
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3380
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3384
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3388
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3392
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3396
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3400
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3404
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3408
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3412
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3416
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3420
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3424
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3428
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3432
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3436
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3439
		{
			unimplemented()
		}
	case 579:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3441
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3445
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3449
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3453
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3457
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3461
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3465
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3469
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3473
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3477
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3481
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3485
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3489
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3493
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3497
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3501
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3518
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3522
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3526
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3530
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3534
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3538
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3542
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3546
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3550
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3554
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3558
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3562
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3566
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3570
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3574
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3578
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3582
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3586
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3590
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3594
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3598
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3602
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3606
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3610
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3614
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3618
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3622
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3626
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3638
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 626:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3643
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3647
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3653
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3657
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3661
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3667
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 634:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3671
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 635:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3675
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3683
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName()}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3687
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3690
		{
			unimplemented()
		}
	case 639:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3691
		{
			unimplemented()
		}
	case 640:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3693
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Type: All, Exprs: sqlDollar[4].union.exprs()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3697
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Type: Distinct, Exprs: sqlDollar[4].union.exprs()}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3701
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Exprs: Exprs{StarExpr()}}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3714
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 644:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3720
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 645:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3729
		{
			unimplemented()
		}
	case 646:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3730
		{
			unimplemented()
		}
	case 647:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3734
		{
			unimplemented()
		}
	case 648:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3736
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3740
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3744
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3748
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3751
		{
			unimplemented()
		}
	case 653:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3752
		{
			unimplemented()
		}
	case 654:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3753
		{
			unimplemented()
		}
	case 655:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3754
		{
			unimplemented()
		}
	case 656:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3756
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3760
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3764
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3768
		{
			sqlVAL.union.val = &OverlayExpr{FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3772
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3776
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3779
		{
			unimplemented()
		}
	case 663:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3781
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3785
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3789
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3793
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3797
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3801
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3805
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3809
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3813
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3817
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3823
		{
			unimplemented()
		}
	case 674:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3824
		{
		}
	case 675:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3827
		{
			unimplemented()
		}
	case 676:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3828
		{
		}
	case 677:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3833
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 678:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3837
		{
			sqlVAL.union.val = Window(nil)
		}
	case 679:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3843
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3847
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 681:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3853
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 682:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3861
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 683:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3865
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3869
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 685:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3876
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3895
		{
			sqlVAL.str = ""
		}
	case 688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3901
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 689:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3905
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 690:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3915
		{
			unimplemented()
		}
	case 691:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3916
		{
			unimplemented()
		}
	case 692:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3917
		{
		}
	case 693:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3920
		{
			unimplemented()
		}
	case 694:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3921
		{
			unimplemented()
		}
	case 695:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3927
		{
			unimplemented()
		}
	case 696:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3928
		{
			unimplemented()
		}
	case 697:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3929
		{
			unimplemented()
		}
	case 698:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3930
		{
			unimplemented()
		}
	case 699:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3931
		{
			unimplemented()
		}
	case 700:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3942
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3946
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3950
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3956
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3960
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3966
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4009
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4013
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 708:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4019
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4023
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 710:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4029
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4033
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4037
		{
			sqlVAL.union.val = &Array{nil}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4043
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4047
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 715:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4053
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4075
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4079
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4085
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 726:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4092
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4096
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 728:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4113
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4117
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4121
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4125
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4129
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 733:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4133
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 734:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4139
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 735:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4145
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 736:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4151
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 737:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4155
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 738:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4159
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 739:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4165
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4169
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4180
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4187
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4191
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 744:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4197
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4203
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 746:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4207
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 748:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4214
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 749:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4220
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 750:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4224
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 751:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4228
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4232
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr()}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4238
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 754:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4244
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4250
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4254
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 757:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4259
		{
		}
	case 758:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4260
		{
		}
	case 760:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4269
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4275
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4279
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 763:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4288
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 764:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4294
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4298
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 766:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4304
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4313
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4317
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4321
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 770:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4329
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4333
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 772:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4339
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4343
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 774:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4349
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4353
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 776:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4364
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4368
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 778:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4374
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4385
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4389
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4393
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4397
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4403
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4407
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 785:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4413
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 786:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4416
		{
		}
	case 787:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4426
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4430
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 789:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4437
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 790:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4441
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 791:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4445
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4449
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4452
		{
			unimplemented()
		}
	case 794:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4454
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4458
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4462
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[5].str}, Type: sqlDollar[1].union.colType()}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4466
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 798:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4470
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 799:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4474
		{
			sqlVAL.union.val = DNull
		}
	case 801:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4481
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 802:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4485
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 807:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4507
		{
			sqlVAL.str = ""
		}
	case 808:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4513
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 809:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4517
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
