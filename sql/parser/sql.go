// Code generated by go yacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"errors"
	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/sql/privilege"
	"github.com/cockroachdb/cockroach/util"
)

var errUnimplemented = errors.New("unimplemented")

func unimplemented() {
	panic(errUnimplemented)
}

func unimplementedWithIssue(issue int) {
	panic(util.UnimplementedWithIssueErrorf(issue, ""))
}

//line sql.y:43

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new sytax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in two forms, depending on the
// type of the value being accessed. Values and pointers are directly
// type asserted from the empty interface, meaning that they will panic
// if the type assertion is incorrect. Interfaces are handled differently
// because a nil instance of an interface inserted into the empty interface
// becomes a nil instance of the empty interface and therefore will fail a
// direct type assertion. Instead, a guarded type assertion must be used,
// which returns nil if the type assertion fails.
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	return u.val.(*StrVal)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) qname() *QualifiedName {
	return u.val.(*QualifiedName)
}
func (u *sqlSymUnion) qnames() QualifiedNames {
	return u.val.(QualifiedNames)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) indirectElem() IndirectionElem {
	if indirectElem, ok := u.val.(IndirectionElem); ok {
		return indirectElem
	}
	return nil
}
func (u *sqlSymUnion) indirect() Indirection {
	return u.val.(Indirection)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	if selectStmt, ok := u.val.(*Select); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	if selectStmt, ok := u.val.(SelectStatement); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	if constraintDef, ok := u.val.(ConstraintTableDef); ok {
		return constraintDef
	}
	return nil
}
func (u *sqlSymUnion) tblDef() TableDef {
	if tblDef, ok := u.val.(TableDef); ok {
		return tblDef
	}
	return nil
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() ColumnQualification {
	if colQual, ok := u.val.(ColumnQualification); ok {
		return colQual
	}
	return nil
}
func (u *sqlSymUnion) colQuals() []ColumnQualification {
	return u.val.([]ColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retExprs() ReturningExprs {
	return ReturningExprs(u.val.(SelectExprs))
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	if tblExpr, ok := u.val.(TableExpr); ok {
		return tblExpr
	}
	return nil
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	if joinCond, ok := u.val.(JoinCond); ok {
		return joinCond
	}
	return nil
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	if alterTableCmd, ok := u.val.(AlterTableCmd); ok {
		return alterTableCmd
	}
	return nil
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}

//line sql.y:275
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PARAM = 57351
const TYPECAST = 57352
const DOT_DOT = 57353
const LESS_EQUALS = 57354
const GREATER_EQUALS = 57355
const NOT_EQUALS = 57356
const ERROR = 57357
const ACTION = 57358
const ADD = 57359
const ALL = 57360
const ALTER = 57361
const ANALYSE = 57362
const ANALYZE = 57363
const AND = 57364
const ANY = 57365
const ARRAY = 57366
const AS = 57367
const ASC = 57368
const ASYMMETRIC = 57369
const AT = 57370
const BEGIN = 57371
const BETWEEN = 57372
const BIGINT = 57373
const BIT = 57374
const BLOB = 57375
const BOOL = 57376
const BOOLEAN = 57377
const BOTH = 57378
const BY = 57379
const BYTEA = 57380
const BYTES = 57381
const CASCADE = 57382
const CASE = 57383
const CAST = 57384
const CHAR = 57385
const CHARACTER = 57386
const CHARACTERISTICS = 57387
const CHECK = 57388
const COALESCE = 57389
const COLLATE = 57390
const COLLATION = 57391
const COLUMN = 57392
const COLUMNS = 57393
const COMMIT = 57394
const COMMITTED = 57395
const CONCAT = 57396
const CONFLICT = 57397
const CONSTRAINT = 57398
const COVERING = 57399
const CREATE = 57400
const CROSS = 57401
const CUBE = 57402
const CURRENT = 57403
const CURRENT_CATALOG = 57404
const CURRENT_DATE = 57405
const CURRENT_ROLE = 57406
const CURRENT_TIME = 57407
const CURRENT_TIMESTAMP = 57408
const CURRENT_USER = 57409
const CYCLE = 57410
const DATA = 57411
const DATABASE = 57412
const DATABASES = 57413
const DATE = 57414
const DAY = 57415
const DEC = 57416
const DECIMAL = 57417
const DEFAULT = 57418
const DEFERRABLE = 57419
const DELETE = 57420
const DESC = 57421
const DISTINCT = 57422
const DO = 57423
const DOUBLE = 57424
const DROP = 57425
const ELSE = 57426
const ENCODING = 57427
const END = 57428
const ESCAPE = 57429
const EXCEPT = 57430
const EXISTS = 57431
const EXPLAIN = 57432
const EXTRACT = 57433
const FALSE = 57434
const FETCH = 57435
const FILTER = 57436
const FIRST = 57437
const FLOAT = 57438
const FLOORDIV = 57439
const FOLLOWING = 57440
const FOR = 57441
const FORCE_INDEX = 57442
const FOREIGN = 57443
const FROM = 57444
const FULL = 57445
const GRANT = 57446
const GRANTS = 57447
const GREATEST = 57448
const GROUP = 57449
const GROUPING = 57450
const HAVING = 57451
const HIGH = 57452
const HOUR = 57453
const IF = 57454
const IFNULL = 57455
const IN = 57456
const INDEX = 57457
const INDEXES = 57458
const INITIALLY = 57459
const INNER = 57460
const INSERT = 57461
const INT = 57462
const INT64 = 57463
const INTEGER = 57464
const INTERSECT = 57465
const INTERVAL = 57466
const INTO = 57467
const IS = 57468
const ISOLATION = 57469
const JOIN = 57470
const KEY = 57471
const KEYS = 57472
const LATERAL = 57473
const LEADING = 57474
const LEAST = 57475
const LEFT = 57476
const LEVEL = 57477
const LIKE = 57478
const LIMIT = 57479
const LOCAL = 57480
const LOCALTIME = 57481
const LOCALTIMESTAMP = 57482
const LOW = 57483
const LSHIFT = 57484
const MATCH = 57485
const MINUTE = 57486
const MONTH = 57487
const NAME = 57488
const NAMES = 57489
const NATURAL = 57490
const NEXT = 57491
const NO = 57492
const NO_INDEX_JOIN = 57493
const NORMAL = 57494
const NOT = 57495
const NOTHING = 57496
const NULL = 57497
const NULLIF = 57498
const NULLS = 57499
const NUMERIC = 57500
const OF = 57501
const OFF = 57502
const OFFSET = 57503
const ON = 57504
const ONLY = 57505
const OR = 57506
const ORDER = 57507
const ORDINALITY = 57508
const OUT = 57509
const OUTER = 57510
const OVER = 57511
const OVERLAPS = 57512
const OVERLAY = 57513
const PARTIAL = 57514
const PARTITION = 57515
const PLACING = 57516
const POSITION = 57517
const PRECEDING = 57518
const PRECISION = 57519
const PRIMARY = 57520
const PRIORITY = 57521
const RANGE = 57522
const READ = 57523
const REAL = 57524
const RECURSIVE = 57525
const REF = 57526
const REFERENCES = 57527
const RENAME = 57528
const REPEATABLE = 57529
const RELEASE = 57530
const RESTRICT = 57531
const RETURNING = 57532
const REVOKE = 57533
const RIGHT = 57534
const ROLLBACK = 57535
const ROLLUP = 57536
const ROW = 57537
const ROWS = 57538
const RSHIFT = 57539
const SAVEPOINT = 57540
const SEARCH = 57541
const SECOND = 57542
const SELECT = 57543
const SERIAL = 57544
const SERIALIZABLE = 57545
const SESSION = 57546
const SESSION_USER = 57547
const SET = 57548
const SHOW = 57549
const SIMILAR = 57550
const SIMPLE = 57551
const SMALLINT = 57552
const SNAPSHOT = 57553
const SOME = 57554
const SQL = 57555
const START = 57556
const STRICT = 57557
const STRING = 57558
const STORING = 57559
const SUBSTRING = 57560
const SYMMETRIC = 57561
const TABLE = 57562
const TABLES = 57563
const TEXT = 57564
const THEN = 57565
const TIME = 57566
const TIMESTAMP = 57567
const TIMESTAMPTZ = 57568
const TO = 57569
const TRAILING = 57570
const TRANSACTION = 57571
const TREAT = 57572
const TRIM = 57573
const TRUE = 57574
const TRUNCATE = 57575
const TYPE = 57576
const UNBOUNDED = 57577
const UNCOMMITTED = 57578
const UNION = 57579
const UNIQUE = 57580
const UNKNOWN = 57581
const UPDATE = 57582
const UPSERT = 57583
const USER = 57584
const USING = 57585
const VALID = 57586
const VALIDATE = 57587
const VALUE = 57588
const VALUES = 57589
const VARCHAR = 57590
const VARIADIC = 57591
const VARYING = 57592
const WHEN = 57593
const WHERE = 57594
const WINDOW = 57595
const WITH = 57596
const WITHIN = 57597
const WITHOUT = 57598
const YEAR = 57599
const ZONE = 57600
const NOT_LA = 57601
const WITH_LA = 57602
const POSTFIXOP = 57603
const UMINUS = 57604

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PARAM",
	"TYPECAST",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXPLAIN",
	"EXTRACT",
	"FALSE",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HOUR",
	"IF",
	"IFNULL",
	"IN",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARTIAL",
	"PARTITION",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SNAPSHOT",
	"SOME",
	"SQL",
	"START",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"TABLE",
	"TABLES",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:4403

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 21,
	281, 21,
	-2, 324,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 32,
	1, 295,
	162, 295,
	190, 295,
	279, 295,
	281, 295,
	-2, 305,
	-1, 44,
	1, 298,
	162, 298,
	190, 298,
	279, 298,
	281, 298,
	-2, 304,
	-1, 53,
	1, 21,
	281, 21,
	-2, 324,
	-1, 242,
	1, 138,
	281, 138,
	-2, 800,
	-1, 274,
	137, 334,
	161, 334,
	-2, 301,
	-1, 277,
	137, 333,
	161, 333,
	-2, 299,
	-1, 389,
	137, 333,
	161, 333,
	-2, 302,
	-1, 445,
	278, 744,
	-2, 739,
	-1, 446,
	278, 745,
	-2, 740,
	-1, 452,
	5, 463,
	278, 463,
	-2, 882,
	-1, 474,
	5, 430,
	-2, 859,
	-1, 475,
	5, 458,
	278, 458,
	-2, 860,
	-1, 476,
	5, 438,
	-2, 861,
	-1, 477,
	5, 437,
	-2, 862,
	-1, 478,
	5, 458,
	278, 458,
	-2, 865,
	-1, 479,
	5, 458,
	278, 458,
	-2, 866,
	-1, 480,
	5, 459,
	-2, 869,
	-1, 481,
	5, 425,
	-2, 870,
	-1, 482,
	5, 425,
	-2, 871,
	-1, 483,
	5, 440,
	-2, 874,
	-1, 484,
	5, 426,
	-2, 879,
	-1, 485,
	5, 427,
	-2, 880,
	-1, 486,
	5, 428,
	-2, 881,
	-1, 487,
	5, 425,
	-2, 885,
	-1, 488,
	5, 431,
	-2, 890,
	-1, 489,
	5, 429,
	-2, 893,
	-1, 490,
	5, 456,
	278, 456,
	-2, 894,
	-1, 491,
	5, 460,
	-2, 897,
	-1, 492,
	5, 461,
	-2, 898,
	-1, 493,
	5, 455,
	278, 455,
	-2, 902,
	-1, 756,
	88, 305,
	123, 305,
	137, 305,
	161, 305,
	165, 305,
	237, 305,
	-2, 567,
	-1, 764,
	278, 724,
	-2, 713,
	-1, 964,
	12, 0,
	13, 0,
	14, 0,
	261, 0,
	262, 0,
	263, 0,
	-2, 497,
	-1, 965,
	12, 0,
	13, 0,
	14, 0,
	261, 0,
	262, 0,
	263, 0,
	-2, 498,
	-1, 966,
	12, 0,
	13, 0,
	14, 0,
	261, 0,
	262, 0,
	263, 0,
	-2, 499,
	-1, 970,
	12, 0,
	13, 0,
	14, 0,
	261, 0,
	262, 0,
	263, 0,
	-2, 503,
	-1, 971,
	12, 0,
	13, 0,
	14, 0,
	261, 0,
	262, 0,
	263, 0,
	-2, 504,
	-1, 972,
	12, 0,
	13, 0,
	14, 0,
	261, 0,
	262, 0,
	263, 0,
	-2, 505,
	-1, 975,
	30, 0,
	114, 0,
	136, 0,
	208, 0,
	259, 0,
	-2, 510,
	-1, 1006,
	170, 637,
	-2, 640,
	-1, 1162,
	88, 305,
	123, 305,
	137, 305,
	161, 305,
	165, 305,
	237, 305,
	-2, 382,
	-1, 1170,
	30, 0,
	114, 0,
	136, 0,
	208, 0,
	259, 0,
	-2, 511,
	-1, 1175,
	30, 0,
	114, 0,
	136, 0,
	208, 0,
	259, 0,
	-2, 512,
	-1, 1194,
	170, 636,
	-2, 639,
	-1, 1341,
	30, 0,
	114, 0,
	136, 0,
	208, 0,
	259, 0,
	-2, 513,
	-1, 1346,
	126, 0,
	-2, 523,
	-1, 1355,
	170, 638,
	-2, 641,
	-1, 1396,
	12, 0,
	13, 0,
	14, 0,
	261, 0,
	262, 0,
	263, 0,
	-2, 548,
	-1, 1397,
	12, 0,
	13, 0,
	14, 0,
	261, 0,
	262, 0,
	263, 0,
	-2, 549,
	-1, 1398,
	12, 0,
	13, 0,
	14, 0,
	261, 0,
	262, 0,
	263, 0,
	-2, 550,
	-1, 1402,
	12, 0,
	13, 0,
	14, 0,
	261, 0,
	262, 0,
	263, 0,
	-2, 554,
	-1, 1403,
	12, 0,
	13, 0,
	14, 0,
	261, 0,
	262, 0,
	263, 0,
	-2, 555,
	-1, 1404,
	12, 0,
	13, 0,
	14, 0,
	261, 0,
	262, 0,
	263, 0,
	-2, 556,
	-1, 1503,
	126, 0,
	-2, 524,
	-1, 1507,
	30, 0,
	114, 0,
	136, 0,
	208, 0,
	259, 0,
	-2, 527,
	-1, 1508,
	30, 0,
	114, 0,
	136, 0,
	208, 0,
	259, 0,
	-2, 529,
	-1, 1590,
	30, 0,
	114, 0,
	136, 0,
	208, 0,
	259, 0,
	-2, 528,
	-1, 1591,
	30, 0,
	114, 0,
	136, 0,
	208, 0,
	259, 0,
	-2, 530,
	-1, 1599,
	126, 0,
	-2, 557,
	-1, 1638,
	126, 0,
	-2, 558,
	-1, 1683,
	30, 0,
	136, 0,
	208, 0,
	259, 0,
	-2, 858,
}

const sqlNprod = 994
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 20996

var sqlAct = [...]int{

	1003, 1682, 1665, 1544, 1643, 1703, 1666, 1681, 1667, 844,
	901, 1607, 1375, 444, 278, 1577, 1566, 713, 443, 436,
	1467, 1347, 1491, 1434, 590, 910, 87, 506, 836, 1253,
	1468, 1485, 300, 1159, 759, 887, 31, 1479, 1318, 243,
	884, 1197, 494, 1019, 761, 1348, 1252, 1158, 1327, 694,
	886, 1103, 535, 14, 1149, 845, 812, 691, 512, 1145,
	408, 821, 1058, 988, 1023, 991, 1013, 790, 794, 438,
	20, 913, 709, 563, 879, 377, 548, 1109, 285, 43,
	515, 66, 10, 283, 6, 1061, 517, 277, 418, 715,
	507, 409, 327, 378, 508, 545, 319, 316, 68, 574,
	911, 323, 283, 321, 64, 838, 43, 889, 328, 318,
	67, 288, 69, 392, 44, 391, 393, 240, 82, 565,
	561, 544, 528, 45, 73, 286, 312, 1583, 537, 537,
	1584, 1679, 43, 837, 1565, 1673, 1672, 1016, 905, 905,
	1664, 1659, 282, 1506, 905, 1640, 841, 1634, 1506, 282,
	905, 1626, 296, 1617, 1565, 303, 905, 1592, 275, 267,
	1506, 313, 496, 1115, 1190, 324, 306, 274, 1587, 1574,
	1564, 905, 1565, 1565, 290, 1017, 1549, 1548, 1529, 905,
	905, 1190, 1509, 1505, 1444, 1190, 1506, 905, 49, 1351,
	1157, 1308, 1190, 718, 1303, 737, 738, 739, 1302, 1270,
	1268, 1303, 1271, 1190, 717, 740, 717, 51, 1018, 1015,
	526, 720, 1267, 746, 1266, 1190, 1629, 1190, 1194, 495,
	1192, 1190, 1191, 451, 716, 1193, 906, 1190, 1409, 905,
	809, 719, 1568, 808, 52, 718, 542, 734, 1354, 543,
	396, 47, 1128, 810, 1147, 1130, 905, 48, 859, 540,
	999, 900, 873, 720, 509, 49, 404, 403, 510, 1196,
	49, 685, 684, 555, 1020, 46, 1190, 554, 344, 510,
	295, 49, 509, 719, 51, 53, 510, 538, 538, 51,
	725, 589, 363, 1680, 1678, 1635, 1573, 1534, 1530, 390,
	51, 1522, 410, 410, 1521, 446, 1516, 747, 1515, 1514,
	1513, 52, 513, 1500, 1462, 1424, 52, 1419, 47, 745,
	384, 1418, 1417, 351, 48, 1358, 389, 52, 1336, 742,
	1317, 1014, 725, 1274, 47, 735, 86, 1272, 501, 86,
	48, 352, 65, 1608, 505, 1260, 86, 46, 1132, 1224,
	1251, 1223, 1168, 86, 86, 1220, 1218, 86, 840, 1377,
	86, 86, 86, 500, 1207, 1201, 86, 86, 86, 86,
	1129, 326, 1074, 1030, 1029, 403, 402, 735, 1628, 383,
	536, 688, 1609, 1601, 996, 1580, 767, 1571, 1563, 86,
	736, 1541, 327, 327, 1115, 381, 716, 1527, 1498, 1494,
	593, 744, 1475, 1345, 718, 701, 703, 1335, 328, 328,
	275, 1314, 710, 1313, 1311, 1286, 594, 1285, 1250, 274,
	313, 1215, 720, 405, 750, 751, 752, 753, 754, 1214,
	1461, 1206, 736, 757, 1187, 1183, 1229, 993, 584, 795,
	798, 1224, 719, 1088, 530, 687, 527, 1087, 1068, 1028,
	904, 801, 743, 770, 731, 732, 733, 788, 730, 727,
	728, 729, 721, 722, 723, 724, 726, 997, 787, 283,
	509, 1273, 762, 786, 510, 785, 764, 552, 784, 551,
	783, 1239, 782, 781, 780, 1238, 779, 578, 585, 778,
	777, 725, 674, 776, 775, 678, 679, 680, 677, 681,
	774, 765, 763, 683, 721, 722, 723, 724, 726, 686,
	46, 1088, 689, 502, 301, 407, 697, 699, 758, 698,
	805, 275, 1589, 1588, 275, 275, 711, 1338, 1229, 1337,
	705, 399, 400, 706, 707, 1585, 1240, 1466, 1116, 895,
	800, 86, 86, 804, 376, 806, 357, 593, 1169, 372,
	358, 718, 772, 1480, 837, 1378, 792, 793, 1210, 1024,
	791, 796, 1111, 594, 815, 1180, 799, 1649, 1692, 720,
	1452, 498, 86, 1239, 86, 861, 86, 1178, 86, 814,
	327, 1124, 266, 865, 265, 1297, 826, 828, 260, 719,
	854, 321, 839, 86, 839, 261, 328, 1693, 57, 1616,
	802, 1557, 1556, 1224, 86, 272, 66, 1233, 1225, 1226,
	1227, 1228, 1230, 1298, 1278, 86, 86, 86, 1706, 86,
	1277, 1071, 1205, 68, 878, 1204, 593, 1203, 1240, 1202,
	1171, 43, 497, 831, 822, 67, 818, 69, 725, 58,
	1176, 867, 594, 234, 1181, 834, 843, 853, 855, 86,
	862, 86, 860, 324, 863, 857, 852, 856, 866, 768,
	980, 326, 326, 721, 722, 723, 724, 726, 1497, 592,
	86, 355, 86, 86, 86, 86, 858, 86, 814, 833,
	832, 86, 380, 953, 813, 1615, 86, 375, 269, 825,
	1229, 518, 86, 519, 990, 1651, 1234, 1231, 1232, 1233,
	1225, 1226, 1227, 1228, 1230, 990, 518, 356, 519, 531,
	86, 1020, 518, 86, 519, 1104, 1700, 1177, 1224, 1102,
	1241, 1242, 1243, 1367, 1179, 1024, 1300, 410, 1704, 1546,
	1502, 1034, 954, 955, 956, 957, 958, 959, 960, 961,
	962, 963, 964, 965, 966, 967, 968, 969, 970, 971,
	972, 973, 974, 975, 907, 270, 1295, 520, 1113, 1692,
	60, 59, 1238, 61, 1123, 1661, 824, 1705, 537, 952,
	1288, 882, 520, 273, 915, 412, 898, 899, 520, 1020,
	524, 1662, 1224, 994, 1707, 593, 978, 1031, 881, 1042,
	523, 1052, 1054, 1059, 1062, 1063, 1064, 804, 921, 883,
	1037, 594, 804, 869, 1610, 1229, 379, 1108, 62, 871,
	86, 1125, 723, 724, 726, 1224, 592, 1004, 908, 513,
	354, 1224, 55, 1044, 86, 872, 823, 789, 86, 1148,
	1597, 86, 86, 870, 1244, 1104, 755, 86, 1038, 86,
	86, 1073, 86, 1699, 353, 86, 86, 86, 1105, 326,
	1239, 1213, 86, 86, 995, 811, 1328, 448, 1000, 1005,
	1099, 1008, 373, 1083, 1227, 1228, 1230, 56, 281, 1229,
	979, 1039, 1036, 1152, 282, 1085, 1053, 1077, 419, 347,
	349, 516, 1065, 1066, 1067, 1668, 1173, 283, 1155, 1547,
	395, 941, 976, 1289, 1691, 592, 354, 989, 1150, 921,
	1106, 1689, 1229, 280, 1153, 1240, 1478, 1078, 1229, 893,
	327, 710, 394, 63, 374, 366, 1118, 538, 1151, 521,
	345, 1698, 1098, 1364, 343, 1525, 328, 1040, 1551, 1016,
	297, 1550, 1487, 297, 521, 308, 395, 1117, 1539, 297,
	521, 308, 1133, 1119, 1114, 282, 1120, 1239, 940, 1121,
	1164, 1122, 920, 1239, 1127, 1669, 1365, 1126, 1131, 1148,
	1280, 283, 1154, 1082, 977, 1363, 894, 1017, 1140, 1235,
	1236, 1237, 54, 1234, 1231, 1232, 1233, 1225, 1226, 1227,
	1228, 1230, 86, 1138, 1035, 1142, 1405, 1170, 696, 690,
	1152, 1175, 941, 43, 86, 86, 1163, 1141, 1167, 1143,
	1018, 1015, 1240, 1152, 1526, 1155, 1713, 1492, 1240, 1448,
	1189, 1644, 1020, 1486, 796, 1326, 799, 279, 1155, 394,
	1198, 1153, 1540, 86, 1670, 86, 793, 792, 1150, 682,
	1451, 556, 1090, 1195, 1153, 1211, 1488, 1450, 1089, 1216,
	283, 1225, 1226, 1227, 1228, 1230, 1323, 1322, 1151, 940,
	353, 311, 1172, 920, 592, 1174, 1020, 310, 1493, 1406,
	757, 1671, 280, 560, 386, 1407, 1059, 1059, 1059, 1319,
	1234, 1231, 1232, 1233, 1225, 1226, 1227, 1228, 1230, 1154,
	1225, 1226, 1227, 1228, 1230, 1712, 1447, 1276, 986, 1186,
	1146, 1027, 1154, 1188, 558, 1600, 283, 1209, 1283, 1524,
	984, 1254, 1344, 1219, 1182, 559, 1199, 1200, 864, 371,
	1440, 369, 1435, 1014, 1449, 410, 1284, 86, 86, 86,
	1433, 368, 367, 86, 410, 364, 86, 513, 1257, 1258,
	1259, 309, 86, 86, 86, 86, 86, 1255, 86, 86,
	1441, 773, 676, 1275, 1026, 1249, 86, 297, 86, 1431,
	1293, 1291, 1279, 1305, 1135, 86, 1262, 1292, 1282, 1294,
	896, 982, 892, 981, 86, 86, 1296, 987, 541, 539,
	86, 704, 534, 525, 522, 1299, 1372, 503, 695, 326,
	1340, 1306, 1341, 1321, 1304, 1307, 1324, 1558, 297, 529,
	529, 1310, 1332, 1346, 593, 1693, 86, 1316, 86, 86,
	1312, 1356, 86, 902, 580, 1560, 397, 1356, 293, 830,
	594, 86, 1329, 1330, 1331, 360, 1325, 1436, 86, 1437,
	86, 1373, 71, 1360, 1361, 1362, 814, 1301, 814, 1568,
	1382, 3, 829, 1384, 827, 1612, 1637, 1320, 401, 718,
	983, 70, 1439, 718, 1630, 842, 712, 985, 1357, 1442,
	259, 553, 1166, 1710, 1711, 1224, 903, 1366, 1368, 1369,
	718, 720, 74, 921, 1499, 1414, 1415, 1379, 398, 1425,
	294, 81, 1370, 1381, 1421, 1422, 1423, 719, 1383, 1339,
	1385, 719, 79, 1352, 1269, 302, 361, 75, 262, 263,
	943, 1072, 1412, 875, 874, 1070, 1069, 921, 1021, 876,
	1511, 1371, 1438, 1136, 921, 877, 766, 268, 76, 1545,
	1413, 410, 1416, 1445, 1446, 583, 582, 72, 576, 571,
	675, 365, 1518, 78, 1426, 1430, 1660, 1212, 1596, 1576,
	1481, 1025, 771, 25, 1470, 1473, 921, 424, 1473, 1440,
	1472, 1474, 1432, 1472, 1474, 1477, 1410, 1281, 888, 595,
	581, 942, 570, 447, 370, 1503, 941, 1420, 1483, 1484,
	1507, 1508, 1489, 1495, 1476, 1510, 1463, 1465, 564, 1441,
	1512, 1459, 573, 1033, 499, 449, 918, 1504, 450, 919,
	1496, 797, 74, 803, 437, 1517, 916, 586, 322, 1520,
	941, 943, 846, 1022, 86, 1208, 769, 941, 423, 429,
	428, 297, 79, 1001, 308, 77, 420, 75, 1490, 1156,
	848, 350, 238, 940, 239, 308, 1482, 920, 308, 1107,
	1528, 86, 1460, 1523, 897, 921, 700, 1290, 76, 941,
	271, 1221, 1051, 1043, 86, 588, 86, 1041, 86, 431,
	1032, 86, 382, 78, 80, 511, 1436, 940, 1437, 587,
	847, 920, 942, 86, 940, 362, 86, 909, 920, 1165,
	406, 1552, 86, 592, 708, 292, 86, 291, 86, 885,
	84, 1439, 359, 244, 1535, 557, 868, 1536, 1442, 264,
	84, 1611, 1570, 1287, 1648, 1538, 940, 289, 289, 1559,
	920, 299, 50, 19, 299, 305, 299, 1569, 1581, 1473,
	299, 314, 299, 244, 1472, 1474, 1572, 17, 1553, 1561,
	16, 15, 1590, 1591, 1567, 13, 1554, 1555, 941, 86,
	12, 11, 1586, 346, 1582, 77, 1579, 18, 1139, 9,
	8, 1438, 921, 7, 24, 23, 22, 1595, 5, 4,
	2, 1, 1604, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1606, 0, 0, 1045, 0, 0, 0, 1602,
	0, 0, 1593, 0, 80, 0, 0, 297, 0, 0,
	0, 1605, 0, 0, 513, 940, 917, 0, 1619, 920,
	577, 572, 0, 86, 86, 86, 921, 1621, 1627, 1473,
	1623, 86, 86, 0, 1472, 1474, 297, 86, 0, 86,
	0, 86, 86, 86, 86, 804, 1620, 921, 1631, 86,
	283, 0, 0, 0, 0, 0, 1632, 0, 1622, 86,
	1633, 1636, 593, 0, 0, 941, 0, 0, 86, 86,
	0, 0, 86, 1639, 0, 0, 1645, 1646, 594, 0,
	1655, 86, 86, 1224, 0, 1241, 1242, 1243, 0, 0,
	1654, 1653, 1473, 1658, 0, 1657, 1652, 1472, 1474, 1656,
	1675, 0, 1650, 0, 0, 0, 0, 1625, 0, 1674,
	0, 1676, 1686, 1686, 1677, 244, 244, 917, 0, 941,
	1687, 921, 940, 86, 1690, 1688, 920, 1238, 0, 1694,
	1079, 0, 0, 1696, 1686, 1697, 0, 0, 0, 0,
	941, 0, 0, 0, 0, 0, 84, 1709, 299, 1708,
	244, 0, 387, 0, 0, 1695, 0, 0, 0, 1110,
	0, 1686, 1714, 0, 0, 0, 0, 289, 1110, 0,
	1229, 0, 0, 1663, 0, 0, 940, 86, 299, 86,
	920, 86, 0, 0, 0, 0, 0, 1245, 86, 299,
	299, 299, 0, 532, 0, 943, 0, 940, 0, 1244,
	0, 920, 0, 0, 1045, 1045, 0, 86, 0, 0,
	0, 0, 1134, 0, 941, 1239, 0, 0, 0, 0,
	0, 0, 0, 549, 86, 549, 86, 0, 0, 943,
	0, 0, 0, 297, 86, 0, 943, 0, 0, 0,
	86, 0, 0, 0, 244, 0, 549, 244, 244, 244,
	0, 244, 1184, 1185, 0, 244, 942, 0, 0, 0,
	84, 0, 1045, 1045, 1045, 0, 693, 0, 943, 0,
	1240, 940, 0, 0, 0, 920, 0, 0, 0, 0,
	0, 0, 0, 718, 289, 0, 0, 714, 0, 0,
	942, 0, 0, 0, 0, 0, 0, 942, 0, 0,
	0, 720, 86, 86, 0, 0, 86, 0, 0, 0,
	1246, 1247, 1248, 0, 86, 0, 0, 0, 0, 0,
	0, 719, 0, 0, 0, 0, 86, 0, 0, 942,
	0, 592, 0, 0, 1235, 1236, 1237, 0, 1234, 1231,
	1232, 1233, 1225, 1226, 1227, 1228, 1230, 0, 718, 0,
	0, 0, 0, 0, 86, 86, 86, 943, 86, 0,
	0, 0, 0, 425, 32, 0, 720, 0, 0, 0,
	725, 0, 0, 0, 0, 86, 1224, 0, 0, 0,
	0, 0, 0, 0, 299, 0, 719, 0, 1045, 1045,
	0, 32, 734, 0, 0, 0, 0, 86, 819, 0,
	0, 0, 299, 0, 0, 299, 835, 276, 0, 0,
	284, 299, 0, 850, 851, 735, 299, 32, 942, 299,
	244, 244, 0, 0, 0, 0, 549, 714, 0, 284,
	0, 0, 0, 0, 848, 725, 1342, 1343, 0, 0,
	0, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045,
	1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045,
	0, 1045, 0, 1229, 943, 0, 297, 0, 0, 297,
	736, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	735, 917, 0, 0, 0, 0, 0, 0, 0, 1386,
	1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396,
	1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1239, 1408,
	0, 0, 0, 0, 0, 917, 0, 0, 943, 0,
	0, 0, 917, 0, 0, 942, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 736, 0, 0, 0, 943,
	0, 729, 721, 722, 723, 724, 726, 0, 0, 0,
	0, 0, 0, 0, 917, 0, 880, 0, 0, 0,
	0, 0, 0, 1240, 0, 0, 0, 0, 299, 819,
	0, 1224, 0, 1241, 1242, 1243, 0, 0, 0, 942,
	0, 0, 0, 1501, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 0, 244,
	942, 0, 0, 730, 727, 728, 729, 721, 722, 723,
	724, 726, 0, 943, 1455, 1238, 0, 0, 0, 0,
	0, 0, 1464, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1231, 1232, 1233, 1225, 1226, 1227, 1228, 1230,
	0, 297, 297, 917, 0, 297, 0, 0, 0, 276,
	0, 0, 0, 0, 0, 0, 0, 1045, 1229, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 942, 0, 0, 0, 0, 0,
	0, 0, 1224, 0, 1241, 1242, 1243, 1244, 0, 0,
	0, 299, 1080, 1081, 1350, 0, 0, 819, 0, 0,
	1086, 0, 0, 1239, 0, 1542, 1091, 1092, 1094, 1096,
	1097, 0, 1100, 1101, 0, 0, 0, 0, 0, 0,
	299, 0, 1112, 0, 0, 0, 1238, 0, 0, 299,
	0, 0, 0, 0, 0, 0, 0, 0, 880, 549,
	1045, 0, 0, 0, 880, 0, 0, 0, 0, 0,
	917, 0, 0, 0, 0, 0, 0, 0, 1240, 0,
	276, 1543, 0, 276, 276, 0, 0, 0, 0, 1229,
	693, 0, 244, 299, 0, 0, 1137, 0, 0, 0,
	0, 0, 0, 0, 0, 1144, 756, 0, 1599, 0,
	760, 0, 1161, 0, 299, 0, 0, 1575, 1244, 718,
	0, 737, 738, 739, 917, 0, 0, 297, 0, 0,
	0, 740, 0, 0, 1239, 0, 1045, 720, 0, 746,
	0, 0, 1235, 1236, 1237, 917, 1234, 1231, 1232, 1233,
	1225, 1226, 1227, 1228, 1230, 0, 0, 719, 0, 0,
	0, 0, 0, 734, 0, 718, 0, 737, 738, 739,
	0, 0, 0, 246, 0, 0, 0, 740, 0, 0,
	0, 0, 0, 720, 1638, 746, 0, 257, 0, 1240,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 719, 0, 0, 725, 0, 0, 734,
	0, 0, 32, 0, 32, 0, 0, 0, 0, 917,
	248, 0, 0, 747, 0, 0, 32, 258, 0, 0,
	0, 0, 0, 0, 0, 745, 0, 0, 0, 247,
	249, 0, 0, 0, 0, 742, 0, 0, 0, 1647,
	0, 735, 725, 1235, 1236, 1237, 0, 1234, 1231, 1232,
	1233, 1225, 1226, 1227, 1228, 1230, 0, 0, 0, 747,
	0, 0, 0, 741, 250, 0, 0, 0, 0, 0,
	0, 745, 0, 0, 251, 252, 0, 0, 714, 0,
	848, 742, 0, 0, 0, 0, 0, 735, 0, 253,
	1224, 0, 1241, 1242, 1243, 0, 736, 0, 0, 0,
	0, 0, 0, 0, 0, 299, 0, 744, 0, 741,
	0, 0, 0, 0, 0, 0, 0, 0, 1309, 0,
	819, 0, 693, 0, 0, 1315, 0, 0, 0, 0,
	0, 0, 0, 0, 1238, 0, 0, 299, 0, 0,
	299, 718, 736, 0, 0, 0, 1161, 0, 0, 0,
	1334, 0, 1161, 744, 0, 0, 0, 0, 743, 720,
	731, 732, 733, 0, 730, 727, 728, 729, 721, 722,
	723, 724, 726, 0, 0, 0, 1075, 1229, 0, 719,
	254, 0, 0, 255, 0, 1076, 0, 0, 256, 0,
	0, 912, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1376, 743, 0, 731, 732, 733, 0,
	730, 727, 728, 729, 721, 722, 723, 724, 726, 0,
	0, 992, 1239, 0, 0, 0, 0, 1531, 725, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	718, 0, 737, 738, 739, 0, 0, 0, 0, 0,
	0, 0, 740, 0, 0, 0, 0, 0, 720, 0,
	746, 0, 0, 0, 0, 0, 0, 1428, 1429, 819,
	0, 0, 0, 735, 0, 714, 714, 1240, 719, 0,
	0, 1453, 0, 1454, 734, 299, 1456, 1457, 1458, 0,
	0, 0, 0, 299, 0, 0, 0, 0, 0, 0,
	0, 1469, 0, 819, 1469, 0, 0, 0, 0, 0,
	0, 0, 299, 299, 284, 0, 299, 0, 0, 0,
	718, 0, 737, 738, 739, 714, 1161, 725, 736, 0,
	0, 0, 740, 0, 0, 0, 0, 0, 720, 0,
	746, 1235, 1236, 1237, 747, 1234, 1231, 1232, 1233, 1225,
	1226, 1227, 1228, 1230, 0, 0, 745, 0, 719, 0,
	0, 0, 0, 0, 734, 0, 742, 1519, 0, 0,
	0, 0, 735, 0, 0, 0, 0, 0, 32, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1162, 0,
	0, 0, 0, 0, 741, 0, 730, 727, 728, 729,
	721, 722, 723, 724, 726, 0, 0, 725, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 819, 0, 1537, 747, 244, 0, 736, 0, 0,
	0, 0, 299, 0, 0, 0, 745, 0, 744, 0,
	0, 0, 0, 0, 0, 0, 742, 0, 0, 0,
	0, 714, 735, 992, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1469, 0, 756, 299, 0,
	1578, 0, 718, 0, 741, 0, 0, 0, 299, 0,
	0, 0, 0, 0, 714, 0, 0, 0, 0, 743,
	720, 731, 732, 733, 0, 730, 727, 728, 729, 721,
	722, 723, 724, 726, 0, 0, 0, 736, 0, 0,
	719, 0, 1265, 0, 0, 0, 0, 0, 744, 0,
	0, 0, 718, 756, 737, 738, 739, 0, 0, 0,
	0, 0, 0, 0, 740, 0, 0, 0, 0, 0,
	720, 0, 746, 0, 0, 0, 1613, 1614, 0, 0,
	1618, 0, 0, 0, 0, 1469, 0, 0, 244, 725,
	719, 0, 0, 0, 0, 0, 734, 0, 0, 743,
	714, 731, 732, 733, 0, 730, 727, 728, 729, 721,
	722, 723, 724, 726, 0, 0, 0, 0, 0, 0,
	0, 0, 1264, 0, 0, 0, 0, 0, 714, 714,
	299, 0, 244, 0, 735, 0, 0, 0, 0, 725,
	0, 718, 0, 737, 738, 739, 0, 0, 1469, 1578,
	0, 912, 0, 740, 912, 0, 747, 0, 0, 720,
	1224, 746, 1241, 1242, 1243, 0, 0, 0, 745, 0,
	0, 299, 1349, 0, 0, 0, 0, 0, 742, 719,
	0, 0, 0, 0, 735, 734, 0, 0, 0, 736,
	0, 0, 0, 718, 0, 737, 738, 739, 0, 0,
	0, 0, 0, 0, 1238, 0, 741, 0, 0, 0,
	0, 720, 0, 746, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 725, 0,
	0, 719, 0, 0, 0, 0, 0, 734, 0, 736,
	0, 0, 0, 0, 0, 747, 0, 1229, 0, 0,
	744, 0, 0, 0, 0, 0, 0, 745, 727, 728,
	729, 721, 722, 723, 724, 726, 0, 742, 0, 0,
	0, 0, 0, 735, 0, 0, 1244, 0, 0, 0,
	725, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1239, 0, 0, 741, 0, 747, 0, 0,
	0, 743, 0, 731, 732, 733, 32, 730, 727, 728,
	729, 721, 722, 723, 724, 726, 0, 0, 0, 742,
	0, 0, 0, 0, 1263, 735, 912, 912, 736, 0,
	912, 0, 0, 0, 0, 0, 0, 0, 0, 744,
	0, 0, 0, 0, 0, 0, 0, 1240, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	736, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	743, 744, 731, 732, 733, 0, 730, 727, 728, 729,
	721, 722, 723, 724, 726, 0, 0, 0, 0, 0,
	1642, 1235, 1236, 1237, 0, 1234, 1231, 1232, 1233, 1225,
	1226, 1227, 1228, 1230, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 743, 0, 731, 732, 733, 0, 730, 727,
	728, 729, 721, 722, 723, 724, 726, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1562, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 591, 0, 0, 0, 0, 0,
	0, 0, 912, 0, 0, 0, 88, 89, 596, 90,
	597, 598, 599, 600, 601, 602, 603, 604, 91, 92,
	189, 190, 191, 93, 192, 193, 605, 94, 194, 195,
	95, 606, 607, 196, 197, 198, 608, 199, 609, 330,
	610, 96, 97, 98, 0, 99, 611, 100, 612, 331,
	101, 102, 613, 614, 615, 616, 617, 618, 103, 104,
	105, 106, 200, 107, 201, 202, 619, 620, 108, 621,
	622, 623, 109, 110, 624, 111, 625, 756, 626, 203,
	112, 204, 627, 628, 113, 114, 205, 0, 115, 629,
	116, 630, 631, 332, 632, 117, 206, 633, 207, 634,
	118, 119, 208, 209, 635, 636, 120, 637, 333, 121,
	210, 211, 212, 638, 213, 639, 334, 122, 335, 123,
	124, 640, 641, 214, 336, 125, 337, 642, 126, 643,
	644, 127, 0, 128, 129, 130, 131, 132, 338, 133,
	134, 137, 135, 645, 136, 646, 215, 138, 216, 139,
	140, 647, 648, 649, 650, 651, 141, 217, 339, 142,
	340, 218, 143, 144, 652, 219, 145, 220, 653, 146,
	147, 148, 221, 149, 150, 654, 152, 153, 151, 154,
	655, 155, 341, 156, 157, 222, 158, 0, 245, 159,
	160, 656, 223, 161, 162, 657, 163, 164, 342, 165,
	224, 166, 658, 167, 168, 170, 225, 169, 226, 659,
	660, 171, 172, 661, 227, 228, 229, 662, 663, 173,
	230, 231, 664, 174, 175, 176, 177, 665, 666, 178,
	179, 180, 667, 668, 181, 182, 183, 232, 233, 669,
	184, 670, 671, 672, 673, 185, 186, 187, 188, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 591, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1333, 88, 89, 596, 90, 597,
	598, 599, 600, 601, 602, 603, 604, 91, 92, 189,
	190, 191, 93, 192, 193, 605, 94, 194, 195, 95,
	606, 607, 196, 197, 198, 608, 199, 609, 330, 610,
	96, 97, 98, 0, 99, 611, 100, 612, 331, 101,
	102, 613, 614, 615, 616, 617, 618, 103, 104, 105,
	106, 200, 107, 201, 202, 619, 620, 108, 621, 622,
	623, 109, 110, 624, 111, 625, 0, 626, 203, 112,
	204, 627, 628, 113, 114, 205, 0, 115, 629, 116,
	630, 631, 332, 632, 117, 206, 633, 207, 634, 118,
	119, 208, 209, 635, 636, 120, 637, 333, 121, 210,
	211, 212, 638, 213, 639, 334, 122, 335, 123, 124,
	640, 641, 214, 336, 125, 337, 642, 126, 643, 644,
	127, 0, 128, 129, 130, 131, 132, 338, 133, 134,
	137, 135, 645, 136, 646, 215, 138, 216, 139, 140,
	647, 648, 649, 650, 651, 141, 217, 339, 142, 340,
	218, 143, 144, 652, 219, 145, 220, 653, 146, 147,
	148, 221, 149, 150, 654, 152, 153, 151, 154, 655,
	155, 341, 156, 157, 222, 158, 0, 245, 159, 160,
	656, 223, 161, 162, 657, 163, 164, 342, 165, 224,
	166, 658, 167, 168, 170, 225, 169, 226, 659, 660,
	171, 172, 661, 227, 228, 229, 662, 663, 173, 230,
	231, 664, 174, 175, 176, 177, 665, 666, 178, 179,
	180, 667, 668, 181, 182, 183, 232, 233, 669, 184,
	670, 671, 672, 673, 185, 186, 187, 188, 0, 591,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	807, 88, 89, 596, 90, 597, 598, 599, 600, 601,
	602, 603, 604, 91, 92, 189, 190, 191, 93, 192,
	193, 605, 94, 194, 195, 95, 606, 607, 196, 197,
	198, 608, 199, 609, 330, 610, 96, 97, 98, 0,
	99, 611, 100, 612, 331, 101, 102, 613, 614, 615,
	616, 617, 618, 103, 104, 105, 106, 200, 107, 201,
	202, 619, 620, 108, 621, 622, 623, 109, 110, 624,
	111, 625, 0, 626, 203, 112, 204, 627, 628, 113,
	114, 205, 0, 115, 629, 116, 630, 631, 332, 632,
	117, 206, 633, 207, 634, 118, 119, 208, 209, 635,
	636, 120, 637, 333, 121, 210, 211, 212, 638, 213,
	639, 334, 122, 335, 123, 124, 640, 641, 214, 336,
	125, 337, 642, 126, 643, 644, 127, 0, 128, 129,
	130, 131, 132, 338, 133, 134, 137, 135, 645, 136,
	646, 215, 138, 216, 139, 140, 647, 648, 649, 650,
	651, 141, 217, 339, 142, 340, 218, 143, 144, 652,
	219, 145, 220, 653, 146, 147, 148, 221, 149, 150,
	654, 152, 153, 151, 154, 655, 155, 341, 156, 157,
	222, 158, 0, 245, 159, 160, 656, 223, 161, 162,
	657, 163, 164, 342, 165, 224, 166, 658, 167, 168,
	170, 225, 169, 226, 659, 660, 171, 172, 661, 227,
	228, 229, 662, 663, 173, 230, 231, 664, 174, 175,
	176, 177, 665, 666, 178, 179, 180, 667, 668, 181,
	182, 183, 232, 233, 669, 184, 670, 671, 672, 673,
	185, 186, 187, 188, 445, 434, 435, 432, 433, 421,
	0, 0, 0, 0, 0, 0, 88, 89, 1010, 90,
	0, 0, 0, 0, 427, 0, 0, 0, 91, 92,
	189, 474, 475, 93, 476, 477, 0, 94, 194, 195,
	95, 442, 460, 478, 479, 198, 0, 470, 0, 453,
	0, 96, 97, 98, 0, 99, 0, 100, 0, 331,
	101, 102, 0, 454, 456, 0, 455, 457, 103, 104,
	105, 106, 480, 107, 481, 482, 0, 0, 108, 0,
	1011, 0, 473, 110, 0, 111, 0, 0, 0, 426,
	112, 461, 440, 0, 113, 114, 483, 0, 115, 0,
	116, 0, 0, 332, 0, 117, 471, 0, 207, 0,
	118, 119, 467, 469, 0, 0, 120, 0, 333, 121,
	484, 485, 486, 0, 452, 0, 334, 122, 335, 123,
	124, 0, 0, 472, 336, 125, 337, 0, 126, 0,
	0, 127, 0, 128, 129, 130, 131, 132, 338, 133,
	134, 137, 135, 416, 136, 441, 468, 138, 487, 139,
	140, 0, 0, 0, 0, 0, 141, 217, 339, 142,
	340, 462, 143, 144, 0, 463, 145, 220, 0, 146,
	147, 148, 488, 149, 150, 0, 152, 153, 151, 154,
	0, 155, 341, 156, 157, 430, 158, 0, 245, 159,
	160, 0, 223, 161, 162, 458, 163, 164, 342, 165,
	489, 166, 0, 167, 168, 170, 490, 169, 464, 0,
	0, 171, 172, 0, 227, 491, 492, 0, 0, 173,
	465, 466, 439, 174, 175, 176, 177, 0, 0, 178,
	179, 180, 459, 0, 181, 182, 183, 232, 493, 1009,
	184, 0, 0, 0, 0, 185, 186, 187, 188, 417,
	0, 445, 434, 435, 432, 433, 421, 0, 0, 413,
	414, 1012, 0, 88, 89, 415, 90, 0, 422, 1007,
	0, 427, 0, 0, 0, 91, 92, 189, 474, 475,
	93, 476, 477, 0, 94, 194, 195, 95, 442, 460,
	478, 479, 198, 0, 470, 0, 453, 0, 96, 97,
	98, 0, 99, 0, 100, 0, 331, 101, 102, 0,
	454, 456, 0, 455, 457, 103, 104, 105, 106, 480,
	107, 481, 482, 514, 0, 108, 0, 0, 0, 473,
	110, 0, 111, 0, 0, 0, 426, 112, 461, 440,
	0, 113, 114, 483, 0, 115, 0, 116, 0, 0,
	332, 0, 117, 471, 0, 207, 0, 118, 119, 467,
	469, 0, 0, 120, 0, 333, 121, 484, 485, 486,
	0, 452, 0, 334, 122, 335, 123, 124, 0, 0,
	472, 336, 125, 337, 0, 126, 0, 0, 127, 0,
	128, 129, 130, 131, 132, 338, 133, 134, 137, 135,
	416, 136, 441, 468, 138, 487, 139, 140, 0, 0,
	0, 0, 0, 141, 217, 339, 142, 340, 462, 143,
	144, 0, 463, 145, 220, 0, 146, 147, 148, 488,
	149, 150, 0, 152, 153, 151, 154, 0, 155, 341,
	156, 157, 430, 158, 0, 245, 159, 160, 49, 223,
	161, 162, 458, 163, 164, 342, 165, 489, 166, 0,
	167, 168, 170, 490, 169, 464, 0, 51, 171, 172,
	0, 227, 491, 492, 0, 0, 173, 465, 466, 439,
	174, 175, 176, 177, 0, 0, 178, 179, 180, 459,
	0, 181, 182, 183, 329, 493, 0, 184, 0, 0,
	0, 47, 185, 186, 187, 188, 417, 48, 445, 434,
	435, 432, 433, 421, 0, 0, 413, 414, 0, 0,
	88, 89, 415, 90, 0, 422, 0, 0, 427, 0,
	0, 0, 91, 92, 189, 474, 475, 93, 476, 477,
	0, 94, 194, 195, 95, 442, 460, 478, 479, 198,
	0, 470, 0, 453, 0, 96, 97, 98, 0, 99,
	0, 100, 0, 331, 101, 102, 0, 454, 456, 0,
	455, 457, 103, 104, 105, 106, 480, 107, 481, 482,
	0, 0, 108, 0, 0, 0, 473, 110, 0, 111,
	0, 0, 0, 426, 112, 461, 440, 0, 113, 114,
	483, 0, 115, 0, 116, 0, 0, 332, 0, 117,
	471, 0, 207, 0, 118, 119, 467, 469, 0, 0,
	120, 0, 333, 121, 484, 485, 486, 0, 452, 0,
	334, 122, 335, 123, 124, 0, 0, 472, 336, 125,
	337, 0, 126, 0, 0, 127, 0, 128, 129, 130,
	131, 132, 338, 133, 134, 137, 135, 416, 136, 441,
	468, 138, 487, 139, 140, 0, 0, 0, 0, 0,
	141, 217, 339, 142, 340, 462, 143, 144, 0, 463,
	145, 220, 0, 146, 147, 148, 488, 149, 150, 0,
	152, 153, 151, 154, 0, 155, 341, 156, 157, 430,
	158, 0, 245, 159, 160, 49, 223, 161, 162, 458,
	163, 164, 342, 165, 489, 166, 0, 167, 168, 170,
	490, 169, 464, 0, 51, 171, 172, 0, 227, 491,
	492, 0, 0, 173, 465, 466, 439, 174, 175, 176,
	177, 0, 0, 178, 179, 180, 459, 0, 181, 182,
	183, 329, 493, 0, 184, 0, 0, 0, 47, 185,
	186, 187, 188, 417, 48, 445, 434, 435, 432, 433,
	421, 0, 0, 413, 414, 0, 0, 88, 89, 415,
	90, 0, 422, 0, 0, 427, 0, 0, 0, 91,
	92, 189, 474, 475, 93, 476, 477, 1055, 94, 194,
	195, 95, 442, 460, 478, 479, 198, 0, 470, 0,
	453, 0, 96, 97, 98, 0, 99, 0, 100, 0,
	331, 101, 102, 0, 454, 456, 0, 455, 457, 103,
	104, 105, 106, 480, 107, 481, 482, 0, 0, 108,
	0, 0, 0, 473, 110, 0, 111, 0, 0, 0,
	426, 112, 461, 440, 0, 113, 114, 483, 0, 115,
	0, 116, 0, 1060, 332, 0, 117, 471, 0, 207,
	0, 118, 119, 467, 469, 0, 0, 120, 0, 333,
	121, 484, 485, 486, 0, 452, 0, 334, 122, 335,
	123, 124, 0, 1056, 472, 336, 125, 337, 0, 126,
	0, 0, 127, 0, 128, 129, 130, 131, 132, 338,
	133, 134, 137, 135, 416, 136, 441, 468, 138, 487,
	139, 140, 0, 0, 0, 0, 0, 141, 217, 339,
	142, 340, 462, 143, 144, 0, 463, 145, 220, 0,
	146, 147, 148, 488, 149, 150, 0, 152, 153, 151,
	154, 0, 155, 341, 156, 157, 430, 158, 0, 245,
	159, 160, 0, 223, 161, 162, 458, 163, 164, 342,
	165, 489, 166, 0, 167, 168, 170, 490, 169, 464,
	0, 0, 171, 172, 0, 227, 491, 492, 0, 1057,
	173, 465, 466, 439, 174, 175, 176, 177, 0, 0,
	178, 179, 180, 459, 0, 181, 182, 183, 232, 493,
	0, 184, 0, 0, 0, 0, 185, 186, 187, 188,
	417, 0, 445, 434, 435, 432, 433, 421, 0, 0,
	413, 414, 0, 0, 88, 89, 415, 90, 0, 422,
	0, 0, 427, 0, 0, 0, 91, 92, 189, 474,
	475, 93, 476, 477, 0, 94, 194, 195, 95, 442,
	460, 478, 479, 198, 0, 470, 0, 453, 0, 96,
	97, 98, 0, 99, 0, 100, 0, 331, 101, 102,
	0, 454, 456, 0, 455, 457, 103, 104, 105, 106,
	480, 107, 481, 482, 0, 0, 108, 0, 0, 0,
	473, 110, 0, 111, 0, 0, 0, 426, 112, 461,
	440, 0, 113, 114, 483, 0, 115, 0, 116, 0,
	0, 332, 0, 117, 471, 0, 207, 0, 118, 119,
	467, 469, 0, 0, 120, 0, 333, 121, 484, 485,
	486, 0, 452, 0, 334, 122, 335, 123, 124, 0,
	0, 472, 336, 125, 337, 0, 126, 0, 0, 127,
	0, 128, 129, 130, 131, 132, 338, 133, 134, 137,
	135, 416, 136, 441, 468, 138, 487, 139, 140, 0,
	0, 0, 0, 0, 141, 217, 339, 142, 340, 462,
	143, 144, 0, 463, 145, 220, 0, 146, 147, 148,
	488, 149, 150, 0, 152, 153, 151, 154, 0, 155,
	341, 156, 157, 430, 158, 0, 245, 159, 160, 0,
	223, 161, 162, 458, 163, 164, 342, 165, 489, 166,
	0, 167, 168, 170, 490, 169, 464, 0, 0, 171,
	172, 0, 227, 491, 492, 0, 0, 173, 465, 466,
	439, 174, 175, 176, 177, 0, 0, 178, 179, 180,
	459, 0, 181, 182, 183, 232, 493, 0, 184, 0,
	0, 0, 0, 185, 186, 187, 188, 417, 0, 445,
	434, 435, 432, 433, 421, 0, 0, 413, 414, 0,
	0, 88, 89, 415, 90, 0, 422, 1411, 0, 427,
	0, 0, 0, 91, 92, 189, 474, 475, 93, 476,
	477, 0, 94, 194, 195, 95, 442, 460, 478, 479,
	198, 0, 470, 0, 453, 0, 96, 97, 98, 0,
	99, 0, 100, 0, 331, 101, 102, 0, 454, 456,
	0, 455, 457, 103, 104, 105, 106, 480, 107, 481,
	482, 0, 0, 108, 0, 0, 0, 473, 110, 0,
	111, 0, 0, 0, 426, 112, 461, 440, 0, 113,
	114, 483, 0, 115, 0, 116, 0, 0, 332, 0,
	117, 471, 0, 207, 0, 118, 119, 467, 469, 0,
	0, 120, 0, 333, 121, 484, 485, 486, 0, 452,
	0, 334, 122, 335, 123, 124, 0, 0, 472, 336,
	125, 337, 0, 126, 0, 0, 127, 0, 128, 129,
	130, 131, 132, 338, 133, 134, 137, 135, 416, 136,
	441, 468, 138, 487, 139, 140, 0, 0, 0, 0,
	0, 141, 217, 339, 142, 340, 462, 143, 144, 0,
	463, 145, 220, 0, 146, 147, 148, 488, 149, 150,
	0, 152, 153, 151, 154, 0, 155, 341, 156, 157,
	430, 158, 0, 245, 159, 160, 0, 223, 161, 162,
	458, 163, 164, 342, 165, 489, 166, 0, 167, 168,
	170, 490, 169, 464, 0, 0, 171, 172, 0, 227,
	491, 492, 0, 0, 173, 465, 466, 439, 174, 175,
	176, 177, 0, 0, 178, 179, 180, 459, 0, 181,
	182, 183, 232, 493, 0, 184, 0, 0, 0, 0,
	185, 186, 187, 188, 417, 0, 445, 434, 435, 432,
	433, 421, 0, 0, 413, 414, 0, 0, 88, 89,
	415, 90, 0, 422, 1353, 0, 427, 0, 0, 0,
	91, 92, 189, 474, 475, 93, 476, 477, 0, 94,
	194, 195, 95, 442, 460, 478, 479, 198, 0, 470,
	0, 453, 0, 96, 97, 98, 0, 99, 0, 100,
	0, 331, 101, 102, 0, 454, 456, 0, 455, 457,
	103, 104, 105, 106, 480, 107, 481, 482, 0, 0,
	108, 0, 0, 0, 473, 110, 0, 111, 0, 0,
	0, 426, 112, 461, 440, 0, 113, 114, 483, 0,
	115, 0, 116, 0, 0, 332, 0, 117, 471, 0,
	207, 0, 118, 119, 467, 469, 0, 0, 120, 0,
	333, 121, 484, 485, 486, 0, 452, 0, 334, 122,
	335, 123, 124, 0, 0, 472, 336, 125, 337, 0,
	126, 0, 0, 127, 0, 128, 129, 130, 131, 132,
	338, 133, 134, 137, 135, 416, 136, 441, 468, 138,
	487, 139, 140, 0, 0, 0, 0, 0, 141, 217,
	339, 142, 340, 462, 143, 144, 0, 463, 145, 220,
	0, 146, 147, 148, 488, 149, 150, 0, 152, 153,
	151, 154, 0, 155, 341, 156, 157, 430, 158, 0,
	245, 159, 160, 0, 223, 161, 162, 458, 163, 164,
	342, 165, 489, 166, 0, 167, 168, 170, 490, 169,
	464, 0, 0, 171, 172, 0, 227, 491, 492, 0,
	0, 173, 465, 466, 439, 174, 175, 176, 177, 0,
	0, 178, 179, 180, 459, 0, 181, 182, 183, 232,
	493, 0, 184, 0, 0, 0, 0, 185, 186, 187,
	188, 417, 0, 445, 434, 435, 432, 433, 421, 0,
	0, 413, 414, 0, 0, 88, 89, 415, 90, 0,
	422, 1006, 0, 427, 0, 0, 0, 91, 92, 189,
	474, 475, 93, 476, 477, 0, 94, 194, 195, 95,
	442, 460, 478, 479, 198, 0, 470, 0, 453, 0,
	96, 97, 98, 0, 99, 0, 100, 0, 331, 101,
	102, 0, 454, 456, 0, 455, 457, 103, 104, 105,
	106, 480, 107, 481, 482, 0, 0, 108, 0, 0,
	0, 473, 110, 0, 111, 0, 0, 0, 426, 112,
	461, 440, 0, 113, 114, 483, 0, 115, 0, 116,
	0, 0, 332, 0, 117, 471, 0, 207, 0, 118,
	119, 467, 469, 0, 0, 120, 0, 333, 121, 484,
	485, 486, 0, 452, 0, 334, 122, 335, 123, 124,
	0, 0, 472, 336, 125, 337, 0, 126, 0, 0,
	127, 0, 128, 129, 130, 131, 132, 338, 133, 134,
	137, 135, 416, 136, 441, 468, 138, 487, 139, 140,
	0, 0, 0, 0, 0, 141, 217, 339, 142, 340,
	462, 143, 144, 0, 463, 145, 220, 0, 146, 147,
	148, 488, 149, 150, 0, 152, 153, 151, 154, 0,
	155, 341, 156, 157, 430, 158, 0, 245, 159, 160,
	0, 223, 161, 162, 458, 163, 164, 342, 165, 489,
	166, 0, 167, 168, 170, 490, 169, 464, 0, 0,
	171, 172, 0, 227, 491, 492, 0, 0, 173, 465,
	466, 439, 174, 175, 176, 177, 0, 0, 178, 179,
	180, 459, 0, 181, 182, 183, 232, 493, 0, 184,
	0, 0, 0, 0, 185, 186, 187, 188, 417, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 413, 414,
	0, 0, 0, 0, 415, 762, 1002, 422, 445, 434,
	435, 432, 433, 421, 0, 0, 0, 0, 0, 0,
	88, 89, 0, 90, 0, 0, 0, 0, 427, 0,
	0, 0, 91, 92, 189, 474, 475, 93, 476, 477,
	0, 94, 194, 195, 95, 442, 460, 478, 479, 198,
	0, 470, 0, 453, 0, 96, 97, 98, 0, 99,
	0, 100, 0, 331, 101, 102, 0, 454, 456, 0,
	455, 457, 103, 104, 105, 106, 480, 107, 481, 482,
	0, 0, 108, 0, 0, 0, 473, 110, 0, 111,
	0, 0, 0, 426, 112, 461, 440, 0, 113, 114,
	483, 0, 115, 0, 116, 0, 0, 332, 0, 117,
	471, 0, 207, 0, 118, 119, 467, 469, 0, 0,
	120, 0, 333, 121, 484, 485, 486, 0, 452, 0,
	334, 122, 335, 123, 124, 0, 0, 472, 336, 125,
	337, 0, 126, 0, 0, 127, 0, 128, 129, 130,
	131, 132, 338, 133, 134, 137, 135, 416, 136, 441,
	468, 138, 487, 139, 140, 0, 0, 0, 0, 0,
	141, 217, 339, 142, 340, 462, 143, 144, 0, 463,
	145, 220, 0, 146, 147, 148, 488, 149, 150, 0,
	152, 153, 151, 154, 0, 155, 341, 156, 157, 430,
	158, 0, 245, 159, 160, 0, 223, 161, 162, 458,
	163, 164, 342, 165, 489, 166, 0, 167, 168, 170,
	490, 169, 464, 0, 0, 171, 172, 0, 227, 491,
	492, 0, 0, 173, 465, 466, 439, 174, 175, 176,
	177, 0, 0, 178, 179, 180, 459, 0, 181, 182,
	183, 232, 493, 0, 184, 0, 0, 0, 0, 185,
	186, 187, 188, 417, 0, 445, 434, 435, 432, 433,
	421, 0, 0, 413, 414, 411, 0, 88, 89, 415,
	90, 0, 422, 0, 0, 427, 0, 0, 0, 91,
	92, 189, 474, 475, 93, 476, 477, 0, 94, 194,
	195, 95, 442, 460, 478, 479, 198, 0, 470, 0,
	453, 0, 96, 97, 98, 0, 99, 0, 100, 0,
	331, 101, 102, 0, 454, 456, 0, 455, 457, 103,
	104, 105, 106, 480, 107, 481, 482, 0, 0, 108,
	0, 0, 0, 473, 110, 0, 111, 0, 0, 0,
	426, 112, 461, 440, 0, 113, 114, 483, 0, 115,
	0, 116, 0, 0, 332, 0, 117, 471, 0, 207,
	0, 118, 119, 467, 469, 0, 0, 120, 0, 333,
	121, 484, 485, 486, 0, 452, 0, 334, 122, 335,
	123, 124, 0, 0, 472, 336, 125, 337, 0, 126,
	0, 0, 127, 0, 128, 129, 130, 131, 132, 338,
	133, 134, 137, 135, 416, 136, 441, 468, 138, 487,
	139, 140, 0, 0, 0, 0, 0, 141, 217, 339,
	142, 340, 462, 143, 144, 0, 463, 145, 220, 0,
	146, 147, 148, 488, 149, 150, 0, 152, 153, 151,
	154, 0, 155, 341, 156, 157, 430, 158, 0, 245,
	159, 160, 0, 223, 161, 162, 458, 163, 164, 342,
	165, 489, 166, 0, 167, 168, 170, 490, 169, 464,
	0, 0, 171, 172, 0, 227, 491, 492, 0, 0,
	173, 465, 466, 439, 174, 175, 176, 177, 0, 0,
	178, 179, 180, 459, 0, 181, 182, 183, 232, 493,
	1359, 184, 0, 0, 0, 0, 185, 186, 187, 188,
	417, 0, 445, 434, 435, 432, 433, 421, 0, 0,
	413, 414, 0, 0, 88, 89, 415, 90, 0, 422,
	0, 0, 427, 0, 0, 0, 91, 92, 189, 474,
	475, 93, 476, 477, 0, 94, 194, 195, 95, 442,
	460, 478, 479, 198, 0, 470, 0, 453, 0, 96,
	97, 98, 0, 99, 0, 100, 0, 331, 101, 102,
	0, 454, 456, 0, 455, 457, 103, 104, 105, 106,
	480, 107, 481, 482, 514, 0, 108, 0, 0, 0,
	473, 110, 0, 111, 0, 0, 0, 426, 112, 461,
	440, 0, 113, 114, 483, 0, 115, 0, 116, 0,
	0, 332, 0, 117, 471, 0, 207, 0, 118, 119,
	467, 469, 0, 0, 120, 0, 333, 121, 484, 485,
	486, 0, 452, 0, 334, 122, 335, 123, 124, 0,
	0, 472, 336, 125, 337, 0, 126, 0, 0, 127,
	0, 128, 129, 130, 131, 132, 338, 133, 134, 137,
	135, 416, 136, 441, 468, 138, 487, 139, 140, 0,
	0, 0, 0, 0, 141, 217, 339, 142, 340, 462,
	143, 144, 0, 463, 145, 220, 0, 146, 147, 148,
	488, 149, 150, 0, 152, 153, 151, 154, 0, 155,
	341, 156, 157, 430, 158, 0, 245, 159, 160, 0,
	223, 161, 162, 458, 163, 164, 342, 165, 489, 166,
	0, 167, 168, 170, 490, 169, 464, 0, 0, 171,
	172, 0, 227, 491, 492, 0, 0, 173, 465, 466,
	439, 174, 175, 176, 177, 0, 0, 178, 179, 180,
	459, 0, 181, 182, 183, 232, 493, 0, 184, 0,
	0, 0, 0, 185, 186, 187, 188, 417, 0, 445,
	434, 435, 432, 433, 421, 0, 0, 413, 414, 0,
	0, 88, 89, 415, 90, 0, 422, 0, 0, 427,
	0, 0, 0, 91, 92, 189, 474, 475, 93, 476,
	477, 0, 94, 194, 195, 95, 442, 460, 478, 479,
	198, 0, 470, 0, 453, 0, 96, 97, 98, 0,
	99, 0, 100, 0, 331, 101, 102, 0, 454, 456,
	0, 455, 457, 103, 104, 105, 106, 480, 107, 481,
	482, 0, 0, 108, 0, 0, 0, 473, 110, 0,
	111, 0, 0, 0, 426, 112, 461, 440, 0, 113,
	114, 483, 0, 115, 0, 116, 0, 1060, 332, 0,
	117, 471, 0, 207, 0, 118, 119, 467, 469, 0,
	0, 120, 0, 333, 121, 484, 485, 486, 0, 452,
	0, 334, 122, 335, 123, 124, 0, 0, 472, 336,
	125, 337, 0, 126, 0, 0, 127, 0, 128, 129,
	130, 131, 132, 338, 133, 134, 137, 135, 416, 136,
	441, 468, 138, 487, 139, 140, 0, 0, 0, 0,
	0, 141, 217, 339, 142, 340, 462, 143, 144, 0,
	463, 145, 220, 0, 146, 147, 148, 488, 149, 150,
	0, 152, 153, 151, 154, 0, 155, 341, 156, 157,
	430, 158, 0, 245, 159, 160, 0, 223, 161, 162,
	458, 163, 164, 342, 165, 489, 166, 0, 167, 168,
	170, 490, 169, 464, 0, 0, 171, 172, 0, 227,
	491, 492, 0, 0, 173, 465, 466, 439, 174, 175,
	176, 177, 0, 0, 178, 179, 180, 459, 0, 181,
	182, 183, 232, 493, 0, 184, 0, 0, 0, 0,
	185, 186, 187, 188, 417, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 413, 414, 0, 0, 0, 0,
	415, 0, 0, 422, 445, 434, 435, 432, 433, 421,
	0, 0, 0, 0, 0, 0, 88, 89, 702, 90,
	0, 0, 0, 0, 427, 0, 0, 0, 91, 92,
	189, 474, 475, 93, 476, 477, 0, 94, 194, 195,
	95, 442, 460, 478, 479, 198, 0, 470, 0, 453,
	0, 96, 97, 98, 0, 99, 0, 100, 0, 331,
	101, 102, 0, 454, 456, 0, 455, 457, 103, 104,
	105, 106, 480, 107, 481, 482, 0, 0, 108, 0,
	0, 0, 473, 110, 0, 111, 0, 0, 0, 426,
	112, 461, 440, 0, 113, 114, 483, 0, 115, 0,
	116, 0, 0, 332, 0, 117, 471, 0, 207, 0,
	118, 119, 467, 469, 0, 0, 120, 0, 333, 121,
	484, 485, 486, 0, 452, 0, 334, 122, 335, 123,
	124, 0, 0, 472, 336, 125, 337, 0, 126, 0,
	0, 127, 0, 128, 129, 130, 131, 132, 338, 133,
	134, 137, 135, 416, 136, 441, 468, 138, 487, 139,
	140, 0, 0, 0, 0, 0, 141, 217, 339, 142,
	340, 462, 143, 144, 0, 463, 145, 220, 0, 146,
	147, 148, 488, 149, 150, 0, 152, 153, 151, 154,
	0, 155, 341, 156, 157, 430, 158, 0, 245, 159,
	160, 0, 223, 161, 162, 458, 163, 164, 342, 165,
	489, 166, 0, 167, 168, 170, 490, 169, 464, 0,
	0, 171, 172, 0, 227, 491, 492, 0, 0, 173,
	465, 466, 439, 174, 175, 176, 177, 0, 0, 178,
	179, 180, 459, 0, 181, 182, 183, 232, 493, 0,
	184, 0, 0, 0, 0, 185, 186, 187, 188, 417,
	0, 445, 434, 435, 432, 433, 421, 0, 0, 413,
	414, 0, 0, 88, 89, 415, 90, 0, 422, 0,
	0, 427, 0, 0, 0, 91, 92, 189, 474, 475,
	93, 476, 477, 0, 94, 194, 195, 95, 442, 460,
	478, 479, 198, 0, 470, 0, 453, 0, 96, 97,
	98, 0, 99, 0, 100, 0, 331, 101, 1685, 0,
	454, 456, 0, 455, 457, 103, 104, 105, 106, 480,
	107, 481, 482, 0, 0, 108, 0, 0, 0, 473,
	110, 0, 111, 0, 0, 0, 426, 112, 461, 440,
	0, 113, 114, 483, 0, 115, 0, 116, 0, 0,
	332, 0, 117, 471, 0, 207, 0, 118, 119, 467,
	469, 0, 0, 120, 0, 333, 121, 484, 485, 486,
	0, 452, 0, 334, 122, 335, 123, 124, 0, 0,
	472, 336, 125, 337, 0, 126, 0, 0, 127, 0,
	128, 129, 130, 131, 132, 338, 133, 134, 137, 135,
	416, 136, 441, 468, 138, 487, 139, 140, 0, 0,
	0, 0, 0, 141, 217, 339, 142, 340, 462, 143,
	144, 0, 463, 145, 220, 0, 146, 147, 148, 488,
	149, 150, 0, 152, 153, 151, 154, 0, 155, 341,
	156, 157, 430, 158, 0, 245, 159, 160, 0, 223,
	161, 162, 458, 163, 164, 342, 165, 489, 166, 0,
	167, 168, 170, 490, 169, 464, 0, 0, 171, 172,
	0, 227, 491, 492, 0, 0, 173, 465, 466, 439,
	174, 175, 1684, 177, 0, 0, 178, 179, 180, 459,
	0, 181, 182, 183, 232, 493, 0, 184, 0, 0,
	0, 0, 185, 186, 187, 188, 417, 0, 445, 434,
	435, 432, 433, 421, 0, 0, 413, 414, 0, 0,
	88, 89, 415, 90, 0, 422, 0, 0, 427, 0,
	0, 0, 91, 92, 1683, 474, 475, 93, 476, 477,
	0, 94, 194, 195, 95, 442, 460, 478, 479, 198,
	0, 470, 0, 453, 0, 96, 97, 98, 0, 99,
	0, 100, 0, 331, 101, 1685, 0, 454, 456, 0,
	455, 457, 103, 104, 105, 106, 480, 107, 481, 482,
	0, 0, 108, 0, 0, 0, 473, 110, 0, 111,
	0, 0, 0, 426, 112, 461, 440, 0, 113, 114,
	483, 0, 115, 0, 116, 0, 0, 332, 0, 117,
	471, 0, 207, 0, 118, 119, 467, 469, 0, 0,
	120, 0, 333, 121, 484, 485, 486, 0, 452, 0,
	334, 122, 335, 123, 124, 0, 0, 472, 336, 125,
	337, 0, 126, 0, 0, 127, 0, 128, 129, 130,
	131, 132, 338, 133, 134, 137, 135, 416, 136, 441,
	468, 138, 487, 139, 140, 0, 0, 0, 0, 0,
	141, 217, 339, 142, 340, 462, 143, 144, 0, 463,
	145, 220, 0, 146, 147, 148, 488, 149, 150, 0,
	152, 153, 151, 154, 0, 155, 341, 156, 157, 430,
	158, 0, 245, 159, 160, 0, 223, 161, 162, 458,
	163, 164, 342, 165, 489, 166, 0, 167, 168, 170,
	490, 169, 464, 0, 0, 171, 172, 0, 227, 491,
	492, 0, 0, 173, 465, 466, 439, 174, 175, 1684,
	177, 0, 0, 178, 179, 180, 459, 0, 181, 182,
	183, 232, 493, 0, 184, 0, 0, 0, 0, 185,
	186, 187, 188, 417, 0, 445, 434, 435, 432, 433,
	421, 0, 0, 413, 414, 0, 0, 88, 89, 415,
	90, 0, 422, 0, 0, 427, 0, 0, 0, 91,
	92, 189, 474, 475, 93, 476, 477, 0, 94, 194,
	195, 95, 442, 460, 478, 479, 198, 0, 470, 0,
	453, 0, 96, 97, 98, 0, 99, 0, 100, 0,
	331, 101, 102, 0, 454, 456, 0, 455, 457, 103,
	104, 105, 106, 480, 107, 481, 482, 0, 0, 108,
	0, 0, 0, 473, 110, 0, 111, 0, 0, 0,
	426, 112, 461, 440, 0, 113, 114, 483, 0, 115,
	0, 116, 0, 0, 332, 0, 117, 471, 0, 207,
	0, 118, 119, 467, 469, 0, 0, 120, 0, 333,
	121, 484, 485, 486, 0, 452, 0, 334, 122, 335,
	123, 124, 0, 0, 472, 336, 125, 337, 0, 126,
	0, 0, 127, 0, 128, 129, 130, 131, 132, 338,
	133, 134, 137, 135, 416, 136, 441, 468, 138, 487,
	139, 140, 0, 0, 0, 0, 0, 141, 217, 339,
	142, 340, 462, 143, 144, 0, 463, 145, 220, 0,
	146, 147, 148, 488, 149, 150, 0, 152, 153, 151,
	154, 0, 155, 341, 156, 157, 430, 158, 0, 245,
	159, 160, 0, 223, 161, 162, 458, 163, 164, 342,
	165, 489, 166, 0, 167, 168, 170, 490, 169, 464,
	0, 0, 171, 172, 0, 227, 491, 492, 0, 0,
	173, 465, 466, 439, 174, 175, 176, 177, 0, 0,
	178, 179, 180, 459, 0, 181, 182, 183, 232, 493,
	0, 184, 0, 0, 0, 0, 185, 186, 187, 188,
	417, 0, 445, 434, 435, 432, 433, 421, 0, 0,
	413, 414, 0, 0, 88, 89, 415, 90, 0, 422,
	0, 0, 427, 0, 0, 0, 91, 92, 189, 474,
	475, 93, 476, 477, 0, 94, 194, 195, 95, 442,
	460, 478, 479, 198, 0, 470, 0, 453, 0, 96,
	97, 98, 0, 99, 0, 100, 0, 331, 101, 102,
	0, 454, 456, 0, 455, 457, 103, 104, 105, 106,
	480, 107, 481, 482, 0, 0, 108, 0, 0, 0,
	473, 110, 0, 111, 0, 0, 0, 426, 112, 461,
	440, 0, 113, 114, 483, 0, 115, 0, 116, 0,
	0, 332, 0, 117, 471, 0, 207, 0, 118, 119,
	467, 469, 0, 0, 120, 0, 333, 121, 484, 485,
	486, 0, 452, 0, 334, 122, 335, 123, 124, 0,
	0, 472, 336, 125, 337, 0, 126, 0, 0, 127,
	0, 128, 129, 130, 131, 132, 338, 133, 134, 137,
	135, 0, 136, 441, 468, 138, 487, 139, 140, 0,
	0, 0, 0, 0, 141, 217, 339, 142, 340, 462,
	143, 144, 0, 463, 145, 220, 0, 146, 147, 148,
	488, 149, 150, 0, 152, 153, 151, 154, 0, 155,
	341, 156, 157, 1050, 158, 0, 245, 159, 160, 0,
	223, 161, 162, 458, 163, 164, 342, 165, 489, 166,
	0, 167, 168, 170, 490, 169, 464, 0, 0, 171,
	172, 0, 227, 491, 492, 0, 0, 173, 465, 466,
	439, 174, 175, 176, 177, 0, 0, 178, 179, 180,
	459, 0, 181, 182, 183, 232, 493, 0, 184, 0,
	0, 0, 0, 185, 186, 187, 188, 445, 434, 435,
	432, 433, 421, 0, 0, 0, 0, 1046, 1047, 88,
	89, 0, 90, 1048, 0, 0, 1049, 427, 0, 0,
	0, 91, 92, 0, 474, 475, 93, 476, 477, 0,
	94, 194, 195, 95, 442, 460, 478, 479, 198, 0,
	470, 0, 453, 0, 96, 97, 98, 0, 99, 0,
	100, 0, 331, 101, 1685, 0, 454, 456, 0, 455,
	457, 103, 104, 105, 106, 480, 107, 481, 482, 0,
	0, 108, 0, 0, 0, 473, 110, 0, 111, 0,
	0, 0, 426, 112, 461, 440, 0, 113, 114, 483,
	0, 115, 0, 116, 0, 0, 332, 0, 117, 471,
	0, 207, 0, 118, 119, 467, 469, 0, 0, 120,
	0, 333, 121, 484, 485, 486, 0, 452, 0, 0,
	122, 335, 123, 124, 0, 0, 472, 336, 125, 0,
	0, 126, 0, 0, 127, 0, 128, 129, 130, 131,
	132, 338, 133, 134, 137, 135, 416, 136, 441, 468,
	138, 487, 139, 140, 0, 0, 0, 0, 0, 141,
	217, 339, 142, 340, 462, 143, 144, 0, 463, 145,
	220, 0, 146, 147, 148, 488, 149, 150, 0, 152,
	153, 151, 154, 0, 155, 341, 156, 157, 430, 158,
	0, 245, 159, 160, 0, 223, 161, 162, 458, 163,
	164, 0, 165, 489, 166, 0, 167, 168, 170, 490,
	169, 464, 0, 0, 171, 172, 0, 227, 491, 492,
	0, 0, 173, 465, 466, 439, 174, 175, 1684, 177,
	0, 0, 178, 179, 180, 459, 0, 181, 182, 183,
	232, 493, 0, 184, 0, 0, 0, 0, 185, 186,
	187, 188, 445, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 413, 414, 88, 89, 0, 90, 415, 0,
	0, 422, 0, 0, 0, 0, 91, 92, 189, 190,
	191, 93, 192, 193, 0, 94, 194, 195, 95, 0,
	460, 196, 197, 198, 0, 470, 0, 453, 0, 96,
	97, 98, 0, 99, 0, 100, 0, 331, 101, 102,
	0, 454, 456, 0, 455, 457, 103, 104, 105, 106,
	200, 107, 201, 202, 0, 0, 108, 0, 0, 0,
	109, 110, 0, 111, 0, 0, 0, 203, 112, 461,
	0, 0, 113, 114, 205, 0, 115, 0, 116, 0,
	0, 332, 0, 117, 471, 0, 207, 0, 118, 119,
	467, 469, 0, 0, 120, 0, 333, 121, 210, 211,
	212, 0, 213, 0, 334, 122, 335, 123, 124, 0,
	0, 472, 336, 125, 337, 0, 126, 0, 0, 127,
	0, 128, 129, 130, 131, 132, 338, 133, 134, 137,
	135, 0, 136, 0, 468, 138, 216, 139, 140, 0,
	0, 0, 0, 0, 141, 217, 339, 142, 340, 462,
	143, 144, 0, 463, 145, 220, 0, 146, 147, 148,
	221, 149, 150, 0, 152, 153, 151, 154, 0, 155,
	341, 156, 157, 222, 158, 0, 245, 159, 160, 0,
	223, 161, 162, 458, 163, 164, 342, 165, 224, 166,
	0, 167, 168, 170, 225, 169, 464, 0, 0, 171,
	172, 0, 227, 228, 229, 0, 0, 173, 465, 466,
	0, 174, 175, 176, 177, 0, 0, 178, 179, 180,
	459, 0, 181, 182, 183, 232, 233, 0, 184, 0,
	0, 0, 0, 185, 186, 187, 188, 325, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 88,
	89, 0, 90, 0, 0, 0, 1471, 0, 0, 0,
	0, 91, 92, 189, 190, 191, 93, 192, 193, 0,
	94, 194, 195, 95, 0, 0, 196, 197, 198, 0,
	199, 0, 330, 0, 96, 97, 98, 0, 99, 0,
	100, 0, 331, 101, 102, 0, 0, 0, 0, 0,
	0, 103, 104, 105, 106, 200, 107, 201, 202, 0,
	0, 108, 0, 0, 0, 109, 110, 0, 111, 0,
	0, 0, 203, 112, 204, 0, 0, 113, 114, 205,
	0, 115, 0, 116, 0, 0, 332, 0, 117, 206,
	0, 207, 0, 118, 119, 208, 209, 0, 0, 120,
	0, 333, 121, 210, 211, 212, 0, 213, 0, 334,
	122, 335, 123, 124, 0, 0, 214, 336, 125, 337,
	0, 126, 0, 0, 127, 0, 128, 129, 130, 131,
	132, 338, 133, 134, 137, 135, 0, 136, 0, 215,
	138, 216, 139, 140, 0, 0, 0, 0, 0, 141,
	217, 339, 142, 340, 218, 143, 144, 0, 219, 145,
	220, 0, 146, 147, 148, 221, 149, 150, 0, 152,
	153, 151, 154, 0, 155, 341, 156, 157, 222, 158,
	0, 245, 159, 160, 49, 223, 161, 162, 0, 163,
	164, 342, 165, 224, 166, 0, 167, 168, 170, 225,
	169, 226, 0, 51, 171, 172, 0, 227, 228, 229,
	0, 0, 173, 230, 231, 0, 174, 175, 176, 177,
	0, 0, 178, 179, 180, 0, 0, 181, 182, 183,
	329, 233, 0, 184, 0, 0, 0, 47, 185, 186,
	187, 188, 0, 48, 325, 575, 0, 576, 571, 566,
	0, 0, 0, 0, 0, 0, 88, 89, 0, 90,
	0, 46, 0, 0, 0, 0, 0, 0, 91, 92,
	189, 190, 191, 93, 192, 193, 0, 94, 194, 195,
	95, 0, 0, 196, 197, 198, 0, 199, 0, 330,
	0, 96, 97, 98, 0, 99, 0, 100, 0, 331,
	101, 102, 0, 0, 0, 0, 0, 0, 103, 104,
	105, 106, 200, 107, 201, 202, 579, 0, 108, 0,
	0, 0, 109, 110, 0, 111, 0, 0, 0, 203,
	112, 204, 568, 0, 113, 114, 205, 0, 115, 0,
	116, 0, 0, 332, 0, 117, 206, 0, 207, 0,
	118, 119, 208, 209, 0, 0, 120, 0, 333, 121,
	210, 211, 212, 0, 213, 0, 334, 122, 335, 123,
	124, 0, 0, 214, 336, 125, 337, 0, 126, 0,
	0, 127, 0, 128, 129, 130, 131, 132, 338, 133,
	134, 137, 135, 0, 136, 0, 215, 138, 216, 139,
	140, 0, 569, 0, 0, 0, 141, 217, 339, 142,
	340, 218, 143, 144, 0, 219, 145, 220, 0, 146,
	147, 148, 221, 149, 150, 0, 152, 153, 151, 154,
	0, 155, 341, 156, 157, 222, 158, 0, 245, 159,
	160, 0, 223, 161, 162, 0, 163, 164, 342, 165,
	224, 166, 0, 167, 168, 170, 225, 169, 226, 0,
	0, 171, 172, 0, 227, 228, 229, 0, 0, 173,
	230, 231, 567, 174, 175, 176, 177, 0, 0, 178,
	179, 180, 0, 0, 181, 182, 183, 232, 233, 0,
	184, 0, 0, 0, 0, 185, 186, 187, 188, 325,
	575, 0, 576, 571, 566, 0, 0, 0, 0, 577,
	572, 88, 89, 0, 90, 0, 0, 0, 0, 0,
	0, 0, 0, 91, 92, 189, 190, 191, 93, 192,
	193, 0, 94, 194, 195, 95, 0, 0, 196, 197,
	198, 0, 199, 0, 330, 0, 96, 97, 98, 0,
	99, 0, 100, 0, 331, 101, 102, 0, 0, 0,
	0, 0, 0, 103, 104, 105, 106, 200, 107, 201,
	202, 562, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 203, 112, 204, 568, 0, 113,
	114, 205, 0, 115, 0, 116, 0, 0, 332, 0,
	117, 206, 0, 207, 0, 118, 119, 208, 209, 0,
	0, 120, 0, 333, 121, 210, 211, 212, 0, 213,
	0, 334, 122, 335, 123, 124, 0, 0, 214, 336,
	125, 337, 0, 126, 0, 0, 127, 0, 128, 129,
	130, 131, 132, 338, 133, 134, 137, 135, 0, 136,
	0, 215, 138, 216, 139, 140, 0, 569, 0, 0,
	0, 141, 217, 339, 142, 340, 218, 143, 144, 0,
	219, 145, 220, 0, 146, 147, 148, 221, 149, 150,
	0, 152, 153, 151, 154, 0, 155, 341, 156, 157,
	222, 158, 0, 245, 159, 160, 0, 223, 161, 162,
	0, 163, 164, 342, 165, 224, 166, 0, 167, 168,
	170, 225, 169, 226, 0, 0, 171, 172, 0, 227,
	228, 229, 0, 0, 173, 230, 231, 567, 174, 175,
	176, 177, 0, 0, 178, 179, 180, 0, 0, 181,
	182, 183, 232, 233, 0, 184, 0, 0, 0, 0,
	185, 186, 187, 188, 325, 575, 0, 576, 571, 566,
	0, 0, 0, 0, 577, 572, 88, 89, 0, 90,
	0, 0, 0, 0, 0, 0, 0, 0, 91, 92,
	189, 190, 191, 93, 192, 193, 0, 94, 194, 195,
	95, 0, 0, 196, 197, 198, 0, 199, 0, 330,
	0, 96, 97, 98, 0, 99, 0, 100, 0, 331,
	101, 102, 0, 0, 0, 0, 0, 0, 103, 104,
	105, 106, 200, 107, 201, 202, 0, 0, 108, 0,
	0, 0, 109, 110, 0, 111, 0, 0, 0, 203,
	112, 204, 568, 0, 113, 114, 205, 0, 115, 0,
	116, 0, 0, 332, 0, 117, 206, 0, 207, 0,
	118, 119, 208, 209, 0, 0, 120, 0, 333, 121,
	210, 211, 212, 0, 213, 0, 334, 122, 335, 123,
	124, 0, 0, 214, 336, 125, 337, 0, 126, 0,
	0, 127, 0, 128, 129, 130, 131, 132, 338, 133,
	134, 137, 135, 0, 136, 0, 215, 138, 216, 139,
	140, 0, 569, 0, 0, 0, 141, 217, 339, 142,
	340, 218, 143, 144, 0, 219, 145, 220, 0, 146,
	147, 148, 221, 149, 150, 0, 152, 153, 151, 154,
	0, 155, 341, 156, 157, 222, 158, 0, 245, 159,
	160, 0, 223, 161, 162, 0, 163, 164, 342, 165,
	224, 166, 0, 167, 168, 170, 225, 169, 226, 0,
	0, 171, 172, 0, 227, 228, 229, 0, 0, 173,
	230, 231, 567, 174, 175, 176, 177, 0, 0, 178,
	179, 180, 0, 0, 181, 182, 183, 232, 233, 85,
	184, 0, 0, 0, 0, 185, 186, 187, 188, 0,
	0, 88, 89, 0, 90, 0, 0, 0, 0, 577,
	572, 0, 0, 91, 92, 189, 190, 191, 93, 192,
	193, 0, 94, 194, 195, 95, 0, 0, 196, 197,
	198, 0, 199, 0, 0, 0, 96, 97, 98, 0,
	99, 0, 100, 0, 0, 101, 102, 0, 0, 0,
	0, 0, 0, 103, 104, 105, 106, 200, 107, 201,
	202, 0, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 203, 112, 204, 0, 0, 113,
	114, 205, 0, 115, 0, 116, 0, 0, 0, 0,
	117, 206, 0, 207, 0, 118, 119, 208, 209, 0,
	0, 120, 0, 0, 121, 210, 211, 212, 0, 213,
	0, 0, 122, 0, 123, 124, 0, 0, 214, 0,
	125, 0, 0, 126, 0, 0, 127, 0, 128, 129,
	130, 131, 132, 0, 133, 134, 137, 135, 0, 136,
	0, 215, 138, 216, 139, 140, 0, 0, 298, 0,
	0, 141, 217, 0, 142, 0, 218, 143, 144, 0,
	219, 145, 220, 0, 146, 147, 148, 221, 149, 150,
	0, 152, 153, 151, 154, 0, 155, 0, 156, 157,
	222, 158, 0, 245, 159, 160, 49, 223, 161, 162,
	0, 163, 164, 0, 165, 224, 166, 0, 167, 168,
	170, 225, 169, 226, 0, 51, 171, 172, 0, 227,
	228, 229, 0, 0, 173, 230, 231, 0, 174, 175,
	176, 177, 0, 0, 178, 179, 180, 0, 0, 181,
	182, 183, 329, 233, 0, 184, 0, 0, 0, 47,
	185, 186, 187, 188, 85, 48, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 88, 89, 0, 90,
	0, 0, 0, 914, 0, 0, 0, 0, 91, 92,
	189, 190, 191, 93, 192, 193, 0, 94, 194, 195,
	95, 0, 0, 196, 197, 198, 0, 199, 0, 0,
	0, 96, 97, 98, 0, 99, 0, 100, 0, 0,
	101, 102, 0, 0, 0, 0, 0, 0, 103, 104,
	105, 106, 200, 107, 201, 202, 0, 0, 108, 0,
	0, 0, 109, 110, 0, 111, 0, 0, 0, 203,
	112, 204, 0, 0, 113, 114, 205, 0, 115, 0,
	116, 0, 0, 0, 0, 117, 206, 0, 207, 0,
	118, 119, 208, 209, 0, 0, 120, 0, 0, 121,
	210, 211, 212, 0, 213, 0, 0, 122, 0, 123,
	124, 0, 0, 214, 0, 125, 0, 0, 126, 0,
	0, 127, 0, 128, 129, 130, 131, 132, 0, 133,
	134, 137, 135, 0, 136, 0, 215, 138, 216, 139,
	140, 0, 0, 0, 0, 0, 141, 217, 0, 142,
	0, 218, 143, 144, 0, 219, 145, 220, 0, 146,
	147, 148, 221, 149, 150, 0, 152, 153, 151, 154,
	0, 155, 0, 156, 157, 222, 158, 0, 245, 159,
	160, 49, 223, 161, 162, 0, 163, 164, 0, 165,
	224, 166, 0, 167, 168, 170, 225, 169, 226, 0,
	51, 171, 172, 0, 227, 228, 229, 0, 0, 173,
	230, 231, 0, 174, 175, 176, 177, 0, 0, 178,
	179, 180, 0, 0, 181, 182, 183, 329, 233, 0,
	184, 0, 0, 0, 47, 185, 186, 187, 188, 85,
	48, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 88, 89, 0, 90, 0, 0, 0, 46, 0,
	1160, 0, 0, 91, 92, 189, 190, 191, 93, 192,
	193, 0, 94, 194, 195, 95, 0, 0, 196, 197,
	198, 0, 199, 0, 0, 0, 96, 97, 98, 0,
	99, 0, 100, 0, 0, 101, 102, 0, 0, 0,
	0, 0, 0, 103, 104, 105, 106, 200, 107, 201,
	202, 0, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 203, 112, 204, 0, 0, 113,
	114, 205, 0, 115, 0, 116, 0, 0, 0, 0,
	117, 206, 0, 207, 0, 118, 119, 208, 209, 0,
	0, 120, 0, 0, 121, 210, 211, 212, 0, 213,
	0, 0, 122, 0, 123, 124, 0, 0, 214, 0,
	125, 0, 0, 126, 0, 0, 127, 0, 128, 129,
	130, 131, 132, 0, 133, 134, 137, 135, 0, 136,
	0, 215, 138, 216, 139, 140, 0, 0, 0, 0,
	0, 141, 217, 0, 142, 0, 218, 143, 144, 0,
	219, 145, 220, 0, 146, 147, 148, 221, 149, 150,
	0, 152, 153, 151, 154, 0, 155, 0, 156, 157,
	222, 158, 0, 245, 159, 160, 0, 223, 161, 162,
	0, 163, 164, 0, 165, 224, 166, 0, 167, 168,
	170, 225, 169, 226, 0, 0, 171, 172, 0, 227,
	228, 229, 0, 0, 173, 230, 231, 0, 174, 175,
	176, 177, 0, 0, 178, 179, 180, 0, 0, 181,
	182, 183, 232, 233, 0, 184, 0, 0, 0, 0,
	185, 186, 187, 188, 85, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 88, 89, 0, 90,
	0, 0, 0, 0, 403, 0, 0, 0, 91, 92,
	189, 190, 191, 93, 192, 193, 0, 94, 194, 195,
	95, 0, 0, 196, 197, 198, 0, 199, 0, 0,
	0, 96, 97, 98, 0, 99, 0, 100, 0, 0,
	101, 102, 0, 0, 0, 0, 0, 0, 103, 104,
	105, 106, 200, 107, 201, 202, 0, 0, 108, 0,
	0, 0, 109, 110, 0, 111, 0, 0, 0, 203,
	112, 204, 0, 0, 113, 114, 205, 0, 115, 0,
	116, 0, 0, 0, 0, 117, 206, 0, 207, 0,
	118, 119, 208, 209, 0, 0, 120, 0, 0, 121,
	210, 211, 212, 0, 213, 0, 0, 122, 0, 123,
	124, 0, 0, 214, 0, 125, 0, 0, 126, 0,
	0, 127, 0, 128, 129, 130, 131, 132, 0, 133,
	134, 137, 135, 0, 136, 0, 215, 138, 216, 139,
	140, 0, 0, 298, 0, 0, 141, 217, 0, 142,
	0, 218, 143, 144, 0, 219, 145, 220, 0, 146,
	147, 148, 221, 149, 150, 0, 152, 153, 151, 154,
	0, 155, 0, 156, 157, 222, 158, 0, 245, 159,
	160, 0, 223, 161, 162, 0, 163, 164, 0, 165,
	224, 166, 0, 167, 168, 170, 225, 169, 226, 0,
	0, 171, 172, 0, 227, 228, 229, 0, 0, 173,
	230, 231, 0, 174, 175, 176, 177, 0, 0, 178,
	179, 180, 0, 0, 181, 182, 183, 232, 233, 0,
	184, 0, 0, 0, 0, 185, 186, 187, 188, 85,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 88, 89, 0, 90, 0, 0, 0, 914, 0,
	0, 0, 0, 91, 92, 189, 190, 191, 93, 192,
	193, 0, 94, 194, 195, 95, 0, 0, 196, 197,
	198, 0, 199, 0, 0, 0, 96, 97, 98, 0,
	99, 0, 100, 0, 0, 101, 102, 0, 0, 0,
	0, 0, 0, 103, 104, 105, 106, 200, 107, 201,
	202, 0, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 203, 112, 204, 0, 0, 113,
	114, 205, 0, 115, 0, 116, 0, 0, 0, 0,
	117, 206, 0, 207, 0, 118, 119, 208, 209, 0,
	0, 120, 0, 0, 121, 210, 211, 212, 0, 213,
	0, 0, 122, 0, 123, 124, 0, 0, 214, 0,
	125, 0, 0, 126, 0, 0, 127, 0, 128, 129,
	130, 131, 132, 0, 133, 134, 137, 135, 0, 136,
	0, 215, 138, 216, 139, 140, 0, 0, 0, 0,
	0, 141, 217, 0, 142, 0, 218, 143, 144, 0,
	219, 145, 220, 0, 146, 147, 148, 221, 149, 150,
	0, 152, 153, 151, 154, 0, 155, 0, 156, 157,
	222, 158, 0, 245, 159, 160, 0, 223, 161, 162,
	0, 163, 164, 0, 165, 224, 166, 0, 167, 168,
	170, 225, 169, 226, 0, 0, 171, 172, 0, 227,
	228, 229, 0, 0, 173, 230, 231, 0, 174, 175,
	176, 177, 0, 0, 178, 179, 180, 0, 0, 181,
	182, 183, 232, 233, 0, 184, 0, 0, 0, 0,
	185, 186, 187, 188, 85, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 88, 89, 0, 90,
	0, 0, 0, 849, 0, 0, 0, 0, 91, 92,
	189, 190, 191, 93, 192, 193, 0, 94, 194, 195,
	95, 0, 0, 196, 197, 198, 0, 199, 0, 0,
	0, 96, 97, 98, 0, 99, 0, 100, 0, 0,
	101, 102, 0, 0, 0, 0, 0, 0, 103, 104,
	105, 106, 200, 107, 201, 202, 0, 0, 108, 0,
	0, 0, 109, 110, 0, 111, 0, 0, 0, 203,
	112, 204, 0, 0, 113, 114, 205, 0, 115, 0,
	116, 0, 0, 0, 0, 117, 206, 0, 207, 0,
	118, 119, 208, 209, 0, 0, 120, 0, 0, 121,
	210, 211, 212, 0, 213, 0, 0, 122, 0, 123,
	124, 0, 0, 214, 0, 125, 0, 0, 126, 0,
	0, 127, 0, 128, 129, 130, 131, 132, 0, 133,
	134, 137, 135, 0, 136, 0, 215, 138, 216, 139,
	140, 0, 0, 0, 0, 0, 141, 217, 0, 142,
	0, 218, 143, 144, 0, 219, 145, 220, 0, 146,
	147, 148, 221, 149, 150, 0, 152, 153, 151, 154,
	0, 155, 0, 156, 157, 222, 158, 0, 245, 159,
	160, 0, 223, 161, 162, 0, 163, 164, 0, 165,
	224, 166, 0, 167, 168, 170, 225, 169, 226, 0,
	0, 171, 172, 0, 227, 228, 229, 0, 0, 173,
	230, 231, 0, 174, 175, 176, 177, 0, 0, 178,
	179, 180, 0, 0, 181, 182, 183, 232, 233, 0,
	184, 0, 0, 0, 0, 185, 186, 187, 188, 85,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 88, 89, 0, 90, 0, 0, 0, 1377, 0,
	0, 0, 0, 91, 92, 189, 190, 191, 93, 192,
	193, 0, 94, 194, 195, 95, 0, 0, 196, 197,
	198, 0, 199, 0, 0, 0, 96, 97, 98, 0,
	99, 0, 100, 0, 0, 101, 102, 0, 0, 0,
	0, 0, 0, 103, 104, 105, 106, 200, 107, 201,
	202, 0, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 203, 112, 204, 0, 0, 113,
	114, 205, 0, 115, 0, 116, 0, 0, 0, 0,
	117, 206, 0, 207, 0, 118, 119, 208, 209, 0,
	0, 120, 0, 0, 121, 210, 211, 212, 0, 213,
	0, 0, 122, 0, 123, 124, 0, 0, 214, 0,
	125, 0, 0, 126, 0, 0, 127, 0, 128, 129,
	130, 131, 132, 0, 133, 134, 137, 135, 0, 136,
	0, 215, 138, 216, 139, 140, 0, 0, 0, 0,
	0, 141, 217, 0, 142, 0, 218, 143, 144, 0,
	219, 145, 220, 0, 146, 147, 148, 221, 149, 150,
	0, 152, 153, 151, 154, 0, 155, 0, 156, 157,
	222, 158, 0, 245, 159, 160, 0, 223, 161, 162,
	0, 163, 164, 0, 165, 224, 166, 0, 167, 168,
	170, 225, 169, 226, 0, 0, 171, 172, 0, 227,
	228, 229, 0, 0, 173, 230, 231, 0, 174, 175,
	176, 177, 0, 0, 178, 179, 180, 0, 0, 181,
	182, 183, 232, 233, 0, 184, 0, 0, 0, 0,
	185, 186, 187, 188, 85, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 88, 89, 0, 90,
	0, 0, 0, 504, 0, 0, 0, 0, 91, 92,
	189, 190, 191, 93, 192, 193, 0, 94, 194, 195,
	95, 0, 0, 196, 197, 198, 0, 199, 0, 0,
	0, 96, 97, 98, 0, 99, 0, 100, 0, 0,
	101, 102, 0, 0, 0, 0, 0, 0, 103, 104,
	547, 106, 200, 107, 201, 202, 0, 0, 108, 0,
	0, 0, 109, 110, 0, 111, 0, 0, 0, 203,
	112, 204, 0, 0, 113, 114, 205, 0, 115, 0,
	116, 0, 0, 0, 0, 117, 206, 0, 207, 0,
	118, 119, 208, 209, 0, 0, 120, 0, 0, 121,
	210, 211, 212, 0, 213, 0, 0, 122, 0, 123,
	124, 0, 0, 214, 0, 125, 0, 0, 126, 0,
	0, 127, 0, 128, 129, 130, 131, 132, 0, 133,
	134, 137, 135, 0, 136, 0, 215, 138, 216, 139,
	140, 0, 0, 0, 0, 0, 141, 217, 0, 142,
	0, 218, 143, 144, 0, 219, 145, 220, 0, 146,
	147, 148, 221, 149, 150, 0, 152, 153, 151, 154,
	0, 155, 0, 156, 157, 222, 158, 0, 245, 159,
	160, 0, 223, 161, 162, 0, 163, 164, 0, 165,
	224, 166, 0, 167, 168, 170, 225, 169, 226, 0,
	546, 171, 172, 0, 227, 228, 229, 0, 0, 173,
	230, 231, 0, 174, 175, 176, 177, 0, 0, 178,
	179, 180, 0, 0, 181, 182, 183, 232, 233, 85,
	184, 0, 0, 0, 0, 185, 186, 187, 188, 0,
	0, 88, 89, 0, 90, 0, 0, 0, 0, 0,
	0, 550, 0, 91, 92, 189, 190, 191, 93, 192,
	193, 0, 94, 194, 195, 95, 0, 0, 196, 197,
	198, 0, 199, 0, 0, 0, 96, 97, 98, 0,
	99, 0, 100, 0, 0, 101, 102, 0, 0, 0,
	0, 0, 0, 103, 104, 105, 106, 200, 107, 201,
	202, 0, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 203, 112, 204, 0, 0, 113,
	114, 205, 0, 115, 0, 116, 0, 0, 0, 0,
	117, 206, 0, 207, 0, 118, 119, 208, 209, 0,
	0, 120, 0, 0, 121, 210, 211, 212, 0, 213,
	0, 0, 122, 0, 123, 124, 0, 0, 214, 0,
	125, 0, 0, 126, 0, 0, 127, 0, 128, 129,
	130, 131, 132, 0, 133, 134, 137, 135, 0, 136,
	0, 215, 138, 216, 139, 140, 0, 0, 0, 0,
	0, 141, 217, 0, 142, 0, 218, 143, 144, 0,
	219, 145, 220, 0, 146, 147, 148, 221, 149, 150,
	0, 152, 153, 151, 154, 0, 155, 0, 156, 157,
	222, 158, 0, 245, 159, 160, 0, 223, 161, 162,
	0, 163, 164, 0, 165, 224, 166, 0, 167, 168,
	170, 225, 169, 226, 0, 0, 171, 172, 0, 227,
	228, 229, 0, 0, 173, 230, 231, 0, 174, 175,
	176, 177, 0, 0, 178, 179, 180, 0, 0, 181,
	182, 183, 232, 233, 325, 184, 0, 0, 0, 0,
	185, 186, 187, 188, 0, 0, 88, 89, 0, 90,
	0, 0, 0, 0, 0, 0, 550, 0, 91, 92,
	189, 190, 191, 93, 192, 193, 0, 94, 194, 195,
	95, 0, 0, 196, 197, 198, 0, 199, 0, 330,
	0, 96, 97, 98, 0, 99, 0, 100, 0, 331,
	101, 102, 0, 0, 0, 0, 0, 0, 103, 104,
	105, 106, 200, 107, 201, 202, 0, 0, 108, 0,
	0, 0, 109, 110, 0, 111, 0, 0, 0, 203,
	112, 204, 0, 0, 113, 114, 205, 0, 115, 0,
	116, 0, 0, 332, 0, 117, 206, 0, 207, 0,
	118, 119, 208, 209, 0, 0, 120, 0, 333, 121,
	210, 211, 212, 0, 213, 0, 334, 122, 335, 123,
	124, 0, 0, 214, 336, 125, 337, 0, 126, 0,
	0, 127, 0, 128, 129, 130, 131, 132, 338, 133,
	134, 137, 135, 0, 136, 0, 215, 138, 216, 139,
	140, 0, 0, 0, 0, 0, 141, 217, 339, 142,
	340, 218, 143, 144, 0, 219, 145, 220, 0, 146,
	147, 148, 221, 149, 150, 0, 152, 153, 151, 154,
	0, 155, 341, 156, 157, 222, 158, 0, 245, 159,
	160, 0, 223, 161, 162, 0, 163, 164, 342, 165,
	224, 166, 0, 167, 168, 170, 225, 169, 226, 0,
	0, 171, 172, 0, 227, 228, 229, 0, 0, 173,
	230, 231, 0, 174, 175, 176, 177, 0, 0, 178,
	179, 180, 0, 0, 181, 182, 183, 232, 233, 85,
	184, 0, 0, 0, 0, 185, 186, 187, 188, 0,
	0, 88, 89, 0, 90, 0, 0, 0, 0, 0,
	0, 0, 0, 91, 92, 189, 190, 191, 93, 192,
	193, 0, 94, 194, 195, 95, 0, 0, 196, 197,
	198, 822, 199, 0, 0, 0, 96, 97, 98, 0,
	99, 820, 100, 0, 0, 101, 102, 0, 0, 0,
	0, 0, 0, 103, 104, 105, 106, 200, 107, 201,
	202, 0, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 203, 112, 204, 0, 0, 113,
	114, 205, 0, 115, 0, 116, 825, 0, 0, 0,
	117, 206, 0, 207, 0, 118, 119, 208, 209, 0,
	890, 120, 0, 0, 121, 210, 211, 212, 0, 213,
	0, 0, 122, 0, 123, 124, 0, 0, 214, 0,
	125, 0, 0, 126, 0, 0, 127, 0, 128, 129,
	130, 131, 132, 0, 133, 134, 137, 135, 0, 136,
	0, 215, 138, 216, 139, 140, 0, 0, 0, 0,
	0, 141, 217, 0, 142, 0, 218, 143, 144, 0,
	219, 145, 220, 824, 146, 147, 148, 221, 149, 150,
	0, 152, 153, 151, 154, 0, 155, 0, 156, 157,
	222, 158, 0, 245, 159, 160, 0, 223, 161, 162,
	0, 163, 164, 0, 165, 224, 166, 0, 167, 168,
	170, 225, 169, 226, 0, 0, 171, 172, 0, 227,
	228, 229, 0, 0, 173, 230, 231, 0, 174, 175,
	176, 177, 0, 891, 178, 179, 180, 0, 0, 181,
	182, 183, 232, 233, 85, 184, 0, 0, 0, 0,
	185, 186, 187, 188, 0, 0, 88, 89, 0, 90,
	0, 0, 0, 0, 0, 0, 0, 0, 91, 92,
	189, 190, 191, 93, 192, 193, 0, 94, 194, 195,
	95, 0, 0, 196, 197, 198, 822, 199, 0, 0,
	817, 96, 97, 98, 0, 99, 820, 100, 0, 0,
	101, 102, 0, 0, 0, 0, 0, 0, 103, 104,
	105, 106, 200, 107, 201, 202, 0, 0, 108, 0,
	0, 0, 109, 110, 0, 111, 0, 0, 0, 203,
	112, 204, 0, 0, 113, 114, 205, 0, 115, 0,
	116, 825, 0, 0, 0, 117, 206, 0, 207, 0,
	118, 119, 816, 209, 0, 0, 120, 0, 0, 121,
	210, 211, 212, 0, 213, 0, 0, 122, 0, 123,
	124, 0, 0, 214, 0, 125, 0, 0, 126, 0,
	0, 127, 0, 128, 129, 130, 131, 132, 0, 133,
	134, 137, 135, 0, 136, 0, 215, 138, 216, 139,
	140, 0, 0, 0, 0, 0, 141, 217, 0, 142,
	0, 218, 143, 144, 0, 219, 145, 220, 824, 146,
	147, 148, 221, 149, 150, 0, 152, 153, 151, 154,
	0, 155, 0, 156, 157, 222, 158, 0, 245, 159,
	160, 0, 223, 161, 162, 0, 163, 164, 0, 165,
	224, 166, 0, 167, 168, 170, 225, 169, 226, 0,
	0, 171, 172, 0, 227, 228, 229, 0, 0, 173,
	230, 231, 0, 174, 175, 176, 177, 0, 823, 178,
	179, 180, 0, 0, 181, 182, 183, 232, 233, 85,
	184, 0, 0, 0, 0, 185, 186, 187, 188, 0,
	0, 88, 89, 0, 90, 0, 0, 0, 0, 0,
	1160, 0, 0, 91, 92, 189, 190, 191, 93, 192,
	193, 0, 94, 194, 195, 95, 0, 0, 196, 197,
	198, 0, 199, 0, 0, 0, 96, 97, 98, 0,
	99, 0, 100, 0, 0, 101, 102, 0, 0, 0,
	0, 0, 0, 103, 104, 105, 106, 200, 107, 201,
	202, 0, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 203, 112, 204, 0, 0, 113,
	114, 205, 0, 115, 0, 116, 0, 0, 0, 0,
	117, 206, 0, 207, 0, 118, 119, 208, 209, 0,
	0, 120, 0, 0, 121, 210, 211, 212, 0, 213,
	0, 0, 122, 0, 123, 124, 0, 0, 214, 0,
	125, 0, 0, 126, 0, 0, 127, 0, 128, 129,
	130, 131, 132, 0, 133, 134, 137, 135, 0, 136,
	0, 215, 138, 216, 139, 140, 0, 0, 0, 0,
	0, 141, 217, 0, 142, 0, 218, 143, 144, 0,
	219, 145, 220, 0, 146, 147, 148, 221, 149, 150,
	0, 152, 153, 151, 154, 0, 155, 0, 156, 157,
	222, 158, 0, 245, 159, 160, 0, 223, 161, 162,
	0, 163, 164, 0, 165, 224, 166, 0, 167, 168,
	170, 225, 169, 226, 0, 0, 171, 172, 0, 227,
	228, 229, 0, 0, 173, 230, 231, 0, 174, 175,
	176, 177, 0, 0, 178, 179, 180, 0, 0, 181,
	182, 183, 232, 233, 85, 184, 0, 0, 0, 0,
	185, 186, 187, 188, 0, 0, 88, 89, 0, 90,
	0, 0, 0, 0, 0, 0, 0, 0, 91, 92,
	189, 190, 191, 93, 192, 193, 0, 94, 194, 195,
	95, 0, 0, 196, 197, 198, 0, 199, 0, 0,
	0, 96, 97, 98, 0, 99, 0, 100, 0, 0,
	101, 102, 0, 0, 0, 0, 0, 0, 103, 104,
	105, 106, 200, 107, 201, 202, 0, 0, 108, 0,
	0, 0, 109, 110, 0, 111, 0, 0, 0, 203,
	112, 204, 0, 0, 113, 114, 205, 0, 115, 0,
	116, 0, 0, 0, 0, 117, 206, 0, 207, 0,
	118, 119, 208, 209, 0, 0, 120, 0, 0, 121,
	210, 211, 212, 0, 213, 0, 0, 122, 0, 123,
	124, 0, 0, 214, 0, 125, 0, 0, 126, 0,
	0, 127, 0, 128, 129, 130, 131, 132, 0, 133,
	134, 137, 135, 0, 136, 0, 215, 138, 216, 139,
	140, 0, 0, 298, 0, 0, 141, 217, 0, 142,
	0, 218, 143, 144, 0, 219, 145, 220, 0, 146,
	147, 148, 221, 149, 150, 0, 152, 153, 151, 154,
	0, 155, 0, 156, 157, 222, 158, 0, 245, 159,
	160, 0, 223, 161, 162, 0, 163, 164, 0, 165,
	224, 166, 0, 167, 168, 170, 225, 169, 226, 0,
	0, 171, 172, 0, 227, 228, 229, 0, 0, 173,
	230, 231, 0, 174, 175, 176, 177, 0, 0, 178,
	179, 180, 0, 0, 181, 182, 183, 232, 233, 85,
	184, 0, 0, 0, 0, 185, 186, 187, 188, 0,
	0, 88, 89, 0, 90, 0, 0, 0, 0, 0,
	0, 0, 0, 91, 92, 189, 190, 191, 93, 192,
	193, 0, 94, 194, 195, 95, 0, 0, 196, 197,
	198, 0, 199, 0, 0, 0, 96, 97, 98, 0,
	99, 0, 100, 0, 0, 101, 102, 0, 0, 0,
	0, 0, 0, 103, 104, 105, 106, 200, 107, 201,
	202, 0, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 203, 112, 204, 0, 0, 113,
	114, 205, 0, 115, 0, 116, 0, 0, 0, 0,
	117, 206, 0, 207, 0, 118, 119, 304, 209, 0,
	0, 120, 0, 0, 121, 210, 211, 212, 0, 213,
	0, 0, 122, 0, 123, 124, 0, 0, 214, 0,
	125, 0, 0, 126, 0, 0, 127, 0, 128, 129,
	130, 131, 132, 0, 133, 134, 137, 135, 0, 136,
	0, 215, 138, 216, 139, 140, 0, 0, 298, 0,
	0, 141, 217, 0, 142, 0, 218, 143, 144, 0,
	219, 145, 220, 0, 146, 147, 148, 221, 149, 150,
	0, 152, 153, 151, 154, 0, 155, 0, 156, 157,
	222, 158, 0, 245, 159, 160, 0, 223, 161, 162,
	0, 163, 164, 0, 165, 224, 166, 0, 167, 168,
	170, 225, 169, 226, 0, 0, 171, 172, 0, 227,
	228, 229, 0, 0, 173, 230, 231, 0, 174, 175,
	176, 177, 0, 0, 178, 179, 180, 0, 0, 181,
	182, 183, 232, 233, 85, 184, 0, 0, 0, 0,
	185, 186, 187, 188, 0, 0, 88, 89, 0, 90,
	0, 0, 0, 0, 0, 0, 0, 0, 91, 92,
	189, 190, 191, 93, 192, 193, 0, 94, 194, 195,
	95, 0, 0, 196, 197, 198, 0, 199, 0, 0,
	0, 96, 97, 98, 0, 99, 0, 100, 0, 0,
	101, 102, 0, 0, 0, 0, 0, 0, 103, 104,
	105, 106, 200, 107, 201, 202, 0, 0, 108, 0,
	0, 0, 109, 110, 0, 111, 0, 0, 0, 203,
	112, 204, 0, 0, 113, 114, 205, 0, 115, 0,
	116, 0, 0, 0, 0, 117, 206, 0, 207, 0,
	118, 119, 208, 209, 0, 0, 120, 0, 0, 121,
	210, 211, 212, 0, 213, 0, 0, 122, 0, 123,
	124, 0, 0, 214, 0, 125, 0, 0, 126, 0,
	0, 127, 0, 128, 129, 130, 131, 132, 0, 133,
	134, 137, 135, 0, 136, 0, 215, 138, 216, 139,
	140, 0, 0, 0, 0, 0, 141, 217, 0, 142,
	0, 218, 143, 144, 0, 219, 145, 220, 0, 146,
	147, 148, 221, 149, 150, 0, 152, 153, 151, 154,
	0, 155, 0, 156, 157, 222, 158, 0, 245, 159,
	160, 0, 223, 161, 162, 0, 163, 164, 0, 165,
	224, 166, 0, 167, 168, 170, 225, 169, 226, 0,
	0, 171, 172, 0, 227, 228, 229, 0, 0, 173,
	230, 231, 0, 174, 175, 176, 177, 0, 0, 178,
	179, 180, 0, 0, 181, 182, 183, 232, 233, 85,
	184, 0, 0, 0, 0, 185, 186, 187, 188, 0,
	0, 88, 89, 0, 90, 0, 0, 0, 0, 0,
	0, 0, 0, 91, 92, 189, 190, 191, 93, 192,
	193, 0, 94, 194, 195, 95, 0, 0, 196, 197,
	198, 0, 199, 0, 0, 0, 96, 97, 98, 0,
	99, 0, 100, 0, 0, 101, 102, 0, 0, 0,
	0, 0, 0, 103, 104, 105, 106, 200, 107, 201,
	202, 0, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 203, 112, 204, 0, 0, 113,
	114, 205, 0, 115, 0, 116, 0, 0, 0, 0,
	117, 206, 0, 207, 0, 118, 119, 1095, 209, 0,
	0, 120, 0, 0, 121, 210, 211, 212, 0, 213,
	0, 0, 122, 0, 123, 124, 0, 0, 214, 0,
	125, 0, 0, 126, 0, 0, 127, 0, 128, 129,
	130, 131, 132, 0, 133, 134, 137, 135, 0, 136,
	0, 215, 138, 216, 139, 140, 0, 0, 0, 0,
	0, 141, 217, 0, 142, 0, 218, 143, 144, 0,
	219, 145, 220, 0, 146, 147, 148, 221, 149, 150,
	0, 152, 153, 151, 154, 0, 155, 0, 156, 157,
	222, 158, 0, 245, 159, 160, 0, 223, 161, 162,
	0, 163, 164, 0, 165, 224, 166, 0, 167, 168,
	170, 225, 169, 226, 0, 0, 171, 172, 0, 227,
	228, 229, 0, 0, 173, 230, 231, 0, 174, 175,
	176, 177, 0, 0, 178, 179, 180, 0, 0, 181,
	182, 183, 232, 233, 85, 184, 0, 0, 0, 0,
	185, 186, 187, 188, 0, 0, 88, 89, 0, 90,
	0, 0, 0, 0, 0, 0, 0, 0, 91, 92,
	189, 190, 191, 93, 192, 193, 0, 94, 194, 195,
	95, 0, 0, 196, 197, 198, 0, 199, 0, 0,
	0, 96, 97, 98, 0, 99, 0, 100, 0, 0,
	101, 102, 0, 0, 0, 0, 0, 0, 103, 104,
	105, 106, 200, 107, 201, 202, 0, 0, 108, 0,
	0, 0, 109, 110, 0, 111, 0, 0, 0, 203,
	112, 204, 0, 0, 113, 114, 205, 0, 115, 0,
	116, 0, 0, 0, 0, 117, 206, 0, 207, 0,
	118, 119, 1093, 209, 0, 0, 120, 0, 0, 121,
	210, 211, 212, 0, 213, 0, 0, 122, 0, 123,
	124, 0, 0, 214, 0, 125, 0, 0, 126, 0,
	0, 127, 0, 128, 129, 130, 131, 132, 0, 133,
	134, 137, 135, 0, 136, 0, 215, 138, 216, 139,
	140, 0, 0, 0, 0, 0, 141, 217, 0, 142,
	0, 218, 143, 144, 0, 219, 145, 220, 0, 146,
	147, 148, 221, 149, 150, 0, 152, 153, 151, 154,
	0, 155, 0, 156, 157, 222, 158, 0, 245, 159,
	160, 0, 223, 161, 162, 0, 163, 164, 0, 165,
	224, 166, 0, 167, 168, 170, 225, 169, 226, 0,
	0, 171, 172, 0, 227, 228, 229, 0, 0, 173,
	230, 231, 0, 174, 175, 176, 177, 0, 0, 178,
	179, 180, 0, 0, 181, 182, 183, 232, 233, 85,
	184, 0, 0, 0, 0, 185, 186, 187, 188, 0,
	0, 88, 89, 0, 90, 0, 0, 0, 0, 0,
	0, 0, 0, 91, 92, 189, 190, 191, 93, 192,
	193, 0, 94, 194, 195, 95, 0, 0, 196, 197,
	198, 0, 199, 0, 0, 0, 96, 97, 98, 0,
	99, 0, 100, 0, 0, 101, 102, 0, 0, 0,
	0, 0, 0, 103, 104, 105, 106, 200, 107, 201,
	202, 0, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 203, 112, 204, 0, 0, 113,
	114, 205, 0, 115, 0, 116, 0, 0, 0, 0,
	117, 206, 0, 207, 0, 118, 119, 1084, 209, 0,
	0, 120, 0, 0, 121, 210, 211, 212, 0, 213,
	0, 0, 122, 0, 123, 124, 0, 0, 214, 0,
	125, 0, 0, 126, 0, 0, 127, 0, 128, 129,
	130, 131, 132, 0, 133, 134, 137, 135, 0, 136,
	0, 215, 138, 216, 139, 140, 0, 0, 0, 0,
	0, 141, 217, 0, 142, 0, 218, 143, 144, 0,
	219, 145, 220, 0, 146, 147, 148, 221, 149, 150,
	0, 152, 153, 151, 154, 0, 155, 0, 156, 157,
	222, 158, 0, 245, 159, 160, 0, 223, 161, 162,
	0, 163, 164, 0, 165, 224, 166, 0, 167, 168,
	170, 225, 169, 226, 0, 0, 171, 172, 0, 227,
	228, 229, 0, 0, 173, 230, 231, 0, 174, 175,
	176, 177, 0, 0, 178, 179, 180, 0, 0, 181,
	182, 183, 232, 233, 85, 184, 0, 0, 0, 0,
	185, 186, 187, 188, 0, 0, 88, 89, 0, 90,
	0, 0, 0, 0, 0, 0, 0, 0, 91, 92,
	189, 190, 191, 93, 192, 193, 0, 94, 194, 195,
	95, 0, 0, 196, 197, 198, 0, 199, 0, 0,
	0, 96, 97, 98, 0, 99, 0, 100, 0, 0,
	101, 102, 0, 0, 0, 0, 0, 0, 103, 104,
	105, 106, 200, 107, 201, 202, 0, 0, 108, 0,
	0, 0, 109, 110, 0, 111, 0, 0, 0, 203,
	112, 204, 0, 0, 113, 114, 205, 0, 115, 0,
	116, 0, 0, 0, 0, 117, 206, 0, 207, 0,
	118, 119, 692, 209, 0, 0, 120, 0, 0, 121,
	210, 211, 212, 0, 213, 0, 0, 122, 0, 123,
	124, 0, 0, 214, 0, 125, 0, 0, 126, 0,
	0, 127, 0, 128, 129, 130, 131, 132, 0, 133,
	134, 137, 135, 0, 136, 0, 215, 138, 216, 139,
	140, 0, 0, 0, 0, 0, 141, 217, 0, 142,
	0, 218, 143, 144, 0, 219, 145, 220, 0, 146,
	147, 148, 221, 149, 150, 0, 152, 153, 151, 154,
	0, 155, 0, 156, 157, 222, 158, 0, 245, 159,
	160, 0, 223, 161, 162, 0, 163, 164, 0, 165,
	224, 166, 0, 167, 168, 170, 225, 169, 226, 0,
	0, 171, 172, 0, 227, 228, 229, 0, 0, 173,
	230, 231, 0, 174, 175, 176, 177, 0, 0, 178,
	179, 180, 0, 0, 181, 182, 183, 232, 233, 85,
	184, 0, 0, 0, 0, 185, 186, 187, 188, 0,
	0, 88, 89, 0, 90, 0, 0, 0, 0, 0,
	0, 0, 0, 91, 92, 189, 190, 191, 93, 192,
	193, 0, 94, 194, 195, 95, 0, 0, 196, 197,
	198, 0, 199, 0, 0, 0, 96, 97, 98, 0,
	99, 0, 100, 0, 0, 101, 102, 0, 0, 0,
	0, 0, 0, 103, 104, 105, 106, 200, 107, 201,
	202, 0, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 203, 112, 204, 0, 0, 113,
	114, 205, 0, 115, 0, 116, 0, 0, 0, 0,
	117, 206, 0, 207, 0, 118, 119, 208, 209, 0,
	0, 120, 0, 0, 121, 210, 211, 212, 0, 213,
	0, 0, 122, 0, 123, 124, 0, 0, 214, 0,
	125, 0, 0, 126, 0, 0, 127, 0, 128, 129,
	130, 131, 132, 0, 133, 134, 137, 135, 0, 136,
	0, 215, 138, 216, 139, 140, 0, 0, 0, 0,
	0, 141, 217, 0, 142, 0, 218, 143, 144, 0,
	219, 145, 220, 0, 146, 147, 148, 221, 149, 150,
	0, 152, 153, 151, 154, 0, 155, 0, 156, 157,
	222, 158, 0, 83, 159, 160, 0, 223, 161, 162,
	0, 163, 164, 0, 165, 224, 166, 0, 167, 168,
	170, 225, 169, 226, 0, 0, 171, 172, 0, 227,
	228, 229, 0, 0, 173, 230, 231, 0, 174, 175,
	176, 177, 0, 0, 178, 179, 180, 0, 0, 181,
	182, 183, 232, 233, 85, 184, 0, 0, 0, 0,
	185, 186, 187, 188, 0, 0, 88, 89, 0, 90,
	0, 0, 0, 0, 0, 533, 0, 0, 91, 92,
	189, 190, 191, 93, 192, 193, 0, 94, 194, 195,
	95, 0, 0, 196, 197, 198, 0, 199, 0, 0,
	0, 96, 97, 98, 0, 99, 0, 100, 0, 0,
	101, 102, 0, 0, 0, 0, 0, 0, 103, 104,
	105, 106, 200, 107, 201, 202, 0, 0, 108, 0,
	0, 0, 109, 110, 0, 111, 0, 0, 0, 203,
	112, 204, 0, 0, 113, 114, 205, 0, 115, 0,
	116, 0, 0, 0, 0, 117, 206, 0, 207, 0,
	118, 119, 208, 209, 0, 0, 120, 0, 0, 121,
	210, 211, 212, 0, 213, 0, 0, 122, 0, 123,
	124, 0, 0, 214, 0, 125, 0, 0, 126, 0,
	0, 127, 0, 128, 129, 130, 131, 132, 0, 133,
	134, 137, 135, 0, 136, 0, 215, 138, 216, 139,
	140, 0, 0, 0, 0, 0, 141, 217, 0, 142,
	0, 218, 143, 144, 0, 219, 145, 220, 0, 146,
	147, 148, 221, 149, 150, 0, 152, 153, 151, 154,
	0, 155, 0, 156, 157, 222, 158, 0, 245, 159,
	160, 0, 223, 161, 162, 0, 0, 164, 0, 165,
	224, 166, 0, 167, 168, 170, 225, 169, 226, 0,
	0, 171, 172, 0, 227, 228, 229, 0, 0, 173,
	230, 231, 0, 174, 175, 176, 177, 0, 0, 178,
	179, 180, 0, 0, 181, 182, 183, 232, 233, 85,
	184, 0, 0, 0, 0, 185, 186, 187, 188, 0,
	0, 88, 89, 0, 90, 0, 0, 0, 0, 0,
	0, 0, 0, 91, 92, 189, 190, 191, 93, 192,
	193, 0, 94, 194, 195, 95, 0, 0, 196, 197,
	198, 0, 199, 0, 0, 0, 96, 97, 98, 0,
	99, 0, 100, 0, 0, 101, 102, 0, 0, 0,
	0, 0, 0, 103, 104, 105, 106, 200, 107, 201,
	202, 0, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 203, 112, 204, 0, 0, 113,
	114, 205, 0, 115, 0, 116, 0, 0, 0, 0,
	117, 206, 0, 207, 0, 118, 119, 388, 209, 0,
	0, 120, 0, 0, 121, 210, 211, 212, 0, 213,
	0, 0, 122, 0, 123, 124, 0, 0, 214, 0,
	125, 0, 0, 126, 0, 0, 127, 0, 128, 129,
	130, 131, 132, 0, 133, 134, 137, 135, 0, 136,
	0, 215, 138, 216, 139, 140, 0, 0, 0, 0,
	0, 141, 217, 0, 142, 0, 218, 143, 144, 0,
	219, 145, 220, 0, 146, 147, 148, 221, 149, 150,
	0, 152, 153, 151, 154, 0, 155, 0, 156, 157,
	222, 158, 0, 245, 159, 160, 0, 223, 161, 162,
	0, 163, 164, 0, 165, 224, 166, 0, 167, 168,
	170, 225, 169, 226, 0, 0, 171, 172, 0, 227,
	228, 229, 0, 0, 173, 230, 231, 0, 174, 175,
	176, 177, 0, 0, 178, 179, 180, 0, 0, 181,
	182, 183, 232, 233, 85, 184, 0, 0, 0, 0,
	185, 186, 187, 188, 0, 0, 88, 89, 0, 90,
	0, 0, 0, 0, 0, 0, 0, 0, 91, 92,
	189, 190, 191, 93, 192, 193, 0, 94, 194, 195,
	95, 0, 0, 196, 197, 198, 0, 199, 0, 0,
	0, 96, 97, 98, 0, 99, 0, 100, 0, 0,
	101, 102, 0, 0, 0, 0, 0, 0, 103, 104,
	105, 106, 200, 107, 201, 202, 0, 0, 108, 0,
	0, 0, 109, 110, 0, 111, 0, 0, 0, 203,
	112, 204, 0, 0, 113, 114, 205, 0, 115, 0,
	116, 0, 0, 0, 0, 117, 206, 0, 207, 0,
	118, 119, 385, 209, 0, 0, 120, 0, 0, 121,
	210, 211, 212, 0, 213, 0, 0, 122, 0, 123,
	124, 0, 0, 214, 0, 125, 0, 0, 126, 0,
	0, 127, 0, 128, 129, 130, 131, 132, 0, 133,
	134, 137, 135, 0, 136, 0, 215, 138, 216, 139,
	140, 0, 0, 0, 0, 0, 141, 217, 0, 142,
	0, 218, 143, 144, 0, 219, 145, 220, 0, 146,
	147, 148, 221, 149, 150, 0, 152, 153, 151, 154,
	0, 155, 0, 156, 157, 222, 158, 0, 245, 159,
	160, 0, 223, 161, 162, 0, 163, 164, 0, 165,
	224, 166, 0, 167, 168, 170, 225, 169, 226, 0,
	0, 171, 172, 0, 227, 228, 229, 0, 0, 173,
	230, 231, 0, 174, 175, 176, 177, 0, 0, 178,
	179, 180, 0, 0, 181, 182, 183, 232, 233, 85,
	184, 0, 0, 0, 0, 185, 186, 187, 188, 0,
	0, 88, 89, 0, 90, 0, 0, 0, 0, 0,
	0, 0, 0, 91, 92, 189, 190, 191, 93, 192,
	193, 0, 94, 194, 195, 95, 0, 0, 196, 197,
	348, 0, 199, 0, 0, 0, 96, 97, 98, 0,
	99, 0, 100, 0, 0, 101, 102, 0, 0, 0,
	0, 0, 0, 103, 104, 105, 106, 200, 107, 201,
	202, 0, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 203, 112, 204, 0, 0, 113,
	114, 205, 0, 115, 0, 116, 0, 0, 0, 0,
	117, 206, 0, 207, 0, 118, 119, 208, 209, 0,
	0, 120, 0, 0, 121, 210, 211, 212, 0, 213,
	0, 0, 122, 0, 123, 124, 0, 0, 214, 0,
	125, 0, 0, 126, 0, 0, 127, 0, 128, 129,
	130, 131, 242, 0, 133, 134, 137, 135, 0, 136,
	0, 215, 138, 216, 139, 140, 0, 0, 0, 0,
	0, 141, 217, 0, 142, 0, 218, 143, 144, 0,
	219, 145, 220, 0, 146, 147, 148, 221, 149, 150,
	0, 152, 153, 151, 154, 0, 155, 0, 156, 157,
	222, 158, 0, 245, 159, 160, 0, 223, 161, 162,
	0, 163, 164, 0, 165, 224, 166, 0, 167, 168,
	170, 225, 169, 226, 0, 0, 171, 172, 0, 241,
	228, 229, 0, 0, 237, 230, 231, 0, 174, 175,
	176, 177, 0, 0, 178, 179, 180, 0, 0, 181,
	182, 183, 232, 233, 85, 184, 0, 0, 0, 0,
	185, 186, 187, 188, 0, 0, 88, 89, 0, 90,
	0, 0, 0, 0, 0, 0, 0, 0, 91, 92,
	189, 190, 191, 93, 192, 193, 0, 94, 194, 195,
	95, 0, 0, 196, 197, 198, 0, 199, 0, 0,
	0, 96, 97, 98, 0, 99, 0, 100, 0, 0,
	101, 102, 0, 0, 0, 0, 0, 0, 103, 104,
	105, 106, 200, 107, 201, 202, 0, 0, 108, 0,
	0, 0, 109, 110, 0, 111, 0, 0, 0, 203,
	112, 204, 0, 0, 113, 114, 205, 0, 115, 0,
	116, 0, 0, 0, 0, 117, 206, 0, 207, 0,
	118, 119, 208, 209, 0, 0, 120, 0, 0, 121,
	210, 211, 212, 0, 213, 0, 0, 122, 0, 123,
	124, 0, 0, 214, 0, 125, 0, 0, 126, 0,
	0, 127, 0, 128, 129, 130, 131, 242, 0, 133,
	134, 137, 135, 0, 136, 0, 215, 138, 216, 139,
	140, 0, 0, 0, 0, 0, 141, 217, 0, 142,
	0, 218, 143, 144, 0, 219, 145, 220, 0, 146,
	147, 148, 221, 149, 150, 0, 152, 153, 151, 154,
	0, 155, 0, 156, 157, 222, 158, 0, 245, 159,
	160, 0, 223, 161, 162, 0, 163, 164, 0, 165,
	224, 166, 0, 167, 168, 170, 225, 169, 226, 0,
	0, 171, 172, 0, 241, 228, 229, 0, 0, 237,
	230, 231, 0, 174, 175, 176, 177, 0, 0, 178,
	179, 180, 0, 0, 181, 182, 183, 232, 233, 85,
	184, 0, 0, 0, 0, 185, 186, 187, 188, 0,
	0, 88, 89, 0, 90, 0, 0, 0, 0, 0,
	0, 0, 0, 91, 92, 189, 190, 191, 93, 192,
	193, 0, 94, 194, 195, 95, 0, 0, 196, 197,
	198, 0, 199, 0, 0, 0, 96, 97, 98, 0,
	99, 0, 100, 0, 0, 101, 102, 0, 0, 0,
	0, 0, 0, 103, 104, 105, 106, 200, 107, 201,
	202, 0, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 203, 112, 204, 0, 0, 113,
	114, 205, 0, 115, 0, 116, 0, 0, 0, 0,
	117, 206, 0, 207, 0, 118, 119, 320, 209, 0,
	0, 120, 0, 0, 121, 210, 211, 212, 0, 213,
	0, 0, 122, 0, 123, 124, 0, 0, 214, 0,
	125, 0, 0, 126, 0, 0, 127, 0, 128, 129,
	130, 131, 132, 0, 133, 134, 137, 135, 0, 136,
	0, 215, 138, 216, 139, 140, 0, 0, 0, 0,
	0, 141, 217, 0, 142, 0, 218, 143, 144, 0,
	219, 145, 220, 0, 146, 147, 148, 221, 149, 150,
	0, 152, 153, 151, 154, 0, 155, 0, 156, 157,
	222, 158, 0, 245, 159, 160, 0, 223, 161, 162,
	0, 163, 164, 0, 165, 224, 166, 0, 167, 168,
	170, 225, 169, 226, 0, 0, 171, 172, 0, 227,
	228, 229, 0, 0, 173, 230, 231, 0, 174, 175,
	176, 177, 0, 0, 178, 179, 180, 0, 0, 181,
	182, 183, 232, 233, 85, 184, 0, 0, 0, 0,
	185, 186, 187, 188, 0, 0, 88, 89, 0, 90,
	0, 0, 0, 0, 0, 0, 0, 0, 91, 92,
	189, 190, 191, 93, 192, 193, 0, 94, 194, 195,
	95, 0, 0, 196, 197, 198, 0, 199, 0, 0,
	0, 96, 97, 98, 0, 99, 0, 100, 0, 0,
	101, 102, 0, 0, 0, 0, 0, 0, 103, 104,
	105, 106, 200, 107, 201, 202, 0, 0, 108, 0,
	0, 0, 109, 110, 0, 111, 0, 0, 0, 203,
	112, 204, 0, 0, 113, 114, 205, 0, 115, 0,
	116, 0, 0, 0, 0, 117, 206, 0, 207, 0,
	118, 119, 317, 209, 0, 0, 120, 0, 0, 121,
	210, 211, 212, 0, 213, 0, 0, 122, 0, 123,
	124, 0, 0, 214, 0, 125, 0, 0, 126, 0,
	0, 127, 0, 128, 129, 130, 131, 132, 0, 133,
	134, 137, 135, 0, 136, 0, 215, 138, 216, 139,
	140, 0, 0, 0, 0, 0, 141, 217, 0, 142,
	0, 218, 143, 144, 0, 219, 145, 220, 0, 146,
	147, 148, 221, 149, 150, 0, 152, 153, 151, 154,
	0, 155, 0, 156, 157, 222, 158, 0, 245, 159,
	160, 0, 223, 161, 162, 0, 163, 164, 0, 165,
	224, 166, 0, 167, 168, 170, 225, 169, 226, 0,
	0, 171, 172, 0, 227, 228, 229, 0, 0, 173,
	230, 231, 0, 174, 175, 176, 177, 0, 0, 178,
	179, 180, 0, 0, 181, 182, 183, 232, 233, 85,
	184, 0, 0, 0, 0, 185, 186, 187, 188, 0,
	0, 88, 89, 0, 90, 0, 0, 0, 0, 0,
	0, 0, 0, 91, 92, 189, 190, 191, 93, 192,
	193, 0, 94, 194, 195, 95, 0, 0, 196, 197,
	198, 0, 199, 0, 0, 0, 96, 97, 98, 0,
	99, 0, 100, 0, 0, 101, 102, 0, 0, 0,
	0, 0, 0, 103, 104, 105, 106, 200, 107, 201,
	202, 0, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 203, 112, 204, 0, 0, 113,
	114, 205, 0, 115, 0, 116, 0, 0, 0, 0,
	117, 206, 0, 207, 0, 118, 119, 315, 209, 0,
	0, 120, 0, 0, 121, 210, 211, 212, 0, 213,
	0, 0, 122, 0, 123, 124, 0, 0, 214, 0,
	125, 0, 0, 126, 0, 0, 127, 0, 128, 129,
	130, 131, 132, 0, 133, 134, 137, 135, 0, 136,
	0, 215, 138, 216, 139, 140, 0, 0, 0, 0,
	0, 141, 217, 0, 142, 0, 218, 143, 144, 0,
	219, 145, 220, 0, 146, 147, 148, 221, 149, 150,
	0, 152, 153, 151, 154, 0, 155, 0, 156, 157,
	222, 158, 0, 245, 159, 160, 0, 223, 161, 162,
	0, 163, 164, 0, 165, 224, 166, 0, 167, 168,
	170, 225, 169, 226, 0, 0, 171, 172, 0, 227,
	228, 229, 0, 0, 173, 230, 231, 0, 174, 175,
	176, 177, 0, 0, 178, 179, 180, 0, 0, 181,
	182, 183, 232, 233, 85, 184, 0, 0, 0, 0,
	185, 186, 187, 188, 0, 0, 88, 89, 0, 90,
	0, 0, 0, 0, 0, 0, 0, 0, 91, 92,
	189, 190, 191, 93, 192, 193, 0, 94, 194, 195,
	95, 0, 0, 196, 197, 198, 0, 199, 0, 0,
	0, 96, 97, 98, 0, 99, 0, 100, 0, 0,
	101, 102, 0, 0, 0, 0, 0, 0, 103, 104,
	105, 106, 200, 107, 201, 202, 0, 0, 108, 0,
	0, 0, 109, 110, 0, 111, 0, 0, 0, 203,
	112, 204, 0, 0, 113, 114, 205, 0, 115, 0,
	116, 0, 0, 0, 0, 117, 206, 0, 207, 0,
	118, 119, 307, 209, 0, 0, 120, 0, 0, 121,
	210, 211, 212, 0, 213, 0, 0, 122, 0, 123,
	124, 0, 0, 214, 0, 125, 0, 0, 126, 0,
	0, 127, 0, 128, 129, 130, 131, 132, 0, 133,
	134, 137, 135, 0, 136, 0, 215, 138, 216, 139,
	140, 0, 0, 0, 0, 0, 141, 217, 0, 142,
	0, 218, 143, 144, 0, 219, 145, 220, 0, 146,
	147, 148, 221, 149, 150, 0, 152, 153, 151, 154,
	0, 155, 0, 156, 157, 222, 158, 0, 245, 159,
	160, 0, 223, 161, 162, 0, 163, 164, 0, 165,
	224, 166, 0, 167, 168, 170, 225, 169, 226, 0,
	0, 171, 172, 0, 227, 228, 229, 0, 0, 173,
	230, 231, 0, 174, 175, 176, 177, 0, 0, 178,
	179, 180, 0, 0, 181, 182, 183, 232, 233, 85,
	184, 0, 0, 0, 0, 185, 186, 187, 188, 0,
	0, 88, 89, 0, 90, 0, 0, 0, 0, 0,
	0, 0, 0, 91, 92, 189, 190, 191, 93, 192,
	193, 0, 94, 194, 195, 95, 0, 0, 196, 197,
	198, 0, 199, 0, 0, 0, 96, 97, 98, 0,
	99, 0, 100, 0, 0, 101, 102, 0, 0, 0,
	0, 0, 0, 103, 104, 105, 106, 200, 107, 201,
	202, 0, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 203, 112, 204, 0, 0, 113,
	114, 205, 0, 115, 0, 116, 0, 0, 0, 0,
	117, 206, 0, 207, 0, 118, 119, 208, 209, 0,
	0, 120, 0, 0, 121, 210, 211, 212, 0, 213,
	0, 0, 122, 0, 123, 124, 0, 0, 214, 0,
	125, 0, 0, 126, 0, 0, 127, 0, 128, 129,
	130, 131, 132, 0, 133, 134, 137, 135, 0, 136,
	0, 215, 138, 216, 139, 140, 0, 0, 0, 0,
	0, 141, 217, 0, 142, 0, 218, 143, 144, 0,
	219, 145, 220, 0, 146, 147, 148, 221, 287, 150,
	0, 152, 153, 151, 154, 0, 155, 0, 156, 157,
	222, 158, 0, 245, 159, 160, 0, 223, 161, 162,
	0, 163, 164, 0, 165, 224, 166, 0, 167, 168,
	170, 225, 169, 226, 0, 0, 171, 172, 0, 227,
	228, 229, 0, 0, 173, 230, 231, 0, 174, 175,
	176, 177, 0, 0, 178, 179, 180, 0, 0, 181,
	182, 183, 232, 233, 85, 184, 0, 0, 0, 0,
	185, 186, 187, 188, 0, 0, 88, 89, 0, 90,
	0, 0, 0, 0, 0, 0, 0, 0, 91, 92,
	189, 190, 191, 93, 192, 193, 0, 94, 194, 195,
	95, 0, 0, 196, 197, 198, 0, 199, 0, 0,
	0, 96, 97, 98, 0, 99, 0, 100, 0, 0,
	101, 102, 0, 0, 0, 0, 0, 0, 103, 104,
	105, 106, 200, 107, 201, 202, 0, 0, 108, 0,
	0, 0, 109, 110, 0, 111, 0, 0, 0, 203,
	112, 204, 0, 0, 113, 114, 205, 0, 115, 0,
	116, 0, 0, 0, 0, 117, 206, 0, 207, 0,
	118, 119, 208, 209, 0, 0, 120, 0, 0, 121,
	210, 211, 212, 0, 213, 0, 0, 122, 0, 123,
	124, 0, 0, 214, 0, 125, 0, 0, 235, 0,
	0, 127, 0, 128, 129, 130, 131, 242, 0, 133,
	134, 137, 135, 0, 136, 0, 215, 138, 216, 139,
	140, 0, 0, 0, 0, 0, 141, 217, 0, 142,
	0, 218, 143, 144, 0, 219, 145, 220, 0, 146,
	147, 148, 221, 149, 150, 0, 152, 153, 151, 154,
	0, 155, 0, 156, 157, 222, 158, 0, 245, 159,
	160, 0, 223, 161, 236, 0, 163, 164, 0, 165,
	224, 166, 0, 167, 168, 170, 225, 169, 226, 0,
	0, 171, 172, 0, 241, 228, 229, 0, 0, 237,
	230, 231, 0, 174, 175, 176, 177, 0, 0, 178,
	179, 180, 0, 0, 181, 182, 183, 232, 233, 85,
	184, 0, 0, 0, 0, 185, 186, 187, 188, 0,
	0, 88, 89, 0, 90, 0, 0, 0, 0, 0,
	0, 0, 0, 91, 92, 189, 190, 191, 93, 192,
	193, 0, 94, 194, 195, 95, 0, 0, 196, 197,
	198, 0, 199, 0, 0, 0, 96, 97, 98, 0,
	99, 0, 100, 0, 0, 101, 102, 0, 0, 0,
	0, 0, 0, 103, 104, 105, 106, 200, 107, 201,
	202, 0, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 203, 112, 204, 0, 0, 113,
	114, 205, 0, 115, 0, 116, 0, 0, 0, 0,
	117, 206, 0, 207, 0, 118, 119, 208, 209, 0,
	0, 120, 0, 0, 121, 210, 211, 212, 0, 213,
	0, 0, 122, 0, 123, 124, 0, 0, 214, 0,
	125, 0, 0, 126, 0, 0, 127, 0, 128, 129,
	130, 131, 132, 0, 133, 134, 137, 135, 0, 136,
	0, 215, 138, 216, 139, 140, 0, 0, 0, 0,
	0, 141, 217, 0, 142, 0, 218, 143, 0, 0,
	219, 145, 220, 0, 146, 0, 148, 221, 149, 150,
	0, 152, 153, 151, 154, 0, 155, 0, 156, 157,
	222, 0, 0, 245, 159, 160, 0, 223, 161, 162,
	0, 163, 164, 0, 165, 224, 166, 0, 167, 168,
	170, 225, 169, 226, 0, 0, 171, 172, 0, 227,
	228, 229, 0, 0, 173, 230, 231, 0, 174, 175,
	176, 177, 0, 0, 178, 179, 180, 0, 0, 181,
	182, 183, 232, 233, 718, 184, 737, 738, 739, 0,
	185, 186, 187, 188, 0, 0, 740, 0, 0, 0,
	0, 0, 720, 718, 746, 737, 738, 739, 0, 0,
	0, 0, 0, 0, 0, 740, 0, 0, 0, 0,
	0, 720, 719, 746, 0, 0, 0, 0, 734, 0,
	718, 0, 737, 738, 739, 0, 0, 0, 0, 0,
	0, 719, 740, 0, 0, 0, 0, 734, 720, 0,
	746, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 719, 0,
	0, 725, 0, 0, 734, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 747, 0,
	725, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	745, 0, 0, 0, 0, 0, 0, 747, 0, 0,
	742, 0, 0, 0, 0, 0, 735, 725, 0, 745,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 742,
	0, 0, 0, 0, 747, 735, 0, 0, 741, 0,
	0, 0, 0, 0, 0, 0, 745, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 742, 741, 0, 0,
	0, 0, 735, 0, 0, 0, 0, 0, 0, 0,
	0, 736, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 744, 0, 741, 0, 0, 0, 0, 0,
	736, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 744, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 736, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 744, 0,
	0, 0, 0, 743, 0, 731, 732, 733, 0, 730,
	727, 728, 729, 721, 722, 723, 724, 726, 0, 0,
	0, 0, 743, 1641, 731, 732, 733, 0, 730, 727,
	728, 729, 721, 722, 723, 724, 726, 0, 0, 0,
	0, 0, 1624, 0, 0, 0, 0, 0, 0, 743,
	0, 731, 732, 733, 0, 730, 727, 728, 729, 721,
	722, 723, 724, 726, 718, 0, 737, 738, 739, 1603,
	0, 0, 0, 0, 0, 0, 740, 0, 0, 0,
	0, 0, 720, 718, 746, 737, 738, 739, 0, 0,
	0, 0, 0, 0, 0, 740, 0, 0, 0, 0,
	0, 720, 719, 746, 0, 0, 0, 0, 734, 0,
	718, 0, 737, 738, 739, 0, 0, 0, 0, 0,
	0, 719, 740, 0, 0, 0, 0, 734, 720, 0,
	746, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 719, 0,
	0, 725, 0, 0, 734, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 747, 0,
	725, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	745, 0, 0, 0, 0, 0, 0, 747, 0, 0,
	742, 0, 0, 0, 0, 0, 735, 725, 0, 745,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 742,
	0, 0, 0, 0, 747, 735, 0, 0, 741, 0,
	0, 0, 0, 0, 0, 0, 745, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 742, 741, 0, 0,
	0, 0, 735, 0, 0, 0, 0, 0, 0, 0,
	0, 736, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 744, 0, 741, 0, 0, 0, 0, 0,
	736, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 744, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 736, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 744, 0,
	0, 0, 0, 743, 0, 731, 732, 733, 0, 730,
	727, 728, 729, 721, 722, 723, 724, 726, 0, 0,
	0, 0, 743, 1598, 731, 732, 733, 0, 730, 727,
	728, 729, 721, 722, 723, 724, 726, 0, 0, 0,
	0, 0, 1594, 0, 0, 0, 0, 0, 0, 743,
	0, 731, 732, 733, 0, 730, 727, 728, 729, 721,
	722, 723, 724, 726, 718, 0, 737, 738, 739, 1533,
	0, 0, 0, 0, 0, 0, 740, 0, 0, 0,
	0, 0, 720, 718, 746, 737, 738, 739, 0, 0,
	0, 0, 0, 0, 0, 740, 0, 0, 0, 0,
	0, 720, 719, 746, 0, 0, 0, 0, 734, 0,
	718, 0, 737, 738, 739, 0, 0, 0, 0, 0,
	0, 719, 740, 0, 0, 0, 0, 734, 720, 0,
	746, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 719, 0,
	0, 725, 0, 0, 734, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 747, 0,
	725, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	745, 0, 0, 0, 0, 0, 0, 747, 0, 0,
	742, 0, 0, 0, 0, 0, 735, 725, 0, 745,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 742,
	0, 0, 0, 0, 747, 735, 0, 0, 741, 0,
	0, 0, 0, 0, 0, 0, 745, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 742, 741, 0, 0,
	0, 0, 735, 0, 0, 0, 0, 0, 0, 0,
	0, 736, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 744, 0, 741, 0, 0, 0, 0, 0,
	736, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 744, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 736, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 744, 0,
	0, 0, 0, 743, 0, 731, 732, 733, 0, 730,
	727, 728, 729, 721, 722, 723, 724, 726, 0, 0,
	0, 0, 743, 1532, 731, 732, 733, 0, 730, 727,
	728, 729, 721, 722, 723, 724, 726, 0, 0, 0,
	0, 0, 1443, 0, 0, 0, 0, 0, 0, 743,
	0, 731, 732, 733, 0, 730, 727, 728, 729, 721,
	722, 723, 724, 726, 718, 0, 737, 738, 739, 1380,
	0, 0, 0, 0, 0, 0, 740, 0, 0, 0,
	0, 0, 720, 718, 746, 737, 738, 739, 0, 0,
	0, 0, 0, 0, 0, 740, 0, 0, 0, 0,
	0, 720, 719, 746, 0, 0, 0, 0, 734, 0,
	718, 0, 737, 738, 739, 0, 0, 0, 0, 0,
	0, 719, 740, 0, 0, 0, 0, 734, 720, 0,
	746, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 719, 0,
	0, 725, 0, 0, 734, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 747, 0,
	725, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	745, 0, 0, 0, 0, 0, 0, 747, 0, 0,
	742, 0, 0, 0, 0, 0, 735, 725, 0, 745,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 742,
	0, 0, 0, 0, 747, 735, 0, 0, 741, 0,
	0, 0, 0, 0, 0, 0, 745, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 742, 741, 0, 0,
	0, 0, 735, 0, 0, 0, 0, 0, 0, 0,
	0, 736, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 744, 0, 741, 0, 0, 0, 0, 0,
	736, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 744, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 736, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 744, 0,
	0, 0, 0, 743, 0, 731, 732, 733, 0, 730,
	727, 728, 729, 721, 722, 723, 724, 726, 0, 0,
	0, 0, 743, 1355, 731, 732, 733, 0, 730, 727,
	728, 729, 721, 722, 723, 724, 726, 0, 0, 0,
	0, 0, 998, 0, 0, 0, 0, 0, 0, 743,
	0, 731, 732, 733, 0, 730, 727, 728, 729, 721,
	722, 723, 724, 726, 0, 0, 718, 1427, 737, 738,
	739, 0, 0, 0, 0, 0, 0, 0, 740, 0,
	0, 0, 0, 0, 720, 718, 746, 737, 738, 739,
	0, 0, 0, 0, 0, 0, 0, 740, 0, 0,
	0, 0, 0, 720, 719, 746, 0, 0, 0, 0,
	734, 0, 718, 0, 737, 738, 739, 0, 0, 0,
	0, 0, 0, 719, 740, 0, 0, 0, 902, 734,
	720, 0, 746, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	719, 0, 0, 725, 1702, 0, 734, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	747, 0, 725, 0, 1255, 0, 0, 1254, 0, 0,
	0, 903, 745, 0, 0, 0, 0, 0, 0, 747,
	0, 0, 742, 0, 0, 0, 0, 0, 735, 725,
	0, 745, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 742, 0, 0, 0, 0, 747, 735, 0, 0,
	741, 0, 0, 0, 0, 0, 0, 0, 745, 0,
	0, 0, 1701, 0, 0, 0, 0, 0, 742, 741,
	0, 0, 0, 0, 735, 0, 0, 0, 0, 0,
	0, 0, 0, 736, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 744, 0, 741, 0, 0, 0,
	0, 0, 736, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 744, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 736,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	744, 0, 0, 0, 0, 743, 0, 731, 732, 733,
	0, 730, 727, 728, 729, 721, 722, 723, 724, 726,
	0, 0, 0, 0, 743, 0, 731, 732, 733, 0,
	730, 727, 728, 729, 721, 722, 723, 724, 726, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 743, 0, 731, 732, 733, 0, 730, 727, 728,
	729, 721, 722, 723, 724, 726, 749, 0, 0, 0,
	0, 0, 718, 0, 737, 738, 739, 0, 0, 0,
	0, 0, 0, 0, 740, 0, 0, 748, 0, 0,
	720, 718, 746, 737, 738, 739, 0, 0, 0, 0,
	0, 0, 0, 740, 0, 0, 0, 0, 0, 720,
	719, 746, 0, 0, 0, 0, 734, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 718, 719,
	737, 738, 739, 0, 0, 734, 0, 0, 0, 0,
	740, 0, 0, 0, 0, 0, 720, 0, 746, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 725,
	0, 0, 0, 0, 0, 0, 719, 0, 0, 0,
	0, 0, 734, 0, 0, 0, 747, 0, 725, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 745, 0,
	0, 0, 0, 0, 0, 747, 0, 0, 742, 0,
	0, 0, 0, 0, 735, 0, 0, 745, 0, 0,
	0, 0, 0, 0, 0, 725, 0, 742, 0, 0,
	0, 0, 0, 735, 0, 0, 741, 0, 0, 0,
	0, 0, 747, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 745, 741, 282, 0, 0, 0,
	0, 0, 0, 0, 742, 0, 0, 0, 0, 736,
	735, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	744, 0, 0, 0, 0, 0, 0, 0, 736, 0,
	0, 0, 741, 0, 0, 0, 0, 0, 0, 744,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 736, 0, 0, 0, 0,
	0, 743, 0, 731, 732, 733, 744, 730, 727, 728,
	729, 721, 722, 723, 724, 726, 0, 0, 0, 0,
	743, 1374, 731, 732, 733, 0, 730, 727, 728, 729,
	721, 722, 723, 724, 726, 718, 0, 737, 738, 739,
	0, 0, 0, 0, 0, 0, 0, 740, 0, 0,
	0, 0, 0, 720, 0, 746, 0, 743, 0, 731,
	732, 733, 0, 730, 727, 728, 729, 721, 722, 723,
	724, 726, 718, 719, 737, 738, 739, 0, 0, 734,
	0, 0, 0, 0, 740, 0, 0, 1256, 0, 0,
	720, 718, 746, 737, 738, 739, 0, 0, 0, 0,
	0, 0, 0, 740, 0, 0, 0, 0, 0, 720,
	719, 746, 0, 0, 0, 0, 734, 0, 0, 0,
	0, 0, 725, 0, 0, 0, 0, 1261, 718, 719,
	737, 738, 739, 0, 0, 734, 0, 0, 0, 747,
	740, 0, 0, 1217, 0, 0, 720, 0, 746, 0,
	0, 745, 0, 0, 0, 0, 0, 0, 0, 725,
	0, 742, 0, 0, 0, 0, 719, 735, 0, 0,
	0, 0, 734, 0, 0, 0, 747, 0, 725, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 745, 741,
	0, 0, 0, 0, 0, 747, 0, 0, 742, 0,
	0, 0, 0, 0, 735, 0, 0, 745, 0, 0,
	0, 0, 0, 0, 0, 725, 0, 742, 0, 0,
	0, 0, 736, 735, 0, 0, 741, 0, 0, 0,
	0, 0, 747, 744, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 745, 741, 0, 0, 0, 0,
	0, 0, 0, 0, 742, 1222, 0, 0, 0, 736,
	735, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	744, 0, 0, 0, 0, 0, 0, 0, 736, 0,
	0, 0, 741, 0, 743, 0, 731, 732, 733, 744,
	730, 727, 728, 729, 721, 722, 723, 724, 726, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 736, 0, 0, 0, 0,
	0, 743, 0, 731, 732, 733, 744, 730, 727, 728,
	729, 721, 722, 723, 724, 726, 0, 0, 0, 0,
	743, 0, 731, 732, 733, 0, 730, 727, 728, 729,
	721, 722, 723, 724, 726, 718, 0, 737, 738, 739,
	0, 0, 0, 0, 0, 0, 0, 740, 0, 0,
	0, 0, 0, 720, 0, 746, 0, 743, 0, 731,
	732, 733, 0, 730, 727, 728, 729, 721, 722, 723,
	724, 726, 718, 719, 737, 738, 739, 0, 0, 734,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	720, 0, 746, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	719, 0, 0, 0, 0, 0, 734, 0, 0, 0,
	0, 0, 725, 0, 0, 0, 0, 0, 1224, 0,
	1241, 1242, 1243, 0, 0, 0, 0, 0, 0, 747,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 745, 0, 0, 0, 0, 0, 0, 0, 725,
	0, 742, 0, 0, 0, 0, 0, 735, 21, 0,
	0, 0, 1238, 0, 718, 0, 747, 0, 35, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 745, 741,
	0, 0, 720, 0, 746, 0, 0, 0, 742, 0,
	0, 37, 0, 0, 735, 0, 0, 42, 0, 0,
	0, 0, 719, 0, 0, 1229, 0, 0, 734, 0,
	0, 0, 736, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 26, 744, 0, 38, 0, 0, 0, 27,
	0, 0, 0, 0, 1244, 0, 0, 0, 0, 0,
	0, 0, 0, 28, 0, 0, 0, 0, 0, 736,
	1239, 725, 0, 0, 0, 0, 0, 0, 0, 0,
	744, 0, 0, 0, 0, 0, 0, 0, 747, 0,
	0, 0, 0, 0, 743, 0, 731, 732, 733, 0,
	730, 727, 728, 729, 721, 722, 723, 724, 726, 0,
	742, 0, 0, 0, 0, 0, 735, 0, 0, 0,
	0, 0, 0, 0, 0, 1240, 0, 0, 0, 0,
	0, 743, 0, 731, 732, 733, 0, 730, 727, 728,
	729, 721, 722, 723, 724, 726, 0, 40, 0, 0,
	29, 0, 39, 0, 0, 0, 0, 30, 0, 0,
	49, 0, 0, 0, 0, 33, 34, 0, 0, 0,
	0, 736, 0, 36, 0, 0, 0, 0, 0, 51,
	0, 0, 744, 0, 0, 0, 0, 0, 0, 1235,
	1236, 1237, 41, 1234, 1231, 1232, 1233, 1225, 1226, 1227,
	1228, 1230, 0, 0, 0, 0, 52, 0, 931, 947,
	922, 939, 938, 47, 0, 924, 923, 0, 0, 48,
	949, 948, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 743, 0, 0, 0, 46, 0, 730,
	727, 728, 729, 721, 722, 723, 724, 726, 0, 944,
	0, 936, 935, 0, 0, 0, 0, 0, 0, 934,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 933, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 927, 928, 929,
	0, 588, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 937, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 932,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 926,
	0, 0, 0, 0, 0, 0, 0, 930, 0, 0,
	0, 0, 0, 951, 0, 0, 0, 0, 0, 925,
	0, 0, 945, 946, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 950,
}
var sqlPact = [...]int{

	20529, -1000, -6, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 742, -1000, -1000, -1000, 510, 683, 54, 1194, 1194,
	15065, -1000, -1000, 17760, 2399, 349, 356, 349, 349, 345,
	15065, 458, 525, 59, -1000, 770, -13, 17515, 13840, 1180,
	-12, 13350, 226, 20529, 13595, 13840, 17270, 1019, 922, 916,
	13350, 17025, 16780, 16535, -1000, 9083, -1000, -1000, -1000, -1000,
	752, -1000, -14, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 748, -1000, 13840, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 16290, 16045, 707, -1000, -1000,
	434, 282, 1200, -1000, 2, -1000, -1000, -1000, 1013, -1000,
	743, 1010, 1009, 999, 997, 281, 725, -1000, 457, 707,
	-1000, 707, -1000, -1000, -1000, 445, 15065, -1000, 13350, -1000,
	15800, 939, 15555, -1000, 770, -1000, -1000, -1000, 765, 1178,
	1178, 1178, 1191, 87, 86, 59, -26, 13840, -1000, 227,
	-26, 6244, 6244, -1000, -1000, 226, -1000, 232, 11625, -4,
	-1000, 6758, -1000, 685, 1075, 594, 584, 1074, -73, 13350,
	13840, 13840, 493, 15310, -1000, 1073, 88, 1070, -1000, -33,
	1069, -1000, -43, -1000, -1000, -1000, -1000, -1000, -1000, 226,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 11880, 1314, 11880, -1000, -1000, 1216, -1000,
	-1000, -15, -19, 886, 943, 9595, 9340, 1133, 1301, -1000,
	-1000, -1000, 1, 3915, 13840, 1033, 11880, 13840, 13840, 13840,
	-1000, 13840, -1000, 884, -1000, 13840, -1000, -20, -21, -1000,
	15065, -1000, 89, -1000, 224, 826, 14820, 1083, 825, -1000,
	765, -1000, 719, 872, 7290, 8061, 59, -1000, -1000, 59,
	59, 8061, -1000, -1000, 13840, -26, 1211, 13840, 104, -1000,
	19802, -1000, -1000, 8061, 8061, 8061, 8061, 8061, 656, -1000,
	-1000, -1000, 4684, -1000, -1000, -4, 222, 186, -1000, -1000,
	214, -4, -1000, -1000, -1000, -1000, 213, 1291, 371, -1000,
	-1000, -1000, 8061, 287, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1032, 212, 206, -1000, -1000, -1000, -1000,
	205, 202, 201, 198, 196, 195, 194, 192, 190, 187,
	185, 180, 169, 640, -1000, 300, -1000, -1000, 300, 300,
	-1000, 151, 151, 152, -1000, -1000, -1000, 151, -1000, -1000,
	-1000, 270, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 163,
	104, -1000, -1000, -1000, 13840, -4, -1000, -1000, -1000, 8061,
	3659, -49, -1000, 20405, -1000, -39, 618, -1000, 12860, 1168,
	1166, 1143, 13350, 443, 442, 13840, 13840, 292, 70, 1210,
	70, 11115, -1000, 13840, 13840, -1000, 13840, -1000, -1000, 13840,
	13840, 13840, -13, 12370, 439, -34, 12125, 13840, -1000, -11,
	-1000, -1000, 996, 344, 631, 913, 612, -1000, -1000, -1000,
	-1000, -30, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1276, -1000, -1000, -1000, -1000, 1282, -30, -1000,
	-1000, -1000, -1000, -1000, 1290, -1000, -1000, -1000, -1000, 3915,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 13840, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 631, 913, -1000, -1000, 13350, 12615,
	1063, 737, 803, -1000, -1000, 266, 1061, -1000, -1000, -1000,
	-1000, 20405, -1000, 20405, 571, 929, -1000, 929, -31, -1000,
	19532, -1000, 162, -53, -1000, 292, 6244, 10860, 20747, 13840,
	449, 8061, 8061, 8061, 8061, 8061, 8061, 8061, 8061, 8061,
	8061, 8061, 8061, 8061, 8061, 8061, 8061, 8061, 8061, 8061,
	8061, 8061, 8061, 746, 423, 998, 668, 149, 3915, -1000,
	1240, 1240, 1240, 20442, 20442, 179, -22, 19193, -32, -4,
	-1000, -1000, 5969, 5712, -4, 4170, -1000, 846, 1281, 298,
	20405, 1040, 974, 161, 85, 84, 8061, 717, 8061, 8318,
	8061, 8061, 4941, 8061, 8061, 8061, 8061, 8061, 8061, -1000,
	160, -1000, -1000, -1000, -1000, 1279, -1000, -1000, 1278, -1000,
	387, 1274, 292, 83, -1000, 2339, -1000, -1000, 6758, -1000,
	679, 13840, 13840, 13840, -1000, -1000, 800, 14575, -1000, 20747,
	13840, -1000, 159, 155, 899, 893, 13840, 13840, 14330, 14085,
	13840, 664, 13840, 13840, 523, -1000, 515, 8061, 635, -1000,
	10350, 305, 13840, 558, 102, -1000, -1000, -1000, 265, 13840,
	-1000, -1000, -1000, 88, -1000, -33, -1000, -1000, 13840, 12125,
	-34, -36, -1000, -1000, 13840, 913, -1000, -1000, -1000, 518,
	-1000, 620, -1000, 9850, -1000, -1000, -1000, 846, -1000, -40,
	-1000, -1000, -1000, -1000, 81, -37, -1000, -1000, -1000, -1000,
	13840, 223, 13840, 13840, 1055, 1288, 13840, -1000, -1000, -1000,
	8061, -1000, -1000, -1000, -13, 13840, -1000, 973, -1000, -38,
	890, -93, 13105, -1000, 10095, -1000, 1218, -1000, -1000, -1000,
	-1000, 64, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 152, 640, 151, 151, 151, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 270, -1000, 300, 300, 300,
	-1000, -1000, -1000, 280, 531, 531, 1223, 1223, 1223, 1223,
	1823, 1823, 225, 2902, 20544, 20544, 20544, 2571, 384, 384,
	20544, 20544, 20544, 20442, 183, 1888, 8061, 393, 657, 149,
	8061, -1000, 475, -1000, -1000, -1000, 992, 147, 8318, 8318,
	-1000, -1000, -1000, 4684, -1000, -1000, 146, 8061, -1000, 8061,
	-55, -57, -1000, 20405, -1000, -61, -1000, -1000, -23, 8061,
	8061, 8061, 76, -1000, 392, -1000, 390, 388, 385, -1000,
	143, 75, 464, -1000, 8061, 672, 141, 133, 8061, -1000,
	-1000, 20178, 67, 991, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 66, 20141, 62, 1623, -1000, 8318, 8318, 8318, 4684,
	130, 61, 19505, -118, 20122, 7015, 7015, 7015, 56, 20085,
	8061, -118, 2952, 2750, 2670, -65, -67, -79, 1267, -80,
	48, 203, 44, 973, -1000, -1000, 8061, -1000, -1000, -1000,
	383, 377, 1053, -1000, 797, -1000, 578, 8061, 13840, 129,
	127, 677, -1000, 1052, 718, 1051, 718, -1000, -39, 519,
	-1000, -1000, 376, -1000, 6244, 20405, -1000, 526, 1162, -81,
	-1000, -1000, -1000, 6244, 292, 11115, 6758, -88, -1000, -40,
	-1000, -40, -1000, -1000, -1000, -1000, -1000, -1000, 13840, -1000,
	12615, 126, 13840, 125, 123, 13840, -1000, 1083, -1000, 41,
	-1000, -1000, -1000, -1000, -1000, 950, 1190, 10860, 909, 908,
	10860, 877, 678, 678, 678, -1000, 13105, 3390, -1000, -1000,
	13840, 119, 10605, 39, 890, 243, 241, -1000, 1262, 8061,
	1888, 8061, 8318, 8318, -1000, 1888, -1000, -1000, -1000, -1000,
	990, 115, 8061, 20747, 3060, 2222, -90, 5455, -44, 19174,
	8061, -1000, -1000, 186, -1000, 36, 6501, -1000, 19821, -16,
	-16, -1000, 810, 802, 569, 501, 1255, 1286, 1080, -1000,
	8061, 19858, -1000, 11370, 293, 699, 18910, 20747, -1000, 8061,
	-1000, 989, 8061, -1000, 20747, 8318, 8318, 8318, 8318, 8318,
	8318, 8318, 8318, 8318, 8318, 8318, 8318, 8318, 8318, 8318,
	8318, 8318, 8318, 8318, 896, 8318, 1235, 1235, 1235, -54,
	5198, -1000, 1028, 989, 8061, 8061, 20747, 33, 32, 28,
	-1000, 8061, -118, 8061, 8061, 8061, -1000, -1000, -1000, 26,
	-1000, 1252, -1000, -1000, -1000, 950, 19220, 13840, 13840, 13840,
	1050, 1054, -1000, 18883, -95, 13840, 13840, -1000, 923, 951,
	326, 13840, -1000, 13840, -1000, 13840, 13840, 13840, 13840, -58,
	6244, 142, -13, 13840, -58, 515, -1000, -1000, 264, -1000,
	-1000, 8828, 114, 12615, 8828, 734, -1000, -1000, 290, 8061,
	8061, 890, 10860, 10860, 760, 898, 10860, -1000, -1000, -1000,
	-1000, -1000, -1000, 897, 111, 13840, 13105, 381, 1247, 24,
	1219, 1888, 2111, 698, 8061, 20747, 3093, -96, -1000, 8061,
	8061, -1000, -97, -1000, 8061, -1000, 20405, -1000, 1285, 8061,
	21, 20, 19, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	17, -1000, -1000, 20405, 8061, -1000, -1000, 18005, 8061, 15,
	-1000, 12, 20405, 1028, 20405, -1000, 583, 583, 1235, 1235,
	1235, 1235, 329, 329, 801, 1916, 421, 421, 421, 795,
	762, 762, 421, 421, 421, 987, 835, 109, 20498, 8061,
	-101, -1000, -1000, -1000, 20405, 20405, 9, -1000, -1000, -1000,
	-118, 2385, 18864, 18600, -1000, 8, 290, -1000, -1000, -1000,
	-1000, 13840, -1000, 13840, -1000, 13840, 773, -1000, -1000, 883,
	103, 8318, 13840, -1000, 662, -102, -103, 766, -1000, 763,
	8061, -1000, 20747, 718, 718, -1000, 365, 364, -1000, -58,
	1096, 13840, 1139, -1000, -1000, -1000, 100, -109, -1000, 184,
	1171, 8061, -1000, -1000, 99, 8828, 7, -110, 13840, -1000,
	13840, 20405, -118, -1000, 760, -1000, 97, 8061, 10860, -1000,
	-155, -1000, 262, -1000, 13840, -111, -1000, -1000, 236, 235,
	-1000, 8061, 8061, 3093, -122, -1000, 20747, 1888, 1888, -1000,
	18573, -1000, 19821, -1000, -1000, -1000, -1000, 20405, 647, -1000,
	18554, -1000, -1000, -1000, 8318, 983, 95, 20747, 18290, -1000,
	-1000, 8061, -1000, -1000, -1000, -1000, -1000, 1283, -1000, -1000,
	-1000, 8061, 20498, 55, -1000, 94, -1000, -1000, -1000, 609,
	-1000, -1000, 20405, 1177, -1000, -1000, 13840, 13840, 435, -126,
	13840, -1000, -1000, 4427, 662, 8828, 1167, -4, 13840, 1167,
	18263, 4170, -128, -1000, 662, 90, -66, -1000, 1209, -1000,
	13840, 20405, -1000, 897, -1000, 3915, -132, -1000, -1000, -1000,
	1888, 1888, -1000, -1000, -1000, 6, 699, 1189, -1000, 2520,
	8318, 20747, -134, -1000, 18244, -1000, 3041, 858, 13840, 13840,
	13840, 314, 13840, -1000, -1000, 479, -1000, 292, -1000, -1000,
	-1000, -1000, -1000, -1000, 1171, -23, 662, -1000, 8828, 13840,
	71, -138, -1000, -1000, -1000, -1000, 575, 8061, 2520, -139,
	-1000, -1000, -1000, 713, 842, -143, -144, 55, -1000, 8061,
	-1000, 11115, -1000, 1167, 5, -1000, -148, -1000, -1000, -1000,
	4, 7804, 7804, -118, -1000, -1000, 729, 722, 509, -1000,
	-1000, -1000, -1000, -1000, 858, 20405, -119, -1000, -1000, 662,
	-1000, -1000, -1000, 8573, 735, 511, 19486, -1000, -1000, 1107,
	-1000, 318, 568, 568, 713, -1000, -1000, 1221, -1000, -1000,
	-1000, -1000, -1000, -1000, 1228, -1000, -1000, 920, -1000, -1000,
	7547, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1531, 1530, 1221, 1529, 1528, 1526, 1525, 1524, 84,
	1523, 1520, 104, 1519, 82, 1518, 1517, 1511, 1510, 53,
	1505, 1501, 1500, 1497, 1483, 70, 36, 123, 1913, 114,
	1482, 1474, 1473, 10, 86, 80, 1471, 52, 49, 75,
	93, 1429, 57, 1469, 118, 19, 16, 868, 76, 122,
	109, 97, 1466, 1465, 1462, 40, 1459, 1457, 1455, 11,
	41, 14, 1454, 20, 17, 1450, 1449, 89, 1447, 77,
	95, 39, 96, 85, 1445, 60, 9, 55, 1440, 34,
	1435, 32, 59, 115, 1432, 51, 240, 48, 31, 54,
	1430, 1427, 1423, 1422, 62, 66, 43, 1421, 1420, 56,
	1417, 113, 116, 1416, 1414, 105, 1412, 1409, 1404, 633,
	1402, 1401, 534, 3, 35, 50, 28, 94, 90, 27,
	1399, 22, 1398, 0, 813, 765, 1396, 46, 29, 65,
	38, 44, 21, 1393, 88, 1390, 1389, 1388, 1386, 1385,
	64, 1383, 58, 119, 33, 47, 72, 30, 25, 71,
	100, 126, 91, 1382, 101, 1378, 45, 1376, 1374, 847,
	68, 1371, 1369, 1368, 622, 561, 223, 69, 1366, 1365,
	219, 162, 1364, 1363, 67, 1362, 1358, 120, 1344, 117,
	24, 1343, 99, 1342, 73, 1340, 295, 42, 26, 1339,
	107, 61, 1338, 1337, 1332, 23, 2, 8, 4, 6,
	5, 18, 13, 1327, 1324, 111, 78, 1323, 125, 1322,
	1321, 37, 1319, 1318, 15, 1317, 12, 1316, 7, 1,
	1312, 121, 1311, 74, 1310, 1231, 1307, 124, 1299, 1297,
	1240, 63,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 4, 4, 35, 35, 34, 34, 34, 34,
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
	34, 32, 32, 37, 37, 37, 36, 36, 31, 31,
	5, 5, 5, 9, 10, 10, 10, 10, 10, 10,
	72, 72, 71, 71, 74, 74, 11, 11, 12, 12,
	12, 12, 155, 155, 154, 13, 18, 221, 221, 221,
	225, 225, 226, 226, 227, 227, 227, 227, 227, 227,
	227, 223, 223, 21, 21, 21, 21, 109, 109, 111,
	111, 111, 111, 40, 108, 108, 108, 108, 110, 110,
	110, 110, 179, 177, 177, 184, 184, 184, 52, 52,
	52, 52, 52, 53, 53, 53, 176, 176, 176, 176,
	185, 185, 185, 185, 185, 185, 54, 54, 54, 183,
	183, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 178, 178, 222, 222, 224,
	224, 8, 8, 55, 55, 56, 56, 115, 115, 115,
	114, 193, 193, 194, 194, 194, 195, 195, 195, 195,
	195, 195, 195, 192, 192, 190, 190, 191, 191, 191,
	191, 228, 228, 113, 113, 59, 59, 198, 198, 198,
	198, 196, 196, 196, 196, 196, 199, 197, 200, 200,
	200, 200, 200, 143, 143, 143, 24, 7, 7, 98,
	98, 63, 63, 147, 147, 147, 46, 46, 33, 33,
	33, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	99, 99, 100, 100, 16, 20, 23, 23, 23, 23,
	23, 230, 230, 43, 43, 43, 43, 44, 44, 112,
	112, 112, 112, 112, 39, 6, 6, 38, 38, 14,
	14, 14, 14, 14, 49, 49, 105, 105, 105, 107,
	107, 106, 106, 106, 85, 85, 25, 76, 76, 77,
	77, 153, 78, 78, 19, 19, 28, 28, 26, 26,
	26, 26, 26, 26, 27, 27, 29, 29, 29, 29,
	29, 29, 29, 206, 206, 206, 208, 208, 205, 15,
	15, 15, 15, 207, 207, 229, 229, 86, 86, 86,
	58, 57, 57, 61, 61, 60, 62, 62, 146, 83,
	83, 83, 83, 101, 102, 102, 103, 103, 104, 104,
	82, 82, 130, 130, 30, 30, 67, 67, 68, 68,
	121, 121, 122, 122, 120, 120, 120, 148, 148, 148,
	148, 149, 149, 149, 149, 149, 149, 144, 144, 144,
	144, 145, 145, 89, 89, 89, 89, 87, 87, 88,
	88, 150, 150, 150, 150, 84, 84, 151, 151, 151,
	116, 116, 156, 156, 156, 66, 66, 66, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 158,
	158, 158, 158, 160, 160, 160, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 161,
	161, 168, 168, 169, 169, 170, 171, 162, 162, 163,
	163, 164, 165, 172, 172, 172, 172, 174, 174, 166,
	166, 166, 166, 167, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 96, 96,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 201, 201, 201, 201, 201, 201, 201,
	203, 203, 204, 204, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 209,
	209, 210, 210, 211, 211, 212, 212, 214, 215, 215,
	215, 216, 220, 220, 213, 213, 217, 217, 217, 218,
	218, 219, 219, 219, 219, 219, 134, 134, 134, 135,
	135, 136, 73, 73, 132, 132, 131, 131, 131, 133,
	133, 90, 173, 173, 173, 173, 173, 173, 173, 91,
	91, 97, 92, 92, 93, 93, 93, 93, 93, 93,
	127, 128, 94, 94, 94, 129, 129, 137, 141, 141,
	140, 139, 139, 138, 138, 119, 119, 119, 119, 118,
	117, 79, 79, 231, 231, 142, 142, 80, 80, 81,
	75, 75, 152, 152, 152, 152, 69, 69, 51, 51,
	70, 70, 47, 47, 50, 48, 48, 48, 48, 64,
	64, 65, 65, 45, 45, 126, 126, 126, 126, 126,
	126, 126, 126, 126, 126, 126, 175, 175, 175, 41,
	41, 41, 42, 42, 181, 181, 181, 182, 182, 182,
	182, 180, 180, 180, 180, 180, 186, 186, 186, 186,
	186, 186, 186, 186, 186, 186, 186, 186, 186, 186,
	186, 186, 186, 186, 186, 186, 186, 186, 186, 186,
	186, 186, 186, 186, 186, 186, 186, 186, 186, 186,
	186, 186, 186, 186, 186, 186, 186, 186, 186, 186,
	186, 186, 186, 186, 186, 186, 186, 186, 186, 186,
	186, 186, 186, 186, 186, 186, 186, 186, 186, 186,
	186, 186, 186, 186, 186, 186, 186, 186, 186, 186,
	186, 186, 186, 186, 186, 186, 186, 186, 186, 186,
	186, 186, 186, 186, 186, 186, 186, 186, 186, 186,
	186, 186, 186, 186, 186, 186, 186, 186, 188, 188,
	188, 188, 188, 188, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 188, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 188, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 188, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 187, 187, 187, 187, 187, 187, 187,
	187, 187, 187, 187, 187, 187, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 4, 6, 1, 3, 2, 5, 3, 6,
	4, 6, 6, 6, 4, 8, 2, 3, 3, 6,
	4, 3, 2, 1, 1, 0, 2, 0, 2, 0,
	1, 1, 1, 6, 3, 5, 4, 6, 3, 5,
	1, 3, 1, 2, 2, 3, 2, 5, 1, 1,
	1, 1, 1, 3, 1, 6, 6, 1, 2, 2,
	1, 1, 1, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 2, 3, 6, 3, 2, 1, 1,
	1, 3, 3, 2, 3, 3, 3, 3, 1, 3,
	3, 2, 1, 1, 3, 1, 1, 1, 2, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 1, 1, 1, 1, 0, 1,
	1, 2, 2, 4, 2, 4, 4, 4, 4, 3,
	3, 4, 3, 2, 4, 2, 0, 2, 0, 2,
	0, 6, 9, 1, 0, 1, 3, 1, 1, 1,
	3, 2, 0, 3, 1, 2, 2, 1, 1, 2,
	4, 2, 5, 6, 7, 3, 1, 4, 5, 5,
	10, 1, 1, 4, 0, 3, 0, 2, 2, 2,
	0, 1, 1, 2, 2, 0, 3, 3, 2, 1,
	1, 2, 2, 1, 2, 1, 4, 10, 13, 1,
	0, 1, 3, 3, 3, 5, 2, 0, 1, 1,
	0, 6, 6, 8, 6, 8, 8, 10, 8, 10,
	1, 0, 2, 0, 2, 2, 3, 3, 2, 2,
	2, 1, 0, 1, 3, 2, 0, 2, 1, 1,
	1, 3, 3, 0, 3, 4, 7, 3, 0, 6,
	6, 8, 5, 7, 1, 3, 1, 4, 2, 8,
	5, 4, 3, 0, 2, 0, 8, 1, 3, 1,
	1, 3, 5, 5, 1, 1, 3, 3, 1, 2,
	3, 2, 3, 4, 1, 1, 8, 8, 1, 2,
	4, 4, 4, 2, 2, 3, 1, 3, 6, 1,
	1, 1, 1, 1, 0, 1, 0, 1, 1, 0,
	1, 1, 0, 1, 0, 3, 1, 3, 2, 2,
	2, 1, 1, 2, 2, 3, 1, 1, 1, 1,
	3, 0, 2, 0, 2, 3, 2, 0, 1, 3,
	3, 1, 1, 3, 2, 4, 0, 3, 2, 1,
	4, 3, 4, 5, 4, 5, 4, 5, 2, 4,
	1, 1, 0, 2, 2, 2, 1, 1, 0, 4,
	2, 1, 2, 2, 4, 1, 3, 1, 2, 3,
	2, 0, 2, 5, 2, 3, 4, 0, 1, 1,
	1, 1, 2, 4, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 5, 0, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 2, 2, 1, 1, 3,
	0, 1, 1, 1, 1, 5, 2, 1, 1, 1,
	1, 4, 1, 2, 2, 1, 1, 1, 0, 1,
	1, 1, 4, 1, 1, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 0, 1, 4,
	1, 3, 3, 5, 2, 2, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 2, 2,
	3, 4, 4, 5, 3, 4, 3, 3, 4, 3,
	4, 3, 4, 5, 6, 6, 7, 6, 7, 6,
	7, 3, 4, 1, 3, 2, 2, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 5, 6, 6,
	7, 1, 1, 1, 3, 1, 1, 1, 2, 2,
	2, 1, 1, 3, 5, 6, 8, 6, 6, 4,
	4, 1, 1, 1, 5, 1, 3, 1, 3, 1,
	1, 1, 1, 6, 4, 4, 4, 4, 6, 5,
	5, 5, 4, 8, 6, 6, 4, 4, 4, 5,
	0, 5, 0, 2, 0, 1, 3, 3, 2, 2,
	0, 6, 1, 0, 3, 0, 2, 2, 0, 1,
	4, 2, 2, 2, 2, 2, 4, 3, 5, 4,
	3, 5, 1, 3, 1, 3, 3, 3, 2, 1,
	3, 3, 1, 1, 1, 1, 1, 1, 1, 4,
	3, 2, 3, 0, 3, 3, 2, 2, 1, 0,
	2, 2, 3, 2, 1, 1, 3, 5, 1, 2,
	4, 2, 0, 1, 0, 1, 1, 3, 5, 2,
	2, 1, 2, 1, 0, 1, 1, 1, 3, 3,
	1, 3, 3, 2, 1, 1, 1, 3, 1, 3,
	1, 3, 1, 2, 3, 1, 2, 2, 1, 1,
	3, 3, 0, 1, 2, 1, 1, 1, 1, 6,
	2, 3, 5, 1, 1, 1, 1, 2, 2, 1,
	1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -9, -10, -11, -13,
	-14, -17, -18, -20, -19, -21, -22, -23, -16, -24,
	-25, 19, -6, -7, -8, -207, 83, 90, 104, 191,
	198, -26, -28, 206, 207, 29, 214, 52, 86, 193,
	188, 233, 58, -206, -29, -27, 278, 254, 260, 201,
	-30, 220, 247, 281, 220, 70, 115, 78, 119, 241,
	240, 70, 115, 220, -12, 278, -19, -14, -25, -9,
	-225, 18, -226, -227, 58, 83, 104, 201, 119, 78,
	240, -225, -44, 198, -41, 4, -186, -188, 16, 17,
	19, 28, 29, 33, 37, 40, 51, 52, 53, 55,
	57, 60, 61, 68, 69, 70, 71, 73, 78, 82,
	83, 85, 90, 94, 95, 98, 100, 105, 110, 111,
	116, 119, 127, 129, 130, 135, 138, 141, 143, 144,
	145, 146, 147, 149, 150, 152, 154, 151, 157, 159,
	160, 166, 169, 172, 173, 176, 179, 180, 181, 183,
	184, 188, 186, 187, 189, 191, 193, 194, 196, 199,
	200, 203, 204, 206, 207, 209, 211, 213, 214, 217,
	215, 221, 222, 229, 233, 234, 235, 236, 239, 240,
	241, 244, 245, 246, 250, 255, 256, 257, 258, 30,
	31, 32, 34, 35, 38, 39, 43, 44, 45, 47,
	72, 74, 75, 89, 91, 96, 106, 108, 112, 113,
	120, 121, 122, 124, 133, 156, 158, 167, 171, 175,
	177, 182, 195, 202, 210, 216, 218, 224, 225, 226,
	230, 231, 247, 248, -109, 138, 204, 229, -110, -108,
	-179, 224, 147, -71, -41, 198, 4, 70, 51, 71,
	105, 115, 116, 130, 221, 224, 229, 18, 58, -230,
	229, 229, -230, -230, -43, 229, 227, -44, -229, 220,
	220, -98, 70, 238, -27, -29, -28, -60, -61, 237,
	123, 88, 165, -26, -28, -206, -208, 183, -205, -41,
	-208, -57, -58, 18, 80, 282, -150, -47, 163, -41,
	-81, 278, -3, -150, 112, -41, -50, 112, -47, 102,
	125, 125, -151, -150, -41, 112, -51, 112, -50, -72,
	112, -71, -155, -154, -182, 4, -186, -188, -187, 247,
	49, 59, 103, 118, 126, 128, 134, 136, 148, 168,
	170, 192, 208, 162, 282, 162, -41, -109, 45, -109,
	-111, -39, -40, 127, 179, 227, 263, 102, 258, -54,
	5, 76, -74, 280, 102, -222, 162, 102, 102, 102,
	-178, 102, 258, 127, 179, 220, -112, -39, -40, -112,
	227, -44, -84, -150, -71, 112, 115, -41, 112, -60,
	-61, -83, -101, -102, 137, 161, -86, 18, 80, -86,
	-86, 37, 279, 279, 282, -208, -65, 278, -75, -152,
	-123, 271, -125, 269, 270, 275, 153, 259, -134, -47,
	-126, 9, 278, -137, -203, -28, 89, 24, -135, -136,
	195, -41, 7, 8, 5, 6, -45, -158, -167, 232,
	92, 155, 41, -201, -202, 4, -186, -181, -159, -169,
	-163, -166, 124, 49, 63, 66, 64, 67, 205, 242,
	42, 91, 171, 175, 218, 230, 231, 112, 156, 113,
	47, 106, 133, 82, 31, 32, 34, 35, 43, 44,
	72, 74, 75, 96, 120, 121, 122, 158, 182, 210,
	216, 225, 226, 248, -187, -170, -171, -164, -165, -172,
	-75, -81, 271, -47, 278, -79, -119, -118, -117, 276,
	280, -80, -142, -123, 76, -35, 186, -34, 17, 19,
	83, 245, 89, 186, 186, 89, 283, -151, -49, -47,
	-49, 206, -41, 25, 89, -37, 282, 40, 189, 89,
	282, 89, 279, 282, -221, -70, 220, 70, -48, -41,
	271, -227, -221, 25, 282, 282, 135, -53, 141, 152,
	110, -177, 76, -184, -176, -143, 9, 232, 92, 162,
	-183, 8, 270, -175, -182, 5, 7, 269, -177, 76,
	61, -185, 5, 4, -167, -143, 76, 138, 124, 280,
	-180, 4, -186, -188, -187, -189, 18, 20, 21, 22,
	23, 24, 25, 26, 27, 36, 41, 42, 46, 48,
	50, 56, 58, 62, 63, 64, 65, 66, 67, 76,
	77, 79, 80, 81, 84, 86, 88, 92, 93, 99,
	101, 102, 104, 107, 109, 114, 115, 117, 123, 125,
	131, 132, 137, 139, 140, 153, 155, 161, 162, 163,
	164, 165, 174, 178, 185, 190, 201, 205, 212, 219,
	220, 223, 227, 228, 232, 237, 238, 242, 243, 249,
	251, 252, 253, 254, -179, -224, 99, -221, -179, -179,
	-179, -179, 135, -179, 282, 282, -44, -37, 282, 278,
	153, -42, 112, -41, -38, 85, 153, -83, -102, -101,
	-103, -123, 18, -123, -125, -27, -27, -27, -62, -146,
	-123, -205, 25, -64, -41, -67, 282, 102, 10, 48,
	28, 269, 270, 271, 272, 97, 273, 266, 267, 268,
	265, 261, 262, 263, 54, 142, 197, 12, 13, 14,
	22, 164, 136, 259, 208, 126, 30, 114, 25, 4,
	-123, -123, -123, -123, -123, 170, -28, -123, -73, -79,
	-28, -131, 276, 278, -79, 278, 5, 5, 278, -138,
	-123, -209, 255, 99, 278, 278, 278, 278, 278, 278,
	278, 278, 278, 278, 278, 278, 278, 278, 278, 177,
	-174, 250, -174, -174, -160, 278, -160, -161, 278, -160,
	260, 278, -67, -47, -119, -123, -180, 271, 282, 279,
	282, 227, -99, 56, 50, -114, 112, 50, -190, -41,
	56, -191, 46, 238, 178, 101, -99, 56, -99, 56,
	56, -150, 227, 227, -50, -41, -116, 252, -105, -19,
	278, 76, 25, -105, -76, -77, -153, -78, -47, 278,
	-41, -41, -50, -51, -71, -72, -12, -154, 227, 282,
	-70, -64, -118, -117, 102, 229, -40, -39, -52, 181,
	211, 187, 203, 282, 8, 7, 7, 5, -180, -223,
	-41, -40, -39, -150, -55, -56, -115, -114, -192, -190,
	115, 238, 89, 162, 153, 263, 89, -104, 195, 196,
	282, -33, 26, 79, 278, 282, 279, -116, -152, -68,
	-148, -150, -28, -149, 278, -156, -157, -159, -168, -162,
	-166, -167, 33, 39, 38, 222, 202, 120, 121, 122,
	210, 31, 182, 96, 82, 75, 74, 158, 35, 34,
	-170, -171, -164, -165, 72, 225, 226, 32, 44, 43,
	248, 216, -71, 224, -123, -123, -123, -123, -123, -123,
	-123, -123, -123, -123, -123, -123, -123, -123, -123, -123,
	-123, -123, -123, -123, -123, -123, 136, 208, 30, 114,
	227, 155, 153, 232, 92, 239, 80, 159, -231, 219,
	27, -129, -28, 278, -180, -134, 195, 278, 279, 282,
	-73, -133, 277, -123, -131, -73, 279, 279, -73, 249,
	18, 80, 271, -95, 257, 145, 73, 111, 144, -96,
	200, 7, -141, -140, 251, -210, 94, 107, 278, 279,
	279, -123, -90, -173, 4, 257, 145, 73, 111, 144,
	200, -91, -123, -92, -124, -125, 269, 270, 275, 278,
	195, -93, -123, -73, -123, 36, 132, 228, -94, -123,
	102, -73, -123, -123, -123, -73, -73, -73, 278, 7,
	7, 224, 7, -116, 279, 277, 286, -142, -34, -47,
	-41, -41, 153, -114, 112, -156, -41, 278, 278, 129,
	129, -41, -41, 112, -41, 112, -41, -41, -35, 186,
	-41, -41, 186, -85, 190, -123, -85, -107, 162, -69,
	-47, 247, -41, 190, -67, 282, 263, -69, -37, -223,
	-48, -223, -39, 236, 53, 181, -184, -95, 282, 279,
	282, -42, 115, -71, -47, 89, 5, -41, -146, -15,
	-19, -14, -25, -9, -41, -82, 107, 282, 59, -89,
	128, 148, 103, 134, 192, 118, -120, 283, -145, -144,
	25, -41, -28, -149, -148, -66, 24, -95, 278, 258,
	-123, 227, -231, 219, -129, -123, 155, 232, 92, 239,
	80, 159, 102, 278, -124, -124, -73, 278, -73, -123,
	282, 277, 277, 282, 279, -61, 282, -60, -123, -73,
	-73, 279, 227, 227, 227, 227, 278, 279, -139, -140,
	84, -123, -215, 169, 278, 278, -123, 25, 279, 102,
	279, -97, 174, 279, 10, 269, 270, 271, 272, 97,
	273, 266, 267, 268, 265, 261, 262, 263, 54, 142,
	197, 12, 13, 14, 126, 114, -124, -124, -124, -73,
	278, 279, -127, -128, 102, 99, 25, -94, -94, -94,
	279, 102, -73, 282, 282, 282, 279, 279, 279, 7,
	279, 282, 279, 258, 279, -82, -123, 227, 227, 89,
	153, -193, -191, -123, -64, 278, 278, -32, 83, 206,
	-100, 89, -37, 89, -37, 227, -99, 56, 227, -75,
	190, 55, 279, 282, -75, -116, -77, -142, 279, -41,
	-115, 278, -42, 278, 278, -41, -38, 279, -130, 109,
	37, -148, 128, 128, -148, -89, 128, -87, 168, -87,
	-87, -145, -180, 284, -41, 278, 279, 276, 276, 7,
	-123, -123, -124, -124, 102, 278, -123, -132, -156, 22,
	22, 279, -73, 279, 282, 279, -123, -131, 279, 249,
	-61, -61, -61, 145, 111, 144, -96, 144, -96, -96,
	7, 5, 86, -123, 223, -216, -41, 278, 252, -60,
	279, -156, -123, -127, -123, -156, -124, -124, -124, -124,
	-124, -124, -124, -124, -124, -124, -124, -124, -124, -124,
	-124, -124, -124, -124, -124, 80, 153, 159, -124, 282,
	-73, 279, -128, -127, -123, -123, -156, 279, 279, 279,
	-73, -123, -123, -123, 279, 7, -130, 277, -41, -41,
	-114, 89, -194, 56, -195, 48, 153, 155, 238, 178,
	46, 76, 185, 279, 279, -64, -64, 153, 76, 153,
	76, 69, 234, -41, -41, -47, -41, -41, -41, -75,
	-106, 278, 162, -19, -47, -85, 263, -63, -147, -41,
	-204, 278, -201, -202, -45, 278, -55, -63, 162, -211,
	253, -123, -73, -148, -148, -88, 243, 162, 128, -148,
	-122, -121, 100, 151, 278, -64, -144, 277, 7, 7,
	279, 22, 22, -123, -132, 279, 282, -123, -123, 279,
	-123, 5, -123, 279, 279, 279, 279, -123, -220, -41,
	-123, 279, 279, -128, 102, 80, 159, 278, -123, 279,
	279, 282, 279, 279, 279, -211, -114, -41, -71, 155,
	129, 278, -124, -47, -113, -228, 57, 217, 279, 279,
	155, 155, -123, -156, -37, -37, 227, 227, 81, -64,
	56, -81, -28, 278, 279, 282, -46, -79, 48, -46,
	-123, 278, -63, 279, 279, -47, -212, -214, -41, -88,
	278, -123, -148, 282, 285, 263, -64, 279, 277, 277,
	-123, -123, 279, -156, 279, -61, -213, 173, 279, -124,
	102, 278, -132, 279, -123, -195, -123, -59, 278, 278,
	185, -36, 48, -41, -41, 240, 154, 279, -41, -113,
	-147, -33, -71, -33, 279, -73, 279, -113, 278, 282,
	25, -64, -121, -180, 279, 279, -61, 37, -124, -132,
	279, 279, 279, -198, 143, -64, -64, -47, -31, 243,
	-71, 206, -116, -46, -61, -113, -63, -214, -216, 279,
	-217, 180, 196, -73, 279, -196, -199, -197, 162, 103,
	172, 209, 279, 279, -59, -123, -76, -33, 279, 279,
	279, -218, -219, 30, 235, 61, -123, -218, -197, 162,
	-199, 162, 240, 78, -198, -116, -113, -219, 176, 98,
	195, 176, 98, -200, 150, 189, 40, 206, -200, -196,
	22, 16, 155, 76, -219,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 0, 50, 51, 52, 0, 0, 324, 0, 0,
	0, 294, -2, 0, 0, 252, 0, 252, 252, 256,
	0, 326, 220, 323, -2, 334, 0, 0, 0, 332,
	308, 0, 0, -2, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 66, 0, 68, 69, 70, 71,
	0, 80, 81, 82, 84, 85, 86, 87, 88, 89,
	90, 0, 245, 827, 258, 739, 740, 741, 756, 757,
	758, 759, 760, 761, 762, 763, 764, 765, 766, 767,
	768, 769, 770, 771, 772, 773, 774, 775, 776, 777,
	778, 779, 780, 781, 782, 783, 784, 785, 786, 787,
	788, 789, 790, 791, 792, 793, 794, 795, 796, 797,
	798, 799, 800, 801, 802, 803, 804, 805, 806, 807,
	808, 809, 810, 811, 812, 813, 814, 815, 816, 817,
	818, 819, 820, 821, 822, 823, 824, 825, 826, 828,
	829, 830, 831, 832, 833, 834, 835, 836, 837, 838,
	839, 840, 841, 842, 843, 844, 845, 846, 847, 848,
	849, 850, 851, 852, 853, 854, 855, 856, 857, 858,
	859, 860, 861, 862, 863, 864, 865, 866, 867, 868,
	869, 870, 871, 872, 873, 874, 875, 876, 877, 878,
	879, 880, 881, 882, 883, 884, 885, 886, 887, 888,
	889, 890, 891, 892, 893, 894, 895, 896, 897, 898,
	899, 900, 901, 902, 93, 794, 831, 842, 98, 108,
	0, 896, -2, 112, 62, 827, 141, 142, 0, 144,
	158, 0, 0, 0, 156, 0, 0, 153, 0, 263,
	251, 263, 248, 249, 250, 253, 0, 244, 0, 325,
	0, 0, 0, 219, -2, 304, 305, -2, 0, 329,
	329, 329, 0, 0, 305, 0, 313, 817, 316, 722,
	314, 0, 0, 331, 330, 0, 309, 391, 0, 712,
	354, 0, 2, 0, 877, 0, 0, 877, 0, 0,
	0, 0, 0, 397, 54, 877, 45, 877, 708, 58,
	877, 60, 0, 72, 74, 747, 748, 749, 750, 901,
	903, 904, 905, 906, 907, 908, 909, 910, 911, 912,
	913, 914, 915, 0, 0, 0, 257, 94, 867, 96,
	97, 99, 100, 0, 0, 0, 0, 0, 0, 111,
	136, 137, 63, 0, 0, 160, 0, 0, 0, 0,
	149, 0, 150, 0, 152, 0, 246, 259, 260, 247,
	0, 255, 45, 395, 0, 877, 743, 268, 877, -2,
	0, 300, 341, 342, 0, 0, 0, 327, 328, 0,
	0, 0, 296, 297, 0, 315, 0, 0, 357, 700,
	704, 705, 480, 0, 0, 0, 0, 0, 0, 561,
	562, 563, 0, 565, 566, 567, 872, 0, 571, 572,
	891, 712, 725, 726, 727, 728, 0, 0, 0, 733,
	734, 735, 684, 610, 581, -2, -2, 723, 419, 420,
	421, 422, -2, 903, 585, 587, 589, 590, 591, 592,
	0, 873, 887, 888, 895, 899, 900, 877, 884, 878,
	868, 875, 883, 777, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, 746, 443, 444, 449, 450, 452,
	357, 355, 392, 393, 0, 713, 691, 685, 686, 0,
	0, 0, 697, 695, 696, 22, 241, 24, 0, 241,
	241, 0, 0, 0, 0, 0, 0, 401, 0, 274,
	0, 0, 398, 0, 0, 56, 0, 43, 44, 0,
	0, 0, 324, 0, 0, 77, 0, 773, 710, 715,
	718, 83, 0, 0, 0, 0, 0, 103, 123, 124,
	125, 104, 106, 113, 115, 116, 117, 126, 127, 128,
	129, 213, 0, 215, 139, 140, 736, 0, 105, 107,
	109, 110, 130, 131, 0, 133, 134, 135, 463, 0,
	64, 751, 752, 753, 754, 755, 916, 917, 918, 919,
	920, 921, 922, 923, 924, 925, 926, 927, 928, 929,
	930, 931, 932, 933, 934, 935, 936, 937, 938, 939,
	940, 941, 942, 943, 944, 945, 946, 947, 948, 949,
	950, 951, 952, 953, 954, 955, 956, 957, 958, 959,
	960, 961, 962, 963, 964, 965, 966, 967, 968, 969,
	970, 971, 972, 973, 974, 975, 976, 977, 978, 979,
	980, 981, 982, 983, 984, 985, 986, 987, 988, 989,
	990, 991, 992, 993, 143, 145, 0, 157, 146, 147,
	148, 155, 151, 154, 0, 0, 254, 216, 0, 164,
	0, 0, 877, 742, 265, 0, 0, 303, 339, 340,
	343, 346, 347, 344, 480, 310, 311, 312, 335, 336,
	230, 317, 0, 0, 719, 401, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 694, 0, 0, 703,
	484, 485, 486, 508, 509, 0, -2, 642, 0, 568,
	569, 570, 0, 0, -2, 0, 730, 477, 0, 0,
	683, 612, 0, 0, 0, 0, 0, 0, 0, 663,
	669, 0, 0, 0, 0, 0, 0, 0, 0, 433,
	446, 457, 454, 453, 435, 0, 434, 432, 0, 436,
	0, 0, 401, 0, 692, 0, 689, 690, 0, 699,
	0, 0, 0, 0, 240, 26, 877, 0, 36, 0,
	0, 186, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 714, 285, 0, 285, 276,
	0, 0, 0, 272, 357, 287, 289, 290, 0, 0,
	399, 55, 709, 45, 61, 59, 67, 73, 0, 0,
	78, 79, 716, 717, 0, 0, 101, 102, 264, 0,
	120, 0, 122, 0, 214, 738, 737, 477, 65, 159,
	91, 261, 262, 396, 0, 163, 165, 167, 168, 169,
	743, 0, 0, 0, 0, 0, 0, 345, 348, 349,
	0, 338, 228, 229, 324, 0, 721, 351, 701, 356,
	358, 366, 382, 369, 0, 481, 407, 408, 409, 410,
	411, 477, 414, 415, 416, 417, 418, 426, 427, 428,
	429, 430, 431, 440, 0, 425, 425, 425, 437, 438,
	441, 442, 447, 448, 459, 460, 461, 458, 458, 458,
	455, 456, 482, 0, 487, 488, 489, 490, 491, 492,
	493, 494, 495, 496, -2, -2, -2, 500, 501, 502,
	-2, -2, -2, 506, 507, -2, 0, 0, 694, 0,
	0, 514, 0, 517, 519, 521, 0, 0, 0, 0,
	693, 531, 675, 0, 702, 516, 0, 0, 564, 0,
	0, 0, 648, 642, 649, 0, -2, 573, 334, 0,
	0, 0, 0, 731, 464, 465, 466, 467, 468, 469,
	478, 0, 682, 678, 0, 620, 0, 0, 0, 586,
	588, 0, 0, 0, 652, 653, 654, 655, 656, 657,
	658, 0, 0, 0, 0, 533, 0, 0, 0, 0,
	891, 0, 642, 668, 0, 0, 0, 0, 0, 642,
	0, 674, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 351, 394, 687, 0, 698, 25, 232,
	0, 0, 0, 28, 877, 172, 0, 0, 0, 0,
	0, 243, 37, 877, 45, 877, 45, 38, 23, 241,
	231, 234, 0, 53, 0, 400, 269, 270, 0, 0,
	706, 278, 275, 0, 401, 0, 0, 0, 57, 75,
	711, 76, 95, 118, 119, 121, 114, 132, 0, 161,
	0, 0, 743, 0, 0, 0, 267, 268, 337, 0,
	319, 320, 321, 322, 720, 353, 0, 0, 0, 0,
	0, 0, 388, 388, 388, 386, 382, 0, 368, 381,
	0, 380, -2, 369, 0, 402, 404, 412, 0, 0,
	-2, 0, 0, 0, 532, -2, 515, 518, 520, 522,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 643,
	0, 646, 647, 0, -2, 0, 0, 333, 334, 334,
	334, 579, 0, 0, 0, 0, 0, 0, 0, 679,
	0, 0, 580, 0, 0, 0, 0, 0, 594, 0,
	595, 0, 0, 596, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 535, 536, 537, 0,
	0, 597, 666, 667, 0, 0, 0, 0, 0, 0,
	602, 0, 673, 0, 0, 0, 606, 607, 608, 0,
	423, 0, 439, 462, 451, 353, 0, 0, 0, 0,
	0, 170, 185, 0, 0, 0, 0, 30, 0, 0,
	0, 0, 34, 0, 40, 0, 0, 0, 0, 284,
	0, 283, 0, 0, 273, 285, 288, 291, 0, 92,
	166, 0, 0, 164, 0, 0, 266, 318, 614, 0,
	0, 359, 0, 0, 0, 0, 0, 383, 387, 384,
	385, 367, 364, 0, 378, 0, 371, 0, 0, 0,
	483, -2, 0, 0, 0, 0, -2, 0, 644, 0,
	0, 676, 0, 637, 0, -2, 643, 650, 574, 0,
	0, 0, 0, 470, 471, 472, 473, 474, 475, 476,
	0, 732, 677, 681, 0, 618, 619, 623, 0, 0,
	584, 0, 651, 660, 661, 534, 538, 539, 540, 541,
	542, 543, 544, 545, 546, 547, -2, -2, -2, 551,
	552, 553, -2, -2, -2, 0, 0, 0, 662, 0,
	0, 640, 664, 665, 670, 671, 0, 599, 600, 601,
	672, 0, 0, 0, 445, 0, 614, 688, 236, 238,
	27, 0, 171, 0, 174, 0, 0, 177, 178, 0,
	0, 0, 0, 187, 194, 0, 0, 0, 42, 0,
	0, 242, 0, 45, 45, 233, 0, 0, 235, 271,
	0, 0, 0, 277, 707, 286, 0, 0, 221, 227,
	227, 0, 582, 583, 0, 0, 0, 0, 0, 306,
	0, 352, 350, 372, 0, 374, 0, 0, 0, 376,
	0, 362, 0, 361, 0, 0, 370, 405, 0, 0,
	413, 0, 0, -2, 0, 525, 0, -2, -2, 636,
	643, 729, 334, 575, 577, 578, 479, 680, 625, 622,
	0, 609, 593, 659, 0, 0, 0, 0, 643, 639,
	598, 0, 604, 605, 424, 307, 29, 0, 175, 176,
	179, 0, 181, 196, 188, 0, 191, 192, 189, 0,
	31, 32, 41, 47, 33, 39, 0, 0, 0, 0,
	0, 292, 293, 0, 194, 0, 230, 724, 0, 230,
	0, 0, 0, 162, 194, 0, 613, 615, 0, 373,
	0, 390, 375, 0, 365, 0, 0, 379, 406, 403,
	-2, -2, 526, 645, 638, 0, 334, 0, 611, -2,
	0, 0, 0, 641, 0, 173, 0, 200, 0, 0,
	0, 49, 0, 237, 239, 0, 280, 401, 282, 183,
	222, 223, 226, 224, 227, 334, 194, 217, 0, 0,
	0, 0, 363, 360, 377, 576, 628, 0, -2, 0,
	559, 603, 180, 205, 0, 0, 0, 196, 35, 0,
	46, 0, 281, 230, 0, 184, 0, 616, 617, 389,
	0, 0, 0, 624, 560, 182, 201, 202, 0, 197,
	198, 199, 195, 193, 200, 48, 401, 225, 574, 194,
	621, 626, 629, -2, 845, 770, 0, 627, 203, 0,
	204, 0, 0, 0, 205, 279, 218, 0, 631, 632,
	633, 634, 635, 206, 0, 209, 210, 0, 207, 190,
	0, 208, 211, 212, 630,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 267, 3, 273, 268, 3,
	278, 279, 271, 269, 282, 270, 280, 272, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 286, 281,
	261, 263, 262, 3, 283, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 276, 3, 277, 266, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 284, 265, 285, 275,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 264, 57604, 274,
	0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:666
		{
			sqllex.(*scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:672
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:678
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 14:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:698
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 21:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:708
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 22:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:714
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.qname(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 23:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:718
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.qname(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 24:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:724
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 25:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:728
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:735
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 27:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:740
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 28:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:745
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 29:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:750
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 30:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:755
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: sqlDollar[3].str, Default: sqlDollar[4].union.expr()}
		}
	case 31:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:760
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: sqlDollar[3].str}
		}
	case 32:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:764
		{
			unimplemented()
		}
	case 33:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:767
		{
			sqlVAL.union.val = &AlterTableDropColumn{columnKeyword: sqlDollar[2].union.bool(), IfExists: true, Column: sqlDollar[5].str}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:772
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        sqlDollar[3].str,
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:782
		{
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:785
		{
			sqlVAL.union.val = &AlterTableAddConstraint{ConstraintDef: sqlDollar[2].union.constraintDef()}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:789
		{
			unimplemented()
		}
	case 38:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:791
		{
			unimplemented()
		}
	case 39:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:794
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   sqlDollar[5].str,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:803
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   sqlDollar[3].str,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 41:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:813
		{
			if containsSubquery(sqlDollar[3].union.expr()) {
				sqllex.Error("default expression contains a subquery")
				return 1
			}
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:821
		{
			sqlVAL.union.val = nil
		}
	case 43:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:827
		{
			sqlVAL.union.val = DropCascade
		}
	case 44:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:831
		{
			sqlVAL.union.val = DropRestrict
		}
	case 45:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:835
		{
			sqlVAL.union.val = DropDefault
		}
	case 46:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:840
		{
			unimplementedWithIssue(2473)
		}
	case 47:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:841
		{
		}
	case 48:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:844
		{
			unimplemented()
		}
	case 49:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:845
		{
		}
	case 53:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:856
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retExprs()}
		}
	case 54:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:863
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 55:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:867
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 56:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:871
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 57:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:879
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 58:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:887
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.qnames(), IfExists: false}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:891
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.qnames(), IfExists: true}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:897
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:901
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 62:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:907
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:911
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:917
		{
			sqlVAL.union.val = Indirection{NameIndirection(sqlDollar[2].str)}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:921
		{
			sqlVAL.union.val = append(sqlDollar[1].union.indirect(), NameIndirection(sqlDollar[3].str))
		}
	case 66:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:928
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:932
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:938
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 72:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:947
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 73:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:951
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 75:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:961
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: NameList(sqlDollar[6].union.strs()), Targets: sqlDollar[4].union.targetList()}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:968
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: NameList(sqlDollar[6].union.strs()), Targets: sqlDollar[4].union.targetList()}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:975
		{
			sqlVAL.union.val = TargetList{Tables: QualifiedNames(sqlDollar[1].union.qnames())}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:979
		{
			sqlVAL.union.val = TargetList{Tables: QualifiedNames(sqlDollar[2].union.qnames())}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:983
		{
			sqlVAL.union.val = TargetList{Databases: NameList(sqlDollar[2].union.strs())}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:990
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:993
		{
		}
	case 82:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:997
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1001
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 84:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1008
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 85:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1012
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 86:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1016
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 87:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1020
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 88:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1024
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 89:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1028
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 90:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1032
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 91:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1040
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1044
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 93:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1052
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 94:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1056
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 95:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1060
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1064
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 97:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1070
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 99:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1077
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1081
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1085
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1089
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1096
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1102
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname(), Values: sqlDollar[3].union.exprs()}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1106
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname(), Values: sqlDollar[3].union.exprs()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1110
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname()}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1114
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname()}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1121
		{
			unimplemented()
		}
	case 110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1124
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1127
		{
			unimplemented()
		}
	case 113:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1134
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1138
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1146
		{
			sqlVAL.union.val = ValArg{Name: sqlDollar[1].str}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1152
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1156
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1160
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1164
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1168
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1174
		{
			sqlVAL.union.val = Low
		}
	case 124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1178
		{
			sqlVAL.union.val = Normal
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1182
		{
			sqlVAL.union.val = High
		}
	case 126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1188
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1192
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1196
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1211
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1215
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1219
		{
			expr := &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
			typedExpr, err := TypeCheck(expr, nil, NoTypePreference)
			if err != nil {
				sqllex.Error("cannot type check interval type: " + err.Error())
				return 1
			}
			var ctx EvalContext
			d, err := typedExpr.Eval(ctx)
			if err != nil {
				sqllex.Error("cannot evaluate to an interval type: " + err.Error())
				return 1
			}
			if _, ok := d.(*DInterval); !ok {
				panic("not an interval type")
			}
			sqlVAL.union.val = d
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1239
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1243
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1248
		{
			unimplemented()
		}
	case 137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1249
		{
			unimplemented()
		}
	case 138:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1250
		{
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1254
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1258
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1264
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1268
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1272
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.qname()}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1276
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1280
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.strs()}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1284
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1288
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1292
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1296
		{
			sqlVAL.union.val = &ShowTables{Name: sqlDollar[3].union.qname()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1300
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1304
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1308
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1312
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 154:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1316
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.qname()}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1322
		{
			sqlVAL.union.val = sqlDollar[2].union.qname()
		}
	case 156:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1326
		{
			sqlVAL.union.val = (*QualifiedName)(nil)
		}
	case 157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1332
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 158:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1337
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1343
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 160:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1347
		{
			sqlVAL.union.val = []string(nil)
		}
	case 161:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1354
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.qname(), IfNotExists: false, Defs: sqlDollar[5].union.tblDefs()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1358
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.qname(), IfNotExists: true, Defs: sqlDollar[8].union.tblDefs()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1365
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1371
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1375
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1381
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1386
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1392
		{
			sqlVAL.union.val = newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1398
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 172:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1402
		{
			sqlVAL.union.val = []ColumnQualification(nil)
		}
	case 173:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1408
		{
			sqlVAL.union.val = sqlDollar[3].union.colQual()
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1412
		{
			unimplemented()
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1428
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1432
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1436
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1440
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1444
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1448
		{
			if containsSubquery(sqlDollar[2].union.expr()) {
				sqllex.Error("default expression contains a subquery")
				return 1
			}
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1455
		{
			unimplemented()
		}
	case 183:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1459
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.idxElems(),
				Storing: sqlDollar[6].union.strs(),
			}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1467
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:    Name(sqlDollar[3].str),
					Columns: sqlDollar[5].union.idxElems(),
					Storing: sqlDollar[7].union.strs(),
				},
			}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1482
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1487
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 187:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1493
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1499
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[3].union.strs()),
					Storing: sqlDollar[5].union.strs(),
				},
			}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1508
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[4].union.strs()),
				},
				PrimaryKey: true,
			}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1517
		{
			unimplemented()
		}
	case 193:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1534
		{
			sqlVAL.union.val = sqlDollar[3].union.strs()
		}
	case 194:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1538
		{
			sqlVAL.union.val = []string(nil)
		}
	case 195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1544
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 196:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1548
		{
			sqlVAL.union.val = []string(nil)
		}
	case 197:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1553
		{
			unimplemented()
		}
	case 198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1554
		{
			unimplemented()
		}
	case 199:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1555
		{
			unimplemented()
		}
	case 200:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1556
		{
		}
	case 201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1563
		{
			unimplemented()
		}
	case 202:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1564
		{
			unimplemented()
		}
	case 203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1565
		{
			unimplemented()
		}
	case 204:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1566
		{
			unimplemented()
		}
	case 205:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1567
		{
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1570
		{
			unimplemented()
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1573
		{
			unimplemented()
		}
	case 208:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1576
		{
			unimplemented()
		}
	case 209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1577
		{
			unimplemented()
		}
	case 210:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1578
		{
			unimplemented()
		}
	case 211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1579
		{
			unimplemented()
		}
	case 212:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1580
		{
			unimplemented()
		}
	case 213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1584
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1588
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1592
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 216:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1599
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.qnames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1606
		{
			sqlVAL.union.val = &CreateIndex{
				Name:    Name(sqlDollar[4].str),
				Table:   sqlDollar[6].union.qname(),
				Unique:  sqlDollar[2].union.bool(),
				Columns: sqlDollar[8].union.idxElems(),
				Storing: sqlDollar[10].union.strs(),
			}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql.y:1616
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.qname(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.strs(),
			}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1629
		{
			sqlVAL.union.val = true
		}
	case 220:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1633
		{
			sqlVAL.union.val = false
		}
	case 221:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1639
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1643
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1652
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1655
		{
			unimplemented()
		}
	case 225:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1656
		{
			unimplemented()
		}
	case 226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1659
		{
			unimplemented()
		}
	case 227:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1660
		{
		}
	case 228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1664
		{
			sqlVAL.union.val = Ascending
		}
	case 229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1668
		{
			sqlVAL.union.val = Descending
		}
	case 230:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1672
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 231:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1679
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1683
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.qname(), NewName: sqlDollar[6].union.qname(), IfExists: false}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1687
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.qname(), NewName: sqlDollar[8].union.qname(), IfExists: true}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1691
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1695
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1699
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.qname(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1703
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.qname(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1707
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 239:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1711
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 240:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1717
		{
			sqlVAL.union.val = true
		}
	case 241:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1721
		{
			sqlVAL.union.val = false
		}
	case 242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1726
		{
		}
	case 243:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1727
		{
		}
	case 244:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1731
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1737
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1744
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1748
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1752
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1756
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1760
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1769
		{
		}
	case 252:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1770
		{
		}
	case 253:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1774
		{
			sqlVAL.str = ""
		}
	case 254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1778
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1782
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 256:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1786
		{
			sqlVAL.str = ""
		}
	case 257:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1792
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 258:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1796
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1802
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 260:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1806
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 261:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1810
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1814
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1818
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1824
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 265:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1830
		{
			sqlVAL.union.val = &CreateDatabase{Name: Name(sqlDollar[3].str), Encoding: sqlDollar[4].union.strVal()}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1834
		{
			sqlVAL.union.val = &CreateDatabase{IfNotExists: true, Name: Name(sqlDollar[6].str), Encoding: sqlDollar[7].union.strVal()}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1840
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1843
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 269:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1853
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retExprs()
		}
	case 270:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1859
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
		}
	case 271:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1864
		{
			unimplementedWithIssue(6637)
		}
	case 272:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1866
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1871
		{
			unimplementedWithIssue(6637)
		}
	case 274:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1879
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname()}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1883
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1889
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1893
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.qnames(), Rows: sqlDollar[4].union.slct()}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1897
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1903
		{
			sqlVAL.union.val = &OnConflict{Columns: NameList(sqlDollar[3].union.strs()), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1907
		{
			sqlVAL.union.val = &OnConflict{Columns: NameList(sqlDollar[3].union.strs()), DoNothing: true}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1913
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 282:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1917
		{
			unimplemented()
		}
	case 283:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1919
		{
			sqlVAL.union.val = []string(nil)
		}
	case 284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1925
		{
			sqlVAL.union.val = sqlDollar[2].union.selExprs()
		}
	case 285:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1929
		{
			sqlVAL.union.val = SelectExprs(nil)
		}
	case 286:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1936
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retExprs()}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1942
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1946
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 291:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1956
		{
			sqlVAL.union.val = &UpdateExpr{Names: QualifiedNames{sqlDollar[1].union.qname()}, Expr: sqlDollar[3].union.expr()}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1968
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.qnames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1972
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.qnames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2016
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2022
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2026
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2041
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2045
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2049
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2053
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2057
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2061
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2095
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.tblExprs(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2107
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.tblExprs(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2119
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        TableExprs{&AliasedTableExpr{Expr: sqlDollar[2].union.qname()}},
				tableSelect: true,
			}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2127
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2136
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2145
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2163
		{
			unimplemented()
		}
	case 314:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2164
		{
			unimplemented()
		}
	case 315:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2165
		{
			unimplemented()
		}
	case 316:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2168
		{
			unimplemented()
		}
	case 317:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2169
		{
			unimplemented()
		}
	case 318:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2172
		{
			unimplemented()
		}
	case 319:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2176
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 323:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2184
		{
			unimplemented()
		}
	case 324:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2185
		{
		}
	case 325:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2188
		{
		}
	case 326:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2189
		{
		}
	case 327:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2193
		{
			sqlVAL.union.val = true
		}
	case 328:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2197
		{
			sqlVAL.union.val = false
		}
	case 329:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2201
		{
			sqlVAL.union.val = false
		}
	case 330:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2207
		{
			sqlVAL.union.val = true
		}
	case 331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2212
		{
		}
	case 332:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2213
		{
		}
	case 333:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2217
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 334:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2221
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 335:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2227
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 336:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2233
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2237
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 338:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2243
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2251
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2260
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2271
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2284
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2291
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2298
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 348:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2312
		{
		}
	case 349:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2313
		{
		}
	case 350:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2339
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 351:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2343
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 352:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2349
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 353:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2353
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 354:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2359
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2363
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2375
		{
			sqlVAL.union.val = sqlDollar[2].union.tblExprs()
		}
	case 357:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2379
		{
			sqlVAL.union.val = TableExprs(nil)
		}
	case 358:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2385
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 359:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2389
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 360:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2395
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 361:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2400
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2406
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 363:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2411
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			index := a.Index
			if index == "" {
				index = b.Index
			} else if b.Index != "" {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			noIndexJoin := a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = &IndexHints{Index: index, NoIndexJoin: noIndexJoin}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2431
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 365:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2435
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 366:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2439
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 367:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2446
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), Hints: sqlDollar[2].union.indexHints(), As: sqlDollar[3].union.aliasClause()}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2450
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, As: sqlDollar[2].union.aliasClause()}
		}
	case 370:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2454
		{
			unimplemented()
		}
	case 371:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2472
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2476
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2480
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2484
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2488
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astNaturalJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr()}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2492
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astNaturalJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2498
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: NameList(sqlDollar[4].union.strs())}
		}
	case 378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2502
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2506
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: NameList(sqlDollar[3].union.strs())}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2510
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 382:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2517
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2523
		{
			sqlVAL.str = astFullJoin
		}
	case 384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2527
		{
			sqlVAL.str = astLeftJoin
		}
	case 385:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2531
		{
			sqlVAL.str = astRightJoin
		}
	case 386:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2535
		{
			sqlVAL.str = astInnerJoin
		}
	case 387:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2541
		{
		}
	case 388:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2542
		{
		}
	case 389:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2553
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: NameList(sqlDollar[3].union.strs())}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2557
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2563
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 392:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2567
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 393:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2571
		{
			sqlVAL.union.val = sqlDollar[2].union.qname()
		}
	case 394:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2575
		{
			sqlVAL.union.val = sqlDollar[3].union.qname()
		}
	case 395:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2581
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2585
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 397:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2598
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname()}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2602
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2606
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2612
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 401:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2616
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2628
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 403:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2632
		{
			unimplementedWithIssue(2115)
		}
	case 404:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2633
		{
			unimplementedWithIssue(2115)
		}
	case 405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2636
		{
			unimplementedWithIssue(2115)
		}
	case 406:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2637
		{
			unimplementedWithIssue(2115)
		}
	case 407:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2638
		{
		}
	case 413:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2646
		{
			unimplemented()
		}
	case 414:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2648
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 415:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2652
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 416:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2656
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 417:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2660
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 418:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2663
		{
			unimplementedWithIssue(4491)
		}
	case 423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2682
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2691
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2705
		{
			sqlVAL.union.val = nil
		}
	case 426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2712
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 427:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2716
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 428:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2720
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 429:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2724
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 430:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2728
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 431:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2732
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 432:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2736
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newFloatColType(int(prec))
		}
	case 433:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2745
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 434:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2749
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2758
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2767
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2776
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2780
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 439:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2786
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 440:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2790
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2808
		{
			n, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newIntBitType(int(n))
		}
	case 446:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2819
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 451:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2835
		{
			n, err := sqlDollar[3].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2851
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 453:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2857
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 454:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2861
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 455:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2865
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 456:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2869
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 457:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2874
		{
		}
	case 458:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2875
		{
		}
	case 459:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2880
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2884
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2888
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 462:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2892
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 463:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2897
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 464:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2902
		{
			unimplemented()
		}
	case 465:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2903
		{
			unimplemented()
		}
	case 466:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2904
		{
			unimplemented()
		}
	case 467:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2905
		{
			unimplemented()
		}
	case 468:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2906
		{
			unimplemented()
		}
	case 469:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2907
		{
			unimplemented()
		}
	case 470:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2908
		{
			unimplemented()
		}
	case 471:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2909
		{
			unimplemented()
		}
	case 472:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2910
		{
			unimplemented()
		}
	case 473:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2911
		{
			unimplemented()
		}
	case 474:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2912
		{
			unimplemented()
		}
	case 475:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2913
		{
			unimplemented()
		}
	case 476:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2914
		{
			unimplemented()
		}
	case 477:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2915
		{
		}
	case 478:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2918
		{
			unimplemented()
		}
	case 479:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2919
		{
			unimplemented()
		}
	case 481:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2943
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2946
		{
			unimplemented()
		}
	case 483:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2947
		{
			unimplemented()
		}
	case 484:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2956
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2960
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2964
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2968
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2972
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2976
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2980
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2984
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2988
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2992
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2996
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3000
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3004
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3008
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3012
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3016
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3020
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3024
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3028
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3032
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3036
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3040
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3044
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3048
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3052
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3056
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3060
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3064
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3068
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3072
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3076
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3080
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3083
		{
			unimplemented()
		}
	case 517:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3085
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3089
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3093
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3097
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3101
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3105
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3109
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3113
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3117
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3121
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3125
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3129
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3133
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3137
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3141
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3145
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3162
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3166
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3170
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3174
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3178
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3182
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3186
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3190
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3194
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3198
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3202
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3206
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3210
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3214
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3218
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3222
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3226
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3230
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3234
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3238
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3242
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3246
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3250
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3254
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3258
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3262
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3266
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3278
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 563:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3283
		{
			sqlVAL.union.val = ValArg{Name: sqlDollar[1].str}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3287
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3293
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3297
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3301
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3307
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 571:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3311
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 572:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3315
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 573:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3323
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname()}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3327
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3330
		{
			unimplemented()
		}
	case 576:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3331
		{
			unimplemented()
		}
	case 577:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3333
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Type: All, Exprs: sqlDollar[4].union.exprs()}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3337
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Type: Distinct, Exprs: sqlDollar[4].union.exprs()}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3341
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Exprs: Exprs{StarExpr()}}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3354
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 581:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3358
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 582:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3367
		{
			unimplemented()
		}
	case 583:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3368
		{
			unimplemented()
		}
	case 584:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3372
		{
			unimplemented()
		}
	case 585:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3374
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3378
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3382
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3386
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3389
		{
			unimplemented()
		}
	case 590:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3390
		{
			unimplemented()
		}
	case 591:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3391
		{
			unimplemented()
		}
	case 592:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3392
		{
			unimplemented()
		}
	case 593:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3394
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3398
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3402
		{
			sqlVAL.union.val = &OverlayExpr{FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3406
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "STRPOS"}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3410
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3413
		{
			unimplemented()
		}
	case 599:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3415
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3419
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "LTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3423
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "RTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3427
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3431
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3435
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3439
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3443
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3447
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3451
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3457
		{
			unimplemented()
		}
	case 610:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3458
		{
		}
	case 611:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3461
		{
			unimplemented()
		}
	case 612:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3462
		{
		}
	case 613:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3466
		{
			unimplemented()
		}
	case 614:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3467
		{
		}
	case 615:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3470
		{
			unimplemented()
		}
	case 616:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3471
		{
			unimplemented()
		}
	case 617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3474
		{
			unimplemented()
		}
	case 618:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3477
		{
			unimplemented()
		}
	case 619:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3478
		{
			unimplemented()
		}
	case 620:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3479
		{
		}
	case 621:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3483
		{
			unimplemented()
		}
	case 622:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3494
		{
			unimplemented()
		}
	case 623:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3495
		{
		}
	case 624:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3498
		{
			unimplemented()
		}
	case 625:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3499
		{
		}
	case 626:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3507
		{
			unimplemented()
		}
	case 627:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3508
		{
			unimplemented()
		}
	case 628:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3509
		{
		}
	case 629:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3512
		{
			unimplemented()
		}
	case 630:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3513
		{
			unimplemented()
		}
	case 631:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3519
		{
			unimplemented()
		}
	case 632:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3520
		{
			unimplemented()
		}
	case 633:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3521
		{
			unimplemented()
		}
	case 634:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3522
		{
			unimplemented()
		}
	case 635:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3523
		{
			unimplemented()
		}
	case 636:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3534
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3538
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3542
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3548
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3552
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3558
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3599
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3603
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 644:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3609
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3613
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3619
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3623
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3627
		{
			sqlVAL.union.val = &Array{nil}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3633
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3637
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 651:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3643
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3665
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3669
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3675
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 662:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3682
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3686
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 664:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3703
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3707
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3711
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3715
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3719
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 669:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3723
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 670:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3729
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 671:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3735
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 672:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3741
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 673:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3745
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 674:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3749
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 675:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3755
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3759
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3770
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3777
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3781
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 680:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3787
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3793
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 682:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3797
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 684:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3804
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 685:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3810
		{
			sqlVAL.union.val = sqlDollar[1].union.indirectElem()
		}
	case 686:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3814
		{
			sqlVAL.union.val = sqlDollar[1].union.indirectElem()
		}
	case 687:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3818
		{
			sqlVAL.union.val = &ArrayIndirection{Begin: sqlDollar[2].union.expr()}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3822
		{
			sqlVAL.union.val = &ArrayIndirection{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr()}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3828
		{
			sqlVAL.union.val = NameIndirection(sqlDollar[2].str)
		}
	case 690:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3834
		{
			sqlVAL.union.val = qualifiedStar
		}
	case 691:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3840
		{
			sqlVAL.union.val = Indirection{sqlDollar[1].union.indirectElem()}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3844
		{
			sqlVAL.union.val = append(sqlDollar[1].union.indirect(), sqlDollar[2].union.indirectElem())
		}
	case 693:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3849
		{
		}
	case 694:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3850
		{
		}
	case 696:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3859
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3865
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3869
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 699:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3878
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 700:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3884
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3888
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 702:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3894
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3903
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3907
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3911
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 706:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3919
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3923
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 708:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3929
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3933
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 710:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3939
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3943
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 712:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3954
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3958
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3964
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.qname(), Index: Name(sqlDollar[3].str)}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3975
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3979
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: Indirection{sqlDollar[2].union.indirectElem()}}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3983
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: Indirection{sqlDollar[2].union.indirectElem()}}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3987
		{
			sqlVAL.union.val = &QualifiedName{Indirect: Indirection{unqualifiedStar}}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3993
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3997
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 721:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4003
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 722:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4006
		{
		}
	case 723:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4016
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4020
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4027
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 726:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4031
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 727:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4035
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4039
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4042
		{
			unimplemented()
		}
	case 730:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4044
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4048
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4052
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[5].str}, Type: sqlDollar[1].union.colType()}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4056
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 734:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4060
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 735:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4064
		{
			sqlVAL.union.val = DNull
		}
	case 737:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4071
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 738:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4075
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4097
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
