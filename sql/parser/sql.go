// Code generated by go yacc.
//line sql.y:22
package parser

import __yyfmt__ "fmt"

//line sql.y:22
import "github.com/cockroachdb/cockroach/sql/privilege"

func unimplemented() {
	panic("TODO(pmattis): unimplemented")
}

//line sql.y:30
type sqlSymType struct {
	yys            int
	id             int
	pos            int
	empty          struct{}
	ival           int64
	boolVal        bool
	str            string
	strs           []string
	qname          *QualifiedName
	qnames         QualifiedNames
	indirectElem   IndirectionElem
	indirect       Indirection
	stmt           Statement
	stmts          []Statement
	selectStmt     SelectStatement
	colDef         *ColumnTableDef
	constraintDef  ConstraintTableDef
	tblDef         TableDef
	tblDefs        []TableDef
	colQual        ColumnQualification
	colQuals       []ColumnQualification
	colType        ColumnType
	colTypes       []ColumnType
	expr           Expr
	exprs          Exprs
	selExpr        SelectExpr
	selExprs       SelectExprs
	tblExpr        TableExpr
	tblExprs       TableExprs
	joinCond       JoinCond
	when           *When
	whens          []*When
	updateExpr     *UpdateExpr
	updateExprs    []*UpdateExpr
	limit          *Limit
	targetList     TargetList
	targetListPtr  *TargetList
	privilegeType  privilege.Kind
	privilegeList  privilege.List
	orderBy        OrderBy
	orders         []*Order
	order          *Order
	groupBy        GroupBy
	dir            Direction
	alterTableCmd  AlterTableCmd
	alterTableCmds AlterTableCmds
	isoLevel       IsolationLevel
}

const IDENT = 57346
const FCONST = 57347
const SCONST = 57348
const BCONST = 57349
const ICONST = 57350
const PARAM = 57351
const TYPECAST = 57352
const DOT_DOT = 57353
const LESS_EQUALS = 57354
const GREATER_EQUALS = 57355
const NOT_EQUALS = 57356
const ERROR = 57357
const ACTION = 57358
const ADD = 57359
const ALL = 57360
const ALTER = 57361
const ANALYSE = 57362
const ANALYZE = 57363
const AND = 57364
const ANY = 57365
const ARRAY = 57366
const AS = 57367
const ASC = 57368
const ASYMMETRIC = 57369
const AT = 57370
const BEGIN = 57371
const BETWEEN = 57372
const BIGINT = 57373
const BIT = 57374
const BLOB = 57375
const BOOL = 57376
const BOOLEAN = 57377
const BOTH = 57378
const BY = 57379
const BYTES = 57380
const CASCADE = 57381
const CASE = 57382
const CAST = 57383
const CHAR = 57384
const CHARACTER = 57385
const CHECK = 57386
const COALESCE = 57387
const COLLATE = 57388
const COLLATION = 57389
const COLUMN = 57390
const COLUMNS = 57391
const COMMIT = 57392
const COMMITTED = 57393
const CONCAT = 57394
const CONFLICT = 57395
const CONSTRAINT = 57396
const COVERING = 57397
const CREATE = 57398
const CROSS = 57399
const CUBE = 57400
const CURRENT = 57401
const CURRENT_CATALOG = 57402
const CURRENT_DATE = 57403
const CURRENT_ROLE = 57404
const CURRENT_TIME = 57405
const CURRENT_TIMESTAMP = 57406
const CURRENT_USER = 57407
const CYCLE = 57408
const DATA = 57409
const DATABASE = 57410
const DATABASES = 57411
const DATE = 57412
const DAY = 57413
const DEC = 57414
const DECIMAL = 57415
const DEFAULT = 57416
const DEFERRABLE = 57417
const DELETE = 57418
const DESC = 57419
const DISTINCT = 57420
const DO = 57421
const DOUBLE = 57422
const DROP = 57423
const ELSE = 57424
const END = 57425
const ESCAPE = 57426
const EXCEPT = 57427
const EXISTS = 57428
const EXPLAIN = 57429
const EXTRACT = 57430
const FALSE = 57431
const FETCH = 57432
const FILTER = 57433
const FIRST = 57434
const FLOAT = 57435
const FOLLOWING = 57436
const FOR = 57437
const FOREIGN = 57438
const FROM = 57439
const FULL = 57440
const GRANT = 57441
const GRANTS = 57442
const GREATEST = 57443
const GROUP = 57444
const GROUPING = 57445
const HAVING = 57446
const HOUR = 57447
const IF = 57448
const IFNULL = 57449
const IN = 57450
const INDEX = 57451
const INITIALLY = 57452
const INNER = 57453
const INSERT = 57454
const INT = 57455
const INT64 = 57456
const INTEGER = 57457
const INTERSECT = 57458
const INTERVAL = 57459
const INTO = 57460
const IS = 57461
const ISOLATION = 57462
const JOIN = 57463
const KEY = 57464
const LATERAL = 57465
const LEADING = 57466
const LEAST = 57467
const LEFT = 57468
const LEVEL = 57469
const LIKE = 57470
const LIMIT = 57471
const LOCAL = 57472
const LOCALTIME = 57473
const LOCALTIMESTAMP = 57474
const LSHIFT = 57475
const MATCH = 57476
const MINUTE = 57477
const MONTH = 57478
const NAME = 57479
const NAMES = 57480
const NATURAL = 57481
const NEXT = 57482
const NO = 57483
const NOT = 57484
const NOTHING = 57485
const NULL = 57486
const NULLIF = 57487
const NULLS = 57488
const NUMERIC = 57489
const OF = 57490
const OFF = 57491
const OFFSET = 57492
const ON = 57493
const ONLY = 57494
const OR = 57495
const ORDER = 57496
const ORDINALITY = 57497
const OUT = 57498
const OUTER = 57499
const OVER = 57500
const OVERLAPS = 57501
const OVERLAY = 57502
const PARTIAL = 57503
const PARTITION = 57504
const PLACING = 57505
const POSITION = 57506
const PRECEDING = 57507
const PRECISION = 57508
const PRIMARY = 57509
const RANGE = 57510
const READ = 57511
const REAL = 57512
const RECURSIVE = 57513
const REF = 57514
const REFERENCES = 57515
const RENAME = 57516
const REPEATABLE = 57517
const RESTRICT = 57518
const RETURNING = 57519
const REVOKE = 57520
const RIGHT = 57521
const ROLLBACK = 57522
const ROLLUP = 57523
const ROW = 57524
const ROWS = 57525
const RSHIFT = 57526
const SEARCH = 57527
const SECOND = 57528
const SELECT = 57529
const SERIALIZABLE = 57530
const SESSION = 57531
const SESSION_USER = 57532
const SET = 57533
const SHOW = 57534
const SIMILAR = 57535
const SIMPLE = 57536
const SMALLINT = 57537
const SNAPSHOT = 57538
const SOME = 57539
const SQL = 57540
const STRICT = 57541
const STRING = 57542
const STORING = 57543
const SUBSTRING = 57544
const SYMMETRIC = 57545
const TABLE = 57546
const TABLES = 57547
const TEXT = 57548
const THEN = 57549
const TIME = 57550
const TIMESTAMP = 57551
const TO = 57552
const TRAILING = 57553
const TRANSACTION = 57554
const TREAT = 57555
const TRIM = 57556
const TRUE = 57557
const TRUNCATE = 57558
const TYPE = 57559
const UNBOUNDED = 57560
const UNCOMMITTED = 57561
const UNION = 57562
const UNIQUE = 57563
const UNKNOWN = 57564
const UPDATE = 57565
const USER = 57566
const USING = 57567
const VALID = 57568
const VALIDATE = 57569
const VALUE = 57570
const VALUES = 57571
const VARCHAR = 57572
const VARIADIC = 57573
const VARYING = 57574
const WHEN = 57575
const WHERE = 57576
const WINDOW = 57577
const WITH = 57578
const WITHIN = 57579
const WITHOUT = 57580
const YEAR = 57581
const ZONE = 57582
const NOT_LA = 57583
const WITH_LA = 57584
const POSTFIXOP = 57585
const UMINUS = 57586

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"FCONST",
	"SCONST",
	"BCONST",
	"ICONST",
	"PARAM",
	"TYPECAST",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXPLAIN",
	"EXTRACT",
	"FALSE",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FOLLOWING",
	"FOR",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HOUR",
	"IF",
	"IFNULL",
	"IN",
	"INDEX",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"LATERAL",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARTIAL",
	"PARTITION",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PRIMARY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"RENAME",
	"REPEATABLE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SNAPSHOT",
	"SOME",
	"SQL",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"TABLE",
	"TABLES",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"USER",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlMaxDepth = 200

//line sql.y:3660

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 19,
	263, 19,
	-2, 290,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 29,
	1, 261,
	151, 261,
	261, 261,
	263, 261,
	-2, 271,
	-1, 38,
	1, 264,
	151, 264,
	261, 264,
	263, 264,
	-2, 270,
	-1, 47,
	1, 19,
	263, 19,
	-2, 290,
	-1, 83,
	1, 128,
	263, 128,
	-2, 762,
	-1, 234,
	129, 300,
	150, 300,
	-2, 267,
	-1, 237,
	129, 299,
	150, 299,
	-2, 265,
	-1, 339,
	129, 299,
	150, 299,
	-2, 268,
	-1, 397,
	260, 712,
	-2, 707,
	-1, 398,
	260, 713,
	-2, 708,
	-1, 404,
	6, 418,
	260, 418,
	-2, 835,
	-1, 426,
	6, 388,
	-2, 814,
	-1, 427,
	6, 415,
	260, 415,
	-2, 815,
	-1, 428,
	6, 396,
	-2, 816,
	-1, 429,
	6, 395,
	-2, 817,
	-1, 430,
	6, 415,
	260, 415,
	-2, 819,
	-1, 431,
	6, 415,
	260, 415,
	-2, 820,
	-1, 432,
	6, 416,
	-2, 822,
	-1, 433,
	6, 383,
	-2, 823,
	-1, 434,
	6, 383,
	-2, 824,
	-1, 435,
	6, 398,
	-2, 827,
	-1, 436,
	6, 384,
	-2, 832,
	-1, 437,
	6, 385,
	-2, 833,
	-1, 438,
	6, 386,
	-2, 834,
	-1, 439,
	6, 383,
	-2, 838,
	-1, 440,
	6, 389,
	-2, 843,
	-1, 441,
	6, 387,
	-2, 845,
	-1, 442,
	6, 417,
	-2, 849,
	-1, 443,
	6, 413,
	260, 413,
	-2, 853,
	-1, 687,
	85, 271,
	116, 271,
	129, 271,
	150, 271,
	154, 271,
	220, 271,
	-2, 523,
	-1, 695,
	260, 692,
	-2, 686,
	-1, 879,
	12, 0,
	13, 0,
	14, 0,
	243, 0,
	244, 0,
	245, 0,
	-2, 451,
	-1, 880,
	12, 0,
	13, 0,
	14, 0,
	243, 0,
	244, 0,
	245, 0,
	-2, 452,
	-1, 881,
	12, 0,
	13, 0,
	14, 0,
	243, 0,
	244, 0,
	245, 0,
	-2, 453,
	-1, 885,
	12, 0,
	13, 0,
	14, 0,
	243, 0,
	244, 0,
	245, 0,
	-2, 457,
	-1, 886,
	12, 0,
	13, 0,
	14, 0,
	243, 0,
	244, 0,
	245, 0,
	-2, 458,
	-1, 887,
	12, 0,
	13, 0,
	14, 0,
	243, 0,
	244, 0,
	245, 0,
	-2, 459,
	-1, 890,
	30, 0,
	108, 0,
	128, 0,
	193, 0,
	241, 0,
	-2, 464,
	-1, 925,
	159, 591,
	-2, 594,
	-1, 1070,
	85, 271,
	116, 271,
	129, 271,
	150, 271,
	154, 271,
	220, 271,
	-2, 341,
	-1, 1078,
	30, 0,
	108, 0,
	128, 0,
	193, 0,
	241, 0,
	-2, 465,
	-1, 1083,
	30, 0,
	108, 0,
	128, 0,
	193, 0,
	241, 0,
	-2, 466,
	-1, 1104,
	159, 590,
	-2, 593,
	-1, 1242,
	30, 0,
	108, 0,
	128, 0,
	193, 0,
	241, 0,
	-2, 467,
	-1, 1247,
	119, 0,
	-2, 477,
	-1, 1257,
	159, 592,
	-2, 595,
	-1, 1297,
	12, 0,
	13, 0,
	14, 0,
	243, 0,
	244, 0,
	245, 0,
	-2, 504,
	-1, 1298,
	12, 0,
	13, 0,
	14, 0,
	243, 0,
	244, 0,
	245, 0,
	-2, 505,
	-1, 1299,
	12, 0,
	13, 0,
	14, 0,
	243, 0,
	244, 0,
	245, 0,
	-2, 506,
	-1, 1303,
	12, 0,
	13, 0,
	14, 0,
	243, 0,
	244, 0,
	245, 0,
	-2, 510,
	-1, 1304,
	12, 0,
	13, 0,
	14, 0,
	243, 0,
	244, 0,
	245, 0,
	-2, 511,
	-1, 1305,
	12, 0,
	13, 0,
	14, 0,
	243, 0,
	244, 0,
	245, 0,
	-2, 512,
	-1, 1398,
	119, 0,
	-2, 478,
	-1, 1402,
	30, 0,
	108, 0,
	128, 0,
	193, 0,
	241, 0,
	-2, 481,
	-1, 1403,
	30, 0,
	108, 0,
	128, 0,
	193, 0,
	241, 0,
	-2, 483,
	-1, 1483,
	30, 0,
	108, 0,
	128, 0,
	193, 0,
	241, 0,
	-2, 482,
	-1, 1484,
	30, 0,
	108, 0,
	128, 0,
	193, 0,
	241, 0,
	-2, 484,
	-1, 1492,
	119, 0,
	-2, 513,
	-1, 1529,
	119, 0,
	-2, 514,
	-1, 1574,
	30, 0,
	128, 0,
	193, 0,
	241, 0,
	-2, 813,
}

const sqlNprod = 945
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 18246

var sqlAct = [...]int{

	922, 1573, 1556, 1440, 1594, 1534, 1557, 771, 1558, 1500,
	1572, 1277, 1465, 820, 1473, 1370, 807, 1384, 238, 1335,
	1378, 1369, 1162, 1066, 804, 265, 1222, 764, 84, 1161,
	396, 690, 456, 395, 1249, 1248, 828, 1107, 243, 28,
	692, 806, 1058, 622, 938, 1231, 388, 13, 750, 461,
	446, 741, 772, 1054, 642, 942, 975, 906, 719, 903,
	723, 831, 932, 482, 28, 1069, 245, 37, 638, 500,
	801, 644, 88, 59, 18, 10, 6, 237, 464, 466,
	360, 492, 369, 444, 282, 284, 28, 527, 511, 286,
	809, 248, 37, 57, 38, 342, 341, 371, 81, 343,
	61, 60, 62, 39, 491, 498, 829, 19, 502, 66,
	275, 484, 242, 1467, 37, 459, 978, 32, 353, 457,
	459, 769, 458, 242, 457, 484, 765, 458, 645, 935,
	1570, 290, 235, 1464, 645, 1102, 1564, 279, 33, 824,
	1103, 234, 291, 262, 36, 1101, 262, 287, 271, 1100,
	1100, 262, 261, 281, 1563, 268, 1026, 824, 1555, 1550,
	276, 1401, 824, 936, 1531, 1522, 1310, 1401, 390, 24,
	1525, 1513, 1256, 824, 824, 25, 1510, 1485, 1480, 1464,
	1401, 824, 1463, 1460, 1038, 1464, 824, 26, 1445, 739,
	1056, 824, 445, 937, 934, 1444, 1425, 1405, 824, 1100,
	1100, 1400, 1345, 1252, 1401, 824, 1100, 1212, 1208, 1179,
	483, 483, 1180, 1177, 1176, 403, 1100, 1100, 1175, 1040,
	1104, 1100, 1106, 1100, 825, 824, 483, 824, 1134, 43,
	1150, 1151, 1152, 1100, 43, 738, 489, 647, 737, 490,
	1397, 487, 918, 819, 939, 448, 45, 794, 485, 646,
	354, 45, 307, 340, 447, 649, 260, 361, 361, 334,
	47, 526, 485, 321, 647, 1571, 27, 462, 34, 1569,
	1147, 46, 339, 648, 400, 43, 46, 1526, 41, 30,
	31, 43, 649, 41, 42, 1462, 451, 1430, 1426, 42,
	1418, 1417, 45, 1412, 1411, 1026, 455, 933, 45, 1410,
	648, 646, 40, 1362, 35, 1409, 1395, 768, 1042, 1325,
	1320, 1319, 1318, 1260, 1237, 1221, 1213, 46, 1076, 1393,
	1182, 1181, 1169, 46, 41, 459, 262, 1160, 798, 457,
	42, 1133, 458, 698, 1130, 333, 483, 1153, 1128, 1117,
	235, 1111, 1039, 990, 353, 630, 632, 1501, 40, 234,
	619, 1148, 639, 915, 40, 1482, 352, 1279, 1521, 43,
	663, 453, 1502, 1494, 1134, 680, 681, 682, 683, 684,
	1476, 262, 477, 1470, 1459, 688, 45, 1437, 1423, 1389,
	276, 1367, 1246, 1236, 475, 1219, 290, 290, 1134, 1218,
	1150, 1151, 1152, 1134, 530, 701, 618, 291, 291, 1216,
	1396, 46, 1149, 1194, 281, 531, 281, 1193, 41, 1159,
	1125, 664, 1361, 496, 42, 695, 1124, 495, 1116, 1097,
	515, 611, 281, 1096, 615, 522, 616, 1091, 908, 614,
	1147, 916, 58, 724, 727, 1004, 1003, 626, 985, 628,
	947, 235, 627, 823, 235, 235, 640, 729, 717, 716,
	634, 715, 714, 635, 636, 713, 712, 711, 710, 1004,
	736, 1144, 1145, 1146, 709, 1143, 1140, 1141, 1142, 1135,
	1136, 1137, 1138, 1139, 658, 655, 656, 657, 650, 651,
	652, 653, 654, 708, 744, 521, 707, 1148, 732, 721,
	722, 689, 706, 705, 696, 725, 647, 1153, 694, 40,
	728, 620, 266, 357, 1481, 650, 651, 652, 653, 654,
	1134, 1148, 359, 693, 649, 28, 781, 284, 1239, 1238,
	755, 757, 730, 452, 767, 1364, 315, 1027, 28, 1077,
	530, 530, 648, 935, 246, 346, 328, 59, 1149, 316,
	703, 531, 531, 1379, 765, 733, 735, 1280, 1120, 787,
	943, 720, 731, 1023, 1540, 311, 37, 51, 747, 1583,
	1509, 1033, 1149, 290, 61, 60, 62, 936, 780, 262,
	1392, 1584, 763, 782, 291, 786, 775, 255, 760, 287,
	784, 779, 799, 783, 281, 1353, 1134, 699, 225, 232,
	1453, 281, 1452, 52, 743, 1206, 1186, 937, 934, 530,
	1205, 1143, 1140, 1141, 1142, 1135, 1136, 1137, 1138, 1139,
	531, 467, 743, 468, 800, 1185, 1115, 1114, 742, 1113,
	1112, 1144, 1145, 1146, 1079, 1143, 1140, 1141, 1142, 1135,
	1136, 1137, 1138, 1139, 1135, 1136, 1137, 1138, 1139, 313,
	1508, 1134, 895, 467, 785, 468, 762, 361, 939, 761,
	869, 870, 871, 872, 873, 874, 875, 876, 877, 878,
	879, 880, 881, 882, 883, 884, 885, 886, 887, 888,
	889, 890, 826, 905, 314, 469, 229, 868, 54, 520,
	508, 519, 834, 513, 905, 1560, 961, 1542, 478, 1442,
	939, 912, 1018, 1269, 1134, 467, 910, 468, 859, 943,
	751, 933, 241, 473, 53, 1552, 948, 469, 959, 1148,
	969, 971, 976, 979, 980, 981, 1591, 262, 1583, 55,
	1553, 49, 1503, 732, 472, 230, 803, 833, 732, 1032,
	817, 818, 1034, 240, 923, 1196, 1147, 1590, 462, 652,
	653, 654, 233, 262, 939, 718, 1490, 398, 1561, 523,
	530, 685, 754, 1137, 1138, 1139, 1203, 1123, 989, 469,
	1149, 531, 50, 999, 1148, 913, 1019, 363, 914, 1232,
	450, 242, 484, 242, 740, 951, 349, 350, 87, 1559,
	331, 1562, 355, 1001, 1582, 1421, 1580, 993, 1377, 87,
	87, 1021, 525, 87, 345, 1134, 87, 87, 87, 859,
	1015, 87, 87, 87, 87, 524, 289, 1447, 1589, 813,
	919, 924, 324, 927, 56, 1149, 840, 1148, 308, 994,
	639, 470, 306, 753, 87, 87, 970, 1135, 1136, 1137,
	1138, 1139, 982, 983, 984, 1443, 1446, 239, 995, 1014,
	858, 1043, 954, 1025, 1029, 1197, 1435, 1349, 1188, 1081,
	1022, 344, 465, 470, 1041, 1422, 1030, 48, 1028, 1031,
	904, 1036, 28, 839, 1035, 998, 281, 290, 1149, 1072,
	911, 1049, 345, 814, 281, 1597, 955, 752, 291, 1140,
	1141, 1142, 1135, 1136, 1137, 1138, 1139, 893, 1047, 625,
	37, 1306, 1078, 861, 1071, 1065, 1083, 1352, 1051, 1050,
	1052, 1604, 860, 1075, 1351, 470, 956, 953, 621, 485,
	344, 1044, 1265, 1535, 725, 1348, 728, 840, 1148, 1099,
	1266, 64, 836, 617, 722, 721, 514, 509, 497, 1108,
	262, 1143, 1140, 1141, 1142, 1135, 1136, 1137, 1138, 1139,
	1436, 858, 1006, 790, 1121, 647, 1105, 1005, 1126, 791,
	1267, 312, 1082, 1080, 1387, 1307, 1227, 957, 1226, 67,
	329, 1308, 793, 649, 839, 894, 274, 688, 240, 1149,
	792, 1603, 1350, 976, 976, 976, 87, 1595, 87, 72,
	87, 648, 336, 1223, 68, 891, 1055, 946, 1493, 1341,
	1420, 1336, 1163, 1184, 861, 87, 1245, 1119, 1129, 1334,
	1164, 939, 69, 860, 1191, 1090, 788, 645, 327, 325,
	952, 87, 1596, 322, 273, 71, 704, 613, 945, 1342,
	1332, 87, 87, 836, 87, 1094, 1201, 1598, 462, 1166,
	1167, 1168, 1199, 1098, 1187, 1142, 1135, 1136, 1137, 1138,
	1139, 1045, 815, 1183, 812, 488, 1109, 1110, 486, 481,
	892, 1190, 474, 1209, 87, 471, 87, 1274, 1454, 1192,
	347, 289, 289, 258, 821, 1584, 318, 1204, 663, 529,
	87, 75, 87, 87, 1200, 87, 1202, 1211, 1241, 1210,
	1242, 901, 1215, 1158, 87, 517, 1217, 1337, 1456, 1338,
	70, 1247, 899, 1225, 1171, 759, 1228, 1253, 743, 1207,
	743, 1258, 87, 1229, 758, 87, 756, 1258, 1233, 1234,
	647, 1467, 1340, 633, 647, 822, 1505, 1528, 1343, 664,
	348, 1275, 3, 259, 775, 1224, 73, 1262, 1263, 1264,
	1284, 351, 649, 1286, 319, 1523, 770, 641, 1074, 63,
	1601, 1602, 859, 1134, 1259, 897, 648, 896, 309, 310,
	648, 902, 67, 647, 262, 1394, 1326, 262, 1268, 1270,
	1271, 1285, 1283, 1281, 1315, 1316, 1339, 74, 795, 1287,
	267, 796, 72, 1322, 1323, 1324, 1057, 68, 859, 1272,
	1240, 1178, 1037, 988, 1313, 859, 650, 651, 652, 653,
	654, 987, 1314, 986, 940, 69, 797, 228, 224, 1407,
	1317, 1365, 87, 1273, 1331, 529, 529, 697, 71, 1441,
	1327, 65, 612, 323, 1254, 87, 859, 1061, 898, 87,
	1414, 1551, 87, 1122, 1380, 900, 87, 1489, 87, 87,
	1064, 87, 226, 227, 87, 87, 87, 1472, 289, 944,
	1059, 87, 87, 1368, 702, 1062, 1398, 28, 1346, 1347,
	1375, 1402, 1403, 1374, 23, 1341, 1363, 1406, 1060, 1372,
	840, 1391, 1408, 1382, 1383, 376, 1376, 1388, 1333, 1088,
	1386, 1366, 1189, 808, 529, 532, 1311, 1413, 518, 507,
	1086, 1416, 1399, 70, 858, 1342, 399, 1321, 326, 501,
	510, 1390, 950, 449, 401, 837, 840, 859, 1063, 402,
	838, 1356, 726, 840, 389, 835, 285, 839, 1419, 773,
	1061, 1424, 909, 941, 1118, 700, 375, 381, 380, 73,
	858, 920, 372, 1064, 262, 262, 79, 858, 262, 80,
	1020, 1360, 766, 1230, 840, 1084, 816, 861, 1062, 1089,
	629, 1381, 1198, 839, 1385, 231, 860, 1131, 1431, 1432,
	839, 968, 1448, 1337, 960, 1338, 958, 332, 858, 460,
	774, 87, 358, 320, 949, 1434, 836, 87, 87, 827,
	1073, 356, 637, 861, 1469, 257, 256, 805, 1340, 317,
	861, 839, 860, 1455, 1343, 1468, 789, 1477, 1449, 860,
	1457, 1063, 1375, 87, 679, 1374, 87, 1483, 1484, 476,
	383, 1475, 836, 1466, 859, 676, 1085, 330, 1376, 836,
	1504, 861, 1539, 1087, 1195, 840, 44, 17, 1450, 1451,
	860, 16, 1461, 15, 1478, 529, 14, 1488, 1497, 12,
	11, 85, 1339, 1048, 9, 8, 1486, 7, 1499, 858,
	836, 1439, 249, 249, 1479, 22, 264, 21, 20, 264,
	270, 264, 859, 1498, 264, 277, 264, 85, 5, 1495,
	462, 4, 839, 2, 1512, 1, 0, 1514, 0, 0,
	0, 0, 0, 0, 859, 1471, 962, 85, 85, 1516,
	1515, 0, 1518, 0, 0, 262, 0, 0, 87, 87,
	87, 0, 861, 0, 87, 1375, 1517, 87, 1374, 732,
	0, 860, 0, 87, 87, 87, 87, 87, 1527, 87,
	87, 1376, 0, 0, 0, 0, 87, 1544, 87, 0,
	0, 836, 840, 0, 87, 0, 0, 0, 0, 0,
	1530, 1524, 1545, 87, 1541, 1549, 87, 1548, 1543, 1546,
	0, 1566, 289, 1547, 0, 859, 858, 0, 1565, 0,
	1567, 0, 1375, 1577, 1577, 1374, 1536, 1537, 87, 1568,
	87, 87, 0, 87, 1578, 1581, 1579, 0, 1376, 839,
	840, 1585, 87, 1057, 1587, 1577, 1588, 87, 87, 0,
	87, 0, 0, 0, 0, 0, 0, 1520, 1600, 1599,
	1092, 1093, 840, 0, 858, 1586, 0, 0, 0, 861,
	0, 1538, 1577, 1605, 0, 0, 0, 0, 860, 0,
	0, 0, 0, 0, 1061, 0, 858, 839, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1064, 836, 264,
	0, 85, 0, 337, 0, 0, 0, 1059, 0, 839,
	775, 0, 1062, 0, 0, 1554, 0, 861, 249, 0,
	1155, 1156, 1157, 0, 0, 1060, 860, 0, 0, 0,
	0, 0, 0, 840, 264, 0, 0, 0, 0, 861,
	0, 962, 962, 0, 264, 264, 836, 479, 860, 0,
	0, 0, 214, 0, 0, 0, 0, 858, 0, 0,
	0, 0, 0, 0, 0, 1063, 223, 0, 836, 0,
	0, 0, 0, 0, 0, 0, 0, 264, 0, 264,
	839, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 85, 0, 264, 85, 216, 85, 0,
	0, 962, 962, 962, 0, 0, 0, 624, 0, 0,
	861, 0, 0, 0, 0, 0, 215, 217, 0, 860,
	0, 0, 87, 647, 0, 249, 0, 0, 643, 0,
	0, 0, 647, 0, 0, 0, 0, 1243, 1244, 836,
	0, 649, 0, 0, 87, 0, 0, 0, 218, 0,
	649, 0, 0, 0, 0, 0, 87, 219, 87, 648,
	87, 0, 0, 87, 0, 662, 0, 0, 648, 0,
	0, 0, 0, 0, 87, 0, 0, 87, 0, 0,
	0, 0, 0, 0, 0, 87, 0, 0, 87, 0,
	0, 0, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295,
	1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305,
	0, 1309, 0, 0, 0, 0, 0, 0, 962, 962,
	0, 0, 0, 0, 0, 264, 0, 0, 0, 1134,
	0, 1150, 1151, 1152, 0, 0, 0, 0, 748, 0,
	0, 87, 264, 0, 0, 264, 663, 0, 0, 264,
	0, 777, 778, 220, 264, 663, 221, 264, 85, 85,
	222, 0, 0, 0, 264, 643, 0, 0, 0, 0,
	0, 1147, 0, 962, 962, 962, 962, 962, 962, 962,
	962, 962, 962, 962, 962, 962, 962, 962, 962, 962,
	962, 0, 962, 0, 0, 0, 0, 664, 0, 0,
	0, 0, 0, 87, 87, 87, 664, 0, 0, 0,
	0, 87, 87, 0, 0, 0, 0, 87, 0, 87,
	0, 87, 87, 87, 87, 0, 0, 1154, 0, 0,
	0, 0, 0, 0, 87, 0, 87, 0, 1153, 0,
	0, 0, 0, 0, 87, 87, 0, 0, 87, 0,
	0, 0, 1148, 0, 87, 87, 0, 0, 0, 0,
	658, 655, 656, 657, 650, 651, 652, 653, 654, 0,
	377, 29, 657, 650, 651, 652, 653, 654, 0, 0,
	0, 0, 0, 0, 802, 0, 0, 0, 0, 0,
	264, 748, 0, 0, 0, 0, 29, 87, 0, 1438,
	0, 0, 0, 1149, 0, 0, 0, 0, 236, 0,
	0, 244, 0, 647, 0, 0, 264, 0, 29, 85,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 244,
	0, 649, 0, 0, 0, 0, 0, 0, 0, 647,
	0, 665, 666, 667, 0, 0, 0, 0, 0, 648,
	87, 668, 87, 0, 87, 0, 0, 649, 0, 674,
	0, 87, 1144, 1145, 1146, 0, 1143, 1140, 1141, 1142,
	1135, 1136, 1137, 1138, 1139, 648, 0, 1492, 0, 0,
	962, 662, 0, 0, 0, 87, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 87, 0, 87, 0, 0,
	0, 0, 0, 0, 0, 87, 0, 87, 0, 0,
	0, 264, 996, 997, 0, 0, 0, 748, 0, 0,
	1002, 0, 0, 0, 0, 0, 1007, 1008, 1010, 1012,
	1013, 0, 1016, 1017, 0, 0, 663, 675, 0, 264,
	0, 1024, 0, 0, 0, 0, 0, 264, 673, 0,
	1529, 0, 0, 0, 0, 0, 802, 670, 962, 802,
	0, 0, 663, 0, 0, 0, 0, 0, 0, 0,
	87, 87, 0, 0, 87, 0, 0, 0, 0, 0,
	0, 624, 669, 85, 264, 87, 1046, 664, 0, 0,
	0, 0, 0, 0, 87, 1053, 0, 0, 0, 0,
	1068, 1068, 0, 264, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 664, 0, 0, 236, 0, 0, 87,
	87, 87, 672, 87, 0, 0, 0, 0, 0, 0,
	0, 962, 0, 0, 0, 0, 0, 0, 0, 0,
	87, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 655, 656, 657, 650, 651, 652, 653, 654, 0,
	87, 0, 0, 1134, 0, 1150, 1151, 1152, 0, 0,
	671, 0, 659, 660, 661, 1251, 658, 655, 656, 657,
	650, 651, 652, 653, 654, 0, 0, 0, 991, 647,
	0, 665, 666, 667, 0, 992, 0, 0, 0, 0,
	0, 668, 0, 0, 0, 1147, 0, 649, 0, 674,
	0, 0, 0, 0, 0, 0, 0, 236, 0, 0,
	236, 236, 0, 0, 0, 648, 0, 0, 0, 0,
	0, 662, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 686, 0, 0, 0, 687, 0, 0, 0, 691,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1153, 0, 0, 643, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1148, 675, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 264, 673, 0,
	0, 0, 0, 0, 0, 0, 0, 670, 0, 1214,
	0, 748, 663, 624, 0, 0, 1220, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 264, 0, 0,
	264, 1134, 669, 1150, 1151, 1152, 0, 1149, 1235, 0,
	0, 1068, 0, 1250, 0, 0, 0, 29, 0, 0,
	647, 0, 665, 666, 667, 0, 0, 0, 0, 0,
	29, 0, 668, 664, 0, 0, 0, 0, 649, 0,
	674, 0, 672, 1147, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 648, 0, 0, 0,
	0, 0, 662, 0, 1278, 0, 1144, 1145, 1146, 0,
	1143, 1140, 1141, 1142, 1135, 1136, 1137, 1138, 1139, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	671, 0, 659, 660, 661, 0, 658, 655, 656, 657,
	650, 651, 652, 653, 654, 0, 0, 0, 0, 0,
	1153, 0, 0, 1427, 0, 0, 0, 0, 675, 0,
	0, 0, 0, 0, 1148, 0, 1329, 1330, 748, 673,
	0, 0, 0, 0, 643, 643, 0, 0, 670, 0,
	1354, 0, 1355, 663, 264, 1357, 1358, 1359, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 643, 0, 748,
	1371, 0, 0, 669, 0, 0, 0, 264, 264, 0,
	0, 264, 0, 0, 0, 1149, 0, 643, 1068, 0,
	0, 0, 0, 0, 0, 0, 830, 0, 0, 0,
	0, 0, 0, 0, 664, 0, 0, 0, 0, 0,
	0, 0, 0, 672, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 907, 0, 0, 0,
	1415, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1144, 1145, 1146, 0, 1143, 1140,
	1141, 1142, 1135, 1136, 1137, 1138, 1139, 0, 0, 0,
	0, 671, 0, 659, 660, 661, 0, 658, 655, 656,
	657, 650, 651, 652, 653, 654, 0, 0, 0, 0,
	0, 0, 0, 748, 1174, 1433, 0, 85, 0, 0,
	0, 0, 0, 647, 264, 665, 666, 667, 0, 0,
	0, 0, 0, 0, 0, 668, 0, 0, 0, 0,
	0, 649, 1371, 674, 0, 0, 0, 0, 643, 244,
	0, 647, 0, 665, 666, 667, 0, 0, 264, 648,
	1474, 0, 0, 668, 0, 662, 0, 0, 264, 649,
	643, 674, 0, 0, 0, 0, 1134, 0, 1150, 1151,
	1152, 0, 0, 0, 0, 0, 0, 648, 0, 0,
	0, 0, 0, 662, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 29, 0, 0, 0, 0, 0,
	0, 0, 0, 1070, 0, 0, 0, 0, 1147, 0,
	0, 675, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 673, 1506, 1507, 0, 0, 1511, 0, 0,
	0, 670, 0, 0, 0, 1371, 663, 0, 85, 675,
	0, 0, 0, 0, 0, 0, 0, 643, 0, 0,
	673, 0, 0, 0, 0, 0, 669, 0, 0, 670,
	0, 0, 0, 0, 663, 907, 0, 0, 0, 0,
	0, 0, 643, 643, 264, 1153, 85, 0, 0, 687,
	1095, 0, 0, 0, 669, 0, 0, 664, 0, 1148,
	0, 0, 1371, 1474, 0, 0, 672, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 264, 0, 664, 0, 0, 0, 0,
	0, 0, 0, 0, 672, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 687, 0, 0,
	1149, 0, 0, 0, 671, 0, 659, 660, 661, 0,
	658, 655, 656, 657, 650, 651, 652, 653, 654, 0,
	0, 0, 0, 0, 0, 0, 0, 1173, 0, 0,
	0, 0, 671, 0, 659, 660, 661, 0, 658, 655,
	656, 657, 650, 651, 652, 653, 654, 0, 0, 0,
	0, 0, 0, 0, 0, 1172, 0, 0, 0, 1144,
	1145, 1146, 0, 1143, 1140, 1141, 1142, 1135, 1136, 1137,
	1138, 1139, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 830, 0, 0,
	830, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 397, 385, 386, 387, 384, 373, 0, 0, 0,
	0, 0, 0, 89, 90, 929, 91, 687, 0, 0,
	0, 379, 0, 0, 0, 92, 93, 174, 426, 427,
	94, 428, 429, 0, 95, 179, 96, 394, 412, 430,
	431, 0, 422, 0, 405, 0, 97, 98, 99, 0,
	100, 0, 101, 0, 294, 102, 103, 0, 406, 408,
	0, 407, 409, 104, 105, 106, 107, 432, 108, 433,
	434, 0, 0, 109, 0, 930, 0, 425, 111, 0,
	0, 0, 0, 378, 112, 413, 392, 0, 113, 114,
	435, 115, 0, 0, 0, 295, 0, 116, 423, 0,
	190, 0, 117, 419, 421, 0, 0, 0, 296, 118,
	436, 437, 438, 0, 404, 0, 297, 119, 298, 120,
	0, 0, 424, 299, 121, 300, 0, 250, 0, 29,
	0, 122, 123, 124, 125, 251, 301, 126, 127, 367,
	128, 393, 420, 129, 439, 130, 131, 830, 830, 0,
	0, 830, 132, 200, 302, 133, 303, 414, 134, 135,
	0, 415, 136, 203, 0, 137, 138, 440, 139, 140,
	0, 141, 142, 143, 0, 144, 304, 145, 146, 382,
	147, 0, 148, 149, 0, 150, 252, 410, 151, 152,
	305, 153, 441, 154, 0, 155, 157, 207, 156, 416,
	0, 0, 158, 159, 0, 254, 442, 0, 0, 253,
	417, 418, 391, 160, 161, 162, 163, 0, 370, 164,
	165, 411, 0, 166, 167, 168, 212, 443, 928, 169,
	0, 0, 0, 0, 170, 171, 172, 173, 368, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 364, 365,
	931, 0, 0, 0, 366, 0, 0, 374, 926, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1458, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	528, 0, 0, 0, 0, 0, 0, 0, 830, 0,
	0, 0, 89, 90, 533, 91, 534, 535, 536, 537,
	538, 539, 540, 541, 92, 93, 174, 175, 176, 94,
	177, 178, 542, 95, 179, 96, 543, 544, 180, 181,
	545, 182, 546, 293, 547, 97, 98, 99, 0, 100,
	548, 101, 549, 294, 102, 103, 550, 551, 552, 553,
	554, 555, 104, 105, 106, 107, 183, 108, 184, 185,
	556, 557, 109, 558, 559, 560, 110, 111, 561, 562,
	687, 563, 186, 112, 187, 564, 565, 113, 114, 188,
	115, 566, 567, 568, 295, 569, 116, 189, 570, 190,
	571, 117, 191, 192, 572, 573, 574, 296, 118, 193,
	194, 195, 575, 196, 576, 297, 119, 298, 120, 577,
	578, 197, 299, 121, 300, 579, 250, 580, 581, 0,
	122, 123, 124, 125, 251, 301, 126, 127, 582, 128,
	583, 198, 129, 199, 130, 131, 584, 585, 586, 587,
	588, 132, 200, 302, 133, 303, 201, 134, 135, 589,
	202, 136, 203, 590, 137, 138, 204, 139, 140, 591,
	141, 142, 143, 592, 144, 304, 145, 146, 205, 147,
	0, 148, 149, 593, 150, 252, 594, 151, 152, 305,
	153, 206, 154, 595, 155, 157, 207, 156, 208, 596,
	597, 158, 159, 598, 254, 209, 599, 600, 253, 210,
	211, 601, 160, 161, 162, 163, 602, 603, 164, 165,
	604, 605, 166, 167, 168, 212, 213, 606, 169, 607,
	608, 609, 610, 170, 171, 172, 173, 0, 528, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 734,
	89, 90, 533, 91, 534, 535, 536, 537, 538, 539,
	540, 541, 92, 93, 174, 175, 176, 94, 177, 178,
	542, 95, 179, 96, 543, 544, 180, 181, 545, 182,
	546, 293, 547, 97, 98, 99, 0, 100, 548, 101,
	549, 294, 102, 103, 550, 551, 552, 553, 554, 555,
	104, 105, 106, 107, 183, 108, 184, 185, 556, 557,
	109, 558, 559, 560, 110, 111, 561, 562, 0, 563,
	186, 112, 187, 564, 565, 113, 114, 188, 115, 566,
	567, 568, 295, 569, 116, 189, 570, 190, 571, 117,
	191, 192, 572, 573, 574, 296, 118, 193, 194, 195,
	575, 196, 576, 297, 119, 298, 120, 577, 578, 197,
	299, 121, 300, 579, 250, 580, 581, 0, 122, 123,
	124, 125, 251, 301, 126, 127, 582, 128, 583, 198,
	129, 199, 130, 131, 584, 585, 586, 587, 588, 132,
	200, 302, 133, 303, 201, 134, 135, 589, 202, 136,
	203, 590, 137, 138, 204, 139, 140, 591, 141, 142,
	143, 592, 144, 304, 145, 146, 205, 147, 0, 148,
	149, 593, 150, 252, 594, 151, 152, 305, 153, 206,
	154, 595, 155, 157, 207, 156, 208, 596, 597, 158,
	159, 598, 254, 209, 599, 600, 253, 210, 211, 601,
	160, 161, 162, 163, 602, 603, 164, 165, 604, 605,
	166, 167, 168, 212, 213, 606, 169, 607, 608, 609,
	610, 170, 171, 172, 173, 397, 385, 386, 387, 384,
	373, 0, 0, 0, 0, 0, 0, 89, 90, 0,
	91, 0, 0, 0, 0, 379, 0, 0, 0, 92,
	93, 174, 426, 427, 94, 428, 429, 0, 95, 179,
	96, 394, 412, 430, 431, 0, 422, 0, 405, 0,
	97, 98, 99, 0, 100, 0, 101, 0, 294, 102,
	103, 0, 406, 408, 0, 407, 409, 104, 105, 106,
	107, 432, 108, 433, 434, 463, 0, 109, 0, 0,
	0, 425, 111, 0, 0, 0, 0, 378, 112, 413,
	392, 0, 113, 114, 435, 115, 0, 0, 0, 295,
	0, 116, 423, 0, 190, 0, 117, 419, 421, 0,
	0, 0, 296, 118, 436, 437, 438, 0, 404, 0,
	297, 119, 298, 120, 0, 0, 424, 299, 121, 300,
	0, 250, 0, 0, 0, 122, 123, 124, 125, 251,
	301, 126, 127, 367, 128, 393, 420, 129, 439, 130,
	131, 0, 0, 0, 0, 0, 132, 200, 302, 133,
	303, 414, 134, 135, 0, 415, 136, 203, 0, 137,
	138, 440, 139, 140, 0, 141, 142, 143, 0, 144,
	304, 145, 146, 382, 147, 0, 148, 149, 43, 150,
	252, 410, 151, 152, 305, 153, 441, 154, 0, 155,
	157, 207, 156, 416, 0, 45, 158, 159, 0, 254,
	442, 0, 0, 253, 417, 418, 391, 160, 161, 162,
	163, 0, 370, 164, 165, 411, 0, 166, 167, 168,
	292, 443, 0, 169, 0, 0, 0, 41, 170, 171,
	172, 173, 368, 42, 397, 385, 386, 387, 384, 373,
	0, 0, 364, 365, 0, 0, 89, 90, 366, 91,
	0, 374, 0, 0, 379, 0, 0, 0, 92, 93,
	174, 426, 427, 94, 428, 429, 0, 95, 179, 96,
	394, 412, 430, 431, 0, 422, 0, 405, 0, 97,
	98, 99, 0, 100, 0, 101, 0, 294, 102, 103,
	0, 406, 408, 0, 407, 409, 104, 105, 106, 107,
	432, 108, 433, 434, 0, 0, 109, 0, 0, 0,
	425, 111, 0, 0, 0, 0, 378, 112, 413, 392,
	0, 113, 114, 435, 115, 0, 0, 0, 295, 0,
	116, 423, 0, 190, 0, 117, 419, 421, 0, 0,
	0, 296, 118, 436, 437, 438, 0, 404, 0, 297,
	119, 298, 120, 0, 0, 424, 299, 121, 300, 0,
	250, 0, 0, 0, 122, 123, 124, 125, 251, 301,
	126, 127, 367, 128, 393, 420, 129, 439, 130, 131,
	0, 0, 0, 0, 0, 132, 200, 302, 133, 303,
	414, 134, 135, 0, 415, 136, 203, 0, 137, 138,
	440, 139, 140, 0, 141, 142, 143, 0, 144, 304,
	145, 146, 382, 147, 0, 148, 149, 43, 150, 252,
	410, 151, 152, 305, 153, 441, 154, 0, 155, 157,
	207, 156, 416, 0, 45, 158, 159, 0, 254, 442,
	0, 0, 253, 417, 418, 391, 160, 161, 162, 163,
	0, 370, 164, 165, 411, 0, 166, 167, 168, 292,
	443, 0, 169, 0, 0, 0, 41, 170, 171, 172,
	173, 368, 42, 397, 385, 386, 387, 384, 373, 0,
	0, 364, 365, 0, 0, 89, 90, 366, 91, 0,
	374, 0, 0, 379, 0, 0, 0, 92, 93, 174,
	426, 427, 94, 428, 429, 972, 95, 179, 96, 394,
	412, 430, 431, 0, 422, 0, 405, 0, 97, 98,
	99, 0, 100, 0, 101, 0, 294, 102, 103, 0,
	406, 408, 0, 407, 409, 104, 105, 106, 107, 432,
	108, 433, 434, 0, 0, 109, 0, 0, 0, 425,
	111, 0, 0, 0, 0, 378, 112, 413, 392, 0,
	113, 114, 435, 115, 0, 0, 977, 295, 0, 116,
	423, 0, 190, 0, 117, 419, 421, 0, 0, 0,
	296, 118, 436, 437, 438, 0, 404, 0, 297, 119,
	298, 120, 0, 973, 424, 299, 121, 300, 0, 250,
	0, 0, 0, 122, 123, 124, 125, 251, 301, 126,
	127, 367, 128, 393, 420, 129, 439, 130, 131, 0,
	0, 0, 0, 0, 132, 200, 302, 133, 303, 414,
	134, 135, 0, 415, 136, 203, 0, 137, 138, 440,
	139, 140, 0, 141, 142, 143, 0, 144, 304, 145,
	146, 382, 147, 0, 148, 149, 0, 150, 252, 410,
	151, 152, 305, 153, 441, 154, 0, 155, 157, 207,
	156, 416, 0, 0, 158, 159, 0, 254, 442, 0,
	974, 253, 417, 418, 391, 160, 161, 162, 163, 0,
	370, 164, 165, 411, 0, 166, 167, 168, 212, 443,
	0, 169, 0, 0, 0, 0, 170, 171, 172, 173,
	368, 0, 397, 385, 386, 387, 384, 373, 0, 0,
	364, 365, 0, 0, 89, 90, 366, 91, 0, 374,
	0, 0, 379, 0, 0, 0, 92, 93, 174, 426,
	427, 94, 428, 429, 0, 95, 179, 96, 394, 412,
	430, 431, 0, 422, 0, 405, 0, 97, 98, 99,
	0, 100, 0, 101, 0, 294, 102, 103, 0, 406,
	408, 0, 407, 409, 104, 105, 106, 107, 432, 108,
	433, 434, 0, 0, 109, 0, 0, 0, 425, 111,
	0, 0, 0, 0, 378, 112, 413, 392, 0, 113,
	114, 435, 115, 0, 0, 0, 295, 0, 116, 423,
	0, 190, 0, 117, 419, 421, 0, 0, 0, 296,
	118, 436, 437, 438, 0, 404, 0, 297, 119, 298,
	120, 0, 0, 424, 299, 121, 300, 0, 250, 0,
	0, 0, 122, 123, 124, 125, 251, 301, 126, 127,
	367, 128, 393, 420, 129, 439, 130, 131, 0, 0,
	0, 0, 0, 132, 200, 302, 133, 303, 414, 134,
	135, 0, 415, 136, 203, 0, 137, 138, 440, 139,
	140, 0, 141, 142, 143, 0, 144, 304, 145, 146,
	382, 147, 0, 148, 149, 0, 150, 252, 410, 151,
	152, 305, 153, 441, 154, 0, 155, 157, 207, 156,
	416, 0, 0, 158, 159, 0, 254, 442, 0, 0,
	253, 417, 418, 391, 160, 161, 162, 163, 0, 370,
	164, 165, 411, 0, 166, 167, 168, 212, 443, 0,
	169, 0, 0, 0, 0, 170, 171, 172, 173, 368,
	0, 397, 385, 386, 387, 384, 373, 0, 0, 364,
	365, 0, 0, 89, 90, 366, 91, 0, 374, 1312,
	0, 379, 0, 0, 0, 92, 93, 174, 426, 427,
	94, 428, 429, 0, 95, 179, 96, 394, 412, 430,
	431, 0, 422, 0, 405, 0, 97, 98, 99, 0,
	100, 0, 101, 0, 294, 102, 103, 0, 406, 408,
	0, 407, 409, 104, 105, 106, 107, 432, 108, 433,
	434, 0, 0, 109, 0, 0, 0, 425, 111, 0,
	0, 0, 0, 378, 112, 413, 392, 0, 113, 114,
	435, 115, 0, 0, 0, 295, 0, 116, 423, 0,
	190, 0, 117, 419, 421, 0, 0, 0, 296, 118,
	436, 437, 438, 0, 404, 0, 297, 119, 298, 120,
	0, 0, 424, 299, 121, 300, 0, 250, 0, 0,
	0, 122, 123, 124, 125, 251, 301, 126, 127, 367,
	128, 393, 420, 129, 439, 130, 131, 0, 0, 0,
	0, 0, 132, 200, 302, 133, 303, 414, 134, 135,
	0, 415, 136, 203, 0, 137, 138, 440, 139, 140,
	0, 141, 142, 143, 0, 144, 304, 145, 146, 382,
	147, 0, 148, 149, 0, 150, 252, 410, 151, 152,
	305, 153, 441, 154, 0, 155, 157, 207, 156, 416,
	0, 0, 158, 159, 0, 254, 442, 0, 0, 253,
	417, 418, 391, 160, 161, 162, 163, 0, 370, 164,
	165, 411, 0, 166, 167, 168, 212, 443, 0, 169,
	0, 0, 0, 0, 170, 171, 172, 173, 368, 0,
	397, 385, 386, 387, 384, 373, 0, 0, 364, 365,
	0, 0, 89, 90, 366, 91, 0, 374, 1255, 0,
	379, 0, 0, 0, 92, 93, 174, 426, 427, 94,
	428, 429, 0, 95, 179, 96, 394, 412, 430, 431,
	0, 422, 0, 405, 0, 97, 98, 99, 0, 100,
	0, 101, 0, 294, 102, 103, 0, 406, 408, 0,
	407, 409, 104, 105, 106, 107, 432, 108, 433, 434,
	0, 0, 109, 0, 0, 0, 425, 111, 0, 0,
	0, 0, 378, 112, 413, 392, 0, 113, 114, 435,
	115, 0, 0, 0, 295, 0, 116, 423, 0, 190,
	0, 117, 419, 421, 0, 0, 0, 296, 118, 436,
	437, 438, 0, 404, 0, 297, 119, 298, 120, 0,
	0, 424, 299, 121, 300, 0, 250, 0, 0, 0,
	122, 123, 124, 125, 251, 301, 126, 127, 367, 128,
	393, 420, 129, 439, 130, 131, 0, 0, 0, 0,
	0, 132, 200, 302, 133, 303, 414, 134, 135, 0,
	415, 136, 203, 0, 137, 138, 440, 139, 140, 0,
	141, 142, 143, 0, 144, 304, 145, 146, 382, 147,
	0, 148, 149, 0, 150, 252, 410, 151, 152, 305,
	153, 441, 154, 0, 155, 157, 207, 156, 416, 0,
	0, 158, 159, 0, 254, 442, 0, 0, 253, 417,
	418, 391, 160, 161, 162, 163, 0, 370, 164, 165,
	411, 0, 166, 167, 168, 212, 443, 0, 169, 0,
	0, 0, 0, 170, 171, 172, 173, 368, 0, 397,
	385, 386, 387, 384, 373, 0, 0, 364, 365, 0,
	0, 89, 90, 366, 91, 0, 374, 925, 0, 379,
	0, 0, 0, 92, 93, 174, 426, 427, 94, 428,
	429, 0, 95, 179, 96, 394, 412, 430, 431, 0,
	422, 0, 405, 0, 97, 98, 99, 0, 100, 0,
	101, 0, 294, 102, 103, 0, 406, 408, 0, 407,
	409, 104, 105, 106, 107, 432, 108, 433, 434, 0,
	0, 109, 0, 0, 0, 425, 111, 0, 0, 0,
	0, 378, 112, 413, 392, 0, 113, 114, 435, 115,
	0, 0, 0, 295, 0, 116, 423, 0, 190, 0,
	117, 419, 421, 0, 0, 0, 296, 118, 436, 437,
	438, 0, 404, 0, 297, 119, 298, 120, 0, 0,
	424, 299, 121, 300, 0, 250, 0, 0, 0, 122,
	123, 124, 125, 251, 301, 126, 127, 367, 128, 393,
	420, 129, 439, 130, 131, 0, 0, 0, 0, 0,
	132, 200, 302, 133, 303, 414, 134, 135, 0, 415,
	136, 203, 0, 137, 138, 440, 139, 140, 0, 141,
	142, 143, 0, 144, 304, 145, 146, 382, 147, 0,
	148, 149, 0, 150, 252, 410, 151, 152, 305, 153,
	441, 154, 0, 155, 157, 207, 156, 416, 0, 0,
	158, 159, 0, 254, 442, 0, 0, 253, 417, 418,
	391, 160, 161, 162, 163, 0, 370, 164, 165, 411,
	0, 166, 167, 168, 212, 443, 0, 169, 0, 0,
	0, 0, 170, 171, 172, 173, 368, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 364, 365, 0, 0,
	0, 0, 366, 693, 921, 374, 397, 385, 386, 387,
	384, 373, 0, 0, 0, 0, 0, 0, 89, 90,
	0, 91, 0, 0, 0, 0, 379, 0, 0, 0,
	92, 93, 174, 426, 427, 94, 428, 429, 0, 95,
	179, 96, 394, 412, 430, 431, 0, 422, 0, 405,
	0, 97, 98, 99, 0, 100, 0, 101, 0, 294,
	102, 103, 0, 406, 408, 0, 407, 409, 104, 105,
	106, 107, 432, 108, 433, 434, 0, 0, 109, 0,
	0, 0, 425, 111, 0, 0, 0, 0, 378, 112,
	413, 392, 0, 113, 114, 435, 115, 0, 0, 0,
	295, 0, 116, 423, 0, 190, 0, 117, 419, 421,
	0, 0, 0, 296, 118, 436, 437, 438, 0, 404,
	0, 297, 119, 298, 120, 0, 0, 424, 299, 121,
	300, 0, 250, 0, 0, 0, 122, 123, 124, 125,
	251, 301, 126, 127, 367, 128, 393, 420, 129, 439,
	130, 131, 0, 0, 0, 0, 0, 132, 200, 302,
	133, 303, 414, 134, 135, 0, 415, 136, 203, 0,
	137, 138, 440, 139, 140, 0, 141, 142, 143, 0,
	144, 304, 145, 146, 382, 147, 0, 148, 149, 0,
	150, 252, 410, 151, 152, 305, 153, 441, 154, 0,
	155, 157, 207, 156, 416, 0, 0, 158, 159, 0,
	254, 442, 0, 0, 253, 417, 418, 391, 160, 161,
	162, 163, 0, 370, 164, 165, 411, 0, 166, 167,
	168, 212, 443, 1261, 169, 0, 0, 0, 0, 170,
	171, 172, 173, 368, 0, 397, 385, 386, 387, 384,
	373, 0, 0, 364, 365, 0, 0, 89, 90, 366,
	91, 0, 374, 0, 0, 379, 0, 0, 0, 92,
	93, 174, 426, 427, 94, 428, 429, 0, 95, 179,
	96, 394, 412, 430, 431, 0, 422, 0, 405, 0,
	97, 98, 99, 0, 100, 0, 101, 0, 294, 102,
	103, 0, 406, 408, 0, 407, 409, 104, 105, 106,
	107, 432, 108, 433, 434, 463, 0, 109, 0, 0,
	0, 425, 111, 0, 0, 0, 0, 378, 112, 413,
	392, 0, 113, 114, 435, 115, 0, 0, 0, 295,
	0, 116, 423, 0, 190, 0, 117, 419, 421, 0,
	0, 0, 296, 118, 436, 437, 438, 0, 404, 0,
	297, 119, 298, 120, 0, 0, 424, 299, 121, 300,
	0, 250, 0, 0, 0, 122, 123, 124, 125, 251,
	301, 126, 127, 367, 128, 393, 420, 129, 439, 130,
	131, 0, 0, 0, 0, 0, 132, 200, 302, 133,
	303, 414, 134, 135, 0, 415, 136, 203, 0, 137,
	138, 440, 139, 140, 0, 141, 142, 143, 0, 144,
	304, 145, 146, 382, 147, 0, 148, 149, 0, 150,
	252, 410, 151, 152, 305, 153, 441, 154, 0, 155,
	157, 207, 156, 416, 0, 0, 158, 159, 0, 254,
	442, 0, 0, 253, 417, 418, 391, 160, 161, 162,
	163, 0, 370, 164, 165, 411, 0, 166, 167, 168,
	212, 443, 0, 169, 0, 0, 0, 0, 170, 171,
	172, 173, 368, 0, 397, 385, 386, 387, 384, 373,
	0, 0, 364, 365, 0, 0, 89, 90, 366, 91,
	0, 374, 0, 0, 379, 0, 0, 0, 92, 93,
	174, 426, 427, 94, 428, 429, 0, 95, 179, 96,
	394, 412, 430, 431, 0, 422, 0, 405, 0, 97,
	98, 99, 0, 100, 0, 101, 0, 294, 102, 103,
	0, 406, 408, 0, 407, 409, 104, 105, 106, 107,
	432, 108, 433, 434, 0, 0, 109, 0, 0, 0,
	425, 111, 0, 0, 0, 0, 378, 112, 413, 392,
	0, 113, 114, 435, 115, 0, 0, 977, 295, 0,
	116, 423, 0, 190, 0, 117, 419, 421, 0, 0,
	0, 296, 118, 436, 437, 438, 0, 404, 0, 297,
	119, 298, 120, 0, 0, 424, 299, 121, 300, 0,
	250, 0, 0, 0, 122, 123, 124, 125, 251, 301,
	126, 127, 367, 128, 393, 420, 129, 439, 130, 131,
	0, 0, 0, 0, 0, 132, 200, 302, 133, 303,
	414, 134, 135, 0, 415, 136, 203, 0, 137, 138,
	440, 139, 140, 0, 141, 142, 143, 0, 144, 304,
	145, 146, 382, 147, 0, 148, 149, 0, 150, 252,
	410, 151, 152, 305, 153, 441, 154, 0, 155, 157,
	207, 156, 416, 0, 0, 158, 159, 0, 254, 442,
	0, 0, 253, 417, 418, 391, 160, 161, 162, 163,
	0, 370, 164, 165, 411, 0, 166, 167, 168, 212,
	443, 0, 169, 0, 0, 0, 0, 170, 171, 172,
	173, 368, 0, 397, 385, 386, 387, 384, 373, 0,
	0, 364, 365, 0, 0, 89, 90, 366, 91, 0,
	374, 0, 0, 379, 0, 0, 0, 92, 93, 174,
	426, 427, 94, 428, 429, 0, 95, 179, 96, 394,
	412, 430, 431, 0, 422, 0, 405, 0, 97, 98,
	99, 0, 100, 0, 101, 0, 294, 102, 103, 0,
	406, 408, 0, 407, 409, 104, 105, 106, 107, 432,
	108, 433, 434, 0, 0, 109, 0, 0, 0, 425,
	111, 0, 0, 0, 0, 378, 112, 413, 392, 0,
	113, 114, 435, 115, 0, 0, 0, 295, 0, 116,
	423, 0, 190, 0, 117, 419, 421, 0, 0, 0,
	296, 118, 436, 437, 438, 0, 404, 0, 297, 119,
	298, 120, 0, 0, 424, 299, 121, 300, 0, 250,
	0, 0, 0, 122, 123, 124, 125, 251, 301, 126,
	127, 367, 128, 393, 420, 129, 439, 130, 131, 0,
	0, 0, 0, 0, 132, 200, 302, 133, 303, 414,
	134, 135, 0, 415, 136, 203, 0, 137, 138, 440,
	139, 140, 0, 141, 142, 143, 0, 144, 304, 145,
	146, 382, 147, 0, 148, 149, 0, 150, 252, 410,
	151, 152, 305, 153, 441, 154, 0, 155, 157, 207,
	156, 416, 0, 0, 158, 159, 0, 254, 442, 0,
	0, 253, 417, 418, 391, 160, 161, 162, 163, 0,
	370, 164, 165, 411, 0, 166, 167, 168, 212, 443,
	0, 169, 0, 0, 0, 0, 170, 171, 172, 173,
	368, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	364, 365, 362, 0, 0, 0, 366, 0, 0, 374,
	397, 385, 386, 387, 384, 373, 0, 0, 0, 0,
	0, 0, 89, 90, 631, 91, 0, 0, 0, 0,
	379, 0, 0, 0, 92, 93, 174, 426, 427, 94,
	428, 429, 0, 95, 179, 96, 394, 412, 430, 431,
	0, 422, 0, 405, 0, 97, 98, 99, 0, 100,
	0, 101, 0, 294, 102, 103, 0, 406, 408, 0,
	407, 409, 104, 105, 106, 107, 432, 108, 433, 434,
	0, 0, 109, 0, 0, 0, 425, 111, 0, 0,
	0, 0, 378, 112, 413, 392, 0, 113, 114, 435,
	115, 0, 0, 0, 295, 0, 116, 423, 0, 190,
	0, 117, 419, 421, 0, 0, 0, 296, 118, 436,
	437, 438, 0, 404, 0, 297, 119, 298, 120, 0,
	0, 424, 299, 121, 300, 0, 250, 0, 0, 0,
	122, 123, 124, 125, 251, 301, 126, 127, 367, 128,
	393, 420, 129, 439, 130, 131, 0, 0, 0, 0,
	0, 132, 200, 302, 133, 303, 414, 134, 135, 0,
	415, 136, 203, 0, 137, 138, 440, 139, 140, 0,
	141, 142, 143, 0, 144, 304, 145, 146, 382, 147,
	0, 148, 149, 0, 150, 252, 410, 151, 152, 305,
	153, 441, 154, 0, 155, 157, 207, 156, 416, 0,
	0, 158, 159, 0, 254, 442, 0, 0, 253, 417,
	418, 391, 160, 161, 162, 163, 0, 370, 164, 165,
	411, 0, 166, 167, 168, 212, 443, 0, 169, 0,
	0, 0, 0, 170, 171, 172, 173, 368, 0, 397,
	385, 386, 387, 384, 373, 0, 0, 364, 365, 0,
	0, 89, 90, 366, 91, 0, 374, 0, 0, 379,
	0, 0, 0, 92, 93, 174, 426, 427, 94, 428,
	429, 0, 95, 179, 96, 394, 412, 430, 431, 0,
	422, 0, 405, 0, 97, 98, 99, 0, 100, 0,
	101, 0, 294, 102, 1576, 0, 406, 408, 0, 407,
	409, 104, 105, 106, 107, 432, 108, 433, 434, 0,
	0, 109, 0, 0, 0, 425, 111, 0, 0, 0,
	0, 378, 112, 413, 392, 0, 113, 114, 435, 115,
	0, 0, 0, 295, 0, 116, 423, 0, 190, 0,
	117, 419, 421, 0, 0, 0, 296, 118, 436, 437,
	438, 0, 404, 0, 297, 119, 298, 120, 0, 0,
	424, 299, 121, 300, 0, 250, 0, 0, 0, 122,
	123, 124, 125, 251, 301, 126, 127, 367, 128, 393,
	420, 129, 439, 130, 131, 0, 0, 0, 0, 0,
	132, 200, 302, 133, 303, 414, 134, 135, 0, 415,
	136, 203, 0, 137, 138, 440, 139, 140, 0, 141,
	142, 143, 0, 144, 304, 145, 146, 382, 147, 0,
	148, 149, 0, 150, 252, 410, 151, 152, 305, 153,
	441, 154, 0, 155, 157, 207, 156, 416, 0, 0,
	158, 159, 0, 254, 442, 0, 0, 253, 417, 418,
	391, 160, 161, 1575, 163, 0, 370, 164, 165, 411,
	0, 166, 167, 168, 212, 443, 0, 169, 0, 0,
	0, 0, 170, 171, 172, 173, 368, 0, 397, 385,
	386, 387, 384, 373, 0, 0, 364, 365, 0, 0,
	89, 90, 366, 91, 0, 374, 0, 0, 379, 0,
	0, 0, 92, 93, 1574, 426, 427, 94, 428, 429,
	0, 95, 179, 96, 394, 412, 430, 431, 0, 422,
	0, 405, 0, 97, 98, 99, 0, 100, 0, 101,
	0, 294, 102, 1576, 0, 406, 408, 0, 407, 409,
	104, 105, 106, 107, 432, 108, 433, 434, 0, 0,
	109, 0, 0, 0, 425, 111, 0, 0, 0, 0,
	378, 112, 413, 392, 0, 113, 114, 435, 115, 0,
	0, 0, 295, 0, 116, 423, 0, 190, 0, 117,
	419, 421, 0, 0, 0, 296, 118, 436, 437, 438,
	0, 404, 0, 297, 119, 298, 120, 0, 0, 424,
	299, 121, 300, 0, 250, 0, 0, 0, 122, 123,
	124, 125, 251, 301, 126, 127, 367, 128, 393, 420,
	129, 439, 130, 131, 0, 0, 0, 0, 0, 132,
	200, 302, 133, 303, 414, 134, 135, 0, 415, 136,
	203, 0, 137, 138, 440, 139, 140, 0, 141, 142,
	143, 0, 144, 304, 145, 146, 382, 147, 0, 148,
	149, 0, 150, 252, 410, 151, 152, 305, 153, 441,
	154, 0, 155, 157, 207, 156, 416, 0, 0, 158,
	159, 0, 254, 442, 0, 0, 253, 417, 418, 391,
	160, 161, 1575, 163, 0, 370, 164, 165, 411, 0,
	166, 167, 168, 212, 443, 0, 169, 0, 0, 0,
	0, 170, 171, 172, 173, 368, 0, 397, 385, 386,
	387, 384, 373, 0, 0, 364, 365, 0, 0, 89,
	90, 366, 91, 0, 374, 0, 0, 379, 0, 0,
	0, 92, 93, 174, 426, 427, 94, 428, 429, 0,
	95, 179, 96, 394, 412, 430, 431, 0, 422, 0,
	405, 0, 97, 98, 99, 0, 100, 0, 101, 0,
	294, 102, 103, 0, 406, 408, 0, 407, 409, 104,
	105, 106, 107, 432, 108, 433, 434, 0, 0, 109,
	0, 0, 0, 425, 111, 0, 0, 0, 0, 378,
	112, 413, 392, 0, 113, 114, 435, 115, 0, 0,
	0, 295, 0, 116, 423, 0, 190, 0, 117, 419,
	421, 0, 0, 0, 296, 118, 436, 437, 438, 0,
	404, 0, 297, 119, 298, 120, 0, 0, 424, 299,
	121, 300, 0, 250, 0, 0, 0, 122, 123, 124,
	125, 251, 301, 126, 127, 367, 128, 393, 420, 129,
	439, 130, 131, 0, 0, 0, 0, 0, 132, 200,
	302, 133, 303, 414, 134, 135, 0, 415, 136, 203,
	0, 137, 138, 440, 139, 140, 0, 141, 142, 143,
	0, 144, 304, 145, 146, 382, 147, 0, 148, 149,
	0, 150, 252, 410, 151, 152, 305, 153, 441, 154,
	0, 155, 157, 207, 156, 416, 0, 0, 158, 159,
	0, 254, 442, 0, 0, 253, 417, 418, 391, 160,
	161, 162, 163, 0, 370, 164, 165, 411, 0, 166,
	167, 168, 212, 443, 0, 169, 0, 0, 0, 0,
	170, 171, 172, 173, 368, 0, 397, 385, 386, 387,
	384, 373, 0, 0, 364, 365, 0, 0, 89, 90,
	366, 91, 0, 374, 0, 0, 379, 0, 0, 0,
	92, 93, 174, 426, 427, 94, 428, 429, 0, 95,
	179, 96, 394, 412, 430, 431, 0, 422, 0, 405,
	0, 97, 98, 99, 0, 100, 0, 101, 0, 294,
	102, 103, 0, 406, 408, 0, 407, 409, 104, 105,
	106, 107, 432, 108, 433, 434, 0, 0, 109, 0,
	0, 0, 425, 111, 0, 0, 0, 0, 378, 112,
	413, 392, 0, 113, 114, 435, 115, 0, 0, 0,
	295, 0, 116, 423, 0, 190, 0, 117, 419, 421,
	0, 0, 0, 296, 118, 436, 437, 438, 0, 404,
	0, 297, 119, 298, 120, 0, 0, 424, 299, 121,
	300, 0, 250, 0, 0, 0, 122, 123, 124, 125,
	251, 301, 126, 127, 0, 128, 393, 420, 129, 439,
	130, 131, 0, 0, 0, 0, 0, 132, 200, 302,
	133, 303, 414, 134, 135, 0, 415, 136, 203, 0,
	137, 138, 440, 139, 140, 0, 141, 142, 143, 0,
	144, 304, 145, 146, 967, 147, 0, 148, 149, 0,
	150, 252, 410, 151, 152, 305, 153, 441, 154, 0,
	155, 157, 207, 156, 416, 0, 0, 158, 159, 0,
	254, 442, 0, 0, 253, 417, 418, 391, 160, 161,
	162, 163, 0, 0, 164, 165, 411, 0, 166, 167,
	168, 212, 443, 0, 169, 0, 0, 0, 0, 170,
	171, 172, 173, 397, 385, 386, 387, 384, 373, 0,
	0, 0, 0, 963, 964, 89, 90, 0, 91, 965,
	0, 0, 966, 379, 0, 0, 0, 92, 93, 0,
	426, 427, 94, 428, 429, 0, 95, 179, 96, 394,
	412, 430, 431, 0, 422, 0, 405, 0, 97, 98,
	99, 0, 100, 0, 101, 0, 294, 102, 1576, 0,
	406, 408, 0, 407, 409, 104, 105, 106, 107, 432,
	108, 433, 434, 0, 0, 109, 0, 0, 0, 425,
	111, 0, 0, 0, 0, 378, 112, 413, 392, 0,
	113, 114, 435, 115, 0, 0, 0, 295, 0, 116,
	423, 0, 190, 0, 117, 419, 421, 0, 0, 0,
	296, 118, 436, 437, 438, 0, 404, 0, 0, 119,
	298, 120, 0, 0, 424, 299, 121, 0, 0, 250,
	0, 0, 0, 122, 123, 124, 125, 251, 301, 126,
	127, 367, 128, 393, 420, 129, 439, 130, 131, 0,
	0, 0, 0, 0, 132, 200, 302, 133, 303, 414,
	134, 135, 0, 415, 136, 203, 0, 137, 138, 440,
	139, 140, 0, 141, 142, 143, 0, 144, 304, 145,
	146, 382, 147, 0, 148, 149, 0, 150, 252, 410,
	151, 152, 0, 153, 441, 154, 0, 155, 157, 207,
	156, 416, 0, 0, 158, 159, 0, 254, 442, 0,
	0, 253, 417, 418, 391, 160, 161, 1575, 163, 0,
	370, 164, 165, 411, 0, 166, 167, 168, 212, 443,
	0, 169, 0, 0, 0, 0, 170, 171, 172, 173,
	397, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	364, 365, 89, 90, 0, 91, 366, 0, 0, 374,
	0, 0, 0, 0, 92, 93, 174, 175, 176, 94,
	177, 178, 0, 95, 179, 96, 0, 412, 180, 181,
	0, 422, 0, 405, 0, 97, 98, 99, 0, 100,
	0, 101, 0, 294, 102, 103, 0, 406, 408, 0,
	407, 409, 104, 105, 106, 107, 183, 108, 184, 185,
	0, 0, 109, 0, 0, 0, 110, 111, 0, 0,
	0, 0, 186, 112, 413, 0, 0, 113, 114, 188,
	115, 0, 0, 0, 295, 0, 116, 423, 0, 190,
	0, 117, 419, 421, 0, 0, 0, 296, 118, 193,
	194, 195, 0, 196, 0, 297, 119, 298, 120, 0,
	0, 424, 299, 121, 300, 0, 250, 0, 0, 0,
	122, 123, 124, 125, 251, 301, 126, 127, 0, 128,
	0, 420, 129, 199, 130, 131, 0, 0, 0, 0,
	0, 132, 200, 302, 133, 303, 414, 134, 135, 0,
	415, 136, 203, 0, 137, 138, 204, 139, 140, 0,
	141, 142, 143, 0, 144, 304, 145, 146, 205, 147,
	0, 148, 149, 0, 150, 252, 410, 151, 152, 305,
	153, 206, 154, 0, 155, 157, 207, 156, 416, 0,
	0, 158, 159, 0, 254, 209, 0, 0, 253, 417,
	418, 0, 160, 161, 162, 163, 0, 0, 164, 165,
	411, 0, 166, 167, 168, 212, 213, 0, 169, 0,
	0, 0, 0, 170, 171, 172, 173, 288, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 89,
	90, 0, 91, 0, 0, 0, 1373, 0, 0, 0,
	0, 92, 93, 174, 175, 176, 94, 177, 178, 0,
	95, 179, 96, 0, 0, 180, 181, 0, 182, 0,
	293, 0, 97, 98, 99, 0, 100, 0, 101, 0,
	294, 102, 103, 0, 0, 0, 0, 0, 0, 104,
	105, 106, 107, 183, 108, 184, 185, 0, 0, 109,
	0, 0, 0, 110, 111, 0, 0, 0, 0, 186,
	112, 187, 0, 0, 113, 114, 188, 115, 0, 0,
	0, 295, 0, 116, 189, 0, 190, 0, 117, 191,
	192, 0, 0, 0, 296, 118, 193, 194, 195, 0,
	196, 0, 297, 119, 298, 120, 0, 0, 197, 299,
	121, 300, 0, 250, 0, 0, 0, 122, 123, 124,
	125, 251, 301, 126, 127, 0, 128, 0, 198, 129,
	199, 130, 131, 0, 0, 0, 0, 0, 132, 200,
	302, 133, 303, 201, 134, 135, 0, 202, 136, 203,
	0, 137, 138, 204, 139, 140, 0, 141, 142, 143,
	0, 144, 304, 145, 146, 205, 147, 0, 148, 149,
	43, 150, 252, 0, 151, 152, 305, 153, 206, 154,
	0, 155, 157, 207, 156, 208, 0, 45, 158, 159,
	0, 254, 209, 0, 0, 253, 210, 211, 0, 160,
	161, 162, 163, 0, 0, 164, 165, 0, 0, 166,
	167, 168, 292, 213, 0, 169, 0, 0, 0, 41,
	170, 171, 172, 173, 0, 42, 288, 508, 512, 0,
	513, 503, 0, 0, 0, 0, 0, 0, 89, 90,
	0, 91, 0, 40, 0, 0, 0, 0, 0, 0,
	92, 93, 174, 175, 176, 94, 177, 178, 0, 95,
	179, 96, 0, 0, 180, 181, 0, 182, 0, 293,
	0, 97, 98, 99, 0, 100, 0, 101, 0, 294,
	102, 103, 0, 0, 0, 0, 0, 0, 104, 105,
	106, 107, 183, 108, 184, 185, 516, 0, 109, 0,
	0, 0, 110, 111, 0, 0, 0, 0, 186, 112,
	187, 505, 0, 113, 114, 188, 115, 0, 0, 0,
	295, 0, 116, 189, 0, 190, 0, 117, 191, 192,
	0, 0, 0, 296, 118, 193, 194, 195, 0, 196,
	0, 297, 119, 298, 120, 0, 0, 197, 299, 121,
	300, 0, 250, 0, 0, 0, 122, 123, 124, 125,
	251, 301, 126, 127, 0, 128, 0, 198, 129, 199,
	130, 131, 0, 506, 0, 0, 0, 132, 200, 302,
	133, 303, 201, 134, 135, 0, 202, 136, 203, 0,
	137, 138, 204, 139, 140, 0, 141, 142, 143, 0,
	144, 304, 145, 146, 205, 147, 0, 148, 149, 0,
	150, 252, 0, 151, 152, 305, 153, 206, 154, 0,
	155, 157, 207, 156, 208, 0, 0, 158, 159, 0,
	254, 209, 0, 0, 253, 210, 211, 504, 160, 161,
	162, 163, 0, 0, 164, 165, 0, 0, 166, 167,
	168, 212, 213, 0, 169, 0, 0, 0, 0, 170,
	171, 172, 173, 288, 508, 512, 0, 513, 503, 0,
	0, 0, 0, 514, 509, 89, 90, 0, 91, 0,
	0, 0, 0, 0, 0, 0, 0, 92, 93, 174,
	175, 176, 94, 177, 178, 0, 95, 179, 96, 0,
	0, 180, 181, 0, 182, 0, 293, 0, 97, 98,
	99, 0, 100, 0, 101, 0, 294, 102, 103, 0,
	0, 0, 0, 0, 0, 104, 105, 106, 107, 183,
	108, 184, 185, 499, 0, 109, 0, 0, 0, 110,
	111, 0, 0, 0, 0, 186, 112, 187, 505, 0,
	113, 114, 188, 115, 0, 0, 0, 295, 0, 116,
	189, 0, 190, 0, 117, 191, 192, 0, 0, 0,
	296, 118, 193, 194, 195, 0, 196, 0, 297, 119,
	298, 120, 0, 0, 197, 299, 121, 300, 0, 250,
	0, 0, 0, 122, 123, 124, 125, 251, 301, 126,
	127, 0, 128, 0, 198, 129, 199, 130, 131, 0,
	506, 0, 0, 0, 132, 200, 302, 133, 303, 201,
	134, 135, 0, 202, 136, 203, 0, 137, 138, 204,
	139, 140, 0, 141, 142, 143, 0, 144, 304, 145,
	146, 205, 147, 0, 148, 149, 0, 150, 252, 0,
	151, 152, 305, 153, 206, 154, 0, 155, 157, 207,
	156, 208, 0, 0, 158, 159, 0, 254, 209, 0,
	0, 253, 210, 211, 504, 160, 161, 162, 163, 0,
	0, 164, 165, 0, 0, 166, 167, 168, 212, 213,
	0, 169, 0, 0, 0, 0, 170, 171, 172, 173,
	288, 508, 512, 0, 513, 503, 0, 0, 0, 0,
	514, 509, 89, 90, 0, 91, 0, 0, 0, 0,
	0, 0, 0, 0, 92, 93, 174, 175, 176, 94,
	177, 178, 0, 95, 179, 96, 0, 0, 180, 181,
	0, 182, 0, 293, 0, 97, 98, 99, 0, 100,
	0, 101, 0, 294, 102, 103, 0, 0, 0, 0,
	0, 0, 104, 105, 106, 107, 183, 108, 184, 185,
	0, 0, 109, 0, 0, 0, 110, 111, 0, 0,
	0, 0, 186, 112, 187, 505, 0, 113, 114, 188,
	115, 0, 0, 0, 295, 0, 116, 189, 0, 190,
	0, 117, 191, 192, 0, 0, 0, 296, 118, 193,
	194, 195, 0, 196, 0, 297, 119, 298, 120, 0,
	0, 197, 299, 121, 300, 0, 250, 0, 0, 0,
	122, 123, 124, 125, 251, 301, 126, 127, 0, 128,
	0, 198, 129, 199, 130, 131, 0, 506, 0, 0,
	0, 132, 200, 302, 133, 303, 201, 134, 135, 0,
	202, 136, 203, 0, 137, 138, 204, 139, 140, 0,
	141, 142, 143, 0, 144, 304, 145, 146, 205, 147,
	0, 148, 149, 0, 150, 252, 0, 151, 152, 305,
	153, 206, 154, 0, 155, 157, 207, 156, 208, 0,
	0, 158, 159, 0, 254, 209, 0, 0, 253, 210,
	211, 504, 160, 161, 162, 163, 0, 0, 164, 165,
	0, 0, 166, 167, 168, 212, 213, 86, 169, 0,
	0, 0, 0, 170, 171, 172, 173, 0, 0, 89,
	90, 0, 91, 0, 0, 0, 0, 514, 509, 0,
	0, 92, 93, 174, 175, 176, 94, 177, 178, 0,
	95, 179, 96, 0, 0, 180, 181, 0, 182, 0,
	0, 0, 97, 98, 99, 0, 100, 0, 101, 0,
	0, 102, 103, 0, 0, 0, 0, 0, 0, 104,
	105, 106, 107, 183, 108, 184, 185, 0, 0, 109,
	0, 0, 0, 110, 111, 0, 0, 0, 0, 186,
	112, 187, 0, 0, 113, 114, 188, 115, 0, 0,
	0, 0, 0, 116, 189, 0, 190, 0, 117, 191,
	192, 0, 0, 0, 0, 118, 193, 194, 195, 0,
	196, 0, 0, 119, 0, 120, 0, 0, 197, 0,
	121, 0, 0, 250, 0, 0, 0, 122, 123, 124,
	125, 251, 0, 126, 127, 0, 128, 0, 198, 129,
	199, 130, 131, 0, 0, 263, 0, 0, 132, 200,
	0, 133, 0, 201, 134, 135, 0, 202, 136, 203,
	0, 137, 138, 204, 139, 140, 0, 141, 142, 143,
	0, 144, 0, 145, 146, 205, 147, 0, 148, 149,
	43, 150, 252, 0, 151, 152, 0, 153, 206, 154,
	0, 155, 157, 207, 156, 208, 0, 45, 158, 159,
	0, 254, 209, 0, 0, 253, 210, 211, 0, 160,
	161, 162, 163, 0, 0, 164, 165, 0, 0, 166,
	167, 168, 292, 213, 0, 169, 0, 0, 0, 41,
	170, 171, 172, 173, 86, 42, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 89, 90, 0, 91,
	0, 0, 0, 832, 0, 0, 0, 0, 92, 93,
	174, 175, 176, 94, 177, 178, 0, 95, 179, 96,
	0, 0, 180, 181, 0, 182, 0, 0, 0, 97,
	98, 99, 0, 100, 0, 101, 0, 0, 102, 103,
	0, 0, 0, 0, 0, 0, 104, 105, 106, 107,
	183, 108, 184, 185, 0, 0, 109, 0, 0, 0,
	110, 111, 0, 0, 0, 0, 186, 112, 187, 0,
	0, 113, 114, 188, 115, 0, 0, 0, 0, 0,
	116, 189, 0, 190, 0, 117, 191, 192, 0, 0,
	0, 0, 118, 193, 194, 195, 0, 196, 0, 0,
	119, 0, 120, 0, 0, 197, 0, 121, 0, 0,
	250, 0, 0, 0, 122, 123, 124, 125, 251, 0,
	126, 127, 0, 128, 0, 198, 129, 199, 130, 131,
	0, 0, 0, 0, 0, 132, 200, 0, 133, 0,
	201, 134, 135, 0, 202, 136, 203, 0, 137, 138,
	204, 139, 140, 0, 141, 142, 143, 0, 144, 0,
	145, 146, 205, 147, 0, 148, 149, 43, 150, 252,
	0, 151, 152, 0, 153, 206, 154, 0, 155, 157,
	207, 156, 208, 0, 45, 158, 159, 0, 254, 209,
	0, 0, 253, 210, 211, 0, 160, 161, 162, 163,
	0, 0, 164, 165, 0, 0, 166, 167, 168, 292,
	213, 0, 169, 0, 0, 0, 41, 170, 171, 172,
	173, 86, 42, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 89, 90, 0, 91, 0, 0, 0,
	40, 0, 1067, 0, 0, 92, 93, 174, 175, 176,
	94, 177, 178, 0, 95, 179, 96, 0, 0, 180,
	181, 0, 182, 0, 0, 0, 97, 98, 99, 0,
	100, 0, 101, 0, 0, 102, 103, 0, 0, 0,
	0, 0, 0, 104, 105, 106, 107, 183, 108, 184,
	185, 0, 0, 109, 0, 0, 0, 110, 111, 0,
	0, 0, 0, 186, 112, 187, 0, 0, 113, 114,
	188, 115, 0, 0, 0, 0, 0, 116, 189, 0,
	190, 0, 117, 191, 192, 0, 0, 0, 0, 118,
	193, 194, 195, 0, 196, 0, 0, 119, 0, 120,
	0, 0, 197, 0, 121, 0, 0, 250, 0, 0,
	0, 122, 123, 124, 125, 251, 0, 126, 127, 0,
	128, 0, 198, 129, 199, 130, 131, 0, 0, 0,
	0, 0, 132, 200, 0, 133, 0, 201, 134, 135,
	0, 202, 136, 203, 0, 137, 138, 204, 139, 140,
	0, 141, 142, 143, 0, 144, 0, 145, 146, 205,
	147, 0, 148, 149, 0, 150, 252, 0, 151, 152,
	0, 153, 206, 154, 0, 155, 157, 207, 156, 208,
	0, 0, 158, 159, 0, 254, 209, 0, 0, 253,
	210, 211, 0, 160, 161, 162, 163, 0, 86, 164,
	165, 0, 0, 166, 167, 168, 212, 213, 0, 169,
	89, 90, 0, 91, 170, 171, 172, 173, 0, 0,
	0, 0, 92, 93, 174, 175, 176, 94, 177, 178,
	0, 95, 179, 96, 0, 0, 180, 181, 353, 182,
	0, 0, 0, 97, 98, 99, 0, 100, 0, 101,
	0, 0, 102, 103, 0, 0, 0, 0, 0, 0,
	104, 105, 106, 107, 183, 108, 184, 185, 0, 0,
	109, 0, 0, 0, 110, 111, 0, 0, 0, 0,
	186, 112, 187, 0, 0, 113, 114, 188, 115, 0,
	0, 0, 0, 0, 116, 189, 0, 190, 0, 117,
	191, 192, 0, 0, 0, 0, 118, 193, 194, 195,
	0, 196, 0, 0, 119, 0, 120, 0, 0, 197,
	0, 121, 0, 0, 250, 0, 0, 0, 122, 123,
	124, 125, 251, 0, 126, 127, 0, 128, 0, 198,
	129, 199, 130, 131, 0, 0, 263, 0, 0, 132,
	200, 0, 133, 0, 201, 134, 135, 0, 202, 136,
	203, 0, 137, 138, 204, 139, 140, 0, 141, 142,
	143, 0, 144, 0, 145, 146, 205, 147, 0, 148,
	149, 0, 150, 252, 0, 151, 152, 0, 153, 206,
	154, 0, 155, 157, 207, 156, 208, 0, 0, 158,
	159, 0, 254, 209, 0, 0, 253, 210, 211, 0,
	160, 161, 162, 163, 0, 0, 164, 165, 0, 0,
	166, 167, 168, 212, 213, 0, 169, 0, 0, 0,
	0, 170, 171, 172, 173, 86, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 89, 90, 0,
	91, 0, 0, 0, 832, 0, 0, 0, 0, 92,
	93, 174, 175, 176, 94, 177, 178, 0, 95, 179,
	96, 0, 0, 180, 181, 0, 182, 0, 0, 0,
	97, 98, 99, 0, 100, 0, 101, 0, 0, 102,
	103, 0, 0, 0, 0, 0, 0, 104, 105, 106,
	107, 183, 108, 184, 185, 0, 0, 109, 0, 0,
	0, 110, 111, 0, 0, 0, 0, 186, 112, 187,
	0, 0, 113, 114, 188, 115, 0, 0, 0, 0,
	0, 116, 189, 0, 190, 0, 117, 191, 192, 0,
	0, 0, 0, 118, 193, 194, 195, 0, 196, 0,
	0, 119, 0, 120, 0, 0, 197, 0, 121, 0,
	0, 250, 0, 0, 0, 122, 123, 124, 125, 251,
	0, 126, 127, 0, 128, 0, 198, 129, 199, 130,
	131, 0, 0, 0, 0, 0, 132, 200, 0, 133,
	0, 201, 134, 135, 0, 202, 136, 203, 0, 137,
	138, 204, 139, 140, 0, 141, 142, 143, 0, 144,
	0, 145, 146, 205, 147, 0, 148, 149, 0, 150,
	252, 0, 151, 152, 0, 153, 206, 154, 0, 155,
	157, 207, 156, 208, 0, 0, 158, 159, 0, 254,
	209, 0, 0, 253, 210, 211, 0, 160, 161, 162,
	163, 0, 0, 164, 165, 0, 0, 166, 167, 168,
	212, 213, 0, 169, 0, 0, 0, 0, 170, 171,
	172, 173, 86, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 89, 90, 0, 91, 0, 0,
	0, 776, 0, 0, 0, 0, 92, 93, 174, 175,
	176, 94, 177, 178, 0, 95, 179, 96, 0, 0,
	180, 181, 0, 182, 0, 0, 0, 97, 98, 99,
	0, 100, 0, 101, 0, 0, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 106, 107, 183, 108,
	184, 185, 0, 0, 109, 0, 0, 0, 110, 111,
	0, 0, 0, 0, 186, 112, 187, 0, 0, 113,
	114, 188, 115, 0, 0, 0, 0, 0, 116, 189,
	0, 190, 0, 117, 191, 192, 0, 0, 0, 0,
	118, 193, 194, 195, 0, 196, 0, 0, 119, 0,
	120, 0, 0, 197, 0, 121, 0, 0, 250, 0,
	0, 0, 122, 123, 124, 125, 251, 0, 126, 127,
	0, 128, 0, 198, 129, 199, 130, 131, 0, 0,
	0, 0, 0, 132, 200, 0, 133, 0, 201, 134,
	135, 0, 202, 136, 203, 0, 137, 138, 204, 139,
	140, 0, 141, 142, 143, 0, 144, 0, 145, 146,
	205, 147, 0, 148, 149, 0, 150, 252, 0, 151,
	152, 0, 153, 206, 154, 0, 155, 157, 207, 156,
	208, 0, 0, 158, 159, 0, 254, 209, 0, 0,
	253, 210, 211, 0, 160, 161, 162, 163, 0, 0,
	164, 165, 0, 0, 166, 167, 168, 212, 213, 0,
	169, 0, 0, 0, 0, 170, 171, 172, 173, 86,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 89, 90, 0, 91, 0, 0, 0, 1279, 0,
	0, 0, 0, 92, 93, 174, 175, 176, 94, 177,
	178, 0, 95, 179, 96, 0, 0, 180, 181, 0,
	182, 0, 0, 0, 97, 98, 99, 0, 100, 0,
	101, 0, 0, 102, 103, 0, 0, 0, 0, 0,
	0, 104, 105, 106, 107, 183, 108, 184, 185, 0,
	0, 109, 0, 0, 0, 110, 111, 0, 0, 0,
	0, 186, 112, 187, 0, 0, 113, 114, 188, 115,
	0, 0, 0, 0, 0, 116, 189, 0, 190, 0,
	117, 191, 192, 0, 0, 0, 0, 118, 193, 194,
	195, 0, 196, 0, 0, 119, 0, 120, 0, 0,
	197, 0, 121, 0, 0, 250, 0, 0, 0, 122,
	123, 124, 125, 251, 0, 126, 127, 0, 128, 0,
	198, 129, 199, 130, 131, 0, 0, 0, 0, 0,
	132, 200, 0, 133, 0, 201, 134, 135, 0, 202,
	136, 203, 0, 137, 138, 204, 139, 140, 0, 141,
	142, 143, 0, 144, 0, 145, 146, 205, 147, 0,
	148, 149, 0, 150, 252, 0, 151, 152, 0, 153,
	206, 154, 0, 155, 157, 207, 156, 208, 0, 0,
	158, 159, 0, 254, 209, 0, 0, 253, 210, 211,
	0, 160, 161, 162, 163, 0, 0, 164, 165, 0,
	0, 166, 167, 168, 212, 213, 0, 169, 0, 0,
	0, 0, 170, 171, 172, 173, 288, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 89, 90,
	0, 91, 0, 0, 0, 454, 0, 0, 0, 0,
	92, 93, 174, 175, 176, 94, 177, 178, 0, 95,
	179, 96, 0, 0, 180, 181, 0, 182, 0, 293,
	0, 97, 98, 99, 0, 100, 0, 101, 0, 294,
	102, 103, 0, 0, 0, 0, 0, 0, 104, 105,
	106, 107, 183, 108, 184, 185, 0, 0, 109, 0,
	0, 0, 110, 111, 0, 0, 0, 0, 186, 112,
	187, 0, 0, 113, 114, 188, 115, 0, 0, 0,
	295, 0, 116, 189, 0, 190, 0, 117, 191, 192,
	0, 0, 0, 296, 118, 193, 194, 195, 0, 196,
	0, 297, 119, 298, 120, 0, 0, 197, 299, 121,
	300, 0, 250, 0, 0, 0, 122, 123, 124, 125,
	251, 301, 126, 127, 0, 128, 0, 198, 129, 199,
	130, 131, 0, 0, 0, 0, 0, 132, 200, 302,
	133, 303, 201, 134, 135, 0, 202, 136, 203, 0,
	137, 138, 204, 139, 140, 0, 141, 142, 143, 0,
	144, 304, 145, 146, 205, 147, 0, 148, 149, 0,
	150, 252, 0, 151, 152, 305, 153, 206, 154, 0,
	155, 157, 207, 156, 208, 0, 0, 158, 159, 0,
	254, 209, 0, 0, 253, 210, 211, 0, 160, 161,
	162, 163, 0, 86, 164, 165, 0, 0, 166, 167,
	168, 212, 213, 0, 169, 89, 90, 0, 91, 170,
	171, 172, 173, 0, 0, 0, 0, 92, 93, 174,
	175, 176, 94, 177, 178, 0, 95, 179, 96, 0,
	0, 180, 181, 751, 182, 0, 0, 0, 97, 98,
	99, 0, 100, 749, 101, 0, 0, 102, 103, 0,
	0, 0, 0, 0, 0, 104, 105, 106, 107, 183,
	108, 184, 185, 0, 0, 109, 0, 0, 0, 110,
	111, 0, 0, 0, 0, 186, 112, 187, 0, 0,
	113, 114, 188, 115, 0, 754, 0, 0, 0, 116,
	189, 0, 190, 0, 117, 191, 192, 0, 810, 0,
	0, 118, 193, 194, 195, 0, 196, 0, 0, 119,
	0, 120, 0, 0, 197, 0, 121, 0, 0, 250,
	0, 0, 0, 122, 123, 124, 125, 251, 0, 126,
	127, 0, 128, 0, 198, 129, 199, 130, 131, 0,
	0, 0, 0, 0, 132, 200, 0, 133, 0, 201,
	134, 135, 0, 202, 136, 203, 753, 137, 138, 204,
	139, 140, 0, 141, 142, 143, 0, 144, 0, 145,
	146, 205, 147, 0, 148, 149, 0, 150, 252, 0,
	151, 152, 0, 153, 206, 154, 0, 155, 157, 207,
	156, 208, 0, 0, 158, 159, 0, 254, 209, 0,
	0, 253, 210, 211, 0, 160, 161, 162, 163, 0,
	811, 164, 165, 0, 0, 166, 167, 168, 212, 213,
	86, 169, 0, 0, 0, 0, 170, 171, 172, 173,
	0, 0, 89, 90, 0, 91, 0, 0, 0, 0,
	0, 0, 0, 0, 92, 93, 174, 175, 176, 94,
	177, 178, 0, 95, 179, 96, 0, 0, 180, 181,
	751, 182, 0, 0, 746, 97, 98, 99, 0, 100,
	749, 101, 0, 0, 102, 103, 0, 0, 0, 0,
	0, 0, 104, 105, 106, 107, 183, 108, 184, 185,
	0, 0, 109, 0, 0, 0, 110, 111, 0, 0,
	0, 0, 186, 112, 187, 0, 0, 113, 114, 188,
	115, 0, 754, 0, 0, 0, 116, 189, 0, 190,
	0, 117, 745, 192, 0, 0, 0, 0, 118, 193,
	194, 195, 0, 196, 0, 0, 119, 0, 120, 0,
	0, 197, 0, 121, 0, 0, 250, 0, 0, 0,
	122, 123, 124, 125, 251, 0, 126, 127, 0, 128,
	0, 198, 129, 199, 130, 131, 0, 0, 0, 0,
	0, 132, 200, 0, 133, 0, 201, 134, 135, 0,
	202, 136, 203, 753, 137, 138, 204, 139, 140, 0,
	141, 142, 143, 0, 144, 0, 145, 146, 205, 147,
	0, 148, 149, 0, 150, 252, 0, 151, 152, 0,
	153, 206, 154, 0, 155, 157, 207, 156, 208, 0,
	0, 158, 159, 0, 254, 209, 0, 0, 253, 210,
	211, 0, 160, 161, 162, 163, 0, 752, 164, 165,
	0, 0, 166, 167, 168, 212, 213, 86, 169, 0,
	0, 0, 0, 170, 171, 172, 173, 0, 0, 89,
	90, 0, 91, 0, 0, 0, 0, 0, 1067, 0,
	0, 92, 93, 174, 175, 176, 94, 177, 178, 0,
	95, 179, 96, 0, 0, 180, 181, 0, 182, 0,
	0, 0, 97, 98, 99, 0, 100, 0, 101, 0,
	0, 102, 103, 0, 0, 0, 0, 0, 0, 104,
	105, 106, 107, 183, 108, 184, 185, 0, 0, 109,
	0, 0, 0, 110, 111, 0, 0, 0, 0, 186,
	112, 187, 0, 0, 113, 114, 188, 115, 0, 0,
	0, 0, 0, 116, 189, 0, 190, 0, 117, 191,
	192, 0, 0, 0, 0, 118, 193, 194, 195, 0,
	196, 0, 0, 119, 0, 120, 0, 0, 197, 0,
	121, 0, 0, 250, 0, 0, 0, 122, 123, 124,
	125, 251, 0, 126, 127, 0, 128, 0, 198, 129,
	199, 130, 131, 0, 0, 0, 0, 0, 132, 200,
	0, 133, 0, 201, 134, 135, 0, 202, 136, 203,
	0, 137, 138, 204, 139, 140, 0, 141, 142, 143,
	0, 144, 0, 145, 146, 205, 147, 0, 148, 149,
	0, 150, 252, 0, 151, 152, 0, 153, 206, 154,
	0, 155, 157, 207, 156, 208, 0, 0, 158, 159,
	0, 254, 209, 0, 0, 253, 210, 211, 0, 160,
	161, 162, 163, 0, 86, 164, 165, 0, 0, 166,
	167, 168, 212, 213, 0, 169, 89, 90, 0, 91,
	170, 171, 172, 173, 0, 0, 0, 0, 92, 93,
	174, 175, 176, 94, 177, 178, 0, 95, 179, 96,
	0, 0, 180, 181, 0, 182, 0, 0, 0, 97,
	98, 99, 0, 100, 0, 101, 0, 0, 102, 103,
	0, 0, 0, 0, 0, 0, 104, 105, 106, 107,
	183, 108, 184, 185, 0, 0, 109, 0, 0, 0,
	110, 111, 0, 0, 0, 0, 186, 112, 187, 0,
	0, 113, 114, 188, 115, 0, 0, 0, 0, 0,
	116, 189, 0, 190, 0, 117, 191, 192, 0, 0,
	0, 0, 118, 193, 194, 195, 0, 196, 0, 0,
	119, 0, 120, 0, 0, 197, 0, 121, 0, 0,
	250, 0, 0, 0, 122, 123, 124, 125, 251, 0,
	126, 127, 0, 128, 0, 198, 129, 199, 130, 131,
	0, 0, 263, 0, 0, 132, 200, 0, 133, 0,
	201, 134, 135, 0, 202, 136, 203, 0, 137, 138,
	204, 139, 140, 0, 141, 142, 143, 0, 144, 0,
	145, 146, 205, 147, 0, 148, 149, 0, 150, 252,
	0, 151, 152, 0, 153, 206, 154, 0, 155, 157,
	207, 156, 208, 0, 0, 158, 159, 0, 254, 209,
	0, 0, 253, 210, 211, 0, 160, 161, 162, 163,
	0, 86, 164, 165, 0, 0, 166, 167, 168, 212,
	213, 0, 169, 89, 90, 0, 91, 170, 171, 172,
	173, 0, 0, 0, 0, 92, 93, 174, 175, 176,
	94, 177, 178, 0, 95, 179, 96, 0, 0, 180,
	181, 0, 182, 0, 0, 0, 97, 98, 99, 0,
	100, 0, 101, 0, 0, 102, 103, 0, 0, 0,
	0, 0, 0, 104, 105, 494, 107, 183, 108, 184,
	185, 0, 0, 109, 0, 0, 0, 110, 111, 0,
	0, 0, 0, 186, 112, 187, 0, 0, 113, 114,
	188, 115, 0, 0, 0, 0, 0, 116, 189, 0,
	190, 0, 117, 191, 192, 0, 0, 0, 0, 118,
	193, 194, 195, 0, 196, 0, 0, 119, 0, 120,
	0, 0, 197, 0, 121, 0, 0, 250, 0, 0,
	0, 122, 123, 124, 125, 251, 0, 126, 127, 0,
	128, 0, 198, 129, 199, 130, 131, 0, 0, 0,
	0, 0, 132, 200, 0, 133, 0, 201, 134, 135,
	0, 202, 136, 203, 0, 137, 138, 204, 139, 140,
	0, 141, 142, 143, 0, 144, 0, 145, 146, 205,
	147, 0, 148, 149, 0, 150, 252, 0, 151, 152,
	0, 153, 206, 154, 0, 155, 157, 207, 156, 208,
	0, 493, 158, 159, 0, 254, 209, 0, 0, 253,
	210, 211, 0, 160, 161, 162, 163, 0, 86, 164,
	165, 0, 0, 166, 167, 168, 212, 213, 0, 169,
	89, 90, 0, 91, 170, 171, 172, 173, 0, 0,
	0, 0, 92, 93, 174, 175, 176, 94, 177, 178,
	0, 95, 179, 96, 0, 0, 180, 181, 0, 182,
	0, 0, 0, 97, 98, 99, 0, 100, 0, 101,
	0, 0, 102, 103, 0, 0, 0, 0, 0, 0,
	104, 105, 106, 107, 183, 108, 184, 185, 0, 0,
	109, 0, 0, 0, 110, 111, 0, 0, 0, 0,
	186, 112, 187, 0, 0, 113, 114, 188, 115, 0,
	0, 0, 0, 0, 116, 189, 0, 190, 0, 117,
	269, 192, 0, 0, 0, 0, 118, 193, 194, 195,
	0, 196, 0, 0, 119, 0, 120, 0, 0, 197,
	0, 121, 0, 0, 250, 0, 0, 0, 122, 123,
	124, 125, 251, 0, 126, 127, 0, 128, 0, 198,
	129, 199, 130, 131, 0, 0, 263, 0, 0, 132,
	200, 0, 133, 0, 201, 134, 135, 0, 202, 136,
	203, 0, 137, 138, 204, 139, 140, 0, 141, 142,
	143, 0, 144, 0, 145, 146, 205, 147, 0, 148,
	149, 0, 150, 252, 0, 151, 152, 0, 153, 206,
	154, 0, 155, 157, 207, 156, 208, 0, 0, 158,
	159, 0, 254, 209, 0, 0, 253, 210, 211, 0,
	160, 161, 162, 163, 0, 86, 164, 165, 0, 0,
	166, 167, 168, 212, 213, 0, 169, 89, 90, 0,
	91, 170, 171, 172, 173, 0, 0, 0, 0, 92,
	93, 174, 175, 176, 94, 177, 178, 0, 95, 179,
	96, 0, 0, 180, 181, 0, 182, 0, 0, 0,
	97, 98, 99, 0, 100, 0, 101, 0, 0, 102,
	103, 0, 0, 0, 0, 0, 0, 104, 105, 106,
	107, 183, 108, 184, 185, 0, 0, 109, 0, 0,
	0, 110, 111, 0, 0, 0, 0, 186, 112, 187,
	0, 0, 113, 114, 188, 115, 0, 0, 0, 0,
	0, 116, 189, 0, 190, 0, 117, 191, 192, 0,
	0, 0, 0, 118, 193, 194, 195, 0, 196, 0,
	0, 119, 0, 120, 0, 0, 197, 0, 121, 0,
	0, 250, 0, 0, 0, 122, 123, 124, 125, 251,
	0, 126, 127, 0, 128, 0, 198, 129, 199, 130,
	131, 0, 0, 0, 0, 0, 132, 200, 0, 133,
	0, 201, 134, 135, 0, 202, 136, 203, 0, 137,
	138, 204, 139, 140, 0, 141, 142, 143, 0, 144,
	0, 145, 146, 205, 147, 0, 148, 149, 0, 150,
	252, 0, 151, 152, 0, 153, 206, 154, 0, 155,
	157, 207, 156, 208, 0, 0, 158, 159, 0, 254,
	209, 0, 0, 253, 210, 211, 0, 160, 161, 162,
	163, 0, 86, 164, 165, 0, 0, 166, 167, 168,
	212, 213, 0, 169, 89, 90, 0, 91, 170, 171,
	172, 173, 0, 0, 0, 0, 92, 93, 174, 175,
	176, 94, 177, 178, 0, 95, 179, 96, 0, 0,
	180, 181, 0, 182, 0, 0, 0, 97, 98, 99,
	0, 100, 0, 101, 0, 0, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 106, 107, 183, 108,
	184, 185, 0, 0, 109, 0, 0, 0, 110, 111,
	0, 0, 0, 0, 186, 112, 187, 0, 0, 113,
	114, 188, 115, 0, 0, 0, 0, 0, 116, 189,
	0, 190, 0, 117, 1011, 192, 0, 0, 0, 0,
	118, 193, 194, 195, 0, 196, 0, 0, 119, 0,
	120, 0, 0, 197, 0, 121, 0, 0, 250, 0,
	0, 0, 122, 123, 124, 125, 251, 0, 126, 127,
	0, 128, 0, 198, 129, 199, 130, 131, 0, 0,
	0, 0, 0, 132, 200, 0, 133, 0, 201, 134,
	135, 0, 202, 136, 203, 0, 137, 138, 204, 139,
	140, 0, 141, 142, 143, 0, 144, 0, 145, 146,
	205, 147, 0, 148, 149, 0, 150, 252, 0, 151,
	152, 0, 153, 206, 154, 0, 155, 157, 207, 156,
	208, 0, 0, 158, 159, 0, 254, 209, 0, 0,
	253, 210, 211, 0, 160, 161, 162, 163, 0, 86,
	164, 165, 0, 0, 166, 167, 168, 212, 213, 0,
	169, 89, 90, 0, 91, 170, 171, 172, 173, 0,
	0, 0, 0, 92, 93, 174, 175, 176, 94, 177,
	178, 0, 95, 179, 96, 0, 0, 180, 181, 0,
	182, 0, 0, 0, 97, 98, 99, 0, 100, 0,
	101, 0, 0, 102, 103, 0, 0, 0, 0, 0,
	0, 104, 105, 106, 107, 183, 108, 184, 185, 0,
	0, 109, 0, 0, 0, 110, 111, 0, 0, 0,
	0, 186, 112, 187, 0, 0, 113, 114, 188, 115,
	0, 0, 0, 0, 0, 116, 189, 0, 190, 0,
	117, 1009, 192, 0, 0, 0, 0, 118, 193, 194,
	195, 0, 196, 0, 0, 119, 0, 120, 0, 0,
	197, 0, 121, 0, 0, 250, 0, 0, 0, 122,
	123, 124, 125, 251, 0, 126, 127, 0, 128, 0,
	198, 129, 199, 130, 131, 0, 0, 0, 0, 0,
	132, 200, 0, 133, 0, 201, 134, 135, 0, 202,
	136, 203, 0, 137, 138, 204, 139, 140, 0, 141,
	142, 143, 0, 144, 0, 145, 146, 205, 147, 0,
	148, 149, 0, 150, 252, 0, 151, 152, 0, 153,
	206, 154, 0, 155, 157, 207, 156, 208, 0, 0,
	158, 159, 0, 254, 209, 0, 0, 253, 210, 211,
	0, 160, 161, 162, 163, 0, 86, 164, 165, 0,
	0, 166, 167, 168, 212, 213, 0, 169, 89, 90,
	0, 91, 170, 171, 172, 173, 0, 0, 0, 0,
	92, 93, 174, 175, 176, 94, 177, 178, 0, 95,
	179, 96, 0, 0, 180, 181, 0, 182, 0, 0,
	0, 97, 98, 99, 0, 100, 0, 101, 0, 0,
	102, 103, 0, 0, 0, 0, 0, 0, 104, 105,
	106, 107, 183, 108, 184, 185, 0, 0, 109, 0,
	0, 0, 110, 111, 0, 0, 0, 0, 186, 112,
	187, 0, 0, 113, 114, 188, 115, 0, 0, 0,
	0, 0, 116, 189, 0, 190, 0, 117, 1000, 192,
	0, 0, 0, 0, 118, 193, 194, 195, 0, 196,
	0, 0, 119, 0, 120, 0, 0, 197, 0, 121,
	0, 0, 250, 0, 0, 0, 122, 123, 124, 125,
	251, 0, 126, 127, 0, 128, 0, 198, 129, 199,
	130, 131, 0, 0, 0, 0, 0, 132, 200, 0,
	133, 0, 201, 134, 135, 0, 202, 136, 203, 0,
	137, 138, 204, 139, 140, 0, 141, 142, 143, 0,
	144, 0, 145, 146, 205, 147, 0, 148, 149, 0,
	150, 252, 0, 151, 152, 0, 153, 206, 154, 0,
	155, 157, 207, 156, 208, 0, 0, 158, 159, 0,
	254, 209, 0, 0, 253, 210, 211, 0, 160, 161,
	162, 163, 0, 86, 164, 165, 0, 0, 166, 167,
	168, 212, 213, 0, 169, 89, 90, 0, 91, 170,
	171, 172, 173, 0, 0, 0, 0, 92, 93, 174,
	175, 176, 94, 177, 178, 0, 95, 179, 96, 0,
	0, 180, 181, 0, 182, 0, 0, 0, 97, 98,
	99, 0, 100, 0, 101, 0, 0, 102, 103, 0,
	0, 0, 0, 0, 0, 104, 105, 106, 107, 183,
	108, 184, 185, 0, 0, 109, 0, 0, 0, 110,
	111, 0, 0, 0, 0, 186, 112, 187, 0, 0,
	113, 114, 188, 115, 0, 0, 0, 0, 0, 116,
	189, 0, 190, 0, 117, 623, 192, 0, 0, 0,
	0, 118, 193, 194, 195, 0, 196, 0, 0, 119,
	0, 120, 0, 0, 197, 0, 121, 0, 0, 250,
	0, 0, 0, 122, 123, 124, 125, 251, 0, 126,
	127, 0, 128, 0, 198, 129, 199, 130, 131, 0,
	0, 0, 0, 0, 132, 200, 0, 133, 0, 201,
	134, 135, 0, 202, 136, 203, 0, 137, 138, 204,
	139, 140, 0, 141, 142, 143, 0, 144, 0, 145,
	146, 205, 147, 0, 148, 149, 0, 150, 252, 0,
	151, 152, 0, 153, 206, 154, 0, 155, 157, 207,
	156, 208, 0, 0, 158, 159, 0, 254, 209, 0,
	0, 253, 210, 211, 0, 160, 161, 162, 163, 0,
	86, 164, 165, 0, 0, 166, 167, 168, 212, 213,
	0, 169, 89, 90, 0, 91, 170, 171, 172, 173,
	0, 480, 0, 0, 92, 93, 174, 175, 176, 94,
	177, 178, 0, 95, 179, 96, 0, 0, 180, 181,
	0, 182, 0, 0, 0, 97, 98, 99, 0, 100,
	0, 101, 0, 0, 102, 103, 0, 0, 0, 0,
	0, 0, 104, 105, 106, 107, 183, 108, 184, 185,
	0, 0, 109, 0, 0, 0, 110, 111, 0, 0,
	0, 0, 186, 112, 187, 0, 0, 113, 114, 188,
	115, 0, 0, 0, 0, 0, 116, 189, 0, 190,
	0, 117, 191, 192, 0, 0, 0, 0, 118, 193,
	194, 195, 0, 196, 0, 0, 119, 0, 120, 0,
	0, 197, 0, 121, 0, 0, 250, 0, 0, 0,
	122, 123, 124, 125, 251, 0, 126, 127, 0, 128,
	0, 198, 129, 199, 130, 131, 0, 0, 0, 0,
	0, 132, 200, 0, 133, 0, 201, 134, 135, 0,
	202, 136, 203, 0, 137, 138, 204, 139, 140, 0,
	141, 142, 143, 0, 144, 0, 145, 146, 205, 147,
	0, 148, 149, 0, 150, 252, 0, 0, 152, 0,
	153, 206, 154, 0, 155, 157, 207, 156, 208, 0,
	0, 158, 159, 0, 254, 209, 0, 0, 253, 210,
	211, 0, 160, 161, 162, 163, 0, 86, 164, 165,
	0, 0, 166, 167, 168, 212, 213, 0, 169, 89,
	90, 0, 91, 170, 171, 172, 173, 0, 0, 0,
	0, 92, 93, 174, 175, 176, 94, 177, 178, 0,
	95, 179, 96, 0, 0, 180, 181, 0, 182, 0,
	0, 0, 97, 98, 99, 0, 100, 0, 101, 0,
	0, 102, 103, 0, 0, 0, 0, 0, 0, 104,
	105, 106, 107, 183, 108, 184, 185, 0, 0, 109,
	0, 0, 0, 110, 111, 0, 0, 0, 0, 186,
	112, 187, 0, 0, 113, 114, 188, 115, 0, 0,
	0, 0, 0, 116, 189, 0, 190, 0, 117, 338,
	192, 0, 0, 0, 0, 118, 193, 194, 195, 0,
	196, 0, 0, 119, 0, 120, 0, 0, 197, 0,
	121, 0, 0, 250, 0, 0, 0, 122, 123, 124,
	125, 251, 0, 126, 127, 0, 128, 0, 198, 129,
	199, 130, 131, 0, 0, 0, 0, 0, 132, 200,
	0, 133, 0, 201, 134, 135, 0, 202, 136, 203,
	0, 137, 138, 204, 139, 140, 0, 141, 142, 143,
	0, 144, 0, 145, 146, 205, 147, 0, 148, 149,
	0, 150, 252, 0, 151, 152, 0, 153, 206, 154,
	0, 155, 157, 207, 156, 208, 0, 0, 158, 159,
	0, 254, 209, 0, 0, 253, 210, 211, 0, 160,
	161, 162, 163, 0, 86, 164, 165, 0, 0, 166,
	167, 168, 212, 213, 0, 169, 89, 90, 0, 91,
	170, 171, 172, 173, 0, 0, 0, 0, 92, 93,
	174, 175, 176, 94, 177, 178, 0, 95, 179, 96,
	0, 0, 180, 181, 0, 182, 0, 0, 0, 97,
	98, 99, 0, 100, 0, 101, 0, 0, 102, 103,
	0, 0, 0, 0, 0, 0, 104, 105, 106, 107,
	183, 108, 184, 185, 0, 0, 109, 0, 0, 0,
	110, 111, 0, 0, 0, 0, 186, 112, 187, 0,
	0, 113, 114, 188, 115, 0, 0, 0, 0, 0,
	116, 189, 0, 190, 0, 117, 335, 192, 0, 0,
	0, 0, 118, 193, 194, 195, 0, 196, 0, 0,
	119, 0, 120, 0, 0, 197, 0, 121, 0, 0,
	250, 0, 0, 0, 122, 123, 124, 125, 251, 0,
	126, 127, 0, 128, 0, 198, 129, 199, 130, 131,
	0, 0, 0, 0, 0, 132, 200, 0, 133, 0,
	201, 134, 135, 0, 202, 136, 203, 0, 137, 138,
	204, 139, 140, 0, 141, 142, 143, 0, 144, 0,
	145, 146, 205, 147, 0, 148, 149, 0, 150, 252,
	0, 151, 152, 0, 153, 206, 154, 0, 155, 157,
	207, 156, 208, 0, 0, 158, 159, 0, 254, 209,
	0, 0, 253, 210, 211, 0, 160, 161, 162, 163,
	0, 86, 164, 165, 0, 0, 166, 167, 168, 212,
	213, 0, 169, 89, 90, 0, 91, 170, 171, 172,
	173, 0, 0, 0, 0, 92, 93, 174, 175, 176,
	94, 177, 178, 0, 95, 179, 96, 0, 0, 180,
	181, 0, 182, 0, 0, 0, 97, 98, 99, 0,
	100, 0, 101, 0, 0, 102, 103, 0, 0, 0,
	0, 0, 0, 104, 105, 106, 107, 183, 108, 184,
	185, 0, 0, 109, 0, 0, 0, 110, 111, 0,
	0, 0, 0, 186, 112, 187, 0, 0, 113, 114,
	188, 115, 0, 0, 0, 0, 0, 116, 189, 0,
	190, 0, 117, 191, 192, 0, 0, 0, 0, 118,
	193, 194, 195, 0, 196, 0, 0, 119, 0, 120,
	0, 0, 197, 0, 121, 0, 0, 250, 0, 0,
	0, 122, 123, 124, 125, 83, 0, 126, 127, 0,
	128, 0, 198, 129, 199, 130, 131, 0, 0, 0,
	0, 0, 132, 200, 0, 133, 0, 201, 134, 135,
	0, 202, 136, 203, 0, 137, 138, 204, 139, 140,
	0, 141, 142, 143, 0, 144, 0, 145, 146, 205,
	147, 0, 148, 149, 0, 150, 252, 0, 151, 152,
	0, 153, 206, 154, 0, 155, 157, 207, 156, 208,
	0, 0, 158, 159, 0, 82, 209, 0, 0, 78,
	210, 211, 0, 160, 161, 162, 163, 0, 86, 164,
	165, 0, 0, 166, 167, 168, 212, 213, 0, 169,
	89, 90, 0, 91, 170, 171, 172, 173, 0, 0,
	0, 0, 92, 93, 174, 175, 176, 94, 177, 178,
	0, 95, 179, 96, 0, 0, 180, 181, 0, 182,
	0, 0, 0, 97, 98, 99, 0, 100, 0, 101,
	0, 0, 102, 103, 0, 0, 0, 0, 0, 0,
	104, 105, 106, 107, 183, 108, 184, 185, 0, 0,
	109, 0, 0, 0, 110, 111, 0, 0, 0, 0,
	186, 112, 187, 0, 0, 113, 114, 188, 115, 0,
	0, 0, 0, 0, 116, 189, 0, 190, 0, 117,
	283, 192, 0, 0, 0, 0, 118, 193, 194, 195,
	0, 196, 0, 0, 119, 0, 120, 0, 0, 197,
	0, 121, 0, 0, 250, 0, 0, 0, 122, 123,
	124, 125, 251, 0, 126, 127, 0, 128, 0, 198,
	129, 199, 130, 131, 0, 0, 0, 0, 0, 132,
	200, 0, 133, 0, 201, 134, 135, 0, 202, 136,
	203, 0, 137, 138, 204, 139, 140, 0, 141, 142,
	143, 0, 144, 0, 145, 146, 205, 147, 0, 148,
	149, 0, 150, 252, 0, 151, 152, 0, 153, 206,
	154, 0, 155, 157, 207, 156, 208, 0, 0, 158,
	159, 0, 254, 209, 0, 0, 253, 210, 211, 0,
	160, 161, 162, 163, 0, 86, 164, 165, 0, 0,
	166, 167, 168, 212, 213, 0, 169, 89, 90, 0,
	91, 170, 171, 172, 173, 0, 0, 0, 0, 92,
	93, 174, 175, 176, 94, 177, 178, 0, 95, 179,
	96, 0, 0, 180, 181, 0, 182, 0, 0, 0,
	97, 98, 99, 0, 100, 0, 101, 0, 0, 102,
	103, 0, 0, 0, 0, 0, 0, 104, 105, 106,
	107, 183, 108, 184, 185, 0, 0, 109, 0, 0,
	0, 110, 111, 0, 0, 0, 0, 186, 112, 187,
	0, 0, 113, 114, 188, 115, 0, 0, 0, 0,
	0, 116, 189, 0, 190, 0, 117, 280, 192, 0,
	0, 0, 0, 118, 193, 194, 195, 0, 196, 0,
	0, 119, 0, 120, 0, 0, 197, 0, 121, 0,
	0, 250, 0, 0, 0, 122, 123, 124, 125, 251,
	0, 126, 127, 0, 128, 0, 198, 129, 199, 130,
	131, 0, 0, 0, 0, 0, 132, 200, 0, 133,
	0, 201, 134, 135, 0, 202, 136, 203, 0, 137,
	138, 204, 139, 140, 0, 141, 142, 143, 0, 144,
	0, 145, 146, 205, 147, 0, 148, 149, 0, 150,
	252, 0, 151, 152, 0, 153, 206, 154, 0, 155,
	157, 207, 156, 208, 0, 0, 158, 159, 0, 254,
	209, 0, 0, 253, 210, 211, 0, 160, 161, 162,
	163, 0, 86, 164, 165, 0, 0, 166, 167, 168,
	212, 213, 0, 169, 89, 90, 0, 91, 170, 171,
	172, 173, 0, 0, 0, 0, 92, 93, 174, 175,
	176, 94, 177, 178, 0, 95, 179, 96, 0, 0,
	180, 181, 0, 182, 0, 0, 0, 97, 98, 99,
	0, 100, 0, 101, 0, 0, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 106, 107, 183, 108,
	184, 185, 0, 0, 109, 0, 0, 0, 110, 111,
	0, 0, 0, 0, 186, 112, 187, 0, 0, 113,
	114, 188, 115, 0, 0, 0, 0, 0, 116, 189,
	0, 190, 0, 117, 278, 192, 0, 0, 0, 0,
	118, 193, 194, 195, 0, 196, 0, 0, 119, 0,
	120, 0, 0, 197, 0, 121, 0, 0, 250, 0,
	0, 0, 122, 123, 124, 125, 251, 0, 126, 127,
	0, 128, 0, 198, 129, 199, 130, 131, 0, 0,
	0, 0, 0, 132, 200, 0, 133, 0, 201, 134,
	135, 0, 202, 136, 203, 0, 137, 138, 204, 139,
	140, 0, 141, 142, 143, 0, 144, 0, 145, 146,
	205, 147, 0, 148, 149, 0, 150, 252, 0, 151,
	152, 0, 153, 206, 154, 0, 155, 157, 207, 156,
	208, 0, 0, 158, 159, 0, 254, 209, 0, 0,
	253, 210, 211, 0, 160, 161, 162, 163, 0, 86,
	164, 165, 0, 0, 166, 167, 168, 212, 213, 0,
	169, 89, 90, 0, 91, 170, 171, 172, 173, 0,
	0, 0, 0, 92, 93, 174, 175, 176, 94, 177,
	178, 0, 95, 179, 96, 0, 0, 180, 181, 0,
	182, 0, 0, 0, 97, 98, 99, 0, 100, 0,
	101, 0, 0, 102, 103, 0, 0, 0, 0, 0,
	0, 104, 105, 106, 107, 183, 108, 184, 185, 0,
	0, 109, 0, 0, 0, 110, 111, 0, 0, 0,
	0, 186, 112, 187, 0, 0, 113, 114, 188, 115,
	0, 0, 0, 0, 0, 116, 189, 0, 190, 0,
	117, 272, 192, 0, 0, 0, 0, 118, 193, 194,
	195, 0, 196, 0, 0, 119, 0, 120, 0, 0,
	197, 0, 121, 0, 0, 250, 0, 0, 0, 122,
	123, 124, 125, 251, 0, 126, 127, 0, 128, 0,
	198, 129, 199, 130, 131, 0, 0, 0, 0, 0,
	132, 200, 0, 133, 0, 201, 134, 135, 0, 202,
	136, 203, 0, 137, 138, 204, 139, 140, 0, 141,
	142, 143, 0, 144, 0, 145, 146, 205, 147, 0,
	148, 149, 0, 150, 252, 0, 151, 152, 0, 153,
	206, 154, 0, 155, 157, 207, 156, 208, 0, 0,
	158, 159, 0, 254, 209, 0, 0, 253, 210, 211,
	0, 160, 161, 162, 163, 0, 86, 164, 165, 0,
	0, 166, 167, 168, 212, 213, 0, 169, 89, 90,
	0, 91, 170, 171, 172, 173, 0, 0, 0, 0,
	92, 93, 174, 175, 176, 94, 177, 178, 0, 95,
	179, 96, 0, 0, 180, 181, 0, 182, 0, 0,
	0, 97, 98, 99, 0, 100, 0, 101, 0, 0,
	102, 103, 0, 0, 0, 0, 0, 0, 104, 105,
	106, 107, 183, 108, 184, 185, 0, 0, 109, 0,
	0, 0, 110, 111, 0, 0, 0, 0, 186, 112,
	187, 0, 0, 113, 114, 188, 115, 0, 0, 0,
	0, 0, 116, 189, 0, 190, 0, 117, 191, 192,
	0, 0, 0, 0, 118, 193, 194, 195, 0, 196,
	0, 0, 119, 0, 120, 0, 0, 197, 0, 121,
	0, 0, 250, 0, 0, 0, 122, 123, 124, 125,
	251, 0, 126, 127, 0, 128, 0, 198, 129, 199,
	130, 131, 0, 0, 0, 0, 0, 132, 200, 0,
	133, 0, 201, 134, 135, 0, 202, 136, 203, 0,
	137, 138, 204, 247, 140, 0, 141, 142, 143, 0,
	144, 0, 145, 146, 205, 147, 0, 148, 149, 0,
	150, 252, 0, 151, 152, 0, 153, 206, 154, 0,
	155, 157, 207, 156, 208, 0, 0, 158, 159, 0,
	254, 209, 0, 0, 253, 210, 211, 0, 160, 161,
	162, 163, 0, 86, 164, 165, 0, 0, 166, 167,
	168, 212, 213, 0, 169, 89, 90, 0, 91, 170,
	171, 172, 173, 0, 0, 0, 0, 92, 93, 174,
	175, 176, 94, 177, 178, 0, 95, 179, 96, 0,
	0, 180, 181, 0, 182, 0, 0, 0, 97, 98,
	99, 0, 100, 0, 101, 0, 0, 102, 103, 0,
	0, 0, 0, 0, 0, 104, 105, 106, 107, 183,
	108, 184, 185, 0, 0, 109, 0, 0, 0, 110,
	111, 0, 0, 0, 0, 186, 112, 187, 0, 0,
	113, 114, 188, 115, 0, 0, 0, 0, 0, 116,
	189, 0, 190, 0, 117, 191, 192, 0, 0, 0,
	0, 118, 193, 194, 195, 0, 196, 0, 0, 119,
	0, 120, 0, 0, 197, 0, 121, 0, 0, 76,
	0, 0, 0, 122, 123, 124, 125, 83, 0, 126,
	127, 0, 128, 0, 198, 129, 199, 130, 131, 0,
	0, 0, 0, 0, 132, 200, 0, 133, 0, 201,
	134, 135, 0, 202, 136, 203, 0, 137, 138, 204,
	139, 140, 0, 141, 142, 143, 0, 144, 0, 145,
	146, 205, 147, 0, 148, 149, 0, 150, 77, 0,
	151, 152, 0, 153, 206, 154, 0, 155, 157, 207,
	156, 208, 0, 0, 158, 159, 0, 82, 209, 0,
	0, 78, 210, 211, 0, 160, 161, 162, 163, 0,
	86, 164, 165, 0, 0, 166, 167, 168, 212, 213,
	0, 169, 89, 90, 0, 91, 170, 171, 172, 173,
	0, 0, 0, 0, 92, 93, 174, 175, 176, 94,
	177, 178, 0, 95, 179, 96, 0, 0, 180, 181,
	0, 182, 0, 0, 0, 97, 98, 99, 0, 100,
	0, 101, 0, 0, 102, 103, 0, 0, 0, 0,
	0, 0, 104, 105, 106, 107, 183, 108, 184, 185,
	0, 0, 109, 0, 0, 0, 110, 111, 0, 0,
	0, 0, 186, 112, 187, 0, 0, 113, 114, 188,
	115, 0, 0, 0, 0, 0, 116, 189, 0, 190,
	0, 117, 191, 192, 0, 0, 0, 0, 118, 193,
	194, 195, 0, 196, 0, 0, 119, 0, 120, 0,
	0, 197, 0, 121, 0, 0, 250, 0, 0, 0,
	122, 123, 124, 125, 251, 0, 126, 127, 0, 128,
	0, 198, 129, 199, 130, 131, 0, 0, 0, 0,
	0, 132, 200, 0, 133, 0, 201, 134, 0, 0,
	202, 136, 203, 0, 0, 138, 204, 139, 140, 0,
	141, 142, 143, 0, 144, 0, 145, 146, 205, 0,
	0, 148, 149, 0, 150, 252, 0, 151, 152, 0,
	153, 206, 154, 0, 155, 157, 207, 156, 208, 0,
	0, 158, 159, 0, 254, 209, 0, 0, 253, 210,
	211, 0, 160, 161, 162, 163, 0, 0, 164, 165,
	0, 0, 166, 167, 168, 212, 213, 647, 169, 665,
	666, 667, 0, 170, 171, 172, 173, 0, 0, 668,
	0, 0, 0, 0, 0, 649, 647, 674, 665, 666,
	667, 0, 0, 0, 0, 0, 0, 0, 668, 0,
	0, 0, 0, 648, 649, 0, 674, 0, 0, 662,
	0, 0, 0, 647, 0, 665, 666, 667, 0, 0,
	0, 0, 648, 0, 0, 668, 0, 0, 662, 0,
	0, 649, 0, 674, 0, 0, 0, 0, 0, 647,
	0, 665, 666, 667, 0, 0, 0, 0, 0, 648,
	0, 668, 0, 0, 0, 662, 0, 649, 0, 674,
	0, 0, 0, 0, 0, 675, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 648, 673, 0, 0, 0,
	0, 662, 0, 0, 675, 670, 0, 0, 0, 0,
	663, 0, 0, 0, 0, 673, 0, 0, 0, 0,
	0, 0, 0, 0, 670, 0, 0, 0, 0, 663,
	669, 675, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 673, 0, 0, 0, 0, 0, 0, 669,
	0, 670, 0, 0, 0, 0, 663, 675, 0, 0,
	0, 664, 0, 0, 0, 0, 0, 0, 673, 0,
	672, 0, 0, 0, 0, 0, 669, 670, 0, 0,
	664, 0, 663, 0, 0, 0, 0, 0, 0, 672,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 669, 0, 0, 0, 0, 664, 0, 0,
	0, 0, 0, 0, 0, 0, 672, 0, 671, 0,
	659, 660, 661, 0, 658, 655, 656, 657, 650, 651,
	652, 653, 654, 664, 0, 0, 0, 671, 1533, 659,
	660, 661, 672, 658, 655, 656, 657, 650, 651, 652,
	653, 654, 0, 0, 0, 0, 0, 1532, 0, 0,
	0, 0, 0, 0, 671, 0, 659, 660, 661, 0,
	658, 655, 656, 657, 650, 651, 652, 653, 654, 0,
	0, 0, 0, 0, 1519, 0, 0, 0, 0, 0,
	671, 0, 659, 660, 661, 0, 658, 655, 656, 657,
	650, 651, 652, 653, 654, 647, 0, 665, 666, 667,
	1496, 0, 0, 0, 0, 0, 0, 668, 0, 0,
	0, 0, 0, 649, 647, 674, 665, 666, 667, 0,
	0, 0, 0, 0, 0, 0, 668, 0, 0, 0,
	0, 648, 649, 0, 674, 0, 0, 662, 0, 0,
	0, 647, 0, 665, 666, 667, 0, 0, 0, 0,
	648, 0, 0, 668, 0, 0, 662, 0, 0, 649,
	0, 674, 0, 0, 0, 0, 0, 647, 0, 665,
	666, 667, 0, 0, 0, 0, 0, 648, 0, 668,
	0, 0, 0, 662, 0, 649, 0, 674, 0, 0,
	0, 0, 0, 675, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 648, 673, 0, 0, 0, 0, 662,
	0, 0, 675, 670, 0, 0, 0, 0, 663, 0,
	0, 0, 0, 673, 0, 0, 0, 0, 0, 0,
	0, 0, 670, 0, 0, 0, 0, 663, 669, 675,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	673, 0, 0, 0, 0, 0, 0, 669, 0, 670,
	0, 0, 0, 0, 663, 675, 0, 0, 0, 664,
	0, 0, 0, 0, 0, 0, 673, 0, 672, 0,
	0, 0, 0, 0, 669, 670, 0, 0, 664, 0,
	663, 0, 0, 0, 0, 0, 0, 672, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	669, 0, 0, 0, 0, 664, 0, 0, 0, 0,
	0, 0, 0, 0, 672, 0, 671, 0, 659, 660,
	661, 0, 658, 655, 656, 657, 650, 651, 652, 653,
	654, 664, 0, 0, 0, 671, 1491, 659, 660, 661,
	672, 658, 655, 656, 657, 650, 651, 652, 653, 654,
	0, 0, 0, 0, 0, 1487, 0, 0, 0, 0,
	0, 0, 671, 0, 659, 660, 661, 0, 658, 655,
	656, 657, 650, 651, 652, 653, 654, 0, 0, 0,
	0, 0, 1429, 0, 0, 0, 0, 0, 671, 0,
	659, 660, 661, 0, 658, 655, 656, 657, 650, 651,
	652, 653, 654, 647, 0, 665, 666, 667, 1428, 0,
	0, 0, 0, 0, 0, 668, 0, 0, 0, 0,
	0, 649, 647, 674, 665, 666, 667, 0, 0, 0,
	0, 0, 0, 0, 668, 0, 0, 0, 0, 648,
	649, 0, 674, 0, 0, 662, 0, 0, 0, 647,
	0, 665, 666, 667, 0, 0, 0, 0, 648, 0,
	0, 668, 0, 0, 662, 0, 0, 649, 0, 674,
	0, 0, 0, 0, 0, 647, 0, 665, 666, 667,
	0, 0, 0, 0, 0, 648, 0, 668, 0, 0,
	0, 662, 0, 649, 0, 674, 0, 0, 0, 0,
	0, 675, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 648, 673, 0, 0, 0, 0, 662, 0, 0,
	675, 670, 0, 0, 0, 0, 663, 0, 0, 0,
	0, 673, 0, 0, 0, 0, 0, 0, 0, 0,
	670, 0, 0, 0, 0, 663, 669, 675, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 673, 0,
	0, 0, 0, 0, 0, 669, 0, 670, 0, 0,
	0, 0, 663, 675, 0, 0, 0, 664, 0, 0,
	0, 0, 0, 0, 673, 0, 672, 0, 0, 0,
	0, 0, 669, 670, 0, 0, 664, 0, 663, 0,
	0, 0, 0, 0, 0, 672, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 669, 0,
	0, 0, 0, 664, 0, 0, 0, 0, 0, 0,
	0, 0, 672, 0, 671, 0, 659, 660, 661, 0,
	658, 655, 656, 657, 650, 651, 652, 653, 654, 664,
	0, 0, 0, 671, 1404, 659, 660, 661, 672, 658,
	655, 656, 657, 650, 651, 652, 653, 654, 0, 0,
	0, 0, 0, 1344, 0, 0, 0, 0, 0, 0,
	671, 0, 659, 660, 661, 0, 658, 655, 656, 657,
	650, 651, 652, 653, 654, 0, 0, 0, 0, 0,
	1282, 0, 0, 0, 0, 0, 671, 0, 659, 660,
	661, 0, 658, 655, 656, 657, 650, 651, 652, 653,
	654, 647, 0, 665, 666, 667, 1257, 0, 0, 0,
	0, 0, 0, 668, 0, 0, 0, 0, 0, 649,
	647, 674, 665, 666, 667, 0, 0, 0, 0, 0,
	0, 0, 668, 0, 0, 0, 0, 648, 649, 0,
	674, 0, 0, 662, 0, 0, 0, 647, 0, 665,
	666, 667, 0, 0, 0, 0, 648, 0, 0, 668,
	0, 0, 662, 0, 0, 649, 0, 674, 0, 0,
	0, 0, 0, 647, 0, 665, 666, 667, 0, 0,
	0, 0, 0, 648, 0, 668, 0, 0, 0, 662,
	0, 649, 0, 674, 0, 0, 0, 0, 0, 675,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 648,
	673, 0, 0, 0, 0, 662, 0, 0, 675, 670,
	0, 0, 0, 0, 663, 0, 0, 0, 0, 673,
	0, 1593, 0, 0, 0, 0, 0, 0, 670, 0,
	0, 0, 0, 663, 669, 675, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 673, 0, 1164, 0,
	1163, 0, 0, 669, 0, 670, 0, 0, 0, 0,
	663, 675, 0, 0, 0, 664, 0, 0, 0, 0,
	0, 0, 673, 0, 672, 0, 0, 0, 0, 0,
	669, 670, 0, 0, 664, 0, 663, 0, 0, 0,
	0, 0, 1592, 672, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 669, 0, 0, 0,
	0, 664, 0, 0, 0, 0, 0, 0, 0, 0,
	672, 0, 671, 0, 659, 660, 661, 0, 658, 655,
	656, 657, 650, 651, 652, 653, 654, 664, 0, 0,
	0, 671, 917, 659, 660, 661, 672, 658, 655, 656,
	657, 650, 651, 652, 653, 654, 0, 0, 0, 1328,
	0, 0, 0, 0, 0, 0, 0, 0, 671, 0,
	659, 660, 661, 0, 658, 655, 656, 657, 650, 651,
	652, 653, 654, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 671, 0, 659, 660, 661, 0,
	658, 655, 656, 657, 650, 651, 652, 653, 654, 647,
	0, 665, 666, 667, 0, 0, 0, 0, 0, 0,
	0, 668, 678, 0, 0, 821, 0, 649, 647, 674,
	665, 666, 667, 0, 0, 0, 0, 0, 0, 0,
	668, 0, 0, 677, 0, 648, 649, 0, 674, 0,
	0, 662, 0, 0, 0, 647, 0, 665, 666, 667,
	0, 0, 0, 0, 648, 0, 0, 668, 0, 0,
	662, 0, 0, 649, 0, 674, 822, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 648, 0, 0, 0, 0, 0, 662, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 675, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 673, 0,
	0, 0, 0, 0, 0, 0, 675, 670, 0, 0,
	0, 0, 663, 0, 0, 0, 0, 673, 0, 0,
	0, 0, 0, 0, 0, 0, 670, 0, 0, 0,
	0, 663, 669, 675, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 673, 0, 0, 0, 0, 0,
	0, 669, 0, 670, 0, 0, 0, 0, 663, 0,
	0, 0, 0, 664, 0, 0, 0, 0, 0, 0,
	0, 0, 672, 0, 0, 0, 0, 0, 669, 242,
	0, 0, 664, 647, 0, 665, 666, 667, 0, 0,
	0, 672, 0, 0, 0, 668, 0, 0, 0, 0,
	0, 649, 0, 674, 0, 0, 0, 0, 0, 664,
	0, 0, 0, 0, 0, 0, 0, 0, 672, 648,
	671, 0, 659, 660, 661, 662, 658, 655, 656, 657,
	650, 651, 652, 653, 654, 0, 0, 0, 0, 671,
	0, 659, 660, 661, 0, 658, 655, 656, 657, 650,
	651, 652, 653, 654, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 671, 0, 659, 660,
	661, 0, 658, 655, 656, 657, 650, 651, 652, 653,
	654, 675, 0, 0, 0, 0, 0, 647, 0, 665,
	666, 667, 673, 0, 0, 0, 0, 0, 0, 668,
	0, 670, 0, 0, 0, 649, 663, 674, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 648, 0, 0, 669, 0, 0, 662,
	0, 647, 0, 665, 666, 667, 0, 0, 0, 0,
	0, 0, 0, 668, 0, 0, 1165, 0, 0, 649,
	0, 674, 0, 0, 0, 0, 0, 664, 0, 647,
	0, 665, 666, 667, 0, 0, 672, 648, 0, 0,
	0, 668, 0, 662, 1170, 0, 0, 649, 0, 674,
	1276, 0, 0, 0, 0, 675, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 648, 673, 0, 0, 0,
	0, 662, 0, 0, 0, 670, 0, 0, 0, 0,
	663, 0, 0, 0, 671, 0, 659, 660, 661, 0,
	658, 655, 656, 657, 650, 651, 652, 653, 654, 675,
	669, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	673, 0, 0, 0, 0, 0, 0, 0, 0, 670,
	0, 0, 0, 0, 663, 0, 1134, 675, 1150, 1151,
	1152, 664, 0, 0, 0, 0, 0, 0, 673, 0,
	672, 0, 0, 0, 669, 0, 0, 670, 0, 0,
	0, 0, 663, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1147, 0,
	0, 0, 669, 0, 0, 664, 0, 0, 0, 0,
	0, 0, 1132, 0, 672, 0, 0, 0, 671, 0,
	659, 660, 661, 0, 658, 655, 656, 657, 650, 651,
	652, 653, 654, 664, 0, 0, 0, 0, 0, 0,
	0, 647, 672, 665, 666, 667, 0, 0, 0, 0,
	0, 0, 0, 668, 0, 0, 1127, 0, 0, 649,
	0, 674, 671, 0, 659, 660, 661, 0, 658, 655,
	656, 657, 650, 651, 652, 653, 654, 648, 0, 1148,
	0, 0, 0, 662, 0, 0, 0, 0, 0, 0,
	671, 0, 659, 660, 661, 0, 658, 655, 656, 657,
	650, 651, 652, 653, 654, 0, 0, 0, 0, 0,
	0, 0, 0, 647, 0, 665, 666, 667, 0, 0,
	0, 0, 0, 0, 0, 668, 0, 0, 0, 0,
	1149, 649, 0, 674, 647, 0, 665, 666, 667, 675,
	0, 0, 0, 0, 0, 0, 668, 0, 0, 648,
	673, 0, 649, 0, 674, 662, 0, 0, 0, 670,
	0, 0, 0, 0, 663, 0, 0, 0, 0, 0,
	648, 0, 0, 0, 0, 0, 662, 0, 0, 0,
	0, 0, 0, 0, 669, 0, 0, 0, 0, 1144,
	1145, 1146, 0, 1143, 1140, 1141, 1142, 1135, 1136, 1137,
	1138, 1139, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 675, 0, 0, 0, 664, 0, 647, 0, 665,
	666, 667, 673, 0, 672, 0, 0, 0, 0, 0,
	0, 670, 675, 0, 0, 649, 663, 674, 0, 0,
	0, 0, 0, 673, 0, 0, 0, 0, 0, 0,
	0, 0, 670, 648, 0, 0, 669, 663, 0, 662,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 671, 0, 659, 660, 661, 0, 658, 655,
	656, 657, 650, 651, 652, 653, 654, 664, 0, 647,
	0, 665, 666, 667, 0, 0, 672, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 649, 664, 674,
	0, 0, 0, 0, 0, 675, 0, 672, 0, 0,
	0, 0, 0, 0, 0, 648, 673, 0, 0, 0,
	0, 662, 0, 0, 0, 670, 0, 0, 0, 0,
	663, 0, 0, 0, 671, 0, 659, 660, 661, 0,
	658, 655, 656, 657, 650, 651, 652, 653, 654, 0,
	0, 0, 0, 0, 0, 671, 647, 659, 660, 661,
	0, 658, 655, 656, 657, 650, 651, 652, 653, 654,
	0, 0, 0, 0, 649, 0, 674, 675, 0, 0,
	0, 664, 0, 0, 0, 0, 0, 0, 0, 0,
	672, 0, 648, 0, 0, 0, 0, 670, 662, 0,
	0, 0, 663, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 671, 0,
	659, 660, 661, 0, 658, 655, 656, 657, 650, 651,
	652, 653, 654, 664, 675, 0, 0, 0, 0, 0,
	0, 0, 672, 0, 0, 0, 849, 864, 841, 857,
	856, 0, 0, 842, 670, 0, 0, 866, 865, 663,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 862, 0, 854, 853, 0,
	671, 0, 659, 660, 661, 852, 658, 655, 656, 657,
	650, 651, 652, 653, 654, 0, 0, 0, 851, 0,
	664, 0, 0, 0, 0, 0, 0, 0, 0, 672,
	0, 0, 0, 0, 0, 0, 0, 0, 845, 846,
	847, 0, 525, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 855, 0, 0, 0, 0, 671, 0, 0,
	0, 0, 0, 658, 655, 656, 657, 650, 651, 652,
	653, 654, 0, 0, 0, 850, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	848, 0, 0, 0, 0, 844, 0, 0, 0, 0,
	0, 843, 0, 0, 863, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 867,
}
var sqlPact = [...]int{

	88, -1000, -3, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 653,
	-1000, -1000, -1000, 481, 610, 172, 903, 903, -1000, -1000,
	15339, 1678, 376, 376, 376, 472, 521, 94, -1000, 617,
	42, 15122, 12301, 1045, -8, 11650, 242, 88, 12084, 12301,
	14905, 917, 848, 11650, 14688, 14471, 14254, -1000, 8183, -1000,
	-1000, -1000, -1000, 671, -1000, -12, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 667, -1000, 14037, 14037, 831, -1000,
	-1000, 429, 299, 1060, -1000, 1, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 916, -1000, 661, 912,
	911, 296, 840, -1000, 831, -1000, -1000, -1000, 11650, -1000,
	13820, 873, 13603, -1000, 617, -1000, -1000, -1000, 722, 1042,
	1042, 1042, 1094, 95, 83, 94, -14, 12301, -1000, 243,
	-1000, -1000, -1000, -1000, -1000, -14, 6259, 6259, -1000, -1000,
	242, -1000, 270, 10525, -138, -1000, 5781, -1000, 678, 969,
	550, 529, 966, 11650, 12301, 497, 13386, -1000, 963, 72,
	962, -1000, -23, 959, -1000, -25, -1000, -1000, -1000, -1000,
	-1000, -1000, 242, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 11867, 1096, 11867, -1000,
	-1000, -1000, 801, 8659, 8422, 1026, 675, -1000, -1000, -1000,
	-1, 3614, 12301, 922, 11867, 12301, -1000, 12301, -1000, 796,
	-1000, -1000, 86, -1000, 241, 766, 13169, -1000, 747, -1000,
	722, -1000, 644, 781, 6516, 7233, 94, -1000, -1000, 94,
	94, 7233, -1000, -1000, 12301, -14, 1112, 12301, 910, -15,
	-1000, 17068, -1000, -1000, 7233, 7233, 7233, 7233, 7233, 592,
	239, -1000, -1000, -1000, 4090, -1000, -1000, -138, 239, 255,
	-1000, -1000, 238, -138, -1000, -1000, -1000, -1000, 234, 1201,
	327, -1000, -1000, -1000, 7233, 303, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 921, -1000, -1000, -1000, -1000,
	-1000, -1000, 233, 232, 226, 223, 204, 198, 197, 196,
	195, 192, 191, 189, 188, 579, -1000, 319, -1000, -1000,
	319, 319, -1000, 173, 173, 174, -1000, -1000, -1000, 173,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 187,
	37, -1000, -1000, -1000, 12301, -138, -1000, 3376, 3614, 7233,
	-26, -1000, 17673, -1000, -75, 564, -1000, 11206, 1052, 1050,
	1041, 11650, 439, 436, 12301, 310, 47, 1111, 10051, -1000,
	12301, 12301, -1000, 12301, -1000, -1000, 12301, 12301, 12301, 42,
	10762, 434, -38, 12301, 12301, -1000, 909, 774, -17, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1163,
	-1000, -1000, -1000, -1000, 1188, -17, -1000, -1000, -1000, -1000,
	-1000, 322, -1000, -1000, -1000, -1000, 3614, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 12301, -1000, -1000, -1000, -1000, -1000, 11650,
	10979, 958, 658, 731, -1000, 956, -1000, -1000, -1000, -1000,
	17673, -1000, 17673, 548, 852, -1000, 852, -21, -1000, 17049,
	-1000, 183, -37, -1000, 310, 9814, 6259, 18015, 12301, 442,
	7233, 7233, 7233, 7233, 7233, 7233, 7233, 7233, 7233, 7233,
	7233, 7233, 7233, 7233, 7233, 7233, 7233, 7233, 7233, 7233,
	7233, 857, 432, 1003, 657, 168, 673, 3614, -1000, -1000,
	1143, 1143, 1143, 17777, 17777, 171, -1000, -143, 16731, -22,
	-138, -1000, -1000, 5285, 5046, -138, 3077, -1000, 462, 1186,
	317, 17673, 927, 885, 180, 7233, 771, 7233, 7472, 7233,
	7233, 4329, 7233, 7233, 7233, 7233, 7233, 7233, -1000, 178,
	-1000, -1000, -1000, -1000, 1185, -1000, -1000, 1183, -1000, 1175,
	310, 82, -1000, -1000, -1000, -1000, 2059, 5781, -1000, 594,
	12301, 12301, 12301, -1000, -1000, 723, 12952, -1000, 18015, 12301,
	-1000, 176, 175, 825, 820, 12301, 12301, 12735, 12518, 12301,
	626, 12301, 12301, 518, -1000, 7233, 640, -1000, 9360, 324,
	12301, 31, -1000, -1000, -1000, 282, 12301, -1000, -1000, -1000,
	72, -1000, -23, -1000, -1000, 12301, -38, -39, 12301, -1000,
	510, 563, -1000, -1000, 8896, -1000, -1000, -1000, 462, 1174,
	-1000, -80, -1000, -1000, 81, -45, -1000, -1000, -1000, -1000,
	12301, 199, 12301, 12301, 955, 12301, -1000, -1000, -1000, 7233,
	-1000, -1000, -1000, 42, 12301, -1000, 884, -74, 1516, 11433,
	11433, -1000, 9123, -1000, -1000, 1114, -1000, -1000, -1000, -1000,
	58, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 174, 579, 173, 173, 173, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 319, 319, 319, -1000, -1000, 289,
	486, 486, 1104, 1104, 1104, 1752, 1752, 935, 2033, 17926,
	17926, 17926, 227, 254, 254, 17926, 17926, 17926, 17777, 17694,
	1743, 7233, 414, 646, 168, 7233, -1000, 1191, -1000, -1000,
	-1000, 908, 167, 7472, 7472, -1000, -1000, -1000, 4090, 163,
	-1000, -1000, -1000, -1000, -1000, 159, 7233, -1000, 7233, -114,
	-124, -1000, 17673, -1000, -41, -1000, -1000, -42, 7233, 7233,
	7233, 80, -1000, 410, -1000, 409, 407, 406, -1000, 158,
	78, 466, -1000, 7233, 599, 156, 150, 7233, 17601, 77,
	901, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 73, 17419,
	70, 1849, -1000, 7472, 7472, 7472, 4090, 149, 66, 16803,
	-115, 17391, 6020, 6020, 6020, 61, 17347, 7233, -115, 2761,
	2733, 2470, -43, -47, -48, 1173, -52, 60, 59, 884,
	-1000, -1000, 7233, -1000, -1000, -1000, 405, 386, 948, -1000,
	706, -1000, 656, 7233, 12301, 147, 143, 654, -1000, 946,
	733, 940, 733, -1000, -75, 546, -1000, -1000, 385, 17673,
	-1000, 1046, -53, -1000, -1000, 310, 10051, 5781, -54, -1000,
	-80, -80, -1000, -1000, -1000, -1000, -1000, 55, 12301, -1000,
	10979, 139, 12301, 129, 125, 12301, -1000, -1000, 54, -1000,
	-1000, -1000, -1000, -1000, 879, 1088, 9814, 837, 835, 9814,
	1212, 612, 612, 612, -1000, -1000, -1000, 12301, 123, -1000,
	9597, 53, 1516, 261, 260, -1000, 1172, 7233, 1743, 7233,
	7472, 7472, -1000, 1743, -1000, -1000, -1000, -1000, 899, 122,
	7233, 18015, 2451, 2283, -58, -1000, 4090, 4807, -92, 16485,
	7233, -1000, -1000, 255, -1000, 52, 5542, -1000, 17095, -31,
	-31, -1000, 776, 815, 558, 504, 1171, 1197, 974, -1000,
	7233, 17243, -1000, 10288, 313, 619, 16459, 18015, -1000, 7233,
	-1000, 895, 7233, -1000, 18015, 7472, 7472, 7472, 7472, 7472,
	7472, 7472, 7472, 7472, 7472, 7472, 7472, 7472, 7472, 7472,
	7472, 7472, 7472, 813, 7472, 1133, 1133, 1133, -98, 4568,
	-1000, 905, 895, 7233, 7233, 18015, 51, 50, 49, -1000,
	7233, -115, 7233, 7233, 7233, -1000, -1000, -1000, 48, -1000,
	1148, -1000, -1000, 879, 16750, 12301, 12301, 12301, 934, 945,
	-1000, 16432, -59, 12301, 12301, -1000, 773, 830, 368, 12301,
	-1000, 12301, -1000, 12301, 12301, 12301, 12301, 152, 42, -1000,
	-1000, -1000, 280, 1195, -1000, -1000, 12301, 121, 10979, 7946,
	637, -1000, 308, 7233, 7233, 1516, 9814, 9814, 1119, 833,
	9814, -1000, -1000, -1000, -1000, 119, 12301, 11433, 311, 1147,
	45, 1100, 1743, 378, 218, 7233, 18015, 17849, -60, -1000,
	7233, 7233, -1000, 16413, -64, -1000, 7233, -1000, 17673, -1000,
	1193, 7233, 44, 38, 33, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 32, -1000, -1000, 17673, 7233, -1000, -1000, 15556,
	7233, 30, -1000, 29, 17673, 905, 17673, -1000, 500, 500,
	1133, 1133, 1133, 785, 785, 576, 631, 684, 684, 684,
	354, 383, 383, 684, 684, 684, 893, 707, 118, 2786,
	7233, -65, -1000, -1000, -1000, 17673, 17673, 27, -1000, -1000,
	-1000, -115, 2309, 16167, 16141, -1000, 26, 308, -1000, -1000,
	-1000, -1000, 12301, -1000, 12301, -1000, 12301, 702, -1000, -1000,
	818, 117, 7472, 12301, -1000, 634, -66, -73, 692, -1000,
	663, 7233, -1000, 18015, 733, 733, -1000, 382, 380, -1000,
	979, 7946, 1034, -1000, 114, -1000, -78, 12301, 24, -79,
	-1000, 67, 1065, 7233, -1000, -1000, 113, 12301, -1000, 12301,
	17673, -115, -1000, 1119, -1000, 110, 7233, 9814, -1000, 12301,
	-83, -1000, -1000, 245, 96, -1000, 7233, 7233, 17849, -84,
	-1000, 18015, 1743, 1743, -1000, -1000, 16114, -1000, 17095, -1000,
	-1000, -1000, -1000, 17673, 584, -1000, 16095, -1000, -1000, -1000,
	7472, 891, 103, 18015, 15849, -1000, -1000, 7233, -1000, -1000,
	-1000, -1000, -1000, 1211, -1000, -1000, -1000, 7233, 2786, 87,
	-1000, 102, -1000, -1000, -1000, 549, -1000, -1000, 17673, 1070,
	-1000, -1000, 12301, 12301, 417, -85, 12301, -1000, -1000, 3851,
	634, -90, -1000, 634, 7946, 1038, -138, 12301, 1038, 15823,
	3077, 98, -99, -1000, 1110, -1000, 12301, 17673, -1000, -91,
	-1000, -1000, -1000, 1743, 1743, -1000, -1000, -1000, 16, 619,
	1080, -1000, 17516, 7472, 18015, -97, -1000, 15796, -1000, 15777,
	779, 12301, 12301, 12301, 329, 12301, -1000, -1000, 496, -1000,
	310, -1000, -1000, 634, -1000, -1000, -1000, -1000, -1000, 1065,
	-42, 7946, 12301, 97, -102, -1000, -1000, 537, 7233, 17516,
	-103, -1000, -1000, -1000, 628, 587, -107, -125, 87, -1000,
	7233, -1000, 10051, -1000, -1000, 1038, 8, -131, -1000, -1000,
	-1000, 4, 6994, 6994, -115, -1000, -1000, 635, 633, 495,
	-1000, -1000, -1000, -1000, -1000, 779, 17673, -108, -1000, -1000,
	634, -1000, -1000, -1000, 7709, 643, 534, 16777, -1000, -1000,
	989, -1000, 336, 836, 836, 628, -1000, -1000, 1118, -1000,
	-1000, -1000, -1000, -1000, -1000, 1125, -1000, -1000, 827, -1000,
	-1000, 6755, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1465, 1463, 1122, 1461, 1458, 1448, 1447, 1445, 76,
	1437, 1435, 93, 1434, 75, 1433, 1430, 1429, 47, 1426,
	1423, 1421, 1417, 74, 38, 2000, 103, 94, 1416, 1414,
	1412, 13, 79, 78, 1410, 63, 1407, 555, 1400, 43,
	1405, 46, 12, 97, 1399, 1394, 1386, 1379, 24, 1377,
	1376, 1375, 9, 37, 18, 1372, 21, 54, 1371, 1370,
	71, 1369, 81, 28, 84, 116, 1364, 1363, 512, 1362,
	7, 52, 1360, 31, 1359, 25, 53, 96, 1357, 535,
	45, 17, 42, 1356, 1354, 1351, 56, 62, 44, 1347,
	29, 22, 1345, 51, 1342, 95, 99, 1340, 1336, 1332,
	1331, 1330, 1329, 1071, 1326, 3, 16, 41, 27, 32,
	0, 686, 767, 1322, 57, 26, 40, 35, 1321, 82,
	1318, 1317, 1316, 1315, 1314, 55, 1313, 1312, 49, 108,
	23, 65, 68, 15, 36, 61, 106, 110, 80, 1309,
	89, 1306, 34, 1305, 1304, 274, 60, 1302, 1300, 1299,
	254, 245, 215, 168, 1295, 1294, 192, 50, 1293, 1292,
	58, 1290, 1289, 105, 1288, 98, 87, 1286, 88, 1279,
	69, 1278, 747, 83, 72, 1275, 90, 48, 1273, 1272,
	1268, 19, 2, 8, 5, 6, 4, 33, 30, 1265,
	1259, 91, 66, 1254, 534, 1244, 1239, 20, 1237, 1227,
	14, 1223, 11, 1221, 10, 1, 1220, 104, 1213, 70,
	1212, 1139, 1211, 109, 1209, 1197, 1198, 59,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	4, 4, 33, 33, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 29,
	29, 35, 35, 35, 34, 34, 30, 30, 5, 5,
	5, 9, 10, 10, 10, 10, 10, 10, 64, 64,
	63, 63, 67, 67, 11, 11, 12, 12, 12, 12,
	141, 141, 140, 13, 17, 207, 207, 207, 211, 211,
	212, 212, 213, 213, 213, 213, 213, 213, 213, 209,
	209, 19, 19, 19, 103, 103, 102, 102, 102, 102,
	104, 104, 104, 104, 165, 163, 163, 170, 170, 170,
	46, 46, 46, 46, 46, 162, 162, 162, 162, 171,
	171, 171, 171, 171, 171, 171, 47, 47, 47, 169,
	169, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 164, 164, 208, 208, 210, 210, 8, 8, 48,
	48, 49, 49, 107, 107, 107, 106, 179, 179, 180,
	180, 180, 181, 181, 181, 181, 181, 181, 181, 178,
	178, 176, 176, 177, 177, 177, 177, 214, 214, 105,
	105, 52, 52, 184, 184, 184, 184, 182, 182, 182,
	182, 182, 185, 183, 186, 186, 186, 186, 186, 129,
	129, 129, 22, 7, 7, 92, 92, 56, 56, 133,
	133, 133, 42, 42, 31, 31, 31, 16, 16, 16,
	16, 16, 16, 16, 16, 16, 93, 93, 94, 94,
	21, 21, 21, 216, 216, 36, 36, 37, 6, 6,
	14, 44, 44, 99, 99, 99, 101, 101, 101, 100,
	100, 100, 23, 70, 70, 71, 71, 139, 72, 72,
	18, 18, 25, 25, 24, 24, 24, 24, 24, 24,
	26, 26, 27, 27, 27, 27, 27, 27, 27, 192,
	192, 192, 194, 194, 191, 15, 15, 15, 15, 193,
	193, 215, 215, 79, 79, 79, 51, 50, 50, 54,
	54, 53, 55, 55, 132, 77, 77, 77, 77, 95,
	96, 96, 97, 97, 98, 98, 76, 76, 115, 115,
	28, 28, 60, 60, 61, 61, 134, 134, 134, 134,
	135, 135, 135, 135, 135, 135, 130, 130, 130, 130,
	131, 131, 82, 82, 82, 82, 80, 80, 81, 81,
	136, 136, 136, 136, 78, 78, 137, 137, 137, 108,
	108, 142, 142, 142, 59, 59, 59, 143, 143, 143,
	143, 143, 143, 143, 143, 143, 143, 144, 144, 144,
	144, 146, 146, 146, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 147, 147, 154,
	154, 155, 155, 156, 157, 148, 148, 149, 149, 150,
	151, 158, 158, 158, 160, 160, 152, 152, 153, 87,
	87, 87, 87, 87, 87, 87, 87, 87, 87, 87,
	87, 87, 87, 88, 88, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 187,
	187, 187, 187, 187, 187, 187, 189, 189, 190, 190,
	188, 188, 188, 188, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 188, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 195, 195, 196, 196, 197, 197, 198,
	198, 200, 201, 201, 201, 202, 206, 206, 199, 199,
	203, 203, 203, 204, 204, 205, 205, 205, 205, 205,
	119, 119, 119, 120, 120, 121, 127, 127, 127, 45,
	45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
	45, 45, 45, 45, 45, 40, 40, 40, 65, 65,
	117, 117, 116, 116, 116, 118, 118, 66, 159, 159,
	159, 159, 159, 159, 159, 83, 83, 89, 84, 84,
	85, 85, 85, 85, 85, 85, 90, 91, 86, 86,
	86, 114, 114, 122, 126, 126, 125, 124, 124, 123,
	123, 109, 109, 109, 109, 109, 73, 73, 217, 217,
	128, 128, 74, 74, 75, 69, 69, 68, 68, 138,
	138, 138, 138, 62, 62, 43, 43, 57, 57, 58,
	58, 41, 41, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 113, 113, 161, 161, 161, 38, 38, 38,
	39, 39, 167, 167, 167, 168, 168, 168, 168, 166,
	166, 166, 166, 166, 172, 172, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 172, 172, 172,
	172, 172, 172, 174, 174, 174, 174, 174, 174, 174,
	174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
	174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
	174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
	174, 174, 174, 174, 173, 173, 173, 173, 173, 173,
	173, 173, 173, 173, 173, 173, 173, 175, 175, 175,
	175, 175, 175, 175, 175, 175, 175, 175, 175, 175,
	175, 175, 175, 175, 175, 175, 175, 175, 175, 175,
	175, 175, 175, 175, 175, 175, 175, 175, 175, 175,
	175, 175, 175, 175, 175, 175, 175, 175, 175, 175,
	175, 175, 175, 175, 175, 175, 175, 175, 175, 175,
	175, 175, 175, 175, 175, 175, 175, 175, 175, 175,
	175, 175, 175, 175, 175, 175, 175, 175, 175, 175,
	175, 175, 175, 175, 175,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	4, 6, 1, 3, 2, 5, 3, 6, 4, 6,
	6, 6, 4, 8, 2, 3, 3, 6, 4, 3,
	2, 1, 1, 0, 2, 0, 2, 0, 1, 1,
	1, 5, 3, 5, 4, 6, 3, 5, 1, 3,
	1, 2, 2, 3, 2, 5, 1, 1, 1, 1,
	1, 3, 1, 6, 6, 1, 2, 2, 1, 1,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 2, 3, 3, 2, 1, 3, 3, 3, 3,
	1, 3, 3, 2, 1, 1, 3, 1, 1, 1,
	2, 2, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 5, 1, 1, 1, 1, 1, 0, 1,
	1, 2, 2, 4, 2, 4, 4, 3, 3, 4,
	2, 2, 0, 2, 0, 2, 0, 6, 9, 1,
	0, 1, 3, 1, 1, 1, 3, 2, 0, 3,
	1, 2, 2, 1, 1, 2, 4, 2, 5, 6,
	7, 3, 1, 4, 5, 5, 10, 1, 1, 4,
	0, 3, 0, 2, 2, 2, 0, 1, 1, 2,
	2, 0, 3, 3, 2, 1, 1, 2, 2, 1,
	2, 1, 4, 10, 13, 1, 0, 1, 3, 3,
	3, 5, 2, 0, 1, 1, 0, 6, 6, 8,
	6, 8, 8, 10, 8, 10, 1, 0, 2, 0,
	3, 2, 2, 1, 0, 1, 0, 3, 3, 6,
	6, 1, 3, 1, 4, 2, 8, 5, 0, 4,
	3, 0, 7, 1, 3, 1, 1, 3, 5, 5,
	1, 1, 3, 3, 1, 2, 3, 2, 3, 4,
	1, 1, 8, 8, 1, 2, 4, 4, 4, 2,
	2, 3, 1, 3, 6, 1, 1, 1, 1, 1,
	0, 1, 0, 1, 1, 0, 1, 1, 0, 1,
	0, 3, 1, 3, 2, 2, 2, 1, 1, 2,
	2, 3, 1, 1, 1, 1, 3, 0, 2, 0,
	2, 3, 2, 0, 1, 3, 2, 2, 1, 4,
	3, 4, 5, 4, 5, 4, 5, 2, 4, 1,
	1, 0, 2, 2, 2, 1, 1, 0, 4, 2,
	1, 2, 2, 4, 1, 3, 1, 2, 3, 2,
	0, 2, 5, 2, 3, 4, 0, 1, 1, 1,
	1, 2, 4, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 5, 0, 1, 1, 1, 1, 1, 1,
	2, 2, 2, 2, 2, 1, 1, 3, 0, 1,
	1, 1, 1, 5, 2, 1, 1, 1, 1, 4,
	1, 2, 2, 1, 1, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 0, 1, 4, 1, 3, 3, 5, 2,
	2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 2, 3, 4, 4, 5, 3, 4,
	3, 3, 4, 3, 4, 3, 4, 5, 6, 6,
	7, 6, 7, 6, 7, 3, 4, 4, 6, 2,
	1, 3, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 5, 6, 6, 7, 1, 1, 1,
	3, 1, 1, 1, 2, 2, 2, 1, 1, 3,
	5, 6, 8, 6, 6, 4, 4, 1, 1, 1,
	5, 1, 1, 1, 1, 1, 1, 6, 4, 4,
	4, 4, 6, 5, 5, 5, 4, 8, 6, 6,
	4, 4, 4, 5, 0, 5, 0, 2, 0, 1,
	3, 3, 2, 2, 0, 6, 1, 0, 3, 0,
	2, 2, 0, 1, 4, 2, 2, 2, 2, 2,
	4, 3, 5, 4, 3, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 1, 3,
	1, 3, 3, 3, 2, 1, 3, 3, 1, 1,
	1, 1, 1, 1, 1, 4, 3, 2, 3, 0,
	3, 3, 2, 2, 1, 0, 2, 2, 3, 2,
	1, 1, 3, 5, 1, 2, 4, 2, 0, 1,
	0, 2, 2, 2, 3, 5, 1, 2, 1, 0,
	1, 1, 1, 3, 3, 1, 0, 1, 3, 3,
	2, 1, 1, 1, 3, 1, 2, 1, 3, 3,
	0, 1, 2, 1, 1, 1, 1, 6, 2, 3,
	5, 1, 1, 1, 1, 2, 2, 1, 1, 1,
	1, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -9, -10, -11, -13,
	-14, -16, -17, -18, -19, -20, -21, -22, -23, 19,
	-6, -7, -8, -193, 81, 87, 99, 178, -24, -25,
	191, 192, 29, 50, 180, 216, 56, -192, -27, -26,
	260, 236, 242, 187, -28, 204, 229, 263, 204, 68,
	109, 76, 112, 223, 68, 109, 204, -12, 260, -18,
	-14, -23, -9, -211, 18, -212, -213, 56, 81, 99,
	187, 112, 76, 223, -211, -103, 130, 189, 212, -104,
	-102, -165, 208, 138, -63, -38, 4, -172, -174, 16,
	17, 19, 28, 29, 33, 37, 39, 49, 50, 51,
	53, 55, 58, 59, 66, 67, 68, 69, 71, 76,
	80, 81, 87, 91, 92, 94, 100, 105, 112, 120,
	122, 127, 134, 135, 136, 137, 140, 141, 143, 146,
	148, 149, 155, 158, 161, 162, 165, 168, 169, 171,
	172, 174, 175, 176, 178, 180, 181, 183, 185, 186,
	188, 191, 192, 194, 196, 198, 201, 199, 205, 206,
	216, 217, 218, 219, 222, 223, 226, 227, 228, 232,
	237, 238, 239, 240, 30, 31, 32, 34, 35, 38,
	42, 43, 45, 70, 72, 73, 86, 88, 93, 101,
	103, 106, 107, 113, 114, 115, 117, 125, 145, 147,
	156, 160, 164, 166, 170, 182, 195, 200, 202, 209,
	213, 214, 229, 230, 4, 68, 49, 69, 100, 109,
	205, 208, 212, 18, -216, 212, -216, -216, -215, 204,
	204, -92, 68, 221, -26, -27, -25, -53, -54, 220,
	116, 85, 154, -24, -25, -192, -194, 171, -191, -38,
	130, 138, 189, 212, 208, -194, -50, -51, 18, 78,
	264, -136, -43, 152, -38, -75, 260, -3, -136, 106,
	-38, -43, 106, 97, 118, -137, -136, -38, 106, -62,
	106, -43, -64, 106, -63, -141, -140, -168, 4, -172,
	-174, -173, 229, 47, 57, 98, 111, 119, 121, 126,
	128, 139, 157, 159, 179, 193, 151, 264, 151, -103,
	-103, -37, 120, 210, 245, 97, 240, -47, 6, 74,
	-67, 262, 97, -208, 151, 97, -164, 97, 240, 120,
	-36, -37, -78, -136, -63, 106, 109, -38, 106, -53,
	-54, -77, -95, -96, 129, 150, -79, 18, 78, -79,
	-79, 37, 261, 261, 264, -194, -58, 260, -69, -68,
	-138, -110, 253, -112, 251, 252, 257, 142, 241, -119,
	221, -43, -113, 9, 260, -122, -189, -25, 86, 24,
	-120, -121, 182, -38, 8, 5, 6, 7, -41, -144,
	-153, 215, 89, 144, 40, -187, -188, 4, -172, -167,
	-145, -155, -149, -152, 117, 47, 61, 64, 62, 65,
	190, 224, 41, 88, 160, 164, 202, 213, 214, 106,
	145, 107, 45, 101, 125, 80, 31, 32, 34, 35,
	42, 43, 70, 72, 73, 93, 113, 114, 115, 147,
	170, 195, 209, 230, -173, -156, -157, -150, -151, -158,
	-68, -75, 253, -43, 260, -73, -109, 262, 265, 258,
	-74, -128, -110, 74, -33, 174, -32, 17, 19, 81,
	227, 86, 174, 174, 86, -137, -44, -43, 191, -38,
	25, 86, -35, 264, 39, 176, 86, 264, 86, 261,
	264, -207, -62, 204, 68, -213, -207, 127, -163, 74,
	-170, -162, -129, 9, 215, 89, 151, -169, 5, 252,
	-161, -168, 6, 8, 251, -163, 74, 59, -171, 6,
	4, -153, -129, 74, 130, 117, 262, -166, 4, -172,
	-174, -173, -175, 18, 20, 21, 22, 23, 24, 25,
	26, 27, 36, 40, 41, 44, 46, 48, 54, 56,
	60, 61, 62, 63, 64, 65, 74, 75, 77, 78,
	79, 82, 83, 85, 89, 90, 95, 96, 97, 99,
	102, 104, 108, 109, 110, 116, 118, 123, 124, 129,
	131, 132, 142, 144, 150, 151, 152, 153, 154, 163,
	167, 173, 177, 187, 190, 197, 203, 204, 207, 210,
	211, 215, 220, 221, 224, 225, 231, 233, 234, 235,
	236, -165, -210, 95, -207, -165, -165, 127, -35, 264,
	260, 142, -39, 106, -38, 142, -77, -96, -95, -97,
	-110, 18, -110, -112, -26, -26, -26, -55, -132, -110,
	-191, 25, -57, -38, -60, 97, 264, 10, 46, 28,
	251, 252, 253, 254, 255, 248, 249, 250, 247, 243,
	244, 245, 52, 133, 184, 12, 13, 14, 22, 153,
	128, 241, 193, 119, 30, 108, -40, 25, 4, -45,
	-110, -110, -110, -110, -110, 159, -25, -25, -110, -65,
	-73, -25, -116, 258, 260, -73, 260, 6, 6, 260,
	-123, -110, -195, 237, 95, 260, 260, 260, 260, 260,
	260, 260, 260, 260, 260, 260, 260, 260, 166, -160,
	232, -160, -160, -146, 260, -146, -147, 260, -146, 260,
	-60, -43, -109, -166, 253, -166, -110, 264, 261, 264,
	210, -93, 54, 48, -106, 106, 48, -176, -38, 54,
	-177, 44, 221, 167, 96, -93, 54, -93, 54, 54,
	-136, 210, 210, -43, -108, 234, -99, -18, 260, 74,
	25, -70, -71, -139, -72, -43, 260, -38, -38, -43,
	-62, -63, -64, -12, -140, 210, -62, -57, 97, -46,
	169, 175, 196, 188, 264, 5, 8, 8, 6, 260,
	-166, -209, -38, -136, -48, -49, -107, -106, -178, -176,
	109, 221, 86, 151, 142, 86, -98, 182, 183, 264,
	-31, 26, 77, 260, 264, 261, -108, -61, -134, -136,
	-25, -135, 260, -138, -142, -143, -145, -154, -148, -152,
	-153, 33, 38, 206, 200, 113, 114, 115, 195, 31,
	170, 93, 80, 73, 72, 147, 35, 34, -156, -157,
	-150, -151, 70, 209, 32, 43, 42, 230, -63, 208,
	-110, -110, -110, -110, -110, -110, -110, -110, -110, -110,
	-110, -110, -110, -110, -110, -110, -110, -110, -110, -110,
	-110, 128, 193, 30, 108, 210, 144, 142, 215, 89,
	222, 78, 148, -217, 203, 27, -114, -25, 260, -127,
	23, 197, 18, -166, -119, 182, 260, 261, 264, -65,
	-118, 259, -110, -116, -65, 261, 261, -65, 231, 18,
	78, 253, -87, 239, 136, 71, 105, 135, -88, 186,
	8, -126, -125, 233, -196, 91, 102, 260, -110, -66,
	-159, 4, 239, 136, 71, 105, 135, 186, -83, -110,
	-84, -111, -112, 251, 252, 257, 260, 182, -85, -110,
	-65, -110, 36, 124, 211, -86, -110, 97, -65, -110,
	-110, -110, -65, -65, -65, 260, 8, 8, 8, -108,
	261, 259, 266, -128, -32, -43, -38, -38, 142, -106,
	106, -142, -38, 260, 260, 122, 122, -38, -38, 106,
	-38, 106, -38, -38, -33, 174, -38, -38, 174, -110,
	-101, 151, -62, 229, -38, -60, 264, 245, -62, -35,
	-209, -209, 219, 51, 169, -170, -87, 8, 264, 261,
	264, -39, 109, -63, -43, 86, -38, -132, -15, -18,
	-14, -23, -9, -38, -76, 102, 264, 57, -82, 121,
	139, 98, 126, 179, 111, -131, -130, 25, -38, -131,
	-25, -135, -134, -59, 24, -87, 260, 240, -110, 210,
	-217, 203, -114, -110, 144, 215, 89, 222, 78, 148,
	97, 260, -111, -111, -65, -25, 260, 260, -65, -110,
	264, 259, 259, 264, 261, -54, 264, -53, -110, -65,
	-65, 261, 210, 210, 210, 210, 260, 261, -124, -125,
	82, -110, -201, 158, 260, 260, -110, 25, 261, 97,
	261, -89, 163, 261, 10, 251, 252, 253, 254, 255,
	248, 249, 250, 247, 243, 244, 245, 52, 133, 184,
	12, 13, 14, 119, 108, -111, -111, -111, -65, 260,
	261, -90, -91, 97, 95, 25, -86, -86, -86, 261,
	97, -65, 264, 264, 264, 261, 261, 261, 8, 261,
	264, 261, 261, -76, -110, 210, 210, 86, 142, -179,
	-177, -110, -57, 260, 260, -29, 81, 191, -94, 86,
	-35, 86, -35, 210, -93, 54, 210, 53, 261, -108,
	-71, -128, 261, 261, -38, -107, 260, -39, 260, 260,
	-38, 261, -115, 104, 37, -134, 121, 121, -134, -82,
	121, -80, 157, -80, -80, -38, 260, 261, 258, 258,
	8, -110, -110, -111, -111, 97, 260, -110, -117, -142,
	22, 22, 261, -110, -65, 261, 264, 261, -110, -116,
	261, 231, -54, -54, -54, 136, 105, 135, -88, 135,
	-88, -88, 8, 6, 83, -110, 207, -202, -38, 260,
	234, -53, 261, -142, -110, -90, -110, -142, -111, -111,
	-111, -111, -111, -111, -111, -111, -111, -111, -111, -111,
	-111, -111, -111, -111, -111, -111, 78, 142, 148, -111,
	264, -65, 261, -91, -90, -110, -110, -142, 261, 261,
	261, -65, -110, -110, -110, 261, 8, -115, 259, -38,
	-38, -106, 86, -180, 54, -181, 46, 142, 144, 221,
	167, 44, 74, 173, 261, 261, -57, -57, 142, 74,
	142, 74, 67, 217, -38, -38, -43, -38, -38, -38,
	-100, 260, 151, -18, 245, 6, -57, 260, -48, -56,
	-133, -38, -190, 260, -187, -188, -41, 151, -197, 235,
	-110, -65, -134, -134, -81, 225, 151, 121, -134, 260,
	-57, -130, 259, 8, 8, 261, 22, 22, -110, -117,
	261, 264, -110, -110, 261, 261, -110, 6, -110, 261,
	261, 261, 261, -110, -206, -38, -110, 261, 261, -91,
	97, 78, 148, 260, -110, 261, 261, 264, 261, 261,
	261, -197, -106, -38, -63, 144, 122, 260, -111, -43,
	-105, -214, 55, 201, 261, 261, 144, 144, -110, -142,
	-35, -35, 210, 210, 79, -56, 54, -75, -25, 260,
	261, -57, 261, 261, 264, -42, -73, 46, -42, -110,
	260, -43, -198, -200, -38, -81, 260, -110, -134, -57,
	261, 259, 259, -110, -110, 261, -142, 261, -54, -199,
	162, 261, -111, 97, 260, -117, 261, -110, -181, -110,
	-52, 260, 260, 173, -34, 46, -38, -38, 223, 143,
	261, -38, -105, 261, -105, -133, -31, -63, -31, 261,
	-65, 260, 264, 25, -57, 261, 261, -54, 37, -111,
	-117, 261, 261, 261, -184, 134, -57, -57, -43, -30,
	225, -63, 191, -108, -105, -42, -54, -56, -200, -202,
	261, -203, 168, 183, -65, 261, -182, -185, -183, 151,
	98, 161, 194, 261, 261, -52, -110, -70, -31, 261,
	261, 261, -204, -205, 30, 218, 59, -110, -204, -183,
	151, -185, 151, 223, 76, -184, -108, -105, -205, 165,
	94, 182, 165, 94, -186, 141, 176, 39, 191, -186,
	-182, 22, 16, 144, 74, -205,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 0,
	48, 49, 50, 0, 0, 290, 0, 0, 260, -2,
	0, 0, 234, 234, 234, 292, 206, 289, -2, 300,
	0, 0, 0, 298, 274, 0, 0, -2, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 64, 0, 66,
	67, 68, 69, 0, 78, 79, 80, 82, 83, 84,
	85, 86, 87, 88, 0, 91, 757, 788, 798, 95,
	100, 0, 848, -2, 104, 60, 707, 708, 709, 724,
	725, 726, 727, 728, 729, 730, 731, 732, 733, 734,
	735, 736, 737, 738, 739, 740, 741, 742, 743, 744,
	745, 746, 747, 748, 749, 750, 751, 752, 753, 754,
	755, 756, 758, 759, 760, 761, 763, 764, 765, 766,
	767, 768, 769, 770, 771, 772, 773, 774, 775, 776,
	777, 778, 779, 780, 781, 782, 783, 784, 785, 786,
	787, 789, 790, 791, 792, 793, 794, 795, 796, 797,
	799, 800, 801, 802, 803, 804, 805, 806, 807, 808,
	809, 810, 811, 812, 813, 814, 815, 816, 817, 818,
	819, 820, 821, 822, 823, 824, 825, 826, 827, 828,
	829, 830, 831, 832, 833, 834, 835, 836, 837, 838,
	839, 840, 841, 842, 843, 844, 845, 846, 847, 849,
	850, 851, 852, 853, 131, 132, 0, 134, 144, 0,
	142, 0, 0, 140, 236, 233, 231, 232, 0, 291,
	0, 0, 0, 205, -2, 270, 271, -2, 0, 295,
	295, 295, 0, 0, 271, 0, 279, 776, 282, 690,
	757, 762, 788, 798, 848, 280, 676, 0, 297, 296,
	0, 275, 350, 0, 685, 320, 0, 2, 0, 830,
	0, 0, 830, 0, 0, 0, 356, 52, 830, 43,
	830, 683, 56, 830, 58, 0, 70, 72, 715, 716,
	717, 718, 852, 854, 855, 856, 857, 858, 859, 860,
	861, 862, 863, 864, 865, 866, 0, 0, 0, 92,
	93, 94, 0, 0, 0, 0, 0, 103, 126, 127,
	61, 0, 0, 146, 0, 0, 137, 0, 138, 0,
	230, 235, 43, 354, 0, 830, 711, 238, 830, -2,
	0, 266, 307, 308, 0, 0, 0, 293, 294, 0,
	0, 0, 262, 263, 0, 281, 0, 0, 323, 675,
	677, 681, 682, 435, 0, 0, 0, 0, 0, 0,
	0, 517, 518, 519, 0, 521, 522, 523, 825, 0,
	527, 528, 844, 685, 693, 694, 695, 696, 0, 0,
	0, 701, 702, 703, 660, 564, 537, -2, -2, 691,
	377, 378, 379, 380, -2, 854, 541, 542, 543, 544,
	545, 546, 0, 826, 840, 841, 847, 850, 851, 830,
	837, 831, 821, 828, 836, 745, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, 714, 401, 402, 407, 408, 410,
	323, 321, 351, 352, 0, 686, 666, 0, 0, 0,
	0, 672, 670, 671, 20, 227, 22, 0, 227, 227,
	0, 0, 0, 0, 0, 360, 0, 241, 0, 357,
	0, 0, 54, 0, 41, 42, 0, 0, 0, 290,
	0, 0, 75, 0, 741, 81, 0, 0, 96, 98,
	105, 107, 108, 109, 115, 116, 117, 118, 199, 0,
	201, 129, 130, 704, 0, 97, 99, 101, 102, 119,
	120, 0, 123, 124, 125, 418, 0, 62, 719, 720,
	721, 722, 723, 867, 868, 869, 870, 871, 872, 873,
	874, 875, 876, 877, 878, 879, 880, 881, 882, 883,
	884, 885, 886, 887, 888, 889, 890, 891, 892, 893,
	894, 895, 896, 897, 898, 899, 900, 901, 902, 903,
	904, 905, 906, 907, 908, 909, 910, 911, 912, 913,
	914, 915, 916, 917, 918, 919, 920, 921, 922, 923,
	924, 925, 926, 927, 928, 929, 930, 931, 932, 933,
	934, 935, 936, 937, 938, 939, 940, 941, 942, 943,
	944, 133, 135, 0, 143, 136, 141, 139, 202, 0,
	150, 0, 0, 830, 710, 0, 269, 305, 306, 309,
	312, 313, 310, 435, 276, 277, 278, 301, 302, 216,
	283, 0, 0, 687, 360, 0, 0, 0, 0, 0,
	599, 600, 601, 602, 603, 606, 607, 604, 605, 608,
	609, 610, 611, 0, 0, 612, 613, 614, 0, 0,
	616, 0, 0, 0, 669, 0, 0, 0, 680, 615,
	439, 440, 441, 462, 463, 0, 489, -2, 618, 0,
	524, 525, 526, 0, 0, -2, 0, 698, 432, 0,
	0, 659, 566, 0, 0, 0, 0, 0, 639, 645,
	0, 0, 0, 0, 0, 0, 0, 0, 391, 404,
	414, 412, 411, 393, 0, 392, 390, 0, 394, 0,
	360, 0, 667, 661, 662, 663, 0, 0, 674, 0,
	0, 0, 0, 226, 24, 830, 0, 34, 0, 0,
	172, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 51, 0, 248, 243, 0, 0,
	0, 323, 253, 255, 256, 0, 0, 358, 53, 684,
	43, 59, 57, 65, 71, 0, 76, 77, 0, 237,
	0, 0, 113, 114, 0, 200, 706, 705, 432, 0,
	63, 145, 89, 355, 0, 149, 151, 153, 154, 155,
	711, 0, 0, 0, 0, 0, 311, 314, 315, 0,
	304, 214, 215, 290, 0, 689, 317, 322, 324, 341,
	341, 328, 0, 678, 436, 366, 367, 368, 369, 370,
	432, 373, 374, 375, 376, 384, 385, 386, 387, 388,
	389, 398, 0, 383, 383, 383, 395, 396, 399, 400,
	405, 406, 416, 417, 415, 415, 415, 413, 437, 0,
	442, 443, 444, 445, 446, 447, 448, 449, 450, -2,
	-2, -2, 454, 455, 456, -2, -2, -2, 460, 461,
	-2, 617, 0, 669, 0, 0, 468, 0, 471, 473,
	475, 0, 0, 0, 0, 668, 485, 651, 0, 0,
	596, 597, 598, 679, 470, 0, 0, 520, 0, 0,
	0, 624, 618, 625, 0, -2, 529, 300, 0, 0,
	0, 0, 699, 419, 420, 421, 422, 423, 424, 433,
	0, 658, 654, 0, 574, 0, 0, 0, 0, 0,
	0, 628, 629, 630, 631, 632, 633, 634, 0, 0,
	0, 0, 490, 0, 0, 0, 0, 844, 0, 618,
	644, 0, 0, 0, 0, 0, 618, 0, 650, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 317,
	353, 664, 0, 673, 23, 218, 0, 0, 0, 26,
	830, 158, 0, 0, 0, 0, 0, 229, 35, 830,
	43, 830, 43, 36, 21, 227, 217, 220, 0, 359,
	240, 0, 0, 245, 242, 360, 0, 0, 0, 55,
	73, 74, 110, 111, 112, 106, 121, 0, 0, 147,
	0, 0, 711, 0, 0, 0, 239, 303, 0, 285,
	286, 287, 288, 688, 319, 0, 0, 0, 0, 0,
	0, 347, 347, 347, 345, 326, 340, 0, 339, 327,
	-2, 328, 0, 361, 363, 371, 0, 0, -2, 0,
	0, 0, 486, -2, 469, 472, 474, 476, 0, 0,
	0, 0, 0, 0, 0, 487, 0, 0, 0, 619,
	0, 622, 623, 0, -2, 0, 0, 299, 300, 300,
	300, 535, 0, 0, 0, 0, 0, 0, 0, 655,
	0, 0, 536, 0, 0, 0, 0, 0, 548, 0,
	549, 0, 0, 550, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 492, 493, 494, 0, 0,
	551, 642, 643, 0, 0, 0, 0, 0, 0, 556,
	0, 649, 0, 0, 0, 560, 561, 562, 0, 381,
	0, 397, 409, 319, 0, 0, 0, 0, 0, 156,
	171, 0, 0, 0, 0, 28, 0, 0, 0, 0,
	32, 0, 38, 0, 0, 0, 0, 251, 0, 252,
	254, 257, 0, 0, 90, 152, 0, 0, 150, 0,
	0, 284, 568, 0, 0, 325, 0, 0, 0, 0,
	0, 342, 346, 343, 344, 337, 0, 330, 0, 0,
	0, 438, -2, 0, 0, 0, 0, -2, 0, 620,
	0, 0, 652, 0, 0, 591, 0, -2, 619, 626,
	530, 0, 0, 0, 0, 425, 426, 427, 428, 429,
	430, 431, 0, 700, 653, 657, 0, 572, 573, 577,
	0, 0, 540, 0, 627, 636, 637, 491, 495, 496,
	497, 498, 499, 500, 501, 502, 503, -2, -2, -2,
	507, 508, 509, -2, -2, -2, 0, 0, 0, 638,
	0, 0, 594, 640, 641, 646, 647, 0, 553, 554,
	555, 648, 0, 0, 0, 403, 0, 568, 665, 222,
	224, 25, 0, 157, 0, 160, 0, 0, 163, 164,
	0, 0, 0, 0, 173, 180, 0, 0, 0, 40,
	0, 0, 228, 0, 43, 43, 219, 0, 0, 221,
	0, 0, 0, 244, 0, 122, 0, 0, 0, 0,
	207, 213, 213, 0, 538, 539, 0, 0, 272, 0,
	318, 316, 331, 0, 333, 0, 0, 0, 335, 0,
	0, 329, 364, 0, 0, 372, 0, 0, -2, 0,
	479, 0, -2, -2, 488, 590, 619, 697, 300, 531,
	533, 534, 434, 656, 579, 576, 0, 563, 547, 635,
	0, 0, 0, 0, 619, 593, 552, 0, 558, 559,
	382, 273, 27, 0, 161, 162, 165, 0, 167, 182,
	174, 0, 177, 178, 175, 0, 29, 30, 39, 45,
	31, 37, 0, 0, 0, 0, 0, 258, 259, 0,
	180, 0, 148, 180, 0, 216, 692, 0, 216, 0,
	0, 0, 567, 569, 0, 332, 0, 349, 334, 0,
	338, 365, 362, -2, -2, 480, 621, 592, 0, 300,
	0, 565, -2, 0, 0, 0, 595, 0, 159, 0,
	186, 0, 0, 0, 47, 0, 223, 225, 0, 247,
	360, 250, 169, 180, 203, 208, 209, 212, 210, 213,
	300, 0, 0, 0, 0, 336, 532, 582, 0, -2,
	0, 515, 557, 166, 191, 0, 0, 0, 182, 33,
	0, 44, 0, 249, 170, 216, 0, 0, 570, 571,
	348, 0, 0, 0, 578, 516, 168, 187, 188, 0,
	183, 184, 185, 181, 179, 186, 46, 360, 211, 530,
	180, 575, 580, 583, -2, 801, 738, 0, 581, 189,
	0, 190, 0, 0, 0, 191, 246, 204, 0, 585,
	586, 587, 588, 589, 192, 0, 195, 196, 0, 193,
	176, 0, 194, 197, 198, 584,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 249, 3, 255, 250, 3,
	260, 261, 253, 251, 264, 252, 262, 254, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 266, 263,
	243, 245, 244, 3, 265, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 258, 3, 259, 248, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 247, 3, 257,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 246, 256,
}
var sqlTok3 = [...]int{
	0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lookahead func() int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.lookahead()
}

func sqlNewParser() sqlParser {
	p := &sqlParserImpl{
		lookahead: func() int { return -1 },
	}
	return p
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqllval sqlSymType
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := make([]sqlSymType, sqlMaxDepth)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlchar := -1
	sqltoken := -1 // sqlchar translated into internal numbering
	sqlrcvr.lookahead = func() int { return sqlchar }
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlchar = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlchar < 0 {
		sqlchar, sqltoken = sqllex1(sqllex, &sqllval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlchar = -1
		sqltoken = -1
		sqlVAL = sqllval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlchar < 0 {
			sqlchar, sqltoken = sqllex1(sqllex, &sqllval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlchar = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:439
		{
			sqllex.(*scanner).stmts = sqlDollar[1].stmts
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:445
		{
			if sqlDollar[3].stmt != nil {
				sqlVAL.stmts = append(sqlDollar[1].stmts, sqlDollar[3].stmt)
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:451
		{
			if sqlDollar[1].stmt != nil {
				sqlVAL.stmts = []Statement{sqlDollar[1].stmt}
			} else {
				sqlVAL.stmts = nil
			}
		}
	case 13:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:470
		{
			sqlVAL.stmt = sqlDollar[1].selectStmt
		}
	case 19:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:479
		{
			sqlVAL.stmt = nil
		}
	case 20:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:485
		{
			sqlVAL.stmt = &AlterTable{Table: sqlDollar[3].qname, IfExists: false, Cmds: sqlDollar[4].alterTableCmds}
		}
	case 21:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:489
		{
			sqlVAL.stmt = &AlterTable{Table: sqlDollar[5].qname, IfExists: true, Cmds: sqlDollar[6].alterTableCmds}
		}
	case 22:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:495
		{
			sqlVAL.alterTableCmds = AlterTableCmds{sqlDollar[1].alterTableCmd}
		}
	case 23:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:499
		{
			sqlVAL.alterTableCmds = append(sqlDollar[1].alterTableCmds, sqlDollar[3].alterTableCmd)
		}
	case 24:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:506
		{
			sqlVAL.alterTableCmd = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].colDef}
		}
	case 25:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:511
		{
			sqlVAL.alterTableCmd = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].colDef}
		}
	case 26:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:516
		{
			sqlVAL.alterTableCmd = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].colDef}
		}
	case 27:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:521
		{
			sqlVAL.alterTableCmd = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].colDef}
		}
	case 28:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:525
		{
			unimplemented()
		}
	case 29:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:527
		{
			unimplemented()
		}
	case 30:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:529
		{
			unimplemented()
		}
	case 31:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:532
		{
			sqlVAL.alterTableCmd = &AlterTableDropColumn{columnKeyword: sqlDollar[2].boolVal, IfExists: true, Column: sqlDollar[5].str}
		}
	case 32:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:537
		{
			sqlVAL.alterTableCmd = &AlterTableDropColumn{columnKeyword: sqlDollar[2].boolVal, IfExists: false, Column: sqlDollar[3].str}
		}
	case 33:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:542
		{
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:545
		{
			sqlVAL.alterTableCmd = &AlterTableAddConstraint{ConstraintDef: sqlDollar[2].constraintDef}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:549
		{
			unimplemented()
		}
	case 36:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:551
		{
			unimplemented()
		}
	case 37:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:554
		{
			sqlVAL.alterTableCmd = &AlterTableDropConstraint{IfExists: true, Constraint: sqlDollar[5].str}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:559
		{
			sqlVAL.alterTableCmd = &AlterTableDropConstraint{IfExists: false, Constraint: sqlDollar[3].str}
		}
	case 39:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:564
		{
			unimplemented()
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:565
		{
			unimplemented()
		}
	case 41:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:568
		{
			unimplemented()
		}
	case 42:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:569
		{
			unimplemented()
		}
	case 43:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:570
		{
		}
	case 44:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:573
		{
			unimplemented()
		}
	case 45:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:574
		{
		}
	case 46:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:577
		{
			unimplemented()
		}
	case 47:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:578
		{
		}
	case 51:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:589
		{
			sqlVAL.stmt = &Delete{Table: sqlDollar[4].tblExpr, Where: newWhere(astWhere, sqlDollar[5].expr)}
		}
	case 52:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:596
		{
			sqlVAL.stmt = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 53:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:600
		{
			sqlVAL.stmt = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 54:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:604
		{
			sqlVAL.stmt = &DropIndex{Names: sqlDollar[3].qnames, IfExists: false}
		}
	case 55:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:608
		{
			sqlVAL.stmt = &DropIndex{Names: sqlDollar[5].qnames, IfExists: true}
		}
	case 56:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:612
		{
			sqlVAL.stmt = &DropTable{Names: sqlDollar[3].qnames, IfExists: false}
		}
	case 57:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:616
		{
			sqlVAL.stmt = &DropTable{Names: sqlDollar[5].qnames, IfExists: true}
		}
	case 58:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:622
		{
			sqlVAL.qnames = QualifiedNames{sqlDollar[1].qname}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:626
		{
			sqlVAL.qnames = append(sqlDollar[1].qnames, sqlDollar[3].qname)
		}
	case 60:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:632
		{
			sqlVAL.qname = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:636
		{
			sqlVAL.qname = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].indirect}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:642
		{
			sqlVAL.indirect = Indirection{NameIndirection(sqlDollar[2].str)}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:646
		{
			sqlVAL.indirect = append(sqlDollar[1].indirect, NameIndirection(sqlDollar[3].str))
		}
	case 64:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:653
		{
			sqlVAL.stmt = &Explain{Statement: sqlDollar[2].stmt}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:657
		{
			sqlVAL.stmt = &Explain{Options: sqlDollar[3].strs, Statement: sqlDollar[5].stmt}
		}
	case 66:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:663
		{
			sqlVAL.stmt = sqlDollar[1].selectStmt
		}
	case 70:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:672
		{
			sqlVAL.strs = []string{sqlDollar[1].str}
		}
	case 71:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:676
		{
			sqlVAL.strs = append(sqlDollar[1].strs, sqlDollar[3].str)
		}
	case 73:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:686
		{
			sqlVAL.stmt = &Grant{Privileges: sqlDollar[2].privilegeList, Grantees: NameList(sqlDollar[6].strs), Targets: sqlDollar[4].targetList}
		}
	case 74:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:693
		{
			sqlVAL.stmt = &Revoke{Privileges: sqlDollar[2].privilegeList, Grantees: NameList(sqlDollar[6].strs), Targets: sqlDollar[4].targetList}
		}
	case 75:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:700
		{
			sqlVAL.targetList = TargetList{Tables: QualifiedNames(sqlDollar[1].qnames)}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:704
		{
			// TODO(marc): this is postgres' grammar, but do we really need
			// both "x" and "TABLE X"?
			sqlVAL.targetList = TargetList{Tables: QualifiedNames(sqlDollar[2].qnames)}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:710
		{
			sqlVAL.targetList = TargetList{Databases: NameList(sqlDollar[2].strs)}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:717
		{
			sqlVAL.privilegeList = privilege.List{privilege.ALL}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:720
		{
		}
	case 80:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:724
		{
			sqlVAL.privilegeList = privilege.List{sqlDollar[1].privilegeType}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:728
		{
			sqlVAL.privilegeList = append(sqlDollar[1].privilegeList, sqlDollar[3].privilegeType)
		}
	case 82:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:735
		{
			sqlVAL.privilegeType = privilege.CREATE
		}
	case 83:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:739
		{
			sqlVAL.privilegeType = privilege.DROP
		}
	case 84:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:743
		{
			sqlVAL.privilegeType = privilege.GRANT
		}
	case 85:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:747
		{
			sqlVAL.privilegeType = privilege.SELECT
		}
	case 86:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:751
		{
			sqlVAL.privilegeType = privilege.INSERT
		}
	case 87:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:755
		{
			sqlVAL.privilegeType = privilege.DELETE
		}
	case 88:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:759
		{
			sqlVAL.privilegeType = privilege.UPDATE
		}
	case 89:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:767
		{
			sqlVAL.strs = []string{sqlDollar[1].str}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:771
		{
			sqlVAL.strs = append(sqlDollar[1].strs, sqlDollar[3].str)
		}
	case 91:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:779
		{
			sqlVAL.stmt = sqlDollar[2].stmt
		}
	case 92:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:783
		{
			sqlVAL.stmt = sqlDollar[3].stmt
		}
	case 93:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:787
		{
			sqlVAL.stmt = sqlDollar[3].stmt
		}
	case 94:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:793
		{
			sqlVAL.stmt = &SetTransaction{Isolation: sqlDollar[2].isoLevel}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:800
		{
			sqlVAL.stmt = &Set{Name: sqlDollar[1].qname, Values: sqlDollar[3].exprs}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:804
		{
			sqlVAL.stmt = &Set{Name: sqlDollar[1].qname, Values: sqlDollar[3].exprs}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:808
		{
			sqlVAL.stmt = &Set{Name: sqlDollar[1].qname}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:812
		{
			sqlVAL.stmt = &Set{Name: sqlDollar[1].qname}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:819
		{
			unimplemented()
		}
	case 102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:821
		{
			unimplemented()
		}
	case 103:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:822
		{
			unimplemented()
		}
	case 105:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:829
		{
			sqlVAL.exprs = []Expr{sqlDollar[1].expr}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:833
		{
			sqlVAL.exprs = append(sqlDollar[1].exprs, sqlDollar[3].expr)
		}
	case 109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:841
		{
			sqlVAL.expr = ValArg(sqlDollar[1].str)
		}
	case 110:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:847
		{
			// Mapped to the closest supported isolation level.
			sqlVAL.isoLevel = SnapshotIsolation
		}
	case 111:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:852
		{
			// Mapped to the closest supported isolation level.
			sqlVAL.isoLevel = SnapshotIsolation
		}
	case 112:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:857
		{
			// Mapped to the closest supported isolation level.
			sqlVAL.isoLevel = SnapshotIsolation
		}
	case 113:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:862
		{
			sqlVAL.isoLevel = SnapshotIsolation
		}
	case 114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:866
		{
			sqlVAL.isoLevel = SerializableIsolation
		}
	case 115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:872
		{
			sqlVAL.expr = DBool(true)
		}
	case 116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:876
		{
			sqlVAL.expr = DBool(false)
		}
	case 117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:880
		{
			sqlVAL.expr = DString(sqlDollar[1].str)
		}
	case 119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:896
		{
			unimplemented()
		}
	case 120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:897
		{
			unimplemented()
		}
	case 121:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:898
		{
			unimplemented()
		}
	case 122:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:899
		{
			unimplemented()
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:900
		{
			unimplemented()
		}
	case 124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:901
		{
			unimplemented()
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:902
		{
			unimplemented()
		}
	case 126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:905
		{
			unimplemented()
		}
	case 127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:906
		{
			unimplemented()
		}
	case 128:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:907
		{
		}
	case 129:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:911
		{
			sqlVAL.expr = DString(sqlDollar[1].str)
		}
	case 130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:915
		{
			sqlVAL.expr = DString(sqlDollar[1].str)
		}
	case 131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:921
		{
			sqlVAL.stmt = &Show{Name: sqlDollar[2].str}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:925
		{
			sqlVAL.stmt = &Show{Name: sqlDollar[2].str}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:929
		{
			sqlVAL.stmt = &ShowColumns{Table: sqlDollar[4].qname}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:933
		{
			sqlVAL.stmt = &ShowDatabases{}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:937
		{
			sqlVAL.stmt = &ShowGrants{Targets: sqlDollar[3].targetListPtr, Grantees: sqlDollar[4].strs}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:941
		{
			sqlVAL.stmt = &ShowIndex{Table: sqlDollar[4].qname}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:945
		{
			sqlVAL.stmt = &ShowTables{Name: sqlDollar[3].qname}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:949
		{
			sqlVAL.stmt = nil
		}
	case 139:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:953
		{
			sqlVAL.stmt = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:957
		{
			sqlVAL.stmt = nil
		}
	case 141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:963
		{
			sqlVAL.qname = sqlDollar[2].qname
		}
	case 142:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:967
		{
			sqlVAL.qname = nil
		}
	case 143:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:973
		{
			tmp := sqlDollar[2].targetList
			sqlVAL.targetListPtr = &tmp
		}
	case 144:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:978
		{
			sqlVAL.targetListPtr = nil
		}
	case 145:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:984
		{
			sqlVAL.strs = sqlDollar[2].strs
		}
	case 146:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:988
		{
			sqlVAL.strs = nil
		}
	case 147:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:995
		{
			sqlVAL.stmt = &CreateTable{Table: sqlDollar[3].qname, IfNotExists: false, Defs: sqlDollar[5].tblDefs}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:999
		{
			sqlVAL.stmt = &CreateTable{Table: sqlDollar[6].qname, IfNotExists: true, Defs: sqlDollar[8].tblDefs}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1006
		{
			sqlVAL.tblDefs = nil
		}
	case 151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1012
		{
			sqlVAL.tblDefs = TableDefs{sqlDollar[1].tblDef}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1016
		{
			sqlVAL.tblDefs = append(sqlDollar[1].tblDefs, sqlDollar[3].tblDef)
		}
	case 153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1022
		{
			sqlVAL.tblDef = sqlDollar[1].colDef
		}
	case 155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1027
		{
			sqlVAL.tblDef = sqlDollar[1].constraintDef
		}
	case 156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1033
		{
			sqlVAL.colDef = newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].colType, sqlDollar[3].colQuals)
		}
	case 157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1039
		{
			sqlVAL.colQuals = append(sqlDollar[1].colQuals, sqlDollar[2].colQual)
		}
	case 158:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1043
		{
			sqlVAL.colQuals = nil
		}
	case 159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1049
		{
			// TODO(pmattis): Handle constraint name.
			sqlVAL.colQual = sqlDollar[3].colQual
		}
	case 161:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1054
		{
			unimplemented()
		}
	case 162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1070
		{
			sqlVAL.colQual = NotNullConstraint{}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1074
		{
			sqlVAL.colQual = NullConstraint{}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1078
		{
			sqlVAL.colQual = UniqueConstraint{}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1082
		{
			sqlVAL.colQual = PrimaryKeyConstraint{}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1085
		{
			unimplemented()
		}
	case 167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1087
		{
			if ContainsVars(sqlDollar[2].expr) {
				sqllex.Error("default expression contains a variable")
				return 1
			}
			if containsSubquery(sqlDollar[2].expr) {
				sqllex.Error("default expression contains a subquery")
				return 1
			}
			sqlVAL.colQual = &ColumnDefault{Expr: sqlDollar[2].expr}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1098
		{
			unimplemented()
		}
	case 169:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1102
		{
			sqlVAL.tblDef = &IndexTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: NameList(sqlDollar[4].strs),
				Storing: sqlDollar[6].strs,
			}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1110
		{
			sqlVAL.tblDef = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:    Name(sqlDollar[3].str),
					Columns: NameList(sqlDollar[5].strs),
					Storing: sqlDollar[7].strs,
				},
			}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1125
		{
			sqlVAL.constraintDef = sqlDollar[3].constraintDef
			sqlVAL.constraintDef.setName(Name(sqlDollar[2].str))
		}
	case 172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1130
		{
			sqlVAL.constraintDef = sqlDollar[1].constraintDef
		}
	case 173:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1135
		{
			unimplemented()
		}
	case 174:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1137
		{
			sqlVAL.constraintDef = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameList(sqlDollar[3].strs),
					Storing: sqlDollar[5].strs,
				},
			}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1146
		{
			sqlVAL.constraintDef = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameList(sqlDollar[4].strs),
				},
				PrimaryKey: true,
			}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1155
		{
			unimplemented()
		}
	case 179:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1172
		{
			sqlVAL.strs = sqlDollar[3].strs
		}
	case 180:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1176
		{
			sqlVAL.strs = nil
		}
	case 181:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1182
		{
			sqlVAL.strs = sqlDollar[2].strs
		}
	case 182:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1186
		{
			sqlVAL.strs = nil
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1191
		{
			unimplemented()
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1192
		{
			unimplemented()
		}
	case 185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1193
		{
			unimplemented()
		}
	case 186:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1194
		{
		}
	case 187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1201
		{
			unimplemented()
		}
	case 188:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1202
		{
			unimplemented()
		}
	case 189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1203
		{
			unimplemented()
		}
	case 190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1204
		{
			unimplemented()
		}
	case 191:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1205
		{
		}
	case 192:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1208
		{
			unimplemented()
		}
	case 193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1211
		{
			unimplemented()
		}
	case 194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1214
		{
			unimplemented()
		}
	case 195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1215
		{
			unimplemented()
		}
	case 196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1216
		{
			unimplemented()
		}
	case 197:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1217
		{
			unimplemented()
		}
	case 198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1218
		{
			unimplemented()
		}
	case 199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1222
		{
			sqlVAL.expr = NumVal(sqlDollar[1].str)
		}
	case 200:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1226
		{
			sqlVAL.expr = NumVal("-" + sqlDollar[2].str)
		}
	case 201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1230
		{
			sqlVAL.expr = IntVal(sqlDollar[1].ival)
		}
	case 202:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1237
		{
			sqlVAL.stmt = &Truncate{Tables: sqlDollar[3].qnames}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1244
		{
			sqlVAL.stmt = &CreateIndex{
				Name:    Name(sqlDollar[4].str),
				Table:   sqlDollar[6].qname,
				Unique:  sqlDollar[2].boolVal,
				Columns: sqlDollar[8].strs,
				Storing: sqlDollar[10].strs,
			}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql.y:1254
		{
			sqlVAL.stmt = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].qname,
				Unique:      sqlDollar[2].boolVal,
				IfNotExists: true,
				Columns:     sqlDollar[11].strs,
				Storing:     sqlDollar[13].strs,
			}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1267
		{
			sqlVAL.boolVal = true
		}
	case 206:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1271
		{
			sqlVAL.boolVal = false
		}
	case 207:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1277
		{
			sqlVAL.strs = []string{sqlDollar[1].str}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1281
		{
			sqlVAL.strs = append(sqlDollar[1].strs, sqlDollar[3].str)
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1290
		{
			// TODO(pmattis): Support opt_asc_desc.
			sqlVAL.str = sqlDollar[1].str
		}
	case 210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1294
		{
			unimplemented()
		}
	case 211:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1295
		{
			unimplemented()
		}
	case 212:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1298
		{
			unimplemented()
		}
	case 213:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1299
		{
		}
	case 214:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1303
		{
			sqlVAL.dir = Ascending
		}
	case 215:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1307
		{
			sqlVAL.dir = Descending
		}
	case 216:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1311
		{
			sqlVAL.dir = DefaultDirection
		}
	case 217:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1318
		{
			sqlVAL.stmt = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1322
		{
			sqlVAL.stmt = &RenameTable{Name: sqlDollar[3].qname, NewName: sqlDollar[6].qname, IfExists: false}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1326
		{
			sqlVAL.stmt = &RenameTable{Name: sqlDollar[5].qname, NewName: sqlDollar[8].qname, IfExists: true}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1330
		{
			sqlVAL.stmt = &RenameIndex{Name: sqlDollar[3].qname, NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1334
		{
			sqlVAL.stmt = &RenameIndex{Name: sqlDollar[5].qname, NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 222:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1338
		{
			sqlVAL.stmt = &RenameColumn{Table: sqlDollar[3].qname, Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1342
		{
			sqlVAL.stmt = &RenameColumn{Table: sqlDollar[5].qname, Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 224:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1346
		{
			sqlVAL.stmt = nil
		}
	case 225:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1350
		{
			sqlVAL.stmt = nil
		}
	case 226:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1356
		{
			sqlVAL.boolVal = true
		}
	case 227:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1360
		{
			sqlVAL.boolVal = false
		}
	case 228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1365
		{
		}
	case 229:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1366
		{
		}
	case 230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1371
		{
			sqlVAL.stmt = &BeginTransaction{Isolation: sqlDollar[3].isoLevel}
		}
	case 231:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1375
		{
			sqlVAL.stmt = &CommitTransaction{}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1379
		{
			sqlVAL.stmt = &RollbackTransaction{}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1384
		{
		}
	case 234:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1385
		{
		}
	case 236:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1390
		{
			sqlVAL.isoLevel = UnspecifiedIsolation
		}
	case 237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1396
		{
			sqlVAL.isoLevel = sqlDollar[3].isoLevel
		}
	case 238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1402
		{
			sqlVAL.stmt = &CreateDatabase{Name: Name(sqlDollar[3].str)}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1406
		{
			sqlVAL.stmt = &CreateDatabase{IfNotExists: true, Name: Name(sqlDollar[6].str)}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1412
		{
			sqlVAL.stmt = sqlDollar[5].stmt
			sqlVAL.stmt.(*Insert).Table = sqlDollar[4].qname
		}
	case 243:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1428
		{
			sqlVAL.stmt = &Insert{Rows: sqlDollar[1].selectStmt}
		}
	case 244:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1432
		{
			sqlVAL.stmt = &Insert{Columns: sqlDollar[2].qnames, Rows: sqlDollar[4].selectStmt}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1436
		{
			sqlVAL.stmt = &Insert{}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1441
		{
			unimplemented()
		}
	case 247:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1442
		{
			unimplemented()
		}
	case 248:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1443
		{
		}
	case 249:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1446
		{
			unimplemented()
		}
	case 250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1447
		{
			unimplemented()
		}
	case 251:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1448
		{
		}
	case 252:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1453
		{
			sqlVAL.stmt = &Update{Table: sqlDollar[3].tblExpr, Exprs: sqlDollar[5].updateExprs, Where: newWhere(astWhere, sqlDollar[7].expr)}
		}
	case 253:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1459
		{
			sqlVAL.updateExprs = UpdateExprs{sqlDollar[1].updateExpr}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1463
		{
			sqlVAL.updateExprs = append(sqlDollar[1].updateExprs, sqlDollar[3].updateExpr)
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1473
		{
			sqlVAL.updateExpr = &UpdateExpr{Names: QualifiedNames{sqlDollar[1].qname}, Expr: sqlDollar[3].expr}
		}
	case 258:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1485
		{
			sqlVAL.updateExpr = &UpdateExpr{Tuple: true, Names: sqlDollar[2].qnames, Expr: Tuple(sqlDollar[5].exprs)}
		}
	case 259:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1489
		{
			sqlVAL.updateExpr = &UpdateExpr{Tuple: true, Names: sqlDollar[2].qnames, Expr: &Subquery{Select: sqlDollar[5].selectStmt}}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1536
		{
			sqlVAL.selectStmt = &ParenSelect{Select: sqlDollar[2].selectStmt}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1540
		{
			sqlVAL.selectStmt = &ParenSelect{Select: sqlDollar[2].selectStmt}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1556
		{
			sqlVAL.selectStmt = sqlDollar[1].selectStmt
			if s, ok := sqlVAL.selectStmt.(*Select); ok {
				s.OrderBy = sqlDollar[2].orderBy
			}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1563
		{
			sqlVAL.selectStmt = sqlDollar[1].selectStmt
			if s, ok := sqlVAL.selectStmt.(*Select); ok {
				s.OrderBy = sqlDollar[2].orderBy
				s.Limit = sqlDollar[3].limit
			}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1571
		{
			sqlVAL.selectStmt = sqlDollar[2].selectStmt
		}
	case 268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1575
		{
			sqlVAL.selectStmt = sqlDollar[2].selectStmt
			if s, ok := sqlVAL.selectStmt.(*Select); ok {
				s.OrderBy = sqlDollar[3].orderBy
			}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1582
		{
			sqlVAL.selectStmt = sqlDollar[2].selectStmt
			if s, ok := sqlVAL.selectStmt.(*Select); ok {
				s.OrderBy = sqlDollar[3].orderBy
				s.Limit = sqlDollar[4].limit
			}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1620
		{
			sqlVAL.selectStmt = &Select{
				Exprs:   sqlDollar[3].selExprs,
				From:    sqlDollar[4].tblExprs,
				Where:   newWhere(astWhere, sqlDollar[5].expr),
				GroupBy: sqlDollar[6].groupBy,
				Having:  newWhere(astHaving, sqlDollar[7].expr),
			}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1632
		{
			sqlVAL.selectStmt = &Select{
				Distinct: sqlDollar[2].boolVal,
				Exprs:    sqlDollar[3].selExprs,
				From:     sqlDollar[4].tblExprs,
				Where:    newWhere(astWhere, sqlDollar[5].expr),
				GroupBy:  sqlDollar[6].groupBy,
				Having:   newWhere(astHaving, sqlDollar[7].expr),
			}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1644
		{
			sqlVAL.selectStmt = &Select{
				Exprs:       SelectExprs{StarSelectExpr()},
				From:        TableExprs{&AliasedTableExpr{Expr: sqlDollar[2].qname}},
				tableSelect: true,
			}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1652
		{
			sqlVAL.selectStmt = &Union{
				Type:  astUnion,
				Left:  sqlDollar[1].selectStmt,
				Right: sqlDollar[4].selectStmt,
				All:   sqlDollar[3].boolVal,
			}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1661
		{
			sqlVAL.selectStmt = &Union{
				Type:  astIntersect,
				Left:  sqlDollar[1].selectStmt,
				Right: sqlDollar[4].selectStmt,
				All:   sqlDollar[3].boolVal,
			}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1670
		{
			sqlVAL.selectStmt = &Union{
				Type:  astExcept,
				Left:  sqlDollar[1].selectStmt,
				Right: sqlDollar[4].selectStmt,
				All:   sqlDollar[3].boolVal,
			}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1688
		{
			unimplemented()
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1689
		{
			unimplemented()
		}
	case 281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1690
		{
			unimplemented()
		}
	case 282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1693
		{
			unimplemented()
		}
	case 283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1694
		{
			unimplemented()
		}
	case 284:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1697
		{
			unimplemented()
		}
	case 285:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1701
		{
			sqlVAL.stmt = sqlDollar[1].selectStmt
		}
	case 289:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1709
		{
			unimplemented()
		}
	case 290:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1710
		{
		}
	case 291:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1713
		{
		}
	case 292:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1714
		{
		}
	case 293:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1718
		{
			sqlVAL.boolVal = true
		}
	case 294:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1722
		{
			sqlVAL.boolVal = false
		}
	case 295:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1726
		{
			sqlVAL.boolVal = false
		}
	case 296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1732
		{
			sqlVAL.boolVal = true
		}
	case 297:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1737
		{
		}
	case 298:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1738
		{
		}
	case 299:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1742
		{
			sqlVAL.orderBy = sqlDollar[1].orderBy
		}
	case 300:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1746
		{
			sqlVAL.orderBy = nil
		}
	case 301:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1752
		{
			sqlVAL.orderBy = OrderBy(sqlDollar[3].orders)
		}
	case 302:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1758
		{
			sqlVAL.orders = []*Order{sqlDollar[1].order}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1762
		{
			sqlVAL.orders = append(sqlDollar[1].orders, sqlDollar[3].order)
		}
	case 304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1768
		{
			sqlVAL.order = &Order{Expr: sqlDollar[1].expr, Direction: sqlDollar[2].dir}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1776
		{
			if sqlDollar[1].limit == nil {
				sqlVAL.limit = sqlDollar[2].limit
			} else {
				sqlVAL.limit = sqlDollar[1].limit
				sqlVAL.limit.Offset = sqlDollar[2].limit.Offset
			}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1785
		{
			sqlVAL.limit = sqlDollar[1].limit
			if sqlDollar[2].limit != nil {
				sqlVAL.limit.Count = sqlDollar[2].limit.Count
			}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1796
		{
			if sqlDollar[2].expr == nil {
				sqlVAL.limit = nil
			} else {
				sqlVAL.limit = &Limit{Count: sqlDollar[2].expr}
			}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1809
		{
			sqlVAL.limit = &Limit{Offset: sqlDollar[2].expr}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1816
		{
			sqlVAL.limit = &Limit{Offset: sqlDollar[2].expr}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1823
		{
			sqlVAL.expr = nil
		}
	case 314:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1837
		{
		}
	case 315:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1838
		{
		}
	case 316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1864
		{
			sqlVAL.groupBy = GroupBy(sqlDollar[3].exprs)
		}
	case 317:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1868
		{
			sqlVAL.groupBy = nil
		}
	case 318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1874
		{
			sqlVAL.expr = sqlDollar[2].expr
		}
	case 319:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1878
		{
			sqlVAL.expr = nil
		}
	case 320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1884
		{
			sqlVAL.selectStmt = Values{Tuple(sqlDollar[2].exprs)}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1888
		{
			sqlVAL.selectStmt = append(sqlDollar[1].selectStmt.(Values), Tuple(sqlDollar[3].exprs))
		}
	case 322:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1898
		{
			sqlVAL.tblExprs = sqlDollar[2].tblExprs
		}
	case 323:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1902
		{
			sqlVAL.tblExprs = nil
		}
	case 324:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1908
		{
			sqlVAL.tblExprs = TableExprs{sqlDollar[1].tblExpr}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1912
		{
			sqlVAL.tblExprs = append(sqlDollar[1].tblExprs, sqlDollar[3].tblExpr)
		}
	case 326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1919
		{
			sqlVAL.tblExpr = &AliasedTableExpr{Expr: sqlDollar[1].qname, As: Name(sqlDollar[2].str)}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1923
		{
			sqlVAL.tblExpr = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].selectStmt}, As: Name(sqlDollar[2].str)}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1927
		{
			unimplemented()
		}
	case 330:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1945
		{
			sqlVAL.tblExpr = &ParenTableExpr{Expr: sqlDollar[2].tblExpr}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1949
		{
			sqlVAL.tblExpr = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].tblExpr, Right: sqlDollar[4].tblExpr}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1953
		{
			sqlVAL.tblExpr = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].tblExpr, Right: sqlDollar[4].tblExpr, Cond: sqlDollar[5].joinCond}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1957
		{
			sqlVAL.tblExpr = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].tblExpr, Right: sqlDollar[3].tblExpr, Cond: sqlDollar[4].joinCond}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1961
		{
			sqlVAL.tblExpr = &JoinTableExpr{Join: astNaturalJoin, Left: sqlDollar[1].tblExpr, Right: sqlDollar[5].tblExpr}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1965
		{
			sqlVAL.tblExpr = &JoinTableExpr{Join: astNaturalJoin, Left: sqlDollar[1].tblExpr, Right: sqlDollar[4].tblExpr}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1970
		{
			unimplemented()
		}
	case 337:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1972
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 338:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1975
		{
			unimplemented()
		}
	case 339:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1977
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 341:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1984
		{
			sqlVAL.str = ""
		}
	case 342:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1990
		{
			sqlVAL.str = astFullJoin
		}
	case 343:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1994
		{
			sqlVAL.str = astLeftJoin
		}
	case 344:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1998
		{
			sqlVAL.str = astRightJoin
		}
	case 345:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2002
		{
			sqlVAL.str = astInnerJoin
		}
	case 346:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2008
		{
		}
	case 347:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2009
		{
		}
	case 348:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2020
		{
			sqlVAL.joinCond = &UsingJoinCond{Cols: NameList(sqlDollar[3].strs)}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2024
		{
			sqlVAL.joinCond = &OnJoinCond{Expr: sqlDollar[2].expr}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2030
		{
			sqlVAL.qname = sqlDollar[1].qname
		}
	case 351:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2034
		{
			// TODO(pmattis): Handle the "*".
			sqlVAL.qname = sqlDollar[1].qname
		}
	case 352:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2039
		{
			// TODO(pmattis): Support ONLY.
			sqlVAL.qname = sqlDollar[2].qname
		}
	case 353:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2044
		{
			// TODO(pmattis): Support ONLY.
			sqlVAL.qname = sqlDollar[3].qname
		}
	case 354:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2051
		{
			sqlVAL.qnames = QualifiedNames{sqlDollar[1].qname}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2055
		{
			sqlVAL.qnames = append(sqlDollar[1].qnames, sqlDollar[3].qname)
		}
	case 356:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2068
		{
			sqlVAL.tblExpr = &AliasedTableExpr{Expr: sqlDollar[1].qname}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2072
		{
			sqlVAL.tblExpr = &AliasedTableExpr{Expr: sqlDollar[1].qname, As: Name(sqlDollar[2].str)}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2076
		{
			sqlVAL.tblExpr = &AliasedTableExpr{Expr: sqlDollar[1].qname, As: Name(sqlDollar[3].str)}
		}
	case 359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2082
		{
			sqlVAL.expr = sqlDollar[2].expr
		}
	case 360:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2086
		{
			sqlVAL.expr = nil
		}
	case 361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2098
		{
			sqlVAL.colType = sqlDollar[1].colType
		}
	case 362:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2102
		{
			unimplemented()
		}
	case 363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2103
		{
			unimplemented()
		}
	case 364:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2106
		{
			unimplemented()
		}
	case 365:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2107
		{
			unimplemented()
		}
	case 366:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2108
		{
		}
	case 372:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2116
		{
			unimplemented()
		}
	case 373:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2118
		{
			sqlVAL.colType = &BytesType{Name: "BLOB"}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2122
		{
			sqlVAL.colType = &BytesType{Name: "BYTES"}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2126
		{
			sqlVAL.colType = &StringType{Name: "TEXT"}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2130
		{
			sqlVAL.colType = &StringType{Name: "STRING"}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2151
		{
			sqlVAL.colType = &DecimalType{Prec: int(sqlDollar[2].ival)}
		}
	case 382:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2155
		{
			sqlVAL.colType = &DecimalType{Prec: int(sqlDollar[2].ival), Scale: int(sqlDollar[4].ival)}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2159
		{
			sqlVAL.colType = &DecimalType{}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2166
		{
			sqlVAL.colType = &IntType{Name: "INT"}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2170
		{
			sqlVAL.colType = &IntType{Name: "INT64"}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2174
		{
			sqlVAL.colType = &IntType{Name: "INTEGER"}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2178
		{
			sqlVAL.colType = &IntType{Name: "SMALLINT"}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2182
		{
			sqlVAL.colType = &IntType{Name: "BIGINT"}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2186
		{
			sqlVAL.colType = &FloatType{Name: "REAL"}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2190
		{
			sqlVAL.colType = &FloatType{Name: "FLOAT", Prec: int(sqlDollar[2].ival)}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2194
		{
			sqlVAL.colType = &FloatType{Name: "DOUBLE PRECISION"}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2198
		{
			sqlVAL.colType = sqlDollar[2].colType
			sqlVAL.colType.(*DecimalType).Name = "DECIMAL"
		}
	case 393:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2203
		{
			sqlVAL.colType = sqlDollar[2].colType
			sqlVAL.colType.(*DecimalType).Name = "DEC"
		}
	case 394:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2208
		{
			sqlVAL.colType = sqlDollar[2].colType
			sqlVAL.colType.(*DecimalType).Name = "NUMERIC"
		}
	case 395:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2213
		{
			sqlVAL.colType = &BoolType{Name: "BOOLEAN"}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2217
		{
			sqlVAL.colType = &BoolType{Name: "BOOL"}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2223
		{
			sqlVAL.ival = sqlDollar[2].ival
		}
	case 398:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2227
		{
			sqlVAL.ival = 0
		}
	case 403:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2245
		{
			sqlVAL.colType = &IntType{Name: "BIT", N: int(sqlDollar[4].ival)}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2251
		{
			sqlVAL.colType = &IntType{Name: "BIT"}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2267
		{
			sqlVAL.colType = sqlDollar[1].colType
			sqlVAL.colType.(*StringType).N = int(sqlDollar[3].ival)
		}
	case 410:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2274
		{
			sqlVAL.colType = sqlDollar[1].colType
		}
	case 411:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2280
		{
			sqlVAL.colType = &StringType{Name: "CHAR"}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2284
		{
			sqlVAL.colType = &StringType{Name: "CHAR"}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2288
		{
			sqlVAL.colType = &StringType{Name: "VARCHAR"}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2293
		{
		}
	case 415:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2294
		{
		}
	case 416:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2299
		{
			sqlVAL.colType = &DateType{}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2303
		{
			sqlVAL.colType = &TimestampType{}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2308
		{
			sqlVAL.colType = &IntervalType{}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2313
		{
			unimplemented()
		}
	case 420:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2314
		{
			unimplemented()
		}
	case 421:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2315
		{
			unimplemented()
		}
	case 422:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2316
		{
			unimplemented()
		}
	case 423:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2317
		{
			unimplemented()
		}
	case 424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2318
		{
			unimplemented()
		}
	case 425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2319
		{
			unimplemented()
		}
	case 426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2320
		{
			unimplemented()
		}
	case 427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2321
		{
			unimplemented()
		}
	case 428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2322
		{
			unimplemented()
		}
	case 429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2323
		{
			unimplemented()
		}
	case 430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2324
		{
			unimplemented()
		}
	case 431:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2325
		{
			unimplemented()
		}
	case 432:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2326
		{
		}
	case 433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2329
		{
			unimplemented()
		}
	case 434:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2330
		{
			unimplemented()
		}
	case 436:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2354
		{
			sqlVAL.expr = &CastExpr{Expr: sqlDollar[1].expr, Type: sqlDollar[3].colType}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2357
		{
			unimplemented()
		}
	case 438:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2358
		{
			unimplemented()
		}
	case 439:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2367
		{
			sqlVAL.expr = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].expr}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2371
		{
			sqlVAL.expr = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].expr}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2375
		{
			sqlVAL.expr = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].expr}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2379
		{
			sqlVAL.expr = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2383
		{
			sqlVAL.expr = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 444:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2387
		{
			sqlVAL.expr = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2391
		{
			sqlVAL.expr = &BinaryExpr{Operator: Div, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2395
		{
			sqlVAL.expr = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2399
		{
			sqlVAL.expr = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2403
		{
			sqlVAL.expr = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2407
		{
			sqlVAL.expr = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2411
		{
			sqlVAL.expr = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2415
		{
			sqlVAL.expr = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2419
		{
			sqlVAL.expr = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2423
		{
			sqlVAL.expr = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2427
		{
			sqlVAL.expr = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2431
		{
			sqlVAL.expr = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2435
		{
			sqlVAL.expr = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2439
		{
			sqlVAL.expr = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2443
		{
			sqlVAL.expr = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2447
		{
			sqlVAL.expr = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2451
		{
			sqlVAL.expr = &AndExpr{Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2455
		{
			sqlVAL.expr = &OrExpr{Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2459
		{
			sqlVAL.expr = &NotExpr{Expr: sqlDollar[2].expr}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2463
		{
			sqlVAL.expr = &NotExpr{Expr: sqlDollar[2].expr}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2467
		{
			sqlVAL.expr = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2471
		{
			sqlVAL.expr = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].expr, Right: sqlDollar[4].expr}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2475
		{
			sqlVAL.expr = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].expr, Right: sqlDollar[4].expr}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2479
		{
			sqlVAL.expr = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].expr, Right: sqlDollar[5].expr}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2483
		{
			sqlVAL.expr = &IsExpr{Operator: IsNull, Expr: sqlDollar[1].expr}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2487
		{
			sqlVAL.expr = &IsExpr{Operator: IsNotNull, Expr: sqlDollar[1].expr}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2490
		{
			unimplemented()
		}
	case 471:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2492
		{
			sqlVAL.expr = &IsExpr{Operator: IsTrue, Expr: sqlDollar[1].expr}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2496
		{
			sqlVAL.expr = &IsExpr{Operator: IsNotTrue, Expr: sqlDollar[1].expr}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2500
		{
			sqlVAL.expr = &IsExpr{Operator: IsFalse, Expr: sqlDollar[1].expr}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2504
		{
			sqlVAL.expr = &IsExpr{Operator: IsNotFalse, Expr: sqlDollar[1].expr}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2508
		{
			sqlVAL.expr = &IsExpr{Operator: IsUnknown, Expr: sqlDollar[1].expr}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2512
		{
			sqlVAL.expr = &IsExpr{Operator: IsNotUnknown, Expr: sqlDollar[1].expr}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2516
		{
			sqlVAL.expr = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].expr, Right: sqlDollar[5].expr}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2520
		{
			sqlVAL.expr = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].expr, Right: sqlDollar[6].expr}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2524
		{
			sqlVAL.expr = &IsOfTypeExpr{Expr: sqlDollar[1].expr, Types: sqlDollar[5].colTypes}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2528
		{
			sqlVAL.expr = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].expr, Types: sqlDollar[6].colTypes}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2532
		{
			sqlVAL.expr = &RangeCond{Left: sqlDollar[1].expr, From: sqlDollar[4].expr, To: sqlDollar[6].expr}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2536
		{
			sqlVAL.expr = &RangeCond{Not: true, Left: sqlDollar[1].expr, From: sqlDollar[5].expr, To: sqlDollar[7].expr}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2540
		{
			sqlVAL.expr = &RangeCond{Left: sqlDollar[1].expr, From: sqlDollar[4].expr, To: sqlDollar[6].expr}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2544
		{
			sqlVAL.expr = &RangeCond{Not: true, Left: sqlDollar[1].expr, From: sqlDollar[5].expr, To: sqlDollar[7].expr}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2548
		{
			sqlVAL.expr = &ComparisonExpr{Operator: In, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2552
		{
			sqlVAL.expr = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].expr, Right: sqlDollar[4].expr}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2555
		{
			unimplemented()
		}
	case 488:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2556
		{
			unimplemented()
		}
	case 489:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2557
		{
			unimplemented()
		}
	case 491:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2569
		{
			sqlVAL.expr = &CastExpr{Expr: sqlDollar[1].expr, Type: sqlDollar[3].colType}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2573
		{
			sqlVAL.expr = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].expr}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2577
		{
			sqlVAL.expr = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].expr}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2581
		{
			sqlVAL.expr = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].expr}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2585
		{
			sqlVAL.expr = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2589
		{
			sqlVAL.expr = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2593
		{
			sqlVAL.expr = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2597
		{
			sqlVAL.expr = &BinaryExpr{Operator: Div, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2601
		{
			sqlVAL.expr = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2605
		{
			sqlVAL.expr = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2609
		{
			sqlVAL.expr = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2613
		{
			sqlVAL.expr = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2617
		{
			sqlVAL.expr = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2621
		{
			sqlVAL.expr = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2625
		{
			sqlVAL.expr = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2629
		{
			sqlVAL.expr = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2633
		{
			sqlVAL.expr = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2637
		{
			sqlVAL.expr = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2641
		{
			sqlVAL.expr = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2645
		{
			sqlVAL.expr = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2649
		{
			sqlVAL.expr = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2653
		{
			sqlVAL.expr = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2657
		{
			sqlVAL.expr = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].expr, Right: sqlDollar[5].expr}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2661
		{
			sqlVAL.expr = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].expr, Right: sqlDollar[6].expr}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2665
		{
			sqlVAL.expr = &IsOfTypeExpr{Expr: sqlDollar[1].expr, Types: sqlDollar[5].colTypes}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2669
		{
			sqlVAL.expr = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].expr, Types: sqlDollar[6].colTypes}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2681
		{
			sqlVAL.expr = sqlDollar[1].qname
		}
	case 519:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2686
		{
			sqlVAL.expr = ValArg(sqlDollar[1].str)
		}
	case 520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2690
		{
			sqlVAL.expr = &ParenExpr{Expr: sqlDollar[2].expr}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2696
		{
			sqlVAL.expr = &Subquery{Select: sqlDollar[1].selectStmt}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2700
		{
			sqlVAL.expr = &Subquery{Select: sqlDollar[1].selectStmt}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2704
		{
			sqlVAL.expr = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].selectStmt}}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2710
		{
			sqlVAL.expr = sqlDollar[2].expr
		}
	case 527:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2714
		{
			sqlVAL.expr = sqlDollar[1].expr
		}
	case 528:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2718
		{
			sqlVAL.expr = sqlDollar[1].expr
		}
	case 529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2726
		{
			sqlVAL.expr = &FuncExpr{Name: sqlDollar[1].qname}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2730
		{
			// TODO(pmattis): Support opt_sort_clause or remove it?
			sqlVAL.expr = &FuncExpr{Name: sqlDollar[1].qname, Exprs: sqlDollar[3].exprs}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2734
		{
			unimplemented()
		}
	case 532:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2735
		{
			unimplemented()
		}
	case 533:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2736
		{
			unimplemented()
		}
	case 534:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2738
		{
			// TODO(pmattis): Support opt_sort_clause or remove it?
			sqlVAL.expr = &FuncExpr{Name: sqlDollar[1].qname, Distinct: true, Exprs: sqlDollar[4].exprs}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2743
		{
			sqlVAL.expr = &FuncExpr{Name: sqlDollar[1].qname, Exprs: Exprs{StarExpr()}}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2756
		{
			// TODO(pmattis): Support within_group_clause, filter_clause and
			// over_clause?
			sqlVAL.expr = sqlDollar[1].expr
		}
	case 537:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2762
		{
			sqlVAL.expr = sqlDollar[1].expr
		}
	case 538:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2771
		{
			unimplemented()
		}
	case 539:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2772
		{
			unimplemented()
		}
	case 540:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2776
		{
			unimplemented()
		}
	case 541:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2778
		{
			sqlVAL.expr = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2782
		{
			sqlVAL.expr = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2785
		{
			unimplemented()
		}
	case 544:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2786
		{
			unimplemented()
		}
	case 545:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2787
		{
			unimplemented()
		}
	case 546:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2788
		{
			unimplemented()
		}
	case 547:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2790
		{
			sqlVAL.expr = &CastExpr{Expr: sqlDollar[3].expr, Type: sqlDollar[5].colType}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2794
		{
			sqlVAL.expr = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].exprs}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2797
		{
			unimplemented()
		}
	case 550:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2798
		{
			unimplemented()
		}
	case 551:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2799
		{
			unimplemented()
		}
	case 552:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2800
		{
			unimplemented()
		}
	case 553:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2801
		{
			unimplemented()
		}
	case 554:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2802
		{
			unimplemented()
		}
	case 555:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2803
		{
			unimplemented()
		}
	case 556:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2804
		{
			unimplemented()
		}
	case 557:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2806
		{
			sqlVAL.expr = &IfExpr{Cond: sqlDollar[3].expr, True: sqlDollar[5].expr, Else: sqlDollar[7].expr}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2810
		{
			sqlVAL.expr = &NullIfExpr{Expr1: sqlDollar[3].expr, Expr2: sqlDollar[5].expr}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2814
		{
			sqlVAL.expr = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].expr, sqlDollar[5].expr}}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2818
		{
			sqlVAL.expr = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].exprs}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2821
		{
			unimplemented()
		}
	case 562:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2822
		{
			unimplemented()
		}
	case 563:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2826
		{
			unimplemented()
		}
	case 564:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2827
		{
		}
	case 565:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2830
		{
			unimplemented()
		}
	case 566:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2831
		{
		}
	case 567:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2835
		{
			unimplemented()
		}
	case 568:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2836
		{
		}
	case 569:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2839
		{
			unimplemented()
		}
	case 570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2840
		{
			unimplemented()
		}
	case 571:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2843
		{
			unimplemented()
		}
	case 572:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2846
		{
			unimplemented()
		}
	case 573:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2847
		{
			unimplemented()
		}
	case 574:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2848
		{
		}
	case 575:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2852
		{
			unimplemented()
		}
	case 576:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2863
		{
			unimplemented()
		}
	case 577:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2864
		{
		}
	case 578:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2867
		{
			unimplemented()
		}
	case 579:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2868
		{
		}
	case 580:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2876
		{
			unimplemented()
		}
	case 581:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2877
		{
			unimplemented()
		}
	case 582:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2878
		{
		}
	case 583:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2881
		{
			unimplemented()
		}
	case 584:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2882
		{
			unimplemented()
		}
	case 585:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2888
		{
			unimplemented()
		}
	case 586:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2889
		{
			unimplemented()
		}
	case 587:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2890
		{
			unimplemented()
		}
	case 588:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2891
		{
			unimplemented()
		}
	case 589:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2892
		{
			unimplemented()
		}
	case 590:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2903
		{
			sqlVAL.expr = Row(sqlDollar[3].exprs)
		}
	case 591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2907
		{
			sqlVAL.expr = Row(nil)
		}
	case 592:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2911
		{
			sqlVAL.expr = Tuple(append(sqlDollar[2].exprs, sqlDollar[4].expr))
		}
	case 593:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2917
		{
			sqlVAL.expr = Row(sqlDollar[3].exprs)
		}
	case 594:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2921
		{
			sqlVAL.expr = Row(nil)
		}
	case 595:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2927
		{
			sqlVAL.expr = Tuple(append(sqlDollar[2].exprs, sqlDollar[4].expr))
		}
	case 596:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2932
		{
			unimplemented()
		}
	case 597:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2933
		{
			unimplemented()
		}
	case 598:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2934
		{
			unimplemented()
		}
	case 599:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2937
		{
			unimplemented()
		}
	case 600:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2938
		{
			unimplemented()
		}
	case 601:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2939
		{
			unimplemented()
		}
	case 602:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2940
		{
			unimplemented()
		}
	case 603:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2941
		{
			unimplemented()
		}
	case 604:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2942
		{
			unimplemented()
		}
	case 605:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2943
		{
			unimplemented()
		}
	case 606:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2944
		{
			unimplemented()
		}
	case 607:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2945
		{
			unimplemented()
		}
	case 608:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2946
		{
			unimplemented()
		}
	case 609:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2947
		{
			unimplemented()
		}
	case 610:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2948
		{
			unimplemented()
		}
	case 611:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2949
		{
			unimplemented()
		}
	case 612:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2950
		{
			unimplemented()
		}
	case 613:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2951
		{
			unimplemented()
		}
	case 614:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2952
		{
			unimplemented()
		}
	case 615:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2955
		{
			unimplemented()
		}
	case 616:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2956
		{
			unimplemented()
		}
	case 617:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2957
		{
			unimplemented()
		}
	case 618:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2968
		{
			sqlVAL.exprs = Exprs{sqlDollar[1].expr}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2972
		{
			sqlVAL.exprs = append(sqlDollar[1].exprs, sqlDollar[3].expr)
		}
	case 620:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2978
		{
			sqlVAL.colTypes = []ColumnType{sqlDollar[1].colType}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2982
		{
			sqlVAL.colTypes = append(sqlDollar[1].colTypes, sqlDollar[3].colType)
		}
	case 622:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2988
		{
			sqlVAL.expr = Array(sqlDollar[2].exprs)
		}
	case 623:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2992
		{
			sqlVAL.expr = Array(sqlDollar[2].exprs)
		}
	case 624:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2996
		{
			sqlVAL.expr = Array(nil)
		}
	case 625:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3002
		{
			sqlVAL.exprs = Exprs{sqlDollar[1].expr}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3006
		{
			sqlVAL.exprs = append(sqlDollar[1].exprs, sqlDollar[3].expr)
		}
	case 627:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3012
		{
			sqlVAL.exprs = Exprs{DString(sqlDollar[1].str), sqlDollar[3].expr}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3033
		{
			unimplemented()
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3034
		{
			unimplemented()
		}
	case 637:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3037
		{
			unimplemented()
		}
	case 638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3041
		{
			unimplemented()
		}
	case 639:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3042
		{
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3056
		{
			unimplemented()
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3057
		{
			unimplemented()
		}
	case 642:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3058
		{
			unimplemented()
		}
	case 643:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3059
		{
			unimplemented()
		}
	case 644:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3060
		{
			unimplemented()
		}
	case 645:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3061
		{
		}
	case 646:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3064
		{
			unimplemented()
		}
	case 647:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3067
		{
			unimplemented()
		}
	case 648:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3070
		{
			unimplemented()
		}
	case 649:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3071
		{
			unimplemented()
		}
	case 650:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3072
		{
			unimplemented()
		}
	case 651:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3076
		{
			sqlVAL.expr = &Subquery{Select: sqlDollar[1].selectStmt}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3080
		{
			sqlVAL.expr = Tuple(sqlDollar[2].exprs)
		}
	case 653:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3091
		{
			sqlVAL.expr = &CaseExpr{Expr: sqlDollar[2].expr, Whens: sqlDollar[3].whens, Else: sqlDollar[4].expr}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3098
		{
			sqlVAL.whens = []*When{sqlDollar[1].when}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3102
		{
			sqlVAL.whens = append(sqlDollar[1].whens, sqlDollar[2].when)
		}
	case 656:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3108
		{
			sqlVAL.when = &When{Cond: sqlDollar[2].expr, Val: sqlDollar[4].expr}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3114
		{
			sqlVAL.expr = sqlDollar[2].expr
		}
	case 658:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3118
		{
			sqlVAL.expr = nil
		}
	case 660:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3125
		{
			sqlVAL.expr = nil
		}
	case 661:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3131
		{
			sqlVAL.indirectElem = NameIndirection(sqlDollar[2].str)
		}
	case 662:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3135
		{
			sqlVAL.indirectElem = qualifiedStar
		}
	case 663:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3139
		{
			sqlVAL.indirectElem = IndexIndirection(sqlDollar[2].str)
		}
	case 664:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3143
		{
			sqlVAL.indirectElem = &ArrayIndirection{Begin: sqlDollar[2].expr}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3147
		{
			sqlVAL.indirectElem = &ArrayIndirection{Begin: sqlDollar[2].expr, End: sqlDollar[4].expr}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3153
		{
			sqlVAL.indirect = Indirection{sqlDollar[1].indirectElem}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3157
		{
			sqlVAL.indirect = append(sqlDollar[1].indirect, sqlDollar[2].indirectElem)
		}
	case 668:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3162
		{
		}
	case 669:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3163
		{
		}
	case 671:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3172
		{
			sqlVAL.expr = DefaultVal{}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3178
		{
			sqlVAL.exprs = []Expr{sqlDollar[1].expr}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3182
		{
			sqlVAL.exprs = append(sqlDollar[1].exprs, sqlDollar[3].expr)
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3191
		{
			sqlVAL.exprs = sqlDollar[2].exprs
		}
	case 676:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3199
		{
			sqlVAL.selExprs = nil
		}
	case 677:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3205
		{
			sqlVAL.selExprs = SelectExprs{sqlDollar[1].selExpr}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3209
		{
			sqlVAL.selExprs = append(sqlDollar[1].selExprs, sqlDollar[3].selExpr)
		}
	case 679:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3215
		{
			sqlVAL.selExpr = SelectExpr{Expr: sqlDollar[1].expr, As: Name(sqlDollar[3].str)}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3224
		{
			sqlVAL.selExpr = SelectExpr{Expr: sqlDollar[1].expr, As: Name(sqlDollar[2].str)}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3228
		{
			sqlVAL.selExpr = SelectExpr{Expr: sqlDollar[1].expr}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3232
		{
			sqlVAL.selExpr = StarSelectExpr()
		}
	case 683:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3240
		{
			sqlVAL.qnames = QualifiedNames{sqlDollar[1].qname}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3244
		{
			sqlVAL.qnames = append(sqlDollar[1].qnames, sqlDollar[3].qname)
		}
	case 685:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3255
		{
			sqlVAL.qname = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3259
		{
			sqlVAL.qname = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].indirect}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3265
		{
			sqlVAL.strs = []string{sqlDollar[1].str}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3269
		{
			sqlVAL.strs = append(sqlDollar[1].strs, sqlDollar[3].str)
		}
	case 689:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3275
		{
			sqlVAL.strs = sqlDollar[2].strs
		}
	case 690:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3278
		{
		}
	case 691:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3288
		{
			sqlVAL.qname = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3292
		{
			sqlVAL.qname = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].indirect}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3299
		{
			sqlVAL.expr = IntVal(sqlDollar[1].ival)
		}
	case 694:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3303
		{
			sqlVAL.expr = NumVal(sqlDollar[1].str)
		}
	case 695:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3307
		{
			sqlVAL.expr = DString(sqlDollar[1].str)
		}
	case 696:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3311
		{
			sqlVAL.expr = DBytes(sqlDollar[1].str)
		}
	case 697:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3314
		{
			unimplemented()
		}
	case 698:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3316
		{
			sqlVAL.expr = &CastExpr{Expr: DString(sqlDollar[2].str), Type: sqlDollar[1].colType}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3320
		{
			// TODO(pmattis): support opt_interval?
			sqlVAL.expr = &CastExpr{Expr: DString(sqlDollar[2].str), Type: sqlDollar[1].colType}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3325
		{
			// TODO(pmattis): Support the precision specification?
			sqlVAL.expr = &CastExpr{Expr: DString(sqlDollar[5].str), Type: sqlDollar[1].colType}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3330
		{
			sqlVAL.expr = DBool(true)
		}
	case 702:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3334
		{
			sqlVAL.expr = DBool(false)
		}
	case 703:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3338
		{
			sqlVAL.expr = DNull
		}
	case 705:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3345
		{
			sqlVAL.ival = +sqlDollar[2].ival
		}
	case 706:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3349
		{
			sqlVAL.ival = -sqlDollar[2].ival
		}
	case 711:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3371
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
