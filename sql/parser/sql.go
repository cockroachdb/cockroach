// Code generated by go yacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"go/constant"
	"go/token"

	"github.com/pkg/errors"

	"github.com/cockroachdb/cockroach/sql/privilege"
	"github.com/cockroachdb/cockroach/util"
)

var errUnimplemented = errors.New("unimplemented")

func unimplemented() {
	panic(errUnimplemented)
}

func unimplementedWithIssue(issue int) {
	panic(util.UnimplementedWithIssueErrorf(issue, ""))
}

//line sql.y:44

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new sytax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in two forms, depending on the
// type of the value being accessed. Values and pointers are directly
// type asserted from the empty interface, meaning that they will panic
// if the type assertion is incorrect. Interfaces are handled differently
// because a nil instance of an interface inserted into the empty interface
// becomes a nil instance of the empty interface and therefore will fail a
// direct type assertion. Instead, a guarded type assertion must be used,
// which returns nil if the type assertion fails.
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	return u.val.(*StrVal)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) qname() *QualifiedName {
	return u.val.(*QualifiedName)
}
func (u *sqlSymUnion) qnames() QualifiedNames {
	return u.val.(QualifiedNames)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	if namePart, ok := u.val.(NamePart); ok {
		return namePart
	}
	return nil
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	if selectStmt, ok := u.val.(*Select); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	if selectStmt, ok := u.val.(SelectStatement); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	if constraintDef, ok := u.val.(ConstraintTableDef); ok {
		return constraintDef
	}
	return nil
}
func (u *sqlSymUnion) tblDef() TableDef {
	if tblDef, ok := u.val.(TableDef); ok {
		return tblDef
	}
	return nil
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	if colQual, ok := u.val.(NamedColumnQualification); ok {
		return colQual
	}
	return NamedColumnQualification{}
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	if colQual, ok := u.val.(ColumnQualification); ok {
		return colQual
	}
	return nil
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retExprs() ReturningExprs {
	return ReturningExprs(u.val.(SelectExprs))
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	if tblExpr, ok := u.val.(TableExpr); ok {
		return tblExpr
	}
	return nil
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	if joinCond, ok := u.val.(JoinCond); ok {
		return joinCond
	}
	return nil
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	if alterTableCmd, ok := u.val.(AlterTableCmd); ok {
		return alterTableCmd
	}
	return nil
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) famElem() FamilyElem {
	return u.val.(FamilyElem)
}
func (u *sqlSymUnion) famElems() FamilyElemList {
	return u.val.(FamilyElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}

//line sql.y:294
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const DOT_DOT = 57353
const LESS_EQUALS = 57354
const GREATER_EQUALS = 57355
const NOT_EQUALS = 57356
const NOT_REGMATCH = 57357
const REGIMATCH = 57358
const NOT_REGIMATCH = 57359
const ERROR = 57360
const ACTION = 57361
const ADD = 57362
const ALL = 57363
const ALTER = 57364
const ANALYSE = 57365
const ANALYZE = 57366
const AND = 57367
const ANY = 57368
const ANNOTATE_TYPE = 57369
const ARRAY = 57370
const AS = 57371
const ASC = 57372
const ASYMMETRIC = 57373
const AT = 57374
const BEGIN = 57375
const BETWEEN = 57376
const BIGINT = 57377
const BIGSERIAL = 57378
const BIT = 57379
const BLOB = 57380
const BOOL = 57381
const BOOLEAN = 57382
const BOTH = 57383
const BY = 57384
const BYTEA = 57385
const BYTES = 57386
const CASCADE = 57387
const CASE = 57388
const CAST = 57389
const CHAR = 57390
const CHARACTER = 57391
const CHARACTERISTICS = 57392
const CHECK = 57393
const COALESCE = 57394
const COLLATE = 57395
const COLLATION = 57396
const COLUMN = 57397
const COLUMNS = 57398
const COMMIT = 57399
const COMMITTED = 57400
const CONCAT = 57401
const CONFLICT = 57402
const CONSTRAINT = 57403
const CONSTRAINTS = 57404
const COVERING = 57405
const CREATE = 57406
const CROSS = 57407
const CUBE = 57408
const CURRENT = 57409
const CURRENT_CATALOG = 57410
const CURRENT_DATE = 57411
const CURRENT_ROLE = 57412
const CURRENT_TIME = 57413
const CURRENT_TIMESTAMP = 57414
const CURRENT_USER = 57415
const CYCLE = 57416
const DATA = 57417
const DATABASE = 57418
const DATABASES = 57419
const DATE = 57420
const DAY = 57421
const DEC = 57422
const DECIMAL = 57423
const DEFAULT = 57424
const DEALLOCATE = 57425
const DEFERRABLE = 57426
const DELETE = 57427
const DESC = 57428
const DISTINCT = 57429
const DO = 57430
const DOUBLE = 57431
const DROP = 57432
const ELSE = 57433
const ENCODING = 57434
const END = 57435
const ESCAPE = 57436
const EXCEPT = 57437
const EXISTS = 57438
const EXECUTE = 57439
const EXPLAIN = 57440
const EXTRACT = 57441
const FALSE = 57442
const FAMILY = 57443
const FETCH = 57444
const FILTER = 57445
const FIRST = 57446
const FLOAT = 57447
const FLOORDIV = 57448
const FOLLOWING = 57449
const FOR = 57450
const FORCE_INDEX = 57451
const FOREIGN = 57452
const FROM = 57453
const FULL = 57454
const GRANT = 57455
const GRANTS = 57456
const GREATEST = 57457
const GROUP = 57458
const GROUPING = 57459
const HAVING = 57460
const HIGH = 57461
const HOUR = 57462
const IF = 57463
const IFNULL = 57464
const ILIKE = 57465
const IN = 57466
const INTERLEAVE = 57467
const INDEX = 57468
const INDEXES = 57469
const INITIALLY = 57470
const INNER = 57471
const INSERT = 57472
const INT = 57473
const INT64 = 57474
const INTEGER = 57475
const INTERSECT = 57476
const INTERVAL = 57477
const INTO = 57478
const IS = 57479
const ISOLATION = 57480
const JOIN = 57481
const KEY = 57482
const KEYS = 57483
const LATERAL = 57484
const LEADING = 57485
const LEAST = 57486
const LEFT = 57487
const LEVEL = 57488
const LIKE = 57489
const LIMIT = 57490
const LOCAL = 57491
const LOCALTIME = 57492
const LOCALTIMESTAMP = 57493
const LOW = 57494
const LSHIFT = 57495
const MATCH = 57496
const MINUTE = 57497
const MONTH = 57498
const NAME = 57499
const NAMES = 57500
const NATURAL = 57501
const NEXT = 57502
const NO = 57503
const NO_INDEX_JOIN = 57504
const NORMAL = 57505
const NOT = 57506
const NOTHING = 57507
const NULL = 57508
const NULLIF = 57509
const NULLS = 57510
const NUMERIC = 57511
const OF = 57512
const OFF = 57513
const OFFSET = 57514
const ON = 57515
const ONLY = 57516
const OR = 57517
const ORDER = 57518
const ORDINALITY = 57519
const OUT = 57520
const OUTER = 57521
const OVER = 57522
const OVERLAPS = 57523
const OVERLAY = 57524
const PARENT = 57525
const PARTIAL = 57526
const PARTITION = 57527
const PLACING = 57528
const POSITION = 57529
const PRECEDING = 57530
const PRECISION = 57531
const PREPARE = 57532
const PRIMARY = 57533
const PRIORITY = 57534
const RANGE = 57535
const READ = 57536
const REAL = 57537
const RECURSIVE = 57538
const REF = 57539
const REFERENCES = 57540
const RENAME = 57541
const REPEATABLE = 57542
const RELEASE = 57543
const RESTRICT = 57544
const RETURNING = 57545
const REVOKE = 57546
const RIGHT = 57547
const ROLLBACK = 57548
const ROLLUP = 57549
const ROW = 57550
const ROWS = 57551
const RSHIFT = 57552
const SAVEPOINT = 57553
const SEARCH = 57554
const SECOND = 57555
const SELECT = 57556
const SERIAL = 57557
const SERIALIZABLE = 57558
const SESSION = 57559
const SESSION_USER = 57560
const SET = 57561
const SHOW = 57562
const SIMILAR = 57563
const SIMPLE = 57564
const SMALLINT = 57565
const SMALLSERIAL = 57566
const SNAPSHOT = 57567
const SOME = 57568
const SQL = 57569
const START = 57570
const STRICT = 57571
const STRING = 57572
const STORING = 57573
const SUBSTRING = 57574
const SYMMETRIC = 57575
const SYSTEM = 57576
const TABLE = 57577
const TABLES = 57578
const TEXT = 57579
const THEN = 57580
const TIME = 57581
const TIMESTAMP = 57582
const TIMESTAMPTZ = 57583
const TO = 57584
const TRAILING = 57585
const TRANSACTION = 57586
const TREAT = 57587
const TRIM = 57588
const TRUE = 57589
const TRUNCATE = 57590
const TYPE = 57591
const UNBOUNDED = 57592
const UNCOMMITTED = 57593
const UNION = 57594
const UNIQUE = 57595
const UNKNOWN = 57596
const UPDATE = 57597
const UPSERT = 57598
const USER = 57599
const USING = 57600
const VALID = 57601
const VALIDATE = 57602
const VALUE = 57603
const VALUES = 57604
const VARCHAR = 57605
const VARIADIC = 57606
const VARYING = 57607
const WHEN = 57608
const WHERE = 57609
const WINDOW = 57610
const WITH = 57611
const WITHIN = 57612
const WITHOUT = 57613
const YEAR = 57614
const ZONE = 57615
const NOT_LA = 57616
const WITH_LA = 57617
const AS_LA = 57618
const POSTFIXOP = 57619
const UMINUS = 57620

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPLAIN",
	"EXTRACT",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HOUR",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SQL",
	"START",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:4672

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 24,
	297, 24,
	-2, 356,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 38,
	1, 331,
	173, 331,
	203, 331,
	295, 331,
	297, 331,
	-2, 341,
	-1, 51,
	1, 334,
	173, 334,
	203, 334,
	295, 334,
	297, 334,
	-2, 340,
	-1, 60,
	1, 24,
	297, 24,
	-2, 356,
	-1, 271,
	1, 161,
	297, 161,
	-2, 850,
	-1, 304,
	148, 366,
	172, 366,
	-2, 337,
	-1, 307,
	148, 365,
	172, 365,
	-2, 335,
	-1, 429,
	148, 365,
	172, 365,
	-2, 338,
	-1, 485,
	294, 790,
	-2, 783,
	-1, 486,
	294, 791,
	-2, 784,
	-1, 492,
	5, 500,
	294, 500,
	-2, 937,
	-1, 515,
	5, 466,
	-2, 913,
	-1, 516,
	5, 494,
	294, 494,
	-2, 915,
	-1, 517,
	5, 474,
	-2, 916,
	-1, 518,
	5, 473,
	-2, 917,
	-1, 519,
	5, 494,
	294, 494,
	-2, 920,
	-1, 520,
	5, 494,
	294, 494,
	-2, 921,
	-1, 521,
	5, 495,
	-2, 924,
	-1, 522,
	5, 461,
	-2, 925,
	-1, 523,
	5, 461,
	-2, 926,
	-1, 524,
	5, 476,
	-2, 929,
	-1, 525,
	5, 462,
	-2, 934,
	-1, 526,
	5, 463,
	-2, 935,
	-1, 527,
	5, 464,
	-2, 936,
	-1, 528,
	5, 461,
	-2, 940,
	-1, 529,
	5, 467,
	-2, 945,
	-1, 530,
	5, 465,
	-2, 948,
	-1, 531,
	5, 492,
	294, 492,
	-2, 950,
	-1, 532,
	5, 496,
	-2, 953,
	-1, 533,
	5, 498,
	-2, 954,
	-1, 534,
	5, 491,
	294, 491,
	-2, 958,
	-1, 852,
	95, 341,
	134, 341,
	148, 341,
	172, 341,
	176, 341,
	252, 341,
	-2, 610,
	-1, 860,
	294, 768,
	-2, 757,
	-1, 1050,
	12, 0,
	13, 0,
	14, 0,
	277, 0,
	278, 0,
	279, 0,
	-2, 534,
	-1, 1051,
	12, 0,
	13, 0,
	14, 0,
	277, 0,
	278, 0,
	279, 0,
	-2, 535,
	-1, 1052,
	12, 0,
	13, 0,
	14, 0,
	277, 0,
	278, 0,
	279, 0,
	-2, 536,
	-1, 1056,
	12, 0,
	13, 0,
	14, 0,
	277, 0,
	278, 0,
	279, 0,
	-2, 540,
	-1, 1057,
	12, 0,
	13, 0,
	14, 0,
	277, 0,
	278, 0,
	279, 0,
	-2, 541,
	-1, 1058,
	12, 0,
	13, 0,
	14, 0,
	277, 0,
	278, 0,
	279, 0,
	-2, 542,
	-1, 1061,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 547,
	-1, 1067,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 549,
	-1, 1070,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 554,
	-1, 1071,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 555,
	-1, 1072,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 556,
	-1, 1097,
	181, 681,
	-2, 684,
	-1, 1258,
	95, 341,
	134, 341,
	148, 341,
	172, 341,
	176, 341,
	252, 341,
	-2, 414,
	-1, 1262,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 548,
	-1, 1263,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 550,
	-1, 1268,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 551,
	-1, 1286,
	181, 680,
	-2, 683,
	-1, 1443,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 552,
	-1, 1448,
	137, 0,
	-2, 566,
	-1, 1456,
	181, 682,
	-2, 685,
	-1, 1489,
	12, 0,
	13, 0,
	14, 0,
	277, 0,
	278, 0,
	279, 0,
	-2, 591,
	-1, 1490,
	12, 0,
	13, 0,
	14, 0,
	277, 0,
	278, 0,
	279, 0,
	-2, 592,
	-1, 1491,
	12, 0,
	13, 0,
	14, 0,
	277, 0,
	278, 0,
	279, 0,
	-2, 593,
	-1, 1495,
	12, 0,
	13, 0,
	14, 0,
	277, 0,
	278, 0,
	279, 0,
	-2, 597,
	-1, 1496,
	12, 0,
	13, 0,
	14, 0,
	277, 0,
	278, 0,
	279, 0,
	-2, 598,
	-1, 1497,
	12, 0,
	13, 0,
	14, 0,
	277, 0,
	278, 0,
	279, 0,
	-2, 599,
	-1, 1603,
	137, 0,
	-2, 567,
	-1, 1606,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 570,
	-1, 1607,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 572,
	-1, 1694,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 571,
	-1, 1695,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 573,
	-1, 1702,
	137, 0,
	-2, 600,
	-1, 1748,
	137, 0,
	-2, 601,
	-1, 1803,
	34, 0,
	123, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 912,
}

const sqlNprod = 1052
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 23705

var sqlAct = [...]int{

	486, 1802, 1826, 1646, 1754, 934, 576, 1782, 1801, 1412,
	1781, 942, 1023, 1566, 1783, 804, 537, 1467, 589, 272,
	484, 1682, 308, 1587, 37, 1567, 1581, 1669, 1595, 855,
	1576, 483, 84, 84, 84, 85, 678, 84, 476, 782,
	84, 330, 1004, 1527, 590, 1255, 1423, 1254, 84, 448,
	1340, 1007, 1289, 547, 1341, 84, 84, 1432, 1146, 84,
	1189, 17, 84, 84, 84, 785, 1006, 973, 84, 84,
	84, 84, 1245, 356, 1031, 553, 535, 556, 313, 857,
	910, 1241, 943, 919, 1143, 1107, 1083, 1035, 1080, 957,
	351, 23, 73, 478, 800, 966, 652, 313, 999, 417,
	315, 50, 13, 1033, 1032, 307, 636, 1195, 357, 6,
	633, 558, 458, 418, 449, 459, 663, 548, 549, 887,
	891, 353, 78, 8, 7, 5, 4, 71, 806, 318,
	1010, 50, 349, 77, 346, 432, 259, 654, 433, 632,
	79, 431, 650, 250, 569, 342, 936, 436, 316, 358,
	348, 935, 51, 312, 80, 75, 74, 76, 52, 939,
	1689, 50, 326, 1690, 578, 333, 578, 1833, 312, 578,
	1027, 343, 970, 1818, 327, 1798, 1027, 327, 1668, 338,
	1253, 1202, 1201, 327, 297, 338, 809, 1789, 1779, 354,
	1027, 963, 1773, 1750, 1744, 1027, 963, 1027, 1733, 1723,
	1284, 1668, 1027, 305, 320, 1285, 1283, 1696, 811, 304,
	963, 976, 1693, 971, 336, 1027, 269, 1679, 1676, 1667,
	1668, 1677, 1668, 1651, 1650, 1628, 1027, 1027, 976, 810,
	1608, 1605, 567, 976, 963, 1312, 808, 1329, 1330, 1331,
	1539, 1452, 1398, 1027, 976, 1392, 84, 976, 972, 969,
	1602, 1391, 56, 1358, 1392, 1356, 1359, 1355, 976, 1354,
	976, 84, 976, 1286, 84, 84, 976, 1028, 985, 975,
	1027, 976, 976, 58, 962, 1288, 907, 963, 584, 906,
	1738, 585, 816, 807, 1326, 1671, 1243, 1502, 1455, 1227,
	976, 56, 908, 1229, 1027, 978, 1091, 84, 1022, 84,
	59, 84, 993, 84, 444, 550, 974, 54, 443, 551,
	776, 60, 58, 55, 775, 644, 643, 382, 84, 325,
	424, 579, 551, 579, 536, 677, 579, 430, 402, 84,
	1800, 1317, 53, 550, 1796, 1788, 809, 551, 1745, 59,
	84, 84, 84, 1678, 84, 1633, 54, 1629, 1621, 1620,
	1619, 1614, 55, 1613, 1612, 1564, 581, 429, 811, 546,
	1557, 1517, 1332, 1512, 1511, 968, 390, 542, 1201, 1510,
	56, 938, 541, 1458, 1441, 84, 1422, 809, 1327, 810,
	391, 1402, 84, 1363, 84, 1360, 1348, 967, 1231, 1339,
	1311, 58, 1308, 618, 1306, 356, 356, 1294, 1293, 811,
	1228, 1160, 423, 680, 84, 1114, 84, 84, 84, 84,
	84, 84, 84, 1113, 327, 443, 84, 582, 59, 577,
	810, 84, 779, 807, 442, 1791, 1469, 84, 1764, 778,
	357, 357, 816, 421, 863, 1328, 1737, 630, 681, 1088,
	1715, 1713, 1704, 343, 544, 84, 1685, 642, 84, 1674,
	53, 1665, 1643, 1626, 1598, 327, 570, 570, 439, 440,
	1574, 812, 813, 814, 815, 817, 445, 837, 305, 1447,
	596, 358, 358, 816, 304, 1440, 1419, 1418, 586, 682,
	1417, 1556, 1415, 1375, 1374, 568, 571, 313, 1338, 1302,
	327, 673, 1301, 1280, 1276, 1312, 1400, 1085, 1216, 1174,
	1312, 860, 1323, 1324, 1325, 809, 1322, 1319, 1320, 1321,
	1313, 1314, 1315, 1316, 1318, 1173, 1153, 1112, 1026, 1563,
	826, 854, 809, 640, 550, 1089, 639, 811, 551, 892,
	895, 899, 885, 884, 883, 674, 882, 881, 667, 880,
	879, 1312, 878, 877, 811, 766, 84, 876, 810, 875,
	874, 873, 680, 872, 871, 870, 1174, 777, 861, 859,
	84, 1312, 53, 780, 84, 810, 331, 84, 84, 790,
	1129, 789, 788, 84, 802, 84, 84, 827, 84, 447,
	388, 84, 378, 84, 84, 376, 356, 681, 904, 305,
	1562, 1317, 305, 305, 858, 796, 1317, 1210, 797, 798,
	902, 1209, 952, 351, 491, 416, 809, 543, 1691, 1561,
	1326, 913, 1203, 814, 815, 817, 452, 837, 816, 1017,
	763, 357, 1593, 767, 768, 769, 770, 771, 682, 1362,
	1361, 937, 774, 937, 809, 84, 84, 1317, 1327, 889,
	890, 924, 926, 897, 893, 1582, 73, 898, 1261, 896,
	958, 980, 812, 813, 814, 815, 817, 1317, 837, 412,
	396, 901, 358, 397, 868, 826, 935, 929, 1470, 1297,
	900, 1108, 888, 559, 1197, 560, 78, 810, 680, 327,
	960, 1760, 338, 1814, 1327, 50, 262, 77, 946, 50,
	916, 959, 64, 338, 79, 1328, 338, 1813, 961, 1722,
	539, 617, 354, 920, 1327, 1223, 538, 955, 80, 75,
	74, 76, 954, 681, 998, 951, 953, 932, 941, 302,
	1547, 984, 827, 864, 296, 311, 295, 1312, 950, 1190,
	290, 291, 559, 893, 560, 896, 1659, 65, 1658, 1387,
	1367, 1328, 1366, 561, 987, 979, 890, 889, 488, 1264,
	1215, 559, 1214, 560, 682, 981, 982, 986, 1213, 1212,
	1068, 1328, 923, 977, 310, 809, 84, 1319, 1320, 1321,
	1313, 1314, 1315, 1316, 1318, 1313, 1314, 1315, 1316, 1318,
	84, 84, 1399, 931, 930, 420, 837, 811, 1741, 1721,
	1312, 394, 1774, 821, 818, 819, 820, 812, 813, 814,
	815, 817, 561, 837, 1157, 1156, 312, 1039, 810, 84,
	68, 84, 1029, 1762, 415, 1321, 1313, 1314, 1315, 1316,
	1318, 561, 374, 1317, 1119, 299, 618, 809, 395, 62,
	1038, 572, 1322, 1319, 1320, 1321, 1313, 1314, 1315, 1316,
	1318, 1648, 1407, 922, 1108, 680, 1082, 974, 1823, 811,
	1188, 912, 1185, 1813, 1037, 565, 1082, 1386, 912, 1404,
	69, 816, 67, 66, 911, 1389, 1377, 578, 672, 671,
	810, 665, 660, 1829, 1776, 1199, 1002, 1785, 300, 63,
	681, 1086, 309, 1003, 1020, 1021, 1317, 837, 564, 1001,
	1777, 1716, 1224, 393, 1405, 327, 303, 419, 1222, 1122,
	974, 392, 413, 596, 886, 921, 1159, 1312, 826, 902,
	84, 84, 84, 562, 902, 837, 84, 1092, 1096, 84,
	1099, 682, 1030, 816, 327, 84, 84, 84, 84, 84,
	557, 84, 84, 1327, 618, 1700, 1138, 1822, 1095, 84,
	1123, 84, 1150, 1151, 1152, 970, 675, 851, 84, 1786,
	385, 387, 974, 1666, 1300, 393, 414, 84, 1205, 1104,
	1206, 1433, 1171, 313, 1087, 827, 1194, 1169, 312, 70,
	826, 989, 562, 1784, 1812, 1124, 1121, 991, 84, 84,
	618, 595, 1163, 1810, 84, 1065, 971, 1787, 61, 1827,
	1328, 562, 1580, 992, 356, 1378, 1190, 1192, 435, 624,
	1015, 1688, 990, 1317, 1315, 1316, 1318, 1184, 1208, 1649,
	405, 596, 84, 676, 84, 84, 84, 1244, 1821, 84,
	1164, 972, 969, 383, 579, 1165, 381, 827, 84, 357,
	1828, 1624, 434, 1125, 1233, 84, 1498, 84, 1384, 820,
	812, 813, 814, 815, 817, 909, 837, 1830, 1266, 1078,
	1327, 1230, 795, 1232, 1196, 1204, 435, 596, 1081, 1839,
	1207, 313, 1076, 1196, 1248, 1313, 1314, 1315, 1316, 1318,
	358, 1653, 327, 1652, 1063, 1066, 1218, 620, 1641, 974,
	1546, 1251, 1220, 619, 1221, 1219, 1710, 1545, 958, 1543,
	1225, 1246, 1120, 1226, 1369, 1168, 1016, 1249, 1062, 818,
	819, 820, 812, 813, 814, 815, 817, 1328, 837, 787,
	313, 1247, 649, 1499, 1625, 1403, 1239, 1238, 960, 1500,
	781, 1596, 1287, 1755, 1259, 592, 1074, 50, 1073, 959,
	248, 1234, 1079, 1535, 617, 434, 961, 773, 968, 1642,
	645, 1260, 251, 1838, 1279, 647, 1176, 1590, 1281, 666,
	661, 1175, 327, 1267, 1265, 1428, 648, 1250, 1427, 313,
	1291, 1292, 392, 256, 1536, 341, 340, 310, 252, 1544,
	426, 1542, 1064, 251, 1597, 84, 1413, 1565, 1322, 1319,
	1320, 1321, 1313, 1314, 1315, 1316, 1318, 1381, 1424, 1383,
	1373, 253, 1296, 1337, 256, 1639, 1242, 1111, 1703, 252,
	1623, 1342, 84, 84, 1350, 1343, 1394, 1446, 255, 1075,
	1307, 1275, 983, 411, 410, 1640, 1077, 409, 408, 407,
	1110, 406, 253, 403, 339, 1345, 1346, 1347, 84, 869,
	84, 765, 84, 1780, 1248, 1752, 84, 1524, 1382, 255,
	1388, 1364, 617, 1380, 84, 1368, 1531, 84, 1532, 1393,
	1235, 1251, 1018, 84, 680, 1014, 1371, 84, 956, 84,
	583, 1431, 580, 1273, 1244, 575, 1385, 1249, 566, 563,
	1464, 1416, 786, 1534, 1660, 437, 1271, 1396, 1024, 1397,
	1537, 1406, 1408, 1409, 1395, 1184, 323, 1814, 617, 681,
	1437, 669, 254, 618, 399, 1449, 1414, 1662, 912, 912,
	1436, 84, 928, 1421, 927, 925, 1390, 1434, 1435, 1671,
	1718, 1248, 3, 1460, 1461, 1462, 1747, 946, 327, 1425,
	1430, 618, 618, 254, 441, 1739, 940, 1250, 1251, 618,
	682, 803, 289, 257, 1025, 1533, 641, 588, 1246, 1453,
	965, 438, 1269, 247, 1249, 1836, 1274, 1837, 1426, 1473,
	1474, 1429, 324, 1312, 809, 1471, 1518, 1478, 1247, 327,
	1476, 618, 327, 1410, 257, 1457, 1401, 84, 84, 84,
	596, 400, 1589, 332, 1357, 84, 84, 292, 293, 258,
	1211, 84, 1158, 84, 1155, 84, 84, 84, 84, 1509,
	1540, 1541, 1506, 84, 1154, 1505, 1105, 1503, 596, 596,
	995, 994, 996, 1799, 1250, 1610, 596, 1463, 1513, 1236,
	997, 1519, 471, 862, 595, 298, 1647, 249, 84, 84,
	1523, 764, 404, 1270, 1616, 1775, 1299, 1699, 84, 84,
	1272, 1681, 84, 1579, 1109, 867, 1572, 28, 596, 1554,
	1572, 84, 84, 1569, 82, 243, 244, 1571, 464, 261,
	1525, 1571, 273, 1558, 1573, 1560, 1599, 1588, 1573, 1370,
	261, 1578, 1009, 1008, 618, 683, 1604, 319, 319, 670,
	84, 329, 659, 487, 329, 335, 329, 653, 662, 1118,
	329, 344, 329, 273, 1584, 540, 489, 1600, 593, 490,
	594, 894, 477, 1130, 591, 352, 1592, 944, 1106, 1295,
	1550, 865, 463, 469, 468, 1093, 375, 460, 1559, 1594,
	620, 1252, 40, 389, 267, 268, 619, 1193, 1555, 1019,
	791, 1379, 595, 301, 1309, 84, 377, 84, 1136, 84,
	84, 1622, 1585, 1586, 1128, 1126, 1591, 1117, 84, 422,
	552, 596, 945, 327, 327, 401, 1634, 327, 1637, 1200,
	964, 446, 1575, 799, 1790, 1656, 1657, 84, 592, 322,
	321, 1005, 398, 646, 618, 988, 294, 1712, 595, 1717,
	1376, 1759, 1661, 57, 22, 20, 1635, 19, 18, 16,
	15, 84, 14, 84, 21, 12, 11, 10, 1675, 9,
	27, 84, 1655, 26, 25, 1572, 2, 1672, 1670, 84,
	1, 617, 0, 1663, 0, 0, 1571, 0, 0, 0,
	1684, 0, 0, 1573, 1692, 0, 0, 0, 620, 0,
	0, 0, 0, 0, 619, 0, 0, 0, 0, 617,
	617, 0, 0, 0, 1698, 0, 0, 617, 0, 0,
	84, 596, 0, 618, 0, 1705, 0, 0, 0, 0,
	0, 1277, 1278, 1645, 0, 0, 1714, 0, 379, 84,
	84, 0, 0, 84, 620, 0, 592, 84, 0, 617,
	619, 1726, 84, 384, 0, 0, 273, 273, 84, 1709,
	1708, 0, 1728, 1736, 0, 1730, 84, 0, 1735, 1572,
	313, 1729, 680, 0, 1727, 1687, 1680, 1130, 1130, 0,
	1571, 1740, 1334, 1335, 1336, 0, 327, 1573, 1734, 261,
	0, 329, 592, 273, 84, 427, 84, 84, 1742, 84,
	596, 618, 1746, 1749, 902, 0, 0, 681, 1743, 1763,
	319, 1757, 0, 1732, 0, 0, 1765, 1768, 1761, 84,
	0, 329, 0, 0, 0, 0, 1769, 0, 1130, 1130,
	1130, 1770, 329, 329, 329, 1767, 573, 1772, 1572, 1766,
	1771, 0, 0, 84, 0, 84, 0, 0, 682, 1571,
	0, 0, 617, 0, 1793, 0, 1573, 0, 1797, 1795,
	1794, 84, 0, 0, 0, 0, 1807, 329, 0, 0,
	0, 1811, 84, 0, 637, 1815, 637, 1809, 596, 1817,
	0, 0, 1819, 0, 0, 1820, 1778, 1816, 0, 809,
	0, 0, 0, 0, 0, 0, 273, 1831, 637, 273,
	273, 273, 273, 273, 772, 1834, 1832, 0, 273, 1835,
	0, 811, 1758, 261, 0, 0, 1444, 1445, 1840, 784,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 810, 0, 0, 0, 0, 319, 825, 0,
	805, 0, 0, 0, 0, 1312, 0, 1329, 1330, 1331,
	0, 0, 617, 0, 0, 0, 0, 0, 946, 0,
	1601, 595, 1130, 1130, 1479, 1480, 1481, 1482, 1483, 1484,
	1485, 1486, 1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494,
	1495, 1496, 1497, 0, 1501, 816, 0, 0, 0, 595,
	595, 0, 0, 0, 1326, 0, 0, 595, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130,
	1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130, 595,
	1130, 617, 826, 0, 0, 0, 0, 0, 329, 0,
	0, 1317, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 917, 0, 0, 0, 329, 620, 0, 329,
	933, 0, 0, 619, 0, 329, 0, 948, 949, 0,
	329, 0, 1332, 329, 81, 273, 273, 0, 81, 0,
	0, 0, 0, 0, 0, 620, 620, 0, 1327, 827,
	0, 619, 619, 620, 0, 0, 0, 0, 0, 619,
	0, 0, 0, 0, 0, 592, 0, 0, 0, 617,
	0, 0, 0, 0, 0, 0, 49, 0, 0, 0,
	49, 465, 38, 0, 0, 620, 0, 637, 805, 0,
	0, 619, 595, 592, 592, 0, 0, 0, 0, 0,
	0, 592, 29, 0, 0, 1328, 29, 0, 0, 0,
	30, 0, 38, 0, 30, 0, 0, 0, 631, 0,
	821, 818, 819, 820, 812, 813, 814, 815, 817, 24,
	837, 0, 306, 592, 0, 314, 0, 0, 0, 0,
	42, 0, 38, 0, 0, 0, 809, 1644, 0, 0,
	0, 838, 839, 840, 314, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 44, 0, 0, 0, 811, 0,
	842, 49, 1323, 1324, 1325, 0, 1322, 1319, 1320, 1321,
	1313, 1314, 1315, 1316, 1318, 0, 0, 0, 620, 810,
	33, 0, 595, 1130, 619, 825, 0, 29, 0, 0,
	45, 0, 0, 0, 32, 30, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1000, 0,
	34, 0, 0, 0, 0, 0, 56, 0, 0, 0,
	56, 0, 329, 917, 1702, 0, 592, 0, 0, 0,
	0, 0, 816, 0, 0, 0, 0, 58, 0, 0,
	0, 58, 0, 0, 0, 0, 0, 0, 0, 835,
	843, 329, 0, 273, 0, 0, 0, 0, 0, 0,
	0, 595, 0, 0, 59, 0, 0, 0, 59, 0,
	1130, 54, 0, 833, 0, 54, 0, 55, 620, 826,
	0, 55, 0, 0, 619, 0, 0, 31, 0, 0,
	0, 0, 0, 0, 0, 0, 53, 0, 47, 0,
	72, 35, 0, 46, 1748, 0, 0, 0, 36, 0,
	0, 56, 0, 0, 0, 0, 39, 41, 0, 0,
	0, 0, 0, 0, 0, 43, 592, 0, 0, 0,
	0, 0, 58, 0, 0, 0, 827, 0, 0, 595,
	0, 0, 0, 0, 0, 48, 0, 836, 0, 0,
	1130, 0, 329, 1166, 1167, 0, 0, 620, 917, 59,
	0, 1172, 0, 619, 0, 0, 54, 1177, 1178, 1180,
	1182, 1183, 55, 1186, 1187, 0, 0, 0, 0, 0,
	0, 329, 0, 1198, 0, 0, 0, 306, 0, 0,
	329, 53, 0, 0, 0, 0, 0, 0, 0, 329,
	834, 0, 0, 0, 0, 592, 0, 821, 818, 819,
	820, 812, 813, 814, 815, 817, 0, 837, 0, 0,
	1000, 637, 0, 0, 0, 0, 1000, 0, 0, 0,
	450, 450, 0, 0, 0, 620, 0, 0, 0, 0,
	554, 619, 0, 0, 0, 0, 0, 0, 0, 1312,
	0, 1329, 1330, 1331, 784, 0, 784, 273, 329, 0,
	0, 1237, 0, 0, 1451, 0, 0, 0, 0, 0,
	1240, 0, 0, 0, 0, 0, 0, 1257, 0, 329,
	0, 0, 809, 592, 828, 829, 830, 838, 839, 840,
	0, 0, 0, 0, 0, 0, 0, 831, 1326, 0,
	274, 0, 0, 0, 811, 0, 842, 0, 306, 0,
	0, 306, 306, 0, 0, 0, 0, 287, 0, 1312,
	0, 1329, 1330, 1331, 0, 810, 0, 0, 0, 0,
	0, 825, 0, 0, 852, 0, 0, 0, 856, 0,
	0, 0, 0, 792, 794, 1317, 0, 0, 0, 0,
	801, 0, 276, 0, 0, 0, 0, 281, 282, 0,
	288, 0, 846, 847, 848, 849, 850, 0, 1326, 0,
	0, 853, 275, 277, 0, 0, 1332, 0, 816, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 866, 1327, 0, 0, 835, 843, 0, 1535, 0,
	1528, 0, 0, 0, 0, 0, 0, 0, 1526, 841,
	278, 1530, 0, 0, 0, 1317, 0, 805, 0, 833,
	0, 0, 279, 280, 0, 826, 0, 0, 0, 1536,
	0, 0, 0, 1333, 0, 0, 0, 283, 0, 0,
	0, 38, 0, 38, 329, 329, 1332, 832, 1529, 1328,
	0, 0, 0, 0, 0, 0, 38, 0, 0, 903,
	38, 0, 1327, 0, 0, 0, 0, 0, 0, 0,
	1411, 0, 917, 0, 784, 0, 0, 0, 1420, 0,
	0, 0, 827, 0, 0, 0, 329, 0, 0, 329,
	0, 0, 0, 836, 0, 1257, 0, 0, 0, 1439,
	0, 1257, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1531, 0, 1532, 0, 0, 1323, 1324, 1325, 1328,
	1322, 1319, 1320, 1321, 1313, 1314, 1315, 1316, 1318, 0,
	0, 0, 284, 0, 0, 285, 0, 0, 1534, 0,
	286, 0, 0, 1468, 0, 1537, 834, 0, 0, 822,
	823, 824, 0, 821, 818, 819, 820, 812, 813, 814,
	815, 817, 0, 837, 0, 1161, 0, 0, 0, 0,
	0, 0, 0, 0, 1162, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1323, 1324, 1325, 0,
	1322, 1319, 1320, 1321, 1313, 1314, 1315, 1316, 1318, 0,
	1533, 0, 0, 0, 0, 0, 0, 0, 0, 1521,
	1522, 917, 0, 0, 0, 0, 0, 805, 805, 0,
	0, 0, 0, 1548, 0, 1549, 0, 329, 1551, 1552,
	1553, 0, 0, 0, 0, 329, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1568, 0,
	1577, 917, 1568, 0, 0, 0, 0, 0, 0, 0,
	329, 329, 0, 0, 329, 0, 0, 0, 0, 0,
	1034, 0, 0, 805, 1257, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1617, 0, 0, 1084, 450, 0, 0, 0,
	0, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048,
	1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058,
	1059, 1060, 1061, 0, 1067, 0, 1069, 1070, 1071, 1072,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 917, 0, 1636,
	0, 273, 1638, 0, 0, 0, 0, 0, 0, 0,
	329, 1115, 1116, 0, 1127, 0, 1137, 1139, 1144, 1147,
	1148, 1149, 0, 0, 0, 0, 0, 0, 0, 805,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	314, 0, 0, 0, 0, 554, 0, 1568, 0, 0,
	0, 0, 0, 329, 0, 1683, 0, 0, 0, 0,
	0, 0, 0, 329, 0, 0, 0, 0, 0, 0,
	0, 805, 0, 0, 1191, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1312, 0, 1329, 1330, 1331, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1312,
	0, 1329, 1330, 1331, 0, 0, 0, 0, 0, 0,
	0, 0, 784, 0, 1450, 1217, 1312, 0, 1329, 1330,
	1331, 0, 0, 0, 0, 0, 0, 0, 38, 0,
	0, 1719, 1720, 1326, 0, 1724, 0, 0, 1258, 1725,
	0, 1568, 0, 0, 273, 0, 0, 0, 1326, 0,
	1577, 0, 0, 0, 0, 0, 0, 0, 805, 0,
	0, 801, 0, 0, 0, 1326, 0, 0, 1084, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1317, 0, 0, 0, 0, 0, 1756, 852, 805, 329,
	0, 273, 0, 0, 0, 1317, 0, 0, 0, 0,
	0, 1262, 1263, 0, 0, 0, 0, 1268, 0, 0,
	1568, 1683, 1317, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1332, 1327, 0, 0,
	1282, 0, 0, 0, 0, 329, 852, 805, 0, 1290,
	0, 0, 1327, 1332, 0, 0, 0, 1298, 0, 0,
	0, 1303, 0, 1808, 0, 0, 0, 0, 0, 1327,
	0, 0, 0, 0, 805, 0, 0, 0, 0, 0,
	0, 0, 0, 853, 0, 0, 0, 0, 0, 1144,
	1144, 1144, 0, 809, 1328, 828, 829, 830, 838, 839,
	840, 0, 0, 0, 0, 0, 0, 0, 831, 1328,
	0, 1365, 0, 0, 1034, 811, 0, 842, 0, 0,
	0, 0, 1372, 0, 0, 0, 1328, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 810, 0, 0, 450,
	0, 0, 825, 0, 0, 0, 0, 0, 450, 0,
	0, 0, 554, 0, 0, 1034, 0, 0, 1034, 0,
	0, 1323, 1324, 1325, 0, 1322, 1319, 1320, 1321, 1313,
	1314, 1315, 1316, 1318, 0, 0, 1323, 1324, 1325, 0,
	1322, 1319, 1320, 1321, 1313, 1314, 1315, 1316, 1318, 816,
	0, 0, 0, 1323, 1324, 1325, 0, 1322, 1319, 1320,
	1321, 1313, 1314, 1315, 1316, 1318, 835, 843, 0, 0,
	1442, 0, 0, 1443, 0, 0, 0, 0, 0, 0,
	841, 0, 0, 0, 1448, 0, 0, 0, 0, 0,
	833, 0, 0, 0, 0, 0, 826, 1217, 0, 0,
	0, 0, 0, 0, 0, 0, 1465, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1475, 0, 832, 1477,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1507, 1508, 827, 0, 0, 0, 0, 0, 0,
	1514, 1515, 1516, 38, 836, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 450, 1034,
	1034, 0, 0, 1034, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 834, 0, 0,
	822, 823, 824, 0, 821, 818, 819, 820, 812, 813,
	814, 815, 817, 1583, 837, 0, 0, 0, 0, 0,
	0, 1630, 0, 809, 0, 828, 829, 830, 838, 839,
	840, 0, 0, 0, 0, 1603, 0, 0, 831, 1606,
	1607, 0, 0, 0, 1609, 811, 0, 842, 1611, 0,
	0, 0, 0, 0, 0, 1615, 0, 0, 809, 1618,
	828, 829, 830, 838, 839, 840, 810, 0, 0, 0,
	0, 0, 825, 831, 0, 0, 0, 0, 0, 0,
	811, 0, 842, 0, 0, 0, 0, 0, 0, 0,
	0, 1627, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 810, 0, 0, 0, 0, 0, 825, 0, 0,
	0, 0, 0, 1664, 0, 0, 0, 0, 0, 816,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1654, 0, 835, 843, 0, 0,
	0, 0, 1034, 0, 0, 0, 0, 0, 0, 0,
	841, 0, 0, 0, 816, 0, 0, 0, 0, 1673,
	833, 0, 0, 0, 0, 0, 826, 0, 0, 0,
	0, 835, 843, 0, 0, 0, 0, 0, 1686, 0,
	0, 0, 0, 0, 0, 841, 0, 0, 832, 0,
	1694, 1695, 0, 0, 0, 833, 0, 0, 0, 0,
	0, 826, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 852, 0, 1707,
	0, 0, 0, 827, 0, 0, 0, 0, 0, 0,
	0, 0, 1711, 0, 836, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 554, 0, 0, 0, 827, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 836,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 834, 0, 0,
	822, 823, 824, 0, 821, 818, 819, 820, 812, 813,
	814, 815, 817, 0, 837, 0, 0, 0, 0, 0,
	0, 1353, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 834, 0, 0, 822, 823, 824, 0, 821,
	818, 819, 820, 812, 813, 814, 815, 817, 0, 837,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1792,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1806, 1806, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1806, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 679, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1806, 86, 87, 684, 88,
	685, 686, 687, 688, 195, 689, 690, 691, 692, 89,
	90, 196, 197, 198, 199, 91, 200, 201, 693, 92,
	202, 203, 93, 694, 695, 204, 205, 206, 696, 207,
	697, 360, 698, 94, 95, 96, 0, 97, 699, 98,
	99, 700, 361, 100, 101, 701, 702, 703, 704, 705,
	706, 102, 103, 104, 105, 208, 106, 209, 210, 707,
	107, 708, 108, 709, 710, 711, 109, 110, 712, 111,
	713, 0, 714, 211, 112, 113, 212, 715, 716, 717,
	114, 115, 213, 0, 116, 718, 117, 719, 720, 362,
	721, 118, 214, 722, 215, 723, 119, 120, 216, 217,
	364, 724, 123, 725, 121, 726, 363, 122, 218, 219,
	220, 727, 221, 728, 365, 124, 366, 125, 126, 729,
	730, 222, 367, 127, 368, 731, 128, 732, 733, 129,
	0, 130, 131, 132, 133, 134, 369, 135, 136, 139,
	137, 734, 138, 735, 223, 140, 224, 141, 142, 736,
	737, 738, 739, 740, 143, 225, 370, 144, 371, 226,
	145, 146, 147, 741, 227, 148, 228, 149, 742, 150,
	151, 152, 229, 153, 154, 743, 156, 157, 155, 158,
	744, 159, 372, 160, 161, 230, 162, 0, 163, 164,
	165, 745, 231, 166, 167, 746, 168, 169, 373, 170,
	232, 233, 171, 747, 172, 173, 175, 234, 174, 235,
	748, 176, 749, 177, 178, 750, 236, 237, 238, 751,
	752, 179, 239, 240, 753, 180, 181, 182, 183, 754,
	755, 184, 185, 186, 756, 757, 187, 188, 189, 241,
	242, 758, 190, 759, 760, 761, 762, 191, 192, 193,
	194, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 679, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1438, 86, 87,
	684, 88, 685, 686, 687, 688, 195, 689, 690, 691,
	692, 89, 90, 196, 197, 198, 199, 91, 200, 201,
	693, 92, 202, 203, 93, 694, 695, 204, 205, 206,
	696, 207, 697, 360, 698, 94, 95, 96, 0, 97,
	699, 98, 99, 700, 361, 100, 101, 701, 702, 703,
	704, 705, 706, 102, 103, 104, 105, 208, 106, 209,
	210, 707, 107, 708, 108, 709, 710, 711, 109, 110,
	712, 111, 713, 0, 714, 211, 112, 113, 212, 715,
	716, 717, 114, 115, 213, 0, 116, 718, 117, 719,
	720, 362, 721, 118, 214, 722, 215, 723, 119, 120,
	216, 217, 364, 724, 123, 725, 121, 726, 363, 122,
	218, 219, 220, 727, 221, 728, 365, 124, 366, 125,
	126, 729, 730, 222, 367, 127, 368, 731, 128, 732,
	733, 129, 0, 130, 131, 132, 133, 134, 369, 135,
	136, 139, 137, 734, 138, 735, 223, 140, 224, 141,
	142, 736, 737, 738, 739, 740, 143, 225, 370, 144,
	371, 226, 145, 146, 147, 741, 227, 148, 228, 149,
	742, 150, 151, 152, 229, 153, 154, 743, 156, 157,
	155, 158, 744, 159, 372, 160, 161, 230, 162, 0,
	163, 164, 165, 745, 231, 166, 167, 746, 168, 169,
	373, 170, 232, 233, 171, 747, 172, 173, 175, 234,
	174, 235, 748, 176, 749, 177, 178, 750, 236, 237,
	238, 751, 752, 179, 239, 240, 753, 180, 181, 182,
	183, 754, 755, 184, 185, 186, 756, 757, 187, 188,
	189, 241, 242, 758, 190, 759, 760, 761, 762, 191,
	192, 193, 194, 679, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 905, 0, 86, 87,
	684, 88, 685, 686, 687, 688, 195, 689, 690, 691,
	692, 89, 90, 196, 197, 198, 199, 91, 200, 201,
	693, 92, 202, 203, 93, 694, 695, 204, 205, 206,
	696, 207, 697, 360, 698, 94, 95, 96, 0, 97,
	699, 98, 99, 700, 361, 100, 101, 701, 702, 703,
	704, 705, 706, 102, 103, 104, 105, 208, 106, 209,
	210, 707, 107, 708, 108, 709, 710, 711, 109, 110,
	712, 111, 713, 0, 714, 211, 112, 113, 212, 715,
	716, 717, 114, 115, 213, 0, 116, 718, 117, 719,
	720, 362, 721, 118, 214, 722, 215, 723, 119, 120,
	216, 217, 364, 724, 123, 725, 121, 726, 363, 122,
	218, 219, 220, 727, 221, 728, 365, 124, 366, 125,
	126, 729, 730, 222, 367, 127, 368, 731, 128, 732,
	733, 129, 0, 130, 131, 132, 133, 134, 369, 135,
	136, 139, 137, 734, 138, 735, 223, 140, 224, 141,
	142, 736, 737, 738, 739, 740, 143, 225, 370, 144,
	371, 226, 145, 146, 147, 741, 227, 148, 228, 149,
	742, 150, 151, 152, 229, 153, 154, 743, 156, 157,
	155, 158, 744, 159, 372, 160, 161, 230, 162, 0,
	163, 164, 165, 745, 231, 166, 167, 746, 168, 169,
	373, 170, 232, 233, 171, 747, 172, 173, 175, 234,
	174, 235, 748, 176, 749, 177, 178, 750, 236, 237,
	238, 751, 752, 179, 239, 240, 753, 180, 181, 182,
	183, 754, 755, 184, 185, 186, 756, 757, 187, 188,
	189, 241, 242, 758, 190, 759, 760, 761, 762, 191,
	192, 193, 194, 485, 474, 475, 472, 473, 461, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 87,
	1101, 88, 0, 0, 0, 0, 501, 467, 0, 0,
	0, 89, 90, 196, 515, 198, 516, 91, 517, 518,
	0, 92, 202, 203, 93, 482, 500, 519, 520, 206,
	0, 511, 0, 493, 0, 94, 95, 96, 0, 97,
	0, 98, 99, 0, 361, 100, 101, 0, 494, 496,
	0, 495, 497, 102, 103, 104, 105, 521, 106, 522,
	523, 0, 107, 0, 108, 0, 1102, 0, 514, 110,
	0, 111, 0, 0, 0, 466, 112, 113, 502, 480,
	0, 0, 114, 115, 524, 0, 116, 0, 117, 0,
	0, 362, 0, 118, 512, 0, 215, 0, 119, 120,
	508, 510, 364, 0, 123, 0, 121, 0, 363, 122,
	525, 526, 527, 0, 492, 0, 365, 124, 366, 125,
	126, 0, 0, 513, 367, 127, 368, 0, 128, 0,
	0, 129, 0, 130, 131, 132, 133, 134, 369, 135,
	136, 139, 137, 456, 138, 481, 509, 140, 528, 141,
	142, 0, 0, 0, 0, 0, 143, 225, 370, 144,
	371, 503, 145, 146, 147, 0, 504, 148, 228, 149,
	0, 150, 151, 152, 529, 153, 154, 0, 156, 157,
	155, 158, 0, 159, 372, 160, 161, 470, 162, 0,
	163, 164, 165, 0, 231, 166, 167, 498, 168, 169,
	373, 170, 530, 233, 171, 0, 172, 173, 175, 531,
	174, 505, 0, 176, 0, 177, 178, 0, 236, 532,
	533, 0, 0, 179, 506, 507, 479, 180, 181, 182,
	183, 0, 0, 184, 185, 186, 499, 0, 187, 188,
	189, 241, 534, 1100, 190, 0, 0, 0, 0, 191,
	192, 193, 194, 457, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 453, 454, 1103, 0, 0, 0,
	455, 0, 0, 462, 1098, 485, 474, 475, 472, 473,
	461, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 87, 0, 88, 0, 0, 0, 0, 501, 467,
	0, 0, 0, 89, 90, 196, 515, 198, 516, 91,
	517, 518, 0, 92, 202, 203, 93, 482, 500, 519,
	520, 206, 0, 511, 0, 493, 0, 94, 95, 96,
	0, 97, 0, 98, 99, 0, 361, 100, 101, 0,
	494, 496, 0, 495, 497, 102, 103, 104, 105, 521,
	106, 522, 523, 555, 107, 0, 108, 0, 0, 0,
	514, 110, 0, 111, 0, 0, 0, 466, 112, 113,
	502, 480, 0, 0, 114, 115, 524, 0, 116, 0,
	117, 0, 0, 362, 0, 118, 512, 0, 215, 0,
	119, 120, 508, 510, 364, 0, 123, 0, 121, 0,
	363, 122, 525, 526, 527, 0, 492, 0, 365, 124,
	366, 125, 126, 0, 0, 513, 367, 127, 368, 0,
	128, 0, 0, 129, 0, 130, 131, 132, 133, 134,
	369, 135, 136, 139, 137, 456, 138, 481, 509, 140,
	528, 141, 142, 0, 0, 0, 0, 0, 143, 225,
	370, 144, 371, 503, 145, 146, 147, 0, 504, 148,
	228, 149, 0, 150, 151, 152, 529, 153, 154, 0,
	156, 157, 155, 158, 0, 159, 372, 160, 161, 470,
	162, 0, 163, 164, 165, 56, 231, 166, 167, 498,
	168, 169, 373, 170, 530, 233, 171, 0, 172, 173,
	175, 531, 174, 505, 0, 176, 58, 177, 178, 0,
	236, 532, 533, 0, 0, 179, 506, 507, 479, 180,
	181, 182, 183, 0, 0, 184, 185, 186, 499, 0,
	187, 188, 189, 359, 534, 0, 190, 0, 0, 0,
	54, 191, 192, 193, 194, 457, 55, 0, 485, 474,
	475, 472, 473, 461, 0, 0, 453, 454, 0, 0,
	0, 0, 455, 86, 87, 462, 88, 0, 0, 0,
	0, 501, 467, 0, 0, 0, 89, 90, 196, 515,
	198, 516, 91, 517, 518, 0, 92, 202, 203, 93,
	482, 500, 519, 520, 206, 0, 511, 0, 493, 0,
	94, 95, 96, 0, 97, 0, 98, 99, 0, 361,
	100, 101, 0, 494, 496, 0, 495, 497, 102, 103,
	104, 105, 521, 106, 522, 523, 0, 107, 0, 108,
	0, 0, 0, 514, 110, 0, 111, 0, 0, 0,
	466, 112, 113, 502, 480, 0, 0, 114, 115, 524,
	0, 116, 0, 117, 0, 0, 362, 0, 118, 512,
	0, 215, 0, 119, 120, 508, 510, 364, 0, 123,
	0, 121, 0, 363, 122, 525, 526, 527, 0, 492,
	0, 365, 124, 366, 125, 126, 0, 0, 513, 367,
	127, 368, 0, 128, 0, 0, 129, 0, 130, 131,
	132, 133, 134, 369, 135, 136, 139, 137, 456, 138,
	481, 509, 140, 528, 141, 142, 0, 0, 0, 0,
	0, 143, 225, 370, 144, 371, 503, 145, 146, 147,
	0, 504, 148, 228, 149, 0, 150, 151, 152, 529,
	153, 154, 0, 156, 157, 155, 158, 0, 159, 372,
	160, 161, 470, 162, 0, 163, 164, 165, 56, 231,
	166, 167, 498, 168, 169, 373, 170, 530, 233, 171,
	0, 172, 173, 175, 531, 174, 505, 0, 176, 58,
	177, 178, 0, 236, 532, 533, 0, 0, 179, 506,
	507, 479, 180, 181, 182, 183, 0, 0, 184, 185,
	186, 499, 0, 187, 188, 189, 359, 534, 0, 190,
	0, 0, 0, 54, 191, 192, 193, 194, 457, 55,
	0, 485, 474, 475, 472, 473, 461, 0, 0, 453,
	454, 0, 0, 0, 0, 455, 86, 87, 462, 88,
	0, 0, 0, 0, 501, 467, 0, 0, 0, 89,
	90, 196, 515, 198, 516, 91, 517, 518, 1140, 92,
	202, 203, 93, 482, 500, 519, 520, 206, 0, 511,
	0, 493, 0, 94, 95, 96, 0, 97, 0, 98,
	99, 0, 361, 100, 101, 0, 494, 496, 0, 495,
	497, 102, 103, 104, 105, 521, 106, 522, 523, 0,
	107, 0, 108, 0, 0, 0, 514, 110, 0, 111,
	0, 0, 0, 466, 112, 113, 502, 480, 0, 0,
	114, 115, 524, 0, 116, 0, 117, 0, 1145, 362,
	0, 118, 512, 0, 215, 0, 119, 120, 508, 510,
	364, 0, 123, 0, 121, 0, 363, 122, 525, 526,
	527, 0, 492, 0, 365, 124, 366, 125, 126, 0,
	1141, 513, 367, 127, 368, 0, 128, 0, 0, 129,
	0, 130, 131, 132, 133, 134, 369, 135, 136, 139,
	137, 456, 138, 481, 509, 140, 528, 141, 142, 0,
	0, 0, 0, 0, 143, 225, 370, 144, 371, 503,
	145, 146, 147, 0, 504, 148, 228, 149, 0, 150,
	151, 152, 529, 153, 154, 0, 156, 157, 155, 158,
	0, 159, 372, 160, 161, 470, 162, 0, 163, 164,
	165, 0, 231, 166, 167, 498, 168, 169, 373, 170,
	530, 233, 171, 0, 172, 173, 175, 531, 174, 505,
	0, 176, 0, 177, 178, 0, 236, 532, 533, 0,
	1142, 179, 506, 507, 479, 180, 181, 182, 183, 0,
	0, 184, 185, 186, 499, 0, 187, 188, 189, 241,
	534, 0, 190, 0, 0, 0, 0, 191, 192, 193,
	194, 457, 0, 0, 485, 474, 475, 472, 473, 461,
	0, 0, 453, 454, 0, 0, 0, 0, 455, 86,
	87, 462, 88, 0, 0, 0, 0, 501, 467, 0,
	0, 0, 89, 90, 196, 515, 198, 516, 91, 517,
	518, 0, 92, 202, 203, 93, 482, 500, 519, 520,
	206, 0, 511, 0, 493, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 361, 100, 101, 0, 494,
	496, 0, 495, 497, 102, 103, 104, 105, 521, 106,
	522, 523, 0, 107, 0, 108, 0, 0, 0, 514,
	110, 0, 111, 0, 0, 0, 466, 112, 113, 502,
	480, 0, 0, 114, 115, 524, 0, 116, 0, 117,
	0, 0, 362, 0, 118, 512, 0, 215, 0, 119,
	120, 508, 510, 364, 0, 123, 0, 121, 0, 363,
	122, 525, 526, 527, 0, 492, 0, 365, 124, 366,
	125, 126, 0, 0, 513, 367, 127, 368, 0, 128,
	0, 0, 129, 0, 130, 131, 132, 133, 134, 369,
	135, 136, 139, 137, 456, 138, 481, 509, 140, 528,
	141, 142, 0, 0, 0, 0, 0, 143, 225, 370,
	144, 371, 503, 145, 146, 147, 0, 504, 148, 228,
	149, 0, 150, 151, 152, 529, 153, 154, 0, 156,
	157, 155, 158, 0, 159, 372, 160, 161, 470, 162,
	0, 163, 164, 165, 0, 231, 166, 167, 498, 168,
	169, 373, 170, 530, 233, 171, 0, 172, 173, 175,
	531, 174, 505, 0, 176, 0, 177, 178, 0, 236,
	532, 533, 0, 0, 179, 506, 507, 479, 180, 181,
	182, 183, 0, 0, 184, 185, 186, 499, 0, 187,
	188, 189, 241, 534, 0, 190, 0, 0, 0, 0,
	191, 192, 193, 194, 457, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 453, 454, 0, 0, 0,
	0, 455, 0, 0, 462, 1504, 485, 474, 475, 472,
	473, 461, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 86, 87, 0, 88, 0, 0, 0, 0, 501,
	467, 0, 0, 0, 89, 90, 196, 515, 198, 516,
	91, 517, 518, 0, 92, 202, 203, 93, 482, 500,
	519, 520, 206, 0, 511, 0, 493, 0, 94, 95,
	96, 0, 97, 0, 98, 99, 0, 361, 100, 101,
	0, 494, 496, 0, 495, 497, 102, 103, 104, 105,
	521, 106, 522, 523, 0, 107, 0, 108, 0, 0,
	0, 514, 110, 0, 111, 0, 0, 0, 466, 112,
	113, 502, 480, 0, 0, 114, 115, 524, 0, 116,
	0, 117, 0, 0, 362, 0, 118, 512, 0, 215,
	0, 119, 120, 508, 510, 364, 0, 123, 0, 121,
	0, 363, 122, 525, 526, 527, 0, 492, 0, 365,
	124, 366, 125, 126, 0, 0, 513, 367, 127, 368,
	0, 128, 0, 0, 129, 0, 130, 131, 132, 133,
	134, 369, 135, 136, 139, 137, 456, 138, 481, 509,
	140, 528, 141, 142, 0, 0, 0, 0, 0, 143,
	225, 370, 144, 371, 503, 145, 146, 147, 0, 504,
	148, 228, 149, 0, 150, 151, 152, 529, 153, 154,
	0, 156, 157, 155, 158, 0, 159, 372, 160, 161,
	470, 162, 0, 163, 164, 165, 0, 231, 166, 167,
	498, 168, 169, 373, 170, 530, 233, 171, 0, 172,
	173, 175, 531, 174, 505, 0, 176, 0, 177, 178,
	0, 236, 532, 533, 0, 0, 179, 506, 507, 479,
	180, 181, 182, 183, 0, 0, 184, 185, 186, 499,
	0, 187, 188, 189, 241, 534, 0, 190, 0, 0,
	0, 0, 191, 192, 193, 194, 457, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 453, 454, 0,
	0, 0, 0, 455, 0, 0, 462, 1454, 485, 474,
	475, 472, 473, 461, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 86, 87, 0, 88, 0, 0, 0,
	0, 501, 467, 0, 0, 0, 89, 90, 196, 515,
	198, 516, 91, 517, 518, 0, 92, 202, 203, 93,
	482, 500, 519, 520, 206, 0, 511, 0, 493, 0,
	94, 95, 96, 0, 97, 0, 98, 99, 0, 361,
	100, 101, 0, 494, 496, 0, 495, 497, 102, 103,
	104, 105, 521, 106, 522, 523, 0, 107, 0, 108,
	0, 0, 0, 514, 110, 0, 111, 0, 0, 0,
	466, 112, 113, 502, 480, 0, 0, 114, 115, 524,
	0, 116, 0, 117, 0, 0, 362, 0, 118, 512,
	0, 215, 0, 119, 120, 508, 510, 364, 0, 123,
	0, 121, 0, 363, 122, 525, 526, 527, 0, 492,
	0, 365, 124, 366, 125, 126, 0, 0, 513, 367,
	127, 368, 0, 128, 0, 0, 129, 0, 130, 131,
	132, 133, 134, 369, 135, 136, 139, 137, 456, 138,
	481, 509, 140, 528, 141, 142, 0, 0, 0, 0,
	0, 143, 225, 370, 144, 371, 503, 145, 146, 147,
	0, 504, 148, 228, 149, 0, 150, 151, 152, 529,
	153, 154, 0, 156, 157, 155, 158, 0, 159, 372,
	160, 161, 470, 162, 0, 163, 164, 165, 0, 231,
	166, 167, 498, 168, 169, 373, 170, 530, 233, 171,
	0, 172, 173, 175, 531, 174, 505, 0, 176, 0,
	177, 178, 0, 236, 532, 533, 0, 0, 179, 506,
	507, 479, 180, 181, 182, 183, 0, 0, 184, 185,
	186, 499, 0, 187, 188, 189, 241, 534, 0, 190,
	0, 0, 0, 0, 191, 192, 193, 194, 457, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 453,
	454, 0, 0, 0, 0, 455, 0, 0, 462, 1097,
	485, 474, 475, 472, 473, 461, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 87, 0, 88, 0,
	0, 0, 0, 501, 467, 0, 0, 0, 89, 90,
	196, 515, 198, 516, 91, 517, 518, 0, 92, 202,
	203, 93, 482, 500, 519, 520, 206, 0, 511, 0,
	493, 0, 94, 95, 96, 0, 97, 0, 98, 99,
	0, 361, 100, 101, 0, 494, 496, 0, 495, 497,
	102, 103, 104, 105, 521, 106, 522, 523, 0, 107,
	0, 108, 0, 0, 0, 514, 110, 0, 111, 0,
	0, 0, 466, 112, 113, 502, 480, 0, 0, 114,
	115, 524, 0, 116, 0, 117, 0, 0, 362, 0,
	118, 512, 0, 215, 0, 119, 120, 508, 510, 364,
	0, 123, 0, 121, 0, 363, 122, 525, 526, 527,
	0, 492, 0, 365, 124, 366, 125, 126, 0, 0,
	513, 367, 127, 368, 0, 128, 0, 0, 129, 0,
	130, 131, 132, 133, 134, 369, 135, 136, 139, 137,
	456, 138, 481, 509, 140, 528, 141, 142, 0, 0,
	0, 0, 0, 143, 225, 370, 144, 371, 503, 145,
	146, 147, 0, 504, 148, 228, 149, 0, 150, 151,
	152, 529, 153, 154, 0, 156, 157, 155, 158, 0,
	159, 372, 160, 161, 470, 162, 0, 163, 164, 165,
	0, 231, 166, 167, 498, 168, 169, 373, 170, 530,
	233, 171, 0, 172, 173, 175, 531, 174, 505, 0,
	176, 0, 177, 178, 0, 236, 532, 533, 0, 0,
	179, 506, 507, 479, 180, 181, 182, 183, 0, 0,
	184, 185, 186, 499, 0, 187, 188, 189, 241, 534,
	0, 190, 0, 0, 0, 0, 191, 192, 193, 194,
	457, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 453, 454, 0, 0, 0, 0, 455, 858, 1094,
	462, 485, 474, 475, 472, 473, 461, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 87, 0, 88,
	0, 0, 0, 0, 501, 467, 0, 0, 0, 89,
	90, 196, 515, 198, 516, 91, 517, 518, 0, 92,
	202, 203, 93, 482, 500, 519, 520, 206, 0, 511,
	0, 493, 0, 94, 95, 96, 0, 97, 0, 98,
	99, 0, 361, 100, 101, 0, 494, 496, 0, 495,
	497, 102, 103, 104, 105, 521, 106, 522, 523, 0,
	107, 0, 108, 0, 0, 0, 514, 110, 0, 111,
	0, 0, 0, 466, 112, 113, 502, 480, 0, 0,
	114, 115, 524, 0, 116, 0, 117, 0, 0, 362,
	0, 118, 512, 0, 215, 0, 119, 120, 508, 510,
	364, 0, 123, 0, 121, 0, 363, 122, 525, 526,
	527, 0, 492, 0, 365, 124, 366, 125, 126, 0,
	0, 513, 367, 127, 368, 0, 128, 0, 0, 129,
	0, 130, 131, 132, 133, 134, 369, 135, 136, 139,
	137, 456, 138, 481, 509, 140, 528, 141, 142, 0,
	0, 0, 0, 0, 143, 225, 370, 144, 371, 503,
	145, 146, 147, 0, 504, 148, 228, 149, 0, 150,
	151, 152, 529, 153, 154, 0, 156, 157, 155, 158,
	0, 159, 372, 160, 161, 470, 162, 0, 163, 164,
	165, 0, 231, 166, 167, 498, 168, 169, 373, 170,
	530, 233, 171, 0, 172, 173, 175, 531, 174, 505,
	0, 176, 0, 177, 178, 0, 236, 532, 533, 0,
	0, 179, 506, 507, 479, 180, 181, 182, 183, 0,
	0, 184, 185, 186, 499, 0, 187, 188, 189, 241,
	534, 0, 190, 0, 0, 0, 0, 191, 192, 193,
	194, 457, 0, 0, 485, 474, 475, 472, 473, 461,
	0, 0, 453, 454, 451, 0, 0, 0, 455, 86,
	87, 462, 88, 0, 0, 0, 0, 501, 467, 0,
	0, 0, 89, 90, 196, 515, 198, 516, 91, 517,
	518, 0, 92, 202, 203, 93, 482, 500, 519, 520,
	206, 0, 511, 0, 493, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 361, 100, 101, 0, 494,
	496, 0, 495, 497, 102, 103, 104, 105, 521, 106,
	522, 523, 0, 107, 0, 108, 0, 0, 0, 514,
	110, 0, 111, 0, 0, 0, 466, 112, 113, 502,
	480, 0, 0, 114, 115, 524, 0, 116, 0, 117,
	0, 0, 362, 0, 118, 512, 0, 215, 0, 119,
	120, 508, 510, 364, 0, 123, 0, 121, 0, 363,
	122, 525, 526, 527, 0, 492, 0, 365, 124, 366,
	125, 126, 0, 0, 513, 367, 127, 368, 0, 128,
	0, 0, 129, 0, 130, 131, 132, 133, 134, 369,
	135, 136, 139, 137, 456, 138, 481, 509, 140, 528,
	141, 142, 0, 0, 0, 0, 0, 143, 225, 370,
	144, 371, 503, 145, 146, 147, 0, 504, 148, 228,
	149, 0, 150, 151, 152, 529, 153, 154, 0, 156,
	157, 155, 158, 0, 159, 372, 160, 161, 470, 162,
	0, 163, 164, 165, 0, 231, 166, 167, 498, 168,
	169, 373, 170, 530, 233, 171, 0, 172, 173, 175,
	531, 174, 505, 0, 176, 0, 177, 178, 0, 236,
	532, 533, 0, 0, 179, 506, 507, 479, 180, 181,
	182, 183, 0, 0, 184, 185, 186, 499, 0, 187,
	188, 189, 241, 534, 1459, 190, 0, 0, 0, 0,
	191, 192, 193, 194, 457, 0, 0, 485, 474, 475,
	472, 473, 461, 0, 0, 453, 454, 0, 0, 0,
	0, 455, 86, 87, 462, 88, 0, 0, 0, 0,
	501, 467, 0, 0, 0, 89, 90, 196, 515, 198,
	516, 91, 517, 518, 0, 92, 202, 203, 93, 482,
	500, 519, 520, 206, 0, 511, 0, 493, 0, 94,
	95, 96, 0, 97, 0, 98, 99, 0, 361, 100,
	101, 0, 494, 496, 0, 495, 497, 102, 103, 104,
	105, 521, 106, 522, 523, 555, 107, 0, 108, 0,
	0, 0, 514, 110, 0, 111, 0, 0, 0, 466,
	112, 113, 502, 480, 0, 0, 114, 115, 524, 0,
	116, 0, 117, 0, 0, 362, 0, 118, 512, 0,
	215, 0, 119, 120, 508, 510, 364, 0, 123, 0,
	121, 0, 363, 122, 525, 526, 527, 0, 492, 0,
	365, 124, 366, 125, 126, 0, 0, 513, 367, 127,
	368, 0, 128, 0, 0, 129, 0, 130, 131, 132,
	133, 134, 369, 135, 136, 139, 137, 456, 138, 481,
	509, 140, 528, 141, 142, 0, 0, 0, 0, 0,
	143, 225, 370, 144, 371, 503, 145, 146, 147, 0,
	504, 148, 228, 149, 0, 150, 151, 152, 529, 153,
	154, 0, 156, 157, 155, 158, 0, 159, 372, 160,
	161, 470, 162, 0, 163, 164, 165, 0, 231, 166,
	167, 498, 168, 169, 373, 170, 530, 233, 171, 0,
	172, 173, 175, 531, 174, 505, 0, 176, 0, 177,
	178, 0, 236, 532, 533, 0, 0, 179, 506, 507,
	479, 180, 181, 182, 183, 0, 0, 184, 185, 186,
	499, 0, 187, 188, 189, 241, 534, 0, 190, 0,
	0, 0, 0, 191, 192, 193, 194, 457, 0, 0,
	485, 474, 475, 472, 473, 461, 0, 0, 453, 454,
	0, 0, 0, 0, 455, 86, 87, 462, 88, 0,
	0, 0, 0, 501, 467, 0, 0, 0, 89, 90,
	196, 515, 198, 516, 91, 517, 518, 0, 92, 202,
	203, 93, 482, 500, 519, 520, 206, 0, 511, 0,
	493, 0, 94, 95, 96, 0, 97, 0, 98, 99,
	0, 361, 100, 101, 0, 494, 496, 0, 495, 497,
	102, 103, 104, 105, 521, 106, 522, 523, 0, 107,
	0, 108, 0, 0, 0, 514, 110, 0, 111, 0,
	0, 0, 466, 112, 113, 502, 480, 0, 0, 114,
	115, 524, 0, 116, 0, 117, 0, 1145, 362, 0,
	118, 512, 0, 215, 0, 119, 120, 508, 510, 364,
	0, 123, 0, 121, 0, 363, 122, 525, 526, 527,
	0, 492, 0, 365, 124, 366, 125, 126, 0, 0,
	513, 367, 127, 368, 0, 128, 0, 0, 129, 0,
	130, 131, 132, 133, 134, 369, 135, 136, 139, 137,
	456, 138, 481, 509, 140, 528, 141, 142, 0, 0,
	0, 0, 0, 143, 225, 370, 144, 371, 503, 145,
	146, 147, 0, 504, 148, 228, 149, 0, 150, 151,
	152, 529, 153, 154, 0, 156, 157, 155, 158, 0,
	159, 372, 160, 161, 470, 162, 0, 163, 164, 165,
	0, 231, 166, 167, 498, 168, 169, 373, 170, 530,
	233, 171, 0, 172, 173, 175, 531, 174, 505, 0,
	176, 0, 177, 178, 0, 236, 532, 533, 0, 0,
	179, 506, 507, 479, 180, 181, 182, 183, 0, 0,
	184, 185, 186, 499, 0, 187, 188, 189, 241, 534,
	0, 190, 0, 0, 0, 0, 191, 192, 193, 194,
	457, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 453, 454, 0, 0, 0, 0, 455, 0, 0,
	462, 485, 474, 475, 472, 473, 461, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 87, 793, 88,
	0, 0, 0, 0, 501, 467, 0, 0, 0, 89,
	90, 196, 515, 198, 516, 91, 517, 518, 0, 92,
	202, 203, 93, 482, 500, 519, 520, 206, 0, 511,
	0, 493, 0, 94, 95, 96, 0, 97, 0, 98,
	99, 0, 361, 100, 101, 0, 494, 496, 0, 495,
	497, 102, 103, 104, 105, 521, 106, 522, 523, 0,
	107, 0, 108, 0, 0, 0, 514, 110, 0, 111,
	0, 0, 0, 466, 112, 113, 502, 480, 0, 0,
	114, 115, 524, 0, 116, 0, 117, 0, 0, 362,
	0, 118, 512, 0, 215, 0, 119, 120, 508, 510,
	364, 0, 123, 0, 121, 0, 363, 122, 525, 526,
	527, 0, 492, 0, 365, 124, 366, 125, 126, 0,
	0, 513, 367, 127, 368, 0, 128, 0, 0, 129,
	0, 130, 131, 132, 133, 134, 369, 135, 136, 139,
	137, 456, 138, 481, 509, 140, 528, 141, 142, 0,
	0, 0, 0, 0, 143, 225, 370, 144, 371, 503,
	145, 146, 147, 0, 504, 148, 228, 149, 0, 150,
	151, 152, 529, 153, 154, 0, 156, 157, 155, 158,
	0, 159, 372, 160, 161, 470, 162, 0, 163, 164,
	165, 0, 231, 166, 167, 498, 168, 169, 373, 170,
	530, 233, 171, 0, 172, 173, 175, 531, 174, 505,
	0, 176, 0, 177, 178, 0, 236, 532, 533, 0,
	0, 179, 506, 507, 479, 180, 181, 182, 183, 0,
	0, 184, 185, 186, 499, 0, 187, 188, 189, 241,
	534, 0, 190, 0, 0, 0, 0, 191, 192, 193,
	194, 457, 0, 0, 485, 474, 475, 472, 473, 461,
	0, 0, 453, 454, 0, 0, 0, 0, 455, 86,
	87, 462, 88, 0, 0, 0, 0, 501, 467, 0,
	0, 0, 89, 90, 196, 515, 198, 516, 91, 517,
	518, 0, 92, 202, 203, 93, 482, 500, 519, 520,
	206, 0, 511, 0, 493, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 361, 100, 1805, 0, 494,
	496, 0, 495, 497, 102, 103, 104, 105, 521, 106,
	522, 523, 0, 107, 0, 108, 0, 0, 0, 514,
	110, 0, 111, 0, 0, 0, 466, 112, 113, 502,
	480, 0, 0, 114, 115, 524, 0, 116, 0, 117,
	0, 0, 362, 0, 118, 512, 0, 215, 0, 119,
	120, 508, 510, 364, 0, 123, 0, 121, 0, 363,
	122, 525, 526, 527, 0, 492, 0, 365, 124, 366,
	125, 126, 0, 0, 513, 367, 127, 368, 0, 128,
	0, 0, 129, 0, 130, 131, 132, 133, 134, 369,
	135, 136, 139, 137, 456, 138, 481, 509, 140, 528,
	141, 142, 0, 0, 0, 0, 0, 143, 225, 370,
	144, 371, 503, 145, 146, 147, 0, 504, 148, 228,
	149, 0, 150, 151, 152, 529, 153, 154, 0, 156,
	157, 155, 158, 0, 159, 372, 160, 161, 470, 162,
	0, 163, 164, 165, 0, 231, 166, 167, 498, 168,
	169, 373, 170, 530, 233, 171, 0, 172, 173, 175,
	531, 174, 505, 0, 176, 0, 177, 178, 0, 236,
	532, 533, 0, 0, 179, 506, 507, 479, 180, 181,
	1804, 183, 0, 0, 184, 185, 186, 499, 0, 187,
	188, 189, 241, 534, 0, 190, 0, 0, 0, 0,
	191, 192, 193, 194, 457, 0, 0, 485, 474, 475,
	472, 473, 461, 0, 0, 453, 454, 0, 0, 0,
	0, 455, 86, 87, 462, 88, 0, 0, 0, 0,
	501, 467, 0, 0, 0, 89, 90, 1803, 515, 198,
	516, 91, 517, 518, 0, 92, 202, 203, 93, 482,
	500, 519, 520, 206, 0, 511, 0, 493, 0, 94,
	95, 96, 0, 97, 0, 98, 99, 0, 361, 100,
	1805, 0, 494, 496, 0, 495, 497, 102, 103, 104,
	105, 521, 106, 522, 523, 0, 107, 0, 108, 0,
	0, 0, 514, 110, 0, 111, 0, 0, 0, 466,
	112, 113, 502, 480, 0, 0, 114, 115, 524, 0,
	116, 0, 117, 0, 0, 362, 0, 118, 512, 0,
	215, 0, 119, 120, 508, 510, 364, 0, 123, 0,
	121, 0, 363, 122, 525, 526, 527, 0, 492, 0,
	365, 124, 366, 125, 126, 0, 0, 513, 367, 127,
	368, 0, 128, 0, 0, 129, 0, 130, 131, 132,
	133, 134, 369, 135, 136, 139, 137, 456, 138, 481,
	509, 140, 528, 141, 142, 0, 0, 0, 0, 0,
	143, 225, 370, 144, 371, 503, 145, 146, 147, 0,
	504, 148, 228, 149, 0, 150, 151, 152, 529, 153,
	154, 0, 156, 157, 155, 158, 0, 159, 372, 160,
	161, 470, 162, 0, 163, 164, 165, 0, 231, 166,
	167, 498, 168, 169, 373, 170, 530, 233, 171, 0,
	172, 173, 175, 531, 174, 505, 0, 176, 0, 177,
	178, 0, 236, 532, 533, 0, 0, 179, 506, 507,
	479, 180, 181, 1804, 183, 0, 0, 184, 185, 186,
	499, 0, 187, 188, 189, 241, 534, 0, 190, 0,
	0, 0, 0, 191, 192, 193, 194, 457, 0, 0,
	485, 474, 475, 472, 473, 461, 0, 0, 453, 454,
	0, 0, 0, 0, 455, 86, 87, 462, 88, 0,
	0, 0, 0, 501, 467, 0, 0, 0, 89, 90,
	196, 515, 198, 516, 91, 517, 518, 0, 92, 202,
	203, 93, 482, 500, 519, 520, 206, 0, 511, 0,
	493, 0, 94, 95, 96, 0, 97, 0, 98, 99,
	0, 361, 100, 101, 0, 494, 496, 0, 495, 497,
	102, 103, 104, 105, 521, 106, 522, 523, 0, 107,
	0, 108, 0, 0, 0, 514, 110, 0, 111, 0,
	0, 0, 466, 112, 113, 502, 480, 0, 0, 114,
	115, 524, 0, 116, 0, 117, 0, 0, 362, 0,
	118, 512, 0, 215, 0, 119, 120, 508, 510, 364,
	0, 123, 0, 121, 0, 363, 122, 525, 526, 527,
	0, 492, 0, 365, 124, 366, 125, 126, 0, 0,
	513, 367, 127, 368, 0, 128, 0, 0, 129, 0,
	130, 131, 132, 133, 134, 369, 135, 136, 139, 137,
	456, 138, 481, 509, 140, 528, 141, 142, 0, 0,
	0, 0, 0, 143, 225, 370, 144, 371, 503, 145,
	146, 147, 0, 504, 148, 228, 149, 0, 150, 151,
	152, 529, 153, 154, 0, 156, 157, 155, 158, 0,
	159, 372, 160, 161, 470, 162, 0, 163, 164, 165,
	0, 231, 166, 167, 498, 168, 169, 373, 170, 530,
	233, 171, 0, 172, 173, 175, 531, 174, 505, 0,
	176, 0, 177, 178, 0, 236, 532, 533, 0, 0,
	179, 506, 507, 479, 180, 181, 182, 183, 0, 0,
	184, 185, 186, 499, 0, 187, 188, 189, 241, 534,
	0, 190, 0, 0, 0, 0, 191, 192, 193, 194,
	457, 0, 0, 485, 474, 475, 472, 473, 461, 0,
	0, 453, 454, 0, 0, 0, 0, 455, 86, 87,
	462, 88, 0, 0, 0, 0, 501, 467, 0, 0,
	0, 89, 90, 196, 515, 198, 516, 91, 517, 518,
	0, 92, 202, 203, 93, 482, 500, 519, 520, 206,
	0, 511, 0, 493, 0, 94, 95, 96, 0, 97,
	0, 98, 99, 0, 361, 100, 101, 0, 494, 496,
	0, 495, 497, 102, 103, 104, 105, 521, 106, 522,
	523, 0, 107, 0, 108, 0, 0, 0, 514, 110,
	0, 111, 0, 0, 0, 466, 112, 113, 502, 480,
	0, 0, 114, 115, 524, 0, 116, 0, 117, 0,
	0, 362, 0, 118, 512, 0, 215, 0, 119, 120,
	508, 510, 364, 0, 123, 0, 121, 0, 363, 122,
	525, 526, 527, 0, 492, 0, 365, 124, 366, 125,
	126, 0, 0, 513, 367, 127, 368, 0, 128, 0,
	0, 129, 0, 130, 131, 132, 133, 134, 369, 135,
	136, 139, 137, 0, 138, 481, 509, 140, 528, 141,
	142, 0, 0, 0, 0, 0, 143, 225, 370, 144,
	371, 503, 145, 146, 147, 0, 504, 148, 228, 149,
	0, 150, 151, 152, 529, 153, 154, 0, 156, 157,
	155, 158, 0, 159, 372, 160, 161, 1135, 162, 0,
	163, 164, 165, 0, 231, 166, 167, 498, 168, 169,
	373, 170, 530, 233, 171, 0, 172, 173, 175, 531,
	174, 505, 0, 176, 0, 177, 178, 0, 236, 532,
	533, 0, 0, 179, 506, 507, 479, 180, 181, 182,
	183, 0, 0, 184, 185, 186, 499, 0, 187, 188,
	189, 241, 534, 0, 190, 0, 0, 0, 0, 191,
	192, 193, 194, 485, 474, 475, 472, 473, 461, 0,
	0, 0, 0, 0, 1131, 1132, 0, 0, 86, 87,
	1133, 88, 0, 1134, 0, 0, 501, 467, 0, 0,
	0, 89, 90, 0, 515, 198, 516, 91, 517, 518,
	0, 92, 202, 203, 93, 482, 500, 519, 520, 206,
	0, 511, 0, 493, 0, 94, 95, 96, 0, 97,
	0, 98, 99, 0, 361, 100, 1805, 0, 494, 496,
	0, 495, 497, 102, 103, 104, 105, 521, 106, 522,
	523, 0, 107, 0, 108, 0, 0, 0, 514, 110,
	0, 111, 0, 0, 0, 466, 112, 113, 502, 480,
	0, 0, 114, 115, 524, 0, 116, 0, 117, 0,
	0, 362, 0, 118, 512, 0, 215, 0, 119, 120,
	508, 510, 0, 0, 123, 0, 121, 0, 363, 122,
	525, 526, 527, 0, 492, 0, 0, 124, 366, 125,
	126, 0, 0, 513, 367, 127, 0, 0, 128, 0,
	0, 129, 0, 130, 131, 132, 133, 134, 369, 135,
	136, 139, 137, 456, 138, 481, 509, 140, 528, 141,
	142, 0, 0, 0, 0, 0, 143, 225, 370, 144,
	371, 503, 145, 146, 147, 0, 504, 148, 228, 149,
	0, 150, 151, 152, 529, 153, 154, 0, 156, 157,
	155, 158, 0, 159, 372, 160, 161, 470, 162, 0,
	163, 164, 165, 0, 231, 166, 167, 498, 168, 169,
	0, 170, 530, 233, 171, 0, 172, 173, 175, 531,
	174, 505, 0, 176, 0, 177, 178, 0, 236, 532,
	533, 0, 0, 179, 506, 507, 479, 180, 181, 1804,
	183, 0, 0, 184, 185, 186, 499, 0, 187, 188,
	189, 241, 534, 0, 190, 0, 0, 0, 0, 191,
	192, 193, 194, 485, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 453, 454, 0, 0, 86, 87,
	455, 88, 0, 462, 0, 0, 501, 0, 0, 0,
	0, 89, 90, 196, 197, 198, 199, 91, 200, 201,
	0, 92, 202, 203, 93, 0, 500, 204, 205, 206,
	0, 511, 0, 493, 0, 94, 95, 96, 0, 97,
	0, 98, 99, 0, 361, 100, 101, 0, 494, 496,
	0, 495, 497, 102, 103, 104, 105, 208, 106, 209,
	210, 0, 107, 0, 108, 0, 0, 0, 109, 110,
	0, 111, 0, 0, 0, 211, 112, 113, 502, 0,
	0, 0, 114, 115, 213, 0, 116, 0, 117, 0,
	0, 362, 0, 118, 512, 0, 215, 0, 119, 120,
	508, 510, 364, 0, 123, 0, 121, 0, 363, 122,
	218, 219, 220, 0, 221, 0, 365, 124, 366, 125,
	126, 0, 0, 513, 367, 127, 368, 0, 128, 0,
	0, 129, 0, 130, 131, 132, 133, 134, 369, 135,
	136, 139, 137, 0, 138, 0, 509, 140, 224, 141,
	142, 0, 0, 0, 0, 0, 143, 225, 370, 144,
	371, 503, 145, 146, 147, 0, 504, 148, 228, 149,
	0, 150, 151, 152, 229, 153, 154, 0, 156, 157,
	155, 158, 0, 159, 372, 160, 161, 230, 162, 0,
	163, 164, 165, 0, 231, 166, 167, 498, 168, 169,
	373, 170, 232, 233, 171, 0, 172, 173, 175, 234,
	174, 505, 0, 176, 0, 177, 178, 0, 236, 237,
	238, 0, 0, 179, 506, 507, 0, 180, 181, 182,
	183, 0, 0, 184, 185, 186, 499, 0, 187, 188,
	189, 241, 242, 0, 190, 0, 355, 0, 0, 191,
	192, 193, 194, 0, 0, 0, 0, 0, 0, 0,
	0, 86, 87, 0, 88, 0, 0, 0, 0, 195,
	0, 0, 0, 1570, 89, 90, 196, 197, 198, 199,
	91, 200, 201, 0, 92, 202, 203, 93, 0, 0,
	204, 205, 206, 0, 207, 0, 360, 0, 94, 95,
	96, 0, 97, 0, 98, 99, 0, 361, 100, 101,
	0, 0, 0, 0, 0, 0, 102, 103, 104, 105,
	208, 106, 209, 210, 0, 107, 0, 108, 0, 0,
	0, 109, 110, 0, 111, 0, 0, 0, 211, 112,
	113, 212, 0, 0, 0, 114, 115, 213, 0, 116,
	0, 117, 0, 0, 362, 0, 118, 214, 0, 215,
	0, 119, 120, 216, 217, 364, 0, 123, 0, 121,
	0, 363, 122, 218, 219, 220, 0, 221, 0, 365,
	124, 366, 125, 126, 0, 0, 222, 367, 127, 368,
	0, 128, 0, 0, 129, 0, 130, 131, 132, 133,
	134, 369, 135, 136, 139, 137, 0, 138, 0, 223,
	140, 224, 141, 142, 0, 0, 0, 0, 0, 143,
	225, 370, 144, 371, 226, 145, 146, 147, 0, 227,
	148, 228, 149, 0, 150, 151, 152, 229, 153, 154,
	0, 156, 157, 155, 158, 0, 159, 372, 160, 161,
	230, 162, 0, 163, 164, 165, 56, 231, 166, 167,
	0, 168, 169, 373, 170, 232, 233, 171, 0, 172,
	173, 175, 234, 174, 235, 0, 176, 58, 177, 178,
	0, 236, 237, 238, 0, 0, 179, 239, 240, 0,
	180, 181, 182, 183, 0, 0, 184, 185, 186, 0,
	0, 187, 188, 189, 359, 242, 0, 190, 0, 0,
	0, 54, 191, 192, 193, 194, 0, 55, 0, 355,
	664, 0, 665, 660, 655, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 87, 53, 88, 0, 0,
	0, 0, 195, 0, 0, 0, 0, 89, 90, 196,
	197, 198, 199, 91, 200, 201, 0, 92, 202, 203,
	93, 0, 0, 204, 205, 206, 0, 207, 0, 360,
	0, 94, 95, 96, 0, 97, 0, 98, 99, 0,
	361, 100, 101, 0, 0, 0, 0, 0, 0, 102,
	103, 104, 105, 208, 106, 209, 210, 668, 107, 0,
	108, 0, 0, 0, 109, 110, 0, 111, 0, 0,
	0, 211, 112, 113, 212, 657, 0, 0, 114, 115,
	213, 0, 116, 0, 117, 0, 0, 362, 0, 118,
	214, 0, 215, 0, 119, 120, 216, 217, 364, 0,
	123, 0, 121, 0, 363, 122, 218, 219, 220, 0,
	221, 0, 365, 124, 366, 125, 126, 0, 0, 222,
	367, 127, 368, 0, 128, 0, 0, 129, 0, 130,
	131, 132, 133, 134, 369, 135, 136, 139, 137, 0,
	138, 0, 223, 140, 224, 141, 142, 0, 658, 0,
	0, 0, 143, 225, 370, 144, 371, 226, 145, 146,
	147, 0, 227, 148, 228, 149, 0, 150, 151, 152,
	229, 153, 154, 0, 156, 157, 155, 158, 0, 159,
	372, 160, 161, 230, 162, 0, 163, 164, 165, 0,
	231, 166, 167, 0, 168, 169, 373, 170, 232, 233,
	171, 0, 172, 173, 175, 234, 174, 235, 0, 176,
	0, 177, 178, 0, 236, 237, 238, 0, 0, 179,
	239, 240, 656, 180, 181, 182, 183, 0, 0, 184,
	185, 186, 0, 0, 187, 188, 189, 241, 242, 0,
	190, 0, 0, 0, 0, 191, 192, 193, 194, 355,
	664, 0, 665, 660, 655, 0, 0, 0, 0, 0,
	666, 661, 0, 0, 86, 87, 0, 88, 0, 0,
	0, 0, 195, 0, 0, 0, 0, 89, 90, 196,
	197, 198, 199, 91, 200, 201, 0, 92, 202, 203,
	93, 0, 0, 204, 205, 206, 0, 207, 0, 360,
	0, 94, 95, 96, 0, 97, 0, 98, 99, 0,
	361, 100, 101, 0, 0, 0, 0, 0, 0, 102,
	103, 104, 105, 208, 106, 209, 210, 651, 107, 0,
	108, 0, 0, 0, 109, 110, 0, 111, 0, 0,
	0, 211, 112, 113, 212, 657, 0, 0, 114, 115,
	213, 0, 116, 0, 117, 0, 0, 362, 0, 118,
	214, 0, 215, 0, 119, 120, 216, 217, 364, 0,
	123, 0, 121, 0, 363, 122, 218, 219, 220, 0,
	221, 0, 365, 124, 366, 125, 126, 0, 0, 222,
	367, 127, 368, 0, 128, 0, 0, 129, 0, 130,
	131, 132, 133, 134, 369, 135, 136, 139, 137, 0,
	138, 0, 223, 140, 224, 141, 142, 0, 658, 0,
	0, 0, 143, 225, 370, 144, 371, 226, 145, 146,
	147, 0, 227, 148, 228, 149, 0, 150, 151, 152,
	229, 153, 154, 0, 156, 157, 155, 158, 0, 159,
	372, 160, 161, 230, 162, 0, 163, 164, 165, 0,
	231, 166, 167, 0, 168, 169, 373, 170, 232, 233,
	171, 0, 172, 173, 175, 234, 174, 235, 0, 176,
	0, 177, 178, 0, 236, 237, 238, 0, 0, 179,
	239, 240, 656, 180, 181, 182, 183, 0, 0, 184,
	185, 186, 0, 0, 187, 188, 189, 241, 242, 0,
	190, 0, 0, 0, 0, 191, 192, 193, 194, 355,
	664, 0, 665, 660, 655, 0, 0, 0, 0, 0,
	666, 661, 0, 0, 86, 87, 0, 88, 0, 0,
	0, 0, 195, 0, 0, 0, 0, 89, 90, 196,
	197, 198, 199, 91, 200, 201, 0, 92, 202, 203,
	93, 0, 0, 204, 205, 206, 0, 207, 0, 360,
	0, 94, 95, 96, 0, 97, 0, 98, 99, 0,
	361, 100, 101, 0, 0, 0, 0, 0, 0, 102,
	103, 104, 105, 208, 106, 209, 210, 0, 107, 0,
	108, 0, 0, 0, 109, 110, 0, 111, 0, 0,
	0, 211, 112, 113, 212, 657, 0, 0, 114, 115,
	213, 0, 116, 0, 117, 0, 0, 362, 0, 118,
	214, 0, 215, 0, 119, 120, 216, 217, 364, 0,
	123, 0, 121, 0, 363, 122, 218, 219, 220, 0,
	221, 0, 365, 124, 366, 125, 126, 0, 0, 222,
	367, 127, 368, 0, 128, 0, 0, 129, 0, 130,
	131, 132, 133, 134, 369, 135, 136, 139, 137, 0,
	138, 0, 223, 140, 224, 141, 142, 0, 658, 0,
	0, 0, 143, 225, 370, 144, 371, 226, 145, 146,
	147, 0, 227, 148, 228, 149, 0, 150, 151, 152,
	229, 153, 154, 0, 156, 157, 155, 158, 0, 159,
	372, 160, 161, 230, 162, 0, 163, 164, 165, 0,
	231, 166, 167, 0, 168, 169, 373, 170, 232, 233,
	171, 0, 172, 173, 175, 234, 174, 235, 0, 176,
	0, 177, 178, 0, 236, 237, 238, 0, 0, 179,
	239, 240, 656, 180, 181, 182, 183, 0, 0, 184,
	185, 186, 0, 0, 187, 188, 189, 241, 242, 83,
	190, 0, 0, 0, 0, 191, 192, 193, 194, 0,
	0, 0, 0, 0, 86, 87, 0, 88, 0, 0,
	666, 661, 195, 0, 0, 0, 0, 89, 90, 196,
	197, 198, 199, 91, 200, 201, 0, 92, 202, 203,
	93, 0, 0, 204, 205, 206, 0, 207, 0, 0,
	0, 94, 95, 96, 0, 97, 0, 98, 99, 0,
	0, 100, 101, 0, 0, 0, 0, 0, 0, 102,
	103, 104, 105, 208, 106, 209, 210, 0, 107, 0,
	108, 0, 0, 0, 109, 110, 0, 111, 0, 0,
	0, 211, 112, 113, 212, 0, 0, 0, 114, 115,
	213, 0, 116, 0, 117, 0, 0, 0, 0, 118,
	214, 0, 215, 0, 119, 120, 216, 217, 0, 0,
	123, 0, 121, 0, 0, 122, 218, 219, 220, 0,
	221, 0, 0, 124, 0, 125, 126, 0, 0, 222,
	0, 127, 0, 0, 128, 0, 0, 129, 0, 130,
	131, 132, 133, 134, 0, 135, 136, 139, 137, 0,
	138, 0, 223, 140, 224, 141, 142, 0, 0, 328,
	0, 0, 143, 225, 0, 144, 0, 226, 145, 146,
	147, 0, 227, 148, 228, 149, 0, 150, 151, 152,
	229, 153, 154, 0, 156, 157, 155, 158, 0, 159,
	0, 160, 161, 230, 162, 0, 163, 164, 165, 56,
	231, 166, 167, 0, 168, 169, 0, 170, 232, 233,
	171, 0, 172, 173, 175, 234, 174, 235, 0, 176,
	58, 177, 178, 0, 236, 237, 238, 0, 0, 179,
	239, 240, 0, 180, 181, 182, 183, 0, 0, 184,
	185, 186, 0, 0, 187, 188, 189, 359, 242, 0,
	190, 0, 83, 0, 54, 191, 192, 193, 194, 0,
	55, 0, 0, 0, 0, 0, 0, 86, 87, 0,
	88, 0, 0, 0, 0, 195, 0, 0, 0, 1036,
	89, 90, 196, 197, 198, 199, 91, 200, 201, 0,
	92, 202, 203, 93, 0, 0, 204, 205, 206, 0,
	207, 0, 0, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 0, 100, 101, 0, 0, 0, 0,
	0, 0, 102, 103, 104, 105, 208, 106, 209, 210,
	0, 107, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 211, 112, 113, 212, 0, 0,
	0, 114, 115, 213, 0, 116, 0, 117, 0, 0,
	0, 0, 118, 214, 0, 215, 0, 119, 120, 216,
	217, 0, 0, 123, 0, 121, 0, 0, 122, 218,
	219, 220, 0, 221, 0, 0, 124, 0, 125, 126,
	0, 0, 222, 0, 127, 0, 0, 128, 0, 0,
	129, 0, 130, 131, 132, 133, 134, 0, 135, 136,
	139, 137, 0, 138, 0, 223, 140, 224, 141, 142,
	0, 0, 0, 0, 0, 143, 225, 0, 144, 0,
	226, 145, 146, 147, 0, 227, 148, 228, 149, 0,
	150, 151, 152, 229, 153, 154, 0, 156, 157, 155,
	158, 0, 159, 0, 160, 161, 230, 162, 0, 163,
	164, 165, 56, 231, 166, 167, 0, 168, 169, 0,
	170, 232, 233, 171, 0, 172, 173, 175, 234, 174,
	235, 0, 176, 58, 177, 178, 0, 236, 237, 238,
	0, 0, 179, 239, 240, 0, 180, 181, 182, 183,
	0, 0, 184, 185, 186, 0, 0, 187, 188, 189,
	359, 242, 0, 190, 0, 83, 0, 54, 191, 192,
	193, 194, 0, 55, 0, 0, 0, 0, 0, 0,
	86, 87, 0, 88, 0, 0, 0, 0, 195, 0,
	1256, 0, 53, 89, 90, 196, 197, 198, 199, 91,
	200, 201, 0, 92, 202, 203, 93, 0, 0, 204,
	205, 206, 0, 207, 0, 0, 0, 94, 95, 96,
	0, 97, 0, 98, 99, 0, 0, 100, 101, 0,
	0, 0, 0, 0, 0, 102, 103, 104, 105, 208,
	106, 209, 210, 0, 107, 0, 108, 0, 0, 0,
	109, 110, 0, 111, 0, 0, 0, 211, 112, 113,
	212, 0, 0, 0, 114, 115, 213, 0, 116, 0,
	117, 0, 0, 0, 0, 118, 214, 0, 215, 0,
	119, 120, 216, 217, 0, 0, 123, 0, 121, 0,
	0, 122, 218, 219, 220, 0, 221, 0, 0, 124,
	0, 125, 126, 0, 0, 222, 0, 127, 0, 0,
	128, 0, 0, 129, 0, 130, 131, 132, 133, 134,
	0, 135, 136, 139, 137, 0, 138, 0, 223, 140,
	224, 141, 142, 0, 0, 0, 0, 0, 143, 225,
	0, 144, 0, 226, 145, 146, 147, 0, 227, 148,
	228, 149, 0, 150, 151, 152, 229, 153, 154, 0,
	156, 157, 155, 158, 0, 159, 0, 160, 161, 230,
	162, 0, 163, 164, 165, 0, 231, 166, 167, 0,
	168, 169, 0, 170, 232, 233, 171, 0, 172, 173,
	175, 234, 174, 235, 0, 176, 0, 177, 178, 0,
	236, 237, 238, 0, 0, 179, 239, 240, 0, 180,
	181, 182, 183, 0, 0, 184, 185, 186, 0, 0,
	187, 188, 189, 241, 242, 0, 190, 0, 0, 83,
	0, 191, 192, 193, 194, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 87, 0, 88, 0, 0,
	0, 0, 195, 0, 0, 0, 443, 89, 90, 196,
	197, 198, 199, 91, 200, 201, 0, 92, 202, 203,
	93, 0, 0, 204, 205, 206, 0, 207, 0, 0,
	0, 94, 95, 96, 0, 97, 0, 98, 99, 0,
	0, 100, 101, 0, 0, 0, 0, 0, 0, 102,
	103, 104, 105, 208, 106, 209, 210, 0, 107, 0,
	108, 0, 0, 0, 109, 110, 0, 111, 0, 0,
	0, 211, 112, 113, 212, 0, 0, 0, 114, 115,
	213, 0, 116, 0, 117, 0, 0, 0, 0, 118,
	214, 0, 215, 0, 119, 120, 216, 217, 0, 0,
	123, 0, 121, 0, 0, 122, 218, 219, 220, 0,
	221, 0, 0, 124, 0, 125, 126, 0, 0, 222,
	0, 127, 0, 0, 128, 0, 0, 129, 0, 130,
	131, 132, 133, 134, 0, 135, 136, 139, 137, 0,
	138, 0, 223, 140, 224, 141, 142, 0, 0, 328,
	0, 0, 143, 225, 0, 144, 0, 226, 145, 146,
	147, 0, 227, 148, 228, 149, 0, 150, 151, 152,
	229, 153, 154, 0, 156, 157, 155, 158, 0, 159,
	0, 160, 161, 230, 162, 0, 163, 164, 165, 0,
	231, 166, 167, 0, 168, 169, 0, 170, 232, 233,
	171, 0, 172, 173, 175, 234, 174, 235, 0, 176,
	0, 177, 178, 0, 236, 237, 238, 0, 0, 179,
	239, 240, 0, 180, 181, 182, 183, 0, 0, 184,
	185, 186, 0, 0, 187, 188, 189, 241, 242, 0,
	190, 0, 83, 0, 0, 191, 192, 193, 194, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 87, 0,
	88, 0, 0, 0, 0, 195, 0, 0, 0, 1036,
	89, 90, 196, 197, 198, 199, 91, 200, 201, 0,
	92, 202, 203, 93, 0, 0, 204, 205, 206, 0,
	207, 0, 0, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 0, 100, 101, 0, 0, 0, 0,
	0, 0, 102, 103, 104, 105, 208, 106, 209, 210,
	0, 107, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 211, 112, 113, 212, 0, 0,
	0, 114, 115, 213, 0, 116, 0, 117, 0, 0,
	0, 0, 118, 214, 0, 215, 0, 119, 120, 216,
	217, 0, 0, 123, 0, 121, 0, 0, 122, 218,
	219, 220, 0, 221, 0, 0, 124, 0, 125, 126,
	0, 0, 222, 0, 127, 0, 0, 128, 0, 0,
	129, 0, 130, 131, 132, 133, 134, 0, 135, 136,
	139, 137, 0, 138, 0, 223, 140, 224, 141, 142,
	0, 0, 0, 0, 0, 143, 225, 0, 144, 0,
	226, 145, 146, 147, 0, 227, 148, 228, 149, 0,
	150, 151, 152, 229, 153, 154, 0, 156, 157, 155,
	158, 0, 159, 0, 160, 161, 230, 162, 0, 163,
	164, 165, 0, 231, 166, 167, 0, 168, 169, 0,
	170, 232, 233, 171, 0, 172, 173, 175, 234, 174,
	235, 0, 176, 0, 177, 178, 0, 236, 237, 238,
	0, 0, 179, 239, 240, 0, 180, 181, 182, 183,
	0, 0, 184, 185, 186, 0, 0, 187, 188, 189,
	241, 242, 0, 190, 0, 83, 0, 0, 191, 192,
	193, 194, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 87, 0, 88, 0, 0, 0, 0, 195, 0,
	0, 0, 947, 89, 90, 196, 197, 198, 199, 91,
	200, 201, 0, 92, 202, 203, 93, 0, 0, 204,
	205, 206, 0, 207, 0, 0, 0, 94, 95, 96,
	0, 97, 0, 98, 99, 0, 0, 100, 101, 0,
	0, 0, 0, 0, 0, 102, 103, 104, 105, 208,
	106, 209, 210, 0, 107, 0, 108, 0, 0, 0,
	109, 110, 0, 111, 0, 0, 0, 211, 112, 113,
	212, 0, 0, 0, 114, 115, 213, 0, 116, 0,
	117, 0, 0, 0, 0, 118, 214, 0, 215, 0,
	119, 120, 216, 217, 0, 0, 123, 0, 121, 0,
	0, 122, 218, 219, 220, 0, 221, 0, 0, 124,
	0, 125, 126, 0, 0, 222, 0, 127, 0, 0,
	128, 0, 0, 129, 0, 130, 131, 132, 133, 134,
	0, 135, 136, 139, 137, 0, 138, 0, 223, 140,
	224, 141, 142, 0, 0, 0, 0, 0, 143, 225,
	0, 144, 0, 226, 145, 146, 147, 0, 227, 148,
	228, 149, 0, 150, 151, 152, 229, 153, 154, 0,
	156, 157, 155, 158, 0, 159, 0, 160, 161, 230,
	162, 0, 163, 164, 165, 0, 231, 166, 167, 0,
	168, 169, 0, 170, 232, 233, 171, 0, 172, 173,
	175, 234, 174, 235, 0, 176, 0, 177, 178, 0,
	236, 237, 238, 0, 0, 179, 239, 240, 0, 180,
	181, 182, 183, 0, 0, 184, 185, 186, 0, 0,
	187, 188, 189, 241, 242, 0, 190, 0, 83, 0,
	0, 191, 192, 193, 194, 0, 0, 0, 0, 0,
	0, 0, 0, 86, 87, 0, 88, 0, 0, 0,
	0, 195, 0, 0, 0, 1469, 89, 90, 196, 197,
	198, 199, 91, 200, 201, 0, 92, 202, 203, 93,
	0, 0, 204, 205, 206, 0, 207, 0, 0, 0,
	94, 95, 96, 0, 97, 0, 98, 99, 0, 0,
	100, 101, 0, 0, 0, 0, 0, 0, 102, 103,
	104, 105, 208, 106, 209, 210, 0, 107, 0, 108,
	0, 0, 0, 109, 110, 0, 111, 0, 0, 0,
	211, 112, 113, 212, 0, 0, 0, 114, 115, 213,
	0, 116, 0, 117, 0, 0, 0, 0, 118, 214,
	0, 215, 0, 119, 120, 216, 217, 0, 0, 123,
	0, 121, 0, 0, 122, 218, 219, 220, 0, 221,
	0, 0, 124, 0, 125, 126, 0, 0, 222, 0,
	127, 0, 0, 128, 0, 0, 129, 0, 130, 131,
	132, 133, 134, 0, 135, 136, 139, 137, 0, 138,
	0, 223, 140, 224, 141, 142, 0, 0, 0, 0,
	0, 143, 225, 0, 144, 0, 226, 145, 146, 147,
	0, 227, 148, 228, 149, 0, 150, 151, 152, 229,
	153, 154, 0, 156, 157, 155, 158, 0, 159, 0,
	160, 161, 230, 162, 0, 163, 164, 165, 0, 231,
	166, 167, 0, 168, 169, 0, 170, 232, 233, 171,
	0, 172, 173, 175, 234, 174, 235, 0, 176, 0,
	177, 178, 0, 236, 237, 238, 0, 0, 179, 239,
	240, 0, 180, 181, 182, 183, 0, 0, 184, 185,
	186, 0, 0, 187, 188, 189, 241, 242, 0, 190,
	0, 83, 0, 0, 191, 192, 193, 194, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 87, 0, 88,
	0, 0, 0, 0, 195, 0, 0, 0, 545, 89,
	90, 196, 197, 198, 199, 91, 200, 201, 0, 92,
	202, 203, 93, 0, 0, 204, 205, 206, 0, 207,
	0, 0, 0, 94, 95, 96, 0, 97, 0, 98,
	99, 0, 0, 100, 101, 0, 0, 0, 0, 0,
	0, 102, 103, 635, 105, 208, 106, 209, 210, 0,
	107, 0, 108, 0, 0, 0, 109, 110, 0, 111,
	0, 0, 0, 211, 112, 113, 212, 0, 0, 0,
	114, 115, 213, 0, 116, 0, 117, 0, 0, 0,
	0, 118, 214, 0, 215, 0, 119, 120, 216, 217,
	0, 0, 123, 0, 121, 0, 0, 122, 218, 219,
	220, 0, 221, 0, 0, 124, 0, 125, 126, 0,
	0, 222, 0, 127, 0, 0, 128, 0, 0, 129,
	0, 130, 131, 132, 133, 134, 0, 135, 136, 139,
	137, 0, 138, 0, 223, 140, 224, 141, 142, 0,
	0, 0, 0, 0, 143, 225, 0, 144, 0, 226,
	145, 146, 147, 0, 227, 148, 228, 149, 0, 150,
	151, 152, 229, 153, 154, 0, 156, 157, 155, 158,
	0, 159, 0, 160, 161, 230, 162, 0, 163, 164,
	165, 0, 231, 166, 167, 0, 168, 169, 0, 170,
	232, 233, 171, 0, 172, 173, 175, 234, 174, 235,
	0, 176, 634, 177, 178, 0, 236, 237, 238, 0,
	0, 179, 239, 240, 0, 180, 181, 182, 183, 0,
	0, 184, 185, 186, 0, 0, 187, 188, 189, 241,
	242, 0, 190, 83, 0, 0, 0, 191, 192, 193,
	194, 0, 0, 0, 0, 0, 0, 0, 86, 87,
	0, 88, 0, 0, 638, 0, 195, 0, 0, 0,
	0, 89, 90, 196, 197, 198, 199, 91, 200, 201,
	0, 92, 202, 203, 93, 0, 0, 204, 205, 206,
	0, 207, 0, 0, 0, 94, 95, 96, 0, 97,
	0, 98, 99, 0, 0, 100, 101, 0, 0, 0,
	0, 0, 0, 102, 103, 104, 105, 208, 106, 209,
	210, 0, 107, 0, 108, 0, 0, 0, 109, 110,
	0, 111, 0, 0, 0, 211, 112, 113, 212, 0,
	0, 0, 114, 115, 213, 0, 116, 0, 117, 0,
	0, 0, 0, 118, 214, 0, 215, 0, 119, 120,
	216, 217, 0, 0, 123, 0, 121, 0, 0, 122,
	218, 219, 220, 0, 221, 0, 0, 124, 0, 125,
	126, 0, 0, 222, 0, 127, 0, 0, 128, 0,
	0, 129, 0, 130, 131, 132, 133, 134, 0, 135,
	136, 139, 137, 0, 138, 0, 223, 140, 224, 141,
	142, 0, 0, 0, 0, 0, 143, 225, 0, 144,
	0, 226, 145, 146, 147, 0, 227, 148, 228, 149,
	0, 150, 151, 152, 229, 153, 154, 0, 156, 157,
	155, 158, 0, 159, 0, 160, 161, 230, 162, 0,
	163, 164, 165, 0, 231, 166, 167, 0, 168, 169,
	0, 170, 232, 233, 171, 0, 172, 173, 175, 234,
	174, 235, 0, 176, 0, 177, 178, 0, 236, 237,
	238, 0, 0, 179, 239, 240, 0, 180, 181, 182,
	183, 0, 0, 184, 185, 186, 0, 0, 187, 188,
	189, 241, 242, 0, 190, 355, 0, 0, 0, 191,
	192, 193, 194, 0, 0, 0, 0, 0, 0, 0,
	86, 87, 0, 88, 0, 0, 638, 0, 195, 0,
	0, 0, 0, 89, 90, 196, 197, 198, 199, 91,
	200, 201, 0, 92, 202, 203, 93, 0, 0, 204,
	205, 206, 0, 207, 0, 360, 0, 94, 95, 96,
	0, 97, 0, 98, 99, 0, 361, 100, 101, 0,
	0, 0, 0, 0, 0, 102, 103, 104, 105, 208,
	106, 209, 210, 0, 107, 0, 108, 0, 0, 0,
	109, 110, 0, 111, 0, 0, 0, 211, 112, 113,
	212, 0, 0, 0, 114, 115, 213, 0, 116, 0,
	117, 0, 0, 362, 0, 118, 214, 0, 215, 0,
	119, 120, 216, 217, 364, 0, 123, 0, 121, 0,
	363, 122, 218, 219, 220, 0, 221, 0, 365, 124,
	366, 125, 126, 0, 0, 222, 367, 127, 368, 0,
	128, 0, 0, 129, 0, 130, 131, 132, 133, 134,
	369, 135, 136, 139, 137, 0, 138, 0, 223, 140,
	224, 141, 142, 0, 0, 0, 0, 0, 143, 225,
	370, 144, 371, 226, 145, 146, 147, 0, 227, 148,
	228, 149, 0, 150, 151, 152, 229, 153, 154, 0,
	156, 157, 155, 158, 0, 159, 372, 160, 161, 230,
	162, 0, 163, 164, 165, 0, 231, 166, 167, 0,
	168, 169, 373, 170, 232, 233, 171, 0, 172, 173,
	175, 234, 174, 235, 0, 176, 0, 177, 178, 0,
	236, 237, 238, 0, 0, 179, 239, 240, 0, 180,
	181, 182, 183, 0, 0, 184, 185, 186, 0, 0,
	187, 188, 189, 241, 242, 83, 190, 0, 0, 0,
	0, 191, 192, 193, 194, 0, 0, 0, 0, 0,
	86, 87, 0, 88, 0, 0, 0, 0, 195, 0,
	0, 0, 0, 89, 90, 196, 197, 198, 199, 91,
	200, 201, 0, 92, 202, 203, 93, 0, 0, 204,
	205, 206, 920, 207, 0, 0, 0, 94, 95, 96,
	0, 97, 918, 98, 99, 0, 0, 100, 101, 0,
	0, 0, 0, 0, 0, 102, 103, 104, 105, 208,
	106, 209, 210, 0, 107, 0, 108, 0, 0, 0,
	109, 110, 0, 111, 0, 0, 0, 211, 112, 113,
	212, 0, 1013, 0, 114, 115, 213, 0, 116, 0,
	117, 923, 0, 0, 0, 118, 214, 0, 215, 0,
	119, 120, 216, 217, 0, 0, 123, 1011, 121, 0,
	0, 122, 218, 219, 220, 0, 221, 0, 0, 124,
	0, 125, 126, 0, 0, 222, 0, 127, 0, 0,
	128, 0, 0, 129, 0, 130, 131, 132, 133, 134,
	0, 135, 136, 139, 137, 0, 138, 0, 223, 140,
	224, 141, 142, 0, 0, 0, 0, 0, 143, 225,
	0, 144, 0, 226, 145, 146, 147, 0, 227, 148,
	228, 149, 922, 150, 151, 152, 229, 153, 154, 0,
	156, 157, 155, 158, 0, 159, 0, 160, 161, 230,
	162, 0, 163, 164, 165, 0, 231, 166, 167, 0,
	168, 169, 0, 170, 232, 233, 171, 0, 172, 173,
	175, 234, 174, 235, 0, 176, 0, 177, 178, 0,
	236, 237, 238, 0, 0, 179, 239, 240, 0, 180,
	181, 182, 183, 0, 1012, 184, 185, 186, 0, 0,
	187, 188, 189, 241, 242, 83, 190, 0, 0, 0,
	0, 191, 192, 193, 194, 0, 0, 0, 0, 0,
	86, 87, 0, 88, 0, 0, 0, 0, 195, 0,
	0, 0, 0, 89, 90, 196, 197, 198, 199, 91,
	200, 201, 0, 92, 202, 203, 93, 0, 0, 204,
	205, 206, 920, 207, 0, 0, 915, 94, 95, 96,
	0, 97, 918, 98, 99, 0, 0, 100, 101, 0,
	0, 0, 0, 0, 0, 102, 103, 104, 105, 208,
	106, 209, 210, 0, 107, 0, 108, 0, 0, 0,
	109, 110, 0, 111, 0, 0, 0, 211, 112, 113,
	212, 0, 0, 0, 114, 115, 213, 0, 116, 0,
	117, 923, 0, 0, 0, 118, 214, 0, 215, 0,
	119, 120, 914, 217, 0, 0, 123, 0, 121, 0,
	0, 122, 218, 219, 220, 0, 221, 0, 0, 124,
	0, 125, 126, 0, 0, 222, 0, 127, 0, 0,
	128, 0, 0, 129, 0, 130, 131, 132, 133, 134,
	0, 135, 136, 139, 137, 0, 138, 0, 223, 140,
	224, 141, 142, 0, 0, 0, 0, 0, 143, 225,
	0, 144, 0, 226, 145, 146, 147, 0, 227, 148,
	228, 149, 922, 150, 151, 152, 229, 153, 154, 0,
	156, 157, 155, 158, 0, 159, 0, 160, 161, 230,
	162, 0, 163, 164, 165, 0, 231, 166, 167, 0,
	168, 169, 0, 170, 232, 233, 171, 0, 172, 173,
	175, 234, 174, 235, 0, 176, 0, 177, 178, 0,
	236, 237, 238, 0, 0, 179, 239, 240, 0, 180,
	181, 182, 183, 0, 921, 184, 185, 186, 0, 0,
	187, 188, 189, 241, 242, 83, 190, 0, 0, 0,
	0, 191, 192, 193, 194, 0, 0, 0, 0, 0,
	86, 87, 0, 88, 0, 0, 0, 0, 195, 0,
	1256, 0, 0, 89, 90, 196, 197, 198, 199, 91,
	200, 201, 0, 92, 202, 203, 93, 0, 0, 204,
	205, 206, 0, 207, 0, 0, 0, 94, 95, 96,
	0, 97, 0, 98, 99, 0, 0, 100, 101, 0,
	0, 0, 0, 0, 0, 102, 103, 104, 105, 208,
	106, 209, 210, 0, 107, 0, 108, 0, 0, 0,
	109, 110, 0, 111, 0, 0, 0, 211, 112, 113,
	212, 0, 0, 0, 114, 115, 213, 0, 116, 0,
	117, 0, 0, 0, 0, 118, 214, 0, 215, 0,
	119, 120, 216, 217, 0, 0, 123, 0, 121, 0,
	0, 122, 218, 219, 220, 0, 221, 0, 0, 124,
	0, 125, 126, 0, 0, 222, 0, 127, 0, 0,
	128, 0, 0, 129, 0, 130, 131, 132, 133, 134,
	0, 135, 136, 139, 137, 0, 138, 0, 223, 140,
	224, 141, 142, 0, 0, 0, 0, 0, 143, 225,
	0, 144, 0, 226, 145, 146, 147, 0, 227, 148,
	228, 149, 0, 150, 151, 152, 229, 153, 154, 0,
	156, 157, 155, 158, 0, 159, 0, 160, 161, 230,
	162, 0, 163, 164, 165, 0, 231, 166, 167, 0,
	168, 169, 0, 170, 232, 233, 171, 0, 172, 173,
	175, 234, 174, 235, 0, 176, 0, 177, 178, 0,
	236, 237, 238, 0, 0, 179, 239, 240, 0, 180,
	181, 182, 183, 0, 0, 184, 185, 186, 0, 0,
	187, 188, 189, 241, 242, 83, 190, 0, 0, 0,
	0, 191, 192, 193, 194, 0, 0, 0, 0, 0,
	86, 87, 0, 88, 0, 0, 0, 0, 195, 0,
	0, 0, 0, 89, 90, 196, 197, 198, 199, 91,
	200, 201, 0, 92, 202, 203, 93, 0, 0, 204,
	205, 206, 0, 207, 0, 0, 0, 94, 95, 96,
	0, 97, 0, 98, 99, 0, 0, 100, 101, 0,
	0, 0, 0, 0, 0, 102, 103, 104, 105, 208,
	106, 209, 210, 0, 107, 0, 108, 0, 0, 0,
	109, 110, 0, 111, 0, 0, 0, 211, 112, 113,
	212, 0, 0, 0, 114, 115, 213, 0, 116, 0,
	117, 0, 0, 0, 0, 118, 214, 0, 215, 0,
	119, 120, 216, 217, 0, 0, 123, 0, 121, 0,
	0, 122, 218, 219, 220, 0, 221, 0, 0, 124,
	0, 125, 126, 0, 0, 222, 0, 127, 0, 0,
	128, 0, 0, 129, 0, 130, 131, 132, 133, 134,
	0, 135, 136, 139, 137, 0, 138, 0, 223, 140,
	224, 141, 142, 0, 0, 328, 0, 0, 143, 225,
	0, 144, 0, 226, 145, 146, 147, 0, 227, 148,
	228, 149, 0, 150, 151, 152, 229, 153, 154, 0,
	156, 157, 155, 158, 0, 159, 0, 160, 161, 230,
	162, 0, 163, 164, 165, 0, 231, 166, 167, 0,
	168, 169, 0, 170, 232, 233, 171, 0, 172, 173,
	175, 234, 174, 235, 0, 176, 0, 177, 178, 0,
	236, 237, 238, 0, 0, 179, 239, 240, 0, 180,
	181, 182, 183, 0, 0, 184, 185, 186, 0, 0,
	187, 188, 189, 241, 242, 83, 190, 0, 0, 0,
	0, 191, 192, 193, 194, 0, 0, 0, 0, 0,
	86, 87, 0, 88, 0, 0, 0, 0, 195, 0,
	0, 0, 0, 89, 90, 196, 197, 198, 199, 91,
	200, 201, 0, 92, 202, 203, 93, 0, 0, 204,
	205, 206, 0, 207, 0, 0, 0, 94, 95, 96,
	0, 97, 0, 98, 99, 0, 0, 100, 101, 0,
	0, 0, 0, 0, 0, 102, 103, 104, 105, 208,
	106, 209, 210, 0, 107, 0, 108, 0, 0, 0,
	109, 110, 0, 111, 0, 0, 0, 211, 112, 113,
	212, 0, 0, 0, 114, 115, 213, 0, 116, 0,
	117, 0, 0, 0, 0, 118, 214, 0, 215, 0,
	119, 120, 587, 217, 0, 0, 123, 0, 121, 0,
	0, 122, 218, 219, 220, 0, 221, 0, 0, 124,
	0, 125, 126, 0, 0, 222, 0, 127, 0, 0,
	128, 0, 0, 129, 0, 130, 131, 132, 133, 134,
	0, 135, 136, 139, 137, 0, 138, 0, 223, 140,
	224, 141, 142, 0, 0, 328, 0, 0, 143, 225,
	0, 144, 0, 226, 145, 146, 147, 0, 227, 148,
	228, 149, 0, 150, 151, 152, 229, 153, 154, 0,
	156, 157, 155, 158, 0, 159, 0, 160, 161, 230,
	162, 0, 163, 164, 165, 0, 231, 166, 167, 0,
	168, 169, 0, 170, 232, 233, 171, 0, 172, 173,
	175, 234, 174, 235, 0, 176, 0, 177, 178, 0,
	236, 237, 238, 0, 0, 179, 239, 240, 0, 180,
	181, 182, 183, 0, 0, 184, 185, 186, 0, 0,
	187, 188, 189, 241, 242, 83, 190, 0, 0, 0,
	0, 191, 192, 193, 194, 0, 0, 0, 0, 0,
	86, 87, 380, 88, 0, 0, 0, 0, 195, 0,
	0, 0, 0, 89, 90, 196, 197, 198, 199, 91,
	200, 201, 0, 92, 202, 203, 93, 0, 0, 204,
	205, 206, 0, 207, 0, 0, 0, 94, 95, 96,
	0, 97, 0, 98, 99, 0, 0, 100, 101, 0,
	0, 0, 0, 0, 0, 102, 103, 104, 105, 208,
	106, 209, 210, 0, 107, 0, 108, 0, 0, 0,
	109, 110, 0, 111, 0, 0, 0, 211, 112, 113,
	212, 0, 0, 0, 114, 115, 213, 0, 116, 0,
	117, 0, 0, 0, 0, 118, 214, 0, 215, 0,
	119, 120, 216, 217, 0, 0, 123, 0, 121, 0,
	0, 122, 218, 219, 220, 0, 221, 0, 0, 124,
	0, 125, 126, 0, 0, 222, 0, 127, 0, 0,
	128, 0, 0, 129, 0, 130, 131, 132, 133, 134,
	0, 135, 136, 139, 137, 0, 138, 0, 223, 140,
	224, 141, 142, 0, 0, 0, 0, 0, 143, 225,
	0, 144, 0, 226, 145, 146, 147, 0, 227, 148,
	228, 149, 0, 150, 151, 152, 229, 153, 154, 0,
	156, 157, 155, 158, 0, 159, 0, 160, 161, 230,
	162, 0, 163, 164, 165, 0, 231, 166, 167, 0,
	168, 169, 0, 170, 232, 233, 171, 0, 172, 173,
	175, 234, 174, 235, 0, 176, 0, 177, 178, 0,
	236, 237, 238, 0, 0, 179, 239, 240, 0, 180,
	181, 182, 183, 0, 0, 184, 185, 186, 0, 0,
	187, 188, 189, 241, 242, 83, 190, 0, 0, 0,
	0, 191, 192, 193, 194, 0, 0, 0, 0, 0,
	86, 87, 0, 88, 0, 0, 0, 0, 195, 0,
	0, 0, 0, 89, 90, 196, 197, 198, 199, 91,
	200, 201, 0, 92, 202, 203, 93, 0, 0, 204,
	205, 206, 0, 207, 0, 0, 0, 94, 95, 96,
	0, 97, 0, 98, 99, 0, 0, 100, 101, 0,
	0, 0, 0, 0, 0, 102, 103, 104, 105, 208,
	106, 209, 210, 0, 107, 0, 108, 0, 0, 0,
	109, 110, 0, 111, 0, 0, 0, 211, 112, 113,
	212, 0, 0, 0, 114, 115, 213, 0, 116, 0,
	117, 0, 0, 0, 0, 118, 214, 0, 215, 0,
	119, 120, 334, 217, 0, 0, 123, 0, 121, 0,
	0, 122, 218, 219, 220, 0, 221, 0, 0, 124,
	0, 125, 126, 0, 0, 222, 0, 127, 0, 0,
	128, 0, 0, 129, 0, 130, 131, 132, 133, 134,
	0, 135, 136, 139, 137, 0, 138, 0, 223, 140,
	224, 141, 142, 0, 0, 328, 0, 0, 143, 225,
	0, 144, 0, 226, 145, 146, 147, 0, 227, 148,
	228, 149, 0, 150, 151, 152, 229, 153, 154, 0,
	156, 157, 155, 158, 0, 159, 0, 160, 161, 230,
	162, 0, 163, 164, 165, 0, 231, 166, 167, 0,
	168, 169, 0, 170, 232, 233, 171, 0, 172, 173,
	175, 234, 174, 235, 0, 176, 0, 177, 178, 0,
	236, 237, 238, 0, 0, 179, 239, 240, 0, 180,
	181, 182, 183, 0, 0, 184, 185, 186, 0, 0,
	187, 188, 189, 241, 242, 83, 190, 0, 0, 0,
	0, 191, 192, 193, 194, 0, 0, 0, 0, 0,
	86, 87, 246, 88, 0, 0, 0, 0, 195, 0,
	0, 0, 0, 89, 90, 196, 197, 198, 199, 91,
	200, 201, 0, 92, 202, 203, 93, 0, 0, 204,
	205, 206, 0, 207, 0, 0, 0, 94, 95, 96,
	0, 97, 0, 98, 99, 0, 0, 100, 101, 0,
	0, 0, 0, 0, 0, 102, 103, 104, 105, 208,
	106, 209, 210, 0, 107, 0, 108, 0, 0, 0,
	109, 110, 0, 111, 0, 0, 0, 211, 112, 113,
	212, 0, 0, 0, 114, 115, 213, 0, 116, 0,
	117, 0, 0, 0, 0, 118, 214, 0, 215, 0,
	119, 120, 216, 217, 0, 0, 123, 0, 121, 0,
	0, 122, 218, 219, 220, 0, 221, 0, 0, 124,
	0, 125, 126, 0, 0, 222, 0, 127, 0, 0,
	128, 0, 0, 129, 0, 130, 131, 132, 133, 134,
	0, 135, 136, 139, 137, 0, 138, 0, 223, 140,
	224, 141, 142, 0, 0, 0, 0, 0, 143, 225,
	0, 144, 0, 226, 145, 146, 147, 0, 227, 148,
	228, 245, 0, 150, 151, 152, 229, 153, 154, 0,
	156, 157, 155, 158, 0, 159, 0, 160, 161, 230,
	162, 0, 163, 164, 165, 0, 231, 166, 167, 0,
	168, 169, 0, 170, 232, 233, 171, 0, 172, 173,
	175, 234, 174, 235, 0, 176, 0, 177, 178, 0,
	236, 237, 238, 0, 0, 179, 239, 240, 0, 180,
	181, 182, 183, 0, 0, 184, 185, 186, 0, 0,
	187, 188, 189, 241, 242, 83, 190, 0, 0, 0,
	0, 191, 192, 193, 194, 0, 0, 0, 0, 0,
	86, 87, 0, 88, 0, 0, 0, 0, 195, 0,
	0, 0, 0, 89, 90, 196, 197, 198, 199, 91,
	200, 201, 0, 92, 202, 203, 93, 0, 0, 204,
	205, 206, 0, 207, 0, 0, 0, 94, 95, 96,
	0, 97, 0, 98, 99, 0, 0, 100, 101, 0,
	0, 0, 0, 0, 0, 102, 103, 104, 105, 208,
	106, 209, 210, 0, 107, 0, 108, 0, 0, 0,
	109, 110, 0, 111, 0, 0, 0, 211, 112, 113,
	212, 0, 0, 0, 114, 115, 213, 0, 116, 0,
	117, 0, 0, 0, 0, 118, 214, 0, 215, 0,
	119, 120, 216, 217, 0, 0, 123, 0, 121, 0,
	0, 122, 218, 219, 220, 0, 221, 0, 0, 124,
	0, 125, 126, 0, 0, 222, 0, 127, 0, 0,
	128, 0, 0, 129, 0, 130, 131, 132, 133, 134,
	0, 135, 136, 139, 137, 0, 138, 0, 223, 140,
	224, 141, 142, 0, 0, 0, 0, 0, 143, 225,
	0, 144, 0, 226, 145, 146, 147, 0, 227, 148,
	228, 149, 0, 150, 151, 152, 229, 153, 154, 0,
	156, 157, 155, 158, 0, 159, 0, 160, 161, 230,
	162, 0, 163, 164, 165, 0, 231, 166, 167, 0,
	168, 169, 0, 170, 232, 233, 171, 0, 172, 173,
	175, 234, 174, 235, 0, 176, 0, 177, 178, 0,
	236, 237, 238, 0, 0, 179, 239, 240, 0, 180,
	181, 182, 183, 0, 0, 184, 185, 186, 0, 0,
	187, 188, 189, 241, 242, 83, 190, 0, 0, 0,
	0, 191, 192, 193, 194, 0, 0, 0, 0, 0,
	86, 87, 0, 88, 0, 0, 0, 0, 195, 0,
	0, 0, 0, 89, 90, 196, 197, 198, 199, 91,
	200, 201, 0, 92, 202, 203, 93, 0, 0, 204,
	205, 206, 0, 207, 0, 0, 0, 94, 95, 96,
	0, 97, 0, 98, 99, 0, 0, 100, 101, 0,
	0, 0, 0, 0, 0, 102, 103, 104, 105, 208,
	106, 209, 210, 0, 107, 0, 108, 0, 0, 0,
	109, 110, 0, 111, 0, 0, 0, 211, 112, 113,
	212, 0, 0, 0, 114, 115, 213, 0, 116, 0,
	117, 0, 0, 0, 0, 118, 214, 0, 215, 0,
	119, 120, 1181, 217, 0, 0, 123, 0, 121, 0,
	0, 122, 218, 219, 220, 0, 221, 0, 0, 124,
	0, 125, 126, 0, 0, 222, 0, 127, 0, 0,
	128, 0, 0, 129, 0, 130, 131, 132, 133, 134,
	0, 135, 136, 139, 137, 0, 138, 0, 223, 140,
	224, 141, 142, 0, 0, 0, 0, 0, 143, 225,
	0, 144, 0, 226, 145, 146, 147, 0, 227, 148,
	228, 149, 0, 150, 151, 152, 229, 153, 154, 0,
	156, 157, 155, 158, 0, 159, 0, 160, 161, 230,
	162, 0, 163, 164, 165, 0, 231, 166, 167, 0,
	168, 169, 0, 170, 232, 233, 171, 0, 172, 173,
	175, 234, 174, 235, 0, 176, 0, 177, 178, 0,
	236, 237, 238, 0, 0, 179, 239, 240, 0, 180,
	181, 182, 183, 0, 0, 184, 185, 186, 0, 0,
	187, 188, 189, 241, 242, 83, 190, 0, 0, 0,
	0, 191, 192, 193, 194, 0, 0, 0, 0, 0,
	86, 87, 0, 88, 0, 0, 0, 0, 195, 0,
	0, 0, 0, 89, 90, 196, 197, 198, 199, 91,
	200, 201, 0, 92, 202, 203, 93, 0, 0, 204,
	205, 206, 0, 207, 0, 0, 0, 94, 95, 96,
	0, 97, 0, 98, 99, 0, 0, 100, 101, 0,
	0, 0, 0, 0, 0, 102, 103, 104, 105, 208,
	106, 209, 210, 0, 107, 0, 108, 0, 0, 0,
	109, 110, 0, 111, 0, 0, 0, 211, 112, 113,
	212, 0, 0, 0, 114, 115, 213, 0, 116, 0,
	117, 0, 0, 0, 0, 118, 214, 0, 215, 0,
	119, 120, 1179, 217, 0, 0, 123, 0, 121, 0,
	0, 122, 218, 219, 220, 0, 221, 0, 0, 124,
	0, 125, 126, 0, 0, 222, 0, 127, 0, 0,
	128, 0, 0, 129, 0, 130, 131, 132, 133, 134,
	0, 135, 136, 139, 137, 0, 138, 0, 223, 140,
	224, 141, 142, 0, 0, 0, 0, 0, 143, 225,
	0, 144, 0, 226, 145, 146, 147, 0, 227, 148,
	228, 149, 0, 150, 151, 152, 229, 153, 154, 0,
	156, 157, 155, 158, 0, 159, 0, 160, 161, 230,
	162, 0, 163, 164, 165, 0, 231, 166, 167, 0,
	168, 169, 0, 170, 232, 233, 171, 0, 172, 173,
	175, 234, 174, 235, 0, 176, 0, 177, 178, 0,
	236, 237, 238, 0, 0, 179, 239, 240, 0, 180,
	181, 182, 183, 0, 0, 184, 185, 186, 0, 0,
	187, 188, 189, 241, 242, 83, 190, 0, 0, 0,
	0, 191, 192, 193, 194, 0, 0, 0, 0, 0,
	86, 87, 0, 88, 0, 0, 0, 0, 195, 0,
	0, 0, 0, 89, 90, 196, 197, 198, 199, 91,
	200, 201, 0, 92, 202, 203, 93, 0, 0, 204,
	205, 206, 0, 207, 0, 0, 0, 94, 95, 96,
	0, 97, 0, 98, 99, 0, 0, 100, 101, 0,
	0, 0, 0, 0, 0, 102, 103, 104, 105, 208,
	106, 209, 210, 0, 107, 0, 108, 0, 0, 0,
	109, 110, 0, 111, 0, 0, 0, 211, 112, 113,
	212, 0, 0, 0, 114, 115, 213, 0, 116, 0,
	117, 0, 0, 0, 0, 118, 214, 0, 215, 0,
	119, 120, 1170, 217, 0, 0, 123, 0, 121, 0,
	0, 122, 218, 219, 220, 0, 221, 0, 0, 124,
	0, 125, 126, 0, 0, 222, 0, 127, 0, 0,
	128, 0, 0, 129, 0, 130, 131, 132, 133, 134,
	0, 135, 136, 139, 137, 0, 138, 0, 223, 140,
	224, 141, 142, 0, 0, 0, 0, 0, 143, 225,
	0, 144, 0, 226, 145, 146, 147, 0, 227, 148,
	228, 149, 0, 150, 151, 152, 229, 153, 154, 0,
	156, 157, 155, 158, 0, 159, 0, 160, 161, 230,
	162, 0, 163, 164, 165, 0, 231, 166, 167, 0,
	168, 169, 0, 170, 232, 233, 171, 0, 172, 173,
	175, 234, 174, 235, 0, 176, 0, 177, 178, 0,
	236, 237, 238, 0, 0, 179, 239, 240, 0, 180,
	181, 182, 183, 0, 0, 184, 185, 186, 0, 0,
	187, 188, 189, 241, 242, 83, 190, 0, 0, 0,
	0, 191, 192, 193, 194, 0, 0, 0, 0, 0,
	86, 87, 0, 88, 0, 0, 0, 0, 195, 0,
	0, 0, 0, 89, 90, 196, 197, 198, 199, 91,
	200, 201, 0, 92, 202, 203, 93, 0, 0, 204,
	205, 206, 0, 207, 0, 0, 0, 94, 95, 96,
	0, 97, 0, 98, 99, 0, 0, 100, 101, 0,
	0, 0, 0, 0, 0, 102, 103, 104, 105, 208,
	106, 209, 210, 0, 107, 0, 108, 0, 0, 0,
	109, 110, 0, 111, 0, 0, 0, 211, 112, 113,
	212, 0, 0, 0, 114, 115, 213, 0, 116, 0,
	117, 0, 0, 0, 0, 118, 214, 0, 215, 0,
	119, 120, 783, 217, 0, 0, 123, 0, 121, 0,
	0, 122, 218, 219, 220, 0, 221, 0, 0, 124,
	0, 125, 126, 0, 0, 222, 0, 127, 0, 0,
	128, 0, 0, 129, 0, 130, 131, 132, 133, 134,
	0, 135, 136, 139, 137, 0, 138, 0, 223, 140,
	224, 141, 142, 0, 0, 0, 0, 0, 143, 225,
	0, 144, 0, 226, 145, 146, 147, 0, 227, 148,
	228, 149, 0, 150, 151, 152, 229, 153, 154, 0,
	156, 157, 155, 158, 0, 159, 0, 160, 161, 230,
	162, 0, 163, 164, 165, 0, 231, 166, 167, 0,
	168, 169, 0, 170, 232, 233, 171, 0, 172, 173,
	175, 234, 174, 235, 0, 176, 0, 177, 178, 0,
	236, 237, 238, 0, 0, 179, 239, 240, 0, 180,
	181, 182, 183, 0, 0, 184, 185, 186, 0, 0,
	187, 188, 189, 241, 242, 83, 190, 0, 0, 0,
	0, 191, 192, 193, 194, 0, 0, 0, 0, 0,
	86, 87, 0, 88, 0, 0, 0, 0, 195, 0,
	0, 0, 0, 89, 90, 196, 197, 198, 199, 91,
	200, 201, 0, 92, 202, 203, 93, 0, 0, 204,
	205, 206, 0, 207, 0, 0, 0, 94, 95, 96,
	0, 97, 0, 98, 99, 0, 0, 100, 101, 0,
	0, 0, 0, 0, 0, 102, 103, 104, 105, 208,
	106, 209, 210, 0, 107, 0, 108, 0, 0, 0,
	109, 110, 0, 111, 0, 0, 0, 211, 112, 113,
	212, 0, 0, 0, 114, 115, 213, 0, 116, 0,
	117, 0, 0, 0, 0, 118, 214, 0, 215, 0,
	119, 120, 216, 217, 0, 0, 123, 0, 121, 0,
	0, 122, 218, 219, 220, 0, 221, 0, 0, 124,
	0, 125, 126, 0, 0, 222, 0, 127, 0, 0,
	128, 0, 0, 129, 0, 130, 131, 132, 133, 134,
	0, 135, 136, 139, 137, 0, 138, 0, 223, 140,
	224, 141, 142, 0, 0, 0, 0, 0, 143, 225,
	0, 144, 0, 226, 145, 146, 147, 0, 227, 148,
	228, 149, 0, 150, 151, 152, 229, 153, 154, 0,
	156, 157, 155, 158, 0, 159, 0, 160, 161, 230,
	162, 0, 260, 164, 165, 0, 231, 166, 167, 0,
	168, 169, 0, 170, 232, 233, 171, 0, 172, 173,
	175, 234, 174, 235, 0, 176, 0, 177, 178, 0,
	236, 237, 238, 0, 0, 179, 239, 240, 0, 180,
	181, 182, 183, 0, 0, 184, 185, 186, 0, 0,
	187, 188, 189, 241, 242, 83, 190, 0, 0, 0,
	0, 191, 192, 193, 194, 0, 0, 0, 0, 0,
	86, 87, 0, 88, 0, 0, 0, 0, 195, 0,
	574, 0, 0, 89, 90, 196, 197, 198, 199, 91,
	200, 201, 0, 92, 202, 203, 93, 0, 0, 204,
	205, 206, 0, 207, 0, 0, 0, 94, 95, 96,
	0, 97, 0, 98, 99, 0, 0, 100, 101, 0,
	0, 0, 0, 0, 0, 102, 103, 104, 105, 208,
	106, 209, 210, 0, 107, 0, 108, 0, 0, 0,
	109, 110, 0, 111, 0, 0, 0, 211, 112, 113,
	212, 0, 0, 0, 114, 115, 213, 0, 116, 0,
	117, 0, 0, 0, 0, 118, 214, 0, 215, 0,
	119, 120, 216, 217, 0, 0, 123, 0, 121, 0,
	0, 122, 218, 219, 220, 0, 221, 0, 0, 124,
	0, 125, 126, 0, 0, 222, 0, 127, 0, 0,
	128, 0, 0, 129, 0, 130, 131, 132, 133, 134,
	0, 135, 136, 139, 137, 0, 138, 0, 223, 140,
	224, 141, 142, 0, 0, 0, 0, 0, 143, 225,
	0, 144, 0, 226, 145, 146, 147, 0, 227, 148,
	228, 149, 0, 150, 151, 152, 229, 153, 154, 0,
	156, 157, 155, 158, 0, 159, 0, 160, 161, 230,
	162, 0, 163, 164, 165, 0, 231, 166, 167, 0,
	0, 169, 0, 170, 232, 233, 171, 0, 172, 173,
	175, 234, 174, 235, 0, 176, 0, 177, 178, 0,
	236, 237, 238, 0, 0, 179, 239, 240, 0, 180,
	181, 182, 183, 0, 0, 184, 185, 186, 0, 0,
	187, 188, 189, 241, 242, 83, 190, 0, 0, 0,
	0, 191, 192, 193, 194, 0, 0, 0, 0, 0,
	86, 87, 0, 88, 0, 0, 0, 0, 195, 0,
	0, 0, 0, 89, 90, 196, 197, 198, 199, 91,
	200, 201, 0, 92, 202, 203, 93, 0, 0, 204,
	205, 206, 0, 207, 0, 0, 0, 94, 95, 96,
	0, 97, 0, 98, 99, 0, 0, 100, 101, 0,
	0, 0, 0, 0, 0, 102, 103, 104, 105, 208,
	106, 209, 210, 0, 107, 0, 108, 0, 0, 0,
	109, 110, 0, 111, 0, 0, 0, 211, 112, 113,
	212, 0, 0, 0, 114, 115, 213, 0, 116, 0,
	117, 0, 0, 0, 0, 118, 214, 0, 215, 0,
	119, 120, 428, 217, 0, 0, 123, 0, 121, 0,
	0, 122, 218, 219, 220, 0, 221, 0, 0, 124,
	0, 125, 126, 0, 0, 222, 0, 127, 0, 0,
	128, 0, 0, 129, 0, 130, 131, 132, 133, 134,
	0, 135, 136, 139, 137, 0, 138, 0, 223, 140,
	224, 141, 142, 0, 0, 0, 0, 0, 143, 225,
	0, 144, 0, 226, 145, 146, 147, 0, 227, 148,
	228, 149, 0, 150, 151, 152, 229, 153, 154, 0,
	156, 157, 155, 158, 0, 159, 0, 160, 161, 230,
	162, 0, 163, 164, 165, 0, 231, 166, 167, 0,
	168, 169, 0, 170, 232, 233, 171, 0, 172, 173,
	175, 234, 174, 235, 0, 176, 0, 177, 178, 0,
	236, 237, 238, 0, 0, 179, 239, 240, 0, 180,
	181, 182, 183, 0, 0, 184, 185, 186, 0, 0,
	187, 188, 189, 241, 242, 83, 190, 0, 0, 0,
	0, 191, 192, 193, 194, 0, 0, 0, 0, 0,
	86, 87, 0, 88, 0, 0, 0, 0, 195, 0,
	0, 0, 0, 89, 90, 196, 197, 198, 199, 91,
	200, 201, 0, 92, 202, 203, 93, 0, 0, 204,
	205, 206, 0, 207, 0, 0, 0, 94, 95, 96,
	0, 97, 0, 98, 99, 0, 0, 100, 101, 0,
	0, 0, 0, 0, 0, 102, 103, 104, 105, 208,
	106, 209, 210, 0, 107, 0, 108, 0, 0, 0,
	109, 110, 0, 111, 0, 0, 0, 211, 112, 113,
	212, 0, 0, 0, 114, 115, 213, 0, 116, 0,
	117, 0, 0, 0, 0, 118, 214, 0, 215, 0,
	119, 120, 425, 217, 0, 0, 123, 0, 121, 0,
	0, 122, 218, 219, 220, 0, 221, 0, 0, 124,
	0, 125, 126, 0, 0, 222, 0, 127, 0, 0,
	128, 0, 0, 129, 0, 130, 131, 132, 133, 134,
	0, 135, 136, 139, 137, 0, 138, 0, 223, 140,
	224, 141, 142, 0, 0, 0, 0, 0, 143, 225,
	0, 144, 0, 226, 145, 146, 147, 0, 227, 148,
	228, 149, 0, 150, 151, 152, 229, 153, 154, 0,
	156, 157, 155, 158, 0, 159, 0, 160, 161, 230,
	162, 0, 163, 164, 165, 0, 231, 166, 167, 0,
	168, 169, 0, 170, 232, 233, 171, 0, 172, 173,
	175, 234, 174, 235, 0, 176, 0, 177, 178, 0,
	236, 237, 238, 0, 0, 179, 239, 240, 0, 180,
	181, 182, 183, 0, 0, 184, 185, 186, 0, 0,
	187, 188, 189, 241, 242, 83, 190, 0, 0, 0,
	0, 191, 192, 193, 194, 0, 0, 0, 0, 0,
	86, 87, 0, 88, 0, 0, 0, 0, 195, 0,
	0, 0, 0, 89, 90, 196, 197, 198, 199, 91,
	200, 201, 0, 92, 202, 203, 93, 0, 0, 204,
	205, 386, 0, 207, 0, 0, 0, 94, 95, 96,
	0, 97, 0, 98, 99, 0, 0, 100, 101, 0,
	0, 0, 0, 0, 0, 102, 103, 104, 105, 208,
	106, 209, 210, 0, 107, 0, 108, 0, 0, 0,
	109, 110, 0, 111, 0, 0, 0, 211, 112, 113,
	212, 0, 0, 0, 114, 115, 213, 0, 116, 0,
	117, 0, 0, 0, 0, 118, 214, 0, 215, 0,
	119, 120, 216, 217, 0, 0, 123, 0, 121, 0,
	0, 122, 218, 219, 220, 0, 221, 0, 0, 124,
	0, 125, 126, 0, 0, 222, 0, 127, 0, 0,
	128, 0, 0, 129, 0, 130, 131, 132, 133, 271,
	0, 135, 136, 139, 137, 0, 138, 0, 223, 140,
	224, 141, 142, 0, 0, 0, 0, 0, 143, 225,
	0, 144, 0, 226, 145, 146, 147, 0, 227, 148,
	228, 149, 0, 150, 151, 152, 229, 153, 154, 0,
	156, 157, 155, 158, 0, 159, 0, 160, 161, 230,
	162, 0, 163, 164, 165, 0, 231, 166, 167, 0,
	168, 169, 0, 170, 232, 233, 171, 0, 172, 173,
	175, 234, 174, 235, 0, 176, 0, 177, 178, 0,
	270, 237, 238, 0, 0, 266, 239, 240, 0, 180,
	181, 182, 183, 0, 0, 184, 185, 186, 0, 0,
	187, 188, 189, 241, 242, 83, 190, 0, 0, 0,
	0, 191, 192, 193, 194, 0, 0, 0, 0, 0,
	86, 87, 0, 88, 0, 0, 0, 0, 195, 0,
	0, 0, 0, 89, 90, 196, 197, 198, 199, 91,
	200, 201, 0, 92, 202, 203, 93, 0, 0, 204,
	205, 206, 0, 207, 0, 0, 0, 94, 95, 96,
	0, 97, 0, 98, 99, 0, 0, 100, 101, 0,
	0, 0, 0, 0, 0, 102, 103, 104, 105, 208,
	106, 209, 210, 0, 107, 0, 108, 0, 0, 0,
	109, 110, 0, 111, 0, 0, 0, 211, 112, 113,
	212, 0, 0, 0, 114, 115, 213, 0, 116, 0,
	117, 0, 0, 0, 0, 118, 214, 0, 215, 0,
	119, 120, 216, 217, 0, 0, 123, 0, 121, 0,
	0, 122, 218, 219, 220, 0, 221, 0, 0, 124,
	0, 125, 126, 0, 0, 222, 0, 127, 0, 0,
	128, 0, 0, 129, 0, 130, 131, 132, 133, 271,
	0, 135, 136, 139, 137, 0, 138, 0, 223, 140,
	224, 141, 142, 0, 0, 0, 0, 0, 143, 225,
	0, 144, 0, 226, 145, 146, 147, 0, 227, 148,
	228, 149, 0, 150, 151, 152, 229, 153, 154, 0,
	156, 157, 155, 158, 0, 159, 0, 160, 161, 230,
	162, 0, 163, 164, 165, 0, 231, 166, 167, 0,
	168, 169, 0, 170, 232, 233, 171, 0, 172, 173,
	175, 234, 174, 235, 0, 176, 0, 177, 178, 0,
	270, 237, 238, 0, 0, 266, 239, 240, 0, 180,
	181, 182, 183, 0, 0, 184, 185, 186, 0, 0,
	187, 188, 189, 241, 242, 83, 190, 0, 0, 0,
	0, 191, 192, 193, 194, 0, 0, 0, 0, 0,
	86, 87, 0, 88, 0, 0, 0, 0, 195, 0,
	0, 0, 0, 89, 90, 196, 197, 198, 199, 91,
	200, 201, 0, 92, 202, 203, 93, 0, 0, 204,
	205, 206, 0, 207, 0, 0, 0, 94, 95, 96,
	0, 97, 0, 98, 99, 0, 0, 100, 101, 0,
	0, 0, 0, 0, 0, 102, 103, 104, 105, 208,
	106, 209, 210, 0, 107, 0, 108, 0, 0, 0,
	109, 110, 0, 111, 0, 0, 0, 211, 112, 113,
	212, 0, 0, 0, 114, 115, 213, 0, 116, 0,
	117, 0, 0, 0, 0, 118, 214, 0, 215, 0,
	119, 120, 350, 217, 0, 0, 123, 0, 121, 0,
	0, 122, 218, 219, 220, 0, 221, 0, 0, 124,
	0, 125, 126, 0, 0, 222, 0, 127, 0, 0,
	128, 0, 0, 129, 0, 130, 131, 132, 133, 134,
	0, 135, 136, 139, 137, 0, 138, 0, 223, 140,
	224, 141, 142, 0, 0, 0, 0, 0, 143, 225,
	0, 144, 0, 226, 145, 146, 147, 0, 227, 148,
	228, 149, 0, 150, 151, 152, 229, 153, 154, 0,
	156, 157, 155, 158, 0, 159, 0, 160, 161, 230,
	162, 0, 163, 164, 165, 0, 231, 166, 167, 0,
	168, 169, 0, 170, 232, 233, 171, 0, 172, 173,
	175, 234, 174, 235, 0, 176, 0, 177, 178, 0,
	236, 237, 238, 0, 0, 179, 239, 240, 0, 180,
	181, 182, 183, 0, 0, 184, 185, 186, 0, 0,
	187, 188, 189, 241, 242, 83, 190, 0, 0, 0,
	0, 191, 192, 193, 194, 0, 0, 0, 0, 0,
	86, 87, 0, 88, 0, 0, 0, 0, 195, 0,
	0, 0, 0, 89, 90, 196, 197, 198, 199, 91,
	200, 201, 0, 92, 202, 203, 93, 0, 0, 204,
	205, 206, 0, 207, 0, 0, 0, 94, 95, 96,
	0, 97, 0, 98, 99, 0, 0, 100, 101, 0,
	0, 0, 0, 0, 0, 102, 103, 104, 105, 208,
	106, 209, 210, 0, 107, 0, 108, 0, 0, 0,
	109, 110, 0, 111, 0, 0, 0, 211, 112, 113,
	212, 0, 0, 0, 114, 115, 213, 0, 116, 0,
	117, 0, 0, 0, 0, 118, 214, 0, 215, 0,
	119, 120, 347, 217, 0, 0, 123, 0, 121, 0,
	0, 122, 218, 219, 220, 0, 221, 0, 0, 124,
	0, 125, 126, 0, 0, 222, 0, 127, 0, 0,
	128, 0, 0, 129, 0, 130, 131, 132, 133, 134,
	0, 135, 136, 139, 137, 0, 138, 0, 223, 140,
	224, 141, 142, 0, 0, 0, 0, 0, 143, 225,
	0, 144, 0, 226, 145, 146, 147, 0, 227, 148,
	228, 149, 0, 150, 151, 152, 229, 153, 154, 0,
	156, 157, 155, 158, 0, 159, 0, 160, 161, 230,
	162, 0, 163, 164, 165, 0, 231, 166, 167, 0,
	168, 169, 0, 170, 232, 233, 171, 0, 172, 173,
	175, 234, 174, 235, 0, 176, 0, 177, 178, 0,
	236, 237, 238, 0, 0, 179, 239, 240, 0, 180,
	181, 182, 183, 0, 0, 184, 185, 186, 0, 0,
	187, 188, 189, 241, 242, 83, 190, 0, 0, 0,
	0, 191, 192, 193, 194, 0, 0, 0, 0, 0,
	86, 87, 0, 88, 0, 0, 0, 0, 195, 0,
	0, 0, 0, 89, 90, 196, 197, 198, 199, 91,
	200, 201, 0, 92, 202, 203, 93, 0, 0, 204,
	205, 206, 0, 207, 0, 0, 0, 94, 95, 96,
	0, 97, 0, 98, 99, 0, 0, 100, 101, 0,
	0, 0, 0, 0, 0, 102, 103, 104, 105, 208,
	106, 209, 210, 0, 107, 0, 108, 0, 0, 0,
	109, 110, 0, 111, 0, 0, 0, 211, 112, 113,
	212, 0, 0, 0, 114, 115, 213, 0, 116, 0,
	117, 0, 0, 0, 0, 118, 214, 0, 215, 0,
	119, 120, 345, 217, 0, 0, 123, 0, 121, 0,
	0, 122, 218, 219, 220, 0, 221, 0, 0, 124,
	0, 125, 126, 0, 0, 222, 0, 127, 0, 0,
	128, 0, 0, 129, 0, 130, 131, 132, 133, 134,
	0, 135, 136, 139, 137, 0, 138, 0, 223, 140,
	224, 141, 142, 0, 0, 0, 0, 0, 143, 225,
	0, 144, 0, 226, 145, 146, 147, 0, 227, 148,
	228, 149, 0, 150, 151, 152, 229, 153, 154, 0,
	156, 157, 155, 158, 0, 159, 0, 160, 161, 230,
	162, 0, 163, 164, 165, 0, 231, 166, 167, 0,
	168, 169, 0, 170, 232, 233, 171, 0, 172, 173,
	175, 234, 174, 235, 0, 176, 0, 177, 178, 0,
	236, 237, 238, 0, 0, 179, 239, 240, 0, 180,
	181, 182, 183, 0, 0, 184, 185, 186, 0, 0,
	187, 188, 189, 241, 242, 83, 190, 0, 0, 0,
	0, 191, 192, 193, 194, 0, 0, 0, 0, 0,
	86, 87, 0, 88, 0, 0, 0, 0, 195, 0,
	0, 0, 0, 89, 90, 196, 197, 198, 199, 91,
	200, 201, 0, 92, 202, 203, 93, 0, 0, 204,
	205, 206, 0, 207, 0, 0, 0, 94, 95, 96,
	0, 97, 0, 98, 99, 0, 0, 100, 101, 0,
	0, 0, 0, 0, 0, 102, 103, 104, 105, 208,
	106, 209, 210, 0, 107, 0, 108, 0, 0, 0,
	109, 110, 0, 111, 0, 0, 0, 211, 112, 113,
	212, 0, 0, 0, 114, 115, 213, 0, 116, 0,
	117, 0, 0, 0, 0, 118, 214, 0, 215, 0,
	119, 120, 337, 217, 0, 0, 123, 0, 121, 0,
	0, 122, 218, 219, 220, 0, 221, 0, 0, 124,
	0, 125, 126, 0, 0, 222, 0, 127, 0, 0,
	128, 0, 0, 129, 0, 130, 131, 132, 133, 134,
	0, 135, 136, 139, 137, 0, 138, 0, 223, 140,
	224, 141, 142, 0, 0, 0, 0, 0, 143, 225,
	0, 144, 0, 226, 145, 146, 147, 0, 227, 148,
	228, 149, 0, 150, 151, 152, 229, 153, 154, 0,
	156, 157, 155, 158, 0, 159, 0, 160, 161, 230,
	162, 0, 163, 164, 165, 0, 231, 166, 167, 0,
	168, 169, 0, 170, 232, 233, 171, 0, 172, 173,
	175, 234, 174, 235, 0, 176, 0, 177, 178, 0,
	236, 237, 238, 0, 0, 179, 239, 240, 0, 180,
	181, 182, 183, 0, 0, 184, 185, 186, 0, 0,
	187, 188, 189, 241, 242, 83, 190, 0, 0, 0,
	0, 191, 192, 193, 194, 0, 0, 0, 0, 0,
	86, 87, 0, 88, 0, 0, 0, 0, 195, 0,
	0, 0, 0, 89, 90, 196, 197, 198, 199, 91,
	200, 201, 0, 92, 202, 203, 93, 0, 0, 204,
	205, 206, 0, 207, 0, 0, 0, 94, 95, 96,
	0, 97, 0, 98, 99, 0, 0, 100, 101, 0,
	0, 0, 0, 0, 0, 102, 103, 104, 105, 208,
	106, 209, 210, 0, 107, 0, 108, 0, 0, 0,
	109, 110, 0, 111, 0, 0, 0, 211, 112, 113,
	212, 0, 0, 0, 114, 115, 213, 0, 116, 0,
	117, 0, 0, 0, 0, 118, 214, 0, 215, 0,
	119, 120, 216, 217, 0, 0, 123, 0, 121, 0,
	0, 122, 218, 219, 220, 0, 221, 0, 0, 124,
	0, 125, 126, 0, 0, 222, 0, 127, 0, 0,
	128, 0, 0, 129, 0, 130, 131, 132, 133, 134,
	0, 135, 136, 139, 137, 0, 138, 0, 223, 140,
	224, 141, 142, 0, 0, 0, 0, 0, 143, 225,
	0, 144, 0, 226, 145, 146, 147, 0, 227, 148,
	228, 149, 0, 150, 151, 152, 229, 317, 154, 0,
	156, 157, 155, 158, 0, 159, 0, 160, 161, 230,
	162, 0, 163, 164, 165, 0, 231, 166, 167, 0,
	168, 169, 0, 170, 232, 233, 171, 0, 172, 173,
	175, 234, 174, 235, 0, 176, 0, 177, 178, 0,
	236, 237, 238, 0, 0, 179, 239, 240, 0, 180,
	181, 182, 183, 0, 0, 184, 185, 186, 0, 0,
	187, 188, 189, 241, 242, 83, 190, 0, 0, 0,
	0, 191, 192, 193, 194, 0, 0, 0, 0, 0,
	86, 87, 0, 88, 0, 0, 0, 0, 195, 0,
	0, 0, 0, 89, 90, 196, 197, 198, 199, 91,
	200, 201, 0, 92, 202, 203, 93, 0, 0, 204,
	205, 206, 0, 207, 0, 0, 0, 94, 95, 96,
	0, 97, 0, 98, 99, 0, 0, 100, 101, 0,
	0, 0, 0, 0, 0, 102, 103, 104, 105, 208,
	106, 209, 210, 0, 107, 0, 108, 0, 0, 0,
	109, 110, 0, 111, 0, 0, 0, 211, 112, 113,
	212, 0, 0, 0, 114, 115, 213, 0, 116, 0,
	117, 0, 0, 0, 0, 118, 214, 0, 215, 0,
	119, 120, 216, 217, 0, 0, 123, 0, 121, 0,
	0, 122, 218, 219, 220, 0, 221, 0, 0, 124,
	0, 125, 126, 0, 0, 222, 0, 127, 0, 0,
	263, 0, 0, 129, 0, 130, 131, 132, 133, 271,
	0, 135, 136, 139, 137, 0, 138, 0, 223, 140,
	224, 141, 142, 0, 0, 0, 0, 0, 143, 225,
	0, 144, 0, 226, 145, 146, 147, 0, 227, 148,
	228, 149, 0, 150, 151, 152, 229, 153, 154, 0,
	156, 157, 155, 158, 0, 159, 0, 160, 161, 265,
	162, 0, 163, 164, 165, 0, 231, 166, 264, 0,
	168, 169, 0, 170, 232, 233, 171, 0, 172, 173,
	175, 234, 174, 235, 0, 176, 0, 177, 178, 0,
	270, 237, 238, 0, 0, 266, 239, 240, 0, 180,
	181, 182, 183, 0, 0, 184, 185, 186, 0, 0,
	187, 188, 189, 241, 242, 83, 190, 0, 0, 0,
	0, 191, 192, 193, 194, 0, 0, 0, 0, 0,
	86, 87, 0, 88, 0, 0, 0, 0, 195, 0,
	0, 0, 0, 89, 90, 196, 197, 198, 199, 91,
	200, 201, 0, 92, 202, 203, 93, 0, 0, 204,
	205, 206, 0, 207, 0, 0, 0, 94, 95, 96,
	0, 97, 0, 98, 99, 0, 0, 100, 101, 0,
	0, 0, 0, 0, 0, 102, 103, 104, 105, 208,
	106, 209, 210, 0, 107, 0, 108, 0, 0, 0,
	109, 110, 0, 111, 0, 0, 0, 211, 112, 113,
	212, 0, 0, 0, 114, 115, 213, 0, 116, 0,
	117, 0, 0, 0, 0, 118, 214, 0, 215, 0,
	119, 120, 216, 217, 0, 0, 123, 0, 121, 0,
	0, 122, 218, 219, 220, 0, 221, 0, 0, 124,
	0, 125, 126, 0, 0, 222, 0, 127, 0, 0,
	128, 0, 0, 129, 0, 130, 131, 132, 133, 134,
	0, 135, 136, 139, 137, 0, 138, 0, 223, 140,
	224, 141, 142, 0, 0, 0, 0, 0, 143, 225,
	0, 144, 0, 226, 145, 146, 0, 0, 227, 148,
	228, 149, 0, 150, 0, 152, 229, 153, 154, 0,
	156, 157, 155, 158, 0, 159, 0, 160, 161, 230,
	0, 0, 163, 164, 165, 0, 231, 166, 167, 0,
	168, 169, 0, 170, 232, 233, 171, 0, 172, 173,
	175, 234, 174, 235, 0, 176, 0, 177, 178, 0,
	236, 237, 238, 0, 0, 179, 239, 240, 0, 180,
	181, 182, 183, 0, 0, 184, 185, 186, 0, 0,
	187, 188, 189, 241, 242, 0, 190, 0, 0, 0,
	0, 191, 192, 193, 194, 809, 0, 828, 829, 830,
	838, 839, 840, 0, 0, 0, 0, 0, 0, 0,
	831, 0, 0, 0, 0, 0, 0, 811, 0, 842,
	0, 809, 0, 828, 829, 830, 838, 839, 840, 0,
	0, 0, 0, 0, 0, 0, 831, 0, 810, 0,
	0, 0, 0, 811, 825, 842, 0, 0, 0, 0,
	0, 0, 0, 0, 809, 0, 828, 829, 830, 838,
	839, 840, 0, 0, 810, 0, 0, 0, 0, 831,
	825, 0, 0, 0, 0, 0, 811, 0, 842, 0,
	809, 0, 828, 829, 830, 838, 839, 840, 0, 0,
	0, 816, 0, 0, 0, 831, 0, 810, 0, 0,
	0, 0, 811, 825, 842, 0, 0, 0, 835, 843,
	0, 0, 0, 0, 0, 0, 0, 816, 0, 0,
	0, 0, 841, 810, 0, 0, 0, 0, 0, 825,
	0, 0, 833, 0, 835, 843, 0, 0, 826, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 841, 0,
	816, 0, 0, 0, 0, 0, 0, 0, 833, 0,
	832, 0, 0, 0, 826, 0, 0, 835, 843, 0,
	0, 0, 0, 0, 0, 0, 816, 0, 0, 0,
	0, 841, 0, 0, 0, 0, 832, 0, 0, 0,
	0, 833, 0, 835, 843, 827, 0, 826, 0, 0,
	0, 0, 0, 0, 0, 0, 836, 841, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 833, 0, 832,
	0, 827, 0, 826, 0, 0, 0, 0, 0, 0,
	0, 0, 836, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 832, 0, 0, 0, 0,
	0, 0, 0, 0, 827, 0, 0, 0, 0, 834,
	0, 0, 822, 823, 824, 836, 821, 818, 819, 820,
	812, 813, 814, 815, 817, 0, 837, 0, 0, 0,
	827, 0, 0, 1352, 0, 834, 0, 0, 822, 823,
	824, 836, 821, 818, 819, 820, 812, 813, 814, 815,
	817, 0, 837, 0, 0, 0, 0, 0, 0, 1351,
	0, 0, 0, 0, 0, 0, 0, 0, 834, 0,
	0, 822, 823, 824, 0, 821, 818, 819, 820, 812,
	813, 814, 815, 817, 0, 837, 0, 0, 0, 0,
	0, 0, 1305, 0, 834, 0, 0, 822, 823, 824,
	0, 821, 818, 819, 820, 812, 813, 814, 815, 817,
	0, 837, 0, 0, 809, 1753, 828, 829, 830, 838,
	839, 840, 0, 0, 0, 0, 0, 0, 0, 831,
	0, 0, 0, 0, 0, 0, 811, 0, 842, 0,
	809, 0, 828, 829, 830, 838, 839, 840, 0, 0,
	0, 0, 0, 0, 0, 831, 0, 810, 0, 0,
	0, 0, 811, 825, 842, 0, 0, 0, 0, 0,
	0, 0, 0, 809, 0, 828, 829, 830, 838, 839,
	840, 0, 0, 810, 0, 0, 0, 0, 831, 825,
	0, 0, 0, 0, 0, 811, 0, 842, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	816, 0, 0, 0, 0, 0, 810, 0, 0, 0,
	0, 0, 825, 0, 0, 0, 0, 835, 843, 0,
	0, 0, 0, 0, 0, 0, 816, 0, 0, 0,
	0, 841, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 833, 0, 835, 843, 0, 0, 826, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 841, 0, 816,
	0, 0, 0, 0, 0, 0, 0, 833, 0, 832,
	0, 0, 0, 826, 0, 0, 835, 843, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	841, 0, 0, 0, 0, 832, 0, 0, 0, 0,
	833, 0, 0, 0, 827, 0, 826, 0, 0, 0,
	0, 0, 0, 0, 0, 836, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 832, 0,
	827, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 836, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 827, 0, 0, 0, 0, 834, 0,
	0, 822, 823, 824, 836, 821, 818, 819, 820, 812,
	813, 814, 815, 817, 0, 837, 0, 0, 0, 1751,
	0, 0, 0, 0, 834, 0, 0, 822, 823, 824,
	0, 821, 818, 819, 820, 812, 813, 814, 815, 817,
	0, 837, 0, 0, 0, 1731, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 834, 0, 0,
	822, 823, 824, 0, 821, 818, 819, 820, 812, 813,
	814, 815, 817, 0, 837, 0, 0, 809, 1706, 828,
	829, 830, 838, 839, 840, 0, 0, 0, 0, 0,
	0, 0, 831, 0, 0, 0, 0, 0, 0, 811,
	0, 842, 0, 809, 0, 828, 829, 830, 838, 839,
	840, 0, 0, 0, 0, 0, 0, 0, 831, 0,
	810, 0, 0, 0, 0, 811, 825, 842, 0, 0,
	0, 0, 0, 0, 0, 0, 809, 0, 828, 829,
	830, 838, 839, 840, 0, 0, 810, 0, 0, 0,
	0, 831, 825, 0, 0, 0, 0, 0, 811, 0,
	842, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 816, 0, 0, 0, 0, 0, 810,
	0, 0, 0, 0, 0, 825, 0, 0, 0, 0,
	835, 843, 0, 0, 0, 0, 0, 0, 0, 816,
	0, 0, 0, 0, 841, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 833, 0, 835, 843, 0, 0,
	826, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	841, 0, 816, 0, 0, 0, 0, 0, 0, 0,
	833, 0, 832, 0, 0, 0, 826, 0, 0, 835,
	843, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 841, 0, 0, 0, 0, 832, 0,
	0, 0, 0, 833, 0, 0, 0, 827, 0, 826,
	0, 0, 0, 0, 0, 0, 0, 0, 836, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 832, 0, 827, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 836, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 827, 0, 0, 0,
	0, 834, 0, 0, 822, 823, 824, 836, 821, 818,
	819, 820, 812, 813, 814, 815, 817, 0, 837, 0,
	0, 0, 1701, 0, 0, 0, 0, 834, 0, 0,
	822, 823, 824, 0, 821, 818, 819, 820, 812, 813,
	814, 815, 817, 0, 837, 0, 0, 0, 1697, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	834, 0, 0, 822, 823, 824, 0, 821, 818, 819,
	820, 812, 813, 814, 815, 817, 0, 837, 0, 0,
	809, 1632, 828, 829, 830, 838, 839, 840, 0, 0,
	0, 0, 0, 0, 0, 831, 0, 0, 0, 0,
	0, 0, 811, 0, 842, 0, 809, 0, 828, 829,
	830, 838, 839, 840, 0, 0, 0, 0, 0, 0,
	0, 831, 0, 810, 0, 0, 0, 0, 811, 825,
	842, 0, 0, 0, 0, 0, 0, 0, 0, 809,
	0, 828, 829, 830, 838, 839, 840, 0, 0, 810,
	0, 0, 0, 0, 831, 825, 0, 0, 0, 0,
	0, 811, 0, 842, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 816, 0, 0, 0,
	0, 0, 810, 0, 0, 0, 0, 0, 825, 0,
	0, 0, 0, 835, 843, 0, 0, 0, 0, 0,
	0, 0, 816, 0, 0, 0, 0, 841, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 833, 0, 835,
	843, 0, 0, 826, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 841, 0, 816, 0, 0, 0, 0,
	0, 0, 0, 833, 0, 832, 0, 0, 0, 826,
	0, 0, 835, 843, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 841, 0, 0, 0,
	0, 832, 0, 0, 0, 0, 833, 0, 0, 0,
	827, 0, 826, 0, 0, 0, 0, 0, 0, 0,
	0, 836, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 832, 0, 827, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 836, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 827,
	0, 0, 0, 0, 834, 0, 0, 822, 823, 824,
	836, 821, 818, 819, 820, 812, 813, 814, 815, 817,
	0, 837, 0, 0, 0, 1631, 0, 0, 0, 0,
	834, 0, 0, 822, 823, 824, 0, 821, 818, 819,
	820, 812, 813, 814, 815, 817, 0, 837, 0, 0,
	0, 1538, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 834, 0, 0, 822, 823, 824, 0,
	821, 818, 819, 820, 812, 813, 814, 815, 817, 0,
	837, 0, 0, 809, 1472, 828, 829, 830, 838, 839,
	840, 0, 0, 0, 0, 0, 0, 0, 831, 0,
	0, 0, 0, 0, 0, 811, 0, 842, 0, 809,
	0, 828, 829, 830, 838, 839, 840, 0, 0, 0,
	0, 0, 0, 0, 831, 0, 810, 0, 0, 0,
	0, 811, 825, 842, 0, 0, 0, 0, 0, 0,
	0, 0, 809, 0, 828, 829, 830, 838, 839, 840,
	0, 0, 810, 0, 0, 0, 0, 831, 825, 0,
	0, 0, 0, 0, 811, 0, 842, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 816,
	0, 0, 0, 0, 0, 810, 0, 0, 0, 0,
	0, 825, 0, 0, 0, 0, 835, 843, 0, 0,
	0, 0, 0, 0, 0, 816, 0, 0, 0, 0,
	841, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	833, 0, 835, 843, 0, 0, 826, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 841, 0, 816, 0,
	0, 0, 0, 0, 0, 0, 833, 0, 832, 0,
	0, 0, 826, 0, 0, 835, 843, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 841,
	0, 0, 0, 0, 832, 0, 0, 0, 0, 833,
	0, 0, 0, 827, 0, 826, 0, 0, 0, 0,
	0, 0, 0, 0, 836, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 832, 0, 827,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	836, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 827, 0, 0, 0, 0, 834, 0, 0,
	822, 823, 824, 836, 821, 818, 819, 820, 812, 813,
	814, 815, 817, 0, 837, 0, 0, 0, 1456, 0,
	0, 0, 0, 834, 0, 0, 822, 823, 824, 0,
	821, 818, 819, 820, 812, 813, 814, 815, 817, 0,
	837, 0, 0, 0, 1090, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 834, 0, 0, 822,
	823, 824, 0, 821, 818, 819, 820, 812, 813, 814,
	815, 817, 0, 837, 809, 1520, 828, 829, 830, 838,
	839, 840, 0, 0, 0, 0, 0, 0, 0, 831,
	0, 0, 0, 0, 0, 0, 811, 0, 842, 0,
	0, 0, 0, 0, 0, 0, 809, 0, 828, 829,
	830, 838, 839, 840, 0, 0, 0, 810, 0, 0,
	0, 831, 0, 825, 0, 0, 0, 0, 811, 0,
	842, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 810,
	0, 0, 0, 0, 809, 825, 828, 829, 830, 838,
	839, 840, 0, 0, 0, 0, 0, 0, 0, 831,
	816, 1825, 0, 0, 1024, 0, 811, 0, 842, 0,
	0, 0, 0, 0, 0, 0, 0, 835, 843, 0,
	0, 0, 0, 0, 0, 0, 0, 810, 0, 0,
	0, 841, 816, 825, 1343, 0, 0, 1342, 0, 0,
	0, 833, 0, 0, 0, 0, 0, 826, 0, 835,
	843, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1025, 0, 0, 841, 0, 0, 0, 0, 0, 832,
	0, 0, 0, 833, 0, 0, 0, 0, 0, 826,
	816, 0, 1824, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 835, 843, 0,
	0, 832, 0, 0, 827, 0, 0, 0, 0, 0,
	0, 841, 0, 0, 0, 836, 0, 0, 0, 0,
	0, 833, 0, 0, 0, 0, 0, 826, 0, 0,
	0, 0, 0, 0, 0, 0, 827, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 836, 0, 832,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 834, 0,
	0, 822, 823, 824, 0, 821, 818, 819, 820, 812,
	813, 814, 815, 817, 827, 837, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 836, 0, 0, 0, 0,
	834, 0, 0, 822, 823, 824, 0, 821, 818, 819,
	820, 812, 813, 814, 815, 817, 0, 837, 0, 845,
	0, 0, 0, 0, 0, 809, 0, 828, 829, 830,
	838, 839, 840, 0, 0, 0, 0, 0, 0, 0,
	831, 0, 0, 0, 844, 0, 0, 811, 834, 842,
	0, 822, 823, 824, 0, 821, 818, 819, 820, 812,
	813, 814, 815, 817, 0, 837, 0, 0, 810, 0,
	0, 0, 0, 809, 825, 828, 829, 830, 838, 839,
	840, 0, 0, 0, 0, 0, 0, 0, 831, 0,
	0, 0, 0, 0, 0, 811, 0, 842, 0, 0,
	0, 0, 0, 0, 0, 809, 0, 828, 829, 830,
	838, 839, 840, 0, 0, 0, 810, 0, 0, 0,
	831, 816, 825, 0, 0, 0, 0, 811, 0, 842,
	0, 0, 0, 0, 0, 0, 0, 0, 835, 843,
	0, 0, 0, 0, 0, 0, 0, 0, 810, 0,
	0, 0, 841, 0, 825, 0, 0, 0, 0, 0,
	0, 0, 833, 0, 0, 0, 0, 0, 826, 816,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 835, 843, 0, 0,
	832, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	841, 816, 0, 0, 0, 0, 0, 0, 0, 0,
	833, 0, 0, 0, 0, 0, 826, 0, 835, 843,
	0, 0, 0, 0, 0, 827, 0, 0, 0, 0,
	0, 0, 841, 0, 0, 0, 836, 0, 832, 312,
	0, 0, 833, 0, 0, 0, 0, 0, 826, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	832, 0, 0, 827, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 836, 0, 0, 0, 0, 834,
	0, 0, 822, 823, 824, 0, 821, 818, 819, 820,
	812, 813, 814, 815, 817, 827, 837, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 836, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1466, 0, 0, 0, 834, 0, 0,
	822, 823, 824, 0, 821, 818, 819, 820, 812, 813,
	814, 815, 817, 0, 837, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 834,
	0, 0, 822, 823, 824, 0, 821, 818, 819, 820,
	812, 813, 814, 815, 817, 809, 837, 828, 829, 830,
	838, 839, 840, 0, 0, 0, 0, 0, 0, 0,
	831, 0, 0, 0, 0, 0, 0, 811, 0, 842,
	0, 809, 0, 828, 829, 830, 838, 839, 840, 0,
	0, 0, 0, 0, 0, 0, 831, 0, 810, 0,
	1344, 0, 0, 811, 825, 842, 0, 0, 0, 0,
	0, 0, 0, 0, 809, 0, 828, 829, 830, 838,
	839, 840, 0, 0, 810, 0, 0, 0, 0, 831,
	825, 0, 0, 0, 0, 0, 811, 0, 842, 0,
	809, 0, 828, 829, 830, 838, 839, 840, 0, 0,
	0, 816, 0, 0, 0, 831, 1349, 810, 0, 1304,
	0, 0, 811, 825, 842, 0, 0, 0, 835, 843,
	0, 0, 0, 0, 0, 0, 0, 816, 0, 0,
	0, 0, 841, 810, 0, 0, 0, 0, 0, 825,
	0, 0, 833, 0, 835, 843, 0, 0, 826, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 841, 0,
	816, 0, 0, 0, 0, 0, 0, 0, 833, 0,
	832, 0, 0, 0, 826, 0, 0, 835, 843, 0,
	0, 0, 0, 0, 0, 0, 816, 0, 0, 0,
	0, 841, 0, 0, 0, 0, 832, 0, 0, 0,
	0, 833, 0, 835, 843, 827, 0, 826, 0, 0,
	0, 0, 0, 0, 0, 0, 836, 841, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 833, 0, 832,
	0, 827, 0, 826, 0, 0, 0, 0, 0, 0,
	1310, 0, 836, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 832, 0, 0, 0, 0,
	0, 0, 0, 0, 827, 0, 0, 0, 0, 834,
	0, 0, 822, 823, 824, 836, 821, 818, 819, 820,
	812, 813, 814, 815, 817, 0, 837, 0, 0, 0,
	827, 0, 0, 0, 0, 834, 0, 0, 822, 823,
	824, 836, 821, 818, 819, 820, 812, 813, 814, 815,
	817, 0, 837, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 834, 0,
	0, 822, 823, 824, 0, 821, 818, 819, 820, 812,
	813, 814, 815, 817, 0, 837, 0, 0, 0, 0,
	0, 0, 0, 0, 834, 0, 0, 822, 823, 824,
	0, 821, 818, 819, 820, 812, 813, 814, 815, 817,
	809, 837, 828, 829, 830, 838, 839, 840, 0, 0,
	0, 0, 0, 0, 0, 831, 0, 0, 0, 0,
	0, 0, 811, 0, 842, 0, 809, 0, 828, 829,
	830, 838, 839, 840, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 810, 0, 0, 0, 0, 811, 825,
	842, 0, 0, 0, 809, 0, 828, 829, 830, 838,
	839, 840, 0, 0, 0, 0, 0, 0, 0, 810,
	0, 0, 0, 0, 0, 825, 811, 0, 842, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 816, 810, 0, 0,
	0, 0, 0, 825, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 835, 843, 0, 0, 0, 0, 0,
	0, 0, 816, 0, 0, 0, 0, 841, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 833, 0, 835,
	843, 0, 0, 826, 0, 0, 0, 0, 0, 0,
	816, 0, 0, 841, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 833, 0, 832, 0, 835, 843, 826,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 833, 0, 0, 0, 0, 0, 826, 0, 0,
	827, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 836, 0, 0, 0, 0, 608, 603, 625, 597,
	616, 615, 0, 0, 599, 598, 827, 0, 0, 627,
	626, 0, 0, 0, 0, 0, 0, 836, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 827, 0, 0, 0, 0, 621,
	0, 613, 612, 0, 834, 836, 0, 822, 823, 824,
	611, 821, 818, 819, 820, 812, 813, 814, 815, 817,
	0, 837, 0, 0, 0, 0, 610, 0, 0, 0,
	834, 0, 0, 822, 823, 824, 0, 821, 818, 819,
	820, 812, 813, 814, 815, 817, 0, 837, 0, 0,
	0, 0, 604, 605, 606, 0, 624, 0, 834, 0,
	0, 822, 823, 824, 0, 821, 818, 819, 820, 812,
	813, 814, 815, 817, 0, 837, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	614, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 609, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 601, 0, 0, 0,
	0, 0, 0, 0, 607, 602, 0, 0, 0, 0,
	0, 629, 0, 0, 0, 0, 0, 0, 600, 0,
	0, 622, 623, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 628,
}
var sqlPact = [...]int{

	2067, -1000, 14, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 753, -1000, -1000, -1000, 607, 734,
	1976, 15781, 15781, 15521, 1109, 1109, 17081, -1000, -1000, 19941,
	-1000, 2466, 486, 487, 486, 486, 482, 17081, 590, 643,
	156, -1000, 630, 38, 19681, 15781, 1265, 21, 14481, 272,
	2067, 15261, 15781, 19421, 1113, 1030, 1029, 14481, 19161, 18901,
	18641, -1000, 10002, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 587, 291, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 288, -1000, 15001, -1000, 853, -1000, 19,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 850, -1000,
	15781, -1000, -1000, 18381, 18121, 286, 763, -1000, -1000, 549,
	390, 1289, -1000, 32, -1000, -1000, 1112, -1000, 837, 1110,
	1108, 1107, 1106, 1103, 1102, 386, 764, -1000, 579, 763,
	-1000, 763, -1000, -1000, -1000, 543, 17081, -1000, 14481, -1000,
	17861, 1044, 17601, -1000, 630, -1000, -1000, -1000, 884, 1254,
	1254, 1254, 1282, 129, 120, 156, 6, 15781, -1000, 285,
	6, 6997, 6997, -1000, -1000, 272, -1000, 320, 12654, 41,
	-1000, 7543, -1000, 731, 1173, 689, 656, 1172, -67, 14481,
	15781, 15781, 612, 17341, -1000, 1169, 121, 1166, -1000, 119,
	1164, -1000, -17, -1000, -1000, -1000, -1000, -1000, -1000, 272,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 14741, 1308, 23441, -1000, 8926, -1000,
	-1000, 12917, 1078, 12917, -1000, -1000, 1307, -1000, 8926, -1000,
	18, 17, 994, 993, 10545, 10275, 1224, 864, -1000, -1000,
	-1000, 29, 4449, 15781, 1123, 12917, 15781, 15781, 15781, 15781,
	15781, 15781, -1000, 991, -1000, 15781, -1000, 16, 12, -1000,
	17081, -1000, 124, -1000, 269, 956, 16821, 1180, 945, -1000,
	884, -1000, 826, 987, 8107, 8926, 156, -1000, -1000, 156,
	156, 8926, -1000, -1000, 15781, 6, 1302, 15781, 125, -1000,
	22525, -1000, -1000, 8926, 8926, 8926, 8926, 8926, 766, -1000,
	-1000, -1000, 5284, -1000, -1000, 41, 268, 302, -1000, -1000,
	265, 41, -1000, -1000, -1000, -1000, 264, 1408, 429, -1000,
	-1000, -1000, 8926, 394, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1121, 261, 260, -1000, -1000, -1000, -1000,
	259, 257, 256, 255, 253, 249, 248, 246, 245, 243,
	242, 240, 239, 238, 715, -1000, 407, -1000, -1000, 407,
	407, -1000, 235, 235, 236, -1000, -1000, -1000, 235, -1000,
	-1000, -1000, 372, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	237, 125, -1000, -1000, -1000, 15781, 41, -1000, -1000, -1000,
	8926, 4179, -19, -1000, 23250, -1000, -6, 803, -1000, 13961,
	1244, 1243, 1241, 14481, 542, 541, 15781, 15781, 399, 77,
	1297, 77, 12128, -1000, 15781, 15781, -1000, 15781, -1000, -1000,
	15781, -1000, 15781, 15781, 1972, 13441, 712, 1162, 38, -21,
	-1000, 1312, -1000, -1000, -1000, -1000, 93, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	236, 715, 235, 235, 235, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 372, -1000, -1000, 407, 407, 407, -1000, -1000,
	-26, 23250, 521, -3, 13179, 15781, -1000, 26, -1000, -1000,
	1101, 477, -27, 701, 1024, 777, -1000, -1000, -1000, -1000,
	4, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1393, -1000, -1000, -1000, -1000, 1395, 4, -1000, -1000,
	-1000, -1000, -1000, 1405, -1000, -1000, -1000, 4449, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 15781, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 701, 1024, -1000, -1000, 14481,
	13701, 1159, 827, 932, -1000, -1000, 340, 1156, -1000, -1000,
	-1000, -1000, 23250, -1000, 23250, 676, 1033, -1000, 1033, 0,
	-1000, 22284, -1000, 224, -28, -1000, 399, 6997, 11865, 23441,
	15781, 568, 8926, 8926, 8926, 8926, 8926, 8926, 8926, 8926,
	8926, 8926, 8926, 8926, 8926, 8926, 8926, 8926, 8926, 8926,
	8926, 8926, 8926, 8926, 951, 8926, 518, 8926, 8926, 8926,
	8926, 962, 825, 203, 4449, -1000, 596, 596, 596, 23276,
	23276, 231, 13, 21889, -2, 41, -1000, -1000, 6706, 6414,
	41, 4719, -1000, 866, 1389, 405, 23250, 1117, 1081, 223,
	118, 110, 8926, 8926, 820, 8926, 9199, 8926, 8926, 5557,
	8926, 8926, 8926, 8926, 8926, 8926, -1000, 222, -1000, -1000,
	-1000, -1000, 1387, -1000, -1000, 1377, -1000, 566, 565, 1375,
	399, 106, -1000, 2442, -1000, -1000, 7543, -1000, 712, 15781,
	15781, 15781, -1000, -1000, 931, 16561, -1000, 23441, 15781, -1000,
	221, 205, 1011, 1006, 15781, 15781, 16301, 16041, 15781, 653,
	15781, 15781, 651, -1000, 526, 8926, 793, -1000, 11338, 412,
	15781, 672, 70, -1000, -1000, -1000, 333, 15781, -1000, -1000,
	-1000, 121, -1000, 119, -1000, -1000, 14481, -1000, -1000, -1000,
	-1000, -1000, -1000, 23441, 309, 305, -1000, 1373, 517, -1000,
	516, 510, 508, -1000, 204, -1000, 8926, 15781, 13179, -3,
	-4, -1000, -1000, 15781, 1024, -1000, -1000, -1000, -1000, 647,
	-1000, 698, -1000, 10815, -1000, -1000, -1000, 866, -1000, -9,
	-1000, -1000, -1000, -1000, 105, -5, -1000, -1000, -1000, -1000,
	-1000, 15781, 262, 15781, 15781, 15781, 1154, 1404, 15781, -1000,
	-1000, -1000, 8926, -1000, -1000, -1000, 38, 15781, -1000, 1080,
	-1000, -12, 952, -119, 14221, -1000, 11075, -1000, -1000, 375,
	326, 326, 495, 495, 495, 495, 755, 755, 367, 817,
	2096, 2096, 2096, 512, 176, 176, 2096, 2096, 2096, 23276,
	3538, 1799, 8926, 8926, 507, 815, 203, 1799, 8926, 1344,
	1799, 1799, 1799, -1000, 1176, -1000, -1000, -1000, 1100, 200,
	9199, 9199, -1000, -1000, -1000, 5284, -1000, -1000, 199, 8926,
	-1000, 8926, -87, -93, -1000, -1000, -32, -1000, -1000, -23,
	8926, 8926, 8926, 103, -1000, 102, 578, -1000, 8926, 774,
	198, 195, 8926, -1000, -1000, 22970, 20524, 99, 1099, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 97, 22944, 95, 2479,
	-1000, 9199, 9199, 9199, 5284, 194, 94, 22236, -51, 22911,
	7816, 7816, 7816, 91, 22885, 8926, -51, 20491, 20465, 3503,
	-36, -38, -40, 1367, -42, 90, 357, 356, 88, 1080,
	-1000, -1000, 8926, -1000, -1000, -1000, 500, 498, 1149, -1000,
	930, -1000, 652, 8926, 15781, 190, 189, 776, -1000, 1147,
	822, 1142, 822, -1000, -6, 796, -1000, -1000, 497, -1000,
	6997, 23250, -1000, 662, 1246, -44, -1000, -1000, -1000, 6997,
	399, 12128, 11865, 7543, -53, -1000, -1000, 712, -1000, 489,
	1359, 86, 959, 739, 687, 634, 1356, 23250, -9, -1000,
	-9, -1000, -1000, -1000, -1000, -1000, -1000, 15781, 1051, 13701,
	188, 15781, 186, 183, 182, 15781, -1000, 1180, -1000, 81,
	-1000, 1070, 1277, 11865, 1019, 1016, 11865, 1122, 782, 782,
	782, -1000, 14221, 3897, -1000, -1000, 15781, 181, 11601, 79,
	952, 8926, 1799, 1799, 8926, 9199, 9199, -1000, 1799, -1000,
	-1000, -1000, -1000, 1096, 175, 8926, 23441, 3029, 2409, -54,
	6122, -10, 21863, -1000, -1000, 302, -1000, 78, 7270, -1000,
	22573, -8, -8, -1000, 1402, 1177, -1000, 8926, 22605, -1000,
	12391, 401, 792, 21579, 23441, 23441, -1000, 8926, -1000, 1090,
	8926, -1000, 23441, 9199, 9199, 9199, 9199, 9199, 9199, 9199,
	9199, 9199, 9199, 9199, 9199, 9199, 9199, 9199, 9199, 9199,
	9199, 9199, 949, 9199, 1343, 1343, 1343, -11, 5830, -1000,
	1097, 1090, 8926, 8926, 23441, 74, 69, 68, -1000, 8926,
	-51, 8926, 8926, 8926, -1000, -1000, -1000, 66, -1000, 1349,
	-1000, -1000, -1000, -1000, 1070, 21922, 15781, 15781, 15781, 1141,
	2517, -1000, 21546, -55, 15781, 15781, -1000, 1007, 1005, 471,
	15781, -1000, 15781, -1000, 15781, 15781, 15781, 15781, -15, 6997,
	187, 38, 15781, -15, 526, -1000, -12, -1000, 330, -1000,
	297, 226, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	60, -1000, -1000, 1053, -1000, 9739, 166, 15781, 13701, 9739,
	819, -1000, -1000, 377, 8926, 8926, 952, 11865, 11865, 1199,
	1008, 11865, -1000, -1000, -1000, -1000, 346, -1000, 1012, 160,
	15781, 14221, 624, 1799, 1855, 225, 8926, 23441, 23304, -64,
	8926, 8926, -1000, -65, -1000, 8926, -1000, -1000, 1400, 8926,
	59, 58, 56, -1000, -1000, 23250, 8926, -1000, -1000, 20201,
	8926, 55, -1000, 54, 53, 23250, 1097, 23250, -1000, 717,
	717, 1343, 1343, 1343, 1343, 531, 531, 780, 485, 551,
	551, 551, 897, 490, 490, 551, 551, 551, 1089, 944,
	159, 3046, 8926, -70, -1000, -1000, -1000, 23250, 23250, 52,
	-1000, -1000, -1000, -51, 3213, 21520, 21236, -1000, 50, 377,
	-1000, -1000, -1000, -1000, 15781, -1000, 15781, -1000, 15781, 15781,
	1094, 912, -1000, -1000, 999, 158, 9199, 15781, -1000, 778,
	-71, -72, 907, -1000, 905, 8926, -1000, 23441, 822, 822,
	-1000, 496, 494, -1000, -15, 1186, 15781, 1236, -1000, -1000,
	-1000, 157, -1000, -1000, -1000, 770, -76, -1000, 232, 1256,
	8926, -1000, -1000, 155, 9739, -77, -1000, -1000, 48, -78,
	15781, -1000, 15781, 23250, -51, -1000, 1199, -1000, 152, 8926,
	11865, -1000, -1000, 831, -138, -1000, 329, -1000, 15781, -83,
	-1000, 8926, 8926, 23304, -88, -1000, 1799, 1799, -1000, 21203,
	-1000, 22573, -1000, -1000, -1000, 23250, 750, -1000, 21177, -1000,
	-1000, -1000, -1000, 9199, 1087, 148, 23441, 20893, -1000, -1000,
	8926, -1000, -1000, -1000, -1000, -1000, 1082, -1000, -1000, 15781,
	922, -1000, -1000, 8926, 3046, 147, 1051, 146, -1000, -1000,
	-1000, 693, -1000, -1000, 23250, 1257, -1000, -1000, 15781, 15781,
	534, -96, 15781, -1000, -1000, 5011, 15781, 778, 9739, 1248,
	41, 15781, 1248, 20860, 4719, -97, -1000, 15781, 1051, 778,
	142, -18, -1000, 1296, -1000, 15781, 23250, -1000, 554, 1012,
	-1000, 4449, -101, -1000, 1799, 1799, -1000, -1000, 43, 792,
	1274, -1000, 3014, 9199, 23441, -102, -1000, 20834, -1000, -1000,
	1139, 20550, 969, 15781, -1000, 15781, 15781, 423, 15781, -1000,
	-1000, 594, -1000, 399, -1000, 134, 1051, -1000, -1000, -1000,
	-1000, 1256, -23, 778, -1000, -1000, 1051, 9739, 15781, 132,
	-103, 553, -1000, -1000, -1000, -1000, 681, 8926, 3014, -107,
	-1000, -1000, 1132, -1000, 800, 765, 40, -108, 131, -1000,
	8926, -1000, 12128, -1000, 15781, -1000, 1248, 39, 1051, -1000,
	-120, -1000, -1000, -1000, 1398, 35, 8653, 8653, -51, -1000,
	15781, -1000, 810, 801, 598, -1000, -1000, -1000, -1000, -1000,
	969, 15781, 23250, -116, -122, -1000, -1000, -1000, 778, -1000,
	-1000, -1000, -1000, 9469, 830, 640, 22204, -1000, -1000, -1000,
	1202, -1000, 442, 828, 828, 800, -128, -1000, 822, 1051,
	1320, -1000, -1000, -1000, -1000, -1000, -1000, 1328, -1000, -1000,
	977, -1000, -1000, -1000, -1000, -1000, 8380, -1000, -1000, -1000,
	-1000,
}
var sqlPgo = [...]int{

	0, 1600, 1596, 1312, 126, 125, 1594, 1593, 1590, 109,
	124, 123, 127, 1589, 89, 1587, 1586, 1585, 102, 1584,
	1582, 1580, 61, 1579, 1578, 1577, 1575, 1574, 91, 24,
	158, 2041, 152, 1573, 1571, 1570, 12, 111, 77, 1569,
	6, 65, 99, 113, 1412, 39, 1567, 1566, 136, 38,
	27, 115, 106, 144, 150, 134, 1565, 1563, 1562, 42,
	1561, 9, 1560, 1559, 1554, 52, 22, 1553, 13, 1552,
	15, 1551, 1550, 128, 74, 1549, 107, 110, 19, 132,
	58, 1545, 49, 11, 82, 1542, 29, 1540, 41, 81,
	141, 1539, 60, 147, 57, 23, 72, 1537, 1535, 1534,
	1528, 84, 1526, 95, 67, 1524, 1523, 80, 1521, 135,
	138, 1520, 1519, 146, 1518, 1517, 1515, 686, 1514, 1513,
	605, 1512, 3, 51, 66, 5, 118, 117, 53, 1511,
	28, 1509, 2078, 570, 616, 1507, 50, 54, 86, 46,
	79, 18, 1506, 1505, 112, 1504, 1503, 1502, 1501, 1499,
	85, 1498, 75, 137, 45, 47, 94, 25, 30, 104,
	87, 103, 145, 114, 1497, 1496, 121, 1495, 44, 1494,
	1492, 748, 120, 1491, 1490, 1489, 706, 700, 604, 93,
	1488, 1486, 324, 16, 1485, 1479, 119, 1478, 1477, 142,
	216, 36, 1473, 116, 1472, 96, 1469, 0, 76, 35,
	1465, 130, 83, 1463, 1462, 1459, 1450, 43, 10, 14,
	4, 7, 2, 31, 20, 1448, 1443, 129, 100, 1437,
	148, 1435, 1434, 26, 1431, 1427, 21, 1426, 17, 1425,
	8, 1, 1424, 139, 1422, 98, 1421, 1343, 1417, 143,
	1416, 1415, 1332, 88,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 4, 4, 38, 38, 37,
	37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
	37, 37, 37, 37, 35, 35, 40, 40, 40, 39,
	39, 34, 34, 5, 5, 5, 9, 10, 10, 10,
	10, 10, 10, 79, 79, 78, 78, 81, 81, 11,
	11, 12, 12, 12, 12, 12, 12, 12, 12, 167,
	167, 166, 13, 142, 142, 14, 14, 14, 14, 15,
	102, 102, 16, 16, 16, 16, 17, 21, 233, 233,
	233, 237, 237, 238, 238, 239, 239, 239, 239, 239,
	239, 239, 235, 235, 24, 24, 24, 24, 24, 121,
	117, 117, 119, 119, 119, 119, 43, 116, 116, 116,
	116, 118, 118, 118, 118, 190, 189, 189, 195, 195,
	195, 56, 56, 56, 56, 56, 57, 57, 57, 188,
	188, 188, 188, 196, 196, 196, 196, 196, 196, 58,
	58, 58, 194, 194, 25, 25, 25, 25, 25, 25,
	25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
	25, 234, 234, 236, 236, 8, 8, 59, 59, 60,
	60, 124, 124, 124, 124, 61, 61, 123, 205, 205,
	206, 206, 206, 206, 206, 206, 207, 207, 207, 207,
	207, 207, 207, 203, 203, 204, 201, 201, 202, 202,
	202, 202, 240, 240, 122, 122, 64, 64, 210, 210,
	210, 210, 208, 208, 208, 208, 208, 211, 209, 212,
	212, 212, 212, 212, 153, 153, 153, 27, 7, 7,
	106, 106, 68, 68, 157, 157, 157, 69, 69, 158,
	50, 50, 36, 36, 36, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 107, 107, 108, 108, 19, 23,
	26, 26, 26, 26, 26, 242, 242, 47, 47, 47,
	47, 48, 48, 120, 120, 120, 120, 120, 42, 6,
	6, 41, 41, 18, 18, 18, 18, 18, 53, 53,
	113, 113, 113, 115, 115, 114, 114, 114, 92, 92,
	28, 75, 75, 83, 83, 84, 84, 164, 85, 85,
	22, 22, 31, 31, 29, 29, 29, 29, 29, 29,
	30, 30, 32, 32, 32, 32, 32, 32, 32, 218,
	218, 218, 220, 220, 217, 219, 219, 241, 241, 93,
	93, 93, 63, 62, 62, 66, 66, 65, 67, 67,
	156, 90, 90, 90, 90, 109, 110, 110, 111, 111,
	112, 112, 89, 89, 139, 139, 33, 33, 73, 73,
	74, 74, 130, 130, 131, 131, 129, 129, 129, 159,
	159, 159, 159, 160, 160, 160, 160, 160, 160, 154,
	154, 154, 154, 155, 155, 165, 165, 96, 96, 96,
	96, 94, 94, 95, 95, 161, 161, 161, 161, 91,
	91, 162, 162, 162, 125, 125, 168, 168, 168, 72,
	72, 72, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 170, 170, 170, 170, 172,
	172, 172, 171, 171, 171, 171, 171, 171, 171, 171,
	171, 171, 171, 171, 171, 173, 173, 180, 180, 181,
	181, 182, 183, 174, 174, 175, 175, 176, 177, 184,
	184, 184, 184, 186, 186, 178, 178, 178, 178, 178,
	179, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 104, 104, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 213, 213, 213, 213,
	213, 213, 213, 215, 215, 216, 216, 214, 214, 214,
	214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
	214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
	214, 214, 214, 221, 221, 222, 222, 223, 223, 224,
	224, 226, 227, 227, 227, 228, 232, 232, 225, 225,
	229, 229, 229, 230, 230, 231, 231, 231, 231, 231,
	144, 144, 144, 145, 145, 146, 80, 80, 141, 141,
	140, 140, 140, 143, 143, 97, 185, 185, 185, 185,
	185, 185, 185, 98, 98, 105, 99, 99, 100, 100,
	100, 100, 100, 100, 136, 137, 101, 101, 101, 138,
	138, 147, 151, 151, 150, 149, 149, 148, 148, 128,
	128, 128, 128, 127, 126, 86, 86, 243, 243, 152,
	152, 87, 87, 88, 82, 82, 163, 163, 163, 163,
	76, 76, 55, 55, 77, 77, 51, 51, 54, 52,
	52, 52, 52, 70, 70, 71, 71, 49, 49, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	187, 187, 187, 44, 44, 44, 45, 45, 46, 46,
	192, 192, 192, 193, 193, 193, 193, 191, 191, 191,
	191, 191, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 4, 6, 1, 3, 2,
	5, 3, 6, 4, 6, 6, 6, 4, 8, 2,
	3, 3, 6, 4, 3, 2, 1, 1, 0, 2,
	0, 2, 0, 1, 1, 1, 6, 3, 5, 4,
	6, 4, 6, 1, 3, 1, 2, 2, 3, 2,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 1, 5, 3, 0, 1, 1, 1, 1, 3,
	3, 0, 2, 3, 2, 3, 6, 6, 1, 2,
	2, 1, 1, 1, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 2, 3, 6, 3, 1, 5,
	2, 1, 1, 1, 3, 3, 2, 3, 3, 3,
	3, 1, 3, 3, 2, 1, 1, 3, 1, 1,
	1, 2, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 1, 1, 1, 1,
	1, 0, 1, 1, 2, 2, 4, 2, 4, 4,
	4, 4, 4, 4, 4, 2, 3, 4, 3, 2,
	4, 2, 0, 2, 0, 7, 10, 1, 0, 1,
	3, 1, 1, 1, 1, 8, 0, 3, 2, 0,
	3, 1, 2, 2, 3, 6, 2, 1, 1, 2,
	4, 2, 5, 7, 8, 5, 3, 1, 4, 6,
	5, 10, 1, 1, 4, 0, 3, 0, 2, 2,
	2, 0, 1, 1, 2, 2, 0, 3, 3, 2,
	1, 1, 2, 2, 1, 2, 1, 4, 11, 14,
	1, 0, 1, 3, 3, 3, 5, 1, 3, 1,
	2, 0, 1, 1, 0, 6, 6, 8, 6, 8,
	8, 10, 8, 10, 1, 0, 2, 0, 2, 2,
	3, 3, 2, 2, 2, 1, 0, 1, 3, 2,
	0, 2, 1, 1, 1, 3, 3, 0, 3, 4,
	7, 3, 0, 6, 6, 8, 5, 7, 1, 3,
	1, 4, 2, 8, 5, 4, 3, 0, 2, 0,
	8, 2, 0, 1, 3, 1, 1, 3, 5, 5,
	1, 1, 3, 3, 1, 2, 3, 2, 3, 4,
	1, 1, 8, 8, 1, 2, 4, 4, 4, 2,
	2, 3, 1, 3, 6, 1, 0, 1, 0, 1,
	1, 0, 1, 1, 0, 1, 0, 3, 1, 3,
	2, 2, 2, 1, 1, 2, 2, 3, 1, 1,
	1, 1, 3, 0, 2, 0, 2, 3, 2, 0,
	1, 3, 3, 1, 1, 3, 2, 4, 0, 4,
	2, 1, 4, 3, 4, 5, 4, 5, 4, 5,
	2, 4, 1, 1, 0, 5, 0, 2, 2, 2,
	1, 1, 0, 4, 2, 1, 2, 2, 4, 1,
	3, 1, 2, 3, 2, 0, 2, 5, 2, 3,
	4, 0, 1, 1, 1, 1, 2, 4, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	5, 0, 1, 1, 1, 1, 1, 1, 2, 2,
	2, 2, 2, 1, 1, 3, 0, 1, 1, 1,
	1, 5, 2, 1, 1, 1, 1, 4, 1, 2,
	2, 1, 1, 1, 0, 1, 1, 4, 1, 4,
	1, 1, 1, 1, 1, 1, 1, 3, 3, 3,
	3, 3, 3, 3, 0, 1, 4, 1, 3, 3,
	5, 2, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 2, 3, 4, 3,
	4, 4, 5, 3, 3, 3, 3, 3, 4, 3,
	3, 4, 3, 4, 3, 4, 5, 6, 6, 7,
	6, 7, 6, 7, 3, 4, 1, 3, 2, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	5, 6, 6, 7, 1, 1, 1, 3, 1, 1,
	1, 2, 2, 2, 1, 1, 3, 5, 6, 8,
	6, 6, 4, 4, 1, 1, 1, 5, 1, 3,
	1, 3, 1, 1, 1, 1, 6, 6, 4, 4,
	4, 4, 6, 5, 5, 5, 4, 8, 6, 6,
	4, 4, 4, 5, 0, 5, 0, 2, 0, 1,
	3, 3, 2, 2, 0, 6, 1, 0, 3, 0,
	2, 2, 0, 1, 4, 2, 2, 2, 2, 2,
	4, 3, 5, 4, 3, 5, 1, 3, 1, 3,
	3, 3, 2, 1, 3, 3, 1, 1, 1, 1,
	1, 1, 1, 4, 3, 2, 3, 0, 3, 3,
	2, 2, 1, 0, 2, 2, 3, 2, 1, 1,
	3, 5, 1, 2, 4, 2, 0, 1, 0, 1,
	1, 3, 5, 2, 2, 1, 2, 1, 0, 1,
	1, 1, 3, 3, 1, 3, 3, 2, 1, 1,
	1, 3, 1, 3, 1, 3, 1, 2, 3, 1,
	2, 2, 1, 1, 3, 3, 0, 1, 2, 1,
	1, 1, 1, 6, 2, 3, 5, 1, 1, 1,
	1, 2, 2, 1, 1, 1, 1, 0, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -9, -10, -11, -13,
	-15, -16, -17, -18, -20, -21, -23, -22, -24, -25,
	-26, -19, -27, -28, 22, -6, -7, -8, -219, 90,
	98, 190, 97, 83, 113, 204, 211, -29, -31, 219,
	-121, 220, 33, 228, 57, 93, 206, 201, 248, 64,
	-218, -32, -30, 294, 269, 275, 214, -33, 235, 262,
	297, 235, 76, 126, 85, 130, 256, 255, 76, 126,
	235, -12, 294, -22, -5, -10, -4, -18, -28, -9,
	-11, 22, -44, 4, -197, -199, 19, 20, 22, 32,
	33, 38, 42, 45, 56, 57, 58, 60, 62, 63,
	66, 67, 74, 75, 76, 77, 79, 83, 85, 89,
	90, 92, 97, 98, 103, 104, 107, 109, 114, 119,
	120, 127, 130, 125, 138, 140, 141, 146, 149, 152,
	154, 155, 156, 157, 158, 160, 161, 163, 165, 162,
	168, 170, 171, 177, 180, 183, 184, 185, 188, 190,
	192, 193, 194, 196, 197, 201, 199, 200, 202, 204,
	206, 207, 209, 211, 212, 213, 216, 217, 219, 220,
	222, 225, 227, 228, 231, 229, 234, 236, 237, 244,
	248, 249, 250, 251, 254, 255, 256, 259, 260, 261,
	265, 270, 271, 272, 273, 27, 34, 35, 36, 37,
	39, 40, 43, 44, 48, 49, 50, 52, 78, 80,
	81, 96, 99, 105, 115, 117, 121, 122, 131, 132,
	133, 135, 144, 167, 169, 178, 182, 187, 189, 195,
	208, 215, 223, 224, 230, 232, 239, 240, 241, 245,
	246, 262, 263, -44, -44, 190, 21, -237, 21, -238,
	-239, 64, 90, 113, 214, 130, 85, 255, -237, -48,
	211, -44, -117, 149, 217, 208, 244, -118, -116, -190,
	239, 158, -78, -44, 4, 76, 56, 77, 114, 126,
	127, 61, 62, 141, 236, 239, 244, 21, 64, -242,
	244, 244, -242, -242, -47, 244, 242, -48, -241, 235,
	235, -106, 76, 253, -30, -32, -31, -65, -66, 252,
	134, 95, 176, -29, -31, -218, -220, 196, -217, -44,
	-220, -62, -63, 21, 87, 298, -161, -51, 174, -44,
	-88, 294, -3, -161, 121, -44, -54, 121, -51, 111,
	136, 136, -162, -161, -44, 121, -55, 121, -54, -79,
	121, -78, -167, -166, -193, 4, -197, -199, -198, 262,
	54, 65, 112, 129, 123, 137, 139, 145, 147, 159,
	179, 181, 205, 221, 235, -142, 294, -102, 294, -44,
	21, 173, 298, 173, -44, -117, 50, -117, 294, -119,
	-42, -43, 138, 192, 242, 279, 111, 273, -58, 5,
	82, -81, 296, 111, -234, 173, 111, 111, 111, 111,
	111, 111, 273, 138, 192, 235, -120, -42, -43, -120,
	242, -48, -91, -161, -78, 121, 126, -44, 121, -65,
	-66, -90, -109, -110, 148, 172, -93, 21, 87, -93,
	-93, 42, 295, 295, 298, -220, -71, 294, -82, -163,
	-132, 287, -134, 285, 286, 291, 164, 274, -144, -51,
	-135, 9, 294, -147, -215, -31, 96, 28, -145, -146,
	208, -44, 7, 8, 5, 6, -49, -170, -179, 247,
	100, 166, 46, -213, -214, 4, -197, -192, -171, -181,
	-175, -178, 135, 54, 69, 72, 70, 73, 218, 257,
	47, 27, 99, 182, 187, 232, 245, 246, 121, 167,
	122, 52, 115, 144, 89, 35, 37, 39, 40, 48,
	49, 78, 80, 81, 105, 131, 132, 133, 169, 195,
	223, 230, 240, 241, 263, -198, -182, -183, -176, -177,
	-184, -82, -88, 287, -51, 294, -86, -128, -127, -126,
	292, 296, -87, -152, -132, 82, -38, 199, -37, 20,
	22, 90, 260, 96, 199, 199, 96, 299, -162, -53,
	-51, -53, 219, -44, 29, 96, -40, 298, 45, 202,
	96, -40, 298, 96, 295, 298, -161, 121, 29, -141,
	-168, -169, -171, -180, -174, -178, -179, 38, 44, 43,
	237, 215, 224, 36, 131, 132, 133, 223, 35, 195,
	105, 89, 81, 80, 169, 40, 39, -182, -183, -176,
	-177, 78, 240, 241, 135, 37, 49, 48, 263, 230,
	-80, -132, -233, -77, 235, 76, -52, -44, 287, -239,
	-233, 29, -80, 298, 298, 146, -57, 152, 163, 119,
	-189, 82, -195, -188, -153, 9, 247, 100, 173, -194,
	8, 286, -187, -193, 5, 7, 285, -189, 82, 67,
	-196, 5, 4, -179, -153, 82, 149, 296, -191, 4,
	-197, -199, -198, -200, 21, 23, 24, 25, 26, 28,
	29, 30, 31, 41, 46, 47, 51, 53, 55, 61,
	64, 68, 69, 70, 71, 72, 73, 82, 84, 86,
	87, 88, 91, 93, 95, 100, 101, 102, 108, 110,
	111, 113, 116, 118, 124, 126, 128, 134, 136, 142,
	143, 148, 150, 151, 164, 166, 172, 173, 174, 175,
	176, 186, 191, 198, 203, 214, 218, 226, 233, 235,
	238, 242, 243, 247, 252, 253, 257, 258, 264, 266,
	267, 268, 269, -190, -236, 108, -233, -190, -190, -190,
	-190, -190, -44, 146, -190, 298, 298, -48, -40, 298,
	294, 164, -45, 121, -44, -41, 92, 164, -90, -110,
	-109, -111, -132, 21, -132, -134, -30, -30, -30, -67,
	-156, -132, -217, 29, -70, -44, -73, 298, 111, 10,
	53, 32, 285, 286, 287, 288, 106, 289, 282, 283,
	284, 281, 277, 278, 279, 59, 153, 210, 12, 13,
	14, 25, 175, 147, 274, 123, 221, 291, 15, 16,
	17, 137, 34, 124, 29, 4, -132, -132, -132, -132,
	-132, 181, -31, -132, -80, -86, -31, -140, 292, 294,
	-86, 294, 5, 5, 294, -148, -132, -221, 270, 108,
	294, 294, 294, 294, 294, 294, 294, 294, 294, 294,
	294, 294, 294, 294, 294, 294, 189, -186, 265, -186,
	-186, -172, 294, -172, -173, 294, -172, 271, 275, 294,
	-73, -51, -128, -132, -191, 287, 298, 295, 298, 242,
	-107, 61, 55, -123, 121, 55, -201, -44, 61, -202,
	51, 253, 191, 110, -107, 61, -107, 61, 61, -161,
	242, 242, -54, -44, -125, 267, -113, -22, 294, 82,
	29, -113, -83, -84, -164, -85, -51, 294, -44, -44,
	-54, -55, -78, -79, -12, -166, 96, -14, -22, -18,
	-28, -9, 295, 298, -72, 28, -103, 294, 272, 156,
	79, 120, 155, -104, 213, 295, 298, 242, 298, -77,
	-70, -127, -126, 111, 244, 295, -43, -42, -56, 194,
	225, 200, 216, 298, 8, 7, 7, 5, -191, -235,
	-44, -43, -42, -161, -59, -60, -124, -123, -203, -204,
	-201, 126, 253, 101, 96, 173, 164, 279, 96, -112,
	208, 209, 298, -36, 30, 86, 294, 298, 295, -125,
	-163, -74, -159, -161, -31, -160, 294, -168, -78, 239,
	-132, -132, -132, -132, -132, -132, -132, -132, -132, -132,
	-132, -132, -132, -132, -132, -132, -132, -132, -132, -132,
	-132, -132, 147, 123, 221, 34, 124, -132, 242, -132,
	-132, -132, -132, 166, 164, 247, 100, 254, 87, 170,
	-243, 233, 31, -138, -31, 294, -191, -144, 208, 294,
	295, 298, -80, -143, 293, -140, -80, 295, 295, -80,
	264, 21, 87, 287, -103, 7, -151, -150, 266, -222,
	103, 116, 294, 295, 295, -132, -132, -97, -185, 4,
	272, 156, 79, 120, 155, 213, -98, -132, -99, -133,
	-134, 285, 286, 291, 294, 208, -100, -132, -80, -132,
	41, 143, 243, -101, -132, 111, -80, -132, -132, -132,
	-80, -80, -80, 294, 7, 7, 239, 239, 7, -125,
	295, 293, 302, -152, -37, -51, -44, -44, 164, -123,
	121, -168, -44, 294, 294, 140, 140, -44, -44, 121,
	-44, 121, -44, -44, -38, 199, -44, -44, 199, -92,
	203, -132, -92, -115, 173, -76, -51, 262, -44, 203,
	-75, 298, 111, 279, -76, -40, -40, -161, -168, 292,
	292, 7, 242, 242, 242, 242, 294, -132, -235, -52,
	-235, -42, 251, 58, 194, -195, -103, 298, 295, 298,
	-45, 126, -45, -78, -51, 96, 5, -44, -156, -14,
	-44, -89, 116, 298, 65, -96, 139, 159, 112, 145,
	205, 129, -129, 299, -155, -154, 29, -44, -31, -160,
	-159, 273, -132, -132, 242, -243, 233, -138, -132, 166,
	247, 100, 254, 87, 170, 111, 294, -133, -133, -80,
	294, -80, -132, 293, 293, 298, 295, -66, 298, -65,
	-132, -80, -80, 295, 295, -149, -150, 91, -132, -227,
	180, 294, 294, -132, 29, 298, 295, 111, 295, -105,
	186, 295, 10, 285, 286, 287, 288, 106, 289, 282,
	283, 284, 281, 277, 278, 279, 59, 153, 210, 12,
	13, 14, 137, 124, -133, -133, -133, -80, 294, 295,
	-136, -137, 111, 108, 29, -101, -101, -101, 295, 111,
	-80, 298, 298, 298, 295, 295, 295, 7, 295, 298,
	295, 273, 273, 295, -89, -132, 242, 242, 96, 164,
	-205, -202, -132, -70, 294, 294, -35, 90, 219, -108,
	96, -40, 96, -40, 242, -107, 61, 242, -82, 203,
	60, 295, 298, -82, -125, -84, -74, -152, 295, 293,
	7, 7, 295, 156, 120, 155, -104, 155, -104, -104,
	7, -44, -61, 125, -124, 294, -45, 294, 294, 294,
	-44, -41, 295, -139, 118, 42, -159, 139, 139, -159,
	-96, 139, -94, 179, -94, -94, -155, -191, 300, -44,
	294, 295, -132, -132, -133, -133, 111, 294, -132, -141,
	25, 25, 295, -80, 295, 298, 295, -140, 295, 264,
	-66, -66, -66, 5, 93, -132, 238, -228, -44, 294,
	267, -65, 295, -168, -168, -132, -136, -132, -168, -133,
	-133, -133, -133, -133, -133, -133, -133, -133, -133, -133,
	-133, -133, -133, -133, -133, -133, -133, -133, 87, 164,
	170, -133, 298, -80, 295, -137, -136, -132, -132, -168,
	295, 295, 295, -80, -132, -132, -132, 295, 7, -139,
	293, -44, -44, -123, 96, -206, 61, -207, 53, 101,
	64, 164, 166, 253, 191, 51, 82, 198, 295, 295,
	-70, -70, 164, 82, 164, 82, 75, 249, -44, -44,
	-51, -44, -44, -44, -82, -114, 294, 173, -22, -51,
	-92, 279, 293, 293, 295, 124, -68, -157, -44, -216,
	294, -213, -214, -49, 294, -69, -158, -44, -59, -68,
	173, -223, 268, -132, -80, -159, -159, -95, 258, 173,
	139, -159, -165, 276, -131, -130, 109, 162, 294, -70,
	-154, 25, 25, -132, -141, 295, -132, -132, 295, -132,
	5, -132, 295, 295, 295, -132, -232, -44, -132, 295,
	295, 295, -137, 111, 87, 170, 294, -132, 295, 295,
	298, 295, 295, 295, -223, -123, -44, -78, -44, 101,
	121, 166, 140, 294, -133, -51, -122, -240, 63, 231,
	295, 295, 166, 166, -132, -168, -40, -40, 242, 242,
	88, -70, 61, -88, -31, 294, 183, 295, 298, -50,
	-86, 53, -50, -132, 294, -68, 295, 298, 295, 295,
	-51, -224, -226, -44, -95, 294, -132, -159, 170, 298,
	301, 279, -70, 295, -132, -132, 295, 295, -66, -225,
	185, 295, -133, 111, 294, -141, 295, -132, -207, -45,
	164, -132, -46, 294, -61, 294, 198, -39, 53, -44,
	-44, 255, 165, 295, -44, -44, -122, -157, -36, -78,
	-36, 295, -80, 295, -158, -61, -122, 294, 298, 29,
	-70, 234, -130, -191, 295, 295, -66, 42, -133, -141,
	295, 295, 96, 295, -210, 154, -44, -70, -51, -34,
	258, -78, 219, -125, 294, -61, -50, -66, -122, -61,
	-68, -226, -228, 295, 239, -229, 193, 209, -80, 295,
	101, -208, -211, -209, 173, 112, 184, 222, 295, 295,
	-64, 294, -132, -83, -70, -36, 295, -61, 295, 5,
	295, -230, -231, 34, 250, 67, -132, -230, -44, -209,
	173, -211, 173, 255, 85, -210, -70, -125, 295, -122,
	-231, 188, 107, 208, 188, 107, -212, 161, 202, 45,
	219, -212, -208, 295, -40, -61, 25, 19, 166, 82,
	-231,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 0, 53, 54, 55, 0, 0,
	356, 0, 0, 0, 0, 0, 0, 330, -2, 0,
	118, 0, 286, 0, 286, 286, 290, 0, 358, 251,
	355, -2, 366, 0, 0, 0, 364, 344, 0, 0,
	-2, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 69, 0, 71, 72, 73, 74, 75, 76, 77,
	78, 0, 84, 783, 784, 785, 802, 803, 804, 805,
	806, 807, 808, 809, 810, 811, 812, 813, 814, 815,
	816, 817, 818, 819, 820, 821, 822, 823, 824, 825,
	826, 827, 828, 829, 830, 831, 832, 833, 834, 835,
	836, 837, 838, 839, 840, 841, 842, 843, 844, 845,
	846, 847, 848, 849, 850, 851, 852, 853, 854, 855,
	856, 857, 858, 859, 860, 861, 862, 863, 864, 865,
	866, 867, 868, 869, 870, 871, 872, 873, 874, 875,
	876, 877, 878, 879, 880, 881, 882, 883, 884, 885,
	886, 887, 888, 889, 890, 891, 892, 893, 894, 895,
	896, 897, 898, 899, 900, 901, 902, 903, 904, 905,
	906, 907, 908, 909, 910, 911, 912, 913, 914, 915,
	916, 917, 918, 919, 920, 921, 922, 923, 924, 925,
	926, 927, 928, 929, 930, 931, 932, 933, 934, 935,
	936, 937, 938, 939, 940, 941, 942, 943, 944, 945,
	946, 947, 948, 949, 950, 951, 952, 953, 954, 955,
	956, 957, 958, 91, 92, 865, 94, 0, 101, 102,
	103, 105, 106, 107, 108, 109, 110, 111, 0, 279,
	879, 292, 114, 844, 883, 946, 895, 121, 131, 0,
	952, -2, 135, 65, 164, 165, 0, 167, 182, 0,
	0, 0, 0, 0, 175, 0, 0, 179, 0, 297,
	285, 297, 282, 283, 284, 287, 0, 278, 0, 357,
	0, 0, 0, 250, -2, 340, 341, -2, 0, 361,
	361, 361, 0, 0, 341, 0, 349, 869, 352, 766,
	350, 0, 0, 363, 362, 0, 345, 425, 0, 756,
	386, 0, 2, 0, 932, 0, 0, 932, 0, 0,
	0, 0, 0, 431, 57, 932, 48, 932, 752, 48,
	932, 63, 0, 79, 81, 793, 794, 795, 796, 957,
	959, 960, 961, 962, 963, 964, 965, 966, 967, 968,
	969, 970, 971, 972, 0, 0, 0, 89, 0, 93,
	95, 0, 0, 0, 291, 115, 922, 117, 0, 120,
	122, 123, 0, 0, 0, 0, 0, 0, 134, 159,
	160, 66, 0, 0, 184, 0, 0, 0, 0, 0,
	0, 0, 176, 0, 178, 0, 280, 293, 294, 281,
	0, 289, 48, 429, 0, 932, 787, 302, 932, -2,
	0, 336, 373, 374, 0, 0, 0, 359, 360, 0,
	0, 0, 332, 333, 0, 351, 0, 0, 389, 744,
	748, 749, 517, 0, 0, 0, 0, 0, 0, 604,
	605, 606, 0, 608, 609, 610, 927, 0, 614, 615,
	946, 756, 769, 770, 771, 772, 0, 0, 0, 777,
	778, 779, 728, 654, 624, -2, -2, 767, 455, 456,
	457, 458, -2, 959, 628, 630, 632, 633, 634, 635,
	0, 911, 928, 942, 943, 951, 955, 956, 932, 939,
	933, 923, 930, 938, 825, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, 792, 479, 480, 485, 486,
	488, 389, 387, 426, 427, 0, 757, 735, 729, 730,
	0, 0, 0, 741, 739, 740, 25, 275, 27, 0,
	275, 275, 0, 0, 0, 0, 0, 0, 435, 0,
	308, 0, 0, 432, 0, 0, 59, 0, 46, 47,
	0, 61, 0, 0, 356, 0, 0, 932, 356, 0,
	688, 441, 442, 443, 444, 445, 514, 448, 449, 450,
	451, 452, 453, 454, 462, 463, 464, 465, 466, 467,
	476, 0, 461, 461, 461, 473, 474, 477, 478, 483,
	484, 495, 496, 498, 500, 494, 494, 494, 491, 492,
	0, 686, 0, 98, 0, 820, 754, 759, 762, 104,
	0, 0, 0, 0, 0, 0, 126, 146, 147, 148,
	127, 129, 136, 138, 139, 140, 149, 150, 151, 152,
	244, 0, 246, 162, 163, 780, 0, 128, 130, 132,
	133, 153, 154, 0, 156, 157, 158, 0, 67, 797,
	798, 799, 800, 801, 973, 974, 975, 976, 977, 978,
	979, 980, 981, 982, 983, 984, 985, 986, 987, 988,
	989, 990, 991, 992, 993, 994, 995, 996, 997, 998,
	999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008,
	1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018,
	1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028,
	1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038,
	1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048,
	1049, 1050, 1051, 166, 168, 0, 181, 169, 170, 171,
	172, 173, 174, 177, 180, 0, 0, 288, 247, 0,
	188, 0, 0, 932, 786, 299, 0, 0, 339, 371,
	372, 375, 378, 379, 376, 517, 346, 347, 348, 367,
	368, 264, 353, 0, 0, 763, 435, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 738, 0, 0, 747, 521, 522, 523, 545,
	546, 0, -2, 686, 0, 611, 612, 613, 0, 0,
	-2, 0, 774, 514, 0, 0, 727, 656, 0, 0,
	0, 0, 0, 0, 0, 0, 707, 713, 0, 0,
	0, 0, 0, 0, 0, 0, 469, 482, 493, 490,
	489, 471, 0, 470, 468, 0, 472, 0, 0, 0,
	435, 0, 736, 0, 733, 734, 0, 743, 0, 0,
	0, 0, 274, 29, 932, 0, 39, 0, 0, 217,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 758, 319, 0, 319, 310, 0, 0,
	0, 306, 322, 323, 325, 326, 0, 0, 433, 58,
	753, 48, 64, 48, 70, 80, 0, 82, 85, 86,
	87, 88, 83, 0, 436, 438, 446, 0, 501, 502,
	503, 504, 505, 506, 515, 90, 0, 0, 0, 99,
	100, 760, 761, 0, 0, 119, 124, 125, 298, 0,
	143, 0, 145, 0, 245, 782, 781, 514, 68, 183,
	112, 295, 296, 430, 0, 187, 189, 191, 192, 193,
	194, 787, 0, 787, 0, 0, 0, 0, 0, 377,
	380, 381, 0, 370, 262, 263, 356, 0, 765, 383,
	745, 388, 390, 398, 414, 401, 0, 518, 519, 0,
	524, 525, 526, 527, 528, 529, 530, 531, 532, 533,
	-2, -2, -2, 537, 538, 539, -2, -2, -2, 543,
	544, -2, 0, 0, 0, 738, 0, -2, 0, 553,
	-2, -2, -2, 557, 0, 560, 562, 564, 0, 0,
	0, 0, 737, 574, 719, 0, 746, 559, 0, 0,
	607, 0, 0, 0, 692, 693, 0, -2, 616, 366,
	0, 0, 0, 0, 775, 0, 726, 722, 0, 664,
	0, 0, 0, 629, 631, 0, 0, 0, 0, 696,
	697, 698, 699, 700, 701, 702, 0, 0, 0, 0,
	576, 0, 0, 0, 0, 946, 0, 686, 712, 0,
	0, 0, 0, 0, 686, 0, 718, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 383,
	428, 731, 0, 742, 28, 266, 0, 0, 0, 31,
	932, 199, 0, 0, 0, 0, 0, 277, 40, 932,
	48, 932, 48, 41, 26, 275, 265, 268, 0, 56,
	0, 434, 303, 304, 0, 0, 750, 312, 309, 0,
	435, 0, 0, 0, 0, 60, 62, 0, 689, 0,
	0, 0, 0, 0, 0, 0, 0, 687, 96, 755,
	97, 116, 141, 142, 144, 137, 155, 0, 196, 0,
	0, 787, 0, 0, 0, 0, 301, 302, 369, 0,
	764, 385, 0, 0, 0, 0, 0, 0, 422, 422,
	422, 420, 414, 0, 400, 413, 0, 412, -2, 401,
	0, 0, -2, -2, 0, 0, 0, 575, -2, 558,
	561, 563, 565, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 687, 690, 691, 0, -2, 0, 0, 365,
	366, 366, 366, 622, 0, 0, 723, 0, 0, 623,
	0, 0, 0, 0, 0, 0, 638, 0, 639, 0,
	0, 640, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 578, 579, 580, 0, 0, 641,
	710, 711, 0, 0, 0, 0, 0, 0, 646, 0,
	717, 0, 0, 0, 650, 651, 652, 0, 459, 0,
	475, 497, 499, 487, 385, 0, 0, 0, 0, 0,
	197, 216, 0, 0, 0, 0, 33, 0, 0, 0,
	0, 37, 0, 43, 0, 0, 0, 0, 318, 0,
	317, 0, 0, 307, 319, 324, 321, 327, 0, 439,
	0, 0, 447, 507, 508, 509, 510, 511, 512, 513,
	0, 113, 185, 0, 190, 0, 0, 0, 188, 0,
	0, 300, 354, 658, 0, 0, 391, 0, 0, 0,
	0, 0, 417, 421, 418, 419, 416, 396, 0, 410,
	0, 403, 520, -2, 0, 0, 0, 0, -2, 0,
	0, 0, 720, 0, 681, 0, -2, 694, 617, 0,
	0, 0, 0, 776, 721, 725, 0, 662, 663, 667,
	0, 0, 627, 0, 0, 695, 704, 705, 577, 581,
	582, 583, 584, 585, 586, 587, 588, 589, 590, -2,
	-2, -2, 594, 595, 596, -2, -2, -2, 0, 0,
	0, 706, 0, 0, 684, 708, 709, 714, 715, 0,
	643, 644, 645, 716, 0, 0, 0, 481, 0, 658,
	732, 270, 272, 30, 0, 198, 0, 201, 0, 0,
	0, 0, 207, 208, 0, 0, 0, 0, 218, 225,
	0, 0, 0, 45, 0, 0, 276, 0, 48, 48,
	267, 0, 0, 269, 305, 0, 0, 0, 311, 751,
	320, 0, 440, 437, 516, 0, 0, 252, 261, 261,
	0, 625, 626, 0, 0, 0, 257, 259, 0, 0,
	0, 342, 0, 384, 382, 404, 0, 406, 0, 0,
	0, 408, 399, 0, 0, 394, 0, 393, 0, 0,
	402, 0, 0, -2, 0, 568, -2, -2, 680, 687,
	773, 366, 618, 620, 621, 724, 669, 666, 0, 653,
	636, 637, 703, 0, 0, 0, 0, 687, 683, 642,
	0, 648, 649, 460, 343, 32, 0, 202, 203, 787,
	0, 206, 209, 0, 211, 789, 196, 0, 222, 223,
	220, 0, 34, 35, 44, 50, 36, 42, 0, 0,
	0, 0, 0, 328, 329, 0, 0, 225, 0, 264,
	768, 0, 264, 0, 0, 0, 215, 0, 196, 225,
	0, 657, 659, 0, 405, 0, 424, 407, 0, 0,
	397, 0, 0, 411, -2, -2, 569, 682, 0, 366,
	0, 655, -2, 0, 0, 0, 685, 0, 200, 204,
	0, 0, 231, 0, 219, 0, 0, 52, 0, 271,
	273, 0, 314, 435, 316, 0, 196, 253, 254, 260,
	255, 261, 366, 225, 258, 186, 196, 0, 0, 0,
	0, 0, 395, 392, 409, 619, 672, 0, -2, 0,
	602, 647, 0, 210, 236, 0, 0, 0, 227, 38,
	0, 49, 0, 315, 0, 213, 264, 0, 196, 248,
	0, 660, 661, 423, 0, 0, 0, 0, 668, 603,
	0, 212, 232, 233, 0, 228, 229, 230, 788, 224,
	231, 0, 51, 435, 0, 256, 617, 214, 225, 415,
	665, 670, 673, -2, 898, 817, 0, 671, 205, 234,
	0, 235, 0, 0, 0, 236, 0, 313, 48, 196,
	0, 675, 676, 677, 678, 679, 237, 0, 240, 241,
	0, 238, 221, 226, 195, 249, 0, 239, 242, 243,
	674,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 283, 3, 289, 284, 3,
	294, 295, 287, 285, 298, 286, 296, 288, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 302, 297,
	277, 279, 278, 3, 299, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 292, 3, 293, 282, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 300, 281, 301, 291,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 280,
	57620, 290, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:698
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:704
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:710
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 17:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:733
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 24:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:743
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 25:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:749
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.qname(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 26:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:753
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.qname(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 27:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:759
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 28:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:763
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 29:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:770
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 30:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:775
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 31:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:780
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 32:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:785
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 33:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:790
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: sqlDollar[3].str, Default: sqlDollar[4].union.expr()}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:795
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: sqlDollar[3].str}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:799
		{
			unimplemented()
		}
	case 36:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:802
		{
			sqlVAL.union.val = &AlterTableDropColumn{columnKeyword: sqlDollar[2].union.bool(), IfExists: true, Column: sqlDollar[5].str}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:807
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        sqlDollar[3].str,
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:817
		{
		}
	case 39:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:820
		{
			sqlVAL.union.val = &AlterTableAddConstraint{ConstraintDef: sqlDollar[2].union.constraintDef()}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:824
		{
			unimplemented()
		}
	case 41:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:826
		{
			unimplemented()
		}
	case 42:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:829
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   sqlDollar[5].str,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 43:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:838
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   sqlDollar[3].str,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 44:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:848
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 45:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:852
		{
			sqlVAL.union.val = nil
		}
	case 46:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:858
		{
			sqlVAL.union.val = DropCascade
		}
	case 47:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:862
		{
			sqlVAL.union.val = DropRestrict
		}
	case 48:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:866
		{
			sqlVAL.union.val = DropDefault
		}
	case 49:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:871
		{
			unimplementedWithIssue(2473)
		}
	case 50:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:872
		{
		}
	case 51:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:875
		{
			unimplemented()
		}
	case 52:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:876
		{
		}
	case 56:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:887
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retExprs()}
		}
	case 57:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:894
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 58:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:898
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:902
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:910
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:918
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.qnames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:922
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.qnames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:928
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:932
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 65:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:938
		{
			sqlVAL.union.val = NewUnresolvedName(sqlDollar[1].str)
		}
	case 66:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:942
		{
			sqlVAL.union.val = NewUnresolvedNameWithSuffix(sqlDollar[1].str, sqlDollar[2].union.unresolvedName())
		}
	case 67:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:948
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:952
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 69:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:959
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 70:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:963
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 71:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:969
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 78:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:978
		{ /* SKIP DOC */
		}
	case 79:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:982
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:986
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 82:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:996
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1006
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 84:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1010
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 85:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1016
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 89:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1026
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1037
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 91:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1041
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 92:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1048
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1054
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1060
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1064
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1071
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: NameList(sqlDollar[6].union.strs()), Targets: sqlDollar[4].union.targetList()}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1078
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: NameList(sqlDollar[6].union.strs()), Targets: sqlDollar[4].union.targetList()}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1085
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.qnames()}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1089
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.qnames()}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1093
		{
			sqlVAL.union.val = TargetList{Databases: NameList(sqlDollar[2].union.strs())}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1100
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1103
		{
		}
	case 103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1107
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1111
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 105:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1118
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 106:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1122
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1126
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1130
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1134
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 110:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1138
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 111:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1142
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 112:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1150
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1154
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1162
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1166
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 116:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1170
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1174
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1177
		{ /* SKIP DOC */
		}
	case 119:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1183
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1189
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1196
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1200
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1204
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1208
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1215
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1221
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname(), Values: sqlDollar[3].union.exprs()}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1225
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname(), Values: sqlDollar[3].union.exprs()}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1229
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname()}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1233
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname()}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1240
		{
			unimplemented()
		}
	case 133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1243
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1246
		{
			unimplemented()
		}
	case 136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1253
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1257
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1265
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1271
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1275
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1279
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1283
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1287
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1293
		{
			sqlVAL.union.val = Low
		}
	case 147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1297
		{
			sqlVAL.union.val = Normal
		}
	case 148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1301
		{
			sqlVAL.union.val = High
		}
	case 149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1307
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1311
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1315
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1330
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1334
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1338
		{
			d, err := ParseDInterval(sqlDollar[2].str)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1348
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1352
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1357
		{
			unimplemented()
		}
	case 160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1358
		{
			unimplemented()
		}
	case 161:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1359
		{
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1363
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1367
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1373
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1377
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1381
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.qname()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1385
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1389
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.strs()}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1393
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1397
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1401
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.qname()}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1405
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.qname()}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1409
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1413
		{
			sqlVAL.union.val = &ShowTables{Database: &DatabaseName{Name: Name(sqlDollar[4].str)}}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1417
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1421
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1425
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1429
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1433
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 180:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1437
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.qname()}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1443
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 182:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1448
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1454
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 184:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1458
		{
			sqlVAL.union.val = []string(nil)
		}
	case 185:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1465
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.qname(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs()}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1469
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.qname(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs()}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1476
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1482
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1486
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 191:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1492
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1498
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 195:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1504
		{
			/* SKIP DOC */
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NewUnresolvedName(sqlDollar[4].str),
				Fields:       sqlDollar[6].union.strs(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1512
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1518
		{
			sqlVAL.union.val = newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
		}
	case 198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1524
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 199:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1528
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1534
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1538
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1541
		{
			unimplemented()
		}
	case 203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1543
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1547
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1551
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1569
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1573
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1577
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1581
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1585
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1589
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1593
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.qname(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1602
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.strs(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1611
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.strs(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1624
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.famElems(),
			}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1636
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 217:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1641
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 218:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1647
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1653
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    NameListToIndexElems(sqlDollar[3].union.strs()),
					Storing:    sqlDollar[5].union.strs(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1663
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[4].union.strs()),
				},
				PrimaryKey: true,
			}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1673
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.qname(),
				FromCols: sqlDollar[4].union.strs(),
				ToCols:   sqlDollar[8].union.strs(),
			}
		}
	case 224:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1696
		{
			sqlVAL.union.val = sqlDollar[3].union.strs()
		}
	case 225:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1700
		{
			sqlVAL.union.val = []string(nil)
		}
	case 226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1706
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 227:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1710
		{
			sqlVAL.union.val = []string(nil)
		}
	case 228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1715
		{
			unimplemented()
		}
	case 229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1716
		{
			unimplemented()
		}
	case 230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1717
		{
			unimplemented()
		}
	case 231:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1718
		{
		}
	case 232:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1725
		{
			unimplemented()
		}
	case 233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1726
		{
			unimplemented()
		}
	case 234:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1727
		{
			unimplemented()
		}
	case 235:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1728
		{
			unimplemented()
		}
	case 236:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1729
		{
		}
	case 237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1732
		{
			unimplemented()
		}
	case 238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1735
		{
			unimplemented()
		}
	case 239:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1738
		{
			unimplemented()
		}
	case 240:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1739
		{
			unimplemented()
		}
	case 241:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1740
		{
			unimplemented()
		}
	case 242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1741
		{
			unimplemented()
		}
	case 243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1742
		{
			unimplemented()
		}
	case 244:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1746
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 245:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1750
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1754
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 247:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1761
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.qnames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 248:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:1768
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.qname(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.strs(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 249:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:1779
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.qname(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.strs(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1793
		{
			sqlVAL.union.val = true
		}
	case 251:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1797
		{
			sqlVAL.union.val = false
		}
	case 252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1803
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1807
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1816
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1819
		{
			unimplemented()
		}
	case 256:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1820
		{
			unimplemented()
		}
	case 257:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1824
		{
			sqlVAL.union.val = FamilyElemList{sqlDollar[1].union.famElem()}
		}
	case 258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1828
		{
			sqlVAL.union.val = append(sqlDollar[1].union.famElems(), sqlDollar[3].union.famElem())
		}
	case 259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1834
		{
			sqlVAL.union.val = FamilyElem{Column: Name(sqlDollar[1].str)}
		}
	case 260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1839
		{
			unimplemented()
		}
	case 261:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1840
		{
		}
	case 262:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1844
		{
			sqlVAL.union.val = Ascending
		}
	case 263:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1848
		{
			sqlVAL.union.val = Descending
		}
	case 264:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1852
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 265:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1859
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1863
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.qname(), NewName: sqlDollar[6].union.qname(), IfExists: false}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1867
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.qname(), NewName: sqlDollar[8].union.qname(), IfExists: true}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1871
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1875
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1879
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.qname(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1883
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.qname(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1887
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 273:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1891
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 274:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1897
		{
			sqlVAL.union.val = true
		}
	case 275:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1901
		{
			sqlVAL.union.val = false
		}
	case 276:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1906
		{
		}
	case 277:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1907
		{
		}
	case 278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1911
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1917
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1924
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1928
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1932
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1936
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1940
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1949
		{
		}
	case 286:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1950
		{
		}
	case 287:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1954
		{
			sqlVAL.str = ""
		}
	case 288:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1958
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1962
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 290:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1966
		{
			sqlVAL.str = ""
		}
	case 291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1972
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 292:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1976
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 293:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1982
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1986
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1990
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1994
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1998
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2004
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 299:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2010
		{
			sqlVAL.union.val = &CreateDatabase{Name: Name(sqlDollar[3].str), Encoding: sqlDollar[4].union.strVal()}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2014
		{
			sqlVAL.union.val = &CreateDatabase{IfNotExists: true, Name: Name(sqlDollar[6].str), Encoding: sqlDollar[7].union.strVal()}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2020
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2023
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 303:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2033
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retExprs()
		}
	case 304:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2039
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
		}
	case 305:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2044
		{
			unimplementedWithIssue(6637)
		}
	case 306:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2046
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2051
		{
			unimplementedWithIssue(6637)
		}
	case 308:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2059
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname()}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2063
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2069
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2073
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.qnames(), Rows: sqlDollar[4].union.slct()}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2077
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2083
		{
			sqlVAL.union.val = &OnConflict{Columns: NameList(sqlDollar[3].union.strs()), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2087
		{
			sqlVAL.union.val = &OnConflict{Columns: NameList(sqlDollar[3].union.strs()), DoNothing: true}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2093
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2097
		{
			unimplemented()
		}
	case 317:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2099
		{
			sqlVAL.union.val = []string(nil)
		}
	case 318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2105
		{
			sqlVAL.union.val = sqlDollar[2].union.selExprs()
		}
	case 319:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2109
		{
			sqlVAL.union.val = SelectExprs(nil)
		}
	case 320:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2116
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retExprs()}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2122
		{
			unimplementedWithIssue(7841)
		}
	case 322:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2123
		{
		}
	case 323:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2127
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2131
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 327:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2141
		{
			sqlVAL.union.val = &UpdateExpr{Names: QualifiedNames{sqlDollar[1].union.qname()}, Expr: sqlDollar[3].union.expr()}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2153
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.qnames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2157
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.qnames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2201
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2207
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2211
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2226
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2230
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2234
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2238
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2242
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2246
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2280
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.tblExprs(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2292
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.tblExprs(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2304
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        TableExprs{&AliasedTableExpr{Expr: sqlDollar[2].union.qname()}},
				tableSelect: true,
			}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2312
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2321
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2330
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2348
		{
			unimplemented()
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2349
		{
			unimplemented()
		}
	case 351:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2350
		{
			unimplemented()
		}
	case 352:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2353
		{
			unimplemented()
		}
	case 353:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2354
		{
			unimplemented()
		}
	case 354:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2357
		{
			unimplemented()
		}
	case 355:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2360
		{
			unimplemented()
		}
	case 356:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2361
		{
		}
	case 357:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2364
		{
		}
	case 358:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2365
		{
		}
	case 359:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2369
		{
			sqlVAL.union.val = true
		}
	case 360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2373
		{
			sqlVAL.union.val = false
		}
	case 361:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2377
		{
			sqlVAL.union.val = false
		}
	case 362:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2383
		{
			sqlVAL.union.val = true
		}
	case 363:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2388
		{
		}
	case 364:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2389
		{
		}
	case 365:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2393
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 366:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2397
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 367:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2403
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 368:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2409
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2413
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2419
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2427
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2436
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2447
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2460
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2467
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2474
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 380:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2488
		{
		}
	case 381:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2489
		{
		}
	case 382:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2515
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 383:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2519
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2525
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 385:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2529
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 386:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2535
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2539
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2551
		{
			sqlVAL.union.val = sqlDollar[2].union.tblExprs()
		}
	case 389:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2555
		{
			sqlVAL.union.val = TableExprs(nil)
		}
	case 390:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2561
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2565
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 392:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2571
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2576
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2582
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 395:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2587
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			index := a.Index
			if index == "" {
				index = b.Index
			} else if b.Index != "" {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			noIndexJoin := a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = &IndexHints{Index: index, NoIndexJoin: noIndexJoin}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2607
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2611
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 398:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2615
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 399:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2622
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), Hints: sqlDollar[2].union.indexHints(), As: sqlDollar[3].union.aliasClause(), AsOf: sqlDollar[4].union.asOfClause()}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2626
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, As: sqlDollar[2].union.aliasClause()}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2630
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 402:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2634
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[2].union.tblExpr(), As: sqlDollar[4].union.aliasClause()}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2654
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2658
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2662
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2666
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2670
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2674
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2680
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: NameList(sqlDollar[4].union.strs())}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2684
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2688
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: NameList(sqlDollar[3].union.strs())}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2692
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2699
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2705
		{
			sqlVAL.union.val = AsOfClause{Expr: &StrVal{s: sqlDollar[5].str}}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2709
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2715
		{
			sqlVAL.str = astFullJoin
		}
	case 418:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2719
		{
			sqlVAL.str = astLeftJoin
		}
	case 419:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2723
		{
			sqlVAL.str = astRightJoin
		}
	case 420:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2727
		{
			sqlVAL.str = astInnerJoin
		}
	case 421:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2733
		{
		}
	case 422:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2734
		{
		}
	case 423:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2745
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: NameList(sqlDollar[3].union.strs())}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2749
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2755
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 426:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2759
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 427:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2763
		{
			sqlVAL.union.val = sqlDollar[2].union.qname()
		}
	case 428:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2767
		{
			sqlVAL.union.val = sqlDollar[3].union.qname()
		}
	case 429:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2773
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2777
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 431:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2790
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname()}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2794
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2798
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2804
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 435:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2808
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 436:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2820
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 437:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2824
		{
			unimplementedWithIssue(2115)
		}
	case 438:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2825
		{
			unimplementedWithIssue(2115)
		}
	case 439:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2828
		{
			unimplementedWithIssue(2115)
		}
	case 440:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2829
		{
			unimplementedWithIssue(2115)
		}
	case 441:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2830
		{
		}
	case 447:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2838
		{
			unimplemented()
		}
	case 448:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2840
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 449:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2844
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 450:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2848
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 451:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2852
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 452:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2856
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 453:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2860
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 454:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2864
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 459:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2885
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2894
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2908
		{
			sqlVAL.union.val = nil
		}
	case 462:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2915
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 463:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2919
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 464:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2923
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 465:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2927
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 466:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2931
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 467:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2935
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 468:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2939
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newFloatColType(int(prec))
		}
	case 469:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2948
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 470:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2952
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2961
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2970
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2979
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2983
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 475:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2989
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 476:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2993
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3011
		{
			n, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newIntBitType(int(n))
		}
	case 482:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3022
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 487:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3038
		{
			n, err := sqlDollar[3].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3054
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 489:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3060
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 490:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3064
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 491:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3068
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 492:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3072
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 493:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3077
		{
		}
	case 494:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3078
		{
		}
	case 495:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3083
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 496:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3087
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 497:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3091
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 498:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3095
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 499:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3099
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 500:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3104
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 501:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3109
		{
			unimplemented()
		}
	case 502:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3110
		{
			unimplemented()
		}
	case 503:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3111
		{
			unimplemented()
		}
	case 504:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3112
		{
			unimplemented()
		}
	case 505:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3113
		{
			unimplemented()
		}
	case 506:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3114
		{
			unimplemented()
		}
	case 507:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3115
		{
			unimplemented()
		}
	case 508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3116
		{
			unimplemented()
		}
	case 509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3117
		{
			unimplemented()
		}
	case 510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3118
		{
			unimplemented()
		}
	case 511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3119
		{
			unimplemented()
		}
	case 512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3120
		{
			unimplemented()
		}
	case 513:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3121
		{
			unimplemented()
		}
	case 514:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3122
		{
		}
	case 515:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3125
		{
			unimplemented()
		}
	case 516:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3126
		{
			unimplemented()
		}
	case 518:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3150
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3158
		{
			unimplemented()
		}
	case 520:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3159
		{
			unimplemented()
		}
	case 521:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3168
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3172
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3176
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3180
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3184
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3188
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3192
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3196
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3200
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3204
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3208
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3212
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3216
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3220
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3224
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3228
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3232
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3236
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3240
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3244
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3248
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3252
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3256
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3260
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3264
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3268
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3272
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3276
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3280
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3284
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3288
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3292
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3296
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3300
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3304
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3308
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3312
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3316
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3319
		{
			unimplemented()
		}
	case 560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3321
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3325
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3329
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3333
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3337
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3341
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3345
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3349
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3353
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3357
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3361
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3365
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3369
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3373
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3377
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3381
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3398
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3407
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3411
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3415
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3419
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3423
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3427
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3431
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3435
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3439
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3443
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3447
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3451
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3455
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3459
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3463
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3467
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3471
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3475
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3479
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3483
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3487
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3491
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3495
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3499
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3503
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3507
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3519
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 606:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3524
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3528
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3534
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3538
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3542
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3548
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 614:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3552
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 615:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3556
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 616:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3564
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname()}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3568
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3571
		{
			unimplemented()
		}
	case 619:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3572
		{
			unimplemented()
		}
	case 620:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3574
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Type: All, Exprs: sqlDollar[4].union.exprs()}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3578
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Type: Distinct, Exprs: sqlDollar[4].union.exprs()}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3582
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Exprs: Exprs{StarExpr()}}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3595
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 624:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3599
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 625:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3608
		{
			unimplemented()
		}
	case 626:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3609
		{
			unimplemented()
		}
	case 627:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3613
		{
			unimplemented()
		}
	case 628:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3615
		{
			sqlVAL.union.val = &FuncExpr{Name: NewQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3619
		{
			sqlVAL.union.val = &FuncExpr{Name: NewQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3623
		{
			sqlVAL.union.val = &FuncExpr{Name: NewQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3627
		{
			sqlVAL.union.val = &FuncExpr{Name: NewQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3630
		{
			unimplemented()
		}
	case 633:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3631
		{
			unimplemented()
		}
	case 634:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3632
		{
			unimplemented()
		}
	case 635:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3633
		{
			unimplemented()
		}
	case 636:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3635
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3639
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3643
		{
			sqlVAL.union.val = &FuncExpr{Name: NewQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3647
		{
			sqlVAL.union.val = &OverlayExpr{FuncExpr{Name: NewQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3651
		{
			sqlVAL.union.val = &FuncExpr{Name: NewQualifiedFunctionName("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3655
		{
			sqlVAL.union.val = &FuncExpr{Name: NewQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3658
		{
			unimplemented()
		}
	case 643:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3660
		{
			sqlVAL.union.val = &FuncExpr{Name: NewQualifiedFunctionName("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3664
		{
			sqlVAL.union.val = &FuncExpr{Name: NewQualifiedFunctionName("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3668
		{
			sqlVAL.union.val = &FuncExpr{Name: NewQualifiedFunctionName("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3672
		{
			sqlVAL.union.val = &FuncExpr{Name: NewQualifiedFunctionName("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3676
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3680
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3684
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3688
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3692
		{
			sqlVAL.union.val = &FuncExpr{Name: NewQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3696
		{
			sqlVAL.union.val = &FuncExpr{Name: NewQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3702
		{
			unimplemented()
		}
	case 654:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3703
		{
		}
	case 655:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3706
		{
			unimplemented()
		}
	case 656:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3707
		{
		}
	case 657:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3711
		{
			unimplemented()
		}
	case 658:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3712
		{
		}
	case 659:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3715
		{
			unimplemented()
		}
	case 660:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3716
		{
			unimplemented()
		}
	case 661:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3719
		{
			unimplemented()
		}
	case 662:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3722
		{
			unimplemented()
		}
	case 663:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3723
		{
			unimplemented()
		}
	case 664:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3724
		{
		}
	case 665:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3728
		{
			unimplemented()
		}
	case 666:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3739
		{
			unimplemented()
		}
	case 667:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3740
		{
		}
	case 668:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3743
		{
			unimplemented()
		}
	case 669:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3744
		{
		}
	case 670:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3752
		{
			unimplemented()
		}
	case 671:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3753
		{
			unimplemented()
		}
	case 672:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3754
		{
		}
	case 673:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3757
		{
			unimplemented()
		}
	case 674:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3758
		{
			unimplemented()
		}
	case 675:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3764
		{
			unimplemented()
		}
	case 676:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3765
		{
			unimplemented()
		}
	case 677:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3766
		{
			unimplemented()
		}
	case 678:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3767
		{
			unimplemented()
		}
	case 679:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3768
		{
			unimplemented()
		}
	case 680:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3779
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3783
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3787
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3793
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3797
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3803
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3846
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3850
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 688:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3856
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3860
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 690:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3866
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3870
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3874
		{
			sqlVAL.union.val = &Array{nil}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3880
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3884
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 695:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3890
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3912
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3916
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3922
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 706:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3929
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3933
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 708:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3950
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3954
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3958
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3962
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3966
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 713:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3970
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 714:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3976
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 715:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3982
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 716:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3988
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 717:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3992
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 718:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3996
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 719:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4002
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4006
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4017
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4024
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4028
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 724:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4034
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4040
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 726:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4044
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 728:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4051
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 729:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4057
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 730:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4061
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 731:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4065
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4069
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr()}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4075
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 734:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4081
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4087
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4091
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 737:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4096
		{
		}
	case 738:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4097
		{
		}
	case 740:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4106
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4112
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4116
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 743:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4125
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 744:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4131
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4135
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 746:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4141
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4150
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4154
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4158
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 750:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4166
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4170
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 752:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4176
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4180
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 754:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4186
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4190
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 756:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4201
		{
			sqlVAL.union.val = NewUnresolvedName(sqlDollar[1].str)
		}
	case 757:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4205
		{
			sqlVAL.union.val = NewUnresolvedNameWithSuffix(sqlDollar[1].str, sqlDollar[2].union.unresolvedName())
		}
	case 758:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4211
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.qname(), Index: Name(sqlDollar[3].str)}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4222
		{
			sqlVAL.union.val = NewUnresolvedName(sqlDollar[1].str)
		}
	case 760:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4226
		{
			sqlVAL.union.val = NewUnresolvedCompoundName(sqlDollar[1].str, sqlDollar[2].union.namePart())
		}
	case 761:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4230
		{
			sqlVAL.union.val = NewUnresolvedCompoundName(sqlDollar[1].str, sqlDollar[2].union.namePart())
		}
	case 762:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4234
		{
			sqlVAL.union.val = &QualifiedName{Target: UnresolvedName{UnqualifiedStar{}}}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4240
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4244
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 765:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4250
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 766:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4253
		{
		}
	case 767:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4263
		{
			sqlVAL.union.val = NewUnresolvedName(sqlDollar[1].str)
		}
	case 768:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4267
		{
			sqlVAL.union.val = NewUnresolvedNameWithSuffix(sqlDollar[1].str, sqlDollar[2].union.unresolvedName())
		}
	case 769:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4274
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 770:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4278
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 771:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4282
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4286
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4289
		{
			unimplemented()
		}
	case 774:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4291
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4295
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4299
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[5].str}, Type: sqlDollar[1].union.colType()}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4303
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 778:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4307
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 779:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4311
		{
			sqlVAL.union.val = DNull
		}
	case 781:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4318
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 782:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4322
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4344
		{
			sqlVAL.str = ""
		}
	case 788:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4350
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 789:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4354
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
