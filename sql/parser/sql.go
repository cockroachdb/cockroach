// Code generated by go yacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"go/constant"
	"go/token"

	"github.com/pkg/errors"

	"github.com/cockroachdb/cockroach/sql/privilege"
	"github.com/cockroachdb/cockroach/util"
)

var errUnimplemented = errors.New("unimplemented")

func unimplemented() {
	panic(errUnimplemented)
}

func unimplementedWithIssue(issue int) {
	panic(util.UnimplementedWithIssueErrorf(issue, ""))
}

//line sql.y:44

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new sytax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in two forms, depending on the
// type of the value being accessed. Values and pointers are directly
// type asserted from the empty interface, meaning that they will panic
// if the type assertion is incorrect. Interfaces are handled differently
// because a nil instance of an interface inserted into the empty interface
// becomes a nil instance of the empty interface and therefore will fail a
// direct type assertion. Instead, a guarded type assertion must be used,
// which returns nil if the type assertion fails.
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	return u.val.(*StrVal)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	if namePart, ok := u.val.(NamePart); ok {
		return namePart
	}
	return nil
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionName() FunctionName {
	return u.val.(FunctionName)
}
func (u *sqlSymUnion) normalizableFunctionName() NormalizableFunctionName {
	return NormalizableFunctionName{u.val.(FunctionName)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	if selectStmt, ok := u.val.(*Select); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	if selectStmt, ok := u.val.(SelectStatement); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	if constraintDef, ok := u.val.(ConstraintTableDef); ok {
		return constraintDef
	}
	return nil
}
func (u *sqlSymUnion) tblDef() TableDef {
	if tblDef, ok := u.val.(TableDef); ok {
		return tblDef
	}
	return nil
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	if colQual, ok := u.val.(NamedColumnQualification); ok {
		return colQual
	}
	return NamedColumnQualification{}
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	if colQual, ok := u.val.(ColumnQualification); ok {
		return colQual
	}
	return nil
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retExprs() ReturningExprs {
	return ReturningExprs(u.val.(SelectExprs))
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	if tblExpr, ok := u.val.(TableExpr); ok {
		return tblExpr
	}
	return nil
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	if joinCond, ok := u.val.(JoinCond); ok {
		return joinCond
	}
	return nil
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	if alterTableCmd, ok := u.val.(AlterTableCmd); ok {
		return alterTableCmd
	}
	return nil
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}

//line sql.y:309
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const DOT_DOT = 57353
const LESS_EQUALS = 57354
const GREATER_EQUALS = 57355
const NOT_EQUALS = 57356
const NOT_REGMATCH = 57357
const REGIMATCH = 57358
const NOT_REGIMATCH = 57359
const ERROR = 57360
const ACTION = 57361
const ADD = 57362
const ALL = 57363
const ALTER = 57364
const ANALYSE = 57365
const ANALYZE = 57366
const AND = 57367
const ANY = 57368
const ANNOTATE_TYPE = 57369
const ARRAY = 57370
const AS = 57371
const ASC = 57372
const ASYMMETRIC = 57373
const AT = 57374
const BEGIN = 57375
const BETWEEN = 57376
const BIGINT = 57377
const BIGSERIAL = 57378
const BIT = 57379
const BLOB = 57380
const BOOL = 57381
const BOOLEAN = 57382
const BOTH = 57383
const BY = 57384
const BYTEA = 57385
const BYTES = 57386
const CASCADE = 57387
const CASE = 57388
const CAST = 57389
const CHAR = 57390
const CHARACTER = 57391
const CHARACTERISTICS = 57392
const CHECK = 57393
const COALESCE = 57394
const COLLATE = 57395
const COLLATION = 57396
const COLUMN = 57397
const COLUMNS = 57398
const COMMIT = 57399
const COMMITTED = 57400
const CONCAT = 57401
const CONFLICT = 57402
const CONSTRAINT = 57403
const CONSTRAINTS = 57404
const COPY = 57405
const COVERING = 57406
const CREATE = 57407
const CROSS = 57408
const CUBE = 57409
const CURRENT = 57410
const CURRENT_CATALOG = 57411
const CURRENT_DATE = 57412
const CURRENT_ROLE = 57413
const CURRENT_TIME = 57414
const CURRENT_TIMESTAMP = 57415
const CURRENT_USER = 57416
const CYCLE = 57417
const DATA = 57418
const DATABASE = 57419
const DATABASES = 57420
const DATE = 57421
const DAY = 57422
const DEC = 57423
const DECIMAL = 57424
const DEFAULT = 57425
const DEALLOCATE = 57426
const DEFERRABLE = 57427
const DELETE = 57428
const DESC = 57429
const DISTINCT = 57430
const DO = 57431
const DOUBLE = 57432
const DROP = 57433
const ELSE = 57434
const ENCODING = 57435
const END = 57436
const ESCAPE = 57437
const EXCEPT = 57438
const EXISTS = 57439
const EXECUTE = 57440
const EXPLAIN = 57441
const EXTRACT = 57442
const FALSE = 57443
const FAMILY = 57444
const FETCH = 57445
const FILTER = 57446
const FIRST = 57447
const FLOAT = 57448
const FLOORDIV = 57449
const FOLLOWING = 57450
const FOR = 57451
const FORCE_INDEX = 57452
const FOREIGN = 57453
const FROM = 57454
const FULL = 57455
const GRANT = 57456
const GRANTS = 57457
const GREATEST = 57458
const GROUP = 57459
const GROUPING = 57460
const HAVING = 57461
const HIGH = 57462
const HOUR = 57463
const IF = 57464
const IFNULL = 57465
const ILIKE = 57466
const IN = 57467
const INTERLEAVE = 57468
const INDEX = 57469
const INDEXES = 57470
const INITIALLY = 57471
const INNER = 57472
const INSERT = 57473
const INT = 57474
const INT64 = 57475
const INTEGER = 57476
const INTERSECT = 57477
const INTERVAL = 57478
const INTO = 57479
const IS = 57480
const ISOLATION = 57481
const JOIN = 57482
const KEY = 57483
const KEYS = 57484
const LATERAL = 57485
const LEADING = 57486
const LEAST = 57487
const LEFT = 57488
const LEVEL = 57489
const LIKE = 57490
const LIMIT = 57491
const LOCAL = 57492
const LOCALTIME = 57493
const LOCALTIMESTAMP = 57494
const LOW = 57495
const LSHIFT = 57496
const MATCH = 57497
const MINUTE = 57498
const MONTH = 57499
const NAME = 57500
const NAMES = 57501
const NATURAL = 57502
const NEXT = 57503
const NO = 57504
const NO_INDEX_JOIN = 57505
const NORMAL = 57506
const NOT = 57507
const NOTHING = 57508
const NULL = 57509
const NULLIF = 57510
const NULLS = 57511
const NUMERIC = 57512
const OF = 57513
const OFF = 57514
const OFFSET = 57515
const ON = 57516
const ONLY = 57517
const OR = 57518
const ORDER = 57519
const ORDINALITY = 57520
const OUT = 57521
const OUTER = 57522
const OVER = 57523
const OVERLAPS = 57524
const OVERLAY = 57525
const PARENT = 57526
const PARTIAL = 57527
const PARTITION = 57528
const PLACING = 57529
const POSITION = 57530
const PRECEDING = 57531
const PRECISION = 57532
const PREPARE = 57533
const PRIMARY = 57534
const PRIORITY = 57535
const RANGE = 57536
const READ = 57537
const REAL = 57538
const RECURSIVE = 57539
const REF = 57540
const REFERENCES = 57541
const RENAME = 57542
const REPEATABLE = 57543
const RELEASE = 57544
const RESTRICT = 57545
const RETURNING = 57546
const REVOKE = 57547
const RIGHT = 57548
const ROLLBACK = 57549
const ROLLUP = 57550
const ROW = 57551
const ROWS = 57552
const RSHIFT = 57553
const SAVEPOINT = 57554
const SEARCH = 57555
const SECOND = 57556
const SELECT = 57557
const SERIAL = 57558
const SERIALIZABLE = 57559
const SESSION = 57560
const SESSION_USER = 57561
const SET = 57562
const SHOW = 57563
const SIMILAR = 57564
const SIMPLE = 57565
const SMALLINT = 57566
const SMALLSERIAL = 57567
const SNAPSHOT = 57568
const SOME = 57569
const SQL = 57570
const START = 57571
const STDIN = 57572
const STRICT = 57573
const STRING = 57574
const STORING = 57575
const SUBSTRING = 57576
const SYMMETRIC = 57577
const SYSTEM = 57578
const TABLE = 57579
const TABLES = 57580
const TEXT = 57581
const THEN = 57582
const TIME = 57583
const TIMESTAMP = 57584
const TIMESTAMPTZ = 57585
const TO = 57586
const TRAILING = 57587
const TRANSACTION = 57588
const TREAT = 57589
const TRIM = 57590
const TRUE = 57591
const TRUNCATE = 57592
const TYPE = 57593
const UNBOUNDED = 57594
const UNCOMMITTED = 57595
const UNION = 57596
const UNIQUE = 57597
const UNKNOWN = 57598
const UPDATE = 57599
const UPSERT = 57600
const USER = 57601
const USING = 57602
const VALID = 57603
const VALIDATE = 57604
const VALUE = 57605
const VALUES = 57606
const VARCHAR = 57607
const VARIADIC = 57608
const VARYING = 57609
const WHEN = 57610
const WHERE = 57611
const WINDOW = 57612
const WITH = 57613
const WITHIN = 57614
const WITHOUT = 57615
const YEAR = 57616
const ZONE = 57617
const NOT_LA = 57618
const WITH_LA = 57619
const AS_LA = 57620
const POSTFIXOP = 57621
const UMINUS = 57622

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPLAIN",
	"EXTRACT",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HOUR",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SQL",
	"START",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:4693

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 25,
	299, 25,
	-2, 357,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 40,
	1, 332,
	174, 332,
	204, 332,
	297, 332,
	299, 332,
	-2, 342,
	-1, 53,
	1, 335,
	174, 335,
	204, 335,
	297, 335,
	299, 335,
	-2, 341,
	-1, 62,
	1, 25,
	299, 25,
	-2, 357,
	-1, 277,
	1, 165,
	299, 165,
	-2, 852,
	-1, 310,
	149, 367,
	173, 367,
	-2, 338,
	-1, 313,
	149, 366,
	173, 366,
	-2, 336,
	-1, 442,
	149, 366,
	173, 366,
	-2, 339,
	-1, 498,
	296, 791,
	-2, 784,
	-1, 499,
	296, 792,
	-2, 785,
	-1, 505,
	5, 501,
	296, 501,
	-2, 940,
	-1, 528,
	5, 467,
	-2, 916,
	-1, 529,
	5, 495,
	296, 495,
	-2, 918,
	-1, 530,
	5, 475,
	-2, 919,
	-1, 531,
	5, 474,
	-2, 920,
	-1, 532,
	5, 495,
	296, 495,
	-2, 923,
	-1, 533,
	5, 495,
	296, 495,
	-2, 924,
	-1, 534,
	5, 496,
	-2, 927,
	-1, 535,
	5, 462,
	-2, 928,
	-1, 536,
	5, 462,
	-2, 929,
	-1, 537,
	5, 477,
	-2, 932,
	-1, 538,
	5, 463,
	-2, 937,
	-1, 539,
	5, 464,
	-2, 938,
	-1, 540,
	5, 465,
	-2, 939,
	-1, 541,
	5, 462,
	-2, 943,
	-1, 542,
	5, 468,
	-2, 948,
	-1, 543,
	5, 466,
	-2, 951,
	-1, 544,
	5, 493,
	296, 493,
	-2, 953,
	-1, 545,
	5, 497,
	-2, 956,
	-1, 546,
	5, 499,
	-2, 957,
	-1, 547,
	5, 492,
	296, 492,
	-2, 961,
	-1, 867,
	96, 342,
	135, 342,
	149, 342,
	173, 342,
	177, 342,
	254, 342,
	-2, 611,
	-1, 875,
	296, 769,
	-2, 758,
	-1, 1066,
	12, 0,
	13, 0,
	14, 0,
	279, 0,
	280, 0,
	281, 0,
	-2, 535,
	-1, 1067,
	12, 0,
	13, 0,
	14, 0,
	279, 0,
	280, 0,
	281, 0,
	-2, 536,
	-1, 1068,
	12, 0,
	13, 0,
	14, 0,
	279, 0,
	280, 0,
	281, 0,
	-2, 537,
	-1, 1072,
	12, 0,
	13, 0,
	14, 0,
	279, 0,
	280, 0,
	281, 0,
	-2, 541,
	-1, 1073,
	12, 0,
	13, 0,
	14, 0,
	279, 0,
	280, 0,
	281, 0,
	-2, 542,
	-1, 1074,
	12, 0,
	13, 0,
	14, 0,
	279, 0,
	280, 0,
	281, 0,
	-2, 543,
	-1, 1077,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	124, 0,
	125, 0,
	148, 0,
	222, 0,
	276, 0,
	-2, 548,
	-1, 1083,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	124, 0,
	125, 0,
	148, 0,
	222, 0,
	276, 0,
	-2, 550,
	-1, 1086,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	124, 0,
	125, 0,
	148, 0,
	222, 0,
	276, 0,
	-2, 555,
	-1, 1087,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	124, 0,
	125, 0,
	148, 0,
	222, 0,
	276, 0,
	-2, 556,
	-1, 1088,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	124, 0,
	125, 0,
	148, 0,
	222, 0,
	276, 0,
	-2, 557,
	-1, 1113,
	182, 682,
	-2, 685,
	-1, 1277,
	96, 342,
	135, 342,
	149, 342,
	173, 342,
	177, 342,
	254, 342,
	-2, 415,
	-1, 1281,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	124, 0,
	125, 0,
	148, 0,
	222, 0,
	276, 0,
	-2, 549,
	-1, 1282,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	124, 0,
	125, 0,
	148, 0,
	222, 0,
	276, 0,
	-2, 551,
	-1, 1287,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	124, 0,
	125, 0,
	148, 0,
	222, 0,
	276, 0,
	-2, 552,
	-1, 1305,
	182, 681,
	-2, 684,
	-1, 1463,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	124, 0,
	125, 0,
	148, 0,
	222, 0,
	276, 0,
	-2, 553,
	-1, 1468,
	138, 0,
	-2, 567,
	-1, 1476,
	182, 683,
	-2, 686,
	-1, 1509,
	12, 0,
	13, 0,
	14, 0,
	279, 0,
	280, 0,
	281, 0,
	-2, 592,
	-1, 1510,
	12, 0,
	13, 0,
	14, 0,
	279, 0,
	280, 0,
	281, 0,
	-2, 593,
	-1, 1511,
	12, 0,
	13, 0,
	14, 0,
	279, 0,
	280, 0,
	281, 0,
	-2, 594,
	-1, 1515,
	12, 0,
	13, 0,
	14, 0,
	279, 0,
	280, 0,
	281, 0,
	-2, 598,
	-1, 1516,
	12, 0,
	13, 0,
	14, 0,
	279, 0,
	280, 0,
	281, 0,
	-2, 599,
	-1, 1517,
	12, 0,
	13, 0,
	14, 0,
	279, 0,
	280, 0,
	281, 0,
	-2, 600,
	-1, 1618,
	138, 0,
	-2, 568,
	-1, 1621,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	124, 0,
	125, 0,
	148, 0,
	222, 0,
	276, 0,
	-2, 571,
	-1, 1622,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	124, 0,
	125, 0,
	148, 0,
	222, 0,
	276, 0,
	-2, 573,
	-1, 1708,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	124, 0,
	125, 0,
	148, 0,
	222, 0,
	276, 0,
	-2, 572,
	-1, 1709,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	124, 0,
	125, 0,
	148, 0,
	222, 0,
	276, 0,
	-2, 574,
	-1, 1716,
	138, 0,
	-2, 601,
	-1, 1761,
	138, 0,
	-2, 602,
	-1, 1814,
	34, 0,
	124, 0,
	148, 0,
	222, 0,
	276, 0,
	-2, 915,
}

const sqlNprod = 1055
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 23995

var sqlAct = [...]int{

	499, 1813, 675, 1793, 1431, 1837, 1767, 1794, 950, 1812,
	1661, 1795, 958, 1162, 1584, 1487, 497, 1039, 1696, 688,
	819, 581, 1610, 347, 496, 1684, 39, 69, 1546, 489,
	797, 1048, 1604, 70, 69, 69, 69, 314, 548, 69,
	870, 1585, 69, 1597, 335, 689, 1020, 1274, 1023, 1442,
	69, 1207, 1308, 1273, 1452, 1360, 1022, 69, 69, 1264,
	461, 69, 800, 1047, 69, 69, 69, 1359, 989, 959,
	872, 563, 930, 1159, 921, 278, 1258, 1123, 1099, 18,
	1096, 560, 319, 1051, 321, 52, 24, 14, 982, 751,
	973, 430, 491, 1015, 7, 815, 735, 1049, 565, 471,
	577, 348, 462, 349, 431, 732, 902, 313, 346, 906,
	9, 359, 239, 8, 366, 361, 6, 52, 4, 244,
	243, 762, 362, 237, 1026, 324, 821, 245, 444, 445,
	952, 53, 446, 731, 753, 749, 265, 54, 256, 668,
	275, 322, 355, 246, 951, 449, 241, 52, 1272, 240,
	1703, 242, 677, 1704, 1844, 677, 986, 1043, 332, 677,
	1829, 338, 1810, 1043, 1801, 1683, 1791, 1043, 1786, 979,
	318, 1043, 318, 1303, 1763, 1218, 550, 979, 1304, 1757,
	1747, 341, 1043, 1683, 311, 1737, 303, 955, 1043, 992,
	310, 1710, 549, 1707, 979, 1693, 1043, 987, 1683, 326,
	824, 574, 843, 844, 845, 853, 854, 855, 1691, 1682,
	1666, 1043, 1683, 1043, 1665, 846, 1643, 1043, 1623, 992,
	1620, 992, 826, 979, 857, 1558, 1472, 1417, 1043, 992,
	947, 1751, 988, 985, 69, 69, 69, 69, 1411, 369,
	1262, 947, 1331, 825, 1348, 1349, 1350, 1377, 1375, 840,
	1378, 992, 69, 1374, 1373, 1305, 992, 992, 992, 824,
	1686, 1302, 1261, 1219, 822, 319, 992, 69, 823, 1261,
	69, 69, 370, 1044, 1522, 1475, 1043, 371, 58, 1001,
	991, 826, 992, 992, 978, 946, 918, 979, 947, 917,
	990, 1345, 1244, 1307, 919, 992, 683, 831, 1246, 684,
	60, 1043, 825, 69, 994, 69, 1107, 69, 1038, 69,
	678, 1009, 364, 678, 850, 858, 457, 678, 350, 58,
	791, 456, 351, 790, 69, 743, 742, 61, 856, 395,
	331, 356, 350, 62, 56, 69, 351, 351, 848, 1336,
	57, 60, 776, 415, 841, 1811, 69, 58, 443, 429,
	984, 824, 584, 69, 69, 69, 831, 69, 1808, 55,
	367, 1800, 1758, 442, 403, 680, 847, 1692, 61, 60,
	579, 1648, 983, 826, 1644, 56, 555, 404, 1636, 1635,
	1634, 57, 437, 1629, 1628, 585, 1346, 1627, 69, 554,
	586, 472, 1582, 1537, 825, 69, 61, 69, 1532, 1531,
	954, 842, 436, 841, 1576, 729, 1530, 681, 369, 369,
	676, 1248, 851, 1478, 794, 741, 584, 69, 66, 69,
	69, 69, 69, 69, 69, 69, 1461, 1441, 55, 69,
	1421, 1382, 1379, 1367, 69, 1331, 1358, 777, 793, 434,
	69, 370, 370, 1347, 1330, 1327, 371, 371, 831, 585,
	356, 1218, 333, 311, 586, 333, 822, 343, 69, 310,
	842, 69, 452, 453, 1325, 458, 849, 1313, 1312, 837,
	838, 839, 1245, 836, 833, 834, 835, 827, 828, 829,
	830, 832, 695, 852, 1345, 685, 1176, 1581, 1130, 869,
	1645, 1129, 878, 456, 670, 667, 455, 1803, 1489, 1104,
	344, 350, 319, 772, 1777, 351, 1750, 1729, 1727, 1718,
	1700, 1342, 1343, 1344, 1689, 1341, 1338, 1339, 1340, 1332,
	1333, 1334, 1335, 1337, 1680, 875, 1575, 1658, 1419, 1641,
	739, 1613, 1336, 1592, 738, 835, 827, 828, 829, 830,
	832, 1467, 852, 1460, 766, 773, 1438, 1437, 1436, 1434,
	1393, 1392, 781, 1357, 1321, 1320, 504, 778, 1299, 69,
	782, 783, 784, 785, 786, 1295, 717, 69, 1101, 789,
	792, 69, 803, 1233, 69, 69, 805, 1188, 804, 1346,
	1188, 311, 716, 817, 311, 311, 1105, 811, 1187, 1169,
	812, 813, 1128, 1042, 247, 824, 907, 552, 910, 914,
	900, 899, 824, 898, 897, 896, 895, 894, 893, 892,
	247, 891, 890, 889, 888, 924, 887, 826, 886, 885,
	876, 874, 55, 795, 826, 333, 336, 343, 827, 828,
	829, 830, 832, 460, 852, 401, 1347, 51, 825, 904,
	905, 391, 935, 937, 389, 825, 908, 432, 1580, 873,
	1227, 911, 1226, 51, 1331, 556, 1705, 551, 824, 1579,
	1220, 1033, 824, 31, 1381, 912, 1380, 1598, 940, 913,
	1280, 32, 69, 425, 69, 69, 409, 69, 410, 31,
	69, 915, 69, 69, 345, 369, 883, 32, 986, 943,
	951, 927, 831, 1490, 1124, 1316, 333, 903, 465, 1214,
	1773, 825, 1825, 1824, 1566, 566, 268, 567, 1341, 1338,
	1339, 1340, 1332, 1333, 1334, 1335, 1337, 1331, 370, 1000,
	302, 1736, 301, 371, 1240, 931, 557, 923, 296, 987,
	297, 308, 1674, 1404, 69, 69, 1673, 578, 1405, 230,
	566, 1385, 567, 1384, 333, 669, 669, 1283, 953, 1232,
	953, 1336, 1231, 1230, 1229, 996, 1084, 968, 364, 993,
	923, 942, 941, 239, 988, 985, 922, 974, 52, 433,
	244, 243, 52, 1698, 976, 975, 568, 584, 245, 333,
	1173, 69, 977, 879, 231, 934, 1172, 58, 1055, 428,
	387, 967, 966, 1145, 246, 69, 69, 241, 1014, 971,
	240, 957, 242, 58, 305, 969, 367, 970, 407, 60,
	585, 568, 1735, 1601, 1336, 586, 1418, 1406, 1098, 1098,
	1663, 908, 990, 911, 69, 60, 69, 1203, 575, 1395,
	1045, 1775, 905, 904, 671, 1003, 61, 1554, 997, 995,
	998, 990, 1834, 56, 566, 408, 567, 1002, 677, 57,
	1212, 1840, 61, 234, 1208, 1005, 501, 1202, 1241, 56,
	584, 1007, 1409, 1216, 1331, 57, 933, 572, 55, 1555,
	1053, 1124, 1730, 1824, 829, 830, 832, 1008, 852, 317,
	1208, 1102, 984, 1018, 238, 852, 1006, 1108, 1112, 1331,
	1115, 306, 1019, 585, 579, 1017, 1426, 1797, 586, 579,
	1081, 1054, 64, 235, 771, 770, 1154, 764, 759, 309,
	233, 232, 1166, 1167, 1168, 568, 1402, 695, 316, 1239,
	1199, 69, 69, 69, 1175, 1046, 571, 69, 406, 932,
	69, 1332, 1333, 1334, 1335, 1337, 69, 69, 69, 69,
	69, 852, 69, 69, 1111, 852, 694, 569, 69, 920,
	916, 1550, 65, 1551, 990, 69, 901, 69, 1396, 1331,
	318, 1336, 333, 1788, 69, 343, 1103, 1120, 1838, 1798,
	1222, 1714, 1223, 69, 1185, 1183, 398, 400, 1553, 1789,
	405, 319, 569, 774, 1423, 1556, 1336, 719, 1681, 1664,
	1079, 1082, 426, 1833, 69, 69, 1334, 1335, 1337, 1177,
	69, 717, 1036, 1037, 1210, 866, 678, 1799, 1346, 1839,
	369, 1319, 1198, 236, 1078, 1453, 318, 716, 1178, 1424,
	1796, 695, 1285, 1097, 564, 1225, 1841, 1446, 69, 1823,
	69, 69, 69, 1346, 406, 69, 723, 315, 1135, 1821,
	1518, 1552, 1267, 370, 69, 1596, 427, 718, 371, 1031,
	775, 69, 257, 69, 418, 1213, 1336, 447, 1247, 1270,
	1249, 396, 63, 962, 1221, 1347, 394, 1292, 343, 1451,
	1224, 343, 695, 262, 1832, 1268, 448, 990, 258, 319,
	1290, 448, 1668, 1667, 1279, 1656, 569, 1235, 1080, 1850,
	1347, 1236, 1238, 1237, 1422, 1639, 1724, 1094, 1387, 1242,
	1562, 259, 1243, 1346, 1565, 717, 1250, 1182, 1032, 802,
	1092, 1564, 796, 1768, 1138, 1298, 447, 1519, 261, 1300,
	788, 716, 974, 1520, 744, 1657, 1611, 52, 319, 976,
	975, 1310, 1311, 1256, 1255, 1269, 1278, 977, 1338, 1339,
	1340, 1332, 1333, 1334, 1335, 1337, 1288, 810, 1607, 1263,
	1293, 748, 1190, 1306, 1189, 1139, 717, 354, 1448, 1447,
	1347, 1286, 1284, 405, 1356, 1340, 1332, 1333, 1334, 1335,
	1337, 316, 716, 1849, 1090, 1369, 1089, 319, 1640, 1612,
	1095, 353, 1561, 439, 746, 1432, 333, 765, 760, 69,
	1140, 1137, 1583, 1563, 1654, 747, 1267, 1399, 1443, 1401,
	1315, 1259, 260, 1127, 1792, 1717, 1638, 1361, 1466, 1391,
	1326, 1294, 1204, 1270, 1655, 333, 999, 945, 424, 69,
	69, 423, 422, 1265, 421, 420, 1413, 419, 1289, 1268,
	1364, 1365, 1366, 416, 352, 1291, 1332, 1333, 1334, 1335,
	1337, 1362, 884, 1266, 263, 69, 691, 69, 1141, 69,
	780, 1126, 1383, 69, 1765, 1543, 1400, 1606, 1091, 1389,
	1398, 1386, 69, 1252, 1034, 1093, 69, 1030, 972, 1408,
	682, 679, 69, 584, 1403, 674, 69, 1412, 69, 1435,
	573, 570, 1484, 1415, 801, 1675, 1825, 450, 1414, 1269,
	329, 768, 1677, 1445, 1457, 484, 1198, 1449, 254, 1425,
	1427, 1428, 1416, 1433, 3, 1040, 585, 939, 1136, 1410,
	923, 586, 1179, 1473, 412, 1469, 938, 1440, 1686, 1752,
	69, 1732, 67, 1454, 1455, 1456, 1450, 923, 1760, 248,
	249, 250, 295, 936, 267, 1444, 454, 279, 253, 1205,
	956, 818, 257, 1605, 740, 267, 578, 1480, 1481, 1482,
	687, 981, 325, 325, 451, 578, 67, 330, 1847, 67,
	340, 67, 1041, 262, 333, 1848, 1331, 337, 258, 1493,
	1494, 1523, 824, 1538, 1491, 1477, 264, 1498, 1429, 298,
	299, 694, 1533, 1011, 1010, 69, 69, 69, 695, 1420,
	1376, 259, 413, 69, 69, 1228, 1496, 1174, 1171, 69,
	1170, 69, 1121, 69, 69, 69, 69, 1012, 261, 1529,
	1753, 1625, 1483, 1559, 1560, 1525, 695, 695, 1253, 1013,
	877, 304, 719, 1251, 695, 1662, 255, 779, 1526, 417,
	1631, 1787, 1318, 1539, 1713, 1542, 1695, 69, 69, 1263,
	1125, 882, 30, 1587, 333, 477, 1544, 1388, 69, 69,
	1025, 1590, 69, 1595, 1024, 1590, 695, 1593, 1600, 1589,
	587, 69, 69, 1589, 1591, 1578, 769, 758, 1591, 500,
	1573, 752, 717, 761, 1134, 553, 502, 692, 503, 1602,
	1603, 1614, 718, 1608, 1594, 694, 1267, 1619, 716, 693,
	69, 1577, 260, 909, 490, 690, 365, 1260, 960, 1122,
	717, 717, 1314, 1270, 880, 476, 482, 481, 717, 1615,
	1109, 388, 473, 1265, 1609, 1271, 716, 716, 42, 1268,
	402, 273, 274, 1211, 716, 1574, 719, 1035, 806, 67,
	357, 67, 279, 1266, 263, 1397, 694, 307, 1328, 390,
	717, 1152, 1144, 1142, 69, 1133, 69, 392, 69, 69,
	435, 559, 1637, 961, 414, 1217, 716, 69, 980, 459,
	695, 814, 397, 1802, 328, 279, 279, 327, 1021, 411,
	1671, 1672, 745, 1004, 300, 1726, 69, 719, 1731, 1269,
	1394, 1772, 59, 1649, 23, 21, 718, 20, 19, 17,
	1146, 16, 1650, 15, 22, 13, 1676, 69, 267, 69,
	67, 12, 279, 11, 440, 10, 29, 1690, 69, 1590,
	962, 333, 1670, 1687, 69, 28, 27, 1589, 5, 325,
	2, 1, 1591, 1652, 1678, 824, 0, 1685, 0, 0,
	67, 0, 0, 0, 1706, 0, 1699, 718, 0, 1702,
	0, 67, 0, 0, 717, 0, 0, 826, 67, 67,
	67, 0, 672, 333, 0, 69, 0, 333, 0, 695,
	716, 1719, 0, 0, 1712, 0, 1728, 0, 825, 0,
	0, 0, 0, 0, 69, 69, 0, 0, 69, 0,
	1722, 691, 69, 67, 0, 1723, 0, 69, 0, 0,
	736, 0, 736, 1740, 0, 0, 0, 1748, 0, 0,
	1590, 69, 1742, 1746, 1749, 1744, 584, 319, 1589, 579,
	0, 0, 279, 1591, 736, 279, 279, 279, 279, 279,
	787, 1754, 831, 0, 279, 1741, 1755, 1756, 69, 267,
	69, 69, 0, 69, 695, 799, 0, 0, 1762, 585,
	0, 0, 0, 717, 586, 1778, 1776, 0, 0, 0,
	1770, 1759, 69, 325, 1782, 0, 820, 0, 1781, 716,
	0, 0, 1743, 0, 0, 1783, 0, 1590, 1785, 841,
	1784, 1779, 0, 0, 1790, 1589, 69, 0, 69, 824,
	1591, 0, 0, 0, 1780, 691, 1809, 0, 1805, 0,
	0, 0, 0, 69, 1569, 1146, 1146, 1807, 1806, 1818,
	0, 826, 0, 1822, 69, 0, 1820, 0, 1774, 1826,
	0, 695, 0, 0, 1828, 824, 1831, 0, 717, 0,
	0, 1830, 825, 0, 1827, 0, 842, 0, 840, 0,
	1843, 1842, 1845, 0, 716, 1846, 691, 826, 0, 333,
	333, 0, 0, 333, 0, 0, 1146, 1146, 1146, 1851,
	0, 0, 694, 0, 67, 0, 0, 0, 825, 0,
	0, 0, 928, 0, 0, 0, 67, 0, 0, 67,
	944, 0, 0, 0, 0, 0, 831, 0, 0, 0,
	694, 694, 1331, 0, 0, 0, 0, 0, 694, 0,
	1296, 1297, 0, 719, 0, 717, 0, 0, 836, 833,
	834, 835, 827, 828, 829, 830, 832, 0, 852, 0,
	0, 716, 831, 0, 0, 0, 0, 0, 0, 0,
	694, 719, 719, 841, 0, 0, 0, 0, 0, 719,
	0, 0, 0, 0, 0, 730, 0, 0, 478, 40,
	0, 1353, 1354, 1355, 0, 0, 0, 0, 1660, 0,
	0, 0, 0, 718, 0, 0, 0, 0, 0, 841,
	0, 719, 0, 0, 0, 0, 0, 67, 0, 964,
	965, 40, 67, 0, 0, 67, 0, 279, 279, 1336,
	842, 718, 718, 1146, 1146, 0, 0, 0, 1694, 718,
	0, 312, 0, 0, 320, 0, 0, 0, 0, 333,
	0, 40, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 842, 0, 0, 0,
	0, 718, 0, 0, 694, 0, 1346, 0, 0, 736,
	820, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146,
	1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146,
	0, 1146, 836, 833, 834, 835, 827, 828, 829, 830,
	832, 0, 852, 0, 0, 719, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1016, 0, 1464, 1465,
	0, 0, 0, 1347, 0, 0, 0, 0, 0, 0,
	67, 928, 827, 828, 829, 830, 832, 0, 852, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 67,
	0, 279, 1771, 694, 0, 718, 1499, 1500, 1501, 1502,
	1503, 1504, 1505, 1506, 1507, 1508, 1509, 1510, 1511, 1512,
	1513, 1514, 1515, 1516, 1517, 0, 1521, 0, 0, 0,
	0, 0, 691, 0, 0, 1341, 1338, 1339, 1340, 1332,
	1333, 1334, 1335, 1337, 719, 0, 0, 962, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 320, 0, 0,
	691, 691, 0, 0, 0, 0, 0, 0, 691, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 694, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 67, 1180, 1181, 0,
	691, 0, 928, 0, 718, 1186, 1554, 0, 1547, 0,
	0, 1191, 1192, 1194, 1196, 1197, 1545, 1200, 1201, 719,
	1549, 0, 0, 67, 0, 0, 0, 0, 0, 0,
	67, 0, 1215, 0, 1146, 0, 0, 0, 1555, 67,
	312, 0, 0, 463, 463, 0, 0, 0, 67, 0,
	0, 0, 561, 0, 0, 694, 0, 1548, 0, 0,
	0, 0, 0, 0, 0, 0, 580, 0, 0, 1016,
	736, 0, 0, 0, 0, 1016, 0, 0, 0, 718,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 824, 0, 0, 0, 719, 0, 0, 0,
	0, 0, 0, 799, 691, 799, 279, 67, 0, 0,
	1254, 0, 0, 0, 826, 0, 0, 1146, 0, 1257,
	1550, 0, 1551, 0, 0, 0, 1276, 0, 67, 1659,
	0, 0, 0, 0, 0, 825, 0, 0, 824, 0,
	843, 844, 845, 853, 854, 855, 0, 1553, 0, 0,
	0, 0, 0, 846, 1556, 0, 718, 0, 0, 0,
	826, 0, 857, 807, 809, 0, 0, 0, 312, 0,
	816, 312, 312, 824, 0, 843, 844, 845, 853, 854,
	855, 825, 861, 862, 863, 864, 865, 840, 846, 831,
	0, 868, 0, 0, 867, 826, 1146, 857, 871, 0,
	0, 0, 0, 691, 0, 0, 0, 0, 0, 0,
	1552, 881, 1716, 0, 0, 0, 825, 0, 0, 824,
	0, 0, 840, 0, 853, 854, 855, 0, 0, 0,
	0, 0, 0, 0, 0, 831, 841, 0, 0, 0,
	0, 826, 0, 857, 0, 0, 0, 0, 0, 0,
	0, 0, 850, 858, 0, 0, 0, 0, 0, 0,
	0, 0, 825, 0, 820, 0, 856, 0, 840, 0,
	831, 0, 0, 0, 0, 0, 848, 0, 691, 0,
	0, 0, 841, 0, 0, 0, 0, 850, 858, 0,
	0, 1761, 0, 842, 67, 67, 0, 0, 0, 0,
	0, 856, 0, 0, 847, 0, 0, 0, 0, 0,
	0, 848, 0, 0, 0, 0, 831, 841, 0, 0,
	1430, 0, 928, 0, 799, 0, 0, 0, 1439, 0,
	0, 0, 0, 850, 858, 0, 0, 67, 0, 842,
	0, 67, 0, 0, 0, 0, 0, 1276, 0, 0,
	851, 1459, 0, 1276, 0, 691, 0, 848, 0, 0,
	0, 0, 0, 841, 0, 0, 833, 834, 835, 827,
	828, 829, 830, 832, 842, 852, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 851, 0, 40, 0, 40,
	0, 0, 0, 0, 0, 1488, 0, 0, 0, 0,
	0, 0, 40, 0, 849, 0, 40, 837, 838, 839,
	0, 836, 833, 834, 835, 827, 828, 829, 830, 832,
	842, 852, 0, 948, 0, 0, 0, 0, 0, 0,
	0, 851, 949, 0, 0, 0, 0, 0, 0, 849,
	0, 0, 837, 838, 839, 0, 836, 833, 834, 835,
	827, 828, 829, 830, 832, 0, 852, 0, 0, 0,
	1540, 1541, 928, 0, 0, 0, 0, 0, 820, 820,
	0, 0, 0, 0, 1567, 0, 1568, 0, 67, 1570,
	1571, 1572, 0, 0, 0, 849, 0, 0, 0, 0,
	0, 0, 836, 833, 834, 835, 827, 828, 829, 830,
	832, 0, 852, 0, 0, 0, 0, 0, 0, 0,
	1586, 0, 820, 928, 1586, 0, 0, 0, 0, 0,
	0, 0, 0, 67, 67, 0, 0, 67, 0, 0,
	0, 0, 0, 0, 0, 0, 820, 1276, 463, 0,
	0, 0, 1050, 1056, 1057, 1058, 1059, 1060, 1061, 1062,
	1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072,
	1073, 1074, 1075, 1076, 1077, 1632, 1083, 0, 1085, 1086,
	1087, 1088, 0, 0, 0, 0, 0, 1100, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 280, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1131, 1132, 293, 1143, 0, 1153, 1155,
	1160, 1163, 1164, 1165, 0, 0, 0, 0, 0, 928,
	0, 1651, 0, 279, 1653, 0, 0, 0, 0, 0,
	0, 0, 67, 561, 0, 1331, 0, 1348, 1349, 1350,
	282, 0, 0, 0, 0, 287, 288, 0, 0, 294,
	1617, 820, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 281, 283, 0, 0, 1206, 0, 1209, 1586, 0,
	0, 0, 67, 320, 1697, 0, 0, 0, 0, 0,
	0, 0, 0, 67, 1345, 0, 0, 0, 0, 820,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 284,
	0, 0, 0, 0, 0, 0, 0, 0, 1234, 0,
	0, 285, 286, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 289, 0, 0, 0,
	799, 0, 1336, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1733,
	1734, 0, 0, 1738, 816, 0, 0, 1739, 0, 1586,
	0, 40, 279, 1351, 0, 0, 0, 0, 0, 0,
	0, 1277, 0, 0, 0, 0, 820, 0, 0, 1346,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1281, 1282, 0, 0, 0, 0,
	1287, 1100, 0, 1769, 0, 820, 67, 0, 279, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	867, 0, 290, 1301, 0, 291, 1586, 1697, 0, 0,
	292, 0, 1309, 0, 0, 0, 1347, 0, 0, 0,
	1317, 0, 0, 824, 1322, 843, 844, 845, 853, 854,
	855, 67, 0, 820, 0, 0, 0, 0, 846, 0,
	0, 0, 0, 0, 0, 826, 868, 857, 1819, 867,
	0, 0, 1160, 1160, 1160, 0, 0, 0, 0, 820,
	0, 0, 0, 0, 0, 0, 825, 0, 0, 0,
	0, 0, 840, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1390, 1342, 1343, 1344, 0, 1341, 1338,
	1339, 1340, 1332, 1333, 1334, 1335, 1337, 0, 0, 0,
	0, 0, 0, 0, 463, 0, 0, 0, 0, 0,
	0, 0, 463, 0, 0, 0, 561, 0, 1050, 0,
	831, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 850, 858, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 856, 0, 0, 0, 0, 0, 0, 0, 0,
	1050, 848, 0, 0, 1050, 0, 0, 841, 0, 0,
	0, 0, 0, 0, 0, 0, 1462, 0, 0, 1463,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 847,
	1468, 0, 0, 824, 0, 843, 844, 845, 853, 854,
	855, 0, 0, 1234, 0, 0, 0, 0, 846, 0,
	0, 0, 1485, 0, 0, 826, 0, 857, 0, 0,
	0, 0, 1495, 0, 842, 1497, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 851, 825, 0, 0, 0,
	0, 0, 840, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1527, 1528, 0,
	0, 0, 0, 0, 0, 0, 1534, 1535, 1536, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 849,
	831, 0, 837, 838, 839, 0, 836, 833, 834, 835,
	827, 828, 829, 830, 832, 463, 852, 850, 858, 0,
	40, 0, 0, 1372, 0, 0, 0, 0, 0, 0,
	0, 856, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 848, 0, 0, 0, 0, 0, 841, 0, 1599,
	0, 0, 0, 0, 0, 0, 1050, 1050, 0, 0,
	1050, 0, 0, 0, 0, 0, 0, 0, 0, 847,
	0, 0, 1618, 25, 0, 0, 1621, 1622, 0, 0,
	0, 1624, 0, 0, 44, 1626, 0, 0, 0, 0,
	0, 0, 1630, 0, 0, 824, 1633, 843, 844, 845,
	853, 854, 855, 0, 842, 0, 0, 0, 46, 0,
	0, 0, 0, 0, 26, 851, 51, 826, 0, 857,
	0, 0, 0, 0, 0, 0, 0, 0, 1642, 0,
	0, 0, 0, 0, 0, 35, 0, 0, 825, 0,
	0, 0, 31, 0, 840, 47, 0, 0, 0, 34,
	32, 0, 0, 1331, 0, 1348, 1349, 1350, 0, 0,
	0, 0, 0, 0, 0, 36, 0, 0, 1616, 849,
	1669, 0, 837, 838, 839, 0, 836, 833, 834, 835,
	827, 828, 829, 830, 832, 0, 852, 0, 1679, 0,
	0, 0, 831, 1371, 1688, 0, 0, 0, 0, 0,
	0, 0, 1345, 0, 0, 0, 0, 0, 0, 850,
	858, 0, 1701, 0, 0, 0, 1050, 0, 0, 0,
	0, 0, 1708, 1709, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 848, 0, 0, 0, 0, 0, 841,
	0, 0, 33, 0, 0, 0, 0, 0, 0, 0,
	1336, 1721, 0, 49, 0, 0, 37, 0, 48, 0,
	0, 0, 0, 38, 1725, 0, 58, 0, 0, 0,
	0, 41, 43, 0, 0, 0, 0, 0, 0, 0,
	45, 1351, 0, 0, 0, 0, 561, 0, 60, 867,
	0, 0, 0, 0, 0, 0, 842, 1346, 0, 0,
	0, 50, 0, 0, 0, 0, 0, 851, 0, 0,
	0, 0, 0, 0, 0, 61, 0, 0, 0, 0,
	0, 0, 56, 0, 0, 0, 0, 0, 57, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 55, 0, 0,
	0, 0, 0, 0, 1347, 0, 0, 0, 0, 0,
	0, 849, 0, 0, 837, 838, 839, 0, 836, 833,
	834, 835, 827, 828, 829, 830, 832, 0, 852, 1804,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1817, 1817, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1817, 0, 1342, 1343, 1344, 0, 1341, 1338, 1339, 1340,
	1332, 1333, 1334, 1335, 1337, 0, 0, 0, 0, 583,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1817, 71, 72, 588, 73, 589, 590,
	591, 592, 182, 593, 594, 595, 596, 74, 75, 183,
	184, 185, 186, 76, 187, 188, 597, 77, 189, 190,
	78, 598, 599, 191, 192, 193, 600, 194, 601, 373,
	602, 79, 80, 81, 0, 82, 603, 83, 84, 85,
	604, 374, 86, 87, 605, 606, 607, 608, 609, 610,
	88, 89, 90, 91, 195, 92, 196, 197, 611, 93,
	612, 94, 613, 614, 615, 95, 96, 616, 97, 617,
	0, 618, 198, 98, 99, 199, 619, 620, 621, 100,
	101, 200, 0, 102, 622, 103, 623, 624, 375, 625,
	104, 201, 626, 202, 627, 105, 106, 203, 204, 377,
	628, 109, 629, 107, 630, 376, 108, 205, 206, 207,
	631, 208, 632, 378, 110, 379, 111, 112, 633, 634,
	209, 380, 113, 381, 635, 114, 636, 637, 115, 0,
	116, 117, 118, 119, 120, 382, 121, 122, 125, 123,
	638, 124, 639, 210, 126, 211, 127, 128, 640, 641,
	642, 643, 644, 129, 212, 383, 130, 384, 213, 131,
	132, 133, 645, 214, 134, 215, 135, 646, 136, 137,
	138, 216, 139, 140, 647, 142, 143, 141, 144, 648,
	145, 385, 146, 147, 217, 148, 0, 149, 150, 151,
	649, 218, 152, 153, 650, 154, 155, 386, 156, 219,
	220, 157, 651, 158, 159, 160, 162, 221, 161, 222,
	652, 163, 653, 164, 165, 654, 223, 224, 225, 655,
	656, 166, 226, 227, 657, 167, 168, 169, 170, 658,
	659, 171, 172, 173, 660, 661, 174, 175, 176, 228,
	229, 662, 177, 663, 664, 665, 666, 178, 179, 180,
	181, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 583, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1458, 71, 72,
	588, 73, 589, 590, 591, 592, 182, 593, 594, 595,
	596, 74, 75, 183, 184, 185, 186, 76, 187, 188,
	597, 77, 189, 190, 78, 598, 599, 191, 192, 193,
	600, 194, 601, 373, 602, 79, 80, 81, 0, 82,
	603, 83, 84, 85, 604, 374, 86, 87, 605, 606,
	607, 608, 609, 610, 88, 89, 90, 91, 195, 92,
	196, 197, 611, 93, 612, 94, 613, 614, 615, 95,
	96, 616, 97, 617, 0, 618, 198, 98, 99, 199,
	619, 620, 621, 100, 101, 200, 0, 102, 622, 103,
	623, 624, 375, 625, 104, 201, 626, 202, 627, 105,
	106, 203, 204, 377, 628, 109, 629, 107, 630, 376,
	108, 205, 206, 207, 631, 208, 632, 378, 110, 379,
	111, 112, 633, 634, 209, 380, 113, 381, 635, 114,
	636, 637, 115, 0, 116, 117, 118, 119, 120, 382,
	121, 122, 125, 123, 638, 124, 639, 210, 126, 211,
	127, 128, 640, 641, 642, 643, 644, 129, 212, 383,
	130, 384, 213, 131, 132, 133, 645, 214, 134, 215,
	135, 646, 136, 137, 138, 216, 139, 140, 647, 142,
	143, 141, 144, 648, 145, 385, 146, 147, 217, 148,
	0, 149, 150, 151, 649, 218, 152, 153, 650, 154,
	155, 386, 156, 219, 220, 157, 651, 158, 159, 160,
	162, 221, 161, 222, 652, 163, 653, 164, 165, 654,
	223, 224, 225, 655, 656, 166, 226, 227, 657, 167,
	168, 169, 170, 658, 659, 171, 172, 173, 660, 661,
	174, 175, 176, 228, 229, 662, 177, 663, 664, 665,
	666, 178, 179, 180, 181, 583, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 582, 0,
	71, 72, 588, 73, 589, 590, 591, 592, 182, 593,
	594, 595, 596, 74, 75, 183, 184, 185, 186, 76,
	187, 188, 597, 77, 189, 190, 78, 598, 599, 191,
	192, 193, 600, 194, 601, 373, 602, 79, 80, 81,
	0, 82, 603, 83, 84, 85, 604, 374, 86, 87,
	605, 606, 607, 608, 609, 610, 88, 89, 90, 91,
	195, 92, 196, 197, 611, 93, 612, 94, 613, 614,
	615, 95, 96, 616, 97, 617, 0, 618, 198, 98,
	99, 199, 619, 620, 621, 100, 101, 200, 0, 102,
	622, 103, 623, 624, 375, 625, 104, 201, 626, 202,
	627, 105, 106, 203, 204, 377, 628, 109, 629, 107,
	630, 376, 108, 205, 206, 207, 631, 208, 632, 378,
	110, 379, 111, 112, 633, 634, 209, 380, 113, 381,
	635, 114, 636, 637, 115, 0, 116, 117, 118, 119,
	120, 382, 121, 122, 125, 123, 638, 124, 639, 210,
	126, 211, 127, 128, 640, 641, 642, 643, 644, 129,
	212, 383, 130, 384, 213, 131, 132, 133, 645, 214,
	134, 215, 135, 646, 136, 137, 138, 216, 139, 140,
	647, 142, 143, 141, 144, 648, 145, 385, 146, 147,
	217, 148, 0, 149, 150, 151, 649, 218, 152, 153,
	650, 154, 155, 386, 156, 219, 220, 157, 651, 158,
	159, 160, 162, 221, 161, 222, 652, 163, 653, 164,
	165, 654, 223, 224, 225, 655, 656, 166, 226, 227,
	657, 167, 168, 169, 170, 658, 659, 171, 172, 173,
	660, 661, 174, 175, 176, 228, 229, 662, 177, 663,
	664, 665, 666, 178, 179, 180, 181, 498, 487, 488,
	485, 486, 474, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 71, 72, 1117, 73, 0, 0, 0, 0,
	514, 480, 0, 0, 0, 74, 75, 183, 528, 185,
	529, 76, 530, 531, 0, 77, 189, 190, 78, 495,
	513, 532, 533, 193, 0, 524, 0, 506, 0, 79,
	80, 81, 0, 82, 0, 83, 84, 85, 0, 374,
	86, 87, 0, 507, 509, 0, 508, 510, 88, 89,
	90, 91, 534, 92, 535, 536, 0, 93, 0, 94,
	0, 1118, 0, 527, 96, 0, 97, 0, 0, 0,
	479, 98, 99, 515, 493, 0, 0, 100, 101, 537,
	0, 102, 0, 103, 0, 0, 375, 0, 104, 525,
	0, 202, 0, 105, 106, 521, 523, 377, 0, 109,
	0, 107, 0, 376, 108, 538, 539, 540, 0, 505,
	0, 378, 110, 379, 111, 112, 0, 0, 526, 380,
	113, 381, 0, 114, 0, 0, 115, 0, 116, 117,
	118, 119, 120, 382, 121, 122, 125, 123, 469, 124,
	494, 522, 126, 541, 127, 128, 0, 0, 0, 0,
	0, 129, 212, 383, 130, 384, 516, 131, 132, 133,
	0, 517, 134, 215, 135, 0, 136, 137, 138, 542,
	139, 140, 0, 142, 143, 141, 144, 0, 145, 385,
	146, 147, 483, 148, 0, 149, 150, 151, 0, 218,
	152, 153, 511, 154, 155, 386, 156, 543, 220, 157,
	0, 158, 159, 160, 162, 544, 161, 518, 0, 163,
	0, 164, 165, 0, 223, 545, 546, 0, 0, 166,
	519, 520, 492, 167, 168, 169, 170, 0, 0, 171,
	172, 173, 512, 0, 174, 175, 176, 228, 547, 1116,
	177, 0, 0, 0, 0, 178, 179, 180, 181, 470,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	466, 467, 1119, 0, 0, 0, 468, 0, 0, 475,
	1114, 498, 487, 488, 485, 486, 474, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 71, 72, 0, 73,
	0, 0, 0, 0, 514, 480, 0, 0, 0, 74,
	75, 183, 528, 185, 529, 76, 530, 531, 0, 77,
	189, 190, 78, 495, 513, 532, 533, 193, 0, 524,
	0, 506, 0, 79, 80, 81, 0, 82, 0, 83,
	84, 85, 0, 374, 86, 87, 0, 507, 509, 0,
	508, 510, 88, 89, 90, 91, 534, 92, 535, 536,
	562, 93, 0, 94, 0, 0, 0, 527, 96, 0,
	97, 0, 0, 0, 479, 98, 99, 515, 493, 0,
	0, 100, 101, 537, 0, 102, 0, 103, 0, 0,
	375, 0, 104, 525, 0, 202, 0, 105, 106, 521,
	523, 377, 0, 109, 0, 107, 0, 376, 108, 538,
	539, 540, 0, 505, 0, 378, 110, 379, 111, 112,
	0, 0, 526, 380, 113, 381, 0, 114, 0, 0,
	115, 0, 116, 117, 118, 119, 120, 382, 121, 122,
	125, 123, 469, 124, 494, 522, 126, 541, 127, 128,
	0, 0, 0, 0, 0, 129, 212, 383, 130, 384,
	516, 131, 132, 133, 0, 517, 134, 215, 135, 0,
	136, 137, 138, 542, 139, 140, 0, 142, 143, 141,
	144, 0, 145, 385, 146, 147, 483, 148, 0, 149,
	150, 151, 58, 218, 152, 153, 511, 154, 155, 386,
	156, 543, 220, 157, 0, 158, 159, 160, 162, 544,
	161, 518, 0, 163, 60, 164, 165, 0, 223, 545,
	546, 0, 0, 166, 519, 520, 492, 167, 168, 169,
	170, 0, 0, 171, 172, 173, 512, 0, 174, 175,
	176, 372, 547, 0, 177, 0, 0, 0, 56, 178,
	179, 180, 181, 470, 57, 0, 498, 487, 488, 485,
	486, 474, 0, 0, 466, 467, 0, 0, 0, 0,
	468, 71, 72, 475, 73, 0, 0, 0, 0, 514,
	480, 0, 0, 0, 74, 75, 183, 528, 185, 529,
	76, 530, 531, 0, 77, 189, 190, 78, 495, 513,
	532, 533, 193, 0, 524, 0, 506, 0, 79, 80,
	81, 0, 82, 0, 83, 84, 85, 0, 374, 86,
	87, 0, 507, 509, 0, 508, 510, 88, 89, 90,
	91, 534, 92, 535, 536, 0, 93, 0, 94, 0,
	0, 0, 527, 96, 0, 97, 0, 0, 0, 479,
	98, 99, 515, 493, 0, 0, 100, 101, 537, 0,
	102, 0, 103, 0, 0, 375, 0, 104, 525, 0,
	202, 0, 105, 106, 521, 523, 377, 0, 109, 0,
	107, 0, 376, 108, 538, 539, 540, 0, 505, 0,
	378, 110, 379, 111, 112, 0, 0, 526, 380, 113,
	381, 0, 114, 0, 0, 115, 0, 116, 117, 118,
	119, 120, 382, 121, 122, 125, 123, 469, 124, 494,
	522, 126, 541, 127, 128, 0, 0, 0, 0, 0,
	129, 212, 383, 130, 384, 516, 131, 132, 133, 0,
	517, 134, 215, 135, 0, 136, 137, 138, 542, 139,
	140, 0, 142, 143, 141, 144, 0, 145, 385, 146,
	147, 483, 148, 0, 149, 150, 151, 58, 218, 152,
	153, 511, 154, 155, 386, 156, 543, 220, 157, 0,
	158, 159, 160, 162, 544, 161, 518, 0, 163, 60,
	164, 165, 0, 223, 545, 546, 0, 0, 166, 519,
	520, 492, 167, 168, 169, 170, 0, 0, 171, 172,
	173, 512, 0, 174, 175, 176, 372, 547, 0, 177,
	0, 0, 0, 56, 178, 179, 180, 181, 470, 57,
	0, 498, 487, 488, 485, 486, 474, 0, 0, 466,
	467, 0, 0, 0, 0, 468, 71, 72, 475, 73,
	0, 0, 0, 0, 514, 480, 0, 0, 0, 74,
	75, 183, 528, 185, 529, 76, 530, 531, 1156, 77,
	189, 190, 78, 495, 513, 532, 533, 193, 0, 524,
	0, 506, 0, 79, 80, 81, 0, 82, 0, 83,
	84, 85, 0, 374, 86, 87, 0, 507, 509, 0,
	508, 510, 88, 89, 90, 91, 534, 92, 535, 536,
	0, 93, 0, 94, 0, 0, 0, 527, 96, 0,
	97, 0, 0, 0, 479, 98, 99, 515, 493, 0,
	0, 100, 101, 537, 0, 102, 0, 103, 0, 1161,
	375, 0, 104, 525, 0, 202, 0, 105, 106, 521,
	523, 377, 0, 109, 0, 107, 0, 376, 108, 538,
	539, 540, 0, 505, 0, 378, 110, 379, 111, 112,
	0, 1157, 526, 380, 113, 381, 0, 114, 0, 0,
	115, 0, 116, 117, 118, 119, 120, 382, 121, 122,
	125, 123, 469, 124, 494, 522, 126, 541, 127, 128,
	0, 0, 0, 0, 0, 129, 212, 383, 130, 384,
	516, 131, 132, 133, 0, 517, 134, 215, 135, 0,
	136, 137, 138, 542, 139, 140, 0, 142, 143, 141,
	144, 0, 145, 385, 146, 147, 483, 148, 0, 149,
	150, 151, 0, 218, 152, 153, 511, 154, 155, 386,
	156, 543, 220, 157, 0, 158, 159, 160, 162, 544,
	161, 518, 0, 163, 0, 164, 165, 0, 223, 545,
	546, 0, 1158, 166, 519, 520, 492, 167, 168, 169,
	170, 0, 0, 171, 172, 173, 512, 0, 174, 175,
	176, 228, 547, 0, 177, 0, 0, 0, 0, 178,
	179, 180, 181, 470, 0, 0, 498, 487, 488, 485,
	486, 474, 0, 0, 466, 467, 0, 0, 0, 0,
	468, 71, 72, 475, 73, 0, 0, 0, 0, 514,
	480, 0, 0, 0, 74, 75, 183, 528, 185, 529,
	76, 530, 531, 0, 77, 189, 190, 78, 495, 513,
	532, 533, 193, 0, 524, 0, 506, 0, 79, 80,
	81, 0, 82, 0, 83, 84, 85, 0, 374, 86,
	87, 0, 507, 509, 0, 508, 510, 88, 89, 90,
	91, 534, 92, 535, 536, 0, 93, 0, 94, 0,
	0, 0, 527, 96, 0, 97, 0, 0, 0, 479,
	98, 99, 515, 493, 0, 0, 100, 101, 537, 0,
	102, 0, 103, 0, 0, 375, 0, 104, 525, 0,
	202, 0, 105, 106, 521, 523, 377, 0, 109, 0,
	107, 0, 376, 108, 538, 539, 540, 0, 505, 0,
	378, 110, 379, 111, 112, 0, 0, 526, 380, 113,
	381, 0, 114, 0, 0, 115, 0, 116, 117, 118,
	119, 120, 382, 121, 122, 125, 123, 469, 124, 494,
	522, 126, 541, 127, 128, 0, 0, 0, 0, 0,
	129, 212, 383, 130, 384, 516, 131, 132, 133, 0,
	517, 134, 215, 135, 0, 136, 137, 138, 542, 139,
	140, 0, 142, 143, 141, 144, 0, 145, 385, 146,
	147, 483, 148, 0, 149, 150, 151, 0, 218, 152,
	153, 511, 154, 155, 386, 156, 543, 220, 157, 0,
	158, 159, 160, 162, 544, 161, 518, 0, 163, 0,
	164, 165, 0, 223, 545, 546, 0, 0, 166, 519,
	520, 492, 167, 168, 169, 170, 0, 0, 171, 172,
	173, 512, 0, 174, 175, 176, 228, 547, 0, 177,
	0, 0, 0, 0, 178, 179, 180, 181, 470, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 466,
	467, 0, 0, 0, 0, 468, 0, 0, 475, 1524,
	498, 487, 488, 485, 486, 474, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 71, 72, 0, 73, 0,
	0, 0, 0, 514, 480, 0, 0, 0, 74, 75,
	183, 528, 185, 529, 76, 530, 531, 0, 77, 189,
	190, 78, 495, 513, 532, 533, 193, 0, 524, 0,
	506, 0, 79, 80, 81, 0, 82, 0, 83, 84,
	85, 0, 374, 86, 87, 0, 507, 509, 0, 508,
	510, 88, 89, 90, 91, 534, 92, 535, 536, 0,
	93, 0, 94, 0, 0, 0, 527, 96, 0, 97,
	0, 0, 0, 479, 98, 99, 515, 493, 0, 0,
	100, 101, 537, 0, 102, 0, 103, 0, 0, 375,
	0, 104, 525, 0, 202, 0, 105, 106, 521, 523,
	377, 0, 109, 0, 107, 0, 376, 108, 538, 539,
	540, 0, 505, 0, 378, 110, 379, 111, 112, 0,
	0, 526, 380, 113, 381, 0, 114, 0, 0, 115,
	0, 116, 117, 118, 119, 120, 382, 121, 122, 125,
	123, 469, 124, 494, 522, 126, 541, 127, 128, 0,
	0, 0, 0, 0, 129, 212, 383, 130, 384, 516,
	131, 132, 133, 0, 517, 134, 215, 135, 0, 136,
	137, 138, 542, 139, 140, 0, 142, 143, 141, 144,
	0, 145, 385, 146, 147, 483, 148, 0, 149, 150,
	151, 0, 218, 152, 153, 511, 154, 155, 386, 156,
	543, 220, 157, 0, 158, 159, 160, 162, 544, 161,
	518, 0, 163, 0, 164, 165, 0, 223, 545, 546,
	0, 0, 166, 519, 520, 492, 167, 168, 169, 170,
	0, 0, 171, 172, 173, 512, 0, 174, 175, 176,
	228, 547, 0, 177, 0, 0, 0, 0, 178, 179,
	180, 181, 470, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 466, 467, 0, 0, 0, 0, 468,
	0, 0, 475, 1474, 498, 487, 488, 485, 486, 474,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 71,
	72, 0, 73, 0, 0, 0, 0, 514, 480, 0,
	0, 0, 74, 75, 183, 528, 185, 529, 76, 530,
	531, 0, 77, 189, 190, 78, 495, 513, 532, 533,
	193, 0, 524, 0, 506, 0, 79, 80, 81, 0,
	82, 0, 83, 84, 85, 0, 374, 86, 87, 0,
	507, 509, 0, 508, 510, 88, 89, 90, 91, 534,
	92, 535, 536, 0, 93, 0, 94, 0, 0, 0,
	527, 96, 0, 97, 0, 0, 0, 479, 98, 99,
	515, 493, 0, 0, 100, 101, 537, 0, 102, 0,
	103, 0, 0, 375, 0, 104, 525, 0, 202, 0,
	105, 106, 521, 523, 377, 0, 109, 0, 107, 0,
	376, 108, 538, 539, 540, 0, 505, 0, 378, 110,
	379, 111, 112, 0, 0, 526, 380, 113, 381, 0,
	114, 0, 0, 115, 0, 116, 117, 118, 119, 120,
	382, 121, 122, 125, 123, 469, 124, 494, 522, 126,
	541, 127, 128, 0, 0, 0, 0, 0, 129, 212,
	383, 130, 384, 516, 131, 132, 133, 0, 517, 134,
	215, 135, 0, 136, 137, 138, 542, 139, 140, 0,
	142, 143, 141, 144, 0, 145, 385, 146, 147, 483,
	148, 0, 149, 150, 151, 0, 218, 152, 153, 511,
	154, 155, 386, 156, 543, 220, 157, 0, 158, 159,
	160, 162, 544, 161, 518, 0, 163, 0, 164, 165,
	0, 223, 545, 546, 0, 0, 166, 519, 520, 492,
	167, 168, 169, 170, 0, 0, 171, 172, 173, 512,
	0, 174, 175, 176, 228, 547, 0, 177, 0, 0,
	0, 0, 178, 179, 180, 181, 470, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 466, 467, 0,
	0, 0, 0, 468, 0, 0, 475, 1113, 498, 487,
	488, 485, 486, 474, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 71, 72, 0, 73, 0, 0, 0,
	0, 514, 480, 0, 0, 0, 74, 75, 183, 528,
	185, 529, 76, 530, 531, 0, 77, 189, 190, 78,
	495, 513, 532, 533, 193, 0, 524, 0, 506, 0,
	79, 80, 81, 0, 82, 0, 83, 84, 85, 0,
	374, 86, 87, 0, 507, 509, 0, 508, 510, 88,
	89, 90, 91, 534, 92, 535, 536, 0, 93, 0,
	94, 0, 0, 0, 527, 96, 0, 97, 0, 0,
	0, 479, 98, 99, 515, 493, 0, 0, 100, 101,
	537, 0, 102, 0, 103, 0, 0, 375, 0, 104,
	525, 0, 202, 0, 105, 106, 521, 523, 377, 0,
	109, 0, 107, 0, 376, 108, 538, 539, 540, 0,
	505, 0, 378, 110, 379, 111, 112, 0, 0, 526,
	380, 113, 381, 0, 114, 0, 0, 115, 0, 116,
	117, 118, 119, 120, 382, 121, 122, 125, 123, 469,
	124, 494, 522, 126, 541, 127, 128, 0, 0, 0,
	0, 0, 129, 212, 383, 130, 384, 516, 131, 132,
	133, 0, 517, 134, 215, 135, 0, 136, 137, 138,
	542, 139, 140, 0, 142, 143, 141, 144, 0, 145,
	385, 146, 147, 483, 148, 0, 149, 150, 151, 0,
	218, 152, 153, 511, 154, 155, 386, 156, 543, 220,
	157, 0, 158, 159, 160, 162, 544, 161, 518, 0,
	163, 0, 164, 165, 0, 223, 545, 546, 0, 0,
	166, 519, 520, 492, 167, 168, 169, 170, 0, 0,
	171, 172, 173, 512, 0, 174, 175, 176, 228, 547,
	0, 177, 0, 0, 0, 0, 178, 179, 180, 181,
	470, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 466, 467, 0, 0, 0, 0, 468, 873, 1110,
	475, 498, 487, 488, 485, 486, 474, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 71, 72, 0, 73,
	0, 0, 0, 0, 514, 480, 0, 0, 0, 74,
	75, 183, 528, 185, 529, 76, 530, 531, 0, 77,
	189, 190, 78, 495, 513, 532, 533, 193, 0, 524,
	0, 506, 0, 79, 80, 81, 0, 82, 0, 83,
	84, 85, 0, 374, 86, 87, 0, 507, 509, 0,
	508, 510, 88, 89, 90, 91, 534, 92, 535, 536,
	0, 93, 0, 94, 0, 0, 0, 527, 96, 0,
	97, 0, 0, 0, 479, 98, 99, 515, 493, 0,
	0, 100, 101, 537, 0, 102, 0, 103, 0, 0,
	375, 0, 104, 525, 0, 202, 0, 105, 106, 521,
	523, 377, 0, 109, 0, 107, 0, 376, 108, 538,
	539, 540, 0, 505, 0, 378, 110, 379, 111, 112,
	0, 0, 526, 380, 113, 381, 0, 114, 0, 0,
	115, 0, 116, 117, 118, 119, 120, 382, 121, 122,
	125, 123, 469, 124, 494, 522, 126, 541, 127, 128,
	0, 0, 0, 0, 0, 129, 212, 383, 130, 384,
	516, 131, 132, 133, 0, 517, 134, 215, 135, 0,
	136, 137, 138, 542, 139, 140, 0, 142, 143, 141,
	144, 0, 145, 385, 146, 147, 483, 148, 0, 149,
	150, 151, 0, 218, 152, 153, 511, 154, 155, 386,
	156, 543, 220, 157, 0, 158, 159, 160, 162, 544,
	161, 518, 0, 163, 0, 164, 165, 0, 223, 545,
	546, 0, 0, 166, 519, 520, 492, 167, 168, 169,
	170, 0, 0, 171, 172, 173, 512, 0, 174, 175,
	176, 228, 547, 0, 177, 0, 0, 0, 0, 178,
	179, 180, 181, 470, 0, 0, 498, 487, 488, 485,
	486, 474, 0, 0, 466, 467, 464, 0, 0, 0,
	468, 71, 72, 475, 73, 0, 0, 0, 0, 514,
	480, 0, 0, 0, 74, 75, 183, 528, 185, 529,
	76, 530, 531, 0, 77, 189, 190, 78, 495, 513,
	532, 533, 193, 0, 524, 0, 506, 0, 79, 80,
	81, 0, 82, 0, 83, 84, 85, 0, 374, 86,
	87, 0, 507, 509, 0, 508, 510, 88, 89, 90,
	91, 534, 92, 535, 536, 0, 93, 0, 94, 0,
	0, 0, 527, 96, 0, 97, 0, 0, 0, 479,
	98, 99, 515, 493, 0, 0, 100, 101, 537, 0,
	102, 0, 103, 0, 0, 375, 0, 104, 525, 0,
	202, 0, 105, 106, 521, 523, 377, 0, 109, 0,
	107, 0, 376, 108, 538, 539, 540, 0, 505, 0,
	378, 110, 379, 111, 112, 0, 0, 526, 380, 113,
	381, 0, 114, 0, 0, 115, 0, 116, 117, 118,
	119, 120, 382, 121, 122, 125, 123, 469, 124, 494,
	522, 126, 541, 127, 128, 0, 0, 0, 0, 0,
	129, 212, 383, 130, 384, 516, 131, 132, 133, 0,
	517, 134, 215, 135, 0, 136, 137, 138, 542, 139,
	140, 0, 142, 143, 141, 144, 0, 145, 385, 146,
	147, 483, 148, 0, 149, 150, 151, 0, 218, 152,
	153, 511, 154, 155, 386, 156, 543, 220, 157, 0,
	158, 159, 160, 162, 544, 161, 518, 0, 163, 0,
	164, 165, 0, 223, 545, 546, 0, 0, 166, 519,
	520, 492, 167, 168, 169, 170, 0, 0, 171, 172,
	173, 512, 0, 174, 175, 176, 228, 547, 1479, 177,
	0, 0, 0, 0, 178, 179, 180, 181, 470, 0,
	0, 498, 487, 488, 485, 486, 474, 0, 0, 466,
	467, 0, 0, 0, 0, 468, 71, 72, 475, 73,
	0, 0, 0, 0, 514, 480, 0, 0, 0, 74,
	75, 183, 528, 185, 529, 76, 530, 531, 0, 77,
	189, 190, 78, 495, 513, 532, 533, 193, 0, 524,
	0, 506, 0, 79, 80, 81, 0, 82, 0, 83,
	84, 85, 0, 374, 86, 87, 0, 507, 509, 0,
	508, 510, 88, 89, 90, 91, 534, 92, 535, 536,
	562, 93, 0, 94, 0, 0, 0, 527, 96, 0,
	97, 0, 0, 0, 479, 98, 99, 515, 493, 0,
	0, 100, 101, 537, 0, 102, 0, 103, 0, 0,
	375, 0, 104, 525, 0, 202, 0, 105, 106, 521,
	523, 377, 0, 109, 0, 107, 0, 376, 108, 538,
	539, 540, 0, 505, 0, 378, 110, 379, 111, 112,
	0, 0, 526, 380, 113, 381, 0, 114, 0, 0,
	115, 0, 116, 117, 118, 119, 120, 382, 121, 122,
	125, 123, 469, 124, 494, 522, 126, 541, 127, 128,
	0, 0, 0, 0, 0, 129, 212, 383, 130, 384,
	516, 131, 132, 133, 0, 517, 134, 215, 135, 0,
	136, 137, 138, 542, 139, 140, 0, 142, 143, 141,
	144, 0, 145, 385, 146, 147, 483, 148, 0, 149,
	150, 151, 0, 218, 152, 153, 511, 154, 155, 386,
	156, 543, 220, 157, 0, 158, 159, 160, 162, 544,
	161, 518, 0, 163, 0, 164, 165, 0, 223, 545,
	546, 0, 0, 166, 519, 520, 492, 167, 168, 169,
	170, 0, 0, 171, 172, 173, 512, 0, 174, 175,
	176, 228, 547, 0, 177, 0, 0, 0, 0, 178,
	179, 180, 181, 470, 0, 0, 498, 487, 488, 485,
	486, 474, 0, 0, 466, 467, 0, 0, 0, 0,
	468, 71, 72, 475, 73, 0, 0, 0, 0, 514,
	480, 0, 0, 0, 74, 75, 183, 528, 185, 529,
	76, 530, 531, 0, 77, 189, 190, 78, 495, 513,
	532, 533, 193, 0, 524, 0, 506, 0, 79, 80,
	81, 0, 82, 0, 83, 84, 85, 0, 374, 86,
	87, 0, 507, 509, 0, 508, 510, 88, 89, 90,
	91, 534, 92, 535, 536, 0, 93, 0, 94, 0,
	0, 0, 527, 96, 0, 97, 0, 0, 0, 479,
	98, 99, 515, 493, 0, 0, 100, 101, 537, 0,
	102, 0, 103, 0, 1161, 375, 0, 104, 525, 0,
	202, 0, 105, 106, 521, 523, 377, 0, 109, 0,
	107, 0, 376, 108, 538, 539, 540, 0, 505, 0,
	378, 110, 379, 111, 112, 0, 0, 526, 380, 113,
	381, 0, 114, 0, 0, 115, 0, 116, 117, 118,
	119, 120, 382, 121, 122, 125, 123, 469, 124, 494,
	522, 126, 541, 127, 128, 0, 0, 0, 0, 0,
	129, 212, 383, 130, 384, 516, 131, 132, 133, 0,
	517, 134, 215, 135, 0, 136, 137, 138, 542, 139,
	140, 0, 142, 143, 141, 144, 0, 145, 385, 146,
	147, 483, 148, 0, 149, 150, 151, 0, 218, 152,
	153, 511, 154, 155, 386, 156, 543, 220, 157, 0,
	158, 159, 160, 162, 544, 161, 518, 0, 163, 0,
	164, 165, 0, 223, 545, 546, 0, 0, 166, 519,
	520, 492, 167, 168, 169, 170, 0, 0, 171, 172,
	173, 512, 0, 174, 175, 176, 228, 547, 0, 177,
	0, 0, 0, 0, 178, 179, 180, 181, 470, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 466,
	467, 0, 0, 0, 0, 468, 0, 0, 475, 498,
	487, 488, 485, 486, 474, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 71, 72, 808, 73, 0, 0,
	0, 0, 514, 480, 0, 0, 0, 74, 75, 183,
	528, 185, 529, 76, 530, 531, 0, 77, 189, 190,
	78, 495, 513, 532, 533, 193, 0, 524, 0, 506,
	0, 79, 80, 81, 0, 82, 0, 83, 84, 85,
	0, 374, 86, 87, 0, 507, 509, 0, 508, 510,
	88, 89, 90, 91, 534, 92, 535, 536, 0, 93,
	0, 94, 0, 0, 0, 527, 96, 0, 97, 0,
	0, 0, 479, 98, 99, 515, 493, 0, 0, 100,
	101, 537, 0, 102, 0, 103, 0, 0, 375, 0,
	104, 525, 0, 202, 0, 105, 106, 521, 523, 377,
	0, 109, 0, 107, 0, 376, 108, 538, 539, 540,
	0, 505, 0, 378, 110, 379, 111, 112, 0, 0,
	526, 380, 113, 381, 0, 114, 0, 0, 115, 0,
	116, 117, 118, 119, 120, 382, 121, 122, 125, 123,
	469, 124, 494, 522, 126, 541, 127, 128, 0, 0,
	0, 0, 0, 129, 212, 383, 130, 384, 516, 131,
	132, 133, 0, 517, 134, 215, 135, 0, 136, 137,
	138, 542, 139, 140, 0, 142, 143, 141, 144, 0,
	145, 385, 146, 147, 483, 148, 0, 149, 150, 151,
	0, 218, 152, 153, 511, 154, 155, 386, 156, 543,
	220, 157, 0, 158, 159, 160, 162, 544, 161, 518,
	0, 163, 0, 164, 165, 0, 223, 545, 546, 0,
	0, 166, 519, 520, 492, 167, 168, 169, 170, 0,
	0, 171, 172, 173, 512, 0, 174, 175, 176, 228,
	547, 0, 177, 0, 0, 0, 0, 178, 179, 180,
	181, 470, 0, 0, 498, 487, 488, 485, 486, 474,
	0, 0, 466, 467, 0, 0, 0, 0, 468, 71,
	72, 475, 73, 0, 0, 0, 0, 514, 480, 0,
	0, 0, 74, 75, 183, 528, 185, 529, 76, 530,
	531, 0, 77, 189, 190, 78, 495, 513, 532, 533,
	193, 0, 524, 0, 506, 0, 79, 80, 81, 0,
	82, 0, 83, 84, 85, 0, 374, 86, 1816, 0,
	507, 509, 0, 508, 510, 88, 89, 90, 91, 534,
	92, 535, 536, 0, 93, 0, 94, 0, 0, 0,
	527, 96, 0, 97, 0, 0, 0, 479, 98, 99,
	515, 493, 0, 0, 100, 101, 537, 0, 102, 0,
	103, 0, 0, 375, 0, 104, 525, 0, 202, 0,
	105, 106, 521, 523, 377, 0, 109, 0, 107, 0,
	376, 108, 538, 539, 540, 0, 505, 0, 378, 110,
	379, 111, 112, 0, 0, 526, 380, 113, 381, 0,
	114, 0, 0, 115, 0, 116, 117, 118, 119, 120,
	382, 121, 122, 125, 123, 469, 124, 494, 522, 126,
	541, 127, 128, 0, 0, 0, 0, 0, 129, 212,
	383, 130, 384, 516, 131, 132, 133, 0, 517, 134,
	215, 135, 0, 136, 137, 138, 542, 139, 140, 0,
	142, 143, 141, 144, 0, 145, 385, 146, 147, 483,
	148, 0, 149, 150, 151, 0, 218, 152, 153, 511,
	154, 155, 386, 156, 543, 220, 157, 0, 158, 159,
	160, 162, 544, 161, 518, 0, 163, 0, 164, 165,
	0, 223, 545, 546, 0, 0, 166, 519, 520, 492,
	167, 168, 1815, 170, 0, 0, 171, 172, 173, 512,
	0, 174, 175, 176, 228, 547, 0, 177, 0, 0,
	0, 0, 178, 179, 180, 181, 470, 0, 0, 498,
	487, 488, 485, 486, 474, 0, 0, 466, 467, 0,
	0, 0, 0, 468, 71, 72, 475, 73, 0, 0,
	0, 0, 514, 480, 0, 0, 0, 74, 75, 1814,
	528, 185, 529, 76, 530, 531, 0, 77, 189, 190,
	78, 495, 513, 532, 533, 193, 0, 524, 0, 506,
	0, 79, 80, 81, 0, 82, 0, 83, 84, 85,
	0, 374, 86, 1816, 0, 507, 509, 0, 508, 510,
	88, 89, 90, 91, 534, 92, 535, 536, 0, 93,
	0, 94, 0, 0, 0, 527, 96, 0, 97, 0,
	0, 0, 479, 98, 99, 515, 493, 0, 0, 100,
	101, 537, 0, 102, 0, 103, 0, 0, 375, 0,
	104, 525, 0, 202, 0, 105, 106, 521, 523, 377,
	0, 109, 0, 107, 0, 376, 108, 538, 539, 540,
	0, 505, 0, 378, 110, 379, 111, 112, 0, 0,
	526, 380, 113, 381, 0, 114, 0, 0, 115, 0,
	116, 117, 118, 119, 120, 382, 121, 122, 125, 123,
	469, 124, 494, 522, 126, 541, 127, 128, 0, 0,
	0, 0, 0, 129, 212, 383, 130, 384, 516, 131,
	132, 133, 0, 517, 134, 215, 135, 0, 136, 137,
	138, 542, 139, 140, 0, 142, 143, 141, 144, 0,
	145, 385, 146, 147, 483, 148, 0, 149, 150, 151,
	0, 218, 152, 153, 511, 154, 155, 386, 156, 543,
	220, 157, 0, 158, 159, 160, 162, 544, 161, 518,
	0, 163, 0, 164, 165, 0, 223, 545, 546, 0,
	0, 166, 519, 520, 492, 167, 168, 1815, 170, 0,
	0, 171, 172, 173, 512, 0, 174, 175, 176, 228,
	547, 0, 177, 0, 0, 0, 0, 178, 179, 180,
	181, 470, 0, 0, 498, 487, 488, 485, 486, 474,
	0, 0, 466, 467, 0, 0, 0, 0, 468, 71,
	72, 475, 73, 0, 0, 0, 0, 514, 480, 0,
	0, 0, 74, 75, 183, 528, 185, 529, 76, 530,
	531, 0, 77, 189, 190, 78, 495, 513, 532, 533,
	193, 0, 524, 0, 506, 0, 79, 80, 81, 0,
	82, 0, 83, 84, 85, 0, 374, 86, 87, 0,
	507, 509, 0, 508, 510, 88, 89, 90, 91, 534,
	92, 535, 536, 0, 93, 0, 94, 0, 0, 0,
	527, 96, 0, 97, 0, 0, 0, 479, 98, 99,
	515, 493, 0, 0, 100, 101, 537, 0, 102, 0,
	103, 0, 0, 375, 0, 104, 525, 0, 202, 0,
	105, 106, 521, 523, 377, 0, 109, 0, 107, 0,
	376, 108, 538, 539, 540, 0, 505, 0, 378, 110,
	379, 111, 112, 0, 0, 526, 380, 113, 381, 0,
	114, 0, 0, 115, 0, 116, 117, 118, 119, 120,
	382, 121, 122, 125, 123, 469, 124, 494, 522, 126,
	541, 127, 128, 0, 0, 0, 0, 0, 129, 212,
	383, 130, 384, 516, 131, 132, 133, 0, 517, 134,
	215, 135, 0, 136, 137, 138, 542, 139, 140, 0,
	142, 143, 141, 144, 0, 145, 385, 146, 147, 483,
	148, 0, 149, 150, 151, 0, 218, 152, 153, 511,
	154, 155, 386, 156, 543, 220, 157, 0, 158, 159,
	160, 162, 544, 161, 518, 0, 163, 0, 164, 165,
	0, 223, 545, 546, 0, 0, 166, 519, 520, 492,
	167, 168, 169, 170, 0, 0, 171, 172, 173, 512,
	0, 174, 175, 176, 228, 547, 0, 177, 0, 0,
	0, 0, 178, 179, 180, 181, 470, 0, 0, 498,
	487, 488, 485, 486, 474, 0, 0, 466, 467, 0,
	0, 0, 0, 468, 71, 72, 475, 73, 0, 0,
	0, 0, 514, 480, 0, 0, 0, 74, 75, 183,
	528, 185, 529, 76, 530, 531, 0, 77, 189, 190,
	78, 495, 513, 532, 533, 193, 0, 524, 0, 506,
	0, 79, 80, 81, 0, 82, 0, 83, 84, 85,
	0, 374, 86, 87, 0, 507, 509, 0, 508, 510,
	88, 89, 90, 91, 534, 92, 535, 536, 0, 93,
	0, 94, 0, 0, 0, 527, 96, 0, 97, 0,
	0, 0, 479, 98, 99, 515, 493, 0, 0, 100,
	101, 537, 0, 102, 0, 103, 0, 0, 375, 0,
	104, 525, 0, 202, 0, 105, 106, 521, 523, 377,
	0, 109, 0, 107, 0, 376, 108, 538, 539, 540,
	0, 505, 0, 378, 110, 379, 111, 112, 0, 0,
	526, 380, 113, 381, 0, 114, 0, 0, 115, 0,
	116, 117, 118, 119, 120, 382, 121, 122, 125, 123,
	0, 124, 494, 522, 126, 541, 127, 128, 0, 0,
	0, 0, 0, 129, 212, 383, 130, 384, 516, 131,
	132, 133, 0, 517, 134, 215, 135, 0, 136, 137,
	138, 542, 139, 140, 0, 142, 143, 141, 144, 0,
	145, 385, 146, 147, 1151, 148, 0, 149, 150, 151,
	0, 218, 152, 153, 511, 154, 155, 386, 156, 543,
	220, 157, 0, 158, 159, 160, 162, 544, 161, 518,
	0, 163, 0, 164, 165, 0, 223, 545, 546, 0,
	0, 166, 519, 520, 492, 167, 168, 169, 170, 0,
	0, 171, 172, 173, 512, 0, 174, 175, 176, 228,
	547, 0, 177, 0, 0, 0, 0, 178, 179, 180,
	181, 498, 487, 488, 485, 486, 474, 0, 0, 0,
	0, 0, 1147, 1148, 0, 0, 71, 72, 1149, 73,
	0, 1150, 0, 0, 514, 480, 0, 0, 0, 74,
	75, 0, 528, 185, 529, 76, 530, 531, 0, 77,
	189, 190, 78, 495, 513, 532, 533, 193, 0, 524,
	0, 506, 0, 79, 80, 81, 0, 82, 0, 83,
	84, 85, 0, 374, 86, 1816, 0, 507, 509, 0,
	508, 510, 88, 89, 90, 91, 534, 92, 535, 536,
	0, 93, 0, 94, 0, 0, 0, 527, 96, 0,
	97, 0, 0, 0, 479, 98, 99, 515, 493, 0,
	0, 100, 101, 537, 0, 102, 0, 103, 0, 0,
	375, 0, 104, 525, 0, 202, 0, 105, 106, 521,
	523, 0, 0, 109, 0, 107, 0, 376, 108, 538,
	539, 540, 0, 505, 0, 0, 110, 379, 111, 112,
	0, 0, 526, 380, 113, 0, 0, 114, 0, 0,
	115, 0, 116, 117, 118, 119, 120, 382, 121, 122,
	125, 123, 469, 124, 494, 522, 126, 541, 127, 128,
	0, 0, 0, 0, 0, 129, 212, 383, 130, 384,
	516, 131, 132, 133, 0, 517, 134, 215, 135, 0,
	136, 137, 138, 542, 139, 140, 0, 142, 143, 141,
	144, 0, 145, 385, 146, 147, 483, 148, 0, 149,
	150, 151, 0, 218, 152, 153, 511, 154, 155, 0,
	156, 543, 220, 157, 0, 158, 159, 160, 162, 544,
	161, 518, 0, 163, 0, 164, 165, 0, 223, 545,
	546, 0, 0, 166, 519, 520, 492, 167, 168, 1815,
	170, 0, 0, 171, 172, 173, 512, 0, 174, 175,
	176, 228, 547, 0, 177, 0, 0, 0, 0, 178,
	179, 180, 181, 498, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 466, 467, 0, 0, 71, 72,
	468, 73, 0, 475, 0, 0, 514, 0, 0, 0,
	0, 74, 75, 183, 184, 185, 186, 76, 187, 188,
	0, 77, 189, 190, 78, 0, 513, 191, 192, 193,
	0, 524, 0, 506, 0, 79, 80, 81, 0, 82,
	0, 83, 84, 85, 0, 374, 86, 87, 0, 507,
	509, 0, 508, 510, 88, 89, 90, 91, 195, 92,
	196, 197, 0, 93, 0, 94, 0, 0, 0, 95,
	96, 0, 97, 0, 0, 0, 198, 98, 99, 515,
	0, 0, 0, 100, 101, 200, 0, 102, 0, 103,
	0, 0, 375, 0, 104, 525, 0, 202, 0, 105,
	106, 521, 523, 377, 0, 109, 0, 107, 0, 376,
	108, 205, 206, 207, 0, 208, 0, 378, 110, 379,
	111, 112, 0, 0, 526, 380, 113, 381, 0, 114,
	0, 0, 115, 0, 116, 117, 118, 119, 120, 382,
	121, 122, 125, 123, 0, 124, 0, 522, 126, 211,
	127, 128, 0, 0, 0, 0, 0, 129, 212, 383,
	130, 384, 516, 131, 132, 133, 0, 517, 134, 215,
	135, 0, 136, 137, 138, 216, 139, 140, 0, 142,
	143, 141, 144, 0, 145, 385, 146, 147, 217, 148,
	0, 149, 150, 151, 0, 218, 152, 153, 511, 154,
	155, 386, 156, 219, 220, 157, 0, 158, 159, 160,
	162, 221, 161, 518, 0, 163, 0, 164, 165, 0,
	223, 224, 225, 0, 0, 166, 519, 520, 0, 167,
	168, 169, 170, 0, 0, 171, 172, 173, 512, 0,
	174, 175, 176, 228, 229, 0, 177, 0, 368, 0,
	0, 178, 179, 180, 181, 0, 0, 0, 0, 0,
	0, 0, 0, 71, 72, 0, 73, 0, 0, 0,
	0, 182, 0, 0, 0, 1588, 74, 75, 183, 184,
	185, 186, 76, 187, 188, 0, 77, 189, 190, 78,
	0, 0, 191, 192, 193, 0, 194, 0, 373, 0,
	79, 80, 81, 0, 82, 0, 83, 84, 85, 0,
	374, 86, 87, 0, 0, 0, 0, 0, 0, 88,
	89, 90, 91, 195, 92, 196, 197, 0, 93, 0,
	94, 0, 0, 0, 95, 96, 0, 97, 0, 0,
	0, 198, 98, 99, 199, 0, 0, 0, 100, 101,
	200, 0, 102, 0, 103, 0, 0, 375, 0, 104,
	201, 0, 202, 0, 105, 106, 203, 204, 377, 0,
	109, 0, 107, 0, 376, 108, 205, 206, 207, 0,
	208, 0, 378, 110, 379, 111, 112, 0, 0, 209,
	380, 113, 381, 0, 114, 0, 0, 115, 0, 116,
	117, 118, 119, 120, 382, 121, 122, 125, 123, 0,
	124, 0, 210, 126, 211, 127, 128, 0, 0, 0,
	0, 0, 129, 212, 383, 130, 384, 213, 131, 132,
	133, 0, 214, 134, 215, 135, 0, 136, 137, 138,
	216, 139, 140, 0, 142, 143, 141, 144, 0, 145,
	385, 146, 147, 217, 148, 0, 149, 150, 151, 58,
	218, 152, 153, 0, 154, 155, 386, 156, 219, 220,
	157, 0, 158, 159, 160, 162, 221, 161, 222, 0,
	163, 60, 164, 165, 0, 223, 224, 225, 0, 0,
	166, 226, 227, 0, 167, 168, 169, 170, 0, 0,
	171, 172, 173, 0, 0, 174, 175, 176, 372, 229,
	0, 177, 0, 0, 0, 56, 178, 179, 180, 181,
	0, 57, 0, 368, 763, 0, 764, 759, 754, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 71, 72,
	55, 73, 0, 0, 0, 0, 182, 0, 0, 0,
	0, 74, 75, 183, 184, 185, 186, 76, 187, 188,
	0, 77, 189, 190, 78, 0, 0, 191, 192, 193,
	0, 194, 0, 373, 0, 79, 80, 81, 0, 82,
	0, 83, 84, 85, 0, 374, 86, 87, 0, 0,
	0, 0, 0, 0, 88, 89, 90, 91, 195, 92,
	196, 197, 767, 93, 0, 94, 0, 0, 0, 95,
	96, 0, 97, 0, 0, 0, 198, 98, 99, 199,
	756, 0, 0, 100, 101, 200, 0, 102, 0, 103,
	0, 0, 375, 0, 104, 201, 0, 202, 0, 105,
	106, 203, 204, 377, 0, 109, 0, 107, 0, 376,
	108, 205, 206, 207, 0, 208, 0, 378, 110, 379,
	111, 112, 0, 0, 209, 380, 113, 381, 0, 114,
	0, 0, 115, 0, 116, 117, 118, 119, 120, 382,
	121, 122, 125, 123, 0, 124, 0, 210, 126, 211,
	127, 128, 0, 757, 0, 0, 0, 129, 212, 383,
	130, 384, 213, 131, 132, 133, 0, 214, 134, 215,
	135, 0, 136, 137, 138, 216, 139, 140, 0, 142,
	143, 141, 144, 0, 145, 385, 146, 147, 217, 148,
	0, 149, 150, 151, 0, 218, 152, 153, 0, 154,
	155, 386, 156, 219, 220, 157, 0, 158, 159, 160,
	162, 221, 161, 222, 0, 163, 0, 164, 165, 0,
	223, 224, 225, 0, 0, 166, 226, 227, 755, 167,
	168, 169, 170, 0, 0, 171, 172, 173, 0, 0,
	174, 175, 176, 228, 229, 0, 177, 0, 0, 0,
	0, 178, 179, 180, 181, 368, 763, 0, 764, 759,
	754, 0, 0, 0, 0, 0, 765, 760, 0, 0,
	71, 72, 0, 73, 0, 0, 0, 0, 182, 0,
	0, 0, 0, 74, 75, 183, 184, 185, 186, 76,
	187, 188, 0, 77, 189, 190, 78, 0, 0, 191,
	192, 193, 0, 194, 0, 373, 0, 79, 80, 81,
	0, 82, 0, 83, 84, 85, 0, 374, 86, 87,
	0, 0, 0, 0, 0, 0, 88, 89, 90, 91,
	195, 92, 196, 197, 750, 93, 0, 94, 0, 0,
	0, 95, 96, 0, 97, 0, 0, 0, 198, 98,
	99, 199, 756, 0, 0, 100, 101, 200, 0, 102,
	0, 103, 0, 0, 375, 0, 104, 201, 0, 202,
	0, 105, 106, 203, 204, 377, 0, 109, 0, 107,
	0, 376, 108, 205, 206, 207, 0, 208, 0, 378,
	110, 379, 111, 112, 0, 0, 209, 380, 113, 381,
	0, 114, 0, 0, 115, 0, 116, 117, 118, 119,
	120, 382, 121, 122, 125, 123, 0, 124, 0, 210,
	126, 211, 127, 128, 0, 757, 0, 0, 0, 129,
	212, 383, 130, 384, 213, 131, 132, 133, 0, 214,
	134, 215, 135, 0, 136, 137, 138, 216, 139, 140,
	0, 142, 143, 141, 144, 0, 145, 385, 146, 147,
	217, 148, 0, 149, 150, 151, 0, 218, 152, 153,
	0, 154, 155, 386, 156, 219, 220, 157, 0, 158,
	159, 160, 162, 221, 161, 222, 0, 163, 0, 164,
	165, 0, 223, 224, 225, 0, 0, 166, 226, 227,
	755, 167, 168, 169, 170, 0, 0, 171, 172, 173,
	0, 0, 174, 175, 176, 228, 229, 0, 177, 0,
	0, 0, 0, 178, 179, 180, 181, 368, 763, 0,
	764, 759, 754, 0, 0, 0, 0, 0, 765, 760,
	0, 0, 71, 72, 0, 73, 0, 0, 0, 0,
	182, 0, 0, 0, 0, 74, 75, 183, 184, 185,
	186, 76, 187, 188, 0, 77, 189, 190, 78, 0,
	0, 191, 192, 193, 0, 194, 0, 373, 0, 79,
	80, 81, 0, 82, 0, 83, 84, 85, 0, 374,
	86, 87, 0, 0, 0, 0, 0, 0, 88, 89,
	90, 91, 195, 92, 196, 197, 0, 93, 0, 94,
	0, 0, 0, 95, 96, 0, 97, 0, 0, 0,
	198, 98, 99, 199, 756, 0, 0, 100, 101, 200,
	0, 102, 0, 103, 0, 0, 375, 0, 104, 201,
	0, 202, 0, 105, 106, 203, 204, 377, 0, 109,
	0, 107, 0, 376, 108, 205, 206, 207, 0, 208,
	0, 378, 110, 379, 111, 112, 0, 0, 209, 380,
	113, 381, 0, 114, 0, 0, 115, 0, 116, 117,
	118, 119, 120, 382, 121, 122, 125, 123, 0, 124,
	0, 210, 126, 211, 127, 128, 0, 757, 0, 0,
	0, 129, 212, 383, 130, 384, 213, 131, 132, 133,
	0, 214, 134, 215, 135, 0, 136, 137, 138, 216,
	139, 140, 0, 142, 143, 141, 144, 0, 145, 385,
	146, 147, 217, 148, 0, 149, 150, 151, 0, 218,
	152, 153, 0, 154, 155, 386, 156, 219, 220, 157,
	0, 158, 159, 160, 162, 221, 161, 222, 0, 163,
	0, 164, 165, 0, 223, 224, 225, 0, 0, 166,
	226, 227, 755, 167, 168, 169, 170, 0, 0, 171,
	172, 173, 0, 0, 174, 175, 176, 228, 229, 68,
	177, 0, 0, 0, 0, 178, 179, 180, 181, 0,
	0, 0, 0, 0, 71, 72, 0, 73, 0, 0,
	765, 760, 182, 0, 0, 0, 0, 74, 75, 183,
	184, 185, 186, 76, 187, 188, 0, 77, 189, 190,
	78, 0, 0, 191, 192, 193, 0, 194, 0, 0,
	0, 79, 80, 81, 0, 82, 0, 83, 84, 85,
	0, 0, 86, 87, 0, 0, 0, 0, 0, 0,
	88, 89, 90, 91, 195, 92, 196, 197, 0, 93,
	0, 94, 0, 0, 0, 95, 96, 0, 97, 0,
	0, 0, 198, 98, 99, 199, 0, 0, 0, 100,
	101, 200, 0, 102, 0, 103, 0, 0, 0, 0,
	104, 201, 0, 202, 0, 105, 106, 203, 204, 0,
	0, 109, 0, 107, 0, 0, 108, 205, 206, 207,
	0, 208, 0, 0, 110, 0, 111, 112, 0, 0,
	209, 0, 113, 0, 0, 114, 0, 0, 115, 0,
	116, 117, 118, 119, 120, 0, 121, 122, 125, 123,
	0, 124, 0, 210, 126, 211, 127, 128, 0, 0,
	334, 0, 0, 129, 212, 0, 130, 0, 213, 131,
	132, 133, 0, 214, 134, 215, 135, 0, 136, 137,
	138, 216, 139, 140, 0, 142, 143, 141, 144, 0,
	145, 0, 146, 147, 217, 148, 0, 149, 150, 151,
	58, 218, 152, 153, 0, 154, 155, 0, 156, 219,
	220, 157, 0, 158, 159, 160, 162, 221, 161, 222,
	0, 163, 60, 164, 165, 0, 223, 224, 225, 0,
	0, 166, 226, 227, 0, 167, 168, 169, 170, 0,
	0, 171, 172, 173, 0, 0, 174, 175, 176, 372,
	229, 0, 177, 0, 68, 0, 56, 178, 179, 180,
	181, 0, 57, 0, 0, 0, 0, 0, 0, 71,
	72, 0, 73, 0, 0, 0, 0, 182, 0, 0,
	0, 1052, 74, 75, 183, 184, 185, 186, 76, 187,
	188, 0, 77, 189, 190, 78, 0, 0, 191, 192,
	193, 0, 194, 0, 0, 0, 79, 80, 81, 0,
	82, 0, 83, 84, 85, 0, 0, 86, 87, 0,
	0, 0, 0, 0, 0, 88, 89, 90, 91, 195,
	92, 196, 197, 0, 93, 0, 94, 0, 0, 0,
	95, 96, 0, 97, 0, 0, 0, 198, 98, 99,
	199, 0, 0, 0, 100, 101, 200, 0, 102, 0,
	103, 0, 0, 0, 0, 104, 201, 0, 202, 0,
	105, 106, 203, 204, 0, 0, 109, 0, 107, 0,
	0, 108, 205, 206, 207, 0, 208, 0, 0, 110,
	0, 111, 112, 0, 0, 209, 0, 113, 0, 0,
	114, 0, 0, 115, 0, 116, 117, 118, 119, 120,
	0, 121, 122, 125, 123, 0, 124, 0, 210, 126,
	211, 127, 128, 0, 0, 0, 0, 0, 129, 212,
	0, 130, 0, 213, 131, 132, 133, 0, 214, 134,
	215, 135, 0, 136, 137, 138, 216, 139, 140, 0,
	142, 143, 141, 144, 0, 145, 0, 146, 147, 217,
	148, 0, 149, 150, 151, 58, 218, 152, 153, 0,
	154, 155, 0, 156, 219, 220, 157, 0, 158, 159,
	160, 162, 221, 161, 222, 0, 163, 60, 164, 165,
	0, 223, 224, 225, 0, 0, 166, 226, 227, 0,
	167, 168, 169, 170, 0, 0, 171, 172, 173, 0,
	0, 174, 175, 176, 372, 229, 0, 177, 0, 68,
	0, 56, 178, 179, 180, 181, 0, 57, 0, 0,
	0, 0, 0, 0, 71, 72, 0, 73, 0, 0,
	0, 0, 182, 0, 1275, 0, 55, 74, 75, 183,
	184, 185, 186, 76, 187, 188, 0, 77, 189, 190,
	78, 0, 0, 191, 192, 193, 0, 194, 0, 0,
	0, 79, 80, 81, 0, 82, 0, 83, 84, 85,
	0, 0, 86, 87, 0, 0, 0, 0, 0, 0,
	88, 89, 90, 91, 195, 92, 196, 197, 0, 93,
	0, 94, 0, 0, 0, 95, 96, 0, 97, 0,
	0, 0, 198, 98, 99, 199, 0, 0, 0, 100,
	101, 200, 0, 102, 0, 103, 0, 0, 0, 0,
	104, 201, 0, 202, 0, 105, 106, 203, 204, 0,
	0, 109, 0, 107, 0, 0, 108, 205, 206, 207,
	0, 208, 0, 0, 110, 0, 111, 112, 0, 0,
	209, 0, 113, 0, 0, 114, 0, 0, 115, 0,
	116, 117, 118, 119, 120, 0, 121, 122, 125, 123,
	0, 124, 0, 210, 126, 211, 127, 128, 0, 0,
	0, 0, 0, 129, 212, 0, 130, 0, 213, 131,
	132, 133, 0, 214, 134, 215, 135, 0, 136, 137,
	138, 216, 139, 140, 0, 142, 143, 141, 144, 0,
	145, 0, 146, 147, 217, 148, 0, 149, 150, 151,
	0, 218, 152, 153, 0, 154, 155, 0, 156, 219,
	220, 157, 0, 158, 159, 160, 162, 221, 161, 222,
	0, 163, 0, 164, 165, 0, 223, 224, 225, 0,
	0, 166, 226, 227, 0, 167, 168, 169, 170, 0,
	0, 171, 172, 173, 0, 0, 174, 175, 176, 228,
	229, 0, 177, 0, 0, 68, 0, 178, 179, 180,
	181, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	71, 72, 0, 73, 0, 0, 0, 0, 182, 0,
	0, 0, 456, 74, 75, 183, 184, 185, 186, 76,
	187, 188, 0, 77, 189, 190, 78, 0, 0, 191,
	192, 193, 0, 194, 0, 0, 0, 79, 80, 81,
	0, 82, 0, 83, 84, 85, 0, 0, 86, 87,
	0, 0, 0, 0, 0, 0, 88, 89, 90, 91,
	195, 92, 196, 197, 0, 93, 0, 94, 0, 0,
	0, 95, 96, 0, 97, 0, 0, 0, 198, 98,
	99, 199, 0, 0, 0, 100, 101, 200, 0, 102,
	0, 103, 0, 0, 0, 0, 104, 201, 0, 202,
	0, 105, 106, 203, 204, 0, 0, 109, 0, 107,
	0, 0, 108, 205, 206, 207, 0, 208, 0, 0,
	110, 0, 111, 112, 0, 0, 209, 0, 113, 0,
	0, 114, 0, 0, 115, 0, 116, 117, 118, 119,
	120, 0, 121, 122, 125, 123, 0, 124, 0, 210,
	126, 211, 127, 128, 0, 0, 334, 0, 0, 129,
	212, 0, 130, 0, 213, 131, 132, 133, 0, 214,
	134, 215, 135, 0, 136, 137, 138, 216, 139, 140,
	0, 142, 143, 141, 144, 0, 145, 0, 146, 147,
	217, 148, 0, 149, 150, 151, 0, 218, 152, 153,
	0, 154, 155, 0, 156, 219, 220, 157, 0, 158,
	159, 160, 162, 221, 161, 222, 0, 163, 0, 164,
	165, 0, 223, 224, 225, 0, 0, 166, 226, 227,
	0, 167, 168, 169, 170, 0, 0, 171, 172, 173,
	0, 0, 174, 175, 176, 228, 229, 0, 177, 0,
	68, 0, 0, 178, 179, 180, 181, 0, 0, 0,
	0, 0, 0, 0, 0, 71, 72, 0, 73, 0,
	0, 0, 0, 182, 0, 0, 0, 1052, 74, 75,
	183, 184, 185, 186, 76, 187, 188, 0, 77, 189,
	190, 78, 0, 0, 191, 192, 193, 0, 194, 0,
	0, 0, 79, 80, 81, 0, 82, 0, 83, 84,
	85, 0, 0, 86, 87, 0, 0, 0, 0, 0,
	0, 88, 89, 90, 91, 195, 92, 196, 197, 0,
	93, 0, 94, 0, 0, 0, 95, 96, 0, 97,
	0, 0, 0, 198, 98, 99, 199, 0, 0, 0,
	100, 101, 200, 0, 102, 0, 103, 0, 0, 0,
	0, 104, 201, 0, 202, 0, 105, 106, 203, 204,
	0, 0, 109, 0, 107, 0, 0, 108, 205, 206,
	207, 0, 208, 0, 0, 110, 0, 111, 112, 0,
	0, 209, 0, 113, 0, 0, 114, 0, 0, 115,
	0, 116, 117, 118, 119, 120, 0, 121, 122, 125,
	123, 0, 124, 0, 210, 126, 211, 127, 128, 0,
	0, 0, 0, 0, 129, 212, 0, 130, 0, 213,
	131, 132, 133, 0, 214, 134, 215, 135, 0, 136,
	137, 138, 216, 139, 140, 0, 142, 143, 141, 144,
	0, 145, 0, 146, 147, 217, 148, 0, 149, 150,
	151, 0, 218, 152, 153, 0, 154, 155, 0, 156,
	219, 220, 157, 0, 158, 159, 160, 162, 221, 161,
	222, 0, 163, 0, 164, 165, 0, 223, 224, 225,
	0, 0, 166, 226, 227, 0, 167, 168, 169, 170,
	0, 0, 171, 172, 173, 0, 0, 174, 175, 176,
	228, 229, 0, 177, 0, 0, 68, 0, 178, 179,
	180, 181, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 71, 72, 0, 73, 0, 0, 0, 0, 182,
	0, 0, 0, 576, 74, 75, 183, 184, 185, 186,
	76, 187, 188, 0, 77, 189, 190, 78, 0, 0,
	191, 192, 193, 0, 194, 0, 0, 0, 79, 80,
	81, 0, 82, 0, 83, 84, 85, 0, 0, 86,
	87, 0, 0, 0, 0, 0, 0, 88, 89, 90,
	91, 195, 92, 196, 197, 0, 93, 0, 94, 0,
	0, 0, 95, 96, 0, 97, 0, 0, 0, 198,
	98, 99, 199, 0, 0, 0, 100, 101, 200, 0,
	102, 0, 103, 0, 0, 0, 0, 104, 201, 0,
	202, 0, 105, 106, 203, 204, 0, 0, 109, 0,
	107, 0, 0, 108, 205, 206, 207, 0, 208, 0,
	0, 110, 0, 111, 112, 0, 0, 209, 0, 113,
	0, 0, 114, 0, 0, 115, 0, 116, 117, 118,
	119, 120, 0, 121, 122, 125, 123, 0, 124, 0,
	210, 126, 211, 127, 128, 0, 0, 0, 0, 0,
	129, 212, 0, 130, 0, 213, 131, 132, 133, 0,
	214, 134, 215, 135, 0, 136, 137, 138, 216, 139,
	140, 0, 142, 143, 141, 144, 0, 145, 0, 146,
	147, 217, 148, 0, 149, 150, 151, 0, 218, 152,
	153, 0, 154, 155, 0, 156, 219, 220, 157, 0,
	158, 159, 160, 162, 221, 161, 222, 0, 163, 0,
	164, 165, 0, 223, 224, 225, 0, 0, 166, 226,
	227, 0, 167, 168, 169, 170, 0, 0, 171, 172,
	173, 0, 0, 174, 175, 176, 228, 229, 0, 177,
	0, 68, 0, 0, 178, 179, 180, 181, 0, 0,
	0, 0, 0, 0, 0, 0, 71, 72, 0, 73,
	0, 0, 0, 0, 182, 0, 0, 0, 963, 74,
	75, 183, 184, 185, 186, 76, 187, 188, 0, 77,
	189, 190, 78, 0, 0, 191, 192, 193, 0, 194,
	0, 0, 0, 79, 80, 81, 0, 82, 0, 83,
	84, 85, 0, 0, 86, 87, 0, 0, 0, 0,
	0, 0, 88, 89, 90, 91, 195, 92, 196, 197,
	0, 93, 0, 94, 0, 0, 0, 95, 96, 0,
	97, 0, 0, 0, 198, 98, 99, 199, 0, 0,
	0, 100, 101, 200, 0, 102, 0, 103, 0, 0,
	0, 0, 104, 201, 0, 202, 0, 105, 106, 203,
	204, 0, 0, 109, 0, 107, 0, 0, 108, 205,
	206, 207, 0, 208, 0, 0, 110, 0, 111, 112,
	0, 0, 209, 0, 113, 0, 0, 114, 0, 0,
	115, 0, 116, 117, 118, 119, 120, 0, 121, 122,
	125, 123, 0, 124, 0, 210, 126, 211, 127, 128,
	0, 0, 0, 0, 0, 129, 212, 0, 130, 0,
	213, 131, 132, 133, 0, 214, 134, 215, 135, 0,
	136, 137, 138, 216, 139, 140, 0, 142, 143, 141,
	144, 0, 145, 0, 146, 147, 217, 148, 0, 149,
	150, 151, 0, 218, 152, 153, 0, 154, 155, 0,
	156, 219, 220, 157, 0, 158, 159, 160, 162, 221,
	161, 222, 0, 163, 0, 164, 165, 0, 223, 224,
	225, 0, 0, 166, 226, 227, 0, 167, 168, 169,
	170, 0, 0, 171, 172, 173, 0, 0, 174, 175,
	176, 228, 229, 0, 177, 0, 68, 0, 0, 178,
	179, 180, 181, 0, 0, 0, 0, 0, 0, 0,
	0, 71, 72, 0, 73, 0, 0, 0, 0, 182,
	0, 0, 0, 1489, 74, 75, 183, 184, 185, 186,
	76, 187, 188, 0, 77, 189, 190, 78, 0, 0,
	191, 192, 193, 0, 194, 0, 0, 0, 79, 80,
	81, 0, 82, 0, 83, 84, 85, 0, 0, 86,
	87, 0, 0, 0, 0, 0, 0, 88, 89, 90,
	91, 195, 92, 196, 197, 0, 93, 0, 94, 0,
	0, 0, 95, 96, 0, 97, 0, 0, 0, 198,
	98, 99, 199, 0, 0, 0, 100, 101, 200, 0,
	102, 0, 103, 0, 0, 0, 0, 104, 201, 0,
	202, 0, 105, 106, 203, 204, 0, 0, 109, 0,
	107, 0, 0, 108, 205, 206, 207, 0, 208, 0,
	0, 110, 0, 111, 112, 0, 0, 209, 0, 113,
	0, 0, 114, 0, 0, 115, 0, 116, 117, 118,
	119, 120, 0, 121, 122, 125, 123, 0, 124, 0,
	210, 126, 211, 127, 128, 0, 0, 0, 0, 0,
	129, 212, 0, 130, 0, 213, 131, 132, 133, 0,
	214, 134, 215, 135, 0, 136, 137, 138, 216, 139,
	140, 0, 142, 143, 141, 144, 0, 145, 0, 146,
	147, 217, 148, 0, 149, 150, 151, 0, 218, 152,
	153, 0, 154, 155, 0, 156, 219, 220, 157, 0,
	158, 159, 160, 162, 221, 161, 222, 0, 163, 0,
	164, 165, 0, 223, 224, 225, 0, 0, 166, 226,
	227, 0, 167, 168, 169, 170, 0, 0, 171, 172,
	173, 0, 0, 174, 175, 176, 228, 229, 0, 177,
	0, 68, 0, 0, 178, 179, 180, 181, 0, 0,
	0, 0, 0, 0, 0, 0, 71, 72, 0, 73,
	0, 0, 0, 0, 182, 0, 0, 0, 558, 74,
	75, 183, 184, 185, 186, 76, 187, 188, 0, 77,
	189, 190, 78, 0, 0, 191, 192, 193, 0, 194,
	0, 0, 0, 79, 80, 81, 0, 82, 0, 83,
	84, 85, 0, 0, 86, 87, 0, 0, 0, 0,
	0, 0, 88, 89, 734, 91, 195, 92, 196, 197,
	0, 93, 0, 94, 0, 0, 0, 95, 96, 0,
	97, 0, 0, 0, 198, 98, 99, 199, 0, 0,
	0, 100, 101, 200, 0, 102, 0, 103, 0, 0,
	0, 0, 104, 201, 0, 202, 0, 105, 106, 203,
	204, 0, 0, 109, 0, 107, 0, 0, 108, 205,
	206, 207, 0, 208, 0, 0, 110, 0, 111, 112,
	0, 0, 209, 0, 113, 0, 0, 114, 0, 0,
	115, 0, 116, 117, 118, 119, 120, 0, 121, 122,
	125, 123, 0, 124, 0, 210, 126, 211, 127, 128,
	0, 0, 0, 0, 0, 129, 212, 0, 130, 0,
	213, 131, 132, 133, 0, 214, 134, 215, 135, 0,
	136, 137, 138, 216, 139, 140, 0, 142, 143, 141,
	144, 0, 145, 0, 146, 147, 217, 148, 0, 149,
	150, 151, 0, 218, 152, 153, 0, 154, 155, 0,
	156, 219, 220, 157, 0, 158, 159, 160, 162, 221,
	161, 222, 0, 163, 733, 164, 165, 0, 223, 224,
	225, 0, 0, 166, 226, 227, 0, 167, 168, 169,
	170, 0, 0, 171, 172, 173, 0, 0, 174, 175,
	176, 228, 229, 0, 177, 68, 0, 0, 0, 178,
	179, 180, 181, 0, 0, 0, 0, 0, 0, 0,
	71, 72, 0, 73, 0, 0, 737, 0, 182, 0,
	0, 0, 0, 74, 75, 183, 184, 185, 186, 76,
	187, 188, 0, 77, 189, 190, 78, 0, 0, 191,
	192, 193, 0, 194, 0, 0, 0, 79, 80, 81,
	0, 82, 0, 83, 84, 85, 0, 0, 86, 87,
	0, 0, 0, 0, 0, 0, 88, 89, 90, 91,
	195, 92, 196, 197, 0, 93, 0, 94, 0, 0,
	0, 95, 96, 0, 97, 0, 0, 0, 198, 98,
	99, 199, 0, 0, 0, 100, 101, 200, 0, 102,
	0, 103, 0, 0, 0, 0, 104, 201, 0, 202,
	0, 105, 106, 203, 204, 0, 0, 109, 0, 107,
	0, 0, 108, 205, 206, 207, 0, 208, 0, 0,
	110, 0, 111, 112, 0, 0, 209, 0, 113, 0,
	0, 114, 0, 0, 115, 0, 116, 117, 118, 119,
	120, 0, 121, 122, 125, 123, 0, 124, 0, 210,
	126, 211, 127, 128, 0, 0, 0, 0, 0, 129,
	212, 0, 130, 0, 213, 131, 132, 133, 0, 214,
	134, 215, 135, 0, 136, 137, 138, 216, 139, 140,
	0, 142, 143, 141, 144, 0, 145, 0, 146, 147,
	217, 148, 0, 149, 150, 151, 0, 218, 152, 153,
	0, 154, 155, 0, 156, 219, 220, 157, 0, 158,
	159, 160, 162, 221, 161, 222, 0, 163, 0, 164,
	165, 0, 223, 224, 225, 0, 0, 166, 226, 227,
	0, 167, 168, 169, 170, 0, 0, 171, 172, 173,
	0, 0, 174, 175, 176, 228, 229, 0, 177, 368,
	0, 0, 0, 178, 179, 180, 181, 0, 0, 0,
	0, 0, 0, 0, 71, 72, 0, 73, 0, 0,
	737, 0, 182, 0, 0, 0, 0, 74, 75, 183,
	184, 185, 186, 76, 187, 188, 0, 77, 189, 190,
	78, 0, 0, 191, 192, 193, 0, 194, 0, 373,
	0, 79, 80, 81, 0, 82, 0, 83, 84, 85,
	0, 374, 86, 87, 0, 0, 0, 0, 0, 0,
	88, 89, 90, 91, 195, 92, 196, 197, 0, 93,
	0, 94, 0, 0, 0, 95, 96, 0, 97, 0,
	0, 0, 198, 98, 99, 199, 0, 0, 0, 100,
	101, 200, 0, 102, 0, 103, 0, 0, 375, 0,
	104, 201, 0, 202, 0, 105, 106, 203, 204, 377,
	0, 109, 0, 107, 0, 376, 108, 205, 206, 207,
	0, 208, 0, 378, 110, 379, 111, 112, 0, 0,
	209, 380, 113, 381, 0, 114, 0, 0, 115, 0,
	116, 117, 118, 119, 120, 382, 121, 122, 125, 123,
	0, 124, 0, 210, 126, 211, 127, 128, 0, 0,
	0, 0, 0, 129, 212, 383, 130, 384, 213, 131,
	132, 133, 0, 214, 134, 215, 135, 0, 136, 137,
	138, 216, 139, 140, 0, 142, 143, 141, 144, 0,
	145, 385, 146, 147, 217, 148, 0, 149, 150, 151,
	0, 218, 152, 153, 0, 154, 155, 386, 156, 219,
	220, 157, 0, 158, 159, 160, 162, 221, 161, 222,
	0, 163, 0, 164, 165, 0, 223, 224, 225, 0,
	0, 166, 226, 227, 0, 167, 168, 169, 170, 0,
	0, 171, 172, 173, 0, 0, 174, 175, 176, 228,
	229, 68, 177, 0, 0, 0, 0, 178, 179, 180,
	181, 0, 0, 0, 0, 0, 71, 72, 0, 73,
	0, 0, 0, 0, 182, 0, 0, 0, 0, 74,
	75, 183, 184, 185, 186, 76, 187, 188, 0, 77,
	189, 190, 78, 0, 0, 191, 192, 193, 931, 194,
	0, 0, 0, 79, 80, 81, 0, 82, 929, 83,
	84, 85, 0, 0, 86, 87, 0, 0, 0, 0,
	0, 0, 88, 89, 90, 91, 195, 92, 196, 197,
	0, 93, 0, 94, 0, 0, 0, 95, 96, 0,
	97, 0, 0, 0, 198, 98, 99, 199, 0, 1029,
	0, 100, 101, 200, 0, 102, 0, 103, 934, 0,
	0, 0, 104, 201, 0, 202, 0, 105, 106, 203,
	204, 0, 0, 109, 1027, 107, 0, 0, 108, 205,
	206, 207, 0, 208, 0, 0, 110, 0, 111, 112,
	0, 0, 209, 0, 113, 0, 0, 114, 0, 0,
	115, 0, 116, 117, 118, 119, 120, 0, 121, 122,
	125, 123, 0, 124, 0, 210, 126, 211, 127, 128,
	0, 0, 0, 0, 0, 129, 212, 0, 130, 0,
	213, 131, 132, 133, 0, 214, 134, 215, 135, 933,
	136, 137, 138, 216, 139, 140, 0, 142, 143, 141,
	144, 0, 145, 0, 146, 147, 217, 148, 0, 149,
	150, 151, 0, 218, 152, 153, 0, 154, 155, 0,
	156, 219, 220, 157, 0, 158, 159, 160, 162, 221,
	161, 222, 0, 163, 0, 164, 165, 0, 223, 224,
	225, 0, 0, 166, 226, 227, 0, 167, 168, 169,
	170, 0, 1028, 171, 172, 173, 0, 0, 174, 175,
	176, 228, 229, 68, 177, 0, 0, 0, 0, 178,
	179, 180, 181, 0, 0, 0, 0, 0, 71, 72,
	0, 73, 0, 0, 0, 0, 182, 0, 0, 0,
	0, 74, 75, 183, 184, 185, 186, 76, 187, 188,
	0, 77, 189, 190, 78, 0, 0, 191, 192, 193,
	931, 194, 0, 0, 926, 79, 80, 81, 0, 82,
	929, 83, 84, 85, 0, 0, 86, 87, 0, 0,
	0, 0, 0, 0, 88, 89, 90, 91, 195, 92,
	196, 197, 0, 93, 0, 94, 0, 0, 0, 95,
	96, 0, 97, 0, 0, 0, 198, 98, 99, 199,
	0, 0, 0, 100, 101, 200, 0, 102, 0, 103,
	934, 0, 0, 0, 104, 201, 0, 202, 0, 105,
	106, 925, 204, 0, 0, 109, 0, 107, 0, 0,
	108, 205, 206, 207, 0, 208, 0, 0, 110, 0,
	111, 112, 0, 0, 209, 0, 113, 0, 0, 114,
	0, 0, 115, 0, 116, 117, 118, 119, 120, 0,
	121, 122, 125, 123, 0, 124, 0, 210, 126, 211,
	127, 128, 0, 0, 0, 0, 0, 129, 212, 0,
	130, 0, 213, 131, 132, 133, 0, 214, 134, 215,
	135, 933, 136, 137, 138, 216, 139, 140, 0, 142,
	143, 141, 144, 0, 145, 0, 146, 147, 217, 148,
	0, 149, 150, 151, 0, 218, 152, 153, 0, 154,
	155, 0, 156, 219, 220, 157, 0, 158, 159, 160,
	162, 221, 161, 222, 0, 163, 0, 164, 165, 0,
	223, 224, 225, 0, 0, 166, 226, 227, 0, 167,
	168, 169, 170, 0, 932, 171, 172, 173, 0, 0,
	174, 175, 176, 228, 229, 68, 177, 0, 0, 0,
	0, 178, 179, 180, 181, 0, 0, 0, 0, 0,
	71, 72, 0, 73, 0, 0, 0, 0, 182, 0,
	1275, 0, 0, 74, 75, 183, 184, 185, 186, 76,
	187, 188, 0, 77, 189, 190, 78, 0, 0, 191,
	192, 193, 0, 194, 0, 0, 0, 79, 80, 81,
	0, 82, 0, 83, 84, 85, 0, 0, 86, 87,
	0, 0, 0, 0, 0, 0, 88, 89, 90, 91,
	195, 92, 196, 197, 0, 93, 0, 94, 0, 0,
	0, 95, 96, 0, 97, 0, 0, 0, 198, 98,
	99, 199, 0, 0, 0, 100, 101, 200, 0, 102,
	0, 103, 0, 0, 0, 0, 104, 201, 0, 202,
	0, 105, 106, 203, 204, 0, 0, 109, 0, 107,
	0, 0, 108, 205, 206, 207, 0, 208, 0, 0,
	110, 0, 111, 112, 0, 0, 209, 0, 113, 0,
	0, 114, 0, 0, 115, 0, 116, 117, 118, 119,
	120, 0, 121, 122, 125, 123, 0, 124, 0, 210,
	126, 211, 127, 128, 0, 0, 0, 0, 0, 129,
	212, 0, 130, 0, 213, 131, 132, 133, 0, 214,
	134, 215, 135, 0, 136, 137, 138, 216, 139, 140,
	0, 142, 143, 141, 144, 0, 145, 0, 146, 147,
	217, 148, 0, 149, 150, 151, 0, 218, 152, 153,
	0, 154, 155, 0, 156, 219, 220, 157, 0, 158,
	159, 160, 162, 221, 161, 222, 0, 163, 0, 164,
	165, 0, 223, 224, 225, 0, 0, 166, 226, 227,
	0, 167, 168, 169, 170, 0, 0, 171, 172, 173,
	0, 0, 174, 175, 176, 228, 229, 68, 177, 0,
	0, 0, 0, 178, 179, 180, 181, 0, 0, 0,
	0, 0, 71, 72, 0, 73, 0, 0, 0, 0,
	182, 0, 0, 0, 0, 74, 75, 183, 184, 185,
	186, 76, 187, 188, 0, 77, 189, 190, 78, 0,
	0, 191, 192, 193, 0, 194, 0, 0, 0, 79,
	80, 81, 0, 82, 0, 83, 84, 85, 0, 0,
	86, 87, 0, 0, 0, 0, 0, 0, 88, 89,
	90, 91, 195, 92, 196, 197, 0, 93, 0, 94,
	0, 0, 0, 95, 96, 0, 97, 0, 0, 0,
	198, 98, 99, 199, 0, 0, 0, 100, 101, 200,
	0, 102, 0, 103, 0, 0, 0, 0, 104, 201,
	0, 202, 0, 105, 106, 203, 204, 0, 0, 109,
	0, 107, 0, 0, 108, 205, 206, 207, 0, 208,
	0, 0, 110, 0, 111, 112, 0, 0, 209, 0,
	113, 0, 0, 114, 0, 0, 115, 0, 116, 117,
	118, 119, 120, 0, 121, 122, 125, 123, 0, 124,
	0, 210, 126, 211, 127, 128, 0, 0, 334, 0,
	0, 129, 212, 0, 130, 0, 213, 131, 132, 133,
	0, 214, 134, 215, 135, 0, 136, 137, 138, 216,
	139, 140, 0, 142, 143, 141, 144, 0, 145, 0,
	146, 147, 217, 148, 0, 149, 150, 151, 0, 218,
	152, 153, 0, 154, 155, 0, 156, 219, 220, 157,
	0, 158, 159, 160, 162, 221, 161, 222, 0, 163,
	0, 164, 165, 0, 223, 224, 225, 0, 0, 166,
	226, 227, 0, 167, 168, 169, 170, 0, 0, 171,
	172, 173, 0, 0, 174, 175, 176, 228, 229, 68,
	177, 0, 0, 0, 0, 178, 179, 180, 181, 0,
	0, 0, 0, 0, 71, 72, 0, 73, 0, 0,
	0, 0, 182, 0, 0, 0, 0, 74, 75, 183,
	184, 185, 186, 76, 187, 188, 0, 77, 189, 190,
	78, 0, 0, 191, 192, 193, 0, 194, 0, 0,
	0, 79, 80, 81, 0, 82, 0, 83, 84, 85,
	0, 0, 86, 87, 0, 0, 0, 0, 0, 0,
	88, 89, 90, 91, 195, 92, 196, 197, 0, 93,
	0, 94, 0, 0, 0, 95, 96, 0, 97, 0,
	0, 0, 198, 98, 99, 199, 0, 0, 0, 100,
	101, 200, 0, 102, 0, 103, 0, 0, 0, 0,
	104, 201, 0, 202, 0, 105, 106, 686, 204, 0,
	0, 109, 0, 107, 0, 0, 108, 205, 206, 207,
	0, 208, 0, 0, 110, 0, 111, 112, 0, 0,
	209, 0, 113, 0, 0, 114, 0, 0, 115, 0,
	116, 117, 118, 119, 120, 0, 121, 122, 125, 123,
	0, 124, 0, 210, 126, 211, 127, 128, 0, 0,
	334, 0, 0, 129, 212, 0, 130, 0, 213, 131,
	132, 133, 0, 214, 134, 215, 135, 0, 136, 137,
	138, 216, 139, 140, 0, 142, 143, 141, 144, 0,
	145, 0, 146, 147, 217, 148, 0, 149, 150, 151,
	0, 218, 152, 153, 0, 154, 155, 0, 156, 219,
	220, 157, 0, 158, 159, 160, 162, 221, 161, 222,
	0, 163, 0, 164, 165, 0, 223, 224, 225, 0,
	0, 166, 226, 227, 0, 167, 168, 169, 170, 0,
	0, 171, 172, 173, 0, 0, 174, 175, 176, 228,
	229, 68, 177, 0, 0, 0, 0, 178, 179, 180,
	181, 0, 0, 0, 0, 0, 71, 72, 393, 73,
	0, 0, 0, 0, 182, 0, 0, 0, 0, 74,
	75, 183, 184, 185, 186, 76, 187, 188, 0, 77,
	189, 190, 78, 0, 0, 191, 192, 193, 0, 194,
	0, 0, 0, 79, 80, 81, 0, 82, 0, 83,
	84, 85, 0, 0, 86, 87, 0, 0, 0, 0,
	0, 0, 88, 89, 90, 91, 195, 92, 196, 197,
	0, 93, 0, 94, 0, 0, 0, 95, 96, 0,
	97, 0, 0, 0, 198, 98, 99, 199, 0, 0,
	0, 100, 101, 200, 0, 102, 0, 103, 0, 0,
	0, 0, 104, 201, 0, 202, 0, 105, 106, 203,
	204, 0, 0, 109, 0, 107, 0, 0, 108, 205,
	206, 207, 0, 208, 0, 0, 110, 0, 111, 112,
	0, 0, 209, 0, 113, 0, 0, 114, 0, 0,
	115, 0, 116, 117, 118, 119, 120, 0, 121, 122,
	125, 123, 0, 124, 0, 210, 126, 211, 127, 128,
	0, 0, 0, 0, 0, 129, 212, 0, 130, 0,
	213, 131, 132, 133, 0, 214, 134, 215, 135, 0,
	136, 137, 138, 216, 139, 140, 0, 142, 143, 141,
	144, 0, 145, 0, 146, 147, 217, 148, 0, 149,
	150, 151, 0, 218, 152, 153, 0, 154, 155, 0,
	156, 219, 220, 157, 0, 158, 159, 160, 162, 221,
	161, 222, 0, 163, 0, 164, 165, 0, 223, 224,
	225, 0, 0, 166, 226, 227, 0, 167, 168, 169,
	170, 0, 0, 171, 172, 173, 0, 0, 174, 175,
	176, 228, 229, 68, 177, 0, 0, 0, 0, 178,
	179, 180, 181, 0, 0, 0, 0, 0, 71, 72,
	0, 73, 0, 0, 0, 0, 182, 0, 0, 0,
	0, 74, 75, 183, 184, 185, 186, 76, 187, 188,
	0, 77, 189, 190, 78, 0, 0, 191, 192, 193,
	0, 194, 0, 0, 0, 79, 80, 81, 0, 82,
	0, 83, 84, 85, 0, 0, 86, 87, 0, 0,
	0, 0, 0, 0, 88, 89, 90, 91, 195, 92,
	196, 197, 0, 93, 0, 94, 0, 0, 0, 95,
	96, 0, 97, 0, 0, 0, 198, 98, 99, 199,
	0, 0, 0, 100, 101, 200, 0, 102, 0, 103,
	0, 0, 0, 0, 104, 201, 0, 202, 0, 105,
	106, 339, 204, 0, 0, 109, 0, 107, 0, 0,
	108, 205, 206, 207, 0, 208, 0, 0, 110, 0,
	111, 112, 0, 0, 209, 0, 113, 0, 0, 114,
	0, 0, 115, 0, 116, 117, 118, 119, 120, 0,
	121, 122, 125, 123, 0, 124, 0, 210, 126, 211,
	127, 128, 0, 0, 334, 0, 0, 129, 212, 0,
	130, 0, 213, 131, 132, 133, 0, 214, 134, 215,
	135, 0, 136, 137, 138, 216, 139, 140, 0, 142,
	143, 141, 144, 0, 145, 0, 146, 147, 217, 148,
	0, 149, 150, 151, 0, 218, 152, 153, 0, 154,
	155, 0, 156, 219, 220, 157, 0, 158, 159, 160,
	162, 221, 161, 222, 0, 163, 0, 164, 165, 0,
	223, 224, 225, 0, 0, 166, 226, 227, 0, 167,
	168, 169, 170, 0, 0, 171, 172, 173, 0, 0,
	174, 175, 176, 228, 229, 68, 177, 0, 0, 0,
	0, 178, 179, 180, 181, 0, 0, 0, 0, 0,
	71, 72, 252, 73, 0, 0, 0, 0, 182, 0,
	0, 0, 0, 74, 75, 183, 184, 185, 186, 76,
	187, 188, 0, 77, 189, 190, 78, 0, 0, 191,
	192, 193, 0, 194, 0, 0, 0, 79, 80, 81,
	0, 82, 0, 83, 84, 85, 0, 0, 86, 87,
	0, 0, 0, 0, 0, 0, 88, 89, 90, 91,
	195, 92, 196, 197, 0, 93, 0, 94, 0, 0,
	0, 95, 96, 0, 97, 0, 0, 0, 198, 98,
	99, 199, 0, 0, 0, 100, 101, 200, 0, 102,
	0, 103, 0, 0, 0, 0, 104, 201, 0, 202,
	0, 105, 106, 203, 204, 0, 0, 109, 0, 107,
	0, 0, 108, 205, 206, 207, 0, 208, 0, 0,
	110, 0, 111, 112, 0, 0, 209, 0, 113, 0,
	0, 114, 0, 0, 115, 0, 116, 117, 118, 119,
	120, 0, 121, 122, 125, 123, 0, 124, 0, 210,
	126, 211, 127, 128, 0, 0, 0, 0, 0, 129,
	212, 0, 130, 0, 213, 131, 132, 133, 0, 214,
	134, 215, 251, 0, 136, 137, 138, 216, 139, 140,
	0, 142, 143, 141, 144, 0, 145, 0, 146, 147,
	217, 148, 0, 149, 150, 151, 0, 218, 152, 153,
	0, 154, 155, 0, 156, 219, 220, 157, 0, 158,
	159, 160, 162, 221, 161, 222, 0, 163, 0, 164,
	165, 0, 223, 224, 225, 0, 0, 166, 226, 227,
	0, 167, 168, 169, 170, 0, 0, 171, 172, 173,
	0, 0, 174, 175, 176, 228, 229, 68, 177, 0,
	0, 0, 0, 178, 179, 180, 181, 0, 0, 0,
	0, 0, 71, 72, 0, 73, 0, 0, 0, 0,
	182, 0, 0, 0, 0, 74, 75, 183, 184, 185,
	186, 76, 187, 188, 0, 77, 189, 190, 78, 0,
	0, 191, 192, 193, 0, 194, 0, 0, 0, 79,
	80, 81, 0, 82, 0, 83, 84, 85, 0, 0,
	86, 87, 0, 0, 0, 0, 0, 0, 88, 89,
	90, 91, 195, 92, 196, 197, 0, 93, 0, 94,
	0, 0, 0, 95, 96, 0, 97, 0, 0, 0,
	198, 98, 99, 199, 0, 0, 0, 100, 101, 200,
	0, 102, 0, 103, 0, 0, 0, 0, 104, 201,
	0, 202, 0, 105, 106, 203, 204, 0, 0, 109,
	0, 107, 0, 0, 108, 205, 206, 207, 0, 208,
	0, 0, 110, 0, 111, 112, 0, 0, 209, 0,
	113, 0, 0, 114, 0, 0, 115, 0, 116, 117,
	118, 119, 120, 0, 121, 122, 125, 123, 0, 124,
	0, 210, 126, 211, 127, 128, 0, 0, 0, 0,
	0, 129, 212, 0, 130, 0, 213, 131, 132, 133,
	0, 214, 134, 215, 135, 0, 136, 137, 138, 216,
	139, 140, 0, 142, 143, 141, 144, 0, 145, 0,
	146, 147, 217, 148, 0, 149, 150, 151, 0, 218,
	152, 153, 0, 154, 155, 0, 156, 219, 220, 157,
	0, 158, 159, 160, 162, 221, 161, 222, 0, 163,
	0, 164, 165, 0, 223, 224, 225, 0, 0, 166,
	226, 227, 0, 167, 168, 169, 170, 0, 0, 171,
	172, 173, 0, 0, 174, 175, 176, 228, 229, 68,
	177, 0, 0, 0, 0, 178, 179, 180, 181, 0,
	0, 0, 0, 0, 71, 72, 0, 73, 0, 0,
	0, 0, 182, 0, 0, 0, 0, 74, 75, 183,
	184, 185, 186, 76, 187, 188, 0, 77, 189, 190,
	78, 0, 0, 191, 192, 193, 0, 194, 0, 0,
	0, 79, 80, 81, 0, 82, 0, 83, 84, 85,
	0, 0, 86, 87, 0, 0, 0, 0, 0, 0,
	88, 89, 90, 91, 195, 92, 196, 197, 0, 93,
	0, 94, 0, 0, 0, 95, 96, 0, 97, 0,
	0, 0, 198, 98, 99, 199, 0, 0, 0, 100,
	101, 200, 0, 102, 0, 103, 0, 0, 0, 0,
	104, 201, 0, 202, 0, 105, 106, 1195, 204, 0,
	0, 109, 0, 107, 0, 0, 108, 205, 206, 207,
	0, 208, 0, 0, 110, 0, 111, 112, 0, 0,
	209, 0, 113, 0, 0, 114, 0, 0, 115, 0,
	116, 117, 118, 119, 120, 0, 121, 122, 125, 123,
	0, 124, 0, 210, 126, 211, 127, 128, 0, 0,
	0, 0, 0, 129, 212, 0, 130, 0, 213, 131,
	132, 133, 0, 214, 134, 215, 135, 0, 136, 137,
	138, 216, 139, 140, 0, 142, 143, 141, 144, 0,
	145, 0, 146, 147, 217, 148, 0, 149, 150, 151,
	0, 218, 152, 153, 0, 154, 155, 0, 156, 219,
	220, 157, 0, 158, 159, 160, 162, 221, 161, 222,
	0, 163, 0, 164, 165, 0, 223, 224, 225, 0,
	0, 166, 226, 227, 0, 167, 168, 169, 170, 0,
	0, 171, 172, 173, 0, 0, 174, 175, 176, 228,
	229, 68, 177, 0, 0, 0, 0, 178, 179, 180,
	181, 0, 0, 0, 0, 0, 71, 72, 0, 73,
	0, 0, 0, 0, 182, 0, 0, 0, 0, 74,
	75, 183, 184, 185, 186, 76, 187, 188, 0, 77,
	189, 190, 78, 0, 0, 191, 192, 193, 0, 194,
	0, 0, 0, 79, 80, 81, 0, 82, 0, 83,
	84, 85, 0, 0, 86, 87, 0, 0, 0, 0,
	0, 0, 88, 89, 90, 91, 195, 92, 196, 197,
	0, 93, 0, 94, 0, 0, 0, 95, 96, 0,
	97, 0, 0, 0, 198, 98, 99, 199, 0, 0,
	0, 100, 101, 200, 0, 102, 0, 103, 0, 0,
	0, 0, 104, 201, 0, 202, 0, 105, 106, 1193,
	204, 0, 0, 109, 0, 107, 0, 0, 108, 205,
	206, 207, 0, 208, 0, 0, 110, 0, 111, 112,
	0, 0, 209, 0, 113, 0, 0, 114, 0, 0,
	115, 0, 116, 117, 118, 119, 120, 0, 121, 122,
	125, 123, 0, 124, 0, 210, 126, 211, 127, 128,
	0, 0, 0, 0, 0, 129, 212, 0, 130, 0,
	213, 131, 132, 133, 0, 214, 134, 215, 135, 0,
	136, 137, 138, 216, 139, 140, 0, 142, 143, 141,
	144, 0, 145, 0, 146, 147, 217, 148, 0, 149,
	150, 151, 0, 218, 152, 153, 0, 154, 155, 0,
	156, 219, 220, 157, 0, 158, 159, 160, 162, 221,
	161, 222, 0, 163, 0, 164, 165, 0, 223, 224,
	225, 0, 0, 166, 226, 227, 0, 167, 168, 169,
	170, 0, 0, 171, 172, 173, 0, 0, 174, 175,
	176, 228, 229, 68, 177, 0, 0, 0, 0, 178,
	179, 180, 181, 0, 0, 0, 0, 0, 71, 72,
	0, 73, 0, 0, 0, 0, 182, 0, 0, 0,
	0, 74, 75, 183, 184, 185, 186, 76, 187, 188,
	0, 77, 189, 190, 78, 0, 0, 191, 192, 193,
	0, 194, 0, 0, 0, 79, 80, 81, 0, 82,
	0, 83, 84, 85, 0, 0, 86, 87, 0, 0,
	0, 0, 0, 0, 88, 89, 90, 91, 195, 92,
	196, 197, 0, 93, 0, 94, 0, 0, 0, 95,
	96, 0, 97, 0, 0, 0, 198, 98, 99, 199,
	0, 0, 0, 100, 101, 200, 0, 102, 0, 103,
	0, 0, 0, 0, 104, 201, 0, 202, 0, 105,
	106, 1184, 204, 0, 0, 109, 0, 107, 0, 0,
	108, 205, 206, 207, 0, 208, 0, 0, 110, 0,
	111, 112, 0, 0, 209, 0, 113, 0, 0, 114,
	0, 0, 115, 0, 116, 117, 118, 119, 120, 0,
	121, 122, 125, 123, 0, 124, 0, 210, 126, 211,
	127, 128, 0, 0, 0, 0, 0, 129, 212, 0,
	130, 0, 213, 131, 132, 133, 0, 214, 134, 215,
	135, 0, 136, 137, 138, 216, 139, 140, 0, 142,
	143, 141, 144, 0, 145, 0, 146, 147, 217, 148,
	0, 149, 150, 151, 0, 218, 152, 153, 0, 154,
	155, 0, 156, 219, 220, 157, 0, 158, 159, 160,
	162, 221, 161, 222, 0, 163, 0, 164, 165, 0,
	223, 224, 225, 0, 0, 166, 226, 227, 0, 167,
	168, 169, 170, 0, 0, 171, 172, 173, 0, 0,
	174, 175, 176, 228, 229, 68, 177, 0, 0, 0,
	0, 178, 179, 180, 181, 0, 0, 0, 0, 0,
	71, 72, 0, 73, 0, 0, 0, 0, 182, 0,
	0, 0, 0, 74, 75, 183, 184, 185, 186, 76,
	187, 188, 0, 77, 189, 190, 78, 0, 0, 191,
	192, 193, 0, 194, 0, 0, 0, 79, 80, 81,
	0, 82, 0, 83, 84, 85, 0, 0, 86, 87,
	0, 0, 0, 0, 0, 0, 88, 89, 90, 91,
	195, 92, 196, 197, 0, 93, 0, 94, 0, 0,
	0, 95, 96, 0, 97, 0, 0, 0, 198, 98,
	99, 199, 0, 0, 0, 100, 101, 200, 0, 102,
	0, 103, 0, 0, 0, 0, 104, 201, 0, 202,
	0, 105, 106, 798, 204, 0, 0, 109, 0, 107,
	0, 0, 108, 205, 206, 207, 0, 208, 0, 0,
	110, 0, 111, 112, 0, 0, 209, 0, 113, 0,
	0, 114, 0, 0, 115, 0, 116, 117, 118, 119,
	120, 0, 121, 122, 125, 123, 0, 124, 0, 210,
	126, 211, 127, 128, 0, 0, 0, 0, 0, 129,
	212, 0, 130, 0, 213, 131, 132, 133, 0, 214,
	134, 215, 135, 0, 136, 137, 138, 216, 139, 140,
	0, 142, 143, 141, 144, 0, 145, 0, 146, 147,
	217, 148, 0, 149, 150, 151, 0, 218, 152, 153,
	0, 154, 155, 0, 156, 219, 220, 157, 0, 158,
	159, 160, 162, 221, 161, 222, 0, 163, 0, 164,
	165, 0, 223, 224, 225, 0, 0, 166, 226, 227,
	0, 167, 168, 169, 170, 0, 0, 171, 172, 173,
	0, 0, 174, 175, 176, 228, 229, 68, 177, 0,
	0, 0, 0, 178, 179, 180, 181, 0, 0, 0,
	0, 0, 71, 72, 0, 73, 0, 0, 0, 0,
	182, 0, 0, 0, 0, 74, 75, 183, 184, 185,
	186, 76, 187, 188, 0, 77, 189, 190, 78, 0,
	0, 191, 192, 193, 0, 194, 0, 0, 0, 79,
	80, 81, 0, 82, 0, 83, 84, 85, 0, 0,
	86, 87, 0, 0, 0, 0, 0, 0, 88, 89,
	90, 91, 195, 92, 196, 197, 0, 93, 0, 94,
	0, 0, 0, 95, 96, 0, 97, 0, 0, 0,
	198, 98, 99, 199, 0, 0, 0, 100, 101, 200,
	0, 102, 0, 103, 0, 0, 0, 0, 104, 201,
	0, 202, 0, 105, 106, 203, 204, 0, 0, 109,
	0, 107, 0, 0, 108, 205, 206, 207, 0, 208,
	0, 0, 110, 0, 111, 112, 0, 0, 209, 0,
	113, 0, 0, 114, 0, 0, 115, 0, 116, 117,
	118, 119, 120, 0, 121, 122, 125, 123, 0, 124,
	0, 210, 126, 211, 127, 128, 0, 0, 0, 0,
	0, 129, 212, 0, 130, 0, 213, 131, 132, 133,
	0, 214, 134, 215, 135, 0, 136, 137, 138, 216,
	139, 140, 0, 142, 143, 141, 144, 0, 145, 0,
	146, 147, 217, 148, 0, 266, 150, 151, 0, 218,
	152, 153, 0, 154, 155, 0, 156, 219, 220, 157,
	0, 158, 159, 160, 162, 221, 161, 222, 0, 163,
	0, 164, 165, 0, 223, 224, 225, 0, 0, 166,
	226, 227, 0, 167, 168, 169, 170, 0, 0, 171,
	172, 173, 0, 0, 174, 175, 176, 228, 229, 68,
	177, 0, 0, 0, 0, 178, 179, 180, 181, 0,
	0, 0, 0, 0, 71, 72, 0, 73, 0, 0,
	0, 0, 182, 0, 673, 0, 0, 74, 75, 183,
	184, 185, 186, 76, 187, 188, 0, 77, 189, 190,
	78, 0, 0, 191, 192, 193, 0, 194, 0, 0,
	0, 79, 80, 81, 0, 82, 0, 83, 84, 85,
	0, 0, 86, 87, 0, 0, 0, 0, 0, 0,
	88, 89, 90, 91, 195, 92, 196, 197, 0, 93,
	0, 94, 0, 0, 0, 95, 96, 0, 97, 0,
	0, 0, 198, 98, 99, 199, 0, 0, 0, 100,
	101, 200, 0, 102, 0, 103, 0, 0, 0, 0,
	104, 201, 0, 202, 0, 105, 106, 203, 204, 0,
	0, 109, 0, 107, 0, 0, 108, 205, 206, 207,
	0, 208, 0, 0, 110, 0, 111, 112, 0, 0,
	209, 0, 113, 0, 0, 114, 0, 0, 115, 0,
	116, 117, 118, 119, 120, 0, 121, 122, 125, 123,
	0, 124, 0, 210, 126, 211, 127, 128, 0, 0,
	0, 0, 0, 129, 212, 0, 130, 0, 213, 131,
	132, 133, 0, 214, 134, 215, 135, 0, 136, 137,
	138, 216, 139, 140, 0, 142, 143, 141, 144, 0,
	145, 0, 146, 147, 217, 148, 0, 149, 150, 151,
	0, 218, 152, 153, 0, 0, 155, 0, 156, 219,
	220, 157, 0, 158, 159, 160, 162, 221, 161, 222,
	0, 163, 0, 164, 165, 0, 223, 224, 225, 0,
	0, 166, 226, 227, 0, 167, 168, 169, 170, 0,
	0, 171, 172, 173, 0, 0, 174, 175, 176, 228,
	229, 68, 177, 0, 0, 0, 0, 178, 179, 180,
	181, 0, 0, 0, 0, 0, 71, 72, 0, 73,
	0, 0, 0, 0, 182, 0, 0, 0, 0, 74,
	75, 183, 184, 185, 186, 76, 187, 188, 0, 77,
	189, 190, 78, 0, 0, 191, 192, 193, 0, 194,
	0, 0, 0, 79, 80, 81, 0, 82, 0, 83,
	84, 85, 0, 0, 86, 87, 0, 0, 0, 0,
	0, 0, 88, 89, 90, 91, 195, 92, 196, 197,
	0, 93, 0, 94, 0, 0, 0, 95, 96, 0,
	97, 0, 0, 0, 198, 98, 99, 199, 0, 0,
	0, 100, 101, 200, 0, 102, 0, 103, 0, 0,
	0, 0, 104, 201, 0, 202, 0, 105, 106, 441,
	204, 0, 0, 109, 0, 107, 0, 0, 108, 205,
	206, 207, 0, 208, 0, 0, 110, 0, 111, 112,
	0, 0, 209, 0, 113, 0, 0, 114, 0, 0,
	115, 0, 116, 117, 118, 119, 120, 0, 121, 122,
	125, 123, 0, 124, 0, 210, 126, 211, 127, 128,
	0, 0, 0, 0, 0, 129, 212, 0, 130, 0,
	213, 131, 132, 133, 0, 214, 134, 215, 135, 0,
	136, 137, 138, 216, 139, 140, 0, 142, 143, 141,
	144, 0, 145, 0, 146, 147, 217, 148, 0, 149,
	150, 151, 0, 218, 152, 153, 0, 154, 155, 0,
	156, 219, 220, 157, 0, 158, 159, 160, 162, 221,
	161, 222, 0, 163, 0, 164, 165, 0, 223, 224,
	225, 0, 0, 166, 226, 227, 0, 167, 168, 169,
	170, 0, 0, 171, 172, 173, 0, 0, 174, 175,
	176, 228, 229, 68, 177, 0, 0, 0, 0, 178,
	179, 180, 181, 0, 0, 0, 0, 0, 71, 72,
	0, 73, 0, 0, 0, 0, 182, 0, 0, 0,
	0, 74, 75, 183, 184, 185, 186, 76, 187, 188,
	0, 77, 189, 190, 78, 0, 0, 191, 192, 193,
	0, 194, 0, 0, 0, 79, 80, 81, 0, 82,
	0, 83, 84, 85, 0, 0, 86, 87, 0, 0,
	0, 0, 0, 0, 88, 89, 90, 91, 195, 92,
	196, 197, 0, 93, 0, 94, 0, 0, 0, 95,
	96, 0, 97, 0, 0, 0, 198, 98, 99, 199,
	0, 0, 0, 100, 101, 200, 0, 102, 0, 103,
	0, 0, 0, 0, 104, 201, 0, 202, 0, 105,
	106, 438, 204, 0, 0, 109, 0, 107, 0, 0,
	108, 205, 206, 207, 0, 208, 0, 0, 110, 0,
	111, 112, 0, 0, 209, 0, 113, 0, 0, 114,
	0, 0, 115, 0, 116, 117, 118, 119, 120, 0,
	121, 122, 125, 123, 0, 124, 0, 210, 126, 211,
	127, 128, 0, 0, 0, 0, 0, 129, 212, 0,
	130, 0, 213, 131, 132, 133, 0, 214, 134, 215,
	135, 0, 136, 137, 138, 216, 139, 140, 0, 142,
	143, 141, 144, 0, 145, 0, 146, 147, 217, 148,
	0, 149, 150, 151, 0, 218, 152, 153, 0, 154,
	155, 0, 156, 219, 220, 157, 0, 158, 159, 160,
	162, 221, 161, 222, 0, 163, 0, 164, 165, 0,
	223, 224, 225, 0, 0, 166, 226, 227, 0, 167,
	168, 169, 170, 0, 0, 171, 172, 173, 0, 0,
	174, 175, 176, 228, 229, 68, 177, 0, 0, 0,
	0, 178, 179, 180, 181, 0, 0, 0, 0, 0,
	71, 72, 0, 73, 0, 0, 0, 0, 182, 0,
	0, 0, 0, 74, 75, 183, 184, 185, 186, 76,
	187, 188, 0, 77, 189, 190, 78, 0, 0, 191,
	192, 399, 0, 194, 0, 0, 0, 79, 80, 81,
	0, 82, 0, 83, 84, 85, 0, 0, 86, 87,
	0, 0, 0, 0, 0, 0, 88, 89, 90, 91,
	195, 92, 196, 197, 0, 93, 0, 94, 0, 0,
	0, 95, 96, 0, 97, 0, 0, 0, 198, 98,
	99, 199, 0, 0, 0, 100, 101, 200, 0, 102,
	0, 103, 0, 0, 0, 0, 104, 201, 0, 202,
	0, 105, 106, 203, 204, 0, 0, 109, 0, 107,
	0, 0, 108, 205, 206, 207, 0, 208, 0, 0,
	110, 0, 111, 112, 0, 0, 209, 0, 113, 0,
	0, 114, 0, 0, 115, 0, 116, 117, 118, 119,
	277, 0, 121, 122, 125, 123, 0, 124, 0, 210,
	126, 211, 127, 128, 0, 0, 0, 0, 0, 129,
	212, 0, 130, 0, 213, 131, 132, 133, 0, 214,
	134, 215, 135, 0, 136, 137, 138, 216, 139, 140,
	0, 142, 143, 141, 144, 0, 145, 0, 146, 147,
	217, 148, 0, 149, 150, 151, 0, 218, 152, 153,
	0, 154, 155, 0, 156, 219, 220, 157, 0, 158,
	159, 160, 162, 221, 161, 222, 0, 163, 0, 164,
	165, 0, 276, 224, 225, 0, 0, 272, 226, 227,
	0, 167, 168, 169, 170, 0, 0, 171, 172, 173,
	0, 0, 174, 175, 176, 228, 229, 68, 177, 0,
	0, 0, 0, 178, 179, 180, 181, 0, 0, 0,
	0, 0, 71, 72, 0, 73, 0, 0, 0, 0,
	182, 0, 0, 0, 0, 74, 75, 183, 184, 185,
	186, 76, 187, 188, 0, 77, 189, 190, 78, 0,
	0, 191, 192, 193, 0, 194, 0, 0, 0, 79,
	80, 81, 0, 82, 0, 83, 84, 85, 0, 0,
	86, 87, 0, 0, 0, 0, 0, 0, 88, 89,
	90, 91, 195, 92, 196, 197, 0, 93, 0, 94,
	0, 0, 0, 95, 96, 0, 97, 0, 0, 0,
	198, 98, 99, 199, 0, 0, 0, 100, 101, 200,
	0, 102, 0, 103, 0, 0, 0, 0, 104, 201,
	0, 202, 0, 105, 106, 203, 204, 0, 0, 109,
	0, 107, 0, 0, 108, 205, 206, 207, 0, 208,
	0, 0, 110, 0, 111, 112, 0, 0, 209, 0,
	113, 0, 0, 114, 0, 0, 115, 0, 116, 117,
	118, 119, 277, 0, 121, 122, 125, 123, 0, 124,
	0, 210, 126, 211, 127, 128, 0, 0, 0, 0,
	0, 129, 212, 0, 130, 0, 213, 131, 132, 133,
	0, 214, 134, 215, 135, 0, 136, 137, 138, 216,
	139, 140, 0, 142, 143, 141, 144, 0, 145, 0,
	146, 147, 217, 148, 0, 149, 150, 151, 0, 218,
	152, 153, 0, 154, 155, 0, 156, 219, 220, 157,
	0, 158, 159, 160, 162, 221, 161, 222, 0, 163,
	0, 164, 165, 0, 276, 224, 225, 0, 0, 272,
	226, 227, 0, 167, 168, 169, 170, 0, 0, 171,
	172, 173, 0, 0, 174, 175, 176, 228, 229, 68,
	177, 0, 0, 0, 0, 178, 179, 180, 181, 0,
	0, 0, 0, 0, 71, 72, 0, 73, 0, 0,
	0, 0, 182, 0, 0, 0, 0, 74, 75, 183,
	184, 185, 186, 76, 187, 188, 0, 77, 189, 190,
	78, 0, 0, 191, 192, 193, 0, 194, 0, 0,
	0, 79, 80, 81, 0, 82, 0, 83, 84, 85,
	0, 0, 86, 87, 0, 0, 0, 0, 0, 0,
	88, 89, 90, 91, 195, 92, 196, 197, 0, 93,
	0, 94, 0, 0, 0, 95, 96, 0, 97, 0,
	0, 0, 198, 98, 99, 199, 0, 0, 0, 100,
	101, 200, 0, 102, 0, 103, 0, 0, 0, 0,
	104, 201, 0, 202, 0, 105, 106, 363, 204, 0,
	0, 109, 0, 107, 0, 0, 108, 205, 206, 207,
	0, 208, 0, 0, 110, 0, 111, 112, 0, 0,
	209, 0, 113, 0, 0, 114, 0, 0, 115, 0,
	116, 117, 118, 119, 120, 0, 121, 122, 125, 123,
	0, 124, 0, 210, 126, 211, 127, 128, 0, 0,
	0, 0, 0, 129, 212, 0, 130, 0, 213, 131,
	132, 133, 0, 214, 134, 215, 135, 0, 136, 137,
	138, 216, 139, 140, 0, 142, 143, 141, 144, 0,
	145, 0, 146, 147, 217, 148, 0, 149, 150, 151,
	0, 218, 152, 153, 0, 154, 155, 0, 156, 219,
	220, 157, 0, 158, 159, 160, 162, 221, 161, 222,
	0, 163, 0, 164, 165, 0, 223, 224, 225, 0,
	0, 166, 226, 227, 0, 167, 168, 169, 170, 0,
	0, 171, 172, 173, 0, 0, 174, 175, 176, 228,
	229, 68, 177, 0, 0, 0, 0, 178, 179, 180,
	181, 0, 0, 0, 0, 0, 71, 72, 0, 73,
	0, 0, 0, 0, 182, 0, 0, 0, 0, 74,
	75, 183, 184, 185, 186, 76, 187, 188, 0, 77,
	189, 190, 78, 0, 0, 191, 192, 193, 0, 194,
	0, 0, 0, 79, 80, 81, 0, 82, 0, 83,
	84, 85, 0, 0, 86, 87, 0, 0, 0, 0,
	0, 0, 88, 89, 90, 91, 195, 92, 196, 197,
	0, 93, 0, 94, 0, 0, 0, 95, 96, 0,
	97, 0, 0, 0, 198, 98, 99, 199, 0, 0,
	0, 100, 101, 200, 0, 102, 0, 103, 0, 0,
	0, 0, 104, 201, 0, 202, 0, 105, 106, 360,
	204, 0, 0, 109, 0, 107, 0, 0, 108, 205,
	206, 207, 0, 208, 0, 0, 110, 0, 111, 112,
	0, 0, 209, 0, 113, 0, 0, 114, 0, 0,
	115, 0, 116, 117, 118, 119, 120, 0, 121, 122,
	125, 123, 0, 124, 0, 210, 126, 211, 127, 128,
	0, 0, 0, 0, 0, 129, 212, 0, 130, 0,
	213, 131, 132, 133, 0, 214, 134, 215, 135, 0,
	136, 137, 138, 216, 139, 140, 0, 142, 143, 141,
	144, 0, 145, 0, 146, 147, 217, 148, 0, 149,
	150, 151, 0, 218, 152, 153, 0, 154, 155, 0,
	156, 219, 220, 157, 0, 158, 159, 160, 162, 221,
	161, 222, 0, 163, 0, 164, 165, 0, 223, 224,
	225, 0, 0, 166, 226, 227, 0, 167, 168, 169,
	170, 0, 0, 171, 172, 173, 0, 0, 174, 175,
	176, 228, 229, 68, 177, 0, 0, 0, 0, 178,
	179, 180, 181, 0, 0, 0, 0, 0, 71, 72,
	0, 73, 0, 0, 0, 0, 182, 0, 0, 0,
	0, 74, 75, 183, 184, 185, 186, 76, 187, 188,
	0, 77, 189, 190, 78, 0, 0, 191, 192, 193,
	0, 194, 0, 0, 0, 79, 80, 81, 0, 82,
	0, 83, 84, 85, 0, 0, 86, 87, 0, 0,
	0, 0, 0, 0, 88, 89, 90, 91, 195, 92,
	196, 197, 0, 93, 0, 94, 0, 0, 0, 95,
	96, 0, 97, 0, 0, 0, 198, 98, 99, 199,
	0, 0, 0, 100, 101, 200, 0, 102, 0, 103,
	0, 0, 0, 0, 104, 201, 0, 202, 0, 105,
	106, 358, 204, 0, 0, 109, 0, 107, 0, 0,
	108, 205, 206, 207, 0, 208, 0, 0, 110, 0,
	111, 112, 0, 0, 209, 0, 113, 0, 0, 114,
	0, 0, 115, 0, 116, 117, 118, 119, 120, 0,
	121, 122, 125, 123, 0, 124, 0, 210, 126, 211,
	127, 128, 0, 0, 0, 0, 0, 129, 212, 0,
	130, 0, 213, 131, 132, 133, 0, 214, 134, 215,
	135, 0, 136, 137, 138, 216, 139, 140, 0, 142,
	143, 141, 144, 0, 145, 0, 146, 147, 217, 148,
	0, 149, 150, 151, 0, 218, 152, 153, 0, 154,
	155, 0, 156, 219, 220, 157, 0, 158, 159, 160,
	162, 221, 161, 222, 0, 163, 0, 164, 165, 0,
	223, 224, 225, 0, 0, 166, 226, 227, 0, 167,
	168, 169, 170, 0, 0, 171, 172, 173, 0, 0,
	174, 175, 176, 228, 229, 68, 177, 0, 0, 0,
	0, 178, 179, 180, 181, 0, 0, 0, 0, 0,
	71, 72, 0, 73, 0, 0, 0, 0, 182, 0,
	0, 0, 0, 74, 75, 183, 184, 185, 186, 76,
	187, 188, 0, 77, 189, 190, 78, 0, 0, 191,
	192, 193, 0, 194, 0, 0, 0, 79, 80, 81,
	0, 82, 0, 83, 84, 85, 0, 0, 86, 87,
	0, 0, 0, 0, 0, 0, 88, 89, 90, 91,
	195, 92, 196, 197, 0, 93, 0, 94, 0, 0,
	0, 95, 96, 0, 97, 0, 0, 0, 198, 98,
	99, 199, 0, 0, 0, 100, 101, 200, 0, 102,
	0, 103, 0, 0, 0, 0, 104, 201, 0, 202,
	0, 105, 106, 342, 204, 0, 0, 109, 0, 107,
	0, 0, 108, 205, 206, 207, 0, 208, 0, 0,
	110, 0, 111, 112, 0, 0, 209, 0, 113, 0,
	0, 114, 0, 0, 115, 0, 116, 117, 118, 119,
	120, 0, 121, 122, 125, 123, 0, 124, 0, 210,
	126, 211, 127, 128, 0, 0, 0, 0, 0, 129,
	212, 0, 130, 0, 213, 131, 132, 133, 0, 214,
	134, 215, 135, 0, 136, 137, 138, 216, 139, 140,
	0, 142, 143, 141, 144, 0, 145, 0, 146, 147,
	217, 148, 0, 149, 150, 151, 0, 218, 152, 153,
	0, 154, 155, 0, 156, 219, 220, 157, 0, 158,
	159, 160, 162, 221, 161, 222, 0, 163, 0, 164,
	165, 0, 223, 224, 225, 0, 0, 166, 226, 227,
	0, 167, 168, 169, 170, 0, 0, 171, 172, 173,
	0, 0, 174, 175, 176, 228, 229, 68, 177, 0,
	0, 0, 0, 178, 179, 180, 181, 0, 0, 0,
	0, 0, 71, 72, 0, 73, 0, 0, 0, 0,
	182, 0, 0, 0, 0, 74, 75, 183, 184, 185,
	186, 76, 187, 188, 0, 77, 189, 190, 78, 0,
	0, 191, 192, 193, 0, 194, 0, 0, 0, 79,
	80, 81, 0, 82, 0, 83, 84, 85, 0, 0,
	86, 87, 0, 0, 0, 0, 0, 0, 88, 89,
	90, 91, 195, 92, 196, 197, 0, 93, 0, 94,
	0, 0, 0, 95, 96, 0, 97, 0, 0, 0,
	198, 98, 99, 199, 0, 0, 0, 100, 101, 200,
	0, 102, 0, 103, 0, 0, 0, 0, 104, 201,
	0, 202, 0, 105, 106, 203, 204, 0, 0, 109,
	0, 107, 0, 0, 108, 205, 206, 207, 0, 208,
	0, 0, 110, 0, 111, 112, 0, 0, 209, 0,
	113, 0, 0, 114, 0, 0, 115, 0, 116, 117,
	118, 119, 120, 0, 121, 122, 125, 123, 0, 124,
	0, 210, 126, 211, 127, 128, 0, 0, 0, 0,
	0, 129, 212, 0, 130, 0, 213, 131, 132, 133,
	0, 214, 134, 215, 135, 0, 136, 137, 138, 216,
	323, 140, 0, 142, 143, 141, 144, 0, 145, 0,
	146, 147, 217, 148, 0, 149, 150, 151, 0, 218,
	152, 153, 0, 154, 155, 0, 156, 219, 220, 157,
	0, 158, 159, 160, 162, 221, 161, 222, 0, 163,
	0, 164, 165, 0, 223, 224, 225, 0, 0, 166,
	226, 227, 0, 167, 168, 169, 170, 0, 0, 171,
	172, 173, 0, 0, 174, 175, 176, 228, 229, 68,
	177, 0, 0, 0, 0, 178, 179, 180, 181, 0,
	0, 0, 0, 0, 71, 72, 0, 73, 0, 0,
	0, 0, 182, 0, 0, 0, 0, 74, 75, 183,
	184, 185, 186, 76, 187, 188, 0, 77, 189, 190,
	78, 0, 0, 191, 192, 193, 0, 194, 0, 0,
	0, 79, 80, 81, 0, 82, 0, 83, 84, 85,
	0, 0, 86, 87, 0, 0, 0, 0, 0, 0,
	88, 89, 90, 91, 195, 92, 196, 197, 0, 93,
	0, 94, 0, 0, 0, 95, 96, 0, 97, 0,
	0, 0, 198, 98, 99, 199, 0, 0, 0, 100,
	101, 200, 0, 102, 0, 103, 0, 0, 0, 0,
	104, 201, 0, 202, 0, 105, 106, 203, 204, 0,
	0, 109, 0, 107, 0, 0, 108, 205, 206, 207,
	0, 208, 0, 0, 110, 0, 111, 112, 0, 0,
	209, 0, 113, 0, 0, 269, 0, 0, 115, 0,
	116, 117, 118, 119, 277, 0, 121, 122, 125, 123,
	0, 124, 0, 210, 126, 211, 127, 128, 0, 0,
	0, 0, 0, 129, 212, 0, 130, 0, 213, 131,
	132, 133, 0, 214, 134, 215, 135, 0, 136, 137,
	138, 216, 139, 140, 0, 142, 143, 141, 144, 0,
	145, 0, 146, 147, 271, 148, 0, 149, 150, 151,
	0, 218, 152, 270, 0, 154, 155, 0, 156, 219,
	220, 157, 0, 158, 159, 160, 162, 221, 161, 222,
	0, 163, 0, 164, 165, 0, 276, 224, 225, 0,
	0, 272, 226, 227, 0, 167, 168, 169, 170, 0,
	0, 171, 172, 173, 0, 0, 174, 175, 176, 228,
	229, 68, 177, 0, 0, 0, 0, 178, 179, 180,
	181, 0, 0, 0, 0, 0, 71, 72, 0, 73,
	0, 0, 0, 0, 182, 0, 0, 0, 0, 74,
	75, 183, 184, 185, 186, 76, 187, 188, 0, 77,
	189, 190, 78, 0, 0, 191, 192, 193, 0, 194,
	0, 0, 0, 79, 80, 81, 0, 82, 0, 83,
	84, 85, 0, 0, 86, 87, 0, 0, 0, 0,
	0, 0, 88, 89, 90, 91, 195, 92, 196, 197,
	0, 93, 0, 94, 0, 0, 0, 95, 96, 0,
	97, 0, 0, 0, 198, 98, 99, 199, 0, 0,
	0, 100, 101, 200, 0, 102, 0, 103, 0, 0,
	0, 0, 104, 201, 0, 202, 0, 105, 106, 203,
	204, 0, 0, 109, 0, 107, 0, 0, 108, 205,
	206, 207, 0, 208, 0, 0, 110, 0, 111, 112,
	0, 0, 209, 0, 113, 0, 0, 114, 0, 0,
	115, 0, 116, 117, 118, 119, 120, 0, 121, 122,
	125, 123, 0, 124, 0, 210, 126, 211, 127, 128,
	0, 0, 0, 0, 0, 129, 212, 0, 130, 0,
	213, 131, 132, 0, 0, 214, 134, 215, 135, 0,
	136, 0, 138, 216, 139, 140, 0, 142, 143, 141,
	144, 0, 145, 0, 146, 147, 217, 0, 0, 149,
	150, 151, 0, 218, 152, 153, 0, 154, 155, 0,
	156, 219, 220, 157, 0, 158, 159, 160, 162, 221,
	161, 222, 0, 163, 0, 164, 165, 0, 223, 224,
	225, 0, 0, 166, 226, 227, 0, 167, 168, 169,
	170, 0, 0, 171, 172, 173, 0, 0, 174, 175,
	176, 228, 229, 0, 177, 0, 0, 0, 0, 178,
	179, 180, 181, 824, 0, 843, 844, 845, 853, 854,
	855, 0, 0, 0, 0, 0, 0, 0, 846, 0,
	0, 0, 0, 0, 0, 826, 0, 857, 0, 824,
	0, 843, 844, 845, 853, 854, 855, 0, 0, 0,
	0, 0, 0, 0, 846, 0, 825, 0, 0, 0,
	0, 826, 840, 857, 0, 0, 0, 707, 702, 724,
	696, 715, 714, 0, 0, 698, 697, 0, 0, 0,
	726, 725, 825, 0, 0, 0, 0, 0, 840, 0,
	0, 0, 0, 0, 824, 0, 843, 844, 845, 853,
	854, 855, 0, 0, 0, 0, 0, 0, 0, 846,
	831, 720, 0, 712, 711, 0, 826, 0, 857, 0,
	0, 0, 710, 0, 0, 0, 0, 850, 858, 0,
	0, 0, 0, 0, 0, 0, 831, 825, 709, 0,
	0, 856, 0, 840, 0, 0, 0, 0, 0, 0,
	0, 848, 0, 850, 858, 0, 0, 841, 0, 0,
	0, 0, 0, 0, 703, 704, 705, 856, 723, 0,
	0, 0, 0, 0, 0, 0, 0, 848, 0, 847,
	0, 0, 0, 841, 0, 0, 0, 0, 0, 0,
	0, 831, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 713, 0, 0, 847, 0, 0, 850, 858,
	0, 0, 0, 0, 842, 0, 0, 0, 0, 0,
	0, 0, 856, 0, 0, 851, 0, 0, 708, 0,
	0, 0, 848, 0, 0, 0, 0, 0, 841, 0,
	842, 0, 0, 0, 0, 0, 0, 0, 700, 0,
	0, 851, 0, 0, 0, 0, 706, 701, 0, 0,
	847, 0, 0, 0, 728, 0, 0, 0, 0, 0,
	0, 699, 0, 0, 721, 722, 0, 0, 0, 849,
	0, 0, 837, 838, 839, 0, 836, 833, 834, 835,
	827, 828, 829, 830, 832, 842, 852, 727, 0, 0,
	0, 0, 0, 1370, 0, 849, 851, 0, 837, 838,
	839, 0, 836, 833, 834, 835, 827, 828, 829, 830,
	832, 0, 852, 0, 0, 0, 0, 0, 0, 1324,
	0, 0, 0, 824, 0, 843, 844, 845, 853, 854,
	855, 0, 0, 0, 0, 0, 0, 0, 846, 0,
	0, 0, 0, 0, 0, 826, 0, 857, 0, 0,
	849, 0, 0, 837, 838, 839, 0, 836, 833, 834,
	835, 827, 828, 829, 830, 832, 825, 852, 0, 0,
	0, 1766, 840, 824, 0, 843, 844, 845, 853, 854,
	855, 0, 0, 0, 0, 0, 0, 0, 846, 0,
	0, 0, 0, 0, 0, 826, 0, 857, 0, 0,
	0, 0, 0, 0, 0, 0, 824, 0, 843, 844,
	845, 853, 854, 855, 0, 0, 825, 0, 0, 0,
	831, 846, 840, 0, 0, 0, 0, 0, 826, 0,
	857, 0, 0, 0, 0, 0, 0, 850, 858, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 825,
	0, 856, 0, 0, 0, 840, 0, 0, 0, 0,
	0, 848, 0, 0, 0, 0, 0, 841, 0, 0,
	831, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 850, 858, 847,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 856, 0, 831, 0, 0, 0, 0, 0, 0,
	0, 848, 0, 0, 0, 0, 0, 841, 0, 0,
	850, 858, 0, 0, 842, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 856, 851, 0, 0, 0, 847,
	0, 0, 0, 0, 848, 0, 0, 0, 0, 0,
	841, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 847, 0, 842, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 851, 0, 0, 0, 849,
	0, 0, 837, 838, 839, 0, 836, 833, 834, 835,
	827, 828, 829, 830, 832, 0, 852, 842, 0, 0,
	1764, 0, 0, 0, 0, 0, 0, 0, 851, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 849,
	0, 0, 837, 838, 839, 0, 836, 833, 834, 835,
	827, 828, 829, 830, 832, 0, 852, 0, 0, 0,
	1745, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 849, 0, 0, 837, 838, 839, 0, 836,
	833, 834, 835, 827, 828, 829, 830, 832, 0, 852,
	0, 0, 824, 1720, 843, 844, 845, 853, 854, 855,
	0, 0, 0, 0, 0, 0, 0, 846, 0, 0,
	0, 0, 0, 0, 826, 0, 857, 0, 824, 0,
	843, 844, 845, 853, 854, 855, 0, 0, 0, 0,
	0, 0, 0, 846, 0, 825, 0, 0, 0, 0,
	826, 840, 857, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 825, 0, 0, 0, 0, 0, 840, 0, 0,
	0, 0, 0, 824, 0, 843, 844, 845, 853, 854,
	855, 0, 0, 0, 0, 0, 0, 0, 846, 831,
	0, 0, 0, 0, 0, 826, 0, 857, 0, 0,
	0, 0, 0, 0, 0, 0, 850, 858, 0, 0,
	0, 0, 0, 0, 0, 831, 825, 0, 0, 0,
	856, 0, 840, 0, 0, 0, 0, 0, 0, 0,
	848, 0, 850, 858, 0, 0, 841, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 856, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 848, 0, 847, 0,
	0, 0, 841, 0, 0, 0, 0, 0, 0, 0,
	831, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 847, 0, 0, 850, 858, 0,
	0, 0, 0, 842, 0, 0, 0, 0, 0, 0,
	0, 856, 0, 0, 851, 0, 0, 0, 0, 0,
	0, 848, 0, 0, 0, 0, 0, 841, 0, 842,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	851, 0, 0, 0, 0, 0, 0, 0, 0, 847,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 849, 0,
	0, 837, 838, 839, 0, 836, 833, 834, 835, 827,
	828, 829, 830, 832, 842, 852, 0, 0, 0, 1715,
	0, 0, 0, 0, 849, 851, 0, 837, 838, 839,
	0, 836, 833, 834, 835, 827, 828, 829, 830, 832,
	0, 852, 0, 0, 0, 1711, 0, 0, 0, 0,
	0, 0, 824, 0, 843, 844, 845, 853, 854, 855,
	0, 0, 0, 0, 0, 0, 0, 846, 0, 0,
	0, 0, 0, 0, 826, 0, 857, 0, 0, 849,
	0, 0, 837, 838, 839, 0, 836, 833, 834, 835,
	827, 828, 829, 830, 832, 825, 852, 0, 0, 0,
	1647, 840, 824, 0, 843, 844, 845, 853, 854, 855,
	0, 0, 0, 0, 0, 0, 0, 846, 0, 0,
	0, 0, 0, 0, 826, 0, 857, 0, 0, 0,
	0, 0, 0, 0, 0, 824, 0, 843, 844, 845,
	853, 854, 855, 0, 0, 825, 0, 0, 0, 831,
	846, 840, 0, 0, 0, 0, 0, 826, 0, 857,
	0, 0, 0, 0, 0, 0, 850, 858, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 825, 0,
	856, 0, 0, 0, 840, 0, 0, 0, 0, 0,
	848, 0, 0, 0, 0, 0, 841, 0, 0, 831,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 850, 858, 847, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	856, 0, 831, 0, 0, 0, 0, 0, 0, 0,
	848, 0, 0, 0, 0, 0, 841, 0, 0, 850,
	858, 0, 0, 842, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 856, 851, 0, 0, 0, 847, 0,
	0, 0, 0, 848, 0, 0, 0, 0, 0, 841,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 847, 0, 842, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 851, 0, 0, 0, 849, 0,
	0, 837, 838, 839, 0, 836, 833, 834, 835, 827,
	828, 829, 830, 832, 0, 852, 842, 0, 0, 1646,
	0, 0, 0, 0, 0, 0, 0, 851, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 849, 0,
	0, 837, 838, 839, 0, 836, 833, 834, 835, 827,
	828, 829, 830, 832, 0, 852, 0, 0, 0, 1557,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 849, 0, 0, 837, 838, 839, 0, 836, 833,
	834, 835, 827, 828, 829, 830, 832, 0, 852, 0,
	0, 824, 1492, 843, 844, 845, 853, 854, 855, 0,
	0, 0, 0, 0, 0, 0, 846, 0, 0, 0,
	0, 0, 0, 826, 0, 857, 0, 824, 0, 843,
	844, 845, 853, 854, 855, 0, 0, 0, 0, 0,
	0, 0, 846, 0, 825, 0, 0, 0, 0, 826,
	840, 857, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	825, 0, 0, 0, 0, 0, 840, 0, 0, 0,
	0, 0, 824, 0, 843, 844, 845, 853, 854, 855,
	0, 0, 0, 0, 0, 0, 0, 846, 831, 0,
	0, 0, 0, 0, 826, 0, 857, 0, 0, 0,
	0, 0, 0, 0, 0, 850, 858, 0, 0, 0,
	0, 0, 0, 0, 831, 825, 0, 0, 0, 856,
	0, 840, 0, 0, 0, 0, 0, 0, 0, 848,
	0, 850, 858, 0, 0, 841, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 856, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 848, 0, 847, 0, 0,
	0, 841, 0, 0, 0, 0, 0, 0, 0, 831,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 847, 0, 0, 850, 858, 0, 0,
	0, 0, 842, 0, 0, 0, 0, 0, 0, 0,
	856, 0, 0, 851, 0, 0, 0, 0, 0, 0,
	848, 0, 0, 0, 0, 0, 841, 0, 842, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 851,
	0, 0, 0, 0, 0, 0, 0, 0, 847, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 849, 0, 0,
	837, 838, 839, 0, 836, 833, 834, 835, 827, 828,
	829, 830, 832, 842, 852, 0, 0, 0, 1476, 0,
	0, 0, 0, 849, 851, 0, 837, 838, 839, 0,
	836, 833, 834, 835, 827, 828, 829, 830, 832, 0,
	852, 0, 0, 0, 1106, 0, 0, 0, 0, 0,
	0, 824, 0, 843, 844, 845, 853, 854, 855, 0,
	0, 0, 0, 0, 0, 0, 846, 0, 0, 0,
	0, 0, 0, 826, 0, 857, 0, 0, 849, 0,
	0, 837, 838, 839, 0, 836, 833, 834, 835, 827,
	828, 829, 830, 832, 825, 852, 0, 1407, 0, 0,
	840, 824, 0, 843, 844, 845, 853, 854, 855, 0,
	0, 0, 0, 0, 0, 0, 846, 0, 0, 0,
	0, 0, 0, 826, 0, 857, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 825, 0, 0, 0, 831, 1836,
	840, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 850, 858, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 856,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 848,
	0, 0, 0, 0, 0, 841, 0, 0, 831, 0,
	1362, 0, 0, 1361, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 850, 858, 847, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 856,
	1835, 0, 0, 0, 0, 0, 0, 0, 0, 848,
	0, 0, 0, 0, 0, 841, 0, 0, 0, 0,
	0, 0, 842, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 851, 0, 0, 0, 847, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 824, 0, 843, 844, 845, 853, 854, 855,
	0, 0, 842, 0, 0, 0, 0, 846, 0, 0,
	0, 0, 1040, 851, 826, 0, 857, 849, 0, 0,
	837, 838, 839, 0, 836, 833, 834, 835, 827, 828,
	829, 830, 832, 0, 852, 825, 860, 0, 0, 0,
	0, 840, 824, 0, 843, 844, 845, 853, 854, 855,
	0, 0, 0, 0, 0, 0, 0, 846, 0, 0,
	0, 859, 0, 0, 826, 0, 857, 849, 0, 1041,
	837, 838, 839, 0, 836, 833, 834, 835, 827, 828,
	829, 830, 832, 0, 852, 825, 0, 0, 0, 831,
	0, 840, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 850, 858, 0, 0,
	0, 0, 0, 1331, 0, 1348, 1349, 1350, 0, 0,
	856, 0, 0, 0, 0, 0, 0, 0, 1471, 0,
	848, 0, 0, 0, 0, 0, 841, 0, 0, 831,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 850, 858, 847, 0,
	0, 0, 1345, 0, 0, 0, 0, 0, 0, 0,
	856, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	848, 0, 0, 0, 0, 0, 841, 0, 0, 0,
	0, 0, 0, 842, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 851, 0, 0, 0, 847, 0,
	1336, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 824, 0, 843, 844, 845, 853, 854, 855, 0,
	0, 1351, 0, 842, 0, 0, 846, 0, 0, 0,
	0, 0, 0, 826, 851, 857, 0, 1346, 849, 0,
	0, 837, 838, 839, 0, 836, 833, 834, 835, 827,
	828, 829, 830, 832, 825, 852, 0, 0, 0, 0,
	840, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 849, 0,
	0, 837, 838, 839, 1347, 836, 833, 834, 835, 827,
	828, 829, 830, 832, 0, 852, 0, 824, 831, 843,
	844, 845, 853, 854, 855, 0, 0, 0, 0, 0,
	0, 0, 846, 0, 0, 850, 858, 0, 0, 826,
	0, 857, 1331, 0, 1348, 1349, 1350, 0, 0, 856,
	0, 0, 0, 0, 0, 0, 0, 1470, 0, 848,
	825, 0, 0, 0, 0, 841, 840, 0, 0, 0,
	0, 0, 1342, 1343, 1344, 0, 1341, 1338, 1339, 1340,
	1332, 1333, 1334, 1335, 1337, 0, 0, 847, 318, 0,
	0, 1345, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 824, 831, 843, 844, 845, 853, 854,
	855, 0, 842, 0, 0, 0, 0, 0, 846, 0,
	0, 850, 858, 851, 0, 826, 0, 857, 0, 1336,
	0, 0, 0, 0, 0, 856, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 848, 825, 0, 0, 0,
	0, 841, 840, 0, 0, 0, 0, 0, 0, 0,
	1351, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 847, 0, 0, 1346, 849, 0, 0,
	837, 838, 839, 0, 836, 833, 834, 835, 827, 828,
	829, 830, 832, 0, 852, 0, 0, 0, 0, 0,
	831, 0, 0, 0, 0, 1368, 0, 0, 842, 0,
	0, 0, 0, 0, 0, 0, 0, 850, 858, 851,
	0, 824, 0, 843, 844, 845, 853, 854, 855, 0,
	0, 856, 0, 1347, 0, 0, 846, 1486, 0, 0,
	1363, 848, 0, 826, 0, 857, 0, 841, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 825, 0, 0, 0, 0, 847,
	840, 0, 0, 849, 0, 0, 837, 838, 839, 0,
	836, 833, 834, 835, 827, 828, 829, 830, 832, 0,
	852, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1342, 1343, 1344, 842, 1341, 1338, 1339, 1340, 1332,
	1333, 1334, 1335, 1337, 0, 851, 0, 0, 831, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 850, 858, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 856,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 848,
	0, 0, 0, 0, 0, 841, 0, 0, 0, 849,
	0, 0, 837, 838, 839, 0, 836, 833, 834, 835,
	827, 828, 829, 830, 832, 0, 852, 847, 0, 0,
	0, 824, 0, 843, 844, 845, 853, 854, 855, 0,
	0, 0, 0, 0, 0, 0, 846, 0, 0, 0,
	0, 0, 0, 826, 0, 857, 0, 0, 0, 0,
	0, 0, 842, 824, 0, 843, 844, 845, 853, 854,
	855, 0, 0, 851, 825, 0, 0, 0, 846, 0,
	840, 0, 1323, 0, 0, 826, 0, 857, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 825, 0, 0, 0,
	0, 0, 840, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 849, 831, 0,
	837, 838, 839, 0, 836, 833, 834, 835, 827, 828,
	829, 830, 832, 0, 852, 850, 858, 0, 0, 1331,
	0, 1348, 1349, 1350, 0, 0, 0, 0, 0, 856,
	831, 0, 0, 0, 0, 0, 0, 0, 0, 848,
	0, 0, 0, 0, 0, 841, 0, 850, 858, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 856, 0, 0, 0, 0, 0, 847, 1345, 0,
	0, 848, 0, 0, 0, 0, 0, 841, 1329, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 847,
	0, 0, 842, 824, 0, 843, 844, 845, 853, 854,
	855, 0, 0, 851, 0, 0, 1336, 0, 846, 0,
	0, 0, 0, 0, 0, 826, 0, 857, 0, 0,
	0, 0, 0, 0, 842, 0, 0, 1331, 0, 1348,
	1349, 1350, 0, 0, 0, 851, 825, 1351, 0, 0,
	0, 0, 840, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1346, 0, 0, 0, 849, 0, 0,
	837, 838, 839, 0, 836, 833, 834, 835, 827, 828,
	829, 830, 832, 0, 852, 0, 1345, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 849,
	831, 0, 837, 838, 839, 0, 836, 833, 834, 835,
	827, 828, 829, 830, 832, 0, 852, 850, 858, 0,
	1347, 824, 0, 843, 844, 845, 853, 854, 855, 0,
	0, 856, 0, 0, 1336, 0, 0, 0, 0, 0,
	0, 848, 0, 826, 0, 857, 0, 841, 0, 0,
	0, 0, 1352, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 825, 1351, 0, 0, 0, 847,
	840, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1346, 0, 0, 0, 0, 0, 0, 1342, 1343,
	1344, 0, 1341, 1338, 1339, 1340, 1332, 1333, 1334, 1335,
	1337, 0, 0, 0, 842, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 851, 0, 0, 831, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 850, 858, 0, 1347, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 856,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 848,
	0, 0, 0, 0, 0, 841, 0, 0, 0, 849,
	0, 0, 837, 838, 839, 0, 836, 833, 834, 835,
	827, 828, 829, 830, 832, 0, 852, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1342, 1343, 1344, 0,
	1341, 1338, 1339, 1340, 1332, 1333, 1334, 1335, 1337, 0,
	0, 0, 842, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 851, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 849, 0, 0,
	837, 838, 839, 0, 836, 833, 834, 835, 827, 828,
	829, 830, 832, 0, 852,
}
var sqlPact = [...]int{

	3381, -1000, 34, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 825, 16003, -1000, -1000, -1000,
	653, 776, 588, 16003, 16003, 15741, 1277, 1277, 17313, -1000,
	-1000, 20195, -1000, 2804, 482, 484, 482, 482, 476, 17313,
	567, 654, 132, -1000, 783, 63, 19933, 16003, 1269, 30,
	14693, 330, 3381, 15479, 16003, 19671, 388, 38, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1122, 1044, 1020, 14693, 19409, 19147, 18885, -1000, 9914, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 553, 348, 345,
	-1000, 15217, -1000, 892, -1000, 29, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 887, -1000, 16003, -1000, -1000, 18623,
	18361, 339, 841, -1000, -1000, 564, 403, 1309, -1000, 45,
	-1000, -1000, 1121, -1000, 880, 1115, 1113, 1112, 1110, 1109,
	1106, 398, 853, -1000, 552, 841, -1000, 841, -1000, -1000,
	-1000, 525, 17313, -1000, 14693, -1000, 18099, 1056, 17837, -1000,
	783, -1000, -1000, -1000, 908, 1266, 1266, 1266, 1294, 199,
	196, 132, 16, 16003, -1000, 337, 16, 6887, 6887, -1000,
	-1000, 330, -1000, 366, 12852, -1000, 7437, -1000, 824, 1184,
	726, 667, 1183, -100, 598, 12056, 38, -1000, -1000, -1000,
	8830, 4049, 14693, 16003, 16003, 614, 17575, -1000, 1178, 110,
	1174, -1000, 107, 1173, -1000, -1, -1000, -1000, -1000, -1000,
	-1000, -1000, 330, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 14955, 1321, 20752,
	-1000, 8830, -1000, -1000, 13117, 987, 13117, -1000, -1000, 1315,
	-1000, 8830, -1000, 26, 25, 977, 1031, 10461, 10189, 1223,
	900, -1000, -1000, -1000, 44, 4321, 16003, 1141, 13117, 16003,
	16003, 16003, 16003, 16003, 16003, -1000, 973, -1000, 16003, -1000,
	23, 20, -1000, 17313, -1000, 114, -1000, 327, 947, 17051,
	1191, 944, -1000, 908, -1000, 903, 967, 8005, 8830, 132,
	-1000, -1000, 132, 132, 8830, -1000, -1000, 16003, 16, 1312,
	16003, 156, -1000, 22712, -1000, -1000, 8830, 8830, 8830, 8830,
	8830, 823, -1000, -1000, -1000, 5162, -1000, -1000, 38, 326,
	355, -1000, -1000, 325, 38, -1000, -1000, -1000, -1000, 324,
	1415, 487, -1000, -1000, -1000, 8830, 414, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1133, 323, 322, -1000,
	-1000, -1000, -1000, 320, 318, 317, 316, 315, 313, 312,
	311, 310, 309, 308, 307, 305, 304, 766, -1000, 430,
	-1000, -1000, 430, 430, -1000, 300, 300, 302, -1000, -1000,
	-1000, 300, -1000, -1000, -1000, 392, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 303, 156, -1000, -1000, -1000, 16003, -11,
	-1000, 23583, -1000, -6, 705, -1000, 14169, 1272, 1255, 1246,
	14693, 518, 517, 16003, 16003, -1000, 1105, -12, -1000, -1000,
	2348, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 421, 104, 1311,
	104, 12322, -1000, 16003, 16003, -1000, 16003, -1000, -1000, 16003,
	-1000, 16003, 16003, 572, 13645, 685, 1171, 63, -13, -1000,
	1323, -1000, -1000, -1000, -1000, 76, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 302,
	766, 300, 300, 300, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 392, -1000, -1000, 430, 430, 430, -1000, -1000, -17,
	23583, 515, 4, 13381, 16003, -1000, 39, -1000, -1000, 1104,
	473, -18, 735, 1024, 660, -1000, -1000, -1000, -1000, 11,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1376, -1000, -1000, -1000, -1000, 1400, 11, -1000, -1000, -1000,
	-1000, -1000, 1414, -1000, -1000, -1000, 4321, -1000, -1000, -1000,
	16003, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	735, 1024, -1000, -1000, 14693, 13907, 1170, 875, 943, -1000,
	-1000, 380, 1167, -1000, -1000, -1000, -1000, 23583, -1000, 23583,
	793, 1036, -1000, 1036, 8, -1000, 22662, -1000, 297, -24,
	-1000, 421, 6887, 11791, 20752, 16003, 547, 8830, 8830, 8830,
	8830, 8830, 8830, 8830, 8830, 8830, 8830, 8830, 8830, 8830,
	8830, 8830, 8830, 8830, 8830, 8830, 8830, 8830, 8830, 866,
	8830, 512, 8830, 8830, 8830, 8830, 1009, 788, 272, 4321,
	-1000, 652, 652, 652, 23701, 23701, 290, 24, 22127, 6,
	38, -1000, -1000, 6594, 6300, 38, 4593, -1000, 608, 1395,
	426, 23583, 1147, 1086, 296, 194, 191, 8830, 8830, 1034,
	8830, 9105, 8830, 8830, 5437, 8830, 8830, 8830, 8830, 8830,
	8830, -1000, 293, -1000, -1000, -1000, -1000, 1393, -1000, -1000,
	1391, -1000, 545, 539, 1390, 421, 189, 7437, -1000, 685,
	16003, 16003, 16003, -1000, -1000, 942, 16789, -1000, 20752, 16003,
	-1000, 292, 281, 1013, 1011, 16003, 16003, 16527, 16265, 16003,
	720, 16003, 16003, 657, -1000, 597, 1100, 16003, -1000, 8830,
	650, 8830, 676, -1000, 11260, 435, 16003, 659, 151, -1000,
	-1000, -1000, 379, 16003, -1000, -1000, -1000, 110, -1000, 107,
	-1000, -1000, 14693, -1000, -1000, -1000, -1000, -1000, -1000, 20752,
	358, 356, -1000, 1388, 510, -1000, 509, 508, 505, -1000,
	277, -1000, 8830, 16003, 13381, 4, 1, -1000, -1000, 16003,
	1024, -1000, -1000, -1000, -1000, 666, -1000, 663, -1000, 10733,
	-1000, -1000, -1000, 608, -1000, -8, -1000, -1000, -1000, -1000,
	175, -2, -1000, -1000, -1000, -1000, -1000, 16003, 284, 16003,
	16003, 16003, 1166, 1413, 16003, -1000, -1000, -1000, 8830, -1000,
	-1000, -1000, 63, 16003, -1000, 1084, -1000, -38, 1373, -153,
	14431, -1000, 10995, -1000, -1000, 395, 585, 585, 592, 592,
	592, 592, 249, 249, 1805, 2302, 2429, 2429, 2429, 1615,
	341, 341, 2429, 2429, 2429, 23701, 2383, 1769, 8830, 8830,
	503, 787, 272, 1769, 8830, 1362, 1769, 1769, 1769, -1000,
	979, -1000, -1000, -1000, 1099, 269, 9105, 9105, -1000, -1000,
	-1000, 5162, -1000, -1000, 262, 8830, -1000, 8830, -34, -122,
	-1000, -1000, -42, -1000, -1000, -7, 8830, 8830, 8830, 171,
	-1000, 170, 603, -1000, 8830, 830, 259, 258, 8830, -1000,
	-1000, 23413, 20749, 167, 1098, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 148, 23381, 147, 23617, -1000, 9105, 9105, 9105,
	5162, 257, 139, 22471, -111, 23211, 7712, 7712, 7712, 136,
	23093, 8830, -111, 20723, 3223, 3053, -43, -44, -49, 1383,
	-50, 135, 391, 389, 134, 1084, -1000, -1000, -1000, -1000,
	499, 497, 1164, -1000, 933, -1000, 674, 8830, 16003, 255,
	254, 738, -1000, 1163, 803, 1159, 803, -1000, -6, 672,
	-1000, -1000, 494, -1000, 587, -1000, 22182, -1000, 6887, 23583,
	-1000, 658, 1249, -59, -1000, -1000, 6887, 421, 12322, 11791,
	7437, -70, -1000, -1000, 685, -1000, 521, 1382, 133, 937,
	863, 740, 627, 1371, 23583, -8, -1000, -8, -1000, -1000,
	-1000, -1000, -1000, -1000, 16003, 1059, 13907, 253, 16003, 252,
	251, 250, 16003, -1000, 1191, -1000, 130, -1000, 1079, 1293,
	-1000, 11791, 856, 1019, 1018, 11791, 929, 835, 835, 835,
	-1000, 14431, 3765, -1000, -1000, 16003, 247, 11525, 129, 1373,
	8830, 1769, 1769, 8830, 9105, 9105, -1000, 1769, -1000, -1000,
	-1000, -1000, 1096, 245, 8830, 20752, 23022, 22783, -71, 6006,
	-25, 22101, -1000, -1000, 355, -1000, 116, 7162, -1000, 22901,
	-5, -5, -1000, 1407, 1188, -1000, 8830, 22997, -1000, 12587,
	424, 839, 21815, 20752, 20752, -1000, 8830, -1000, 1095, 8830,
	-1000, 20752, 9105, 9105, 9105, 9105, 9105, 9105, 9105, 9105,
	9105, 9105, 9105, 9105, 9105, 9105, 9105, 9105, 9105, 9105,
	9105, 952, 9105, 1356, 1356, 1356, -26, 5712, -1000, 1132,
	1095, 8830, 8830, 20752, 109, 102, 101, -1000, 8830, -111,
	8830, 8830, 8830, -1000, -1000, -1000, 96, -1000, 1366, -1000,
	-1000, -1000, -1000, 1079, 16003, 16003, 16003, 1158, 2175, -1000,
	21782, -72, 16003, 16003, -1000, 1017, 1028, 453, 16003, -1000,
	16003, -1000, 16003, 16003, 16003, 16003, -1000, -1000, -36, 6887,
	230, 63, -36, 650, -1000, -31, -1000, 378, -1000, 353,
	192, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 95,
	-1000, -1000, 1067, -1000, 9649, 237, 16003, 13907, 9649, 871,
	-1000, -1000, 397, 8830, 8830, 1373, 577, 11791, 11791, 1083,
	1008, 11791, -1000, -1000, -1000, -1000, -1000, -1000, 1016, 235,
	16003, 14431, 648, 1769, 3473, 2845, 8830, 20752, 3415, -77,
	8830, 8830, -1000, -79, -1000, 8830, -1000, -1000, 1406, 8830,
	90, 87, 86, -1000, -1000, 23583, 8830, -1000, -1000, 20457,
	8830, 83, -1000, 82, 81, 23583, 1132, 23583, -1000, 707,
	707, 1356, 1356, 1356, 1356, 879, 879, 949, 854, 425,
	425, 425, 1872, 644, 644, 425, 425, 425, 1094, 1007,
	233, 23499, 8830, -81, -1000, -1000, -1000, 23583, 23583, 77,
	-1000, -1000, -1000, -111, 190, 21732, 21493, -1000, 74, 397,
	-1000, -1000, -1000, 16003, -1000, 16003, -1000, 16003, 16003, 1092,
	918, -1000, -1000, 984, 231, 9105, 16003, -1000, 756, -83,
	-87, 916, -1000, 915, 8830, -1000, 20752, 803, 803, -1000,
	492, 488, -1000, -36, 1196, 16003, 1231, -1000, -1000, 228,
	-1000, -1000, -1000, 804, -88, -1000, 207, 1265, 8830, -1000,
	-1000, 218, 9649, -89, 70, -102, 16003, -1000, 16003, 23583,
	-111, 532, -1000, 1083, -1000, 214, 8830, 11791, -1000, -150,
	-1000, 375, -1000, 16003, -104, -1000, 8830, 8830, 3415, -106,
	-1000, 1769, 1769, -1000, 21438, -1000, 22901, -1000, -1000, -1000,
	23583, 785, -1000, 21412, -1000, -1000, -1000, -1000, 9105, 1093,
	213, 20752, 21126, -1000, -1000, 8830, -1000, -1000, -1000, -1000,
	-1000, 786, -1000, -1000, 16003, 931, -1000, -1000, 8830, 23499,
	212, 1059, 211, -1000, -1000, -1000, 673, -1000, -1000, 23583,
	1268, -1000, -1000, 16003, 16003, 555, -112, 16003, -1000, -1000,
	4887, 16003, 756, 9649, 1275, 38, 16003, 1275, 21093, 4593,
	-117, -1000, 1059, 756, 210, -69, -1000, 1290, 1405, -1000,
	16003, 23583, -1000, 1016, -1000, 4321, -118, -1000, 1769, 1769,
	-1000, -1000, 65, 839, 1286, -1000, 232, 9105, 20752, -123,
	-1000, 21043, -1000, -1000, 1157, 20804, 958, 16003, -1000, 16003,
	16003, 440, 16003, -1000, -1000, 611, -1000, 421, -1000, 208,
	1059, -1000, -1000, -1000, -1000, 1265, -7, 756, -1000, 1059,
	9649, 16003, 202, -1000, -129, -1000, -1000, -1000, -1000, 769,
	8830, 232, -131, -1000, -1000, 1102, -1000, 846, 784, 64,
	-133, 201, -1000, 8830, -1000, 12322, -1000, 16003, -1000, 1275,
	61, 1059, -1000, -135, -1000, -1000, -1000, 48, 8555, 8555,
	-111, -1000, 16003, -1000, 865, 855, 616, -1000, -1000, -1000,
	-1000, -1000, 958, 16003, 23583, -125, -137, -1000, -1000, -1000,
	756, -1000, -1000, -1000, 9377, 885, 633, 22421, -1000, -1000,
	-1000, 1200, -1000, 446, 806, 806, 846, -143, -1000, 803,
	1059, 1333, -1000, -1000, -1000, -1000, -1000, -1000, 1346, -1000,
	-1000, 1006, -1000, -1000, -1000, -1000, -1000, 8280, -1000, -1000,
	-1000, -1000,
}
var sqlPgo = [...]int{

	0, 1621, 1620, 1304, 118, 1618, 116, 1616, 1615, 1606,
	94, 113, 110, 123, 1605, 90, 1603, 1601, 1595, 87,
	1594, 1593, 1591, 79, 1589, 1588, 1587, 1585, 1584, 86,
	26, 137, 1938, 131, 1582, 1581, 1580, 17, 98, 71,
	1578, 2, 62, 91, 104, 1295, 30, 1575, 1574, 136,
	29, 25, 391, 96, 139, 115, 111, 1573, 1572, 1569,
	46, 1568, 4, 1567, 1564, 1563, 52, 37, 1561, 14,
	20, 1559, 1558, 126, 1555, 63, 100, 105, 75, 122,
	13, 1554, 60, 12, 69, 1553, 40, 1551, 44, 76,
	128, 1550, 51, 145, 54, 32, 59, 1545, 1543, 1542,
	1541, 73, 1539, 88, 68, 1538, 1537, 74, 1535, 129,
	132, 1528, 1527, 130, 1525, 1523, 1522, 706, 1521, 1520,
	349, 1518, 10, 48, 56, 8, 103, 101, 23, 1515,
	22, 1514, 1935, 793, 698, 1512, 67, 55, 78, 49,
	70, 19, 1511, 1510, 99, 1507, 1506, 1505, 1504, 1502,
	77, 1499, 81, 134, 47, 53, 95, 41, 31, 83,
	97, 142, 102, 1498, 1497, 114, 1496, 45, 1495, 1494,
	856, 109, 1493, 1489, 1478, 657, 597, 556, 92, 1477,
	1476, 192, 176, 1475, 1474, 106, 1473, 1471, 135, 140,
	21, 1469, 121, 1467, 89, 1466, 0, 38, 33, 1460,
	124, 72, 1454, 1450, 1447, 1446, 28, 3, 11, 6,
	7, 5, 24, 16, 1445, 1443, 125, 84, 1442, 141,
	1441, 1440, 43, 1436, 1434, 18, 1432, 15, 1431, 9,
	1, 1430, 133, 1429, 93, 1427, 1338, 1426, 138, 1425,
	1421, 1332, 80,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 4, 4, 39, 39,
	38, 38, 38, 38, 38, 38, 38, 38, 38, 38,
	38, 38, 38, 38, 38, 36, 36, 41, 41, 41,
	40, 40, 35, 35, 5, 5, 5, 6, 6, 6,
	10, 11, 11, 11, 11, 11, 11, 79, 79, 78,
	78, 81, 81, 12, 12, 13, 13, 13, 13, 13,
	13, 13, 13, 166, 166, 165, 14, 142, 142, 15,
	15, 15, 15, 16, 102, 102, 17, 17, 17, 17,
	18, 22, 232, 232, 232, 236, 236, 237, 237, 238,
	238, 238, 238, 238, 238, 238, 234, 234, 25, 25,
	25, 25, 25, 121, 117, 117, 119, 119, 119, 119,
	44, 116, 116, 116, 116, 118, 118, 118, 118, 189,
	188, 188, 194, 194, 194, 57, 57, 57, 57, 57,
	58, 58, 58, 187, 187, 187, 187, 195, 195, 195,
	195, 195, 195, 59, 59, 59, 193, 193, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 233, 233, 235, 235, 9,
	9, 60, 60, 61, 61, 124, 124, 124, 124, 62,
	62, 123, 204, 204, 205, 205, 205, 205, 205, 205,
	206, 206, 206, 206, 206, 206, 206, 202, 202, 203,
	200, 200, 201, 201, 201, 201, 239, 239, 122, 122,
	65, 65, 209, 209, 209, 209, 207, 207, 207, 207,
	207, 210, 208, 211, 211, 211, 211, 211, 153, 153,
	153, 28, 8, 8, 106, 106, 69, 69, 157, 157,
	157, 51, 51, 37, 37, 37, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 107, 107, 108, 108, 20,
	24, 27, 27, 27, 27, 27, 241, 241, 48, 48,
	48, 48, 49, 49, 120, 120, 120, 120, 120, 43,
	7, 7, 42, 42, 19, 19, 19, 19, 19, 54,
	54, 113, 113, 113, 115, 115, 114, 114, 114, 92,
	92, 29, 74, 74, 83, 83, 84, 84, 163, 85,
	85, 23, 23, 32, 32, 30, 30, 30, 30, 30,
	30, 31, 31, 33, 33, 33, 33, 33, 33, 33,
	217, 217, 217, 219, 219, 216, 218, 218, 240, 240,
	93, 93, 93, 64, 63, 63, 67, 67, 66, 68,
	68, 156, 90, 90, 90, 90, 109, 110, 110, 111,
	111, 112, 112, 89, 89, 139, 139, 34, 34, 73,
	73, 75, 75, 130, 130, 131, 131, 129, 129, 129,
	158, 158, 158, 158, 159, 159, 159, 159, 159, 159,
	154, 154, 154, 154, 155, 155, 164, 164, 96, 96,
	96, 96, 94, 94, 95, 95, 160, 160, 160, 160,
	91, 91, 161, 161, 161, 125, 125, 167, 167, 167,
	72, 72, 72, 168, 168, 168, 168, 168, 168, 168,
	168, 168, 168, 168, 168, 168, 169, 169, 169, 169,
	171, 171, 171, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 172, 172, 179, 179,
	180, 180, 181, 182, 173, 173, 174, 174, 175, 176,
	183, 183, 183, 183, 185, 185, 177, 177, 177, 177,
	177, 178, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 104, 104, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 212, 212, 212,
	212, 212, 212, 212, 214, 214, 215, 215, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 220, 220, 221, 221, 222, 222,
	223, 223, 225, 226, 226, 226, 227, 231, 231, 224,
	224, 228, 228, 228, 229, 229, 230, 230, 230, 230,
	230, 144, 144, 144, 145, 145, 146, 80, 80, 141,
	141, 140, 140, 140, 143, 143, 97, 184, 184, 184,
	184, 184, 184, 184, 98, 98, 105, 99, 99, 100,
	100, 100, 100, 100, 100, 136, 137, 101, 101, 101,
	138, 138, 147, 151, 151, 150, 149, 149, 148, 148,
	128, 128, 128, 128, 127, 126, 86, 86, 242, 242,
	152, 152, 87, 87, 88, 82, 82, 162, 162, 162,
	162, 76, 76, 56, 56, 77, 77, 52, 52, 55,
	53, 53, 53, 53, 70, 70, 71, 71, 50, 50,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 186, 186, 186, 45, 45, 45, 46, 46, 47,
	47, 191, 191, 191, 192, 192, 192, 192, 190, 190,
	190, 190, 190, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 4, 6, 1, 3,
	2, 5, 3, 6, 4, 6, 6, 6, 4, 8,
	2, 3, 3, 6, 4, 3, 2, 1, 1, 0,
	2, 0, 2, 0, 4, 6, 7, 1, 1, 1,
	6, 3, 5, 4, 6, 4, 6, 1, 3, 1,
	2, 2, 3, 2, 5, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 1, 5, 3, 0, 1,
	1, 1, 1, 3, 3, 0, 2, 3, 2, 3,
	6, 6, 1, 2, 2, 1, 1, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 2, 3,
	6, 3, 1, 5, 2, 1, 1, 1, 3, 3,
	2, 3, 3, 3, 3, 1, 3, 3, 2, 1,
	1, 3, 1, 1, 1, 2, 2, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	1, 1, 1, 1, 1, 0, 1, 1, 2, 2,
	4, 2, 4, 4, 4, 4, 4, 4, 4, 2,
	3, 4, 3, 2, 4, 2, 0, 2, 0, 7,
	10, 1, 0, 1, 3, 1, 1, 1, 1, 8,
	0, 3, 2, 0, 3, 1, 2, 2, 3, 6,
	2, 1, 1, 2, 4, 2, 5, 7, 8, 5,
	3, 1, 4, 6, 5, 10, 1, 1, 4, 0,
	3, 0, 2, 2, 2, 0, 1, 1, 2, 2,
	0, 3, 3, 2, 1, 1, 2, 2, 1, 2,
	1, 4, 11, 14, 1, 0, 1, 3, 3, 3,
	5, 2, 0, 1, 1, 0, 6, 6, 8, 6,
	8, 8, 10, 8, 10, 1, 0, 2, 0, 2,
	2, 3, 3, 2, 2, 2, 1, 0, 1, 3,
	2, 0, 2, 1, 1, 1, 3, 3, 0, 3,
	4, 7, 3, 0, 6, 6, 8, 5, 7, 1,
	3, 1, 4, 2, 8, 5, 4, 3, 0, 2,
	0, 8, 2, 0, 1, 3, 1, 1, 3, 5,
	5, 1, 1, 3, 3, 1, 2, 3, 2, 3,
	4, 1, 1, 8, 8, 1, 2, 4, 4, 4,
	2, 2, 3, 1, 3, 6, 1, 0, 1, 0,
	1, 1, 0, 1, 1, 0, 1, 0, 3, 1,
	3, 2, 2, 2, 1, 1, 2, 2, 3, 1,
	1, 1, 1, 3, 0, 2, 0, 2, 3, 3,
	0, 1, 3, 3, 1, 1, 3, 2, 4, 0,
	3, 2, 1, 4, 3, 4, 5, 4, 5, 4,
	5, 2, 4, 1, 1, 0, 5, 0, 2, 2,
	2, 1, 1, 0, 4, 2, 1, 2, 2, 4,
	1, 3, 1, 2, 3, 2, 0, 2, 5, 2,
	3, 4, 0, 1, 1, 1, 1, 2, 4, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 5, 0, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 2, 1, 1, 3, 0, 1, 1,
	1, 1, 5, 2, 1, 1, 1, 1, 4, 1,
	2, 2, 1, 1, 1, 0, 1, 1, 4, 1,
	4, 1, 1, 1, 1, 1, 1, 1, 3, 3,
	3, 3, 3, 3, 3, 0, 1, 4, 1, 3,
	3, 5, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 2, 2, 3, 4,
	3, 4, 4, 5, 3, 3, 3, 3, 3, 4,
	3, 3, 4, 3, 4, 3, 4, 5, 6, 6,
	7, 6, 7, 6, 7, 3, 4, 1, 3, 2,
	2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 5, 6, 6, 7, 1, 1, 1, 3, 1,
	1, 1, 2, 2, 2, 1, 1, 3, 5, 6,
	8, 6, 6, 4, 4, 1, 1, 1, 5, 1,
	3, 1, 3, 1, 1, 1, 1, 6, 6, 4,
	4, 4, 4, 6, 5, 5, 5, 4, 8, 6,
	6, 4, 4, 4, 5, 0, 5, 0, 2, 0,
	1, 3, 3, 2, 2, 0, 6, 1, 0, 3,
	0, 2, 2, 0, 1, 4, 2, 2, 2, 2,
	2, 4, 3, 5, 4, 3, 5, 1, 3, 1,
	3, 3, 3, 2, 1, 3, 3, 1, 1, 1,
	1, 1, 1, 1, 4, 3, 2, 3, 0, 3,
	3, 2, 2, 1, 0, 2, 2, 3, 2, 1,
	1, 3, 5, 1, 2, 4, 2, 0, 1, 0,
	1, 1, 3, 5, 2, 2, 1, 2, 1, 0,
	1, 1, 1, 3, 3, 1, 3, 3, 2, 1,
	1, 1, 3, 1, 3, 1, 3, 1, 2, 3,
	1, 1, 2, 2, 1, 3, 3, 0, 1, 2,
	1, 1, 1, 1, 6, 2, 3, 5, 1, 1,
	1, 1, 2, 2, 1, 1, 1, 1, 0, 3,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -6, -10, -11, -12,
	-14, -16, -17, -18, -19, -21, -22, -24, -23, -25,
	-26, -27, -20, -28, -29, 22, 63, -7, -8, -9,
	-218, 91, 99, 191, 98, 84, 114, 205, 212, -30,
	-32, 220, -121, 221, 33, 229, 57, 94, 207, 202,
	250, 65, -217, -33, -31, 296, 271, 277, 215, -34,
	237, 264, 299, 237, 77, 127, -52, -45, 4, -196,
	-198, 19, 20, 22, 32, 33, 38, 42, 45, 56,
	57, 58, 60, 62, 63, 64, 67, 68, 75, 76,
	77, 78, 80, 84, 86, 90, 91, 93, 98, 99,
	104, 105, 108, 110, 115, 120, 121, 128, 131, 126,
	139, 141, 142, 147, 150, 153, 155, 156, 157, 158,
	159, 161, 162, 164, 166, 163, 169, 171, 172, 178,
	181, 184, 185, 186, 189, 191, 193, 194, 195, 197,
	198, 202, 200, 201, 203, 205, 207, 208, 210, 212,
	213, 214, 217, 218, 220, 221, 223, 226, 228, 229,
	230, 233, 231, 236, 238, 239, 246, 250, 251, 252,
	253, 256, 257, 258, 261, 262, 263, 267, 272, 273,
	274, 275, 27, 34, 35, 36, 37, 39, 40, 43,
	44, 48, 49, 50, 52, 79, 81, 82, 97, 100,
	106, 116, 118, 122, 123, 132, 133, 134, 136, 145,
	168, 170, 179, 183, 188, 190, 196, 209, 216, 224,
	225, 232, 234, 241, 242, 243, 247, 248, 264, 265,
	86, 131, 258, 257, 77, 127, 237, -13, 296, -23,
	-6, -11, -4, -19, -29, -10, -12, 22, -45, -45,
	-45, 191, 21, -236, 21, -237, -238, 65, 91, 114,
	215, 131, 86, 257, -236, -49, 212, -45, -117, 150,
	218, 209, 246, -118, -116, -189, 241, 159, -78, -45,
	4, 77, 56, 78, 115, 127, 128, 61, 62, 142,
	238, 241, 246, 21, 65, -241, 246, 246, -241, -241,
	-48, 246, 244, -49, -240, 237, 237, -106, 77, 255,
	-31, -33, -32, -66, -67, 254, 135, 96, 177, -30,
	-32, -217, -219, 197, -216, -45, -219, -63, -64, 21,
	88, 300, -160, -52, 175, -88, 296, -3, -160, 122,
	-45, -55, 122, -52, 112, 296, -86, -128, -127, -126,
	294, 298, 112, 137, 137, -161, -160, -45, 122, -56,
	122, -55, -79, 122, -78, -166, -165, -192, 4, -196,
	-198, -197, 264, 54, 66, 113, 130, 124, 138, 140,
	146, 148, 160, 180, 182, 206, 222, 237, -142, 296,
	-102, 296, -45, 21, 174, 300, 174, -45, -117, 50,
	-117, 296, -119, -43, -44, 139, 193, 244, 281, 112,
	275, -59, 5, 83, -81, 298, 112, -233, 174, 112,
	112, 112, 112, 112, 112, 275, 139, 193, 237, -120,
	-43, -44, -120, 244, -49, -91, -160, -78, 122, 127,
	-45, 122, -66, -67, -90, -109, -110, 149, 173, -93,
	21, 88, -93, -93, 42, 297, 297, 300, -219, -71,
	296, -82, -162, -132, 289, -134, 287, 288, 293, 165,
	276, -144, -52, -135, 9, 296, -147, -214, -32, 97,
	28, -145, -146, 209, -45, 7, 8, 5, 6, -50,
	-169, -178, 249, 101, 167, 46, -212, -213, 4, -196,
	-191, -170, -180, -174, -177, 136, 54, 70, 73, 71,
	74, 219, 259, 47, 27, 100, 183, 188, 234, 247,
	248, 122, 168, 123, 52, 116, 145, 90, 35, 37,
	39, 40, 48, 49, 79, 81, 82, 106, 132, 133,
	134, 170, 196, 224, 232, 242, 243, 265, -197, -181,
	-182, -175, -176, -183, -82, -88, 289, -52, 296, -87,
	-152, -132, 83, -39, 200, -38, 20, 22, 91, 262,
	97, 200, 200, 97, 301, 230, 297, -76, -52, -128,
	-132, -190, 289, 4, -196, -198, -197, -199, 21, 23,
	24, 25, 26, 28, 29, 30, 31, 41, 46, 47,
	51, 53, 55, 61, 65, 69, 70, 71, 72, 73,
	74, 83, 85, 87, 88, 89, 92, 94, 96, 101,
	102, 103, 109, 111, 112, 114, 117, 119, 125, 127,
	129, 135, 137, 143, 144, 149, 151, 152, 165, 167,
	173, 174, 175, 176, 177, 187, 192, 199, 204, 215,
	219, 227, 235, 237, 240, 244, 245, 249, 254, 255,
	259, 260, 266, 268, 269, 270, 271, -161, -54, -52,
	-54, 220, -45, 29, 97, -41, 300, 45, 203, 97,
	-41, 300, 97, 297, 300, -160, 122, 29, -141, -167,
	-168, -170, -179, -173, -177, -178, 38, 44, 43, 239,
	216, 225, 36, 132, 133, 134, 224, 35, 196, 106,
	90, 82, 81, 170, 40, 39, -181, -182, -175, -176,
	79, 242, 243, 136, 37, 49, 48, 265, 232, -80,
	-132, -232, -77, 237, 77, -53, -45, 289, -238, -232,
	29, -80, 300, 300, 147, -58, 153, 164, 120, -188,
	83, -194, -187, -153, 9, 249, 101, 174, -193, 8,
	288, -186, -192, 5, 7, 287, -188, 83, 68, -195,
	5, 4, -178, -153, 83, 150, 298, -190, -189, -235,
	109, -232, -189, -189, -189, -189, -189, -45, 147, -189,
	300, 300, -49, -41, 300, 296, 165, -46, 122, -45,
	-42, 93, 165, -90, -110, -109, -111, -132, 21, -132,
	-134, -31, -31, -31, -68, -156, -132, -216, 29, -70,
	-45, -73, 300, 112, 10, 53, 32, 287, 288, 289,
	290, 107, 291, 284, 285, 286, 283, 279, 280, 281,
	59, 154, 211, 12, 13, 14, 25, 176, 148, 276,
	124, 222, 293, 15, 16, 17, 138, 34, 125, 29,
	4, -132, -132, -132, -132, -132, 182, -32, -132, -80,
	-86, -32, -140, 294, 296, -86, 296, 5, 5, 296,
	-148, -132, -220, 272, 109, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 190, -185, 267, -185, -185, -171, 296, -171, -172,
	296, -171, 273, 277, 296, -73, -52, 300, 297, 300,
	244, -107, 61, 55, -123, 122, 55, -200, -45, 61,
	-201, 51, 255, 192, 111, -107, 61, -107, 61, 61,
	-160, 244, 244, -55, -45, 112, 297, 300, 295, 304,
	-125, 269, -113, -23, 296, 83, 29, -113, -83, -84,
	-163, -85, -52, 296, -45, -45, -55, -56, -78, -79,
	-13, -165, 97, -15, -23, -19, -29, -10, 297, 300,
	-72, 28, -103, 296, 274, 157, 80, 121, 156, -104,
	214, 297, 300, 244, 300, -77, -70, -127, -126, 112,
	246, 297, -44, -43, -57, 195, 226, 201, 217, 300,
	8, 7, 7, 5, -190, -234, -45, -44, -43, -160,
	-60, -61, -124, -123, -202, -203, -200, 127, 255, 102,
	97, 174, 165, 281, 97, -112, 209, 210, 300, -37,
	30, 87, 296, 300, 297, -125, -162, -75, -158, -160,
	-32, -159, 296, -167, -78, 241, -132, -132, -132, -132,
	-132, -132, -132, -132, -132, -132, -132, -132, -132, -132,
	-132, -132, -132, -132, -132, -132, -132, -132, 148, 124,
	222, 34, 125, -132, 244, -132, -132, -132, -132, 167,
	165, 249, 101, 256, 88, 171, -242, 235, 31, -138,
	-32, 296, -190, -144, 209, 296, 297, 300, -80, -143,
	295, -140, -80, 297, 297, -80, 266, 21, 88, 289,
	-103, 7, -151, -150, 268, -221, 104, 117, 296, 297,
	297, -132, -132, -97, -184, 4, 274, 157, 80, 121,
	156, 214, -98, -132, -99, -133, -134, 287, 288, 293,
	296, 209, -100, -132, -80, -132, 41, 144, 245, -101,
	-132, 112, -80, -132, -132, -132, -80, -80, -80, 296,
	7, 7, 241, 241, 7, -125, 297, -152, -38, -52,
	-45, -45, 165, -123, 122, -167, -45, 296, 296, 141,
	141, -45, -45, 122, -45, 122, -45, -45, -39, 200,
	-45, -45, 200, 230, 112, -52, -132, -92, 204, -132,
	-92, -115, 174, -76, 264, -45, 204, -74, 300, 112,
	281, -76, -41, -41, -160, -167, 294, 294, 7, 244,
	244, 244, 244, 296, -132, -234, -53, -234, -43, 253,
	58, 195, -194, -103, 300, 297, 300, -46, 127, -46,
	-78, -52, 97, 5, -45, -156, -15, -45, -89, 117,
	-164, 300, 278, 66, -96, 140, 160, 113, 146, 206,
	130, -129, 301, -155, -154, 29, -45, -32, -159, -158,
	275, -132, -132, 244, -242, 235, -138, -132, 167, 249,
	101, 256, 88, 171, 112, 296, -133, -133, -80, 296,
	-80, -132, 295, 295, 300, 297, -67, 300, -66, -132,
	-80, -80, 297, 297, -149, -150, 92, -132, -226, 181,
	296, 296, -132, 29, 300, 297, 112, 297, -105, 187,
	297, 10, 287, 288, 289, 290, 107, 291, 284, 285,
	286, 283, 279, 280, 281, 59, 154, 211, 12, 13,
	14, 138, 125, -133, -133, -133, -80, 296, 297, -136,
	-137, 112, 109, 29, -101, -101, -101, 297, 112, -80,
	300, 300, 300, 297, 297, 297, 7, 297, 300, 297,
	275, 275, 297, -89, 244, 244, 97, 165, -204, -201,
	-132, -70, 296, 296, -36, 91, 220, -108, 97, -41,
	97, -41, 244, -107, 61, 244, 230, 295, -82, 204,
	60, 297, -82, -125, -84, -75, -152, 297, 295, 7,
	7, 297, 157, 121, 156, -104, 156, -104, -104, 7,
	-45, -62, 126, -124, 296, -46, 296, 296, 296, -45,
	-42, 297, -139, 119, 42, -158, 171, 140, 140, -158,
	-96, 140, -94, 180, -94, -94, -155, -190, 302, -45,
	296, 297, -132, -132, -133, -133, 112, 296, -132, -141,
	25, 25, 297, -80, 297, 300, 297, -140, 297, 266,
	-67, -67, -67, 5, 94, -132, 240, -227, -45, 296,
	269, -66, 297, -167, -167, -132, -136, -132, -167, -133,
	-133, -133, -133, -133, -133, -133, -133, -133, -133, -133,
	-133, -133, -133, -133, -133, -133, -133, -133, 88, 165,
	171, -133, 300, -80, 297, -137, -136, -132, -132, -167,
	297, 297, 297, -80, -132, -132, -132, 297, 7, -139,
	-45, -45, -123, 97, -205, 61, -206, 53, 102, 65,
	165, 167, 255, 192, 51, 83, 199, 297, 297, -70,
	-70, 165, 83, 165, 83, 76, 251, -45, -45, -52,
	-45, -45, -45, -82, -114, 296, 174, -23, -92, 281,
	295, 295, 297, 125, -69, -157, -45, -215, 296, -212,
	-213, -50, 296, -70, -60, -69, 174, -222, 270, -132,
	-80, 236, -158, -158, -95, 260, 174, 140, -158, -131,
	-130, 110, 163, 296, -70, -154, 25, 25, -132, -141,
	297, -132, -132, 297, -132, 5, -132, 297, 297, 297,
	-132, -231, -45, -132, 297, 297, 297, -137, 112, 88,
	171, 296, -132, 297, 297, 300, 297, 297, 297, -222,
	-123, -45, -78, -45, 102, 122, 167, 141, 296, -133,
	-52, -122, -239, 64, 233, 297, 297, 167, 167, -132,
	-167, -41, -41, 244, 244, 89, -70, 61, -88, -32,
	296, 184, 297, 300, -51, -86, 53, -51, -132, 296,
	-69, 297, 297, 297, -52, -223, -225, -45, 241, -95,
	296, -132, -158, 300, 303, 281, -70, 297, -132, -132,
	297, 297, -67, -224, 186, 297, -133, 112, 296, -141,
	297, -132, -206, -46, 165, -132, -47, 296, -62, 296,
	199, -40, 53, -45, -45, 257, 166, 297, -45, -45,
	-122, -157, -37, -78, -37, 297, -80, 297, -62, -122,
	296, 300, 29, 5, -70, -130, -190, 297, 297, -67,
	42, -133, -141, 297, 297, 97, 297, -209, 155, -45,
	-70, -52, -35, 260, -78, 220, -125, 296, -62, -51,
	-67, -122, -62, -69, -225, -227, 297, -228, 194, 210,
	-80, 297, 102, -207, -210, -208, 174, 113, 185, 223,
	297, 297, -65, 296, -132, -83, -70, -37, 297, -62,
	297, 297, -229, -230, 34, 252, 68, -132, -229, -45,
	-208, 174, -210, 174, 257, 86, -209, -70, -125, 297,
	-122, -230, 189, 108, 209, 189, 108, -211, 162, 203,
	45, 220, -211, -207, 297, -41, -62, 25, 19, 167,
	83, -230,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 0, 0, 57, 58, 59,
	0, 0, 357, 0, 0, 0, 0, 0, 0, 331,
	-2, 0, 122, 0, 287, 0, 287, 287, 291, 0,
	359, 255, 356, -2, 367, 0, 0, 0, 365, 345,
	0, 0, -2, 0, 0, 0, 0, 757, 784, 785,
	786, 803, 804, 805, 806, 807, 808, 809, 810, 811,
	812, 813, 814, 815, 816, 817, 818, 819, 820, 821,
	822, 823, 824, 825, 826, 827, 828, 829, 830, 831,
	832, 833, 834, 835, 836, 837, 838, 839, 840, 841,
	842, 843, 844, 845, 846, 847, 848, 849, 850, 851,
	852, 853, 854, 855, 856, 857, 858, 859, 860, 861,
	862, 863, 864, 865, 866, 867, 868, 869, 870, 871,
	872, 873, 874, 875, 876, 877, 878, 879, 880, 881,
	882, 883, 884, 885, 886, 887, 888, 889, 890, 891,
	892, 893, 894, 895, 896, 897, 898, 899, 900, 901,
	902, 903, 904, 905, 906, 907, 908, 909, 910, 911,
	912, 913, 914, 915, 916, 917, 918, 919, 920, 921,
	922, 923, 924, 925, 926, 927, 928, 929, 930, 931,
	932, 933, 934, 935, 936, 937, 938, 939, 940, 941,
	942, 943, 944, 945, 946, 947, 948, 949, 950, 951,
	952, 953, 954, 955, 956, 957, 958, 959, 960, 961,
	0, 0, 0, 0, 0, 0, 0, 73, 0, 75,
	76, 77, 78, 79, 80, 81, 82, 0, 88, 95,
	96, 867, 98, 0, 105, 106, 107, 109, 110, 111,
	112, 113, 114, 115, 0, 280, 881, 293, 118, 846,
	885, 949, 898, 125, 135, 0, 955, -2, 139, 69,
	168, 169, 0, 171, 186, 0, 0, 0, 0, 0,
	179, 0, 0, 183, 0, 298, 286, 298, 283, 284,
	285, 288, 0, 279, 0, 358, 0, 0, 0, 254,
	-2, 341, 342, -2, 0, 362, 362, 362, 0, 0,
	342, 0, 350, 871, 353, 767, 351, 0, 0, 364,
	363, 0, 346, 426, 0, 387, 0, 2, 0, 935,
	0, 0, 935, 0, 0, 0, 758, 736, 730, 731,
	0, 0, 0, 0, 0, 0, 432, 61, 935, 49,
	935, 753, 49, 935, 67, 0, 83, 85, 794, 795,
	796, 797, 960, 962, 963, 964, 965, 966, 967, 968,
	969, 970, 971, 972, 973, 974, 975, 0, 0, 0,
	93, 0, 97, 99, 0, 0, 0, 292, 119, 925,
	121, 0, 124, 126, 127, 0, 0, 0, 0, 0,
	0, 138, 163, 164, 70, 0, 0, 188, 0, 0,
	0, 0, 0, 0, 0, 180, 0, 182, 0, 281,
	294, 295, 282, 0, 290, 49, 430, 0, 935, 788,
	303, 935, -2, 0, 337, 374, 375, 0, 0, 0,
	360, 361, 0, 0, 0, 333, 334, 0, 352, 0,
	0, 390, 745, 749, 750, 518, 0, 0, 0, 0,
	0, 0, 605, 606, 607, 0, 609, 610, 611, 930,
	0, 615, 616, 949, 757, 770, 771, 772, 773, 0,
	0, 0, 778, 779, 780, 729, 655, 625, -2, -2,
	768, 456, 457, 458, 459, -2, 962, 629, 631, 633,
	634, 635, 636, 0, 914, 931, 945, 946, 954, 958,
	959, 935, 942, 936, 926, 933, 941, 827, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, 793, 480,
	481, 486, 487, 489, 390, 388, 427, 428, 0, 0,
	742, 740, 741, 26, 276, 28, 0, 276, 276, 0,
	0, 0, 0, 0, 0, 54, 0, 0, 751, 737,
	0, 734, 735, 798, 799, 800, 801, 802, 976, 977,
	978, 979, 980, 981, 982, 983, 984, 985, 986, 987,
	988, 989, 990, 991, 992, 993, 994, 995, 996, 997,
	998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007,
	1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017,
	1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027,
	1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037,
	1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047,
	1048, 1049, 1050, 1051, 1052, 1053, 1054, 436, 0, 309,
	0, 0, 433, 0, 0, 63, 0, 47, 48, 0,
	65, 0, 0, 357, 0, 0, 935, 357, 0, 689,
	442, 443, 444, 445, 446, 515, 449, 450, 451, 452,
	453, 454, 455, 463, 464, 465, 466, 467, 468, 477,
	0, 462, 462, 462, 474, 475, 478, 479, 484, 485,
	496, 497, 499, 501, 495, 495, 495, 492, 493, 0,
	687, 0, 102, 0, 822, 755, 760, 761, 108, 0,
	0, 0, 0, 0, 0, 130, 150, 151, 152, 131,
	133, 140, 142, 143, 144, 153, 154, 155, 156, 248,
	0, 250, 166, 167, 781, 0, 132, 134, 136, 137,
	157, 158, 0, 160, 161, 162, 0, 71, 170, 172,
	0, 185, 173, 174, 175, 176, 177, 178, 181, 184,
	0, 0, 289, 251, 0, 192, 0, 0, 935, 787,
	300, 0, 0, 340, 372, 373, 376, 379, 380, 377,
	518, 347, 348, 349, 368, 369, 265, 354, 0, 0,
	764, 436, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 739, 0, 0,
	748, 522, 523, 524, 546, 547, 0, -2, 687, 0,
	612, 613, 614, 0, 0, -2, 0, 775, 515, 0,
	0, 728, 657, 0, 0, 0, 0, 0, 0, 0,
	0, 708, 714, 0, 0, 0, 0, 0, 0, 0,
	0, 470, 483, 494, 491, 490, 472, 0, 471, 469,
	0, 473, 0, 0, 0, 436, 0, 0, 744, 0,
	0, 0, 0, 275, 30, 935, 0, 40, 0, 0,
	221, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 759, 0, 0, 0, 732, 0,
	320, 0, 320, 311, 0, 0, 0, 307, 323, 324,
	326, 327, 0, 0, 434, 62, 754, 49, 68, 49,
	74, 84, 0, 86, 89, 90, 91, 92, 87, 0,
	437, 439, 447, 0, 502, 503, 504, 505, 506, 507,
	516, 94, 0, 0, 0, 103, 104, 762, 763, 0,
	0, 123, 128, 129, 299, 0, 147, 0, 149, 0,
	249, 783, 782, 515, 72, 187, 116, 296, 297, 431,
	0, 191, 193, 195, 196, 197, 198, 788, 0, 788,
	0, 0, 0, 0, 0, 378, 381, 382, 0, 371,
	263, 264, 357, 0, 766, 384, 746, 417, 391, 399,
	415, 402, 0, 519, 520, 0, 525, 526, 527, 528,
	529, 530, 531, 532, 533, 534, -2, -2, -2, 538,
	539, 540, -2, -2, -2, 544, 545, -2, 0, 0,
	0, 739, 0, -2, 0, 554, -2, -2, -2, 558,
	0, 561, 563, 565, 0, 0, 0, 0, 738, 575,
	720, 0, 747, 560, 0, 0, 608, 0, 0, 0,
	693, 694, 0, -2, 617, 367, 0, 0, 0, 0,
	776, 0, 727, 723, 0, 665, 0, 0, 0, 630,
	632, 0, 0, 0, 0, 697, 698, 699, 700, 701,
	702, 703, 0, 0, 0, 0, 577, 0, 0, 0,
	0, 949, 0, 687, 713, 0, 0, 0, 0, 0,
	687, 0, 719, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 384, 429, 743, 29, 267,
	0, 0, 0, 32, 935, 203, 0, 0, 0, 0,
	0, 278, 41, 935, 49, 935, 49, 42, 27, 276,
	266, 269, 0, 55, 0, 752, 0, 60, 0, 435,
	304, 305, 0, 0, 313, 310, 0, 436, 0, 0,
	0, 0, 64, 66, 0, 690, 0, 0, 0, 0,
	0, 0, 0, 0, 688, 100, 756, 101, 120, 145,
	146, 148, 141, 159, 0, 200, 0, 0, 788, 0,
	0, 0, 0, 302, 303, 370, 0, 765, 386, 0,
	389, 0, 0, 0, 0, 0, 0, 423, 423, 423,
	421, 415, 0, 401, 414, 0, 413, -2, 402, 0,
	0, -2, -2, 0, 0, 0, 576, -2, 559, 562,
	564, 566, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 688, 691, 692, 0, -2, 0, 0, 366, 367,
	367, 367, 623, 0, 0, 724, 0, 0, 624, 0,
	0, 0, 0, 0, 0, 639, 0, 640, 0, 0,
	641, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 579, 580, 581, 0, 0, 642, 711,
	712, 0, 0, 0, 0, 0, 0, 647, 0, 718,
	0, 0, 0, 651, 652, 653, 0, 460, 0, 476,
	498, 500, 488, 386, 0, 0, 0, 0, 201, 220,
	0, 0, 0, 0, 34, 0, 0, 0, 0, 38,
	0, 44, 0, 0, 0, 0, 56, 733, 319, 0,
	318, 0, 308, 320, 325, 322, 328, 0, 440, 0,
	0, 448, 508, 509, 510, 511, 512, 513, 514, 0,
	117, 189, 0, 194, 0, 0, 0, 192, 0, 0,
	301, 355, 659, 0, 0, 392, 0, 0, 0, 0,
	0, 0, 418, 422, 419, 420, 400, 397, 0, 411,
	0, 404, 521, -2, 0, 0, 0, 0, -2, 0,
	0, 0, 721, 0, 682, 0, -2, 695, 618, 0,
	0, 0, 0, 777, 722, 726, 0, 663, 664, 668,
	0, 0, 628, 0, 0, 696, 705, 706, 578, 582,
	583, 584, 585, 586, 587, 588, 589, 590, 591, -2,
	-2, -2, 595, 596, 597, -2, -2, -2, 0, 0,
	0, 707, 0, 0, 685, 709, 710, 715, 716, 0,
	644, 645, 646, 717, 0, 0, 0, 482, 0, 659,
	271, 273, 31, 0, 202, 0, 205, 0, 0, 0,
	0, 211, 212, 0, 0, 0, 0, 222, 229, 0,
	0, 0, 46, 0, 0, 277, 0, 49, 49, 268,
	0, 0, 270, 306, 0, 0, 0, 312, 321, 0,
	441, 438, 517, 0, 0, 256, 262, 262, 0, 626,
	627, 0, 0, 0, 0, 0, 0, 343, 0, 385,
	383, 0, 405, 0, 407, 0, 0, 0, 409, 0,
	395, 0, 394, 0, 0, 403, 0, 0, -2, 0,
	569, -2, -2, 681, 688, 774, 367, 619, 621, 622,
	725, 670, 667, 0, 654, 637, 638, 704, 0, 0,
	0, 0, 688, 684, 643, 0, 649, 650, 461, 344,
	33, 0, 206, 207, 788, 0, 210, 213, 0, 215,
	790, 200, 0, 226, 227, 224, 0, 35, 36, 45,
	51, 37, 43, 0, 0, 0, 0, 0, 329, 330,
	0, 0, 229, 0, 265, 769, 0, 265, 0, 0,
	0, 219, 200, 229, 0, 658, 660, 0, 0, 406,
	0, 425, 408, 0, 398, 0, 0, 412, -2, -2,
	570, 683, 0, 367, 0, 656, -2, 0, 0, 0,
	686, 0, 204, 208, 0, 0, 235, 0, 223, 0,
	0, 53, 0, 272, 274, 0, 315, 436, 317, 0,
	200, 257, 258, 261, 259, 262, 367, 229, 190, 200,
	0, 0, 0, 416, 0, 396, 393, 410, 620, 673,
	0, -2, 0, 603, 648, 0, 214, 240, 0, 0,
	0, 231, 39, 0, 50, 0, 316, 0, 217, 265,
	0, 200, 252, 0, 661, 662, 424, 0, 0, 0,
	669, 604, 0, 216, 236, 237, 0, 232, 233, 234,
	789, 228, 235, 0, 52, 436, 0, 260, 618, 218,
	229, 666, 671, 674, -2, 901, 819, 0, 672, 209,
	238, 0, 239, 0, 0, 0, 240, 0, 314, 49,
	200, 0, 676, 677, 678, 679, 680, 241, 0, 244,
	245, 0, 242, 225, 230, 199, 253, 0, 243, 246,
	247, 675,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 285, 3, 291, 286, 3,
	296, 297, 289, 287, 300, 288, 298, 290, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 304, 299,
	279, 281, 280, 3, 301, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 294, 3, 295, 284, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 302, 283, 303, 293,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 282, 57622, 292, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:713
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:719
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:725
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 18:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:749
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 25:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:759
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 26:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:765
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 27:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:769
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 28:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:775
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 29:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:779
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:786
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 31:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:791
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 32:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:796
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 33:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:801
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:806
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:811
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 36:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:815
		{
			unimplemented()
		}
	case 37:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:818
		{
			sqlVAL.union.val = &AlterTableDropColumn{columnKeyword: sqlDollar[2].union.bool(), IfExists: true, Column: Name(sqlDollar[5].str)}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:823
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 39:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:833
		{
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:836
		{
			sqlVAL.union.val = &AlterTableAddConstraint{ConstraintDef: sqlDollar[2].union.constraintDef()}
		}
	case 41:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:840
		{
			unimplemented()
		}
	case 42:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:842
		{
			unimplemented()
		}
	case 43:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:845
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 44:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:854
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 45:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:864
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 46:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:868
		{
			sqlVAL.union.val = nil
		}
	case 47:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:874
		{
			sqlVAL.union.val = DropCascade
		}
	case 48:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:878
		{
			sqlVAL.union.val = DropRestrict
		}
	case 49:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:882
		{
			sqlVAL.union.val = DropDefault
		}
	case 50:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:887
		{
			unimplementedWithIssue(2473)
		}
	case 51:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:888
		{
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:891
		{
			unimplemented()
		}
	case 53:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:892
		{
		}
	case 54:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:896
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 55:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:900
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 56:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:904
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:917
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retExprs()}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:924
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:928
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:932
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:940
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:948
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 66:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:952
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:958
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:962
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 69:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:968
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 70:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:972
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 71:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:978
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 72:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:982
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 73:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:989
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 74:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:993
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 75:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:999
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 82:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1008
		{ /* SKIP DOC */
		}
	case 83:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1012
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1016
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 86:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1026
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1036
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 88:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1040
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 89:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1046
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 93:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1056
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1067
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 95:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1071
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 96:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1078
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1084
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1090
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1094
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1101
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1108
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1115
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1119
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1123
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1130
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1133
		{
		}
	case 107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1137
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1141
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1148
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 110:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1152
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 111:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1156
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 112:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1160
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 113:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1164
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1168
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1172
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1180
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1184
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1192
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 119:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1196
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 120:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1200
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1204
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1207
		{ /* SKIP DOC */
		}
	case 123:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1213
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1219
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1226
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1230
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1234
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1238
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1245
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1251
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1255
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1259
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1263
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1270
		{
			unimplemented()
		}
	case 137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1273
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1276
		{
			unimplemented()
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1283
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1287
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1295
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1301
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1305
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1309
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 148:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1313
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1317
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1323
		{
			sqlVAL.union.val = Low
		}
	case 151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1327
		{
			sqlVAL.union.val = Normal
		}
	case 152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1331
		{
			sqlVAL.union.val = High
		}
	case 153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1337
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1341
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1345
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1360
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1364
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1368
		{
			d, err := ParseDInterval(sqlDollar[2].str)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1378
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1382
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1387
		{
			unimplemented()
		}
	case 164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1388
		{
			unimplemented()
		}
	case 165:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1389
		{
		}
	case 166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1393
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1397
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1403
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1407
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1411
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1415
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1419
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1423
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1427
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1431
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1435
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1439
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1443
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1447
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1451
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1455
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1459
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1463
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 184:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1467
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1473
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 186:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1478
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1484
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 188:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1488
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 189:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1495
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs()}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1499
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs()}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1506
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 193:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1512
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1516
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1522
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1528
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 199:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1534
		{
			/* SKIP DOC */
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1542
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1548
		{
			sqlVAL.union.val = newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
		}
	case 202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1554
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 203:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1558
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1564
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1568
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1571
		{
			unimplemented()
		}
	case 207:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1573
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1577
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1581
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1599
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1603
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1607
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1611
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1615
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1619
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1623
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1632
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1641
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1654
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1666
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 221:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1671
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 222:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1677
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1683
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    NameListToIndexElems(sqlDollar[3].union.nameList()),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 224:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1693
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[4].union.nameList()),
				},
				PrimaryKey: true,
			}
		}
	case 225:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1703
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 228:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1726
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 229:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1730
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1736
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 231:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1740
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1745
		{
			unimplemented()
		}
	case 233:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1746
		{
			unimplemented()
		}
	case 234:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1747
		{
			unimplemented()
		}
	case 235:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1748
		{
		}
	case 236:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1755
		{
			unimplemented()
		}
	case 237:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1756
		{
			unimplemented()
		}
	case 238:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1757
		{
			unimplemented()
		}
	case 239:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1758
		{
			unimplemented()
		}
	case 240:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1759
		{
		}
	case 241:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1762
		{
			unimplemented()
		}
	case 242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1765
		{
			unimplemented()
		}
	case 243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1768
		{
			unimplemented()
		}
	case 244:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1769
		{
			unimplemented()
		}
	case 245:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1770
		{
			unimplemented()
		}
	case 246:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1771
		{
			unimplemented()
		}
	case 247:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1772
		{
			unimplemented()
		}
	case 248:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1776
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1780
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1784
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 251:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1791
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 252:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:1798
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 253:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:1809
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1823
		{
			sqlVAL.union.val = true
		}
	case 255:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1827
		{
			sqlVAL.union.val = false
		}
	case 256:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1833
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1837
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1846
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1849
		{
			unimplemented()
		}
	case 260:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1850
		{
			unimplemented()
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1853
		{
			unimplemented()
		}
	case 262:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1854
		{
		}
	case 263:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1858
		{
			sqlVAL.union.val = Ascending
		}
	case 264:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1862
		{
			sqlVAL.union.val = Descending
		}
	case 265:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1866
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 266:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1873
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1877
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1881
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1885
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1889
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1893
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1897
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1901
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 274:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1905
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 275:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1911
		{
			sqlVAL.union.val = true
		}
	case 276:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1915
		{
			sqlVAL.union.val = false
		}
	case 277:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1920
		{
		}
	case 278:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1921
		{
		}
	case 279:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1925
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1931
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1938
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 282:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1942
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 283:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1946
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1950
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1954
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1963
		{
		}
	case 287:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1964
		{
		}
	case 288:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1968
		{
			sqlVAL.str = ""
		}
	case 289:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1972
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1976
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 291:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1980
		{
			sqlVAL.str = ""
		}
	case 292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1986
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 293:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1990
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 294:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1996
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2000
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2004
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2008
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2012
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2018
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 300:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2024
		{
			sqlVAL.union.val = &CreateDatabase{Name: Name(sqlDollar[3].str), Encoding: sqlDollar[4].union.strVal()}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2028
		{
			sqlVAL.union.val = &CreateDatabase{IfNotExists: true, Name: Name(sqlDollar[6].str), Encoding: sqlDollar[7].union.strVal()}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2034
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2037
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 304:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2047
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retExprs()
		}
	case 305:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2053
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
		}
	case 306:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2058
		{
			unimplementedWithIssue(6637)
		}
	case 307:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2060
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2065
		{
			unimplementedWithIssue(6637)
		}
	case 309:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2073
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2077
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2083
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2087
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2091
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2097
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2101
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2107
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 317:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2111
		{
			unimplemented()
		}
	case 318:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2113
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2119
		{
			sqlVAL.union.val = sqlDollar[2].union.selExprs()
		}
	case 320:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2123
		{
			sqlVAL.union.val = SelectExprs(nil)
		}
	case 321:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2130
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retExprs()}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2136
		{
			unimplementedWithIssue(7841)
		}
	case 323:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2137
		{
		}
	case 324:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2141
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2145
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2155
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2167
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2171
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2215
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2221
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2225
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2240
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2244
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2248
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2252
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2256
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2260
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2294
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2306
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2318
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2326
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2335
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2344
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2362
		{
			unimplemented()
		}
	case 351:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2363
		{
			unimplemented()
		}
	case 352:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2364
		{
			unimplemented()
		}
	case 353:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2367
		{
			unimplemented()
		}
	case 354:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2368
		{
			unimplemented()
		}
	case 355:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2371
		{
			unimplemented()
		}
	case 356:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2374
		{
			unimplemented()
		}
	case 357:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2375
		{
		}
	case 358:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2378
		{
		}
	case 359:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2379
		{
		}
	case 360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2383
		{
			sqlVAL.union.val = true
		}
	case 361:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2387
		{
			sqlVAL.union.val = false
		}
	case 362:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2391
		{
			sqlVAL.union.val = false
		}
	case 363:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2397
		{
			sqlVAL.union.val = true
		}
	case 364:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2402
		{
		}
	case 365:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2403
		{
		}
	case 366:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2407
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 367:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2411
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 368:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2417
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 369:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2423
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2427
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2433
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2441
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2450
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2461
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2474
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 378:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2481
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2488
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 381:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2502
		{
		}
	case 382:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2503
		{
		}
	case 383:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2529
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 384:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2533
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 385:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2539
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 386:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2543
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 387:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2549
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2553
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2565
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2569
		{
			sqlVAL.union.val = &From{}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2575
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2579
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2585
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2590
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2596
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 396:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2601
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			index := a.Index
			if index == "" {
				index = b.Index
			} else if b.Index != "" {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			noIndexJoin := a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = &IndexHints{Index: index, NoIndexJoin: noIndexJoin}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2621
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2625
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 399:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2629
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2636
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), As: sqlDollar[3].union.aliasClause()}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2640
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, As: sqlDollar[2].union.aliasClause()}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2644
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 403:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2648
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[2].union.tblExpr(), As: sqlDollar[4].union.aliasClause()}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2668
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2672
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2676
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2680
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2684
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2688
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2694
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2698
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2702
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2706
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2713
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2719
		{
			sqlVAL.union.val = AsOfClause{Expr: &StrVal{s: sqlDollar[5].str}}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2723
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2729
		{
			sqlVAL.str = astFullJoin
		}
	case 419:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2733
		{
			sqlVAL.str = astLeftJoin
		}
	case 420:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2737
		{
			sqlVAL.str = astRightJoin
		}
	case 421:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2741
		{
			sqlVAL.str = astInnerJoin
		}
	case 422:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2747
		{
		}
	case 423:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2748
		{
		}
	case 424:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2759
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2763
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2769
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 427:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2773
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 428:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2777
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 429:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2781
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 430:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2787
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2791
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2804
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 433:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2808
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2812
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2818
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 436:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2822
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 437:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2834
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 438:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2838
		{
			unimplementedWithIssue(2115)
		}
	case 439:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2839
		{
			unimplementedWithIssue(2115)
		}
	case 440:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2842
		{
			unimplementedWithIssue(2115)
		}
	case 441:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2843
		{
			unimplementedWithIssue(2115)
		}
	case 442:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2844
		{
		}
	case 448:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2852
		{
			unimplemented()
		}
	case 449:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2854
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 450:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2858
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 451:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2862
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 452:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2866
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 453:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2870
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 454:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2874
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 455:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2878
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 460:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2899
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2908
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2922
		{
			sqlVAL.union.val = nil
		}
	case 463:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2929
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 464:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2933
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 465:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2937
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 466:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2941
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 467:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2945
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 468:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2949
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 469:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2953
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newFloatColType(int(prec))
		}
	case 470:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2962
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 471:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2966
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2975
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2984
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2993
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 475:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2997
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 476:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3003
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 477:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3007
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3025
		{
			n, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 483:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3041
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 488:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3057
		{
			n, err := sqlDollar[3].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3073
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 490:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3079
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 491:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3083
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 492:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3087
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 493:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3091
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 494:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3096
		{
		}
	case 495:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3097
		{
		}
	case 496:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3102
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 497:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3106
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 498:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3110
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3114
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 500:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3118
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 501:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3123
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 502:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3128
		{
			unimplemented()
		}
	case 503:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3129
		{
			unimplemented()
		}
	case 504:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3130
		{
			unimplemented()
		}
	case 505:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3131
		{
			unimplemented()
		}
	case 506:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3132
		{
			unimplemented()
		}
	case 507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3133
		{
			unimplemented()
		}
	case 508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3134
		{
			unimplemented()
		}
	case 509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3135
		{
			unimplemented()
		}
	case 510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3136
		{
			unimplemented()
		}
	case 511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3137
		{
			unimplemented()
		}
	case 512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3138
		{
			unimplemented()
		}
	case 513:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3139
		{
			unimplemented()
		}
	case 514:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3140
		{
			unimplemented()
		}
	case 515:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3141
		{
		}
	case 516:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3144
		{
			unimplemented()
		}
	case 517:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3145
		{
			unimplemented()
		}
	case 519:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3169
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3177
		{
			unimplemented()
		}
	case 521:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3178
		{
			unimplemented()
		}
	case 522:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3187
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3191
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3195
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3199
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3203
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3207
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3211
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3215
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3219
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3223
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3227
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3231
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3235
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3239
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3243
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3247
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3251
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3255
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3259
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3263
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3267
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3271
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3275
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3279
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3283
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3287
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3291
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3295
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3299
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3303
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3307
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3311
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3315
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3319
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3323
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3327
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3331
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3335
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3338
		{
			unimplemented()
		}
	case 561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3340
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3344
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3348
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3352
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3356
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3360
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3364
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3368
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3372
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3376
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3380
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3384
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3388
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3392
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3396
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3400
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3417
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3426
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3430
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3434
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3438
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3442
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3446
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3450
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3454
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3458
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3462
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3466
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3470
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3474
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3478
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3482
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3486
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3490
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3494
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3498
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3502
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3506
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3510
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3514
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3518
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3522
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3526
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3538
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 607:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3543
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3547
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3553
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3557
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3561
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3567
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 615:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3571
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 616:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3575
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3583
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName()}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3587
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3590
		{
			unimplemented()
		}
	case 620:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3591
		{
			unimplemented()
		}
	case 621:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3593
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Type: All, Exprs: sqlDollar[4].union.exprs()}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3597
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Type: Distinct, Exprs: sqlDollar[4].union.exprs()}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3601
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Exprs: Exprs{StarExpr()}}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3614
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 625:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3618
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 626:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3627
		{
			unimplemented()
		}
	case 627:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3628
		{
			unimplemented()
		}
	case 628:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3632
		{
			unimplemented()
		}
	case 629:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3634
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3638
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3642
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3646
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3649
		{
			unimplemented()
		}
	case 634:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3650
		{
			unimplemented()
		}
	case 635:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3651
		{
			unimplemented()
		}
	case 636:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3652
		{
			unimplemented()
		}
	case 637:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3654
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3658
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3662
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3666
		{
			sqlVAL.union.val = &OverlayExpr{FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3670
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3674
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3677
		{
			unimplemented()
		}
	case 644:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3679
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3683
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3687
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3691
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3695
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3699
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3703
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3707
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3711
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3715
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3721
		{
			unimplemented()
		}
	case 655:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3722
		{
		}
	case 656:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3725
		{
			unimplemented()
		}
	case 657:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3726
		{
		}
	case 658:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3730
		{
			unimplemented()
		}
	case 659:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3731
		{
		}
	case 660:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3734
		{
			unimplemented()
		}
	case 661:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3735
		{
			unimplemented()
		}
	case 662:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3738
		{
			unimplemented()
		}
	case 663:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3741
		{
			unimplemented()
		}
	case 664:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3742
		{
			unimplemented()
		}
	case 665:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3743
		{
		}
	case 666:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3747
		{
			unimplemented()
		}
	case 667:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3758
		{
			unimplemented()
		}
	case 668:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3759
		{
		}
	case 669:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3762
		{
			unimplemented()
		}
	case 670:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3763
		{
		}
	case 671:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3771
		{
			unimplemented()
		}
	case 672:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3772
		{
			unimplemented()
		}
	case 673:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3773
		{
		}
	case 674:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3776
		{
			unimplemented()
		}
	case 675:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3777
		{
			unimplemented()
		}
	case 676:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3783
		{
			unimplemented()
		}
	case 677:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3784
		{
			unimplemented()
		}
	case 678:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3785
		{
			unimplemented()
		}
	case 679:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3786
		{
			unimplemented()
		}
	case 680:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3787
		{
			unimplemented()
		}
	case 681:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3798
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3802
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3806
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3812
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3816
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3822
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3865
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3869
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 689:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3875
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3879
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 691:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3885
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3889
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3893
		{
			sqlVAL.union.val = &Array{nil}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3899
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3903
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 696:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3909
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3931
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3935
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3941
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 707:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3948
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3952
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 709:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3969
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3973
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3977
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3981
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3985
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 714:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3989
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 715:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3995
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 716:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4001
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 717:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4007
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 718:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4011
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 719:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4015
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 720:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4021
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4025
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4036
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4043
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4047
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 725:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4053
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4059
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 727:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4063
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 729:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4070
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 730:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4076
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 731:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4080
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 732:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4084
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4088
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr()}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4094
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 735:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4100
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4106
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4110
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 738:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4115
		{
		}
	case 739:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4116
		{
		}
	case 741:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4125
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4131
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4135
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 744:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4144
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 745:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4150
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4154
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 747:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4160
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4169
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4173
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4177
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 751:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4185
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4189
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 753:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4195
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4199
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 755:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4205
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4209
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 757:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4220
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4224
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 759:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4230
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4241
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4245
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4249
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4253
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4259
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4263
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 766:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4269
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 767:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4272
		{
		}
	case 768:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4282
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4286
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 770:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4293
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 771:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4297
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 772:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4301
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4305
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4308
		{
			unimplemented()
		}
	case 775:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4310
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4314
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4318
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[5].str}, Type: sqlDollar[1].union.colType()}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4322
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 779:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4326
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 780:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4330
		{
			sqlVAL.union.val = DNull
		}
	case 782:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4337
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 783:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4341
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4363
		{
			sqlVAL.str = ""
		}
	case 789:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4369
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 790:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4373
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
